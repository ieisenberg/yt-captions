[
  {
    "start": "0",
    "end": "97000"
  },
  {
    "text": "thank you",
    "start": "6180",
    "end": "8839"
  },
  {
    "text": "so today I'm going to talk to you about this programming language called Flix that we're building here at the Austin University uh also in collaboration with",
    "start": "11519",
    "end": "18240"
  },
  {
    "text": "researchers from Canada Germany and other places um so just a brief outline um we'll be",
    "start": "18240",
    "end": "26220"
  },
  {
    "text": "talking today a lot about effect systems but maybe first I ask how many here have written a program in a programming",
    "start": "26220",
    "end": "33000"
  },
  {
    "text": "language that has a type system if you could just raise your hand okay so that's perhaps not surprising",
    "start": "33000",
    "end": "38280"
  },
  {
    "text": "most of you all of you but how many has written a program in a language a program language that has an effect system raise your hand",
    "start": "38280",
    "end": "45800"
  },
  {
    "text": "half a hand Okay cool so um that's what we're going to talk about today and so I",
    "start": "46200",
    "end": "51660"
  },
  {
    "text": "think I don't know if you will all be Flix programmers in 10 years but I think at least some of you will be writing",
    "start": "51660",
    "end": "58559"
  },
  {
    "text": "programs in languages that have effect systems and that's the focus of today so first we'll see what is an effect system",
    "start": "58559",
    "end": "65100"
  },
  {
    "text": "then we'll talk about how effect systems can be used to reason about immutable memory then we'll see an example of how",
    "start": "65100",
    "end": "71820"
  },
  {
    "text": "such an effect system looks like in practice we'll apply to well how do you write an iterator finally we'll see something about how we",
    "start": "71820",
    "end": "78960"
  },
  {
    "text": "can benefit from these effect systems with something we call Purity reflection and lastly just sort of to tease the the",
    "start": "78960",
    "end": "85680"
  },
  {
    "text": "language we've been building I'll show you a lot of the tooling we also have part of the message being that that you",
    "start": "85680",
    "end": "91080"
  },
  {
    "text": "can actually start playing with flex today start using it if you want uh if there's one thing you should",
    "start": "91080",
    "end": "97560"
  },
  {
    "start": "97000",
    "end": "189000"
  },
  {
    "text": "remember from this talk though that is that inflix it's a functional language at its core so that means that",
    "start": "97560",
    "end": "103799"
  },
  {
    "text": "you write programs by writing functions and what is a function it's something that Maps an input to an output",
    "start": "103799",
    "end": "110340"
  },
  {
    "text": "now what makes a flicks special you could say is that it allows you to write",
    "start": "110340",
    "end": "115439"
  },
  {
    "text": "functions in three different ways you can pick the style if you want that",
    "start": "115439",
    "end": "120479"
  },
  {
    "text": "fits you the best so for example you can write a function in a functional way so you know some",
    "start": "120479",
    "end": "125640"
  },
  {
    "text": "algebraic data types a pattern matching these kinds of things if you're familiar with that you can write it in imperative",
    "start": "125640",
    "end": "132180"
  },
  {
    "text": "style so with loops mutable memory these kinds of things um and you can write it declaratively so",
    "start": "132180",
    "end": "138780"
  },
  {
    "text": "you can actually write a function as a small logic program and you can choose between each of these",
    "start": "138780",
    "end": "145080"
  },
  {
    "text": "Styles so you know if you're implementing a function this style is the one that's most appropriate for the specific problem you're solving",
    "start": "145080",
    "end": "150720"
  },
  {
    "text": "uh and of course you know the the user of your function or your functions well they don't know how you've implemented",
    "start": "150720",
    "end": "156239"
  },
  {
    "text": "it so the style you choose doesn't affect them they just see oh this is a function it takes a string and returns",
    "start": "156239",
    "end": "161879"
  },
  {
    "text": "an integer for example so this is the one thing to to remember so we're trying to have a functional",
    "start": "161879",
    "end": "167459"
  },
  {
    "text": "language but you choose the style inside each function okay now today I'll focus on the",
    "start": "167459",
    "end": "174060"
  },
  {
    "text": "imperative style so so we're writing functions but inside we want to use imperative",
    "start": "174060",
    "end": "179340"
  },
  {
    "text": "programming as we're used to okay now first let's talk about the flex",
    "start": "179340",
    "end": "185700"
  },
  {
    "text": "FX system so what is an effect system well you know a type system uh that's",
    "start": "185700",
    "end": "193080"
  },
  {
    "start": "189000",
    "end": "569000"
  },
  {
    "text": "something that describes the values in your program right so you have strings and integers and in most languages if",
    "start": "193080",
    "end": "199680"
  },
  {
    "text": "you know a variable has a type string well then that's a guarantee that you can depend on it won't suddenly turn out",
    "start": "199680",
    "end": "204720"
  },
  {
    "text": "that it's an integer at one time and you also use types to you can use types to Define you can Define your own types for",
    "start": "204720",
    "end": "211440"
  },
  {
    "text": "example if you have classes you can Define class for students and class for persons",
    "start": "211440",
    "end": "216959"
  },
  {
    "text": "and so on so type systems characterize values effect systems perhaps not surprisingly",
    "start": "216959",
    "end": "223920"
  },
  {
    "text": "they characterize the computational effects of running a program so for example how does this does this",
    "start": "223920",
    "end": "229680"
  },
  {
    "text": "program mutate memory how does it interact with the outside world if it does these kinds of things",
    "start": "229680",
    "end": "237480"
  },
  {
    "text": "now what's special about the type and effect system in Flix is that we have a strong focus on type inference so that",
    "start": "237480",
    "end": "242819"
  },
  {
    "text": "means that in principle you don't have to write any types the the compiler will figure it out",
    "start": "242819",
    "end": "248640"
  },
  {
    "text": "and the compiler will only give you an error if there is actually a type error something actually wrong with your program",
    "start": "248640",
    "end": "254459"
  },
  {
    "text": "now that said of course we do like to write some type signatures and today I'll show you lots of functions with some signatures on it but I'm just",
    "start": "254459",
    "end": "260340"
  },
  {
    "text": "saying the compiler will not force you to do extra labor to convince it that something is correct",
    "start": "260340",
    "end": "266220"
  },
  {
    "text": "now the flex type and effect system cares about three things essentially it",
    "start": "266220",
    "end": "272100"
  },
  {
    "text": "cares about pure functions so things that have no side effects then it cares about impure things so for example a",
    "start": "272100",
    "end": "278600"
  },
  {
    "text": "mutating memory or deleting a file these kinds of things and finally a new thing",
    "start": "278600",
    "end": "283800"
  },
  {
    "text": "we'll see today is something called effect polymorphism so this is the idea that whether a piece of code has side",
    "start": "283800",
    "end": "290460"
  },
  {
    "text": "effects or not could depend on another piece of code okay you see okay that's that's all fine",
    "start": "290460",
    "end": "296400"
  },
  {
    "text": "but you know why should I care about this why do I even care about this well if we track Purity so we know which",
    "start": "296400",
    "end": "303120"
  },
  {
    "text": "part of the program are pure then it allows us to understand the program better both us as programmers",
    "start": "303120",
    "end": "309720"
  },
  {
    "text": "and the compiler trying to optimize the program so for example I talked about how type",
    "start": "309720",
    "end": "315180"
  },
  {
    "text": "system gives certain guarantees and the same way effect systems gives guarantees for example if a function has no side",
    "start": "315180",
    "end": "320759"
  },
  {
    "text": "effects well then you know that the output is uniquely determined by the input",
    "start": "320759",
    "end": "326880"
  },
  {
    "text": "um you also use it inside the compiler so that's not something you see but our compiler knows that if an expression is",
    "start": "326880",
    "end": "333419"
  },
  {
    "text": "pure then it's more it can more easily move it around duplicated eliminated",
    "start": "333419",
    "end": "338940"
  },
  {
    "text": "run it in parallel without changing the meaning of your program now without an effect system you can",
    "start": "338940",
    "end": "344759"
  },
  {
    "text": "still do such optimizations but it's much harder and often well you don't know if you can apply the optimizations",
    "start": "344759",
    "end": "350039"
  },
  {
    "text": "you have to say oh I don't do it I'm not sure if I can do it uh finally uh point I'll get towards the",
    "start": "350039",
    "end": "356639"
  },
  {
    "text": "end is that by having information about these effects we can Empower Library authors",
    "start": "356639",
    "end": "362520"
  },
  {
    "text": "to um write richer libraries so for example if you're writing a library some data",
    "start": "362520",
    "end": "367680"
  },
  {
    "text": "structure Library well if you know that some function that's coming in is pure then maybe you know you can run it in parallel and you",
    "start": "367680",
    "end": "374039"
  },
  {
    "text": "might benefit now today that's really hard because if two pieces of code are interacting",
    "start": "374039",
    "end": "379199"
  },
  {
    "text": "well you don't know if this are side effects on something maybe in the Heap you can't run it in parallel then there could be race conditions or Deadlocks",
    "start": "379199",
    "end": "386039"
  },
  {
    "text": "all these kinds of problems so these are the kinds of things an effect system enables",
    "start": "386039",
    "end": "391860"
  },
  {
    "text": "okay so now let's look at some code and see see how it looks in practice and I mean this is a programming talk right so",
    "start": "391860",
    "end": "397860"
  },
  {
    "text": "if you have any questions also during just a ratio hand and complain or ask",
    "start": "397860",
    "end": "403020"
  },
  {
    "text": "okay so here in Flix we have the add function it takes two integers and it returns an",
    "start": "403020",
    "end": "410580"
  },
  {
    "text": "integer and there's some implementation here and so what we can say in Flix is that the add function has no side effects so",
    "start": "410580",
    "end": "417600"
  },
  {
    "text": "there we have this backslash and then we have the empty set of effects so this means that",
    "start": "417600",
    "end": "422940"
  },
  {
    "text": "nothing in here can can happen that affects the environment it's not going to delete the file anything like that",
    "start": "422940",
    "end": "428520"
  },
  {
    "text": "it's just a pure computation now in this case this was what the",
    "start": "428520",
    "end": "435360"
  },
  {
    "text": "function does itself we can also have a function like count so what does count do it's a little bit",
    "start": "435360",
    "end": "441840"
  },
  {
    "text": "more complicated well fundamentally we have some list L some elements a and then we want to pass in a function and I",
    "start": "441840",
    "end": "448800"
  },
  {
    "text": "want to count how many functions satisfy sorry how many elements satisfy this this function this predicate so now for",
    "start": "448800",
    "end": "455819"
  },
  {
    "text": "example you have a list of students right and you want to count well how many students have a passing grade",
    "start": "455819",
    "end": "461400"
  },
  {
    "text": "so if we were to write this where we explicitly written the empty effects set here",
    "start": "461400",
    "end": "466440"
  },
  {
    "text": "that means that the function that's passed to count should be pure it's not allowed to have any side effects",
    "start": "466440",
    "end": "472380"
  },
  {
    "text": "so that's something we can enforce if we want and then in this case we also say Okay",
    "start": "472380",
    "end": "477660"
  },
  {
    "text": "count itself doesn't have a side effect now well what if you do want to have a",
    "start": "477660",
    "end": "484800"
  },
  {
    "text": "side effect we can do that too so here I have a function say hello we get a name it's a string and we're",
    "start": "484800",
    "end": "491699"
  },
  {
    "text": "going to say hello to that person now printing to the console is the",
    "start": "491699",
    "end": "497160"
  },
  {
    "text": "simplest side effect you can imagine it's just going to make some texture upright but if we want to do this well we have",
    "start": "497160",
    "end": "503699"
  },
  {
    "text": "to put in the signature that I'm actually using IO so you're saying actually I'm going to affect the environment",
    "start": "503699",
    "end": "510780"
  },
  {
    "text": "and so that means everywhere I say hello is now used uh you know in in the in",
    "start": "510780",
    "end": "516719"
  },
  {
    "text": "your editor for example you have vs code plugin you can see oh here's a side effect it also means the compiler knows",
    "start": "516719",
    "end": "522120"
  },
  {
    "text": "that if there are some calls to say hello I can't just swap them because their order is probably important",
    "start": "522120",
    "end": "528180"
  },
  {
    "text": "okay so what if you try to cheat so for example what if you were to say oh I'm gonna print",
    "start": "528180",
    "end": "534240"
  },
  {
    "text": "uh and I'm going to say it's pure Printing and it's pure well that's not allowed that is a type",
    "start": "534240",
    "end": "540899"
  },
  {
    "text": "error similar to assigning an integer to a string and so on so here we're told well an impure function has been",
    "start": "540899",
    "end": "546360"
  },
  {
    "text": "declared as pure it's not allowed the system gives us a guarantee",
    "start": "546360",
    "end": "551760"
  },
  {
    "text": "just as a type system okay so guys are good",
    "start": "551760",
    "end": "556920"
  },
  {
    "text": "now it gets a little bit more complicated is that if you've written some Java programming with streams or",
    "start": "556920",
    "end": "564120"
  },
  {
    "text": "maybe you're writing JavaScript and you have higher order functions we saw count for example another example could be map",
    "start": "564120",
    "end": "570839"
  },
  {
    "start": "569000",
    "end": "666000"
  },
  {
    "text": "then if we think about the map function what does it do well I have a list of",
    "start": "570839",
    "end": "576620"
  },
  {
    "text": "A's and I'm going to convert it to a list of B's so again imagine I have a list of students and I'm going to",
    "start": "576620",
    "end": "581640"
  },
  {
    "text": "convert it to a list of grades by picking out or Computing the grade for each student that's what you typically",
    "start": "581640",
    "end": "586800"
  },
  {
    "text": "use the map function for but now if you call map well is that going to be Pure or impure",
    "start": "586800",
    "end": "594600"
  },
  {
    "text": "that depends on the argument because if you call map the pure function the whole thing will be pure if",
    "start": "594600",
    "end": "600480"
  },
  {
    "text": "you call it with an impure thing the whole thing will be impure so this is what we call a fancy word",
    "start": "600480",
    "end": "605940"
  },
  {
    "text": "effect polymorphism it will also say it's effective generic would perhaps be another way to say it",
    "start": "605940",
    "end": "611640"
  },
  {
    "text": "and so here we're really just expressing that if the function f has to affect EF then",
    "start": "611640",
    "end": "617580"
  },
  {
    "text": "the whole map function here has the effect EF to make it a bit more concrete",
    "start": "617580",
    "end": "622980"
  },
  {
    "text": "if I have some lists and I map the function you know I'm multiplying X by itself and adding 42. well this function",
    "start": "622980",
    "end": "630120"
  },
  {
    "text": "is pure so this whole thing here will be pure on the other hand if I for some reason",
    "start": "630120",
    "end": "635580"
  },
  {
    "text": "mapped a print function and printing every element well then the whole expression will be impure",
    "start": "635580",
    "end": "642180"
  },
  {
    "text": "so this is a very important property to have in in any language I would argue that has an effect system because we",
    "start": "642180",
    "end": "648180"
  },
  {
    "text": "often write code that's generic in whether or not it has an effect whether it has an effect depends on something",
    "start": "648180",
    "end": "653220"
  },
  {
    "text": "else and so that's something that's important to capture and we can capture that",
    "start": "653220",
    "end": "659060"
  },
  {
    "text": "we can also use the effects system to catch some some simple bugs",
    "start": "660200",
    "end": "665579"
  },
  {
    "text": "um here's uh here's a function um and well what are we supposed to do we",
    "start": "665579",
    "end": "672540"
  },
  {
    "start": "666000",
    "end": "749000"
  },
  {
    "text": "check permission for something maybe this you know there is some check permission function and if that goes",
    "start": "672540",
    "end": "678540"
  },
  {
    "text": "well whatever that means then we print access guarantors right now I haven't shown you the definition",
    "start": "678540",
    "end": "685440"
  },
  {
    "text": "of a check permission but actually it returns a Boolean that you're supposed to use",
    "start": "685440",
    "end": "691500"
  },
  {
    "text": "and so what Flix will say here is that this is a useless expression",
    "start": "691500",
    "end": "696720"
  },
  {
    "text": "because check permission is pure it has no side effects doesn't interact the environment",
    "start": "696720",
    "end": "702360"
  },
  {
    "text": "so writing it here just calling it and throwing the result away is never sensible",
    "start": "702360",
    "end": "710180"
  },
  {
    "text": "now this goes a bit beyond what you can see in you know there are some linters with Java and JavaScript and so on where",
    "start": "710700",
    "end": "716820"
  },
  {
    "text": "they talk about oh you know this return type must be used and that's fine and that's also important but this here can",
    "start": "716820",
    "end": "723360"
  },
  {
    "text": "talk about essentially having expressions or statements in your program that do not have any effect",
    "start": "723360",
    "end": "729779"
  },
  {
    "text": "and so it gives you more warnings if you've written something that's meaningless and I think this is especially important",
    "start": "729779",
    "end": "735600"
  },
  {
    "text": "when you are using a libraries for example that you haven't designed yourself because you might not be sure",
    "start": "735600",
    "end": "740820"
  },
  {
    "text": "exactly about the API and so this is much more aggressive at saying No this code doesn't do anything",
    "start": "740820",
    "end": "747740"
  },
  {
    "text": "okay so that was a very brief introduction to effect systems um",
    "start": "748620",
    "end": "754200"
  },
  {
    "start": "749000",
    "end": "1031000"
  },
  {
    "text": "we saw that we can capture when functions are pure when they're impure and here by mpu I really mean any kind",
    "start": "754200",
    "end": "759240"
  },
  {
    "text": "of side effect deleting a file and talking to the network and mutating a state and so on",
    "start": "759240",
    "end": "767279"
  },
  {
    "text": "and finally we saw that it was important to have effect polymorphism this function can be effect generic",
    "start": "767279",
    "end": "774860"
  },
  {
    "text": "um now um one place where we already use this in Flix is that when you implement",
    "start": "775680",
    "end": "781260"
  },
  {
    "text": "for example equals and hash code these kinds of functions compared to string then we force those functions to be a to",
    "start": "781260",
    "end": "788700"
  },
  {
    "text": "be pure and this is actually important because there's been several mistakes in other",
    "start": "788700",
    "end": "794160"
  },
  {
    "text": "languages about you know what can what can equals actually do so does anyone know what the equals function on a Java",
    "start": "794160",
    "end": "799920"
  },
  {
    "text": "net URL does one or two URL objects equal in Java",
    "start": "799920",
    "end": "806480"
  },
  {
    "text": "so actually if you give it to a UL objects in Java you know google.com and something else it has to resolve them to",
    "start": "806820",
    "end": "814200"
  },
  {
    "text": "an IP address right so actually it goes on the internet and it looks up uh you",
    "start": "814200",
    "end": "820560"
  },
  {
    "text": "know what IP address does this resolve to and if they're the same then the objects are the same that means you can have a set right like",
    "start": "820560",
    "end": "826740"
  },
  {
    "text": "a hash set in Java of of with some URL objects in it and if you don't have access to the network",
    "start": "826740",
    "end": "832800"
  },
  {
    "text": "and you try to put in an element then it goes wrong now this is of course a horrible design",
    "start": "832800",
    "end": "839279"
  },
  {
    "text": "and and and you know in the Java bug tracker right there is a 15 year old podcast an 18 year old box saying this",
    "start": "839279",
    "end": "846839"
  },
  {
    "text": "is insane right and everyone is like this is completely insane but it's too late to change it",
    "start": "846839",
    "end": "852240"
  },
  {
    "text": "right um but even if it hadn't been like that right nothing really ensures that you",
    "start": "852240",
    "end": "858120"
  },
  {
    "text": "write meaningful equals and equal functions and hash functions but in Flix we force them to be pure",
    "start": "858120",
    "end": "863399"
  },
  {
    "text": "and that means we can actually trust that when they're used to implement a hash set or things like this that elements",
    "start": "863399",
    "end": "869639"
  },
  {
    "text": "um you know you can find them again right you don't end up with this situation where you put things into a map and later you can't pull it",
    "start": "869639",
    "end": "875700"
  },
  {
    "text": "out because something has changed in the Heap some of you will have seen this box and will know the pain",
    "start": "875700",
    "end": "881399"
  },
  {
    "text": "okay so so that that's one way we use the effect system",
    "start": "881399",
    "end": "886940"
  },
  {
    "text": "all right so now I'll talk a bit about a reason region-based memory but maybe first to",
    "start": "887100",
    "end": "894060"
  },
  {
    "text": "to motivate this I'll ask how many have programmed sort of with asynchrony or with futures of these things if you",
    "start": "894060",
    "end": "900360"
  },
  {
    "text": "could just raise your hand okay so many of you have so the first time you were exposed to this at least I",
    "start": "900360",
    "end": "906540"
  },
  {
    "text": "was just like okay I get a future back and now I wonder you know I wanna I wanna get this thing out right but then",
    "start": "906540",
    "end": "913079"
  },
  {
    "text": "oh no you you map over it and you start writing this asynchronous diary so Futures have this problem that they",
    "start": "913079",
    "end": "919500"
  },
  {
    "text": "proliferate through the program right as soon as something becomes asynchronous it goes everywhere right",
    "start": "919500",
    "end": "926399"
  },
  {
    "text": "I mean there are things you can do right but you know sort of in a simple model it goes everywhere now we have the same problem here with",
    "start": "926399",
    "end": "933120"
  },
  {
    "text": "uh impurity because I just said that if you mutate memory so",
    "start": "933120",
    "end": "938880"
  },
  {
    "text": "if you allocate an array and you mutate it then you're impure that means if you call that function",
    "start": "938880",
    "end": "944220"
  },
  {
    "text": "then the caller is impure exactly like in the future scenario and those colors are impure so now suddenly your entire",
    "start": "944220",
    "end": "951060"
  },
  {
    "text": "program is marked as impure with the i o effect so then you haven't gained anything really",
    "start": "951060",
    "end": "956940"
  },
  {
    "text": "it's just become a huge mess",
    "start": "956940",
    "end": "960139"
  },
  {
    "text": "but really if you think about it what we often want to do is that I'm writing a small function and inside I'd",
    "start": "962100",
    "end": "968820"
  },
  {
    "text": "like to do some imperative programming I want to allocate some some data structures like some arrays",
    "start": "968820",
    "end": "973980"
  },
  {
    "text": "some hash Maps whatever and I'm going to do some computation on them and then at some point I'm done and I'm going to",
    "start": "973980",
    "end": "979440"
  },
  {
    "text": "return the result but by the time I return the results those mutable data structures you know",
    "start": "979440",
    "end": "985440"
  },
  {
    "text": "could no longer be in use they can be deallocated and that actually means that seen from",
    "start": "985440",
    "end": "990720"
  },
  {
    "text": "the outside my function is pure it's just inside I'm allowed to use some mutable state",
    "start": "990720",
    "end": "997440"
  },
  {
    "text": "and so this is what I mean by region-based memory so the idea here",
    "start": "997440",
    "end": "1005060"
  },
  {
    "text": "is that we will give you a mechanism we can say okay now I'm going to write in an imperative Style",
    "start": "1005060",
    "end": "1010940"
  },
  {
    "text": "and you get like a lexical block and in there you can allocate your mutable memory you can work on it",
    "start": "1010940",
    "end": "1017420"
  },
  {
    "text": "and at the end you return some results the immutable memory is thrown away the type and effect system checks that's",
    "start": "1017420",
    "end": "1023300"
  },
  {
    "text": "the case and then you're actually allowed to be pure now I think an example will demonstrate",
    "start": "1023300",
    "end": "1029360"
  },
  {
    "text": "this much better so let's say we wanted to sort a list",
    "start": "1029360",
    "end": "1034400"
  },
  {
    "start": "1031000",
    "end": "1137000"
  },
  {
    "text": "so if I'm giving a list here it's an immutable linked list of students or something maybe I want to",
    "start": "1034400",
    "end": "1041298"
  },
  {
    "text": "sort it by I don't know again they're grades now sorting a linked list is not a good",
    "start": "1041299",
    "end": "1046640"
  },
  {
    "text": "idea what you want when you sort things if you talk to algorithm people if you want to put it in an array and then you",
    "start": "1046640",
    "end": "1052400"
  },
  {
    "text": "want to use like quick sort or merge sort or something like this which are very imperative algorithm you know you're shuffling elements around this is",
    "start": "1052400",
    "end": "1058400"
  },
  {
    "text": "the fast way to do it this is the right way to do it uh but luckily we can actually Express",
    "start": "1058400",
    "end": "1063860"
  },
  {
    "text": "this idea so there's this new construct called region and it says okay I'm introducing",
    "start": "1063860",
    "end": "1069200"
  },
  {
    "text": "a region here so that is permission to do some imperative programming inside this block",
    "start": "1069200",
    "end": "1074299"
  },
  {
    "text": "and I get reaching capability here and I use that to say okay take this",
    "start": "1074299",
    "end": "1079940"
  },
  {
    "text": "list remember it's an immutable list you can't change it and convert it to a mutable array so an array where I can",
    "start": "1079940",
    "end": "1085640"
  },
  {
    "text": "swap everything around and I want it to belong to the region RC",
    "start": "1085640",
    "end": "1090860"
  },
  {
    "text": "then sort it in an imperative way the exclamation mark here just means that actually it's going to be swapping",
    "start": "1090860",
    "end": "1096080"
  },
  {
    "text": "elements around and inside this method that I'm not showing you know is quick sort right",
    "start": "1096080",
    "end": "1101539"
  },
  {
    "text": "then the array is now sorted and I return it back as a as a list",
    "start": "1101539",
    "end": "1106580"
  },
  {
    "text": "and so this way I kind of got the the benefits of both functional",
    "start": "1106580",
    "end": "1111980"
  },
  {
    "text": "imperative programming from the outside sort is a pure function notice there is no effect here",
    "start": "1111980",
    "end": "1117500"
  },
  {
    "text": "but inside I just did the thing you would do I use the Rays",
    "start": "1117500",
    "end": "1123760"
  },
  {
    "text": "and I also get the right performance if you try to sort a linked list the mutable link list you couldn't get the N",
    "start": "1125360",
    "end": "1131960"
  },
  {
    "text": "log n complexity you would expect okay another example",
    "start": "1131960",
    "end": "1138559"
  },
  {
    "start": "1137000",
    "end": "1201000"
  },
  {
    "text": "this is a stupid example but just to illustrate a point let's say I wanted to add two numbers another way I'm going to",
    "start": "1138559",
    "end": "1143960"
  },
  {
    "text": "do it is that I'm going to allocate an array put them into the array and then swap for the entries in the array and",
    "start": "1143960",
    "end": "1150380"
  },
  {
    "text": "then pull them out and add them obviously there's no reason to do any of this but just for the purpose of",
    "start": "1150380",
    "end": "1156200"
  },
  {
    "text": "demonstration so the sum function here is pure again there is no effect I say here region starts I want to",
    "start": "1156200",
    "end": "1162620"
  },
  {
    "text": "allocate an array this is just a Syntax for an array of length two the first element is X and then Y and it belongs",
    "start": "1162620",
    "end": "1168860"
  },
  {
    "text": "to region RC then I'm going to call some swap function that's going to swap the first",
    "start": "1168860",
    "end": "1174740"
  },
  {
    "text": "two entries in an imperative way so it's actually changing the way and at the end I index them and I add them",
    "start": "1174740",
    "end": "1182299"
  },
  {
    "text": "so this adds two numbers in a stupid way um so the point is this is pure",
    "start": "1182299",
    "end": "1188299"
  },
  {
    "text": "but now you might ask well what about the swap function here what does its",
    "start": "1188299",
    "end": "1193400"
  },
  {
    "text": "signature look like because clearly swap can't be pure right after all it's mutating its argument",
    "start": "1193400",
    "end": "1200900"
  },
  {
    "text": "and so the swap function looks like this uh it takes the two indices we're talking about I and J",
    "start": "1200900",
    "end": "1208160"
  },
  {
    "start": "1201000",
    "end": "1250000"
  },
  {
    "text": "then it takes an array but notice now that the array carries not only the type of the element t",
    "start": "1208160",
    "end": "1214220"
  },
  {
    "text": "it could be student it also carries this region that I talked about",
    "start": "1214220",
    "end": "1220460"
  },
  {
    "text": "and then due to its implementation it has an effect in that region",
    "start": "1220460",
    "end": "1225799"
  },
  {
    "text": "so that we know the swap function touches memory in the region R that's",
    "start": "1225799",
    "end": "1231140"
  },
  {
    "text": "the main point then the implementation is kind of what you expect I pull out the elements and then I write them back",
    "start": "1231140",
    "end": "1236600"
  },
  {
    "text": "in in the opposite order but the main point I want to make is that",
    "start": "1236600",
    "end": "1241640"
  },
  {
    "text": "the array belongs to a region and the swap function has an effect in that region",
    "start": "1241640",
    "end": "1247659"
  },
  {
    "text": "uh just to give another example don't worry too much about the code but for example if you want to write a two",
    "start": "1249320",
    "end": "1254840"
  },
  {
    "start": "1250000",
    "end": "1315000"
  },
  {
    "text": "string right very common thing um so I have a list and I want to return",
    "start": "1254840",
    "end": "1260660"
  },
  {
    "text": "the string representation right so maybe you've heard that you shouldn't concatenate strings right concatenating",
    "start": "1260660",
    "end": "1265940"
  },
  {
    "text": "strings is not so good at least on Java for example because concatenating two strings means you have to like copy them",
    "start": "1265940",
    "end": "1271580"
  },
  {
    "text": "and so if you you know do that a lot it's a performance issue so instead you should use a string Builder well what is",
    "start": "1271580",
    "end": "1278360"
  },
  {
    "text": "a string Builder it's really just a temporary object that you use to put some strings into it and at some point",
    "start": "1278360",
    "end": "1284000"
  },
  {
    "text": "you're done and you say to string to the string Builder and then the result comes out as a string",
    "start": "1284000",
    "end": "1289039"
  },
  {
    "text": "and so it's really a good use case of sort of the idea I'm selling here right that we can introduce I should have",
    "start": "1289039",
    "end": "1295220"
  },
  {
    "text": "called it RC but anyway we can introduce a region I allocate a string build that belongings to that region I do lots of",
    "start": "1295220",
    "end": "1301700"
  },
  {
    "text": "stuff with it I'm changing it whatever but at the end strings comes out the region is over and the string Builder is",
    "start": "1301700",
    "end": "1307940"
  },
  {
    "text": "is gone and so the two string function remains pure",
    "start": "1307940",
    "end": "1313299"
  },
  {
    "start": "1315000",
    "end": "1529000"
  },
  {
    "text": "all right so the idea how the region-based memory is",
    "start": "1315140",
    "end": "1320480"
  },
  {
    "text": "that if we take the effects system as I presented in one it is not good enough you can't just",
    "start": "1320480",
    "end": "1325820"
  },
  {
    "text": "have that because you get this future or asynchrony problem where if you touch something that has",
    "start": "1325820",
    "end": "1331700"
  },
  {
    "text": "just a small effect on one array then you become impure but then everyone who uses you become impure then the whole",
    "start": "1331700",
    "end": "1337220"
  },
  {
    "text": "program becomes impure and that was not the point so to recover from that we need one more",
    "start": "1337220",
    "end": "1343640"
  },
  {
    "text": "new idea and that is this that you can say here I'm going to do a bit of imperative programming I'm going to",
    "start": "1343640",
    "end": "1349039"
  },
  {
    "text": "allocate sort of a small part of the heat where I can have mutable things but once the region is over that thing",
    "start": "1349039",
    "end": "1354320"
  },
  {
    "text": "goes out of scope and I return the results and then my function actually is allowed to be pure as seen from the outside",
    "start": "1354320",
    "end": "1362559"
  },
  {
    "text": "right so really we can pretend so now in Flix you can pretend to be a functional programmer but every single function you",
    "start": "1363500",
    "end": "1369559"
  },
  {
    "text": "write could in principle you know start by saying here's a region allocate some mutable hash Maps do some iteration and",
    "start": "1369559",
    "end": "1375559"
  },
  {
    "text": "then you know return some results so we really get the best of both worlds",
    "start": "1375559",
    "end": "1381380"
  },
  {
    "text": "you get the performance you get potentially the more natural style of imperative programming but from the",
    "start": "1381380",
    "end": "1386900"
  },
  {
    "text": "outside people can still trust that you know given one input you give this always give the same output",
    "start": "1386900",
    "end": "1393940"
  },
  {
    "text": "okay okay so to look at how you program with",
    "start": "1394760",
    "end": "1401240"
  },
  {
    "text": "these things um we're gonna look at a case study uh how you can express iterators",
    "start": "1401240",
    "end": "1406820"
  },
  {
    "text": "now this is a bit complicated I must say so it sort of shows a lot a lot of",
    "start": "1406820",
    "end": "1412760"
  },
  {
    "text": "richness there might be details that are confusing but on the other hand each reader is often hidden from you and",
    "start": "1412760",
    "end": "1419120"
  },
  {
    "text": "actually towards the end I'll just say well you don't actually Implement iterators yourself right they're provided by the",
    "start": "1419120",
    "end": "1424400"
  },
  {
    "text": "library but I wanted to show it because I wanted to show that these ideas can scale to things that are quite complex",
    "start": "1424400",
    "end": "1431500"
  },
  {
    "text": "okay so let's just remind ourselves like what is an iterator uh well in my mind it's like a mutable",
    "start": "1431659",
    "end": "1437299"
  },
  {
    "text": "data structure that represents a stream of elements so something where you can pull elements",
    "start": "1437299",
    "end": "1442880"
  },
  {
    "text": "out and part of pulling elements Out means that you're changing the iterator right like you're you're destroying it",
    "start": "1442880",
    "end": "1448940"
  },
  {
    "text": "in some sense right you know you get one element out and now the iterator has advanced it's no longer the same iterator at some point the iterator will",
    "start": "1448940",
    "end": "1456260"
  },
  {
    "text": "end and then it's useless right but why do we use them well they can be",
    "start": "1456260",
    "end": "1461659"
  },
  {
    "text": "very efficient they give us an efficient way to iterate through uh different collections so what I mean by this is",
    "start": "1461659",
    "end": "1467299"
  },
  {
    "text": "like you can have an iterator over set an iterate over a map and iterator over something else",
    "start": "1467299",
    "end": "1472520"
  },
  {
    "text": "but you don't have to care because it's just an iterator you don't know where it's drawing its data from",
    "start": "1472520",
    "end": "1477620"
  },
  {
    "text": "so that's why they're useful now with iterators you should keep in",
    "start": "1477620",
    "end": "1482720"
  },
  {
    "text": "mind that kind of two operations on them there are what I call Terminal A parenthesis eager",
    "start": "1482720",
    "end": "1489860"
  },
  {
    "text": "and what I call non-terminal Operations so eager operations terminal operations are things that evaluate the full",
    "start": "1489860",
    "end": "1496220"
  },
  {
    "text": "iterator right so if you have an iterator of integers and you say sum like you want to compute",
    "start": "1496220",
    "end": "1502159"
  },
  {
    "text": "the sum well that's going to evaluate the complete iterator adding up all the elements and then hopefully you're done using the",
    "start": "1502159",
    "end": "1508039"
  },
  {
    "text": "iterator but if you do for example filtering well filtering operation is something that's",
    "start": "1508039",
    "end": "1513320"
  },
  {
    "text": "delayed it's going to happen not now but a little bit later when people start asking for elements from the iterator",
    "start": "1513320",
    "end": "1520539"
  },
  {
    "text": "and so this is a rich data structure and it it puts some demands on the effect",
    "start": "1521539",
    "end": "1526700"
  },
  {
    "text": "system that we'll see um so here's the essence of what an",
    "start": "1526700",
    "end": "1532760"
  },
  {
    "start": "1529000",
    "end": "1792000"
  },
  {
    "text": "iterator is in flicks when you have an effect system and there are sort of two new things so",
    "start": "1532760",
    "end": "1537980"
  },
  {
    "text": "the one thing you might have expected is that we need the type of elements you can have an iterator over students for example",
    "start": "1537980",
    "end": "1545659"
  },
  {
    "text": "but we need two more things we need the effect so these are effects that are suspended",
    "start": "1545659",
    "end": "1551960"
  },
  {
    "text": "in the iterator so this is for example if you have filtered and you're filtered with an",
    "start": "1551960",
    "end": "1557000"
  },
  {
    "text": "impure function that means that there's an effect waiting there that's going to happen once you apply a terminal operation",
    "start": "1557000",
    "end": "1563360"
  },
  {
    "text": "and then the other thing is that the iterator needs some each reader needs some mutable memory",
    "start": "1563360",
    "end": "1569900"
  },
  {
    "text": "itself to do its job because it probably needs to keep track of where it is in the underlying",
    "start": "1569900",
    "end": "1574940"
  },
  {
    "text": "collection but I think the examples here will make",
    "start": "1574940",
    "end": "1581240"
  },
  {
    "text": "make that more clear um so just to show the point I want to make here is that",
    "start": "1581240",
    "end": "1588919"
  },
  {
    "text": "the effect system actually clarifies things for us now I understand it's like a new thing",
    "start": "1588919",
    "end": "1594559"
  },
  {
    "text": "so right now it just looks more cumbersome and you know something you have to deal with but it actually clarifies how our code works so for",
    "start": "1594559",
    "end": "1602299"
  },
  {
    "text": "example for the sum function it says give me an iterator that produces integers with some latent",
    "start": "1602299",
    "end": "1608960"
  },
  {
    "text": "effects some suspended effect EF that also uses region R then if you call sum",
    "start": "1608960",
    "end": "1614659"
  },
  {
    "text": "it's going to have it's going to release the suspended effect and it's going to change R potentially",
    "start": "1614659",
    "end": "1621880"
  },
  {
    "text": "now the same thing is true for to list exactly the same we see that the",
    "start": "1622400",
    "end": "1627559"
  },
  {
    "text": "terminal operations release the suspended effects the same for for each",
    "start": "1627559",
    "end": "1634220"
  },
  {
    "text": "gets a little bit more complicated here right because for each means like now we are applying a function eagerly to every",
    "start": "1634220",
    "end": "1640159"
  },
  {
    "text": "element so that function itself could have some effect but really all it just says is that now we get the effect that was suspended in",
    "start": "1640159",
    "end": "1647240"
  },
  {
    "text": "the iterator ef1 together with the effect of f if it has any and the region",
    "start": "1647240",
    "end": "1652520"
  },
  {
    "text": "R might be touched now on the other hand the non-terminal",
    "start": "1652520",
    "end": "1658159"
  },
  {
    "text": "operations look different and this is really the key so if I have an iterator",
    "start": "1658159",
    "end": "1663380"
  },
  {
    "text": "and it has suspended effect ef1 I apply a function to it I'm filtering that filter function maybe has some",
    "start": "1663380",
    "end": "1670460"
  },
  {
    "text": "effect well you see there's no backslash here that actually means this filter function",
    "start": "1670460",
    "end": "1675860"
  },
  {
    "text": "is pure because nothing is happening rather it returns a new iterator where",
    "start": "1675860",
    "end": "1682059"
  },
  {
    "text": "the suspended effect is now the original suspended effect from the iterator",
    "start": "1682059",
    "end": "1687500"
  },
  {
    "text": "plus the new suspended effects from the function we're using to filter with",
    "start": "1687500",
    "end": "1693880"
  },
  {
    "text": "so by looking at these two these two categories sorry and the map function is exactly the same my point is just that",
    "start": "1693919",
    "end": "1700220"
  },
  {
    "text": "you can now see from the signature once you learn how to read these things you can see immediately ah okay this operation is happening later and this",
    "start": "1700220",
    "end": "1706640"
  },
  {
    "text": "operation is happening now see how I'm doing for time okay",
    "start": "1706640",
    "end": "1714860"
  },
  {
    "text": "um yeah so I'll just go through these examples okay so if I have a set for example",
    "start": "1714860",
    "end": "1721760"
  },
  {
    "text": "and I have this region I allocate an iterator over the set and I map this function incrementing and",
    "start": "1721760",
    "end": "1728120"
  },
  {
    "text": "I say to lists well I get out the list two three four",
    "start": "1728120",
    "end": "1733220"
  },
  {
    "text": "it's not really that surprising I get an iterator right the set is one two three I'm mapping a function that increments",
    "start": "1733220",
    "end": "1738799"
  },
  {
    "text": "the elements and then I convert iterator to a list so I get out a list where the elements have been",
    "start": "1738799",
    "end": "1745039"
  },
  {
    "text": "incremented good um",
    "start": "1745039",
    "end": "1750260"
  },
  {
    "text": "now the only change I made now is that I added this print line hi",
    "start": "1750260",
    "end": "1755659"
  },
  {
    "text": "right um and that made this this thing impure here",
    "start": "1755659",
    "end": "1762559"
  },
  {
    "text": "and so now the program will print a high high high and then it will return the same list as before",
    "start": "1762559",
    "end": "1768679"
  },
  {
    "text": "but behind the scenes or if you were to hover in vs code hover on this you could see that the its rate of",
    "start": "1768679",
    "end": "1775340"
  },
  {
    "text": "returned by map now has this suspended print okay so both the compiler knows this and",
    "start": "1775340",
    "end": "1780860"
  },
  {
    "text": "you can know this if you for example hover over the expressions",
    "start": "1780860",
    "end": "1785860"
  },
  {
    "text": "all right for time I'll skip the next part just a few slides talk about that later",
    "start": "1786320",
    "end": "1794000"
  },
  {
    "start": "1792000",
    "end": "1966000"
  },
  {
    "text": "um okay so I just showed that we can actually Express iterators in a language",
    "start": "1794000",
    "end": "1800360"
  },
  {
    "text": "that has a type and effect system Things become a little bit more complicated but that's actually a good thing because the",
    "start": "1800360",
    "end": "1806240"
  },
  {
    "text": "iterator API forces us to decide is this effect happening now or is it",
    "start": "1806240",
    "end": "1812720"
  },
  {
    "text": "happening when the iterator is being pulled through at the end so now certainly from the table and",
    "start": "1812720",
    "end": "1819140"
  },
  {
    "text": "effect signatures we can see is this a terminal operation or non-terminal operation we don't need to read the API the types",
    "start": "1819140",
    "end": "1825559"
  },
  {
    "text": "themselves tells us okay",
    "start": "1825559",
    "end": "1830919"
  },
  {
    "text": "now the last thing I'll show is another way we can benefit from these effect systems and it's how Library authors and",
    "start": "1831200",
    "end": "1838220"
  },
  {
    "text": "or the Flix compiler can give us some more performance in certain",
    "start": "1838220",
    "end": "1843740"
  },
  {
    "text": "situations and so the idea here is a special form of reflection",
    "start": "1843740",
    "end": "1850159"
  },
  {
    "text": "where um all right okay so I have some intro first okay so I just want to say first most languages that",
    "start": "1850159",
    "end": "1857179"
  },
  {
    "text": "you know right like Java JavaScript c-sharp all the major languages they are",
    "start": "1857179",
    "end": "1862460"
  },
  {
    "text": "they are eager and sequential so it means you know they don't use less elevation to use evaluation and there's",
    "start": "1862460",
    "end": "1868220"
  },
  {
    "text": "like one thread running now what if you want some lacier parallel evaluation well in Java for",
    "start": "1868220",
    "end": "1875779"
  },
  {
    "text": "example you can reach for the stream API but",
    "start": "1875779",
    "end": "1881059"
  },
  {
    "text": "um in with the stream API there's this problem of side effects right so if you look at the Java stream API it mentions",
    "start": "1881059",
    "end": "1887720"
  },
  {
    "text": "the word side effect 18 times and it uses very scary language like uh",
    "start": "1887720",
    "end": "1893899"
  },
  {
    "text": "that basically says like don't do it and you know deadlock and race conditions and surprising results and other order",
    "start": "1893899",
    "end": "1900980"
  },
  {
    "text": "of execution and so on so if you ever use like a Java stream and you added a print you should be careful",
    "start": "1900980",
    "end": "1908000"
  },
  {
    "text": "stat is problematic okay so that's what I said",
    "start": "1908000",
    "end": "1914120"
  },
  {
    "text": "um another question is if we have a effect system can we do better",
    "start": "1914120",
    "end": "1919399"
  },
  {
    "text": "all right um you know on the one hand you know why do I have to reach for these streams and on the other hand you know I you know",
    "start": "1919399",
    "end": "1926779"
  },
  {
    "text": "I've how can I know if it's safe to do something in parallel or not right you really can't know",
    "start": "1926779",
    "end": "1933580"
  },
  {
    "text": "so the idea here is that the library author who presumably has a bit more knowledge about you know the data",
    "start": "1934700",
    "end": "1940760"
  },
  {
    "text": "structure to implementing and so on they might know when it would be Advantage at advantages to do something in a lazy way",
    "start": "1940760",
    "end": "1947000"
  },
  {
    "text": "or to do something in a parallel way but what they have lacked is the ability to know if it's safe to do so",
    "start": "1947000",
    "end": "1952460"
  },
  {
    "text": "so even if they know artists operation are really right to do it in parallel well they can't know if they can do that",
    "start": "1952460",
    "end": "1958820"
  },
  {
    "text": "then they can only write in the documentation ah this this runs in parallel be very careful",
    "start": "1958820",
    "end": "1964220"
  },
  {
    "text": "then you get box but what we can do is that we can reflect on the purity of a function",
    "start": "1964220",
    "end": "1970760"
  },
  {
    "start": "1966000",
    "end": "2086000"
  },
  {
    "text": "argument so here I have a map function it's operating on a map so imagine you",
    "start": "1970760",
    "end": "1978080"
  },
  {
    "text": "have like some again from the students to grades and",
    "start": "1978080",
    "end": "1983120"
  },
  {
    "text": "you're applying a function to all the grades I don't know maybe you're Computing you know if it's the greatest five the student has failed and if it's",
    "start": "1983120",
    "end": "1989659"
  },
  {
    "text": "you know six the students have passed so you're trying to transform like a map from students to grades into another map",
    "start": "1989659",
    "end": "1994700"
  },
  {
    "text": "from students to booleans let's say and the key thing here is that we have this type map construct where I can look",
    "start": "1994700",
    "end": "2003220"
  },
  {
    "text": "at F and then I can ask actually does does f here if it's pure then I'm going to call it g",
    "start": "2003220",
    "end": "2011260"
  },
  {
    "text": "don't worry why I rename it that's not important I'm going to call it G and now G I know it's pure so I'm going to call",
    "start": "2011260",
    "end": "2017500"
  },
  {
    "text": "it this power map and it's gonna in parallel um reconstruct the map",
    "start": "2017500",
    "end": "2024778"
  },
  {
    "text": "on the other hand if there are some side effects then I don't dare to do anything in parallel I could be changing the meaning",
    "start": "2026140",
    "end": "2031779"
  },
  {
    "text": "of the program so just to give you a small example here",
    "start": "2031779",
    "end": "2037059"
  },
  {
    "text": "um here I create some keys I just you know keys from one to a thousand some values",
    "start": "2037059",
    "end": "2042580"
  },
  {
    "text": "one to a thousand and I turn them into a map so now I have a very boring map it just Maps one to one two to two three to",
    "start": "2042580",
    "end": "2049060"
  },
  {
    "text": "three and so on and then I change the map by saying I want to increment all the all the values",
    "start": "2049060",
    "end": "2055658"
  },
  {
    "text": "but incrementing them I'm also going to print them and because I'm printing right that's a",
    "start": "2055659",
    "end": "2061419"
  },
  {
    "text": "side effect I have to do very careful so we shouldn't do anything in parallel so if you run this program it will",
    "start": "2061419",
    "end": "2066580"
  },
  {
    "text": "dutifully print one two three and then return the updated map and very importantly the prints you see",
    "start": "2066580",
    "end": "2072878"
  },
  {
    "text": "them in order left to right following the order of the map and they could never be happening in",
    "start": "2072879",
    "end": "2077980"
  },
  {
    "text": "parallel so like imagine you're printing multiple lines and certainly the output would be interleaved that cannot happen",
    "start": "2077980",
    "end": "2085358"
  },
  {
    "text": "on the other hand exact same program but if if I didn't have the print it was pure well it still Returns the same map but",
    "start": "2085359",
    "end": "2092919"
  },
  {
    "start": "2086000",
    "end": "2143000"
  },
  {
    "text": "now internally it's going to spawn a number of threads equal to the number of cores and it's just going to rebuild the",
    "start": "2092919",
    "end": "2098680"
  },
  {
    "text": "map in parallel so you get parallelism for free you as the user didn't have to do anything",
    "start": "2098680",
    "end": "2106000"
  },
  {
    "text": "so now you can ask yourself right in all the code you've written how many places could there have been some parallelism",
    "start": "2106000",
    "end": "2112420"
  },
  {
    "text": "but you didn't reach for it because you were not sure it was safe you didn't want all the ceremony of introducing",
    "start": "2112420",
    "end": "2118240"
  },
  {
    "text": "like a stream and a parallel stream and then doing all that stuff there's probably lots of performance left on the",
    "start": "2118240",
    "end": "2123760"
  },
  {
    "text": "table here and there but it would be too much effort to get it but with Purity reflection we can have",
    "start": "2123760",
    "end": "2131020"
  },
  {
    "text": "the library authors make this decision and then they can safely enable for example a bit of parallel evaluation when needed",
    "start": "2131020",
    "end": "2138240"
  },
  {
    "text": "okay we can do the same for laziness I'm going to skip that but just to to summarize this one",
    "start": "2139119",
    "end": "2145660"
  },
  {
    "start": "2143000",
    "end": "2178000"
  },
  {
    "text": "we have kind of a fresh take on data structure transformations so if you consider these operations like",
    "start": "2145660",
    "end": "2151780"
  },
  {
    "text": "map and filter and so on if you give pure function arguments then we should enable laser parallel",
    "start": "2151780",
    "end": "2159280"
  },
  {
    "text": "operation or both sometimes we can even depending on exactly the sequence of operations two things",
    "start": "2159280",
    "end": "2164560"
  },
  {
    "text": "otherwise if there's something that's impure then we behave as normal because that way your program has the exact Behavior",
    "start": "2164560",
    "end": "2170800"
  },
  {
    "text": "you'd expect you see everything in order there are no risk conditions or anything like this",
    "start": "2170800",
    "end": "2176640"
  },
  {
    "text": "okay so I pretty much already said this so I just want to say in the flick standard",
    "start": "2177640",
    "end": "2183339"
  },
  {
    "start": "2178000",
    "end": "2239000"
  },
  {
    "text": "library today this is already the case so for example you have a simplest example if you have a set and you say",
    "start": "2183339",
    "end": "2188800"
  },
  {
    "text": "count to it well if you're counting with a simple predicate and you almost always are you don't write a very complex",
    "start": "2188800",
    "end": "2195040"
  },
  {
    "text": "function it's just you know just filtering with some Simple Pure function then we will evaluate that in parallel",
    "start": "2195040",
    "end": "2201579"
  },
  {
    "text": "but if you pass some input function we will evaluate it sequentially preserving the order of effects we also have some",
    "start": "2201579",
    "end": "2207640"
  },
  {
    "text": "specific data structures you can read more about that that really try to maximize this idea and take it to it to",
    "start": "2207640",
    "end": "2214300"
  },
  {
    "text": "its limit okay so that was a very deep dive into",
    "start": "2214300",
    "end": "2220359"
  },
  {
    "text": "we talked about effects systems effect polymorphism regions and then Purity reflection",
    "start": "2220359",
    "end": "2226180"
  },
  {
    "text": "so for the last few minutes I'm just going to give you an overview of our implementation because this is not just",
    "start": "2226180",
    "end": "2231579"
  },
  {
    "text": "a prototype we're actually trying to build a real language um so what we have is a we have a visual",
    "start": "2231579",
    "end": "2239740"
  },
  {
    "start": "2239000",
    "end": "2387000"
  },
  {
    "text": "studio code extension and we've implemented almost all of the API so we have you know syntax highlighting",
    "start": "2239740",
    "end": "2245020"
  },
  {
    "text": "inline Diagnostics um you can look up symbols you have basically all the features that you're",
    "start": "2245020",
    "end": "2251500"
  },
  {
    "text": "used to using it looks something like like this and it just works out of the box",
    "start": "2251500",
    "end": "2258820"
  },
  {
    "text": "we're even adding autocomplete very sophistic autocomplete so as you're used to as you would expect it's actually",
    "start": "2258820",
    "end": "2264820"
  },
  {
    "text": "really tricky to implement I can tell you you have like a Partial Program filled with errors and then the user is",
    "start": "2264820",
    "end": "2269859"
  },
  {
    "text": "like oh what can I write here it's difficult but we we're trying",
    "start": "2269859",
    "end": "2275020"
  },
  {
    "text": "so there's already a really good development story there there's a website uh sort of the front page just",
    "start": "2275020",
    "end": "2281560"
  },
  {
    "text": "gives you like a very brief summary of um the the new features in the language",
    "start": "2281560",
    "end": "2286780"
  },
  {
    "text": "and gives examples of code we have a set of design principles so something other languages seem to be",
    "start": "2286780",
    "end": "2293260"
  },
  {
    "text": "lacking but actually try to write down what our goals are and what our motivations are",
    "start": "2293260",
    "end": "2298540"
  },
  {
    "text": "because we're not claiming like one language is perfect but rather we're trying to find Define like this language has these values and",
    "start": "2298540",
    "end": "2306040"
  },
  {
    "text": "then you know if you agree with them you might be interested in using it if you disagree with it well you know you'll know this sooner you don't even have to",
    "start": "2306040",
    "end": "2312280"
  },
  {
    "text": "start using it you can just read our thoughts there's also an online playground",
    "start": "2312280",
    "end": "2318640"
  },
  {
    "text": "it it runs on a virtual machine so please don't mind Bitcoin we have to pay for it on the other hand",
    "start": "2318640",
    "end": "2324760"
  },
  {
    "text": "it would be cool if you write a Bitcoin miner in Flex so that way I'm I'm conflicted yeah um",
    "start": "2324760",
    "end": "2331200"
  },
  {
    "text": "there is online documentation there's actually like 140 pages of online documentation describes the language and",
    "start": "2331200",
    "end": "2338560"
  },
  {
    "text": "how to get started there's API documentation like Java talk or whatever I mean you know how it is",
    "start": "2338560",
    "end": "2344020"
  },
  {
    "text": "everything is open source Apache 2 it's developed on GitHub you can try it out",
    "start": "2344020",
    "end": "2349119"
  },
  {
    "text": "you can contribute and so on um yeah so getting to the end",
    "start": "2349119",
    "end": "2356280"
  },
  {
    "text": "I put these links here uh you can find them when you look at the slides so let's talk about that",
    "start": "2356280",
    "end": "2361540"
  },
  {
    "text": "uh now I've been talking today right but this is actually the product of more than 50 people I just want to highlight",
    "start": "2361540",
    "end": "2367780"
  },
  {
    "text": "a few so here are my students my PhD students if you can just stand up wave to the crowd small wave they'll be after you can come",
    "start": "2367780",
    "end": "2374680"
  },
  {
    "text": "talk to them too um also thanks to the people who are paying for this so the research fund Denmark",
    "start": "2374680",
    "end": "2381940"
  },
  {
    "text": "Amazon science direct steeper Foundation and so in summary I've talked about Flix",
    "start": "2381940",
    "end": "2389560"
  },
  {
    "start": "2387000",
    "end": "2427000"
  },
  {
    "text": "it's a functional imperative and logic programming language you did not talk about the logic part at all but the",
    "start": "2389560",
    "end": "2395500"
  },
  {
    "text": "point was just at a very high level that you could write a function and do some logic programming inside it that's a topic for another day",
    "start": "2395500",
    "end": "2401500"
  },
  {
    "text": "now one goal is to have a unique combination of features so all languages do not have I'm not going to go through",
    "start": "2401500",
    "end": "2407020"
  },
  {
    "text": "them we talked about these these today and then I just want to say uh you know",
    "start": "2407020",
    "end": "2413320"
  },
  {
    "text": "we think Flix is ready for use ready for early adopters I showed you there is a nice visual studio code",
    "start": "2413320",
    "end": "2420060"
  },
  {
    "text": "extension there's lots of documentation there's a playground it's fully open source and you can go to the website and",
    "start": "2420060",
    "end": "2426579"
  },
  {
    "text": "check it out that's it thank you [Applause]",
    "start": "2426579",
    "end": "2434699"
  }
]