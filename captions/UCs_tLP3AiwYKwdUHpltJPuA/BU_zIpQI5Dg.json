[
  {
    "start": "0",
    "end": "144000"
  },
  {
    "text": "[Music]",
    "start": "4350",
    "end": "8870"
  },
  {
    "text": "thanks for coming so good to be back in person and see faces what a wonderful",
    "start": "13559",
    "end": "18720"
  },
  {
    "text": "time so thanks for being here this is a tour of the modern Java platform and I'm",
    "start": "18720",
    "end": "24359"
  },
  {
    "text": "James Ward I'm uh of recent a now a kotlin product manager at Google so",
    "start": "24359",
    "end": "30420"
  },
  {
    "text": "that's my my new job uh Ryan Knight I'm CEO of grand Cloud we're a small fintech",
    "start": "30420",
    "end": "36059"
  },
  {
    "text": "consulting company we do a lot of like back-end distributed data platforms so",
    "start": "36059",
    "end": "41460"
  },
  {
    "text": "all right so let's dive in we got a lot of code to show you but before we get into some code let's talk about modern",
    "start": "41460",
    "end": "47840"
  },
  {
    "text": "uh what that means so the way that I look at modern is that it's when something makes it easier to deal with",
    "start": "47840",
    "end": "54300"
  },
  {
    "text": "increased complexity so we have in the systems that we build complexity seems to always be growing",
    "start": "54300",
    "end": "61020"
  },
  {
    "text": "there's business requirements that are always changing and evolving and getting more complicated the technical problems",
    "start": "61020",
    "end": "66960"
  },
  {
    "text": "that we're solving continue to get more uh more difficult we have global scale",
    "start": "66960",
    "end": "72479"
  },
  {
    "text": "issues to deal with we have performance data size issues like things just keep",
    "start": "72479",
    "end": "77760"
  },
  {
    "text": "getting more and more complex and so the way that I look at modern it's like the things that make it easier to deal with",
    "start": "77760",
    "end": "83580"
  },
  {
    "text": "that increased complexity those are the things that I call Modern but modern is a spectrum so we can take",
    "start": "83580",
    "end": "92159"
  },
  {
    "text": "uh maybe you're a Java developer there's probably a few things that you can do to take some baby steps to be a little bit",
    "start": "92159",
    "end": "99299"
  },
  {
    "text": "more modern and we'll show you some of that today and then maybe there's some things that you can take some larger",
    "start": "99299",
    "end": "105299"
  },
  {
    "text": "steps to that would be harder to do maybe an organization or harder to do this year that would help you to be",
    "start": "105299",
    "end": "111780"
  },
  {
    "text": "modern more modern but it still would be on the spectrum of what modern what I'd consider modern and",
    "start": "111780",
    "end": "118799"
  },
  {
    "text": "then maybe there's some like giant leaps which we're not going to get into today but Ryan and I do a lot of Scala and",
    "start": "118799",
    "end": "124680"
  },
  {
    "text": "really like some new things in Scala that I think are some large leaps ahead",
    "start": "124680",
    "end": "129780"
  },
  {
    "text": "in terms of modernness and we're not going to go into those today but there there is a spectrum and today we're",
    "start": "129780",
    "end": "136020"
  },
  {
    "text": "going to try to paint just some baby steps and then some larger steps and things that you can do to modernize your",
    "start": "136020",
    "end": "142440"
  },
  {
    "text": "applications so let's start with some language features which are things that hopefully",
    "start": "142440",
    "end": "149580"
  },
  {
    "start": "144000",
    "end": "218000"
  },
  {
    "text": "are on the more easy side of the spectrum of adoption and to uh to dive",
    "start": "149580",
    "end": "155400"
  },
  {
    "text": "into this we're going to first talk about something called algebraic data types so it's also about algebraic data",
    "start": "155400",
    "end": "161340"
  },
  {
    "text": "types yeah algebraic data type is you can basically think of as a data value that has a fixed set of like some",
    "start": "161340",
    "end": "167360"
  },
  {
    "text": "subtypes so as an example you could have like a vehicle you can say a vehicle can only be like a car truck or a motorcycle",
    "start": "167360",
    "end": "173300"
  },
  {
    "text": "and you want to have a way of so the compiler can enforce that I only have a",
    "start": "173300",
    "end": "179220"
  },
  {
    "text": "certain set of subtypes for that so I have like a class hierarchy and I want to enforce the class hierarchy only has",
    "start": "179220",
    "end": "185400"
  },
  {
    "text": "a couple of types so do you want to show us how that's actually used yeah let's dive in and so what Ryan was describing",
    "start": "185400",
    "end": "191459"
  },
  {
    "text": "was a sum type and there's two primarily two different types of algebraic data",
    "start": "191459",
    "end": "197220"
  },
  {
    "text": "types there's the sum type and then there's also a product type and they use",
    "start": "197220",
    "end": "202800"
  },
  {
    "text": "those algebraic words and so so you know if you're into math you can like start to see some associations with why",
    "start": "202800",
    "end": "209700"
  },
  {
    "text": "they're called Product types and some types when we get into them but the we're going to start with the product types and you um You probably will will",
    "start": "209700",
    "end": "217620"
  },
  {
    "text": "recognize product types because they are pretty commonly used in a number of",
    "start": "217620",
    "end": "222780"
  },
  {
    "start": "218000",
    "end": "1049000"
  },
  {
    "text": "different languages and and places but the way to do a product type in Java now",
    "start": "222780",
    "end": "228780"
  },
  {
    "text": "the best way is with a new record so records are now part of the Java",
    "start": "228780",
    "end": "234299"
  },
  {
    "text": "language as of jdk 17 and when we Define a record which is like a product type we",
    "start": "234299",
    "end": "240420"
  },
  {
    "text": "can set the values on in that product type so I can have a point that it has an X and A Y property and the one of the",
    "start": "240420",
    "end": "248580"
  },
  {
    "text": "really nice things with records is that I don't have to create all the out of the box methods for tostring and hash",
    "start": "248580",
    "end": "255540"
  },
  {
    "text": "code and equals I just get all those for free but then also I get immutable",
    "start": "255540",
    "end": "260959"
  },
  {
    "text": "values just uh by default the values inside of a record are immutable and I",
    "start": "260959",
    "end": "267660"
  },
  {
    "text": "love immutability it's definitely changed a lot of How I build my programs",
    "start": "267660",
    "end": "272759"
  },
  {
    "text": "and you want to tell us about immutability and and I don't know what you how you've used it I think the",
    "start": "272759",
    "end": "280199"
  },
  {
    "text": "biggest thing for me is immutability has helped me deal with concurrency so you have a immutable variable you know what",
    "start": "280199",
    "end": "286320"
  },
  {
    "text": "you you know and you have multiple threads you can guarantee that where that value is actually being modified",
    "start": "286320",
    "end": "293520"
  },
  {
    "text": "or not being modified I should say it just can't be much it can't be modified So like",
    "start": "293520",
    "end": "298620"
  },
  {
    "text": "um the other thing is like if I pass it to a function I can guarantee that from the you know that function is actually",
    "start": "298620",
    "end": "303900"
  },
  {
    "text": "actually going to be modifying that value inside of the function so I can guarantee that when that values passed",
    "start": "303900",
    "end": "309360"
  },
  {
    "text": "in that it won't be modified so I can guarantee the results of that function so they talk about referential integrity right so that I can guarantee the",
    "start": "309360",
    "end": "316020"
  },
  {
    "text": "function always does what is expected and immutable values help with that so yeah just for me it makes it so that I I",
    "start": "316020",
    "end": "322860"
  },
  {
    "text": "can place expectations around how a programmer function works and things don't magically change out from",
    "start": "322860",
    "end": "329160"
  },
  {
    "text": "underneath me so it makes my programs a lot easier to follow so the way that I program now is like everything that I",
    "start": "329160",
    "end": "335639"
  },
  {
    "text": "can make a mutable I do and um yeah yeah I think readability is a huge thing like with the immutable values it makes it a",
    "start": "335639",
    "end": "342180"
  },
  {
    "text": "lot easier to read through a program because I know like where that value is actually being set and that it won't be changed like farther down in the the",
    "start": "342180",
    "end": "348840"
  },
  {
    "text": "program so it makes readability building much easier yeah you can logically follow the flow of mutation with",
    "start": "348840",
    "end": "355139"
  },
  {
    "text": "immutability okay so to create our point we have a Constructor and this is another new",
    "start": "355139",
    "end": "361620"
  },
  {
    "text": "language syntax thing that I like in Java is the type inference where I don't have to say the usual point on the left",
    "start": "361620",
    "end": "366960"
  },
  {
    "text": "side I can just say VAR and for me that's a more readable style of syntax",
    "start": "366960",
    "end": "372199"
  },
  {
    "text": "but we will notice here that if I try to mutate my X in my point that it's like",
    "start": "372199",
    "end": "378660"
  },
  {
    "text": "you can't do that X is immutable so that's that's nice there we do get the out of the box to string so if I print",
    "start": "378660",
    "end": "385500"
  },
  {
    "text": "out my point then it will look nice and then one other thing I wanted to show here was a nice new feature in Java",
    "start": "385500",
    "end": "391259"
  },
  {
    "text": "which is the multi-line text blocks so let's let's run that so we can just see what it looks like with our our Point",
    "start": "391259",
    "end": "399780"
  },
  {
    "text": "printed out oh and I I forgot to actually test for this one I don't know why",
    "start": "399780",
    "end": "405960"
  },
  {
    "text": "why it's not working but oh well we won't run that one anyways you can try it on your own you",
    "start": "405960",
    "end": "412800"
  },
  {
    "text": "can print out uh you it'll print just exactly like you'd expect it to okay so that's the records in Java 17.",
    "start": "412800",
    "end": "420300"
  },
  {
    "text": "definitely a good Improvement um and those are like uh product types in the class of algebraic data types so",
    "start": "420300",
    "end": "428400"
  },
  {
    "text": "now let's go on to the one that Ryan was describing which is a sum type and with",
    "start": "428400",
    "end": "433440"
  },
  {
    "text": "a subtype uh what we can do is we can say all right I've got this thing that is sealed",
    "start": "433440",
    "end": "440880"
  },
  {
    "text": "and sealed is what allows me to make it a some type and so when I seal something",
    "start": "440880",
    "end": "446039"
  },
  {
    "text": "I then have to tell it where the possible implementations of that come",
    "start": "446039",
    "end": "451080"
  },
  {
    "text": "from and so I've got a sealed interface called robot and I'm telling it that the",
    "start": "451080",
    "end": "456180"
  },
  {
    "text": "only three implementations that it can exist of a robot or a vacuum a snow blower and a lawnmower and this is one",
    "start": "456180",
    "end": "463020"
  },
  {
    "text": "syntax you can use I actually technically didn't need to do this because by default the sealed will",
    "start": "463020",
    "end": "469620"
  },
  {
    "text": "anything that's defined in the same file will be able to to be one of those",
    "start": "469620",
    "end": "474840"
  },
  {
    "text": "sealed types so you don't have to do the permits if it's in the same file but if you have another implementation that's outside of this file then you would have",
    "start": "474840",
    "end": "481979"
  },
  {
    "text": "to explicitly specify the permits so okay so I'm permitting that the only valid robots are vacuum snow blower and",
    "start": "481979",
    "end": "489120"
  },
  {
    "text": "lawnmower and now I'm creating my vacuum my snowblower my lawnmower instances and",
    "start": "489120",
    "end": "494639"
  },
  {
    "text": "here's where we start to see the value of some types is let's say we have a function that takes a robot as a",
    "start": "494639",
    "end": "500400"
  },
  {
    "text": "parameter now uh we can already see some of the benefits here of the sum type like I can't say is this thing an",
    "start": "500400",
    "end": "507360"
  },
  {
    "text": "instance of a string because that's some type there's no way that a some type of",
    "start": "507360",
    "end": "512820"
  },
  {
    "text": "robot can be a string and the compiler knows that so it's not going to even let us do that check it just is is in an",
    "start": "512820",
    "end": "519659"
  },
  {
    "text": "invalid check there so we can do that is instance of and then do the cast that you may be",
    "start": "519659",
    "end": "525000"
  },
  {
    "text": "familiar with but there's a new way to do this where we can do the uh the is",
    "start": "525000",
    "end": "530459"
  },
  {
    "text": "instance of and the cast all in one step here where we give it the variable identifier so that's the the new way to",
    "start": "530459",
    "end": "538019"
  },
  {
    "text": "do this like pattern match or type I call it a type predicate cast but there's a another way that we can handle",
    "start": "538019",
    "end": "544980"
  },
  {
    "text": "this type of stuff which is using pattern matching so with pattern matching what we do is we switch on",
    "start": "544980",
    "end": "551339"
  },
  {
    "text": "robot and then we handle the cases for our sum types and so the nice the really",
    "start": "551339",
    "end": "557399"
  },
  {
    "text": "nice thing that we get with some types is the ability to have exhaustive checking where if I comment out one of",
    "start": "557399",
    "end": "563940"
  },
  {
    "text": "these robot types of robots now the compiler can verify for me that I have",
    "start": "563940",
    "end": "569459"
  },
  {
    "text": "handled all the possible cases of robot and it'll actually be a compile error if",
    "start": "569459",
    "end": "575100"
  },
  {
    "text": "I have forgotten to handle a particular case of robot so this exhaustive pattern",
    "start": "575100",
    "end": "580500"
  },
  {
    "text": "matching is is really where the some types have a lot of benefit one of the places that this gets used is to replace",
    "start": "580500",
    "end": "587399"
  },
  {
    "text": "the visitor pattern if you've done the visitor pattern we can now replace that with some types and pattern matching so",
    "start": "587399",
    "end": "594180"
  },
  {
    "text": "lots of of nice stuff there and of course we can also add in a default Handler so we can say all right in the",
    "start": "594180",
    "end": "600540"
  },
  {
    "text": "default case you know do something else whatever so that's the way that we can",
    "start": "600540",
    "end": "606000"
  },
  {
    "text": "handle not have to specify all our different types but then still have a default and then that would be",
    "start": "606000",
    "end": "611339"
  },
  {
    "text": "exhaustive okay so that's our sum types from algebraic data types and uh and good",
    "start": "611339",
    "end": "618480"
  },
  {
    "text": "stuff in there anything to add on adts and some types no I I really like the switch statement being able to to you",
    "start": "618480",
    "end": "625080"
  },
  {
    "text": "know three statements are so common in programming or like trying to say well if it's this then do this if they do",
    "start": "625080",
    "end": "630240"
  },
  {
    "text": "this this is a much safer way than the old school like is instance of and doing",
    "start": "630240",
    "end": "635399"
  },
  {
    "text": "the old cast and always getting runtime exceptions so yeah and and I definitely had bugs in my code because I forgot to",
    "start": "635399",
    "end": "641940"
  },
  {
    "text": "handle a certain case and now the compiler is making sure that I handle",
    "start": "641940",
    "end": "647279"
  },
  {
    "text": "all the cases yes that I need to and the syntax looks nice and concise",
    "start": "647279",
    "end": "652320"
  },
  {
    "text": "okay so that is our sum types let's go on to the next one here which is uh",
    "start": "652320",
    "end": "658200"
  },
  {
    "text": "another thing that I think is a nice newer feature uh in Java is better uh",
    "start": "658200",
    "end": "663540"
  },
  {
    "text": "null handling or null error messages so um in the world of java we can get null",
    "start": "663540",
    "end": "668940"
  },
  {
    "text": "pointer exceptions and so I've got a structure of Records I've got a plumbus which has a string a thing which has a",
    "start": "668940",
    "end": "676200"
  },
  {
    "text": "plumbus and a me seeks with chazza thing so just a structure of Records here and you'll see when I create my first one I",
    "start": "676200",
    "end": "683640"
  },
  {
    "text": "have everything initialized no nulls but then my second one my plumbus is null so",
    "start": "683640",
    "end": "688740"
  },
  {
    "text": "I'm building up to being able to have a no pointer exception and so now I can do use another new thing in Java which is",
    "start": "688740",
    "end": "695399"
  },
  {
    "text": "these nice helpers for creating lists and sets and that sort of thing so I create my set of my me seeks and then I",
    "start": "695399",
    "end": "701640"
  },
  {
    "text": "iterate through each one and I Traverse down into the it.thing.plumbus.s and and print it out",
    "start": "701640",
    "end": "707820"
  },
  {
    "text": "and let's see if I can run this one or if I screwed up my my I totally screwed it up",
    "start": "707820",
    "end": "714200"
  },
  {
    "text": "don't know how I broke it but what we would see if that was working actually I",
    "start": "714380",
    "end": "719700"
  },
  {
    "text": "think I can make it work real quick I added in kotlin to this project at the last minute and that's always a bad idea",
    "start": "719700",
    "end": "724800"
  },
  {
    "text": "to add in stuff you build at the last minute yeah never change your build at the last minute just a bad idea let's",
    "start": "724800",
    "end": "731579"
  },
  {
    "text": "let's see if we can get this thing to work we want to see the null pointer exception there we go now it worked okay",
    "start": "731579",
    "end": "737940"
  },
  {
    "text": "I don't know why adding Colin broke it but um now okay we threw our null",
    "start": "737940",
    "end": "742980"
  },
  {
    "text": "pointer exception and if we look into the error message here we can see that it's telling us cannot read field s",
    "start": "742980",
    "end": "749399"
  },
  {
    "text": "because and it tells you exactly what was null so definitely an improvement if",
    "start": "749399",
    "end": "754860"
  },
  {
    "text": "you are troubleshooting no pointer exceptions in production to have that information I can't remember how many",
    "start": "754860",
    "end": "760200"
  },
  {
    "text": "times I've gone through and said is this one null or if not does this one no like you have to check all the layers down",
    "start": "760200",
    "end": "765480"
  },
  {
    "text": "and especially you have like five layers of checking of like is this no is this no and trying to find what was null",
    "start": "765480",
    "end": "770639"
  },
  {
    "text": "before so this is really nice much better so that's a good Improvement something that definitely will help us",
    "start": "770639",
    "end": "777300"
  },
  {
    "text": "be more modern okay so now I wanted to show um in kotlin some null ability stuff so",
    "start": "777300",
    "end": "784019"
  },
  {
    "text": "hopefully we the the kotlin um plug-in now will work and so I want to show in",
    "start": "784019",
    "end": "789660"
  },
  {
    "text": "kotlin I think another step forward in terms of null handling while we're talking about null handling uh I think",
    "start": "789660",
    "end": "795540"
  },
  {
    "text": "that it's there there have been some improvements in languages for how you deal with Knolls and in the case of",
    "start": "795540",
    "end": "802320"
  },
  {
    "text": "kotlin what we can do is I can create an INT and set it to a value and in that",
    "start": "802320",
    "end": "809579"
  },
  {
    "text": "case that value is non-nullable and so that that I it can't be null we can't",
    "start": "809579",
    "end": "816480"
  },
  {
    "text": "initialize that to a null value but let's say we do want it to be null then",
    "start": "816480",
    "end": "822300"
  },
  {
    "text": "what we can do is put a question mark at the end of the type and so kotlin has a",
    "start": "822300",
    "end": "827639"
  },
  {
    "text": "parallel type system for every type for the nullable types and so what we can do is explicitly say that this thing can be",
    "start": "827639",
    "end": "835019"
  },
  {
    "text": "null I think that the compiler won't even let us if we try this we cannot",
    "start": "835019",
    "end": "840060"
  },
  {
    "text": "actually set that first one to null because it's like hey you can't you can't do that this int is not a nullable",
    "start": "840060",
    "end": "845700"
  },
  {
    "text": "type so it has to have a value but to set that J to a nullable value then we",
    "start": "845700",
    "end": "851940"
  },
  {
    "text": "can put that question mark at the end so what this uh means is that now with",
    "start": "851940",
    "end": "857100"
  },
  {
    "text": "explicit null ability we have to handle null ability it forces us as the",
    "start": "857100",
    "end": "862920"
  },
  {
    "text": "developer to deal with the cases where things can be null and so if I have my",
    "start": "862920",
    "end": "868019"
  },
  {
    "text": "eye which is non-nullable I can just call a method on it like increment and let's set that to you a new variable",
    "start": "868019",
    "end": "875880"
  },
  {
    "text": "there and this is going to still be in int but on my J my nullable one let's",
    "start": "875880",
    "end": "883079"
  },
  {
    "text": "create a new variable here if I try to call my J dot increment what's happening is it's like no you you can't do that",
    "start": "883079",
    "end": "889680"
  },
  {
    "text": "because if if J is null then this is going to be a null pointer exception and",
    "start": "889680",
    "end": "895440"
  },
  {
    "text": "so what I then have to do is say J question mark to say all right in the",
    "start": "895440",
    "end": "900480"
  },
  {
    "text": "case where J is not null then increment it and then our type that we get out of",
    "start": "900480",
    "end": "906839"
  },
  {
    "text": "this is a non is a nullable int so the null ability propagates through the",
    "start": "906839",
    "end": "913019"
  },
  {
    "text": "chain and anytime we want to continue down trying to access things in nullable",
    "start": "913019",
    "end": "919019"
  },
  {
    "text": "types we have to use that question mark So if we did want this to be a a non-null int then what we could do is",
    "start": "919019",
    "end": "926160"
  },
  {
    "text": "provide a default so I can say all right in the case where where it is null now",
    "start": "926160",
    "end": "932279"
  },
  {
    "text": "now provide the default value and now I don't have to propagate that null ability out",
    "start": "932279",
    "end": "937800"
  },
  {
    "text": "so by by having explicit null ability we're forced to deal with it and that",
    "start": "937800",
    "end": "943199"
  },
  {
    "text": "alleviates the null pointer exceptions yeah so we've actually been migrating one of our Legacy systems from java over",
    "start": "943199",
    "end": "949139"
  },
  {
    "text": "to kotlin and one of the biggest benefits we've seen is the old Java system had a large number of null",
    "start": "949139",
    "end": "954180"
  },
  {
    "text": "pointer exceptions so you have these code paths that don't get touched for you know weeks or months also you get a",
    "start": "954180",
    "end": "959339"
  },
  {
    "text": "no pointer exception in production and it's never been handled and it's a lot of problems and so moving over to kotlin",
    "start": "959339",
    "end": "964740"
  },
  {
    "text": "you're forced to handle things properly and it's completely I mean eliminated are no pointer exceptions in production",
    "start": "964740",
    "end": "970980"
  },
  {
    "text": "which has made our lives a lot simpler so it's been a huge advance to properly handled nulls so and we do this in the",
    "start": "970980",
    "end": "979260"
  },
  {
    "text": "world of Scala with options and you can use optionals in Java but the ecosystem",
    "start": "979260",
    "end": "985199"
  },
  {
    "text": "usually in the world of java doesn't use optionals very regularly to express null ability so it's not something that that",
    "start": "985199",
    "end": "992279"
  },
  {
    "text": "is pretty typically used to handle null ability whereas in Scala much more option as you used and in kotlin the the",
    "start": "992279",
    "end": "999899"
  },
  {
    "text": "options option types are huge yeah um option types can make it really nice because you're forced to either instead",
    "start": "999899",
    "end": "1006680"
  },
  {
    "text": "of having to know you're basically forced to either be a some type which means I actually have a value or none which means I don't have a value and the",
    "start": "1006680",
    "end": "1013100"
  },
  {
    "text": "problem with the null is I don't know is a null like an error like it didn't get set was it supposed to be empty like why",
    "start": "1013100",
    "end": "1019399"
  },
  {
    "text": "is it no I don't know why it's no whereas with the option type and some means I had a value 90 means I don't and",
    "start": "1019399",
    "end": "1025760"
  },
  {
    "text": "so I know that there wasn't an exception I just didn't have the value so that's a really nice thing yeah",
    "start": "1025760",
    "end": "1031220"
  },
  {
    "text": "so some nice language features there um we are going to continue on so we we",
    "start": "1031220",
    "end": "1038720"
  },
  {
    "text": "talk through some of the nice language features that you will hopefully be able to modernize your Java with and then you",
    "start": "1038720",
    "end": "1045500"
  },
  {
    "text": "saw some kotlin for some null handling uh that code is up on my GitHub I want to go on now to something that",
    "start": "1045500",
    "end": "1052340"
  },
  {
    "start": "1049000",
    "end": "1100000"
  },
  {
    "text": "will show some more language features in kotlin but then also show some ecosystem",
    "start": "1052340",
    "end": "1057440"
  },
  {
    "text": "things because I look at Java as a ecosystem as a platform and there's the language things that are modern but then",
    "start": "1057440",
    "end": "1063799"
  },
  {
    "text": "there's tools and there's libraries and Frameworks that are also modernizing and and making our lives easier and so we're",
    "start": "1063799",
    "end": "1070640"
  },
  {
    "text": "going to look at not just some of the language things but also some of the ecosystem things so to do this I'm going",
    "start": "1070640",
    "end": "1075860"
  },
  {
    "text": "to use a spring boot application so James I'm really curious how many people are using kotlin here is anyone using",
    "start": "1075860",
    "end": "1081140"
  },
  {
    "text": "kotlin wow that's great nice that's awesome yeah about half the room's used in Scotland nice they're already",
    "start": "1081140",
    "end": "1087559"
  },
  {
    "text": "modernized all right um so okay so let's do the spring boot",
    "start": "1087559",
    "end": "1093080"
  },
  {
    "text": "kotlin application and uh to to start out what I want to show is uh I'm gonna",
    "start": "1093080",
    "end": "1098419"
  },
  {
    "text": "do some test driven development here I'm going to start by running the tests for my spring boot application and this will",
    "start": "1098419",
    "end": "1105200"
  },
  {
    "start": "1100000",
    "end": "2395000"
  },
  {
    "text": "dive us into some of the modern stuff that I I really like in the Java ecosystem so this is running Gradle and",
    "start": "1105200",
    "end": "1113360"
  },
  {
    "text": "for my spring boot application and we'll compile the code obviously and then start up my tests but there's something",
    "start": "1113360",
    "end": "1120620"
  },
  {
    "text": "cool that's happening here which I really like is my test is an integration test and it depends on postgres the",
    "start": "1120620",
    "end": "1127640"
  },
  {
    "text": "postgres database and so I'm actually just spun up a Docker container for",
    "start": "1127640",
    "end": "1133340"
  },
  {
    "text": "postgres as part of my integration test ran my integration test against that postgres and then it got shut down and",
    "start": "1133340",
    "end": "1140480"
  },
  {
    "text": "that all happened automatically so this is using something called test containers which is one of my favorite new things in the the Java ecosystem and",
    "start": "1140480",
    "end": "1148220"
  },
  {
    "text": "tell us about test containers test containers are amazing the basic idea is that I can all I do is I declare my",
    "start": "1148220",
    "end": "1154340"
  },
  {
    "text": "build a test container I can declare like a postgres test container and then it will automatically spin up dock or",
    "start": "1154340",
    "end": "1160460"
  },
  {
    "text": "run the test container or you know postgres in that test container for me you know instead of that test environment and then set it down at the",
    "start": "1160460",
    "end": "1166400"
  },
  {
    "text": "end of the test what's really nice about this is now developers don't you know when you have a new developer come into",
    "start": "1166400",
    "end": "1171799"
  },
  {
    "text": "a team you don't have to say all right so postgres you know and put in this schema to populate with this data set up",
    "start": "1171799",
    "end": "1177260"
  },
  {
    "text": "Kafka you know sub spark you know all these different environments and they spent two weeks of their environment instead all they do is in your build you",
    "start": "1177260",
    "end": "1184640"
  },
  {
    "text": "already have everything defined in these test containers and they don't have to there's like almost no overhead to setting up the environment the other",
    "start": "1184640",
    "end": "1190940"
  },
  {
    "text": "huge thing is you know you have a postgres database I run tests against it every time I spend it you know if I",
    "start": "1190940",
    "end": "1197299"
  },
  {
    "text": "maintain it locally I have to clean out the you know my schema clean out all the data reset everything and there's like",
    "start": "1197299",
    "end": "1202460"
  },
  {
    "text": "all this overhead time of every single time I run a test to reset my entire environment back to zero so yeah it's",
    "start": "1202460",
    "end": "1209120"
  },
  {
    "text": "just like that managing the life cycle of your service dependencies is super helpful the test containers you can use",
    "start": "1209120",
    "end": "1216620"
  },
  {
    "text": "the fully like automatically managed life cycle stuff that you saw here you can also have more fine-grained control",
    "start": "1216620",
    "end": "1222980"
  },
  {
    "text": "over the life cycle of the test containers let's say you want your test container to run for a whole Suite of",
    "start": "1222980",
    "end": "1228260"
  },
  {
    "text": "tests you can do that let's say you want it to run for each individual test let's say you want to if you run it for each individual test let's say you want to",
    "start": "1228260",
    "end": "1234620"
  },
  {
    "text": "paralyze your tests you can do that because the ports are randomized and you can run multiple containers all at the",
    "start": "1234620",
    "end": "1240080"
  },
  {
    "text": "same time and it will feed the configuration into your application automatically so lots of different ways",
    "start": "1240080",
    "end": "1246140"
  },
  {
    "text": "that you can do it this is if you've used Docker compose this is in some ways kind of like Docker compose except for",
    "start": "1246140",
    "end": "1252140"
  },
  {
    "text": "the life cycle is managed by the application not some external thing which is really nice for me and I use",
    "start": "1252140",
    "end": "1258740"
  },
  {
    "text": "test containers for local development and for my integration test so you can use them them for both that's actually",
    "start": "1258740",
    "end": "1264679"
  },
  {
    "text": "huge too because oftentimes the developer develop against their local environment and you know they manually",
    "start": "1264679",
    "end": "1270140"
  },
  {
    "text": "set post stress Kafka and they've done some weird configurations that doesn't translate into your QA and integration",
    "start": "1270140",
    "end": "1276020"
  },
  {
    "text": "environments and then the test break once you deploy the QA whereas test containers avoids all of that because you have this fixed environment that",
    "start": "1276020",
    "end": "1282260"
  },
  {
    "text": "translates from local development all the way up into prod if you need to so remember back in the day we would use H2",
    "start": "1282260",
    "end": "1288679"
  },
  {
    "text": "REM memory database and you try to simulate postgres yeah exactly H2 is",
    "start": "1288679",
    "end": "1294080"
  },
  {
    "text": "great for the developer experience but it was terrible because I would run into bugs in production that I didn't run",
    "start": "1294080",
    "end": "1300020"
  },
  {
    "text": "into with local development because I was using a different database and test containers allows us to use the same",
    "start": "1300020",
    "end": "1306500"
  },
  {
    "text": "Services across all our environments which is super nice yeah um so all based",
    "start": "1306500",
    "end": "1311539"
  },
  {
    "text": "on Docker containers but there's now a cloud service called Atomic jar so you don't have to actually run the docker",
    "start": "1311539",
    "end": "1317000"
  },
  {
    "text": "containers on your machine you can use the atomic jar cloud service instead and run them in the cloud which is pretty",
    "start": "1317000",
    "end": "1322100"
  },
  {
    "text": "cool um so yeah I think there's there's a lot of exciting stuff for me happening with test containers making my productivity",
    "start": "1322100",
    "end": "1329299"
  },
  {
    "text": "better make sure I I have consistency of environments the other thing that I use",
    "start": "1329299",
    "end": "1335059"
  },
  {
    "text": "test containers for which is kind of cool is I have a lot of projects where I've got like a microservice that",
    "start": "1335059",
    "end": "1340520"
  },
  {
    "text": "depends on another microservice it depends on another microservice I actually have configured my build so",
    "start": "1340520",
    "end": "1345980"
  },
  {
    "text": "that as part of my build process it'll build the containers for the dependent microservices then start up test",
    "start": "1345980",
    "end": "1352280"
  },
  {
    "text": "containers because test containers don't just have to be postgresq and Kafka and that sort of thing they can be your application as well and so then I spin",
    "start": "1352280",
    "end": "1358700"
  },
  {
    "text": "up the test containers for my dependent microservices and start those as part of",
    "start": "1358700",
    "end": "1364159"
  },
  {
    "text": "my development process as well so lots of cool stuff there happening with test containers",
    "start": "1364159",
    "end": "1369559"
  },
  {
    "text": "okay so that's uh test containers let's go look at how that's actually configured so um I'm going to start with",
    "start": "1369559",
    "end": "1377120"
  },
  {
    "text": "my database configuration here for my spring application so with test",
    "start": "1377120",
    "end": "1382400"
  },
  {
    "text": "containers and spring they have support built into it to be able to just specify",
    "start": "1382400",
    "end": "1388159"
  },
  {
    "text": "a connection string that will automatically when a connection is being made spin up that test container so",
    "start": "1388159",
    "end": "1394760"
  },
  {
    "text": "that's the way that in this case I've chosen to control the life cycle of my postgres test container is just by",
    "start": "1394760",
    "end": "1401360"
  },
  {
    "text": "putting in this connection string so pretty nice and convenient for for doing that you'll see that I'm using r2dbc",
    "start": "1401360",
    "end": "1407659"
  },
  {
    "text": "which we'll talk about in a little bit but um uh yeah and that's that's all I had to do you will see that this is just",
    "start": "1407659",
    "end": "1414140"
  },
  {
    "text": "in my test Source directory is where I configure that so in production obviously I'm not going to use the test",
    "start": "1414140",
    "end": "1420860"
  },
  {
    "text": "container I'm going to use my real production postgres database and so",
    "start": "1420860",
    "end": "1426440"
  },
  {
    "text": "that's um that's how I configured that so let's take a look at at the code and walk through some of the stuff that some",
    "start": "1426440",
    "end": "1432620"
  },
  {
    "text": "of the other modern stuff that's going on here so the first thing I want to dive into is my actual test that we ran and I have",
    "start": "1432620",
    "end": "1440419"
  },
  {
    "text": "a bar repo that I'm using in my test and I want to go look at that bar repo so",
    "start": "1440419",
    "end": "1445640"
  },
  {
    "text": "first we've got our bar repo which is a co-routine crud repository so this is an",
    "start": "1445640",
    "end": "1451580"
  },
  {
    "text": "API that it comes from the R2 a DBC project in Spring which is the reactive",
    "start": "1451580",
    "end": "1458679"
  },
  {
    "text": "database project so this creates a reactive database non-blocking database",
    "start": "1458679",
    "end": "1463940"
  },
  {
    "text": "connection to my postgres database and exposes the interface to that through",
    "start": "1463940",
    "end": "1468980"
  },
  {
    "text": "kotlin Co routines we'll talk about in a little bit but before we talk about reactive and co-routines I want to point",
    "start": "1468980",
    "end": "1474620"
  },
  {
    "text": "out my bar is my data class which is very similar to the Java record and it",
    "start": "1474620",
    "end": "1480679"
  },
  {
    "text": "has a ID which is a nullable because that comes from gets assigned by the database so before the database assigns",
    "start": "1480679",
    "end": "1487400"
  },
  {
    "text": "it it's null and then my my name on there okay so let's um you and I have",
    "start": "1487400",
    "end": "1493520"
  },
  {
    "text": "been doing reactive for a while a long time let's tell us about reactive and why it's awesome and why everybody I",
    "start": "1493520",
    "end": "1499159"
  },
  {
    "text": "mean the biggest thing about reactive is it's non-blocking so the biggest problem with old school like jdbc drivers was",
    "start": "1499159",
    "end": "1505220"
  },
  {
    "text": "you had one you know to today you had a client that connected into your your web",
    "start": "1505220",
    "end": "1510799"
  },
  {
    "text": "server and hold the you know thread for that client connection block that thread you only had a thread full of 10 and so",
    "start": "1510799",
    "end": "1517159"
  },
  {
    "text": "I'm limited to the number of connections and then that same client would go and connect to the database and it would",
    "start": "1517159",
    "end": "1522980"
  },
  {
    "text": "block on a thread to the database and it's holding on to and so what you end up with is a lot of resource contention",
    "start": "1522980",
    "end": "1529039"
  },
  {
    "text": "around these threads and it's completely blocking all the way through it's super painful yeah so the you've got the",
    "start": "1529039",
    "end": "1535520"
  },
  {
    "text": "overhead of the thread which you really like you don't want to have thousands tens of thousands of threads on your",
    "start": "1535520",
    "end": "1541640"
  },
  {
    "text": "machine and one there's memory overhead to those threads two there's there's CPU",
    "start": "1541640",
    "end": "1547279"
  },
  {
    "text": "contention with the thread like thread switching on the operating system so",
    "start": "1547279",
    "end": "1552500"
  },
  {
    "text": "it's just as a waste of resources to use threads when you when you're not actually doing anything right yeah and",
    "start": "1552500",
    "end": "1558200"
  },
  {
    "text": "you're basically blocked on holding that thread and especially like when I go out to the database and read from the database that thread is being held on to",
    "start": "1558200",
    "end": "1564020"
  },
  {
    "text": "for you know like could be you know several seconds when it could be being used by another resource so yeah so it",
    "start": "1564020",
    "end": "1569900"
  },
  {
    "text": "just is about resource efficiency is the whole point of reactive right uh so the",
    "start": "1569900",
    "end": "1576020"
  },
  {
    "text": "spring folks as I said they created the r2dbc database driver which is being used under the covers here with the",
    "start": "1576020",
    "end": "1582440"
  },
  {
    "text": "co-routine card repository there is also if you're in the world of java the reactor crud repository which will give",
    "start": "1582440",
    "end": "1589100"
  },
  {
    "text": "you a reactor interface to that non-blocking database access so and I",
    "start": "1589100",
    "end": "1594799"
  },
  {
    "text": "think there's drivers for r2dbc for MySQL postgres and Oracle I think of the",
    "start": "1594799",
    "end": "1600919"
  },
  {
    "text": "three databases that they support so you can do non-blocking access to",
    "start": "1600919",
    "end": "1606080"
  },
  {
    "text": "those databases this is not jdbc so jdbc is a blocking protocol and so they had",
    "start": "1606080",
    "end": "1611900"
  },
  {
    "text": "to invent a new protocol in order to be non-blocking um Okay so we've got our co-routine",
    "start": "1611900",
    "end": "1617840"
  },
  {
    "text": "credit repository let's go back to our test and see what's actually happening so I've got my integration test that is",
    "start": "1617840",
    "end": "1624380"
  },
  {
    "text": "making sure that my bar repo works and you'll see that I'm doing wrapping this into a run blocking block and the reason",
    "start": "1624380",
    "end": "1632179"
  },
  {
    "text": "for that is that I'm doing non-blocking stuff in my actual test but I don't my",
    "start": "1632179",
    "end": "1639380"
  },
  {
    "text": "test it shouldn't be non-blocking my test needs to block I need I need my test to fully complete execution before",
    "start": "1639380",
    "end": "1646580"
  },
  {
    "text": "things move on and so I have to tell it all right I'm going to block on this",
    "start": "1646580",
    "end": "1651860"
  },
  {
    "text": "whole thing this whole block of block of non-blocking code okay so then we get",
    "start": "1651860",
    "end": "1657620"
  },
  {
    "text": "into our bar repo save method and the save method is where we first encounter something non blocking here and so I'm",
    "start": "1657620",
    "end": "1665120"
  },
  {
    "text": "making this save call which is non-blocking and Colin has built into a way to express async non-blocking stuff",
    "start": "1665120",
    "end": "1672320"
  },
  {
    "text": "through something called co-routines the way that this works is that you'll see that there's that keyword suspend in",
    "start": "1672320",
    "end": "1678380"
  },
  {
    "text": "front of the function and suspend functions are asynchronous but what's weird is that I'm calling this save",
    "start": "1678380",
    "end": "1685039"
  },
  {
    "text": "method and then immediately assigning it to this value bar and how does that work",
    "start": "1685039",
    "end": "1690799"
  },
  {
    "text": "if that's actually a synchronous underneath the covers so it turns out that kotlin takes this asynchronous code",
    "start": "1690799",
    "end": "1698120"
  },
  {
    "text": "and kind of unravels it into like the Callback style that you would imagine it",
    "start": "1698120",
    "end": "1703700"
  },
  {
    "text": "maintains this like State machine of what's actually happening so the I as a developer don't have to write code in",
    "start": "1703700",
    "end": "1710900"
  },
  {
    "text": "that asynchronous kind of annoying style I get to write it in this like imperative style where it looks like things are just flowing you know without",
    "start": "1710900",
    "end": "1718159"
  },
  {
    "text": "in a fully blocking way but actually underneath the covers this gets unrolled into to non-blocking asynchronous code",
    "start": "1718159",
    "end": "1726140"
  },
  {
    "text": "so that's the The Power of kotlin co-routines Now uh on the horizon is",
    "start": "1726140",
    "end": "1731480"
  },
  {
    "text": "something that'll enable us to do this in the world of java called Loom where we'll get the similar style way of doing",
    "start": "1731480",
    "end": "1738140"
  },
  {
    "text": "async and non-blocking in in this style but without having to do the callbacks",
    "start": "1738140",
    "end": "1743539"
  },
  {
    "text": "and so exciting stuff happening in the the loom area of loom as well but that",
    "start": "1743539",
    "end": "1748760"
  },
  {
    "text": "still is on the horizon okay so then I've got my test I'm going to assert that my uh that my bar that I",
    "start": "1748760",
    "end": "1756020"
  },
  {
    "text": "got out of the database its ID is not null and then I'm calling another method here on my bar repo which is find all",
    "start": "1756020",
    "end": "1762620"
  },
  {
    "text": "and if we look at the return type of find all that returns a flow of T and",
    "start": "1762620",
    "end": "1768440"
  },
  {
    "text": "flow is the kotlin co-routines stream and so that's a non-blocking reactive",
    "start": "1768440",
    "end": "1773899"
  },
  {
    "text": "stream and so again this is all non-blocking but I can just assign that to my bars and then I can call count on",
    "start": "1773899",
    "end": "1781640"
  },
  {
    "text": "it and call First and that sort of thing do my typical stream operations on that",
    "start": "1781640",
    "end": "1787760"
  },
  {
    "text": "is if it is is all there but really it is this async non-blocking stream underneath the covers okay so that's my",
    "start": "1787760",
    "end": "1795679"
  },
  {
    "text": "test and some of the the language features around co-routines and non-blocking let's go take a look now at",
    "start": "1795679",
    "end": "1801980"
  },
  {
    "text": "our actual application uh our our rest controller here so I've got my rest",
    "start": "1801980",
    "end": "1807440"
  },
  {
    "text": "controller which takes my bar repo as a Constructor parameter and then I've got a git mapping for slash bars and in my",
    "start": "1807440",
    "end": "1814399"
  },
  {
    "text": "get bars method it returns a flow of bar so that's my stream of bars out of the database and you'll see I marked that",
    "start": "1814399",
    "end": "1820820"
  },
  {
    "text": "with suspend function because it's using co-routines and now I just call my find all method and return my flow of bars so",
    "start": "1820820",
    "end": "1827960"
  },
  {
    "text": "pretty straightforward on that one then I've got my post mapping for add bar where I parse the request into a bar and",
    "start": "1827960",
    "end": "1835700"
  },
  {
    "text": "then I save it to the database and then I return a HTTP response of no content so",
    "start": "1835700",
    "end": "1841220"
  },
  {
    "text": "so that's that's my whole rest controller pretty straightforward on that uh front all async and non-blocking",
    "start": "1841220",
    "end": "1848840"
  },
  {
    "text": "so here's part of the cool thing here is that my whole application end to end now is reactive it's all non-blocking so an",
    "start": "1848840",
    "end": "1856460"
  },
  {
    "text": "HTTP request comes in that fires off a request to the database to get the bars",
    "start": "1856460",
    "end": "1861679"
  },
  {
    "text": "and in the time that I'm waiting for the database to respond there is no threads allocated to that request those threads",
    "start": "1861679",
    "end": "1868580"
  },
  {
    "text": "go away the request is still open the connection is still open this is the power of nio underneath the covers and",
    "start": "1868580",
    "end": "1875720"
  },
  {
    "text": "Nettie is what powers it but that so the request is still open but there's no threads allocated to handling that",
    "start": "1875720",
    "end": "1881779"
  },
  {
    "text": "request until the database response comes back then we get the thread back and then we can send the response back",
    "start": "1881779",
    "end": "1887419"
  },
  {
    "text": "to the user so that's all that works underneath the covers and really just about efficiency of resources on our",
    "start": "1887419",
    "end": "1894320"
  },
  {
    "text": "system anything to add on that no it's just so much easier than the old school like",
    "start": "1894320",
    "end": "1899659"
  },
  {
    "text": "where you had to do like a sync Blocker on your database code and all that so yeah definitely a lot more",
    "start": "1899659",
    "end": "1905779"
  },
  {
    "text": "straightforward okay so that's our uh our rest application let's go now and uh go on to",
    "start": "1905779",
    "end": "1913520"
  },
  {
    "text": "the next cool thing that I want to point out is we uh now most of us are containerizing our applications turning",
    "start": "1913520",
    "end": "1920899"
  },
  {
    "text": "them into Docker oci containers and then deploying them on kubernetes or wherever you want to run your containers and so",
    "start": "1920899",
    "end": "1927260"
  },
  {
    "text": "there's a nice feature that has been added into spring boot to containerize the applications that I want to show you",
    "start": "1927260",
    "end": "1933200"
  },
  {
    "text": "so let's go and containerize our spring boot application we're going to call this boot build image and we're going to",
    "start": "1933200",
    "end": "1940039"
  },
  {
    "text": "tell it the image name is spring kotlin postgres and let's run that so what's",
    "start": "1940039",
    "end": "1945740"
  },
  {
    "text": "actually happening underneath the covers is that this is using something called build packs and build packs are not just",
    "start": "1945740",
    "end": "1952520"
  },
  {
    "text": "a Java thing you can use them with lots of different Technologies you can use build packs to build Python and go and",
    "start": "1952520",
    "end": "1958640"
  },
  {
    "text": "Ruby and you know all sorts of whatever node but the spring boot folks have used",
    "start": "1958640",
    "end": "1963860"
  },
  {
    "text": "build packs to containerize Spring boot applications and built-in Port into Gradle and Maven to do that and so it",
    "start": "1963860",
    "end": "1970640"
  },
  {
    "text": "now just built my container image for me so it compiled my application and then built the container image and layered",
    "start": "1970640",
    "end": "1977960"
  },
  {
    "text": "things in a nice way I've got my operating system I've got my jvm I've got my dependency layer I've got my",
    "start": "1977960",
    "end": "1984679"
  },
  {
    "text": "application layer so that just creates good cache and validation structures and",
    "start": "1984679",
    "end": "1990020"
  },
  {
    "text": "so now my container image is created let's go over and just go check out",
    "start": "1990020",
    "end": "1996799"
  },
  {
    "text": "what's actually in this container image so dive is a tool that lets us actually see what's inside of our container image",
    "start": "1996799",
    "end": "2003700"
  },
  {
    "text": "we can see I've got my operating system layer that's like 63 Megs I've got some other layers in here then I've got my",
    "start": "2003700",
    "end": "2009880"
  },
  {
    "text": "jvm layer that's 144 Megs then I've got a 34 Meg layer which is my dependencies and then further down I think this two",
    "start": "2009880",
    "end": "2017140"
  },
  {
    "text": "Meg layer is my actual application so I've got my container image created by",
    "start": "2017140",
    "end": "2022539"
  },
  {
    "text": "by my um uh created by the build packs the cloud native build packs and really nice",
    "start": "2022539",
    "end": "2030159"
  },
  {
    "text": "feature for building any you can use build packs to to turn any Java any jvm",
    "start": "2030159",
    "end": "2035620"
  },
  {
    "text": "application into a container image I'm going to start up my Docker container so that we can actually run more things",
    "start": "2035620",
    "end": "2041799"
  },
  {
    "text": "five more minutes perfect okay so I'm starting up my spring application you'll see that it is now making a connection",
    "start": "2041799",
    "end": "2048760"
  },
  {
    "text": "to my postgres database I'm not using test containers in this case it took about five seconds to start up my spring",
    "start": "2048760",
    "end": "2055118"
  },
  {
    "text": "application let's go over and test our spring application make sure it works",
    "start": "2055119",
    "end": "2060878"
  },
  {
    "text": "I'm going to make a post request and that should return no content great my",
    "start": "2060879",
    "end": "2066220"
  },
  {
    "text": "bar was stored to the database now let's go make our get request and we see",
    "start": "2066220",
    "end": "2071378"
  },
  {
    "text": "there's my list of bars coming out of my postgres database so great my Docker image worked I'm able to run it and that",
    "start": "2071379",
    "end": "2079839"
  },
  {
    "text": "is all good but there is something cooler we can do with this applique patients some",
    "start": "2079839",
    "end": "2086138"
  },
  {
    "text": "we that all worked well we've got our jvm based application but there's another new and exciting thing in modern",
    "start": "2086139",
    "end": "2092740"
  },
  {
    "text": "Java land called grawvium native image grauvium native image allows us to ahead",
    "start": "2092740",
    "end": "2098380"
  },
  {
    "text": "of time compile a jvm based application into a native executable and so you want",
    "start": "2098380",
    "end": "2103720"
  },
  {
    "text": "to tell us about grovel VM native image and your uses of it well I mean so we're working on a a large compute cluster how",
    "start": "2103720",
    "end": "2110920"
  },
  {
    "text": "to compute like millions of financial calculations and you know we built this compute cluster it runs great but the",
    "start": "2110920",
    "end": "2116380"
  },
  {
    "text": "problem was it was really expensive and so we needed a way to basically spin things up really fast run the",
    "start": "2116380",
    "end": "2122560"
  },
  {
    "text": "calculations and then shut it down and be very resource uh you know um you know effective memory not use",
    "start": "2122560",
    "end": "2129880"
  },
  {
    "text": "very much memory and so what we've done is we start to use grawvm and the",
    "start": "2129880",
    "end": "2134980"
  },
  {
    "text": "advantage of crawl VM is like that our application which was taken on average to like 200 megabytes with crawl VM it's",
    "start": "2134980",
    "end": "2141280"
  },
  {
    "text": "now down to about 30 megabytes of memory usage startup times have gone from you know three to five seconds down to about",
    "start": "2141280",
    "end": "2147040"
  },
  {
    "text": "six milliseconds of startup time so we can spin everything up do the calculations faster and use a lot less",
    "start": "2147040",
    "end": "2153339"
  },
  {
    "text": "resources so grawvm has been like a huge cost savings for us and and that's one",
    "start": "2153339",
    "end": "2158380"
  },
  {
    "text": "of the big advantages is in a cloud environment of these cost Saving Times and oftentimes when you have a lot of",
    "start": "2158380",
    "end": "2164740"
  },
  {
    "text": "you know millions of like small calculations you want to spin up shut down call VM is ideal for this because",
    "start": "2164740",
    "end": "2169839"
  },
  {
    "text": "you're really saving on the cost of compute and CPU and everything so nice",
    "start": "2169839",
    "end": "2175359"
  },
  {
    "text": "yeah so grovium native image it's pretty amazing that you can take a jvm based application and ahead of time compile it",
    "start": "2175359",
    "end": "2181480"
  },
  {
    "text": "get rid of the jvm and and really get some great optimizations and performance improvements there for the case with",
    "start": "2181480",
    "end": "2188320"
  },
  {
    "text": "spring boot to enable the usage of grauvium native image we just set a",
    "start": "2188320",
    "end": "2193720"
  },
  {
    "text": "couple Flags here for the build image task we tell it to turn on the BP native",
    "start": "2193720",
    "end": "2199180"
  },
  {
    "text": "image set the the build pack Java version to 17 and then you can even",
    "start": "2199180",
    "end": "2205000"
  },
  {
    "text": "compress the image that's created with the tool called upx so those are the parameters that I used and then we would",
    "start": "2205000",
    "end": "2211780"
  },
  {
    "text": "just call the normal boot build image and be able to create our native image",
    "start": "2211780",
    "end": "2217060"
  },
  {
    "text": "it does take a few minutes because it's doing a lot of work to ahead of time compile this jvm based application down",
    "start": "2217060",
    "end": "2223300"
  },
  {
    "text": "into a native executable so this is something that I just save and do in my CI CD pipeline I don't do this as part",
    "start": "2223300",
    "end": "2229660"
  },
  {
    "text": "of my local Dev cycle one in local Dev I'm on the jvm and then for my native images put those into to my my CI CD",
    "start": "2229660",
    "end": "2236859"
  },
  {
    "text": "pipeline okay so I'm not going to actually build it here I've already built it so let's go use that dive tool",
    "start": "2236859",
    "end": "2242560"
  },
  {
    "text": "and go check out our container image now that was created with Native image you'll see that now my base operating",
    "start": "2242560",
    "end": "2248980"
  },
  {
    "text": "system layer 17 mags and then I think that my this 23 Meg layer is my whole",
    "start": "2248980",
    "end": "2254560"
  },
  {
    "text": "application that was compiled down into a native executable no more jvm layer just this native executable now and so",
    "start": "2254560",
    "end": "2263020"
  },
  {
    "text": "that's uh you know some savings just on the container image not having to download as big of a container image",
    "start": "2263020",
    "end": "2269079"
  },
  {
    "text": "there are some downsides to this I no longer get the nice cache uh the nice caching of my layers you know in the",
    "start": "2269079",
    "end": "2275680"
  },
  {
    "text": "typical jvm application if you only change your application layer then it's only going to have to pull that one new",
    "start": "2275680",
    "end": "2281680"
  },
  {
    "text": "layer on a new pole whereas this any any change that I make to anything it's",
    "start": "2281680",
    "end": "2287140"
  },
  {
    "text": "going to have to re-pull the whole container image so there's some trade-offs there but let's go now start up our Docker container image for the",
    "start": "2287140",
    "end": "2294339"
  },
  {
    "text": "native version of this and you'll see that that started in well under a second",
    "start": "2294339",
    "end": "2299859"
  },
  {
    "text": "so much faster startup time if you're in serverless or in a workload environment like Ryan's where you need things to",
    "start": "2299859",
    "end": "2306040"
  },
  {
    "text": "start up fast use less memory then this is the same application just starting a",
    "start": "2306040",
    "end": "2311619"
  },
  {
    "text": "whole lot faster and again there are trade-offs to this one is that the the jit is really good at over time warming",
    "start": "2311619",
    "end": "2319780"
  },
  {
    "text": "up and doing a lot of optimizations a warm jit can be really a lot faster than",
    "start": "2319780",
    "end": "2325420"
  },
  {
    "text": "something that's ahead of time compiled because when you're ahead of time compiling something you're making some assumptions about what needs to be",
    "start": "2325420",
    "end": "2331780"
  },
  {
    "text": "optimized whereas the jit can continue to improve and continue to make things faster so um so you you may not see the",
    "start": "2331780",
    "end": "2338980"
  },
  {
    "text": "same performance benefits in an ahead of time compiled version as you would in a warm jet version so",
    "start": "2338980",
    "end": "2345400"
  },
  {
    "text": "um so yeah lots of lots of trade-offs there but definitely some exciting things happening grovel VM native image",
    "start": "2345400",
    "end": "2351880"
  },
  {
    "text": "you can use with any jvm application I've showed it in Spring boot there are some reflection",
    "start": "2351880",
    "end": "2357880"
  },
  {
    "text": "there are some challenges with reflection because to do ahead of time you have to know all the code paths and",
    "start": "2357880",
    "end": "2363880"
  },
  {
    "text": "so spring native has done a good job quercus and Micronaut have done a good job at alleviating some of those",
    "start": "2363880",
    "end": "2369040"
  },
  {
    "text": "challenges around reflection but definitely can still run into some challenges there so anyways that is uh a",
    "start": "2369040",
    "end": "2376480"
  },
  {
    "text": "quick look at some of the great tools and exciting things modern things in the",
    "start": "2376480",
    "end": "2382420"
  },
  {
    "text": "Java ecosystem and you can find the code for that one up on my GitHub as well so",
    "start": "2382420",
    "end": "2387640"
  },
  {
    "text": "I think we have some time for questions right no we used it all we used it all the",
    "start": "2387640",
    "end": "2392920"
  },
  {
    "text": "time so I'll be around Ryan and I'll be around if you have other questions but I hope that was useful for you all thank",
    "start": "2392920",
    "end": "2398980"
  },
  {
    "start": "2395000",
    "end": "2419000"
  },
  {
    "text": "you so much for coming thank you everyone",
    "start": "2398980",
    "end": "2402540"
  },
  {
    "text": "[Applause]",
    "start": "2405430",
    "end": "2409930"
  }
]