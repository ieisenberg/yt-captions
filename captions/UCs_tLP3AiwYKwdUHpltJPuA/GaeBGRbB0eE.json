[
  {
    "start": "0",
    "end": "207000"
  },
  {
    "text": "all right hello welcome it's great to be in Brisbane I did just fly in from",
    "start": "6799",
    "end": "12000"
  },
  {
    "text": "reinvent so you know if I make any mistakes please forgive me I don't even know what time it is to be honest so um",
    "start": "12000",
    "end": "18960"
  },
  {
    "text": "as the introduction my name is Peters barsky and I want to talk with you about my adventures with serverless so I",
    "start": "18960",
    "end": "25260"
  },
  {
    "text": "actually named my dog dancing with serverless because I thought this is going to be just like George Martin's a",
    "start": "25260",
    "end": "30840"
  },
  {
    "text": "dance of dragons only fewer dragons and more Lambda functions thank you thank you for the couple of",
    "start": "30840",
    "end": "36899"
  },
  {
    "text": "people over there see when I practice this joke at home in front of the mirror I thought it would be so much funnier",
    "start": "36899",
    "end": "42000"
  },
  {
    "text": "but oh well I guess you'll find out life whether something works or doesn't",
    "start": "42000",
    "end": "48800"
  },
  {
    "text": "um so this is me um I'm an AWS service hero which probably means that I talk about",
    "start": "48840",
    "end": "55640"
  },
  {
    "text": "serverless and AWS a little bit too much I'm an author of a book called",
    "start": "55640",
    "end": "61440"
  },
  {
    "text": "serverless architectures on AWS and here are the covers I was actually very lucky to have had the first edition of my book",
    "start": "61440",
    "end": "68400"
  },
  {
    "text": "translated to Japanese and Mandarin Chinese now I don't speak those two",
    "start": "68400",
    "end": "73860"
  },
  {
    "text": "languages so if you get a copy and you do speak Japanese or Chinese Mandarin Chinese please let me know what it says",
    "start": "73860",
    "end": "79560"
  },
  {
    "text": "I hope it's been translated correctly I mean I have no way of telling",
    "start": "79560",
    "end": "84600"
  },
  {
    "text": "um I also organize the Melbourne serverless Meetup so if you are ever in Melbourne please stop by I would love to",
    "start": "84600",
    "end": "90720"
  },
  {
    "text": "have you there to speak or just to attend have pizza Network um with the rest of our group",
    "start": "90720",
    "end": "96840"
  },
  {
    "text": "previously I worked for a company called a cloud Guru which was acquired by pluralsight um last year I was sleepy of",
    "start": "96840",
    "end": "104759"
  },
  {
    "text": "content and nvp of Education and Research and I used to organize a little conference called service conf and you",
    "start": "104759",
    "end": "110220"
  },
  {
    "text": "never you will never believe what we spoke about there yeah exactly it was all serverless all",
    "start": "110220",
    "end": "115500"
  },
  {
    "text": "of the time for like two or three days and it was a very cool conference because we had people from AWS from",
    "start": "115500",
    "end": "120899"
  },
  {
    "text": "Google from Microsoft coming together to talk about the future of cloud computing so really cool stuff",
    "start": "120899",
    "end": "128160"
  },
  {
    "text": "uh by the way second edition last plug okay maybe it's not second last plug this is the second edition of my book",
    "start": "128160",
    "end": "134340"
  },
  {
    "text": "that has just come out it's a photo of Jeff Barr who's the chief evangelist at AWS holding a copy so you know it's real",
    "start": "134340",
    "end": "142160"
  },
  {
    "text": "I look uh after I saw the photo I felt I've made it this is it I have picked I",
    "start": "142160",
    "end": "149760"
  },
  {
    "text": "don't actually know if Jeff has read the book or even opened it but look Jeff if",
    "start": "149760",
    "end": "155340"
  },
  {
    "text": "you're watching this in recording I hope you have and I hope you liked it",
    "start": "155340",
    "end": "160560"
  },
  {
    "text": "um when Dave Thomas invited me to give the stock at Yahoo I started thinking",
    "start": "160560",
    "end": "165660"
  },
  {
    "text": "what can I talk to you about um and I decided to come up with a few stories from my experience working with",
    "start": "165660",
    "end": "173099"
  },
  {
    "text": "serverless tech and I'll talk about some my past and some of the lessons that I learned as well as some of the things",
    "start": "173099",
    "end": "179099"
  },
  {
    "text": "that I'm doing now and how I'm solving certain problems I will say",
    "start": "179099",
    "end": "184379"
  },
  {
    "text": "controversial things in the stock so I'm just giving you a disclaimer now I will go against conventional wisdom",
    "start": "184379",
    "end": "191580"
  },
  {
    "text": "so look this is an open safe space I want to be open and transparent with you",
    "start": "191580",
    "end": "196800"
  },
  {
    "text": "please let me know what you think if you disagree with me please tell me let's let's talk about it let's debate because",
    "start": "196800",
    "end": "202260"
  },
  {
    "text": "I think we can come to the truth to consensus together so I want to hear from you as well",
    "start": "202260",
    "end": "207599"
  },
  {
    "start": "207000",
    "end": "207000"
  },
  {
    "text": "so a little bit about my past and what I've done so as I said I worked for a",
    "start": "207599",
    "end": "212760"
  },
  {
    "text": "company called a cloud Guru and if anybody's familiar this company creates and distributes online video courses to",
    "start": "212760",
    "end": "219000"
  },
  {
    "text": "help Engineers up skill on cloud computing and it was started in 2015 by Sam and",
    "start": "219000",
    "end": "225000"
  },
  {
    "text": "Ryan Cronenberg Brothers Ryan created content Sam built the initial serverless",
    "start": "225000",
    "end": "230459"
  },
  {
    "text": "platform in about four weeks and the reason why Sam built it so quickly was because he had another job at that time",
    "start": "230459",
    "end": "236879"
  },
  {
    "text": "I was actually working with him we were Consultants together working in Melbourne and he had four weeks um of",
    "start": "236879",
    "end": "242700"
  },
  {
    "text": "annual leave which he accumulated and he went with to tazi with his family and he was like okay I'm gonna build this online school and I need to do it as",
    "start": "242700",
    "end": "250200"
  },
  {
    "text": "quickly as possible and the initial platform was actually quite impressive because you could watch",
    "start": "250200",
    "end": "255299"
  },
  {
    "text": "video lessons you could do quizzes you could buy courses it kind of had all the",
    "start": "255299",
    "end": "260459"
  },
  {
    "text": "expected bells and whistles that good e-commerce platforms have and because it was just the two of them",
    "start": "260459",
    "end": "266699"
  },
  {
    "text": "Ryan and Sam and I I was the first employee I joined I think it was February 2016.",
    "start": "266699",
    "end": "273720"
  },
  {
    "text": "um it needed to have a very small operational overhead scaling was interesting I remember we",
    "start": "273720",
    "end": "279780"
  },
  {
    "text": "were well our small company I think it was maybe five of us by that stage it was reinvent 2016 and Black Friday and",
    "start": "279780",
    "end": "287699"
  },
  {
    "text": "we were sitting in the hotel room and watching how the system scaled itself I",
    "start": "287699",
    "end": "292800"
  },
  {
    "text": "think to like 40 times what we did on any other day and it just worked by",
    "start": "292800",
    "end": "298860"
  },
  {
    "text": "itself automatically it was kind of like magic because before we'd always been kind of like you know provisioning VMS",
    "start": "298860",
    "end": "304020"
  },
  {
    "text": "and load balancing and auto scaling and here our serverless platform just scaled itself to handle 40 times our normal",
    "start": "304020",
    "end": "310919"
  },
  {
    "text": "capacity and like I said it was all serverless and service full meaning that",
    "start": "310919",
    "end": "315960"
  },
  {
    "text": "we used a number of third-party services to avoid re-implementing common functionality so for example we used of",
    "start": "315960",
    "end": "322500"
  },
  {
    "text": "0 for authentication strike for payments you know just the usual kind of services",
    "start": "322500",
    "end": "327660"
  },
  {
    "text": "that we all typically tend to use and here's a simplified diagram of that platform that launched in 2015 early",
    "start": "327660",
    "end": "335960"
  },
  {
    "text": "2016. so we had an Spa website written in Old angularjs does anybody remember",
    "start": "335960",
    "end": "342320"
  },
  {
    "text": "angularjs from 2015 oh you poor people I'm so sorry God I still have nightmares",
    "start": "342320",
    "end": "347759"
  },
  {
    "text": "sometimes uh that wasn't pretty users would authenticate while of zero",
    "start": "347759",
    "end": "353820"
  },
  {
    "text": "protected actions like purchasing a course were done by lambdas which were fronted by an API Gateway the database",
    "start": "353820",
    "end": "361080"
  },
  {
    "text": "that we used was Google Firebase interestingly enough Firebase can",
    "start": "361080",
    "end": "366300"
  },
  {
    "text": "communicate directly with the front end using websockets so it doesn't need to go back through land to return a",
    "start": "366300",
    "end": "373320"
  },
  {
    "text": "response to the client so changes made to the database would immediately kind of show up in the user",
    "start": "373320",
    "end": "379440"
  },
  {
    "text": "interface our video files were stored in S3 normal and you will notice something interesting about this architecture",
    "start": "379440",
    "end": "387000"
  },
  {
    "text": "it is actually a serverless monolith right there's one database Firebase all",
    "start": "387000",
    "end": "394080"
  },
  {
    "text": "functions are writing to that one database the front end is even coupled to our",
    "start": "394080",
    "end": "400319"
  },
  {
    "text": "database but you know what it was actually okay but for that time it worked it scaled",
    "start": "400319",
    "end": "406740"
  },
  {
    "text": "relatively well it got us to Market really quickly and it worked",
    "start": "406740",
    "end": "411840"
  },
  {
    "start": "411000",
    "end": "411000"
  },
  {
    "text": "so kind of let's move forward um we grew we hired more people and we",
    "start": "411840",
    "end": "417539"
  },
  {
    "text": "realized that our architecture needed to evolve as well so this is around 2017 2018 we decided",
    "start": "417539",
    "end": "425880"
  },
  {
    "text": "to move to a more micro Services architecture and not because it was fashionable",
    "start": "425880",
    "end": "431000"
  },
  {
    "text": "the Big Driver really was our team structure we had hired various teams",
    "start": "431000",
    "end": "437039"
  },
  {
    "text": "um and kind of gave them Focus we wanted to kind of achieve that highly focused um acceleration with teams who",
    "start": "437039",
    "end": "444840"
  },
  {
    "text": "would be accountable for each particular area of the system so we had a team accountable for the student experience a",
    "start": "444840",
    "end": "452099"
  },
  {
    "text": "team accountable for the business experience a team accountable for exam taking for e-commerce and so on and so",
    "start": "452099",
    "end": "457500"
  },
  {
    "text": "they kind of each owned one or two micro services that kind of reflected what they did",
    "start": "457500",
    "end": "463259"
  },
  {
    "text": "and as you can see in the diagram um we move to a graphql based approach where we had a graphql library in Lambda",
    "start": "463259",
    "end": "471199"
  },
  {
    "text": "again behind an API Gateway and the endpoint could query multiple macro services and using schemas teaching put",
    "start": "471199",
    "end": "478440"
  },
  {
    "text": "together a response back to the client um an interesting element though is that",
    "start": "478440",
    "end": "484259"
  },
  {
    "text": "we were still using Firebase and we actually began using algolia for search and we use dynamodb streams which I'll",
    "start": "484259",
    "end": "491759"
  },
  {
    "text": "talk a little bit about um in a second to capture events to capture changes that happened in our various",
    "start": "491759",
    "end": "497639"
  },
  {
    "text": "microservices and update Firebase which was still kind of powering our user",
    "start": "497639",
    "end": "503699"
  },
  {
    "text": "interface at that time and it was kind of good because we managed to maintain that beautiful kind of user experience",
    "start": "503699",
    "end": "510720"
  },
  {
    "text": "without having to do a kind of a big migration up front we kind of just gradually re-architected",
    "start": "510720",
    "end": "518219"
  },
  {
    "text": "our system it was all in evolution and you can think of that Firebase database as a materialized view of our",
    "start": "518219",
    "end": "526260"
  },
  {
    "text": "dynamodb databases right which powered our user interface and by the way I've",
    "start": "526260",
    "end": "531839"
  },
  {
    "text": "tried to use Amazon what was it Cloud search instead of algolia and well it",
    "start": "531839",
    "end": "537779"
  },
  {
    "text": "sounds like AWS gave up on that a long time ago so don't use cloud search see I'm saying",
    "start": "537779",
    "end": "544440"
  },
  {
    "text": "such things it's probably recorded and I've just revoke my hero status now that's but I'm doing it for you",
    "start": "544440",
    "end": "550860"
  },
  {
    "text": "and so think about this we migrated from a monolith to microservices without ever",
    "start": "550860",
    "end": "556980"
  },
  {
    "text": "having to think about infrastructure we didn't need to think about server provisioning or web Farms or load",
    "start": "556980",
    "end": "562500"
  },
  {
    "text": "balances and over time we re-architected our entire system simply by changing a",
    "start": "562500",
    "end": "568140"
  },
  {
    "text": "yaml file and redeploying and cloud formation just seamlessly upgraded our system and it kept running and what I",
    "start": "568140",
    "end": "575459"
  },
  {
    "text": "like to do is actually show the state of our system at that time so this is around July 2018. so we had 289 Lambda",
    "start": "575459",
    "end": "584100"
  },
  {
    "text": "functions grouped into 13 microservices we had 3.7 terabytes of data in S3 so",
    "start": "584100",
    "end": "590760"
  },
  {
    "text": "these are our videos um 107 million Lambda invocations this",
    "start": "590760",
    "end": "596820"
  },
  {
    "text": "is July Yep this is July 2018. 45 million requests going through the API Gateway we had an egress of 3.8",
    "start": "596820",
    "end": "604019"
  },
  {
    "text": "terabytes of data so there's a videos streaming out to our users and we had 650 000 users at that stage I think we",
    "start": "604019",
    "end": "612899"
  },
  {
    "text": "grew to 2.2 million at the end and this was our bill so I no longer work for the company so",
    "start": "612899",
    "end": "619380"
  },
  {
    "text": "I'm sure it's okay to show this so there you go um just remember this is 2018. the good",
    "start": "619380",
    "end": "625680"
  },
  {
    "text": "thing about AWS is that it never really raises prices so today that bill could",
    "start": "625680",
    "end": "631019"
  },
  {
    "text": "actually potentially be even lower and I should also mention that for the first two years of our company we paid",
    "start": "631019",
    "end": "637980"
  },
  {
    "text": "nothing at all for compute or API it was kind of amazing because we were entirely",
    "start": "637980",
    "end": "643620"
  },
  {
    "text": "within the free tier that AWS provides so we kind of started our company we",
    "start": "643620",
    "end": "648660"
  },
  {
    "text": "bootstrapped ACG a cloud Guru and ran for two years without paying any",
    "start": "648660",
    "end": "654000"
  },
  {
    "text": "anything for infrastructure and so we move forward obviously you know we have more people now our team",
    "start": "654000",
    "end": "660180"
  },
  {
    "text": "has grown quite a lot and we further evolve our infrastructure and we added service Discovery so now that graphql",
    "start": "660180",
    "end": "667019"
  },
  {
    "text": "endpoint could actually find out which microservices to query and things became even less coupled which was nice I",
    "start": "667019",
    "end": "674220"
  },
  {
    "text": "should mention that that service Discovery mechanism was built in-house because this was done before",
    "start": "674220",
    "end": "681260"
  },
  {
    "text": "AWS cloud map was released so I I cannot talk to the team now maybe they would",
    "start": "681260",
    "end": "687120"
  },
  {
    "text": "use something like AWS cloud map rather than implementing something themselves but that's what we did",
    "start": "687120",
    "end": "693720"
  },
  {
    "text": "and my experience really kind of working on our platform writing my book talking",
    "start": "693720",
    "end": "698760"
  },
  {
    "start": "694000",
    "end": "694000"
  },
  {
    "text": "with smart and beautiful people like yourself has helped me to understand some of the",
    "start": "698760",
    "end": "704760"
  },
  {
    "text": "challenges and the benefits of serverless systems and I just want to summarize them and tell me whether you",
    "start": "704760",
    "end": "710579"
  },
  {
    "text": "agree or disagree so I think going serverless",
    "start": "710579",
    "end": "715740"
  },
  {
    "text": "makes you faster because you avoid a lot of the undifferentiated heavy lifting",
    "start": "715740",
    "end": "720779"
  },
  {
    "text": "right and I have definitely felt this and I don't really think that I can go back to anything else",
    "start": "720779",
    "end": "728820"
  },
  {
    "text": "the scaling that you get from Lambda and other services is incredible initially it can be cheap or free even like what",
    "start": "728820",
    "end": "736079"
  },
  {
    "text": "happened to us but you also have to understand what you are buying as well because you know it can burn you if you",
    "start": "736079",
    "end": "742800"
  },
  {
    "text": "have in in frequent choppy use great you know Lambda API Gateway can work",
    "start": "742800",
    "end": "747839"
  },
  {
    "text": "beautifully for you if you have a need for sustained usage if you're doing ml workloads okay maybe that service",
    "start": "747839",
    "end": "754680"
  },
  {
    "text": "approach isn't exactly the right thing so you kind of have to have a look at your use case as well",
    "start": "754680",
    "end": "759959"
  },
  {
    "text": "and you can get into trouble if you're not careful and tell me if you've done this because I've done this I think three times now",
    "start": "759959",
    "end": "766019"
  },
  {
    "text": "so I call this serverless cancer and this happens when say you put a file",
    "start": "766019",
    "end": "772380"
  },
  {
    "text": "into an S3 bucket and then you make a Lambda function invoke on that file right it's an advantage Lambda function",
    "start": "772380",
    "end": "778920"
  },
  {
    "text": "invokes and then it creates another file and puts it into the same as free bucket right and that causes another Lambda",
    "start": "778920",
    "end": "784740"
  },
  {
    "text": "function to invoke and that function creates a file and you get it into this endless loop now I did something bad and",
    "start": "784740",
    "end": "790800"
  },
  {
    "text": "I'll show you what I did later just remind me like you know when you get when we get to that slide but I created",
    "start": "790800",
    "end": "796620"
  },
  {
    "text": "two files so for each file I created two files and this there was an explosion of fluentus",
    "start": "796620",
    "end": "803459"
  },
  {
    "text": "just running and anyway I was very sad when looked at the bill and I had to you",
    "start": "803459",
    "end": "808620"
  },
  {
    "text": "know beg for forgiveness so what I'm saying is be careful Lambda is a supercomputer it's very powerful so",
    "start": "808620",
    "end": "817560"
  },
  {
    "text": "if you are just starting out yeah just be a little careful operationally it is very efficient you",
    "start": "817560",
    "end": "825000"
  },
  {
    "text": "don't need to think about patching virtual machines we spoke about this or deploying new classes it's amazing in",
    "start": "825000",
    "end": "830760"
  },
  {
    "text": "that way but it doesn't mean that it is actually free of operational concerns because you",
    "start": "830760",
    "end": "836579"
  },
  {
    "text": "still need to know what to do when things go wrong right you still need to have a robust way to deploy your",
    "start": "836579",
    "end": "842339"
  },
  {
    "text": "functions make changes to the database if something goes down if there's an issue in S3 in US is fun as sometimes",
    "start": "842339",
    "end": "849180"
  },
  {
    "text": "happens your customers are not going to know or care about it right so you need to think about resilience recovery how",
    "start": "849180",
    "end": "856200"
  },
  {
    "text": "do you escalate issues to AWS if there's an issue how do you escalate issues to other third-party SAS providers whoever",
    "start": "856200",
    "end": "862980"
  },
  {
    "text": "you're using great benefit is that it's not kubernetes",
    "start": "862980",
    "end": "868519"
  },
  {
    "text": "large architectural pivots are possible again they are not going to be free or simple or easy I'm not saying that at",
    "start": "868740",
    "end": "875639"
  },
  {
    "text": "all but at least you don't need to think about you know all the VMS and provisioning and how to get them up and",
    "start": "875639",
    "end": "881459"
  },
  {
    "text": "running and patching the operating system you just think about the architecture and the code and frankly",
    "start": "881459",
    "end": "886680"
  },
  {
    "text": "for my brain that's more than enough to think about and lastly and I think this one is",
    "start": "886680",
    "end": "892500"
  },
  {
    "text": "really kind of understated I have found that developers really love the serverless approach they love using",
    "start": "892500",
    "end": "899279"
  },
  {
    "text": "Lambda they love using AWS Services it's fun it's engaging the feedback loop is",
    "start": "899279",
    "end": "905100"
  },
  {
    "text": "very short and you know if you want to attract people to your company think about this it's actually a quite a big",
    "start": "905100",
    "end": "910980"
  },
  {
    "text": "benefit also another bonus hint that we've discovered don't go advertising for developers with 10 years of Land",
    "start": "910980",
    "end": "918420"
  },
  {
    "text": "Experience that that is going to be an issue you will not find those developers so just",
    "start": "918420",
    "end": "924240"
  },
  {
    "text": "look for people who are willing to learn who are open to new ideas who are enthusiastic about technology just like",
    "start": "924240",
    "end": "930839"
  },
  {
    "text": "all of you that's why you're here today and those will be the best devs and they will learn it and they'll run with it",
    "start": "930839",
    "end": "936420"
  },
  {
    "text": "and create Magic for you so those are all the amazing things let's talk about complaints because I",
    "start": "936420",
    "end": "942180"
  },
  {
    "start": "939000",
    "end": "939000"
  },
  {
    "text": "have a bunch of complaints as well so these are the two biggest ones I",
    "start": "942180",
    "end": "947579"
  },
  {
    "text": "don't know if you have those complaints just like I do look",
    "start": "947579",
    "end": "953399"
  },
  {
    "text": "developing and debugging can be difficult typical process has been you write a function for example you deploy",
    "start": "953399",
    "end": "960660"
  },
  {
    "text": "to AWS you test it you run it you see what happens then maybe you fix it put a",
    "start": "960660",
    "end": "966300"
  },
  {
    "text": "console.log statement deploy it again then maybe like all right I need to do some unit tests mock some inputs run the",
    "start": "966300",
    "end": "972720"
  },
  {
    "text": "function locally on the computer maybe I need to emulate a few services on my computer use local stack",
    "start": "972720",
    "end": "978839"
  },
  {
    "text": "but because the cloud is involved there's still that process of write deploy weight test frustration and I",
    "start": "978839",
    "end": "986279"
  },
  {
    "text": "don't know I just don't love it but I think I may have a solution for",
    "start": "986279",
    "end": "991320"
  },
  {
    "text": "all of us in just a few slides so let's let's see",
    "start": "991320",
    "end": "996360"
  },
  {
    "text": "um observability and monitoring um is tricky and this is true for any distributed system this isn't really",
    "start": "996360",
    "end": "1002540"
  },
  {
    "text": "kind of like the issue with serverless per se because once you have you know hundreds of millions of",
    "start": "1002540",
    "end": "1008120"
  },
  {
    "text": "functioning locations so you have a bunch of containers running whatever things will become hard to observe and",
    "start": "1008120",
    "end": "1013820"
  },
  {
    "text": "understand Cloud watch is not the greatest service for helping you",
    "start": "1013820",
    "end": "1019160"
  },
  {
    "text": "understand what's going on and I love Cloud watch if you're watching this AWS person I love cloudwatch but come on we",
    "start": "1019160",
    "end": "1026240"
  },
  {
    "text": "all know this and I've you know we've all experienced it some tasks are hard or impossible to",
    "start": "1026240",
    "end": "1034220"
  },
  {
    "text": "implement with a serverless approach can you convert a two hour video file in Lambda can you download the file from an",
    "start": "1034220",
    "end": "1041120"
  },
  {
    "text": "old SFTP server does anyone actually remember what SFTP is or FTP",
    "start": "1041120",
    "end": "1046339"
  },
  {
    "text": "okay well I just aged myself functions are ephemeral you know they",
    "start": "1046339",
    "end": "1051980"
  },
  {
    "text": "run for 15 minutes API Gateway has a 30 second timeout other services have other limitations",
    "start": "1051980",
    "end": "1057740"
  },
  {
    "text": "and of course people are still worried about lock-in and I don't actually think that this is a bigger problem as people",
    "start": "1057740",
    "end": "1064760"
  },
  {
    "text": "say it is are you really going to be moving your infrastructure from One Cloud to another or God forbid going",
    "start": "1064760",
    "end": "1071840"
  },
  {
    "text": "back on-prem I mean honestly if this is something you are considering you have probably just become Dropbox so",
    "start": "1071840",
    "end": "1078500"
  },
  {
    "text": "congratulations on that that's kind of success so I will tell you how I'm addressing",
    "start": "1078500",
    "end": "1085160"
  },
  {
    "start": "1082000",
    "end": "1082000"
  },
  {
    "text": "and solving some of those challenges today so I left acloud Guru earlier this year",
    "start": "1085160",
    "end": "1091039"
  },
  {
    "text": "it was acquired by pluralsight and I thought it was time to move on six years great company but you know",
    "start": "1091039",
    "end": "1097100"
  },
  {
    "text": "um time to do something new I had a bit of a break and my hands started to get itchy I want to build",
    "start": "1097100",
    "end": "1102740"
  },
  {
    "text": "something again and so the rule I had set for myself is whatever I built had to be serverless",
    "start": "1102740",
    "end": "1108860"
  },
  {
    "text": "okay that makes a lot of other decisions very easy given what I'm planning",
    "start": "1108860",
    "end": "1116480"
  },
  {
    "text": "wow my watch just said I'm not sure I understand that's I'm well sorry about that",
    "start": "1116480",
    "end": "1125000"
  },
  {
    "text": "um given what I'm planning I may need a lot of computing and processing power see this also didn't happen when I",
    "start": "1125000",
    "end": "1131419"
  },
  {
    "text": "rehearsed um I wanted to leverage as many AWS and",
    "start": "1131419",
    "end": "1137600"
  },
  {
    "text": "third-party services as possible like I said I don't want to rebuild things again if there's a solution I just want",
    "start": "1137600",
    "end": "1143539"
  },
  {
    "text": "to use it I want to focus on what makes me and my product or my project unique",
    "start": "1143539",
    "end": "1150500"
  },
  {
    "text": "and that's that and I want to kind of solve local Dev",
    "start": "1150500",
    "end": "1156380"
  },
  {
    "text": "and debugging um to make it as easy as possible because that honestly has been a pain",
    "start": "1156380",
    "end": "1161720"
  },
  {
    "text": "point for me from the very start so I decided to build a little project it's a little system to enhance my",
    "start": "1161720",
    "end": "1169039"
  },
  {
    "text": "financial literacy which I've realized isn't very high and also helped me to manage my finances so I built a system",
    "start": "1169039",
    "end": "1176179"
  },
  {
    "text": "to help me track my assets and liabilities budget review transactions give me insights into my spending habits",
    "start": "1176179",
    "end": "1183320"
  },
  {
    "text": "help me plan for the future help me visualize my goals help me with taxation all kinds of",
    "start": "1183320",
    "end": "1189020"
  },
  {
    "text": "things and this could be applied to individuals and small businesses alike I should mention I'm not a designer so",
    "start": "1189020",
    "end": "1194960"
  },
  {
    "text": "these screenshots don't look as lovely as I would want them to be and it's just",
    "start": "1194960",
    "end": "1200780"
  },
  {
    "text": "a project at the moment but I'm looking for volunteers who may be interested in kind of financial literacy or fintech",
    "start": "1200780",
    "end": "1207860"
  },
  {
    "text": "join me we can work on this together from a technical or functional perspective who knows if you know we can find a good",
    "start": "1207860",
    "end": "1215780"
  },
  {
    "text": "product Market fit maybe this could turn into a product one day so if you go to the website you can",
    "start": "1215780",
    "end": "1221480"
  },
  {
    "text": "leave your email address and I'll get in touch with you but let's talk about the tech so to help with the implementation I",
    "start": "1221480",
    "end": "1228500"
  },
  {
    "start": "1226000",
    "end": "1226000"
  },
  {
    "text": "decided to use the serverless stack framework has anybody seen this framework before because there are a bunch of Frameworks okay not a lot of",
    "start": "1228500",
    "end": "1235220"
  },
  {
    "text": "people a few so this is an interesting framework because it provides a kind of a way to",
    "start": "1235220",
    "end": "1242720"
  },
  {
    "text": "do local Devon debugging it is built on top of cdk um it has a nice console for",
    "start": "1242720",
    "end": "1249020"
  },
  {
    "text": "administration of resources let me show you the console nope",
    "start": "1249020",
    "end": "1255140"
  },
  {
    "text": "yep it's there on the side it has high construct function and configs so you write even less code and",
    "start": "1255140",
    "end": "1261320"
  },
  {
    "text": "even interesting features like auth so if you're not familiar with cdk cdk stands for cloud development kit it's a",
    "start": "1261320",
    "end": "1268400"
  },
  {
    "text": "project from AWS and it helps you to Define your infrastructure in code right",
    "start": "1268400",
    "end": "1273980"
  },
  {
    "text": "so you just use a regular programming language like JavaScript or go or c-sharp you define your infrastructure",
    "start": "1273980",
    "end": "1280580"
  },
  {
    "text": "you use regular programming constructs like conditions and Loops you can create unit tests and so on and so SST Builds",
    "start": "1280580",
    "end": "1288380"
  },
  {
    "text": "on top of cdk which is kind of nice you can use cdk directly if you like but",
    "start": "1288380",
    "end": "1294200"
  },
  {
    "text": "those additional constructs just make writing serverless applications a little bit faster and easier",
    "start": "1294200",
    "end": "1300080"
  },
  {
    "text": "and he's my favorite feature so this is so it allows you SSD allows you to do",
    "start": "1300080",
    "end": "1306440"
  },
  {
    "text": "live Lambda development because what it does is that SSD deploys",
    "start": "1306440",
    "end": "1312440"
  },
  {
    "text": "proxy Lambda functions into AWS like little stubs",
    "start": "1312440",
    "end": "1317480"
  },
  {
    "text": "that then proxy requests down to your computer from AWS the actual function runs on",
    "start": "1317480",
    "end": "1325159"
  },
  {
    "text": "your computer and then the response is proxied back up this is all done using websockets by the way the response is",
    "start": "1325159",
    "end": "1332120"
  },
  {
    "text": "proxy backup to AWS and things continue to run",
    "start": "1332120",
    "end": "1337299"
  },
  {
    "text": "kind of interesting so you don't need to mock any of the AWS services that integrate with Lambda right you don't",
    "start": "1337700",
    "end": "1344840"
  },
  {
    "text": "need to use local stack or anything like that you don't need to even continuously redeploy your functions you just deploy",
    "start": "1344840",
    "end": "1350659"
  },
  {
    "text": "them once SSD creates those sort of stubs stub lambdas and establishes a",
    "start": "1350659",
    "end": "1355760"
  },
  {
    "text": "websocket connection to your computer and off you go so here's like a little diagram which shows um",
    "start": "1355760",
    "end": "1363980"
  },
  {
    "text": "the two little fake functions in AWS which proxy requests down to your",
    "start": "1363980",
    "end": "1370460"
  },
  {
    "text": "computer kind of cool there's a dynamodb table that keeps track of the connections um",
    "start": "1370460",
    "end": "1376640"
  },
  {
    "text": "there's an S3 bucket which is used as a temporary storage for very large request response messages but it's all handled",
    "start": "1376640",
    "end": "1383720"
  },
  {
    "text": "for you automatically it's seamless transparent you don't need to worry about it and the cool thing is that in practice",
    "start": "1383720",
    "end": "1390080"
  },
  {
    "text": "and I've been doing this for you know a while now it works very well you save a function locally you refresh your page",
    "start": "1390080",
    "end": "1396500"
  },
  {
    "text": "everything just runs and the other thing is that once you get",
    "start": "1396500",
    "end": "1402980"
  },
  {
    "text": "this functionality you can put breakpoints in your code so if you use Visual Studio code you can",
    "start": "1402980",
    "end": "1408260"
  },
  {
    "text": "just put a breakpoint and you can walk through your code and this makes debugging work the way",
    "start": "1408260",
    "end": "1414980"
  },
  {
    "text": "we've been used to it for years and it's like a revelation to me now my God like you know we did this you know",
    "start": "1414980",
    "end": "1420260"
  },
  {
    "text": "20 years ago but there we go now we can do it with serverless and obviously a function executing on your computer",
    "start": "1420260",
    "end": "1425900"
  },
  {
    "text": "isn't the same as executing in AWS you have more memory you have more CPU I get",
    "start": "1425900",
    "end": "1431059"
  },
  {
    "text": "all that but if you're working on logic if you're fixing some business logic other issues then that's fine like it",
    "start": "1431059",
    "end": "1437720"
  },
  {
    "text": "doesn't really matter but the ability to work on your code locally to save to put breakpoints to step through your code",
    "start": "1437720",
    "end": "1444140"
  },
  {
    "text": "kind of solves 99 of my local Dev issues so check it out it's an open source",
    "start": "1444140",
    "end": "1450380"
  },
  {
    "text": "framework you can begin using it today it's kind of nice so we spoke about SSD for local Dev and",
    "start": "1450380",
    "end": "1456559"
  },
  {
    "start": "1453000",
    "end": "1453000"
  },
  {
    "text": "debugging that's good um what about observability and kind of just knowing what's happening in the",
    "start": "1456559",
    "end": "1462440"
  },
  {
    "text": "system you can use services like X-ray and Cloud watch they are built in they",
    "start": "1462440",
    "end": "1468559"
  },
  {
    "text": "are okay I've mentioned cloudwatch before I think a lot of us have had the experience now another tool that I use is called",
    "start": "1468559",
    "end": "1475220"
  },
  {
    "text": "lumigo so this is actually a paid product it's not free but it's nice it",
    "start": "1475220",
    "end": "1480440"
  },
  {
    "text": "hooks into your environment pulls data from your AWS account and actually presents you with useful actionable",
    "start": "1480440",
    "end": "1487400"
  },
  {
    "text": "insights and when things fail like your Lambda function throws an exception you get a nice email saying hey something",
    "start": "1487400",
    "end": "1494000"
  },
  {
    "text": "has happened and you can click on the link and then go and kind of explore what has happened and I think to me the",
    "start": "1494000",
    "end": "1499520"
  },
  {
    "text": "advantage of using something like lumigo is that um you can find things a lot quicker than",
    "start": "1499520",
    "end": "1506539"
  },
  {
    "text": "you normally would using cloudwatch I'm not affiliated with Amigo in any way I'm",
    "start": "1506539",
    "end": "1511640"
  },
  {
    "text": "just kind of showing you what I use because people ask me about it so at this point I just want to talk to",
    "start": "1511640",
    "end": "1518600"
  },
  {
    "start": "1515000",
    "end": "1515000"
  },
  {
    "text": "you briefly about my architecture so my product is made out of a number of",
    "start": "1518600",
    "end": "1524659"
  },
  {
    "text": "um microservices let's say I have a cost service for um that holds your portfolio I have an",
    "start": "1524659",
    "end": "1531380"
  },
  {
    "text": "exchange service which does currency exchange um I have a history service service which backs up your daily history and",
    "start": "1531380",
    "end": "1537860"
  },
  {
    "text": "changes to the portfolio I have a cleanup service which deletes all data and analytics service which prepares",
    "start": "1537860",
    "end": "1544100"
  },
  {
    "text": "nice reports integration service which integrates with the number of third-party services like played to pull",
    "start": "1544100",
    "end": "1550039"
  },
  {
    "text": "data out of your bank account if you connect your bank account to um this to my project",
    "start": "1550039",
    "end": "1556880"
  },
  {
    "text": "and Insurance Service receipts service Tax Service all kinds",
    "start": "1556880",
    "end": "1562100"
  },
  {
    "text": "of services so I'm not going to lie to you and say that I've designed this beautiful",
    "start": "1562100",
    "end": "1568360"
  },
  {
    "text": "microservices architecture that follows best practice for now while I'm kind of like building",
    "start": "1568360",
    "end": "1573860"
  },
  {
    "text": "this and figuring out the business model I have made a number of technical concessions up front",
    "start": "1573860",
    "end": "1579500"
  },
  {
    "text": "so here is an example I have two services",
    "start": "1579500",
    "end": "1584779"
  },
  {
    "text": "I have allowed certain Lambda functions in one service to read and write directly to a database",
    "start": "1584779",
    "end": "1592400"
  },
  {
    "text": "that belongs to a different service like this now normally this is a big big No-No in",
    "start": "1592400",
    "end": "1599720"
  },
  {
    "text": "a micro Services world because it's a bad idea to have this kind of coupling right because if I make a change to the",
    "start": "1599720",
    "end": "1606559"
  },
  {
    "text": "database now I have to go and find all possible functions that interact with this database and have to update all",
    "start": "1606559",
    "end": "1613220"
  },
  {
    "text": "those functions across all possible services I'm breaking basically all of the contracts not a good idea and in a way",
    "start": "1613220",
    "end": "1620659"
  },
  {
    "text": "what I've done now is I've created a serverless monolith as well because I have defined my microservices",
    "start": "1620659",
    "end": "1627260"
  },
  {
    "text": "but because I've allowed functions across boundaries kind of everything is now mixed together",
    "start": "1627260",
    "end": "1634880"
  },
  {
    "text": "they go it's a monolith rather than cleanly isolated services so how could I potentially go about",
    "start": "1634880",
    "end": "1641240"
  },
  {
    "text": "fixing this issue and I think this diagram spoils the answer already because one way to fix the issue is to",
    "start": "1641240",
    "end": "1648140"
  },
  {
    "text": "make everything go through an interface right if a microservice has an interface in this case fronted by an API Gateway",
    "start": "1648140",
    "end": "1655460"
  },
  {
    "text": "all requests go through that API Gateway this is like you know akin to having an",
    "start": "1655460",
    "end": "1660559"
  },
  {
    "text": "interface for a class right you don't care about the implementation of the class the inner workings may change but",
    "start": "1660559",
    "end": "1666140"
  },
  {
    "text": "as long as you adhere to the interface everything is good solid approach Works nicely in most",
    "start": "1666140",
    "end": "1671840"
  },
  {
    "text": "cases although to be honest in some situations it may not be amazing because of the",
    "start": "1671840",
    "end": "1677659"
  },
  {
    "text": "extra latency introduced by the API Gateway and then of course you can have some additional complications if you",
    "start": "1677659",
    "end": "1683779"
  },
  {
    "text": "have a number of services that need to be called one after another for example but to be honest in a lot of situations",
    "start": "1683779",
    "end": "1690679"
  },
  {
    "text": "that are not overly complex this is totally fine okay now if you don't need an immediate",
    "start": "1690679",
    "end": "1696740"
  },
  {
    "text": "response and you'll find handling eventual consistency so meaning that things can be updated over time and",
    "start": "1696740",
    "end": "1703400"
  },
  {
    "text": "potentially even in a different order this is you know event streaming it's a",
    "start": "1703400",
    "end": "1708440"
  },
  {
    "text": "very popular solution I'm sure we will see talks at Yao about event streaming this is why I love this conference every",
    "start": "1708440",
    "end": "1715039"
  },
  {
    "text": "time I attend there's always a token event streaming and I always go to it so you can use the capability built into",
    "start": "1715039",
    "end": "1721880"
  },
  {
    "text": "dynamodb to stream all changes like updates and deletes and have other",
    "start": "1721880",
    "end": "1727159"
  },
  {
    "text": "functions invoke on those events process those Events maybe update other databases or send messages or do",
    "start": "1727159",
    "end": "1734059"
  },
  {
    "text": "whatever so dynamod these streams is nice because it does capture a Time ordered sequence",
    "start": "1734059",
    "end": "1739940"
  },
  {
    "text": "of item level modifications which is good and this provides a nice looser level of coupling and you are using kind",
    "start": "1739940",
    "end": "1746659"
  },
  {
    "text": "of that capability and robust nature of dynamodb and Lambda to do it quick aside remember this little diagram",
    "start": "1746659",
    "end": "1754580"
  },
  {
    "text": "from a cloud Guru architecture like 11 slides back",
    "start": "1754580",
    "end": "1759620"
  },
  {
    "text": "people ask me if you move away from Firebase how can you re-implement that",
    "start": "1759620",
    "end": "1764779"
  },
  {
    "text": "beautiful kind of functionality that Firebase provided right where it would",
    "start": "1764779",
    "end": "1770360"
  },
  {
    "text": "kind of stream changes to the front end using websockets",
    "start": "1770360",
    "end": "1775460"
  },
  {
    "text": "so I'm going to quickly show you how I would create a Firebase clone",
    "start": "1775460",
    "end": "1780559"
  },
  {
    "text": "just using dynamodb and if you do this yourself and you make the next billion dollar Company please",
    "start": "1780559",
    "end": "1786500"
  },
  {
    "text": "remember where you heard it first because I'm remembering all your faces so",
    "start": "1786500",
    "end": "1792919"
  },
  {
    "text": "so first quickly let's see how we could create a materialized view architecture",
    "start": "1792919",
    "end": "1798980"
  },
  {
    "text": "without web sockets we'll put we'll cover web sockets in a minute let's just put that aside so this is just using regular HTTP",
    "start": "1798980",
    "end": "1806179"
  },
  {
    "text": "reading rights so first you create a simple API endpoint and the function to",
    "start": "1806179",
    "end": "1811700"
  },
  {
    "text": "process a request coming in you have the function update the database then you have dynamodb publish all events as we",
    "start": "1811700",
    "end": "1819080"
  },
  {
    "text": "spoke about before using dynamodb streams then you have another Lambda connected to the stream which is which",
    "start": "1819080",
    "end": "1825860"
  },
  {
    "text": "invokes on all the changes made to the database it grabs the change and updates",
    "start": "1825860",
    "end": "1832220"
  },
  {
    "text": "um your second materialized view database right so this is your read-only",
    "start": "1832220",
    "end": "1837760"
  },
  {
    "text": "view now you can have a read API another Lambda function perhaps to grab",
    "start": "1837760",
    "end": "1844760"
  },
  {
    "text": "data from that materialized view so in other words you could have a write API",
    "start": "1844760",
    "end": "1850279"
  },
  {
    "text": "which writes data to one database and then you have your materialized view just for reading data and that",
    "start": "1850279",
    "end": "1856340"
  },
  {
    "text": "materialized view perhaps is presented differently to your user interface maybe it's enriched with",
    "start": "1856340",
    "end": "1862340"
  },
  {
    "text": "other things who knows with me so far good now websockets",
    "start": "1862340",
    "end": "1870220"
  },
  {
    "start": "1867000",
    "end": "1867000"
  },
  {
    "text": "API Gateway supports web sockets and whenever a connection is made via",
    "start": "1870220",
    "end": "1876919"
  },
  {
    "text": "websocket you also receive a connection ID which you basically then just need to store somewhere in a cache or a database",
    "start": "1876919",
    "end": "1883580"
  },
  {
    "text": "wherever you can always look it up and then send a response back to the client",
    "start": "1883580",
    "end": "1890059"
  },
  {
    "text": "so basically that's it right you have two things here the client connects with the",
    "start": "1890059",
    "end": "1897020"
  },
  {
    "text": "websocket you receive the connection ID you store that information in the dynamodb then when you need to send a",
    "start": "1897020",
    "end": "1903679"
  },
  {
    "text": "response back you look up the connection ID from Dynamo and you say to API",
    "start": "1903679",
    "end": "1909140"
  },
  {
    "text": "Gateway hey send data back to um that particular client or maybe you",
    "start": "1909140",
    "end": "1914480"
  },
  {
    "text": "want to send that back to all of the clients to all the clients connected to your system right then you can kind of",
    "start": "1914480",
    "end": "1919820"
  },
  {
    "text": "just scan okay maybe don't use scan but you get all the client IDs and you send them data or whatever you want to send",
    "start": "1919820",
    "end": "1927860"
  },
  {
    "text": "so that's that so now let's try to Mush those two things together to create our own Firebase",
    "start": "1927860",
    "end": "1934220"
  },
  {
    "text": "so what you'll see is very familiar because that's basically the previous two slides put together so first we create a websocket API",
    "start": "1934220",
    "end": "1942220"
  },
  {
    "text": "that receives some messages some data and invokes a Lambda function that Lambda function updates the database",
    "start": "1942220",
    "end": "1950919"
  },
  {
    "text": "which pushes some data onto dynamodb stream great that invokes another function which updates our materialized",
    "start": "1951200",
    "end": "1958159"
  },
  {
    "text": "view our read-only database which then this is a little different which then",
    "start": "1958159",
    "end": "1963200"
  },
  {
    "text": "pushes its own changes to another dynamodb stream this invokes another function",
    "start": "1963200",
    "end": "1970399"
  },
  {
    "text": "which then looks up the required connection ID or maybe all the connection IDs and then pushes out what",
    "start": "1970399",
    "end": "1977240"
  },
  {
    "text": "it needs to push out why the websocket API so this is really kind of like Firebase",
    "start": "1977240",
    "end": "1984080"
  },
  {
    "text": "in a nutshell and it's kind of cool because you have your read and write databases it all",
    "start": "1984080",
    "end": "1990919"
  },
  {
    "text": "happens seamlessly it's event driven which is kind of nice and it works",
    "start": "1990919",
    "end": "1997600"
  },
  {
    "text": "one quick word of caution if you are using dynamodb streams and you have multiple consumers reading data from",
    "start": "1997600",
    "end": "2004600"
  },
  {
    "text": "that stream just don't attach a bunch of Lambda functions to it AWS will throttle you in fact they",
    "start": "2004600",
    "end": "2012880"
  },
  {
    "text": "State this no more than two processes at most should be reading from the same",
    "start": "2012880",
    "end": "2018880"
  },
  {
    "text": "streams shot at the same time having more than two readers per shot will result in throttling so a better",
    "start": "2018880",
    "end": "2025899"
  },
  {
    "text": "approach then if you do need to have multiple consumers reading from a stream is to have just a single function that",
    "start": "2025899",
    "end": "2031779"
  },
  {
    "text": "reads the data then pushes that data onto an SNS topic and then you can attach as many other functions to that",
    "start": "2031779",
    "end": "2039279"
  },
  {
    "text": "SNS topic as you want right and that's kind of like the preferred way of having multiple consumers in this scenario this",
    "start": "2039279",
    "end": "2046419"
  },
  {
    "text": "is what AWS suggests good it works awesome now this is my favorite slide",
    "start": "2046419",
    "end": "2053378"
  },
  {
    "text": "as I was putting together the previous free slides about websockets I was",
    "start": "2053379",
    "end": "2059138"
  },
  {
    "text": "reminded about something called mallet architectures is anybody familiar with mallet",
    "start": "2059139",
    "end": "2064358"
  },
  {
    "text": "architectures excellent excellent when you go back to work tomorrow you could Amaze all your",
    "start": "2064359",
    "end": "2071440"
  },
  {
    "text": "workmates with a story about smaller architectures this is this is gonna if there's one takeaway take this so in",
    "start": "2071440",
    "end": "2078099"
  },
  {
    "text": "real estate a mallet architecture refers to a house which is traditional",
    "start": "2078099",
    "end": "2084339"
  },
  {
    "text": "on the front but is modern on the back right and usually it's done to conform",
    "start": "2084339",
    "end": "2089800"
  },
  {
    "text": "to some neighborhood regulation right you have to have all your houses look the same but they can be modern on the",
    "start": "2089800",
    "end": "2096040"
  },
  {
    "text": "back now in software we can actually think about our architecture in a similar way",
    "start": "2096040",
    "end": "2103619"
  },
  {
    "text": "you can have a conventional approach that faces externally but a more modern approach on the inside",
    "start": "2104320",
    "end": "2111820"
  },
  {
    "text": "and so web sockets is an example of this right websockets are stateful on the front but are serverless or function based on",
    "start": "2111820",
    "end": "2120040"
  },
  {
    "text": "the rear or on the implementation side there's also the reverse wallet right",
    "start": "2120040",
    "end": "2126040"
  },
  {
    "text": "because we can stretch this analogy and just torture it to until it dies so",
    "start": "2126040",
    "end": "2131200"
  },
  {
    "text": "reverse mullet is when you have functions that communicate to all the conventional systems right and it's done",
    "start": "2131200",
    "end": "2138579"
  },
  {
    "text": "by keeping a connection state in local memory or a database or Cloud caching service or a double Mallet oh my God",
    "start": "2138579",
    "end": "2144820"
  },
  {
    "text": "double Mallet is when you have two old systems right maybe you have some kind of like XML terrible old systems and",
    "start": "2144820",
    "end": "2151780"
  },
  {
    "text": "they need to talk to one another but you implement kind of like that um message",
    "start": "2151780",
    "end": "2157119"
  },
  {
    "text": "passing using Lambda or with a functional approach so you Marshall data in a serverless way",
    "start": "2157119",
    "end": "2165460"
  },
  {
    "text": "between the two all the systems double mullet there you go um so but anyway that websockets architecture that I",
    "start": "2165460",
    "end": "2172420"
  },
  {
    "text": "described in the previous few slides that's an example of a mallet architecture there's some use useless",
    "start": "2172420",
    "end": "2177700"
  },
  {
    "text": "piece of knowledge for you you'd like to remember it back to this",
    "start": "2177700",
    "end": "2183160"
  },
  {
    "text": "now we spoke about event streaming dynamodb excellent if you want to take",
    "start": "2183160",
    "end": "2188260"
  },
  {
    "text": "your architecture to the next level and I don't know if I'm running out of time I think I'm still good",
    "start": "2188260",
    "end": "2193480"
  },
  {
    "text": "um you can take a look at Amazon eventbridge has anybody seen or used eventbridge really cool stuff excellent",
    "start": "2193480",
    "end": "2200140"
  },
  {
    "text": "really cool service I strongly suggest that you do look at it it's basically a",
    "start": "2200140",
    "end": "2205180"
  },
  {
    "text": "serverless event bus and it's super scalable it supports multiple consumers so there's no issue",
    "start": "2205180",
    "end": "2210460"
  },
  {
    "text": "connecting things up to it it provides at least once delivery semantics exponential back off for like 24 hours",
    "start": "2210460",
    "end": "2217859"
  },
  {
    "text": "integrates with Lambda it's actually a really good service so if you decide even more flexibility and if you know",
    "start": "2217859",
    "end": "2225640"
  },
  {
    "text": "your events aren't just generated by dynamodb eventbridge",
    "start": "2225640",
    "end": "2231460"
  },
  {
    "text": "good solution to look at push your events there let multiple Services subscribe to those events",
    "start": "2231460",
    "end": "2238240"
  },
  {
    "start": "2238000",
    "end": "2238000"
  },
  {
    "text": "now another way to subscribe microservices because in AWS there isn't just one way to do things right",
    "start": "2238240",
    "end": "2245020"
  },
  {
    "text": "queen says if you want to run containers there are 27 different ways but anyway step functions now I love a new Step",
    "start": "2245020",
    "end": "2252339"
  },
  {
    "text": "functions a lot so step functions allow you to coordinate microservices and make changes in a",
    "start": "2252339",
    "end": "2260500"
  },
  {
    "text": "robust traceable way so step functions is a service that lets you define workflows and it's way simple",
    "start": "2260500",
    "end": "2268180"
  },
  {
    "text": "to use than the old Amazon simple workflow service which is the joke goes was anything but",
    "start": "2268180",
    "end": "2275140"
  },
  {
    "text": "simple so step functions is great for distributed applications it has built-in",
    "start": "2275140",
    "end": "2280599"
  },
  {
    "text": "support for failure States for retrace parallelization it integrates with a bunch of services has observability",
    "start": "2280599",
    "end": "2287320"
  },
  {
    "text": "backed in I use it a lot actually and I would seriously recommend examining step",
    "start": "2287320",
    "end": "2293200"
  },
  {
    "text": "functions if you have complex workflows or failure States it's very helpful and",
    "start": "2293200",
    "end": "2298359"
  },
  {
    "text": "one interesting Insight that I have gained from using step functions is that it works well as a workflow mechanism",
    "start": "2298359",
    "end": "2305280"
  },
  {
    "text": "within a service at a low level and also between services at a high",
    "start": "2305280",
    "end": "2311440"
  },
  {
    "text": "level so you can orchestrate things between services so it's kind of flexible enough for both situations and",
    "start": "2311440",
    "end": "2318160"
  },
  {
    "text": "again you can Define deploy it with cdk and cloud formation like any other piece of infrastructure",
    "start": "2318160",
    "end": "2323260"
  },
  {
    "text": "it's awesome so we have Lambda we have step functions",
    "start": "2323260",
    "end": "2329800"
  },
  {
    "start": "2326000",
    "end": "2326000"
  },
  {
    "text": "for orchestration we have all these great things but some problems are still very difficult to solve right and I'm",
    "start": "2329800",
    "end": "2336940"
  },
  {
    "text": "stubborn and I want to do things serverlessly I don't run kubernetes so virtual machines got forbid so how could",
    "start": "2336940",
    "end": "2342520"
  },
  {
    "text": "we do it well we could potentially take a large problem and then solve it by applying",
    "start": "2342520",
    "end": "2349359"
  },
  {
    "text": "principles like mapreduce and parallelization because like I said we all know Lambda is a supercomputer and I",
    "start": "2349359",
    "end": "2356619"
  },
  {
    "text": "bet we can make it run really damn fast I don't know if I can say them but sorry",
    "start": "2356619",
    "end": "2361960"
  },
  {
    "text": "you may just have to the editor may have to cut that out so a couple of years I actually posed a",
    "start": "2361960",
    "end": "2367240"
  },
  {
    "text": "problem for myself can I transcode a large video file",
    "start": "2367240",
    "end": "2372940"
  },
  {
    "text": "with a serverless only approach like I'm talking about like a movie right I want to transcode it from",
    "start": "2372940",
    "end": "2379540"
  },
  {
    "text": "you know 1080p to 720p for example how would you do it using Lambda",
    "start": "2379540",
    "end": "2385960"
  },
  {
    "text": "and before I tell you about my solution I just want to say that what I'm proposing here is an example right",
    "start": "2385960",
    "end": "2393480"
  },
  {
    "text": "I know that there are companies that have actually done this specific thing in real life but if I needed to",
    "start": "2393480",
    "end": "2399880"
  },
  {
    "text": "re-encode the file I would just use a service like AWS Elementals media convert what I want to illustrate to you",
    "start": "2399880",
    "end": "2407619"
  },
  {
    "text": "though is the kind of thinking you can apply if a resume solution doesn't exist and",
    "start": "2407619",
    "end": "2413859"
  },
  {
    "text": "you do have to invent something that nobody else has solved",
    "start": "2413859",
    "end": "2419140"
  },
  {
    "start": "2419000",
    "end": "2419000"
  },
  {
    "text": "so divide and conquer how could we encode a large video file with a serverless only approach",
    "start": "2419140",
    "end": "2426220"
  },
  {
    "text": "so we know that to solve large problems a way to tackle them is to break them into smaller parts",
    "start": "2426220",
    "end": "2433300"
  },
  {
    "text": "process these smaller parts independently hopefully in parallel which could be done in Lambda and then",
    "start": "2433300",
    "end": "2440140"
  },
  {
    "text": "combine them again together to get a result so here are the general steps you could take if you wanted to transcode",
    "start": "2440140",
    "end": "2446079"
  },
  {
    "text": "the video so you have your original file you can split it up using Lambda in parallel",
    "start": "2446079",
    "end": "2454140"
  },
  {
    "text": "then you can convert those little video chunks that you have created again in",
    "start": "2454300",
    "end": "2459700"
  },
  {
    "text": "parallel to a different format then you can start merging everything together to get back a new file and",
    "start": "2459700",
    "end": "2466540"
  },
  {
    "text": "there's a little link there you can go check it out it's my blog post which actually goes into the architecture in a",
    "start": "2466540",
    "end": "2472780"
  },
  {
    "text": "lot of depth and shows you how to do it you can also pick up a book pick up my book but if you don't want to pay for it",
    "start": "2472780",
    "end": "2478960"
  },
  {
    "text": "just read the book so it's all there anyway and I'll show you just quickly at a high",
    "start": "2478960",
    "end": "2484540"
  },
  {
    "start": "2482000",
    "end": "2482000"
  },
  {
    "text": "level how I did it with step functions so the way it works is this a user",
    "start": "2484540",
    "end": "2491260"
  },
  {
    "text": "uploads the big video file into an S3 bucket that kicks off a function that",
    "start": "2491260",
    "end": "2497140"
  },
  {
    "text": "analyzes the video file using FF probe FF probe is part of FFM tag it's just a",
    "start": "2497140",
    "end": "2503020"
  },
  {
    "text": "little utility that runs and can kind of scan the file and work out where the keyframes are and where you need to",
    "start": "2503020",
    "end": "2509140"
  },
  {
    "text": "cleanly kind of cut the file to create small segments that you can then transcode and merge together",
    "start": "2509140",
    "end": "2516900"
  },
  {
    "text": "then that kicks off another Lambda function which strips out the audio and",
    "start": "2517140",
    "end": "2522220"
  },
  {
    "text": "saves that into EFS or an S3 bucket at the same time we can start",
    "start": "2522220",
    "end": "2529260"
  },
  {
    "text": "another part of Step functions there's a picture called Dynamic parallelism so it",
    "start": "2529260",
    "end": "2535119"
  },
  {
    "text": "basically allows you to dispatch a whole bunch of Lambda functions at once to split up the original file into tiny",
    "start": "2535119",
    "end": "2541300"
  },
  {
    "text": "chunks right and those tiny chunks uh saved to a different format and sorry",
    "start": "2541300",
    "end": "2548320"
  },
  {
    "text": "converted to a different format and saved internet S3 bucket and then you can start the merge operation now there",
    "start": "2548320",
    "end": "2554680"
  },
  {
    "text": "is a bit of accounting that you have to keep track of because you kind of need to know which chunks have been converted",
    "start": "2554680",
    "end": "2559780"
  },
  {
    "text": "and which haven't so there's a bit of an algorithm to this again if you look at the blog post the algorithm is described",
    "start": "2559780",
    "end": "2566980"
  },
  {
    "text": "it's actually not that difficult which is nice and then at the end you can start merging things together and you",
    "start": "2566980",
    "end": "2574180"
  },
  {
    "text": "get the new file look step functions is awesome it has its quirks it can be pricey if you use",
    "start": "2574180",
    "end": "2579819"
  },
  {
    "text": "it a lot but overall I'm happy with it there are also Express workflows for step functions which kind of is like a",
    "start": "2579819",
    "end": "2586420"
  },
  {
    "text": "cheaper version of Step functions it has a higher throughput as well but there are some limitations",
    "start": "2586420",
    "end": "2593380"
  },
  {
    "text": "um I think it only runs for like five minutes so this is regular step functions which run for a year",
    "start": "2593380",
    "end": "2599740"
  },
  {
    "text": "and so when they build the initial system I think initially I did it just for dynamodb S and S and Lambda and then",
    "start": "2599740",
    "end": "2605980"
  },
  {
    "start": "2600000",
    "end": "2600000"
  },
  {
    "text": "I implemented a version of it using step functions I Benchmark",
    "start": "2605980",
    "end": "2612040"
  },
  {
    "text": "um kind of a bunch of files so this is what I got",
    "start": "2612040",
    "end": "2619020"
  },
  {
    "text": "so I converted the same six videos on my MacBook on an ec2 and using my",
    "start": "2619180",
    "end": "2626319"
  },
  {
    "text": "serverless Lambda uh this was just videos that downloaded somewhere and you can see that in nearly",
    "start": "2626319",
    "end": "2632619"
  },
  {
    "text": "all circumstances by but one serverless Lambda for this use case was actually",
    "start": "2632619",
    "end": "2637780"
  },
  {
    "text": "faster and I started thinking is it really like did I make a mistake somewhere but it does make sense because",
    "start": "2637780",
    "end": "2644260"
  },
  {
    "text": "when you convert a file normally using ffmpeg say on my computer it is done",
    "start": "2644260",
    "end": "2649480"
  },
  {
    "text": "sequentially right there's just one bit after another bit is converted but when you do it using Lambda it's all done in",
    "start": "2649480",
    "end": "2655180"
  },
  {
    "text": "parallel kind of at the same time so it's a lot faster so I'm like wow I kind of actually you know",
    "start": "2655180",
    "end": "2662200"
  },
  {
    "text": "implemented something good another thing that I should mention at reinland last week AWS announced",
    "start": "2662200",
    "end": "2669520"
  },
  {
    "text": "something called step functions distributed map which is actually designed to support large-scale",
    "start": "2669520",
    "end": "2676300"
  },
  {
    "text": "parallel workloads so it's a distributed map state that can",
    "start": "2676300",
    "end": "2682300"
  },
  {
    "text": "launch up to 10 000 parallel workflows to process your data so it's not",
    "start": "2682300",
    "end": "2687579"
  },
  {
    "text": "designed for this use case I can see that my time is nearly up",
    "start": "2687579",
    "end": "2692579"
  },
  {
    "text": "um so I just want to quickly go over the complaints how to Dev locally yes but we",
    "start": "2692619",
    "end": "2697660"
  },
  {
    "text": "do have Frameworks like SST which can help us now same with debugging SST we have some AWS",
    "start": "2697660",
    "end": "2704619"
  },
  {
    "text": "tooling we have lumigo observability true again lumigo is good",
    "start": "2704619",
    "end": "2713280"
  },
  {
    "text": "hard or impossible to do certain things look maybe it's true maybe you do have to use containers for certain things",
    "start": "2713619",
    "end": "2720880"
  },
  {
    "text": "but I think if you can divide and conquer a lot of the tasks you can do it serverlessly as well without having to",
    "start": "2720880",
    "end": "2727180"
  },
  {
    "text": "resort to Containers or VMS and again looking problem again I don't think lock-in is the problem I think",
    "start": "2727180",
    "end": "2734020"
  },
  {
    "text": "it's actually where the data is can you transport your data somewhere else I think that's the question you have to",
    "start": "2734020",
    "end": "2739060"
  },
  {
    "text": "really ask yourself rather than you know where is your infrastructure at least in my experience",
    "start": "2739060",
    "end": "2745480"
  },
  {
    "text": "that's what I've seen and as I was finishing up this slide um I I was reminded of a talk by Tim",
    "start": "2745480",
    "end": "2752980"
  },
  {
    "text": "Bray from a few years ago at rinland so he defined the rules for",
    "start": "2752980",
    "end": "2758380"
  },
  {
    "text": "modern applications so he said think about security and compliance first use microservices go serverless",
    "start": "2758380",
    "end": "2765700"
  },
  {
    "text": "where possible Right servers first and then if that doesn't work for you fall back to other things fall back to",
    "start": "2765700",
    "end": "2771579"
  },
  {
    "text": "Containers fall back to VMS but have kind of that serverless first mindset to help you make better decisions this is",
    "start": "2771579",
    "end": "2778540"
  },
  {
    "text": "Tim Bray speaking uh make sure you have robust continuous integration continuous deployment",
    "start": "2778540",
    "end": "2784359"
  },
  {
    "text": "pipelines monitoring and you can check out the stock that link it's awesome it's online really",
    "start": "2784359",
    "end": "2791020"
  },
  {
    "text": "good and in about 30 seconds that I have left I just want to",
    "start": "2791020",
    "end": "2796720"
  },
  {
    "text": "add a few other kind of thoughts to that list as well first on the issue of microservices I",
    "start": "2796720",
    "end": "2803380"
  },
  {
    "text": "don't necessarily think that microservices are appropriate in all situations and the answer is it depends",
    "start": "2803380",
    "end": "2809920"
  },
  {
    "text": "and I know when I was younger I was very dogmatic right I thought okay everything has to be microservices only that's the",
    "start": "2809920",
    "end": "2815740"
  },
  {
    "text": "true way to build systems I don't think so now I've seen so many projects",
    "start": "2815740",
    "end": "2821020"
  },
  {
    "text": "I think it just depends if you're working on a small project if you're working within kind of a narrow bounded",
    "start": "2821020",
    "end": "2826660"
  },
  {
    "text": "scope if you're a startup wanting to get to Market really quickly just serverless",
    "start": "2826660",
    "end": "2832060"
  },
  {
    "text": "monolith it's not a bad idea you can make it work and then you can potentially migrate to a more",
    "start": "2832060",
    "end": "2837400"
  },
  {
    "text": "microservices approach in time I was dogmatic I don't think I'm that",
    "start": "2837400",
    "end": "2842800"
  },
  {
    "text": "dogmatic now so your context and your goals I think matter a lot more",
    "start": "2842800",
    "end": "2848380"
  },
  {
    "text": "automation is a must my God serverless systems are distributed systems if",
    "start": "2848380",
    "end": "2853599"
  },
  {
    "text": "you're using AWS you're dealing with a bunch of other services apart from Lambda you will end up with hundreds of",
    "start": "2853599",
    "end": "2859960"
  },
  {
    "text": "interconnected moving Parts if you do not automate deployments upgrades monitoring the complexity of the system",
    "start": "2859960",
    "end": "2867400"
  },
  {
    "text": "will crush you so you need to automate everything from the very start believe me",
    "start": "2867400",
    "end": "2872859"
  },
  {
    "text": "as we've discussed testing of cloud native applications can be tough",
    "start": "2872859",
    "end": "2878400"
  },
  {
    "text": "things are definitely getting a little bit easier but you know explore SST and",
    "start": "2878400",
    "end": "2884220"
  },
  {
    "text": "similar Frameworks for testing and have a solid unit unit test strategy as well",
    "start": "2884220",
    "end": "2891480"
  },
  {
    "text": "um something we've discussed going serverless may make architectural changes easier not easy but easier",
    "start": "2891520",
    "end": "2900460"
  },
  {
    "text": "yeah I won't go on too much about it and yeah you know have a strategic mindset",
    "start": "2900460",
    "end": "2906339"
  },
  {
    "text": "in mind you know go maybe serverless first again and if that doesn't work fall back to other",
    "start": "2906339",
    "end": "2912060"
  },
  {
    "text": "technical options that may potentially suit you better I know I've gone a minute over time but",
    "start": "2912060",
    "end": "2917859"
  },
  {
    "start": "2916000",
    "end": "2916000"
  },
  {
    "text": "this is like seriously the second last slide I just want to look at the future for one second future of cloud computing",
    "start": "2917859",
    "end": "2924220"
  },
  {
    "text": "this is where we may be going and I just want to say I am an advisor to this startup so",
    "start": "2924220",
    "end": "2929680"
  },
  {
    "text": "I've been talking to them a lot so it's called amped and it's interesting because they're trying to",
    "start": "2929680",
    "end": "2935800"
  },
  {
    "text": "solve the complexity of cloud computing by building better abstractions",
    "start": "2935800",
    "end": "2941338"
  },
  {
    "text": "one thing that we've learned is that as Humanity we work we",
    "start": "2941619",
    "end": "2947440"
  },
  {
    "text": "go towards a better abstraction all the time so we started with Punch Cards went to assembly went to see when to Java",
    "start": "2947440",
    "end": "2953859"
  },
  {
    "text": "went to fourth generation languages same with infrastructure we started with you know on-prem service virtual VMS in",
    "start": "2953859",
    "end": "2960339"
  },
  {
    "text": "Cloud containers serverless enabled by containers and what these guys and similar",
    "start": "2960339",
    "end": "2968020"
  },
  {
    "text": "companies there's there are a few companies in the space what they're trying to do is",
    "start": "2968020",
    "end": "2973359"
  },
  {
    "text": "move us forward by becoming kind of like a compiler for the cloud so the idea that they had is",
    "start": "2973359",
    "end": "2980380"
  },
  {
    "text": "that you write business logic they look at the business Logics let's say it's an express application right",
    "start": "2980380",
    "end": "2986440"
  },
  {
    "text": "they look at the business logic and they infer the infrastructure that is required to run the business logic and",
    "start": "2986440",
    "end": "2992920"
  },
  {
    "text": "they deploy deploy it for you as well and at the end of the day it doesn't really matter you know",
    "start": "2992920",
    "end": "2999040"
  },
  {
    "text": "whether your application runs on Lambda or containers what do we care right like",
    "start": "2999040",
    "end": "3004560"
  },
  {
    "text": "most of the time we're trying to solve a business problem for our customer so why not let a cloud compiler",
    "start": "3004560",
    "end": "3011700"
  },
  {
    "text": "kind of analyze what you're doing deployed an effective version of your infrastructure because then",
    "start": "3011700",
    "end": "3017940"
  },
  {
    "text": "it could get really smart it could actually analyze your usage and dynamically re-platform your",
    "start": "3017940",
    "end": "3023880"
  },
  {
    "text": "infrastructure say from serverless to fargate from containers from Lambda to fargate if it decides that it's a more",
    "start": "3023880",
    "end": "3030599"
  },
  {
    "text": "cost effective option or maybe go back so what I'm saying is watch the space",
    "start": "3030599",
    "end": "3035640"
  },
  {
    "text": "this is very interesting this cloud compilers or Cloud operating systems I think we'll start hearing about them",
    "start": "3035640",
    "end": "3041819"
  },
  {
    "text": "over the next few years because they will try to kind of solve some of the complexity that we're still dealing with",
    "start": "3041819",
    "end": "3048059"
  },
  {
    "text": "today and I promise this is the very last slide go check out my project go check out the book there's another great",
    "start": "3048059",
    "end": "3054059"
  },
  {
    "text": "book called the value flywheel effect it's actually a book for business people and managers about serverless and why",
    "start": "3054059",
    "end": "3060960"
  },
  {
    "text": "going serverless first makes you more operational efficient and there's actually a case study in there about a",
    "start": "3060960",
    "end": "3067140"
  },
  {
    "text": "cloud Guru and how we kind of build our company I'm from ground up and with that I think",
    "start": "3067140",
    "end": "3072960"
  },
  {
    "text": "I'm out of time thank you very much",
    "start": "3072960",
    "end": "3076940"
  }
]