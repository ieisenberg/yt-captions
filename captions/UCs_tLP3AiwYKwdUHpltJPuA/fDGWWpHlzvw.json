[
  {
    "text": "okay so welcome all to what's going to be the last track so I get the graveyard slot hopefully you're all a bit more",
    "start": "5400",
    "end": "10800"
  },
  {
    "text": "awake than I am CU I'm desperately jetlagged and full of coffee so let's hopefully I can keep it together so what",
    "start": "10800",
    "end": "17600"
  },
  {
    "text": "I want to talk about today is about performance and the most important thing about performance is you come out from a",
    "start": "17600",
    "end": "23560"
  },
  {
    "text": "scientific perspective and this guy sums up so much for me for how we should be",
    "start": "23560",
    "end": "29199"
  },
  {
    "text": "thinking about things like ously was involved with many different things but",
    "start": "29199",
    "end": "34280"
  },
  {
    "text": "particularly the speace shuttle and the whole thing of defining the problem being the O-ring and explaining that it",
    "start": "34280",
    "end": "41360"
  },
  {
    "text": "was part of what was known as the Rogers commission and these were two",
    "start": "41360",
    "end": "46840"
  },
  {
    "text": "interesting facts about fan involved in this stated by Rogers so Rogers headed",
    "start": "46840",
    "end": "52480"
  },
  {
    "text": "the commission and it started off by saying fan is becoming a real pen he kept sticking his nose and everything he",
    "start": "52480",
    "end": "58280"
  },
  {
    "text": "kept asking questions he kept challenging everything by the end of it Rogers had a different view of him he",
    "start": "58280",
    "end": "65119"
  },
  {
    "text": "described him as someone who's got the greatest scientific Integrity of anyone you ever met and a lot of what that's",
    "start": "65119",
    "end": "71960"
  },
  {
    "text": "about is how he looks at problems is it must be an experiment that can be proven",
    "start": "71960",
    "end": "77479"
  },
  {
    "text": "he's got a lot of nice sort of things about it so let's wind back a little bit about fan and he got a Nobel Prize he got it",
    "start": "77479",
    "end": "85479"
  },
  {
    "text": "for his work on QED and whenever he proposed it originally",
    "start": "85479",
    "end": "90680"
  },
  {
    "text": "there's like three proposals around the same time all slightly different means no one realized they were the same thing",
    "start": "90680",
    "end": "96360"
  },
  {
    "text": "for a while most people didn't even understand what they're about and Freeman Dyson worked it out and he actually helped them explain what it was",
    "start": "96360",
    "end": "103560"
  },
  {
    "text": "but I love his description of it like the quantum Electro Dynamics it's so in so interesting because it explains",
    "start": "103560",
    "end": "111560"
  },
  {
    "text": "everything that you kind of want to know in this space but the bit I really like is it's the most accurate Theory ever",
    "start": "111560",
    "end": "118520"
  },
  {
    "text": "tested by experiments on Earth and this kind of sums up how we should think about performance we want to have",
    "start": "118520",
    "end": "124920"
  },
  {
    "text": "experiments to prove it so let's take a point from the man himself is it does not matter how intelligent you are if",
    "start": "124920",
    "end": "132000"
  },
  {
    "text": "you have a guas and that gas cannot be backed up by experimental evidence then it's just the guas and it's kind of nice",
    "start": "132000",
    "end": "137480"
  },
  {
    "text": "that some people are starting to do this like Ben gave a great talk yesterday where he explained how they went through",
    "start": "137480",
    "end": "142560"
  },
  {
    "text": "and worked out what they should be doing with event Loops but they did it based upon experimental evidence and this is",
    "start": "142560",
    "end": "147640"
  },
  {
    "text": "really important if you want to get performance right you got to think this way so what I want to do is talk about",
    "start": "147640",
    "end": "154720"
  },
  {
    "text": "how we design for performance and I'm going to cover four topics so I want to cover what is performance to sort of set",
    "start": "154720",
    "end": "160599"
  },
  {
    "text": "some ground for it I'm going to talk about how we sort of do things in a clean and representative manner which is",
    "start": "160599",
    "end": "166120"
  },
  {
    "text": "very key to this talk about implementing models and how we actually do performance testing",
    "start": "166120",
    "end": "171440"
  },
  {
    "text": "itself so kind of what is performance it's a very nebulous concept we talk about want a system to be fast we want",
    "start": "171440",
    "end": "177760"
  },
  {
    "text": "it to be performant but it that doesn't really really mean anything what we really start caring about is a number of",
    "start": "177760",
    "end": "183599"
  },
  {
    "text": "things one is throughput and there like how many units of something over a given time period can we get through we'll",
    "start": "183599",
    "end": "190599"
  },
  {
    "text": "also hear the term bandwidth where bandwidth tends to be maximum throughput for something that you're",
    "start": "190599",
    "end": "196080"
  },
  {
    "text": "doing we also will talk about latency and we'll talk about response time these are two different things and again in",
    "start": "196080",
    "end": "203440"
  },
  {
    "text": "our industry we keep mixing these up we get it all quite confused but it's like how quickly does something responds or",
    "start": "203440",
    "end": "208920"
  },
  {
    "text": "how long are we waiting if we want to think about it can I also just want to make a quick point on scalability which",
    "start": "208920",
    "end": "214720"
  },
  {
    "text": "is something else so by scalability what we mean is if we add more resource we",
    "start": "214720",
    "end": "220040"
  },
  {
    "text": "should get a proportional increase in throughput that is a scalable system if you're just adding more resource and you",
    "start": "220040",
    "end": "227159"
  },
  {
    "text": "do not get a proportional increase in throughput you do not have a very scalable system you've got a problem",
    "start": "227159",
    "end": "232840"
  },
  {
    "text": "somewhere and ants are a great example of this to have great scalability does not mean you have great performance in",
    "start": "232840",
    "end": "240040"
  },
  {
    "text": "either the throughput or the latency sense per unit and the great example of this is ants are actually very dumb so",
    "start": "240040",
    "end": "247400"
  },
  {
    "text": "most of the ants have the job of going out finding a leaf taking a piece of the leaf and bringing it back now whenever",
    "start": "247400",
    "end": "255159"
  },
  {
    "text": "ants go pick up leaves they grab with one of their little hands a bit of the leaf and with the other one they",
    "start": "255159",
    "end": "261479"
  },
  {
    "text": "cut 50% of the time they grabed the wrong side and the leaf falls on the",
    "start": "261479",
    "end": "266720"
  },
  {
    "text": "ground so they're not really striving for efficiency but what's really neat about that and",
    "start": "266720",
    "end": "271840"
  },
  {
    "text": "this is where Evolution has done something very clever that is not the dominant cost the dominant cost is",
    "start": "271840",
    "end": "277840"
  },
  {
    "text": "taking that thing back to the motherload where it's all going to back so where we",
    "start": "277840",
    "end": "283039"
  },
  {
    "text": "need to bring it all back to that trip back is the more important part and we do this a lot in technology is we focus",
    "start": "283039",
    "end": "288560"
  },
  {
    "text": "on these little things and miss the big important thing and that's the Gap back so you don't need to be intelligent we",
    "start": "288560",
    "end": "294960"
  },
  {
    "text": "just need to do it right now when it comes to Performance I think this sums up nearly the entire",
    "start": "294960",
    "end": "301560"
  },
  {
    "text": "picture for me this is my life a lot I end up flying and I end up going to",
    "start": "301560",
    "end": "306840"
  },
  {
    "text": "border control and with this you can explain everything that's actually relevant about",
    "start": "306840",
    "end": "312680"
  },
  {
    "text": "performance so we'll hear about leeny we hear about response time different",
    "start": "312680",
    "end": "318440"
  },
  {
    "text": "things like that so what is the difference between these we just interchanged them but there is actually a distinct difference if you look at",
    "start": "318440",
    "end": "323759"
  },
  {
    "text": "queuing Theory so if I join one of these cues",
    "start": "323759",
    "end": "329160"
  },
  {
    "text": "I'm going to be doing a number of things and each of those things we could measure them in different times so how",
    "start": "329160",
    "end": "335639"
  },
  {
    "text": "long I'm waiting in the queue is my latency that is how long I am Laten to",
    "start": "335639",
    "end": "341479"
  },
  {
    "text": "do something when I get to the front of the queue and I go to the desk I'm now being serviced that is the service time",
    "start": "341479",
    "end": "348160"
  },
  {
    "text": "of a system those are distinctly different now what's response time it's latency plus service time and if you",
    "start": "348160",
    "end": "355919"
  },
  {
    "text": "want start modeling these things right and starting doing some real math on it we have to break these down and",
    "start": "355919",
    "end": "361400"
  },
  {
    "text": "understand what we're dealing with and how we deal with it and so then what is parallelism well I just have more cues",
    "start": "361400",
    "end": "368039"
  },
  {
    "text": "to go to here it's obviously the perfect model for this you also talk about things like Works stealing well what if",
    "start": "368039",
    "end": "373400"
  },
  {
    "text": "one of these cues is too long and another one's too short you Lally have someone come along and tell you to move",
    "start": "373400",
    "end": "378479"
  },
  {
    "text": "from this queue to another queue all these sorts of things we do this in reality but quite often it doesn't",
    "start": "378479",
    "end": "385560"
  },
  {
    "text": "really manifest itself properly in software yet is really really simple right before I had this little chat who",
    "start": "385560",
    "end": "392360"
  },
  {
    "text": "thought response time and latency was the same thing it's okay to admit a lot of people probably do in fact actually",
    "start": "392360",
    "end": "398919"
  },
  {
    "text": "most people use latency to describe response time latency look at the word look up in",
    "start": "398919",
    "end": "404479"
  },
  {
    "text": "the dictionary is about being latent you're waiting response time in has to include",
    "start": "404479",
    "end": "410280"
  },
  {
    "text": "the service time as well and once we understand these you can actually Design Systems better and you can optimize and",
    "start": "410280",
    "end": "416440"
  },
  {
    "text": "profile and do all of the right sorts of things so in particular let's look at queing theory for a",
    "start": "416440",
    "end": "421639"
  },
  {
    "text": "second so whenever we start using the system the more we use it we notice that",
    "start": "421639",
    "end": "428160"
  },
  {
    "text": "our response time starts to slow down well why does it slow down because",
    "start": "428160",
    "end": "433520"
  },
  {
    "text": "actually the service time is the same but you start joining cues and the",
    "start": "433520",
    "end": "439800"
  },
  {
    "text": "thing is if you go to something and it's been used more often so the utilization",
    "start": "439800",
    "end": "445360"
  },
  {
    "text": "going up the probability of someone being in the queue is greater so if you're only using something that like",
    "start": "445360",
    "end": "451560"
  },
  {
    "text": "10% of its utilization the chances are there's no one in the queue so you get a",
    "start": "451560",
    "end": "456960"
  },
  {
    "text": "good response time because you're not latent so the secret to having very responsive systems is keep the",
    "start": "456960",
    "end": "464120"
  },
  {
    "text": "utilization down don't have them running at maximum utilization and we can see here on this graph that once you go",
    "start": "464120",
    "end": "470520"
  },
  {
    "text": "about sort of 60 to 70% utilization things start getting pretty bad this also works in reality for projects and",
    "start": "470520",
    "end": "478120"
  },
  {
    "text": "people and everything like that if you run your teams at over 60% utilization if you need them to respond quickly to a",
    "start": "478120",
    "end": "484479"
  },
  {
    "text": "need guess what they're not going to be able to it's math you cannot run away from it this is just probability Theory",
    "start": "484479",
    "end": "491039"
  },
  {
    "text": "it's 100y old math and it's well described and so you start breaking these things down we can get that so if",
    "start": "491039",
    "end": "497440"
  },
  {
    "text": "you're designing say a financial trading systems you want to have it so over provisioned that whenever some work",
    "start": "497440",
    "end": "504199"
  },
  {
    "text": "comes along you want to have utilization so low that you're pretty much just going to get hit with service time if",
    "start": "504199",
    "end": "511440"
  },
  {
    "text": "you endend up having your system working quite busily at that point in time and you get a burst of traffic coming in",
    "start": "511440",
    "end": "516719"
  },
  {
    "text": "your utilization quite high you're going to Quee and your response time's going to go so you got to be aware of these",
    "start": "516719",
    "end": "521800"
  },
  {
    "text": "and we'll look at how we measure them and deal with them later on so that's kind of one of the pro tips is always",
    "start": "521800",
    "end": "527279"
  },
  {
    "text": "ensure you have sufficient capacity and by having sufficient capacity you will keep your utilization low and you can",
    "start": "527279",
    "end": "534080"
  },
  {
    "text": "respond quickly so if you want a service that's going to respond quickly utilization needs to be kept low",
    "start": "534080",
    "end": "540000"
  },
  {
    "text": "so can we go parallel to speed up that's we looked at that that's a single service in a single thing we go back to",
    "start": "540000",
    "end": "545320"
  },
  {
    "text": "those rows so we can have multiple rows and multiple cues going in well it's",
    "start": "545320",
    "end": "550480"
  },
  {
    "text": "great whenever those rows are all completely independent but in reality quite often they're not there's usually",
    "start": "550480",
    "end": "556839"
  },
  {
    "text": "some component of an algorithm that's sequential and shared between sort of multiple threads going and so let's say",
    "start": "556839",
    "end": "564240"
  },
  {
    "text": "if we look at our a process and we can split up into a and b",
    "start": "564240",
    "end": "569560"
  },
  {
    "text": "if I can break up air I can get a speed up so I'm running on say four core machine I can speed it up by doing air",
    "start": "569560",
    "end": "577880"
  },
  {
    "text": "and parallel but let's say I can't break up B I'm no Limited in what I can do say",
    "start": "577880",
    "end": "584600"
  },
  {
    "text": "it's the other way around I can split up B but I can't split up a I can only get",
    "start": "584600",
    "end": "589720"
  },
  {
    "text": "a certain speed up this is amal's law it's been arounded for a long while it's not actually amdal didn't coin the law",
    "start": "589720",
    "end": "596200"
  },
  {
    "text": "he talked about amal's argument and he's trying to convince us all not to go and buy mid-range machines he wanted you to",
    "start": "596200",
    "end": "601959"
  },
  {
    "text": "buy big mainframes that are very fast processors cuz he didn't want you doing parallel Computing he wanted to Pedal his main frames but he made a good point",
    "start": "601959",
    "end": "609640"
  },
  {
    "text": "that actually parallel programming is difficult so here's your typical sort of",
    "start": "609640",
    "end": "614959"
  },
  {
    "text": "speed up curves like if 50% can be made parallel you can only get a 2X speed up",
    "start": "614959",
    "end": "621079"
  },
  {
    "text": "you will not get more than 2x speed up like even let go up to 95% of your algorithm can go in parallel you will",
    "start": "621079",
    "end": "627880"
  },
  {
    "text": "not get more than a 20x speed up it's math it's the law you will not get past",
    "start": "627880",
    "end": "633399"
  },
  {
    "text": "this and so you you got to make sure that you do not have contention in your algorithms but it actually gets worse",
    "start": "633399",
    "end": "641160"
  },
  {
    "text": "that's the perfect case world that deals with contention it doesn't deal with coherence so when we have that",
    "start": "641160",
    "end": "647720"
  },
  {
    "text": "contention we have to make the results of that contention coherent to the different threads and we get into a",
    "start": "647720",
    "end": "654560"
  },
  {
    "text": "slightly bigger formula at this stage universal scalability law I recommend you look into it but we can now model",
    "start": "654560",
    "end": "660440"
  },
  {
    "text": "what's going on in a system based upon contention and coherence and start working out what is the response time",
    "start": "660440",
    "end": "666760"
  },
  {
    "text": "and what is the speedups we can get we can start plugging this in and if I plugged in a coherence factor of 250",
    "start": "666760",
    "end": "677480"
  },
  {
    "text": "microsc and uh contention factor of 5% these are",
    "start": "677480",
    "end": "682880"
  },
  {
    "text": "the curves I get as I throw CPUs at a problem now if you sort of look at this",
    "start": "682880",
    "end": "688000"
  },
  {
    "text": "graph if you look over here here at the sort of 2 48 CPUs you can see it over",
    "start": "688000",
    "end": "693200"
  },
  {
    "text": "here it all kind of stays and step and that's the world that we've been in for a while for the majority of people but",
    "start": "693200",
    "end": "699200"
  },
  {
    "text": "we're now moving into the 1632 whatever core is going up and these are sort of problems you also see this if you s are",
    "start": "699200",
    "end": "706440"
  },
  {
    "text": "running something on Amazon AWS and you're running with lots and lots of machines where actually the coherence",
    "start": "706440",
    "end": "711680"
  },
  {
    "text": "cost gets a lot higher you can't split up certain problems in where it just",
    "start": "711680",
    "end": "716720"
  },
  {
    "text": "won't scale and after a while the cost the coherence starts to dominate to the point you start to slow down again so",
    "start": "716720",
    "end": "723920"
  },
  {
    "text": "going parallel is not the answer if you've got any coherence problems at all in fact you need a problem that's",
    "start": "723920",
    "end": "729760"
  },
  {
    "text": "embarrassingly parallel and by embarrassingly parallel means there isn't a contention point then you can go",
    "start": "729760",
    "end": "735800"
  },
  {
    "text": "and scale up quite well and it's hard to do this so that's just something to be aware of and watch out for it's what I'm",
    "start": "735800",
    "end": "742959"
  },
  {
    "text": "a big fan of not ever having multiple writers to the same thing if you got multiple writers you've got contention",
    "start": "742959",
    "end": "749399"
  },
  {
    "text": "you've got coherence as a problem if you have a single writer you avoid most of that and you can actually performance",
    "start": "749399",
    "end": "755360"
  },
  {
    "text": "skill much better and it's a lot easier to understand and reason about so there's good reasons for doing that so I",
    "start": "755360",
    "end": "763279"
  },
  {
    "text": "also believe in that things need to be clean and representative so we hear about clean code often it's clean",
    "start": "763279",
    "end": "768800"
  },
  {
    "text": "movement and stuff I like to look at the meanings of words quite often so like I've had a bit of a bash on latency but",
    "start": "768800",
    "end": "775399"
  },
  {
    "text": "let's you look at clean I love this description from the Oxford English iary it's like morally",
    "start": "775399",
    "end": "781639"
  },
  {
    "text": "uncontaminated most code when you look at it is far from uncontaminated it's actually quite",
    "start": "781639",
    "end": "787560"
  },
  {
    "text": "disgusting and so to have clean code we got to get back to the purity of what it should be doing it's also important that",
    "start": "787560",
    "end": "794519"
  },
  {
    "text": "it's representative and what representative really means is that it's it's a true portrayal of something it's",
    "start": "794519",
    "end": "800560"
  },
  {
    "text": "the place where we capture our understanding I think documentation is great it's a great way of thinking about",
    "start": "800560",
    "end": "807360"
  },
  {
    "text": "stuff and you should do it but code is actually the place where you should capture your best understanding and",
    "start": "807360",
    "end": "813760"
  },
  {
    "text": "don't ever feel bad about it like what do you put in code today is your current understanding it's imperfect you learn",
    "start": "813760",
    "end": "819800"
  },
  {
    "text": "more things tomorrow you should update your code to reflect what you've learned if you don't you end up with the whole",
    "start": "819800",
    "end": "826440"
  },
  {
    "text": "creep between your understanding and the place in the code so if you're just constantly keeping this up so it should",
    "start": "826440",
    "end": "831480"
  },
  {
    "text": "be the place where you capture your current model and move forward and that model is not just the model of the",
    "start": "831480",
    "end": "836519"
  },
  {
    "text": "business it's a model of how the system works cuz then it's a true reflection and a true portrayal and when you've got",
    "start": "836519",
    "end": "843880"
  },
  {
    "text": "that direct mapping you find that you get really great performance if you have an impedance mismatch between what your",
    "start": "843880",
    "end": "850959"
  },
  {
    "text": "model is and what's actually going on you end up with a performance problem",
    "start": "850959",
    "end": "856000"
  },
  {
    "text": "and that's what I kind of call mechanical sympathy you don't need to have a perfect understanding you've got to know what is enough to is",
    "start": "856000",
    "end": "863199"
  },
  {
    "text": "representative to what's going on underneath and that kind of takes us into abstraction so we're abstracted",
    "start": "863199",
    "end": "870079"
  },
  {
    "text": "what's gone on underneath and we use this term a lot I keep hearing people say abstraction particularly like they",
    "start": "870079",
    "end": "876000"
  },
  {
    "text": "will create an interface or a type for something and that type is generally used to represent a number of things",
    "start": "876000",
    "end": "882560"
  },
  {
    "text": "that are like something and we use it kind of generically we tend to abstract too quickly well here's my rules of",
    "start": "882560",
    "end": "888399"
  },
  {
    "text": "abstraction rule number one do not abstract rule number two don't do",
    "start": "888399",
    "end": "894160"
  },
  {
    "text": "it no number three is start considering it when you've seen at least least three",
    "start": "894160",
    "end": "899639"
  },
  {
    "text": "things that are the same not sort of kind of maybe are the same thing then",
    "start": "899639",
    "end": "905880"
  },
  {
    "text": "needed to start doing that abstractions have a cost they have a layer of IND Direction they have lots of things that",
    "start": "905880",
    "end": "913240"
  },
  {
    "text": "imposes upon your code and on your thinking so they've got to pay for themselves now I'm saying don't do them",
    "start": "913240",
    "end": "919279"
  },
  {
    "text": "totally I sort of start off by joking about don't do them I mean don't jump into them and actually go to The Other",
    "start": "919279",
    "end": "926839"
  },
  {
    "text": "Extreme is dry is very dangerous I keep seeing this all the time where people",
    "start": "926839",
    "end": "932199"
  },
  {
    "text": "will start drying out code really quickly don't repeat yourself they look at a problem and think yeah I think this",
    "start": "932199",
    "end": "937399"
  },
  {
    "text": "is kind of the same and to create the abstraction before they even create any of the versions of the code just build",
    "start": "937399",
    "end": "943279"
  },
  {
    "text": "two three whatever it is completely independent things that you need to do",
    "start": "943279",
    "end": "948399"
  },
  {
    "text": "then look at them afterwards and see if there's any commonality I keep seeing it done the other way around the other way",
    "start": "948399",
    "end": "954120"
  },
  {
    "text": "around is a big flaw because you've you've committed yourself you created your little baby or in some cases you're",
    "start": "954120",
    "end": "959920"
  },
  {
    "text": "monster and you want to keep it alive and keep it going there and then this stays in the code even though you know",
    "start": "959920",
    "end": "966959"
  },
  {
    "text": "better an I but you because you've invested in it you don't get rid of it it's so much better to go the other way",
    "start": "966959",
    "end": "972319"
  },
  {
    "text": "around even if you have to completely copy and paste rewrite something make it work exactly how it needs to be then",
    "start": "972319",
    "end": "979399"
  },
  {
    "text": "factor out what's common that's the best way to use abstraction on this and then it doesn't cost anywhere isn't as much",
    "start": "979399",
    "end": "985959"
  },
  {
    "text": "especially to yourself and understanding and dealing with your code because one of the things is once you",
    "start": "985959",
    "end": "991319"
  },
  {
    "text": "start abstracting let's say we're in the objectoriented world we create a type and then we deal with that type",
    "start": "991319",
    "end": "997880"
  },
  {
    "text": "polymorphically once you've got one version of that that's kind of great that's meam morphic our run times can do",
    "start": "997880",
    "end": "1003880"
  },
  {
    "text": "a lot to optimize that if you get two versions you get bimorphic and we can still do some things there as well we",
    "start": "1003880",
    "end": "1010240"
  },
  {
    "text": "can put branches in and just go one of two ways typically once you get three or more you go megamorph and we start going",
    "start": "1010240",
    "end": "1016680"
  },
  {
    "text": "into things like jump tables we'll go into linear scans of interfaces to find out which method I'm going to actually",
    "start": "1016680",
    "end": "1022399"
  },
  {
    "text": "execute people don't even realize this you put an interface on a class you got multiple implementations see even got",
    "start": "1022399",
    "end": "1027480"
  },
  {
    "text": "multiple interfaces on a class when you go to call that method at runtime quite often you can end up in linear searches",
    "start": "1027480",
    "end": "1033558"
  },
  {
    "text": "through interfaces because you're getting carried away with these layers of abstraction if you need them great",
    "start": "1033559",
    "end": "1040199"
  },
  {
    "text": "but don't put them in just for the hell of it they got to be worth it and it's good sometimes if you've just got one or",
    "start": "1040199",
    "end": "1046240"
  },
  {
    "text": "two types be careful when you start getting many types the stuff cuz processors are not good with branches",
    "start": "1046240",
    "end": "1052280"
  },
  {
    "text": "they're good with predictable branches not good with branches you cannot predict and quite often when you start",
    "start": "1052280",
    "end": "1058679"
  },
  {
    "text": "doing that it's not representative and that's usually a big smell I Todd mentioned it earlier in the keynote",
    "start": "1058679",
    "end": "1063840"
  },
  {
    "text": "today we got to sort of trust our senses trust our taste and you know when stuff's starting to smell we've got to",
    "start": "1063840",
    "end": "1070440"
  },
  {
    "text": "start listening to that and stop doing it so you're doing it kind of right a classic for this is kind of big",
    "start": "1070440",
    "end": "1077400"
  },
  {
    "text": "Frameworks um like you say well is it a framework is it a library I got a really",
    "start": "1077400",
    "end": "1083000"
  },
  {
    "text": "simple distinction when Once something's a framework when something's a library if it in facts your code and forces you",
    "start": "1083000",
    "end": "1089280"
  },
  {
    "text": "to work in a certain way it's a framework you shouldn't be doing that if it's a library you can use it you use it",
    "start": "1089280",
    "end": "1096039"
  },
  {
    "text": "in an isolated place and it doesn't in fact direct your code that's good that's composable that's what we want we want",
    "start": "1096039",
    "end": "1102440"
  },
  {
    "text": "stuff to be we reuse it because it's great it helps us out and it stays isolated if it Force you to work in a",
    "start": "1102440",
    "end": "1109600"
  },
  {
    "text": "certain way start to worry you can't later optimize that you can't later change your code and work with it quite",
    "start": "1109600",
    "end": "1115960"
  },
  {
    "text": "well so watch out and these are the things that get you there you end up with this sort of mentality especially",
    "start": "1115960",
    "end": "1121960"
  },
  {
    "text": "you get carried away with Frameworks and it's like the people who ever go backpacking season Backpackers sort of",
    "start": "1121960",
    "end": "1127600"
  },
  {
    "text": "know how to travel light people who sort of think oh yeah I have all this stuff this stuff is going to be great for me",
    "start": "1127600",
    "end": "1134039"
  },
  {
    "text": "whenever I go our code bases get like that too quickly I too often see people turn up on a project and before they",
    "start": "1134039",
    "end": "1140159"
  },
  {
    "text": "even work out what the problem they're solving they're installing spring hibernate this that and the other it's",
    "start": "1140159",
    "end": "1145799"
  },
  {
    "text": "like what is all this crap and it's like why are you doing this oh we need this before we start coding",
    "start": "1145799",
    "end": "1151400"
  },
  {
    "text": "really start coding then see what you need and everything you introduce you introduce it because it saves you time",
    "start": "1151400",
    "end": "1158200"
  },
  {
    "text": "and it pays for itself if it doesn't do not use it travel light because your",
    "start": "1158200",
    "end": "1163840"
  },
  {
    "text": "code Bas is a liability the more you have of it the less you can react the harder is to optimize the harder is to",
    "start": "1163840",
    "end": "1170200"
  },
  {
    "text": "get it all right so keep the stuff light you'll be going a lot faster so other abstract but only when",
    "start": "1170200",
    "end": "1177799"
  },
  {
    "text": "you're sure of the",
    "start": "1177799",
    "end": "1180399"
  },
  {
    "text": "benefits and one of the things that really stands out for me is like the fact that we have a law of leaky",
    "start": "1183240",
    "end": "1188640"
  },
  {
    "text": "abstractions Joel Spix's law it's because we've got it wrong we're abstracting the wrong things and I talk",
    "start": "1188640",
    "end": "1194559"
  },
  {
    "text": "about the non-trivial in fact abstraction should not be big abstraction should small if you look to",
    "start": "1194559",
    "end": "1200360"
  },
  {
    "text": "something like mathematics abstraction is used all the time and it's used brilliantly but it's small it's composable it's not big and imposing us",
    "start": "1200360",
    "end": "1208320"
  },
  {
    "text": "that's usually the good sound in the smell and so dyra pointed this out really well is if we use it we're using",
    "start": "1208320",
    "end": "1214520"
  },
  {
    "text": "it to be more precise we want to deal with something as a concrete thing that we",
    "start": "1214520",
    "end": "1220400"
  },
  {
    "text": "understand so let say how can we abstract a memory system so it's very complex modern memory systems but",
    "start": "1220400",
    "end": "1226919"
  },
  {
    "text": "actually if you understand the ractions of it it actually works really well so it's getting this stuff right so memory",
    "start": "1226919",
    "end": "1234600"
  },
  {
    "text": "systems are by three bets it's that simple our Hardware friends are working with three bats and the first bat is a",
    "start": "1234600",
    "end": "1240360"
  },
  {
    "text": "temporal bat if I use something I'm likely to use it again soon so things",
    "start": "1240360",
    "end": "1246080"
  },
  {
    "text": "are close in time in how they use so they're taking that bet on the time they also take another betat on the space so",
    "start": "1246080",
    "end": "1252880"
  },
  {
    "text": "things that are close together tend to be used together and this is where things like cach lines OS Pages or t B",
    "start": "1252880",
    "end": "1259200"
  },
  {
    "text": "all of this sort of stuff so what you want to do is keep your stuff together that you use together that's the way you",
    "start": "1259200",
    "end": "1265039"
  },
  {
    "text": "can play it this bet and the third bet and this is it only three in total",
    "start": "1265039",
    "end": "1270840"
  },
  {
    "text": "there's a stride in or pattern based bet so if you go through code in a predictable way you go through our data",
    "start": "1270840",
    "end": "1278840"
  },
  {
    "text": "in a predictable way it can be prefixed for you and it hides that latency or",
    "start": "1278840",
    "end": "1284080"
  },
  {
    "text": "response time you have to dealing with something so this is what matters with the abstraction you got to understand",
    "start": "1284080",
    "end": "1289640"
  },
  {
    "text": "what it is what it's doing not the level of detail I see people getting obsessed with what size is the cash well you",
    "start": "1289640",
    "end": "1295320"
  },
  {
    "text": "shouldn't really care about it you got to C that there is a cash and you're using it in the right sort of way and those are the sort of things that matter",
    "start": "1295320",
    "end": "1301840"
  },
  {
    "text": "so so of start thinking in that sort of way to like what is the hardware given me what are the sort of design",
    "start": "1301840",
    "end": "1308279"
  },
  {
    "text": "principles the people who used who built that Hardware we're working to and make sure you're sort of playing well to that",
    "start": "1308279",
    "end": "1313919"
  },
  {
    "text": "and then you're doing the right sort of things so let's move on from this now if we're going to build models we need to",
    "start": "1313919",
    "end": "1319919"
  },
  {
    "text": "build them in the right sort of way to get our performance and quite often I see some fundamental issues so coupling",
    "start": "1319919",
    "end": "1326799"
  },
  {
    "text": "and cohesion is kind of classic there's lots of other things separation and concerns but these two in particular are",
    "start": "1326799",
    "end": "1332320"
  },
  {
    "text": "a massive impact on performance and it's quite a soft and subtle thing so let's",
    "start": "1332320",
    "end": "1337400"
  },
  {
    "text": "take a really simple example that's actually riddled with implications so",
    "start": "1337400",
    "end": "1344000"
  },
  {
    "text": "developing a que a really simple concurrent q and that Q is going to be array back so we've got a buffer in it",
    "start": "1344000",
    "end": "1352080"
  },
  {
    "text": "which is an object array so I can put references into my q and what I could do",
    "start": "1352080",
    "end": "1358679"
  },
  {
    "text": "is I could use buffer. length as the thing to represent the capacity of the",
    "start": "1358679",
    "end": "1364200"
  },
  {
    "text": "queue from a modeling perspective that would make me cringe to use buffer. length so I will typically",
    "start": "1364200",
    "end": "1371720"
  },
  {
    "text": "put capacity into the class itself to say what I'm doing what actually ends up",
    "start": "1371720",
    "end": "1378200"
  },
  {
    "text": "happen with this subtle little change rather than just hacking out is one is I'm being more expressive I'm being more",
    "start": "1378200",
    "end": "1384640"
  },
  {
    "text": "representative about what I want but if I want to work out the length of the que",
    "start": "1384640",
    "end": "1390760"
  },
  {
    "text": "I've got it there with this pointer I can get to it by dead",
    "start": "1390760",
    "end": "1395880"
  },
  {
    "text": "reckoning whenever I use this so that's the the bet on special it's probably in",
    "start": "1395880",
    "end": "1401559"
  },
  {
    "text": "the same cach line it's going to be really fast if I go to get buffer. length I've got to follow a reference",
    "start": "1401559",
    "end": "1408520"
  },
  {
    "text": "off to another object and read the length field that's a data dependent load and your processor can speculate to",
    "start": "1408520",
    "end": "1414559"
  },
  {
    "text": "get there so it starts costing you it also gets a bit more subtle than that so",
    "start": "1414559",
    "end": "1420400"
  },
  {
    "text": "if I'm using a queue cues are typically always full or empty they don't end exist in any of the states and so if you",
    "start": "1420400",
    "end": "1426320"
  },
  {
    "text": "get a burst of traffic in guess what happens it just fills right up and if you wrap her in the circular que the",
    "start": "1426320",
    "end": "1432880"
  },
  {
    "text": "head and tail come right next to each other they end up in the same cach line quite often slowing each other down",
    "start": "1432880",
    "end": "1439080"
  },
  {
    "text": "through a thing called false sharing now let's say for example I decided to make capacity whatever the size of buffer",
    "start": "1439080",
    "end": "1446559"
  },
  {
    "text": "that length isus 32 I reduce the capacity of my Q all of",
    "start": "1446559",
    "end": "1452559"
  },
  {
    "text": "a sudden I under burst scenarios if I'm going to be filling the queue I'm not going to be impacting the consumer",
    "start": "1452559",
    "end": "1459159"
  },
  {
    "text": "taking out of the queue slowing them down because the producer is not causing",
    "start": "1459159",
    "end": "1464279"
  },
  {
    "text": "false sharing of facts and cash coherence traffic all because I'm just will control it with a simple little",
    "start": "1464279",
    "end": "1470279"
  },
  {
    "text": "variable and I'm modeling what's going on so just pulling these things out making them",
    "start": "1470279",
    "end": "1475399"
  },
  {
    "text": "important I like to think of a bit further than that is stop thinking of your classes are just bags of properties",
    "start": "1475399",
    "end": "1480880"
  },
  {
    "text": "they have to be a thing and they have to have a purpose a very clear very precise purpose and make it expressive and once",
    "start": "1480880",
    "end": "1488600"
  },
  {
    "text": "you start doing that you get so much better Behavior I mentioned this morning in the keynote how I quite often go into",
    "start": "1488600",
    "end": "1494520"
  },
  {
    "text": "to see different clients and I go to see the clients and I get to know the code by just starting to refactor it and I",
    "start": "1494520",
    "end": "1500520"
  },
  {
    "text": "look for all of these smells like feature Envy bad coupling things that should be cohesive and brought together",
    "start": "1500520",
    "end": "1506360"
  },
  {
    "text": "are not together you start pulling these things all together and you get much cleaner code base it's much easier to",
    "start": "1506360",
    "end": "1511600"
  },
  {
    "text": "understand and you tend to get a big bump in performance because things end up being where they should be they end",
    "start": "1511600",
    "end": "1516799"
  },
  {
    "text": "up in the same cash lines you don't go chasing pointers across the things you play to the bets of how Hardware Works",
    "start": "1516799",
    "end": "1523640"
  },
  {
    "text": "how the memory subsystem works and you get the benefits from it so you got to resp back this locality of reference and",
    "start": "1523640",
    "end": "1530320"
  },
  {
    "text": "as our memory gets bigger and bigger it is not getting any better on response time so you better get the patterns",
    "start": "1530320",
    "end": "1537399"
  },
  {
    "text": "right to get the right sort of behaviors because the gulf n between having a full",
    "start": "1537399",
    "end": "1543039"
  },
  {
    "text": "cash Miss and processing instructions is getting on the order for about 500",
    "start": "1543039",
    "end": "1548760"
  },
  {
    "text": "instructions a cash Miss is about the equivalent of 500 instructions with a fall on cash Miss on a server now so",
    "start": "1548760",
    "end": "1555120"
  },
  {
    "text": "getting this stuff right really makes a difference what it actually scream out to me is it doesn't matter about how",
    "start": "1555120",
    "end": "1560720"
  },
  {
    "text": "many instructions you're processing you shouldn't even be thinking about that almost a day you got to be thinking in",
    "start": "1560720",
    "end": "1565840"
  },
  {
    "text": "cash misses for any given algorithm you can almost start counting cash misses to count how long it's going to take to do",
    "start": "1565840",
    "end": "1572159"
  },
  {
    "text": "any set of operations so when we come to cash misses quite often we also end up",
    "start": "1572159",
    "end": "1578559"
  },
  {
    "text": "thinking about relationships between our objects these innocuous little lines",
    "start": "1578559",
    "end": "1584080"
  },
  {
    "text": "when people draw things so classically in fin out you'll doal with orders and Order books people will just draw a",
    "start": "1584080",
    "end": "1589200"
  },
  {
    "text": "little line all the gold is in that little line so we got to think about it",
    "start": "1589200",
    "end": "1594720"
  },
  {
    "text": "what's it doing so forgive the little bit of uml here for a second it's just going to pick it because it's common well in fact this relationship is",
    "start": "1594720",
    "end": "1601399"
  },
  {
    "text": "actually two relationships typically there's bids and offers and it's a one to many in this sort of case but there's",
    "start": "1601399",
    "end": "1608120"
  },
  {
    "text": "more than that it's also usually qualified on price and disordered and typically",
    "start": "1608120",
    "end": "1614640"
  },
  {
    "text": "Fifer going through the thought experiment of really reasoning about a relationship tells you so much and you",
    "start": "1614640",
    "end": "1622279"
  },
  {
    "text": "understand how things work but really importantly you get to now choose what is the data structure you should be",
    "start": "1622279",
    "end": "1627679"
  },
  {
    "text": "using to represent that line that is the really important thing in modeling and the thing that will stay with you your",
    "start": "1627679",
    "end": "1633440"
  },
  {
    "text": "entire career no matter what happens in changing hardware and software is the data structures matter you want a set of",
    "start": "1633440",
    "end": "1640919"
  },
  {
    "text": "characteristics for that relationship which data structure do you pick to give you those characteristics and that",
    "start": "1640919",
    "end": "1646120"
  },
  {
    "text": "starts to really matter I've interviewed people and ask really simple questions about what is the difference between a",
    "start": "1646120",
    "end": "1653080"
  },
  {
    "text": "hashmap and a tree map and have things throwing back at oh you don't need to know implementation detail of these St",
    "start": "1653080",
    "end": "1659440"
  },
  {
    "text": "it's like hang I'm not asking you how to implement a hash map or tree mapers what's the difference what does it give",
    "start": "1659440",
    "end": "1664960"
  },
  {
    "text": "you what are the characteristics of it we should know these sorts of things you should be picking up the right tool for",
    "start": "1664960",
    "end": "1670039"
  },
  {
    "text": "the right job to give you those characteristics so really make friends with your data structures one of the",
    "start": "1670039",
    "end": "1676159"
  },
  {
    "text": "best investments you'll make in your career and it will stay with you for your entire life to you learn about",
    "start": "1676159",
    "end": "1681200"
  },
  {
    "text": "Bloom filters you learn about Maps you learn about trees all that sort of stuff I guarantee you if you're 20 years old",
    "start": "1681200",
    "end": "1687039"
  },
  {
    "text": "now and you're still programming is 60 years old that stuff will still be useful it won't go away it's just useful",
    "start": "1687039",
    "end": "1693120"
  },
  {
    "text": "stuff that keeps keeps us all in jobs interestingly as well as how do we",
    "start": "1693120",
    "end": "1698640"
  },
  {
    "text": "look at this and how do we understand it I had some really good uh talks with people who understand the psychology",
    "start": "1698640",
    "end": "1703919"
  },
  {
    "text": "around this and like jumping into a code is great but it only gives us one way of thinking about a",
    "start": "1703919",
    "end": "1710399"
  },
  {
    "text": "problem you should document how you're going to do something it uses different Pathways in your brain and explores the",
    "start": "1710399",
    "end": "1717200"
  },
  {
    "text": "problem in an interesting way discuss it with other people discuss how you're going to design the tests discuss how",
    "start": "1717200",
    "end": "1723320"
  },
  {
    "text": "you're going to code it maybe even do crazy stuff like write the code in an imperative fashion write the tests in a",
    "start": "1723320",
    "end": "1730600"
  },
  {
    "text": "functional fashion doing those different ways of looking at a problem maybe even do",
    "start": "1730600",
    "end": "1735960"
  },
  {
    "text": "formal specification you will get something much more succinct much more",
    "start": "1735960",
    "end": "1741120"
  },
  {
    "text": "precise and get it there but at least document it and talk to people about it",
    "start": "1741120",
    "end": "1746320"
  },
  {
    "text": "and your purr is not sufficient for this so it's a really important part of doing stuff we we should we need to be",
    "start": "1746320",
    "end": "1752279"
  },
  {
    "text": "collaborating and working together and you get simple much more refined Solutions and it kind of passes this",
    "start": "1752279",
    "end": "1757519"
  },
  {
    "text": "what I call the outloud test and you just make a lot less mistakes this we",
    "start": "1757519",
    "end": "1762600"
  },
  {
    "text": "also need algorithms and we'll all have seen sort of the order of algorithms if you care about performance and stuff what's",
    "start": "1762600",
    "end": "1770000"
  },
  {
    "text": "really interesting is you've got to know what n is and this is back to the relationships and the cardinality and",
    "start": "1770000",
    "end": "1775200"
  },
  {
    "text": "the things that you're dealing with but there's also constants in a lot of these algorithms so we quite often look at",
    "start": "1775200",
    "end": "1780720"
  },
  {
    "text": "well Ends don't think that's important well quite often the constants are very important especially for sort of small",
    "start": "1780720",
    "end": "1785960"
  },
  {
    "text": "and moderate sizes of n the constants can be very dominant I I quite often see a case where people go this must be a",
    "start": "1785960",
    "end": "1792480"
  },
  {
    "text": "hashmap and this must be a tree or whatever and we ask well how big is an well it never really gets bigger than",
    "start": "1792480",
    "end": "1797519"
  },
  {
    "text": "about 20 why are you using the map or the tree just stick it in an array and then you",
    "start": "1797519",
    "end": "1803919"
  },
  {
    "text": "well do you ever have to iterate over yeah all the time so You' picked a tree or a hashmap",
    "start": "1803919",
    "end": "1809919"
  },
  {
    "text": "or something and you've got something that's in the order for about 20 items and you're iterating them all the time",
    "start": "1809919",
    "end": "1815039"
  },
  {
    "text": "why isn't it an array think about these things it really starts to matter and then people say oh yeah well what if n",
    "start": "1815039",
    "end": "1820720"
  },
  {
    "text": "gets bigger well fine do you know whether n's going to get big or not that's the question you got to be asking",
    "start": "1820720",
    "end": "1826039"
  },
  {
    "text": "and finding out you find out that n is of yes you should be doing something else a really interesting thing around",
    "start": "1826039",
    "end": "1832559"
  },
  {
    "text": "this I like to do is not just know the order of the algorithm actually work it",
    "start": "1832559",
    "end": "1838399"
  },
  {
    "text": "out through testing and experimentation because quite often people think the order of the algorithm they're going to",
    "start": "1838399",
    "end": "1843480"
  },
  {
    "text": "get is not what they actually get so you've got to do that finding thing you've got to write the experiment you've got to find out what it really",
    "start": "1843480",
    "end": "1849880"
  },
  {
    "text": "gives you and so they do importantly focus on N focus on C and start",
    "start": "1849880",
    "end": "1855120"
  },
  {
    "text": "measuring really finding this stuff out not just end but the cardinality of the",
    "start": "1855120",
    "end": "1861880"
  },
  {
    "text": "relationships like if you ever work with really good database people who know about large data sets they're obsessed",
    "start": "1861880",
    "end": "1869440"
  },
  {
    "text": "by the cardinality on lines yet we so often just draw boxes and don't think about it",
    "start": "1869440",
    "end": "1875159"
  },
  {
    "text": "star what is it what is star and becomes really really important how many ERS in",
    "start": "1875159",
    "end": "1880880"
  },
  {
    "text": "a market how many customers how many products how many movies whatever it is it's like what are people doing for",
    "start": "1880880",
    "end": "1887320"
  },
  {
    "text": "these things how many how many attemps do to watch it how many atts to buy it so the thing is but algorithms are",
    "start": "1887320",
    "end": "1892760"
  },
  {
    "text": "the key to the service time so we know that response time is service time plus",
    "start": "1892760",
    "end": "1898279"
  },
  {
    "text": "latency time you're waiting in the queue so getting the service time down is really important what's really really",
    "start": "1898279",
    "end": "1904519"
  },
  {
    "text": "important about service time is service time is related to utilization so if you half the service",
    "start": "1904519",
    "end": "1910639"
  },
  {
    "text": "time you have half the utilization of something and so imagine you're running at 80% utilization and you half the",
    "start": "1910639",
    "end": "1917919"
  },
  {
    "text": "service time you're now down to 40% utilization guess what happens now to your response time it's a much better",
    "start": "1917919",
    "end": "1924360"
  },
  {
    "text": "it's not typically just half as good it's much better than that if you're up at 90 or 95% utilization and you half",
    "start": "1924360",
    "end": "1931880"
  },
  {
    "text": "you can probably get a 20x Improvement in response time so it's just like knowing these things mapping them",
    "start": "1931880",
    "end": "1938840"
  },
  {
    "text": "through batching is so important I think if there's one thing I do in any design",
    "start": "1938840",
    "end": "1945080"
  },
  {
    "text": "is I'm looking for every opportunity I can to batch because this is where all your performance wins typically come",
    "start": "1945080",
    "end": "1952279"
  },
  {
    "text": "because what it does is it allows you to amize expensive costs that going to disc that taking a trip across to another",
    "start": "1952279",
    "end": "1958720"
  },
  {
    "text": "machine the taking the big cash m whatever it happens to be you want to",
    "start": "1958720",
    "end": "1964639"
  },
  {
    "text": "batch up as many things as possible when you take those big costs we do this in",
    "start": "1964639",
    "end": "1969880"
  },
  {
    "text": "reality like we don't get everybody going from A to B in an individual car",
    "start": "1969880",
    "end": "1976080"
  },
  {
    "text": "if we can if they're all going the same way well we put them on a bus we put them on a plane it's all this sort of stuff where you put many bums in seats",
    "start": "1976080",
    "end": "1983000"
  },
  {
    "text": "and get them there it should be exactly the same thinking in your code and particularly for this we got to be",
    "start": "1983000",
    "end": "1988039"
  },
  {
    "text": "thinking about being syn being synchronous is going to hurt us we need to be thinking asynchronous for",
    "start": "1988039",
    "end": "1993960"
  },
  {
    "text": "everything because soon as you think asynchronous batching becomes so easy everywhere and this is like one example",
    "start": "1993960",
    "end": "1999519"
  },
  {
    "text": "of here like expensive resource I want to use it multiple producers want to put some data into this expensive resource",
    "start": "1999519",
    "end": "2007080"
  },
  {
    "text": "if they all go to do it at the same time first of all I'm probably going to have to have mutual exclusion on this resource so I'm going to have to do",
    "start": "2007080",
    "end": "2013200"
  },
  {
    "text": "something and then you're going to have to cue to take your turn to enter that critical section that's protected by",
    "start": "2013200",
    "end": "2019200"
  },
  {
    "text": "your Mutual exclusion so if you're going to use something and even if it's just",
    "start": "2019200",
    "end": "2024240"
  },
  {
    "text": "three and it's one unit of time one thing's going to take one unit of time one's going to take two and one's going",
    "start": "2024240",
    "end": "2029440"
  },
  {
    "text": "to take three units of time so on average you're going to take two units of time and as your batches get bigger",
    "start": "2029440",
    "end": "2034559"
  },
  {
    "text": "so for bursts of traffic arrival you start ending up with very large periods",
    "start": "2034559",
    "end": "2039720"
  },
  {
    "text": "of time really simply if you put some structure in between that you can gather",
    "start": "2039720",
    "end": "2045679"
  },
  {
    "text": "up the work and then something the other side of it is dragging all that work down and putting into the store as a",
    "start": "2045679",
    "end": "2052398"
  },
  {
    "text": "single uncontended operation you'll get much better utilization much greater throughput and",
    "start": "2052399",
    "end": "2059200"
  },
  {
    "text": "also much better latency I keep hearing over and over again that is a tradeoff",
    "start": "2059200",
    "end": "2064839"
  },
  {
    "text": "between latency and throughput  really it is and we've",
    "start": "2064839",
    "end": "2071079"
  },
  {
    "text": "been believing this in our industry for far too long anybody wants to come and chat to me with this I can work you",
    "start": "2071079",
    "end": "2077398"
  },
  {
    "text": "through the math I can work you through examples it is so simple if you batch correctly and batch is a real time thing",
    "start": "2077399",
    "end": "2085079"
  },
  {
    "text": "not an offline slow process you can put it into designs and I I love just doing this",
    "start": "2085079",
    "end": "2091800"
  },
  {
    "text": "over and over with people showing them how simple it is to get this stuff right and also how simple it is the reason about the code when you do the right",
    "start": "2091800",
    "end": "2097440"
  },
  {
    "text": "thing and it's just simple patterns like this allows you to do it if you do this",
    "start": "2097440",
    "end": "2103560"
  },
  {
    "text": "that blue line is what you end up having rather than the red line the queing effect gets greatly improved because you",
    "start": "2103560",
    "end": "2111040"
  },
  {
    "text": "don't end up over utilizing the resource because you amiz the cost which takes your utilization down ultimately you do",
    "start": "2111040",
    "end": "2118359"
  },
  {
    "text": "saturate everything saturates if you throw enough load at it but you get this really nice constant property to the",
    "start": "2118359",
    "end": "2124680"
  },
  {
    "text": "point of saturation and even then at the point of saturation it still goes at the maximum throughput it can and does the",
    "start": "2124680",
    "end": "2131359"
  },
  {
    "text": "best it can for you and you tend to get a linear progression then rather than this just steep J curve where it all",
    "start": "2131359",
    "end": "2138280"
  },
  {
    "text": "goes horribly wrong because that's another thing we want is when our systems hit maximum throughput we don't",
    "start": "2138280",
    "end": "2143920"
  },
  {
    "text": "want the wheels to fall off we want them to continue doing the best they can at that case and not fall",
    "start": "2143920",
    "end": "2150280"
  },
  {
    "text": "apart and designing for this especially with Bing gift you there so remember",
    "start": "2150280",
    "end": "2155760"
  },
  {
    "text": "this bot processing is not just for offline fine brunches brunches brunches horrible",
    "start": "2155760",
    "end": "2164680"
  },
  {
    "text": "in our code and a real major problem it can be so simple we do like whenever we",
    "start": "2164680",
    "end": "2170760"
  },
  {
    "text": "run branches in our code or CPUs are guessing they're they're predicting",
    "start": "2170760",
    "end": "2176000"
  },
  {
    "text": "where you can go on those branches most of the time they get it right and they're progressing ahead they're",
    "start": "2176000",
    "end": "2181280"
  },
  {
    "text": "speculating they don't actually process instructions and just stop cuz they're constantly cash missing and they want to",
    "start": "2181280",
    "end": "2187280"
  },
  {
    "text": "keep making progress but if your branch is particularly unpredictable and also there's only so many branches you can",
    "start": "2187280",
    "end": "2193160"
  },
  {
    "text": "have before it starts burying a cost you start to slow down from a performance perspective you also slow down a lot",
    "start": "2193160",
    "end": "2199000"
  },
  {
    "text": "from understanding and reason about your code I quite often see stuff like this where people will go okay I'm dealing",
    "start": "2199000",
    "end": "2204400"
  },
  {
    "text": "with NS which you really should not be dealing with in your code like we're we're we're past this now it's 2015 we",
    "start": "2204400",
    "end": "2211280"
  },
  {
    "text": "should not be passing things around as nulls as some sort of value unless it's very few reasons for how to do that like",
    "start": "2211280",
    "end": "2217920"
  },
  {
    "text": "empty sets in for everything but then don't start doing shortcuts like if is empty just be",
    "start": "2217920",
    "end": "2223839"
  },
  {
    "text": "allowed sooner it just doesn't make any sense it's it's evil it's also not the common case so you start hurting the",
    "start": "2223839",
    "end": "2230319"
  },
  {
    "text": "common case for what you think is an optimization just get rid of it this sort of code get rid of it it makes your",
    "start": "2230319",
    "end": "2238119"
  },
  {
    "text": "methods smaller makes them cleaner makes them easier to understand and a lot less buggy and they're faster so it's a kind",
    "start": "2238119",
    "end": "2244319"
  },
  {
    "text": "of common pattern that keeps coming up and so don't have the principle of surprise surprise component in the other",
    "start": "2244319",
    "end": "2250119"
  },
  {
    "text": "time it's to be least surprise so like don't be dealing with the nulls always be dealing with null objects empty sets",
    "start": "2250119",
    "end": "2256119"
  },
  {
    "text": "all that sort of stuff so you start doing the right thing all the time I was Tony hor says like the N pointer was his",
    "start": "2256119",
    "end": "2262240"
  },
  {
    "text": "billion dollar mistake just shouldn't be doing this sort of stuff loops are a",
    "start": "2262240",
    "end": "2267280"
  },
  {
    "text": "fascinating one I've seen loads and loads of Statistics that say that our programs probably spend 80% of their",
    "start": "2267280",
    "end": "2273000"
  },
  {
    "text": "time in Loops so how we write Loops really matters this quote on like how you write so like",
    "start": "2273000",
    "end": "2280160"
  },
  {
    "text": "if anybody's everever written anything so you're writing blogs or books or anything you start realizing that you",
    "start": "2280160",
    "end": "2285240"
  },
  {
    "text": "can go back and you can reread what you've written and you can usually shorten it and make it more concise make it more precise and make it easier to",
    "start": "2285240",
    "end": "2292720"
  },
  {
    "text": "read it's exactly the same with your code like that if I had more time I'd have written a shorter letter usually if",
    "start": "2292720",
    "end": "2299359"
  },
  {
    "text": "I had more time I could have written a shorter more concise more elegant Loop so go back to your code quite often and",
    "start": "2299359",
    "end": "2306119"
  },
  {
    "text": "do this cuz it really starts to matter so say we have an l0o cache in our",
    "start": "2306119",
    "end": "2311680"
  },
  {
    "text": "processors that can only handle about 1,500 microwalls if you don't fit inside",
    "start": "2311680",
    "end": "2317040"
  },
  {
    "text": "that you're constantly evicting things from the cach and pulling stuff in really slows you",
    "start": "2317040",
    "end": "2323200"
  },
  {
    "text": "down even more so once we have dealt with that we go through to Loop B",
    "start": "2323200",
    "end": "2328400"
  },
  {
    "text": "buffers 28 Micro Ops at that stage only eight branches allowed per Loop and no",
    "start": "2328400",
    "end": "2335200"
  },
  {
    "text": "no returns and no exceptions coming out of a loop those will can't fit into",
    "start": "2335200",
    "end": "2341040"
  },
  {
    "text": "those you got to go out to the other sides of things like many people have multiple return points from functions",
    "start": "2341040",
    "end": "2346319"
  },
  {
    "text": "especially in the middle of a loop that's bad it's bad to reason about it's also bad from a performance perspective",
    "start": "2346319",
    "end": "2352920"
  },
  {
    "text": "like either more branches in a loop that's starting to smell a bit as well why are you doing that single",
    "start": "2352920",
    "end": "2359160"
  },
  {
    "text": "responsibility principle keep your Loop simple make them really easy to deal with you should craft your Loops like",
    "start": "2359160",
    "end": "2365560"
  },
  {
    "text": "good Pros in fact this is one I like to do is constantly go back and reread your Cod because you keep seeing things you",
    "start": "2365560",
    "end": "2371680"
  },
  {
    "text": "see bugs you see ways to improve it you see ways of making stuff better we should make that a normal way we work is",
    "start": "2371680",
    "end": "2377800"
  },
  {
    "text": "you'll end up with a code base that's much cleaner much faster much easier to work with and a lot less",
    "start": "2377800",
    "end": "2384400"
  },
  {
    "text": "buggy and so we've got these nice simple things they need to be composable so we got to think in the composition and for",
    "start": "2384400",
    "end": "2391400"
  },
  {
    "text": "this size really matters Cliff made this great quote a while ago I remember dealing with them",
    "start": "2391400",
    "end": "2397560"
  },
  {
    "text": "around how to write methods to make them particularly fast and he pointed out that how most compilers work is that",
    "start": "2397560",
    "end": "2404359"
  },
  {
    "text": "inlining is the optimization everything else is enabled by inlining so we take a method if we",
    "start": "2404359",
    "end": "2411240"
  },
  {
    "text": "inline it into another one we can unroll the loop we can register cache we can do right combining we can do all sorts of",
    "start": "2411240",
    "end": "2417800"
  },
  {
    "text": "really nice funky things but if we can't inline it it's opaque we can combine the",
    "start": "2417800",
    "end": "2423119"
  },
  {
    "text": "things together and so by start making things small making them comp composable it works out really well if we make all",
    "start": "2423119",
    "end": "2430480"
  },
  {
    "text": "of our code nice and small and composable really simple methods don't worry about the function calls our jvms",
    "start": "2430480",
    "end": "2437079"
  },
  {
    "text": "will just inline them and the function calls gone and it's all so much more composable I had a great tweet uh",
    "start": "2437079",
    "end": "2444720"
  },
  {
    "text": "probably six nine months ago where I've done a training course for some people and I was banging this into them make",
    "start": "2444720",
    "end": "2449960"
  },
  {
    "text": "small methods make them composable this they went through and they done a lot of this and made a lot easier to test and",
    "start": "2449960",
    "end": "2455359"
  },
  {
    "text": "then this guy respond to blackes Du just by doing that some bits of our code are 40 or 60% faster and it's a whole lot",
    "start": "2455359",
    "end": "2462720"
  },
  {
    "text": "easier to reason about because we let the compiler really get its hands on it now and make it nice and clean the",
    "start": "2462720",
    "end": "2468760"
  },
  {
    "text": "compiler can't do much with three and 400 line methods that it can't compose them together because they're opaque",
    "start": "2468760",
    "end": "2474800"
  },
  {
    "text": "because they don't in line we got to think about these things so keep things the single responsibility like one",
    "start": "2474800",
    "end": "2480319"
  },
  {
    "text": "statement one thing one method one thing one class one thing one module one thing everything has one purpose not multiple",
    "start": "2480319",
    "end": "2486280"
  },
  {
    "text": "purposes then compose much better so we think that we can build neat things from small",
    "start": "2486280",
    "end": "2492240"
  },
  {
    "text": "atoms data I kind of push on here but we get obsessed with object orientation",
    "start": "2492240",
    "end": "2498280"
  },
  {
    "text": "where quite often we don't need objects this particularly a bad thing of the Java world but really we want to have",
    "start": "2498280",
    "end": "2504000"
  },
  {
    "text": "great big tables of data and if your table of data is customer object with an",
    "start": "2504000",
    "end": "2510640"
  },
  {
    "text": "array of references to customers you're going to point your Chase all of the time say I want to go through and I want to read all the dates of birth I want to",
    "start": "2510640",
    "end": "2517440"
  },
  {
    "text": "go through and I want to scan for who's with a certain surname you don't want to be doing that with objects think about",
    "start": "2517440",
    "end": "2524359"
  },
  {
    "text": "this differently so imagine if each of those fields were just an array of a given",
    "start": "2524359",
    "end": "2530000"
  },
  {
    "text": "type now if I want to search through I can just scan down that array I don't have all the headers for the objects",
    "start": "2530000",
    "end": "2536960"
  },
  {
    "text": "those are nicely collocated in memory if I want to view the whole object well I can just go through and take the index",
    "start": "2536960",
    "end": "2544359"
  },
  {
    "text": "inside those arrays how do I walk down through them would just walk down with the index that could be done with a fly",
    "start": "2544359",
    "end": "2551119"
  },
  {
    "text": "WID this alls much better for the locality as you walk forward you get the",
    "start": "2551119",
    "end": "2556480"
  },
  {
    "text": "prefectures helping you it's going back to those bets you got to think about data stop thinking about code think",
    "start": "2556480",
    "end": "2562359"
  },
  {
    "text": "about data and this is one of the ways you'll get much much more performance and a lot can be learned here from set",
    "start": "2562359",
    "end": "2568680"
  },
  {
    "text": "theory and functional programming so if you've done a lot of object orientation one of the ways you make yourself a much",
    "start": "2568680",
    "end": "2574520"
  },
  {
    "text": "better programmer is go learn set theory go learn from functional programming may go learn logic programm learn other ways",
    "start": "2574520",
    "end": "2580440"
  },
  {
    "text": "of thinking there's a lot you can take away from it and there's some great stuff there so going to finish off here",
    "start": "2580440",
    "end": "2586880"
  },
  {
    "text": "with some performance testing what do we what should we be doing with performance testing first of all Define your",
    "start": "2586880",
    "end": "2592920"
  },
  {
    "text": "performance goals you need to have something you're shooting for you need to know when you're done when's good",
    "start": "2592920",
    "end": "2599119"
  },
  {
    "text": "enough quite often people say I want to be faster it's not helpful I want to have x throughput per second with a",
    "start": "2599119",
    "end": "2606119"
  },
  {
    "text": "response time of why or have a certain latency curve and these sort of things are important so",
    "start": "2606119",
    "end": "2611240"
  },
  {
    "text": "you establish those goals from there you can establish design principles when we worked on Aon one of the things we did",
    "start": "2611240",
    "end": "2617400"
  },
  {
    "text": "is we defined our design principles this lets you make decisions so for example",
    "start": "2617400",
    "end": "2622640"
  },
  {
    "text": "we had no garbage in steady state running you could not allocate so we write all of our code we write of our",
    "start": "2622640",
    "end": "2628760"
  },
  {
    "text": "test we run a profiler that tells us we got any allocation if we have we get rid of it we work on it because the",
    "start": "2628760",
    "end": "2635359"
  },
  {
    "text": "allocation will cause GC and GC will cause latency spikes and your response time's gone so being aware of these",
    "start": "2635359",
    "end": "2642200"
  },
  {
    "text": "things just how to deal with it how do we measure response time the important thing is we have to do it with",
    "start": "2642200",
    "end": "2648880"
  },
  {
    "text": "histograms if you use means if you use standard deviation you're deluding yourself and you're completely wrong you",
    "start": "2648880",
    "end": "2655119"
  },
  {
    "text": "probably should be in gills talk which is down a little bit but let's look at some things so here's a typical histogram of measuring the response time",
    "start": "2655119",
    "end": "2661839"
  },
  {
    "text": "of a system mode is kind of interesting the most common case it actually tells me something use",
    "start": "2661839",
    "end": "2669000"
  },
  {
    "text": "median n less useful mean completely bloody useless it doesn't tell me",
    "start": "2669000",
    "end": "2676280"
  },
  {
    "text": "anything about the typical response time in the system and it doesn't tell me anything about all this bad stuff that's",
    "start": "2676280",
    "end": "2682720"
  },
  {
    "text": "out here do not use means to describe your systems you need to characterize your system in a histogram like this and",
    "start": "2682720",
    "end": "2689760"
  },
  {
    "text": "this is how you'll see your systems performing another way you can do it is use quantile distributions or percentile",
    "start": "2689760",
    "end": "2696359"
  },
  {
    "text": "distributions and see how your system's behaving at the 90 the 99 39 49 59 and",
    "start": "2696359",
    "end": "2702640"
  },
  {
    "text": "this is a typical ramp up you'll see from a system and how they behave this is courtesy of Gil from one of his",
    "start": "2702640",
    "end": "2708720"
  },
  {
    "text": "customers who were measuring their system and thinking uh this is what we're getting but that that's not",
    "start": "2708720",
    "end": "2714400"
  },
  {
    "text": "natural when you see step lines and jaggedy bits like that that is not natural it's because of a thing called coordinated ad Mission I advise you to",
    "start": "2714400",
    "end": "2721319"
  },
  {
    "text": "go ahead and Google for coordinated Mission and learn what that means so and how do we record this use it tool like",
    "start": "2721319",
    "end": "2727319"
  },
  {
    "text": "HDR histogram it's out there it's open source and it does a great job and very cheap to use if you got a benchmark",
    "start": "2727319",
    "end": "2733520"
  },
  {
    "text": "we're going a macro Benchmark it's riddled with problems and petals you can fall into don't write your own micro",
    "start": "2733520",
    "end": "2740440"
  },
  {
    "text": "benchmarks unless you know a lot of jvm vendors very well and even then you're kind of crazy doing that go pick up",
    "start": "2740440",
    "end": "2746520"
  },
  {
    "text": "something like Java micro benchmarking harness really great tool it's even got nice profiling information that comes",
    "start": "2746520",
    "end": "2752599"
  },
  {
    "text": "with it as well so write these tests and write them in that also track CP performance counters so I mentioned",
    "start": "2752599",
    "end": "2758960"
  },
  {
    "text": "about these big loops and the fact that you're evicting from the lzo cache how do you know that will the CPU can tell",
    "start": "2758960",
    "end": "2765400"
  },
  {
    "text": "you because it has all statistics it's got statistics on cash mes Branch mes",
    "start": "2765400",
    "end": "2770760"
  },
  {
    "text": "bandwidth all of these sorts of things and you can find it from the CPU performance counters msrs are the things",
    "start": "2770760",
    "end": "2775880"
  },
  {
    "text": "to go look for there and performance testing it needs to be part of continuous integration it's something",
    "start": "2775880",
    "end": "2781079"
  },
  {
    "text": "you should be doing all the time and running all the time and feeling if you don't meet your targets it's also really",
    "start": "2781079",
    "end": "2786640"
  },
  {
    "text": "good to Trend things as well and Trend things on graphs and get you doing the right sort of things uh when we were at",
    "start": "2786640",
    "end": "2792520"
  },
  {
    "text": "elmax we had a wall of screens for our continuous integration and a lot of that was our performance figures where we",
    "start": "2792520",
    "end": "2799160"
  },
  {
    "text": "were graphing response time graphing through put between builds and like whether we're improving or getting worse",
    "start": "2799160",
    "end": "2805119"
  },
  {
    "text": "and it's really useful to see that and so make make sure this runs well but also consider all your",
    "start": "2805119",
    "end": "2811079"
  },
  {
    "text": "acceptance test suitable for performance tests quite often they can be and make your life a lot simpler but this is one",
    "start": "2811079",
    "end": "2817559"
  },
  {
    "text": "really really important point is we're typically blind in our live systems we need to be building Telemetry in us",
    "start": "2817559",
    "end": "2823920"
  },
  {
    "text": "first class we need to be building it in from the ground up into what we're doing let me just make that point again we",
    "start": "2823920",
    "end": "2830400"
  },
  {
    "text": "need to be building this into our live systems and doing it from the ground up it is not an afterthought if you want",
    "start": "2830400",
    "end": "2835960"
  },
  {
    "text": "your systems to perform well and not be surprised in production youve got to have Telemetry in it so how do we do",
    "start": "2835960",
    "end": "2841839"
  },
  {
    "text": "that well we put counters in our codes so things like Q length number of concurrent users number of exceptions",
    "start": "2841839",
    "end": "2847520"
  },
  {
    "text": "transactions all of that sort of stuff rate them to things like memory map files so you can read them without",
    "start": "2847520",
    "end": "2854079"
  },
  {
    "text": "impacting the system at all without using any locks there's some great techniques for doing that there's even we've put some of the stuff out as open",
    "start": "2854079",
    "end": "2860520"
  },
  {
    "text": "source it's really useful but also capturing histograms capturing histograms of response times of service",
    "start": "2860520",
    "end": "2866520"
  },
  {
    "text": "times of Q length like if you don't know what is your service time how do you know to tune it is that your problem",
    "start": "2866520",
    "end": "2873280"
  },
  {
    "text": "right is it your services are taking too long are you having the distribution of time so when you go back to all that",
    "start": "2873280",
    "end": "2878680"
  },
  {
    "text": "sort of like queing Theory like is your service deterministic is it marov and is it earling in Behavior you want start",
    "start": "2878680",
    "end": "2885000"
  },
  {
    "text": "using these models and predicting it you need to know the models that are possible and you need to fit fit the right figures into it and you need to",
    "start": "2885000",
    "end": "2891559"
  },
  {
    "text": "get the things from reality and we can do that so very quickly in closing we",
    "start": "2891559",
    "end": "2896960"
  },
  {
    "text": "got to think of clean as being uncontaminated get the stuff out of your code that isn't adding Direct Value",
    "start": "2896960",
    "end": "2902680"
  },
  {
    "text": "because your code's liability one tip if you measure one thing on a project and how people work that matters more than",
    "start": "2902680",
    "end": "2909000"
  },
  {
    "text": "anything else lines of code deleted that will drive much better",
    "start": "2909000",
    "end": "2914160"
  },
  {
    "text": "behaviors than almost anything else get the code based done make your code representative it",
    "start": "2914160",
    "end": "2920160"
  },
  {
    "text": "should be a true portrayal of the business problem it should also be a true portrayal of how to use the system",
    "start": "2920160",
    "end": "2926040"
  },
  {
    "text": "if you've got classes called weird things that are not related to anything you're doing it wrong I'm a great",
    "start": "2926040",
    "end": "2932040"
  },
  {
    "text": "believer you shouldn't even be documenting you shouldn't have comments in your code other than reference to",
    "start": "2932040",
    "end": "2937119"
  },
  {
    "text": "papers or algorithms or something useful that you need to do it you're doing your code wrong you should have nice simple",
    "start": "2937119",
    "end": "2942200"
  },
  {
    "text": "clean methods that stand on their own that make sense and does it pass the out loud test so quite often we'll write",
    "start": "2942200",
    "end": "2949319"
  },
  {
    "text": "things in code that just makes no sense that if you said it out loud to someone else you'd laugh it' be embarrassing so",
    "start": "2949319",
    "end": "2956240"
  },
  {
    "text": "think of it say these things out loud Dan North talks about he's got a rubber duck on his desk and he says things out",
    "start": "2956240",
    "end": "2961880"
  },
  {
    "text": "loud too even if you're not talking to another person but most importantly meure measure and don't guess if you",
    "start": "2961880",
    "end": "2968079"
  },
  {
    "text": "want to have performance you got to measure and don't guess and I'll leave you with a kind of interesting quote",
    "start": "2968079",
    "end": "2973480"
  },
  {
    "text": "from Bill Le who invented the lar jet he said if it looks good it'll fly good and",
    "start": "2973480",
    "end": "2980240"
  },
  {
    "text": "I find that is so true of code you can look at code bases and you'll almost know if they're going to perform or if",
    "start": "2980240",
    "end": "2987200"
  },
  {
    "text": "they're going to be buggy and this this a Kind of Love attention the detail that you can see whether it's clean and",
    "start": "2987200",
    "end": "2993160"
  },
  {
    "text": "whenever it's not and this is I think it's the same thing with aircraft because exactly the same sort of",
    "start": "2993160",
    "end": "2998240"
  },
  {
    "text": "thinking goes into the perfect aircraft is not the one that you can add more things to it's the one that there's nothing left you can take away it should",
    "start": "2998240",
    "end": "3005319"
  },
  {
    "text": "be the same with your code base when you get it right and on that I'll finish",
    "start": "3005319",
    "end": "3011440"
  },
  {
    "text": "off I think we might have time for a second or question or two",
    "start": "3011440",
    "end": "3017760"
  }
]