[
  {
    "start": "0",
    "end": "132000"
  },
  {
    "text": "[Music]",
    "start": "970",
    "end": "7838"
  },
  {
    "text": "so i wanted to talk about um a problem that is um i think people are starting to",
    "start": "12080",
    "end": "20320"
  },
  {
    "text": "recognize it as being more and more important um",
    "start": "20320",
    "end": "25359"
  },
  {
    "text": "and there's a number of different aspects to this particular problem and i think i'm going to uh i'm going to",
    "start": "25359",
    "end": "31199"
  },
  {
    "text": "stick to one of them but uh there's there are a couple of issues with uh",
    "start": "31199",
    "end": "36480"
  },
  {
    "text": "with um memory efficiency within our uh applications and um you know just",
    "start": "36480",
    "end": "43360"
  },
  {
    "text": "recently i just had a conversation with one of the founders of one of the larger um",
    "start": "43360",
    "end": "49600"
  },
  {
    "text": "cloud providers no not the microsoft one and um you know he was talking about um",
    "start": "49600",
    "end": "57520"
  },
  {
    "text": "you know doing strange things with with the java virtual machine just to help try to solve this",
    "start": "57520",
    "end": "63039"
  },
  {
    "text": "particular memory uh for their customers i think you know there's um alibaba i know has been involved with",
    "start": "63039",
    "end": "70479"
  },
  {
    "text": "jvm development for a couple of years for a number of years now i mean they're all they're looking at",
    "start": "70479",
    "end": "75759"
  },
  {
    "text": "primarily memory and and what can we do to uh to to well reduce costs and reduce",
    "start": "75759",
    "end": "83680"
  },
  {
    "text": "memory footprints and deal with things like that um and i know that we've been working",
    "start": "83680",
    "end": "88799"
  },
  {
    "text": "with a very large organization which i'll remain nameless",
    "start": "88799",
    "end": "93840"
  },
  {
    "text": "uh but you know their their problem is what we call",
    "start": "93840",
    "end": "99360"
  },
  {
    "text": "densification and um and and we look at some of the",
    "start": "99360",
    "end": "104479"
  },
  {
    "text": "problems like we're looking at one now and the problem that they're having",
    "start": "104479",
    "end": "113439"
  },
  {
    "text": "the thing that's keeping them from densification densification um or really making full advantage of it",
    "start": "113439",
    "end": "120399"
  },
  {
    "text": "is the memory efficiency of their java applications and and so i just wanted to uh address",
    "start": "120399",
    "end": "128720"
  },
  {
    "text": "um that situation we've already done that so we can just go in that and and and take a look at the problem so i",
    "start": "128720",
    "end": "133840"
  },
  {
    "start": "132000",
    "end": "255000"
  },
  {
    "text": "guess i'm supposed to start with a demo um and to that end",
    "start": "133840",
    "end": "140239"
  },
  {
    "text": "let's let me uh bring some code over here so we can all look at uh code",
    "start": "140239",
    "end": "147760"
  },
  {
    "text": "and run i'm assuming that everybody can see that so i just have this application",
    "start": "148640",
    "end": "154560"
  },
  {
    "text": "and uh we're just looking at it it's just a simple little thing uh what",
    "start": "154560",
    "end": "160640"
  },
  {
    "text": "it does is that you guess me you what you do is you pick um a number or well three numbers",
    "start": "160640",
    "end": "168239"
  },
  {
    "text": "between one and a hundred thousand it's like a lottery type thing and you hide it and what this",
    "start": "168239",
    "end": "174400"
  },
  {
    "text": "application is going to do is it's just going to say okay you know what is that number",
    "start": "174400",
    "end": "180560"
  },
  {
    "text": "and here it's saying like okay well i've made this guess i'm going to score it and i'm going to say that yeah i got one",
    "start": "180560",
    "end": "186239"
  },
  {
    "text": "of the numbers right and it's in the right position and that's all the information i have so it's using this information to",
    "start": "186239",
    "end": "192720"
  },
  {
    "text": "filter its guesses and try to refine until it gets to an answer now if you look at this thing",
    "start": "192720",
    "end": "199920"
  },
  {
    "text": "oops i got uh controls in the way um if i just look at the tool in here",
    "start": "199920",
    "end": "207920"
  },
  {
    "text": "you can see that i'm pretty much running cpu hot here uh i was only running one",
    "start": "207920",
    "end": "213360"
  },
  {
    "text": "no it's running all course and yeah i got the webinar software running here so that's interfering and things like that",
    "start": "213360",
    "end": "218799"
  },
  {
    "text": "but you know you know besides the point and this thing is basically all fired up",
    "start": "218799",
    "end": "224319"
  },
  {
    "text": "and and and and the question is okay um you know what can i do to make this",
    "start": "224319",
    "end": "230159"
  },
  {
    "text": "faster well just to understand what i need to do to make this faster um i have to understand what the",
    "start": "230159",
    "end": "236159"
  },
  {
    "text": "underlying performance issue is in the in this particular application so i'm not going to wait till completion",
    "start": "236159",
    "end": "241360"
  },
  {
    "text": "here because it takes a while i'm just going to continue to run uh that application in the background we",
    "start": "241360",
    "end": "247280"
  },
  {
    "text": "can see the time probably under these conditions going to be closer to three minutes to run",
    "start": "247280",
    "end": "252879"
  },
  {
    "text": "right so and this question i ask people and you know and normally in a nice room",
    "start": "252879",
    "end": "260959"
  },
  {
    "start": "255000",
    "end": "717000"
  },
  {
    "text": "and i can get people to raise their hands say you know what is your performance trouble spot",
    "start": "260959",
    "end": "266080"
  },
  {
    "text": "what is your performance trouble spot and really um",
    "start": "266080",
    "end": "274080"
  },
  {
    "text": "if you think about it um i'm going to suggest that you know most people don't know",
    "start": "274960",
    "end": "281840"
  },
  {
    "text": "might have some guesses and things like that um and and if you and i'll back that up with this particular service survey go over here",
    "start": "281840",
    "end": "288400"
  },
  {
    "text": "see i'm gonna get rid of this okay um if we look at the survey um this was done",
    "start": "288400",
    "end": "294400"
  },
  {
    "text": "by rebel the hubs a couple years ago um and they and i think they did a really good job it's a very nice survey",
    "start": "294400",
    "end": "299759"
  },
  {
    "text": "so there's nothing wrong with the survey but what they did was they asked the questions they asked this question to their to",
    "start": "299759",
    "end": "305840"
  },
  {
    "text": "their audience and they said you know what are the typical root causes of your performance issues",
    "start": "305840",
    "end": "312960"
  },
  {
    "text": "and this is what they showed up this is what showed up right and and you can see it's the typical suspects are up there",
    "start": "312960",
    "end": "319680"
  },
  {
    "text": "all the things that you would expect to be a problem are there so the question is you know",
    "start": "319680",
    "end": "327680"
  },
  {
    "text": "what are they missing well what they're missing is this little one down in the corner",
    "start": "327680",
    "end": "335280"
  },
  {
    "text": "in our estimation this problem exists in about",
    "start": "335280",
    "end": "344000"
  },
  {
    "text": "you know 60 some odd percent of all the applications we encounter and",
    "start": "344080",
    "end": "349199"
  },
  {
    "text": "we get data from applications like all over the place people send me data",
    "start": "349199",
    "end": "354800"
  },
  {
    "text": "now the problem is and this is how it ties back into memory",
    "start": "354800",
    "end": "360319"
  },
  {
    "text": "footprint is that when i go to tune an application one of the things that i",
    "start": "360319",
    "end": "366960"
  },
  {
    "text": "have to consider is what is your memory churn rate in the application because that",
    "start": "366960",
    "end": "374880"
  },
  {
    "text": "dictates how i'm going to tune the nursery because that's going to dictate how you're going to calm the garbage",
    "start": "374880",
    "end": "381680"
  },
  {
    "text": "collector down so the garbage collector is not uh heavily as a heavy interference like",
    "start": "381680",
    "end": "387039"
  },
  {
    "text": "i'll just tell you the last gc log i looked at the garbage collector was taking was",
    "start": "387039",
    "end": "392080"
  },
  {
    "text": "responsible for 33 of the application runtime",
    "start": "392080",
    "end": "397120"
  },
  {
    "text": "and why is because their nursery was undersized right and their allocation rates were",
    "start": "397120",
    "end": "403520"
  },
  {
    "text": "around four gigabytes per second in order to accommodate",
    "start": "403520",
    "end": "409840"
  },
  {
    "text": "a four gigabyte per second allocation rate you need minimally about 16 gigs of",
    "start": "410080",
    "end": "417280"
  },
  {
    "text": "nursery they had given this application one",
    "start": "417280",
    "end": "422800"
  },
  {
    "text": "and because they'd only given them one and they starve the the they starve the application for uh for",
    "start": "422800",
    "end": "429120"
  },
  {
    "text": "for memory um the garbage collector had to work extra hard and extra hard means you have",
    "start": "429120",
    "end": "434479"
  },
  {
    "text": "extra long pause times so this is a you know this is a huge",
    "start": "434479",
    "end": "439520"
  },
  {
    "text": "problem and it actually prevents you from meeting a lot of your performance goals and sometimes it's very fairly easily",
    "start": "439520",
    "end": "446319"
  },
  {
    "text": "solved you know i'm saying well someone i'm playing about 70",
    "start": "446319",
    "end": "451440"
  },
  {
    "text": "so you know 67 percent doesn't matter it's a huge percentage",
    "start": "451440",
    "end": "457120"
  },
  {
    "text": "and you know is the garbage collector at fault no it's not it's doing its best to try to",
    "start": "457120",
    "end": "464319"
  },
  {
    "text": "keep up with this as you can see the problem is really algorithmic within your application",
    "start": "464319",
    "end": "470319"
  },
  {
    "text": "and it's not just you it's you know the question is do you use",
    "start": "470319",
    "end": "475520"
  },
  {
    "text": "spring boot cassandra or any other no",
    "start": "475520",
    "end": "482879"
  },
  {
    "text": "as no sequel i guess hadoop can go in there we can name a whole bunch of others",
    "start": "482879",
    "end": "489520"
  },
  {
    "text": "apache spark again or any big data framework log for j",
    "start": "489520",
    "end": "496240"
  },
  {
    "text": "for any or any javi java logging firmware let's not pick on anyone in particular here right do you use a",
    "start": "496240",
    "end": "502080"
  },
  {
    "text": "lot of jyson um here's an interesting problem we're running into",
    "start": "502080",
    "end": "507280"
  },
  {
    "text": "um um you know with a number of clients now it's like do you do you actually use offheat data",
    "start": "507280",
    "end": "513839"
  },
  {
    "text": "structures um ecom caching products hibernate",
    "start": "513839",
    "end": "521279"
  },
  {
    "text": "and so on and so on and so on and so on and right so if you're using any of these things and you're very likely in the 70 percent",
    "start": "521279",
    "end": "528959"
  },
  {
    "text": "um we see excessive logging as being an issue in",
    "start": "528959",
    "end": "536959"
  },
  {
    "text": "very you know a large percentage of that 60 to 70 percent of the applications",
    "start": "536959",
    "end": "542480"
  },
  {
    "text": "that we actually run into and we can actually get a picture as to what's really going on um",
    "start": "542480",
    "end": "548399"
  },
  {
    "text": "it's just how people are logging is the issue and and a lot of it is like",
    "start": "548399",
    "end": "554320"
  },
  {
    "text": "unguarded so there's a lot of things that just happen just silly little things that",
    "start": "554320",
    "end": "559440"
  },
  {
    "text": "accumulate and also you have a hot allocating thread and here's where it gets really interesting given the current",
    "start": "559440",
    "end": "566959"
  },
  {
    "text": "uh memory bandwidth that you can see on the back end of the chip writing this data",
    "start": "566959",
    "end": "573440"
  },
  {
    "text": "out to memory you can have a single hot allocating thread actually take down",
    "start": "573440",
    "end": "579600"
  },
  {
    "text": "an entire socket and what that's going to do is it's going to stuff up the back into the chip in order to accommodate that the chip",
    "start": "579600",
    "end": "587519"
  },
  {
    "text": "itself has to slow down everything else and notice i'm talking about the chip",
    "start": "587519",
    "end": "594240"
  },
  {
    "text": "not your application and because what that means is since it slowed the chip down that means that",
    "start": "594240",
    "end": "600959"
  },
  {
    "text": "everything else running on that chip is also slowed down so if you have",
    "start": "600959",
    "end": "607279"
  },
  {
    "text": "multiple containers with multiple things running on that same socket or set of",
    "start": "607279",
    "end": "613839"
  },
  {
    "text": "sockets now you can see the problem is like it's not just affecting me it's affecting everything else around me",
    "start": "613839",
    "end": "621600"
  },
  {
    "text": "so this is another source of of noisy neighbors",
    "start": "621600",
    "end": "626880"
  },
  {
    "text": "and the bigger issue here is that it's mostly invisible",
    "start": "626880",
    "end": "633519"
  },
  {
    "text": "if we go back to the chart you know you have to ask the question why are",
    "start": "633519",
    "end": "639920"
  },
  {
    "text": "only 10 percent of the people complaining about excessive memory chair",
    "start": "639920",
    "end": "647279"
  },
  {
    "text": "when we're seeing this as this is a problem just about everywhere we go in in a vast majority",
    "start": "647279",
    "end": "653200"
  },
  {
    "text": "of the applications that we look at and and the answer is observability",
    "start": "653200",
    "end": "659519"
  },
  {
    "text": "this is something that people are simply not looking for so this is a bias in our tools everyone expects the",
    "start": "659519",
    "end": "666399"
  },
  {
    "text": "database transactions to be slow everybody expects the interaction with",
    "start": "666399",
    "end": "671440"
  },
  {
    "text": "the database to be slow and generally in most systems it's really isn't",
    "start": "671440",
    "end": "677200"
  },
  {
    "text": "you know databases are quite fast and they scale quite well right but since we've traditionally had",
    "start": "677200",
    "end": "684240"
  },
  {
    "text": "that problem we have a lot of instrumentation around that problem and the instrumentation is lighting up on the database all the time",
    "start": "684240",
    "end": "689839"
  },
  {
    "text": "so therefore we think ah our database is slow but it's just a bias in how we're taking the",
    "start": "689839",
    "end": "695839"
  },
  {
    "text": "measurements in our systems if we start removing the bias from our measurements",
    "start": "695839",
    "end": "702160"
  },
  {
    "text": "um then all of a sudden this picture changes quite considerably and you start seeing the importance of",
    "start": "702160",
    "end": "707920"
  },
  {
    "text": "of the memory churn issue",
    "start": "707920",
    "end": "712079"
  },
  {
    "text": "right so and and just how big is the problem right we reduced allocation rates from",
    "start": "714839",
    "end": "721040"
  },
  {
    "start": "717000",
    "end": "799000"
  },
  {
    "text": "1.8 gigabytes per second this is a framework we use that it's for uh for financial product markup",
    "start": "721040",
    "end": "728000"
  },
  {
    "text": "language all right tps jump from 400 000 tps to 25 million",
    "start": "728000",
    "end": "734720"
  },
  {
    "text": "the other issue is that when we start taking the pressure off here we're not getting percentages of speed",
    "start": "734720",
    "end": "742240"
  },
  {
    "text": "up in the application we're getting integer multiples of speed up right stripped out of the",
    "start": "742240",
    "end": "748880"
  },
  {
    "text": "logging formula transactional engine this was done in actually in the netherlands but but close to",
    "start": "748880",
    "end": "756000"
  },
  {
    "text": "amsterdam and we get a throughput um jump of 4x you there's websocket",
    "start": "756839",
    "end": "764079"
  },
  {
    "text": "framework because we're working with the product company right uh reduce memory churn by a factor of",
    "start": "764079",
    "end": "769279"
  },
  {
    "text": "two and increase throughput um and that led to some other very interesting",
    "start": "769279",
    "end": "774480"
  },
  {
    "text": "benchmarks and stuff like that so and the stars go on and on and on you know we can add to it by saying like you know",
    "start": "774480",
    "end": "779839"
  },
  {
    "text": "we can actually reduce footprint in this application which results in um like i think we're estimating a 25",
    "start": "779839",
    "end": "788399"
  },
  {
    "text": "reduction in the number of servers that a company has to uh use in order to support their load so",
    "start": "788399",
    "end": "794720"
  },
  {
    "text": "you can see these numbers get really significant and they have really significant impacts you know so really what's going on in",
    "start": "794720",
    "end": "801200"
  },
  {
    "start": "799000",
    "end": "999000"
  },
  {
    "text": "this whole situation well what we're looking for is code that",
    "start": "801200",
    "end": "808240"
  },
  {
    "text": "um that um that's doing this it's just just allocating a lot it's",
    "start": "808240",
    "end": "813519"
  },
  {
    "text": "hitting these allocation hotspots in our code right so you know",
    "start": "813519",
    "end": "819040"
  },
  {
    "text": "when we allocate in java heap um we're going to allocate on a couple of",
    "start": "819040",
    "end": "824480"
  },
  {
    "text": "different paths right and you know what we're hoping for is that the small objects are going to be optimized",
    "start": "824480",
    "end": "830480"
  },
  {
    "text": "into what's known as a scalar allocation which means that that allocation is going to basically be inlined into the code",
    "start": "830480",
    "end": "838160"
  },
  {
    "text": "right so you know what are the cases when we can do that well we can do that when we know that the object being",
    "start": "838160",
    "end": "845360"
  },
  {
    "text": "created is small generally only contains primitive values and is not going to escape",
    "start": "845360",
    "end": "853519"
  },
  {
    "text": "and that gets into another piece of analysis that the um that the jit compilers do inside of",
    "start": "853519",
    "end": "859279"
  },
  {
    "text": "your application they're going to look at the data and say okay does it meet this criteria",
    "start": "859279",
    "end": "864800"
  },
  {
    "text": "small and is only going to be visible by the thread that has created it if",
    "start": "864800",
    "end": "871040"
  },
  {
    "text": "it's only visible by the thread that's created created and it's probably it's probably going to be able to rip that thing apart",
    "start": "871040",
    "end": "876639"
  },
  {
    "text": "and scale or allocate it which means it's not going to be allocated on the heap and that's just a different operation it",
    "start": "876639",
    "end": "883360"
  },
  {
    "text": "actually takes pressure off of the heat um but if you can't do that for whatever",
    "start": "883360",
    "end": "888959"
  },
  {
    "text": "reason if it fails that test um then you're on one of these other paths which",
    "start": "888959",
    "end": "895279"
  },
  {
    "text": "means you're going to be allocating out in in the heap that's what time is six",
    "start": "895279",
    "end": "900720"
  },
  {
    "text": "or seven um i'm completely lost for time so i'm happy to take cues on on this whole",
    "start": "900720",
    "end": "906560"
  },
  {
    "text": "thing um so what's",
    "start": "906560",
    "end": "912320"
  },
  {
    "text": "what's the issue here well it's really um when we're looking at the um each of the individual allocations",
    "start": "912320",
    "end": "918720"
  },
  {
    "text": "they're cheap they don't really cost you a lot",
    "start": "918720",
    "end": "925360"
  },
  {
    "text": "but if you get into a hot allocating loop or or hot allocating path and stuff like",
    "start": "925360",
    "end": "931360"
  },
  {
    "text": "that the problem is going to be frequency and anything that you do that's um",
    "start": "931360",
    "end": "939440"
  },
  {
    "text": "cheap but you do it a lot then of course that's going to be expensive over time right and so the allocation rate is going to",
    "start": "939440",
    "end": "945839"
  },
  {
    "text": "be an approximation of the allocation frequency",
    "start": "945839",
    "end": "951440"
  },
  {
    "text": "right so we'll so what we can do is we can look at a gc log and we can use that",
    "start": "951440",
    "end": "957920"
  },
  {
    "text": "to give us an approximate um value for what the allocation rate is",
    "start": "957920",
    "end": "963680"
  },
  {
    "text": "but what's going to you know you know that doesn't really give us the allocation frequency uh but we what we can do is",
    "start": "963680",
    "end": "970399"
  },
  {
    "text": "just infer that so we're going to infer the allocation frequency is what i call a proxy measure so i can't get at that",
    "start": "970399",
    "end": "977519"
  },
  {
    "text": "directly but i can actually get to it uh by looking at just how many bytes are",
    "start": "977519",
    "end": "982959"
  },
  {
    "text": "allocated but it's really not the bytes that are the problem because if i ask for 100 bytes or ask for",
    "start": "982959",
    "end": "989360"
  },
  {
    "text": "a megabyte it's going to be approximately the same cost i think i can run through that right",
    "start": "989360",
    "end": "995519"
  },
  {
    "text": "here just to see what's going on i mean prior to that i was i was talking about",
    "start": "995519",
    "end": "1000800"
  },
  {
    "start": "999000",
    "end": "1212000"
  },
  {
    "text": "um the nursery",
    "start": "1000800",
    "end": "1004959"
  },
  {
    "text": "right so this is an approximation of what our collectors face um and just um i know the details differ",
    "start": "1005839",
    "end": "1014160"
  },
  {
    "text": "for each of the collectors but you know this is approximately what's going on so i have this marked as eden that's",
    "start": "1014160",
    "end": "1019360"
  },
  {
    "text": "really our nursery right so if we actually look what's what",
    "start": "1019360",
    "end": "1024480"
  },
  {
    "text": "happens in here you can see that when we execute some piece of code",
    "start": "1024480",
    "end": "1030319"
  },
  {
    "text": "we have this top of heat pointer so we're gonna have thread one actually do this allocation here",
    "start": "1030319",
    "end": "1035760"
  },
  {
    "text": "and you can see it's gonna create a new foo and then afterwards going to create this big bite array",
    "start": "1035760",
    "end": "1040959"
  },
  {
    "text": "all right so if we execute this particular piece of code what i'm going to do is i'm going to go out into the heap and say okay",
    "start": "1040959",
    "end": "1047839"
  },
  {
    "text": "i need enough memory a buffer big enough to support this allocation of foo now they've optimized this",
    "start": "1047839",
    "end": "1055760"
  },
  {
    "text": "in the sense that i'm not just going to go out and get the 10 or 20 or 100 bytes that i need",
    "start": "1055760",
    "end": "1061039"
  },
  {
    "text": "to allocate foo i'm going to go and get what's known as a",
    "start": "1061039",
    "end": "1066160"
  },
  {
    "text": "thread local allocation block so i'm going to go out and get a megabyte of memory",
    "start": "1066160",
    "end": "1072720"
  },
  {
    "text": "right one meg and once i've gotten that one meg then i",
    "start": "1072720",
    "end": "1080080"
  },
  {
    "text": "that's dedicated to allocations made by thread one so when thread two starts allocating",
    "start": "1080080",
    "end": "1086559"
  },
  {
    "text": "it's gonna do the same thing it's gonna go get its own t lab",
    "start": "1086559",
    "end": "1091760"
  },
  {
    "text": "and it's gonna start allocating into that particular t lab so what that does is it reduces",
    "start": "1091760",
    "end": "1097600"
  },
  {
    "text": "contention on this thing which we call top of heat pointer right so we're going to have a t-lab",
    "start": "1097600",
    "end": "1103280"
  },
  {
    "text": "pointer instead and we're going to do bump and run so this is why the allocations are so cheap",
    "start": "1103280",
    "end": "1110080"
  },
  {
    "text": "to allocate food all i need to do is bump that pointer it's a very quick",
    "start": "1110080",
    "end": "1116960"
  },
  {
    "text": "operation and then i can just fill in the data right into the slot and as i keep",
    "start": "1116960",
    "end": "1124080"
  },
  {
    "text": "allocating of course you know i'm just going to keep bumping uh that pointer up until i",
    "start": "1124080",
    "end": "1129679"
  },
  {
    "text": "hit the end of the t lab and when i hit the end of the t lab then i can go back into the heap and i can just grab",
    "start": "1129679",
    "end": "1135039"
  },
  {
    "text": "another tilap and off you go right so as i mentioned before when bar",
    "start": "1135039",
    "end": "1141280"
  },
  {
    "text": "2 fires up he's going to get his own t-lab he's going to",
    "start": "1141280",
    "end": "1146880"
  },
  {
    "text": "allocate for bar fill in the data if we have something that's bigger than",
    "start": "1146880",
    "end": "1154080"
  },
  {
    "text": "a megabyte then unfortunately that has to go on a slow path so that's",
    "start": "1154720",
    "end": "1160720"
  },
  {
    "text": "going to just directly bump the top of heat pointer and of course we can allocate the data",
    "start": "1160720",
    "end": "1167440"
  },
  {
    "text": "into this so you can see that these things are happening very very quickly not a lot of work being done here",
    "start": "1167440",
    "end": "1174880"
  },
  {
    "text": "so the problem isn't an individual allocation it is um the all of your allocations in",
    "start": "1174880",
    "end": "1180799"
  },
  {
    "text": "aggregate um tenured space works slightly",
    "start": "1180799",
    "end": "1187440"
  },
  {
    "text": "different but generally we don't have to be so concerned about allocations in tenure space because it's generally the garbage",
    "start": "1187440",
    "end": "1192960"
  },
  {
    "text": "collectors that are going to be allocating into the tenured space not our not our",
    "start": "1192960",
    "end": "1198160"
  },
  {
    "text": "application threads under rare conditions the application threads will allocate",
    "start": "1198160",
    "end": "1204240"
  },
  {
    "text": "directly into tenured but that's generally what's not happening",
    "start": "1204240",
    "end": "1209440"
  },
  {
    "text": "so um as i mentioned before with high memory",
    "start": "1209440",
    "end": "1216000"
  },
  {
    "start": "1212000",
    "end": "1342000"
  },
  {
    "text": "churn rates we're going to quickly feel eaten and that's going to increase the activity of the garbage collection",
    "start": "1216000",
    "end": "1223120"
  },
  {
    "text": "and it has all of these knock-on effects it's going to speed up aging so how we move data through the",
    "start": "1223120",
    "end": "1228559"
  },
  {
    "text": "different memory spaces is determined by the number of garbage collections they survive",
    "start": "1228559",
    "end": "1234159"
  },
  {
    "text": "so think of it this way if i have a piece of data that i know that i'm going to keep in memory for two minutes for whatever",
    "start": "1234159",
    "end": "1240640"
  },
  {
    "text": "reason it's there for two minutes the question is is that going to be in young generational space where collecting it",
    "start": "1240640",
    "end": "1248000"
  },
  {
    "text": "is going to be really cheap or is that going to be in tenured space the answer is",
    "start": "1248000",
    "end": "1253120"
  },
  {
    "text": "well it depends on the frequency of the garbage collection",
    "start": "1253120",
    "end": "1257360"
  },
  {
    "text": "so i don't know right um and this gets into this question where we end up experiencing premature",
    "start": "1258159",
    "end": "1264320"
  },
  {
    "text": "promotion and that puts a lot more pressure on the garbage collection collector also so you can see that by increasing the",
    "start": "1264320",
    "end": "1271600"
  },
  {
    "text": "allocation rate uh what we're doing is we're causing the garbage collectors to have to work",
    "start": "1271600",
    "end": "1278000"
  },
  {
    "text": "harder and because they work harder there's all these extra costs",
    "start": "1278000",
    "end": "1283200"
  },
  {
    "text": "that are incurred by the garbage collector so quite often what happens is that the garbage collector gets blamed",
    "start": "1283200",
    "end": "1288640"
  },
  {
    "text": "for the problem here because it's the garbage collector that is that is exposing the problem but it's",
    "start": "1288640",
    "end": "1294720"
  },
  {
    "text": "really not the garbage collector's fault and you really can't tune the garbage collector you can tune the",
    "start": "1294720",
    "end": "1299919"
  },
  {
    "text": "garage spectre to hide this problem but the cost of tuning the garbage collector",
    "start": "1299919",
    "end": "1305280"
  },
  {
    "text": "is going to be that i need a lot a lot bigger footprint in order to manage this problem right",
    "start": "1305280",
    "end": "1312960"
  },
  {
    "text": "so really the problem that we want to solve is how do we find the hot allocators and",
    "start": "1312960",
    "end": "1319120"
  },
  {
    "text": "then and then basically algorithmically fiddling around with that piece of code",
    "start": "1319120",
    "end": "1324240"
  },
  {
    "text": "to try to see if we can quiesce uh you know like not allocate and not not um",
    "start": "1324240",
    "end": "1329760"
  },
  {
    "text": "and not go through as much churn what are we doing for time",
    "start": "1329760",
    "end": "1335279"
  },
  {
    "text": "another i think 15 minutes 15 or 25 i'm oh 25",
    "start": "1338000",
    "end": "1345600"
  },
  {
    "start": "1342000",
    "end": "1436000"
  },
  {
    "text": "okay yeah so i was looking at it because yeah i haven't done the time conversion in my head and stuff like that",
    "start": "1345600",
    "end": "1352240"
  },
  {
    "text": "um so here's some charts i think that draw this out so if you look at the chart on the left",
    "start": "1352240",
    "end": "1357600"
  },
  {
    "text": "hand side basically what we're looking at is heap occupancy and the black line at the top",
    "start": "1357600",
    "end": "1363440"
  },
  {
    "text": "is actually the size of heap so you see that the the java application in this case is",
    "start": "1363440",
    "end": "1370159"
  },
  {
    "text": "is resizing heat and um but anyways uh you know",
    "start": "1370159",
    "end": "1376240"
  },
  {
    "text": "the point is like if you look at the bottom of the of the chart and you can see that red almost looking red line looking",
    "start": "1376240",
    "end": "1383440"
  },
  {
    "text": "that's the heap occupancy and if you look at the gc pause time",
    "start": "1383440",
    "end": "1388720"
  },
  {
    "text": "you can see that it's just completely correlated to how much live data that you have",
    "start": "1388720",
    "end": "1394880"
  },
  {
    "text": "right and the other aspect of this whole thing is that of course if i have this",
    "start": "1394880",
    "end": "1402080"
  },
  {
    "text": "higher rate of churn and i get things promoted into tenure and all of this activity is happening",
    "start": "1402080",
    "end": "1408080"
  },
  {
    "text": "then my live set is going to be um larger because i'm going to be",
    "start": "1408080",
    "end": "1414000"
  },
  {
    "text": "retaining what's known as transient data for longer and longer periods of time and that's going to that's going to",
    "start": "1414000",
    "end": "1420559"
  },
  {
    "text": "contribute to the size of the live set which means my pause times go up so you can see there's just",
    "start": "1420559",
    "end": "1425679"
  },
  {
    "text": "so many bad things going on here because of this so um let's go back to",
    "start": "1425679",
    "end": "1431840"
  },
  {
    "text": "um this particular chart here and",
    "start": "1431840",
    "end": "1439200"
  },
  {
    "start": "1436000",
    "end": "1521000"
  },
  {
    "text": "you know so we're going to so the question would be so what is you know what is the effect here or what",
    "start": "1439200",
    "end": "1444640"
  },
  {
    "text": "is a a an optimal allocation rate look like and really the answer is well",
    "start": "1444640",
    "end": "1452799"
  },
  {
    "text": "it from my mind it seems to um follow this power curve from from our observations",
    "start": "1452799",
    "end": "1458240"
  },
  {
    "text": "in the wild um and and you can see that that the red zone is anything really above",
    "start": "1458240",
    "end": "1464400"
  },
  {
    "text": "one gig per second and this is a bit of an arbitrary number so this is not really scientifically derived it's just",
    "start": "1464400",
    "end": "1472480"
  },
  {
    "text": "been derived by our work on applications in the field but as you can see the power curve",
    "start": "1472480",
    "end": "1478960"
  },
  {
    "text": "really drops um fairly quickly above one gig per second in terms of what",
    "start": "1478960",
    "end": "1484320"
  },
  {
    "text": "the size of the forms gaining is that you can get and if you know by the time you get down",
    "start": "1484320",
    "end": "1490480"
  },
  {
    "text": "to around 500 megabytes per second 300 megabytes per second then um there's likely not",
    "start": "1490480",
    "end": "1498400"
  },
  {
    "text": "there there's likely very little gain left that you can that you can get so one of the things we actually want to",
    "start": "1498400",
    "end": "1504240"
  },
  {
    "text": "measure in the application is like you know what is the allocation rate and let's use that information to to",
    "start": "1504240",
    "end": "1511200"
  },
  {
    "text": "guide our our tuning regime so and you know with that note let's",
    "start": "1511200",
    "end": "1519039"
  },
  {
    "text": "let's go back to our application let's see how long oh yeah so it took uh 151 seconds to run",
    "start": "1519039",
    "end": "1526480"
  },
  {
    "start": "1521000",
    "end": "2288000"
  },
  {
    "text": "and so so the question is okay you know what's the issue with this problem so i guess you",
    "start": "1526480",
    "end": "1531679"
  },
  {
    "text": "can probably all guess it's probably suffering from high allocation rates",
    "start": "1531679",
    "end": "1537120"
  },
  {
    "text": "um so let's confirm that so i'm going to bring up our um",
    "start": "1537120",
    "end": "1544559"
  },
  {
    "text": "log analysis tool um unfortunately right now it's behind microsoft's firewall but we're hoping",
    "start": "1546159",
    "end": "1552480"
  },
  {
    "text": "that it's going to be open sourced uh very shortly um so we're um going through the processes that we",
    "start": "1552480",
    "end": "1559520"
  },
  {
    "text": "need in order to open source software and then uh sensor would be available um",
    "start": "1559520",
    "end": "1565440"
  },
  {
    "text": "in the wild again um so",
    "start": "1565440",
    "end": "1571440"
  },
  {
    "text": "you can see as i go through this gc log here let's straighten this out make it look a little better um",
    "start": "1571440",
    "end": "1578720"
  },
  {
    "text": "you know not much memory being used here so all of that looks really good um if i",
    "start": "1578720",
    "end": "1585760"
  },
  {
    "text": "look at the allocation rates uh you can see uh that's an outlier i'm not gonna worry",
    "start": "1585760",
    "end": "1592080"
  },
  {
    "text": "about that one there's some funny maths that happen here that sometimes make our estimates really weird",
    "start": "1592080",
    "end": "1597200"
  },
  {
    "text": "but if we look we're running at about 6.5 gigabytes per second now",
    "start": "1597200",
    "end": "1604559"
  },
  {
    "text": "oddly enough this value on different pieces of hardware might",
    "start": "1604559",
    "end": "1609760"
  },
  {
    "text": "alter a bit but having bigger better faster services",
    "start": "1609760",
    "end": "1615200"
  },
  {
    "text": "servers isn't really going to help you here they're all going to top out at approximately the",
    "start": "1615200",
    "end": "1621679"
  },
  {
    "text": "same allocation rates you're not going to be able to push things faster",
    "start": "1621679",
    "end": "1627440"
  },
  {
    "text": "and there's reasons for that it's because the right channels writing back to memory are all tied to",
    "start": "1627440",
    "end": "1633919"
  },
  {
    "text": "memory chip speed not cpu speed and the memory chip speed and and the",
    "start": "1633919",
    "end": "1641440"
  },
  {
    "text": "bus to feed the the memory should be synced at approximately the same clock rates",
    "start": "1641440",
    "end": "1647440"
  },
  {
    "text": "um those are pretty much the same no matter which piece of hardware you're",
    "start": "1647440",
    "end": "1653840"
  },
  {
    "text": "running on and that's why this value is capped at the levels that we see it and so we can",
    "start": "1653840",
    "end": "1660799"
  },
  {
    "text": "take this data off of uh you know all kinds of different pieces of hardware",
    "start": "1660799",
    "end": "1666399"
  },
  {
    "text": "and you're going to find that the caffeine is approximately the same um here it's typically about eight gigs",
    "start": "1666399",
    "end": "1672000"
  },
  {
    "text": "per second i'm guessing it's a bit lower because of you know all the extra things that are going on on this particular machine",
    "start": "1672000",
    "end": "1678559"
  },
  {
    "text": "okay anyway so we know that we have this problem here which is high allocation rate",
    "start": "1678559",
    "end": "1683600"
  },
  {
    "text": "the next question is you know what can we do to actually diagnose this well probably the best thing to do is to",
    "start": "1683600",
    "end": "1690640"
  },
  {
    "text": "bring a um a profiler in to the table so i'm just gonna go to",
    "start": "1690640",
    "end": "1698559"
  },
  {
    "text": "um use this visual vm tool um there's all kinds of tools that",
    "start": "1698559",
    "end": "1705200"
  },
  {
    "text": "can do this job um this is just one that i have here and now it's free um",
    "start": "1705200",
    "end": "1713279"
  },
  {
    "text": "you might might say uh flight recorder could i do this with flight recorder and the answer is yes you can",
    "start": "1713279",
    "end": "1718880"
  },
  {
    "text": "actually find hot allocation sites with flight recorder it's a little better with the",
    "start": "1718880",
    "end": "1724880"
  },
  {
    "text": "newer version than with the older version however as i say that um",
    "start": "1724880",
    "end": "1732559"
  },
  {
    "text": "it still lacks a bit of data that helps you identify the problem",
    "start": "1732559",
    "end": "1739039"
  },
  {
    "text": "easily so so it's cheaper you could possibly do this in",
    "start": "1739039",
    "end": "1744480"
  },
  {
    "text": "your production environment it has all of those advantages but the amount of data that it gives you to help you characterize the problem",
    "start": "1744480",
    "end": "1751679"
  },
  {
    "text": "is not quite as robust as what you get from another pro profiler",
    "start": "1751679",
    "end": "1758799"
  },
  {
    "text": "now the other issue is and i i can show you this in a second is that um so i'm just going",
    "start": "1758799",
    "end": "1766320"
  },
  {
    "text": "to set up this thing to profile this moment i'm dabbling on i guess",
    "start": "1766320",
    "end": "1772000"
  },
  {
    "text": "um oh right sorry i keep forgetting",
    "start": "1772000",
    "end": "1778480"
  },
  {
    "text": "you can't see what i can see right so let's uh so what i did was i just uh set up the memory profiler to profile",
    "start": "1778480",
    "end": "1785200"
  },
  {
    "text": "for everything since i don't know what's going on and i just clicked this particular button here too",
    "start": "1785200",
    "end": "1791760"
  },
  {
    "text": "to attach the profiler to the application and now what i'm going to do is i'm going to say since frequency is a",
    "start": "1791760",
    "end": "1797760"
  },
  {
    "text": "problem i don't really have a frequency measure here but what i do",
    "start": "1797760",
    "end": "1803120"
  },
  {
    "text": "have is an allocated object count so i'm going to use this as a proxy for",
    "start": "1803120",
    "end": "1808240"
  },
  {
    "text": "frequency so i'm going to just sort here and i say okay so what's my most",
    "start": "1808240",
    "end": "1813760"
  },
  {
    "text": "frequently allocated object because that's going to be my hot allocator",
    "start": "1813760",
    "end": "1818880"
  },
  {
    "text": "so i can go back to the application here and i can just run it",
    "start": "1818880",
    "end": "1826000"
  },
  {
    "text": "oops let's push it over here i'll just push over here somewhere we",
    "start": "1827840",
    "end": "1834159"
  },
  {
    "text": "can see what's uh the green bar should go to done and and then we can just watch it",
    "start": "1834159",
    "end": "1840399"
  },
  {
    "text": "and i think quite quickly",
    "start": "1840399",
    "end": "1844480"
  },
  {
    "text": "well this is really easy now right we just look for the thing at the top of the list well the reality is",
    "start": "1845600",
    "end": "1854159"
  },
  {
    "text": "it's not quite this easy right um i would just point out this",
    "start": "1854159",
    "end": "1860960"
  },
  {
    "text": "application runs bimodally and what i mean by bimodal is that oh okay it's sort of in a guessing",
    "start": "1860960",
    "end": "1867919"
  },
  {
    "text": "position right now it seems seemingly running fast for some reason okay um it's running by modally it's",
    "start": "1867919",
    "end": "1875360"
  },
  {
    "text": "like when it's making guesses it takes one execution path and when",
    "start": "1875360",
    "end": "1880399"
  },
  {
    "text": "it's not making guesses like i mean isn't trying to score the guesses it's taking another execution",
    "start": "1880399",
    "end": "1886159"
  },
  {
    "text": "path and each mode of this application is going to have one allocation hotspot",
    "start": "1886159",
    "end": "1893279"
  },
  {
    "text": "now the odd thing here is that um you know this allocation hotspot",
    "start": "1893279",
    "end": "1900080"
  },
  {
    "text": "is a real allocation hotspot in this application right and and we can drill down and you",
    "start": "1900080",
    "end": "1906399"
  },
  {
    "text": "can actually see the source of of this allocation hotspot here i'm",
    "start": "1906399",
    "end": "1911840"
  },
  {
    "text": "actually going to do this in a snapshot because it's going to be stable",
    "start": "1911840",
    "end": "1918880"
  },
  {
    "text": "right um and you can see that you know here we are we're actually looking at allocation code so this this is the type",
    "start": "1919600",
    "end": "1926320"
  },
  {
    "text": "of information that's uh uh missing from flight recorder in other words it'll tell you that okay i got this",
    "start": "1926320",
    "end": "1932720"
  },
  {
    "text": "problem with interray that's going to that's causing a lot of memory pressure",
    "start": "1932720",
    "end": "1938480"
  },
  {
    "text": "but it really doesn't give you the information to say okay where is the allocation hot spot actually existing in the code so",
    "start": "1938480",
    "end": "1945039"
  },
  {
    "text": "it just doesn't collect that information um [Music] but anyways we can so we can use this to",
    "start": "1945039",
    "end": "1951760"
  },
  {
    "text": "actually say okay well i obviously want to go into this class here and say okay what the heck am i doing here that's causing me to",
    "start": "1951760",
    "end": "1960159"
  },
  {
    "text": "allocate all of these um interraise now as as i mentioned this application is bimodal and",
    "start": "1960159",
    "end": "1967760"
  },
  {
    "text": "being bimodal what it does is it means that there's another allocation hotspot that shows up but it only shows up",
    "start": "1967760",
    "end": "1976080"
  },
  {
    "text": "when i'm pushing guesses onto the screen so i know what that is so i'll just tell",
    "start": "1976080",
    "end": "1982000"
  },
  {
    "text": "you because i'm not going to go through the whole run or maybe it's popped up by now let's take a look",
    "start": "1982000",
    "end": "1987679"
  },
  {
    "text": "and see what's going on here no it actually hasn't popped out of the",
    "start": "1987679",
    "end": "1994240"
  },
  {
    "text": "out of the noise floor here yet so i'll just go back to the snapshot and just say it's",
    "start": "1994240",
    "end": "2000240"
  },
  {
    "text": "this one right here now this is where um flight recorder does have an advantage",
    "start": "2000240",
    "end": "2005600"
  },
  {
    "text": "over most of the other profilers in the sense that this looks like a hot",
    "start": "2005600",
    "end": "2010960"
  },
  {
    "text": "allocator to the uh to the profiler and if",
    "start": "2010960",
    "end": "2018240"
  },
  {
    "text": "we go back and look at the code we can actually find this thing here okay",
    "start": "2018240",
    "end": "2025440"
  },
  {
    "text": "so here's the code so we're checking is you know is the thing that i'm passing is that a solution",
    "start": "2025440",
    "end": "2032480"
  },
  {
    "text": "um so i'm going to go over all the board entries and i'm going to score it um against the board entries and",
    "start": "2032480",
    "end": "2039919"
  },
  {
    "text": "oops that's interesting okay so i'm going to score it against the board and board entries and",
    "start": "2039919",
    "end": "2046880"
  },
  {
    "text": "um if it scores uh well um then um i'm going to say okay",
    "start": "2046880",
    "end": "2054638"
  },
  {
    "text": "um go test this thing and and say okay this is a possible solution right and and so i'm going to just uh",
    "start": "2054639",
    "end": "2062480"
  },
  {
    "text": "you know basically say okay how well was my how good was my guess and this is going to be a measure of goodness but you can see what i",
    "start": "2062480",
    "end": "2069440"
  },
  {
    "text": "have here is i got this while loop and in the while loop i'm actually allocating the score object",
    "start": "2069440",
    "end": "2075599"
  },
  {
    "text": "over and over and over and over again and as you can",
    "start": "2075599",
    "end": "2080878"
  },
  {
    "text": "see that's probably going like okay that's just a crazy thing to do why am i doing that that's just a hot allocator",
    "start": "2080879",
    "end": "2086480"
  },
  {
    "text": "and of course this is just a simulation of things that happen so i'm going to go into the score object and say okay well",
    "start": "2086480",
    "end": "2093358"
  },
  {
    "text": "i got this jackpot and two so basically a two inch and a jackpot and so",
    "start": "2093359",
    "end": "2101359"
  },
  {
    "text": "if i look at how escape analysis is going is going to treat this and how the optimizers are actually going to treat this",
    "start": "2101359",
    "end": "2106800"
  },
  {
    "text": "um what i'm going to see is that okay this particular",
    "start": "2106800",
    "end": "2112079"
  },
  {
    "text": "allocation is local to this to this block of code meaning it's local to this method which",
    "start": "2112079",
    "end": "2118880"
  },
  {
    "text": "means that the thread that's creating it is the only thread that can access it",
    "start": "2118880",
    "end": "2124320"
  },
  {
    "text": "so this actually passes escape analysis and i don't if i also look at it saying like well okay there's two instant",
    "start": "2124320",
    "end": "2130560"
  },
  {
    "text": "okay fantastic i'm gonna scale or replace this allocation so this allocation doesn't actually",
    "start": "2130560",
    "end": "2136480"
  },
  {
    "text": "happen on the heat which means i can go and change this code and do the sensible thing which is",
    "start": "2136480",
    "end": "2142079"
  },
  {
    "text": "like okay let's voice this out here and i can just gonna go",
    "start": "2142079",
    "end": "2149599"
  },
  {
    "text": "um [Music]",
    "start": "2149599",
    "end": "2153420"
  },
  {
    "text": "clear the values make it reusable for the next iteration and stuff like that so you might think okay now i've removed that",
    "start": "2157440",
    "end": "2163359"
  },
  {
    "text": "hot allocator from the loop and i should get a performance quiz the answer is no i'm not because the optimizer's already done",
    "start": "2163359",
    "end": "2168960"
  },
  {
    "text": "this for me okay but if we get back to the",
    "start": "2168960",
    "end": "2174079"
  },
  {
    "text": "interarray in the arrangement group um you can see that this code is really",
    "start": "2174079",
    "end": "2181040"
  },
  {
    "text": "um ugly here's the problem that the profiler is",
    "start": "2181040",
    "end": "2186720"
  },
  {
    "text": "actually pointing to where i'm just creating new arrays um very very frequently and stuff like that",
    "start": "2186720",
    "end": "2192720"
  },
  {
    "text": "right um this array eventually is being passed back and",
    "start": "2192720",
    "end": "2200160"
  },
  {
    "text": "because of it's being it's leaving the context of this method it would fail escape analysis but it's",
    "start": "2200160",
    "end": "2207200"
  },
  {
    "text": "an array so it's going to fail based on that so in this case i'm forced to do this",
    "start": "2207200",
    "end": "2214079"
  },
  {
    "text": "allocation on heap so you know the next thing i'm going to do is i'm going to go and look at okay well the calculate index was and",
    "start": "2214079",
    "end": "2220240"
  },
  {
    "text": "was the next method in the call stack so i'm just going to run through this code here and and algorithmically look at it and",
    "start": "2220240",
    "end": "2227599"
  },
  {
    "text": "say okay what is the stupid thing i'm doing here and then make the fix and um once i make the fix and",
    "start": "2227599",
    "end": "2235520"
  },
  {
    "text": "take this thing out um then this code will start running a lot faster as a matter of fact",
    "start": "2235520",
    "end": "2241200"
  },
  {
    "text": "if i do this work and run it it should run in about it should be completed about let's just",
    "start": "2241200",
    "end": "2249280"
  },
  {
    "text": "comment with this bit here",
    "start": "2249280",
    "end": "2256000"
  },
  {
    "text": "we should get about a 2x improvement in performance just by uh changing this algorithm so",
    "start": "2256000",
    "end": "2261280"
  },
  {
    "text": "what i've done is i've gone to something that says okay don't create that array so frequently in other words that whole method is is",
    "start": "2261280",
    "end": "2268079"
  },
  {
    "text": "uh is now completely missing from this",
    "start": "2268079",
    "end": "2285838"
  },
  {
    "text": "you",
    "start": "2287119",
    "end": "2289200"
  }
]