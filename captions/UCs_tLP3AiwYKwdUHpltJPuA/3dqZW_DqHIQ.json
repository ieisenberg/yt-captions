[
  {
    "start": "0",
    "end": "188000"
  },
  {
    "text": "I am Anders halberg techn whoa technical fellow at uh Microsoft and I'm here to",
    "start": "5040",
    "end": "10080"
  },
  {
    "text": "talk about typescript which is um a project that we've been working on for the last uh two two and a half years um",
    "start": "10080",
    "end": "18680"
  },
  {
    "text": "um so typescript is about solving a problem that we've",
    "start": "18680",
    "end": "24920"
  },
  {
    "text": "increasingly heard uh from from our our customers um you know in particularly over the Last 5 Years customers and even",
    "start": "24920",
    "end": "32398"
  },
  {
    "text": "internal teams keep telling us how how hard it is to write large applications",
    "start": "32399",
    "end": "37960"
  },
  {
    "text": "in in JavaScript um several reasons you know one being that that JavaScript",
    "start": "37960",
    "end": "44440"
  },
  {
    "text": "really was never designed to to write large applications it it you know it was it was sort of like originally intended",
    "start": "44440",
    "end": "50520"
  },
  {
    "text": "for these 10line event handlers and now we're writing 10,000 or 100,000 line",
    "start": "50520",
    "end": "55680"
  },
  {
    "text": "apps in it and the language doesn't really have any large scale application",
    "start": "55680",
    "end": "60840"
  },
  {
    "text": "structuring uh Concepts like classes or modules um and also it's entirely",
    "start": "60840",
    "end": "66960"
  },
  {
    "text": "dynamically typed which means there's no static type information off of which we",
    "start": "66960",
    "end": "72520"
  },
  {
    "text": "can power intelligent tooling and if you think about what it is that powers the",
    "start": "72520",
    "end": "77680"
  },
  {
    "text": "intelligent IDE that we all use today it really is static type information that",
    "start": "77680",
    "end": "83200"
  },
  {
    "text": "makes it possible to do code completion safe refactorings finding all references",
    "start": "83200",
    "end": "88759"
  },
  {
    "text": "go to definition etc etc um so two 2 and",
    "start": "88759",
    "end": "94840"
  },
  {
    "text": "a half years ago when we were thinking about where where do we go next with JavaScript development tools we thought",
    "start": "94840",
    "end": "99920"
  },
  {
    "text": "it'd be really neat if we could strengthen JavaScript with with those key Concepts that are missing for large",
    "start": "99920",
    "end": "107040"
  },
  {
    "text": "scale development like classes modules optional static typing but but doing but",
    "start": "107040",
    "end": "114040"
  },
  {
    "text": "but to do so in a way that doesn't sacrifice the inherent thing that makes JavaScript so interesting thing I.E",
    "start": "114040",
    "end": "121360"
  },
  {
    "text": "crossplatform uh Open Standards web and and so forth and and that is what uh",
    "start": "121360",
    "end": "127200"
  },
  {
    "text": "what typescript is it is a language for application scale JavaScript development",
    "start": "127200",
    "end": "134440"
  },
  {
    "text": "so it's a language for large or application scale uh JavaScript",
    "start": "134440",
    "end": "139480"
  },
  {
    "text": "development uh next level down or the more technical description is typescript",
    "start": "139480",
    "end": "144800"
  },
  {
    "text": "is a super set of JavaScript that compiles two plain JavaScript um and it",
    "start": "144800",
    "end": "152360"
  },
  {
    "text": "does so uh the the compiler itself and the code that it produces uh runs on any",
    "start": "152360",
    "end": "160800"
  },
  {
    "text": "uh uh browser any host on any operating system and the compiler and the",
    "start": "160800",
    "end": "167080"
  },
  {
    "text": "associated language Services uh uh and library typings and so forth are all open source um we put this project out",
    "start": "167080",
    "end": "174760"
  },
  {
    "text": "uh in the open about two days ago um and uh what I have here uh is is basically",
    "start": "174760",
    "end": "180920"
  },
  {
    "text": "you know the publicly available uh installation of it that uh that we're going to try and play",
    "start": "180920",
    "end": "187000"
  },
  {
    "text": "with now so so typescript starts with JavaScript um all JavaScript code is",
    "start": "187000",
    "end": "195120"
  },
  {
    "start": "188000",
    "end": "1252000"
  },
  {
    "text": "valid typescript code because we are a pure superet of of JavaScript uh and",
    "start": "195120",
    "end": "200280"
  },
  {
    "text": "that means that you can just copy and paste JavaScript into a typescript file and then work with it there it also",
    "start": "200280",
    "end": "207000"
  },
  {
    "text": "means that typescript works with all of the existing Frameworks and libraries that are available out there today like",
    "start": "207000",
    "end": "213680"
  },
  {
    "text": "node.js or jQuery backbone prototype etc etc there are lots of them and new ones",
    "start": "213680",
    "end": "220120"
  },
  {
    "text": "coming practically every day um so the thing that we then add on top is",
    "start": "220120",
    "end": "226239"
  },
  {
    "text": "optional static typing classes and modules um and those are really sort of",
    "start": "226239",
    "end": "232200"
  },
  {
    "text": "the things that that allow us then to build great tooling because they're the",
    "start": "232200",
    "end": "237439"
  },
  {
    "text": "missing things that that power the the idees today um the cool thing though is",
    "start": "237439",
    "end": "243200"
  },
  {
    "text": "that there's zero cost all of this all of typescript is purely a development",
    "start": "243200",
    "end": "248599"
  },
  {
    "text": "time tool once you compile you you're left with plain JavaScript and there's no runtime component that needs to be",
    "start": "248599",
    "end": "255480"
  },
  {
    "text": "present in order to to run the the the generated code in fact we simply compile to idiomatic JavaScript the JavaScript",
    "start": "255480",
    "end": "263120"
  },
  {
    "text": "that you would have written if you wanted to emulate classes or or modules and the final code runs as I said in any",
    "start": "263120",
    "end": "270160"
  },
  {
    "text": "browser any host on on any OS um so let's let's actually try to to to do a",
    "start": "270160",
    "end": "277160"
  },
  {
    "text": "little bit of demoing and see what this looks like in action here is the uh typescript uh website well actually it's",
    "start": "277160",
    "end": "282960"
  },
  {
    "text": "a local copy I have just uh in case we locked connectivity but uh but this is is what it looks like and we're going to",
    "start": "282960",
    "end": "288840"
  },
  {
    "text": "go and play with typescript in the typescript playground um which is basically a web page where you can where",
    "start": "288840",
    "end": "296639"
  },
  {
    "text": "you can type in typescript and see the compiled out output in uh in a window on the side um I'm going to switch here and",
    "start": "296639",
    "end": "305080"
  },
  {
    "text": "grab uh my first little demo and so here you you you see some some JavaScript and",
    "start": "305080",
    "end": "313560"
  },
  {
    "text": "here you see the compiled output which happens to be exactly the same because",
    "start": "313560",
    "end": "318600"
  },
  {
    "text": "we are just a a superet of JavaScript now if you look at this code there's something funny about this code right I",
    "start": "318600",
    "end": "324440"
  },
  {
    "text": "mean I'm like taking a parameter X then I'm adding a property to or setting a property but I'm also cring it together",
    "start": "324440",
    "end": "330479"
  },
  {
    "text": "but hey this is valid JavaScript it just so happens to not be meaningful but it's",
    "start": "330479",
    "end": "335680"
  },
  {
    "text": "valid uh now now it would be nice let's say for",
    "start": "335680",
    "end": "341039"
  },
  {
    "text": "example that I knew that X was going to be a string um it sure would be nice if I could somehow indicate that and you",
    "start": "341039",
    "end": "347400"
  },
  {
    "text": "know it's not like we're inventing anything new in that sense you know uh for example if you use a tool like",
    "start": "347400",
    "end": "353560"
  },
  {
    "text": "Google's closure where you put uh type annotations in comments there are there",
    "start": "353560",
    "end": "358639"
  },
  {
    "text": "are tools that can check these things for you but but having your type system in comments is not particularly uh",
    "start": "358639",
    "end": "366199"
  },
  {
    "text": "conducive to readability of the code nor is it particularly expressive you know",
    "start": "366199",
    "end": "371280"
  },
  {
    "text": "there are a bunch of things that you can't say in these comments and you can't put them in all the places that you would like to put them um so what",
    "start": "371280",
    "end": "378160"
  },
  {
    "text": "typescript does instead is it allows you to put type annotations in your code so",
    "start": "378160",
    "end": "384720"
  },
  {
    "text": "I can say x is a typ string um and when I do so you see that our IDE starts to",
    "start": "384720",
    "end": "391880"
  },
  {
    "text": "light up I should mention that that what is powering underneath this edit box that I'm typing in is the typescript",
    "start": "391880",
    "end": "398120"
  },
  {
    "text": "compiler and a typescript language service because typescript is written in typescript and when you compile it you",
    "start": "398120",
    "end": "403680"
  },
  {
    "text": "get JavaScript and you can just use that anywhere and so that's what we're what we're doing here and so the first thing",
    "start": "403680",
    "end": "409400"
  },
  {
    "text": "you see is that we get something here that says there's no name property on typ string which is which is true there",
    "start": "409400",
    "end": "414840"
  },
  {
    "text": "isn't uh uh we also see if we hover over V that we've infer that string plus",
    "start": "414840",
    "end": "420840"
  },
  {
    "text": "string is a string and therefore V is a type string and we see that alert is a",
    "start": "420840",
    "end": "426000"
  },
  {
    "text": "thing that takes a string and returns void and therefore it is valid to pass V to it um now let me try to get rid of of",
    "start": "426000",
    "end": "433800"
  },
  {
    "text": "that line and error here and let's try one of the other primitive types number for example and now we see now we're",
    "start": "433800",
    "end": "441319"
  },
  {
    "text": "inferring that number plus number is a number and now we're trying to pass a number to a method that expects a string",
    "start": "441319",
    "end": "449080"
  },
  {
    "text": "and that in turn is also an error so so here's some more you know static type",
    "start": "449080",
    "end": "454120"
  },
  {
    "text": "checking happen happening let's try to use a bu instead uh and now we see that",
    "start": "454120",
    "end": "461680"
  },
  {
    "text": "operator plus can't be applied to bus well it actually can in JavaScript it",
    "start": "461680",
    "end": "467680"
  },
  {
    "text": "just so happens that you don't get a meaningful result right and so in a sense what this is about is trying to to",
    "start": "467680",
    "end": "474000"
  },
  {
    "text": "to siphon out that meaningful subset of java the semantics subset of JavaScript",
    "start": "474000",
    "end": "480599"
  },
  {
    "text": "that makes sense and that's basically what what what what we're doing here right now we also allow",
    "start": "480599",
    "end": "488520"
  },
  {
    "text": "uh more complicated types like arrays for example I can say that X is a string",
    "start": "488520",
    "end": "494199"
  },
  {
    "text": "array and now when I index into X and press dot you see that we know that there are strings and therefore we can",
    "start": "494199",
    "end": "500960"
  },
  {
    "text": "show you all the methods that are available on string and not just their names but also their signatures so we",
    "start": "500960",
    "end": "508240"
  },
  {
    "text": "can see that care that is a thing that takes an index and uh which is number and returns a number and so forth",
    "start": "508240",
    "end": "515000"
  },
  {
    "text": "um other typical patterns that are",
    "start": "515000",
    "end": "521800"
  },
  {
    "text": "interesting is we could say x is a function that takes no arguments and returns a string and now when we call it",
    "start": "521800",
    "end": "527760"
  },
  {
    "text": "and say dot again you see we get statement completion um but of",
    "start": "527760",
    "end": "534640"
  },
  {
    "text": "course one thing that's really interesting is having the ability to describe as shape of object here for",
    "start": "534640",
    "end": "541640"
  },
  {
    "text": "example I'm saying that uh whoops that my function takes an X that",
    "start": "541640",
    "end": "549399"
  },
  {
    "text": "is a an object that has an A and A B property and now when I say x dot you see that we get statement completion",
    "start": "549399",
    "end": "555839"
  },
  {
    "text": "here x. a x.b and so forth um now I might also want to give a name to",
    "start": "555839",
    "end": "564320"
  },
  {
    "text": "to this structural type or this Anonymous type so you see you can write types just in line but of of course you",
    "start": "564320",
    "end": "569480"
  },
  {
    "text": "can also name them um I think I have this little example here that shows you",
    "start": "569480",
    "end": "575000"
  },
  {
    "text": "how you could write an interface thing with two properties in it and that's really just interface here think of it",
    "start": "575000",
    "end": "581040"
  },
  {
    "text": "more as I'm writing an object type whose name is thing and it has two properties",
    "start": "581040",
    "end": "586800"
  },
  {
    "text": "um and let me now try for example and say Bar N equals process of a colon 10",
    "start": "586800",
    "end": "595680"
  },
  {
    "text": "comma B colon uh",
    "start": "595680",
    "end": "601040"
  },
  {
    "text": "hello for example um now a couple of things worth",
    "start": "601040",
    "end": "607200"
  },
  {
    "text": "noting here first of all if you've been following along over in the generated JavaScript you see that the JavaScript",
    "start": "607200",
    "end": "613560"
  },
  {
    "text": "we generate is really just the the JavaScript that you type minus the type annotations and minus the",
    "start": "613560",
    "end": "620040"
  },
  {
    "text": "type declarations so all of that is there you know for validation and and",
    "start": "620040",
    "end": "625680"
  },
  {
    "text": "IDE tooling sake and then it just compiles away um now the other thing you'll note here if",
    "start": "625680",
    "end": "631800"
  },
  {
    "text": "we if we try to look a little bit at this program so we've defined a to be a number and here we return x.a which",
    "start": "631800",
    "end": "638680"
  },
  {
    "text": "means we've inferred that we return a number which in turn means that we can infer that process is a function that",
    "start": "638680",
    "end": "644600"
  },
  {
    "text": "takes a thing that returns a number which in turn means that when we call Process we can infer that N is a number",
    "start": "644600",
    "end": "651120"
  },
  {
    "text": "and so you see how types flow through just a few annotations and then we can",
    "start": "651120",
    "end": "656959"
  },
  {
    "text": "flow it through the code once we know what what what's going on um let me try to sort of show here",
    "start": "656959",
    "end": "664160"
  },
  {
    "text": "what also happens for example let's say I add uh an extra uh uh uh property to",
    "start": "664160",
    "end": "671240"
  },
  {
    "text": "my my interface type here now you'll notice that I get errors here it says process is is missing one of the one of",
    "start": "671240",
    "end": "678839"
  },
  {
    "text": "the parameters um and I could fix that by by adding my parameter C but I could",
    "start": "678839",
    "end": "684120"
  },
  {
    "text": "also instead indicate that c is an optional parameter so this is a pattern",
    "start": "684120",
    "end": "689360"
  },
  {
    "text": "that's very common in in JavaScript where you take say options bags that are a bunch of options but you don't",
    "start": "689360",
    "end": "694920"
  },
  {
    "text": "actually have to specify all of them right so here we're saying that A and B are mandatory but C is optional if I",
    "start": "694920",
    "end": "701399"
  },
  {
    "text": "give a c it must be a bu if I give a c that isn't the bull now",
    "start": "701399",
    "end": "707800"
  },
  {
    "text": "it's an error so so we can we can sort of express some of the the more intricate parts of of what goes on in uh",
    "start": "707800",
    "end": "714680"
  },
  {
    "text": "in in JavaScript let me actually try to take this piece of code here I'm just going",
    "start": "714680",
    "end": "720720"
  },
  {
    "text": "to copy it and then let's switch to uh visual studio",
    "start": "720720",
    "end": "727360"
  },
  {
    "text": "uh and just get ourselves an empty typescript file so now part of typescript uh the",
    "start": "727360",
    "end": "734360"
  },
  {
    "text": "distribution is a plugin for visual studio that uses the compiler and language service to power up all of",
    "start": "734360",
    "end": "740360"
  },
  {
    "text": "these uh intelligent uh facilities in the IDE um as I said this stuff is all",
    "start": "740360",
    "end": "745760"
  },
  {
    "text": "open source so you can use it anywhere else we you you saw an example of using in a web browser you someone could build",
    "start": "745760",
    "end": "750839"
  },
  {
    "text": "an eclipse plugin and do do the same thing um I'm just going to paste it in here and then continue uh uh playing",
    "start": "750839",
    "end": "757680"
  },
  {
    "text": "with with our code in in here um so one thing you of course can express whoops",
    "start": "757680",
    "end": "764279"
  },
  {
    "text": "in in types is uh is methods so now we're saying that",
    "start": "764279",
    "end": "769959"
  },
  {
    "text": "thing has a and b properties of type number and a foo method uh so now when I",
    "start": "769959",
    "end": "776920"
  },
  {
    "text": "do statement completion you see we have a Fu and when I do open curly it tells me what the signature of that guy is and",
    "start": "776920",
    "end": "783560"
  },
  {
    "text": "and so on um and again here we can infer then that it now we return a string because Fu returns a string",
    "start": "783560",
    "end": "790440"
  },
  {
    "text": "um we actually also allow you to express overloads um so I can say there's there's Fu",
    "start": "790440",
    "end": "799360"
  },
  {
    "text": "actually um is a method that when you give it a string returns a string and when you",
    "start": "799360",
    "end": "805399"
  },
  {
    "text": "give it a number it returns a number uh this happens very often in JavaScript for example like like think of jQuery",
    "start": "805399",
    "end": "812160"
  },
  {
    "text": "and a dollar object that has seven different overloads that you can if you",
    "start": "812160",
    "end": "817440"
  },
  {
    "text": "give it a function then it does this if you give it a string it does that if you give it an object bag it does this other thing and so on and so it's important to",
    "start": "817440",
    "end": "824120"
  },
  {
    "text": "be able to to model that in the type system so we can follow along and when you say dot on that give you the right",
    "start": "824120",
    "end": "830000"
  },
  {
    "text": "type information again um so now if we look here uh if I say x. Fu you'll see",
    "start": "830000",
    "end": "837639"
  },
  {
    "text": "that there are now two overloop uh oh that's should yeah anyway uh um so",
    "start": "837639",
    "end": "842759"
  },
  {
    "text": "and if I give it a number here you go then process now returns a number now this stuff here actually",
    "start": "842759",
    "end": "852279"
  },
  {
    "text": "uh is really the same as writing this",
    "start": "852279",
    "end": "858160"
  },
  {
    "text": "uh so F what I'm really saying here with these two overloads is that there's a foo property that has two possible call",
    "start": "858160",
    "end": "865959"
  },
  {
    "text": "signatures one that takes a string and returns a string and one that takes a number and returns a number um and but I",
    "start": "865959",
    "end": "872360"
  },
  {
    "text": "can describe further things on my on my function for example it also has a data",
    "start": "872360",
    "end": "877720"
  },
  {
    "text": "property so and this again is stuff that occurs so now when I say FU dot you'll see that there's a data property but I",
    "start": "877720",
    "end": "884639"
  },
  {
    "text": "can also call it with two different overloads and so I can model all of",
    "start": "884639",
    "end": "889800"
  },
  {
    "text": "these crazy things that occur in in JavaScript libraries in fact just for completeness sake let me add a uh uh a",
    "start": "889800",
    "end": "897720"
  },
  {
    "text": "couple more here um I could I could now also Define that thing can be a Constructor function that",
    "start": "897720",
    "end": "905000"
  },
  {
    "text": "takes a string and returns elements and when you index into it you get dates and and so forth and now so crazy stuff when",
    "start": "905000",
    "end": "911880"
  },
  {
    "text": "I say new X here it says oh you must give me a string and when you do then",
    "start": "911880",
    "end": "917079"
  },
  {
    "text": "I'm going to return an element etc etc so we basically can model all of these",
    "start": "917079",
    "end": "923519"
  },
  {
    "text": "things that go on in the JavaScript Dom jQuery all of the all of the Frameworks",
    "start": "923519",
    "end": "930600"
  },
  {
    "text": "okay let me get rid of this stuff and try to paste in some",
    "start": "931120",
    "end": "938399"
  },
  {
    "text": "other here's a little more advanced example of type inference uh a function",
    "start": "938399",
    "end": "944519"
  },
  {
    "text": "that closes over a local variable and returns an object with a bunch of function properties that use that that",
    "start": "944519",
    "end": "950839"
  },
  {
    "text": "local and this is how you get privacy in JavaScript is a very very common pattern right um if you if you look in this",
    "start": "950839",
    "end": "958040"
  },
  {
    "text": "piece of code the only thing that that differs from regular JavaScript is this one annotation here that says that that",
    "start": "958040",
    "end": "964000"
  },
  {
    "text": "this function takes a number but we can infer all of the types from from from this so if you hover over the return",
    "start": "964000",
    "end": "971639"
  },
  {
    "text": "statement here you'll see that we've inferred that this returns a thing that has three properties that are each of a",
    "start": "971639",
    "end": "977519"
  },
  {
    "text": "function type that has certain argument types and so forth and in turn make accumulator therefore is a function",
    "start": "977519",
    "end": "983800"
  },
  {
    "text": "taking no arguments that returns an object lateral containing three functions that Etc ET ET Etc so so we",
    "start": "983800",
    "end": "989839"
  },
  {
    "text": "can sort of grock it all um and now when I say bar a equals make",
    "start": "989839",
    "end": "995639"
  },
  {
    "text": "accumulator and then a DOT you'll see that there's an ad here and that I need to pass a number five and and so",
    "start": "995639",
    "end": "1003120"
  },
  {
    "text": "forth now so this shows how we can infer from code that your writing but",
    "start": "1003120",
    "end": "1009399"
  },
  {
    "text": "sometimes inference you want inference to go in the other direction you may for example uh have a declaration of an",
    "start": "1009399",
    "end": "1017759"
  },
  {
    "text": "interface that that you want to go Implement and now really you would like to make inferences from that about the",
    "start": "1017759",
    "end": "1023319"
  },
  {
    "text": "code that you're that you're writing so let's say that my make accumulator function here is something that's",
    "start": "1023319",
    "end": "1028839"
  },
  {
    "text": "supposed to return an accumulator right well you'll see that it all works out now because we actually have structural",
    "start": "1028839",
    "end": "1035880"
  },
  {
    "text": "typing here so the mere fact of writing an object literal that has the right shape is an implementation of that",
    "start": "1035880",
    "end": "1042120"
  },
  {
    "text": "interface you don't have to first declare that you implement it um but but the other thing that's really cool is",
    "start": "1042120",
    "end": "1047959"
  },
  {
    "text": "that if I made a mistake here like typed in the wrong property name then it tells",
    "start": "1047959",
    "end": "1054039"
  },
  {
    "text": "me what's wrong here it tells me that hey you're missing property ad from accumulator um now this is where tooling",
    "start": "1054039",
    "end": "1061679"
  },
  {
    "text": "gets really really useful imagine that this was like a 500 line object literal and trust me I've seen lots of them in",
    "start": "1061679",
    "end": "1067919"
  },
  {
    "text": "JavaScript code and there's something wrong in there somewhere how the hell do you figure that out right I mean that's what tools are supposed to do for you um",
    "start": "1067919",
    "end": "1075280"
  },
  {
    "text": "and that's what we that's what we do here okay",
    "start": "1075280",
    "end": "1081520"
  },
  {
    "text": "um another place where this kind of contextual typing is interesting is um",
    "start": "1081760",
    "end": "1087799"
  },
  {
    "text": "well actually I should show here that even even if I get rid of that type annotation you'll note that we can still",
    "start": "1087799",
    "end": "1095240"
  },
  {
    "text": "infer that value is a number because you've said that you're returning an accumulator and accumulator has an ad",
    "start": "1095240",
    "end": "1102000"
  },
  {
    "text": "function that takes a number and therefore we can relate that and still flow the types in the other in the other",
    "start": "1102000",
    "end": "1107720"
  },
  {
    "text": "direction right this turns out to be useful for example if I say uh document",
    "start": "1107720",
    "end": "1114200"
  },
  {
    "text": "do on Mouse move uh here which is one of the events",
    "start": "1114200",
    "end": "1120799"
  },
  {
    "text": "you can handle equals function of e and then open curly e Dot and you'll note",
    "start": "1120799",
    "end": "1128120"
  },
  {
    "text": "that we actually know what e is here and the way we know it is because we know",
    "start": "1128120",
    "end": "1133360"
  },
  {
    "text": "what document is document is the root document document has an on Mouse move that takes takes a mouse event and",
    "start": "1133360",
    "end": "1139280"
  },
  {
    "text": "returns any and therefore we can push the type information into e as a mouse event and therefore we can give you",
    "start": "1139280",
    "end": "1145159"
  },
  {
    "text": "statement completion on E when you say dot and so lots of lots of inference going on um the cool thing is I can",
    "start": "1145159",
    "end": "1152600"
  },
  {
    "text": "actually go to the definition of mouse move and and look at what this thing is um and that jumps you into in this",
    "start": "1152600",
    "end": "1159720"
  },
  {
    "text": "particular case a file called lib dod. TS and this is 8,000 lines of typescript",
    "start": "1159720",
    "end": "1165400"
  },
  {
    "text": "declarations that declare the entire structure of the Dom and the JavaScript runtime Library this is actually",
    "start": "1165400",
    "end": "1172039"
  },
  {
    "text": "generated from the IDL files that are standardized um so so we know it's correct and and the type information is",
    "start": "1172039",
    "end": "1179080"
  },
  {
    "text": "actually available um it's just that JavaScript itself has no way of conveying this information to you other",
    "start": "1179080",
    "end": "1185720"
  },
  {
    "text": "than at runtime when it's too late right um so so here we can see that Mouse move",
    "start": "1185720",
    "end": "1190960"
  },
  {
    "text": "is a thing that takes a mouse event and we can actually navigate around and and check out all of these things uh and and",
    "start": "1190960",
    "end": "1196360"
  },
  {
    "text": "see what what their shapes are now now the thing that's really neat about this is that we can provide this file just as",
    "start": "1196360",
    "end": "1204200"
  },
  {
    "text": "an adjunct file on the side and once you have that information the tooling lights",
    "start": "1204200",
    "end": "1209320"
  },
  {
    "text": "up and we can do that for any JavaScript library out there so we and we actually",
    "start": "1209320",
    "end": "1214360"
  },
  {
    "text": "do do that for node.js and we do it for jQuery in the typescript distribution so",
    "start": "1214360",
    "end": "1220280"
  },
  {
    "text": "so just as an adjunct file we can provide the missing information right",
    "start": "1220280",
    "end": "1226120"
  },
  {
    "text": "and then light up the tooling based on on that and I think that is just super super",
    "start": "1226120",
    "end": "1232519"
  },
  {
    "text": "valuable okay um so let me uh let's see where where",
    "start": "1232559",
    "end": "1238640"
  },
  {
    "text": "did I want to go from here let me go back and just sort of summarize a little bit about uh the typescript thing here",
    "start": "1238640",
    "end": "1244880"
  },
  {
    "text": "so basically what what what typescript does is it formalizes javascript's type",
    "start": "1244880",
    "end": "1250640"
  },
  {
    "text": "system and provides a static view of it but we're not trying to invent a new type system we're actually bending over",
    "start": "1250640",
    "end": "1256880"
  },
  {
    "start": "1252000",
    "end": "2371000"
  },
  {
    "text": "backwards to stay true to what really is javascript's uh type system you see that",
    "start": "1256880",
    "end": "1261960"
  },
  {
    "text": "we do a lot of type inference and structural typing and and the and and",
    "start": "1261960",
    "end": "1267240"
  },
  {
    "text": "the reality is that when you're writing typescript code you actually end up writing very few type annotations and then we just flow from from from there",
    "start": "1267240",
    "end": "1275039"
  },
  {
    "text": "uh as I said it works with existing JavaScript libraries um and for the type",
    "start": "1275039",
    "end": "1280520"
  },
  {
    "text": "system Geeks out there this is not a provably typ safe type system because",
    "start": "1280520",
    "end": "1287000"
  },
  {
    "text": "JavaScript is not in a sense provably typ safe well you first have to Define what you really mean by that but but the",
    "start": "1287000",
    "end": "1293440"
  },
  {
    "text": "point here is that it is not a type system for the traditional sakes of type",
    "start": "1293440",
    "end": "1298520"
  },
  {
    "text": "systems like performance or like strict validation rather it is a type system",
    "start": "1298520",
    "end": "1303840"
  },
  {
    "text": "that helps you author code and that reflects you know the reality if you will but it is optional and and you",
    "start": "1303840",
    "end": "1310960"
  },
  {
    "text": "don't have to use it but when you do use it the tooling can help you",
    "start": "1310960",
    "end": "1316279"
  },
  {
    "text": "more okay let me try try to jump back and show you some of the uh other",
    "start": "1316279",
    "end": "1322360"
  },
  {
    "text": "features that are available uh I wanted to show classes and modules and we'll go back to the playground because it's",
    "start": "1322360",
    "end": "1328159"
  },
  {
    "text": "instructive to see the the code that the compiler generates um so typescript supports classes so I can declare class",
    "start": "1328159",
    "end": "1335640"
  },
  {
    "text": "uh point for example here and say it has two Fields uh sorry my typing is not",
    "start": "1335640",
    "end": "1341320"
  },
  {
    "text": "great X colon number and uh y colon number like so um",
    "start": "1341320",
    "end": "1349760"
  },
  {
    "text": "and you see that we generate the code that is sort of typical for for for",
    "start": "1349760",
    "end": "1355480"
  },
  {
    "text": "writing classes where you have a closure uh in which you have a Constructor function that we then return out of the",
    "start": "1355480",
    "end": "1361159"
  },
  {
    "text": "out of the closure and now I can say RP equals new point and now we know that on P there's",
    "start": "1361159",
    "end": "1368520"
  },
  {
    "text": "an X and A Y so we can give you statement completion so you can say p.x = 10 p.y = 20 and so",
    "start": "1368520",
    "end": "1376120"
  },
  {
    "text": "on okay now now of course it would be nice to be able to give the arguments to",
    "start": "1376120",
    "end": "1381799"
  },
  {
    "text": "my point here but if I do I get an error because we haven't yet written a Constructor uh but we could go write one",
    "start": "1381799",
    "end": "1389000"
  },
  {
    "text": "uh Constructor of X colon number comma y colon",
    "start": "1389000",
    "end": "1394559"
  },
  {
    "text": "number and in here we can say this dox and again you see we get statement completion on this because we know where",
    "start": "1394559",
    "end": "1401960"
  },
  {
    "text": "where you're at this doy equals y uh and so forth now this this class syntax by",
    "start": "1401960",
    "end": "1407640"
  },
  {
    "text": "the way is aligned with ecmascript 6's current proposals for classes so so the",
    "start": "1407640",
    "end": "1413159"
  },
  {
    "text": "class and module extensions that you see in typescript are actually in a sense a preview of what's coming in ecmascript 6",
    "start": "1413159",
    "end": "1419480"
  },
  {
    "text": "but then on top of that we have layered optional static typing which is not part of what what EAS script 6 is uh is",
    "start": "1419480",
    "end": "1427320"
  },
  {
    "text": "doing so of course you can have uh methods in classes so let's write a dist",
    "start": "1427320",
    "end": "1432799"
  },
  {
    "text": "method here and let's say in here we want to return math Dot and again here you see I get statement completion on",
    "start": "1432799",
    "end": "1438760"
  },
  {
    "text": "all of the all the stuff that's available in in the in the standard runtime Library so I want to return",
    "start": "1438760",
    "end": "1444279"
  },
  {
    "text": "this.x time this dox plus this doy time this doy for",
    "start": "1444279",
    "end": "1451320"
  },
  {
    "text": "example um let format that a little nicer okay so one thing you see here is",
    "start": "1451320",
    "end": "1458120"
  },
  {
    "text": "that instance variables go on this but methods go on the Prototype um and this",
    "start": "1458120",
    "end": "1464559"
  },
  {
    "text": "is exactly how javascripts or egas cript 6 is is planning to do classes and this is basically the typical pattern that",
    "start": "1464559",
    "end": "1471919"
  },
  {
    "text": "people use them when they write uh prototype uh uh uh chains in in JavaScript",
    "start": "1471919",
    "end": "1479360"
  },
  {
    "text": "um we allow uh some other things in classes here for example I could declare",
    "start": "1479360",
    "end": "1485399"
  },
  {
    "text": "uh static field static origin equals new point of 0 comma 0 for example and",
    "start": "1485399",
    "end": "1492760"
  },
  {
    "text": "you'll note now that Statics go on the Constructor function object methods go",
    "start": "1492760",
    "end": "1497880"
  },
  {
    "text": "on the Prototype instance variables go on the instance and so forth and now we",
    "start": "1497880",
    "end": "1503000"
  },
  {
    "text": "understand what this means so when I say Point dot you see that I get an origin member on",
    "start": "1503000",
    "end": "1510080"
  },
  {
    "text": "point okay we also allow uh allow you to write private members but but with a Twist so",
    "start": "1510320",
    "end": "1518120"
  },
  {
    "text": "I could say for example private Color Oops colon string uh like so and now now",
    "start": "1518120",
    "end": "1528080"
  },
  {
    "text": "down here if I say this do color equals",
    "start": "1528080",
    "end": "1536399"
  },
  {
    "text": "red you'll see that we generate the code and you see that this uh statement",
    "start": "1536399",
    "end": "1541679"
  },
  {
    "text": "completion on this shows the color member but if I go down here and say p dot you'll see that there's no color",
    "start": "1541679",
    "end": "1547399"
  },
  {
    "text": "member on P because it's private so we limit you to access only within the class if you declare things to be",
    "start": "1547399",
    "end": "1553720"
  },
  {
    "text": "private however in the generated code we simply just generate a normal Al member call color because there is no way of",
    "start": "1553720",
    "end": "1560360"
  },
  {
    "text": "having private members in JavaScript at least not currently uh one Zas script six rolls around with private names we",
    "start": "1560360",
    "end": "1566919"
  },
  {
    "text": "could Target private names for this kind of code generation and and perhaps do a better job but right now we do the best",
    "start": "1566919",
    "end": "1573320"
  },
  {
    "text": "uh we we can okay uh couple of other uh neat",
    "start": "1573320",
    "end": "1578720"
  },
  {
    "text": "features uh we support what we call automatic properties this pattern of declaring Fields taking Constructor",
    "start": "1578720",
    "end": "1585440"
  },
  {
    "text": "arguments with the same names as the as the the properties and then saying this do blah equals blah is super super",
    "start": "1585440",
    "end": "1591520"
  },
  {
    "text": "common so we have a nice short hand for that where instead you can simply on the",
    "start": "1591520",
    "end": "1597640"
  },
  {
    "text": "Constructor argument say public here and public",
    "start": "1597640",
    "end": "1604480"
  },
  {
    "text": "here and then we automatically inject properties with those names and inject",
    "start": "1604480",
    "end": "1610200"
  },
  {
    "text": "the code to initialize those properties we also support another ecmascript 6 feature which is um default argument",
    "start": "1610200",
    "end": "1618480"
  },
  {
    "text": "value so I could give these arguments default values just by saying equals",
    "start": "1618480",
    "end": "1623640"
  },
  {
    "text": "something and then we inject the correct code to check whether they're undefined and and so on and now of course the the",
    "start": "1623640",
    "end": "1630159"
  },
  {
    "text": "type system whoops the type system now knows that it is permissible to omit the",
    "start": "1630159",
    "end": "1636320"
  },
  {
    "text": "arguments uh in the in the call so we don't get a red squiggly on",
    "start": "1636320",
    "end": "1642398"
  },
  {
    "text": "that okay uh that's well well I should also show that",
    "start": "1642480",
    "end": "1648880"
  },
  {
    "text": "we of course support inheritance for classes let's try to declare class Point 3D extends",
    "start": "1648880",
    "end": "1657120"
  },
  {
    "text": "Point like this and then let's just take a look at what happened in our generator code so we still have our Point uh class",
    "start": "1657159",
    "end": "1664320"
  },
  {
    "text": "right here and now we also have a point 3D and you notice that the code genen for that is a little bit different we",
    "start": "1664320",
    "end": "1669640"
  },
  {
    "text": "generate a function closure that takes the base class as an argument and then we call a helper extends that sets up",
    "start": "1669640",
    "end": "1676159"
  },
  {
    "text": "the Prototype chain the way you're supposed to do in JavaScript uh this is why classes are hard in JavaScript",
    "start": "1676159",
    "end": "1681519"
  },
  {
    "text": "because you're supposed to do all of these crazy things right um this extends method is injected into the generated",
    "start": "1681519",
    "end": "1689519"
  },
  {
    "text": "source code only if there are CL derived classes in that file and that is the only time we inject code that you didn't",
    "start": "1689519",
    "end": "1696640"
  },
  {
    "text": "write into the output file otherwise the code you get is simply the method bodies",
    "start": "1696640",
    "end": "1702480"
  },
  {
    "text": "that you wrote so there is no runtime library or new collection classes or blah blah blah anything associated with",
    "start": "1702480",
    "end": "1709000"
  },
  {
    "text": "typescript it is simply just JavaScript okay I could in here write",
    "start": "1709000",
    "end": "1714159"
  },
  {
    "text": "myself a Constructor that takes X colon number comma y colon number comma say",
    "start": "1714159",
    "end": "1722960"
  },
  {
    "text": "public add an extra property Z colon number like that and then in here say",
    "start": "1722960",
    "end": "1730960"
  },
  {
    "text": "call Super of X comma y for example and now you see that we generate the appropriate code for making a call to",
    "start": "1730960",
    "end": "1738360"
  },
  {
    "text": "the super Constructor etc etc um yeah so that's uh classes um what I",
    "start": "1738360",
    "end": "1747000"
  },
  {
    "text": "wanted to show next is modules um let's try",
    "start": "1747000",
    "end": "1752559"
  },
  {
    "text": "to actually let me try and grab a little snippet of code over here what I wanted",
    "start": "1752559",
    "end": "1758840"
  },
  {
    "text": "to show before that in fact is Arrow functions so let me go to the toolbox and let me grab uh tracker here we go okay",
    "start": "1758840",
    "end": "1768120"
  },
  {
    "text": "let me paste that in here okay here's a little piece of code uh scroll this up",
    "start": "1768120",
    "end": "1773360"
  },
  {
    "text": "so you can see what's going on here's a little class uh that declares a counter uh instance variable and then it has a",
    "start": "1773360",
    "end": "1779760"
  },
  {
    "text": "start method and in the start method we capture the on Mouse move event and have a little Handler that increments our",
    "start": "1779760",
    "end": "1785080"
  },
  {
    "text": "counter and and does a console. log of of the counter so let's let's try and run it so you can actually run the",
    "start": "1785080",
    "end": "1790960"
  },
  {
    "text": "output here in the playground um let's bring up the F12 tools and go to the console window and then we see that hm",
    "start": "1790960",
    "end": "1798440"
  },
  {
    "text": "there's uh there's something wrong with our code we're getting a bunch of nans uh out of this if we go back and look at",
    "start": "1798440",
    "end": "1805080"
  },
  {
    "text": "uh at what's going on here the problem that we have here and if I had actually been typing this code in we would have",
    "start": "1805080",
    "end": "1811279"
  },
  {
    "text": "already seen what what the problem was is but if we hover over this now you can see that this is of type any meaning",
    "start": "1811279",
    "end": "1818200"
  },
  {
    "text": "that we do not know the type of this here and therefore we wouldn't have gotten statement completion to show count and so forth um",
    "start": "1818200",
    "end": "1825720"
  },
  {
    "text": "but the reason it's a problem or the reason this is is of type any is that",
    "start": "1825720",
    "end": "1831000"
  },
  {
    "text": "you never know what this you're going to get in a function call and sometimes you're going to get the wrong this for",
    "start": "1831000",
    "end": "1837039"
  },
  {
    "text": "example in a mouse move event you get the element that the move occurred on you don't get the this of the",
    "start": "1837039",
    "end": "1842080"
  },
  {
    "text": "surrounding context now any everyone's gotten bit by this problem and it's got",
    "start": "1842080",
    "end": "1847519"
  },
  {
    "text": "people have gotten bit enough by it that there's a proposal in ecmascript 6 to support uh what's called Arrow functions",
    "start": "1847519",
    "end": "1853760"
  },
  {
    "text": "or what we in C call Lambda functions so I could instead instead write this code AS e Arrow um and then in a Lambda",
    "start": "1853760",
    "end": "1862799"
  },
  {
    "text": "function this is always of the type of the surrounding context or it's",
    "start": "1862799",
    "end": "1868159"
  },
  {
    "text": "lexically scoped meaning that I get the this of of the outer function and the",
    "start": "1868159",
    "end": "1873519"
  },
  {
    "text": "way we code generate that is we do the the nasty little thing that you normally",
    "start": "1873519",
    "end": "1878720"
  },
  {
    "text": "have to do where you say why that equals this and then that dot inside your function or whatever we can simply code",
    "start": "1878720",
    "end": "1884039"
  },
  {
    "text": "generate that for you in instead here well it's interesting about okay and let's let's actually just sort of run",
    "start": "1884039",
    "end": "1890320"
  },
  {
    "text": "and prove to ourselves that uh that it now works yep we're seeing",
    "start": "1890320",
    "end": "1895760"
  },
  {
    "text": "what we're supposed to see um thing that's interesting too is if in my little mouse move here let's say that I",
    "start": "1895760",
    "end": "1902480"
  },
  {
    "text": "did not refer to the outer this then you'll note that we don't generate that that closure so so we only inject it if",
    "start": "1902480",
    "end": "1909919"
  },
  {
    "text": "you actually do it and then we rewrited to underbar this in instead uh okay",
    "start": "1909919",
    "end": "1918360"
  },
  {
    "text": "now the other thing we support in typescript is modules let's say I wanted to put this class in a",
    "start": "1918360",
    "end": "1924679"
  },
  {
    "text": "module I could write here module open",
    "start": "1924679",
    "end": "1930600"
  },
  {
    "text": "curly and down here close curly oops of course we want to give this module a",
    "start": "1930600",
    "end": "1936480"
  },
  {
    "text": "name we'll call it module utils and you'll see that what we generate for a module again is a function closure where",
    "start": "1936480",
    "end": "1943840"
  },
  {
    "text": "where we then for all of the things that you export out the module if I say export class tracker we then create a",
    "start": "1943840",
    "end": "1952279"
  },
  {
    "text": "property on the module object for each of the exported items in there so this is also a very very typical uh pattern",
    "start": "1952279",
    "end": "1960159"
  },
  {
    "text": "in in JavaScript uh and now of course we get red squigglies here because there is no tracker in the global scope it is now",
    "start": "1960159",
    "end": "1967080"
  },
  {
    "text": "utils Dot and if I say dot you see that there's a Tracker in there and that's that's the one that that that we want",
    "start": "1967080",
    "end": "1973039"
  },
  {
    "text": "right I can actually go deep with these things ac. core. utils and you see we",
    "start": "1973039",
    "end": "1979559"
  },
  {
    "text": "just Nest function closures uh uh uh sort of off the screen there um uh and",
    "start": "1979559",
    "end": "1985360"
  },
  {
    "text": "now I have to refer to it as Acme doc. utils but you'll note that we do track",
    "start": "1985360",
    "end": "1990600"
  },
  {
    "text": "it in the type system so we know that the name of this type is ac. core. utils um in fact we even allow you to import",
    "start": "1990600",
    "end": "1997600"
  },
  {
    "text": "modules so I can say import ACU equals Acme do",
    "start": "1997600",
    "end": "2003360"
  },
  {
    "text": "core. utils for example and then here I can use the shorthand for for that",
    "start": "2003360",
    "end": "2010120"
  },
  {
    "text": "ACU and if you look down here you'll see that what we've generated is just a variable that grabs that module object",
    "start": "2010120",
    "end": "2017440"
  },
  {
    "text": "and then you use that to reference instead these modules we we call internal modules and they're they're",
    "start": "2017440",
    "end": "2023440"
  },
  {
    "text": "very typical like jQuery for example is an example of a module called dollar right that has a whole bunch of stuff in",
    "start": "2023440",
    "end": "2028799"
  },
  {
    "text": "it um uh there's another kind of modules that are that are in common use out",
    "start": "2028799",
    "end": "2034399"
  },
  {
    "text": "there called commonjs modules and no .js uses those and those are basically like",
    "start": "2034399",
    "end": "2041120"
  },
  {
    "text": "source files that get loaded dynamically at runtime and have the ability to State",
    "start": "2041120",
    "end": "2046399"
  },
  {
    "text": "their requirements in terms of other modules and state their exports in terms of an exports object um and we support",
    "start": "2046399",
    "end": "2054158"
  },
  {
    "text": "those so let me actually try to uh close down uh the playground here and then",
    "start": "2054159",
    "end": "2060040"
  },
  {
    "text": "let's go back in visual studio and let's try to open up a uh",
    "start": "2060040",
    "end": "2068839"
  },
  {
    "text": "server. TS here and let me try to write a little twom module node uh server uh",
    "start": "2068839",
    "end": "2075839"
  },
  {
    "text": "application so first thing I'm going to do is I'm going to import uh or",
    "start": "2075839",
    "end": "2082240"
  },
  {
    "text": "reference the static typing of node.js which is in a declaration file called",
    "start": "2082240",
    "end": "2089158"
  },
  {
    "text": "node. D.S and I simply place a a reference in my in my source file um",
    "start": "2089159",
    "end": "2095118"
  },
  {
    "text": "which tells the compiler that when you compile this file also include that other file in in the compilation and now",
    "start": "2095119",
    "end": "2101240"
  },
  {
    "text": "I can say import HTTP equals uh module",
    "start": "2101240",
    "end": "2106800"
  },
  {
    "text": "of HTTP which is one of the modules defined by node and in fact uh if I go",
    "start": "2106800",
    "end": "2112920"
  },
  {
    "text": "to definition on this guy uh you'll see that it jumps me into the adjunct static type information",
    "start": "2112920",
    "end": "2121079"
  },
  {
    "text": "file for HTTP and this is what it is itself powering off of in order to give",
    "start": "2121079",
    "end": "2126599"
  },
  {
    "text": "me statement completion help okay so let me now try to write a function here",
    "start": "2126599",
    "end": "2131720"
  },
  {
    "text": "export function uh simple",
    "start": "2131720",
    "end": "2136640"
  },
  {
    "text": "server uh that takes a port colon number comma message colon",
    "start": "2136920",
    "end": "2145039"
  },
  {
    "text": "string like so uh and in here let's say we want to call HTTP doc create server",
    "start": "2145480",
    "end": "2152079"
  },
  {
    "text": "and you see we get statement completion on node here create server in turn is a thing that takes a call back function",
    "start": "2152079",
    "end": "2158839"
  },
  {
    "text": "that has two parameters request and response so I can give those guys and",
    "start": "2158839",
    "end": "2164880"
  },
  {
    "text": "then in here I can write the body of my uh of my code now I'm going to just paste in some stuff here so so you don't",
    "start": "2164880",
    "end": "2172079"
  },
  {
    "text": "have to watch me uh type it all uh but note one thing that when I type result",
    "start": "2172079",
    "end": "2178520"
  },
  {
    "text": "dot we actually get statement completion on that so we flowed the types from the",
    "start": "2178520",
    "end": "2183720"
  },
  {
    "text": "Declaration of create server in into the call back function because we know what",
    "start": "2183720",
    "end": "2189400"
  },
  {
    "text": "the types of those call back arguments are and so we can flow it all without you having to explicitly State",
    "start": "2189400",
    "end": "2196200"
  },
  {
    "text": "anywhere okay uh let's just go back here and say listen uh of",
    "start": "2196200",
    "end": "2203000"
  },
  {
    "text": "1337 or no sorry a port which was the argument that we got passed okay so",
    "start": "2203000",
    "end": "2208800"
  },
  {
    "text": "that's the first module of our of our little server let me uh create another",
    "start": "2208800",
    "end": "2215160"
  },
  {
    "text": "uh let's see here here uh recent files let me get uh hello this guy here open",
    "start": "2215160",
    "end": "2221599"
  },
  {
    "text": "another uh empty file um and now let's create a module that uses the module that we just wrote so I'm going to say",
    "start": "2221599",
    "end": "2228200"
  },
  {
    "text": "import server oops server equals module",
    "start": "2228200",
    "end": "2235359"
  },
  {
    "text": "of server and now I actually have referenced the module that I just wrote",
    "start": "2235359",
    "end": "2241960"
  },
  {
    "text": "and so if I say server dot now I actually get statement completion on the module I just wrote so I can now call",
    "start": "2241960",
    "end": "2248920"
  },
  {
    "text": "Simple server and it tells me you got to pass me a port number so 1337 comma uh",
    "start": "2248920",
    "end": "2254480"
  },
  {
    "text": "hello go to uh for example and then uh let's just also just say console uh do",
    "start": "2254480",
    "end": "2263839"
  },
  {
    "text": "log of uh listening like",
    "start": "2263839",
    "end": "2269960"
  },
  {
    "text": "so there and let's save that guy all right and now let me jump out and actually use the uh command line",
    "start": "2269960",
    "end": "2276800"
  },
  {
    "text": "compiler so we'll switch to uh node uh or sorry",
    "start": "2276800",
    "end": "2282119"
  },
  {
    "text": "demo uh and node and in here you'll see now that we have our three files the the",
    "start": "2282119",
    "end": "2287640"
  },
  {
    "text": "node declaration file and the two typescript files that I wrote now I can simply tell it to compile hello. TS I",
    "start": "2287640",
    "end": "2294520"
  },
  {
    "text": "don't even have to tell it about server. TS because the compiler will automatically Trace all of my imports",
    "start": "2294520",
    "end": "2300280"
  },
  {
    "text": "and all of the references that I have and find the entire graph of files that need to be compiled and then compile",
    "start": "2300280",
    "end": "2306079"
  },
  {
    "text": "those so so if we look at the output that got generated we now have two files hello.js and hello uh our server.js we",
    "start": "2306079",
    "end": "2313880"
  },
  {
    "text": "can just sort of take a look here's server.js if we oops let's try and take a look at that",
    "start": "2313880",
    "end": "2320760"
  },
  {
    "text": "and you'll see that the code that's in there is the code that I wrote with my import changed into a require and if we",
    "start": "2320760",
    "end": "2327560"
  },
  {
    "text": "type hello.js you'll see again it's pretty much the same code right um let's try to",
    "start": "2327560",
    "end": "2335000"
  },
  {
    "text": "run a node on this server so node hello uh and it's listening and now let's go",
    "start": "2335000",
    "end": "2341480"
  },
  {
    "text": "to uh whoops let's get rid of this guy there and then let's go",
    "start": "2341480",
    "end": "2346760"
  },
  {
    "text": "to Local Host 1337 there and we should see Hello go to",
    "start": "2346760",
    "end": "2354400"
  },
  {
    "text": "there we go yep okay so that's a little bit about classes and modules uh I could just",
    "start": "2354400",
    "end": "2362760"
  },
  {
    "text": "quickly summarize here that that basically you know these are the things that allow us to do scalable app",
    "start": "2362760",
    "end": "2369480"
  },
  {
    "text": "development right and and this is how you you get to write really large applications and have tools that",
    "start": "2369480",
    "end": "2375319"
  },
  {
    "start": "2371000",
    "end": "3127000"
  },
  {
    "text": "understand what what the contracts are between different modules and have them enforced so you find the errors before",
    "start": "2375319",
    "end": "2381200"
  },
  {
    "text": "you run your app instead of whilst you're running it um we're aligned with the emerging standards so as I said",
    "start": "2381200",
    "end": "2387079"
  },
  {
    "text": "earlier classes modules Arrow functions are all things that are proposed for ecmascript 6 that that we're taking",
    "start": "2387079",
    "end": "2393000"
  },
  {
    "text": "inspiration from and we support the two popular module systems that are out there commonjs which is used by node.js",
    "start": "2393000",
    "end": "2399839"
  },
  {
    "text": "and then AMD modules which probably the most common loader there is require.js",
    "start": "2399839",
    "end": "2405520"
  },
  {
    "text": "um uh and that's used for asynchronous module loading in a browser and and and we support both of those okay last thing",
    "start": "2405520",
    "end": "2413119"
  },
  {
    "text": "I wanted to show was just uh a few larger applications because we've been",
    "start": "2413119",
    "end": "2418400"
  },
  {
    "text": "doing a bunch of little stuff here so let's let's try to load up some of our samples um first thing I'm going to open",
    "start": "2418400",
    "end": "2425079"
  },
  {
    "text": "is uh uh let's see demo SL uh image board this",
    "start": "2425079",
    "end": "2431319"
  },
  {
    "text": "is one of the samples that that we include uh and let's just load up app. TS so this is a multimodule",
    "start": "2431319",
    "end": "2438760"
  },
  {
    "text": "node.js application that uses mongodb and and the Express framework um so in",
    "start": "2438760",
    "end": "2445400"
  },
  {
    "text": "here uh you see that we import modules from various places HTTP",
    "start": "2445400",
    "end": "2451119"
  },
  {
    "text": "and URL come from node uh DB is actually a module that we wrote we can navigate",
    "start": "2451119",
    "end": "2456400"
  },
  {
    "text": "in and and look at it and in here you see that that in turn uses mongodb so we can navigate into that and check out the",
    "start": "2456400",
    "end": "2462680"
  },
  {
    "text": "static typing of of mongodb in here you see that we open we create a server",
    "start": "2462680",
    "end": "2468000"
  },
  {
    "text": "create a connection to it um and then just for convenience uh We've defined",
    "start": "2468000",
    "end": "2473040"
  },
  {
    "text": "some interface types that represent the entities that we're storing in the database because they are all of the",
    "start": "2473040",
    "end": "2479040"
  },
  {
    "text": "same type and it's really actually convenient to have statement completion and validation on these entities that we",
    "start": "2479040",
    "end": "2484800"
  },
  {
    "text": "that we're putting the right thing into into the database um and then we've also written some helper functions like get",
    "start": "2484800",
    "end": "2491720"
  },
  {
    "text": "user here that takes an ID and then asynchronously calls you back when it's fetched the user from the database and",
    "start": "2491720",
    "end": "2497400"
  },
  {
    "text": "here you see we use the interface files that we that we just declared now we can use the ID to navigate in this larger",
    "start": "2497400",
    "end": "2504319"
  },
  {
    "text": "app we can for example find all references of get user and you'll see that here's the Declaration of it and",
    "start": "2504319",
    "end": "2509720"
  },
  {
    "text": "then there are two references over in the app uh here's one that that I think is interesting um if you look at this",
    "start": "2509720",
    "end": "2517680"
  },
  {
    "text": "this function here there are zero type annotations in this function yet we know all the secrets about it because app",
    "start": "2517680",
    "end": "2525440"
  },
  {
    "text": "elsewhere is typed as being uh of of type Express server we know that Express",
    "start": "2525440",
    "end": "2531560"
  },
  {
    "text": "server has a get method uh that takes that has a bunch of overloads and one of them is one that takes a function that",
    "start": "2531560",
    "end": "2537599"
  },
  {
    "text": "returns a that that has two arguments request and response and so we can infer what their types are we know what the",
    "start": "2537599",
    "end": "2544280"
  },
  {
    "text": "type of user is the one that we declared over in the database module and so when we're in here if I say request dot you",
    "start": "2544280",
    "end": "2551119"
  },
  {
    "text": "see that I get statement completion if I say user dot you see that I get statement completion so we know all of",
    "start": "2551119",
    "end": "2556839"
  },
  {
    "text": "this stuff without having you to State it over and over uh it's inferred uh",
    "start": "2556839",
    "end": "2562280"
  },
  {
    "text": "from the code um now in the interest of time I'm not going to actually run this",
    "start": "2562280",
    "end": "2567920"
  },
  {
    "text": "one uh I'm going to try and switch and show you uh another little sample",
    "start": "2567920",
    "end": "2573119"
  },
  {
    "text": "uh um which is one called warship uh and let's try to load that guy up",
    "start": "2573119",
    "end": "2579440"
  },
  {
    "text": "here and let's get rid of this dude no and this dude here this is a little app",
    "start": "2579440",
    "end": "2586040"
  },
  {
    "text": "that uh a browser app that uses jQuery and jQuery UI and you you'll see that we",
    "start": "2586040",
    "end": "2591520"
  },
  {
    "text": "referenced the the typing for jQuery and for jQuery UI um and let me show you how",
    "start": "2591520",
    "end": "2598680"
  },
  {
    "text": "this works then because the the pattern between these two libraries is that that jqu UI is a library that builds on top a",
    "start": "2598680",
    "end": "2606319"
  },
  {
    "text": "jQuery it actually sort of monkey patches into the dollar object and adds additional uh properties uh that that",
    "start": "2606319",
    "end": "2614319"
  },
  {
    "text": "are for for for for UI manipulation so if we look at Dollar well first of all",
    "start": "2614319",
    "end": "2619839"
  },
  {
    "text": "you'll see that we now have type information for jQuery so we know the seven overloads of of dollar um we're",
    "start": "2619839",
    "end": "2626160"
  },
  {
    "text": "going to pick the one that takes a string and then we're going to press dot on it and here you see all of the things",
    "start": "2626160",
    "end": "2631839"
  },
  {
    "text": "that that you can say on dollar now this is the stuff that saves you from having the cheat sheet uh next to you or or",
    "start": "2631839",
    "end": "2638960"
  },
  {
    "text": "looking up in some HTML documentation right this is what tools are supposed to do for you um if we pick add class uh",
    "start": "2638960",
    "end": "2646440"
  },
  {
    "text": "then we can actually go to the definition of that guy and you see now we jump into the jQuery declaration file",
    "start": "2646440",
    "end": "2652440"
  },
  {
    "text": "and you see here's domain interface for jQuery and it has an ad class in fact it has two overloads of of AD class um now",
    "start": "2652440",
    "end": "2659839"
  },
  {
    "text": "if we go back let's say we pick one of the ones from jQuery UI like dragable for example",
    "start": "2659839",
    "end": "2666000"
  },
  {
    "text": "example and let's say we go to definition on that guy um you'll note that we jump into a different file that",
    "start": "2666000",
    "end": "2673440"
  },
  {
    "text": "declares the same interface so in typescript interfaces are open-ended and",
    "start": "2673440",
    "end": "2678880"
  },
  {
    "text": "multiple files can contribute to the same interface and that's how we model",
    "start": "2678880",
    "end": "2683920"
  },
  {
    "text": "this notion that one module does something and then another module Builds on that first module by adding things to",
    "start": "2683920",
    "end": "2690400"
  },
  {
    "text": "its types and and so we can model that in the type system and that's just uh",
    "start": "2690400",
    "end": "2695640"
  },
  {
    "text": "super useful okay last thing I wanted to show",
    "start": "2695640",
    "end": "2701119"
  },
  {
    "text": "is a really large project uh the typescript compiler itself uh let me try",
    "start": "2701119",
    "end": "2706839"
  },
  {
    "text": "to load that up here and we'll just pick one of the",
    "start": "2706839",
    "end": "2711960"
  },
  {
    "text": "files out of the compiler the compiler is about 26,000 lines of uh typ of typescript code U here I loaded up the",
    "start": "2711960",
    "end": "2719040"
  },
  {
    "text": "file that contains the abstract syntax tree class definitions um and I and as I",
    "start": "2719040",
    "end": "2724920"
  },
  {
    "text": "said all of this is open source so it's it's stuff that you can just grabb and and and look at um we can navigate in",
    "start": "2724920",
    "end": "2730839"
  },
  {
    "text": "here for example go to the definition of the case statement class which is a class that extends statement and so",
    "start": "2730839",
    "end": "2736319"
  },
  {
    "text": "forth and so I can navigate around the the entire compiler now you saw that at the top of this file I reference a file",
    "start": "2736319",
    "end": "2743720"
  },
  {
    "text": "called typescript TTS if we go to the solution Explorer in in Visual Studio you see that we've actually inferred the",
    "start": "2743720",
    "end": "2750000"
  },
  {
    "text": "entire project that I'm working on here from those references because if we go",
    "start": "2750000",
    "end": "2755920"
  },
  {
    "text": "go to typescript TTS you'll see that that in turn references a whole bunch of other files",
    "start": "2755920",
    "end": "2761960"
  },
  {
    "text": "and through these references the compiler can get the full picture and it almost doesn't matter which file you open we know the context and therefore",
    "start": "2761960",
    "end": "2769920"
  },
  {
    "text": "we can provide you all of the all of the appropriate uh information so in here in",
    "start": "2769920",
    "end": "2775520"
  },
  {
    "text": "this this is the main uh file for the typescript compiler there's a class called typescript compiler not surprising uh typescript compiler",
    "start": "2775520",
    "end": "2782599"
  },
  {
    "text": "instantiates a parser we can go to the definition of the parser the parser in turn instantiates a scanner we can go to",
    "start": "2782599",
    "end": "2788440"
  },
  {
    "text": "the definition of that guy and and so you can sort of navigate around very easily and see how the the compiler is",
    "start": "2788440",
    "end": "2794640"
  },
  {
    "text": "built what I wanted to show though is is um one of the really neat things that",
    "start": "2794640",
    "end": "2800359"
  },
  {
    "text": "you can do once you have static type information and that's things like refactorings and one of the refactorings we support is rename for example let's",
    "start": "2800359",
    "end": "2806760"
  },
  {
    "text": "say that here in the scanner uh I have a um uh a field",
    "start": "2806760",
    "end": "2813880"
  },
  {
    "text": "called called line number that I okay I forgot to rename that back to uh to line",
    "start": "2813880",
    "end": "2819599"
  },
  {
    "text": "from the last demo I gave anyway there's a field called line number if I look at all the places that this guy is",
    "start": "2819599",
    "end": "2825680"
  },
  {
    "text": "referenced if I do go to definition on this guy uh sorry go to find all references on this guy you'll see that",
    "start": "2825680",
    "end": "2832640"
  },
  {
    "text": "there are a bunch of references in the scanner itself and then there are some over in the parser that we can look at",
    "start": "2832640",
    "end": "2838160"
  },
  {
    "text": "uh and here's one for example uh in the parser where we reference uh uh line now",
    "start": "2838160",
    "end": "2844880"
  },
  {
    "text": "up here there's also a property called line okay so let me first go back to the",
    "start": "2844880",
    "end": "2850160"
  },
  {
    "text": "scanner and try to rename here ah refactor rename and call this guy",
    "start": "2850160",
    "end": "2857240"
  },
  {
    "text": "line instead okay now if I go back to the parser you see that it has now",
    "start": "2857240",
    "end": "2862319"
  },
  {
    "text": "renamed line number over here to line okay but now what's really interesting is now I have two things called line one",
    "start": "2862319",
    "end": "2869079"
  },
  {
    "text": "coming from the scanner and then I have one coming from this line call thing that I'm that I'm using in here as a",
    "start": "2869079",
    "end": "2874599"
  },
  {
    "text": "local right let's say that I now had to rename my scanner's line back to line",
    "start": "2874599",
    "end": "2880640"
  },
  {
    "text": "number okay now if this was JavaScript code that would be insanely hard to do",
    "start": "2880640",
    "end": "2885880"
  },
  {
    "text": "right because you have to look at every reference to line in all your source files and decide on the Fly is this the",
    "start": "2885880",
    "end": "2892440"
  },
  {
    "text": "one or is that another one um but this is what Ides do for for you know all day",
    "start": "2892440",
    "end": "2899400"
  },
  {
    "text": "long right they because through static typing we know the difference so let me take this parser file here and actually",
    "start": "2899400",
    "end": "2906160"
  },
  {
    "text": "put it down at the at the bottom and now let's try to actually show both of them",
    "start": "2906160",
    "end": "2911640"
  },
  {
    "text": "here you see the one in my scanner here you see the one that isn't related to it let's go back and say refactor rename",
    "start": "2911640",
    "end": "2918160"
  },
  {
    "text": "and now let's call this guy line number uh instead and you'll see that we",
    "start": "2918160",
    "end": "2923720"
  },
  {
    "text": "renamed that guy but not that guy because we understand the difference between the two so so here we go um this",
    "start": "2923720",
    "end": "2931760"
  },
  {
    "text": "is again one of those things that just make tooling incred incredibly uh",
    "start": "2931760",
    "end": "2936920"
  },
  {
    "text": "valuable when you're writing large applications okay final thing I wanted",
    "start": "2936920",
    "end": "2942119"
  },
  {
    "text": "to show is just uh um compiling the",
    "start": "2942119",
    "end": "2949760"
  },
  {
    "text": "compiler uh sorry there we go so in here is uh the source for all the compiler",
    "start": "2949760",
    "end": "2956160"
  },
  {
    "text": "that we that we just took a look at now I'm going to try to compile the compiler I'm going to tell it to put the output",
    "start": "2956160",
    "end": "2961720"
  },
  {
    "text": "in a file called ts. JS then I'm going to tell it to all Al generate generate",
    "start": "2961720",
    "end": "2967400"
  },
  {
    "text": "declarations and I'm going to compile typescript TTS so this is going to",
    "start": "2967400",
    "end": "2972760"
  },
  {
    "text": "produce two files um first it's going to produce the compiler in a file called ts. JS and that's just going to be plain",
    "start": "2972760",
    "end": "2980720"
  },
  {
    "text": "JavaScript then it's also going to produce a declaration file that represents the external interface of the",
    "start": "2980720",
    "end": "2987280"
  },
  {
    "text": "compiler so if we look at what we what we uh sorry what we got here uh you'll",
    "start": "2987280",
    "end": "2992799"
  },
  {
    "text": "see that there are there we we had two files uh produced uh ts. JS and then ts.",
    "start": "2992799",
    "end": "3001160"
  },
  {
    "text": "d. TS and that's the Declaration file for the compiler and now if I uh load",
    "start": "3001160",
    "end": "3008359"
  },
  {
    "text": "that one up in the development environment here let's see edit uh ts.",
    "start": "3008359",
    "end": "3013559"
  },
  {
    "text": "DTS here we go and then let's just get rid of the part and here you see",
    "start": "3013559",
    "end": "3018960"
  },
  {
    "text": "basically the public abstract of all of the things declared in the compiler that",
    "start": "3018960",
    "end": "3025520"
  },
  {
    "text": "someone using the compiler as a service could use and so now I can in a sense",
    "start": "3025520",
    "end": "3030720"
  },
  {
    "text": "continue up the chain of my modu or development I can take my typescript compiler run it through my minifier do",
    "start": "3030720",
    "end": "3036760"
  },
  {
    "text": "whatever it is that I do my Opus Gator before I ship it and then I can continue on with the Declaration file and that",
    "start": "3036760",
    "end": "3043480"
  },
  {
    "text": "really is what represents my external interface right and so you see how you can manually author declaration files",
    "start": "3043480",
    "end": "3049960"
  },
  {
    "text": "for existing JavaScript but if you're writing in typescript we can make the Declaration files for you a automatically",
    "start": "3049960",
    "end": "3056799"
  },
  {
    "text": "all right um I think that is as much as I have time for wanted to just Briefly",
    "start": "3056799",
    "end": "3062400"
  },
  {
    "text": "summarize what's in what's included in typescript open source compiler written in typescript it itself um tooling uh",
    "start": "3062400",
    "end": "3070799"
  },
  {
    "text": "there's a brows a hosted playground that uses these services and because it's open source you anyone can build plugins",
    "start": "3070799",
    "end": "3077040"
  },
  {
    "text": "to other editing environments we built one for visual studio that that we include um we include static typings of",
    "start": "3077040",
    "end": "3085599"
  },
  {
    "text": "a bunch of the popular libraries out there like node.js and and jQuery and also lots of samples and a former",
    "start": "3085599",
    "end": "3092240"
  },
  {
    "text": "language specification so as I started out saying application",
    "start": "3092240",
    "end": "3099119"
  },
  {
    "text": "scale JavaScript development is hard uh I hope I've showed you here how typescript makes it easier and I'd love",
    "start": "3099119",
    "end": "3105599"
  },
  {
    "text": "for you to go take a look at it yourself at typescript l.org at download to play with it and let us know what you think",
    "start": "3105599",
    "end": "3111960"
  },
  {
    "text": "thank you",
    "start": "3111960",
    "end": "3117359"
  },
  {
    "text": "thanks",
    "start": "3125680",
    "end": "3128680"
  }
]