[
  {
    "text": "[Music]",
    "start": "990",
    "end": "7859"
  },
  {
    "text": "hello I feel exhausted just listening to her I was like the last 10 years of my",
    "start": "16680",
    "end": "22570"
  },
  {
    "text": "life compressed down into 30 seconds yes hello Anne Tricia I am a developer advocate for jetbrains and what that",
    "start": "22570",
    "end": "29109"
  },
  {
    "text": "means is that my what don't mind what my job is is to tramper swayed you to use IntelliJ IDEA but what I really like to",
    "start": "29109",
    "end": "35949"
  },
  {
    "text": "do is figure out what's new in Java what's useful for us as Java developers and how maybe we're going to use that in",
    "start": "35949",
    "end": "41799"
  },
  {
    "text": "the real world if I happen to demonstrate some IntelliJ IDEA features along the way then that's just a benefit",
    "start": "41799",
    "end": "47320"
  },
  {
    "text": "as far as my employer is concerned so what I've done to put this talk together is I've spent the last few years since I",
    "start": "47320",
    "end": "54699"
  },
  {
    "text": "started working for JetBrains just constantly staying up to date with what's coming in Java and what I wanted to do is give this little TL DR version",
    "start": "54699",
    "end": "62080"
  },
  {
    "text": "of that for most developers because it's almost impossible to stay on top of all",
    "start": "62080",
    "end": "67420"
  },
  {
    "text": "the changes um as was mentioned I know there was another talk on a similar",
    "start": "67420",
    "end": "72430"
  },
  {
    "text": "issue Opik I think this yesterday or the day before I think there will be a little bit of overlap but since I think",
    "start": "72430",
    "end": "78970"
  },
  {
    "text": "family covered more on modularity which I don't intend to cover at all then I think we're probably we're probably fine",
    "start": "78970",
    "end": "85410"
  },
  {
    "text": "okay so let's quick let's just jump straight in and upgrading from Java 8",
    "start": "85410",
    "end": "91090"
  },
  {
    "text": "sound scary and I don't want to have to pay for Java this is the premise of where we're coming from here who who is",
    "start": "91090",
    "end": "98140"
  },
  {
    "text": "aware of the fact that maybe we might have to pay for Java from now on oh that's good I'm glad there's some people",
    "start": "98140",
    "end": "103480"
  },
  {
    "text": "who know that for the rest of you who didn't know that we may have to pay for Java from now on if you're not aware of",
    "start": "103480",
    "end": "109270"
  },
  {
    "text": "all the ins and outs which I'm going to try and cover so I'm actually I'm super happy with Java eight thanks I think",
    "start": "109270",
    "end": "114340"
  },
  {
    "text": "I'll just stick with it I did a super scientific poll on Twitter because you",
    "start": "114340",
    "end": "119920"
  },
  {
    "text": "know Twitter is where I do my work these days because I'm a developer advocate and I asked which version of Java people",
    "start": "119920",
    "end": "124960"
  },
  {
    "text": "were using the majority of people were using Java 8 mostly because I couldn't fit Java 6 and",
    "start": "124960",
    "end": "130750"
  },
  {
    "text": "7 on here either a lot of it there's a whole bunch of people want some people using 11 which surprised me and a few",
    "start": "130750",
    "end": "138280"
  },
  {
    "text": "using 9 and 10 a quick poll of the room who is using Java 8 Great Seal the perfect audience",
    "start": "138280",
    "end": "144880"
  },
  {
    "text": "history using Java 9 not sure okay who",
    "start": "144880",
    "end": "150310"
  },
  {
    "text": "sees in Java 10 whose is in Java 11 great that's really good who's he cinch",
    "start": "150310",
    "end": "155800"
  },
  {
    "text": "over 12 I am surprised who's using a version earlier than eight I'm so sorry I don't",
    "start": "155800",
    "end": "164530"
  },
  {
    "text": "think you're the right audience for this talk I'm really sorry you got to get on eight first okay are you Android",
    "start": "164530",
    "end": "170650"
  },
  {
    "text": "developers by any chance you Scotland I'm anyway so the the the spread of",
    "start": "170650",
    "end": "179230"
  },
  {
    "text": "people using the different versions might come as a bit of a surprise to people if they haven't stayed up to date with what's happening with the release",
    "start": "179230",
    "end": "184900"
  },
  {
    "text": "cadence of Java why would there be a whole bunch of people on ate almost no one are nine and ten and a bunch of",
    "start": "184900",
    "end": "190720"
  },
  {
    "text": "people on eleven so let's take a look at the ins and outs of this since Java 8",
    "start": "190720",
    "end": "197020"
  },
  {
    "text": "the whole process the whole political side of releases updates licensing and",
    "start": "197020",
    "end": "202840"
  },
  {
    "text": "support has changed specifically since Java 11 actually which is the important point well ok Java 9 for the release",
    "start": "202840",
    "end": "209560"
  },
  {
    "text": "cadence Java 11 for the for licensing and support so since Java 9 we've been",
    "start": "209560",
    "end": "217269"
  },
  {
    "text": "having releases of Java every six months this is like a massive shock to us in the Java ecosystem because we used to",
    "start": "217269",
    "end": "223150"
  },
  {
    "text": "get them every three years if we were lucky and now we're getting them every six months and me as a Java developer I'm like what hey I can't keep up with",
    "start": "223150",
    "end": "229930"
  },
  {
    "text": "this this is just constantly changing but they are small releases every six months is so these big bang' releases",
    "start": "229930",
    "end": "235799"
  },
  {
    "text": "now obviously oracle don't really in the past they would have supported a version",
    "start": "235799",
    "end": "241630"
  },
  {
    "text": "of java for like three years or so until the next version comes out they don't want to support every version of java",
    "start": "241630",
    "end": "247900"
  },
  {
    "text": "for like for three years because at some point in the near future they're going to be supporting like seven different",
    "start": "247900",
    "end": "253930"
  },
  {
    "text": "versions of Java and if you've ever had to support more than one version of your application you know that that's an",
    "start": "253930",
    "end": "259299"
  },
  {
    "text": "absolute nightmare and they don't want to do that so instead each of these",
    "start": "259299",
    "end": "264520"
  },
  {
    "text": "releases is going to have a lifespan of approximately six months until the next",
    "start": "264520",
    "end": "270220"
  },
  {
    "text": "release except for designated long terms port releases so Java eight is a",
    "start": "270220",
    "end": "275410"
  },
  {
    "text": "long-term support release and will be supported ish for a period of time Java",
    "start": "275410",
    "end": "281890"
  },
  {
    "text": "11 is the current long-term support release so if you're the sort of enterprise that wants to upgrade your",
    "start": "281890",
    "end": "286990"
  },
  {
    "text": "version of Java only every three years you should be looking at upgrading to Java 11 not any of the other versions",
    "start": "286990",
    "end": "293260"
  },
  {
    "text": "and then in another three years time Java 17 probably will be the next long-term support release the current",
    "start": "293260",
    "end": "300010"
  },
  {
    "text": "version of Java is Java 12 so what it means is you could upgrade to Java 12 if",
    "start": "300010",
    "end": "305530"
  },
  {
    "text": "you want but that would be replaced by Java 13 in September so really we're looking at the choice of probably from",
    "start": "305530",
    "end": "312220"
  },
  {
    "text": "Java 8 going to Java 11 so we have two types of releases we have these interim",
    "start": "312220",
    "end": "318640"
  },
  {
    "text": "releases these short-term six-month releases and we have these bigger long-term support releases but it's",
    "start": "318640",
    "end": "324460"
  },
  {
    "text": "really important to understand that this is the Oracle story this is for the Oracle JDK now most of us have been",
    "start": "324460",
    "end": "332530"
  },
  {
    "text": "downloading the Oracle JDK by default for many many years and not really thinking about it because they're the people who are kind of the stewards of",
    "start": "332530",
    "end": "338920"
  },
  {
    "text": "Java and they're sort of de facto people to go to for our jdk we generally went somewhere else",
    "start": "338920",
    "end": "344230"
  },
  {
    "text": "only if we wanted something specific but but there are plenty of other vendors",
    "start": "344230",
    "end": "349270"
  },
  {
    "text": "out there but since Oracle is the default that we generally tend to go towards it's important to understand how",
    "start": "349270",
    "end": "354730"
  },
  {
    "text": "they've changed how they've changed all these things because it's going to impact us as developers particularly",
    "start": "354730",
    "end": "362860"
  },
  {
    "text": "starting with Java 11 Oracle will provide JDK releases under an open-source license and the commercial",
    "start": "362860",
    "end": "369880"
  },
  {
    "text": "license which is going to replace the original old BCL license which used to",
    "start": "369880",
    "end": "375040"
  },
  {
    "text": "combine both free and commercial support so they now have two different licenses",
    "start": "375040",
    "end": "382270"
  },
  {
    "text": "and it replaces the old license that sounds frightening and overly complicated please talk us through this",
    "start": "382270",
    "end": "388240"
  },
  {
    "text": "in case you don't have small children this quote is from the Lego Batman movie which I have seen many many many times",
    "start": "388240",
    "end": "396690"
  },
  {
    "text": "basically the short version of this particular change from the auricle camp is that now there are two different",
    "start": "397890",
    "end": "404140"
  },
  {
    "text": "things to different JDK is that you could download there is the open JDK",
    "start": "404140",
    "end": "410280"
  },
  {
    "text": "Oracle open JDK build and there is Oracle's commercial build knee and since",
    "start": "410280",
    "end": "419020"
  },
  {
    "text": "Java 11 the commercial bills is fundamentally the same as the open JDK",
    "start": "419020",
    "end": "424510"
  },
  {
    "text": "build in the past the open JDK build was missing commercial features like flight",
    "start": "424510",
    "end": "429970"
  },
  {
    "text": "recorder and a bunch of other things Mission Control flight recorder things like that and since Java 11 they are all",
    "start": "429970",
    "end": "435310"
  },
  {
    "text": "available in open JDK so all the features that we expect to see in Oracle's commercial JDK are available in",
    "start": "435310",
    "end": "441640"
  },
  {
    "text": "any build of open JDK so okay then why do we have two different builds",
    "start": "441640",
    "end": "448510"
  },
  {
    "text": "with two different licenses well the licensing is the important thing we have two builds which fundamentally do the",
    "start": "448510",
    "end": "455320"
  },
  {
    "text": "same kind of thing but they are licensed in two different ways Oracle's open JDK is free from a",
    "start": "455320",
    "end": "461890"
  },
  {
    "text": "financial point of view and also has an an open-source license but it will be",
    "start": "461890",
    "end": "468730"
  },
  {
    "text": "replaced every six months so if you want to use the open JDK build you have to",
    "start": "468730",
    "end": "474610"
  },
  {
    "text": "upgrade every six months because there will be no updates beyond the next be on",
    "start": "474610",
    "end": "479680"
  },
  {
    "text": "a six-month life spite life span of that release okay so if you want the free Oracle one you have to upgrade every six",
    "start": "479680",
    "end": "486070"
  },
  {
    "text": "months the Oracle commercial staging JDK is the one that has long-term support so",
    "start": "486070",
    "end": "492340"
  },
  {
    "text": "if you want to get the updates further for the next three years for the",
    "start": "492340",
    "end": "497350"
  },
  {
    "text": "long-term support version you have to pay for the commercial one if you want",
    "start": "497350",
    "end": "502540"
  },
  {
    "text": "to use it in production it's free in development and testing and all those environments refused the in production you have to pay so it is true that under",
    "start": "502540",
    "end": "509470"
  },
  {
    "text": "certain circumstances if you're using the Oracle commercial JDK and put it",
    "start": "509470",
    "end": "514750"
  },
  {
    "text": "into production you will have to pay okay now what I talked about was the",
    "start": "514750",
    "end": "520450"
  },
  {
    "text": "fact that we are the Oracle JDK build is now the same as the open JDK build and",
    "start": "520450",
    "end": "526350"
  },
  {
    "text": "fortunately there are many many builds of open JDK so you don't just have the option of using Oracle's JDK Oracle's",
    "start": "526350",
    "end": "533949"
  },
  {
    "text": "open JDK and replace it every six months there are loads of other vendors many of",
    "start": "533949",
    "end": "539560"
  },
  {
    "text": "whom offer support for longer than six months okay if in doubt a good place to start looking is adopt open JDK which is",
    "start": "539560",
    "end": "547149"
  },
  {
    "text": "a community run effort and this is where you can get builds for a bunch of different versions for a bunch of",
    "start": "547149",
    "end": "553300"
  },
  {
    "text": "different platforms and they provide support so it says we will provide long-term support releases for at least",
    "start": "553300",
    "end": "558790"
  },
  {
    "text": "four years so you can see that Java eight is supported until at least September 2023 Java 11 until September",
    "start": "558790",
    "end": "566139"
  },
  {
    "text": "2022 that makes no sense to me but okay fine and they will be providing releases",
    "start": "566139",
    "end": "572920"
  },
  {
    "text": "for Java 12 and each six monthly and thing too now this sounds super",
    "start": "572920",
    "end": "578680"
  },
  {
    "text": "complicated but the short version is a don't download or Oracle's commercial",
    "start": "578680",
    "end": "584139"
  },
  {
    "text": "JDK and put it in production because you will have to pay and B you have a lot more choice now it's a good thing but it",
    "start": "584139",
    "end": "589899"
  },
  {
    "text": "does mean that someone in your organization needs to do some research on this licensing and on for example how",
    "start": "589899",
    "end": "596139"
  },
  {
    "text": "often you want to upgrade and make an informed decision about which JDK you want to use from which vendor and how",
    "start": "596139",
    "end": "602920"
  },
  {
    "text": "frequently you want to update it okay everyone looks a little bit's good so it",
    "start": "602920",
    "end": "609189"
  },
  {
    "text": "does beg the question why bother that sounds like an awful lot of effort and as I said super happy with Java 8 thank",
    "start": "609189",
    "end": "616209"
  },
  {
    "text": "you I don't really see where I'm gonna have to jump through all of these hoops so let's look first at language features",
    "start": "616209",
    "end": "622180"
  },
  {
    "text": "because I'm a developer and that's what I care about so once again I am so sorry people taking photos of the slides",
    "start": "622180",
    "end": "628509"
  },
  {
    "text": "because I'm just going to basically flick through faster than you can take a photo the slides will be available online or are available already language",
    "start": "628509",
    "end": "635139"
  },
  {
    "text": "features I did once again a super scientific poll by asking Twitter for those of you who are using beyond Java 8",
    "start": "635139",
    "end": "641709"
  },
  {
    "text": "which features do you use the most which features do you like so we got a bunch",
    "start": "641709",
    "end": "646720"
  },
  {
    "text": "of people saying that they like using J shell J shell state shell um and J shell",
    "start": "646720",
    "end": "652480"
  },
  {
    "text": "is the repple who knows what a repla is I fear most of you who's used a rifle",
    "start": "652480",
    "end": "658389"
  },
  {
    "text": "before more or less the same people so let's just do a quick demo of the repple",
    "start": "658389",
    "end": "664790"
  },
  {
    "text": "I'm to me I kind of when I heard about this I was like I don't really understand oh I have to have a thing for the repple",
    "start": "664790",
    "end": "670730"
  },
  {
    "text": "and I don't really understand why I need a wrapper for Java because because it's",
    "start": "670730",
    "end": "677180"
  },
  {
    "text": "Java you have a lot of ceremony a repla seems like something that we wouldn't really use let's try and what should we",
    "start": "677180",
    "end": "684290"
  },
  {
    "text": "eat I don't have my where are my shortcuts right Jay shell I don't have it on this",
    "start": "684290",
    "end": "690590"
  },
  {
    "text": "computer okay so which operating system am i using java 11 home of a living Jay",
    "start": "690590",
    "end": "704210"
  },
  {
    "text": "show oh I hate you so much I really you know",
    "start": "704210",
    "end": "711269"
  },
  {
    "text": "why haven't windows fixed this problem",
    "start": "711269",
    "end": "715589"
  },
  {
    "text": "fine be like that right let's open it inside here instead because IntelliJ",
    "start": "718860",
    "end": "724329"
  },
  {
    "text": "IDEA let's see if I can get it to work inside here first oh oh you so much",
    "start": "724329",
    "end": "731410"
  },
  {
    "text": "I practice every other part of this talk except for this bit because this bit is usually really easy all right yes easy",
    "start": "731410",
    "end": "737799"
  },
  {
    "text": "easy that's what we want let's go here then fine CD where are we go into bin",
    "start": "737799",
    "end": "746040"
  },
  {
    "text": "see what's there thank you see what's wrong with you I've",
    "start": "746040",
    "end": "751779"
  },
  {
    "text": "been using the Mac all week that's my excuse and I can't remember how to windows rights so I'm in the repple as",
    "start": "751779",
    "end": "757209"
  },
  {
    "text": "you can see I'm running this outside of my IDE so I can run this independently of whichever version my of Java my",
    "start": "757209",
    "end": "763569"
  },
  {
    "text": "application is running on so I can play with a Red Bull independent of everything else which is a good way to",
    "start": "763569",
    "end": "768579"
  },
  {
    "text": "get started with new features of Java I'm right so what can I do I can say system dot look I get tab completion",
    "start": "768579",
    "end": "776230"
  },
  {
    "text": "inside the repple print line and I'm used to using an IDE so this is what I want to see hello yeah note that we",
    "start": "776230",
    "end": "786879"
  },
  {
    "text": "don't have to have a class file we don't have to say public static void main we don't have to do any of this ceremony also note no semicolon oh my goodness",
    "start": "786879",
    "end": "795040"
  },
  {
    "text": "Java has come so far amazing it's almost JavaScript how dare you so yes so we can",
    "start": "795040",
    "end": "805389"
  },
  {
    "text": "quickly sketch things out we can do things like I can obviously I can define a variable int thing equals 3 great I've",
    "start": "805389",
    "end": "813189"
  },
  {
    "text": "got something called thing I can play around with new features like bar which we'll look at in a minute bar something",
    "start": "813189",
    "end": "819160"
  },
  {
    "text": "it calls 5 ok I can create anonymous",
    "start": "819160",
    "end": "824679"
  },
  {
    "text": "variables so I can just say right there's a number there and it's just going to assign it to $2 for I can also",
    "start": "824679",
    "end": "831579"
  },
  {
    "text": "have a look at all my ver variables variables variables by typing VARs and it will list all of them there I can",
    "start": "831579",
    "end": "838059"
  },
  {
    "text": "define a method let's see if I can create let's do void print something",
    "start": "838059",
    "end": "846710"
  },
  {
    "text": "so I can create myself a method and this one specifically tells me right you've done this it's fine and but I can't use",
    "start": "859080",
    "end": "866020"
  },
  {
    "text": "it because we've got a forward reference so until you define some vowel I can't I",
    "start": "866020",
    "end": "871089"
  },
  {
    "text": "can't use it but I could try I could say do you have print something and it goes yes but you can't do that yet so then",
    "start": "871089",
    "end": "877480"
  },
  {
    "text": "I'm gonna say some vow equals thing did",
    "start": "877480",
    "end": "884020"
  },
  {
    "text": "I say it was a say we're talking us but I'll okay so you can see I can still",
    "start": "884020",
    "end": "891130"
  },
  {
    "text": "incrementally build up some stuff to play with I've been using this a lot to figure out what different collection types are available what I can do with",
    "start": "891130",
    "end": "897370"
  },
  {
    "text": "particular types of collections since some of that changed in in Java 9 and 10 what else can I do",
    "start": "897370",
    "end": "903040"
  },
  {
    "text": "so I've got a bunch of commands like I can run methods I can run I'm gonna say help yes help and I can also I can save",
    "start": "903040",
    "end": "912250"
  },
  {
    "text": "my history into a file I can also load a file and run a file so I can kind of use it for scripting if I want to I'm not",
    "start": "912250",
    "end": "918580"
  },
  {
    "text": "sure driver would be my first language of choice for scripting but it is possible to do that now with with J",
    "start": "918580",
    "end": "923709"
  },
  {
    "text": "shell for example and I've mostly been using it to play around with new language features I've also been using",
    "start": "923709",
    "end": "929050"
  },
  {
    "text": "it to demonstrate features and when I'm trying to show how to use things outside",
    "start": "929050",
    "end": "935290"
  },
  {
    "text": "the IDE I mean that's not great because I'm supposed to be telling people how to use the IDE but it's fine",
    "start": "935290",
    "end": "941050"
  },
  {
    "text": "speaking of the IDE we do have a tool inside here which is the J shell console",
    "start": "941050",
    "end": "946540"
  },
  {
    "text": "and you could do something similar inside IntelliJ IDEA I better yeah let me get type of completion and we can say",
    "start": "946540",
    "end": "952600"
  },
  {
    "text": "fine and I can just do all the stuff I expect to do inside my IDE something it",
    "start": "952600",
    "end": "960520"
  },
  {
    "text": "works a bit like the groovy console if you've ever used the groovy console except the control-enter didn't work oh",
    "start": "960520",
    "end": "966760"
  },
  {
    "text": "yes it doesn't fine so yes so you can do it's our IDE as well and you can use you can then pick your different JRE pick",
    "start": "966760",
    "end": "974050"
  },
  {
    "text": "the different class paths you want to use and refer to some of your own code and run it so that's quite cute a lot of",
    "start": "974050",
    "end": "980410"
  },
  {
    "text": "people using J shell and quite pleased with with what it gives them in terms of being able to play around with some of",
    "start": "980410",
    "end": "987550"
  },
  {
    "text": "these new language features is it going to give me value or maybe even testing certain stuff without having to go through the",
    "start": "987550",
    "end": "993200"
  },
  {
    "text": "whole ceremony of creating a test or a new class or something another feature",
    "start": "993200",
    "end": "999050"
  },
  {
    "text": "people are very excited about is these three little letters bar so everyone likes far as things far as great amazing",
    "start": "999050",
    "end": "1005920"
  },
  {
    "text": "love far but I also had to put this in here because you know Laura gets me something like Kotlin so I'm like a",
    "start": "1005920",
    "end": "1012190"
  },
  {
    "text": "hardcore Java person I been doing Java for ages but I do work for jetbrains we did invent Kotlin so every now and again",
    "start": "1012190",
    "end": "1017260"
  },
  {
    "text": "I do have to say Kotlin is quite good you should try it out I'm more of a Java person and so let's have a look at far I",
    "start": "1017260",
    "end": "1024900"
  },
  {
    "text": "specifically I said I believe the other talk talked a little bit about far I kind of want to look at when you might",
    "start": "1024900",
    "end": "1031329"
  },
  {
    "text": "not use far for well when you may or may not use it server is local variable type",
    "start": "1031329",
    "end": "1038650"
  },
  {
    "text": "inference so it's local variable so you can't use it on fields I can't turn this into a var and that's not going to work",
    "start": "1038650",
    "end": "1045730"
  },
  {
    "text": "and you can't use it on parameters because on a parameter you're not going",
    "start": "1045730",
    "end": "1051040"
  },
  {
    "text": "to know what type that is okay so it's only for local variables let's undo those and I've got IntelliJ to highlight",
    "start": "1051040",
    "end": "1059590"
  },
  {
    "text": "places where I could use it if I want to so I can use it I can use it on local variables specifically inside methods",
    "start": "1059590",
    "end": "1066640"
  },
  {
    "text": "I'm note those of you who've used other languages there is only var there is not",
    "start": "1066640",
    "end": "1071650"
  },
  {
    "text": "var and Val there is var and final var you can ask me at the end if you want to why that is",
    "start": "1071650",
    "end": "1077830"
  },
  {
    "text": "but that's the compromise that has been taken to anger the least people possible and so yes this is where we use it and",
    "start": "1077830",
    "end": "1085540"
  },
  {
    "text": "note that var is not dynamic typing var is it's syntactic sugar to hide a whole",
    "start": "1085540",
    "end": "1092620"
  },
  {
    "text": "bunch of declaration of type but it still has type so if I hover over this it tells me that it's still a list of",
    "start": "1092620",
    "end": "1099460"
  },
  {
    "text": "type of type e in this case but list of strings and I can use quick definition I think and it tells me look it's a final",
    "start": "1099460",
    "end": "1106780"
  },
  {
    "text": "list of people so it's not it's not the same as like death or something I'm not sticking into an object it's still typed",
    "start": "1106780",
    "end": "1112570"
  },
  {
    "text": "I just didn't have to physically type out that type which means that you can't necessarily use it in all places for",
    "start": "1112570",
    "end": "1119830"
  },
  {
    "text": "example I don't have an example and if you have Oh down here here if I'm",
    "start": "1119830",
    "end": "1128980"
  },
  {
    "text": "declaring a new ArrayList and I don't put the type inside there then I can't just turn that straight into a var",
    "start": "1128980",
    "end": "1135910"
  },
  {
    "text": "because I've just actually changed the type this is now an ArrayList of objects not our ArrayList of strings because I",
    "start": "1135910",
    "end": "1142030"
  },
  {
    "text": "have to put the type information somewhere I believe IntelliJ will actually do that conversion for me",
    "start": "1142030",
    "end": "1148680"
  },
  {
    "text": "so yes just move the string over here so that you're still going to get the same type but you have to declare that type",
    "start": "1148680",
    "end": "1153880"
  },
  {
    "text": "some way you can't just remove all the type information the compilers smart but it's not that smart so you can use it",
    "start": "1153880",
    "end": "1161050"
  },
  {
    "text": "there so I want to talk a little bit about some of the best practices there's a there's a document which covers",
    "start": "1161050",
    "end": "1166540"
  },
  {
    "text": "there's best practices here the point of our is to try and improve the readability of your code it is not to",
    "start": "1166540",
    "end": "1171880"
  },
  {
    "text": "try and make it worse so if for example you already had and I know that occasionally we do this a variable name",
    "start": "1171880",
    "end": "1177730"
  },
  {
    "text": "which isn't super useful and a method name which isn't super useful and then we put that as well we when we're",
    "start": "1177730",
    "end": "1183460"
  },
  {
    "text": "reading this code we have no idea what this is we have no idea what the types are on me obviously the IDE will tell us",
    "start": "1183460",
    "end": "1189580"
  },
  {
    "text": "what we can do with it if we want to but let's say we're trying to debug this this code in production or something",
    "start": "1189580",
    "end": "1195940"
  },
  {
    "text": "when we're reading the code we won't know what it's supposed to be so sure you can you can make it into a var if",
    "start": "1195940",
    "end": "1201790"
  },
  {
    "text": "you want to but it's it's not aiding the readability of the code at this point you might want to use for when you've",
    "start": "1201790",
    "end": "1208600"
  },
  {
    "text": "got enough information over here on the right-hand side about what it is so here we might want to use far because look",
    "start": "1208600",
    "end": "1214690"
  },
  {
    "text": "we've already said new bufferedreader so we don't we don't need to say that's a bufferedreader that's fine but if like",
    "start": "1214690",
    "end": "1220450"
  },
  {
    "text": "it again if you don't have the right information over here and you turn this into var then then it becomes completely",
    "start": "1220450",
    "end": "1227350"
  },
  {
    "text": "meaningless it's also useful for for if you've got long stream operations and",
    "start": "1227350",
    "end": "1233410"
  },
  {
    "text": "you want to break them up to just kind of have an intermediate step to maybe give it a variable name to to make it",
    "start": "1233410",
    "end": "1239560"
  },
  {
    "text": "sensible let's see let's do this let's turn this into very variable it's called entries so some of these",
    "start": "1239560",
    "end": "1246160"
  },
  {
    "text": "intermediate stream operations have some very interesting types but really you don't really care because the next thing",
    "start": "1246160",
    "end": "1252100"
  },
  {
    "text": "you're going to do is just call stream on it anyway so this is a good place to use for example and another place is when",
    "start": "1252100",
    "end": "1259630"
  },
  {
    "text": "you're iterating over stuff this is genuine code I found from somewhere where we have some really interesting generics but I don't really care because",
    "start": "1259630",
    "end": "1266290"
  },
  {
    "text": "what I'm doing is I've got an iterator I'm iterating over it and then doing something else so I could actually just",
    "start": "1266290",
    "end": "1271780"
  },
  {
    "text": "say I don't really care about any of that that could just be a var and then this could be far as well I don't really",
    "start": "1271780",
    "end": "1278080"
  },
  {
    "text": "care about that and then my code becomes much easier to read because in this case the types don't really matter I know",
    "start": "1278080",
    "end": "1283270"
  },
  {
    "text": "that I'm iterating over something I have some sort of entry and then I do something with it so who cares what the types are so yes so var is not a magic",
    "start": "1283270",
    "end": "1293020"
  },
  {
    "text": "catch-all to make everything better but it can help reduce the the boilerplate in our code it can aid readability",
    "start": "1293020",
    "end": "1298630"
  },
  {
    "text": "but don't apply it everywhere because then your code base might end up being a little bit too terse and that's not",
    "start": "1298630",
    "end": "1303940"
  },
  {
    "text": "really that's not really the java way my favorite feature from my recent version",
    "start": "1303940",
    "end": "1309160"
  },
  {
    "text": "of java it came in in java 9 so obviously you have access to it from java 10 11 12 and 13 as well is",
    "start": "1309160",
    "end": "1315000"
  },
  {
    "text": "convenience factory methods for collections and a bunch of people really love this it's all good everyone likes",
    "start": "1315000",
    "end": "1320860"
  },
  {
    "text": "convenience factoring methods and I'll show you what this means this is something really simple",
    "start": "1320860",
    "end": "1326140"
  },
  {
    "text": "and but it's something that makes life a",
    "start": "1326140",
    "end": "1331210"
  },
  {
    "text": "lot easier let's look at Java 9 in the",
    "start": "1331210",
    "end": "1338230"
  },
  {
    "text": "olden days or in your case now and you have to create a list like this arrays door as list if you've got a set of",
    "start": "1338230",
    "end": "1344710"
  },
  {
    "text": "values you want to poke into a list and that's kind of fine you can't add values to that list it's alright it's sort of",
    "start": "1344710",
    "end": "1350710"
  },
  {
    "text": "immutable but it's not immutable at all because you can change those values inside that list if you want an",
    "start": "1350710",
    "end": "1355810"
  },
  {
    "text": "immutable list with us prepared set of values you need to put it inside an unmodifiable list which many of us don't",
    "start": "1355810",
    "end": "1361720"
  },
  {
    "text": "because honestly who needs all its boiler play around there particularly if it's test code or something like that in",
    "start": "1361720",
    "end": "1366730"
  },
  {
    "text": "them in Java 9 you just turn that into a list of and then you get an immutable",
    "start": "1366730",
    "end": "1371830"
  },
  {
    "text": "list so that's nice it's sure to syntax slightly shorter than saying arrays door as list anyway and it's immutable more",
    "start": "1371830",
    "end": "1378910"
  },
  {
    "text": "interestingly it applies to set and set was a bit difficult because to create a set you have to create a list and then",
    "start": "1378910",
    "end": "1384490"
  },
  {
    "text": "create a set and then put it inside an unmodifiable set because obviously previously the language developers of Java hated us and thought",
    "start": "1384490",
    "end": "1391360"
  },
  {
    "text": "that we never wanted to create sets ever but now you can just do set off",
    "start": "1391360",
    "end": "1397240"
  },
  {
    "text": "that's much better so now there's no excuse for using the wrong datatype",
    "start": "1397240",
    "end": "1402310"
  },
  {
    "text": "inside you're inside your code it's very easy to use lists but they're not always",
    "start": "1402310",
    "end": "1407710"
  },
  {
    "text": "the right choice if you have a map and you want to initialize it with a set of values it was always a little bit hacky",
    "start": "1407710",
    "end": "1413500"
  },
  {
    "text": "I felt in Java where you have to use you perhaps use a static initializer or something and now you can use if you",
    "start": "1413500",
    "end": "1419980"
  },
  {
    "text": "want to you can use map of entries it's it's not the prettiest but it's a little",
    "start": "1419980",
    "end": "1426310"
  },
  {
    "text": "bit better a static import that so I'm going to say map draw entries and create entries of key value pairs if you have a",
    "start": "1426310",
    "end": "1434500"
  },
  {
    "text": "much smaller map with a smaller set of values there's a convenience method which will make your life a lot easier let's get rid of these you've got less",
    "start": "1434500",
    "end": "1441580"
  },
  {
    "text": "fewer than ten you can say mapped off and do key value key value key value and",
    "start": "1441580",
    "end": "1447760"
  },
  {
    "text": "that's kind of fine it can be a little bit risky potentially if your key and value have the same type because you have to make sure you've matched them up",
    "start": "1447760",
    "end": "1453880"
  },
  {
    "text": "properly and you don't accidentally put the key in the value or whatever but it's it's a good convenience method this",
    "start": "1453880",
    "end": "1459670"
  },
  {
    "text": "would have been really helpful when I worked at MongoDB because I did a lot of putting data into maps to put into a document database this is a much easier",
    "start": "1459670",
    "end": "1465940"
  },
  {
    "text": "way of working",
    "start": "1465940",
    "end": "1468779"
  },
  {
    "text": "and that's that's what he one of my favorite features from a recent version of Java because it just it's just a lot",
    "start": "1473920",
    "end": "1479920"
  },
  {
    "text": "easier to to work with collections and that's what we spend a lot of time doing since Java 10 you can actually collect",
    "start": "1479920",
    "end": "1486340"
  },
  {
    "text": "two unmodifiable collections as well so instead of just doing collectors to list you can say collectors to unmodifiable",
    "start": "1486340",
    "end": "1492880"
  },
  {
    "text": "list and IntelliJ will also scan your code and go oh these places where you're using two lists you can use two",
    "start": "1492880",
    "end": "1499120"
  },
  {
    "text": "unmodifiable lists instead so you can start using more safely you can use the unmodifiable lists and not accidentally",
    "start": "1499120",
    "end": "1505120"
  },
  {
    "text": "have mutation in your code if you don't want it there there are some new methods",
    "start": "1505120",
    "end": "1510220"
  },
  {
    "text": "on the stream API oh these came in in Java 9 and take while and drop while it's kind of useful thing that was",
    "start": "1510220",
    "end": "1516190"
  },
  {
    "text": "missing from the Java 8 streams where you can say like do some operation on this stream until some criteria is met",
    "start": "1516190",
    "end": "1522070"
  },
  {
    "text": "and then stop there was no way of doing that before or the opposite which is dropped while so ignore the stream until",
    "start": "1522070",
    "end": "1528640"
  },
  {
    "text": "some criteria is met and then start processing the stream it's it's super useful for those specific cases where",
    "start": "1528640",
    "end": "1534550"
  },
  {
    "text": "you need that kind of thing I found it useful for when I am perhaps processing a file and then I've reached the limits",
    "start": "1534550",
    "end": "1541000"
  },
  {
    "text": "of where I want to process that file whatever that is maybe some external dependency then I can just cut off and",
    "start": "1541000",
    "end": "1546250"
  },
  {
    "text": "just say write no more let's just finish the stream there Java 11 we got predicates not which seems kind of there",
    "start": "1546250",
    "end": "1553780"
  },
  {
    "text": "was a bit of argument over this like what what do we need predicates not for we have an exclamation mark for that there is absolutely zero need for",
    "start": "1553780",
    "end": "1560050"
  },
  {
    "text": "predicates not so I went away and decided to look at a code example which",
    "start": "1560050",
    "end": "1565690"
  },
  {
    "text": "would work for this Java 11 oh well",
    "start": "1565690",
    "end": "1573760"
  },
  {
    "text": "that's that's a new example so what you do not now for example is you say if",
    "start": "1573760",
    "end": "1579910"
  },
  {
    "text": "you've got a filter and you say it does not meet some criteria obviously you can",
    "start": "1579910",
    "end": "1585820"
  },
  {
    "text": "put your exclamation mark in there and use a lambda expression but some people particularly would like to work with a",
    "start": "1585820",
    "end": "1591070"
  },
  {
    "text": "method references for whatever reason and you can't turn this into something which uses a method reference I mean",
    "start": "1591070",
    "end": "1596380"
  },
  {
    "text": "obviously you could actually just extract that to a method and say and then turn it into a method reference but",
    "start": "1596380",
    "end": "1601600"
  },
  {
    "text": "that's a bit silly well it's not silly slightly overkill so instead you can use",
    "start": "1601600",
    "end": "1606760"
  },
  {
    "text": "predicates not and you could say let's start import that so then you can use your method",
    "start": "1606760",
    "end": "1612670"
  },
  {
    "text": "reference if you want to again this is just a case of providing some extra tools for developers who who want to",
    "start": "1612670",
    "end": "1618670"
  },
  {
    "text": "improve the readability of their code and it's based on what you consider to be readable or not so if you don't like",
    "start": "1618670",
    "end": "1624610"
  },
  {
    "text": "it don't use it but for some some people who really want to do this they could not do it before and now they can and",
    "start": "1624610",
    "end": "1639190"
  },
  {
    "text": "then over the course of nine ten and eleven we've been getting additional",
    "start": "1639190",
    "end": "1644620"
  },
  {
    "text": "methods on optional which I personally have found really helpful I really liked the idea of optional in Java eight",
    "start": "1644620",
    "end": "1650620"
  },
  {
    "text": "I like the idea especially cuz I've worked on code bases where you have to do null checks everywhere and I'm like is this really valid that it could be",
    "start": "1650620",
    "end": "1656860"
  },
  {
    "text": "null or not I just don't really know I liked the idea of having a type which would say this might be null or it might",
    "start": "1656860",
    "end": "1663010"
  },
  {
    "text": "not be and then force you to do that check what I did find though with Java eight is that the checks the the way of",
    "start": "1663010",
    "end": "1668710"
  },
  {
    "text": "working with it in a functional way with lambdas etc was a little bit limited if you could work with the simple if",
    "start": "1668710",
    "end": "1676210"
  },
  {
    "text": "present syntax then that's fine but if you have more complicated cases then you",
    "start": "1676210",
    "end": "1681370"
  },
  {
    "text": "ended up still having these if statements anyway and you're like well I could have used a null and I would have had far fewer code but in Java in the",
    "start": "1681370",
    "end": "1689680"
  },
  {
    "text": "latest versions of Java this has become a lot simpler let's have a look at optional",
    "start": "1689680",
    "end": "1695310"
  },
  {
    "text": "so in Java 8 you might get an optional and then you might have a case where you want to do and if or an else and you",
    "start": "1695310",
    "end": "1702730"
  },
  {
    "text": "can't you have to do that is present and do a get or you're doing else in Java 8 so now I was like this doesn't seem",
    "start": "1702730",
    "end": "1708940"
  },
  {
    "text": "really the optional way of doing stuff in Java in later versions of Java you",
    "start": "1708940",
    "end": "1714820"
  },
  {
    "text": "can use if present or else and then you pass in two lambda expressions so now it's a much more functional way of doing",
    "start": "1714820",
    "end": "1720550"
  },
  {
    "text": "stuff is it's fewer lines of code too it just looks a lot less ugly than the if statement you can use all which is a way",
    "start": "1720550",
    "end": "1727870"
  },
  {
    "text": "of returning you can say return this optional or return another optional so you don't have to unwrap the optionals",
    "start": "1727870",
    "end": "1734350"
  },
  {
    "text": "and do stuff with them you can just actually work with two optionals in rappers you can use optional stream to",
    "start": "1734350",
    "end": "1743470"
  },
  {
    "text": "simplify methods inside inside stream operations so I've just this kind of",
    "start": "1743470",
    "end": "1750190"
  },
  {
    "text": "limited use cases for this but when you do stumble across this use case it does make things a lot easier you don't have",
    "start": "1750190",
    "end": "1755890"
  },
  {
    "text": "to keep unpacking the optionals it's just the stream method will do that for you and you've got or else throws so you",
    "start": "1755890",
    "end": "1763750"
  },
  {
    "text": "can say this if you again this is useful if you're refactoring a code base which does null checks towards something which",
    "start": "1763750",
    "end": "1769870"
  },
  {
    "text": "uses optionals sometimes you might want just a simple or else throw so if it's",
    "start": "1769870",
    "end": "1774880"
  },
  {
    "text": "null just throw an exception I want to see it I want my tests to catch it and then I might do some refactoring around",
    "start": "1774880",
    "end": "1780220"
  },
  {
    "text": "that and that would just literally do what you already were checking probably like check for the null and throw throw",
    "start": "1780220",
    "end": "1787090"
  },
  {
    "text": "the no such value if it's if it's not and in java 11 they also added this is",
    "start": "1787090",
    "end": "1793540"
  },
  {
    "text": "another one of those like silly not silly arguments there's arguments that people get very what tough about that seem over something tiny in java 11 they",
    "start": "1793540",
    "end": "1802420"
  },
  {
    "text": "added is empty as the opposite of is present there's a lot of argument of if",
    "start": "1802420",
    "end": "1807970"
  },
  {
    "text": "you've got is present i don't need is empty i can just put a not in front of it but again it's about readability",
    "start": "1807970",
    "end": "1813660"
  },
  {
    "text": "because humans are not very good at pausing nots so if you actually just say if you're looking for the empty case",
    "start": "1813660",
    "end": "1820390"
  },
  {
    "text": "it's better to read if is empty then if is not present the human brain doesn't",
    "start": "1820390",
    "end": "1826120"
  },
  {
    "text": "parse that very well so um and IntelliJ IDEA will allow you to play around with this too so I can actually flip this so",
    "start": "1826120",
    "end": "1832900"
  },
  {
    "text": "I can invert is present so is empty and it will flip everything around and I can go oh it's easier to read or it's not",
    "start": "1832900",
    "end": "1839130"
  },
  {
    "text": "and I can also do let's see I can do not and that will that will invert it to um",
    "start": "1839130",
    "end": "1845800"
  },
  {
    "text": "and then in this case I can also it will also suggest if I if I was using code",
    "start": "1845800",
    "end": "1852100"
  },
  {
    "text": "which says not is present it will automatically say why don't you just say is empty instead so it's a bit more",
    "start": "1852100",
    "end": "1858100"
  },
  {
    "text": "potentially a bit more readable again personal choice 14 minutes left okay",
    "start": "1858100",
    "end": "1863410"
  },
  {
    "text": "mmm-hmm we're nearly there with the features we'll just have to skim through all the summary stuff fine optional",
    "start": "1863410",
    "end": "1870509"
  },
  {
    "text": "and Java 11 has a built-in HTTP client which supports let's see what does it",
    "start": "1870509",
    "end": "1875969"
  },
  {
    "text": "say it proper non-blocking reactive stream support HTTP 1.1 and 2 it's got",
    "start": "1875969",
    "end": "1881519"
  },
  {
    "text": "everything we need so this is very useful for people who are using HTTP HTTP clients especially for things like",
    "start": "1881519",
    "end": "1886769"
  },
  {
    "text": "testing and stuff like that it's all built into the language we don't have to use an external dependency I don't have",
    "start": "1886769",
    "end": "1892139"
  },
  {
    "text": "a demo of that so so there's plenty of documentation on that and I've linked to it from the page which I'll have a link",
    "start": "1892139",
    "end": "1898349"
  },
  {
    "text": "at the end of the talk non-blocking reactive streams um multi",
    "start": "1898349",
    "end": "1904139"
  },
  {
    "text": "release Java files in Java 9 since Java 9 library developers can package up a",
    "start": "1904139",
    "end": "1909690"
  },
  {
    "text": "single jar which will be aware of whether it's running on Java 9 10 11 or",
    "start": "1909690",
    "end": "1916229"
  },
  {
    "text": "earlier than nine and that will allow you to that will allow that jar file to make use of more recent features if",
    "start": "1916229",
    "end": "1923609"
  },
  {
    "text": "they're available or it will default to something earlier if it's not available super useful for like for language I",
    "start": "1923609",
    "end": "1930809"
  },
  {
    "text": "breed developers and super useful for hours because if we're using a library like J unit 5 we just download the one",
    "start": "1930809",
    "end": "1936899"
  },
  {
    "text": "jar file and just know it's going to do the right thing regardless I don't have to download the Java 8 version versus",
    "start": "1936899",
    "end": "1942059"
  },
  {
    "text": "the Java 10 version or whatever and of course Java 9 had jigsaw which everyone",
    "start": "1942059",
    "end": "1947429"
  },
  {
    "text": "was talking about it's going to break the world I'm supposed to call it jigsaw anymore supposed to call it the Java module system I'm and actually people",
    "start": "1947429",
    "end": "1953279"
  },
  {
    "text": "are finding it quite useful so again and modularity can be useful for library developers and for some enterprises who",
    "start": "1953279",
    "end": "1960509"
  },
  {
    "text": "might want to use it as a sort of excuse to either refactor them set their code towards a more modular system or to",
    "start": "1960509",
    "end": "1967849"
  },
  {
    "text": "formalize a modular system they already had I don't want to go on too much about modularity because it was like the",
    "start": "1967849",
    "end": "1974249"
  },
  {
    "text": "big-ticket item of Java 9 and I'm really not certain that a lot of people are going to they're certainly not gonna",
    "start": "1974249",
    "end": "1979559"
  },
  {
    "text": "back port their enterprise applications to modularity I really don't think that there's a massive demand for that and",
    "start": "1979559",
    "end": "1984959"
  },
  {
    "text": "you don't have to you can run on a later version of Java without using jigsaw modularity any of that stuff it's fine",
    "start": "1984959",
    "end": "1991259"
  },
  {
    "text": "you can just ignore it if you want to but jigsaw did allow us to have these",
    "start": "1991259",
    "end": "1996479"
  },
  {
    "text": "interesting new tools like J link so J link allows you to pick just the modules in Java the language that you use",
    "start": "1996479",
    "end": "2003590"
  },
  {
    "text": "and bundle them together with your application and deploy it so your deployables an attention come a lot",
    "start": "2003590",
    "end": "2009499"
  },
  {
    "text": "smaller don't have to deploy all over the jva all of the jdk and my application and everything I can just",
    "start": "2009499",
    "end": "2015080"
  },
  {
    "text": "pick the bits of the jdk that I want bundle it all together in my single and my single zip file or jar file and put",
    "start": "2015080",
    "end": "2021590"
  },
  {
    "text": "it into the cloud for example and I do let's see I've got a really quick demo of this I said so long talk about",
    "start": "2021590",
    "end": "2028759"
  },
  {
    "text": "features I was got so excited so anyways so it's a quick demo that you can't",
    "start": "2028759",
    "end": "2034100"
  },
  {
    "text": "necessarily see because it's all here but I'm gonna call J link you give it a magic incantation of module parts and",
    "start": "2034100",
    "end": "2039110"
  },
  {
    "text": "stuff this is a multi module project and I'm going to package up everything into",
    "start": "2039110",
    "end": "2044509"
  },
  {
    "text": "a single directory called three image so I'll do that go into three image let's",
    "start": "2044509",
    "end": "2059480"
  },
  {
    "text": "see what's there so I've got a bin and a Lib let's see what's in bin and bin has",
    "start": "2059480",
    "end": "2065270"
  },
  {
    "text": "got Java the the Java executables that I need what else have I got",
    "start": "2065270",
    "end": "2071329"
  },
  {
    "text": "I also have J link",
    "start": "2071329",
    "end": "2077800"
  },
  {
    "text": "[Music]",
    "start": "2079620",
    "end": "2082949"
  },
  {
    "text": "note that I'm using the Java version that's inside my image I'm not using an",
    "start": "2088450",
    "end": "2093460"
  },
  {
    "text": "external thing on Java home I'm using this this packaged up version of Java I can say list modules and it will show me",
    "start": "2093460",
    "end": "2100480"
  },
  {
    "text": "that doesn't work huh all right normally that works really well it's",
    "start": "2100480",
    "end": "2106540"
  },
  {
    "text": "module list of modules well that's a great error isn't it hmm I might feed",
    "start": "2106540",
    "end": "2112900"
  },
  {
    "text": "that back to the team okay so then the modules it uses are so now the JDK is modularized there's there's a whole",
    "start": "2112900",
    "end": "2118750"
  },
  {
    "text": "bunch of different modules Java doc bases they're all the time and I'm yours also using java dot logging I'm not",
    "start": "2118750",
    "end": "2125170"
  },
  {
    "text": "using anything else I'm not using any of the rest of the JDK these the only modules I'm using and these are my own modules from my own application and",
    "start": "2125170",
    "end": "2131710"
  },
  {
    "text": "that's all that's available in here and if I look at my size then I have a",
    "start": "2131710",
    "end": "2143380"
  },
  {
    "text": "directory which is only 40 Meg and that includes Java so you can see how this is going to be obviously faster to upload",
    "start": "2143380",
    "end": "2149589"
  },
  {
    "text": "faster to move around save you loads of money in terms of space and stuff like that so this is definitely a really",
    "start": "2149589",
    "end": "2154960"
  },
  {
    "text": "interesting and good thing for for Java the language and this is one of the major benefits of modularity and modular",
    "start": "2154960",
    "end": "2160960"
  },
  {
    "text": "izing the jdk you don't have to necessarily motorize your application to reap some of the benefits of the fact",
    "start": "2160960",
    "end": "2166059"
  },
  {
    "text": "that the jdk wars modulized alright nine minutes and three seconds all right let's play the time all we",
    "start": "2166059",
    "end": "2173020"
  },
  {
    "text": "have to do is go over the business benefits of Java 12 oh yeah and switch expressions oh goodness",
    "start": "2173020",
    "end": "2178390"
  },
  {
    "text": "switch expressions and this is the last Java feature I'm gonna look at so this",
    "start": "2178390",
    "end": "2185559"
  },
  {
    "text": "came in in Java 12 this is a preview feature a preview feature means that this and preview features are new since",
    "start": "2185559",
    "end": "2191170"
  },
  {
    "text": "we moved to six monthly release cadence - so preview feature means that if you flip a particular flag you can access",
    "start": "2191170",
    "end": "2197470"
  },
  {
    "text": "new preview features and play with them and give feedback but don't probably put them in production because they might",
    "start": "2197470",
    "end": "2203500"
  },
  {
    "text": "change before they become solid proper features so switch expressions is a",
    "start": "2203500",
    "end": "2208630"
  },
  {
    "text": "preview feature this is a kind of typical switch statement I can turn this into a switch expression which is",
    "start": "2208630",
    "end": "2215140"
  },
  {
    "text": "significantly fewer lines of code uses lambda expressions it's a bit prettier it's quite nice the switch a psychic",
    "start": "2215140",
    "end": "2221530"
  },
  {
    "text": "at he returns a value which I can assign to this and one thing has changed in",
    "start": "2221530",
    "end": "2227140"
  },
  {
    "text": "here so this is the Java 12 version let's see so I can actually what have I",
    "start": "2227140",
    "end": "2233830"
  },
  {
    "text": "got here so if I do something more complicated for example I have a lambda expression",
    "start": "2233830",
    "end": "2240610"
  },
  {
    "text": "here and I in Java 12 I use the break keyword to return this value back into",
    "start": "2240610",
    "end": "2247480"
  },
  {
    "text": "type in Java 13 this will be I believe this will be yield instead and and",
    "start": "2247480",
    "end": "2253300"
  },
  {
    "text": "that's why you don't want to use preview features in production because they will change probably in the next release",
    "start": "2253300",
    "end": "2258580"
  },
  {
    "text": "cycle but it's totally worth playing with them and feeding back to the language developers in fact because this was a preview feature developers could",
    "start": "2258580",
    "end": "2265210"
  },
  {
    "text": "say we didn't like using break it was not a useful thing for us can you do something else and they can actually",
    "start": "2265210",
    "end": "2271000"
  },
  {
    "text": "change the language before it's too late",
    "start": "2271000",
    "end": "2274380"
  },
  {
    "text": "okay and in the future the good thing about doing this six-monthly release cadence is that we can be constantly",
    "start": "2278700",
    "end": "2284770"
  },
  {
    "text": "releasing new features and some of the things we've got oh I didn't mention Java 13 is going to have the updated",
    "start": "2284770",
    "end": "2290320"
  },
  {
    "text": "switch expressions Java 13 is also going to have text blocks which which I will",
    "start": "2290320",
    "end": "2296050"
  },
  {
    "text": "not be able to demo because I don't have Java 13 yet but text blocks allows you to put nice it's a nice way of putting",
    "start": "2296050",
    "end": "2301330"
  },
  {
    "text": "in things like sequel or JSON or you know those kind of big heavy texty things that you have to put inside a string there's a new syntax to allow us",
    "start": "2301330",
    "end": "2308140"
  },
  {
    "text": "to do that without having to escape everything it's going to be way better and in the future we'll have things like",
    "start": "2308140",
    "end": "2313840"
  },
  {
    "text": "lambda leftovers which allows us to use an underscore for unused lambda parameters and data classes for Java",
    "start": "2313840",
    "end": "2320890"
  },
  {
    "text": "will be interesting and a bunch of stuff around performance and small enhancements to make the library language easier to use now the business",
    "start": "2320890",
    "end": "2328930"
  },
  {
    "text": "doesn't care about language features we cannot sell them on moving to Java 11 because we want to use switch",
    "start": "2328930",
    "end": "2334870"
  },
  {
    "text": "expressions I mean honestly there's just no they don't care and which is fine they're not supposed to care about that",
    "start": "2334870",
    "end": "2339940"
  },
  {
    "text": "well they do care about is things like performance so generally speaking a more",
    "start": "2339940",
    "end": "2345280"
  },
  {
    "text": "recent version of the JDK will perform faster without having to do anything to it you won't have to like tweak any weird",
    "start": "2345280",
    "end": "2351460"
  },
  {
    "text": "things in order to get better performance this is generally the case and there are improvements to the JVM to",
    "start": "2351460",
    "end": "2357800"
  },
  {
    "text": "how things are optimized there's always a runtime out to my runtime optimizations there's things like being",
    "start": "2357800",
    "end": "2363950"
  },
  {
    "text": "able to make use of new CPU instructions if they're available that kind of thing all happens under the covers we don't",
    "start": "2363950",
    "end": "2369080"
  },
  {
    "text": "see it but our applications benefit from it if we move to a recent version of Java we also get better memory usage for",
    "start": "2369080",
    "end": "2376340"
  },
  {
    "text": "example we have compact strings in more recent versions of Java and that can significantly decrease the amount of",
    "start": "2376340",
    "end": "2382430"
  },
  {
    "text": "memory that your application is using again very important if we're running in the cloud or something like that where memory will actually cost us if we're",
    "start": "2382430",
    "end": "2389600"
  },
  {
    "text": "using too much of it garbage collectors people are always talking about the garbage collection when they talk about",
    "start": "2389600",
    "end": "2395000"
  },
  {
    "text": "Java performance I kind of dislike that because I don't think the garbage collector is responsible for all the",
    "start": "2395000",
    "end": "2400160"
  },
  {
    "text": "ills in the Java performance world but there are a plenty of new garbage collectors in more recent versions of",
    "start": "2400160",
    "end": "2407420"
  },
  {
    "text": "Java Java 9 changed the default garbage collector to g1 from remember and anyway",
    "start": "2407420",
    "end": "2415970"
  },
  {
    "text": "to g1 which is supposed to perform better Java 10 has improved g1 and your",
    "start": "2415970",
    "end": "2421760"
  },
  {
    "text": "11 has an experimental GC called epsilon and an experimental GC called zg c and",
    "start": "2421760",
    "end": "2428690"
  },
  {
    "text": "java 12 has another experimental GC called shenandoah and more improvements",
    "start": "2428690",
    "end": "2434510"
  },
  {
    "text": "to g1 and to z GC so that seems like an awful lot of garbage collection changes and like why of multiple garbage",
    "start": "2434510",
    "end": "2441410"
  },
  {
    "text": "collectors well they all have different types of profiles designed to work on different types of applications so",
    "start": "2441410",
    "end": "2446540"
  },
  {
    "text": "instead of spending forever like purposefully tuning one particular garbage collector to your use case pick",
    "start": "2446540",
    "end": "2452210"
  },
  {
    "text": "the right garbage collector for your use case so again business reasons why would we",
    "start": "2452210",
    "end": "2457340"
  },
  {
    "text": "want to move to a later version of Java well cost it will cost us less if we are",
    "start": "2457340",
    "end": "2462620"
  },
  {
    "text": "for example running in the cloud and using less memory deploying these smaller deployables and and getting",
    "start": "2462620",
    "end": "2469160"
  },
  {
    "text": "better performance from our applications so this will cost us less money but there's also other costs like if we",
    "start": "2469160",
    "end": "2474980"
  },
  {
    "text": "don't move to a more recent version of Java and our Java developers might decide not to work here anymore and we",
    "start": "2474980",
    "end": "2480830"
  },
  {
    "text": "might find it more difficult to attract good well not good developers but more developers to come and work with us if our code base is going to sucks",
    "start": "2480830",
    "end": "2487880"
  },
  {
    "text": "to gradually become older and older so there's all sorts of opportunity costs as well as actual physical money costs -",
    "start": "2487880",
    "end": "2494839"
  },
  {
    "text": "and there's also another benefit we probably want to get on this six-month live release train like now before it",
    "start": "2494839",
    "end": "2502039"
  },
  {
    "text": "gets away from us there will be a bit of a hump getting over the big Java 9 update but then once we're on this six",
    "start": "2502039",
    "end": "2509390"
  },
  {
    "text": "monthly release chain we should be able to just keep updating every six months at least in CI somewhere like that",
    "start": "2509390",
    "end": "2515720"
  },
  {
    "text": "somewhere where automatically testing it we might not want to deploy it to production every six months but we should be able to test on the latest",
    "start": "2515720",
    "end": "2521869"
  },
  {
    "text": "version somewhere because if it hurts do it more frequently and bring the pain",
    "start": "2521869",
    "end": "2527240"
  },
  {
    "text": "forward you really don't want to be waiting for Java 17 to get over that hump of Java 9 and then you know six",
    "start": "2527240",
    "end": "2534440"
  },
  {
    "text": "years worth of updates it's just going to be enormous ly painful let's do it now let's just get it over and done with",
    "start": "2534440",
    "end": "2540079"
  },
  {
    "text": "and then let's do it more frequently so it no longer hurts as much as sounds like pain doesn't sound very good what",
    "start": "2540079",
    "end": "2547789"
  },
  {
    "text": "are the potential pain points for upgrading a lot of people a bit worried about modularity as a pain point and",
    "start": "2547789",
    "end": "2553509"
  },
  {
    "text": "generally speaking you're not going to need to use modularity there are some pain points around moving to a later",
    "start": "2553509",
    "end": "2560299"
  },
  {
    "text": "version of Java due to the modularity things but a lot of that has been patched over and fixed by things like",
    "start": "2560299",
    "end": "2566599"
  },
  {
    "text": "your build tools and the libraries so as long as you kind of update your tools the tools that you use you probably",
    "start": "2566599",
    "end": "2573230"
  },
  {
    "text": "won't feel the pain that you might have heard about a couple of years ago when people were complaining about Java 9",
    "start": "2573230",
    "end": "2578769"
  },
  {
    "text": "there is a possibility that if you're using Java 11 you will find missing classes and missing methods deprecated",
    "start": "2578769",
    "end": "2586099"
  },
  {
    "text": "means deprecated now things are going away things were removed from the JDK so",
    "start": "2586099",
    "end": "2592000"
  },
  {
    "text": "Java FX is no longer there anymore Kyle Cobra is no longer there anymore Java X",
    "start": "2592000",
    "end": "2597140"
  },
  {
    "text": "stuff so Java EE packages that were in the JDK are no longer there anymore so if you upgrade these things will",
    "start": "2597140",
    "end": "2604099"
  },
  {
    "text": "disappear of course you can still get them you just add them as an external dependency so it's not the end of the world but it is something you have to be",
    "start": "2604099",
    "end": "2610190"
  },
  {
    "text": "aware of and if you are using deprecated methods stop using deprecated methods",
    "start": "2610190",
    "end": "2615680"
  },
  {
    "text": "and use the suggested replacement instead and so yes speaking of which oh one and a half",
    "start": "2615680",
    "end": "2621890"
  },
  {
    "text": "minutes for tips for migration I have written a whole article on this so I'm going to skim through this quickly and you can read the article in depth if",
    "start": "2621890",
    "end": "2627829"
  },
  {
    "text": "that's more interesting to you but the short version is run it on the updated JDK it might actually just work I did",
    "start": "2627829",
    "end": "2634700"
  },
  {
    "text": "this with a couple of open source projects it just worked on Java 12 I didn't have to do anything was really surprised I mean of course that's what I",
    "start": "2634700",
    "end": "2640880"
  },
  {
    "text": "expected if Oracle's listening it's totally fine and so it might just work if you have compiler warnings in your",
    "start": "2640880",
    "end": "2647329"
  },
  {
    "text": "code as it stands on Java 8 right now compiler warnings like deprecated methods for example do fix them and",
    "start": "2647329",
    "end": "2653119"
  },
  {
    "text": "address them before thinking about upgrading because if it's deprecated it's probably going to go away and",
    "start": "2653119",
    "end": "2659000"
  },
  {
    "text": "they're there for a reason update your dependencies this is a good idea for security reasons anyway keep",
    "start": "2659000",
    "end": "2664579"
  },
  {
    "text": "your dependencies up-to-date I know it's difficult especially if you're working on an application server because",
    "start": "2664579",
    "end": "2669799"
  },
  {
    "text": "sometimes it's it's difficult to migrate those things up to the most recent version but for security reasons you",
    "start": "2669799",
    "end": "2674930"
  },
  {
    "text": "should be keeping your dependencies up to date anyway but you particularly need to update your dependencies and maybe",
    "start": "2674930",
    "end": "2680569"
  },
  {
    "text": "add new ones for the bits of Java the JDK which are going away you do need to",
    "start": "2680569",
    "end": "2685970"
  },
  {
    "text": "update your build tool the build tools the older versions of maven and Gradle are not going to work from Java with",
    "start": "2685970",
    "end": "2692059"
  },
  {
    "text": "Java 9 or onwards but the most recent versions of maven in Gradle both work fine with Java 12 so upgrade your build",
    "start": "2692059",
    "end": "2698150"
  },
  {
    "text": "tool and it will probably take care of most of the problems anyway and then you compile your application code against",
    "start": "2698150",
    "end": "2704210"
  },
  {
    "text": "the JDK and then finally start using the shiny new features I know this is what we want to do first but don't do this",
    "start": "2704210",
    "end": "2710359"
  },
  {
    "text": "first do all the other stuff first and then start doing this when everything's bedded in and it looks ok in summary",
    "start": "2710359",
    "end": "2717519"
  },
  {
    "text": "Java is changing and it's changing fast we're getting releases every 6 months we're getting new features stripped out",
    "start": "2717519",
    "end": "2723740"
  },
  {
    "text": "to us modern Java can help you it can make your code more readable and it can definitely make things more performance",
    "start": "2723740",
    "end": "2729980"
  },
  {
    "text": "and more performance and it can reduce cost and maintenance costs there are two",
    "start": "2729980",
    "end": "2735200"
  },
  {
    "text": "main upgrade options for you now going forwards you can upgrade to Java 11",
    "start": "2735200",
    "end": "2740269"
  },
  {
    "text": "which is the long-term support release and should be supported by someone in some form for the next three years or",
    "start": "2740269",
    "end": "2746359"
  },
  {
    "text": "you can upgrade to Java 12 and expect to upgrade every 12 months over six months",
    "start": "2746359",
    "end": "2752000"
  },
  {
    "text": "you'll have to upgrade to Java 13 in September I do suggest that we upgrade",
    "start": "2752000",
    "end": "2757190"
  },
  {
    "text": "now and reduce future pain the thus the longer we leave it the more pain we are going to have as these methods start to",
    "start": "2757190",
    "end": "2763790"
  },
  {
    "text": "go away deprecation starts to be taken more seriously I really think now is the time now is the opportunity to move to",
    "start": "2763790",
    "end": "2769310"
  },
  {
    "text": "at least 11 and then keep upgrading once you've done the upgrade keep upgrading",
    "start": "2769310",
    "end": "2774740"
  },
  {
    "text": "every six months at least in CI or some sort of test environment to make sure that you are on top of these changes at",
    "start": "2774740",
    "end": "2782120"
  },
  {
    "text": "this URL you will see the slides video this talk and a further reading a bunch",
    "start": "2782120",
    "end": "2788060"
  },
  {
    "text": "of stuff about the features that I've covered and a whole a couple of articles about migrating that I just mentioned and pretty much all the resources I use",
    "start": "2788060",
    "end": "2794990"
  },
  {
    "text": "to learn how to put this talk together thank you very much",
    "start": "2794990",
    "end": "2800320"
  },
  {
    "text": "you [Applause]",
    "start": "2802480",
    "end": "2806729"
  }
]