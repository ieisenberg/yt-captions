[
  {
    "text": "[Music]",
    "start": "3670",
    "end": "8760"
  },
  {
    "text": "thank you Jud thank you so much uh I don't know if I've ever had such a fabulous",
    "start": "8840",
    "end": "15480"
  },
  {
    "text": "introduction before um one of the things I love about the hasool community is the close connection between academics and",
    "start": "15480",
    "end": "22920"
  },
  {
    "text": "Industry Folks at conferences like Lambda jam and icfp and so I'm very very",
    "start": "22920",
    "end": "28760"
  },
  {
    "text": "delighted to be speaking here today um so let me just uh jump into what I'm",
    "start": "28760",
    "end": "34960"
  },
  {
    "text": "talking about today so today um so I'm gonna talk about strongly typed system F",
    "start": "34960",
    "end": "40879"
  },
  {
    "text": "in GHC and I want everybody to think about this as a as a challenge problem as",
    "start": "40879",
    "end": "47680"
  },
  {
    "text": "um all the the idea of this talk kind of started with a challenge of can you do",
    "start": "47680",
    "end": "53960"
  },
  {
    "text": "this in your favorite functional programming language right and what is this right so this is we're going to",
    "start": "53960",
    "end": "61160"
  },
  {
    "text": "represent a data type for the abstract syntax of some other programming language right and in this case the the",
    "start": "61160",
    "end": "68200"
  },
  {
    "text": "object language that we're going to be representing is system F but we're not just going to use any data structure to",
    "start": "68200",
    "end": "74240"
  },
  {
    "text": "represent system F we want to have a strongly typed data structure and but",
    "start": "74240",
    "end": "79520"
  },
  {
    "text": "what do I mean by that is I want my data structure to be so constrained that it",
    "start": "79520",
    "end": "84759"
  },
  {
    "text": "only can represent well typed terms now what I'm going to talk about",
    "start": "84759",
    "end": "90360"
  },
  {
    "text": "today is I'm going to go over a solution that I have come up that I have developed to this challenge problem in",
    "start": "90360",
    "end": "97000"
  },
  {
    "text": "the hasle programming language and before I go any further I want to point out that if you get if you get excited",
    "start": "97000",
    "end": "105159"
  },
  {
    "text": "or impatient and want to see the answer I've put up all of the code plus more",
    "start": "105159",
    "end": "110719"
  },
  {
    "text": "extended uh elaboration much more than I'm going to be able to cover today at",
    "start": "110719",
    "end": "115920"
  },
  {
    "text": "this GitHub repo that you see at the bottom of the slide and I'll repeat it again at the end of the talk but",
    "start": "115920",
    "end": "122280"
  },
  {
    "text": "everything that you see today will be accessible to you to play around with afterwards okay so let's talk a little",
    "start": "122280",
    "end": "128920"
  },
  {
    "text": "bit more about this adventure that we're going to go on today oh and I should also mention I I put in a lot of",
    "start": "128920",
    "end": "135080"
  },
  {
    "text": "pictures of dragons in this talk to me dragons kind of represent a challenge when I was a kid my favorite book was",
    "start": "135080",
    "end": "140959"
  },
  {
    "text": "about this princess who went out and decided to be a dragon killer so we we",
    "start": "140959",
    "end": "146040"
  },
  {
    "text": "have some dragons that we're going to to go out and and and hunt in our adventure",
    "start": "146040",
    "end": "151200"
  },
  {
    "text": "so how are we going to chart that Adventure what are we gonna see today um so I'm gonna start with just a simpler",
    "start": "151200",
    "end": "159879"
  },
  {
    "text": "version right we're not going to do system ass all at once we're going to start with a smaller Dragon which is the simply typed Lambda calculus and we're",
    "start": "159879",
    "end": "166080"
  },
  {
    "text": "going to use this technique called de brown indices to represent the variables",
    "start": "166080",
    "end": "171480"
  },
  {
    "text": "of this simpler language and as we go through and work out how we can",
    "start": "171480",
    "end": "177720"
  },
  {
    "text": "represent this small Lambda calculus what we're going to develop in the",
    "start": "177720",
    "end": "182840"
  },
  {
    "text": "process is a very general interface for substitution uh that is would be the",
    "start": "182840",
    "end": "188599"
  },
  {
    "text": "seed of a library that you could use to implement a more General substitution",
    "start": "188599",
    "end": "193799"
  },
  {
    "text": "library for implementing programming languages something like um uh so in the",
    "start": "193799",
    "end": "199360"
  },
  {
    "text": "past I implemented a language called Unbound and edit implemented a language called bound they're both very much",
    "start": "199360",
    "end": "205480"
  },
  {
    "text": "related to what we're just going to see just a very small model of at the end of this first section the second thing",
    "start": "205480",
    "end": "212120"
  },
  {
    "text": "we're going to do is then we're going to extend it to a strongly typed representation so the first one is just",
    "start": "212120",
    "end": "218360"
  },
  {
    "text": "going to be a a standard Lambda calculus representation talking about how to do",
    "start": "218360",
    "end": "223560"
  },
  {
    "text": "the de brown indices the second one we're going to do a strongly typed version and in that strongly typed",
    "start": "223560",
    "end": "229920"
  },
  {
    "text": "version we're going to do exactly the same thing but this time the types are going to tell us more this time the",
    "start": "229920",
    "end": "236640"
  },
  {
    "text": "types are going to prove to us that when we we do a substitution with this the",
    "start": "236640",
    "end": "242560"
  },
  {
    "text": "same code for the substitution but when we do that substitution we're going to find out that we haven't screwed up the types in our in our type system and then",
    "start": "242560",
    "end": "250799"
  },
  {
    "text": "the third part of the talk we're going to take these two ideas that we start that of doing it first with an untyped",
    "start": "250799",
    "end": "258120"
  },
  {
    "text": "representation and then with a typed representation we're going to take those two ideas mix them together and use that",
    "start": "258120",
    "end": "264720"
  },
  {
    "text": "to build up a representation of system F use it to build up a language that has polymorphism",
    "start": "264720",
    "end": "270160"
  },
  {
    "text": "right and we're going to need to draw on a particular library that supports",
    "start": "270160",
    "end": "275880"
  },
  {
    "text": "dependently typed programming the singl tense Library this is a library that my student Richard Eisenberg has developed",
    "start": "275880",
    "end": "282160"
  },
  {
    "text": "specifically for dependently type programming in has schol so we'll see a short example of what that can get you",
    "start": "282160",
    "end": "289199"
  },
  {
    "text": "now I'm going to warn you right up front not all of the dragons will be slain in",
    "start": "289199",
    "end": "296400"
  },
  {
    "text": "this talk there is no fairy tale ending but uh uh but we will have some fun",
    "start": "296400",
    "end": "303800"
  },
  {
    "text": "along the way so with that let me just dive in and we'll start with our Simply",
    "start": "303800",
    "end": "309280"
  },
  {
    "text": "Ty Lambda calculus um oh but before that before we go any further",
    "start": "309280",
    "end": "316000"
  },
  {
    "text": "um we before we go on any kind of quest maybe we should go to the library and",
    "start": "316000",
    "end": "322400"
  },
  {
    "text": "look for some ancient documents that can be a guide for our way and and in fact",
    "start": "322400",
    "end": "328080"
  },
  {
    "text": "before I I need to acknowledge that I found this one ancient document about",
    "start": "328080",
    "end": "333759"
  },
  {
    "text": "how to do strongly typed term representations in a different language in the the language of the",
    "start": "333759",
    "end": "338960"
  },
  {
    "text": "proof assistant and this was a very strong inspiration for the hasle development that I'm going to show you",
    "start": "338960",
    "end": "345600"
  },
  {
    "text": "today uh looking at uh dependently type programs written in other languages has",
    "start": "345600",
    "end": "351520"
  },
  {
    "text": "been a hobby for me and trying to translate them to Hol to see what they look like in hll I find that very fun",
    "start": "351520",
    "end": "357720"
  },
  {
    "text": "and this is yet another example Le in in that",
    "start": "357720",
    "end": "363280"
  },
  {
    "text": "vein okay so simply type Lambda calculus right so this is I I pulled these typing",
    "start": "363520",
    "end": "369520"
  },
  {
    "text": "rules from Wikipedia this is very standard way of capturing the essence of",
    "start": "369520",
    "end": "375479"
  },
  {
    "text": "the typed programming language so let me see I should have a laser pointer I hope",
    "start": "375479",
    "end": "382520"
  },
  {
    "text": "it's visible so you can see here there is a uh so we have four rules right so",
    "start": "382520",
    "end": "388280"
  },
  {
    "text": "we have variables we have some kind of constants it doesn't really matter what kind of constants in in my example we'll have",
    "start": "388280",
    "end": "395199"
  },
  {
    "text": "constant integers um we'll have uh functions with with function types and",
    "start": "395199",
    "end": "402319"
  },
  {
    "text": "then we have applications where we can apply functions so this is the language that we want to implement that we want",
    "start": "402319",
    "end": "407560"
  },
  {
    "text": "to represent in hasle and here's a data structure that we can use for",
    "start": "407560",
    "end": "412919"
  },
  {
    "text": "representing this language so we need some data structure to talk about the types of this language it's a simply",
    "start": "412919",
    "end": "419199"
  },
  {
    "text": "type so we have our base type is some int type and then we have Arrow types",
    "start": "419199",
    "end": "424800"
  },
  {
    "text": "and then we have our four different expression forms for for constant",
    "start": "424800",
    "end": "430039"
  },
  {
    "text": "integers variables functions and applications and the thing to notice",
    "start": "430039",
    "end": "435840"
  },
  {
    "text": "about variables is I'm representing variables with this type that I would call idx and that idx it stands for",
    "start": "435840",
    "end": "444120"
  },
  {
    "text": "index because I'm going to be using de brown indices to represent variables",
    "start": "444120",
    "end": "449400"
  },
  {
    "text": "where we're going to count enclosing Lambda binders and I'll show you an example of this but the the key idea is",
    "start": "449400",
    "end": "456560"
  },
  {
    "text": "that we don't have any variable names anywhere we just need to count if we want to know what VAR a variable",
    "start": "456560",
    "end": "462800"
  },
  {
    "text": "resolves to we just need to count how many Lambda binders it's nested inside",
    "start": "462800",
    "end": "468199"
  },
  {
    "text": "um and to make sure that we don't confuse our integer constants with our",
    "start": "468199",
    "end": "474319"
  },
  {
    "text": "variables I'm using a different type to keep those two kinds of numbers separate from each each",
    "start": "474319",
    "end": "480680"
  },
  {
    "text": "other oh and another thing is if you have managed to find the GitHub repo or if you see my slides which will all be",
    "start": "480680",
    "end": "487879"
  },
  {
    "text": "in the GitHub repo afterwards each slide has a little reference to which file the",
    "start": "487879",
    "end": "494720"
  },
  {
    "text": "code is coming from if you want to follow along okay so let's look at an example",
    "start": "494720",
    "end": "500639"
  },
  {
    "text": "so here's a Lambda term that we might want to represent right and so you could see we bind the variable X we apply it",
    "start": "500639",
    "end": "508000"
  },
  {
    "text": "to a function which finds a variable y applies the same X to Y again and I've colored it so that you can kind of match",
    "start": "508000",
    "end": "514880"
  },
  {
    "text": "it up with its representation so with the debr indices this x goes out to the zeroth Lambda so",
    "start": "514880",
    "end": "523240"
  },
  {
    "text": "there's no there's no lambdas in between this X and where it's bound so we're going to use zero to represent that one",
    "start": "523240",
    "end": "530680"
  },
  {
    "text": "um this x the green one over here there we're using one because we have to jump",
    "start": "530680",
    "end": "536880"
  },
  {
    "text": "over this one Lambda before we find the Lambda where it is bound so we just need",
    "start": "536880",
    "end": "542560"
  },
  {
    "text": "to count to be able to figure out how what which particular index to represent",
    "start": "542560",
    "end": "548079"
  },
  {
    "text": "each variable right like similarly over here this zero is refers to Y which is bound",
    "start": "548079",
    "end": "557640"
  },
  {
    "text": "here so even though we have a zero up here and a zero down here they're in",
    "start": "557640",
    "end": "563200"
  },
  {
    "text": "different parts of the term they're nested inside different lambdas and so they refer to different variables",
    "start": "563200",
    "end": "569680"
  },
  {
    "text": "now the nice thing about this representation is that variable names don't matter using this representation",
    "start": "569680",
    "end": "576519"
  },
  {
    "text": "right so if we want to know whether Lambda x.x is equal to Lambda y doy well",
    "start": "576519",
    "end": "581920"
  },
  {
    "text": "they they're going to be represented with exactly the same term so they're going to trivially be equal to each",
    "start": "581920",
    "end": "587000"
  },
  {
    "text": "other and that's actually very uh convenient because we don't want to distinguish those two functions to each",
    "start": "587000",
    "end": "592959"
  },
  {
    "text": "other from each other we want to think of them as the same function okay okay so let's look at an",
    "start": "592959",
    "end": "601079"
  },
  {
    "text": "example of an operation that we might want to use like just a simple function",
    "start": "601079",
    "end": "606560"
  },
  {
    "text": "that we might want to use with this data structure to with these terms so what",
    "start": "606560",
    "end": "611920"
  },
  {
    "text": "I'm going to implement is a simple evaluator for Lambda calculus terms and so each of those expressions I want to",
    "start": "611920",
    "end": "619120"
  },
  {
    "text": "turn into something of this data type I want to evaluate an expression into a value and my values are either going to",
    "start": "619120",
    "end": "625920"
  },
  {
    "text": "be integer values or functions and we can do that with a an interpreter that",
    "start": "625920",
    "end": "631440"
  },
  {
    "text": "kind of looks like this right so we're going to evaluate an expression to a value if it's an integer expression then",
    "start": "631440",
    "end": "637959"
  },
  {
    "text": "it's directly an integer value if it's a a variable oh I forgot to tell you I",
    "start": "637959",
    "end": "643560"
  },
  {
    "text": "want to only evaluate closed terms so it's a variable I don't want to see it I want it I want this to be an error case",
    "start": "643560",
    "end": "651519"
  },
  {
    "text": "um if it's a Lambda expression then that's directly a Lambda value um if",
    "start": "651519",
    "end": "656839"
  },
  {
    "text": "it's an application I have to do a little bit of work right so here if it's an application I have to first evaluate",
    "start": "656839",
    "end": "663600"
  },
  {
    "text": "the function part of the application and if that function happens to be an integer then this is where I'm",
    "start": "663600",
    "end": "670360"
  },
  {
    "text": "going to get a type error in my simply type Lambda calculus you can't apply an integer to something to an argument but",
    "start": "670360",
    "end": "678160"
  },
  {
    "text": "hopefully I if I get a a Lambda value then that's something I can apply and",
    "start": "678160",
    "end": "684399"
  },
  {
    "text": "here's where the point where where I have to do something I have to do some substitution here's here's a point where",
    "start": "684399",
    "end": "689839"
  },
  {
    "text": "I want to keep evaluating the body of this Lambda expression but this is a",
    "start": "689839",
    "end": "695320"
  },
  {
    "text": "Lambda this is a function it's got an argument I want to fill in that argument with the with its I want to fill in that",
    "start": "695320",
    "end": "702600"
  },
  {
    "text": "parameter with its argument so I want to substitute E2 for whatever variable zero",
    "start": "702600",
    "end": "707880"
  },
  {
    "text": "is in E1 Prime right so here I need a way I have to Define what substitution",
    "start": "707880",
    "end": "713920"
  },
  {
    "text": "is to be able to finish this evaluator okay so here's what where we",
    "start": "713920",
    "end": "719440"
  },
  {
    "text": "had where things get a little bit tricky right we have to implement substitution for this representation of Lambda terms",
    "start": "719440",
    "end": "726000"
  },
  {
    "text": "where we're using indices to represent variables right and so what happens what",
    "start": "726000",
    "end": "731040"
  },
  {
    "text": "does it mean to do a substitution when we want to substitute E2 for variable",
    "start": "731040",
    "end": "737279"
  },
  {
    "text": "zero and E1 how might we Implement that operation now let's just think about",
    "start": "737279",
    "end": "742959"
  },
  {
    "text": "maybe some simple cases first and then we'll go a little bit more General right",
    "start": "742959",
    "end": "748040"
  },
  {
    "text": "so imagine the body of our Lambda expression that we're substituting into E1 doesn't have any nested lambdas",
    "start": "748040",
    "end": "755040"
  },
  {
    "text": "inside of it right so this is the simplest case we can think of right so there if there are no lambdas inside",
    "start": "755040",
    "end": "761760"
  },
  {
    "text": "right then we just need to find all the our zeros in there and replace them with",
    "start": "761760",
    "end": "768399"
  },
  {
    "text": "E2 but what if there was a situation where E1 wasn't closed there were some",
    "start": "768399",
    "end": "775199"
  },
  {
    "text": "free variables around now maybe in this implmentation with eval I said I wanted",
    "start": "775199",
    "end": "780720"
  },
  {
    "text": "to only do it for Clos terms but I want substitution to be General I want it to apply to I I'll use it in other",
    "start": "780720",
    "end": "788120"
  },
  {
    "text": "situations as well so if youone is not closed I also have to do this other thing while I'm substituting I have to",
    "start": "788120",
    "end": "794839"
  },
  {
    "text": "decrement all other variables sorry I hope you can't I don't know if you can hear my cat she just came",
    "start": "794839",
    "end": "801279"
  },
  {
    "text": "in hopefully she'll keep it down um okay so if E1 is not closed it",
    "start": "801279",
    "end": "811120"
  },
  {
    "text": "has some other free variables we're going to be removing the binder around it right we're going to decrease their binding levels so we need to decrement",
    "start": "811120",
    "end": "817639"
  },
  {
    "text": "them as well okay so that was the simple case right but what if there were binders in",
    "start": "817639",
    "end": "824240"
  },
  {
    "text": "Ean what do we have to do there well yes Freya here she is she gets to be on the",
    "start": "824240",
    "end": "833120"
  },
  {
    "text": "video um if there are variables if there are binders right and the the variable",
    "start": "833120",
    "end": "841040"
  },
  {
    "text": "that was Zero is under a binder then we need to start looking for one right so if there's one binder we have to look",
    "start": "841040",
    "end": "847000"
  },
  {
    "text": "for VAR one in the more going even more General maybe we in binder so we have to",
    "start": "847000",
    "end": "852639"
  },
  {
    "text": "look for we have to keep track of how many binders we're going down and we have to look for n and at the same time",
    "start": "852639",
    "end": "859639"
  },
  {
    "text": "we still have to worry about free variables in E1 and decrementing",
    "start": "859639",
    "end": "865120"
  },
  {
    "text": "them and one more situation if E1 has binders we're putting E2",
    "start": "865120",
    "end": "872759"
  },
  {
    "text": "underneath those binders and we don't want to capture any free variables in E2",
    "start": "872759",
    "end": "878639"
  },
  {
    "text": "and so at the same time as we're decrementing variables in E1 we also have to increment variables in E2 to",
    "start": "878639",
    "end": "886240"
  },
  {
    "text": "make sure that they don't get captured now this is about the point where thinking about substitution with debrand",
    "start": "886240",
    "end": "892360"
  },
  {
    "text": "indices my head starts to explode right I'm like do I really have to think about",
    "start": "892360",
    "end": "897680"
  },
  {
    "text": "all these different cases every time I want to implement substitution for my",
    "start": "897680",
    "end": "904040"
  },
  {
    "text": "little language right is there a way I can encapsulate this reasoning so that I",
    "start": "904040",
    "end": "910079"
  },
  {
    "text": "only have to figure it out once and I don't have to keep reimplementing the same thing over and over",
    "start": "910079",
    "end": "915600"
  },
  {
    "text": "again right so so there's there's a little drag in there but that's our challenge can we encapsulate this",
    "start": "915600",
    "end": "921360"
  },
  {
    "text": "reasoning so we don't have to do all of this counting The Binding level figuring",
    "start": "921360",
    "end": "927440"
  },
  {
    "text": "out whether we're decrementing or implementing what can we do so let's try to divide up what we're implementing",
    "start": "927440",
    "end": "935199"
  },
  {
    "text": "into two parts a reusable library and then the part we need specifically for",
    "start": "935199",
    "end": "941639"
  },
  {
    "text": "this particular application right so the bottom part blue that's specific for the",
    "start": "941639",
    "end": "948079"
  },
  {
    "text": "simply type Lambda calculus this is the substitution function that we have to implement that it has to be specific to",
    "start": "948079",
    "end": "955120"
  },
  {
    "text": "this Lambda calculus because it it because it has to do this recursive traversal over the Lambda calculus term",
    "start": "955120",
    "end": "963480"
  },
  {
    "text": "so but maybe we can abstract away what exactly we're doing when we do the",
    "start": "963480",
    "end": "969880"
  },
  {
    "text": "substitution and so what I want to do is I want to introduce this abstract type",
    "start": "969880",
    "end": "975120"
  },
  {
    "text": "of an idea of a substitution and then I want that's up in the green box this is sort of the",
    "start": "975120",
    "end": "981040"
  },
  {
    "text": "library and then I want to have some operations that I can use to define for",
    "start": "981040",
    "end": "988000"
  },
  {
    "text": "each of my languages what the substitution operation is for that language so",
    "start": "988000",
    "end": "995279"
  },
  {
    "text": "um so if you remember before you know I wanted to replace zero with some right",
    "start": "995279",
    "end": "1003079"
  },
  {
    "text": "hand side with some E2 so I need a way of creating that single substitution so",
    "start": "1003079",
    "end": "1008319"
  },
  {
    "text": "there's one Constructor for this abstract substitution type down here in my implementation",
    "start": "1008319",
    "end": "1015600"
  },
  {
    "text": "mostly the substitution just crawls over the term like for if we have an integer we don't need to do anything for",
    "start": "1015600",
    "end": "1021600"
  },
  {
    "text": "substitution if we have an application we just need to substitute into this two sub terms of the application the two",
    "start": "1021600",
    "end": "1028438"
  },
  {
    "text": "places where we have to do something specific are in the variable case that's where we actually need to look up what",
    "start": "1028439",
    "end": "1034438"
  },
  {
    "text": "the substitution does to that variable you know if it's variable zero we need to get out E2 maybe it's another",
    "start": "1034439",
    "end": "1041600"
  },
  {
    "text": "variable that we have to shift it a little bit if it's a Lambda we need to",
    "start": "1041600",
    "end": "1047199"
  },
  {
    "text": "call the substitution recursive but we're going to transform this substitution using this operation that",
    "start": "1047199",
    "end": "1052679"
  },
  {
    "text": "I'm calling lift we're going to transform that substitution so that it's appropriate for going under the binder",
    "start": "1052679",
    "end": "1058840"
  },
  {
    "text": "and this is how I'm going to keep track of that nesting level of my operation this is abstract but you can see that",
    "start": "1058840",
    "end": "1065960"
  },
  {
    "text": "it's a very specific easy to grasp uh pattern for the definition of the term",
    "start": "1065960",
    "end": "1073200"
  },
  {
    "text": "and a lot of the complexity is hidden behind what goes on in the in the",
    "start": "1073200",
    "end": "1079200"
  },
  {
    "text": "implementation of the library now when you're looking at this you might think okay it's not quite a",
    "start": "1079200",
    "end": "1086000"
  },
  {
    "text": "general purpose Library um because I still am referring to the EXP type in",
    "start": "1086000",
    "end": "1092760"
  },
  {
    "text": "the signature of these Library functions so it's not a general Library yet so I need to do one more step to generalize",
    "start": "1092760",
    "end": "1098679"
  },
  {
    "text": "it right so what do what do I have to do well I have to make the type a little bit more polymorphic so I add a type",
    "start": "1098679",
    "end": "1104600"
  },
  {
    "text": "parameter to say I'm doing a substitution that for an a right so a is",
    "start": "1104600",
    "end": "1111200"
  },
  {
    "text": "going to be a parameter in this example it will be X right I want to create a substitution for Expressions right and",
    "start": "1111200",
    "end": "1118080"
  },
  {
    "text": "so my single sub Constructor is going to take A's and give me substitutions for",
    "start": "1118080",
    "end": "1123799"
  },
  {
    "text": "A's now what about this apply sub so when I take a substitution for A's and I",
    "start": "1123799",
    "end": "1130679"
  },
  {
    "text": "get an index I should get an A back out right I'm applying I'm looking up that",
    "start": "1130679",
    "end": "1136400"
  },
  {
    "text": "index in that substitution but I need a little bit of extra information from my language to be able",
    "start": "1136400",
    "end": "1143840"
  },
  {
    "text": "to do this generically and that's what this type class constraint is about the type class constraint is holding the",
    "start": "1143840",
    "end": "1150200"
  },
  {
    "text": "information from the language that I need right so what do I need for apply sub well sometimes when I look up for an",
    "start": "1150200",
    "end": "1157679"
  },
  {
    "text": "index I need to return you know the thing from the right hand side but",
    "start": "1157679",
    "end": "1162840"
  },
  {
    "text": "sometimes I need to shift that index down so I just need to change the index but make a new variable so I need know",
    "start": "1162840",
    "end": "1168640"
  },
  {
    "text": "what the variable Constructor is for my language so one component of that type",
    "start": "1168640",
    "end": "1174280"
  },
  {
    "text": "class is how to create a variable of a particular index and if I have that",
    "start": "1174280",
    "end": "1181080"
  },
  {
    "text": "that's going to help me Define this apply sub in a general way now Lyft also",
    "start": "1181080",
    "end": "1187919"
  },
  {
    "text": "has the con same constraint this is the Lyft if you remember was an operation",
    "start": "1187919",
    "end": "1193480"
  },
  {
    "text": "that is going to transform a substitution so that it's appropriate for going under a b Finder right and but",
    "start": "1193480",
    "end": "1199760"
  },
  {
    "text": "LT has to do a little bit more because not only does it have to modify what's going on in the substitution but it also",
    "start": "1199760",
    "end": "1206360"
  },
  {
    "text": "has to go in all everything that's in the right hand side we have to we also",
    "start": "1206360",
    "end": "1212000"
  },
  {
    "text": "had to modify increment those variables while we were decrementing others we also need to lift also needs to know",
    "start": "1212000",
    "end": "1218840"
  },
  {
    "text": "what is the substitution operation itself so it can do those decrements now I'm not going to show you",
    "start": "1218840",
    "end": "1225360"
  },
  {
    "text": "how this all works out because I want to get to other part part of the talk but I want to tell you is that this this",
    "start": "1225360",
    "end": "1234159"
  },
  {
    "text": "interface gives us a nice way of capturing exactly what the reusable part",
    "start": "1234159",
    "end": "1239440"
  },
  {
    "text": "is and um and what part you need to do specific for your language now of course",
    "start": "1239440",
    "end": "1244840"
  },
  {
    "text": "we could go much more deeply into this I'm going to stop here there's more that we can do and I'm hap happy to follow up",
    "start": "1244840",
    "end": "1252840"
  },
  {
    "text": "after that but what I want to show next is how we can use this if we have this",
    "start": "1252840",
    "end": "1259440"
  },
  {
    "text": "Library how we can use this to get our substitution and finish out our evaluation example right and this part",
    "start": "1259440",
    "end": "1266760"
  },
  {
    "text": "this is this is almost the what we've seen before right so in this part we just need to import the library that",
    "start": "1266760",
    "end": "1273400"
  },
  {
    "text": "defines these operations and then we have to create an instance of that type class that tells the library here's what",
    "start": "1273400",
    "end": "1280120"
  },
  {
    "text": "the variable Constructor is and here's how to define the substitution operation",
    "start": "1280120",
    "end": "1285600"
  },
  {
    "text": "in terms of the apply sub and lift operations that come from the library and boom once we do that now we have",
    "start": "1285600",
    "end": "1292240"
  },
  {
    "text": "substitution for our particular Lambda calculus and we didn't have to think",
    "start": "1292240",
    "end": "1297520"
  },
  {
    "text": "about shifting or or decrementing variables or incrementing variables at all we just thought about it in terms of",
    "start": "1297520",
    "end": "1304640"
  },
  {
    "text": "looking up substitutions and modifying substitutions as we go under",
    "start": "1304640",
    "end": "1310480"
  },
  {
    "text": "binders right and once we've done that then I can finally do this last line of",
    "start": "1310480",
    "end": "1317000"
  },
  {
    "text": "my evaluator exam example right so you remember for evaluating the application",
    "start": "1317000",
    "end": "1323080"
  },
  {
    "text": "of a Lambda expression expression to an argument we need to take create a",
    "start": "1323080",
    "end": "1328600"
  },
  {
    "text": "substitution with the argument and call the substitution function with that new",
    "start": "1328600",
    "end": "1334360"
  },
  {
    "text": "sub in the body and that is going to work out for us okay so that that's the first part",
    "start": "1334360",
    "end": "1342000"
  },
  {
    "text": "that we did this all with an with a weekly typed or untyped abstract syntax",
    "start": "1342000",
    "end": "1347440"
  },
  {
    "text": "tree and what do I mean by that right so in this example you can see that um",
    "start": "1347440",
    "end": "1352559"
  },
  {
    "text": "we're not enforcing our expression data type to be",
    "start": "1352559",
    "end": "1358159"
  },
  {
    "text": "to only represent things that type check and they simply type Lambda calculus we could have things that are type errors",
    "start": "1358159",
    "end": "1365039"
  },
  {
    "text": "and then we're not enforcing that this evaluator only works for closed terms",
    "start": "1365039",
    "end": "1370520"
  },
  {
    "text": "what I want to talk about next is how we can modify this data structure and",
    "start": "1370520",
    "end": "1375720"
  },
  {
    "text": "modify the substitution Library so that we can rule out these error cases rule",
    "start": "1375720",
    "end": "1382279"
  },
  {
    "text": "out the second line where we're trying to evaluate an expression with an Unbound variable and rule out this line",
    "start": "1382279",
    "end": "1388279"
  },
  {
    "text": "down here the next to last line where rule out applying of an integer to an",
    "start": "1388279",
    "end": "1393440"
  },
  {
    "text": "argument something that would be a type error in our language right and so our technique for",
    "start": "1393440",
    "end": "1400159"
  },
  {
    "text": "for for defining the strongly typed abstract syntax um is going to be to use",
    "start": "1400159",
    "end": "1406640"
  },
  {
    "text": "a Gad to add some typee indices to our representation of the Lambda calculus",
    "start": "1406640",
    "end": "1412600"
  },
  {
    "text": "term that capture what the type system is right so if you see if you just look",
    "start": "1412600",
    "end": "1418559"
  },
  {
    "text": "at the purple if you just look at the purple Parts it's the same data type",
    "start": "1418559",
    "end": "1424000"
  },
  {
    "text": "definition that you saw before but now I have two extra components I have two",
    "start": "1424000",
    "end": "1429200"
  },
  {
    "text": "extra parameters for this data type definition right so this second parameter that I've always used orange",
    "start": "1429200",
    "end": "1436679"
  },
  {
    "text": "for this is for the the type of the expression that I'm representing so you can see that these integer literals",
    "start": "1436679",
    "end": "1443760"
  },
  {
    "text": "right the expression now says I am an expression that is representing",
    "start": "1443760",
    "end": "1449120"
  },
  {
    "text": "something that has the integer type right and for Lambda expression I'm",
    "start": "1449120",
    "end": "1454600"
  },
  {
    "text": "going to get something that is an expression that has a function type",
    "start": "1454600",
    "end": "1459679"
  },
  {
    "text": "right so we're using that type index to constrain and give us information about",
    "start": "1459679",
    "end": "1465480"
  },
  {
    "text": "the syntax that we're representing the green part the green part is that's for",
    "start": "1465480",
    "end": "1470799"
  },
  {
    "text": "the context that's the typing context we might have some variables in there and the green is remembering what the types",
    "start": "1470799",
    "end": "1476520"
  },
  {
    "text": "of those variables are and that we're going to use this right here this is a list of types our variables are indices",
    "start": "1476520",
    "end": "1483799"
  },
  {
    "text": "they're natural numbers they're just uh indexes into that list so the type of",
    "start": "1483799",
    "end": "1489480"
  },
  {
    "text": "the variable we're going to delegate to this auxiliary type here but all this does is it's going to look up in this",
    "start": "1489480",
    "end": "1495919"
  },
  {
    "text": "list and find out what what index in that list this type",
    "start": "1495919",
    "end": "1501640"
  },
  {
    "text": "is and that's what type that variable will have in just a sec I'll show you the definition of what index is this is",
    "start": "1501640",
    "end": "1509399"
  },
  {
    "text": "both proving that that variable index is in scope right you can view this typing",
    "start": "1509399",
    "end": "1515960"
  },
  {
    "text": "contest as a scope so it's going to prove that that variable index is in scope but it's also going to give us",
    "start": "1515960",
    "end": "1521399"
  },
  {
    "text": "what the type of the variable is in that context now when we have a Lambda",
    "start": "1521399",
    "end": "1527039"
  },
  {
    "text": "expression we are going to be introducing a new variable and you can see that happen",
    "start": "1527039",
    "end": "1532240"
  },
  {
    "text": "here in the body of the Lambda expression so here in the body of the Lambda expression you can see um in the",
    "start": "1532240",
    "end": "1540399"
  },
  {
    "text": "body of the Lambda expression we are taking the typing context and we're adding one a we're adding a new type to",
    "start": "1540399",
    "end": "1546960"
  },
  {
    "text": "it we're adding the type of the parameter this is the this is just a normal hascal cons operator for a list",
    "start": "1546960",
    "end": "1553480"
  },
  {
    "text": "we're making a bigger list with a new type in the front and that's record reping that index zero has the type T1",
    "start": "1553480",
    "end": "1561480"
  },
  {
    "text": "which is the type of the parameter to this function all right and then lastly down here for application if we have a",
    "start": "1561480",
    "end": "1568880"
  },
  {
    "text": "function that has an arrow type right then we better have an argument where",
    "start": "1568880",
    "end": "1575679"
  },
  {
    "text": "the the arguments type has to match up with the parameter that the arrow expects and then the result type of the",
    "start": "1575679",
    "end": "1581799"
  },
  {
    "text": "application has to be the result type of what the function was right so all of",
    "start": "1581799",
    "end": "1586960"
  },
  {
    "text": "these definitions together are going to constrain our data structure so that we",
    "start": "1586960",
    "end": "1592200"
  },
  {
    "text": "are only going to get lamb simply type Lambda calculus terms things that type",
    "start": "1592200",
    "end": "1597240"
  },
  {
    "text": "check all other Lambda calculus terms are just not the high school type Checker is going to rule them out before",
    "start": "1597240",
    "end": "1602399"
  },
  {
    "text": "we even start working with them now in order to finish to to",
    "start": "1602399",
    "end": "1608320"
  },
  {
    "text": "continue our example right I promised we would not just represent the terms but we also need to work with them and so",
    "start": "1608320",
    "end": "1614640"
  },
  {
    "text": "what I want to do is modify our substit subtitution Library so that it also",
    "start": "1614640",
    "end": "1620120"
  },
  {
    "text": "talks about these types so that when we apply substitutions if we start with a well",
    "start": "1620120",
    "end": "1626559"
  },
  {
    "text": "type expression and apply a substitution to it we should still have a well type expression in the end right so the first",
    "start": "1626559",
    "end": "1633559"
  },
  {
    "text": "building block of that is to be able to talk about indices that are references",
    "start": "1633559",
    "end": "1638840"
  },
  {
    "text": "into a list right so if you look closely at this index type I know there's a lot",
    "start": "1638840",
    "end": "1644520"
  },
  {
    "text": "of text on the screen but if you look closely at this type if you squint a lot you'll see that it's isomorphic to the",
    "start": "1644520",
    "end": "1650480"
  },
  {
    "text": "natural numbers we have a zero Constructor that's zero and we have",
    "start": "1650480",
    "end": "1656640"
  },
  {
    "text": "successor that takes an index and gives us another Index right so these are natural numbers they're just",
    "start": "1656640",
    "end": "1662600"
  },
  {
    "text": "indices the zero index is the index to the first position in the list right so",
    "start": "1662600",
    "end": "1669600"
  },
  {
    "text": "this says that t is found at the top of the list at the zeroth position the",
    "start": "1669600",
    "end": "1675000"
  },
  {
    "text": "successor index says that T is found",
    "start": "1675000",
    "end": "1680080"
  },
  {
    "text": "later in the list so if T so if we have a list it's nonempty um and we should know the",
    "start": "1680080",
    "end": "1688519"
  },
  {
    "text": "successor index is going to tell us if we can find T in here then the successor",
    "start": "1688519",
    "end": "1694039"
  },
  {
    "text": "is going to push it and say well we need to go look one more to find out where index T is right so this is going to",
    "start": "1694039",
    "end": "1701039"
  },
  {
    "text": "give us a proof that every index is going to be in bounds in this list and",
    "start": "1701039",
    "end": "1707720"
  },
  {
    "text": "the second component is going to be the type that it's looked up in that in with that Index right and so this is exactly",
    "start": "1707720",
    "end": "1715600"
  },
  {
    "text": "what we need to be able to represent well-typed variables variables that are well typed within some typing",
    "start": "1715600",
    "end": "1722559"
  },
  {
    "text": "context now another thing that I want you to notice about this definition is I want you to look closely and look at the",
    "start": "1722559",
    "end": "1728960"
  },
  {
    "text": "kind of Index right so I wrote it like this I put explicitly in hascal what its",
    "start": "1728960",
    "end": "1734320"
  },
  {
    "text": "kind is it takes a list of KS and a k i want it to be a very generic thing and",
    "start": "1734320",
    "end": "1740039"
  },
  {
    "text": "so what we say is that index has this polymorphic kind it doesn't really matter what goes in the list right we",
    "start": "1740039",
    "end": "1748039"
  },
  {
    "text": "can index into any kind of list and we can show that something is found in any kind of list we don't care what kind of",
    "start": "1748039",
    "end": "1754080"
  },
  {
    "text": "list it is so we can generalize over those kinds of values right and this is",
    "start": "1754080",
    "end": "1759200"
  },
  {
    "text": "good because then we can use index in any situation we want like for example to build expressions and notice that if",
    "start": "1759200",
    "end": "1766440"
  },
  {
    "text": "we instantiate this kind this K here with taii we're going to get the type of",
    "start": "1766440",
    "end": "1772279"
  },
  {
    "text": "our indexed expression",
    "start": "1772279",
    "end": "1775679"
  },
  {
    "text": "type okay so let's look at some examples of using that indexed expression type",
    "start": "1778200",
    "end": "1785320"
  },
  {
    "text": "that we just saw right so I've uh I showed you how we could you take the",
    "start": "1785320",
    "end": "1790840"
  },
  {
    "text": "expression type add two parameters to it and suddenly constrain it so that it only represents well typed expression",
    "start": "1790840",
    "end": "1798080"
  },
  {
    "text": "right now I should show you how to work with those well typed Expressions now we have to do one more thing so I want to",
    "start": "1798080",
    "end": "1803760"
  },
  {
    "text": "do this big step evaluator again you remember we evaluated Expressions to values um we need to index our values in",
    "start": "1803760",
    "end": "1811600"
  },
  {
    "text": "the same way that we indexed Expressions I'm not going to show you all the details there so that it can fit it all on the slide but what it does let me do",
    "start": "1811600",
    "end": "1818960"
  },
  {
    "text": "is give a much more precise type of my evaluator now now I can say my evaluator",
    "start": "1818960",
    "end": "1824640"
  },
  {
    "text": "is going to take an expression that has to be closed and I know this expression has no free variables because the typing",
    "start": "1824640",
    "end": "1831519"
  },
  {
    "text": "context is the empty list right and there can't be any variables in in a",
    "start": "1831519",
    "end": "1837640"
  },
  {
    "text": "term that type checks with an empty typing context so I'm going to take an expression that is closed and I'm going",
    "start": "1837640",
    "end": "1845200"
  },
  {
    "text": "to evaluate it and get a closed value so a type is telling us a lot of information right so what does the term",
    "start": "1845200",
    "end": "1852000"
  },
  {
    "text": "look like with those types right the great thing is the term looks exactly",
    "start": "1852000",
    "end": "1857080"
  },
  {
    "text": "the the same as before we don't have to change the program that we wrote even though we've made the types more descriptive right so the evaluator for",
    "start": "1857080",
    "end": "1863919"
  },
  {
    "text": "INS is the same we can comment out this case and Haskell's coverage checker will",
    "start": "1863919",
    "end": "1869799"
  },
  {
    "text": "know that we don't need this case anymore we'll be able to tell that this case is impossible in fact if I didn't",
    "start": "1869799",
    "end": "1876159"
  },
  {
    "text": "comment it out um hasell would give me a type error to say this is a redundant",
    "start": "1876159",
    "end": "1881200"
  },
  {
    "text": "case it's in inacceptable inaccessible because you're not allowed to have a variable in an empty typing context um",
    "start": "1881200",
    "end": "1890080"
  },
  {
    "text": "lambda's expression works exactly the same as before application we're going to evaluate it we know this time when we",
    "start": "1890080",
    "end": "1898200"
  },
  {
    "text": "evaluate it we application has to give us a this E1 has to have the type of a",
    "start": "1898200",
    "end": "1905960"
  },
  {
    "text": "function type so we're not going to get an INT value out for a function type so we can comment that out and has will",
    "start": "1905960",
    "end": "1912440"
  },
  {
    "text": "tell us to do that right and so we know we have we are going to get Lambda",
    "start": "1912440",
    "end": "1917559"
  },
  {
    "text": "expression and then the code we want to just be able to write the same code that we wrote before with that",
    "start": "1917559",
    "end": "1924240"
  },
  {
    "text": "substitution now we're only going to be able to do that if we can add more types",
    "start": "1924240",
    "end": "1929720"
  },
  {
    "text": "to our substitution",
    "start": "1929720",
    "end": "1932799"
  },
  {
    "text": "library and before I go a little bit further I want to tell you I now have two cats on my",
    "start": "1934880",
    "end": "1940480"
  },
  {
    "text": "lap so here's one and here's the other they have joined me and they are keeping",
    "start": "1940480",
    "end": "1947320"
  },
  {
    "text": "company here okay so let's talk about well typed",
    "start": "1947320",
    "end": "1953799"
  },
  {
    "text": "substitutions um so it's the same thing we had before so last time we had",
    "start": "1953799",
    "end": "1960480"
  },
  {
    "text": "substitutions that had a parameter for the the what we were substituting for we had substitutions for A's a was just",
    "start": "1960480",
    "end": "1966760"
  },
  {
    "text": "type it was just X now X has the has its own parameters right so X has a",
    "start": "1966760",
    "end": "1973519"
  },
  {
    "text": "parameter for its typing context and its type so our a that we're using to parameterize substitutions has to have",
    "start": "1973519",
    "end": "1981320"
  },
  {
    "text": "these arguments as well right things are get you know we have these higher order type instructors now but that gives us",
    "start": "1981320",
    "end": "1988440"
  },
  {
    "text": "an opportunity to be more explicit about what's going on in a substitution and when you think about a substitution what",
    "start": "1988440",
    "end": "1993720"
  },
  {
    "text": "is it doing it's transl forming a term that type checks in one typing context",
    "start": "1993720",
    "end": "1998880"
  },
  {
    "text": "to another typing context and so we can add those two typ in context as additional type parameters to the",
    "start": "1998880",
    "end": "2005360"
  },
  {
    "text": "substitution and suddenly we know more what's going on right so now it's not just a substitution for A's but it's a",
    "start": "2005360",
    "end": "2011960"
  },
  {
    "text": "substitution for A's that type check in G1 to A's that type check in G2 and we",
    "start": "2011960",
    "end": "2017799"
  },
  {
    "text": "can see that when we create our single substitutions and then the types of our",
    "start": "2017799",
    "end": "2023399"
  },
  {
    "text": "substitution operation right so just like I I had to make the T kind of a a",
    "start": "2023399",
    "end": "2029559"
  },
  {
    "text": "little bit more explicit here I had to propagate that to my class and use the",
    "start": "2029559",
    "end": "2035399"
  },
  {
    "text": "same kind to talk about the the kind of a in the in the class Index right and so",
    "start": "2035399",
    "end": "2041679"
  },
  {
    "text": "you see that most specifically here in the type of the substitution so if we have a substitution of a for G1 to G2",
    "start": "2041679",
    "end": "2050480"
  },
  {
    "text": "you should be thinking X PA for Expressions here for a that's going to give us an expression where the typing",
    "start": "2050480",
    "end": "2056158"
  },
  {
    "text": "context of G1 of type T and it's going to transform it's going to leave it expression with the same type but it's",
    "start": "2056159",
    "end": "2062839"
  },
  {
    "text": "going to convert it to a new typing context right that's fundamentally what substitution is going to do for us and",
    "start": "2062839",
    "end": "2070638"
  },
  {
    "text": "that's fundamentally the information that we need to know to be able to make",
    "start": "2070639",
    "end": "2076320"
  },
  {
    "text": "our well-typed interpreter type check right so if",
    "start": "2076320",
    "end": "2081919"
  },
  {
    "text": "we um if we go back to this slide right think about it",
    "start": "2081919",
    "end": "2088679"
  },
  {
    "text": "here the types are much stronger here they're telling us a lot more about what's happening on this previous slide",
    "start": "2088679",
    "end": "2094960"
  },
  {
    "text": "so when this last line we're promising we're going to produce a value of type T",
    "start": "2094960",
    "end": "2100359"
  },
  {
    "text": "so when we do our substitution we better know what type of expression and we",
    "start": "2100359",
    "end": "2105760"
  },
  {
    "text": "better know we're going to end up with a closed term just so that we can do this recursive call to the evaluator so our",
    "start": "2105760",
    "end": "2112240"
  },
  {
    "text": "substitution operation has to be as strongly typed as our representation",
    "start": "2112240",
    "end": "2117720"
  },
  {
    "text": "just to be able to Define this function all right and so these are the types that we need for",
    "start": "2117720",
    "end": "2123040"
  },
  {
    "text": "that but the the good news is that that was the job of the library designer the",
    "start": "2123040",
    "end": "2129440"
  },
  {
    "text": "person who's using the library just needs to write the same code that they wrote before this is the code that we",
    "start": "2129440",
    "end": "2136160"
  },
  {
    "text": "need to write and we don't even have to write the type signatures I just put them in for information it's exactly the",
    "start": "2136160",
    "end": "2142359"
  },
  {
    "text": "same code for our weekly typed substitution instance of this class the",
    "start": "2142359",
    "end": "2147440"
  },
  {
    "text": "same operation for substitution still works even though we've made the types much more informative and the best part",
    "start": "2147440",
    "end": "2155079"
  },
  {
    "text": "about this this particular particular definition is that if we got this definition of substitution wrong we",
    "start": "2155079",
    "end": "2161760"
  },
  {
    "text": "would get a lot of Errors from the type Checker the type Checker would tell us if we screw up the substitution in some",
    "start": "2161760",
    "end": "2167640"
  },
  {
    "text": "way like if we forgot to apply the substitution here to apply sub if we had",
    "start": "2167640",
    "end": "2174599"
  },
  {
    "text": "a variable this variable X is a variable from Context G1 we can't then we",
    "start": "2174599",
    "end": "2180560"
  },
  {
    "text": "couldn't just replace this line here with v ex just leave it alone because that wouldn't be a variable in context",
    "start": "2180560",
    "end": "2187319"
  },
  {
    "text": "G2 the only way we can get that variable is to look it up with the apply sub",
    "start": "2187319",
    "end": "2192440"
  },
  {
    "text": "operation if we forget to do one of these recursive calls on E1 or E2 we",
    "start": "2192440",
    "end": "2198240"
  },
  {
    "text": "would get a type error because the context wouldn't line up and so the typing the these precise types are going",
    "start": "2198240",
    "end": "2205319"
  },
  {
    "text": "to force it so that pretty much the only definition that's going to type check is the correct definition for us and that's",
    "start": "2205319",
    "end": "2211800"
  },
  {
    "text": "a really good thing like especially if you're a library designer you worked really hard to set up the types for your",
    "start": "2211800",
    "end": "2218359"
  },
  {
    "text": "library now the types are there to help all the users of your library do exactly",
    "start": "2218359",
    "end": "2223960"
  },
  {
    "text": "the right thing okay so that was all and I'm I'm",
    "start": "2223960",
    "end": "2231319"
  },
  {
    "text": "and I see that I I'm running a little short of time but that was all for the simply type Lambda calculus now I want",
    "start": "2231319",
    "end": "2237480"
  },
  {
    "text": "to switch to system F right and say okay we did it for a language that just had",
    "start": "2237480",
    "end": "2243880"
  },
  {
    "text": "integer types and arrow types what if you had binding in the types themselves",
    "start": "2243880",
    "end": "2250119"
  },
  {
    "text": "right and so that means we have a lot more substitution a lot more binding going on so what if we have system F",
    "start": "2250119",
    "end": "2256119"
  },
  {
    "text": "where we have polymorphic types that we need to substitute at the type level and we also need to be able to bind at the",
    "start": "2256119",
    "end": "2262760"
  },
  {
    "text": "type level right so in order to do that right I want to take my def my my",
    "start": "2262760",
    "end": "2269640"
  },
  {
    "text": "definition that I had before that my as that I had before and I want to extend it so the first thing I need to do to",
    "start": "2269640",
    "end": "2275720"
  },
  {
    "text": "extend it is I need to add new Constructors for our new type forms for variable types and for polymorphic types",
    "start": "2275720",
    "end": "2282960"
  },
  {
    "text": "so this is my binder for type variables and here I'm just using the weekly typed",
    "start": "2282960",
    "end": "2288359"
  },
  {
    "text": "index for that we saw at the very first part of the talk right so this is just a weekly type index to represent type",
    "start": "2288359",
    "end": "2296880"
  },
  {
    "text": "variables and so I want you to make sure and not confuse it with our strongly typed index that we just saw for the",
    "start": "2296880",
    "end": "2303040"
  },
  {
    "text": "strongly typed expression so types are still going to stay weakly typed but Expressions we're going to represent",
    "start": "2303040",
    "end": "2308560"
  },
  {
    "text": "our index using the strongly typed right so using the substitution library for the second part of the talk right now",
    "start": "2308560",
    "end": "2316520"
  },
  {
    "text": "we're going to take this part right here this is the same thing we saw before for the simply type LDA calculus what we",
    "start": "2316520",
    "end": "2322160"
  },
  {
    "text": "want to do is we want to take the exact same thing and extend it with two more",
    "start": "2322160",
    "end": "2329760"
  },
  {
    "text": "data Constructors for type abstraction and for type instantiation right we're",
    "start": "2329760",
    "end": "2336000"
  },
  {
    "text": "not going to make any other changes right we're going to have the same typing context um but we need to say what",
    "start": "2336000",
    "end": "2342640"
  },
  {
    "text": "happens to the types when we create a type abstraction when we generalize over",
    "start": "2342640",
    "end": "2347960"
  },
  {
    "text": "a type variable and what happens to the types of our expression when we instantiate a type",
    "start": "2347960",
    "end": "2353680"
  },
  {
    "text": "variable right now in order to say that if you remember the typing rules for",
    "start": "2353680",
    "end": "2360280"
  },
  {
    "text": "system F like there was a substitution in the typing rle itself so we need to",
    "start": "2360280",
    "end": "2365560"
  },
  {
    "text": "know how to sub itute in types in order to specify the typing roles right so how",
    "start": "2365560",
    "end": "2373000"
  },
  {
    "text": "do we Define substitution well we have a library for substitution let's use that Library so I have this new language that",
    "start": "2373000",
    "end": "2380520"
  },
  {
    "text": "has a binding form that I need to be able to substitute for so in order to have a substitution definition of",
    "start": "2380520",
    "end": "2386560"
  },
  {
    "text": "substitution for that language all I need is an instance of the same class of the same sub DB class that I had before",
    "start": "2386560",
    "end": "2393560"
  },
  {
    "text": "just need to say what the variable form is for the type language so notice here",
    "start": "2393560",
    "end": "2399119"
  },
  {
    "text": "I'm doing tie because I'm defining substitution for types and I need to say",
    "start": "2399119",
    "end": "2405160"
  },
  {
    "text": "where the binder is I am substituting the polymorphic type is a binder for",
    "start": "2405160",
    "end": "2410720"
  },
  {
    "text": "type variables and so I get the substitution operation it just falls out for me now the tricky part is that I",
    "start": "2410720",
    "end": "2420119"
  },
  {
    "text": "don't need the substitution as a function I can call I need this",
    "start": "2420119",
    "end": "2425319"
  },
  {
    "text": "substitution operation in the type itself so I need to use this function that I'm defining as a",
    "start": "2425319",
    "end": "2433000"
  },
  {
    "text": "type and normally this is where you need a dependently type language to in order to be able to take functions that you",
    "start": "2433000",
    "end": "2439359"
  },
  {
    "text": "define and use them in your types and and we don't quite have that in hll right we can't take functions normal",
    "start": "2439359",
    "end": "2446440"
  },
  {
    "text": "hcll functions and use them to describe types so what we have to do here is add",
    "start": "2446440",
    "end": "2452319"
  },
  {
    "text": "this is where the singl tens Library comes in so the singl tens Library has a",
    "start": "2452319",
    "end": "2457520"
  },
  {
    "text": "little bit of magic for us that where if we put our normal term definitions in",
    "start": "2457520",
    "end": "2465760"
  },
  {
    "text": "some singl tense brackets it will create the exact same version except one level",
    "start": "2465760",
    "end": "2471200"
  },
  {
    "text": "up in the type language that we can use for us so we don't have to Define it all",
    "start": "2471200",
    "end": "2476319"
  },
  {
    "text": "over again just so that we can use it in types as well as interns and in order to",
    "start": "2476319",
    "end": "2482720"
  },
  {
    "text": "make for this to make sense right notice that this is working directly with my",
    "start": "2482720",
    "end": "2488200"
  },
  {
    "text": "library for substitution so in order for this to make sense I also have to do this put my library itself in the same",
    "start": "2488200",
    "end": "2495359"
  },
  {
    "text": "Singleton brackets but once I do all of that then the payoff is right here right",
    "start": "2495359",
    "end": "2501200"
  },
  {
    "text": "so if you look at the definition here for type app right so we want to say how",
    "start": "2501200",
    "end": "2507160"
  },
  {
    "text": "what is the when is a type application well typed if I have an expression that has a polymorphic type right the result",
    "start": "2507160",
    "end": "2515480"
  },
  {
    "text": "type should be substituting some argument type for variable zero in the",
    "start": "2515480",
    "end": "2521760"
  },
  {
    "text": "body of that polymorphic type so I get to use the substitution operation that I",
    "start": "2521760",
    "end": "2527640"
  },
  {
    "text": "defined on the previous Slide the only change is I have to make it a capital letter to refer to the one generated",
    "start": "2527640",
    "end": "2533560"
  },
  {
    "text": "from single tense right both for single sub and for Subs right so single tense",
    "start": "2533560",
    "end": "2538960"
  },
  {
    "text": "is generating for that it's also generating this special type here sing",
    "start": "2538960",
    "end": "2544079"
  },
  {
    "text": "that's giving me a way to represent this type argument both using a term",
    "start": "2544079",
    "end": "2549680"
  },
  {
    "text": "expression and as something that I can use to represent in the type itself right so Singleton gives me that",
    "start": "2549680",
    "end": "2558040"
  },
  {
    "text": "and it gives me promoted versions of these operations that I need to use in these types right the same thing we need",
    "start": "2558040",
    "end": "2565760"
  },
  {
    "text": "similar things in a Lambda expression right so if we want for a type Lambda if",
    "start": "2565760",
    "end": "2571319"
  },
  {
    "text": "we're trying to do a type obstruction if we want to create a term that has a polymorphic type",
    "start": "2571319",
    "end": "2577319"
  },
  {
    "text": "well the the body of that polymorphic has to type check in a context where we've incremented all the type variables",
    "start": "2577319",
    "end": "2584520"
  },
  {
    "text": "and I haven't really said what it what this ink list operation is it's another very simple operation that I've defined",
    "start": "2584520",
    "end": "2590599"
  },
  {
    "text": "via the single tense Library okay so last bit um and this is",
    "start": "2590599",
    "end": "2597800"
  },
  {
    "text": "where this last dragon comes in so I said there's no fail Landing we kind of get a little stuck here and I need to",
    "start": "2597800",
    "end": "2604000"
  },
  {
    "text": "show you how I got unstuck right so one thing we have to Define when we do this",
    "start": "2604000",
    "end": "2609760"
  },
  {
    "text": "is an operation for substituting types in inside terms right and the type gets",
    "start": "2609760",
    "end": "2615920"
  },
  {
    "text": "a little hairy for this operation we're taking a substitution for types we have",
    "start": "2615920",
    "end": "2621000"
  },
  {
    "text": "an expression and we want to produce a new expression where we've mapped that substitution across the context and",
    "start": "2621000",
    "end": "2627800"
  },
  {
    "text": "applied that substitution to the type of the term and I'm not going to go through all the details but I will say that when",
    "start": "2627800",
    "end": "2634440"
  },
  {
    "text": "we get to the Lambda case we're going to get this type error from hll right we're going to get this type",
    "start": "2634440",
    "end": "2640359"
  },
  {
    "text": "error from hcll that says I can't make these two contexts line up right this expression doesn't match that expression",
    "start": "2640359",
    "end": "2648480"
  },
  {
    "text": "and and this is actually not surprising that we have this type error right so um",
    "start": "2648480",
    "end": "2653880"
  },
  {
    "text": "here I've just zoomed in on the type error really fast right so here's the type error these two expressions don't",
    "start": "2653880",
    "end": "2660559"
  },
  {
    "text": "line up but this is exactly in the version where they had to write a proof",
    "start": "2660559",
    "end": "2666200"
  },
  {
    "text": "right but we're in high school we can't write aof so what do we",
    "start": "2666200",
    "end": "2672319"
  },
  {
    "text": "do PR says what do we do what do we do we don't have a proof Theory Pascal's",
    "start": "2672319",
    "end": "2678160"
  },
  {
    "text": "not a proof assd are we stuck right can how do we make this term type check right is this the end for our strongly",
    "start": "2678160",
    "end": "2685520"
  },
  {
    "text": "typed term representation of system F right you know um we can't really do it",
    "start": "2685520",
    "end": "2691960"
  },
  {
    "text": "sometimes you can convince hasc's type class solver to do simple proofs for you",
    "start": "2691960",
    "end": "2697319"
  },
  {
    "text": "this is not a simple proof you can't do that sometimes we could do a check at runtime to defer a check we can't do",
    "start": "2697319",
    "end": "2704200"
  },
  {
    "text": "that right the only thing I can really do here is actually tell hasell trust me",
    "start": "2704200",
    "end": "2710640"
  },
  {
    "text": "I know what I'm doing do an unsafe course of the type believe me these two",
    "start": "2710640",
    "end": "2716000"
  },
  {
    "text": "types are equal to these two expressions are equal to each other how do I know that um I know it because well I read",
    "start": "2716000",
    "end": "2723079"
  },
  {
    "text": "this paper they proved it in I could also test it but uh really fundamentally you have to believe me",
    "start": "2723079",
    "end": "2729880"
  },
  {
    "text": "this is dangerous I'm telling you right now don't do this it's dangerous if you",
    "start": "2729880",
    "end": "2735480"
  },
  {
    "text": "get it wrong hasal seg fals but it's exactly the right thing you right need right now in order to finish this thing",
    "start": "2735480",
    "end": "2742280"
  },
  {
    "text": "right that we don't have this proof Theory so we have to have some way and I",
    "start": "2742280",
    "end": "2748119"
  },
  {
    "text": "this is a tradeoff right um you know there's a little bit of danger but then",
    "start": "2748119",
    "end": "2753480"
  },
  {
    "text": "you get everywhere else that's carefully marked but then everywhere else you get the benefit of these strong TRS so",
    "start": "2753480",
    "end": "2760040"
  },
  {
    "text": "here's where I'm going to end with my conclusions um right so that's where we are at the limit right you know",
    "start": "2760040",
    "end": "2766800"
  },
  {
    "text": "sometimes things work we came we actually weren't too surprised because it was honestly it was in the abstract",
    "start": "2766800",
    "end": "2772440"
  },
  {
    "text": "of the paper about COA that they had to do the proof at that point right so we didn't need proofs in the first part but",
    "start": "2772440",
    "end": "2778440"
  },
  {
    "text": "we did need a proof once we got to things where we were really doing some crazy stuff with our types right um so",
    "start": "2778440",
    "end": "2785880"
  },
  {
    "text": "it's really important to think about these trade-offs I think sometimes maybe a unsafe course might be justified here",
    "start": "2785880",
    "end": "2792400"
  },
  {
    "text": "don't kill me but uh I think this it it is an example of of something a",
    "start": "2792400",
    "end": "2799440"
  },
  {
    "text": "discussion that we can have but overall notice that the types didn't interfere",
    "start": "2799440",
    "end": "2804640"
  },
  {
    "text": "in any other part of our development right they didn't get in the way of creating our general purpose library and",
    "start": "2804640",
    "end": "2810880"
  },
  {
    "text": "in parts that I don't really have time to talk about you can also optimize this representation so that you can actually",
    "start": "2810880",
    "end": "2816480"
  },
  {
    "text": "make it efficient as well so that your substitution and the types don't get away in the way at all there either okay",
    "start": "2816480",
    "end": "2823119"
  },
  {
    "text": "so that's I'm going to in there and remind you all the code is available on my GitHub page if you want to take a",
    "start": "2823119",
    "end": "2829240"
  },
  {
    "text": "closer look I have a lot more explanations of things I had to go through kind of quickly here thank",
    "start": "2829240",
    "end": "2836520"
  },
  {
    "text": "you",
    "start": "2843839",
    "end": "2846839"
  }
]