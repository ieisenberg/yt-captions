[
  {
    "start": "0",
    "end": "91000"
  },
  {
    "text": "(light piano music)",
    "start": "352",
    "end": "4828"
  },
  {
    "text": "- My name is Etienne. I work for Gradle. I am leading the billchip project (our effort to\nintegrate with Eclipse).",
    "start": "11256",
    "end": "19107"
  },
  {
    "text": "I am also co-leading\nthe Gradle.com efforts, which is our Sass base solution that will come out soon.",
    "start": "19902",
    "end": "25333"
  },
  {
    "text": "The focus of today is\nto give you more insight into the Gradle build, and how it relates to the Android build.",
    "start": "26584",
    "end": "32854"
  },
  {
    "text": "But before we get started, I would like to ask you: ",
    "start": "35646",
    "end": "42018"
  },
  {
    "text": "Who is doing Android development, that is listening? Most of the people, I would say 90%.",
    "start": "42649",
    "end": "48722"
  },
  {
    "text": "Who is using Android studio? Maybe I should ask\nthe other way around.",
    "start": "49377",
    "end": "55043"
  },
  {
    "text": "Who is not using Android studio? Maybe 5 hands, or so.",
    "start": "55043",
    "end": "60122"
  },
  {
    "text": "Who has touched the Gradle build? Interesting.",
    "start": "62519",
    "end": "67685"
  },
  {
    "text": "I would say maybe two thirds. I always ask that question, and\nit goes up every time I ask.",
    "start": "67685",
    "end": "73952"
  },
  {
    "text": "I am not sure if that is\na good sign, or not. I think it is. And who is using Gradle\noutside of an Android project?",
    "start": "74626",
    "end": "81253"
  },
  {
    "text": "Java development, Scala. Maybe five hands.",
    "start": "81440",
    "end": "85676"
  },
  {
    "text": "That came up. What is the motivation to talk about Gradle, and Android:",
    "start": "87910",
    "end": "94870"
  },
  {
    "start": "91000",
    "end": "109000"
  },
  {
    "text": "it is just a build system. Why this big deal\nof making this choice,",
    "start": "94933",
    "end": "100297"
  },
  {
    "text": "and not another. I want to go into that some more to give you some context.",
    "start": "100297",
    "end": "107462"
  },
  {
    "start": "109000",
    "end": "174000"
  },
  {
    "text": "The Android build is\nimplicitly very complex. If you compare it to just a Java project,",
    "start": "109761",
    "end": "116838"
  },
  {
    "text": "Android build is more complex. You can also see that on\nthis  hand side graph",
    "start": "116838",
    "end": "122271"
  },
  {
    "text": "(from Xavier, Android Lead). It is a simplification of what happens",
    "start": "122271",
    "end": "127413"
  },
  {
    "text": "during the Android build, potentially. And it does not even include everything. There is complexity involved,",
    "start": "127413",
    "end": "132511"
  },
  {
    "text": "more than just compile. You have your classes,\nyou chart them up, and you are done.",
    "start": "132511",
    "end": "136439"
  },
  {
    "text": "Typically when you do Android development you are part of a team, and not everybody might do Android stuff on that team.",
    "start": "138141",
    "end": "143551"
  },
  {
    "text": "You might also have a back end team. they are doing Java or Scala; quickly you have multiple languages.",
    "start": "143551",
    "end": "149136"
  },
  {
    "text": "(Java, Android, etc). That needs to be part of it as well.",
    "start": "149136",
    "end": "154373"
  },
  {
    "text": "You have resource generation, extraction of artifacts, and conversion to other\nartifacts.",
    "start": "154373",
    "end": "160647"
  },
  {
    "text": "You have to splat from diversity. All the fragmentation that you definitely know better than I do.",
    "start": "161233",
    "end": "168124"
  },
  {
    "text": "But it is there. There is complexity involved in dealing\nwith the Android build.",
    "start": "168124",
    "end": "175966"
  },
  {
    "start": "174000",
    "end": "227000"
  },
  {
    "text": "And if you look at this\ncomplexity on this graph here, expressiveness versus conciseness,",
    "start": "178085",
    "end": "184891"
  },
  {
    "text": "you can see that with Ant,\nyou can be very expressive, you can basically do everything. Ant",
    "start": "185859",
    "end": "191274"
  },
  {
    "text": "is very expressive, but it also grows quickly.",
    "start": "192004",
    "end": "197263"
  },
  {
    "text": " You have to tell it with\ndetail what to do. On the other end you have\nMaven, which is very concise,",
    "start": "197263",
    "end": "204249"
  },
  {
    "text": "it is XML based approach. It is concise, but not\nvery expressive.",
    "start": "204249",
    "end": "209904"
  },
  {
    "text": "To all of you who have a custom build know how fast you get to\nyour limitations of that.",
    "start": "209907",
    "end": "215315"
  },
  {
    "text": "Gradle combines the two. It is concise. I am going to give you an example (also very expressive).",
    "start": "215785",
    "end": "222368"
  },
  {
    "start": "227000",
    "end": "281000"
  },
  {
    "text": "In this example here, this is a fully self\ncontained Android build.",
    "start": "227599",
    "end": "234304"
  },
  {
    "text": "Different product flavors, two flavor dimensions",
    "start": "234959",
    "end": "240527"
  },
  {
    "text": "combined with a build\ntype; ",
    "start": "240527",
    "end": "245658"
  },
  {
    "text": "an explosion of cross products. That leads to tasks.",
    "start": "245658",
    "end": "250282"
  },
  {
    "text": "(I am not sure, maybe in the first row\nyou can still read that). (I can. But definitely not in the last row).",
    "start": "251254",
    "end": "257535"
  },
  {
    "text": "You end up with\n300 tasks. I want to show",
    "start": "257536",
    "end": "262608"
  },
  {
    "text": "the very concise DSL (things happen behind the scenes).",
    "start": "262608",
    "end": "269066"
  },
  {
    "text": "If you wanted to achieve\nthe same with Ant, you would have to write more to achieve the same result.",
    "start": "269629",
    "end": "275358"
  },
  {
    "text": "With Maven, I do not\nknow how you would do that.",
    "start": "275967",
    "end": "278957"
  },
  {
    "start": "281000",
    "end": "327000"
  },
  {
    "text": "Regarding the languages. You have multiple\nlanguages. You typically also have multiple teams.",
    "start": "281888",
    "end": "286871"
  },
  {
    "text": "And then you want to collaborate\non the same softwares. So you want a build\nsystem",
    "start": "288339",
    "end": "293865"
  },
  {
    "text": "that allows you to interact\nbetween the different teams. Artifacts are consumed, are produced.",
    "start": "293865",
    "end": "299190"
  },
  {
    "text": "You also want to have\nthese coordinated releases. Even before the release. If you change\nsomething your back end,",
    "start": "299888",
    "end": "306413"
  },
  {
    "text": "you want to know whether\nthis affect your overall application which includes\nan Android part or no.",
    "start": "306413",
    "end": "312212"
  },
  {
    "text": "You need this coordinated release, and that is really one of\nthe strengths of Gradle: one big project,",
    "start": "312770",
    "end": "320780"
  },
  {
    "text": "with sub-projects and it\nbonds it up, all together. In the end you\ndo not just shape APK.",
    "start": "320780",
    "end": "327857"
  },
  {
    "start": "327000",
    "end": "396000"
  },
  {
    "text": "You shape a product, and there is more involved, even beyond building this artifact,",
    "start": "327857",
    "end": "333082"
  },
  {
    "text": "so you want to do automated releases, send release e-mails, do all the provision\nof development environments.",
    "start": "333082",
    "end": "340321"
  },
  {
    "text": "You might create some test, some documentation with\ntest code.",
    "start": "340321",
    "end": "345975"
  },
  {
    "text": "Or code that has been\ntested automated manner. (there is a lot to it).",
    "start": "347142",
    "end": "352958"
  },
  {
    "text": "To give you one example: Linkedin, a big Gradle user.",
    "start": "352958",
    "end": "358567"
  },
  {
    "text": "2,000 developers, 2,000 components, and they do about 300,000 builds a week,",
    "start": "359129",
    "end": "367149"
  },
  {
    "text": "and 1,000 release builds a day. If you see that scale, that is probably not the\nscale of everyone working,",
    "start": "368501",
    "end": "375063"
  },
  {
    "text": "or in that room  now, but if you are working\nin such a environment,",
    "start": "375063",
    "end": "378964"
  },
  {
    "text": "if you have a very disconnected build, artifacts here and there,\nand then you just somehow put it together,",
    "start": "383584",
    "end": "389624"
  },
  {
    "text": "it is not going to scale.  Let's take a look at\nthe Android build system.",
    "start": "389624",
    "end": "396757"
  },
  {
    "start": "396000",
    "end": "607000"
  },
  {
    "text": "The Android build system is a beautiful piece of\nsoftware in my opinion. Because it takes the best\nof read of different things.",
    "start": "397389",
    "end": "403817"
  },
  {
    "text": "It uses the Android Studio IDE, it is your user interface,",
    "start": "403817",
    "end": "408961"
  },
  {
    "text": "based on the IntelliJ platform. You have the Android Gradle Plugin,",
    "start": "408961",
    "end": "414952"
  },
  {
    "text": "which is then again based\non the Gradle platform. And you have the Android Tooling. We want to look at today",
    "start": "414952",
    "end": "422307"
  },
  {
    "text": "the Android Gradle Plugin and the Gradle platform, and treat them as one.",
    "start": "422308",
    "end": "427623"
  },
  {
    "text": "In the end, you do not care; when your build is slow, whether it is the Android Plugin\nor it is the Gradle build.",
    "start": "427623",
    "end": "434356"
  },
  {
    "text": "Your build is just slow? Or it is fast, but then\nyou do not care neither.",
    "start": "434356",
    "end": "439686"
  },
  {
    "text": " What makes it so nice about the Android build system",
    "start": "440830",
    "end": "446542"
  },
  {
    "text": "is that there is a single source of truth when it comes to the build logic.",
    "start": "446542",
    "end": "451273"
  },
  {
    "text": "The build is the only place that defines what your build does.",
    "start": "452599",
    "end": "458648"
  },
  {
    "text": "There is nothing on top of that in the IDE. When you open your project, you do not go into your IDE and say,",
    "start": "458648",
    "end": "464927"
  },
  {
    "text": "I also need this\nlibrary and that library. That is all defined by the build.",
    "start": "464927",
    "end": "469653"
  },
  {
    "text": "It is visionary, before it had not been done.",
    "start": "470703",
    "end": "475996"
  },
  {
    "text": "You do configuration in your Eclipse, (e.g. Eclipse with Ant before).",
    "start": "475997",
    "end": "482277"
  },
  {
    "text": "You had to do everything in\nEclipse for Android development. To define what",
    "start": "482277",
    "end": "488696"
  },
  {
    "text": "dependencies you use, you do that in your build. Where are my sources. You do that in the build, but not in the IDE.",
    "start": "488696",
    "end": "494675"
  },
  {
    "text": "The IDE will be configured\nbased on your model. I will show you\nthat in a bit more detail.",
    "start": "494675",
    "end": "499963"
  },
  {
    "text": "Up on the left you\nsee the Android Studio, that is you, the developer,\nworking Android Studio,",
    "start": "501339",
    "end": "507074"
  },
  {
    "text": "In the end, since the build, Gradle is the only place\nthat has the build logic.",
    "start": "507074",
    "end": "512167"
  },
  {
    "text": "It has to communicate with Gradle to understand what it has to\npresent/do.",
    "start": "512167",
    "end": "517594"
  },
  {
    "text": "That happens through the Tooling API. Does anybody know what the tooling API is? Or that it exists?",
    "start": "518575",
    "end": "523951"
  },
  {
    "text": "No one. That is interesting. When you\nhave the Android Studio,",
    "start": "524561",
    "end": "530165"
  },
  {
    "text": "the Gradle build, the\nway they talk to each other is through a\nlibrary called tooling API.",
    "start": "530165",
    "end": "535593"
  },
  {
    "text": "The tooling API lives\nin the Android Studio (on the class path of the IDE).",
    "start": "535831",
    "end": "541160"
  },
  {
    "text": "Through\ninterprocess communication, it talks to the Gradle build. The Gradle build",
    "start": "542885",
    "end": "549037"
  },
  {
    "text": "(Gradle daemon) is a separate process. If you want to compile,",
    "start": "549038",
    "end": "554061"
  },
  {
    "text": "the interstudio will tell\nthe tooling API, compile, and the tooling API\nwill talk to the daemon",
    "start": "556343",
    "end": "562519"
  },
  {
    "text": "through interprocess communication. Daemon will compile that build with that task.",
    "start": "562519",
    "end": "567854"
  },
  {
    "text": "That is how it is working. If you come from the command line, you still interact with\nGradle. With the Gradle daemon, if you have it enabled,",
    "start": "569973",
    "end": "577049"
  },
  {
    "text": "but you just come in\nthrough a different way (the launcher). You do not come in\nthrough the tooling API,",
    "start": "577653",
    "end": "582799"
  },
  {
    "text": "but through the launcher. If you are in a continuous\nintegration server, you also involve Gradle directly.",
    "start": "582799",
    "end": "588073"
  },
  {
    "text": "All that just works because Gradle is the single source of truth when it comes to build logic. Everybody carries Gradle.",
    "start": "589030",
    "end": "595671"
  },
  {
    "text": "What are my projects? What is my compile class path? What is my test compile\nclass path, etcetera.",
    "start": "595671",
    "end": "602418"
  },
  {
    "text": "To dig into\nthat a little bit more, the tooling API (in green).",
    "start": "603723",
    "end": "610888"
  },
  {
    "start": "607000",
    "end": "834000"
  },
  {
    "text": "It is a proxy for talking to Gradle. We will see some of the\nbenefits on the next slide.",
    "start": "612611",
    "end": "619363"
  },
  {
    "text": "There is also a mechanism\nto provide custom models. That is exactly what\nhappens with Android.",
    "start": "619856",
    "end": "624975"
  },
  {
    "text": "How does Android\nget all the information it needs from the build",
    "start": "624975",
    "end": "630008"
  },
  {
    "text": "that it can present it in the IDE, or configure the IDE (your custom model).",
    "start": "630408",
    "end": "635177"
  },
  {
    "text": "Android asks Gradle,\nplease give me that model for Android. Android, the model comes back",
    "start": "635447",
    "end": "641889"
  },
  {
    "text": "and it contains all the\ninformation about the variants, and the flavors. IDE can consume that",
    "start": "641889",
    "end": "648200"
  },
  {
    "text": "and configure the IDE accordingly. If you want to look at it, it is default Android\nproject that is the model.",
    "start": "648200",
    "end": "654627"
  },
  {
    "text": "(that is what the Android guys do) They write a model, provide a plugin. That is what you always\nsupply in your script?",
    "start": "655236",
    "end": "661769"
  },
  {
    "text": "It says supply plugin something Android, and registers that model. You can ask for that model",
    "start": "661769",
    "end": "667411"
  },
  {
    "text": "through the tooling API.  There is the client\nVM (the IDE).",
    "start": "667411",
    "end": "673030"
  },
  {
    "text": "That is the little chore file (800 k's or so). It asks Gradle,\nthrough the tooling API,",
    "start": "673030",
    "end": "678998"
  },
  {
    "text": "give me that build model\nor invoke some tasks. Build models you ask for,",
    "start": "678998",
    "end": "684779"
  },
  {
    "text": "to configure the IDE. Invoking build tasks you execute something in the build.",
    "start": "684779",
    "end": "690220"
  },
  {
    "text": "Some of the\nadvantages of that approach is the backward\ncompatibility.",
    "start": "692524",
    "end": "699132"
  },
  {
    "text": "Even if your Gradle build used 1.0, you could still talk to it. You might not have all the\nfunctionality available,",
    "start": "699132",
    "end": "704855"
  },
  {
    "text": "but it is still compatible. You have Runtime Isolation. Let's say Gradle had a memory leak.",
    "start": "704855",
    "end": "712050"
  },
  {
    "text": "That would not affect Android studio, because it is a different process. If Android Studio had a memory leak,",
    "start": "712921",
    "end": "717933"
  },
  {
    "text": "Gradle would not be affected because it is a different process. (Two sides to look at it).",
    "start": "717933",
    "end": "722988"
  },
  {
    "text": "There are some high level services, so you can cancel a build. That goes to the tooling API,",
    "start": "723854",
    "end": "728957"
  },
  {
    "text": "whatever it does, it will stop it. It has a continuous mode. I will show that later on.",
    "start": "728957",
    "end": "734316"
  },
  {
    "text": "And you can also execute tests. Android Studio is not using that, but I think\nthey will at some point.",
    "start": "734316",
    "end": "740300"
  },
  {
    "text": "If you have a specific API\non it when you run a test, that the test is executed by Gradle.",
    "start": "740678",
    "end": "746111"
  },
  {
    "text": "Which makes sense, because only Gradle knows what\nis the class path, etcetera, to run that test.",
    "start": "746111",
    "end": "750698"
  },
  {
    "text": "The IDE does not really know. It can only do an approximation. There is an event model,",
    "start": "751191",
    "end": "757567"
  },
  {
    "text": "as you run a build through the\ntooling API you get events. Of course you get all the log output. You get progress.",
    "start": "757567",
    "end": "763674"
  },
  {
    "text": "But you also get events like configuration phase starts, stops. Execution phase starts, stops.",
    "start": "763674",
    "end": "769078"
  },
  {
    "text": "Tests have started. Tests have\nfinished or failed, etcetera. All this is consumable\nthrough the tooling API.",
    "start": "769078",
    "end": "776313"
  },
  {
    "text": "And if you looked up build shaper or Gradle integration for Eclipse, you would see that if,\nwhen you are on the build, you see a tree that shows you",
    "start": "776875",
    "end": "782865"
  },
  {
    "text": "all these events happening. Why is all this possible? Gradle has a very rich model.",
    "start": "782866",
    "end": "789282"
  },
  {
    "text": "By having a rich model,\nit knows all these things. It knows what they mean. ",
    "start": "789776",
    "end": "795070"
  },
  {
    "text": "With that information\nthere is so much you can do. If you compare this to an Ant build, and I am not going to say\nanything against Ant,",
    "start": "795070",
    "end": "802217"
  },
  {
    "text": "but when you do something with Ant, Ant itself does not know\nwhat you are doing. It is very imperative.",
    "start": "802217",
    "end": "808985"
  },
  {
    "text": "There is no way to\nprovide these rich models like they are, it is the case in Gradle.",
    "start": "808985",
    "end": "815464"
  },
  {
    "text": "Regarding perfomance. We all want\nperformance to be lightning fast.",
    "start": "816399",
    "end": "821845"
  },
  {
    "text": "I used this picture\nbecause it also uses parallel lightning going\nfrom top to bottom.",
    "start": "822570",
    "end": "828295"
  },
  {
    "text": "Which is that key\naspect of performance: doing things in parallel.",
    "start": "829136",
    "end": "833333"
  },
  {
    "start": "834000",
    "end": "863000"
  },
  {
    "text": "What is our goal? Our goal is to minimize the build time, to say it in a simple way.",
    "start": "834407",
    "end": "841488"
  },
  {
    "text": "Using\nas little memory as needed. Why?",
    "start": "841488",
    "end": "847391"
  },
  {
    "text": "We want quicker feedback\nabout build figures. We want to do more builds per day. We want to do more releases per day.",
    "start": "848209",
    "end": "855454"
  },
  {
    "text": "And we want to do more rounds\non continuous integration. (and many more reasons.) There many more reasons\nwhy we want to have fast builds.",
    "start": "855454",
    "end": "861410"
  },
  {
    "text": "When you do development, from one round to the next one,",
    "start": "862787",
    "end": "870630"
  },
  {
    "start": "863000",
    "end": "944000"
  },
  {
    "text": "usually not much changes in your build. You might have this complex build, but what do you usually do?",
    "start": "870630",
    "end": "875780"
  },
  {
    "text": "You change some source files. You change some tests. Maybe once in a while\nyou remove a resource or you add one.",
    "start": "875780",
    "end": "881724"
  },
  {
    "text": "Or you add a dependency\nor change a dependency but that is already rare. You do not do this for every build.",
    "start": "881724",
    "end": "887134"
  },
  {
    "text": "Between these consecutive test runs, typically not much changes. And if not much changes,\nnot much should have",
    "start": "888602",
    "end": "896298"
  },
  {
    "text": "to be worked by the build. When little changes in the build,",
    "start": "896298",
    "end": "901789"
  },
  {
    "text": "little work should be done. That is something you currently see in the Android plugin, that is not the case.",
    "start": "901789",
    "end": "908243"
  },
  {
    "text": "Even if you have a big Android project, Gradle task, or Gradle help,",
    "start": "908244",
    "end": "913832"
  },
  {
    "text": "it will take a while, and that time is proportional to the size of the build.",
    "start": "913832",
    "end": "919590"
  },
  {
    "text": "And it should not be, because\nwhen you say Gradle help, you are not even executing\nanything in your build.",
    "start": "919590",
    "end": "925180"
  },
  {
    "text": "When you do builds, do they take longer than\nyou wish them to take?",
    "start": "927229",
    "end": "932936"
  },
  {
    "text": "Yes, nodding. That is, for the most part,",
    "start": "933916",
    "end": "939605"
  },
  {
    "text": "due to the configuration phase. we will come to that. what is the approach at Gradle",
    "start": "939605",
    "end": "945916"
  },
  {
    "start": "944000",
    "end": "982000"
  },
  {
    "text": "to improve the performance? that applies to the\nAndroid perspective, but also to all the other ones at Gradle",
    "start": "945916",
    "end": "952991"
  },
  {
    "text": "that are not related to Android. Two approaches. One is the evolutionary one.",
    "start": "953481",
    "end": "958553"
  },
  {
    "text": "You make little\nimprovements here and there. They might have a significant impact. and I will show that in a graph later on.",
    "start": "958553",
    "end": "965542"
  },
  {
    "text": "There is also the way to say let's make some revolutionary changes to make the next step\nin terms of performance.",
    "start": "965542",
    "end": "973552"
  },
  {
    "text": "You might only\ndo local optimization, but not the global optimization otherwise.",
    "start": "973552",
    "end": "978678"
  },
  {
    "text": "That is currently\nhappening. We will see that. When you build with Gradle.",
    "start": "979543",
    "end": "985602"
  },
  {
    "start": "982000",
    "end": "1421000"
  },
  {
    "text": "You have a two phase build. Is anybody familiar with this,\nthat you have a two phases?",
    "start": "985603",
    "end": "991143"
  },
  {
    "text": "You have a configuration\nphase and an execution phase. Some people seem\nto be familiar with that.",
    "start": "991143",
    "end": "997574"
  },
  {
    "text": " You say Gradle build or whatever you call, if you ever go to the command line.",
    "start": "997574",
    "end": "1001859"
  },
  {
    "text": "Two things will happen. The first thing is the\nconfiguration phase. That is when your build logic is executed,",
    "start": "1003072",
    "end": "1009689"
  },
  {
    "text": "and the build model is built. In the execution\nphase, that build model is acted upon, which means\nthe tasks are executed.",
    "start": "1009689",
    "end": "1017207"
  },
  {
    "text": "We will look at these two phases, and I will start with the execution phase. Because that is the one\nwhere more has been done,",
    "start": "1019558",
    "end": "1025718"
  },
  {
    "text": "and then we will come to\nthe configuration phase. What are we already doing in terms of optimization during\nthe execution phase.",
    "start": "1025718",
    "end": "1032418"
  },
  {
    "text": "One is the incremental build feature. If you think of tasks, tasks have",
    "start": "1032981",
    "end": "1039756"
  },
  {
    "text": "inputs and outputs in Gradle. Meaning a task consumes certain\ninputs, like a function,",
    "start": "1039756",
    "end": "1046642"
  },
  {
    "text": "does something with them, and produces an output. In Gradle you can\nannotate, or declare,",
    "start": "1047298",
    "end": "1055368"
  },
  {
    "text": "what are a task's input,\nand what are the outputs. And with that information,\nGradle can do incremental builds.",
    "start": "1055369",
    "end": "1063230"
  },
  {
    "text": "If the inputs\nhave not changed, and the outputs have not changed, there is no\nneed to run that task again.",
    "start": "1063230",
    "end": "1069332"
  },
  {
    "text": "let's say you have\nproject and you do a compile. It has source files, no compiled files.",
    "start": "1070591",
    "end": "1076571"
  },
  {
    "text": "It will do the compilation. Now you run it again. Does it have to do anything if\nyou did not change the source",
    "start": "1077482",
    "end": "1083351"
  },
  {
    "text": "file or if you did not\nremove the class files? No. Everything is still the same.",
    "start": "1083351",
    "end": "1088449"
  },
  {
    "text": "And by using, by Gradle\nknowing what the inputs and outputs are it can do\nthat optimization for you.",
    "start": "1088966",
    "end": "1094927"
  },
  {
    "text": "So that is why, when you say\nGradle build, Gradle build, if you have a normally\nconfigured build, I would say,",
    "start": "1096744",
    "end": "1103889"
  },
  {
    "text": "you see it just up to date,\nup to date, up to date, and nothing really has been done. Which is good, because\nif nothing has changed,",
    "start": "1104801",
    "end": "1111414"
  },
  {
    "text": "nothing should be done. Like I said before.",
    "start": "1111414",
    "end": "1114561"
  },
  {
    "text": "This is just a small example. if you wrote your own\ntask, and it does not, the ones from Gradle look very similar.",
    "start": "1116958",
    "end": "1123588"
  },
  {
    "text": "I wrote a task called conversion task, and it takes a file, it does something with that file,",
    "start": "1124499",
    "end": "1131186"
  },
  {
    "text": "and it creates a new file. it is just a transformation. What it does, does not matter, that is why I put a comment there.",
    "start": "1131186",
    "end": "1137380"
  },
  {
    "text": "That is how you would call\nit in your Gradle script. You would just say I have a task, it is of this type.",
    "start": "1138895",
    "end": "1144768"
  },
  {
    "text": "My inputs is one or more files. I am using just this one, and",
    "start": "1145215",
    "end": "1150782"
  },
  {
    "text": "my target directory will reconvert the files written to\nthis folder.",
    "start": "1150782",
    "end": "1157255"
  },
  {
    "text": "That is how you would use it. By using these annotations, the input files and the output directory,",
    "start": "1157425",
    "end": "1164314"
  },
  {
    "text": "you are now telling Gradle what are my inputs and outputs. And Gradle will manage these,",
    "start": "1164314",
    "end": "1170137"
  },
  {
    "text": "it will keep track of them, so that when you want it, it will remember what were the values\nthe last time you ran it.",
    "start": "1170137",
    "end": "1176238"
  },
  {
    "text": "If device is still\nthe same, it will say, oh this task is up to date, let's skip it.",
    "start": "1176546",
    "end": "1180720"
  },
  {
    "text": "Who has used\nAnt and has used a time stamp approach to\nsee if no of the time stamps",
    "start": "1181863",
    "end": "1188192"
  },
  {
    "text": "have changed, and\nthen it is not going to do it? There is at least one hand. I used to do that too.",
    "start": "1188192",
    "end": "1193714"
  },
  {
    "text": "I had to do this every time again, when I had such a task that was sensitive to inputs and outputs.",
    "start": "1193714",
    "end": "1199811"
  },
  {
    "text": "Here it is totally baked into the system. ",
    "start": "1200583",
    "end": "1205709"
  },
  {
    "text": "that is it. that is the conversion task. To give you an idea of what is input and output means.",
    "start": "1207455",
    "end": "1212391"
  },
  {
    "text": "We will come back to that concept during the configuration phase. That is why I want to show it here first.",
    "start": "1214091",
    "end": "1219073"
  },
  {
    "text": "There is another. This is such a simple concept. You have an input, you have an output.",
    "start": "1220448",
    "end": "1225509"
  },
  {
    "text": "You keep track of it or\nGradle keeps track of it, and then you can do all sorts of things. I just showed you the\nincremental build feature.",
    "start": "1225510",
    "end": "1231844"
  },
  {
    "text": "Another one is the\ncontinuous build feature. What you can do is, and even you could do that",
    "start": "1231844",
    "end": "1237834"
  },
  {
    "text": "with an Android build, it is not specific to any type of build. I am just saying gradle\nthat is a Gradle wrap,",
    "start": "1237834",
    "end": "1245089"
  },
  {
    "text": "or it would be Gradle. I say test dash t. Dash t stands for continuous mode.",
    "start": "1245089",
    "end": "1250999"
  },
  {
    "text": "You can see it starts to build, it does\nwhatever it needs to do, even if you did not have the dash t,",
    "start": "1251701",
    "end": "1259015"
  },
  {
    "text": "build successful. Whether they did something or not does not matter total time, but then you do not\nget back to the command line",
    "start": "1259015",
    "end": "1266663"
  },
  {
    "text": "prompt. It is saying\nnow waiting for changes. Then it is just waiting there,",
    "start": "1266663",
    "end": "1273376"
  },
  {
    "text": "and if you now change\nsomething that is an input of the task invoked, then it\nwould automatically trigger",
    "start": "1273952",
    "end": "1281539"
  },
  {
    "text": "the build, and do what is needed. Let's say\nyou write",
    "start": "1281540",
    "end": "1287716"
  },
  {
    "text": " documentation using\nsomething like Asciidoc. You are always changing the file,",
    "start": "1287716",
    "end": "1293930"
  },
  {
    "text": "running Gradle build. Changing the file, running Gradle build. With the continuous mode, you just change",
    "start": "1293930",
    "end": "1299544"
  },
  {
    "text": "your file, and you go to the browser. You say refresh and it is there.",
    "start": "1299544",
    "end": "1304926"
  },
  {
    "text": "As soon as you\nchange the source file, and it is detecting the\nchange, it is going to rebuild the artifact, and you are going to see it.",
    "start": "1305326",
    "end": "1311752"
  },
  {
    "text": "How does it know what you did, what to track. It cannot just track your whole file system.",
    "start": "1312384",
    "end": "1317069"
  },
  {
    "text": "What does it track is your inputs. If your task has defined the inputs, then it knows where to look for changes.",
    "start": "1317400",
    "end": "1325098"
  },
  {
    "text": "It will just watch these\nchanges if they happen. If they happen it knows\nto trigger a build.",
    "start": "1325261",
    "end": "1330266"
  },
  {
    "text": "Very powerful\nfeature that is possible based on this very simple concept of declaring inputs and outputs.",
    "start": "1331247",
    "end": "1337645"
  },
  {
    "text": "That is really key.  The more you tell Gradle\nwhat you are doing,",
    "start": "1337906",
    "end": "1344557"
  },
  {
    "text": "and what you have, the more it can do it. The more smarter things it can do, without you having to do them.",
    "start": "1344557",
    "end": "1349664"
  },
  {
    "text": "You could implement yourself, like a watch mode, and\nthere even plugins for that, but now it is available to\nevery task that has inputs.",
    "start": "1349665",
    "end": "1356997"
  },
  {
    "text": "In terms of performance improvements, they are applicable to\nAndroid projects as well.",
    "start": "1358906",
    "end": "1365866"
  },
  {
    "text": "You can command the builds; have been there for a very long time. But if you have a big project,\ndetecting whether something",
    "start": "1366986",
    "end": "1374434"
  },
  {
    "text": "has changed or not took quite some time. It had to go over all\nthe files, create some, look at the time stamps, do\nsome check sums, etcetera.",
    "start": "1374435",
    "end": "1381725"
  },
  {
    "text": "Just to decide whether\neverything is up to date or not. Or something is out of date or not.",
    "start": "1381916",
    "end": "1387367"
  },
  {
    "text": "And it is especially painful when you have a big project and nothing has changed.",
    "start": "1387643",
    "end": "1393373"
  },
  {
    "text": "Because what it will do is will go through your 400,000 files just to realize nothing has changed",
    "start": "1393927",
    "end": "1400094"
  },
  {
    "text": "And that takes time. In just the latest release that is RC1 is out now,",
    "start": "1400094",
    "end": "1405855"
  },
  {
    "text": "there has been some improvements to the management of\nthese file check sums. If you have\na very large project,",
    "start": "1406720",
    "end": "1412269"
  },
  {
    "text": "you will see that if you\nhave almost no changes, that will be much faster to detect.",
    "start": "1412889",
    "end": "1417836"
  },
  {
    "text": "If you have a small project, you will also notice a difference, but it is just not as spectacular as the project is big.",
    "start": "1418446",
    "end": "1424198"
  },
  {
    "start": "1421000",
    "end": "1525000"
  },
  {
    "text": " That brings us back: ",
    "start": "1424784",
    "end": "1430984"
  },
  {
    "text": " if little has changed,\nlittle should happen.",
    "start": "1430984",
    "end": "1434290"
  },
  {
    "text": "Next: fast compilation\nfor continuous mode. Let's say you are using\nthat continuous mode, you are making changes,\nIt is always building",
    "start": "1436014",
    "end": "1442678"
  },
  {
    "text": "as things are changing. If you are compiling as part of this, this change that happens,",
    "start": "1442678",
    "end": "1448707"
  },
  {
    "text": "Gradle will spawn a compiler daemon, by default at least for Java.",
    "start": "1448707",
    "end": "1453257"
  },
  {
    "text": "The other ones you can configure to use a compiler daemon. With continuous builds",
    "start": "1453998",
    "end": "1459973"
  },
  {
    "text": "this daemon will stay alive, even as the build round.",
    "start": "1459973",
    "end": "1465383"
  },
  {
    "text": "As long as the build session of a continuous build rounds, the compiler daemon will be there.",
    "start": "1465383",
    "end": "1469766"
  },
  {
    "text": "Everything that is already there is much faster to use than if it has to start up,\nit has to warm up.",
    "start": "1470421",
    "end": "1476193"
  },
  {
    "text": "These are all\nevolutionary improvements.",
    "start": "1477151",
    "end": "1479653"
  },
  {
    "text": "Let's look at the configuration phase. If you look\nat your build scripts,",
    "start": "1482863",
    "end": "1489810"
  },
  {
    "text": "even though in\nAndroid it is declarative as soon as you do your own stuff,",
    "start": "1489810",
    "end": "1495907"
  },
  {
    "text": "it becomes imperative. Even if you do not\nwrite any imperative code,",
    "start": "1495907",
    "end": "1501148"
  },
  {
    "text": "what happens behind the\nscene by the Android plugin is quite imperative. You might have a\nDSL, that is declarative,",
    "start": "1501149",
    "end": "1507248"
  },
  {
    "text": "but what Android has to do\nis imperative. And as soon as it gets imperative in your code or in the plugin's code",
    "start": "1507248",
    "end": "1513494"
  },
  {
    "text": "Gradle does not know what you are doing. And if it does not know what you are doing, it cannot optimize things.",
    "start": "1513494",
    "end": "1519804"
  },
  {
    "text": "What do people do? They do things lazily because it should not happen early, Or  use lazy collections.",
    "start": "1521226",
    "end": "1528999"
  },
  {
    "start": "1525000",
    "end": "1763000"
  },
  {
    "text": "They detect all the\nchanges that come later. Or they use the project afterEvaluate, which is a hook where it allows you",
    "start": "1528999",
    "end": "1534990"
  },
  {
    "text": "to say, the\nconfiguration phase is finished, now let me do something. What if multiple people add such hook?",
    "start": "1534990",
    "end": "1540822"
  },
  {
    "text": "Who is add, who is going to be called first, who is going to be called last. There is trickery to make this work in a complex",
    "start": "1540822",
    "end": "1548601"
  },
  {
    "text": "set up like the Android build. Is very complex if you think of build flavors,\nAndroid has to know.",
    "start": "1548601",
    "end": "1554767"
  },
  {
    "text": "Are you done declaring\nyour build flavors? Until that is the case,\nthey cannot redo anything.",
    "start": "1554767",
    "end": "1561101"
  },
  {
    "text": "But when, it does not\nknow when you are done. It has to do these late hooks",
    "start": "1561477",
    "end": "1566562"
  },
  {
    "text": "that do not work. What you end up with is a\ndeclarative build model. That is the output\nof the configuration phase.",
    "start": "1566562",
    "end": "1573458"
  },
  {
    "text": "This is declarative, you have your model. But the problem is Gradle\ndoes not really know how that model came together.",
    "start": "1573458",
    "end": "1580163"
  },
  {
    "text": "It just knows it is here. Next time you are on a build, it has no knowledge how it happens so it has to do everything again.",
    "start": "1580517",
    "end": "1586962"
  },
  {
    "text": "Another problem is it is building the whole model.",
    "start": "1587594",
    "end": "1593017"
  },
  {
    "text": "Even though it will\nonly build some things. That is\ndescribed with Gradle help.",
    "start": "1593789",
    "end": "1598864"
  },
  {
    "text": "It will build the whole model even though ",
    "start": "1599008",
    "end": "1603322"
  },
  {
    "text": "all you really want to\ndo is call Gradle help. How much time was invested to what",
    "start": "1604372",
    "end": "1609800"
  },
  {
    "text": "you wanted to do. It is not in\nthe correct relation. ",
    "start": "1609801",
    "end": "1615198"
  },
  {
    "text": " There is a solution for that. Otherwise, that would\nnot be good.",
    "start": "1617167",
    "end": "1622446"
  },
  {
    "text": "For Android at construction time or\nat the configuration time",
    "start": "1624216",
    "end": "1631275"
  },
  {
    "text": "the whole model is built. If you have a big project (400 project),",
    "start": "1631275",
    "end": "1636047"
  },
  {
    "text": "project build and ten variants: it is huge. That is why things take so long.",
    "start": "1637098",
    "end": "1643333"
  },
  {
    "text": "I think at the Android\nteam takes two minutes to just call like Gradle tasks",
    "start": "1643333",
    "end": "1651362"
  },
  {
    "text": "(because it has\nto build so many things, which takes time).",
    "start": "1651947",
    "end": "1657138"
  },
  {
    "text": "The other thing is that\nit has to do the full dependency resolution and the processing at evaluation time, or configuration time.",
    "start": "1657585",
    "end": "1666263"
  },
  {
    "text": "It does not know all the flavors you want to have until very late. Then it is so late",
    "start": "1667987",
    "end": "1673606"
  },
  {
    "text": "that it have to do stuff. What has been done until today",
    "start": "1673606",
    "end": "1680345"
  },
  {
    "text": "to improve the configuration phase? The build script, they compile faster.",
    "start": "1680345",
    "end": "1685403"
  },
  {
    "text": "Caching happens there, in a reliable way. As we use new versions of Groovy",
    "start": "1685403",
    "end": "1691114"
  },
  {
    "text": "to do the parsing of the DSL, it get's faster,.",
    "start": "1691114",
    "end": "1695516"
  },
  {
    "text": "Gradle is not written in Groovy. People think that. It is not true. The DSL layer is done with Groovy.",
    "start": "1696195",
    "end": "1703739"
  },
  {
    "text": "there is another feature\ncalled configure on demand. Maybe one or the other\nhas already used this. It allows you to,\nwhen you run some tasks,",
    "start": "1704762",
    "end": "1712227"
  },
  {
    "text": "only configure those projects that are reached by those tasks. It is only working\nunder certain conditions,",
    "start": "1712228",
    "end": "1719763"
  },
  {
    "text": "and if you violate these conditions, the output is not guaranteed.",
    "start": "1719763",
    "end": "1724632"
  },
  {
    "text": "But if you have a clean project, that does not try\nto poke into other projects",
    "start": "1724939",
    "end": "1730512"
  },
  {
    "text": "of the same build, then using configure on\ndemand works well. It will not\ngo through these projects",
    "start": "1730512",
    "end": "1737171"
  },
  {
    "text": "that are not\nreachable from the task you want to run.",
    "start": "1737171",
    "end": "1740950"
  },
  {
    "text": "Let's say you have a\nproject, you run build, and you have a compile\ndependency on another project. It will also configure that other project.",
    "start": "1742386",
    "end": "1748895"
  },
  {
    "text": "But if a third project is not reached that way, it\nwill not configure it. Which can save you time.",
    "start": "1748895",
    "end": "1755197"
  },
  {
    "text": "Again, these improvements\nare evolutionary.",
    "start": "1756292",
    "end": "1761292"
  },
  {
    "start": "1763000",
    "end": "1830000"
  },
  {
    "text": "Let's look at the Android build. A graph. To set the stage,",
    "start": "1763587",
    "end": "1770864"
  },
  {
    "text": "the Android team and the Gradle team have really good relationship, ",
    "start": "1770864",
    "end": "1776605"
  },
  {
    "text": "mutual benefit. That comes out of this relationship. If I am pointing out some stuff",
    "start": "1777505",
    "end": "1783137"
  },
  {
    "text": "that concerns the Android side, it is not finger pointing at all.",
    "start": "1783137",
    "end": "1787799"
  },
  {
    "text": "It is really working on\nthe solutions together. If you do a clean install, time, in this example,",
    "start": "1788803",
    "end": "1795369"
  },
  {
    "text": "is used for the pre-dexing. All your libraries\nthat you are consuming through dependencies, they\nhave to be dexed.",
    "start": "1795369",
    "end": "1802899"
  },
  {
    "text": "That takes a significant\namount of time in this build. You will see it says clean\ninstall.",
    "start": "1804368",
    "end": "1811422"
  },
  {
    "text": "They should not be upper case, but it does not matter. Once you do this and you run the build again, they are cached.",
    "start": "1811422",
    "end": "1817769"
  },
  {
    "text": "It only happens once, but still that can hurt\nthe first time you do it if you have dependencies.",
    "start": "1817769",
    "end": "1824330"
  },
  {
    "text": "There is potential for optimizations,\nfor the pre-dexing.",
    "start": "1827865",
    "end": "1834129"
  },
  {
    "start": "1830000",
    "end": "1923000"
  },
  {
    "text": "For instance, we want to have a clean, safe cache, but it is a generic cache.",
    "start": "1835105",
    "end": "1841072"
  },
  {
    "text": "Which means if you have dependencies and they need to be transformed\nbefore they are consumed,",
    "start": "1841072",
    "end": "1846880"
  },
  {
    "text": "that should become part of Gradle, and then it can be used for the Android plugins as well.",
    "start": "1847466",
    "end": "1853771"
  },
  {
    "text": "The other one is parallelization. This pre-dexing could happen in parallel, but it is currently not\nhappening in parallel.",
    "start": "1854218",
    "end": "1860272"
  },
  {
    "text": "Something that Gradle could support, that this pre-dexing\ncan happen in parallel.",
    "start": "1860510",
    "end": "1865868"
  },
  {
    "text": "The third one is\na distributed cache that is\nalready on the road map",
    "start": "1866965",
    "end": "1871645"
  },
  {
    "text": "(without a date though). Let's imagine you are a team and you\nhave a distributed cache",
    "start": "1872556",
    "end": "1878586"
  },
  {
    "text": "that lives somewhere. The first person,\nyou doing the build,",
    "start": "1878587",
    "end": "1883603"
  },
  {
    "text": "will trigger the dexing or pre-dexing of these libraries. Other developers will also",
    "start": "1883603",
    "end": "1890127"
  },
  {
    "text": "call the build.\nThe pre-dexing will first check the cache\nif it is already there.",
    "start": "1890127",
    "end": "1895509"
  },
  {
    "text": "And if it is there, it\nwill already be consumed. This reduces the time for pre-dexing on your\nlocal machine to zero.",
    "start": "1895509",
    "end": "1902877"
  },
  {
    "text": "That is another aspect. Before going\nto the distributed cache, it will check locally if\nsomething is already there.",
    "start": "1905158",
    "end": "1911482"
  },
  {
    "text": "If it is not there, go\nto the distributed cache. If it is there, use it from there, download it, store it.",
    "start": "1911483",
    "end": "1916897"
  },
  {
    "text": "Like consuming an external dependency.",
    "start": "1916897",
    "end": "1920044"
  },
  {
    "text": "Dexing (you can see on this graph).",
    "start": "1922882",
    "end": "1926959"
  },
  {
    "start": "1923000",
    "end": "1974000"
  },
  {
    "text": "Again, takes a\nsignificant amount of time. There is not much Gradle can do.",
    "start": "1929867",
    "end": "1936590"
  },
  {
    "text": "This is really more in the hands of the Android team,\nbut they are working on a new implementation, as\nI understand, is Jack.",
    "start": "1936990",
    "end": "1944578"
  },
  {
    "text": "Which for one can do faster dexing, and the other one is it\ncan do incremental dexing. That is currently not happening:",
    "start": "1946046",
    "end": "1951474"
  },
  {
    "text": "you change one file, it\nhas to dex everything again.",
    "start": "1951474",
    "end": "1954186"
  },
  {
    "text": "That is the current state. What has been already\noptimized to this point. These are evolutionary changes.",
    "start": "1957261",
    "end": "1963567"
  },
  {
    "text": "Still some limitations.\nAndroid is affected. All the other builds are affected as well.",
    "start": "1963567",
    "end": "1968924"
  },
  {
    "text": " ",
    "start": "1969952",
    "end": "1975422"
  },
  {
    "start": "1974000",
    "end": "2018000"
  },
  {
    "text": "The bottleneck\nthat we are focusing on now is the configuration phase. Everything is built",
    "start": "1976542",
    "end": "1983275"
  },
  {
    "text": "into a build model that is then consumed. Even if nothing needs to be consumed off that build model.",
    "start": "1983275",
    "end": "1988820"
  },
  {
    "text": "You are just calling Gradle help. That is called just a\nnew configuration model. This is really revolutionary.",
    "start": "1988820",
    "end": "1994254"
  },
  {
    "text": "It is not just tweaking a\nlittle bit here and there. It is really\nsomething that we build up",
    "start": "1994254",
    "end": "1998748"
  },
  {
    "text": "in parallel. Also have\nsome bridging to make the old world work with the new world.",
    "start": "1999589",
    "end": "2004107"
  },
  {
    "text": " Having all things available\nbut only needing some things,",
    "start": "2004902",
    "end": "2010357"
  },
  {
    "text": "we will go to only knowing what we need for building.",
    "start": "2010358",
    "end": "2015182"
  },
  {
    "text": "This new configuration model. I will give some code examples. It comes back to\nwhat I just explained",
    "start": "2017463",
    "end": "2023788"
  },
  {
    "start": "2018000",
    "end": "2070000"
  },
  {
    "text": "about execution phase is we want to know about the\ninputs and the outputs,",
    "start": "2023788",
    "end": "2029268"
  },
  {
    "text": "because if you know\nthe inputs and outputs, you can start, you know in\nwhat order to do things.",
    "start": "2029268",
    "end": "2034278"
  },
  {
    "text": "You can start doing things in parallel because you know you can build up a graph. If you have a graph,\nyou take the trees,",
    "start": "2034278",
    "end": "2040292"
  },
  {
    "text": "the sub-trees, and you can\nbuild them in parallel. There is so much you can\ndo once you know this. (What has already been\ndone for execution phase,",
    "start": "2040292",
    "end": "2047299"
  },
  {
    "text": "will happen for the\nconfiguration phase now as well). The key aspect that will change",
    "start": "2047300",
    "end": "2053127"
  },
  {
    "text": "is that you will describe your model. It will be very declarative. You say, watch my model B,",
    "start": "2053128",
    "end": "2059155"
  },
  {
    "text": "and then Gradle will\nderive the implementation. It will manage the model. By managing it, Gradle\ncan be smart about it",
    "start": "2059155",
    "end": "2066556"
  },
  {
    "text": "and what it does about it. It will allow you\nto do richer modeling.",
    "start": "2066557",
    "end": "2072176"
  },
  {
    "start": "2070000",
    "end": "2161000"
  },
  {
    "text": "You can already see this\nin the Android build. They did an awesome job of how you model a build. If you apply the plugin and you have this",
    "start": "2072176",
    "end": "2079281"
  },
  {
    "text": "Android extension. All the things you do\nin a declarative way, and so much magic\nhappens behind the scene.",
    "start": "2079281",
    "end": "2085843"
  },
  {
    "text": "It is really great, especially given those constraints that I listed before.",
    "start": "2086080",
    "end": "2090064"
  },
  {
    "text": "Android will really benefit from that because they can get\nrid of all the trickery.",
    "start": "2091416",
    "end": "2095776"
  },
  {
    "text": "It will be cleaner modeling, because now if\nyou look at the tasks, you would see that\nthere is execution logic,",
    "start": "2096756",
    "end": "2102190"
  },
  {
    "text": "as well as configuration logic. That will be a clean separation. The task, or it will not\nbe called a task anymore,",
    "start": "2102190",
    "end": "2109852"
  },
  {
    "text": "but you have your manage types\nin all they contain is data. There is nothing on there about execution.",
    "start": "2109852",
    "end": "2114579"
  },
  {
    "text": "You can collaborate better.  You do not know when things are ready,",
    "start": "2116024",
    "end": "2121340"
  },
  {
    "text": "so you have to do them very late. That will go away. It will be really easy to say",
    "start": "2121341",
    "end": "2128704"
  },
  {
    "text": "I am the one creating it, OR I want to add defaults, OR I want to mutate it,",
    "start": "2128705",
    "end": "2134092"
  },
  {
    "text": "OR I want to do something at the end, or I want to do validation.",
    "start": "2134092",
    "end": "2139562"
  },
  {
    "text": "So much more deterministic. And comprehensible. By having a model,\nlike for the execution,",
    "start": "2141309",
    "end": "2147973"
  },
  {
    "text": "we have a task and a task graph. If there is a model for your build, and you know where things came from,",
    "start": "2147973",
    "end": "2154023"
  },
  {
    "text": "you can do really interesting reports, and you know why things are happening. Because you know who contributed what.",
    "start": "2154023",
    "end": "2159840"
  },
  {
    "start": "2161000",
    "end": "2204000"
  },
  {
    "text": "Let's look at the code example. We have this managed\ntyped here called Picture.",
    "start": "2161054",
    "end": "2166366"
  },
  {
    "text": "It is in an interface. Gradle will provide implementation, such",
    "start": "2166366",
    "end": "2171957"
  },
  {
    "text": "that it knows if somebody sets the name. If it knows who sets the name,",
    "start": "2171957",
    "end": "2176243"
  },
  {
    "text": "it is something it can report on. I also knows I can derive",
    "start": "2177293",
    "end": "2182931"
  },
  {
    "text": "things from that as well. Another advantage\nof these managed types is that they can be persisted.",
    "start": "2182931",
    "end": "2189818"
  },
  {
    "text": "As it goes and builds that model, if there are certain\nthings it does not need, it can write them to this,\ngloat them again later.",
    "start": "2189818",
    "end": "2196150"
  },
  {
    "text": "Or it can store them in the daemon, and when you run the next build, it can reuse them, it can cache things. That is why they are externalizable.",
    "start": "2196150",
    "end": "2203563"
  },
  {
    "start": "2204000",
    "end": "2249000"
  },
  {
    "text": "This is an example. Has anybody written a Gradle plugin yet?",
    "start": "2204520",
    "end": "2209438"
  },
  {
    "text": "One person who has written a Gradle plugin. This strange a little bit.",
    "start": "2210557",
    "end": "2216613"
  },
  {
    "text": "By now it looks like this. Very declarative. You basically say, I want to,",
    "start": "2216613",
    "end": "2223930"
  },
  {
    "text": "there is a model for creating a picture, and there is a way to mutate the picture.",
    "start": "2224917",
    "end": "2230569"
  },
  {
    "text": "The picture is passed in,\nand you can set this argument. When you set them,\nbecause the implementation",
    "start": "2230569",
    "end": "2236536"
  },
  {
    "text": "of picture is controlled by Gradle, again, it can track, and\nknows who did these changes.",
    "start": "2236536",
    "end": "2243310"
  },
  {
    "text": " There is more.",
    "start": "2245522",
    "end": "2251159"
  },
  {
    "start": "2249000",
    "end": "2298000"
  },
  {
    "text": "But I just want to give you\na little overview. The last part is providing",
    "start": "2251159",
    "end": "2257451"
  },
  {
    "text": "a DSL (as a developer of an Android application,",
    "start": "2257451",
    "end": "2262815"
  },
  {
    "text": "you want to declare what to do). ",
    "start": "2262815",
    "end": "2269172"
  },
  {
    "text": "Based on the example I just show, you say ok, here is my model. Here is a picture. I want to\ncreate a new picture instance,",
    "start": "2269172",
    "end": "2275344"
  },
  {
    "text": "or picture node, and I want to\nset the name to something, and I want to set the tags to something.",
    "start": "2275344",
    "end": "2280052"
  },
  {
    "text": " This looks very similar to how you do it in the Android plugin,",
    "start": "2280664",
    "end": "2286201"
  },
  {
    "text": "but the difference is the implementation of all this is controlled by Gradle.",
    "start": "2286201",
    "end": "2292006"
  },
  {
    "text": "By knowing this, it can be all the\noptimizations I mentioned.",
    "start": "2292006",
    "end": "2295739"
  },
  {
    "text": "To give you an\nexample. We have a report here. Exactly for that example I showed.",
    "start": "2297602",
    "end": "2304168"
  },
  {
    "start": "2298000",
    "end": "2330000"
  },
  {
    "text": "This createPicture, it can see what the type is.",
    "start": "2304168",
    "end": "2309318"
  },
  {
    "text": "You can see who created it. And you can also see what were the rules",
    "start": "2309318",
    "end": "2314953"
  },
  {
    "text": "that were applied on that picture, so the configure was\ncalled after the creation. You can see\nit for every attribute,",
    "start": "2314953",
    "end": "2321710"
  },
  {
    "text": "who created it. What is the\nvalue. What is the type.",
    "start": "2321710",
    "end": "2326255"
  },
  {
    "text": "With all this rich information there is\nsmartness that can happen. If you take the latest Android plugin.",
    "start": "2327166",
    "end": "2333096"
  },
  {
    "start": "2330000",
    "end": "2477000"
  },
  {
    "text": "It chips really with two plugins. An old version and a new version. And the underlying logic of\nwhat to do during the build",
    "start": "2334796",
    "end": "2340484"
  },
  {
    "text": "is the same, but the way it is configured is different.",
    "start": "2340485",
    "end": "2345980"
  },
  {
    "text": "One is using the new model, the other one is using the old model. You have to use",
    "start": "2345980",
    "end": "2352082"
  },
  {
    "text": "this model, outmost keyword. And then within you say Android,",
    "start": "2352082",
    "end": "2359275"
  },
  {
    "text": "and then it is very similar. it is not complete yet. it is really work in\nprogress, but every time a new Gradle release comes out,",
    "start": "2359275",
    "end": "2365145"
  },
  {
    "text": "they make use of the latest features, and adjust their experimental plugins. At some point, this plugin will become",
    "start": "2365145",
    "end": "2371015"
  },
  {
    "text": "the default plugin. Not so nice things.",
    "start": "2371015",
    "end": "2376518"
  },
  {
    "text": "You have to use the\ndot notation; and you have to say\ncreate if it is a new one, you can use just the name\nif it is an existing one.",
    "start": "2376518",
    "end": "2383101"
  },
  {
    "text": "That' will go away, sure. But I hope this gets you excited",
    "start": "2383897",
    "end": "2388982"
  },
  {
    "text": "that you see Gradle makes these changes. driven from Android, but they fit into the\nbig vision of Gradle.",
    "start": "2388982",
    "end": "2395204"
  },
  {
    "text": "And Android consumes them. The release by release,\nmaking their plugin better.",
    "start": "2395205",
    "end": "2400307"
  },
  {
    "text": "What do we get from doing all this? The configuration will\nbecome parallelizable",
    "start": "2405365",
    "end": "2412234"
  },
  {
    "text": "like the task execution\ncan be parallelizable. Manage times can be externalized,",
    "start": "2412234",
    "end": "2417839"
  },
  {
    "text": "which is important when\nit comes to caching. The model can be\nreused across invocations,",
    "start": "2418100",
    "end": "2425548"
  },
  {
    "text": "because Gradle knows the\ninputs and the outputs for the configuration phase .",
    "start": "2425549",
    "end": "2430326"
  },
  {
    "text": "It knows if it can\nreuse something or not. It knows everything, basically, and by doing this it can do the minimum",
    "start": "2430610",
    "end": "2436898"
  },
  {
    "text": "that is required to do. That is really revolutionary change. ",
    "start": "2436898",
    "end": "2442609"
  },
  {
    "text": "We do not want to break what is there. Everything happens in\nparallel to what is there; and there is bridging from\nthe old work to the new.",
    "start": "2442609",
    "end": "2449412"
  },
  {
    "text": "That takes some effort. It will not be a big bang.",
    "start": "2449413",
    "end": "2453943"
  },
  {
    "text": "It is already used today.  Soon, with the new Android plugin, or with the new Android plugin,",
    "start": "2454669",
    "end": "2459958"
  },
  {
    "text": "the C++ support that it\nhas for building the NDK, will already use the\nGradle plugin for C++,",
    "start": "2459958",
    "end": "2467494"
  },
  {
    "text": "and that is already based on this new configuration model. They are really",
    "start": "2468010",
    "end": "2475277"
  },
  {
    "text": "sticking to it. If we look at the roadmap for the next six to twelve months,",
    "start": "2475278",
    "end": "2481473"
  },
  {
    "start": "2477000",
    "end": "2702000"
  },
  {
    "text": "without any guarantees of course, these improvements\nare very high on the list.",
    "start": "2481473",
    "end": "2486785"
  },
  {
    "text": " Android is a very\nimportant ecosystem for Gradle,",
    "start": "2487115",
    "end": "2491818"
  },
  {
    "text": "but also the other ecosystems\nwant to have better perfomance. Everybody wants better performance.",
    "start": "2492218",
    "end": "2497390"
  },
  {
    "text": "There is\ninvestment going on there. The other one is\nautocorrection,",
    "start": "2497391",
    "end": "2503516"
  },
  {
    "text": "it should say generify\ndependency management. There is not only\ndependencies between libraries,",
    "start": "2503516",
    "end": "2509293"
  },
  {
    "text": "you can also see dependencies between much higher level constructs. And that is currently happening as well.",
    "start": "2509293",
    "end": "2515427"
  },
  {
    "text": "I am not going to go into that, but I want to go into\nperformance just a little bit. We have these hotspots",
    "start": "2515427",
    "end": "2521627"
  },
  {
    "text": "that we try to indentify,\nand once we fix them, the next one will show up. Everybody that has\ndone performance profiling",
    "start": "2521627",
    "end": "2528430"
  },
  {
    "text": "knows how that works. Caching and reusing is\nra key aspect.",
    "start": "2528430",
    "end": "2534655"
  },
  {
    "text": "We use what's already there, rather than rebuilding it. Doing work in parallel. that is huge.",
    "start": "2535612",
    "end": "2542364"
  },
  {
    "text": "In parallel means for\nrun on the same machine, but it can also mean across machines. Distributed build\nwill come as well.",
    "start": "2542764",
    "end": "2550072"
  },
  {
    "text": "You have a build,\nyou use different things, you need to configure things. That can happen in parallel. It can even happen across machines.",
    "start": "2550473",
    "end": "2557527"
  },
  {
    "text": "And doing work in the background. The continuous mode that I showed is one example. You do your work, and\nwhile you do your work",
    "start": "2558917",
    "end": "2566082"
  },
  {
    "text": "Gradle can already see\nif something has changed, and if it has changed it\ncan already prepare it such that when you do want to run it,",
    "start": "2566082",
    "end": "2572467"
  },
  {
    "text": "it is already there. All these techniques\nthat I just mentioned (lefthand side),",
    "start": "2572467",
    "end": "2578154"
  },
  {
    "text": "can be applied to many\nthings on the hand side. The current ones focused on: build configuration.",
    "start": "2578155",
    "end": "2583235"
  },
  {
    "text": "that is what I just explained. The next one will be\ndependency resolution. Things can\nhappen in parallel there too.",
    "start": "2583236",
    "end": "2589821"
  },
  {
    "text": "Caching already happens,\nbut more can happen. And task execution.  has been done here already,",
    "start": "2589821",
    "end": "2596764"
  },
  {
    "text": "but more can be done. Let's imagine you are tasks are fully managed by Gradle,",
    "start": "2596764",
    "end": "2603186"
  },
  {
    "text": "which will be the case with\nnew configuration model. Then you can run these\ntasks in parallel.",
    "start": "2603186",
    "end": "2608869"
  },
  {
    "text": "And once you can run\nthem in parallel, I mean, and Gradle knows what\ncan be run in parallel, it is a huge step forward.",
    "start": "2609897",
    "end": "2616040"
  },
  {
    "text": "You can already enable\nthat to some extent, but it is not super deterministic",
    "start": "2616881",
    "end": "2622129"
  },
  {
    "text": "because Gradle does not really\nknow what your tasks do. ",
    "start": "2622129",
    "end": "2626953"
  },
  {
    "text": "So if we look at, at the performance, this is just some like, some tests we ran.",
    "start": "2629071",
    "end": "2634285"
  },
  {
    "text": "If you use this new approach, totally based on these managed types,",
    "start": "2634964",
    "end": "2639551"
  },
  {
    "text": "this is not an Android build, but still, even with a Gradle builds\nyou can have variance, the concept of variance came out of",
    "start": "2640857",
    "end": "2646146"
  },
  {
    "text": "the Android requirements,\nbut it is a concept that applies in general, like,",
    "start": "2646146",
    "end": "2652062"
  },
  {
    "text": "even a varience could be building against JDK six or seven or eight, these are three different variance.",
    "start": "2652062",
    "end": "2656609"
  },
  {
    "text": "If you build one variant, with this managed model,",
    "start": "2658310",
    "end": "2664114"
  },
  {
    "text": "takes zero time. If you build one project,\ntakes some time.",
    "start": "2664114",
    "end": "2669659"
  },
  {
    "text": "If you build all, takes more time. The key is: the less you do,",
    "start": "2669659",
    "end": "2676452"
  },
  {
    "text": "or the less you want to do, the less Gradle has to do. That is the thing. If you want to do a full build,",
    "start": "2677154",
    "end": "2684481"
  },
  {
    "text": "the new model is not\ngoing to give you that much. going to give you some,\nbut it is not great.",
    "start": "2684481",
    "end": "2689955"
  },
  {
    "text": "Or not very significant. The less you do,\nthe less Gradle will do, which is to your benefit.",
    "start": "2689955",
    "end": "2696118"
  },
  {
    "text": "I think that is very\nvisible with this curve. To round this off,",
    "start": "2696118",
    "end": "2703161"
  },
  {
    "start": "2702000",
    "end": "2864000"
  },
  {
    "text": "because this is important\nto the context of Android, as well, dependency management. There is dependency management,",
    "start": "2703162",
    "end": "2709774"
  },
  {
    "text": "You can have your\ndependencies on the variance. But we want to go further.",
    "start": "2709774",
    "end": "2714437"
  },
  {
    "text": "When you consume external libraries, you want to consume the variant.",
    "start": "2714857",
    "end": "2719400"
  },
  {
    "text": "Let's say you create\na library in variant ABC. Now we have another project that consumes",
    "start": "2719916",
    "end": "2725860"
  },
  {
    "text": "this library and it also has variance ABC. You want to consume the variant, of that external dependency.",
    "start": "2725860",
    "end": "2732171"
  },
  {
    "text": "Same for native libraries. You also want to consume the one.",
    "start": "2732478",
    "end": "2738399"
  },
  {
    "text": "I you are\non the debug build type, you want to use everything\nn debug.",
    "start": "2738399",
    "end": "2743102"
  },
  {
    "text": "By storing this, this extra meta data with these variance.",
    "start": "2743851",
    "end": "2750909"
  },
  {
    "text": "And then when it comes to resolution, it will try to pick the variant. If it finds one, it uses it.",
    "start": "2750909",
    "end": "2756853"
  },
  {
    "text": "If it does not, it will blow up. Same will happen in the Java space. If I am building\na library for JDK 8,",
    "start": "2756853",
    "end": "2763791"
  },
  {
    "text": "and you are depending on another library, if that library says,\nI am only available or",
    "start": "2763791",
    "end": "2769178"
  },
  {
    "text": "I am only, I am a variant\nonly for JDK 9 and later, it cannot use it.",
    "start": "2769178",
    "end": "2775257"
  },
  {
    "text": "This will\nbe full variant of variant dependency management.",
    "start": "2775257",
    "end": "2780336"
  },
  {
    "text": " To round this off,",
    "start": "2781526",
    "end": "2786564"
  },
  {
    "text": "we are also working on Gradle.com We see Android",
    "start": "2786564",
    "end": "2793935"
  },
  {
    "text": "as a really interesting target for that. As you run your build, you can upload",
    "start": "2793935",
    "end": "2801086"
  },
  {
    "text": "like a build receipt to Gradle.com and you can share this with\npeople you want to share it.",
    "start": "2801086",
    "end": "2807833"
  },
  {
    "text": "Let's say you have a\nbuild master in your team. You have a local problem. You can upload that and your\nbuild master can look at it,",
    "start": "2807833",
    "end": "2813359"
  },
  {
    "text": "and based on what he\nsees, he can figure out what is the problem. What has changed.",
    "start": "2813359",
    "end": "2819675"
  },
  {
    "text": "Other things are, you build,. It is all good, and then suddenly\nthis build stops working.",
    "start": "2819675",
    "end": "2824722"
  },
  {
    "text": "What happened? Maybe you realize a transitive dependency has changed.",
    "start": "2825377",
    "end": "2830432"
  },
  {
    "text": "All these things will\nelp you detect what is going on. It will also help you detect errors",
    "start": "2830432",
    "end": "2836608"
  },
  {
    "text": "and propose solutions. That is currently what's\ngoing on with Gradle.com. Let's say you want to go to the form,",
    "start": "2836608",
    "end": "2842942"
  },
  {
    "text": "you had some problems building. You can just attach a\nlink to the build receipt and then somebody can go on it and say",
    "start": "2842942",
    "end": "2849164"
  },
  {
    "text": "I see a problem here. Somebody else had that problem too. there is a link to the form, etcetera.",
    "start": "2849164",
    "end": "2855117"
  },
  {
    "text": "That is coming very soon. it is in full development now. We are making progress there.",
    "start": "2856677",
    "end": "2864167"
  },
  {
    "start": "2864000",
    "end": "2935000"
  },
  {
    "text": "Not sure if anybody\nknows theres a udacity class on Gradle and Android development.",
    "start": "2864614",
    "end": "2871063"
  },
  {
    "text": "This has been done\ntogether with Google. Awesome class. 10,000 people have already",
    "start": "2871087",
    "end": "2877434"
  },
  {
    "text": "signed up for this. It is a good way to learn Gradle",
    "start": "2877434",
    "end": "2883501"
  },
  {
    "text": "in the context of Android.   y",
    "start": "2883501",
    "end": "2889440"
  },
  {
    "text": "Gradle is a great company to work at. And there are always more people needed. And that brings me to the\nend of this presentation.",
    "start": "2889440",
    "end": "2897328"
  },
  {
    "text": "(audience clapping)",
    "start": "2898055",
    "end": "2902438"
  },
  {
    "text": "- Ok, thank you very much Haten. There has not been any questions online, but I do not know if anybody\nhas a live question now?",
    "start": "2904788",
    "end": "2912143"
  },
  {
    "text": "I think that is\ngood, because time is up.",
    "start": "2913820",
    "end": "2918994"
  },
  {
    "text": "Thank you again, very much, and remember to write\nfeedback for Haten. Thank you. (audience clapping)",
    "start": "2918994",
    "end": "2926117"
  }
]