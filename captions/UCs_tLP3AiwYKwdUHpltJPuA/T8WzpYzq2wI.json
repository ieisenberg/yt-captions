[
  {
    "text": "um people sometimes ask me um what's",
    "start": "5920",
    "end": "8440"
  },
  {
    "text": "what's C's best feature and it's it's",
    "start": "8440",
    "end": "12200"
  },
  {
    "text": "not um it's not a single feature that",
    "start": "12200",
    "end": "14719"
  },
  {
    "text": "makes the language unusual um if you",
    "start": "14719",
    "end": "17560"
  },
  {
    "text": "plot a graph with at one end you've got",
    "start": "17560",
    "end": "20000"
  },
  {
    "text": "highly low-level performance languages",
    "start": "20000",
    "end": "22400"
  },
  {
    "text": "and on the other end you've got highly",
    "start": "22400",
    "end": "24279"
  },
  {
    "text": "expressive languages you know like",
    "start": "24279",
    "end": "26560"
  },
  {
    "text": "Assembly Language at one end and and Lis",
    "start": "26560",
    "end": "28720"
  },
  {
    "text": "at the other um what makes uh C unusual",
    "start": "28720",
    "end": "32000"
  },
  {
    "text": "is it is it spans quite a big range in",
    "start": "32000",
    "end": "34200"
  },
  {
    "text": "there so um it's got features that allow",
    "start": "34200",
    "end": "36600"
  },
  {
    "text": "you to program in a lowlevel performant",
    "start": "36600",
    "end": "38680"
  },
  {
    "text": "way and getting close down to the metal",
    "start": "38680",
    "end": "40719"
  },
  {
    "text": "and also um it's got highly expressive",
    "start": "40719",
    "end": "42760"
  },
  {
    "text": "features as well so some of these",
    "start": "42760",
    "end": "45239"
  },
  {
    "text": "low-level uh performance features um the",
    "start": "45239",
    "end": "47879"
  },
  {
    "text": "ability to uh to write you have your own",
    "start": "47879",
    "end": "49680"
  },
  {
    "text": "value types in their custom value types",
    "start": "49680",
    "end": "52039"
  },
  {
    "text": "so so you can avoid overloading the uh",
    "start": "52039",
    "end": "54359"
  },
  {
    "text": "you can minimize the load on the memory",
    "start": "54359",
    "end": "56520"
  },
  {
    "text": "management um but um even better you can",
    "start": "56520",
    "end": "59359"
  },
  {
    "text": "bypass the memory manager all together",
    "start": "59359",
    "end": "62680"
  },
  {
    "text": "right with pointers you can allocate",
    "start": "62680",
    "end": "64080"
  },
  {
    "text": "your own memory and you can also bypass",
    "start": "64080",
    "end": "66720"
  },
  {
    "text": "the entire type system um and all",
    "start": "66720",
    "end": "69360"
  },
  {
    "text": "runtime checks um and you can also do a",
    "start": "69360",
    "end": "71799"
  },
  {
    "text": "lock free concurrency in C so um you",
    "start": "71799",
    "end": "75119"
  },
  {
    "text": "know if you if you're wondering",
    "start": "75119",
    "end": "76520"
  },
  {
    "text": "obviously the the the GC is pretty good",
    "start": "76520",
    "end": "78360"
  },
  {
    "text": "nowadays and it's quite efficient but",
    "start": "78360",
    "end": "79840"
  },
  {
    "text": "there's times when you you want to go",
    "start": "79840",
    "end": "81360"
  },
  {
    "text": "that extra step and and and bypass it",
    "start": "81360",
    "end": "83240"
  },
  {
    "text": "you can do that in C um but at the other",
    "start": "83240",
    "end": "86400"
  },
  {
    "text": "end of the scale at the at the",
    "start": "86400",
    "end": "87680"
  },
  {
    "text": "expressive end you've got these kind of",
    "start": "87680",
    "end": "89520"
  },
  {
    "text": "features",
    "start": "89520",
    "end": "90360"
  },
  {
    "text": "so we've got things like asynchronous",
    "start": "90360",
    "end": "92240"
  },
  {
    "text": "functions so who uses asynchronous",
    "start": "92240",
    "end": "94560"
  },
  {
    "text": "functions and we got how many people are",
    "start": "94560",
    "end": "96159"
  },
  {
    "text": "C programmers here so you got about a",
    "start": "96159",
    "end": "99640"
  },
  {
    "text": "third or quarter so you rest of view",
    "start": "99640",
    "end": "102119"
  },
  {
    "text": "Java you do programming Java so this is",
    "start": "102119",
    "end": "104600"
  },
  {
    "text": "something that will probably come to",
    "start": "104600",
    "end": "106000"
  },
  {
    "text": "Java soon I imagine um because they it",
    "start": "106000",
    "end": "108560"
  },
  {
    "text": "started out SE started out as a ripoff",
    "start": "108560",
    "end": "110719"
  },
  {
    "text": "of java basically but then um eventually",
    "start": "110719",
    "end": "113680"
  },
  {
    "text": "they the Java folks said look the C guys",
    "start": "113680",
    "end": "115840"
  },
  {
    "text": "have added some pretty cool things I",
    "start": "115840",
    "end": "117240"
  },
  {
    "text": "started adding those features back to",
    "start": "117240",
    "end": "119600"
  },
  {
    "text": "Java so this is something that uh that",
    "start": "119600",
    "end": "121719"
  },
  {
    "text": "CP has and it effectively abstracts away",
    "start": "121719",
    "end": "124960"
  },
  {
    "text": "the difference between the present and",
    "start": "124960",
    "end": "127159"
  },
  {
    "text": "the future so you can program the future",
    "start": "127159",
    "end": "129759"
  },
  {
    "text": "as though it were present um Lambda",
    "start": "129759",
    "end": "132480"
  },
  {
    "text": "Expressions closures um you have those I",
    "start": "132480",
    "end": "135480"
  },
  {
    "text": "believe now in Java as well um query",
    "start": "135480",
    "end": "137760"
  },
  {
    "text": "comprehensions and these things these",
    "start": "137760",
    "end": "139599"
  },
  {
    "text": "allow functional programming patterns um",
    "start": "139599",
    "end": "142239"
  },
  {
    "text": "which reduce and cut clutter and",
    "start": "142239",
    "end": "144599"
  },
  {
    "text": "repetition um now expression trees again",
    "start": "144599",
    "end": "147440"
  },
  {
    "text": "that's a feature which um allows you to",
    "start": "147440",
    "end": "149400"
  },
  {
    "text": "treat code as data we'll look at that in",
    "start": "149400",
    "end": "152120"
  },
  {
    "text": "a minute as to how that how that's",
    "start": "152120",
    "end": "153720"
  },
  {
    "text": "useful so I'm going to give an example",
    "start": "153720",
    "end": "156239"
  },
  {
    "text": "now of of of where I've recently used",
    "start": "156239",
    "end": "158840"
  },
  {
    "text": "all of these in in one system um so some",
    "start": "158840",
    "end": "162000"
  },
  {
    "text": "of you are familiar with a product which",
    "start": "162000",
    "end": "163400"
  },
  {
    "text": "I've written called link Pat um and it's",
    "start": "163400",
    "end": "165599"
  },
  {
    "text": "a uh if you if you're in the net World",
    "start": "165599",
    "end": "167440"
  },
  {
    "text": "you'll probably be familiar with it and",
    "start": "167440",
    "end": "168959"
  },
  {
    "text": "and if not then you can think of it as a",
    "start": "168959",
    "end": "170959"
  },
  {
    "text": "as a scratch pad for net languages so we",
    "start": "170959",
    "end": "174000"
  },
  {
    "text": "can do things like putting an expression",
    "start": "174000",
    "end": "176040"
  },
  {
    "text": "in here like one and one um and we get",
    "start": "176040",
    "end": "178400"
  },
  {
    "text": "to or we can put some something more",
    "start": "178400",
    "end": "180760"
  },
  {
    "text": "complex like in there like um I can put",
    "start": "180760",
    "end": "184280"
  },
  {
    "text": "type of int in there um and that's quite",
    "start": "184280",
    "end": "187920"
  },
  {
    "text": "a complex object it's a type object and",
    "start": "187920",
    "end": "190120"
  },
  {
    "text": "we and Link padlets you drill down into",
    "start": "190120",
    "end": "192280"
  },
  {
    "text": "all these um uh uh inside the the",
    "start": "192280",
    "end": "196640"
  },
  {
    "text": "properties and Fields in there so that's",
    "start": "196640",
    "end": "198799"
  },
  {
    "text": "quite sophisticated interaction between",
    "start": "198799",
    "end": "201599"
  },
  {
    "text": "what you're running um and the host",
    "start": "201599",
    "end": "203680"
  },
  {
    "text": "process but recently I added a feature",
    "start": "203680",
    "end": "206640"
  },
  {
    "text": "to to link pad where it includes an inte",
    "start": "206640",
    "end": "209760"
  },
  {
    "text": "cre a debugger in there so what you can",
    "start": "209760",
    "end": "211959"
  },
  {
    "text": "do now is um we can step through that we",
    "start": "211959",
    "end": "214720"
  },
  {
    "text": "can um we can single step through that",
    "start": "214720",
    "end": "217080"
  },
  {
    "text": "and watch how the variables change as",
    "start": "217080",
    "end": "218799"
  },
  {
    "text": "you as as you run that now this was an",
    "start": "218799",
    "end": "221239"
  },
  {
    "text": "interesting feature to write has any",
    "start": "221239",
    "end": "222920"
  },
  {
    "text": "anyone ever tried to write a debugger",
    "start": "222920",
    "end": "225720"
  },
  {
    "text": "before um I can tell you the only thing",
    "start": "225720",
    "end": "228000"
  },
  {
    "text": "harder than writing a debugger is",
    "start": "228000",
    "end": "230120"
  },
  {
    "text": "debugging a",
    "start": "230120",
    "end": "231280"
  },
  {
    "text": "debugger right um and one of the",
    "start": "231280",
    "end": "234040"
  },
  {
    "text": "challenges the first challenge I had was",
    "start": "234040",
    "end": "235920"
  },
  {
    "text": "that in order to debug a process you",
    "start": "235920",
    "end": "238920"
  },
  {
    "text": "have to have the process you're",
    "start": "238920",
    "end": "240480"
  },
  {
    "text": "debugging has to be different to your",
    "start": "240480",
    "end": "242480"
  },
  {
    "text": "own process so that means that every",
    "start": "242480",
    "end": "245360"
  },
  {
    "text": "query now has to run in its own process",
    "start": "245360",
    "end": "248720"
  },
  {
    "text": "so I had to create a separate process",
    "start": "248720",
    "end": "250319"
  },
  {
    "text": "container for every query and that now",
    "start": "250319",
    "end": "252680"
  },
  {
    "text": "has to communicate in Fairly Rich way",
    "start": "252680",
    "end": "255360"
  },
  {
    "text": "with the host process so that you can do",
    "start": "255360",
    "end": "257519"
  },
  {
    "text": "that thing we saw before where we dumped",
    "start": "257519",
    "end": "259120"
  },
  {
    "text": "out the type of int so um to to make",
    "start": "259120",
    "end": "261840"
  },
  {
    "text": "that work um I needed to come up with",
    "start": "261840",
    "end": "264960"
  },
  {
    "text": "some kind of way of communicating",
    "start": "264960",
    "end": "266880"
  },
  {
    "text": "between the processes and I realized I",
    "start": "266880",
    "end": "269039"
  },
  {
    "text": "had some quite stringent requirements it",
    "start": "269039",
    "end": "271039"
  },
  {
    "text": "had to be really fast particularly",
    "start": "271039",
    "end": "273280"
  },
  {
    "text": "regarding the latency had to be very low",
    "start": "273280",
    "end": "276160"
  },
  {
    "text": "so that it doesn't slow down your",
    "start": "276160",
    "end": "277720"
  },
  {
    "text": "program at all um and it also it needed",
    "start": "277720",
    "end": "280680"
  },
  {
    "text": "to be asynchronous so if if it um",
    "start": "280680",
    "end": "283680"
  },
  {
    "text": "because there's always a chance that you",
    "start": "283680",
    "end": "285080"
  },
  {
    "text": "can write whatever you like here uh you",
    "start": "285080",
    "end": "287240"
  },
  {
    "text": "can write uh something which throws a",
    "start": "287240",
    "end": "288960"
  },
  {
    "text": "stack Overflow exception right and that",
    "start": "288960",
    "end": "291600"
  },
  {
    "text": "crashes the process now if it's in the",
    "start": "291600",
    "end": "293320"
  },
  {
    "text": "middle of talking to the link pad hopes",
    "start": "293320",
    "end": "295600"
  },
  {
    "text": "process then that's not going to be very",
    "start": "295600",
    "end": "297360"
  },
  {
    "text": "good if it uh if it because the result",
    "start": "297360",
    "end": "299680"
  },
  {
    "text": "never come back now if that's a blocking",
    "start": "299680",
    "end": "301759"
  },
  {
    "text": "call that's going to block the link pad",
    "start": "301759",
    "end": "304160"
  },
  {
    "text": "user interface and it will crash so I",
    "start": "304160",
    "end": "306120"
  },
  {
    "text": "want it completely asynchronous",
    "start": "306120",
    "end": "308560"
  },
  {
    "text": "cancelable and I wanted um it to be um",
    "start": "308560",
    "end": "312479"
  },
  {
    "text": "very performant and I realized that none",
    "start": "312479",
    "end": "314560"
  },
  {
    "text": "of the built-in kind of libraries or",
    "start": "314560",
    "end": "316320"
  },
  {
    "text": "Solutions are going to work so I thought",
    "start": "316320",
    "end": "317960"
  },
  {
    "text": "how about rolling my own from scratch so",
    "start": "317960",
    "end": "320400"
  },
  {
    "text": "I want to we're going to start with the",
    "start": "320400",
    "end": "321759"
  },
  {
    "text": "lowest level thing we can possibly do",
    "start": "321759",
    "end": "323759"
  },
  {
    "text": "the lowest level we can communicate",
    "start": "323759",
    "end": "325800"
  },
  {
    "text": "between two processes is shared memory",
    "start": "325800",
    "end": "328360"
  },
  {
    "text": "we just allocate a block memory and we",
    "start": "328360",
    "end": "330120"
  },
  {
    "text": "have both processes reading and writing",
    "start": "330120",
    "end": "332039"
  },
  {
    "text": "to that memory so that's that's the",
    "start": "332039",
    "end": "333759"
  },
  {
    "text": "lowest level and and I want to be able",
    "start": "333759",
    "end": "335600"
  },
  {
    "text": "to literally instantiate an object in",
    "start": "335600",
    "end": "338520"
  },
  {
    "text": "another process and core methods on it",
    "start": "338520",
    "end": "341919"
  },
  {
    "text": "so that's thought is it possible to",
    "start": "341919",
    "end": "344319"
  },
  {
    "text": "write something like that and how do we",
    "start": "344319",
    "end": "345680"
  },
  {
    "text": "do",
    "start": "345680",
    "end": "346600"
  },
  {
    "text": "it um so this is the challenge we've got",
    "start": "346600",
    "end": "350280"
  },
  {
    "text": "um and this is the the basic design that",
    "start": "350280",
    "end": "352160"
  },
  {
    "text": "I that I came up with it's fairly simple",
    "start": "352160",
    "end": "353919"
  },
  {
    "text": "so at the bottom level we've got a",
    "start": "353919",
    "end": "355720"
  },
  {
    "text": "called a pipe which is similar to",
    "start": "355720",
    "end": "357400"
  },
  {
    "text": "Windows pipe but faster and and uh and",
    "start": "357400",
    "end": "360880"
  },
  {
    "text": "completely asynchronous so a pipe is",
    "start": "360880",
    "end": "363280"
  },
  {
    "text": "just a mechanism for sending bite arrays",
    "start": "363280",
    "end": "366400"
  },
  {
    "text": "from one process to the other real",
    "start": "366400",
    "end": "368440"
  },
  {
    "text": "simple you have a send method at one end",
    "start": "368440",
    "end": "370319"
  },
  {
    "text": "and a receive on the other so that",
    "start": "370319",
    "end": "372319"
  },
  {
    "text": "that's I wanted to create a pipe with an",
    "start": "372319",
    "end": "373919"
  },
  {
    "text": "input and output pipe and on the top",
    "start": "373919",
    "end": "376199"
  },
  {
    "text": "level um I wanted to the channel which",
    "start": "376199",
    "end": "379160"
  },
  {
    "text": "is a high level construct that gives you",
    "start": "379160",
    "end": "381199"
  },
  {
    "text": "proxy so that lets you instanciate",
    "start": "381199",
    "end": "384000"
  },
  {
    "text": "objects in another process and then call",
    "start": "384000",
    "end": "386479"
  },
  {
    "text": "methods on them or properties on them so",
    "start": "386479",
    "end": "390039"
  },
  {
    "text": "the requirements um for the low level",
    "start": "390039",
    "end": "392039"
  },
  {
    "text": "let's look at the pipes requirements we",
    "start": "392039",
    "end": "393479"
  },
  {
    "text": "want to send b arays to another process",
    "start": "393479",
    "end": "395680"
  },
  {
    "text": "we want it to be very low latency",
    "start": "395680",
    "end": "397599"
  },
  {
    "text": "asynchronous and my first thought is it",
    "start": "397599",
    "end": "399919"
  },
  {
    "text": "needs to be bidirectional but then I",
    "start": "399919",
    "end": "401919"
  },
  {
    "text": "thought that's going to complicate it a",
    "start": "401919",
    "end": "403720"
  },
  {
    "text": "lot and we don't need that all we need",
    "start": "403720",
    "end": "405599"
  },
  {
    "text": "to do is create two pipes one each way",
    "start": "405599",
    "end": "408000"
  },
  {
    "text": "and now it's bidirectional so it can be",
    "start": "408000",
    "end": "411039"
  },
  {
    "text": "unidirectional so now let's first I'll",
    "start": "411039",
    "end": "413639"
  },
  {
    "text": "show you how the shared memory Works in",
    "start": "413639",
    "end": "416080"
  },
  {
    "text": "um in a basic way so this is this is the",
    "start": "416080",
    "end": "419479"
  },
  {
    "text": "API but net provides a wrapper an API to",
    "start": "419479",
    "end": "422919"
  },
  {
    "text": "let you get it at shared memory so this",
    "start": "422919",
    "end": "424960"
  },
  {
    "text": "is how you create a, bytes of shared",
    "start": "424960",
    "end": "428800"
  },
  {
    "text": "memory that name identifies it so if you",
    "start": "428800",
    "end": "431479"
  },
  {
    "text": "if you do the same thing on another",
    "start": "431479",
    "end": "433479"
  },
  {
    "text": "process and you have the same name you",
    "start": "433479",
    "end": "434919"
  },
  {
    "text": "can talk to each other you get the same",
    "start": "434919",
    "end": "436800"
  },
  {
    "text": "block of memory right and this is a way",
    "start": "436800",
    "end": "438800"
  },
  {
    "text": "of accessing that shared memory and this",
    "start": "438800",
    "end": "441039"
  },
  {
    "text": "writes at the offset 500 it writes the",
    "start": "441039",
    "end": "444160"
  },
  {
    "text": "integer one two 3 so I'm going to do",
    "start": "444160",
    "end": "446160"
  },
  {
    "text": "that right now um and then in another",
    "start": "446160",
    "end": "448440"
  },
  {
    "text": "process I'm going to read that let's do",
    "start": "448440",
    "end": "451080"
  },
  {
    "text": "it here so we're going to open existing",
    "start": "451080",
    "end": "453199"
  },
  {
    "text": "with the same name um and now I'm going",
    "start": "453199",
    "end": "455560"
  },
  {
    "text": "to read the integer at offset",
    "start": "455560",
    "end": "458360"
  },
  {
    "text": "500 and we should get the same result",
    "start": "458360",
    "end": "460759"
  },
  {
    "text": "back which is great now the only problem",
    "start": "460759",
    "end": "463039"
  },
  {
    "text": "with using these methods like read in 32",
    "start": "463039",
    "end": "465479"
  },
  {
    "text": "is they're kind of slow like if you're",
    "start": "465479",
    "end": "466960"
  },
  {
    "text": "doing a lot of them it's not great so",
    "start": "466960",
    "end": "469560"
  },
  {
    "text": "you can you can do something else we can",
    "start": "469560",
    "end": "471680"
  },
  {
    "text": "we can um use pointers right this is um",
    "start": "471680",
    "end": "475280"
  },
  {
    "text": "something that basically that that um C",
    "start": "475280",
    "end": "478919"
  },
  {
    "text": "sto from C right it's U the ability to",
    "start": "478919",
    "end": "481840"
  },
  {
    "text": "directly reach into the memory um and",
    "start": "481840",
    "end": "484400"
  },
  {
    "text": "just do what you like to it right so um",
    "start": "484400",
    "end": "487000"
  },
  {
    "text": "this is how you get the pointer you call",
    "start": "487000",
    "end": "489039"
  },
  {
    "text": "this dangerous get handle right they",
    "start": "489039",
    "end": "490879"
  },
  {
    "text": "don't want you to use pointers you only",
    "start": "490879",
    "end": "492919"
  },
  {
    "text": "use them if if you really need them for",
    "start": "492919",
    "end": "494720"
  },
  {
    "text": "performance um then they're really good",
    "start": "494720",
    "end": "496919"
  },
  {
    "text": "um and this is this is poter arithmetic",
    "start": "496919",
    "end": "499400"
  },
  {
    "text": "we're moving ahead 500 bytes um we're",
    "start": "499400",
    "end": "502280"
  },
  {
    "text": "now um casting it to an INT pointer so",
    "start": "502280",
    "end": "504440"
  },
  {
    "text": "that now we can store 123 integer which",
    "start": "504440",
    "end": "507520"
  },
  {
    "text": "is 1 2 3 0 0 Z in bytes it's four bytes",
    "start": "507520",
    "end": "511639"
  },
  {
    "text": "um so so that will give us the same",
    "start": "511639",
    "end": "513120"
  },
  {
    "text": "result but that's that's faster now so",
    "start": "513120",
    "end": "516560"
  },
  {
    "text": "um let's assuming now we're able to to",
    "start": "516560",
    "end": "520200"
  },
  {
    "text": "read and write um memory let's see what",
    "start": "520200",
    "end": "523599"
  },
  {
    "text": "what sort of protocol do we need to",
    "start": "523599",
    "end": "525839"
  },
  {
    "text": "create a a pipe which is a a mechan we",
    "start": "525839",
    "end": "528760"
  },
  {
    "text": "want to be a to send bite arrays to",
    "start": "528760",
    "end": "530800"
  },
  {
    "text": "another process so here's how we can do",
    "start": "530800",
    "end": "533160"
  },
  {
    "text": "it we're going to start out with a",
    "start": "533160",
    "end": "534240"
  },
  {
    "text": "blocker shared memory like this and",
    "start": "534240",
    "end": "536440"
  },
  {
    "text": "we're going to reserve the F first five",
    "start": "536440",
    "end": "538959"
  },
  {
    "text": "b byes as a header so the the the ones",
    "start": "538959",
    "end": "542040"
  },
  {
    "text": "in blue and yellow now I want to write a",
    "start": "542040",
    "end": "545399"
  },
  {
    "text": "message of three bytes one two and three",
    "start": "545399",
    "end": "548200"
  },
  {
    "text": "so first thing I do is I I length prefix",
    "start": "548200",
    "end": "550519"
  },
  {
    "text": "it I write the number three to memory",
    "start": "550519",
    "end": "553000"
  },
  {
    "text": "and then I write the three bytes then I",
    "start": "553000",
    "end": "555440"
  },
  {
    "text": "increment the header in blue to one so",
    "start": "555440",
    "end": "558279"
  },
  {
    "text": "that it shows that we've written a",
    "start": "558279",
    "end": "559680"
  },
  {
    "text": "message and then we flash that",
    "start": "559680",
    "end": "561399"
  },
  {
    "text": "interprocess signal at the bottom that",
    "start": "561399",
    "end": "563519"
  },
  {
    "text": "tells so the other process it's reading",
    "start": "563519",
    "end": "565880"
  },
  {
    "text": "the pipe is waiting on that signal when",
    "start": "565880",
    "end": "567760"
  },
  {
    "text": "that activates it then looks and sees",
    "start": "567760",
    "end": "570399"
  },
  {
    "text": "that the header is now one which is",
    "start": "570399",
    "end": "572040"
  },
  {
    "text": "greater than zero which what it had",
    "start": "572040",
    "end": "573680"
  },
  {
    "text": "before U and so now it can read that",
    "start": "573680",
    "end": "576240"
  },
  {
    "text": "message uh of three bytes long and then",
    "start": "576240",
    "end": "579040"
  },
  {
    "text": "when it's finished reading it it goes",
    "start": "579040",
    "end": "580560"
  },
  {
    "text": "back and reads the header again and it",
    "start": "580560",
    "end": "582519"
  },
  {
    "text": "says is that now two that's still one no",
    "start": "582519",
    "end": "585519"
  },
  {
    "text": "more messages and then it goes back and",
    "start": "585519",
    "end": "586920"
  },
  {
    "text": "reads it again and it spins for about a",
    "start": "586920",
    "end": "589480"
  },
  {
    "text": "thousand times right so that um uh and",
    "start": "589480",
    "end": "592800"
  },
  {
    "text": "then if it after a thousand times it's",
    "start": "592800",
    "end": "594480"
  },
  {
    "text": "still one it will then wait again on",
    "start": "594480",
    "end": "596240"
  },
  {
    "text": "that interprocess signal now the reason",
    "start": "596240",
    "end": "598279"
  },
  {
    "text": "for spinning a th times it means that if",
    "start": "598279",
    "end": "600600"
  },
  {
    "text": "there's a lot of messages going really",
    "start": "600600",
    "end": "602240"
  },
  {
    "text": "quickly um then it you don't get the",
    "start": "602240",
    "end": "604680"
  },
  {
    "text": "overhead of having to wait on that",
    "start": "604680",
    "end": "606279"
  },
  {
    "text": "interprocess signal right which is um",
    "start": "606279",
    "end": "609920"
  },
  {
    "text": "relatively expensive so then um we want",
    "start": "609920",
    "end": "613000"
  },
  {
    "text": "to write another message this time five",
    "start": "613000",
    "end": "614680"
  },
  {
    "text": "bytes so we'll write the five the prefix",
    "start": "614680",
    "end": "618320"
  },
  {
    "text": "length prefix we'll put the five bytes",
    "start": "618320",
    "end": "620240"
  },
  {
    "text": "and we'll increment that now to two um",
    "start": "620240",
    "end": "622839"
  },
  {
    "text": "the other will Flash the interpress",
    "start": "622839",
    "end": "624399"
  },
  {
    "text": "signal and this will process will repeat",
    "start": "624399",
    "end": "627040"
  },
  {
    "text": "the other one can read it and eventually",
    "start": "627040",
    "end": "629360"
  },
  {
    "text": "we're going to fill up that block so",
    "start": "629360",
    "end": "631720"
  },
  {
    "text": "what do we do when we've filled up the",
    "start": "631720",
    "end": "633320"
  },
  {
    "text": "the memory we want to write another",
    "start": "633320",
    "end": "634920"
  },
  {
    "text": "message there not enough room for it um",
    "start": "634920",
    "end": "637320"
  },
  {
    "text": "well the thing I'm doing is very simple",
    "start": "637320",
    "end": "639120"
  },
  {
    "text": "we we just create a new block we create",
    "start": "639120",
    "end": "641519"
  },
  {
    "text": "a new one we start all over again right",
    "start": "641519",
    "end": "643480"
  },
  {
    "text": "so we just keep creating new blocks and",
    "start": "643480",
    "end": "645320"
  },
  {
    "text": "we keep those old blocks in um a list",
    "start": "645320",
    "end": "647600"
  },
  {
    "text": "somewhere and every now and then we're",
    "start": "647600",
    "end": "649480"
  },
  {
    "text": "going to need to to clean that list up",
    "start": "649480",
    "end": "651800"
  },
  {
    "text": "so how we do that is that the the reader",
    "start": "651800",
    "end": "654399"
  },
  {
    "text": "when it's finished reading it it sets",
    "start": "654399",
    "end": "656560"
  },
  {
    "text": "that yellow B in the header to one right",
    "start": "656560",
    "end": "659720"
  },
  {
    "text": "so the the writing process writes four",
    "start": "659720",
    "end": "661720"
  },
  {
    "text": "zeros to indicate now that's finished",
    "start": "661720",
    "end": "663680"
  },
  {
    "text": "it's going to write into a new one um",
    "start": "663680",
    "end": "665720"
  },
  {
    "text": "the reader now sets the yellow bite to",
    "start": "665720",
    "end": "667639"
  },
  {
    "text": "one and then uh at some point in the",
    "start": "667639",
    "end": "669839"
  },
  {
    "text": "future then we that will memory can be",
    "start": "669839",
    "end": "672519"
  },
  {
    "text": "disposed now there's some really",
    "start": "672519",
    "end": "674600"
  },
  {
    "text": "important characteristic to the way",
    "start": "674600",
    "end": "676040"
  },
  {
    "text": "we've done this which is there are no",
    "start": "676040",
    "end": "679279"
  },
  {
    "text": "locks normally you got two processes or",
    "start": "679279",
    "end": "682600"
  },
  {
    "text": "threads Reading Writing same memory you",
    "start": "682600",
    "end": "685160"
  },
  {
    "text": "need locks or things go horribly wrong",
    "start": "685160",
    "end": "687480"
  },
  {
    "text": "we've managed to do this in a way that's",
    "start": "687480",
    "end": "689160"
  },
  {
    "text": "completely Lock Free and this is",
    "start": "689160",
    "end": "691160"
  },
  {
    "text": "important because this gives us a big",
    "start": "691160",
    "end": "693639"
  },
  {
    "text": "performance game because um the sort of",
    "start": "693639",
    "end": "695959"
  },
  {
    "text": "lock we would need to make this work is",
    "start": "695959",
    "end": "697880"
  },
  {
    "text": "not an ordinary lock it would be an",
    "start": "697880",
    "end": "699680"
  },
  {
    "text": "interprocess lock they are way way way",
    "start": "699680",
    "end": "702480"
  },
  {
    "text": "more expensive and slower than ordinary",
    "start": "702480",
    "end": "704760"
  },
  {
    "text": "locks and they would cause other",
    "start": "704760",
    "end": "706560"
  },
  {
    "text": "problems too um in that let's say the",
    "start": "706560",
    "end": "709200"
  },
  {
    "text": "debugger kicks in and breaks now when a",
    "start": "709200",
    "end": "711440"
  },
  {
    "text": "debugger hits a break point all of the",
    "start": "711440",
    "end": "714040"
  },
  {
    "text": "threads freeze on that process imagine",
    "start": "714040",
    "end": "716760"
  },
  {
    "text": "if it held a lock an interpress lock at",
    "start": "716760",
    "end": "718720"
  },
  {
    "text": "that point point it's going to it's",
    "start": "718720",
    "end": "720040"
  },
  {
    "text": "going to freeze the other process it",
    "start": "720040",
    "end": "721800"
  },
  {
    "text": "won't be able to access the pipe so",
    "start": "721800",
    "end": "723519"
  },
  {
    "text": "we're managed to do it in a way that's",
    "start": "723519",
    "end": "724839"
  },
  {
    "text": "completely locked free which is quite",
    "start": "724839",
    "end": "727040"
  },
  {
    "text": "cool so we're going to implement this",
    "start": "727040",
    "end": "729639"
  },
  {
    "text": "now um in in link pad so here's the pipe",
    "start": "729639",
    "end": "733440"
  },
  {
    "text": "and what it looks like so I won't go",
    "start": "733440",
    "end": "735079"
  },
  {
    "text": "into the all the details of the code too",
    "start": "735079",
    "end": "736880"
  },
  {
    "text": "much in here um I've created a a a base",
    "start": "736880",
    "end": "740399"
  },
  {
    "text": "class called meem safe memory mapped",
    "start": "740399",
    "end": "743399"
  },
  {
    "text": "file um that gives us the pointer I've",
    "start": "743399",
    "end": "745760"
  },
  {
    "text": "got a mechanism here to to uh try and uh",
    "start": "745760",
    "end": "748680"
  },
  {
    "text": "uh minimize the chance of dangling",
    "start": "748680",
    "end": "750839"
  },
  {
    "text": "pointers that's basically what that is a",
    "start": "750839",
    "end": "752959"
  },
  {
    "text": "dangling pointer is when you got a",
    "start": "752959",
    "end": "754240"
  },
  {
    "text": "pointer that points to memory that's now",
    "start": "754240",
    "end": "755839"
  },
  {
    "text": "being disposed right and then horrible",
    "start": "755839",
    "end": "757800"
  },
  {
    "text": "things happen so we need some care there",
    "start": "757800",
    "end": "761680"
  },
  {
    "text": "um that's our our pipe that's the",
    "start": "761680",
    "end": "763800"
  },
  {
    "text": "abstract Base Class for a pipe um we",
    "start": "763800",
    "end": "766399"
  },
  {
    "text": "create the the the shared memory over",
    "start": "766399",
    "end": "769920"
  },
  {
    "text": "here um and that's where we we write the",
    "start": "769920",
    "end": "774480"
  },
  {
    "text": "the data in in there with we're um and",
    "start": "774480",
    "end": "777440"
  },
  {
    "text": "the particular part I want to focus on",
    "start": "777440",
    "end": "780240"
  },
  {
    "text": "is um on the input",
    "start": "780240",
    "end": "782959"
  },
  {
    "text": "pipe this is where we we we set the",
    "start": "782959",
    "end": "786920"
  },
  {
    "text": "thing up let me show you the Constructor",
    "start": "786920",
    "end": "788760"
  },
  {
    "text": "so the Constructor we give it the name",
    "start": "788760",
    "end": "791600"
  },
  {
    "text": "and we give it an action of bite so this",
    "start": "791600",
    "end": "794079"
  },
  {
    "text": "tells it what to do when we get a",
    "start": "794079",
    "end": "795760"
  },
  {
    "text": "message it's kind of like an event in C",
    "start": "795760",
    "end": "798600"
  },
  {
    "text": "or um in Java I imagine there's",
    "start": "798600",
    "end": "801120"
  },
  {
    "text": "something similar to an action of of",
    "start": "801120",
    "end": "803120"
  },
  {
    "text": "bites so it's it's a delegate it says",
    "start": "803120",
    "end": "805399"
  },
  {
    "text": "this is what you're going to do if when",
    "start": "805399",
    "end": "807160"
  },
  {
    "text": "you get a B aray run this bit of cover",
    "start": "807160",
    "end": "809040"
  },
  {
    "text": "you you put some code in there um you",
    "start": "809040",
    "end": "810959"
  },
  {
    "text": "could also do that with an eye",
    "start": "810959",
    "end": "812040"
  },
  {
    "text": "observable of of bite array and this is",
    "start": "812040",
    "end": "814959"
  },
  {
    "text": "the loop where we look for new messages",
    "start": "814959",
    "end": "817760"
  },
  {
    "text": "right so that's the spin Cycles so that",
    "start": "817760",
    "end": "820120"
  },
  {
    "text": "we spin a thousand times when we get a",
    "start": "820120",
    "end": "822560"
  },
  {
    "text": "new message when the spin Cycles go to",
    "start": "822560",
    "end": "824639"
  },
  {
    "text": "zero we wait on the the new message",
    "start": "824639",
    "end": "826320"
  },
  {
    "text": "signal there's something in here which I",
    "start": "826320",
    "end": "828040"
  },
  {
    "text": "want to point out which is quite",
    "start": "828040",
    "end": "829199"
  },
  {
    "text": "important when you're doing lock free",
    "start": "829199",
    "end": "830519"
  },
  {
    "text": "code and there's a couple of places in",
    "start": "830519",
    "end": "832320"
  },
  {
    "text": "here we've got a memory barrier um now",
    "start": "832320",
    "end": "835120"
  },
  {
    "text": "when you you when you're not using locks",
    "start": "835120",
    "end": "837040"
  },
  {
    "text": "you run into a problem in that the um",
    "start": "837040",
    "end": "839680"
  },
  {
    "text": "underlying processes the Intel and AMD",
    "start": "839680",
    "end": "842519"
  },
  {
    "text": "processes they make a um a guarantee um",
    "start": "842519",
    "end": "847399"
  },
  {
    "text": "which kind of breaks down when you start",
    "start": "847399",
    "end": "848959"
  },
  {
    "text": "doing uh multi-threaded code or you have",
    "start": "848959",
    "end": "850839"
  },
  {
    "text": "multiple processes so um it basically",
    "start": "850839",
    "end": "854560"
  },
  {
    "text": "reserves the processes reserve the right",
    "start": "854560",
    "end": "856920"
  },
  {
    "text": "to reorder your instructions your reads",
    "start": "856920",
    "end": "859480"
  },
  {
    "text": "and writes um and but they guarantee",
    "start": "859480",
    "end": "861920"
  },
  {
    "text": "that those reorders will not change the",
    "start": "861920",
    "end": "865199"
  },
  {
    "text": "outcome as long as it's a",
    "start": "865199",
    "end": "867920"
  },
  {
    "text": "single-threaded program or a",
    "start": "867920",
    "end": "870360"
  },
  {
    "text": "multi-threaded program that uses locks",
    "start": "870360",
    "end": "873440"
  },
  {
    "text": "now if those don't hold then now those",
    "start": "873440",
    "end": "876440"
  },
  {
    "text": "bets are off so it can do some pretty",
    "start": "876440",
    "end": "878560"
  },
  {
    "text": "nasty things in terms of reordering",
    "start": "878560",
    "end": "880279"
  },
  {
    "text": "reads so now uh you need to look at the",
    "start": "880279",
    "end": "882279"
  },
  {
    "text": "underlying memory model and and and in",
    "start": "882279",
    "end": "884360"
  },
  {
    "text": "this case we need to insert two memory",
    "start": "884360",
    "end": "886600"
  },
  {
    "text": "barriers and what this does is a memory",
    "start": "886600",
    "end": "888600"
  },
  {
    "text": "barrier prevents any reordering",
    "start": "888600",
    "end": "890560"
  },
  {
    "text": "occurring across that barrier so the",
    "start": "890560",
    "end": "892720"
  },
  {
    "text": "time when we're vulnerable is right over",
    "start": "892720",
    "end": "896120"
  },
  {
    "text": "here when we in the time when we're",
    "start": "896120",
    "end": "897880"
  },
  {
    "text": "reading in between reading the data and",
    "start": "897880",
    "end": "900759"
  },
  {
    "text": "reading the header when we're doing that",
    "start": "900759",
    "end": "902320"
  },
  {
    "text": "spin that's when if the if if those re",
    "start": "902320",
    "end": "905000"
  },
  {
    "text": "instructions got reordered um that could",
    "start": "905000",
    "end": "907040"
  },
  {
    "text": "cause it to fail so we've got two memory",
    "start": "907040",
    "end": "909079"
  },
  {
    "text": "barriers in there to bring that",
    "start": "909079",
    "end": "910440"
  },
  {
    "text": "happening so let's run that now and see",
    "start": "910440",
    "end": "912560"
  },
  {
    "text": "what we get so the first thing we'll do",
    "start": "912560",
    "end": "915079"
  },
  {
    "text": "get that pipe back to the pipe run the",
    "start": "915079",
    "end": "916880"
  },
  {
    "text": "demo the demo is quite simple it just",
    "start": "916880",
    "end": "918720"
  },
  {
    "text": "writes a a message of three bytes and",
    "start": "918720",
    "end": "921240"
  },
  {
    "text": "then a message of five bytes in there so",
    "start": "921240",
    "end": "923360"
  },
  {
    "text": "we run that we should just see that",
    "start": "923360",
    "end": "925079"
  },
  {
    "text": "message getting dumped out and I'll run",
    "start": "925079",
    "end": "927160"
  },
  {
    "text": "that and we'll get um a three in a f but",
    "start": "927160",
    "end": "929319"
  },
  {
    "text": "message that works and now I'm going to",
    "start": "929319",
    "end": "931920"
  },
  {
    "text": "run this stress test which will give you",
    "start": "931920",
    "end": "933319"
  },
  {
    "text": "an idea of the performance we're going",
    "start": "933319",
    "end": "934720"
  },
  {
    "text": "to get with this um and we're getting",
    "start": "934720",
    "end": "937800"
  },
  {
    "text": "around this is on a laptop we're getting",
    "start": "937800",
    "end": "939880"
  },
  {
    "text": "about 34 800,000 messages per second in",
    "start": "939880",
    "end": "943319"
  },
  {
    "text": "there that's pretty low overhead around",
    "start": "943319",
    "end": "944959"
  },
  {
    "text": "a microsc of",
    "start": "944959",
    "end": "947079"
  },
  {
    "text": "message now um I have got all of the",
    "start": "947079",
    "end": "950040"
  },
  {
    "text": "code on this is all available for",
    "start": "950040",
    "end": "952079"
  },
  {
    "text": "download so from link pad you go to the",
    "start": "952079",
    "end": "954800"
  },
  {
    "text": "samples Tab and hit um download import",
    "start": "954800",
    "end": "957360"
  },
  {
    "text": "more samples and cl scroll to the bottom",
    "start": "957360",
    "end": "959199"
  },
  {
    "text": "you can download all these and use them",
    "start": "959199",
    "end": "960560"
  },
  {
    "text": "and do what you like with them if you",
    "start": "960560",
    "end": "962000"
  },
  {
    "text": "want to use them yourself so that's",
    "start": "962000",
    "end": "964240"
  },
  {
    "text": "pretty much that summarizes a low-level",
    "start": "964240",
    "end": "965880"
  },
  {
    "text": "bit so that we're using the pointers and",
    "start": "965880",
    "end": "967240"
  },
  {
    "text": "lowlevel stuff um to to get the",
    "start": "967240",
    "end": "969440"
  },
  {
    "text": "performance and interoperability we need",
    "start": "969440",
    "end": "971199"
  },
  {
    "text": "to make that work so the next stage is",
    "start": "971199",
    "end": "974279"
  },
  {
    "text": "um in in that high level",
    "start": "974279",
    "end": "977199"
  },
  {
    "text": "um so here we're going to now go to the",
    "start": "977199",
    "end": "980920"
  },
  {
    "text": "back to the model so now we need to",
    "start": "980920",
    "end": "982600"
  },
  {
    "text": "write the channel and proxy so what",
    "start": "982600",
    "end": "984240"
  },
  {
    "text": "we're trying to do now is we can",
    "start": "984240",
    "end": "985920"
  },
  {
    "text": "communicate we can send bites from one",
    "start": "985920",
    "end": "987440"
  },
  {
    "text": "process to another but we now want to",
    "start": "987440",
    "end": "989959"
  },
  {
    "text": "instantiate objects in another process",
    "start": "989959",
    "end": "993800"
  },
  {
    "text": "and call methods on them that's going to",
    "start": "993800",
    "end": "995399"
  },
  {
    "text": "be a bit harder so the feature that",
    "start": "995399",
    "end": "997680"
  },
  {
    "text": "we're going to be these are the kind of",
    "start": "997680",
    "end": "998839"
  },
  {
    "text": "features we need client activation means",
    "start": "998839",
    "end": "1000639"
  },
  {
    "text": "that we instantiate objects on another",
    "start": "1000639",
    "end": "1002880"
  },
  {
    "text": "process we want to to pass in parameters",
    "start": "1002880",
    "end": "1006120"
  },
  {
    "text": "and get a return value back so we need",
    "start": "1006120",
    "end": "1008000"
  },
  {
    "text": "to have some way of serializing those",
    "start": "1008000",
    "end": "1009720"
  },
  {
    "text": "values and getting them back um",
    "start": "1009720",
    "end": "1011800"
  },
  {
    "text": "propagating exceptions is that's quite",
    "start": "1011800",
    "end": "1014120"
  },
  {
    "text": "easy exceptions just a return value",
    "start": "1014120",
    "end": "1016079"
  },
  {
    "text": "really that you throw um it needs to be",
    "start": "1016079",
    "end": "1018240"
  },
  {
    "text": "a synchronous uh marshalling and",
    "start": "1018240",
    "end": "1020040"
  },
  {
    "text": "unmarshaling means that we can send the",
    "start": "1020040",
    "end": "1022560"
  },
  {
    "text": "proxies themselves can be serialized",
    "start": "1022560",
    "end": "1025038"
  },
  {
    "text": "across the wire that's really useful I",
    "start": "1025039",
    "end": "1027079"
  },
  {
    "text": "won't go into that in this session but",
    "start": "1027079",
    "end": "1028959"
  },
  {
    "text": "um that's all in the code how how that",
    "start": "1028959",
    "end": "1030520"
  },
  {
    "text": "can be done and we need to be able to",
    "start": "1030520",
    "end": "1032678"
  },
  {
    "text": "write it in less than a week and that",
    "start": "1032679",
    "end": "1034760"
  },
  {
    "text": "means we need to get most of it",
    "start": "1034760",
    "end": "1036438"
  },
  {
    "text": "basically working in a day because with",
    "start": "1036439",
    "end": "1039160"
  },
  {
    "text": "most bits of code you spend one day kind",
    "start": "1039160",
    "end": "1041520"
  },
  {
    "text": "of getting it mostly working and the",
    "start": "1041520",
    "end": "1043678"
  },
  {
    "text": "next four days debugging it and getting",
    "start": "1043679",
    "end": "1045678"
  },
  {
    "text": "that last 10% it's the way it usually",
    "start": "1045679",
    "end": "1047959"
  },
  {
    "text": "works right so what we'll do is um I'm",
    "start": "1047959",
    "end": "1052320"
  },
  {
    "text": "going to to start with the the most um",
    "start": "1052320",
    "end": "1055039"
  },
  {
    "text": "interesting challenge in doing this",
    "start": "1055039",
    "end": "1056600"
  },
  {
    "text": "which is we need to a way of if I want",
    "start": "1056600",
    "end": "1058799"
  },
  {
    "text": "to call a method you know Fu on a class",
    "start": "1058799",
    "end": "1061440"
  },
  {
    "text": "called bar I need a way of describing",
    "start": "1061440",
    "end": "1064039"
  },
  {
    "text": "the method that I want to call and the",
    "start": "1064039",
    "end": "1066240"
  },
  {
    "text": "parameters that I want to send across so",
    "start": "1066240",
    "end": "1068960"
  },
  {
    "text": "how we can do this is using a feature",
    "start": "1068960",
    "end": "1071320"
  },
  {
    "text": "called um expression trees in C and how",
    "start": "1071320",
    "end": "1075159"
  },
  {
    "text": "this works let's start with something",
    "start": "1075159",
    "end": "1077159"
  },
  {
    "text": "really simple this is this in C is a",
    "start": "1077159",
    "end": "1080440"
  },
  {
    "text": "delegate action is a delegate it",
    "start": "1080440",
    "end": "1082159"
  },
  {
    "text": "describes a a parameterless method so um",
    "start": "1082159",
    "end": "1085600"
  },
  {
    "text": "I when I call that method Fu that takes",
    "start": "1085600",
    "end": "1087799"
  },
  {
    "text": "a parameterless method in I can pass in",
    "start": "1087799",
    "end": "1090520"
  },
  {
    "text": "a Lambda expression this is a bit of",
    "start": "1090520",
    "end": "1092120"
  },
  {
    "text": "code and says um you know write out",
    "start": "1092120",
    "end": "1095200"
  },
  {
    "text": "hello world so when I when I run this",
    "start": "1095200",
    "end": "1097720"
  },
  {
    "text": "it's going to execute that and write out",
    "start": "1097720",
    "end": "1099320"
  },
  {
    "text": "hello world now to anyone that's done",
    "start": "1099320",
    "end": "1101880"
  },
  {
    "text": "functional programming this will seem so",
    "start": "1101880",
    "end": "1104039"
  },
  {
    "text": "trivially you know simple I wonder why",
    "start": "1104039",
    "end": "1106280"
  },
  {
    "text": "am I even bother demoing it but this is",
    "start": "1106280",
    "end": "1108440"
  },
  {
    "text": "is essentially how you you treat a",
    "start": "1108440",
    "end": "1109880"
  },
  {
    "text": "function as a value in",
    "start": "1109880",
    "end": "1112240"
  },
  {
    "text": "C so but what we can do in C is going a",
    "start": "1112240",
    "end": "1115799"
  },
  {
    "text": "stage further and change that action to",
    "start": "1115799",
    "end": "1119360"
  },
  {
    "text": "an expression of action what this does",
    "start": "1119360",
    "end": "1122640"
  },
  {
    "text": "it tells the compiler that we want to",
    "start": "1122640",
    "end": "1124880"
  },
  {
    "text": "treat this code as data we want the",
    "start": "1124880",
    "end": "1127400"
  },
  {
    "text": "compiler to construct a code Dom a",
    "start": "1127400",
    "end": "1131799"
  },
  {
    "text": "abstract syntax tree that describes the",
    "start": "1131799",
    "end": "1134960"
  },
  {
    "text": "code that we pass in so now if I dump",
    "start": "1134960",
    "end": "1137600"
  },
  {
    "text": "out that that um that variable I'm going",
    "start": "1137600",
    "end": "1140120"
  },
  {
    "text": "to see a description of calling console.",
    "start": "1140120",
    "end": "1142960"
  },
  {
    "text": "rightline hello world so have a look at",
    "start": "1142960",
    "end": "1145480"
  },
  {
    "text": "that and now we can see in there we've",
    "start": "1145480",
    "end": "1147880"
  },
  {
    "text": "got a um a Lambda expression and in",
    "start": "1147880",
    "end": "1150679"
  },
  {
    "text": "there the body",
    "start": "1150679",
    "end": "1153440"
  },
  {
    "text": "is a method called expression the method",
    "start": "1153440",
    "end": "1156720"
  },
  {
    "text": "is console right line and these are the",
    "start": "1156720",
    "end": "1158919"
  },
  {
    "text": "arguments we passed in of type string",
    "start": "1158919",
    "end": "1161960"
  },
  {
    "text": "constant hello world so this is how we",
    "start": "1161960",
    "end": "1164440"
  },
  {
    "text": "can describe the method that we want to",
    "start": "1164440",
    "end": "1166200"
  },
  {
    "text": "call in the other process so these are",
    "start": "1166200",
    "end": "1168360"
  },
  {
    "text": "expression trees are critical to making",
    "start": "1168360",
    "end": "1170200"
  },
  {
    "text": "this work well because um any other way",
    "start": "1170200",
    "end": "1172679"
  },
  {
    "text": "is is going to to involve a lot of",
    "start": "1172679",
    "end": "1174440"
  },
  {
    "text": "compromises with this we get complete",
    "start": "1174440",
    "end": "1176640"
  },
  {
    "text": "static type safety so we can rename",
    "start": "1176640",
    "end": "1178840"
  },
  {
    "text": "anything and it and it renames it",
    "start": "1178840",
    "end": "1180679"
  },
  {
    "text": "everywhere the call sites as well as the",
    "start": "1180679",
    "end": "1184200"
  },
  {
    "text": "callers so let's have a look at flesh",
    "start": "1184200",
    "end": "1187120"
  },
  {
    "text": "out what the um I've got another example",
    "start": "1187120",
    "end": "1190200"
  },
  {
    "text": "here which shows in a bit more detail",
    "start": "1190200",
    "end": "1191960"
  },
  {
    "text": "how we can we can look at that so if the",
    "start": "1191960",
    "end": "1194120"
  },
  {
    "text": "body is a method called expression let's",
    "start": "1194120",
    "end": "1196240"
  },
  {
    "text": "stump out the method and the arguments",
    "start": "1196240",
    "end": "1198240"
  },
  {
    "text": "so we made that more explicit here so",
    "start": "1198240",
    "end": "1200520"
  },
  {
    "text": "now we we've got the the method is the",
    "start": "1200520",
    "end": "1202360"
  },
  {
    "text": "right line and these are the arguments",
    "start": "1202360",
    "end": "1204400"
  },
  {
    "text": "so let's um write a really flesh out",
    "start": "1204400",
    "end": "1206840"
  },
  {
    "text": "something basic in terms of what what",
    "start": "1206840",
    "end": "1209000"
  },
  {
    "text": "this remoting framework is going to look",
    "start": "1209000",
    "end": "1210919"
  },
  {
    "text": "like so we'll create something called",
    "start": "1210919",
    "end": "1212880"
  },
  {
    "text": "Fast channel that encapsulates what",
    "start": "1212880",
    "end": "1214919"
  },
  {
    "text": "we're going to do and this is how we new",
    "start": "1214919",
    "end": "1217880"
  },
  {
    "text": "up an object so if I want to instantiate",
    "start": "1217880",
    "end": "1220200"
  },
  {
    "text": "a new instance of remote class I do that",
    "start": "1220200",
    "end": "1223280"
  },
  {
    "text": "and that returns a proxy of remote class",
    "start": "1223280",
    "end": "1226520"
  },
  {
    "text": "that now lets us call methods on the",
    "start": "1226520",
    "end": "1228320"
  },
  {
    "text": "remote class um and then I want to",
    "start": "1228320",
    "end": "1230520"
  },
  {
    "text": "execute a method called Su remote method",
    "start": "1230520",
    "end": "1232480"
  },
  {
    "text": "I do it by passing in a Lambda",
    "start": "1232480",
    "end": "1234120"
  },
  {
    "text": "expression and now I can these are the",
    "start": "1234120",
    "end": "1235880"
  },
  {
    "text": "arguments that I'm going to pass in",
    "start": "1235880",
    "end": "1237520"
  },
  {
    "text": "there so um this is what the fast",
    "start": "1237520",
    "end": "1239720"
  },
  {
    "text": "channel will look like it will have an",
    "start": "1239720",
    "end": "1241440"
  },
  {
    "text": "input and an output pipe we need if",
    "start": "1241440",
    "end": "1244200"
  },
  {
    "text": "bidirectional because we need to get",
    "start": "1244200",
    "end": "1245799"
  },
  {
    "text": "return values back and exceptions back",
    "start": "1245799",
    "end": "1248120"
  },
  {
    "text": "the other way this is how we new up",
    "start": "1248120",
    "end": "1250880"
  },
  {
    "text": "something instantiate it we have a",
    "start": "1250880",
    "end": "1252720"
  },
  {
    "text": "method Activa of T remote we create that",
    "start": "1252720",
    "end": "1255720"
  },
  {
    "text": "proxy and then we will send something",
    "start": "1255720",
    "end": "1258120"
  },
  {
    "text": "something across the wire right across",
    "start": "1258120",
    "end": "1260039"
  },
  {
    "text": "that pipe that tells it to instantiate",
    "start": "1260039",
    "end": "1262520"
  },
  {
    "text": "the object this is the the demo remote",
    "start": "1262520",
    "end": "1265000"
  },
  {
    "text": "class I want to activate a method like",
    "start": "1265000",
    "end": "1267039"
  },
  {
    "text": "that call a method some remote method um",
    "start": "1267039",
    "end": "1270080"
  },
  {
    "text": "that's the proxy here this is what the",
    "start": "1270080",
    "end": "1271760"
  },
  {
    "text": "proxy will look like that's our run",
    "start": "1271760",
    "end": "1273840"
  },
  {
    "text": "method it's an expression of action of",
    "start": "1273840",
    "end": "1276880"
  },
  {
    "text": "t- remote so it's operates on the T",
    "start": "1276880",
    "end": "1279840"
  },
  {
    "text": "remote class and the expression means we",
    "start": "1279840",
    "end": "1283120"
  },
  {
    "text": "want to treat this code as data so then",
    "start": "1283120",
    "end": "1286200"
  },
  {
    "text": "we're saying we're only going to allow",
    "start": "1286200",
    "end": "1287559"
  },
  {
    "text": "simple me call so if the no type is not",
    "start": "1287559",
    "end": "1290960"
  },
  {
    "text": "a expression call then we're going to",
    "start": "1290960",
    "end": "1293120"
  },
  {
    "text": "we're going to throw an exception I'm",
    "start": "1293120",
    "end": "1294919"
  },
  {
    "text": "going to dump these out for now um but",
    "start": "1294919",
    "end": "1297240"
  },
  {
    "text": "this is what we'll do in real life we'",
    "start": "1297240",
    "end": "1298840"
  },
  {
    "text": "serialize that method call and send it",
    "start": "1298840",
    "end": "1300679"
  },
  {
    "text": "down the wire now before we get any",
    "start": "1300679",
    "end": "1303400"
  },
  {
    "text": "further we'd also need a method that",
    "start": "1303400",
    "end": "1305520"
  },
  {
    "text": "returns a value right so if this is a a",
    "start": "1305520",
    "end": "1308120"
  },
  {
    "text": "void method if I call this for a void",
    "start": "1308120",
    "end": "1310000"
  },
  {
    "text": "method but if I want to call it with a",
    "start": "1310000",
    "end": "1311840"
  },
  {
    "text": "method that returns something I need a",
    "start": "1311840",
    "end": "1313679"
  },
  {
    "text": "vow which returns a t result in there so",
    "start": "1313679",
    "end": "1316760"
  },
  {
    "text": "it's getting a bit more complex now now",
    "start": "1316760",
    "end": "1318200"
  },
  {
    "text": "the signature so the expression again",
    "start": "1318200",
    "end": "1320600"
  },
  {
    "text": "treat this code as data this is I want a",
    "start": "1320600",
    "end": "1323520"
  },
  {
    "text": "function that takes in a t- remote and",
    "start": "1323520",
    "end": "1325960"
  },
  {
    "text": "returns a t result in",
    "start": "1325960",
    "end": "1328640"
  },
  {
    "text": "there now the final thing is remember I",
    "start": "1328640",
    "end": "1331840"
  },
  {
    "text": "said one of the requirements is that",
    "start": "1331840",
    "end": "1333600"
  },
  {
    "text": "everything must be asynchronous in here",
    "start": "1333600",
    "end": "1336320"
  },
  {
    "text": "um and this is this is a really",
    "start": "1336320",
    "end": "1337960"
  },
  {
    "text": "important requirement because we we can",
    "start": "1337960",
    "end": "1340120"
  },
  {
    "text": "never be sure that we're going to get a",
    "start": "1340120",
    "end": "1341640"
  },
  {
    "text": "result back right the debugger might",
    "start": "1341640",
    "end": "1343640"
  },
  {
    "text": "have kicked in and stopped all the",
    "start": "1343640",
    "end": "1345120"
  },
  {
    "text": "threads or you might have crashed so I",
    "start": "1345120",
    "end": "1347159"
  },
  {
    "text": "don't want any method to be blocking so",
    "start": "1347159",
    "end": "1349600"
  },
  {
    "text": "everything is going to return a result",
    "start": "1349600",
    "end": "1353120"
  },
  {
    "text": "in the future not the present now in C",
    "start": "1353120",
    "end": "1356480"
  },
  {
    "text": "to do that you wrap it in task of to",
    "start": "1356480",
    "end": "1359640"
  },
  {
    "text": "your result that's how we How We Do",
    "start": "1359640",
    "end": "1361760"
  },
  {
    "text": "Futures in C um and that allows us to",
    "start": "1361760",
    "end": "1366080"
  },
  {
    "text": "use the await syntax so here's now what",
    "start": "1366080",
    "end": "1368840"
  },
  {
    "text": "the what the avow will actually look",
    "start": "1368840",
    "end": "1370520"
  },
  {
    "text": "like so again this is treat this as",
    "start": "1370520",
    "end": "1373039"
  },
  {
    "text": "coders data we want a function that",
    "start": "1373039",
    "end": "1375720"
  },
  {
    "text": "takes in the remote type and returns at",
    "start": "1375720",
    "end": "1380200"
  },
  {
    "text": "result in the future that's a signature",
    "start": "1380200",
    "end": "1383760"
  },
  {
    "text": "so that's the power of the language when",
    "start": "1383760",
    "end": "1385360"
  },
  {
    "text": "you're using it at the at the the most",
    "start": "1385360",
    "end": "1387200"
  },
  {
    "text": "expressive end we can describe an awful",
    "start": "1387200",
    "end": "1389440"
  },
  {
    "text": "lot just with that",
    "start": "1389440",
    "end": "1390840"
  },
  {
    "text": "signature it's fairly abstract stuff so",
    "start": "1390840",
    "end": "1394080"
  },
  {
    "text": "I'm going to to run that now I'm going",
    "start": "1394080",
    "end": "1395520"
  },
  {
    "text": "to implement the whole thing this is the",
    "start": "1395520",
    "end": "1397520"
  },
  {
    "text": "whole uh whole fast Channel this is few",
    "start": "1397520",
    "end": "1400559"
  },
  {
    "text": "more pages of code and um I've got a",
    "start": "1400559",
    "end": "1403600"
  },
  {
    "text": "method with some things that we want to",
    "start": "1403600",
    "end": "1404960"
  },
  {
    "text": "call here like an ad method and get",
    "start": "1404960",
    "end": "1407440"
  },
  {
    "text": "process ID method and I've got an",
    "start": "1407440",
    "end": "1410080"
  },
  {
    "text": "asynchronous one there this also lets",
    "start": "1410080",
    "end": "1411960"
  },
  {
    "text": "you call asynchronous methods as well as",
    "start": "1411960",
    "end": "1414039"
  },
  {
    "text": "synchronous ones and um this is an",
    "start": "1414039",
    "end": "1416919"
  },
  {
    "text": "example of how we're going to use it so",
    "start": "1416919",
    "end": "1418960"
  },
  {
    "text": "I'm going to instantiate an object",
    "start": "1418960",
    "end": "1420559"
  },
  {
    "text": "called Fu we're going to um get the",
    "start": "1420559",
    "end": "1423559"
  },
  {
    "text": "process ID simple property get um and",
    "start": "1423559",
    "end": "1426600"
  },
  {
    "text": "then I'm going to add two numbers",
    "start": "1426600",
    "end": "1427840"
  },
  {
    "text": "together I'm call that method called add",
    "start": "1427840",
    "end": "1429679"
  },
  {
    "text": "and then I'm calling the asynchronous um",
    "start": "1429679",
    "end": "1431960"
  },
  {
    "text": "version of that now what's interesting",
    "start": "1431960",
    "end": "1433960"
  },
  {
    "text": "here is all of these are returning",
    "start": "1433960",
    "end": "1435640"
  },
  {
    "text": "values in the future but it looks like",
    "start": "1435640",
    "end": "1437960"
  },
  {
    "text": "like the simple synchronous code because",
    "start": "1437960",
    "end": "1440120"
  },
  {
    "text": "we're using this awake keyword and this",
    "start": "1440120",
    "end": "1442000"
  },
  {
    "text": "is critical to making this tractable if",
    "start": "1442000",
    "end": "1444480"
  },
  {
    "text": "it weren't for this awake it will the",
    "start": "1444480",
    "end": "1446320"
  },
  {
    "text": "whole thing will be way too messy with",
    "start": "1446320",
    "end": "1447840"
  },
  {
    "text": "continuations everywhere and cbats so",
    "start": "1447840",
    "end": "1450640"
  },
  {
    "text": "this is a really good feature that",
    "start": "1450640",
    "end": "1451960"
  },
  {
    "text": "allows us to do this so we can write",
    "start": "1451960",
    "end": "1453679"
  },
  {
    "text": "code that looks like synchronous code",
    "start": "1453679",
    "end": "1455360"
  },
  {
    "text": "but it's fully asynchronous and so when",
    "start": "1455360",
    "end": "1456840"
  },
  {
    "text": "I run that this all works perfectly and",
    "start": "1456840",
    "end": "1459480"
  },
  {
    "text": "gives us the the um the results were",
    "start": "1459480",
    "end": "1461840"
  },
  {
    "text": "expecting um but having demoed all of",
    "start": "1461840",
    "end": "1464279"
  },
  {
    "text": "that it does kind of look a bit smok and",
    "start": "1464279",
    "end": "1465919"
  },
  {
    "text": "mirrors doesn't it because it's all in",
    "start": "1465919",
    "end": "1467279"
  },
  {
    "text": "link pad I wrote link pads that I could",
    "start": "1467279",
    "end": "1469000"
  },
  {
    "text": "have cheated and put a back door in",
    "start": "1469000",
    "end": "1470480"
  },
  {
    "text": "there to make all this demo work so I'm",
    "start": "1470480",
    "end": "1472880"
  },
  {
    "text": "going to do something now to make this a",
    "start": "1472880",
    "end": "1474720"
  },
  {
    "text": "bit more um uh bit more graphic so I've",
    "start": "1474720",
    "end": "1478159"
  },
  {
    "text": "written something in Visual Studio is a",
    "start": "1478159",
    "end": "1481000"
  },
  {
    "text": "symol Windows forms application got a",
    "start": "1481000",
    "end": "1483880"
  },
  {
    "text": "sybol form there and um I've added I've",
    "start": "1483880",
    "end": "1486960"
  },
  {
    "text": "copied and paste the fast Channel code",
    "start": "1486960",
    "end": "1489080"
  },
  {
    "text": "in there which I've written that's all",
    "start": "1489080",
    "end": "1490679"
  },
  {
    "text": "copied and paste in there and then I've",
    "start": "1490679",
    "end": "1492399"
  },
  {
    "text": "written a class called remote control",
    "start": "1492399",
    "end": "1494520"
  },
  {
    "text": "this is the one that we're going to",
    "start": "1494520",
    "end": "1495640"
  },
  {
    "text": "instantiate remotely from link pad I'm",
    "start": "1495640",
    "end": "1497840"
  },
  {
    "text": "going to tell instantiate this and I've",
    "start": "1497840",
    "end": "1500279"
  },
  {
    "text": "got a single method for now called set",
    "start": "1500279",
    "end": "1502120"
  },
  {
    "text": "color and that sets the background color",
    "start": "1502120",
    "end": "1504240"
  },
  {
    "text": "of the form so we're going to run that",
    "start": "1504240",
    "end": "1508399"
  },
  {
    "text": "now go back to link pad that's our main",
    "start": "1510360",
    "end": "1512840"
  },
  {
    "text": "form on the right link pad on the left",
    "start": "1512840",
    "end": "1515279"
  },
  {
    "text": "and I'm going to run a method on",
    "start": "1515279",
    "end": "1519799"
  },
  {
    "text": "there here we are",
    "start": "1519799",
    "end": "1523360"
  },
  {
    "text": "so so I'm going to create the channel",
    "start": "1523760",
    "end": "1526320"
  },
  {
    "text": "I'm going to activate the remote control",
    "start": "1526320",
    "end": "1528120"
  },
  {
    "text": "new it up and then I'm going to call a",
    "start": "1528120",
    "end": "1529600"
  },
  {
    "text": "method on it and that method will",
    "start": "1529600",
    "end": "1533000"
  },
  {
    "text": "be P do set",
    "start": "1533000",
    "end": "1537039"
  },
  {
    "text": "color to bet red so that's going to Now",
    "start": "1537039",
    "end": "1539520"
  },
  {
    "text": "set the color to Red let's run that and",
    "start": "1539520",
    "end": "1541880"
  },
  {
    "text": "it sets the color to Red so we really",
    "start": "1541880",
    "end": "1543480"
  },
  {
    "text": "are doing it remotely um now I'm going",
    "start": "1543480",
    "end": "1547240"
  },
  {
    "text": "to to make this a little more elaborate",
    "start": "1547240",
    "end": "1549480"
  },
  {
    "text": "so we're going to go to the next one",
    "start": "1549480",
    "end": "1552559"
  },
  {
    "text": "um and I'm going to cycle through 10",
    "start": "1552559",
    "end": "1555159"
  },
  {
    "text": "different random colors so I'm calling",
    "start": "1555159",
    "end": "1556960"
  },
  {
    "text": "get random color color and we're going",
    "start": "1556960",
    "end": "1558799"
  },
  {
    "text": "to then um wait for a second I wait for",
    "start": "1558799",
    "end": "1561960"
  },
  {
    "text": "a second and run this again so now we're",
    "start": "1561960",
    "end": "1563440"
  },
  {
    "text": "get it's going to cycle through 10",
    "start": "1563440",
    "end": "1564880"
  },
  {
    "text": "random colors so we're really out",
    "start": "1564880",
    "end": "1566200"
  },
  {
    "text": "controlling this thing",
    "start": "1566200",
    "end": "1568880"
  },
  {
    "text": "remotely um and the final the final",
    "start": "1568880",
    "end": "1571200"
  },
  {
    "text": "thing I want to do is I've also got a",
    "start": "1571200",
    "end": "1573840"
  },
  {
    "text": "method in",
    "start": "1573840",
    "end": "1576360"
  },
  {
    "text": "there back to the demo I've also got a",
    "start": "1577880",
    "end": "1580279"
  },
  {
    "text": "method which lets us display an image in",
    "start": "1580279",
    "end": "1583919"
  },
  {
    "text": "the",
    "start": "1583919",
    "end": "1586399"
  },
  {
    "text": "um on that form so that method is called",
    "start": "1586399",
    "end": "1589159"
  },
  {
    "text": "show image it calls show image on there",
    "start": "1589159",
    "end": "1591760"
  },
  {
    "text": "and that means I can set a whole send a",
    "start": "1591760",
    "end": "1593880"
  },
  {
    "text": "whole image across the wire and we're",
    "start": "1593880",
    "end": "1595520"
  },
  {
    "text": "going to do that so the image I'm going",
    "start": "1595520",
    "end": "1597120"
  },
  {
    "text": "to",
    "start": "1597120",
    "end": "1598000"
  },
  {
    "text": "send is a mandal fractal so to do that",
    "start": "1598000",
    "end": "1602000"
  },
  {
    "text": "I've written some",
    "start": "1602000",
    "end": "1604080"
  },
  {
    "text": "code to uh to draw to render and draw",
    "start": "1604080",
    "end": "1607679"
  },
  {
    "text": "mandal BRS so this class handles all of",
    "start": "1607679",
    "end": "1610679"
  },
  {
    "text": "the code to do to draw mandle fractal",
    "start": "1610679",
    "end": "1613120"
  },
  {
    "text": "and it does it using parallel Loops",
    "start": "1613120",
    "end": "1615520"
  },
  {
    "text": "right in in um in the par parallel",
    "start": "1615520",
    "end": "1618200"
  },
  {
    "text": "parallel Library framework so this does",
    "start": "1618200",
    "end": "1621200"
  },
  {
    "text": "um that the parallel Loops gives us back",
    "start": "1621200",
    "end": "1623000"
  },
  {
    "text": "an image um containing a Mandel BR",
    "start": "1623000",
    "end": "1625880"
  },
  {
    "text": "fractal so and what we're going to do",
    "start": "1625880",
    "end": "1627640"
  },
  {
    "text": "now is um we're going to await the draw",
    "start": "1627640",
    "end": "1630080"
  },
  {
    "text": "mandal BR fractal that gives us a frame",
    "start": "1630080",
    "end": "1632840"
  },
  {
    "text": "um and then there's the code to do the",
    "start": "1632840",
    "end": "1635600"
  },
  {
    "text": "uh draw Mandel BR so we ask it for the",
    "start": "1635600",
    "end": "1638559"
  },
  {
    "text": "window size on the other side and then",
    "start": "1638559",
    "end": "1640760"
  },
  {
    "text": "we create a frame with that size we get",
    "start": "1640760",
    "end": "1643200"
  },
  {
    "text": "the image from our um calculator and",
    "start": "1643200",
    "end": "1645919"
  },
  {
    "text": "then we're calling show image so we're",
    "start": "1645919",
    "end": "1647919"
  },
  {
    "text": "doing we're doing all the computations",
    "start": "1647919",
    "end": "1649520"
  },
  {
    "text": "in link pad and we're using this other",
    "start": "1649520",
    "end": "1651799"
  },
  {
    "text": "process to do the rendering so um let's",
    "start": "1651799",
    "end": "1654720"
  },
  {
    "text": "go let's run this now and see what",
    "start": "1654720",
    "end": "1657320"
  },
  {
    "text": "happens and there's a Mandel fractal on",
    "start": "1657320",
    "end": "1659880"
  },
  {
    "text": "the other",
    "start": "1659880",
    "end": "1660840"
  },
  {
    "text": "side the other thing I've done is I've",
    "start": "1660840",
    "end": "1662960"
  },
  {
    "text": "created an another Channel which lets",
    "start": "1662960",
    "end": "1665279"
  },
  {
    "text": "that talk back to link pad so that when",
    "start": "1665279",
    "end": "1667360"
  },
  {
    "text": "I hit a when I when I click on this it's",
    "start": "1667360",
    "end": "1669640"
  },
  {
    "text": "going to call back into the um it's",
    "start": "1669640",
    "end": "1671720"
  },
  {
    "text": "going to call back now into",
    "start": "1671720",
    "end": "1675039"
  },
  {
    "text": "the into the link pack curve code and it",
    "start": "1675559",
    "end": "1678200"
  },
  {
    "text": "will enter this bit of code here so when",
    "start": "1678200",
    "end": "1680279"
  },
  {
    "text": "to hit the click on here breakpoint",
    "start": "1680279",
    "end": "1683320"
  },
  {
    "text": "there we are it's going to now run this",
    "start": "1683320",
    "end": "1685159"
  },
  {
    "text": "code here and what I'm going to do is",
    "start": "1685159",
    "end": "1686480"
  },
  {
    "text": "I'm going to zoom in and render the mtal",
    "start": "1686480",
    "end": "1688519"
  },
  {
    "text": "BR where I've I've clicked it so we'll",
    "start": "1688519",
    "end": "1691159"
  },
  {
    "text": "get them we'll get that off the the um",
    "start": "1691159",
    "end": "1693200"
  },
  {
    "text": "Brak point off and continue running so",
    "start": "1693200",
    "end": "1696279"
  },
  {
    "text": "now we can we can zoom in onto the",
    "start": "1696279",
    "end": "1698120"
  },
  {
    "text": "Mandel BR fractal so all of the",
    "start": "1698120",
    "end": "1700519"
  },
  {
    "text": "computations are occurring in link pad",
    "start": "1700519",
    "end": "1702320"
  },
  {
    "text": "and all of the um the graphics rendering",
    "start": "1702320",
    "end": "1704640"
  },
  {
    "text": "is occurring in a separate process in",
    "start": "1704640",
    "end": "1707000"
  },
  {
    "text": "there and so we're getting pretty good",
    "start": "1707000",
    "end": "1708799"
  },
  {
    "text": "performance with that the the um and",
    "start": "1708799",
    "end": "1712320"
  },
  {
    "text": "pretty good",
    "start": "1712320",
    "end": "1714159"
  },
  {
    "text": "latency eventually we'll get repetitions",
    "start": "1714159",
    "end": "1716519"
  },
  {
    "text": "of the Mandel BR",
    "start": "1716519",
    "end": "1718679"
  },
  {
    "text": "set so",
    "start": "1718679",
    "end": "1721000"
  },
  {
    "text": "um yeah I mean uh to summarize I mean",
    "start": "1721000",
    "end": "1723840"
  },
  {
    "text": "whatever language you're using it's",
    "start": "1723840",
    "end": "1725600"
  },
  {
    "text": "going to have some really good features",
    "start": "1725600",
    "end": "1728000"
  },
  {
    "text": "that distinguish it from other languages",
    "start": "1728000",
    "end": "1729760"
  },
  {
    "text": "so if you want to really be getting the",
    "start": "1729760",
    "end": "1731600"
  },
  {
    "text": "most out of it you ask yourself you know",
    "start": "1731600",
    "end": "1733480"
  },
  {
    "text": "what's the what's the best feature of",
    "start": "1733480",
    "end": "1735159"
  },
  {
    "text": "the language you're using and are you",
    "start": "1735159",
    "end": "1736640"
  },
  {
    "text": "using and making full use of it um and",
    "start": "1736640",
    "end": "1738799"
  },
  {
    "text": "if you're using C or you're thinking of",
    "start": "1738799",
    "end": "1740559"
  },
  {
    "text": "using it then the breadth is of the is",
    "start": "1740559",
    "end": "1743000"
  },
  {
    "text": "the best feature the ability to do both",
    "start": "1743000",
    "end": "1744960"
  },
  {
    "text": "really um high level stuff um and",
    "start": "1744960",
    "end": "1747559"
  },
  {
    "text": "lowlevel stuff in the in the without",
    "start": "1747559",
    "end": "1749559"
  },
  {
    "text": "having to to drop to another",
    "start": "1749559",
    "end": "1751679"
  },
  {
    "text": "language so um any questions on that",
    "start": "1751679",
    "end": "1757600"
  }
]