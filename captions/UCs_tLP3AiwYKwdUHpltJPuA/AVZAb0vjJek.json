[
  {
    "text": "hello I'm very happy to see so many of you here because when I went around yesterday to ask who's the Java",
    "start": "4460",
    "end": "9840"
  },
  {
    "text": "programmer everyone's like not me I don't do Java so um either there are more Java",
    "start": "9840",
    "end": "15480"
  },
  {
    "text": "programmers here than I thought or you're not Java programmers and you're here to laugh at the fact that Java gets lambdas about 20 years after everyone",
    "start": "15480",
    "end": "22140"
  },
  {
    "text": "else so um who is the Java programmer that's good excellent this is a good",
    "start": "22140",
    "end": "27779"
  },
  {
    "text": "start and I can see all the people at the back lurking ready to leave at any time if this is not going to meet their",
    "start": "27779",
    "end": "33239"
  },
  {
    "text": "expectations but don't worry these lights are so bright that if you want to have a bit of a snooze and you're stuck in the middle I won't notice it's fine",
    "start": "33239",
    "end": "39180"
  },
  {
    "text": "just give me a green on the way out and we'll call it even right so yes uh Java 8 and 9 in anger",
    "start": "39180",
    "end": "46320"
  },
  {
    "text": "because you know I wrote this talk more than three weeks ago and so it's old news so I had to add Java 9 in",
    "start": "46320",
    "end": "52980"
  },
  {
    "text": "um I am a technical event a technical Advocate slash evangelist for intellect for jetbrains I work mostly on IntelliJ",
    "start": "52980",
    "end": "59820"
  },
  {
    "text": "IDEA and upsource which means that I have to sort of stay up to date on Trends in terms of java jvm languages",
    "start": "59820",
    "end": "66600"
  },
  {
    "text": "and sort of broader design patterns in Cleveland code and stuff like that um yes so this is a fully buzzword",
    "start": "66600",
    "end": "73260"
  },
  {
    "text": "compliant application of course otherwise I can't present it at conferences because otherwise people are too bored it includes functional idioms",
    "start": "73260",
    "end": "81020"
  },
  {
    "text": "microservices or Services which are kind of small sized it's the same thing um Java eight obviously but since Java 8",
    "start": "81020",
    "end": "88259"
  },
  {
    "text": "has been out for nearly three years now and we have to think not just about Java 8 but also about Java 9.",
    "start": "88259",
    "end": "95159"
  },
  {
    "text": "um who's using Java 8. a chunk of you I'm just using all right who's using some who's using JavaScript",
    "start": "95159",
    "end": "103079"
  },
  {
    "text": "some of you who's on Android to the people never mind",
    "start": "103079",
    "end": "109560"
  },
  {
    "text": "um but there's a chunk of using Java 8 who's using Java 9. that's good so there will be some new",
    "start": "109560",
    "end": "115860"
  },
  {
    "text": "stuff in here um when we ask that question at devops people put their hands up and then we had to make sure they won't put it into",
    "start": "115860",
    "end": "121259"
  },
  {
    "text": "production yet because it's not going to be out for like a year it's really not ready yet um so Java 8 has loads of new features",
    "start": "121259",
    "end": "127860"
  },
  {
    "text": "um including stuff around hotspot and security and Mission Control and other things you are not allowed to read as it",
    "start": "127860",
    "end": "133379"
  },
  {
    "text": "goes past that fast but of course what most people think about when you're looking at Java 8 is Lambda expressions",
    "start": "133379",
    "end": "139200"
  },
  {
    "text": "and streams API and like I said most people are kind of laughing at us because everyone else has had Lambda",
    "start": "139200",
    "end": "144300"
  },
  {
    "text": "expressions in their languages forever and we're just kind of just about starting to get them in Java and but",
    "start": "144300",
    "end": "149819"
  },
  {
    "text": "what I wanted to do is not demonstrate these features in terms of um this is the syntax of a Lambda expression and",
    "start": "149819",
    "end": "155819"
  },
  {
    "text": "you know this is what a stream operation looks like but to put it all together in a real world application with live",
    "start": "155819",
    "end": "160860"
  },
  {
    "text": "coding because danger is my middle name and it's not really it's Merry",
    "start": "160860",
    "end": "166260"
  },
  {
    "text": "um so I'm going to put it together in a real world application and again because this is fully fully buzzword compliant",
    "start": "166260",
    "end": "173700"
  },
  {
    "text": "um it's going to be a Twitter dashboard which consumes a real-time data feed and puts it through a millions of services",
    "start": "173700",
    "end": "179099"
  },
  {
    "text": "or five services and um and parses it makes sense of it and displays it on a Twitter dashboard there's a real-time",
    "start": "179099",
    "end": "185040"
  },
  {
    "text": "dashboard I'm using Java FX for the dashboard for a couple of reasons one I want this talk to be sort of pure Java",
    "start": "185040",
    "end": "191700"
  },
  {
    "text": "with as few dependencies as possible just doing everything as much as possible in just Java 8 and Java FX",
    "start": "191700",
    "end": "197459"
  },
  {
    "text": "comes as part of java 8. um two it means I can write things like Lambda expressions and streams even in the UI",
    "start": "197459",
    "end": "202920"
  },
  {
    "text": "so I can be demonstrating Java 8 features even in the UI um as I said this is going to be broken",
    "start": "202920",
    "end": "208140"
  },
  {
    "text": "into a series of services I'm not going to go into this architecture diagram now we will come to it piece by piece as we",
    "start": "208140",
    "end": "213720"
  },
  {
    "text": "build it up um the code is available online on GitHub so you can go away take a look at",
    "start": "213720",
    "end": "219060"
  },
  {
    "text": "the code there are a number of different versions of it so you can look at the branches and sort of figure out how the code has evolved over time there'll be a",
    "start": "219060",
    "end": "225780"
  },
  {
    "text": "link at the end of the presentation which points to a page which has links to all the resources not just the code",
    "start": "225780",
    "end": "230879"
  },
  {
    "text": "and slides but also all the um reference material I use to build up the application",
    "start": "230879",
    "end": "237319"
  },
  {
    "text": "so let's um let's just dive straight in there the first thing we're going to build is a leaderboard of top tweeters",
    "start": "238200",
    "end": "244799"
  },
  {
    "text": "so let's imagine you're a conference like this and maybe you want to look at the um the oh excuse me uh you want to",
    "start": "244799",
    "end": "252360"
  },
  {
    "text": "have a look at who's the most active tweeting on your um on your hashtag for your conference and so we're going to",
    "start": "252360",
    "end": "258060"
  },
  {
    "text": "put the top tweeters at the top of our leaderboard what I want to do is I want to build this up sort of front end backwards",
    "start": "258060",
    "end": "264780"
  },
  {
    "text": "partly so that I can show you something in the UI but also because this is sort of a sensible way to build up applications so I'm going to have a stub",
    "start": "264780",
    "end": "271020"
  },
  {
    "text": "service at the back end emitting um uh fake usernames so that can build",
    "start": "271020",
    "end": "276540"
  },
  {
    "text": "the UI off the back of that so this is the first thing we'll get started on",
    "start": "276540",
    "end": "282120"
  },
  {
    "text": "putting gases on so I can see something",
    "start": "282120",
    "end": "285620"
  },
  {
    "text": "so this is where we're going to see our first Lambda expression and so of the people who are using Java 8 are you like",
    "start": "287220",
    "end": "293340"
  },
  {
    "text": "really using Java 8 with Lambda expressions and streams a few of you are you using a are you",
    "start": "293340",
    "end": "299880"
  },
  {
    "text": "compiling against Java on an older code base some of the same people",
    "start": "299880",
    "end": "306960"
  },
  {
    "text": "um so for those of you who've been using Java 8 you've kind of already got the hang of Lambda expression so I'm going to obviously point out some of the",
    "start": "306960",
    "end": "312780"
  },
  {
    "text": "features to some people as if they've never seen it before but obviously new people who've been using it before you can just gloss over that and have a",
    "start": "312780",
    "end": "318960"
  },
  {
    "text": "brief snooze um so we've got our first Lambda expression which is here and what this Lambda expression does is",
    "start": "318960",
    "end": "326039"
  },
  {
    "text": "um we're going to pass it into our sub service and we're going to pass in the sort of business logic of our sub",
    "start": "326039",
    "end": "331919"
  },
  {
    "text": "service and this business logic is just randomly pick me a um a username from",
    "start": "331919",
    "end": "338280"
  },
  {
    "text": "this list of fake Twitter usernames uh who can spot the Java 9 feature in this",
    "start": "338280",
    "end": "344039"
  },
  {
    "text": "code anyone no one's willing to say anything yes",
    "start": "344039",
    "end": "350400"
  },
  {
    "text": "these ones ah thank you for pointing that out it's not a Java 9 feature it's an IntelliJ",
    "start": "350400",
    "end": "355500"
  },
  {
    "text": "2016.3 feature so IntelliJ 2016.3 came out last week",
    "start": "355500",
    "end": "361259"
  },
  {
    "text": "and um what it does is it uses the um the names of the parameters for any",
    "start": "361259",
    "end": "367139"
  },
  {
    "text": "parameter you pass in as a literal like strings and numbers so you can sort of see what it means it's like my favorite",
    "start": "367139",
    "end": "373199"
  },
  {
    "text": "new feature in IntelliJ so I'll keep showing off to everyone but then everyone thinks there's a Java 9 thing it's it's not it's an IntelliJ thing and",
    "start": "373199",
    "end": "380160"
  },
  {
    "text": "so the the Java 9 feature is a list of which seems like an insanely simple",
    "start": "380160",
    "end": "385620"
  },
  {
    "text": "thing that perhaps we should have had before which we sort of did actually because we had a raise dot as list which is effectively the same thing but what",
    "start": "385620",
    "end": "392639"
  },
  {
    "text": "you can also do in Java 9 is not just list of but more interestingly set of",
    "start": "392639",
    "end": "399000"
  },
  {
    "text": "and so let's just do that and turn that into a set",
    "start": "399000",
    "end": "404039"
  },
  {
    "text": "um turn it into a set fine I'll do it the old-fashioned way",
    "start": "404039",
    "end": "411198"
  },
  {
    "text": "um so before if you wanted to create a set sort of offhand like this you couldn't do that before Java 9. so",
    "start": "411840",
    "end": "417240"
  },
  {
    "text": "javanaugh's got some really nice things around creating collections sort of um as you go it makes life a little bit",
    "start": "417240",
    "end": "422460"
  },
  {
    "text": "easier easier as a developer so it's a tiny thing but it's quite useful so let's start up the service",
    "start": "422460",
    "end": "430440"
  },
  {
    "text": "and what the service is just going to do is is going to run slash users port 8083 and as I say like every half a second",
    "start": "430440",
    "end": "436860"
  },
  {
    "text": "it's just going to emit one of these these fake Twitter handles so now that started let's go to our UI",
    "start": "436860",
    "end": "445139"
  },
  {
    "text": "oh now let's bring up the slides so the next thing I want to do is I'm going to create so that's one service running in",
    "start": "445139",
    "end": "451319"
  },
  {
    "text": "the back end could potentially be running on its own separate server somewhere and then I'm going to create the MVC side which is going to consume",
    "start": "451319",
    "end": "457979"
  },
  {
    "text": "that service and then display something on screen so let's look at our dashboard this is",
    "start": "457979",
    "end": "463319"
  },
  {
    "text": "all as I said this is um Java FX so first we need to connect to the endpoint of that user service so I'm going to",
    "start": "463319",
    "end": "470220"
  },
  {
    "text": "create an endpoint right endpoint let's tell it where to connect to",
    "start": "470220",
    "end": "475620"
  },
  {
    "text": "I've um hard-coded in some shortcuts so that I can not mistype the URL",
    "start": "475620",
    "end": "481740"
  },
  {
    "text": "uh what else do we need that's all we need for this turn this into the user endpoint",
    "start": "481740",
    "end": "488639"
  },
  {
    "text": "now I'm going to add a listener to this user endpoint and this is going to be my leaderboard",
    "start": "488639",
    "end": "494460"
  },
  {
    "text": "data so the way I've kind of created my MVC is I have a model so I have this",
    "start": "494460",
    "end": "499680"
  },
  {
    "text": "data object and I have a really dumb controller which just wires together the",
    "start": "499680",
    "end": "504780"
  },
  {
    "text": "the data and the view if we look at the controller it's just got the view in here we'll look at the view in a minute",
    "start": "504780",
    "end": "511860"
  },
  {
    "text": "um and uh so yeah our controller just glues together the The View and the data so",
    "start": "511860",
    "end": "517860"
  },
  {
    "text": "our data because we've added it as a listener and we need to implement a message listener",
    "start": "517860",
    "end": "523560"
  },
  {
    "text": "IntelliJ will add the on message method so what do we want to do this message is the Twitter handle let's rename this so",
    "start": "523560",
    "end": "530519"
  },
  {
    "text": "it's useful let's call it username what I want to do is I have a hash map of all the Twitter users I've ever seen",
    "start": "530519",
    "end": "536940"
  },
  {
    "text": "and so what I want to do is I either need to get to the Twitter user out of the hashmap or if I've never seen them",
    "start": "536940",
    "end": "543180"
  },
  {
    "text": "before create a new Twitter user put it into the hashmap and then what I want to do is for that Twitter user increment",
    "start": "543180",
    "end": "548399"
  },
  {
    "text": "the count of the number of times I've seen it now in the past we'd have to sort of ask the map do you have",
    "start": "548399",
    "end": "554279"
  },
  {
    "text": "something which looks which has this key if not create a new one and then insert it and it's a bit fiddly now with Java 8",
    "start": "554279",
    "end": "561180"
  },
  {
    "text": "all we have to do is just say compute if absent we give it the key which is username and then I'm going to do this",
    "start": "561180",
    "end": "568019"
  },
  {
    "text": "long form way because this is the way that was useful for me to learn how to use Lambda Expressions as I was going",
    "start": "568019",
    "end": "573480"
  },
  {
    "text": "along we could say we give it a function which is this is the function to call to create a new",
    "start": "573480",
    "end": "579959"
  },
  {
    "text": "Twitter user to put into the hashmap which is fairly simple in my case I just say I want a new Twitter user with this",
    "start": "579959",
    "end": "586080"
  },
  {
    "text": "username and then IntelliJ can turn that into a Lambda expression if I want or even",
    "start": "586080",
    "end": "592500"
  },
  {
    "text": "further it can just replace it with a method reference so computer absent you say look for look for something in the",
    "start": "592500",
    "end": "599160"
  },
  {
    "text": "map with this key if it doesn't exist call this function in order to create it so what we'll do then is this is now our",
    "start": "599160",
    "end": "606779"
  },
  {
    "text": "Twitter user so we just need to increment the number of times we've seen it and then what I want to do is I want to",
    "start": "606779",
    "end": "613560"
  },
  {
    "text": "take this list of all my Twitter users and I want to sort it in descending",
    "start": "613560",
    "end": "618959"
  },
  {
    "text": "order and then just take the top however many is going to fit on the screen so this is where we start using our streams",
    "start": "618959",
    "end": "624360"
  },
  {
    "text": "so we say all Twitter users values stream we're going to sort it so we say sorted",
    "start": "624360",
    "end": "632880"
  },
  {
    "text": "and we can we could give it a new comparator even before Java 8 we use",
    "start": "632880",
    "end": "639000"
  },
  {
    "text": "comparators which was our old school way of doing Lambda expressions with our beautiful boilerplate because we like",
    "start": "639000",
    "end": "645480"
  },
  {
    "text": "boilerplate and Java don't we we've got a class name and a method name and some types and some more types and so we're",
    "start": "645480",
    "end": "652800"
  },
  {
    "text": "going to say Tutti user dot get count",
    "start": "652800",
    "end": "658320"
  },
  {
    "text": "minus T1 dot get count and whenever we were doing comparatives",
    "start": "658320",
    "end": "664019"
  },
  {
    "text": "we were like well I'm not really sure whether it's the first one minus the second one or the second one minus the first one let's just give it a go and see what happens and then when we",
    "start": "664019",
    "end": "670860"
  },
  {
    "text": "collapse that down to a Lambda expression that doesn't necessarily improve things for us we still have the same problem of",
    "start": "670860",
    "end": "677339"
  },
  {
    "text": "I'm not really sure whether it's supposed to be this one minus that one or or the other way around IntelliJ is",
    "start": "677339",
    "end": "682620"
  },
  {
    "text": "suggesting that you can use the new methods on comparator so comparator has a bunch of new methods like comparing",
    "start": "682620",
    "end": "688260"
  },
  {
    "text": "and comparing int and then all you have to do when you're using that is pass in a method reference of the method you",
    "start": "688260",
    "end": "694620"
  },
  {
    "text": "want to compare on so it's a little bit more readable and I can actually see in this case that um this is going to",
    "start": "694620",
    "end": "700320"
  },
  {
    "text": "assorted it sort it in ascending order so I just want to do I want to reverse it",
    "start": "700320",
    "end": "705600"
  },
  {
    "text": "so it's a little bit more intuitive when you use things this way if I want I can also",
    "start": "705600",
    "end": "711120"
  },
  {
    "text": "um add a static import so it's not taking up as much space so I'm going to sort it on tweet count in descending order",
    "start": "711120",
    "end": "717540"
  },
  {
    "text": "now I want to limit by my magic number of the number of leaders that are going to fit on the",
    "start": "717540",
    "end": "723240"
  },
  {
    "text": "board and collect that into a list so collectors collectors dot to list",
    "start": "723240",
    "end": "731339"
  },
  {
    "text": "this is now my top tweeters",
    "start": "731339",
    "end": "735740"
  },
  {
    "text": "now what I want to do is this observable list is the javafx object that the UI is",
    "start": "736680",
    "end": "743339"
  },
  {
    "text": "going to be looking at to decide what to display on the screen so I need to somehow get into this list all of the",
    "start": "743339",
    "end": "749880"
  },
  {
    "text": "all of my top tweeters so that's fairly straightforward all I have to do is say items dot set all",
    "start": "749880",
    "end": "756360"
  },
  {
    "text": "top tweeters except that it's not quite as simple as that this on message method is sat on",
    "start": "756360",
    "end": "763079"
  },
  {
    "text": "one thread listening to my user endpoint and manipulating the data based on the the Twitter handles which come in and",
    "start": "763079",
    "end": "769800"
  },
  {
    "text": "the UI thread is using this items list so I can't I can't change the items list",
    "start": "769800",
    "end": "775680"
  },
  {
    "text": "from inside the other thread because that's not what you're supposed to do so I can do something a little bit simpler",
    "start": "775680",
    "end": "781019"
  },
  {
    "text": "though I can pass this functionality to the UI thread to do when it's ready and",
    "start": "781019",
    "end": "786300"
  },
  {
    "text": "I do that by saying platform dot run later and I give it a Lambda expression",
    "start": "786300",
    "end": "792860"
  },
  {
    "text": "so then then I don't have this contention between which thread is doing what I just say to the UI thread run",
    "start": "794639",
    "end": "800160"
  },
  {
    "text": "this piece of functionality when you're ready I don't have to manage that okay",
    "start": "800160",
    "end": "806160"
  },
  {
    "text": "so format that my one-year-old ripped off my control",
    "start": "806160",
    "end": "812519"
  },
  {
    "text": "key so that's my uh that's my excuse for not being able to do the shortcuts and I'm sticking to it",
    "start": "812519",
    "end": "818279"
  },
  {
    "text": "um right so we've sorted out we're listening to the user service we're parsing the data we're we're sorting it",
    "start": "818279",
    "end": "824339"
  },
  {
    "text": "into the values now what we want to do is let's go back to the dashboard and we",
    "start": "824339",
    "end": "830160"
  },
  {
    "text": "need to connect to the endpoint and we need to create the view so this is javafx so we're going to create a",
    "start": "830160",
    "end": "837240"
  },
  {
    "text": "leaderboard this is going to be a table View",
    "start": "837240",
    "end": "843920"
  },
  {
    "text": "I need to give it an ID um I told it which controller I'm using with this View and that happens to have",
    "start": "845100",
    "end": "851040"
  },
  {
    "text": "a table view with this ID so IntelliJ just figured out that's probably the idea I want to use I'm going to give it",
    "start": "851040",
    "end": "856740"
  },
  {
    "text": "a height and I'm going to give it some columns oops that's not right",
    "start": "856740",
    "end": "863639"
  },
  {
    "text": "I'm going to I'd set up a shortcut so that I can easily create some columns because there's a lot of boilerplate in",
    "start": "863639",
    "end": "869399"
  },
  {
    "text": "there this is going to be called Twitter handle",
    "start": "869399",
    "end": "874160"
  },
  {
    "text": "and I want the width to be 300. I need to do the same thing with bless you",
    "start": "875940",
    "end": "881940"
  },
  {
    "text": "um the count of the tweets this is tweet",
    "start": "881940",
    "end": "887880"
  },
  {
    "text": "count and my magic numbers that happen to work so with javafx you can do um you can",
    "start": "887880",
    "end": "895500"
  },
  {
    "text": "Define your UI in Java if you want to you can Define it in XML and of course my initial Instinct was oh XML that's",
    "start": "895500",
    "end": "900839"
  },
  {
    "text": "nasty um but one of the good things about putting the UI or the view bit in the XML is you're not tempted to put any",
    "start": "900839",
    "end": "907139"
  },
  {
    "text": "logic in there it only defines the view so it keeps the view quite nicely separated from the from the model and",
    "start": "907139",
    "end": "912360"
  },
  {
    "text": "the controller so let's go back to our dashboard let's start it up and see what's going to go wrong first",
    "start": "912360",
    "end": "920579"
  },
  {
    "text": "did I start my user test data",
    "start": "920579",
    "end": "924680"
  },
  {
    "text": "oh it's working amazing so you can see it's connecting to the fake user service because we have these",
    "start": "926220",
    "end": "932519"
  },
  {
    "text": "fake Twitter handles um my Heights OH the resolutions change so",
    "start": "932519",
    "end": "937560"
  },
  {
    "text": "that the Height's a bit funny and we can see that the tweets that the account is being updated and it's also resorting it",
    "start": "937560",
    "end": "943980"
  },
  {
    "text": "as new Twitter handles come in so that's kind of cool that's our leaderboard sorted",
    "start": "943980",
    "end": "950779"
  },
  {
    "text": "all right so the next thing we want to do is that's kind of fine we're looking at Twitter users let's do a bit of analysis on the Twitter data let's",
    "start": "952320",
    "end": "958860"
  },
  {
    "text": "figure out whether your conference attendees for example are generally happy generally sad or maybe a mix of",
    "start": "958860",
    "end": "965100"
  },
  {
    "text": "both happy and sad type emotions so we're going to display this as a pie chart and we're going to do the same",
    "start": "965100",
    "end": "971760"
  },
  {
    "text": "thing we did with the user service we're going to have some a mood stop service in the back end so we can build up our UI off this now what I want from this is",
    "start": "971760",
    "end": "980519"
  },
  {
    "text": "I just want to emit a comma separate comma separated set of values of um of",
    "start": "980519",
    "end": "986639"
  },
  {
    "text": "moods and this will either be happy sad or happy comma sad and so once again it's just the same thing as the user",
    "start": "986639",
    "end": "992880"
  },
  {
    "text": "service I just randomly pick one of those and emit it every half a second so we'll get that up and running",
    "start": "992880",
    "end": "1000320"
  },
  {
    "text": "and that's going and we'll create the model view controller for the the mood pie chart",
    "start": "1000320",
    "end": "1009440"
  },
  {
    "text": "so we go back to our dashboard and we need a new end point so we have a new",
    "start": "1009440",
    "end": "1016459"
  },
  {
    "text": "client endpoint uh tweet mode",
    "start": "1016459",
    "end": "1021699"
  },
  {
    "text": "connecting to the mood service now what we did before is um my user",
    "start": "1025280",
    "end": "1030740"
  },
  {
    "text": "service was quite dumb and all it was doing is emitting a string which I can assume to be a Twitter handle my mode",
    "start": "1030740",
    "end": "1036438"
  },
  {
    "text": "service is emitting a comma separated set of values so I would like to do some analysis or parsing of that data before",
    "start": "1036439",
    "end": "1042319"
  },
  {
    "text": "I do anything with it in the UI so I'm going to give my um my endpoint a Lambda",
    "start": "1042319",
    "end": "1048558"
  },
  {
    "text": "expression of how to deal with this data to turn it into something useful so this is a message Handler we're going to take",
    "start": "1048559",
    "end": "1055340"
  },
  {
    "text": "the message and we do um mood parser dot parse the message",
    "start": "1055340",
    "end": "1061760"
  },
  {
    "text": "and that will return me a a tweet mood from my CSV now I can shorten that to a",
    "start": "1061760",
    "end": "1068780"
  },
  {
    "text": "method reference too this is going to be my mood endpoint",
    "start": "1068780",
    "end": "1075940"
  },
  {
    "text": "let's bring that up now I need to add a listener to my mood endpoint",
    "start": "1076640",
    "end": "1082160"
  },
  {
    "text": "this is going to be my mood chart data it's the same sort of pattern as before we're going to make that Implement",
    "start": "1082160",
    "end": "1087919"
  },
  {
    "text": "message listener implement the on message now I'm going to get this tweet mode from the mood",
    "start": "1087919",
    "end": "1094940"
  },
  {
    "text": "service and I want to do some I want to do something based on what the mood is so if the mood is happy",
    "start": "1094940",
    "end": "1104059"
  },
  {
    "text": "then I'm going to increment my happy portion set pi value happy portion dot",
    "start": "1104059",
    "end": "1110419"
  },
  {
    "text": "get pi value plus one and obviously I want to do that for all",
    "start": "1110419",
    "end": "1116000"
  },
  {
    "text": "states so I'm doing copy paste coding because everyone knows copy face coding is the best way to code",
    "start": "1116000",
    "end": "1122840"
  },
  {
    "text": "I did this with like I did this with Robert Martin and Dave Farley watching me do copy paste coding",
    "start": "1122840",
    "end": "1128900"
  },
  {
    "text": "I was like this is not cool I will fix this so um did I say confused",
    "start": "1128900",
    "end": "1134900"
  },
  {
    "text": "yeah so if it's confused increment the confused portion if it's sad increment the sad portion",
    "start": "1134900",
    "end": "1142220"
  },
  {
    "text": "and now of course because we did copy paste coding this is bad and we don't want to",
    "start": "1142220",
    "end": "1147620"
  },
  {
    "text": "do that so we'll extract this into a method and we're going to call it increment pi oh by the way if you're",
    "start": "1147620",
    "end": "1153740"
  },
  {
    "text": "wondering which keyboard shortcuts I'm using mostly they are flashing up down the bottom so that should be helpful ish",
    "start": "1153740",
    "end": "1160520"
  },
  {
    "text": "um so increment Pi now we're going to pull out all the specific stuff to the sad",
    "start": "1160520",
    "end": "1165740"
  },
  {
    "text": "mood so we pull that up into parameter this is called criteria",
    "start": "1165740",
    "end": "1171440"
  },
  {
    "text": "pull this out into parameter call this pi",
    "start": "1171440",
    "end": "1177520"
  },
  {
    "text": "and now IntelliJ can figure out to replace the other two instances of my copy paste coding so that's cool we've",
    "start": "1178760",
    "end": "1185240"
  },
  {
    "text": "kind of reduced our codes down to just three calls to the same method we could",
    "start": "1185240",
    "end": "1190400"
  },
  {
    "text": "go one step further because we are doing Java 8 and we want to lambdify everything put lambdas in everywhere so",
    "start": "1190400",
    "end": "1196940"
  },
  {
    "text": "we use the handy keyboard shortcut of alt Ctrl shift and P and we can introduce a functional parameter so",
    "start": "1196940",
    "end": "1203419"
  },
  {
    "text": "we're going to call this uh do this thing naming is really important",
    "start": "1203419",
    "end": "1209179"
  },
  {
    "text": "um and then that will give me a that will change this method so it takes",
    "start": "1209179",
    "end": "1215539"
  },
  {
    "text": "oh let's move that down sorry that changed this method called so that now I pass in I inject the Lambda",
    "start": "1215539",
    "end": "1222559"
  },
  {
    "text": "expression to implement um which is great because we're lambdifying everything except it's kind of stupid right because we've got like a",
    "start": "1222559",
    "end": "1229580"
  },
  {
    "text": "Boolean value here and then we do something really stupid so um we can use these kinds of",
    "start": "1229580",
    "end": "1234860"
  },
  {
    "text": "refactorings to sort of figure out whether this gives us anything and play with stuff but when we see something",
    "start": "1234860",
    "end": "1239900"
  },
  {
    "text": "like this and we basically just moved our copy paste coding around into a Lambda expression instead of an if",
    "start": "1239900",
    "end": "1244940"
  },
  {
    "text": "statement then I suggest we use the magic incantation of control Z control Z",
    "start": "1244940",
    "end": "1251840"
  },
  {
    "text": "and then it's much neater okay but you can use the refactoring tools to play with stuff and see what's neater and",
    "start": "1251840",
    "end": "1256940"
  },
  {
    "text": "what's cleaner so now we are incrementing our pie chart value let's go back to our view",
    "start": "1256940",
    "end": "1264679"
  },
  {
    "text": "uh let's connect to our endpoint",
    "start": "1264679",
    "end": "1268600"
  },
  {
    "text": "let's glue up our data to our view let's create our view",
    "start": "1270200",
    "end": "1276380"
  },
  {
    "text": "so this is it's really complicated doing pie charts in javafx what you do is you say I want a pie chart I want it to have",
    "start": "1276380",
    "end": "1282140"
  },
  {
    "text": "this ID I want it to have this title and that's it",
    "start": "1282140",
    "end": "1288919"
  },
  {
    "text": "that's all you need to do um and then we run our dashboard",
    "start": "1288919",
    "end": "1295179"
  },
  {
    "text": "and then we have our nicely animated pie chart which should given that we're randomly emitting happy sad or happy and",
    "start": "1301340",
    "end": "1307039"
  },
  {
    "text": "sad should kind of tend towards an even amount on each of our pies uh pie slices okay and jar FX just takes care of all",
    "start": "1307039",
    "end": "1314000"
  },
  {
    "text": "the animation so I'm not a massive fan of java as a UI tool but I'm actually quite happy with javafx because you do",
    "start": "1314000",
    "end": "1320240"
  },
  {
    "text": "very little and it does a lot of the stuff for you without you having to worry about it",
    "start": "1320240",
    "end": "1325658"
  },
  {
    "text": "um cool so let's close this down where's my cursive on",
    "start": "1325880",
    "end": "1331299"
  },
  {
    "text": "um my mouse has stopped working",
    "start": "1333260",
    "end": "1339080"
  },
  {
    "text": "which would be fine except I need to close that right uh control F2",
    "start": "1339080",
    "end": "1345039"
  },
  {
    "text": "I'm not sure what I just there we go fine that's running that's running that's not running",
    "start": "1345440",
    "end": "1351320"
  },
  {
    "text": "let's kill that okay so what might be quite interesting",
    "start": "1351320",
    "end": "1357500"
  },
  {
    "text": "is not just to track overall mood but to track mood over time see if we're getting happier or sadder so are things",
    "start": "1357500",
    "end": "1362960"
  },
  {
    "text": "making things worse or getting better and we're going to track these with with a bar chart and here we don't need a new service",
    "start": "1362960",
    "end": "1370220"
  },
  {
    "text": "because we're just going to connect into the mood service but just do something slightly different with the data so we'll just connect a new listener to",
    "start": "1370220",
    "end": "1377659"
  },
  {
    "text": "our mood endpoint add listener this is going to be our happiness chart",
    "start": "1377659",
    "end": "1383240"
  },
  {
    "text": "data um we're going to have a look at this",
    "start": "1383240",
    "end": "1388760"
  },
  {
    "text": "now the happiness chart data I've already implemented on message because it's really boring and I didn't want to type that in front of you but here I can",
    "start": "1388760",
    "end": "1394640"
  },
  {
    "text": "show you some new date and time stuff is anyone be using new date and time few of you has has anyone does anyone",
    "start": "1394640",
    "end": "1400640"
  },
  {
    "text": "like old date and time in Java no didn't think so so new date and time",
    "start": "1400640",
    "end": "1407360"
  },
  {
    "text": "is a little bit easier to use so I can say I want now I'm just going to get the minute",
    "start": "1407360",
    "end": "1413780"
  },
  {
    "text": "assign that to a variable now I'm in it and what I'm going to do with this bar",
    "start": "1413780",
    "end": "1418940"
  },
  {
    "text": "chart is I'm just going to plot for the next 10 minutes and whether things are generally getting happier or not",
    "start": "1418940",
    "end": "1424280"
  },
  {
    "text": "um but because of this what I need to do is I need to set the bar and to zero for every one of those 10 minutes because of",
    "start": "1424280",
    "end": "1430159"
  },
  {
    "text": "the way it's been implemented and so in the olden days I yesterday um I would have to do for I I do a for",
    "start": "1430159",
    "end": "1438980"
  },
  {
    "text": "Loop a i is less than 10 I do initialize bar to zero for now minute plus I so now",
    "start": "1438980",
    "end": "1447500"
  },
  {
    "text": "minute is like 55 so for 55 56 57 up to 65.",
    "start": "1447500",
    "end": "1453380"
  },
  {
    "text": "um I had a mind blank then um then I'm just going to select the the bar to zero so that I can increment it",
    "start": "1453380",
    "end": "1459140"
  },
  {
    "text": "without getting that pointer now obviously we're going to use streams for everything even if it's completely",
    "start": "1459140",
    "end": "1464840"
  },
  {
    "text": "inappropriate and um so we're going to use an in stream for this instead I'm using in stream with a range we give it",
    "start": "1464840",
    "end": "1470299"
  },
  {
    "text": "the now minute and we say from now minutes and now I'm in it plus 10",
    "start": "1470299",
    "end": "1475700"
  },
  {
    "text": "we are going to do initialize bar to zero okay",
    "start": "1475700",
    "end": "1481880"
  },
  {
    "text": "it's one line of code less because of the curly braces um it's arguably a bit more readable",
    "start": "1481880",
    "end": "1487940"
  },
  {
    "text": "because you're giving it a range of from now until 10 minutes time do this thing so that's that could be more readable",
    "start": "1487940",
    "end": "1494659"
  },
  {
    "text": "it's also potentially could be slower performance because you're creating a whole new in stream and a series of",
    "start": "1494659",
    "end": "1500780"
  },
  {
    "text": "objects to iterate over something when really you've just got 10 things you want to iterate over so if you're really",
    "start": "1500780",
    "end": "1505940"
  },
  {
    "text": "worried about like Nano second performance you probably don't want to do this but if you do want to sort of get your mindset in the in get into the",
    "start": "1505940",
    "end": "1512900"
  },
  {
    "text": "mindset of doing things in the Java 8 kind of way this is probably perfectly fine so it's all a bit kind of swings around us but in stream is quite nice",
    "start": "1512900",
    "end": "1520280"
  },
  {
    "text": "for making slightly more readable ways of iterating over things um so let's remove the to-do's which is",
    "start": "1520280",
    "end": "1527360"
  },
  {
    "text": "a good thing and go back to our dashboard we'll wire up our data with our view",
    "start": "1527360",
    "end": "1535279"
  },
  {
    "text": "create our view so this is a bar chart",
    "start": "1535279",
    "end": "1541299"
  },
  {
    "text": "title is happiness over time",
    "start": "1543460",
    "end": "1549220"
  },
  {
    "text": "I've got a cheat to be able to do x-axis and y-axis so I don't have to type as much the x-axis is the minute",
    "start": "1552220",
    "end": "1559460"
  },
  {
    "text": "and the y-axis is the count",
    "start": "1559460",
    "end": "1566200"
  },
  {
    "text": "and then if we restart our dashboard",
    "start": "1568279",
    "end": "1573820"
  },
  {
    "text": "so I need to give it a height um so we can see our our bar chart on the left there as when we take over to",
    "start": "1586039",
    "end": "1593240"
  },
  {
    "text": "58 minutes past in approximately seven seconds we should see the next bar",
    "start": "1593240",
    "end": "1598760"
  },
  {
    "text": "increment so we should see each bar of increment as the minutes tick over this is the worst part of this presentation just waiting for that to",
    "start": "1598760",
    "end": "1604820"
  },
  {
    "text": "happen yay what and we can tweak the way things are shown this is not really that important for Java 8 but it's one of the",
    "start": "1604820",
    "end": "1610700"
  },
  {
    "text": "things I quite like about Java FX is it's fairly easy to um tweak the way things look so I can say what I don't",
    "start": "1610700",
    "end": "1617539"
  },
  {
    "text": "want is well I need to give it a height happens to be about 600 I need to say",
    "start": "1617539",
    "end": "1624860"
  },
  {
    "text": "um oh Legend I don't want the legend because it's just taking up space at the bottom that's that little green blob at",
    "start": "1624860",
    "end": "1630620"
  },
  {
    "text": "the bottom um x-axis I don't need that to be animated because it's not changing and",
    "start": "1630620",
    "end": "1636320"
  },
  {
    "text": "the y-axis I want the minus it visible to be false and then when I restart it that will",
    "start": "1636320",
    "end": "1643880"
  },
  {
    "text": "that should have slightly improved the the way that the bar chart looks",
    "start": "1643880",
    "end": "1649220"
  },
  {
    "text": "slightly doesn't make that much difference but it's just quite nice to be able to easily change things like that so although now my this resolution I've",
    "start": "1649220",
    "end": "1656179"
  },
  {
    "text": "never run it in this resolution before it's kind of mental um what a lovely tiny pie chart I have",
    "start": "1656179",
    "end": "1663020"
  },
  {
    "text": "there oh well it's quite cute I'm going to keep it it's like a thumbnail",
    "start": "1663020",
    "end": "1668779"
  },
  {
    "text": "um so let's stop that where are we now we are sister running",
    "start": "1668779",
    "end": "1675460"
  },
  {
    "text": "okay so that's all well and good and I've created a real-time reacting UI based of completely fake services so",
    "start": "1676100",
    "end": "1682880"
  },
  {
    "text": "it's not uh it's not really real time it's not connected to Twitter it's not doing anything interesting so we are",
    "start": "1682880",
    "end": "1688039"
  },
  {
    "text": "going to start doing um doing something with some real Twitter data now I'm not entirely masochistic so I'm not going to",
    "start": "1688039",
    "end": "1693620"
  },
  {
    "text": "connect to Twitter over conference Wi-Fi because I tried that once and it was a disaster so and what I did is I took",
    "start": "1693620",
    "end": "1699799"
  },
  {
    "text": "real Twitter data and I saved it into a file and then I've got a service which is going to read that file and admit",
    "start": "1699799",
    "end": "1704900"
  },
  {
    "text": "that real Twitter data this is also a useful thing in terms of if you're incrementally building your application you're going to want stub services that",
    "start": "1704900",
    "end": "1711500"
  },
  {
    "text": "do stuff like this whether it's because you're running them in your continuous delivery pipeline or in order to quickly test stuff or whatever",
    "start": "1711500",
    "end": "1718100"
  },
  {
    "text": "so my canned tweets service and let's have a look at this",
    "start": "1718100",
    "end": "1723559"
  },
  {
    "text": "we need to this is where we're going to use some of",
    "start": "1723559",
    "end": "1728840"
  },
  {
    "text": "the nice features from java 7 which no one really knew about because everyone went straight from six to eight because no one cared about seven",
    "start": "1728840",
    "end": "1734480"
  },
  {
    "text": "um poor old seven uh so we see some nice of the i o stuff from java 7",
    "start": "1734480",
    "end": "1740120"
  },
  {
    "text": "um combined with streams and lambdas and it worked quite nicely together so we can say files dot lines",
    "start": "1740120",
    "end": "1746840"
  },
  {
    "text": "uh give it a path and this will give me if I surround that with try with",
    "start": "1746840",
    "end": "1752480"
  },
  {
    "text": "resources one of the most underrated things in the in Java these days so it gives me a stream of strings which",
    "start": "1752480",
    "end": "1758960"
  },
  {
    "text": "represents every line in the file um and oh and I'm going to add my catch",
    "start": "1758960",
    "end": "1766580"
  },
  {
    "text": "I'm going to real error handling here",
    "start": "1766580",
    "end": "1773059"
  },
  {
    "text": "it's like real life um so what I want to do is I'm going to use",
    "start": "1773059",
    "end": "1779059"
  },
  {
    "text": "this stream of lines uh what I have is every now and again one of those lines in the file is the string okay I'm",
    "start": "1779059",
    "end": "1785779"
  },
  {
    "text": "assuming because the way I wrote the code to save it from Twitter into the file you occasionally get some sort of AC from Twitter saying everything's fine",
    "start": "1785779",
    "end": "1791899"
  },
  {
    "text": "which is great except it makes my service fall over if I include that so I'm going to filter out this I'm going",
    "start": "1791899",
    "end": "1797720"
  },
  {
    "text": "to take that if s oops it's okay equals",
    "start": "1797720",
    "end": "1804080"
  },
  {
    "text": "s not um then I'm going to filter out anything",
    "start": "1804080",
    "end": "1810260"
  },
  {
    "text": "that looks like that and I would like to for each I'm going to hand that to an",
    "start": "1810260",
    "end": "1816559"
  },
  {
    "text": "end point on message I'm going to give it the the line from the file",
    "start": "1816559",
    "end": "1822679"
  },
  {
    "text": "that can be converted into a method reference so for every one of those lines just call this method what I need",
    "start": "1822679",
    "end": "1829159"
  },
  {
    "text": "to do actually is um when I'm reading from the file it's actually surprisingly fast so for the",
    "start": "1829159",
    "end": "1835220"
  },
  {
    "text": "purposes of this demo I'd like to slow it down so I'm going to add a peak called",
    "start": "1835220",
    "end": "1840440"
  },
  {
    "text": "and that Peak is going to say add artificial delay now I quite like Peak",
    "start": "1840440",
    "end": "1846260"
  },
  {
    "text": "for this peak is useful for debugging so you can do something on every element in the Stream at the position where you",
    "start": "1846260",
    "end": "1852380"
  },
  {
    "text": "have Peak what I could have done is I could have said four each and had a two line Lambda in there one where I add the",
    "start": "1852380",
    "end": "1858980"
  },
  {
    "text": "artificial delay and the other where I call on message but by adding it to Peak instead of having a two line Lambda I've",
    "start": "1858980",
    "end": "1864620"
  },
  {
    "text": "done two things one I can shrink this down to a method reference so that's a bit more Compact and two when I want to",
    "start": "1864620",
    "end": "1870679"
  },
  {
    "text": "put this into production I can just get rid of that line and I know that I've removed my debug code so Peak is quite",
    "start": "1870679",
    "end": "1876679"
  },
  {
    "text": "useful for sort of indicating oh I'm doing this to sort of experiment you probably don't want to check it in",
    "start": "1876679",
    "end": "1882500"
  },
  {
    "text": "um so that's what I want to do there now we haven't seen any Java 9 stuff ages so let's take a look at Java 9.",
    "start": "1882500",
    "end": "1889039"
  },
  {
    "text": "um let's try and uh uh infinite streams has anyone run into",
    "start": "1889039",
    "end": "1895100"
  },
  {
    "text": "problems with infinite streams no then good for you",
    "start": "1895100",
    "end": "1901220"
  },
  {
    "text": "um the good thing about streams is they can be infinite the problem is that you don't necessarily know if it's going to",
    "start": "1901220",
    "end": "1906679"
  },
  {
    "text": "be infinite or not technically this isn't infinite because it it reads from a file and the file will end at some",
    "start": "1906679",
    "end": "1912440"
  },
  {
    "text": "point but this service is kind of meant to mimic connecting to Twitter and that is an infinite string so I'm going to be",
    "start": "1912440",
    "end": "1918860"
  },
  {
    "text": "parsing stuff that comes off the socket forever and ever and ever and ever um in Java 8 you can't stop that once",
    "start": "1918860",
    "end": "1927080"
  },
  {
    "text": "you're in an infinite stream you're that's it you're done um you're just kind of anything that you",
    "start": "1927080",
    "end": "1932179"
  },
  {
    "text": "put here so let's see what have we got we have um anything you put here",
    "start": "1932179",
    "end": "1937520"
  },
  {
    "text": "I want to say stop to countdown you're just never ever going to get to that line which I can prove you with a test",
    "start": "1937520",
    "end": "1944240"
  },
  {
    "text": "because I've written tests and everything and this is before I knew that famous people were going to look at my talk",
    "start": "1944240",
    "end": "1949460"
  },
  {
    "text": "um so if I run this what we should see is we'll see that um I call stop",
    "start": "1949460",
    "end": "1955580"
  },
  {
    "text": "but the service doesn't stop because I have no way of interrupting that stream it's just an infinite stream which keeps going forever and ever and ever",
    "start": "1955580",
    "end": "1961880"
  },
  {
    "text": "in Java 9 I can now stop infinite streams which is nice",
    "start": "1961880",
    "end": "1966919"
  },
  {
    "text": "quite sure I wasn't in Java 8. so I can use take while and I can say I'm going",
    "start": "1966919",
    "end": "1972500"
  },
  {
    "text": "to take this while we're running let's say um create Fields running",
    "start": "1972500",
    "end": "1978140"
  },
  {
    "text": "equals true let's make it volatile because we're going to have",
    "start": "1978140",
    "end": "1984679"
  },
  {
    "text": "multiple threads accessing that um so then what I'm going to do is I'm going to do",
    "start": "1984679",
    "end": "1991460"
  },
  {
    "text": "this operation as long as running is true and then when running is false I can I can stop so now when I rerun my",
    "start": "1991460",
    "end": "1998600"
  },
  {
    "text": "test which you see it did end in the end but that's when we got to the end of the file when I rerun this hopefully we",
    "start": "1998600",
    "end": "2005200"
  },
  {
    "text": "should see it will stop straight away oh no we didn't because what we need to do is we need to say running is false",
    "start": "2005200",
    "end": "2011860"
  },
  {
    "text": "otherwise it's still going to do it forever stop that",
    "start": "2011860",
    "end": "2017140"
  },
  {
    "text": "the only way to stop an infinite stream by the way is like effectively control C kill the process completely that's it",
    "start": "2017140",
    "end": "2023080"
  },
  {
    "text": "there we go so in Java 9 we have take while which allows you to",
    "start": "2023080",
    "end": "2029620"
  },
  {
    "text": "process and stream until some condition is true or um drop while which allows you to ignore everything up until some",
    "start": "2029620",
    "end": "2035440"
  },
  {
    "text": "certain point now obviously the idea is that really you'll be doing some sort of",
    "start": "2035440",
    "end": "2040539"
  },
  {
    "text": "um condition on the value in the Stream So take while you know you don't see this particular condition",
    "start": "2040539",
    "end": "2047340"
  },
  {
    "text": "um right so let's run our let's run our canned tweet service",
    "start": "2047500",
    "end": "2053280"
  },
  {
    "text": "now what we can do now we have a real tweet service which is well a real fake tweet",
    "start": "2055240",
    "end": "2060940"
  },
  {
    "text": "service which is emitting real tweets I can now create my real user service and",
    "start": "2060940",
    "end": "2066520"
  },
  {
    "text": "so I can get rid of my fake user service and extract the Twitter Handle from the real tweets",
    "start": "2066520",
    "end": "2072658"
  },
  {
    "text": "so my user service is going to be a new service",
    "start": "2073060",
    "end": "2079260"
  },
  {
    "text": "and use a service let's connect to our new Twitter service",
    "start": "2080800",
    "end": "2086320"
  },
  {
    "text": "we're going to start it on users uses",
    "start": "2086320",
    "end": "2092800"
  },
  {
    "text": "port no",
    "start": "2092800",
    "end": "2096720"
  },
  {
    "text": "and what we're going to do with this service is we give it a message Handler which is kind of the the business logic",
    "start": "2098200",
    "end": "2104500"
  },
  {
    "text": "of this service so service is just going to be just our plumbing It's all websockets under the covers and it's",
    "start": "2104500",
    "end": "2109780"
  },
  {
    "text": "going to sort of um set up an endpoint over here to connect to some servers another endpoint",
    "start": "2109780",
    "end": "2115180"
  },
  {
    "text": "over here to emit stuff and all of that plumbing is kind of in the service class but what it actually does the business",
    "start": "2115180",
    "end": "2121839"
  },
  {
    "text": "logic of that service I'm going to put in as a Lambda expression so what do I want to do here well I want to do tweet",
    "start": "2121839",
    "end": "2127240"
  },
  {
    "text": "parser dot get Twitter Handle from tweet",
    "start": "2127240",
    "end": "2132400"
  },
  {
    "text": "so then my whole business Logic for the service is just kind of injected into the service as a method reference and",
    "start": "2132400",
    "end": "2138040"
  },
  {
    "text": "while we're here let's show you some more Java 9. this is an interface so Java 8 allows",
    "start": "2138040",
    "end": "2143200"
  },
  {
    "text": "you to put static methods on interfaces and so I decided for this methods they're kind of helper util methods I",
    "start": "2143200",
    "end": "2149980"
  },
  {
    "text": "decided to put them on an interface so that you couldn't there would be no State on this class and",
    "start": "2149980",
    "end": "2155500"
  },
  {
    "text": "what's kind of interesting about this is in Java 9 you can have private methods on interfaces now that might sound",
    "start": "2155500",
    "end": "2161079"
  },
  {
    "text": "really ridiculous because the whole point about an interface is to have public methods that you're going to have to implement but once you start having",
    "start": "2161079",
    "end": "2167500"
  },
  {
    "text": "behavior in your methods for example default methods and static methods then you might need to reuse some stuff so",
    "start": "2167500",
    "end": "2174280"
  },
  {
    "text": "these two methods both need very similar bits of code so I've extracted that as a private method in my interface",
    "start": "2174280",
    "end": "2182520"
  },
  {
    "text": "so let's um let's stop our test data",
    "start": "2183520",
    "end": "2190780"
  },
  {
    "text": "let's restart our canned tweet service because the file is of finite length",
    "start": "2190780",
    "end": "2196839"
  },
  {
    "text": "let's restart our real user service and we start our dashboard",
    "start": "2196839",
    "end": "2205440"
  },
  {
    "text": "so now we have real Twitter handles going up onto our leaderboard as you can tell because they're really nasty names",
    "start": "2209140",
    "end": "2215140"
  },
  {
    "text": "and at some point you'll see all the Bots float to the top of that",
    "start": "2215140",
    "end": "2220799"
  },
  {
    "text": "uh so next up I still have time not optimistic enough to know that we're",
    "start": "2220900",
    "end": "2226420"
  },
  {
    "text": "going to have time for questions but uh we've still got time for the code right so now the kind of interesting bit that",
    "start": "2226420",
    "end": "2232660"
  },
  {
    "text": "everyone was probably thinking was going to be some sort of machine learning a major amazing analysis uh spoiler it's",
    "start": "2232660",
    "end": "2238960"
  },
  {
    "text": "not okay but what we're going to do is replace our fake mood service with a real mood service which is going to",
    "start": "2238960",
    "end": "2244359"
  },
  {
    "text": "analyze our tweets um and so let's stop our test mode service",
    "start": "2244359",
    "end": "2252220"
  },
  {
    "text": "let's go to our mood service our new one",
    "start": "2252220",
    "end": "2256260"
  },
  {
    "text": "we want a new service again we're going to give it a new service",
    "start": "2257440",
    "end": "2264339"
  },
  {
    "text": "connected to the Twitter service we are going to run at moods",
    "start": "2264339",
    "end": "2269500"
  },
  {
    "text": "and we're going to give it the port and we're going to give it a Handler this is going to be",
    "start": "2269500",
    "end": "2277300"
  },
  {
    "text": "um Moon analyzer analyze mood with a message",
    "start": "2277300",
    "end": "2282880"
  },
  {
    "text": "so once again in in this service the kind of business logic is represented by",
    "start": "2282880",
    "end": "2288160"
  },
  {
    "text": "a method reference which I'm just going to poke into the service so I'm reusing all this code without having to copy and paste code so one of the beauties of",
    "start": "2288160",
    "end": "2294579"
  },
  {
    "text": "being able to pass around Behavior so let's have a look at analyze mode",
    "start": "2294579",
    "end": "2299920"
  },
  {
    "text": "um here's another Java 9 feature it's the same as the list.ov but it's it's quite nice because you can use it for maps so",
    "start": "2299920",
    "end": "2306520"
  },
  {
    "text": "now with maps I can create myself a map on the Fly much more easily than I could before granted it's not the nice syntax",
    "start": "2306520",
    "end": "2313180"
  },
  {
    "text": "that we get with something like groovy but it is an improvement over the sort of static method block I had there before if my map was smaller let's say",
    "start": "2313180",
    "end": "2321880"
  },
  {
    "text": "it was uh this many entries I could actually just say I could simplify this",
    "start": "2321880",
    "end": "2326980"
  },
  {
    "text": "a lot I could say map of I'd say happy happy good good",
    "start": "2326980",
    "end": "2333339"
  },
  {
    "text": "Etc and I can just give it a finite number of key value pairs to initialize this",
    "start": "2333339",
    "end": "2340359"
  },
  {
    "text": "map with it's uh like I say it's it's not got some of the the nice syntax or something",
    "start": "2340359",
    "end": "2345880"
  },
  {
    "text": "like groovy but it is going to save you a lot of code in Java 9.",
    "start": "2345880",
    "end": "2352140"
  },
  {
    "text": "um right so what I want to do is I've taken my 140 character tweet message and",
    "start": "2353020",
    "end": "2359859"
  },
  {
    "text": "I've split it into an array of strings where each each thing each string is one",
    "start": "2359859",
    "end": "2365079"
  },
  {
    "text": "of the words in the message I'm going to do this with test driven development and I'm very sad that Robert Martin is not",
    "start": "2365079",
    "end": "2371260"
  },
  {
    "text": "here to watch this version of the code um but that's fine I already had the tests uh what I want",
    "start": "2371260",
    "end": "2377140"
  },
  {
    "text": "to do let's run this this is a Spock test a massive hand spot and what I'm going to do is I pass in",
    "start": "2377140",
    "end": "2383440"
  },
  {
    "text": "something like a message of I'm so happy today what I want to see is that I get",
    "start": "2383440",
    "end": "2388480"
  },
  {
    "text": "back a string of Happy the same with sad I'm going to get back a string of sad and then more complex use cases as I go",
    "start": "2388480",
    "end": "2394900"
  },
  {
    "text": "along so let's just try and fix each one of these um each one of these tests as",
    "start": "2394900",
    "end": "2400060"
  },
  {
    "text": "we go along and let's get them all on the screen so",
    "start": "2400060",
    "end": "2405220"
  },
  {
    "text": "at the moment I'm getting null that's because I'm returning null by default",
    "start": "2405220",
    "end": "2410640"
  },
  {
    "text": "let's say we we can either do stream.of",
    "start": "2410859",
    "end": "2417000"
  },
  {
    "text": "words in message or we can do arrays.stream",
    "start": "2417000",
    "end": "2423339"
  },
  {
    "text": "words and message both in the same way of getting a um an array into stream now what do I",
    "start": "2423339",
    "end": "2429940"
  },
  {
    "text": "want to do well clearly I want to map one of the words or all of the words if you like in the message into either",
    "start": "2429940",
    "end": "2437680"
  },
  {
    "text": "happy or sad so we'll do a map operation I'm going to take the string and I'm",
    "start": "2437680",
    "end": "2444099"
  },
  {
    "text": "going to do word to mood dot get with the string which can be simplified so I've now got",
    "start": "2444099",
    "end": "2451480"
  },
  {
    "text": "a mood for that word in the in the Stream and then let's say I'm going to find my",
    "start": "2451480",
    "end": "2458800"
  },
  {
    "text": "first one uh or else null if you didn't find anything return",
    "start": "2458800",
    "end": "2464260"
  },
  {
    "text": "null let's assign that to let's call this return value",
    "start": "2464260",
    "end": "2471359"
  },
  {
    "text": "and now obviously this is this is a mood now I don't want to return a mood I want to return a string so what I need to do",
    "start": "2473800",
    "end": "2479500"
  },
  {
    "text": "here then is an additional map operation where I'm going to map that enum to a string",
    "start": "2479500",
    "end": "2486040"
  },
  {
    "text": "and then change my type all right now if I rerun my test we should see the first two tests go green",
    "start": "2486040",
    "end": "2492400"
  },
  {
    "text": "because now I'm going to be returning happy or sad oh but look this is why test driven development is good look you",
    "start": "2492400",
    "end": "2498700"
  },
  {
    "text": "did something really stupid um because word to mood when you're going to get something from the map some of those words are not going to have an",
    "start": "2498700",
    "end": "2504460"
  },
  {
    "text": "entry in the map so sometimes I'm going to get null back so I need to filter out all my nulls so a mood is not equal to null",
    "start": "2504460",
    "end": "2513240"
  },
  {
    "text": "which again can be simplified to a method reference I quite like using objects non-null as a method reference",
    "start": "2513339",
    "end": "2519760"
  },
  {
    "text": "instead of using not equal to null or equal to null because then it's a bit clearer what you're filtering in or out",
    "start": "2519760",
    "end": "2525760"
  },
  {
    "text": "in the string that's my personal preference so if I rerun that",
    "start": "2525760",
    "end": "2531720"
  },
  {
    "text": "then my first two Tesco green so I can correctly identify if there's a happy word in there or a sad word now",
    "start": "2532900",
    "end": "2540460"
  },
  {
    "text": "if I have a message which doesn't have any any mood associated with it I want",
    "start": "2540460",
    "end": "2547240"
  },
  {
    "text": "to return an empty string not null so I can easily fix this",
    "start": "2547240",
    "end": "2552400"
  },
  {
    "text": "my or else I'm going to return empty string and then that should just that should pass that test",
    "start": "2552400",
    "end": "2559740"
  },
  {
    "text": "so you can see especially if you're doing tdd this can kind of help you build up quite a complex stream",
    "start": "2561820",
    "end": "2567160"
  },
  {
    "text": "operation in stages because each stage you're going to think about um what you need to do for the next stage my next thing is should correctly",
    "start": "2567160",
    "end": "2574060"
  },
  {
    "text": "identify happy messages that are not lowercase so here I'm using a happy word but it's got an uppercase and my mood",
    "start": "2574060",
    "end": "2581319"
  },
  {
    "text": "analyzer has all lowercase words so again what I need to do is I need an additional map operation",
    "start": "2581319",
    "end": "2588660"
  },
  {
    "text": "which is going to be a string to lower not top to lower case",
    "start": "2589300",
    "end": "2599040"
  },
  {
    "text": "so that's made that test pass now what we've got is what I said my the",
    "start": "2606940",
    "end": "2612819"
  },
  {
    "text": "business logic I decided on as the business owner was um uh uh that I would oh well I suppose I",
    "start": "2612819",
    "end": "2620920"
  },
  {
    "text": "can't finish that in it and that I want to be able to show things as a common separated set of values so I want to",
    "start": "2620920",
    "end": "2626800"
  },
  {
    "text": "show all the moods in this message not just the first mood in the message so if I am if I have a tweet which is sad and",
    "start": "2626800",
    "end": "2633880"
  },
  {
    "text": "happy then I want to emit this sad comma happy now what we're doing in our mood analyzer is we're just finding the first",
    "start": "2633880",
    "end": "2639819"
  },
  {
    "text": "one so we don't want to find the first one we want to return all of them so we'll collect all of the values that we",
    "start": "2639819",
    "end": "2645400"
  },
  {
    "text": "find we'll use collectors joining",
    "start": "2645400",
    "end": "2651099"
  },
  {
    "text": "and we'll give it a comma this is one of my favorite things about Java 8. you can create comma separated",
    "start": "2651099",
    "end": "2657940"
  },
  {
    "text": "sets of values without having to iterate over and then take the comma off the last one or decide am I the first one am",
    "start": "2657940",
    "end": "2663220"
  },
  {
    "text": "I the last one am I supposed to put comma on there all you do is use collectors.joining and it will give you",
    "start": "2663220",
    "end": "2668680"
  },
  {
    "text": "um a CSV set of values so what I was expecting to see here is I want to see",
    "start": "2668680",
    "end": "2674380"
  },
  {
    "text": "um sad comma happy so when I rerun this now I'm doing this joining",
    "start": "2674380",
    "end": "2680440"
  },
  {
    "text": "I should get CSV set of values",
    "start": "2680440",
    "end": "2684359"
  },
  {
    "text": "and so that works now and the last one is I decided that I only want to show I",
    "start": "2686440",
    "end": "2692619"
  },
  {
    "text": "don't care how sad it is or how happy it is so if I've got loads of sad values and one happy value I I don't care I",
    "start": "2692619",
    "end": "2699220"
  },
  {
    "text": "actually just want to see um that there is a mix of of emotions so",
    "start": "2699220",
    "end": "2704500"
  },
  {
    "text": "that means that what I need to do here is um I just want to get the distinct moods",
    "start": "2704500",
    "end": "2710319"
  },
  {
    "text": "and then when I run that all my tests should pass",
    "start": "2710319",
    "end": "2715980"
  },
  {
    "text": "Tada we're all green we like green green is good there is an additional step we could do we could actually say once",
    "start": "2716920",
    "end": "2723040"
  },
  {
    "text": "we've mapped all our words to lowercase we could also add distinct in there so we only process the distinct words in",
    "start": "2723040",
    "end": "2728319"
  },
  {
    "text": "the sentence um the unit test won't identify whether that gives you any value because it doesn't change the behavior but what",
    "start": "2728319",
    "end": "2735460"
  },
  {
    "text": "would be more interesting there is a performance test to see if that actually makes any difference whatsoever okay so we this is our mood service this",
    "start": "2735460",
    "end": "2742720"
  },
  {
    "text": "is how we analyze our mood we're going to get rid of I'm going to inline that and we go back and restart our mood",
    "start": "2742720",
    "end": "2749200"
  },
  {
    "text": "service in fact we probably need to restart everything at this stage because",
    "start": "2749200",
    "end": "2754900"
  },
  {
    "text": "did I mention these aren't really micro Services there's no resilience there's no tracing there's no uh monitoring",
    "start": "2754900",
    "end": "2761680"
  },
  {
    "text": "um there's just a lot of services so um when you want to see things like",
    "start": "2761680",
    "end": "2766720"
  },
  {
    "text": "resilience and monitoring and tracing and that's what Josh's talk is going to be really good for because he's going to build up a bunch of real microservices",
    "start": "2766720",
    "end": "2773140"
  },
  {
    "text": "that do microservices type stuff like you know failover and things like that and so I restart my cam tweet service I",
    "start": "2773140",
    "end": "2781000"
  },
  {
    "text": "restart my user service I'm going to start my mood service",
    "start": "2781000",
    "end": "2786180"
  },
  {
    "text": "and I'm going to start my dashboard which what's going to go wrong now this",
    "start": "2789280",
    "end": "2796060"
  },
  {
    "text": "has all gone far too well so far I told you oh no it's working yes it",
    "start": "2796060",
    "end": "2802480"
  },
  {
    "text": "works um so yes so I can tell it's working yes I can tell this is real",
    "start": "2802480",
    "end": "2808300"
  },
  {
    "text": "tweet data because um this is all tweet data that was recorded on a Saturday morning and people are largely happy it's quite",
    "start": "2808300",
    "end": "2814599"
  },
  {
    "text": "surprising um so yeah so we have our real-time Twitter dashboard reacting to real-time",
    "start": "2814599",
    "end": "2820359"
  },
  {
    "text": "Twitter data using Java 8 Etc so let's just finish off",
    "start": "2820359",
    "end": "2827200"
  },
  {
    "text": "uh what have we learned we have learned that live coding is fraught with danger",
    "start": "2827200",
    "end": "2832960"
  },
  {
    "text": "um the streams API is all about what to do not how to do it now you've been using Java 8 so you kind of know this",
    "start": "2832960",
    "end": "2838180"
  },
  {
    "text": "already it's not about um this is how you iterate over something and pull stuff out the streams API is give me the",
    "start": "2838180",
    "end": "2844119"
  },
  {
    "text": "distinct values or sort it by this and it's a much more um it's a different way of doing things the way the Java's been",
    "start": "2844119",
    "end": "2850359"
  },
  {
    "text": "doing stuff it's a much more kind of functional-ish style of doing things Lambda Expressions is about passing",
    "start": "2850359",
    "end": "2856180"
  },
  {
    "text": "around behavior before we could pass around objects now we can pass around behavior for example where we told the",
    "start": "2856180",
    "end": "2861220"
  },
  {
    "text": "UI thread run this bit of code later when you're ready and there's a bit more around functional",
    "start": "2861220",
    "end": "2866560"
  },
  {
    "text": "thinking of course there's some stuff around um when you're doing things like iterating over Collections and stuff it's a good idea if you don't change",
    "start": "2866560",
    "end": "2872560"
  },
  {
    "text": "those collections under the covers because you know that tends to lead to to bad things so it's a bit more functional thinking in Java 8 but Java 8",
    "start": "2872560",
    "end": "2879880"
  },
  {
    "text": "is definitely not a functional language and Java will never become a functional language we just steal the bits we like",
    "start": "2879880",
    "end": "2885220"
  },
  {
    "text": "from other languages and we saw a bit about designing for independent services so all of those",
    "start": "2885220",
    "end": "2890560"
  },
  {
    "text": "Services were running independently they were running at their own URI they're running in their own port and you could",
    "start": "2890560",
    "end": "2896319"
  },
  {
    "text": "see how that application can be split into things that could potentially be running on different services or different machines",
    "start": "2896319",
    "end": "2902200"
  },
  {
    "text": "um as I said Josh is more likely to talk about how to make it a proper microservices architecture where if one",
    "start": "2902200",
    "end": "2907599"
  },
  {
    "text": "thing goes away it'll be resilient and self-healing and stuff this is not that because this is pure Java with very few",
    "start": "2907599",
    "end": "2914920"
  },
  {
    "text": "dependencies so that's much more difficult to home grow all the resources for this talk are here",
    "start": "2914920",
    "end": "2921280"
  },
  {
    "text": "um the there's videos in the talk there's slides there's code there's loads of links to things like I'm using",
    "start": "2921280",
    "end": "2926380"
  },
  {
    "text": "websockets under the covers so all the resources I used to find out about websockets about the Java 8 functionality and microservices is all",
    "start": "2926380",
    "end": "2934119"
  },
  {
    "text": "available at that link thank you very much",
    "start": "2934119",
    "end": "2939180"
  },
  {
    "text": "thank you [Applause]",
    "start": "2939700",
    "end": "2943349"
  }
]