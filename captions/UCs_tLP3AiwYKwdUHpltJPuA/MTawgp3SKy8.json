[
  {
    "text": "okay so this uh talk is called closure script uh lists Revenge I've actually given a version of this talk a few times",
    "start": "4120",
    "end": "12080"
  },
  {
    "text": "um this one is actually going to be a little bit different um some things have happened in the closure script Community",
    "start": "12080",
    "end": "17160"
  },
  {
    "text": "which are very exciting that I'm happy to be able to share with you today uh in fact uh enough stuff has happened where",
    "start": "17160",
    "end": "23800"
  },
  {
    "text": "maybe I should have retitled this talk uh closure script Tony hores Revenge um I'm not sure if all of you are familiar",
    "start": "23800",
    "end": "29880"
  },
  {
    "text": "with Tony but by the end of the talk um you will be so uh I I I'm sure all of you know",
    "start": "29880",
    "end": "37239"
  },
  {
    "text": "about lisp to some degree but I'm going to give a brief introduction anyway so John McCarthy invented lisp in 1957 to",
    "start": "37239",
    "end": "44320"
  },
  {
    "text": "solve the problem of artificial intelligence and this was because he sort of surveyed um programming",
    "start": "44320",
    "end": "49559"
  },
  {
    "text": "languages and he decided um nothing that was available was good enough to tackle",
    "start": "49559",
    "end": "54719"
  },
  {
    "text": "this very interesting hard problem uh so he invented Lis and at the same time he invented interpreters high level meta",
    "start": "54719",
    "end": "60680"
  },
  {
    "text": "programming garbage collection dynamic programming languages functional programming programming with recursive",
    "start": "60680",
    "end": "65840"
  },
  {
    "text": "recursive functions and so on right uh which is pretty incredible for for him to do that all at once um so what's cool",
    "start": "65840",
    "end": "74040"
  },
  {
    "text": "about lisp and I the the reason I think lisp is still relevant today um is that lisp is one of these languages that I",
    "start": "74040",
    "end": "80079"
  },
  {
    "text": "think uh fits in a nice place in the um sort of ratio of Simplicity versus uh",
    "start": "80079",
    "end": "86079"
  },
  {
    "text": "expressive power uh I would actually argue that most mainstream languages is kind of it's a it's more of a trade-off",
    "start": "86079",
    "end": "93040"
  },
  {
    "text": "um there are of course other languages that have this nice U Simplicity power ratio uh but lisp is definitely I think",
    "start": "93040",
    "end": "99479"
  },
  {
    "text": "a classic example of this this is a a page from the list 1.5 users manual at",
    "start": "99479",
    "end": "105079"
  },
  {
    "text": "the bottom of the page is Allan K Alan K referred to this as um Maxwell's equations of software it uh it defines",
    "start": "105079",
    "end": "112640"
  },
  {
    "text": "eval and apply and that's pretty cool because that's all you need to bootstrap uh a list a fully functional list system",
    "start": "112640",
    "end": "121520"
  },
  {
    "text": "uh so fast forward 10 years to 1967 Stanley cubric makes a film called 2001 to Space Odyssey um and in this uh film",
    "start": "121680",
    "end": "129720"
  },
  {
    "text": "appears a very capable AI named H 9000 which I think everybody is familiar with",
    "start": "129720",
    "end": "136000"
  },
  {
    "text": "um and uh it seems to have amazing amazing Powers um but of course uh it",
    "start": "136000",
    "end": "141560"
  },
  {
    "text": "didn't play out quite that way right there was a lot of enthusiasm about Ai and and you know fast forward to 2013",
    "start": "141560",
    "end": "148280"
  },
  {
    "text": "today uh there's still nothing like how 9000 um uh but still even given that I",
    "start": "148280",
    "end": "154959"
  },
  {
    "text": "don't think anybody could have foreseen our the state of sort of software development today um I don't think in",
    "start": "154959",
    "end": "160480"
  },
  {
    "text": "1957 or 1967 people have really uh would have thought uh that something like the internet would have occurred um or that",
    "start": "160480",
    "end": "167519"
  },
  {
    "text": "a lot of us would be program programming um distributed applications on the web um so even though we're not tasked with",
    "start": "167519",
    "end": "174239"
  },
  {
    "text": "building this AI which sounds still impossibly hard we still have a very",
    "start": "174239",
    "end": "179280"
  },
  {
    "text": "difficult task right we have to design distributed uh systems uh that are robust even a JavaScript programmer is",
    "start": "179280",
    "end": "186360"
  },
  {
    "text": "actually fundamentally designing a distributed system um because you have the sort of asynchronous source of",
    "start": "186360",
    "end": "191560"
  },
  {
    "text": "events which is the user and you have to communicate in an asynchronous fashion with the server um and I would argue",
    "start": "191560",
    "end": "197319"
  },
  {
    "text": "that a lot of the tools that we're using today are actually not well suited to this task um most languages were not uh",
    "start": "197319",
    "end": "203920"
  },
  {
    "text": "designed with with the notion that nearly everything you would do that's interesting is going to be asynchronous",
    "start": "203920",
    "end": "209120"
  },
  {
    "text": "and of course if it's asynchronous uh like very likely it's going to be concurrent um so I'm going to I'm going",
    "start": "209120",
    "end": "216239"
  },
  {
    "text": "to loop back into these ideas later but let's I'm going to do a short introduction to closure uh probably some of you have heard of this closure is a",
    "start": "216239",
    "end": "222400"
  },
  {
    "text": "uh dynamic programming language it's a Lis it targets the jvm uh uh created by Rich hickey it's very cool um uh but the",
    "start": "222400",
    "end": "230280"
  },
  {
    "text": "thing about closure is that uh closure targets the jvm and there are many places now where the jvm uh cannot run",
    "start": "230280",
    "end": "236760"
  },
  {
    "text": "and will probably never run and so um closure came out 2007 closure script",
    "start": "236760",
    "end": "242000"
  },
  {
    "text": "came out in 2011 and Rich's idea here was that well we want to be able to Target phones and web browsers and all",
    "start": "242000",
    "end": "248000"
  },
  {
    "text": "these places where uh the jvm simply uh can't reach um now this is actually",
    "start": "248000",
    "end": "253760"
  },
  {
    "text": "quite a not this is not a new idea in 2011 when he when he came out with it I mean uh Google had been doing this for",
    "start": "253760",
    "end": "259600"
  },
  {
    "text": "years with Git right they were compiling Java into JavaScript uh you also now have typescript which is Microsoft sort",
    "start": "259600",
    "end": "265880"
  },
  {
    "text": "of superet of JavaScript which um adds types um you have Coffey script which is",
    "start": "265880",
    "end": "270960"
  },
  {
    "text": "really popular among front-end developers you have Dart which is actually a different language has a",
    "start": "270960",
    "end": "276320"
  },
  {
    "text": "different VM but in order for the for them to really make that work uh because no other browser is going to implement U",
    "start": "276320",
    "end": "282000"
  },
  {
    "text": "integrate that VM they have to be able to compile to JavaScript so I definitely see the future um of the web being many",
    "start": "282000",
    "end": "289280"
  },
  {
    "text": "languages that Target to JavaScript but if we're going to do this right if we're going to actually compile the JavaScript",
    "start": "289280",
    "end": "295080"
  },
  {
    "text": "there's obviously a lot of technical problems that have to be solved in order for for any V ER to actually want to",
    "start": "295080",
    "end": "300759"
  },
  {
    "text": "adopt it um so one thing that funny happened with dart was that when Dart came out the dart 2js compiler um which",
    "start": "300759",
    "end": "306720"
  },
  {
    "text": "they which generated JavaScript you know there was a lot of trolling about this because hello world was 15,000 lines of",
    "start": "306720",
    "end": "312479"
  },
  {
    "text": "JavaScript right so people were like who's going to use this um but of course they were they were critiquing something",
    "start": "312479",
    "end": "317720"
  },
  {
    "text": "that was very much under development um I tried recently to compile hello world",
    "start": "317720",
    "end": "322800"
  },
  {
    "text": "dart 2js now generates about 4050 lines um for hello world which is quite reasonable um so what about closure",
    "start": "322800",
    "end": "329720"
  },
  {
    "text": "script what you know how how well do we do on this particular uh which I actually think is not a very interesting Benchmark we generate two lines of code",
    "start": "329720",
    "end": "337560"
  },
  {
    "text": "um which is pretty cool uh this is this is fairly recent uh we use the Google closure compiler and the Google CL",
    "start": "337560",
    "end": "342919"
  },
  {
    "text": "closure compiler is sort of heavily used in the uh front end world and it does dead code elimination so uh our",
    "start": "342919",
    "end": "349960"
  },
  {
    "text": "dependencies are quite clean in the internal Library so we don't have to generate much code if you actually type hello world as a closure script program",
    "start": "349960",
    "end": "357440"
  },
  {
    "text": "um again that's not an interesting Benchmark though because is uh all the only thing that really matters is for non-trivial programs how much code do",
    "start": "357440",
    "end": "363639"
  },
  {
    "text": "you generate for non-trivial programs and because of because we produce output that's optimized for Google closure uh",
    "start": "363639",
    "end": "370000"
  },
  {
    "text": "we're actually very uh good and have been for a long time the other question is is it slow what's the cost so this is",
    "start": "370000",
    "end": "377360"
  },
  {
    "text": "something that Dart 2js um also has to deal with and they've actually done really really well uh if I'm going to",
    "start": "377360",
    "end": "382720"
  },
  {
    "text": "use a different language and this language gives me better semantics or richer semantics is there some implicit",
    "start": "382720",
    "end": "388720"
  },
  {
    "text": "cost right I mean what are we paying for to get this uh supposedly nicer language",
    "start": "388720",
    "end": "395120"
  },
  {
    "text": "this is not opengl this is this is this is closure script this is a port of Notch Notch who created Minecraft he",
    "start": "395120",
    "end": "400599"
  },
  {
    "text": "made a a JavaScript very small JavaScript demo um and it's purely a computational benchmark you need to",
    "start": "400599",
    "end": "407240"
  },
  {
    "text": "update about uh 300 points of data in about 16 sorry 300,000 points of data in",
    "start": "407240",
    "end": "413080"
  },
  {
    "text": "about 16 milliseconds in order to get uh a frame rate this good so closure script",
    "start": "413080",
    "end": "418479"
  },
  {
    "text": "like I took not just code the JavaScript which was efficient well written um and I said can our compiler generate code uh",
    "start": "418479",
    "end": "426360"
  },
  {
    "text": "that's fast enough as fast as the original JavaScript this is a slightly bit slightly bit slower but not enough",
    "start": "426360",
    "end": "431680"
  },
  {
    "text": "to to be interesting it's like maybe 10% okay and then another question is okay so that's cool Hello World small you",
    "start": "431680",
    "end": "438319"
  },
  {
    "text": "generate good JavaScript um what about compile times like what's the cost for having this you know having a another",
    "start": "438319",
    "end": "446599"
  },
  {
    "text": "step so here I have a uh closure script file open which I'm going to demo more later at the bottom you can see that we",
    "start": "447039",
    "end": "453800"
  },
  {
    "text": "have Auto builds so we do have to pay for this the cost of the jvm starting up to start the compilation process but",
    "start": "453800",
    "end": "459599"
  },
  {
    "text": "once it started we do incremental comp compilation and you can see it takes",
    "start": "459599",
    "end": "465159"
  },
  {
    "text": "less than a tenth of a second um and there's some nice things here uh for example what if I uh make this mistake I",
    "start": "465159",
    "end": "473560"
  },
  {
    "text": "made I made a typo this is not this would not be a compile time error in in in JavaScript right right so we we do we",
    "start": "473560",
    "end": "482000"
  },
  {
    "text": "we tried to a lot of errors that you would have in JavaScript um disappear so function arties are actually important",
    "start": "482000",
    "end": "487720"
  },
  {
    "text": "in in closure script unlike JavaScript so I'm passing three arguments to bar when it only takes two we get we get",
    "start": "487720",
    "end": "494319"
  },
  {
    "text": "arras about that as well so this is this is quite nice fast compile times and very um uh accurate errors as far as um",
    "start": "494319",
    "end": "501560"
  },
  {
    "text": "aity and um sorry I should turn that off but um and uh uh Miss named typos about",
    "start": "501560",
    "end": "511360"
  },
  {
    "text": "function names and variable names okay can I debug it so that's neat I showed you some debugging capability but when",
    "start": "511360",
    "end": "517760"
  },
  {
    "text": "you're in production um how are you actually to debug this stuff and this is a good source of complaints uh if you",
    "start": "517760",
    "end": "523039"
  },
  {
    "text": "looked at Coffee script coffee script for a very long time said we'll generate uh readable JavaScript we don't generate",
    "start": "523039",
    "end": "529200"
  },
  {
    "text": "readable JavaScript at all the JavaScript we we produce is very ugly right it's only the only thing we try to do is make it fast we're not interested",
    "start": "529200",
    "end": "535560"
  },
  {
    "text": "in it being readable um so we we really need to solve this problem of of of this uh uh going from the original source to",
    "start": "535560",
    "end": "543160"
  },
  {
    "text": "to the compiled source so as of three weeks ago we actually have Source maps and our source maps are probably better",
    "start": "543160",
    "end": "549839"
  },
  {
    "text": "than any other source Maps uh that are out there that's because we can actually U map two production code production",
    "start": "549839",
    "end": "557240"
  },
  {
    "text": "code is actually going to be minified it's going to be dead code eliminated right most uh compil to JavaScript",
    "start": "557240",
    "end": "563040"
  },
  {
    "text": "compilers all they do is sorry JavaScript whatever your language to some JavaScript all they do is they give",
    "start": "563040",
    "end": "568240"
  },
  {
    "text": "you the source map for the first first level of compilation so we actually take uh generate two Source maps and we merge",
    "start": "568240",
    "end": "574120"
  },
  {
    "text": "them and that's the one we actually use so this is I'm running some uh core async tests which I'll talk about",
    "start": "574120",
    "end": "582079"
  },
  {
    "text": "shortly so here we see some stuff uh you notice over here I curiously have cljs",
    "start": "582079",
    "end": "590440"
  },
  {
    "text": "as the file extension I can click it jumps me to all the places where these testing Expressions ran right and this",
    "start": "590440",
    "end": "598640"
  },
  {
    "text": "is this is this is working even though we went through advanced compilation right this is Advanced",
    "start": "598640",
    "end": "604000"
  },
  {
    "text": "compiled code and we're getting accurate Source locations okay so so that sounds pretty good right every I this I believe",
    "start": "604000",
    "end": "610320"
  },
  {
    "text": "every compiled to JavaScript language should deliver what we're attempting to deliver and then you should say well okay this is cool this seems compelling",
    "start": "610320",
    "end": "616560"
  },
  {
    "text": "but who's using it so like I said this is the closure script talk I wish I could have given",
    "start": "616560",
    "end": "621600"
  },
  {
    "text": "two years ago so the story is pretty good we have about 2,300 GitHub Watchers we have 58 contributors which is really",
    "start": "621600",
    "end": "627680"
  },
  {
    "text": "good for an open source project that's 2 years old um closure script is the second most popular build tool so lingan is um the",
    "start": "627680",
    "end": "635600"
  },
  {
    "text": "real build tool but sorry it's the most popular plugin the second most popular plugin which is really great which means",
    "start": "635600",
    "end": "640720"
  },
  {
    "text": "that it's been very uh embraced by the um closure community and we are seeing",
    "start": "640720",
    "end": "646279"
  },
  {
    "text": "more and more interest because of things like coryy which we'll talk about in a bit um there's also a very slim O'Reilly",
    "start": "646279",
    "end": "652079"
  },
  {
    "text": "book if you know closure uh doing closure script is it doesn't there's not much to know the language is more or",
    "start": "652079",
    "end": "657440"
  },
  {
    "text": "less the same it's just how do you build um how do you compile",
    "start": "657440",
    "end": "662639"
  },
  {
    "text": "programs okay so that's the pitch but like what does it actually look like what does it feel to use this system so",
    "start": "662639",
    "end": "670200"
  },
  {
    "text": "let's look here um at this so I've I can",
    "start": "670200",
    "end": "675880"
  },
  {
    "text": "write some s Expressions here oops Yeah okay good and what's interesting is that",
    "start": "675880",
    "end": "683440"
  },
  {
    "text": "this is a repple that you know just like the reppel you've seen before um the",
    "start": "683440",
    "end": "688560"
  },
  {
    "text": "difference is that actually running this Ripple against Chrome so what's happening is I'm actually compiling the",
    "start": "688560",
    "end": "693959"
  },
  {
    "text": "JavaScript compiling CL script to JavaScript sending it to Chrome to evaluate and then printing printing the",
    "start": "693959",
    "end": "699240"
  },
  {
    "text": "result uh so if I go like this there's an there's a div a red box on that page",
    "start": "699240",
    "end": "705680"
  },
  {
    "text": "and then we're going to see the div here so I can actually from my source file interact with the browser which is uh",
    "start": "705680",
    "end": "713040"
  },
  {
    "text": "pretty useful okay so semantics so what are we giving you over something like",
    "start": "713040",
    "end": "718720"
  },
  {
    "text": "JavaScript we actually uh we don't try to preserve JavaScript semantics unless we absolutely have to the one place",
    "start": "718720",
    "end": "723880"
  },
  {
    "text": "where we do is numerics and if somebody want has questions about that I can answer that later but pretty much all",
    "start": "723880",
    "end": "729079"
  },
  {
    "text": "the semantics we try to preserve are closure semantics um for example zero is",
    "start": "729079",
    "end": "734160"
  },
  {
    "text": "not falsy the blank string is not falsy so you don't need to write any checks around this there are only two false",
    "start": "734160",
    "end": "739560"
  },
  {
    "text": "values um in closure and that's nil and false and that's true for a closure",
    "start": "739560",
    "end": "745000"
  },
  {
    "text": "script um we have proper lexical scoping right so if you're functional if you like functional programming we give you",
    "start": "745000",
    "end": "751240"
  },
  {
    "text": "lexical scoping you don't have to deal with um the crazy scoping rules that exist in JavaScript um another thing",
    "start": "751240",
    "end": "758000"
  },
  {
    "text": "that we do is that we don't have mut mutable um we don't have mutable locals so a very common error in JavaScript is",
    "start": "758000",
    "end": "763680"
  },
  {
    "text": "you set up a for Loop you have a function and you're going to execute those functions later and you close over",
    "start": "763680",
    "end": "768839"
  },
  {
    "text": "some some values in the loop and then you you you execute them later and your program is incorrect and that's because",
    "start": "768839",
    "end": "775120"
  },
  {
    "text": "those locals were mutable and they were getting mutated with each iteration and so those those closed over uh variables",
    "start": "775120",
    "end": "781440"
  },
  {
    "text": "are not the ones you expect uh this is not true for a closure script because we don't have mutable locals so here I can",
    "start": "781440",
    "end": "787720"
  },
  {
    "text": "make a basically with um uh a mutable sort of the equivalent of a mutable",
    "start": "787720",
    "end": "793199"
  },
  {
    "text": "array here I have a helper to invoke each function I have a loop 10 times I",
    "start": "793199",
    "end": "798600"
  },
  {
    "text": "add a function and you notice I'm just recording um the value of I in",
    "start": "798600",
    "end": "804120"
  },
  {
    "text": "JavaScript this would produce 10 nines",
    "start": "804120",
    "end": "809399"
  },
  {
    "text": "and uh we don't have that problem so this this whole thinking about loops and closures we just do the right",
    "start": "809399",
    "end": "815800"
  },
  {
    "text": "thing okay so the other thing that's dramatically different from JavaScript",
    "start": "815800",
    "end": "820959"
  },
  {
    "text": "is that uh closure and thus closure script emphasizes programming with values so in JavaScript you have uh",
    "start": "820959",
    "end": "828000"
  },
  {
    "text": "immutable values you have strings and you have numbers and we are all very happy that these things don't change",
    "start": "828000",
    "end": "834759"
  },
  {
    "text": "right yet the rest of the language is extremely mutable um and that's not true",
    "start": "834759",
    "end": "839800"
  },
  {
    "text": "for closure script in closure script we provide a rich uh group of collections",
    "start": "839800",
    "end": "845199"
  },
  {
    "text": "that you can use as values and that's because you can't mutate them um so here's a hashmap I'm going to print out",
    "start": "845199",
    "end": "853040"
  },
  {
    "text": "the hashmap with a new key value pair right there and I'm going to print out the value of of",
    "start": "853040",
    "end": "859600"
  },
  {
    "text": "X and there you go right I can modify the thing I don't I didn't have to copy it I didn't have to clone it I any of",
    "start": "859600",
    "end": "865839"
  },
  {
    "text": "that stuff right um this means that you don't you can't all these all these problems you have around mutability you can now reason",
    "start": "865839",
    "end": "872680"
  },
  {
    "text": "about your collections in exactly the same way you reason about strings and numbers um and you might think this how",
    "start": "872680",
    "end": "879880"
  },
  {
    "text": "you guys doing that well remember I said closure script is not slow um so we we actually are able to write very",
    "start": "879880",
    "end": "885639"
  },
  {
    "text": "low-level closure script and we Implement persistent data structures um uh which were really truly actually",
    "start": "885639",
    "end": "891360"
  },
  {
    "text": "innovated by Phil Bagwell and then Richi he modified them for closure but um our immutable collections are very efficient",
    "start": "891360",
    "end": "899800"
  },
  {
    "text": "so you don't have to worry in general about the cost of of um working with them the other thing that's nice is that",
    "start": "899800",
    "end": "906279"
  },
  {
    "text": "once you have a mutable Collections and you can treat them as values certain things are like really nice like equality right so normally when",
    "start": "906279",
    "end": "913320"
  },
  {
    "text": "JavaScript programmers use equality you're talking about um you often have to like am I talking about value or am I",
    "start": "913320",
    "end": "919560"
  },
  {
    "text": "talking about identity you're always thinking which what's going on here uh in in closure script um it's always",
    "start": "919560",
    "end": "927519"
  },
  {
    "text": "about values so I have two Maps uh the keys were defined different order clearly I had to allocate two different",
    "start": "927519",
    "end": "933519"
  },
  {
    "text": "objects but equality just works uh and that's having done a lot of web",
    "start": "933519",
    "end": "939759"
  },
  {
    "text": "programming that's or client side programming that's quite nice um we also ship with many collections JavaScript",
    "start": "939759",
    "end": "945560"
  },
  {
    "text": "only comes with objects and arrays so we actually have uh immutable array like things called vectors and here I'm",
    "start": "945560",
    "end": "952240"
  },
  {
    "text": "adding four to that um Vector we have real sets so this is a set I'm trying to",
    "start": "952240",
    "end": "958680"
  },
  {
    "text": "add something that's already in the set doesn't work um here's another set and I'm going to add this and it gets in",
    "start": "958680",
    "end": "963920"
  },
  {
    "text": "there because it's not in there already uh if you're coming from Objective C or Java or small talk or any of these other",
    "start": "963920",
    "end": "970519"
  },
  {
    "text": "languages that have Rich collections you're used to this notion that Keys may be complex complex keys are allowed and",
    "start": "970519",
    "end": "977240"
  },
  {
    "text": "so this is also true for closure script so this is a hashmap where the key is a vector with the values one two in it and",
    "start": "977240",
    "end": "983839"
  },
  {
    "text": "I can say get out of that hashmap uh the value for the key one two",
    "start": "983839",
    "end": "990120"
  },
  {
    "text": "and that works right okay the other thing we we do so a",
    "start": "990120",
    "end": "997000"
  },
  {
    "text": "lot of a lot of closure script is just about simplification like removing any source of accidental complexity where we",
    "start": "997000",
    "end": "1002680"
  },
  {
    "text": "can um so the other thing we have is uniform iteration so if you have a uh in JavaScript if you want to iterate over",
    "start": "1002680",
    "end": "1009000"
  },
  {
    "text": "something you have to handle objects and arrays differently that's not true in closure script we have something called first we have something called rest I",
    "start": "1009000",
    "end": "1016199"
  },
  {
    "text": "can get the first thing out of a hashmap out of a Vector out of a list out of a set so you can uniformly iterate all",
    "start": "1016199",
    "end": "1023399"
  },
  {
    "text": "data all the collections and that's also pretty useful um I could I can go on but",
    "start": "1023399",
    "end": "1029558"
  },
  {
    "text": "I want to talk about other things uh closure is a not a small language it has lots of features lots of cool stuff uh",
    "start": "1029559",
    "end": "1035000"
  },
  {
    "text": "one thing that's really great is lazy sequences so if you followed like Java streams that are coming out or you're",
    "start": "1035000",
    "end": "1041038"
  },
  {
    "text": "familiar with um uh I don't know lazy sequence libraries or stream libraries",
    "start": "1041039",
    "end": "1046360"
  },
  {
    "text": "it does pretty much the same thing here I can make an INF list of the word go to an infinite list of the strings arus I",
    "start": "1046360",
    "end": "1053799"
  },
  {
    "text": "can inter these two infinite streams and then I can ask to get only uh aund of uh",
    "start": "1053799",
    "end": "1059679"
  },
  {
    "text": "of those values and so this is pretty cool the standard library is really constructed around um lots of lots of",
    "start": "1059679",
    "end": "1066480"
  },
  {
    "text": "useful uh sequence functions so if you like underscore this is like underscore to the nth level um it has a lot more",
    "start": "1066480",
    "end": "1074360"
  },
  {
    "text": "functionality okay so one place that's different since again closure scpt is not JavaScript so there are lots of",
    "start": "1074360",
    "end": "1080640"
  },
  {
    "text": "things that are cool um that JavaScript can't really",
    "start": "1080640",
    "end": "1085880"
  },
  {
    "text": "do or it can but it's a little bit more work and it's a little bit more expressive in closure script so",
    "start": "1086039",
    "end": "1091760"
  },
  {
    "text": "functions are not primitive they're actually not a primitive construct in the in the closure programming language and they're also not primitive um in",
    "start": "1091760",
    "end": "1098240"
  },
  {
    "text": "closure script so not only do we ship a very nice standard Library we also ship",
    "start": "1098240",
    "end": "1104039"
  },
  {
    "text": "all of our abstractions right so we actually provide something that's very similar to interfaces Java interfaces um",
    "start": "1104039",
    "end": "1111240"
  },
  {
    "text": "we provide these protocols you can Implement your own types your own data structures you can even extend other",
    "start": "1111240",
    "end": "1117440"
  },
  {
    "text": "people's types and data structures to these protocols and they magically automatically work with the standard",
    "start": "1117440",
    "end": "1122960"
  },
  {
    "text": "Library so for example I decide I want regular Expressions to be functions like",
    "start": "1122960",
    "end": "1128039"
  },
  {
    "text": "I want regular expression literals to act like functions because why not I might have a list of strings I want to filter on a regular expression right and",
    "start": "1128039",
    "end": "1135400"
  },
  {
    "text": "I want to write that um in a in a functional way so here I have a extended regular Expressions to um implement the",
    "start": "1135400",
    "end": "1142080"
  },
  {
    "text": "function protocol and here I have a list of strings and a and a a regular",
    "start": "1142080",
    "end": "1147280"
  },
  {
    "text": "expression literal and I can filter I can filter it if I switch this to",
    "start": "1147280",
    "end": "1152840"
  },
  {
    "text": "map right so that's it's pretty powerful and when you look at um experienced",
    "start": "1152840",
    "end": "1158600"
  },
  {
    "text": "closure script developers they often do this to make working with the Dom much more",
    "start": "1158600",
    "end": "1164880"
  },
  {
    "text": "pleasant okay so just a little bit more so interrupt inter op is quite nice uh",
    "start": "1164880",
    "end": "1170280"
  },
  {
    "text": "closure is a hosted language on the jvm and in very much a similar fashion closure script is hosted uh in JS we we",
    "start": "1170280",
    "end": "1176240"
  },
  {
    "text": "want to make interacting with a host um not too difficult so this is the uh get",
    "start": "1176240",
    "end": "1181679"
  },
  {
    "text": "element by ID function I used earlier so this is what it looks like to call JavaScript methods um here I have a",
    "start": "1181679",
    "end": "1187520"
  },
  {
    "text": "capitalize uh function where it takes a string get the first element up uppercase it and then call substring",
    "start": "1187520",
    "end": "1194280"
  },
  {
    "text": "pretty standard stuff right",
    "start": "1194280",
    "end": "1199360"
  },
  {
    "text": "so it works um so we actually have a lot of features that are on that are sort of",
    "start": "1200080",
    "end": "1205799"
  },
  {
    "text": "on the way with ecmascript 6 so for example I want to take a keyword and I want to convert it to a CSS property so",
    "start": "1205799",
    "end": "1212280"
  },
  {
    "text": "just to show you what this looks like if I go background color this is a closure script keyword I'm going to get a camel",
    "start": "1212280",
    "end": "1219559"
  },
  {
    "text": "case string so I can use it for doing CSS property looks up lookups so just to break this down here I have I convert",
    "start": "1219559",
    "end": "1226679"
  },
  {
    "text": "the keyword to a string I drop the in I split on dash and then we have D structuring assignment so this is",
    "start": "1226679",
    "end": "1233039"
  },
  {
    "text": "something that's slated for ecmascript 6 so I can I can ask for the first uh uh",
    "start": "1233039",
    "end": "1238600"
  },
  {
    "text": "component of that split um of the array and I can package up the remainder of the array in another local variable and",
    "start": "1238600",
    "end": "1245760"
  },
  {
    "text": "then I can apply string I leave the first element alone and I capitalize all the other components and this gives me",
    "start": "1245760",
    "end": "1252280"
  },
  {
    "text": "camel casing but I didn't have to write very much code to do this right and it's very much in a functional style which is",
    "start": "1252280",
    "end": "1257919"
  },
  {
    "text": "uh pretty cool cool okay so I want what I want to show here is that for example",
    "start": "1257919",
    "end": "1263720"
  },
  {
    "text": "when I'm working with a Dom you I have all this Dom stuff and I want to be able to bring it into um closure script",
    "start": "1263720",
    "end": "1269760"
  },
  {
    "text": "abstractions so it's more friendly for me to work with the Dom so for example I",
    "start": "1269760",
    "end": "1274880"
  },
  {
    "text": "want to get the Styles off an element and I want to get something that I can treat as if it was a hashmap so all the",
    "start": "1274880",
    "end": "1280559"
  },
  {
    "text": "hashmap functions should work on this thing so here I I get the computed style for an element and then I can make it",
    "start": "1280559",
    "end": "1287880"
  },
  {
    "text": "work like a function as well as implementing the interface for doing keyword",
    "start": "1287880",
    "end": "1293000"
  },
  {
    "text": "lookup so I can go get the styles for the box and then get the background",
    "start": "1293000",
    "end": "1298159"
  },
  {
    "text": "color right I haven't shown you very much code like all the code that I've shown you is all that I did to make this",
    "start": "1298159",
    "end": "1304080"
  },
  {
    "text": "work I can also use um the function oriented style where I have the keyword first and I get it I can get the width",
    "start": "1304080",
    "end": "1312559"
  },
  {
    "text": "uh there are lots of cool combinators in the standard Library I can say I want to juxtapose the width and the height so I",
    "start": "1312559",
    "end": "1318640"
  },
  {
    "text": "get back a vector of the width and the height um because the Styles is a",
    "start": "1318640",
    "end": "1325880"
  },
  {
    "text": "function and I made it implement the function interface I can have a list of CSS properties I want to",
    "start": "1325880",
    "end": "1330960"
  },
  {
    "text": "extract and the Styles works just as a function so I can keep going but",
    "start": "1330960",
    "end": "1336760"
  },
  {
    "text": "hopefully you see that what closure script is not just a language it ships enough abstractions so you can uh make",
    "start": "1336760",
    "end": "1342760"
  },
  {
    "text": "uh working with external libraries external um apis uh you can make it that",
    "start": "1342760",
    "end": "1348120"
  },
  {
    "text": "experience a lot nicer so this is some new stuff this is a photo of a fairly young Tony",
    "start": "1348120",
    "end": "1354880"
  },
  {
    "text": " and he invented something called communicating sequential processes uh so",
    "start": "1354880",
    "end": "1361240"
  },
  {
    "text": "moving forward I think what you're going to see I think you're going to be hearing the words reactive a lot um I think people are going to get more and",
    "start": "1361240",
    "end": "1366640"
  },
  {
    "text": "more interested in earling because I think uh we're starting to understand that um asynchronous programming is too",
    "start": "1366640",
    "end": "1372240"
  },
  {
    "text": "hard and the tools that we currently have really aren't that great uh we have to we have to write too much boilerplate",
    "start": "1372240",
    "end": "1377679"
  },
  {
    "text": "to do what we should consider to be basic stuff um so Tony came up with this abstraction called CSP it's",
    "start": "1377679",
    "end": "1384279"
  },
  {
    "text": "very much a sort of message oriented abstraction um to deal with the complexities of concurrency uh it's",
    "start": "1384279",
    "end": "1391200"
  },
  {
    "text": "gotten really popular recently because of a funny language called go which was created by Rob Pike um and",
    "start": "1391200",
    "end": "1399679"
  },
  {
    "text": "then other other other people that go it's quite you know whatever you might think about go the CSP aspect of go is",
    "start": "1399679",
    "end": "1406400"
  },
  {
    "text": "very cool Rob Pike has been obsessed with uh CSP since the 80s he's been",
    "start": "1406400",
    "end": "1412240"
  },
  {
    "text": "every language that he's been doing actually honestly looks like a variant of go and he talked about something very",
    "start": "1412240",
    "end": "1417360"
  },
  {
    "text": "interesting in the uh in the 80s which was are there any interesting possibilities between um CSP and UI",
    "start": "1417360",
    "end": "1423919"
  },
  {
    "text": "programming and I think that there are actually some really incredible um opportunities there and we'll we'll show",
    "start": "1423919",
    "end": "1430440"
  },
  {
    "text": "some of that so Richi decided that you know he he really wanted to see these ideas that are were that go is embracing",
    "start": "1430440",
    "end": "1437360"
  },
  {
    "text": "um uh put in in in closure and in closure script and so they released the library card core async which implements",
    "start": "1437360",
    "end": "1444200"
  },
  {
    "text": "CSP and we have CSP now inclosure script and it's and it's pretty cool so in CSP",
    "start": "1444200",
    "end": "1450480"
  },
  {
    "text": "basically you have processes independent processes um and they if they're going to communicate they communicate via",
    "start": "1450480",
    "end": "1456000"
  },
  {
    "text": "channels and they put a message onto a channel and then the other process can read that thing uh the the main the main",
    "start": "1456000",
    "end": "1462679"
  },
  {
    "text": "big idea with CSP is that it's a it's a synchronous um communication style uh if",
    "start": "1462679",
    "end": "1468200"
  },
  {
    "text": "I write to a channel and there's nobody at the other end then my process will block right so I so if I write somebody",
    "start": "1468200",
    "end": "1475720"
  },
  {
    "text": "has to read uh so that means that the that a write is a and a read is sort of a rendevu the channel is a rendevu",
    "start": "1475720",
    "end": "1481919"
  },
  {
    "text": "between two processes and this is actually extremely important and it's what allows you to reason about your",
    "start": "1481919",
    "end": "1487799"
  },
  {
    "text": "program if you're writing in a CSP style so here I have a channel I I'm just",
    "start": "1487799",
    "end": "1494240"
  },
  {
    "text": "making a top level variable I've got a helper function for rendering some HTML not that interesting um here's where it",
    "start": "1494240",
    "end": "1500360"
  },
  {
    "text": "gets interesting I have what looks like an infinite Loop right so when you write go you're saying this is an asynchronous",
    "start": "1500360",
    "end": "1507600"
  },
  {
    "text": "operation it's almost like starting a thread even though we know that JavaScript doesn't have threads right everybody knows this no threads in",
    "start": "1507600",
    "end": "1513799"
  },
  {
    "text": "JavaScript single threaded here I can have the illusion that I can start an independent process so I say go and I",
    "start": "1513799",
    "end": "1520679"
  },
  {
    "text": "say forever uh this is a timeout Channel and when the timeout Channel closes this",
    "start": "1520679",
    "end": "1526000"
  },
  {
    "text": "can can progress and we're going to write one the value one onto this channel that we declared up here and",
    "start": "1526000",
    "end": "1533880"
  },
  {
    "text": "this will write to that channel every 250 milliseconds we have a second process which will write to that channel",
    "start": "1533880",
    "end": "1540159"
  },
  {
    "text": "every second and a third process that writes to it um every one and a half",
    "start": "1540159",
    "end": "1546200"
  },
  {
    "text": "seconds so here you see that that that's what's going on so even though we have no threads I've shown you no callbacks",
    "start": "1546200",
    "end": "1552720"
  },
  {
    "text": "it appears that that this is actually we have three independent processes happening in the browser so we see one",
    "start": "1552720",
    "end": "1558799"
  },
  {
    "text": "more we see uh two less and we see three the least because it's running the slowest um and what's beautiful about",
    "start": "1558799",
    "end": "1567039"
  },
  {
    "text": "this is that down here when I collect when I collect all that data all it's it's simply this line right here right",
    "start": "1567039",
    "end": "1573000"
  },
  {
    "text": "I'm saying read a value off that channel so I can have many writers to that channel and I can collect all their",
    "start": "1573000",
    "end": "1578520"
  },
  {
    "text": "results in this process which is doing the rendering um so I don't want to I I",
    "start": "1578520",
    "end": "1586799"
  },
  {
    "text": "could talk about this more but I want to show show that this is actually useful for uh less less trivial examples even",
    "start": "1586799",
    "end": "1594039"
  },
  {
    "text": "though that one's pretty cool um so I have I have a blog post or a series of blog posts where I talk a lot about this",
    "start": "1594039",
    "end": "1600039"
  },
  {
    "text": "um and I spent about a week trying to see can you actually use this to build",
    "start": "1600039",
    "end": "1605520"
  },
  {
    "text": "uh uis and if you do use it to build uis is it actually simpler so one thing that's actually surprisingly hard to",
    "start": "1605520",
    "end": "1611559"
  },
  {
    "text": "write correctly is an autocomplete combo box it's actually a huge pain to write in jQuery it's about 500 600 lines of",
    "start": "1611559",
    "end": "1619399"
  },
  {
    "text": "mutable codee um and lots of State lots of you know is this flag set is that",
    "start": "1619399",
    "end": "1624600"
  },
  {
    "text": "flag set um dealing with ie issues is strewn across the whole thing it's",
    "start": "1624600",
    "end": "1630039"
  },
  {
    "text": "horrible um so this is this basically implements the same thing the same general level of functionality it's",
    "start": "1630039",
    "end": "1635720"
  },
  {
    "text": "about 200 lines of code um this the the previous page that you saw so core async actually works with I up to I6 right so",
    "start": "1635720",
    "end": "1643159"
  },
  {
    "text": "the previous page runs flawlessly in I6 this page that I'm showing you runs in every browser uh including IE8 the only",
    "start": "1643159",
    "end": "1649880"
  },
  {
    "text": "reason it doesn't work before that because I was too lazy to fix the CSS it's not a not a JavaScript issue so if",
    "start": "1649880",
    "end": "1656240"
  },
  {
    "text": "I go so all this stuff works like Mouse if",
    "start": "1656240",
    "end": "1661360"
  },
  {
    "text": "I tab right right all this this stuff is like",
    "start": "1661360",
    "end": "1668480"
  },
  {
    "text": "really even though it looks intuitive it looks very simple if you've ever done any serious UI programming what I've just shown very quickly it's actually",
    "start": "1668480",
    "end": "1675799"
  },
  {
    "text": "really uh hard to get right um and so this was done purely in a CSP",
    "start": "1675799",
    "end": "1682120"
  },
  {
    "text": "style and it created a very compact program and a program that's much easier to reason about okay so I so I'm almost",
    "start": "1682120",
    "end": "1690000"
  },
  {
    "text": "done but I do have one more thing so uh it's always funny because I actually enjoy PL programming with dynamic",
    "start": "1690000",
    "end": "1695559"
  },
  {
    "text": "programming languages I think they're quite cool I think they're very flexible especially on the front end though I do",
    "start": "1695559",
    "end": "1700600"
  },
  {
    "text": "understand that sometimes um having a little bit more uh more guarantees is nice and definitely on the back end",
    "start": "1700600",
    "end": "1705880"
  },
  {
    "text": "having static guarantees can be really nice nice uh what's pretty cool is that",
    "start": "1705880",
    "end": "1711559"
  },
  {
    "text": "uh that's about to be possible uh for closure and closure scripts so there's a very smart young gentleman Ambrose boner",
    "start": "1711559",
    "end": "1718399"
  },
  {
    "text": "Sant he started a uh sort of like a Indiegogo Kickstarter like thing uh over",
    "start": "1718399",
    "end": "1723760"
  },
  {
    "text": "the weekend this last weekend and he raised enough money to start to do his project in two days he's actually been",
    "start": "1723760",
    "end": "1730120"
  },
  {
    "text": "working on this for two years I've been his Google summer of code a mentor on typed closure for two for two summers um",
    "start": "1730120",
    "end": "1737559"
  },
  {
    "text": "but it's really great so it allows you to do typed programming so you can take an untyped closure program or closure",
    "start": "1737559",
    "end": "1743440"
  },
  {
    "text": "script program and you can you can add types so he uh so this is an example so",
    "start": "1743440",
    "end": "1750840"
  },
  {
    "text": "here you can see that this is Dom stuff so I can type my interactions with the Dom uh you should also be able to see",
    "start": "1750840",
    "end": "1756600"
  },
  {
    "text": "that there's some mention of like I want a union nil and some HT element so so type so core typed if you use it",
    "start": "1756600",
    "end": "1761960"
  },
  {
    "text": "correctly uh you won't have null pointer exceptions so here we have a function If",
    "start": "1761960",
    "end": "1767200"
  },
  {
    "text": "you're sort of familiar with uh generics or if you're familiar with um hll or",
    "start": "1767200",
    "end": "1774519"
  },
  {
    "text": "standard ml um you have this idea of like a",
    "start": "1774519",
    "end": "1780720"
  },
  {
    "text": "generic sort of a type A parametric parametric polymorphism so here we say",
    "start": "1780720",
    "end": "1786320"
  },
  {
    "text": "we're making a statement we're saying for every type we will it's a function which takes",
    "start": "1786320",
    "end": "1791799"
  },
  {
    "text": "that type and Returns the same type um uh it turns out that technically this",
    "start": "1791799",
    "end": "1797320"
  },
  {
    "text": "should only be the the identity right that's the only function that could actually do this um and so imagine I",
    "start": "1797320",
    "end": "1803559"
  },
  {
    "text": "made this mistake I I have I have this I I've create this type signature and then I'm saying I have a function that's",
    "start": "1803559",
    "end": "1808960"
  },
  {
    "text": "called my identity it takes an X then what does it do it it tries to add one to it so it obviously can't be the",
    "start": "1808960",
    "end": "1815880"
  },
  {
    "text": "identity it's not possible right because that doesn't work for all types so I'm going",
    "start": "1815880",
    "end": "1823278"
  },
  {
    "text": "to require chord type and I'm going to check this namespace",
    "start": "1824600",
    "end": "1829960"
  },
  {
    "text": "uh so it takes a second because it's again it's a work in progress so we has to load that's the library and has to",
    "start": "1833640",
    "end": "1838720"
  },
  {
    "text": "load the closure script functionality but uh as soon as it's",
    "start": "1838720",
    "end": "1844039"
  },
  {
    "text": "loaded is actually a lot faster so there there we do we go um it says we're trying you know gives a fairly verbose",
    "start": "1844039",
    "end": "1849559"
  },
  {
    "text": "error saying you're trying to do something with numbers when you say that um when you said that the type was uh",
    "start": "1849559",
    "end": "1855600"
  },
  {
    "text": "for every type so if I switch this and it's much faster because it's loaded",
    "start": "1855600",
    "end": "1861440"
  },
  {
    "text": "so that's pretty cool very new stuff but I think uh people will be using it so cype is actually already used in",
    "start": "1861440",
    "end": "1867080"
  },
  {
    "text": "production um there a lot of people are investing in it uh actually the reason uh Ambrose hit his Target so quickly was",
    "start": "1867080",
    "end": "1873639"
  },
  {
    "text": "because there were so many um uh so many companies and startups were giving him money to do it okay so here's",
    "start": "1873639",
    "end": "1882760"
  },
  {
    "text": "question I'm not sure I understand the details of uh interrupt the javascrip Li",
    "start": "1882760",
    "end": "1888039"
  },
  {
    "text": "such as d3js is that done with notation similar to Java interion exactly so if you want",
    "start": "1888039",
    "end": "1895159"
  },
  {
    "text": "to call if you want to call some method in D3 you're going to use the dot notation but you don't really have to do",
    "start": "1895159",
    "end": "1900440"
  },
  {
    "text": "this yourself there are quite a few D3 inter like people really like putting D3 and collision script together uh so",
    "start": "1900440",
    "end": "1907000"
  },
  {
    "text": "there's prior work that's been done on this so I would just look for examples of collision script and D3 and just copy",
    "start": "1907000",
    "end": "1913080"
  },
  {
    "text": "the patterns that you find",
    "start": "1913080",
    "end": "1916840"
  },
  {
    "text": "much",
    "start": "1918240",
    "end": "1921240"
  }
]