[
  {
    "start": "0",
    "end": "177000"
  },
  {
    "text": "[Music]",
    "start": "970",
    "end": "7838"
  },
  {
    "text": "welcome to our talk",
    "start": "11920",
    "end": "13040"
  },
  {
    "text": "type scripts fans kotlin js adventures",
    "start": "13040",
    "end": "15759"
  },
  {
    "text": "should you make the switch",
    "start": "15759",
    "end": "17760"
  },
  {
    "text": "so uh my name is evan boyle i'm one of",
    "start": "17760",
    "end": "19600"
  },
  {
    "text": "the trainers at a company called install",
    "start": "19600",
    "end": "21520"
  },
  {
    "text": "this is garth",
    "start": "21520",
    "end": "22400"
  },
  {
    "text": "saylor garth hi there and instill is a",
    "start": "22400",
    "end": "26240"
  },
  {
    "text": "software development company",
    "start": "26240",
    "end": "27760"
  },
  {
    "text": "based out of ireland and we also do",
    "start": "27760",
    "end": "30080"
  },
  {
    "text": "consultancy and training",
    "start": "30080",
    "end": "31359"
  },
  {
    "text": "and that's where garth and myself are",
    "start": "31359",
    "end": "34239"
  },
  {
    "text": "primarily based",
    "start": "34239",
    "end": "35760"
  },
  {
    "text": "uh so garth garth and me we're both",
    "start": "35760",
    "end": "39120"
  },
  {
    "text": "big typescript and kotlin fans we love",
    "start": "39120",
    "end": "41520"
  },
  {
    "text": "them because",
    "start": "41520",
    "end": "42800"
  },
  {
    "text": "what we what we like about them they're",
    "start": "42800",
    "end": "44239"
  },
  {
    "text": "nice languages but they solve real",
    "start": "44239",
    "end": "46480"
  },
  {
    "text": "problems and so neither tries to",
    "start": "46480",
    "end": "49200"
  },
  {
    "text": "reinvent the wheel which happens a lot",
    "start": "49200",
    "end": "50719"
  },
  {
    "text": "in our industry",
    "start": "50719",
    "end": "51840"
  },
  {
    "text": "and there's a lot of waste in our in our",
    "start": "51840",
    "end": "54000"
  },
  {
    "text": "industry but both of these languages",
    "start": "54000",
    "end": "55840"
  },
  {
    "text": "are a lot more pragmatic so typescript",
    "start": "55840",
    "end": "57760"
  },
  {
    "text": "builds upon javascript",
    "start": "57760",
    "end": "60239"
  },
  {
    "text": "which in a lot of metrics is the most",
    "start": "60239",
    "end": "62239"
  },
  {
    "text": "popular programming language",
    "start": "62239",
    "end": "63760"
  },
  {
    "text": "out today it's it's really ubiquitous it",
    "start": "63760",
    "end": "66159"
  },
  {
    "text": "runs",
    "start": "66159",
    "end": "66960"
  },
  {
    "text": "everywhere it's got a massive community",
    "start": "66960",
    "end": "69040"
  },
  {
    "text": "there's lots of knowledge out there",
    "start": "69040",
    "end": "70720"
  },
  {
    "text": "and rather than throwing that away",
    "start": "70720",
    "end": "72320"
  },
  {
    "text": "typescript builds upon that",
    "start": "72320",
    "end": "74000"
  },
  {
    "text": "and brings what i like to think of as",
    "start": "74000",
    "end": "75439"
  },
  {
    "text": "like a sanity layer it adds",
    "start": "75439",
    "end": "77439"
  },
  {
    "text": "static types and compilation so that we",
    "start": "77439",
    "end": "80320"
  },
  {
    "text": "can have",
    "start": "80320",
    "end": "81119"
  },
  {
    "text": "a much better development experience uh",
    "start": "81119",
    "end": "83680"
  },
  {
    "text": "autocompletes intellisense you know uh",
    "start": "83680",
    "end": "86159"
  },
  {
    "text": "refactoring navigation",
    "start": "86159",
    "end": "87759"
  },
  {
    "text": "all of that good stuff real-time error",
    "start": "87759",
    "end": "89759"
  },
  {
    "text": "checking so that's that's a really nice",
    "start": "89759",
    "end": "91759"
  },
  {
    "text": "solution good engineering",
    "start": "91759",
    "end": "93280"
  },
  {
    "text": "um but we also love kotlin as well and",
    "start": "93280",
    "end": "95600"
  },
  {
    "text": "again kotlin solves a problem so",
    "start": "95600",
    "end": "97600"
  },
  {
    "text": "on the java virtual machine there's a",
    "start": "97600",
    "end": "99280"
  },
  {
    "text": "problem and for me that problem is java",
    "start": "99280",
    "end": "101360"
  },
  {
    "text": "from using other languages",
    "start": "101360",
    "end": "102799"
  },
  {
    "text": "i get quite frustrated when i use java",
    "start": "102799",
    "end": "105200"
  },
  {
    "text": "although i have to say that the",
    "start": "105200",
    "end": "106479"
  },
  {
    "text": "situation",
    "start": "106479",
    "end": "107520"
  },
  {
    "text": "is getting better so kotlin basically",
    "start": "107520",
    "end": "110000"
  },
  {
    "text": "gives us a modern pragmatic succinct",
    "start": "110000",
    "end": "112159"
  },
  {
    "text": "language",
    "start": "112159",
    "end": "113280"
  },
  {
    "text": "but it doesn't again throw away all that",
    "start": "113280",
    "end": "115040"
  },
  {
    "text": "java goodness because there's lots of",
    "start": "115040",
    "end": "116399"
  },
  {
    "text": "community out there there's lots of",
    "start": "116399",
    "end": "117680"
  },
  {
    "text": "really good code lots of really good",
    "start": "117680",
    "end": "119520"
  },
  {
    "text": "uh libraries and frameworks and tools",
    "start": "119520",
    "end": "121280"
  },
  {
    "text": "out there and kotlin builds upon that",
    "start": "121280",
    "end": "123680"
  },
  {
    "text": "so that you can reuse those assets",
    "start": "123680",
    "end": "125920"
  },
  {
    "text": "interrupt as a design goal",
    "start": "125920",
    "end": "127680"
  },
  {
    "text": "uh the learning curve is easy so it's",
    "start": "127680",
    "end": "129520"
  },
  {
    "text": "just it's just a really really good",
    "start": "129520",
    "end": "131440"
  },
  {
    "text": "solution to a problem okay um so we just",
    "start": "131440",
    "end": "134400"
  },
  {
    "text": "see both of these languages",
    "start": "134400",
    "end": "135760"
  },
  {
    "text": "as as improving on what came before and",
    "start": "135760",
    "end": "138319"
  },
  {
    "text": "kotlin is an interesting one because",
    "start": "138319",
    "end": "140160"
  },
  {
    "text": "they're really going after",
    "start": "140160",
    "end": "141440"
  },
  {
    "text": "um all spaces so start off with kotlin",
    "start": "141440",
    "end": "144560"
  },
  {
    "text": "and jvm",
    "start": "144560",
    "end": "145520"
  },
  {
    "text": "now it's probably more popular and well",
    "start": "145520",
    "end": "147599"
  },
  {
    "text": "known for being",
    "start": "147599",
    "end": "148879"
  },
  {
    "text": "the the first choice for for android",
    "start": "148879",
    "end": "151920"
  },
  {
    "text": "but you can also build kotlin native and",
    "start": "151920",
    "end": "153920"
  },
  {
    "text": "develop apps for native uh",
    "start": "153920",
    "end": "156239"
  },
  {
    "text": "scenarios uh maybe um low memory",
    "start": "156239",
    "end": "159440"
  },
  {
    "text": "footprint and things like that there",
    "start": "159440",
    "end": "160800"
  },
  {
    "text": "and more importantly ios uh but you can",
    "start": "160800",
    "end": "163840"
  },
  {
    "text": "also do kotlin for javascript platform",
    "start": "163840",
    "end": "165760"
  },
  {
    "text": "so browser and node.js and",
    "start": "165760",
    "end": "167680"
  },
  {
    "text": "uh things like that there and that's",
    "start": "167680",
    "end": "168800"
  },
  {
    "text": "what really we're looking at here",
    "start": "168800",
    "end": "170319"
  },
  {
    "text": "because we know",
    "start": "170319",
    "end": "171120"
  },
  {
    "text": "kotlin quite well internally we use it",
    "start": "171120",
    "end": "172959"
  },
  {
    "text": "internally but we want to give sort of",
    "start": "172959",
    "end": "174400"
  },
  {
    "text": "kotlin js a fair shake",
    "start": "174400",
    "end": "176160"
  },
  {
    "text": "so what's the experiment that we're",
    "start": "176160",
    "end": "177519"
  },
  {
    "start": "177000",
    "end": "436000"
  },
  {
    "text": "going to run well we wrote an app",
    "start": "177519",
    "end": "179760"
  },
  {
    "text": "and we wrote it in typescript and we",
    "start": "179760",
    "end": "181360"
  },
  {
    "text": "wrote it in kotlin js just to compare",
    "start": "181360",
    "end": "183760"
  },
  {
    "text": "what the experiences were like because",
    "start": "183760",
    "end": "185519"
  },
  {
    "text": "we know typescript uses quite a lot",
    "start": "185519",
    "end": "187680"
  },
  {
    "text": "we love kotlin so what's it like in the",
    "start": "187680",
    "end": "189599"
  },
  {
    "text": "js flavor and we want to go beyond hello",
    "start": "189599",
    "end": "192000"
  },
  {
    "text": "world so we wanted to incorporate",
    "start": "192000",
    "end": "193920"
  },
  {
    "text": "some libraries we wanted to build",
    "start": "193920",
    "end": "195440"
  },
  {
    "text": "something that involved us writing",
    "start": "195440",
    "end": "196959"
  },
  {
    "text": "a bit more code and then we could do a",
    "start": "196959",
    "end": "199440"
  },
  {
    "text": "better comparison",
    "start": "199440",
    "end": "200400"
  },
  {
    "text": "but we also want to keep it fun that's a",
    "start": "200400",
    "end": "202400"
  },
  {
    "text": "big part of it because otherwise it gets",
    "start": "202400",
    "end": "203840"
  },
  {
    "text": "very boring",
    "start": "203840",
    "end": "204640"
  },
  {
    "text": "so what did we do uh we created uh a",
    "start": "204640",
    "end": "208000"
  },
  {
    "text": "bash out clone okay so we did this",
    "start": "208000",
    "end": "210000"
  },
  {
    "text": "for a native workshop that we did so we",
    "start": "210000",
    "end": "212640"
  },
  {
    "text": "thought we'd do the same thing again",
    "start": "212640",
    "end": "214239"
  },
  {
    "text": "uh but with kotlin js so this is using",
    "start": "214239",
    "end": "216799"
  },
  {
    "text": "uh you know webgl it's all",
    "start": "216799",
    "end": "218400"
  },
  {
    "text": "3d uh and uh to make it even more fun",
    "start": "218400",
    "end": "222239"
  },
  {
    "text": "i got my kids involved so listen",
    "start": "222239",
    "end": "226239"
  },
  {
    "text": "uh they're doing the sound effects with",
    "start": "226239",
    "end": "227760"
  },
  {
    "text": "me and they're playing",
    "start": "227760",
    "end": "230159"
  },
  {
    "text": "uh die i'm very good at this game which",
    "start": "230159",
    "end": "232159"
  },
  {
    "text": "makes it difficult",
    "start": "232159",
    "end": "233200"
  },
  {
    "text": "for me to die in it uh",
    "start": "233200",
    "end": "236720"
  },
  {
    "text": "don't see that there i almost won again",
    "start": "236720",
    "end": "239599"
  },
  {
    "text": "every day",
    "start": "239599",
    "end": "241920"
  },
  {
    "text": "so we had lots of fun with that there",
    "start": "241920",
    "end": "243519"
  },
  {
    "text": "and uh they created levels and stuff",
    "start": "243519",
    "end": "245760"
  },
  {
    "text": "that's my daughter's name",
    "start": "245760",
    "end": "247120"
  },
  {
    "text": "uh so we had a lot of fun with it that's",
    "start": "247120",
    "end": "249120"
  },
  {
    "text": "my son uh playing it",
    "start": "249120",
    "end": "251120"
  },
  {
    "text": "um so the app is a bit more than hello",
    "start": "251120",
    "end": "253360"
  },
  {
    "text": "world okay we're using react which is a",
    "start": "253360",
    "end": "255200"
  },
  {
    "text": "really common framework",
    "start": "255200",
    "end": "256479"
  },
  {
    "text": "we're using redux which is really good",
    "start": "256479",
    "end": "259120"
  },
  {
    "text": "for managing state",
    "start": "259120",
    "end": "260479"
  },
  {
    "text": "within react and then i'm not a gamer",
    "start": "260479",
    "end": "263280"
  },
  {
    "text": "this is not a stack that you use for",
    "start": "263280",
    "end": "264880"
  },
  {
    "text": "building",
    "start": "264880",
    "end": "265759"
  },
  {
    "text": "games really and i i don't know that",
    "start": "265759",
    "end": "268800"
  },
  {
    "text": "much about 3d",
    "start": "268800",
    "end": "269919"
  },
  {
    "text": "so i'm using a library called react",
    "start": "269919",
    "end": "271600"
  },
  {
    "text": "street fiber which is really really nice",
    "start": "271600",
    "end": "273600"
  },
  {
    "text": "it allows us to create 3d scenes",
    "start": "273600",
    "end": "275759"
  },
  {
    "text": "declaratively",
    "start": "275759",
    "end": "276639"
  },
  {
    "text": "so here i'm creating a mesh using react",
    "start": "276639",
    "end": "279040"
  },
  {
    "text": "like syntax",
    "start": "279040",
    "end": "280080"
  },
  {
    "text": "and it is bound to a position and then",
    "start": "280080",
    "end": "282639"
  },
  {
    "text": "when the position changes in the normal",
    "start": "282639",
    "end": "284320"
  },
  {
    "text": "way that state changes in react",
    "start": "284320",
    "end": "286080"
  },
  {
    "text": "and redux the 3d scene updates",
    "start": "286080",
    "end": "288240"
  },
  {
    "text": "automatically so it's a really nice",
    "start": "288240",
    "end": "289680"
  },
  {
    "text": "framework",
    "start": "289680",
    "end": "290560"
  },
  {
    "text": "so garth if you want to take us through",
    "start": "290560",
    "end": "291919"
  },
  {
    "text": "creating a kotlin js project",
    "start": "291919",
    "end": "293840"
  },
  {
    "text": "absolutely so the good news is that",
    "start": "293840",
    "end": "295759"
  },
  {
    "text": "these days kotlin js is fully integrated",
    "start": "295759",
    "end": "298320"
  },
  {
    "text": "into intellij so you just have to say i",
    "start": "298320",
    "end": "300720"
  },
  {
    "text": "want a new project and then these days",
    "start": "300720",
    "end": "302880"
  },
  {
    "text": "you're going to",
    "start": "302880",
    "end": "303440"
  },
  {
    "text": "choose gradle for your build file and",
    "start": "303440",
    "end": "305440"
  },
  {
    "text": "then you can choose kotlin js for",
    "start": "305440",
    "end": "307520"
  },
  {
    "text": "browser so that's going to build a",
    "start": "307520",
    "end": "309120"
  },
  {
    "text": "project with built-in support for react",
    "start": "309120",
    "end": "312400"
  },
  {
    "text": "other options if you were doing",
    "start": "312400",
    "end": "313919"
  },
  {
    "text": "something server-side or if something",
    "start": "313919",
    "end": "316000"
  },
  {
    "text": "that was just completely standalone",
    "start": "316000",
    "end": "318080"
  },
  {
    "text": "you might go for the new js option there",
    "start": "318080",
    "end": "320560"
  },
  {
    "text": "or something that's",
    "start": "320560",
    "end": "321919"
  },
  {
    "text": "increasingly important these days you",
    "start": "321919",
    "end": "323840"
  },
  {
    "text": "might go for a multi-platform project so",
    "start": "323840",
    "end": "326240"
  },
  {
    "text": "that would be where",
    "start": "326240",
    "end": "327600"
  },
  {
    "text": "you had entity classes and business",
    "start": "327600",
    "end": "329759"
  },
  {
    "text": "logic and so on",
    "start": "329759",
    "end": "330880"
  },
  {
    "text": "and you wanted to share those across a",
    "start": "330880",
    "end": "333199"
  },
  {
    "text": "wide range of different uis you know",
    "start": "333199",
    "end": "335039"
  },
  {
    "text": "potentially all the",
    "start": "335039",
    "end": "336160"
  },
  {
    "text": "the platforms that kotlin supports these",
    "start": "336160",
    "end": "338320"
  },
  {
    "text": "days and then if you see they're up at",
    "start": "338320",
    "end": "340000"
  },
  {
    "text": "the top a nice little detail",
    "start": "340000",
    "end": "341600"
  },
  {
    "text": "uh you're no longer going to be using",
    "start": "341600",
    "end": "343680"
  },
  {
    "text": "the groovy uh",
    "start": "343680",
    "end": "344720"
  },
  {
    "text": "base dsl uh that comes with gradle",
    "start": "344720",
    "end": "347520"
  },
  {
    "text": "instead we're going to be using the",
    "start": "347520",
    "end": "349120"
  },
  {
    "text": "kotlin based one so that's been the",
    "start": "349120",
    "end": "350880"
  },
  {
    "text": "standard for",
    "start": "350880",
    "end": "352160"
  },
  {
    "text": "almost two years now so it's going to be",
    "start": "352160",
    "end": "354240"
  },
  {
    "text": "kotlin all the way through",
    "start": "354240",
    "end": "356960"
  },
  {
    "text": "and then if we look at the build file",
    "start": "356960",
    "end": "358240"
  },
  {
    "text": "that you get so you can see there at the",
    "start": "358240",
    "end": "360000"
  },
  {
    "text": "top we're",
    "start": "360000",
    "end": "360639"
  },
  {
    "text": "using the javascript flavor of the",
    "start": "360639",
    "end": "362479"
  },
  {
    "text": "kotlin standard library",
    "start": "362479",
    "end": "364160"
  },
  {
    "text": "and then you already have kotlin js",
    "start": "364160",
    "end": "366400"
  },
  {
    "text": "wrappers around",
    "start": "366400",
    "end": "367759"
  },
  {
    "text": "the core react architecture that's react",
    "start": "367759",
    "end": "370240"
  },
  {
    "text": "and react to run inside the browser",
    "start": "370240",
    "end": "372319"
  },
  {
    "text": "that's react dom",
    "start": "372319",
    "end": "373520"
  },
  {
    "text": "and now kotlin js has built in support",
    "start": "373520",
    "end": "375919"
  },
  {
    "text": "for cool routines as well you know so",
    "start": "375919",
    "end": "377680"
  },
  {
    "text": "you're",
    "start": "377680",
    "end": "378240"
  },
  {
    "text": "you're immediately given the essentials",
    "start": "378240",
    "end": "380160"
  },
  {
    "text": "that you need and then for the other",
    "start": "380160",
    "end": "381840"
  },
  {
    "text": "things like",
    "start": "381840",
    "end": "382639"
  },
  {
    "text": "eamonn was mentioning react3 fiber there",
    "start": "382639",
    "end": "385039"
  },
  {
    "text": "well then you can bring them in through",
    "start": "385039",
    "end": "386639"
  },
  {
    "text": "the npm function so you see there you",
    "start": "386639",
    "end": "388560"
  },
  {
    "text": "just give the name",
    "start": "388560",
    "end": "389680"
  },
  {
    "text": "of the the node package in the version",
    "start": "389680",
    "end": "392240"
  },
  {
    "text": "and then that",
    "start": "392240",
    "end": "392880"
  },
  {
    "text": "npm function will bring it in for you",
    "start": "392880",
    "end": "395120"
  },
  {
    "text": "you know just like in a package.json so",
    "start": "395120",
    "end": "397199"
  },
  {
    "text": "that's really cool",
    "start": "397199",
    "end": "398800"
  },
  {
    "text": "and then this will be uh immediately",
    "start": "398800",
    "end": "400400"
  },
  {
    "text": "self evident to anybody who's ever done",
    "start": "400400",
    "end": "402240"
  },
  {
    "text": "react before",
    "start": "402240",
    "end": "403360"
  },
  {
    "text": "so you see here we're using the the",
    "start": "403360",
    "end": "405360"
  },
  {
    "text": "kotlin version of the document object",
    "start": "405360",
    "end": "407600"
  },
  {
    "text": "so we're getting the bit of the page",
    "start": "407600",
    "end": "408960"
  },
  {
    "text": "with an id of root and we're feeding",
    "start": "408960",
    "end": "411120"
  },
  {
    "text": "that",
    "start": "411120",
    "end": "411440"
  },
  {
    "text": "into react's render function so that",
    "start": "411440",
    "end": "413520"
  },
  {
    "text": "means that that's going to be the bit of",
    "start": "413520",
    "end": "415440"
  },
  {
    "text": "the page",
    "start": "415440",
    "end": "416000"
  },
  {
    "text": "where it's going to put the output of",
    "start": "416000",
    "end": "417680"
  },
  {
    "text": "our tree of components",
    "start": "417680",
    "end": "419120"
  },
  {
    "text": "and in the center there we're",
    "start": "419120",
    "end": "420800"
  },
  {
    "text": "initializing we're running the app",
    "start": "420800",
    "end": "422960"
  },
  {
    "text": "component which by convention is the",
    "start": "422960",
    "end": "425440"
  },
  {
    "text": "the main component in the tree but we've",
    "start": "425440",
    "end": "427520"
  },
  {
    "text": "wrapped that call up in a call to",
    "start": "427520",
    "end": "429199"
  },
  {
    "text": "provider",
    "start": "429199",
    "end": "429919"
  },
  {
    "text": "uh because we're going to be using redux",
    "start": "429919",
    "end": "432080"
  },
  {
    "text": "as our data store and of course we uh we",
    "start": "432080",
    "end": "434000"
  },
  {
    "text": "need to specify that",
    "start": "434000",
    "end": "436720"
  },
  {
    "start": "436000",
    "end": "560000"
  },
  {
    "text": "so all very nice so just to kick off our",
    "start": "436720",
    "end": "440000"
  },
  {
    "text": "uh our comparison uh round one let's",
    "start": "440000",
    "end": "442479"
  },
  {
    "text": "just talk about the two communities and",
    "start": "442479",
    "end": "444160"
  },
  {
    "text": "how large they are and friendly and",
    "start": "444160",
    "end": "445840"
  },
  {
    "text": "available and so on",
    "start": "445840",
    "end": "447120"
  },
  {
    "text": "so obviously both kotlin and typescript",
    "start": "447120",
    "end": "449280"
  },
  {
    "text": "are very very large languages you know",
    "start": "449280",
    "end": "451120"
  },
  {
    "text": "very popular",
    "start": "451120",
    "end": "452240"
  },
  {
    "text": "uh but as even was saying with kotlin",
    "start": "452240",
    "end": "454800"
  },
  {
    "text": "it's best known on the jvm so it started",
    "start": "454800",
    "end": "457360"
  },
  {
    "text": "out in android and then expanded beyond",
    "start": "457360",
    "end": "459599"
  },
  {
    "text": "that",
    "start": "459599",
    "end": "460400"
  },
  {
    "text": "so these days you've got people doing um",
    "start": "460400",
    "end": "462800"
  },
  {
    "text": "server server-side development",
    "start": "462800",
    "end": "464000"
  },
  {
    "text": "with kator the microservices framework",
    "start": "464000",
    "end": "466160"
  },
  {
    "text": "you've got coin for dependency injection",
    "start": "466160",
    "end": "468479"
  },
  {
    "text": "uh you've got cutlass for serverless in",
    "start": "468479",
    "end": "470400"
  },
  {
    "text": "the cloud and so on",
    "start": "470400",
    "end": "471520"
  },
  {
    "text": "but it's all based around jvm so there",
    "start": "471520",
    "end": "473840"
  },
  {
    "text": "are a few people doing kotlin native as",
    "start": "473840",
    "end": "475680"
  },
  {
    "text": "well and so on",
    "start": "475680",
    "end": "476639"
  },
  {
    "text": "but whenever you're talking kotlin these",
    "start": "476639",
    "end": "478400"
  },
  {
    "text": "days you're mostly talking jvm",
    "start": "478400",
    "end": "480720"
  },
  {
    "text": "whereas typescript of course that's you",
    "start": "480720",
    "end": "482720"
  },
  {
    "text": "know entirely going to be built on top",
    "start": "482720",
    "end": "485120"
  },
  {
    "text": "of javascript",
    "start": "485120",
    "end": "488000"
  },
  {
    "text": "so as you can see there um typescript",
    "start": "488720",
    "end": "491599"
  },
  {
    "text": "adoption",
    "start": "491599",
    "end": "492319"
  },
  {
    "text": "is incredibly strong lots of people are",
    "start": "492319",
    "end": "495039"
  },
  {
    "text": "trying it out you don't have a choice if",
    "start": "495039",
    "end": "496800"
  },
  {
    "text": "you're doing things like angular",
    "start": "496800",
    "end": "498560"
  },
  {
    "text": "but even more important than the rate of",
    "start": "498560",
    "end": "500479"
  },
  {
    "text": "adoption is the rate of people who like",
    "start": "500479",
    "end": "502560"
  },
  {
    "text": "it you know and want to go back to it",
    "start": "502560",
    "end": "504240"
  },
  {
    "text": "and that was definitely our experience",
    "start": "504240",
    "end": "506560"
  },
  {
    "text": "you know we've both been doing",
    "start": "506560",
    "end": "507759"
  },
  {
    "text": "javascript for uh",
    "start": "507759",
    "end": "509039"
  },
  {
    "text": "an uncomfortable number of decades now",
    "start": "509039",
    "end": "511199"
  },
  {
    "text": "and uh that the fact that you can",
    "start": "511199",
    "end": "513039"
  },
  {
    "text": "do javascript but this time you've got",
    "start": "513039",
    "end": "515518"
  },
  {
    "text": "types and you've got interfaces and",
    "start": "515519",
    "end": "517440"
  },
  {
    "text": "you've got generics and so on",
    "start": "517440",
    "end": "519279"
  },
  {
    "text": "and uh you've got the ide to support all",
    "start": "519279",
    "end": "521360"
  },
  {
    "text": "your stupid mistakes at 3 a.m in the",
    "start": "521360",
    "end": "523360"
  },
  {
    "text": "morning you know we uh",
    "start": "523360",
    "end": "524800"
  },
  {
    "text": "we love it to bits yeah so for this",
    "start": "524800",
    "end": "526800"
  },
  {
    "text": "particular round",
    "start": "526800",
    "end": "528080"
  },
  {
    "text": "we'd have to give it to typescript you",
    "start": "528080",
    "end": "529680"
  },
  {
    "text": "know so uh typescript is definitely more",
    "start": "529680",
    "end": "532240"
  },
  {
    "text": "popular than kotlin js",
    "start": "532240",
    "end": "534480"
  },
  {
    "text": "that the transfer is going to be easier",
    "start": "534480",
    "end": "536800"
  },
  {
    "text": "you know you can",
    "start": "536800",
    "end": "538160"
  },
  {
    "text": "you can take all of your javascript",
    "start": "538160",
    "end": "539839"
  },
  {
    "text": "knowledge and incrementally introduce",
    "start": "539839",
    "end": "541760"
  },
  {
    "text": "typescript",
    "start": "541760",
    "end": "542560"
  },
  {
    "text": "uh you know you wouldn't have that with",
    "start": "542560",
    "end": "544080"
  },
  {
    "text": "kotlin js obviously it would be a",
    "start": "544080",
    "end": "545760"
  },
  {
    "text": "different syntax",
    "start": "545760",
    "end": "546880"
  },
  {
    "text": "unless as sometimes happens you know",
    "start": "546880",
    "end": "549040"
  },
  {
    "text": "you're an experienced server side",
    "start": "549040",
    "end": "551120"
  },
  {
    "text": "developer in kotlin",
    "start": "551120",
    "end": "552399"
  },
  {
    "text": "or android developer and you're trying",
    "start": "552399",
    "end": "554560"
  },
  {
    "text": "to make the transition to the browser",
    "start": "554560",
    "end": "556160"
  },
  {
    "text": "but that's not going to be the the",
    "start": "556160",
    "end": "557440"
  },
  {
    "text": "majority of people you know so uh",
    "start": "557440",
    "end": "559360"
  },
  {
    "text": "so round one yeah has to get given to",
    "start": "559360",
    "end": "561680"
  },
  {
    "start": "560000",
    "end": "834000"
  },
  {
    "text": "the typescript",
    "start": "561680",
    "end": "563120"
  },
  {
    "text": "and then round two let's just think",
    "start": "563120",
    "end": "564959"
  },
  {
    "text": "about the interoperability",
    "start": "564959",
    "end": "566560"
  },
  {
    "text": "so if we go back to the build file there",
    "start": "566560",
    "end": "568720"
  },
  {
    "text": "as we've already said you can use the",
    "start": "568720",
    "end": "570560"
  },
  {
    "text": "npm function",
    "start": "570560",
    "end": "571760"
  },
  {
    "text": "to go out and bring in any uh node",
    "start": "571760",
    "end": "574160"
  },
  {
    "text": "package and that works really well",
    "start": "574160",
    "end": "576160"
  },
  {
    "text": "but then the question becomes i mean how",
    "start": "576160",
    "end": "578160"
  },
  {
    "text": "how easy is it to consume that code",
    "start": "578160",
    "end": "580399"
  },
  {
    "text": "and the answer is actually uh very easy",
    "start": "580399",
    "end": "582880"
  },
  {
    "text": "indeed",
    "start": "582880",
    "end": "583519"
  },
  {
    "text": "yeah so all you need to do is create a",
    "start": "583519",
    "end": "586640"
  },
  {
    "text": "kotlin file",
    "start": "586640",
    "end": "587760"
  },
  {
    "text": "and then you can use the js module",
    "start": "587760",
    "end": "589839"
  },
  {
    "text": "annotation at the top there",
    "start": "589839",
    "end": "591279"
  },
  {
    "text": "to specify the npm package so here we're",
    "start": "591279",
    "end": "593760"
  },
  {
    "text": "bringing in react 3 fiber",
    "start": "593760",
    "end": "595600"
  },
  {
    "text": "and then you just give kotlin",
    "start": "595600",
    "end": "597279"
  },
  {
    "text": "declarations for all the things that you",
    "start": "597279",
    "end": "599519"
  },
  {
    "text": "want to use but you put the external",
    "start": "599519",
    "end": "601519"
  },
  {
    "text": "keyword on the left hand side",
    "start": "601519",
    "end": "603200"
  },
  {
    "text": "to say that we're only declaring these",
    "start": "603200",
    "end": "605200"
  },
  {
    "text": "things we're not going to define them",
    "start": "605200",
    "end": "607279"
  },
  {
    "text": "you know the",
    "start": "607279",
    "end": "608000"
  },
  {
    "text": "the definitions will be in the uh the",
    "start": "608000",
    "end": "610079"
  },
  {
    "text": "npm module",
    "start": "610079",
    "end": "611680"
  },
  {
    "text": "but of course that's work and nobody",
    "start": "611680",
    "end": "613519"
  },
  {
    "text": "likes work you know so",
    "start": "613519",
    "end": "614959"
  },
  {
    "text": "what wouldn't it be nice if there was a",
    "start": "614959",
    "end": "617519"
  },
  {
    "text": "way of sidestepping that",
    "start": "617519",
    "end": "619360"
  },
  {
    "text": "well you can because most javascript",
    "start": "619360",
    "end": "621760"
  },
  {
    "text": "libraries these days already have",
    "start": "621760",
    "end": "623600"
  },
  {
    "text": "typescript wrappers you know so people",
    "start": "623600",
    "end": "625440"
  },
  {
    "text": "have gone out",
    "start": "625440",
    "end": "626320"
  },
  {
    "text": "and done typescript type declarations",
    "start": "626320",
    "end": "629279"
  },
  {
    "text": "for",
    "start": "629279",
    "end": "629680"
  },
  {
    "text": "the things in the javascript library if",
    "start": "629680",
    "end": "631760"
  },
  {
    "text": "the library's not already written in",
    "start": "631760",
    "end": "633040"
  },
  {
    "text": "typescript you know",
    "start": "633040",
    "end": "634079"
  },
  {
    "text": "so uh wouldn't it be nice if we had a",
    "start": "634079",
    "end": "636800"
  },
  {
    "text": "magic tool",
    "start": "636800",
    "end": "638000"
  },
  {
    "text": "that could take typescript declarations",
    "start": "638000",
    "end": "640240"
  },
  {
    "text": "and convert them to kotlin ones yeah",
    "start": "640240",
    "end": "642480"
  },
  {
    "text": "and that's what ducat does for us uh not",
    "start": "642480",
    "end": "645839"
  },
  {
    "text": "the cardassian prefect of major you know",
    "start": "645839",
    "end": "648079"
  },
  {
    "text": "that the power wraiths won't be helping",
    "start": "648079",
    "end": "649519"
  },
  {
    "text": "us out on this one",
    "start": "649519",
    "end": "650560"
  },
  {
    "text": "but uh it's a little tool that",
    "start": "650560",
    "end": "652160"
  },
  {
    "text": "jeopardians wrote uh but as i say will",
    "start": "652160",
    "end": "654320"
  },
  {
    "text": "take your typescript type definitions",
    "start": "654320",
    "end": "656560"
  },
  {
    "text": "and convert them into kotlin js once and",
    "start": "656560",
    "end": "659040"
  },
  {
    "text": "if you just uh",
    "start": "659040",
    "end": "659839"
  },
  {
    "text": "scan the code here you can see that",
    "start": "659839",
    "end": "661839"
  },
  {
    "text": "we've got some typescript at the top",
    "start": "661839",
    "end": "663839"
  },
  {
    "text": "and the equivalent kotlin js at the",
    "start": "663839",
    "end": "665920"
  },
  {
    "text": "bottom so",
    "start": "665920",
    "end": "666959"
  },
  {
    "text": "it looks like it's done a good job and",
    "start": "666959",
    "end": "668560"
  },
  {
    "text": "to be fair it does",
    "start": "668560",
    "end": "670320"
  },
  {
    "text": "but you're going to have speed bumps you",
    "start": "670320",
    "end": "672079"
  },
  {
    "text": "know it's going to be an imperfect",
    "start": "672079",
    "end": "673839"
  },
  {
    "text": "process",
    "start": "673839",
    "end": "674640"
  },
  {
    "text": "so as you can see here uh field one at",
    "start": "674640",
    "end": "676959"
  },
  {
    "text": "the top was mapped",
    "start": "676959",
    "end": "678079"
  },
  {
    "text": "to as being read only and then down the",
    "start": "678079",
    "end": "680720"
  },
  {
    "text": "bottom that's declared with var you know",
    "start": "680720",
    "end": "682560"
  },
  {
    "text": "might be nicer if it was val",
    "start": "682560",
    "end": "684160"
  },
  {
    "text": "instead so there's going to be these uh",
    "start": "684160",
    "end": "685920"
  },
  {
    "text": "these little issues",
    "start": "685920",
    "end": "687360"
  },
  {
    "text": "and the the more advanced features of",
    "start": "687360",
    "end": "690160"
  },
  {
    "text": "typescript that you use",
    "start": "690160",
    "end": "691600"
  },
  {
    "text": "are the bigger the problems are going to",
    "start": "691600",
    "end": "693760"
  },
  {
    "text": "get so typescript",
    "start": "693760",
    "end": "695120"
  },
  {
    "text": "is pioneering the use of structural",
    "start": "695120",
    "end": "697920"
  },
  {
    "text": "typing in the industry and that's a",
    "start": "697920",
    "end": "699680"
  },
  {
    "text": "whole chat in its own right",
    "start": "699680",
    "end": "701200"
  },
  {
    "text": "but it means that you can do weird stuff",
    "start": "701200",
    "end": "703200"
  },
  {
    "text": "like type mappings yeah",
    "start": "703200",
    "end": "704720"
  },
  {
    "text": "so you see here we can create a my read",
    "start": "704720",
    "end": "707120"
  },
  {
    "text": "only of t",
    "start": "707120",
    "end": "708160"
  },
  {
    "text": "flat okay so uh let's say we had a data",
    "start": "708160",
    "end": "711360"
  },
  {
    "text": "type called foo",
    "start": "711360",
    "end": "712720"
  },
  {
    "text": "with properties called bar and zed you",
    "start": "712720",
    "end": "714720"
  },
  {
    "text": "know when bar was a string and z was a",
    "start": "714720",
    "end": "716480"
  },
  {
    "text": "number",
    "start": "716480",
    "end": "717040"
  },
  {
    "text": "well if we did a my read only of foo",
    "start": "717040",
    "end": "719760"
  },
  {
    "text": "well then we'd get a new data type",
    "start": "719760",
    "end": "721519"
  },
  {
    "text": "created",
    "start": "721519",
    "end": "722240"
  },
  {
    "text": "and that data type would have properties",
    "start": "722240",
    "end": "724079"
  },
  {
    "text": "called bar and zed",
    "start": "724079",
    "end": "725360"
  },
  {
    "text": "and their data types would be string and",
    "start": "725360",
    "end": "727120"
  },
  {
    "text": "number but they would be read only",
    "start": "727120",
    "end": "729279"
  },
  {
    "text": "so on the fly we would have created a",
    "start": "729279",
    "end": "731360"
  },
  {
    "text": "new type which was a mapped version of t",
    "start": "731360",
    "end": "734480"
  },
  {
    "text": "where all the properties were the same",
    "start": "734480",
    "end": "736320"
  },
  {
    "text": "except that now they were",
    "start": "736320",
    "end": "737760"
  },
  {
    "text": "read only you know so this ability to do",
    "start": "737760",
    "end": "739839"
  },
  {
    "text": "mapped types",
    "start": "739839",
    "end": "740880"
  },
  {
    "text": "is a big and increasingly important",
    "start": "740880",
    "end": "743120"
  },
  {
    "text": "thing in modern typescript",
    "start": "743120",
    "end": "744959"
  },
  {
    "text": "so kotlin looks at this and goes what",
    "start": "744959",
    "end": "747760"
  },
  {
    "text": "you know",
    "start": "747760",
    "end": "748240"
  },
  {
    "text": "so uh you see there it's just fallen",
    "start": "748240",
    "end": "750560"
  },
  {
    "text": "back on the",
    "start": "750560",
    "end": "751519"
  },
  {
    "text": "the universal base type of uh of any you",
    "start": "751519",
    "end": "754399"
  },
  {
    "text": "know so that's a",
    "start": "754399",
    "end": "755760"
  },
  {
    "text": "that's an issue and it's going to be an",
    "start": "755760",
    "end": "757279"
  },
  {
    "text": "increasing issue as typescript develops",
    "start": "757279",
    "end": "760959"
  },
  {
    "text": "so uh there's other things that kotlin",
    "start": "760959",
    "end": "762880"
  },
  {
    "text": "js can do",
    "start": "762880",
    "end": "764000"
  },
  {
    "text": "so uh there's a dynamic keyword built",
    "start": "764000",
    "end": "766399"
  },
  {
    "text": "into kotlin js and that can get you out",
    "start": "766399",
    "end": "768480"
  },
  {
    "text": "of",
    "start": "768480",
    "end": "769120"
  },
  {
    "text": "certain awkward corners and there's also",
    "start": "769120",
    "end": "771440"
  },
  {
    "text": "a built-in function called",
    "start": "771440",
    "end": "772880"
  },
  {
    "text": "jrs object where you pass in a lambda",
    "start": "772880",
    "end": "775839"
  },
  {
    "text": "with some property declarations",
    "start": "775839",
    "end": "777680"
  },
  {
    "text": "and that it will produce javascript",
    "start": "777680",
    "end": "779680"
  },
  {
    "text": "objects in the flag okay",
    "start": "779680",
    "end": "781279"
  },
  {
    "text": "so that these issues can be worked",
    "start": "781279",
    "end": "783200"
  },
  {
    "text": "around but there are issues",
    "start": "783200",
    "end": "786399"
  },
  {
    "text": "so again in this case uh i think we have",
    "start": "786399",
    "end": "788480"
  },
  {
    "text": "to give the victory to typescript and i",
    "start": "788480",
    "end": "790320"
  },
  {
    "text": "mean this shouldn't be surprising",
    "start": "790320",
    "end": "791920"
  },
  {
    "text": "because whenever you're going from",
    "start": "791920",
    "end": "793680"
  },
  {
    "text": "javascript to typescript",
    "start": "793680",
    "end": "795279"
  },
  {
    "text": "yeah well uh you're going from like",
    "start": "795279",
    "end": "797839"
  },
  {
    "text": "apples",
    "start": "797839",
    "end": "798480"
  },
  {
    "text": "to better apples okay so uh typescript",
    "start": "798480",
    "end": "801760"
  },
  {
    "text": "is deliberately designed to exploit",
    "start": "801760",
    "end": "804320"
  },
  {
    "text": "the uh the unique flexibility can we put",
    "start": "804320",
    "end": "807680"
  },
  {
    "text": "it that way even you know that the uh",
    "start": "807680",
    "end": "809279"
  },
  {
    "text": "the unique flexibility of the uh",
    "start": "809279",
    "end": "811680"
  },
  {
    "text": "the javascript type system you know",
    "start": "811680",
    "end": "813920"
  },
  {
    "text": "whereas",
    "start": "813920",
    "end": "814959"
  },
  {
    "text": "kotlin was of course originally designed",
    "start": "814959",
    "end": "816800"
  },
  {
    "text": "to make the best of the the jvm type",
    "start": "816800",
    "end": "819120"
  },
  {
    "text": "system",
    "start": "819120",
    "end": "819760"
  },
  {
    "text": "so with typescript you're going from",
    "start": "819760",
    "end": "821760"
  },
  {
    "text": "apples to better apples",
    "start": "821760",
    "end": "823600"
  },
  {
    "text": "from kotlin you're going from apples to",
    "start": "823600",
    "end": "825760"
  },
  {
    "text": "oranges you know so there's always going",
    "start": "825760",
    "end": "827519"
  },
  {
    "text": "to be a",
    "start": "827519",
    "end": "828240"
  },
  {
    "text": "limitations and what tools like ducat",
    "start": "828240",
    "end": "830399"
  },
  {
    "text": "can do for you",
    "start": "830399",
    "end": "833120"
  },
  {
    "text": "so chase garth and so sort of continuing",
    "start": "833600",
    "end": "836160"
  },
  {
    "start": "834000",
    "end": "1290000"
  },
  {
    "text": "that let's look at",
    "start": "836160",
    "end": "837600"
  },
  {
    "text": "how we can actually build react uis",
    "start": "837600",
    "end": "839760"
  },
  {
    "text": "because that's quite a common scenario",
    "start": "839760",
    "end": "841120"
  },
  {
    "text": "that we",
    "start": "841120",
    "end": "842000"
  },
  {
    "text": "we use javascript for on typescript for",
    "start": "842000",
    "end": "844959"
  },
  {
    "text": "and let's see how we can do that in",
    "start": "844959",
    "end": "846480"
  },
  {
    "text": "kotlin js and it uses a dsl",
    "start": "846480",
    "end": "848800"
  },
  {
    "text": "so if you're not familiar with react it",
    "start": "848800",
    "end": "850639"
  },
  {
    "text": "has this technology that it uses called",
    "start": "850639",
    "end": "852560"
  },
  {
    "text": "jsx",
    "start": "852560",
    "end": "853440"
  },
  {
    "text": "which allows us to put html like tags or",
    "start": "853440",
    "end": "857199"
  },
  {
    "text": "html like structures",
    "start": "857199",
    "end": "858720"
  },
  {
    "text": "into our code so you can see that this",
    "start": "858720",
    "end": "860079"
  },
  {
    "text": "is actually inside a function and it's",
    "start": "860079",
    "end": "861760"
  },
  {
    "text": "just been returned by the function so we",
    "start": "861760",
    "end": "863519"
  },
  {
    "text": "can use these",
    "start": "863519",
    "end": "864560"
  },
  {
    "text": "anywhere where we need an expression so",
    "start": "864560",
    "end": "866639"
  },
  {
    "text": "in a return statement here",
    "start": "866639",
    "end": "868000"
  },
  {
    "text": "and an assignment passed into a function",
    "start": "868000",
    "end": "870000"
  },
  {
    "text": "returned out of a function",
    "start": "870000",
    "end": "871360"
  },
  {
    "text": "um and it's a bit jarring the first time",
    "start": "871360",
    "end": "873600"
  },
  {
    "text": "you see it or certainly was for me",
    "start": "873600",
    "end": "875279"
  },
  {
    "text": "but then when you see the translation",
    "start": "875279",
    "end": "876639"
  },
  {
    "text": "the translation from this into",
    "start": "876639",
    "end": "878480"
  },
  {
    "text": "a function call is is actually very very",
    "start": "878480",
    "end": "880639"
  },
  {
    "text": "trivial and it's just a very elegant way",
    "start": "880639",
    "end": "882959"
  },
  {
    "text": "of defining these structures um in a",
    "start": "882959",
    "end": "886079"
  },
  {
    "text": "sort of very succinct syntax and if",
    "start": "886079",
    "end": "887519"
  },
  {
    "text": "you're working with designers",
    "start": "887519",
    "end": "888959"
  },
  {
    "text": "and people who are you know building",
    "start": "888959",
    "end": "890560"
  },
  {
    "text": "html and css for a living",
    "start": "890560",
    "end": "892399"
  },
  {
    "text": "um the the the reuse there and the",
    "start": "892399",
    "end": "895279"
  },
  {
    "text": "accessibility is is quite high",
    "start": "895279",
    "end": "897199"
  },
  {
    "text": "so this is a really nice way of building",
    "start": "897199",
    "end": "899040"
  },
  {
    "text": "uis and the fact that you can",
    "start": "899040",
    "end": "900560"
  },
  {
    "text": "interleave code and ui building is just",
    "start": "900560",
    "end": "903519"
  },
  {
    "text": "a nice solution",
    "start": "903519",
    "end": "905360"
  },
  {
    "text": "but this is what it looks like in kotlin",
    "start": "905360",
    "end": "906880"
  },
  {
    "text": "js and you know",
    "start": "906880",
    "end": "909040"
  },
  {
    "text": "it's not you know you can see the",
    "start": "909040",
    "end": "911600"
  },
  {
    "text": "structure here",
    "start": "911600",
    "end": "912560"
  },
  {
    "text": "and this is actually very very cool",
    "start": "912560",
    "end": "915040"
  },
  {
    "text": "feature of kotlin js the fact that we",
    "start": "915040",
    "end": "916560"
  },
  {
    "text": "can do this",
    "start": "916560",
    "end": "917440"
  },
  {
    "text": "this is not built specifically for react",
    "start": "917440",
    "end": "920160"
  },
  {
    "text": "this is just",
    "start": "920160",
    "end": "920880"
  },
  {
    "text": "built using core functionality within",
    "start": "920880",
    "end": "923199"
  },
  {
    "text": "the kotlin language so the kotlin",
    "start": "923199",
    "end": "924399"
  },
  {
    "text": "language",
    "start": "924399",
    "end": "925040"
  },
  {
    "text": "allows us to build domain specific",
    "start": "925040",
    "end": "927440"
  },
  {
    "text": "languages",
    "start": "927440",
    "end": "928079"
  },
  {
    "text": "for for any domain uh the gradle dsl is",
    "start": "928079",
    "end": "930720"
  },
  {
    "text": "an example",
    "start": "930720",
    "end": "931440"
  },
  {
    "text": "this is a react version okay so the fact",
    "start": "931440",
    "end": "933600"
  },
  {
    "text": "that we can do this at all",
    "start": "933600",
    "end": "934880"
  },
  {
    "text": "is really really impressive and a",
    "start": "934880",
    "end": "936320"
  },
  {
    "text": "testament to the language it uses a few",
    "start": "936320",
    "end": "938399"
  },
  {
    "text": "features of the language so",
    "start": "938399",
    "end": "940320"
  },
  {
    "text": "we're using the fact that this is uh we",
    "start": "940320",
    "end": "942480"
  },
  {
    "text": "can build extension functions",
    "start": "942480",
    "end": "943920"
  },
  {
    "text": "or extension methods so these allow us",
    "start": "943920",
    "end": "945920"
  },
  {
    "text": "to augment",
    "start": "945920",
    "end": "947040"
  },
  {
    "text": "types that we can't or or don't want to",
    "start": "947040",
    "end": "950000"
  },
  {
    "text": "uh",
    "start": "950000",
    "end": "950959"
  },
  {
    "text": "manually change so here we're basically",
    "start": "950959",
    "end": "953440"
  },
  {
    "text": "creating a div",
    "start": "953440",
    "end": "954160"
  },
  {
    "text": "function that can be operated upon like",
    "start": "954160",
    "end": "956399"
  },
  {
    "text": "a method on any r",
    "start": "956399",
    "end": "958079"
  },
  {
    "text": "builder okay uh we also have optional",
    "start": "958079",
    "end": "960560"
  },
  {
    "text": "parameters and",
    "start": "960560",
    "end": "961600"
  },
  {
    "text": "here we're providing a default value and",
    "start": "961600",
    "end": "963759"
  },
  {
    "text": "we can have lambdas",
    "start": "963759",
    "end": "965360"
  },
  {
    "text": "uh been passed around and when the",
    "start": "965360",
    "end": "967360"
  },
  {
    "text": "lambda is the last parameter",
    "start": "967360",
    "end": "969199"
  },
  {
    "text": "you can put the lambda outside of the",
    "start": "969199",
    "end": "971440"
  },
  {
    "text": "function and if the function has no",
    "start": "971440",
    "end": "973519"
  },
  {
    "text": "other parameters",
    "start": "973519",
    "end": "974880"
  },
  {
    "text": "then you can leave out the brackets and",
    "start": "974880",
    "end": "976800"
  },
  {
    "text": "that's what allows us",
    "start": "976800",
    "end": "978000"
  },
  {
    "text": "to create this structure down here where",
    "start": "978000",
    "end": "979519"
  },
  {
    "text": "we have a div with just braces it looks",
    "start": "979519",
    "end": "981600"
  },
  {
    "text": "sort of like",
    "start": "981600",
    "end": "982720"
  },
  {
    "text": "a keyword of the language or a feature",
    "start": "982720",
    "end": "984639"
  },
  {
    "text": "of the language but it's not it's just a",
    "start": "984639",
    "end": "986480"
  },
  {
    "text": "normal",
    "start": "986480",
    "end": "987360"
  },
  {
    "text": "function call that happens to take a",
    "start": "987360",
    "end": "989040"
  },
  {
    "text": "parameter which it's which is a lambda",
    "start": "989040",
    "end": "991759"
  },
  {
    "text": "and the lambda actually goes further the",
    "start": "991759",
    "end": "993519"
  },
  {
    "text": "lambda actually is a lambda with",
    "start": "993519",
    "end": "994800"
  },
  {
    "text": "receiver",
    "start": "994800",
    "end": "995600"
  },
  {
    "text": "which is this dot syntax that precedes",
    "start": "995600",
    "end": "998079"
  },
  {
    "text": "it here",
    "start": "998079",
    "end": "998639"
  },
  {
    "text": "and what that does is that when the",
    "start": "998639",
    "end": "1000240"
  },
  {
    "text": "function the lambda is invoked",
    "start": "1000240",
    "end": "1002720"
  },
  {
    "text": "it will have as its context or it's this",
    "start": "1002720",
    "end": "1005839"
  },
  {
    "text": "another r builder object so the fact",
    "start": "1005839",
    "end": "1008480"
  },
  {
    "text": "that div",
    "start": "1008480",
    "end": "1009199"
  },
  {
    "text": "is an extension on our builder and",
    "start": "1009199",
    "end": "1011279"
  },
  {
    "text": "inside this lambda",
    "start": "1011279",
    "end": "1012800"
  },
  {
    "text": "that this context is going to be in our",
    "start": "1012800",
    "end": "1015279"
  },
  {
    "text": "builder",
    "start": "1015279",
    "end": "1015920"
  },
  {
    "text": "it means that we can build these tree",
    "start": "1015920",
    "end": "1017519"
  },
  {
    "text": "structures which is why we can build",
    "start": "1017519",
    "end": "1019440"
  },
  {
    "text": "this nasa structure",
    "start": "1019440",
    "end": "1020639"
  },
  {
    "text": "label input all of these are extensions",
    "start": "1020639",
    "end": "1023759"
  },
  {
    "text": "on that r builder and they're really",
    "start": "1023759",
    "end": "1026160"
  },
  {
    "text": "they're they're really calling",
    "start": "1026160",
    "end": "1027120"
  },
  {
    "text": "this.label and this that input",
    "start": "1027120",
    "end": "1029120"
  },
  {
    "text": "uh but again all built using core",
    "start": "1029120",
    "end": "1031199"
  },
  {
    "text": "features of the language",
    "start": "1031199",
    "end": "1032160"
  },
  {
    "text": "and you can build them in specific",
    "start": "1032160",
    "end": "1033438"
  },
  {
    "text": "languages for anything you want so this",
    "start": "1033439",
    "end": "1035360"
  },
  {
    "text": "is this is really really cool",
    "start": "1035360",
    "end": "1037038"
  },
  {
    "text": "but if we sort of look a wee bit deeper",
    "start": "1037039",
    "end": "1038640"
  },
  {
    "text": "and we sort of compare it",
    "start": "1038640",
    "end": "1040400"
  },
  {
    "text": "maybe unfairly to jsx there are some",
    "start": "1040400",
    "end": "1043120"
  },
  {
    "text": "issues",
    "start": "1043120",
    "end": "1043678"
  },
  {
    "text": "they're a bit cumbersome here benedict",
    "start": "1043679",
    "end": "1045438"
  },
  {
    "text": "cumberbatch stand there a bit cumbersome",
    "start": "1045439",
    "end": "1047360"
  },
  {
    "text": "here",
    "start": "1047360",
    "end": "1047839"
  },
  {
    "text": "uh where you have to use uh operator",
    "start": "1047839",
    "end": "1050400"
  },
  {
    "text": "overloads to try and keep this the",
    "start": "1050400",
    "end": "1051760"
  },
  {
    "text": "syntax to sync",
    "start": "1051760",
    "end": "1052880"
  },
  {
    "text": "but attach content to our elements which",
    "start": "1052880",
    "end": "1055280"
  },
  {
    "text": "just looks a wee bit clunky",
    "start": "1055280",
    "end": "1057600"
  },
  {
    "text": "uh to have a flexible list of attributes",
    "start": "1057600",
    "end": "1059840"
  },
  {
    "text": "we have to nest them inside this otters",
    "start": "1059840",
    "end": "1061840"
  },
  {
    "text": "block",
    "start": "1061840",
    "end": "1062320"
  },
  {
    "text": "which again is a little bit clunky uh we",
    "start": "1062320",
    "end": "1065039"
  },
  {
    "text": "have to put in that extension method",
    "start": "1065039",
    "end": "1066880"
  },
  {
    "text": "syntax",
    "start": "1066880",
    "end": "1067679"
  },
  {
    "text": "while in jsx and typescript you just",
    "start": "1067679",
    "end": "1070320"
  },
  {
    "text": "create functions",
    "start": "1070320",
    "end": "1071200"
  },
  {
    "text": "and that's it as long as it is a capital",
    "start": "1071200",
    "end": "1072720"
  },
  {
    "text": "letter uh you're you're good",
    "start": "1072720",
    "end": "1074720"
  },
  {
    "text": "uh so that's a little bit clunky but the",
    "start": "1074720",
    "end": "1076559"
  },
  {
    "text": "main one that i want to focus on",
    "start": "1076559",
    "end": "1078240"
  },
  {
    "text": "is the types of of some of these",
    "start": "1078240",
    "end": "1079760"
  },
  {
    "text": "attributes here so if we look at this",
    "start": "1079760",
    "end": "1081120"
  },
  {
    "text": "input",
    "start": "1081120",
    "end": "1081679"
  },
  {
    "text": "uh what i'd really like to do is pass in",
    "start": "1081679",
    "end": "1083440"
  },
  {
    "text": "min and max as values here",
    "start": "1083440",
    "end": "1085039"
  },
  {
    "text": "and if you look at the actual value i'm",
    "start": "1085039",
    "end": "1086559"
  },
  {
    "text": "taking a number and i'm actually having",
    "start": "1086559",
    "end": "1088160"
  },
  {
    "text": "to do a two string on it",
    "start": "1088160",
    "end": "1089760"
  },
  {
    "text": "and this is really because kotlin",
    "start": "1089760",
    "end": "1091120"
  },
  {
    "text": "doesn't have type unions or type",
    "start": "1091120",
    "end": "1093600"
  },
  {
    "text": "intersections okay",
    "start": "1093600",
    "end": "1094880"
  },
  {
    "text": "so the typescript system is geared",
    "start": "1094880",
    "end": "1096720"
  },
  {
    "text": "towards interopering",
    "start": "1096720",
    "end": "1098240"
  },
  {
    "text": "with javascript and it has a feature of",
    "start": "1098240",
    "end": "1100480"
  },
  {
    "text": "what a lot of functional languages have",
    "start": "1100480",
    "end": "1102080"
  },
  {
    "text": "before we can have",
    "start": "1102080",
    "end": "1102880"
  },
  {
    "text": "algebraic data types so min and max here",
    "start": "1102880",
    "end": "1105360"
  },
  {
    "text": "can be a number",
    "start": "1105360",
    "end": "1106320"
  },
  {
    "text": "or a string it can be either one and the",
    "start": "1106320",
    "end": "1108320"
  },
  {
    "text": "type system will keep you safe it will",
    "start": "1108320",
    "end": "1109760"
  },
  {
    "text": "make sure that it'll only let you do",
    "start": "1109760",
    "end": "1111039"
  },
  {
    "text": "numbers",
    "start": "1111039",
    "end": "1111679"
  },
  {
    "text": "number of things when you've made sure",
    "start": "1111679",
    "end": "1113280"
  },
  {
    "text": "it's a number and it'll only let you do",
    "start": "1113280",
    "end": "1114799"
  },
  {
    "text": "string things",
    "start": "1114799",
    "end": "1115679"
  },
  {
    "text": "when you've made sure it's a string so",
    "start": "1115679",
    "end": "1117360"
  },
  {
    "text": "you have type safety but also there's",
    "start": "1117360",
    "end": "1119039"
  },
  {
    "text": "flexibility which works well with the",
    "start": "1119039",
    "end": "1121039"
  },
  {
    "text": "javascripts",
    "start": "1121039",
    "end": "1122000"
  },
  {
    "text": "uh let's say freer uh uh sort of syntax",
    "start": "1122000",
    "end": "1125360"
  },
  {
    "text": "um and you can see value is even more",
    "start": "1125360",
    "end": "1127760"
  },
  {
    "text": "complicated it's a string or an array of",
    "start": "1127760",
    "end": "1129600"
  },
  {
    "text": "string",
    "start": "1129600",
    "end": "1130160"
  },
  {
    "text": "or a number and you do more things with",
    "start": "1130160",
    "end": "1132480"
  },
  {
    "text": "typescript you can create intersections",
    "start": "1132480",
    "end": "1134080"
  },
  {
    "text": "on the fly",
    "start": "1134080",
    "end": "1134799"
  },
  {
    "text": "so this is taking a type p and merging",
    "start": "1134799",
    "end": "1137280"
  },
  {
    "text": "it with another type that has a children",
    "start": "1137280",
    "end": "1138880"
  },
  {
    "text": "field",
    "start": "1138880",
    "end": "1139280"
  },
  {
    "text": "so it's basically allowing us to",
    "start": "1139280",
    "end": "1141400"
  },
  {
    "text": "programmatically create",
    "start": "1141400",
    "end": "1143039"
  },
  {
    "text": "types and this is really really powerful",
    "start": "1143039",
    "end": "1145679"
  },
  {
    "text": "library",
    "start": "1145679",
    "end": "1146240"
  },
  {
    "text": "writers can can use this really really",
    "start": "1146240",
    "end": "1148160"
  },
  {
    "text": "effectively to keep you safe",
    "start": "1148160",
    "end": "1150160"
  },
  {
    "text": "but also provide flexibility and you can",
    "start": "1150160",
    "end": "1152240"
  },
  {
    "text": "use this in your own code to remove a",
    "start": "1152240",
    "end": "1153919"
  },
  {
    "text": "lot of code redundancy",
    "start": "1153919",
    "end": "1155280"
  },
  {
    "text": "because you can generate types from",
    "start": "1155280",
    "end": "1157039"
  },
  {
    "text": "other types so it's really really",
    "start": "1157039",
    "end": "1158400"
  },
  {
    "text": "powerful if we look at",
    "start": "1158400",
    "end": "1159679"
  },
  {
    "text": "what ducat does as a first pass of of uh",
    "start": "1159679",
    "end": "1163919"
  },
  {
    "text": "trying to",
    "start": "1163919",
    "end": "1164880"
  },
  {
    "text": "adapt to this um we get a mixed bag for",
    "start": "1164880",
    "end": "1167600"
  },
  {
    "text": "the union",
    "start": "1167600",
    "end": "1168400"
  },
  {
    "text": "it's not too bad we've got a first or",
    "start": "1168400",
    "end": "1170320"
  },
  {
    "text": "second type here",
    "start": "1170320",
    "end": "1171520"
  },
  {
    "text": "okay and that's been passed as an input",
    "start": "1171520",
    "end": "1173919"
  },
  {
    "text": "amazon output to these functions",
    "start": "1173919",
    "end": "1175840"
  },
  {
    "text": "the input is fine it does function",
    "start": "1175840",
    "end": "1178000"
  },
  {
    "text": "overloads and this is actually",
    "start": "1178000",
    "end": "1179200"
  },
  {
    "text": "an another plus for kotlin and that it",
    "start": "1179200",
    "end": "1182400"
  },
  {
    "text": "supports",
    "start": "1182400",
    "end": "1183200"
  },
  {
    "text": "true overloads while typescript only has",
    "start": "1183200",
    "end": "1185520"
  },
  {
    "text": "like pseudo",
    "start": "1185520",
    "end": "1186320"
  },
  {
    "text": "overloads so that works quite well but",
    "start": "1186320",
    "end": "1188320"
  },
  {
    "text": "in the output",
    "start": "1188320",
    "end": "1190000"
  },
  {
    "text": "we've got a problem because we can't",
    "start": "1190000",
    "end": "1191440"
  },
  {
    "text": "represent both types coming out",
    "start": "1191440",
    "end": "1193360"
  },
  {
    "text": "so we have to do it as a dynamic here",
    "start": "1193360",
    "end": "1196000"
  },
  {
    "text": "which is a bit of a being",
    "start": "1196000",
    "end": "1197200"
  },
  {
    "text": "if we look at the intersection we've",
    "start": "1197200",
    "end": "1199039"
  },
  {
    "text": "again got a problem",
    "start": "1199039",
    "end": "1200640"
  },
  {
    "text": "we've got first and second but what we",
    "start": "1200640",
    "end": "1203919"
  },
  {
    "text": "compute here or what we generate out is",
    "start": "1203919",
    "end": "1206240"
  },
  {
    "text": "just first so we lose all of that second",
    "start": "1206240",
    "end": "1208799"
  },
  {
    "text": "type definition which is which is a bit",
    "start": "1208799",
    "end": "1210640"
  },
  {
    "text": "of a pain um",
    "start": "1210640",
    "end": "1212880"
  },
  {
    "text": "we see this in some of the wrappers that",
    "start": "1212880",
    "end": "1214640"
  },
  {
    "text": "you can work around it so",
    "start": "1214640",
    "end": "1216320"
  },
  {
    "text": "in use effect hook here there's there's",
    "start": "1216320",
    "end": "1218640"
  },
  {
    "text": "a union inside this type definition",
    "start": "1218640",
    "end": "1220960"
  },
  {
    "text": "when you're using it in typescript uh to",
    "start": "1220960",
    "end": "1223520"
  },
  {
    "text": "work around that",
    "start": "1223520",
    "end": "1224640"
  },
  {
    "text": "what they've done when they've wrapped",
    "start": "1224640",
    "end": "1225679"
  },
  {
    "text": "it up is bc created two functions so",
    "start": "1225679",
    "end": "1227440"
  },
  {
    "text": "there's a use effect and a",
    "start": "1227440",
    "end": "1228880"
  },
  {
    "text": "separate function use effector cleanup",
    "start": "1228880",
    "end": "1230640"
  },
  {
    "text": "and that's handled by one function in",
    "start": "1230640",
    "end": "1232559"
  },
  {
    "text": "javascript",
    "start": "1232559",
    "end": "1233440"
  },
  {
    "text": "ultimately and it can be handled by",
    "start": "1233440",
    "end": "1236480"
  },
  {
    "text": "one function in typescript using its",
    "start": "1236480",
    "end": "1238400"
  },
  {
    "text": "advanced type system",
    "start": "1238400",
    "end": "1239520"
  },
  {
    "text": "and the typescript can do more i mean",
    "start": "1239520",
    "end": "1241280"
  },
  {
    "text": "garth ready talked a little bit",
    "start": "1241280",
    "end": "1242799"
  },
  {
    "text": "about map types which we're not going to",
    "start": "1242799",
    "end": "1244720"
  },
  {
    "text": "go into conditionals which allow you to",
    "start": "1244720",
    "end": "1247280"
  },
  {
    "text": "choose",
    "start": "1247280",
    "end": "1248080"
  },
  {
    "text": "uh between two types based on some other",
    "start": "1248080",
    "end": "1251280"
  },
  {
    "text": "type conditions that you can do and",
    "start": "1251280",
    "end": "1252960"
  },
  {
    "text": "these things are really really really",
    "start": "1252960",
    "end": "1254640"
  },
  {
    "text": "really powerful and the type system is",
    "start": "1254640",
    "end": "1256480"
  },
  {
    "text": "getting more and more powerful with",
    "start": "1256480",
    "end": "1257600"
  },
  {
    "text": "every lease in fact",
    "start": "1257600",
    "end": "1259440"
  },
  {
    "text": "so you know if i compare the jsx to dsl",
    "start": "1259440",
    "end": "1262240"
  },
  {
    "text": "and just look at it just as that",
    "start": "1262240",
    "end": "1263840"
  },
  {
    "text": "uh argument the kotlin is more flexible",
    "start": "1263840",
    "end": "1266400"
  },
  {
    "text": "um and you can use it for more things",
    "start": "1266400",
    "end": "1268640"
  },
  {
    "text": "but the jsx is just a more elegant",
    "start": "1268640",
    "end": "1270240"
  },
  {
    "text": "solution for building react",
    "start": "1270240",
    "end": "1271760"
  },
  {
    "text": "and typescript's advanced type system is",
    "start": "1271760",
    "end": "1274000"
  },
  {
    "text": "really powerful",
    "start": "1274000",
    "end": "1274880"
  },
  {
    "text": "and useful in lots of other scenarios",
    "start": "1274880",
    "end": "1276960"
  },
  {
    "text": "outside of react and",
    "start": "1276960",
    "end": "1278240"
  },
  {
    "text": "outside of jsx and i do miss it when i",
    "start": "1278240",
    "end": "1280799"
  },
  {
    "text": "go to languages that don't have it",
    "start": "1280799",
    "end": "1282559"
  },
  {
    "text": "it's brilliant for removing redundancy",
    "start": "1282559",
    "end": "1284400"
  },
  {
    "text": "but retaining",
    "start": "1284400",
    "end": "1285840"
  },
  {
    "text": "safety and programmatically generating",
    "start": "1285840",
    "end": "1288840"
  },
  {
    "text": "types",
    "start": "1288840",
    "end": "1290880"
  },
  {
    "start": "1290000",
    "end": "1383000"
  },
  {
    "text": "cool so uh if we go on to uh to round",
    "start": "1290880",
    "end": "1293760"
  },
  {
    "text": "four and let's talk about concurrency",
    "start": "1293760",
    "end": "1295919"
  },
  {
    "text": "so of course javascript and typescript",
    "start": "1295919",
    "end": "1297919"
  },
  {
    "text": "are extremely strong here because they",
    "start": "1297919",
    "end": "1299760"
  },
  {
    "text": "have the async and await keywords so we",
    "start": "1299760",
    "end": "1301919"
  },
  {
    "text": "can declare a function as being async",
    "start": "1301919",
    "end": "1304000"
  },
  {
    "text": "and then we can await the result of a",
    "start": "1304000",
    "end": "1305679"
  },
  {
    "text": "function that returns a promise",
    "start": "1305679",
    "end": "1307280"
  },
  {
    "text": "and that makes it much easier to work",
    "start": "1307280",
    "end": "1309520"
  },
  {
    "text": "with asynchronous concurrent code and so",
    "start": "1309520",
    "end": "1311679"
  },
  {
    "text": "on",
    "start": "1311679",
    "end": "1312320"
  },
  {
    "text": "however yeah kotlin has co",
    "start": "1312320",
    "end": "1315360"
  },
  {
    "text": "routines in the suspend keyword and this",
    "start": "1315360",
    "end": "1317440"
  },
  {
    "text": "is even more powerful",
    "start": "1317440",
    "end": "1318880"
  },
  {
    "text": "so we can declare a function as being a",
    "start": "1318880",
    "end": "1321200"
  },
  {
    "text": "suspending function",
    "start": "1321200",
    "end": "1322480"
  },
  {
    "text": "and then you can see there if we're",
    "start": "1322480",
    "end": "1323760"
  },
  {
    "text": "calling into like javascript we can just",
    "start": "1323760",
    "end": "1326080"
  },
  {
    "text": "do the await",
    "start": "1326080",
    "end": "1327200"
  },
  {
    "text": "but let's say we've got one suspending",
    "start": "1327200",
    "end": "1329200"
  },
  {
    "text": "function calling into another",
    "start": "1329200",
    "end": "1330880"
  },
  {
    "text": "well then uh we don't need that await",
    "start": "1330880",
    "end": "1333120"
  },
  {
    "text": "keyword at all it's just uh",
    "start": "1333120",
    "end": "1334880"
  },
  {
    "text": "all handled automatically for us yeah so",
    "start": "1334880",
    "end": "1338000"
  },
  {
    "text": "uh you see here what we're doing is",
    "start": "1338000",
    "end": "1340159"
  },
  {
    "text": "we've got a suspending function called",
    "start": "1340159",
    "end": "1341919"
  },
  {
    "text": "loadmap and then we're saying client.get",
    "start": "1341919",
    "end": "1344400"
  },
  {
    "text": "and that called a client dot get that",
    "start": "1344400",
    "end": "1347039"
  },
  {
    "text": "actually comes from the http client",
    "start": "1347039",
    "end": "1349360"
  },
  {
    "text": "provided by ktor yeah the",
    "start": "1349360",
    "end": "1351520"
  },
  {
    "text": "the kotlin micro services framework so",
    "start": "1351520",
    "end": "1353919"
  },
  {
    "text": "that's um",
    "start": "1353919",
    "end": "1354640"
  },
  {
    "text": "another suspending function yeah so if",
    "start": "1354640",
    "end": "1356960"
  },
  {
    "text": "you like the uh",
    "start": "1356960",
    "end": "1357919"
  },
  {
    "text": "the awaiting is automatic as you can",
    "start": "1357919",
    "end": "1359840"
  },
  {
    "text": "tell from the uh the little arrow that",
    "start": "1359840",
    "end": "1361919"
  },
  {
    "text": "intellij",
    "start": "1361919",
    "end": "1362559"
  },
  {
    "text": "puts on the the left-hand side there and",
    "start": "1362559",
    "end": "1365440"
  },
  {
    "text": "what you're actually doing",
    "start": "1365440",
    "end": "1366640"
  },
  {
    "text": "is you're creating a new routing and uh",
    "start": "1366640",
    "end": "1369200"
  },
  {
    "text": "that that opens the door to all kinds of",
    "start": "1369200",
    "end": "1371440"
  },
  {
    "text": "incredible possibilities",
    "start": "1371440",
    "end": "1372960"
  },
  {
    "text": "which we don't have time to talk about",
    "start": "1372960",
    "end": "1374480"
  },
  {
    "text": "at the moment but suffice to say that's",
    "start": "1374480",
    "end": "1376159"
  },
  {
    "text": "a",
    "start": "1376159",
    "end": "1376400"
  },
  {
    "text": "that's a massive expansion point you can",
    "start": "1376400",
    "end": "1378480"
  },
  {
    "text": "do a lot more there than just basic",
    "start": "1378480",
    "end": "1380320"
  },
  {
    "text": "concurrence",
    "start": "1380320",
    "end": "1382400"
  },
  {
    "text": "cool uh so then uh round five uh let's",
    "start": "1382400",
    "end": "1385200"
  },
  {
    "start": "1383000",
    "end": "1552000"
  },
  {
    "text": "just talk about the elegance of the",
    "start": "1385200",
    "end": "1387039"
  },
  {
    "text": "syntax and how much fun they are to use",
    "start": "1387039",
    "end": "1389440"
  },
  {
    "text": "okay uh so um kotlin has a really strong",
    "start": "1389440",
    "end": "1393600"
  },
  {
    "text": "story here",
    "start": "1393600",
    "end": "1394559"
  },
  {
    "text": "because um in kotlin more things are",
    "start": "1394559",
    "end": "1397600"
  },
  {
    "text": "expressions okay so the if and the when",
    "start": "1397600",
    "end": "1399840"
  },
  {
    "text": "these are expressions they actually",
    "start": "1399840",
    "end": "1401440"
  },
  {
    "text": "return things",
    "start": "1401440",
    "end": "1402799"
  },
  {
    "text": "you do to void you have unit which is",
    "start": "1402799",
    "end": "1404720"
  },
  {
    "text": "much nicer you have",
    "start": "1404720",
    "end": "1406320"
  },
  {
    "text": "expression bodied functions uh you know",
    "start": "1406320",
    "end": "1408559"
  },
  {
    "text": "that this creates just",
    "start": "1408559",
    "end": "1410000"
  },
  {
    "text": "nicer code at the end of the day so if",
    "start": "1410000",
    "end": "1412320"
  },
  {
    "text": "we take an example here",
    "start": "1412320",
    "end": "1414080"
  },
  {
    "text": "let's say you're doing jsx one of the",
    "start": "1414080",
    "end": "1416640"
  },
  {
    "text": "things you have to learn",
    "start": "1416640",
    "end": "1417679"
  },
  {
    "text": "very on when you start doing jsx is uh",
    "start": "1417679",
    "end": "1420480"
  },
  {
    "text": "you can't do ifs",
    "start": "1420480",
    "end": "1421679"
  },
  {
    "text": "you can't do switches you can't do loops",
    "start": "1421679",
    "end": "1423919"
  },
  {
    "text": "you know because those things aren't",
    "start": "1423919",
    "end": "1425679"
  },
  {
    "text": "expressions",
    "start": "1425679",
    "end": "1426400"
  },
  {
    "text": "yeah so uh if you want to do",
    "start": "1426400",
    "end": "1428320"
  },
  {
    "text": "conditionals you have to use",
    "start": "1428320",
    "end": "1430000"
  },
  {
    "text": "the uh the ternary conditional operator",
    "start": "1430000",
    "end": "1432159"
  },
  {
    "text": "the question mark conditional",
    "start": "1432159",
    "end": "1433679"
  },
  {
    "text": "and kind of chain it like this yeah if",
    "start": "1433679",
    "end": "1436000"
  },
  {
    "text": "you want to do iteration",
    "start": "1436000",
    "end": "1437520"
  },
  {
    "text": "well then you have to do it through your",
    "start": "1437520",
    "end": "1439120"
  },
  {
    "text": "functional programming constructs",
    "start": "1439120",
    "end": "1440960"
  },
  {
    "text": "through your maps and your filters and",
    "start": "1440960",
    "end": "1442640"
  },
  {
    "text": "so on so that's that",
    "start": "1442640",
    "end": "1443760"
  },
  {
    "text": "that's a pain point yeah whereas if you",
    "start": "1443760",
    "end": "1445919"
  },
  {
    "text": "think about kotlin",
    "start": "1445919",
    "end": "1446960"
  },
  {
    "text": "well uh you see here we're using uh when",
    "start": "1446960",
    "end": "1449600"
  },
  {
    "text": "within the dsl",
    "start": "1449600",
    "end": "1450960"
  },
  {
    "text": "and that we can do that because when is",
    "start": "1450960",
    "end": "1453120"
  },
  {
    "text": "an expression you know they",
    "start": "1453120",
    "end": "1454480"
  },
  {
    "text": "the when statement is going to return",
    "start": "1454480",
    "end": "1456640"
  },
  {
    "text": "something so the the resulting code is",
    "start": "1456640",
    "end": "1459120"
  },
  {
    "text": "simpler it's more symmetrical",
    "start": "1459120",
    "end": "1460880"
  },
  {
    "text": "it's nicer you know so there's a there's",
    "start": "1460880",
    "end": "1462720"
  },
  {
    "text": "a win for kotlin there",
    "start": "1462720",
    "end": "1465039"
  },
  {
    "text": "um but it doesn't all go kotlin's way i",
    "start": "1465039",
    "end": "1467039"
  },
  {
    "text": "mean both typescript and kotlin support",
    "start": "1467039",
    "end": "1469360"
  },
  {
    "text": "destructuring and this is wonderful okay",
    "start": "1469360",
    "end": "1472159"
  },
  {
    "text": "it's one of these things that you know",
    "start": "1472159",
    "end": "1473520"
  },
  {
    "text": "once you've used it a little bit you get",
    "start": "1473520",
    "end": "1475440"
  },
  {
    "text": "really angry if a language doesn't",
    "start": "1475440",
    "end": "1477120"
  },
  {
    "text": "support it so",
    "start": "1477120",
    "end": "1478159"
  },
  {
    "text": "destructuring is just the ability to go",
    "start": "1478159",
    "end": "1480559"
  },
  {
    "text": "to an array or list and say i want the",
    "start": "1480559",
    "end": "1482320"
  },
  {
    "text": "first three things and just those",
    "start": "1482320",
    "end": "1484000"
  },
  {
    "text": "or to go to an object and say okay i",
    "start": "1484000",
    "end": "1486559"
  },
  {
    "text": "want the properties called fubar zed and",
    "start": "1486559",
    "end": "1488799"
  },
  {
    "text": "none of the other dozen properties and",
    "start": "1488799",
    "end": "1490559"
  },
  {
    "text": "so on",
    "start": "1490559",
    "end": "1491360"
  },
  {
    "text": "so kotlin supports this but you kind of",
    "start": "1491360",
    "end": "1493760"
  },
  {
    "text": "have to ask for it you know it's",
    "start": "1493760",
    "end": "1495360"
  },
  {
    "text": "implemented through",
    "start": "1495360",
    "end": "1496480"
  },
  {
    "text": "uh what are called component n methods",
    "start": "1496480",
    "end": "1498720"
  },
  {
    "text": "so yeah you get it for free if you",
    "start": "1498720",
    "end": "1500240"
  },
  {
    "text": "declare a class as a data class but you",
    "start": "1500240",
    "end": "1502159"
  },
  {
    "text": "have to",
    "start": "1502159",
    "end": "1502720"
  },
  {
    "text": "do that declaration and so on whereas in",
    "start": "1502720",
    "end": "1505360"
  },
  {
    "text": "typescript",
    "start": "1505360",
    "end": "1506320"
  },
  {
    "text": "it's just there you know so we can do it",
    "start": "1506320",
    "end": "1508640"
  },
  {
    "text": "with any object",
    "start": "1508640",
    "end": "1509919"
  },
  {
    "text": "yeah so you see here i can say const",
    "start": "1509919",
    "end": "1512000"
  },
  {
    "text": "value color equals brick",
    "start": "1512000",
    "end": "1513520"
  },
  {
    "text": "so i want to go to the brick object and",
    "start": "1513520",
    "end": "1515440"
  },
  {
    "text": "just lift out",
    "start": "1515440",
    "end": "1516720"
  },
  {
    "text": "the values of those two properties and",
    "start": "1516720",
    "end": "1518640"
  },
  {
    "text": "store them in variables of the same name",
    "start": "1518640",
    "end": "1521120"
  },
  {
    "text": "and you can do it on parameters which is",
    "start": "1521120",
    "end": "1524640"
  },
  {
    "text": "absolutely wonderful you know so let's",
    "start": "1524640",
    "end": "1526640"
  },
  {
    "text": "say it's a complex",
    "start": "1526640",
    "end": "1527840"
  },
  {
    "text": "object that's being passed in but for",
    "start": "1527840",
    "end": "1530080"
  },
  {
    "text": "the purposes of the function or arrow",
    "start": "1530080",
    "end": "1531919"
  },
  {
    "text": "we only need three things from it so you",
    "start": "1531919",
    "end": "1534000"
  },
  {
    "text": "can do destructuring",
    "start": "1534000",
    "end": "1535360"
  },
  {
    "text": "in your parameter lists which looks",
    "start": "1535360",
    "end": "1537360"
  },
  {
    "text": "really weird the first time you see it",
    "start": "1537360",
    "end": "1539039"
  },
  {
    "text": "but very soon it becomes you know",
    "start": "1539039",
    "end": "1540720"
  },
  {
    "text": "addictive it's really really useful",
    "start": "1540720",
    "end": "1542720"
  },
  {
    "text": "and uh it's incredibly powerful with",
    "start": "1542720",
    "end": "1545039"
  },
  {
    "text": "arrays and data structures and so on you",
    "start": "1545039",
    "end": "1547360"
  },
  {
    "text": "know so yes they both have it",
    "start": "1547360",
    "end": "1549120"
  },
  {
    "text": "but it's a lot more flexible in in",
    "start": "1549120",
    "end": "1551279"
  },
  {
    "text": "typescript",
    "start": "1551279",
    "end": "1553600"
  },
  {
    "start": "1552000",
    "end": "1691000"
  },
  {
    "text": "cool so what's what's our conclusion",
    "start": "1553600",
    "end": "1556640"
  },
  {
    "text": "um they're both really really good but",
    "start": "1556640",
    "end": "1559679"
  },
  {
    "text": "in different ways",
    "start": "1559679",
    "end": "1560880"
  },
  {
    "text": "okay they both are excellent languages",
    "start": "1560880",
    "end": "1563279"
  },
  {
    "text": "and kotlin js as an offering in the",
    "start": "1563279",
    "end": "1564960"
  },
  {
    "text": "javascript spaces is actually very very",
    "start": "1564960",
    "end": "1566880"
  },
  {
    "text": "good",
    "start": "1566880",
    "end": "1567360"
  },
  {
    "text": "this whole talk is from a obviously",
    "start": "1567360",
    "end": "1569279"
  },
  {
    "text": "longer talk and we've we've cut it down",
    "start": "1569279",
    "end": "1571360"
  },
  {
    "text": "but like it was just tit for tat in",
    "start": "1571360",
    "end": "1573360"
  },
  {
    "text": "terms of who was winning",
    "start": "1573360",
    "end": "1574960"
  },
  {
    "text": "uh when we looked at different aspects",
    "start": "1574960",
    "end": "1576720"
  },
  {
    "text": "and you could with them differently and",
    "start": "1576720",
    "end": "1577840"
  },
  {
    "text": "your mileage will vary",
    "start": "1577840",
    "end": "1578960"
  },
  {
    "text": "depending on the kinds of applications",
    "start": "1578960",
    "end": "1581039"
  },
  {
    "text": "you're building and how you're using it",
    "start": "1581039",
    "end": "1582480"
  },
  {
    "text": "but",
    "start": "1582480",
    "end": "1583440"
  },
  {
    "text": "when you're using one you will miss",
    "start": "1583440",
    "end": "1585760"
  },
  {
    "text": "features",
    "start": "1585760",
    "end": "1586559"
  },
  {
    "text": "from the other and vice versa and so",
    "start": "1586559",
    "end": "1589200"
  },
  {
    "text": "it's not",
    "start": "1589200",
    "end": "1589919"
  },
  {
    "text": "just clear-cut typescript has obviously",
    "start": "1589919",
    "end": "1592320"
  },
  {
    "text": "a legacy and a few years",
    "start": "1592320",
    "end": "1594320"
  },
  {
    "text": "in this space so it'll be interesting to",
    "start": "1594320",
    "end": "1595760"
  },
  {
    "text": "see what happens over time",
    "start": "1595760",
    "end": "1597520"
  },
  {
    "text": "for me i'm a cautious person by nature",
    "start": "1597520",
    "end": "1601440"
  },
  {
    "text": "and just as an engineer building a new",
    "start": "1601440",
    "end": "1603679"
  },
  {
    "text": "product i would be going with the safer",
    "start": "1603679",
    "end": "1605279"
  },
  {
    "text": "choice which is typescript mainly",
    "start": "1605279",
    "end": "1607039"
  },
  {
    "text": "because of the community and the number",
    "start": "1607039",
    "end": "1609120"
  },
  {
    "text": "of people that are already using it",
    "start": "1609120",
    "end": "1610720"
  },
  {
    "text": "and i will be able to go and find more",
    "start": "1610720",
    "end": "1612320"
  },
  {
    "text": "answers on stack overflow",
    "start": "1612320",
    "end": "1613840"
  },
  {
    "text": "for javascript and javascript platform",
    "start": "1613840",
    "end": "1616640"
  },
  {
    "text": "based",
    "start": "1616640",
    "end": "1617200"
  },
  {
    "text": "problems in that community i'm just",
    "start": "1617200",
    "end": "1619120"
  },
  {
    "text": "that's that's just",
    "start": "1619120",
    "end": "1620559"
  },
  {
    "text": "it's just history it's just the way it",
    "start": "1620559",
    "end": "1622159"
  },
  {
    "text": "is but you will miss features from",
    "start": "1622159",
    "end": "1624240"
  },
  {
    "text": "where from kotlin when you're in",
    "start": "1624240",
    "end": "1625840"
  },
  {
    "text": "typescript and if you are working in",
    "start": "1625840",
    "end": "1627679"
  },
  {
    "text": "typescript",
    "start": "1627679",
    "end": "1628400"
  },
  {
    "text": "or working in kotlin on the server say",
    "start": "1628400",
    "end": "1630400"
  },
  {
    "text": "you'll miss some of the features in",
    "start": "1630400",
    "end": "1631520"
  },
  {
    "text": "typescript as well so it's not clear-cut",
    "start": "1631520",
    "end": "1633760"
  },
  {
    "text": "but cautiousness would probably push me",
    "start": "1633760",
    "end": "1635760"
  },
  {
    "text": "towards typescript",
    "start": "1635760",
    "end": "1636799"
  },
  {
    "text": "but it'll be interesting to see how",
    "start": "1636799",
    "end": "1638080"
  },
  {
    "text": "these things develop kotlin js you know",
    "start": "1638080",
    "end": "1640640"
  },
  {
    "text": "there's",
    "start": "1640640",
    "end": "1641279"
  },
  {
    "text": "new features out there's a new release",
    "start": "1641279",
    "end": "1643039"
  },
  {
    "text": "there uh there's a new alpha",
    "start": "1643039",
    "end": "1644960"
  },
  {
    "text": "uh back-end compiler uh we're getting",
    "start": "1644960",
    "end": "1648159"
  },
  {
    "text": "improved code emitting and bundle size",
    "start": "1648159",
    "end": "1649760"
  },
  {
    "text": "which was",
    "start": "1649760",
    "end": "1650559"
  },
  {
    "text": "an issue and that's improving it's still",
    "start": "1650559",
    "end": "1652640"
  },
  {
    "text": "maybe just not totally there yet but",
    "start": "1652640",
    "end": "1654159"
  },
  {
    "text": "it's",
    "start": "1654159",
    "end": "1654559"
  },
  {
    "text": "it's improving all the time it's",
    "start": "1654559",
    "end": "1656000"
  },
  {
    "text": "generating typescript definition files",
    "start": "1656000",
    "end": "1657840"
  },
  {
    "text": "for you automatically so you can pick",
    "start": "1657840",
    "end": "1659279"
  },
  {
    "text": "those up",
    "start": "1659279",
    "end": "1659919"
  },
  {
    "text": "if you want to write kotlin and then",
    "start": "1659919",
    "end": "1661279"
  },
  {
    "text": "consume it from typescript or javascript",
    "start": "1661279",
    "end": "1664159"
  },
  {
    "text": "obviously more multi-platform libraries",
    "start": "1664159",
    "end": "1665919"
  },
  {
    "text": "from kotlin will be able to be consumed",
    "start": "1665919",
    "end": "1667919"
  },
  {
    "text": "for the js platform because that code",
    "start": "1667919",
    "end": "1669679"
  },
  {
    "text": "can work anywhere",
    "start": "1669679",
    "end": "1670559"
  },
  {
    "text": "and eventually they're they're looking",
    "start": "1670559",
    "end": "1672159"
  },
  {
    "text": "to target webassembly as well so",
    "start": "1672159",
    "end": "1674320"
  },
  {
    "text": "there's lots to watch out for there but",
    "start": "1674320",
    "end": "1676799"
  },
  {
    "text": "yeah it's not a clear-cut thing",
    "start": "1676799",
    "end": "1683840"
  },
  {
    "text": "you",
    "start": "1690799",
    "end": "1692880"
  }
]