[
  {
    "start": "0",
    "end": "41000"
  },
  {
    "text": "Hello and welcome to \"GOTO Book Club.\" I'm \nDuncan McGregor, and today I'm delighted to   be interviewing Uberto Barbini about \nhis book \"From Objects to Functions:  ",
    "start": "4000",
    "end": "12360"
  },
  {
    "text": "Build Your Software Faster and Safer with \nFunctional Programming and Kotlin.\" It was  ",
    "start": "12360",
    "end": "18439"
  },
  {
    "text": "published by Pragmatic Programmer in September. \nUberto Barbini, welcome to GOTO Book Club. ",
    "start": "18440",
    "end": "24080"
  },
  {
    "text": "Hi, nice to be here, Duncan.\nSo, Uberto, we worked in the  ",
    "start": "24080",
    "end": "30000"
  },
  {
    "text": "same circles in London. You were a technical \nreviewer on the book that I wrote with Nat Price,   and then I returned a favor by being a technical \nreviewer on your book, but we've never actually  ",
    "start": "30000",
    "end": "39480"
  },
  {
    "text": "worked together. So, how did you come to work \non Kotlin Projects in London and now in Japan? ",
    "start": "39480",
    "end": "47559"
  },
  {
    "start": "41000",
    "end": "321000"
  },
  {
    "text": "I was working in banks in London, and... I \nstarted learning about Kotlin many years ago,  ",
    "start": "48560",
    "end": "59920"
  },
  {
    "text": "before Version 1. At that time there was also \nanother programming language in the JVM that  ",
    "start": "60880",
    "end": "68920"
  },
  {
    "text": "seemed more promising. But after a few years, \nKotlin grew on me and I started using it in  ",
    "start": "68920",
    "end": "78600"
  },
  {
    "text": "the banks. Then I started looking basically, at \nthe beginning we were using Kotlin, you know,  ",
    "start": "78600",
    "end": "88240"
  },
  {
    "text": "introducing slowly creeping to write a test, \nto write a little tools. Then I started looking  ",
    "start": "88240",
    "end": "96040"
  },
  {
    "text": "for a gig where I could write Kotlin all the \ntime. I think more or less we got in touch  ",
    "start": "96040",
    "end": "103080"
  },
  {
    "text": "and at the time London Kotlin community, back \nthen the Kotlin community was not that big. ",
    "start": "103080",
    "end": "111640"
  },
  {
    "text": "So what prompted you to \nwrite the book? Who's it for? ",
    "start": "112400",
    "end": "116280"
  },
  {
    "text": "I'm very passionate about functional programming, \nbut also about writing good code, you know,  ",
    "start": "122000",
    "end": "128320"
  },
  {
    "text": "with good practice. And I didn't find much content \noutside about, yeah, how to put together the two  ",
    "start": "128320",
    "end": "138640"
  },
  {
    "text": "things. So, all the books about, you know, \nTDD, or clean programming or stuff like that  ",
    "start": "138640",
    "end": "147800"
  },
  {
    "text": "tend to be very object-oriented. And all the book \nabout functional programming tends to be quite,  ",
    "start": "147800",
    "end": "155760"
  },
  {
    "text": "you know, very specific exercises on specific \nthings on functional programming. There was  ",
    "start": "155760",
    "end": "164519"
  },
  {
    "text": "no book about, yeah, how to set up a full project \nfrom scratch and adopt a functional program with a  ",
    "start": "164520",
    "end": "173040"
  },
  {
    "text": "kind of pragmatical point of view, let's say. So, \nI think it's quite a useful book for people that  ",
    "start": "173040",
    "end": "180760"
  },
  {
    "text": "came from a Java background also culturally, \nbut use a bit of a, like Java Agile, I mean,  ",
    "start": "180760",
    "end": "187799"
  },
  {
    "text": "simple Java, and they wanted to touch a bit of \nfunctional programming. Or people coming from  ",
    "start": "187800",
    "end": "195640"
  },
  {
    "text": "more functional, advanced stuff like Haskell \nor Scala and wanted to use a... I mean, take  ",
    "start": "195640",
    "end": "202760"
  },
  {
    "text": "advantage of Kotlin's simplicity and productivity.\nI should say, the book isn't a sort of academic  ",
    "start": "202760",
    "end": "211079"
  },
  {
    "text": "book. It takes a project, it takes, the example is \na sort of to-do list if I remember. And it takes  ",
    "start": "211080",
    "end": "219000"
  },
  {
    "text": "us from sort of inception, the initial sort \nof prototyping through to a sort of complete  ",
    "start": "219000",
    "end": "225480"
  },
  {
    "text": "database-backed application with a web frontend \nand so on. And I found that was quite refreshing,  ",
    "start": "225480",
    "end": "230959"
  },
  {
    "text": "it's not just how do you... It's not \njust, \"These are bits of functional  ",
    "start": "230960",
    "end": "238240"
  },
  {
    "text": "programming.\" It is how to plug functional \nprogramming into an entire project lifecycle. ",
    "start": "238240",
    "end": "243880"
  },
  {
    "text": "We have a lot of beta readers for this book. \nAnd I mean, most of them appreciated that. Some  ",
    "start": "245960",
    "end": "257120"
  },
  {
    "text": "people were a bit, let's say not pissed off, \nbut a bit disappointed that there was not much  ",
    "start": "257120",
    "end": "264400"
  },
  {
    "text": "theory or more drilling down super specific \nfunctional programming thing. But I kind of  ",
    "start": "264400",
    "end": "275680"
  },
  {
    "text": "stand my position, because I think it's not \nfunctional programming for the sake of doing  ",
    "start": "276280",
    "end": "283720"
  },
  {
    "text": "functional programming. I mean, the point is to \ndeliver an application at the end. In our job,  ",
    "start": "283720",
    "end": "289800"
  },
  {
    "text": "we want to deliver value to the user. So, \nI'm trying to say, \"Come on, with functional  ",
    "start": "289800",
    "end": "295440"
  },
  {
    "text": "programming, we can be more productive,\" at \nleast for a kind of applications like backends,  ",
    "start": "295440",
    "end": "304280"
  },
  {
    "text": "where... So, this is something that I did, \nand I think sharing, it can be useful for  ",
    "start": "304280",
    "end": "312120"
  },
  {
    "text": "other people. It's not about let's learn how \nto use a 25 kind of monads or stuff like that.",
    "start": "312120",
    "end": "320440"
  },
  {
    "text": "Kotlin is a sort of multi-paradigm language. I \nthink Scala took that mantle first, but we can  ",
    "start": "320960",
    "end": "329840"
  },
  {
    "start": "321000",
    "end": "932000"
  },
  {
    "text": "write procedural, we can write object-oriented or \nfunctional style. I think, I mean, Kotlin sort of  ",
    "start": "329840",
    "end": "336360"
  },
  {
    "text": "probably starts from OO, being on the JVM. Lots of \nthe sort of libraries we use are object-oriented.  ",
    "start": "336360",
    "end": "343879"
  },
  {
    "text": "But how would you look at some Kotlin code and \ndecide that it was functional versus OO? What   characterizes functional programming for you?\nThe first thing is that it's not that important  ",
    "start": "343880",
    "end": "357560"
  },
  {
    "text": "that is functional programming object-oriented, \nbut I appreciate that the advantage of functional  ",
    "start": "357560",
    "end": "365320"
  },
  {
    "text": "programming is having functions, basically \neverything is designed using functions, and  ",
    "start": "365320",
    "end": "374480"
  },
  {
    "text": "putting the function together to do some feature, \nI mean, to do some tasks. The good thing is that  ",
    "start": "374480",
    "end": "384320"
  },
  {
    "text": "you know, combining these functions, each function \ndoes just a bit piece of work and is very defined,  ",
    "start": "384320",
    "end": "392840"
  },
  {
    "text": "clearly defined, from the input to the output. So, \nit's easy to test, and it's easy to use in another  ",
    "start": "392840",
    "end": "399280"
  },
  {
    "text": "place if you have to do the same things. And then \nyou put it together and you have a function. So,  ",
    "start": "399280",
    "end": "405360"
  },
  {
    "text": "when instant code started to reference external \nthings like singleton or external calls without  ",
    "start": "405360",
    "end": "415759"
  },
  {
    "text": "being specified by the type system, then it \nbecame also very hard to reuse. I mean, I remember  ",
    "start": "415760",
    "end": "424720"
  },
  {
    "text": "someone that... Actually in the banks at some \npoint, someone was doing some calculations and  ",
    "start": "424720",
    "end": "432640"
  },
  {
    "text": "got a function from another piece of the program. \nBut that function was locking a lot of stuff,  ",
    "start": "432640",
    "end": "439920"
  },
  {
    "text": "and just using that function slowed down the whole \napplication. And we realized in production. So,  ",
    "start": "439920",
    "end": "447040"
  },
  {
    "text": "this kind of stuff it's kind of easier with \nthe functional programming to see what you are  ",
    "start": "447040",
    "end": "454400"
  },
  {
    "text": "doing without the kind of casting the code.\nMy experience of good OO is that it sort of  ",
    "start": "454400",
    "end": "462520"
  },
  {
    "text": "shares those same sort of properties. \nDo you think there's still a place for  ",
    "start": "462520",
    "end": "468360"
  },
  {
    "text": "object-oriented programming? Or do you think \nwe should look at all problems as functional?  No, no. I mean, I think this is a great thing \nabout Kotlin that you can use both. Because a  ",
    "start": "468360",
    "end": "481280"
  },
  {
    "text": "lot of classes of problems are much easier to do \nin functional programming. Or also if we wanted  ",
    "start": "481280",
    "end": "488880"
  },
  {
    "text": "to break the rule, let's say, and have a, like \nan internal cache or stuff like that so far,  ",
    "start": "488880",
    "end": "495600"
  },
  {
    "text": "that is clearly defined. And it's very convenient, \nconvenient I mean, it's very productive. I can  ",
    "start": "495600",
    "end": "504200"
  },
  {
    "text": "just do this stuff keeping the code clean \nand having this stuff done. Plus all these  ",
    "start": "504200",
    "end": "512440"
  },
  {
    "text": "kinds of problems require a kind of simulation, \nwhere you keep a lot of objects with an internal  ",
    "start": "512440",
    "end": "520520"
  },
  {
    "text": "state that is alive for a long time, they are a \nmuch better fit for object-oriented programming  ",
    "start": "520520",
    "end": "530360"
  },
  {
    "text": "than... Functional programming is great when \nyou have a kind of flow of transformation. So,  ",
    "start": "530360",
    "end": "536519"
  },
  {
    "text": "it fits more naturally web server or ETL \napplication that just reads from a message  ",
    "start": "536520",
    "end": "544640"
  },
  {
    "text": "queue and writes to another message. This kind \nof stuff, which is quite common in the banks and  ",
    "start": "544640",
    "end": "550280"
  },
  {
    "text": "another kind of big backend is great, I think.\nCertainly that's something I've sort of come to  ",
    "start": "550280",
    "end": "556800"
  },
  {
    "text": "realize. I suppose only read recently that the \nobject-oriented programming I learned was about,  ",
    "start": "556800",
    "end": "563440"
  },
  {
    "text": "in memory, user interfaces where everything about \nthe system was in one place, we could manage state  ",
    "start": "563440",
    "end": "572280"
  },
  {
    "text": "in our memory. Whereas he says, we just don't \nhave those... We don't program like that anymore,  ",
    "start": "572280",
    "end": "579080"
  },
  {
    "text": "everything is thrown away between requests, \nand nothing stays in memory. We assume that   our state is all gonna be held somewhere outside \nof our program. So, do you think that functional  ",
    "start": "579080",
    "end": "593480"
  },
  {
    "text": "programming... Where am I going with this? \nYeah, functional programming has sort of   risen with web-scale things. And that you've...\nFor this kind of, yeah, cloud or, what is it,  ",
    "start": "593480",
    "end": "606518"
  },
  {
    "text": "a cloud-native, or however you want to call it. \nThis kind of application, where you just, yeah,  ",
    "start": "606518",
    "end": "612920"
  },
  {
    "text": "process the request to responses. And everything \nis... You keep the state outside the application,  ",
    "start": "612920",
    "end": "622360"
  },
  {
    "text": "so you wanted to have a kind of security around \nthe state to avoid it making... To have a runtime  ",
    "start": "622360",
    "end": "633399"
  },
  {
    "text": "error or stuff like that, because the connection \nwas not open or something like that. All this   stuff came very naturally. I mean, it very \nnaturally fits with functional programming.  ",
    "start": "633400",
    "end": "644000"
  },
  {
    "text": "I think in your book you mentioned working along \nthe grain of the language. And in this sense, it's  ",
    "start": "645320",
    "end": "654040"
  },
  {
    "text": "also working along the grain of the application. I \nmean, you need to do something like that in a kind  ",
    "start": "654040",
    "end": "662000"
  },
  {
    "text": "of cloud-native distributed stuff. The functional \nprogram is a very good approach in my opinion. ",
    "start": "662000",
    "end": "669040"
  },
  {
    "text": "I think I've concluded that we are still \nusing OO, but the objects that we have are  ",
    "start": "669040",
    "end": "676440"
  },
  {
    "text": "servers now. And that we're using message \npassing, polymorph, and all those sorts   of things to implement OO between things and then \nfunctional programming inside those applications? ",
    "start": "676440",
    "end": "688680"
  },
  {
    "text": "That's definitely a way to see. I mean, the \nactual service work is kind of external,  ",
    "start": "688680",
    "end": "696399"
  },
  {
    "text": "from an architectural point of view, they work \na bit of a light object. And also this is a bit  ",
    "start": "696920",
    "end": "702480"
  },
  {
    "text": "what... I mean, we are doing a bit of philosophy \nor history of computing, but Alan Kay came up with  ",
    "start": "702480",
    "end": "709639"
  },
  {
    "text": "this idea that basically objects are a bit like \ncomputers on the net. Something like that. Which  ",
    "start": "709640",
    "end": "721600"
  },
  {
    "text": "is not super helpful in my opinion. I mean, \nit's not super performance-wise a great idea  ",
    "start": "721600",
    "end": "728120"
  },
  {
    "text": "to implement everything like that. But when you \nhave the stuff that is on the net is very good. ",
    "start": "728120",
    "end": "736240"
  },
  {
    "text": "I think Alan Kay also said something about \nthe things that Java and I suppose Kotlin,  ",
    "start": "738200",
    "end": "745000"
  },
  {
    "text": "do in terms of OO is not object-oriented \nprogramming. It's class-based programming.  ",
    "start": "745000",
    "end": "750480"
  },
  {
    "text": "One of the things that I struggle with in \nfunctional programming is that we learned,  ",
    "start": "753360",
    "end": "759399"
  },
  {
    "text": "in OO, that encapsulation was a thing that, \nlike, having data and the operation on those  ",
    "start": "759400",
    "end": "766960"
  },
  {
    "text": "classes together was an important thing. \nFunctional programming says, \"No, actually   they should be separate.\" Where do you sit on that \nspectrum? When do we decide? How do we decide? ",
    "start": "766960",
    "end": "779120"
  },
  {
    "text": "In our team, we have the thumb rule that, to \ndecide when to use lambda or an interface just to,  ",
    "start": "782400",
    "end": "794720"
  },
  {
    "text": "maybe it's clear to you, but to clarify. Let's \nsay that you have a function that needs to assess  ",
    "start": "794720",
    "end": "802759"
  },
  {
    "text": "the database. And so you need your function that \nwrites something and you pass another function  ",
    "start": "802760",
    "end": "812360"
  },
  {
    "text": "that assesses the database and gets the user. And \nthen at some other point, you need a function to  ",
    "start": "812360",
    "end": "819040"
  },
  {
    "text": "write a user to a database. Now, the general \nobject-oriented approach will be to define a  ",
    "start": "819040",
    "end": "826639"
  },
  {
    "text": "kind of interface of the database layer or stuff \nlike that, where you put all this stuff together  ",
    "start": "826640",
    "end": "834920"
  },
  {
    "text": "and it's fine. I don't have anything, but if \nI needed to pass this data assessment object,  ",
    "start": "835760",
    "end": "845400"
  },
  {
    "text": "every time I needed to assess the database I made \nto pass too much. Because if I just needed to get  ",
    "start": "845400",
    "end": "853400"
  },
  {
    "text": "a user, I'm passing an interface with 10 methods \nor 20 methods that I really don't need. So in  ",
    "start": "853400",
    "end": "861080"
  },
  {
    "text": "that case, just passing a single function is an \nadvantage. It creates less coupling. Yeah. Our,  ",
    "start": "861080",
    "end": "870080"
  },
  {
    "text": "rule of thumb is that if you need one is okay, if \nyou need two lambda it's okay. But if you need a  ",
    "start": "870080",
    "end": "875680"
  },
  {
    "text": "three lambda from the same kind of interface \njust pass the interface, something like that. ",
    "start": "875680",
    "end": "881600"
  },
  {
    "text": "I think that's probably the rule of thumb \nwe came up with in the book as well,   that if you have to express a coupling \non reading and writing, then you should  ",
    "start": "881600",
    "end": "891959"
  },
  {
    "text": "probably have an interface. But if it's just \nreading or writing, then just one thing. Yeah.  That's another great thing about Kotlin, \nthat they allow you, first to leverage on  ",
    "start": "891960",
    "end": "905680"
  },
  {
    "text": "the whole Java world libraries that are huge. \nAnd then you can kind of take the Java library  ",
    "start": "905680",
    "end": "913399"
  },
  {
    "text": "and just pass the method, the lambda reference \nwithout having... I mean, in Scala enclosure,  ",
    "start": "913400",
    "end": "924080"
  },
  {
    "text": "you need to do a lot of things to be able \nto interact with Java. It's not that easy.",
    "start": "924080",
    "end": "932200"
  },
  {
    "start": "932000",
    "end": "1351000"
  },
  {
    "text": "Your book has Kotlin in the subtitle, but I don't \nthink you... Would you call it a Kotlin book? ",
    "start": "934600",
    "end": "940600"
  },
  {
    "text": "I mean, it's definitely, it's a Kotlin \nbook. You needed to read Kotlin in the book,  ",
    "start": "940600",
    "end": "946360"
  },
  {
    "text": "but I think the kind of teaching, or the approach, \nlet's say is not specific to Kotlin. A couple of  ",
    "start": "946360",
    "end": "957519"
  },
  {
    "text": "beta readers don't use Kotlin as a main language \nand one learns Kotlin just reading the book. And  ",
    "start": "957520",
    "end": "966720"
  },
  {
    "text": "they were using TypeScript mostly. They said \nthat they can mix a lthey ot of sensoro the  ",
    "start": "967600",
    "end": "976199"
  },
  {
    "text": "support for TypeScript application as well.\nIt's my experience that Java developers and  ",
    "start": "976200",
    "end": "982680"
  },
  {
    "text": "TypeScript developers come to Kotlin quite \neasily. There are sort of changes in syntax,   but lots of the sort of fundamentals are \nthere. It's an easy language to read,  ",
    "start": "982680",
    "end": "993040"
  },
  {
    "text": "and it's quite an easy language to write. Could \nyou have written the book in a different language? ",
    "start": "993040",
    "end": "999120"
  },
  {
    "text": "I mean, why not?\nHow would it have changed if you'd   written it in a different language, I suppose?\nThere are a few culturally specific things. I  ",
    "start": "1000480",
    "end": "1010760"
  },
  {
    "text": "mean, things that make more sense. And I \nhad to work on a Java project recently,  ",
    "start": "1010760",
    "end": "1017440"
  },
  {
    "text": "to be honest, and it's kind of painful to use \nfunctional study in Java because everything  ",
    "start": "1017440",
    "end": "1026280"
  },
  {
    "text": "became a bit harder and harder and harder. \nSo you tend to write less functional stuff  ",
    "start": "1026280",
    "end": "1035120"
  },
  {
    "text": "because the type declarations are very long. \nTo do some transformation in the collection,  ",
    "start": "1035120",
    "end": "1042400"
  },
  {
    "text": "you needed to use a stream. Everything is more \nverbose and it came so... And on the other side,  ",
    "start": "1042400",
    "end": "1051280"
  },
  {
    "text": "Java programmers when they switch to Kotlin, \nintend to keep the same Java approach before  ",
    "start": "1051280",
    "end": "1056920"
  },
  {
    "text": "learning kind of Kotlin idiomatic way. But \nthe main... Sorry, just the main point,  ",
    "start": "1056920",
    "end": "1066840"
  },
  {
    "text": "I mean, writing this application, I think \nif had to write in Typescript or some  ",
    "start": "1066840",
    "end": "1072799"
  },
  {
    "text": "other language with a bit of functional \ncapabilities, it won't be that different. ",
    "start": "1072800",
    "end": "1081920"
  },
  {
    "text": "I think it's trendy to say that the language \ndoesn't matter. But, I do find that the things  ",
    "start": "1081920",
    "end": "1087960"
  },
  {
    "text": "that our language makes hard we don't do. I \nhad a comment on one of my videos recently.",
    "start": "1087960",
    "end": "1093080"
  },
  {
    "text": "Doesn't make sense.\nSomebody was saying,   it was a video on property-based \ntesting and somebody was saying,  ",
    "start": "1093080",
    "end": "1102880"
  },
  {
    "text": "\"Oh, you introduced a type here in a way that \nI don't think that a Java programmer would,   because, you know, introducing a type would've \nbeen too painful.\" But because in Kotlin it's  ",
    "start": "1102880",
    "end": "1110880"
  },
  {
    "text": "sort of like three lines to introduce \na type then it's very natural, I find,  ",
    "start": "1110880",
    "end": "1116200"
  },
  {
    "text": "in the language to solve problems with types, \nit's a natural language to solve problems with  ",
    "start": "1116200",
    "end": "1121559"
  },
  {
    "text": "the things that are easy to do in the language.\nIn Java, just the fact that you needed to create  ",
    "start": "1121560",
    "end": "1128120"
  },
  {
    "text": "a new file kind of stops you. I mean, even if \nthe file is just two lines is a bit different  ",
    "start": "1128120",
    "end": "1137320"
  },
  {
    "text": "if you just put the template, yeah, it's smaller.\nI was an object-oriented developer in the 90s,   and I had the definition of polymorphism of Pat. \nIt was required in job interviews at the time,  ",
    "start": "1137320",
    "end": "1149000"
  },
  {
    "text": "but your book talks a lot about thinking \nin morphisms, what do you mean by that? ",
    "start": "1149000",
    "end": "1154280"
  },
  {
    "text": "The kind of breakthrough of functional programming \nis when I started realizing that data is not  ",
    "start": "1156440",
    "end": "1167720"
  },
  {
    "text": "that important. What is more important is data \ntransformation. So, looking at the programming,  ",
    "start": "1167720",
    "end": "1177039"
  },
  {
    "text": "like the design of the application, like a chain \nof transformation instead of a flow of data,  ",
    "start": "1177040",
    "end": "1184680"
  },
  {
    "text": "let's say. And this transformation, I mean, \ncategorically, well, the most general way to  ",
    "start": "1184680",
    "end": "1194320"
  },
  {
    "text": "call a transformation, yeah, is called a morphism \nin mathematics. This idea of thinking in morphis,  ",
    "start": "1194320",
    "end": "1203039"
  },
  {
    "text": "how you transform, without even looking at the \ncode first, but just start looking at a web  ",
    "start": "1203040",
    "end": "1212320"
  },
  {
    "text": "server as a machine that transforms a request \nin responses. And then for each possible part,  ",
    "start": "1212320",
    "end": "1221360"
  },
  {
    "text": "you see, here, I'm transforming a user ID in a \nuser content or web page. And every step is at the  ",
    "start": "1221360",
    "end": "1229920"
  },
  {
    "text": "end is transformation. And there is this theorem \nin category theory, which is called Yoneda Lemma,  ",
    "start": "1229920",
    "end": "1239440"
  },
  {
    "text": "which mostly says, I'm paraphrasing, that, \"If you \nknow all the functions from a data type and to the  ",
    "start": "1239440",
    "end": "1251120"
  },
  {
    "text": "data type, you can identify univocally the data \ntype.\" This idea that the connection is actually  ",
    "start": "1251120",
    "end": "1259400"
  },
  {
    "text": "more important than the data shape itself.\nYes, I've heard you say that a type is not  ",
    "start": "1259400",
    "end": "1266200"
  },
  {
    "text": "the data, it's the operations on that data. Is \nthis the thing that defines the type for us? ",
    "start": "1266800",
    "end": "1273080"
  },
  {
    "text": "The type is, yeah, the shape of the data, but it \nkind of gets uniquely defined by the regulation  ",
    "start": "1275720",
    "end": "1286480"
  },
  {
    "text": "that it has with the other data. So looking at... \nI'm interested in your background. We didn't  ",
    "start": "1286480",
    "end": "1291760"
  },
  {
    "text": "hear your education. Where did you learn \nCategory Theory? How has this this come to be? ",
    "start": "1291760",
    "end": "1298880"
  },
  {
    "text": "I mean, it's self-learned, and I'm not an expert. \nBut I mean, I spent part time... I always been,  ",
    "start": "1299600",
    "end": "1310640"
  },
  {
    "text": "to be honest, interested in mathematics. I \ndidn't finish the university, but I mean,  ",
    "start": "1310640",
    "end": "1316840"
  },
  {
    "text": "I was studying. Category theory is very \nmathematical. And I also, to be completely honest,  ",
    "start": "1316840",
    "end": "1325520"
  },
  {
    "text": "I don't think it's needed to... I mean, if you \nlike, I think it is great, I got a lot of fun and  ",
    "start": "1325520",
    "end": "1333800"
  },
  {
    "text": "insights. But you don't need to learn category \ntheory to use a functional programming. It's a  ",
    "start": "1333800",
    "end": "1340600"
  },
  {
    "text": "bit like you don't need to speak Japanese \nto prepare sushi or to appreciate sushi.",
    "start": "1340600",
    "end": "1348520"
  },
  {
    "start": "1351000",
    "end": "1804000"
  },
  {
    "text": "Can you give an example where thinking \nin morphism leads to better software? ",
    "start": "1351720",
    "end": "1356840"
  },
  {
    "text": "For me it's a bit like, when we approach a problem \nand, you know, just we need to do this typically  ",
    "start": "1358640",
    "end": "1370200"
  },
  {
    "text": "this new API to connect these other two systems \nto get some result and give the result to the  ",
    "start": "1370200",
    "end": "1377760"
  },
  {
    "text": "user. This is kind of typical. And instead of, you \nknow, start drawing squares and arrows like this,  ",
    "start": "1377760",
    "end": "1391040"
  },
  {
    "text": "for me, it's a bit of a, \"Okay, what is our input \nand what is our output?\" Trying to identify the  ",
    "start": "1393320",
    "end": "1400279"
  },
  {
    "text": "transformation and then see, okay, this is the \nmain transformation. So we have, I don't know,  ",
    "start": "1400280",
    "end": "1406640"
  },
  {
    "text": "a financial product ID and the output is some \nkind of price or fair value. How do we get  ",
    "start": "1406640",
    "end": "1417520"
  },
  {
    "text": "from here to there? There are a lot of possible \ntransformations, and possible ways to do this  ",
    "start": "1417520",
    "end": "1423680"
  },
  {
    "text": "using the system and trying to concentrate on \nthis kind of flow, let's say. And this for me,  ",
    "start": "1423680",
    "end": "1431200"
  },
  {
    "text": "I mean, thinking in this way, thinking about all \ntransformation, how to put the transformation   together, rather than trying to think about, \"I \ncreate a service A, a service B, service A call  ",
    "start": "1431200",
    "end": "1444880"
  },
  {
    "text": "to service B.\" The result may be similar but \nthe mental process for me is very different. ",
    "start": "1444880",
    "end": "1453960"
  },
  {
    "text": "I wonder whether that's a place \nwhere...AI can help us, that if,   as you say, effectively you're thinking of \nthe type signatures of this transformation,  ",
    "start": "1453960",
    "end": "1463000"
  },
  {
    "text": "and we know we've got... I've got this ID for \nthis thing and this way of trading this ID for  ",
    "start": "1463000",
    "end": "1468840"
  },
  {
    "text": "this piece of information, I need this piece of \ninformation to find this, that maybe AIs would be  ",
    "start": "1468840",
    "end": "1474919"
  },
  {
    "text": "good at plugging together those sort of pipelines.\nUberto Barbini:  I mean, in a sense, I don't know,  ",
    "start": "1474920",
    "end": "1484880"
  },
  {
    "text": "maybe just me, but I always find...You said \nthat you started object-oriented in the '90s.  ",
    "start": "1484880",
    "end": "1492240"
  },
  {
    "text": "I was starting programming in the '90s, and \nI think I got object-oriented in 2005. So,  ",
    "start": "1492240",
    "end": "1499800"
  },
  {
    "text": "after 10 years that I was trying to do that... And \nobject-oriented for me has been always a kind of,  ",
    "start": "1499800",
    "end": "1506800"
  },
  {
    "text": "you know, poetic, it's a bit like literature \nTo get something that works together  ",
    "start": "1507400",
    "end": "1517640"
  },
  {
    "text": "is a bit hard. Instead functional program is more \nmathematic, so it's probably something easier for   AI to plug together and verify that is...\nSo, on that subject, I mean, yes,  ",
    "start": "1519640",
    "end": "1531440"
  },
  {
    "text": "OO has a sort of, not mystique, but it has \na sensibility, a sort of like, there is this  ",
    "start": "1531440",
    "end": "1538720"
  },
  {
    "text": "idea of smells and this idea that this is the \nsystem that wants to come out of this problem,  ",
    "start": "1538720",
    "end": "1546559"
  },
  {
    "text": "isn't there? I've heard it said that we don't \nneed patterns in functional programming. Because  ",
    "start": "1546560",
    "end": "1555240"
  },
  {
    "text": "patterns were sort of the OO's way of collecting \nthings that didn't smell, ways of collecting nice  ",
    "start": "1555240",
    "end": "1564280"
  },
  {
    "text": "shapes of things. And there was a lot of talk \nearly at least that patterns were working around  ",
    "start": "1564280",
    "end": "1572520"
  },
  {
    "text": "the lack of functional paradigms in the languages. \nBut it seems to me there are lots of places in  ",
    "start": "1572520",
    "end": "1579560"
  },
  {
    "text": "functional programming where we have to learn \nthese reusable solutions to problems. I think  ",
    "start": "1579560",
    "end": "1586760"
  },
  {
    "text": "from your book, I read about the Reader monad, \nand that finally sort of clicked for me what  ",
    "start": "1586760",
    "end": "1593800"
  },
  {
    "text": "problem the Reader monad was solving. But is the \nReader monad a pattern in functional programming?",
    "start": "1595400",
    "end": "1602680"
  },
  {
    "text": "I'm a bit, let's say, why is he using the monad \nword because have a lot of weird... I mean,  ",
    "start": "1602680",
    "end": "1611560"
  },
  {
    "text": "some people are saying, \"Monads, no, no, no, no.\" \nSome people say, \"Yes, monads only monads,\" which  ",
    "start": "1611560",
    "end": "1618240"
  },
  {
    "text": "are both wrong approaches. And the point is \nthat the monads are a mathematical construct.  ",
    "start": "1618240",
    "end": "1627040"
  },
  {
    "text": "How you translated that mathematical construct \nin code is not a given. There could be several  ",
    "start": "1627040",
    "end": "1637080"
  },
  {
    "text": "ways that you can do that. And, of course, \neverybody tends to use the kind of an... Well,  ",
    "start": "1637080",
    "end": "1645159"
  },
  {
    "text": "there are a few variations, but mostly \nthe same approach, but it's still just   one possible approach. I think this kind of \napproach is a pattern. The monad itself is a  ",
    "start": "1645160",
    "end": "1655279"
  },
  {
    "text": "kind of a mathematical concept that sometimes, I \nmean, stuff that has been called monads are not  ",
    "start": "1655280",
    "end": "1662640"
  },
  {
    "text": "much more monads. No programming monad is 100% \na mathematical monad. But some are not, probably  ",
    "start": "1662640",
    "end": "1672840"
  },
  {
    "text": "not even 10%. They just use monads because...\nThe same, of course, is true of patterns that  ",
    "start": "1672840",
    "end": "1679039"
  },
  {
    "text": "we learn patterns, but then the thing we \ncall that pattern is not necessarily all  ",
    "start": "1679040",
    "end": "1685200"
  },
  {
    "text": "of the patterns as it's defined and so on. \nWe kind of stitch these things together,   don't we? We build software out of things \nthat play this part in this pattern, or this  ",
    "start": "1685200",
    "end": "1694360"
  },
  {
    "text": "part in this, you know, in this other pattern.\nI remember when the pattern book came out and  ",
    "start": "1694360",
    "end": "1701200"
  },
  {
    "text": "people at that time were writing stuff like \nthis is a visitor pattern class or abstract  ",
    "start": "1703080",
    "end": "1711519"
  },
  {
    "text": "factory. You put the name of the pattern in the \nclass, and then the class may be changed. So,  ",
    "start": "1711520",
    "end": "1718520"
  },
  {
    "text": "in the end, it became super confusing and stuff \nlike that. So I tend now not to use any monad  ",
    "start": "1718520",
    "end": "1726680"
  },
  {
    "text": "name in my classes. Just use the monads pattern \nif you want. The idea that trust... It's just a  ",
    "start": "1726680",
    "end": "1734720"
  },
  {
    "text": "generic that you can transform basically, \nand you can combine it with other generic,  ",
    "start": "1734720",
    "end": "1740159"
  },
  {
    "text": "and this idea of transformation makes a lot \nof sense to me. And also kind of a mark when  ",
    "start": "1740160",
    "end": "1747720"
  },
  {
    "text": "you have something... if you have a generics \naround database connection or transaction,  ",
    "start": "1747720",
    "end": "1758799"
  },
  {
    "text": "that function will be called in a context. It came \nquite naturally. It's also a good point to mark.. ",
    "start": "1759560",
    "end": "1767720"
  },
  {
    "text": "It seems to me that pattern names in the names or \ntypes were an anti-pattern, but they were useful  ",
    "start": "1769120",
    "end": "1774640"
  },
  {
    "text": "for documenting what role this thing had. So, it \nwas good for documentation, good for comments,  ",
    "start": "1774640",
    "end": "1779920"
  },
  {
    "text": "but not so good for the names of things. And \nI guess that's probably true of, you know,  ",
    "start": "1779920",
    "end": "1785920"
  },
  {
    "text": "functional patterns, readers, writers, and so on.\nIt makes sense if the other people know about you  ",
    "start": "1785920",
    "end": "1793720"
  },
  {
    "text": "can communicate very quickly, but if the rest of \nthe team is not familiar, it's just confusing. ",
    "start": "1793720",
    "end": "1802799"
  },
  {
    "start": "1804000",
    "end": "2154000"
  },
  {
    "text": "On the subject of the rest of the team, I \nthink your book taught me a lot about how,  ",
    "start": "1804440",
    "end": "1811159"
  },
  {
    "text": "what should I say? Real functional programmers \nthink about solving problems and how to evolve  ",
    "start": "1811160",
    "end": "1817600"
  },
  {
    "text": "that software as we ask for new features. \nBut how would you go about evolving  ",
    "start": "1817600",
    "end": "1823880"
  },
  {
    "text": "software on a team from objects to functions?\nI think the important thing is to keep the team  ",
    "start": "1823880",
    "end": "1834960"
  },
  {
    "text": "together, so as not to fight any code that the \nteam is not comfortable with. On the other side,  ",
    "start": "1834960",
    "end": "1841559"
  },
  {
    "text": "I think is a good idea to keep a bit of heat on. \nSo always trying to introduce a new concept and  ",
    "start": "1841560",
    "end": "1852200"
  },
  {
    "text": "stuff like that. In my previous team, I mean, same \ncompany, but the previous, we were two people of  ",
    "start": "1852200",
    "end": "1861639"
  },
  {
    "text": "us was coming from, yeah, this kind of functional \nculture. We introduced the idea to the rest of  ",
    "start": "1861640",
    "end": "1867920"
  },
  {
    "text": "the team about using results in the operation \nand stuff like that. And the rest of the team  ",
    "start": "1867920",
    "end": "1876640"
  },
  {
    "text": "was a bit like, \"Well, this is different \nfrom using exceptional, how we are using,  ",
    "start": "1876640",
    "end": "1882760"
  },
  {
    "text": "but let's have a try.\" And they enjoyed it. The \nwhole project switched very quickly from one to  ",
    "start": "1882760",
    "end": "1893760"
  },
  {
    "text": "another party. But I mean, I've been in another \nteam where the feeling was really, \"No, no, no,  ",
    "start": "1893760",
    "end": "1904560"
  },
  {
    "text": "we always did it like that. This is not what we \nare going to do.\" But yeah, that's also fine. ",
    "start": "1904560",
    "end": "1913880"
  },
  {
    "text": "So, in the preface, you say, \"Functional \nprogramming makes my job more pleasant every day,  ",
    "start": "1913880",
    "end": "1920200"
  },
  {
    "text": "even if it drives me crazy sometimes.\" I think \nyour book does a good job of showing how you can  ",
    "start": "1920200",
    "end": "1925720"
  },
  {
    "text": "make software more pleasant, but in what ways \ndoes functional programming drive you crazy? ",
    "start": "1925720",
    "end": "1931240"
  },
  {
    "text": "I really enjoy having fun about, solving the \nproblem in using transformation. So okay,  ",
    "start": "1934800",
    "end": "1948680"
  },
  {
    "text": "I can do this with a side effect, \nbut if I can make this explicit to   the type system using maybe C class or some \nkind of stuff like that, it's better. So,  ",
    "start": "1948680",
    "end": "1961400"
  },
  {
    "text": "this is the stuff that I really enjoy to do \nthat. I think the final code is less backbone,  ",
    "start": "1962320",
    "end": "1970240"
  },
  {
    "text": "but sometimes it's very hard or you sometimes \nsay, \"Okay, now let's go back because it's...\"  ",
    "start": "1970240",
    "end": "1980800"
  },
  {
    "text": "So sometimes making the stuff compile is the \nmost difficult factor, and once it's compiled,  ",
    "start": "1983560",
    "end": "1988880"
  },
  {
    "text": "you are quite sure that it's correct.\nThat balance of pragmatism versus correctness,  ",
    "start": "1988880",
    "end": "1999400"
  },
  {
    "text": "I think, especially again, as we were saying \nearlier, where what your language makes easy  ",
    "start": "1999400",
    "end": "2011240"
  },
  {
    "text": "defines pragmatism, I suppose. I know there are \nplaces where the Kotlin-type system... There are  ",
    "start": "2011240",
    "end": "2018120"
  },
  {
    "text": "things where you end up casting that you might \nin another language than language might see that  ",
    "start": "2018120",
    "end": "2023520"
  },
  {
    "text": "something was safe, for example. Certainly my \nexperience of Kotlin is it's pragmatism can  ",
    "start": "2023520",
    "end": "2034200"
  },
  {
    "text": "lead to frustration sometimes because we can't \nexpress something we want to, in the same way  ",
    "start": "2034200",
    "end": "2039799"
  },
  {
    "text": "as we might have problems with Java, making \nit harder to create new types than we'd like.",
    "start": "2039800",
    "end": "2047880"
  },
  {
    "text": "There was some stuff that I would really \nlike Kotlin to make a bit easier to do,  ",
    "start": "2049800",
    "end": "2055360"
  },
  {
    "text": "because there are some, yeah... For example, yeah, \nthe companion object, a bit under user in Kotlin,  ",
    "start": "2055360",
    "end": "2067200"
  },
  {
    "text": "in my opinion, would be a much better way to \nuse that. And to express some time would be  ",
    "start": "2067200",
    "end": "2072919"
  },
  {
    "text": "nicer. But actually, yeah, this is true. \nBut what they see is that most people,  ",
    "start": "2072920",
    "end": "2081919"
  },
  {
    "text": "they really got scared from the beginning when \nthey see the kind of code that I show at the end  ",
    "start": "2081920",
    "end": "2088839"
  },
  {
    "text": "of the book where basically everything is just a \nchain of, you know, map, fold and transformation,  ",
    "start": "2088840",
    "end": "2097960"
  },
  {
    "text": "binding. And so every functionality is just in \na single expression. And people got a bit scared  ",
    "start": "2097960",
    "end": "2106240"
  },
  {
    "text": "about that. On the other side, I think... I mean, \nin the book there is this origami... Because,  ",
    "start": "2106240",
    "end": "2114520"
  },
  {
    "text": "you know, in functional programming there is this \nfaulty function. But it's really that functional  ",
    "start": "2114520",
    "end": "2121360"
  },
  {
    "text": "programming is a bit like origami, and seems \nmuch harder than it is actually is, after a   while if you learn origami, it's not that...\nFrom what I know about origami, though,  ",
    "start": "2121360",
    "end": "2135400"
  },
  {
    "text": "sometimes you have to start off with \na lot bigger piece of paper than you   think you might from the end result.\nAh, well, I mean, the professional one,  ",
    "start": "2135400",
    "end": "2143840"
  },
  {
    "text": "they really start with the, like, one \nsquare-meter piece of paper to do.",
    "start": "2143840",
    "end": "2149000"
  },
  {
    "text": "I know the process of writing a book helped me \nto think about software. Did the book turn out  ",
    "start": "2153360",
    "end": "2160920"
  },
  {
    "start": "2154000",
    "end": "2400000"
  },
  {
    "text": "as you sort of planned it at the beginning, or \ndid it change your understanding as you wrote it?  No, this changed a lot. I kind of rewrote it \ntwo or three times, I mean, depending on... A  ",
    "start": "2160920",
    "end": "2173280"
  },
  {
    "text": "bit from the... I mean, the original idea was to \nhave a book, like, \"This is the theory, this is   the practice.\" And the editor told me, \"No, let's \njust be the practice. Forget the theory.\" I think  ",
    "start": "2173280",
    "end": "2185680"
  },
  {
    "text": "that was a very good suggestion. Then when we \ngot to the beta readers, also I found that I was  ",
    "start": "2185680",
    "end": "2196119"
  },
  {
    "text": "skipping a lot of mental processes and stuff like \nthat. And when I started doing it slowly, I tried  ",
    "start": "2196120",
    "end": "2202520"
  },
  {
    "text": "to put it down, I also realized that, yeah, maybe \nI can change things and make it clearer. And when  ",
    "start": "2202520",
    "end": "2212880"
  },
  {
    "text": "I finished the book, I realized that, \"Okay, if \nI had to rewrite this book again, I'll probably  ",
    "start": "2212880",
    "end": "2217519"
  },
  {
    "text": "remove also a lot of...not to remove, but put the \ntheory after. I don't think you need that. I mean,  ",
    "start": "2218360",
    "end": "2229240"
  },
  {
    "text": "I kind of passionate, I really enjoy doing \nmathematical stuff, but some people bit got scared  ",
    "start": "2229240",
    "end": "2241240"
  },
  {
    "text": "about that and it's not really needed. But, yeah, \nwell, you can always skip that part of the book. ",
    "start": "2241240",
    "end": "2247520"
  },
  {
    "text": "Personally, I found the book sort of challenging. \nBut it was enjoyable because it took us through,  ",
    "start": "2249320",
    "end": "2259800"
  },
  {
    "text": "as I say, unlike most functional programming \nbooks, it took us through an actual example  ",
    "start": "2259800",
    "end": "2265200"
  },
  {
    "text": "from the beginning to the end. There's motivation \nthere in every step. So, we are solving problems  ",
    "start": "2265200",
    "end": "2272960"
  },
  {
    "text": "and looking at how those problems will be solved \nin a functional way, rather than just having them  ",
    "start": "2272960",
    "end": "2279359"
  },
  {
    "text": "in the abstract. So, we are motivated to read the \ntheory, I think. That worked very well for me. ",
    "start": "2279360",
    "end": "2286560"
  },
  {
    "text": "The book is a to-do application, which may be, I \nmean, to-do list, but actually it's quite a hard  ",
    "start": "2287520",
    "end": "2296360"
  },
  {
    "text": "problem to solve, to write a good to-do list \napplication. Originally Java do a kind of a more,  ",
    "start": "2296360",
    "end": "2304920"
  },
  {
    "text": "you know, kind of, Jira kind of software to \nticket-processing software. But I realized  ",
    "start": "2304920",
    "end": "2313280"
  },
  {
    "text": "that just to-do application is a lot of \ncode to write and to explain the code,  ",
    "start": "2313280",
    "end": "2320360"
  },
  {
    "text": "it really takes a lot of time.\nAnd so finally, Uberto, do you   have another book in you? Or is it too soon?\nI still have some blogs to write about this book,  ",
    "start": "2320360",
    "end": "2337440"
  },
  {
    "text": "I mean, and things that I couldn't really put in \nthe book. But my daughter is a 9-year-old and I'm  ",
    "start": "2337440",
    "end": "2348680"
  },
  {
    "text": "teaching her to do programming, but without \npushing, but we do some sessions. And also to  ",
    "start": "2348680",
    "end": "2355559"
  },
  {
    "text": "her classmate. And I really find it fascinating \nteaching programming to kids. And I don't know,  ",
    "start": "2355560",
    "end": "2364560"
  },
  {
    "text": "sometimes I would like to write something about \nit or to put it together, the experience. I am  ",
    "start": "2364560",
    "end": "2371720"
  },
  {
    "text": "not very happy with how they teach programming in \ncourses and stuff like that. And instead working  ",
    "start": "2371720",
    "end": "2380920"
  },
  {
    "text": "with kids is so rewarding, but, you know, you \nneed to raise the interest and let them explore.  ",
    "start": "2380920",
    "end": "2391040"
  },
  {
    "text": "Programming is a creative activity. Most of the \ncourses seem that programming is like typing. ",
    "start": "2391040",
    "end": "2397320"
  },
  {
    "text": "I think we've come to the \nend of our time. Is there  ",
    "start": "2397320",
    "end": "2406960"
  },
  {
    "start": "2400000",
    "end": "2495000"
  },
  {
    "text": "anything else you'd like to say about your book?\nYes. One thing that we didn't mention, is that in  ",
    "start": "2406960",
    "end": "2413200"
  },
  {
    "text": "the book I also put an exercise at the end of each \nchapter and this exercise is very useful to learn  ",
    "start": "2413200",
    "end": "2422760"
  },
  {
    "text": "functional programming, but there is no solution \nin the book because of clearly a choice. But all  ",
    "start": "2422760",
    "end": "2431040"
  },
  {
    "text": "the solutions are still available on my GitHub \nrepository. And we will put the links here. If you  ",
    "start": "2431040",
    "end": "2439080"
  },
  {
    "text": "have the book and you want to see my solution, \nwhich is not given, that is the best one,   you can always see it in the GitHub repository.\nWonderful. So as Uberto says, that will be in  ",
    "start": "2439080",
    "end": "2451480"
  },
  {
    "text": "the show notes as well as a link to \nhis book, \"From Objects to Functions:   Build Your Software Faster and Safer with \nFunctional Programming, Kotlin.\" Uberto,  ",
    "start": "2451480",
    "end": "2459960"
  },
  {
    "text": "thank you very much. It's been enlightening.\nThank you very much, Duncan.",
    "start": "2459960",
    "end": "2465720"
  }
]