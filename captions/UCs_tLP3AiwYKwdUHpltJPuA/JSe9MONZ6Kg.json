[
  {
    "text": "[Applause] okay yeah so you might know me as that",
    "start": "8200",
    "end": "13980"
  },
  {
    "text": "tarsier guy from the internet I look a little bit different without my hats I should probably talk about my accent in part in apology for the captions so I",
    "start": "13980",
    "end": "21420"
  },
  {
    "text": "don't know if you know the UK geography but I am from the midpoints of peaky blinders and Winterfell uh actually",
    "start": "21420",
    "end": "27000"
  },
  {
    "text": "where these chaps are from if you know them but you've probably never heard them talk but unless you watch time as a tank engine which you might have heard",
    "start": "27000",
    "end": "32820"
  },
  {
    "text": "Ringo I'm actually uh I sound a bit like Ringo after three or four points apparently so excuse me if that's uh",
    "start": "32820",
    "end": "39180"
  },
  {
    "text": "makes it hard to follow what I'm saying and if you ever did watch Thomas the Tank Engine and you don't know Thomas's",
    "start": "39180",
    "end": "44280"
  },
  {
    "text": "True Form then hopefully hopefully you'll never not be able to see this um so now seriously or or as I should",
    "start": "44280",
    "end": "52140"
  },
  {
    "text": "say as serious as I'm capable of being um data pipelines are mode is the title of the talk the the topic the title is",
    "start": "52140",
    "end": "58559"
  },
  {
    "text": "actually a pun on a paper I referenced later and I had a lot of fun with it I discovered that oh well I'm not",
    "start": "58559",
    "end": "63899"
  },
  {
    "text": "discovered I knew I used it because I know it means in fashion but speaking to some American friends it also means has",
    "start": "63899",
    "end": "69479"
  },
  {
    "text": "ice cream on top of it which is a slightly different uh use of the word um and then so I should have called the",
    "start": "69479",
    "end": "77159"
  },
  {
    "text": "talk and sorry if you saw this joke on Twitter I should have called this talk towards reproducible data science because no one cares about data",
    "start": "77159",
    "end": "82560"
  },
  {
    "text": "pipelines but everybody wants to be a data scientist right you've added upload of numbers you divided by how many there were you're a data scientist now",
    "start": "82560",
    "end": "89640"
  },
  {
    "text": "um so but you also you wanted to be serverless right like you want serverless data science but why why data",
    "start": "89640",
    "end": "95460"
  },
  {
    "text": "why just data when you could have big data so I'm going to say I'm going to say data throughout this entire talk rather than data excuse me so I hope you",
    "start": "95460",
    "end": "102720"
  },
  {
    "text": "can localize that in your heads um so obviously we don't work towards we",
    "start": "102720",
    "end": "107880"
  },
  {
    "text": "rather achieve reproducible functional serverless big data science and I'm",
    "start": "107880",
    "end": "113340"
  },
  {
    "text": "going to pronounce his name correctly um so yeah to the series but again as",
    "start": "113340",
    "end": "119340"
  },
  {
    "text": "serious as I'm capable of being so we can use uh techniques from functional programming and distributed build",
    "start": "119340",
    "end": "125040"
  },
  {
    "text": "systems in our big data science pipelines to allow us to know what code was used not lose any previous results",
    "start": "125040",
    "end": "130440"
  },
  {
    "text": "as we improve our algorithms and not repeat work that we've done before so that's three things that are useful and",
    "start": "130440",
    "end": "136140"
  },
  {
    "text": "Two Worlds were borrowing ideas from uh so the goals of the talk are I show you a few weird tricks you might feel",
    "start": "136140",
    "end": "142200"
  },
  {
    "text": "they're useful some papers that you should look at you tell me at the end hey did you know about this tool and",
    "start": "142200",
    "end": "147300"
  },
  {
    "text": "make my life easier or you say hey like we can give you some money Tom and you can work on this and similar things the",
    "start": "147300",
    "end": "153420"
  },
  {
    "text": "slides move quite quickly um there will be uh I'll share them at the end so you don't need to try and",
    "start": "153420",
    "end": "159540"
  },
  {
    "text": "write down or snapshot every reference um so yeah there's a problem in general in in science more broadly not just big",
    "start": "159540",
    "end": "167040"
  },
  {
    "text": "data science of about reading producibility so some of the problem with reproducibility is that we try and",
    "start": "167040",
    "end": "173819"
  },
  {
    "text": "extrapolate from Stanford grads trying to impress the boss man uh to the hold",
    "start": "173819",
    "end": "179340"
  },
  {
    "text": "of humanity but some of the some of the um problem with uh experiments is that",
    "start": "179340",
    "end": "184980"
  },
  {
    "text": "they're literally not reproducible we try and do them somewhere else and the the purported results did not exist uh",
    "start": "184980",
    "end": "191280"
  },
  {
    "text": "Juliet has the best example about uh some functional MRI on uh frozen fish",
    "start": "191280",
    "end": "196980"
  },
  {
    "text": "which is an example I found out about so if you know if you don't use the right techniques",
    "start": "196980",
    "end": "202080"
  },
  {
    "text": "um you actually can conclude the frozen salmon can identify human emotions",
    "start": "202080",
    "end": "207480"
  },
  {
    "text": "um uh so yeah in recently an article in nature this is obviously just to justify",
    "start": "207480",
    "end": "213000"
  },
  {
    "text": "the work I'm doing but I like this this picture in particular because three articles about open data and open",
    "start": "213000",
    "end": "218459"
  },
  {
    "text": "science one there's challenges in it yeah I can't even read challenges in",
    "start": "218459",
    "end": "224099"
  },
  {
    "text": "irreproducible research and then they say open is not enough that article is open access the article underneath is",
    "start": "224099",
    "end": "230340"
  },
  {
    "text": "actually not flagged as Open Access so therefore presumably behind the paywall which I thought was quite interesting so",
    "start": "230340",
    "end": "235620"
  },
  {
    "text": "like open they really care about openness accept your ability to read their stuff um",
    "start": "235620",
    "end": "240659"
  },
  {
    "text": "so there's groups of all around the world kind of uh thinking about this idea like can we keep so provenance is",
    "start": "240659",
    "end": "247620"
  },
  {
    "text": "one of the concerns uh can we do we do we know what data we operated on can we perform the same calculations or",
    "start": "247620",
    "end": "254280"
  },
  {
    "text": "experiments again and have some some hope of reproducing uh the experiments",
    "start": "254280",
    "end": "260160"
  },
  {
    "text": "that have happened so uh in London and I met somebody from the Alan Sherman",
    "start": "260160",
    "end": "265680"
  },
  {
    "text": "Institute the first time I gave a version of this talk um and so I'm going to be talking to",
    "start": "265680",
    "end": "270840"
  },
  {
    "text": "them when I go back which is good because I slightly disagree with what they've done in this changing the",
    "start": "270840",
    "end": "275880"
  },
  {
    "text": "culture of data science I'll show you in a moment but they've got the same problem can we get provenance",
    "start": "275880",
    "end": "280919"
  },
  {
    "text": "reproducibility etc for data science can we can we be uh efficient and good uh",
    "start": "280919",
    "end": "286860"
  },
  {
    "text": "data scientists they actually flag up the reproducibilities a contended term there's an established definition that",
    "start": "286860",
    "end": "293340"
  },
  {
    "text": "the ACM then inverts 15 years later or whatever and so I'm gonna I'm gonna",
    "start": "293340",
    "end": "298560"
  },
  {
    "text": "Define the terms for this talk um and we'll use the definitions that I",
    "start": "298560",
    "end": "304979"
  },
  {
    "text": "adopt their proposal in the the initial version of their document is actually that you should use make for uh",
    "start": "304979",
    "end": "310620"
  },
  {
    "text": "reproducible data pipelines I this is this is the this is the example from it's not it's not a horrendous",
    "start": "310620",
    "end": "316919"
  },
  {
    "text": "suggestion and but this is the example from the fourth phase of the make tutorial and I would say this is a",
    "start": "316919",
    "end": "323100"
  },
  {
    "text": "non-obvious way of saying for every for every image uh sorry for every uh CSV script run a python script on it and",
    "start": "323100",
    "end": "329940"
  },
  {
    "text": "generate an image and then run uh latex on the result so this is a a you have to",
    "start": "329940",
    "end": "335880"
  },
  {
    "text": "know a lot about make in order to understand this whereas I've said in prose hopefully comprehensibly quickly uh what what that process is doing so I",
    "start": "335880",
    "end": "343740"
  },
  {
    "text": "think there's a slightly better way I've spent the last few years a company doing transport planning simulations so this",
    "start": "343740",
    "end": "349620"
  },
  {
    "text": "becomes very important I don't know if you can read at the bottom there's the the thing says can City Planning",
    "start": "349620",
    "end": "354720"
  },
  {
    "text": "mistakes be avoid avoided through data-driven simulations and like all headlines you can nearly always answer it with no so the idea that involving",
    "start": "354720",
    "end": "362280"
  },
  {
    "text": "computers would make something less likely to break as not really the world lots of us live in I suppose so can yeah",
    "start": "362280",
    "end": "370080"
  },
  {
    "text": "can data driven solve all the problems no um mistakes can be expensive as well",
    "start": "370080",
    "end": "375840"
  },
  {
    "text": "this isn't the place I worked at uh that I followed this link from another article where the place I worked that got sued but I thought it was a bit mean",
    "start": "375840",
    "end": "382080"
  },
  {
    "text": "to put them up on this on the screen so somebody else got sued for making a mistake so infrastructure Investments are very expensive you might spend like",
    "start": "382080",
    "end": "388919"
  },
  {
    "text": "a billion dollars on a road or whatever and if it doesn't have the effect on congestion or whatever you were trying",
    "start": "388919",
    "end": "394919"
  },
  {
    "text": "to solve by spending the money you might be mad at people and you might go back to them I don't know these people so I can do a hypothetical or a hypothetical",
    "start": "394919",
    "end": "401819"
  },
  {
    "text": "other company that isn't this company maybe and if someone sees them and goes them and says well how did you come to this analysis how have you come to this",
    "start": "401819",
    "end": "407580"
  },
  {
    "text": "conclusion and they say oh well there was a fella called Pete I think he had a python script on his laptop that laptop",
    "start": "407580",
    "end": "413039"
  },
  {
    "text": "was stolen in the pub and Pete since left the company but I think I remember his mobile number let me just talk to",
    "start": "413039",
    "end": "419400"
  },
  {
    "text": "him so you can be asked to defend your your decisions right your your your",
    "start": "419400",
    "end": "424440"
  },
  {
    "text": "computational processes are not without consequences yeah so that's that's the kind of motivating uh examples of the",
    "start": "424440",
    "end": "432000"
  },
  {
    "text": "talk so I've said data pipelines Allah modes so what do I mean by data pipelines in the broadest possible sense",
    "start": "432000",
    "end": "438060"
  },
  {
    "text": "it's a sequence of computational processes that need to occur in order so",
    "start": "438060",
    "end": "443400"
  },
  {
    "text": "somebody asked me in the in the bar yesterday well like does that apply to my use case and I I've thought about it",
    "start": "443400",
    "end": "449520"
  },
  {
    "text": "I was kind of like well if you're not executing computational processes in in a defined order uh I'm not I don't know",
    "start": "449520",
    "end": "456599"
  },
  {
    "text": "what you're doing like like it feels to me total now this is um so I really like dags",
    "start": "456599",
    "end": "463080"
  },
  {
    "text": "um and to the point where I was on in the park with my partner whenever I go quiet she does sometimes say like are",
    "start": "463080",
    "end": "470160"
  },
  {
    "text": "you thinking of dags again and the answer is the answer is it's non-zero percentage of the time I am thinking of",
    "start": "470160",
    "end": "475740"
  },
  {
    "text": "dags if I go momentarily quiet so apologies to her um I've noticed that the dag means",
    "start": "475740",
    "end": "481199"
  },
  {
    "text": "something else in your culture and I'm sorry about that I mean to be to be determined if there's any resonance here",
    "start": "481199",
    "end": "486300"
  },
  {
    "text": "in terms of my appearance um uh sorry that that still makes me laugh",
    "start": "486300",
    "end": "493259"
  },
  {
    "text": "on the third time um so uh directly they cycle the graph is the idea really dag is a",
    "start": "493259",
    "end": "499259"
  },
  {
    "text": "direct-to-day cyclic graph the interesting thing is if you have a depends on relationship like muster care must occur after uh that's not a total",
    "start": "499259",
    "end": "506400"
  },
  {
    "text": "order that's a partial order in mathematics so there's an opportunity for parallelism if C and B require a but",
    "start": "506400",
    "end": "512580"
  },
  {
    "text": "they don't require anything else as soon as A's happens we can do B and C right so we've got uh the the uh",
    "start": "512580",
    "end": "519659"
  },
  {
    "text": "the nature of the the graph gives us an opportunity for parallelism in our tasks parallelism is a good idea uh here's an",
    "start": "519659",
    "end": "526920"
  },
  {
    "text": "example concretely from the place I used to work not super readable but you can see arrivals we pre-process some",
    "start": "526920",
    "end": "532200"
  },
  {
    "text": "arrivals on the riots then we find routes whatever that means then we get the journey times for sidings and then",
    "start": "532200",
    "end": "537540"
  },
  {
    "text": "eventually we output a graph somewhere so um this is this is a concrete example and again exhibit in some opportunity",
    "start": "537540",
    "end": "544080"
  },
  {
    "text": "for parallelism we could not take advantage of that opportunity we could do just a topological sort and just do the things in a linear order but this",
    "start": "544080",
    "end": "550980"
  },
  {
    "text": "this provides a a way we could do things in parallel if we were able uh so but",
    "start": "550980",
    "end": "556019"
  },
  {
    "text": "there's other concerns right we can express our computational process we can test our data pipeline it might be something mundane like read all of the",
    "start": "556019",
    "end": "563459"
  },
  {
    "text": "logs report however many errors there are it might be like look at all the sales like send people invoices anything",
    "start": "563459",
    "end": "570540"
  },
  {
    "text": "that you do that involves Gathering data processing it and outputting some results can be captured in the the",
    "start": "570540",
    "end": "576420"
  },
  {
    "text": "framework I'm about to describe so but then there's other concerns so scheduling what runs the code like",
    "start": "576420",
    "end": "583920"
  },
  {
    "text": "you've said this code should exist like who's who or what is going to run it for you uh and then the the other use of the",
    "start": "583920",
    "end": "591360"
  },
  {
    "text": "the word schedule do you mean daily do you mean monthly do you mean weekly how what are you oh",
    "start": "591360",
    "end": "596820"
  },
  {
    "text": "sorry uh do you mean daily do you mean monthly do you mean weekly provenance so what data did we run what was the inputs",
    "start": "596820",
    "end": "602880"
  },
  {
    "text": "through our process uh reproducibility what code did we run can we go back to that version of the code and and rerun",
    "start": "602880",
    "end": "609000"
  },
  {
    "text": "it again we're in an easier world than kind of a general science problem we don't have to find like 2 000 volunteers with a disease or whatever we we've got",
    "start": "609000",
    "end": "615959"
  },
  {
    "text": "an easier case where we can just say well we've still got the code and we've still got the data like we can run it again we have reproducibility but that's",
    "start": "615959",
    "end": "622320"
  },
  {
    "text": "only if we keep the data in the code around and incrementality I'm taking to mean uh that we don't really do work",
    "start": "622320",
    "end": "628500"
  },
  {
    "text": "we've already done if you ask that if you ask to run the same process on the same data we just don't we just don't do",
    "start": "628500",
    "end": "633600"
  },
  {
    "text": "it um so why I said pure functions help us out so analogy is with functional",
    "start": "633600",
    "end": "638820"
  },
  {
    "text": "programming so a pure function uh the return value only the term is only determined by its input values that's",
    "start": "638820",
    "end": "644399"
  },
  {
    "text": "really useful that's an interesting constraint you can't just do arbitrary stuff you have to depend only on the input input values and any invocation",
    "start": "644399",
    "end": "652920"
  },
  {
    "text": "can be replaced by a result so it's the idea that you don't need to run the same computation twice because if you give the same data to the same function or",
    "start": "652920",
    "end": "659880"
  },
  {
    "text": "the same process in our case you should get the same answer now what the same means there is interesting",
    "start": "659880",
    "end": "665279"
  },
  {
    "text": "philosophically it might not be byte identical but it should be able to be used in place so an analogy with build",
    "start": "665279",
    "end": "670440"
  },
  {
    "text": "systems like I say later if I compile a jar out of some Java code I should be able to hand you the jar right that",
    "start": "670440",
    "end": "675720"
  },
  {
    "text": "that's perhaps not byte identical to one you would make on your machine but usable in the same space at the same",
    "start": "675720",
    "end": "680880"
  },
  {
    "text": "space um so that's the kind of definition uh Gene and his Keynotes I think he's wore",
    "start": "680880",
    "end": "687420"
  },
  {
    "text": "an equivalent share today um so this could have been this morning",
    "start": "687420",
    "end": "693120"
  },
  {
    "text": "um uh three main concerns that I will be referencing this talk so immutability",
    "start": "693120",
    "end": "698220"
  },
  {
    "text": "pure functions and composability these are useful properties of functional programming that we like to use uh when",
    "start": "698220",
    "end": "704399"
  },
  {
    "text": "I first gave this talk John Hughes was in the audience and I was embarrassed not to call out this paper so apologies to John here's one of the papers you",
    "start": "704399",
    "end": "710459"
  },
  {
    "text": "should read uh I should say John of this Parish because he was also at Yahoo a few years ago given a talk but so this",
    "start": "710459",
    "end": "716519"
  },
  {
    "text": "has been a useful seam of work for John since about uh 1990 if not before so 1990 he was already fairly convinced it",
    "start": "716519",
    "end": "723000"
  },
  {
    "text": "was a good idea and he's still chipping away at it which is really nice um so uh in the in the data pipeline",
    "start": "723000",
    "end": "730320"
  },
  {
    "text": "space in particular here are some tricks where you can adhere to this uh",
    "start": "730320",
    "end": "735360"
  },
  {
    "text": "technique I'm proposing which is that your your processes in in your dag your tasks should be pure in the sense they",
    "start": "735360",
    "end": "742320"
  },
  {
    "text": "only look at some they only look at some data and the result is determined entirely by it here's some helpful hints",
    "start": "742320",
    "end": "748920"
  },
  {
    "text": "how to achieve that in in practice um from one of the original creators of",
    "start": "748920",
    "end": "754320"
  },
  {
    "text": "airflow which I thought well I think it is actually uh so but at some point you have to look at the world right you've",
    "start": "754320",
    "end": "759839"
  },
  {
    "text": "got Pure functions operating on data but the whole world is there for you to look at and we've told you if it function's",
    "start": "759839",
    "end": "765839"
  },
  {
    "text": "pure we can't look at it uh so again a trick from functional program from from closure in particular closure has this",
    "start": "765839",
    "end": "772380"
  },
  {
    "text": "concept of like separating identity and state so you have a you have a an identity a name of a thing that changes",
    "start": "772380",
    "end": "778680"
  },
  {
    "text": "through time and You observe it at different moments in time so it's called the epocal time model enclosure",
    "start": "778680",
    "end": "784620"
  },
  {
    "text": "um so we have the the value is changing in but the identity of the thing is the same so we name the thing but it has",
    "start": "784620",
    "end": "790260"
  },
  {
    "text": "multiple values so in our in our case in data it's not it's not just called the database and take some action based on",
    "start": "790260",
    "end": "796260"
  },
  {
    "text": "the content it's called the database set materialize save a version of the data",
    "start": "796260",
    "end": "801480"
  },
  {
    "text": "as of that point and then operate it in a pure way from there so that's that's the analogy as we snapshot the world and",
    "start": "801480",
    "end": "808260"
  },
  {
    "text": "we save it as data and then we can rerun the analysis because the contents of the the cause of that API or that database",
    "start": "808260",
    "end": "814380"
  },
  {
    "text": "we're using at that moment was this and we've saved it so we can go back to that moment if we like",
    "start": "814380",
    "end": "820200"
  },
  {
    "text": "um and if the world changes we might want to you know periodically update that periodically rerun the",
    "start": "820200",
    "end": "826079"
  },
  {
    "text": "um uh the the analysis we're doing uh another good another good use of this is",
    "start": "826079",
    "end": "831360"
  },
  {
    "text": "in the program in language Ruby uh Gary Bernard's got a good video about functional core imperative shells this",
    "start": "831360",
    "end": "837300"
  },
  {
    "text": "is a design pattern you can use for for programming more broadly so we're saying at the edge we have these impure functions that snapshot the world and",
    "start": "837300",
    "end": "844380"
  },
  {
    "text": "after that we're then pure we only depend on the data that's input to us so how might we bundle up our code",
    "start": "844380",
    "end": "850680"
  },
  {
    "text": "um we could um we can just gather up the code into a zip file and but of course we're uh ala",
    "start": "850680",
    "end": "858959"
  },
  {
    "text": "mode so we uh we're going to bundle up an entire operating system into a tar",
    "start": "858959",
    "end": "865500"
  },
  {
    "text": "file instead um um",
    "start": "865500",
    "end": "871139"
  },
  {
    "text": "this um I I've got a good I I I've long not enjoyed Docker files I think container",
    "start": "871139",
    "end": "876779"
  },
  {
    "text": "containerization is a great idea I've long not enjoyed Docker files because of the composability idea the postgres",
    "start": "876779",
    "end": "882720"
  },
  {
    "text": "image and the and the python image it's not clear how to get the two together composability's not very good there's a",
    "start": "882720",
    "end": "888000"
  },
  {
    "text": "formal result that describes the it describes it as degenerate laser so I I",
    "start": "888000",
    "end": "893160"
  },
  {
    "text": "enjoyed that um so yeah I don't think Docker files should exist I'm not sure Docker the company can exist much longer they've",
    "start": "893160",
    "end": "899399"
  },
  {
    "text": "they've borrowed two they've borrowed too much money to be bought out by Red Hat I noticed since I first since I",
    "start": "899399",
    "end": "905339"
  },
  {
    "text": "first gave up gave this talk they've sold half of themselves to somebody else um so I don't know what's going on",
    "start": "905339",
    "end": "910560"
  },
  {
    "text": "containers great idea images great idea Docker files not a bad idea Docker the",
    "start": "910560",
    "end": "915779"
  },
  {
    "text": "company won't exist who knows next time I give this talk they may not exist um where might we rerun it uh they've had a",
    "start": "915779",
    "end": "922800"
  },
  {
    "text": "good run um uh I don't think I'm being too mean uh where might we run it so where can we",
    "start": "922800",
    "end": "928800"
  },
  {
    "text": "run uh Docker containers or containers [Music] um loads of places uh I joked the other day",
    "start": "928800",
    "end": "935399"
  },
  {
    "text": "some companies think they need a kubernetes strategy and they don't have a business strategy",
    "start": "935399",
    "end": "940620"
  },
  {
    "text": "um uh I prefer I happen to work a lot in AWS and I actually prefer fargate I'm",
    "start": "940620",
    "end": "948720"
  },
  {
    "text": "not you should be renting containers for the duration they execute in my opinion lots of people spending time learning",
    "start": "948720",
    "end": "954899"
  },
  {
    "text": "about service meshes and how to operate kubernetes a lot some people do need to do that I think that is like tens of",
    "start": "954899",
    "end": "961800"
  },
  {
    "text": "people and and we should we should be as tens of companies maybe and we should be renting but we should be renting",
    "start": "961800",
    "end": "967260"
  },
  {
    "text": "containers for the duration of their execution and somebody else should be scheduling them in my opinion my humble",
    "start": "967260",
    "end": "972839"
  },
  {
    "text": "opinion should I say um where should we store the data so a blob store is a good idea uh at least",
    "start": "972839",
    "end": "979079"
  },
  {
    "text": "one of those suggestions is a joke um so we have",
    "start": "979079",
    "end": "984300"
  },
  {
    "text": "um ways of storing files right we have a standard interface to store files and",
    "start": "984300",
    "end": "989940"
  },
  {
    "text": "there's a weird trick if you don't delete files or overwrite them they stay there now they stay there as",
    "start": "989940",
    "end": "996180"
  },
  {
    "text": "long as you pay the bills in some cases um but they will stay there right so I'm saying we want version and we want",
    "start": "996180",
    "end": "1002920"
  },
  {
    "text": "reproducibility but the the only reason the data wouldn't be there is if you overwrote it or if you deleted it right",
    "start": "1002920",
    "end": "1009199"
  },
  {
    "text": "the data stays there unless you do something so we're going to try and avoid deleting or overwriting our data",
    "start": "1009199",
    "end": "1015139"
  },
  {
    "text": "that's the the one weird trick um uh so again an analogy of a functional",
    "start": "1015139",
    "end": "1022339"
  },
  {
    "text": "programming says well sometimes the data needs to change but we don't need to change it all uh so in this example",
    "start": "1022339",
    "end": "1028699"
  },
  {
    "text": "hopefully you can see the black uh graph and if we have to add e onto F so this",
    "start": "1028699",
    "end": "1034579"
  },
  {
    "text": "is like a singly linked list or whatever or a binary tree I suppose",
    "start": "1034579",
    "end": "1040100"
  },
  {
    "text": "um then we've got a if we add the E onto F it's not by any reason so I shouldn't name the data",
    "start": "1040100",
    "end": "1046040"
  },
  {
    "text": "structure off the cuff um we've got e attached to F in which case G's and G can't be attached to the",
    "start": "1046040",
    "end": "1051919"
  },
  {
    "text": "new to the old F so it needs to be attached to the new f a d is attached to G so you've you have to copy D G and F",
    "start": "1051919",
    "end": "1059000"
  },
  {
    "text": "in order to add e but then if you look at the data structure starting at D you",
    "start": "1059000",
    "end": "1064160"
  },
  {
    "text": "could you it goes the new G the new F the old H is still reachable uh the the",
    "start": "1064160",
    "end": "1070940"
  },
  {
    "text": "new e is there and you see we can just link to B and B A and C so we've got some structural sharing between two",
    "start": "1070940",
    "end": "1077840"
  },
  {
    "text": "different versions of our of our data structure that's that's the idea we're going to try and use uh with our dags",
    "start": "1077840",
    "end": "1084140"
  },
  {
    "text": "later so the same idea structural sharing is a hunking great idea uh persistent data stretches are a hunking",
    "start": "1084140",
    "end": "1090200"
  },
  {
    "text": "grades idea also if you happen to be on I think Google cloud or S3 uh or that",
    "start": "1090200",
    "end": "1096260"
  },
  {
    "text": "name is the product and the company so if you're on AWS with S3 or Google cloud with the cloud blob storage thing",
    "start": "1096260",
    "end": "1102140"
  },
  {
    "text": "um you can let somebody else pay the bill so you can make things available to people but they pay the cost of the downloads it's like zero cost sharing",
    "start": "1102140",
    "end": "1108500"
  },
  {
    "text": "almost I think you pay just the API requests so that's a really nice if you're in a scientific world and want to share things with people you don't",
    "start": "1108500",
    "end": "1114200"
  },
  {
    "text": "necessarily want a huge bill if they don't cash it they just keep downloading it from you or whatever of millions of people download it from you so that's a",
    "start": "1114200",
    "end": "1120740"
  },
  {
    "text": "really nice idea if we're trying to talking about science so summary so far about on time uh we have code to Binary",
    "start": "1120740",
    "end": "1127700"
  },
  {
    "text": "images identifying that point in your code we have impure tasks at the edge snapshot in the world pure tasks",
    "start": "1127700",
    "end": "1134840"
  },
  {
    "text": "transform in the data pure means depending only on the data input and we output to a single folder I don't know",
    "start": "1134840",
    "end": "1141380"
  },
  {
    "text": "if I explicitly said that but I've adopted the pattern where each process just writes to one folder or one one",
    "start": "1141380",
    "end": "1146660"
  },
  {
    "text": "named location output um and we use the mutability to keep the data around if we the data's there",
    "start": "1146660",
    "end": "1153080"
  },
  {
    "text": "unless we do something else unless we overwrite to the same location unless we deliberately delete it but we've got other concerns remember we",
    "start": "1153080",
    "end": "1159380"
  },
  {
    "text": "said scheduling so two different meanings of scheduling do we run it daily do we run it weekly monthly hourly",
    "start": "1159380",
    "end": "1164660"
  },
  {
    "text": "and also like where did where are those processes executed in an ideal world it's serverless which means they execute",
    "start": "1164660",
    "end": "1170660"
  },
  {
    "text": "on somebody else's service um but we've still got this problem of like some computers need to get warm",
    "start": "1170660",
    "end": "1176539"
  },
  {
    "text": "somewhere so the the most commonly used tool in the space is Apache airflow and",
    "start": "1176539",
    "end": "1181640"
  },
  {
    "text": "it does a very good job in many many ways um I this is an example so this",
    "start": "1181640",
    "end": "1186740"
  },
  {
    "text": "downloads some file the Sherlock Holmes uh thing from Project Gutenberg and does the the Doug McElroy uh big data in 1970",
    "start": "1186740",
    "end": "1197059"
  },
  {
    "text": "or sorry data science in 1970 a word count example using only uh unix",
    "start": "1197059",
    "end": "1202700"
  },
  {
    "text": "commands now we should be cutting like loads of that data so that it was Big",
    "start": "1202700",
    "end": "1207860"
  },
  {
    "text": "Data sorry I needed should get a better example for next time um but this is this is download and then",
    "start": "1207860",
    "end": "1213980"
  },
  {
    "text": "run some analysis save the result in the in the folder but if you look it says we've got a dag called word count uh the",
    "start": "1213980",
    "end": "1220820"
  },
  {
    "text": "task IDs download we're using an image called TCH Ubuntu we're targeting a",
    "start": "1220820",
    "end": "1226039"
  },
  {
    "text": "cluster called airflow and we're running this command so this is this description is nice and if you look at the bottom",
    "start": "1226039",
    "end": "1231080"
  },
  {
    "text": "we've got download comes before word count we've got a fluent DSL for for building uh dags so if you look at our",
    "start": "1231080",
    "end": "1237320"
  },
  {
    "text": "example from before uh we can describe that programmatically like this so different dependencies attract we have a",
    "start": "1237320",
    "end": "1243919"
  },
  {
    "text": "fluent DSL if you notice that uh we can we can say things should become come before a list of things a list of things",
    "start": "1243919",
    "end": "1249980"
  },
  {
    "text": "should occur before things so this is a nice succinct way of encode describing the attack we saw before the complicated",
    "start": "1249980",
    "end": "1256660"
  },
  {
    "text": "pipeline airflow has lots of other affordances it will go away and run the code for you",
    "start": "1256660",
    "end": "1262580"
  },
  {
    "text": "which is nice it also has a nice GUI saying what's Ram if you notice that August the 5th I apparently sorted out",
    "start": "1262580",
    "end": "1268220"
  },
  {
    "text": "the thing so it's now green but I wanted to just highlight the certain things I've read because they failed certain",
    "start": "1268220",
    "end": "1274580"
  },
  {
    "text": "things are orange because they never ran because the thing they depended on didn't didn't succeed but the the good",
    "start": "1274580",
    "end": "1279919"
  },
  {
    "text": "and bad thing about airflow is this is the version of my dag um unimaginas would be called dag I",
    "start": "1279919",
    "end": "1286280"
  },
  {
    "text": "believe at this point um if I rerun one of these if I if I hit one of the orange things now it will run",
    "start": "1286280",
    "end": "1293539"
  },
  {
    "text": "for August the 3rd say but it's not running on August the 3rd is it so",
    "start": "1293539",
    "end": "1298580"
  },
  {
    "text": "there's a there's a concept of ran on and ran four airflow doesn't make the",
    "start": "1298580",
    "end": "1303620"
  },
  {
    "text": "distinction airflow says you're running for August the 3rd and I could run it now now if the code for a particular",
    "start": "1303620",
    "end": "1309440"
  },
  {
    "text": "step here has changed now it might be a good change in that I I fix this notionally I mean this is a toy example",
    "start": "1309440",
    "end": "1315679"
  },
  {
    "text": "but I fixed this notionally on August the 5th I can go back and recalculate everything everything will hopefully be green but I won't be running the code I",
    "start": "1315679",
    "end": "1323299"
  },
  {
    "text": "had on July 14th necessarily on the data I had on July 14th now where this might be realized in your company is if we",
    "start": "1323299",
    "end": "1329659"
  },
  {
    "text": "make a new if we're doing monthly report and we generate a PDF and someone takes decisions on it and we change that",
    "start": "1329659",
    "end": "1335299"
  },
  {
    "text": "algorithm in June we can project the new algorithm back in time and generate February's report how it should have",
    "start": "1335299",
    "end": "1341120"
  },
  {
    "text": "been in February but that's not what I'll get what got emailed to the boss or the customer or whatever or that's not what we've used so so airflow means the",
    "start": "1341120",
    "end": "1349220"
  },
  {
    "text": "mistake of it's you name the dag but you don't you're not intrinsically versioning it and you're keeping",
    "start": "1349220",
    "end": "1354620"
  },
  {
    "text": "versions around so it doesn't do that like the identity of the dag can change so the shape of the tag might change the",
    "start": "1354620",
    "end": "1360860"
  },
  {
    "text": "code that you're telling it to run also might change so you've got this like temporal aspect of the data runs",
    "start": "1360860",
    "end": "1367280"
  },
  {
    "text": "notionally for a particular time but with but the dag is also changing and the code that that you're telling it to",
    "start": "1367280",
    "end": "1372860"
  },
  {
    "text": "run is also changing so that's a problem with airflow and so there's one weird trick again if you identify you're dags",
    "start": "1372860",
    "end": "1380299"
  },
  {
    "text": "somehow like with a version stamp or whatever or uh but you should include",
    "start": "1380299",
    "end": "1385340"
  },
  {
    "text": "the interval if you also have intervals if you also run an hourly daily whatever this one weird trick at you better than most places if you get a new version of",
    "start": "1385340",
    "end": "1392299"
  },
  {
    "text": "the dag you then get a new folder you can get a new place to put your data and you haven't overwritten anything right everything's still evidenced alert this",
    "start": "1392299",
    "end": "1398960"
  },
  {
    "text": "and this makes you better than most places and which is which is a neat trick don't version your dags like underscore underscore Final in caps",
    "start": "1398960",
    "end": "1406580"
  },
  {
    "text": "because it's never final is it uh find a good name in scheme for your dags um so",
    "start": "1406580",
    "end": "1413480"
  },
  {
    "text": "a halfway house if you don't do the foldering folder I think I'm suggesting please just put the dagger that is in the path that gets you a lot of a lot of",
    "start": "1413480",
    "end": "1420080"
  },
  {
    "text": "the way there um airflow has several components so as a web server running as a scheduler which",
    "start": "1420080",
    "end": "1425860"
  },
  {
    "text": "decides what work needs to run and when and as executors which go away and do the work it has operators which are then",
    "start": "1425860",
    "end": "1431960"
  },
  {
    "text": "which are generic classes to implement your tasks as I'm calling them and",
    "start": "1431960",
    "end": "1437179"
  },
  {
    "text": "there's a whole bunch of operators I don't like this because you're muddling your tasks with airflows code so you're",
    "start": "1437179",
    "end": "1443720"
  },
  {
    "text": "using the MySQL operator or you're using uh the big query operator or whatever I",
    "start": "1443720",
    "end": "1449659"
  },
  {
    "text": "prefer moving the logic for your tasks into your code and not necessarily being",
    "start": "1449659",
    "end": "1455360"
  },
  {
    "text": "muddled work with airflows just because you might not always use airflow right um and it's it's often fairly simple to",
    "start": "1455360",
    "end": "1460940"
  },
  {
    "text": "just write the code directly and in order to justify this statement here's somebody else who made the same",
    "start": "1460940",
    "end": "1466640"
  },
  {
    "text": "statement on the internet um and I agree entirely with Jessica so we should we're all using airflow wrong",
    "start": "1466640",
    "end": "1474200"
  },
  {
    "text": "and the error answer is to only use kubernetes operators I think only use some operator that lets you just execute",
    "start": "1474200",
    "end": "1479539"
  },
  {
    "text": "a container I happen to use ECS I like um so yeah Jess is Right In which in the",
    "start": "1479539",
    "end": "1485960"
  },
  {
    "text": "in that she agrees with me um here's another so I I I quite like airflow uh and if",
    "start": "1485960",
    "end": "1492559"
  },
  {
    "text": "you already use an airflow that that one weird trick will get you some some way uh but I really like at the moment uh",
    "start": "1492559",
    "end": "1498500"
  },
  {
    "text": "AWS step functions this is a new newish feature of AWS uh it allows you to",
    "start": "1498500",
    "end": "1504320"
  },
  {
    "text": "create State machines and execute tasks with Instinct machines where it's really useful is if you have a load of processors who's done a job like this",
    "start": "1504320",
    "end": "1511039"
  },
  {
    "text": "where you ask something else to do a thing keep asking if it's done and when it's finally done go away and do",
    "start": "1511039",
    "end": "1516320"
  },
  {
    "text": "something else if you don't know the idea of State machines and your writing code that does something like that it's",
    "start": "1516320",
    "end": "1521480"
  },
  {
    "text": "it's probably State machines are also a hunking great",
    "start": "1521480",
    "end": "1527000"
  },
  {
    "text": "idea and it's a really good way of in capturing uh logic so there's a there's a lovely talk from a while ago about a",
    "start": "1527000",
    "end": "1532520"
  },
  {
    "text": "bank system I think the Chris Ford gave they'll try and find the link but they they had the state machine and it's a",
    "start": "1532520",
    "end": "1538039"
  },
  {
    "text": "it's a hunking great idea but this is a state machine with somebody else running it but here's a really common job submit a job find out if it's done keep waiting",
    "start": "1538039",
    "end": "1545480"
  },
  {
    "text": "when it's done go out so uh AWS kind of saw that use case and collapsed it into",
    "start": "1545480",
    "end": "1550820"
  },
  {
    "text": "basically the other single point in the state machine description it says do this thing that can be a batch job or an",
    "start": "1550820",
    "end": "1557480"
  },
  {
    "text": "ECS task or a Lambda execution so you can you just got a a way of describing",
    "start": "1557480",
    "end": "1563360"
  },
  {
    "text": "actually in yaml which I'm not so fond of but a way of describing a state machine that does your thing so this is",
    "start": "1563360",
    "end": "1568640"
  },
  {
    "text": "from a paper a blog post of aws's about a year ago when this this idea started",
    "start": "1568640",
    "end": "1573740"
  },
  {
    "text": "rattling around in my head so here's a complicated genomics workflow doesn't matter that you can't see it because as of November last year you just need to",
    "start": "1573740",
    "end": "1580400"
  },
  {
    "text": "do this which is essentially do the thing do two things things one thing did another thing and then you're done so",
    "start": "1580400",
    "end": "1586640"
  },
  {
    "text": "this is exactly a solution to our uh scheduling problem right we've got dags we've got the orders we've got tasks we",
    "start": "1586640",
    "end": "1592220"
  },
  {
    "text": "need to run we're not complicating them with involving any airflow operators we can just execute things directly in here",
    "start": "1592220",
    "end": "1597260"
  },
  {
    "text": "our infrastructure overhead is zero here we're not there's no web servers running there's no schedulers running so this is",
    "start": "1597260",
    "end": "1603140"
  },
  {
    "text": "this is a neat idea if you want to do a one-off thing you could generate the yaml generate this and do whatever work",
    "start": "1603140",
    "end": "1609200"
  },
  {
    "text": "you're interested in and then when it stops you're not paying anything this is really really nice um I've suggested using fargate uh so",
    "start": "1609200",
    "end": "1616100"
  },
  {
    "text": "far far Gates the uh serverless um way of running containers in AWS",
    "start": "1616100",
    "end": "1621260"
  },
  {
    "text": "Google have a similar thing I think um but there's some downsides so it",
    "start": "1621260",
    "end": "1626419"
  },
  {
    "text": "takes about a minute to start them I suspect they'll make that faster uh but if you if you're in that world where",
    "start": "1626419",
    "end": "1631460"
  },
  {
    "text": "your your computational task if a minute is going to be um if a minute is going to be too long to",
    "start": "1631460",
    "end": "1637640"
  },
  {
    "text": "wait because it only takes seven seconds Lambda is a good place to put them there's an execution limit uh for Lambda",
    "start": "1637640",
    "end": "1642860"
  },
  {
    "text": "of the time so short-lived things can run in Lambda medium-sized things can be in Far Gates and if you look if you",
    "start": "1642860",
    "end": "1648799"
  },
  {
    "text": "notice at the moment you're allowed up to four CPUs and 30 gig so before super using 30 it gets you quite far but it's",
    "start": "1648799",
    "end": "1654620"
  },
  {
    "text": "not going to get you everything uh I AWS batch um has the same interface it's just",
    "start": "1654620",
    "end": "1660200"
  },
  {
    "text": "running containers but it runs containers on whatever size machine you say now whatever science machine you say",
    "start": "1660200",
    "end": "1665539"
  },
  {
    "text": "I had a look at the bare metal instances in AWS before planning this talk and it",
    "start": "1665539",
    "end": "1670940"
  },
  {
    "text": "always surprised me whenever I give a talk because they just release faster and faster machines so you can rent a 448 core machine with 24 terabytes of",
    "start": "1670940",
    "end": "1679520"
  },
  {
    "text": "ram at the moment now you can get a fair bit done on that on that kind of machine so I feel like we've gone quite far",
    "start": "1679520",
    "end": "1685640"
  },
  {
    "text": "um other opinions are available though some sometimes people are just not happy that you've only got one one computer",
    "start": "1685640",
    "end": "1692419"
  },
  {
    "text": "running um and and some some people do need more than one computer admittedly",
    "start": "1692419",
    "end": "1698299"
  },
  {
    "text": "um so um yeah uh so I wanted to say just point",
    "start": "1698299",
    "end": "1704059"
  },
  {
    "text": "out this this paper with a real favorite of mine uh that says scalability whatever costs so we have all these",
    "start": "1704059",
    "end": "1710120"
  },
  {
    "text": "complicated distributed systems but how well do they perform and they make assertions like Force four of us four or",
    "start": "1710120",
    "end": "1716419"
  },
  {
    "text": "four servers running out of stuff it's faster than two servers eight servers is faster than four and no one ever asked",
    "start": "1716419",
    "end": "1721700"
  },
  {
    "text": "the question it's faster than four servers but is it faster than a for Loop and then um that this this paper kind of explores",
    "start": "1721700",
    "end": "1728480"
  },
  {
    "text": "that space which is really really nice um so definitely definitely recommend it the the the introduction to the paper is",
    "start": "1728480",
    "end": "1734900"
  },
  {
    "text": "incredibly quotable I haven't actually said this to anybody yet um",
    "start": "1734900",
    "end": "1740919"
  },
  {
    "text": "but I've strongly implied it um so uh yeah if you if you have to do uh",
    "start": "1740919",
    "end": "1750039"
  },
  {
    "text": "distributed processing I really like Apache spark just quick show of hands who's used the Patty Spark",
    "start": "1750039",
    "end": "1755659"
  },
  {
    "text": "Grace can you oh I'm sorry keep hands up can you keep your hands up if your spark clusters running the whole time or if",
    "start": "1755659",
    "end": "1762559"
  },
  {
    "text": "you do it like ephemerally I think I just gestured down then as if I wanted your hands to go down that is a",
    "start": "1762559",
    "end": "1768860"
  },
  {
    "text": "bad pedagogical technique um sorry I was hoping your hands would go down um so yeah a lot of people are",
    "start": "1768860",
    "end": "1775460"
  },
  {
    "text": "running spark I think it's a wonderful programming model um but very often I see people have the",
    "start": "1775460",
    "end": "1780559"
  },
  {
    "text": "data in S3 anyway so what I was proposing about S3 folders in and a single S free folder out that's that is",
    "start": "1780559",
    "end": "1786500"
  },
  {
    "text": "the natural interface of spark for lots of people so we can fall in line and we can do big data processing as well by",
    "start": "1786500",
    "end": "1792620"
  },
  {
    "text": "just having the location that it outputs the data be the same thing as when we had a single process right uh there's a",
    "start": "1792620",
    "end": "1798620"
  },
  {
    "text": "there's a neat article on um spark about running spark on one machine and the Simplicity and affordances there so uh",
    "start": "1798620",
    "end": "1805279"
  },
  {
    "text": "for data scientists working on one machine Spark's not a bad not a bad approach for one machine as well",
    "start": "1805279",
    "end": "1810679"
  },
  {
    "text": "um but yeah you can you can obviously run it in an EMR cluster or however else you like in in kubernetes for instance",
    "start": "1810679",
    "end": "1816679"
  },
  {
    "text": "there's a good kubernetes operator to do it um so but yeah you should Benchmark a use case if you can fit it into a single",
    "start": "1816679",
    "end": "1823700"
  },
  {
    "text": "process a single uh process and run it in the infrastructure you've already got uh you should do it don't take on",
    "start": "1823700",
    "end": "1829340"
  },
  {
    "text": "anything new and if you do use spark sparklens is really good concretely we had a our biggest spark job at a place I",
    "start": "1829340",
    "end": "1836480"
  },
  {
    "text": "was at took uh four and a half minutes on a a big-ish",
    "start": "1836480",
    "end": "1842899"
  },
  {
    "text": "far gate instant and we ran sparklens and it said with infinite resources it would take like a minute and a half or",
    "start": "1842899",
    "end": "1848720"
  },
  {
    "text": "whatever so we were trying to we're trying to trade enough like is it worth buying this free minutes like should we start an EMR cluster and we did I'd like",
    "start": "1848720",
    "end": "1857120"
  },
  {
    "text": "to say we decided not to uh we decided to start the cluster anyway um",
    "start": "1857120",
    "end": "1862760"
  },
  {
    "text": "so yeah enter they've introduced a new feature it's called Delta Lake which is a way of doing diffs on uh data in S3 or",
    "start": "1862760",
    "end": "1871399"
  },
  {
    "text": "in hdfs this kind of Falls in line very much with what I'm asking to do right it's like there's the data immutable",
    "start": "1871399",
    "end": "1877700"
  },
  {
    "text": "there's the diff of the data so this is again like an affordance been added by spark to do the kind of diff approach",
    "start": "1877700",
    "end": "1883399"
  },
  {
    "text": "that I'm talking about uh if you do if you if you use Python and you don't know dasp you should check it out it's really cool it's a really good way of uh",
    "start": "1883399",
    "end": "1890919"
  },
  {
    "text": "scaling up analysis using apis that you might already be using to run on",
    "start": "1890919",
    "end": "1896720"
  },
  {
    "text": "multiple cores and under running multiple machines I really like it so we've kind of dealt with provenance",
    "start": "1896720",
    "end": "1902299"
  },
  {
    "text": "we've kind of dealt with reproducibility we haven't really spoke about incrementality we've only got reproducibility and provenance at the",
    "start": "1902299",
    "end": "1910340"
  },
  {
    "text": "level of the dag right we've got one one trick so far unsurprisingly I have more than one weird trick or whatever but I",
    "start": "1910340",
    "end": "1917059"
  },
  {
    "text": "looked around to see where where else had done this and the best example I could find was a place called a company",
    "start": "1917059",
    "end": "1922220"
  },
  {
    "text": "called them they kind of perfectly describe the um",
    "start": "1922220",
    "end": "1927320"
  },
  {
    "text": "the the concerns and they have a data science Bill of Rights which I entirely agree with and I think is a is a useful",
    "start": "1927320",
    "end": "1934159"
  },
  {
    "text": "document to to to discuss these ideas um I they they approach it via an",
    "start": "1934159",
    "end": "1941899"
  },
  {
    "text": "analogy with get which I think has certain affordances but I I had a slight concern so they've layered something",
    "start": "1941899",
    "end": "1948279"
  },
  {
    "text": "Atop The Blob store and I was never entirely happy with that approach",
    "start": "1948279",
    "end": "1953360"
  },
  {
    "text": "um I felt a little bit Vindicated when they announced uh that they'd made it a thousand times faster so so they so they",
    "start": "1953360",
    "end": "1960440"
  },
  {
    "text": "let you run your code on your data oh I should say sorry they have a slightly different approach to the interface the",
    "start": "1960440",
    "end": "1967640"
  },
  {
    "text": "interface third you see process they download the data for you make it available in a posix file system so",
    "start": "1967640",
    "end": "1974480"
  },
  {
    "text": "their interface is a posix file system so they have a lot of data copying that they do outside of your process",
    "start": "1974480",
    "end": "1980659"
  },
  {
    "text": "um which leads the downsides which I'll describe in a moment so they're now a thousand times faster and if you look at",
    "start": "1980659",
    "end": "1986539"
  },
  {
    "text": "the blog post they say in particular for mapreduce style um workloads so they actually try and be",
    "start": "1986539",
    "end": "1992480"
  },
  {
    "text": "also a distributed system thing so they try and be in the space of spark or desk or Hadoop",
    "start": "1992480",
    "end": "1999460"
  },
  {
    "text": "executing arbitrary containers which is which is a non-trivial problem um so they've kind of Taken on I think",
    "start": "1999460",
    "end": "2005980"
  },
  {
    "text": "more of the role than I think is necessary and I think the the interface to S3 not being native is problematic",
    "start": "2005980",
    "end": "2013840"
  },
  {
    "text": "and I felt Vindicated again a little bit that they eventually built an S3 Gateway so you might be in a situation where you",
    "start": "2013840",
    "end": "2019419"
  },
  {
    "text": "have S3 they're thinking in front of it and then an S3 interface to their thing so but",
    "start": "2019419",
    "end": "2025419"
  },
  {
    "text": "um because people just want to run spark and just want to point an S3 folder rather than rather than interface with",
    "start": "2025419",
    "end": "2031240"
  },
  {
    "text": "their um get informed or get analogy uh CLI um and they seem to be making a pivot",
    "start": "2031240",
    "end": "2038320"
  },
  {
    "text": "lately to streaming data which I'm not interested in for this use case uh it doesn't seem to have done them any harm they've just borrowed 10 million dollars",
    "start": "2038320",
    "end": "2045460"
  },
  {
    "text": "um so what I'm proposing my work for the last few months and the",
    "start": "2045460",
    "end": "2052118"
  },
  {
    "text": "hopefully the coming months is I'd like I like airflows DSL so like an airflowish DSL maybe use snake make",
    "start": "2052119",
    "end": "2059440"
  },
  {
    "text": "which is a python tool for this kind of thing or canoe make Allah the",
    "start": "2059440",
    "end": "2064540"
  },
  {
    "text": "um uh people from the children Institute generate some kind of intermediate",
    "start": "2064540",
    "end": "2070118"
  },
  {
    "text": "representation and then just treat step functions or airflow or Argo which is a kubernetes-based workflow engine system",
    "start": "2070119",
    "end": "2076780"
  },
  {
    "text": "treat them as execution engines but do something clever in the intermediate representation so that we have a version",
    "start": "2076780",
    "end": "2083618"
  },
  {
    "text": "and at the level of the task not at the level of the dag so this is my goal uh and again it's the same trick but we",
    "start": "2083619",
    "end": "2090700"
  },
  {
    "text": "just need to give our tasks IDs now rather than the whole dag if we can give our tasks IDs then a dag is composed of",
    "start": "2090700",
    "end": "2098020"
  },
  {
    "text": "a sequence of tasks if each task has an ID and it changes every time the test",
    "start": "2098020",
    "end": "2103240"
  },
  {
    "text": "changes then we're doing okay so I went out to the internet and just asked the",
    "start": "2103240",
    "end": "2108520"
  },
  {
    "text": "internet to solve my problem for me and so I said I want something like a Merkel tree this is really bad grammar I hate reading out",
    "start": "2108520",
    "end": "2114820"
  },
  {
    "text": "um but for the hash the only change if the children if something changes I want to create a dag of compute steps and still result in a gnome folder in S3 so",
    "start": "2114820",
    "end": "2121720"
  },
  {
    "text": "I don't want to build a system on top of S3 I think there's a million lines of go there's a serious engineering effort in",
    "start": "2121720",
    "end": "2127900"
  },
  {
    "text": "packadam and I don't want to do that I want to actually just have a a a simple scheme that lets me say to a process",
    "start": "2127900",
    "end": "2134260"
  },
  {
    "text": "read from these three locations and write to this one yeah that's my goal and the the thing I knew of already was",
    "start": "2134260",
    "end": "2141040"
  },
  {
    "text": "Miracle trees so here you have data at the bottom changing you have a hash of the block but then you have a chain of",
    "start": "2141040",
    "end": "2147400"
  },
  {
    "text": "hash depending on the hashes below them and then there's a top hash top hash can be kind of like the identity of it so I",
    "start": "2147400",
    "end": "2153640"
  },
  {
    "text": "kind of wanted to name the dags and and checks from the tasks in the same scheme",
    "start": "2153640",
    "end": "2159760"
  },
  {
    "text": "um but I didn't couldn't quite think how to do it uh a pal pointed out oh so sorry uh there's no not necessarily a",
    "start": "2159760",
    "end": "2166720"
  },
  {
    "text": "top uh task in our dad because we might have three or four different things fetching",
    "start": "2166720",
    "end": "2171820"
  },
  {
    "text": "from the world right so there's no top node that happens to be in my example unfortunately but there's not necessarily a top node and the",
    "start": "2171820",
    "end": "2177579"
  },
  {
    "text": "dependencies are the other way around to a Merkle tree and so I noodled about with with just trying things",
    "start": "2177579",
    "end": "2184420"
  },
  {
    "text": "um but then a friend pointed out that there's a paper in icfp uh last year called build systems a la carte and",
    "start": "2184420",
    "end": "2190599"
  },
  {
    "text": "where they explored the whole Space of build system systems including distributed build systems build systems",
    "start": "2190599",
    "end": "2195880"
  },
  {
    "text": "are very like the problem that I'm describing right if you change util you need to recompile both Libs and then",
    "start": "2195880",
    "end": "2201820"
  },
  {
    "text": "your executable has changed if you only change main you only need to recompile the mainlib and the main executable send",
    "start": "2201820",
    "end": "2208240"
  },
  {
    "text": "chain so everybody's kind of knows this use case and I kind of knew snake make existed so an analogy of a build system",
    "start": "2208240",
    "end": "2213579"
  },
  {
    "text": "should have been at the front of my head and if I hadn't kept up with icfp uh talking about distributor build systems",
    "start": "2213579",
    "end": "2219880"
  },
  {
    "text": "so you can this this middle example is a so-called shallow build if you only care about the executable you can just",
    "start": "2219880",
    "end": "2225099"
  },
  {
    "text": "download it and that would be the equivalent to US of like downloading the PDF report or whatever",
    "start": "2225099",
    "end": "2231960"
  },
  {
    "text": "but if we change uter we need to rebuild the utilib right but in order to compile",
    "start": "2232359",
    "end": "2238780"
  },
  {
    "text": "the main lib we need to download the main uh sorry the main executable we need to download the main library",
    "start": "2238780",
    "end": "2244900"
  },
  {
    "text": "um so how do we know where to download that from make itself just uses timestamps to",
    "start": "2244900",
    "end": "2250960"
  },
  {
    "text": "know whether a file's changed I can't share a file with you based on the timestamps on my file system so you need",
    "start": "2250960",
    "end": "2256660"
  },
  {
    "text": "some kind of checksum so if you look at the the paper and there's a wonderful talk by Simon Payton Jones it goes into",
    "start": "2256660",
    "end": "2262839"
  },
  {
    "text": "the paper but this is the sort of space this is this is things you care about so the scheduler and then how would you",
    "start": "2262839",
    "end": "2268660"
  },
  {
    "text": "figure out whether things need to change and but what I take away from this paper is anything to the right of topological",
    "start": "2268660",
    "end": "2276460"
  },
  {
    "text": "going vertically allows for dynamic dependencies I don't have that I have a",
    "start": "2276460",
    "end": "2282099"
  },
  {
    "text": "static dive so I'm in that First Column topological Dirty Bit And verifying traces make a ninja did not allow Cloud",
    "start": "2282099",
    "end": "2289060"
  },
  {
    "text": "builds but the first thing in this in the sort of complexity building up is the cloud build allowed uh allows Cloud",
    "start": "2289060",
    "end": "2296200"
  },
  {
    "text": "build it's very well named it turns out um but interestingly from this paper it's probably worth calling out that",
    "start": "2296200",
    "end": "2303460"
  },
  {
    "text": "this hole here between shake and mix the author of Sheikh is one of the co-authors and he wanted to make a",
    "start": "2303460",
    "end": "2309160"
  },
  {
    "text": "cloudy version of shake so they've explored the space and that that there is where he needs to work and and for me",
    "start": "2309160",
    "end": "2316240"
  },
  {
    "text": "Cloud build is what I should be looking at right Cloud build potentially solves my problem also I said before Docker is",
    "start": "2316240",
    "end": "2322240"
  },
  {
    "text": "degenerate Nix is the thing we should be looking at because our dependencies are not a linear sequence of bash commands",
    "start": "2322240",
    "end": "2328599"
  },
  {
    "text": "are they for everything and we need a way of combining Solutions so NYX is essentially that and there you go task",
    "start": "2328599",
    "end": "2335020"
  },
  {
    "text": "functor is somewhat degenerate blah blah blah see proof um",
    "start": "2335020",
    "end": "2340619"
  },
  {
    "text": "so um what is next next as I said is a a complicated but useful way of assembling",
    "start": "2340619",
    "end": "2347619"
  },
  {
    "text": "operating system uh dependencies and uh and compiling them into what might be an",
    "start": "2347619",
    "end": "2352960"
  },
  {
    "text": "image I think this is what this is what should replace Docker uh files in my opinion",
    "start": "2352960",
    "end": "2358240"
  },
  {
    "text": "um cool uh he's correct because he agrees with me",
    "start": "2358240",
    "end": "2363460"
  },
  {
    "text": "um so when I looked at Cloud build Cloud build has a hash so in order to take the",
    "start": "2363460",
    "end": "2368800"
  },
  {
    "text": "hash key of a task you have some global settings and you hash it with the hash of all of its inputs so things depend on",
    "start": "2368800",
    "end": "2375160"
  },
  {
    "text": "their input it's a hash of the hashes good trick uh cash key plus ID for it for every task ideas to stop Franken",
    "start": "2375160",
    "end": "2382300"
  },
  {
    "text": "builds I have enough time to talk about them but it's interesting the paper is interesting remember one of my goals is just that you go oh there's four papers",
    "start": "2382300",
    "end": "2388119"
  },
  {
    "text": "I should read um uh so yeah we don't need the ID and they do combine the contents hash the actual",
    "start": "2388119",
    "end": "2394540"
  },
  {
    "text": "contents of the data gets hacked in this case and the hash of the path because certain build steps might link things or",
    "start": "2394540",
    "end": "2400780"
  },
  {
    "text": "move things so the path changing counters a change the file change encounters a change but we're just using",
    "start": "2400780",
    "end": "2405820"
  },
  {
    "text": "paths so my tasks are just uh just a a description of what I want to execute so",
    "start": "2405820",
    "end": "2412119"
  },
  {
    "text": "we can express that in a dictionary or a hash or an object or a map in whatever programming language we want and then",
    "start": "2412119",
    "end": "2418119"
  },
  {
    "text": "how do you Hash A A an associative data structure that in a way that's multi-language",
    "start": "2418119",
    "end": "2423940"
  },
  {
    "text": "um it sends out the hash function in most programming languages isn't stable between instances of The",
    "start": "2423940",
    "end": "2430960"
  },
  {
    "text": "Interpreter because there's a denial of service attack interestingly discovered in Pearl in 2003 and finally fixed in",
    "start": "2430960",
    "end": "2437200"
  },
  {
    "text": "all other programming languages in 2011 so like a denial of an obvious denial of service attack if you look at more than",
    "start": "2437200",
    "end": "2442839"
  },
  {
    "text": "one programming language wasn't implemented for a while that's an aside but I found that quite interesting because I've done tricks before where",
    "start": "2442839",
    "end": "2448480"
  },
  {
    "text": "I've looked at the arguments say and used the hash of the map of the arguments to to do say memoization or",
    "start": "2448480",
    "end": "2455440"
  },
  {
    "text": "something but the weird trick is being code from a BitTorrent is actually a buy ejection it it constrains slightly what",
    "start": "2455440",
    "end": "2462520"
  },
  {
    "text": "can be in the associative data structure so it only allows integers but it allows lists and dictionaries and it allows you",
    "start": "2462520",
    "end": "2467619"
  },
  {
    "text": "to Nest them and the better and that properly round trips it's about it's a bijection if you take the data structure",
    "start": "2467619",
    "end": "2473500"
  },
  {
    "text": "encode it that's that's unique that's guaranteed to be a binary identical",
    "start": "2473500",
    "end": "2479260"
  },
  {
    "text": "which means we can hash it to get an identity of an associative data stretcher which is what which is what I",
    "start": "2479260",
    "end": "2484720"
  },
  {
    "text": "use and I'm probably going to go into question time I hope you don't mind I've been I I thought I should slow down and",
    "start": "2484720",
    "end": "2491380"
  },
  {
    "text": "be more comprehensible but I've also it's been really hard to not get excited and just step through things so",
    "start": "2491380",
    "end": "2497320"
  },
  {
    "text": "um I'm gonna eat into question time I'm afraid but the task of traction just looks like this I want to download some images I want to run this python code on",
    "start": "2497320",
    "end": "2504280"
  },
  {
    "text": "them right and and in as environment variables it's provided the folders it should use uh here's the code that",
    "start": "2504280",
    "end": "2509980"
  },
  {
    "text": "achieves this not particularly neat but you know around 50 lines of python um we say so I want to download some",
    "start": "2509980",
    "end": "2516700"
  },
  {
    "text": "images I want to create a collage of it so I want to blur them my Docker image is called collage so I'm transforming",
    "start": "2516700",
    "end": "2522579"
  },
  {
    "text": "images with the Blair arguments I'm transforming images with the download images",
    "start": "2522579",
    "end": "2528400"
  },
  {
    "text": "um I'm transforming images and then Edge enhancing them and then I want to collage them so I wanna I wanna I wanna",
    "start": "2528400",
    "end": "2534280"
  },
  {
    "text": "build something like airflow's fluent DSL at the moment I've implemented one method just enough for demo purposes so",
    "start": "2534280",
    "end": "2542020"
  },
  {
    "text": "we can say blur and Edge enhance rely on download collage depends on blur and hands and the dag at the moment is just",
    "start": "2542020",
    "end": "2548980"
  },
  {
    "text": "a list of all the things we need to do this DSL is a work in progress I'll make it more fluent I'll make it more like the the airflow one but just as proof it",
    "start": "2548980",
    "end": "2556240"
  },
  {
    "text": "does work here's the here's a bag um and so interesting we've got these checksums added so when we serialize it",
    "start": "2556240",
    "end": "2563079"
  },
  {
    "text": "we generate outputs for every um task and we have inputs uh as the",
    "start": "2563079",
    "end": "2570280"
  },
  {
    "text": "previous tasks so if you look at this you can say the inputs are download images so you can rederive the graph",
    "start": "2570280",
    "end": "2576160"
  },
  {
    "text": "from this serialized form and like I say this is this is possible in multiple languages and useful so we've got blur",
    "start": "2576160",
    "end": "2582160"
  },
  {
    "text": "and Edge enhanced so the problem is somebody is misunderstood this should have been Tony Blair I'm now realizing",
    "start": "2582160",
    "end": "2587920"
  },
  {
    "text": "that would have been perhaps funnier um so somebody misunderstands the spec and they they blur the image so you go",
    "start": "2587920",
    "end": "2595119"
  },
  {
    "text": "back and you change the code for that bit of the pipeline so hopefully I can step back and forth here so if you look",
    "start": "2595119",
    "end": "2601000"
  },
  {
    "text": "the shaft for the collage bit changes the output bit for sorry the Java blur",
    "start": "2601000",
    "end": "2607960"
  },
  {
    "text": "changes the output for the blur changes the input to collage changes and the",
    "start": "2607960",
    "end": "2613420"
  },
  {
    "text": "output for the whole dag changes so that works right we've changed one part of our dag we've told we know where to",
    "start": "2613420",
    "end": "2619720"
  },
  {
    "text": "Output the answer and we can keep the previous versions don't change the location of output so if we try and",
    "start": "2619720",
    "end": "2625839"
  },
  {
    "text": "execute that task and the data already exists at that location we don't need to perform the task so we've achieved the",
    "start": "2625839",
    "end": "2631300"
  },
  {
    "text": "incrementality at the level of the task that I think is quite a cool idea and is",
    "start": "2631300",
    "end": "2636460"
  },
  {
    "text": "could well be the end at the end of the talk um",
    "start": "2636460",
    "end": "2641680"
  },
  {
    "text": "we've now blurred the image successfully right and we haven't reproduced we haven't done any work now",
    "start": "2641680",
    "end": "2648160"
  },
  {
    "text": "we've got two choices I guess it's like Choose Your Own Adventure oh yeah and the the the the the the Shah",
    "start": "2648160",
    "end": "2655359"
  },
  {
    "text": "wants some of the file does match the when I did a shower one of the being code in it programmatically so we have a",
    "start": "2655359",
    "end": "2662200"
  },
  {
    "text": "way of naming our dags as well so we're going to do Choose Your Own Adventure do we want five minutes worth of questions",
    "start": "2662200",
    "end": "2669579"
  },
  {
    "text": "or do we want five minutes worth of other cool things you might like or can I just share them in a thing so can we",
    "start": "2669579",
    "end": "2675940"
  },
  {
    "text": "can we vote hands up for questions cool things okay the the uh I'm optimizing",
    "start": "2675940",
    "end": "2681579"
  },
  {
    "text": "for the for the for the for the Bold but let's do it so what if you don't write the code yourself we add some tool does",
    "start": "2681579",
    "end": "2686980"
  },
  {
    "text": "this hello was teasing me that I always talk about these so this time I won't um if you if your code that you didn't",
    "start": "2686980",
    "end": "2693339"
  },
  {
    "text": "write expect a file system you can add something that is a network file system",
    "start": "2693339",
    "end": "2698740"
  },
  {
    "text": "in it so you can use elastic file system which isn't just an NFS volume you can use gluster or ceph if you're using",
    "start": "2698740",
    "end": "2705160"
  },
  {
    "text": "kubernetes Rook is like a ceph integrated into kubernetes so if you're a third-party software doesn't allow you",
    "start": "2705160",
    "end": "2711520"
  },
  {
    "text": "to just point to S3 and say read from there you can you can you could use a file system instead you can use the same check on a file system you could use the",
    "start": "2711520",
    "end": "2717940"
  },
  {
    "text": "same trick on databases you could name the database with the the unique ID",
    "start": "2717940",
    "end": "2723040"
  },
  {
    "text": "we've generated if sha1's not enough you could share256 it",
    "start": "2723040",
    "end": "2728140"
  },
  {
    "text": "um you could Mount S3 out as a file system watch out though this might be performance issues so Benchmark",
    "start": "2728140",
    "end": "2733780"
  },
  {
    "text": "Benchmark Benchmark a criticism of lots of serverless techniques uh is is that",
    "start": "2733780",
    "end": "2739060"
  },
  {
    "text": "this is like a data shipping architecture this is a great paper that uh complains serverless as a data",
    "start": "2739060",
    "end": "2744339"
  },
  {
    "text": "shipping architecture uh Manta kind of had the right idea from giant execute the code next to where the data is so",
    "start": "2744339",
    "end": "2749920"
  },
  {
    "text": "it's an S3 like uh blob store but you can run code adjacent to it and that you",
    "start": "2749920",
    "end": "2755380"
  },
  {
    "text": "but we're starting to see things like that in S3 select uh push some of the decision of what keys to surface to the",
    "start": "2755380",
    "end": "2762819"
  },
  {
    "text": "system announced this week faster query by moving some of the compute next to the storage so moving computer storage",
    "start": "2762819",
    "end": "2769599"
  },
  {
    "text": "was the lesson of Hadoop and we've kind of forgot that now if all of our spark jobs are reading and writing to S3 we've",
    "start": "2769599",
    "end": "2775599"
  },
  {
    "text": "kind of forgot that like co-hosted uh bring the computer the data rather than the other way around some things are",
    "start": "2775599",
    "end": "2781420"
  },
  {
    "text": "embarrassingly parallel this is a great um thing where they're using getting good benchmarks for from Lambda",
    "start": "2781420",
    "end": "2789099"
  },
  {
    "text": "um and in the embarrassingly parallel case they have a a map and monolithic reduce",
    "start": "2789099",
    "end": "2795220"
  },
  {
    "text": "pattern which would fall in line with our thing I'd like I'd like my framework to say instead of taking this folder and",
    "start": "2795220",
    "end": "2800560"
  },
  {
    "text": "output in this folder I want to process every file in this folder in the same way and do it in parallel so take",
    "start": "2800560",
    "end": "2806140"
  },
  {
    "text": "advantage of embarrassingly parallel things there's a there's a paper by Guy Steele I think in 89 saying how we can",
    "start": "2806140",
    "end": "2813460"
  },
  {
    "text": "organize compute reduce uh is considered harmful so if we can split up the data",
    "start": "2813460",
    "end": "2818560"
  },
  {
    "text": "and organize it in a certain way we can get a deterministic parallel computations uh we can do this like",
    "start": "2818560",
    "end": "2826420"
  },
  {
    "text": "reducing combine idea we need two functions rather than one and they need to have certain properties but we can split up our data and have deterministic",
    "start": "2826420",
    "end": "2833560"
  },
  {
    "text": "results in in and allow for some parallelism closure implements that in reduces so another good idea from a",
    "start": "2833560",
    "end": "2840040"
  },
  {
    "text": "while ago implemented fairly recently in a new functional programming language if you use Python and you quite like",
    "start": "2840040",
    "end": "2845619"
  },
  {
    "text": "functional ideas Pi tools is very good and I won't go through what might be next steps for me but I thank you for",
    "start": "2845619",
    "end": "2852220"
  },
  {
    "text": "your Indulgence [Applause]",
    "start": "2852220",
    "end": "2860760"
  }
]