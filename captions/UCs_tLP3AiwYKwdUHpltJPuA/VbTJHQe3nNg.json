[
  {
    "text": "[Applause] okay so what am I going to talk about I'm going to talk about performance",
    "start": "4800",
    "end": "10160"
  },
  {
    "text": "going to talk a little bit about technology so it's not going to be as exciting as going to Mars but we're going to try and make our computers go a",
    "start": "10160",
    "end": "16520"
  },
  {
    "text": "little bit faster like anybody here Formula 1 fans since this weekend we're going to have Formula 1 I'm a huge",
    "start": "16520",
    "end": "22400"
  },
  {
    "text": "Formula 1 fan too who would like to drive a Formula 1",
    "start": "22400",
    "end": "28000"
  },
  {
    "text": "car do you think you would drive well I can tell you I've driven a",
    "start": "28000",
    "end": "34079"
  },
  {
    "text": "Formula 3000 car and it is really really difficult some programming languages are",
    "start": "34079",
    "end": "40000"
  },
  {
    "text": "a bit like that I feel they're just really really difficult to use like I like lots of languages or right C or",
    "start": "40000",
    "end": "45800"
  },
  {
    "text": "right C++ read Java I even read JavaScript at times for my sins and some assembler and C++ is particularly hard I",
    "start": "45800",
    "end": "53840"
  },
  {
    "text": "find it's quite like driving some of these fast cars there's so much you've got to learn so I want to explore a",
    "start": "53840",
    "end": "58920"
  },
  {
    "text": "little bit of the technology ology behind some of these and some of the things that I often find I I get brought into organizations",
    "start": "58920",
    "end": "66479"
  },
  {
    "text": "and asked like what is your favorite language what's your favorite platform for writing high frequency trading",
    "start": "66479",
    "end": "72479"
  },
  {
    "text": "applications what will it be like oh yeah yeah you talk about Java but it's probably really C isn't it it's probably",
    "start": "72479",
    "end": "79720"
  },
  {
    "text": "C++ and whenever I give this answer people usually a bit shocked like do",
    "start": "79720",
    "end": "84759"
  },
  {
    "text": "Java really not c not C++ kind of crazy",
    "start": "84759",
    "end": "90079"
  },
  {
    "text": "and they'll follow it up with this question and they're basically asking why would you do low latency on a",
    "start": "90079",
    "end": "96720"
  },
  {
    "text": "garbage collected environment and at this stage there's usually a bunch of older C C++ programmers in the room and",
    "start": "96720",
    "end": "103960"
  },
  {
    "text": "they're looking at me like this that's kind of typically what's going on in this because you kind of",
    "start": "103960",
    "end": "109759"
  },
  {
    "text": "feel a little bit like this so let's cover a few things here first of all I want to set some context so we know what",
    "start": "109759",
    "end": "117079"
  },
  {
    "text": "we're talking about so to begin begin with I want to be absolutely clear that a manage runtime is not always your best",
    "start": "117079",
    "end": "124680"
  },
  {
    "text": "choice it's not always even a good choice to do certain things there are certain classes of problems that it just",
    "start": "124680",
    "end": "130720"
  },
  {
    "text": "doesn't fit so here's one very simple example latency Arbitrage if anybody's in",
    "start": "130720",
    "end": "136560"
  },
  {
    "text": "finance latency Arbitrage is where you're trying to be the absolute fastest in the market you're trading time at",
    "start": "136560",
    "end": "143440"
  },
  {
    "text": "this stage would you be writing Java would you be writing C neither of those",
    "start": "143440",
    "end": "148480"
  },
  {
    "text": "that's not what people do in that space what you're typically doing is you're programming Hardware directly you're",
    "start": "148480",
    "end": "154599"
  },
  {
    "text": "doing fpgs or as6 in the switch itself right next to the exchange so it's a very different kind of world I'm not",
    "start": "154599",
    "end": "161319"
  },
  {
    "text": "talking about that I want to talk a bit about like our native language is faster than our",
    "start": "161319",
    "end": "167319"
  },
  {
    "text": "manage run times so by manage run times I'm talking sort of java CP JavaScript",
    "start": "167319",
    "end": "172480"
  },
  {
    "text": "go lots of other interesting languages that we have in this space and what they can",
    "start": "172480",
    "end": "178040"
  },
  {
    "text": "do and when you look at it like which is actually faster so is C faster than Java",
    "start": "178040",
    "end": "185040"
  },
  {
    "text": "well if I'm going to be honest about that it is given enough time and you're",
    "start": "185040",
    "end": "190319"
  },
  {
    "text": "into this question here it's like you how much time have you what access the skills have you what resources have you",
    "start": "190319",
    "end": "197319"
  },
  {
    "text": "and also what is the scope of your problem you're dealing with like on a very large application it's very",
    "start": "197319",
    "end": "203239"
  },
  {
    "text": "difficult to get everything right and having access to all of the skills to do some of this so let's break the problem",
    "start": "203239",
    "end": "210319"
  },
  {
    "text": "down and look at where are we really looking at making things fast where are we wasting our time where are we saving",
    "start": "210319",
    "end": "216000"
  },
  {
    "text": "our time and for this I want to talk about running software on CPUs accessing",
    "start": "216000",
    "end": "222959"
  },
  {
    "text": "memory I'm going to constrain the scope a little bit here so I'm not talking about going to the network going to disk",
    "start": "222959",
    "end": "230080"
  },
  {
    "text": "some of those things are different and they're different by language and by library but if we're going to have a language war and debate all of that",
    "start": "230080",
    "end": "236959"
  },
  {
    "text": "we're really talking about programs running on CPU use accessing memory where do we spend our time on where are",
    "start": "236959",
    "end": "243239"
  },
  {
    "text": "the cost in this and where can things be faster so to see if you are all awake to begin with can anybody answer the",
    "start": "243239",
    "end": "250799"
  },
  {
    "text": "question of how long does it take to add two integers on a modern CPU so you've",
    "start": "250799",
    "end": "256400"
  },
  {
    "text": "got the integer values in registers how long does it take to add to",
    "start": "256400",
    "end": "262000"
  },
  {
    "text": "integers sorry depends X6 64-bit typical Intel AR",
    "start": "262000",
    "end": "269600"
  },
  {
    "text": "ecture or AMD what do you think it would",
    "start": "269600",
    "end": "273840"
  },
  {
    "text": "be yeah kind of getting in there any other ones on",
    "start": "275199",
    "end": "282000"
  },
  {
    "text": "that one operation doing a",
    "start": "282000",
    "end": "287440"
  },
  {
    "text": "yes yeah one cycle is actually your answer so if you're on a 3 GHz CPU",
    "start": "290759",
    "end": "297360"
  },
  {
    "text": "that's a third of a nanc it's it's a tiny amount of time very very tiny if",
    "start": "297360",
    "end": "303080"
  },
  {
    "text": "you're interested in any of this stuff go to anger fog's uh blog really good thing talking about how to optimize at a",
    "start": "303080",
    "end": "308840"
  },
  {
    "text": "very low level but let's look at something more interesting let's say I'm going to do",
    "start": "308840",
    "end": "315479"
  },
  {
    "text": "that addition operation on an array of integers so I've got a one gigabyte",
    "start": "315479",
    "end": "321120"
  },
  {
    "text": "array of integers now I'm going to go over it and going to sum up every integer in that array and I'm going to",
    "start": "321120",
    "end": "328039"
  },
  {
    "text": "look at what is the average time per operation and if you think each operation involves loading in the new",
    "start": "328039",
    "end": "335400"
  },
  {
    "text": "value from the array summon it with the value that you've already got that you've totaled up so far and storing",
    "start": "335400",
    "end": "341880"
  },
  {
    "text": "that in a scalar and moving on you have to do a number of things because you're having to increment the loop counter",
    "start": "341880",
    "end": "347720"
  },
  {
    "text": "you're fetching memory you're storing memory you're doing a number of different things at that stage how long",
    "start": "347720",
    "end": "355120"
  },
  {
    "text": "per operation to do that on average any guesses",
    "start": "355120",
    "end": "361479"
  },
  {
    "text": "many cycles what we think few more lots more",
    "start": "361680",
    "end": "370360"
  },
  {
    "text": "hundreds hundreds let's Benchmark it let's see what we get as an",
    "start": "370360",
    "end": "376759"
  },
  {
    "text": "answer it's 08 of a nanc per",
    "start": "376759",
    "end": "381800"
  },
  {
    "text": "operation and you kind of thinking hang on there's many steps to that it's not just one step and if it's one cycle to",
    "start": "381800",
    "end": "388960"
  },
  {
    "text": "do the addition how we at that like really is it one nanc per operation kind",
    "start": "388960",
    "end": "395240"
  },
  {
    "text": "interesting question well let's look into what a modern CPU looks like internally so if",
    "start": "395240",
    "end": "402560"
  },
  {
    "text": "you were sort of studying computer science back in school some time ago you would have been taught there's an ALU",
    "start": "402560",
    "end": "408080"
  },
  {
    "text": "there's memory so there's one arithmetic and logic unit that's actually very simplified view of really what's going",
    "start": "408080",
    "end": "414080"
  },
  {
    "text": "on in CPU this is an Intel Haswell architecture on this we have got eight",
    "start": "414080",
    "end": "420199"
  },
  {
    "text": "execution ports of which we have many execution units attached to and on the same thread we have instruction level",
    "start": "420199",
    "end": "427759"
  },
  {
    "text": "parallelism so you can have one port is doing the addition that you've got for",
    "start": "427759",
    "end": "433199"
  },
  {
    "text": "the summation going over the counter another Port is doing the",
    "start": "433199",
    "end": "441080"
  },
  {
    "text": "load of the Nyx value all simultaneously all pipelined there's a lot of",
    "start": "441080",
    "end": "446199"
  },
  {
    "text": "parallelism going on within our CPUs so we're whizzing through this data incredibly fast these things are quite",
    "start": "446199",
    "end": "453280"
  },
  {
    "text": "complicated so less than a nanosecond so like typically you're running around two",
    "start": "453280",
    "end": "459199"
  },
  {
    "text": "cycles per operation many things are happening at the same",
    "start": "459199",
    "end": "464720"
  },
  {
    "text": "time now let's ask a much more interesting question what if the access",
    "start": "464720",
    "end": "469960"
  },
  {
    "text": "pattern is different let's say I'm not just going linearly through this array adding up",
    "start": "469960",
    "end": "476440"
  },
  {
    "text": "everything if I want to go with with different patterns let's use different patterns let's",
    "start": "476440",
    "end": "481680"
  },
  {
    "text": "Benchmark it and like some of the patterns that are interesting is like let's randomly go around the array I'm",
    "start": "481680",
    "end": "487400"
  },
  {
    "text": "going to have a random calculation that's not going to affect the work but it's going to do the same amount of work",
    "start": "487400",
    "end": "492680"
  },
  {
    "text": "just with a different pattern of access and they do random within an operating system page random across the old Heap",
    "start": "492680",
    "end": "499960"
  },
  {
    "text": "make it even more interesting make it random with the nextstep you take is dependent on the value of the previous",
    "start": "499960",
    "end": "507039"
  },
  {
    "text": "thing that you've read that starts to make a difference to The Logical pattern",
    "start": "507039",
    "end": "512680"
  },
  {
    "text": "let's see what it does to the time now each of these cases is the same amount",
    "start": "512680",
    "end": "517760"
  },
  {
    "text": "of work so if I start benchmarking them I see that the sequential pattern yep",
    "start": "517760",
    "end": "523880"
  },
  {
    "text": "less than a nanc to do that going round them within an operating system page and then moving on to the next operating",
    "start": "523880",
    "end": "530240"
  },
  {
    "text": "system page it's still only 2.7 n seconds going random around the whole",
    "start": "530240",
    "end": "536360"
  },
  {
    "text": "heap we're up to nearly 20 NS but if we go round and around the whole heap where",
    "start": "536360",
    "end": "541600"
  },
  {
    "text": "we're dependent on the last value of red we're up to 90 nanoseconds so two orders of magnitude",
    "start": "541600",
    "end": "548640"
  },
  {
    "text": "difference based upon the pattern of access not the amount of work so it's",
    "start": "548640",
    "end": "554519"
  },
  {
    "text": "quite different and how we look at that and you'll hear this term about Pointer chasing lowlevel C programmers are very",
    "start": "554519",
    "end": "561560"
  },
  {
    "text": "worth it data dependent loads is how process processor designers talk about",
    "start": "561560",
    "end": "567360"
  },
  {
    "text": "this is that you can't take the next step in memory till you can resolve the previous step that you need to take so",
    "start": "567360",
    "end": "574320"
  },
  {
    "text": "if I got a pointer to an object and it points to another object I can't go to the second object to have resolved the",
    "start": "574320",
    "end": "580560"
  },
  {
    "text": "first object it's dependent on the first one that's like the random stepping around so it's a very interesting",
    "start": "580560",
    "end": "587040"
  },
  {
    "text": "problem that we have to deal with why is the dependent one much uh more expensive",
    "start": "587040",
    "end": "592760"
  },
  {
    "text": "than the random pattern with no dependency our CPUs can do stuff in parallel so we can have 10 and",
    "start": "592760",
    "end": "599399"
  },
  {
    "text": "concurrent cash misses at the same time so we just go back and look at the figures like random Heap and random",
    "start": "599399",
    "end": "605800"
  },
  {
    "text": "dependent Heap are quite different because we can have the CPU going off randomly finding the next hand values",
    "start": "605800",
    "end": "613000"
  },
  {
    "text": "and it alizes the cost if it's dependent on the previous step so just think of",
    "start": "613000",
    "end": "618200"
  },
  {
    "text": "teams and people working when everybody in the team is dependent on one other person it chokes the team it's the same",
    "start": "618200",
    "end": "625079"
  },
  {
    "text": "thing on our algorithms you'll find that the math appears in lots of different places",
    "start": "625079",
    "end": "630519"
  },
  {
    "text": "so what we've learned there is the actual computation is almost free it's",
    "start": "630519",
    "end": "637320"
  },
  {
    "text": "irrelevant the patterns of access is what really matters to the performance of your code and let's go in and we'll",
    "start": "637320",
    "end": "644480"
  },
  {
    "text": "look at well what does this mean for the code that our compilers generates or the code that we",
    "start": "644480",
    "end": "649920"
  },
  {
    "text": "write so few things that are different about a man's runtime one of the things",
    "start": "649920",
    "end": "655560"
  },
  {
    "text": "is the runtime can make optimization decisions based upon data it's seen at runtime from your real application a",
    "start": "655560",
    "end": "663160"
  },
  {
    "text": "static compiler has to make all of its optimization decisions up front without seeing your data now there are compilers",
    "start": "663160",
    "end": "670920"
  },
  {
    "text": "where you can do a profile guided build run that build with some test data",
    "start": "670920",
    "end": "677000"
  },
  {
    "text": "then rerun the compiler and it'll optimize more for that set of data but that training set of data better be",
    "start": "677000",
    "end": "682800"
  },
  {
    "text": "exactly like what you're going to see at runtime otherwise it'll optimize wrongly",
    "start": "682800",
    "end": "689000"
  },
  {
    "text": "you can do that very few people do it and do it well so you tend to not do that we just rely on normal static",
    "start": "689000",
    "end": "695560"
  },
  {
    "text": "optimization so our run times have a lot more information but also our run times have",
    "start": "695560",
    "end": "701880"
  },
  {
    "text": "another big trick up their sleeves is they can take bats and it's okay to be",
    "start": "701880",
    "end": "706959"
  },
  {
    "text": "wrong so if anybody here's a fan of agile programming what do we know about agile is that we don't know all the",
    "start": "706959",
    "end": "713880"
  },
  {
    "text": "answers up front we're going to learn more information as we go and that",
    "start": "713880",
    "end": "718959"
  },
  {
    "text": "information we learn later is much more valuable than having a gas up front and being",
    "start": "718959",
    "end": "724399"
  },
  {
    "text": "wrong our run times can do the same thing is they can put off stuff they can take bats they can have an attempt at",
    "start": "724399",
    "end": "731279"
  },
  {
    "text": "something and if it's wrong it's okay feel fast and go again manage run times",
    "start": "731279",
    "end": "736320"
  },
  {
    "text": "have these options so let's look at some real concrete examples like our code we can have",
    "start": "736320",
    "end": "744199"
  },
  {
    "text": "methods and we've got lots of branches inside our method so our if statements are branches switch statements for Loops",
    "start": "744199",
    "end": "750760"
  },
  {
    "text": "W lips these are all branches so I've got a block of code at the top I have an",
    "start": "750760",
    "end": "756440"
  },
  {
    "text": "if condition with some code inside it and then I've got some code afterwards remember the sequential",
    "start": "756440",
    "end": "762920"
  },
  {
    "text": "access pattern if you go sequentially through something it's much faster the reason that is actually faster is for a",
    "start": "762920",
    "end": "769160"
  },
  {
    "text": "number of uh things one of them is we have Hardware prefetchers if you go through something with a pattern of",
    "start": "769160",
    "end": "775639"
  },
  {
    "text": "access the hardware can go ahead and prefetch the stuff having it ready for you before you actually need it to it",
    "start": "775639",
    "end": "781639"
  },
  {
    "text": "primes the pipeline and so if you go through any code linearly it will be",
    "start": "781639",
    "end": "786880"
  },
  {
    "text": "faster because code is just data like anything else so our compiler could look at this",
    "start": "786880",
    "end": "793519"
  },
  {
    "text": "code and think well this condition is always taken so I'm going to let out the",
    "start": "793519",
    "end": "798880"
  },
  {
    "text": "code one way or may think this Co condition is hardly ever taken I'll let out the code differently our static",
    "start": "798880",
    "end": "804639"
  },
  {
    "text": "compilers don't know that we can hint that if we want to so in C or C++ I can",
    "start": "804639",
    "end": "810120"
  },
  {
    "text": "hint a branch and say that this branch is likely to be taken or it's unlikely to be taken now imagine doing that",
    "start": "810120",
    "end": "816480"
  },
  {
    "text": "across a really large code Bas getting everything right it's incredibly difficult to do but if we're measuring",
    "start": "816480",
    "end": "823519"
  },
  {
    "text": "it run time it's different so we have a block of code here we then hit the",
    "start": "823519",
    "end": "829680"
  },
  {
    "text": "condition we have another block of code and we have the final block of code now",
    "start": "829680",
    "end": "835320"
  },
  {
    "text": "what if this branch is really unlikely to be taken well it would make much more sense to",
    "start": "835320",
    "end": "840680"
  },
  {
    "text": "lay out block a followed straight away by Block C with an uncommon trap for",
    "start": "840680",
    "end": "846839"
  },
  {
    "text": "Block B if it's ever taken that is a much more efficient layout the runtime can do that it can generate that",
    "start": "846839",
    "end": "853680"
  },
  {
    "text": "assembly code it may choose to not even compile B and just leave it running in",
    "start": "853680",
    "end": "858720"
  },
  {
    "text": "The Interpreter because it's so infrequently executed like what would be a good example of this like if this is",
    "start": "858720",
    "end": "864560"
  },
  {
    "text": "null do a special case very often our code we do lots of ER checking where",
    "start": "864560",
    "end": "870040"
  },
  {
    "text": "things should hardly ever drop they're just there for protection and they're good to have them there but we do want",
    "start": "870040",
    "end": "876519"
  },
  {
    "text": "to take the expense of all of that we also have subtle branches in our",
    "start": "876519",
    "end": "881639"
  },
  {
    "text": "code so if I is greater than seven I'll use a otherwise I'll use B so let's say",
    "start": "881639",
    "end": "888920"
  },
  {
    "text": "we have no idea what I is and 50/50 it's going to be greater than seven 50/50 is",
    "start": "888920",
    "end": "894199"
  },
  {
    "text": "going to be less than seven there's no real way to deal with that our bronze predictors may get that right may get it",
    "start": "894199",
    "end": "900399"
  },
  {
    "text": "wrong they're pretty good generally but they're not good with truly random versions of this but if it was high 90%",
    "start": "900399",
    "end": "908279"
  },
  {
    "text": "likelihood one or the other the branch predictor is what we want to rely on but things like a C6 have special",
    "start": "908279",
    "end": "915519"
  },
  {
    "text": "instructions like C move which is a conditional move without a branch in the processor that is really good in the cas",
    "start": "915519",
    "end": "922720"
  },
  {
    "text": "for something is unpredictable it'll be faster than the unpredictable case so",
    "start": "922720",
    "end": "928160"
  },
  {
    "text": "which inst instruction do you generate if you can measure your code at runtime you can see what sort of data you're",
    "start": "928160",
    "end": "934240"
  },
  {
    "text": "really throwing at it and the compiler can generate the right thing otherwise we wouldn't be able to do",
    "start": "934240",
    "end": "940040"
  },
  {
    "text": "that methods we inline stuff at times we put calls from one block to",
    "start": "940040",
    "end": "947360"
  },
  {
    "text": "another so here we got a method Fu inside there it's got a bunch of code and in a calls bar in the middle so got",
    "start": "947360",
    "end": "955279"
  },
  {
    "text": "a block of code at the top with the call to bar it has to jump out to code",
    "start": "955279",
    "end": "961480"
  },
  {
    "text": "somewhere else execute bar return back again and then do the code",
    "start": "961480",
    "end": "967720"
  },
  {
    "text": "afterwards that is not a very nice pattern to go plus we've got the function called",
    "start": "967720",
    "end": "974000"
  },
  {
    "text": "overhead now what if this code is really hot we do it very often the compiler can",
    "start": "974000",
    "end": "980120"
  },
  {
    "text": "compile up block a and then just inline the code for",
    "start": "980120",
    "end": "985279"
  },
  {
    "text": "bar fuse it in without even taking the function color overhead and then do Block B nice and linear through that",
    "start": "985279",
    "end": "993399"
  },
  {
    "text": "that would make our code much faster yes we can do this in C we can do it in C++",
    "start": "993399",
    "end": "998800"
  },
  {
    "text": "as well but again we have to tell where we want it to happen and we're often wrong also we don't want to inline",
    "start": "998800",
    "end": "1006079"
  },
  {
    "text": "everything because we have a small cache for instructions we have only 32 kilobytes of cash for instructions in",
    "start": "1006079",
    "end": "1013079"
  },
  {
    "text": "our CPUs and if we make our program too big by in lining a lot we end up with code blo and we destroying the cash so",
    "start": "1013079",
    "end": "1019880"
  },
  {
    "text": "it's a balancing act we want to in line where it's worthwhile and not in line where it's not worthwhile can you guess",
    "start": "1019880",
    "end": "1027120"
  },
  {
    "text": "that right over hundreds of thousands of lines of code everywhere it should be done it's an interesting challenge to",
    "start": "1027120",
    "end": "1033079"
  },
  {
    "text": "try and do that I've seen people attempt it I've seen it happen in the Linux kernel and get it wrong in many places",
    "start": "1033079",
    "end": "1039240"
  },
  {
    "text": "and they had to back out the changes and some smart people were writing that code this steal a quote from Cliff click",
    "start": "1039240",
    "end": "1045959"
  },
  {
    "text": "inlining is the optimization and most code but knowing where to do it is the real trick like Clifton is entire PhD",
    "start": "1045959",
    "end": "1053960"
  },
  {
    "text": "anybody who doesn't know Cliff click wrote the hotspot compiler jit for uh Sun back at the end of the 90s it become",
    "start": "1053960",
    "end": "1061240"
  },
  {
    "text": "the C2 compiler was the main reason Java got fast in the first place and he spent his entire PhD on working out when do I",
    "start": "1061240",
    "end": "1069200"
  },
  {
    "text": "inline stuff versus where do I not inline stuff and he came up with this concept of the Sea of nodes which does a",
    "start": "1069200",
    "end": "1075080"
  },
  {
    "text": "cost based calculation on the ideal places to do it and where not to do it because there's lots of other things",
    "start": "1075080",
    "end": "1080520"
  },
  {
    "text": "come with that cuz once you inline you increase visibility you can then apply",
    "start": "1080520",
    "end": "1085640"
  },
  {
    "text": "other optimizations but you don't want to do it if you're going to end up hurting so Loops another good example we",
    "start": "1085640",
    "end": "1093320"
  },
  {
    "text": "spend over 80% of the time in our code and Loops there's lots of studies that show that so we want to optimize Some",
    "start": "1093320",
    "end": "1099919"
  },
  {
    "text": "Loops but which Loops not all Loops a simple Technique we can do to optimize a loop is to unroll it so rather than take",
    "start": "1099919",
    "end": "1107960"
  },
  {
    "text": "the loop overhead for every iteration we can unroll it to be four eight or 16",
    "start": "1107960",
    "end": "1113440"
  },
  {
    "text": "times per iteration we can do some neat things with vectorization on top of that but",
    "start": "1113440",
    "end": "1119679"
  },
  {
    "text": "where do we do it we got to pick the right places to do it and we can go even",
    "start": "1119679",
    "end": "1124720"
  },
  {
    "text": "further where sometimes we have certain instructions that would require or just",
    "start": "1124720",
    "end": "1130159"
  },
  {
    "text": "even operations that we do that require many different instructions some CPUs",
    "start": "1130159",
    "end": "1135200"
  },
  {
    "text": "have specialized forms of those that we can call Direct ly like bit count be an example if you've programmed any data",
    "start": "1135200",
    "end": "1141640"
  },
  {
    "text": "structures like tries you have to count the number of bits in the word quite often that takes tens of instructions to",
    "start": "1141640",
    "end": "1147679"
  },
  {
    "text": "do it but if you're running on a CPU that's got ssse 4.2 instruction set enabled you have the pop count",
    "start": "1147679",
    "end": "1154000"
  },
  {
    "text": "instruction the runtime con query what CPU am I running on oh fine I can issue",
    "start": "1154000",
    "end": "1159960"
  },
  {
    "text": "that instruction instead it's a single cycle instruction now you can compile for that platform but then you're",
    "start": "1159960",
    "end": "1166840"
  },
  {
    "text": "targeting a platform other than working out what you're running on at run time and then generating the right",
    "start": "1166840",
    "end": "1174480"
  },
  {
    "text": "instructions objects are really fascinating one and this is the one where when you come to a manage runtime",
    "start": "1174480",
    "end": "1181559"
  },
  {
    "text": "versus say something like C++ is when I'm writing C++ I wish I have this",
    "start": "1181559",
    "end": "1186919"
  },
  {
    "text": "feature all the time and this is to deal with polymorphism so like my draw method",
    "start": "1186919",
    "end": "1192600"
  },
  {
    "text": "on a ship is polymorphic each ship can Implement a different draw method a circle draws itself one way way a square",
    "start": "1192600",
    "end": "1199520"
  },
  {
    "text": "draws another way polygon another way so you get multiple implementations which one do you call",
    "start": "1199520",
    "end": "1207640"
  },
  {
    "text": "now quite often in many cases on our code we only deal with one type at a",
    "start": "1207640",
    "end": "1213360"
  },
  {
    "text": "call site and where call meaning to the line of code that's calling this you may call that method somewhere else in your",
    "start": "1213360",
    "end": "1219520"
  },
  {
    "text": "code that's a different call site at that call site you may only have one",
    "start": "1219520",
    "end": "1224919"
  },
  {
    "text": "implementation of that polymorphic type it's known as monomorphism with",
    "start": "1224919",
    "end": "1230400"
  },
  {
    "text": "monomorphism we can get rid of the virtual dispatch we can even inline the",
    "start": "1230400",
    "end": "1235520"
  },
  {
    "text": "specific implementation at that call site and we can deal with this at Wrong Time by knowing how many types do we",
    "start": "1235520",
    "end": "1241640"
  },
  {
    "text": "deal with at that given call site if there's two types we can go biomorphic just add a if",
    "start": "1241640",
    "end": "1248000"
  },
  {
    "text": "statement going into three or four different types depending on which runtime you can then go meam morphic and",
    "start": "1248000",
    "end": "1253919"
  },
  {
    "text": "you have to use a jump table and resolve at run time which method I'm calling and that takes a cost in C++ if you use the",
    "start": "1253919",
    "end": "1260720"
  },
  {
    "text": "virtual keyword you take that cost all the time C sharp unfortunately even",
    "start": "1260720",
    "end": "1266200"
  },
  {
    "text": "though it's a manage runtime it doesn't have this optimization that Java has and JavaScript also has the same",
    "start": "1266200",
    "end": "1272679"
  },
  {
    "text": "optimization but C doesn't have this optimization it's known as class hierarchy analysis so we've got that one",
    "start": "1272679",
    "end": "1280080"
  },
  {
    "text": "call site we may have another call site somewhere else different method we're",
    "start": "1280080",
    "end": "1285200"
  },
  {
    "text": "calling could be polymorphic could not be polymorphic but what's really fascinating about",
    "start": "1285200",
    "end": "1290720"
  },
  {
    "text": "class hierarchy analysis is that not only can we determine is there one type used that I think are only two types or",
    "start": "1290720",
    "end": "1297279"
  },
  {
    "text": "whatever it happens to be we can also find the most common type so one of the really nice optimizations right back",
    "start": "1297279",
    "end": "1303159"
  },
  {
    "text": "from the small talk de was a thing called inline caching so if you find at that call site 90% of your types or one",
    "start": "1303159",
    "end": "1311080"
  },
  {
    "text": "particular type and the less than 10% or some other type you can cach the",
    "start": "1311080",
    "end": "1316640"
  },
  {
    "text": "implementation of the really common one at the call site and benefit really well so lots of quite cool",
    "start": "1316640",
    "end": "1324039"
  },
  {
    "text": "stuff so hopefully that's surprise some people a little bit that our runtimes",
    "start": "1324039",
    "end": "1329080"
  },
  {
    "text": "can do cool stuff",
    "start": "1329080",
    "end": "1332919"
  },
  {
    "text": "question sorry we're recording we'll have the questions at the end but",
    "start": "1342400",
    "end": "1348559"
  },
  {
    "text": "we'll take the question at the end there's many types of polymorphism so",
    "start": "1348559",
    "end": "1353600"
  },
  {
    "text": "overloading as overriding at that case is the different type from overloading versus parametric there's many different",
    "start": "1353600",
    "end": "1360440"
  },
  {
    "text": "ways I'm talking particularly about overriding polymorphism in this case so",
    "start": "1360440",
    "end": "1366159"
  },
  {
    "text": "garbage collection is the other really interesting one so people will say well garbage collection kind of useful",
    "start": "1366159",
    "end": "1372320"
  },
  {
    "text": "feature big runtime performance hit how can something that a manage runtime ever",
    "start": "1372320",
    "end": "1378039"
  },
  {
    "text": "compete with a native language in that so let's look a little bit into what garbage collection does and what do we",
    "start": "1378039",
    "end": "1385080"
  },
  {
    "text": "need to care about I want to start off by stealing a quote from the singer bil",
    "start": "1385080",
    "end": "1390159"
  },
  {
    "text": "Joe where he said that only the good D young this very much applies to our",
    "start": "1390159",
    "end": "1395919"
  },
  {
    "text": "objects the shorter an object lives the less it costs this is pretty much",
    "start": "1395919",
    "end": "1401400"
  },
  {
    "text": "standard across most run times of most garbage collectors so very shortlived objects are very cheap to deal with",
    "start": "1401400",
    "end": "1408000"
  },
  {
    "text": "longer lived objects become more expensive and this observation that most",
    "start": "1408000",
    "end": "1413559"
  },
  {
    "text": "objects don't actually live very long is known as the weak generational hypothesis discovered quite some time",
    "start": "1413559",
    "end": "1419840"
  },
  {
    "text": "ago this resulted in what are known as generational garbage collectors and the generational garbage collectors rely on",
    "start": "1419840",
    "end": "1426400"
  },
  {
    "text": "the fact that most objects don't live very long which is kind of com an interesting feedback cycle now because",
    "start": "1426400",
    "end": "1431720"
  },
  {
    "text": "we've got H generational garbage collectors we should encourage this even more than most things live for a very",
    "start": "1431720",
    "end": "1438120"
  },
  {
    "text": "short time unfortunately if you do a lot of functional programming some of the data structures in those go against the",
    "start": "1438120",
    "end": "1444279"
  },
  {
    "text": "weak generational hypothesis and really torture our garbage collectors but that's a separate subject if anybody",
    "start": "1444279",
    "end": "1450080"
  },
  {
    "text": "wants to talk to me about it afterwards so what does uh generational",
    "start": "1450080",
    "end": "1455240"
  },
  {
    "text": "garbage collector look like when it lays at its heat so typical one here for Java is we tend to have multiple Generations",
    "start": "1455240",
    "end": "1463279"
  },
  {
    "text": "where we've got a Young Generation or a new generation where things are capped for a period of time time if objects",
    "start": "1463279",
    "end": "1469320"
  },
  {
    "text": "survive they're copied to and from Survivor spaces for a while and if they live long enough they get promoted to",
    "start": "1469320",
    "end": "1475080"
  },
  {
    "text": "the old generation where they're tenured so this is the typical layout we have of a heap but before we come back into the",
    "start": "1475080",
    "end": "1482320"
  },
  {
    "text": "detail of this let's do a little segue into what Modern Hardware looks like so",
    "start": "1482320",
    "end": "1487880"
  },
  {
    "text": "our typical servers these days are two socket CPU servers there's single socket",
    "start": "1487880",
    "end": "1493200"
  },
  {
    "text": "there's four socket there's eight socket there's various other ones but the most common by far is a two socket server",
    "start": "1493200",
    "end": "1499559"
  },
  {
    "text": "because it's the breast price Performance Point we have multiple cores inside each socket the sockets are",
    "start": "1499559",
    "end": "1506480"
  },
  {
    "text": "connected via in Intel's case the quick path interface AMD used to be hyper",
    "start": "1506480",
    "end": "1512279"
  },
  {
    "text": "transport they've now got a new transport with our latest processors but we have a separate bus that connects",
    "start": "1512279",
    "end": "1518679"
  },
  {
    "text": "these these sockets and it's got a cost so we're looking at 40 Nan to go across",
    "start": "1518679",
    "end": "1524919"
  },
  {
    "text": "the bus and Back Again plus there's other costs on top of that so if you're talking to memory that's remote on the",
    "start": "1524919",
    "end": "1531880"
  },
  {
    "text": "other socket it has a lot of cost so are we aware of the differences and the",
    "start": "1531880",
    "end": "1537360"
  },
  {
    "text": "location of our memory even within a socket these days this goes further so",
    "start": "1537360",
    "end": "1542679"
  },
  {
    "text": "this is a Broadwell ex CPU where we've got groups of cores and groups of caches",
    "start": "1542679",
    "end": "1549520"
  },
  {
    "text": "this is a big scary picture and you notice the rings on the left and the right and between them in the middle",
    "start": "1549520",
    "end": "1555760"
  },
  {
    "text": "those gray boxes at top and the bot bottom or network switches on a CPU this",
    "start": "1555760",
    "end": "1562279"
  },
  {
    "text": "is not even AC cross CPU sockets on the simine this is within the same die on",
    "start": "1562279",
    "end": "1567720"
  },
  {
    "text": "the CPU and the costs are different depending on where they are these are known as numer Regents nonuniform memory",
    "start": "1567720",
    "end": "1575000"
  },
  {
    "text": "access so not all memory is equal to access do we know where our memory",
    "start": "1575000",
    "end": "1581159"
  },
  {
    "text": "happens to be do we know what we're using typically not but let's look at",
    "start": "1581159",
    "end": "1586480"
  },
  {
    "text": "what our allocat can do and how we deal with this so if you allocate a new",
    "start": "1586480",
    "end": "1591760"
  },
  {
    "text": "object it will be allocated out of the Eden region of your machine each thread",
    "start": "1591760",
    "end": "1597399"
  },
  {
    "text": "gets what's known as a tlb a translation uh I'm mixing my processors now on the",
    "start": "1597399",
    "end": "1603440"
  },
  {
    "text": "high level a thread local allocation buffer and you allocate out of it this is very cheap so if you allocate like an",
    "start": "1603440",
    "end": "1609840"
  },
  {
    "text": "iterator on a loop it'll be allocated out of here you'll use it and then there's no Reclamation with that so it's",
    "start": "1609840",
    "end": "1616520"
  },
  {
    "text": "very cheap at that sort of stage when you've used up a plb you need to get another one and you move on now what if",
    "start": "1616520",
    "end": "1623919"
  },
  {
    "text": "those plbs are allocated by an allocator that's no more aware it can allocate you",
    "start": "1623919",
    "end": "1629600"
  },
  {
    "text": "the buffer next to your thread where it's running it becomes nice and cheap",
    "start": "1629600",
    "end": "1635159"
  },
  {
    "text": "not so easy to do in C or C++ and so there's various other things we can be",
    "start": "1635159",
    "end": "1640320"
  },
  {
    "text": "aware of like if things have been living for a while they then get copied to the",
    "start": "1640320",
    "end": "1645399"
  },
  {
    "text": "Survivor spaces to go to and fro between those and eventually get promoted where the Survivor spaces are is interesting",
    "start": "1645399",
    "end": "1652240"
  },
  {
    "text": "we want to compact the data together to keep it within the same operating system Pages the same cach lines again we can",
    "start": "1652240",
    "end": "1658880"
  },
  {
    "text": "get certain benefit for that and apply certain parallel algorithms lots of fun stuff there if",
    "start": "1658880",
    "end": "1664440"
  },
  {
    "text": "you want to talk to me about it afterwards ultimately then we will keep",
    "start": "1664440",
    "end": "1669679"
  },
  {
    "text": "objects longer and they'll go to tenured notice how say that to the only the the Good Die Young if something is Cap",
    "start": "1669679",
    "end": "1676919"
  },
  {
    "text": "around it goes through all this copying backwards and forwards through survivors it then goes into the old generation",
    "start": "1676919",
    "end": "1682279"
  },
  {
    "text": "where we use different algorithms again for managing it with lots of complex data structures for doing this but we",
    "start": "1682279",
    "end": "1688440"
  },
  {
    "text": "can do a few other good things typically in the old generation we can do concurrent compaction which I'll touch",
    "start": "1688440",
    "end": "1694200"
  },
  {
    "text": "on and things like string D duplication so the same string Val is showing up in multiple places we can just reuse that",
    "start": "1694200",
    "end": "1700799"
  },
  {
    "text": "as part of our garbage collection cycle which will minimize our footprint and it can be quite a common thing so let's",
    "start": "1700799",
    "end": "1707120"
  },
  {
    "text": "look at compaction so I've got a region of memory I've used up a bunch of things in",
    "start": "1707120",
    "end": "1713640"
  },
  {
    "text": "it and now I need to do a garbage collection and this is where I I really hate what we do as an industry when it",
    "start": "1713640",
    "end": "1719240"
  },
  {
    "text": "comes to naming so we talk about garbage collection we do not collect any garbage",
    "start": "1719240",
    "end": "1724279"
  },
  {
    "text": "at all it's badly misnamed we Harvest objects that are still around our",
    "start": "1724279",
    "end": "1729919"
  },
  {
    "text": "industry has this terrible problem of naming things badly like I like to rant about this just for a second we do this",
    "start": "1729919",
    "end": "1735760"
  },
  {
    "text": "with lots of different things like anybody ever thought of random access memory is terribly named I don't want",
    "start": "1735760",
    "end": "1741640"
  },
  {
    "text": "random memory I want an exact piece of data I stored so I can get it back again later random is the wrong thing we would",
    "start": "1741640",
    "end": "1748679"
  },
  {
    "text": "should have arbitary access memory that's we should name things correctly software maintenance we don't grease an",
    "start": "1748679",
    "end": "1755960"
  },
  {
    "text": "oil and maintain software we have to adopt it when we have new requirements",
    "start": "1755960",
    "end": "1761880"
  },
  {
    "text": "we think about these different things so let sort of stop on the garbage collection runting for a second look at",
    "start": "1761880",
    "end": "1766919"
  },
  {
    "text": "how of this stuff works so let's say as we Harvest our objects what do we do we work out which objects are still",
    "start": "1766919",
    "end": "1773720"
  },
  {
    "text": "reachable that need to be retained and we copy them to another region and that",
    "start": "1773720",
    "end": "1779200"
  },
  {
    "text": "frees up the region so we may have used all of this memory at some stage these bits are the bits that are still",
    "start": "1779200",
    "end": "1784679"
  },
  {
    "text": "relevant the bits that are still in use when we collect memory we tend to do a depth first copy so if this was a a data",
    "start": "1784679",
    "end": "1793519"
  },
  {
    "text": "structure like an array or a hash table that was pointing to lots of other objects objects we would copy all of the",
    "start": "1793519",
    "end": "1799399"
  },
  {
    "text": "children first and we put them all together all neatly compacted and then",
    "start": "1799399",
    "end": "1804480"
  },
  {
    "text": "we copy across the me array itself this has some interesting benefits right",
    "start": "1804480",
    "end": "1810159"
  },
  {
    "text": "everything now is compacted into operating system Pages compacted in the cach lines if you iterate this data",
    "start": "1810159",
    "end": "1816919"
  },
  {
    "text": "structure it's much faster through memory because now it's a linear scan not jumping around so we get these",
    "start": "1816919",
    "end": "1823720"
  },
  {
    "text": "really interesting performance benefits from using our garbage collectors and how they compact their",
    "start": "1823720",
    "end": "1829240"
  },
  {
    "text": "memory but there's an elephant in the room with garbage collectors and this mostly comes down to the implementations",
    "start": "1829240",
    "end": "1835600"
  },
  {
    "text": "as they move things around most of the collectors have to stop the world and",
    "start": "1835600",
    "end": "1840960"
  },
  {
    "text": "they stop the world because you don't have access in an object when it's getting moved underneath you so they stop all of your threads that are",
    "start": "1840960",
    "end": "1847120"
  },
  {
    "text": "running is the typical approach to that we try to make this better by making",
    "start": "1847120",
    "end": "1852360"
  },
  {
    "text": "these pauses as short as possible one example is now the new G1 garbage",
    "start": "1852360",
    "end": "1857600"
  },
  {
    "text": "collector it organizes the Heap into smaller regions and collects the regions",
    "start": "1857600",
    "end": "1863159"
  },
  {
    "text": "with the least garbage in them I see the most garbage in them the least number of objects that's in there that's why it's",
    "start": "1863159",
    "end": "1869960"
  },
  {
    "text": "called the garbage first collector and it breaks the problem up in the chunks but it still stops the world like can we",
    "start": "1869960",
    "end": "1877720"
  },
  {
    "text": "do things to make it more efficient well there are truly concurrent garbage collectors that don't",
    "start": "1877720",
    "end": "1883840"
  },
  {
    "text": "stop the world a zul Zing C4 is a really example of how we can have a collector",
    "start": "1883840",
    "end": "1890039"
  },
  {
    "text": "that will not stop your application even for the Young Generation to pause so these things exist it's commercial",
    "start": "1890039",
    "end": "1897080"
  },
  {
    "text": "unfortunately so you have to pay for it but sometimes it's worth it for what you're getting back in return we're also",
    "start": "1897080",
    "end": "1903440"
  },
  {
    "text": "getting new collectors coming in open source so the shanoa collector which is an interesting implementation of the",
    "start": "1903440",
    "end": "1908960"
  },
  {
    "text": "Brooks barrier which allows us to collect concurrently without stopping or",
    "start": "1908960",
    "end": "1914080"
  },
  {
    "text": "application again but it's not a generational collector so if we look at it like memory",
    "start": "1914080",
    "end": "1920120"
  },
  {
    "text": "management if we do the manual versus the managed it's not easy to pick a clear winner on the manage side we have",
    "start": "1920120",
    "end": "1927200"
  },
  {
    "text": "some costs that we need to care about Garbage Collection comes with Associated costs we need data structures to store",
    "start": "1927200",
    "end": "1935120"
  },
  {
    "text": "all of the STA of the system we need an appropriate implementation to run and it's got a lot of overhead for that and",
    "start": "1935120",
    "end": "1941639"
  },
  {
    "text": "different collectors in different ways end up with more costs so we got to be aware of that on the native side it's",
    "start": "1941639",
    "end": "1948519"
  },
  {
    "text": "not as easy either like mik is quite cheap freeing an object is where the",
    "start": "1948519",
    "end": "1954840"
  },
  {
    "text": "real cost comes from it's always the case and particularly if you're going across threads so once you start going",
    "start": "1954840",
    "end": "1961440"
  },
  {
    "text": "across threads in a native implementation it becomes incredibly expensive and difficult to deal",
    "start": "1961440",
    "end": "1967799"
  },
  {
    "text": "with but what's interesting is where is next for garbage",
    "start": "1967799",
    "end": "1973000"
  },
  {
    "text": "collection with things like C we can in line or objects so it can put a",
    "start": "1973000",
    "end": "1978360"
  },
  {
    "text": "structure inside a structure this makes it compact makes it easy to deal with in C we can control this to a point but",
    "start": "1978360",
    "end": "1984600"
  },
  {
    "text": "again you're done to you're guessing is it the right thing to be doing how do you know the places you should be doing",
    "start": "1984600",
    "end": "1990000"
  },
  {
    "text": "it we're now starting to see carbet collectors come out of research where they're working at at runtime which",
    "start": "1990000",
    "end": "1996519"
  },
  {
    "text": "objects should be collocated which ones make up through Aggregates in our domain model they can be collocated together",
    "start": "1996519",
    "end": "2003919"
  },
  {
    "text": "and get the performance of allocating our models in the right place and moving them all",
    "start": "2003919",
    "end": "2009840"
  },
  {
    "text": "together so last section here I want to talk about algorithms and design so I've",
    "start": "2009840",
    "end": "2014919"
  },
  {
    "text": "covered some of the lower level stuff let's think about a question here what is the most important thing we need to",
    "start": "2014919",
    "end": "2022919"
  },
  {
    "text": "having good performance anyone guess what different opinions what do you think if you're going to design a",
    "start": "2022919",
    "end": "2029000"
  },
  {
    "text": "system what is the most important thing you can do to have good",
    "start": "2029000",
    "end": "2034080"
  },
  {
    "text": "performance data structure possibly",
    "start": "2035200",
    "end": "2041200"
  },
  {
    "text": "algorithms simple design I would argue it's",
    "start": "2041200",
    "end": "2046279"
  },
  {
    "text": "time all of those things require time to do the right thing and do it well who's",
    "start": "2046279",
    "end": "2052720"
  },
  {
    "text": "worked on projects where they sat around thinking I've got too much time doesn't really happen times a",
    "start": "2052720",
    "end": "2060839"
  },
  {
    "text": "really difficult thing to try and get I love this quote if I had more time I'd",
    "start": "2060839",
    "end": "2066040"
  },
  {
    "text": "have written a shorter letter originally from Bla Pascal often attributed to Mark Twain and this is so much the case about",
    "start": "2066040",
    "end": "2073560"
  },
  {
    "text": "code we can go back we can revisit we can refine code we can make it smaller neater more elegant faster in many ways",
    "start": "2073560",
    "end": "2081599"
  },
  {
    "text": "but we need the time to do that so like your typical project you'll do lots of these sorts of things like to make stuff",
    "start": "2081599",
    "end": "2087280"
  },
  {
    "text": "fast like does it matter if say C code can be 10% faster than C or Java code if",
    "start": "2087280",
    "end": "2094079"
  },
  {
    "text": "you're doing the same piece of work multiple times the duplication blows it all out there's lots of other",
    "start": "2094079",
    "end": "2100320"
  },
  {
    "text": "interesting things and particularly one of the strongest points I'd like to make on this is API design this is something",
    "start": "2100320",
    "end": "2106320"
  },
  {
    "text": "we can influence every day I keep seeing API designs that design in bad",
    "start": "2106320",
    "end": "2112160"
  },
  {
    "text": "performance it's a really difficult problem to deal with because most people get no background or education in the",
    "start": "2112160",
    "end": "2118359"
  },
  {
    "text": "impact of their API designs and what they do is they impose ways of Behaving on their users rather than enabling them",
    "start": "2118359",
    "end": "2125400"
  },
  {
    "text": "and giving them the choice but the summary of some of this is like",
    "start": "2125400",
    "end": "2130680"
  },
  {
    "text": "if you have a really large code Bas it's really difficult to do everything right",
    "start": "2130680",
    "end": "2135839"
  },
  {
    "text": "we have to apply all these techniques and be able to get them right across the whole board I talk very briefly about a",
    "start": "2135839",
    "end": "2141720"
  },
  {
    "text": "project I've been working on for a while Aon it's a messaging system so we were tasked with building a messaging system",
    "start": "2141720",
    "end": "2148359"
  },
  {
    "text": "that would be as fast as the fastest systems out there with some other features that would be there and enabled",
    "start": "2148359",
    "end": "2154640"
  },
  {
    "text": "and we built the first prototype in Java and we're going against commercial uh Native implementations in",
    "start": "2154640",
    "end": "2160640"
  },
  {
    "text": "C and C++ we were able to build a system that was faster than any of the Native",
    "start": "2160640",
    "end": "2166960"
  },
  {
    "text": "implementations and we did it in Java first we've since ported it to other languages so how did we make it faster",
    "start": "2166960",
    "end": "2174119"
  },
  {
    "text": "it was a case of working on the algorithms the algorithms matter so much more but needing the time to do that",
    "start": "2174119",
    "end": "2180119"
  },
  {
    "text": "it's not the need of implementation but a really surprising thing came out for me was the concept of",
    "start": "2180119",
    "end": "2187119"
  },
  {
    "text": "time to Performance so if you write something in C and try to make it",
    "start": "2187119",
    "end": "2192480"
  },
  {
    "text": "perform you write it in Java you write it in C you write in many different languages ultimately you can make some",
    "start": "2192480",
    "end": "2198319"
  },
  {
    "text": "of them faster than others but in which one can you get the really good performance quickly in your own",
    "start": "2198319",
    "end": "2205440"
  },
  {
    "text": "development time and for us Java was by far the fastest to get to a point where we had really reasonable",
    "start": "2205440",
    "end": "2212680"
  },
  {
    "text": "performance we're not the only ones I've talked to a number of people in the space have' been building complicated",
    "start": "2212680",
    "end": "2217960"
  },
  {
    "text": "stuff and the C compiler team is another good example the compiler for C was written in",
    "start": "2217960",
    "end": "2223760"
  },
  {
    "text": "C++ they decided to rewrite the compiler in C itself the team didn't want to do",
    "start": "2223760",
    "end": "2230119"
  },
  {
    "text": "this to begin with and eventually they did it to their surprise they now have a cleaner more elegant code base that's",
    "start": "2230119",
    "end": "2236960"
  },
  {
    "text": "easier to work with and it's faster and the reason it's faster is they were able to focus on some of the more important",
    "start": "2236960",
    "end": "2244000"
  },
  {
    "text": "things like what are some of these more important things is like having elegant models choosing the right codex and what",
    "start": "2244000",
    "end": "2252079"
  },
  {
    "text": "do I mean by choosing the right codc again here's another example of our industry doing the wrong thing so Google",
    "start": "2252079",
    "end": "2257240"
  },
  {
    "text": "protocol buffers is a Kodak it's not a protocol again badly named like you will",
    "start": "2257240",
    "end": "2263520"
  },
  {
    "text": "hear from a number of people about writing stuff in Json and XML and all those sorts of things and you probably",
    "start": "2263520",
    "end": "2268920"
  },
  {
    "text": "even hear from other speakers here telling you that Jon is a perfectly fine language for doing stuff in frankly I",
    "start": "2268920",
    "end": "2275119"
  },
  {
    "text": "think they're full of it in some ways you really need to do binary data",
    "start": "2275119",
    "end": "2280960"
  },
  {
    "text": "structures and usually the people who say don't do binary data structures do not have enough experience in in binary",
    "start": "2280960",
    "end": "2286800"
  },
  {
    "text": "data structures to do them well they're way more efficient they're way more elegant they're actually easier to debug",
    "start": "2286800",
    "end": "2292119"
  },
  {
    "text": "and reason about and program against but we have some things in our industry that we need to get much better at so and to",
    "start": "2292119",
    "end": "2298800"
  },
  {
    "text": "think about what are your data structures what are your algorithms as well and also what's your level of mechanical sympathy what is your stack",
    "start": "2298800",
    "end": "2305079"
  },
  {
    "text": "doing and do you know how to use it well also as we go more and more",
    "start": "2305079",
    "end": "2310359"
  },
  {
    "text": "concurrent there are many algorithms that do not work unless you have a",
    "start": "2310359",
    "end": "2315599"
  },
  {
    "text": "garbage collector knowing the ownership of memory makes some models much easier",
    "start": "2315599",
    "end": "2320760"
  },
  {
    "text": "to implement than many algorithms much easier to implement in doing this so",
    "start": "2320760",
    "end": "2325920"
  },
  {
    "text": "going to wrap up here quickly in closing let's think about what does the",
    "start": "2325920",
    "end": "2331319"
  },
  {
    "text": "future hold in this space is anyone old enough to remember the arguments about",
    "start": "2331319",
    "end": "2337680"
  },
  {
    "text": "assemblers versus compilers I can remember this I lived through some of this where people would argue that we",
    "start": "2337680",
    "end": "2344520"
  },
  {
    "text": "should be writing assembly code because compiled code is too slow and we can't keep up and I've seen people hand",
    "start": "2344520",
    "end": "2352040"
  },
  {
    "text": "rolling assembler code to do games and do other things and then our programs",
    "start": "2352040",
    "end": "2357359"
  },
  {
    "text": "become so complex that no individual can be a compiler over a large code base we",
    "start": "2357359",
    "end": "2362800"
  },
  {
    "text": "are starting to see this now with manage run times and dealing with it so here's a nice little example of this",
    "start": "2362800",
    "end": "2370400"
  },
  {
    "text": "this is not water this is a real time rendered image that's multiple stories high and",
    "start": "2370400",
    "end": "2378119"
  },
  {
    "text": "what's kind of fascinating is you can go over and interact with it in real time",
    "start": "2378119",
    "end": "2383760"
  },
  {
    "text": "and it can change between being a waterfall it can change between being fish being different things what",
    "start": "2383760",
    "end": "2390280"
  },
  {
    "text": "language do we think this is written in Java nope not",
    "start": "2390280",
    "end": "2397880"
  },
  {
    "text": "JavaScript it's a language called impromptu it's like a variant of scheme with a real-time garbage collector and",
    "start": "2397880",
    "end": "2404040"
  },
  {
    "text": "some intrinsics for the graphics designed originally for music can be applied to other things we're starting",
    "start": "2404040",
    "end": "2409680"
  },
  {
    "text": "to get really cool research languages coming out and some of the stuff going forward we can build incredibly complex",
    "start": "2409680",
    "end": "2415880"
  },
  {
    "text": "things so kind of think about where you going to spend your time on your future projects you're going to keep having",
    "start": "2415880",
    "end": "2422200"
  },
  {
    "text": "arguments and Wars about languages are we're going to look at some of the other things and on that I'll thank you very",
    "start": "2422200",
    "end": "2427720"
  },
  {
    "text": "much and take questions with time can we have a round of applause thank",
    "start": "2427720",
    "end": "2434559"
  }
]