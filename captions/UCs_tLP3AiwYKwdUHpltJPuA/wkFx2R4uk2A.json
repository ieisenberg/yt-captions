[
  {
    "start": "0",
    "end": "29000"
  },
  {
    "text": "good morning so I'm hanus um",
    "start": "2959",
    "end": "8420"
  },
  {
    "text": "and indeed tonight I will be using a guitar that I built myself to play on",
    "start": "8420",
    "end": "13799"
  },
  {
    "text": "stage at the after party so if you're a guitar geek like come find me today um I love talking about that stuff but",
    "start": "13799",
    "end": "20100"
  },
  {
    "text": "that's not what this talk is about um today I want to talk about Lego and",
    "start": "20100",
    "end": "25320"
  },
  {
    "text": "Marbles and I have a couple of disclaimers before we dive in like first disclaimer I'm not saying that Lego is",
    "start": "25320",
    "end": "32758"
  },
  {
    "start": "29000",
    "end": "137000"
  },
  {
    "text": "better than marbles or the other way around I know that I pissed off some Lego people with the title of my talk",
    "start": "32759",
    "end": "40140"
  },
  {
    "text": "um I mean in my my household you can find both right um",
    "start": "40140",
    "end": "45840"
  },
  {
    "text": "also that Lego set is the Lego set that I dreamed of as a kid I never got it it",
    "start": "45840",
    "end": "51239"
  },
  {
    "text": "was the control center it is what evolved into what now is called Mindstorms which Lego unfortunately",
    "start": "51239",
    "end": "57500"
  },
  {
    "text": "discontinued recently but not before I got the last Edition so that's good",
    "start": "57500",
    "end": "63840"
  },
  {
    "text": "um no what I'm saying is I think collaboration is better in coexistence and by hazards when I first gave this",
    "start": "63840",
    "end": "70500"
  },
  {
    "text": "talk the week before I gave this talk my kids built this so they use Duplo which is a Lego",
    "start": "70500",
    "end": "76740"
  },
  {
    "text": "Product to build supports for their marble tracks right and so I'm not all",
    "start": "76740",
    "end": "82860"
  },
  {
    "text": "about this in Lego at all also this talk is not going to be about any hipster Frameworks or fancy libraries",
    "start": "82860",
    "end": "91020"
  },
  {
    "text": "um none of that is gonna be here today so if you chose the wrong talk that's okay you can walk out and go to Adam",
    "start": "91020",
    "end": "97979"
  },
  {
    "text": "thornhill's upstairs which is going to be amazing I saw that talk um it's good and I know who is also",
    "start": "97979",
    "end": "103619"
  },
  {
    "text": "amazing so it only gets awkward if we're left to like five more people and and then the last two leave that that gets",
    "start": "103619",
    "end": "110579"
  },
  {
    "text": "awkward right but feel free and then a public service announcement",
    "start": "110579",
    "end": "116220"
  },
  {
    "text": "there is no such thing as Legos right um Lego is a brand name it's used as an",
    "start": "116220",
    "end": "121740"
  },
  {
    "text": "adjective so you say Lego set Lego brick you never say Legos right don't do that",
    "start": "121740",
    "end": "127439"
  },
  {
    "text": "it triggers Lego people right don't do that so that was the um",
    "start": "127439",
    "end": "134400"
  },
  {
    "text": "disclaimers out of the way so let's dive into what we were building",
    "start": "134400",
    "end": "142319"
  },
  {
    "start": "137000",
    "end": "448000"
  },
  {
    "text": "um when I built the code that led up to this talk so I was working for an iot company",
    "start": "142319",
    "end": "150540"
  },
  {
    "text": "um and you have to see that mostly As night iot systems integrator so what we",
    "start": "150540",
    "end": "155879"
  },
  {
    "text": "built was a platform that talks to our proprietary gateways which were iot",
    "start": "155879",
    "end": "162720"
  },
  {
    "text": "devices and those iot devices they could put bricks in bricks were not Lego",
    "start": "162720",
    "end": "167760"
  },
  {
    "text": "bricks brics was the the term that we used",
    "start": "167760",
    "end": "173300"
  },
  {
    "text": "for a small circuit board that could plug into the main boards and it was",
    "start": "173300",
    "end": "178500"
  },
  {
    "text": "basically a USB connection underneath so we could communicate to all different",
    "start": "178500",
    "end": "184200"
  },
  {
    "text": "kinds of iot devices that were not necessarily iot enabled before we",
    "start": "184200",
    "end": "189300"
  },
  {
    "text": "started with them but we would make them iot enabled that's what we did and it was all all one big deployment so",
    "start": "189300",
    "end": "197159"
  },
  {
    "text": "we had our backend that was one multi-tenant system and we had all of",
    "start": "197159",
    "end": "202500"
  },
  {
    "text": "our gateways into the fields and depending on what bricks they could talk to the devices that were in that building right going from Smart plugs",
    "start": "202500",
    "end": "210239"
  },
  {
    "text": "window blinds um thermostats like you name it we could talk to it",
    "start": "210239",
    "end": "216300"
  },
  {
    "text": "m and a typical day of work for us was doing like implementations of a new type",
    "start": "216300",
    "end": "224220"
  },
  {
    "text": "of devices so we were talking with um device manufacturers a lot of the time but also to people who wanted to",
    "start": "224220",
    "end": "231420"
  },
  {
    "text": "use our platform to make their devices smart right and we had a lot of different types of",
    "start": "231420",
    "end": "237659"
  },
  {
    "text": "devices that we could talk to and all of that had to make its way into the code base that we used in the back end",
    "start": "237659",
    "end": "244459"
  },
  {
    "text": "now this happened all the time so what we did as a team is we had we were",
    "start": "244459",
    "end": "251580"
  },
  {
    "text": "implementing these new devices all of the time and some of those projects went",
    "start": "251580",
    "end": "257160"
  },
  {
    "text": "live and others well not so much um and our",
    "start": "257160",
    "end": "264479"
  },
  {
    "text": "product management team didn't like it if we removed the code from a device that didn't go live because we might do",
    "start": "264479",
    "end": "270419"
  },
  {
    "text": "a similar device in the future if anybody heard those arguments before right we might do something similar in",
    "start": "270419",
    "end": "275520"
  },
  {
    "text": "the future we invested money in this code like all those fallacies right",
    "start": "275520",
    "end": "281120"
  },
  {
    "text": "so yeah we were in some kind of Maintenance hell and this maintenance how was making our",
    "start": "281340",
    "end": "286740"
  },
  {
    "text": "life hard because we had all these this tightly coupled code that then for all these different device types and and",
    "start": "286740",
    "end": "292860"
  },
  {
    "text": "some of them were live and some of them were not and um so yeah no not so great",
    "start": "292860",
    "end": "299040"
  },
  {
    "text": "um so what I wanted to do my sons like which to which one of these you need",
    "start": "299040",
    "end": "304560"
  },
  {
    "text": "they both have different favorite colors they both love Legos so they would choose a different one what they do",
    "start": "304560",
    "end": "310139"
  },
  {
    "text": "agree on is that you need one of these right and if you go to Ken Thompson's quote on",
    "start": "310139",
    "end": "316139"
  },
  {
    "text": "removing code and he said like one of my most productive days days was the day",
    "start": "316139",
    "end": "321600"
  },
  {
    "text": "that I removed a thousand line of lines of code and that is how we as a team felt it's",
    "start": "321600",
    "end": "327419"
  },
  {
    "text": "like if we want to keep maintaining this system we're gonna need to start throwing away code or at least making",
    "start": "327419",
    "end": "333900"
  },
  {
    "text": "sure that it doesn't hinder us right and we were talking to product management",
    "start": "333900",
    "end": "339660"
  },
  {
    "text": "and product management um well as you might have expected was not",
    "start": "339660",
    "end": "345600"
  },
  {
    "text": "really planning to change their ways I mean this was the business that they were",
    "start": "345600",
    "end": "351000"
  },
  {
    "text": "running they were still very much in the startup mentality still they maybe were in the startup but",
    "start": "351000",
    "end": "357720"
  },
  {
    "text": "um but they assured us that new devices would keep coming and they expected us to be able to reuse code that we had",
    "start": "357720",
    "end": "365039"
  },
  {
    "text": "already written so we figured like okay on that side We're not gonna get what we",
    "start": "365039",
    "end": "370740"
  },
  {
    "text": "want so we have to solve this problem internally with our development team in a way that we can no longer suffer from",
    "start": "370740",
    "end": "378300"
  },
  {
    "text": "all this the way that things were so what we wanted is we wanted to be",
    "start": "378300",
    "end": "384720"
  },
  {
    "text": "able to very quickly Implement these new device types especially in that prototyping phase when we were talking",
    "start": "384720",
    "end": "391259"
  },
  {
    "text": "to a manufacturers like hey you have this device let us prove to you that it can work with our platform and what we",
    "start": "391259",
    "end": "397560"
  },
  {
    "text": "can offer you but we also wanted to be able to really quickly remove it again",
    "start": "397560",
    "end": "403259"
  },
  {
    "text": "um if it never went anywhere and so we wanted to limit the dependencies between",
    "start": "403259",
    "end": "409380"
  },
  {
    "text": "devices and we wanted to make like really clear abstractions for the devices that we did so we wanted to stop",
    "start": "409380",
    "end": "415860"
  },
  {
    "text": "polluting our code base with all these implementations that happened all the",
    "start": "415860",
    "end": "421259"
  },
  {
    "text": "time because we know we knew statistically that only 30 percent of these are going",
    "start": "421259",
    "end": "426539"
  },
  {
    "text": "to make it into production um so it didn't make sense to have all of that polluting the main court code",
    "start": "426539",
    "end": "432660"
  },
  {
    "text": "base so you're probably thinking yeah hanas you should be doing micro Services right",
    "start": "432660",
    "end": "438620"
  },
  {
    "text": "Microsoft so let me park that question for a second and let me tell you a little bit about what I've seen because",
    "start": "438620",
    "end": "446280"
  },
  {
    "text": "I coach a lot of Developers and there is this part that I've seen I",
    "start": "446280",
    "end": "452520"
  },
  {
    "start": "448000",
    "end": "794000"
  },
  {
    "text": "coach.net developers so most of these are like object oriented third generation programmers and and they all",
    "start": "452520",
    "end": "459960"
  },
  {
    "text": "go through a similar path so they start with what we could call a big ball of mud or whatever you call it it's like",
    "start": "459960",
    "end": "466680"
  },
  {
    "text": "you Stitch code together that you find online and you find out really quickly",
    "start": "466680",
    "end": "471720"
  },
  {
    "text": "that it's going to be hard to maintain if you tightly couple everything and hopefully you go through this in",
    "start": "471720",
    "end": "478740"
  },
  {
    "text": "college or before somebody starts paying you to write software but not everybody has that luxury so at some point you run",
    "start": "478740",
    "end": "486599"
  },
  {
    "text": "into the wall when you evolve a system that is tightly coupled and everything goes together and when you build your",
    "start": "486599",
    "end": "492720"
  },
  {
    "text": "next system you go like okay I I need to make better choices and and separate my",
    "start": "492720",
    "end": "498360"
  },
  {
    "text": "code so you probably start doing something like layers right we have a database at the bottom any UI at the top",
    "start": "498360",
    "end": "505319"
  },
  {
    "text": "and all of the layers they consume the layer below it right you don't do that with cake you eat all the layers at once",
    "start": "505319",
    "end": "511500"
  },
  {
    "text": "because that's delicious um but you comes like you consume the layer",
    "start": "511500",
    "end": "517919"
  },
  {
    "text": "below you and and and you offer a contract to the layer above you right and you have a business logic and a data",
    "start": "517919",
    "end": "524339"
  },
  {
    "text": "access all of that you start doing that and then you find out that if you want to make a change",
    "start": "524339",
    "end": "529680"
  },
  {
    "text": "you have to go through all of the layers it's still all pretty tightly coupled bonus points if you do deploy them",
    "start": "529680",
    "end": "535560"
  },
  {
    "text": "separately at least you get some flexibility then but you feel like now it needs to be",
    "start": "535560",
    "end": "540720"
  },
  {
    "text": "better and somebody might tell you about something like solid and it's like okay yes solid those are the good principles",
    "start": "540720",
    "end": "548160"
  },
  {
    "text": "for a flexible code base and then I've seen code bases that are",
    "start": "548160",
    "end": "553260"
  },
  {
    "text": "abstractions over abstractions over abstractions over abstractions I call this faux solid it's like not real",
    "start": "553260",
    "end": "559800"
  },
  {
    "text": "proper solid um but I've seen code bases where they",
    "start": "559800",
    "end": "564839"
  },
  {
    "text": "used all of these patterns it's like a UI calling a facade calling a service calling a unit of work calling a",
    "start": "564839",
    "end": "571320"
  },
  {
    "text": "repository calling the orm that called the database like they did this for",
    "start": "571320",
    "end": "576540"
  },
  {
    "text": "every single API call they implemented all of these a lot of these would be single line calls to the next right",
    "start": "576540",
    "end": "584040"
  },
  {
    "text": "that's still layers right so that's not proper solid now what thus",
    "start": "584040",
    "end": "589140"
  },
  {
    "text": "proper solid look like and that is something that I feel that",
    "start": "589140",
    "end": "594540"
  },
  {
    "text": "object-oriented developers need to like click somewhere um",
    "start": "594540",
    "end": "599580"
  },
  {
    "text": "and when it clicks you finally realize how I love Randall Monroe by the way",
    "start": "599580",
    "end": "606120"
  },
  {
    "text": "um the guy that does XKCD and his Comics are amazing there's a relevant one for",
    "start": "606120",
    "end": "611580"
  },
  {
    "text": "any situation now at some point it needs to click and you need to figure out what solid is all",
    "start": "611580",
    "end": "616920"
  },
  {
    "text": "about and the thing for me that really helped it click in my head was the",
    "start": "616920",
    "end": "623519"
  },
  {
    "text": "realization that interfaces should be owned by the consumer and not by the implementer",
    "start": "623519",
    "end": "629880"
  },
  {
    "text": "so if you treat an interface as an expectation of",
    "start": "629880",
    "end": "634980"
  },
  {
    "text": "what this class or implementation is going to do instead of I already have",
    "start": "634980",
    "end": "641160"
  },
  {
    "text": "this thing that already does something and then I'm gonna extract an interface and consume that on the other side",
    "start": "641160",
    "end": "647100"
  },
  {
    "text": "not only will you get better in interfaces and will you get code that is a lot easier to Mock and you also like",
    "start": "647100",
    "end": "656220"
  },
  {
    "text": "make sure that your code is rearrangeable and that is what solid is all about and I think the analogy and",
    "start": "656220",
    "end": "662220"
  },
  {
    "text": "that's where the title of this talk comes from I have them right here and if",
    "start": "662220",
    "end": "667740"
  },
  {
    "text": "we had more time I would do an experiment where I get two of you from the audience and I would tell you to",
    "start": "667740",
    "end": "673920"
  },
  {
    "text": "replace blue with green so if you take this Lego castle and you replace the blue Tower with this",
    "start": "673920",
    "end": "680519"
  },
  {
    "text": "green Tower um that would really suck I can promise you because I'm an so what I did",
    "start": "680519",
    "end": "686459"
  },
  {
    "text": "is you have to deconstruct the outside towers as well to get the gray walls all the way down to take out the blue blue",
    "start": "686459",
    "end": "692640"
  },
  {
    "text": "Tower so that's gonna take a while if you have to do that with these marbles like pour these into a jar take out the",
    "start": "692640",
    "end": "700260"
  },
  {
    "text": "blue ones pour in the green ones and you're done I can promise you marble guy is gonna win",
    "start": "700260",
    "end": "706560"
  },
  {
    "text": "against um Lego person right so that is what solid is about if you",
    "start": "706560",
    "end": "713160"
  },
  {
    "text": "have proper abstractions in your code you can actually replace stuff a lot",
    "start": "713160",
    "end": "718740"
  },
  {
    "text": "easier not only can you replace it with a mock for a testing situation a lot",
    "start": "718740",
    "end": "723779"
  },
  {
    "text": "easier it's like if you want to rip something out of your code base and replace it that's a really good way to",
    "start": "723779",
    "end": "729300"
  },
  {
    "text": "do it and that is what proper solid actually looks like and what I see is a lot of",
    "start": "729300",
    "end": "734760"
  },
  {
    "text": "developers who don't properly grasp that concept yet yep they are like taking their code base",
    "start": "734760",
    "end": "743100"
  },
  {
    "text": "and complicating their lives by doing 27 micro services for a crowd application",
    "start": "743100",
    "end": "748260"
  },
  {
    "text": "anybody working at a company like that no well kind of sorry I feel your pain",
    "start": "748260",
    "end": "756720"
  },
  {
    "text": "um so that's what it that's what it is it's like once you understand these things that what that's what goes inside",
    "start": "756720",
    "end": "762720"
  },
  {
    "text": "of your code base for a certain service only then should you be starting to think about how does the whole bigger",
    "start": "762720",
    "end": "769260"
  },
  {
    "text": "picture fit together also if you're one team doing 27 services that is not good",
    "start": "769260",
    "end": "775440"
  },
  {
    "text": "I mean microservices fit for a certain type of scenario",
    "start": "775440",
    "end": "781380"
  },
  {
    "text": "so when you grow up you can go into like complicating your life further but I think you should go through those steps",
    "start": "781380",
    "end": "787740"
  },
  {
    "text": "before that and I've seen that happen a lot of times not only in my own career but in the people that I coach as well",
    "start": "787740",
    "end": "793560"
  },
  {
    "text": "and once that click you start feeling comfortable about writing object-oriented codes so when I revisit",
    "start": "793560",
    "end": "800459"
  },
  {
    "start": "794000",
    "end": "1160000"
  },
  {
    "text": "the problem um so microservices like it's a very nice",
    "start": "800459",
    "end": "806639"
  },
  {
    "text": "solution to it particular set of problems this is not my image by the way",
    "start": "806639",
    "end": "811860"
  },
  {
    "text": "um it's from Martin Fowler um it's like you need",
    "start": "811860",
    "end": "817740"
  },
  {
    "text": "you need a certain set of problems that you can solve with microservices but",
    "start": "817740",
    "end": "822779"
  },
  {
    "text": "until you get there it's only going to get in the way life will become harder it'll be",
    "start": "822779",
    "end": "829260"
  },
  {
    "text": "trickier to debug trickier to deploy it'll make setting up a new developer on",
    "start": "829260",
    "end": "836220"
  },
  {
    "text": "your team will make that a lot harder because they need to understand how everything fits together so I've always",
    "start": "836220",
    "end": "842279"
  },
  {
    "text": "been the kind of person that goes like I'll run with a monolith as long as I can until there's pain and then we solve",
    "start": "842279",
    "end": "848040"
  },
  {
    "text": "the pain and maybe separate surfaces are a solution um",
    "start": "848040",
    "end": "853260"
  },
  {
    "text": "but not not in this case I mean we weren't really ready to do microservices we already had some distribution in our",
    "start": "853260",
    "end": "860639"
  },
  {
    "text": "solution so it was not one monolith it was a monolith logically and as a deployment it wasn't",
    "start": "860639",
    "end": "868560"
  },
  {
    "text": "um there was no real need to distribute our solution any further",
    "start": "868560",
    "end": "874200"
  },
  {
    "text": "um I mean load on the platform was something we could cope with without doing microservices and the piece of",
    "start": "874200",
    "end": "881519"
  },
  {
    "text": "code that we were looking at like this device logic that was living in the back end that was something that was already",
    "start": "881519",
    "end": "887220"
  },
  {
    "text": "living in multiple services so it didn't really make sense to um to do that in that way",
    "start": "887220",
    "end": "894360"
  },
  {
    "text": "plus our code base was pretty much this right we had a not so Senior Team",
    "start": "894360",
    "end": "903420"
  },
  {
    "text": "um some of them were um remote like um from a near Shoring country I'm not",
    "start": "903420",
    "end": "909899"
  },
  {
    "text": "going to name the country but they were near short and like that already caused some friction in the team as well so if",
    "start": "909899",
    "end": "916139"
  },
  {
    "text": "we would have gone to to microservices to solve this that would have made life a living hell",
    "start": "916139",
    "end": "923040"
  },
  {
    "text": "so Martin farler said and I'm paraphrasing here but the first rule of distributed systems is don't distribute",
    "start": "923040",
    "end": "928920"
  },
  {
    "text": "it's like until you have pain don't distribute your software we're right I really like Fight Club it's also one of",
    "start": "928920",
    "end": "934320"
  },
  {
    "text": "the movies that I grew up with um but if if you take anything away from",
    "start": "934320",
    "end": "940199"
  },
  {
    "text": "this talk um I think you can quote me on this it's like never solve a code Problem by",
    "start": "940199",
    "end": "946440"
  },
  {
    "text": "introducing a deployment problem it's like if you have a problem in your code and you think you can solve it by making",
    "start": "946440",
    "end": "952560"
  },
  {
    "text": "it multiple units of deployment it's just gonna be more of a problem right not less so solve that first don't",
    "start": "952560",
    "end": "960079"
  },
  {
    "text": "because if you pull it apart in surfaces which had already happened before I",
    "start": "960079",
    "end": "965880"
  },
  {
    "text": "started at that company I mean that piece of code was living in multiple services and was causing a tremendous amount of pain",
    "start": "965880",
    "end": "972600"
  },
  {
    "text": "um so I think you'll probably run into the wall a whole lot faster if you think",
    "start": "972600",
    "end": "979139"
  },
  {
    "text": "that microservices are going to solve that problem for you so the challenges that we had is when we",
    "start": "979139",
    "end": "986880"
  },
  {
    "text": "um and now let's dive a little bit into the technical side of things when when we were thinking about building this a",
    "start": "986880",
    "end": "993420"
  },
  {
    "text": "lot of what we did was.net based and we were using asp.net at the time that was",
    "start": "993420",
    "end": "999120"
  },
  {
    "text": "MVC four or five um as a front end to what the UI",
    "start": "999120",
    "end": "1005600"
  },
  {
    "text": "consumed um and we needed to extend some Central API calls like there were calls that",
    "start": "1005600",
    "end": "1012259"
  },
  {
    "text": "would allow you to fetch a device list for a certain customer like that sort of stuff needed to know about all the new",
    "start": "1012259",
    "end": "1019160"
  },
  {
    "text": "implementations that we did so that we could get proper derived types um and we needed to extend Logic for",
    "start": "1019160",
    "end": "1026058"
  },
  {
    "text": "some devices like some devices behaved a little bit differently we would have like a base thermostat implementation",
    "start": "1026059",
    "end": "1032540"
  },
  {
    "text": "but then some thermostats did scheduling a little bit differently so we needed to provide an extension point where we",
    "start": "1032540",
    "end": "1039020"
  },
  {
    "text": "could actually call that extended logic and then of course like there was and",
    "start": "1039020",
    "end": "1044720"
  },
  {
    "text": "that was one of the reasons that it wasn't proper microservices it all talked to one Central database they were",
    "start": "1044720",
    "end": "1049880"
  },
  {
    "text": "just like different deployment units of code we needed to be able to migrate our database schema so that those were the",
    "start": "1049880",
    "end": "1056240"
  },
  {
    "text": "challenges that we were facing and when we were thinking it's like how are we going to deal with",
    "start": "1056240",
    "end": "1061280"
  },
  {
    "text": "making our device implementations more flexible that is the stuff that we actually uh had to struggle with",
    "start": "1061280",
    "end": "1068900"
  },
  {
    "text": "now what happened on that theme is um we decided to use plugins to actually",
    "start": "1068900",
    "end": "1075640"
  },
  {
    "text": "build a proof of concept to see if we could make that more reliable",
    "start": "1075640",
    "end": "1082340"
  },
  {
    "text": "and we did that and the puck was successful and the team started doing this now this is where we're gonna get",
    "start": "1082340",
    "end": "1089179"
  },
  {
    "text": "off track of what actually happened in that theme because as I said we were using mvc4 on.net framework",
    "start": "1089179",
    "end": "1097520"
  },
  {
    "text": "4.6 4.7 something along those times um",
    "start": "1097520",
    "end": "1102880"
  },
  {
    "text": "and the tools that we have at our disposal right now with net six and",
    "start": "1102880",
    "end": "1108200"
  },
  {
    "text": "seven I mean that's a whole different story and a lot of this stuff would become a lot easier if you did it that",
    "start": "1108200",
    "end": "1114679"
  },
  {
    "text": "way so when I was writing this talk that was around.net 2.1 times",
    "start": "1114679",
    "end": "1121360"
  },
  {
    "text": "like.net core 2.1 and so I figured like okay maybe I can like solve all those",
    "start": "1121360",
    "end": "1127460"
  },
  {
    "text": "problems in an easier way if I use the modern stack and that is the story that the rest of this talk is going to be",
    "start": "1127460",
    "end": "1133520"
  },
  {
    "text": "about now I upgraded the solution to net 6 yesterday and that was actually not that",
    "start": "1133520",
    "end": "1139640"
  },
  {
    "text": "much work took me about half an hour all of the stuff that I'm gonna show today it still works in dotnet6.7 and so on",
    "start": "1139640",
    "end": "1145820"
  },
  {
    "text": "right but these patterns they don't just apply to.net they do apply to to any",
    "start": "1145820",
    "end": "1151460"
  },
  {
    "text": "object-oriented language you can probably take some of this and use the same patterns using spring boot in Java",
    "start": "1151460",
    "end": "1158240"
  },
  {
    "text": "or whatever um now one of the things that people",
    "start": "1158240",
    "end": "1164120"
  },
  {
    "start": "1160000",
    "end": "1652000"
  },
  {
    "text": "struggle with when they start doing proper solid is um the architecture around it so writing",
    "start": "1164120",
    "end": "1171080"
  },
  {
    "text": "solid code is not that hard if you're in a very controlled environment and it",
    "start": "1171080",
    "end": "1176120"
  },
  {
    "text": "goes really well to write your business logic that way and and the core of your application but if you have to write an",
    "start": "1176120",
    "end": "1182299"
  },
  {
    "text": "architecture around it to to interact with file systems and databases and uis and so on and like that's when it gets",
    "start": "1182299",
    "end": "1187880"
  },
  {
    "text": "message like how do you extract the things from your solid model to the outside and for me that really helps if",
    "start": "1187880",
    "end": "1194539"
  },
  {
    "text": "you think about it with onion architecture and onion architecture not the onion Network and the onion network",
    "start": "1194539",
    "end": "1200360"
  },
  {
    "text": "is amazing doesn't have anything to do with that um but anyone architecture was a term",
    "start": "1200360",
    "end": "1205400"
  },
  {
    "text": "that was first used by Jeffrey Palermo um and it Bears so many similarities",
    "start": "1205400",
    "end": "1212360"
  },
  {
    "text": "with other architecture types that that have the same values you might have known it as ports and adapters or hex",
    "start": "1212360",
    "end": "1219380"
  },
  {
    "text": "second architecture clean architectures like all of these are nuances to very similar ways of doing stuff in code",
    "start": "1219380",
    "end": "1226039"
  },
  {
    "text": "right and the focus on on this architecture is really on having as clean dependencies",
    "start": "1226039",
    "end": "1233900"
  },
  {
    "text": "as possible in your solution so the concept here is you would put",
    "start": "1233900",
    "end": "1240860"
  },
  {
    "text": "your domain model in the center and then write your domain Services which is your",
    "start": "1240860",
    "end": "1246559"
  },
  {
    "text": "business logic around that and then you would provide application services",
    "start": "1246559",
    "end": "1251600"
  },
  {
    "text": "around that and that is going to be the interface with the rest of your application now this core should be",
    "start": "1251600",
    "end": "1257780"
  },
  {
    "text": "something that is still relatively reference free and the cool thing about",
    "start": "1257780",
    "end": "1263240"
  },
  {
    "text": "this is if the references only go in it",
    "start": "1263240",
    "end": "1268820"
  },
  {
    "text": "means you can keep the core of your application completely packaged and reference free",
    "start": "1268820",
    "end": "1274039"
  },
  {
    "text": "I'll make a couple of exceptions for things like a proper daytime Library stuff like that I mean that can go into",
    "start": "1274039",
    "end": "1280039"
  },
  {
    "text": "the core but like things like your di container and all of that that should not leak to the inside",
    "start": "1280039",
    "end": "1286160"
  },
  {
    "text": "that is all infrastructure is all integration and that is stuff that you will actually do Implement in that outer",
    "start": "1286160",
    "end": "1293020"
  },
  {
    "text": "layer that outer onion shell as we speak",
    "start": "1293020",
    "end": "1299539"
  },
  {
    "text": "and that's pretty cool once you start not thinking in layers but you start",
    "start": "1299539",
    "end": "1305179"
  },
  {
    "text": "thinking like this is the core and even my UI is an integration and my database",
    "start": "1305179",
    "end": "1310520"
  },
  {
    "text": "in it isn't integration you start thinking it's like I'm not calling upon my database I'm calling upon an",
    "start": "1310520",
    "end": "1317480"
  },
  {
    "text": "abstraction or I'm offering an abstraction to the outside and that makes this whole architecture a lot",
    "start": "1317480",
    "end": "1322640"
  },
  {
    "text": "easier to implement and the benefits of that is",
    "start": "1322640",
    "end": "1328760"
  },
  {
    "text": "this is like the first architecture that I did in.net that actually allowed me to replace a package or an implementation",
    "start": "1328760",
    "end": "1336919"
  },
  {
    "text": "of some of my dependencies because like developers say this all the time it's like yeah yeah we're using uh",
    "start": "1336919",
    "end": "1343159"
  },
  {
    "text": "an orm because we're going to replace our database they never do because they find out that it's actually not that",
    "start": "1343159",
    "end": "1349039"
  },
  {
    "text": "straightforward to replace a database or we might be using a different or Ram in the future so we're going to put",
    "start": "1349039",
    "end": "1354380"
  },
  {
    "text": "everything in repositories but then they Expose iquarable and they feel like ah we cannot really replace that with",
    "start": "1354380",
    "end": "1360620"
  },
  {
    "text": "Dapper so it's it's like this these policies but when you use this your core",
    "start": "1360620",
    "end": "1367400"
  },
  {
    "text": "doesn't know anything about how you handled all that infrastructure stuff and that will keep alive on all of the",
    "start": "1367400",
    "end": "1373880"
  },
  {
    "text": "tests that you write against that will remain valid even when you replace dependencies and that is I think that is",
    "start": "1373880",
    "end": "1380600"
  },
  {
    "text": "the the powerful thing about all of this and you can actually take your core and",
    "start": "1380600",
    "end": "1386299"
  },
  {
    "text": "plug it into a completely different deployment as well and have it function",
    "start": "1386299",
    "end": "1393140"
  },
  {
    "text": "as intended there and because you you're not depending on which Orem you're using or which UI frame framework is calling",
    "start": "1393140",
    "end": "1399980"
  },
  {
    "text": "you or whatever like all of that is not in your core so if you want to take this out and use it in a smartphone app",
    "start": "1399980",
    "end": "1405620"
  },
  {
    "text": "that'll work just fine right and that's really cool and the cool thing about this is this",
    "start": "1405620",
    "end": "1412460"
  },
  {
    "text": "really forces you to write an interface before you call something on the outside",
    "start": "1412460",
    "end": "1417679"
  },
  {
    "text": "and that is what I just said about solids like writing an interface from a",
    "start": "1417679",
    "end": "1422780"
  },
  {
    "text": "consumer standpoint instead of from an implementer standpoint that is what",
    "start": "1422780",
    "end": "1428539"
  },
  {
    "text": "matches this really well with solid here you're forced to do that with anything that talks to the X outside it's like I",
    "start": "1428539",
    "end": "1435799"
  },
  {
    "text": "want to use something from the file system okay what do I do what do I expect I need to get a certain file okay",
    "start": "1435799",
    "end": "1441020"
  },
  {
    "text": "good what are the parameters I'm going to use you write an interface for that and then you implement it which means",
    "start": "1441020",
    "end": "1446960"
  },
  {
    "text": "that whatever mechanism that you decide to change like not going to the file system but to block storage or whatever",
    "start": "1446960",
    "end": "1453559"
  },
  {
    "text": "like for the logic of your application that can remain intact and that's really cool",
    "start": "1453559",
    "end": "1459500"
  },
  {
    "text": "and for testing you get a really clear view of which tests go where if you want",
    "start": "1459500",
    "end": "1465679"
  },
  {
    "text": "to do unit tests for your chord that works really well because there's almost nothing to mock there right",
    "start": "1465679",
    "end": "1472520"
  },
  {
    "text": "um and all of your UI and acceptance tests they will go to the user interface on",
    "start": "1472520",
    "end": "1478039"
  },
  {
    "text": "the outer shell all your integration tests you can write against your infrastructure layer and you will",
    "start": "1478039",
    "end": "1483980"
  },
  {
    "text": "basically be able to really easily mock the things that you need to mock in the place where you're actually writing your",
    "start": "1483980",
    "end": "1489919"
  },
  {
    "text": "test so I found this to work really well when you want to do test driven development when you for the core but",
    "start": "1489919",
    "end": "1496520"
  },
  {
    "text": "also when you want to write integration tests for the whole thing this worked very well for us as a theme",
    "start": "1496520",
    "end": "1503419"
  },
  {
    "text": "so let me give you an example I'm choosing a service locator as an example because we will need it later in",
    "start": "1503419",
    "end": "1510740"
  },
  {
    "text": "this talk and let's say that you have a need in your domain to locate a certain",
    "start": "1510740",
    "end": "1516260"
  },
  {
    "text": "service um in in one of your classes and this is going to come in handy when we are",
    "start": "1516260",
    "end": "1522080"
  },
  {
    "text": "talking about extension points in our Logic for different device types that's where we're going to need a service",
    "start": "1522080",
    "end": "1528880"
  },
  {
    "text": "locator let's apply the pattern that I just talked about it's like okay we",
    "start": "1528880",
    "end": "1534140"
  },
  {
    "text": "first Define what do I need from my di container to be able to locate a certain surface",
    "start": "1534140",
    "end": "1540620"
  },
  {
    "text": "and that will probably be an interface with just one member right one member",
    "start": "1540620",
    "end": "1545659"
  },
  {
    "text": "that's it once we extend it to different things we can still do that it's like okay one or two members we're there",
    "start": "1545659",
    "end": "1553159"
  },
  {
    "text": "and then of course we're lazy right good developers are lazy who's a lazy developer I am if I have to type less",
    "start": "1553159",
    "end": "1559279"
  },
  {
    "text": "that's always good so I'll find a package that kind of does what my interface is requesting me to do and",
    "start": "1559279",
    "end": "1566120"
  },
  {
    "text": "I'll land on artifact I've always liked artifact as as a TI container in.net there's cool ones like net service",
    "start": "1566120",
    "end": "1574400"
  },
  {
    "text": "um collections have come a long way since then but okay let's use Auto fact and then",
    "start": "1574400",
    "end": "1580520"
  },
  {
    "text": "we're going to just Implement our one member interface using that package and",
    "start": "1580520",
    "end": "1585679"
  },
  {
    "text": "then we're at a point where this should be trivial right you've all written an interface",
    "start": "1585679",
    "end": "1590960"
  },
  {
    "text": "implementation but instead of thinking like what can artifact do and exposing all of that in a massive service locator",
    "start": "1590960",
    "end": "1598340"
  },
  {
    "text": "di container contract we just have this one interface that says okay you're gonna need to do this this",
    "start": "1598340",
    "end": "1603679"
  },
  {
    "text": "implementation will be very easy to do and the cool thing is that will live outside of our core",
    "start": "1603679",
    "end": "1609260"
  },
  {
    "text": "so all our car knows is this contract it's like if I need a service locator I",
    "start": "1609260",
    "end": "1614600"
  },
  {
    "text": "can ask it to do that and all of the rest will be wiring in runtime right that makes this uh so easy to do so when",
    "start": "1614600",
    "end": "1622279"
  },
  {
    "text": "you're happy in the woods with your laptop there's no power there's no Wi-fi I don't know why this developer is Happy",
    "start": "1622279",
    "end": "1629240"
  },
  {
    "text": "um but that is the image that we like to portray like we're happy developers all of this is going uh well and I think",
    "start": "1629240",
    "end": "1636380"
  },
  {
    "text": "that like if you apply solid with with this onion architecture in a code base it really makes some of the stuff that",
    "start": "1636380",
    "end": "1643820"
  },
  {
    "text": "is usually hard a lot less frictionful like it's easier to to write",
    "start": "1643820",
    "end": "1649159"
  },
  {
    "text": "it to test it and so on so let's get back to plugins because I",
    "start": "1649159",
    "end": "1655400"
  },
  {
    "start": "1652000",
    "end": "1769000"
  },
  {
    "text": "told you that we had used plugins and I'm not talking about plug-in hybrids",
    "start": "1655400",
    "end": "1661340"
  },
  {
    "text": "um I don't know how it is here but in Belgium that's like a fiscal scam you",
    "start": "1661340",
    "end": "1666799"
  },
  {
    "text": "get like a tax reduction on a hybrid that you never plug in because you fill it up with gas no is that something that",
    "start": "1666799",
    "end": "1672980"
  },
  {
    "text": "they do here yeah I think that's that's like a joke and so either full electric or bust",
    "start": "1672980",
    "end": "1680120"
  },
  {
    "text": "um but plugins as we thought of them it's like we want to have a an assembly",
    "start": "1680120",
    "end": "1685820"
  },
  {
    "text": "for a certain device type and just be able to deploy that along",
    "start": "1685820",
    "end": "1690980"
  },
  {
    "text": "with our core application and that would enable the functionality of that device type in our product like magically by",
    "start": "1690980",
    "end": "1698120"
  },
  {
    "text": "just dropping in the assembly and restarting the process now",
    "start": "1698120",
    "end": "1704299"
  },
  {
    "text": "if we want to remove that device from what the core was doing at the moment we would just remove the assembly",
    "start": "1704299",
    "end": "1711559"
  },
  {
    "text": "and that should not break anything now to be able to do that that means",
    "start": "1711559",
    "end": "1716720"
  },
  {
    "text": "that your core has to be 100 unaware of which plugins",
    "start": "1716720",
    "end": "1723020"
  },
  {
    "text": "there are so you cannot tightly couple any plugins to your core you're gonna add them and in runtime it",
    "start": "1723020",
    "end": "1729620"
  },
  {
    "text": "should pick up and work properly and that's why we made some",
    "start": "1729620",
    "end": "1735080"
  },
  {
    "text": "rules so also great movie um",
    "start": "1735080",
    "end": "1741200"
  },
  {
    "text": "to be able to make that work we would use that onion architecture philosophy we would write plugins as something that",
    "start": "1741200",
    "end": "1747919"
  },
  {
    "text": "could reference the core and not the other way around we had a bunch of conventions that we applied you will see",
    "start": "1747919",
    "end": "1755059"
  },
  {
    "text": "some of them in the code that I'm going to show and we can just deploy them along and",
    "start": "1755059",
    "end": "1760159"
  },
  {
    "text": "that would work and nothing should break if we remove them that is a very",
    "start": "1760159",
    "end": "1765260"
  },
  {
    "text": "important um thing to realize so enough Chit Chat let's dive into uh",
    "start": "1765260",
    "end": "1772820"
  },
  {
    "start": "1769000",
    "end": "2933000"
  },
  {
    "text": "what we needed to do to make this work in net core and see what happens and the",
    "start": "1772820",
    "end": "1779240"
  },
  {
    "text": "example application that is out there on GitHub you'll get the link at the end it's a talk toy collector we're talking",
    "start": "1779240",
    "end": "1785899"
  },
  {
    "text": "about Marbles and Lego today so let's say that I make a generic toy collector",
    "start": "1785899",
    "end": "1792260"
  },
  {
    "text": "application and we have modules for all the types of toys that we want to collect we want to collect Marbles and",
    "start": "1792260",
    "end": "1797840"
  },
  {
    "text": "Lego sets so that's the two plugins that we're actually gonna write",
    "start": "1797840",
    "end": "1803440"
  },
  {
    "text": "so these are the six things that I still want to show you um on the technical side I will be",
    "start": "1803539",
    "end": "1810080"
  },
  {
    "text": "using.net for all of these samples but you will see and and reapply this stuff",
    "start": "1810080",
    "end": "1816260"
  },
  {
    "text": "if you do it in another programming language as well so dependency",
    "start": "1816260",
    "end": "1821960"
  },
  {
    "text": "is going to be at the heart of how all of this works and the process will be a",
    "start": "1821960",
    "end": "1828740"
  },
  {
    "text": "little bit like this we want to can which plugins are deployed at the",
    "start": "1828740",
    "end": "1835039"
  },
  {
    "text": "startup and then use reflection on those plugins to figure out which types need to be",
    "start": "1835039",
    "end": "1841580"
  },
  {
    "text": "registered and I'm never a fan of Auto wiring stuff so I wanted to have some type registrar classes inside my plugins",
    "start": "1841580",
    "end": "1849320"
  },
  {
    "text": "that tell the central system like what's in the plugin um and then we should run all of those",
    "start": "1849320",
    "end": "1855919"
  },
  {
    "text": "registrars um now the tricky thing here is",
    "start": "1855919",
    "end": "1863120"
  },
  {
    "text": "in runtime this is really easy to do you scan you read your",
    "start": "1863120",
    "end": "1868399"
  },
  {
    "text": "um you read your directory your deploy your plugin directory or your deployment",
    "start": "1868399",
    "end": "1873500"
  },
  {
    "text": "directory whatever you want to use and you scan it for all the stuff that's",
    "start": "1873500",
    "end": "1878659"
  },
  {
    "text": "there now in your IDE this becomes a little bit trickier because the core doesn't reference the",
    "start": "1878659",
    "end": "1887240"
  },
  {
    "text": "plugins um your build dependency 3 will fail",
    "start": "1887240",
    "end": "1893240"
  },
  {
    "text": "when you hit run because your IDE figures out like which assemblies do I need to build okay this",
    "start": "1893240",
    "end": "1898700"
  },
  {
    "text": "is your startup project it references the core Okay cool so if something changes in the core we need to rebuild",
    "start": "1898700",
    "end": "1904760"
  },
  {
    "text": "that but all of your Integrations like your di system it also",
    "start": "1904760",
    "end": "1910039"
  },
  {
    "text": "references the core so from your startup assembly you're never going to get to",
    "start": "1910039",
    "end": "1915679"
  },
  {
    "text": "your database layer because that's an outside in reference and that is not just for a problem for plugins it's also",
    "start": "1915679",
    "end": "1923480"
  },
  {
    "text": "a problem for the whole onion architecture thing so either you make post build actions that actually copies stuff",
    "start": "1923480",
    "end": "1931600"
  },
  {
    "text": "to the startup assembly path that's one of the things you can do",
    "start": "1931600",
    "end": "1936860"
  },
  {
    "text": "or you can make a development assembly which you exclude from your production build but",
    "start": "1936860",
    "end": "1943159"
  },
  {
    "text": "that does reference everything so like two approaches you can take there but the DI container will be acting as if it",
    "start": "1943159",
    "end": "1951080"
  },
  {
    "text": "is just in a deployed scenario and it'll scan a folder and register all the stuff that's in there",
    "start": "1951080",
    "end": "1957380"
  },
  {
    "text": "so the way that we do this um is we scan and I just made an",
    "start": "1957380",
    "end": "1964279"
  },
  {
    "text": "abstraction for my I service collection in.net and what we do in this bit of",
    "start": "1964279",
    "end": "1970100"
  },
  {
    "text": "code is we scan all those dll files and we run the type registers on it and what",
    "start": "1970100",
    "end": "1976760"
  },
  {
    "text": "we just do is with Reflections we see is there a class in there that implements my type registrar interface and I'll",
    "start": "1976760",
    "end": "1983480"
  },
  {
    "text": "just instantiate that and run it right so this is something you it's uh",
    "start": "1983480",
    "end": "1989840"
  },
  {
    "text": "you can do both in Java and net and but that is the way that we dealt with registering these plugins so we scan the",
    "start": "1989840",
    "end": "1996019"
  },
  {
    "text": "folder and we run all those type registers and they just talk to an abstraction of our di container so if we",
    "start": "1996019",
    "end": "2001899"
  },
  {
    "text": "want to sweep a switch from out of fact to Castle Windsor or whatever that we",
    "start": "2001899",
    "end": "2007360"
  },
  {
    "text": "want to use um that should just be this one interface that has the abstraction of",
    "start": "2007360",
    "end": "2012519"
  },
  {
    "text": "our service collection now the tricky part for us",
    "start": "2012519",
    "end": "2018399"
  },
  {
    "text": "um it's like the best way to get me to do anything is say honest this is impossible it's like that's when I'll",
    "start": "2018399",
    "end": "2024580"
  },
  {
    "text": "get a focused week of works because I'm going to prove you wrong right and the developers on our team",
    "start": "2024580",
    "end": "2031120"
  },
  {
    "text": "um as I said we weren't in the most Senior Team at the moment they said yeah we can never get asp.net to behave the",
    "start": "2031120",
    "end": "2038140"
  },
  {
    "text": "way that we want it to behave by adding controllers from other assemblies and adding views from other assemblies also",
    "start": "2038140",
    "end": "2046720"
  },
  {
    "text": "um so they told me that that was impossible um I wrote my own uh controller selector",
    "start": "2046720",
    "end": "2053740"
  },
  {
    "text": "and view selector in what was at the time I think mvc4 um it was definitely possible",
    "start": "2053740",
    "end": "2060940"
  },
  {
    "text": "um but there are extension points where you can actually extend this but they made it so much easier in um.net core",
    "start": "2060940",
    "end": "2068138"
  },
  {
    "text": "that I'm gonna show you this code because it's a lot easier to grasp so if we have all our plugin dlls there is a",
    "start": "2068139",
    "end": "2075158"
  },
  {
    "text": "project type in um a project type in asp.net that is a",
    "start": "2075159",
    "end": "2081520"
  },
  {
    "text": "Razer assembly so it's basically an assembly where you have some controllers and some views but it's not a proper",
    "start": "2081520",
    "end": "2087398"
  },
  {
    "text": "startup project so you don't have a startup class or wiring everything it's just a collection of controllers and",
    "start": "2087399",
    "end": "2092618"
  },
  {
    "text": "views and if you build your project your plugins like this it means that all of",
    "start": "2092619",
    "end": "2098440"
  },
  {
    "text": "the stuff that you need is going to be in there and all you need to do is add them to the application part manager and",
    "start": "2098440",
    "end": "2103960"
  },
  {
    "text": "that's what you see at the bottom here it's like the application part manager is something that you get when you do ad",
    "start": "2103960",
    "end": "2110920"
  },
  {
    "text": "controllers or app MVC to your service collection you can access the application part managers and",
    "start": "2110920",
    "end": "2117760"
  },
  {
    "text": "application part manager and add additional application assemblies to your asp.net application like this is",
    "start": "2117760",
    "end": "2125200"
  },
  {
    "text": "out of the box you don't need any extra dependencies to do this so if you start a",
    "start": "2125200",
    "end": "2131040"
  },
  {
    "text": "new file new project asp.net core like that's going to be in",
    "start": "2131040",
    "end": "2136900"
  },
  {
    "text": "there and that's that solves the whole problem it allows you to add extra controllers extra views to the asp.net",
    "start": "2136900",
    "end": "2144520"
  },
  {
    "text": "runtime so they're already solved one of our problems it's like we're gonna add",
    "start": "2144520",
    "end": "2149920"
  },
  {
    "text": "specific API calls for every device type so okay that's handled",
    "start": "2149920",
    "end": "2155859"
  },
  {
    "text": "but the trickier thing is it's like we had Central API calls that needed to",
    "start": "2155859",
    "end": "2161140"
  },
  {
    "text": "deal with all the different devices so we needed inheritance to work with data",
    "start": "2161140",
    "end": "2167020"
  },
  {
    "text": "that was coming from the plugins and the API contracts needed to be able to",
    "start": "2167020",
    "end": "2172480"
  },
  {
    "text": "handle that as well so that's trick here and this is one of the days where I really long for the times that we had",
    "start": "2172480",
    "end": "2180760"
  },
  {
    "text": "XML because in XML inheritance is built in if you have an opening and a closing tag",
    "start": "2180760",
    "end": "2187060"
  },
  {
    "text": "that says Lego set you know what this is going to need to be deserialized as right",
    "start": "2187060",
    "end": "2192940"
  },
  {
    "text": "well how do we do that in Json well right to curly braces how do we know",
    "start": "2192940",
    "end": "2199839"
  },
  {
    "text": "what's inside and if our API takes in a toy and not a Lego set or a marble",
    "start": "2199839",
    "end": "2206500"
  },
  {
    "text": "it's always going to by default get deserialized as toy and only map the properties of toy so if you extend it",
    "start": "2206500",
    "end": "2213520"
  },
  {
    "text": "with inheritance like all of that stuff is going to get lost so that's tricky and there are solutions there are like",
    "start": "2213520",
    "end": "2221920"
  },
  {
    "text": "easy solutions that you shouldn't use and a little bit harder solutions that are the proper way to do it so the risky",
    "start": "2221920",
    "end": "2229300"
  },
  {
    "text": "solution you can set type name handling to Auto",
    "start": "2229300",
    "end": "2234960"
  },
  {
    "text": "in Newton soft Json not in system.text.json like the new Microsoft",
    "start": "2234960",
    "end": "2240940"
  },
  {
    "text": "one and there's a big reason why they did import it and it's this it's like if you do this and you set type name",
    "start": "2240940",
    "end": "2246940"
  },
  {
    "text": "handling to Auto it will allow you to pass dollar type for anything that needs to be",
    "start": "2246940",
    "end": "2252880"
  },
  {
    "text": "deserialized and if you're the serializer realizes that this is indeed a valid",
    "start": "2252880",
    "end": "2260260"
  },
  {
    "text": "subtype of what you're trying to deserialize it it will map all the properties now the re the place where this gets",
    "start": "2260260",
    "end": "2266500"
  },
  {
    "text": "really risky is if you take object or dynamic somewhere in your API that is like a",
    "start": "2266500",
    "end": "2274420"
  },
  {
    "text": "full-blown or wasp vulnerability that will allow them remote code execution because you can like create files on",
    "start": "2274420",
    "end": "2281680"
  },
  {
    "text": "this file system by giving it the right types of objects and so on so",
    "start": "2281680",
    "end": "2286839"
  },
  {
    "text": "type name handling Auto if you're tempted steer away from this okay there's a better way of doing this",
    "start": "2286839",
    "end": "2294220"
  },
  {
    "text": "and the better way of doing this and despite oh no that's okay um I was going to say that might be",
    "start": "2294220",
    "end": "2299800"
  },
  {
    "text": "small to read is to use proper Json converters it's like you write a converter that can take",
    "start": "2299800",
    "end": "2307839"
  },
  {
    "text": "um toys but deserialize them as the correct subtypes and the amount of code that you need to write for this is not",
    "start": "2307839",
    "end": "2314440"
  },
  {
    "text": "that much this is one for Newtons of Json for system text Json there is also",
    "start": "2314440",
    "end": "2320980"
  },
  {
    "text": "um Json Converse there they take a little bit more code than this but not much",
    "start": "2320980",
    "end": "2326320"
  },
  {
    "text": "um and what you do is you register them at startup to your serializer settings and that will now",
    "start": "2326320",
    "end": "2333820"
  },
  {
    "text": "only work for toys and not for all of the types so you're safe from this",
    "start": "2333820",
    "end": "2339640"
  },
  {
    "text": "injection attack that can take over added benefit is you don't need to use",
    "start": "2339640",
    "end": "2345579"
  },
  {
    "text": "the fully qualified name you cannot come up with your own extension method and that's a lot cleaner for people who are",
    "start": "2345579",
    "end": "2350920"
  },
  {
    "text": "consuming your API which is always a good thing right so that handles polymorphic",
    "start": "2350920",
    "end": "2356980"
  },
  {
    "text": "deserialization which is the proper term for doing this in API contracts you might run into this another time so",
    "start": "2356980",
    "end": "2364540"
  },
  {
    "text": "remember that polymorphic deserialization and that enables that in asp.net so that allows us to use Lego",
    "start": "2364540",
    "end": "2372400"
  },
  {
    "text": "sets and toys and get the proper deserialized type when somebody is posting something to our API and we can",
    "start": "2372400",
    "end": "2379060"
  },
  {
    "text": "add those dollar types in the serialization step as well so that consumers know what they're getting in",
    "start": "2379060",
    "end": "2384579"
  },
  {
    "text": "Json and then we're going to need to talk standing logic let's say that we have a",
    "start": "2384579",
    "end": "2391480"
  },
  {
    "text": "bunch of thermostats and one of them has a different step that needs to happen when when",
    "start": "2391480",
    "end": "2397540"
  },
  {
    "text": "we're setting a schedule that means that we're going to need to have a place where we can actually fire in that logic",
    "start": "2397540",
    "end": "2403780"
  },
  {
    "text": "and call it but like thermostat behaviors something that's going to live in our core right we're going to have",
    "start": "2403780",
    "end": "2410260"
  },
  {
    "text": "Central thermostat apis but we want to extend how that works and the way that that works is we Define",
    "start": "2410260",
    "end": "2417220"
  },
  {
    "text": "a generic interface that works on top of our device type let's say in our case",
    "start": "2417220",
    "end": "2423099"
  },
  {
    "text": "our Lego set or marble and then we're going to implement that in the plugin",
    "start": "2423099",
    "end": "2428380"
  },
  {
    "text": "but we need a way to actually call that logic based on what was posted to our API so we had that polymorphic",
    "start": "2428380",
    "end": "2434800"
  },
  {
    "text": "deserialization going on we are getting a proper Lego set we see okay this is a Lego set we need to call Lego set logic",
    "start": "2434800",
    "end": "2441839"
  },
  {
    "text": "and the thing is we and that's why I showed you the service locator earlier",
    "start": "2441839",
    "end": "2447160"
  },
  {
    "text": "is like this is where a scope service locator comes in handy um when you're doing this kind of",
    "start": "2447160",
    "end": "2453160"
  },
  {
    "text": "extension work with plugins so we could inject a collection of all",
    "start": "2453160",
    "end": "2458680"
  },
  {
    "text": "the implementing plugins but what's the fun in that we can do something more advanced now the tricky thing that we",
    "start": "2458680",
    "end": "2465339"
  },
  {
    "text": "ran into is that the variables that are coming in are still boxed as a toy you",
    "start": "2465339",
    "end": "2472119"
  },
  {
    "text": "do get a proper object that is a Lego set but it's still a toy so we're gonna need a toy method but we're gonna need",
    "start": "2472119",
    "end": "2480160"
  },
  {
    "text": "to figure out with our marker interface which is the the bottom one here we're",
    "start": "2480160",
    "end": "2485560"
  },
  {
    "text": "gonna need to figure out how we are actually for which generic type that",
    "start": "2485560",
    "end": "2492280"
  },
  {
    "text": "this implementation is valid so if you implement the bottom interface we can",
    "start": "2492280",
    "end": "2497680"
  },
  {
    "text": "wire it in RDI container and we can know that this is the custom Logic the",
    "start": "2497680",
    "end": "2503619"
  },
  {
    "text": "Creator Logic for our thermostat implementation for instance or our Lego",
    "start": "2503619",
    "end": "2508900"
  },
  {
    "text": "set but we do get a generic method a method",
    "start": "2508900",
    "end": "2514960"
  },
  {
    "text": "that isn't generic that can take a toy and we can throw that object in there that's a whole idea",
    "start": "2514960",
    "end": "2520839"
  },
  {
    "text": "so if we do that um and we use our scope service locator and",
    "start": "2520839",
    "end": "2526660"
  },
  {
    "text": "and you don't need to read through all this code but what is important is when we are doing this logic and we want to",
    "start": "2526660",
    "end": "2532180"
  },
  {
    "text": "make this extension Point what we're injecting is not",
    "start": "2532180",
    "end": "2537400"
  },
  {
    "text": "um is not yet the actual implementation of that custom logic because we will only know",
    "start": "2537400",
    "end": "2543820"
  },
  {
    "text": "the type of what is being passed down in runtime we will not know it when we actually instantiate this service and",
    "start": "2543820",
    "end": "2551079"
  },
  {
    "text": "that is a whole tricky thing we needed to work around so what we built is a wrapper around our di container that let",
    "start": "2551079",
    "end": "2557380"
  },
  {
    "text": "us reuse the same scope and since it was a web application the scope for us wasn't HTTP request",
    "start": "2557380",
    "end": "2563859"
  },
  {
    "text": "and we could use that scope to resolve something with a type that we only would know further down and we would have the",
    "start": "2563859",
    "end": "2571660"
  },
  {
    "text": "resolve generic type interface where we could actually use the type of what was supposed to tour API to resolve",
    "start": "2571660",
    "end": "2577960"
  },
  {
    "text": "something then get the custom logic back and run that right so that's how we build extension points when we needed an",
    "start": "2577960",
    "end": "2584859"
  },
  {
    "text": "extension point for for logic where we would only know the type of something",
    "start": "2584859",
    "end": "2589900"
  },
  {
    "text": "somewhere far down in the runtime this is the place where we could do that",
    "start": "2589900",
    "end": "2595619"
  },
  {
    "text": "an Entity framework it's our Oram of choice in dot net",
    "start": "2595619",
    "end": "2602680"
  },
  {
    "text": "um and you can easily extend that with a whole bunch of types",
    "start": "2602680",
    "end": "2608440"
  },
  {
    "text": "um also this is where I had a fight with one of our developers now Entity framework needs to know three things",
    "start": "2608440",
    "end": "2613960"
  },
  {
    "text": "what your code looks like what your database looks like and how to map between them right",
    "start": "2613960",
    "end": "2619900"
  },
  {
    "text": "it does not need this information at build time you can feed it all this information at runtime you can have a DB",
    "start": "2619900",
    "end": "2627700"
  },
  {
    "text": "context without DB sets and feed it all of the info on on model creating and still have a functional DB context that",
    "start": "2627700",
    "end": "2634660"
  },
  {
    "text": "works it's not the recommended approach but it would work and we had",
    "start": "2634660",
    "end": "2641500"
  },
  {
    "text": "um we had a dependency hierarchy and in Entity framework core that is solved now",
    "start": "2641500",
    "end": "2647560"
  },
  {
    "text": "so so this slide is no longer true um there is more than a typer hierarchy",
    "start": "2647560",
    "end": "2653260"
  },
  {
    "text": "inheritance in Entity framework core at the moment um but how that works is you dump all",
    "start": "2653260",
    "end": "2659140"
  },
  {
    "text": "the fields for all your inheriting types into a single table and you have a discriminator column that allows you to",
    "start": "2659140",
    "end": "2664900"
  },
  {
    "text": "check which type is this particular record and then your DB context will handle the rest of them",
    "start": "2664900",
    "end": "2672040"
  },
  {
    "text": "now the problem that we had is well we had a central DB context for these",
    "start": "2672040",
    "end": "2677319"
  },
  {
    "text": "Central API calls but it needed to work with the inherited types that we were posting otherwise all that data would",
    "start": "2677319",
    "end": "2682780"
  },
  {
    "text": "get lost when we persisted into the database right so we needed to extend that DB context with knowledge that was",
    "start": "2682780",
    "end": "2689020"
  },
  {
    "text": "coming from plugins that were not registered yet when we start up",
    "start": "2689020",
    "end": "2694180"
  },
  {
    "text": "now the way to do that is to inject um",
    "start": "2694180",
    "end": "2699700"
  },
  {
    "text": "to have an extend toy context interface where we",
    "start": "2699700",
    "end": "2705700"
  },
  {
    "text": "would actually tell it about like different mappings of the new types that we would actually feed into that DB",
    "start": "2705700",
    "end": "2712240"
  },
  {
    "text": "context so doing this um in that implementation is enough and you can use that in the DB context",
    "start": "2712240",
    "end": "2719760"
  },
  {
    "text": "somewhere around the the fourth line from the bottom we can actually",
    "start": "2719760",
    "end": "2725520"
  },
  {
    "text": "like register all of these plugins and run this as an extension on our Central",
    "start": "2725520",
    "end": "2731319"
  },
  {
    "text": "DB contents and that solved that problem so now we have a an API that can do",
    "start": "2731319",
    "end": "2736480"
  },
  {
    "text": "polymorphic deserialization we can call Custom logic in our business logic based",
    "start": "2736480",
    "end": "2742000"
  },
  {
    "text": "on what what which types are posted and we can still use our Central DB context to not lose any data when we're saving",
    "start": "2742000",
    "end": "2748660"
  },
  {
    "text": "it right we're getting really close here we're getting really close to making everything work the last crucial step or",
    "start": "2748660",
    "end": "2756280"
  },
  {
    "text": "database migrations how much time do we still have about two minutes",
    "start": "2756280",
    "end": "2762520"
  },
  {
    "text": "okay and this is this is gonna need to go really quickly that's okay so there's",
    "start": "2762520",
    "end": "2767560"
  },
  {
    "text": "basically two approaches you can take either you make a central migration thing",
    "start": "2767560",
    "end": "2772900"
  },
  {
    "text": "um where you do all the migrations for your central DB context in the DB context assembly downside to this is you",
    "start": "2772900",
    "end": "2779980"
  },
  {
    "text": "you need to load all of your possible plugins so that you get a database table that has all the fields",
    "start": "2779980",
    "end": "2787180"
  },
  {
    "text": "the problem with that is if you do it in runtime Entity framework does check that there is a migration history table there",
    "start": "2787180",
    "end": "2793359"
  },
  {
    "text": "if it doesn't match with the model that it has it just refuses any Duty so in your deployment scenarios you're gonna",
    "start": "2793359",
    "end": "2800560"
  },
  {
    "text": "need to rename that table so that in runtime and the framework things that the table is not there and then it will",
    "start": "2800560",
    "end": "2805960"
  },
  {
    "text": "just assume that everything is okay so that's a trick on that side that's the easy side you've Pro if you've done",
    "start": "2805960",
    "end": "2811540"
  },
  {
    "text": "Entity framework then there is a distributed approach and I like that a lot better um migrations that belong with a certain",
    "start": "2811540",
    "end": "2818740"
  },
  {
    "text": "plugin like about the fields of that plugin they should be in the plugin itself",
    "start": "2818740",
    "end": "2825040"
  },
  {
    "text": "um which is cool but you can never pull that off with with ND framework migrations so we looked at a different product",
    "start": "2825040",
    "end": "2831520"
  },
  {
    "text": "called fluent migrator and fluid migrator just runs all the migrations",
    "start": "2831520",
    "end": "2836619"
  },
  {
    "text": "that it has in order and you number them so if you write a migration like that",
    "start": "2836619",
    "end": "2841900"
  },
  {
    "text": "and that number at the top saying is your timestamp it will run that in order",
    "start": "2841900",
    "end": "2847359"
  },
  {
    "text": "so that's okay it doesn't care what the previous migration is what the next migration is what the total model is",
    "start": "2847359",
    "end": "2852400"
  },
  {
    "text": "does not care right but this is really cool and you can write your migrations in code like this which resembles EF",
    "start": "2852400",
    "end": "2859540"
  },
  {
    "text": "core migrations a little bit it's a bit different but that is something that is easy to maintain",
    "start": "2859540",
    "end": "2865180"
  },
  {
    "text": "so if you do that and you can let them live with your plugins that means that when your application starts you can",
    "start": "2865180",
    "end": "2871420"
  },
  {
    "text": "just check which migrations have not run um and then run those now I don't prefer",
    "start": "2871420",
    "end": "2877960"
  },
  {
    "text": "that approach I don't like my database user to have rights to change the schema when it's already deployed so you can",
    "start": "2877960",
    "end": "2884619"
  },
  {
    "text": "put this in your pipeline no problem that does require that when your pipeline runs it knows which plugins",
    "start": "2884619",
    "end": "2891160"
  },
  {
    "text": "need to be migrated for but that is like an issue and that can be solved so the",
    "start": "2891160",
    "end": "2896500"
  },
  {
    "text": "result of all of this is a very very clean um a very clean dependency tree so you have",
    "start": "2896500",
    "end": "2903640"
  },
  {
    "text": "your core of the application in the middle and that doesn't have these whatsoever and the tests they can",
    "start": "2903640",
    "end": "2910240"
  },
  {
    "text": "just Target that we have our di container and our web assembly which is",
    "start": "2910240",
    "end": "2915460"
  },
  {
    "text": "our executing projects like on the left side and on the right side we have our database and our migration stuff and all",
    "start": "2915460",
    "end": "2922480"
  },
  {
    "text": "of our plugins and we get a very nice dependency tree across the whole project",
    "start": "2922480",
    "end": "2927700"
  },
  {
    "text": "and all of the stuff is easy to add in easy to remove easy to replace",
    "start": "2927700",
    "end": "2934119"
  },
  {
    "start": "2933000",
    "end": "2995000"
  },
  {
    "text": "so conclusion um before anything else before you start",
    "start": "2934119",
    "end": "2939400"
  },
  {
    "text": "Distributing like structure your code I mean learn proper solid get on board with that",
    "start": "2939400",
    "end": "2946000"
  },
  {
    "text": "plugins are really not that harsh you get a lot of tools out of the box in.net6",
    "start": "2946000",
    "end": "2953020"
  },
  {
    "text": "um like a lot of this stuff has been done for you you can look in my implementation on GitHub like steal that",
    "start": "2953020",
    "end": "2959859"
  },
  {
    "text": "code I think I put in a patchy or an MIT license on it so you can reuse it whatever you want",
    "start": "2959859",
    "end": "2967060"
  },
  {
    "text": "um don't solve your code Problems by introducing deployment problems like",
    "start": "2967060",
    "end": "2972160"
  },
  {
    "text": "take that from me remember that and don't worry if you're not at step",
    "start": "2972160",
    "end": "2977440"
  },
  {
    "text": "four or five or eight I don't know what step eight is I'm not there um but we all grow and that is what I",
    "start": "2977440",
    "end": "2984160"
  },
  {
    "text": "realized and what a lot of my job evolves around is helping people grow is why I like doing this for instance and",
    "start": "2984160",
    "end": "2990640"
  },
  {
    "text": "so don't worry um things will click and it will work that is the get up the repo my Twitter",
    "start": "2990640",
    "end": "2996460"
  },
  {
    "start": "2995000",
    "end": "3017000"
  },
  {
    "text": "handle and my icq number I'm on a mission to make icq great again I'm the",
    "start": "2996460",
    "end": "3001680"
  },
  {
    "text": "head of Learning and Development at access in Belgium um but yeah please come find me to chat",
    "start": "3001680",
    "end": "3006720"
  },
  {
    "text": "about this about guitars about learning um yeah like I'll be around",
    "start": "3006720",
    "end": "3012480"
  },
  {
    "text": "have a nice rest of your conference",
    "start": "3012480",
    "end": "3015980"
  }
]