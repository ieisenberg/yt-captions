[
  {
    "text": "this is a subject that I've done quite a bit of research and development on and I'm continuing to do research and",
    "start": "4000",
    "end": "9950"
  },
  {
    "text": "development on this and in fact I've done I've been of writing about this subject on the developerworks site I've",
    "start": "9950",
    "end": "16010"
  },
  {
    "text": "written 20 installments around this subject you can get to it through this URL but that's hideous and awful so I've",
    "start": "16010",
    "end": "22580"
  },
  {
    "text": "used modern technology to shorten that and make it more accessible and so you can read a lot more about this topic",
    "start": "22580",
    "end": "28190"
  },
  {
    "text": "there if you're interested in it my agenda this morning is to talk first",
    "start": "28190",
    "end": "33230"
  },
  {
    "text": "about what is software design what do we mean we talk about design and software then a little bit about the distinction",
    "start": "33230",
    "end": "40310"
  },
  {
    "text": "between architecture and design and it turns out there's a particularly useful way to distinguish between those two",
    "start": "40310",
    "end": "46910"
  },
  {
    "text": "things that allow you to think about them separately which is very often a useful exercise to perform I then talk",
    "start": "46910",
    "end": "53540"
  },
  {
    "text": "about things that make you emergent design hard I talked about some things that make it easier and then I talked a",
    "start": "53540",
    "end": "58700"
  },
  {
    "text": "bit about once you've found these design elements what can you do with them how do you harvest them and how do you take",
    "start": "58700",
    "end": "64908"
  },
  {
    "text": "advantage of them but I'm going to start with the poetry of Donald Rumsfeld who",
    "start": "64909",
    "end": "72380"
  },
  {
    "text": "very famously said there are known unknowns that is to say there are things",
    "start": "72380",
    "end": "77420"
  },
  {
    "text": "that we now know we don't know but there are also unknown unknowns there are",
    "start": "77420",
    "end": "83510"
  },
  {
    "text": "things that we do not know we don't know and he didn't realize that but he was",
    "start": "83510",
    "end": "88670"
  },
  {
    "text": "really talking about software here because this it turns out is the deadly",
    "start": "88670",
    "end": "93860"
  },
  {
    "text": "thing in software it's not the known unknowns because you can make contingency plans for that you know we",
    "start": "93860",
    "end": "99320"
  },
  {
    "text": "don't really understand how that works so let's plan some time to research and develop that and think about it it's the",
    "start": "99320",
    "end": "104600"
  },
  {
    "text": "unknown unknowns that end up killing you and in fact this is the thing that ultimately kills any kind of big giant",
    "start": "104600",
    "end": "111500"
  },
  {
    "text": "upfront design effort in software you always get nabbed by the unknown unknowns and so in the agile space what",
    "start": "111500",
    "end": "121700"
  },
  {
    "text": "we've realized is that the future is really really hard to predict and in the",
    "start": "121700",
    "end": "127310"
  },
  {
    "text": "traditional architecture world what they've been trying to do for years is make their crystal ball better by",
    "start": "127310",
    "end": "133970"
  },
  {
    "text": "applying more and or rigor to it and we've been doing something different we've said you know",
    "start": "133970",
    "end": "139610"
  },
  {
    "text": "the future is really hard to predict what if instead of getting better and better at predicting the future we get",
    "start": "139610",
    "end": "144860"
  },
  {
    "text": "better and better at adaptability as we go and then you don't pay quite such a hard price for having the unknown",
    "start": "144860",
    "end": "151010"
  },
  {
    "text": "unknown pop up because you're a lot more adaptable that's exactly what this talk is about is how can we build techniques",
    "start": "151010",
    "end": "157550"
  },
  {
    "text": "for adaptability in the software so that we don't pay these huge prices for the inevitable unknown unknowns that are",
    "start": "157550",
    "end": "164060"
  },
  {
    "text": "always lurking right around the corner but before we get too far into that we really need to answer a fundamental",
    "start": "164060",
    "end": "170870"
  },
  {
    "text": "question like what do we mean we talk about software design and fortunately",
    "start": "170870",
    "end": "176630"
  },
  {
    "text": "someone has answered this question for us back in the fall of 1992 in the C++",
    "start": "176630",
    "end": "182420"
  },
  {
    "text": "journal Jack Reeves wrote a very influential essay which you can still get at that location it's still worth",
    "start": "182420",
    "end": "189290"
  },
  {
    "text": "reading because you would believe that it was written last week and you make some very observations in this paper",
    "start": "189290",
    "end": "194900"
  },
  {
    "text": "because what he's trying to do here is do a deep metaphorical comparison",
    "start": "194900",
    "end": "199970"
  },
  {
    "text": "between traditional engineering and software engineering we do lots of light metaphorical comparisons about you know",
    "start": "199970",
    "end": "207019"
  },
  {
    "text": "our job is like building bridges or our job is like gardening or mountain climbing or all these kind of very loose",
    "start": "207019",
    "end": "212989"
  },
  {
    "text": "metaphorical comparisons but you want to go a little bit deeper and see how things really are similar and how things",
    "start": "212989",
    "end": "218840"
  },
  {
    "text": "really are different and he breaches some interesting conclusions the first one being that's the final goal of any",
    "start": "218840",
    "end": "226010"
  },
  {
    "text": "engineering activity it's some type of documentation if you're a civil engineer",
    "start": "226010",
    "end": "232340"
  },
  {
    "text": "and you're tasked with creating a new bridge what is your outcome for your work it's a design for a bridge in a",
    "start": "232340",
    "end": "240170"
  },
  {
    "text": "particular location that operates under particular constraints that has particular scalability characteristics",
    "start": "240170",
    "end": "245269"
  },
  {
    "text": "but you don't actually build that bridge you hand it over to a group of people who are expert bridge builders and you",
    "start": "245269",
    "end": "251299"
  },
  {
    "text": "turn it over to a manufacturing team and so the output for the engineering effort is this design that you handle and an",
    "start": "251299",
    "end": "258320"
  },
  {
    "text": "engineering team it actually ends up manufacturing it but here's one of the",
    "start": "258320",
    "end": "263660"
  },
  {
    "text": "places where the traditional world in the software world differ a lot because",
    "start": "263660",
    "end": "269270"
  },
  {
    "text": "for physical things means stamping out atoms and it turns out that once you've stamped atoms into a particular shape",
    "start": "269270",
    "end": "274970"
  },
  {
    "text": "it's really hard to understand them to searching a resampling in a different shape you have to do crazy things to",
    "start": "274970",
    "end": "280669"
  },
  {
    "text": "like melt them or change their chemical composition etc but we don't live in an",
    "start": "280669",
    "end": "285979"
  },
  {
    "text": "atoms based world we live in a bite to base world and bytes are super soft and",
    "start": "285979",
    "end": "291080"
  },
  {
    "text": "malleable and you can change them all the time the drop of a hat that's a very different thing from our world in the",
    "start": "291080",
    "end": "297349"
  },
  {
    "text": "traditional engineering world but then you have to ask yourself so what is the analog in the software world to that",
    "start": "297349",
    "end": "304039"
  },
  {
    "text": "manufacturing process that traditional engineering goes through it turns out it's the compilation and deployment",
    "start": "304039",
    "end": "310220"
  },
  {
    "text": "process that we go through that's the thing that takes our design and manifests it into something that moves",
    "start": "310220",
    "end": "316550"
  },
  {
    "text": "things around in the real world in this case electrons through wires etc which",
    "start": "316550",
    "end": "322729"
  },
  {
    "text": "suggests that our design our blueprint our outcome for the engineering effort",
    "start": "322729",
    "end": "328430"
  },
  {
    "text": "is the source code the complete source code this is our blueprint for software",
    "start": "328430",
    "end": "335210"
  },
  {
    "text": "and any change that changes source code changes our design every time you make a",
    "start": "335210",
    "end": "340370"
  },
  {
    "text": "change the source code you're changing the design of your piece of software so debugging is part of design Quality",
    "start": "340370",
    "end": "347630"
  },
  {
    "text": "Assurance is part of design because they make changes that yield changes in the source code your software that is your",
    "start": "347630",
    "end": "353960"
  },
  {
    "text": "design but here's where we really differ from the traditional in manufacturing world because the most expensive process",
    "start": "353960",
    "end": "360770"
  },
  {
    "text": "in the judicial engineering world is the stamping out atoms part in fact a lot of",
    "start": "360770",
    "end": "366169"
  },
  {
    "text": "the techniques of predictability that were created in the traditional engineering world were not created to",
    "start": "366169",
    "end": "372139"
  },
  {
    "text": "make things safer they were created initially to make them more cost-effective because it is simply too",
    "start": "372139",
    "end": "377659"
  },
  {
    "text": "expensive to test bridges by building new bridges and rolling heavy stuff over them to see if they collapse or not",
    "start": "377659",
    "end": "383659"
  },
  {
    "text": "that's a terrible way to build bridges but we can build software like that all day long because there's virtually no",
    "start": "383659",
    "end": "390110"
  },
  {
    "text": "cost to remanufacture it we just fix the little hole and remanufacture the whole thing and we have a realistic kind of",
    "start": "390110",
    "end": "396740"
  },
  {
    "text": "world again our manufacturing is dirt cheap in fact every time you stop typing",
    "start": "396740",
    "end": "401930"
  },
  {
    "text": "now an army of gnomes inside your computer springs to life and manufacturers you're",
    "start": "401930",
    "end": "407810"
  },
  {
    "text": "designed for you and Jack Reese concludes as essay by saying that given",
    "start": "407810",
    "end": "412879"
  },
  {
    "text": "that software designs are relatively easy to turn out and essentially free to build an unsurprising revelation is that",
    "start": "412879",
    "end": "419840"
  },
  {
    "text": "software designs tend to be incredibly large and complex I think they're likely",
    "start": "419840",
    "end": "425330"
  },
  {
    "text": "some of the most complex things that humans create because we don't have some of the same constraints that other kinds",
    "start": "425330",
    "end": "432259"
  },
  {
    "text": "of engineering has for example we don't have the same kind of locality to fault",
    "start": "432259",
    "end": "437900"
  },
  {
    "text": "that traditional systems have so if a wing falls off an airplane a forensic engineer can kind of go to where it was",
    "start": "437900",
    "end": "443569"
  },
  {
    "text": "connected the airplane and deduce that there probably is a problem around there but in software some little fault can",
    "start": "443569",
    "end": "450199"
  },
  {
    "text": "cause an instability that doesn't manifest for a hundred thousand lines of code away so it's very hard to trace",
    "start": "450199",
    "end": "455629"
  },
  {
    "text": "down exactly what is that problem it's also extraordinarily fragile we have very very fragile breakage points in",
    "start": "455629",
    "end": "462020"
  },
  {
    "text": "software unlike in traditional engineering world so the software",
    "start": "462020",
    "end": "467120"
  },
  {
    "text": "designs tend to be these giant large complex things because we don't have the same kind of failure modes and the same",
    "start": "467120",
    "end": "473569"
  },
  {
    "text": "kind of constraints that would keep them simple that exist in the real world and his ultimate conclusion because the",
    "start": "473569",
    "end": "480199"
  },
  {
    "text": "software may be cheap to build but it's incredibly expensive to design because everything you're doing is basically",
    "start": "480199",
    "end": "486169"
  },
  {
    "text": "part of this design process in software so when we was talking about design he",
    "start": "486169",
    "end": "491779"
  },
  {
    "text": "was really talking about what we talked about now encompassing all of architecture and design and all the",
    "start": "491779",
    "end": "497330"
  },
  {
    "text": "things that make up what you're doing as you create new software but I want to",
    "start": "497330",
    "end": "502969"
  },
  {
    "text": "make a differentiation here between architecture and what I'm calling design unfortunately design is one of those",
    "start": "502969",
    "end": "509900"
  },
  {
    "text": "mega overloaded words because Jack Reeves uses design as basically what we call architecture and design all the",
    "start": "509900",
    "end": "516649"
  },
  {
    "text": "things that go into software when we think of design now we think of user experience design and the the kind of",
    "start": "516649",
    "end": "521930"
  },
  {
    "text": "user experience interaction that's not the kind of design I'm talking about the differentiation I want to make here is",
    "start": "521930",
    "end": "527920"
  },
  {
    "text": "one that Martin Fowler makes in his white paper called a who needs an architect and it is actually the basis",
    "start": "527920",
    "end": "534290"
  },
  {
    "text": "for the title of the developer work series that I showed you in passing earlier",
    "start": "534290",
    "end": "539769"
  },
  {
    "text": "it's this idea that in his a whitepaper who needs an architect which is really a",
    "start": "539769",
    "end": "544880"
  },
  {
    "text": "white paper about the role of architects on agile projects he kind of incidentally gives some definitions of",
    "start": "544880",
    "end": "550519"
  },
  {
    "text": "architecture and one of those is my favorite definition of architecture and it leads you to this very useful kind of",
    "start": "550519",
    "end": "556610"
  },
  {
    "text": "ability to cleave this definition in part is that the architectural elements and a piece of software are the things",
    "start": "556610",
    "end": "562430"
  },
  {
    "text": "that are perceived as hard to change later and that in fact leads to the title of that developer work series I",
    "start": "562430",
    "end": "569720"
  },
  {
    "text": "don't know if you noticed or not was evolutionary architecture and emergent design and there's an important",
    "start": "569720",
    "end": "575240"
  },
  {
    "text": "distinction between those two things because if the architectural elements are the things that are hard to change later those are represented here in kind",
    "start": "575240",
    "end": "583399"
  },
  {
    "text": "of these gray boxes everything sits on top of architecture you can't have",
    "start": "583399",
    "end": "588649"
  },
  {
    "text": "emergent architecture because everything rests on top of it but you can't have emergent design so the gray boxes here",
    "start": "588649",
    "end": "596000"
  },
  {
    "text": "in this very abstract picture represent architectural elements you can't start shuffling those around without making",
    "start": "596000",
    "end": "601130"
  },
  {
    "text": "everything unstable so the things that are sitting on top you can you have much more flexibility of moving those things",
    "start": "601130",
    "end": "606709"
  },
  {
    "text": "around and so you can kind of ask yourself when you look at your software stack wotz architecture versus design if",
    "start": "606709",
    "end": "613160"
  },
  {
    "text": "it's hard to change later than his darka textual so your language is certainly architectural the web framework you've",
    "start": "613160",
    "end": "619100"
  },
  {
    "text": "chosen as architectural because you can't trivially change that for something later but the way you're using those architectural elements so your web",
    "start": "619100",
    "end": "625970"
  },
  {
    "text": "framework the way you're using the workflow and the validation and all those pieces that come with it those are",
    "start": "625970",
    "end": "631220"
  },
  {
    "text": "really aspects of design and you don't have to get those nearly as correct because the penalty for changing those",
    "start": "631220",
    "end": "636500"
  },
  {
    "text": "is not nearly so high because other things don't rest on them and depend on them so the real trick in this world is",
    "start": "636500",
    "end": "642949"
  },
  {
    "text": "can we build architectural components that are simply enough that we can evolve over time because the second half",
    "start": "642949",
    "end": "650660"
  },
  {
    "text": "of this definition is ideally you'd like to have as few of these things that are",
    "start": "650660",
    "end": "656029"
  },
  {
    "text": "hard to change as possible because architectural elements give you useful scaffolding it's things you don't have",
    "start": "656029",
    "end": "661670"
  },
  {
    "text": "to build yourself but they also represent constraints and so what we'd like to have is the most benefit with",
    "start": "661670",
    "end": "667819"
  },
  {
    "text": "the fewest constraints and that's the way we try to design things and we make this split between evolutionary",
    "start": "667819",
    "end": "674660"
  },
  {
    "text": "architecture which is very much in the kind of micro-services rest and component-based worlds the previous",
    "start": "674660",
    "end": "681080"
  },
  {
    "text": "speaker was talking about and that some other people in this track are going to talk about later today I'm going to focus mostly in this talk on this design",
    "start": "681080",
    "end": "688250"
  },
  {
    "text": "aspect and in particular emergent design",
    "start": "688250",
    "end": "693160"
  },
  {
    "text": "and so let's talk about some definitions if you look at the word emergence that's",
    "start": "693550",
    "end": "698660"
  },
  {
    "text": "basically the root word of emergent or vice-versa and the definition from",
    "start": "698660",
    "end": "704870"
  },
  {
    "text": "Webster says rising or emerging out of the sizzle but something about fluids so",
    "start": "704870",
    "end": "710060"
  },
  {
    "text": "I'm going to selectively edit the Webster definition to get exactly the one I want which is rising or emerging",
    "start": "710060",
    "end": "717110"
  },
  {
    "text": "out of anything that covers or conceals or comes to light and there's another Webster definition that's suddenly",
    "start": "717110",
    "end": "722690"
  },
  {
    "text": "appearing arising unexpectedly or calling for prompt action both of these aspects turn out our part of this world",
    "start": "722690",
    "end": "729380"
  },
  {
    "text": "of emergent design and I'm going to talk about two different aspects that I will do a much deeper dive into during the",
    "start": "729380",
    "end": "735800"
  },
  {
    "text": "course of this talk and here's the first one let's say that conceptually it's",
    "start": "735800",
    "end": "741589"
  },
  {
    "text": "your job you have a problem that looks kind of like this and while you're at work you're thinking about this while",
    "start": "741589",
    "end": "747650"
  },
  {
    "text": "you're driving home you're thinking about this while you're mowing your yard you're thinking about this when your",
    "start": "747650",
    "end": "752990"
  },
  {
    "text": "spouse is talking to you you're supposed to be paying attention to them they're still part of your brain and still working on this because you know that",
    "start": "752990",
    "end": "759320"
  },
  {
    "text": "there's some sort of pattern and all this mess that you really can resolve you think about it really long and hard",
    "start": "759320",
    "end": "765050"
  },
  {
    "text": "and finally some sort of useful pattern or hierarchy comes floating out of that that's really this exercise of taking",
    "start": "765050",
    "end": "771650"
  },
  {
    "text": "existing code and finding abstractions and patterns that are living and lurking",
    "start": "771650",
    "end": "776960"
  },
  {
    "text": "and hiding in that code and I'll show you some concrete techniques using metrics and other things to actually go",
    "start": "776960",
    "end": "783470"
  },
  {
    "text": "and do this in an existing code base so that's part of emergent design is taking existing code base and being able to",
    "start": "783470",
    "end": "789230"
  },
  {
    "text": "find design elements that are in there that you just never saw before because you didn't have a particularly light",
    "start": "789230",
    "end": "794480"
  },
  {
    "text": "that you could shine on that corner of your code base to illuminate that little design issue so that's",
    "start": "794480",
    "end": "801800"
  },
  {
    "text": "one half of the techniques I'll talk about the other half is this concept",
    "start": "801800",
    "end": "807710"
  },
  {
    "text": "from the lean software guys of the last responsible moment to make decisions about things the idea here is that very",
    "start": "807710",
    "end": "815420"
  },
  {
    "text": "often on projects you're presented with the decision you should ask yourself is there a way I can responsibly defer that",
    "start": "815420",
    "end": "822380"
  },
  {
    "text": "decision until later the idea being that the longer you can delay that decision the more real knowledge and context",
    "start": "822380",
    "end": "829760"
  },
  {
    "text": "about the true nature of the problem not what you think the problem is but the actual problem the longer you can delay",
    "start": "829760",
    "end": "835400"
  },
  {
    "text": "that the more real information you can work on and you have a potential for a better decision of course you can't wait",
    "start": "835400",
    "end": "842000"
  },
  {
    "text": "too long and that's the tricky thing is the last responsible moment but the longer you can delay you have more real",
    "start": "842000",
    "end": "848180"
  },
  {
    "text": "data for a decision and so the trick here becomes how do you find that inflection point of the last responsible",
    "start": "848180",
    "end": "854240"
  },
  {
    "text": "moment I'll talk about a few techniques about that that's where the end of the talk and so I'm going to talk about",
    "start": "854240",
    "end": "859880"
  },
  {
    "text": "these two aspects of emergent design and it turns out that these two very nicely fall into two categories",
    "start": "859880",
    "end": "868000"
  },
  {
    "text": "finding abstractions and patterns works really well on existing brownfield projects ten laps responsible moment",
    "start": "868000",
    "end": "875000"
  },
  {
    "text": "works really really well on greenfield or brand-new kind of projects and in fact some of the current research I'm",
    "start": "875000",
    "end": "881480"
  },
  {
    "text": "doing is and I won't get to in this talk I don't just tease you for the next talk that I'm going to do at some point in",
    "start": "881480",
    "end": "886700"
  },
  {
    "text": "the future is exactly when does the inflection point change from greenfield a brownfield and your engineering",
    "start": "886700",
    "end": "892970"
  },
  {
    "text": "practices should change as an inflection point passes from greenfield a brownfield because when that inflection",
    "start": "892970",
    "end": "898520"
  },
  {
    "text": "point happens you now have different engineering concerns that you did from when it was a greenfield project oh and",
    "start": "898520",
    "end": "905420"
  },
  {
    "text": "here's the the white paper that I was talking about Aelita - before from a Martin Fowler that's the who needs an architect white",
    "start": "905420",
    "end": "911180"
  },
  {
    "text": "paper that I've talked about so I'm going to talk about some things that",
    "start": "911180",
    "end": "917480"
  },
  {
    "text": "make it so you can find design elements but I'm going to spend a couple of",
    "start": "917480",
    "end": "923540"
  },
  {
    "text": "minutes and talk about what is unfortunately much more common in our world which are things that make finding",
    "start": "923540",
    "end": "929510"
  },
  {
    "text": "design elements and code hard I'll talk about three things at first of these is the nature of complexity",
    "start": "929510",
    "end": "935570"
  },
  {
    "text": "software we have two kinds of complexity and software essential or intrinsic",
    "start": "935570",
    "end": "940880"
  },
  {
    "text": "complexity every problem has a certain amount of essential complexity that there's part of that problem but we also",
    "start": "940880",
    "end": "948080"
  },
  {
    "text": "have a lot of accidental complexity which are all the truly innovative ways we have figured out how to make problems",
    "start": "948080",
    "end": "953660"
  },
  {
    "text": "way harder than they should be which is seems like the most fruitful area of innovation in software is how can we",
    "start": "953660",
    "end": "960080"
  },
  {
    "text": "make things ridiculously complex because we're really really good at that this is not a new distinction fred brooks made",
    "start": "960080",
    "end": "966710"
  },
  {
    "text": "this distinction back in 1975 and we still struggle with this but a lot of understanding design is understanding am",
    "start": "966710",
    "end": "973700"
  },
  {
    "text": "I looking at a central versus accidental complexity because obviously accidental complexity is design that shouldn't be",
    "start": "973700",
    "end": "979310"
  },
  {
    "text": "there and so sifting through that is one of the initial things that you could have to do to figure out well is this",
    "start": "979310",
    "end": "984650"
  },
  {
    "text": "something that needs to be preserved or should it be gotten rid of a second",
    "start": "984650",
    "end": "990380"
  },
  {
    "text": "thing that makes emergent design really tough is rampant technical debt",
    "start": "990380",
    "end": "995690"
  },
  {
    "text": "everywhere this is a metaphor by Ward Cunningham that I'm sure you're all very familiar with because it's a metaphor",
    "start": "995690",
    "end": "1001120"
  },
  {
    "text": "that works really nicely in the real world the idea here being that if you look at if you can imagine your software",
    "start": "1001120",
    "end": "1008500"
  },
  {
    "text": "that you're working on right now but you could lavish all of your love and attention on it there's no refactoring",
    "start": "1008500",
    "end": "1014260"
  },
  {
    "text": "too big or too small you can do anything that you want to making them as perfect software on earth think about that and then the the",
    "start": "1014260",
    "end": "1021130"
  },
  {
    "text": "version of it that you left to come here the Delta between those two things is largely going to be technical debt which",
    "start": "1021130",
    "end": "1027400"
  },
  {
    "text": "are generally externally imposed forces that cause you to compromise design",
    "start": "1027400",
    "end": "1032438"
  },
  {
    "text": "elements schedule pressures the classic kind of technical debt driver but there",
    "start": "1032439",
    "end": "1037600"
  },
  {
    "text": "are others on projects there's a famous one called the boat anchor anti-pattern which says that we paid a lot of money",
    "start": "1037600",
    "end": "1043870"
  },
  {
    "text": "for this framework of this infrastructure and thou shalt use it on every project where that makes sense to use on this project or not because we",
    "start": "1043870",
    "end": "1049750"
  },
  {
    "text": "paid a lot of money for it that drives a lot of technical debt on lots and lots of projects or the the standard",
    "start": "1049750",
    "end": "1055030"
  },
  {
    "text": "corporate database often dries technical debt on lots of projects because we all use the same database for everything and",
    "start": "1055030",
    "end": "1061420"
  },
  {
    "text": "so a congratulation is trying to get your network graph through Oracle see if",
    "start": "1061420",
    "end": "1067090"
  },
  {
    "text": "you can ever get that to happen this is really a reality in our world this idea of technical debt and in fact",
    "start": "1067090",
    "end": "1073600"
  },
  {
    "text": "I don't think it's necessarily a bad thing just like credit card debt for example",
    "start": "1073600",
    "end": "1078820"
  },
  {
    "text": "is not necessarily a bad thing but fortunately there's a real-world governor on credit card debt called a",
    "start": "1078820",
    "end": "1086169"
  },
  {
    "text": "credit limit and that's the thing that most software projects lack is a credit limit and so the real trick on technical",
    "start": "1086169",
    "end": "1093400"
  },
  {
    "text": "debt is not avoiding it I think it's actually unavoidable because of the nature of how business interacts with",
    "start": "1093400",
    "end": "1098890"
  },
  {
    "text": "the way that you build software the real trick for us is negotiating repayment but before you can negotiate repayment",
    "start": "1098890",
    "end": "1105880"
  },
  {
    "text": "you've got to convince someone that technical debt exists in a way that they can understand it's one thing to go to",
    "start": "1105880",
    "end": "1111790"
  },
  {
    "text": "your boss and say you know I'm starting to feel sick inside I'm having trouble sleeping at night I think our software",
    "start": "1111790",
    "end": "1117730"
  },
  {
    "text": "might be starting to suck and they're gonna immediately ask you well how can you tell well I'm going to show you how",
    "start": "1117730",
    "end": "1125020"
  },
  {
    "text": "to tell and one of my mantras in the agile engineering space is a demonstration Trump's discussion you can",
    "start": "1125020",
    "end": "1132130"
  },
  {
    "text": "talk about this stuff until you're blue in the face and you'll never make any headway but if you can start showing",
    "start": "1132130",
    "end": "1137950"
  },
  {
    "text": "objective results this is the outcome of engineering about repeatability if you can find something that shows your case",
    "start": "1137950",
    "end": "1144820"
  },
  {
    "text": "objectively then you can go a long way toward convincing them some exercise like we need to spend some time",
    "start": "1144820",
    "end": "1150100"
  },
  {
    "text": "refactoring is a useful exercise to undergo and I want to show you a really",
    "start": "1150100",
    "end": "1155440"
  },
  {
    "text": "nice technical artifact that illustrates technical debt but before I do that I need to digress for just a second and do",
    "start": "1155440",
    "end": "1162340"
  },
  {
    "text": "a little background on a particular metric call cyclomatic complexity that many of you are no doubt familiar with",
    "start": "1162340",
    "end": "1167830"
  },
  {
    "text": "this is a very old metric that's been around since the 1970s you also hear this called mccabe's cyclomatic",
    "start": "1167830",
    "end": "1173410"
  },
  {
    "text": "complexity because thomas mccabe created it but the idea here is that you can place a numeric value on how complicated",
    "start": "1173410",
    "end": "1180429"
  },
  {
    "text": "a function or method is and here's the formula edges minus nodes plus 2 where",
    "start": "1180429",
    "end": "1186130"
  },
  {
    "text": "nodes are lines of code and edges or possible pathways through code so if you",
    "start": "1186130",
    "end": "1191679"
  },
  {
    "text": "look at a simple little method like this and you draw it out in this edges and nodes kind of view you can count things",
    "start": "1191679",
    "end": "1198070"
  },
  {
    "text": "up this is 4 minus 4 plus 2 so this has a cyclomatic complexity of two but it's kind of boring when the two",
    "start": "1198070",
    "end": "1205530"
  },
  {
    "text": "cancel each other out so here's a slightly more complex method or function and you can label it with the edges at",
    "start": "1205530",
    "end": "1212670"
  },
  {
    "text": "nodes view and find out that cyclamate complexity this guy is three so this is one more complicated than the function",
    "start": "1212670",
    "end": "1218610"
  },
  {
    "text": "that we saw before so we now have a tool that lets us run it against our code",
    "start": "1218610",
    "end": "1223680"
  },
  {
    "text": "base and assess what the most complex functions are which is kind of Handy well take advantage of that a little bit",
    "start": "1223680",
    "end": "1229200"
  },
  {
    "text": "later to go find some complex things so we can kill them off but we can also generate some other interesting facts",
    "start": "1229200",
    "end": "1235230"
  },
  {
    "text": "from this metric for example because this is a function or method level metric and your system is composed of",
    "start": "1235230",
    "end": "1241410"
  },
  {
    "text": "classes that consist of many methods and functions you could run this against your whole code base and get a",
    "start": "1241410",
    "end": "1246720"
  },
  {
    "text": "complexity number for the entire code base by segregating all those together and if you divide that by the number of",
    "start": "1246720",
    "end": "1253020"
  },
  {
    "text": "lines of code you get cyclomatic complexity per line of code which is a very interesting metric because you can",
    "start": "1253020",
    "end": "1258900"
  },
  {
    "text": "see trending so here's a chart that was created by one of my colleagues on a",
    "start": "1258900",
    "end": "1264930"
  },
  {
    "text": "project there was a public facing media site in the UK this is a snapshot of this project in time from April 1st 2006",
    "start": "1264930",
    "end": "1272280"
  },
  {
    "text": "to August 18th 2007 the red line that you see there is cyclomatic complexity per line of code",
    "start": "1272280",
    "end": "1278340"
  },
  {
    "text": "and the gray boxes you see your releases of this code and the interesting thing",
    "start": "1278340",
    "end": "1284370"
  },
  {
    "text": "here is what happened around release number three because they were hurrying to get this out they had a lot of",
    "start": "1284370",
    "end": "1290880"
  },
  {
    "text": "schedule pressure it manifests here in churn in complexity because they're adding complexity and they're killing it",
    "start": "1290880",
    "end": "1297120"
  },
  {
    "text": "off and they're adding it because they're in a lot of hurry and there's a lot of churn on the project and the tech lead on this project realized this trend",
    "start": "1297120",
    "end": "1304830"
  },
  {
    "text": "was happening and so produce this graph and he did it by hand by writing a little ruby script we ran a complexity",
    "start": "1304830",
    "end": "1310380"
  },
  {
    "text": "tool on the first version and then check out the second version run the complexity tool aggregate the results and then have Excel graph it for you you",
    "start": "1310380",
    "end": "1317040"
  },
  {
    "text": "do this more easily with something like sonar which I'll show you in a second but he took this as evidence for the",
    "start": "1317040",
    "end": "1323610"
  },
  {
    "text": "project management's that okay looked and where they were released three there's a disturbing trend here because",
    "start": "1323610",
    "end": "1329400"
  },
  {
    "text": "very often in the software world the raw values of metrics are not that meaningful because you",
    "start": "1329400",
    "end": "1335180"
  },
  {
    "text": "a method that has a cyclamate complexion of 12 was that good or bad well I don't know it depends on is that essential or",
    "start": "1335180",
    "end": "1341390"
  },
  {
    "text": "accidental complexity that's making it that high but trends are often very interesting because if it's 12 now and",
    "start": "1341390",
    "end": "1347090"
  },
  {
    "text": "then two months later it's 20 and then three months later it's 35 clearly something's going in the wrong direction",
    "start": "1347090",
    "end": "1352280"
  },
  {
    "text": "and that's exactly what he assessed here was the trend look kind of disturbing but you have to ask yourself so what's",
    "start": "1352280",
    "end": "1359660"
  },
  {
    "text": "the impact what if we just didn't care about that what do we just let this run rampant and let this trend line keep",
    "start": "1359660",
    "end": "1365450"
  },
  {
    "text": "going up to the moon what ultimately is going to be the downside of that well the downside of that is that you're",
    "start": "1365450",
    "end": "1372860"
  },
  {
    "text": "adding more stuff in there that shouldn't be there in terms of technical debt which means that everyone's",
    "start": "1372860",
    "end": "1378050"
  },
  {
    "text": "velocity is going to slow down just a little bit because now technical debt literally means things in your code that",
    "start": "1378050",
    "end": "1384440"
  },
  {
    "text": "shouldn't be there that are compromised for what should be there so when it comes time to add other new features",
    "start": "1384440",
    "end": "1389630"
  },
  {
    "text": "later you have to go back and refigure out why this weird thing is there and then build around that compromise",
    "start": "1389630",
    "end": "1395270"
  },
  {
    "text": "frequently by building another compromise around that and so it's like you have a garden where you have weeds",
    "start": "1395270",
    "end": "1400430"
  },
  {
    "text": "growing up and it becomes very hard to find the vegetables for all the weeds over time so the long-term impact of",
    "start": "1400430",
    "end": "1407230"
  },
  {
    "text": "unaddressed technical debt is that everyone's velocity gets a little bit slower over time in fact some of you may",
    "start": "1407230",
    "end": "1414230"
  },
  {
    "text": "have seen this manifest at your company where changes that two or three years ago would take two or three days now",
    "start": "1414230",
    "end": "1420680"
  },
  {
    "text": "take several weeks because you have so much technical debt built up and in fact this becomes the basis for a pretty good",
    "start": "1420680",
    "end": "1427880"
  },
  {
    "text": "argument to say you know what it's not a bad idea particularly in code bases that have been around for a while they",
    "start": "1427880",
    "end": "1434750"
  },
  {
    "text": "inevitably accrue technical debt no matter how careful you have been at designing them because unknown unknowns",
    "start": "1434750",
    "end": "1441890"
  },
  {
    "text": "always manifest having a dedicated resource a pair of rotating developers",
    "start": "1441890",
    "end": "1447710"
  },
  {
    "text": "for example that do nothing but go and kill technical debt is a useful thing to have because if they're successful they",
    "start": "1447710",
    "end": "1454370"
  },
  {
    "text": "increase everyone's velocity just a little bit so their impact is greater than the impact of just two people",
    "start": "1454370",
    "end": "1460280"
  },
  {
    "text": "touching code because they're clearing away underbrush so that other people can be effective at writing code and that",
    "start": "1460280",
    "end": "1466970"
  },
  {
    "text": "was convincing enough to say okay we need to do some refactoring exercises and that basically was 300 and 3.1 with",
    "start": "1466970",
    "end": "1473600"
  },
  {
    "text": "the efforts to kill off some of that technical debt this is a good example of this idea that demonstration Trump's",
    "start": "1473600",
    "end": "1479870"
  },
  {
    "text": "discussion showing hard facts very often makes an argument that you can at least",
    "start": "1479870",
    "end": "1486350"
  },
  {
    "text": "get some leeway to try some resource allocation or to get some time or",
    "start": "1486350",
    "end": "1491900"
  },
  {
    "text": "something like that now the person who produced this it was a very laborious kind of hand created process and you can",
    "start": "1491900",
    "end": "1501500"
  },
  {
    "text": "often get similar kinds of rich visualizations from tools like in the Java world sonar is this freeware",
    "start": "1501500",
    "end": "1507940"
  },
  {
    "text": "metrics tool that gives you lots and lots of visualizations including cyclomatic complexity pretty much every",
    "start": "1507940",
    "end": "1513920"
  },
  {
    "text": "structured language in the world has a cyclomatic complexity tools that you can get and find out so that's a pretty",
    "start": "1513920",
    "end": "1520610"
  },
  {
    "text": "useful metric and I'll talk about another one in a bit called one of the",
    "start": "1520610",
    "end": "1525650"
  },
  {
    "text": "couple of metrics so those are both things that make emergent design hard",
    "start": "1525650",
    "end": "1531590"
  },
  {
    "text": "let's talk about some things that make it easier some accelerators for emergent design and one of my favorite",
    "start": "1531590",
    "end": "1538550"
  },
  {
    "text": "accelerators for emergent design is the use of unit testing and test-driven",
    "start": "1538550",
    "end": "1543860"
  },
  {
    "text": "development as a way of driving better design by creating less complexity by",
    "start": "1543860",
    "end": "1551680"
  },
  {
    "text": "eliminating mistaken assumptions that creep in very early on and they're very",
    "start": "1551680",
    "end": "1558740"
  },
  {
    "text": "hard to spot after the fact but it's very easy for me to say this but I wanted to illustrate this idea so what I",
    "start": "1558740",
    "end": "1566000"
  },
  {
    "text": "wanted to do is create take a very simple little problem and solve it in two different ways I want to solve it",
    "start": "1566000",
    "end": "1572090"
  },
  {
    "text": "first by doing tests after just write the code and then write tests for it and then I'm going to drive the solution",
    "start": "1572090",
    "end": "1578600"
  },
  {
    "text": "using test-driven development and see what the difference is in the design of those two chunks of code are and I chose",
    "start": "1578600",
    "end": "1584690"
  },
  {
    "text": "for this my favorite little problem there's a very simple little problem that has a little bit of meat for it on it there's this ancient thing that the",
    "start": "1584690",
    "end": "1592190"
  },
  {
    "text": "ancient Greeks first discovered is this thing called a perfect number it's a",
    "start": "1592190",
    "end": "1597590"
  },
  {
    "text": "number where the sum of the factors equals the number if you don't include the number itself so six for example is a",
    "start": "1597590",
    "end": "1602759"
  },
  {
    "text": "number because its factors are 1 2 & 3 and if you add 1 + 2 + 3 it equals 6",
    "start": "1602759",
    "end": "1607799"
  },
  {
    "text": "28 is also a perfect number if you want to sum one factor it and add the numbers up you can verify that is in fact a",
    "start": "1607799",
    "end": "1614070"
  },
  {
    "text": "perfect number so that's what I want to do is write some code that determines perfect numbers and so I'll do this in",
    "start": "1614070",
    "end": "1619709"
  },
  {
    "text": "Java and here's my first pass a test after version of this code and so what",
    "start": "1619709",
    "end": "1625769"
  },
  {
    "text": "I'm gonna do is come in and say ok well I know that a 1 and the number are always part of the factors a number and",
    "start": "1625769",
    "end": "1631409"
  },
  {
    "text": "now I'll go from 2 up to the number and if I number mod I equals 0 that's the",
    "start": "1631409",
    "end": "1637109"
  },
  {
    "text": "mod operator in Java so if I goes into number with an even remainder then it's",
    "start": "1637109",
    "end": "1642569"
  },
  {
    "text": "one of the factors you add the list of factors you sum them up and then you decide if it's perfect or not and I",
    "start": "1642569",
    "end": "1648329"
  },
  {
    "text": "wrote test for this and it works but it's really slow like crazy slow and so",
    "start": "1648329",
    "end": "1653789"
  },
  {
    "text": "I thought well there's got to be some way there's some in in elegance here so is there a way I could optimize this it",
    "start": "1653789",
    "end": "1660089"
  },
  {
    "text": "turns out you can easily optimize this piece right here by making the observation that factors always come in",
    "start": "1660089",
    "end": "1665909"
  },
  {
    "text": "pairs so your target number is 28 when you grab 2 you can also grab 14 because",
    "start": "1665909",
    "end": "1671579"
  },
  {
    "text": "2 times 14 is 28 and so you can take advantage of that fact by saying well let's harvest them in pairs and that",
    "start": "1671579",
    "end": "1677089"
  },
  {
    "text": "means I don't have to go all the way up to the number if I'm harvesting in pairs I could be much more clever and just go",
    "start": "1677089",
    "end": "1682979"
  },
  {
    "text": "up for example to half the number but I couldn't be even more clever than that and just go up to the square root of the",
    "start": "1682979",
    "end": "1688259"
  },
  {
    "text": "number because that by definition is the number times itself which equals my target number if I grab all the ones",
    "start": "1688259",
    "end": "1693659"
  },
  {
    "text": "below and all the ones above I have them all and that's exactly what I do I changed my code to only go up to the",
    "start": "1693659",
    "end": "1699899"
  },
  {
    "text": "square root of the number I harvest them in pairs but it breaks one of my unit",
    "start": "1699899",
    "end": "1705629"
  },
  {
    "text": "tests does I have an edge case for whole number square roots so you think about 16 for example when I grab four I'm",
    "start": "1705629",
    "end": "1713669"
  },
  {
    "text": "gonna grab 4 then I'm gonna grab it twice so I ended up adding 4 twice for a whole number square root but that's easy",
    "start": "1713669",
    "end": "1719069"
  },
  {
    "text": "enough to fix I know that edge case so I'll just put a little guard condition here that says if this is not a symmetrical a square root",
    "start": "1719069",
    "end": "1725819"
  },
  {
    "text": "then add it to my list and this now works and it's considered fast enough to",
    "start": "1725819",
    "end": "1730889"
  },
  {
    "text": "consider ok it's done so that's the test after version you've seen the algorithm",
    "start": "1730889",
    "end": "1736379"
  },
  {
    "text": "for not gonna go through the test-driven version the test-driven version actually has lots of very small methods which is very characteristic of TDD code bases",
    "start": "1736379",
    "end": "1744029"
  },
  {
    "text": "because the act of doing TDD itself encourages you toward very small methods",
    "start": "1744029",
    "end": "1749820"
  },
  {
    "text": "that are testable your goal is has the smallest method that I can test and make",
    "start": "1749820",
    "end": "1754830"
  },
  {
    "text": "work in fact given the metric that I showed you before I'll make kind of a bold pronouncement here and if you'll",
    "start": "1754830",
    "end": "1760830"
  },
  {
    "text": "show me one metric on your code base I'll tell you if it's a proper TDD code base or not because in my experience",
    "start": "1760830",
    "end": "1767419"
  },
  {
    "text": "good TDD code bases typically have a cyclomatic complexity per method between",
    "start": "1767419",
    "end": "1772769"
  },
  {
    "text": "1.5 and 2 and non TDD code bases it's generally between 8 and 15 so it is",
    "start": "1772769",
    "end": "1779070"
  },
  {
    "text": "often an order of magnitude higher per function in terms of complexity in non TDD code bases because there's no",
    "start": "1779070",
    "end": "1785309"
  },
  {
    "text": "external force trying to force you to keep them simple and they tend to expand on their own by their own volition and",
    "start": "1785309",
    "end": "1793889"
  },
  {
    "text": "this also means that TDD code bases tend to have a particular shape in that lots",
    "start": "1793889",
    "end": "1799049"
  },
  {
    "text": "of very small methods feeding into larger aggregating methods but along the way of doing that I discovered something",
    "start": "1799049",
    "end": "1804929"
  },
  {
    "text": "interesting because in my test after version I've been keeping the factors as",
    "start": "1804929",
    "end": "1810269"
  },
  {
    "text": "a list of numbers but does the order really matter when I'm collecting factors turns out it doesn't order is",
    "start": "1810269",
    "end": "1817590"
  },
  {
    "text": "irrelevant in the factors it's a set of numbers not a list of numbers and I",
    "start": "1817590",
    "end": "1822779"
  },
  {
    "text": "discovered that from one of my little tests breakages that said I was expecting one two three and six but I",
    "start": "1822779",
    "end": "1828749"
  },
  {
    "text": "got one six two and three and it made me realize oh the order doesn't matter here I should be using set and not list but",
    "start": "1828749",
    "end": "1837360"
  },
  {
    "text": "then you go back to the two versions my code in the test after version my code",
    "start": "1837360",
    "end": "1842730"
  },
  {
    "text": "that this really have anything to do with whole number square roots turns out it didn't it had to do the",
    "start": "1842730",
    "end": "1849149"
  },
  {
    "text": "fact that I chose the wrong data structure initially I chosen an ordered data structure as to them an unordered",
    "start": "1849149",
    "end": "1856259"
  },
  {
    "text": "one and when I got that test breakage in a perfect world I would have gone back",
    "start": "1856259",
    "end": "1861419"
  },
  {
    "text": "and reevaluated all my decisions all the way back to the beginning of time to see",
    "start": "1861419",
    "end": "1866610"
  },
  {
    "text": "where the mistake lie but you never do especially when you can see an easy band-aid and that's exactly what I did",
    "start": "1866610",
    "end": "1873350"
  },
  {
    "text": "was applied this easy band-aid and so what I did was by choosing the incorrect data structure initially I added",
    "start": "1873350",
    "end": "1880789"
  },
  {
    "text": "accidental complexity and the way that I fixed it was to add even more accidental complexity because very often that's the",
    "start": "1880789",
    "end": "1887450"
  },
  {
    "text": "way you end up fixing one piece of accidental complexity is creating an offsetting piece of accidental complexity rather than removing the",
    "start": "1887450",
    "end": "1894320"
  },
  {
    "text": "original source of the problem very often TDD gets you to the original source because it forces you to vet your",
    "start": "1894320",
    "end": "1901309"
  },
  {
    "text": "assumptions at the method level not at the entire algorithm level and it gets",
    "start": "1901309",
    "end": "1906919"
  },
  {
    "text": "dangerous if you're trying to vet things at the very coarse-grained level because you'd never are forced to go back and",
    "start": "1906919",
    "end": "1912620"
  },
  {
    "text": "that your decisions it's a really really granular level and a lot of times little accidental complexity can creep in",
    "start": "1912620",
    "end": "1918710"
  },
  {
    "text": "because of that that's a good example of the kind of emergent design technique on",
    "start": "1918710",
    "end": "1923809"
  },
  {
    "text": "a greenfield project where you're doing TDD and you can use that as an aid for doing design but let's talk about the",
    "start": "1923809",
    "end": "1931970"
  },
  {
    "text": "flip side of the coin which is a kind of brownfield project and refactoring",
    "start": "1931970",
    "end": "1938149"
  },
  {
    "text": "toward design this is a little snippet of code that comes from this little toy e-commerce site that takes things from",
    "start": "1938149",
    "end": "1944179"
  },
  {
    "text": "shopping carts and put them into orders and I would like to see if there's anything interesting in here but I can't",
    "start": "1944179",
    "end": "1950419"
  },
  {
    "text": "tell because it's just a giant ugly pile of code and I can't if I can't read it then I can't pull anything useful out of",
    "start": "1950419",
    "end": "1957860"
  },
  {
    "text": "it so before I could really do anything useful with this I need to do some refactoring on it to get it organized",
    "start": "1957860",
    "end": "1963139"
  },
  {
    "text": "that I can see what's actually going on here so I'm gonna make a refactoring run on this and notice that a bunch of these",
    "start": "1963139",
    "end": "1969320"
  },
  {
    "text": "statements like these three or four statements here are really all about sort of setting up plumbing for the the",
    "start": "1969320",
    "end": "1974809"
  },
  {
    "text": "transactional stuff so I'm just gonna kind of scoop them up in my IDE and say extract method I'll do that for several",
    "start": "1974809",
    "end": "1980630"
  },
  {
    "text": "of these guys they're kind of related to one another and get to this intermediate state here it's just slightly better but",
    "start": "1980630",
    "end": "1987230"
  },
  {
    "text": "I can do a lot better but notice a weird thing has happened here because I have these local variables defined up here my",
    "start": "1987230",
    "end": "1995149"
  },
  {
    "text": "refactoring tool is a very specific contract with me that guarantees that once it's finished my code will still",
    "start": "1995149",
    "end": "2001600"
  },
  {
    "text": "work exactly the same way did before and if I have local variables like this and I'm extracting method the",
    "start": "2001600",
    "end": "2007529"
  },
  {
    "text": "only thing it can do is pass them as parameters and so a lot of times you try to extract method in one of these",
    "start": "2007529",
    "end": "2013440"
  },
  {
    "text": "complex functions like this or methods like this you end up with these giant number parameters being passed around because that's the only option it really",
    "start": "2013440",
    "end": "2019980"
  },
  {
    "text": "has fortunately you as a human understand the implications of moving things to a",
    "start": "2019980",
    "end": "2025080"
  },
  {
    "text": "class level scope versus a local scope and threading and visibility and all that stuff and I'm a human that",
    "start": "2025080",
    "end": "2030629"
  },
  {
    "text": "understands that so I'm gonna make another refactoring run consolidate a bunch of these things and shared places and end up here this is the exact same",
    "start": "2030629",
    "end": "2039600"
  },
  {
    "text": "code and the motivation for this style of refactoring comes from kind of an interesting place from the book small",
    "start": "2039600",
    "end": "2046470"
  },
  {
    "text": "talk best practice patterns by Kent Beck because he calls this kind of code composed method the idea in composed",
    "start": "2046470",
    "end": "2052770"
  },
  {
    "text": "method is that every public method reads like an outline of all the things that it does and those outline elements are",
    "start": "2052770",
    "end": "2059099"
  },
  {
    "text": "the private methods that get that work done and notice that's a particularly powerful kind of pattern for modern",
    "start": "2059099",
    "end": "2066089"
  },
  {
    "text": "ideas because all the modern IDE s function names or method names become hyperlinks when you hold down the",
    "start": "2066089",
    "end": "2072179"
  },
  {
    "text": "control key so you literally can browse your code if you start with a public top-level method and drill into the",
    "start": "2072179",
    "end": "2078270"
  },
  {
    "text": "individual methods to see their details if you want to but you're not forced to deal with their details all the time and",
    "start": "2078270",
    "end": "2083849"
  },
  {
    "text": "now that I've got it down boiled down to this very simple state it's trivial to see what's going on and in fact if I",
    "start": "2083849",
    "end": "2090210"
  },
  {
    "text": "knock out these two very specific lines of code here then I have the kind of template for doing a transactional data",
    "start": "2090210",
    "end": "2096270"
  },
  {
    "text": "little framework thingy that I'll extract in a second as I talk about what to do with these things as you've",
    "start": "2096270",
    "end": "2101790"
  },
  {
    "text": "discovered them but before I do that I want to do one more refactoring exercise",
    "start": "2101790",
    "end": "2108260"
  },
  {
    "text": "and for this one I need one more metric talked about a cyclomatic complexity",
    "start": "2108260",
    "end": "2113460"
  },
  {
    "text": "before now I want to talk about afferent coupling this is to the decoupling family afferent coupling of the number",
    "start": "2113460",
    "end": "2121319"
  },
  {
    "text": "of incoming connections to a particular artifact either clasp or package and so in this particular scenario this guy has",
    "start": "2121319",
    "end": "2127890"
  },
  {
    "text": "an afferent coupling of 6 the flip side metric to this is efferent coupling which is the number of outgoing",
    "start": "2127890",
    "end": "2132930"
  },
  {
    "text": "connections and the way to remember this is that efferent starts with an e which is also the first letter of the word",
    "start": "2132930",
    "end": "2138019"
  },
  {
    "text": "exit and those are the exiting calls whereas afferent are the incoming calls and so in many ways if you look at a",
    "start": "2138019",
    "end": "2144319"
  },
  {
    "text": "class for example it's a different coupling is a measure of importance because of a lot of other classes use it",
    "start": "2144319",
    "end": "2150680"
  },
  {
    "text": "it's probably pretty important so now I have two weapons I have a metric that",
    "start": "2150680",
    "end": "2156680"
  },
  {
    "text": "can tell me complicated things and I have a metric and tell me important things let's go find complicated",
    "start": "2156680",
    "end": "2162799"
  },
  {
    "text": "important things because that sounds like a good thing to find so what I wanted to do is take an existing code",
    "start": "2162799",
    "end": "2168470"
  },
  {
    "text": "base and see if I could use some of these metrics to go fine unharvested",
    "start": "2168470",
    "end": "2173930"
  },
  {
    "text": "idiomatic patterns that are lurking around for a long time but I wanted to be a publicly available code base so",
    "start": "2173930",
    "end": "2179660"
  },
  {
    "text": "that people could reproduce this I need to be around for a while and use for a lot of stuff so I chose struts very",
    "start": "2179660",
    "end": "2186079"
  },
  {
    "text": "well-known web framework it's been around for more than a decade it's in its second major release literally",
    "start": "2186079",
    "end": "2192500"
  },
  {
    "text": "thousands of web application including industrial-strength websites have been built on top of this and it's my",
    "start": "2192500",
    "end": "2197930"
  },
  {
    "text": "contention that every piece of software has unharvested little idiomatic design patterns in it so let's go see if we can",
    "start": "2197930",
    "end": "2203750"
  },
  {
    "text": "find something interesting the struts codebase so I'll download the stretch code base random metrics tool on it that",
    "start": "2203750",
    "end": "2209690"
  },
  {
    "text": "gives me my two metrics cyclomatic complexity and afferent coupling the tool I used if anyone's interested this",
    "start": "2209690",
    "end": "2215690"
  },
  {
    "text": "little freeware tool called C kjm that runs the chittim ER and kimra object nor metric suite on java code that's the ck",
    "start": "2215690",
    "end": "2221869"
  },
  {
    "text": "and C kjm and the way that it reports cyclomatic complexity because it's a",
    "start": "2221869",
    "end": "2227089"
  },
  {
    "text": "class level metric tool it reports cyclomatic complexity for the class as the sum of the cyclomatic complexity of",
    "start": "2227089",
    "end": "2233420"
  },
  {
    "text": "all the methods and it calls it weighted method complexity and here are the results for strengths and so it turns",
    "start": "2233420",
    "end": "2238789"
  },
  {
    "text": "out the champion most complex component in all the struts is this WI beam guide with a 66 if you add all the cyclomatic",
    "start": "2238789",
    "end": "2246140"
  },
  {
    "text": "complexity of all his methods up at 66 so if I were just doing complexity hunting I would go after that guy and",
    "start": "2246140",
    "end": "2252859"
  },
  {
    "text": "try to kill him off or make him a lot simpler but when you look across he's only used by three other classes",
    "start": "2252859",
    "end": "2260930"
  },
  {
    "text": "and so Herculean efforts here might clean that up a lot but it's not gonna have a lot of ripple effect other parts",
    "start": "2260930",
    "end": "2266990"
  },
  {
    "text": "of my codebase let's sort them by importance instead and not surprisingly component is the",
    "start": "2266990",
    "end": "2273550"
  },
  {
    "text": "most important one in struts being a component based web framework but that's not even the one I'm looking for either what I'm looking for here are",
    "start": "2273550",
    "end": "2280060"
  },
  {
    "text": "high combinations of members remember I'm looking for important complicated things and I want to find out why they",
    "start": "2280060",
    "end": "2286360"
  },
  {
    "text": "exist and the one that catches my eye here is this UI beam guy with a fifty three and a twenty two important and",
    "start": "2286360",
    "end": "2293380"
  },
  {
    "text": "complicated so let's go see why so I open up the SS UI beam and I find this",
    "start": "2293380",
    "end": "2299350"
  },
  {
    "text": "lovely guy he evaluate params my very",
    "start": "2299350",
    "end": "2308860"
  },
  {
    "text": "favorite part of this method by far is the very last line of the method which is evaluate extra params it's like the",
    "start": "2308860",
    "end": "2316270"
  },
  {
    "text": "developer just got tired of typing at some point oh god okay evaluate extra prams I guess I'm done so what this code",
    "start": "2316270",
    "end": "2323560"
  },
  {
    "text": "does struts as a component web framework and it sometimes does magic automatic",
    "start": "2323560",
    "end": "2328990"
  },
  {
    "text": "things the URI parameters and sometimes it just passes them through invisibly and sometimes it's mappings happen on",
    "start": "2328990",
    "end": "2334390"
  },
  {
    "text": "those guys so that's the evaluate params and evaluate extra params now as I've started poking around in struts",
    "start": "2334390",
    "end": "2339640"
  },
  {
    "text": "I noticed that lots and lots of these evaluate params evaluate extra prams methods we're showing up and so I got",
    "start": "2339640",
    "end": "2345250"
  },
  {
    "text": "really curious of course you can do this in IDE but I did it on command line with a little bit of command line judo as",
    "start": "2345250",
    "end": "2350770"
  },
  {
    "text": "it's starting the route of struts give me all the methods or you give me all the Java source files and find all the",
    "start": "2350770",
    "end": "2357070"
  },
  {
    "text": "ones that have a declaration for evaluate something params and here they",
    "start": "2357070",
    "end": "2362590"
  },
  {
    "text": "are I have found an idiomatic pattern and struts and this is a perfect example of an idiomatic pattern because fifteen",
    "start": "2362590",
    "end": "2370210"
  },
  {
    "text": "years ago when I started working on struts there's no way they said you know what in 15 years the most complicated",
    "start": "2370210",
    "end": "2375730"
  },
  {
    "text": "part of struts is gonna be how we handle URI parameters because it's such a simple problem it's so simple in fact",
    "start": "2375730",
    "end": "2382540"
  },
  {
    "text": "they reimplemented it over and over and over and over and over again in the codebase without realizing that that was",
    "start": "2382540",
    "end": "2389920"
  },
  {
    "text": "manifesting all over the place so there's an interesting epilogue to this story I wrote this analysis up and that",
    "start": "2389920",
    "end": "2396400"
  },
  {
    "text": "developer work series I was talking about and one of the stress developers contacted me and said that he had end",
    "start": "2396400",
    "end": "2401590"
  },
  {
    "text": "discovered the exact same thing had manifest in the struts codebase and he was in the process of fixing it by",
    "start": "2401590",
    "end": "2407320"
  },
  {
    "text": "extracting all that uri parameter handling stuff as an internal component of struts so if you look at struts now",
    "start": "2407320",
    "end": "2413740"
  },
  {
    "text": "you or I parameters are handled by this internal component and by doing that he knocked off several thousand lines of",
    "start": "2413740",
    "end": "2420850"
  },
  {
    "text": "code and several hundred complexity points out of struts without changing the functionality of struts he just",
    "start": "2420850",
    "end": "2426430"
  },
  {
    "text": "greatly simplified it because no one had ever used that particular lens to illuminate that part of the codebase",
    "start": "2426430",
    "end": "2433000"
  },
  {
    "text": "it's like oh this duplicated code is running around all over the place but you literally just couldn't see it",
    "start": "2433000",
    "end": "2438070"
  },
  {
    "text": "because it's lurking and hiding behind all the other stuff that's there so once",
    "start": "2438070",
    "end": "2444040"
  },
  {
    "text": "you found these things what do you do with them how do you capture them and there are a couple of easy ways to do",
    "start": "2444040",
    "end": "2449500"
  },
  {
    "text": "this one easy way to do this is just capture it as an API this is the simplest way this is the unit of how you",
    "start": "2449500",
    "end": "2456130"
  },
  {
    "text": "capture things in the Java world so the example that I showed you for this idiomatic unit of work this is the code",
    "start": "2456130",
    "end": "2463120"
  },
  {
    "text": "that I want to capture it from so in Java I can very easily come in here and say let's use a proper gang a4 design",
    "start": "2463120",
    "end": "2469060"
  },
  {
    "text": "pattern here and we'll extract this using the command pattern so now my",
    "start": "2469060",
    "end": "2475540"
  },
  {
    "text": "commands up there and this is now my method it's probably worth noting that the entire slide full of code that I",
    "start": "2475540",
    "end": "2482650"
  },
  {
    "text": "showed you before this is why didn't do that being is this one method right here after all the useful reusable stuff had",
    "start": "2482650",
    "end": "2489340"
  },
  {
    "text": "been sucked out of it once we determined what the useful reusable stuff was in fact if you look at this this little",
    "start": "2489340",
    "end": "2495550"
  },
  {
    "text": "rapid transaction thing looks a lot like Springs do in transactional wrapper that does basically a lot of the same stuff",
    "start": "2495550",
    "end": "2502860"
  },
  {
    "text": "Java forces a fair amount of syntactic noise on you because really all you want",
    "start": "2502860",
    "end": "2508810"
  },
  {
    "text": "to do is this wrap this stuff in a transaction and languages of higher order functions like groovy and of",
    "start": "2508810",
    "end": "2514870"
  },
  {
    "text": "course Java 8 we're going to make that a lot cleaner and simpler because you get rid of the middleman class that's only",
    "start": "2514870",
    "end": "2520840"
  },
  {
    "text": "there as a holder for that execute method and so for example in groovy if you wrote this exact same thing it'd be",
    "start": "2520840",
    "end": "2526990"
  },
  {
    "text": "a lot cleaner because this anything curly braces in groovy is a code block",
    "start": "2526990",
    "end": "2532030"
  },
  {
    "text": "and that gets passed up here and that's syntactic sugar the exact same thing you can do in a",
    "start": "2532030",
    "end": "2537040"
  },
  {
    "text": "language of higher order functions and so that actually cleans this up a lot and that turns out to be a pretty",
    "start": "2537040",
    "end": "2543070"
  },
  {
    "text": "important thing syntactic cleanliness is a really important because your code is your",
    "start": "2543070",
    "end": "2549790"
  },
  {
    "text": "design document and so design and readability are very closely intertwined with one another based on what Jack",
    "start": "2549790",
    "end": "2555400"
  },
  {
    "text": "Reeves was saying readability makes a big difference the other way you can harvest these guys in languages like",
    "start": "2555400",
    "end": "2561940"
  },
  {
    "text": "Java is use annotations I don't think people use this quite enough this is actually a very powerful mechanism in",
    "start": "2561940",
    "end": "2568450"
  },
  {
    "text": "Java because it adds an extra level of expressiveness to the language that you normally don't have it was a really nice",
    "start": "2568450",
    "end": "2574360"
  },
  {
    "text": "thing to have but I won't spend any more time on that a lot of frameworks use this but not a lot of developers use",
    "start": "2574360",
    "end": "2582040"
  },
  {
    "text": "this mechanism and it's not suitable for everything of course but the nice thing is that annotations live very close to",
    "start": "2582040",
    "end": "2588640"
  },
  {
    "text": "the thing that you're trying to modify and so there's a nice kind of locality to the modifications you're making let",
    "start": "2588640",
    "end": "2598900"
  },
  {
    "text": "me talk just a second about abstraction styles because I mentioned the the f-word the functional programming word here as I mentioned Landers we're all",
    "start": "2598900",
    "end": "2606460"
  },
  {
    "text": "interested are all premiere with imperative programming languages",
    "start": "2606460",
    "end": "2612540"
  },
  {
    "text": "structured and modular and object-oriented they're all in styles and period of abstraction styles but you",
    "start": "2612540",
    "end": "2617920"
  },
  {
    "text": "hear a lot about functional programming these days realize that though it's really just a different palette of tools",
    "start": "2617920",
    "end": "2623230"
  },
  {
    "text": "it's literally a different toolbox and neither one is particularly suited to solve every problem better than the",
    "start": "2623230",
    "end": "2629590"
  },
  {
    "text": "other but a lot of times using one is more suited toward a particular kind of",
    "start": "2629590",
    "end": "2635080"
  },
  {
    "text": "problem because it matches the essential complexity better than another one and we end up getting caught up a lot in the",
    "start": "2635080",
    "end": "2640960"
  },
  {
    "text": "kind of underlying paradigm in the language supports because it is the default way that things work but you don't have to get caught up in that and",
    "start": "2640960",
    "end": "2647410"
  },
  {
    "text": "a great example of that is this concept of an anti object that comes from a paper that was delivered at Uppsala in",
    "start": "2647410",
    "end": "2653740"
  },
  {
    "text": "2006 I believe called collaborative diffusion and they created this this concept of an anti object in their paper",
    "start": "2653740",
    "end": "2661150"
  },
  {
    "text": "they say the metaphor Rob is you can go too far by making us create objects too much inspired by the real world",
    "start": "2661150",
    "end": "2668030"
  },
  {
    "text": "an anti object it's kind of object that does the opposite of what you think it should be doing as a way of modeling",
    "start": "2668030",
    "end": "2674000"
  },
  {
    "text": "something that's simpler kind of like this optical illusion is this of a",
    "start": "2674000",
    "end": "2679310"
  },
  {
    "text": "source at two phases and the classic example of an anti object approach comes to us in the form of pac-man now I have",
    "start": "2679310",
    "end": "2687950"
  },
  {
    "text": "to warn you I'm about to explain how pac-man works if you want to keep playing pac-man and enjoy it you should",
    "start": "2687950",
    "end": "2694100"
  },
  {
    "text": "leave now and I will understand sometimes knowledge comes at a cost and the cost for this is you're not going to",
    "start": "2694100",
    "end": "2700310"
  },
  {
    "text": "enjoy pac-man quite as much because I'm gonna explain the algorithm to you when you think about the pac-man console game",
    "start": "2700310",
    "end": "2706310"
  },
  {
    "text": "that came out in the early 1980s they had less memory and processing power than most watches have now and they had",
    "start": "2706310",
    "end": "2713630"
  },
  {
    "text": "a really hard problem solve is how do we calculate the distance between two moving objects in a maze they didn't",
    "start": "2713630",
    "end": "2719420"
  },
  {
    "text": "have anywhere nearly enough processing power to do that so they took an anti object approach to this rather than build intelligence into",
    "start": "2719420",
    "end": "2726380"
  },
  {
    "text": "the goes to the individual pac-man guy etc they built all the intelligence into the maze the maze is basically a state",
    "start": "2726380",
    "end": "2733220"
  },
  {
    "text": "machine that for every cell it runs rules for every time through the game",
    "start": "2733220",
    "end": "2738590"
  },
  {
    "text": "cycle and they invented this concept of pac-man smell and when pac-man is sitting on a cell it has maximum pac-man",
    "start": "2738590",
    "end": "2745100"
  },
  {
    "text": "smell and the cell that he just vacated has maximum pac-man smell minus 1 and it decays really quickly and all the ghosts",
    "start": "2745100",
    "end": "2752180"
  },
  {
    "text": "do is wander around semi randomly until they encounter pac-man smell they go to the next adjacent silver stronger and",
    "start": "2752180",
    "end": "2759110"
  },
  {
    "text": "they move slightly faster than pac-man and that's the whole game pseudo-random numbers and pac-man smell and they did a",
    "start": "2759110",
    "end": "2765650"
  },
  {
    "text": "really sneaky thing to you because the ghosts they gave them eyes but they",
    "start": "2765650",
    "end": "2771560"
  },
  {
    "text": "should have only give them a nose because they can't see you coming you can run right up on them and they can't",
    "start": "2771560",
    "end": "2777350"
  },
  {
    "text": "see you but they can smell where you've been so the ghosts really need giant noses but no eyes but they tricked you by",
    "start": "2777350",
    "end": "2783980"
  },
  {
    "text": "putting eyes on them but now the next time you play pac-man you can run right up on a ghost and unless he just",
    "start": "2783980",
    "end": "2788990"
  },
  {
    "text": "randomly turns towards you he doesn't know you're there because they can only follow you this is a great example of",
    "start": "2788990",
    "end": "2794930"
  },
  {
    "text": "taking a design that was too complicated to build and the tools they had at the time and coming up with a way of",
    "start": "2794930",
    "end": "2800510"
  },
  {
    "text": "flipping the abstract over backwards and being able to build something and when miss pac-man came out",
    "start": "2800510",
    "end": "2806750"
  },
  {
    "text": "they kept the same algorithm they just made the random number generator better so a lot of that's in this this place of",
    "start": "2806750",
    "end": "2813050"
  },
  {
    "text": "finding and harvesting idiomatic patterns but I want to go back for a second to last responsible moment and",
    "start": "2813050",
    "end": "2818090"
  },
  {
    "text": "talk about how do you determine this inflection point so if you look at complexity over time on project you look",
    "start": "2818090",
    "end": "2825350"
  },
  {
    "text": "at particular components as part of your your architectural stack you will notice",
    "start": "2825350",
    "end": "2830660"
  },
  {
    "text": "that over time they take on varying degrees of responsibility and if those inflection points where they're taking",
    "start": "2830660",
    "end": "2836900"
  },
  {
    "text": "on more responsibility or making serious changes to them that's the time you read it and say have you really reached your",
    "start": "2836900",
    "end": "2843260"
  },
  {
    "text": "last responsible moment and so this actually goes toward one of the characteristics of Architects on agile",
    "start": "2843260",
    "end": "2849380"
  },
  {
    "text": "projects is they need a much better awareness of kind of current events of what's going on in the code because they",
    "start": "2849380",
    "end": "2855500"
  },
  {
    "text": "need to be able to make these kind of determinations have we reached the last responsible moment has this component",
    "start": "2855500",
    "end": "2861110"
  },
  {
    "text": "started taking on too many responsibilities we're also big fans of doing spikes which are experimental",
    "start": "2861110",
    "end": "2868010"
  },
  {
    "text": "coding exercises to determine to get rid of uncertainty for things like estimates",
    "start": "2868010",
    "end": "2873920"
  },
  {
    "text": "there's another really famous anti-pattern called the give me estimates now anti-pattern and the way",
    "start": "2873920",
    "end": "2879770"
  },
  {
    "text": "this pattern manifests is that somebody asked you to estimate something and you don't know anything about it like tell",
    "start": "2879770",
    "end": "2885110"
  },
  {
    "text": "me how much it's gonna take that geocoding this application and the really dangerous thing here is to guess because they give me estimates now",
    "start": "2885110",
    "end": "2891590"
  },
  {
    "text": "anti-pattern says that as soon as numbers come out of your mouth you have inadvertently entered into an ironclad",
    "start": "2891590",
    "end": "2897470"
  },
  {
    "text": "contract that you'll risk your life to make that date come true no matter how many waffle words you put in front of it",
    "start": "2897470",
    "end": "2903380"
  },
  {
    "text": "spikes allow you to get away from that because you can now look at and determine and get rid of some of the",
    "start": "2903380",
    "end": "2909050"
  },
  {
    "text": "uncertainty that's leading to the speculation as to how long it's going to take to do this so to summarize",
    "start": "2909050",
    "end": "2917350"
  },
  {
    "text": "obviously evolutionary architecture and emergent design require good engineering practices if you have a good TDD code",
    "start": "2917350",
    "end": "2924200"
  },
  {
    "text": "base you can be refactoring on it makes it much easier to do these exercises on it doesn't preclude you from doing them",
    "start": "2924200",
    "end": "2929990"
  },
  {
    "text": "it certainly makes it a lot easier if you already have good other engineering practices the",
    "start": "2929990",
    "end": "2935190"
  },
  {
    "text": "the most advanced engineering practice which the architecture and design space becomes easier trying to predict the",
    "start": "2935190",
    "end": "2941610"
  },
  {
    "text": "future leads to over engineering which is a bad thing and this is going to be a subtle distinction but I think a really",
    "start": "2941610",
    "end": "2946770"
  },
  {
    "text": "important one because in the agile world we're trying to prefer being pro and",
    "start": "2946770",
    "end": "2951930"
  },
  {
    "text": "reactive to predictive we're not trying to predict the future what we're trying to do is be proactive about things we",
    "start": "2951930",
    "end": "2959070"
  },
  {
    "text": "know are going to happen in the future and then being instantly reactive as things happen in our code base that we",
    "start": "2959070",
    "end": "2965310"
  },
  {
    "text": "need to be able to respond to the combination of Pro and reactive I think works much better than trying to get",
    "start": "2965310",
    "end": "2971130"
  },
  {
    "text": "better and better at predictive because as any street corner psychic will tell you trying to get better and better at predicting the future is really really",
    "start": "2971130",
    "end": "2977460"
  },
  {
    "text": "hard to do I'm out of time and I don't want to cut in to lunch because I know that's a very important agenda item for",
    "start": "2977460",
    "end": "2983220"
  },
  {
    "text": "many of you I'll be here for the rest of week if you have any questions or anything like that thanks very much for coming I hope you enjoyed it",
    "start": "2983220",
    "end": "2990440"
  }
]