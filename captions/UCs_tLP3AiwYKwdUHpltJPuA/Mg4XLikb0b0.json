[
  {
    "text": "and thanks for the introduction and I promise I won't keep you too long because uh I know especially Connor is",
    "start": "4480",
    "end": "11160"
  },
  {
    "text": "having a hard time staying awake um for the drinks I'm really glad I'm not giving a talk",
    "start": "11160",
    "end": "18880"
  },
  {
    "text": "now um so as the title says this work is basically the talk is about trying to",
    "start": "18960",
    "end": "26439"
  },
  {
    "text": "reduce the cost of software ver verification and this is Joint work um with people",
    "start": "26439",
    "end": "33000"
  },
  {
    "text": "from data 61 and I guess most of you know it still in its former name um",
    "start": "33000",
    "end": "39480"
  },
  {
    "text": "nicta so if you type in the term software verification um then probably one of the",
    "start": "39480",
    "end": "46840"
  },
  {
    "text": "first hits you will get is the i e standard definition of software",
    "start": "46840",
    "end": "52440"
  },
  {
    "text": "verification and it's read something like this so it's it's talking about evaluate um evaluating software",
    "start": "52440",
    "end": "61000"
  },
  {
    "text": "um with respect to the goals which were the condition initially imposed at the",
    "start": "61000",
    "end": "66799"
  },
  {
    "text": "state of that start of that phase so that is not what I'm talking about um",
    "start": "66799",
    "end": "72439"
  },
  {
    "text": "I'm talking about formal the pro formal verification um which is kind of",
    "start": "72439",
    "end": "78600"
  },
  {
    "text": "providing U machine checked formal proof that an implementation satisfies a",
    "start": "78600",
    "end": "85600"
  },
  {
    "text": "specification and um I'm kind of insisting on the or mentioning the machine check part here because well in",
    "start": "85600",
    "end": "93000"
  },
  {
    "text": "theory you can do a formal proof on pen and paper but these proofs tend to get",
    "start": "93000",
    "end": "98119"
  },
  {
    "text": "really really lengthy so in practice you really don't want to do that and even if",
    "start": "98119",
    "end": "103320"
  },
  {
    "text": "you did well um it will be kind of multiple orders of magnitude longer than",
    "start": "103320",
    "end": "109560"
  },
  {
    "text": "your original program so chances are that your proof contains more bugs than",
    "start": "109560",
    "end": "115719"
  },
  {
    "text": "your program to begin with so we we want to have a machine checked",
    "start": "115719",
    "end": "120960"
  },
  {
    "text": "um so basically we kind of start with a specification want to have a kind of",
    "start": "120960",
    "end": "126840"
  },
  {
    "text": "machine check manual or semi manual proof so I'm talking about kind of using proof tool like Isabelle and so on which",
    "start": "126840",
    "end": "133920"
  },
  {
    "text": "can do a lot of the trivial steps for you but which like leaves a lot a lot of",
    "start": "133920",
    "end": "139519"
  },
  {
    "text": "the work um to you and then go via some programming language to um binary",
    "start": "139519",
    "end": "146239"
  },
  {
    "text": "card um so the first thing we need to do a formal verification um of software we",
    "start": "146239",
    "end": "154360"
  },
  {
    "text": "need a formal specification and the bad news is that this can already be um quite a pain to",
    "start": "154360",
    "end": "162480"
  },
  {
    "text": "to write just kind of to to think about think about really trival problem let's",
    "start": "162480",
    "end": "168319"
  },
  {
    "text": "say we want to have a sort function so in actal language um I can give you specifications like given a list of",
    "start": "168319",
    "end": "175080"
  },
  {
    "text": "integers um return a sorted list of integers and there's fairly little room",
    "start": "175080",
    "end": "180720"
  },
  {
    "text": "for misunderstanding here but for a formal specification I have to bring it",
    "start": "180720",
    "end": "186400"
  },
  {
    "text": "into a form that my theorem Prov kind of can understand it some some kind of mathematical notation so now just use",
    "start": "186400",
    "end": "194599"
  },
  {
    "text": "some kind of pseudo code here to do that so I start um formalizing some kind of",
    "start": "194599",
    "end": "200920"
  },
  {
    "text": "conditions so probably I want to express first that it has to be sorted in ascending order so if I take two indices",
    "start": "200920",
    "end": "208959"
  },
  {
    "text": "legal indices into the list I and J that if I is less than J then sort or the I",
    "start": "208959",
    "end": "215840"
  },
  {
    "text": "element of the sorted list should be less or equal to the sorted um the chase",
    "start": "215840",
    "end": "221439"
  },
  {
    "text": "element but of course while that is a necessary condition that's not sufficient because it doesn't establish",
    "start": "221439",
    "end": "227959"
  },
  {
    "text": "any relationship between the elements of um Xs and sort of xcess so um I might",
    "start": "227959",
    "end": "235879"
  },
  {
    "text": "add something that for every integer X if um X is in the original list XS it should",
    "start": "235879",
    "end": "243760"
  },
  {
    "text": "also appear in sort of Xs and vice versa so I have the same elements in both",
    "start": "243760",
    "end": "250200"
  },
  {
    "text": "lists and I have them in ascending order so that sounds pretty good unless we",
    "start": "250200",
    "end": "257560"
  },
  {
    "text": "have duplicates and then um this this sord function kind of",
    "start": "257560",
    "end": "263320"
  },
  {
    "text": "um matches the specification but it's clearly not what we want now we might",
    "start": "263320",
    "end": "268639"
  },
  {
    "text": "add another condition which makees sure that that we have the same number of duplicates and then we end up with a",
    "start": "268639",
    "end": "273800"
  },
  {
    "text": "fairly with a kind of full specification it's probably fairly awkward it might be hard to prove um something with it so um",
    "start": "273800",
    "end": "282440"
  },
  {
    "text": "basically the whole point is having a formal specification for real system not",
    "start": "282440",
    "end": "287520"
  },
  {
    "text": "just for this kind of toy example is already a bit of a pain to put it",
    "start": "287520",
    "end": "292720"
  },
  {
    "text": "mildly um the next thing I what I need to do if I don't go down to binary",
    "start": "292720",
    "end": "300280"
  },
  {
    "text": "um and that's usually really no um I",
    "start": "300280",
    "end": "305880"
  },
  {
    "text": "need kind of an implementation language which actually has formal semantics um and there are not that many",
    "start": "305880",
    "end": "313600"
  },
  {
    "text": "programming languages kind of general purpose programming languages around which have a formally specified semantics so notable exception is",
    "start": "313600",
    "end": "320639"
  },
  {
    "text": "standard ml which basically came with the formal um specification of its",
    "start": "320639",
    "end": "325800"
  },
  {
    "text": "semantics straight away but even like as functional programmers we would like to think H is clean and nice well but it",
    "start": "325800",
    "end": "333720"
  },
  {
    "text": "does not have a formally defined semantics at least not for the whole language we have we have it for a subset",
    "start": "333720",
    "end": "339120"
  },
  {
    "text": "of it then same for C there's um semantics for um large subset of c and",
    "start": "339120",
    "end": "346880"
  },
  {
    "text": "even for something like rust which was already defined fairly new language was um designed for systems programming and",
    "start": "346880",
    "end": "353680"
  },
  {
    "text": "kind of for safe and secure systems programming um there's no formally",
    "start": "353680",
    "end": "359080"
  },
  {
    "text": "defined mantics yet there is actually just um a project just started um called rust Bel where they um",
    "start": "359080",
    "end": "367599"
  },
  {
    "text": "are trying to do that because in particular for us this makes a lot of sense um so there are other languages",
    "start": "367599",
    "end": "374360"
  },
  {
    "text": "around but this is already kind of another thing um a disadvantage or a",
    "start": "374360",
    "end": "380720"
  },
  {
    "text": "problem next thing is what happens to what do I do with a compiler um if I show that my formal",
    "start": "380720",
    "end": "389000"
  },
  {
    "text": "specific matches to the formal semantics of my language and then I compile this well",
    "start": "389000",
    "end": "396560"
  },
  {
    "text": "who tells me that the compiler is correct right so either I say well you know I don't care that someone else's",
    "start": "396560",
    "end": "403000"
  },
  {
    "text": "fault um so I said the my compil is part of the trusted compute base or I try and",
    "start": "403000",
    "end": "411280"
  },
  {
    "text": "look for um a verified compiler um there",
    "start": "411280",
    "end": "416720"
  },
  {
    "text": "are a couple of those around not a lot even less than languages where we have formal semantics for so comert is an",
    "start": "416720",
    "end": "424039"
  },
  {
    "text": "example it's a formally verified compiler uh for a very large subset of c",
    "start": "424039",
    "end": "431039"
  },
  {
    "text": "um KML for ML or the third um thing I can do",
    "start": "431039",
    "end": "438560"
  },
  {
    "text": "is um I show basically on a program per program basis that the generated",
    "start": "438560",
    "end": "447000"
  },
  {
    "text": "executable matches the semantics of of the source program that still work but",
    "start": "447000",
    "end": "452680"
  },
  {
    "text": "it's kind of less work in general than comp um verifying a whole",
    "start": "452680",
    "end": "459440"
  },
  {
    "text": "compiler okay um so I haven't even started talking about",
    "start": "459440",
    "end": "465599"
  },
  {
    "text": "the actual work verifying the program and already it's clear that there's a lot of work involved so why should we",
    "start": "465599",
    "end": "472960"
  },
  {
    "text": "kind of go through all that effort and verify a program at all and um we all",
    "start": "472960",
    "end": "479840"
  },
  {
    "text": "that well even the most thorough testing if my program fails a test I know that",
    "start": "479840",
    "end": "485440"
  },
  {
    "text": "there is a test but it if it passes the test tests no matter how um thorough my",
    "start": "485440",
    "end": "492120"
  },
  {
    "text": "test suit is it's still not guaranteed um also formal verification",
    "start": "492120",
    "end": "499560"
  },
  {
    "text": "is not just about um the functionality so showing that that my program does all",
    "start": "499560",
    "end": "506280"
  },
  {
    "text": "the things it's supposed to do but it's also about showing the the absence of",
    "start": "506280",
    "end": "511360"
  },
  {
    "text": "vulner vulnerabilities um and well like",
    "start": "511360",
    "end": "517200"
  },
  {
    "text": "everything it's basically a decision kind of we have to make sure um decide whether it's worthwhile depending on",
    "start": "517200",
    "end": "524600"
  },
  {
    "text": "whether uh back in this particular application we're talking about is a minor nuisance um but there are plenty",
    "start": "524600",
    "end": "531560"
  },
  {
    "text": "of programs around where failures can have catastrophic consequences now um systems software",
    "start": "531560",
    "end": "540160"
  },
  {
    "text": "basically plays a special role because if I talk about how problematic a buckin",
    "start": "540160",
    "end": "546560"
  },
  {
    "text": "system software is it's basically as problematic as the most critical application which is running on my",
    "start": "546560",
    "end": "553200"
  },
  {
    "text": "system right um because I can't possibly build a safe application on um a crappy",
    "start": "553200",
    "end": "561000"
  },
  {
    "text": "crappy uh insecure um insecure Software System um",
    "start": "561000",
    "end": "566640"
  },
  {
    "text": "so this is kind of probably system software is one of the best candidates if I if I kind of put the work into",
    "start": "566640",
    "end": "574040"
  },
  {
    "text": "verify something at all then system software should give us kind of a good um good",
    "start": "574040",
    "end": "580320"
  },
  {
    "text": "value um and this is basically kind of one of the premises of the trustworthy",
    "start": "580320",
    "end": "587560"
  },
  {
    "text": "systems project at data 61 um and kind of the core of this Trust",
    "start": "587560",
    "end": "596240"
  },
  {
    "text": "versy Systems project is the SL for micr kernel don't know if you I know some",
    "start": "596240",
    "end": "603360"
  },
  {
    "text": "people heard about it so it's basically fully um verified um operating systems",
    "start": "603360",
    "end": "609040"
  },
  {
    "text": "micr kernel and since I told you how kind of complicated and annoying and",
    "start": "609040",
    "end": "615040"
  },
  {
    "text": "expensive verification is um just want to give you a couple a few numbers um",
    "start": "615040",
    "end": "621279"
  },
  {
    "text": "about this so um sl4 consists of basically 7 and a half thousand lines of",
    "start": "621279",
    "end": "628360"
  },
  {
    "text": "Co of C code are fully",
    "start": "628360",
    "end": "632480"
  },
  {
    "text": "verified and the size of the proof script for those 7 and a half thousand",
    "start": "633680",
    "end": "639720"
  },
  {
    "text": "lines of code are it's 200,000 lines of Isabel uh proof script and you have you",
    "start": "639720",
    "end": "647480"
  },
  {
    "text": "have to kind of keep in mind that every that some of these lines do a lot of things like kind of simplify the whole",
    "start": "647480",
    "end": "654440"
  },
  {
    "text": "um simplify this expression so they are not 200 kind of simple s proof steps um",
    "start": "654440",
    "end": "661040"
  },
  {
    "text": "some of them are fairly expressive um overall um this took 25 person years to",
    "start": "661040",
    "end": "669959"
  },
  {
    "text": "complete the sl4 project that is from design to testing implementation verific",
    "start": "669959",
    "end": "677680"
  },
  {
    "text": "um verification obviously implementation then testing",
    "start": "677680",
    "end": "683040"
  },
  {
    "text": "um and but it also included basically following some dead ends and research on",
    "start": "683040",
    "end": "688480"
  },
  {
    "text": "some verific um tools and so on so they um estimate that if they had to do it",
    "start": "688480",
    "end": "695279"
  },
  {
    "text": "again they would take about 10 person years which seems quite expensive but um",
    "start": "695279",
    "end": "703880"
  },
  {
    "text": "if you take into account that if you want to um certify your software",
    "start": "703880",
    "end": "709519"
  },
  {
    "text": "according to Common criteria process for um evaluation level six which is not the",
    "start": "709519",
    "end": "715079"
  },
  {
    "text": "highest evaluation level kind of a rule of thumb is that you have to spend about $1,000 um dollar per line of code so 7",
    "start": "715079",
    "end": "723760"
  },
  {
    "text": "and half 7 and half million um for something of the size of sl4 and this",
    "start": "723760",
    "end": "731399"
  },
  {
    "text": "project was a lot cheaper um so it was it's it's actually",
    "start": "731399",
    "end": "737279"
  },
  {
    "text": "pretty good value and another um kind of interesting",
    "start": "737279",
    "end": "742320"
  },
  {
    "text": "tidbit is probably so they found 160",
    "start": "742320",
    "end": "747880"
  },
  {
    "text": "bucks in sl4 um 16 of which they found during testing",
    "start": "747880",
    "end": "756079"
  },
  {
    "text": "and the remaining 144 were found during verification um and they try to do",
    "start": "756079",
    "end": "762360"
  },
  {
    "text": "fairly thorough testing because well having to kind of fix it and do the",
    "start": "762360",
    "end": "767720"
  },
  {
    "text": "verific trying to do the verification again um is is not great",
    "start": "767720",
    "end": "774000"
  },
  {
    "text": "um so um micro curtle unfortunately doesn't",
    "start": "774000",
    "end": "780320"
  },
  {
    "text": "make a fully-fledged operating system we need all the other components so there are currently a lot of um projects",
    "start": "780320",
    "end": "786519"
  },
  {
    "text": "underway to verify those other um compon uh systems components including the one",
    "start": "786519",
    "end": "794480"
  },
  {
    "text": "I involved in um which is the trustworthy file system",
    "start": "794480",
    "end": "801040"
  },
  {
    "text": "project um file systems are particularly",
    "start": "801040",
    "end": "806760"
  },
  {
    "text": "problematic in this context because well we could say for the schu for a lot of",
    "start": "806760",
    "end": "812800"
  },
  {
    "text": "the components we Implement and and verify the component once and then it's",
    "start": "812800",
    "end": "818160"
  },
  {
    "text": "okay but a fully fledged operating system has to have like offer not three",
    "start": "818160",
    "end": "824880"
  },
  {
    "text": "four five different file systems but in the order of Mag kind of 10 20 or even",
    "start": "824880",
    "end": "830440"
  },
  {
    "text": "more so this approach even though it wasn't terribly expensive compared uh to",
    "start": "830440",
    "end": "837399"
  },
  {
    "text": "what you actually got for just does not scale so um basically um",
    "start": "837399",
    "end": "846079"
  },
  {
    "text": "the question for this project was given a file system specification um then probably go bya C",
    "start": "846079",
    "end": "854519"
  },
  {
    "text": "implementation um and we don't worry about the path from C to Binary because",
    "start": "854519",
    "end": "862000"
  },
  {
    "text": "basically we know we have tools to cover that um how can we reduce the f",
    "start": "862000",
    "end": "869639"
  },
  {
    "text": "involved in here and um they basically brought us",
    "start": "869639",
    "end": "875320"
  },
  {
    "text": "brought me as a language person in because the idea was If instead of kind",
    "start": "875320",
    "end": "881480"
  },
  {
    "text": "of verifying from this formal specification to C we go to a more high",
    "start": "881480",
    "end": "886759"
  },
  {
    "text": "level possibly domain specific language um which is more abstract significantly",
    "start": "886759",
    "end": "893800"
  },
  {
    "text": "more abstract than C and Implement a compiler which gener Ates the code and",
    "start": "893800",
    "end": "900839"
  },
  {
    "text": "the proof that the code implements um whatever we Implement in this language",
    "start": "900839",
    "end": "907480"
  },
  {
    "text": "correctly at the same time so we didn't try to produce a verified compiler but",
    "start": "907480",
    "end": "914759"
  },
  {
    "text": "just the a compiler that at the same time generates the code and and the proof and um after lots of kind of other",
    "start": "914759",
    "end": "924839"
  },
  {
    "text": "names we um chose the name Cent for this language which we",
    "start": "924839",
    "end": "930800"
  },
  {
    "text": "implemented so um let's have a look at what kind of",
    "start": "930800",
    "end": "935880"
  },
  {
    "text": "what we thought should the um should this language be able to do so the first",
    "start": "935880",
    "end": "942720"
  },
  {
    "text": "thing is basically to to help with a top level proof um which we can't get rid of",
    "start": "942720",
    "end": "952199"
  },
  {
    "text": "completely there's just too much kind of creativity and intelligent involved um",
    "start": "952199",
    "end": "957279"
  },
  {
    "text": "to automa automat this process fully but um what can we do um to fa facilitate",
    "start": "957279",
    "end": "965560"
  },
  {
    "text": "the manual verification so um what the Coen compiler does is um in addition to uh",
    "start": "965560",
    "end": "974720"
  },
  {
    "text": "generating C code and the proof it also generates an embedding of the semantic",
    "start": "974720",
    "end": "981160"
  },
  {
    "text": "so basically um is AEL representation of the semantics of the cogent program",
    "start": "981160",
    "end": "989560"
  },
  {
    "text": "so that um the person who has to do this proof can easily connect um the for the",
    "start": "989560",
    "end": "997440"
  },
  {
    "text": "file systems the specification in Isabel um with this representation of the",
    "start": "997440",
    "end": "1003480"
  },
  {
    "text": "semantics and that would be possible for other proof tools as well so that the",
    "start": "1003480",
    "end": "1008959"
  },
  {
    "text": "idea is basically um independent of that oops um then um we decided that Cent",
    "start": "1008959",
    "end": "1018319"
  },
  {
    "text": "should be a purely functional um language uh kind of that's what you get",
    "start": "1018319",
    "end": "1023519"
  },
  {
    "text": "when you ask a h programmer to help we actually had also good reasons",
    "start": "1023519",
    "end": "1029959"
  },
  {
    "text": "um to do that because well as we know functional languages are purely functional languages are kind of nice",
    "start": "1029959",
    "end": "1036438"
  },
  {
    "text": "from a verification point of view um because you don't have implicit state so",
    "start": "1036439",
    "end": "1042000"
  },
  {
    "text": "your your proofs um are a lot easier you can do all kinds of nice things like equational reasoning and so on",
    "start": "1042000",
    "end": "1051880"
  },
  {
    "text": "um polymorphic and um for for the same reason it gives us a",
    "start": "1051880",
    "end": "1058640"
  },
  {
    "text": "lot lot of advantages um total so every",
    "start": "1058640",
    "end": "1063679"
  },
  {
    "text": "cogent function returns a value they are now uncal runtime un uncal runtime",
    "start": "1063679",
    "end": "1071200"
  },
  {
    "text": "exceptions um and something which is probably more surprising it's a",
    "start": "1071200",
    "end": "1076840"
  },
  {
    "text": "terminating language so uh we don't have um General recursion we have certain",
    "start": "1076840",
    "end": "1085720"
  },
  {
    "text": "class of Loops but they can only process um Traverse finite data",
    "start": "1085720",
    "end": "1092520"
  },
  {
    "text": "structures so it's a very restricted language but in our",
    "start": "1092520",
    "end": "1098000"
  },
  {
    "text": "context restricted is actually good because restricted means we know a lot about it and we have to generate proofs",
    "start": "1098000",
    "end": "1104799"
  },
  {
    "text": "for it so we want to know more about it um that's all Al why we chose to have",
    "start": "1104799",
    "end": "1112240"
  },
  {
    "text": "um strong static semantics so why this language has to have strong static semantics this means kind of",
    "start": "1112240",
    "end": "1120640"
  },
  {
    "text": "um a lot of information encoded in the in the type system because well if you",
    "start": "1120640",
    "end": "1127840"
  },
  {
    "text": "think about it the static semantics is everything you can check at compile time",
    "start": "1127840",
    "end": "1134080"
  },
  {
    "text": "now we generate the proofs at compile time and we can only generate proofs about things we do now at compiler time",
    "start": "1134080",
    "end": "1141600"
  },
  {
    "text": "so um the more we know the more we encode in the type system the more",
    "start": "1141600",
    "end": "1147280"
  },
  {
    "text": "powerful um the the proofs will be and now I don't know if",
    "start": "1147280",
    "end": "1154559"
  },
  {
    "text": "just kind of to give you some examples of what what a static um strongly typed",
    "start": "1154559",
    "end": "1161799"
  },
  {
    "text": "language especially if it's total and terminating um this helps a lot with the",
    "start": "1161799",
    "end": "1167240"
  },
  {
    "text": "proofs kind of what kind of information it can give you I think many people here",
    "start": "1167240",
    "end": "1172960"
  },
  {
    "text": "are familiar with parametricity who is completely famili",
    "start": "1172960",
    "end": "1178640"
  },
  {
    "text": "who knows kind of parametricity in the types for uh theorems for free okay so let me just for for because",
    "start": "1178640",
    "end": "1186320"
  },
  {
    "text": "there's significant number of people who are not so let me just kind of um go over the an example fairly fairly",
    "start": "1186320",
    "end": "1193360"
  },
  {
    "text": "quickly I explain fairly quickly what what it is and why we get so much information from such a purely",
    "start": "1193360",
    "end": "1200039"
  },
  {
    "text": "functional parametric polymorphic total and terminating um language so",
    "start": "1200039",
    "end": "1206240"
  },
  {
    "text": "parametricity tells us that for parametric polymorphic function all",
    "start": "1206240",
    "end": "1212400"
  },
  {
    "text": "instances of the function behave um exactly the",
    "start": "1212400",
    "end": "1217960"
  },
  {
    "text": "same that means the more General the type of a function",
    "start": "1217960",
    "end": "1223360"
  },
  {
    "text": "is the less it can actually do because it doesn't know much about its argu",
    "start": "1223360",
    "end": "1229640"
  },
  {
    "text": "which um means on the other hand the more we know about Its Behavior and that's especi especially good um for in",
    "start": "1229640",
    "end": "1238039"
  },
  {
    "text": "the context of proof generation so kind of the simple and obvious example if you have um",
    "start": "1238039",
    "end": "1245000"
  },
  {
    "text": "now everything we know about a function f is that it has this type for all a a",
    "start": "1245000",
    "end": "1251280"
  },
  {
    "text": "to a then well there's exactly one",
    "start": "1251280",
    "end": "1256400"
  },
  {
    "text": "terminating function obviously which can have this type because it can take any a",
    "start": "1256400",
    "end": "1262120"
  },
  {
    "text": "it can do exactly nothing with it but return it as it is it can't look at it it can't manipulate it nothing at all so",
    "start": "1262120",
    "end": "1271039"
  },
  {
    "text": "um if f is terminating this has to be the identity function um then if we now kind of have",
    "start": "1271039",
    "end": "1280600"
  },
  {
    "text": "a slightly more interesting type so we know that hate can take any list um of",
    "start": "1280600",
    "end": "1285840"
  },
  {
    "text": "A's and returns a list of A's again it can't do anything with the ace",
    "start": "1285840",
    "end": "1291520"
  },
  {
    "text": "it knows nothing about it but it can do any it wants to with a list structure so H can kind of reorder drop",
    "start": "1291520",
    "end": "1299760"
  },
  {
    "text": "elements duplicate elements do all things like that um but it can't change",
    "start": "1299760",
    "end": "1305200"
  },
  {
    "text": "the values also what it can't do so it's a permutation in some sense in a",
    "start": "1305200",
    "end": "1311919"
  },
  {
    "text": "generalized permutation but the permutation can only depend on the length of the list of the structure of",
    "start": "1311919",
    "end": "1319120"
  },
  {
    "text": "the list it cannot depend on the values of the list so it can't be a sort",
    "start": "1319120",
    "end": "1325200"
  },
  {
    "text": "function so no matter basically what the El values of the list",
    "start": "1325200",
    "end": "1331120"
  },
  {
    "text": "is I put in the order of the resulting elements is determined just by the",
    "start": "1331120",
    "end": "1337440"
  },
  {
    "text": "length not by the values so that's actually already quite a lot like we we know what it can do and what what it",
    "start": "1337440",
    "end": "1343640"
  },
  {
    "text": "can't do um and then um this type is",
    "start": "1343640",
    "end": "1350120"
  },
  {
    "text": "very familiar to all of you it basically looks like a map function um and map",
    "start": "1350120",
    "end": "1355760"
  },
  {
    "text": "does have this type but G can do more G could be a map but it can also kind of",
    "start": "1355760",
    "end": "1364960"
  },
  {
    "text": "also per permute the order of the elements so map leaves it the same but nothing in here tells us that the length",
    "start": "1364960",
    "end": "1372320"
  },
  {
    "text": "of the list stays the same but we know that it's basically a combination of um",
    "start": "1372320",
    "end": "1379360"
  },
  {
    "text": "some kind of permutation function like H was and um a map and we also now that we",
    "start": "1379360",
    "end": "1387720"
  },
  {
    "text": "can kind of switch the order of when we do the permutation when when we do the map because the permutation can only",
    "start": "1387720",
    "end": "1395640"
  },
  {
    "text": "depends only on the length of the list and the length of the list doesn't change and then we can use this to",
    "start": "1395640",
    "end": "1403480"
  },
  {
    "text": "derive some if I have two functions of this type then I can order um the",
    "start": "1403480",
    "end": "1410919"
  },
  {
    "text": "permutations and the functions I can't switch so I can't switch the",
    "start": "1410919",
    "end": "1417200"
  },
  {
    "text": "permutation of G G1 with G2 because they depend on the structure and the",
    "start": "1417200",
    "end": "1423720"
  },
  {
    "text": "structure may change but I can move it like basically um back and forth here",
    "start": "1423720",
    "end": "1429320"
  },
  {
    "text": "and then um maybe in some execution model that might be some kind of",
    "start": "1429320",
    "end": "1434360"
  },
  {
    "text": "optimization that I do the map in one thing and then the permutation so the idea is just kind of we get all",
    "start": "1434360",
    "end": "1442360"
  },
  {
    "text": "these this knowledge for free just by knowing the type um because it's a",
    "start": "1442360",
    "end": "1448360"
  },
  {
    "text": "polymorphic um parametric polymorphic terminating language so if you want to",
    "start": "1448360",
    "end": "1454559"
  },
  {
    "text": "know more about this um or if you haven't read um the paper theorems for",
    "start": "1454559",
    "end": "1460320"
  },
  {
    "text": "free I strongly recommend it it's very entertaining fun paper um another",
    "start": "1460320",
    "end": "1466679"
  },
  {
    "text": "connection um thing that kind of connects types with formal methods and",
    "start": "1466679",
    "end": "1472039"
  },
  {
    "text": "logic is the car Howard correspondence if I can just kind of who knows what",
    "start": "1472039",
    "end": "1477919"
  },
  {
    "text": "what that is okay quite quite a lot of people so let me um probably half let me keep it",
    "start": "1477919",
    "end": "1484760"
  },
  {
    "text": "fairly fairly short so basically all it says oh well all it says it says",
    "start": "1484760",
    "end": "1490600"
  },
  {
    "text": "types actually correspond to theorems um and total and terminating proofs uh",
    "start": "1490600",
    "end": "1497840"
  },
  {
    "text": "program um as proofs of those theorems in um",
    "start": "1497840",
    "end": "1504640"
  },
  {
    "text": "such a language so um in particular the types in the simply type Lambda calculus",
    "start": "1504640",
    "end": "1511520"
  },
  {
    "text": "correspond to propositional logic so um a type variable corresponds to a",
    "start": "1511520",
    "end": "1518720"
  },
  {
    "text": "proposition variable function um function type Constructor corresponds to",
    "start": "1518720",
    "end": "1525840"
  },
  {
    "text": "The Logical implication um product or topple type um is the",
    "start": "1525840",
    "end": "1533760"
  },
  {
    "text": "logic a some type or in has basically kind of the alternative or Choice um or",
    "start": "1533760",
    "end": "1541039"
  },
  {
    "text": "however to um or and the unit type or any type with a single element to the",
    "start": "1541039",
    "end": "1548799"
  },
  {
    "text": "constant true and then um if I basically",
    "start": "1548799",
    "end": "1553919"
  },
  {
    "text": "for a given type I can write a function uh for the type a total and terminating",
    "start": "1553919",
    "end": "1560960"
  },
  {
    "text": "function if and only if the corresponding proposition is true so we",
    "start": "1560960",
    "end": "1566600"
  },
  {
    "text": "already know that we can write a function of that type namely the identity and the corresponding",
    "start": "1566600",
    "end": "1574120"
  },
  {
    "text": "proposition is that for all a a implies a that's trivially",
    "start": "1574120",
    "end": "1579440"
  },
  {
    "text": "true um now if I would have made the type",
    "start": "1579440",
    "end": "1586080"
  },
  {
    "text": "more General and said well FX actually has a type for all A's and all B's given",
    "start": "1586080",
    "end": "1592000"
  },
  {
    "text": "an a it can produce a b um can I write such a function in",
    "start": "1592000",
    "end": "1597440"
  },
  {
    "text": "hasle so that the type Checker is happy with it undef yeah undefined or just f",
    "start": "1597440",
    "end": "1605679"
  },
  {
    "text": "ofx is f ofx um I can't write a terminating",
    "start": "1605679",
    "end": "1611360"
  },
  {
    "text": "function um which actually returns something because how could it return a b it knows nothing about right it it has",
    "start": "1611360",
    "end": "1618880"
  },
  {
    "text": "to be able not not just one B like an integer or something the B is for all Quantified so I can write a function but",
    "start": "1618880",
    "end": "1626399"
  },
  {
    "text": "it's not terminating so it doesn't count as proof and it really should not because for all a a implies B is",
    "start": "1626399",
    "end": "1632679"
  },
  {
    "text": "obviously not true um similarly for either AB um to a again",
    "start": "1632679",
    "end": "1642919"
  },
  {
    "text": "I can't can write a function in hll um which the type Checker is happy with um",
    "start": "1642919",
    "end": "1649279"
  },
  {
    "text": "I just kind of return if I happen to get left then I return that X so I return",
    "start": "1649279",
    "end": "1654559"
  },
  {
    "text": "the a um but I don't say anything um about uh right um this does not count as",
    "start": "1654559",
    "end": "1663399"
  },
  {
    "text": "a proof because it's not total um and indeed it should not because A or B",
    "start": "1663399",
    "end": "1670279"
  },
  {
    "text": "implies a there should not be a proof for that",
    "start": "1670279",
    "end": "1676840"
  },
  {
    "text": "um and now you can basically take kind of other propositional logic formulas we",
    "start": "1676919",
    "end": "1683559"
  },
  {
    "text": "now are true for example we have a and a implies B this implies B well that's",
    "start": "1683559",
    "end": "1690840"
  },
  {
    "text": "just function application um a implies B implies B",
    "start": "1690840",
    "end": "1696799"
  },
  {
    "text": "implies C implies a implies C that's function composition",
    "start": "1696799",
    "end": "1704000"
  },
  {
    "text": "um this is currying and uncaring",
    "start": "1704360",
    "end": "1709320"
  },
  {
    "text": "and [Music] um yeah so so basically so these are all",
    "start": "1709799",
    "end": "1715480"
  },
  {
    "text": "not you know it's propositional logic so the theorems we get are not very spectacular but um it's I think quite",
    "start": "1715480",
    "end": "1722880"
  },
  {
    "text": "kind an interesting um interesting uh fact that there is such a strong",
    "start": "1722880",
    "end": "1728799"
  },
  {
    "text": "correlation and it's a fact that is very good for us if we want to use types of rof um again um if you want to know more",
    "start": "1728799",
    "end": "1736480"
  },
  {
    "text": "about it um there's another one of Phil wless paper which explains this in a",
    "start": "1736480",
    "end": "1742600"
  },
  {
    "text": "very entertaining way um proposition as types um so if we choose a more",
    "start": "1742600",
    "end": "1750320"
  },
  {
    "text": "interesting type system then we also get more interesting logic so dependent",
    "start": "1750320",
    "end": "1755919"
  },
  {
    "text": "types predicate logic which is of course what ACTA is building um and there's a",
    "start": "1755919",
    "end": "1761720"
  },
  {
    "text": "correspondence between linear types and linear logic which I will talk about um",
    "start": "1761720",
    "end": "1768919"
  },
  {
    "text": "soon um so now we basically I talked about um what cogent has to be to be",
    "start": "1768919",
    "end": "1777279"
  },
  {
    "text": "suitable for to help with the uh manual",
    "start": "1777279",
    "end": "1782640"
  },
  {
    "text": "proof but um what are the criterias for Cogen to be suitable for the proof and",
    "start": "1782640",
    "end": "1790720"
  },
  {
    "text": "code Cod Generation Um well it should support the",
    "start": "1790720",
    "end": "1797080"
  },
  {
    "text": "generation of of um proofs of boring properties boring of course we want to",
    "start": "1797080",
    "end": "1802679"
  },
  {
    "text": "make them as interesting as possible but if they can be fully auto automated they are always boring to a certain extent",
    "start": "1802679",
    "end": "1810360"
  },
  {
    "text": "and basically that's what we want to our burden we want to take off of the poor",
    "start": "1810360",
    "end": "1815640"
  },
  {
    "text": "person who has to kind of prove this thing correct which is bad enough as it is",
    "start": "1815640",
    "end": "1821559"
  },
  {
    "text": "um these are things like kind of memory safety absence of aing error handling",
    "start": "1821559",
    "end": "1828519"
  },
  {
    "text": "um data serialization der serialization correctness then it has to be kind of a",
    "start": "1828519",
    "end": "1834760"
  },
  {
    "text": "good basis to generate those correspondence proofs and um it should generate",
    "start": "1834760",
    "end": "1842120"
  },
  {
    "text": "efficient code because if we have a fully verified file system which is with very poor",
    "start": "1842120",
    "end": "1848720"
  },
  {
    "text": "performance then um we didn't win anything um and for that um or and uh",
    "start": "1848720",
    "end": "1858279"
  },
  {
    "text": "systems basically typically for",
    "start": "1858279",
    "end": "1863440"
  },
  {
    "text": "sl4 there was a kind of Fairly monotic State and they modeled the state um for",
    "start": "1863440",
    "end": "1870519"
  },
  {
    "text": "the high level proofs as as a mountet and that worked fairly well file system",
    "start": "1870519",
    "end": "1876919"
  },
  {
    "text": "the situation is a bit different um because typically it's kind of you have",
    "start": "1876919",
    "end": "1882080"
  },
  {
    "text": "a big state but parts of the program only manipulate small um subsets of the",
    "start": "1882080",
    "end": "1889360"
  },
  {
    "text": "state and you want to express be able to express that um to be able to um but",
    "start": "1889360",
    "end": "1896720"
  },
  {
    "text": "both for the proofs down to see but also for the high level",
    "start": "1896720",
    "end": "1902240"
  },
  {
    "text": "proofs um and this was actually something which was slightly confusing",
    "start": "1902240",
    "end": "1907320"
  },
  {
    "text": "when I started with a project because the systems people who had been involved in",
    "start": "1907320",
    "end": "1912960"
  },
  {
    "text": "sl4 um and worked on the file systems project they and said the language has",
    "start": "1912960",
    "end": "1919440"
  },
  {
    "text": "to have lots and lots of monets lots of small monets and I kind of what are you I",
    "start": "1919440",
    "end": "1926120"
  },
  {
    "text": "tried to figure out what they were talking about but they insisted they wanted lots of monets until I realized",
    "start": "1926120",
    "end": "1932440"
  },
  {
    "text": "basically because the sl4 thing was the main kind of contact with functional languages and",
    "start": "1932440",
    "end": "1940200"
  },
  {
    "text": "they thought any kind of state has to be wrapped in monets so if you have fine grain State then you need lots of monets",
    "start": "1940200",
    "end": "1946320"
  },
  {
    "text": "and you have to be um able to to combine them um yeah um",
    "start": "1946320",
    "end": "1955518"
  },
  {
    "text": "oops so there is um some kind of basically contradiction in here because",
    "start": "1957840",
    "end": "1963960"
  },
  {
    "text": "on one hand we want the language to be as high level as possible but of course it should be we should be able to",
    "start": "1963960",
    "end": "1969760"
  },
  {
    "text": "generate really efficiency and um it should be easy to do the correspondence",
    "start": "1969760",
    "end": "1976240"
  },
  {
    "text": "proof so the closer it is to to see obviously the easier it is um and when",
    "start": "1976240",
    "end": "1983159"
  },
  {
    "text": "we looked at the proofs they had done manually or started to do manually one thing um which struck me",
    "start": "1983159",
    "end": "1993039"
  },
  {
    "text": "they had these kind of annotations and some some of the values and basically",
    "start": "1993039",
    "end": "1998120"
  },
  {
    "text": "what turned out they had to had kind of by convention implemented linear",
    "start": "1998120",
    "end": "2005360"
  },
  {
    "text": "types um so linear types um basically linear types are fairly",
    "start": "2005360",
    "end": "2012760"
  },
  {
    "text": "very easy to describe a linear type is basically variable of linear type can be used exactly once so I said",
    "start": "2012760",
    "end": "2021519"
  },
  {
    "text": "um Regular kind of Simply Type L um corresponds to propositional logic um",
    "start": "2021519",
    "end": "2028840"
  },
  {
    "text": "linear types often um annotated with this kind of upside down bang",
    "start": "2028840",
    "end": "2034240"
  },
  {
    "text": "corresponds to linear logic and this is the kind of linear logic implication but it works",
    "start": "2034240",
    "end": "2040480"
  },
  {
    "text": "very differently um so if I use implication in propositional logic if a",
    "start": "2040480",
    "end": "2046399"
  },
  {
    "text": "implies B then I can deduce B but a is still valid because it's it's a",
    "start": "2046399",
    "end": "2052599"
  },
  {
    "text": "statement it's a proposition in linear logic it's more like resources so it",
    "start": "2052599",
    "end": "2058118"
  },
  {
    "text": "says kind of I can use a to produce B but then a is gone um and if you had a look at r",
    "start": "2058119",
    "end": "2068320"
  },
  {
    "text": "it's very closely related to rests um aine types they sometimes don't call it",
    "start": "2068320",
    "end": "2075320"
  },
  {
    "text": "but aine types um are basically you can use them at most once but it's okay if",
    "start": "2075320",
    "end": "2082040"
  },
  {
    "text": "you don't use them at all um and it's not a coincidence that",
    "start": "2082040",
    "end": "2089638"
  },
  {
    "text": "we are using something very similar to rust because we have a similar problem",
    "start": "2089639",
    "end": "2096760"
  },
  {
    "text": "they want to have a fast Safe Systems language we want to have um systems",
    "start": "2096760",
    "end": "2102720"
  },
  {
    "text": "language which is fast and which we can prove correct um",
    "start": "2102720",
    "end": "2109640"
  },
  {
    "text": "so not going time wise it's",
    "start": "2109640",
    "end": "2116560"
  },
  {
    "text": "got yeah so just simple example let's say I have",
    "start": "2116560",
    "end": "2121960"
  },
  {
    "text": "a program here I use I have a variable X of linear type in and this is not not",
    "start": "2121960",
    "end": "2128040"
  },
  {
    "text": "very realistic because um in a even in a linear Type L linearly Type language I",
    "start": "2128040",
    "end": "2134440"
  },
  {
    "text": "would not really use my primitive types like integer Boolean fls and so on as",
    "start": "2134440",
    "end": "2140359"
  },
  {
    "text": "linear types because there's implementation R is no real reason for it but um in practice this would be some",
    "start": "2140359",
    "end": "2147960"
  },
  {
    "text": "kind of complex complex objects or lists or pointer structures so um this is a",
    "start": "2147960",
    "end": "2154560"
  },
  {
    "text": "legal linearly type program because I have my here and I use it once",
    "start": "2154560",
    "end": "2160560"
  },
  {
    "text": "um this wouldn't be okay because I never use it and this wouldn't be okay either",
    "start": "2160560",
    "end": "2168240"
  },
  {
    "text": "because I use x twice which I'm not allowed to so this kind of the defining",
    "start": "2168240",
    "end": "2173920"
  },
  {
    "text": "definition and then using definition um now this has the",
    "start": "2173920",
    "end": "2181720"
  },
  {
    "text": "consequence if I have a linearly typed language then there really is no way",
    "start": "2181720",
    "end": "2188119"
  },
  {
    "text": "um I can kind of copy any kind of",
    "start": "2188119",
    "end": "2194319"
  },
  {
    "text": "object unless I have something like a copy explicit copy as a buil-in in that",
    "start": "2194319",
    "end": "2201040"
  },
  {
    "text": "language which takes um a linear a and returns to",
    "start": "2201040",
    "end": "2206800"
  },
  {
    "text": "Ace and operationally this would really kind of copy produce two copies um and",
    "start": "2206800",
    "end": "2215480"
  },
  {
    "text": "the important thing about that is I don't want to have accidental aliasing in um and we'll see that in a",
    "start": "2215480",
    "end": "2224480"
  },
  {
    "text": "second later on same sometimes I am just in the situation that I have an object",
    "start": "2224480",
    "end": "2230720"
  },
  {
    "text": "and I don't need it anymore and I don't want to transform it into something else I just want to get rid of it um so I",
    "start": "2230720",
    "end": "2237880"
  },
  {
    "text": "need to have something in my language um kind of like a free which um takes a",
    "start": "2237880",
    "end": "2245599"
  },
  {
    "text": "linear value and returns nothing and",
    "start": "2245599",
    "end": "2251079"
  },
  {
    "text": "um yeah this way I basically in a purely functional way make the memory",
    "start": "2251079",
    "end": "2256680"
  },
  {
    "text": "management explicit um in a linear type system it's also",
    "start": "2256680",
    "end": "2264520"
  },
  {
    "text": "essential that I can sometimes use my linear a value of linear type um and",
    "start": "2264520",
    "end": "2272880"
  },
  {
    "text": "pretend that it's not a linear linear value just consider so this is like a",
    "start": "2272880",
    "end": "2278400"
  },
  {
    "text": "cons function which takes an a um a linear list of a and produces a",
    "start": "2278400",
    "end": "2285160"
  },
  {
    "text": "new linear list of A's um and this consumes the old list because it I don't",
    "start": "2285160",
    "end": "2292200"
  },
  {
    "text": "want to have alas thing so it takes my old list puts the new head um in front",
    "start": "2292200",
    "end": "2297760"
  },
  {
    "text": "and then kind of returns a reference to the new list and I can't use the reference to the old list anymore so",
    "start": "2297760",
    "end": "2305880"
  },
  {
    "text": "that's kind of okay but a length function if I only if I can't",
    "start": "2305880",
    "end": "2312240"
  },
  {
    "text": "kind of get rid of the linear linearity of a value the length",
    "start": "2312240",
    "end": "2317839"
  },
  {
    "text": "function would have to have this type it takes a linear list um and usually if I",
    "start": "2317839",
    "end": "2325800"
  },
  {
    "text": "query the length of the list I don't want to throw the list away right but um",
    "start": "2325800",
    "end": "2330920"
  },
  {
    "text": "so I kind of have to return it so that that I can use it in the rest of the",
    "start": "2330920",
    "end": "2336560"
  },
  {
    "text": "program to together with um the integer value and the length value obviously",
    "start": "2336560",
    "end": "2344400"
  },
  {
    "text": "that's kind of annoying because I have to thread through um values which I",
    "start": "2344400",
    "end": "2349960"
  },
  {
    "text": "really kind of length would actually not have done anything bad to the list and it wouldn't have led to aliasing or",
    "start": "2349960",
    "end": "2356560"
  },
  {
    "text": "anything it would have just looked at the list so um therefore in a linearly",
    "start": "2356560",
    "end": "2362880"
  },
  {
    "text": "typed language which you want actually someone to use um you need the concept",
    "start": "2362880",
    "end": "2368720"
  },
  {
    "text": "of what's called borrowing and rust so basically you you say well um I have my",
    "start": "2368720",
    "end": "2375160"
  },
  {
    "text": "list in the following piece of code I will only look at the list I won't I",
    "start": "2375160",
    "end": "2380760"
  },
  {
    "text": "will use it only right only and then you kind of temporarily convert it into a",
    "start": "2380760",
    "end": "2387200"
  },
  {
    "text": "list of regular type can do the stuff like look at it check what kind of elements it has look at the the lengths",
    "start": "2387200",
    "end": "2394160"
  },
  {
    "text": "of the list but you can't use the",
    "start": "2394160",
    "end": "2399200"
  },
  {
    "text": "linear you can't use the linear version of the type in that piece of code only",
    "start": "2399200",
    "end": "2404440"
  },
  {
    "text": "when it kind of um the read only copy goes out of scope you can use it again",
    "start": "2404440",
    "end": "2411119"
  },
  {
    "text": "similarly another problem with um linear types is",
    "start": "2411119",
    "end": "2416960"
  },
  {
    "text": "if you have a linear struct um with structs we kind of if we access",
    "start": "2416960",
    "end": "2424440"
  },
  {
    "text": "a field and the fields are also like they are l so we have already have some Alias thing",
    "start": "2424440",
    "end": "2430720"
  },
  {
    "text": "is if we allow access to the top level struct and the fields of the struct at",
    "start": "2430720",
    "end": "2436680"
  },
  {
    "text": "the same time so what we have is basically once you",
    "start": "2436680",
    "end": "2443920"
  },
  {
    "text": "access a field of the struct then this field basically becomes unusable so you",
    "start": "2443920",
    "end": "2449960"
  },
  {
    "text": "can still look at the other fields but while you kind of have a reference to a",
    "start": "2449960",
    "end": "2455960"
  },
  {
    "text": "variable bound to one field of the struct you can't access this via the the",
    "start": "2455960",
    "end": "2463480"
  },
  {
    "text": "top level struct anymore so what you can probably already see and if you have",
    "start": "2463480",
    "end": "2469920"
  },
  {
    "text": "played around with rust a bit which is um a lot more relaxed linear types don't",
    "start": "2469920",
    "end": "2475599"
  },
  {
    "text": "come for free they put really some burden on the programmer it's um it's a lot more",
    "start": "2475599",
    "end": "2483079"
  },
  {
    "text": "complicated um you have to jump through a couple of um who to kind of keep the",
    "start": "2483079",
    "end": "2489359"
  },
  {
    "text": "typee Checker happy um but they do have um a huge advantage",
    "start": "2489359",
    "end": "2496920"
  },
  {
    "text": "in our context so if you look at some um",
    "start": "2496920",
    "end": "2503560"
  },
  {
    "text": "sped of code let's say we get a linear the file system State as a linear",
    "start": "2503560",
    "end": "2508800"
  },
  {
    "text": "variable um a linear object and it returns a file system State um an",
    "start": "2508800",
    "end": "2515880"
  },
  {
    "text": "updated file system state State and maybe here we kind of free the",
    "start": "2515880",
    "end": "2521119"
  },
  {
    "text": "object if I take this linear program or kind of any linearly type program and",
    "start": "2521119",
    "end": "2527240"
  },
  {
    "text": "just throw all the linear type information away what I get is a kind of",
    "start": "2527240",
    "end": "2533160"
  },
  {
    "text": "awkward purely functional program where I just happen to use every variable exactly once but it's still a purely",
    "start": "2533160",
    "end": "2541000"
  },
  {
    "text": "functional so um which is great news because for the top level I can just",
    "start": "2541000",
    "end": "2546720"
  },
  {
    "text": "pretend the linear types aren't there it's a functional programming a",
    "start": "2546720",
    "end": "2551760"
  },
  {
    "text": "functional program so if I have something like this where I said um file system state is update file system state",
    "start": "2551760",
    "end": "2559280"
  },
  {
    "text": "of the old file system state is a functional if I view this as a kind of regular functional program then these",
    "start": "2559280",
    "end": "2566240"
  },
  {
    "text": "two variables just happen to have the same name they are not the same um and",
    "start": "2566240",
    "end": "2571960"
  },
  {
    "text": "Alpha renaming wouldn't um wouldn't change it but",
    "start": "2571960",
    "end": "2578880"
  },
  {
    "text": "um if I I can kind of read it because I know that um this old thing isn't used",
    "start": "2578880",
    "end": "2586559"
  },
  {
    "text": "anymore after this function call I can actually also read it as an update and",
    "start": "2586559",
    "end": "2591880"
  },
  {
    "text": "say the old file system state is updated so",
    "start": "2591880",
    "end": "2596920"
  },
  {
    "text": "um we gave cogent kind of two semantics a purely functional",
    "start": "2596920",
    "end": "2604319"
  },
  {
    "text": "semantics which as I said in the beginning is great for all kinds of",
    "start": "2604319",
    "end": "2609680"
  },
  {
    "text": "equivalence proofs for the fact that we don't have to worry about States at all",
    "start": "2609680",
    "end": "2615079"
  },
  {
    "text": "um and we gave it an update semantics which is really nice for",
    "start": "2615079",
    "end": "2622359"
  },
  {
    "text": "generating efficiency code because then we can recycle we basically have distructive updates um we don't have any",
    "start": "2622359",
    "end": "2629839"
  },
  {
    "text": "aliasing um we have explicit memory management so in the purely functional",
    "start": "2629839",
    "end": "2636640"
  },
  {
    "text": "View my free object is basically a no operation it's like call a function on something which returns nothing and I",
    "start": "2636640",
    "end": "2643480"
  },
  {
    "text": "throw like I don't use the anything at all in the update semantics well it's a",
    "start": "2643480",
    "end": "2651880"
  },
  {
    "text": "free so we could actually have used fine types here because our type Checker",
    "start": "2651880",
    "end": "2659440"
  },
  {
    "text": "really knows when something is not used and um",
    "start": "2659440",
    "end": "2665119"
  },
  {
    "text": "so we could have kind of inserted the freeze the systems people said I think",
    "start": "2665119",
    "end": "2670680"
  },
  {
    "text": "they didn't trust us so they said they definitely wanted to have freeze um so",
    "start": "2670680",
    "end": "2676559"
  },
  {
    "text": "we said okay then we'll go with linear types they really changed their mind because they had to write a lot of kind",
    "start": "2676559",
    "end": "2681880"
  },
  {
    "text": "of Superfluous codes so in the next iteration it's quite likely that we U might switch to kind of putting all the",
    "start": "2681880",
    "end": "2689760"
  },
  {
    "text": "freeze in for free um sorry",
    "start": "2689760",
    "end": "2694800"
  },
  {
    "text": "um um yeah uh and if you want to learn learn more",
    "start": "2694800",
    "end": "2700880"
  },
  {
    "text": "about linear types and that's I promised the last time I pitch um one of Phil's",
    "start": "2700880",
    "end": "2706200"
  },
  {
    "text": "papers have a read that linear types can change the world again it's a very nice",
    "start": "2706200",
    "end": "2712200"
  },
  {
    "text": "explanation and um given that it's um the month of the wler Fest and Phil's",
    "start": "2712200",
    "end": "2718760"
  },
  {
    "text": "60th birthday it's probably okay to kind of push it um his work so hard um so",
    "start": "2718760",
    "end": "2726800"
  },
  {
    "text": "what does the whole kind of what's the current state of of our",
    "start": "2726800",
    "end": "2732800"
  },
  {
    "text": "project so we've implemented um the compiler we generate both the update and",
    "start": "2732800",
    "end": "2740440"
  },
  {
    "text": "the declarative semantics and um we have a proof that for All Pro uh for all",
    "start": "2740440",
    "end": "2747200"
  },
  {
    "text": "possible programs these two semantics are um the same",
    "start": "2747200",
    "end": "2753920"
  },
  {
    "text": "um we have BAS basically um the",
    "start": "2753920",
    "end": "2759559"
  },
  {
    "text": "verification from this the updates man to see works it's not as clean and the",
    "start": "2759559",
    "end": "2765640"
  },
  {
    "text": "picture it looks quite nice and and and tidy um like like so often the reality",
    "start": "2765640",
    "end": "2773920"
  },
  {
    "text": "is a lot more horrible U so there's a lot of kind of um there are lots of",
    "start": "2773920",
    "end": "2779559"
  },
  {
    "text": "tools involved and and stuff going up and down and yeah it's it's not it's not",
    "start": "2779559",
    "end": "2785160"
  },
  {
    "text": "a very nice nice architecture to be honest but um it's kind of the full",
    "start": "2785160",
    "end": "2791520"
  },
  {
    "text": "implementation and we've implemented to um file systems um X2 FS file system and",
    "start": "2791520",
    "end": "2798800"
  },
  {
    "text": "um a flash file system um and basically yeah",
    "start": "2798800",
    "end": "2806480"
  },
  {
    "text": "so now uh did we basically achieve the goals we set out in the beginning so one",
    "start": "2806480",
    "end": "2813000"
  },
  {
    "text": "thing was simplify the verification process now would be kind of nice to have exact",
    "start": "2813000",
    "end": "2820240"
  },
  {
    "text": "numbers it would take exactly this many um person days hours years to do this",
    "start": "2820240",
    "end": "2827280"
  },
  {
    "text": "and we cut it down by 80% um we don't have this but we have for the flash file",
    "start": "2827280",
    "end": "2834240"
  },
  {
    "text": "system um specification the PHD student who did",
    "start": "2834240",
    "end": "2839599"
  },
  {
    "text": "that and who has a lot of experience in doing the verification down to C thought",
    "start": "2839599",
    "end": "2847559"
  },
  {
    "text": "that this really really significantly reduced the um time and effort required",
    "start": "2847559",
    "end": "2853240"
  },
  {
    "text": "to do this proof um what about like the skill level",
    "start": "2853240",
    "end": "2860240"
  },
  {
    "text": "because the skill level is another factor of cost right if I um it's fairly",
    "start": "2860240",
    "end": "2866079"
  },
  {
    "text": "fast to do but I need an expert then I have to pay for the expertise so how",
    "start": "2866079",
    "end": "2871319"
  },
  {
    "text": "difficult is it to use um Cent um if you know functional",
    "start": "2871319",
    "end": "2878960"
  },
  {
    "text": "programming it's still quite it's painful but it's not hard um the our X2",
    "start": "2878960",
    "end": "2887480"
  },
  {
    "text": "FS implementation uh the person who implemented it kind of stuck too closely",
    "start": "2887480",
    "end": "2894480"
  },
  {
    "text": "to the original C implementation and basically the same kind of effect you have if you kind of",
    "start": "2894480",
    "end": "2901119"
  },
  {
    "text": "translate a c program into hcll or whatever and you stick too closely to the data structures then you don't",
    "start": "2901119",
    "end": "2908119"
  },
  {
    "text": "really get a good hco program and the same thing happened there it was just",
    "start": "2908119",
    "end": "2913240"
  },
  {
    "text": "not kind of suboptimal choices for for the um structure and so on so you",
    "start": "2913240",
    "end": "2919920"
  },
  {
    "text": "definitely want someone as functional programming experience at the moment as",
    "start": "2919920",
    "end": "2925000"
  },
  {
    "text": "I said it's painful because the syntax is pretty terrible and to a certain extent that",
    "start": "2925000",
    "end": "2932119"
  },
  {
    "text": "was kind of not a conscious choice but we uh um we were okay with it",
    "start": "2932119",
    "end": "2938920"
  },
  {
    "text": "because we wanted to have the full pipeline implemented um so we can do",
    "start": "2938920",
    "end": "2944839"
  },
  {
    "text": "case studies and actually figure out exactly what we want what we need and what we can do and discussions about",
    "start": "2944839",
    "end": "2951960"
  },
  {
    "text": "semantics in a group where you have systems people you have formal methods people and you have programming language",
    "start": "2951960",
    "end": "2958520"
  },
  {
    "text": "people I mean they can kind of take any arbitrary amount of time so we basically",
    "start": "2958520",
    "end": "2965160"
  },
  {
    "text": "stuck to something so and at the moment this is really kind of the core language",
    "start": "2965160",
    "end": "2970599"
  },
  {
    "text": "but the good thing also is that because we had luckily to other people not me",
    "start": "2970599",
    "end": "2976400"
  },
  {
    "text": "going through the pain of implementing to programming languages uh to programming to file systems we know kind",
    "start": "2976400",
    "end": "2983720"
  },
  {
    "text": "of where the pain points are and which synta what kind of syntactic sugar would",
    "start": "2983720",
    "end": "2990079"
  },
  {
    "text": "make their life easier um uh yeah perform",
    "start": "2990079",
    "end": "2997799"
  },
  {
    "text": "um so micro benchmarks basically with micro",
    "start": "2997799",
    "end": "3003359"
  },
  {
    "text": "benchmarks in mediumsized benchmarks the there is an over overhead compared to C",
    "start": "3003359",
    "end": "3009359"
  },
  {
    "text": "but it's in the same order of magnitude for some benchmarks the same there is",
    "start": "3009359",
    "end": "3014480"
  },
  {
    "text": "one big problem with the performance though and that's kind of there are just",
    "start": "3014480",
    "end": "3020000"
  },
  {
    "text": "some usage patterns in those file systems",
    "start": "3020000",
    "end": "3025040"
  },
  {
    "text": "which you can't Implement efficiently in cogent at the moment and that is kind of",
    "start": "3025040",
    "end": "3031319"
  },
  {
    "text": "um you read a data structure kind of from C an array for example in uh from",
    "start": "3031319",
    "end": "3037720"
  },
  {
    "text": "dis you read it in the buffer in Cent to Traverse the structure",
    "start": "3037720",
    "end": "3043119"
  },
  {
    "text": "you have to deserialize it Traverse it figure out that the I out isn't there or",
    "start": "3043119",
    "end": "3049480"
  },
  {
    "text": "something um and then update it whereas in C all of that can basically be done",
    "start": "3049480",
    "end": "3055240"
  },
  {
    "text": "in memory um and there's actually no reason why we",
    "start": "3055240",
    "end": "3061599"
  },
  {
    "text": "can't add and that's what we're going to do kind of language domain specific",
    "start": "3061599",
    "end": "3068559"
  },
  {
    "text": "language features that where you can do these things because you you can kind of",
    "start": "3068559",
    "end": "3074240"
  },
  {
    "text": "um these are very clearly defined patterns so that's one thing we're working on at the moment because that's",
    "start": "3074240",
    "end": "3080319"
  },
  {
    "text": "something which which is um not um not okay at the moment um so I",
    "start": "3080319",
    "end": "3089040"
  },
  {
    "text": "think like our summary is that definitely the kind of using a functional language um with a",
    "start": "3089040",
    "end": "3096760"
  },
  {
    "text": "sophisticated type system um seems to be the right way to go and in some sense",
    "start": "3096760",
    "end": "3103880"
  },
  {
    "text": "all we put in at the moment is really linear types we want to put in a lot more either refinement types or",
    "start": "3103880",
    "end": "3110119"
  },
  {
    "text": "dependent time so that's kind of the next research um direction we want to go",
    "start": "3110119",
    "end": "3115160"
  },
  {
    "text": "because the more we put in here um the more we can do automatically like range",
    "start": "3115160",
    "end": "3121359"
  },
  {
    "text": "checking and things like that we should be able to do more more of that and we will be able to do",
    "start": "3121359",
    "end": "3127040"
  },
  {
    "text": "that um yeah and one thing which I kind of",
    "start": "3127040",
    "end": "3134480"
  },
  {
    "text": "quickly mentioned so um the the system basically comes comes",
    "start": "3134480",
    "end": "3140079"
  },
  {
    "text": "with the foreign function interface for things like systems calls but also Cent is not the right language to Implement",
    "start": "3140079",
    "end": "3147000"
  },
  {
    "text": "for example something like a red black tree and again if you have tried so who",
    "start": "3147000",
    "end": "3152160"
  },
  {
    "text": "who's played around with rust or then some Rust programming things like trees",
    "start": "3152160",
    "end": "3157440"
  },
  {
    "text": "and like if you're trying to to implement a list or or a red black tree in a language like rust is not not a lot",
    "start": "3157440",
    "end": "3164480"
  },
  {
    "text": "of fun and it's not meant to for for these things um",
    "start": "3164480",
    "end": "3170000"
  },
  {
    "text": "so you can't can't Implement that en cachent at the moment and we have now",
    "start": "3170000",
    "end": "3176119"
  },
  {
    "text": "immedi plans to extend cou and to be more suitable for that because in some",
    "start": "3176119",
    "end": "3181640"
  },
  {
    "text": "sense um I think we should have a different verification stories for those abstract data types also even if you",
    "start": "3181640",
    "end": "3189799"
  },
  {
    "text": "verify them manually these are the things which are actually reused from file system to file system so manual",
    "start": "3189799",
    "end": "3196960"
  },
  {
    "text": "work pays off over um different different file systems there um but we",
    "start": "3196960",
    "end": "3203319"
  },
  {
    "text": "we should like there should be um a Good Very ification story and I mean there are lots of groups which work on on the",
    "start": "3203319",
    "end": "3210319"
  },
  {
    "text": "verification of such AB abstract data types and that's to a certain extent orth oral um to our",
    "start": "3210319",
    "end": "3218440"
  },
  {
    "text": "work um so that's that's about it so as promised I won't keep you too long from",
    "start": "3218440",
    "end": "3225680"
  },
  {
    "text": "your drinks [Applause]",
    "start": "3225680",
    "end": "3234750"
  }
]