[
  {
    "start": "0",
    "end": "67000"
  },
  {
    "text": "Hi. My name is Emily Pillmore.",
    "start": "1670",
    "end": "6779"
  },
  {
    "text": "I'm here with Rebecca Skinner, who wrote a\nnew Haskell book. Do you mind introducing yourself, Rebecca?",
    "start": "6779",
    "end": "16368"
  },
  {
    "text": "I'm Rebecca Skinner. I wrote a book called \"Effective Haskell.\"",
    "start": "16369",
    "end": "22699"
  },
  {
    "text": "I'm also a lead engineer at Mercury, where\nI use Haskell every day. All right.",
    "start": "22699",
    "end": "28539"
  },
  {
    "text": "Thank you. For those of you who don't know, my name is\nEmily Pillmore. I do a lot of stuff in Haskell.",
    "start": "28539",
    "end": "35879"
  },
  {
    "text": "And I'm just here interviewing my friend Rebecca,\nwho came out with a fancy new book.",
    "start": "35879",
    "end": "41239"
  },
  {
    "text": "And I'm fairly happy to see this book in the\necosystem because it does cover some very",
    "start": "41239",
    "end": "46269"
  },
  {
    "text": "interesting parts of Haskell that I haven't\nseen up to date in the past 10, or 15 years,",
    "start": "46270",
    "end": "54130"
  },
  {
    "text": "even. Do you wanna get right into talking about\nthe book, or is there anything you wanna talk about or plug beforehand?",
    "start": "54130",
    "end": "59530"
  },
  {
    "text": "Let's do it. Let's jump right into the book. All right.",
    "start": "59530",
    "end": "64739"
  },
  {
    "text": "Cool. So, the book is titled \"Effective Haskell.\" Who is this book for?",
    "start": "64739",
    "end": "70650"
  },
  {
    "start": "67000",
    "end": "369000"
  },
  {
    "text": "When I was writing the book, the archetype\nof reader that I had in mind was somebody",
    "start": "70650",
    "end": "79180"
  },
  {
    "text": "that is an experienced developer, maybe not\na super senior developer, but somebody that's",
    "start": "79180",
    "end": "85180"
  },
  {
    "text": "been writing code for a couple of years, probably\nprofessionally, but maybe, you know, as, like,",
    "start": "85180",
    "end": "92210"
  },
  {
    "text": "a regular hobbyist, working on open source.",
    "start": "92210",
    "end": "97479"
  },
  {
    "text": "Somebody who's never used a functional programming\nlanguage, maybe doesn't know a lot about Haskell,",
    "start": "97479",
    "end": "103490"
  },
  {
    "text": "maybe has never even used a statically typed\nlanguage before, but is interested in picking",
    "start": "103490",
    "end": "110720"
  },
  {
    "text": "up Haskell because they really wanna build\nthings with it, right? They're not learning it entirely for the intellectual\nexercise, although I hope that's part of it,",
    "start": "110720",
    "end": "121460"
  },
  {
    "text": "but because they wanna get things done. Nice. So, keeping it simple, and keeping it project-driven,\nI suppose, and then focusing on how to just",
    "start": "121460",
    "end": "135250"
  },
  {
    "text": "build stuff. Right. Good summary? Okay.",
    "start": "135250",
    "end": "141110"
  },
  {
    "text": "Great. Okay. So, within that, how does that differ from\nother books that we've had in the ecosystem?",
    "start": "141110",
    "end": "152440"
  },
  {
    "text": "I think that when I look at all of the material\nthat has historically been out there for Haskell,",
    "start": "152440",
    "end": "159670"
  },
  {
    "text": "there's a lot of stuff that I would say is\nhigh-quality material, but it tends to fall",
    "start": "159670",
    "end": "167380"
  },
  {
    "text": "into a couple of categories. Some of it is, I think, well-written material\nthat's out of date, right?",
    "start": "167380",
    "end": "173510"
  },
  {
    "text": "It was written quite a while ago. It maybe hasn't kept up with the changing\nway that we write Haskell in the real world.",
    "start": "173510",
    "end": "183440"
  },
  {
    "text": "And then there are materials that I think\nare aimed at people that are interested in",
    "start": "183440",
    "end": "189290"
  },
  {
    "text": "learning Haskell from a more, like, theoretical\nstandpoint, or an academic standpoint.",
    "start": "189290",
    "end": "196540"
  },
  {
    "text": "And, you know, I think that many of those\nmaterials are great, right? And they're a really good way for people that\nlearn that way and have that motivation, but",
    "start": "196540",
    "end": "206470"
  },
  {
    "text": "they're not for everyone. And I wanted to write the book that I thought\nwould appeal to, you know, people like me,",
    "start": "206470",
    "end": "212560"
  },
  {
    "text": "maybe people that are going into Haskell without\na really strong math background to start with,",
    "start": "212560",
    "end": "217939"
  },
  {
    "text": "but, you know, want to learn the language,\nand feel like maybe they can learn this other",
    "start": "217939",
    "end": "222940"
  },
  {
    "text": "stuff through Haskell, rather than going the\nother way around. Right. So, I guess you could say bridging the gap\na little bit between beginner and what it",
    "start": "222940",
    "end": "233130"
  },
  {
    "text": "would take to maybe read those more complicated\nbooks, with more theoretical topics.",
    "start": "233130",
    "end": "239680"
  },
  {
    "text": "Right. I mean, that's something that Haskell's needed\nfor a long time.",
    "start": "239680",
    "end": "247270"
  },
  {
    "text": "It's often the major complaint, I think, from\npeople. So, it sounds like we've got some good material\nhere.",
    "start": "247270",
    "end": "254550"
  },
  {
    "text": "I'm really happy to see this if you can't\ntell.",
    "start": "254550",
    "end": "259949"
  },
  {
    "text": "Okay. That explains a lot about what you cover in\nthe book. Do you wanna explain a little bit about what\nyou cover more in-depth, and then we can talk",
    "start": "259949",
    "end": "268990"
  },
  {
    "text": "about more specific topics? Well, I guess a good starting place is actually\nwhere I think \"Effective Haskell\" differs",
    "start": "268990",
    "end": "277760"
  },
  {
    "text": "from some of the other materials. Not just books, but other, like, tutorials\nand materials that somebody might come across.",
    "start": "277760",
    "end": "287659"
  },
  {
    "text": "And one of those is, you know, I start people\noff very early learning about some specific,",
    "start": "287660",
    "end": "295680"
  },
  {
    "text": "like, extensions that GHC has added, and treating\nthose as a core part of the way we write Haskell.",
    "start": "295680",
    "end": "306680"
  },
  {
    "text": "And part of the motivation there is thinking\nabout somebody that's gonna pick up Haskell",
    "start": "306680",
    "end": "313680"
  },
  {
    "text": "in a real project. They may be going to start using Haskell at\nwork. They're going to run into a lot of things\nthat you might not come across if you're,",
    "start": "313680",
    "end": "323479"
  },
  {
    "text": "like, starting with, like, Haskell 98 or Haskell\n2010, right? But these are, like, a real part of what people\nneed to know if they're gonna be effective.",
    "start": "323479",
    "end": "333389"
  },
  {
    "text": "The other difference... Things like locally-scoped type variables,\nand bang patterns and that kind of thing.",
    "start": "333389",
    "end": "340070"
  },
  {
    "text": "Deriving via is the one that people are most\nsurprised that I introduced so early on.",
    "start": "340070",
    "end": "345100"
  },
  {
    "text": "And I would say I don't see that used incredibly\noften in the production Haskell that I've",
    "start": "345100",
    "end": "352150"
  },
  {
    "text": "worked in, but it's one of those newer things\nthat I think has high utility, and it does",
    "start": "352150",
    "end": "358770"
  },
  {
    "text": "come up. And it just fits so naturally if you're willing\nto sort of, like, accept the fact that we're",
    "start": "358770",
    "end": "364800"
  },
  {
    "text": "working in GHC's very specific dialect of\nHaskell, right? I noticed very early on that you also start\npeople on not using a build system, but rather",
    "start": "364800",
    "end": "376120"
  },
  {
    "start": "369000",
    "end": "777000"
  },
  {
    "text": "calling GHC itself to run programs. Could you talk a little bit more about that\nchoice?",
    "start": "376120",
    "end": "383690"
  },
  {
    "text": "There's both, like, a philosophical and a\npractical part of that.",
    "start": "383690",
    "end": "389630"
  },
  {
    "text": "The philosophical part of it is, I think that\npeople ought to understand what their tools",
    "start": "389630",
    "end": "397580"
  },
  {
    "text": "are doing, because tools are things that,\nlike, help us accomplish our goals, right?",
    "start": "397580",
    "end": "403110"
  },
  {
    "text": "But ultimately, like, no tool always solves\nall of our problems.",
    "start": "403110",
    "end": "408939"
  },
  {
    "text": "And understanding what's going on, I think,\nsets us up better to work through anything",
    "start": "408940",
    "end": "415030"
  },
  {
    "text": "that comes up, right? I'm just, like, really a fan of starting from\nthe bottom and going up.",
    "start": "415030",
    "end": "421340"
  },
  {
    "text": "More practically, though, I wanted to avoid\noverloading people with too much information.",
    "start": "421340",
    "end": "428639"
  },
  {
    "text": "Haskell has a reputation for being hard to\nlearn, and I think that a lot of that comes",
    "start": "428639",
    "end": "433750"
  },
  {
    "text": "not from any particular concept being too\nhard for people, but the rate at which they",
    "start": "433750",
    "end": "441470"
  },
  {
    "text": "come up, right? So, I was trying to be mindful that we're\ngonna, like, step through, and teach one or",
    "start": "441470",
    "end": "448080"
  },
  {
    "text": "two things at a time. And so, by the time that we do get to using\nCabal, and building larger projects, at least",
    "start": "448080",
    "end": "455710"
  },
  {
    "text": "the core language isn't so scary, and so it's\nnot such a big leap to add this one more thing.",
    "start": "455710",
    "end": "460860"
  },
  {
    "text": "That makes a lot of sense. I think it's often taken for granted that,\nyou know, whenever you get started writing",
    "start": "460860",
    "end": "470370"
  },
  {
    "text": "Haskell, you're kind of just thrown into the\nweeds with things like purity and referential",
    "start": "470370",
    "end": "475509"
  },
  {
    "text": "transparency and kind of expected to suss\nyour way through, it in a very principled",
    "start": "475509",
    "end": "482220"
  },
  {
    "text": "and almost academic sense. But, you know, it's often most people's first\ninteraction with those words, let alone those",
    "start": "482220",
    "end": "489740"
  },
  {
    "text": "concepts, let alone those experiences, because\nI think it's the only language that I've used",
    "start": "489740",
    "end": "497250"
  },
  {
    "text": "that's usable in industry, that uses these\nconcepts to any sort of effective degree.",
    "start": "497250",
    "end": "505340"
  },
  {
    "text": "So, that's a really good point. I'm glad you did that.",
    "start": "505340",
    "end": "512399"
  },
  {
    "text": "So, I guess that explains other choices in\nhere, like waiting so long to introduce things",
    "start": "512399",
    "end": "521190"
  },
  {
    "text": "like monads or MTL. I think that a really common challenge that\nI see people learning Haskell running into",
    "start": "521190",
    "end": "531399"
  },
  {
    "text": "is this, like, \"Trust me, this will make sense\nlater.\" We tend to do that, right?",
    "start": "531399",
    "end": "537800"
  },
  {
    "text": "Like, there's so many Haskell tutorials that\ntell people, like, okay, we're gonna use this",
    "start": "537800",
    "end": "544180"
  },
  {
    "text": "do notation here, and these, like, funny arrows. And don't worry about it, right? Like, you'll understand it later.",
    "start": "544180",
    "end": "551019"
  },
  {
    "text": "Just cargo cult it. And I feel like that makes people uncomfortable,\neven if they don't logically realize they're",
    "start": "551019",
    "end": "559810"
  },
  {
    "text": "uncomfortable, right? It makes it feel like you're standing in quicksand. And this kind of plays into another pathological\ncase that I see when people are learning,",
    "start": "559810",
    "end": "573250"
  },
  {
    "text": "really, anything in programming, but Haskell\nin particular, and that's, like, I'll pick",
    "start": "573250",
    "end": "580100"
  },
  {
    "text": "on monads, right? Like, one of two things happens when somebody\nfirst encounters monads.",
    "start": "580100",
    "end": "586769"
  },
  {
    "text": "Either they say, \"That's too complicated,\"\nand they, like, grab their ball and go home.",
    "start": "586770",
    "end": "592620"
  },
  {
    "text": "Or they say, \"This is the divine truth of\nhow programming should work. I'm going to use these for everything,\" right?",
    "start": "592620",
    "end": "599149"
  },
  {
    "text": "I'm like, neither of these is the right answer. Yeah, it's only the two camps.",
    "start": "599149",
    "end": "606010"
  },
  {
    "text": "Right. That's true. That's true. I wanted to help people build the intuition\nthat this is neither too complicated for you",
    "start": "606010",
    "end": "612990"
  },
  {
    "text": "to understand, nor is it, like, this thing\nthat you should be trying to use everywhere. It's, like, a tool, and it solves a particular\nproblem, and I'm gonna help you develop an",
    "start": "612990",
    "end": "623959"
  },
  {
    "text": "intuition for what that problem is so that\nyou can see the bounds around where this is",
    "start": "623960",
    "end": "630130"
  },
  {
    "text": "a helpful solution and where it isn't. That makes a lot of sense.",
    "start": "630130",
    "end": "637529"
  },
  {
    "text": "I think we're currently, benchmarking, at\nthis current day, we're entering into the",
    "start": "637529",
    "end": "643079"
  },
  {
    "text": "yearly discussion around monads again, in\nvarious social media circles, and going, is this worth it?",
    "start": "643079",
    "end": "649450"
  },
  {
    "text": "Is it worth the trouble? I think focusing on the problems is kind of\nthe answer, right?",
    "start": "649450",
    "end": "658829"
  },
  {
    "text": "It solves a lot of problems that you see in,\nlike, mathematics, as well as in programming, but in particular, mathematics, where it's\nvery difficult to cargo-cult the abstractions",
    "start": "658829",
    "end": "668579"
  },
  {
    "text": "before you understand the problems that they\nwere built to solve. And oftentimes, like, you know, as somebody\nwho got their start in math, I've had to go",
    "start": "668580",
    "end": "677370"
  },
  {
    "text": "back and read history, more than math, to\ntry and figure out exactly what I'm looking",
    "start": "677370",
    "end": "683680"
  },
  {
    "text": "at, if someone introduces a particular syntax\nor abstraction. And I think the same thing is probably true\nof Haskell, right?",
    "start": "683680",
    "end": "693509"
  },
  {
    "text": "You have to know what we're trying to solve. And my experience is true.",
    "start": "693509",
    "end": "699240"
  },
  {
    "text": "I don't think it's unique to Haskell, even\nif it has a particularly powerful manifestation",
    "start": "699240",
    "end": "705830"
  },
  {
    "text": "in Haskell, right? I think you see the same thing when somebody\nfirst learns about design patterns, and then",
    "start": "705830",
    "end": "712380"
  },
  {
    "text": "goes throughout their entire code base looking\nfor opportunities to write a singleton, right?",
    "start": "712380",
    "end": "717740"
  },
  {
    "text": "Sort of the same energy. It happened with free monads, I think, a while\nback, and then it happened with, what, effect",
    "start": "717740",
    "end": "724201"
  },
  {
    "text": "systems and everything. It cycles in two to three-year cycles.",
    "start": "724201",
    "end": "729950"
  },
  {
    "text": "So, it's been really interesting to watch.",
    "start": "729950",
    "end": "735490"
  },
  {
    "text": "It happens in other programming languages\ntoo, where people... I remember reading the giant, thick, 1200-page\nPerl book by, I think it was Conway, and they",
    "start": "735490",
    "end": "747380"
  },
  {
    "text": "introduced, you know, dollar and dollar-dollar,\nfor references and variables. And it was like, what is this?",
    "start": "747380",
    "end": "754820"
  },
  {
    "text": "I had no understanding of what the domain\nmodel is, like, what a reference is, until",
    "start": "754820",
    "end": "761459"
  },
  {
    "text": "later when they explained the rudiments between\nthe two. But then, you know, I've had to have this\nthing in my head for 10, 15 pages, while picking",
    "start": "761459",
    "end": "770560"
  },
  {
    "text": "out, you know, various facts about how to\nuse them. It is just overhead.",
    "start": "770560",
    "end": "777030"
  },
  {
    "start": "777000",
    "end": "1137000"
  },
  {
    "text": "But to that end, I noticed that you cover\nlaziness very early on.",
    "start": "777030",
    "end": "783190"
  },
  {
    "text": "Could you explain that approach?",
    "start": "783190",
    "end": "788450"
  },
  {
    "text": "I think there's, again, this, like, the duality\nbetween the practical needs of just teaching",
    "start": "788450",
    "end": "798260"
  },
  {
    "text": "people things that they need to know early\non, so that they're not left for too long",
    "start": "798260",
    "end": "804610"
  },
  {
    "text": "just with me saying, \"Trust me,\" right? And, you know, Haskell is a lazy language.",
    "start": "804610",
    "end": "812589"
  },
  {
    "text": "And I think that if you don't address that\nhead-on, people just really don't quite appreciate",
    "start": "812589",
    "end": "819220"
  },
  {
    "text": "how that changes the way that we think about\nwriting programs. And they run into, like, problems that are\nhard to diagnose if you're just not used to",
    "start": "819220",
    "end": "831800"
  },
  {
    "text": "a lazy language. It's surprising what things take people off\nguard, right?",
    "start": "831800",
    "end": "838280"
  },
  {
    "text": "Like, why did my program let me assign this\ninfinite list, but then it crashed when I",
    "start": "838280",
    "end": "843880"
  },
  {
    "text": "tried to, like, find the last element of it? And then, the other side of this is it also,\nI think, is a really good way of motivating",
    "start": "843880",
    "end": "851639"
  },
  {
    "text": "monads, for example, right? So, the canonical example of monads is I/O.\nAnd I'm sure somebody out there is gonna,",
    "start": "851640",
    "end": "863079"
  },
  {
    "text": "like, tell me that I'm wrong here, right? But if we roll with it...",
    "start": "863079",
    "end": "868510"
  },
  {
    "text": "Somebody. I know the person. I know exactly one. If we roll with it, right?",
    "start": "868510",
    "end": "874380"
  },
  {
    "text": "Like, a really good way of helping people\ncome to terms with, like, monadic I/O is to",
    "start": "874380",
    "end": "882920"
  },
  {
    "text": "go through this exercise of saying, like,\nokay, let's pretend that we don't have this, but we're working in a lazy language.",
    "start": "882920",
    "end": "889740"
  },
  {
    "text": "How else are we going to have a program that\nmakes any sense at all?",
    "start": "889740",
    "end": "897130"
  },
  {
    "text": "How are we gonna be able to read a file and\nthen write a file if we have no idea of ordering?",
    "start": "897130",
    "end": "903550"
  },
  {
    "text": "And so, I think that that was another really\nstrong motivator for introducing it early.",
    "start": "903550",
    "end": "908810"
  },
  {
    "text": "It's a good point. I mean, that's often one of the things that\nbeginners cite as sort of the most confusing.",
    "start": "908810",
    "end": "917630"
  },
  {
    "text": "Is there any way that you demystified the\nlaziness, to some degree, or in some way that",
    "start": "917630",
    "end": "924540"
  },
  {
    "text": "was different than previous tutorials, that\nsets it apart? I think that a big part of it is just being\nvery explicit, right?",
    "start": "924540",
    "end": "935130"
  },
  {
    "text": "There are these sections of the book where,\nmuch to the chagrin of anybody who's concerned",
    "start": "935130",
    "end": "944970"
  },
  {
    "text": "about page counts in their books, I dedicate\nquite a few pages to, like, manually unrolling",
    "start": "944970",
    "end": "954430"
  },
  {
    "text": "the way that evaluation happens in Haskell. And I think just showing people where there's\na thunk, and where a thunk becomes an expression,",
    "start": "954430",
    "end": "963000"
  },
  {
    "text": "and, like, where the next thunk is, helps\npeople develop an intuition, and realize that",
    "start": "963000",
    "end": "971050"
  },
  {
    "text": "it's, like, not that scary, in a lot of ways. I think it is very natural to the way that\nmost people think about running code, right?",
    "start": "971050",
    "end": "979890"
  },
  {
    "text": "Like, when we think about the way our programs\nevaluate, even in a strict language, right,",
    "start": "979890",
    "end": "985820"
  },
  {
    "text": "we tend to take the mental shortcut of saying,\nlike, \"Well, and then we call this function,\"",
    "start": "985820",
    "end": "991360"
  },
  {
    "text": "right? Which is kind of a thunk. And then we have to go through the, like,\nburden of actually unpacking that strictly,",
    "start": "991360",
    "end": "1000300"
  },
  {
    "text": "in a strict language. And so, helping people break out of that habit,\nand realize, like, actually the language is",
    "start": "1000300",
    "end": "1007329"
  },
  {
    "text": "letting you think about this in the way that\nI think is most natural for most people, and",
    "start": "1007329",
    "end": "1013589"
  },
  {
    "text": "calling it out, seems to have worked well. I have heard that a lot of people think lazy,\nbut they expect strictness, in a lot of ways.",
    "start": "1013589",
    "end": "1026650"
  },
  {
    "text": "There's an interesting debate that goes on\nabout whether or not laziness is worth it.",
    "start": "1026650",
    "end": "1033140"
  },
  {
    "text": "And I happen to be \"yes\" on that. But it's very interesting to see that, well,\na lot of people are, or a lot of books and",
    "start": "1033140",
    "end": "1041179"
  },
  {
    "text": "a lot of resources haven't gone into as much\ndepth, I think, as yours. The last one that I remember is maybe \"Parallel\nand Concurrent Haskell\" by Marlow, which was,",
    "start": "1041180",
    "end": "1051789"
  },
  {
    "text": "like, 2008. But he only really goes into, like, sprint\nin GHCi, and says, \"Okay, you know, here's",
    "start": "1051789",
    "end": "1060190"
  },
  {
    "text": "kind of how it works,\" but nothing nearly\nas explicit or as illuminating.",
    "start": "1060190",
    "end": "1065200"
  },
  {
    "text": "So, I was fairly happy to see that. I'll be honest, some of it's just, like, me\ngeeking out too, right?",
    "start": "1065200",
    "end": "1074870"
  },
  {
    "text": "I'm like, this is cool, and I just want people\nto appreciate it. You can tell.",
    "start": "1074870",
    "end": "1080300"
  },
  {
    "text": "For the diagrams, where you show where things\nare thunked, and the flow, is novel and unique.",
    "start": "1080300",
    "end": "1088350"
  },
  {
    "text": "I'm pretty stoked that somebody is explaining\nit like this. Because I shouldn't have to go and say, you\nknow, to somebody who wants to understand",
    "start": "1088350",
    "end": "1095950"
  },
  {
    "text": "laziness, \"Here, read,\" you know, \"'Purely\nFunctional Data Structures,' and also, 'Parallel and Concurrent Haskell,' and then read the\nWiki article on laziness.\"",
    "start": "1095950",
    "end": "1105500"
  },
  {
    "text": "It's good to have it in one place, is what\nI'm saying. If the people who read my book come out the\nother end of it and no longer think that the",
    "start": "1105500",
    "end": "1116500"
  },
  {
    "text": "first step to making an efficient program\nis to add strict data as an annotation in",
    "start": "1116500",
    "end": "1122340"
  },
  {
    "text": "all of their modules, then I think I've done\none of the things I set out to do. I think you got that in your book.",
    "start": "1122340",
    "end": "1129179"
  },
  {
    "text": "Thank you. So, at least we do that. I mean, that's a win right there, right?",
    "start": "1129180",
    "end": "1134860"
  },
  {
    "text": "Okay. Skipping ahead a little bit in the book, can\nyou speak more to why you focused on MTL as the main source of effects in your program\nstructures? Skipping ahead a little bit in the book, can\nyou speak more to why you focused on MTL as",
    "start": "1134860",
    "end": "1143049"
  },
  {
    "start": "1137000",
    "end": "1314000"
  },
  {
    "text": "the main source of effects in your program\nstructures?",
    "start": "1143049",
    "end": "1148210"
  },
  {
    "text": "RebeccaSkinner: All right. We can talk about theoretical benefits to\nother ways of representing effects in code,",
    "start": "1148210",
    "end": "1158880"
  },
  {
    "text": "but I think, in practice, if you go looking\nat any piece of Haskell code, especially in",
    "start": "1158880",
    "end": "1167450"
  },
  {
    "text": "my experience in the industry, but even open-source\napplications, right, it's just far and away",
    "start": "1167450",
    "end": "1174620"
  },
  {
    "text": "the majority case. And I think that somebody going into a codebase\nthat maybe is using effect system, or even,",
    "start": "1174620",
    "end": "1187790"
  },
  {
    "text": "like, isn't using a tagless final encoding,\nand is just using, like, straight-up transformers.",
    "start": "1187790",
    "end": "1193980"
  },
  {
    "text": "You're gonna go into that better prepared,\nI think, having gone through an MTL-style",
    "start": "1193980",
    "end": "1202360"
  },
  {
    "text": "experience, and, there isn't the page count\nto cover every way that we might do it.",
    "start": "1202360",
    "end": "1208679"
  },
  {
    "text": "So, I tried to just give people what I thought\nwas gonna prepare them best for the most code",
    "start": "1208679",
    "end": "1215220"
  },
  {
    "text": "that they would run into. I guess that's a good reason for a follow-up\nbook if you haven't already started.",
    "start": "1215220",
    "end": "1223600"
  },
  {
    "text": "I haven't. \"Effective Haskell 2.\" Be like what...",
    "start": "1223600",
    "end": "1229429"
  },
  {
    "text": "\"Effectiver Haskell.\" \"More Effective Haskell.\" Yeah.",
    "start": "1229429",
    "end": "1234630"
  },
  {
    "text": "All right, though. Well, we're about halfway through.",
    "start": "1234630",
    "end": "1241400"
  },
  {
    "text": "Do you want to talk about yourself? Sure. I think that I am less interesting than my\nbook, but I'll give a little bit of background.",
    "start": "1241400",
    "end": "1254340"
  },
  {
    "text": "So, you know, I live in St. Louis, which is\nonly interesting because we used to have the",
    "start": "1254340",
    "end": "1263980"
  },
  {
    "text": "Strange Loop conference. This was the last year for it. We had ICFP once.",
    "start": "1263980",
    "end": "1269870"
  },
  {
    "text": "So, that is, at least to someone like me,\nthe hallmark of the city.",
    "start": "1269870",
    "end": "1278040"
  },
  {
    "text": "That was the first ICFP I ever went to, by\nthe way, is that one.",
    "start": "1278040",
    "end": "1283830"
  },
  {
    "text": "Same. I've been using Haskell since 2008 or so,\nand I've been trying to be involved in the",
    "start": "1283830",
    "end": "1292519"
  },
  {
    "text": "Haskell community since maybe 2016. So, a very long period as one of those, like,\nmany silent people out there, just, like,",
    "start": "1292520",
    "end": "1302400"
  },
  {
    "text": "using Haskell, and not arguing about monads\nand effects systems on ",
    "start": "1302400",
    "end": "1314230"
  },
  {
    "start": "1314000",
    "end": "1929000"
  },
  {
    "text": "the internet. How long have you been programming, period?",
    "start": "1314230",
    "end": "1322919"
  },
  {
    "text": "All right. I mean, I started programming in, like, middle\nschool.",
    "start": "1322919",
    "end": "1330500"
  },
  {
    "text": "I got a graphing calculator that had, like,\nTI-BASIC. And I had no idea that I was programming.",
    "start": "1330500",
    "end": "1335800"
  },
  {
    "text": "I just realized I could cheat on my math homework\nby writing all the steps out, like, in the",
    "start": "1335800",
    "end": "1341140"
  },
  {
    "text": "calculator. And I took a programming class in my sophomore\nyear of high school.",
    "start": "1341140",
    "end": "1351250"
  },
  {
    "text": "I ended up taking AP programming my sophomore\nyear of high school, and, like, just couldn't",
    "start": "1351250",
    "end": "1359460"
  },
  {
    "text": "ever imagine wanting to do anything else. I thought, before that, I would be either\na fashion designer or an archeologist.",
    "start": "1359460",
    "end": "1369620"
  },
  {
    "text": "And, you know, I took one C++ class, and that\nwas the end of any other aspirations.",
    "start": "1369620",
    "end": "1377809"
  },
  {
    "text": "Oh, man. We could have had a designer Rebecca Skinner. I \nstarted my career writing C++, really working",
    "start": "1377810",
    "end": "1394929"
  },
  {
    "text": "in, you know, sort of, like, quasi-embedded\nsystems, and appliances, and got interested",
    "start": "1394929",
    "end": "1403809"
  },
  {
    "text": "in functional programming, yeah, around 2007,\n2008, and it just got out of hand from there.",
    "start": "1403809",
    "end": "1415380"
  },
  {
    "text": "One of the big topics that I was excited to\nsee in the book was the fact that you talk about micro-benchmarking and, sort of, memory\nlayouts, in various capacities, using things",
    "start": "1415380",
    "end": "1426210"
  },
  {
    "text": "like vectors, mutable vectors, and non-mutable\nvectors.",
    "start": "1426210",
    "end": "1431510"
  },
  {
    "text": "Can you talk more about that decision, and\nwhat you hope people take away?",
    "start": "1431510",
    "end": "1437970"
  },
  {
    "text": "I think that a big part of my motivation was\nhelping people internalize the fact that even",
    "start": "1437970",
    "end": "1448799"
  },
  {
    "text": "though we're dealing with a very high-level\nlanguage, right? That is unabashedly very far away from the\narchitecture of the machine that we're running",
    "start": "1448799",
    "end": "1460659"
  },
  {
    "text": "it on, that Haskell can be a very performant\nlanguage. It has a lot of flexibility to run well in\nscenarios where we need good memory characteristics,",
    "start": "1460660",
    "end": "1474570"
  },
  {
    "text": "we need good runtime characteristics. I think that, especially with people who jump\ninto Haskell and don't have a lot of experience",
    "start": "1474570",
    "end": "1482240"
  },
  {
    "text": "with, like, laziness, right, there's a lot\nof opportunity for space leaks, and people kind of look and say, like, oh, Haskell has,\nlike, terrible memory performance, or oh,",
    "start": "1482240",
    "end": "1491260"
  },
  {
    "text": "Haskell is slow. And I wanted to point out, like, look, if\nyou're running something that can run at,",
    "start": "1491260",
    "end": "1500559"
  },
  {
    "text": "say, the speed of, like, the JVM, you can\nprobably write something in Haskell that has",
    "start": "1500559",
    "end": "1508020"
  },
  {
    "text": "acceptable performance. And so, I wanted to highlight that, and I\nalso wanted to show people sort of a tour",
    "start": "1508020",
    "end": "1515720"
  },
  {
    "text": "of really common techniques that at least\nI use, that I go to first when I'm thinking",
    "start": "1515720",
    "end": "1521309"
  },
  {
    "text": "about optimizing. The other thing I wanted to do was I wanted\nto show that not every optimization is about",
    "start": "1521310",
    "end": "1528990"
  },
  {
    "text": "removing the things that Haskell does well. So, if somebody's going through the optimization\nchapter, what they're gonna see is, actually,",
    "start": "1528990",
    "end": "1539730"
  },
  {
    "text": "like, by far, the biggest performance benefit\nthat we get is, like, using more laziness,",
    "start": "1539730",
    "end": "1545570"
  },
  {
    "text": "right? We're, like, using laziness to memorize things. And then, you know, as we begin incrementally\ndoing more and more micro-optimizations, we",
    "start": "1545570",
    "end": "1555690"
  },
  {
    "text": "see where the sort of, like, high-level, very\nabstract Haskell plays nicely with the lower-level",
    "start": "1555690",
    "end": "1563148"
  },
  {
    "text": "concerns, you know. I wanted to show off ST because I wanted to\nshow how, you know, the types, and the type",
    "start": "1563149",
    "end": "1572380"
  },
  {
    "text": "system, actually gives us concrete benefits\nto performance, right?",
    "start": "1572380",
    "end": "1578470"
  },
  {
    "text": "And I think that's interesting, because people,\nlike, for myself, right, coming from a C and",
    "start": "1578470",
    "end": "1583690"
  },
  {
    "text": "C ++ background, you know, I wouldn't have\nthought about the ways that leveraging the",
    "start": "1583690",
    "end": "1589019"
  },
  {
    "text": "type system would let us do optimizations\nthat we couldn't otherwise do. And then, some of it's just for fun.",
    "start": "1589020",
    "end": "1595659"
  },
  {
    "text": "Types can get us a lot of the way there, in\nterms of establishing the invariants we need",
    "start": "1595659",
    "end": "1600870"
  },
  {
    "text": "to execute certain kinds of loops, with certain\nkinds of guarantees that, yeah, a lot of the",
    "start": "1600870",
    "end": "1609881"
  },
  {
    "text": "times we take for assumption, in, like, C-style\nprograms, or in C++, or Java.",
    "start": "1609881",
    "end": "1617700"
  },
  {
    "text": "I have noticed this in my coding lately as\nwell, where, you know, I'm more structured",
    "start": "1617700",
    "end": "1624658"
  },
  {
    "text": "when I can apply certain optimizations, as\nopposed to really using the type system to nail down a domain, you know, as closely as\npossible.",
    "start": "1624659",
    "end": "1633120"
  },
  {
    "text": "What I'm looking for is, like, oh, man, where\ncan I, you know, get away with not error-checking in a loop, for example?",
    "start": "1633120",
    "end": "1640000"
  },
  {
    "text": "Yeah. So, I guess there's a little bit of, like,\nthere's a power-to-weight kind of ratio that",
    "start": "1640000",
    "end": "1647020"
  },
  {
    "text": "you wanna think about, with types and stuff. And I think the benchmarking chapter kind\nof illustrates it well, where, you know, we",
    "start": "1647020",
    "end": "1653600"
  },
  {
    "text": "don't always have to drop down into mutable\nvectors to talk about the most performant thing in the world.",
    "start": "1653600",
    "end": "1658980"
  },
  {
    "text": "Sometimes we can just do the right thing with\nvectors, and let the compiler do the rest",
    "start": "1658980",
    "end": "1664390"
  },
  {
    "text": "of the work.. Right. And sometimes we import the nasty, unsafe\nparts of the libraries that we really shouldn't",
    "start": "1664390",
    "end": "1672400"
  },
  {
    "text": "be looking at. Every time I've used things like, you know,\nunsafeAccursedUnutterable IO, or, I'm sorry,",
    "start": "1672400",
    "end": "1682250"
  },
  {
    "text": "accursedUnutterable IO, I've always come back,\nlike, within a year, and been like, \"Do I",
    "start": "1682250",
    "end": "1688620"
  },
  {
    "text": "need this? Did I need this?\" It's fun to play with, but, like, I probably\ndon't need to be that unsafe, right?",
    "start": "1688620",
    "end": "1695929"
  },
  {
    "text": "It's been very interesting. One of my favorite little Easter eggs is,\nthat I wrote an entire chapter, and finished",
    "start": "1695929",
    "end": "1703990"
  },
  {
    "text": "a complete chapter on unsafePerformIO for\nthe book, which I ended up having to cut because",
    "start": "1703990",
    "end": "1709669"
  },
  {
    "text": "the book was just too long. I didn't feel like handing people that particular\nvery pointy object if I had to pull something",
    "start": "1709669",
    "end": "1719260"
  },
  {
    "text": "out. So... That's probably fair. However, please post it. I would love to read it.",
    "start": "1719260",
    "end": "1726150"
  },
  {
    "text": "I do plan on making it available online as\nsoon as I find some time to clean it up.",
    "start": "1726150",
    "end": "1732840"
  },
  {
    "text": "Because I found that it was a really good\nopportunity to talk about, like, let lifting,",
    "start": "1732840",
    "end": "1738480"
  },
  {
    "text": "and the way that the compiler, you know, reorders\nthings, and why unsafe is safe, but only if",
    "start": "1738480",
    "end": "1745900"
  },
  {
    "text": "you understand exactly how your program is\ngonna be transformed. So... I suppose you really have to track your reads\nand your writes at that point, and just hope",
    "start": "1745900",
    "end": "1754929"
  },
  {
    "text": "you understand. That's the big question, is, like, I hope\nI understand my program model well enough",
    "start": "1754929",
    "end": "1762268"
  },
  {
    "text": "that it's not gonna cause, like, heap corruption.",
    "start": "1762269",
    "end": "1767330"
  },
  {
    "text": "All right. So, at the end of the book, you know, we spend\nall this time in benchmark, lower-level memory",
    "start": "1767330",
    "end": "1777380"
  },
  {
    "text": "layout land, and we talk about concrete projects,\nand then we talk about, you know, various",
    "start": "1777380",
    "end": "1783370"
  },
  {
    "text": "abstractions you can apply.  But there is also a type-level programming\nchapter.",
    "start": "1783370",
    "end": "1790169"
  },
  {
    "text": "Do you wanna talk more about why that was\nincluded, and what that gets us? Yeah. I think this is, to some extent, the most\nsurprising chapter for a lot of people, especially",
    "start": "1790169",
    "end": "1799261"
  },
  {
    "text": "people who have been using Haskell in industry,\nbecause I find that people frequently say,",
    "start": "1799261",
    "end": "1804289"
  },
  {
    "text": "like, \"Well, do you ever really use that in\nproduction?\" And I think this chapter is me really talking\nto people who have been using Haskell for",
    "start": "1804289",
    "end": "1816360"
  },
  {
    "text": "a while, maybe the people that might be using\nthe book to teach Haskell to, say, like, new",
    "start": "1816360",
    "end": "1822510"
  },
  {
    "text": "hires on their team, and persuade them that\nthere is a space for this, and there's a space",
    "start": "1822510",
    "end": "1827919"
  },
  {
    "text": "for these techniques that fit in well with\na very pragmatic style of writing code.",
    "start": "1827919",
    "end": "1834929"
  },
  {
    "text": "I think that there is a real advantage to\nHaskell in the way that it gives us such a",
    "start": "1834930",
    "end": "1841019"
  },
  {
    "text": "broad spectrum of the ways that we wanna interact\nwith the abstractions that we can build, right?",
    "start": "1841019",
    "end": "1846090"
  },
  {
    "text": "We can write, like, the Haskell '98 style,\nlike, very straightforward functional code.",
    "start": "1846090",
    "end": "1853880"
  },
  {
    "text": "We can write code that uses, like, mutable\nvectors and unboxed types, and see with different",
    "start": "1853880",
    "end": "1862330"
  },
  {
    "text": "syntax almost, right? And then we also can write type-level code\nthat fits in, I think, well with these other",
    "start": "1862330",
    "end": "1872409"
  },
  {
    "text": "types of abstractions. And so, you know, this goes back to thinking\na lot about the way that we can use the type",
    "start": "1872409",
    "end": "1882010"
  },
  {
    "text": "system to enforce invariants, and then have\nthe implementation of those invariants be",
    "start": "1882010",
    "end": "1889110"
  },
  {
    "text": "somewhere on that spectrum, of very performant\nto, like, very easy to work with. And so, I think that type-level programming,\nthe way I think of it is, you know, we're",
    "start": "1889110",
    "end": "1899360"
  },
  {
    "text": "writing an application whose user is the programmer\nthat is working with our code, and we're just",
    "start": "1899360",
    "end": "1906809"
  },
  {
    "text": "giving them a toolbox to work with these other\nmore concrete abstractions more easily.",
    "start": "1906809",
    "end": "1913270"
  },
  {
    "text": "That's a good way of talking about it. I suppose a lot of the time, we talk about\nwriting for users, but in a sense, other programmers",
    "start": "1913270",
    "end": "1923590"
  },
  {
    "text": "can be users of our code. It's good to keep in mind. Do you have any other bits of wisdom for people\nwho want to dabble in the type level, or dabble",
    "start": "1923590",
    "end": "1933789"
  },
  {
    "start": "1929000",
    "end": "2577000"
  },
  {
    "text": "in the lower level, that you'd like to talk\nabout? Honestly, in both cases, right, the real answer\nis, like, just do it.",
    "start": "1933789",
    "end": "1943760"
  },
  {
    "text": "Go have fun. Fail. Benchmark it. You can learn a lot from doing, you know? Nobody gets good at writing type-level code\nwithout writing some horrendous type-level",
    "start": "1943760",
    "end": "1955220"
  },
  {
    "text": "code. Nobody gets good at writing low-level high-performance\ncode without, like, a runtime error here and",
    "start": "1955220",
    "end": "1964200"
  },
  {
    "text": "there, without a seg fault, right?  Yeah, definitely been there.",
    "start": "1964200",
    "end": "1969789"
  },
  {
    "text": "Make space for yourself to fail, and that's\nwhere the learning happens. Having fun with it is a good one.",
    "start": "1969789",
    "end": "1980000"
  },
  {
    "text": "I think, you know, while we're here in the\ninterview, one of the things that has helped",
    "start": "1980000",
    "end": "1987840"
  },
  {
    "text": "me lately, in the past, you know, two years,\nhas been a library called eventlog2html, which",
    "start": "1987840",
    "end": "1999261"
  },
  {
    "text": "has allowed me to, like, do data visualizations\non various, like, heap profiles, for when",
    "start": "1999261",
    "end": "2006269"
  },
  {
    "text": "I'm benchmarking stuff. And you can do it with, like, really small\nexecutables, and you can gain so much knowledge",
    "start": "2006269",
    "end": "2012500"
  },
  {
    "text": "so quickly about what your program is doing. Especially just going through the GHC options,\nand be like, oh, I should toggle, like, -hy",
    "start": "2012500",
    "end": "2021919"
  },
  {
    "text": "instead of, like, you know, like, just -l\nand -au or something. It's really fun.",
    "start": "2021919",
    "end": "2027240"
  },
  {
    "text": "Yeah. Reading the manual is surprisingly effective,\nright?",
    "start": "2027240",
    "end": "2032540"
  },
  {
    "text": "Like, you know people should still read \"Effective\nHaskell,\" but you can get pretty far just",
    "start": "2032540",
    "end": "2039809"
  },
  {
    "text": "reading the manual. I mean, you're not gonna understand the thunks,\nyou know as you get in \"Effective Haskell\"",
    "start": "2039809",
    "end": "2047809"
  },
  {
    "text": "I think one of the patterns that you see in\nthe book, a lot, is this pattern of walking",
    "start": "2047809",
    "end": "2057750"
  },
  {
    "text": "through something and letting it fail, and\nsaying, like, \"Oh, this went wrong,\" right?",
    "start": "2057750",
    "end": "2063020"
  },
  {
    "text": "\"We tried to do this, and it didn't work. Why did that happen? Let's take a step back, think about what's\ngoing on, and then try to figure out how we",
    "start": "2063020",
    "end": "2072919"
  },
  {
    "text": "can prevent that.\" And I hope that somebody coming away from\nthe book, like, really retains that approach",
    "start": "2072919",
    "end": "2082848"
  },
  {
    "text": "to writing code, and does get that sense of\ncuriosity, that says, like, \"Oh, I'm gonna",
    "start": "2082849",
    "end": "2088070"
  },
  {
    "text": "go look for ways that I can understand what\nwent wrong,\" and, rather than being discouraged,",
    "start": "2088070",
    "end": "2093148"
  },
  {
    "text": "look at this as an opportunity to figure out,\nlike, what they can do next, and how they",
    "start": "2093149",
    "end": "2098440"
  },
  {
    "text": "can build better. I love that. We're very denotational in Haskell.",
    "start": "2098440",
    "end": "2103970"
  },
  {
    "text": "We're like, specify first and then write the\nthing, and if it's not done the first time,",
    "start": "2103970",
    "end": "2109660"
  },
  {
    "text": "that you didn't specify it well enough. But that's kind of counterintuitive, and kind\nof antithetical to the whole ethos of programming,",
    "start": "2109660",
    "end": "2116740"
  },
  {
    "text": "as far as I understand it, which is, that\nthere are tools for a reason.",
    "start": "2116740",
    "end": "2123359"
  },
  {
    "text": "You wanna have fun with it. If you wanna try stuff, make the rocks think.",
    "start": "2123359",
    "end": "2129660"
  },
  {
    "text": "Right. Okay. So, now that you've finished up with the book,\nwhat else are you doing?",
    "start": "2129660",
    "end": "2138069"
  },
  {
    "text": "Well, there's the whole second part of, now\nI've written a book, I have to finish writing",
    "start": "2138070",
    "end": "2144510"
  },
  {
    "text": "up solutions for all of the exercises. I'm just about ready to publish, by the time\nthis video is up, most of those should be",
    "start": "2144510",
    "end": "2152930"
  },
  {
    "text": "available at the time that we're doing this\ninterview. I have the first seven chapters' worth of\nsolutions available.",
    "start": "2152930",
    "end": "2159599"
  },
  {
    "text": "There's, you know, errata, and no matter how\nmuch you try to not leave out words and use",
    "start": "2159599",
    "end": "2167970"
  },
  {
    "text": "bad grammar in the book, the gremlins will\nget in there and make some of it appear. ",
    "start": "2167970",
    "end": "2177220"
  },
  {
    "text": "After that, I have quite a few projects that\nI've just really had on the back burner, and",
    "start": "2177220",
    "end": "2187930"
  },
  {
    "text": "I don't know exactly which one I'm gonna pick\nup, but I'm really into this idea now of writing",
    "start": "2187930",
    "end": "2196550"
  },
  {
    "text": "a game in Haskell, that teaches people how\nto program. So, no promises, but I'm hoping I'll make\nsome time for that.",
    "start": "2196550",
    "end": "2205400"
  },
  {
    "text": "I've not seen a game in Haskell before. I'll be interested to look out for that, see\nhow you do it.",
    "start": "2205400",
    "end": "2211940"
  },
  {
    "text": "There's a pretty small but active community\nof people that are writing games in Haskell,",
    "start": "2211940",
    "end": "2218690"
  },
  {
    "text": "so... Interesting. What kind of games? Like, three-dimensional? Like, 2D, like, roguelike type things?",
    "start": "2218690",
    "end": "2225328"
  },
  {
    "text": "A lot of, like, 2D and roguelike. Those seem to be popular, right?",
    "start": "2225329",
    "end": "2230400"
  },
  {
    "text": "They're easy for, like, the one person to\ndo. I think you have a lot of people like me who\nhave much grander ideas than they have the",
    "start": "2230400",
    "end": "2240120"
  },
  {
    "text": "time or capacity to make, like, all of the\nart and assets that go into a game.",
    "start": "2240120",
    "end": "2246690"
  },
  {
    "text": "So... Well, shoot, like, an RPG maker written in\nHaskell, would be pretty cool. And probably not the worst-size project in\nthe world.",
    "start": "2246690",
    "end": "2256690"
  },
  {
    "text": "We'll see if this ever takes off, but I wanna\nwrite a Metroidvania, and you get, instead",
    "start": "2256690",
    "end": "2263520"
  },
  {
    "text": "of, like, a suit or gun upgrades, you get\nlittle fragments of a programming language,",
    "start": "2263520",
    "end": "2270300"
  },
  {
    "text": "and you use that to augment your abilities,\nusing the things that you've picked up.",
    "start": "2270300",
    "end": "2275710"
  },
  {
    "text": "So... New extensions and functions and stuff. Exactly. Like extended preludes.",
    "start": "2275710",
    "end": "2280829"
  },
  {
    "text": "Yes. That's a pretty cool idea. It'd be fun to teach.  What are your favorite libraries?",
    "start": "2280829",
    "end": "2286380"
  },
  {
    "text": "I'm gonna throw out, like, a hot take here,\nright? I'm gonna say prelude, or base, right?",
    "start": "2286380",
    "end": "2294030"
  },
  {
    "text": "And everybody's like, \"Oh, no. We should be using, like, this alternative...\" How dare you.",
    "start": "2294030",
    "end": "2299779"
  },
  {
    "text": "We should be using these, like, alternative\npreludes, and, like, based as partial functions.",
    "start": "2299780",
    "end": "2308250"
  },
  {
    "text": "It's terrible. Like, you should feel bad about yourself. I think, yeah, base doesn't have as many batteries\nbuilt in as some of the other languages that",
    "start": "2308250",
    "end": "2321950"
  },
  {
    "text": "you might use. But I feel like it's a really good balance\nbetween giving you some good abstractions",
    "start": "2321950",
    "end": "2333040"
  },
  {
    "text": "and also being, like, eh, sometimes, like,\npartial head, you know what? Like, it's fine.",
    "start": "2333040",
    "end": "2338670"
  },
  {
    "text": "I trust you. I feel like it has this sense of practicality,\nthat sometimes people need to be reminded",
    "start": "2338670",
    "end": "2349539"
  },
  {
    "text": "of. I suppose, in the discussions, there's a lot\nof talk about perhaps, like, a strawman beginner",
    "start": "2349540",
    "end": "2359500"
  },
  {
    "text": "who might shoot themselves in the foot with\nthings like head. That has never really like rung as true for\nme, because usually, I like that.",
    "start": "2359500",
    "end": "2367369"
  },
  {
    "text": "Like, if I'm ever calling head on an empty\nlist, I messed up. Like, I need to figure out where that bug\nis, and I probably don't have the correct",
    "start": "2367369",
    "end": "2376220"
  },
  {
    "text": "code there, and I probably wanna fix that. It's a very, like, training-wheels, incurious\nway to think about beginners.",
    "start": "2376220",
    "end": "2389290"
  },
  {
    "text": "I don't know. Maybe, like, some people are just fundamentally\na little bit, you know, built differently,",
    "start": "2389290",
    "end": "2396050"
  },
  {
    "text": "but, like, when I was a beginner, I liked\nit when my programs failed, and maybe that's",
    "start": "2396050",
    "end": "2401381"
  },
  {
    "text": "just the masochist in me. Like, you know, I got started with Perl, where\neverything was failing all the time until",
    "start": "2401381",
    "end": "2407109"
  },
  {
    "text": "it didn't. It was nice. Like, it was a good hunt, like, a good thing\nto do in your spare time.",
    "start": "2407109",
    "end": "2414799"
  },
  {
    "text": "Like, \"Oh, man, how do I get this program\nto work? It's not working.\" And I think that, as a beginner, you expect\nthings to go wrong, right?",
    "start": "2414800",
    "end": "2424310"
  },
  {
    "text": "You know that you're learning, and you know\nthat things are gonna fail sometimes, but you also wanna see success.",
    "start": "2424310",
    "end": "2430680"
  },
  {
    "text": "And I think that having you have to deal with\nwrapping and unwrapping non-empty lists, or,",
    "start": "2430680",
    "end": "2437010"
  },
  {
    "text": "like, looking into a, maybe every time you\ntake the head of a list, right, like, maybe,",
    "start": "2437010",
    "end": "2442420"
  },
  {
    "text": "in a real production environment, you'd want\nthat. But I think it just, like, drags down.",
    "start": "2442420",
    "end": "2448260"
  },
  {
    "text": "It's, like, burdensome for people that just\nwant to, like, get in there, get some code",
    "start": "2448260",
    "end": "2454369"
  },
  {
    "text": "out, learn, have fun. And that's really... You know, for me, a lot of Haskell is about\nhaving fun, right?",
    "start": "2454369",
    "end": "2461460"
  },
  {
    "text": "Like, I love the language. I have fun with it. I still just really enjoy all of the time\nthat I get to spend writing code in Haskell.",
    "start": "2461460",
    "end": "2471280"
  },
  {
    "text": "And, you know, I wanna bring that to other\npeople, and I think that, honestly, the design",
    "start": "2471280",
    "end": "2476860"
  },
  {
    "text": "of, like, base and prelude strikes a good\nbalance there for people that just wanna, like, get in there and have fun and start\nwriting some code.",
    "start": "2476860",
    "end": "2486339"
  },
  {
    "text": "That's fair. That's a beginner take I tend to agree with,\nthen. I eagerly await the many people yelling at\nme that I'm, like, completely wrong and unfit",
    "start": "2486339",
    "end": "2495200"
  },
  {
    "text": "to ever, like, teach anyone Haskell here. But you wrote a book.",
    "start": "2495200",
    "end": "2500290"
  },
  {
    "text": "You could just point to your book. Like, where's your book?",
    "start": "2500290",
    "end": "2507420"
  },
  {
    "text": "Yes. Although some of them have written books,\nso you'll have to be prepared.",
    "start": "2507420",
    "end": "2514160"
  },
  {
    "text": "Yeah. No, I like that hacker mindset. That's kind of what I would call that.",
    "start": "2514160",
    "end": "2519849"
  },
  {
    "text": "It's like poking things to see what breaks,\nand then adapting accordingly. Like, you know, as a former beginner, if I\nused head a lot, and I don't use head anymore,",
    "start": "2519849",
    "end": "2534250"
  },
  {
    "text": "because I've learned that it's not a good\nthing to use.",
    "start": "2534250",
    "end": "2539309"
  },
  {
    "text": "But I had to learn that somehow, right? I still do. Not in, like, code that I care if it fails,\nbut there are plenty of times that I'm like,",
    "start": "2539309",
    "end": "2547609"
  },
  {
    "text": "you know what? I just, like, I need this thing. And if it crashes, like, I don't care. The only person I'm hurting is, like, myself\nfor the next 10 minutes before I never pick",
    "start": "2547609",
    "end": "2557088"
  },
  {
    "text": "this thing up again. And that's fine. My barometer for maturity in my programs is\nnow I just pattern-match more often because",
    "start": "2557089",
    "end": "2566730"
  },
  {
    "text": "I can fit a comment in there about what it's\nsupposed to be doing.",
    "start": "2566730",
    "end": "2572319"
  },
  {
    "text": "That's a little bit nicer than... I don't know. That's just personal preference. But yeah, I think we're at the time.",
    "start": "2572319",
    "end": "2582020"
  },
  {
    "start": "2577000",
    "end": "2628000"
  },
  {
    "text": "It was great talking to you, Rebecca, and\ncongratulations on your book again.",
    "start": "2582020",
    "end": "2589079"
  },
  {
    "text": "And it was wonderful talking with you for\nthe past hour.",
    "start": "2589079",
    "end": "2609470"
  },
  {
    "text": "Thanks so much.",
    "start": "2609470",
    "end": "2617530"
  },
  {
    "text": "I had fun.",
    "start": "2617530",
    "end": "2625599"
  }
]