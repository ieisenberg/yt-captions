[
  {
    "start": "0",
    "end": "43000"
  },
  {
    "text": "[Music]",
    "start": "940",
    "end": "7780"
  },
  {
    "text": "okay let's go uh so yeah I'm Alina I work as a developer advocate for grow VM at Oracle labs and Oracle Labs is this",
    "start": "13080",
    "end": "19680"
  },
  {
    "text": "very cool r d unit at Oracle we are doing a lot of research so many of our project has been research projects for",
    "start": "19680",
    "end": "25260"
  },
  {
    "text": "many years like raw VM and we do research in areas like programming programming languages compilers VMS all",
    "start": "25260",
    "end": "33300"
  },
  {
    "text": "kinds of things and in this session I want to talk about job applications in the cloud and how you can make them more",
    "start": "33300",
    "end": "39239"
  },
  {
    "text": "efficient with brow VM uh let's go uh so first thing I want to",
    "start": "39239",
    "end": "44520"
  },
  {
    "start": "43000",
    "end": "222000"
  },
  {
    "text": "give you a brief overview of what grow IVM is because it's a huge project and there is so much in it that sometimes",
    "start": "44520",
    "end": "49980"
  },
  {
    "text": "gets confusing to figure out when you should use it and for what so one thing is that grow VM is a jdk",
    "start": "49980",
    "end": "57420"
  },
  {
    "text": "implementation on its own underneath it's using the hotspot VM the the same",
    "start": "57420",
    "end": "62460"
  },
  {
    "text": "kind that you will find for example in open jdk and we are just replacing the top tier compiler so as open GDK has C2",
    "start": "62460",
    "end": "69840"
  },
  {
    "text": "as a top tier optimizing compiler we have our own grow VM compiler that is coming out of this research that we've",
    "start": "69840",
    "end": "75479"
  },
  {
    "text": "done at Oracle labs and in this scenario if you want to migrate to grow VM migration is very easy because it's a",
    "start": "75479",
    "end": "81900"
  },
  {
    "text": "jdk so all of your libraries and tools and IDs and everything everything just works and what you can get in this mode",
    "start": "81900",
    "end": "88020"
  },
  {
    "text": "is more performance potentially coming from this new compiler uh so that is one big part of the",
    "start": "88020",
    "end": "94140"
  },
  {
    "text": "project and another big part is this native image ahead of time compilation of java in that will be something I will",
    "start": "94140",
    "end": "100619"
  },
  {
    "text": "talk about today in this session specifically and that is when we take a job application and fully compile it",
    "start": "100619",
    "end": "106439"
  },
  {
    "text": "ahead of time into a native executable that can start and runtime very fast because it no longer requires jvm to run",
    "start": "106439",
    "end": "113159"
  },
  {
    "text": "so it's a fully natively compiled native executable and last but not least for all VM is",
    "start": "113159",
    "end": "119640"
  },
  {
    "text": "also a polyglot VM so we have a language implementation framework called truffle that allows us more easily implement",
    "start": "119640",
    "end": "126780"
  },
  {
    "text": "more languages on the jvm in a way that we as a team or for example you as a",
    "start": "126780",
    "end": "131879"
  },
  {
    "text": "community member can just write your interpreter for your own language in Java and run it on Raw VM and then at",
    "start": "131879",
    "end": "138599"
  },
  {
    "text": "runtime it will optimize it and give it high performance but that's the way we as a team and other community implements",
    "start": "138599",
    "end": "145020"
  },
  {
    "text": "more languages on Raw VM and at the moment you can use languages such as JavaScript python Ruby R Etc onload them",
    "start": "145020",
    "end": "152400"
  },
  {
    "text": "as well and not only you can use one of those languages but you can also extend your application with other languages so",
    "start": "152400",
    "end": "158580"
  },
  {
    "text": "it can also run programs that are compiled that are using more than one language at the same time",
    "start": "158580",
    "end": "164760"
  },
  {
    "text": "uh Statin overview and now let's focus on Java so what is interesting and grow VM specifically for Java is the",
    "start": "164760",
    "end": "170640"
  },
  {
    "text": "following one thing as I mentioned it's a full-blown jdk so you can just run applications on Raw VM as you would on",
    "start": "170640",
    "end": "177000"
  },
  {
    "text": "any other jdk but more interesting part is this native ahead of time compilation of java programs because since we are",
    "start": "177000",
    "end": "184019"
  },
  {
    "text": "optimizing and compiling your application at build time rather than at runtime they are way faster and consumed",
    "start": "184019",
    "end": "190680"
  },
  {
    "text": "by fewer resources because there is no code to optimize and compile at runtime",
    "start": "190680",
    "end": "197099"
  },
  {
    "text": "and because of that this native image ahead of time compilation is a great deployment platform specifically for the",
    "start": "197099",
    "end": "202800"
  },
  {
    "text": "cloud because in the cloud you want to start fast so you can deploy faster and scale faster but also you want to use",
    "start": "202800",
    "end": "209340"
  },
  {
    "text": "less resources and specifically less memory because that's a big part of your Cloud build so if you can deploy this",
    "start": "209340",
    "end": "216060"
  },
  {
    "text": "application using last memory that will be much more preferred by to deploy them to the cloud",
    "start": "216060",
    "end": "222780"
  },
  {
    "start": "222000",
    "end": "250000"
  },
  {
    "text": "and because of all those reasons all the major Java micro service Frameworks already adopted raw VM and 90 image",
    "start": "222780",
    "end": "228780"
  },
  {
    "text": "specifically as a deployment platform so if you are starting a new app and you are using any of those Frameworks they",
    "start": "228780",
    "end": "234540"
  },
  {
    "text": "will give you tools and ways to style out of the box and fairly easy write your application for grow VM",
    "start": "234540",
    "end": "241680"
  },
  {
    "text": "okay so let's talk about some specific things you need to know about gravian to start building your applications this",
    "start": "241680",
    "end": "247200"
  },
  {
    "text": "way and also what are the benefits that grow VM gives you comparing to deploying your application on the jvm",
    "start": "247200",
    "end": "253980"
  },
  {
    "start": "250000",
    "end": "306000"
  },
  {
    "text": "so one thing you want to have is uh start start the application fast because that's a bad experience for your users",
    "start": "253980",
    "end": "260760"
  },
  {
    "text": "but also again it allows you to deploy and scale applications faster if the same app can start significantly faster",
    "start": "260760",
    "end": "268320"
  },
  {
    "text": "now also if you can reduce resources usage and we are talking about CPU and memory here that will be also preferable",
    "start": "268320",
    "end": "274259"
  },
  {
    "text": "because you would be using less resources at runtime and another interesting aspect and this",
    "start": "274259",
    "end": "280080"
  },
  {
    "text": "is not Cloud specific but applies to the cloud as well native image as a deployment model also offers some",
    "start": "280080",
    "end": "286080"
  },
  {
    "text": "additional benefits around security and we will take a look at it in a in a bit more along the presentation",
    "start": "286080",
    "end": "292979"
  },
  {
    "text": "and the last thing is that it also gives you a way to package your application in a very small efficient container images",
    "start": "292979",
    "end": "299280"
  },
  {
    "text": "so again so you can deploy them faster and scale faster as well so let's talk about each of those",
    "start": "299280",
    "end": "306000"
  },
  {
    "start": "306000",
    "end": "424000"
  },
  {
    "text": "aspects and let's first talk about how it's impossible to take something so Dynamic and sophisticated as a job",
    "start": "306000",
    "end": "312660"
  },
  {
    "text": "application and fully compile it ahead of time so it can be available at runtime",
    "start": "312660",
    "end": "318600"
  },
  {
    "text": "so if I grow VM and Native image does this compilation as the following when you run the native image command and",
    "start": "318600",
    "end": "325199"
  },
  {
    "text": "give it your application and as an input it takes your application in bytecode form what it will do it will look up at",
    "start": "325199",
    "end": "331199"
  },
  {
    "text": "the application at runtime and it will start starting from the main entry point it will look for all the reachable code",
    "start": "331199",
    "end": "336720"
  },
  {
    "text": "so it will try to find all the code that is actually needed for your application to perform at runtime whatever is the",
    "start": "336720",
    "end": "342660"
  },
  {
    "text": "work that is supposed to perform and find all the dial reachable code and then eliminate everything else",
    "start": "342660",
    "end": "348360"
  },
  {
    "text": "so everything else the application is not using will be will be eliminated and this applies to your the code that you",
    "start": "348360",
    "end": "354960"
  },
  {
    "text": "actually wrote but also the dependencies I even the jdk classes so in this final produce native executable only the code",
    "start": "354960",
    "end": "361860"
  },
  {
    "text": "that is actually needed at runtime only that code will be included and that's the error time compilation",
    "start": "361860",
    "end": "367979"
  },
  {
    "text": "part of the story but there is another big part of this native image compilation and that is hip showing so",
    "start": "367979",
    "end": "373560"
  },
  {
    "text": "what I'm going to think we will do during this build process is we will take a snapshot of your HEAP so that you",
    "start": "373560",
    "end": "379500"
  },
  {
    "text": "can start with Preparatory hip at runtime faster because all this work doesn't have to be done at runtime",
    "start": "379500",
    "end": "384960"
  },
  {
    "text": "anymore and that is the main idea behind nature image so we are kind of splitting the",
    "start": "384960",
    "end": "390660"
  },
  {
    "text": "work that you are doing into a delivery application into build time and run them more explicitly and the idea here is to",
    "start": "390660",
    "end": "397020"
  },
  {
    "text": "move all those expensive higher lifting operations from runtime to build time so you can do them once at build time and",
    "start": "397020",
    "end": "404340"
  },
  {
    "text": "don't need to pay this kind of overhead work when you actually run an application because more applications",
    "start": "404340",
    "end": "410039"
  },
  {
    "text": "are most applications are started way more often than they are built so it makes sense to build the application",
    "start": "410039",
    "end": "415919"
  },
  {
    "text": "once spend time on those computational efforts at build time so you can start",
    "start": "415919",
    "end": "421259"
  },
  {
    "text": "much faster when you actually need to run your app and if you're comparing running on the jvm versus running in this native image",
    "start": "421259",
    "end": "428580"
  },
  {
    "start": "424000",
    "end": "528000"
  },
  {
    "text": "ahead of time compilation mode the comparison in terms of startup times will be the following",
    "start": "428580",
    "end": "434520"
  },
  {
    "text": "so when you're first starting your application on the jvm what needs to happen is the following the jvm needs to",
    "start": "434520",
    "end": "440400"
  },
  {
    "text": "load your classes look at them figure out what your application does start interpreting start collecting profile",
    "start": "440400",
    "end": "446880"
  },
  {
    "text": "information and what happens at this uh period of time is that some methods will",
    "start": "446880",
    "end": "452460"
  },
  {
    "text": "be compiled dynamically at runtime but some methods that are not executed that often so they are below this threshold",
    "start": "452460",
    "end": "459240"
  },
  {
    "text": "might still be executed in interpreter and interpreted is much much slower than",
    "start": "459240",
    "end": "464940"
  },
  {
    "text": "compiled and maybe it wouldn't have a big runtime impact because those masses are executed less often but if there are",
    "start": "464940",
    "end": "471599"
  },
  {
    "text": "many of them this can add up and have a runtime impact in terms of performance",
    "start": "471599",
    "end": "477120"
  },
  {
    "text": "but this is all happening dynamically via interpreting collecting profile information compiling and then at some",
    "start": "477120",
    "end": "484020"
  },
  {
    "text": "point your application warms up and all of this work is done it can finally run with the best optimized Peak Performance",
    "start": "484020",
    "end": "491460"
  },
  {
    "text": "and this is the reason why sometimes especially if you have a larger application you can notice that those",
    "start": "491460",
    "end": "496500"
  },
  {
    "text": "called startup times when you start your application for the very first time can take significant time",
    "start": "496500",
    "end": "502620"
  },
  {
    "text": "now if you're compiling executing on the native image so in the ahead of time compiled mode what what needs to happen",
    "start": "502620",
    "end": "509280"
  },
  {
    "text": "in terms of startup time since we already analyzed optimized and compiled application at build time what happens",
    "start": "509280",
    "end": "516060"
  },
  {
    "text": "at runtime is the following you need to load the executable and since all that code is already compiled it can",
    "start": "516060",
    "end": "522240"
  },
  {
    "text": "immediately start executing in these natively compiled mode with good Peak Performance",
    "start": "522240",
    "end": "528360"
  },
  {
    "start": "528000",
    "end": "534000"
  },
  {
    "text": "so this is startup time but let's also talk about resources usage so similarly",
    "start": "528360",
    "end": "534000"
  },
  {
    "start": "534000",
    "end": "596000"
  },
  {
    "text": "to the way we spend some time in this jet mode to start your application the",
    "start": "534000",
    "end": "539040"
  },
  {
    "text": "same applies also to resources usage because you span all those operations we also need memory for all of them and we",
    "start": "539040",
    "end": "545160"
  },
  {
    "text": "need to keep around memory for your application itself but also for all this kind of code execution infrastructure",
    "start": "545160",
    "end": "550920"
  },
  {
    "text": "that is executed in your code dynamically at runtime while on the native image mode so ahead",
    "start": "550920",
    "end": "557820"
  },
  {
    "text": "of time compile application you need memory only for this slim runtime implementation that native executables",
    "start": "557820",
    "end": "564480"
  },
  {
    "text": "contain within themselves add your application payload but you don't need to keep around memory for all that code",
    "start": "564480",
    "end": "570180"
  },
  {
    "text": "execution infrastructure because there is no Dynamic code compilation happening at runtime",
    "start": "570180",
    "end": "576300"
  },
  {
    "text": "and this becomes even more minimum even more meaningful if you want to scale the application so as you scale you would",
    "start": "576300",
    "end": "582300"
  },
  {
    "text": "need to add memory for all those things on if you are scaling on jvm by adding more instances while in the 90 image",
    "start": "582300",
    "end": "588779"
  },
  {
    "text": "mode when you're scaling you only need to add more memory for the actual application payload",
    "start": "588779",
    "end": "594300"
  },
  {
    "text": "and to say this a bit further on the more kind of readable example here we are scaling at quercus application uh",
    "start": "594300",
    "end": "601560"
  },
  {
    "start": "596000",
    "end": "630000"
  },
  {
    "text": "the yellow bars that is running on a open GDK and the red ones that is in",
    "start": "601560",
    "end": "606899"
  },
  {
    "text": "this native image mode and as we are scaling you can see already on the jvm as we are adding more instances we need",
    "start": "606899",
    "end": "613320"
  },
  {
    "text": "to add significantly more memory because each of them will need to use all this memory to actually run and execute your",
    "start": "613320",
    "end": "618600"
  },
  {
    "text": "code while in the Neti image mode uh you see that memory grows a bit over time",
    "start": "618600",
    "end": "623760"
  },
  {
    "text": "but it's uncomparable because it's way more efficient at utilizing your memory",
    "start": "623760",
    "end": "629880"
  },
  {
    "text": "okay I think that's enough of talking uh let's look at some demos and first you will talk about startup",
    "start": "629880",
    "end": "637200"
  },
  {
    "start": "630000",
    "end": "1266000"
  },
  {
    "text": "and memory usage so let me let me just get to the right place here",
    "start": "637200",
    "end": "644899"
  },
  {
    "text": "okay so this is the first demo I want to show you and here is my app let me just move this",
    "start": "648480",
    "end": "655680"
  },
  {
    "text": "down so as you can see this is a micronut app for the in this demo but it could be any of the Frameworks I",
    "start": "655680",
    "end": "661140"
  },
  {
    "text": "mentioned above or even just the sample Vanilla Java application uh so this is",
    "start": "661140",
    "end": "666540"
  },
  {
    "text": "my application and here is my controller and what it does it exposes this endpoint hello and I will now run a",
    "start": "666540",
    "end": "674220"
  },
  {
    "text": "bunch of tests again this app to show you how it works on both the gvm and in the native image mode",
    "start": "674220",
    "end": "680899"
  },
  {
    "text": "so let's do this and let me clear this",
    "start": "680899",
    "end": "688320"
  },
  {
    "text": "so let's run on the jvm first",
    "start": "688320",
    "end": "692180"
  },
  {
    "text": "okay this runs and you can see here that the startup times that the framework",
    "start": "695519",
    "end": "700560"
  },
  {
    "text": "reported to me so this is coming from the framework uh startup time here is 500 milliseconds and then if we go to",
    "start": "700560",
    "end": "708060"
  },
  {
    "text": "the browser and we check on our app and the end point is hello",
    "start": "708060",
    "end": "714240"
  },
  {
    "text": "here is our message so let's kill this and let's compare",
    "start": "714240",
    "end": "720120"
  },
  {
    "text": "this with the native image mode and let me just confirm that this is indeed now down",
    "start": "720120",
    "end": "725880"
  },
  {
    "text": "this is not loading anymore and let me go ahead and let me run this in the native image mode and let me also",
    "start": "725880",
    "end": "732959"
  },
  {
    "text": "show you how this native what this native executable looks like so it's here in Target and this is my",
    "start": "732959",
    "end": "740339"
  },
  {
    "text": "app uh it's called Simple rest here and the size uh it's not that small it's 81",
    "start": "740339",
    "end": "746700"
  },
  {
    "text": "megabytes but it's uh my app fully ready to go with all the dependencies and",
    "start": "746700",
    "end": "751860"
  },
  {
    "text": "everything included in it and also if I wanted to optimize the file size itself there are some optimizations that I",
    "start": "751860",
    "end": "758100"
  },
  {
    "text": "could apply so I could use something like upx and since this is NH executable I could compress it even further but",
    "start": "758100",
    "end": "764519"
  },
  {
    "text": "here I'm not concerned about the application size so for me this is sufficient so let's run this native app",
    "start": "764519",
    "end": "772160"
  },
  {
    "text": "and now it started in 22 milliseconds so I would say this is roughly 25 x faster",
    "start": "774360",
    "end": "782760"
  },
  {
    "text": "and if I go to the browser and update this so it's doing the same thing so it's the",
    "start": "782760",
    "end": "788579"
  },
  {
    "text": "same app it's just being executed in those two different modes but those are the numbers that are coming from the",
    "start": "788579",
    "end": "794519"
  },
  {
    "text": "framework and maybe I want to and also there could be different opinions on what is startup and how it should be",
    "start": "794519",
    "end": "799680"
  },
  {
    "text": "measured so maybe I want to measure it myself from the kind of operating system kind of level and also in a framework",
    "start": "799680",
    "end": "806220"
  },
  {
    "text": "neutral kind of way I just want to have my own number so that I can believe them and also maybe I want to measure not",
    "start": "806220",
    "end": "812399"
  },
  {
    "text": "just starting the app because it's not very meaningful to Me Maybe I want to measure how long it takes to start the app and serve the first request so do",
    "start": "812399",
    "end": "819779"
  },
  {
    "text": "some meaningful job and for that I will do the following uh here I have my start script that will",
    "start": "819779",
    "end": "827519"
  },
  {
    "text": "start my app and it will wait for the first request and then it will print those performance numbers for me",
    "start": "827519",
    "end": "834839"
  },
  {
    "text": "uh so let's do this and another thing that I will do there is I will use this switch between the scripts so I can just",
    "start": "834839",
    "end": "841560"
  },
  {
    "text": "switch easily between the jvm and Native image modes so let's go to our app and let me start",
    "start": "841560",
    "end": "849540"
  },
  {
    "text": "it again on the jvm so it started and it also printed out",
    "start": "849540",
    "end": "855959"
  },
  {
    "text": "those performance numbers for me and I'm interested in startup and the actual",
    "start": "855959",
    "end": "861120"
  },
  {
    "text": "time elapsed here again this is on a jvm is 1.17 milliseconds",
    "start": "861120",
    "end": "867240"
  },
  {
    "text": "so let's do the same experiment in the native image mode so start the app and measure how long it took to start",
    "start": "867240",
    "end": "873720"
  },
  {
    "text": "so it was 1.17 before and now it's",
    "start": "873720",
    "end": "879019"
  },
  {
    "text": "0.08 so again if you're even looking from the outside trying to be as objective as possible it is still much",
    "start": "879019",
    "end": "886199"
  },
  {
    "text": "faster but let's just startup app and maybe I have a longer running application so",
    "start": "886199",
    "end": "891600"
  },
  {
    "text": "maybe I care about startup less but maybe I do care about those resources my application is using add runtime so for",
    "start": "891600",
    "end": "898380"
  },
  {
    "text": "that let's look at our app again and what we will do is the following I will start our app and we will send a",
    "start": "898380",
    "end": "906180"
  },
  {
    "text": "couple of requests over time and it will also use the tool called PS record to look at my process and output this",
    "start": "906180",
    "end": "912720"
  },
  {
    "text": "information about CPU and memory usage of my application so let's do this and let's do this on",
    "start": "912720",
    "end": "920519"
  },
  {
    "text": "the jvm again first so this is starting and now it's sending",
    "start": "920519",
    "end": "926399"
  },
  {
    "text": "couple more requests so we can look at our application and how it behaves over time",
    "start": "926399",
    "end": "932600"
  },
  {
    "text": "okay now it's done and I just have this new file created over here and this is",
    "start": "935220",
    "end": "940380"
  },
  {
    "text": "my application over time so let me Zoom this in and let me show what's Happening",
    "start": "940380",
    "end": "945420"
  },
  {
    "text": "Here uh so the blue horizontal line on this chart that is memory usage by my",
    "start": "945420",
    "end": "950699"
  },
  {
    "text": "process and you can see that it's I would say about 200 megabytes but it was",
    "start": "950699",
    "end": "956100"
  },
  {
    "text": "a bit more in the beginning and the radical line sorry that is CPU usage and",
    "start": "956100",
    "end": "962880"
  },
  {
    "text": "what's interesting here is what is happening until the first I would say one second you can see that both CPU",
    "start": "962880",
    "end": "969540"
  },
  {
    "text": "utilization is quite high and memory usage is quite high and that is because we are starting our app on the jvm and",
    "start": "969540",
    "end": "975600"
  },
  {
    "text": "that is this called start kind of period where it's doing a lot of work that we've seen before around loading other",
    "start": "975600",
    "end": "982440"
  },
  {
    "text": "classes interpreting compiling profiling Etc so it's quite busy but that it evens",
    "start": "982440",
    "end": "988139"
  },
  {
    "text": "out over time but in the beginning it's quite busy so let's see the same but for native",
    "start": "988139",
    "end": "996920"
  },
  {
    "text": "so the same now we are sending some load and in the end we will get a similar chart that we will compare with this one",
    "start": "998279",
    "end": "1006819"
  },
  {
    "text": "okay it's done and this is my second chart so as you can see this is looking quite different a few things to notice",
    "start": "1008600",
    "end": "1015079"
  },
  {
    "text": "here is that the overall memory usage is lower here around 100 megabytes but also",
    "start": "1015079",
    "end": "1020779"
  },
  {
    "text": "CPU is not so busy in the beginning anymore because there isn't that much work to do in the beginning and it's",
    "start": "1020779",
    "end": "1026240"
  },
  {
    "text": "only busy once in a while when those requests arrive and need to be served but then when there is no work to do",
    "start": "1026240",
    "end": "1031938"
  },
  {
    "text": "this application is quite efficient because when being idle it's not using resources when there are no requests to",
    "start": "1031939",
    "end": "1038780"
  },
  {
    "text": "be served but we all know and love jvm for Peak Performance and how it optimizes our",
    "start": "1038780",
    "end": "1044959"
  },
  {
    "text": "application for the best possible Peak Performance having that profile information available and adopted on the",
    "start": "1044959",
    "end": "1050720"
  },
  {
    "text": "go to what our application does so what about the performance uh let's look at that as well",
    "start": "1050720",
    "end": "1058480"
  },
  {
    "text": "so let me clear this and let me send some load to my app and",
    "start": "1059539",
    "end": "1065240"
  },
  {
    "text": "I will show you what it does in a second so what happens here is where is my load",
    "start": "1065240",
    "end": "1072260"
  },
  {
    "text": "script what happens here I will use a tool called Hey to send one million",
    "start": "1072260",
    "end": "1077419"
  },
  {
    "text": "requests to my application to see how well it handles Peak load",
    "start": "1077419",
    "end": "1082940"
  },
  {
    "text": "uh and it printed out this nice quite extensive performance report for me we",
    "start": "1082940",
    "end": "1088100"
  },
  {
    "text": "could be looking at latency but for me always the most interesting thing to look at is pixel report numbers so here",
    "start": "1088100",
    "end": "1093919"
  },
  {
    "text": "what I'm getting in terms of fixed throughput is 108 uh thousand requests per second",
    "start": "1093919",
    "end": "1101960"
  },
  {
    "text": "so now uh let's run the same in the native image mode and let's see how our",
    "start": "1101960",
    "end": "1107360"
  },
  {
    "text": "native application can take the same load so one million requests who thinks this will be slower",
    "start": "1107360",
    "end": "1116019"
  },
  {
    "text": "okay who thinks this will be faster typically people say that you know a",
    "start": "1117200",
    "end": "1122600"
  },
  {
    "text": "hard time compilation there is no way on Earth it can be faster that Dynamic compilation at runtime but let's compare",
    "start": "1122600",
    "end": "1130460"
  },
  {
    "text": "so what happened here we have 109 000 requests per second so slightly",
    "start": "1130460",
    "end": "1137000"
  },
  {
    "text": "faster but I would say in General on par and I'm excited this is with all the",
    "start": "1137000",
    "end": "1142039"
  },
  {
    "text": "possible probably optimizations but the point I wanted to make here is that it's possible to in addition to Startup",
    "start": "1142039",
    "end": "1148520"
  },
  {
    "text": "resources usage Etc it's also possible to have an on-parm grade big performance",
    "start": "1148520",
    "end": "1153679"
  },
  {
    "text": "in the native image mode as you would normally have on the jvm uh that's one conclusion I wanted to",
    "start": "1153679",
    "end": "1159440"
  },
  {
    "text": "make here but also uh what about resources usage and maybe the app that I'm working on doesn't need to serve",
    "start": "1159440",
    "end": "1165799"
  },
  {
    "text": "huge big lot or maybe it's even my pad project some hobby project that I'm doing on my weekends and I want to",
    "start": "1165799",
    "end": "1172160"
  },
  {
    "text": "deploy on a machine that is as cheap as possible and make it use as level resources as possible so it might be",
    "start": "1172160",
    "end": "1178880"
  },
  {
    "text": "over big performance what I want to prioritize is low resources usage and I don't care about that much about Peak",
    "start": "1178880",
    "end": "1185059"
  },
  {
    "text": "Performance so for that I will run this app again and I will do the following",
    "start": "1185059",
    "end": "1193059"
  },
  {
    "text": "so that will be my native constraint profile this looks good and now what it",
    "start": "1193100",
    "end": "1200179"
  },
  {
    "text": "does it will run the same application only in this time verse 32 megabytes of memory and previously uh we were giving",
    "start": "1200179",
    "end": "1207260"
  },
  {
    "text": "the app in both native and jvm modes uh let me move this down previously we were",
    "start": "1207260",
    "end": "1213860"
  },
  {
    "text": "given that 256 megabytes so now this is 8x less memory",
    "start": "1213860",
    "end": "1220280"
  },
  {
    "text": "okay so it seems like this is complete uh we got all our responses they were all successful and if we look at big",
    "start": "1220280",
    "end": "1227539"
  },
  {
    "text": "throughput it got a little bit lower but if I want to prioritize resources usage I think this is good enough uh so the",
    "start": "1227539",
    "end": "1235100"
  },
  {
    "text": "point that I'm making here is that uh as many things in life and in software engineering this is a bit of a trade-off",
    "start": "1235100",
    "end": "1241220"
  },
  {
    "text": "so maybe I want to optimize for Pixel report and I have a way to do that but also maybe I want to optimize for",
    "start": "1241220",
    "end": "1246500"
  },
  {
    "text": "resources usage and reducing that and there is also a way to go for me because again we don't need that many resources",
    "start": "1246500",
    "end": "1252500"
  },
  {
    "text": "at runtime because everything is compiled ahead of time at build time",
    "start": "1252500",
    "end": "1257780"
  },
  {
    "text": "so you can choose depending on what your priorities are and what you want to accomplish for your app and your project",
    "start": "1257780",
    "end": "1264620"
  },
  {
    "text": "okay and let's talk about one more topic and this is the part that I like a lot about Native image because it's quite",
    "start": "1264620",
    "end": "1269720"
  },
  {
    "start": "1266000",
    "end": "1277000"
  },
  {
    "text": "famous for startup times and memory usage but there is another interesting aspect to it and that is security",
    "start": "1269720",
    "end": "1277120"
  },
  {
    "start": "1277000",
    "end": "1409000"
  },
  {
    "text": "so 90 image as a deployment model offers you some additional Security benefits and they're coming from The Following",
    "start": "1277220",
    "end": "1284179"
  },
  {
    "text": "one since there is no Dynamic code execution and runtime there is no new",
    "start": "1284179",
    "end": "1290000"
  },
  {
    "text": "unknown code that can be loaded at runtime so everything needs to be known in advance at build time because the way",
    "start": "1290000",
    "end": "1296539"
  },
  {
    "text": "the compound those applications ahead of time is under closed World assumption",
    "start": "1296539",
    "end": "1301760"
  },
  {
    "text": "so I recent artists to know about the application needs to be known at build time and no new code can be loaded",
    "start": "1301760",
    "end": "1308720"
  },
  {
    "text": "anymore when you actually run your application and this can be seen as a limitation because again you need to figure out",
    "start": "1308720",
    "end": "1314840"
  },
  {
    "text": "everything application does and provide this information to Native image when you actually build your application but",
    "start": "1314840",
    "end": "1321799"
  },
  {
    "text": "I see I think it also can be seen as a security benefit because uh nothing",
    "start": "1321799",
    "end": "1327220"
  },
  {
    "text": "unseen can be happening at runtime now also only the code that is reachable",
    "start": "1327220",
    "end": "1334220"
  },
  {
    "text": "so that native image saw and kind of confirmed that it's reachable from the main entry point only that code can be",
    "start": "1334220",
    "end": "1341000"
  },
  {
    "text": "included in your application so if you are using a lot of dependencies and maybe you're not so sure about some of",
    "start": "1341000",
    "end": "1346340"
  },
  {
    "text": "them uh the parts of those dependencies that you are not actually uses you're using will not be included in this final",
    "start": "1346340",
    "end": "1353360"
  },
  {
    "text": "produced NATO executable and some things such as for example reflection serialization those more",
    "start": "1353360",
    "end": "1359780"
  },
  {
    "text": "Dynamic Java features uh those can be can be configured to work with Native image but they require an explicit allow",
    "start": "1359780",
    "end": "1366980"
  },
  {
    "text": "list from your site because again close role assumptions so all those things need to be configured and provided a",
    "start": "1366980",
    "end": "1373159"
  },
  {
    "text": "native image at build time and you have more control over those features and also this is an additional security",
    "start": "1373159",
    "end": "1378500"
  },
  {
    "text": "level because uh you are telling specifically what to use and have to donate image as you're building your",
    "start": "1378500",
    "end": "1385220"
  },
  {
    "text": "application and last but not least some attack factors and especially those around",
    "start": "1385220",
    "end": "1390500"
  },
  {
    "text": "Justin Time called compilation are just impossible in Native image because because there is no just in time code",
    "start": "1390500",
    "end": "1396320"
  },
  {
    "text": "compilation anymore it's all dynamic dynamic sorry compiled ahead of time at",
    "start": "1396320",
    "end": "1401419"
  },
  {
    "text": "build time so there is no just in time called compilation and all those attack vectors are simply impossible with",
    "start": "1401419",
    "end": "1406760"
  },
  {
    "text": "Native image and for that let me show you another demo",
    "start": "1406760",
    "end": "1413320"
  },
  {
    "start": "1409000",
    "end": "1706000"
  },
  {
    "text": "and this one is called very suitably unsafe demo so don't repeat this at home",
    "start": "1413539",
    "end": "1421419"
  },
  {
    "text": "okay here it is and I want to apologize for my voice I think I'm getting Source Rod but I think you'll manage to the end",
    "start": "1422480",
    "end": "1429860"
  },
  {
    "text": "of the presentation uh so here is my unsafe demo and this is again a micro node",
    "start": "1429860",
    "end": "1437419"
  },
  {
    "text": "application that will be uh serving a web server for us and what we want to do here is we want to serve the static",
    "start": "1437419",
    "end": "1444440"
  },
  {
    "text": "content from the static folder and basically we want to start this uh hello",
    "start": "1444440",
    "end": "1449600"
  },
  {
    "text": "HTML file so let's run this app",
    "start": "1449600",
    "end": "1454840"
  },
  {
    "text": "again we will start with the name is digit mode so it's starting and it's running on",
    "start": "1455840",
    "end": "1462679"
  },
  {
    "text": "8080 so let's go ahead and see if we can access our file so this is on static and the file is",
    "start": "1462679",
    "end": "1470000"
  },
  {
    "text": "hello HTML okay so this seems to be working but let's imagine maybe somebody else a",
    "start": "1470000",
    "end": "1478220"
  },
  {
    "text": "new developer joins our team and they decide to implement this logic in the following way so instead of serving this",
    "start": "1478220",
    "end": "1485020"
  },
  {
    "text": "static content dynamically statically from the static folder they want to",
    "start": "1485020",
    "end": "1490280"
  },
  {
    "text": "implement this as a get endpoint and then retrieve the file by the name does",
    "start": "1490280",
    "end": "1495740"
  },
  {
    "text": "anyone see any problem with this code over here",
    "start": "1495740",
    "end": "1500559"
  },
  {
    "text": "those of you who know please don't say it okay but maybe other people see some",
    "start": "1501380",
    "end": "1506600"
  },
  {
    "text": "issues this as well okay let us see how this works",
    "start": "1506600",
    "end": "1513679"
  },
  {
    "text": "so now it's the get endpoint and it adds this static URL part to it and we are",
    "start": "1513679",
    "end": "1520820"
  },
  {
    "text": "retrieving our file by name so let's see how this works the end point is get and then we need to",
    "start": "1520820",
    "end": "1527600"
  },
  {
    "text": "pass the file name so this seems to be working it's all fine and let me switch the curl so I can make",
    "start": "1527600",
    "end": "1534500"
  },
  {
    "text": "this a bit more visible hopefully so now when we curl this end point",
    "start": "1534500",
    "end": "1543399"
  },
  {
    "text": "it also seems to be working file right we are getting our hello HTML file this is auto great and of course we want to",
    "start": "1543559",
    "end": "1549559"
  },
  {
    "text": "test it our implementation works correctly and let's curl some nonsense",
    "start": "1549559",
    "end": "1555320"
  },
  {
    "text": "okay this doesn't give us anything amazing let's shape this code but this also offers some additional",
    "start": "1555320",
    "end": "1563120"
  },
  {
    "text": "interesting opportunities so imagine I'm doing the following so here I can do",
    "start": "1563120",
    "end": "1569179"
  },
  {
    "text": "let's say let's go one level up and let's do application yaml",
    "start": "1569179",
    "end": "1576020"
  },
  {
    "text": "a okay and do I have my double quotes yes suddenly my application yaml file is",
    "start": "1576020",
    "end": "1583100"
  },
  {
    "text": "exposed of course this is not value production grade kind of code and maybe I should",
    "start": "1583100",
    "end": "1588620"
  },
  {
    "text": "have and probably I should have have user input sanitized and had some additional checks in place but you know",
    "start": "1588620",
    "end": "1593960"
  },
  {
    "text": "we all know that it might be easy to make a mistake like that so sadly my application yaml file is exposed and it",
    "start": "1593960",
    "end": "1600020"
  },
  {
    "text": "doesn't stop there so what I can do if I you know try the hard enough or maybe spend some time here I could also do",
    "start": "1600020",
    "end": "1606380"
  },
  {
    "text": "example uh what is the package name Micronaut",
    "start": "1606380",
    "end": "1613220"
  },
  {
    "text": "and let's imagine I know this would be a hello controller",
    "start": "1613220",
    "end": "1618740"
  },
  {
    "text": "dot class and I'm not going to print it out here but this would have given me the class",
    "start": "1618740",
    "end": "1625940"
  },
  {
    "text": "file itself as well luckily we also have this app compiled",
    "start": "1625940",
    "end": "1631279"
  },
  {
    "text": "to Native so uh it's over here again in Target",
    "start": "1631279",
    "end": "1636340"
  },
  {
    "text": "this is my natively compiled version of it and let's see how that app behaves",
    "start": "1636340",
    "end": "1642080"
  },
  {
    "text": "so target market not guide it started it's on let's go here see if",
    "start": "1642080",
    "end": "1649159"
  },
  {
    "text": "we can get our uh hello HTML okay it's all there and if we get it from our get and point",
    "start": "1649159",
    "end": "1657740"
  },
  {
    "text": "it's also there so let's see if we can expose those vulnerabilities about our app so let's",
    "start": "1657740",
    "end": "1664100"
  },
  {
    "text": "go back here and if we try to get this application yaml file",
    "start": "1664100",
    "end": "1669500"
  },
  {
    "text": "it doesn't give us anything and if you try and try to get this hello",
    "start": "1669500",
    "end": "1674539"
  },
  {
    "text": "controller class out of it again it doesn't give us anything because data is",
    "start": "1674539",
    "end": "1679640"
  },
  {
    "text": "no longer application yaml and controller class it's all nominatively compiled and those people trying to",
    "start": "1679640",
    "end": "1686240"
  },
  {
    "text": "access resources of our app will have much harder time if possible at all trying to get those resources because",
    "start": "1686240",
    "end": "1692600"
  },
  {
    "text": "it's all natively compiled and everything that it's not there is eliminated now so this is an interesting additional",
    "start": "1692600",
    "end": "1698779"
  },
  {
    "text": "security level that 90 image gives you as a deployment platform comparing to execute it on the jvm",
    "start": "1698779",
    "end": "1706760"
  },
  {
    "start": "1706000",
    "end": "1736000"
  },
  {
    "text": "and just one quick example of how this is being used by some companies and teams this is actually coming from uh",
    "start": "1706760",
    "end": "1712760"
  },
  {
    "text": "Oracle itself so we have our fellow team at Oracle customer experience industry",
    "start": "1712760",
    "end": "1717919"
  },
  {
    "text": "framework and they said that yes we are using an AC image because we like startup time we like how small our container images got but also they said",
    "start": "1717919",
    "end": "1725360"
  },
  {
    "text": "they appreciate the security angle because they care about security a lot and they can see how this native ahead",
    "start": "1725360",
    "end": "1731000"
  },
  {
    "text": "of time compilation is beneficial for their security as well and let's talk also about compact",
    "start": "1731000",
    "end": "1737539"
  },
  {
    "start": "1736000",
    "end": "1741000"
  },
  {
    "text": "Packaging so what Native image produces as we got as we saw in the demos as well uh what",
    "start": "1737539",
    "end": "1743659"
  },
  {
    "start": "1741000",
    "end": "1781000"
  },
  {
    "text": "they get in the end is this final compiled native executable version of our application and that that also",
    "start": "1743659",
    "end": "1749900"
  },
  {
    "text": "includes all the jvm runtime and jdk classes code that we might need for our application as well",
    "start": "1749900",
    "end": "1756020"
  },
  {
    "text": "and all the unreachable codes all the things that were not proven to be actually used in your application all of",
    "start": "1756020",
    "end": "1761240"
  },
  {
    "text": "that will be eliminated and in a way again this can be seen as a disadvantage because with normal Java",
    "start": "1761240",
    "end": "1767299"
  },
  {
    "text": "deployments you could share this runtime installation but again this also means that maybe if you need to patch and",
    "start": "1767299",
    "end": "1773779"
  },
  {
    "text": "update those applications then can be patched and update uh individually as a",
    "start": "1773779",
    "end": "1778940"
  },
  {
    "text": "native executables as well and if you're talking about building containerized applications specifically",
    "start": "1778940",
    "end": "1785720"
  },
  {
    "start": "1781000",
    "end": "1827000"
  },
  {
    "text": "for the cloud uh here is how low you can go with your application container size",
    "start": "1785720",
    "end": "1790820"
  },
  {
    "text": "and the red bars here this is running still on the jvm and then the green ones that is running on roll of the M native",
    "start": "1790820",
    "end": "1797179"
  },
  {
    "text": "image and uh we are trying to make it as small as possible and squeeze it to the bare minimum and you can see how in the",
    "start": "1797179",
    "end": "1804380"
  },
  {
    "text": "end we get to something like six megabytes of our image size that is a fully working fully functional minimal",
    "start": "1804380",
    "end": "1810919"
  },
  {
    "text": "but still job application and that is naturally compiled ahead of time fully static but also compressed to make the",
    "start": "1810919",
    "end": "1818179"
  },
  {
    "text": "image size as small as possible so I want to if you want to optimize for this packaging size that native image",
    "start": "1818179",
    "end": "1824360"
  },
  {
    "text": "probably is the way to go for you okay so what's the catch I don't want",
    "start": "1824360",
    "end": "1829940"
  },
  {
    "start": "1827000",
    "end": "1840000"
  },
  {
    "text": "the session to sound like a sales pitch and just talk about benefits so I want to talk with you a bit about limitations",
    "start": "1829940",
    "end": "1835279"
  },
  {
    "text": "or other things to be aware of as well so one thing is grow VM and reflection",
    "start": "1835279",
    "end": "1841640"
  },
  {
    "start": "1840000",
    "end": "2066000"
  },
  {
    "text": "did anyone here that growl DM doesn't support reflection",
    "start": "1841640",
    "end": "1846860"
  },
  {
    "text": "quite a few people still we have a way to go to you know destroy all those myths so grow VM does support reflection",
    "start": "1846860",
    "end": "1853940"
  },
  {
    "text": "but uh the very supports deflection is the following so as we said 90 image",
    "start": "1853940",
    "end": "1860659"
  },
  {
    "text": "composite application ahead of time on the closed World assumption so all those Dynamic features of java pose a bit of a",
    "start": "1860659",
    "end": "1866659"
  },
  {
    "text": "challenge because runtime hasn't happened yet so there is no way for 90 image to know in advance what will",
    "start": "1866659",
    "end": "1873380"
  },
  {
    "text": "happen at runtime and configure those Dynamic features but there are ways to",
    "start": "1873380",
    "end": "1878899"
  },
  {
    "text": "approach this so one thing is that some of more kind of predictable obvious",
    "start": "1878899",
    "end": "1884120"
  },
  {
    "text": "reflection calls 90 image will figure out out of the box without configuration because it has support for all those",
    "start": "1884120",
    "end": "1890720"
  },
  {
    "text": "basic kind of predictable reflection calls now for things that are a bit more",
    "start": "1890720",
    "end": "1896059"
  },
  {
    "text": "advanced and a bit harder for 90 image to figure out automatically you would need to provide configuration and that",
    "start": "1896059",
    "end": "1902659"
  },
  {
    "text": "comes in the form of Json files so those will be needed for things like reflection serialization Etc if that",
    "start": "1902659",
    "end": "1909620"
  },
  {
    "text": "configuration is not coming from your library framework Etc so you might need to provide this configuration yourself",
    "start": "1909620",
    "end": "1915820"
  },
  {
    "text": "but again there are good news for this so 90 image when you get your glodium distribution comes with a tracing agent",
    "start": "1915820",
    "end": "1922640"
  },
  {
    "text": "and you can run this tracing agent and run the application on the jvm and what is a what this tracing agent will do it",
    "start": "1922640",
    "end": "1929539"
  },
  {
    "text": "will observe the application behavior and it will produce this configuration automatically again in the form of those",
    "start": "1929539",
    "end": "1935059"
  },
  {
    "text": "Json files and this is very helpful I will not say that this is a silver bullet so if you do recommend that you",
    "start": "1935059",
    "end": "1941059"
  },
  {
    "text": "still goes through that configuration and make sure that it's complete and kind of critically review it but it's",
    "start": "1941059",
    "end": "1946340"
  },
  {
    "text": "very helpful to eliminate a lot of that manual work and make more of those Dynamic features in your application",
    "start": "1946340",
    "end": "1953179"
  },
  {
    "text": "work in the 90 image mode as well and then uh what about reflection in",
    "start": "1953179",
    "end": "1958940"
  },
  {
    "text": "those third-party libraries so maybe you know what your application does and where and how you're using reflection",
    "start": "1958940",
    "end": "1964279"
  },
  {
    "text": "but it might be way more challenging to configure reflection for some certified dependencies that maybe you don't know",
    "start": "1964279",
    "end": "1970100"
  },
  {
    "text": "that well so in that case uh the preferred scenario is at this library or framework",
    "start": "1970100",
    "end": "1975620"
  },
  {
    "text": "shapes configuration for 90 image itself and indeed we see quite a few libraries in the Java ecosystem already adopting",
    "start": "1975620",
    "end": "1982340"
  },
  {
    "text": "raw VM native images deployment platform and shaping this configuration within the library itself so if you check out",
    "start": "1982340",
    "end": "1988940"
  },
  {
    "text": "for example the source code of the H2 Library it already contains this reflect config Json file that it will tell",
    "start": "1988940",
    "end": "1995720"
  },
  {
    "text": "native image where and have H2 is using a reflection so it's possible to build application using H2 and that also does",
    "start": "1995720",
    "end": "2003399"
  },
  {
    "text": "reflection at build time but for those libraries and tools and Frameworks that I haven't adopted native",
    "start": "2003399",
    "end": "2009640"
  },
  {
    "text": "image yet and don't ship this configuration yet we created the centralized repo on GitHub where those",
    "start": "2009640",
    "end": "2016299"
  },
  {
    "text": "uh Library users and framework authors and just other native image users can contribute share and that reuse",
    "start": "2016299",
    "end": "2023200"
  },
  {
    "text": "configuration for Native image because could be the case that somebody else already solved this issue with a",
    "start": "2023200",
    "end": "2028539"
  },
  {
    "text": "particular library that you are trying to use and it's very helpful to having densitized place where you can pull this",
    "start": "2028539",
    "end": "2034720"
  },
  {
    "text": "configuration from and what's even better we have native build tools that is Maven and Gradle",
    "start": "2034720",
    "end": "2041260"
  },
  {
    "text": "plugins for building projects with scroll vm90 image and there you can enable as a parameter in your build file",
    "start": "2041260",
    "end": "2047860"
  },
  {
    "text": "access to this repo so if you are using some libraries and tools this will give",
    "start": "2047860",
    "end": "2053378"
  },
  {
    "text": "your plugins access to the repo and they will go and try to configure and pull this configuration automatically from",
    "start": "2053379",
    "end": "2060220"
  },
  {
    "text": "this place so you don't even need to know about configuring those external dependencies",
    "start": "2060220",
    "end": "2066940"
  },
  {
    "start": "2066000",
    "end": "2262000"
  },
  {
    "text": "okay so talking about things to be aware of and uh just limitation that it might",
    "start": "2066940",
    "end": "2072099"
  },
  {
    "text": "be wanting to know about working with Native image so indeed there is a required build time step so build",
    "start": "2072099",
    "end": "2077740"
  },
  {
    "text": "timestamp becomes more important because a lot of work is happening during the build time and also what is important is",
    "start": "2077740",
    "end": "2083980"
  },
  {
    "text": "that there is like significant computational effort needed in build time because job applications are",
    "start": "2083980",
    "end": "2090398"
  },
  {
    "text": "complex and dynamic and it means that to compile them ahead of time and to analyze the whole application then",
    "start": "2090399",
    "end": "2096339"
  },
  {
    "text": "optimize and compile it it might need to take some additional computational resources especially for a larger app so",
    "start": "2096339",
    "end": "2104020"
  },
  {
    "text": "you do need probably a fairly good machine if you want to build a larger native image application",
    "start": "2104020",
    "end": "2110560"
  },
  {
    "text": "so you need a powerful machine but also a native image doesn't do out of the box cross-platform cross architecture",
    "start": "2110560",
    "end": "2117280"
  },
  {
    "text": "compilation so it needs to happen on the target architecture and operating system",
    "start": "2117280",
    "end": "2122560"
  },
  {
    "text": "so if I'm using my uh arm Mac out of the box I will produce",
    "start": "2122560",
    "end": "2128440"
  },
  {
    "text": "an anti-executable that is suitable for this architecture and this platform but again database around it so one thing",
    "start": "2128440",
    "end": "2135339"
  },
  {
    "text": "you can use is GitHub actions and there you can build Knights executables for all the platform for which you would",
    "start": "2135339",
    "end": "2140980"
  },
  {
    "text": "need to ship your application and what is even better so uh Native image again needs a powerful machine but",
    "start": "2140980",
    "end": "2148180"
  },
  {
    "text": "also it might need some memory to make all those things happen because there is a lot of work happening at build time",
    "start": "2148180",
    "end": "2153579"
  },
  {
    "text": "but we are working to reduce those memory requirements of native boats so even in environments that are maybe less",
    "start": "2153579",
    "end": "2161579"
  },
  {
    "text": "resources Rich it's possible to build even bigger application so even if you have let's say two gigabytes of memory",
    "start": "2161579",
    "end": "2167800"
  },
  {
    "text": "available you can still build many even bigger applications with Native image so",
    "start": "2167800",
    "end": "2172839"
  },
  {
    "text": "those memory requirements are going uh lower over time and what you also recommend is that",
    "start": "2172839",
    "end": "2179800"
  },
  {
    "text": "again native compilation can take time so probably you don't want to do this native compilation every I don't know",
    "start": "2179800",
    "end": "2186460"
  },
  {
    "text": "few seconds of minutes as you're developing your application especially if the changes that you are making are mostly around the business logic so we",
    "start": "2186460",
    "end": "2193599"
  },
  {
    "text": "recommend to do this as a more or less final step before the final deployment or once in a while but in general",
    "start": "2193599",
    "end": "2200020"
  },
  {
    "text": "develop your application on the jvm and then compile to Native closer to deployment don't do this every few",
    "start": "2200020",
    "end": "2206500"
  },
  {
    "text": "minutes and for the best pixel put one thing you could use is profile guide optimizations",
    "start": "2206500",
    "end": "2212920"
  },
  {
    "text": "so uh again as we know the yjvm optimize the application at runtime is because it",
    "start": "2212920",
    "end": "2218500"
  },
  {
    "text": "collects profile information or what is happening at runtime and which parts of your application are executed more often",
    "start": "2218500",
    "end": "2224200"
  },
  {
    "text": "and it adapts on the go and it's very hard to beat that especially if you are compiling something ahead of time on the",
    "start": "2224200",
    "end": "2230800"
  },
  {
    "text": "closable Assumption and this random information is not available yet so the way to work around it is to use",
    "start": "2230800",
    "end": "2236740"
  },
  {
    "text": "proper guide optimizations where you would run the application in the instrumented binary mode and you",
    "start": "2236740",
    "end": "2243280"
  },
  {
    "text": "would collect this profile information and then it will feed those profiles to an IC image so it can build application",
    "start": "2243280",
    "end": "2249280"
  },
  {
    "text": "that is kind of aware of the runtime behavior and which parts of your code will become hot and this way it's",
    "start": "2249280",
    "end": "2255220"
  },
  {
    "text": "possible to achieve big performance with 90 image that is on par with the jvm as I showed you previously in demo",
    "start": "2255220",
    "end": "2262839"
  },
  {
    "start": "2262000",
    "end": "2297000"
  },
  {
    "text": "and I want to use this challenge to talk a bit about what is new in grow VM so one thing is that we are trying to keep",
    "start": "2262839",
    "end": "2269440"
  },
  {
    "text": "up with the latest Java releases and as soon as that a new Java versions we are trying to produce builds so you can use",
    "start": "2269440",
    "end": "2275980"
  },
  {
    "text": "the latest Java features with the latest overall VM features so at the moment we have dedicated value developer bolts",
    "start": "2275980",
    "end": "2282280"
  },
  {
    "text": "available and in on June 16th we will have the actual production grade feature",
    "start": "2282280",
    "end": "2288339"
  },
  {
    "text": "release available as well so at the moment if you want to use dedicate value builds we have those available as",
    "start": "2288339",
    "end": "2294460"
  },
  {
    "text": "developer Builds on GitHub and talking about new features so one of",
    "start": "2294460",
    "end": "2299800"
  },
  {
    "start": "2297000",
    "end": "2351000"
  },
  {
    "text": "the common requires that we are getting from our users is that they are as they are adopting native image specifically",
    "start": "2299800",
    "end": "2304900"
  },
  {
    "text": "for production workloads they're asking us about monitoring features and for that we added quite a few things in the",
    "start": "2304900",
    "end": "2311200"
  },
  {
    "text": "last couple of releases so one is I think this was added in the previous release we added support for jvm stat so",
    "start": "2311200",
    "end": "2317619"
  },
  {
    "text": "if you're using visual VM you will now also see native executables there as well and you can observe things about",
    "start": "2317619",
    "end": "2323500"
  },
  {
    "text": "them such as for example memory usage look at hip dumps Etc and also we are",
    "start": "2323500",
    "end": "2328839"
  },
  {
    "text": "working with the community to enable geofar support it shows that if you want to use any of those 90 image you would",
    "start": "2328839",
    "end": "2334540"
  },
  {
    "text": "need to pass this one flag either on command line or in your build file to tell native image to build an executable",
    "start": "2334540",
    "end": "2341260"
  },
  {
    "text": "that has those monitoring features included but they are working to build this out and we'll have some more",
    "start": "2341260",
    "end": "2346720"
  },
  {
    "text": "releases in this new some new features in this new release in June and if you want to see what else you're",
    "start": "2346720",
    "end": "2352900"
  },
  {
    "start": "2351000",
    "end": "2360000"
  },
  {
    "text": "working on as an open source project you also have a community roadmap on GitHub so there you can see what we are working",
    "start": "2352900",
    "end": "2358300"
  },
  {
    "text": "on what is coming up next what is coming up a bit later in the year and you can also share your feedback with us about",
    "start": "2358300",
    "end": "2364240"
  },
  {
    "start": "2360000",
    "end": "2392000"
  },
  {
    "text": "which features you think should be implemented first or what do you think is missing in raw VM",
    "start": "2364240",
    "end": "2370119"
  },
  {
    "text": "and one of the features that I'm very excited about the next release is that we are adding zgc support this is for",
    "start": "2370119",
    "end": "2376300"
  },
  {
    "text": "now added on the jvm so if you're using raw VM on the jdk as a jdk you can now use that you see as well but we are also",
    "start": "2376300",
    "end": "2383740"
  },
  {
    "text": "working for on some new GC implementations and improvements to",
    "start": "2383740",
    "end": "2388900"
  },
  {
    "text": "existing GCS in 90 image mode as well and other things that we are working in",
    "start": "2388900",
    "end": "2394240"
  },
  {
    "start": "2392000",
    "end": "2434000"
  },
  {
    "text": "a 90 image at the following so one we are working with my new framework and Library teams to make sure that you can",
    "start": "2394240",
    "end": "2399940"
  },
  {
    "text": "use small libraries in the native image mode as well and making those libraries compatible with 90 image so that you can",
    "start": "2399940",
    "end": "2406180"
  },
  {
    "text": "build your library your application with whatever libraries you are using also we are working with all those framework",
    "start": "2406180",
    "end": "2412359"
  },
  {
    "text": "teams that I mentioned in the beginning to make sure that they have support for the latest 90 image features and it's easy for you to build those applications",
    "start": "2412359",
    "end": "2418780"
  },
  {
    "text": "using any of those Frameworks and they are also actively working to reduce memory but also the time that it takes",
    "start": "2418780",
    "end": "2425859"
  },
  {
    "text": "for the native image to build the application so to improve this kind of feedback loop that you're getting when",
    "start": "2425859",
    "end": "2431440"
  },
  {
    "text": "you're uploading your application with Native image and to get started with any of this this",
    "start": "2431440",
    "end": "2437020"
  },
  {
    "start": "2434000",
    "end": "2457000"
  },
  {
    "text": "is how you can get the latest release overall VM so this will just curl you the download from our website and the",
    "start": "2437020",
    "end": "2443079"
  },
  {
    "text": "last release at the moment is 20.3 and it includes for example uh jdk 19 builds",
    "start": "2443079",
    "end": "2448480"
  },
  {
    "text": "or if you are using SDK man to manage your SDK installations you can just install Global VM with sdkman as well",
    "start": "2448480",
    "end": "2456880"
  },
  {
    "text": "so to just repeat what you can accomplish with raw VM that's the following you can make your application",
    "start": "2456880",
    "end": "2462339"
  },
  {
    "start": "2457000",
    "end": "2504000"
  },
  {
    "text": "start much faster as 90 executables without jvm you can reduce resources",
    "start": "2462339",
    "end": "2467500"
  },
  {
    "text": "usage because we are not executing your code dynamically at runtime anymore you can add additional security layer to",
    "start": "2467500",
    "end": "2474099"
  },
  {
    "text": "your application by eliminating unused code and making a reflection and civilization available through allow",
    "start": "2474099",
    "end": "2480820"
  },
  {
    "text": "lists and you can also achieve small container images if you want to deploy your applications and scale them faster",
    "start": "2480820",
    "end": "2487960"
  },
  {
    "text": "and tomorrow there will be actually one more session from Thomas that I hope will also mention raw VM and how you can",
    "start": "2487960",
    "end": "2493480"
  },
  {
    "text": "work specifically with springboard applications and compile them as net executables with raw VM so if you're",
    "start": "2493480",
    "end": "2499060"
  },
  {
    "text": "down tomorrow make sure to check out Thomas's session as well I think it will be in the same room as well",
    "start": "2499060",
    "end": "2504460"
  },
  {
    "start": "2504000",
    "end": "2521000"
  },
  {
    "text": "and with that uh thank you [Applause]",
    "start": "2504460",
    "end": "2511199"
  }
]