[
  {
    "start": "0",
    "end": "139000"
  },
  {
    "text": "thank you",
    "start": "8420",
    "end": "11540"
  },
  {
    "text": "all right can you hear me yes okay uh well thank you Ed",
    "start": "13620",
    "end": "19680"
  },
  {
    "text": "um I called you fully responsible for creating a monster that you are seeing",
    "start": "19680",
    "end": "26039"
  },
  {
    "text": "here right now yes uh and thank you for",
    "start": "26039",
    "end": "33660"
  },
  {
    "text": "um giving me this opportunity uh to visit uh beautiful Australia I had no",
    "start": "33660",
    "end": "40020"
  },
  {
    "text": "idea it was a continent like this that that wonderful",
    "start": "40020",
    "end": "45360"
  },
  {
    "text": "um I want to talk today just so this talk was listed as for beginners Okay so",
    "start": "45360",
    "end": "54659"
  },
  {
    "text": "it's it's really funny yeah um so if you feel like at some point",
    "start": "55460",
    "end": "62160"
  },
  {
    "text": "that you you don't understand something I'm saying you know it's like you're in",
    "start": "62160",
    "end": "67200"
  },
  {
    "text": "the wrong place this is for beginners uh introduction to type Theory this is",
    "start": "67200",
    "end": "73920"
  },
  {
    "text": "really really simple stuff yeah",
    "start": "73920",
    "end": "78479"
  },
  {
    "text": "um so why why type Theory so I usually talk about category Theory right and and this",
    "start": "78960",
    "end": "86520"
  },
  {
    "text": "time I decided to talk about type Theory which is sort of a little bit step behind or under I don't know it's like",
    "start": "86520",
    "end": "93780"
  },
  {
    "text": "the foundations of mathematics but as always",
    "start": "93780",
    "end": "99600"
  },
  {
    "text": "there is this weird convergence like everything is converging with with computer science with programming so",
    "start": "99600",
    "end": "106619"
  },
  {
    "text": "type theory is also converging on the one hand being being the foundations of",
    "start": "106619",
    "end": "114119"
  },
  {
    "text": "mathematics the new foundations of mathematics on the other hand something that we use every day in our programming",
    "start": "114119",
    "end": "121560"
  },
  {
    "text": "right we have types and typed languages although there are some people who think that types are not important in",
    "start": "121560",
    "end": "127560"
  },
  {
    "text": "programming JavaScript and stuff like this but ah uh well I won't talk about that um",
    "start": "127560",
    "end": "135480"
  },
  {
    "text": "so um here's a little outline of my talk so I I'm I'm just heading towards one thing",
    "start": "135480",
    "end": "142800"
  },
  {
    "start": "139000",
    "end": "309000"
  },
  {
    "text": "that that I found really interesting that sort of like I had like an epiphany",
    "start": "142800",
    "end": "147959"
  },
  {
    "text": "about understanding uh these identity types",
    "start": "147959",
    "end": "153060"
  },
  {
    "text": "um um but in order to get there you have to like find a path through uh type Theory",
    "start": "153060",
    "end": "162420"
  },
  {
    "text": "um and um are actually sort of path from programming to type Theory and I think",
    "start": "162420",
    "end": "169500"
  },
  {
    "text": "this is this is probably the shortest path that I could think of uh so first",
    "start": "169500",
    "end": "176519"
  },
  {
    "text": "first I'll give you uh I'm gonna give you a little bit of motivation right so",
    "start": "176519",
    "end": "181739"
  },
  {
    "text": "like why so identity types are are about equality what does it mean for two",
    "start": "181739",
    "end": "187800"
  },
  {
    "text": "things to be equal it's such a trivial thing right um and but but but in order to express it",
    "start": "187800",
    "end": "195420"
  },
  {
    "text": "in in type Theory you really have to start from from Basics from like nothing",
    "start": "195420",
    "end": "200519"
  },
  {
    "text": "so um so these these identities first of",
    "start": "200519",
    "end": "205920"
  },
  {
    "text": "all are recursive so I'll start by giving you an example of a recursive type but present very",
    "start": "205920",
    "end": "213840"
  },
  {
    "text": "simple type so you will all understand but um but it's presented in a way that type",
    "start": "213840",
    "end": "220799"
  },
  {
    "text": "theories do it and and they they have their ways right um",
    "start": "220799",
    "end": "226200"
  },
  {
    "text": "uh then it's a dependent type so I'll give you a little bit of a refresher on",
    "start": "226200",
    "end": "231420"
  },
  {
    "text": "what dependent types are um then",
    "start": "231420",
    "end": "238280"
  },
  {
    "text": "I will tell you about induction okay because once we have dependent",
    "start": "238280",
    "end": "244379"
  },
  {
    "text": "types and recursive types we can talk about induction um",
    "start": "244379",
    "end": "249599"
  },
  {
    "text": "and uh then through propositions as types the Kerry Howard isomorphism I",
    "start": "249599",
    "end": "255840"
  },
  {
    "text": "will explain what is so important about equality types or identity types right and",
    "start": "255840",
    "end": "264060"
  },
  {
    "text": "finally I'll introduce identity types introduce and eliminate them at the same",
    "start": "264060",
    "end": "269759"
  },
  {
    "text": "time and the elimination of identity types that's that's the interesting part this is what I really want to talk about",
    "start": "269759",
    "end": "276479"
  },
  {
    "text": "and this is all uh sort of leading towards what is called homotopia type",
    "start": "276479",
    "end": "283080"
  },
  {
    "text": "Theory although I'm not going to get into it but but it's a type Theory and",
    "start": "283080",
    "end": "289380"
  },
  {
    "text": "it's based on it develops uh equality types okay so motivation right",
    "start": "289380",
    "end": "297720"
  },
  {
    "text": "um so let's start by by um very simple problem",
    "start": "297720",
    "end": "304520"
  },
  {
    "text": "1 times a equals a okay how does one prove this thing right",
    "start": "304520",
    "end": "311880"
  },
  {
    "start": "309000",
    "end": "591000"
  },
  {
    "text": "um so e but but in types okay so there is a type corresponding to one that's",
    "start": "311880",
    "end": "318240"
  },
  {
    "text": "the unit type in Haskell now in other languages they kind of sneak this type",
    "start": "318240",
    "end": "323880"
  },
  {
    "text": "under the carpet but in our schools explicitly a unit type and product times",
    "start": "323880",
    "end": "331080"
  },
  {
    "text": "right is is a Cartesian product or a product uh",
    "start": "331080",
    "end": "336600"
  },
  {
    "text": "um of pairs right so we create pairs so if you pair a which is an arbitrary type",
    "start": "336600",
    "end": "344220"
  },
  {
    "text": "here right with unit type what do you get well you get something that's",
    "start": "344220",
    "end": "349979"
  },
  {
    "text": "equivalent to this original type because pairing it with uni does not provide any",
    "start": "349979",
    "end": "355979"
  },
  {
    "text": "additional information because there is only one unit right and it's always available available",
    "start": "355979",
    "end": "363320"
  },
  {
    "text": "so in Haskell we would we would do this by by saying uh okay there is there is a",
    "start": "363539",
    "end": "369780"
  },
  {
    "text": "function uh from despair to a and there is another",
    "start": "369780",
    "end": "376620"
  },
  {
    "text": "function so this is left unit right left Lu as it works for all a so it's a",
    "start": "376620",
    "end": "383940"
  },
  {
    "text": "polymorphic function that goes from despair to a and it just picks the second element of the pair",
    "start": "383940",
    "end": "389780"
  },
  {
    "text": "trivial right and there is an uh the other function that goes backwards right",
    "start": "389780",
    "end": "395280"
  },
  {
    "text": "goes from a and just slaps a unit on it pairs it with a unit a unit is always",
    "start": "395280",
    "end": "401819"
  },
  {
    "text": "available so no problem there okay",
    "start": "401819",
    "end": "407759"
  },
  {
    "text": "um so I'm cheating here okay so this is what what I would do normally in in",
    "start": "407759",
    "end": "414180"
  },
  {
    "text": "programming but in mathematics uh they would slap me you know and they say uh",
    "start": "414180",
    "end": "420120"
  },
  {
    "text": "well first of all this is this is not really equality",
    "start": "420120",
    "end": "425759"
  },
  {
    "text": "we're talking about it's isomorphism right isomorphism means there is a",
    "start": "425759",
    "end": "430919"
  },
  {
    "text": "function one way and there's a function the other way and they are inverse of each other okay so I showed the function",
    "start": "430919",
    "end": "437880"
  },
  {
    "text": "one way show the function of uh the other way I haven't shown that they are",
    "start": "437880",
    "end": "444900"
  },
  {
    "text": "actually inverse of each other right I could do some kind of equational",
    "start": "444900",
    "end": "451560"
  },
  {
    "text": "reasoning on the side right not within the language but okay so a little bit of",
    "start": "451560",
    "end": "458520"
  },
  {
    "text": "cheating there and I could show the isomorphism I think the second thing is it's uh like so what does the",
    "start": "458520",
    "end": "464880"
  },
  {
    "text": "isomorphism have to do with equality what is equality to begin with right so",
    "start": "464880",
    "end": "470880"
  },
  {
    "text": "equality is defined as uh if two things are equal you can replace one with",
    "start": "470880",
    "end": "476220"
  },
  {
    "text": "another in any context okay",
    "start": "476220",
    "end": "481860"
  },
  {
    "text": "and that's obviously not true because if you have a function that takes an a and you try to pass it a pair you need a the",
    "start": "481860",
    "end": "490500"
  },
  {
    "text": "compiler will complain right so these things are not equal even though they are isomorphic",
    "start": "490500",
    "end": "497880"
  },
  {
    "text": "so this is why equality is very important and and we are not yet treating them",
    "start": "497880",
    "end": "505500"
  },
  {
    "text": "very seriously we are treating them as something on the side you know equational reasoning maybe uh and and",
    "start": "505500",
    "end": "514039"
  },
  {
    "text": "replacing equalities with isomorphisms without really",
    "start": "514039",
    "end": "520099"
  },
  {
    "text": "understanding why we can do that why is it okay to replace things like this",
    "start": "520099",
    "end": "527399"
  },
  {
    "text": "um so there is a whole theory behind it and",
    "start": "527399",
    "end": "532560"
  },
  {
    "text": "this is what I want to talk about or at least give you a taste I mean it's like this this would take uh a whole semester",
    "start": "532560",
    "end": "539940"
  },
  {
    "text": "to explain but but just give you a little taste of it okay so we'll start by introducing",
    "start": "539940",
    "end": "549600"
  },
  {
    "text": "to talk about type Theory I could start with like simple things but uh",
    "start": "549600",
    "end": "555240"
  },
  {
    "text": "what we really need is recursion okay understanding recursion recursive types",
    "start": "555240",
    "end": "562080"
  },
  {
    "text": "uh so um let's start with natural numbers right",
    "start": "562080",
    "end": "568339"
  },
  {
    "text": "so um so you've probably seen the way natural numbers are introduced sometimes",
    "start": "568339",
    "end": "574140"
  },
  {
    "text": "especially when you introduce numbers natural numbers as types when you do dependent kind of programming in Haskell",
    "start": "574140",
    "end": "582360"
  },
  {
    "text": "um I don't know how many people did some kind of dependent programming in high school using nuts",
    "start": "582360",
    "end": "591240"
  },
  {
    "start": "591000",
    "end": "989000"
  },
  {
    "text": "um so you Define natural numbers using uh",
    "start": "591240",
    "end": "597420"
  },
  {
    "text": "these two Constructors zero and successor right it's called Piano arithmetic but",
    "start": "597420",
    "end": "605160"
  },
  {
    "text": "um the the way type theories talk about types is they they uh for every type",
    "start": "605160",
    "end": "613160"
  },
  {
    "text": "there is a way to introduce a type the introduction Rule and there is the",
    "start": "613160",
    "end": "618600"
  },
  {
    "text": "elimination rule okay so these are the two important things",
    "start": "618600",
    "end": "623940"
  },
  {
    "text": "so an introduction rule for us programmers means construction how do",
    "start": "623940",
    "end": "629640"
  },
  {
    "text": "you construct it how do you create a function that will produce a natural number",
    "start": "629640",
    "end": "635519"
  },
  {
    "text": "so there are two Constructors here Z or zero that produces a natural number from",
    "start": "635519",
    "end": "643680"
  },
  {
    "text": "nothing so it's a Constructor takes no arguments right zero can always be constructed and and then there is the",
    "start": "643680",
    "end": "650940"
  },
  {
    "text": "successor that says given a natural number I'll give you another natural number and sort of freely uh so that",
    "start": "650940",
    "end": "659339"
  },
  {
    "text": "it's like a free construction because uh you assume that what you were given",
    "start": "659339",
    "end": "665160"
  },
  {
    "text": "after this Constructor is a new number it's like freshly new minted number that's the successor of the previous",
    "start": "665160",
    "end": "671760"
  },
  {
    "text": "number right and this is equivalent to all natural numbers because you can say",
    "start": "671760",
    "end": "678000"
  },
  {
    "text": "okay I can produce a z i can use the Z Constructor to produce something and I",
    "start": "678000",
    "end": "684180"
  },
  {
    "text": "will call this something zero okay arbitrarily then once I have zero as a",
    "start": "684180",
    "end": "690480"
  },
  {
    "text": "natural number I can apply the second Constructor and I will get something new and I will say I'm going to call this",
    "start": "690480",
    "end": "697500"
  },
  {
    "text": "one okay fine and and then I apply successor to it and",
    "start": "697500",
    "end": "703980"
  },
  {
    "text": "I get something and I call it two and so on and I continue until I create all the natural numbers eventually right",
    "start": "703980",
    "end": "713220"
  },
  {
    "text": "um uh so that's that's one thing so you can you can create these natural numbers but",
    "start": "713220",
    "end": "720000"
  },
  {
    "text": "that's not really interesting until you know how to eliminate them elimination means uh I want to Define some actions",
    "start": "720000",
    "end": "729660"
  },
  {
    "text": "that take natural numbers some functions so mappings out of natural numbers how",
    "start": "729660",
    "end": "735480"
  },
  {
    "text": "do I map out of natural number how do I Define a function that takes a natural number well since there are two ways of",
    "start": "735480",
    "end": "741660"
  },
  {
    "text": "creating natural numbers zero and successor then when I eliminate them I have to",
    "start": "741660",
    "end": "748200"
  },
  {
    "text": "think of two ways of eliminating them like what do I do if when I get a zero",
    "start": "748200",
    "end": "753480"
  },
  {
    "text": "that's what I do and what do I do and I get a successor of something",
    "start": "753480",
    "end": "759000"
  },
  {
    "text": "so this can be formalized in saying well I have a base",
    "start": "759000",
    "end": "764279"
  },
  {
    "text": "of type A so I'm I'm creating a function that takes a natural number and produces",
    "start": "764279",
    "end": "771180"
  },
  {
    "text": "a value of type A sum a okay",
    "start": "771180",
    "end": "776360"
  },
  {
    "text": "for every function this will be a different a um so I have to Define what this",
    "start": "776360",
    "end": "782639"
  },
  {
    "text": "function does on on zero on Z right and that I call base so that's just a value of type A and",
    "start": "782639",
    "end": "791100"
  },
  {
    "text": "then I then I have to have a function that tells me if somebody gives me a",
    "start": "791100",
    "end": "797040"
  },
  {
    "text": "natural number [Music] um and uh and some",
    "start": "797040",
    "end": "803000"
  },
  {
    "text": "previously created value in this sequence of creating values then",
    "start": "803000",
    "end": "809279"
  },
  {
    "text": "I tell you how to get the next value okay and that's called a step",
    "start": "809279",
    "end": "816779"
  },
  {
    "text": "so given base and step I can now generate a function that will work for",
    "start": "816779",
    "end": "825540"
  },
  {
    "text": "any natural number because any natural number is obtained from zero by applying",
    "start": "825540",
    "end": "831360"
  },
  {
    "text": "a number of steps to it right so if I know what to do for zero and I will know",
    "start": "831360",
    "end": "836579"
  },
  {
    "text": "what to do for every step I'm done right so that's called the elimination right",
    "start": "836579",
    "end": "844320"
  },
  {
    "text": "but there is also this part that says well once once you have created this",
    "start": "844320",
    "end": "850380"
  },
  {
    "text": "function right uh uh you can give me any function and I won't",
    "start": "850380",
    "end": "856380"
  },
  {
    "text": "know whether this was created from base and step or not so there is this condition and and it's usually called",
    "start": "856380",
    "end": "862980"
  },
  {
    "text": "computation rule that says the function that I give you",
    "start": "862980",
    "end": "869220"
  },
  {
    "text": "actually has this property that if you call it with z you will get the base",
    "start": "869220",
    "end": "875220"
  },
  {
    "text": "and if you call it with a successor of some and you will get a step acting on",
    "start": "875220",
    "end": "883920"
  },
  {
    "text": "F of n where F of n is defunct recursive call",
    "start": "883920",
    "end": "889199"
  },
  {
    "text": "to the function so recursion occurs naturally as the computation rule this",
    "start": "889199",
    "end": "895320"
  },
  {
    "text": "is where it comes in right there is also third thing that type",
    "start": "895320",
    "end": "901260"
  },
  {
    "text": "theories often do is is the uniqueness like as is the",
    "start": "901260",
    "end": "908220"
  },
  {
    "text": "function you we won't worry about this right",
    "start": "908220",
    "end": "913440"
  },
  {
    "text": "so so this procedure of building a recursive function here is is uh",
    "start": "913440",
    "end": "920160"
  },
  {
    "text": "um is written as as a higher order function rack so Rec takes a base takes",
    "start": "920160",
    "end": "927660"
  },
  {
    "text": "a step and produces the function that we wanted from Nat to a okay that's the",
    "start": "927660",
    "end": "934260"
  },
  {
    "text": "result this is the function and an example the simplest example is factorial right you",
    "start": "934260",
    "end": "941639"
  },
  {
    "text": "take as your base and number one and step is",
    "start": "941639",
    "end": "946860"
  },
  {
    "text": "n plus 1 times x so step is not the recursive function",
    "start": "946860",
    "end": "953399"
  },
  {
    "text": "it's just a regular function right that's easy to Define but these two will",
    "start": "953399",
    "end": "959760"
  },
  {
    "text": "produce using the computation rule will produce you the",
    "start": "959760",
    "end": "965459"
  },
  {
    "text": "um recursive function that calculates factorials okay so this is the first",
    "start": "965459",
    "end": "971459"
  },
  {
    "text": "part natural numbers um as an example of what a recursive",
    "start": "971459",
    "end": "978120"
  },
  {
    "text": "type definition is right now let's do something uh more",
    "start": "978120",
    "end": "984060"
  },
  {
    "text": "interesting let's talk about dependent types",
    "start": "984060",
    "end": "988820"
  },
  {
    "start": "989000",
    "end": "1418000"
  },
  {
    "text": "um so uh instead of interesting in general I'll give you",
    "start": "989820",
    "end": "995100"
  },
  {
    "text": "first an example how you can work with dependent types and this is an example",
    "start": "995100",
    "end": "1000380"
  },
  {
    "text": "that's close to our hearts that's uh [Music] um",
    "start": "1000380",
    "end": "1006079"
  },
  {
    "text": "that's the vectors okay counted vectors right so counted vectors are dependent",
    "start": "1006079",
    "end": "1011839"
  },
  {
    "text": "types um and they they Define a family of",
    "start": "1011839",
    "end": "1017360"
  },
  {
    "text": "types it's not just one type counted number a counted Vector is is a whole",
    "start": "1017360",
    "end": "1022579"
  },
  {
    "text": "family of types that's indexed by natural numbers so there is a separate type for zero length Vector of a and",
    "start": "1022579",
    "end": "1030380"
  },
  {
    "text": "there is a separate type for length one vector of a and length two Vector of a",
    "start": "1030380",
    "end": "1035900"
  },
  {
    "text": "and so on each of them is a separate type you can't mix them and because of",
    "start": "1035900",
    "end": "1041418"
  },
  {
    "text": "that you know we have this power that the compiler will tell us if we are doing something wrong with Vector sizes",
    "start": "1041419",
    "end": "1048558"
  },
  {
    "text": "right it will match sizes and so on so",
    "start": "1048559",
    "end": "1054020"
  },
  {
    "text": "I want to introduce some some family of types and this family of types in this",
    "start": "1054020",
    "end": "1060140"
  },
  {
    "text": "case will be the family of vectors and this is this is how you construct a vector again com it's very similar to",
    "start": "1060140",
    "end": "1068299"
  },
  {
    "text": "how you construct natural numbers you have two Constructors one Constructor nil creates an empty vector",
    "start": "1068299",
    "end": "1076400"
  },
  {
    "text": "and then cons given an existing Vector of size n will",
    "start": "1076400",
    "end": "1083720"
  },
  {
    "text": "produce a vector of size n Plus 1.",
    "start": "1083720",
    "end": "1090140"
  },
  {
    "text": "and some value of type A of course that you put in front of the existing Vector",
    "start": "1090140",
    "end": "1096020"
  },
  {
    "text": "so you get a vector of size n and you slap another a in front of it and you",
    "start": "1096020",
    "end": "1101960"
  },
  {
    "text": "get a vector of size n plus one and the interesting thing here is that the the stuff in red tells you well so it's a",
    "start": "1101960",
    "end": "1110240"
  },
  {
    "text": "function that takes n which is a value",
    "start": "1110240",
    "end": "1116179"
  },
  {
    "text": "right and takes types A and then vac a n is",
    "start": "1116179",
    "end": "1122960"
  },
  {
    "text": "another type and this type depends on the value that was passed before the N",
    "start": "1122960",
    "end": "1129200"
  },
  {
    "text": "right and the result also depends on this n so this is this is the equation",
    "start": "1129200",
    "end": "1134240"
  },
  {
    "text": "in types right it tells you what what how types are created but it has one one",
    "start": "1134240",
    "end": "1140780"
  },
  {
    "text": "of the arguments there is a value and that's what dependent types are",
    "start": "1140780",
    "end": "1146299"
  },
  {
    "text": "these are types that can depend on values I mean normally we have types that depend on other types you know like",
    "start": "1146299",
    "end": "1152299"
  },
  {
    "text": "list of integers depends on int right right here uh it depends on on values",
    "start": "1152299",
    "end": "1160940"
  },
  {
    "text": "but I really uh this I I want this type because I want I want to show you",
    "start": "1160940",
    "end": "1167299"
  },
  {
    "text": "induction I want to show you uh uh a little a dependent induction is a",
    "start": "1167299",
    "end": "1175700"
  },
  {
    "text": "dependent elimination so I I'm still talking about",
    "start": "1175700",
    "end": "1181640"
  },
  {
    "text": "uh natural numbers right but I need these vectors to have a family of times",
    "start": "1181640",
    "end": "1188740"
  },
  {
    "text": "uh so that I can define a new way of eliminating numbers",
    "start": "1188740",
    "end": "1196039"
  },
  {
    "text": "okay so I want to create a function that a dependent function that would take",
    "start": "1196039",
    "end": "1203500"
  },
  {
    "text": "natural numbers of arguments but for every n it would produce a different",
    "start": "1203500",
    "end": "1210080"
  },
  {
    "text": "value of different type right normally a function produces a",
    "start": "1210080",
    "end": "1216200"
  },
  {
    "text": "different value for different values but here it produces different values of",
    "start": "1216200",
    "end": "1221840"
  },
  {
    "text": "different types for every n so that's what I want to do okay so I want to define a dependent function of",
    "start": "1221840",
    "end": "1229340"
  },
  {
    "text": "natural numbers this is why I needed vectors as an example of something that",
    "start": "1229340",
    "end": "1234440"
  },
  {
    "text": "I could be creating right so",
    "start": "1234440",
    "end": "1239480"
  },
  {
    "text": "um and this is called induction I'll explain in a moment why it is called induction right like right now we are",
    "start": "1239480",
    "end": "1245900"
  },
  {
    "text": "doing calculations so you start with a type family and the example of type",
    "start": "1245900",
    "end": "1251299"
  },
  {
    "text": "family is this Vector index by n",
    "start": "1251299",
    "end": "1256600"
  },
  {
    "text": "and just like before we had base and step but this time base and step is",
    "start": "1256600",
    "end": "1263360"
  },
  {
    "text": "dependent so it depends on N it does not before we had base and step all",
    "start": "1263360",
    "end": "1269720"
  },
  {
    "text": "producing something of type A right so it was the same type for base",
    "start": "1269720",
    "end": "1275780"
  },
  {
    "text": "and step here we have something a little bit more interesting bass produces one",
    "start": "1275780",
    "end": "1282140"
  },
  {
    "text": "type Vector of size zero okay an empty vector",
    "start": "1282140",
    "end": "1290140"
  },
  {
    "text": "and step takes n as before but it takes a vector of size n and produces a vector",
    "start": "1290140",
    "end": "1297860"
  },
  {
    "text": "of size n plus 1 or successor of n right and this is a different type before it",
    "start": "1297860",
    "end": "1304039"
  },
  {
    "text": "was taking something of type A and producing something of type A here it's changing type it's producing something",
    "start": "1304039",
    "end": "1310520"
  },
  {
    "text": "of a different type okay so for every step you will get the value but it's a",
    "start": "1310520",
    "end": "1317720"
  },
  {
    "text": "value of a different type and then an example of a function like",
    "start": "1317720",
    "end": "1323419"
  },
  {
    "text": "this is a very simple example you you have some value uh constant value of type c and you want",
    "start": "1323419",
    "end": "1330740"
  },
  {
    "text": "to replicate it so you want to be able to create vectors of size n that are",
    "start": "1330740",
    "end": "1336440"
  },
  {
    "text": "filled with this single value so C right so how do you do this well you define",
    "start": "1336440",
    "end": "1344480"
  },
  {
    "text": "base base is supposed to produce you in this case a vector of size 0 and the",
    "start": "1344480",
    "end": "1350840"
  },
  {
    "text": "Constructor for Vector of size 0 is nil that was my Constructor for Vector of",
    "start": "1350840",
    "end": "1356840"
  },
  {
    "text": "size 0. so base is equal to nil uh and my step will be uh will will take",
    "start": "1356840",
    "end": "1365780"
  },
  {
    "text": "a vector of size n and slap a c on it and produce a vector size n plus one so",
    "start": "1365780",
    "end": "1372860"
  },
  {
    "text": "it's it changes the the type right it takes a type Vector of N and will",
    "start": "1372860",
    "end": "1379580"
  },
  {
    "text": "produce type Vector of n plus one a different",
    "start": "1379580",
    "end": "1384880"
  },
  {
    "text": "different type okay",
    "start": "1384880",
    "end": "1389980"
  },
  {
    "text": "um so this can be um encapsulated as a recursive scheme",
    "start": "1391520",
    "end": "1400539"
  },
  {
    "text": "that is dependent dependent type uh",
    "start": "1400539",
    "end": "1407360"
  },
  {
    "text": "and it's it's called induction okay so we what we did is Define induction on",
    "start": "1407360",
    "end": "1415100"
  },
  {
    "text": "natural numbers and in general so I I use that for generating vectors right but in general",
    "start": "1415100",
    "end": "1423460"
  },
  {
    "start": "1418000",
    "end": "1643000"
  },
  {
    "text": "induction is is defined by uh first defining some type",
    "start": "1423460",
    "end": "1430220"
  },
  {
    "text": "family which was vectors in my case so given a Thai family C and you give me a base and",
    "start": "1430220",
    "end": "1438860"
  },
  {
    "text": "a dependent step and given base and dependent step I can",
    "start": "1438860",
    "end": "1444559"
  },
  {
    "text": "create a function dependent function from not to c n so it's a function that",
    "start": "1444559",
    "end": "1452179"
  },
  {
    "text": "takes natural numbers and produces values of different types depending on n",
    "start": "1452179",
    "end": "1461000"
  },
  {
    "text": "okay so it's more General than the previous recursive function right where",
    "start": "1461000",
    "end": "1466400"
  },
  {
    "text": "where all the values were of the same type A here the type changes with ends",
    "start": "1466400",
    "end": "1473960"
  },
  {
    "text": "so end is is this higher order function that defines",
    "start": "1473960",
    "end": "1481159"
  },
  {
    "text": "oh okay for all uh right",
    "start": "1481159",
    "end": "1488260"
  },
  {
    "text": "so end is this function that takes base and and takes step so the second",
    "start": "1489320",
    "end": "1496100"
  },
  {
    "text": "argument second line is step and produces this dependent function right and it has a computation rule as before",
    "start": "1496100",
    "end": "1503500"
  },
  {
    "text": "uh it looks almost uh well it looks the same right it looks the same but but but",
    "start": "1503500",
    "end": "1509600"
  },
  {
    "text": "this this is a computational rule now involves different types at each level",
    "start": "1509600",
    "end": "1516500"
  },
  {
    "text": "okay so this is uh so why why am I calling this induction why do people",
    "start": "1516500",
    "end": "1521720"
  },
  {
    "text": "call this induction okay and this has to do uh with the propositions as types",
    "start": "1521720",
    "end": "1529520"
  },
  {
    "text": "Curry Howard isomorphism that every type can be thought of as a proposition",
    "start": "1529520",
    "end": "1538700"
  },
  {
    "text": "which is something that can be true or false okay so what's what's a true",
    "start": "1538700",
    "end": "1544760"
  },
  {
    "text": "proposition it's a type that is inhabited that has elements like we",
    "start": "1544760",
    "end": "1550220"
  },
  {
    "text": "normally deal with types that have elements right like Boolean has two elements and integer has infinitely many",
    "start": "1550220",
    "end": "1557179"
  },
  {
    "text": "elements and so on so like every type seems to be inhabited right",
    "start": "1557179",
    "end": "1563720"
  },
  {
    "text": "except that there's this one weird type void that is not inhabited except for",
    "start": "1563720",
    "end": "1569059"
  },
  {
    "text": "the bottom of course right but we'll ignore that",
    "start": "1569059",
    "end": "1575260"
  },
  {
    "text": "so so what does it mean well it means that well there are some",
    "start": "1575260",
    "end": "1581059"
  },
  {
    "text": "um more complex types like like function types you know it's like you give me some value and I produce some value of",
    "start": "1581059",
    "end": "1588020"
  },
  {
    "text": "some other type can I always Implement a function like this if I can Implement a",
    "start": "1588020",
    "end": "1593779"
  },
  {
    "text": "function like this then it's proved that this function type is inhabited because I just implemented the function of this",
    "start": "1593779",
    "end": "1600500"
  },
  {
    "text": "type right but if I can't if it's impossible to implement a function like this because it doesn't have enough",
    "start": "1600500",
    "end": "1606140"
  },
  {
    "text": "information or so in its argument to produce a result well then maybe uh this",
    "start": "1606140",
    "end": "1613760"
  },
  {
    "text": "is an not inhabited type so a type that's inhabited is a proof is",
    "start": "1613760",
    "end": "1621559"
  },
  {
    "text": "is a is a true proposition in this language and every inhabitant of this",
    "start": "1621559",
    "end": "1628159"
  },
  {
    "text": "type is the proof that it's inhabited obviously right so it's a proof of this proposition",
    "start": "1628159",
    "end": "1635080"
  },
  {
    "text": "so this is the summary of Curry Howard isomorphism right and then here's an example like",
    "start": "1636940",
    "end": "1644720"
  },
  {
    "start": "1643000",
    "end": "1828000"
  },
  {
    "text": "the the proof of a proposition that A and B right",
    "start": "1644720",
    "end": "1650600"
  },
  {
    "text": "consists of a proof of a and the proof of B right what does it mean it means",
    "start": "1650600",
    "end": "1657380"
  },
  {
    "text": "that this proposition A and B is trans translated into pair",
    "start": "1657380",
    "end": "1662480"
  },
  {
    "text": "of type A B right and the proof that it's inhabited that this type of a pair",
    "start": "1662480",
    "end": "1669080"
  },
  {
    "text": "of a b is by constructing this pair and in order to construct this pair somebody",
    "start": "1669080",
    "end": "1676100"
  },
  {
    "text": "has to give me a value of type A and the value of type B and the value of type A",
    "start": "1676100",
    "end": "1681320"
  },
  {
    "text": "is a proof that a is inhabited and the value of type B is the proof that b is inhabited so given these two proofs I",
    "start": "1681320",
    "end": "1688340"
  },
  {
    "text": "construct a proof which is a pair okay and in it inhabits the pair type",
    "start": "1688340",
    "end": "1695360"
  },
  {
    "text": "and there may be many proof of the same proposition you know obviously right so how does this relate",
    "start": "1695360",
    "end": "1702919"
  },
  {
    "text": "to induction okay so now we have induction was like we had",
    "start": "1702919",
    "end": "1710299"
  },
  {
    "text": "this type family right so for every n we had a type CN",
    "start": "1710299",
    "end": "1717620"
  },
  {
    "text": "right so now if we look at the types as propositions uh it means for every n we",
    "start": "1717620",
    "end": "1725539"
  },
  {
    "text": "have a different proposition so if there's a proposition that's indexed by n and we want the proof that all these",
    "start": "1725539",
    "end": "1733220"
  },
  {
    "text": "propositions are true right so we want to prove something for every n",
    "start": "1733220",
    "end": "1738760"
  },
  {
    "text": "this proposition is true right and",
    "start": "1738760",
    "end": "1744760"
  },
  {
    "text": "the way we do this in type theory was we had this base and step now we we",
    "start": "1744760",
    "end": "1751940"
  },
  {
    "text": "interpret this base since it's a value of type c of Z right C of zero uh",
    "start": "1751940",
    "end": "1762440"
  },
  {
    "text": "then it's a proof that c of zero is inhabited right so base is the proof",
    "start": "1762440",
    "end": "1768320"
  },
  {
    "text": "that c of zero is inhabited and step is to prove that c of n plus 1 type is",
    "start": "1768320",
    "end": "1775760"
  },
  {
    "text": "inhabited as long as the type C of n is inhabited",
    "start": "1775760",
    "end": "1781220"
  },
  {
    "text": "so I'm proving that c of n plus 1 is inhabited using C of n right and this is",
    "start": "1781220",
    "end": "1788480"
  },
  {
    "text": "exactly how we were taught induction in school right you have the base case and",
    "start": "1788480",
    "end": "1794120"
  },
  {
    "text": "you have the step and now we understand how how this works in type Theory",
    "start": "1794120",
    "end": "1801020"
  },
  {
    "text": "so this is what induction is and this function in",
    "start": "1801020",
    "end": "1806779"
  },
  {
    "text": "just generates the proof for all and essentially",
    "start": "1806779",
    "end": "1814159"
  },
  {
    "text": "so induction now we have a new understanding of it induction is just",
    "start": "1814700",
    "end": "1820720"
  },
  {
    "text": "depending the elimination of natural numbers that's what it is right",
    "start": "1820720",
    "end": "1827559"
  },
  {
    "start": "1828000",
    "end": "2136000"
  },
  {
    "text": "so now we have all the ingredients to talk about identity types okay so",
    "start": "1829340",
    "end": "1835159"
  },
  {
    "text": "identity types is is uh is um specifies that two things are equal",
    "start": "1835159",
    "end": "1841820"
  },
  {
    "text": "two values are equal okay so it's a prop sort of a proposition that says you know",
    "start": "1841820",
    "end": "1847880"
  },
  {
    "text": "given an X of type A and another y of type A are these things equal right so",
    "start": "1847880",
    "end": "1856539"
  },
  {
    "text": "using Curry Howard isomorphism we could say okay so we have the proof",
    "start": "1856539",
    "end": "1866059"
  },
  {
    "text": "of equality should be like an inhabitant of a certain type because this is a",
    "start": "1866059",
    "end": "1872059"
  },
  {
    "text": "proposition corresponding to the to equality right",
    "start": "1872059",
    "end": "1877380"
  },
  {
    "text": "[Music] so that means so now you see why we need",
    "start": "1877380",
    "end": "1882559"
  },
  {
    "text": "dependenties because for every X and every Y which are values of type A",
    "start": "1882559",
    "end": "1890559"
  },
  {
    "text": "there is a separate statement separate proposition is x",
    "start": "1891140",
    "end": "1896600"
  },
  {
    "text": "equal to y right so I have to have a different type",
    "start": "1896600",
    "end": "1904039"
  },
  {
    "text": "for every pair of X and Y and this type",
    "start": "1904039",
    "end": "1911960"
  },
  {
    "text": "I call ID of X Y this type is either inhabited or not depending on what value",
    "start": "1911960",
    "end": "1918860"
  },
  {
    "text": "of X and Y I give it right so if I give it a x that is different from y it's not",
    "start": "1918860",
    "end": "1926179"
  },
  {
    "text": "equal to Y this type will not be inhabited will be empty right if I give",
    "start": "1926179",
    "end": "1932000"
  },
  {
    "text": "it something that's equal two values that are equal and then it should be inhabited right I",
    "start": "1932000",
    "end": "1938600"
  },
  {
    "text": "should be able to prove that it's inhabited so now I have a type family",
    "start": "1938600",
    "end": "1946720"
  },
  {
    "text": "idxy which is parameterized by X and Y",
    "start": "1946720",
    "end": "1952220"
  },
  {
    "text": "by values so it's very similar to what we were doing with",
    "start": "1952220",
    "end": "1957559"
  },
  {
    "text": "these dependent types right we started with the type family",
    "start": "1957559",
    "end": "1963700"
  },
  {
    "text": "um now this this identity type is often uh is in the beginning it might be",
    "start": "1963860",
    "end": "1970580"
  },
  {
    "text": "confusing but then you get used to it it's written in infix notation",
    "start": "1970580",
    "end": "1976159"
  },
  {
    "text": "so x equals y now is a type so you put this equal",
    "start": "1976159",
    "end": "1983659"
  },
  {
    "text": "between the values that you're operating on so it's a type that depends on X and",
    "start": "1983659",
    "end": "1989120"
  },
  {
    "text": "Y and sometimes there is this index a uh signifying in what type we are talking",
    "start": "1989120",
    "end": "1995960"
  },
  {
    "text": "about like both X and Y of ta are of type a right",
    "start": "1995960",
    "end": "2002559"
  },
  {
    "text": "and now if if somebody gives you a value of this type x equals y",
    "start": "2002559",
    "end": "2008740"
  },
  {
    "text": "this value is a proof that x equals y right because it means that x equals y",
    "start": "2008740",
    "end": "2015940"
  },
  {
    "text": "is inhabited but they have to give you a proof for every possible pair of X and Y",
    "start": "2015940",
    "end": "2023440"
  },
  {
    "text": "or not give you a proof because maybe X is not equal to Y then there is does not",
    "start": "2023440",
    "end": "2030519"
  },
  {
    "text": "exist a proof like this so these a lot of these types most of them kinda are in",
    "start": "2030519",
    "end": "2036640"
  },
  {
    "text": "not inhabited only the ones that um are correspond to equal values",
    "start": "2036640",
    "end": "2045640"
  },
  {
    "text": "so how do we so now we have a family of types now how",
    "start": "2047740",
    "end": "2053320"
  },
  {
    "text": "do we uh Define this type right I mean so the way to define a type was by uh",
    "start": "2053320",
    "end": "2062080"
  },
  {
    "text": "introduction and elimination right so how do we introduce this type",
    "start": "2062080",
    "end": "2067960"
  },
  {
    "text": "we have to have a Constructor something that would Constructor this Constructor would have to depend on X and Y right",
    "start": "2067960",
    "end": "2076419"
  },
  {
    "text": "um and how can we construct we have you have to construct it from something that",
    "start": "2076419",
    "end": "2082060"
  },
  {
    "text": "we know kind of is true and the only thing we know that it's absolutely true",
    "start": "2082060",
    "end": "2087820"
  },
  {
    "text": "about equality is that a thing is equal to itself right it's a",
    "start": "2087820",
    "end": "2096878"
  },
  {
    "text": "trivial statement everything is equal to itself right",
    "start": "2096879",
    "end": "2101980"
  },
  {
    "text": "and that's called the reflection of the as a property of of this relation of",
    "start": "2101980",
    "end": "2107800"
  },
  {
    "text": "equality it's reflect it's reflective right um so so reflection is the only way we",
    "start": "2107800",
    "end": "2116320"
  },
  {
    "text": "can introduce identity in general right like we don't know anything about",
    "start": "2116320",
    "end": "2122800"
  },
  {
    "text": "equality but this we know for sure right X must be equal to X",
    "start": "2122800",
    "end": "2130060"
  },
  {
    "text": "so this is the only Constructor of the equality type raffle okay",
    "start": "2130060",
    "end": "2139260"
  },
  {
    "start": "2136000",
    "end": "2568000"
  },
  {
    "text": "so this construct is called raffle from reflection right raffle takes one",
    "start": "2140980",
    "end": "2146560"
  },
  {
    "text": "argument value right and produces a value of type x equals X",
    "start": "2146560",
    "end": "2155380"
  },
  {
    "text": "all right so x equals x is a type and the raffle is the value of this type",
    "start": "2155380",
    "end": "2164859"
  },
  {
    "text": "which serves as a proof we can then use this everywhere as a proof a x is equal",
    "start": "2164859",
    "end": "2171220"
  },
  {
    "text": "to X and I have a proof of this and I can pass it in my program you know to",
    "start": "2171220",
    "end": "2177520"
  },
  {
    "text": "everybody to testify that X is equal to X it might sound really crazy right it's",
    "start": "2177520",
    "end": "2185200"
  },
  {
    "text": "like but it means that everywhere I have a x i can replace it with x",
    "start": "2185200",
    "end": "2193140"
  },
  {
    "text": "um so I'm I'm uh here's the here's like a diagram uh drawing like you can you can",
    "start": "2195160",
    "end": "2203800"
  },
  {
    "text": "think of this like X and Y uh on on a plane right these are two coordinates",
    "start": "2203800",
    "end": "2209500"
  },
  {
    "text": "and they're like every point on this plane corresponds to a type uh that X is",
    "start": "2209500",
    "end": "2216520"
  },
  {
    "text": "equal to Y right so if you have X and Y X is equal to Y is a type so every point",
    "start": "2216520",
    "end": "2223119"
  },
  {
    "text": "on this plane corresponds to a equality type a different type right and now I",
    "start": "2223119",
    "end": "2230320"
  },
  {
    "text": "know that the diagonal the types that sit on the diagonal they are all",
    "start": "2230320",
    "end": "2235720"
  },
  {
    "text": "inhabited right and they are inhabited by these values called raffle",
    "start": "2235720",
    "end": "2241119"
  },
  {
    "text": "different for every point on the diagonal because every point on the diagonal is a different type right but",
    "start": "2241119",
    "end": "2248020"
  },
  {
    "text": "they are all inhabited and I have a proof of this okay so introduction is is really a",
    "start": "2248020",
    "end": "2256480"
  },
  {
    "text": "piece of cake it's the elimination of this type that's really it's like okay",
    "start": "2256480",
    "end": "2262480"
  },
  {
    "text": "so I can give you a proof of x equals to Y which probably means that X is the",
    "start": "2262480",
    "end": "2269020"
  },
  {
    "text": "same as y because the only way I was able to create it is using refer what",
    "start": "2269020",
    "end": "2275079"
  },
  {
    "text": "can you do with it right how do you define a function that takes a proof of",
    "start": "2275079",
    "end": "2280839"
  },
  {
    "text": "equality of two things right so that's that's the elimination",
    "start": "2280839",
    "end": "2285940"
  },
  {
    "text": "principle and the elimination principle is really really weird and this is why I",
    "start": "2285940",
    "end": "2291099"
  },
  {
    "text": "wanted to explain it to myself and uh hopefully I'll I will give you a little",
    "start": "2291099",
    "end": "2297099"
  },
  {
    "text": "bit of of intuition why uh why this works",
    "start": "2297099",
    "end": "2302980"
  },
  {
    "text": "uh so first of all identity is a dependent type it's doubly dependent on X and Y",
    "start": "2302980",
    "end": "2311500"
  },
  {
    "text": "um so we'll be now I introduced these natural numbers induction and so on for",
    "start": "2311500",
    "end": "2318099"
  },
  {
    "text": "the purpose of giving you an analogy because the",
    "start": "2318099",
    "end": "2323320"
  },
  {
    "text": "elimination of equality types is analogous in some ways to the",
    "start": "2323320",
    "end": "2329619"
  },
  {
    "text": "elimination of natural numbers it just goes like way beyond that okay",
    "start": "2329619",
    "end": "2336280"
  },
  {
    "text": "so when we were eliminating natural numbers we had we started with a with a",
    "start": "2336280",
    "end": "2342460"
  },
  {
    "text": "type family that was parameterized by natural numbers so now we would have to",
    "start": "2342460",
    "end": "2348220"
  },
  {
    "text": "start with a tight family we have to Define some kind of type families capital c",
    "start": "2348220",
    "end": "2355440"
  },
  {
    "text": "that depends not on natural numbers but depends on these values X",
    "start": "2355440",
    "end": "2363040"
  },
  {
    "text": "y well depends on the proofs of equality but proofs of equality it's themselves",
    "start": "2363040",
    "end": "2370540"
  },
  {
    "text": "depend on X and Y right for every X and Y you would have to have a different proof of equality so it's really a",
    "start": "2370540",
    "end": "2377440"
  },
  {
    "text": "function of three arguments x y",
    "start": "2377440",
    "end": "2382660"
  },
  {
    "text": "and P okay X is a value of type A Y is the",
    "start": "2382660",
    "end": "2389500"
  },
  {
    "text": "value of type A P is the value of type x equals y so it's a proof that X is equal",
    "start": "2389500",
    "end": "2396400"
  },
  {
    "text": "to y and that produces a different type for every X Y P so",
    "start": "2396400",
    "end": "2404320"
  },
  {
    "text": "there's a family C of X Y P so that's that's what there is at the bottom right",
    "start": "2404320",
    "end": "2409960"
  },
  {
    "text": "so there is this family that's parameters by three parameters it's like a three-dimensional family",
    "start": "2409960",
    "end": "2416520"
  },
  {
    "text": "that is our starting point so this is this corresponds in this",
    "start": "2416520",
    "end": "2422820"
  },
  {
    "text": "analogy to our counted vectors they depended on one parameter n this thing",
    "start": "2422820",
    "end": "2429940"
  },
  {
    "text": "depends on three parameters the the important one being P the proof of",
    "start": "2429940",
    "end": "2435099"
  },
  {
    "text": "equality so we want to eliminate these proofs of equality",
    "start": "2435099",
    "end": "2440260"
  },
  {
    "text": "right so",
    "start": "2440260",
    "end": "2445480"
  },
  {
    "text": "going by analogy again for natural numbers we had two",
    "start": "2445480",
    "end": "2451839"
  },
  {
    "text": "introduction principles Z and S zero and successor right and for each of them we",
    "start": "2451839",
    "end": "2460240"
  },
  {
    "text": "defined like our starting point base and step which would move us from",
    "start": "2460240",
    "end": "2467560"
  },
  {
    "text": "one natural number to another now for identity types we only have one",
    "start": "2467560",
    "end": "2475780"
  },
  {
    "text": "introduction raffle that was the only thing right so our elimination",
    "start": "2475780",
    "end": "2481680"
  },
  {
    "text": "uh should be a function of of one uh argument so it's instead of having",
    "start": "2481680",
    "end": "2489339"
  },
  {
    "text": "base and step it just has something that's both base and step okay",
    "start": "2489339",
    "end": "2497099"
  },
  {
    "text": "so what should it do well it should",
    "start": "2497099",
    "end": "2502359"
  },
  {
    "text": "produce a value it should be a so this step in the previous case step and base",
    "start": "2502359",
    "end": "2508420"
  },
  {
    "text": "produced a value of the particular type so here we want this to produce a value",
    "start": "2508420",
    "end": "2515520"
  },
  {
    "text": "of a type that corresponds to the introduction so introduction was only",
    "start": "2515520",
    "end": "2522460"
  },
  {
    "text": "introducing elements on the diagonal right using refer",
    "start": "2522460",
    "end": "2528599"
  },
  {
    "text": "so elimination will will start by saying for raffles",
    "start": "2528599",
    "end": "2537760"
  },
  {
    "text": "I have a proof okay give me no give me a proof for raffle to begin with",
    "start": "2537760",
    "end": "2545079"
  },
  {
    "text": "and then I can extend it for every other equality like you give me a proof for natural",
    "start": "2545079",
    "end": "2551680"
  },
  {
    "text": "numbers you gave me a proof of zero and you gave me a step how to proceed from",
    "start": "2551680",
    "end": "2557560"
  },
  {
    "text": "one to another and then I gave you a proof for every n here give me a proof",
    "start": "2557560",
    "end": "2563859"
  },
  {
    "text": "of raffle and I can extend it to approve for every equality that you can give me",
    "start": "2563859",
    "end": "2571000"
  },
  {
    "start": "2568000",
    "end": "3171000"
  },
  {
    "text": "right so this proof for raffle will be a function little s right that it's a",
    "start": "2571000",
    "end": "2578440"
  },
  {
    "text": "dependent function so it takes X as an argument right and produces a value",
    "start": "2578440",
    "end": "2584859"
  },
  {
    "text": "of this type this diagonal type c of x x",
    "start": "2584859",
    "end": "2590380"
  },
  {
    "text": "raffle X right C was defined on the whole three-dimensional volume kind of",
    "start": "2590380",
    "end": "2596680"
  },
  {
    "text": "for for X's y's and P's uh now we are just looking at the diagonal and and",
    "start": "2596680",
    "end": "2603700"
  },
  {
    "text": "saying this diagonal is inhabited okay so you give me the proof that the",
    "start": "2603700",
    "end": "2609520"
  },
  {
    "text": "diagonal is inhabited",
    "start": "2609520",
    "end": "2612900"
  },
  {
    "text": "and I can proceed from there so that's that's the input that you give me this",
    "start": "2614579",
    "end": "2620440"
  },
  {
    "text": "is my step of induction right",
    "start": "2620440",
    "end": "2625060"
  },
  {
    "text": "it's a sort of a little very very tiny step of induction because there is no",
    "start": "2625599",
    "end": "2631599"
  },
  {
    "text": "movement in there like step in in the induction for natural numbers who's",
    "start": "2631599",
    "end": "2637599"
  },
  {
    "text": "moving you from one place to another it's moving what you buy one right",
    "start": "2637599",
    "end": "2643420"
  },
  {
    "text": "here this is a step that's not really moving you much it's just constantly sitting on this",
    "start": "2643420",
    "end": "2650319"
  },
  {
    "text": "diagonal so combining this the elimination",
    "start": "2650319",
    "end": "2657339"
  },
  {
    "text": "principle for for uh identity types",
    "start": "2657339",
    "end": "2662560"
  },
  {
    "text": "is this by analogy Again by analogy with",
    "start": "2662560",
    "end": "2669700"
  },
  {
    "text": "inductive uh procedure for creating a function of n",
    "start": "2669700",
    "end": "2675640"
  },
  {
    "text": "right which took base step and produces a function of n here",
    "start": "2675640",
    "end": "2681520"
  },
  {
    "text": "instead of base and step we have this function that I called little C right that was",
    "start": "2681520",
    "end": "2691839"
  },
  {
    "text": "proving that there is a value for every type on the diagonal",
    "start": "2691839",
    "end": "2697839"
  },
  {
    "text": "right and then it produces a proof that this C",
    "start": "2697839",
    "end": "2704380"
  },
  {
    "text": "this Proposition C uh or this type c is inhabited outside of the diagonal it's",
    "start": "2704380",
    "end": "2714400"
  },
  {
    "text": "inhabited for every x y and p right you see it's like the result of",
    "start": "2714400",
    "end": "2721000"
  },
  {
    "text": "this C is c x y of P so it gives me a value of c x y of P but it only gives me",
    "start": "2721000",
    "end": "2727599"
  },
  {
    "text": "a value if I can give it arguments okay so I mean I can give it X and I can give",
    "start": "2727599",
    "end": "2734380"
  },
  {
    "text": "it y but it also requires this P okay",
    "start": "2734380",
    "end": "2739839"
  },
  {
    "text": "and P is a proof that X is equal to y okay",
    "start": "2739839",
    "end": "2746380"
  },
  {
    "text": "so if I can't provide this argument meaning X is not equal to Y I can't",
    "start": "2746380",
    "end": "2754359"
  },
  {
    "text": "produce this value okay so automatically like if these two things are equal I",
    "start": "2754359",
    "end": "2761200"
  },
  {
    "text": "will produce a value for you okay if these two things are not equal I can't",
    "start": "2761200",
    "end": "2766300"
  },
  {
    "text": "produce a value sorry you have to provide me the the proof that X is equal",
    "start": "2766300",
    "end": "2771460"
  },
  {
    "text": "to y and there is a corresponding computation rule that you can figure out it's like",
    "start": "2771460",
    "end": "2778079"
  },
  {
    "text": "this the function that's obtained through induction right if you substitute the original Little C into it",
    "start": "2778079",
    "end": "2786700"
  },
  {
    "text": "you should get what you expect right if you substitute the raffle",
    "start": "2786700",
    "end": "2793420"
  },
  {
    "text": "right yes what what was it",
    "start": "2793420",
    "end": "2800880"
  },
  {
    "text": "oh oh the computation rule uh okay so what was the computation rule for for",
    "start": "2804220",
    "end": "2809859"
  },
  {
    "text": "natural numbers it means that if you substituted Z",
    "start": "2809859",
    "end": "2815560"
  },
  {
    "text": "right you would get the base and if you substituted step you would get",
    "start": "2815560",
    "end": "2822819"
  },
  {
    "text": "um the next value from the previous value so here the only thing that you can",
    "start": "2822819",
    "end": "2830680"
  },
  {
    "text": "substitute is you can substitute the raffle right",
    "start": "2830680",
    "end": "2835780"
  },
  {
    "text": "so so end will give you this function from X Y P to C of x y p",
    "start": "2835780",
    "end": "2844420"
  },
  {
    "text": "right so take this function call it with x",
    "start": "2844420",
    "end": "2850420"
  },
  {
    "text": "X again instead of Y and raffle which proves that X is equal to X",
    "start": "2850420",
    "end": "2859000"
  },
  {
    "text": "and you should get a value this value better be the same as your input",
    "start": "2859000",
    "end": "2865780"
  },
  {
    "text": "which was the little function C right",
    "start": "2865780",
    "end": "2871319"
  },
  {
    "text": "okay uh-huh",
    "start": "2872319",
    "end": "2878760"
  },
  {
    "text": "right yeah yeah I get typos okay accurate",
    "start": "2881560",
    "end": "2887339"
  },
  {
    "text": "oh okay well it's renaming I did some renaming on the fly yeah",
    "start": "2887560",
    "end": "2893619"
  },
  {
    "text": "yeah and and for all yeah okay okay first",
    "start": "2893619",
    "end": "2901299"
  },
  {
    "text": "oh that works now need to shout in the first one I think you need a for all in",
    "start": "2902800",
    "end": "2911440"
  },
  {
    "text": "front of the just after the first Arrow yeah of your end of now",
    "start": "2911440",
    "end": "2917140"
  },
  {
    "text": "because the scope of the ends on those two lines are different",
    "start": "2917140",
    "end": "2922720"
  },
  {
    "text": "yes that's true that's true this is a different end right right",
    "start": "2922720",
    "end": "2928960"
  },
  {
    "text": "yeah sorry I was kind of sloppy",
    "start": "2928960",
    "end": "2934079"
  },
  {
    "text": "yes okay last slide",
    "start": "2934079",
    "end": "2939579"
  },
  {
    "text": "ah perfect timing um Okay so so this is",
    "start": "2939579",
    "end": "2946839"
  },
  {
    "text": "the uh these are the formulas that you can",
    "start": "2946839",
    "end": "2952000"
  },
  {
    "text": "like read in in this book uh on homotopic type Theory or on any type",
    "start": "2952000",
    "end": "2958599"
  },
  {
    "text": "theory that deals with dependent types and identity types right uh",
    "start": "2958599",
    "end": "2965140"
  },
  {
    "text": "but what I wanted to do is is give you a little bit of intuition how this relates",
    "start": "2965140",
    "end": "2971140"
  },
  {
    "text": "to something that we already know which is which is induction principles right",
    "start": "2971140",
    "end": "2976480"
  },
  {
    "text": "and dependent types um and it's uh it's it's really a kind",
    "start": "2976480",
    "end": "2983020"
  },
  {
    "text": "of mind-blowing generalization of the induction principle because normally induction",
    "start": "2983020",
    "end": "2989500"
  },
  {
    "text": "principle uh tells you well I proved something uh for the starting point and",
    "start": "2989500",
    "end": "2997900"
  },
  {
    "text": "then you know you make a step and I give you a proof that if",
    "start": "2997900",
    "end": "3003780"
  },
  {
    "text": "if you were able to get here that you can make another step and you'll get to the next point",
    "start": "3003780",
    "end": "3010740"
  },
  {
    "text": "right so if you prove something for for this place you know you started from Z you got here you know all happy uh I'll",
    "start": "3010740",
    "end": "3019260"
  },
  {
    "text": "tell you how to make the next step and and that's enough for you to cover",
    "start": "3019260",
    "end": "3025079"
  },
  {
    "text": "all the distance to any end right but the thing is that this step is kind",
    "start": "3025079",
    "end": "3032160"
  },
  {
    "text": "of discreet for natural numbers it goes from n to n plus one so there is like a",
    "start": "3032160",
    "end": "3039060"
  },
  {
    "text": "size of one between your steps and that that's what makes it easy",
    "start": "3039060",
    "end": "3045079"
  },
  {
    "text": "with identity types there is no step really because you're",
    "start": "3045079",
    "end": "3052380"
  },
  {
    "text": "dealing with arbitrary types you don't know you don't have a distance there you",
    "start": "3052380",
    "end": "3058260"
  },
  {
    "text": "can say you can make a step like this right but before you get there right you",
    "start": "3058260",
    "end": "3067140"
  },
  {
    "text": "you have to cover half of the distance right so maybe my induction should be",
    "start": "3067140",
    "end": "3073020"
  },
  {
    "text": "for half of a distance but before you get to half of the distance you have to get half of the half of the distance",
    "start": "3073020",
    "end": "3079220"
  },
  {
    "text": "right you see where I'm getting like it's it's kind of xenos paradox there",
    "start": "3079220",
    "end": "3084720"
  },
  {
    "text": "before you get fro before you make a a journey from one place to another you",
    "start": "3084720",
    "end": "3092280"
  },
  {
    "text": "know you have to make a little step and the sizes of these steps there is no",
    "start": "3092280",
    "end": "3098339"
  },
  {
    "text": "lower bound there is no like with integers you have one and you cannot go below one here there is no limit so",
    "start": "3098339",
    "end": "3108300"
  },
  {
    "text": "every path from one place to another and by",
    "start": "3108300",
    "end": "3115740"
  },
  {
    "text": "the way these equality uh types are called paths in homotopia type",
    "start": "3115740",
    "end": "3122460"
  },
  {
    "text": "Theory because they have they they have a model for this in actual hamotabi where these things correspond to paths",
    "start": "3122460",
    "end": "3129000"
  },
  {
    "text": "so the proofs of equality are paths from one place to another and what I'm saying",
    "start": "3129000",
    "end": "3135480"
  },
  {
    "text": "is that I have the proof of equality on the diagonal right",
    "start": "3135480",
    "end": "3141839"
  },
  {
    "text": "which has to serve me both as a starting value and as a step but what's the size",
    "start": "3141839",
    "end": "3149520"
  },
  {
    "text": "of this step the size of the step is zero so it's like moving an infinite",
    "start": "3149520",
    "end": "3155579"
  },
  {
    "text": "decimal distance and shrinking this infinitesimal",
    "start": "3155579",
    "end": "3160619"
  },
  {
    "text": "distance to zero and you get a path of size 0 which leads you from X to X",
    "start": "3160619",
    "end": "3167280"
  },
  {
    "text": "right and the fact that this works is it's just really truly miraculous you",
    "start": "3167280",
    "end": "3173700"
  },
  {
    "start": "3171000",
    "end": "3230000"
  },
  {
    "text": "know it's like you know you you get you get this path you shrink it shrink it shrink it and",
    "start": "3173700",
    "end": "3181200"
  },
  {
    "text": "because there is no granularity there you shrink it to zero and it still works",
    "start": "3181200",
    "end": "3187559"
  },
  {
    "text": "so shrinking this path to zero and getting raffle edges gives you enough information to",
    "start": "3187559",
    "end": "3196020"
  },
  {
    "text": "extend it to the whole path so I'm going to end with this like",
    "start": "3196020",
    "end": "3203180"
  },
  {
    "text": "wisdom I guess you know it's like every Journey Begins with reflection which",
    "start": "3203180",
    "end": "3209460"
  },
  {
    "text": "makes sense in this case of extending paths",
    "start": "3209460",
    "end": "3215099"
  },
  {
    "text": "starting from the proof of the minimum proof which is reflection",
    "start": "3215099",
    "end": "3220260"
  },
  {
    "text": "okay thank you [Applause]",
    "start": "3220260",
    "end": "3231159"
  }
]