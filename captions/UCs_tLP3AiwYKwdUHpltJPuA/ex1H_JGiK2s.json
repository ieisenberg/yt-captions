[
  {
    "text": "[Applause] good afternoon actually I'm kind of here on a little bit of a uh false pretenses",
    "start": "4520",
    "end": "12320"
  },
  {
    "text": "because although I'm going to be talking about Elixir what I'm really talking about is something slightly different",
    "start": "12320",
    "end": "18199"
  },
  {
    "text": "I'm really going to be talking about how changing the way or changing the language that you use can actually",
    "start": "18199",
    "end": "24560"
  },
  {
    "text": "change the way you think about programming in fact think about anything",
    "start": "24560",
    "end": "30000"
  },
  {
    "text": "so let me just start with a uh introduction I have been uh programming",
    "start": "30000",
    "end": "36239"
  },
  {
    "text": "for tomorrow is my birthday and so if you kind of like count it birthday to birthday I've been programming",
    "start": "36239",
    "end": "43120"
  },
  {
    "text": "for 43 years which I'm not even going to ask people to put up your hands if",
    "start": "43120",
    "end": "49079"
  },
  {
    "text": "you're less than 43 year olds because I just I just hate you anyway right so I've been programming a whole lot of",
    "start": "49079",
    "end": "55640"
  },
  {
    "text": "time and I'm an expert in all sorts of things and you know I'm a just Absolut the person oh all right",
    "start": "55640",
    "end": "63280"
  },
  {
    "text": "so yeah I'm an old F right why should you listen to me",
    "start": "63280",
    "end": "69520"
  },
  {
    "text": "well one thing is that us old farts get stuck in our ways right we tend to uh",
    "start": "69520",
    "end": "76680"
  },
  {
    "text": "latch onto something that works and we'll stick with it because after all you know it works um it depends on the",
    "start": "76680",
    "end": "85400"
  },
  {
    "text": "generation you are as to to what works or what doesn't work but you know they'll always be those things that just",
    "start": "85400",
    "end": "92560"
  },
  {
    "text": "are are absolutely perfect for you the thing I've observed though is it's not just us old farts that get",
    "start": "92560",
    "end": "99360"
  },
  {
    "text": "stuck young ones do too um and one of my my examples of that",
    "start": "99360",
    "end": "106000"
  },
  {
    "text": "right now is object orientation where people are saying you know sort of O is the only way to code",
    "start": "106000",
    "end": "112799"
  },
  {
    "text": "write code and you know we have languages like you know Ruby and JavaScript and Java or anything else oh",
    "start": "112799",
    "end": "120119"
  },
  {
    "text": "is the way to write code and that's clearly been the case because for my entire lifetime that's how people have",
    "start": "120119",
    "end": "125759"
  },
  {
    "text": "written code so what I want to try and do is to try and break you out of that just a little bit so why do we want to",
    "start": "125759",
    "end": "133120"
  },
  {
    "text": "get out of this well one of the problems is that it's really easy to get comfortable now when",
    "start": "133120",
    "end": "139560"
  },
  {
    "text": "I say comfortable it's relative I mean we're we're sitting in an industry where change is a given where changes",
    "start": "139560",
    "end": "145040"
  },
  {
    "text": "unbelievably fast I don't think any other industry changes at quite the rate we are changing",
    "start": "145040",
    "end": "151200"
  },
  {
    "text": "and I mean that's scary and it's hard it's hard to keep up it's hard to keep",
    "start": "151200",
    "end": "156360"
  },
  {
    "text": "current and it's hard to be productive so when we find something that seems to work we try and latch on",
    "start": "156360",
    "end": "163120"
  },
  {
    "text": "to that as a fixed point in the midst of all the rest of the chaos that's going on around us and so we'll get",
    "start": "163120",
    "end": "169120"
  },
  {
    "text": "comfortable with those fixed points until someone bumps us off onto another fixed point but when we do",
    "start": "169120",
    "end": "175879"
  },
  {
    "text": "that we get lazy and we stop looking into that particular area we make assumptions",
    "start": "175879",
    "end": "182560"
  },
  {
    "text": "object orientation that's the only way to do things classes that's the only way to Design Systems you know Unix that's",
    "start": "182560",
    "end": "188680"
  },
  {
    "text": "the only platform to deploy onto whatever it might be we have these assumptions and then we just get lazy",
    "start": "188680",
    "end": "194799"
  },
  {
    "text": "with them there is another uh sort of synonym",
    "start": "194799",
    "end": "200519"
  },
  {
    "text": "for lazy in this context and that's maintenance",
    "start": "200519",
    "end": "206720"
  },
  {
    "text": "programmer right people who don't change are are not going to be doing exciting",
    "start": "206720",
    "end": "211799"
  },
  {
    "text": "things 5 years from now 10 years from now now there's money in that people are",
    "start": "211799",
    "end": "218239"
  },
  {
    "text": "still making decent change you know maintaining Cobalt programs but I don't necessarily think",
    "start": "218239",
    "end": "224480"
  },
  {
    "text": "that's what you want to do with your lives so I think there's good reason for",
    "start": "224480",
    "end": "230720"
  },
  {
    "text": "us to move out of that comfort zone now I'm talking about this because I got",
    "start": "230720",
    "end": "236840"
  },
  {
    "text": "lazy I've been doing Ruby now since 98 I guess um so that's coming up on 20",
    "start": "236840",
    "end": "245400"
  },
  {
    "text": "years um and pretty much all of my programming life during that time has",
    "start": "245400",
    "end": "251000"
  },
  {
    "text": "been Ruby it's a bit of JavaScript but large by and large it's been Ruby and",
    "start": "251000",
    "end": "256160"
  },
  {
    "text": "that's great because I'm really good at Ruby you know I can I can code Ruby without even thinking about it you know",
    "start": "256160",
    "end": "263040"
  },
  {
    "text": "the way you can drive a car and get somewhere and not actually remember driving yeah well that's because your",
    "start": "263040",
    "end": "271720"
  },
  {
    "text": "brain has gone through this process of making something implicit in your head",
    "start": "271720",
    "end": "278000"
  },
  {
    "text": "there's actually a a triangle of learning uh called the dyus model and it's all about taking external stuff and",
    "start": "278000",
    "end": "285720"
  },
  {
    "text": "moving it internal so it becomes like below the level of conscious thought and when you first learn a drive",
    "start": "285720",
    "end": "293720"
  },
  {
    "text": "right it's White Knuckles you're no one can talk to you right I mean even just like you know switch the air",
    "start": "293720",
    "end": "300400"
  },
  {
    "text": "conditioning on her off was like a major exercise CU you got to take your hand off the wheel and stuff it's scary but",
    "start": "300400",
    "end": "306240"
  },
  {
    "text": "as you get better at it you just start to code fluently and naturally and that's because it's become",
    "start": "306240",
    "end": "312800"
  },
  {
    "text": "internalized and that's the same here you right I've been programming rubies so long literally I can write or I have",
    "start": "312800",
    "end": "319800"
  },
  {
    "text": "been writing code and don't actually remember writing it which is kind of",
    "start": "319800",
    "end": "326160"
  },
  {
    "text": "freaky but all along that time I was looking for a",
    "start": "327120",
    "end": "332919"
  },
  {
    "text": "language that would help me move away and help me move into the functional",
    "start": "332919",
    "end": "338880"
  },
  {
    "text": "world because I strongly believe that it's really almost",
    "start": "338880",
    "end": "344880"
  },
  {
    "text": "impossible to debate this right the future is definitely con current and I",
    "start": "344880",
    "end": "350039"
  },
  {
    "text": "think most people would recognize the future is functional so that's the world we're",
    "start": "350039",
    "end": "356600"
  },
  {
    "text": "going to live in and I was looking for a language that would let me a get into it myself and B help other people get into",
    "start": "356600",
    "end": "362759"
  },
  {
    "text": "it and I looked at a bunch of languages and I never really found something that gave me that kind of feeling that Ruby",
    "start": "362759",
    "end": "368800"
  },
  {
    "text": "gave me right Ruby is a fun language it's a good language it's a it makes me",
    "start": "368800",
    "end": "374919"
  },
  {
    "text": "feel good to write it right and I was looking for another language like this and I was talking to uh Corey",
    "start": "374919",
    "end": "382680"
  },
  {
    "text": "Haynes and I were doing a a course together giving a course and over breakfast I was like you know complaining that I couldn't find that",
    "start": "382680",
    "end": "388960"
  },
  {
    "text": "language and he said have you had a look at Elixir now I had had a look at Elixir",
    "start": "388960",
    "end": "394840"
  },
  {
    "text": "oh about a year previously and it was all right but I wasn't too impressed but when I got back that night I downloaded",
    "start": "394840",
    "end": "402160"
  },
  {
    "text": "Elixir and it felt exactly the same as the first time I downloaded",
    "start": "402160",
    "end": "408520"
  },
  {
    "text": "Ruby that I brought it up got it into a into an interactive shell and before I",
    "start": "408520",
    "end": "415440"
  },
  {
    "text": "knew it8 hours had passed which meant I was lousy the next giving my course but I knew I'd found",
    "start": "415440",
    "end": "422280"
  },
  {
    "text": "something that I liked so why do I like elixir so",
    "start": "422280",
    "end": "430120"
  },
  {
    "text": "much I like elixir because For the First Time for a long time I'm feeling",
    "start": "430120",
    "end": "435919"
  },
  {
    "text": "challenged I'm feeling challenged about all the old ways I thought about programming all the old ways I thought",
    "start": "435919",
    "end": "442360"
  },
  {
    "text": "about organizing applications right it's different and it's actually hard for an",
    "start": "442360",
    "end": "449800"
  },
  {
    "text": "old fart to change like that but I'm working on it so I really",
    "start": "449800",
    "end": "456960"
  },
  {
    "text": "honestly think that programming in Elixir has changed the way I think about programming I'm aware of that if I go",
    "start": "456960",
    "end": "464479"
  },
  {
    "text": "back to program Ruby now I program Ruby in a different way because of it so I",
    "start": "464479",
    "end": "470120"
  },
  {
    "text": "need a little token appeal to Authority here just to kind of make sure that everybody believes this is actually real",
    "start": "470120",
    "end": "476240"
  },
  {
    "text": "and I can't think of anything more serious here than lud wienstein the philosopher who by the way looks really",
    "start": "476240",
    "end": "482319"
  },
  {
    "text": "sad because he failed to get the part in the razor head but he wrote really",
    "start": "482319",
    "end": "488759"
  },
  {
    "text": "almost nothing he wrote a 65 page pamphlet he wrote a couple of papers and",
    "start": "488759",
    "end": "493960"
  },
  {
    "text": "apparently he wrote something for children I can't imagine um I got to",
    "start": "493960",
    "end": "499159"
  },
  {
    "text": "show you this just because it is so cool in the introduction to his one book he",
    "start": "499159",
    "end": "505879"
  },
  {
    "text": "writes how far my efforts agree with those of other philosophers I will not decide indeed what I have written here",
    "start": "505879",
    "end": "513360"
  },
  {
    "text": "CLA makes no claim to novelty in points of detail and therefore I give no sources because it is indifferent to me",
    "start": "513360",
    "end": "520518"
  },
  {
    "text": "whether what I have thought has already been thought before me by another this man is a",
    "start": "520519",
    "end": "530279"
  },
  {
    "text": "programmer anyway one of he the more famous quotes",
    "start": "532959",
    "end": "538839"
  },
  {
    "text": "out of the book the limits of my language are the limits of my",
    "start": "538839",
    "end": "545079"
  },
  {
    "text": "world and he actually goes on to say or to to quote prove that if you cannot",
    "start": "545079",
    "end": "551839"
  },
  {
    "text": "express it then it doesn't",
    "start": "551839",
    "end": "555519"
  },
  {
    "text": "exist there's a kind of trivial proof of that and that is if you can think of",
    "start": "557160",
    "end": "562760"
  },
  {
    "text": "something that exists that you can't express tell me what it",
    "start": "562760",
    "end": "568360"
  },
  {
    "text": "is see the thing I see clever right anyway and I actually believe that",
    "start": "568360",
    "end": "576920"
  },
  {
    "text": "there's a whole lot of work that's been done on this the the famous work uh was done by independently by two people",
    "start": "576920",
    "end": "584800"
  },
  {
    "text": "sapier and wolf uh back I guess in the 30s and they they came up with this",
    "start": "584800",
    "end": "590120"
  },
  {
    "text": "hypothesis that basically says language changes the way you think and that was like really cool and everybody liked it",
    "start": "590120",
    "end": "597040"
  },
  {
    "text": "um during the 60s it fell out of favor because it was kind of like saying that people that had different languages were",
    "start": "597040",
    "end": "603320"
  },
  {
    "text": "somehow less capable than other people but it's actually coming back into favor but in a slightly different way and if",
    "start": "603320",
    "end": "609680"
  },
  {
    "text": "this works which is always debatable here's a little bit of a BBC",
    "start": "609680",
    "end": "615600"
  },
  {
    "text": "documentary about a people called the HBA people oh I'm not getting sound hang on",
    "start": "615600",
    "end": "622000"
  },
  {
    "text": "a second let me see if I can",
    "start": "622000",
    "end": "627879"
  },
  {
    "text": "there we go Northern",
    "start": "630360",
    "end": "638720"
  },
  {
    "text": "Namibia home to a remarkable tribe the HBA what is the color of",
    "start": "638760",
    "end": "646720"
  },
  {
    "text": "water Buu which includes some greens and blues and dumo which includes different",
    "start": "646800",
    "end": "654320"
  },
  {
    "text": "greens but also Reds and Browns color which one is testing how",
    "start": "654320",
    "end": "660079"
  },
  {
    "text": "long it takes them to spot a color which is different from the others",
    "start": "660079",
    "end": "666000"
  },
  {
    "text": "no can you do the same thing again this is what they're looking at for us it's",
    "start": "666600",
    "end": "672320"
  },
  {
    "text": "quite hard to spot the odd one out okay can you point one more time",
    "start": "672320",
    "end": "678000"
  },
  {
    "text": "towards the different",
    "start": "678000",
    "end": "681079"
  },
  {
    "text": "color very good but for the himber it's easy to see",
    "start": "683240",
    "end": "689839"
  },
  {
    "text": "the green which is",
    "start": "689839",
    "end": "692760"
  },
  {
    "text": "different the next experiment is trickier for the HBA in this one they",
    "start": "696959",
    "end": "702200"
  },
  {
    "text": "are shown a circle of green squares which includes one blue square for us we",
    "start": "702200",
    "end": "707279"
  },
  {
    "text": "have separate words for green and blue but as the Hima have the same word for both it takes them longer to spot the",
    "start": "707279",
    "end": "715600"
  },
  {
    "text": "blue is that amazing right I mean that to us that blue jumps",
    "start": "718240",
    "end": "724600"
  },
  {
    "text": "out it's hard for them to see whereas for us that green looks just like all",
    "start": "724600",
    "end": "730519"
  },
  {
    "text": "the other greens and to them it jumps out the wildest thing is gave this talk",
    "start": "730519",
    "end": "736680"
  },
  {
    "text": "in Melbourne afterwards somebody came up with me held out their cell phone and there was a picture of that woman he'd",
    "start": "736680",
    "end": "742399"
  },
  {
    "text": "actually been to that Village the previous year and had met that woman which is kind of wild",
    "start": "742399",
    "end": "751160"
  },
  {
    "text": "so why does this work well no one's too sure but they've been using lots of functional MRIs and stuff like this and",
    "start": "751480",
    "end": "759480"
  },
  {
    "text": "it turns out that this effect only really works if the difference is in your right field",
    "start": "759480",
    "end": "765800"
  },
  {
    "text": "division and the reason is the right field division is actually transferred across to the left hand side of your brain where also a whole bunch of your",
    "start": "765800",
    "end": "773399"
  },
  {
    "text": "speech stuff is and there's a theory that there's some kind of cross-correlation between that",
    "start": "773399",
    "end": "779680"
  },
  {
    "text": "and vision if you look at from the left field of view you don't get that confusion there are other things that",
    "start": "779680",
    "end": "786480"
  },
  {
    "text": "prove this things like the stro effect where you have words written you know like you'll have the word blue but it'll",
    "start": "786480",
    "end": "792760"
  },
  {
    "text": "actually be colored red and then you'll have yellow and it'll be colored green and what you have to do is to say what",
    "start": "792760",
    "end": "798079"
  },
  {
    "text": "color it is and not what word it is and nobody can do that fast right it all",
    "start": "798079",
    "end": "804639"
  },
  {
    "text": "everybody trips up because you can't stop yourself reading the words so there's clearly some interaction",
    "start": "804639",
    "end": "812600"
  },
  {
    "text": "there so what does this meant for me",
    "start": "814079",
    "end": "818920"
  },
  {
    "text": "personally well Elixir as a programming language is uh kind of a little bit Ruby",
    "start": "819160",
    "end": "826720"
  },
  {
    "text": "like in terms of syntax it runs on top of the erlang virtual machine beam and",
    "start": "826720",
    "end": "833480"
  },
  {
    "text": "if you haven't used llang it is used probably to switch the majority of like",
    "start": "833480",
    "end": "839480"
  },
  {
    "text": "text messages in Europe I don't know what probably down here as well it's pretty much Universal it's used in",
    "start": "839480",
    "end": "845959"
  },
  {
    "text": "telephone exchanges and switches it's fundamentally a highly concurrent highly",
    "start": "845959",
    "end": "852160"
  },
  {
    "text": "resilient language uh written correctly Earl applications have nine nines",
    "start": "852160",
    "end": "859240"
  },
  {
    "text": "availability and part of the reason for that is the virtual machine also supports the hot swapping of code on a",
    "start": "859240",
    "end": "866240"
  },
  {
    "text": "per module basis including the migration of that mod data to a new format if necessary so it's a very nice well",
    "start": "866240",
    "end": "873800"
  },
  {
    "text": "tested environment Earl Lang's been around since the mid 80s um and people have been deploying IRL Lang code for",
    "start": "873800",
    "end": "880000"
  },
  {
    "text": "large large applications ever since so it's a uh a functional language uh not",
    "start": "880000",
    "end": "887199"
  },
  {
    "text": "as functional as a language like has but it's a functional language it's a concurrent language as I say it's",
    "start": "887199",
    "end": "893839"
  },
  {
    "text": "pragmatic for example when I say it's functional um you don't have to do things like worry about using Io if it",
    "start": "893839",
    "end": "900839"
  },
  {
    "text": "has side effects and this kind of stuff it's kind of like functional but you know Common Sense functional and I",
    "start": "900839",
    "end": "906720"
  },
  {
    "text": "personally find it to be fun there's all sorts of cool things you can do with Elixir for example it's homo ionic which",
    "start": "906720",
    "end": "914000"
  },
  {
    "text": "means the intermediate form of compiled Elixir is actually Elixir data",
    "start": "914000",
    "end": "919279"
  },
  {
    "text": "structures and that means the macro system can manipulate code directly right it's all just Elixir so it's got a",
    "start": "919279",
    "end": "927240"
  },
  {
    "text": "very nice very powerful macro system system and in fact most of the control structures in in Elixir are written in",
    "start": "927240",
    "end": "934240"
  },
  {
    "text": "Elixir so I mean it's a lisp in that kind of way not a real list but you I'm",
    "start": "934240",
    "end": "940560"
  },
  {
    "text": "getting there but it's different and it's different enough to make you think differently so I want to show you how",
    "start": "940560",
    "end": "947560"
  },
  {
    "text": "Elixir has worked for me two things I want to look at is",
    "start": "947560",
    "end": "952800"
  },
  {
    "text": "pattern matching and the fact and the obvious fact really that it's all about",
    "start": "952800",
    "end": "958120"
  },
  {
    "text": "transforming data so let's look first at patent matching",
    "start": "958120",
    "end": "963600"
  },
  {
    "text": "now normally when I give this talk I have like six or eight slides that talk about patent matching but everybody said",
    "start": "963600",
    "end": "969240"
  },
  {
    "text": "to me Australian audiences are smart and I just want you know the facts so here's",
    "start": "969240",
    "end": "974880"
  },
  {
    "text": "the one slide that condenses all of those things um in Elixir an equal sign is not",
    "start": "974880",
    "end": "981040"
  },
  {
    "text": "assignment instead it's an instruction to the compiler or the runtime I guess",
    "start": "981040",
    "end": "986519"
  },
  {
    "text": "to say make these two sides equal it's way more like the algebra that you",
    "start": "986519",
    "end": "991759"
  },
  {
    "text": "learned in school right CU in school if you say xal 1 you're not assigning one",
    "start": "991759",
    "end": "996920"
  },
  {
    "text": "to X you're just saying the two are the same thing and that's what we're doing here so after doing a equal sign one",
    "start": "996920",
    "end": "1004199"
  },
  {
    "text": "then the runtime is going to is going to bind a to the value one simply because",
    "start": "1004199",
    "end": "1009560"
  },
  {
    "text": "that's how they makes it true right having said that well once I've said a equals 1 it would then be perfectly",
    "start": "1009560",
    "end": "1015440"
  },
  {
    "text": "valid to say 1 equals a because that's also true um we have a comprehens uh sorry a um",
    "start": "1015440",
    "end": "1024120"
  },
  {
    "text": "here we have a uh tupal of two vet elements and on the right hand side",
    "start": "1024120",
    "end": "1029798"
  },
  {
    "text": "those two elements are two and three so to make that match or the only way to make it match the run time binds two to",
    "start": "1029799",
    "end": "1036120"
  },
  {
    "text": "C and 3 to D and the same thing applies on the next line there to",
    "start": "1036120",
    "end": "1041319"
  },
  {
    "text": "lists um elixa strings uh work the same kind of way so the little spaceship",
    "start": "1041319",
    "end": "1047360"
  },
  {
    "text": "operator there is string concatenate so I'm saying on the left hand side that",
    "start": "1047360",
    "end": "1052440"
  },
  {
    "text": "a string Elixir concatenated to something should be the same as Elixir",
    "start": "1052440",
    "end": "1059520"
  },
  {
    "text": "rocks and the only way to make that happen is to make rest uh the same as",
    "start": "1059520",
    "end": "1065880"
  },
  {
    "text": "rocks the string and then last but by no means least uh I can deal with variable length",
    "start": "1065880",
    "end": "1073400"
  },
  {
    "text": "lists by separating out the head and then the rest of the list so here I'm doing a p patent match on the list 1 2 3",
    "start": "1073400",
    "end": "1081760"
  },
  {
    "text": "4 5 6 and I'm saying the the variable head is going to get Bound To The Head",
    "start": "1081760",
    "end": "1087200"
  },
  {
    "text": "of the list that's one and the variable tail is going to get bound to the tail of the list which is 2 to six and that",
    "start": "1087200",
    "end": "1095320"
  },
  {
    "text": "will match any list of length one or greater it will not match an empty list",
    "start": "1095320",
    "end": "1102280"
  },
  {
    "text": "because there's no head patent matching uh is not just used",
    "start": "1102280",
    "end": "1107760"
  },
  {
    "text": "in those uh equal signs so here's an example of using patent matching in a case statement so file. open returns a",
    "start": "1107760",
    "end": "1115960"
  },
  {
    "text": "tupal and if the first element of that tupal is uh the symbol okay then the",
    "start": "1115960",
    "end": "1121480"
  },
  {
    "text": "second element is the uh device that you can read from uh if the first element is instead",
    "start": "1121480",
    "end": "1128000"
  },
  {
    "text": "the error symbol then the next element is the reason code that failed so here I",
    "start": "1128000",
    "end": "1136000"
  },
  {
    "text": "can match on this you'll notice that the match on the left hand side has one",
    "start": "1136000",
    "end": "1141840"
  },
  {
    "text": "constant and one variable so here the constant which is the symbol okay means that this will only match if file open",
    "start": "1141840",
    "end": "1148960"
  },
  {
    "text": "returns a tupal that starts with okay and then whatever is in the second thing gets uh Bound To That device variable",
    "start": "1148960",
    "end": "1156360"
  },
  {
    "text": "which I can then use on the right hand side to read from that",
    "start": "1156360",
    "end": "1161440"
  },
  {
    "text": "device patent matching also applies to functions so here is an anonymous",
    "start": "1161440",
    "end": "1166480"
  },
  {
    "text": "function in Elixir it's a single function but it actually contains two",
    "start": "1166480",
    "end": "1171520"
  },
  {
    "text": "function heads so if you like function signatures so the first line is the",
    "start": "1171520",
    "end": "1177320"
  },
  {
    "text": "function if you call it with three parameters the first one is the symbol plus then A and B whatever they may be",
    "start": "1177320",
    "end": "1183760"
  },
  {
    "text": "I'm going to return a plus b If instead I call it with the first symbol times",
    "start": "1183760",
    "end": "1190320"
  },
  {
    "text": "then I'm going to multiply the next two parameters so you can see I can call it there with three and four and get either",
    "start": "1190320",
    "end": "1196200"
  },
  {
    "text": "s or 12 that's ious function I can do the same thing with a named",
    "start": "1196200",
    "end": "1203400"
  },
  {
    "text": "function so here I'm patent matching this is somewhat confusingly this is one",
    "start": "1203400",
    "end": "1209600"
  },
  {
    "text": "function definition that again has two heads and one of the things the erlang",
    "start": "1209600",
    "end": "1216320"
  },
  {
    "text": "runtime does is it optimizes the crap out of these right it's actually uh to",
    "start": "1216320",
    "end": "1223480"
  },
  {
    "text": "give you an example Elixir supports utf8 and uh when you you support Unicode",
    "start": "1223480",
    "end": "1229919"
  },
  {
    "text": "you have to have a massive big lookup table that that's going to map things and tell you about combining characters",
    "start": "1229919",
    "end": "1235080"
  },
  {
    "text": "all this kind of stuff and typically people actually Implement that as some kind of hash a dictionary so they can",
    "start": "1235080",
    "end": "1241080"
  },
  {
    "text": "look it up based on character codes and things in elixer it's actually compiled",
    "start": "1241080",
    "end": "1247080"
  },
  {
    "text": "into tens of thousands of function heads each of the same name but with different",
    "start": "1247080",
    "end": "1254520"
  },
  {
    "text": "parameters and they did tests and that's actually more efficient than doing any other data",
    "start": "1254520",
    "end": "1261679"
  },
  {
    "text": "structure because the early runtime optimizes it so much which is pretty",
    "start": "1261679",
    "end": "1267799"
  },
  {
    "text": "cool so patent matching matches on shape and on content you can do destructuring",
    "start": "1267799",
    "end": "1274440"
  },
  {
    "text": "like when you have the um uh tupal with c and d in it you can destructure to get",
    "start": "1274440",
    "end": "1280000"
  },
  {
    "text": "the individual elements out and it's recursive so I can Nest things inside things and then do matching on those so",
    "start": "1280000",
    "end": "1286720"
  },
  {
    "text": "it's pretty cool so I'm using these instead of",
    "start": "1286720",
    "end": "1293640"
  },
  {
    "text": "conditional logic inside my functions nowadays so just to give you the world's",
    "start": "1293640",
    "end": "1298840"
  },
  {
    "text": "most boring example right this is the one everybody the only the only interesting thing",
    "start": "1298840",
    "end": "1305400"
  },
  {
    "text": "about Fibonacci is whether FIB zero is zero or one right and that's like big",
    "start": "1305400",
    "end": "1310720"
  },
  {
    "text": "controversy and we can all fight about that afterwards but let's assume it's zero so there's the definition of FCI",
    "start": "1310720",
    "end": "1316679"
  },
  {
    "text": "you'd get that in Wikipedia anywhere you look up Fibonacci it will look just like",
    "start": "1316679",
    "end": "1321960"
  },
  {
    "text": "that what's the Elixir implementation of that it looks like",
    "start": "1321960",
    "end": "1329080"
  },
  {
    "text": "that yeah FIB zero is zero FIB one is one FIB n is fib n minus one plus Fus",
    "start": "1329080",
    "end": "1335360"
  },
  {
    "text": "two Let's ignore the fact this is horrendously inefficient I just wanted to make a point okay so the key thing",
    "start": "1335360",
    "end": "1343799"
  },
  {
    "text": "here is I mean it speaks for itself really",
    "start": "1343799",
    "end": "1350520"
  },
  {
    "text": "the program the structure of the program",
    "start": "1354520",
    "end": "1359720"
  },
  {
    "text": "reflects the specification that you're implementing and then slightly more",
    "start": "1359720",
    "end": "1365960"
  },
  {
    "text": "subtly the implementation reflects the transformation that you're trying to",
    "start": "1365960",
    "end": "1373440"
  },
  {
    "text": "achieve and those two things together are the code that does what you want and",
    "start": "1373440",
    "end": "1380200"
  },
  {
    "text": "it took me a long time when I started coding this way to work out that I'm really not interested in state I'm",
    "start": "1380200",
    "end": "1387919"
  },
  {
    "text": "really interested in transforming State and once I worked that out it got a lot",
    "start": "1387919",
    "end": "1393320"
  },
  {
    "text": "easier and part of that is because my language for the last 25 years has been",
    "start": "1393320",
    "end": "1400000"
  },
  {
    "text": "object oriented and so I'm I'm blinded by this",
    "start": "1400000",
    "end": "1405159"
  },
  {
    "text": "idea that state is King right objects maintain state State um and the reality",
    "start": "1405159",
    "end": "1410799"
  },
  {
    "text": "is State doesn't do anything right if you had a choice between a program that was really really",
    "start": "1410799",
    "end": "1416559"
  },
  {
    "text": "good to holding State and a program that was really really good to transforming stuff which is the one that gives you business",
    "start": "1416559",
    "end": "1422440"
  },
  {
    "text": "value right you got to do a transformation to get value so I'm I'm",
    "start": "1422440",
    "end": "1427480"
  },
  {
    "text": "really learning something here with these programs let's look at a few more examples okay again these not",
    "start": "1427480",
    "end": "1434159"
  },
  {
    "text": "necessarily the way you'd Implement them in the real world but they illustrate the point length of a list the",
    "start": "1434159",
    "end": "1439440"
  },
  {
    "text": "specification is the length of an empty list is zero the length of any other list is one plus the length of the rest",
    "start": "1439440",
    "end": "1445880"
  },
  {
    "text": "of the list and if we look at the implementation in Elixir we get something like this okay pretty B pretty",
    "start": "1445880",
    "end": "1453760"
  },
  {
    "text": "straightforward pretty boring similarly for map map is slightly different so map",
    "start": "1453760",
    "end": "1459679"
  },
  {
    "text": "goes through a list and applies a function to each element in that list so the implementation of map looks",
    "start": "1459679",
    "end": "1465880"
  },
  {
    "text": "like this I'm going to map if I have an empty list I return the empty list otherwise if I map a list that has a",
    "start": "1465880",
    "end": "1473120"
  },
  {
    "text": "head and a tail my result is going to be the result of calling the function on the",
    "start": "1473120",
    "end": "1478480"
  },
  {
    "text": "head concatenated to the map of the",
    "start": "1478480",
    "end": "1483720"
  },
  {
    "text": "tail so let's look at something just a little bit more practical not much but a little maybe we",
    "start": "1487679",
    "end": "1495720"
  },
  {
    "text": "got the job of doing some runlength encoding to compress down a string of values or a list of values sorry so in",
    "start": "1495720",
    "end": "1503440"
  },
  {
    "text": "run length encoding I look for sequences that have the same value and I'm going to replace those with just one copy of",
    "start": "1503440",
    "end": "1510279"
  },
  {
    "text": "that value and a count so here in my list I have one and then three twos so",
    "start": "1510279",
    "end": "1517240"
  },
  {
    "text": "I'm going to replace that with two three as a tupal then I have a three I have",
    "start": "1517240",
    "end": "1522880"
  },
  {
    "text": "two fours so I have 42 5 and 6 4 right",
    "start": "1522880",
    "end": "1528039"
  },
  {
    "text": "so so that works or one way of implementing that would work something like this I have my input list and I",
    "start": "1528039",
    "end": "1534440"
  },
  {
    "text": "have my result and I'm going to look at my input list at the very start of my input list and see what to do so in this",
    "start": "1534440",
    "end": "1542200"
  },
  {
    "text": "case that one stands on its own so I'm just going to copy that straight down to my output now I'm looking at the input",
    "start": "1542200",
    "end": "1549000"
  },
  {
    "text": "list and I see that I have two twos so I know I have some duplication here so I'm",
    "start": "1549000",
    "end": "1554480"
  },
  {
    "text": "going to replace those two twos with a tuple two and then a count of two now",
    "start": "1554480",
    "end": "1560520"
  },
  {
    "text": "I'm looking at input list and seeing that the first element is a two repeated",
    "start": "1560520",
    "end": "1566399"
  },
  {
    "text": "it twice and the next element is a two so I can replace that with 2",
    "start": "1566399",
    "end": "1573559"
  },
  {
    "text": "three now I can't do anything else with that so I'm going to move that down to my output list now I'm looking at a",
    "start": "1573559",
    "end": "1578840"
  },
  {
    "text": "three nothing special so I move that down now I have a four oh look there's two of them so I'm going to replace that",
    "start": "1578840",
    "end": "1585000"
  },
  {
    "text": "with 42 then I'm going to copy it down EXC etc etc so if you are a Java or Ruby or a",
    "start": "1585000",
    "end": "1593799"
  },
  {
    "text": "conventional programming language programmer I want to think just for a second about how you would implement",
    "start": "1593799",
    "end": "1601600"
  },
  {
    "text": "this and think about the various edge cases that you have to deal with first",
    "start": "1601640",
    "end": "1606840"
  },
  {
    "text": "element of the list is part of a sequence the last element of the list is part of a",
    "start": "1606840",
    "end": "1612000"
  },
  {
    "text": "sequence sequences of length two sequences of length greater than two all of those kind of things that you have to",
    "start": "1612000",
    "end": "1617679"
  },
  {
    "text": "think about there's quite a few little edge cases and when I Was preparing for this talk I",
    "start": "1617679",
    "end": "1623559"
  },
  {
    "text": "actually coded this thing up in Ruby and sure enough I got bitten by one Edge case which was you know when the list",
    "start": "1623559",
    "end": "1630200"
  },
  {
    "text": "ends on a sequence and I had to go through and fix that how would you implement that using",
    "start": "1630200",
    "end": "1636600"
  },
  {
    "text": "patn matching so in a functional language",
    "start": "1636600",
    "end": "1641919"
  },
  {
    "text": "whenever you need to generate a result you're going to have to have some kind of well typically you're going to have to have some kind of additional variable",
    "start": "1641919",
    "end": "1648679"
  },
  {
    "text": "that you're going to stick that into or value so in this case I'm going to have a helper method my external API is",
    "start": "1648679",
    "end": "1655840"
  },
  {
    "text": "encode and I give it a list and I'm going to call an helper method underscore encode to which I pass that",
    "start": "1655840",
    "end": "1661559"
  },
  {
    "text": "list and my empty output array okay so if you like thinking in things in terms of invariance then you can say that the",
    "start": "1661559",
    "end": "1669240"
  },
  {
    "text": "concatenation of list and the output array is going to be the same logically",
    "start": "1669240",
    "end": "1674519"
  },
  {
    "text": "as the original list but it may include some compression so the easiest case to deal with is when",
    "start": "1674519",
    "end": "1682760"
  },
  {
    "text": "we just have some arbitrary element at the start of the list here a and a tail",
    "start": "1682760",
    "end": "1688200"
  },
  {
    "text": "all we're going to do is put that tail at the front of the result and then call ourselves again sorry put the put that",
    "start": "1688200",
    "end": "1695960"
  },
  {
    "text": "element a at the front of the result and then call ourselves again with tail yeah",
    "start": "1695960",
    "end": "1701279"
  },
  {
    "text": "so with just this code on one extra thing this this will basically copy the input to the output right there's an",
    "start": "1701279",
    "end": "1707640"
  },
  {
    "text": "edge you can do we have to deal with but we'll do that in a second now we have to look at the cases of compression one case of compression",
    "start": "1707640",
    "end": "1715360"
  },
  {
    "text": "is if that list oh I should have done this the wrong way around let me do it the other way around if the list starts",
    "start": "1715360",
    "end": "1721720"
  },
  {
    "text": "with two of the same value okay so that a during a patent match is going to get",
    "start": "1721720",
    "end": "1727960"
  },
  {
    "text": "bound to for example three yeah if the second value in order for it to match it",
    "start": "1727960",
    "end": "1734320"
  },
  {
    "text": "also has to be a three because it's the same a yeah so if my list starts with",
    "start": "1734320",
    "end": "1739600"
  },
  {
    "text": "two elements of the same value and then has the rest of the tail I am going to replace that input with a tupal of a and",
    "start": "1739600",
    "end": "1748760"
  },
  {
    "text": "then the count two and then just call myself again the next phrase here deals with a",
    "start": "1748760",
    "end": "1756480"
  },
  {
    "text": "case where the head of my list is that Tuple representing a and a count and",
    "start": "1756480",
    "end": "1763120"
  },
  {
    "text": "then if the next element in the list is also an a then I'm going to take it out the list and update my count so I",
    "start": "1763120",
    "end": "1769960"
  },
  {
    "text": "replace n by n + one and then",
    "start": "1769960",
    "end": "1775320"
  },
  {
    "text": "finally if I have an empty list I'm done yep so I've taken all the things",
    "start": "1775320",
    "end": "1781480"
  },
  {
    "text": "out of my my list I'm now done and just because I'm building up that output list",
    "start": "1781480",
    "end": "1787480"
  },
  {
    "text": "moving things to the head of it I actually have to reverse it to get it out and that's a very common pattern in Elixir and reverse is really fast so you",
    "start": "1787480",
    "end": "1794679"
  },
  {
    "text": "don't have to worry about it too much so",
    "start": "1794679",
    "end": "1800039"
  },
  {
    "text": "that's the code that does this run length enod encoding and this code when",
    "start": "1800480",
    "end": "1806159"
  },
  {
    "text": "I wrote it worked first time because I can see each of the conditions each of the states and it",
    "start": "1806159",
    "end": "1812200"
  },
  {
    "text": "just kind of like falls out and it's also easy to imagine changes to it so if I said to you we'll",
    "start": "1812200",
    "end": "1818519"
  },
  {
    "text": "only run lengthen code three or more yeah you can see what change to",
    "start": "1818519",
    "end": "1823720"
  },
  {
    "text": "make it's easier to test because each of these cases is broken out into a",
    "start": "1823720",
    "end": "1828760"
  },
  {
    "text": "separate thing that I could test if I needed to so that's pretty cool but if you look",
    "start": "1828760",
    "end": "1834559"
  },
  {
    "text": "at that you'll say there's a whole bunch of duplication in there I don't like that can we fix that and the answer is",
    "start": "1834559",
    "end": "1841000"
  },
  {
    "text": "yes we can fix that because what we're really doing if we just extract out the",
    "start": "1841000",
    "end": "1847480"
  },
  {
    "text": "Transformations if the input is empty then we're done the result was the values if the input contains two of the",
    "start": "1847480",
    "end": "1854799"
  },
  {
    "text": "same thing then we're going to replace it with that and and we we carry on with the same result if the input has a tuple",
    "start": "1854799",
    "end": "1862360"
  },
  {
    "text": "and the next thing is the same as the head of the Tuple then we'll replace it otherwise we copy the head of the input",
    "start": "1862360",
    "end": "1869360"
  },
  {
    "text": "to the result that's what our program does and we have this thing called input",
    "start": "1869360",
    "end": "1874480"
  },
  {
    "text": "and new input but we could replace those words with State and new",
    "start": "1874480",
    "end": "1881279"
  },
  {
    "text": "state and then what we have is a state",
    "start": "1881279",
    "end": "1886399"
  },
  {
    "text": "machine where we triggered by the next element on our input list and we use that and the state to work out what to",
    "start": "1886399",
    "end": "1893559"
  },
  {
    "text": "do next now whenever you say State machine people think oh that's cool",
    "start": "1893559",
    "end": "1898799"
  },
  {
    "text": "because my language has a library for doing State machines you know if you're a rails developer you may have used acts",
    "start": "1898799",
    "end": "1905000"
  },
  {
    "text": "as state machine you know or whatever there's always like a library well I'm here to tell you that",
    "start": "1905000",
    "end": "1911480"
  },
  {
    "text": "anybody that uses a library for a state machine is a fool because I mean in any language you",
    "start": "1911480",
    "end": "1917440"
  },
  {
    "text": "can just use a hash um in a functional language though there's actually a state",
    "start": "1917440",
    "end": "1922559"
  },
  {
    "text": "machine built into the library and it's called reduce all right so reduce basically",
    "start": "1922559",
    "end": "1929919"
  },
  {
    "text": "takes something that's inumerable and applies it to a function and at the same time passes an",
    "start": "1929919",
    "end": "1938159"
  },
  {
    "text": "accumulator value to that function and what that function does is take the element from the list and the",
    "start": "1938159",
    "end": "1943840"
  },
  {
    "text": "accumulator and returns a new value for the accumulator so in this case our",
    "start": "1943840",
    "end": "1949880"
  },
  {
    "text": "reduce is our state machine and we're passing into it the list and an empty",
    "start": "1949880",
    "end": "1955720"
  },
  {
    "text": "list which is our output and we're going to call encode which is our function which implements the state machine and",
    "start": "1955720",
    "end": "1963200"
  },
  {
    "text": "then all the rules for our state machine are simply here in this case statement so I'm going to look at the list and the",
    "start": "1963200",
    "end": "1970600"
  },
  {
    "text": "result and that table there is identical to that table I showed you on the previous",
    "start": "1970600",
    "end": "1976480"
  },
  {
    "text": "slide so we we've taken a whole bunch of code and reduced it down to a simple set",
    "start": "1976480",
    "end": "1982679"
  },
  {
    "text": "of rules right those three lines there are",
    "start": "1982679",
    "end": "1988279"
  },
  {
    "text": "all that's needed and in fact the rest of it is",
    "start": "1988279",
    "end": "1993559"
  },
  {
    "text": "boilerplate so if I want to run a state machine against any inumerable object that top thing there will do it and then",
    "start": "1993559",
    "end": "2000880"
  },
  {
    "text": "I just have to write my initial my little cases down the bottom there it's",
    "start": "2000880",
    "end": "2006080"
  },
  {
    "text": "a really super way to code code it's a really nice easy way to look at",
    "start": "2006080",
    "end": "2012519"
  },
  {
    "text": "coding and it's so much easier to work with now this isn't new I mean we've had",
    "start": "2012519",
    "end": "2018399"
  },
  {
    "text": "decision tables State machines since the 60s you know this kind of stuff we've",
    "start": "2018399",
    "end": "2024080"
  },
  {
    "text": "had Blackboard systems that do roughly the same kind of thing this isn't new but I've not seen anybody talk about",
    "start": "2024080",
    "end": "2031880"
  },
  {
    "text": "the functional side of the world as being a set of Transformations built into State machines right so functional",
    "start": "2031880",
    "end": "2038799"
  },
  {
    "text": "Transformations built in to State machines based on platin matching so in our runlength encoding",
    "start": "2038799",
    "end": "2045360"
  },
  {
    "text": "example we have our transformation there it's reduce we have our event plus the",
    "start": "2045360",
    "end": "2050760"
  },
  {
    "text": "state and then we have our transitions nice and",
    "start": "2050760",
    "end": "2056358"
  },
  {
    "text": "simple let me give you just a couple more examples one of the things I do when I",
    "start": "2056359",
    "end": "2063358"
  },
  {
    "text": "come across a language I like is I play with it right now I'll play with it by running through a typical set of",
    "start": "2063359",
    "end": "2068960"
  },
  {
    "text": "exercises um and if I really really like it and I want to commit the time my last",
    "start": "2068960",
    "end": "2074520"
  },
  {
    "text": "exercise is to write a markdown poer in that language and the reason is that markdown is phenomenally ugly I mean it",
    "start": "2074520",
    "end": "2082320"
  },
  {
    "text": "really is ugly it's totally unspecified as to how all the edge conditions work",
    "start": "2082320",
    "end": "2088839"
  },
  {
    "text": "and it's really difficult to actually come up with something regular that actually will pause it so here's an",
    "start": "2088839",
    "end": "2094960"
  },
  {
    "text": "example of markdown um and the lines with the underscores or the hyphens or",
    "start": "2094960",
    "end": "2101640"
  },
  {
    "text": "the equal signs are headings so system and types is actually a top level heading and then IDs and ports is",
    "start": "2101640",
    "end": "2108160"
  },
  {
    "text": "actually a second level heading this is actually some of the source code from The Elixir",
    "start": "2108160",
    "end": "2113599"
  },
  {
    "text": "book and in my markdown paer I actually have two separate State machines one of",
    "start": "2113599",
    "end": "2119760"
  },
  {
    "text": "which goes through and breaks my input up into tokens based on the",
    "start": "2119760",
    "end": "2125520"
  },
  {
    "text": "lines and then the second one is something that takes the lines and converts them into logical structures so",
    "start": "2125520",
    "end": "2132000"
  },
  {
    "text": "here for example the rule is that a blank line followed by a line of text",
    "start": "2132000",
    "end": "2137520"
  },
  {
    "text": "followed by a line of underscores or equal signs is a heading and the code that actually does",
    "start": "2137520",
    "end": "2144160"
  },
  {
    "text": "that in my state machine looks like this so if I'm pausing and my input at",
    "start": "2144160",
    "end": "2152760"
  },
  {
    "text": "the current Point contains a blank line a line of text and then the um cext",
    "start": "2152760",
    "end": "2159680"
  },
  {
    "text": "underlines which is those equal signs and minus signs followed by the rest of the input then I'm going to replace it",
    "start": "2159680",
    "end": "2166000"
  },
  {
    "text": "with a construct that represents a heading and then the rest of the",
    "start": "2166000",
    "end": "2171040"
  },
  {
    "text": "list so it's really easy I mean it's ridiculously easy so",
    "start": "2171040",
    "end": "2176880"
  },
  {
    "text": "I've have added new features to this by just adding additional State Transitions and I've been blown away",
    "start": "2176880",
    "end": "2183839"
  },
  {
    "text": "that they actually work right in every other markdown cars there I've written there's always been interactions between",
    "start": "2183839",
    "end": "2190880"
  },
  {
    "text": "things in this one it just falls out it just works it's",
    "start": "2190880",
    "end": "2196400"
  },
  {
    "text": "fantastic you can take this I think and make it large scale as",
    "start": "2196680",
    "end": "2202160"
  },
  {
    "text": "well so for example say that we were writing some kind of rest",
    "start": "2202160",
    "end": "2208480"
  },
  {
    "text": "service and we're handling something like I don't know a Groupon or living",
    "start": "2208480",
    "end": "2213520"
  },
  {
    "text": "social where we have um special offers that we want to offer our customers and some of those special offers are",
    "start": "2213520",
    "end": "2220000"
  },
  {
    "text": "local you know local shops some of them are National you know so like you know you just like an Amazon kind of thing",
    "start": "2220000",
    "end": "2226960"
  },
  {
    "text": "and we want to go and fetch the offers that are are for this particular customer and combine them together and",
    "start": "2226960",
    "end": "2233640"
  },
  {
    "text": "respond back showing them a nice page with all their offers and we would very much like to make those two things",
    "start": "2233640",
    "end": "2240319"
  },
  {
    "text": "asynchronous now I know that we could you know go and use flux or you know",
    "start": "2240319",
    "end": "2246160"
  },
  {
    "text": "some kind of reactive approach Ro to this or you know we could spend our entire week picking the libraries that",
    "start": "2246160",
    "end": "2251800"
  },
  {
    "text": "we're going to do use to do this but we don't need to because we can represent this as a simple",
    "start": "2251800",
    "end": "2258400"
  },
  {
    "text": "petet and if we do that we can represent it as a state machine so the code looks something like",
    "start": "2258400",
    "end": "2264520"
  },
  {
    "text": "this we're going to go look up our user then in parallel we're going to go find the local and remote um offers and then",
    "start": "2264520",
    "end": "2270680"
  },
  {
    "text": "we're going to format a response once both of those guys have come back if either of those guys come back with",
    "start": "2270680",
    "end": "2276079"
  },
  {
    "text": "error we're going to do something something different so remember that in the Run",
    "start": "2276079",
    "end": "2281960"
  },
  {
    "text": "length encoding I had that method at the bottom that had the case statement in it well the case statement for this whole",
    "start": "2281960",
    "end": "2288240"
  },
  {
    "text": "program would look something like this initially all my state has in it is",
    "start": "2288240",
    "end": "2294800"
  },
  {
    "text": "that I want to get a get office thing and I have some kind of authentication token so I'm going to transition that",
    "start": "2294800",
    "end": "2302040"
  },
  {
    "text": "into a new state where I have the same get off this thing but I'm adding a new field user and I'm going to go look that",
    "start": "2302040",
    "end": "2309280"
  },
  {
    "text": "user up based on the authentication tog now if that fails then my get user sorry",
    "start": "2309280",
    "end": "2315760"
  },
  {
    "text": "my user from is going to return nil in which case the next pattern is going to match and I'm going to respond not",
    "start": "2315760",
    "end": "2323440"
  },
  {
    "text": "authorized otherwise if I've got the user I'm going to send off two asynchronous requests one for the local",
    "start": "2323440",
    "end": "2329560"
  },
  {
    "text": "one for the remote and now I'm going to wait for them to come back to me if algorithm come back to me with an error",
    "start": "2329560",
    "end": "2336480"
  },
  {
    "text": "then I'm going to respond immediately with an error but if both of them come back without error now I can format my",
    "start": "2336480",
    "end": "2342800"
  },
  {
    "text": "response and send it",
    "start": "2342800",
    "end": "2345839"
  },
  {
    "text": "on so the",
    "start": "2353040",
    "end": "2359040"
  },
  {
    "text": "point is that I think you can think of patent matches as rules in a state",
    "start": "2359040",
    "end": "2365079"
  },
  {
    "text": "machine and each match then specifies the",
    "start": "2365079",
    "end": "2370359"
  },
  {
    "text": "transition which is a transformation of state of that machine and that",
    "start": "2370359",
    "end": "2376000"
  },
  {
    "text": "transformation is the application of functions and it works really really",
    "start": "2376000",
    "end": "2382440"
  },
  {
    "text": "nicely and compactly in a functional language and I think that gives us",
    "start": "2382440",
    "end": "2389359"
  },
  {
    "text": "interesting opportunities because it's easier to make parallel you effectively come up",
    "start": "2389359",
    "end": "2395520"
  },
  {
    "text": "with a DSL every time you write something cuz that little State transition table is your DSL and if you",
    "start": "2395520",
    "end": "2401280"
  },
  {
    "text": "wanted to you could actually take that a step further and if you want to have like a more business level DSL you could",
    "start": "2401280",
    "end": "2406400"
  },
  {
    "text": "have something that generates that state transition table for you it gives you some really nice reuse",
    "start": "2406400",
    "end": "2412640"
  },
  {
    "text": "capabilities because each thing is just a single transition and each transition is pure so therefore you can use that",
    "start": "2412640",
    "end": "2419359"
  },
  {
    "text": "code anywhere you want it's easier to test because you can test it transition at a time",
    "start": "2419359",
    "end": "2428319"
  },
  {
    "text": "and I think you get better error handling this is where I'm kind of like a little bit out in the limb my experience has been so far that I can do",
    "start": "2428319",
    "end": "2435280"
  },
  {
    "text": "better error handling because I can say where in the state States I am and that will affect the kind of error messages I",
    "start": "2435280",
    "end": "2441359"
  },
  {
    "text": "give um but I'm not too sure that's 100% the case but I still think that by",
    "start": "2441359",
    "end": "2448640"
  },
  {
    "text": "thinking about your coding a little bit differently you can do some amazing things now is this specific to Elixir",
    "start": "2448640",
    "end": "2456920"
  },
  {
    "text": "Absol absolutely not you could do the same thing in any language you'd have to do a little bit of word with tokenizing",
    "start": "2456920",
    "end": "2462960"
  },
  {
    "text": "to get the state matching stuff done but really it's just you know a look up",
    "start": "2462960",
    "end": "2468440"
  },
  {
    "text": "based on the current state and an event to generate the next state nothing special but I would never have thought",
    "start": "2468440",
    "end": "2475319"
  },
  {
    "text": "that this was really neat and tidy until I made used a language that made it easy to express and that comes back to the",
    "start": "2475319",
    "end": "2483240"
  },
  {
    "text": "HBA right if you have words to express it if you have a syntax that lets you express it then it's a lot easier to",
    "start": "2483240",
    "end": "2489720"
  },
  {
    "text": "think about and a lot easier to be to to uh come up with so I think one of the",
    "start": "2489720",
    "end": "2497440"
  },
  {
    "text": "things I would encourage everyone to do here and I'm not touting Elixir frankly I don't give a damn what language you",
    "start": "2497440",
    "end": "2503520"
  },
  {
    "text": "run I really don't but I really do want you to think about thinking differently",
    "start": "2503520",
    "end": "2511079"
  },
  {
    "text": "explore new things try new languages try new techniques if you've not used a",
    "start": "2511079",
    "end": "2517680"
  },
  {
    "text": "functional language use a functional language if you not use a dynamic language use a dynamic language if you haven't used a static language try using",
    "start": "2517680",
    "end": "2523960"
  },
  {
    "text": "a statically typed language try new things because each of those things will add to your vocabulary add to your",
    "start": "2523960",
    "end": "2531160"
  },
  {
    "text": "abilities add to your experiences so when you think differently I want you to program",
    "start": "2531160",
    "end": "2538160"
  },
  {
    "text": "differently and then when you do that please don't just go and write a version",
    "start": "2538880",
    "end": "2545160"
  },
  {
    "text": "of rails in that language right let's not repeat yesterday's",
    "start": "2545160",
    "end": "2552000"
  },
  {
    "text": "mistakes let's not rebuild yesterday's successes let's get out there and use",
    "start": "2552000",
    "end": "2558400"
  },
  {
    "text": "these new ideas to create new things and move us all",
    "start": "2558400",
    "end": "2564200"
  },
  {
    "text": "forward and let's have fun thank you",
    "start": "2564200",
    "end": "2570490"
  },
  {
    "text": "[Applause]",
    "start": "2570490",
    "end": "2575340"
  }
]