[
  {
    "start": "0",
    "end": "93000"
  },
  {
    "text": "[Music]",
    "start": "4760",
    "end": "7849"
  },
  {
    "text": "thank you hi and welcome so my name is",
    "start": "12730",
    "end": "20119"
  },
  {
    "text": "Stephen McGill I'm CEO of a company called muse dev which is actually",
    "start": "20119",
    "end": "25970"
  },
  {
    "text": "developing tools that that look into code quality and security automation but",
    "start": "25970",
    "end": "31490"
  },
  {
    "text": "in this talk I'm actually coming at it from a different perspective not talking so much about what we're building but",
    "start": "31490",
    "end": "37129"
  },
  {
    "text": "about the broader trends in the industry and in this space and this really comes from my background before muse dev which",
    "start": "37129",
    "end": "44089"
  },
  {
    "text": "is I spent about 20 years doing computer science research into static code",
    "start": "44089",
    "end": "50089"
  },
  {
    "text": "analysis program analysis program security building tools and it's been",
    "start": "50089",
    "end": "55459"
  },
  {
    "text": "really cool seeing what was research technology ten years ago have impact in",
    "start": "55459",
    "end": "62420"
  },
  {
    "text": "industry in particular when it comes to some of the larger tech companies places",
    "start": "62420",
    "end": "67729"
  },
  {
    "text": "like Google Facebook and uber and so I'll be talking about what's happening",
    "start": "67729",
    "end": "73280"
  },
  {
    "text": "at those companies and the way that they're using some of these tools the tools they're developing internally and the impact that's having and then talk",
    "start": "73280",
    "end": "80540"
  },
  {
    "text": "about how the broader community can adopt some of these and benefit from them all right so as was announced",
    "start": "80540",
    "end": "89450"
  },
  {
    "text": "reminder rate the session so that the organizers know what everyone thinks I",
    "start": "89450",
    "end": "95390"
  },
  {
    "start": "93000",
    "end": "93000"
  },
  {
    "text": "want to start off by just talking about why I'm talking about go-to code quality",
    "start": "95390",
    "end": "100730"
  },
  {
    "text": "and it's really because code quality is essential and code quality is essential because software is so essential right",
    "start": "100730",
    "end": "107060"
  },
  {
    "text": "now right that the scale of software deployments that we have now mean that",
    "start": "107060",
    "end": "112150"
  },
  {
    "text": "small errors in a single piece of code can have a huge impact from a business",
    "start": "112150",
    "end": "118400"
  },
  {
    "text": "standpoint and just from a societal standpoint so I think everyone's",
    "start": "118400",
    "end": "123710"
  },
  {
    "text": "favorite example of this lately in the security community is the Equifax breach",
    "start": "123710",
    "end": "128959"
  },
  {
    "text": "so here code quality and security poor security practices led to",
    "start": "128959",
    "end": "136500"
  },
  {
    "text": "the leaking of the Social Security numbers for about 45 percent of the population so that was obviously bad it",
    "start": "136500",
    "end": "145050"
  },
  {
    "text": "was bad for those people whose Social Security numbers got stolen it was also bad for Equifax the stock",
    "start": "145050",
    "end": "150270"
  },
  {
    "text": "price so the graph that you see down there is the graph of their stock price over time you can probably guess around",
    "start": "150270",
    "end": "156209"
  },
  {
    "text": "when the announcement was made at the same time that code quality is is so",
    "start": "156209",
    "end": "162959"
  },
  {
    "text": "important and security in particular the scale of code is increasing right so",
    "start": "162959",
    "end": "168240"
  },
  {
    "text": "code is getting more and more complex the graph over at the right here is size",
    "start": "168240",
    "end": "173250"
  },
  {
    "text": "of the Linux kernel it's color-coded by component drivers versus core wares networking and so forth and but this is",
    "start": "173250",
    "end": "181320"
  },
  {
    "text": "you know I could have picked any software project here right the scale of code is is becoming really immense and",
    "start": "181320",
    "end": "188160"
  },
  {
    "text": "so it gets harder and harder to know that that nothing's happening nothing's slipping through the cracks and so this",
    "start": "188160",
    "end": "194790"
  },
  {
    "text": "is what really we're tooling comes into play and in particular one thing that",
    "start": "194790",
    "end": "200820"
  },
  {
    "start": "195000",
    "end": "195000"
  },
  {
    "text": "can help is applying more tools during development and the during development part is critical and I'll talk more",
    "start": "200820",
    "end": "206580"
  },
  {
    "text": "about that in a bit but then also I think even more important are the social",
    "start": "206580",
    "end": "211680"
  },
  {
    "text": "and cultural processes that can help drive adoption here right because it doesn't matter what tools you're using",
    "start": "211680",
    "end": "216870"
  },
  {
    "text": "if nobody cares about them or nobody uses them or people look for ways around them and so you know how can we minimize",
    "start": "216870",
    "end": "224010"
  },
  {
    "text": "the chances of that happening so that the the tools we adopt the technology we adopt the initiatives that we create",
    "start": "224010",
    "end": "230489"
  },
  {
    "text": "actually have impact so these are the two focuses of the talk and one trend",
    "start": "230489",
    "end": "238980"
  },
  {
    "text": "really like the trend that I'm going to focus on a lot here so I'm talking there's a lot of there's a lot of tools",
    "start": "238980",
    "end": "245250"
  },
  {
    "start": "240000",
    "end": "240000"
  },
  {
    "text": "that can help improve code quality and security things like instrumentation and monitoring down there at the bottom",
    "start": "245250",
    "end": "250890"
  },
  {
    "text": "having insight into what happens in production when your application is running this is super important testing",
    "start": "250890",
    "end": "257600"
  },
  {
    "text": "other sorts of dynamic analysis fuzz different types of testing right fuzz testing mutation based testing",
    "start": "257600",
    "end": "263070"
  },
  {
    "text": "integration testing all of that I'm focusing on static analysis mostly",
    "start": "263070",
    "end": "268349"
  },
  {
    "text": "because it's it's my background as I mentioned I've been doing research in this area for a long time and also it's a an area",
    "start": "268349",
    "end": "275840"
  },
  {
    "text": "where there's really been significant disruption recently people have improved",
    "start": "275840",
    "end": "281270"
  },
  {
    "text": "the technology a lot and then also found better ways to integrate the technology into the human side of the development",
    "start": "281270",
    "end": "287420"
  },
  {
    "text": "process and so really the biggest impact has been traditionally static analysis",
    "start": "287420",
    "end": "294470"
  },
  {
    "text": "tools applied here sort of after development after code review after often deployment and so you know if like",
    "start": "294470",
    "end": "302540"
  },
  {
    "text": "static analysis tools have been around forever right why am I here in 2019 talking about it it's because you know",
    "start": "302540",
    "end": "310970"
  },
  {
    "text": "traditionally it's been applied you know like maybe on a nightly build maybe weekly maybe it's someone's job once a",
    "start": "310970",
    "end": "317540"
  },
  {
    "text": "month to check you know the results from some static analysis tool some of you who use certain static analysis tools in",
    "start": "317540",
    "end": "323540"
  },
  {
    "text": "production might be familiar with those sorts of quality assurance type workflows right where there's a separate",
    "start": "323540",
    "end": "328790"
  },
  {
    "text": "step maybe a separate team whose job it is to like look at the results of these things and and go through them and get",
    "start": "328790",
    "end": "335120"
  },
  {
    "text": "them to developers but um what's happened recently and the problem with",
    "start": "335120",
    "end": "340220"
  },
  {
    "text": "this right is that when when you discover an error at that point the",
    "start": "340220",
    "end": "345260"
  },
  {
    "text": "codes you know it was written best case yesterday worst case like a month ago no",
    "start": "345260",
    "end": "352280"
  },
  {
    "text": "one wants to go back and you know fix errors you know from that long ago it's",
    "start": "352280",
    "end": "357860"
  },
  {
    "text": "harder to tell whether it's a true error not because you know everyone has paged out that piece of code you're working on",
    "start": "357860",
    "end": "362930"
  },
  {
    "text": "the new piece of code it's just not a good workflow when you want people to actually pay attention so one trend has",
    "start": "362930",
    "end": "372170"
  },
  {
    "text": "been there we go oops yeah basically",
    "start": "372170",
    "end": "377780"
  },
  {
    "text": "flipping these two steps right so that static analysis can happen before code review when the code is still recently",
    "start": "377780",
    "end": "386030"
  },
  {
    "text": "written before it's in production and and the advantage of this is not just",
    "start": "386030",
    "end": "391250"
  },
  {
    "text": "that it's happening earlier in the process but that the results can then feed into the code review process",
    "start": "391250",
    "end": "397040"
  },
  {
    "text": "alongside the results from testing the results from you know maybe revision control metrics you know who",
    "start": "397040",
    "end": "402860"
  },
  {
    "text": "the change how big the changes other sorts of analyses and this is great",
    "start": "402860",
    "end": "407900"
  },
  {
    "text": "because a code review is sort of this this gate process right like if you want to prevent errors from going into",
    "start": "407900",
    "end": "414020"
  },
  {
    "text": "production this is a great place to do it and it's also uniform right everybody",
    "start": "414020",
    "end": "419240"
  },
  {
    "text": "is using the code review system but also I think more importantly it's the social process where everyone is getting",
    "start": "419240",
    "end": "425900"
  },
  {
    "text": "together to look at a code change and determine you know is this good does",
    "start": "425900",
    "end": "431330"
  },
  {
    "text": "this meet our quality bar right and does it meet it from the security perspective does it meet it from an architectural",
    "start": "431330",
    "end": "436969"
  },
  {
    "text": "and design perspective and so having these results as part of that discussion",
    "start": "436969",
    "end": "443349"
  },
  {
    "text": "has a huge impact on how seriously they're taken and whether they paid",
    "start": "443349",
    "end": "448520"
  },
  {
    "text": "attention to at the same time it puts a high burden on the tools right because",
    "start": "448520",
    "end": "454090"
  },
  {
    "text": "they need to be providing useful actionable information right otherwise this just becomes noise in the process",
    "start": "454090",
    "end": "460250"
  },
  {
    "text": "and it doesn't matter you know how well integrated these things are people are going to start ignoring them it also",
    "start": "460250",
    "end": "467930"
  },
  {
    "text": "presents a challenge in that it's pretty severely time-boxed right code review",
    "start": "467930",
    "end": "474229"
  },
  {
    "text": "you can't you can't run analysis for eight hours and expect somebody to look at it by code review time right",
    "start": "474229",
    "end": "480139"
  },
  {
    "text": "you know usually well it depends right what the what the time frame is different companies will have different",
    "start": "480139",
    "end": "485870"
  },
  {
    "text": "time frames but you know I like to think of like 20-25 minutes as like you need",
    "start": "485870",
    "end": "492889"
  },
  {
    "text": "to have results turned around by then to really know that you're gonna not slow",
    "start": "492889",
    "end": "498050"
  },
  {
    "text": "down code review okay and so that limits the sort of analysis you can do and like",
    "start": "498050",
    "end": "503779"
  },
  {
    "text": "I'm gonna I'm going to talk a lot about this sort of spectrum of static analysis",
    "start": "503779",
    "end": "509360"
  },
  {
    "text": "so there's a lot of different techniques ranging from what I'll call just colloquially shallow analyses to deep",
    "start": "509360",
    "end": "515750"
  },
  {
    "text": "analyses and those come with trade-offs in terms of efficiency right so shallow",
    "start": "515750",
    "end": "522110"
  },
  {
    "text": "analyses often the things I throw in that bucket run in like seconds over large code bases very deep analyses can",
    "start": "522110",
    "end": "529430"
  },
  {
    "text": "take hours and hours right but there has been a trend and this is due to some",
    "start": "529430",
    "end": "536279"
  },
  {
    "text": "some recent research in the last 10 or so years that's enabled certain types of analyses that are actually understanding",
    "start": "536279",
    "end": "544259"
  },
  {
    "text": "quite a bit about the code to run on a much faster timeframe and so I'm going to be talking just about tools that fall",
    "start": "544259",
    "end": "550680"
  },
  {
    "text": "in this gap right seconds two minutes of execution time over a large code basis",
    "start": "550680",
    "end": "555779"
  },
  {
    "text": "so we're large means up to millions of lines good all right so then the rest of",
    "start": "555779",
    "end": "562620"
  },
  {
    "text": "the talk is going to focus on what tools exist in this space what range of",
    "start": "562620",
    "end": "567930"
  },
  {
    "text": "techniques do they employ like how do they work and then how are they being applied by large tech companies so what",
    "start": "567930",
    "end": "574499"
  },
  {
    "text": "impact have they had you know why should we care about these tools other than just curiosity but first I'm going to",
    "start": "574499",
    "end": "581610"
  },
  {
    "text": "explain what I mean by static analysis so you know maybe you maybe you've heard",
    "start": "581610",
    "end": "587430"
  },
  {
    "text": "this term maybe you've heard lots of different terms you know linters bug finders static analysis verification",
    "start": "587430",
    "end": "596220"
  },
  {
    "text": "tools you know like what do all these mean and and so I'm gonna talk a bit about that and so static analysis is",
    "start": "596220",
    "end": "603839"
  },
  {
    "text": "really sort of the general term for all of these things anything that's basically anything that's looking at the",
    "start": "603839",
    "end": "609000"
  },
  {
    "text": "program and able to say something about the program behavior of the program without running it right so basically",
    "start": "609000",
    "end": "614670"
  },
  {
    "text": "the world divides into static analysis and dynamic analysis and dynamic analysis is all the testing you know",
    "start": "614670",
    "end": "621809"
  },
  {
    "text": "performance load testing mutation based testing fuzz testing can colic execution",
    "start": "621809",
    "end": "627000"
  },
  {
    "text": "based testing if you know what that is all of those require running the program to collect data and do some analysis",
    "start": "627000",
    "end": "632970"
  },
  {
    "text": "static analysis is what can you do without running the program and there's generally two types of information you",
    "start": "632970",
    "end": "639870"
  },
  {
    "text": "might care about you might want to know negative results so this piece of data",
    "start": "639870",
    "end": "645779"
  },
  {
    "text": "is not properly encrypted at this point in the program that's a useful thing to know if you're trying to establish certain security properties or you might",
    "start": "645779",
    "end": "654449"
  },
  {
    "text": "be interested in the positive statement that data is actually properly encrypted everywhere everywhere that we encrypt",
    "start": "654449",
    "end": "660660"
  },
  {
    "text": "data where we have sort of guidelines about what should be encrypted we're doing that properly and so these two",
    "start": "660660",
    "end": "666779"
  },
  {
    "text": "worlds are often described as bug finding on the left and verification",
    "start": "666779",
    "end": "673890"
  },
  {
    "text": "on the right so if you ever hear the term verification just means a static analysis that is able to make these very",
    "start": "673890",
    "end": "679380"
  },
  {
    "text": "strong claims about some aspect of the program's behavior being correct",
    "start": "679380",
    "end": "685670"
  },
  {
    "text": "we're in general a lot of analyses can be tuned to some extent between these",
    "start": "685730",
    "end": "692399"
  },
  {
    "text": "two extremes certainly when you're designing an analysis you sit down and you think well how how complete do I",
    "start": "692399",
    "end": "700470"
  },
  {
    "text": "want it to be how much sure do I want to be that I'm finding all the errors in the code versus just sort of best",
    "start": "700470",
    "end": "707130"
  },
  {
    "text": "various best effort approaches right I'll try and find the bugs that I can find I'm not gonna worry about finding all of them but you know maybe I'll",
    "start": "707130",
    "end": "714060"
  },
  {
    "text": "focus on something else maybe I'll make sure that when I report a bug I'm really sure I'm like really confident that it was a bug and so I'm gonna focus mostly",
    "start": "714060",
    "end": "723269"
  },
  {
    "text": "on the bug finding side of the spectrum those are the techniques that have really had the biggest impact from a",
    "start": "723269",
    "end": "729240"
  },
  {
    "text": "static analysis perspective although I'll say a little bit about the right-hand side later all right",
    "start": "729240",
    "end": "736740"
  },
  {
    "text": "so like I said just say something without running the program what can you",
    "start": "736740",
    "end": "741839"
  },
  {
    "text": "say something about there's a wide variety of things so security performance readability maintainability",
    "start": "741839",
    "end": "749300"
  },
  {
    "text": "maintainability being sort of readability plus plus things like tight coupling lack of tight coupling",
    "start": "749300",
    "end": "757579"
  },
  {
    "text": "reliability of various types of correctness and we hear the most about static analysis in the security space",
    "start": "757579",
    "end": "763350"
  },
  {
    "text": "but actually a lot of the work I'll be talking about is focused much more broadly than that it's security yes but",
    "start": "763350",
    "end": "771600"
  },
  {
    "text": "also just general reliability performance and and developer productivity right like if you can find",
    "start": "771600",
    "end": "778079"
  },
  {
    "text": "an error whether it's a secure even if it's just a functionality or performance error you can find it during development instead of after an overnight",
    "start": "778079",
    "end": "785160"
  },
  {
    "text": "integration testing run that that lets developers move a lot faster all right",
    "start": "785160",
    "end": "792709"
  },
  {
    "start": "792000",
    "end": "792000"
  },
  {
    "text": "so I still haven't said what is static analysis I've sort of said what it can do and so here is I think the simplest",
    "start": "792709",
    "end": "800399"
  },
  {
    "text": "thing that satisfies the definition that put up there a static analysis which is string search or grep right so there",
    "start": "800399",
    "end": "809950"
  },
  {
    "text": "were probably more static analysis tools built on grep than anything else because it's like I mean it's the go-to and you",
    "start": "809950",
    "end": "817110"
  },
  {
    "text": "certain patterns you absolutely can find in a code base using this right so like",
    "start": "817110",
    "end": "822339"
  },
  {
    "text": "here's an example you want to say say you have this Anna Connection routine",
    "start": "822339",
    "end": "827890"
  },
  {
    "text": "that sets up a encrypted communications channel you pass in what crypto system",
    "start": "827890",
    "end": "833050"
  },
  {
    "text": "to use and you want to say well we shouldn't use less secure crypto systems and so Triple DES there is is not",
    "start": "833050",
    "end": "840070"
  },
  {
    "text": "considered very secure and so you might want to outlaw that in your code base",
    "start": "840070",
    "end": "845170"
  },
  {
    "text": "alright so then you can just search for code that contains that may be making some allowance for whitespace okay so",
    "start": "845170",
    "end": "850269"
  },
  {
    "text": "that's like the very simplest end of the spectrum more advanced would be to look",
    "start": "850269",
    "end": "855940"
  },
  {
    "text": "at a graph based representation of the program so and there's various types of graphs you might be interested in",
    "start": "855940",
    "end": "860970"
  },
  {
    "text": "control flow like what executes sin what order data flow what values flow to other parts of the program and so a",
    "start": "860970",
    "end": "867610"
  },
  {
    "text": "value data flow value perspective might allow you to say does the value 3 does",
    "start": "867610",
    "end": "874060"
  },
  {
    "text": "ever flow to the unit connection method right and so that picks up sort of like uses like on the left where it's just",
    "start": "874060",
    "end": "879699"
  },
  {
    "text": "like that constant right there in that syntactic context gets you a little bit more general than that and so you can",
    "start": "879699",
    "end": "884949"
  },
  {
    "text": "say you know is this flowing in here and then more advanced still is something",
    "start": "884949",
    "end": "890829"
  },
  {
    "text": "I'm calling for the purposes of this talk I'm calling compositional program analysis but this is sort of a more",
    "start": "890829",
    "end": "897779"
  },
  {
    "text": "whole program view of the system where you can look at things like this is a",
    "start": "897779",
    "end": "903430"
  },
  {
    "text": "threading example so maybe you have a representation of the UI thread and a representation of the network thread and",
    "start": "903430",
    "end": "908880"
  },
  {
    "text": "and you want to know that the UI thread in the network thread are always properly synchronized right alright and",
    "start": "908880",
    "end": "916720"
  },
  {
    "text": "I'm gonna I am gonna talk about tools that hit each of these each of these types and so what kind of things can you",
    "start": "916720",
    "end": "924100"
  },
  {
    "text": "find with these different approaches well shallow analyses definitely have",
    "start": "924100",
    "end": "929410"
  },
  {
    "text": "their place they find valuable things like simple API misuse bugs deprecated",
    "start": "929410",
    "end": "934930"
  },
  {
    "text": "API is that's you know totally just a basically text search problem leaked authentication",
    "start": "934930",
    "end": "940990"
  },
  {
    "text": "tokens these are very valuable things to do and then deeper analyses let you pick",
    "start": "940990",
    "end": "947380"
  },
  {
    "text": "up things like memory safety errors or thread safety problems performance",
    "start": "947380",
    "end": "952510"
  },
  {
    "text": "issues and so that the distinction to keep in mind between what's on the left and what's the right really is that",
    "start": "952510",
    "end": "959410"
  },
  {
    "text": "types of errors on the right you can imagine writing lots of code that would cause a problem for that class right",
    "start": "959410",
    "end": "965830"
  },
  {
    "text": "there's lots of code that causes a memory error causes a you know seg fault in C right it's not it's not about a",
    "start": "965830",
    "end": "972190"
  },
  {
    "text": "particular syntactic construction it's just a general property of code that's",
    "start": "972190",
    "end": "977680"
  },
  {
    "text": "written without certain considerations in mind all right all right so now I'm",
    "start": "977680",
    "end": "983230"
  },
  {
    "start": "981000",
    "end": "981000"
  },
  {
    "text": "gonna I'm gonna give specific tools and so these are this is like my go-to list",
    "start": "983230",
    "end": "988570"
  },
  {
    "text": "of if you're gonna pick up three or four tools to fold into your tool chain look at these and and they're going to be",
    "start": "988570",
    "end": "995350"
  },
  {
    "text": "examples from different points on that spectrum that I talked about before going from sort of shallow to deeper",
    "start": "995350",
    "end": "1001620"
  },
  {
    "text": "analyses so if down at the bottom I have I have this spectrum going from grep at",
    "start": "1001620",
    "end": "1007410"
  },
  {
    "text": "the far left to like I don't know this this matrix style like we see the code",
    "start": "1007410",
    "end": "1013380"
  },
  {
    "text": "and we know everything that's happening view on the right right and uh you know I don't I don't have any examples of",
    "start": "1013380",
    "end": "1018750"
  },
  {
    "text": "tools all the way at that and I'm giving a talk tomorrow on machine learning applied to code analysis maybe some of",
    "start": "1018750",
    "end": "1025650"
  },
  {
    "text": "those techniques in like twenty years we'll get there but we're certainly not there yet alright so the first tool I",
    "start": "1025650",
    "end": "1033089"
  },
  {
    "text": "want to talk about is PMD this is a an analysis tool for Java and a few other",
    "start": "1033089",
    "end": "1040199"
  },
  {
    "text": "languages that's really characteristic of a lot of what you'll hear called as",
    "start": "1040199",
    "end": "1045900"
  },
  {
    "text": "like linters or linting style analyses or check style type analyses and and the",
    "start": "1045900",
    "end": "1051870"
  },
  {
    "text": "way these typically work is it's it's a little bit more general than grep it's but it's still syntax based so if you",
    "start": "1051870",
    "end": "1058530"
  },
  {
    "text": "imagine taking a piece of code and first constructing an abstract syntax tree so",
    "start": "1058530",
    "end": "1065010"
  },
  {
    "text": "I've done that here for the piece of code at the left we have an if statement at the top",
    "start": "1065010",
    "end": "1071020"
  },
  {
    "text": "that's the top level construct if statements have a conditional air condition then branch and an else branch",
    "start": "1071020",
    "end": "1076630"
  },
  {
    "text": "the condition is you know X greater than zero that that expression tree and then",
    "start": "1076630",
    "end": "1082080"
  },
  {
    "text": "and then branch has a block with a return object and the else branch has a return of null so PMD and other analyses",
    "start": "1082080",
    "end": "1091960"
  },
  {
    "text": "of this sort let you essentially pattern match over these graph representations PMD lets you actually do sort of more",
    "start": "1091960",
    "end": "1099309"
  },
  {
    "text": "arbitrary visitations of this but the sort of built in workflow is a is a pattern based search of the graph and",
    "start": "1099309",
    "end": "1106140"
  },
  {
    "text": "and so you can use this to find IR as such as such as this one if statements",
    "start": "1106140",
    "end": "1112390"
  },
  {
    "text": "must use braces right so you can check this by just saying okay I'm going to find all if statements then I'm gonna",
    "start": "1112390",
    "end": "1117789"
  },
  {
    "text": "check the then branch and make sure it contains a block below it and I'm gonna check the else branch make sure it contains a block in this case the then",
    "start": "1117789",
    "end": "1125110"
  },
  {
    "text": "branch does the else branch doesn't so that's a violation right and on the one hand it's like well this is just kind of",
    "start": "1125110",
    "end": "1131559"
  },
  {
    "text": "like a style thing you know and certainly it's annoying if your code doesn't follow this style and then you",
    "start": "1131559",
    "end": "1137590"
  },
  {
    "text": "get like you know a thousand warnings about this and if you are enforcing a",
    "start": "1137590",
    "end": "1142840"
  },
  {
    "text": "coding style it can be really useful to to have this tool support and actually these coding style enforcement",
    "start": "1142840",
    "end": "1148360"
  },
  {
    "text": "guidelines can help prevent real real bugs so like the the goto fail bug from",
    "start": "1148360",
    "end": "1157240"
  },
  {
    "text": "apple's ssl library was essentially a missing brace right and so if if if",
    "start": "1157240",
    "end": "1163720"
  },
  {
    "text": "statements had to had to be block delimited there then there's a much",
    "start": "1163720",
    "end": "1168730"
  },
  {
    "text": "lower likelihood that that bug would have made it in the bit code base all right so so these sorts of tools let you",
    "start": "1168730",
    "end": "1175929"
  },
  {
    "text": "find style violations or local bug patterns and here are some other examples so there's a rule that checks",
    "start": "1175929",
    "end": "1184000"
  },
  {
    "text": "that if you're writing java code if you override equals you also overwrite hash",
    "start": "1184000",
    "end": "1189039"
  },
  {
    "text": "code because those are supposed to go together right if you have a custom equality function you should have a custom hash function there's a check",
    "start": "1189039",
    "end": "1198010"
  },
  {
    "text": "that if you override the clone method that you should override it as a public method that's kind of the point",
    "start": "1198010",
    "end": "1204880"
  },
  {
    "text": "clone is private by default because there's not a default clone but when you implement it the intent is other people",
    "start": "1204880",
    "end": "1210159"
  },
  {
    "text": "can use it and then and there's a lot of a lot of examples I just took 3 another",
    "start": "1210159",
    "end": "1216039"
  },
  {
    "text": "one checks that you're using equality to compare strings and I will I want to show a little bit more about that",
    "start": "1216039",
    "end": "1221860"
  },
  {
    "text": "because that gets that gets sort of right up to the edge of the capabilities of these types of tools so the use",
    "start": "1221860",
    "end": "1231039"
  },
  {
    "text": "equals to compare strings rule can check this sort of pattern so the left is the",
    "start": "1231039",
    "end": "1236320"
  },
  {
    "text": "bad case you're comparing some string comm because it's a command maybe to the",
    "start": "1236320",
    "end": "1242860"
  },
  {
    "text": "constant end with reference equality which in Java is not the way you're",
    "start": "1242860",
    "end": "1248110"
  },
  {
    "text": "supposed to compare strings so you should be comparing because they're probably not the same string right their equivalent strings but not the same",
    "start": "1248110",
    "end": "1255279"
  },
  {
    "text": "string so the one with the right actually does that value based equality check and so that's the good pattern and",
    "start": "1255279",
    "end": "1261820"
  },
  {
    "text": "the left is the bad pattern but you don't have to change this code very far very much to fall outside the",
    "start": "1261820",
    "end": "1268600"
  },
  {
    "text": "capabilities of a syntactic based rule like this so if we look at this code here I've written this function equals",
    "start": "1268600",
    "end": "1276279"
  },
  {
    "text": "ignore case which is going to compare two strings for equality ignoring case",
    "start": "1276279",
    "end": "1282250"
  },
  {
    "text": "and it does that by converting each one to lowercase and then and oh it's using the wrong kind of equality again but PMD",
    "start": "1282250",
    "end": "1291039"
  },
  {
    "text": "will not flag this example because it's just checking for constant strings in",
    "start": "1291039",
    "end": "1296860"
  },
  {
    "text": "certain uses of constant strings if we want to pick this up we can actually",
    "start": "1296860",
    "end": "1301960"
  },
  {
    "text": "well yeah we need to go deeper right you know inception style so how can we go",
    "start": "1301960",
    "end": "1308440"
  },
  {
    "start": "1308000",
    "end": "1308000"
  },
  {
    "text": "deeper there's a tool released by Google's developer productivity team",
    "start": "1308440",
    "end": "1313630"
  },
  {
    "text": "called error-prone also targeting Java that has basically the same bug pattern",
    "start": "1313630",
    "end": "1320950"
  },
  {
    "text": "built-in but a more general form of it so error-prone has this string equality",
    "start": "1320950",
    "end": "1326500"
  },
  {
    "text": "rule which says basically the same thing and it will flag this example is bad and the reason it Flags this example is bad",
    "start": "1326500",
    "end": "1332649"
  },
  {
    "text": "is because it has access to more information than the other tool did so in particular it",
    "start": "1332649",
    "end": "1339099"
  },
  {
    "text": "contract type information and so it knows that to lowercase produces a",
    "start": "1339099",
    "end": "1344259"
  },
  {
    "text": "string and so they've got a string on each side of this equality statement and so you can check for that and the reason",
    "start": "1344259",
    "end": "1351759"
  },
  {
    "text": "error-prone has access to this information is it's actually built into the Java compiler uses the Java compiler",
    "start": "1351759",
    "end": "1358509"
  },
  {
    "text": "API to extract some information which means that it inherits all the results",
    "start": "1358509",
    "end": "1364570"
  },
  {
    "text": "of the compiler analysis passes and so internally the Java compiler it probably",
    "start": "1364570",
    "end": "1371769"
  },
  {
    "text": "does more than this but at least constructs the abstract syntax tree constructs the symbol table resolves",
    "start": "1371769",
    "end": "1377559"
  },
  {
    "text": "names propagates types performs some dataflow analysis and then checks really",
    "start": "1377559",
    "end": "1383739"
  },
  {
    "text": "checks for errors you know at each of these steps but in particular if you think about doing a static analysis at",
    "start": "1383739",
    "end": "1389169"
  },
  {
    "text": "some point you have access to all this information and this is actually the same approach taken by the clang static analyzer if you're familiar with that so",
    "start": "1389169",
    "end": "1395499"
  },
  {
    "text": "it's also built on top of the compiler tool chain so it inherits all of these compiler analyses all right so that's",
    "start": "1395499",
    "end": "1404999"
  },
  {
    "text": "that allows you to flag this this AR here but let's look at something that's",
    "start": "1404999",
    "end": "1411369"
  },
  {
    "text": "on the limits of error bounds capabilities so here is another error prone rule null ternary rule this says",
    "start": "1411369",
    "end": "1419559"
  },
  {
    "text": "that you should never do this pattern where you have a native integer or",
    "start": "1419559",
    "end": "1424899"
  },
  {
    "text": "really any native type here being assigned to the result of a ternary rule that can return it all and the reason is",
    "start": "1424899",
    "end": "1431559"
  },
  {
    "text": "if it hits the null case and returns that null then the language tries to",
    "start": "1431559",
    "end": "1437139"
  },
  {
    "text": "unbox that null and that that results in a null pointer dereference but if you",
    "start": "1437139",
    "end": "1443319"
  },
  {
    "text": "think about it there's a lot of ways for nulls of flow to that position in the code other than just being present as a",
    "start": "1443319",
    "end": "1449199"
  },
  {
    "text": "constant right and here it's not about types like it was with the string example it's more about data flow and",
    "start": "1449199",
    "end": "1456519"
  },
  {
    "text": "what values can flow in there and so if we think about a little bit different example where we have some integer Y and",
    "start": "1456519",
    "end": "1463599"
  },
  {
    "text": "we assign it null and then we dereference it well maybe you could pick that up because compilers often do constant propagation",
    "start": "1463599",
    "end": "1470290"
  },
  {
    "text": "and so constant propagation might give this to you but if you have something like this you're you're really sunk",
    "start": "1470290",
    "end": "1476470"
  },
  {
    "text": "right because here we're assigning Y to the output of some function based on how",
    "start": "1476470",
    "end": "1482620"
  },
  {
    "text": "I've named it you can probably guess that's intended to maybe return null and so because that function might return",
    "start": "1482620",
    "end": "1488559"
  },
  {
    "text": "null then the ternary write results in null and we might get a null pointer dereference but now reasoning about this requires reasoning across procedure",
    "start": "1488559",
    "end": "1496450"
  },
  {
    "text": "calls right we have this function that now we have to reason about and we need to know something about its behavior to",
    "start": "1496450",
    "end": "1502990"
  },
  {
    "text": "do the full analysis so we have to go",
    "start": "1502990",
    "end": "1510100"
  },
  {
    "text": "deeper so so the last tool I'm going to talk about at least in this progression",
    "start": "1510100",
    "end": "1515160"
  },
  {
    "text": "is a tool called infer this is out of Facebook's developer productivity team",
    "start": "1515160",
    "end": "1521610"
  },
  {
    "start": "1517000",
    "end": "1517000"
  },
  {
    "text": "and it's also also supports Java it does support C C++ Java and objective-c and",
    "start": "1521610",
    "end": "1528030"
  },
  {
    "text": "and it does this sort of interprocedural analysis that you need to reason about that other example and it the goal is",
    "start": "1528030",
    "end": "1534880"
  },
  {
    "text": "really to catch important errors that programmers have trouble finding and to reason under procedurally to reason",
    "start": "1534880",
    "end": "1540880"
  },
  {
    "text": "across these procedure boundaries and and these goals really go hand in hand because the the errors that are hardest",
    "start": "1540880",
    "end": "1548110"
  },
  {
    "text": "for programmers to discover are these ones that involve sort of deep chains of",
    "start": "1548110",
    "end": "1553630"
  },
  {
    "text": "procedure calls right the other examples I've shown you you could imagine a sufficiently diligent code reviewer or",
    "start": "1553630",
    "end": "1560440"
  },
  {
    "text": "maybe like an intern given a really boring job you know like going through the code and just checking for all of",
    "start": "1560440",
    "end": "1565600"
  },
  {
    "text": "these these sort of local syntactic patterns it's still good to have tool support for those right it's sort of",
    "start": "1565600",
    "end": "1571960"
  },
  {
    "text": "freeze-up cognitive load on the code review team but what's really hard to",
    "start": "1571960",
    "end": "1577840"
  },
  {
    "text": "find our bugs like this so there's an example of an error that infer found in",
    "start": "1577840",
    "end": "1583240"
  },
  {
    "text": "an open source code base it's a null pointer dereference sort of like the ternary example I showed you",
    "start": "1583240",
    "end": "1588790"
  },
  {
    "text": "before except here the reason the bug occurs is well on line 888 66 we call",
    "start": "1588790",
    "end": "1597429"
  },
  {
    "text": "select feed by ID that can return null if the condition on line 488 returns and",
    "start": "1597429",
    "end": "1603669"
  },
  {
    "text": "false and then that null would flow into feed items selected which on line 847 D",
    "start": "1603669",
    "end": "1612399"
  },
  {
    "text": "references it right so now there's a null pointer dereference that involves three different procedure calls and and",
    "start": "1612399",
    "end": "1619840"
  },
  {
    "text": "data flow sort of down and up the call stack so these are very hard for",
    "start": "1619840",
    "end": "1626019"
  },
  {
    "text": "programmers to find they're also very hard to find quickly with automated",
    "start": "1626019",
    "end": "1632169"
  },
  {
    "text": "tools and so that's that's sort of the the research advanced that I mentioned that's enabled this which is that",
    "start": "1632169",
    "end": "1641009"
  },
  {
    "text": "there's been a lot of advancement and the knowledge of how to create scalable",
    "start": "1641009",
    "end": "1646799"
  },
  {
    "text": "yet deep interprocedural analysis so for",
    "start": "1646799",
    "end": "1652419"
  },
  {
    "text": "this one in the general pattern is you want to design your analysis so that for",
    "start": "1652419",
    "end": "1659740"
  },
  {
    "text": "each procedure you can perform some problem specific analysis in this case the specific problem is to track null",
    "start": "1659740",
    "end": "1666429"
  },
  {
    "text": "assignments you can store a summary of that procedure that captures sort of the information you need to know in order to",
    "start": "1666429",
    "end": "1673929"
  },
  {
    "text": "evaluate that problem to look for instances of this problem with this error pattern so in this case it's",
    "start": "1673929",
    "end": "1681490"
  },
  {
    "text": "probably null ability of arguments and return values that's that's an important thing to store you might need want some",
    "start": "1681490",
    "end": "1688179"
  },
  {
    "text": "conditional information too but you know things like that and so then a procedure calls you can",
    "start": "1688179",
    "end": "1694090"
  },
  {
    "text": "either use the summary of the procedure being called if you've already evaluated it or generate the summary if you",
    "start": "1694090",
    "end": "1700059"
  },
  {
    "text": "haven't but in any case you structure things so that you just have to analyze each procedure once to get the",
    "start": "1700059",
    "end": "1705879"
  },
  {
    "text": "information that you need and then if you combine that with some clever caching and reusing of results in",
    "start": "1705879",
    "end": "1711549"
  },
  {
    "text": "incremental analysis you can get to a very scalable analysis that can find",
    "start": "1711549",
    "end": "1717490"
  },
  {
    "text": "these sorts of errors and so here is a an example of how scalable so this is from a blog post that Facebook had on",
    "start": "1717490",
    "end": "1725100"
  },
  {
    "text": "actually a different infer an ALICE that targets race conditions I'll say a little bit more about that later but",
    "start": "1725100",
    "end": "1731559"
  },
  {
    "text": "this is a performance graph across a population of code commits for their",
    "start": "1731559",
    "end": "1738369"
  },
  {
    "text": "tool and you can see most of them return in 15 minutes or less right and this is over Facebook's mobile code which is",
    "start": "1738369",
    "end": "1746259"
  },
  {
    "text": "millions of lines okay and so other sorts of analyses that can be handled in",
    "start": "1746259",
    "end": "1752619"
  },
  {
    "text": "this in this deep but scalable way are safe use of multi-threading so do you",
    "start": "1752619",
    "end": "1758619"
  },
  {
    "text": "have read/write races that aren't properly synchronized or otherwise locked in your multi-threaded Java code",
    "start": "1758619",
    "end": "1765659"
  },
  {
    "text": "array bounds checks and performance analysis and so I'll say I'll say a bit",
    "start": "1765659",
    "end": "1775779"
  },
  {
    "text": "more about this this tool has been highly impactful at Facebook in terms of both decreasing crash rates for the",
    "start": "1775779",
    "end": "1783460"
  },
  {
    "text": "mobile app by the null pointer analysis and and then finding finding race conditions before they make it into",
    "start": "1783460",
    "end": "1789190"
  },
  {
    "text": "production and I have a couple quotes about that later so but first I want to",
    "start": "1789190",
    "end": "1795279"
  },
  {
    "start": "1792000",
    "end": "1792000"
  },
  {
    "text": "go back and revisit this thing I said about like you can tune the dial right I said sometimes you can you can tune this",
    "start": "1795279",
    "end": "1803350"
  },
  {
    "text": "dial more towards bug finding or more towards like certainty in the behavior of your program and I want to talk about",
    "start": "1803350",
    "end": "1811090"
  },
  {
    "text": "one other tool out of industry that hits this verification side of the spectrum",
    "start": "1811090",
    "end": "1816399"
  },
  {
    "text": "and this is a tool called NOLA way that's out of you burrs engineering team",
    "start": "1816399",
    "end": "1822399"
  },
  {
    "text": "and this is an annotation based checker so basically the idea is well what I",
    "start": "1822399",
    "end": "1829360"
  },
  {
    "text": "showed you before is sort of the best you can do from a bug from a like scalable bug finding perspective with like no help from the developer but if",
    "start": "1829360",
    "end": "1837759"
  },
  {
    "text": "you're willing to shift the burden a bit from the analysis tool to the developer then you can increase confidence",
    "start": "1837759",
    "end": "1842950"
  },
  {
    "text": "substantially and so this gets into the space of like Java annotations and tool",
    "start": "1842950",
    "end": "1848169"
  },
  {
    "text": "based support for checking annotations and so that's the approach NOLA way takes it relies on the nullable and not",
    "start": "1848169",
    "end": "1856659"
  },
  {
    "text": "null annotations in the java language and basically if the programmer is",
    "start": "1856659",
    "end": "1861970"
  },
  {
    "text": "providing these annotations then now you just have to check that all not null variables are as",
    "start": "1861970",
    "end": "1867250"
  },
  {
    "text": "not null results right nothing nullable can flow into something that's declared is not null and if you can if those",
    "start": "1867250",
    "end": "1874240"
  },
  {
    "text": "checks work out across the entire code base then you know it's not an",
    "start": "1874240",
    "end": "1879520"
  },
  {
    "text": "encryption property but you know you know that you won't have null pointer dereferences in your code and so you can",
    "start": "1879520",
    "end": "1884950"
  },
  {
    "text": "get to this point of what we'd consider full verification of null pointer and null pointer exception freedom and and",
    "start": "1884950",
    "end": "1892870"
  },
  {
    "text": "this is not the only example of this right if you think about things like typescript right if you have typing",
    "start": "1892870",
    "end": "1898780"
  },
  {
    "text": "annotations across your codebase you get certain guarantees I mean type systems are like the canonical example of this",
    "start": "1898780",
    "end": "1904240"
  },
  {
    "text": "right they give you strong guarantees about certain types of errors not occurring and so there's definitely a",
    "start": "1904240",
    "end": "1911110"
  },
  {
    "text": "trend towards taking some of those type based ideas and folding them into what",
    "start": "1911110",
    "end": "1916150"
  },
  {
    "text": "are essentially static analysis tools but sort of guided by some information",
    "start": "1916150",
    "end": "1921370"
  },
  {
    "text": "by the developer and so you see that in typescript you see that in flow you see that in hack and you see that in all the",
    "start": "1921370",
    "end": "1927220"
  },
  {
    "text": "way all right so what has enabled this I",
    "start": "1927220",
    "end": "1934260"
  },
  {
    "start": "1930000",
    "end": "1930000"
  },
  {
    "text": "mentioned there have been some advancements on the academic side in particular when it comes to these",
    "start": "1934260",
    "end": "1940030"
  },
  {
    "text": "compositional scalable program analyses but how did they how did they get into",
    "start": "1940030",
    "end": "1945850"
  },
  {
    "text": "these industry grade tools well we had a successful transition of academic results to industry via transition of",
    "start": "1945850",
    "end": "1953919"
  },
  {
    "text": "researchers to industry so you know I think everyone myself included because I",
    "start": "1953919",
    "end": "1959500"
  },
  {
    "text": "used to be on the research side too I would love for you know their ideas to be so clearly useful and and high-impact",
    "start": "1959500",
    "end": "1966130"
  },
  {
    "text": "that like development teams across the world would start implementing them in scalable tools and you know they take",
    "start": "1966130",
    "end": "1971919"
  },
  {
    "text": "over the world with no other effort but yeah what that does happen sometimes but",
    "start": "1971919",
    "end": "1978070"
  },
  {
    "text": "what what's more common and what makes the process go more quickly is if the experts in this area actually go into",
    "start": "1978070",
    "end": "1984340"
  },
  {
    "text": "industry and see the problems that developers are facing there and so that's what happened in the effort in",
    "start": "1984340",
    "end": "1990130"
  },
  {
    "text": "the infer team at Facebook the infer tool was initially a spin out of university research that was acquired",
    "start": "1990130",
    "end": "1997360"
  },
  {
    "text": "by Facebook and then given resources to build that solution into an industry grade",
    "start": "1997360",
    "end": "2002720"
  },
  {
    "text": "tool which then they open sourced similar story with error-prone internal",
    "start": "2002720",
    "end": "2008809"
  },
  {
    "text": "google team hired some great PhD program analysis researchers they built this",
    "start": "2008809",
    "end": "2014570"
  },
  {
    "text": "tool and open sourced it and basically same story at ed Hoover so so that's",
    "start": "2014570",
    "end": "2022190"
  },
  {
    "text": "great so now we have these tools thanks to you know the industry players I",
    "start": "2022190",
    "end": "2027379"
  },
  {
    "text": "mentioned and then PMD is Community Supported we have these great tools how",
    "start": "2027379",
    "end": "2032480"
  },
  {
    "text": "well does it work right so there's a reason Google and Facebook are investing a lot in these developer productivity",
    "start": "2032480",
    "end": "2039080"
  },
  {
    "text": "teams and the reason is they've managed to get good value from these tools so",
    "start": "2039080",
    "end": "2044529"
  },
  {
    "text": "Google in this great article they have on how they deploy static analysis at",
    "start": "2044529",
    "end": "2049790"
  },
  {
    "text": "scale they they mentioned that as of January 2018 tricorder which is their",
    "start": "2049790",
    "end": "2056419"
  },
  {
    "text": "static analysis platform had analyzed approximately 50,000 code review changes",
    "start": "2056419",
    "end": "2061700"
  },
  {
    "text": "per day and of the more than 5,000 reports per day ninety-five percent were deemed useful",
    "start": "2061700",
    "end": "2068388"
  },
  {
    "text": "by developers so that's pretty good ratio and a pretty good like absolute",
    "start": "2068389",
    "end": "2073490"
  },
  {
    "text": "number of errors to flag each day at Facebook there's a blog post about racer",
    "start": "2073490",
    "end": "2080210"
  },
  {
    "text": "D which is that thread safety analysis I mentioned that at the time had been",
    "start": "2080210",
    "end": "2086179"
  },
  {
    "text": "running in publication in production for 10 months on their Android codebase and caught over a thousand multi-threading",
    "start": "2086179",
    "end": "2093408"
  },
  {
    "text": "issues which were fixed by developers before the code reached production right so so good results in terms of the tools",
    "start": "2093409",
    "end": "2099559"
  },
  {
    "text": "finding errors and allowing them to be fixed before they go into production and things like especially the thread safety",
    "start": "2099559",
    "end": "2106069"
  },
  {
    "text": "errors you know those those are hard to find even even with very thorough testing but it's not just like run the",
    "start": "2106069",
    "end": "2116119"
  },
  {
    "text": "tool and you're done integration is really important for forgetting this impact and so Google and",
    "start": "2116119",
    "end": "2123920"
  },
  {
    "text": "that same article mentions that even the simple checks they've deployed have required analysis analysis",
    "start": "2123920",
    "end": "2130010"
  },
  {
    "text": "infrastructure to support workflow integration to make successful so you have to get the",
    "start": "2130010",
    "end": "2135740"
  },
  {
    "text": "integration right right to be successful and they give this story of a an experiment they ran with findbugs which",
    "start": "2135740",
    "end": "2142160"
  },
  {
    "text": "is another job analysis tool it was integrated in a central sort of batch",
    "start": "2142160",
    "end": "2147920"
  },
  {
    "text": "oriented way the way I described sort of at the beginning of the talk running nightly and it did legitimately find",
    "start": "2147920",
    "end": "2155720"
  },
  {
    "text": "hundreds of bugs in google's java code base but nobody paid attention right the",
    "start": "2155720",
    "end": "2161510"
  },
  {
    "text": "developers the dashboard didn't see much use the developers didn't go to look at it because it was outside of the usual",
    "start": "2161510",
    "end": "2167330"
  },
  {
    "text": "workflow right no one wants to go check another tool and and have to have to pay",
    "start": "2167330",
    "end": "2172940"
  },
  {
    "text": "attention to another interface and Facebook has a similar story in that um the in the infer tool when they first",
    "start": "2172940",
    "end": "2179570"
  },
  {
    "text": "deployed it deployed it in a batch mode and then later did code review integration so that the results are",
    "start": "2179570",
    "end": "2185990"
  },
  {
    "text": "being presented as part of code review and fix rates for the same tool the same",
    "start": "2185990",
    "end": "2191930"
  },
  {
    "text": "reports went from almost 0 percent to 70 percent following that integration right so the integration is really really",
    "start": "2191930",
    "end": "2199880"
  },
  {
    "text": "important and so here's what integration looks like at Google so this is I",
    "start": "2199880",
    "end": "2207080"
  },
  {
    "text": "haven't worked at Google this is piece together from you know the the articles",
    "start": "2207080",
    "end": "2212870"
  },
  {
    "text": "that they published about their developer tools but they very famously have this mono repo that stores their",
    "start": "2212870",
    "end": "2219590"
  },
  {
    "text": "two billion plus lines of code which is incredible and like custom",
    "start": "2219590",
    "end": "2225710"
  },
  {
    "text": "infrastructure to say resolve conflicts and stuff when people try and commit to a mono repo that big that integrates",
    "start": "2225710",
    "end": "2232400"
  },
  {
    "text": "with the static analysis platform which they call tricorder that's the internal name that monitors these code changes",
    "start": "2232400",
    "end": "2240200"
  },
  {
    "text": "does analysis via the distributed build system which is called blaze internally",
    "start": "2240200",
    "end": "2246680"
  },
  {
    "text": "basil is the external version I'm not exactly sure what the relationship is but it's a distributed build like basil",
    "start": "2246680",
    "end": "2252520"
  },
  {
    "text": "and then crucially this integrates with their code review system called critique and so this is how things are put in",
    "start": "2252520",
    "end": "2258980"
  },
  {
    "text": "front of developers is how developers give feedback on whether the results were useful or not and yeah and so you",
    "start": "2258980",
    "end": "2267020"
  },
  {
    "text": "can read more about this in the paper cited below so you know if",
    "start": "2267020",
    "end": "2272420"
  },
  {
    "text": "we think about the rest of the world right I don't think any of us have two billion line of code mono repos but you",
    "start": "2272420",
    "end": "2280250"
  },
  {
    "text": "know we're maybe using github for just draw our code Gradle maven or make maybe",
    "start": "2280250",
    "end": "2286190"
  },
  {
    "text": "basil is anyone in the room using basil yeah a little bit okay yeah",
    "start": "2286190",
    "end": "2293900"
  },
  {
    "text": "and and then code review really it means pull requests if you're using github",
    "start": "2293900",
    "end": "2300140"
  },
  {
    "text": "means pull requests right and so then you know whatever we do on the static",
    "start": "2300140",
    "end": "2306920"
  },
  {
    "text": "analysis side has to integrate in the right way into these things and so this is basically my current interest area",
    "start": "2306920",
    "end": "2312520"
  },
  {
    "text": "that's what we're tackling with muse dev and so you know anyone who's interested",
    "start": "2312520",
    "end": "2317870"
  },
  {
    "text": "and has thoughts happy to discuss sort of our approach and then you know what what makes sense from an integration",
    "start": "2317870",
    "end": "2324050"
  },
  {
    "text": "perspective how do we take what's been successful at Google and move it into this other technology ecosystem that",
    "start": "2324050",
    "end": "2330320"
  },
  {
    "text": "everyone else uses all right so that's I think the takeaway is that supported",
    "start": "2330320",
    "end": "2340360"
  },
  {
    "text": "really supported integration is key so there are lots of open-source tools that",
    "start": "2340360",
    "end": "2345560"
  },
  {
    "text": "deliver substantial value I've listed several of them and that's if they're",
    "start": "2345560",
    "end": "2351350"
  },
  {
    "text": "configured properly integrated into the developer workflow and kept up to date date and so I would say you know go out",
    "start": "2351350",
    "end": "2358280"
  },
  {
    "text": "there try these tools integrate them into your processes but make sure that you sort of if you're if you're doing it",
    "start": "2358280",
    "end": "2364280"
  },
  {
    "text": "yourself make sure you allocate some time to get this this part of it right and to try things out and get developer",
    "start": "2364280",
    "end": "2369920"
  },
  {
    "text": "feedback all right so this is the advertising slide first of all rate rate",
    "start": "2369920",
    "end": "2377390"
  },
  {
    "text": "the talk and then the lower-left and try it out so these I've linked the the four",
    "start": "2377390",
    "end": "2384020"
  },
  {
    "text": "tools that I talked about there there's some others that are good too to look at",
    "start": "2384020",
    "end": "2389150"
  },
  {
    "text": "to things like find bugs spot bugs find sec bugs so I can you know if you're",
    "start": "2389150",
    "end": "2396590"
  },
  {
    "text": "interested in that you can find me on twitter my twitter handle is on the on the speaker notes associated with",
    "start": "2396590",
    "end": "2403130"
  },
  {
    "text": "this talk and then if you want to see how we've integrated it or you want to",
    "start": "2403130",
    "end": "2408440"
  },
  {
    "text": "talk about integration integration challenges tool choice things that are",
    "start": "2408440",
    "end": "2413569"
  },
  {
    "text": "out there that are useful you can go to our website there we put together a mailing list and a slack community",
    "start": "2413569",
    "end": "2419240"
  },
  {
    "text": "actually where we discuss some of these things and we're interested in talking to people about their experiences and",
    "start": "2419240",
    "end": "2424460"
  },
  {
    "text": "and how best to integrate these sorts of things and that's where that's where we pull people into our private beta - as",
    "start": "2424460",
    "end": "2430670"
  },
  {
    "text": "we expand so yeah let me know if you have any questions and thanks for",
    "start": "2430670",
    "end": "2436609"
  },
  {
    "text": "letting me come speak [Applause]",
    "start": "2436609",
    "end": "2445409"
  }
]