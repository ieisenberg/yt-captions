[
  {
    "text": "so yeah as as Ken said this talk is",
    "start": "5080",
    "end": "7120"
  },
  {
    "text": "about um combining free mon ads and free",
    "start": "7120",
    "end": "9200"
  },
  {
    "text": "applicatives so before we get into all",
    "start": "9200",
    "end": "11240"
  },
  {
    "text": "of that um just to introduce myself I'm",
    "start": "11240",
    "end": "13639"
  },
  {
    "text": "obviously Cameron jitis um feel free to",
    "start": "13639",
    "end": "16160"
  },
  {
    "text": "add me on Twitter on LinkedIn I work at",
    "start": "16160",
    "end": "18080"
  },
  {
    "text": "simple machines which is a um",
    "start": "18080",
    "end": "20119"
  },
  {
    "text": "consultancy doing Data Systems uh all",
    "start": "20119",
    "end": "22600"
  },
  {
    "text": "the way from kind of engineering and",
    "start": "22600",
    "end": "23800"
  },
  {
    "text": "devops through the machine learning and",
    "start": "23800",
    "end": "25560"
  },
  {
    "text": "um analytics and if I describe kind of",
    "start": "25560",
    "end": "28279"
  },
  {
    "text": "what I do in buzzword Bingo it would be",
    "start": "28279",
    "end": "30240"
  },
  {
    "text": "Big Data machine learning and functional",
    "start": "30240",
    "end": "33200"
  },
  {
    "text": "programming so what we're going to cover",
    "start": "33200",
    "end": "35280"
  },
  {
    "text": "today um I'm going to talk about",
    "start": "35280",
    "end": "37760"
  },
  {
    "text": "abstracting effects from uh our domain",
    "start": "37760",
    "end": "40520"
  },
  {
    "text": "definitions um then we're going to look",
    "start": "40520",
    "end": "42280"
  },
  {
    "text": "at how we can actually put these effects",
    "start": "42280",
    "end": "44440"
  },
  {
    "text": "into free structures and then finally",
    "start": "44440",
    "end": "46360"
  },
  {
    "text": "we'll look at uh how we can combine the",
    "start": "46360",
    "end": "48640"
  },
  {
    "text": "freead and the free",
    "start": "48640",
    "end": "51320"
  },
  {
    "text": "applicative so before we start I know",
    "start": "51320",
    "end": "53760"
  },
  {
    "text": "there's a lot of strong opinions on the",
    "start": "53760",
    "end": "55600"
  },
  {
    "text": "topic of usage of the freead so I'm not",
    "start": "55600",
    "end": "58039"
  },
  {
    "text": "trying to push for you to use the freead",
    "start": "58039",
    "end": "60039"
  },
  {
    "text": "or the free applicative over things like",
    "start": "60039",
    "end": "61879"
  },
  {
    "text": "final tag list or whatever style you",
    "start": "61879",
    "end": "63480"
  },
  {
    "text": "choose to use um I think they've all got",
    "start": "63480",
    "end": "65400"
  },
  {
    "text": "a lot of strengths and weaknesses um so",
    "start": "65400",
    "end": "67520"
  },
  {
    "text": "this this talk is more in the context of",
    "start": "67520",
    "end": "69360"
  },
  {
    "text": "what you can do if you do choose to use",
    "start": "69360",
    "end": "70880"
  },
  {
    "text": "it and if you're one of those people",
    "start": "70880",
    "end": "72560"
  },
  {
    "text": "that likes following along with the",
    "start": "72560",
    "end": "74240"
  },
  {
    "text": "actual code I've got it up on my",
    "start": "74240",
    "end": "77680"
  },
  {
    "text": "GitHub so let's start with a basic",
    "start": "77680",
    "end": "80400"
  },
  {
    "text": "domain let's say we have um a basic user",
    "start": "80400",
    "end": "84400"
  },
  {
    "text": "that just has a name and an age and we",
    "start": "84400",
    "end": "86680"
  },
  {
    "text": "have a user repository which gives us a",
    "start": "86680",
    "end": "88680"
  },
  {
    "text": "few functions that can act on that that",
    "start": "88680",
    "end": "90079"
  },
  {
    "text": "domain so create user which returns a",
    "start": "90079",
    "end": "92079"
  },
  {
    "text": "user list users and so on a basic",
    "start": "92079",
    "end": "95439"
  },
  {
    "text": "implementation in Scala uh and if you're",
    "start": "95439",
    "end": "98600"
  },
  {
    "text": "not familiar with scholar but you are",
    "start": "98600",
    "end": "99880"
  },
  {
    "text": "with hasle just imagine half of that",
    "start": "99880",
    "end": "101640"
  },
  {
    "text": "code isn't there",
    "start": "101640",
    "end": "104600"
  },
  {
    "text": "um looks something like this so it's",
    "start": "104600",
    "end": "108759"
  },
  {
    "text": "it's pretty common though you might look",
    "start": "108759",
    "end": "110079"
  },
  {
    "text": "at this and say well okay this is an",
    "start": "110079",
    "end": "111640"
  },
  {
    "text": "idealized version of what I actually",
    "start": "111640",
    "end": "113280"
  },
  {
    "text": "want to do I actually have to deal with",
    "start": "113280",
    "end": "115119"
  },
  {
    "text": "failure uh so you might introduce",
    "start": "115119",
    "end": "117000"
  },
  {
    "text": "something like either and I've put",
    "start": "117000",
    "end": "118479"
  },
  {
    "text": "throwable here because I'm very nauy um",
    "start": "118479",
    "end": "120600"
  },
  {
    "text": "you'd probably use some kind of proper",
    "start": "120600",
    "end": "122920"
  },
  {
    "text": "you know ADT representing all the",
    "start": "122920",
    "end": "124439"
  },
  {
    "text": "failures in your domain um so we'll just",
    "start": "124439",
    "end": "126560"
  },
  {
    "text": "gloss over that for now but you'll",
    "start": "126560",
    "end": "128800"
  },
  {
    "text": "probably also look at this and say yeah",
    "start": "128800",
    "end": "130520"
  },
  {
    "text": "but I don't want to be holding up a",
    "start": "130520",
    "end": "131920"
  },
  {
    "text": "thread I actually am talking to a",
    "start": "131920",
    "end": "133560"
  },
  {
    "text": "database when I'm creating or listing",
    "start": "133560",
    "end": "134959"
  },
  {
    "text": "users so you might also have some kind",
    "start": "134959",
    "end": "137200"
  },
  {
    "text": "of task and as Ben said earlier we can",
    "start": "137200",
    "end": "139040"
  },
  {
    "text": "turn this into an either T um sort of",
    "start": "139040",
    "end": "141680"
  },
  {
    "text": "data structure to handle our",
    "start": "141680",
    "end": "143519"
  },
  {
    "text": "errors now if we take a step back and",
    "start": "143519",
    "end": "145959"
  },
  {
    "text": "look at where we started and where We've",
    "start": "145959",
    "end": "147280"
  },
  {
    "text": "Ended up from what we want in terms of",
    "start": "147280",
    "end": "149959"
  },
  {
    "text": "domain description versus what we",
    "start": "149959",
    "end": "152040"
  },
  {
    "text": "actually have you can see that it's",
    "start": "152040",
    "end": "153959"
  },
  {
    "text": "gotten quite complex and there's all of",
    "start": "153959",
    "end": "155800"
  },
  {
    "text": "this extra noise around um that doesn't",
    "start": "155800",
    "end": "158280"
  },
  {
    "text": "really tell us what our domain is doing",
    "start": "158280",
    "end": "160040"
  },
  {
    "text": "it's telling us the effects on our",
    "start": "160040",
    "end": "161640"
  },
  {
    "text": "domain so what what this means is that",
    "start": "161640",
    "end": "164440"
  },
  {
    "text": "we've actually uh tightly coupled our",
    "start": "164440",
    "end": "166840"
  },
  {
    "text": "implementation effects with our domain",
    "start": "166840",
    "end": "168920"
  },
  {
    "text": "so you can see here either T task",
    "start": "168920",
    "end": "171040"
  },
  {
    "text": "throwable in this case is just the",
    "start": "171040",
    "end": "173080"
  },
  {
    "text": "implementation effects and user is the",
    "start": "173080",
    "end": "175040"
  },
  {
    "text": "only thing that we actually care about",
    "start": "175040",
    "end": "176360"
  },
  {
    "text": "with our return",
    "start": "176360",
    "end": "178400"
  },
  {
    "text": "type so as I said this tightly couples",
    "start": "178400",
    "end": "181000"
  },
  {
    "text": "our implementation details to our domain",
    "start": "181000",
    "end": "183400"
  },
  {
    "text": "and it also means that things like",
    "start": "183400",
    "end": "185040"
  },
  {
    "text": "testing domain logic in isolation are a",
    "start": "185040",
    "end": "186959"
  },
  {
    "text": "lot harder if we're talking to a",
    "start": "186959",
    "end": "188680"
  },
  {
    "text": "database or if we're if we're doing like",
    "start": "188680",
    "end": "190159"
  },
  {
    "text": "future either blah blah blah and we we",
    "start": "190159",
    "end": "191879"
  },
  {
    "text": "just want to set up a use case it's a",
    "start": "191879",
    "end": "193799"
  },
  {
    "text": "lot harder to just test that use case",
    "start": "193799",
    "end": "195239"
  },
  {
    "text": "directly without putting all of the",
    "start": "195239",
    "end": "196519"
  },
  {
    "text": "extra wrappers and",
    "start": "196519",
    "end": "198360"
  },
  {
    "text": "whatnot so income's final tag list and",
    "start": "198360",
    "end": "200959"
  },
  {
    "text": "you're probably familiar with this it's",
    "start": "200959",
    "end": "202799"
  },
  {
    "text": "basically just uh a wrapper around where",
    "start": "202799",
    "end": "204879"
  },
  {
    "text": "we say there's some effect type we don't",
    "start": "204879",
    "end": "207080"
  },
  {
    "text": "know what it is yet but we're going to",
    "start": "207080",
    "end": "208319"
  },
  {
    "text": "say it's F and at some point we're going",
    "start": "208319",
    "end": "211080"
  },
  {
    "text": "to fill in what that f is and we're",
    "start": "211080",
    "end": "212400"
  },
  {
    "text": "going to implement it in terms of this",
    "start": "212400",
    "end": "214799"
  },
  {
    "text": "um so that's that looks pretty similar",
    "start": "214799",
    "end": "216480"
  },
  {
    "text": "to what we started with so it's quite a",
    "start": "216480",
    "end": "217920"
  },
  {
    "text": "nice abstraction if you like this",
    "start": "217920",
    "end": "219280"
  },
  {
    "text": "approach and when we actually implement",
    "start": "219280",
    "end": "221480"
  },
  {
    "text": "it it looks quite similar to how we had",
    "start": "221480",
    "end": "222959"
  },
  {
    "text": "it before um we basically just extend it",
    "start": "222959",
    "end": "226000"
  },
  {
    "text": "uh and then we choose what effect that",
    "start": "226000",
    "end": "227480"
  },
  {
    "text": "we care about um such as",
    "start": "227480",
    "end": "229680"
  },
  {
    "text": "task now free monad actually works quite",
    "start": "229680",
    "end": "232480"
  },
  {
    "text": "similar to this the the main difference",
    "start": "232480",
    "end": "235200"
  },
  {
    "text": "is that it actually reifies the domain",
    "start": "235200",
    "end": "236920"
  },
  {
    "text": "which means it turns it into Data um so",
    "start": "236920",
    "end": "240000"
  },
  {
    "text": "I'm basically just going to walk you",
    "start": "240000",
    "end": "241239"
  },
  {
    "text": "through what it looks like at a high",
    "start": "241239",
    "end": "242840"
  },
  {
    "text": "level if you're not familiar with it and",
    "start": "242840",
    "end": "244079"
  },
  {
    "text": "then we'll kind of get into the next",
    "start": "244079",
    "end": "245599"
  },
  {
    "text": "part so the first thing you do is you",
    "start": "245599",
    "end": "248439"
  },
  {
    "text": "represent your operations as data so we",
    "start": "248439",
    "end": "251560"
  },
  {
    "text": "previously saw this on the last slide as",
    "start": "251560",
    "end": "253319"
  },
  {
    "text": "the methods on that um interface this",
    "start": "253319",
    "end": "255759"
  },
  {
    "text": "thing so we turn that we turn that into",
    "start": "255759",
    "end": "258519"
  },
  {
    "text": "data and then the next thing that we do",
    "start": "258519",
    "end": "260959"
  },
  {
    "text": "is we lift that data into a free",
    "start": "260959",
    "end": "263240"
  },
  {
    "text": "structure now I'm I'm representing the",
    "start": "263240",
    "end": "265000"
  },
  {
    "text": "free mon ad with these blue boxes um and",
    "start": "265000",
    "end": "268479"
  },
  {
    "text": "you'll see later that the uh free",
    "start": "268479",
    "end": "270280"
  },
  {
    "text": "applicative is the red boxes and then",
    "start": "270280",
    "end": "272880"
  },
  {
    "text": "finally with the free monad we have the",
    "start": "272880",
    "end": "274520"
  },
  {
    "text": "ability to sequence our computation so",
    "start": "274520",
    "end": "276479"
  },
  {
    "text": "we can have these dependent steps um by",
    "start": "276479",
    "end": "278880"
  },
  {
    "text": "using flat",
    "start": "278880",
    "end": "280120"
  },
  {
    "text": "maps and what we've actually created is",
    "start": "280120",
    "end": "282680"
  },
  {
    "text": "just a description of a program there's",
    "start": "282680",
    "end": "284400"
  },
  {
    "text": "no actual um code that's going on here",
    "start": "284400",
    "end": "287199"
  },
  {
    "text": "to explain how it works it's basically",
    "start": "287199",
    "end": "289400"
  },
  {
    "text": "just saying I have this structure",
    "start": "289400",
    "end": "291199"
  },
  {
    "text": "whereby the first thing that I have is",
    "start": "291199",
    "end": "293080"
  },
  {
    "text": "data explaining create user then the",
    "start": "293080",
    "end": "295039"
  },
  {
    "text": "next thing is create user Sally and then",
    "start": "295039",
    "end": "296759"
  },
  {
    "text": "the last thing is to list users so to",
    "start": "296759",
    "end": "299000"
  },
  {
    "text": "make this actually useful what we do is",
    "start": "299000",
    "end": "300840"
  },
  {
    "text": "we interpret this structure and we end",
    "start": "300840",
    "end": "303199"
  },
  {
    "text": "up with something like this where if we",
    "start": "303199",
    "end": "304639"
  },
  {
    "text": "have a database interpreter we'll read",
    "start": "304639",
    "end": "306919"
  },
  {
    "text": "create user and we'll turn that into",
    "start": "306919",
    "end": "308919"
  },
  {
    "text": "something like insert value sorry insert",
    "start": "308919",
    "end": "311080"
  },
  {
    "text": "into users values John 36 into our",
    "start": "311080",
    "end": "313759"
  },
  {
    "text": "database then we can do the same thing",
    "start": "313759",
    "end": "315680"
  },
  {
    "text": "with Sally and then we can select star",
    "start": "315680",
    "end": "317440"
  },
  {
    "text": "to list the",
    "start": "317440",
    "end": "319319"
  },
  {
    "text": "users so the free monad and the free",
    "start": "319319",
    "end": "321560"
  },
  {
    "text": "applicative both have very similar ways",
    "start": "321560",
    "end": "323680"
  },
  {
    "text": "that you set these things up um and they",
    "start": "323680",
    "end": "325680"
  },
  {
    "text": "roughly go encode domain as ADT lift the",
    "start": "325680",
    "end": "328600"
  },
  {
    "text": "domain into a free struct",
    "start": "328600",
    "end": "330360"
  },
  {
    "text": "write logic as a free program create",
    "start": "330360",
    "end": "332600"
  },
  {
    "text": "interpreters to interpret the domain",
    "start": "332600",
    "end": "334160"
  },
  {
    "text": "instructions with some effect and then",
    "start": "334160",
    "end": "336639"
  },
  {
    "text": "interpret free program to produce the",
    "start": "336639",
    "end": "338560"
  },
  {
    "text": "output",
    "start": "338560",
    "end": "339720"
  },
  {
    "text": "effect so starting with encoding our",
    "start": "339720",
    "end": "342000"
  },
  {
    "text": "domain as an ADT as we saw it kind of",
    "start": "342000",
    "end": "344240"
  },
  {
    "text": "looks like this and I'm representing",
    "start": "344240",
    "end": "345800"
  },
  {
    "text": "operations as these little yellow",
    "start": "345800",
    "end": "348800"
  },
  {
    "text": "boxes so in Scala uh it looks something",
    "start": "348800",
    "end": "352639"
  },
  {
    "text": "like this we use it we use case classes",
    "start": "352639",
    "end": "354800"
  },
  {
    "text": "and a sealed trait to enforce this um",
    "start": "354800",
    "end": "357360"
  },
  {
    "text": "again pretend that there's a quarter as",
    "start": "357360",
    "end": "359800"
  },
  {
    "text": "much on the screen if you're into Haso",
    "start": "359800",
    "end": "362520"
  },
  {
    "text": "um and this F is that F that we saw",
    "start": "362520",
    "end": "365600"
  },
  {
    "text": "before it's the effect type um now Jed",
    "start": "365600",
    "end": "368120"
  },
  {
    "text": "said naming doesn't matter but it's very",
    "start": "368120",
    "end": "369840"
  },
  {
    "text": "common that names do matter here just so",
    "start": "369840",
    "end": "371720"
  },
  {
    "text": "that you've got a little bit of context",
    "start": "371720",
    "end": "373400"
  },
  {
    "text": "um around what domain you're talking",
    "start": "373400",
    "end": "375440"
  },
  {
    "text": "about so this is kind of what it it",
    "start": "375440",
    "end": "377800"
  },
  {
    "text": "looks like you've got your inputs which",
    "start": "377800",
    "end": "379960"
  },
  {
    "text": "previously were just um the method",
    "start": "379960",
    "end": "381720"
  },
  {
    "text": "inputs and then you've got your output",
    "start": "381720",
    "end": "383440"
  },
  {
    "text": "over here with some effect type um which",
    "start": "383440",
    "end": "385599"
  },
  {
    "text": "was previously just an F of the effect",
    "start": "385599",
    "end": "387720"
  },
  {
    "text": "type so you can kind of see how this to",
    "start": "387720",
    "end": "389960"
  },
  {
    "text": "the final taglist um approach of",
    "start": "389960",
    "end": "392080"
  },
  {
    "text": "defining your",
    "start": "392080",
    "end": "393680"
  },
  {
    "text": "domain now the next thing that we do is",
    "start": "393680",
    "end": "395800"
  },
  {
    "text": "we lift this domain into a free",
    "start": "395800",
    "end": "397960"
  },
  {
    "text": "structure and this was this operation so",
    "start": "397960",
    "end": "400520"
  },
  {
    "text": "we're taking the Yellow Boxes and we're",
    "start": "400520",
    "end": "401880"
  },
  {
    "text": "putting them in the blue",
    "start": "401880",
    "end": "403360"
  },
  {
    "text": "boxes and what this looks like is",
    "start": "403360",
    "end": "405240"
  },
  {
    "text": "something like this um we have this",
    "start": "405240",
    "end": "407199"
  },
  {
    "text": "free. lift F and then we put the actual",
    "start": "407199",
    "end": "409960"
  },
  {
    "text": "create user into that box and we have",
    "start": "409960",
    "end": "412840"
  },
  {
    "text": "the return type now of free",
    "start": "412840",
    "end": "415800"
  },
  {
    "text": "parameterized on user option returning",
    "start": "415800",
    "end": "418000"
  },
  {
    "text": "user and we can do this same thing with",
    "start": "418000",
    "end": "420120"
  },
  {
    "text": "the free applicative so we can take our",
    "start": "420120",
    "end": "422479"
  },
  {
    "text": "operations and lift them into the free",
    "start": "422479",
    "end": "424000"
  },
  {
    "text": "applicative and the code actually looks",
    "start": "424000",
    "end": "426440"
  },
  {
    "text": "almost exactly the same the only",
    "start": "426440",
    "end": "427879"
  },
  {
    "text": "difference is that we now have free App",
    "start": "427879",
    "end": "429360"
  },
  {
    "text": "instead of free so a little trick that I",
    "start": "429360",
    "end": "432199"
  },
  {
    "text": "like to use is to actually have this",
    "start": "432199",
    "end": "434720"
  },
  {
    "text": "little wrapper that I Call Exec strategy",
    "start": "434720",
    "end": "436479"
  },
  {
    "text": "which defers what whether we're going to",
    "start": "436479",
    "end": "438400"
  },
  {
    "text": "use the free monad or the free",
    "start": "438400",
    "end": "439879"
  },
  {
    "text": "applicative and you can see here all",
    "start": "439879",
    "end": "441360"
  },
  {
    "text": "we're doing is just applying that little",
    "start": "441360",
    "end": "442840"
  },
  {
    "text": "bit that's different and we'll see how",
    "start": "442840",
    "end": "444720"
  },
  {
    "text": "this is useful",
    "start": "444720",
    "end": "445919"
  },
  {
    "text": "later so what we do is we create our",
    "start": "445919",
    "end": "448360"
  },
  {
    "text": "repository with this exec strategy which",
    "start": "448360",
    "end": "451000"
  },
  {
    "text": "means that we're now returning a",
    "start": "451000",
    "end": "452639"
  },
  {
    "text": "computation which we can choose how to",
    "start": "452639",
    "end": "455319"
  },
  {
    "text": "lift it when we use",
    "start": "455319",
    "end": "457360"
  },
  {
    "text": "it now the next thing that we do is we",
    "start": "457360",
    "end": "459840"
  },
  {
    "text": "write our logic as a free program so",
    "start": "459840",
    "end": "461759"
  },
  {
    "text": "this is creating that structure that we",
    "start": "461759",
    "end": "463199"
  },
  {
    "text": "saw before and this is where free monad",
    "start": "463199",
    "end": "465520"
  },
  {
    "text": "and the free applicative actually start",
    "start": "465520",
    "end": "466840"
  },
  {
    "text": "to come into play so free monad is for",
    "start": "466840",
    "end": "469440"
  },
  {
    "text": "dependent operations I.E sequential",
    "start": "469440",
    "end": "471440"
  },
  {
    "text": "things um and we can enforce this with",
    "start": "471440",
    "end": "473680"
  },
  {
    "text": "the flat map so in our diagram we saw we",
    "start": "473680",
    "end": "476720"
  },
  {
    "text": "have this flat map that allows us to say",
    "start": "476720",
    "end": "478840"
  },
  {
    "text": "this operation happens before this",
    "start": "478840",
    "end": "481080"
  },
  {
    "text": "operation happens before this operation",
    "start": "481080",
    "end": "482919"
  },
  {
    "text": "and so on now with applicatives they're",
    "start": "482919",
    "end": "486240"
  },
  {
    "text": "actually independent operations they're",
    "start": "486240",
    "end": "487960"
  },
  {
    "text": "not necessarily parallel operations but",
    "start": "487960",
    "end": "490319"
  },
  {
    "text": "we can interpret these things in",
    "start": "490319",
    "end": "491919"
  },
  {
    "text": "parallel to make them um",
    "start": "491919",
    "end": "494039"
  },
  {
    "text": "asynchronous so this looks something",
    "start": "494039",
    "end": "496560"
  },
  {
    "text": "like this in Scola and we've got this",
    "start": "496560",
    "end": "498120"
  },
  {
    "text": "little uh I think it's a spaceship",
    "start": "498120",
    "end": "499960"
  },
  {
    "text": "operator but yeah pipe at pipe uh and",
    "start": "499960",
    "end": "502840"
  },
  {
    "text": "that means that this thing runs",
    "start": "502840",
    "end": "504720"
  },
  {
    "text": "independent with this",
    "start": "504720",
    "end": "506639"
  },
  {
    "text": "thing so now that we've seen that how do",
    "start": "506639",
    "end": "508759"
  },
  {
    "text": "we combine sequential and parallel",
    "start": "508759",
    "end": "511320"
  },
  {
    "text": "operations what we end up with typically",
    "start": "511320",
    "end": "514560"
  },
  {
    "text": "uh with when you're using free monate or",
    "start": "514560",
    "end": "516039"
  },
  {
    "text": "free applicative is one of these two",
    "start": "516039",
    "end": "517399"
  },
  {
    "text": "things either we have a free program or",
    "start": "517399",
    "end": "520000"
  },
  {
    "text": "we have a free applicative program so if",
    "start": "520000",
    "end": "522640"
  },
  {
    "text": "we want to combine these two things we",
    "start": "522640",
    "end": "524519"
  },
  {
    "text": "typically will have one of two choices",
    "start": "524519",
    "end": "526959"
  },
  {
    "text": "the first of these is to have the free",
    "start": "526959",
    "end": "528600"
  },
  {
    "text": "applicative on the outside and the free",
    "start": "528600",
    "end": "530080"
  },
  {
    "text": "monad on the inside and what this leads",
    "start": "530080",
    "end": "532519"
  },
  {
    "text": "to is a program that looks like this so",
    "start": "532519",
    "end": "534519"
  },
  {
    "text": "basically we have this parallel box that",
    "start": "534519",
    "end": "537040"
  },
  {
    "text": "has a series of sequential things that",
    "start": "537040",
    "end": "539040"
  },
  {
    "text": "run um independent of one another and",
    "start": "539040",
    "end": "541519"
  },
  {
    "text": "within them we have operations that run",
    "start": "541519",
    "end": "543640"
  },
  {
    "text": "one at a",
    "start": "543640",
    "end": "544800"
  },
  {
    "text": "time now this probably isn't quite as",
    "start": "544800",
    "end": "547160"
  },
  {
    "text": "common in terms of the way you structure",
    "start": "547160",
    "end": "548480"
  },
  {
    "text": "programs it's more common that you would",
    "start": "548480",
    "end": "550279"
  },
  {
    "text": "actually have a sequential program of",
    "start": "550279",
    "end": "552079"
  },
  {
    "text": "parallel steps um which means that we",
    "start": "552079",
    "end": "554399"
  },
  {
    "text": "put the froad on the outside and the",
    "start": "554399",
    "end": "556160"
  },
  {
    "text": "free applicative on the inside so what",
    "start": "556160",
    "end": "558560"
  },
  {
    "text": "this looks like is something like this",
    "start": "558560",
    "end": "560720"
  },
  {
    "text": "we have two types of steps that we T",
    "start": "560720",
    "end": "562920"
  },
  {
    "text": "that we tend to use one of them is to",
    "start": "562920",
    "end": "564839"
  },
  {
    "text": "have um a single step that has no",
    "start": "564839",
    "end": "567040"
  },
  {
    "text": "parallel operations and the other is a",
    "start": "567040",
    "end": "568680"
  },
  {
    "text": "single step with multiple operations",
    "start": "568680",
    "end": "571279"
  },
  {
    "text": "that run in parallel so if you if you",
    "start": "571279",
    "end": "573120"
  },
  {
    "text": "want to have this depends on this as you",
    "start": "573120",
    "end": "574880"
  },
  {
    "text": "would with a free monad there's this",
    "start": "574880",
    "end": "576640"
  },
  {
    "text": "extra free app thing in there just to",
    "start": "576640",
    "end": "578120"
  },
  {
    "text": "make it work um on the types and then if",
    "start": "578120",
    "end": "580760"
  },
  {
    "text": "we want to actually run things in",
    "start": "580760",
    "end": "582000"
  },
  {
    "text": "parallel as a program step we now have",
    "start": "582000",
    "end": "584040"
  },
  {
    "text": "the ability to embed them in the free",
    "start": "584040",
    "end": "585959"
  },
  {
    "text": "applicative which is then embedded in",
    "start": "585959",
    "end": "587760"
  },
  {
    "text": "the free monad so you still get that",
    "start": "587760",
    "end": "589959"
  },
  {
    "text": "dependent",
    "start": "589959",
    "end": "591320"
  },
  {
    "text": "ordering now we saw before um with our",
    "start": "591320",
    "end": "594040"
  },
  {
    "text": "exec strategy that we can lift things",
    "start": "594040",
    "end": "596480"
  },
  {
    "text": "into either a free monad or a free",
    "start": "596480",
    "end": "598279"
  },
  {
    "text": "applicative so I've got this little",
    "start": "598279",
    "end": "600480"
  },
  {
    "text": "thing that I'm writing in these slides",
    "start": "600480",
    "end": "602079"
  },
  {
    "text": "called as program step and all that is",
    "start": "602079",
    "end": "604640"
  },
  {
    "text": "is just a way to take either a free",
    "start": "604640",
    "end": "606360"
  },
  {
    "text": "monad and embedded in this bigger",
    "start": "606360",
    "end": "608440"
  },
  {
    "text": "structure or a free applicative and",
    "start": "608440",
    "end": "610320"
  },
  {
    "text": "embed it in this bigger structure and",
    "start": "610320",
    "end": "613040"
  },
  {
    "text": "for now um I've left the as program step",
    "start": "613040",
    "end": "615680"
  },
  {
    "text": "in there um just to make it very",
    "start": "615680",
    "end": "617440"
  },
  {
    "text": "explicit about what's happening and when",
    "start": "617440",
    "end": "618959"
  },
  {
    "text": "it's",
    "start": "618959",
    "end": "620040"
  },
  {
    "text": "happening so if we would actually have a",
    "start": "620040",
    "end": "622240"
  },
  {
    "text": "look at how one of these two is",
    "start": "622240",
    "end": "623640"
  },
  {
    "text": "implemented um we'll take the easy one",
    "start": "623640",
    "end": "625480"
  },
  {
    "text": "which is the free applicative lifting it",
    "start": "625480",
    "end": "627480"
  },
  {
    "text": "into the structure can you can see it's",
    "start": "627480",
    "end": "629079"
  },
  {
    "text": "just kind of being wrapped by the freead",
    "start": "629079",
    "end": "631399"
  },
  {
    "text": "it looks something like this um so we're",
    "start": "631399",
    "end": "633200"
  },
  {
    "text": "just saying free. lift F of our free",
    "start": "633200",
    "end": "635720"
  },
  {
    "text": "applicative um the the version for the",
    "start": "635720",
    "end": "639399"
  },
  {
    "text": "freeone ad you can see needs this little",
    "start": "639399",
    "end": "641560"
  },
  {
    "text": "red box on the inside so it's a little",
    "start": "641560",
    "end": "643120"
  },
  {
    "text": "bit more involved um and the codes on",
    "start": "643120",
    "end": "645600"
  },
  {
    "text": "GitHub if you're interested in seeing",
    "start": "645600",
    "end": "646880"
  },
  {
    "text": "how that works but this is all kind of",
    "start": "646880",
    "end": "648320"
  },
  {
    "text": "just boilerplate Machinery that a",
    "start": "648320",
    "end": "650000"
  },
  {
    "text": "library gets rid",
    "start": "650000",
    "end": "651680"
  },
  {
    "text": "of now let's define two simple domains",
    "start": "651680",
    "end": "654519"
  },
  {
    "text": "let's say we have users and we'll say we",
    "start": "654519",
    "end": "656279"
  },
  {
    "text": "have some analytics that we want to do",
    "start": "656279",
    "end": "657680"
  },
  {
    "text": "on those users I've made this just very",
    "start": "657680",
    "end": "659320"
  },
  {
    "text": "simple but um expressive enough that",
    "start": "659320",
    "end": "662160"
  },
  {
    "text": "it's kind of showing you that there's",
    "start": "662160",
    "end": "663519"
  },
  {
    "text": "ways to do this with more than one",
    "start": "663519",
    "end": "664959"
  },
  {
    "text": "domain so with our user operations we",
    "start": "664959",
    "end": "667880"
  },
  {
    "text": "can create users with our analytics we",
    "start": "667880",
    "end": "669440"
  },
  {
    "text": "can analyze",
    "start": "669440",
    "end": "670800"
  },
  {
    "text": "users so the first thing that we need to",
    "start": "670800",
    "end": "672720"
  },
  {
    "text": "do as before is to lift our domains so",
    "start": "672720",
    "end": "674720"
  },
  {
    "text": "we have our user repository and we lift",
    "start": "674720",
    "end": "676360"
  },
  {
    "text": "it using our exec strategy and then with",
    "start": "676360",
    "end": "679200"
  },
  {
    "text": "our analytics repo we do the same thing",
    "start": "679200",
    "end": "681360"
  },
  {
    "text": "um don't worry too much about all other",
    "start": "681360",
    "end": "682920"
  },
  {
    "text": "stuff this inject is just to allow us to",
    "start": "682920",
    "end": "684760"
  },
  {
    "text": "actually combine these domains",
    "start": "684760",
    "end": "686920"
  },
  {
    "text": "later now this is the interesting bit so",
    "start": "686920",
    "end": "689320"
  },
  {
    "text": "when we actually write our program this",
    "start": "689320",
    "end": "691000"
  },
  {
    "text": "is where we Define the semantics of our",
    "start": "691000",
    "end": "693360"
  },
  {
    "text": "domain in terms of sequential and",
    "start": "693360",
    "end": "694800"
  },
  {
    "text": "parallel nature so here we can see we",
    "start": "694800",
    "end": "697560"
  },
  {
    "text": "have a user repository and we want to",
    "start": "697560",
    "end": "699440"
  },
  {
    "text": "create the user Steve and we decide that",
    "start": "699440",
    "end": "701959"
  },
  {
    "text": "it's a sequential operation and then we",
    "start": "701959",
    "end": "703839"
  },
  {
    "text": "do this dot as program Step to lift it",
    "start": "703839",
    "end": "706240"
  },
  {
    "text": "into that bigger structure the the blue",
    "start": "706240",
    "end": "708040"
  },
  {
    "text": "box with the red box inside it and this",
    "start": "708040",
    "end": "710519"
  },
  {
    "text": "will create um a single operation we",
    "start": "710519",
    "end": "713760"
  },
  {
    "text": "then create Harriet and then we do um uh",
    "start": "713760",
    "end": "716680"
  },
  {
    "text": "analytic steps on both of them but we do",
    "start": "716680",
    "end": "718600"
  },
  {
    "text": "them in parallel so we choose to run",
    "start": "718600",
    "end": "720320"
  },
  {
    "text": "this in parallel by calling this par and",
    "start": "720320",
    "end": "723120"
  },
  {
    "text": "then combining these things to say this",
    "start": "723120",
    "end": "724880"
  },
  {
    "text": "runs independent with this and then we",
    "start": "724880",
    "end": "727320"
  },
  {
    "text": "say uh we just want to add whatever the",
    "start": "727320",
    "end": "729200"
  },
  {
    "text": "analytics results are together just for",
    "start": "729200",
    "end": "730800"
  },
  {
    "text": "Simplicity for now and then we lift this",
    "start": "730800",
    "end": "732800"
  },
  {
    "text": "whole thing into a program step so what",
    "start": "732800",
    "end": "735199"
  },
  {
    "text": "this looks like is this we end up with",
    "start": "735199",
    "end": "737240"
  },
  {
    "text": "this create user step as a single step",
    "start": "737240",
    "end": "740560"
  },
  {
    "text": "then we flat map with the free monad to",
    "start": "740560",
    "end": "742600"
  },
  {
    "text": "get the next step then we flap map again",
    "start": "742600",
    "end": "744399"
  },
  {
    "text": "to get the final step and in the final",
    "start": "744399",
    "end": "746040"
  },
  {
    "text": "step we had two things that were to run",
    "start": "746040",
    "end": "748000"
  },
  {
    "text": "independent of one another",
    "start": "748000",
    "end": "750680"
  },
  {
    "text": "now the cool thing is without changing",
    "start": "750680",
    "end": "752480"
  },
  {
    "text": "any of our interpreters we can actually",
    "start": "752480",
    "end": "754639"
  },
  {
    "text": "make our domain um run in parallel",
    "start": "754639",
    "end": "756639"
  },
  {
    "text": "instead of sequence so we can say I",
    "start": "756639",
    "end": "759040"
  },
  {
    "text": "actually want to create my users in",
    "start": "759040",
    "end": "760480"
  },
  {
    "text": "parallel now and then I want to lift",
    "start": "760480",
    "end": "762399"
  },
  {
    "text": "this into the program step and then I",
    "start": "762399",
    "end": "764240"
  },
  {
    "text": "want to analyze them in parallel so we",
    "start": "764240",
    "end": "766600"
  },
  {
    "text": "get something more like this and again",
    "start": "766600",
    "end": "768760"
  },
  {
    "text": "this is just a structure describing what",
    "start": "768760",
    "end": "771279"
  },
  {
    "text": "the actual program looks like it's not",
    "start": "771279",
    "end": "773279"
  },
  {
    "text": "doing any interpretation so now we're",
    "start": "773279",
    "end": "775560"
  },
  {
    "text": "saying I want to create the US of Steve",
    "start": "775560",
    "end": "777000"
  },
  {
    "text": "and Harriet independent of one another",
    "start": "777000",
    "end": "779399"
  },
  {
    "text": "then I want to flat map it for dependent",
    "start": "779399",
    "end": "781040"
  },
  {
    "text": "operations and then I want to do analyze",
    "start": "781040",
    "end": "783320"
  },
  {
    "text": "user one and two in independent of one",
    "start": "783320",
    "end": "786880"
  },
  {
    "text": "another so the next thing is to create",
    "start": "786880",
    "end": "789440"
  },
  {
    "text": "interpreters to interpret the domain",
    "start": "789440",
    "end": "791160"
  },
  {
    "text": "instructions with some",
    "start": "791160",
    "end": "792800"
  },
  {
    "text": "effect we've seen that if we've got",
    "start": "792800",
    "end": "794920"
  },
  {
    "text": "something like this where we have um an",
    "start": "794920",
    "end": "796880"
  },
  {
    "text": "operation create user and we have an",
    "start": "796880",
    "end": "799199"
  },
  {
    "text": "interpreter we want to spit out some",
    "start": "799199",
    "end": "801040"
  },
  {
    "text": "kind of effectful computation now I've",
    "start": "801040",
    "end": "803040"
  },
  {
    "text": "got it just to fit on the slide here is",
    "start": "803040",
    "end": "804600"
  },
  {
    "text": "user John 36 we're returning it directly",
    "start": "804600",
    "end": "807040"
  },
  {
    "text": "but you can imagine that this is where",
    "start": "807040",
    "end": "808600"
  },
  {
    "text": "you do your you know IO and you hit the",
    "start": "808600",
    "end": "810440"
  },
  {
    "text": "database and",
    "start": "810440",
    "end": "811959"
  },
  {
    "text": "whatnot so our user interpreters look",
    "start": "811959",
    "end": "814240"
  },
  {
    "text": "something like this at least in scolar",
    "start": "814240",
    "end": "816600"
  },
  {
    "text": "um we have this natural transformation",
    "start": "816600",
    "end": "818880"
  },
  {
    "text": "which takes the user operations and",
    "start": "818880",
    "end": "820560"
  },
  {
    "text": "turns them into tasks so remember user",
    "start": "820560",
    "end": "822760"
  },
  {
    "text": "operation is just a convenient name for",
    "start": "822760",
    "end": "824839"
  },
  {
    "text": "that F which was our effect type so",
    "start": "824839",
    "end": "826600"
  },
  {
    "text": "we're saying now our effect type we're",
    "start": "826600",
    "end": "828320"
  },
  {
    "text": "choosing it to be a task and then we say",
    "start": "828320",
    "end": "831720"
  },
  {
    "text": "given um all of the different things",
    "start": "831720",
    "end": "834160"
  },
  {
    "text": "that we have in our domain we want to",
    "start": "834160",
    "end": "836519"
  },
  {
    "text": "match on them and then we want to",
    "start": "836519",
    "end": "837959"
  },
  {
    "text": "actually Implement them so this actually",
    "start": "837959",
    "end": "839680"
  },
  {
    "text": "is what you would typically have as",
    "start": "839680",
    "end": "841320"
  },
  {
    "text": "you're implementing subass with any",
    "start": "841320",
    "end": "843079"
  },
  {
    "text": "other approach and you can do the same",
    "start": "843079",
    "end": "845519"
  },
  {
    "text": "sort of thing with the analytics one um",
    "start": "845519",
    "end": "847600"
  },
  {
    "text": "the only difference is that we now do it",
    "start": "847600",
    "end": "849120"
  },
  {
    "text": "across the analytics domain and we can",
    "start": "849120",
    "end": "851519"
  },
  {
    "text": "obviously interpret these to different",
    "start": "851519",
    "end": "853199"
  },
  {
    "text": "effects but it's pretty common that they",
    "start": "853199",
    "end": "855240"
  },
  {
    "text": "will all end up in the same program with",
    "start": "855240",
    "end": "856920"
  },
  {
    "text": "the same effect so it's it's quite",
    "start": "856920",
    "end": "858240"
  },
  {
    "text": "common to have that um and I've put in",
    "start": "858240",
    "end": "860680"
  },
  {
    "text": "these print LS um just so that we can",
    "start": "860680",
    "end": "863120"
  },
  {
    "text": "see the what when things are actually",
    "start": "863120",
    "end": "864720"
  },
  {
    "text": "happening in a",
    "start": "864720",
    "end": "867279"
  },
  {
    "text": "moment so finally we need to interpret",
    "start": "867360",
    "end": "870519"
  },
  {
    "text": "our free program to produce an output",
    "start": "870519",
    "end": "874720"
  },
  {
    "text": "effect in order to do this we need a way",
    "start": "874720",
    "end": "877000"
  },
  {
    "text": "to combine the domains we've seen that",
    "start": "877000",
    "end": "878560"
  },
  {
    "text": "we can define a domain for users and",
    "start": "878560",
    "end": "880440"
  },
  {
    "text": "Define a domain for analytics and then",
    "start": "880440",
    "end": "882320"
  },
  {
    "text": "we can write interpreters for each one",
    "start": "882320",
    "end": "883839"
  },
  {
    "text": "of those things independently but",
    "start": "883839",
    "end": "885800"
  },
  {
    "text": "putting them together requires um what's",
    "start": "885800",
    "end": "887880"
  },
  {
    "text": "called a co-product and you can kind of",
    "start": "887880",
    "end": "889759"
  },
  {
    "text": "think of a co-product very much like an",
    "start": "889759",
    "end": "891600"
  },
  {
    "text": "ether it's basically either a user",
    "start": "891600",
    "end": "894000"
  },
  {
    "text": "operation or an analytics operation and",
    "start": "894000",
    "end": "896480"
  },
  {
    "text": "it kind of ends up being this big tree",
    "start": "896480",
    "end": "899199"
  },
  {
    "text": "so the program interpreter is basically",
    "start": "899199",
    "end": "902959"
  },
  {
    "text": "how we say now we've got this big sort",
    "start": "902959",
    "end": "904800"
  },
  {
    "text": "of tree like structure that have",
    "start": "904800",
    "end": "906519"
  },
  {
    "text": "combined all of our domains how do we",
    "start": "906519",
    "end": "908279"
  },
  {
    "text": "actually interpret something within that",
    "start": "908279",
    "end": "909880"
  },
  {
    "text": "domain and this program instructions is",
    "start": "909880",
    "end": "912639"
  },
  {
    "text": "saying that that Global Effect type I",
    "start": "912639",
    "end": "915279"
  },
  {
    "text": "want to turn it into a task and I'm",
    "start": "915279",
    "end": "916800"
  },
  {
    "text": "going to do that by combining my slow",
    "start": "916800",
    "end": "918480"
  },
  {
    "text": "user interpreter and my slow analytics",
    "start": "918480",
    "end": "920480"
  },
  {
    "text": "interpreter and this all we'll see in a",
    "start": "920480",
    "end": "922360"
  },
  {
    "text": "second is just the way that we find we",
    "start": "922360",
    "end": "924040"
  },
  {
    "text": "in the tree that we need to match",
    "start": "924040",
    "end": "926639"
  },
  {
    "text": "to so creating the program instructions",
    "start": "926639",
    "end": "929079"
  },
  {
    "text": "look something like this um I've added a",
    "start": "929079",
    "end": "932079"
  },
  {
    "text": "third domain logging um just so that you",
    "start": "932079",
    "end": "934519"
  },
  {
    "text": "can see what it actually looks like when",
    "start": "934519",
    "end": "935920"
  },
  {
    "text": "there's more than two and basically this",
    "start": "935920",
    "end": "938399"
  },
  {
    "text": "is saying I go to the left for user op",
    "start": "938399",
    "end": "941040"
  },
  {
    "text": "otherwise I go to the right and then",
    "start": "941040",
    "end": "942240"
  },
  {
    "text": "I've got another co-product and then I",
    "start": "942240",
    "end": "943800"
  },
  {
    "text": "either go to the left for an analytics",
    "start": "943800",
    "end": "945279"
  },
  {
    "text": "operation or to the right for a logging",
    "start": "945279",
    "end": "947000"
  },
  {
    "text": "operation and so when we embed this in",
    "start": "947000",
    "end": "949240"
  },
  {
    "text": "something like the free monad it looks a",
    "start": "949240",
    "end": "950759"
  },
  {
    "text": "bit like this so when we get an actual",
    "start": "950759",
    "end": "953319"
  },
  {
    "text": "operation it'll look more like this we",
    "start": "953319",
    "end": "955680"
  },
  {
    "text": "have an analytics operation and then we",
    "start": "955680",
    "end": "957880"
  },
  {
    "text": "have a user operation we've got this",
    "start": "957880",
    "end": "959480"
  },
  {
    "text": "kind of nesting of these either",
    "start": "959480",
    "end": "961279"
  },
  {
    "text": "co-product types um and then we can say",
    "start": "961279",
    "end": "963839"
  },
  {
    "text": "I want to do an analytics operation flat",
    "start": "963839",
    "end": "965880"
  },
  {
    "text": "map it and then do a user operation that",
    "start": "965880",
    "end": "967920"
  },
  {
    "text": "enforces that dependent um sequence of",
    "start": "967920",
    "end": "971920"
  },
  {
    "text": "steps so when we actually interpret it",
    "start": "971920",
    "end": "974759"
  },
  {
    "text": "that all that I told you about before",
    "start": "974759",
    "end": "976519"
  },
  {
    "text": "that's basically just a way to combine",
    "start": "976519",
    "end": "978120"
  },
  {
    "text": "our interpreters such that they'll",
    "start": "978120",
    "end": "979440"
  },
  {
    "text": "always find the correct thing in the in",
    "start": "979440",
    "end": "981399"
  },
  {
    "text": "the hierarchy and this this is all type",
    "start": "981399",
    "end": "983800"
  },
  {
    "text": "safe so it won't compile unless you",
    "start": "983800",
    "end": "985279"
  },
  {
    "text": "actually do it in the correct order so",
    "start": "985279",
    "end": "987800"
  },
  {
    "text": "in this case we have an analy itics",
    "start": "987800",
    "end": "989240"
  },
  {
    "text": "operation in this structure and we",
    "start": "989240",
    "end": "991079"
  },
  {
    "text": "interpret it with the analytics",
    "start": "991079",
    "end": "992519"
  },
  {
    "text": "interpreter then on the other hand we",
    "start": "992519",
    "end": "994519"
  },
  {
    "text": "have a user operation and we interpret",
    "start": "994519",
    "end": "996839"
  },
  {
    "text": "it with the user interpreter but we saw",
    "start": "996839",
    "end": "999279"
  },
  {
    "text": "before that when we're combining this",
    "start": "999279",
    "end": "1001040"
  },
  {
    "text": "sequential and parallel execution we",
    "start": "1001040",
    "end": "1003600"
  },
  {
    "text": "actually have this extra layer which is",
    "start": "1003600",
    "end": "1005480"
  },
  {
    "text": "the free applicative and we've then got",
    "start": "1005480",
    "end": "1007759"
  },
  {
    "text": "this embedded structure so we have a way",
    "start": "1007759",
    "end": "1009360"
  },
  {
    "text": "to turn that structure into an effect",
    "start": "1009360",
    "end": "1011759"
  },
  {
    "text": "but we don't have a way to turn the the",
    "start": "1011759",
    "end": "1013800"
  },
  {
    "text": "red part into an effect so we might have",
    "start": "1013800",
    "end": "1016880"
  },
  {
    "text": "something like this um and we don't",
    "start": "1016880",
    "end": "1019560"
  },
  {
    "text": "actually have a way to say that our",
    "start": "1019560",
    "end": "1021959"
  },
  {
    "text": "interpreter can read this thing because",
    "start": "1021959",
    "end": "1023560"
  },
  {
    "text": "it it can only read the inner side and",
    "start": "1023560",
    "end": "1025038"
  },
  {
    "text": "you're still ending up with this free",
    "start": "1025039",
    "end": "1026319"
  },
  {
    "text": "and free applicative stuff not resolved",
    "start": "1026319",
    "end": "1028839"
  },
  {
    "text": "so in order to make it parallel we add",
    "start": "1028839",
    "end": "1031880"
  },
  {
    "text": "something like this just a little",
    "start": "1031880",
    "end": "1032959"
  },
  {
    "text": "parallel wrapper and what this basically",
    "start": "1032959",
    "end": "1034959"
  },
  {
    "text": "does is it says give me some um program",
    "start": "1034959",
    "end": "1037520"
  },
  {
    "text": "instructions and something in this case",
    "start": "1037520",
    "end": "1039959"
  },
  {
    "text": "it's a task um that we can evaluate it",
    "start": "1039959",
    "end": "1043079"
  },
  {
    "text": "to and some applicative instance G now",
    "start": "1043079",
    "end": "1045520"
  },
  {
    "text": "the reason we have this applicative is",
    "start": "1045520",
    "end": "1046959"
  },
  {
    "text": "so that we can show that these things",
    "start": "1046959",
    "end": "1048480"
  },
  {
    "text": "are in dependent and then we extend free",
    "start": "1048480",
    "end": "1051799"
  },
  {
    "text": "app of program instructions to G and",
    "start": "1051799",
    "end": "1054039"
  },
  {
    "text": "that's basically saying now we can",
    "start": "1054039",
    "end": "1055320"
  },
  {
    "text": "transform the red thing with the the",
    "start": "1055320",
    "end": "1057880"
  },
  {
    "text": "operations within it into some effect",
    "start": "1057880",
    "end": "1060200"
  },
  {
    "text": "type and that's basically just the",
    "start": "1060200",
    "end": "1062440"
  },
  {
    "text": "implementation don't need to worry too",
    "start": "1062440",
    "end": "1064080"
  },
  {
    "text": "much about it so when we actually run",
    "start": "1064080",
    "end": "1065919"
  },
  {
    "text": "the program it looks like this we say we",
    "start": "1065919",
    "end": "1067919"
  },
  {
    "text": "we have our program we want to use our",
    "start": "1067919",
    "end": "1070440"
  },
  {
    "text": "program instructions which was that",
    "start": "1070440",
    "end": "1071840"
  },
  {
    "text": "co-product we defined and then we want",
    "start": "1071840",
    "end": "1073720"
  },
  {
    "text": "to fold map with our parallel",
    "start": "1073720",
    "end": "1075200"
  },
  {
    "text": "interpreter and the parallel interpreter",
    "start": "1075200",
    "end": "1076840"
  },
  {
    "text": "is what allows us to run these things in",
    "start": "1076840",
    "end": "1078480"
  },
  {
    "text": "parallel",
    "start": "1078480",
    "end": "1080000"
  },
  {
    "text": "um and then we do unsafe perform Sy",
    "start": "1080000",
    "end": "1082000"
  },
  {
    "text": "because we're using a task in this",
    "start": "1082000",
    "end": "1084039"
  },
  {
    "text": "case so if we take a look at um the",
    "start": "1084039",
    "end": "1086919"
  },
  {
    "text": "program again what we saw before we had",
    "start": "1086919",
    "end": "1088919"
  },
  {
    "text": "create users in sequence and then",
    "start": "1088919",
    "end": "1090440"
  },
  {
    "text": "analyze them in parallel and when we run",
    "start": "1090440",
    "end": "1092600"
  },
  {
    "text": "that we actually get exactly what we",
    "start": "1092600",
    "end": "1094440"
  },
  {
    "text": "expect we create the US of Steve then we",
    "start": "1094440",
    "end": "1096039"
  },
  {
    "text": "finish creating the US of Steve then we",
    "start": "1096039",
    "end": "1097520"
  },
  {
    "text": "create the US of Harriet and finish",
    "start": "1097520",
    "end": "1098720"
  },
  {
    "text": "creating the US of Harriet so those",
    "start": "1098720",
    "end": "1100240"
  },
  {
    "text": "things happen in sequence and then you",
    "start": "1100240",
    "end": "1101799"
  },
  {
    "text": "see we start analyzing the user Harriet",
    "start": "1101799",
    "end": "1104320"
  },
  {
    "text": "and then start analyzing the user Steve",
    "start": "1104320",
    "end": "1106200"
  },
  {
    "text": "and then they both finish so that's them",
    "start": "1106200",
    "end": "1108000"
  },
  {
    "text": "running in parallel like we",
    "start": "1108000",
    "end": "1110080"
  },
  {
    "text": "expected and with program two we have",
    "start": "1110080",
    "end": "1112200"
  },
  {
    "text": "the same sort of thing that we'd expect",
    "start": "1112200",
    "end": "1113760"
  },
  {
    "text": "so we said we want to create the users",
    "start": "1113760",
    "end": "1115360"
  },
  {
    "text": "in parallel and then we want to run the",
    "start": "1115360",
    "end": "1117159"
  },
  {
    "text": "analytics in parallel as two dependent",
    "start": "1117159",
    "end": "1119320"
  },
  {
    "text": "stages and you can see here we create",
    "start": "1119320",
    "end": "1121440"
  },
  {
    "text": "the user Harriet and Steve and then they",
    "start": "1121440",
    "end": "1123360"
  },
  {
    "text": "both finish then we uh analyze user",
    "start": "1123360",
    "end": "1125600"
  },
  {
    "text": "Harriet and Steve and then they both",
    "start": "1125600",
    "end": "1128280"
  },
  {
    "text": "finish so things to note um the target",
    "start": "1128280",
    "end": "1132080"
  },
  {
    "text": "effect must have an applicative instance",
    "start": "1132080",
    "end": "1135000"
  },
  {
    "text": "um the reason for this is that you",
    "start": "1135000",
    "end": "1136559"
  },
  {
    "text": "actually need to uh evaluate these",
    "start": "1136559",
    "end": "1138520"
  },
  {
    "text": "things in terms of the free applicative",
    "start": "1138520",
    "end": "1140480"
  },
  {
    "text": "so whatever you end up using task is an",
    "start": "1140480",
    "end": "1142919"
  },
  {
    "text": "example that actually does have one um",
    "start": "1142919",
    "end": "1146360"
  },
  {
    "text": "the task in Scala Z this actually kind",
    "start": "1146360",
    "end": "1150159"
  },
  {
    "text": "of bit me when I first wrote this I ran",
    "start": "1150159",
    "end": "1152120"
  },
  {
    "text": "it and the whole thing seemed like it",
    "start": "1152120",
    "end": "1153280"
  },
  {
    "text": "was running in sequence in scolar z um",
    "start": "1153280",
    "end": "1156400"
  },
  {
    "text": "because you have the top level monad and",
    "start": "1156400",
    "end": "1158600"
  },
  {
    "text": "it brings in the applicative it's",
    "start": "1158600",
    "end": "1159840"
  },
  {
    "text": "actually a sequential applicative which",
    "start": "1159840",
    "end": "1161799"
  },
  {
    "text": "was a design decision um but there is",
    "start": "1161799",
    "end": "1164159"
  },
  {
    "text": "another one that's tagged as app",
    "start": "1164159",
    "end": "1165480"
  },
  {
    "text": "parallel or you can Implement your own",
    "start": "1165480",
    "end": "1167360"
  },
  {
    "text": "if you prefer um and the other thing as",
    "start": "1167360",
    "end": "1169960"
  },
  {
    "text": "I mentioned the at as program step um",
    "start": "1169960",
    "end": "1172840"
  },
  {
    "text": "you can remove most of that boiler plate",
    "start": "1172840",
    "end": "1174799"
  },
  {
    "text": "with implicits if you really want I just",
    "start": "1174799",
    "end": "1177280"
  },
  {
    "text": "left it in there so you can kind of see",
    "start": "1177280",
    "end": "1178679"
  },
  {
    "text": "where it's lifting into that bigger",
    "start": "1178679",
    "end": "1181440"
  },
  {
    "text": "structure now there's obviously a lot of",
    "start": "1181440",
    "end": "1183640"
  },
  {
    "text": "boiler plate you probably think Jesus",
    "start": "1183640",
    "end": "1184840"
  },
  {
    "text": "why would ever use this um there is",
    "start": "1184840",
    "end": "1187159"
  },
  {
    "text": "libraries that actually abstract out a",
    "start": "1187159",
    "end": "1188720"
  },
  {
    "text": "lot of this boiler plate with macros so",
    "start": "1188720",
    "end": "1190480"
  },
  {
    "text": "it ends up looking more or less exactly",
    "start": "1190480",
    "end": "1192159"
  },
  {
    "text": "like the free final taglist and this",
    "start": "1192159",
    "end": "1195360"
  },
  {
    "text": "kind of gives you a lot more expressive",
    "start": "1195360",
    "end": "1197400"
  },
  {
    "text": "power um now I'm",
    "start": "1197400",
    "end": "1199159"
  },
  {
    "text": "I personally think if you don't need the",
    "start": "1199159",
    "end": "1200679"
  },
  {
    "text": "expressive power this is probably a bit",
    "start": "1200679",
    "end": "1202559"
  },
  {
    "text": "Overkill but there are certainly",
    "start": "1202559",
    "end": "1204200"
  },
  {
    "text": "applications where this kind of thing is",
    "start": "1204200",
    "end": "1205559"
  },
  {
    "text": "really nice especially with sort of",
    "start": "1205559",
    "end": "1206960"
  },
  {
    "text": "compilers and",
    "start": "1206960",
    "end": "1208559"
  },
  {
    "text": "stuff um and free uh freestyle actually",
    "start": "1208559",
    "end": "1212159"
  },
  {
    "text": "defaults to this structure that we saw",
    "start": "1212159",
    "end": "1214200"
  },
  {
    "text": "which is free on the outside free",
    "start": "1214200",
    "end": "1215440"
  },
  {
    "text": "applicative on the inside um and there",
    "start": "1215440",
    "end": "1217960"
  },
  {
    "text": "are several Integrations and Library",
    "start": "1217960",
    "end": "1219480"
  },
  {
    "text": "abstractions out of the box which is",
    "start": "1219480",
    "end": "1220720"
  },
  {
    "text": "really nice so it means that you don't",
    "start": "1220720",
    "end": "1222520"
  },
  {
    "text": "have to write your interpreters for a",
    "start": "1222520",
    "end": "1223919"
  },
  {
    "text": "whole bunch of different things they're",
    "start": "1223919",
    "end": "1225039"
  },
  {
    "text": "all just there um as if a standard",
    "start": "1225039",
    "end": "1227280"
  },
  {
    "text": "Library would be um and the the other",
    "start": "1227280",
    "end": "1229760"
  },
  {
    "text": "thing that it does that's really nice is",
    "start": "1229760",
    "end": "1231000"
  },
  {
    "text": "it has out of the box optimizations to",
    "start": "1231000",
    "end": "1233360"
  },
  {
    "text": "reduce the overhead of using lots of",
    "start": "1233360",
    "end": "1235039"
  },
  {
    "text": "domain algebras so we saw it with two we",
    "start": "1235039",
    "end": "1236919"
  },
  {
    "text": "saw it with users and analytics and then",
    "start": "1236919",
    "end": "1238960"
  },
  {
    "text": "we saw it with logging and you can",
    "start": "1238960",
    "end": "1240120"
  },
  {
    "text": "imagine that your application might be",
    "start": "1240120",
    "end": "1241559"
  },
  {
    "text": "split up into you know 50 or 100 of",
    "start": "1241559",
    "end": "1243360"
  },
  {
    "text": "these things and you kind of building up",
    "start": "1243360",
    "end": "1245240"
  },
  {
    "text": "this massive Tree in that case and that",
    "start": "1245240",
    "end": "1247640"
  },
  {
    "text": "can actually start to be a bit of a",
    "start": "1247640",
    "end": "1249000"
  },
  {
    "text": "performance issue so um it has this",
    "start": "1249000",
    "end": "1251919"
  },
  {
    "text": "underlying Library called Iota which",
    "start": "1251919",
    "end": "1253919"
  },
  {
    "text": "implements the co-products as a linked",
    "start": "1253919",
    "end": "1255600"
  },
  {
    "text": "list at the typee level um and that",
    "start": "1255600",
    "end": "1257559"
  },
  {
    "text": "means that you have much faster um",
    "start": "1257559",
    "end": "1259600"
  },
  {
    "text": "access when these things",
    "start": "1259600",
    "end": "1261640"
  },
  {
    "text": "scale so just to recap what we've",
    "start": "1261640",
    "end": "1263799"
  },
  {
    "text": "covered um we looked at why we abstract",
    "start": "1263799",
    "end": "1266240"
  },
  {
    "text": "effects from our domain we looked at",
    "start": "1266240",
    "end": "1268200"
  },
  {
    "text": "actually abstracting these effects with",
    "start": "1268200",
    "end": "1269679"
  },
  {
    "text": "things like final tag list or free",
    "start": "1269679",
    "end": "1271159"
  },
  {
    "text": "structures we then looked at combining",
    "start": "1271159",
    "end": "1273440"
  },
  {
    "text": "free and free applicative to introduce",
    "start": "1273440",
    "end": "1275120"
  },
  {
    "text": "parallelism into our domain without",
    "start": "1275120",
    "end": "1276960"
  },
  {
    "text": "having to re reimplement our",
    "start": "1276960",
    "end": "1279240"
  },
  {
    "text": "interpreters and then finally we looked",
    "start": "1279240",
    "end": "1281159"
  },
  {
    "text": "at freestyle to remove boiler plate",
    "start": "1281159",
    "end": "1283480"
  },
  {
    "text": "thank you",
    "start": "1283480",
    "end": "1284810"
  },
  {
    "text": "[Applause]",
    "start": "1284810",
    "end": "1290050"
  }
]