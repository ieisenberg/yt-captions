[
  {
    "start": "0",
    "end": "70000"
  },
  {
    "text": "[Music]",
    "start": "970",
    "end": "7838"
  },
  {
    "text": "so welcome to the session on grpc so in this situation i am going to talk about",
    "start": "12480",
    "end": "19279"
  },
  {
    "text": "cloud native communication patterns that you can build with grpc so uh during the course of the talk i'll",
    "start": "19279",
    "end": "25680"
  },
  {
    "text": "uh discuss about the key uh fundamental fundamentals of grpc protocol the main",
    "start": "25680",
    "end": "32320"
  },
  {
    "text": "communication patterns and how you can further extend grpc such as uh service uh definition extensions and",
    "start": "32320",
    "end": "39840"
  },
  {
    "text": "how you can expose your pc services as apis and how you can use it alongside",
    "start": "39840",
    "end": "45120"
  },
  {
    "text": "other protocol so uh before i get started let me give",
    "start": "45120",
    "end": "50640"
  },
  {
    "text": "you a brief introduction about myself so i have been working in the enterprise integration and microservices",
    "start": "50640",
    "end": "56719"
  },
  {
    "text": "domain for last decade or so and i ordered a couple of books one on grpsc and one on microservices",
    "start": "56719",
    "end": "64478"
  },
  {
    "text": "and currently i work as a product manager at wsr2",
    "start": "64479",
    "end": "69920"
  },
  {
    "start": "70000",
    "end": "288000"
  },
  {
    "text": "all right so let's get started with the protocol i'm i'm sure most of you have heard of jrpc so let me give you a very",
    "start": "71280",
    "end": "79439"
  },
  {
    "text": "high level overview of the protocol so as you know it's an uh inter-process communication technology that allows you",
    "start": "79439",
    "end": "86159"
  },
  {
    "text": "to build distributed applications so grpc uh built on top of the",
    "start": "86159",
    "end": "91600"
  },
  {
    "text": "fundamentals of rpc remote procedure calls and in fact it's sort of a modernization",
    "start": "91600",
    "end": "98720"
  },
  {
    "text": "of conventional rpc technologies and adopting modern communication",
    "start": "98720",
    "end": "104799"
  },
  {
    "text": "protocols and data serialization protocols such as protocol buffers so if you look at the foundations of",
    "start": "104799",
    "end": "112479"
  },
  {
    "text": "grpc protocol so it's it's built on top of the concept",
    "start": "112479",
    "end": "118640"
  },
  {
    "text": "of invoking a remote function as easy as making a local function for",
    "start": "118640",
    "end": "124880"
  },
  {
    "text": "right so uh so you you start building a grpc service and",
    "start": "124880",
    "end": "131200"
  },
  {
    "text": "then you build the grpc client application so that client application can invoke",
    "start": "131200",
    "end": "137120"
  },
  {
    "text": "the remote service as easy as making a local capture code",
    "start": "137120",
    "end": "142720"
  },
  {
    "text": "so the foundation of grpc protocol is the service definition so",
    "start": "142720",
    "end": "148879"
  },
  {
    "text": "you define these services business capabilities using the service definition language or interface",
    "start": "148879",
    "end": "155200"
  },
  {
    "text": "definition language using protocol buffers so in this example we have a",
    "start": "155200",
    "end": "162319"
  },
  {
    "text": "product service and a consumer service and so the initial service definition is",
    "start": "162319",
    "end": "169120"
  },
  {
    "text": "specified using the product information protocol buffer file so this contains all the",
    "start": "169120",
    "end": "176959"
  },
  {
    "text": "details of the service and the remote methods that i offer as part of the product",
    "start": "176959",
    "end": "182640"
  },
  {
    "text": "service and then any any required data type that i would use in my",
    "start": "182640",
    "end": "187680"
  },
  {
    "text": "communication so the once you have the service definition built then uh",
    "start": "187680",
    "end": "194720"
  },
  {
    "text": "you can generate the server side code and the client-side code so the service",
    "start": "194720",
    "end": "200239"
  },
  {
    "text": "side desktop contains all the abstractions related to the communication such as serializing",
    "start": "200239",
    "end": "207360"
  },
  {
    "text": "your remote procedure calls to wire formats",
    "start": "207360",
    "end": "213120"
  },
  {
    "text": "using protocol buffers over http 2 and so as part of the developer's",
    "start": "213120",
    "end": "220879"
  },
  {
    "text": "scope you only build the required business capabilities in your services code and similarly at",
    "start": "220879",
    "end": "227680"
  },
  {
    "text": "the consumer side you use the same service definition file and you generate the stub",
    "start": "227680",
    "end": "233840"
  },
  {
    "text": "client side stuff and again you just have to invoke the",
    "start": "233840",
    "end": "238879"
  },
  {
    "text": "generated code as uh as making a local function call and all the generated stuff will take care",
    "start": "238879",
    "end": "244720"
  },
  {
    "text": "of uh during the internal communication so",
    "start": "244720",
    "end": "249760"
  },
  {
    "text": "uh so it's contract first approach is uh heavily uh used in grpc protocol and",
    "start": "249760",
    "end": "256720"
  },
  {
    "text": "uh unlike other protocols such as rest or with open api graphical we use uh binary message",
    "start": "256720",
    "end": "264960"
  },
  {
    "text": "format on the wire using and you can use different programming",
    "start": "264960",
    "end": "271040"
  },
  {
    "text": "languages to build uh different parts of the application which means uh you can build a server",
    "start": "271040",
    "end": "277120"
  },
  {
    "text": "application using language successful whereas client the application can",
    "start": "277120",
    "end": "282639"
  },
  {
    "text": "be configured using completely different programming language",
    "start": "282639",
    "end": "287759"
  },
  {
    "text": "now let's uh dive into the service definition uh in detail so as i said earlier this is",
    "start": "287919",
    "end": "295759"
  },
  {
    "start": "288000",
    "end": "345000"
  },
  {
    "text": "the place that you define your services contract and so this is the place you define all",
    "start": "295759",
    "end": "301120"
  },
  {
    "text": "the remote methods so we start with defining the service interface and then we",
    "start": "301120",
    "end": "306960"
  },
  {
    "text": "define all the remote methods that we have and all the required type definition so",
    "start": "306960",
    "end": "312800"
  },
  {
    "text": "these types will be used inside our remote invocations uh either as",
    "start": "312800",
    "end": "318639"
  },
  {
    "text": "arguments or as written type and once you have uh service definition",
    "start": "318639",
    "end": "325520"
  },
  {
    "text": "ready so it's it's actually implemented using buffers and uh so so as the server or client",
    "start": "325520",
    "end": "333280"
  },
  {
    "text": "application you would liberate this service definition and build the stuff code",
    "start": "333280",
    "end": "341599"
  },
  {
    "text": "yeah so so once you have service definition uh in place then you can define uh",
    "start": "342240",
    "end": "350000"
  },
  {
    "start": "345000",
    "end": "431000"
  },
  {
    "text": "you can build your server server side application so uh so as part of the server side",
    "start": "350000",
    "end": "356080"
  },
  {
    "text": "application development you generate the server-side stuff and then you",
    "start": "356080",
    "end": "361440"
  },
  {
    "text": "it's a matter of implementing the business flow right so in this sample gopro let's see all the generated code",
    "start": "361440",
    "end": "367759"
  },
  {
    "text": "provides the abstractions related to the communication and uh as part of the business surgical",
    "start": "367759",
    "end": "374000"
  },
  {
    "text": "deal with uh implementing all these remote methods that you have in your",
    "start": "374000",
    "end": "380080"
  },
  {
    "text": "service definition so once you have the service services business logic implemented",
    "start": "380080",
    "end": "386960"
  },
  {
    "text": "you need to run a server application so the given service is attached to a grpc",
    "start": "386960",
    "end": "393680"
  },
  {
    "text": "server and the server is uh very much like a http 2 server where you",
    "start": "393680",
    "end": "400960"
  },
  {
    "text": "start the server and register the register the service application of",
    "start": "400960",
    "end": "406000"
  },
  {
    "text": "the server that you started so once you have the server up and running and all the services will be",
    "start": "406000",
    "end": "411440"
  },
  {
    "text": "posted inside the server application so uh as you can see uh there are a lot",
    "start": "411440",
    "end": "418000"
  },
  {
    "text": "of uh protocol level uh details uh which are encapsulated or hidden from",
    "start": "418000",
    "end": "424880"
  },
  {
    "text": "the developer the developer only focus on the business level of your microservice",
    "start": "424880",
    "end": "431840"
  },
  {
    "start": "431000",
    "end": "460000"
  },
  {
    "text": "similarly in at the client side you generate the client side sub using the",
    "start": "431919",
    "end": "437360"
  },
  {
    "text": "service definition and then from the generated code you",
    "start": "437360",
    "end": "442639"
  },
  {
    "text": "just connect to connect to the rpc server and then you invoke the uh a remote",
    "start": "442639",
    "end": "450080"
  },
  {
    "text": "method using the local stock now in this case uh the server the client application is built using",
    "start": "450080",
    "end": "457039"
  },
  {
    "text": "java so hopefully that gives you a high level",
    "start": "457039",
    "end": "463039"
  },
  {
    "start": "460000",
    "end": "600000"
  },
  {
    "text": "overview of how protocol works and how service and client side works now let's look at some of the key",
    "start": "463039",
    "end": "469759"
  },
  {
    "text": "benefits that the rpc appears into the picture so uh obviously it's",
    "start": "469759",
    "end": "474960"
  },
  {
    "text": "uh it's a binary protocol based on protocol buffers which is a high performance basic data",
    "start": "474960",
    "end": "482400"
  },
  {
    "text": "serialization format so therefore it's a very efficient protocol for internal service",
    "start": "482400",
    "end": "487919"
  },
  {
    "text": "communication especially when you have multiple microservices communicating with each other using synchronous",
    "start": "487919",
    "end": "494000"
  },
  {
    "text": "communication patterns it's very efficient for the call and also you always start",
    "start": "494000",
    "end": "502000"
  },
  {
    "text": "building services or clients using this contract for that coach where you define all the service remote",
    "start": "502000",
    "end": "509520"
  },
  {
    "text": "methods and types so it's uh the code that you write as part of the client or service",
    "start": "509520",
    "end": "517518"
  },
  {
    "text": "is strongly uh types are well defined uh beforehand so",
    "start": "517519",
    "end": "523839"
  },
  {
    "text": "uh the code that you're writing is very tight safe and so it ensures the",
    "start": "523839",
    "end": "531040"
  },
  {
    "text": "uh the stability of the application as well as the security aspects of the application",
    "start": "531040",
    "end": "537920"
  },
  {
    "text": "because you are uh well aware of the type that you would use in the",
    "start": "537920",
    "end": "542959"
  },
  {
    "text": "remote communication and obviously you can use multiple programming",
    "start": "542959",
    "end": "548399"
  },
  {
    "text": "languages to build different parts of the application we can have",
    "start": "548399",
    "end": "554959"
  },
  {
    "text": "three different services using three different programming languages but still they communicate without any",
    "start": "555760",
    "end": "562480"
  },
  {
    "text": "hassle because of the language neutral nature of grpc so as part of the",
    "start": "562480",
    "end": "569920"
  },
  {
    "text": "foundations of the protocol your pc offers uh streaming support you can do streaming",
    "start": "569920",
    "end": "576399"
  },
  {
    "text": "at both sides with streaming so i'll go into the details and discuss communication",
    "start": "576399",
    "end": "582640"
  },
  {
    "text": "later and also this is part of a large ecosystem so this is a cloud native uh computing",
    "start": "582640",
    "end": "589360"
  },
  {
    "text": "national project and there are a lot of other projects uh adopting the rpcsp",
    "start": "589360",
    "end": "594720"
  },
  {
    "text": "uh into service communication technology and uh so this",
    "start": "594720",
    "end": "602519"
  },
  {
    "start": "600000",
    "end": "711000"
  },
  {
    "text": "comparison uh gives you a better understanding of how it sounds",
    "start": "602519",
    "end": "608320"
  },
  {
    "text": "with other protocols uh so if you compare grpc with rest with open api",
    "start": "608320",
    "end": "615519"
  },
  {
    "text": "and graphql you can see some clear differences so uh inherently this is built on top of",
    "start": "615519",
    "end": "622160"
  },
  {
    "text": "http 2 and we use binary protocols using binary data formats using protocol",
    "start": "622160",
    "end": "628720"
  },
  {
    "text": "buffers and uh so you can see that uh",
    "start": "628720",
    "end": "634800"
  },
  {
    "text": "natively of a streaming support as a first class concept in the protocol and definition and the",
    "start": "634800",
    "end": "643839"
  },
  {
    "text": "declarations are strict so that as as a developer you don't really have",
    "start": "643839",
    "end": "649600"
  },
  {
    "text": "to worry about the underlying for instance when you are building a",
    "start": "649600",
    "end": "654720"
  },
  {
    "text": "open api based service so the protocol level details actually leaked into the",
    "start": "654720",
    "end": "661720"
  },
  {
    "text": "implementation because you'll be dealing with parts with the post methods as part of the",
    "start": "661720",
    "end": "668160"
  },
  {
    "text": "implementation whereas said jrpc although it is based on http 2",
    "start": "668160",
    "end": "674000"
  },
  {
    "text": "none of the http 2 details are exposed to the service developer or the business of",
    "start": "674000",
    "end": "680880"
  },
  {
    "text": "your application and and when it comes to the uh limitations",
    "start": "680880",
    "end": "686560"
  },
  {
    "text": "we see browser support as an implementation of the protocol and certain other limitations that we",
    "start": "686560",
    "end": "693920"
  },
  {
    "text": "have with http or respace protocol such as",
    "start": "693920",
    "end": "700160"
  },
  {
    "text": "negotiations for things such as etags as",
    "start": "700839",
    "end": "707279"
  },
  {
    "text": "limitations of grpc so uh now let's move on to the",
    "start": "707279",
    "end": "715440"
  },
  {
    "start": "711000",
    "end": "858000"
  },
  {
    "text": "real world implementations of grpc microservices so although it's a very",
    "start": "715440",
    "end": "722880"
  },
  {
    "text": "popular uh emerging protocol uh it's not a silver bullet technology",
    "start": "722880",
    "end": "728240"
  },
  {
    "text": "so what we often see in most of the microservices uh implementation is that it is used",
    "start": "728240",
    "end": "733839"
  },
  {
    "text": "alongside other protocols so in this example you can see a",
    "start": "733839",
    "end": "739440"
  },
  {
    "text": "uh real-world microservices implementation of a",
    "start": "739440",
    "end": "744480"
  },
  {
    "text": "online retail application where we have different microservices such as older",
    "start": "744480",
    "end": "749760"
  },
  {
    "text": "products and so on so in this uh architecture we",
    "start": "749760",
    "end": "754880"
  },
  {
    "text": "have used grpc as the internal service communication technology for all the synchronous",
    "start": "754880",
    "end": "760560"
  },
  {
    "text": "request response style communication or streaming related communication and we",
    "start": "760560",
    "end": "766320"
  },
  {
    "text": "use different programming languages to build different services and when you have exposed these services",
    "start": "766320",
    "end": "772000"
  },
  {
    "text": "to the external world or external consumers you use an api gateway at the front door to your",
    "start": "772000",
    "end": "778560"
  },
  {
    "text": "apis but in that case we use uh different uh",
    "start": "778560",
    "end": "784000"
  },
  {
    "text": "protocols to expose them so in this case we have a rest based open api service exports through",
    "start": "784000",
    "end": "789680"
  },
  {
    "text": "the gateway and also you can use graphql based service as the external facing service and there is",
    "start": "789680",
    "end": "796560"
  },
  {
    "text": "nothing uh limits you from uh exposing the grpc service as it is to the consumers",
    "start": "796560",
    "end": "803040"
  },
  {
    "text": "aspect so based on the use case you can use either of these approaches and when when you have a typical",
    "start": "803040",
    "end": "809120"
  },
  {
    "text": "microservices implementation uh it's not always a request response",
    "start": "809120",
    "end": "814399"
  },
  {
    "text": "type application that you you will use so you can use it alongside other communication patterns such as puffs up",
    "start": "814399",
    "end": "822880"
  },
  {
    "text": "then in this case we have a checkout service which uses compass uh sinking protocol",
    "start": "822880",
    "end": "830480"
  },
  {
    "text": "here we publish a message to a kafka broker and there's a consumer whereas at the",
    "start": "830480",
    "end": "836720"
  },
  {
    "text": "same time we start with the service as well so the key idea behind the overall design is to",
    "start": "836720",
    "end": "844480"
  },
  {
    "text": "use multiple protocols to realize a business use case so based on the type of the use case you",
    "start": "844480",
    "end": "850320"
  },
  {
    "text": "can use different protocols and communication patterns",
    "start": "850320",
    "end": "857440"
  },
  {
    "text": "all right now uh let's look at some of the foundation communication patterns",
    "start": "857440",
    "end": "862560"
  },
  {
    "start": "858000",
    "end": "933000"
  },
  {
    "text": "that you can build with the rpc i'm going to primarily cover four main communication patterns and then",
    "start": "862560",
    "end": "869120"
  },
  {
    "text": "some advanced communication techniques built around those four patterns so the first",
    "start": "869120",
    "end": "876160"
  },
  {
    "text": "communication technique is unary or simple rpc so it is the same thing that we have",
    "start": "876160",
    "end": "881680"
  },
  {
    "text": "discussed in the previous example so you have a server application",
    "start": "881680",
    "end": "886880"
  },
  {
    "text": "service application and a client application so as part of the invocation you're",
    "start": "886880",
    "end": "892959"
  },
  {
    "text": "sending a single request to the server and you get a single response",
    "start": "892959",
    "end": "898160"
  },
  {
    "text": "so for instance in this case as the consumer i am invoking the remote method order with the order id",
    "start": "898160",
    "end": "904639"
  },
  {
    "text": "and it responds it just responds with the all the details as the response single",
    "start": "904639",
    "end": "910959"
  },
  {
    "text": "request and a response so uh in the service definition profile you can see service definition has all",
    "start": "910959",
    "end": "916959"
  },
  {
    "text": "order management uh and then i defined remote networks i get order",
    "start": "916959",
    "end": "923199"
  },
  {
    "text": "with the parameter and you can see we are returning an order message type so that's a very very",
    "start": "923199",
    "end": "930160"
  },
  {
    "text": "straightforward use case now we can further extend this to a server streaming rpc",
    "start": "930160",
    "end": "937199"
  },
  {
    "start": "933000",
    "end": "1024000"
  },
  {
    "text": "where we have again a single request but server application sends a sequence",
    "start": "937199",
    "end": "944000"
  },
  {
    "text": "of responses which is known as a screen after getting the client's",
    "start": "944000",
    "end": "949040"
  },
  {
    "text": "request message so the example given here is a search",
    "start": "949040",
    "end": "954240"
  },
  {
    "text": "orders remote method so as part of the search orders remote method location we give a query and based on",
    "start": "954240",
    "end": "961759"
  },
  {
    "text": "the query we can send all the matching responses so as",
    "start": "961759",
    "end": "967360"
  },
  {
    "text": "the server application what it does is uh once it once the remote method is",
    "start": "967360",
    "end": "974399"
  },
  {
    "text": "invoked it starts sending multiple responses back to the client application and when it is done",
    "start": "974399",
    "end": "981040"
  },
  {
    "text": "with the responses this server application marks the end of the stream",
    "start": "981040",
    "end": "987680"
  },
  {
    "text": "so the client application can start reading all the incoming responses and when it detects the end of",
    "start": "987680",
    "end": "994480"
  },
  {
    "text": "the stream it knows that all the required stream messages are received at the client side",
    "start": "994480",
    "end": "1002639"
  },
  {
    "text": "now uh the cool thing is as part of the service definition itself you can declare that",
    "start": "1002639",
    "end": "1008079"
  },
  {
    "text": "i'm using a streaming i use the service streaming use case in my service definition",
    "start": "1008079",
    "end": "1013440"
  },
  {
    "text": "so this rtc method uses uh server streaming so as you can see it returns a stream of",
    "start": "1013440",
    "end": "1020399"
  },
  {
    "text": "audience now you can uh use the same concept at the client side",
    "start": "1020399",
    "end": "1026640"
  },
  {
    "start": "1024000",
    "end": "1084000"
  },
  {
    "text": "as well so at the client side here we are sending multiple messages to",
    "start": "1026640",
    "end": "1032798"
  },
  {
    "text": "the server application so obviously in this case you have update orders",
    "start": "1032799",
    "end": "1038240"
  },
  {
    "text": "with multiple orders so these are stream of requests or the request and",
    "start": "1038240",
    "end": "1044480"
  },
  {
    "text": "the server application returns a single response and the time of the",
    "start": "1044480",
    "end": "1049919"
  },
  {
    "text": "response actually depends on depends on the business level right so which means uh some application",
    "start": "1049919",
    "end": "1056000"
  },
  {
    "text": "decide to either wait till it receive the end of the stream from the client side or",
    "start": "1056000",
    "end": "1061600"
  },
  {
    "text": "given business condition is satisfied at the server side for instance if we require if if it",
    "start": "1061600",
    "end": "1068080"
  },
  {
    "text": "receives two requests with the required details then you can immediately send back your response",
    "start": "1068080",
    "end": "1074559"
  },
  {
    "text": "so uh at the service implementation service definition you can specify uh stream of orders as the",
    "start": "1074559",
    "end": "1082320"
  },
  {
    "text": "input parameter so that is client streaming which is the opposite",
    "start": "1082320",
    "end": "1087679"
  },
  {
    "start": "1084000",
    "end": "1199000"
  },
  {
    "text": "of server streaming so we can combine uh these two patterns and build a bi-directional stream in rpc",
    "start": "1087679",
    "end": "1096080"
  },
  {
    "text": "now in this case you have a server application sending a stream of responses as well as client",
    "start": "1096080",
    "end": "1103200"
  },
  {
    "text": "is also sending that stream stream of request so to understand this further let's take",
    "start": "1103200",
    "end": "1108799"
  },
  {
    "text": "this use case of uh order processing so here we have the order management",
    "start": "1108799",
    "end": "1114080"
  },
  {
    "text": "service and the consumer service so the consumer service starts sending a stream of",
    "start": "1114080",
    "end": "1119200"
  },
  {
    "text": "orders to the order management services and the business logic of the order management service is implemented such",
    "start": "1119200",
    "end": "1126000"
  },
  {
    "text": "that it start processing all these different orders and it creates different shipments so you can have",
    "start": "1126000",
    "end": "1132160"
  },
  {
    "text": "multiple shipments which means as the response uh it can start sending multiple shipments",
    "start": "1132160",
    "end": "1138799"
  },
  {
    "text": "uh a stream of shipments back to the consumer so uh again",
    "start": "1138799",
    "end": "1145679"
  },
  {
    "text": "end of system is uh marked by the client application for the",
    "start": "1145679",
    "end": "1151039"
  },
  {
    "text": "incoming stream but our ground stream is server application of the end of the stream",
    "start": "1151039",
    "end": "1157919"
  },
  {
    "text": "and again in the service definition you can see stream uh both at the uh",
    "start": "1157919",
    "end": "1164320"
  },
  {
    "text": "argument level as well as the equitable so again the business logic of a",
    "start": "1164320",
    "end": "1170080"
  },
  {
    "text": "bi-directional streaming use case uh vastly depends on",
    "start": "1170080",
    "end": "1176000"
  },
  {
    "text": "the details of the use case so uh you cannot really generalize the bioreaction",
    "start": "1176000",
    "end": "1181360"
  },
  {
    "text": "that's streaming you know generalized scenario so",
    "start": "1181360",
    "end": "1186400"
  },
  {
    "text": "depending on the business strategy you may decide when to send the stream of responses and when to read all",
    "start": "1186400",
    "end": "1192480"
  },
  {
    "text": "the responses and so on so those are the four main communication patterns uh now let's",
    "start": "1192480",
    "end": "1200240"
  },
  {
    "start": "1199000",
    "end": "1278000"
  },
  {
    "text": "look at some of the extensions some of the additions that we can build on top of those four",
    "start": "1200240",
    "end": "1206559"
  },
  {
    "text": "communication patterns so grpc interceptors is one of the most commonly used",
    "start": "1206559",
    "end": "1211919"
  },
  {
    "text": "concepts uh which is a way to execute a common business",
    "start": "1211919",
    "end": "1217440"
  },
  {
    "text": "common logic not necessarily a business logic either before or after the execution",
    "start": "1217440",
    "end": "1224240"
  },
  {
    "text": "operative function so usually interceptors are used uh when it comes to implementing",
    "start": "1224240",
    "end": "1229840"
  },
  {
    "text": "things such as authentication login policy enforcement and so on so",
    "start": "1229840",
    "end": "1235280"
  },
  {
    "text": "interceptors can be plugged into your server application uh in your request path or in your",
    "start": "1235280",
    "end": "1242480"
  },
  {
    "text": "response part there are client side and server side interceptors which you can attach with either client",
    "start": "1242480",
    "end": "1249039"
  },
  {
    "text": "or server side and also you can attach interceptors based on the type of the communication",
    "start": "1249039",
    "end": "1254640"
  },
  {
    "text": "so for all the unary or simple rpc you can attach interceptors to different cases uh such as",
    "start": "1254640",
    "end": "1262400"
  },
  {
    "text": "pre-processing uh you know of darkness and post processing similarly similarly for all the streamed messages",
    "start": "1262400",
    "end": "1269440"
  },
  {
    "text": "so any messages that are sent as a stream you can individually apply the",
    "start": "1269440",
    "end": "1276399"
  },
  {
    "start": "1278000",
    "end": "1322000"
  },
  {
    "text": "and you can also use deadlines so deadline is a way of expressing the absolute",
    "start": "1278640",
    "end": "1284320"
  },
  {
    "text": "absolute time uh from the beginning of the request so especially when when a given client",
    "start": "1284320",
    "end": "1290960"
  },
  {
    "text": "application invokes a rpc uh method it defines the deadline",
    "start": "1290960",
    "end": "1297120"
  },
  {
    "text": "uh using this uh so this goal application you can see we specify the deadline and so because",
    "start": "1297120",
    "end": "1304159"
  },
  {
    "text": "the life cycle of uh request can span across multiple services but based on the time it takes to uh receive",
    "start": "1304159",
    "end": "1311520"
  },
  {
    "text": "the response it can close to a irregular state if the particular deadline",
    "start": "1311520",
    "end": "1316960"
  },
  {
    "text": "is meant so it's again a very commonly used concern",
    "start": "1316960",
    "end": "1322400"
  },
  {
    "start": "1322000",
    "end": "1374000"
  },
  {
    "text": "and metadata uh it's a way of exchanging",
    "start": "1322400",
    "end": "1327520"
  },
  {
    "text": "commodity data between server and client applications so this uh the data that you exchange as",
    "start": "1327919",
    "end": "1334960"
  },
  {
    "text": "part of the metadata are not directly related to the business studio so usually if it is related to the business logic it should be part of the",
    "start": "1334960",
    "end": "1342960"
  },
  {
    "text": "remote method itself but things such as security headers uh policy enforcement",
    "start": "1342960",
    "end": "1348080"
  },
  {
    "text": "or it is related to totally uh exposed uh exchange using uh grpc metadata so",
    "start": "1348080",
    "end": "1356559"
  },
  {
    "text": "usually grpc metadata is implemented using grpc headers",
    "start": "1356559",
    "end": "1361760"
  },
  {
    "text": "and structured as key value pairs so from either client or server server side",
    "start": "1361760",
    "end": "1367280"
  },
  {
    "text": "you can receive or send any metadata of your",
    "start": "1367280",
    "end": "1372840"
  },
  {
    "text": "choice although this may not be a very commonly",
    "start": "1372840",
    "end": "1378400"
  },
  {
    "start": "1374000",
    "end": "1411000"
  },
  {
    "text": "used concept in the context of microservices you can host multiple uh services in a single uh vfdc server",
    "start": "1378400",
    "end": "1385360"
  },
  {
    "text": "application so in our very first example you have seen you built this service application and then",
    "start": "1385360",
    "end": "1390799"
  },
  {
    "text": "cache or register that service application on top of a prtc server so you can do the same thing",
    "start": "1390799",
    "end": "1397120"
  },
  {
    "text": "in uh for two services uh two services that should operate",
    "start": "1397120",
    "end": "1402240"
  },
  {
    "text": "uh on top of a single server and share the server runtime so that is the whole concept of using",
    "start": "1402240",
    "end": "1408159"
  },
  {
    "text": "multiplexing [Music] so uh the rtc channel between the client",
    "start": "1408159",
    "end": "1416240"
  },
  {
    "start": "1411000",
    "end": "1467000"
  },
  {
    "text": "and the server application can be terminated or cancelled at any time",
    "start": "1416240",
    "end": "1421840"
  },
  {
    "text": "so anybody can decide uh when it wants to cancel the rpc and when a",
    "start": "1421840",
    "end": "1428559"
  },
  {
    "text": "given party canceled the rpc there should be way to the other party to",
    "start": "1428559",
    "end": "1433919"
  },
  {
    "text": "uh find out whether this given rpg channel is cancelled or not so",
    "start": "1433919",
    "end": "1439520"
  },
  {
    "text": "especially before doing a transactional or or executing a important business logic you should",
    "start": "1439520",
    "end": "1446559"
  },
  {
    "text": "check whether the existing rfcc channel is uh cancelled or not so the whole concept of cancellation is",
    "start": "1446559",
    "end": "1453919"
  },
  {
    "text": "to allow one mechanism uh provide a mechanism to check whether",
    "start": "1453919",
    "end": "1459440"
  },
  {
    "text": "a given rpc channel is active or not so that is the whole concept of cancellation",
    "start": "1459440",
    "end": "1466720"
  },
  {
    "start": "1467000",
    "end": "1545000"
  },
  {
    "text": "and now we can look at some of the extensions of especially when it comes to the",
    "start": "1467120",
    "end": "1473360"
  },
  {
    "text": "service definition so when you are building grp erpc services",
    "start": "1473360",
    "end": "1478799"
  },
  {
    "text": "you get certain service definition capabilities built",
    "start": "1478799",
    "end": "1484080"
  },
  {
    "text": "into the protocol such as declaring the service declaring remote methods and declaring all the",
    "start": "1484080",
    "end": "1489440"
  },
  {
    "text": "types that you would use inside those remote that's actually part of the service definition itself",
    "start": "1489440",
    "end": "1495600"
  },
  {
    "text": "but if you have to extend these service definitions for for example things such as uh",
    "start": "1495600",
    "end": "1502400"
  },
  {
    "text": "declaring your microservices policies such as these are the policies",
    "start": "1502400",
    "end": "1507919"
  },
  {
    "text": "that you reinforce from the service side these are the authentication mechanisms these are the",
    "start": "1507919",
    "end": "1513679"
  },
  {
    "text": "rate limiting and throttling requirements and these are the versioning requirements that we have at the service",
    "start": "1513679",
    "end": "1519840"
  },
  {
    "text": "side so you can uh declare all of them as part of the protocol buffer definition of the",
    "start": "1519840",
    "end": "1526240"
  },
  {
    "text": "service so service definition contents can contain all these different service definitions and",
    "start": "1526240",
    "end": "1534400"
  },
  {
    "text": "and as part of the implementation you get access to all the defined uh options or",
    "start": "1534400",
    "end": "1541039"
  },
  {
    "text": "defined extensions so for example let's look at how you can do grpc versioning as an extension to",
    "start": "1541039",
    "end": "1548159"
  },
  {
    "start": "1545000",
    "end": "1638000"
  },
  {
    "text": "the service definition right so in this case uh so suppose we",
    "start": "1548159",
    "end": "1553440"
  },
  {
    "text": "want to have two versions uh of the same service so we need to have two versions of the order",
    "start": "1553440",
    "end": "1559200"
  },
  {
    "text": "management service the uh the standard way to do that is to have uh two service definitions so",
    "start": "1559200",
    "end": "1567039"
  },
  {
    "text": "one is defined using e-commerce v1 package another one is defined as an e-commerce",
    "start": "1567039",
    "end": "1574960"
  },
  {
    "text": "v2 package so when you have two service definitions with the",
    "start": "1574960",
    "end": "1580000"
  },
  {
    "text": "protocol buffer packaging built into the service definition so when you generate the service uh stub",
    "start": "1580000",
    "end": "1587679"
  },
  {
    "text": "or client stop it takes the packaging into the consideration and all the generated",
    "start": "1587679",
    "end": "1595440"
  },
  {
    "text": "code will specifically bound to a particular version of the server so for example if you generate the code",
    "start": "1595440",
    "end": "1602640"
  },
  {
    "text": "against the one of the one of the service so as part of the internal invocation it",
    "start": "1602640",
    "end": "1609039"
  },
  {
    "text": "actually uses the v1 the version number uh",
    "start": "1609039",
    "end": "1614159"
  },
  {
    "text": "when it comes to the part of the invocation so this is actually transparent to the",
    "start": "1614159",
    "end": "1620400"
  },
  {
    "text": "developers so as the developer you don't really have to worry about the version as long as you depend on",
    "start": "1620400",
    "end": "1626000"
  },
  {
    "text": "that particular photo called docker definition as the version of your client",
    "start": "1626000",
    "end": "1632080"
  },
  {
    "text": "application so so you can further extend",
    "start": "1632080",
    "end": "1637120"
  },
  {
    "text": "service definition to allow other things such as",
    "start": "1637120",
    "end": "1642240"
  },
  {
    "start": "1638000",
    "end": "1679000"
  },
  {
    "text": "so suppose you you want to define a service to provide as part of the service",
    "start": "1642240",
    "end": "1648559"
  },
  {
    "text": "definition then you define an extension to the protocol",
    "start": "1648559",
    "end": "1653840"
  },
  {
    "text": "service option extension in your service definition and you can use it alongside your",
    "start": "1653840",
    "end": "1660159"
  },
  {
    "text": "service definition so this is the order management service definition and you define the remote",
    "start": "1660159",
    "end": "1667039"
  },
  {
    "text": "authentication endpoint or to end point uh in inside your service definition and",
    "start": "1667039",
    "end": "1673440"
  },
  {
    "text": "as part of the service implementation you get access to that because when you have to implement something",
    "start": "1673440",
    "end": "1678880"
  },
  {
    "text": "like this you would implement an insert interceptor so there's an incoming",
    "start": "1678880",
    "end": "1684480"
  },
  {
    "start": "1679000",
    "end": "1718000"
  },
  {
    "text": "request you implement the interceptor and as part of the interceptors code you get access to the",
    "start": "1684480",
    "end": "1690640"
  },
  {
    "text": "uh to the options that you define service definition so in this case it",
    "start": "1690640",
    "end": "1696559"
  },
  {
    "text": "receives a request and you validate that token the incoming token",
    "start": "1696559",
    "end": "1702640"
  },
  {
    "text": "external authentication itself so again you can further extend this uh",
    "start": "1702640",
    "end": "1710159"
  },
  {
    "text": "service definition techniques to build things such as throat clean uh policy enforcement",
    "start": "1710159",
    "end": "1716559"
  },
  {
    "text": "and so on all right so i think uh that covers uh most aspects of services and",
    "start": "1716559",
    "end": "1725520"
  },
  {
    "start": "1718000",
    "end": "1787000"
  },
  {
    "text": "communication patterns that you can build with grpc and this this particular use case is a",
    "start": "1725520",
    "end": "1731679"
  },
  {
    "text": "very common one again we use service definition extensions here but this is a sort of exposing your internal or your",
    "start": "1731679",
    "end": "1739440"
  },
  {
    "text": "existing vrpc service as a rest or open api based uh",
    "start": "1739440",
    "end": "1746159"
  },
  {
    "text": "interface so uh grpc provides a ecosystem project uh known as crpc gateway where",
    "start": "1746159",
    "end": "1753039"
  },
  {
    "text": "you can start with the protocol buffer definition of your service and obviously you can generate your",
    "start": "1753039",
    "end": "1758720"
  },
  {
    "text": "service out of that as well as you can generate a proxy uh which access the breakage between",
    "start": "1758720",
    "end": "1764960"
  },
  {
    "text": "rest to uh west coast open fbi to prpc so any grp service that",
    "start": "1764960",
    "end": "1771520"
  },
  {
    "text": "you have can be exposed and open restful interface so this is a very",
    "start": "1771520",
    "end": "1776960"
  },
  {
    "text": "common case especially when it comes to exposing your internal services to the",
    "start": "1776960",
    "end": "1782000"
  },
  {
    "text": "external world using open api",
    "start": "1782000",
    "end": "1786640"
  },
  {
    "start": "1787000",
    "end": "1839000"
  },
  {
    "text": "so i think uh that covers most aspects of the grpc communication patterns",
    "start": "1787039",
    "end": "1793279"
  },
  {
    "text": "and so all the examples that we used uh inside the session are available in this",
    "start": "1793279",
    "end": "1799200"
  },
  {
    "text": "particular youtube report so you can try them out so they have implemented uh so all the examples are implemented",
    "start": "1799200",
    "end": "1806960"
  },
  {
    "text": "using co and java and uh certain uh things such as extensions are also",
    "start": "1806960",
    "end": "1813360"
  },
  {
    "text": "included in the same proposition so most of the things that we discuss uh here are also",
    "start": "1813360",
    "end": "1819120"
  },
  {
    "text": "available at the foundation of the rtc book as well",
    "start": "1819120",
    "end": "1837840"
  },
  {
    "text": "you",
    "start": "1838720",
    "end": "1840799"
  }
]