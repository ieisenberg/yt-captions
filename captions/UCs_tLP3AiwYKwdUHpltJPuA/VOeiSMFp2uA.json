[
  {
    "text": "all right so I'll be talking about data",
    "start": "4560",
    "end": "6080"
  },
  {
    "text": "analysis Vector functional programming",
    "start": "6080",
    "end": "8160"
  },
  {
    "text": "uh the agenda is very simple we'll start",
    "start": "8160",
    "end": "9800"
  },
  {
    "text": "with a very brief history of vector",
    "start": "9800",
    "end": "11719"
  },
  {
    "text": "programming just to get a bit of context",
    "start": "11719",
    "end": "13799"
  },
  {
    "text": "uh then we'll dive head first into Q uh",
    "start": "13799",
    "end": "16118"
  },
  {
    "text": "get a taste of what that looks like and",
    "start": "16119",
    "end": "18439"
  },
  {
    "text": "uh we'll end with an end to-end example",
    "start": "18439",
    "end": "20400"
  },
  {
    "text": "of data analysis task in Q all right so",
    "start": "20400",
    "end": "24279"
  },
  {
    "text": "perhaps unsurprisingly Vector languages",
    "start": "24279",
    "end": "26119"
  },
  {
    "text": "use vectors as the primary data",
    "start": "26119",
    "end": "28000"
  },
  {
    "text": "structure and Vector operations rather",
    "start": "28000",
    "end": "29880"
  },
  {
    "text": "than than typically using scalers in",
    "start": "29880",
    "end": "32000"
  },
  {
    "text": "scaler operations so this isn't new idea",
    "start": "32000",
    "end": "35200"
  },
  {
    "text": "uh the first language in this space was",
    "start": "35200",
    "end": "36879"
  },
  {
    "text": "APO which had its first implementation",
    "start": "36879",
    "end": "39079"
  },
  {
    "text": "in",
    "start": "39079",
    "end": "39960"
  },
  {
    "text": "1965 so okay maybe this is a new idea",
    "start": "39960",
    "end": "42640"
  },
  {
    "text": "compared to traditional functional",
    "start": "42640",
    "end": "44120"
  },
  {
    "text": "programming if you consider the Lambda",
    "start": "44120",
    "end": "45640"
  },
  {
    "text": "calculus in the 1930s and that's really",
    "start": "45640",
    "end": "48039"
  },
  {
    "text": "just starting to have a Major Impact now",
    "start": "48039",
    "end": "49760"
  },
  {
    "text": "so hopefully Vector programming doesn't",
    "start": "49760",
    "end": "51239"
  },
  {
    "text": "have to wait the 80 or so years that",
    "start": "51239",
    "end": "53120"
  },
  {
    "text": "functional programming had to wait but",
    "start": "53120",
    "end": "54879"
  },
  {
    "text": "we'll see so it all started with Ken",
    "start": "54879",
    "end": "56760"
  },
  {
    "text": "Iverson uh who noticed some inadequacies",
    "start": "56760",
    "end": "59480"
  },
  {
    "text": "in conventional mathematical notation",
    "start": "59480",
    "end": "61920"
  },
  {
    "text": "and algorithmic notation in",
    "start": "61920",
    "end": "63239"
  },
  {
    "text": "communicating algorithms to his",
    "start": "63239",
    "end": "64838"
  },
  {
    "text": "undergraduate students at the time so he",
    "start": "64839",
    "end": "67479"
  },
  {
    "text": "reflected on notation as a tool of",
    "start": "67479",
    "end": "69520"
  },
  {
    "text": "thought for a while um creating this",
    "start": "69520",
    "end": "72280"
  },
  {
    "text": "notation that was just called Iverson's",
    "start": "72280",
    "end": "74240"
  },
  {
    "text": "notation and he's written a number of",
    "start": "74240",
    "end": "76080"
  },
  {
    "text": "papers on this one of his papers is just",
    "start": "76080",
    "end": "77840"
  },
  {
    "text": "titled notation as a tool of thought",
    "start": "77840",
    "end": "79840"
  },
  {
    "text": "this turns out to be his tour touring",
    "start": "79840",
    "end": "81520"
  },
  {
    "text": "award paper so if you're looking for",
    "start": "81520",
    "end": "82840"
  },
  {
    "text": "some reading I highly recommend this",
    "start": "82840",
    "end": "85320"
  },
  {
    "text": "paper uh but it's interesting to note",
    "start": "85320",
    "end": "87759"
  },
  {
    "text": "that this notation was first created to",
    "start": "87759",
    "end": "90759"
  },
  {
    "text": "communicate to humans before it was ever",
    "start": "90759",
    "end": "92840"
  },
  {
    "text": "used to communicate to computers uh this",
    "start": "92840",
    "end": "96040"
  },
  {
    "text": "later became APL when Iverson started",
    "start": "96040",
    "end": "98159"
  },
  {
    "text": "working at IBM with a few other people",
    "start": "98159",
    "end": "100479"
  },
  {
    "text": "like Aiden",
    "start": "100479",
    "end": "102079"
  },
  {
    "text": "fov uh this has had a number of",
    "start": "102079",
    "end": "104520"
  },
  {
    "text": "influences on languages that you've",
    "start": "104520",
    "end": "106000"
  },
  {
    "text": "probably heard of things like",
    "start": "106000",
    "end": "107159"
  },
  {
    "text": "Mathematica mat lab are more recently",
    "start": "107159",
    "end": "110159"
  },
  {
    "text": "Julia and it has a number of direct",
    "start": "110159",
    "end": "112240"
  },
  {
    "text": "descendants that are still being",
    "start": "112240",
    "end": "113960"
  },
  {
    "text": "developed and in use today so there's a",
    "start": "113960",
    "end": "115759"
  },
  {
    "text": "few dialects of APL that are still being",
    "start": "115759",
    "end": "117799"
  },
  {
    "text": "developed uh Iverson's later language J",
    "start": "117799",
    "end": "121039"
  },
  {
    "text": "and then Arthur Whitney has created a",
    "start": "121039",
    "end": "122479"
  },
  {
    "text": "few language like languages like A+ K",
    "start": "122479",
    "end": "125119"
  },
  {
    "text": "and later q which we'll look at",
    "start": "125119",
    "end": "127039"
  },
  {
    "text": "today so that's enough history that's",
    "start": "127039",
    "end": "129000"
  },
  {
    "text": "the history out of the way let's dive",
    "start": "129000",
    "end": "130399"
  },
  {
    "text": "into some Q so we'll start off with",
    "start": "130399",
    "end": "132520"
  },
  {
    "text": "function application that's a good place",
    "start": "132520",
    "end": "133800"
  },
  {
    "text": "to start with a functional language so",
    "start": "133800",
    "end": "136120"
  },
  {
    "text": "there's two sorts of these named",
    "start": "136120",
    "end": "137959"
  },
  {
    "text": "functions uh there's monatic functions",
    "start": "137959",
    "end": "140000"
  },
  {
    "text": "and there's datic functions monatic",
    "start": "140000",
    "end": "141959"
  },
  {
    "text": "functions just have a single argument uh",
    "start": "141959",
    "end": "144640"
  },
  {
    "text": "this has nothing to do with hasal monad",
    "start": "144640",
    "end": "146280"
  },
  {
    "text": "so I apologize if it causes a little bit",
    "start": "146280",
    "end": "147959"
  },
  {
    "text": "of confusion",
    "start": "147959",
    "end": "149959"
  },
  {
    "text": "monatic functions always have a word",
    "start": "149959",
    "end": "151800"
  },
  {
    "text": "name and they take the argument to the",
    "start": "151800",
    "end": "153160"
  },
  {
    "text": "right so for example we can take the",
    "start": "153160",
    "end": "154720"
  },
  {
    "text": "absolute value of negative one or we can",
    "start": "154720",
    "end": "157040"
  },
  {
    "text": "do till 10 to get the first 10 integers",
    "start": "157040",
    "end": "159760"
  },
  {
    "text": "uh till is how we generate vectors so",
    "start": "159760",
    "end": "161440"
  },
  {
    "text": "I'll be using it over and over in the",
    "start": "161440",
    "end": "162879"
  },
  {
    "text": "examples uh to come dietic functions are",
    "start": "162879",
    "end": "166560"
  },
  {
    "text": "just functions that take two arguments",
    "start": "166560",
    "end": "168800"
  },
  {
    "text": "verbs are functions that appear between",
    "start": "168800",
    "end": "170920"
  },
  {
    "text": "their arguments so diic verbs are things",
    "start": "170920",
    "end": "174280"
  },
  {
    "text": "like this that we're familiar with",
    "start": "174280",
    "end": "175800"
  },
  {
    "text": "addition 1 plus 2 is three but they",
    "start": "175800",
    "end": "178159"
  },
  {
    "text": "don't have to have a symbol they can",
    "start": "178159",
    "end": "179400"
  },
  {
    "text": "also have a word name uh 9 mod 3 is zero",
    "start": "179400",
    "end": "182800"
  },
  {
    "text": "that's just the modulo operation it",
    "start": "182800",
    "end": "184959"
  },
  {
    "text": "turns out in Q we also get function",
    "start": "184959",
    "end": "186680"
  },
  {
    "text": "application as a verb which turns out to",
    "start": "186680",
    "end": "188760"
  },
  {
    "text": "be really handy there's two forms of",
    "start": "188760",
    "end": "190159"
  },
  {
    "text": "function application there's monatic",
    "start": "190159",
    "end": "191840"
  },
  {
    "text": "function application represented by the",
    "start": "191840",
    "end": "193599"
  },
  {
    "text": "at symbol so here we're applying the",
    "start": "193599",
    "end": "195640"
  },
  {
    "text": "monatic function absolute value at the",
    "start": "195640",
    "end": "198400"
  },
  {
    "text": "argument negative 1 giving us the result",
    "start": "198400",
    "end": "201159"
  },
  {
    "text": "of one and datic function application is",
    "start": "201159",
    "end": "203840"
  },
  {
    "text": "represented by dot so here we're giving",
    "start": "203840",
    "end": "205920"
  },
  {
    "text": "it a diotic function minus and the two",
    "start": "205920",
    "end": "208360"
  },
  {
    "text": "arguments giving us one minus",
    "start": "208360",
    "end": "211200"
  },
  {
    "text": "2 primitive functions in Q are what are",
    "start": "211200",
    "end": "213959"
  },
  {
    "text": "called Atomic meaning that they apply to",
    "start": "213959",
    "end": "216280"
  },
  {
    "text": "atoms um and this is really where Vector",
    "start": "216280",
    "end": "218439"
  },
  {
    "text": "languages start to get their expressive",
    "start": "218439",
    "end": "220360"
  },
  {
    "text": "power uh so for example instead of",
    "start": "220360",
    "end": "223040"
  },
  {
    "text": "having to map a multiplication over a",
    "start": "223040",
    "end": "225280"
  },
  {
    "text": "list we can just directly multiply a",
    "start": "225280",
    "end": "227439"
  },
  {
    "text": "scalar to a vector and get exactly the",
    "start": "227439",
    "end": "229400"
  },
  {
    "text": "result that we would",
    "start": "229400",
    "end": "231360"
  },
  {
    "text": "expect um you can see where this gets to",
    "start": "231360",
    "end": "233519"
  },
  {
    "text": "be powerful in for example this last",
    "start": "233519",
    "end": "235760"
  },
  {
    "text": "example here I have this deeply nested",
    "start": "235760",
    "end": "237920"
  },
  {
    "text": "array structure uh",
    "start": "237920",
    "end": "240239"
  },
  {
    "text": "it could be a tree or hopefully has some",
    "start": "240239",
    "end": "242000"
  },
  {
    "text": "meaning in whatever domain you're in but",
    "start": "242000",
    "end": "243680"
  },
  {
    "text": "I'm taking that nested structure and",
    "start": "243680",
    "end": "245239"
  },
  {
    "text": "just multiplying that whole structure by",
    "start": "245239",
    "end": "247079"
  },
  {
    "text": "five and I'm not having to write some",
    "start": "247079",
    "end": "248799"
  },
  {
    "text": "recursive computation to descend through",
    "start": "248799",
    "end": "250640"
  },
  {
    "text": "that thing and multiply all of the atoms",
    "start": "250640",
    "end": "252319"
  },
  {
    "text": "it's just done for me you might notice",
    "start": "252319",
    "end": "255280"
  },
  {
    "text": "in these examples that uh the result",
    "start": "255280",
    "end": "258120"
  },
  {
    "text": "might not be what you would expect for",
    "start": "258120",
    "end": "259680"
  },
  {
    "text": "example in this second thing",
    "start": "259680",
    "end": "262280"
  },
  {
    "text": "um why that is is because in Q",
    "start": "262280",
    "end": "264759"
  },
  {
    "text": "evaluation is always right to left so in",
    "start": "264759",
    "end": "267400"
  },
  {
    "text": "that second example we're generating the",
    "start": "267400",
    "end": "269080"
  },
  {
    "text": "vector till five then we're adding 10 to",
    "start": "269080",
    "end": "271520"
  },
  {
    "text": "it and we're multiplying that by five",
    "start": "271520",
    "end": "274120"
  },
  {
    "text": "this is a bit strange to get used to but",
    "start": "274120",
    "end": "275560"
  },
  {
    "text": "it turns out to be a huge productivity",
    "start": "275560",
    "end": "277759"
  },
  {
    "text": "wi it means we never have to look at",
    "start": "277759",
    "end": "279280"
  },
  {
    "text": "infix rules for code that we're not",
    "start": "279280",
    "end": "280800"
  },
  {
    "text": "familiar with or code that we've not",
    "start": "280800",
    "end": "282039"
  },
  {
    "text": "seen before and we never have to look at",
    "start": "282039",
    "end": "284639"
  },
  {
    "text": "Q's operator precedence because there",
    "start": "284639",
    "end": "286680"
  },
  {
    "text": "just isn't any you always just evaluate",
    "start": "286680",
    "end": "288800"
  },
  {
    "text": "right to left even though it's evaluated",
    "start": "288800",
    "end": "291039"
  },
  {
    "text": "right to left it's typically red left to",
    "start": "291039",
    "end": "293080"
  },
  {
    "text": "right in a top down sort of fashion that",
    "start": "293080",
    "end": "295360"
  },
  {
    "text": "tends to be a good uh hint when you're",
    "start": "295360",
    "end": "298080"
  },
  {
    "text": "writing Q because if you can't read read",
    "start": "298080",
    "end": "299880"
  },
  {
    "text": "your line left to right you're probably",
    "start": "299880",
    "end": "301520"
  },
  {
    "text": "trying to put your entire program into",
    "start": "301520",
    "end": "303360"
  },
  {
    "text": "one",
    "start": "303360",
    "end": "304440"
  },
  {
    "text": "line so it turns out when you're working",
    "start": "304440",
    "end": "306520"
  },
  {
    "text": "with list list Primitives are extremely",
    "start": "306520",
    "end": "308680"
  },
  {
    "text": "important so we can do the usual sorts",
    "start": "308680",
    "end": "310479"
  },
  {
    "text": "of things we just do them in fewer",
    "start": "310479",
    "end": "312160"
  },
  {
    "text": "characters so we can take from the head",
    "start": "312160",
    "end": "314160"
  },
  {
    "text": "of a list we can take from the tail of a",
    "start": "314160",
    "end": "316039"
  },
  {
    "text": "list we can join two lists together with",
    "start": "316039",
    "end": "318319"
  },
  {
    "text": "comma and we can split a list based on",
    "start": "318319",
    "end": "320520"
  },
  {
    "text": "some indices so here I'm splitting the",
    "start": "320520",
    "end": "322319"
  },
  {
    "text": "list till nine on the indices 0 3 and",
    "start": "322319",
    "end": "324720"
  },
  {
    "text": "six giving me a lovely little 3x3",
    "start": "324720",
    "end": "328400"
  },
  {
    "text": "Matrix so mapping list this is something",
    "start": "328400",
    "end": "330840"
  },
  {
    "text": "we do in functional programming all the",
    "start": "330840",
    "end": "332360"
  },
  {
    "text": "time um in Q we can do it as well so we",
    "start": "332360",
    "end": "336240"
  },
  {
    "text": "have our 3x3 Matrix here we want to get",
    "start": "336240",
    "end": "338199"
  },
  {
    "text": "the number of elements in each row of",
    "start": "338199",
    "end": "340000"
  },
  {
    "text": "this Matrix there's a function count",
    "start": "340000",
    "end": "341919"
  },
  {
    "text": "that gives the length of a vector and if",
    "start": "341919",
    "end": "344240"
  },
  {
    "text": "we do count each 3x3 Matrix it counts",
    "start": "344240",
    "end": "346919"
  },
  {
    "text": "each of the rows giving us a vector of",
    "start": "346919",
    "end": "349000"
  },
  {
    "text": "the",
    "start": "349000",
    "end": "349960"
  },
  {
    "text": "lengths but it turns out in Q we can",
    "start": "349960",
    "end": "352319"
  },
  {
    "text": "also map diadic verbs and this turns out",
    "start": "352319",
    "end": "354880"
  },
  {
    "text": "to be hugely powerful this is something",
    "start": "354880",
    "end": "356479"
  },
  {
    "text": "I've had to do in just about every",
    "start": "356479",
    "end": "357960"
  },
  {
    "text": "functional language I've used what I",
    "start": "357960",
    "end": "359840"
  },
  {
    "text": "typically have to do is I'll have two",
    "start": "359840",
    "end": "361560"
  },
  {
    "text": "lists I'll have to zip those lists",
    "start": "361560",
    "end": "363440"
  },
  {
    "text": "together into a list of pairs then I'll",
    "start": "363440",
    "end": "365360"
  },
  {
    "text": "have to map some Lambda over that list",
    "start": "365360",
    "end": "366919"
  },
  {
    "text": "of pairs that uh apply some diic verb to",
    "start": "366919",
    "end": "370160"
  },
  {
    "text": "each or diic function to each element of",
    "start": "370160",
    "end": "372840"
  },
  {
    "text": "that pair in Q we can do that entire",
    "start": "372840",
    "end": "375919"
  },
  {
    "text": "line of reasoning with a single",
    "start": "375919",
    "end": "377319"
  },
  {
    "text": "character that character is tick and we",
    "start": "377319",
    "end": "379440"
  },
  {
    "text": "call it each both uh and this is the",
    "start": "379440",
    "end": "381680"
  },
  {
    "text": "first adverb that we've seen what an",
    "start": "381680",
    "end": "383919"
  },
  {
    "text": "adverb is is it takes a verb a dietic",
    "start": "383919",
    "end": "386520"
  },
  {
    "text": "verb and modifies that verb's behavior",
    "start": "386520",
    "end": "389240"
  },
  {
    "text": "so for example we have the take uh verb",
    "start": "389240",
    "end": "392080"
  },
  {
    "text": "three take Z repeats zero three times if",
    "start": "392080",
    "end": "395280"
  },
  {
    "text": "instead of uh having a scaler on either",
    "start": "395280",
    "end": "397800"
  },
  {
    "text": "side of take we can apply a list or",
    "start": "397800",
    "end": "400440"
  },
  {
    "text": "vector on either side of take and modify",
    "start": "400440",
    "end": "402800"
  },
  {
    "text": "the take with this each both and what",
    "start": "402800",
    "end": "405160"
  },
  {
    "text": "that does is it essentially uh Zips",
    "start": "405160",
    "end": "407120"
  },
  {
    "text": "those two lists together and applies",
    "start": "407120",
    "end": "408479"
  },
  {
    "text": "take to each of the pairs we're just",
    "start": "408479",
    "end": "410199"
  },
  {
    "text": "implementing that with one character",
    "start": "410199",
    "end": "412240"
  },
  {
    "text": "giving us that 3x3",
    "start": "412240",
    "end": "414360"
  },
  {
    "text": "Matrix so the general form of of an",
    "start": "414360",
    "end": "416800"
  },
  {
    "text": "adverb uh it always just follows a verb",
    "start": "416800",
    "end": "419319"
  },
  {
    "text": "and has both of that verb's arguments to",
    "start": "419319",
    "end": "421879"
  },
  {
    "text": "the left and right so in the example",
    "start": "421879",
    "end": "423960"
  },
  {
    "text": "that we just saw we have a noun argument",
    "start": "423960",
    "end": "426280"
  },
  {
    "text": "on the left a noun argument on the right",
    "start": "426280",
    "end": "429919"
  },
  {
    "text": "uh the verb that we're modifying here",
    "start": "429919",
    "end": "431960"
  },
  {
    "text": "that's take and the adverb that's doing",
    "start": "431960",
    "end": "434240"
  },
  {
    "text": "the modification which is each",
    "start": "434240",
    "end": "436520"
  },
  {
    "text": "both so here's a few more adverbs that",
    "start": "436520",
    "end": "439160"
  },
  {
    "text": "you're probably familiar with fold and",
    "start": "439160",
    "end": "440759"
  },
  {
    "text": "scan this is some more FP 101 type stuff",
    "start": "440759",
    "end": "443919"
  },
  {
    "text": "uh fold uh you might call it reduce we",
    "start": "443919",
    "end": "446680"
  },
  {
    "text": "call it over we represent it by a",
    "start": "446680",
    "end": "448599"
  },
  {
    "text": "forward slash and it just does a",
    "start": "448599",
    "end": "450520"
  },
  {
    "text": "reduction of a verb over a list so for",
    "start": "450520",
    "end": "453039"
  },
  {
    "text": "example if we do plus over till five it",
    "start": "453039",
    "end": "455840"
  },
  {
    "text": "sums up the numbers um zero one two",
    "start": "455840",
    "end": "458560"
  },
  {
    "text": "three and",
    "start": "458560",
    "end": "459520"
  },
  {
    "text": "four scan is sort of the counterpart to",
    "start": "459520",
    "end": "463039"
  },
  {
    "text": "uh over uh what that does is it Returns",
    "start": "463039",
    "end": "465560"
  },
  {
    "text": "the iterative values leading up to the",
    "start": "465560",
    "end": "467120"
  },
  {
    "text": "final value of the over so if we do plus",
    "start": "467120",
    "end": "469360"
  },
  {
    "text": "scan till five it gives us all of the",
    "start": "469360",
    "end": "471720"
  },
  {
    "text": "partial sums leading up to the final sum",
    "start": "471720",
    "end": "474120"
  },
  {
    "text": "10 and that zero on the left of both of",
    "start": "474120",
    "end": "477240"
  },
  {
    "text": "those is just the initial value",
    "start": "477240",
    "end": "480400"
  },
  {
    "text": "so it turns out uh there's only six of",
    "start": "480400",
    "end": "482240"
  },
  {
    "text": "these adverbs but they come up all the",
    "start": "482240",
    "end": "483919"
  },
  {
    "text": "time when we're working with lists we've",
    "start": "483919",
    "end": "485919"
  },
  {
    "text": "already seen half of them we've seen",
    "start": "485919",
    "end": "487240"
  },
  {
    "text": "each both we've seen fold and we've seen",
    "start": "487240",
    "end": "489800"
  },
  {
    "text": "we've seen scan there's also each right",
    "start": "489800",
    "end": "493039"
  },
  {
    "text": "what that does is it pairs the argument",
    "start": "493039",
    "end": "494879"
  },
  {
    "text": "on the left with each element in the",
    "start": "494879",
    "end": "496879"
  },
  {
    "text": "list on the right so here I'm using a",
    "start": "496879",
    "end": "500199"
  },
  {
    "text": "monatic function application to pair",
    "start": "500199",
    "end": "502520"
  },
  {
    "text": "this Max function with each row of this",
    "start": "502520",
    "end": "504400"
  },
  {
    "text": "3x3 Matrix getting the max of each row",
    "start": "504400",
    "end": "507759"
  },
  {
    "text": "each left similarly pairs each thing in",
    "start": "507759",
    "end": "510039"
  },
  {
    "text": "the list on the left with the thing on",
    "start": "510039",
    "end": "512240"
  },
  {
    "text": "the right so here again I'm using",
    "start": "512240",
    "end": "513880"
  },
  {
    "text": "monatic function application to apply",
    "start": "513880",
    "end": "515919"
  },
  {
    "text": "both of the functions on the left to the",
    "start": "515919",
    "end": "518399"
  },
  {
    "text": "scaler on the",
    "start": "518399",
    "end": "519880"
  },
  {
    "text": "right each prior is an extremely handy",
    "start": "519880",
    "end": "522440"
  },
  {
    "text": "adverb what it does is it pairs each",
    "start": "522440",
    "end": "524560"
  },
  {
    "text": "element in a list with the element",
    "start": "524560",
    "end": "526399"
  },
  {
    "text": "immediately before it so for example if",
    "start": "526399",
    "end": "528600"
  },
  {
    "text": "we do minus each prior it gives us the",
    "start": "528600",
    "end": "530519"
  },
  {
    "text": "difference between consecutive elements",
    "start": "530519",
    "end": "532120"
  },
  {
    "text": "in a list which is a really handy thing",
    "start": "532120",
    "end": "534800"
  },
  {
    "text": "to be able to do especially in a data",
    "start": "534800",
    "end": "536360"
  },
  {
    "text": "analysis task and we can Implement that",
    "start": "536360",
    "end": "538519"
  },
  {
    "text": "in just three characters",
    "start": "538519",
    "end": "541240"
  },
  {
    "text": "whenever we apply an adverb to a verb we",
    "start": "541240",
    "end": "543279"
  },
  {
    "text": "get what's called a derived verb back",
    "start": "543279",
    "end": "545160"
  },
  {
    "text": "out of that meaning we can keep just",
    "start": "545160",
    "end": "547200"
  },
  {
    "text": "sticking adverbs onto the end of it to",
    "start": "547200",
    "end": "549240"
  },
  {
    "text": "change keep changing its Behavior so one",
    "start": "549240",
    "end": "552040"
  },
  {
    "text": "common uh composition of adverbs is to",
    "start": "552040",
    "end": "555760"
  },
  {
    "text": "take each left and each right and stick",
    "start": "555760",
    "end": "557240"
  },
  {
    "text": "them together into each left each right",
    "start": "557240",
    "end": "559760"
  },
  {
    "text": "so here I'm applying both of the",
    "start": "559760",
    "end": "561920"
  },
  {
    "text": "functions on the left Min and Max to all",
    "start": "561920",
    "end": "564760"
  },
  {
    "text": "of the rows in The Matrix on the right",
    "start": "564760",
    "end": "566640"
  },
  {
    "text": "so I have apply each left each right and",
    "start": "566640",
    "end": "569519"
  },
  {
    "text": "it joins everything together and gives",
    "start": "569519",
    "end": "571000"
  },
  {
    "text": "me the Min and the max of each row in",
    "start": "571000",
    "end": "572680"
  },
  {
    "text": "that 3x3",
    "start": "572680",
    "end": "574839"
  },
  {
    "text": "Matrix so that's a bit of a taste of Q",
    "start": "574839",
    "end": "577720"
  },
  {
    "text": "uh those are all of the six adverbs",
    "start": "577720",
    "end": "579240"
  },
  {
    "text": "available in Q and we can use those to",
    "start": "579240",
    "end": "581640"
  },
  {
    "text": "uh create expressive algorithms I want",
    "start": "581640",
    "end": "584200"
  },
  {
    "text": "to show two examples one example is",
    "start": "584200",
    "end": "586120"
  },
  {
    "text": "prime number generation it's sort of a",
    "start": "586120",
    "end": "588320"
  },
  {
    "text": "classic example to show when showing",
    "start": "588320",
    "end": "589800"
  },
  {
    "text": "Vector programming the other example is",
    "start": "589800",
    "end": "591920"
  },
  {
    "text": "runlength encoding uh slightly more",
    "start": "591920",
    "end": "594519"
  },
  {
    "text": "practical but before I dive into that I",
    "start": "594519",
    "end": "597200"
  },
  {
    "text": "first want to show the algorithm we're",
    "start": "597200",
    "end": "598640"
  },
  {
    "text": "going to uh right for prime number",
    "start": "598640",
    "end": "600800"
  },
  {
    "text": "generation because it's a bit different",
    "start": "600800",
    "end": "602279"
  },
  {
    "text": "from an imperative or a functional",
    "start": "602279",
    "end": "604120"
  },
  {
    "text": "algorithm it's important to understand",
    "start": "604120",
    "end": "606480"
  },
  {
    "text": "how a vector programmer thinks so the",
    "start": "606480",
    "end": "609160"
  },
  {
    "text": "first thing we're going to do is forget",
    "start": "609160",
    "end": "610480"
  },
  {
    "text": "that Loops ever existed the second thing",
    "start": "610480",
    "end": "613079"
  },
  {
    "text": "we're going to do is create something",
    "start": "613079",
    "end": "614440"
  },
  {
    "text": "rectangular so here I have a modulo",
    "start": "614440",
    "end": "617399"
  },
  {
    "text": "table uh I have the numbers 1 to 100 on",
    "start": "617399",
    "end": "620440"
  },
  {
    "text": "the on the x axis and 1 to 100 on the y",
    "start": "620440",
    "end": "623000"
  },
  {
    "text": "axis and each cell of this table is the",
    "start": "623000",
    "end": "625440"
  },
  {
    "text": "xod Y and it's shaded darker uh for the",
    "start": "625440",
    "end": "628880"
  },
  {
    "text": "larger",
    "start": "628880",
    "end": "630519"
  },
  {
    "text": "modulus these are the positions in the",
    "start": "630519",
    "end": "632880"
  },
  {
    "text": "table where the modulus is zero exactly",
    "start": "632880",
    "end": "635160"
  },
  {
    "text": "where X is divisible by",
    "start": "635160",
    "end": "637240"
  },
  {
    "text": "y we're interested in prime numbers",
    "start": "637240",
    "end": "640240"
  },
  {
    "text": "which have exactly two divisible numbers",
    "start": "640240",
    "end": "642880"
  },
  {
    "text": "they're divisible by one in themselves",
    "start": "642880",
    "end": "645040"
  },
  {
    "text": "so we're looking for uh columns in this",
    "start": "645040",
    "end": "648880"
  },
  {
    "text": "structure that only intersect blue",
    "start": "648880",
    "end": "651760"
  },
  {
    "text": "blockes along the Y equals one line and",
    "start": "651760",
    "end": "654480"
  },
  {
    "text": "the yals X line the itself line if we",
    "start": "654480",
    "end": "657480"
  },
  {
    "text": "find all of the columns where they only",
    "start": "657480",
    "end": "659000"
  },
  {
    "text": "inter these boxes along these two lines",
    "start": "659000",
    "end": "661200"
  },
  {
    "text": "we get these columns and of course we",
    "start": "661200",
    "end": "663639"
  },
  {
    "text": "can do this for any integer giving us",
    "start": "663639",
    "end": "665639"
  },
  {
    "text": "the prime numbers less than that integer",
    "start": "665639",
    "end": "667959"
  },
  {
    "text": "those columns correspond exactly to the",
    "start": "667959",
    "end": "670480"
  },
  {
    "text": "primes so if I flip over to Q here we",
    "start": "670480",
    "end": "674560"
  },
  {
    "text": "have the Q interpreter up so one thing I",
    "start": "674560",
    "end": "678160"
  },
  {
    "text": "can do is do one plus till 10 gives me",
    "start": "678160",
    "end": "681639"
  },
  {
    "text": "the numbers 1 to 10 I can store that in",
    "start": "681639",
    "end": "684680"
  },
  {
    "text": "a variable called n to refer to it later",
    "start": "684680",
    "end": "686720"
  },
  {
    "text": "on I'll just keep everything in the same",
    "start": "686720",
    "end": "688519"
  },
  {
    "text": "line here",
    "start": "688519",
    "end": "690440"
  },
  {
    "text": "what I can do is take the modulus of",
    "start": "690440",
    "end": "693040"
  },
  {
    "text": "each left with each right using n on",
    "start": "693040",
    "end": "695000"
  },
  {
    "text": "either side to get the modulo of every",
    "start": "695000",
    "end": "697519"
  },
  {
    "text": "number with every other number giving me",
    "start": "697519",
    "end": "699639"
  },
  {
    "text": "that modulo",
    "start": "699639",
    "end": "701320"
  },
  {
    "text": "table I'm interested in the blue shaded",
    "start": "701320",
    "end": "704000"
  },
  {
    "text": "positions the positions where this table",
    "start": "704000",
    "end": "705959"
  },
  {
    "text": "is equal to zero so we can use equals",
    "start": "705959",
    "end": "708320"
  },
  {
    "text": "which again is an atomic operation so",
    "start": "708320",
    "end": "710120"
  },
  {
    "text": "it'll aine the equality uh in the atoms",
    "start": "710120",
    "end": "713480"
  },
  {
    "text": "of this structure so that gives me a",
    "start": "713480",
    "end": "716079"
  },
  {
    "text": "Boolean Matrix back true exactly where",
    "start": "716079",
    "end": "718079"
  },
  {
    "text": "that modulo is zero false otherwise zero",
    "start": "718079",
    "end": "720760"
  },
  {
    "text": "is false one is true if we do a plus",
    "start": "720760",
    "end": "724000"
  },
  {
    "text": "reduction over this Matrix it will sum",
    "start": "724000",
    "end": "726240"
  },
  {
    "text": "each of the columns in this Matrix",
    "start": "726240",
    "end": "728839"
  },
  {
    "text": "giving me for each column how many True",
    "start": "728839",
    "end": "730720"
  },
  {
    "text": "Values there are how many shaded boxes",
    "start": "730720",
    "end": "733399"
  },
  {
    "text": "uh Q is a convenient language so instead",
    "start": "733399",
    "end": "735160"
  },
  {
    "text": "of doing that we could just do the",
    "start": "735160",
    "end": "737360"
  },
  {
    "text": "sum and we're interested in prime",
    "start": "737360",
    "end": "739480"
  },
  {
    "text": "numbers which have exactly two shaded",
    "start": "739480",
    "end": "742279"
  },
  {
    "text": "boxes so if we find all of the positions",
    "start": "742279",
    "end": "745120"
  },
  {
    "text": "where the sum is two we can ask where",
    "start": "745120",
    "end": "747560"
  },
  {
    "text": "that's true to get their indices and",
    "start": "747560",
    "end": "749519"
  },
  {
    "text": "index back into our original list at",
    "start": "749519",
    "end": "751440"
  },
  {
    "text": "those positions and that gives us",
    "start": "751440",
    "end": "752959"
  },
  {
    "text": "exactly the prime numbers less than",
    "start": "752959",
    "end": "755959"
  },
  {
    "text": "10 if I change that 10 to an X which is",
    "start": "755959",
    "end": "759240"
  },
  {
    "text": "how we refer to the first implicit",
    "start": "759240",
    "end": "761279"
  },
  {
    "text": "argument to a function wrap it in curly",
    "start": "761279",
    "end": "764240"
  },
  {
    "text": "braces which is how we say Lambda assign",
    "start": "764240",
    "end": "767160"
  },
  {
    "text": "it to an identifier called P we assign",
    "start": "767160",
    "end": "770040"
  },
  {
    "text": "with colon we now have a function that",
    "start": "770040",
    "end": "772760"
  },
  {
    "text": "we can get the prime numbers less than",
    "start": "772760",
    "end": "774279"
  },
  {
    "text": "some",
    "start": "774279",
    "end": "776079"
  },
  {
    "text": "integer so the other example I wanted to",
    "start": "776079",
    "end": "778320"
  },
  {
    "text": "show is run",
    "start": "778320",
    "end": "779959"
  },
  {
    "text": "encoding uh so if you're not familiar",
    "start": "779959",
    "end": "782120"
  },
  {
    "text": "with it what we want to do is take some",
    "start": "782120",
    "end": "784040"
  },
  {
    "text": "string like this Lambda gam and we want",
    "start": "784040",
    "end": "786440"
  },
  {
    "text": "to encode each run of consecutive",
    "start": "786440",
    "end": "788959"
  },
  {
    "text": "identical characters as a pair of how",
    "start": "788959",
    "end": "791880"
  },
  {
    "text": "many times that character is being",
    "start": "791880",
    "end": "793199"
  },
  {
    "text": "repeated and the character that's being",
    "start": "793199",
    "end": "795079"
  },
  {
    "text": "repeated so what we want is a function",
    "start": "795079",
    "end": "797920"
  },
  {
    "text": "rle that takes this string and produces",
    "start": "797920",
    "end": "801040"
  },
  {
    "text": "that list of pairs Three L's followed by",
    "start": "801040",
    "end": "802839"
  },
  {
    "text": "three a followed by four",
    "start": "802839",
    "end": "805560"
  },
  {
    "text": "M's so we can start if we we use",
    "start": "805560",
    "end": "810000"
  },
  {
    "text": "equality we can find all of the",
    "start": "810000",
    "end": "812079"
  },
  {
    "text": "positions where the character is equal",
    "start": "812079",
    "end": "813600"
  },
  {
    "text": "to",
    "start": "813600",
    "end": "815360"
  },
  {
    "text": "l with equality what we can do is modify",
    "start": "815360",
    "end": "818279"
  },
  {
    "text": "it with this each prior adverb to see in",
    "start": "818279",
    "end": "821360"
  },
  {
    "text": "this list for each character whether",
    "start": "821360",
    "end": "823040"
  },
  {
    "text": "it's equal to the character immediately",
    "start": "823040",
    "end": "824800"
  },
  {
    "text": "before it that gives us a Boolean Matrix",
    "start": "824800",
    "end": "827320"
  },
  {
    "text": "if we invert or sorry a Boolean list if",
    "start": "827320",
    "end": "829160"
  },
  {
    "text": "we invert this list we get the positions",
    "start": "829160",
    "end": "831720"
  },
  {
    "text": "or sorry we get for each element whether",
    "start": "831720",
    "end": "833639"
  },
  {
    "text": "it's different than the element before",
    "start": "833639",
    "end": "835440"
  },
  {
    "text": "it we can ask where this is true and",
    "start": "835440",
    "end": "838120"
  },
  {
    "text": "that'll make a bit more sense sense if I",
    "start": "838120",
    "end": "841120"
  },
  {
    "text": "split the original list based on these",
    "start": "841120",
    "end": "843920"
  },
  {
    "text": "indices so here we have exactly that",
    "start": "843920",
    "end": "846440"
  },
  {
    "text": "list of",
    "start": "846440",
    "end": "847880"
  },
  {
    "text": "runs so for each run there's two things",
    "start": "847880",
    "end": "850399"
  },
  {
    "text": "we want to get there's the number of",
    "start": "850399",
    "end": "852440"
  },
  {
    "text": "times the character is being repeated",
    "start": "852440",
    "end": "854079"
  },
  {
    "text": "and the character that's being repeated",
    "start": "854079",
    "end": "856560"
  },
  {
    "text": "so there's two functions I want to apply",
    "start": "856560",
    "end": "858519"
  },
  {
    "text": "count is the function that takes a",
    "start": "858519",
    "end": "859800"
  },
  {
    "text": "vector and gives you the length of the",
    "start": "859800",
    "end": "861199"
  },
  {
    "text": "vector and we can get the character",
    "start": "861199",
    "end": "862920"
  },
  {
    "text": "that's being repeated just by sampling",
    "start": "862920",
    "end": "864519"
  },
  {
    "text": "that first",
    "start": "864519",
    "end": "865759"
  },
  {
    "text": "character so now I'm in the situation",
    "start": "865759",
    "end": "868000"
  },
  {
    "text": "where I have two monatic functions on",
    "start": "868000",
    "end": "870240"
  },
  {
    "text": "the left that I want to apply to each of",
    "start": "870240",
    "end": "873399"
  },
  {
    "text": "these runs that I have on the right well",
    "start": "873399",
    "end": "875399"
  },
  {
    "text": "we know how to do that we use monatic",
    "start": "875399",
    "end": "876959"
  },
  {
    "text": "function application we're going to",
    "start": "876959",
    "end": "879000"
  },
  {
    "text": "apply it to all of the functions on the",
    "start": "879000",
    "end": "880759"
  },
  {
    "text": "left with all of the arguments on the",
    "start": "880759",
    "end": "883120"
  },
  {
    "text": "right if I do that I get my run length",
    "start": "883120",
    "end": "885279"
  },
  {
    "text": "encoded list so I can do the same",
    "start": "885279",
    "end": "888279"
  },
  {
    "text": "thing and convert the explicit value L",
    "start": "888279",
    "end": "891920"
  },
  {
    "text": "to the implicit argument X assign it to",
    "start": "891920",
    "end": "894519"
  },
  {
    "text": "an identifier called rle and now I have",
    "start": "894519",
    "end": "897240"
  },
  {
    "text": "my run length encoding function",
    "start": "897240",
    "end": "900480"
  },
  {
    "text": "so I'll flip back over to the slides",
    "start": "900480",
    "end": "902399"
  },
  {
    "text": "here so this is what we ended up with we",
    "start": "902399",
    "end": "904839"
  },
  {
    "text": "have prime number generation on the",
    "start": "904839",
    "end": "906120"
  },
  {
    "text": "first line run length and coding on the",
    "start": "906120",
    "end": "907600"
  },
  {
    "text": "second line and I've also included the",
    "start": "907600",
    "end": "909199"
  },
  {
    "text": "expand function which is the inverse of",
    "start": "909199",
    "end": "911040"
  },
  {
    "text": "the Run length and coding just takes a",
    "start": "911040",
    "end": "912399"
  },
  {
    "text": "run length and coded list and creates",
    "start": "912399",
    "end": "914399"
  },
  {
    "text": "the original list or string back out",
    "start": "914399",
    "end": "917680"
  },
  {
    "text": "this is extremely concise it's only 111",
    "start": "917680",
    "end": "919800"
  },
  {
    "text": "bytes for this whole thing uh which is",
    "start": "919800",
    "end": "921720"
  },
  {
    "text": "really quite nice Arthur Whitney is the",
    "start": "921720",
    "end": "924240"
  },
  {
    "text": "person I mentioned who uh wrote this",
    "start": "924240",
    "end": "926160"
  },
  {
    "text": "language and he said something to the",
    "start": "926160",
    "end": "928079"
  },
  {
    "text": "effect that only programs have any hope",
    "start": "928079",
    "end": "930519"
  },
  {
    "text": "of being correct and you know he really",
    "start": "930519",
    "end": "932959"
  },
  {
    "text": "believes that if you look at any of the",
    "start": "932959",
    "end": "934440"
  },
  {
    "text": "programs he's written uh that's quite a",
    "start": "934440",
    "end": "937000"
  },
  {
    "text": "nice quote I think there's a lot of",
    "start": "937000",
    "end": "938120"
  },
  {
    "text": "value there and it's a quite a short",
    "start": "938120",
    "end": "940279"
  },
  {
    "text": "quote uh in its own value and it's kind",
    "start": "940279",
    "end": "943680"
  },
  {
    "text": "of nice to note that our whole runlength",
    "start": "943680",
    "end": "945279"
  },
  {
    "text": "en coding program is even",
    "start": "945279",
    "end": "947680"
  },
  {
    "text": "shorter Okay so we've got a taste of Q",
    "start": "947680",
    "end": "949920"
  },
  {
    "text": "how can we use this for data analysis",
    "start": "949920",
    "end": "951680"
  },
  {
    "text": "should we use it for data analysis uh",
    "start": "951680",
    "end": "954160"
  },
  {
    "text": "well Q is a very practical language it",
    "start": "954160",
    "end": "956040"
  },
  {
    "text": "it's not sort of this academic exercise",
    "start": "956040",
    "end": "958079"
  },
  {
    "text": "of oh what happens if we restrict",
    "start": "958079",
    "end": "959639"
  },
  {
    "text": "ourselves to only ever using vectors Q",
    "start": "959639",
    "end": "962199"
  },
  {
    "text": "has other sorts of data structures that",
    "start": "962199",
    "end": "964399"
  },
  {
    "text": "come in handy like dictionaries tables",
    "start": "964399",
    "end": "966199"
  },
  {
    "text": "key tables this sort of thing uh tables",
    "start": "966199",
    "end": "968880"
  },
  {
    "text": "are first class and they're column",
    "start": "968880",
    "end": "970519"
  },
  {
    "text": "tables so operations on columns are very",
    "start": "970519",
    "end": "972839"
  },
  {
    "text": "fast and efficient and helps with",
    "start": "972839",
    "end": "974079"
  },
  {
    "text": "scaling and that sort of thing uh it",
    "start": "974079",
    "end": "976480"
  },
  {
    "text": "turns out that Q is actually the",
    "start": "976480",
    "end": "978040"
  },
  {
    "text": "scripting language for this database",
    "start": "978040",
    "end": "979720"
  },
  {
    "text": "called kdb plus and like every good",
    "start": "979720",
    "end": "982079"
  },
  {
    "text": "database it has a query language uh it's",
    "start": "982079",
    "end": "984600"
  },
  {
    "text": "a SQL like query language called qql uh",
    "start": "984600",
    "end": "987360"
  },
  {
    "text": "it looks like this so if you're not if",
    "start": "987360",
    "end": "988759"
  },
  {
    "text": "you you are familiar with SQL this",
    "start": "988759",
    "end": "990120"
  },
  {
    "text": "shouldn't be tooo surprising here we",
    "start": "990120",
    "end": "991759"
  },
  {
    "text": "have some table called trades we're",
    "start": "991759",
    "end": "993759"
  },
  {
    "text": "taking the average price by symbol uh",
    "start": "993759",
    "end": "996399"
  },
  {
    "text": "from trades where the date is greater",
    "start": "996399",
    "end": "998160"
  },
  {
    "text": "than today minus five in the last five",
    "start": "998160",
    "end": "1000399"
  },
  {
    "text": "days Q has a really big focus on",
    "start": "1000399",
    "end": "1003160"
  },
  {
    "text": "temporal data types so it has uh a lot",
    "start": "1003160",
    "end": "1005959"
  },
  {
    "text": "of really nice um temporal data types",
    "start": "1005959",
    "end": "1008880"
  },
  {
    "text": "temporal arithmetic built in so things",
    "start": "1008880",
    "end": "1010880"
  },
  {
    "text": "like if you want to add a minute value",
    "start": "1010880",
    "end": "1012240"
  },
  {
    "text": "to a time stamp and get what you would",
    "start": "1012240",
    "end": "1013800"
  },
  {
    "text": "expect back out uh and temporal joins",
    "start": "1013800",
    "end": "1016480"
  },
  {
    "text": "things like as of joins where you can",
    "start": "1016480",
    "end": "1018040"
  },
  {
    "text": "say give me the the price for each",
    "start": "1018040",
    "end": "1019959"
  },
  {
    "text": "symbol AS of these times in history uh",
    "start": "1019959",
    "end": "1022920"
  },
  {
    "text": "from this table and it'll look at that",
    "start": "1022920",
    "end": "1024438"
  },
  {
    "text": "table and uh back track in history",
    "start": "1024439",
    "end": "1026880"
  },
  {
    "text": "finding you the most recent price as of",
    "start": "1026880",
    "end": "1029120"
  },
  {
    "text": "each time you",
    "start": "1029120",
    "end": "1030959"
  },
  {
    "text": "requested so let's jump into an example",
    "start": "1030959",
    "end": "1033438"
  },
  {
    "text": "here uh the example I'm going to show is",
    "start": "1033439",
    "end": "1036640"
  },
  {
    "text": "um information about people on Wikipedia",
    "start": "1036640",
    "end": "1039360"
  },
  {
    "text": "and their monthly click information uh",
    "start": "1039360",
    "end": "1041600"
  },
  {
    "text": "it's going to be an end to-end example",
    "start": "1041600",
    "end": "1043079"
  },
  {
    "text": "it's a fairly small exploration but uh",
    "start": "1043079",
    "end": "1046038"
  },
  {
    "text": "I'll be showing all of the code involved",
    "start": "1046039",
    "end": "1048038"
  },
  {
    "text": "in this exploration because I want to",
    "start": "1048039",
    "end": "1049240"
  },
  {
    "text": "give an idea of how much que you",
    "start": "1049240",
    "end": "1051039"
  },
  {
    "text": "actually have to type to do something",
    "start": "1051039",
    "end": "1052280"
  },
  {
    "text": "more interesting than prime number",
    "start": "1052280",
    "end": "1054000"
  },
  {
    "text": "generation or run length",
    "start": "1054000",
    "end": "1056600"
  },
  {
    "text": "encoding um so I'm I'm just using",
    "start": "1056600",
    "end": "1058799"
  },
  {
    "text": "vanilla Q I'm not using any libraries",
    "start": "1058799",
    "end": "1060720"
  },
  {
    "text": "here so the first thing that we need to",
    "start": "1060720",
    "end": "1062840"
  },
  {
    "text": "do is actually get the data so we can",
    "start": "1062840",
    "end": "1064880"
  },
  {
    "text": "start any line with a backlash and that",
    "start": "1064880",
    "end": "1067240"
  },
  {
    "text": "line is interpreted as a system command",
    "start": "1067240",
    "end": "1069760"
  },
  {
    "text": "which is really nice because we can",
    "start": "1069760",
    "end": "1070840"
  },
  {
    "text": "interact with a system without ever",
    "start": "1070840",
    "end": "1072360"
  },
  {
    "text": "leaving our que environment so that",
    "start": "1072360",
    "end": "1074760"
  },
  {
    "text": "means we can take advantage of wget to",
    "start": "1074760",
    "end": "1076799"
  },
  {
    "text": "go off to the internet and get us these",
    "start": "1076799",
    "end": "1078280"
  },
  {
    "text": "two files back we're getting this",
    "start": "1078280",
    "end": "1080559"
  },
  {
    "text": "Pantheon tab separated value file and",
    "start": "1080559",
    "end": "1082559"
  },
  {
    "text": "this page views tab separated value file",
    "start": "1082559",
    "end": "1085880"
  },
  {
    "text": "so now that we have those files on disk",
    "start": "1085880",
    "end": "1088159"
  },
  {
    "text": "uh we're going to read those files into",
    "start": "1088159",
    "end": "1089919"
  },
  {
    "text": "tables in Q so this is what ETL looks",
    "start": "1089919",
    "end": "1092440"
  },
  {
    "text": "like in Q uh ETL is extract transform",
    "start": "1092440",
    "end": "1094919"
  },
  {
    "text": "load here we have the file name of the",
    "start": "1094919",
    "end": "1097440"
  },
  {
    "text": "file on disk uh we're telling q that",
    "start": "1097440",
    "end": "1099960"
  },
  {
    "text": "it's a tab separated file and it has",
    "start": "1099960",
    "end": "1102120"
  },
  {
    "text": "these column types so uh things like I",
    "start": "1102120",
    "end": "1104679"
  },
  {
    "text": "for integer s for symbol F for float uh",
    "start": "1104679",
    "end": "1107880"
  },
  {
    "text": "that sort of thing and we're storing",
    "start": "1107880",
    "end": "1109320"
  },
  {
    "text": "that in a variable called people so",
    "start": "1109320",
    "end": "1110799"
  },
  {
    "text": "that'll be a table in Q and we're doing",
    "start": "1110799",
    "end": "1113720"
  },
  {
    "text": "the same thing for the page views table",
    "start": "1113720",
    "end": "1115200"
  },
  {
    "text": "so we'll have this people table in the",
    "start": "1115200",
    "end": "1116880"
  },
  {
    "text": "page views table but you might notice",
    "start": "1116880",
    "end": "1118880"
  },
  {
    "text": "that in this page views table there's 72",
    "start": "1118880",
    "end": "1121520"
  },
  {
    "text": "integer columns tagged on to the end of",
    "start": "1121520",
    "end": "1123360"
  },
  {
    "text": "it what that is is six years of data",
    "start": "1123360",
    "end": "1127000"
  },
  {
    "text": "each month in those six years is a",
    "start": "1127000",
    "end": "1129240"
  },
  {
    "text": "single column now that's fine but we're",
    "start": "1129240",
    "end": "1132320"
  },
  {
    "text": "a column oriented database so we want to",
    "start": "1132320",
    "end": "1134159"
  },
  {
    "text": "ask interesting column oriented",
    "start": "1134159",
    "end": "1135919"
  },
  {
    "text": "questions uh so what we'd rather have is",
    "start": "1135919",
    "end": "1138159"
  },
  {
    "text": "a long skinny table rather than this",
    "start": "1138159",
    "end": "1140240"
  },
  {
    "text": "short fat table so that leads to step",
    "start": "1140240",
    "end": "1142840"
  },
  {
    "text": "two of every data analysis project which",
    "start": "1142840",
    "end": "1144559"
  },
  {
    "text": "is clean the data a lot of people like",
    "start": "1144559",
    "end": "1146840"
  },
  {
    "text": "to throw out the number 80% of every",
    "start": "1146840",
    "end": "1148559"
  },
  {
    "text": "data analysis project is spent in data",
    "start": "1148559",
    "end": "1150919"
  },
  {
    "text": "cleaning data munging that sort of thing",
    "start": "1150919",
    "end": "1153080"
  },
  {
    "text": "this data it turns out is already very",
    "start": "1153080",
    "end": "1155200"
  },
  {
    "text": "clean there's very little we have to do",
    "start": "1155200",
    "end": "1156799"
  },
  {
    "text": "all we have to do is take this long",
    "start": "1156799",
    "end": "1158559"
  },
  {
    "text": "skinny thing the 72 integer columns and",
    "start": "1158559",
    "end": "1161159"
  },
  {
    "text": "convert it into a sort the short fat",
    "start": "1161159",
    "end": "1163559"
  },
  {
    "text": "thing and convert it into a long skinny",
    "start": "1163559",
    "end": "1165480"
  },
  {
    "text": "thing so what we're going to do is get",
    "start": "1165480",
    "end": "1167840"
  },
  {
    "text": "the columns of the this page views table",
    "start": "1167840",
    "end": "1170400"
  },
  {
    "text": "drop the first 11 columns because those",
    "start": "1170400",
    "end": "1172240"
  },
  {
    "text": "are the ones that aren't months we're",
    "start": "1172240",
    "end": "1174360"
  },
  {
    "text": "going to turn those into Strings and",
    "start": "1174360",
    "end": "1177200"
  },
  {
    "text": "parse those strings into Q month values",
    "start": "1177200",
    "end": "1179799"
  },
  {
    "text": "the Q month data type we're then going",
    "start": "1179799",
    "end": "1182200"
  },
  {
    "text": "to create this long skinny table we call",
    "start": "1182200",
    "end": "1184240"
  },
  {
    "text": "it monthly and we'll give it these four",
    "start": "1184240",
    "end": "1186919"
  },
  {
    "text": "columns an ID column and a language",
    "start": "1186919",
    "end": "1188720"
  },
  {
    "text": "column which correspond to the primary",
    "start": "1188720",
    "end": "1190360"
  },
  {
    "text": "keys of the people",
    "start": "1190360",
    "end": "1192320"
  },
  {
    "text": "table and the month and the number of",
    "start": "1192320",
    "end": "1194679"
  },
  {
    "text": "times uh that person corresponding to",
    "start": "1194679",
    "end": "1196760"
  },
  {
    "text": "the ID was clicked we'll then do this",
    "start": "1196760",
    "end": "1199559"
  },
  {
    "text": "relational left join on the ID and the",
    "start": "1199559",
    "end": "1202000"
  },
  {
    "text": "language column which are those primary",
    "start": "1202000",
    "end": "1203840"
  },
  {
    "text": "keys of the people table onto this long",
    "start": "1203840",
    "end": "1206000"
  },
  {
    "text": "skinny monthly table and we'll store",
    "start": "1206000",
    "end": "1208000"
  },
  {
    "text": "that in a variable called click info so",
    "start": "1208000",
    "end": "1209760"
  },
  {
    "text": "what that's doing is taking this people",
    "start": "1209760",
    "end": "1211799"
  },
  {
    "text": "table and this monthly click table and",
    "start": "1211799",
    "end": "1214919"
  },
  {
    "text": "joining those two together uh with a",
    "start": "1214919",
    "end": "1216559"
  },
  {
    "text": "left",
    "start": "1216559",
    "end": "1217919"
  },
  {
    "text": "join so what I'm interested in is the",
    "start": "1217919",
    "end": "1221000"
  },
  {
    "text": "computer scientists on Wikipedia so I",
    "start": "1221000",
    "end": "1222840"
  },
  {
    "text": "can just ask for the computer scientists",
    "start": "1222840",
    "end": "1225240"
  },
  {
    "text": "and that gives me something that's not",
    "start": "1225240",
    "end": "1226960"
  },
  {
    "text": "too surprising back out relatively",
    "start": "1226960",
    "end": "1228840"
  },
  {
    "text": "little traffic for computer scientists",
    "start": "1228840",
    "end": "1230559"
  },
  {
    "text": "with a few prominent spikes in the",
    "start": "1230559",
    "end": "1232440"
  },
  {
    "text": "traffic so I was interested in those",
    "start": "1232440",
    "end": "1234320"
  },
  {
    "text": "spikes and I interrogated one of the",
    "start": "1234320",
    "end": "1236120"
  },
  {
    "text": "spikes a little closer here I'm looking",
    "start": "1236120",
    "end": "1238159"
  },
  {
    "text": "at the spike on the right and turns out",
    "start": "1238159",
    "end": "1240080"
  },
  {
    "text": "that Spike uh corresponds to Allen",
    "start": "1240080",
    "end": "1241960"
  },
  {
    "text": "touring in June",
    "start": "1241960",
    "end": "1244520"
  },
  {
    "text": "2006 uh sorry June",
    "start": "1244520",
    "end": "1247720"
  },
  {
    "text": "2012 um so I looked at a few of the",
    "start": "1247720",
    "end": "1249760"
  },
  {
    "text": "other dimensions in the data to see if",
    "start": "1249760",
    "end": "1251120"
  },
  {
    "text": "anything else was changing along this",
    "start": "1251120",
    "end": "1252960"
  },
  {
    "text": "time frame and it seemed everything else",
    "start": "1252960",
    "end": "1254440"
  },
  {
    "text": "was fairly stable the only thing",
    "start": "1254440",
    "end": "1255960"
  },
  {
    "text": "changing was uh the clicks spiked",
    "start": "1255960",
    "end": "1259159"
  },
  {
    "text": "so I did some Googling and it turned out",
    "start": "1259159",
    "end": "1260840"
  },
  {
    "text": "that June 6 2012 was Alan touring's",
    "start": "1260840",
    "end": "1263799"
  },
  {
    "text": "100th birthday so I thought back oh yeah",
    "start": "1263799",
    "end": "1265960"
  },
  {
    "text": "I remember seeing something about that",
    "start": "1265960",
    "end": "1267200"
  },
  {
    "text": "in particular I remember seeing uh this",
    "start": "1267200",
    "end": "1269480"
  },
  {
    "text": "Google doodle of a touring tape",
    "start": "1269480",
    "end": "1271000"
  },
  {
    "text": "celebrating Alan touring on his 100's",
    "start": "1271000",
    "end": "1273360"
  },
  {
    "text": "birthday so I thought okay interesting I",
    "start": "1273360",
    "end": "1275760"
  },
  {
    "text": "wonder how many other spikes in",
    "start": "1275760",
    "end": "1277840"
  },
  {
    "text": "Wikipedia monthly clicks have a",
    "start": "1277840",
    "end": "1280000"
  },
  {
    "text": "corresponding Google doodle I wonder if",
    "start": "1280000",
    "end": "1281799"
  },
  {
    "text": "there's any sort of correlation there so",
    "start": "1281799",
    "end": "1285159"
  },
  {
    "text": "I went to Google trying to find the",
    "start": "1285159",
    "end": "1286720"
  },
  {
    "text": "nicest uh little data set of Google",
    "start": "1286720",
    "end": "1288600"
  },
  {
    "text": "Doodles that I could to see uh what was",
    "start": "1288600",
    "end": "1291120"
  },
  {
    "text": "being celebrated and when it was being",
    "start": "1291120",
    "end": "1292919"
  },
  {
    "text": "celebrated and I was disappointed to",
    "start": "1292919",
    "end": "1294919"
  },
  {
    "text": "find that this was the best data set I",
    "start": "1294919",
    "end": "1296760"
  },
  {
    "text": "could find six pages of Wikipedia one",
    "start": "1296760",
    "end": "1299480"
  },
  {
    "text": "page per year with each Google doodle",
    "start": "1299480",
    "end": "1301640"
  },
  {
    "text": "written out in natural",
    "start": "1301640",
    "end": "1303520"
  },
  {
    "text": "language uh so that's annoying I thought",
    "start": "1303520",
    "end": "1306279"
  },
  {
    "text": "we got past that data cleaning stage but",
    "start": "1306279",
    "end": "1308000"
  },
  {
    "text": "it turns out that that leads us to step",
    "start": "1308000",
    "end": "1310120"
  },
  {
    "text": "four of every data analysis project",
    "start": "1310120",
    "end": "1311720"
  },
  {
    "text": "which is clean the data again uh it",
    "start": "1311720",
    "end": "1314440"
  },
  {
    "text": "turns out it's not that bad in Q this is",
    "start": "1314440",
    "end": "1316279"
  },
  {
    "text": "all we have to write to go off to the",
    "start": "1316279",
    "end": "1318200"
  },
  {
    "text": "internet get those six Wikipedia",
    "start": "1318200",
    "end": "1319960"
  },
  {
    "text": "documents pull those down to files read",
    "start": "1319960",
    "end": "1322520"
  },
  {
    "text": "each file into uh Q as an HTML file so",
    "start": "1322520",
    "end": "1325919"
  },
  {
    "text": "that's what the HTML files look like",
    "start": "1325919",
    "end": "1327320"
  },
  {
    "text": "they're just much larger uh parse each",
    "start": "1327320",
    "end": "1329720"
  },
  {
    "text": "of those into a single table that looks",
    "start": "1329720",
    "end": "1331840"
  },
  {
    "text": "like this with the month uh of the",
    "start": "1331840",
    "end": "1333760"
  },
  {
    "text": "Google doodle and the person or thing",
    "start": "1333760",
    "end": "1335919"
  },
  {
    "text": "that was being celebrated and then",
    "start": "1335919",
    "end": "1338159"
  },
  {
    "text": "aggregate all of those six individual",
    "start": "1338159",
    "end": "1340279"
  },
  {
    "text": "tables into one giant Google doodle",
    "start": "1340279",
    "end": "1342720"
  },
  {
    "text": "table uh so that's not bad for doing all",
    "start": "1342720",
    "end": "1345279"
  },
  {
    "text": "of that and if you squint at that you",
    "start": "1345279",
    "end": "1346960"
  },
  {
    "text": "can see how prevalent these adverbs are",
    "start": "1346960",
    "end": "1349559"
  },
  {
    "text": "each left each right these sorts of",
    "start": "1349559",
    "end": "1351039"
  },
  {
    "text": "things I'm not going to dive into this",
    "start": "1351039",
    "end": "1353080"
  },
  {
    "text": "code and explain it because it's pretty",
    "start": "1353080",
    "end": "1354799"
  },
  {
    "text": "hairy but we only have to write it once",
    "start": "1354799",
    "end": "1356720"
  },
  {
    "text": "and then we're done if this process",
    "start": "1356720",
    "end": "1359360"
  },
  {
    "text": "function here that does all of the heavy",
    "start": "1359360",
    "end": "1361360"
  },
  {
    "text": "lifting was a lot more computationally",
    "start": "1361360",
    "end": "1363320"
  },
  {
    "text": "intensive than it actually is uh we",
    "start": "1363320",
    "end": "1365600"
  },
  {
    "text": "might want to take advantage of these",
    "start": "1365600",
    "end": "1366880"
  },
  {
    "text": "mod modern computers that we're using",
    "start": "1366880",
    "end": "1368520"
  },
  {
    "text": "with multiple cores we might want to",
    "start": "1368520",
    "end": "1370279"
  },
  {
    "text": "make this a parallel process so if this",
    "start": "1370279",
    "end": "1372559"
  },
  {
    "text": "proc if this if we Sorry if we are good",
    "start": "1372559",
    "end": "1375000"
  },
  {
    "text": "functional programming citizens and this",
    "start": "1375000",
    "end": "1376720"
  },
  {
    "text": "process function is pure uh we could",
    "start": "1376720",
    "end": "1379360"
  },
  {
    "text": "just go ahead and turn this into a",
    "start": "1379360",
    "end": "1380679"
  },
  {
    "text": "parallel process by taking this each",
    "start": "1380679",
    "end": "1382720"
  },
  {
    "text": "function which does the mapping of",
    "start": "1382720",
    "end": "1384279"
  },
  {
    "text": "process over each year stick a p in",
    "start": "1384279",
    "end": "1387120"
  },
  {
    "text": "front of it for parallel boom we're done",
    "start": "1387120",
    "end": "1389840"
  },
  {
    "text": "that's it now it's using all the chords",
    "start": "1389840",
    "end": "1391600"
  },
  {
    "text": "that you have available to",
    "start": "1391600",
    "end": "1393240"
  },
  {
    "text": "you so now that we have our doodle table",
    "start": "1393240",
    "end": "1395840"
  },
  {
    "text": "we have our uh click info table we can",
    "start": "1395840",
    "end": "1398640"
  },
  {
    "text": "do a little bit more interesting",
    "start": "1398640",
    "end": "1399919"
  },
  {
    "text": "analysis so all I'm doing here in the",
    "start": "1399919",
    "end": "1402039"
  },
  {
    "text": "first line is creating a new column of",
    "start": "1402039",
    "end": "1404520"
  },
  {
    "text": "the click info table which is just a",
    "start": "1404520",
    "end": "1405960"
  },
  {
    "text": "Boolean column indicating if that",
    "start": "1405960",
    "end": "1409080"
  },
  {
    "text": "is uh celebrated in that",
    "start": "1409080",
    "end": "1411840"
  },
  {
    "text": "month in the uh next four lines or so",
    "start": "1411840",
    "end": "1416000"
  },
  {
    "text": "I'm asking for each doodled person what",
    "start": "1416000",
    "end": "1418480"
  },
  {
    "text": "is the difference between their doodled",
    "start": "1418480",
    "end": "1420480"
  },
  {
    "text": "traffic and their next highest traffic",
    "start": "1420480",
    "end": "1422520"
  },
  {
    "text": "their traffic what their traffic would",
    "start": "1422520",
    "end": "1424000"
  },
  {
    "text": "have been had they not have been doodled",
    "start": "1424000",
    "end": "1425960"
  },
  {
    "text": "to our best estimate because we don't",
    "start": "1425960",
    "end": "1427640"
  },
  {
    "text": "know what that would be for the month",
    "start": "1427640",
    "end": "1428720"
  },
  {
    "text": "that they were doodled and it turns out",
    "start": "1428720",
    "end": "1430559"
  },
  {
    "text": "on average or their mean uh it's 58",
    "start": "1430559",
    "end": "1433120"
  },
  {
    "text": "Times Higher their doodle traffic is 58",
    "start": "1433120",
    "end": "1435039"
  },
  {
    "text": "times higher than their non next highest",
    "start": "1435039",
    "end": "1437039"
  },
  {
    "text": "non- doodle traffic with a median of 10",
    "start": "1437039",
    "end": "1439120"
  },
  {
    "text": "times so that's fairly significant that",
    "start": "1439120",
    "end": "1440679"
  },
  {
    "text": "could lead to a bit more of an",
    "start": "1440679",
    "end": "1442240"
  },
  {
    "text": "exploration there and those are the six",
    "start": "1442240",
    "end": "1445279"
  },
  {
    "text": "or seven people with the highest",
    "start": "1445279",
    "end": "1446720"
  },
  {
    "text": "difference between their doodle traffic",
    "start": "1446720",
    "end": "1448120"
  },
  {
    "text": "and their next highest traffic so it's",
    "start": "1448120",
    "end": "1449919"
  },
  {
    "text": "kind of nice to see an appearance From",
    "start": "1449919",
    "end": "1451200"
  },
  {
    "text": "Grace Hopper",
    "start": "1451200",
    "end": "1452840"
  },
  {
    "text": "there uh so in the interest of time I'll",
    "start": "1452840",
    "end": "1455159"
  },
  {
    "text": "stop the exploration there but we went",
    "start": "1455159",
    "end": "1457000"
  },
  {
    "text": "from um having no data to finding an",
    "start": "1457000",
    "end": "1459720"
  },
  {
    "text": "interesting result in the data from",
    "start": "1459720",
    "end": "1461320"
  },
  {
    "text": "multiple data sources doing a little bit",
    "start": "1461320",
    "end": "1463320"
  },
  {
    "text": "of data cleaning data munging and",
    "start": "1463320",
    "end": "1464640"
  },
  {
    "text": "joining there uh so we'll do a quick",
    "start": "1464640",
    "end": "1467039"
  },
  {
    "text": "summary here and we'll take some",
    "start": "1467039",
    "end": "1468799"
  },
  {
    "text": "questions so why should you care uh well",
    "start": "1468799",
    "end": "1471360"
  },
  {
    "text": "we went over that Q has a very high",
    "start": "1471360",
    "end": "1473600"
  },
  {
    "text": "level expressive notation you can write",
    "start": "1473600",
    "end": "1476279"
  },
  {
    "text": "um complex algorithms very quickly",
    "start": "1476279",
    "end": "1478760"
  },
  {
    "text": "really at the speed that you can dictate",
    "start": "1478760",
    "end": "1480559"
  },
  {
    "text": "at least as I did with run length",
    "start": "1480559",
    "end": "1481840"
  },
  {
    "text": "encoding and prime number",
    "start": "1481840",
    "end": "1483480"
  },
  {
    "text": "generation I think it's important to",
    "start": "1483480",
    "end": "1485240"
  },
  {
    "text": "note in this age where functional",
    "start": "1485240",
    "end": "1487039"
  },
  {
    "text": "programming is really starting to have",
    "start": "1487039",
    "end": "1488320"
  },
  {
    "text": "an impact and all of these languages are",
    "start": "1488320",
    "end": "1491039"
  },
  {
    "text": "uh popping up all over the place uh it's",
    "start": "1491039",
    "end": "1493520"
  },
  {
    "text": "important to note that this isn't just",
    "start": "1493520",
    "end": "1495480"
  },
  {
    "text": "someone's pet project and it's not just",
    "start": "1495480",
    "end": "1497000"
  },
  {
    "text": "going to uh be a abandon or disappear in",
    "start": "1497000",
    "end": "1499440"
  },
  {
    "text": "a year or so it this is developed by a",
    "start": "1499440",
    "end": "1502039"
  },
  {
    "text": "company called KX systems they've been",
    "start": "1502039",
    "end": "1503799"
  },
  {
    "text": "doing this since 1993 at least uh and",
    "start": "1503799",
    "end": "1506840"
  },
  {
    "text": "the vector Community has been doing this",
    "start": "1506840",
    "end": "1508679"
  },
  {
    "text": "since uh APL since",
    "start": "1508679",
    "end": "1511000"
  },
  {
    "text": "1965 Q is a very practical language so",
    "start": "1511000",
    "end": "1513799"
  },
  {
    "text": "we talked about things like dictionaries",
    "start": "1513799",
    "end": "1515840"
  },
  {
    "text": "tables key tables this quer language qql",
    "start": "1515840",
    "end": "1519159"
  },
  {
    "text": "which is actually just syntactic sugar",
    "start": "1519159",
    "end": "1521240"
  },
  {
    "text": "over Q function so it's fully integrated",
    "start": "1521240",
    "end": "1523279"
  },
  {
    "text": "in the language it's just an expression",
    "start": "1523279",
    "end": "1525960"
  },
  {
    "text": "these this focus on temporals temporal",
    "start": "1525960",
    "end": "1528000"
  },
  {
    "text": "data types uh temporal arithmetic",
    "start": "1528000",
    "end": "1530360"
  },
  {
    "text": "temporal joints and tons of other",
    "start": "1530360",
    "end": "1532399"
  },
  {
    "text": "practical stuff that I just don't have",
    "start": "1532399",
    "end": "1533760"
  },
  {
    "text": "time to",
    "start": "1533760",
    "end": "1534840"
  },
  {
    "text": "cover uh it's very fast it's only going",
    "start": "1534840",
    "end": "1537720"
  },
  {
    "text": "to get faster um if you're interested in",
    "start": "1537720",
    "end": "1540520"
  },
  {
    "text": "the performance uh I can only urge you",
    "start": "1540520",
    "end": "1542799"
  },
  {
    "text": "to check out the benchmarks online uh I",
    "start": "1542799",
    "end": "1544960"
  },
  {
    "text": "don't want to make any enemies here uh",
    "start": "1544960",
    "end": "1547559"
  },
  {
    "text": "it's interesting it's different and",
    "start": "1547559",
    "end": "1549279"
  },
  {
    "text": "it'll change how you think and give you",
    "start": "1549279",
    "end": "1551080"
  },
  {
    "text": "a new way of looking at problems I think",
    "start": "1551080",
    "end": "1553720"
  },
  {
    "text": "that's helpful in any programming",
    "start": "1553720",
    "end": "1556279"
  },
  {
    "text": "language uh so that's it for me anybody",
    "start": "1556279",
    "end": "1558679"
  },
  {
    "text": "has any questions",
    "start": "1558679",
    "end": "1561710"
  },
  {
    "text": "[Applause]",
    "start": "1561710",
    "end": "1568469"
  }
]