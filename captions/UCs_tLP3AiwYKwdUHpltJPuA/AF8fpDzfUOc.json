[
  {
    "text": "hi so I'm Chris Mel John I'm at bash show um and I won't touch the mic again because that was irritating but uh so",
    "start": "5600",
    "end": "12440"
  },
  {
    "text": "the name of this talk is coordination free computations um the title and the",
    "start": "12440",
    "end": "18000"
  },
  {
    "text": "abstract don't really reflect the work as it is now but it did at the time that I was invited to give this talk um so",
    "start": "18000",
    "end": "24439"
  },
  {
    "text": "we're going to change things up we also didn't have a name for a lot of this stuff because it's like research and we like you know change names and do all",
    "start": "24439",
    "end": "29679"
  },
  {
    "text": "sorts of fancy stuff so the new title slide is this um so what I'm want to",
    "start": "29679",
    "end": "35600"
  },
  {
    "text": "talk about today is a programming language um that we're building it's",
    "start": "35600",
    "end": "41280"
  },
  {
    "text": "called lasp um and it's for building distributed eventually consistent computations um so this is Joint",
    "start": "41280",
    "end": "47440"
  },
  {
    "text": "research under a EU funded research project called sync free so I got the flag because you're supposed to do that",
    "start": "47440",
    "end": "52879"
  },
  {
    "text": "and uh I'm Christopher meln I'm at baso and uh my collaborator on this project is uh Peter amroy uh in",
    "start": "52879",
    "end": "61039"
  },
  {
    "text": "you might have heard of him he's done some stuff with programming languages a few times so anyway uh we're going to kind",
    "start": "61039",
    "end": "66520"
  },
  {
    "text": "of talk through the motivation so um it's interesting having the talk you know the last sort of talk on the last",
    "start": "66520",
    "end": "72240"
  },
  {
    "text": "day because what you do is you just like spend the entire conference working on slides and you don't see anything uh which sucks but um what's really good",
    "start": "72240",
    "end": "79240"
  },
  {
    "text": "about it is that Kyle gave a really amazing keynote where he talked about all these problems in uh distributed systems and how do you reason about uh",
    "start": "79240",
    "end": "86280"
  },
  {
    "text": "concurrent operations and how do you think about concurrency and then n gave a talk where she kind of talked about weakening some",
    "start": "86280",
    "end": "92640"
  },
  {
    "text": "of this stuff and still having some of the guarantees and and Katie as well so it's really great because they basically",
    "start": "92640",
    "end": "97920"
  },
  {
    "text": "did the background section of my talk for me um so I don't have to so so thank you to both of them and thank you to",
    "start": "97920",
    "end": "103560"
  },
  {
    "text": "Kyle so um so we'll kind of we'll kind of go through the motivation so if you saw Kyle's stuff Kyle kind of made this",
    "start": "103560",
    "end": "108880"
  },
  {
    "text": "point that crdts are really really awesome uh because they preserve these concurrent operations that happen in a",
    "start": "108880",
    "end": "114280"
  },
  {
    "text": "distributed system and we're going to talk about why crdts are good and then we're going to talk about why they're not enough and what we're trying to do",
    "start": "114280",
    "end": "120439"
  },
  {
    "text": "to adapt this to make crdts uh more expressive and more Rich um okay so the general idea here",
    "start": "120439",
    "end": "128679"
  },
  {
    "text": "about the project is that synchronization is both expensive and impractical uh when I refer to",
    "start": "128679",
    "end": "134000"
  },
  {
    "text": "synchronization I'm referring to things like I have a database and I have a copy of this database in you know Europe and",
    "start": "134000",
    "end": "139440"
  },
  {
    "text": "I have a copy of this database in Virginia and I want to synchronize some State between these two um so syn synchronization is really expensive and",
    "start": "139440",
    "end": "146599"
  },
  {
    "text": "for a lot of applications synchronization is is kind of impractical right um so we're going to kind of talk about two cases why we feel",
    "start": "146599",
    "end": "153160"
  },
  {
    "text": "that synchronization is Impractical um so the first one is um roio entertainment so roio makes mobile",
    "start": "153160",
    "end": "160159"
  },
  {
    "text": "games you might have heard of them they made this game called Angry Birds and uh what they have is they have shared State",
    "start": "160159",
    "end": "166040"
  },
  {
    "text": "between clients so uh if you think that like uh me and Katie both play Angry Birds and we share the same profile",
    "start": "166040",
    "end": "171760"
  },
  {
    "text": "because we want to you know kind of double our points and be the best Angry Birds player in the system uh we have",
    "start": "171760",
    "end": "177400"
  },
  {
    "text": "shared State we're sharing a profile we're sharing scores sharing accomplishments um the problem here is",
    "start": "177400",
    "end": "182920"
  },
  {
    "text": "that you have the shared State and clients go offline and you don't want your system to stop working you don't want to go into the tube and like open",
    "start": "182920",
    "end": "189239"
  },
  {
    "text": "up Angry Birds and it's like sorry you got to come back online or sorry sign on at 5 o'clock so we can compute around of paxos and like share your scores with",
    "start": "189239",
    "end": "195560"
  },
  {
    "text": "everybody right so so this is something that that we just don't have and we we can't support in this model we need",
    "start": "195560",
    "end": "201560"
  },
  {
    "text": "clients to always be able to make progress um you know depending on offline and whether you know uh you know",
    "start": "201560",
    "end": "208200"
  },
  {
    "text": "and when clients go offline you you have this idea that if if me and Katie both go offline and we do things I do it at 2",
    "start": "208200",
    "end": "213959"
  },
  {
    "text": "o'clock and she does at four o'clock then we both come on at 5 those operations appear to the system to be concurrent we don't really know which",
    "start": "213959",
    "end": "220400"
  },
  {
    "text": "one influenc the other we don't know which one is correct and we don't know which one should win similar we have this kind of uh",
    "start": "220400",
    "end": "227120"
  },
  {
    "text": "internet of things kind of buzzwordy thing that's happening lately and the idea here is that you're going to have like sometime shared state but you're",
    "start": "227120",
    "end": "234720"
  },
  {
    "text": "definitely going to have disjoint State and the state is going to be aggregated and you might have multiple ways of aggregating this State you might have",
    "start": "234720",
    "end": "240599"
  },
  {
    "text": "different uh distribution meth mechanisms you might have things going into a centralized DC and then maybe a",
    "start": "240599",
    "end": "246200"
  },
  {
    "text": "sensor can give another sensor it's information and it can share that data on its behalf so again the problem that",
    "start": "246200",
    "end": "251560"
  },
  {
    "text": "you have is you have this state that might be repeated on the network or reordered on the network you might be Computing Aggregates things might go",
    "start": "251560",
    "end": "257519"
  },
  {
    "text": "offline for a while and you have to reason about what wins you have to reason about what I should do if should",
    "start": "257519",
    "end": "263040"
  },
  {
    "text": "I count this you know if I have a counter that's at five and uh you know if I have a counter that's five and then all of a sudden I get two updates from",
    "start": "263040",
    "end": "269520"
  },
  {
    "text": "part parties that have the same replica and it both goes to 10 well did it go to 10 or did it go to 15 you don't know right it could have gone anywhere in",
    "start": "269520",
    "end": "276199"
  },
  {
    "text": "between so fundamentally the problem that we're dealing with when we think of these systems is that there's a there's",
    "start": "276199",
    "end": "281840"
  },
  {
    "text": "effectively no total order in the system really um we have these replicated State these clients make progress everything's",
    "start": "281840",
    "end": "287880"
  },
  {
    "text": "offline things come back online on certain periods and we have no way of really reasoning about the order of the events that occur in the",
    "start": "287880",
    "end": "294759"
  },
  {
    "text": "system um you might say well what about wall clocks well if you went to Kyle's Kino hopefully he demonstrated wall",
    "start": "294759",
    "end": "300000"
  },
  {
    "text": "clocks don't work uh clocks go backwards clocks go forwards you can skew clocks forwards and backwards you can have a",
    "start": "300000",
    "end": "305479"
  },
  {
    "text": "Noisy Neighbor on Amazon ec2 and your clock could go backwards you can't use clocks and you definitely can't use",
    "start": "305479",
    "end": "311000"
  },
  {
    "text": "client applied clocks uh because there's this whole thing called doomstones that we won't get into but it's a really",
    "start": "311000",
    "end": "316199"
  },
  {
    "text": "interesting thing that you can read about um the citation here that we have is spanner uh spanner is an interesting",
    "start": "316199",
    "end": "321680"
  },
  {
    "text": "paper this Google's like kind of globally distributed uh coordination datab uh coordinated database and even",
    "start": "321680",
    "end": "328199"
  },
  {
    "text": "in this paper they kind of say well even with the best hardware these GPS transceivers that we have in all the machines we have atomic clocks even with",
    "start": "328199",
    "end": "335280"
  },
  {
    "text": "all of this stuff all of this money all of this equipment the best we can do is approximate something within a very very",
    "start": "335280",
    "end": "340400"
  },
  {
    "text": "small window but we still don't know so they build a consensus algorithm essentially uh around like understanding",
    "start": "340400",
    "end": "346880"
  },
  {
    "text": "that you can kind of do things with this window and you can work with it but again like that doesn't really solve the",
    "start": "346880",
    "end": "352000"
  },
  {
    "text": "fundamental issue right um so what is kind of fundamental here and the idea is",
    "start": "352000",
    "end": "357080"
  },
  {
    "text": "we have concurrency that has to be reconciled by the user or the application",
    "start": "357080",
    "end": "362479"
  },
  {
    "text": "developer excuse me so I get talking like Joe bload sometimes and I have to",
    "start": "362960",
    "end": "368360"
  },
  {
    "text": "like slow myself down uh so we're going to walk through an example of why this is a problem so here we're going to have two replicas of the same object well",
    "start": "368360",
    "end": "375039"
  },
  {
    "text": "soon they start up with the Mt State and uh what we have here is at this time here um we set so this is a register so",
    "start": "375039",
    "end": "382400"
  },
  {
    "text": "like Kyle talked about his keyote you register you set a value um so we set the value to one on replica a and then we send the state to replica B like",
    "start": "382400",
    "end": "389160"
  },
  {
    "text": "here's my state so replica B at this time with this merge line comes in gets the state and it has one so then",
    "start": "389160",
    "end": "394919"
  },
  {
    "text": "concurrently in the system uh they might happen at different physical times but concurrently as the system is able to reason about so logical time uh we set",
    "start": "394919",
    "end": "402280"
  },
  {
    "text": "the value on replica a to be two and we set the value to be three on replica B and now these merge messages happen and",
    "start": "402280",
    "end": "408319"
  },
  {
    "text": "we end up with I don't know what do we end up with what does the system do so",
    "start": "408319",
    "end": "413360"
  },
  {
    "text": "systems like react and and react 20 specifically basically have this kind of allow mol allow mol true sibling thing",
    "start": "413360",
    "end": "420280"
  },
  {
    "text": "and what it will do is it will store both values it will store both values and when you go to read you're going to get two and three and it's up to you to",
    "start": "420280",
    "end": "425759"
  },
  {
    "text": "make a decision on how to resolve this um so this isn't really like the best abstraction this isn't the most useful",
    "start": "425759",
    "end": "431479"
  },
  {
    "text": "thing that you could essentially have to build a large scale distribu system which is already hard um but we do have a solution right",
    "start": "431479",
    "end": "438520"
  },
  {
    "text": "so we have this thing called crdts that a bunch of people have mentioned and I guess I'll I'll kind of talk about them too CU they're cool I guess and and uh",
    "start": "438520",
    "end": "446080"
  },
  {
    "text": "what they stand for is conflict-free replicated data types so they're they're data structures that are designed for",
    "start": "446080",
    "end": "451599"
  },
  {
    "text": "distribution and these data structures have a deterministic resolution function so they say in the event of concurrency",
    "start": "451599",
    "end": "457800"
  },
  {
    "text": "we're either going to you arbitrate to some value we're going to apply some bias we're going to do something but we",
    "start": "457800",
    "end": "462879"
  },
  {
    "text": "guarantee that we know how to merge these values and we can do it automatically so if you look at systems like Bayou they Bayou is one of the",
    "start": "462879",
    "end": "469120"
  },
  {
    "text": "first systems to kind of pose this idea that you could have a server defined merge function that the user specified and this was a way to resolve these",
    "start": "469120",
    "end": "474919"
  },
  {
    "text": "concurrent operations crdt is there a way to formalize this um",
    "start": "474919",
    "end": "480120"
  },
  {
    "text": "so what do crdts look like they have this deterministic resolution function they come in a variety of flavors we",
    "start": "480120",
    "end": "485680"
  },
  {
    "text": "have Maps like a dictionary we have sets bunch of different types we have counters a bunch of different types we",
    "start": "485680",
    "end": "491520"
  },
  {
    "text": "have a multivalue registers we have last Rider wins registers and then there's like a caal time last Rider wins",
    "start": "491520",
    "end": "497039"
  },
  {
    "text": "register and we have graphs and uh in react today we support the first four and the graphs uh there's a there's a",
    "start": "497039",
    "end": "503759"
  },
  {
    "text": "paper kind of uh pseudo Cody implementation done by Mark shapir group who is the first to formalize the crdt",
    "start": "503759",
    "end": "511080"
  },
  {
    "text": "model and the property that crdts realize in the system is a property that we call monotonic strong vental",
    "start": "511080",
    "end": "517120"
  },
  {
    "text": "consistency so this is a kind of a refinement on the strong eventual consistency property that was originally opposed in this paper if you're",
    "start": "517120",
    "end": "522479"
  },
  {
    "text": "interested and what it says is that if you have replicas and these replicas are correct that as soon as the system",
    "start": "522479",
    "end": "527760"
  },
  {
    "text": "guarantees that all updates are delivered to all the copies of the object in the system so every object observes the same updates regardless of",
    "start": "527760",
    "end": "533320"
  },
  {
    "text": "ordering regardless of batching and regardless if messages are delivered multiple times they'll end up with the",
    "start": "533320",
    "end": "539519"
  },
  {
    "text": "same state so they'll end up with equivalent state so these objects effectively kind of deterministically resolve to a a value that you can",
    "start": "539519",
    "end": "546440"
  },
  {
    "text": "program against and you don't have to think that a message reordering might cause an object to be Divergent on two different",
    "start": "546440",
    "end": "552079"
  },
  {
    "text": "replicas so to explain all of this crazy stuff that people might not know how many people know about",
    "start": "552079",
    "end": "558600"
  },
  {
    "text": "crdts look at this guy no so uh so crdts we're going to talk to an example so",
    "start": "558600",
    "end": "564600"
  },
  {
    "text": "let's think about that last example so uh let's imagine that we have this register supports writing natural numbers so zero up to infinity and uh",
    "start": "564600",
    "end": "572040"
  },
  {
    "text": "our our res our merge function will be Max so in this example we have these concurrent operations the merges come in",
    "start": "572040",
    "end": "578200"
  },
  {
    "text": "and regardless of the ordering of these operations regardless if things are duplicated or batched differently we end up with the right result because the max",
    "start": "578200",
    "end": "584399"
  },
  {
    "text": "is always going to move towards three so this merge function you know if you want to get into the heavy math the merge function and it's not even really heavy",
    "start": "584399",
    "end": "590480"
  },
  {
    "text": "math but the merge function is essentially uh commutative associative and idempotent and the function kind of",
    "start": "590480",
    "end": "596600"
  },
  {
    "text": "defines this monotonic growth of the data structure over time so uh we'll",
    "start": "596600",
    "end": "601680"
  },
  {
    "text": "talk oh Jesus uh we'll talk about a little bit more complicated example so we're going to look at a set so one of",
    "start": "601680",
    "end": "607160"
  },
  {
    "text": "the possible set types in in crdt literature is called the O set so this is an observed removed set so what this",
    "start": "607160",
    "end": "614320"
  },
  {
    "text": "set does is try to approximate as best as possible a sequential data type version of a set so uh what this says is",
    "start": "614320",
    "end": "622120"
  },
  {
    "text": "that under concurrent operations so at the same time if I add and remove the if I add and remove the same element the ad",
    "start": "622120",
    "end": "627760"
  },
  {
    "text": "will win so the ad will win and when these objects merge it will still be in the set and the reasoning for this ad",
    "start": "627760",
    "end": "633120"
  },
  {
    "text": "bias there's also a remove bias version as well but the reason for the ad bias is because from a programmer's point of",
    "start": "633120",
    "end": "638839"
  },
  {
    "text": "view you can't necessarily remove items you haven't observed unless you blindly shoot updates without reading so this is",
    "start": "638839",
    "end": "645680"
  },
  {
    "text": "the closest approximate because you can't map it correct like directly to a sequential version of a set because it doesn't make sense because that set",
    "start": "645680",
    "end": "651680"
  },
  {
    "text": "doesn't handle distribution right so uh we'll walk through example so here uh it might be a little small I apologize to",
    "start": "651680",
    "end": "658000"
  },
  {
    "text": "those of you in the back uh we're going to have three replicas of the same object these in this example these",
    "start": "658000",
    "end": "663360"
  },
  {
    "text": "dotted lines represent merges and we'll see that some of them take longer than others um and we're going to have this",
    "start": "663360",
    "end": "669279"
  },
  {
    "text": "three tupal here so this three tupal is going to so this is going to be the user observed value and this is going to be the metadata and this is going to be the",
    "start": "669279",
    "end": "674920"
  },
  {
    "text": "notation for the rest of the presentation and uh in this we'll assume that this three Tuple represents the",
    "start": "674920",
    "end": "679959"
  },
  {
    "text": "value and then a set of unique identifiers of additions and then a set of unique identifiers of",
    "start": "679959",
    "end": "686000"
  },
  {
    "text": "removals so what you do is if I want to determine if one is the set I take the difference uh between the ad set and the",
    "start": "686000",
    "end": "692880"
  },
  {
    "text": "remove set um if the ad set is a superet of the removes then the object is in the",
    "start": "692880",
    "end": "698639"
  },
  {
    "text": "set um when I remove an element what I do is I take all the observed additions and I add them to the removed set so I",
    "start": "698639",
    "end": "705000"
  },
  {
    "text": "Union them into the remove set so in this example I start off and I have two concurrent operations on this data item",
    "start": "705000",
    "end": "710279"
  },
  {
    "text": "I add one and I add one so on node c i generate a unique identifier called B and I apologize for the ReUse of letters",
    "start": "710279",
    "end": "716160"
  },
  {
    "text": "I wasn't thinking clearly when I made this and at node a I generate a unique identifier of a so I add those to the",
    "start": "716160",
    "end": "722000"
  },
  {
    "text": "set okay and then we see that we send these merge messages this this assuming like optimistic replication we're not",
    "start": "722000",
    "end": "727079"
  },
  {
    "text": "talking about a quum majority Quorum system here and then I have a remove so this remove on on node C on replica C",
    "start": "727079",
    "end": "734320"
  },
  {
    "text": "hasn't observed any of this state from a yet the merge messages haven't arrived so C can only remove the additions that",
    "start": "734320",
    "end": "740360"
  },
  {
    "text": "it's observed so what it does is it takes this it takes this B from the ad set and it unions it into the remove set",
    "start": "740360",
    "end": "747480"
  },
  {
    "text": "and then at the end when I you know deliver all the messages in the system I end up with the same thing so as these",
    "start": "747480",
    "end": "752760"
  },
  {
    "text": "merge messages come in I Union these ad sets and I Union the remove sets and the data structure monotonically advances",
    "start": "752760",
    "end": "758240"
  },
  {
    "text": "and the state continues to grow and we end up with the desired result so that's great and like it's",
    "start": "758240",
    "end": "764680"
  },
  {
    "text": "really great to have these individual data items uh that you can operate over but that how can you build a program how",
    "start": "764680",
    "end": "771040"
  },
  {
    "text": "can you build a higher level kind of thing that has the same properties that these individual data items have um so a",
    "start": "771040",
    "end": "777800"
  },
  {
    "text": "little backstory the reason the language is called lasp is because the lattice a semilattice effectively is the core",
    "start": "777800",
    "end": "783399"
  },
  {
    "text": "abstraction that we're using to model these data types so in the same like kind of style of atmology is list uh",
    "start": "783399",
    "end": "789600"
  },
  {
    "text": "lisp where list is the core abstraction that you compose RS are lates that are composable so it's a little history",
    "start": "789600",
    "end": "795000"
  },
  {
    "text": "lesson on the name so uh what we're trying to do is use these lates as the core abstraction and then build larger",
    "start": "795000",
    "end": "800839"
  },
  {
    "text": "programs that deal with these lates so we're going to consider this example where we have two data items so these data items are going to be replicated",
    "start": "800839",
    "end": "807000"
  },
  {
    "text": "but we have two independent data items so these are two crd sets we're not going to consider the metadata here and",
    "start": "807000",
    "end": "812760"
  },
  {
    "text": "what we want to do is we can compose them using like an intersection right and we'll get get the intersection and will compute three and whenever these",
    "start": "812760",
    "end": "818519"
  },
  {
    "text": "data items change we want this intersection to recompute kind of in a data flow style and then we want to update this final set and what we need",
    "start": "818519",
    "end": "824480"
  },
  {
    "text": "to ensure here is that we can't naively just kind of move it like transform these values here I can't just apply a normal intersection against the user",
    "start": "824480",
    "end": "830680"
  },
  {
    "text": "observed value what I need to do is have this metadata that we're not seeing here that was in the other diagram I need to",
    "start": "830680",
    "end": "836040"
  },
  {
    "text": "have that metadata transparently sent so the user should program like this but it should preserve the metadata through all those trans uh",
    "start": "836040",
    "end": "842120"
  },
  {
    "text": "Transformations and then again I may want to do this I want to may take the output crdt and then you know apply a",
    "start": "842120",
    "end": "848120"
  },
  {
    "text": "function application on it so I apply a map function that you know kind of just uh multiplies the element in the set",
    "start": "848120",
    "end": "853320"
  },
  {
    "text": "times itself and then I have this nine and that's another crdt so I have this fragment and I want this fragment to be",
    "start": "853320",
    "end": "859800"
  },
  {
    "text": "the composition of these to also have that merge property to also have that strong eventual consistency property and",
    "start": "859800",
    "end": "865399"
  },
  {
    "text": "I also want this program fragment to have that strong eventual consistency property as well therefore I want the",
    "start": "865399",
    "end": "871360"
  },
  {
    "text": "entire application to have this strong eventual consistency property and this property will allow me to take these",
    "start": "871360",
    "end": "876399"
  },
  {
    "text": "programs and replicate them I can replicate the data items I can replicate the entire application code as well and then I can guarantee that this one and",
    "start": "876399",
    "end": "882480"
  },
  {
    "text": "this one are mergeable they're comparable via partial order on the crdt and they have all these nice convergence properties so that if they receive",
    "start": "882480",
    "end": "889040"
  },
  {
    "text": "updates in a different order I guarantee that the entire program ends up being correct so um the problem with this is",
    "start": "889040",
    "end": "897079"
  },
  {
    "text": "this function application and data composition is not non-trivial um gee who would have thought right I",
    "start": "897079",
    "end": "904680"
  },
  {
    "text": "mean I wouldn't be up here if it was trivial right so so in this example we're going to take the previous thing from before and we're going to apply a",
    "start": "904680",
    "end": "910959"
  },
  {
    "text": "function so this is a function that's going to take the elements in a set and map it to two so this is the function applied to the values at replica so as",
    "start": "910959",
    "end": "918160"
  },
  {
    "text": "replica changes we apply the transformations to the items here so as the merges come in we derive it and now we have two empty set two great okay now",
    "start": "918160",
    "end": "925880"
  },
  {
    "text": "I can do that here so I can remove that replica B for the sake of the diagram",
    "start": "925880",
    "end": "930959"
  },
  {
    "text": "and I can apply that too so as these merge messages come in as I apply these functions I",
    "start": "930959",
    "end": "936199"
  },
  {
    "text": "I excuse me I uh just apply the functions against the user specified value and great so now I have that one",
    "start": "936199",
    "end": "941759"
  },
  {
    "text": "and I have this one and I have these two things but there's a problem right because the problem is is that this",
    "start": "941759",
    "end": "947319"
  },
  {
    "text": "function is applied to the external value right and this external value doesn't map that metadata through so now",
    "start": "947319",
    "end": "953279"
  },
  {
    "text": "if for some reason this function applied to replica C happens to be behind and it's missing an update and I run into a",
    "start": "953279",
    "end": "958959"
  },
  {
    "text": "scario where I have two and I have the empty set I don't know how to resolve that and I'm back to the situation where the user needs to say what needs to",
    "start": "958959",
    "end": "964560"
  },
  {
    "text": "happen so mapping this metadata is critical um and the difference we see here is that the user wants to program",
    "start": "964560",
    "end": "970920"
  },
  {
    "text": "against a user observed value of the data structure they want to think about the values of the data structure and not the metadata but we want the",
    "start": "970920",
    "end": "977360"
  },
  {
    "text": "applications to actually work against the state we want this state to be transformed we want to apply these Transformations across all these",
    "start": "977360",
    "end": "982839"
  },
  {
    "text": "compositions and all these programs and have this wonderful beautiful convergent system and the metadata mapping is",
    "start": "982839",
    "end": "988920"
  },
  {
    "text": "nontrivial and we can't merge things without the metadata so there's a bunch of papers that I've talked about this Neil Conway originally kind of brought",
    "start": "988920",
    "end": "994800"
  },
  {
    "text": "this idea Up In Bloom where uh some of where he kind of talks about um some of the scope dilemmas and problems with",
    "start": "994800",
    "end": "1000440"
  },
  {
    "text": "composition and functions and why you have to seal functions and freeze functions um Russell Brown A co-worker",
    "start": "1000440",
    "end": "1006199"
  },
  {
    "text": "of mine uh dealt very very uh struggled for a year with trying to figure out how you do this inside one data item",
    "start": "1006199",
    "end": "1012319"
  },
  {
    "text": "correctly and uh thank God to quick check because we found some insane race cases that would race conditions that",
    "start": "1012319",
    "end": "1017839"
  },
  {
    "text": "would take like series of inner leavings to produce uh and finally we wrote a paper about well okay we finally figured",
    "start": "1017839",
    "end": "1023560"
  },
  {
    "text": "it out for a single object can we break it across objects and no you're back to the same problem so uh there's been a",
    "start": "1023560",
    "end": "1028959"
  },
  {
    "text": "bunch of work that's been happening over the past two years on this kind of idea so what are we propose um so I'm",
    "start": "1028959",
    "end": "1035918"
  },
  {
    "text": "proposing this language called lasp it's a it's a language so it's semantics performing uh for doing data type",
    "start": "1035919",
    "end": "1041360"
  },
  {
    "text": "composition uh it's a distributed runtime built on top of react core so the distribution model that's used in",
    "start": "1041360",
    "end": "1046640"
  },
  {
    "text": "react the database uh provides the distrib of crdts and some anti-entropy properties and finally uh it's right now",
    "start": "1046640",
    "end": "1054120"
  },
  {
    "text": "it's an llang Library we hope to turn this into a language um Peter very much is a PL person moving into the",
    "start": "1054120",
    "end": "1059559"
  },
  {
    "text": "distributed systems world and I'm a distributed systems person moving into the pl world so we're hoping that we can meet on something really nice and have a",
    "start": "1059559",
    "end": "1065600"
  },
  {
    "text": "language that maybe runs on like lovm or something and and you know we can run it all over the place and push it to",
    "start": "1065600",
    "end": "1071240"
  },
  {
    "text": "clients but right now for the purpose of uh doing the research we're focusing on llang which is kind of our our core",
    "start": "1071240",
    "end": "1076840"
  },
  {
    "text": "competency at this point um and the model kind of realizes crdts as streams of State changes so we like",
    "start": "1076840",
    "end": "1083520"
  },
  {
    "text": "to think that you know a crdt is an object that monotonically evolves over time at a single replica so you have",
    "start": "1083520",
    "end": "1089520"
  },
  {
    "text": "these partial orders applied at each replica and we want to connect these through these monotonic processes so",
    "start": "1089520",
    "end": "1095120"
  },
  {
    "text": "processes that kind of read and make a change so you know simplify that if you think about that graph I showed earlier",
    "start": "1095120",
    "end": "1100280"
  },
  {
    "text": "with the intersection we just want to have it so that when the inputs change they change some output and we want to ensure that the state is always growing",
    "start": "1100280",
    "end": "1106679"
  },
  {
    "text": "we're always kind of getting that monotonic property that allows us to merge always carrying that metadata through and the system provides a one to",
    "start": "1106679",
    "end": "1113799"
  },
  {
    "text": "one mapping of crdts and a many to one mapping of crdts as you show as I showed through the uh the the earlier slide",
    "start": "1113799",
    "end": "1120280"
  },
  {
    "text": "with the application um the Primitive operations that the language provides uh is a",
    "start": "1120280",
    "end": "1125679"
  },
  {
    "text": "monotonic read operation so this is kind of a modified version of the uh read oper the threshold read operation that",
    "start": "1125679",
    "end": "1131080"
  },
  {
    "text": "uh Lindsey Cooper kind of uh uh published the elvar work about uh it it provides a session guarantee that kind",
    "start": "1131080",
    "end": "1137159"
  },
  {
    "text": "of goes cross nodes so you can do a with a causal context and ensure that you always read a future object and you never see an earlier object in the",
    "start": "1137159",
    "end": "1143960"
  },
  {
    "text": "system uh it has an update option that allows you to add things and change the rdts otherwise the system would be",
    "start": "1143960",
    "end": "1150600"
  },
  {
    "text": "useless uh it has functional operations map filter and fold it has set theoretic operations such as product Union and",
    "start": "1150600",
    "end": "1156480"
  },
  {
    "text": "intersection and finally all these operations are lifted to operate over the metadata so you don't specifically focus and program with the",
    "start": "1156480",
    "end": "1163039"
  },
  {
    "text": "metadata so uh we'll look at an example of a map so holy God that got caught off at the top uh God damn it um but like so",
    "start": "1163039",
    "end": "1171760"
  },
  {
    "text": "I mean the idea here is that you know we have a function application here this this isn't even what a real like",
    "start": "1171760",
    "end": "1177440"
  },
  {
    "text": "distribution look like of this would look like because you have all these failures that happen in here that Kyle talked about like this evil Cloud that's",
    "start": "1177440",
    "end": "1182840"
  },
  {
    "text": "in the Middle where all these lines go all over the place so uh we have this function application and we have this",
    "start": "1182840",
    "end": "1188600"
  },
  {
    "text": "function application that's replicated and they all observe these changes at all different times but this merge property and carrying this metadata",
    "start": "1188600",
    "end": "1194400"
  },
  {
    "text": "through ultimately allows us to have a program that has this metadata that allows us to reason about the order that",
    "start": "1194400",
    "end": "1200559"
  },
  {
    "text": "things happened where objects are how far they behind and kind of get this wonderful composed crdt system so um",
    "start": "1200559",
    "end": "1209120"
  },
  {
    "text": "what does the architecture of this language look like so uh it relies on",
    "start": "1209120",
    "end": "1214440"
  },
  {
    "text": "realizing the system is a bunch of variables in this kind of shared data store that they mutate and uh you'd say",
    "start": "1214440",
    "end": "1219799"
  },
  {
    "text": "that like each node kind of has some subset of those variables um we integrate with level DB",
    "start": "1219799",
    "end": "1225799"
  },
  {
    "text": "bit cask and ETS uh level DB is obviously the most optimized storage engine we can use to persist things and",
    "start": "1225799",
    "end": "1230919"
  },
  {
    "text": "have the language actually run pretty well um ETS is specifically used so we can quick check the implementation so we",
    "start": "1230919",
    "end": "1237080"
  },
  {
    "text": "can Pro we can actually randomly generate lates and then kind of make sure that everything happens correctly",
    "start": "1237080",
    "end": "1243200"
  },
  {
    "text": "things go to the correct value and we do this using uh the quick Tech uh statem uh extensions which are provided in the",
    "start": "1243200",
    "end": "1249440"
  },
  {
    "text": "erlang version of eqc um we use the crdts that were built by Russell Brown and Sean cribs in the",
    "start": "1249440",
    "end": "1255840"
  },
  {
    "text": "react DT open source Library um react DT provides a purely functional uh earling",
    "start": "1255840",
    "end": "1261039"
  },
  {
    "text": "implementation of all those crdts I talked about before um there's a bunch of new implementations just last night",
    "start": "1261039",
    "end": "1266320"
  },
  {
    "text": "David Greenberg at two Sigma released a closure version of the optimized or set in a open source Library which is really",
    "start": "1266320",
    "end": "1271840"
  },
  {
    "text": "fantastic and he tested it very heavily with I believe he used test. check which was written by a colleague of a former",
    "start": "1271840",
    "end": "1277200"
  },
  {
    "text": "colleague of mine which is similar to Quick Check um we have centralized semantics",
    "start": "1277200",
    "end": "1282640"
  },
  {
    "text": "so we can run on a single node and we can kind of have uh the system execute on a single node over a single copy of a",
    "start": "1282640",
    "end": "1288000"
  },
  {
    "text": "crdt for testing and kind of simulating dist different distribution models we have a distributed kind of semantics as",
    "start": "1288000",
    "end": "1294440"
  },
  {
    "text": "well that realize crdts as a single one and we have some proofs around how we guarantee anti-entropy and progress of",
    "start": "1294440",
    "end": "1299760"
  },
  {
    "text": "the system we have an entire paper about this so if you're curious about how all this works I'd be happy to talk in more",
    "start": "1299760",
    "end": "1305279"
  },
  {
    "text": "depth about it um in the react core implementation of this uh crdts are",
    "start": "1305279",
    "end": "1310880"
  },
  {
    "text": "distributed over a consistent hash like using consistent hashing with hash space partitioning uh we use majority quorums",
    "start": "1310880",
    "end": "1318360"
  },
  {
    "text": "uh to ensure fa tolerance and high availability and uh in the event of failures in the network we have an anti-entropy protocol that can repair",
    "start": "1318360",
    "end": "1325159"
  },
  {
    "text": "things so this is all part of just making sure the guarantees of the system are held and finally we have a hybrid",
    "start": "1325159",
    "end": "1330880"
  },
  {
    "text": "model um that we're using to explore some of these different Internet of Things applications and mobile applications that allow us to do",
    "start": "1330880",
    "end": "1336760"
  },
  {
    "text": "arbitrary distribution so in the next part of the talk I'm going to show some code and then I'm going to kind of talk about uh",
    "start": "1336760",
    "end": "1343120"
  },
  {
    "text": "three example kind of applications and then we'll kind of talk about related work and where we're going with the research so the syntax is kind of",
    "start": "1343120",
    "end": "1349559"
  },
  {
    "text": "familiar so this is earling if it looks like you know if you're an lling programmer this should be pretty familiar um earling doesn't really have",
    "start": "1349559",
    "end": "1355440"
  },
  {
    "text": "a type system so given that uh we have to declare things with types uh you have to know if you're using an observe move",
    "start": "1355440",
    "end": "1361400"
  },
  {
    "text": "set or a g set and we provide semantics to map between these things so you can map an observer move set into a g set and things like that",
    "start": "1361400",
    "end": "1368400"
  },
  {
    "text": "um we have this update here so here we're creating a Observer move set I'm calling it S1 then we're going to",
    "start": "1368400",
    "end": "1374279"
  },
  {
    "text": "basically add elements 1 2 and three to S1 this a here at the end is the actor so this is a unique actor every",
    "start": "1374279",
    "end": "1380279"
  },
  {
    "text": "participant in the system has to identify Itself by a unique actor if we want to ensure that we want to capture",
    "start": "1380279",
    "end": "1385720"
  },
  {
    "text": "the um capture all the concurrency and if you're interested in that you can read the Sharon bust uh result which",
    "start": "1385720",
    "end": "1391760"
  },
  {
    "text": "kind of talks about that in detail in some very heavy math and then finally here we create a second set of the same",
    "start": "1391760",
    "end": "1397240"
  },
  {
    "text": "type and we map between them using this function and you know this is just the Prototype",
    "start": "1397240",
    "end": "1403200"
  },
  {
    "text": "syntax uh our single you know we have a entire uh kind of extension that removes",
    "start": "1403200",
    "end": "1408520"
  },
  {
    "text": "distribution from the picture completely so we can kind of test things and uh explore different distribution models and you can see it's basically the same",
    "start": "1408520",
    "end": "1414679"
  },
  {
    "text": "you just have to supply a level DB instance or something like that um to know how to persist the data",
    "start": "1414679",
    "end": "1420480"
  },
  {
    "text": "structures so we're going to talk about the ad counter so the ad counter is the first example that we were uh building for roio entertainment so this ad",
    "start": "1420480",
    "end": "1427600"
  },
  {
    "text": "counter is basically a counter for advertisement Impressions um we want to push the advertisements to the client we",
    "start": "1427600",
    "end": "1434520"
  },
  {
    "text": "want to have the system disable advertisements at a minimum of 50,000 impressions uh so roio is okay with",
    "start": "1434520",
    "end": "1440000"
  },
  {
    "text": "displaying an ad more but they have to guarantee under contractual obligation that they have to display a minimum number of ads doesn't cost it doesn't",
    "start": "1440000",
    "end": "1446400"
  },
  {
    "text": "really cost them anymore any money to display more and finally we want clients to be able to display these ads while they're",
    "start": "1446400",
    "end": "1452120"
  },
  {
    "text": "offline so to look at the information flow we have a graph that looks like this which is really small so we're going to zoom in um so in this part of",
    "start": "1452120",
    "end": "1459960"
  },
  {
    "text": "the graph here we're going to just kind of like take two so we're going to have some roio counters and some Riot games counters these are ads these represent",
    "start": "1459960",
    "end": "1466320"
  },
  {
    "text": "ads we're going to kind of put them in a group so we're going to add them into a set so we have a set of ads we Union",
    "start": "1466320",
    "end": "1471600"
  },
  {
    "text": "these ads together and then we can kind of compute this product with contract so contracts are just kind of uh you know",
    "start": "1471600",
    "end": "1478000"
  },
  {
    "text": "to make the example a little bit more complicated contracts basically say that you know an ad is displayable so we compute the cartisian product across ads",
    "start": "1478000",
    "end": "1484720"
  },
  {
    "text": "and contracts to get this ads contracts and then we filter basically on ads with contracts so this is equivalent to a SQL",
    "start": "1484720",
    "end": "1490559"
  },
  {
    "text": "join here the product and filter combination and then finally we push all these counters to the client so the",
    "start": "1490559",
    "end": "1496000"
  },
  {
    "text": "client actually each of these mobile clients has all the counters or some subset of the counters and the mobile",
    "start": "1496000",
    "end": "1503000"
  },
  {
    "text": "client will increment those counters as advertisements are displayed and they use unique identifier so they properly",
    "start": "1503000",
    "end": "1508159"
  },
  {
    "text": "capture the concurrency in the system finally uh periodically they'll send their advertisements back to the uh",
    "start": "1508159",
    "end": "1514679"
  },
  {
    "text": "to the main data center let's say and then we just have a process that Waits until that advertisement counter is",
    "start": "1514679",
    "end": "1520000"
  },
  {
    "text": "above 50,000 it disables the ads ropes through the graph and the next time the client comes online it gets the it gets",
    "start": "1520000",
    "end": "1526559"
  },
  {
    "text": "the change so the information flow in this graph is completely monotonic everything just the state is always",
    "start": "1526559",
    "end": "1532120"
  },
  {
    "text": "growing we have the cycle in the graph that kind of pushes data back through uh we enforce uh you know this infinite",
    "start": "1532120",
    "end": "1538559"
  },
  {
    "text": "process of sending data through the graph through this metadata so through this monotonic read operation that prevents us from reading an object if",
    "start": "1538559",
    "end": "1544760"
  },
  {
    "text": "it's from the past because as Kyle said in his schemo you have this interesting thing in a distributed system where you might write an object one and then write",
    "start": "1544760",
    "end": "1551120"
  },
  {
    "text": "it two and then read it and it's one again right so we have to have a primitive in the language that enforces that we always read into the future",
    "start": "1551120",
    "end": "1557880"
  },
  {
    "text": "because and we do this using uh causal context so we effectively use like version vectors and dotted version",
    "start": "1557880",
    "end": "1563080"
  },
  {
    "text": "vectors and those kind of logical time techniques to prevent us from reading an earlier value in the system because",
    "start": "1563080",
    "end": "1568960"
  },
  {
    "text": "failures will inevitably happen um we're going to look at the code not because I want you to read the",
    "start": "1568960",
    "end": "1574840"
  },
  {
    "text": "syntax and all the comments I wrote Because I want you to see the size of the code so in this example we have this",
    "start": "1574840",
    "end": "1580600"
  },
  {
    "text": "alignment of the slide is really irritating but uh in this example we have a client that kind of just uh you",
    "start": "1580600",
    "end": "1585720"
  },
  {
    "text": "know displays ads when it receives a message to display them we have a server that just basically this is a five it should be a 50,000 sorry uh it reads and",
    "start": "1585720",
    "end": "1593279"
  },
  {
    "text": "it basically blocks until the counter gets to that point so this is the use of the monotonic read operation and then we have the rest of",
    "start": "1593279",
    "end": "1599600"
  },
  {
    "text": "the code so this section is responsible for just creating the ads so we create ads and then we put them in sets Those",
    "start": "1599600",
    "end": "1604960"
  },
  {
    "text": "ads have unique identifiers uh we compute the product and filter basically just kind of two",
    "start": "1604960",
    "end": "1610120"
  },
  {
    "text": "very simple functions we initialize a bunch of clients and we initialize a bunch of servers and all of this code is",
    "start": "1610120",
    "end": "1615320"
  },
  {
    "text": "in our repo you can run it and just make tests and it will just just run the whole thing for you and you can play around with",
    "start": "1615320",
    "end": "1621000"
  },
  {
    "text": "it um so so traditionally when we think about distribution we would look at this",
    "start": "1621000",
    "end": "1626200"
  },
  {
    "text": "graph and we would say well how do I distribute this on a network Well normally you'd do this right you would say okay this is the clients this is the",
    "start": "1626200",
    "end": "1632919"
  },
  {
    "text": "server I'll run this in a data center I'll run this on the client right but there's nothing that says that",
    "start": "1632919",
    "end": "1638960"
  },
  {
    "text": "the distribution needs to be that rigid in our model we could do this or we could do this and the benefit we have",
    "start": "1638960",
    "end": "1645320"
  },
  {
    "text": "here is that the system itself is fully composable um all of these boundaries here these communication lines are",
    "start": "1645320",
    "end": "1650760"
  },
  {
    "text": "enforced using crdts with those monotonic read properties with that causality information so we can guarantee that we can kind of say well",
    "start": "1650760",
    "end": "1657679"
  },
  {
    "text": "what I'm really going to do is I'm going to run this in Amazon's Virginia Data Center and then I'm going to run this component like maybe close to the edge",
    "start": "1657679",
    "end": "1663240"
  },
  {
    "text": "so I run this at a point of presence maybe in San Francisco and in Dublin then maybe I run one of these in each of",
    "start": "1663240",
    "end": "1668320"
  },
  {
    "text": "the EU member states right so I run one in in uh Belgium I'll run one in France",
    "start": "1668320",
    "end": "1673360"
  },
  {
    "text": "and maybe I'll run one in Portugal and then finally we say well these are where the clients run so our really aim to",
    "start": "1673360",
    "end": "1678399"
  },
  {
    "text": "build a system that allows for this arbitrary kind of distribution of the language as well and by having these",
    "start": "1678399",
    "end": "1683640"
  },
  {
    "text": "rich data structures that allow us to realize how things change in the network and understand when data is stale and when data is up to date um we get this",
    "start": "1683640",
    "end": "1691080"
  },
  {
    "text": "arbitrary composition so this is a property that's nice and this is a property that we've just beg so we have the Prototype of the language semantics",
    "start": "1691080",
    "end": "1696600"
  },
  {
    "text": "which is a subject of the first paper that uh we working that's under submission and then uh the distribution",
    "start": "1696600",
    "end": "1702159"
  },
  {
    "text": "boundaries is kind of the focus of uh of our next work um so the second application is thinking about",
    "start": "1702159",
    "end": "1708200"
  },
  {
    "text": "materialized views so I really like the idea of materialized views I want materialized views and react but materialized views in eventually",
    "start": "1708200",
    "end": "1713360"
  },
  {
    "text": "consistent system are hard um because you have stale replicas and how do you distribute the programs and God usually",
    "start": "1713360",
    "end": "1719840"
  },
  {
    "text": "everybody just uses JavaScript map reduced and I have to debug some like crazy JavaScript VM thing and some",
    "start": "1719840",
    "end": "1725919"
  },
  {
    "text": "ancient version of spider monkey so I really don't want that stuff um so I want materialized views so how can we",
    "start": "1725919",
    "end": "1732279"
  },
  {
    "text": "you know how many people here know what materialized views are all right a fair amount right so an inverted index in",
    "start": "1732279",
    "end": "1737600"
  },
  {
    "text": "solar a materialized view um you know in SQL you have materialized views you use all the time um as Neil Conway said to",
    "start": "1737600",
    "end": "1745799"
  },
  {
    "text": "me once you know all great problem that every great problem in computer science is just materialized view maintenance and I think that's a really good quote I",
    "start": "1745799",
    "end": "1752559"
  },
  {
    "text": "don't know if he originally said it but he's the one who said it to me so I'll attribute to him and he might hate me for it but whatever so I mean",
    "start": "1752559",
    "end": "1759279"
  },
  {
    "text": "materialized views the goal here is to have incrementally updating we want to propagate only Deltas um you know the",
    "start": "1759279",
    "end": "1766120"
  },
  {
    "text": "schema based on you know the schema is kind of atic in react but we're going to try to build something that's similar to like the 2i mechanism in react and this",
    "start": "1766120",
    "end": "1772360"
  },
  {
    "text": "model could be generalized to something like Voldemort Cassandra or any of these dyn style systems so what do we want to",
    "start": "1772360",
    "end": "1778360"
  },
  {
    "text": "do so we want to think about the database as a stream of updates so react is a logical unit here represented by this one Circle and we have a stream of",
    "start": "1778360",
    "end": "1784440"
  },
  {
    "text": "updates come in so this is update to key 1 two three and then update to key 1 and two but the way these systems usually",
    "start": "1784440",
    "end": "1790880"
  },
  {
    "text": "distribute data um it logically not not always in the implementation as as we",
    "start": "1790880",
    "end": "1796080"
  },
  {
    "text": "learn but uh is that you have these disjoint replica sets so you have disjoint replica sets and they don't have overlapping data and then these",
    "start": "1796080",
    "end": "1804200"
  },
  {
    "text": "updates kind of go here so for Simplicity the diagram we're going to assume the updates to K1 go to replica set one K2 to two and so forth and then",
    "start": "1804200",
    "end": "1811320"
  },
  {
    "text": "within each replica set like in react today you have full replication between the nodes so we have three nodes and all",
    "start": "1811320",
    "end": "1817080"
  },
  {
    "text": "these three nodes are effectively equivalent so what do we think here so there's an interesting analogy here that",
    "start": "1817080",
    "end": "1822880"
  },
  {
    "text": "you can to the crdt world is that you know we have these things called uh computational crdt which is being worked",
    "start": "1822880",
    "end": "1828880"
  },
  {
    "text": "on by a group at Nova and they say well you can have a crdt that only observes part of the updat that's a really good",
    "start": "1828880",
    "end": "1834720"
  },
  {
    "text": "kind of analogy to how this is right it's very similar to say well a computational crdt that only observes",
    "start": "1834720",
    "end": "1839919"
  },
  {
    "text": "some subset of the updates is similar to replica sets right so if we think of react the database is just a huge map of",
    "start": "1839919",
    "end": "1846080"
  },
  {
    "text": "crdts it's just a dictionary then we can say well you know okay that's fine then this is related to computational crdts",
    "start": "1846080",
    "end": "1853320"
  },
  {
    "text": "and then inside of here we can think that every Noe is essentially a crdt because the crdt property says that all",
    "start": "1853320",
    "end": "1859279"
  },
  {
    "text": "copies observe all updates eventually so we have this strong convergence property in here so when we think about",
    "start": "1859279",
    "end": "1865519"
  },
  {
    "text": "materialized views we can think of well react is essentially a database that gets a bunch of updates and stores them in a log and when you read an object",
    "start": "1865519",
    "end": "1871519"
  },
  {
    "text": "that's effectively materializing an object from the log right so you take all the updates in the log that are sent blindly we merge all of them and then we",
    "start": "1871519",
    "end": "1877519"
  },
  {
    "text": "give you the object and that's effectively materializing that object right so what we want to do is we want",
    "start": "1877519",
    "end": "1882679"
  },
  {
    "text": "to have a way where we can kind of use a last program to Define how to derive some other data item from another data",
    "start": "1882679",
    "end": "1888440"
  },
  {
    "text": "item in the system which is effectively materialized view maintenance so in this example trolled again but in this",
    "start": "1888440",
    "end": "1895440"
  },
  {
    "text": "example we have this stream processor template so imagine we have a template for kind of how to read data out of react and write data to react well what",
    "start": "1895440",
    "end": "1902039"
  },
  {
    "text": "we could do is we can build a last program that says okay I can just take all those updates I have the strong convergence property I can take all these updates and I can build a list of",
    "start": "1902039",
    "end": "1908919"
  },
  {
    "text": "all the objects in the system and what I can do is I can you know if these we're going to assume that these are like map",
    "start": "1908919",
    "end": "1914200"
  },
  {
    "text": "kind of data structures for the Simplicity of the diagram we can see well what we can do we also can build",
    "start": "1914200",
    "end": "1919600"
  },
  {
    "text": "from this object so we can compose these as we're thinking about the last programs we can build one that says well",
    "start": "1919600",
    "end": "1924880"
  },
  {
    "text": "I can collect all the people who are over 65 and then I can collect all the people over 80 and I can incrementally",
    "start": "1924880",
    "end": "1930320"
  },
  {
    "text": "update the 80 set from the 65 set and I can distribute this view I can have multiple copies of this View and I can",
    "start": "1930320",
    "end": "1936080"
  },
  {
    "text": "guarantee that I can merge these I have recency guarantees I have fault tolerance guarantees then we also can",
    "start": "1936080",
    "end": "1941679"
  },
  {
    "text": "build this one of the people named Chris like me and that's the one we'll talk about um so how do we distribute this so",
    "start": "1941679",
    "end": "1948320"
  },
  {
    "text": "what we can do is we can take this person named Chris program which reads these values out of the trdt so we think",
    "start": "1948320",
    "end": "1953679"
  },
  {
    "text": "Rea is just a big collection of objects and we map that set into the set of objects that are named Chris so we cut",
    "start": "1953679",
    "end": "1960080"
  },
  {
    "text": "this up and we have this uh we we basically do some clever program rewriting to create a bunch of mini little programs and we put them at the",
    "start": "1960080",
    "end": "1967120"
  },
  {
    "text": "nodes and so this is kind of similar to a map produce model right if I have map produce then I could say well I have you",
    "start": "1967120",
    "end": "1973000"
  },
  {
    "text": "know I'll run the maps at all the nodes to collect all the people named Chris and then I can join them all and ruce them and get get the full list of people",
    "start": "1973000",
    "end": "1979279"
  },
  {
    "text": "named chis so we have again this property that says well given the nodes within a replica set all observe the",
    "start": "1979279",
    "end": "1985679"
  },
  {
    "text": "same updates eventually we don't guarantee the order we don't guarantee the batching we don't guarantee rep duplication since all the objects in the",
    "start": "1985679",
    "end": "1992120"
  },
  {
    "text": "system on the Node will receive that if I actually put those programs at the nodes as well those programs will effectively have the same result so I",
    "start": "1992120",
    "end": "1998399"
  },
  {
    "text": "don't have to worry about multiple copies of the same index getting out of sync because I know they'll eventually converge to the right thing and I can",
    "start": "1998399",
    "end": "2004080"
  },
  {
    "text": "incrementally update them and then what I just need to do is I just need to sum across the replica sets and we do some",
    "start": "2004080",
    "end": "2009559"
  },
  {
    "text": "of this stuff today and reacts key listing and two I mechanisms I just sum and this sum is not like addition this is like commutative sum so then when I",
    "start": "2009559",
    "end": "2016919"
  },
  {
    "text": "execute the program I just collect the results here and I just kind of merge them I I merge them yeah K yeah you know",
    "start": "2016919",
    "end": "2023600"
  },
  {
    "text": "I said that very poorly but you know what I meant but I was trying to distinguish it from like adding you know but like I'm meaning like a generalized",
    "start": "2023600",
    "end": "2030200"
  },
  {
    "text": "like but yes we'll talk later but so then I merg them so this effectively this coordinator here is effectively uh",
    "start": "2030200",
    "end": "2037080"
  },
  {
    "text": "A reduced function if you think of like a map reduce style um uh kind of reducer",
    "start": "2037080",
    "end": "2043600"
  },
  {
    "text": "right so it collects these results so these are kept up to date and then I basically build the object here so um",
    "start": "2043600",
    "end": "2050919"
  },
  {
    "text": "what we also can do with this model um is that we can cach these results at the coordinator so we can cach the results",
    "start": "2050919",
    "end": "2056720"
  },
  {
    "text": "of the executions here and we can we can disseminate these through gossip as well um and then what we can do is when we",
    "start": "2056720",
    "end": "2063320"
  },
  {
    "text": "execute a query we can do a Time bounded query where we say I it's okay if data is a little bit stale but I want to",
    "start": "2063320",
    "end": "2068919"
  },
  {
    "text": "ensure that the query executes within a bound a certain time bound uh a certain latency bound and then I can take any",
    "start": "2068919",
    "end": "2074878"
  },
  {
    "text": "object that I received and merge that with the cach copy and guarantee that that will converge correctly as well",
    "start": "2074879",
    "end": "2080280"
  },
  {
    "text": "because the cach copy just looks like a previous version of the crdt an older version of the crdt so we can do some",
    "start": "2080280",
    "end": "2086079"
  },
  {
    "text": "aggressive caching there which is nice because um again in some of these mechanisms today so if you look at um if",
    "start": "2086079",
    "end": "2092638"
  },
  {
    "text": "you look at some of the problems that things like uh you know elastic search have with the Lucine indexing um",
    "start": "2092639",
    "end": "2097720"
  },
  {
    "text": "mechanism is that those indexes assume that data is fully disjoint and if you happen to contact two nodes that for some reason have the same data item and",
    "start": "2097720",
    "end": "2104520"
  },
  {
    "text": "you're Computing you know you'll get two copies back and they'll be different the index will show that had two hits on two",
    "start": "2104520",
    "end": "2109560"
  },
  {
    "text": "different objects and it won't know one could just be a delayed copy that you don't want to see and then this obviously gets much worse if you compute",
    "start": "2109560",
    "end": "2115640"
  },
  {
    "text": "like a cartisian product in the result of the solar query as well because you'll see that explode so it's very important in those models that when you",
    "start": "2115640",
    "end": "2121720"
  },
  {
    "text": "execute that search query like uh in like the in distributed solar and in solar Cloud as well uh you'll see you'll",
    "start": "2121720",
    "end": "2128320"
  },
  {
    "text": "kind of see the results get kind of finicky so we have some other work that we added logical clocks to some of the the solar indexing stuff and we we kind",
    "start": "2128320",
    "end": "2135000"
  },
  {
    "text": "of show how you can apply the same techniques that exist in crdts today to these uh to some of these um distributed",
    "start": "2135000",
    "end": "2142079"
  },
  {
    "text": "search engines as well so um so if we if we think about internet of things um and",
    "start": "2142079",
    "end": "2149000"
  },
  {
    "text": "we look at this model that we had before uh this is the react model where we say okay the updates come in they logically",
    "start": "2149000",
    "end": "2154960"
  },
  {
    "text": "are kind of applied at these replica sets and then they kind of go to these nodes so how does this model kind of",
    "start": "2154960",
    "end": "2160280"
  },
  {
    "text": "apply to the Internet of Things model so if we kind of change the information",
    "start": "2160280",
    "end": "2165400"
  },
  {
    "text": "flow here um and you think that well these are sensors and these sensors are generating updates and eventually those",
    "start": "2165400",
    "end": "2171599"
  },
  {
    "text": "updates are aggregated upstream and we want to execute so the program is no longer finding people named Chris",
    "start": "2171599",
    "end": "2177400"
  },
  {
    "text": "because that's a really poor application of The Internet of Things sensor network but you know a more realistic",
    "start": "2177400",
    "end": "2182440"
  },
  {
    "text": "application would be if I have a bunch of temperatures and I want to alarm if any of the temperatures happen to be over 90° which is very common use case",
    "start": "2182440",
    "end": "2189480"
  },
  {
    "text": "for The Internet of Things stuff we can kind of apply the same model here we can kind of push these applications that we",
    "start": "2189480",
    "end": "2194599"
  },
  {
    "text": "derive from a single application to the edge and then we can have these Edge applications execute this program and we",
    "start": "2194599",
    "end": "2201720"
  },
  {
    "text": "can determine the sensors that are over and realistically in these models you kind of eliminate this uh aggregation",
    "start": "2201720",
    "end": "2207480"
  },
  {
    "text": "Upstream so um a a lot of the internet of things kind of applications we're looking at that that exist today kind of",
    "start": "2207480",
    "end": "2213880"
  },
  {
    "text": "aggregate all of their data upstream or try to aggregate all of their data Upstream uh there's been a bunch of work on uh looking at the problem of the",
    "start": "2213880",
    "end": "2221400"
  },
  {
    "text": "industrial Internet of Things uh model where you know you're aggregating data from your sensors into some htfs thing",
    "start": "2221400",
    "end": "2227560"
  },
  {
    "text": "in your centralized DC but now the problem that you have is your sensors also generate data like analytics data",
    "start": "2227560",
    "end": "2233000"
  },
  {
    "text": "on the sensors so like sensors might be failing as well so you kind of have the problem that you also need to do sensor",
    "start": "2233000",
    "end": "2239480"
  },
  {
    "text": "kind of network stuff on top of the sensors that you have deployed and a lot of the kind of work that is happening it",
    "start": "2239480",
    "end": "2245000"
  },
  {
    "text": "was just a paper a few weeks ago kind of talks about about well I can aggregate all of this stuff Upstream it's impractical to aggregate all of this",
    "start": "2245000",
    "end": "2251400"
  },
  {
    "text": "back to a centralized data center so we need to push computation to the edge so there are some interesting applications",
    "start": "2251400",
    "end": "2256440"
  },
  {
    "text": "of RX and uh corbas style IDL which is really crazy but I don't know why",
    "start": "2256440",
    "end": "2262760"
  },
  {
    "text": "somebody would use that today but um you know so so people are looking at this",
    "start": "2262760",
    "end": "2267920"
  },
  {
    "text": "problem as well so if you saw Ben Christian and talk yesterday I think he talked about some of that RX stuff as well so again um what are we trying to",
    "start": "2267920",
    "end": "2275000"
  },
  {
    "text": "do so we're trying to execute uh computation at the edge uh we're trying to have it so you write these programs",
    "start": "2275000",
    "end": "2281280"
  },
  {
    "text": "you think about all of your data and then we trying to do this transparent uh distribution and we're trying to use",
    "start": "2281280",
    "end": "2286760"
  },
  {
    "text": "trdt so that we can kind of replicate things to make it fault tolerant and have kind of these nice ordering properties that allow us to know if",
    "start": "2286760",
    "end": "2293119"
  },
  {
    "text": "we've seen objects in the system or not and kind of Reason about stuff that way so um we'll kind of just briefly look at",
    "start": "2293119",
    "end": "2300560"
  },
  {
    "text": "some of the other systems that exist today for doing some of this stuff so um most of the work that we've done is",
    "start": "2300560",
    "end": "2306319"
  },
  {
    "text": "based on distributed odd um so distributed Oz is a distributed uh semantics for the Oz programming",
    "start": "2306319",
    "end": "2312960"
  },
  {
    "text": "language for its uh deterministic data flow programming model um again this model focuses on immutable data it",
    "start": "2312960",
    "end": "2319119"
  },
  {
    "text": "focuses on single assignment variables um so kind of the same programming Paradigm applies but you kind of have to",
    "start": "2319119",
    "end": "2324599"
  },
  {
    "text": "change things when you're dealing with mutable data um as crdts are um our our",
    "start": "2324599",
    "end": "2330200"
  },
  {
    "text": "earlier work that we've kind of talked about before and I I talked about this last year um at Recon is that we kind of",
    "start": "2330200",
    "end": "2336440"
  },
  {
    "text": "have a deterministic flow model that operated over lates uh but wasn't as rich as the model that I just talked",
    "start": "2336440",
    "end": "2342160"
  },
  {
    "text": "about today um uh Bloom L A lot of people are like well this is very similar to bloom",
    "start": "2342160",
    "end": "2348319"
  },
  {
    "text": "so it is similar to bloom um some of the fundamental Pro some of the fundamental differences are is that bloom functions",
    "start": "2348319",
    "end": "2353920"
  },
  {
    "text": "effectively seal uh at a given time so if I have a lattice so their lates also don't support removal kind of without",
    "start": "2353920",
    "end": "2360079"
  },
  {
    "text": "coordination uh so I can't use something as rich as an observe remove set in the blue model as it exists today um",
    "start": "2360079",
    "end": "2367440"
  },
  {
    "text": "additionally uh since since these things are sets that always grow uh if you have a function that's applied to that set",
    "start": "2367440",
    "end": "2372880"
  },
  {
    "text": "effectively like a function might compute like a Boolean over set if the cardinality is greater than 10 or",
    "start": "2372880",
    "end": "2378040"
  },
  {
    "text": "something once that trigger is met it the the function effectively seals it no longer distributes it to the graph and",
    "start": "2378040",
    "end": "2383880"
  },
  {
    "text": "when you read that value it's just always that um so uh that's you know so",
    "start": "2383880",
    "end": "2389280"
  },
  {
    "text": "obviously that ceiling property and the idea that you can't use things that you remove um we kind of remove that",
    "start": "2389280",
    "end": "2394560"
  },
  {
    "text": "restriction on our model so that's kind of a an extension of that work again um the bloom stuff is kind of a logic",
    "start": "2394560",
    "end": "2400880"
  },
  {
    "text": "programming uh approach uh declarative like kind of logic programming approach and ours is trying to be a more functional approach so we're trying to",
    "start": "2400880",
    "end": "2406760"
  },
  {
    "text": "make it very similar to functional languages um the alvar's work is very similar the alvar's work focuses on a",
    "start": "2406760",
    "end": "2413240"
  },
  {
    "text": "det on deterministic concurrency on a single node so the elvar does not think about distribution um another criticism",
    "start": "2413240",
    "end": "2419920"
  },
  {
    "text": "of the elvar work is that uh you have to have like kind of a prior knowledge of how your data structure is going to change so you always well that the",
    "start": "2419920",
    "end": "2426359"
  },
  {
    "text": "threshold read primitive always needs to know the state and that's problematic when you use an O set because the O set",
    "start": "2426359",
    "end": "2431680"
  },
  {
    "text": "generates unique identifiers node local these unique identifiers at the nodes that are performing the update and given",
    "start": "2431680",
    "end": "2437680"
  },
  {
    "text": "that you can't threshold on something like an O set without knowing what those unique identifiers will be uh and if you",
    "start": "2437680",
    "end": "2442920"
  },
  {
    "text": "threshold on the value you have to freeze um so there's some similar work and Lindsay has another paper called joining forces that kind of tries to",
    "start": "2442920",
    "end": "2448800"
  },
  {
    "text": "bridge these two models and we kind of extend that work as well so if you're interested in that and this is a hasal library so you can play around with that",
    "start": "2448800",
    "end": "2455680"
  },
  {
    "text": "uh similar uh the dams work kind of focuses on doing kind of having computations that track lineage um",
    "start": "2455680",
    "end": "2463560"
  },
  {
    "text": "there's some interesting ideas if you know the data is kind of if you don't have this property where data is",
    "start": "2463560",
    "end": "2468720"
  },
  {
    "text": "immutable and you're going to kind of store that data in htfs and you can rerun these computations or or fix",
    "start": "2468720",
    "end": "2473839"
  },
  {
    "text": "things that are failing uh the lineage information is kind of not enough if you have mutable data or if you have data at",
    "start": "2473839",
    "end": "2479119"
  },
  {
    "text": "the edge so um we're trying to kind of say that the lineage work is not enough you kind of need this causal history",
    "start": "2479119",
    "end": "2485400"
  },
  {
    "text": "information to to do some of this stuff correct irly and finally uh summing bird is a very similar model this is a this",
    "start": "2485400",
    "end": "2491040"
  },
  {
    "text": "is an analytics platform that Twitter developed and wrote a paper about uh summing Bird's a similar model um",
    "start": "2491040",
    "end": "2496440"
  },
  {
    "text": "summing bird uses uh uh commutative uh semi-groups um we use crdts commutative",
    "start": "2496440",
    "end": "2503280"
  },
  {
    "text": "empit and semi- groups so it's kind of a uh slightly modified model but it has a a ton of similarities so this is an",
    "start": "2503280",
    "end": "2509319"
  },
  {
    "text": "interesting paper if you're curious on Building Systems like that so uh to wrap up I'm just going to kind of talk about",
    "start": "2509319",
    "end": "2515560"
  },
  {
    "text": "where we're going with the work um so the the first one is invariant Preservation so if we go back to that ad counter example and we think about how I",
    "start": "2515560",
    "end": "2522040"
  },
  {
    "text": "gave Those ads out to the clients and the clients eventually talked back to the server and then the server would disable the ad then the next time the",
    "start": "2522040",
    "end": "2528079"
  },
  {
    "text": "client read that's great but that only allows us to enforce a lower bound a minimum of the number of advertisements",
    "start": "2528079",
    "end": "2534319"
  },
  {
    "text": "that we want to display so what happens if we want to enforce an upper bound um so some of the work that uh volter and",
    "start": "2534319",
    "end": "2541280"
  },
  {
    "text": "uh Nuno group have done at um at Nova focus on using like escro techniques",
    "start": "2541280",
    "end": "2546400"
  },
  {
    "text": "where uh the CS that we send to the client uh have an upper bound the client can only increment that counter a bunch",
    "start": "2546400",
    "end": "2551920"
  },
  {
    "text": "of times before it has to stop um the trade-off there is that if you exhaust",
    "start": "2551920",
    "end": "2557119"
  },
  {
    "text": "all those Impressions before you come back online what do you do right so that it's interesting to think about well can we have this kind of hybrid model where",
    "start": "2557119",
    "end": "2563319"
  },
  {
    "text": "some of those counters are capped because of some restriction that the client places where some of those might not be so this is an interesting model",
    "start": "2563319",
    "end": "2569880"
  },
  {
    "text": "and they have a variant of crdts that allow for this escrow kind of thing so it tracks where the leases are going and",
    "start": "2569880",
    "end": "2575559"
  },
  {
    "text": "it does it in a fully convergent uh synchronization free way which is different than the original escro and demarcation work if you're familiar with",
    "start": "2575559",
    "end": "2582000"
  },
  {
    "text": "that um we're looking at causal plus consistency so this a big thing as part of the research group at um at the sync",
    "start": "2582000",
    "end": "2588480"
  },
  {
    "text": "fre research group is exploring caal plus consistency um caal plus consistency extends the causal",
    "start": "2588480",
    "end": "2594160"
  },
  {
    "text": "consistency model to mergeable transactions so you effectively have transactions that never ever roll back",
    "start": "2594160",
    "end": "2599200"
  },
  {
    "text": "uh if you're operating over crdts you always can just continue moving forward um this kind of extends like the Iger",
    "start": "2599200",
    "end": "2604440"
  },
  {
    "text": "gentle reain and that that series of um transaction uh work that's happened um",
    "start": "2604440",
    "end": "2609800"
  },
  {
    "text": "and we have a research database that we're working on called antidote uh which is the other project that I work on as part of Sy free which has um which",
    "start": "2609800",
    "end": "2617000"
  },
  {
    "text": "has uh example protocols for caal plus consistency so this is so uh one of Mark students um uh one of Mark students uh",
    "start": "2617000",
    "end": "2624079"
  },
  {
    "text": "did his PhD work uh on this and uh uh I believe they have a proof that shows this is the strongest this is uh I'm",
    "start": "2624079",
    "end": "2630400"
  },
  {
    "text": "sorry this is the uh strongest consistency protocol you can provide while being 100%",
    "start": "2630400",
    "end": "2635800"
  },
  {
    "text": "available um finally uh all of the stuff I showed you today use those sets that store those three tupal that track every",
    "start": "2635800",
    "end": "2642040"
  },
  {
    "text": "addition that's ever happened to the Set uh obviously that grows unbounded so that's a problem uh gee uh so uh again we know",
    "start": "2642040",
    "end": "2650680"
  },
  {
    "text": "how to solve this uh we have a data structure called the observe remove set without tombstones or the O SWAT and uh",
    "start": "2650680",
    "end": "2656720"
  },
  {
    "text": "this data structure uses version vectors it effectively uses kind of a dotted version Vector technique doav version",
    "start": "2656720",
    "end": "2662079"
  },
  {
    "text": "Vector set technique to uh store to kind of collapse this uh metadata down so you",
    "start": "2662079",
    "end": "2667680"
  },
  {
    "text": "don't have to worry about garbage collection so you only have to worry about the number of actors in your system instead of the number of operations this is really nice um we",
    "start": "2667680",
    "end": "2673920"
  },
  {
    "text": "don't have it implemented but we know how it should work so um this is just a matter of doing some engineering and",
    "start": "2673920",
    "end": "2679000"
  },
  {
    "text": "finally uh Delta State crdts and operation-based crdts are two ways of reducing the amount of data that you",
    "start": "2679000",
    "end": "2684920"
  },
  {
    "text": "have to send on the network the amount of data you have to propagate um so this is really important work um and defor station is some",
    "start": "2684920",
    "end": "2691839"
  },
  {
    "text": "interesting work as well um if you think about if we do this uh if we do this arbitr distribution uh so if you know if",
    "start": "2691839",
    "end": "2699079"
  },
  {
    "text": "you're familiar with deforestation there's a paper that Philip wther published um and it focuses on intermediate tree elimination so if you",
    "start": "2699079",
    "end": "2704760"
  },
  {
    "text": "do like a map a map a map uh the compiler can basically optimize it out so languages like hascal and closure",
    "start": "2704760",
    "end": "2710119"
  },
  {
    "text": "have I I believe closure has this but uh have have this uh have implementations of this in schola as well and uh so it's",
    "start": "2710119",
    "end": "2716720"
  },
  {
    "text": "interesting to say well how do you apply this to an arbitrary distribution model right so now if things are distributed you know things that you can't basically",
    "start": "2716720",
    "end": "2723400"
  },
  {
    "text": "do Fusion on um but uh can you have a system that deres a better distribution",
    "start": "2723400",
    "end": "2729280"
  },
  {
    "text": "model that would allow you to do less computation so this is a very interesting area that uh I've talked to some people at uh epfl about so um so",
    "start": "2729280",
    "end": "2737720"
  },
  {
    "text": "finally there's open source code you can check it out we got this paper that you could read and this one and uh there's",
    "start": "2737720",
    "end": "2743160"
  },
  {
    "text": "this conference called Recon that's pretty cool that n spoke at and I spoke at and Bash runs and you should come to it and uh if you like talking about",
    "start": "2743160",
    "end": "2749720"
  },
  {
    "text": "computer science you should submit a talk to it um so I highly recommend that and uh yeah I would be in trouble if I",
    "start": "2749720",
    "end": "2755359"
  },
  {
    "text": "didn't mention that uh This research was funded by the syn free project which is a seventh framework Pro uh seventh",
    "start": "2755359",
    "end": "2761079"
  },
  {
    "text": "framework program funded project under the EU so I thank you them very much for all of the money and everything that they've done to let us continue moving",
    "start": "2761079",
    "end": "2767839"
  },
  {
    "text": "forward so and that's all thanks [Applause]",
    "start": "2767839",
    "end": "2776940"
  }
]