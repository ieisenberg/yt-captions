[
  {
    "text": "[Music]",
    "start": "4370",
    "end": "8889"
  },
  {
    "text": "all right thanks very much this is calling functions across languages I'm Richard Feldman",
    "start": "13679",
    "end": "19080"
  },
  {
    "text": "so something that I've run into many times in my career is finding myself doing some programming and thinking you know this task that I'm doing right now",
    "start": "19080",
    "end": "25320"
  },
  {
    "text": "would be a lot easier if I could use another language like one reason might be maybe I want a library that's in a",
    "start": "25320",
    "end": "30779"
  },
  {
    "text": "different language from the one that I'm using maybe I want more performance that I can get out of the language I'm using or maybe I'm using a language that's",
    "start": "30779",
    "end": "36840"
  },
  {
    "text": "really low level and I actually want something higher level with sort of better ergonomics even at the potential cost of speed or maybe I just want to",
    "start": "36840",
    "end": "43800"
  },
  {
    "text": "transition between two languages like I want to call a function in another language just because I'm trying to transition to that one I don't want to",
    "start": "43800",
    "end": "48899"
  },
  {
    "text": "have to rewrite my whole code base all in one go so a good experience that I've had with",
    "start": "48899",
    "end": "54360"
  },
  {
    "text": "calling functions across languages uh reminds me of a time when I used to do Scala so if I was in Scala and I happen",
    "start": "54360",
    "end": "59879"
  },
  {
    "text": "to want to call a function in Java it was super easy there was Syntax for it I could just import the Java function just call it right away",
    "start": "59879",
    "end": "65640"
  },
  {
    "text": "another time that I've done some calling functions across languages is uh I used to do JavaScript code and I worked at a",
    "start": "65640",
    "end": "71640"
  },
  {
    "text": "company that had a ruby backend and so we called Ruby functions from JavaScript you know over HTTP but you know it's",
    "start": "71640",
    "end": "78299"
  },
  {
    "text": "still still calling the functions the logic was written in Ruby and we were getting the answer in JavaScript um here's another one that I've heard of",
    "start": "78299",
    "end": "84360"
  },
  {
    "text": "uh I haven't personally used but numpy the the library for doing linear algebra um among other things in Python actually",
    "start": "84360",
    "end": "91439"
  },
  {
    "text": "for its linear algebra stuff uses under the hood inside this Library Fortran which is a programming language from",
    "start": "91439",
    "end": "97799"
  },
  {
    "text": "1957 originally done on Punch Cards which I assume they're doing using sorcery I mean how is that even possible",
    "start": "97799",
    "end": "104820"
  },
  {
    "text": "to have a library that calls code from another language from half a century ago",
    "start": "104820",
    "end": "110159"
  },
  {
    "text": "in the same library but we're gonna actually get into how it does that it turns out it's actually not sorcery",
    "start": "110159",
    "end": "116460"
  },
  {
    "text": "um but of course this is sort of necessary if you want to do performance like there's no way that they're going",
    "start": "116460",
    "end": "121500"
  },
  {
    "text": "to be having numpy to say hey we want these really highly optimized linear algebra routines and the way we're going",
    "start": "121500",
    "end": "126840"
  },
  {
    "text": "to access them is uh over HTTP over the network of course that's going to be way too slow so of course they're not going to do that",
    "start": "126840",
    "end": "132780"
  },
  {
    "text": "um so what what are they doing well to get there let's start by imagining this hypothetical function called dot product",
    "start": "132780",
    "end": "138840"
  },
  {
    "text": "it's a linear algebra function don't worry about what it does I actually don't know what it does it's going to be fine um but the point is that it takes two",
    "start": "138840",
    "end": "145020"
  },
  {
    "text": "arrays of numbers and then it returns a number and what we're going to do is we're going to start by sort of with this JavaScript calling Ruby over HTTP",
    "start": "145020",
    "end": "152340"
  },
  {
    "text": "so dot products can be influenced in Ruby and javascript's going to call it over HTTP and then one at a time we're going to sort of Peel back the layers of",
    "start": "152340",
    "end": "158459"
  },
  {
    "text": "abstraction until we get all the way down to calling the function as directly as we can okay so first let's just peel back one",
    "start": "158459",
    "end": "165300"
  },
  {
    "text": "layer of abstraction and say let's start with an HTTP request and that's basically consists of two parts one is we build the HTTP request string and the",
    "start": "165300",
    "end": "172319"
  },
  {
    "text": "second is we take that string and send it to a socket and then the operating system will send it across the network so let's see what that looks like",
    "start": "172319",
    "end": "178200"
  },
  {
    "text": "so we'll start with this in JavaScript now JavaScript if you're running it in the browser doesn't actually let you go directly to sockets unless you're doing",
    "start": "178200",
    "end": "183660"
  },
  {
    "text": "websockets it's kind of a different thing so uh was we're going to use um node.js here but let's start with just looking at like what's the actual string",
    "start": "183660",
    "end": "189780"
  },
  {
    "text": "that's going to get sent to the socket so it looks something like this if you haven't seen an HTTP request it's basically a string that says get and",
    "start": "189780",
    "end": "195420"
  },
  {
    "text": "then the path that you're going to get so in this case we're going to say slash dot product so that's going to be on the Ruby server",
    "start": "195420",
    "end": "200879"
  },
  {
    "text": "um then you say host we're going to do localhost for this example because first rule of calling stuff over the network is that uh if you wanted to go fast",
    "start": "200879",
    "end": "206640"
  },
  {
    "text": "don't actually use the real Network just go to localhost on your same machine um got some sort of boilerplate HTTP",
    "start": "206640",
    "end": "212580"
  },
  {
    "text": "header stuff and then finally we have the actual data that we want I've put this in Json format here these are the",
    "start": "212580",
    "end": "217620"
  },
  {
    "text": "actual numbers that we're going to send to the dot product written in Ruby so over on Ruby we're going to have this",
    "start": "217620",
    "end": "223560"
  },
  {
    "text": "implementation it'll be Ruby they call it a method so it'll be a method called dot product takes two arrays A and B",
    "start": "223560",
    "end": "229560"
  },
  {
    "text": "these Json arrays of numbers are going to end up getting passed into there and then Ruby's going to say okay I'm going",
    "start": "229560",
    "end": "235500"
  },
  {
    "text": "to give you back an HTTP response which looks something like this again some more boilerplate and finally the number which the answer to this 70 or at least",
    "start": "235500",
    "end": "242700"
  },
  {
    "text": "so I'm told when I put this into some other program because I don't actually know what a doc product does anyway so",
    "start": "242700",
    "end": "247920"
  },
  {
    "text": "this is what happens right JavaScript builds the HTTP request it's got the arguments in there Ruby receives those",
    "start": "247920",
    "end": "253560"
  },
  {
    "text": "arguments deserializes them from Json makes the response uh sorry calls dot",
    "start": "253560",
    "end": "258660"
  },
  {
    "text": "product actually gets the response then makes the response and sends it back over the network to JavaScript",
    "start": "258660",
    "end": "264000"
  },
  {
    "text": "okay so what is the sending it to the socket part look like well again in the browser we can't really do this I'm going to use node.js for this so in",
    "start": "264000",
    "end": "270120"
  },
  {
    "text": "node.js if you want to make a socket you say cons socket equals new net dot socket you basically connect to localhost Port 3000 and then we say uh",
    "start": "270120",
    "end": "277560"
  },
  {
    "text": "request string is just we're gonna have some function that builds this HTTP request saying it's a get here's our path here are the headers here's the",
    "start": "277560",
    "end": "284520"
  },
  {
    "text": "body which is json.stringify our two arrays that we want to give to Ruby and then finally socket.write which takes",
    "start": "284520",
    "end": "290160"
  },
  {
    "text": "that request string that we've built up and then writes it out to the socket and that socket is going to go over localhost Port 3000 over to Ruby which",
    "start": "290160",
    "end": "296940"
  },
  {
    "text": "is then going to deserialize the arguments from the socket and then serialize the answer to the socket after it's computed it so Ruby here's the sort",
    "start": "296940",
    "end": "303300"
  },
  {
    "text": "of equivalent on the Ruby side again doing this sort of the manual way so TCP server.new localhost Port 3000 and Ruby",
    "start": "303300",
    "end": "310620"
  },
  {
    "text": "do a loop to have it sort of listen for connections server.accept uh says it should wait for new um connections parse",
    "start": "310620",
    "end": "317699"
  },
  {
    "text": "the HTTP request that gets all the headers and all that good stuff out of there coming from the client then we do Json dot parse on the body of that to",
    "start": "317699",
    "end": "324600"
  },
  {
    "text": "get array 1 and array two these give us the two arguments that we're actually going to pass through our method hey finally we're actually doing the dot",
    "start": "324600",
    "end": "330780"
  },
  {
    "text": "product everything up till now has just been overhead but finally we're going to really run this dot product function this is the thing that we actually",
    "start": "330780",
    "end": "336479"
  },
  {
    "text": "wanted to do passing in Array one and array two and getting our answer and then of course there's a little bit more overhead because we have to turn that",
    "start": "336479",
    "end": "342479"
  },
  {
    "text": "back into Json send it back across to JavaScript and then close the connection okay finally we did it wow all right",
    "start": "342479",
    "end": "351000"
  },
  {
    "text": "so that was a lot but we did successfully do it we peeled back one layer of abstraction and we've seen what it takes to over HTTP send it from send",
    "start": "351000",
    "end": "358919"
  },
  {
    "text": "a request from JavaScript to Ruby and then Ruby sends the answer back all of that is just sort of wrapping around",
    "start": "358919",
    "end": "364320"
  },
  {
    "text": "what we actually want which is to run this dot product right so we can see all this overhead but",
    "start": "364320",
    "end": "370199"
  },
  {
    "text": "really ultimately this is all we really want is we want to send these numbers over to Ruby and then Ruby does some",
    "start": "370199",
    "end": "376320"
  },
  {
    "text": "math on them and then returns back this other number as an answer so how can we sort of strip away some of this stuff",
    "start": "376320",
    "end": "381660"
  },
  {
    "text": "well the first thing that comes to mind is all this HTTP boilerplate we don't need all that if all we need is really",
    "start": "381660",
    "end": "387000"
  },
  {
    "text": "the sort of the the actual numbers involved here so let's do that so we're going to build this HTTP request string",
    "start": "387000",
    "end": "392639"
  },
  {
    "text": "send it to the socket and here I'm just going to take what we've done when we peel back one layer of abstraction I'm just going to remove some of this",
    "start": "392639",
    "end": "398759"
  },
  {
    "text": "General HTTP boilerplate stuff and we're just going to say you know what I'm just going to do the Json part where I turn",
    "start": "398759",
    "end": "403860"
  },
  {
    "text": "the arguments into Json and just send that straight to the socket now granted this means that now our our socket like",
    "start": "403860",
    "end": "409380"
  },
  {
    "text": "for 3000 localhost can only do one thing which is the dot product but never mind that we've we've gotten rid of some overhead here and uh and we're no longer",
    "start": "409380",
    "end": "416639"
  },
  {
    "text": "doing all the HTTP boilerplate around that same thing on the Ruby side now that HTTP stuff's gone we don't need to deal with it anymore and we're just sort",
    "start": "416639",
    "end": "423240"
  },
  {
    "text": "of dealing with the Json parsing reading directly what comes off of the socket and then sending more Json directly back",
    "start": "423240",
    "end": "428639"
  },
  {
    "text": "over the socket cool so we eliminated some of that overhead that's nice um this Json part though of course Json",
    "start": "428639",
    "end": "435000"
  },
  {
    "text": "is not the most compact way to represent numbers if we use the binary encoding rather than Json we can make it even",
    "start": "435000",
    "end": "440039"
  },
  {
    "text": "more compact so let's say we just had some sort of serialized deserialize who cares exactly what the details are but",
    "start": "440039",
    "end": "445199"
  },
  {
    "text": "point being it's it's a way to encode this that let's assume is more compact than Json okay eliminate some more",
    "start": "445199",
    "end": "450720"
  },
  {
    "text": "overhead there also we're still using a TCP server which has some overhead of its own we could eliminate some of that",
    "start": "450720",
    "end": "456240"
  },
  {
    "text": "by using a Unix socket instead for example if we're on a Unix system Windows has an equivalent to this and",
    "start": "456240",
    "end": "461460"
  },
  {
    "text": "basically this is like rather than setting up sort of a real server you use this file as a way to communicate",
    "start": "461460",
    "end": "466919"
  },
  {
    "text": "between two different processes so we've got our node.js process and our Ruby process running on the same machine if",
    "start": "466919",
    "end": "472860"
  },
  {
    "text": "we know that we're going off a local host we might as well use something that's a little bit overhead like a Unix socket by the way at this point we're",
    "start": "472860",
    "end": "478199"
  },
  {
    "text": "doing what's known as inter-process communication or IPC so you can now because we've sort of peeled back the",
    "start": "478199",
    "end": "483479"
  },
  {
    "text": "layer of abstraction one step at a time you can kind of see if I was doing inter-process communication there's actually a lot of similarities to this",
    "start": "483479",
    "end": "490020"
  },
  {
    "text": "and doing HTTP requests it's just like the actual HTTP string stuff is sort of what goes out the window at the end of",
    "start": "490020",
    "end": "496500"
  },
  {
    "text": "the day there's just not that much difference conceptually on what we're doing we're talking between two processes versus Talking between a",
    "start": "496500",
    "end": "502379"
  },
  {
    "text": "client and the server okay um if you're interested in inter-process communication by the way there's a cool",
    "start": "502379",
    "end": "507960"
  },
  {
    "text": "paper here about sort of different uh benchmarks of Performing uh different tasks and seeing which approaches",
    "start": "507960",
    "end": "513479"
  },
  {
    "text": "Standard Process communication are faster than others so here it's comparing pipes shared memory and sockets",
    "start": "513479",
    "end": "519360"
  },
  {
    "text": "um this is basically graphing latency which they're measuring as the time between when the sender sends the",
    "start": "519360",
    "end": "524700"
  },
  {
    "text": "information and when the recipient that is the other process receives it and then they're graphing this based on",
    "start": "524700",
    "end": "529740"
  },
  {
    "text": "message side so you can see of course as message size goes up latency goes up it takes longer to send more bytes that",
    "start": "529740",
    "end": "535019"
  },
  {
    "text": "makes sense but also you can see that there are different approaches that have different trade-offs and can be faster or slower so here's sockets in the blue",
    "start": "535019",
    "end": "541680"
  },
  {
    "text": "on top this is what we were doing this actually has the highest latency of any of these three approaches but beyond the",
    "start": "541680",
    "end": "546839"
  },
  {
    "text": "other two uh between shared memory and sockets it actually depends on the message size which one's faster so if",
    "start": "546839",
    "end": "551940"
  },
  {
    "text": "your message sizes are under eight kilobytes then actually it turns out that pipes are the fastest we're not going to get into exactly what pipes are",
    "start": "551940",
    "end": "558000"
  },
  {
    "text": "how they work but that's something that would be faster for something like really small like what we're sending these really small messages but as soon",
    "start": "558000",
    "end": "564600"
  },
  {
    "text": "as you get over 8K it actually switches and shared memory becomes the fastest now a downside of shared memories this",
    "start": "564600",
    "end": "570360"
  },
  {
    "text": "is something you can only do if you've got a parent choice process that spawns the child process you can't have two",
    "start": "570360",
    "end": "575940"
  },
  {
    "text": "sort of arbitrary disconnected processes communicating over shared memory so lots of trade-offs here but the point is",
    "start": "575940",
    "end": "581339"
  },
  {
    "text": "there's ways we can make this inner process communication thing go even faster by sort of switching it up from sockets to something else",
    "start": "581339",
    "end": "587760"
  },
  {
    "text": "okay so zooming out a little bit um the goal was we were want to call this Ruby",
    "start": "587760",
    "end": "592980"
  },
  {
    "text": "function from JavaScript and the way that we did this at first over HTTP was serialize this uh Json data sorry",
    "start": "592980",
    "end": "599040"
  },
  {
    "text": "serialize this data as Json uh the URL the headers the request body the Json all that stuff send it over HTTP to Ruby",
    "start": "599040",
    "end": "605580"
  },
  {
    "text": "which then deserializes the request and does the actual work and serializes the response back adds the headers in the",
    "start": "605580",
    "end": "611399"
  },
  {
    "text": "body then JavaScript deserializes the response so we made that a little bit faster by saying okay let's just talk to",
    "start": "611399",
    "end": "616620"
  },
  {
    "text": "localhost rather than going over the network and then also we can kind of instead of going to and from a TCP socket we can sort of generalize this",
    "start": "616620",
    "end": "623519"
  },
  {
    "text": "using inter-process communication and say well if we know we're going to the same machine then we don't have to use Json specifically we can just do a",
    "start": "623519",
    "end": "630000"
  },
  {
    "text": "binary encoding we can make all this stuff a little bit faster by removing some of the HTTP overhead and stuff like",
    "start": "630000",
    "end": "635399"
  },
  {
    "text": "that but fundamentally we still do have two different processes we still do have a lot of serialization overhead and",
    "start": "635399",
    "end": "640560"
  },
  {
    "text": "communication overhead here and really at the end of the day if we want to get this as fast as possible we really want",
    "start": "640560",
    "end": "646560"
  },
  {
    "text": "to do this inside a single process like we want to have a like actual function call JavaScript just calls Ruby and",
    "start": "646560",
    "end": "652560"
  },
  {
    "text": "that's it so how do we get down to this where we got JavaScript and we're like well I just",
    "start": "652560",
    "end": "658260"
  },
  {
    "text": "want to run the dot product function I don't want to do all this interprocess communication stuff let alone Network stuff how do I actually do that",
    "start": "658260",
    "end": "664620"
  },
  {
    "text": "because that is going to give us the lowest overhead that we can possibly get it's just calling the function across the language directly",
    "start": "664620",
    "end": "671160"
  },
  {
    "text": "okay well to answer that question um let's think about what actually is going on in the process well at the end",
    "start": "671160",
    "end": "676920"
  },
  {
    "text": "of the day a process is lots of ones and zeros at the end thank you for coming to my talk just kidding um so there's of course a",
    "start": "676920",
    "end": "683339"
  },
  {
    "text": "lot more going on in there this there are a bunch of ones and zeros and in fact literally if you were to look at an",
    "start": "683339",
    "end": "688380"
  },
  {
    "text": "executable binary on your disk this is what you would see a bunch of ones and zeros now you probably would not see these exact ones and zeros because I",
    "start": "688380",
    "end": "694440"
  },
  {
    "text": "just made these up by typing one and zero into my keyboard over and over so I don't actually know what happens when you run this but I wouldn't recommend it",
    "start": "694440",
    "end": "699540"
  },
  {
    "text": "having said that um that is at the end of the day if you open up any executable binary on your disk that you've ever any program you've",
    "start": "699540",
    "end": "705720"
  },
  {
    "text": "ever run it's just a bunch of ones and zeros so the question is like what's actually going on in those ones and zeros so let's unwrap that a second by",
    "start": "705720",
    "end": "712500"
  },
  {
    "text": "pretending that instead of ones and zeros it's Json so let's pretend that instead of a bunch of ones and zeros",
    "start": "712500",
    "end": "717959"
  },
  {
    "text": "what you actually had on your disk is a Json array that started off with let's say a string that says add the next two",
    "start": "717959",
    "end": "724500"
  },
  {
    "text": "entries followed by a couple of numbers like 42 and 123 and you can imagine when the computer comes along it's going to",
    "start": "724500",
    "end": "730560"
  },
  {
    "text": "read that instruction and somehow it knows that magical string add next to entries means take the next two entries",
    "start": "730560",
    "end": "736200"
  },
  {
    "text": "in our Json array and add them together and then maybe it hits another instruction like add the next tree to",
    "start": "736200",
    "end": "741600"
  },
  {
    "text": "the answer that we've got building up so far so 42 plus 123 and then we would add another 200 onto that and then maybe the",
    "start": "741600",
    "end": "747779"
  },
  {
    "text": "next instruction is jump to the index in the next entry in this Json array which maybe there's a three in there next and",
    "start": "747779",
    "end": "753959"
  },
  {
    "text": "so it says okay well if you just add numbers along the side for the indices of each array entry it says oh I see it",
    "start": "753959",
    "end": "759300"
  },
  {
    "text": "at index three that was uh this add next entry to answer so you know replaying",
    "start": "759300",
    "end": "764399"
  },
  {
    "text": "the whole thing it's basically we start off with this instruction add the next two entries so 42 plus 123 then we add",
    "start": "764399",
    "end": "770399"
  },
  {
    "text": "the next entry to the answer which is 200 and then we jump to uh the the following index which is three at index",
    "start": "770399",
    "end": "776459"
  },
  {
    "text": "three we've now done a go to hey uh we've done a go to index three at which",
    "start": "776459",
    "end": "782100"
  },
  {
    "text": "point we're adding the next entry to answer again so now 42 plus 123 plus 200 plus 200 again and then we're going to",
    "start": "782100",
    "end": "788519"
  },
  {
    "text": "come back to the jump which is going to jump back there and we've created our first infinite Loop fantastic okay so this is just gonna you know keep",
    "start": "788519",
    "end": "795060"
  },
  {
    "text": "jumping back and keep doing that like loop around adding 200 over and over again until it runs out of memory",
    "start": "795060",
    "end": "800639"
  },
  {
    "text": "um but the point is that conceptually this is actually quite similar to what's happening on your CPU so you have all of",
    "start": "800639",
    "end": "807720"
  },
  {
    "text": "these instructions that the CPU understands it has these sort of low level primitive operations that it knows how to do things like adding you know",
    "start": "807720",
    "end": "813899"
  },
  {
    "text": "the next two entries uh in in the binary perhaps among other things some of them are like you know load this memory load",
    "start": "813899",
    "end": "819360"
  },
  {
    "text": "that memory do this thing do that thing but um they're not of course actual Json uh that would be a very inefficient way",
    "start": "819360",
    "end": "825420"
  },
  {
    "text": "to encode all this um what they actually are is their numbers so for example instead of saying",
    "start": "825420",
    "end": "830760"
  },
  {
    "text": "add the next two entries as a string it'll be like the number five and that's hard-coded to be",
    "start": "830760",
    "end": "835800"
  },
  {
    "text": "add the next two entries in the list this sort of magic constant number and when I say hard-coded I don't actually mean in software I mean in Hardware like",
    "start": "835800",
    "end": "843420"
  },
  {
    "text": "inside your CPU there is some wiring or some circuitry that says the number five",
    "start": "843420",
    "end": "849600"
  },
  {
    "text": "means add the next two entries in these uh like sequence of instructions like",
    "start": "849600",
    "end": "855360"
  },
  {
    "text": "that's that's what that means somewhere it's not I don't know if it's actually five I just made that up but the point is there are these things called op",
    "start": "855360",
    "end": "860459"
  },
  {
    "text": "codes which are just numbers that represent these instructions so five might be the op code for add the next",
    "start": "860459",
    "end": "866339"
  },
  {
    "text": "two things let's say there's another one that's like add the next entry that's like you know 17 again I'm making these up um you can actually like look up and",
    "start": "866339",
    "end": "873120"
  },
  {
    "text": "read what these op codes really are um jump to the index the next one you know let's say that's opcode 29",
    "start": "873120",
    "end": "878339"
  },
  {
    "text": "so how do we get from here to ones and zeros well this point once you have it in the Forum where it's just all a bunch of numbers numbers can be encoded in",
    "start": "878339",
    "end": "884519"
  },
  {
    "text": "binaries ones and zeros like the ones and zeros encoding for five is this for 42 and 123 it's this for 17. it's this",
    "start": "884519",
    "end": "891360"
  },
  {
    "text": "yada yada and now we can actually see like literally what's going on when you have a binary full of ones and zeros",
    "start": "891360",
    "end": "897899"
  },
  {
    "text": "this is it this is all it is it's a series of instructions that are just encoded in this really compact form that",
    "start": "897899",
    "end": "904860"
  },
  {
    "text": "the CPU is hardwired to understand what those instructions mean and that's how you get a binary cool",
    "start": "904860",
    "end": "911459"
  },
  {
    "text": "okay how can we use that to call functions across languages well imagine",
    "start": "911459",
    "end": "916680"
  },
  {
    "text": "I've got an executable binary where I've put some JavaScript code in there and some Ruby code in there well at the end",
    "start": "916680",
    "end": "922079"
  },
  {
    "text": "of the day what is Javascript code what is Ruby code like what is actually running in there well basically at the end of the day they're ones and zeros",
    "start": "922079",
    "end": "928740"
  },
  {
    "text": "right there's some code in here that says I know how to do javascripty stuff and there's some code in there that says I know how to do Ruby stuff and yeah",
    "start": "928740",
    "end": "934440"
  },
  {
    "text": "they might be reading files off the disk but at the end of the day it's JavaScript flavored ones and zeros and Ruby flavored ones and zeros and there's",
    "start": "934440",
    "end": "940800"
  },
  {
    "text": "absolutely nothing stopping me from putting the two of those inside the same executable so they'll run the same process I can just totally do that saw",
    "start": "940800",
    "end": "947100"
  },
  {
    "text": "ones and zeros so okay but then like literally how do you go from running JavaScript code to",
    "start": "947100",
    "end": "953279"
  },
  {
    "text": "actually running Ruby code well essentially it's let's say these these bytes represent a jump right we just",
    "start": "953279",
    "end": "959459"
  },
  {
    "text": "jump instead of jumping to you know index three like we did earlier which was earlier in our own code you can jump",
    "start": "959459",
    "end": "964680"
  },
  {
    "text": "ahead and jump to ones and zeros that haven't happened yet for example we could jump into Ruby code and just say",
    "start": "964680",
    "end": "970260"
  },
  {
    "text": "cool now we're executing Ruby instructions and then somewhere in the Ruby instructions there's a jump back to where we came from that's totally something we can do",
    "start": "970260",
    "end": "977339"
  },
  {
    "text": "now this is a little bit risky uh there are some pitfalls with doing this to say",
    "start": "977339",
    "end": "982920"
  },
  {
    "text": "the least um let's explore that a little bit so let's let's go back to our sort of Json mental model of this because that's a",
    "start": "982920",
    "end": "988440"
  },
  {
    "text": "lot easier to read than ones and zeros for humans um add next to entries add next entry answer jump to index indexed so here we",
    "start": "988440",
    "end": "996480"
  },
  {
    "text": "have uh the integer constant 42 right the whole point of my storing 42 in there is I want to add it to 123 and",
    "start": "996480",
    "end": "1002480"
  },
  {
    "text": "that's totally something I can do now uh here we also have a memory address this is something that says jump back to",
    "start": "1002480",
    "end": "1008480"
  },
  {
    "text": "index three now the thing is there's no type information associated with this that the CPU sees the CPU when it's",
    "start": "1008480",
    "end": "1015199"
  },
  {
    "text": "coming through is just like ones and zeros so there's ones and zeros representing 42 cool there's ones and",
    "start": "1015199",
    "end": "1020779"
  },
  {
    "text": "zeros representing three cool it doesn't see these as conceptually different it's just like whatever ones and zeros you",
    "start": "1020779",
    "end": "1026418"
  },
  {
    "text": "put there that's what I'm doing so let's give an example of where this might go wrong specifically when calling",
    "start": "1026419",
    "end": "1032000"
  },
  {
    "text": "uh JavaScript and Ruby so let's say we had an instruction that says basically like I'm going to load the next entry",
    "start": "1032000",
    "end": "1037040"
  },
  {
    "text": "and we're going to use that as our array length so let's say I've got an array with four things in it like our numbers that we're",
    "start": "1037040",
    "end": "1042500"
  },
  {
    "text": "using for DOT product for example and we're gonna say yeah let's load the length of the array because we're going to iterate over it that's something that",
    "start": "1042500",
    "end": "1048020"
  },
  {
    "text": "we do in dot products we iterate over the arrays and of course in order to know when to",
    "start": "1048020",
    "end": "1053120"
  },
  {
    "text": "stop iterating we have to know where the length is so we've got this array length of four no problem stored in there and",
    "start": "1053120",
    "end": "1058400"
  },
  {
    "text": "then we're going to have an instruction that starts iterating based on that length of four okay so here's what the number four",
    "start": "1058400",
    "end": "1063679"
  },
  {
    "text": "looks like in JavaScript if you're like hey JavaScript give me a number four this these are the ones and zeros that javascript's going to put in there",
    "start": "1063679",
    "end": "1069020"
  },
  {
    "text": "notice there's like the bottom three rows are all zeros and then the top row it's got a couple of ones in there",
    "start": "1069020",
    "end": "1074480"
  },
  {
    "text": "now here's the problem this is what ruby does if you say What's the number four",
    "start": "1074480",
    "end": "1079700"
  },
  {
    "text": "on Ruby Ruby uses a totally different set of ones and zeros to represent the number four than JavaScript does and",
    "start": "1079700",
    "end": "1084740"
  },
  {
    "text": "Ruby the top three rows are all zeros and there's a single one in the bottom row okay so how could this cause things to",
    "start": "1084740",
    "end": "1092360"
  },
  {
    "text": "go wrong well let's say we've stored our Ray length in JavaScript because we're starting in JavaScript and we're like",
    "start": "1092360",
    "end": "1098120"
  },
  {
    "text": "hey Ruby here's my array here's what the length is and javascript's like oh here's the ones and zeros representing it right uh the array length and we just",
    "start": "1098120",
    "end": "1104900"
  },
  {
    "text": "jump over into Ruby land and then Ruby interprets those same ones and zeros so JavaScript has put these there and",
    "start": "1104900",
    "end": "1110419"
  },
  {
    "text": "said we're jumping into Ruby land Ruby's like oh cool I see these ones and zeros this is our array length what length",
    "start": "1110419",
    "end": "1116720"
  },
  {
    "text": "does Ruby think this is I'll give you a hint it's not four no points for guessing this because it's a very large number this is what ruby",
    "start": "1116720",
    "end": "1123740"
  },
  {
    "text": "thinks the length of your array is if you do this um and then because the CPU is just like",
    "start": "1123740",
    "end": "1129500"
  },
  {
    "text": "ones and zeros got a chief it's going to be like oh this is how many times you want to iterate through this array you",
    "start": "1129500",
    "end": "1135080"
  },
  {
    "text": "got it and it's just gonna start going and going and going and of course it's going to read way off the end of the array in the memory and then all sorts",
    "start": "1135080",
    "end": "1141080"
  },
  {
    "text": "of bad things are going to happen um hopefully you'll get a segmentation fall but it could be a lot worse than that could like corrupting memory doing",
    "start": "1141080",
    "end": "1147140"
  },
  {
    "text": "all sorts of stuff basically gigantic explosion um so the consequences of getting this",
    "start": "1147140",
    "end": "1152900"
  },
  {
    "text": "wrong and uh and just sort of being like Oh yeah it's no problem we'll just like dude you know just be going along in",
    "start": "1152900",
    "end": "1158000"
  },
  {
    "text": "JavaScript bytes and then we'll just jump into Ruby bytes and everything will be fine well there's lots of ways that it could very much not be fine uh if you",
    "start": "1158000",
    "end": "1164059"
  },
  {
    "text": "make a mistake okay so we don't want to just do this naively what but what do we want to do",
    "start": "1164059",
    "end": "1169460"
  },
  {
    "text": "instead because we we have our JavaScript bytes we have our Ruby bytes and we want to jump between the two so that we can actually call a ruby",
    "start": "1169460",
    "end": "1175220"
  },
  {
    "text": "function from JavaScript in the same process so literally how do we do that well basically the conceptual idea is that we're going to translate before we",
    "start": "1175220",
    "end": "1181640"
  },
  {
    "text": "jump so specifically we're going to start by reading the JavaScript bytes and then using them to make some ruby-shaped",
    "start": "1181640",
    "end": "1187700"
  },
  {
    "text": "bytes whether that's a number or as was the case in our array length example or it could be the arrays themselves you",
    "start": "1187700",
    "end": "1193039"
  },
  {
    "text": "know those are also represented differently in JavaScript and Ruby whatever they are we're just going to say okay we've got our JavaScript stuff we're going to create the Ruby",
    "start": "1193039",
    "end": "1199340"
  },
  {
    "text": "equivalents of those before we jump then we're going to jump to the Ruby instructions so that Ruby can actually use those ruby-shaped bytes which is",
    "start": "1199340",
    "end": "1205280"
  },
  {
    "text": "what it knows how to do without exploding and then finally once Ruby's done we're going to take the Ruby shaped answer that we've got and then use it to",
    "start": "1205280",
    "end": "1211400"
  },
  {
    "text": "make a JavaScript shaped answer at which point JavaScript can run now you might know this there's actually a little bit of similarity here between what we were",
    "start": "1211400",
    "end": "1217220"
  },
  {
    "text": "doing previously with all of our like Json serialization and deserialization like there is still some conversion that's happening here it's just that",
    "start": "1217220",
    "end": "1223580"
  },
  {
    "text": "we're doing it at a much lower level we're doing it at the level of like individual ones and zeros in memory rather than having to sort of like you",
    "start": "1223580",
    "end": "1229880"
  },
  {
    "text": "know package all this up into a completely different format an intermediary format you know send it across the wire and all that stuff so",
    "start": "1229880",
    "end": "1235100"
  },
  {
    "text": "this is sort of the lower overhead version of the translation we were doing previously using Json and then later some other binary format",
    "start": "1235100",
    "end": "1242120"
  },
  {
    "text": "okay so to sum up what we need is some way to read arbitrary bytes and write other arbitrary bytes in memory because",
    "start": "1242120",
    "end": "1248419"
  },
  {
    "text": "that's how we're going to you know put these things in place so that when we do the jump it works and then uh we need",
    "start": "1248419",
    "end": "1253460"
  },
  {
    "text": "some language that will do that for us but JavaScript and Ruby are not very good I wonder what language we could",
    "start": "1253460",
    "end": "1259280"
  },
  {
    "text": "possibly do to make this work out a little bit better now actually there are several languages we could do I know Andrew Kelly's in the audience so I'm",
    "start": "1259280",
    "end": "1265400"
  },
  {
    "text": "going to mention that Zig is actually an excellent language for doing this but in this example uh because I think more people know C than Zig I'm going to use",
    "start": "1265400",
    "end": "1271280"
  },
  {
    "text": "c as our example um so what we don't want to do now if we're using C to put these bytes in the",
    "start": "1271280",
    "end": "1277160"
  },
  {
    "text": "right place what we absolutely do not want to do is to painstakingly figure out exactly what bytes need to go where",
    "start": "1277160",
    "end": "1282320"
  },
  {
    "text": "in JavaScript and Ruby by hand and just be like oh yes we'll just handcraft these artisanal bytes and bits and ones",
    "start": "1282320",
    "end": "1287539"
  },
  {
    "text": "and zeros and we'll surely never make a mistake that causes everything to explode because we will totally make a mistake that causes everything to",
    "start": "1287539",
    "end": "1293480"
  },
  {
    "text": "explode so we don't want to do that but unfortunately we don't have to because uh people have other people on the",
    "start": "1293480",
    "end": "1299900"
  },
  {
    "text": "internet have made functions that will convert not in this case directly between JavaScript and Ruby but what",
    "start": "1299900",
    "end": "1306559"
  },
  {
    "text": "they have given us is in this case this is the node.js node API which is basically provides things to convert",
    "start": "1306559",
    "end": "1313340"
  },
  {
    "text": "from C types to node types and then also functions to go the other way around from node types to C type so now we can",
    "start": "1313340",
    "end": "1319220"
  },
  {
    "text": "go to and from node.js and JavaScript sorry JavaScript and C via node.js so if",
    "start": "1319220",
    "end": "1325220"
  },
  {
    "text": "I've got my node.js stuff I can convert it to and from C representations in memory I can get the ones and zeros that",
    "start": "1325220",
    "end": "1330260"
  },
  {
    "text": "c expects from the ones and zeros that JavaScript expects and vice versa that doesn't get us quite to Ruby",
    "start": "1330260",
    "end": "1335780"
  },
  {
    "text": "unfortunately Ruby's got the same equivalent so here's the sort of similar thing for Ruby this is basically a way",
    "start": "1335780",
    "end": "1340820"
  },
  {
    "text": "to convert a Ruby value into C and then also to convert a c value into Ruby so putting those two together if we've got",
    "start": "1340820",
    "end": "1347000"
  },
  {
    "text": "inside the same process node.js stuff that we can convert to and from C using C and Ruby that we can convert to and",
    "start": "1347000",
    "end": "1352880"
  },
  {
    "text": "from C well guess what once it's converted to C C knows how to talk to C without any conversions so basically what we can do is put those together and",
    "start": "1352880",
    "end": "1359780"
  },
  {
    "text": "have a way to call a ruby function from node.js by using C as intermediary so we",
    "start": "1359780",
    "end": "1365120"
  },
  {
    "text": "start by converting the ones and zeros in node flavor to C flavor and then we convert it from C flavor into Ruby",
    "start": "1365120",
    "end": "1370700"
  },
  {
    "text": "flavor and then back the other way so again kind of similarly to what we were doing previously except rather than",
    "start": "1370700",
    "end": "1376340"
  },
  {
    "text": "doing it with Json or something like that we're using C as our intermediate representation to go between these two",
    "start": "1376340",
    "end": "1382640"
  },
  {
    "text": "okay so let's do it here we have our let's let's assume we have our our DOT",
    "start": "1382640",
    "end": "1388039"
  },
  {
    "text": "product method implemented in Ruby not actually going to write that out um then we're going to call it from node.js and the way that we're going to",
    "start": "1388039",
    "end": "1394159"
  },
  {
    "text": "do that it's going to look something like this so import dot product from Ruby linear algebra and this just looks",
    "start": "1394159",
    "end": "1400640"
  },
  {
    "text": "like essentially a normal node.js import it's actually the same syntactical thing that we had uh in this um Scala example",
    "start": "1400640",
    "end": "1407659"
  },
  {
    "text": "trying to call Java like we're literally just importing this thing directly even though it's written in a totally",
    "start": "1407659",
    "end": "1412880"
  },
  {
    "text": "different language now we're going to see in a second that there's some behind the scenes glue taking place that's going to make this happen but it is",
    "start": "1412880",
    "end": "1418220"
  },
  {
    "text": "pretty cool that like we get this user experience I didn't have to set up a whole socket let alone HTTP requests I'm",
    "start": "1418220",
    "end": "1423559"
  },
  {
    "text": "just like import it done I can just now call it directly which is what I wanted the entire time so ergonomically nice",
    "start": "1423559",
    "end": "1430220"
  },
  {
    "text": "this is great and also it doesn't have the overheads of inner process communication or the network",
    "start": "1430220",
    "end": "1435679"
  },
  {
    "text": "okay so how do we actually implement the bindings between Ruby and node well let's look at that so we're going to",
    "start": "1435679",
    "end": "1442100"
  },
  {
    "text": "start this is some C code we're going to include node api.h this is the C to node.js library that I showed you",
    "start": "1442100",
    "end": "1447559"
  },
  {
    "text": "earlier and here we're going to include ruby.h which is the Ruby one between C and Ruby that I uh showed you earlier",
    "start": "1447559",
    "end": "1452659"
  },
  {
    "text": "and then basically we're going to start writing some C code so here we're going to say if you don't know C don't worry about it uh I'm just going to kind of",
    "start": "1452659",
    "end": "1458480"
  },
  {
    "text": "you know conceptually go through what this is doing and hand wave a lot of implementation details static n API value dot product basically",
    "start": "1458480",
    "end": "1465559"
  },
  {
    "text": "says we're defining a function called dot product and when we're done there's some boilerplate that I'm not going to show that will basically tell node.js",
    "start": "1465559",
    "end": "1471620"
  },
  {
    "text": "hey use this compiled C output as an actual node.js module and so we're going",
    "start": "1471620",
    "end": "1477320"
  },
  {
    "text": "to name a DOT product because that's how we're going to import it in node.js this is pretty important so the first argument to this dot product function",
    "start": "1477320",
    "end": "1482900"
  },
  {
    "text": "behind the scenes like node.js doesn't you know make you do this but if you're actually writing C code that represents",
    "start": "1482900",
    "end": "1488120"
  },
  {
    "text": "the ones and zeros that node.js once part of that is actually a stateful runtime so we talked earlier about how",
    "start": "1488120",
    "end": "1493400"
  },
  {
    "text": "you know you have inter-process communication of course the processes are stateful but also even within the single process there's a sort of",
    "start": "1493400",
    "end": "1499460"
  },
  {
    "text": "stateful environment because node.js is like a garbage collector and so it is Ruby they each have their own stateful environments and sort of come along with",
    "start": "1499460",
    "end": "1505580"
  },
  {
    "text": "them and we'll talk a little bit more about what the implications of that are later um this info function is basically just",
    "start": "1505580",
    "end": "1512120"
  },
  {
    "text": "some like function header info stuff that comes along with node.js and then basically now we're going to start",
    "start": "1512120",
    "end": "1517640"
  },
  {
    "text": "writing C code that represents Ruby stuff so I've sort of color coded these apologies to uh viewers who can't see",
    "start": "1517640",
    "end": "1523700"
  },
  {
    "text": "different colors but um these yellow ones here are the node.js thing so this is stuff coming from the node api.h and then these red",
    "start": "1523700",
    "end": "1531140"
  },
  {
    "text": "things are basically the equivalents in Ruby so now what we're doing here is we're making a ruby array calling this",
    "start": "1531140",
    "end": "1536360"
  },
  {
    "text": "RB array new function and what this is doing is basically it's making the ones and zeros that Ruby expects as a ruby",
    "start": "1536360",
    "end": "1543020"
  },
  {
    "text": "array which is pretty cool like you don't actually need to literally run Ruby in order to do that at the end of the day all the Ruby executable is doing",
    "start": "1543020",
    "end": "1549620"
  },
  {
    "text": "when you run it is it's putting ones and zeros in memory and C can do exactly the same thing so when I call this thing",
    "start": "1549620",
    "end": "1555020"
  },
  {
    "text": "it's making in memory a ruby array that is completely indistinguishable to Ruby from any other Ruby array it's just like",
    "start": "1555020",
    "end": "1561679"
  },
  {
    "text": "yeah that looks like a ruby Ray to me I assumed that that was made using Ruby it's like no no that was made using C you can totally do that so we're gonna",
    "start": "1561679",
    "end": "1568039"
  },
  {
    "text": "make two arrays here and then basically I'm not going to show you all this stuff because it's kind of tedious but at this point this is where we would sort of",
    "start": "1568039",
    "end": "1573980"
  },
  {
    "text": "convert all the node arrays to Ruby arrays I'm not going to walk you through all that because uh there's kind of it's kind of involved but I will show you the",
    "start": "1573980",
    "end": "1580220"
  },
  {
    "text": "return value and then you can kind of extrapolate to like okay once we see how the return value gets converted which is just one number you can imagine how that",
    "start": "1580220",
    "end": "1585919"
  },
  {
    "text": "would work in a loop to to do the same thing with the arrays okay so here's how we're going to get the uh the answer and convert that so",
    "start": "1585919",
    "end": "1592400"
  },
  {
    "text": "first we're going to do this RB phone call I I think you could pronounce this either way you could say it's fun call which is clearly what they meant for",
    "start": "1592400",
    "end": "1598580"
  },
  {
    "text": "like function call or you could say it's funk all which you know also works but however you pronounce it uh this is",
    "start": "1598580",
    "end": "1603799"
  },
  {
    "text": "where we're going to call the Ruby function and the first argument again is that sort of stateful run time so Ruby",
    "start": "1603799",
    "end": "1609080"
  },
  {
    "text": "calls this RBC object there's node.js called it enf but it's like the garbage collector and all that stuff",
    "start": "1609080",
    "end": "1614720"
  },
  {
    "text": "um and then of course we need to uh tell Ruby the the string name of the method we're calling because unlike node.js and",
    "start": "1614720",
    "end": "1620720"
  },
  {
    "text": "Ruby you always call methods by giving a string um for the name of the method and here we're going to call it the dot dot",
    "start": "1620720",
    "end": "1627080"
  },
  {
    "text": "product is the string we're going to give it for the method name um and we do have to call this RB intern thing because even the strings are",
    "start": "1627080",
    "end": "1632419"
  },
  {
    "text": "different between Ruby and C so this is actually converting this C string into a ruby string so you could tell Ruby the",
    "start": "1632419",
    "end": "1638360"
  },
  {
    "text": "name of the method that you want to call um then you have to tell the number of arguments and then finally you actually give it the real arguments that are",
    "start": "1638360",
    "end": "1644600"
  },
  {
    "text": "going to be run by uh the Ruby method okay cool um and then finally it's going to return",
    "start": "1644600",
    "end": "1650480"
  },
  {
    "text": "back the Ruby integer which is this thing right here and now we need to convert that to node.js because we're about to return that back to node okay",
    "start": "1650480",
    "end": "1657620"
  },
  {
    "text": "so in order to do this we're going to use c as an intermediary so we're going to go from the Ruby integer to a c integer first so here's our here's how",
    "start": "1657620",
    "end": "1664400"
  },
  {
    "text": "we're going to do that we're going to use this num2 int thing which takes the Ruby answer and then converts it into C that's just something in that ruby.h",
    "start": "1664400",
    "end": "1670700"
  },
  {
    "text": "library that just does this for us and now that we've got it in C we basically need to do the same equivalent of take",
    "start": "1670700",
    "end": "1676340"
  },
  {
    "text": "the C integer and convert that into JavaScript using the node API so here's how we do that they call it an API",
    "start": "1676340",
    "end": "1682400"
  },
  {
    "text": "create in 32 for 32-bit integer and you just give it the the existing C answer that we've already got and then this",
    "start": "1682400",
    "end": "1688760"
  },
  {
    "text": "reference to the JS answer and it writes it in there and finally we can return our JS answer okay so zooming out we have this",
    "start": "1688760",
    "end": "1695900"
  },
  {
    "text": "function here which is going to be compiled into something that node.js can import directly but it's implemented in",
    "start": "1695900",
    "end": "1702080"
  },
  {
    "text": "C and what it does is first convert the node arrays to Ruby arrays which is a several step process so first we saw",
    "start": "1702080",
    "end": "1708200"
  },
  {
    "text": "creating the two empty Ruby arrays the part that I left out is that next we would need to iterate over each of the",
    "start": "1708200",
    "end": "1713539"
  },
  {
    "text": "node arrays that we got in his arguments convert each of those elements one at a time using that same process that I just",
    "start": "1713539",
    "end": "1718880"
  },
  {
    "text": "did with the c intermediary dance go from a node number to a c int and then take the C ant and turn it into a ruby",
    "start": "1718880",
    "end": "1724279"
  },
  {
    "text": "int then finally push that Ruby integer onto the Ruby array now we finally got two Ruby arrays we can pass those to",
    "start": "1724279",
    "end": "1729919"
  },
  {
    "text": "Ruby's dot product method convert its returned Ruby into a secant convert that c into a node number and return it",
    "start": "1729919",
    "end": "1736700"
  },
  {
    "text": "oh okay so a lot of stuff going on here uh obviously this is not a trivial thing to",
    "start": "1736700",
    "end": "1743480"
  },
  {
    "text": "call functions across languages but we can't do it and we can do it without having to go to the overhead of",
    "start": "1743480",
    "end": "1749600"
  },
  {
    "text": "inter-process communication but again you can see there is definitely overhead here nonetheless",
    "start": "1749600",
    "end": "1755539"
  },
  {
    "text": "um okay so uh at the end of the day when we are doing this import here from Ruby",
    "start": "1755539",
    "end": "1760700"
  },
  {
    "text": "linear algebra I said earlier that we're importing it from Ruby really what we're actually importing is actually C I mean",
    "start": "1760700",
    "end": "1766580"
  },
  {
    "text": "it's just that was a straight C code the whole way through it's just that that c code is delegating to Rude behind the",
    "start": "1766580",
    "end": "1771980"
  },
  {
    "text": "scenes as sort of an implementation detail of what that c code is doing and likewise when we call this dot product",
    "start": "1771980",
    "end": "1777740"
  },
  {
    "text": "method what it's literally running is this C function that we just wrote that's actually what's getting executed",
    "start": "1777740",
    "end": "1783020"
  },
  {
    "text": "and it happens to be that that c function is calling a roomy method inside of its implementation",
    "start": "1783020",
    "end": "1788360"
  },
  {
    "text": "but at the end of the day we got there we had this goal of calling Ruby from JavaScript inside the",
    "start": "1788360",
    "end": "1794720"
  },
  {
    "text": "same process and getting the answer with no Enterprise's communication and no network so as little overhead as we",
    "start": "1794720",
    "end": "1799880"
  },
  {
    "text": "could awesome okay but you can imagine that if we wanted to",
    "start": "1799880",
    "end": "1805039"
  },
  {
    "text": "do this with two other languages we could use the same strategy this is not limited in any way to node.js and Ruby",
    "start": "1805039",
    "end": "1810380"
  },
  {
    "text": "like for example let's say that I wanted to call Ruby from python totally do that in fact python also has uh one of these",
    "start": "1810380",
    "end": "1816440"
  },
  {
    "text": "they call it a cffi which stands for C foreign function interface ffis for foreign function interface it's kind of",
    "start": "1816440",
    "end": "1822200"
  },
  {
    "text": "this general term for calling functions across languages you can totally just grab this python library and do exactly",
    "start": "1822200",
    "end": "1827299"
  },
  {
    "text": "the same thing we just did except instead of the node.js to see conversions we would do the same thing",
    "start": "1827299",
    "end": "1832640"
  },
  {
    "text": "but with python instead of node.js exactly the same process and likewise if you imagine we could also substitute a",
    "start": "1832640",
    "end": "1839120"
  },
  {
    "text": "ruby for Fortran if we wanted to yeah Fortran absolutely Fortran is a cffi",
    "start": "1839120",
    "end": "1844220"
  },
  {
    "text": "believe it or not so you can talk between foreshan and c and you know why because even back in 1957 it was still",
    "start": "1844220",
    "end": "1850520"
  },
  {
    "text": "all ones and zeros at the end of the day machine cards machine code on Punch Cards at the end of the day what you're",
    "start": "1850520",
    "end": "1857240"
  },
  {
    "text": "specifying is the ones and zeros that need to go in memory that need to correspond to instructions and you can still do that today and C can still put",
    "start": "1857240",
    "end": "1864200"
  },
  {
    "text": "ones and zeros in the right place such that they're understandable as Fortran that absolutely still works so really",
    "start": "1864200",
    "end": "1870020"
  },
  {
    "text": "this kind works with anything I mean any two languages you want to glue together if you're okay with using C as an intermediary and then one of them has a",
    "start": "1870020",
    "end": "1876260"
  },
  {
    "text": "cffi you can do that and in fact even if one of them doesn't have a cffi you can write that yourself it just might take a",
    "start": "1876260",
    "end": "1882200"
  },
  {
    "text": "while and be kind of tedious and error prone but you can't do it at the end of the day knowing that computers are just ones and zeros is",
    "start": "1882200",
    "end": "1888020"
  },
  {
    "text": "kind of a superpower you can really do a lot of stuff that might seem intractable or like sorcery uh you know and that",
    "start": "1888020",
    "end": "1893960"
  },
  {
    "text": "that certainly was my impression when I first heard about this I was like numpy is using 4chan bindings under the hood surely that has to be something like",
    "start": "1893960",
    "end": "1900320"
  },
  {
    "text": "sorcery turns out it's not sorcery it's c but again it doesn't have to be C it",
    "start": "1900320",
    "end": "1906500"
  },
  {
    "text": "can't it could be also rust it could be Zig like there's definitely different languages that'll let you do this any language where you can sort of",
    "start": "1906500",
    "end": "1911600"
  },
  {
    "text": "manipulate memory directly um you can you can do the same kind of stuff it's just you know C is a common one that people use",
    "start": "1911600",
    "end": "1917899"
  },
  {
    "text": "cool okay so now I did mention that there was some overhead left here right",
    "start": "1917899",
    "end": "1923720"
  },
  {
    "text": "um when we're doing this c as an intermediary thing there is definitely some conversion in between these two like we had to convert from the Ruby",
    "start": "1923720",
    "end": "1929899"
  },
  {
    "text": "answer that we got from a ruby number into a c number and then from a c number into a node.js number it would be nicer",
    "start": "1929899",
    "end": "1936140"
  },
  {
    "text": "if we had a gnome 2js that just went straight from Ruby to JavaScript without the C intermediary that would be awesome",
    "start": "1936140",
    "end": "1942799"
  },
  {
    "text": "as far as I know nobody has done this um but somebody totally could do this if they wanted to and then we could use it that's going to be outside the scope of",
    "start": "1942799",
    "end": "1948620"
  },
  {
    "text": "this talk but just so you're aware there is a way to do that but what's even better than that is if you just happen",
    "start": "1948620",
    "end": "1954320"
  },
  {
    "text": "to have the same number of representation in the first place then you don't need to do any conversion there's not even a conversion from Ruby",
    "start": "1954320",
    "end": "1959720"
  },
  {
    "text": "to JS it's just like oh the ones and zeros happen to be the same for JavaScript and Ruby so like there's just nothing we can just jump we're good all",
    "start": "1959720",
    "end": "1966440"
  },
  {
    "text": "set um so that's the absolute fastest if you want to eliminate absolutely all that overhead between calling the functions",
    "start": "1966440",
    "end": "1972440"
  },
  {
    "text": "across the languages um and this does come up sometimes so for example if you've got rust code calling C code",
    "start": "1972440",
    "end": "1978080"
  },
  {
    "text": "um in some cases like rust and C integers certain integers just have exactly the same representation so you can just be like yeah I got it I got",
    "start": "1978080",
    "end": "1983840"
  },
  {
    "text": "what I need I'm moving on um but this isn't always the case like if for example rust string and C strings",
    "start": "1983840",
    "end": "1989600"
  },
  {
    "text": "not the same you cannot just be like oh I'll just use the C string as a rest string and everything's gonna be fine everything's not gonna be fine so you do",
    "start": "1989600",
    "end": "1995840"
  },
  {
    "text": "kind of need to know like which you know when you're going between two languages which things happen to be the same and which ones happen to uh be different in",
    "start": "1995840",
    "end": "2003580"
  },
  {
    "text": "some cases you might find that absolutely everything that you're trying to do happens to have exactly the same representation and then there's really",
    "start": "2003580",
    "end": "2009519"
  },
  {
    "text": "no overhead for doing that call but usually that that's not the case usually there's some number of",
    "start": "2009519",
    "end": "2014620"
  },
  {
    "text": "differences in fact even going back to our talking to a scholar calling a Java",
    "start": "2014620",
    "end": "2019860"
  },
  {
    "text": "function example there's still a whole section of scholar documentation on conversions between Java and Scala",
    "start": "2019860",
    "end": "2025720"
  },
  {
    "text": "collection so even languages that are designed to be this at the end of the day usually languages have differences",
    "start": "2025720",
    "end": "2031659"
  },
  {
    "text": "um that's kind of the reason that you use different languages they're good at different things and better or worse at certain use cases and that often comes",
    "start": "2031659",
    "end": "2037779"
  },
  {
    "text": "with different data structures different in-memory representations which means that some conversions are usually necessary and kind of unavoidable",
    "start": "2037779",
    "end": "2044559"
  },
  {
    "text": "um and they said that this is certainly nicer ergonomics than writing all that c code like we did earlier I would much rather just be like import this thing",
    "start": "2044559",
    "end": "2050980"
  },
  {
    "text": "and that's done that's it I don't have to do any other work it's just it's just right there for me",
    "start": "2050980",
    "end": "2056080"
  },
  {
    "text": "um also this is much less explosion prone like I can sort of trust that the people who did The Scholar Java conversions did that whereas me writing",
    "start": "2056080",
    "end": "2062679"
  },
  {
    "text": "C code myself I don't know if that's going to be as you know nice as something that's sort of been more",
    "start": "2062679",
    "end": "2067720"
  },
  {
    "text": "battle tested and less bespoke um like this um also worth noting there was a little",
    "start": "2067720",
    "end": "2073540"
  },
  {
    "text": "trick you can do here so let's say that you're starting from JavaScript and you want to call Ruby and we're using C data",
    "start": "2073540",
    "end": "2078580"
  },
  {
    "text": "structures as an intermediary um if you don't want to write all that c conversion by hand like we did earlier",
    "start": "2078580",
    "end": "2083740"
  },
  {
    "text": "with like building up the array and then pushing the stuff on the array and then converting numbers one at a time a trick you can do is say you know what",
    "start": "2083740",
    "end": "2089740"
  },
  {
    "text": "JavaScript knows how to convert uh itself into Json and Ruby knows how to convert from Json so if we're okay with",
    "start": "2089740",
    "end": "2096520"
  },
  {
    "text": "the performance hit what you can do is say take JavaScript turn it into Json just give that Json to C and then C as a",
    "start": "2096520",
    "end": "2103540"
  },
  {
    "text": "very small amount of work to do to just say take that Json and give it to Ruby that's much less error prone in the sort",
    "start": "2103540",
    "end": "2109000"
  },
  {
    "text": "of C Zone where you've got you know potentially a lot more errors can happen so this approach is definitely slower",
    "start": "2109000",
    "end": "2115119"
  },
  {
    "text": "but it does result in you're having to write less C code if you're in a position where you kind of find yourself needing to do that bespoke",
    "start": "2115119",
    "end": "2122200"
  },
  {
    "text": "um another difference is that when I was calling Java code from Scala this was all type checked now granted I mean in",
    "start": "2122200",
    "end": "2127839"
  },
  {
    "text": "in the case of like JavaScript to see the Ruby JavaScript is not anally type checked um and neither is this sort of",
    "start": "2127839",
    "end": "2134140"
  },
  {
    "text": "like C intermediary uh you know if I added typescript on JavaScript and I added uh sorbet on the Ruby side that's",
    "start": "2134140",
    "end": "2139839"
  },
  {
    "text": "a type checker for Ruby um the C in the middle would still not be type checked like all of this stuff",
    "start": "2139839",
    "end": "2145060"
  },
  {
    "text": "right here I need to get this right this there's no real like type assistance here because essentially these",
    "start": "2145060",
    "end": "2150099"
  },
  {
    "text": "c-bindings just cannot leverage the type definition C doesn't know about typescript C doesn't know about sorbet C",
    "start": "2150099",
    "end": "2156099"
  },
  {
    "text": "just knows about the ones and zeros so when I'm writing this that can be more error prone but also at the end of the",
    "start": "2156099",
    "end": "2161320"
  },
  {
    "text": "day these bindings are not guaranteeing that I'm getting the types right on either side so if I want to write my",
    "start": "2161320",
    "end": "2166839"
  },
  {
    "text": "typescript code and call some sorbet code and ensure that the types match up on both sides C doesn't help me do that",
    "start": "2166839",
    "end": "2172599"
  },
  {
    "text": "I need something else that it's going to sort of sync up the types type definitions separately from syncing up the runtime representations with",
    "start": "2172599",
    "end": "2178900"
  },
  {
    "text": "something like C okay now um if I am let's say in",
    "start": "2178900",
    "end": "2184180"
  },
  {
    "text": "rustland and I want to call C plus plus there actually is a tool a command line tool that will help me sync up not only",
    "start": "2184180",
    "end": "2189280"
  },
  {
    "text": "the runtime representations but also the types at the same time so this tool is called Russ bindgen and basically its",
    "start": "2189280",
    "end": "2195160"
  },
  {
    "text": "purpose is to generate rust type definitions and bindings at the same time so the types as well as the runtime",
    "start": "2195160",
    "end": "2200619"
  },
  {
    "text": "stuff from C or C plus plus type definitions so I have some existing C plus code base I've got some type",
    "start": "2200619",
    "end": "2207220"
  },
  {
    "text": "definitions for my C plus code I just give it to Russ by engine and it just generates some Rust files that allow me",
    "start": "2207220",
    "end": "2213339"
  },
  {
    "text": "to just call the C plus directly with typing now I've been working on this programming language called Rock for",
    "start": "2213339",
    "end": "2219520"
  },
  {
    "text": "several years now and um we are trying to sort of generalize this rust buying gen experience of generating the uh",
    "start": "2219520",
    "end": "2225640"
  },
  {
    "text": "runtime um uh representation as well as the types uh in a pretty cool way",
    "start": "2225640",
    "end": "2230980"
  },
  {
    "text": "so rock uh for those who aren't familiar it's tagline as it wants to be a fast friendly functional language not really",
    "start": "2230980",
    "end": "2236380"
  },
  {
    "text": "going to get into exactly what rock is we're just going to kind of talk about this one aspect of it um but one of the things that's important to us is that rock is nice to",
    "start": "2236380",
    "end": "2243220"
  },
  {
    "text": "call from other languages this is like a first class use case we want it to be really easy to embed Rock in other languages for all the reasons I",
    "start": "2243220",
    "end": "2249520"
  },
  {
    "text": "mentioned at the start of the talk um so let's as an example let's say I've got a rust code base and I want to call",
    "start": "2249520",
    "end": "2254980"
  },
  {
    "text": "a rock function from within that rust codebase so what I can do is I can start by running this command Rock glue and",
    "start": "2254980",
    "end": "2261339"
  },
  {
    "text": "then I give it a DOT Rock file which specifies how to convert from rock types to uh generated rust",
    "start": "2261339",
    "end": "2268180"
  },
  {
    "text": "so basically what this rock glue command will do is use my rock codes types to generate rust types and bindings just",
    "start": "2268180",
    "end": "2274960"
  },
  {
    "text": "like rust spine gen did starting from C plus plus except this is starting from Brock instead of from C plus plus and",
    "start": "2274960",
    "end": "2280660"
  },
  {
    "text": "also this is baked into the Rock compiler you don't need to get a separate CLI for it it's just right there in the language",
    "start": "2280660",
    "end": "2286420"
  },
  {
    "text": "um so here's what rock to rust.rock would look like so basically we have a function called make glue and it takes as an argument these list of types so",
    "start": "2286420",
    "end": "2293140"
  },
  {
    "text": "this is essentially a representation that The Rock compiler gives to this function that says hey here's all the types of all the functions that you're",
    "start": "2293140",
    "end": "2299380"
  },
  {
    "text": "exposing that rust could call go ahead and just return a basically either a list of files that you want to spit out",
    "start": "2299380",
    "end": "2305800"
  },
  {
    "text": "like the the generated rust files or else a string of an error that that",
    "start": "2305800",
    "end": "2310839"
  },
  {
    "text": "could have happened so then the implementation of this looks something like this I'm just going to kind of gloss through this if you don't know rock code that's totally fine type",
    "start": "2310839",
    "end": "2317560"
  },
  {
    "text": "stopwatch shapes which says like I'm just going to walk over all the different shapes of types that that rock has available and then we're going to",
    "start": "2317560",
    "end": "2323140"
  },
  {
    "text": "say um let's say that I've got a rock function here here's what I'm going to do here here's how I'm going to generate this uh this like rust code you know I'm",
    "start": "2323140",
    "end": "2330700"
  },
  {
    "text": "going to call a function called generate function which is going to generate the you know the rust representation of that function etc etc and I just enumerate",
    "start": "2330700",
    "end": "2337240"
  },
  {
    "text": "all the different types that we've got like functions and records and tag unions and uh you know all that good",
    "start": "2337240",
    "end": "2342880"
  },
  {
    "text": "stuff lists and then at the end of the day there's only about like 10 different types of rocks so um there's not that many different cases",
    "start": "2342880",
    "end": "2348700"
  },
  {
    "text": "to cover and then we've now generated a rust code for all of those so let's say that I've implemented my DOT product function that",
    "start": "2348700",
    "end": "2354760"
  },
  {
    "text": "we've been talking about this whole time in Brock uh takes two arguments to arrays of integers and it returns an",
    "start": "2354760",
    "end": "2360880"
  },
  {
    "text": "integer um so I just run Rock glue Rock to rust and then basically what it would print",
    "start": "2360880",
    "end": "2366160"
  },
  {
    "text": "out is this this uh usually it's best practice to label your generated code as like this was generated so say generated",
    "start": "2366160",
    "end": "2372579"
  },
  {
    "text": "by Rock glue and then basically this is what it would spit out is here is this rust function that actually has Type",
    "start": "2372579",
    "end": "2378880"
  },
  {
    "text": "annotations on it note that the The Rock one didn't have type annotations I think this is kind of a cool use case for this",
    "start": "2378880",
    "end": "2384760"
  },
  {
    "text": "because Rock has 100 type inference so like you you never have to annotate your types if you don't want to",
    "start": "2384760",
    "end": "2389980"
  },
  {
    "text": "um and so basically uh even though this implementation here did not have type annotations on it raw glue still knows",
    "start": "2389980",
    "end": "2396099"
  },
  {
    "text": "what the types are and it's going to tell you inside this function and so you can use that to generate the rust type annotations which are mandatory in Rust",
    "start": "2396099",
    "end": "2402280"
  },
  {
    "text": "even though you didn't have to put them in rock I think that's pretty cool um and then of course the implementation of this that will be generated by raw",
    "start": "2402280",
    "end": "2408880"
  },
  {
    "text": "glue it's going going to go ahead and call the rot dot product function because Rusty is one of those languages that can kind of do the ones and zeros",
    "start": "2408880",
    "end": "2414820"
  },
  {
    "text": "thing itself you don't need to use c as an intermediary when you're already starting from rust cool now a language where you do",
    "start": "2414820",
    "end": "2421420"
  },
  {
    "text": "actually need to use some sort of intermediary or something like that is Javascript as we've seen um so let's say that instead of saying",
    "start": "2421420",
    "end": "2428380"
  },
  {
    "text": "Rock glue Rock to rust I want to say rock glue Rock to node and somebody has written so that somebody's probably going to be me let's be honest",
    "start": "2428380",
    "end": "2435040"
  },
  {
    "text": "um writing a way to convert between um rock code and JavaScript code like node.js code so here we have uh exactly",
    "start": "2435040",
    "end": "2441940"
  },
  {
    "text": "the same thing as before like there's going to be this make glue function it's going to take the same list of types in for the same Rock program it's just that",
    "start": "2441940",
    "end": "2447460"
  },
  {
    "text": "this time I'm going to write the implementation so that instead of spitting out rust code it's going to spit out node.js code or as we saw",
    "start": "2447460",
    "end": "2453579"
  },
  {
    "text": "earlier realistically some combination of node.js sort of wrapper code and mostly a lot of C code that's going to",
    "start": "2453579",
    "end": "2458619"
  },
  {
    "text": "do the actual heavy lifting of the conversions because node.js has a way to go from C to working node.js stuff",
    "start": "2458619",
    "end": "2465339"
  },
  {
    "text": "um and then at the end of the day I will end up with something that sort of gives me both of those things put together so",
    "start": "2465339",
    "end": "2471160"
  },
  {
    "text": "that inside uh node.js it's going to actually be calling this sort of generated C function instead of writing",
    "start": "2471160",
    "end": "2478000"
  },
  {
    "text": "it by hand much nicer to have Rock glue generated and then it's going to do the conversions and instead of calling Ruby",
    "start": "2478000",
    "end": "2483760"
  },
  {
    "text": "dot product it'll call The Rock dot product and as a bonus we can also have it spit",
    "start": "2483760",
    "end": "2489400"
  },
  {
    "text": "out typescript type definitions because again make glue just gets all the rock types so it's like what's the equivalent of the typescript type that we're going",
    "start": "2489400",
    "end": "2495640"
  },
  {
    "text": "to have here it's like oh yeah well we have a rock string that's going to correspond to a typescript string Etc so you can build both the implementation",
    "start": "2495640",
    "end": "2502300"
  },
  {
    "text": "and the type annotations so that if you're using typescript rather than JavaScript as an increasing number of people are you still get to have your",
    "start": "2502300",
    "end": "2509079"
  },
  {
    "text": "nice type safety when you're calling your rock function and again that's even if you don't happen to put any annotations on the Rock side",
    "start": "2509079",
    "end": "2515920"
  },
  {
    "text": "um so here's what that typescript type definition would look like something like this again it's the same sort of input information it's just that instead",
    "start": "2515920",
    "end": "2521800"
  },
  {
    "text": "of generating a DOT rust file it's generating some js stuff and some typescript type definitions",
    "start": "2521800",
    "end": "2527140"
  },
  {
    "text": "cool so at the end of the day I mean we had this really nice experience coming from uh Scala to Java where I just had",
    "start": "2527140",
    "end": "2533560"
  },
  {
    "text": "import this Java code and I can just immediately call it as type checked and everything's really nice that was a",
    "start": "2533560",
    "end": "2538720"
  },
  {
    "text": "really great experience the one downside is that it kind of doesn't generalize I mean if you go from Scala to Java yes you have this really nice experience if",
    "start": "2538720",
    "end": "2545020"
  },
  {
    "text": "you go from Scala to node.jsa it's a totally different experience now you have to get you know all the stuff going",
    "start": "2545020",
    "end": "2551260"
  },
  {
    "text": "on that you didn't have to before the nice thing about this is that here we've after running this one command ended up",
    "start": "2551260",
    "end": "2557800"
  },
  {
    "text": "with basically the same user experience where it's like yeah I just import this thing from here it's still type checked",
    "start": "2557800",
    "end": "2563200"
  },
  {
    "text": "it's the same amount of code to import it yes there was some generated code behind the scenes but I didn't have to write that I just used this",
    "start": "2563200",
    "end": "2568960"
  },
  {
    "text": "off-the-shelf script that somebody made to convert between Rock and node Rock and rust Rock and Zig whatever the two",
    "start": "2568960",
    "end": "2575200"
  },
  {
    "text": "languages are that you want to you know convert between Rock and and we've tried to make this as easy as possible including for the people authoring those",
    "start": "2575200",
    "end": "2581619"
  },
  {
    "text": "conversions by just building this right into the compiler um so we're sort of trying to get as close as we can to sort of like holy",
    "start": "2581619",
    "end": "2588700"
  },
  {
    "text": "grail of the nicest experience possible for calling functions across languages so that you can call Rock from other",
    "start": "2588700",
    "end": "2594099"
  },
  {
    "text": "languages really easily and uh this you know works for for typescript and JavaScript in the same process as fast",
    "start": "2594099",
    "end": "2600460"
  },
  {
    "text": "as possible with the minimal amount of overhead that we can yes they're probably in this actual implementation",
    "start": "2600460",
    "end": "2605680"
  },
  {
    "text": "is going to be some C intermediaries but there doesn't have to be if somebody wanted to they really could go all the way to saying this thing is going to",
    "start": "2605680",
    "end": "2612160"
  },
  {
    "text": "implement going straight from typescript to rock if that's what they decided to go with um I should mention that I recently",
    "start": "2612160",
    "end": "2618520"
  },
  {
    "text": "started working at a company called vendor um and this is something we are literally going to be using at work is typescript calling Rock and the reason",
    "start": "2618520",
    "end": "2625480"
  },
  {
    "text": "we're doing this is because we are interested in migrating from typescript to rock um we have a big typescript code base but we're really big into functional",
    "start": "2625480",
    "end": "2631540"
  },
  {
    "text": "programming uh we have a huge Elm front end so if you're interested in Elm uh check us out um and we want to be moving to something",
    "start": "2631540",
    "end": "2637180"
  },
  {
    "text": "more functional on the back end like rock uh and there's a whole bunch of reasons for that that I'm not going to get into here but basically the way that",
    "start": "2637180",
    "end": "2644260"
  },
  {
    "text": "we want to do this is incrementally we don't want to have to like sit down you know sit down and do a big rewrite how often does that work but what's much",
    "start": "2644260",
    "end": "2649839"
  },
  {
    "text": "nicer is hey what if we could just start importing Rock functions and just start writing them right away that's the goal",
    "start": "2649839",
    "end": "2655660"
  },
  {
    "text": "is just to be able to incrementally transition from this Legacy technology that we want to move away from namely",
    "start": "2655660",
    "end": "2660760"
  },
  {
    "text": "typescript towards something we want to be using which is rock and this is a really nice way to do it",
    "start": "2660760",
    "end": "2665980"
  },
  {
    "text": "um by the way if this sounds interesting you'd like to come work with me at vendor uh check out this website vendor.com careers",
    "start": "2665980",
    "end": "2672280"
  },
  {
    "text": "um but basically um if if you're interested in calling functions across languages we talked about three",
    "start": "2672280",
    "end": "2678339"
  },
  {
    "text": "different ways of doing this so we talked about the network inter-process communication and the same process now there are definitely some trade-offs",
    "start": "2678339",
    "end": "2684400"
  },
  {
    "text": "here so um something we didn't really talk about was to talk through briefly is going across the network look machines are",
    "start": "2684400",
    "end": "2689800"
  },
  {
    "text": "stateful right servers can be down network errors can happen there's deployment timing issues where you can have the wrong version running of",
    "start": "2689800",
    "end": "2695440"
  },
  {
    "text": "different things in a process communication there's also State across processes so process can be down the one",
    "start": "2695440",
    "end": "2701440"
  },
  {
    "text": "process can be running a different version of the binary than you thought it was same process doesn't have those problems but even within the same",
    "start": "2701440",
    "end": "2707200"
  },
  {
    "text": "process we have these stateful runtimes right we have the node.js runtime we have the Ruby runtime that has a staple",
    "start": "2707200",
    "end": "2713020"
  },
  {
    "text": "garbage collector actually rock is designed to be have a stateless runtime so you don't have to deal with those problems but in general this is",
    "start": "2713020",
    "end": "2718839"
  },
  {
    "text": "something that you typically have to to deal with when you're trying to call functions um across languages now having said that we",
    "start": "2718839",
    "end": "2726220"
  },
  {
    "text": "did talk about how same process is the fastest but one of the trade-offs we didn't talk about is that when you're doing all this seed stuff under the hood",
    "start": "2726220",
    "end": "2732160"
  },
  {
    "text": "like with the ones and zeros if you mess up and there's an explosion you know like we talked about like getting the numbers wrong that's going to take out",
    "start": "2732160",
    "end": "2738520"
  },
  {
    "text": "your whole process which can be really bad if you're trying to do crawling functions across languages for example",
    "start": "2738520",
    "end": "2743560"
  },
  {
    "text": "for editor extensions so this is why the language server protocol actually chooses to use inter-process",
    "start": "2743560",
    "end": "2748960"
  },
  {
    "text": "communication even though there's a bit more overhead compared to doing in the same process so that if you have all these extensions and they're all running",
    "start": "2748960",
    "end": "2754720"
  },
  {
    "text": "different languages some of which might be C or rust or Zig or languages that can directly manipulate ones and zeros",
    "start": "2754720",
    "end": "2760000"
  },
  {
    "text": "if one of those messes up and would corrupt memory or would cause a segmentation fault it doesn't take out",
    "start": "2760000",
    "end": "2765460"
  },
  {
    "text": "the entire editor it's isolated to that one process so you see okay yes that stateful process is dead now or or has",
    "start": "2765460",
    "end": "2771280"
  },
  {
    "text": "gotten into a bad state but it's okay we can recover from that gracefully and just say hey your extension crashed rather than your entire editor just",
    "start": "2771280",
    "end": "2777220"
  },
  {
    "text": "going away um by the way there's some ways you can do this with webassembly webassembly doesn't like automatically protect you",
    "start": "2777220",
    "end": "2782680"
  },
  {
    "text": "against these things but it does give you more control depending on your particular web assembly runtime so that might be an interesting way you could in",
    "start": "2782680",
    "end": "2789040"
  },
  {
    "text": "the same process get some of those same kinds of guarantees but again it really depends on the particular web assembly runtime you're using it doesn't",
    "start": "2789040",
    "end": "2795339"
  },
  {
    "text": "automatically protect you from those um finally worth noting that the network has some upsides too which is that yes",
    "start": "2795339",
    "end": "2801520"
  },
  {
    "text": "there is definitely some overhead associated with making calls over the network and if you're just doing a small dot product I probably would not",
    "start": "2801520",
    "end": "2806800"
  },
  {
    "text": "recommend it but it is important to note that once you go over the network you can now distribute whatever your function call is across multiple",
    "start": "2806800",
    "end": "2813099"
  },
  {
    "text": "machines like I can now say I want to make this call to maybe it's your gigantic dot product and I can get a",
    "start": "2813099",
    "end": "2818740"
  },
  {
    "text": "whole Fleet of servers working on it that doesn't really work it's not available or in a process communication or especially not the same process so",
    "start": "2818740",
    "end": "2825819"
  },
  {
    "text": "again it's programming there's lots of trade-offs everywhere so it's worth knowing and sort of understanding the trade-offs between all these approaches",
    "start": "2825819",
    "end": "2831640"
  },
  {
    "text": "um especially if previously you'd only had one in your toolbox like going over the network because it's just so common in everyday programming",
    "start": "2831640",
    "end": "2837880"
  },
  {
    "text": "okay so to sum up everything we talked about started with hey this is sorry I",
    "start": "2837880",
    "end": "2843220"
  },
  {
    "text": "found myself in so often this particular task that I'm doing would be a lot easier if I could do use it another language to solve it maybe I want a",
    "start": "2843220",
    "end": "2849460"
  },
  {
    "text": "library that's another language maybe it's in Fortran who knows maybe I want more performance that I can get here like rock is designed to be quite a high",
    "start": "2849460",
    "end": "2855339"
  },
  {
    "text": "performance language but if I'm starting from something like Ruby maybe I want to drop down into another language to give me some extra speed I want more",
    "start": "2855339",
    "end": "2861700"
  },
  {
    "text": "ergonomics perhaps at the expensive speed I'm writing a bunch of C or C plus plus code I'm like oh I really would love some python right here",
    "start": "2861700",
    "end": "2868300"
  },
  {
    "text": "um just to make this a little bit simpler um to develop even at the expensive speed or maybe I'm just like we are at",
    "start": "2868300",
    "end": "2874000"
  },
  {
    "text": "vendor trying to incrementally transition languages and we don't want to have to do it all in one Fell Swoop and have it be an all or nothing big",
    "start": "2874000",
    "end": "2879400"
  },
  {
    "text": "project that's very risky we want to do in a very low risk way and just say hey let's just start using a little bit of rock here a little bit of rock there and",
    "start": "2879400",
    "end": "2884859"
  },
  {
    "text": "then eventually over time more and more of a percentage of our code base will become Rock and then eventually we can just get to the point where we're just",
    "start": "2884859",
    "end": "2890380"
  },
  {
    "text": "using it and enjoying the language that we're using so now you have some more Tools in your toolbox if you want to be calling",
    "start": "2890380",
    "end": "2896619"
  },
  {
    "text": "functions across languages thanks very much",
    "start": "2896619",
    "end": "2901020"
  },
  {
    "text": "thank you",
    "start": "2905200",
    "end": "2907380"
  }
]