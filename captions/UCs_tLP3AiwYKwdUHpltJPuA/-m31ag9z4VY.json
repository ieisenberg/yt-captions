[
  {
    "start": "0",
    "end": "130000"
  },
  {
    "text": "Maybe even before I introduce you, we're using\nRiverside here.",
    "start": "18109",
    "end": "22750"
  },
  {
    "text": "Is Riverside running on Erlang?",
    "start": "22750",
    "end": "24619"
  },
  {
    "text": "I'm not aware of [that].",
    "start": "24619",
    "end": "27359"
  },
  {
    "text": "But I think there are quite a few streaming\nplatforms and frameworks written in Erlang,",
    "start": "27360",
    "end": "36620"
  },
  {
    "text": "and Elixir, which can be used...",
    "start": "36620",
    "end": "38489"
  },
  {
    "text": "I think we were working with Oval which was\nnumber two after Skype many years ago.",
    "start": "38489",
    "end": "46079"
  },
  {
    "text": "All of the connections of the video stream\nwere set up by Erlang.",
    "start": "46079",
    "end": "52000"
  },
  {
    "text": "Cisco and Ericsson's video systems are all\nErlang-based.",
    "start": "52000",
    "end": "58549"
  },
  {
    "text": "There is a membrane which is a video streaming\nframework, which can be integrated and is",
    "start": "58549",
    "end": "66350"
  },
  {
    "text": "written in Elixir.",
    "start": "66350",
    "end": "67350"
  },
  {
    "text": "There are many, many, many others out there\nas well.",
    "start": "67350",
    "end": "70950"
  },
  {
    "text": "So, at the end of the day, I think video streaming,\nall you're doing is instead of connecting",
    "start": "70950",
    "end": "76180"
  },
  {
    "text": "to phone calls, you're connecting a few video\nstreams.",
    "start": "76180",
    "end": "79450"
  },
  {
    "text": "So, you know, the business logic is very much\nthe same. ",
    "start": "79450",
    "end": "82219"
  },
  {
    "text": "That makes sense.",
    "start": "82220",
    "end": "84010"
  },
  {
    "text": "Before we get too far here, may I ask you\nto introduce yourself?",
    "start": "84010",
    "end": "87120"
  },
  {
    "text": "So I'm Francesco Cesarini, the founder and\ntechnical director at Erlang Solutions.",
    "start": "87120",
    "end": "91560"
  },
  {
    "text": "I've been working with Erlang, you know, back\nsince the '90s, the mid-90s.",
    "start": "91560",
    "end": "99780"
  },
  {
    "text": "And I'm very fortunate to have seen a programming\nlanguage becomes an ecosystem of languages.",
    "start": "99780",
    "end": "105790"
  },
  {
    "text": "If you would have asked me back in '95, if\nI was still working with Erlang in 2022, I",
    "start": "105790",
    "end": "112210"
  },
  {
    "text": "would have said probably not, but I still\nam, and we're still kind of solving problems",
    "start": "112210",
    "end": "120040"
  },
  {
    "text": "that were relevant then and probably even\nmore relevant today.",
    "start": "120040",
    "end": "125350"
  },
  {
    "text": "Yes.",
    "start": "125350",
    "end": "126350"
  },
  {
    "text": "Well, welcome to our Little Unscripted series.",
    "start": "126350",
    "end": "130630"
  },
  {
    "start": "130000",
    "end": "262000"
  },
  {
    "text": "You said '95, the mid-90s, Erlang is way older\nthan that, isn't it?",
    "start": "130630",
    "end": "137950"
  },
  {
    "text": "Well, Erlang, the language itself, started\nworking in the late '80s.",
    "start": "137950",
    "end": "145140"
  },
  {
    "text": "What the computer science laboratory was trying\nto do is figure out, how do we program the",
    "start": "145140",
    "end": "149401"
  },
  {
    "text": "next generation of telecom switches?",
    "start": "149401",
    "end": "151840"
  },
  {
    "text": "It took them a few years.",
    "start": "151840",
    "end": "154580"
  },
  {
    "text": "I think the first real fast virtual machine\nwas ready in '91.",
    "start": "154580",
    "end": "162450"
  },
  {
    "text": "Then in 1992 they just started developing\nthe first product, which was then released",
    "start": "162450",
    "end": "167200"
  },
  {
    "text": "in '94.",
    "start": "167200",
    "end": "169090"
  },
  {
    "text": "So I'd say '94, '95 is when it was ready to\nbe used outside of the lab and it started",
    "start": "169090",
    "end": "177760"
  },
  {
    "text": "becoming mainstream and started being used\nwithin some of the major projects within Ericsson.",
    "start": "177760",
    "end": "182030"
  },
  {
    "text": "Ok.",
    "start": "182030",
    "end": "183030"
  },
  {
    "text": "I thought it started in the '80s, but I was\nwrong.",
    "start": "183030",
    "end": "186650"
  },
  {
    "text": "Is it a coincidence that Erlang I suppose,\nhas something to do with the Ericsson language…",
    "start": "186650",
    "end": "194849"
  },
  {
    "text": "is it a pure coincidence that there was a\nDanish professor, I think his name was Agner",
    "start": "194849",
    "end": "202580"
  },
  {
    "text": "Krarup Erlang or something like that, who\ninvented some queueing theory?",
    "start": "202580",
    "end": "207850"
  },
  {
    "text": "Is there a connection there?",
    "start": "207850",
    "end": "209819"
  },
  {
    "text": "There's a connection.",
    "start": "209819",
    "end": "211239"
  },
  {
    "text": "Erlang was named after Agner Krarup Erlang,\nthe Danish mathematician.",
    "start": "211239",
    "end": "216130"
  },
  {
    "text": "So for those of you who don't know him, he\nwas a founder of a kind of tele theory, the",
    "start": "216130",
    "end": "222900"
  },
  {
    "text": "telephony theory.",
    "start": "222900",
    "end": "224569"
  },
  {
    "text": "He created the Erlang formula, which is the\nformula used to figure out if, you know, all",
    "start": "224569",
    "end": "230861"
  },
  {
    "text": "of the lines within a particular call center\nare busy at any point in time.",
    "start": "230861",
    "end": "236250"
  },
  {
    "text": "But as Ericsson management was paying for\nthe development of Erlang, they made Ericsson",
    "start": "236250",
    "end": "242190"
  },
  {
    "text": "management believe that it was named after\nEricsson.",
    "start": "242190",
    "end": "245629"
  },
  {
    "text": "So Eric Lang, Erlang, you know.",
    "start": "245629",
    "end": "249550"
  },
  {
    "text": "So, management thinks it was named after Ericsson.",
    "start": "249550",
    "end": "253720"
  },
  {
    "text": "Those on the inside know it was named after\nthe mathematician.",
    "start": "253720",
    "end": "256340"
  },
  {
    "text": "Interesting.",
    "start": "256340",
    "end": "257518"
  },
  {
    "text": "Interesting.",
    "start": "257519",
    "end": "258709"
  },
  {
    "text": "So Erlang, Ericsson language, that's more\nlike marketing.",
    "start": "258709",
    "end": "262710"
  },
  {
    "start": "262000",
    "end": "405000"
  },
  {
    "text": "Interesting.",
    "start": "262710",
    "end": "263710"
  },
  {
    "text": "How does it work?",
    "start": "263710",
    "end": "264710"
  },
  {
    "text": "Actually, what are the deep secrets of the\nlanguage?",
    "start": "264710",
    "end": "269490"
  },
  {
    "text": "Well Erlang itself is just a programming language.",
    "start": "269490",
    "end": "271910"
  },
  {
    "text": "I think there are three things, which when\nput together give you the secret sauce.",
    "start": "271910",
    "end": "280449"
  },
  {
    "text": "One of them is the BEAM virtual machine. ",
    "start": "280449",
    "end": "283129"
  },
  {
    "text": "It's a virtual machine that is highly optimized\nfor large-scale concurrency.",
    "start": "283129",
    "end": "290419"
  },
  {
    "text": "It's been optimized to scale multiple architectures.",
    "start": "290419",
    "end": "295999"
  },
  {
    "text": "And recently they've added that just in time\nthe JIT compiler.",
    "start": "295999",
    "end": "301270"
  },
  {
    "text": "So that's one-third, I think, of the power.",
    "start": "301270",
    "end": "303569"
  },
  {
    "text": "The other third is something we call OTP.",
    "start": "303569",
    "end": "307619"
  },
  {
    "text": "OTP is a middleware way of abstracting from\nthe concurrency models, which increases the",
    "start": "307619",
    "end": "316259"
  },
  {
    "text": "programmer's productivity.",
    "start": "316259",
    "end": "317259"
  },
  {
    "text": "But also on top of increasing the programming\nproductivity, they hide all of the tricky",
    "start": "317259",
    "end": "321460"
  },
  {
    "text": "parts of dealing with full tolerance and with\nconcurrency.",
    "start": "321460",
    "end": "326300"
  },
  {
    "text": "So by using OTP and by using the programming\nprinciples, your systems will scale and by",
    "start": "326300",
    "end": "333649"
  },
  {
    "text": "default, be resilient.",
    "start": "333649",
    "end": "335810"
  },
  {
    "text": "Then the third is I would not even say Erlang\nitself, but the semantics of the programming",
    "start": "335810",
    "end": "341039"
  },
  {
    "text": "language of the Erlang programming language.",
    "start": "341039",
    "end": "342619"
  },
  {
    "text": "These are semantics, which most languages\nrunning on the BEAM today, so including Elixir,",
    "start": "342619",
    "end": "350150"
  },
  {
    "text": "by default, inherit. ",
    "start": "350150",
    "end": "351310"
  },
  {
    "text": "Those three together, that's when you get\nthe real power of the ecosystem.",
    "start": "351310",
    "end": "359849"
  },
  {
    "text": "And just to quote Joe Armstrong, you can copy\nthe libraries — which is what's happened",
    "start": "359849",
    "end": "366149"
  },
  {
    "text": "with OTP on the JVM or in dotnet, and many\nothers...",
    "start": "366149",
    "end": "371970"
  },
  {
    "text": "Let me say, I've seen it being copied in Java\nand many other programming language ecosystems",
    "start": "371970",
    "end": "378210"
  },
  {
    "text": "— so you can copy the libraries, but if\nit doesn't run on the BEAM, you cannot emulate",
    "start": "378210",
    "end": "383849"
  },
  {
    "text": "the semantics.",
    "start": "383849",
    "end": "386830"
  },
  {
    "text": "It's the three put together which give you\nthe full power.",
    "start": "386830",
    "end": "390249"
  },
  {
    "text": "And the semantics of the language have a very\ntight one-to-one mapping with the operations",
    "start": "390249",
    "end": "396410"
  },
  {
    "text": "of the virtual machine.",
    "start": "396410",
    "end": "398389"
  },
  {
    "text": "Then OTP is built on top of that to facilitate\nand hide complexity from the programmer.",
    "start": "398389",
    "end": "405280"
  },
  {
    "start": "405000",
    "end": "590000"
  },
  {
    "text": "So the idea that Elixir is the new generation\nof Erlang, that's not true.",
    "start": "405280",
    "end": "416440"
  },
  {
    "text": "It's another language running on the same\nVM.",
    "start": "416440",
    "end": "420710"
  },
  {
    "text": "That is correct.",
    "start": "420710",
    "end": "422169"
  },
  {
    "text": "Well, Elixir compiles to Erlang.",
    "start": "422169",
    "end": "425919"
  },
  {
    "text": "That was a choice, I think, because Everlean\ndid consciously, to be able to utilize all",
    "start": "425919",
    "end": "433099"
  },
  {
    "text": "of the tooling and libraries, which existed\nin the Erlang ecosystem when he went in and",
    "start": "433099",
    "end": "442620"
  },
  {
    "text": "created Elixir.",
    "start": "442620",
    "end": "444550"
  },
  {
    "text": "And so, I would almost call Elixir a new version\nof Erlang with a slightly different syntax,",
    "start": "444550",
    "end": "455198"
  },
  {
    "text": "different tooling and a different development\napproach to what we're used to in the Erlang",
    "start": "455199",
    "end": "459909"
  },
  {
    "text": "world.",
    "start": "459909",
    "end": "461490"
  },
  {
    "text": "And by doing this, by improving the tooling,\nby providing a framework, which was specific",
    "start": "461490",
    "end": "470719"
  },
  {
    "text": "to certain types of problems, he opened, you\nknow, the power of Erlang to a wide range",
    "start": "470719",
    "end": "475520"
  },
  {
    "text": "of developers, for which, you know, it wouldn't\nhave been accessible otherwise.",
    "start": "475520",
    "end": "480069"
  },
  {
    "text": "Yes, that's true because I have a feeling\nthat Elixir, as you say, it's addressing a",
    "start": "480069",
    "end": "488539"
  },
  {
    "text": "completely new audience as compared to let's\ncall it the original Erlang.",
    "start": "488539",
    "end": "494229"
  },
  {
    "text": "Correct.",
    "start": "494229",
    "end": "495229"
  },
  {
    "text": "Correct.",
    "start": "495229",
    "end": "496229"
  },
  {
    "text": "Absolutely.",
    "start": "496229",
    "end": "497229"
  },
  {
    "text": "You're perfectly right there.",
    "start": "497229",
    "end": "501360"
  },
  {
    "text": "He did a fantastic job.",
    "start": "501360",
    "end": "507770"
  },
  {
    "text": "I always ask programming language inventors,\nwhy did you invent language X, Y, or Z?",
    "start": "507770",
    "end": "513010"
  },
  {
    "text": "And when asked that question, his answer was,\nI wanted to open up the power of Erlang, and",
    "start": "513010",
    "end": "522599"
  },
  {
    "text": "Erlang virtual machine, so the BEAM to a much\nlarger, a wider range of programmers.",
    "start": "522600",
    "end": "530910"
  },
  {
    "text": "And more specifically, I think the first time\nasking that question, his focus was on web",
    "start": "530910",
    "end": "534852"
  },
  {
    "text": "developers.",
    "start": "534852",
    "end": "535852"
  },
  {
    "text": "So how do I bring the power of Erlang to the\nweb development world?",
    "start": "535852",
    "end": "540920"
  },
  {
    "text": "Web developers and Erlang developers, it's\ntelecom versus web, it's two completely different",
    "start": "540920",
    "end": "546990"
  },
  {
    "text": "problems we were solving.",
    "start": "546990",
    "end": "549839"
  },
  {
    "text": "These two different problems require completely\ndifferent approaches.",
    "start": "549839",
    "end": "552709"
  },
  {
    "text": "So, they require different toolings, different\nlibraries, different frameworks.",
    "start": "552709",
    "end": "559759"
  },
  {
    "text": "That also explains why our attempts of trying\nto bring Erlang to the web failed back in",
    "start": "559759",
    "end": "567050"
  },
  {
    "text": "the mid-2000s.",
    "start": "567050",
    "end": "568050"
  },
  {
    "text": "You know, there were a lot of web frameworks\nwritten in Erlang web — I think there are",
    "start": "568050",
    "end": "577190"
  },
  {
    "text": "web servers — but none of them addressed\nthe requirements of the web developers at",
    "start": "577190",
    "end": "582580"
  },
  {
    "text": "the time.",
    "start": "582580",
    "end": "583580"
  },
  {
    "text": "Instead, what they did is they address the\nrequirements of those near developing telco",
    "start": "583580",
    "end": "589129"
  },
  {
    "text": "infrastructure.",
    "start": "589129",
    "end": "590540"
  },
  {
    "start": "590000",
    "end": "1107000"
  },
  {
    "text": "How does fault tolerance work in OTP?",
    "start": "590540",
    "end": "593600"
  },
  {
    "text": "Yes, so more than OTP, I think the fault tolerance\nis a very simple notion that you know, you've",
    "start": "593600",
    "end": "601250"
  },
  {
    "text": "got processes and processes do not share state.",
    "start": "601250",
    "end": "605730"
  },
  {
    "text": "They do not share memory.",
    "start": "605730",
    "end": "609750"
  },
  {
    "text": "So what that means is you can have many processes\nrunning at the same time, and if a process...",
    "start": "609750",
    "end": "614490"
  },
  {
    "text": "If something goes wrong in a process, so if\nthere's a bug in the code, the process is",
    "start": "614490",
    "end": "620040"
  },
  {
    "text": "running or the data gets corrupted, you just\nterminate that particular process.",
    "start": "620040",
    "end": "626600"
  },
  {
    "text": "By terminating that process, all the other\nprocesses around it, which are not dependent",
    "start": "626600",
    "end": "630470"
  },
  {
    "text": "on it, are not affected.",
    "start": "630470",
    "end": "632540"
  },
  {
    "text": "So imagine that you've got thousands of phone\ncalls going through your system, each phone",
    "start": "632540",
    "end": "640880"
  },
  {
    "text": "call is a process.",
    "start": "640880",
    "end": "643390"
  },
  {
    "text": "And if something goes wrong with one particular\nphone call, you lose that phone call, you",
    "start": "643390",
    "end": "649689"
  },
  {
    "text": "lose that connection, the other phone calls\naren't affected.",
    "start": "649689",
    "end": "653240"
  },
  {
    "text": "So that's a core principle of processes and\nprocesses not sharing state.",
    "start": "653240",
    "end": "659800"
  },
  {
    "text": "We then take these processes and re-group\nthem into what we call supervision trees.",
    "start": "659800",
    "end": "669319"
  },
  {
    "text": "A supervision tree is a process whose only\ntask is to supervise other processes.",
    "start": "669319",
    "end": "678220"
  },
  {
    "text": "When supervising these other processes, if\na process fails, the supervisor is immediately",
    "start": "678220",
    "end": "685180"
  },
  {
    "text": "notified of it and can react.",
    "start": "685180",
    "end": "688180"
  },
  {
    "text": "It can decide how to go in and deal with that\nfailure.",
    "start": "688180",
    "end": "694470"
  },
  {
    "text": "Could we try to restart that process and reconnect\nthat phone call or do we just ignore it, or",
    "start": "694470",
    "end": "702439"
  },
  {
    "text": "are all of the other processes somehow...",
    "start": "702440",
    "end": "705120"
  },
  {
    "text": "I mean, maybe it was a group call. ",
    "start": "705120",
    "end": "707060"
  },
  {
    "text": "It was the host process that terminated, and\nit goes in and decides maybe we should terminate",
    "start": "707060",
    "end": "711920"
  },
  {
    "text": "all of the other connections, you know, and\nthen restart them.",
    "start": "711920",
    "end": "715810"
  },
  {
    "text": "By doing that, what you're doing is you're\nremoving failure and error handling from the",
    "start": "715810",
    "end": "721820"
  },
  {
    "text": "hands of the programmer, and you're generalizing\nit.",
    "start": "721820",
    "end": "725520"
  },
  {
    "text": "So, you might have heard the whole let it\ncrash approach.",
    "start": "725520",
    "end": "730149"
  },
  {
    "text": "That's what we refer to in the Erlang world.",
    "start": "730149",
    "end": "731870"
  },
  {
    "text": "When we let processes crash, we don't mean\nthat you ignore a failure or we encourage",
    "start": "731870",
    "end": "738089"
  },
  {
    "text": "it.",
    "start": "738089",
    "end": "739089"
  },
  {
    "text": "It's just that we had to handle these errors\nin a slightly different way.",
    "start": "739089",
    "end": "742060"
  },
  {
    "text": "And by handling them more generically, that's\nhow we create this fault tolerance.",
    "start": "742060",
    "end": "749709"
  },
  {
    "text": "We isolate failure and then we escalate it\nonly when necessary, and we control it centrally,",
    "start": "749709",
    "end": "758220"
  },
  {
    "text": "in a generic way.",
    "start": "758220",
    "end": "762569"
  },
  {
    "text": "This greatly simplifies the code base comparisons\nwith Erlang's C++ code, where they went in",
    "start": "762569",
    "end": "772209"
  },
  {
    "text": "and implemented the same problem in Erlang\nin C++ resulted.",
    "start": "772209",
    "end": "776779"
  },
  {
    "text": "Well, in the C++ codebase, about 25 percent\nof the codebase was error handling and fault",
    "start": "776779",
    "end": "787720"
  },
  {
    "text": "tolerance.",
    "start": "787720",
    "end": "788750"
  },
  {
    "text": "The equivalent in the Erlang codebase was\nabout 1 percent.",
    "start": "788750",
    "end": "791810"
  },
  {
    "text": "So, there's a huge difference in the codebase.",
    "start": "791810",
    "end": "795999"
  },
  {
    "text": "So just by going down the Erlang route, your\nsystem becomes fully tolerant, but you'll",
    "start": "795999",
    "end": "800610"
  },
  {
    "text": "also reduce your codebase by around 25 percent.",
    "start": "800610",
    "end": "803300"
  },
  {
    "text": "I don't know if that makes sense but...",
    "start": "803300",
    "end": "806209"
  },
  {
    "text": "Well, it does if that's like exception handling\nis just being propagated out to the bookkeeper.",
    "start": "806210",
    "end": "815810"
  },
  {
    "text": "That is correct.",
    "start": "815810",
    "end": "816810"
  },
  {
    "text": "Exactly.",
    "start": "816810",
    "end": "817810"
  },
  {
    "text": "So we just pushed all of the exception handlings\nto the supervisor.",
    "start": "817810",
    "end": "821399"
  },
  {
    "text": "The supervisor handles it in a standardized\nway, instead of letting the programmer deal",
    "start": "821399",
    "end": "826430"
  },
  {
    "text": "with exceptions because again if you have\nan exception, you don't know why you got that",
    "start": "826430",
    "end": "831120"
  },
  {
    "text": "exception, how do you deal with it?",
    "start": "831120",
    "end": "832779"
  },
  {
    "text": "You don't know how to deal with it because\nif you knew, it wouldn't be there in the first",
    "start": "832779",
    "end": "836750"
  },
  {
    "text": "place.",
    "start": "836750",
    "end": "837750"
  },
  {
    "text": "So by generalizing how exception handling\nis managed, yeah, you get rid of exceptions",
    "start": "837750",
    "end": "844519"
  },
  {
    "text": "or you become a very, very rare occurrence.",
    "start": "844519",
    "end": "847870"
  },
  {
    "text": "Akka, like Akka.NET or whatever frameworks\nthere are.",
    "start": "847870",
    "end": "852589"
  },
  {
    "text": "Yes.",
    "start": "852589",
    "end": "853589"
  },
  {
    "text": "They're very much inspired by this, right?",
    "start": "853589",
    "end": "856029"
  },
  {
    "text": "That is like coming directly out of the Erlang\nworld even.",
    "start": "856029",
    "end": "861149"
  },
  {
    "text": "That is correct.",
    "start": "861149",
    "end": "862149"
  },
  {
    "text": "I mean, Jonas Bonér...",
    "start": "862149",
    "end": "863149"
  },
  {
    "text": "So that is replicating...",
    "start": "863149",
    "end": "864149"
  },
  {
    "text": "Go ahead.",
    "start": "864149",
    "end": "865149"
  },
  {
    "text": "That is correct.",
    "start": "865149",
    "end": "866149"
  },
  {
    "text": "So Jonas Bonér started implementing Akka\nwhen he was working as a consultant on the",
    "start": "866149",
    "end": "867670"
  },
  {
    "text": "customer project, and the customer wouldn't\nallow you to use Erlang to solve a particular",
    "start": "867670",
    "end": "872110"
  },
  {
    "text": "problem.",
    "start": "872110",
    "end": "873110"
  },
  {
    "text": "So he got so frustrated that he took OTP and\nthe whole error handling in OTP and started",
    "start": "873110",
    "end": "880420"
  },
  {
    "text": "porting it to the JVM.",
    "start": "880420",
    "end": "884930"
  },
  {
    "text": "I think he did an amazing job at bringing\nit to the JVM.",
    "start": "884930",
    "end": "890320"
  },
  {
    "text": "It's not for the faint of heart because the\nJVM wasn't built for...",
    "start": "890320",
    "end": "894420"
  },
  {
    "text": "The JVM was built for parallelism.",
    "start": "894420",
    "end": "898190"
  },
  {
    "text": "And what he did is he bought lightweight concurrency\nin green threads, which used to exist in Java,",
    "start": "898190",
    "end": "902810"
  },
  {
    "text": "but, you know, got removed early on to the\nJVM.",
    "start": "902810",
    "end": "910970"
  },
  {
    "text": "It's almost like, you know when I was reading\nyour original Java white paper, I had a sense",
    "start": "910970",
    "end": "915920"
  },
  {
    "text": "of deja vu, which was a virtual machine and\na concurrency model built-in memory management",
    "start": "915920",
    "end": "922540"
  },
  {
    "text": "and a garbage collector.",
    "start": "922540",
    "end": "924498"
  },
  {
    "text": "So this was in JVM, and I was working on the\nErlang virtual machine at the time.",
    "start": "924499",
    "end": "931059"
  },
  {
    "text": "But I think there's still a big difference\nbetween the Java Virtual Machine and the BEAM",
    "start": "931059",
    "end": "938769"
  },
  {
    "text": "today because to bring Akka, you know, to\nthe JVM, you wanna had to emulate a lot of",
    "start": "938769",
    "end": "949509"
  },
  {
    "text": "the semantics and a lot of the functionality\nwhich exists in the BEAM, which a BEAM is",
    "start": "949509",
    "end": "953868"
  },
  {
    "text": "highly optimized for, which doesn't exist\nin the JVM.",
    "start": "953869",
    "end": "958279"
  },
  {
    "text": "Yes.",
    "start": "958279",
    "end": "959899"
  },
  {
    "text": "All the protection spaces around processes\nneed to be replicated into a threat model",
    "start": "959899",
    "end": "967899"
  },
  {
    "text": "instead.",
    "start": "967899",
    "end": "968899"
  },
  {
    "text": "Exactly.",
    "start": "968899",
    "end": "969899"
  },
  {
    "text": "So you had to create all of that layer.",
    "start": "969899",
    "end": "972769"
  },
  {
    "text": "And even there, I think he wasn't able to\nfully create an emulator semantics, because",
    "start": "972769",
    "end": "982748"
  },
  {
    "text": "the Akka actors have to yield.",
    "start": "982749",
    "end": "985690"
  },
  {
    "text": "You're putting that in the hands of the programmers\nversus Erlang, where your processes are given",
    "start": "985690",
    "end": "995079"
  },
  {
    "text": "a certain number of operations and are allowed\nto execute, after which they automatically",
    "start": "995079",
    "end": "999630"
  },
  {
    "text": "get suspended and the next process gets to\nexecute.",
    "start": "999630",
    "end": "1003970"
  },
  {
    "text": "So you run the risk of an actor in Akka starving\nall of the other processes, all of the other",
    "start": "1003970",
    "end": "1012259"
  },
  {
    "text": "actors.",
    "start": "1012259",
    "end": "1013378"
  },
  {
    "text": "And that's not a risk you have on the BEAM,\nbecause, again, they've removed that from",
    "start": "1013379",
    "end": "1019230"
  },
  {
    "text": "the hands of the program.",
    "start": "1019230",
    "end": "1020230"
  },
  {
    "text": "The program doesn't even know how the processes\nare being scheduled and managed.",
    "start": "1020230",
    "end": "1028850"
  },
  {
    "text": "They shouldn't know.",
    "start": "1028850",
    "end": "1030209"
  },
  {
    "text": "They should just program your thinking concurrently\nand then the rest is all abstracted away from",
    "start": "1030209",
    "end": "1034720"
  },
  {
    "text": "them.",
    "start": "1034720",
    "end": "1035720"
  },
  {
    "text": "So now, it becomes really nerdy and really\ninteresting because these processes, yes,",
    "start": "1035720",
    "end": "1040900"
  },
  {
    "text": "in the BEAM, are they process supported by\nthe hardware by the CPU or is it some middle",
    "start": "1040900",
    "end": "1051990"
  },
  {
    "text": "thing between look, a real process, and a\nthread?",
    "start": "1051990",
    "end": "1056000"
  },
  {
    "text": "Yes.",
    "start": "1056000",
    "end": "1057000"
  },
  {
    "text": "So what happens is, when you start the BEAM,\nit will start a scheduler in a separate thread",
    "start": "1057000",
    "end": "1064240"
  },
  {
    "text": "for every core.",
    "start": "1064240",
    "end": "1065980"
  },
  {
    "text": "So assume you're running on a quad-core machine,\nthe BEAM will start four threads.",
    "start": "1065980",
    "end": "1074080"
  },
  {
    "text": "Each thread will run a scheduler.",
    "start": "1074080",
    "end": "1077570"
  },
  {
    "text": "Each scheduler will have its fair share of\nprocesses.",
    "start": "1077570",
    "end": "1082799"
  },
  {
    "text": "So you're assuming you're running you've got\n400 processes, each schedule will have about",
    "start": "1082799",
    "end": "1088360"
  },
  {
    "text": "100 processes each.",
    "start": "1088360",
    "end": "1090679"
  },
  {
    "text": "And then there's migration logic, which ensures\nthat the different schedulers remain fairly",
    "start": "1090679",
    "end": "1095750"
  },
  {
    "text": "balanced.",
    "start": "1095750",
    "end": "1096750"
  },
  {
    "text": "Your processes might be migrated from one\nscheduler to another.",
    "start": "1096750",
    "end": "1100140"
  },
  {
    "text": "From one thread to another, if most of the\nthreads on a particular scheduler terminate. ",
    "start": "1100140",
    "end": "1107950"
  },
  {
    "start": "1107000",
    "end": "1306000"
  },
  {
    "text": "I don't know if it still exists, but there\nused to be a sub-project, some library framework",
    "start": "1107950",
    "end": "1115889"
  },
  {
    "text": "called Lua.",
    "start": "1115890",
    "end": "1117799"
  },
  {
    "text": "Does that still exist?",
    "start": "1117799",
    "end": "1122539"
  },
  {
    "text": "This is something for the audience here.",
    "start": "1122539",
    "end": "1124820"
  },
  {
    "text": "That back then at least allowed you to run\nErlang on an iPhone.",
    "start": "1124820",
    "end": "1128278"
  },
  {
    "text": "Does that still exist?",
    "start": "1128279",
    "end": "1130149"
  },
  {
    "text": "So yes, they still exist.",
    "start": "1130149",
    "end": "1132130"
  },
  {
    "text": "It never really made it into production.",
    "start": "1132130",
    "end": "1134880"
  },
  {
    "text": "I'm not aware of any Erlang or Elixir development\non iPhones.",
    "start": "1134880",
    "end": "1141960"
  },
  {
    "text": "I think you're right, that's the subject which\nI think was handled very well by these technologies.",
    "start": "1141960",
    "end": "1151600"
  },
  {
    "text": "For the same reason as to why we failed to\nget Erlang into the web development space,",
    "start": "1151600",
    "end": "1159760"
  },
  {
    "text": "at least us historically, we were all server-side\nback-end systems.",
    "start": "1159760",
    "end": "1163930"
  },
  {
    "text": "Those are the types of problems we solved.",
    "start": "1163930",
    "end": "1167080"
  },
  {
    "text": "So, even though you could develop Erlang on\nthe phones, the types of toolings and frameworks",
    "start": "1167080",
    "end": "1173528"
  },
  {
    "text": "you needed were very, very different. ",
    "start": "1173529",
    "end": "1175649"
  },
  {
    "text": "I guess it goes very much against the idea\nof having a phone but that's another discussion.",
    "start": "1175649",
    "end": "1180300"
  },
  {
    "text": "It's like a client and another server.",
    "start": "1180300",
    "end": "1182940"
  },
  {
    "text": "But anyway, that's great.",
    "start": "1182940",
    "end": "1183950"
  },
  {
    "text": "We're seeing a lot happening now for Elixir\nmaking its way into an embedded space through",
    "start": "1183950",
    "end": "1190320"
  },
  {
    "text": "your nerves, you know, they're graphical packages,\nwhich can run on handheld computers.",
    "start": "1190320",
    "end": "1199820"
  },
  {
    "text": "And also to the point where I think we were\nrunning Erlang, and controlling the canvas",
    "start": "1199820",
    "end": "1204870"
  },
  {
    "text": "with Erlang in cars, probably 15 years ago,\nyeah, almost 15 years ago.",
    "start": "1204870",
    "end": "1210950"
  },
  {
    "text": "But it's now making it mainstream, becoming\nmainstream now where, you know, we're collecting",
    "start": "1210950",
    "end": "1217049"
  },
  {
    "text": "more and more data in the cars themselves,\nand well, in all of the IoT devices themselves.",
    "start": "1217050",
    "end": "1226029"
  },
  {
    "text": "And it's not becoming feasible anymore to\ngo out and push this data, you know, to the",
    "start": "1226029",
    "end": "1232929"
  },
  {
    "text": "Edge network and the cloud because of the\nlarge volumes of it.",
    "start": "1232929",
    "end": "1236470"
  },
  {
    "text": "So you start analyzing it in the devices themselves\nor some cases also in the Edge network, where",
    "start": "1236470",
    "end": "1244460"
  },
  {
    "text": "feasible.",
    "start": "1244460",
    "end": "1245460"
  },
  {
    "text": "So we're seeing Erlang and Elixir being used\nin those spaces more and more these days.",
    "start": "1245460",
    "end": "1251330"
  },
  {
    "text": "And I think with the work which has been done\nin the JIT compiler, which has had a huge",
    "start": "1251330",
    "end": "1255778"
  },
  {
    "text": "performance increases, and the work which\nhas happened with numerical Elixir, which",
    "start": "1255779",
    "end": "1263680"
  },
  {
    "text": "is then enabling the whole Axon framework,\nwhich is very similar to say to PyTorch, will,",
    "start": "1263680",
    "end": "1270860"
  },
  {
    "text": "I suspect you'll be seeing machine learning\nnow, moving on to the devices, onto the better",
    "start": "1270860",
    "end": "1277370"
  },
  {
    "text": "devices, in cars, in IoT devices, and to a\ncertain degree also in the radio base stations",
    "start": "1277370",
    "end": "1284610"
  },
  {
    "text": "and Edge networks.",
    "start": "1284610",
    "end": "1285610"
  },
  {
    "text": "So I think it's still early days but I think\nthere are a lot of exciting things, you know,",
    "start": "1285610",
    "end": "1291970"
  },
  {
    "text": "happening in that space.",
    "start": "1291970",
    "end": "1292990"
  },
  {
    "text": "And all the components are being put in place\nfor it to become viable and an alternative",
    "start": "1292990",
    "end": "1303020"
  },
  {
    "text": "approach in technology for machine learning.",
    "start": "1303020",
    "end": "1306080"
  },
  {
    "start": "1306000",
    "end": "1426000"
  },
  {
    "text": "Yes, how much is the Erlang universe evolving\nright now?",
    "start": "1306080",
    "end": "1310750"
  },
  {
    "text": "If we could isolate plain Erlang from Elixir,\nhow much does the original plain thing evolve",
    "start": "1310750",
    "end": "1316649"
  },
  {
    "text": "for the time being?",
    "start": "1316649",
    "end": "1317659"
  },
  {
    "text": "Very little.",
    "start": "1317659",
    "end": "1318659"
  },
  {
    "text": "Very, very little.",
    "start": "1318659",
    "end": "1319659"
  },
  {
    "text": "So, in Erlang itself, at least the programming\nlanguage, there are very few changes happening.",
    "start": "1319659",
    "end": "1328559"
  },
  {
    "text": "Most of the work I think is done around the\nlibraries, the frameworks, but also on the",
    "start": "1328559",
    "end": "1333059"
  },
  {
    "text": "BEAM virtual machine.",
    "start": "1333060",
    "end": "1334679"
  },
  {
    "text": "That's where I think a lot of the effort is\ngoing in today.",
    "start": "1334679",
    "end": "1338100"
  },
  {
    "text": "Yes",
    "start": "1338100",
    "end": "1339260"
  },
  {
    "text": "But the language itself, I mean, Ericsson,\nonce her Erlang is open source, Ericsson is",
    "start": "1339260",
    "end": "1346000"
  },
  {
    "text": "the benevolent dictator.",
    "start": "1346000",
    "end": "1348279"
  },
  {
    "text": "They've always been very conservative about\nintroducing new changes for two reasons, A,",
    "start": "1348279",
    "end": "1356399"
  },
  {
    "text": "they've got millions and millions of lines\nof code in production.",
    "start": "1356399",
    "end": "1359220"
  },
  {
    "text": "So, any, you know, backward-compatible changes\nwould have a huge impact on all the code they've",
    "start": "1359220",
    "end": "1367000"
  },
  {
    "text": "got in production.",
    "start": "1367000",
    "end": "1368000"
  },
  {
    "text": "But B, you know, if they start pushing out\nnew features, they need to support and maintain",
    "start": "1368000",
    "end": "1373140"
  },
  {
    "text": "their products.",
    "start": "1373140",
    "end": "1374140"
  },
  {
    "text": "So yes, they're very, very careful over what\ngets released.",
    "start": "1374140",
    "end": "1377870"
  },
  {
    "text": "But a lot of the work and a lot of the focus\nis on really making the BEAM scale multiple",
    "start": "1377870",
    "end": "1385150"
  },
  {
    "text": "architectures, making it fast, making it lock-free.",
    "start": "1385150",
    "end": "1389200"
  },
  {
    "text": "You're seeing it with every release, all you\nneed to do is go and...",
    "start": "1389200",
    "end": "1395059"
  },
  {
    "text": "In some cases, you don't even need to recompile\nyour BEAM code.",
    "start": "1395060",
    "end": "1400429"
  },
  {
    "text": "You just need to rerun it.",
    "start": "1400429",
    "end": "1402299"
  },
  {
    "text": "In some cases, you might have to recompile\nit.",
    "start": "1402300",
    "end": "1404580"
  },
  {
    "text": "But back in the days, we used to joke that,\nyou know, if your program wasn't fast enough,",
    "start": "1404580",
    "end": "1408580"
  },
  {
    "text": "wait 15 months and then you're buying a new\ncomputer is gonna run twice as fast.",
    "start": "1408580",
    "end": "1413640"
  },
  {
    "text": "Now, yes, it will run fast to the more cores\nyou throw at the problem, but now all you",
    "start": "1413640",
    "end": "1418860"
  },
  {
    "text": "need to do these days is just wait for a new\nversion of the BEAM and recompile your Erlang",
    "start": "1418860",
    "end": "1424460"
  },
  {
    "text": "code and it's gonna run faster than that.",
    "start": "1424460",
    "end": "1426809"
  },
  {
    "start": "1426000",
    "end": "1445000"
  },
  {
    "text": "It's gonna run faster.",
    "start": "1426809",
    "end": "1427809"
  },
  {
    "text": "Thank you.",
    "start": "1427809",
    "end": "1428809"
  },
  {
    "text": "It's been fascinating talking about this and\nI think we could go on all day.",
    "start": "1428809",
    "end": "1431018"
  }
]