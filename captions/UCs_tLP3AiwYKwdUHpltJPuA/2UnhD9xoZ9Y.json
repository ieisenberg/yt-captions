[
  {
    "text": "[Music] hi everyone uh welcome to my talk thank you for coming especially because it was",
    "start": "6990",
    "end": "13880"
  },
  {
    "text": "the last session on the data track um my name is Monica sarmu and I'm",
    "start": "13880",
    "end": "20279"
  },
  {
    "text": "working for elastic the company behind elastic search kibana and lo stash uh",
    "start": "20279",
    "end": "26840"
  },
  {
    "text": "I'm team lead at the Beats team and today I will talk about how you can monitor your containers using the",
    "start": "26840",
    "end": "32840"
  },
  {
    "text": "elastic stack so what is elastic stack elastic stack is a suite of uh open",
    "start": "32840",
    "end": "39440"
  },
  {
    "text": "source project from the bottom to up it's lock stash and bit on the engine",
    "start": "39440",
    "end": "44719"
  },
  {
    "text": "side that is basically they are collecting data from the from the network and uh pushing the data to",
    "start": "44719",
    "end": "51960"
  },
  {
    "text": "elastic search which is a search engine where you can store and do analytics of your data and then you have kibana which",
    "start": "51960",
    "end": "59039"
  },
  {
    "text": "is a UI where with which you can visualize the data and in this talk I",
    "start": "59039",
    "end": "65239"
  },
  {
    "text": "will concentrate more on on the Beats so bits are lightweight shippers",
    "start": "65239",
    "end": "71280"
  },
  {
    "text": "that install as an agent on your servers they collect all kinds of operational data and they are sending it to elastic",
    "start": "71280",
    "end": "79040"
  },
  {
    "text": "search nowadays it's uh common you usually first you start with collecting",
    "start": "79040",
    "end": "84200"
  },
  {
    "text": "the locks from uh from div servers and then you you get interested in finding",
    "start": "84200",
    "end": "90840"
  },
  {
    "text": "in monitoring the processes that are running on a container so you end up having an elastic search A diversity of",
    "start": "90840",
    "end": "98640"
  },
  {
    "text": "of data uh and even if it's a structor or un structor from different",
    "start": "98640",
    "end": "106000"
  },
  {
    "text": "sources so in the world of microservices and containers uh then where you would like",
    "start": "106000",
    "end": "113560"
  },
  {
    "text": "to have a central point where uh you collect data operational data from all",
    "start": "113560",
    "end": "119640"
  },
  {
    "text": "your your services right and so you can do a search across them and also you can",
    "start": "119640",
    "end": "125360"
  },
  {
    "text": "do analytics of them so the bit uh is consist of a suite",
    "start": "125360",
    "end": "133160"
  },
  {
    "text": "of light lightweight shippers and we have one for each data type for example",
    "start": "133160",
    "end": "139080"
  },
  {
    "text": "we have file bit for log files we have metric bit for metrics we have packet",
    "start": "139080",
    "end": "144599"
  },
  {
    "text": "bit for network data and windlock bit for Windows Event locks and if none of",
    "start": "144599",
    "end": "150080"
  },
  {
    "text": "this uh pit that we created uh doesn't get the data that you need that you can",
    "start": "150080",
    "end": "155920"
  },
  {
    "text": "create your own bit by using the bits platform and the proof is that more than",
    "start": "155920",
    "end": "161519"
  },
  {
    "text": "4 uh bits are already created by the",
    "start": "161519",
    "end": "166640"
  },
  {
    "text": "community yeah so let's start with file bit because logging is the most popular",
    "start": "166640",
    "end": "172040"
  },
  {
    "text": "use case so five bit is a loog shipper the way it works is Tails uh it tells the",
    "start": "172040",
    "end": "179000"
  },
  {
    "text": "loog files and then pushes them to elastic surch without parsing them it guarantees that each log line is sent at",
    "start": "179000",
    "end": "186640"
  },
  {
    "text": "least once to elastic search and it does that because it handles back back pressure back",
    "start": "186640",
    "end": "193159"
  },
  {
    "text": "pressure it has support for features like multi-line think of this uh big",
    "start": "193159",
    "end": "199000"
  },
  {
    "text": "Java exceptions that are on multiple lines it has to support for Json logs",
    "start": "199000",
    "end": "205280"
  },
  {
    "text": "think of U uh structure logging and also it has filtering support uh for example",
    "start": "205280",
    "end": "211439"
  },
  {
    "text": "you might be interested in uh collecting only uh the error messages the error log",
    "start": "211439",
    "end": "217439"
  },
  {
    "text": "lines and throw away all the debac loog logs that you have",
    "start": "217439",
    "end": "222879"
  },
  {
    "text": "right parsing is difficult because each application can um has each application",
    "start": "222879",
    "end": "230640"
  },
  {
    "text": "can have its own format in in printing the logs and in order to be able to uh",
    "start": "230640",
    "end": "237760"
  },
  {
    "text": "parse your loog lines then you need to kind of right uh gr patters and in",
    "start": "237760",
    "end": "243079"
  },
  {
    "text": "elastic with elastic SE there are two options to do that one option is by using the ingest no which is basically a",
    "start": "243079",
    "end": "250799"
  },
  {
    "text": "plugin for elastic search and the next option and the second option is by using",
    "start": "250799",
    "end": "256000"
  },
  {
    "text": "lock stash back pressure handling I think is",
    "start": "256000",
    "end": "262720"
  },
  {
    "text": "the most important um feature that fit has and I would like to take some um",
    "start": "262720",
    "end": "269440"
  },
  {
    "text": "couple some time to explain it why so in your common deployment you will have a bunch",
    "start": "269440",
    "end": "275320"
  },
  {
    "text": "of bits and only a few lock stes in this case there are three lock Stites and on",
    "start": "275320",
    "end": "281000"
  },
  {
    "text": "each bit you have to configure uh all the lock Stites in this case there are three lock stes and bit",
    "start": "281000",
    "end": "287720"
  },
  {
    "text": "the bit will uh will randomly choose one lock station and it will send all the",
    "start": "287720",
    "end": "293000"
  },
  {
    "text": "data to that specific loog stash and if the lock stash inst dies then it chooses randomly another one and he send",
    "start": "293000",
    "end": "300320"
  },
  {
    "text": "the data to that",
    "start": "300320",
    "end": "303240"
  },
  {
    "text": "one so the way it works is that F",
    "start": "305840",
    "end": "311320"
  },
  {
    "text": "read F read a bunch of loog lines then it send them to elastic to Lo Das then",
    "start": "311320",
    "end": "317800"
  },
  {
    "text": "waits for AK and only when receives the AK back from loog Das then it right it",
    "start": "317800",
    "end": "324960"
  },
  {
    "text": "marks the a the Lo lines the batch of Lo lines that you read as ackn",
    "start": "324960",
    "end": "330280"
  },
  {
    "text": "and write offset into um a registry file and the offset is until when uh it read",
    "start": "330280",
    "end": "337680"
  },
  {
    "text": "lock lines in in order to make sure that that the office that the offet is",
    "start": "337680",
    "end": "343560"
  },
  {
    "text": "written written on thisk then it does an fnc and uh after that it starts reading",
    "start": "343560",
    "end": "352000"
  },
  {
    "text": "again a another bunch of lock lines so what this means is that file is",
    "start": "352000",
    "end": "360000"
  },
  {
    "text": "able to adjust its speed depending on the how much how fast the next stage can",
    "start": "360000",
    "end": "366199"
  },
  {
    "text": "process the lock lines but this also comes with um the",
    "start": "366199",
    "end": "372120"
  },
  {
    "text": "you have to make sure that when you are doing benchmarking to keep in mind this",
    "start": "372120",
    "end": "377280"
  },
  {
    "text": "this thing because for example if you have a single bit and a single lock",
    "start": "377280",
    "end": "382720"
  },
  {
    "text": "stitch then might be slow if you're using the default configuration file when the next stage is down in our",
    "start": "382720",
    "end": "390680"
  },
  {
    "text": "example is lock St for example then file bit patiently Waits doesn't read any any",
    "start": "390680",
    "end": "396479"
  },
  {
    "text": "logs so it doesn't uh lose any any Lo lines it doesn't allocate memory it",
    "start": "396479",
    "end": "402599"
  },
  {
    "text": "doesn't buffer things on disk so it basically",
    "start": "402599",
    "end": "407759"
  },
  {
    "text": "Waits yeah so let's see how we can use file bit to to collect logs from the",
    "start": "409479",
    "end": "416080"
  },
  {
    "text": "containers and if we are looking to the docker login drivers there are a bunch of options and if we are looking closer",
    "start": "416080",
    "end": "424319"
  },
  {
    "text": "we will see that there is no uh login driver for loog stash and for elastic",
    "start": "424319",
    "end": "431240"
  },
  {
    "text": "stack in general we initially wanted to create one but we soon decided that we won't be",
    "start": "431240",
    "end": "438840"
  },
  {
    "text": "able we realized that we won't be able to create uh to guarantee that each lock",
    "start": "438840",
    "end": "444120"
  },
  {
    "text": "line is sent at least once that will mean that we will complicate right the lock uh the lockin",
    "start": "444120",
    "end": "451680"
  },
  {
    "text": "driver because we need to implement the back pressure handling another reason for that is that",
    "start": "451680",
    "end": "459160"
  },
  {
    "text": "it was already um a gelf driver supported that you can use uh in um in",
    "start": "459160",
    "end": "466520"
  },
  {
    "text": "addition with loock st gelf input the advantage of of this solution",
    "start": "466520",
    "end": "472199"
  },
  {
    "text": "is that there is no shipper to install you just send the loog lines directly to loog stash but the disadvantage is that",
    "start": "472199",
    "end": "480159"
  },
  {
    "text": "there is this is uh UDP based so you have no guarantees that your uh lock",
    "start": "480159",
    "end": "486720"
  },
  {
    "text": "lines are delivered or there is no congestion",
    "start": "486720",
    "end": "492159"
  },
  {
    "text": "control another solution is to use ad Json driver from Docker and use file bit",
    "start": "492159",
    "end": "498360"
  },
  {
    "text": "with the Json support this solution is simple it because Json driver is a",
    "start": "498360",
    "end": "504800"
  },
  {
    "text": "default driver in Docker and also easy to get U metadata container metadata",
    "start": "504800",
    "end": "510240"
  },
  {
    "text": "from your container for example the name of the container the labels of the container in addition you can also get",
    "start": "510240",
    "end": "517399"
  },
  {
    "text": "um this uh Docker locks command that you can use on Docker the",
    "start": "517399",
    "end": "523959"
  },
  {
    "text": "disadvantage is that some people think that ad Json driver will might slow down",
    "start": "523959",
    "end": "529080"
  },
  {
    "text": "your Docker container another solution is that you",
    "start": "529080",
    "end": "534519"
  },
  {
    "text": "can use the docker C loog driver and you need for that uh in parallel a local",
    "start": "534519",
    "end": "540320"
  },
  {
    "text": "cslog server and you might use file bit for shipping the advantage is that you",
    "start": "540320",
    "end": "545720"
  },
  {
    "text": "will get a dedicated you'll have a dedicated path uh with all your locks",
    "start": "545720",
    "end": "551000"
  },
  {
    "text": "and you get for free uh the facility of um uh rotate your locks but the",
    "start": "551000",
    "end": "557360"
  },
  {
    "text": "disadvantage that is that you have to manage another server the C loock server",
    "start": "557360",
    "end": "562839"
  },
  {
    "text": "the metadata are serialized you have to distalize the metadata information and",
    "start": "562839",
    "end": "568320"
  },
  {
    "text": "in case of MTI is kind of difficult because you have",
    "start": "568320",
    "end": "573560"
  },
  {
    "text": "the data from different coner mixed another solution is that you can",
    "start": "573560",
    "end": "580519"
  },
  {
    "text": "use a Docker Journal D driver and then file with for for shipping joural is",
    "start": "580519",
    "end": "586279"
  },
  {
    "text": "often already available so it's convenient uh another Advantage is that",
    "start": "586279",
    "end": "591720"
  },
  {
    "text": "you you can get easily a container metadata and the locker locks command works out of the box so this Advent is",
    "start": "591720",
    "end": "599720"
  },
  {
    "text": "that file doesn't support joural D another solution another option will",
    "start": "599720",
    "end": "607079"
  },
  {
    "text": "be to mount uh a share folder from your host into the container and then",
    "start": "607079",
    "end": "612360"
  },
  {
    "text": "instruct your application to write uh the locks in their share folder the uh",
    "start": "612360",
    "end": "618440"
  },
  {
    "text": "this might be a Simple Solution if you if your application doesn't rotate the L",
    "start": "618440",
    "end": "624079"
  },
  {
    "text": "files if your sorry if your application supports rotating your files so supports",
    "start": "624079",
    "end": "630800"
  },
  {
    "text": "rotating the loog files the the disadvantage is that there is no way how",
    "start": "630800",
    "end": "636079"
  },
  {
    "text": "you can pass container metadata yeah so as you see there are",
    "start": "636079",
    "end": "641360"
  },
  {
    "text": "quite many options how you can get container logs logs from your containers um Json driver cslog driver",
    "start": "641360",
    "end": "649760"
  },
  {
    "text": "and share volumes are really good solution nowadays uh right now and in",
    "start": "649760",
    "end": "655440"
  },
  {
    "text": "the future we might also uh be an option to use Journal d when file bit will have support for that",
    "start": "655440",
    "end": "663200"
  },
  {
    "text": "uh actually right now there is a a a community bit that has support for junal",
    "start": "663200",
    "end": "668880"
  },
  {
    "text": "so we might we might also consider that you",
    "start": "668880",
    "end": "674000"
  },
  {
    "text": "think so metric bit is um a way uh how you can get the metrics",
    "start": "674000",
    "end": "680760"
  },
  {
    "text": "from your services and also your containers this is the newest addition of the bit it's available in 5 which is",
    "start": "680760",
    "end": "689600"
  },
  {
    "text": "was released like two or three weeks ago and the way it works is that it",
    "start": "689600",
    "end": "694800"
  },
  {
    "text": "periodically um interrogates external Services fetches metrics from them and",
    "start": "694800",
    "end": "700279"
  },
  {
    "text": "then push them to elastic search and has support for um a bunch of",
    "start": "700279",
    "end": "707000"
  },
  {
    "text": "services like Apachi ngx mongodb my postgress SQL redis uh zookeeper aashi",
    "start": "707000",
    "end": "715279"
  },
  {
    "text": "zookeeper and you can here add your own uh module so each each service it's um it's",
    "start": "715279",
    "end": "724440"
  },
  {
    "text": "uh written the implementation of each server is written on as a module in metric bit and you can easily write your",
    "start": "724440",
    "end": "731720"
  },
  {
    "text": "own service by adding a new module in metric bit adding a new module in metric",
    "start": "731720",
    "end": "737000"
  },
  {
    "text": "bit is really easy uh we even have a generator so that generat the code for",
    "start": "737000",
    "end": "744600"
  },
  {
    "text": "you uh metric bit also has the system module which gives you system statistics",
    "start": "745279",
    "end": "750800"
  },
  {
    "text": "of your about your host for example it gives you CPU usage memory usage disio",
    "start": "750800",
    "end": "757160"
  },
  {
    "text": "information file system loow Network per process information and per CPU",
    "start": "757160",
    "end": "764360"
  },
  {
    "text": "course but let's see how we can use uh metric B to collect the container",
    "start": "764360",
    "end": "771240"
  },
  {
    "text": "metrix and there are two options uh one of them is to query to get the container",
    "start": "771240",
    "end": "778560"
  },
  {
    "text": "metrix by quering the docker API this solution is not yet released",
    "start": "778560",
    "end": "784519"
  },
  {
    "text": "but it's available in the docker module of metric bit so you are free to use it um by quering the docker API you can",
    "start": "784519",
    "end": "793560"
  },
  {
    "text": "get information about the CPU the memory you can get the docker container information you can get information",
    "start": "793560",
    "end": "800800"
  },
  {
    "text": "about how many an overview of your containers like how many containers are",
    "start": "800800",
    "end": "806199"
  },
  {
    "text": "stopped how many containers are running you can get network information like INB",
    "start": "806199",
    "end": "811560"
  },
  {
    "text": "about and outb bytes drop packets a disc iio fix like this this solution is easy",
    "start": "811560",
    "end": "817920"
  },
  {
    "text": "to set up you don't have to do basically anything it come out out of the box and you also have access to the container",
    "start": "817920",
    "end": "824519"
  },
  {
    "text": "names and labels another solution is to get a",
    "start": "824519",
    "end": "830600"
  },
  {
    "text": "container Matrix is by reading C group information directly from SL Brock the",
    "start": "830600",
    "end": "836920"
  },
  {
    "text": "the advantage of this solution is that you don't it's work it's working for all",
    "start": "836920",
    "end": "842480"
  },
  {
    "text": "kinds of container technology you are you are having not not only for Docker right and the implementation of this",
    "start": "842480",
    "end": "850120"
  },
  {
    "text": "it's part of the system module and if you are enabled in the configuration file of metri b c groups then you will",
    "start": "850120",
    "end": "857440"
  },
  {
    "text": "be able to um so you will be able you will get automatically enhance the",
    "start": "857440",
    "end": "864199"
  },
  {
    "text": "process information with details about the c groups the disadvantage of this solution",
    "start": "864199",
    "end": "870519"
  },
  {
    "text": "is that you don't uh get container metadata like name of the container and",
    "start": "870519",
    "end": "877880"
  },
  {
    "text": "labels no matter what technology or no matter what solution you are using uh",
    "start": "877880",
    "end": "883519"
  },
  {
    "text": "you will probably want to run metric bit in the container on your host in order",
    "start": "883519",
    "end": "888880"
  },
  {
    "text": "to be able to monitor uh all your uh services that are running all your",
    "start": "888880",
    "end": "894880"
  },
  {
    "text": "containers basically",
    "start": "894880",
    "end": "900480"
  },
  {
    "text": "often when I'm describing metric bit uh the objection that I get is that elastic",
    "start": "900480",
    "end": "906440"
  },
  {
    "text": "search is not meant to be a Time series database because people think of elastic",
    "start": "906440",
    "end": "912480"
  },
  {
    "text": "search as a search engine the and it's not so effic efficient for storing",
    "start": "912480",
    "end": "918279"
  },
  {
    "text": "numbers but actually this is not really true uh elastic search and Lucine the",
    "start": "918279",
    "end": "923959"
  },
  {
    "text": "project on which is best uh they have support for numbers for quite a long time and it's got even better with",
    "start": "923959",
    "end": "931360"
  },
  {
    "text": "elastic or50 when they introduced a new uh storage system based on bkd",
    "start": "931360",
    "end": "939680"
  },
  {
    "text": "trees so bkd trees were introduced because it has support for multiple",
    "start": "939680",
    "end": "946160"
  },
  {
    "text": "Dimensions uh think of um uh goip point where you have a dimension is longitude",
    "start": "946160",
    "end": "953639"
  },
  {
    "text": "and the other one is latitude but it proved to be that it's quite efficient",
    "start": "953639",
    "end": "959000"
  },
  {
    "text": "for also for a single Dimension values think of integers right uh and it seems",
    "start": "959000",
    "end": "966160"
  },
  {
    "text": "that with 5 Z is um elastic search is faster to index is faster to query it",
    "start": "966160",
    "end": "973399"
  },
  {
    "text": "has more it has more dis efficient it has more it's more memory",
    "start": "973399",
    "end": "981319"
  },
  {
    "text": "efficient another um disadvantage that the last resarch had pure five Z was",
    "start": "983160",
    "end": "990399"
  },
  {
    "text": "that was was wasn't able to compress the flow values um and they were always",
    "start": "990399",
    "end": "997199"
  },
  {
    "text": "stored on four bytes so there are quite many algorithms for compressing the flow",
    "start": "997199",
    "end": "1002600"
  },
  {
    "text": "values but they are not working uh with the way uh Lucine is storing the data so",
    "start": "1002600",
    "end": "1010319"
  },
  {
    "text": "he couldn't use them so in order to um to offer a workaround for this problem",
    "start": "1010319",
    "end": "1017000"
  },
  {
    "text": "in 5 Z there were two typ typ of flows introduced one of them is half",
    "start": "1017000",
    "end": "1022560"
  },
  {
    "text": "flows that is storing um a flow value on two bytes uh and of course you have good",
    "start": "1022560",
    "end": "1029760"
  },
  {
    "text": "Precision for small values and um the Precision degradates with the bigger",
    "start": "1029760",
    "end": "1035600"
  },
  {
    "text": "number it is another type is scale floats the idea is to be able to store",
    "start": "1035600",
    "end": "1044199"
  },
  {
    "text": "um a flow value as an integer using a scaling Factor",
    "start": "1044199",
    "end": "1049440"
  },
  {
    "text": "for example if you have a scaling factor of 100 you multiply your flow value with",
    "start": "1049440",
    "end": "1055240"
  },
  {
    "text": "a scaling factor and the result you store it as an integral in elastic search and when you query elastic search",
    "start": "1055240",
    "end": "1062400"
  },
  {
    "text": "then elastic search will divide the value with 100 and then you'll get back the flow",
    "start": "1062400",
    "end": "1068600"
  },
  {
    "text": "value this is a great way how you can store percentages think of CPU right for",
    "start": "1068600",
    "end": "1076840"
  },
  {
    "text": "example so what why IA search for time series because it has horizontal",
    "start": "1077480",
    "end": "1083760"
  },
  {
    "text": "scalability it has the mature support for clustering it offers these flexible",
    "start": "1083760",
    "end": "1089559"
  },
  {
    "text": "aggregations including moving aages or hold winter that are used in anomaly",
    "start": "1089559",
    "end": "1096039"
  },
  {
    "text": "detection it's a system it offers A system that um where you can store not",
    "start": "1096039",
    "end": "1102919"
  },
  {
    "text": "only logs but also metrics it offers a wide range of um",
    "start": "1102919",
    "end": "1109679"
  },
  {
    "text": "uis and it's a great ecosystem because Al also comes with alerting tools",
    "start": "1109679",
    "end": "1114919"
  },
  {
    "text": "reporting and so on and not least I would like to talk",
    "start": "1114919",
    "end": "1121640"
  },
  {
    "text": "about py bit so packet bit is for network data so the way packet bit works",
    "start": "1121640",
    "end": "1127000"
  },
  {
    "text": "is like you install it as an agent on your server it listening for the traffic exchange between your services it",
    "start": "1127000",
    "end": "1134280"
  },
  {
    "text": "decodes the upper layer protocols correlates the request to the responsive to transactions and then push them to",
    "start": "1134280",
    "end": "1140679"
  },
  {
    "text": "elastic search and we have a support for a few",
    "start": "1140679",
    "end": "1145760"
  },
  {
    "text": "decoders like HTTP Thrift mongodb myle",
    "start": "1145760",
    "end": "1150799"
  },
  {
    "text": "postgress SQL redis and so on right and if you like U and if you want to uh add",
    "start": "1150799",
    "end": "1158679"
  },
  {
    "text": "a new one you can create also your own module in packet B to have support for a",
    "start": "1158679",
    "end": "1164240"
  },
  {
    "text": "new decoder in case um you have the traffic",
    "start": "1164240",
    "end": "1170600"
  },
  {
    "text": "exchange between your services encrypted or in case um you are there is no",
    "start": "1170600",
    "end": "1176200"
  },
  {
    "text": "decoder for that traffic you can still have visibility in your traffic by using",
    "start": "1176200",
    "end": "1181760"
  },
  {
    "text": "flows so flows will give you um a few details of about your traffic like the",
    "start": "1181760",
    "end": "1187480"
  },
  {
    "text": "source in the destination the number of packet is change between the sources in destination and also the number of bites",
    "start": "1187480",
    "end": "1194679"
  },
  {
    "text": "and few other details yeah let's let see how we can use packet bit to monitor the traffic",
    "start": "1194679",
    "end": "1202520"
  },
  {
    "text": "exchange between your containers so it's very simple you just need to uh have pyit installed in a",
    "start": "1202520",
    "end": "1210600"
  },
  {
    "text": "container on your host and then it will be able to um show you the traffic that",
    "start": "1210600",
    "end": "1215760"
  },
  {
    "text": "it exchang between your containers and now I would like to do a",
    "start": "1215760",
    "end": "1221799"
  },
  {
    "text": "short",
    "start": "1221799",
    "end": "1224158"
  },
  {
    "text": "demo",
    "start": "1227640",
    "end": "1230640"
  },
  {
    "text": "so what I have I have elastic search in kibana running on my Mac and I have a",
    "start": "1236240",
    "end": "1241840"
  },
  {
    "text": "nuunu machine uh where I installed file bit metric bit and packet bit uh it's very",
    "start": "1241840",
    "end": "1249600"
  },
  {
    "text": "easy to install so that's why I didn't want to go for these steps so just go to the download page download the ver the",
    "start": "1249600",
    "end": "1256559"
  },
  {
    "text": "the version that you want like in my case the de package and just install it",
    "start": "1256559",
    "end": "1262039"
  },
  {
    "text": "and that's it and I also like to to run um a small",
    "start": "1262039",
    "end": "1271279"
  },
  {
    "text": "Docker containers that with redies as you can see can you see my",
    "start": "1271279",
    "end": "1276440"
  },
  {
    "text": "cursor probably not or so um as you can",
    "start": "1276440",
    "end": "1281760"
  },
  {
    "text": "see I also passed some uh container metad datas to this container uh and after we start the",
    "start": "1281760",
    "end": "1289720"
  },
  {
    "text": "docker container ready then we'll be um will be able then Docker will um write",
    "start": "1289720",
    "end": "1297400"
  },
  {
    "text": "the log files into a special directory under V Li Docker containers and if we",
    "start": "1297400",
    "end": "1304080"
  },
  {
    "text": "see we have a directory for each of the containers that we have running so let",
    "start": "1304080",
    "end": "1310360"
  },
  {
    "text": "me show you maybe some of you are already familiar with",
    "start": "1310360",
    "end": "1316200"
  },
  {
    "text": "this yeah so this is how it looks",
    "start": "1317520",
    "end": "1325039"
  },
  {
    "text": "um the the log file that is written by Docker as you can see it's in adjacent",
    "start": "1325039",
    "end": "1330279"
  },
  {
    "text": "format and as you can see the log field basically contains uh the log the log",
    "start": "1330279",
    "end": "1340000"
  },
  {
    "text": "line now the idea is to um to instruct or to configure file bit to uh to read",
    "start": "1340520",
    "end": "1349679"
  },
  {
    "text": "the log files uh from that directory so basically I configure a prospector in",
    "start": "1349679",
    "end": "1355039"
  },
  {
    "text": "file bit and I pass here um uh all the",
    "start": "1355039",
    "end": "1360400"
  },
  {
    "text": "Json log files from that directory and also I mentioned here um",
    "start": "1360400",
    "end": "1366880"
  },
  {
    "text": "from where to get um the field name from the Json object from where to get the",
    "start": "1366880",
    "end": "1372760"
  },
  {
    "text": "log Line This is useful in case you want to uh configure multi-line",
    "start": "1372760",
    "end": "1380440"
  },
  {
    "text": "okay now let's um let's go to",
    "start": "1383559",
    "end": "1390320"
  },
  {
    "text": "kibana and the discovery page uh so after we restart file bit",
    "start": "1390320",
    "end": "1397760"
  },
  {
    "text": "that configuration file file bit will send the data to a specific index in in",
    "start": "1397760",
    "end": "1403320"
  },
  {
    "text": "file bit called file bit so you'll be able to see uh the log line",
    "start": "1403320",
    "end": "1409360"
  },
  {
    "text": "actually there is no Lo lines so let me restart the container so I can produce",
    "start": "1409360",
    "end": "1416279"
  },
  {
    "text": "some lock lines and now if we go",
    "start": "1416279",
    "end": "1422000"
  },
  {
    "text": "back um there should be some",
    "start": "1422360",
    "end": "1428080"
  },
  {
    "text": "here yeah as you can see so we will be able to see exactly",
    "start": "1428080",
    "end": "1435159"
  },
  {
    "text": "all the fields that are part of this Json object um that Docker right and",
    "start": "1435159",
    "end": "1440919"
  },
  {
    "text": "also in J loog is basically uh the loog",
    "start": "1440919",
    "end": "1446639"
  },
  {
    "text": "line let me show you how you can get the Matrix from the container so for that we",
    "start": "1448279",
    "end": "1454000"
  },
  {
    "text": "can configure metric bit",
    "start": "1454000",
    "end": "1459520"
  },
  {
    "text": "oh and here we uh configure to have the module as the system mod module uh which",
    "start": "1462320",
    "end": "1469919"
  },
  {
    "text": "gets the system statistics about your host like the CPU load file system",
    "start": "1469919",
    "end": "1475760"
  },
  {
    "text": "statistics Network memory and so on and also you can configure here how often to",
    "start": "1475760",
    "end": "1481480"
  },
  {
    "text": "fetch this information from your host another module that it's interesting I",
    "start": "1481480",
    "end": "1487279"
  },
  {
    "text": "think in this scenario is to uh configure the red module because we have",
    "start": "1487279",
    "end": "1492520"
  },
  {
    "text": "a started a container with red and here we can specify what kind of information",
    "start": "1492520",
    "end": "1497919"
  },
  {
    "text": "we got want to get about the ready service and how often to to query the ready service and of course where the",
    "start": "1497919",
    "end": "1505799"
  },
  {
    "text": "ready service is available another module that might be interested it's Docker in order to get",
    "start": "1505799",
    "end": "1513399"
  },
  {
    "text": "Docker containers uh information about the dock containers and here we can",
    "start": "1513399",
    "end": "1519919"
  },
  {
    "text": "specify um yeah what information we are interested",
    "start": "1519919",
    "end": "1525000"
  },
  {
    "text": "in and you can see here the host is basically Bally where the docker is",
    "start": "1525000",
    "end": "1530120"
  },
  {
    "text": "available and optionally we can also specify the socket uh is it too",
    "start": "1530120",
    "end": "1538120"
  },
  {
    "text": "small yeah so if we if we start uh metric bit of this configuration file then metric bit will uh send the data",
    "start": "1544240",
    "end": "1552440"
  },
  {
    "text": "into this uh into the metric bit index pattern and if we switching kibana um",
    "start": "1552440",
    "end": "1561000"
  },
  {
    "text": "the Index P to metric bit then we'll be able to see all the metrix information",
    "start": "1561000",
    "end": "1566080"
  },
  {
    "text": "because there are quite many um let's see first uh all",
    "start": "1566080",
    "end": "1573720"
  },
  {
    "text": "the um system statistics relating metrics uh and for example we can see",
    "start": "1573720",
    "end": "1580640"
  },
  {
    "text": "the network",
    "start": "1580640",
    "end": "1583440"
  },
  {
    "text": "statistics so for example we can see here how many uh packets are uh in",
    "start": "1586919",
    "end": "1592799"
  },
  {
    "text": "inbound outbound how many are dropped and things like this",
    "start": "1592799",
    "end": "1598320"
  },
  {
    "text": "right now let's also uh see the CPU",
    "start": "1598320",
    "end": "1603720"
  },
  {
    "text": "usage as an example uh so we can see uh the CPU",
    "start": "1603720",
    "end": "1609600"
  },
  {
    "text": "usage in percentage internal space and user",
    "start": "1609600",
    "end": "1616000"
  },
  {
    "text": "space and for example the processes that are running on your server so for each",
    "start": "1617240",
    "end": "1622960"
  },
  {
    "text": "process you will get an event uh so so for example in this case",
    "start": "1622960",
    "end": "1629039"
  },
  {
    "text": "for this process uh you will get like the memory usage the CPU usage uh the P the state",
    "start": "1629039",
    "end": "1638200"
  },
  {
    "text": "of the process things like this so now let's go to",
    "start": "1638200",
    "end": "1646120"
  },
  {
    "text": "R um basically to uh to get all the metrics",
    "start": "1646120",
    "end": "1653720"
  },
  {
    "text": "related from from the ready service and as you can see here there",
    "start": "1653720",
    "end": "1659799"
  },
  {
    "text": "are quite a bunch of uh information that you can get from redist",
    "start": "1659799",
    "end": "1666679"
  },
  {
    "text": "um yeah and the list goes",
    "start": "1666679",
    "end": "1670960"
  },
  {
    "text": "on and uh now let's let's see uh uh what",
    "start": "1674760",
    "end": "1679960"
  },
  {
    "text": "information can we get from the docker container and for example we can get information about all the docker",
    "start": "1679960",
    "end": "1687799"
  },
  {
    "text": "containers that we are running on the host for example you can get how many running how many are stopped and",
    "start": "1687799",
    "end": "1696799"
  },
  {
    "text": "yeah and interesting is is that for each metric uh you you get the round time so",
    "start": "1696799",
    "end": "1703880"
  },
  {
    "text": "you know how much metric bits spend in getting the the the information about",
    "start": "1703880",
    "end": "1709159"
  },
  {
    "text": "that specific metric let me also show you quickly the",
    "start": "1709159",
    "end": "1714799"
  },
  {
    "text": "container information just to give you an idea so you see here that you um that",
    "start": "1714799",
    "end": "1723159"
  },
  {
    "text": "you can you are able to see the container metadata that I passed when I started the red",
    "start": "1723159",
    "end": "1730640"
  },
  {
    "text": "container uh and besides that you can yeah you can see uh all kinds of for",
    "start": "1730640",
    "end": "1736679"
  },
  {
    "text": "example you can see here the IM image you can see the container",
    "start": "1736679",
    "end": "1742158"
  },
  {
    "text": "ID and you can see uh yeah when I started the red containers and things",
    "start": "1742440",
    "end": "1748760"
  },
  {
    "text": "like",
    "start": "1748760",
    "end": "1751000"
  },
  {
    "text": "this yeah we can also see the CPU usage",
    "start": "1754120",
    "end": "1760200"
  },
  {
    "text": "um so basically all this information that I'm showing you uh about the docker",
    "start": "1760200",
    "end": "1766600"
  },
  {
    "text": "container are uh um as a result of querying the docker API and as you can",
    "start": "1766600",
    "end": "1773799"
  },
  {
    "text": "see we I didn't have to configure anything special for that was just out of the box right and this is because the",
    "start": "1773799",
    "end": "1781840"
  },
  {
    "text": "Json uh driver is enabled by default in",
    "start": "1781840",
    "end": "1788159"
  },
  {
    "text": "Docker yeah how I was showing you the CPU usage and you can see here I can get",
    "start": "1788159",
    "end": "1794200"
  },
  {
    "text": "the CPU usage of that Docker container and the uni socket that is",
    "start": "1794200",
    "end": "1800159"
  },
  {
    "text": "used yeah like okay now I would like to also uh",
    "start": "1800159",
    "end": "1806480"
  },
  {
    "text": "show you how you can get um information about the traffic exchange between your",
    "start": "1806480",
    "end": "1813039"
  },
  {
    "text": "containers we've packing it and for that",
    "start": "1813039",
    "end": "1820240"
  },
  {
    "text": "um and for that let's go to the configuration file of pcket",
    "start": "1824519",
    "end": "1830120"
  },
  {
    "text": "bit so the most important configuration file is the interface where is listening",
    "start": "1830120",
    "end": "1835440"
  },
  {
    "text": "for the traffic and we can use a default one and for each protocol that uh packet",
    "start": "1835440",
    "end": "1843480"
  },
  {
    "text": "bit support you can configure um the port where to listen for that specific",
    "start": "1843480",
    "end": "1851159"
  },
  {
    "text": "traffic so yeah we are not changing anything in the configuration file uh and if we start pet bit",
    "start": "1851600",
    "end": "1858440"
  },
  {
    "text": "then py bit will send all the traffic information into to elastic search and",
    "start": "1858440",
    "end": "1864919"
  },
  {
    "text": "store it in this uh in the special index packet bit index index pattern so if we",
    "start": "1864919",
    "end": "1871440"
  },
  {
    "text": "are choosing here the packet bit index",
    "start": "1871440",
    "end": "1876158"
  },
  {
    "text": "pattern then I should be able to see all the traffic just to give you",
    "start": "1877000",
    "end": "1883279"
  },
  {
    "text": "um quick demo let's generate some um um R",
    "start": "1883279",
    "end": "1890760"
  },
  {
    "text": "command um and then let's quickly check it so this basically are",
    "start": "1890760",
    "end": "1897799"
  },
  {
    "text": "all the all the transactions that are exchanged in you in our uh in our",
    "start": "1897799",
    "end": "1903960"
  },
  {
    "text": "Network I mean I I only have one container but um should be enough and as",
    "start": "1903960",
    "end": "1910399"
  },
  {
    "text": "you can see here I can I can see the query that I just um I just sent",
    "start": "1910399",
    "end": "1919840"
  },
  {
    "text": "so each bit is coming with um sample dashboards that you can use um as a",
    "start": "1920559",
    "end": "1927679"
  },
  {
    "text": "starting point for for your own dashboards and if we go to the",
    "start": "1927679",
    "end": "1933840"
  },
  {
    "text": "dashboard then for example I created this sample dashboard to show you all",
    "start": "1934559",
    "end": "1939760"
  },
  {
    "text": "the processes uh that are running on your host and for example here at the",
    "start": "1939760",
    "end": "1946600"
  },
  {
    "text": "bottom of the page yeah Everyone likes graphs uh for example here let's start with graphs so for example here like you",
    "start": "1946600",
    "end": "1953559"
  },
  {
    "text": "can see the CPU usage per process or the memory usage per",
    "start": "1953559",
    "end": "1959399"
  },
  {
    "text": "process also I would like to show you that here this table basically it's um",
    "start": "1959559",
    "end": "1965960"
  },
  {
    "text": "uh the result is similar with what the top command looks like in in Linux",
    "start": "1965960",
    "end": "1971639"
  },
  {
    "text": "system uni systems uh you can see for each process how much memory how much CPU you usage um",
    "start": "1971639",
    "end": "1981000"
  },
  {
    "text": "has and you can order them here they are ordered by memory usage and in the other",
    "start": "1981000",
    "end": "1986559"
  },
  {
    "text": "one are ordered by uh CP usage another interesting um dashboard",
    "start": "1986559",
    "end": "1993960"
  },
  {
    "text": "that I would like to show you is the one about",
    "start": "1993960",
    "end": "1999679"
  },
  {
    "text": "Docker so you can see the containers that I'm running and um yeah the details",
    "start": "2000480",
    "end": "2008159"
  },
  {
    "text": "about each container I'm running details about the network",
    "start": "2008159",
    "end": "2014000"
  },
  {
    "text": "IO in uh nice graphs that kibana",
    "start": "2014000",
    "end": "2020360"
  },
  {
    "text": "creates yeah I think that's uh that's all let's go back to the",
    "start": "2020760",
    "end": "2026919"
  },
  {
    "text": "slides let me quickly check how much time I have okay so that's was well",
    "start": "2027880",
    "end": "2033919"
  },
  {
    "text": "thank you for your attention uh if you have question about bits uh don't hesitate to contact us on on",
    "start": "2033919",
    "end": "2041080"
  },
  {
    "text": "our Forum at discuss. elastic.co if we have uh feature request",
    "start": "2041080",
    "end": "2047039"
  },
  {
    "text": "or ideas how we uh for features don't hesitate to uh create a issue in in our",
    "start": "2047039",
    "end": "2054599"
  },
  {
    "text": "repository thank you very [Applause]",
    "start": "2054599",
    "end": "2064839"
  },
  {
    "text": "much now if you have questions",
    "start": "2064839",
    "end": "2069720"
  },
  {
    "text": "um it's about um you mentioned the scale fls how do you handle because how do you",
    "start": "2074839",
    "end": "2082440"
  },
  {
    "text": "handle rounding with these scale floats because um so when you have a scale of",
    "start": "2082440",
    "end": "2088320"
  },
  {
    "text": "10 or something then you have a rounding in the when you when or or are they stored as Al so so they are stored as",
    "start": "2088320",
    "end": "2096358"
  },
  {
    "text": "integers so will have a Precision of for example if you have a scaling factor of",
    "start": "2096359",
    "end": "2101560"
  },
  {
    "text": "100 then you will have a Precision of 100 yeah of Two And so um and so",
    "start": "2101560",
    "end": "2107920"
  },
  {
    "text": "basically I I send them because I send them to elastic search as a string",
    "start": "2107920",
    "end": "2113160"
  },
  {
    "text": "usually in the in the in the in the Json format when I sent them to elastic",
    "start": "2113160",
    "end": "2118240"
  },
  {
    "text": "search to insert them I send them as a string and then they are converted",
    "start": "2118240",
    "end": "2124240"
  },
  {
    "text": "basically into an integer so the way it works is uh with",
    "start": "2124240",
    "end": "2129920"
  },
  {
    "text": "elastic search is that you define a mapping in advance and you define uh",
    "start": "2129920",
    "end": "2136720"
  },
  {
    "text": "what kind of type each field is uh before inserting for the first time in elastic search elastic search is also",
    "start": "2136720",
    "end": "2143680"
  },
  {
    "text": "doing a good job in uh detecting the type of fish field uh but not always",
    "start": "2143680",
    "end": "2149440"
  },
  {
    "text": "work for example if you have um uh an integer and you um no if you have a flow",
    "start": "2149440",
    "end": "2158599"
  },
  {
    "text": "uh and sometimes for some reason the first time when you send the value of",
    "start": "2158599",
    "end": "2164400"
  },
  {
    "text": "the of the field to elastic search is zero then elastic search will detect that is in integer and uh then you when",
    "start": "2164400",
    "end": "2172800"
  },
  {
    "text": "you send the next value which will probably be a float then the lastar",
    "start": "2172800",
    "end": "2177839"
  },
  {
    "text": "think yeah I'm expecting an integer not a float um so um that's why it's uh",
    "start": "2177839",
    "end": "2185920"
  },
  {
    "text": "recommended to um uh to to set the mapping in advance",
    "start": "2185920",
    "end": "2192000"
  },
  {
    "text": "before sending for each field before sending the data to elastic search for",
    "start": "2192000",
    "end": "2197040"
  },
  {
    "text": "the first time I was just only confused by the name float because when it's always stored as an integer it's like",
    "start": "2197040",
    "end": "2203560"
  },
  {
    "text": "more fixed decimal instead of a float because the the there is no floating",
    "start": "2203560",
    "end": "2208960"
  },
  {
    "text": "point it's the point is fixed is this correct",
    "start": "2208960",
    "end": "2215560"
  },
  {
    "text": "yeah yeah it's S as an integer but it's um uh it's a float basically as you that",
    "start": "2215560",
    "end": "2223319"
  },
  {
    "text": "you story so let me let me say again so a scale f is basically a float that you",
    "start": "2223319",
    "end": "2230079"
  },
  {
    "text": "story as an integer using the scaling Factor so for example if you have a scaling factor of 100 then you multiply",
    "start": "2230079",
    "end": "2238880"
  },
  {
    "text": "the float value with 100 and the result you store it as an integer but it's not",
    "start": "2238880",
    "end": "2245280"
  },
  {
    "text": "in the go in the sense of that the binary float where you have like an RFC",
    "start": "2245280",
    "end": "2250839"
  },
  {
    "text": "I don't know the number float with a binary where where it's where the the the the digs the digits behind the the",
    "start": "2250839",
    "end": "2259040"
  },
  {
    "text": "dot are stored as binary fractions",
    "start": "2259040",
    "end": "2265800"
  },
  {
    "text": "yeah other",
    "start": "2267280",
    "end": "2270640"
  },
  {
    "text": "questions I read about project sorry right about is it where's the source for",
    "start": "2273280",
    "end": "2279839"
  },
  {
    "text": "it is it identical to Doc beat uh and G project yeah so doc beat is a community",
    "start": "2279839",
    "end": "2286400"
  },
  {
    "text": "bit uh and uh now it's um part of metric bit so it's a Docker module in metric",
    "start": "2286400",
    "end": "2294160"
  },
  {
    "text": "bit it was uh the um the ones that created doc bit kind of moves the code",
    "start": "2294160",
    "end": "2301079"
  },
  {
    "text": "from dock bit and now it's part of Docker bit of metric bit sorry it's a",
    "start": "2301079",
    "end": "2306599"
  },
  {
    "text": "dock or is it yes okay yeah thanks it's not yet released but will be",
    "start": "2306599",
    "end": "2314200"
  },
  {
    "text": "released uh in the next relase there were two questions I think they have the first one you have answered it was asked",
    "start": "2314200",
    "end": "2320560"
  },
  {
    "text": "very early yeah so um so the question is is",
    "start": "2320560",
    "end": "2327640"
  },
  {
    "text": "file bit okay for sending application logs from Docker containers if yes when",
    "start": "2327640",
    "end": "2333640"
  },
  {
    "text": "it's a better when it's better than Lo stash",
    "start": "2333640",
    "end": "2338720"
  },
  {
    "text": "yeah that's a good question so the first question uh is that's why I had to talk",
    "start": "2338720",
    "end": "2344480"
  },
  {
    "text": "so to give you a few options or a few Solutions how you can get the locks from",
    "start": "2344480",
    "end": "2351079"
  },
  {
    "text": "the containers um and you should decide by yourself which solution fits your you",
    "start": "2351079",
    "end": "2359800"
  },
  {
    "text": "the best and um when it's better than loog stash it's",
    "start": "2359800",
    "end": "2369359"
  },
  {
    "text": "um that's a tricky question um so it's also depends on uh on your",
    "start": "2370200",
    "end": "2378280"
  },
  {
    "text": "infrastructure um so you can you can also use for",
    "start": "2378280",
    "end": "2384240"
  },
  {
    "text": "example lock stash um you can use like like I said in the presentation you can",
    "start": "2384240",
    "end": "2390079"
  },
  {
    "text": "use the gal uh uh driver from Docker",
    "start": "2390079",
    "end": "2395240"
  },
  {
    "text": "with the lock stash um um gelf plug-in input plugin uh in order",
    "start": "2395240",
    "end": "2403040"
  },
  {
    "text": "to get the locks but there are a few these advantages of the solution like I presented so it depends what is more",
    "start": "2403040",
    "end": "2410359"
  },
  {
    "text": "important for you in order to choose one solution or",
    "start": "2410359",
    "end": "2415640"
  },
  {
    "text": "another by the way uh if you you can I will tweet um after I finish the talk I",
    "start": "2415640",
    "end": "2421920"
  },
  {
    "text": "will tweet uh the location of my slide so you'll be able to see all all the",
    "start": "2421920",
    "end": "2428319"
  },
  {
    "text": "options that I presented about how you can get the locks from the container and then you can decide it's up to you to",
    "start": "2428319",
    "end": "2434800"
  },
  {
    "text": "decide which solution is the",
    "start": "2434800",
    "end": "2439280"
  },
  {
    "text": "best what about fluentd drivers send locks to elastic",
    "start": "2441240",
    "end": "2447200"
  },
  {
    "text": "search um I think here it's more a question for flinty guys than for",
    "start": "2447200",
    "end": "2454560"
  },
  {
    "text": "me uh so like I said um there are a few uh login drivers uh",
    "start": "2455400",
    "end": "2463359"
  },
  {
    "text": "but none of them uh solve this problem of guaranteeing that",
    "start": "2463359",
    "end": "2470319"
  },
  {
    "text": "um each lock line inste only once and this is what we are trying to uh to",
    "start": "2470319",
    "end": "2477040"
  },
  {
    "text": "achieve here so other login drivers for example",
    "start": "2477040",
    "end": "2483160"
  },
  {
    "text": "they are sending the loog lines as fast as possible ible and um if the next",
    "start": "2483160",
    "end": "2491000"
  },
  {
    "text": "point in your network doesn't cope with that amount of traffic it can it can die",
    "start": "2491000",
    "end": "2498520"
  },
  {
    "text": "or it can start behaving strange so we were trying to find a solution with this",
    "start": "2498520",
    "end": "2504400"
  },
  {
    "text": "by hand by supporting by adding support for um handling back pressure in order",
    "start": "2504400",
    "end": "2510680"
  },
  {
    "text": "to uh for 5B to adjust the speed uh depending on how much the um uh or how",
    "start": "2510680",
    "end": "2518920"
  },
  {
    "text": "fast the next point in your uh in your infrastructure uh can process the",
    "start": "2518920",
    "end": "2525680"
  },
  {
    "text": "data about what is there sorry I didn't get about about",
    "start": "2533240",
    "end": "2540440"
  },
  {
    "text": "theoo output so when you have this uh incident situation when you don't have a",
    "start": "2540440",
    "end": "2547280"
  },
  {
    "text": "consumer for your loging or the node is dead uh the new loging that is coming is",
    "start": "2547280",
    "end": "2553680"
  },
  {
    "text": "it being copied and duplicated on disk or do you set some sort of marker to",
    "start": "2553680",
    "end": "2560880"
  },
  {
    "text": "resume from that point on outputting and flushing the data to the to the node so",
    "start": "2560880",
    "end": "2568160"
  },
  {
    "text": "for that we have that registry file where we keep an offset until when we read the log",
    "start": "2568160",
    "end": "2573960"
  },
  {
    "text": "files so this this is the the the marker strategy then you don't duplicate it uh",
    "start": "2573960",
    "end": "2580040"
  },
  {
    "text": "and wait for output um we are also I'm not sure I",
    "start": "2580040",
    "end": "2587119"
  },
  {
    "text": "understand when you mean wa for output when you you um store the the login data",
    "start": "2587119",
    "end": "2593000"
  },
  {
    "text": "that is coming and cannot be outputed to the to the uh consumer so you just set a",
    "start": "2593000",
    "end": "2599800"
  },
  {
    "text": "marker in the in your log and you resume from that point on instead of storing",
    "start": "2599800",
    "end": "2605200"
  },
  {
    "text": "somewhere else that the new dat data that is coming that's my question yeah we are not storing somewhere else okay",
    "start": "2605200",
    "end": "2610800"
  },
  {
    "text": "that's we are yeah restoring you just set a marker and then play from that point on instead",
    "start": "2610800",
    "end": "2617200"
  },
  {
    "text": "of copying the data yeah yeah okay thanks I I hope I answer the I'm not",
    "start": "2617200",
    "end": "2623920"
  },
  {
    "text": "100% sure about this but I hope I answered the right question the right uh",
    "start": "2623920",
    "end": "2629160"
  },
  {
    "text": "the right",
    "start": "2629160",
    "end": "2631558"
  },
  {
    "text": "thing more thank you thank you very [Applause]",
    "start": "2636040",
    "end": "2647240"
  },
  {
    "text": "much",
    "start": "2647240",
    "end": "2650240"
  }
]