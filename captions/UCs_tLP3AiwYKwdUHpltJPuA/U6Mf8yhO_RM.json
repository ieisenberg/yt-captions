[
  {
    "start": "0",
    "end": "60000"
  },
  {
    "text": "[Applause]",
    "start": "7950",
    "end": "12120"
  },
  {
    "text": "all right thanks Brian uh so as Brian",
    "start": "12120",
    "end": "14280"
  },
  {
    "text": "said I'm Andrew B qf part of data 61",
    "start": "14280",
    "end": "17880"
  },
  {
    "text": "part of Cyro uh and I'm talking about",
    "start": "17880",
    "end": "19760"
  },
  {
    "text": "language extensions um I am talking",
    "start": "19760",
    "end": "21800"
  },
  {
    "text": "about a subset that's something like 100",
    "start": "21800",
    "end": "24160"
  },
  {
    "text": "extensions are more available in GHC 8.6",
    "start": "24160",
    "end": "26679"
  },
  {
    "text": "so I'm not covering all of those um all",
    "start": "26679",
    "end": "30279"
  },
  {
    "text": "right so I'm guessing at least some of",
    "start": "30279",
    "end": "31720"
  },
  {
    "text": "you have seen erors like this uh GHC",
    "start": "31720",
    "end": "34680"
  },
  {
    "text": "says that your code is in valid high",
    "start": "34680",
    "end": "36440"
  },
  {
    "text": "school and maybe you'd like to enable an",
    "start": "36440",
    "end": "38000"
  },
  {
    "text": "extension uh to make it work and if",
    "start": "38000",
    "end": "41320"
  },
  {
    "text": "you're like me you're probably also",
    "start": "41320",
    "end": "42840"
  },
  {
    "text": "guilty of enabling that extension",
    "start": "42840",
    "end": "44760"
  },
  {
    "text": "without giving it a whole lot of thought",
    "start": "44760",
    "end": "47039"
  },
  {
    "text": "um and over time as I learned more and",
    "start": "47039",
    "end": "49000"
  },
  {
    "text": "more about high school and made more and",
    "start": "49000",
    "end": "50879"
  },
  {
    "text": "more mistakes I grew less comfortable",
    "start": "50879",
    "end": "53239"
  },
  {
    "text": "with this uh and decided to learn more",
    "start": "53239",
    "end": "55440"
  },
  {
    "text": "about the extensions that I use and then",
    "start": "55440",
    "end": "57399"
  },
  {
    "text": "turn them into a talk to tell all of you",
    "start": "57399",
    "end": "60559"
  },
  {
    "start": "60000",
    "end": "373000"
  },
  {
    "text": "all right so language extensions",
    "start": "60559",
    "end": "63839"
  },
  {
    "text": "101 um that's not right I won't use that",
    "start": "63839",
    "end": "68159"
  },
  {
    "text": "okay um so there's the high school 20110",
    "start": "68159",
    "end": "71920"
  },
  {
    "text": "language it's defined in high school",
    "start": "71920",
    "end": "73360"
  },
  {
    "text": "2010 report and there's a bunch of",
    "start": "73360",
    "end": "77119"
  },
  {
    "text": "things that aren't in high school 2010",
    "start": "77119",
    "end": "78880"
  },
  {
    "text": "that we may associate with high school",
    "start": "78880",
    "end": "81960"
  },
  {
    "text": "so type classes with more than one",
    "start": "81960",
    "end": "84520"
  },
  {
    "text": "parameter uh string literals that aren't",
    "start": "84520",
    "end": "86920"
  },
  {
    "text": "a list of characters and generalized",
    "start": "86920",
    "end": "89320"
  },
  {
    "text": "algebraic types so these are some things",
    "start": "89320",
    "end": "91600"
  },
  {
    "text": "that we commonly think of as being part",
    "start": "91600",
    "end": "93040"
  },
  {
    "text": "of the houso language uh but they are in",
    "start": "93040",
    "end": "96040"
  },
  {
    "text": "fact not they come from Surprise",
    "start": "96040",
    "end": "98560"
  },
  {
    "text": "language",
    "start": "98560",
    "end": "99799"
  },
  {
    "text": "extensions so uh they're covered in the",
    "start": "99799",
    "end": "102880"
  },
  {
    "text": "language report section 12.3 if you want",
    "start": "102880",
    "end": "105000"
  },
  {
    "text": "to go read about it um and they",
    "start": "105000",
    "end": "107960"
  },
  {
    "text": "introduce or can introduce a whole bunch",
    "start": "107960",
    "end": "109880"
  },
  {
    "text": "of new features to the hous school",
    "start": "109880",
    "end": "112560"
  },
  {
    "text": "language um so we'll start by looking at",
    "start": "112560",
    "end": "114680"
  },
  {
    "text": "how we enable these extensions um",
    "start": "114680",
    "end": "117119"
  },
  {
    "text": "there's a few different ways the first",
    "start": "117119",
    "end": "119200"
  },
  {
    "text": "of which is is using a language pragma",
    "start": "119200",
    "end": "121159"
  },
  {
    "text": "in the top of your module files so this",
    "start": "121159",
    "end": "123280"
  },
  {
    "text": "uh at least in my experience is the most",
    "start": "123280",
    "end": "124920"
  },
  {
    "text": "common way to do",
    "start": "124920",
    "end": "126399"
  },
  {
    "text": "this you can also if you're using cabal",
    "start": "126399",
    "end": "129679"
  },
  {
    "text": "have default extensions uh so these will",
    "start": "129679",
    "end": "132080"
  },
  {
    "text": "then apply over your entire project a",
    "start": "132080",
    "end": "134319"
  },
  {
    "text": "lot of people consider this a bad idea",
    "start": "134319",
    "end": "136720"
  },
  {
    "text": "um because you sorry savy",
    "start": "136720",
    "end": "140200"
  },
  {
    "text": "savagery some people have stronger",
    "start": "140200",
    "end": "142080"
  },
  {
    "text": "opinions than than others um so yeah I",
    "start": "142080",
    "end": "145760"
  },
  {
    "text": "guess the the main complaint with this",
    "start": "145760",
    "end": "147360"
  },
  {
    "text": "is you now have them enabled over your",
    "start": "147360",
    "end": "148760"
  },
  {
    "text": "entire project and you don't have any",
    "start": "148760",
    "end": "150200"
  },
  {
    "text": "visibility about what's in play per",
    "start": "150200",
    "end": "152440"
  },
  {
    "text": "module when you're working uh you can",
    "start": "152440",
    "end": "154840"
  },
  {
    "text": "enable them by the command line uh by",
    "start": "154840",
    "end": "156840"
  },
  {
    "text": "passing arguments to GHC and you can",
    "start": "156840",
    "end": "159400"
  },
  {
    "text": "enable them in ghci using uh this",
    "start": "159400",
    "end": "162680"
  },
  {
    "text": "command all",
    "start": "162680",
    "end": "165840"
  },
  {
    "text": "right so let's look at some extensions",
    "start": "166640",
    "end": "169239"
  },
  {
    "text": "uh we'll start with some syntactic sugar",
    "start": "169239",
    "end": "171319"
  },
  {
    "text": "and warm up from there we'll start with",
    "start": "171319",
    "end": "173920"
  },
  {
    "text": "overloaded strings which allows us to",
    "start": "173920",
    "end": "176080"
  },
  {
    "text": "use string literals for things other",
    "start": "176080",
    "end": "177319"
  },
  {
    "text": "than a list of",
    "start": "177319",
    "end": "178519"
  },
  {
    "text": "character so so if we ask uh ghci what",
    "start": "178519",
    "end": "181840"
  },
  {
    "text": "the type of a string literal is it'll",
    "start": "181840",
    "end": "183680"
  },
  {
    "text": "tell us a list of",
    "start": "183680",
    "end": "185200"
  },
  {
    "text": "characters if we enable overloaded",
    "start": "185200",
    "end": "187200"
  },
  {
    "text": "strings and ask it again it'll tell us",
    "start": "187200",
    "end": "188799"
  },
  {
    "text": "that it has type P where p is",
    "start": "188799",
    "end": "190840"
  },
  {
    "text": "constrained to be um an instance of is",
    "start": "190840",
    "end": "194080"
  },
  {
    "text": "string so what's is string uh it's a",
    "start": "194080",
    "end": "196879"
  },
  {
    "text": "pretty simple type class it says I can",
    "start": "196879",
    "end": "198840"
  },
  {
    "text": "turn a string into your",
    "start": "198840",
    "end": "201959"
  },
  {
    "text": "type uh it's commonly the the instance",
    "start": "201959",
    "end": "204840"
  },
  {
    "text": "for text is probably the most common one",
    "start": "204840",
    "end": "206879"
  },
  {
    "text": "I see around um You' probably used it",
    "start": "206879",
    "end": "208760"
  },
  {
    "text": "before",
    "start": "208760",
    "end": "210280"
  },
  {
    "text": "um and it just means that if we have a",
    "start": "210280",
    "end": "211680"
  },
  {
    "text": "function expecting text as its argument",
    "start": "211680",
    "end": "213840"
  },
  {
    "text": "type we can use a string L on its place",
    "start": "213840",
    "end": "216400"
  },
  {
    "text": "rather than having to manually call pack",
    "start": "216400",
    "end": "218159"
  },
  {
    "text": "and things like",
    "start": "218159",
    "end": "220560"
  },
  {
    "text": "that uh topple sections so these allow",
    "start": "220560",
    "end": "223319"
  },
  {
    "text": "for partially applied uh topple",
    "start": "223319",
    "end": "225599"
  },
  {
    "text": "Constructors uh an example will probably",
    "start": "225599",
    "end": "227519"
  },
  {
    "text": "make this a lot clearer uh if you have",
    "start": "227519",
    "end": "230120"
  },
  {
    "text": "uh seen Anonymous uh functions like this",
    "start": "230120",
    "end": "232400"
  },
  {
    "text": "before a common refactoring you'll see",
    "start": "232400",
    "end": "234799"
  },
  {
    "text": "is to use a section like this and so",
    "start": "234799",
    "end": "239159"
  },
  {
    "text": "when I was learning in hous school I",
    "start": "239159",
    "end": "240319"
  },
  {
    "text": "would see or use a Anonymous function",
    "start": "240319",
    "end": "242640"
  },
  {
    "text": "like this and think you know intuitively",
    "start": "242640",
    "end": "244840"
  },
  {
    "text": "maybe I can just do this that would be",
    "start": "244840",
    "end": "246560"
  },
  {
    "text": "nice um and it turns out you can but you",
    "start": "246560",
    "end": "249799"
  },
  {
    "text": "need the tle sections extension to do so",
    "start": "249799",
    "end": "253480"
  },
  {
    "text": "um and when I was looking at this",
    "start": "253480",
    "end": "255040"
  },
  {
    "text": "extension for the talk I also found out",
    "start": "255040",
    "end": "256799"
  },
  {
    "text": "you can do things like this um I",
    "start": "256799",
    "end": "259759"
  },
  {
    "text": "wouldn't recommend you do this uh I",
    "start": "259759",
    "end": "262079"
  },
  {
    "text": "think at this point you probably want to",
    "start": "262079",
    "end": "263400"
  },
  {
    "text": "use a different structure but you can um",
    "start": "263400",
    "end": "266440"
  },
  {
    "text": "and this will give you as you could",
    "start": "266440",
    "end": "267840"
  },
  {
    "text": "probably guess a function that will just",
    "start": "267840",
    "end": "269199"
  },
  {
    "text": "slot arguments into the holes in order",
    "start": "269199",
    "end": "272840"
  },
  {
    "text": "so don't don't do",
    "start": "272840",
    "end": "275759"
  },
  {
    "text": "that instance sigs uh so this one allows",
    "start": "275759",
    "end": "279039"
  },
  {
    "text": "you to add type signatures to your",
    "start": "279039",
    "end": "280600"
  },
  {
    "text": "instance",
    "start": "280600",
    "end": "281520"
  },
  {
    "text": "definitions so I find this one",
    "start": "281520",
    "end": "283560"
  },
  {
    "text": "particularly helpful if I'm uh defining",
    "start": "283560",
    "end": "285520"
  },
  {
    "text": "an instance for something and I'm not",
    "start": "285520",
    "end": "286840"
  },
  {
    "text": "necessarily familiar with the class or",
    "start": "286840",
    "end": "288360"
  },
  {
    "text": "the data type or you know the types are",
    "start": "288360",
    "end": "290320"
  },
  {
    "text": "getting a bit too big to fit in my",
    "start": "290320",
    "end": "292000"
  },
  {
    "text": "head you can add a uh type declaration",
    "start": "292000",
    "end": "295560"
  },
  {
    "text": "to your instance member and for one",
    "start": "295560",
    "end": "298199"
  },
  {
    "text": "it'll let GHC type check your instance",
    "start": "298199",
    "end": "300199"
  },
  {
    "text": "declaration and make sure you've got it",
    "start": "300199",
    "end": "301320"
  },
  {
    "text": "right in your own head which is always",
    "start": "301320",
    "end": "302720"
  },
  {
    "text": "good uh and it'll also have it in front",
    "start": "302720",
    "end": "304840"
  },
  {
    "text": "of you so it's kind of nice to have a",
    "start": "304840",
    "end": "307000"
  },
  {
    "text": "Target type that you're aiming for when",
    "start": "307000",
    "end": "308639"
  },
  {
    "text": "you're defining these things um so if",
    "start": "308639",
    "end": "311560"
  },
  {
    "text": "you don't have it enabled you get you",
    "start": "311560",
    "end": "312880"
  },
  {
    "text": "know a friendly error message like this",
    "start": "312880",
    "end": "314440"
  },
  {
    "text": "telling you hey just go and enable this",
    "start": "314440",
    "end": "316240"
  },
  {
    "text": "and things will",
    "start": "316240",
    "end": "318319"
  },
  {
    "text": "work um Lambda case uh this is very much",
    "start": "318319",
    "end": "321880"
  },
  {
    "text": "some syntactic sugar so if you have a",
    "start": "321880",
    "end": "325639"
  },
  {
    "text": "function takes an argument e and then",
    "start": "325639",
    "end": "327560"
  },
  {
    "text": "you're immediately patent matching on",
    "start": "327560",
    "end": "329160"
  },
  {
    "text": "the E by case expression uh you can get",
    "start": "329160",
    "end": "331960"
  },
  {
    "text": "rid of a little bit of that code like",
    "start": "331960",
    "end": "334400"
  },
  {
    "text": "this um using the back slash case get",
    "start": "334400",
    "end": "337840"
  },
  {
    "text": "rid of the argument e uh at first when I",
    "start": "337840",
    "end": "341280"
  },
  {
    "text": "saw this I thought it was kind of silly",
    "start": "341280",
    "end": "342560"
  },
  {
    "text": "but I found myself using it fairly",
    "start": "342560",
    "end": "344400"
  },
  {
    "text": "frequently so I throw it",
    "start": "344400",
    "end": "347440"
  },
  {
    "text": "in uh multi-way if is another similar",
    "start": "347440",
    "end": "350520"
  },
  {
    "text": "kind of tactic sugar uh",
    "start": "350520",
    "end": "353280"
  },
  {
    "text": "extension uh so it's kind of breaks down",
    "start": "353280",
    "end": "355919"
  },
  {
    "text": "if than El's and makes them a little bit",
    "start": "355919",
    "end": "357360"
  },
  {
    "text": "more Ts so if we have this nested if",
    "start": "357360",
    "end": "359520"
  },
  {
    "text": "then else we can clean up some of the ls",
    "start": "359520",
    "end": "362520"
  },
  {
    "text": "and replace them with uh vertical bars",
    "start": "362520",
    "end": "365000"
  },
  {
    "text": "and the thens with arrows and get a more",
    "start": "365000",
    "end": "367080"
  },
  {
    "text": "tur expression there which I find easier",
    "start": "367080",
    "end": "369319"
  },
  {
    "text": "to",
    "start": "369319",
    "end": "370800"
  },
  {
    "text": "read all right so we've looked at some",
    "start": "370800",
    "end": "373800"
  },
  {
    "start": "373000",
    "end": "567000"
  },
  {
    "text": "sugar we're going to bump it up and not",
    "start": "373800",
    "end": "376240"
  },
  {
    "text": "and start looking at some extensions to",
    "start": "376240",
    "end": "378479"
  },
  {
    "text": "records so record wild cards these allow",
    "start": "378479",
    "end": "381639"
  },
  {
    "text": "us to alide fields from record",
    "start": "381639",
    "end": "383680"
  },
  {
    "text": "construction and pattern",
    "start": "383680",
    "end": "385720"
  },
  {
    "text": "matching so let's say I have a person",
    "start": "385720",
    "end": "388360"
  },
  {
    "text": "record defined like this",
    "start": "388360",
    "end": "390440"
  },
  {
    "text": "and I want to greet a person and I'm",
    "start": "390440",
    "end": "392520"
  },
  {
    "text": "going to patent match uh all of the",
    "start": "392520",
    "end": "395360"
  },
  {
    "text": "fields from that because when I greet a",
    "start": "395360",
    "end": "397039"
  },
  {
    "text": "person I like to comment on their height",
    "start": "397039",
    "end": "399360"
  },
  {
    "text": "when I'm greeting them",
    "start": "399360",
    "end": "401880"
  },
  {
    "text": "um but this is kind of seems a little",
    "start": "401880",
    "end": "404039"
  },
  {
    "text": "bit Vose so we can enable record wild",
    "start": "404039",
    "end": "406720"
  },
  {
    "text": "cards and then cut out all of the",
    "start": "406720",
    "end": "409199"
  },
  {
    "text": "pattern matching and just use these",
    "start": "409199",
    "end": "411319"
  },
  {
    "text": "curly braces and the dots to say bring",
    "start": "411319",
    "end": "413680"
  },
  {
    "text": "all of the uh fields from this record",
    "start": "413680",
    "end": "416160"
  },
  {
    "text": "into scope using the names from the the",
    "start": "416160",
    "end": "418199"
  },
  {
    "text": "fields in the record",
    "start": "418199",
    "end": "421400"
  },
  {
    "text": "uh I can also use this to construct a",
    "start": "421400",
    "end": "423000"
  },
  {
    "text": "record so if I have a bunch of variables",
    "start": "423000",
    "end": "426039"
  },
  {
    "text": "in scope whose names correspond to the",
    "start": "426039",
    "end": "428080"
  },
  {
    "text": "fields in my record uh I can use uh the",
    "start": "428080",
    "end": "431199"
  },
  {
    "text": "same syntax to construct a record and if",
    "start": "431199",
    "end": "434319"
  },
  {
    "text": "I want to get really crazy I can use",
    "start": "434319",
    "end": "436680"
  },
  {
    "text": "duplicate record fields which will allow",
    "start": "436680",
    "end": "438919"
  },
  {
    "text": "me to Define records with uh the same",
    "start": "438919",
    "end": "441360"
  },
  {
    "text": "field names as other",
    "start": "441360",
    "end": "443039"
  },
  {
    "text": "records Define a new record type like",
    "start": "443039",
    "end": "445800"
  },
  {
    "text": "this which has names corresponding to",
    "start": "445800",
    "end": "447199"
  },
  {
    "text": "those in the person record from before",
    "start": "447199",
    "end": "450360"
  },
  {
    "text": "I can bring in all the fields from",
    "start": "450360",
    "end": "452720"
  },
  {
    "text": "person IND the scope and shove them into",
    "start": "452720",
    "end": "455160"
  },
  {
    "text": "my conference attendee",
    "start": "455160",
    "end": "458199"
  },
  {
    "text": "woo don't do this either please please",
    "start": "458199",
    "end": "461720"
  },
  {
    "text": "don't do these things so there are some",
    "start": "461720",
    "end": "463919"
  },
  {
    "text": "problems with record wild cards so this",
    "start": "463919",
    "end": "465599"
  },
  {
    "text": "was kind of as I was learning High",
    "start": "465599",
    "end": "467120"
  },
  {
    "text": "School I was introduced to this",
    "start": "467120",
    "end": "468199"
  },
  {
    "text": "extension and I would use it fairly",
    "start": "468199",
    "end": "470159"
  },
  {
    "text": "regularly because it seemed like a nice",
    "start": "470159",
    "end": "471560"
  },
  {
    "text": "way to save some syntax uh some tokens",
    "start": "471560",
    "end": "475319"
  },
  {
    "text": "uh but it has some problems and I would",
    "start": "475319",
    "end": "477599"
  },
  {
    "text": "now advise against using it it uh so uh",
    "start": "477599",
    "end": "481960"
  },
  {
    "text": "first problem is it's unclear where your",
    "start": "481960",
    "end": "483280"
  },
  {
    "text": "variables are coming from so in the case",
    "start": "483280",
    "end": "485720"
  },
  {
    "text": "where you defined a record and maybe",
    "start": "485720",
    "end": "487520"
  },
  {
    "text": "that record uh isn't actually defined in",
    "start": "487520",
    "end": "489479"
  },
  {
    "text": "your code it might come from another",
    "start": "489479",
    "end": "491000"
  },
  {
    "text": "package uh I now don't actually know",
    "start": "491000",
    "end": "493840"
  },
  {
    "text": "which Fields I've brought into scope I",
    "start": "493840",
    "end": "495520"
  },
  {
    "text": "might have to go document documentation",
    "start": "495520",
    "end": "498240"
  },
  {
    "text": "diving or on GitHub or something to try",
    "start": "498240",
    "end": "500240"
  },
  {
    "text": "and find the list of uh variables I've",
    "start": "500240",
    "end": "502120"
  },
  {
    "text": "brought into scope using record wild",
    "start": "502120",
    "end": "503599"
  },
  {
    "text": "cards um future you will not be happy",
    "start": "503599",
    "end": "505919"
  },
  {
    "text": "about this and your colleagues will",
    "start": "505919",
    "end": "507039"
  },
  {
    "text": "probably be even less happy",
    "start": "507039",
    "end": "510159"
  },
  {
    "text": "um yeah so all of the fields are brought",
    "start": "510159",
    "end": "512279"
  },
  {
    "text": "into scope as well I can't select a",
    "start": "512279",
    "end": "514120"
  },
  {
    "text": "subset of those uh",
    "start": "514120",
    "end": "516518"
  },
  {
    "text": "fields and we're somewhat vulnerable to",
    "start": "516519",
    "end": "518800"
  },
  {
    "text": "changes in the record in that if I",
    "start": "518800",
    "end": "520839"
  },
  {
    "text": "change the fields in the record or out",
    "start": "520839",
    "end": "522120"
  },
  {
    "text": "of field um I'll then have brought that",
    "start": "522120",
    "end": "525440"
  },
  {
    "text": "into scope where I've you I've used",
    "start": "525440",
    "end": "526880"
  },
  {
    "text": "record wild cards um which can also be",
    "start": "526880",
    "end": "530600"
  },
  {
    "text": "problematic so an alternative to this is",
    "start": "530600",
    "end": "533240"
  },
  {
    "text": "name field puns which a lot of people",
    "start": "533240",
    "end": "534959"
  },
  {
    "text": "say is a better alternative and I would",
    "start": "534959",
    "end": "536880"
  },
  {
    "text": "agree uh solve some of our problems so",
    "start": "536880",
    "end": "540320"
  },
  {
    "text": "going back to our greet person example",
    "start": "540320",
    "end": "542920"
  },
  {
    "text": "uh we can list the fields that we want",
    "start": "542920",
    "end": "545120"
  },
  {
    "text": "to bring to scope now and we've lost the",
    "start": "545120",
    "end": "547360"
  },
  {
    "text": "the boiler plate of the um assignment",
    "start": "547360",
    "end": "549519"
  },
  {
    "text": "and the The Binding that way and we've",
    "start": "549519",
    "end": "552000"
  },
  {
    "text": "just listed the fields that we need um",
    "start": "552000",
    "end": "553880"
  },
  {
    "text": "so we're still greeting people with the",
    "start": "553880",
    "end": "555480"
  },
  {
    "text": "height if for some perverse reason you",
    "start": "555480",
    "end": "557640"
  },
  {
    "text": "want to greet somebody without their",
    "start": "557640",
    "end": "558839"
  },
  {
    "text": "height uh you can leave that one out so",
    "start": "558839",
    "end": "561079"
  },
  {
    "text": "we can get a subset of the fields uh",
    "start": "561079",
    "end": "563240"
  },
  {
    "text": "that we want to talk about cool so",
    "start": "563240",
    "end": "567200"
  },
  {
    "start": "567000",
    "end": "777000"
  },
  {
    "text": "records and we're going to look at some",
    "start": "567200",
    "end": "569560"
  },
  {
    "text": "heavier weight",
    "start": "569560",
    "end": "571760"
  },
  {
    "text": "extensions uh scope type variables so",
    "start": "571760",
    "end": "574360"
  },
  {
    "text": "these allow us to scope our type",
    "start": "574360",
    "end": "575959"
  },
  {
    "text": "variables to the lexical scope of an",
    "start": "575959",
    "end": "579600"
  },
  {
    "text": "expression so let's say I'm defining",
    "start": "579600",
    "end": "581839"
  },
  {
    "text": "this function f here I've given it a uh",
    "start": "581839",
    "end": "585040"
  },
  {
    "text": "top level declaration list of a to list",
    "start": "585040",
    "end": "587000"
  },
  {
    "text": "of a and I'm using another type",
    "start": "587000",
    "end": "588720"
  },
  {
    "text": "declaration here for y's and if you're",
    "start": "588720",
    "end": "591959"
  },
  {
    "text": "used to working with Leal Scopes you",
    "start": "591959",
    "end": "593560"
  },
  {
    "text": "look at the type variable a and you say",
    "start": "593560",
    "end": "595000"
  },
  {
    "text": "yeah this makes sense I'm you know I",
    "start": "595000",
    "end": "596760"
  },
  {
    "text": "have a type variable a that corresponds",
    "start": "596760",
    "end": "598959"
  },
  {
    "text": "to the one the type declaration in f um",
    "start": "598959",
    "end": "601680"
  },
  {
    "text": "which is what I",
    "start": "601680",
    "end": "604160"
  },
  {
    "text": "want but unfortunately when you're",
    "start": "604360",
    "end": "606680"
  },
  {
    "text": "writing these type declarations you've",
    "start": "606680",
    "end": "608640"
  },
  {
    "text": "introducing a new type variable in each",
    "start": "608640",
    "end": "611200"
  },
  {
    "text": "declaration uh so they don't actually",
    "start": "611200",
    "end": "613920"
  },
  {
    "text": "agree in the way you might",
    "start": "613920",
    "end": "615640"
  },
  {
    "text": "think uh solution to this is scope type",
    "start": "615640",
    "end": "619000"
  },
  {
    "text": "variables and the kind of gotcha for me",
    "start": "619000",
    "end": "621600"
  },
  {
    "text": "when I first found this uh extension was",
    "start": "621600",
    "end": "623880"
  },
  {
    "text": "that you also need an explicit foral",
    "start": "623880",
    "end": "626279"
  },
  {
    "text": "here to say I'm talking about this uh",
    "start": "626279",
    "end": "628560"
  },
  {
    "text": "type variable a and I'd like it to have",
    "start": "628560",
    "end": "630240"
  },
  {
    "text": "this",
    "start": "630240",
    "end": "631720"
  },
  {
    "text": "scope all",
    "start": "631720",
    "end": "633440"
  },
  {
    "text": "right generaliz new type driving uh so",
    "start": "633440",
    "end": "636440"
  },
  {
    "text": "this is probably the most exciting new",
    "start": "636440",
    "end": "638040"
  },
  {
    "text": "extension in GHC",
    "start": "638040",
    "end": "639480"
  },
  {
    "text": "8.6 uh far superior to generaliz new",
    "start": "639480",
    "end": "643320"
  },
  {
    "text": "type deriving spell with zed from",
    "start": "643320",
    "end": "644920"
  },
  {
    "text": "previous",
    "start": "644920",
    "end": "645880"
  },
  {
    "text": "versions uh it allows us to derive I",
    "start": "645880",
    "end": "649440"
  },
  {
    "text": "speak the Queens um it allows us to",
    "start": "649440",
    "end": "652600"
  },
  {
    "text": "derive instances for new types based on",
    "start": "652600",
    "end": "654680"
  },
  {
    "text": "the type that they're at so let's say I",
    "start": "654680",
    "end": "657600"
  },
  {
    "text": "define a class here for pretty Printing",
    "start": "657600",
    "end": "661200"
  },
  {
    "text": "and I Define an instance for an INT and",
    "start": "661200",
    "end": "664160"
  },
  {
    "text": "then I Define a new type for age wraps",
    "start": "664160",
    "end": "666760"
  },
  {
    "text": "over in uh generalized new type driving",
    "start": "666760",
    "end": "669880"
  },
  {
    "text": "allows me to drive an instance for it um",
    "start": "669880",
    "end": "673600"
  },
  {
    "text": "for sorry for the pretty",
    "start": "673600",
    "end": "675839"
  },
  {
    "text": "class if I don't have uh the extension",
    "start": "675839",
    "end": "678760"
  },
  {
    "text": "turned on I get an error nice and",
    "start": "678760",
    "end": "680800"
  },
  {
    "text": "friendly tells me try generaliz new type",
    "start": "680800",
    "end": "683480"
  },
  {
    "text": "driving um and I went down a bit of a",
    "start": "683480",
    "end": "685959"
  },
  {
    "text": "rabbit hole with generaliz new type",
    "start": "685959",
    "end": "687240"
  },
  {
    "text": "driving because it has kind of an",
    "start": "687240",
    "end": "688600"
  },
  {
    "text": "interesting",
    "start": "688600",
    "end": "689480"
  },
  {
    "text": "history and progression uh so I'm not",
    "start": "689480",
    "end": "691680"
  },
  {
    "text": "going to cover all of that but I did",
    "start": "691680",
    "end": "694120"
  },
  {
    "text": "find it useful to think about or to see",
    "start": "694120",
    "end": "696680"
  },
  {
    "text": "how generaliz new type deriving works so",
    "start": "696680",
    "end": "699880"
  },
  {
    "text": "uh behind the scenes GHC well this is",
    "start": "699880",
    "end": "702200"
  },
  {
    "text": "kind of uh a programmer's view of how",
    "start": "702200",
    "end": "704880"
  },
  {
    "text": "this works it's not necessarily how it",
    "start": "704880",
    "end": "707200"
  },
  {
    "text": "actually works so you can think of it as",
    "start": "707200",
    "end": "709040"
  },
  {
    "text": "having uh as GHC defining a coercible",
    "start": "709040",
    "end": "711880"
  },
  {
    "text": "class over two parameters A and B and a",
    "start": "711880",
    "end": "715360"
  },
  {
    "text": "coer function that says if I have a",
    "start": "715360",
    "end": "717240"
  },
  {
    "text": "coercible instance for a and b I can",
    "start": "717240",
    "end": "719600"
  },
  {
    "text": "basically cast between these uh types",
    "start": "719600",
    "end": "723200"
  },
  {
    "text": "and so coercible is saying that these",
    "start": "723200",
    "end": "725079"
  },
  {
    "text": "two types have the same representation",
    "start": "725079",
    "end": "727920"
  },
  {
    "text": "in memory um so in the case of a new",
    "start": "727920",
    "end": "730920"
  },
  {
    "text": "type uh the new type age will have the",
    "start": "730920",
    "end": "733480"
  },
  {
    "text": "same representation in memory as an it",
    "start": "733480",
    "end": "735800"
  },
  {
    "text": "because that's the type that it's",
    "start": "735800",
    "end": "737839"
  },
  {
    "text": "wrapping so if we go back to our example",
    "start": "737839",
    "end": "740240"
  },
  {
    "text": "from",
    "start": "740240",
    "end": "741000"
  },
  {
    "text": "before um and we're using generaliz newp",
    "start": "741000",
    "end": "743519"
  },
  {
    "text": "deriving behind the scenes GHC will give",
    "start": "743519",
    "end": "745959"
  },
  {
    "text": "us some uh extra instances or we can at",
    "start": "745959",
    "end": "747959"
  },
  {
    "text": "least think of it as doing",
    "start": "747959",
    "end": "750040"
  },
  {
    "text": "um so it's now say that you know we can",
    "start": "750040",
    "end": "752199"
  },
  {
    "text": "coers between an intern and age and when",
    "start": "752199",
    "end": "755160"
  },
  {
    "text": "we we get our instance for um age for",
    "start": "755160",
    "end": "758800"
  },
  {
    "text": "the pretty class it's going to take the",
    "start": "758800",
    "end": "761240"
  },
  {
    "text": "definition for the uh instance for INT",
    "start": "761240",
    "end": "765320"
  },
  {
    "text": "and coers it to give us our new",
    "start": "765320",
    "end": "768199"
  },
  {
    "text": "instance um and you notice we're",
    "start": "768199",
    "end": "770639"
  },
  {
    "text": "coercing a function here so behind the",
    "start": "770639",
    "end": "772519"
  },
  {
    "text": "scenes GC has additional instances that",
    "start": "772519",
    "end": "774600"
  },
  {
    "text": "allow us to um do",
    "start": "774600",
    "end": "777360"
  },
  {
    "text": "that so I'm not going to go deeply into",
    "start": "777360",
    "end": "781199"
  },
  {
    "text": "roles but I will mention that when",
    "start": "781199",
    "end": "784519"
  },
  {
    "text": "generalized new type deriving was first",
    "start": "784519",
    "end": "786639"
  },
  {
    "text": "introduced and I think this was up until",
    "start": "786639",
    "end": "788199"
  },
  {
    "text": "about ght",
    "start": "788199",
    "end": "789639"
  },
  {
    "text": "7.6 uh it at times would uh conflate",
    "start": "789639",
    "end": "794079"
  },
  {
    "text": "Notions of equality so and you can uh",
    "start": "794079",
    "end": "797320"
  },
  {
    "text": "think of two types having the same",
    "start": "797320",
    "end": "798839"
  },
  {
    "text": "representation as being equal in one",
    "start": "798839",
    "end": "800399"
  },
  {
    "text": "sense they have the same sequence of",
    "start": "800399",
    "end": "801720"
  },
  {
    "text": "bits in memory and are equal um but the",
    "start": "801720",
    "end": "804000"
  },
  {
    "text": "name of those types might not be the",
    "start": "804000",
    "end": "805519"
  },
  {
    "text": "same and if you conflate those two uh it",
    "start": "805519",
    "end": "808240"
  },
  {
    "text": "used to be case that you could convince",
    "start": "808240",
    "end": "809720"
  },
  {
    "text": "GHC that two things had the same",
    "start": "809720",
    "end": "811399"
  },
  {
    "text": "representation in memory when they",
    "start": "811399",
    "end": "813160"
  },
  {
    "text": "didn't and if you do that you get fun",
    "start": "813160",
    "end": "816000"
  },
  {
    "text": "things like seg fults um so you used to",
    "start": "816000",
    "end": "818440"
  },
  {
    "text": "be able to write some nly code um",
    "start": "818440",
    "end": "820440"
  },
  {
    "text": "through things like that uh as a result",
    "start": "820440",
    "end": "822639"
  },
  {
    "text": "GHC introduced this concept of roles to",
    "start": "822639",
    "end": "824800"
  },
  {
    "text": "help clarify which type of equality to",
    "start": "824800",
    "end": "828480"
  },
  {
    "text": "use um but now as a result of this RO",
    "start": "828480",
    "end": "832320"
  },
  {
    "text": "system we can't add the uh join function",
    "start": "832320",
    "end": "835399"
  },
  {
    "text": "to the monad type class uh and still be",
    "start": "835399",
    "end": "838120"
  },
  {
    "text": "able to use generalized new type",
    "start": "838120",
    "end": "839800"
  },
  {
    "text": "deriving to derve monad so uh there's a",
    "start": "839800",
    "end": "843320"
  },
  {
    "text": "very interesting history here there's",
    "start": "843320",
    "end": "844720"
  },
  {
    "text": "some technical details I don't have time",
    "start": "844720",
    "end": "846240"
  },
  {
    "text": "to go into but there's a good uh blog",
    "start": "846240",
    "end": "848519"
  },
  {
    "text": "post in my references that will kind of",
    "start": "848519",
    "end": "850880"
  },
  {
    "text": "cover this whole story um so yeah",
    "start": "850880",
    "end": "853480"
  },
  {
    "text": "another example of uh there being some",
    "start": "853480",
    "end": "856040"
  },
  {
    "text": "trade-offs in this design",
    "start": "856040",
    "end": "858959"
  },
  {
    "text": "space all right type classes so thanks",
    "start": "858959",
    "end": "862720"
  },
  {
    "start": "859000",
    "end": "974000"
  },
  {
    "text": "to Professor wler we have type classes",
    "start": "862720",
    "end": "864519"
  },
  {
    "text": "in high school uh and we have a number",
    "start": "864519",
    "end": "866199"
  },
  {
    "text": "of extensions to them I'm really going",
    "start": "866199",
    "end": "868360"
  },
  {
    "text": "to talk about a few um so type classes",
    "start": "868360",
    "end": "871199"
  },
  {
    "text": "in high school 2010 they're in section",
    "start": "871199",
    "end": "873800"
  },
  {
    "text": "4.3.1 of the",
    "start": "873800",
    "end": "875560"
  },
  {
    "text": "standard and summarize a type class must",
    "start": "875560",
    "end": "879519"
  },
  {
    "text": "have the class",
    "start": "879519",
    "end": "880800"
  },
  {
    "text": "keyword it may have a context uh which",
    "start": "880800",
    "end": "883880"
  },
  {
    "text": "will refer to the super classes for the",
    "start": "883880",
    "end": "886120"
  },
  {
    "text": "class that we're",
    "start": "886120",
    "end": "887680"
  },
  {
    "text": "defining it must have a class name and",
    "start": "887680",
    "end": "890959"
  },
  {
    "text": "it must be parameterized over exactly",
    "start": "890959",
    "end": "892720"
  },
  {
    "text": "one type in this case U and it",
    "start": "892720",
    "end": "895600"
  },
  {
    "text": "optionally can declare one or more",
    "start": "895600",
    "end": "897680"
  },
  {
    "text": "members so some examples the show type",
    "start": "897680",
    "end": "901079"
  },
  {
    "text": "class that we're probably all familiar",
    "start": "901079",
    "end": "903000"
  },
  {
    "text": "with uh the OD class which is a subass",
    "start": "903000",
    "end": "905959"
  },
  {
    "text": "of",
    "start": "905959",
    "end": "907360"
  },
  {
    "text": "eek and another class that I made up",
    "start": "907360",
    "end": "910480"
  },
  {
    "text": "just to show you don't need members um",
    "start": "910480",
    "end": "913399"
  },
  {
    "text": "occasionally I've seen people use this",
    "start": "913399",
    "end": "914639"
  },
  {
    "text": "sort of thing to bundle together some",
    "start": "914639",
    "end": "916639"
  },
  {
    "text": "constraints that they would like to",
    "start": "916639",
    "end": "917639"
  },
  {
    "text": "refer to using the one",
    "start": "917639",
    "end": "920079"
  },
  {
    "text": "name all right so type class instances",
    "start": "920079",
    "end": "922519"
  },
  {
    "text": "in house school 2010 uh there in another",
    "start": "922519",
    "end": "924720"
  },
  {
    "text": "section of the standard you can go look",
    "start": "924720",
    "end": "925920"
  },
  {
    "text": "them up um they have to start with the",
    "start": "925920",
    "end": "928680"
  },
  {
    "text": "instance keyword they may have a",
    "start": "928680",
    "end": "931399"
  },
  {
    "text": "context they must mention the class",
    "start": "931399",
    "end": "934240"
  },
  {
    "text": "name they must mention the type that the",
    "start": "934240",
    "end": "936759"
  },
  {
    "text": "instances for and so this should be a",
    "start": "936759",
    "end": "939440"
  },
  {
    "text": "concrete type Constructor followed by",
    "start": "939440",
    "end": "941199"
  },
  {
    "text": "zero or more parameters which are type",
    "start": "941199",
    "end": "944079"
  },
  {
    "text": "variables and then it may contain",
    "start": "944079",
    "end": "946199"
  },
  {
    "text": "definitions for the classes members all",
    "start": "946199",
    "end": "948920"
  },
  {
    "text": "right extensions so the first one I'm",
    "start": "948920",
    "end": "951199"
  },
  {
    "text": "going to talk about is multi pram type",
    "start": "951199",
    "end": "952680"
  },
  {
    "text": "classes which allows us to Define type",
    "start": "952680",
    "end": "955440"
  },
  {
    "text": "classes that have more than one",
    "start": "955440",
    "end": "956920"
  },
  {
    "text": "parameter so an example examp the monad",
    "start": "956920",
    "end": "959600"
  },
  {
    "text": "reader class takes two parameters",
    "start": "959600",
    "end": "962279"
  },
  {
    "text": "r&m um so monad reader if you're not",
    "start": "962279",
    "end": "964560"
  },
  {
    "text": "familiar is uh used to more or less give",
    "start": "964560",
    "end": "968160"
  },
  {
    "text": "you an implicit argument to some",
    "start": "968160",
    "end": "969800"
  },
  {
    "text": "functions that it can pull from this",
    "start": "969800",
    "end": "971639"
  },
  {
    "text": "moad",
    "start": "971639",
    "end": "974040"
  },
  {
    "start": "974000",
    "end": "1077000"
  },
  {
    "text": "stack so flexible instances it will oh",
    "start": "974040",
    "end": "977920"
  },
  {
    "text": "yeah so that's multi pram type classes",
    "start": "977920",
    "end": "979600"
  },
  {
    "text": "that's pretty much it it was later to",
    "start": "979600",
    "end": "981079"
  },
  {
    "text": "find those classes uh flexible instances",
    "start": "981079",
    "end": "983480"
  },
  {
    "text": "will relax some of the rules for what",
    "start": "983480",
    "end": "984959"
  },
  {
    "text": "makes a valid type class",
    "start": "984959",
    "end": "986920"
  },
  {
    "text": "instance so for example",
    "start": "986920",
    "end": "989240"
  },
  {
    "text": "uh instance types can now be type",
    "start": "989240",
    "end": "991399"
  },
  {
    "text": "variables so we can define an instance",
    "start": "991399",
    "end": "993040"
  },
  {
    "text": "for a variable as opposed to a concrete",
    "start": "993040",
    "end": "996000"
  },
  {
    "text": "type uh type of variables can appear",
    "start": "996000",
    "end": "998560"
  },
  {
    "text": "appear multiple times in the instance",
    "start": "998560",
    "end": "1000120"
  },
  {
    "text": "head which it can't they can't in house",
    "start": "1000120",
    "end": "1003040"
  },
  {
    "text": "2010 and concrete types can be used as",
    "start": "1003040",
    "end": "1005639"
  },
  {
    "text": "parameters to uh instance types so some",
    "start": "1005639",
    "end": "1009000"
  },
  {
    "text": "examples uh we go back to our mon reader",
    "start": "1009000",
    "end": "1011199"
  },
  {
    "text": "class if we'd like to Define an instance",
    "start": "1011199",
    "end": "1013600"
  },
  {
    "text": "for",
    "start": "1013600",
    "end": "1014319"
  },
  {
    "text": "Monita and this is probably the The",
    "start": "1014319",
    "end": "1016720"
  },
  {
    "text": "Fairly obvious one given we're talking",
    "start": "1016720",
    "end": "1018000"
  },
  {
    "text": "about implicit function arguments um",
    "start": "1018000",
    "end": "1021120"
  },
  {
    "text": "we'll get an",
    "start": "1021120",
    "end": "1022240"
  },
  {
    "text": "error and it'll kind of walk through the",
    "start": "1022240",
    "end": "1024880"
  },
  {
    "text": "list of constraints that I kind of just",
    "start": "1024880",
    "end": "1026160"
  },
  {
    "text": "talked about uh saying that uh our",
    "start": "1026160",
    "end": "1029438"
  },
  {
    "text": "instance types have to have this form it",
    "start": "1029439",
    "end": "1031000"
  },
  {
    "text": "have to have a type Constructor well our",
    "start": "1031000",
    "end": "1032839"
  },
  {
    "text": "first parameter to our instance before",
    "start": "1032839",
    "end": "1034558"
  },
  {
    "text": "which is the type variable R um each",
    "start": "1034559",
    "end": "1038199"
  },
  {
    "text": "type variable should only appear in the",
    "start": "1038199",
    "end": "1039600"
  },
  {
    "text": "instance head at least sorry at most",
    "start": "1039600",
    "end": "1041640"
  },
  {
    "text": "once well that's not the case for our",
    "start": "1041640",
    "end": "1043199"
  },
  {
    "text": "instance either because type variable R",
    "start": "1043199",
    "end": "1044839"
  },
  {
    "text": "appeared multiple",
    "start": "1044839",
    "end": "1046240"
  },
  {
    "text": "times and then it will tell us you can",
    "start": "1046240",
    "end": "1048199"
  },
  {
    "text": "use flexible instances to disable this",
    "start": "1048199",
    "end": "1050840"
  },
  {
    "text": "and make everything go uh so we turn it",
    "start": "1050840",
    "end": "1053640"
  },
  {
    "text": "on things",
    "start": "1053640",
    "end": "1055240"
  },
  {
    "text": "work uh another sort of small silly",
    "start": "1055240",
    "end": "1058440"
  },
  {
    "text": "example just to show off the other",
    "start": "1058440",
    "end": "1059520"
  },
  {
    "text": "constraint is here I'm defining a an",
    "start": "1059520",
    "end": "1062520"
  },
  {
    "text": "instance of twizzle on maybe integer and",
    "start": "1062520",
    "end": "1066320"
  },
  {
    "text": "this wouldn't be valid in house school",
    "start": "1066320",
    "end": "1067440"
  },
  {
    "text": "2010 because uh we'd have to Define an",
    "start": "1067440",
    "end": "1069720"
  },
  {
    "text": "instance over maybe a so some type",
    "start": "1069720",
    "end": "1071840"
  },
  {
    "text": "variable a but here we're defining it",
    "start": "1071840",
    "end": "1073200"
  },
  {
    "text": "over a concrete type maybe",
    "start": "1073200",
    "end": "1076519"
  },
  {
    "text": "integer the last thing I'll say about",
    "start": "1076720",
    "end": "1079159"
  },
  {
    "text": "flexible instances is uh if you were to",
    "start": "1079159",
    "end": "1082640"
  },
  {
    "text": "write some uh particularly pathological",
    "start": "1082640",
    "end": "1085799"
  },
  {
    "text": "code uh you could compile that code with",
    "start": "1085799",
    "end": "1088840"
  },
  {
    "text": "all of your warning Stone on get a clean",
    "start": "1088840",
    "end": "1092400"
  },
  {
    "text": "compile and then run the code and",
    "start": "1092400",
    "end": "1096080"
  },
  {
    "text": "produce a set that had the same element",
    "start": "1096080",
    "end": "1098200"
  },
  {
    "text": "in it",
    "start": "1098200",
    "end": "1099240"
  },
  {
    "text": "twice so this seems quite alarmist and",
    "start": "1099240",
    "end": "1103000"
  },
  {
    "text": "that's not my intention here because",
    "start": "1103000",
    "end": "1104400"
  },
  {
    "text": "this was a fairly specially crafted uh",
    "start": "1104400",
    "end": "1107559"
  },
  {
    "text": "example to produce this uh output but it",
    "start": "1107559",
    "end": "1111280"
  },
  {
    "text": "is to say that uh in a pathological case",
    "start": "1111280",
    "end": "1114039"
  },
  {
    "text": "it is possible to use flexible instances",
    "start": "1114039",
    "end": "1116919"
  },
  {
    "text": "and do things like break set invariance",
    "start": "1116919",
    "end": "1119880"
  },
  {
    "text": "um which isn't nice I've never seen this",
    "start": "1119880",
    "end": "1121640"
  },
  {
    "text": "happen in practice so I'm not trying to",
    "start": "1121640",
    "end": "1123200"
  },
  {
    "text": "say you know don't use flexible",
    "start": "1123200",
    "end": "1124559"
  },
  {
    "text": "instances it's B it's you know terribly",
    "start": "1124559",
    "end": "1126240"
  },
  {
    "text": "on sound uh but again a reminder that it",
    "start": "1126240",
    "end": "1128960"
  },
  {
    "text": "is at least possible like we are",
    "start": "1128960",
    "end": "1130640"
  },
  {
    "text": "changing the language here it is",
    "start": "1130640",
    "end": "1132400"
  },
  {
    "text": "possible for things to go a bit",
    "start": "1132400",
    "end": "1135000"
  },
  {
    "text": "pear-shaped",
    "start": "1135000",
    "end": "1136640"
  },
  {
    "text": "um flexible content text so they relax",
    "start": "1136640",
    "end": "1139720"
  },
  {
    "text": "relax some of the requirements on",
    "start": "1139720",
    "end": "1142080"
  },
  {
    "text": "context uh the only time I really um use",
    "start": "1142080",
    "end": "1145919"
  },
  {
    "text": "this or you know most of the examples I",
    "start": "1145919",
    "end": "1147640"
  },
  {
    "text": "find are around writing code like this",
    "start": "1147640",
    "end": "1150080"
  },
  {
    "text": "so I have menad state and I want to",
    "start": "1150080",
    "end": "1152480"
  },
  {
    "text": "refer to it um it in my context using a",
    "start": "1152480",
    "end": "1155880"
  },
  {
    "text": "concrete State type my state because I",
    "start": "1155880",
    "end": "1158480"
  },
  {
    "text": "want to update I need to know what's in",
    "start": "1158480",
    "end": "1159640"
  },
  {
    "text": "that state type uh this isn't valid",
    "start": "1159640",
    "end": "1162919"
  },
  {
    "text": "because I'm referring to a concrete type",
    "start": "1162919",
    "end": "1165240"
  },
  {
    "text": "in my context it should be a type",
    "start": "1165240",
    "end": "1166840"
  },
  {
    "text": "parameter uh sorry type variable and",
    "start": "1166840",
    "end": "1169360"
  },
  {
    "text": "flexible contexts will allow you to do",
    "start": "1169360",
    "end": "1171880"
  },
  {
    "text": "this as a side note if you use classy",
    "start": "1171880",
    "end": "1175159"
  },
  {
    "text": "lenses or something similar you can uh",
    "start": "1175159",
    "end": "1177799"
  },
  {
    "text": "turn off flexible context and write",
    "start": "1177799",
    "end": "1179520"
  },
  {
    "text": "something like this instead so if I all",
    "start": "1179520",
    "end": "1182200"
  },
  {
    "text": "I need to know is that my state has",
    "start": "1182200",
    "end": "1184440"
  },
  {
    "text": "thing in it somewhere um I can express",
    "start": "1184440",
    "end": "1186640"
  },
  {
    "text": "that as a constraint also and get rid of",
    "start": "1186640",
    "end": "1188000"
  },
  {
    "text": "a flexible",
    "start": "1188000",
    "end": "1190480"
  },
  {
    "text": "context all right functional",
    "start": "1190960",
    "end": "1192679"
  },
  {
    "start": "1191000",
    "end": "1334000"
  },
  {
    "text": "dependencies so this allow they allow us",
    "start": "1192679",
    "end": "1194919"
  },
  {
    "text": "to express dependent relationships",
    "start": "1194919",
    "end": "1196760"
  },
  {
    "text": "between Type variables uh in our",
    "start": "1196760",
    "end": "1199679"
  },
  {
    "text": "classes so we go back to our we reader",
    "start": "1199679",
    "end": "1202000"
  },
  {
    "text": "example again we've got our class we",
    "start": "1202000",
    "end": "1204760"
  },
  {
    "text": "Define our instance and now we'd like to",
    "start": "1204760",
    "end": "1207240"
  },
  {
    "text": "use our instance in a function so here",
    "start": "1207240",
    "end": "1210159"
  },
  {
    "text": "we're um incrementing this implicit",
    "start": "1210159",
    "end": "1213120"
  },
  {
    "text": "argument um adding one to it and then so",
    "start": "1213120",
    "end": "1216640"
  },
  {
    "text": "we have a value of M of R and then we're",
    "start": "1216640",
    "end": "1219080"
  },
  {
    "text": "applying that to 41 so we've kind of",
    "start": "1219080",
    "end": "1222720"
  },
  {
    "text": "implied that our mod instance here is",
    "start": "1222720",
    "end": "1225320"
  },
  {
    "text": "for function",
    "start": "1225320",
    "end": "1226520"
  },
  {
    "text": "arrow and looking our instance it kind",
    "start": "1226520",
    "end": "1229039"
  },
  {
    "text": "of seems well fu is of type integer so",
    "start": "1229039",
    "end": "1231720"
  },
  {
    "text": "that's the type of our implicit argument",
    "start": "1231720",
    "end": "1234000"
  },
  {
    "text": "and we've got this one instance here um",
    "start": "1234000",
    "end": "1236760"
  },
  {
    "text": "but kind of suggest that the argument to",
    "start": "1236760",
    "end": "1239360"
  },
  {
    "text": "our function should also have type",
    "start": "1239360",
    "end": "1240520"
  },
  {
    "text": "integer right they both um",
    "start": "1240520",
    "end": "1243760"
  },
  {
    "text": "are uh despite your intuition we",
    "start": "1243760",
    "end": "1247080"
  },
  {
    "text": "actually have an ambiguity here well",
    "start": "1247080",
    "end": "1248919"
  },
  {
    "text": "despite my intuition anyway I won't",
    "start": "1248919",
    "end": "1250240"
  },
  {
    "text": "speak to you um so it turns out we could",
    "start": "1250240",
    "end": "1254159"
  },
  {
    "text": "actually Define uh additional instances",
    "start": "1254159",
    "end": "1257080"
  },
  {
    "text": "where our an instance was function Arrow",
    "start": "1257080",
    "end": "1260159"
  },
  {
    "text": "but taking some other parameter um at",
    "start": "1260159",
    "end": "1262679"
  },
  {
    "text": "which point it becomes much more obvious",
    "start": "1262679",
    "end": "1264799"
  },
  {
    "text": "that we can't um unambiguously choose an",
    "start": "1264799",
    "end": "1267679"
  },
  {
    "text": "instance here so uh functional",
    "start": "1267679",
    "end": "1270520"
  },
  {
    "text": "dependencies will help us uh or is one",
    "start": "1270520",
    "end": "1272760"
  },
  {
    "text": "way to get around this problem so if we",
    "start": "1272760",
    "end": "1274880"
  },
  {
    "text": "enable functional",
    "start": "1274880",
    "end": "1276039"
  },
  {
    "text": "dependencies and we Define our class but",
    "start": "1276039",
    "end": "1279159"
  },
  {
    "text": "this time we add this uh syntax so the",
    "start": "1279159",
    "end": "1282279"
  },
  {
    "text": "vertical pipe M Arrow R which says that",
    "start": "1282279",
    "end": "1286000"
  },
  {
    "text": "uh the type variable M or the type of M",
    "start": "1286000",
    "end": "1288440"
  },
  {
    "text": "will uniquely determine the type of R",
    "start": "1288440",
    "end": "1290720"
  },
  {
    "text": "which is to say if you give me the type",
    "start": "1290720",
    "end": "1292880"
  },
  {
    "text": "of M I can tell you what the type of R",
    "start": "1292880",
    "end": "1294799"
  },
  {
    "text": "will",
    "start": "1294799",
    "end": "1295960"
  },
  {
    "text": "be so now when I Define my monad reader",
    "start": "1295960",
    "end": "1299480"
  },
  {
    "text": "instance um I'm defining my monad",
    "start": "1299480",
    "end": "1302520"
  },
  {
    "text": "instance here is function Arrow which",
    "start": "1302520",
    "end": "1304799"
  },
  {
    "text": "means that I can no longer Define any",
    "start": "1304799",
    "end": "1307360"
  },
  {
    "text": "other instances where my moded instance",
    "start": "1307360",
    "end": "1309120"
  },
  {
    "text": "is function Arrow because I've",
    "start": "1309120",
    "end": "1310600"
  },
  {
    "text": "introduced this functional",
    "start": "1310600",
    "end": "1312480"
  },
  {
    "text": "dependency so now when I write my",
    "start": "1312480",
    "end": "1315159"
  },
  {
    "text": "function um I because I don't have any",
    "start": "1315159",
    "end": "1318679"
  },
  {
    "text": "additional uh instances of mono where",
    "start": "1318679",
    "end": "1321960"
  },
  {
    "text": "mon instances function Arrow um yeah GHC",
    "start": "1321960",
    "end": "1325520"
  },
  {
    "text": "can unambiguously infer the type of the",
    "start": "1325520",
    "end": "1328799"
  },
  {
    "text": "um function argument so we get type",
    "start": "1328799",
    "end": "1330760"
  },
  {
    "text": "inference back which is very",
    "start": "1330760",
    "end": "1334320"
  },
  {
    "start": "1334000",
    "end": "1388000"
  },
  {
    "text": "nice all right so I think I might have g",
    "start": "1334320",
    "end": "1336559"
  },
  {
    "text": "under time so",
    "start": "1336559",
    "end": "1339320"
  },
  {
    "text": "conclusion uh hasle 2010 is a smaller",
    "start": "1339320",
    "end": "1342919"
  },
  {
    "text": "language than you probably think or as I",
    "start": "1342919",
    "end": "1345159"
  },
  {
    "text": "often think about it um when I think of",
    "start": "1345159",
    "end": "1346840"
  },
  {
    "text": "H I'm usually thinking of high school",
    "start": "1346840",
    "end": "1348720"
  },
  {
    "text": "plus a whole lot of extensions that I",
    "start": "1348720",
    "end": "1350559"
  },
  {
    "text": "commonly have",
    "start": "1350559",
    "end": "1352120"
  },
  {
    "text": "enabled um GHC defines a bunch of these",
    "start": "1352120",
    "end": "1355400"
  },
  {
    "text": "extensions and is in some ways kind of",
    "start": "1355400",
    "end": "1357559"
  },
  {
    "text": "the de facto um standard for high school",
    "start": "1357559",
    "end": "1359679"
  },
  {
    "text": "these days I think a lot of people think",
    "start": "1359679",
    "end": "1361159"
  },
  {
    "text": "of it like that um and finally that",
    "start": "1361159",
    "end": "1364520"
  },
  {
    "text": "language extensions at least some of",
    "start": "1364520",
    "end": "1365880"
  },
  {
    "text": "them come with some trade-offs so um",
    "start": "1365880",
    "end": "1368640"
  },
  {
    "text": "when you're enabling them you are",
    "start": "1368640",
    "end": "1369960"
  },
  {
    "text": "modifying the language um be",
    "start": "1369960",
    "end": "1372640"
  },
  {
    "text": "careful cool um there's references there",
    "start": "1372640",
    "end": "1376120"
  },
  {
    "text": "I'll let you go through in your own time",
    "start": "1376120",
    "end": "1377480"
  },
  {
    "text": "but um yeah thank",
    "start": "1377480",
    "end": "1382200"
  },
  {
    "text": "you",
    "start": "1387279",
    "end": "1390279"
  }
]