[
  {
    "start": "0",
    "end": "36000"
  },
  {
    "text": "[Music]",
    "start": "2550",
    "end": "11320"
  },
  {
    "text": "so yeah let's get started um I'm going to talk to you guys today about the verification of uh distributed system",
    "start": "11320",
    "end": "17279"
  },
  {
    "text": "and the point of this talk is not to like belabor formal methods and academic proofs because people in Industry don't",
    "start": "17279",
    "end": "24039"
  },
  {
    "text": "use them um so we're going to talk about some real ways that you can do it and I I have to mention formal proof just",
    "start": "24039",
    "end": "29599"
  },
  {
    "text": "because like their thing and and there is some interesting uses in Industry that are happening right now um so let's",
    "start": "29599",
    "end": "34840"
  },
  {
    "text": "get started uh I'm Katie M there it goes I'm Katie mcaffrey uh like I said I'm a",
    "start": "34840",
    "end": "40640"
  },
  {
    "start": "36000",
    "end": "73000"
  },
  {
    "text": "distributed systems engineer I've spent my career building um mostly large scale",
    "start": "40640",
    "end": "45680"
  },
  {
    "text": "backends that power entertainment experiences in video games so for Microsoft on the Xbox so Halo series uh",
    "start": "45680",
    "end": "52120"
  },
  {
    "text": "Gears of War HBO um and now I work at Twitter uh where I'm uh I was a tech lead of",
    "start": "52120",
    "end": "58359"
  },
  {
    "text": "observability and I've recently branched out into distributed uh build tools which is super exciting this is me on",
    "start": "58359",
    "end": "63760"
  },
  {
    "text": "the internet uh my DMs are open if you have questions or want to chat afterwards um totally talk to me because",
    "start": "63760",
    "end": "70159"
  },
  {
    "text": "I I like doing that it's great to hear from everyone um okay so we're going to start this talk off with a quote from Leslie",
    "start": "70159",
    "end": "75880"
  },
  {
    "start": "73000",
    "end": "117000"
  },
  {
    "text": "Lamport because what distributed systems talk doesn't need a Leslie Lamport reference um so Leslie defined back in",
    "start": "75880",
    "end": "81880"
  },
  {
    "text": "the day that a distributed system is one in which the failure of a computer you didn't even know existed can render your",
    "start": "81880",
    "end": "87119"
  },
  {
    "text": "own computer use unusable so so back then maybe that was fine uh this is not",
    "start": "87119",
    "end": "93479"
  },
  {
    "text": "okay today if like one computer goes down and totally breaks your whole system then we have a really big problem",
    "start": "93479",
    "end": "98720"
  },
  {
    "text": "um because your users are most likely being affected and that impacts your bottom line so uh the point of this talk",
    "start": "98720",
    "end": "104560"
  },
  {
    "text": "today is sort of like how do we increase our confidence that our system is doing the right thing so that this one pesky",
    "start": "104560",
    "end": "109600"
  },
  {
    "text": "computer going down or multiple computers going down or a data center going down doesn't affect our system and",
    "start": "109600",
    "end": "115360"
  },
  {
    "text": "it can keep running um I also want to take a quick aside to say we are all building",
    "start": "115360",
    "end": "120680"
  },
  {
    "start": "117000",
    "end": "149000"
  },
  {
    "text": "distributed systems even if you aren't building Google scale or Twitter scale or whatever insert uh company scale uh",
    "start": "120680",
    "end": "128160"
  },
  {
    "text": "we're all building distributed systems and we all have been for a while our clients talk to our services which talks to a database uh and this is even when",
    "start": "128160",
    "end": "134879"
  },
  {
    "text": "we were back on one's single database um and so this may be a small simple system but it's still distributed because they",
    "start": "134879",
    "end": "141120"
  },
  {
    "text": "uh we're talking over a network components can fail um and so all of these tools are that we're going to go",
    "start": "141120",
    "end": "146280"
  },
  {
    "text": "through today are applicable to um any size system um your system might be simple it may be really large and",
    "start": "146280",
    "end": "152480"
  },
  {
    "start": "149000",
    "end": "171000"
  },
  {
    "text": "complicated like Twitter services this is a a trace uh created by Zipkin which is our distributed tracing system at",
    "start": "152480",
    "end": "158360"
  },
  {
    "text": "Twitter of all of our microservices um these have sometimes been referred to as Death Star",
    "start": "158360",
    "end": "163480"
  },
  {
    "text": "architectures um so like this is kind of crazy and like testing all of this is very important because we want to keep",
    "start": "163480",
    "end": "168680"
  },
  {
    "text": "Twitter up and running so you can use it and then you know sometimes we build these systems that are a little crazy",
    "start": "168680",
    "end": "174480"
  },
  {
    "text": "and you might like sort of scratch your head and be like what the hell have you built um but we still want to test these systems and make sure that they work",
    "start": "174480",
    "end": "180319"
  },
  {
    "text": "okay too okay so uh quick overview of where we're going to go today we're going to",
    "start": "180319",
    "end": "186360"
  },
  {
    "start": "182000",
    "end": "220000"
  },
  {
    "text": "talk about formal verification very briefly uh this is and then uh just because it is sort of like the gold",
    "start": "186360",
    "end": "192000"
  },
  {
    "text": "standard of how we verify that our systems are correct and then we'll spend the bulk of the time talking about how you can test your things in the wild and",
    "start": "192000",
    "end": "197920"
  },
  {
    "text": "while these don't give you a gold standard um like like gold starve approvable that it's provably correct it",
    "start": "197920",
    "end": "203560"
  },
  {
    "text": "does give you a lot more confidence you can sort of mix and match which ones work for you based on time and budget",
    "start": "203560",
    "end": "208680"
  },
  {
    "text": "and um investment in tools and resources that you have and then we'll briefly touch on some research that I think is",
    "start": "208680",
    "end": "213760"
  },
  {
    "text": "really interesting that's giving us like a new hope uh that maybe building and testing distributed systems is not so",
    "start": "213760",
    "end": "220040"
  },
  {
    "start": "220000",
    "end": "239000"
  },
  {
    "text": "terrible I'm going to go through a ton of information in this talk uh and don't",
    "start": "220040",
    "end": "225360"
  },
  {
    "text": "feel like you have to take notes or anything I have a GitHub page where uh this talk is listed and all of the references are also in there if you want",
    "start": "225360",
    "end": "232040"
  },
  {
    "text": "to dive deeply into more uh don't worry about trying to read that uh there's a bigger Link at the end and I'll tweet it",
    "start": "232040",
    "end": "237159"
  },
  {
    "text": "out uh also if you want to look at it okay so let's get into testing what when",
    "start": "237159",
    "end": "243079"
  },
  {
    "start": "239000",
    "end": "300000"
  },
  {
    "text": "we do testing and uh formally what we say is that we're trying to prove certain properties about our system and",
    "start": "243079",
    "end": "248680"
  },
  {
    "text": "we're trying to prove safety properties and this is the idea that something bad will never happen in our system and we're trying to also prove liveness",
    "start": "248680",
    "end": "254920"
  },
  {
    "text": "properties and this is uh the guarantee that something will eventually happen in our system that our system can make progress you can obviously build simply",
    "start": "254920",
    "end": "261959"
  },
  {
    "text": "build a system that has either one of these properties like exclusively um but it's generally not a useful system um",
    "start": "261959",
    "end": "269479"
  },
  {
    "text": "right uh you can also think of safety properties as this idea of like what is the system allowed to do um basically",
    "start": "269479",
    "end": "275600"
  },
  {
    "text": "like this could be a guarantee that all committed data so all right acknowledged or acknowledged rights are persistent",
    "start": "275600",
    "end": "281520"
  },
  {
    "text": "and correct and like durably stored and will never be lost um equivalently you can also say aliveness Pro uh property",
    "start": "281520",
    "end": "287880"
  },
  {
    "text": "is this idea of like what the system must eventually do um so this is an idea of like when I receive a request I will",
    "start": "287880",
    "end": "293919"
  },
  {
    "text": "eventually respond to that request um so those are sort of very like formal terms of what we're doing when we're",
    "start": "293919",
    "end": "301039"
  },
  {
    "start": "300000",
    "end": "326000"
  },
  {
    "text": "testing uh like I said formal verification is this idea that sort of came from Academia um and this is how we",
    "start": "301039",
    "end": "307160"
  },
  {
    "text": "prove that systems are correct this is really great because when we build like you know programming languages and things like that we want to have an idea",
    "start": "307160",
    "end": "312720"
  },
  {
    "text": "that they actually work or a consensus algorithm and this gives us this gold star like our system is provably correct",
    "start": "312720",
    "end": "319000"
  },
  {
    "text": "we have done like we have math that has told us that the system is going to do what we think it's going to do and",
    "start": "319000",
    "end": "324400"
  },
  {
    "text": "that's really useful uh for certain things um formal specific generally use",
    "start": "324400",
    "end": "331319"
  },
  {
    "start": "326000",
    "end": "348000"
  },
  {
    "text": "uh uh so so there are two sort of ones that people generally have heard of there's t+ and then there's uh",
    "start": "331319",
    "end": "336680"
  },
  {
    "text": "we're going to go through a quick tlaa plus example just in case you've never seen it and you're totally like I've heard of this but and people talk about",
    "start": "336680",
    "end": "342360"
  },
  {
    "text": "how terrible it is and boring um just because I think it's interesting to to see",
    "start": "342360",
    "end": "347880"
  },
  {
    "text": "um and this is a quote that once again Leslie Lamport invented TL Plus at Microsoft research um and he writes in",
    "start": "347880",
    "end": "355199"
  },
  {
    "text": "his book uh specifying systems which you can just read a pdf online it's cool um it's a good idea to understand a system",
    "start": "355199",
    "end": "361039"
  },
  {
    "text": "before building it so this is the idea that we should like maybe design something before we start coding it but he also goes on to say that it's a good",
    "start": "361039",
    "end": "366560"
  },
  {
    "text": "idea to write a specification of your system before implementing it so this is saying like let's define what properties our systems are going to have and that",
    "start": "366560",
    "end": "373199"
  },
  {
    "text": "prove that these properties are going to hold and actually produce the outcomes that we think they're going to produce so um this is an example from uh",
    "start": "373199",
    "end": "380479"
  },
  {
    "start": "377000",
    "end": "426000"
  },
  {
    "text": "specifying systems of t plus and the hour clock specification so he basically writes a really simple specification of",
    "start": "380479",
    "end": "387039"
  },
  {
    "text": "an hour clock uh this is just the idea that that displays the hour from like 1 to",
    "start": "387039",
    "end": "392080"
  },
  {
    "text": "12 um and so you'll write your proof and you'll Define that like right this one",
    "start": "392080",
    "end": "397160"
  },
  {
    "text": "line is saying that like the hour can be one to the number 12 like those in integer numbers um and then it defines",
    "start": "397160",
    "end": "403520"
  },
  {
    "text": "how it updates if it's 12 it becomes one otherwise it increments by one hour plus one and then you take this uh this is",
    "start": "403520",
    "end": "410440"
  },
  {
    "text": "like you know it looks like code right and you take it and you run it either use TL TLC which is a model Checker or",
    "start": "410440",
    "end": "416120"
  },
  {
    "text": "tlaps which is a proof assistant and then you put your specification into one of those and it will tell you whether",
    "start": "416120",
    "end": "421680"
  },
  {
    "text": "your system is correct or not and um and then you have a verifiably provable system so that's neat uh industry has",
    "start": "421680",
    "end": "429000"
  },
  {
    "start": "426000",
    "end": "448000"
  },
  {
    "text": "actually used this this is not just an academic thing so in uh 2014 Amazon released a technical report on how they",
    "start": "429000",
    "end": "434759"
  },
  {
    "text": "use t plus to verify 10 plus core pieces of their in infrastructure including S3",
    "start": "434759",
    "end": "439960"
  },
  {
    "text": "um this is a super approachable paper so if you're interested in maybe using this to verify key pieces of infrastructure I",
    "start": "439960",
    "end": "445400"
  },
  {
    "text": "highly recommend reading it uh so we'll go through some of the the highlights but basically they they declared at the",
    "start": "445400",
    "end": "450960"
  },
  {
    "start": "448000",
    "end": "510000"
  },
  {
    "text": "end of this paper that formal methods have been a huge success and they're now in their annual planning actually",
    "start": "450960",
    "end": "456400"
  },
  {
    "text": "budgeting time into Building Systems so that they uh allocate engineering time to use TLA plus and write specifications",
    "start": "456400",
    "end": "463199"
  },
  {
    "text": "for their crucial pieces of infrastructure like S3 um when they did this they found two",
    "start": "463199",
    "end": "468840"
  },
  {
    "text": "very serious bugs that they say they couldn't have found in any other manner of testing uh and then it also allowed",
    "start": "468840",
    "end": "475080"
  },
  {
    "text": "them to increase confidence to make all these um sort of like very comp at perf optimizations that were changing the",
    "start": "475080",
    "end": "481159"
  },
  {
    "text": "underlying implementation um and the algorithm quite a bit uh and they felt that they wouldn't have had this",
    "start": "481159",
    "end": "486599"
  },
  {
    "text": "confidence to make these optimizations in these core pieces of storage because that's kind of risky um without having a",
    "start": "486599",
    "end": "492319"
  },
  {
    "text": "formally correct proof so um so this is sort of cool like if you are building something that other",
    "start": "492319",
    "end": "499039"
  },
  {
    "text": "people are going to you heavily rely on like a storage system or a database uh or you're offering something as a",
    "start": "499039",
    "end": "504759"
  },
  {
    "text": "service like maybe this is something you want to invest in if especially if you have strong consistency guarantees around it",
    "start": "504759",
    "end": "511039"
  },
  {
    "start": "510000",
    "end": "560000"
  },
  {
    "text": "they do call out also in this paper that one of the and this is typically one of the biggest criticisms of uh T Plus in",
    "start": "511039",
    "end": "516399"
  },
  {
    "text": "formal methods is that they generally you write this uh logic or this like your formal specification code and",
    "start": "516399",
    "end": "522080"
  },
  {
    "text": "that's not code that generally runs your system um and so you could have a totally correct specification of your",
    "start": "522080",
    "end": "527640"
  },
  {
    "text": "system and your code that you write is still wrong um and and that's like a challenge right um it's worth noting",
    "start": "527640",
    "end": "534040"
  },
  {
    "text": "that which I didn't have time to go into actually can generate um hascal or objective camel from the specification",
    "start": "534040",
    "end": "540040"
  },
  {
    "text": "and that is runable uh for a subset I don't believe it does the whole language I believe it only does the subset of the language because other like you have to",
    "start": "540040",
    "end": "545760"
  },
  {
    "text": "be able to prove properties that like it terminates and you like can't do that with language most languages um so",
    "start": "545760",
    "end": "552519"
  },
  {
    "text": "that's like something that sort of helps bridge the gap but obviously we still aren't all the way there even if you have a formal specification you probably",
    "start": "552519",
    "end": "558160"
  },
  {
    "text": "still need to test the code that you wrote so um let's talk about how we're",
    "start": "558160",
    "end": "563480"
  },
  {
    "text": "going to test the code how us practitioners are going to do this in the wild and so while we may not get",
    "start": "563480",
    "end": "569800"
  },
  {
    "text": "this idea of a formally correct or provably correct system you know we get this idea of it seems pretty legit so",
    "start": "569800",
    "end": "575720"
  },
  {
    "text": "I'm going to put it in production okay this is super basic I",
    "start": "575720",
    "end": "582519"
  },
  {
    "start": "580000",
    "end": "613000"
  },
  {
    "text": "don't want to belabor unit tests but like write them please um so typically",
    "start": "582519",
    "end": "587920"
  },
  {
    "text": "this is like the idea that it's implemented by the developer who is writing the code um it can be ran locally with Ci or no environment needed",
    "start": "587920",
    "end": "594640"
  },
  {
    "text": "it's just your CPU um and this is to verify basic functionality and error cases is uh this increases your",
    "start": "594640",
    "end": "600839"
  },
  {
    "text": "confidence that your code's actually doing the right thing typically I like test cases for it it's increasing my confidence that like you know 6 months",
    "start": "600839",
    "end": "606880"
  },
  {
    "text": "down the line my code's doing still doing the same thing when someone has like you know done a big refactor or or changed uh an",
    "start": "606880",
    "end": "613480"
  },
  {
    "start": "613000",
    "end": "751000"
  },
  {
    "text": "implementation and now I would like to break for a brief ran to festo because um if you're going to the programming",
    "start": "613480",
    "end": "619360"
  },
  {
    "text": "languages track or anything or you used a typed programming languages types are not testing types prevent you typed",
    "start": "619360",
    "end": "626640"
  },
  {
    "text": "languages are great I actually prefer to use them so I want to totally like talk about my bias because this is a",
    "start": "626640",
    "end": "631800"
  },
  {
    "text": "perspective um but like when you're writing in a typed language it only gives you so much it can only prove as",
    "start": "631800",
    "end": "639000"
  },
  {
    "text": "much as your type system is as expressive as your type system is um so this is like a brief example in Scala I",
    "start": "639000",
    "end": "645000"
  },
  {
    "text": "Define a method ad and then like I make a dumb typo and I'm actually multiplying the values on return so like obviously",
    "start": "645000",
    "end": "651320"
  },
  {
    "text": "the type system has not made the system correct this is going to return the wrong thing a unit test would find this",
    "start": "651320",
    "end": "657720"
  },
  {
    "text": "um and and I I sort of break here because I think it's sort of uh there's a lot of debate in the programming",
    "start": "657720",
    "end": "663920"
  },
  {
    "text": "Community um but we we don't have expressive enough programming languages and the ones that we're typically using",
    "start": "663920",
    "end": "669160"
  },
  {
    "text": "in Industry to like rely on this there's actually research going on that may make this better but we're not there yet um I",
    "start": "669160",
    "end": "675160"
  },
  {
    "text": "also sort of want to call out that um you know this is sort of this is a this is a thing that happens a lot um there was a story of a younger developer that",
    "start": "675160",
    "end": "682000"
  },
  {
    "text": "I was working with at one point who he was very enamored with type systems and the mathematical proofs behind them and",
    "start": "682000",
    "end": "687680"
  },
  {
    "text": "type Theory and that's great uh but he believed that you didn't have to write test cases and if you're on my team",
    "start": "687680",
    "end": "693399"
  },
  {
    "text": "you're going to write test cases so like caveat if you ever want to work with me um so I wrote in a code review that like",
    "start": "693399",
    "end": "699480"
  },
  {
    "text": "hey um you need to add some test cases to this and I like went through and did a thorough code review and I actually found a bug which was uh his uh",
    "start": "699480",
    "end": "707639"
  },
  {
    "text": "recursion algorithm never uh would never exit it would actually recurse forever and could blow up your stack and so if",
    "start": "707639",
    "end": "712720"
  },
  {
    "text": "you deploy this into production that's going to cause a bad time um and a simple unit test case would catch this",
    "start": "712720",
    "end": "718440"
  },
  {
    "text": "right so and then I you know very nicely wrote back uh cuz I wanted to use this as a teaching moment that hey I think",
    "start": "718440",
    "end": "724160"
  },
  {
    "text": "there's an INF recursion bug here could you please add a test case specifically for this and he did and then we all moved on and our lives were better",
    "start": "724160",
    "end": "731680"
  },
  {
    "text": "right um I also want to point out that like TCP doesn't really care about your type system so when you start going over the network like all bets are off and",
    "start": "731680",
    "end": "738199"
  },
  {
    "text": "your type system isn't going to help you here yet right once again programming language research people who may be in",
    "start": "738199",
    "end": "744000"
  },
  {
    "text": "the audience uh you know like please solve this problem for me but like TCP doesn't care so uh this sort of brings",
    "start": "744000",
    "end": "750519"
  },
  {
    "text": "me to my next topic of you need integration tests and I know there's a lot of different testing methodology in",
    "start": "750519",
    "end": "756600"
  },
  {
    "start": "751000",
    "end": "885000"
  },
  {
    "text": "Industry uh but I sort of Define integration test if you're going to stand up a small some kind of environment you're going to write these",
    "start": "756600",
    "end": "762399"
  },
  {
    "text": "tests uh so that you're exercising sort of the the the network boundaries between your systems so this is talking",
    "start": "762399",
    "end": "768519"
  },
  {
    "text": "to your database or testing your network protocol testing versions of your network protocol also important um",
    "start": "768519",
    "end": "775000"
  },
  {
    "text": "there's this fun sort of story that I had when we were shipping Halo 4 that we caught a fairly large bug that would",
    "start": "775000",
    "end": "780760"
  },
  {
    "text": "have really hammered our system at launch because we had proper integration testing so I worked on the statistic",
    "start": "780760",
    "end": "785959"
  },
  {
    "text": "service of Halo 4 you uploaded your stats at the end of a game and we process them we noticed during integration testing that the game was",
    "start": "785959",
    "end": "791800"
  },
  {
    "text": "consistently uploading the stat blob three times and this thing is big and it's expensive to process so like doing",
    "start": "791800",
    "end": "797760"
  },
  {
    "text": "three times the low that we had projected would have been a really bad time in production and so I'm going back",
    "start": "797760",
    "end": "803639"
  },
  {
    "text": "and forth with the network developer or the Game Dev who's responsible for this feature on his side and I had written the API on our side side and I'm like",
    "start": "803639",
    "end": "809720"
  },
  {
    "text": "look look at our logs we're returning an HTP 200 like why are you thinking we failed and keep sending it to us three",
    "start": "809720",
    "end": "815440"
  },
  {
    "text": "times and still think that you failed to upload stats and he's like I don't know like you guys must be sending us something wrong and we had this nice little banter back and forth and",
    "start": "815440",
    "end": "821920"
  },
  {
    "text": "eventually what we found out is that because of Legacy code um what the game code was actually looking for was the",
    "start": "821920",
    "end": "828720"
  },
  {
    "text": "words done in all caps in the payload exclamation point to Mark a thing as a success so um integration tests are",
    "start": "828720",
    "end": "836079"
  },
  {
    "text": "really useful because it's testing the breakdown between your interfaces right and and once again like very smart",
    "start": "836079",
    "end": "841639"
  },
  {
    "text": "developers do very different things and we all have to deal with Legacy code so we should you know exercise these boundaries and prove that they're",
    "start": "841639",
    "end": "847720"
  },
  {
    "text": "correct before we just sort of you know throw code out there to our users to test also to support unit integration",
    "start": "847720",
    "end": "855320"
  },
  {
    "text": "test there's this really lovely paper that's probably one of my favorite from 2014 uh where called Simple testing can",
    "start": "855320",
    "end": "862079"
  },
  {
    "text": "prevent most critical failures and uh what the authors did is they studied 198",
    "start": "862079",
    "end": "867440"
  },
  {
    "text": "randomly sampled real world's failures reported on open source software so this included things like Cassandra hbas hdfs",
    "start": "867440",
    "end": "873959"
  },
  {
    "text": "map ruce and redis and then they have a ton of information in this paper um but",
    "start": "873959",
    "end": "879839"
  },
  {
    "text": "I'm going to go through some of the key uh highlights that I think are really interesting um but also like go read this paper too so uh one of the key",
    "start": "879839",
    "end": "887480"
  },
  {
    "start": "885000",
    "end": "932000"
  },
  {
    "text": "findings that I think that was super interesting because it debunks a popular myth uh that you need like a whole giant",
    "start": "887480",
    "end": "893880"
  },
  {
    "text": "staging environment that looks just like production to reproduce some of these like nasty production level bugs is that",
    "start": "893880",
    "end": "899480"
  },
  {
    "text": "out of 98% of the failures that they analyze three nodes or less can we reproduce this you can stand up three nodes on your laptop and run it right so",
    "start": "899480",
    "end": "906320"
  },
  {
    "text": "like we can stand up three nodes in a Dev environment that's super cost effective it's super cheap so there's really almost no um reason we shouldn't",
    "start": "906320",
    "end": "914000"
  },
  {
    "text": "be doing this level of testing it's really effective in finding failures in our systems and and when I say",
    "start": "914000",
    "end": "919680"
  },
  {
    "text": "catastrophic failures what they're talking about is like data loss system crashes from these core systems that are",
    "start": "919680",
    "end": "925040"
  },
  {
    "text": "actually supposed to be very stable and store our data and be very reliable",
    "start": "925040",
    "end": "930160"
  },
  {
    "text": "um so this is like do integration tests right um another thing is testing error handling code uh could have presented",
    "start": "930160",
    "end": "936759"
  },
  {
    "start": "932000",
    "end": "1062000"
  },
  {
    "text": "58% of catastrophic failures so this is once again we didn't write unit tests that tested uh anything besides the",
    "start": "936759",
    "end": "942680"
  },
  {
    "text": "golden path or we didn't write unit tests at all uh and so what this says to me and as a practitioner and one thing",
    "start": "942680",
    "end": "948440"
  },
  {
    "text": "that I took to heart is use a code coverage tool I know code coverage tools are super you know like it doesn't tell you if you have 100% coverage that your",
    "start": "948440",
    "end": "954839"
  },
  {
    "text": "code is correct but it gives you an idea where you have a gap and if there's like all these big like oh we didn't test the error handling cases like 58% of",
    "start": "954839",
    "end": "961480"
  },
  {
    "text": "catastrophic failures were caused by error error handling right yeah so so so to do this it's",
    "start": "961480",
    "end": "969199"
  },
  {
    "text": "super easy like I know writing test cases isn't the most fun thing in the world but like you know we get paid for",
    "start": "969199",
    "end": "974240"
  },
  {
    "text": "this um also what I think is interesting here is that like you know and we've all done this right like in Gears of War we",
    "start": "974240",
    "end": "979639"
  },
  {
    "text": "were like investigating a bug after launch and we're going through the codebase and we find this like you know if do this else if do this else uh error",
    "start": "979639",
    "end": "988600"
  },
  {
    "text": "uh please fix K thanks byy in a comment and there was like no code there so that actually wasn't the bug but you know",
    "start": "988600",
    "end": "993720"
  },
  {
    "text": "like I think we all have these in our code bases so uh just actually handling them will help us a",
    "start": "993720",
    "end": "999800"
  },
  {
    "text": "lot finally um one of the other the last point from this paper that I'm going to leave you with today is that uh 35% of",
    "start": "999800",
    "end": "1006240"
  },
  {
    "text": "catastrophic failures were caused by very very basic things like and error handling code is simply um empty or only",
    "start": "1006240",
    "end": "1011720"
  },
  {
    "text": "contained a log statement they actually found in the paper that most of the catastrophic errors were logged so that's at least good right you have",
    "start": "1011720",
    "end": "1017560"
  },
  {
    "text": "information to go fix them uh but they just weren't handled uh error handlers abort cluster uh aborts the cluster on",
    "start": "1017560",
    "end": "1024000"
  },
  {
    "text": "an overly General exception so this is like oh catch exception and then like you know tear down the cluster which is",
    "start": "1024000",
    "end": "1030640"
  },
  {
    "text": "bad so maybe like do a little more thought about how your systems are supposed to fail uh or this idea of like",
    "start": "1030640",
    "end": "1036520"
  },
  {
    "text": "error Handler code contains comment lines like fix me or to do um this is laziness right um and this is causing",
    "start": "1036520",
    "end": "1043678"
  },
  {
    "text": "catastrophic failures in our system and like so like we talk about how terrible and hard distributed systems are to build we can fix a lot of those problems",
    "start": "1043679",
    "end": "1050840"
  },
  {
    "text": "by just doing unit and integration tests um and this paper sort of showed us that so I really like this paper I'm actually",
    "start": "1050840",
    "end": "1056039"
  },
  {
    "text": "going to be talking about it at uh cucon or at New York's papers we love in June if you're there come say",
    "start": "1056039",
    "end": "1062200"
  },
  {
    "start": "1062000",
    "end": "1101000"
  },
  {
    "text": "hi okay so let's move on to something that maybe you haven't heard about uh and is not just me ranting about right",
    "start": "1062200",
    "end": "1068400"
  },
  {
    "text": "test cases uh this is property based testing so this is sort of inspired by like model Checkers which are actually",
    "start": "1068400",
    "end": "1073919"
  },
  {
    "text": "like a formal method of verifying where uh you go and actually exercise the entire state space of input into uh into",
    "start": "1073919",
    "end": "1081400"
  },
  {
    "text": "your system on that formal specification so what property based testing does is this is you know made more industry",
    "start": "1081400",
    "end": "1086640"
  },
  {
    "text": "friendly and um they're going to execute uh you're going to write properties about your system that you want them to",
    "start": "1086640",
    "end": "1092000"
  },
  {
    "text": "hold and then it's going to execute randomly over that state space so while it doesn't prove that your system is",
    "start": "1092000",
    "end": "1097120"
  },
  {
    "text": "correct it is exercising more of the state space than just a single unit test case can uh there are a ton of tools to do",
    "start": "1097120",
    "end": "1103880"
  },
  {
    "start": "1101000",
    "end": "1217000"
  },
  {
    "text": "this quick check is the it was invented by John Hughes and that was sort of the first one and there's a version in tcal",
    "start": "1103880",
    "end": "1109120"
  },
  {
    "text": "and earling that you can use and so what you do here is you def Define the specification instead of a test case or",
    "start": "1109120",
    "end": "1114640"
  },
  {
    "text": "you can write both if you really want uh you use a tool that generates many inputs to test the scope uh in the",
    "start": "1114640",
    "end": "1121720"
  },
  {
    "text": "specification and what's super nice is that if they all pass then you get a green you know thumbs up uh and if one",
    "start": "1121720",
    "end": "1126799"
  },
  {
    "text": "fails it'll actually tell you uh like the specific use case that caused the failure so then that gives you a lot of",
    "start": "1126799",
    "end": "1133760"
  },
  {
    "text": "information to go and start debugging this right it's not just like oh like something failed in the wild and now I",
    "start": "1133760",
    "end": "1138919"
  },
  {
    "text": "have to go scrub through like you know miles of logs to figure out what happened across my system that's",
    "start": "1138919",
    "end": "1144679"
  },
  {
    "text": "annoying this is really nice um and then one other quick note from that previous",
    "start": "1144679",
    "end": "1149760"
  },
  {
    "text": "paper about testing and catastrophic failures is that they sort of found that basically like three inputs or less",
    "start": "1149760",
    "end": "1154960"
  },
  {
    "text": "could reproduce Mo most catastrophic failures and the order was deterministic so if you can Define uh your properties",
    "start": "1154960",
    "end": "1161000"
  },
  {
    "text": "broad enough you may catch them with a tool like this um so quick check's the original one uh I've used Scola check",
    "start": "1161000",
    "end": "1167559"
  },
  {
    "text": "that's written in Scola and Java and on the jvm and then if you want to use it like all these languages down here also",
    "start": "1167559",
    "end": "1173200"
  },
  {
    "text": "have Quick Check ports and I link to this from references cuz if you can't read all that but basically there's one of these for almost any language that",
    "start": "1173200",
    "end": "1178600"
  },
  {
    "text": "we're using in production today um which is cool it's also worth noting that quick check is really great because it's",
    "start": "1178600",
    "end": "1185000"
  },
  {
    "text": "uh been used by comp it's been successfully used by companies um like uh baso which has riok which is a nosql",
    "start": "1185000",
    "end": "1192400"
  },
  {
    "text": "eventually consistent data store and they have a great talk on how to sort of model eventual consistency properties um",
    "start": "1192400",
    "end": "1197679"
  },
  {
    "text": "that's in my reference section uh using quick check uh they've used it to find quick check to find bugs in",
    "start": "1197679",
    "end": "1203280"
  },
  {
    "text": "Volvo cars and most recently there was a talk uh and a paper publish about how they use it to find bugs and Dropbox and",
    "start": "1203280",
    "end": "1208960"
  },
  {
    "text": "so these are going to discover some of your more gnarly bugs because it's going to exercise over a larger uh set of",
    "start": "1208960",
    "end": "1214320"
  },
  {
    "text": "inputs then you just have to like think about um just a super quick example so",
    "start": "1214320",
    "end": "1220480"
  },
  {
    "start": "1217000",
    "end": "1288000"
  },
  {
    "text": "you can basically see like this is not I'm not asking you to write a crazy specification uh this is the scholar check one because that's what I've used",
    "start": "1220480",
    "end": "1227039"
  },
  {
    "text": "um so this top one is basically Al saying uh I'm going to define a type small integers and then this is a basic",
    "start": "1227039",
    "end": "1233080"
  },
  {
    "text": "level property you can like combine properties together to make more complicated statements but it's basically going to say that like the",
    "start": "1233080",
    "end": "1239200"
  },
  {
    "text": "number should always be between zero and 100 and so anytime I sort of see this then you know that that property will",
    "start": "1239200",
    "end": "1244720"
  },
  {
    "text": "hold um this second one is how to reverse a link list or reverse a list uh",
    "start": "1244720",
    "end": "1251320"
  },
  {
    "text": "and so it says you know the reverse of the reverse of a list should be equal to the list and then like what uh scholar",
    "start": "1251320",
    "end": "1257480"
  },
  {
    "text": "check will do is go and gener generate a bunch of uh inputs to this and ensure that holds so you don't have like an off by one error or like you know whatever",
    "start": "1257480",
    "end": "1264720"
  },
  {
    "text": "like uh some bug in your system and it'll return you a counter example so this is this is pretty easy to do in um",
    "start": "1264720",
    "end": "1270320"
  },
  {
    "text": "you know I think I think for the basic stuff is very similar to writing unit test cases on um the investment time and",
    "start": "1270320",
    "end": "1275720"
  },
  {
    "text": "you can obviously do way more with this so I like property based testing I'm encouraging a lot of my teams to use",
    "start": "1275720",
    "end": "1282039"
  },
  {
    "text": "it more because I think it finds a lot of bugs and it's it it's sort of low investment for high reward",
    "start": "1282039",
    "end": "1289720"
  },
  {
    "start": "1288000",
    "end": "1321000"
  },
  {
    "text": "um finally I want to move to uh or fault injection which is another way that we can test distributed systems I think",
    "start": "1289720",
    "end": "1295600"
  },
  {
    "text": "this is particularly useful for distributed systems because we're basically forcing our systems to fail and then we're observing what",
    "start": "1295600",
    "end": "1301799"
  },
  {
    "text": "happens uh I fully believe that if you do not force the system to fail all the theory and like proofs in the world like",
    "start": "1301799",
    "end": "1308760"
  },
  {
    "text": "besides formal specifications uh are are basically not going to give you you shouldn't have any confidence that it's going to operate correctly in Failure",
    "start": "1308760",
    "end": "1314600"
  },
  {
    "text": "modes um so you should stand it up and force it to fail and see what actually happens and throughout your",
    "start": "1314600",
    "end": "1321000"
  },
  {
    "start": "1321000",
    "end": "1354000"
  },
  {
    "text": "design one example of a faal injection system that you're probably familiar with is Netflix simei and army I'm not",
    "start": "1321000",
    "end": "1326840"
  },
  {
    "text": "going to spend a ton on time on this but I like to like show it as like this fits into that classification of tests so",
    "start": "1326840",
    "end": "1332600"
  },
  {
    "text": "this is like they have chaos monkey which kills random instances latency monkey which introduces uh Network lag",
    "start": "1332600",
    "end": "1338480"
  },
  {
    "text": "in in between packets and then they have chaos gorilla which takes out an entire availability Zone to make sure that they're multi-c tolerant and things like",
    "start": "1338480",
    "end": "1344760"
  },
  {
    "text": "that obviously this is a ton of investment and we don't have to go this far with uh fault injection testing you",
    "start": "1344760",
    "end": "1350600"
  },
  {
    "text": "don't have to build something of this scale to get uh benefits of it another um popular fault injection",
    "start": "1350600",
    "end": "1357360"
  },
  {
    "start": "1354000",
    "end": "1386000"
  },
  {
    "text": "test is Jepson so this is a tool that's open source that was written by Kyle Kingsbury and what it goes is it does it",
    "start": "1357360",
    "end": "1363440"
  },
  {
    "text": "simulates Network partitions in the system under test and then um after the test operations and results are analyzed",
    "start": "1363440",
    "end": "1369200"
  },
  {
    "text": "it will basically say like did your claimed consistency guarantees hold um were they upheld he's uses this to test",
    "start": "1369200",
    "end": "1374320"
  },
  {
    "text": "a bunch of different systems including like mongodb elastic search Kafka um there's a whole list on his website if",
    "start": "1374320",
    "end": "1380679"
  },
  {
    "text": "you want to go read them um and basically what Kyle sort of showed us as he started doing this a few years back",
    "start": "1380679",
    "end": "1386600"
  },
  {
    "start": "1386000",
    "end": "1449000"
  },
  {
    "text": "is that the distributed systems we rely on are maybe not as reliable as we think they are um and this isn't because",
    "start": "1386600",
    "end": "1391640"
  },
  {
    "text": "people are bad people or bad developers it's just because distributed systems are hard and predicting all of the failure cases and dealing with paral",
    "start": "1391640",
    "end": "1398159"
  },
  {
    "text": "partial failure and asynchron is hard um and so what's really great about this",
    "start": "1398159",
    "end": "1403679"
  },
  {
    "text": "project I think is that he publishes these results he files bugs on uh you know GI Hub and open source projects and",
    "start": "1403679",
    "end": "1410120"
  },
  {
    "text": "then a lot of these things have been like fixed right and systems are getting better the goal is not to like make fun",
    "start": "1410120",
    "end": "1415400"
  },
  {
    "text": "of people by finding bugs the goal is to like make the systems better that we use although like this image is hilarious and was these were drawn by Kyle and he",
    "start": "1415400",
    "end": "1421480"
  },
  {
    "text": "let me use them um also you can like now pay Kyle to jeffson test your system so if you're building like a database or something",
    "start": "1421480",
    "end": "1427919"
  },
  {
    "text": "that's like a piece of infrastructure maybe do that I want to pause really briefly to be like passing none of these tests I've",
    "start": "1427919",
    "end": "1434080"
  },
  {
    "text": "shown you while they will increase your confidence that your system is doing the right thing passing them does not Ensure that there are no bugs in your system",
    "start": "1434080",
    "end": "1439720"
  },
  {
    "text": "there still could be bugs um but we probably have more the more of these we use and the more of the these tools that",
    "start": "1439720",
    "end": "1445039"
  },
  {
    "text": "we use um the more confidence we have that our our system is doing the right",
    "start": "1445039",
    "end": "1450240"
  },
  {
    "start": "1449000",
    "end": "1547000"
  },
  {
    "text": "thing uh another final method of uh fault injection tests is uh this idea of",
    "start": "1450240",
    "end": "1455279"
  },
  {
    "text": "game days so this was developed by Jesse Robbins at Amazon in 2 in the 2000s and",
    "start": "1455279",
    "end": "1460559"
  },
  {
    "text": "he actually had the title there of the master of disaster because basically what he would do is he would just go break production and he would he would",
    "start": "1460559",
    "end": "1467840"
  },
  {
    "text": "do this in a responsible way where he would tell Engineers that uh there's going to be a major outage in 3 to four months get your systems ready and they",
    "start": "1467840",
    "end": "1474440"
  },
  {
    "text": "wouldn't know exactly what the major outage could be it could be you know we lost an entire data center um I guess one time they mimicked that there was a",
    "start": "1474440",
    "end": "1480760"
  },
  {
    "text": "fire in the data center uh or you could lose a rack or a series of racks um and",
    "start": "1480760",
    "end": "1486679"
  },
  {
    "text": "and reduce Your Capacity significantly and so the idea here is that a we're telling developers like you know your systems are going to fail plan for it",
    "start": "1486679",
    "end": "1493240"
  },
  {
    "text": "and make them more reliable um and then the other idea here is that they're testing their people Prof processes in",
    "start": "1493240",
    "end": "1499080"
  },
  {
    "text": "addition to their system so the system failed and now we have to our on our devops people and our on call people",
    "start": "1499080",
    "end": "1504640"
  },
  {
    "text": "trying to fix it and how do we ensure that it's fixed right like are those processes also good where is the",
    "start": "1504640",
    "end": "1509799"
  },
  {
    "text": "breakdown and communication there so you're testing your people and your processes in addition to your software",
    "start": "1509799",
    "end": "1515640"
  },
  {
    "text": "um so this has been used in a bunch of different things it also helps you if you have a ton of data centers or pops or um you know instances installed",
    "start": "1515640",
    "end": "1522919"
  },
  {
    "text": "around the world if you become more Global um figuring out where you have these weird hidden dependencies I think they found a bug where basically the",
    "start": "1522919",
    "end": "1529120"
  },
  {
    "text": "data center they took out uh contained the only it was the only instance of their paging system so like no one got",
    "start": "1529120",
    "end": "1534600"
  },
  {
    "text": "alerts that the data center was down um and that's kind of bad um but like this is how you find these things that are",
    "start": "1534600",
    "end": "1540440"
  },
  {
    "text": "you know maybe more operational maybe more config driven error um those are still very difficult things to test",
    "start": "1540440",
    "end": "1546960"
  },
  {
    "text": "right so if you want to run a game day at your company how do you do this and it may not be like as involved as like",
    "start": "1546960",
    "end": "1552600"
  },
  {
    "start": "1547000",
    "end": "1607000"
  },
  {
    "text": "an Amazon one right uh you're going to notify your engineers that a failure's coming like you probably shouldn't just like pull the plug one day and Felix",
    "start": "1552600",
    "end": "1559600"
  },
  {
    "text": "prize um you're going to induce a failure then at some future period of time you will monitor these systems that",
    "start": "1559600",
    "end": "1565960"
  },
  {
    "text": "are under test uh typically there will also be an an observing only team so they're sitting there and they're more",
    "start": "1565960",
    "end": "1572120"
  },
  {
    "text": "their job is to monitor the recovery process so this is how you find the bugs and the people processes and where the breakdowns are the breakdowns are you",
    "start": "1572120",
    "end": "1579520"
  },
  {
    "text": "don't want the the devs who are sort of like oh my gosh like we just lost an entire rack the system's on fire and trying to fix that to also be trying to",
    "start": "1579520",
    "end": "1586039"
  },
  {
    "text": "evaluate like the processes this is idea of having an objective Observer uh and then when you're done",
    "start": "1586039",
    "end": "1592039"
  },
  {
    "text": "with that you need to sit down and go through the list of like here's where everything failed you want to prioritize those bugs and get buying across the",
    "start": "1592039",
    "end": "1597720"
  },
  {
    "text": "teams because typically where they found failures in this especially in people processes is across team boundaries",
    "start": "1597720",
    "end": "1603679"
  },
  {
    "text": "right because that's always where the breakdown in communication is okay just to sort of point out like",
    "start": "1603679",
    "end": "1611440"
  },
  {
    "start": "1607000",
    "end": "1709000"
  },
  {
    "text": "how simple this can be and like how critical of bug they can find um stripe",
    "start": "1611440",
    "end": "1617120"
  },
  {
    "text": "wrote A A Blog post about how they ran a game day and all they did is they basically ran kill nine on their primary",
    "start": "1617120",
    "end": "1624240"
  },
  {
    "text": "redus node and then it went down and like the other two like started handling requests and that was fine but then it",
    "start": "1624240",
    "end": "1630080"
  },
  {
    "text": "came back up and it had no data and it decided it was still leader and it propagated the fact that there was no",
    "start": "1630080",
    "end": "1635240"
  },
  {
    "text": "data in the cluster to everyone in the cluster and they lost all the data in the cluster so that's bad luckily they",
    "start": "1635240",
    "end": "1640320"
  },
  {
    "text": "had done a backup because they were doing they knew they were doing controlled failure um and so right um",
    "start": "1640320",
    "end": "1645399"
  },
  {
    "text": "there's this tweet that Kelly sumer's made at the same time once this blog post was published cuz like I don't know if you guys were on Twitter when this",
    "start": "1645399",
    "end": "1651120"
  },
  {
    "text": "happened but it was really entertaining to watch Twitter while this was happening um but basically this idea of",
    "start": "1651120",
    "end": "1656559"
  },
  {
    "text": "like you know in Industry we need to be better about this just running Hill n just like literally like shooting a note",
    "start": "1656559",
    "end": "1661880"
  },
  {
    "text": "in the head in a test environment or like in production can uh like lead to",
    "start": "1661880",
    "end": "1667200"
  },
  {
    "text": "really disastrous results and you know it's worth noting that like what they did is uh like the redus author came",
    "start": "1667200",
    "end": "1672399"
  },
  {
    "text": "back and said after this outage that he had not expected the configuration that they were using and that's why this failure happened um so this sort of",
    "start": "1672399",
    "end": "1679600"
  },
  {
    "text": "hearkens back to especially in this open source world if we're going to pick up a dependency and use it then it's sort of",
    "start": "1679600",
    "end": "1686279"
  },
  {
    "text": "on us to vet that dependency right if especially if it's a critical piece of infrastructure because you know",
    "start": "1686279",
    "end": "1692679"
  },
  {
    "text": "especially with like these crazy config databases and things like that and like distributed cues and all that kind of",
    "start": "1692679",
    "end": "1698080"
  },
  {
    "text": "stuff if you're going to stray from the normal like you're you may have a problem because that path may not have",
    "start": "1698080",
    "end": "1703519"
  },
  {
    "text": "been totally thought out or you may be doing something that the authors never thought you were going to do and therefore was not well tested",
    "start": "1703519",
    "end": "1710120"
  },
  {
    "start": "1709000",
    "end": "1780000"
  },
  {
    "text": "okay we're going to take another quick little ran to festo break because I have some thoughts about testing in",
    "start": "1710159",
    "end": "1715760"
  },
  {
    "text": "production that was ran in production that test case didn't need to be Rand in production to prove that that failure",
    "start": "1715760",
    "end": "1721039"
  },
  {
    "text": "happened um so I think there's a lot of value in",
    "start": "1721039",
    "end": "1726440"
  },
  {
    "text": "testing with production data I'm a big believer of that I tend to use in a lot of my systems have ways to fork in",
    "start": "1726440",
    "end": "1731720"
  },
  {
    "text": "production data to test things and test in staging um and we're going to talk about some actual testing and production",
    "start": "1731720",
    "end": "1737399"
  },
  {
    "text": "code um but you're impacting your users at this point and that's problematic because your users are having a bad time",
    "start": "1737399",
    "end": "1744159"
  },
  {
    "text": "when your system fails in production um so it's this risk versus reward thing if it's not a super critical system maybe",
    "start": "1744159",
    "end": "1749320"
  },
  {
    "text": "it's fine to test in production but if this is like a critical backbone piece of your infrastructure or like core component of your service um the risk is",
    "start": "1749320",
    "end": "1756919"
  },
  {
    "text": "pretty high to just sort of like you know send some untested code out there and be like it's fine or not and then roll back um so I just I just sort of",
    "start": "1756919",
    "end": "1764640"
  },
  {
    "text": "wanted to say that I think you know there's a lot of um like hype around testing and production but that doesn't",
    "start": "1764640",
    "end": "1769880"
  },
  {
    "text": "mean like testing and production should be the final step we should have a lot of confidence and have implemented some of these other things in staging",
    "start": "1769880",
    "end": "1775600"
  },
  {
    "text": "environments or an unit test and integration test to prove that we think our system works I also want to say that like",
    "start": "1775600",
    "end": "1781720"
  },
  {
    "start": "1780000",
    "end": "1815000"
  },
  {
    "text": "monitoring is not testing people say this to me L CU I ran the observability team at Twitter and I'm like monitoring",
    "start": "1781720",
    "end": "1786799"
  },
  {
    "text": "is not testing monitoring is super critical to your system and understanding what's happening in your system and recovering from failure in",
    "start": "1786799",
    "end": "1793880"
  },
  {
    "text": "your system but it's not testing all it's going to do is like tell you that if you have a graph that happens to show a failure that like maybe you'll see the",
    "start": "1793880",
    "end": "1799960"
  },
  {
    "text": "failure uh if you happen to be watching the graph or maybe you'll get a page right but this is a reactive approach",
    "start": "1799960",
    "end": "1805240"
  },
  {
    "text": "this is not verifying that your system's correct it's just sort of telling you what's happening so have monitoring but",
    "start": "1805240",
    "end": "1811279"
  },
  {
    "text": "like do more things than just monitoring to test your system um finally another way to verify",
    "start": "1811279",
    "end": "1817960"
  },
  {
    "start": "1815000",
    "end": "1888000"
  },
  {
    "text": "in production I call it verification right because like at this point it's already impacting your users so it really verification um is that you know",
    "start": "1817960",
    "end": "1824840"
  },
  {
    "text": "and I think this is actually a really good process I'm not like trying to say don't Canary but do other things first",
    "start": "1824840",
    "end": "1829880"
  },
  {
    "text": "uh this is sometimes called like red green testing or whatever but the idea here is that you gradually introduce uh",
    "start": "1829880",
    "end": "1835559"
  },
  {
    "text": "new code into production and this greatly reduces the risk of doing deploys and is actually super powerful",
    "start": "1835559",
    "end": "1840960"
  },
  {
    "text": "from like an operations perspective um the the canaries have a",
    "start": "1840960",
    "end": "1846039"
  },
  {
    "text": "lot of limitations so canaries are only going to tell you that the golden path typically is working right that you",
    "start": "1846039",
    "end": "1851320"
  },
  {
    "text": "haven't like broken user functionality that they're using all the time because canaries can only tell you that they perform as well as the the old version",
    "start": "1851320",
    "end": "1858840"
  },
  {
    "text": "at this exact moment in time and so unless at this moment in time there is a network partition happening or you know",
    "start": "1858840",
    "end": "1864760"
  },
  {
    "text": "a data center is down or some other failure is happening you don't actually know if like the canary is just as good",
    "start": "1864760",
    "end": "1870480"
  },
  {
    "text": "as the old version it just it verifies the golden path and that's all it gives you and so I think super powerful tool",
    "start": "1870480",
    "end": "1876159"
  },
  {
    "text": "use it but understand the the limitations uh people were like joking they're like why isn't there a canary bird this is a Canary Island butterfly",
    "start": "1876159",
    "end": "1882840"
  },
  {
    "text": "uh for people who are using my slides um so I tried um",
    "start": "1882840",
    "end": "1888600"
  },
  {
    "text": "um okay so we just went through a lot of things about verification in the wild uh",
    "start": "1888600",
    "end": "1894519"
  },
  {
    "text": "you know like obviously I'm very realistic about the fact that there are deadlines and that we only have so many resources and so like maybe we can't all",
    "start": "1894519",
    "end": "1900519"
  },
  {
    "text": "build a simei an army or don't have the time to like jeffson test every system we build but we do have the time to",
    "start": "1900519",
    "end": "1905559"
  },
  {
    "text": "write unit integration test that should be like base level engineering effort uh and like that paper that we went through",
    "start": "1905559",
    "end": "1911200"
  },
  {
    "text": "shows that they're incredibly incredibly valuable um property based testing I think is also fairly low investment and",
    "start": "1911200",
    "end": "1917960"
  },
  {
    "text": "High reward so I would highly encourage if you haven't used it try it out on some of your projects um fault injection",
    "start": "1917960",
    "end": "1924120"
  },
  {
    "text": "also can be very uh low or sorry low investment and high reward as we saw",
    "start": "1924120",
    "end": "1929240"
  },
  {
    "text": "with the kill N9 nodes maybe do it in staging first um and then and then write canaries are a nice process to sort of",
    "start": "1929240",
    "end": "1935559"
  },
  {
    "text": "like reduce the risk of deploys and prove that this new code hasn't totally broken user functionality as we roll it",
    "start": "1935559",
    "end": "1940760"
  },
  {
    "text": "out and and realistically I like canaries for testing that I didn't screw up my configuration somehow um that's at",
    "start": "1940760",
    "end": "1946840"
  },
  {
    "text": "the level of what I'm actually test me at that point okay so let's take a quick moment",
    "start": "1946840",
    "end": "1954080"
  },
  {
    "start": "1950000",
    "end": "2100000"
  },
  {
    "text": "to go through some research I'm not going to go through all of these today these are just things that I think are particularly interesting that are",
    "start": "1954080",
    "end": "1959679"
  },
  {
    "text": "currently happening within the last year or so um and I've links to all of them in the references section if you want to",
    "start": "1959679",
    "end": "1964960"
  },
  {
    "text": "explore further but we're going to go through um one that I think is really cool and also ties into industry because",
    "start": "1964960",
    "end": "1970880"
  },
  {
    "text": "it's called lineage driven false injection this is a paper by uh Peter Alvaro from UC Berkeley uh he's now a",
    "start": "1970880",
    "end": "1977120"
  },
  {
    "text": "professor at UC Santa Cruz and so the idea behind this paper is and this this",
    "start": "1977120",
    "end": "1983080"
  },
  {
    "text": "tool that he builds to go along with it called Molly is that uh a lineage driven fault injector is going to explore the",
    "start": "1983080",
    "end": "1989679"
  },
  {
    "text": "state like try and explore the state space of like all inputs and failures that could happen but it's only going to do that for the ones that actually",
    "start": "1989679",
    "end": "1995120"
  },
  {
    "text": "matter so it starts with a successful result of like you know I um stored",
    "start": "1995120",
    "end": "2000639"
  },
  {
    "text": "something and it's durably stored in my database right and then it's going to go look at like all the the the the graph",
    "start": "2000639",
    "end": "2006840"
  },
  {
    "text": "the call graph to figure out what happened and start like asking uh like requests or things that happened along",
    "start": "2006840",
    "end": "2012799"
  },
  {
    "text": "that path and start injecting failures only along that path so then we only test the things that actually could affect the system and this gives us",
    "start": "2012799",
    "end": "2019120"
  },
  {
    "text": "provably correct um so that's nice right and you can run through the state space of failures in um or you know a smaller",
    "start": "2019120",
    "end": "2027039"
  },
  {
    "text": "amount of time than some model cheers can so uh this is an example from the paper um he uses it to replicate a a bug",
    "start": "2027039",
    "end": "2034399"
  },
  {
    "text": "that had been in Kafka a few years back um that I think Je actually found but uh",
    "start": "2034399",
    "end": "2039679"
  },
  {
    "text": "there was an issue where like had if a network partition happened um this this",
    "start": "2039679",
    "end": "2044840"
  },
  {
    "text": "node on the far uh EP replica a becomes the primary and it's also the soul member of the cluster because you know B",
    "start": "2044840",
    "end": "2050599"
  },
  {
    "text": "and C can't talk to the Zookeeper that is um you know determining membership a then acknowledged a right from the",
    "start": "2050599",
    "end": "2057280"
  },
  {
    "text": "client and said like you know I've durably persisted it but then it crashed and so that right is lost because it",
    "start": "2057280",
    "end": "2062440"
  },
  {
    "text": "wasn't able to replicate it to anyone else in the cluster um so like right like this paper didn't find this book",
    "start": "2062440",
    "end": "2067800"
  },
  {
    "text": "but is proving like this is how we would find it and this bug is fixed now right like this is like an old old bug but it's it was an important one to sort of",
    "start": "2067800",
    "end": "2074000"
  },
  {
    "text": "show because like this is a very like What's Happening Here is very complex there's multiple systems involved and",
    "start": "2074000",
    "end": "2079240"
  },
  {
    "text": "multiple sort of like protocols uh that are doing like reliable broadcast um so this is kind of cool because then like",
    "start": "2079240",
    "end": "2085440"
  },
  {
    "text": "when you run something through Molly it'll give you the exact use case where something failed and this is much easier to understand like we can all look at this and be like oh like a shouldn't",
    "start": "2085440",
    "end": "2091919"
  },
  {
    "text": "have acknowledged that right right like that's clearly the problem um but it's much more easy to reason about the fail",
    "start": "2091919",
    "end": "2097960"
  },
  {
    "text": "I think in this model uh I think Molly and lineage D",
    "start": "2097960",
    "end": "2103160"
  },
  {
    "start": "2100000",
    "end": "2203000"
  },
  {
    "text": "fault injection is super cool because uh Peter actually worked with uh Netflix and implemented this in uh their sort of",
    "start": "2103160",
    "end": "2108920"
  },
  {
    "text": "fault injection model um so Peter and Colton Andress from network uh Netflix",
    "start": "2108920",
    "end": "2113960"
  },
  {
    "text": "partner to like make a prototype of this uh and there's a lot of interesting uh things that happen when you try to take",
    "start": "2113960",
    "end": "2119880"
  },
  {
    "text": "like a research project and then like put it into production um and there's a really amazing talk that's Linked In the",
    "start": "2119880",
    "end": "2125320"
  },
  {
    "text": "references that they give about it and there's an article as well uh but some of the key findings were like right uh this is like the Netflix",
    "start": "2125320",
    "end": "2131440"
  },
  {
    "text": "Death Star microservices diagram that I borrowed from Adrian and and and so like",
    "start": "2131440",
    "end": "2137760"
  },
  {
    "text": "right like maybe we don't have a whole graph of like what's happening in the system and all the systems that are talking to each other because like",
    "start": "2137760",
    "end": "2142920"
  },
  {
    "text": "that's not discovered a priori that's defined via code and so uh they use distributed tracing and uh they have a",
    "start": "2142920",
    "end": "2149079"
  },
  {
    "text": "tool already called fit which is their fault injection system to inject failures and they so they know points where they can inject failures into the",
    "start": "2149079",
    "end": "2154680"
  },
  {
    "text": "system so they use that to construct the call graph so they're doing it sort of like live right uh they Ed the metric",
    "start": "2154680",
    "end": "2159760"
  },
  {
    "text": "system to determine if the call was a success or a failure because they have all these like NH HGB 200 wasn't enough",
    "start": "2159760",
    "end": "2165839"
  },
  {
    "text": "because you have all these sort of like weird certain clients you know behave badly if you send them a 500 back and",
    "start": "2165839",
    "end": "2171079"
  },
  {
    "text": "they have to support a range of clients and like whatever the world of like the internet is terrible so fine we do it and we use metric systems to determine",
    "start": "2171079",
    "end": "2177240"
  },
  {
    "text": "if the calls a success um and then like Molly would sort of like processes callgraph and stuff like that and then",
    "start": "2177240",
    "end": "2183480"
  },
  {
    "text": "determine uh where fit should inject a failure and then they could figure out like how happened and there's a couple",
    "start": "2183480",
    "end": "2188560"
  },
  {
    "text": "other interesting things that they had to go um problems they had to go solve and and so I highly recommend like",
    "start": "2188560",
    "end": "2194160"
  },
  {
    "text": "reading the talk but it's really cool because they ran and they found some bugs and and that's a that's that's a good use of like how do we start",
    "start": "2194160",
    "end": "2199880"
  },
  {
    "text": "thinking about integrating some of these things into production environments okay so uh in conclusion uh",
    "start": "2199880",
    "end": "2207119"
  },
  {
    "start": "2203000",
    "end": "2242000"
  },
  {
    "text": "use formal verifications to test your critical components if you have something that is super Mission critical that maybe you were selling and making",
    "start": "2207119",
    "end": "2213000"
  },
  {
    "text": "money off of it's not a bad idea to write a formal specification and invest in that software",
    "start": "2213000",
    "end": "2218720"
  },
  {
    "text": "I think unit tests and integration tests should be like they find a multitude of errors and they should be bare minimum for any software that you're writing um",
    "start": "2218720",
    "end": "2225680"
  },
  {
    "text": "and then right we can increase our confidence using property testing and fault injection in our systems and I",
    "start": "2225680",
    "end": "2231200"
  },
  {
    "text": "think these are highly underutilized in this last bullet point is sort of where we can uh see a lot of gains for Fairly",
    "start": "2231200",
    "end": "2236440"
  },
  {
    "text": "minimal investment and then if you know you're a giant company you can go and and build these sort of like really large",
    "start": "2236440",
    "end": "2242200"
  },
  {
    "start": "2242000",
    "end": "2262000"
  },
  {
    "text": "tools and finally I'd like to end with a quote from my friend Camille enjoy the ride have fun and test your freaking",
    "start": "2242200",
    "end": "2249640"
  },
  {
    "text": "code thank you to all of these lovely people who helped me with this talk and the article",
    "start": "2249640",
    "end": "2257039"
  }
]