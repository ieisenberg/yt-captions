[
  {
    "start": "0",
    "end": "52000"
  },
  {
    "text": "[Music]",
    "start": "980",
    "end": "7849"
  },
  {
    "text": "developer since 2000 worked a lot of virus high loaded distributed concurrent",
    "start": "12490",
    "end": "20270"
  },
  {
    "text": "systems I also teach coercing University on concurrency which actually kind of",
    "start": "20270",
    "end": "26149"
  },
  {
    "text": "well down from my from the things i i i did in my day job also do programming",
    "start": "26149",
    "end": "34969"
  },
  {
    "text": "competitions and the work now I work in JetBrains on cosmic programming language",
    "start": "34969",
    "end": "42739"
  },
  {
    "text": "in the libraries team and that's that's what we'll be talking about today",
    "start": "42739",
    "end": "47780"
  },
  {
    "text": "so we'll be talking about a synchronous programming and let's take a look at",
    "start": "47780",
    "end": "53449"
  },
  {
    "start": "52000",
    "end": "52000"
  },
  {
    "text": "history bit so where it came from so Catalan has the thing called coroutines",
    "start": "53449",
    "end": "60949"
  },
  {
    "text": "which for many people sounds new but if you look at a secure the hitch was",
    "start": "60949",
    "end": "66979"
  },
  {
    "text": "actually very old concept so it's actually more than 15 years old concept it's similar in success 7 that first",
    "start": "66979",
    "end": "76040"
  },
  {
    "text": "introduced the concept of quarantines so that you can do from a single program",
    "start": "76040",
    "end": "82850"
  },
  {
    "text": "can do multiple concurrent things then you know the junior radios that you have",
    "start": "82850",
    "end": "89480"
  },
  {
    "text": "in some modern language is actually appeared in 75 and 77",
    "start": "89480",
    "end": "94510"
  },
  {
    "text": "but the languages that are mainstream now see that appeared in 72 say plus",
    "start": "94510",
    "end": "101960"
  },
  {
    "text": "pass from 85 Java C sharp and Kotlin initially when it appeared in 2011 they",
    "start": "101960",
    "end": "110720"
  },
  {
    "text": "did not have anything like the courteous of the 15 years old I mean from from all",
    "start": "110720",
    "end": "119570"
  },
  {
    "text": "these languages the prevailing paradigm to do multiple thinks it was was threat",
    "start": "119570",
    "end": "125990"
  },
  {
    "text": "and I mean I once spent analyzing why how and how this happened you know this introduces did not include",
    "start": "125990",
    "end": "132860"
  },
  {
    "text": "curtain you saw that it was not deemed necessary you know by the creators at",
    "start": "132860",
    "end": "139219"
  },
  {
    "text": "some point of time you know multiprocessor system appears small to sweating and",
    "start": "139219",
    "end": "144590"
  },
  {
    "text": "everybody thought fares are fine you can program with threats at least that how it happened in mainstream you",
    "start": "144590",
    "end": "151730"
  },
  {
    "text": "know there were language just like airline in 86 and for example go the",
    "start": "151730",
    "end": "156769"
  },
  {
    "text": "more recent that got away with threats altogether they did not expose you know",
    "start": "156769",
    "end": "164150"
  },
  {
    "text": "threats to developers at all instead they exposed lightweight processes go do something like that that you know let",
    "start": "164150",
    "end": "171410"
  },
  {
    "text": "you do very concurrent applications without working with residents but",
    "start": "171410",
    "end": "177080"
  },
  {
    "text": "that's not what we see in the mainstream languages may swell just you know so",
    "start": "177080",
    "end": "183319"
  },
  {
    "text": "we're still in are still mostly very oriented but that started to change in",
    "start": "183319",
    "end": "188690"
  },
  {
    "text": "the course of the last ten years so in the what happened microservices happened",
    "start": "188690",
    "end": "193760"
  },
  {
    "text": "you know people started to write way more connected applications that instead",
    "start": "193760",
    "end": "199280"
  },
  {
    "text": "of just number crunching they constantly communicate which is other lots of networking and that people started to",
    "start": "199280",
    "end": "207200"
  },
  {
    "text": "realize that in order to scale the threats are not enough they cannot run",
    "start": "207200",
    "end": "213109"
  },
  {
    "text": "this massively concurrent things on threats and so with these rights of a",
    "start": "213109",
    "end": "219079"
  },
  {
    "text": "synchronous programming we see that among the mainstream languages C sharp Wars first and 2012 India tree uses in",
    "start": "219079",
    "end": "227030"
  },
  {
    "text": "Kuwait the N consonant in seventeen Willis experimental curtains and we just",
    "start": "227030",
    "end": "233900"
  },
  {
    "text": "recently made them released and that that we'll be talking about now and we also see that it probably come into C++",
    "start": "233900",
    "end": "243769"
  },
  {
    "text": "the also discussion in C++ working group about any courteous to C++ Java was",
    "start": "243769",
    "end": "248780"
  },
  {
    "text": "working version so it's gaining interest like all the major languages are looking at it and since Xu sharp was the",
    "start": "248780",
    "end": "256700"
  },
  {
    "text": "translator among the general-purpose languages many",
    "start": "256700",
    "end": "261859"
  },
  {
    "text": "languages just coughing c-sharp approach but cotton took a slightly different",
    "start": "261859",
    "end": "266900"
  },
  {
    "text": "path there's actually more based on the historical approaches there were in the",
    "start": "266900",
    "end": "273080"
  },
  {
    "text": "in in history and to we'll see what's approach of cotton and how is different from what other",
    "start": "273080",
    "end": "279710"
  },
  {
    "text": "languages are doing an actual you see that cotton and somewhat closer to like food in current languages like Perl and",
    "start": "279710",
    "end": "286159"
  },
  {
    "text": "can go in its approach to proteins so let's start with a traditional corn",
    "start": "286159",
    "end": "293719"
  },
  {
    "text": "accord approach to a synchronous callbacks traditional I mean in general purpose languages like that's how you",
    "start": "293719",
    "end": "299539"
  },
  {
    "text": "would be programming a synchronous code in JavaScript say 15 years ago you'll be",
    "start": "299539",
    "end": "304639"
  },
  {
    "text": "doing it and you still can find out of course I there's no more it's it's it's",
    "start": "304639",
    "end": "309830"
  },
  {
    "text": "becoming legacy but still that's kind of traditional approach to doing a synchrony in the general-purpose",
    "start": "309830",
    "end": "316969"
  },
  {
    "text": "language so the way you do it like so instead of writing functions like this that just you know you request a token",
    "start": "316969",
    "end": "324319"
  },
  {
    "text": "from server instead of just declaring a function that returns a talking the problem is this function that it will",
    "start": "324319",
    "end": "330139"
  },
  {
    "text": "have to wait and block the color until they talking is there so we want to really scale and you wouldn't be able to",
    "start": "330139",
    "end": "336229"
  },
  {
    "text": "do it if all you have like a single thread like in JavaScript so with callbacks instead of returning result",
    "start": "336229",
    "end": "342080"
  },
  {
    "text": "you you add an additional parameter that's called a callback and that",
    "start": "342080",
    "end": "348590"
  },
  {
    "text": "receives this result when it's available in the future so you do like with every",
    "start": "348590",
    "end": "356060"
  },
  {
    "text": "function you have in your code like if you now then need to use this talking to create some post on your social",
    "start": "356060",
    "end": "362469"
  },
  {
    "text": "application then any social network call you also turn it into a callback by",
    "start": "362469",
    "end": "369139"
  },
  {
    "text": "changing its resolve to a parameter function and then if you had this",
    "start": "369139",
    "end": "374500"
  },
  {
    "text": "process to request I can create this post and somehow post process it then",
    "start": "374500",
    "end": "381009"
  },
  {
    "start": "381000",
    "end": "381000"
  },
  {
    "text": "you turn it into something like this so instead of simple sequential procedure",
    "start": "381009",
    "end": "387169"
  },
  {
    "text": "you now have this nesting convicts and this closing braces they called callback",
    "start": "387169",
    "end": "395539"
  },
  {
    "text": "hell and if you actually go to Google and Google callback hell you'll find like lots of hilarious pictures like",
    "start": "395539",
    "end": "402020"
  },
  {
    "text": "showing screenshots of real and imagined code in this style and that's was kind",
    "start": "402020",
    "end": "408440"
  },
  {
    "text": "of comical was main motivator for all the alternative approach that appeared it was like",
    "start": "408440",
    "end": "414090"
  },
  {
    "text": "really this called the hell was really you'll if you google yes you'll find",
    "start": "414090",
    "end": "419370"
  },
  {
    "text": "mostly futures in JavaScript because again javis could be in single threaded there was had no other way to do",
    "start": "419370",
    "end": "425310"
  },
  {
    "text": "concurrent things but in the past but program was callbacks so all the",
    "start": "425310",
    "end": "430319"
  },
  {
    "text": "pictures about like in c-sharp Java cotton you can do threads you don't have to do it but anyway and",
    "start": "430319",
    "end": "439139"
  },
  {
    "text": "this is code is actually simplified because the real code was called but you'll have to worry about failures like",
    "start": "439139",
    "end": "446099"
  },
  {
    "text": "what happens is it called fails then you have to add processing of this failure so will code is much messier than this",
    "start": "446099",
    "end": "455430"
  },
  {
    "text": "simplified code I show it on this slide so the solution is that's widely known",
    "start": "455430",
    "end": "463560"
  },
  {
    "text": "widely publicized and it's also very old approach is to use futures which also",
    "start": "463560",
    "end": "468659"
  },
  {
    "text": "known as promises and they have actually known by very by lots of different names",
    "start": "468659",
    "end": "474360"
  },
  {
    "text": "over here should open Wikipedia article you'll see lots of synonyms to future promise deferred you know Bubba Wallace",
    "start": "474360",
    "end": "480840"
  },
  {
    "text": "of different they've been historically had different names the idea is instead of returnable",
    "start": "480840",
    "end": "488940"
  },
  {
    "text": "zero to wrap them so instead of using callbacks we return some wrapper on top",
    "start": "488940",
    "end": "498029"
  },
  {
    "text": "of our result type call it prom is called future doesn't matter it seems like every programming language has to",
    "start": "498029",
    "end": "503819"
  },
  {
    "text": "invent its own name for a future so JavaScript call it promise c-sharp calls a task you know Java calls",
    "start": "503819",
    "end": "510120"
  },
  {
    "text": "its future so it's like it looks like you're not a big foreign language unless you invent your own name for a future",
    "start": "510120",
    "end": "515370"
  },
  {
    "text": "like it's just not cool to use somebody else's name for a future object so so in",
    "start": "515370",
    "end": "522750"
  },
  {
    "text": "JavaScript is promised for example so the idea is that you come so late this",
    "start": "522750",
    "end": "528329"
  },
  {
    "text": "future resultant the object you wrap it and that's how you transform all your functions in the end you know instead of",
    "start": "528329",
    "end": "534449"
  },
  {
    "text": "writing this nesting Colbeck code you're writing more like this you apply certain",
    "start": "534449",
    "end": "541339"
  },
  {
    "text": "operators to combine result in two successive computations so",
    "start": "541339",
    "end": "547279"
  },
  {
    "text": "callbacks are still there they're still behind the scenes they're just encapsulated and you add this call this",
    "start": "547279",
    "end": "554670"
  },
  {
    "text": "on each step of your multi stages in Joe's computations but you don't nest",
    "start": "554670",
    "end": "560699"
  },
  {
    "text": "indentation anymore so there's no this Cobra he'll letter of closing curly",
    "start": "560699",
    "end": "566069"
  },
  {
    "text": "braces and you actually this this is the actual code that actually currently",
    "start": "566069",
    "end": "572310"
  },
  {
    "text": "handles exceptions so that makes features so much popular they solve like many many of the issues of the called X",
    "start": "572310",
    "end": "581100"
  },
  {
    "text": "but they still way away from being perfect and which is especially",
    "start": "581100",
    "end": "587759"
  },
  {
    "text": "noticeable if you compare them for example this code to the code you tried in Erlang or in gold which gives you a",
    "start": "587759",
    "end": "594389"
  },
  {
    "text": "lightweight process is out of the box because you know with futures you have",
    "start": "594389",
    "end": "600240"
  },
  {
    "text": "to program with all those operators you can't just write code like you usually do you have to literally learn a",
    "start": "600240",
    "end": "607560"
  },
  {
    "text": "different way of programming to write a synchronous code with futures you have",
    "start": "607560",
    "end": "612600"
  },
  {
    "text": "to instead of your regular control console it's a credential execution eaves loops exceptional you have to",
    "start": "612600",
    "end": "618509"
  },
  {
    "text": "learn completely different set of primitives and the set of primitives is",
    "start": "618509",
    "end": "623790"
  },
  {
    "text": "the the way it's name also depends on the language or library you use for your futures so that's that's that's kind of",
    "start": "623790",
    "end": "633500"
  },
  {
    "text": "its harms readability and lets you learn new stuff for no particular reason",
    "start": "633500",
    "end": "639769"
  },
  {
    "text": "so the end that's what cotton curtains help content curtains were designed not",
    "start": "639769",
    "end": "645660"
  },
  {
    "text": "only to solve the problem of callback hell but also to make programming easy",
    "start": "645660",
    "end": "650910"
  },
  {
    "text": "to make your code readable so with cotton curtains instead of changing a signature of your function so it's a",
    "start": "650910",
    "end": "657389"
  },
  {
    "text": "result type is different now and you have to use different combinations in it you just live in natural signature here",
    "start": "657389",
    "end": "663750"
  },
  {
    "text": "for function but you mark it with a special modifier suspect and this",
    "start": "663750",
    "end": "669060"
  },
  {
    "text": "modifier suspend means that this function can suspend execution and that's what Koreans are",
    "start": "669060",
    "end": "675149"
  },
  {
    "text": "known for their was these few years concept that you can have a computation but instead of you can suspend in some",
    "start": "675149",
    "end": "681600"
  },
  {
    "text": "point and continue working on it when some result is becomes available so",
    "start": "681600",
    "end": "689670"
  },
  {
    "text": "every function you have in your multi state approaches process you transform the same way so instead of returning I",
    "start": "689670",
    "end": "696180"
  },
  {
    "text": "promise you again signature is natural just suspend modifier item and now instead of this",
    "start": "696180",
    "end": "705020"
  },
  {
    "text": "new way of programming you actually program it in the old way you just write",
    "start": "705020",
    "end": "711090"
  },
  {
    "text": "the code as you usually write it just but you just mark it with suspend",
    "start": "711090",
    "end": "717450"
  },
  {
    "text": "modifier everything inside staves wriggle you don't have to learn you programming style anymore you is just a",
    "start": "717450",
    "end": "725010"
  },
  {
    "text": "normal code with normal control concepts you know of and the difference is of",
    "start": "725010",
    "end": "732540"
  },
  {
    "text": "course if you program with this highly manual highly variable style with promises of futures you actually saw the",
    "start": "732540",
    "end": "737790"
  },
  {
    "text": "places in code where those as synchronous points where result will be",
    "start": "737790",
    "end": "744960"
  },
  {
    "text": "available in the future you will continue the use in the future you don't it's not obvious anymore in the code which is made this way for reason",
    "start": "744960",
    "end": "751860"
  },
  {
    "text": "because there's a different concept that you should not be thrown at you when you",
    "start": "751860",
    "end": "757740"
  },
  {
    "text": "think about your business logic but you you there's also an option to see like",
    "start": "757740",
    "end": "763080"
  },
  {
    "text": "if you open this code in ID you can actually see what are the suspension points in your code so if you need this",
    "start": "763080",
    "end": "769170"
  },
  {
    "text": "information it's there it just slightly to the side so it doesn't obscure your",
    "start": "769170",
    "end": "775620"
  },
  {
    "text": "main business the flow of your business logic what happens after what and there's also bonus features who comes",
    "start": "775620",
    "end": "781860"
  },
  {
    "start": "780000",
    "end": "780000"
  },
  {
    "text": "with it you can use regular loops you don't have to figure out what my operational future is to do a loop Inc",
    "start": "781860",
    "end": "788310"
  },
  {
    "text": "on a list you can use regular exception howling like you learn language once and",
    "start": "788310",
    "end": "793530"
  },
  {
    "text": "then you apply it in different scenarios you can use all the higher-order functions like cotton is very functional",
    "start": "793530",
    "end": "799950"
  },
  {
    "text": "language it comes lots of lots of this higher-order function that allows your process lists efficiently etc and you",
    "start": "799950",
    "end": "805920"
  },
  {
    "text": "can use all of them without learning new functions for your promise you can write your own higher-order",
    "start": "805920",
    "end": "811950"
  },
  {
    "text": "functions like if you need to retry operation a number of times with some exponential they call for sums like this",
    "start": "811950",
    "end": "818370"
  },
  {
    "text": "you just write it as you would write it regularly and then write your own high",
    "start": "818370",
    "end": "824000"
  },
  {
    "text": "high order function use it so everything works with concurrent just at worse in a",
    "start": "824000",
    "end": "831420"
  },
  {
    "text": "regular code there's no new style to learn but just one suspend modifier so",
    "start": "831420",
    "end": "839490"
  },
  {
    "text": "let's quickly take a listen because when when you show people who haven't seen it first time it'll say magic and there's",
    "start": "839490",
    "end": "847140"
  },
  {
    "text": "nothing good about major software development like magic is something you open do not mix well so you have to",
    "start": "847140",
    "end": "853970"
  },
  {
    "text": "understand at least on some level how it works so when content compiler sees a function",
    "start": "853970",
    "end": "862200"
  },
  {
    "start": "858000",
    "end": "858000"
  },
  {
    "text": "that's marked with suspend modifier any caught mine runs on GBM so I'd actually behind this thing gets compiled into",
    "start": "862200",
    "end": "868350"
  },
  {
    "text": "seven GBM declaration in which GBM itself does not have a concept of",
    "start": "868350",
    "end": "874770"
  },
  {
    "text": "suspended for since the calls in concept not a GBM concept so when it compiles it's actually composed to function with",
    "start": "874770",
    "end": "881460"
  },
  {
    "text": "one additional parameter and this conditional parameter has a type which called continuation but it's actually",
    "start": "881460",
    "end": "887550"
  },
  {
    "text": "you would recognize it's just a callback program it was call back so if you go to",
    "start": "887550",
    "end": "892590"
  },
  {
    "text": "coughing standard library and see what continuation is you'll see in this continuation it's just genuine callback",
    "start": "892590",
    "end": "899010"
  },
  {
    "text": "interface it's there's not much inside of it you know it has a context that",
    "start": "899010",
    "end": "904250"
  },
  {
    "text": "defines where the stuff at executes and provides additional information and it",
    "start": "904250",
    "end": "909450"
  },
  {
    "text": "has a callback function to resume this computation with a certain result where",
    "start": "909450",
    "end": "915510"
  },
  {
    "text": "result can be their success or failure that's it there's nothing more callbacks",
    "start": "915510",
    "end": "920760"
  },
  {
    "text": "and initiation is actually the same thing and when you hear somebody says",
    "start": "920760",
    "end": "927000"
  },
  {
    "text": "you know we're doing continuation passing style blah blah blah it's just a very",
    "start": "927000",
    "end": "932220"
  },
  {
    "text": "glorified name for programmers callbacks now how it soul integrates into the",
    "start": "932220",
    "end": "939030"
  },
  {
    "text": "ecosystem conventional cotton language they translate GBA Mecca system in particular in TV I mean hot so",
    "start": "939030",
    "end": "945599"
  },
  {
    "text": "happens there is a zoo of those futures libraries that's historical isn't what",
    "start": "945599",
    "end": "951269"
  },
  {
    "text": "Java came out back there in 95 it did not have any facilities for it did not",
    "start": "951269",
    "end": "956639"
  },
  {
    "text": "have a future type and the the actual future type that you can use for",
    "start": "956639",
    "end": "964079"
  },
  {
    "text": "synchronous programming that's called computer future completely disable future appeared as far as a member jelle",
    "start": "964079",
    "end": "969269"
  },
  {
    "text": "5 which somewhere somewhere in the I remember what was the year but but",
    "start": "969269",
    "end": "976199"
  },
  {
    "text": "anyway it's by that time already there were lots of competing libraries and if",
    "start": "976199",
    "end": "981299"
  },
  {
    "text": "you look at any reasonably sized enterprise piece of software you'll definitely find so much own future types",
    "start": "981299",
    "end": "987089"
  },
  {
    "text": "hidden somewhere inside it's again the GBA maker system at this respect is",
    "start": "987089",
    "end": "992729"
  },
  {
    "text": "really ugly like it's not like for example dotnet it's more standard there is more",
    "start": "992729",
    "end": "998220"
  },
  {
    "text": "standard future sites but in Java there is a zoo so you would also face you often face this situation you have this",
    "start": "998220",
    "end": "1005409"
  },
  {
    "start": "1001000",
    "end": "1001000"
  },
  {
    "text": "for example there's a library called retrofit now that's quite popular on the",
    "start": "1005409",
    "end": "1011869"
  },
  {
    "text": "engineering world in a retrofit you can call you know you can call remote",
    "start": "1011869",
    "end": "1018919"
  },
  {
    "text": "services over rest easily just a bit funny an interface with corresponding function but you're right Arif it has",
    "start": "1018919",
    "end": "1024438"
  },
  {
    "text": "its own future type this future type is called call so it's when you see this",
    "start": "1024439",
    "end": "1032029"
  },
  {
    "text": "function you quickly recognize this spire you know we study for result we will return some rapper in top referrers",
    "start": "1032029",
    "end": "1038449"
  },
  {
    "text": "out that represents this result in the future that's that's that's a promise or a future so how do we integrate it with",
    "start": "1038449",
    "end": "1047889"
  },
  {
    "text": "calling coyote ins so in cousin quarantines we're working with suspending functions that have the",
    "start": "1047889",
    "end": "1055129"
  },
  {
    "text": "suspend modifier so we just try to adapt our function that you stand for journey call returns just just the result object",
    "start": "1055129",
    "end": "1064580"
  },
  {
    "text": "in this case it's a passed and by convention what we do for the zoo or",
    "start": "1064580",
    "end": "1071179"
  },
  {
    "text": "future types we define an extension function called the weightages convention we use it's not anything they would suspend the",
    "start": "1071179",
    "end": "1078960"
  },
  {
    "text": "execution of this the courage in calling this function until the result is available but how we write this way you",
    "start": "1078960",
    "end": "1087090"
  },
  {
    "text": "know so in color so of course it is a function that has suspended if I",
    "start": "1087090",
    "end": "1092399"
  },
  {
    "text": "declared as extension on our call but what's going inside the only way for a",
    "start": "1092399",
    "end": "1100130"
  },
  {
    "text": "synchronous execution in most of the libraries like that it's actually based on callbacks the callback is the most",
    "start": "1100130",
    "end": "1107909"
  },
  {
    "text": "primitive approach to a simplest program if if you look at this call for example",
    "start": "1107909",
    "end": "1113940"
  },
  {
    "text": "you'll find any queue a method that installs a callback in in every single",
    "start": "1113940",
    "end": "1118950"
  },
  {
    "text": "future types you'll find anywhere has some method it may be called at listener",
    "start": "1118950",
    "end": "1124740"
  },
  {
    "text": "you know something this that installs a copy but instantly Kovac is not enough",
    "start": "1124740",
    "end": "1130549"
  },
  {
    "text": "because if we write the body of this function here I am still callback you",
    "start": "1130549",
    "end": "1136080"
  },
  {
    "text": "would not do anything to the color just you know the function returns but we",
    "start": "1136080",
    "end": "1141510"
  },
  {
    "text": "need true somehow return result from it we have somehow need to suspend execution of curtain until the call",
    "start": "1141510",
    "end": "1147480"
  },
  {
    "text": "backfires and that's where a special library function called suspend care",
    "start": "1147480",
    "end": "1152850"
  },
  {
    "text": "routines come from so that's suspend curtain that's a deed of it's a special",
    "start": "1152850",
    "end": "1159539"
  },
  {
    "text": "function in the coughing standard library that's that actually does a trick of suspending execution until some",
    "start": "1159539",
    "end": "1166500"
  },
  {
    "text": "event happens let's take a look at it that's a signature of suspend curtain so",
    "start": "1166500",
    "end": "1172590"
  },
  {
    "text": "suspend curtain you see it's defined as suspending function but you see it takes",
    "start": "1172590",
    "end": "1178470"
  },
  {
    "text": "inside a functional type that's regular that's not marked with suspend we're just a regular block of code that takes",
    "start": "1178470",
    "end": "1185820"
  },
  {
    "text": "continuation so if effectively what suspect curtain does it takes what",
    "start": "1185820",
    "end": "1191700"
  },
  {
    "text": "happens after it revised this into this container object and passes it to",
    "start": "1191700",
    "end": "1197340"
  },
  {
    "text": "parameter to this block and this concept that should really really old so in doing for example is from a language",
    "start": "1197340",
    "end": "1203610"
  },
  {
    "text": "called scheme this function was called call slash cc-cold with current continue",
    "start": "1203610",
    "end": "1209639"
  },
  {
    "text": "actually we were this concept from the scheme into Kotlin an actual initial",
    "start": "1209639",
    "end": "1214799"
  },
  {
    "text": "prototype we called it you know call with current consideration but then you know then after future agency we name it",
    "start": "1214799",
    "end": "1222029"
  },
  {
    "text": "to suspend co-routine to make it more understandable what it actually does but it's make no mistake it's basically",
    "start": "1222029",
    "end": "1229259"
  },
  {
    "text": "that's what call CC didn't scheme we're way back in time so now when the",
    "start": "1229259",
    "end": "1237739"
  },
  {
    "text": "invoking suspend curtain you can get continuation and the curtain that wasn't",
    "start": "1237739",
    "end": "1243899"
  },
  {
    "text": "working this function is suspended now so now you can install a callback and when the co backfires receives to",
    "start": "1243899",
    "end": "1250559"
  },
  {
    "start": "1246000",
    "end": "1246000"
  },
  {
    "text": "respond you can analyze it and you can either resume this continuation with the successful that there's a Hindi",
    "start": "1250559",
    "end": "1257249"
  },
  {
    "start": "1251000",
    "end": "1251000"
  },
  {
    "text": "extension called resume or you can resume it with exception and tell no the",
    "start": "1257249",
    "end": "1263399"
  },
  {
    "text": "you know this is failed and only when you resume contagion then the execution of the whatever process you had",
    "start": "1263399",
    "end": "1271019"
  },
  {
    "text": "continuous that that's all that's basic all the code it takes to write to integrate some future library with",
    "start": "1271019",
    "end": "1277529"
  },
  {
    "text": "cotton codes no no that kind of reduces the whole zoo of futures you have to a",
    "start": "1277529",
    "end": "1282779"
  },
  {
    "text": "simple kind kind of concept of cartoons when so but that's just one side of",
    "start": "1282779",
    "end": "1291719"
  },
  {
    "text": "integration the other side of integration how you actually build those",
    "start": "1291719",
    "end": "1296729"
  },
  {
    "text": "curtains so how you start your a synchronous processes when I showed you",
    "start": "1296729",
    "end": "1303389"
  },
  {
    "start": "1301000",
    "end": "1301000"
  },
  {
    "text": "this slide with this simple example initially I said all you have to do is",
    "start": "1303389",
    "end": "1308549"
  },
  {
    "text": "to add a suspense magnifier if I have a multi-stage process that is invoking",
    "start": "1308549",
    "end": "1315389"
  },
  {
    "text": "some a synchronous functions but what if I remove it whatever you do like this",
    "start": "1315389",
    "end": "1321779"
  },
  {
    "text": "what if I just want to do something just read regular function and start doing",
    "start": "1321779",
    "end": "1327269"
  },
  {
    "text": "things that take long enough time that do network requests I get an error from",
    "start": "1327269",
    "end": "1333209"
  },
  {
    "text": "compiler and it says you know I this is request okay suspending function and I can only call it from another",
    "start": "1333209",
    "end": "1339450"
  },
  {
    "text": "suspending function huh what does it mean you see if you think about it it makes sense functions",
    "start": "1339450",
    "end": "1345960"
  },
  {
    "text": "marked with suspend minified they have this super power they can suspend",
    "start": "1345960",
    "end": "1351060"
  },
  {
    "text": "execution of the caller for a long time which regular function can't I mean your",
    "start": "1351060",
    "end": "1357000"
  },
  {
    "text": "regular function can just block the caller completely blocking the poker",
    "start": "1357000",
    "end": "1362130"
  },
  {
    "text": "thread but they cannot do it like in a synchronous way without but blocking anyone but suspend function can they",
    "start": "1362130",
    "end": "1367980"
  },
  {
    "text": "have this super power in regular functions they don't in our regular world regular languages for programming",
    "start": "1367980",
    "end": "1374760"
  },
  {
    "text": "they don't have this super power so and so they can't invoke anything that that",
    "start": "1374760",
    "end": "1383480"
  },
  {
    "text": "suspending so what do we do we cannot simply invoke a suspending function we",
    "start": "1383480",
    "end": "1388500"
  },
  {
    "text": "need to find some workaround and the word current in this we have a family",
    "start": "1388500",
    "end": "1395160"
  },
  {
    "text": "function called curtain builders and the most primitive of them is launched it's called lunch because it's used for",
    "start": "1395160",
    "end": "1402110"
  },
  {
    "text": "fire-and-forget Kuragin you can think of roughly like a starting you thread your",
    "start": "1402110",
    "end": "1407660"
  },
  {
    "text": "finding of a new process you can think of a very lightweight process in your",
    "start": "1407660",
    "end": "1413430"
  },
  {
    "text": "program that starts doing something completely concurrently with the rest of your code and does it once on any the",
    "start": "1413430",
    "end": "1419790"
  },
  {
    "text": "rest of you could just continues doing a thing we use launch when we interested",
    "start": "1419790",
    "end": "1428010"
  },
  {
    "text": "in side effects of some code for example this case we're interested we want to juice a network request to get something",
    "start": "1428010",
    "end": "1435030"
  },
  {
    "text": "our back end so we'll launch a concurrent process to do it for us the",
    "start": "1435030",
    "end": "1442350"
  },
  {
    "text": "launch itself returns immediately like this is regular function doesn't block anything so our post item function just",
    "start": "1442350",
    "end": "1450030"
  },
  {
    "text": "returns immediately having started this program process in a background thread poll but this means that if we do any",
    "start": "1450030",
    "end": "1458340"
  },
  {
    "text": "post processing here it means that the post process is also going to happen",
    "start": "1458340",
    "end": "1463500"
  },
  {
    "text": "sample grant set pool which is OK for server-side applications but may not be a key for UI applications because he in",
    "start": "1463500",
    "end": "1469920"
  },
  {
    "text": "more UI applications he usually limited to working with you UI from the main UI thread that's that's how it",
    "start": "1469920",
    "end": "1477119"
  },
  {
    "text": "works in Android that how it works in all the major you have frameworks out",
    "start": "1477119",
    "end": "1482789"
  },
  {
    "text": "there so so what if after doing this I",
    "start": "1482789",
    "end": "1488119"
  },
  {
    "text": "want to update something on you I I can do this it from here",
    "start": "1488119",
    "end": "1494039"
  },
  {
    "text": "because that's working in background thread and current use give me very easy solution I can just when I launched in",
    "start": "1494039",
    "end": "1501869"
  },
  {
    "start": "1499000",
    "end": "1499000"
  },
  {
    "text": "encourage and I can specify dispatcher for it and dispatcher controls that's a bit of coding context that controls word",
    "start": "1501869",
    "end": "1508619"
  },
  {
    "text": "execute and I can says please execute on my main thread and that's the only",
    "start": "1508619",
    "end": "1513959"
  },
  {
    "text": "change I need to do to make sure that everything inside the curly braces gets executed on my main thread where I can",
    "start": "1513959",
    "end": "1520259"
  },
  {
    "text": "go and safely touch you I it and see because it's all based on suspending",
    "start": "1520259",
    "end": "1528029"
  },
  {
    "text": "functions and suspending functions deep inside a based on the callbacks you know",
    "start": "1528029",
    "end": "1534179"
  },
  {
    "text": "my main threat is not actually blocked so I get multiple concurrent activities running in the main thread with just",
    "start": "1534179",
    "end": "1542429"
  },
  {
    "text": "just one simple invocation what what",
    "start": "1542429",
    "end": "1549179"
  },
  {
    "text": "makes launch such magical if I told you",
    "start": "1549179",
    "end": "1554789"
  },
  {
    "text": "that I cannot simply invoke suspending function but launch somehow does it the",
    "start": "1554789",
    "end": "1560369"
  },
  {
    "text": "launch itself is a regular function it's simplified signature shown here because",
    "start": "1560369",
    "end": "1565649"
  },
  {
    "text": "it's very long evening woken from anywhere but it accepts as a block not a",
    "start": "1565649",
    "end": "1571199"
  },
  {
    "text": "simple functional type but it's in collisional type Marcus suspend metaphor so inside of the block that I give to",
    "start": "1571199",
    "end": "1577469"
  },
  {
    "text": "launch it says a lambda that is parameter to lunch I can I can actually",
    "start": "1577469",
    "end": "1584309"
  },
  {
    "text": "use the spin function so that's so it works as adapter between a suspending world in regular world in another way so",
    "start": "1584309",
    "end": "1592469"
  },
  {
    "text": "it lets me it can be called from regular functions but I can use as many functions inside that's what launch does",
    "start": "1592469",
    "end": "1599399"
  },
  {
    "text": "and launch also actually not just first and forget it's a true trust me handle to the process I just created we just in",
    "start": "1599399",
    "end": "1606509"
  },
  {
    "text": "continent speak called a job and this lets me like cancel it check",
    "start": "1606509",
    "end": "1611630"
  },
  {
    "text": "its status if I need to I don't have to but but I can I can keep it if I if I",
    "start": "1611630",
    "end": "1616669"
  },
  {
    "text": "want now let's think I've promised you at the beginning let's take a look at",
    "start": "1616669",
    "end": "1623809"
  },
  {
    "text": "the asynch await I call it a classical approach to secrets program because this",
    "start": "1623809",
    "end": "1629230"
  },
  {
    "text": "that's if you look at the history and among the mainstream languages C sharp was the first to integrate a synchronous",
    "start": "1629230",
    "end": "1636890"
  },
  {
    "text": "facility right into the language and they introduced this a single weight pair and it is kind of catch on like",
    "start": "1636890",
    "end": "1643100"
  },
  {
    "text": "lots of other languages followed this you so let's see how it works there so in cotton I would write a code like",
    "start": "1643100",
    "end": "1651919"
  },
  {
    "text": "this we've seen it multiple times so far if I write this in code in C sharp the",
    "start": "1651919",
    "end": "1658880"
  },
  {
    "text": "end you'll noticed a few differences let's see what look very similar but",
    "start": "1658880",
    "end": "1663890"
  },
  {
    "text": "there are important differences let's count them the so that's that's also not",
    "start": "1663890",
    "end": "1669020"
  },
  {
    "text": "just C sharp it's a typescript in Dart this is approach is going to integrate it in JavaScript like it's it's like C",
    "start": "1669020",
    "end": "1676010"
  },
  {
    "text": "sharps set the trend here so the first difference that's obvious syntax a",
    "start": "1676010",
    "end": "1681620"
  },
  {
    "text": "difference instead of suspend modifier they use a sink that's just different words okay and we'll the other",
    "start": "1681620",
    "end": "1689299"
  },
  {
    "text": "difference is that in this approach like my all my points where I am suspending",
    "start": "1689299",
    "end": "1698240"
  },
  {
    "text": "our explicit I have to use a weight keyword and the other difference there's",
    "start": "1698240",
    "end": "1706820"
  },
  {
    "text": "not so obvious but very very important as we'll see later on is that whenever a",
    "start": "1706820",
    "end": "1713270"
  },
  {
    "text": "distinct function it's not to returning the original result research only future",
    "start": "1713270",
    "end": "1718790"
  },
  {
    "text": "in c-sharp this call to task and that's",
    "start": "1718790",
    "end": "1724070"
  },
  {
    "text": "actually not the syntactic stuff like a weights in a sink but that's the fact that these functions return a future",
    "start": "1724070",
    "end": "1730429"
  },
  {
    "text": "that that they actually that what actually makes a difference so we don't",
    "start": "1730429",
    "end": "1737480"
  },
  {
    "start": "1735000",
    "end": "1735000"
  },
  {
    "text": "have a weight keyword in common and some people ask why don't we have it like on this keyword but it's not the",
    "start": "1737480",
    "end": "1744070"
  },
  {
    "text": "problem with the weight because we don't have it's actually the whole problem with a sink approach the reason we did a",
    "start": "1744070",
    "end": "1751300"
  },
  {
    "text": "different way in cotton and you see if you look at C sharp and you have a sync",
    "start": "1751300",
    "end": "1756430"
  },
  {
    "text": "function C sharp for example request token that's a valid expression and in C",
    "start": "1756430",
    "end": "1762580"
  },
  {
    "text": "sharp or JavaScript a type script and it produces your future so the question can",
    "start": "1762580",
    "end": "1768340"
  },
  {
    "text": "self were trans immediately concurrently start this process you know if",
    "start": "1768340",
    "end": "1773800"
  },
  {
    "text": "requesting it okay voters the future and when you wear a weight request token",
    "start": "1773800",
    "end": "1779190"
  },
  {
    "text": "that's also valid expression its type is a token it is and if you compare those",
    "start": "1779190",
    "end": "1787090"
  },
  {
    "text": "two you want is that the first is concurrent I'm writing across token and",
    "start": "1787090",
    "end": "1793690"
  },
  {
    "text": "I'm now have two concurrent processes working in my system one is working on talking the others continue execution",
    "start": "1793690",
    "end": "1799210"
  },
  {
    "text": "and the second one is sequential behavior when I write a way to request talk and there's no concurrency it's all",
    "start": "1799210",
    "end": "1805120"
  },
  {
    "text": "happen in sequential any languages like C sharp and all the other images that",
    "start": "1805120",
    "end": "1810430"
  },
  {
    "text": "copy this approach this concurrent behaviour default like that's that's what you get by default unless you",
    "start": "1810430",
    "end": "1816220"
  },
  {
    "text": "explicitly obtain investigational behavior by using a keyword and we",
    "start": "1816220",
    "end": "1821590"
  },
  {
    "text": "believe that certain approach we believe that concurrency hard for developers is",
    "start": "1821590",
    "end": "1827020"
  },
  {
    "text": "error-prone and it has to be explicit so in Kotlin suspended function designed",
    "start": "1827020",
    "end": "1833290"
  },
  {
    "text": "in such a way as they imitate sequential behavior by default in cotton sequence",
    "start": "1833290",
    "end": "1840370"
  },
  {
    "text": "behaviors they hold and you have to opt in into concurrency when you need it we'll see how it happens so cotton",
    "start": "1840370",
    "end": "1848920"
  },
  {
    "text": "approach to a thing is slightly different it's just as powerful it just defaults a flipped around so to",
    "start": "1848920",
    "end": "1856900"
  },
  {
    "start": "1855000",
    "end": "1855000"
  },
  {
    "text": "see why we needed let's see an actual use case well is it hard to to discuss",
    "start": "1856900",
    "end": "1863440"
  },
  {
    "text": "absolutely let's see what's the actual use case for c-sharp style async functions what c-sharp why you need",
    "start": "1863440",
    "end": "1871300"
  },
  {
    "text": "sometimes actually need this Congrats so let's take this example I have a function that's reading a seizure there's a",
    "start": "1871300",
    "end": "1877280"
  },
  {
    "text": "sequence function New Jersey future and it synchronously loads an image and when",
    "start": "1877280",
    "end": "1883340"
  },
  {
    "text": "and then what I can't do in c-sharp I can write this kind of code I can see",
    "start": "1883340",
    "end": "1888830"
  },
  {
    "text": "let's load first image and concurrent",
    "start": "1888830",
    "end": "1893990"
  },
  {
    "text": "lowest or the second image and then I can right let's have wait for the first",
    "start": "1893990",
    "end": "1899660"
  },
  {
    "text": "image and I wait for the second one and while writing the code like this I truly",
    "start": "1899660",
    "end": "1905300"
  },
  {
    "text": "get concurrency and that's the use keys we're actually want this confront sight you want my two images to billow it",
    "start": "1905300",
    "end": "1912260"
  },
  {
    "text": "concurrently just to speed things up because later they want to combine them somehow process but I don't want to",
    "start": "1912260",
    "end": "1918290"
  },
  {
    "text": "sequential one after another I want concurrency and c-sharp you know being up working currencies default lets me do",
    "start": "1918290",
    "end": "1925910"
  },
  {
    "text": "this so how do they do it in cotton I can also write a sync function in Kelvin",
    "start": "1925910",
    "end": "1931280"
  },
  {
    "start": "1927000",
    "end": "1927000"
  },
  {
    "text": "the differences is that instead of writing a sync to the left I write it as",
    "start": "1931280",
    "end": "1936350"
  },
  {
    "text": "a regular function and it returns the future again being a languages that I've",
    "start": "1936350",
    "end": "1944240"
  },
  {
    "text": "become big player we needed to invent our own name for future so we opened Wikipedia found a list of synonyms for",
    "start": "1944240",
    "end": "1950450"
  },
  {
    "text": "future found deferred so it's not used yet in severe my sister so great will we'll take it so our future type is",
    "start": "1950450",
    "end": "1957200"
  },
  {
    "text": "called deferred and we read I think on",
    "start": "1957200",
    "end": "1962240"
  },
  {
    "text": "the right so alright as seen in codling world is just this cartoon builder that",
    "start": "1962240",
    "end": "1968290"
  },
  {
    "text": "takes a bit of code it turns it into the future I mean I mean basically you can do the same like you see sharp words you",
    "start": "1968290",
    "end": "1975500"
  },
  {
    "text": "can write those icing functions just since its slightly different and you can use them just as you did in c-sharp",
    "start": "1975500",
    "end": "1981740"
  },
  {
    "text": "you can start multiple versions concurrently by using the sync function because they now regular functions that",
    "start": "1981740",
    "end": "1987560"
  },
  {
    "text": "return immediately and just give you a handle if you should promise to get this result and then you can await for them",
    "start": "1987560",
    "end": "1993260"
  },
  {
    "text": "again the difference is only syntactical with c-sharp code weight is not an extension it's not a keyword in the",
    "start": "1993260",
    "end": "1999470"
  },
  {
    "text": "languages of function on this defer that lets you wait for its result but if you",
    "start": "1999470",
    "end": "2006550"
  },
  {
    "text": "carefully look at this code you notice a problem here they actually",
    "start": "2006550",
    "end": "2012249"
  },
  {
    "text": "began ugly problem what if this wait crashes what if loading first image",
    "start": "2012249",
    "end": "2019370"
  },
  {
    "start": "2015000",
    "end": "2015000"
  },
  {
    "text": "fails some network error something this just does not complete and throws",
    "start": "2019370",
    "end": "2024740"
  },
  {
    "text": "exception cannot load the first image now this the way they were very defined",
    "start": "2024740",
    "end": "2030289"
  },
  {
    "text": "in Catalan and in all the future based",
    "start": "2030289",
    "end": "2035840"
  },
  {
    "text": "in c-sharp and all the sinc await languages is that throws exception in",
    "start": "2035840",
    "end": "2041570"
  },
  {
    "text": "this case and the whole procedure that we have on the screen the words but now",
    "start": "2041570",
    "end": "2046940"
  },
  {
    "text": "this second future just leaves it's still award in the second image in background just nobody going through",
    "start": "2046940",
    "end": "2053000"
  },
  {
    "text": "this result anymore because we're not coming to a second a wetland never now",
    "start": "2053000",
    "end": "2058520"
  },
  {
    "text": "we have this big run process that's occupying resources doing some work and",
    "start": "2058520",
    "end": "2064128"
  },
  {
    "text": "we can put a lots of reference to it now we try the whole world images incorporation and it fails on her first",
    "start": "2064129",
    "end": "2070190"
  },
  {
    "text": "image again we have another leak of law in second image and we try and do it too",
    "start": "2070190",
    "end": "2075349"
  },
  {
    "text": "I will quickly run out of resources and that happens like all over the place in real actual code people right people",
    "start": "2075349",
    "end": "2082158"
  },
  {
    "text": "just don't notice it because it happens only so rarely and occasionally when there is something is not working just",
    "start": "2082159",
    "end": "2088790"
  },
  {
    "text": "exactly right and that's that's a real problem so the way we solve it in cotton",
    "start": "2088790",
    "end": "2096530"
  },
  {
    "start": "2094000",
    "end": "2094000"
  },
  {
    "text": "is is based on few things first thing is",
    "start": "2096530",
    "end": "2101900"
  },
  {
    "text": "what we Adam attic style of writing this stuff of cotton is by writing a",
    "start": "2101900",
    "end": "2107089"
  },
  {
    "text": "suspending function so what we tell people don't write a single function don't write functions there to return",
    "start": "2107089",
    "end": "2112520"
  },
  {
    "text": "futures because they are error-prone don't do it write functions with spent modifier they're sequential what do you",
    "start": "2112520",
    "end": "2119240"
  },
  {
    "text": "think is there less error-prone we'll see why yeah if I need concurrency I can",
    "start": "2119240",
    "end": "2126829"
  },
  {
    "text": "do concurrency just where I needed so I when I want to do something concurrent",
    "start": "2126829",
    "end": "2132410"
  },
  {
    "text": "first of all I use a concept of structured concurrently I delimit the scope of Michael Garcia all right",
    "start": "2132410",
    "end": "2138740"
  },
  {
    "text": "this thing is cousin it's called curtain scope I just write some block of code to explicit l here's I'm doing some",
    "start": "2138740",
    "end": "2144779"
  },
  {
    "text": "current things and inside this blog I can't just use SC as a high-level",
    "start": "2144779",
    "end": "2151650"
  },
  {
    "text": "function and it becomes concurrence now becomes explicit I read a synchronously Lord first image and the right eye sees",
    "start": "2151650",
    "end": "2158369"
  },
  {
    "text": "a lot second image and it's returned me it would transmit those futures and then",
    "start": "2158369",
    "end": "2164999"
  },
  {
    "text": "I can wait on them and process them later so cotton approach to think let's",
    "start": "2164999",
    "end": "2173210"
  },
  {
    "start": "2170000",
    "end": "2170000"
  },
  {
    "text": "analyze the difference the first difference in content approach and the sync versus C sharp is that in",
    "start": "2173210",
    "end": "2180029"
  },
  {
    "text": "cotton if I follow : in a magic approach of suspended function just invoking request token is",
    "start": "2180029",
    "end": "2187170"
  },
  {
    "text": "a valid expression and it produces me a result and there's also another way to",
    "start": "2187170",
    "end": "2192839"
  },
  {
    "text": "invoke it tell a sync request token it's also valid expression and it produces me",
    "start": "2192839",
    "end": "2198329"
  },
  {
    "text": "in future and the first one corresponds to a sequential the behavior and the second one concurrent and the first one",
    "start": "2198329",
    "end": "2204569"
  },
  {
    "text": "shorter is and default so signal the behavior is default and concurrent is",
    "start": "2204569",
    "end": "2210749"
  },
  {
    "text": "what you opt in if you need to but also cotton approach is different in the",
    "start": "2210749",
    "end": "2217380"
  },
  {
    "text": "other things because it forces you to add her to structure differential concurrency see when you write this code",
    "start": "2217380",
    "end": "2225839"
  },
  {
    "start": "2225000",
    "end": "2225000"
  },
  {
    "text": "like this you are forced to write this code in scope construct because a sync",
    "start": "2225839",
    "end": "2233519"
  },
  {
    "text": "is defined extension function encouragin scope object you can just write a sink",
    "start": "2233519",
    "end": "2239039"
  },
  {
    "text": "out of thin air you'll see previous example I have to say global scope a sink you have to explicitly tell what is",
    "start": "2239039",
    "end": "2245579"
  },
  {
    "text": "the scope you're doing your concurrent things in and why it's helpful let's see what happens here",
    "start": "2245579",
    "end": "2251309"
  },
  {
    "text": "now if now loading for the second image crashes just we had the problem before",
    "start": "2251309",
    "end": "2259259"
  },
  {
    "text": "with the futures because this is sink is started in this current in scope it goes",
    "start": "2259259",
    "end": "2264779"
  },
  {
    "text": "and cancels this courage in scope and by canceling it it also careful cancels all",
    "start": "2264779",
    "end": "2270089"
  },
  {
    "text": "other concurrent activities we launched in this scope so now this whole",
    "start": "2270089",
    "end": "2275460"
  },
  {
    "text": "process your awards cleanly without leaking any concurrent activities and",
    "start": "2275460",
    "end": "2280470"
  },
  {
    "text": "leaving them behind you know that's a game changer that lets you not only",
    "start": "2280470",
    "end": "2285480"
  },
  {
    "text": "write software that uses concurrency where you need it but it's also as you do without risk of losing your",
    "start": "2285480",
    "end": "2291839"
  },
  {
    "text": "concurrent processes and leaking resources so the key takeaway here is is",
    "start": "2291839",
    "end": "2298559"
  },
  {
    "text": "caught and suspend functions may be concurrent if they needed but they don't leak it they don't leave any practice",
    "start": "2298559",
    "end": "2304710"
  },
  {
    "text": "behind with it where they're recharged there were we force concurrency to be",
    "start": "2304710",
    "end": "2310290"
  },
  {
    "text": "structured and the one important thing to note there is when people often",
    "start": "2310290",
    "end": "2317220"
  },
  {
    "text": "confuse concurrency and parallelism they you know you'll see it everywhere but",
    "start": "2317220",
    "end": "2322440"
  },
  {
    "text": "how do i do threads blah blah blah and column based on Shiv employ from does",
    "start": "2322440",
    "end": "2328200"
  },
  {
    "text": "support parallelism you can have multiple threads but and do things in parallel but this prism is completely",
    "start": "2328200",
    "end": "2335160"
  },
  {
    "text": "optional like because parallelism is like all level implementation detail of",
    "start": "2335160",
    "end": "2342809"
  },
  {
    "text": "your code like how you schedule it among thread that's not what you should be thinking up front when you design your",
    "start": "2342809",
    "end": "2348690"
  },
  {
    "text": "software so when you design your sorter you should be thinking about concurrency like how you decompose your large task",
    "start": "2348690",
    "end": "2355260"
  },
  {
    "text": "into concurrent processes that interact with each other and realism which is this implementation detail and in cousin",
    "start": "2355260",
    "end": "2362569"
  },
  {
    "text": "curtains you can have hundreds thousands of concurrent processes all running the",
    "start": "2362569",
    "end": "2368790"
  },
  {
    "text": "same thread you have your main thread that does all UI and you have have concurrent animations concurrent network",
    "start": "2368790",
    "end": "2375750"
  },
  {
    "text": "requests all working in the same thread and you can use prove ilysm but it's",
    "start": "2375750",
    "end": "2381000"
  },
  {
    "text": "like optional concern you can place those dispatchers and you know specify",
    "start": "2381000",
    "end": "2387809"
  },
  {
    "text": "them just in places where you need pearl is and where you want them cpu heavy computation to be offloaded on to",
    "start": "2387809",
    "end": "2394859"
  },
  {
    "text": "another thread to be parallel with the rest of your work you can do it but it's optional you're not forced in being",
    "start": "2394859",
    "end": "2402210"
  },
  {
    "text": "parallel with cause encourages it's an optional aspect",
    "start": "2402210",
    "end": "2407940"
  },
  {
    "text": "and what's important and this also gives you an answer why we didn't call these",
    "start": "2407940",
    "end": "2414610"
  },
  {
    "text": "modifier wise call suspend or the sync like we got three different wait and we know why but like we could have called",
    "start": "2414610",
    "end": "2421860"
  },
  {
    "text": "the suspend keyword and a sing keyword think of them but no we didn't because",
    "start": "2421860",
    "end": "2427270"
  },
  {
    "text": "suspending functions in cotton they do way more than allow for a synchronous",
    "start": "2427270",
    "end": "2432520"
  },
  {
    "text": "programming they actually the language mechanism to support synchronous code at",
    "start": "2432520",
    "end": "2439090"
  },
  {
    "text": "the same time using the same mechanism so let's take a look at this example we",
    "start": "2439090",
    "end": "2444310"
  },
  {
    "text": "want to define a sequence of Fibonacci number as some piece of code and",
    "start": "2444310",
    "end": "2450420"
  },
  {
    "text": "Wisconsin curve since that's easy to do we just use this sequence curtain",
    "start": "2450420",
    "end": "2457210"
  },
  {
    "text": "builder and then we can say you me first ten few minutes numbers and cover to",
    "start": "2457210",
    "end": "2463870"
  },
  {
    "text": "list and and you get a list of first ten Fibonacci numbers and it's worth based on the same concept like sequence is",
    "start": "2463870",
    "end": "2470670"
  },
  {
    "text": "it's also curtain builder it's just a difference with regular curtain builders",
    "start": "2470670",
    "end": "2476440"
  },
  {
    "text": "that it's restricted in the sense you cannot do much inside of it but just yield values to the color and the",
    "start": "2476440",
    "end": "2488350"
  },
  {
    "text": "operation of this the difference between those curtains encourages we see before it does the curtain here is completely",
    "start": "2488350",
    "end": "2495070"
  },
  {
    "text": "synchronous there's no I think only whatsoever here the operation of this",
    "start": "2495070",
    "end": "2501240"
  },
  {
    "text": "curtain for sequence is completely synchronous with with the rest of the code what does it mean if I take my",
    "start": "2501240",
    "end": "2507250"
  },
  {
    "text": "Fibonacci sequence security an iterator nothing happens no piece of code from",
    "start": "2507250",
    "end": "2512830"
  },
  {
    "text": "inside the Fibonacci sequence wants when when I request a next number from it",
    "start": "2512830",
    "end": "2519190"
  },
  {
    "text": "that's where this code starts to run it goes over its logic it initializes some",
    "start": "2519190",
    "end": "2524680"
  },
  {
    "text": "variable and yields the first value and this place you know control turns back",
    "start": "2524680",
    "end": "2530410"
  },
  {
    "text": "to the color completely synchronous way Noah synchrony whatsoever",
    "start": "2530410",
    "end": "2536290"
  },
  {
    "text": "then if I request next item of Malaysia",
    "start": "2536290",
    "end": "2542020"
  },
  {
    "text": "sequence then it resumes you know completes the rest of it logic you know confuse the next well your Fibonacci",
    "start": "2542020",
    "end": "2550540"
  },
  {
    "text": "sequence and returns to the completely synchronous there's no I think only here",
    "start": "2550540",
    "end": "2556330"
  },
  {
    "text": "and that's why you know that's just one of the reason why we couldn't have called you know this cure this thing that just felt wrong here so however",
    "start": "2556330",
    "end": "2568420"
  },
  {
    "text": "when you start programming with multiple colleges it doesn't matter whether the",
    "start": "2568420",
    "end": "2573460"
  },
  {
    "text": "sequence s it goes you you at the end you run into this problem of sharing",
    "start": "2573460",
    "end": "2579820"
  },
  {
    "text": "state and what do you mean by share instead you know in real life we have",
    "start": "2579820",
    "end": "2586900"
  },
  {
    "text": "some entities in our applications they have a state and we apply lots of operations to them and the state needs",
    "start": "2586900",
    "end": "2595420"
  },
  {
    "text": "usually new synchronization if we follow traditional approach of multi-threading you know we start worrying about locks",
    "start": "2595420",
    "end": "2601870"
  },
  {
    "text": "about monitors etc that gets messy and",
    "start": "2601870",
    "end": "2607110"
  },
  {
    "text": "this is a good example of what kind of problems shared mutable state leads in real application like if you forget",
    "start": "2607710",
    "end": "2615100"
  },
  {
    "text": "synchronize something stuff like that now you get this kinds of behavior that you you can you can will like you know",
    "start": "2615100",
    "end": "2621490"
  },
  {
    "text": "spend days trying to troubleshoot their mysterious crashes in your apps that's that's that's like very good promise",
    "start": "2621490",
    "end": "2629590"
  },
  {
    "text": "shared state list you but there was a solution solution is again very old one",
    "start": "2629590",
    "end": "2635110"
  },
  {
    "text": "it's been invented in Anthony for like like ages ago it's called CSP communicating sequential",
    "start": "2635110",
    "end": "2641950"
  },
  {
    "text": "processes the idea is that of using",
    "start": "2641950",
    "end": "2648490"
  },
  {
    "text": "beautiful state we we don't do it we don't share mutable state instead we communicate and just give you because I",
    "start": "2648490",
    "end": "2655600"
  },
  {
    "start": "2653000",
    "end": "2653000"
  },
  {
    "text": "mean it's it's not a presentation about this but just give you a glimpse of how it works the cut encourages so Colin Curtis we can instead of this",
    "start": "2655600",
    "end": "2662950"
  },
  {
    "text": "sequence precious sequence we can also create this concurrent for manage the sequence you can just change a builder",
    "start": "2662950",
    "end": "2668260"
  },
  {
    "text": "to build called produce and produce is this a synchronous",
    "start": "2668260",
    "end": "2675240"
  },
  {
    "text": "builder that launches a curtain network simple grounded synchronously and this communicates with the rest of",
    "start": "2675240",
    "end": "2682780"
  },
  {
    "text": "the world over communication primitive called the channel so if from inside you can send values to this channel and from",
    "start": "2682780",
    "end": "2690520"
  },
  {
    "text": "outside you know we can run another car routine from our main thread we can say I want this main curtain that just",
    "start": "2690520",
    "end": "2697030"
  },
  {
    "text": "blocks the main thread and I can receive from this channel this like lets me",
    "start": "2697030",
    "end": "2706140"
  },
  {
    "text": "encapsulate my state inside a sequential piece of code that's where this equation",
    "start": "2706140",
    "end": "2712270"
  },
  {
    "text": "comes from in CSP but let them communicate over the channels and this",
    "start": "2712270",
    "end": "2718990"
  },
  {
    "text": "opens a completely different style of",
    "start": "2718990",
    "end": "2724180"
  },
  {
    "text": "programming where instead of sharing mutable state we share information by",
    "start": "2724180",
    "end": "2729940"
  },
  {
    "text": "communicating and again it's there's also accumulated knowledge of how to program on the state lots of other",
    "start": "2729940",
    "end": "2735670"
  },
  {
    "text": "languages supported and that's yet another reason for example why don't we have a weight keyword because it just",
    "start": "2735670",
    "end": "2742030"
  },
  {
    "text": "looks ugly when you start writing says PS much easier to have this nice affluent receive and other functions",
    "start": "2742030",
    "end": "2747700"
  },
  {
    "text": "like that so it all works just be like before but now it's a synchronous now we",
    "start": "2747700",
    "end": "2755230"
  },
  {
    "text": "have a channel a synchros channel that lets currents even run a difference fact communicate to close it up let me recap",
    "start": "2755230",
    "end": "2768460"
  },
  {
    "text": "some non-traditional choices that cotton made it with subjective origins first of all if you look at classic approach like",
    "start": "2768460",
    "end": "2775150"
  },
  {
    "start": "2772000",
    "end": "2772000"
  },
  {
    "text": "in pythons say for example one example is language that does it to do carbon",
    "start": "2775150",
    "end": "2781060"
  },
  {
    "text": "teams they have loss of keyword lots of new concept I think origin radials lots of different keywords in cotton",
    "start": "2781060",
    "end": "2787390"
  },
  {
    "text": "this is just one suspend modifier that does all of that I mean just just one",
    "start": "2787390",
    "end": "2792400"
  },
  {
    "text": "addition actual to the language we did we added support for the suspending functions and in cotton actually the",
    "start": "2792400",
    "end": "2798670"
  },
  {
    "text": "standard library is very thin standard librarian cotton provides very few basic primitive",
    "start": "2798670",
    "end": "2803740"
  },
  {
    "text": "suspend curtain that enable you to integrate with all the other libraries you have in everything else like current",
    "start": "2803740",
    "end": "2810850"
  },
  {
    "text": "team builders support for futures etc leaves in a separate library which is",
    "start": "2810850",
    "end": "2815890"
  },
  {
    "text": "open source you can poke poke around eight you can take how its implemented what does it do you can we implement",
    "start": "2815890",
    "end": "2822390"
  },
  {
    "text": "improve do your own things on top of this very small core library of",
    "start": "2822390",
    "end": "2828970"
  },
  {
    "text": "primitives and if you want to learn more the best place to learn just go to",
    "start": "2828970",
    "end": "2834910"
  },
  {
    "text": "official website cotton land Network so we just recently released cotton 1.30",
    "start": "2834910",
    "end": "2842050"
  },
  {
    "text": "and stabilized curtains now it's stable support the feature of cotton and it's now featured on the website there's in",
    "start": "2842050",
    "end": "2849790"
  },
  {
    "text": "the learning section there are lots of documentation that you know you can read",
    "start": "2849790",
    "end": "2855850"
  },
  {
    "text": "to learn tutorials etc etcetera so take a look there's very active",
    "start": "2855850",
    "end": "2861820"
  },
  {
    "text": "community communicating over slack you know discussion going where you can ask questions thank you very much",
    "start": "2861820",
    "end": "2871140"
  },
  {
    "text": "you",
    "start": "2874470",
    "end": "2876530"
  }
]