[
  {
    "start": "0",
    "end": "120000"
  },
  {
    "text": "so you look at the research \nand you see that there's like  ",
    "start": "4160",
    "end": "6319"
  },
  {
    "text": "somewhere between five to twenty percent of \nall code out there is duplicated to some extent  ",
    "start": "7040",
    "end": "12160"
  },
  {
    "text": "change coupling in its simplest forms is based \non finding panners in a commits you have the  ",
    "start": "12720",
    "end": "18320"
  },
  {
    "text": "the teams separated based on business capabilities \nright and that those business capabilities are  ",
    "start": "18320",
    "end": "23360"
  },
  {
    "text": "reflected in the architecture using behavior \ncode analysis you can show which team works  ",
    "start": "23360",
    "end": "28400"
  },
  {
    "text": "where in the source code this episode \nwas made possible thanks to gotopia.tech",
    "start": "28400",
    "end": "32800"
  },
  {
    "text": "Hello. Welcome to a new \nepisode of the GOTO Book Club.  ",
    "start": "33440",
    "end": "37600"
  },
  {
    "text": "I am Sven Johann. I am a Senior \nConsultant at INNOQ. I spend my time  ",
    "start": "38480",
    "end": "42960"
  },
  {
    "text": "improving software systems. And today I have my \nsecond conversation with Adam Tornhill on his  ",
    "start": "45120",
    "end": "52399"
  },
  {
    "text": "book, \"Software Design X-rays.\" Hi, Adam.\nHi, and thanks for having me here again. ",
    "start": "52400",
    "end": "58960"
  },
  {
    "text": "So maybe for those who didn't read first \npart, we highly recommend reading it,  ",
    "start": "58960",
    "end": "62559"
  },
  {
    "text": "please introduce yourself. \nI'm Adam Tornhill. I'm the founder of  ",
    "start": "64240",
    "end": "76479"
  },
  {
    "text": "a company called CodeScene where I tackle the \nchallenge of technical debt. And my background  ",
    "start": "76480",
    "end": "82640"
  },
  {
    "text": "is maybe a little bit different because actually, \nI have two backgrounds. One in engineering. I've  ",
    "start": "82640",
    "end": "88400"
  },
  {
    "text": "been a software developer for a long, long time. \nBut also, in psychology which is one of my big  ",
    "start": "88400",
    "end": "93520"
  },
  {
    "text": "interests. And what I try to do with \"Software \nDesign X-rays\" and what I work on these days is to  ",
    "start": "93520",
    "end": "98560"
  },
  {
    "text": "take my psychological background and put it on top \nof my technical experience. So that's what I do.  ",
    "start": "98560",
    "end": "106399"
  },
  {
    "text": "I'm the author of \"Software Design \nX-rays\" and a bunch of other books.",
    "start": "106400",
    "end": "109760"
  },
  {
    "text": "Thank you. In the first episode, we talked about \nbehavioral code analysis, hotspots, X-rays and  ",
    "start": "110560",
    "end": "119680"
  },
  {
    "start": "120000",
    "end": "323000"
  },
  {
    "text": "now in the second episode, we want to start with \nchange coupling and then move on to what change  ",
    "start": "120240",
    "end": "127200"
  },
  {
    "text": "coupling actually means, not on the code level but \nalso on the team level. What is change coupling? ",
    "start": "127200",
    "end": "135680"
  },
  {
    "text": "Change coupling is a very interesting \nsoftware analysis technique.  ",
    "start": "135680",
    "end": "139680"
  },
  {
    "text": "It's interesting because it's something you \ncannot do just based on the source code.  ",
    "start": "139680",
    "end": "143760"
  },
  {
    "text": "As a developer, we typically refer to coupling \nas some kind of dependency. We have some piece  ",
    "start": "147120",
    "end": "152319"
  },
  {
    "text": "of code over here and it uses some piece of \ncode over there. They depend upon each other.  ",
    "start": "152320",
    "end": "155840"
  },
  {
    "text": "Change coupling is different because it's more \nabout logical dependencies. In a behavioral code  ",
    "start": "156880",
    "end": "162160"
  },
  {
    "text": "analysis, you measure how the organization \ninteracts with the code they are building.  ",
    "start": "162160",
    "end": "167360"
  },
  {
    "text": "In change coupling, we pick up patterns and \nit could be anything from the git log to more  ",
    "start": "168080",
    "end": "172560"
  },
  {
    "text": "advanced architecture analyzers, we pick up \npatterns in Jira later and figure out that  ",
    "start": "172560",
    "end": "178480"
  },
  {
    "text": "each time I need to modify a piece over \nhere. I have a predictive modification  ",
    "start": "179040",
    "end": "182879"
  },
  {
    "text": "in the module over here. So, there is some \nkind of logical dependency between them.  ",
    "start": "182880",
    "end": "186800"
  },
  {
    "text": "And using change coupling we can get a \nlot of interesting feedback on how well  ",
    "start": "187440",
    "end": "191520"
  },
  {
    "text": "our architecture supports the way we work \nwith it. So that's the short description.",
    "start": "191520",
    "end": "195600"
  },
  {
    "text": "We all know the situation where we change, let's \nsay, a piece of code and then we have to change  ",
    "start": "198080",
    "end": "206000"
  },
  {
    "text": "five completely different unit tests \nbecause of some copy-paste coding. How  ",
    "start": "207920",
    "end": "215920"
  },
  {
    "text": "does the change coupling relate to clone \ndetection? Because clone detection is  ",
    "start": "215920",
    "end": "219619"
  },
  {
    "text": "the thing I know if I change something and \nthen I have all those subsequent changes.  ",
    "start": "219619",
    "end": "219705"
  },
  {
    "text": "Yeah, so that's an area where I've done a lot \nof work. The original challenge I had was that  ",
    "start": "219705",
    "end": "221440"
  },
  {
    "text": "this was way before CodeScene, way before I \nwrote the book. I was working as a software  ",
    "start": "221440",
    "end": "226000"
  },
  {
    "text": "consultant with a team that was very heavy on test \nautomation. The problem they had was that they  ",
    "start": "226000",
    "end": "233040"
  },
  {
    "text": "got a lot of flaky tests. This was automation \nat the system level, at the application level.  ",
    "start": "233040",
    "end": "238480"
  },
  {
    "text": "The problem was of course that, as a developer, \nyou pushed some changes, you updated some tests  ",
    "start": "239280",
    "end": "244880"
  },
  {
    "text": "and then you had three other tests failing \nbecause they also depended upon some logic. ",
    "start": "244880",
    "end": "249200"
  },
  {
    "text": "Now using change coupling, what we could do was we \ncould, first of all, visualize the changes. So, we  ",
    "start": "250320",
    "end": "255440"
  },
  {
    "text": "could figure out that you make this tweak in the \napplication code and now we have to modify this  ",
    "start": "255440",
    "end": "259840"
  },
  {
    "text": "whole cluster of files, right, so that we kind of \nhighlight the problem. But to make it actionable,  ",
    "start": "259840",
    "end": "265840"
  },
  {
    "text": "we wanted to drill deeper and figure out if \nthe reason that we have this change coupling,  ",
    "start": "265840",
    "end": "271600"
  },
  {
    "text": "is due to drive violations, violations \nof the don't repeat yourself principle.  ",
    "start": "271600",
    "end": "276480"
  },
  {
    "text": "And adding copy-paste metrics on top of \nthis proved to be really, really useful.",
    "start": "277280",
    "end": "282639"
  },
  {
    "text": "To me, change coupling is an \nexcellent way of benefiting from  ",
    "start": "284560",
    "end": "288560"
  },
  {
    "text": "clone detection tools and copy-paste detection \ntools because the main problem with copy-paste  ",
    "start": "288560",
    "end": "293840"
  },
  {
    "text": "is that there's simply so much of it. So, you \nlook at the research and you see that there's  ",
    "start": "293840",
    "end": "299199"
  },
  {
    "text": "somewhere between 5% to 20% of all code out there \nis duplicated to some extent. And not all of  ",
    "start": "300160",
    "end": "306640"
  },
  {
    "text": "that application is bad per se. So, using change \ncoupling, it gives us a window into those massive  ",
    "start": "306640",
    "end": "312720"
  },
  {
    "text": "amounts of duplicated code and we can figure \nout that, \"Okay. These are the software clones  ",
    "start": "312720",
    "end": "317280"
  },
  {
    "text": "that are actually expensive to maintain, right, \nbecause we have these predictive modifications.\"",
    "start": "317280",
    "end": "321840"
  },
  {
    "start": "323000",
    "end": "884000"
  },
  {
    "text": "The clone is not an exact clone, right? Usually, \nyou copy something and then you paste it and then  ",
    "start": "324960",
    "end": "333600"
  },
  {
    "text": "you change this tiny little bit. But of course, \nif one thing changes here, you have to change  ",
    "start": "333600",
    "end": "339440"
  },
  {
    "text": "all of the rest there. Clone detection \ntools also find those half-baked copy,  ",
    "start": "339440",
    "end": "346160"
  },
  {
    "text": "let's say, copy-paste-edit pieces of code, right?\nYeah, that's right. I think that clone detection  ",
    "start": "346160",
    "end": "354000"
  },
  {
    "text": "software is a pretty old technique. It's something \nthat's been in industrial use for almost three  ",
    "start": "354000",
    "end": "359040"
  },
  {
    "text": "decades. But again, I think that simply the \nsheer amount of duplicated code makes it very  ",
    "start": "359040",
    "end": "365520"
  },
  {
    "text": "hard to act upon it because to me, I think one \nof the main problems with copy-paste is that we,  ",
    "start": "365520",
    "end": "372479"
  },
  {
    "text": "as developers, myself included, are kind \nof conditioned to despise copy-paste.  ",
    "start": "372480",
    "end": "377200"
  },
  {
    "text": "We have learned over and over again \nthat it's a bad thing to do, right?  ",
    "start": "377920",
    "end": "381600"
  },
  {
    "text": "The problem is that it's simply not true as a \ngeneral statement because let's say that you  ",
    "start": "381600",
    "end": "387280"
  },
  {
    "text": "have a piece of code here. You copy-paste it and \nnow there are these two copies. They evolve in  ",
    "start": "387280",
    "end": "391680"
  },
  {
    "text": "completely different directions. I could very well \nargue that copy-paste was a good starting point.",
    "start": "391680",
    "end": "396720"
  },
  {
    "text": "Or maybe you duplicate some code and you \nnever need to touch it again. It might not  ",
    "start": "397600",
    "end": "402880"
  },
  {
    "text": "be ideal but is it a really a big problem. So, the \nproblem starts when copy-paste kind of drives us,  ",
    "start": "402880",
    "end": "411200"
  },
  {
    "text": "our behavior, in a negative direction. We \nhave to make those predictive modifications.  ",
    "start": "411200",
    "end": "416000"
  },
  {
    "text": "It's easy to miss updating one of those clones. \nAnd that's why I think this combination of change  ",
    "start": "416000",
    "end": "422320"
  },
  {
    "text": "coupling and clone detection really, \nreally adds value to our daily work. ",
    "start": "422320",
    "end": "426560"
  },
  {
    "text": "I agree that it's not always bad. I tend to do \nfirst-time copy-paste-edit but when I do it the  ",
    "start": "426560",
    "end": "437120"
  },
  {
    "text": "second time, then it's time to say, \"Okay, now I \nneed an abstraction\". Daniel Terhorst-North once  ",
    "start": "437120",
    "end": "449840"
  },
  {
    "text": "said \"DRY is the enemy of decoupled.\" \nSo that's something I'm wrangling  ",
    "start": "449840",
    "end": "457360"
  },
  {
    "text": "with but in terms of microservices for example or \njust different, completely independent modules.  ",
    "start": "457360",
    "end": "466319"
  },
  {
    "text": "Whenever I change something far over here, I \nhave to change something far over there even in a  ",
    "start": "469920",
    "end": "475600"
  },
  {
    "text": "totally different repository. Then things become \na bit problematic. I wonder how do I find out  ",
    "start": "475600",
    "end": "488080"
  },
  {
    "text": "if I have a problem because maybe I only have this \nonetime thing as you said or it's a real problem.  ",
    "start": "488080",
    "end": "496879"
  },
  {
    "text": "How can I find that out?\nThat's a very interesting question because I think  ",
    "start": "498080",
    "end": "502800"
  },
  {
    "text": "the incredible hype behind microservices \nover the past five to six years  ",
    "start": "504480",
    "end": "508240"
  },
  {
    "text": "kind of flipped the whole architecture and \ndesign thing around a little bit because  ",
    "start": "509280",
    "end": "513520"
  },
  {
    "text": "there are definitely scenarios where you \nwant to violate drive principle because  ",
    "start": "514240",
    "end": "518640"
  },
  {
    "text": "loose coupling is simply more important. \nIt's a more important capability than  ",
    "start": "519200",
    "end": "523680"
  },
  {
    "text": "minimizing the amount of duplication. At the same \ntime, what you want to avoid is to have exactly  ",
    "start": "523680",
    "end": "530240"
  },
  {
    "text": "the same behavior in two different places if \nthat's a behavior that's been frequently modified.  ",
    "start": "530240",
    "end": "534320"
  },
  {
    "text": "Because if you have that, it could very well \nindicate that maybe you missed a microservice  ",
    "start": "534960",
    "end": "538880"
  },
  {
    "text": "to take on that shared responsibility. Maybe \nit's a separate business capability, right? ",
    "start": "538880",
    "end": "543200"
  },
  {
    "text": "There are two aspects to it. One is \ngetting the data. How do we figure out  ",
    "start": "545680",
    "end": "549520"
  },
  {
    "text": "change coupling across git repositories? The \nsecond challenge is how do we act upon it. And  ",
    "start": "549520",
    "end": "555120"
  },
  {
    "text": "I wrote about this in the book. So, change \ncoupling in simplest forms is based on  ",
    "start": "555120",
    "end": "561520"
  },
  {
    "text": "finding patterns in the commits, files that change \ntogether over and over again as part of the same  ",
    "start": "561520",
    "end": "565920"
  },
  {
    "text": "commit set. And that clearly doesn't work across \nrepositories. What we do there is that you simply  ",
    "start": "565920",
    "end": "573279"
  },
  {
    "text": "look at a ticket system instead. Things like \nJira tickets, Azure DevOp tickets, whatever  ",
    "start": "574080",
    "end": "579760"
  },
  {
    "text": "and see that if the commits reference the \nsame ticket, then we know that they're kind  ",
    "start": "580720",
    "end": "585120"
  },
  {
    "text": "of depending upon each other. And if it happened \noften enough, then that's a very strong signal.  ",
    "start": "585120",
    "end": "590160"
  },
  {
    "text": "So that way you can detect change coupling down to \nthe function level, even across git repositories. ",
    "start": "590880",
    "end": "599040"
  },
  {
    "text": "This is something that's very powerful and \nyou can, of course, add clone detection on  ",
    "start": "599040",
    "end": "602160"
  },
  {
    "text": "top of that as well and then see is this \na drive violation that's desirable or is  ",
    "start": "602160",
    "end": "608000"
  },
  {
    "text": "it an actual problem that we lack some \nlevel of encapsulation or abstraction. ",
    "start": "608000",
    "end": "612160"
  },
  {
    "text": "To me, that it's a hard \nengineering problem but the  ",
    "start": "614640",
    "end": "618160"
  },
  {
    "text": "more challenging aspect is to make that decision, \nright. Do we live with this or do we ignore  ",
    "start": "619120",
    "end": "624160"
  },
  {
    "text": "it? What I tend to recommend is I use a general \nheuristic that I call the heuristic of surprise.  ",
    "start": "624160",
    "end": "629600"
  },
  {
    "text": "I simply visualize the change coupling and then I \ntake everything I know about the architecture and  ",
    "start": "630480",
    "end": "635040"
  },
  {
    "text": "the problem domain and any surprising coupling \nthat I find is usually bad because a surprise  ",
    "start": "635040",
    "end": "642639"
  },
  {
    "text": "is simply one of the most expensive things \nyou can ever have in software architecture. ",
    "start": "642640",
    "end": "646800"
  },
  {
    "text": "Yeah. Rarely people are positively surprised.\nYeah. ",
    "start": "646800",
    "end": "651000"
  },
  {
    "text": "It's always \"You know, don't make your manager \nbeing surprised because usually, it's negative.\"  ",
    "start": "652560",
    "end": "659279"
  },
  {
    "text": "But I mean, what would be an example for a \nsurprise. Let’s move that question a bit to  ",
    "start": "659280",
    "end": "660556"
  },
  {
    "text": "the back. You said you wanna show the coupling. So \nhow do you show the coupling? I remember from when  ",
    "start": "660556",
    "end": "670240"
  },
  {
    "text": "I looked at CodeScene and also when I remember the \nbook I show two files, right? And then there is  ",
    "start": "670240",
    "end": "676800"
  },
  {
    "text": "the amount of coupling of those files and how \noften they change together, so to speak. So,  ",
    "start": "678160",
    "end": "683759"
  },
  {
    "text": "what's the thinking about this approach? You know, \nshowing the files and the amount of coupling. ",
    "start": "683760",
    "end": "689840"
  },
  {
    "text": "The interesting thing with change coupling \nand a lot of those other behavioral code  ",
    "start": "691120",
    "end": "694960"
  },
  {
    "text": "analysis techniques that we talked about \nin the previous episode like hotspots  ",
    "start": "694960",
    "end": "698400"
  },
  {
    "text": "is that they scale at different levels. You can \nuse change coupling at the function level. You  ",
    "start": "699680",
    "end": "704800"
  },
  {
    "text": "can use it at the file level and you can use it at \nan architecture level. And that's where I usually  ",
    "start": "704800",
    "end": "710399"
  },
  {
    "text": "start when I pick up a system. I look at the \ndifferent architectural elements. They could be  ",
    "start": "710400",
    "end": "716640"
  },
  {
    "text": "either different layers, different components or \nthey could be microservices. And I simply figure  ",
    "start": "716640",
    "end": "722400"
  },
  {
    "text": "out the change coupling between, let's say, the \ndifferent services. So, I typically visualize it.  ",
    "start": "722400",
    "end": "727840"
  },
  {
    "text": "You have all your services like a wheel and then \nyou see the connections between those sections.  ",
    "start": "727840",
    "end": "732800"
  },
  {
    "text": "And that's usually my starting point.\nI've been fortunate to work with so many  ",
    "start": "733760",
    "end": "741120"
  },
  {
    "text": "organizations across the globe at all kinds of \nscale and I see several organizations are doing  ",
    "start": "741120",
    "end": "746880"
  },
  {
    "text": "a really good job with it. But occasionally there \nis a surprise. And the surprise is very often that  ",
    "start": "746880",
    "end": "751840"
  },
  {
    "text": "even though you put all these efforts into \ndefining proper service boundaries, we know about  ",
    "start": "753120",
    "end": "758000"
  },
  {
    "text": "bonded context, domain-driven design and all that \nstuff, but that is incredibly hard in practice  ",
    "start": "758000",
    "end": "763840"
  },
  {
    "text": "because we basically have to be domain experts to \ndo that. So, the surprise tends to be that, \"Hey,  ",
    "start": "763840",
    "end": "770640"
  },
  {
    "text": "we're actually starting to build our distributed \nmonolith.\" It's very easy to highlight that with  ",
    "start": "770640",
    "end": "776240"
  },
  {
    "text": "change coupling. When you change the service you \nhave a dependency to five other services and then  ",
    "start": "776240",
    "end": "782240"
  },
  {
    "text": "you look at the details. What kind of functions or \ncouple do you often see that you implement a new  ",
    "start": "782240",
    "end": "787920"
  },
  {
    "text": "capability here on your business capability and \nto pull that off, you need to query two different  ",
    "start": "787920",
    "end": "792639"
  },
  {
    "text": "services and update the state in a third one. So \nthat's a typical warning sign that I tend to find. ",
    "start": "792640",
    "end": "798400"
  },
  {
    "text": "As we said, maybe we have two code clones in \ntwo different services. And then we change it  ",
    "start": "802400",
    "end": "811600"
  },
  {
    "text": "once and that's fine. It just happened once \nand that's probably not a problem. If we  ",
    "start": "811600",
    "end": "817279"
  },
  {
    "text": "change it the second time, the third time, the \ntenth time, 100% of the time, we change those  ",
    "start": "818080",
    "end": "826080"
  },
  {
    "text": "files together in different services. Is there \nany recommendation when I should start worrying  ",
    "start": "827440",
    "end": "834160"
  },
  {
    "text": "about those temporal dependencies?\nI find it very hard to give general  ",
    "start": "834160",
    "end": "840240"
  },
  {
    "text": "recommendations in this area because with \nhotspots it's usually quite easy. If you  ",
    "start": "840240",
    "end": "845200"
  },
  {
    "text": "work on a part of a code a lot and that part of \na code has a high degree of technical debt, then  ",
    "start": "845200",
    "end": "849600"
  },
  {
    "text": "it's very easy to say that, \"Okay, we need \nto fix this.\" But with change coupling,  ",
    "start": "850480",
    "end": "854160"
  },
  {
    "text": "it's so much harder because it depends on the \nlifecycle of the code base. If it's something  ",
    "start": "854160",
    "end": "859440"
  },
  {
    "text": "you just got started on, there's probably going \nto be a lot of experimentation and learning going  ",
    "start": "859440",
    "end": "864160"
  },
  {
    "text": "on. So, I do expect a higher degree of change \ncoupling and more complex change coupling. ",
    "start": "864160",
    "end": "868639"
  },
  {
    "text": "In a more stable system, once the basic \narchitecture is set, I would be worried about  ",
    "start": "873760",
    "end": "878640"
  },
  {
    "text": "any change coupling that's over 20%.  ",
    "start": "878640",
    "end": "880640"
  },
  {
    "text": "That would worry me.\nOkay.",
    "start": "881680",
    "end": "883120"
  },
  {
    "text": "I just wanted to add that the other heuristics I \nuse is basically that change coupling gets more  ",
    "start": "883120",
    "end": "887520"
  },
  {
    "start": "884000",
    "end": "1044000"
  },
  {
    "text": "expensive with distance. And what I mean with \ndistance is first of all architectural distance  ",
    "start": "887520",
    "end": "892640"
  },
  {
    "text": "like are these two completely unrelated parts \nin theory but in practice tied together. Then  ",
    "start": "892640",
    "end": "898160"
  },
  {
    "text": "that might very well be one of those surprises.\nThe other one is dependencies that cross team  ",
    "start": "898160",
    "end": "904480"
  },
  {
    "text": "boundaries. That very quickly becomes expensive \nbecause the teams end up in all these coordination  ",
    "start": "904480",
    "end": "912000"
  },
  {
    "text": "meetings and they might have conflicting \nchanges in their API and stuff like that. ",
    "start": "912000",
    "end": "915760"
  },
  {
    "text": "Yeah. I can sing a song about those kinds \nof problems. I think if you have different  ",
    "start": "915760",
    "end": "921120"
  },
  {
    "text": "repositories and one team is responsible for that, \nokay. It's not nice. But it's still let's say  ",
    "start": "921120",
    "end": "929520"
  },
  {
    "text": "manageable and it's also easy to fix because \nit's one team. Just a couple of people own  ",
    "start": "929520",
    "end": "938640"
  },
  {
    "text": "different repositories and can think \nabout reducing or getting rid of that  ",
    "start": "938640",
    "end": "944400"
  },
  {
    "text": "coupling. But across teams that's going to be \ntricky. So, what are some interesting examples  ",
    "start": "946000",
    "end": "954800"
  },
  {
    "text": "from your experience on that problem, you know?\nI have so many. I’m not even sure where I should  ",
    "start": "954800",
    "end": "962480"
  },
  {
    "text": "start. I think one of the most common issues I've \nseen, and this used to be more common maybe a few  ",
    "start": "962480",
    "end": "969680"
  },
  {
    "text": "years back, like, two, three years ago, was that \nseveral organizations that I worked with asked me,  ",
    "start": "969680",
    "end": "975600"
  },
  {
    "text": "\"How should we organize our development teams?\" \nSo, we started out with component-based teams.  ",
    "start": "976400",
    "end": "983040"
  },
  {
    "text": "Then we noticed that we had very, \nvery long lead times for new features  ",
    "start": "983040",
    "end": "988079"
  },
  {
    "text": "because you had to do these handovers all the time \nbetween change coupling components. So, we changed  ",
    "start": "988080",
    "end": "993360"
  },
  {
    "text": "to a feature team and now we kind of noticed that \nour whole quality aspect just went south because  ",
    "start": "993360",
    "end": "1000959"
  },
  {
    "text": "suddenly we find that we have 10 different \nteams all working the same parts of the code. ",
    "start": "1001920",
    "end": "1005600"
  },
  {
    "text": "It's a much harder answer because the \norganizational aspect always goes hand in  ",
    "start": "1009280",
    "end": "1014640"
  },
  {
    "text": "hand with the software architecture. You really, \nreally need to balance these two. And if you want  ",
    "start": "1014640",
    "end": "1019520"
  },
  {
    "text": "to have component teams, then I think a much \nbetter approach is what the \"Team Topologies\"  ",
    "start": "1019520",
    "end": "1025520"
  },
  {
    "text": "people would recommend, stream align the teams. \nThat's the only way I found that actually scales.  ",
    "start": "1025520",
    "end": "1031839"
  },
  {
    "text": "You have the teams separated based on business \ncapabilities and those business capabilities  ",
    "start": "1031840",
    "end": "1038640"
  },
  {
    "text": "are reflecting the architecture. I really \nhaven't seen anything else that works at scale.",
    "start": "1038640",
    "end": "1043680"
  },
  {
    "text": "Yeah, I was about to say. In the \"Team Topologies\" \nbook they have this quote from, I believe,  ",
    "start": "1043680",
    "end": "1052400"
  },
  {
    "start": "1044000",
    "end": "1556000"
  },
  {
    "text": "Ruth Malan. There is the software architecture \nbut there is also the communication architecture  ",
    "start": "1052400",
    "end": "1059920"
  },
  {
    "text": "basically on Conway's Law. And if \nyou, as an architect, don't care about  ",
    "start": "1060560",
    "end": "1068160"
  },
  {
    "text": "team setup and communication structure between \nteams, you give the architecture task to someone  ",
    "start": "1068160",
    "end": "1076320"
  },
  {
    "text": "who cares like a non-technical manager. And \nthen you end up in those problems you described. ",
    "start": "1076320",
    "end": "1083679"
  },
  {
    "text": "Is there a way how to use those insights on \na change coupling based on different teams  ",
    "start": "1085520",
    "end": "1093920"
  },
  {
    "text": "working on the same code base to, let's say, to \nrefactor teams towards those stream aligned teams? ",
    "start": "1093920",
    "end": "1100480"
  },
  {
    "text": "Yes, there are. And I like to think this is one \nof the most important contributions by behavioral  ",
    "start": "1101120",
    "end": "1107360"
  },
  {
    "text": "code analysis and \"Software Design X-rays\" and \nwhat we do with CodeScene as well of course.  ",
    "start": "1107360",
    "end": "1111520"
  },
  {
    "text": "It brings visibility to the people’s side of code. \nI always talk about this like the grand tragedy  ",
    "start": "1112640",
    "end": "1120480"
  },
  {
    "text": "of software design, that the organization that \nbuilds the code is invisible in the code itself.",
    "start": "1120480",
    "end": "1124400"
  },
  {
    "text": " Using behavioral code analysis, you \ncan actually visualize that. You can  ",
    "start": "1125680",
    "end": "1129120"
  },
  {
    "text": "show which team works where in the source code. \nAnd you can overlay that with change coupling  ",
    "start": "1129840",
    "end": "1134799"
  },
  {
    "text": "information so that you can easily show those \nbottlenecks that when we modify this service here,  ",
    "start": "1134800",
    "end": "1140960"
  },
  {
    "text": "that team has to coordinate with four other teams. \nYou can visualize that. And from there, it's  ",
    "start": "1140960",
    "end": "1146880"
  },
  {
    "text": "mostly about domain expertise to figure it out. \nQuite often, it's not enough to just shift the  ",
    "start": "1146880",
    "end": "1154480"
  },
  {
    "text": "teams around. Quite often, you have to do a more \nfundamental change and maybe those two different  ",
    "start": "1154480",
    "end": "1159040"
  },
  {
    "text": "services or components are actually the same \ncomponent, so you need to merge them together. And  ",
    "start": "1159040",
    "end": "1164880"
  },
  {
    "text": "occasionally, you find that an organization simply \nlacks a team to take on a new responsibility.",
    "start": "1164880",
    "end": "1169520"
  },
  {
    "text": "So it's the same pattern maybe we discussed the \nlast time where the hotspots actually create a  ",
    "start": "1169520",
    "end": "1180880"
  },
  {
    "text": "not-to-do list. You have so many problems but with \nthe hotspots, you get a focus on the problem. And  ",
    "start": "1180880",
    "end": "1189280"
  },
  {
    "text": "here we would have the same. If you need to think \nabout your team setup or your \"Team Topologies\",  ",
    "start": "1189280",
    "end": "1197120"
  },
  {
    "text": "to use the word, you can look at those parts \nwhere many teams own a lot of the same code  ",
    "start": "1197120",
    "end": "1206240"
  },
  {
    "text": "and also where are teams actually quite distinct \nfrom each other in the codebase. And I can use  ",
    "start": "1206240",
    "end": "1212240"
  },
  {
    "text": "the problematic parts to identify where we need \nto create better boundaries, team boundaries. ",
    "start": "1213360",
    "end": "1220480"
  },
  {
    "text": "Yeah, and I think that's important because the \nmoment you're able to visualize that, then you can  ",
    "start": "1220480",
    "end": "1224880"
  },
  {
    "text": "start to have a meaningful conversation between \nengineering and the business. In my experience,  ",
    "start": "1224880",
    "end": "1231040"
  },
  {
    "text": "even with organizations that have a fairly high \ndegree of team autonomy, a team can usually not  ",
    "start": "1231040",
    "end": "1238080"
  },
  {
    "text": "decide what they want to do. They can decide \nwhat they want to do differently but they cannot  ",
    "start": "1238080",
    "end": "1243760"
  },
  {
    "text": "decide for the whole organization. We need \nsome kind of buy-in and being able to show  ",
    "start": "1244400",
    "end": "1248880"
  },
  {
    "text": "that data really, really helps in my experience.\nYeah. If you just say you have a problem or you  ",
    "start": "1248880",
    "end": "1253360"
  },
  {
    "text": "have a feeling, usually people don't react to it. \nAnd in your book, you mentioned that you can test  ",
    "start": "1253360",
    "end": "1261200"
  },
  {
    "text": "your architecture. Let's say architecture in terms \nof dependencies on teams. If you implement a new  ",
    "start": "1261200",
    "end": "1268880"
  },
  {
    "text": "feature, how many people do you need to bring into \none room to find out how good or bad your real  ",
    "start": "1268880",
    "end": "1278240"
  },
  {
    "text": "dependencies are, either your hard dependencies or \nyour soft dependencies? If I want to implement a  ",
    "start": "1278240",
    "end": "1285600"
  },
  {
    "text": "new feature and I have to call a big staff event, \nI obviously have a problem. What's your experience  ",
    "start": "1285600",
    "end": "1293039"
  },
  {
    "text": "when you do those tests with your clients?\nMy experience is that it's very easy to end up  ",
    "start": "1296880",
    "end": "1303440"
  },
  {
    "text": "doing local optimizations. Organizations \nalways know themselves that, \"Hey, we have  ",
    "start": "1303440",
    "end": "1310399"
  },
  {
    "text": "a lot of coordination meetings and we have a lot \nof sync meetings.\" And what typically happens is  ",
    "start": "1310400",
    "end": "1314800"
  },
  {
    "text": "that many organizations tend to stuff additional \nceremonies on top of that. We have a problem with  ",
    "start": "1314800",
    "end": "1320080"
  },
  {
    "text": "sharing information for example. So, let's do \nadditional information-sharing meetings. Let's  ",
    "start": "1320720",
    "end": "1325840"
  },
  {
    "text": "do additional status meetings so that everyone \ninvolved is up to date and stuff like that.  ",
    "start": "1325840",
    "end": "1329840"
  },
  {
    "text": "And in my book, that's basically just the way of \ncovering up the symptoms, not the real root cause.  ",
    "start": "1330480",
    "end": "1336400"
  },
  {
    "text": "Because you really do want to keep \ncoordination and meetings to a minimum.  ",
    "start": "1337360",
    "end": "1341280"
  },
  {
    "text": "And the only way of doing that is to \nmake sure that each team can operate  ",
    "start": "1342160",
    "end": "1345840"
  },
  {
    "text": "autonomously, so that they can have this fit \nbetween an organizational unit and the actual  ",
    "start": "1345840",
    "end": "1351679"
  },
  {
    "text": "architecture. So that's where I come from.\nYeah. I feel the pain already.  ",
    "start": "1351680",
    "end": "1355840"
  },
  {
    "text": "I've been in meetings with around 60 coordinators \nand at least I was thinking, \"This cannot possibly  ",
    "start": "1356560",
    "end": "1364720"
  },
  {
    "text": "be true.\" How do you visualize those dependencies \nbetween teams? To me right now it feels like  ",
    "start": "1364720",
    "end": "1398960"
  },
  {
    "text": "it's something you should use in each and every \nproject to really reduce your team dependencies. ",
    "start": "1400560",
    "end": "1407120"
  },
  {
    "text": "Yeah, and I find it fascinating in particular \nif we talk about stuff like microservices  ",
    "start": "1407120",
    "end": "1411520"
  },
  {
    "text": "where we're very heavy up on the measuring all \nkinds of things. We are measuring performance,  ",
    "start": "1411520",
    "end": "1416720"
  },
  {
    "text": "we're measuring scalability and all that stuff. We \nhave an alert system. But then we have these other  ",
    "start": "1416720",
    "end": "1422480"
  },
  {
    "text": "architectural properties that are so important \nlike loose coupling, independent deployability,  ",
    "start": "1422480",
    "end": "1427520"
  },
  {
    "text": "autonomous teams and we are not really measuring \nthat. So that's where I think behavioral code  ",
    "start": "1427520",
    "end": "1433120"
  },
  {
    "text": "analysis can kinda fill that gap. And it can \nwork as a monitoring system, as an alert system  ",
    "start": "1433120",
    "end": "1439600"
  },
  {
    "text": "for architecture. And that's the way I've been \nusing it over the past couple of years and I have  ",
    "start": "1439600",
    "end": "1443840"
  },
  {
    "text": "a very good experience with that.\nYeah. And even alert triggers.  ",
    "start": "1443840",
    "end": "1447760"
  },
  {
    "text": "What are the typical steps to fix the problem?\nSo, what actually surprised me the most because  ",
    "start": "1449600",
    "end": "1455200"
  },
  {
    "text": "it was so unexpected for me was that a lot \nof those problematic dependencies between  ",
    "start": "1455200",
    "end": "1460159"
  },
  {
    "text": "different teams or coordination bottlenecks, \nvery often their fix turned out to be technical.  ",
    "start": "1460160",
    "end": "1465760"
  },
  {
    "text": "It's something we got wrong either in the \nhigh-level design or in the architecture. We  ",
    "start": "1466320",
    "end": "1470240"
  },
  {
    "text": "stuffed too many responsibilities into one module \nand now multiple teams have a reason to touch that  ",
    "start": "1471040",
    "end": "1476880"
  },
  {
    "text": "module, right, or maybe we do have a very modular \narchitecture but it's the wrong granularity on it.  ",
    "start": "1476880",
    "end": "1483760"
  },
  {
    "text": "Maybe it's the wrong modeling concepts that \nwe use. And very often it turns out that,  ",
    "start": "1483760",
    "end": "1488320"
  },
  {
    "text": "as software architects, it tends to be \nvery common that we identify technical  ",
    "start": "1489680",
    "end": "1493120"
  },
  {
    "text": "building blocks and we kind of build our \narchitecture around that and that's, like,  ",
    "start": "1493120",
    "end": "1496640"
  },
  {
    "text": "more or less asking for heavy team coupling.\nYeah. I like that. Little code changes to fix  ",
    "start": "1497520",
    "end": "1503520"
  },
  {
    "text": "big problems. I am currently \nin a project with, let's say,  ",
    "start": "1503520",
    "end": "1512960"
  },
  {
    "text": "300 people. Without the data visualization on the \ncoupling it's incredibly hard to have a meaningful  ",
    "start": "1512960",
    "end": "1523440"
  },
  {
    "text": "conversation about what the problems are. \nYeah. And I think that even minor improvements  ",
    "start": "1523440",
    "end": "1526639"
  },
  {
    "text": "at that scale have a big payoff because imagine  ",
    "start": "1526640",
    "end": "1530320"
  },
  {
    "text": "just the staff cost of 300 people. If we \ncan save 1%, that can be quite some party.  ",
    "start": "1532080",
    "end": "1538159"
  },
  {
    "text": "Yeah. Exactly. I mean, coordination \nmeetings with 50 people  ",
    "start": "1540480",
    "end": "1543600"
  },
  {
    "text": "every once in a while, why not \nanalyze the code base instead? ",
    "start": "1544560",
    "end": "1549680"
  },
  {
    "text": "You could almost buy a private jet \nfor that money you save, right? ",
    "start": "1550480",
    "end": "1553600"
  },
  {
    "text": "Exactly. From my perspective, I could have \nmany more questions but let's close it here.  ",
    "start": "1554240",
    "end": "1564400"
  },
  {
    "start": "1556000",
    "end": "1610000"
  },
  {
    "text": "Thank you, Adam, for the conversation. I can \nreally recommend not only reading your book but  ",
    "start": "1564400",
    "end": "1570960"
  },
  {
    "text": "also check out the tool. Thank you.\nThanks a lot for having me. A pleasure.",
    "start": "1570960",
    "end": "1576799"
  }
]