[
  {
    "start": "0",
    "end": "18000"
  },
  {
    "text": "hi I'm of course Walter Brite and this is about component programming in the D",
    "start": "30",
    "end": "7470"
  },
  {
    "text": "programming language okay everyone in who's a professional software programmer",
    "start": "7470",
    "end": "14040"
  },
  {
    "text": "talks about reusable software it's an axiom it's taken for granted we all buy",
    "start": "14040",
    "end": "21810"
  },
  {
    "start": "18000",
    "end": "186000"
  },
  {
    "text": "into it we all try to write reusable software okay who around here tries to",
    "start": "21810",
    "end": "28260"
  },
  {
    "text": "make their software reusable everybody who tries not to make their software",
    "start": "28260",
    "end": "33809"
  },
  {
    "text": "reasonable okay so there are a few so",
    "start": "33809",
    "end": "40469"
  },
  {
    "text": "you guys can leave now yeah okay well",
    "start": "40469",
    "end": "45629"
  },
  {
    "text": "there's kind of an ugly reality to writing reusable software I've been programming for 35 years and I",
    "start": "45629",
    "end": "54989"
  },
  {
    "text": "discovered something terrible about my code as I never reuse it almost never",
    "start": "54989",
    "end": "60449"
  },
  {
    "text": "reuse it I believe in reusable software but I'm",
    "start": "60449",
    "end": "67020"
  },
  {
    "text": "always writing it over again copypasta",
    "start": "67020",
    "end": "72890"
  },
  {
    "text": "doesn't work doesn't count okay copying it and tweaking it around that that's not reusable software so how",
    "start": "72890",
    "end": "82320"
  },
  {
    "text": "many of you have had that experience you look back over your code and it just ain't reusable despite your best efforts",
    "start": "82320",
    "end": "89630"
  },
  {
    "text": "okay something has gone horribly horribly wrong okay it's not for lack of",
    "start": "89630",
    "end": "99390"
  },
  {
    "text": "trying every time I make something I try to make it reusable because you know I'm",
    "start": "99390",
    "end": "104700"
  },
  {
    "text": "a believer it's not because I'm a better programmer than I used to be so I hate",
    "start": "104700",
    "end": "111240"
  },
  {
    "text": "what I wrote before and I want to rewrite it it's just for some reason it's not working and I need to look",
    "start": "111240",
    "end": "117899"
  },
  {
    "text": "deeper for what the heck is going wrong with my software why is it not reusable",
    "start": "117899",
    "end": "124610"
  },
  {
    "text": "okay so I look at it and you know some",
    "start": "124610",
    "end": "130349"
  },
  {
    "text": "things about my code trouble me my abstractions are leaky they always",
    "start": "130349",
    "end": "137280"
  },
  {
    "text": "seem that there's no hard boundaries on the edges and it it always seems to flow",
    "start": "137280",
    "end": "142709"
  },
  {
    "text": "out into the surrounding code and the stench of the surrounding code times to",
    "start": "142709",
    "end": "148200"
  },
  {
    "text": "flow into my abstraction and the end result is I can reuse it",
    "start": "148200",
    "end": "155150"
  },
  {
    "text": "sometimes my components they're too specific they work for a particular type",
    "start": "155489",
    "end": "161069"
  },
  {
    "text": "but not for any other type and so when I want to reuse them it's all built wrong",
    "start": "161069",
    "end": "166889"
  },
  {
    "text": "it's for the wrong types so at some point I think I need to go back to first",
    "start": "166889",
    "end": "175139"
  },
  {
    "text": "principles you know when things aren't working and you can't figure out why sometimes it's time back up and start",
    "start": "175139",
    "end": "181620"
  },
  {
    "text": "over again okay let's start with what's",
    "start": "181620",
    "end": "186659"
  },
  {
    "start": "186000",
    "end": "403000"
  },
  {
    "text": "a component anybody want to say what a component is anybody brave if you google",
    "start": "186659",
    "end": "197730"
  },
  {
    "text": "component software you find an enormous amount of literature on the topic",
    "start": "197730",
    "end": "203030"
  },
  {
    "text": "certainly not anything I can go over in a brief presentation like this so let's",
    "start": "203030",
    "end": "211680"
  },
  {
    "text": "talk a little bit about what I think of as a component there's lots and lots of",
    "start": "211680",
    "end": "218040"
  },
  {
    "text": "reusable code out there I mean C libraries Java libraries C++ libraries",
    "start": "218040",
    "end": "223919"
  },
  {
    "text": "and they are reusable and they work but I wouldn't really call them components",
    "start": "223919",
    "end": "230000"
  },
  {
    "text": "okay I would argue that a component follows a certain predefined interface",
    "start": "230000",
    "end": "238049"
  },
  {
    "text": "that conforms to and it must be built so that components can be replaced one",
    "start": "238049",
    "end": "247680"
  },
  {
    "text": "component can be pulled out another component can be pulled in the only way",
    "start": "247680",
    "end": "252959"
  },
  {
    "text": "that'll work is if the interfaces are adhered to the trouble with most",
    "start": "252959",
    "end": "259560"
  },
  {
    "text": "libraries especially like C libraries C++ libraries as each library lives in",
    "start": "259560",
    "end": "266940"
  },
  {
    "text": "its world they invent their own API they invent their own interfaces they're on",
    "start": "266940",
    "end": "272879"
  },
  {
    "text": "types for example with C++ for years and years and years until the STL caught on",
    "start": "272879",
    "end": "281810"
  },
  {
    "text": "everybody made their own string type who knows what I'm talking about it's you",
    "start": "281810",
    "end": "288300"
  },
  {
    "text": "know the first thing people did with C++ was they made their own string type and their library depended on their own",
    "start": "288300",
    "end": "294659"
  },
  {
    "text": "string type which means none of the libraries would interoperate with each other without some complicated",
    "start": "294659",
    "end": "299699"
  },
  {
    "text": "scaffolding to translate one string type to the next term string type this is not",
    "start": "299699",
    "end": "306650"
  },
  {
    "text": "component software",
    "start": "306650",
    "end": "310130"
  },
  {
    "text": "so what is a typical or basic program do",
    "start": "312919",
    "end": "320150"
  },
  {
    "text": "I would argue that it reads input it processes input then it writes the",
    "start": "320150",
    "end": "326419"
  },
  {
    "text": "output does anybody disagree with that remember most of your programs like that they read their input they do some",
    "start": "326419",
    "end": "332960"
  },
  {
    "text": "processing they write their output so",
    "start": "332960",
    "end": "340400"
  },
  {
    "text": "even if your program is an interactive program like a GUI app that doesn't really follow that model but it'll have",
    "start": "340400",
    "end": "348129"
  },
  {
    "text": "subsystems in it that do that take a bunch of data process it produce a",
    "start": "348129",
    "end": "353840"
  },
  {
    "text": "result sort of batch processing let's",
    "start": "353840",
    "end": "360919"
  },
  {
    "text": "write it in some pseudocode we have the source of the data goes to an algorithm",
    "start": "360919",
    "end": "366409"
  },
  {
    "text": "goes to a sink of data and we want to be able to compose our components so source",
    "start": "366409",
    "end": "374449"
  },
  {
    "text": "apply one algorithm take its output feed it into the next algorithm and the",
    "start": "374449",
    "end": "381080"
  },
  {
    "text": "result we call our sink that's where it",
    "start": "381080",
    "end": "386180"
  },
  {
    "text": "goes okay wherever we seen this before",
    "start": "386180",
    "end": "391419"
  },
  {
    "text": "of course answers obvious it's the UNIX files and the filters command-line",
    "start": "391419",
    "end": "399529"
  },
  {
    "text": "interface who's all familiar with that files and filters just about everybody in an incredibly successful model of",
    "start": "399529",
    "end": "409149"
  },
  {
    "start": "403000",
    "end": "470000"
  },
  {
    "text": "snap-together software I think it's the",
    "start": "409149",
    "end": "416000"
  },
  {
    "text": "reason why UNIX has persisted for so long it's found its way into the C",
    "start": "416000",
    "end": "424479"
  },
  {
    "text": "ecosystem or the C view of things as the file interface files are the sources and",
    "start": "424479",
    "end": "432319"
  },
  {
    "text": "the sinks the algorithms take the role of being the filters pipes connect them",
    "start": "432319",
    "end": "441169"
  },
  {
    "text": "and it's so pervasive and so successful that people even",
    "start": "441169",
    "end": "446760"
  },
  {
    "text": "invent pseudo filesystems in order to work with that software and here's a",
    "start": "446760",
    "end": "452850"
  },
  {
    "text": "link to an example of pseudo file systems for Linux so there's things that",
    "start": "452850",
    "end": "458460"
  },
  {
    "text": "never hit a file but yet they have a file interface to them well it's not",
    "start": "458460",
    "end": "469710"
  },
  {
    "text": "perfect it doesn't really get us there for one reason it evolved it was kind of",
    "start": "469710",
    "end": "476070"
  },
  {
    "start": "470000",
    "end": "713000"
  },
  {
    "text": "discovered and evolved over time and as proof of it having evolved check out the",
    "start": "476070",
    "end": "481740"
  },
  {
    "text": "AYGO control interface which is when something didn't work right quite right",
    "start": "481740",
    "end": "487610"
  },
  {
    "text": "with them people would dump it into some Cluj in i/o control and I can Oh control",
    "start": "487610",
    "end": "495510"
  },
  {
    "text": "as infamous for being a gigantic Cluj it's just kind of a grab bag okay",
    "start": "495510",
    "end": "503400"
  },
  {
    "text": "another problem with the file interface is your data is viewed as a stream of",
    "start": "503400",
    "end": "509370"
  },
  {
    "text": "bytes you can't go forward in it well you can go forward as you read it but",
    "start": "509370",
    "end": "514800"
  },
  {
    "text": "you can't go backwards you don't have random access to it and it's a stream of",
    "start": "514800",
    "end": "520289"
  },
  {
    "text": "bytes it's not a stream of structured data or any other forms of data but you",
    "start": "520290",
    "end": "529140"
  },
  {
    "text": "know and that a stream is not always the best the best source of input for an",
    "start": "529140",
    "end": "537150"
  },
  {
    "text": "algorithm for an example an algorithm may need an array and a stream is not an",
    "start": "537150",
    "end": "543930"
  },
  {
    "text": "array but it shows what a component interface can be and what a component",
    "start": "543930",
    "end": "550830"
  },
  {
    "text": "interface can deliver for you for example with the files and filters the",
    "start": "550830",
    "end": "561810"
  },
  {
    "text": "idea in Linux is you have the series of things like grep and sort and top and",
    "start": "561810",
    "end": "568830"
  },
  {
    "text": "then they all work as filters and anybody who writes those filters doesn't",
    "start": "568830",
    "end": "575490"
  },
  {
    "text": "talk to anybody else who writes filters but they all conform to the interface so they can all be",
    "start": "575490",
    "end": "580710"
  },
  {
    "text": "snap together and plugged in together in any order separated with the vertical",
    "start": "580710",
    "end": "586529"
  },
  {
    "text": "bars or the pipe suit symbol so let's go",
    "start": "586529",
    "end": "592950"
  },
  {
    "text": "back and look at sort of a canonical example of what typical code I write",
    "start": "592950",
    "end": "599399"
  },
  {
    "text": "looks like it its input comes in here we're reading a pattern out of the",
    "start": "599399",
    "end": "606149"
  },
  {
    "text": "arguments while we're not at the end of the file we read a line if it matches",
    "start": "606149",
    "end": "611490"
  },
  {
    "text": "our pattern we write a line okay who writes code like this loops loops loops",
    "start": "611490",
    "end": "619529"
  },
  {
    "text": "loops loops it's this I'll code it's",
    "start": "619529",
    "end": "624649"
  },
  {
    "text": "deeply embedded in my brain when I think of writing code I always think in terms",
    "start": "624649",
    "end": "631470"
  },
  {
    "text": "of loops like that and Jude doesn't look",
    "start": "631470",
    "end": "636660"
  },
  {
    "text": "really much at all like source going to algorithm going to sink in fact it looks",
    "start": "636660",
    "end": "643110"
  },
  {
    "text": "like sort of slowly come to the realization that it looks like this it",
    "start": "643110",
    "end": "651540"
  },
  {
    "text": "looks like a maelstrom or a swirl your",
    "start": "651540",
    "end": "656970"
  },
  {
    "text": "data comes in at the top and it starts going round and round and round and round and round and eventually it sort",
    "start": "656970",
    "end": "663300"
  },
  {
    "text": "of goes out the center or in the middle so how do you encapsulate this stuff do",
    "start": "663300",
    "end": "672839"
  },
  {
    "text": "you draw a square there and say well I'm going to encapsulate that part of the you know that doesn't work if I draw the",
    "start": "672839",
    "end": "679920"
  },
  {
    "text": "square like this well I'm in capture I'm capturing my data sink in there and if I",
    "start": "679920",
    "end": "687420"
  },
  {
    "text": "want another algorithm to plug into there somehow I've got to inserted it in the middle of this this whirlpool and I",
    "start": "687420",
    "end": "698120"
  },
  {
    "text": "really kind of think this is why my codes not reusable it's really hard to",
    "start": "698120",
    "end": "703380"
  },
  {
    "text": "reuse loops because they just don't you can't cut pieces out of the loop what I",
    "start": "703380",
    "end": "710970"
  },
  {
    "text": "wanted to look like is the sum line this is a world war two assembly",
    "start": "710970",
    "end": "718410"
  },
  {
    "start": "713000",
    "end": "813000"
  },
  {
    "text": "line for a bomber aircraft and what happens is the parts start at one end and the assembly is moved along the line",
    "start": "718410",
    "end": "727410"
  },
  {
    "text": "and at each station something happens to it something happens to it something happens to it and then at the end of the",
    "start": "727410",
    "end": "733890"
  },
  {
    "text": "assembly line a completed airplane rolls off the end and this is extremely",
    "start": "733890",
    "end": "738930"
  },
  {
    "text": "effective for manufacturing why can it work for software you know they don't",
    "start": "738930",
    "end": "746149"
  },
  {
    "text": "send them around in a circle I would like my code to look like this",
    "start": "746149",
    "end": "754730"
  },
  {
    "text": "my arguments come in I get my string pattern out and I go from standard in I",
    "start": "754730",
    "end": "760890"
  },
  {
    "text": "want to read it by lines I want to do some matches and I want to write to standard out notice no loops",
    "start": "760890",
    "end": "772580"
  },
  {
    "text": "has anybody seen code like this before yes where siege are you functional",
    "start": "775550",
    "end": "785339"
  },
  {
    "text": "programming awk all right what I can't",
    "start": "785339",
    "end": "794610"
  },
  {
    "text": "understand you shell okay",
    "start": "794610",
    "end": "800899"
  },
  {
    "text": "okay so we've given up on the C design which is successful but limited and",
    "start": "801770",
    "end": "807570"
  },
  {
    "text": "let's look at what the next design look like and that was C++ ooh",
    "start": "807570",
    "end": "813920"
  },
  {
    "start": "813000",
    "end": "1012000"
  },
  {
    "text": "object-oriented programming C++ was originally designed as C with classes",
    "start": "813920",
    "end": "819570"
  },
  {
    "text": "and it was to enable object-oriented programming but for some reason it never",
    "start": "819570",
    "end": "826920"
  },
  {
    "text": "resulted in better component programming in fact they came up with eventually",
    "start": "826920",
    "end": "834750"
  },
  {
    "text": "with i/o streams it started looking a little bit like source algorithm the",
    "start": "834750",
    "end": "840570"
  },
  {
    "text": "sync and it did this by overloading the angle bracket operator but for some",
    "start": "840570",
    "end": "846470"
  },
  {
    "text": "incomprehensible reason it never went beyond reading and writing files and",
    "start": "846470",
    "end": "852990"
  },
  {
    "text": "just kind of sat there it was just kind of a replacement for C's way of reading and writing files it didn't really go",
    "start": "852990",
    "end": "859650"
  },
  {
    "text": "beyond that and of course there are lots",
    "start": "859650",
    "end": "865080"
  },
  {
    "text": "of successful C++ libraries but they exhibited the usual problems like I mentioned before of they didn't connect",
    "start": "865080",
    "end": "872160"
  },
  {
    "text": "with each other everyone invented their own string class everyone invented their own memory",
    "start": "872160",
    "end": "877860"
  },
  {
    "text": "allocation scheme and none of them would really connect to each other and then",
    "start": "877860",
    "end": "886020"
  },
  {
    "text": "came along Alexander Stepanov who invented the STL and with that he",
    "start": "886020",
    "end": "892260"
  },
  {
    "text": "single-handedly revived C++ you know put the pedals on and revolutionize it with",
    "start": "892260",
    "end": "898650"
  },
  {
    "text": "the standard tempered light standard template library which at last we have",
    "start": "898650",
    "end": "905370"
  },
  {
    "text": "more than just files we have algorithms we have a common interface and best of",
    "start": "905370",
    "end": "911610"
  },
  {
    "text": "all it compiled a highly efficient code so this was a huge advance for us native",
    "start": "911610",
    "end": "919280"
  },
  {
    "text": "programming language guys not quite",
    "start": "919280",
    "end": "925380"
  },
  {
    "text": "there either we still seem to be programming with loops loops loops loops loops remember",
    "start": "925380",
    "end": "932930"
  },
  {
    "text": "we wanted we have we have some components now but we're still writing loops eventually you know some of the",
    "start": "932930",
    "end": "943430"
  },
  {
    "text": "loops got turned into STD callin for each and transform but it turns out",
    "start": "943430",
    "end": "949780"
  },
  {
    "text": "they're not real composable because iterators are a generalization of a",
    "start": "949780",
    "end": "958670"
  },
  {
    "text": "pointer okay the problem with a and you increment a pointer to get to the next",
    "start": "958670",
    "end": "965830"
  },
  {
    "text": "piece of data the problem with that is where's the end of your data you don't",
    "start": "965830",
    "end": "972770"
  },
  {
    "text": "know you need another piece of information and tell you when to stop",
    "start": "972770",
    "end": "978230"
  },
  {
    "text": "iterating so what that interferes with",
    "start": "978230",
    "end": "983480"
  },
  {
    "text": "has any kind of come any kind of composition of iterators and algorithms",
    "start": "983480",
    "end": "988640"
  },
  {
    "text": "we can't compose them because there's this extra piece of data that's got to fit in there somewhere that tells us",
    "start": "988640",
    "end": "996730"
  },
  {
    "text": "where the beginning of our iteration is and where the end of it is how do we",
    "start": "996730",
    "end": "1002740"
  },
  {
    "text": "know when we're done so let's go back to",
    "start": "1002740",
    "end": "1011020"
  },
  {
    "text": "the drawing board again we need a new design what are examples of sources",
    "start": "1011020",
    "end": "1019690"
  },
  {
    "start": "1012000",
    "end": "1152000"
  },
  {
    "text": "well of course streams which are is an old file interface another source of",
    "start": "1019690",
    "end": "1025000"
  },
  {
    "text": "data would be containers container could be an array it could be a hash table it",
    "start": "1025000",
    "end": "1031420"
  },
  {
    "text": "could be a database it could be a bag it could be a set all kinds of you know the",
    "start": "1031420",
    "end": "1036520"
  },
  {
    "text": "classic data structures are all sources of data algorithms of course from",
    "start": "1036520",
    "end": "1044260"
  },
  {
    "text": "functional programming there's a filter map and reduce and then there's sort",
    "start": "1044260",
    "end": "1050340"
  },
  {
    "text": "which is an interesting one I'll get into later sinks",
    "start": "1050340",
    "end": "1057380"
  },
  {
    "text": "again sinks can write to files they can write to other containers or they can",
    "start": "1057380",
    "end": "1062419"
  },
  {
    "text": "produce a single value as the output like a checksum could be a sink because",
    "start": "1062419",
    "end": "1068390"
  },
  {
    "text": "it accepts all its data and at the end it produces a single value a checksum so",
    "start": "1068390",
    "end": "1076990"
  },
  {
    "text": "here's a list of some typical sources algorithms and sinks you can't get all",
    "start": "1076990",
    "end": "1086000"
  },
  {
    "text": "of these from the streaming interface because the algorithms sinks sinks",
    "start": "1086000",
    "end": "1092120"
  },
  {
    "text": "they're more than just files so the idea is I should be able to select the source",
    "start": "1092120",
    "end": "1099919"
  },
  {
    "text": "from column one algorithm from column two a sink from column three and it",
    "start": "1099919",
    "end": "1105860"
  },
  {
    "text": "should work not only that I should be",
    "start": "1105860",
    "end": "1111530"
  },
  {
    "text": "able to select any number of these algorithms stick them one after the",
    "start": "1111530",
    "end": "1116659"
  },
  {
    "text": "other and it should work so this is",
    "start": "1116659",
    "end": "1123799"
  },
  {
    "text": "where we want to get at with our component programming so have any of you",
    "start": "1123799",
    "end": "1131690"
  },
  {
    "text": "successfully done this in Java and C++",
    "start": "1131690",
    "end": "1136809"
  },
  {
    "text": "and C I haven't seen it okay so let's",
    "start": "1136809",
    "end": "1146000"
  },
  {
    "text": "sum up the requirements of the for the design that we were looking for we want",
    "start": "1146000",
    "end": "1152179"
  },
  {
    "start": "1152000",
    "end": "1496000"
  },
  {
    "text": "them to snap together we don't want to have to have scaffolding connecting all",
    "start": "1152179",
    "end": "1158210"
  },
  {
    "text": "our little bits and pieces or components together we want strong encapsulation support so our abstractions aren't",
    "start": "1158210",
    "end": "1164840"
  },
  {
    "text": "leaking or bleeding out and there are the surrounding code and the surrounding code is leading into our abstraction we",
    "start": "1164840",
    "end": "1172490"
  },
  {
    "text": "want to generate industrial quality efficient code if we don't generate industrial qualif industrial quality",
    "start": "1172490",
    "end": "1178730"
  },
  {
    "text": "code then the user is not going to use the components they're going to go back to using loops and you failed so we're",
    "start": "1178730",
    "end": "1185510"
  },
  {
    "text": "trying not to create a toy system or a something that only works in",
    "start": "1185510",
    "end": "1190760"
  },
  {
    "text": "tutorials and we want it to work well we want a natural syntax that flows from",
    "start": "1190760",
    "end": "1198710"
  },
  {
    "text": "left to right which is the way we read in the way we think about things we naturally think not in loops but in a",
    "start": "1198710",
    "end": "1205850"
  },
  {
    "text": "serial manner left to right we go this step this step this step like an assembly line and we want our code to",
    "start": "1205850",
    "end": "1211790"
  },
  {
    "text": "actually look like the way we think about it and the last thing is we want",
    "start": "1211790",
    "end": "1217730"
  },
  {
    "text": "it to work with types that we don't know about in advance because nobody wants to",
    "start": "1217730",
    "end": "1223460"
  },
  {
    "text": "rewrite theirs right a sort for characters and write another sort for integers and another sort for your",
    "start": "1223460",
    "end": "1229429"
  },
  {
    "text": "employee data type I should work generically so we should have called",
    "start": "1229429",
    "end": "1239150"
  },
  {
    "text": "them sinks our sources but we wound up calling them input ranges the D source",
    "start": "1239150",
    "end": "1246970"
  },
  {
    "text": "component is called an input range and what we're thinking of what is a simplest possible interface we can have",
    "start": "1246970",
    "end": "1256929"
  },
  {
    "text": "first we need to know is there data available is there any more data so",
    "start": "1256929",
    "end": "1266000"
  },
  {
    "text": "empty returns a boolean tells you there's more data reads the current",
    "start": "1266000",
    "end": "1272630"
  },
  {
    "text": "input datum is called front which sort of means the front of the data that's coming in E is our data type and we want",
    "start": "1272630",
    "end": "1282140"
  },
  {
    "text": "to advance to the next data which we call pop front doesn't return any value",
    "start": "1282140",
    "end": "1287780"
  },
  {
    "text": "so these two are properties this is a method and it's hard to imagine it being",
    "start": "1287780",
    "end": "1294169"
  },
  {
    "text": "any simpler than that yes",
    "start": "1294169",
    "end": "1299019"
  },
  {
    "text": "so the question is why not have pop front return bool and sort of combine",
    "start": "1302390",
    "end": "1308010"
  },
  {
    "text": "two operations in one we had a huge argument about that and we finally",
    "start": "1308010",
    "end": "1315090"
  },
  {
    "text": "decided it was best because it turns out that some input ranges are hard to get",
    "start": "1315090",
    "end": "1321840"
  },
  {
    "text": "them to combine those two in the one it turns out that it's more flexible if we",
    "start": "1321840",
    "end": "1326910"
  },
  {
    "text": "separate the operations into three separate things and if we tried to combine them okay so the gentleman there",
    "start": "1326910",
    "end": "1336720"
  },
  {
    "text": "said you know trying to determine if you've got more data in there should not",
    "start": "1336720",
    "end": "1341940"
  },
  {
    "text": "change the state well yes you can do it",
    "start": "1341940",
    "end": "1348030"
  },
  {
    "text": "those other ways but we decided to do it this way we I've been in these arguments",
    "start": "1348030",
    "end": "1354870"
  },
  {
    "text": "before we could spend all day arguing about the merits of but I don't think you really buy anything by trying to",
    "start": "1354870",
    "end": "1361200"
  },
  {
    "text": "combine these things because it really is three separate operations you want to do and so you might as well just make",
    "start": "1361200",
    "end": "1367470"
  },
  {
    "text": "them three separate operations all right",
    "start": "1367470",
    "end": "1374460"
  },
  {
    "text": "so the question is do you want a window on your data which contains maybe some predictable amount of data at the same",
    "start": "1374460",
    "end": "1381570"
  },
  {
    "text": "time that's something I think I can address in a future slide so I think",
    "start": "1381570",
    "end": "1387210"
  },
  {
    "text": "it's excellent question okay here's an important thing an input range is not a",
    "start": "1387210",
    "end": "1392850"
  },
  {
    "text": "tight it's a from the C++ land it's a concept concepts actually work in D and",
    "start": "1392850",
    "end": "1402840"
  },
  {
    "text": "they're actually fairly simple all the type has to do is have these three",
    "start": "1402840",
    "end": "1409080"
  },
  {
    "text": "primitives so we're not deriving from some interface type it's is sort of if",
    "start": "1409080",
    "end": "1416130"
  },
  {
    "text": "he's got these three primitives it's an input range and it's recognized as an input range okay here's a simple of",
    "start": "1416130",
    "end": "1428760"
  },
  {
    "text": "course it is a bit of a code but it reads characters from standard",
    "start": "1428760",
    "end": "1435220"
  },
  {
    "text": "and by character and we can start with front which returns the current",
    "start": "1435220",
    "end": "1442540"
  },
  {
    "text": "character pop front sets a flag saying I read my character and I need to read",
    "start": "1442540",
    "end": "1449020"
  },
  {
    "text": "more and then bool or empty checks to",
    "start": "1449020",
    "end": "1454030"
  },
  {
    "text": "see if well if we've got a buffer or",
    "start": "1454030",
    "end": "1459430"
  },
  {
    "text": "character already in the buffer if we don't we get one if we can't get one",
    "start": "1459430",
    "end": "1464950"
  },
  {
    "text": "because we were we hittin a file we empty returns true it no more otherwise",
    "start": "1464950",
    "end": "1472560"
  },
  {
    "text": "we have our little one character buffer we set the flag saying we've got data in",
    "start": "1472560",
    "end": "1478600"
  },
  {
    "text": "the buffer and return false meaning we've got more data so this is one of",
    "start": "1478600",
    "end": "1485740"
  },
  {
    "text": "the simplest input input ranges",
    "start": "1485740",
    "end": "1491820"
  },
  {
    "text": "so we're gonna reach from standard in and write to standard out and what would that look like well where we construct",
    "start": "1494780",
    "end": "1504570"
  },
  {
    "start": "1496000",
    "end": "1585000"
  },
  {
    "text": "an instance of that which is and here's our range our and our loop condition is",
    "start": "1504570",
    "end": "1512250"
  },
  {
    "text": "you know if we're not empty and our loop continuation is we get the next one and",
    "start": "1512250",
    "end": "1519330"
  },
  {
    "text": "here we're reading the front and writing it out to standard out so this is our",
    "start": "1519330",
    "end": "1525510"
  },
  {
    "text": "first step to building our component programming and of course we're not",
    "start": "1525510",
    "end": "1532230"
  },
  {
    "text": "there yet with a little compiler magic the for",
    "start": "1532230",
    "end": "1540930"
  },
  {
    "text": "loop becomes a for each loop and the compiler knows about front empty and pop",
    "start": "1540930",
    "end": "1548010"
  },
  {
    "text": "front and can build a loop for you if you use 4-h and so we're getting the characters out one by one and are",
    "start": "1548010",
    "end": "1554400"
  },
  {
    "text": "writing them to standard out and an interesting thing is look monotypes it",
    "start": "1554400",
    "end": "1560670"
  },
  {
    "text": "statically typed but we don't actually have to say what the types are the",
    "start": "1560670",
    "end": "1566670"
  },
  {
    "text": "compiler or the language figures out the types for you so that's streaming thing",
    "start": "1566670",
    "end": "1573750"
  },
  {
    "text": "and remember I said before that streaming was not adequate the file the",
    "start": "1573750",
    "end": "1578820"
  },
  {
    "text": "straightforward streaming file interface is not good enough for components so we introduced a more advanced input range",
    "start": "1578820",
    "end": "1586410"
  },
  {
    "start": "1585000",
    "end": "1640000"
  },
  {
    "text": "called a forward range and what it does is adds a property one more method makes",
    "start": "1586410",
    "end": "1591810"
  },
  {
    "text": "it a forward range actually one more property not method and that's safe and",
    "start": "1591810",
    "end": "1597210"
  },
  {
    "text": "what that does is it saves a it returns a new range which is a copy of the",
    "start": "1597210",
    "end": "1603890"
  },
  {
    "text": "position of the previous range so now",
    "start": "1603890",
    "end": "1609510"
  },
  {
    "text": "our original and our copy can traverse the range independently of each other",
    "start": "1609510",
    "end": "1614910"
  },
  {
    "text": "and the canonical example is a list a",
    "start": "1614910",
    "end": "1622110"
  },
  {
    "text": "singly linked list it's saving just means you know and",
    "start": "1622110",
    "end": "1627900"
  },
  {
    "text": "a pointer to the to the next node in the list and an algorithm like a merge sort",
    "start": "1627900",
    "end": "1635940"
  },
  {
    "text": "would use a forward range bi-directional",
    "start": "1635940",
    "end": "1641190"
  },
  {
    "start": "1640000",
    "end": "1691000"
  },
  {
    "text": "range a range that we can if we start at each end we can go like this with it",
    "start": "1641190",
    "end": "1648000"
  },
  {
    "text": "okay we can move toward the center and it adds two properties analogous to",
    "start": "1648000",
    "end": "1654630"
  },
  {
    "text": "front and pop front you get back and pop back which do the obvious things and the",
    "start": "1654630",
    "end": "1660990"
  },
  {
    "text": "canonical example of the bi-directional range is the doubly linked list you can't access the middle of a doubly",
    "start": "1660990",
    "end": "1667380"
  },
  {
    "text": "linked list directly but you can start at each end and work your way towards",
    "start": "1667380",
    "end": "1672480"
  },
  {
    "text": "the middle and doubly linked lists are not the only example of such utf-8 and",
    "start": "1672480",
    "end": "1678300"
  },
  {
    "text": "utf-16 are by de rich bi-directional and codings a more interesting one also is the",
    "start": "1678300",
    "end": "1689730"
  },
  {
    "text": "random access range random access range what this does is overloads the brackets",
    "start": "1689730",
    "end": "1697350"
  },
  {
    "start": "1691000",
    "end": "1936000"
  },
  {
    "text": "operator so you can index it and once you index it you need a couple more",
    "start": "1697350",
    "end": "1705210"
  },
  {
    "text": "things to make indexing work you need to know the length of your random access",
    "start": "1705210",
    "end": "1710790"
  },
  {
    "text": "range so that you're not going to go off the end of the range or you need a",
    "start": "1710790",
    "end": "1716880"
  },
  {
    "text": "forward range that is infinite and how does it know what that arrange is",
    "start": "1716880",
    "end": "1722100"
  },
  {
    "text": "infinite empty always returns false for an infinite range so who can give an",
    "start": "1722100",
    "end": "1732030"
  },
  {
    "text": "example of an infinite range and injures",
    "start": "1732030",
    "end": "1737220"
  },
  {
    "text": "are an infinite range that's right that's the probably the simplest example but you know something like the digits",
    "start": "1737220",
    "end": "1747690"
  },
  {
    "text": "of pi would be an infinite range although it's difficult to index that it is an infinite range",
    "start": "1747690",
    "end": "1754669"
  },
  {
    "text": "okay sinks sinks are really simple they all I do is I have a put method where you can stick something in that's it",
    "start": "1756940",
    "end": "1767700"
  },
  {
    "text": "pretty easy huh okay so let's write",
    "start": "1767790",
    "end": "1775240"
  },
  {
    "text": "ourselves an output range remember all we need is that darn put thing so here's our range which we've encapsulated as a",
    "start": "1775240",
    "end": "1782920"
  },
  {
    "text": "struck called STD out by care and put writes our character or def put C and if",
    "start": "1782920",
    "end": "1789790"
  },
  {
    "text": "we hit the end of the file we throw an exception saying there's some something went wrong with STD out all pretty",
    "start": "1789790",
    "end": "1799510"
  },
  {
    "text": "straightforward so recall our earlier loop example and now we replace it with",
    "start": "1799510",
    "end": "1806470"
  },
  {
    "text": "an output range and it just becomes here's our we declare our output range",
    "start": "1806470",
    "end": "1812110"
  },
  {
    "text": "and here we just insert characters into it and already it's improved over our",
    "start": "1812110",
    "end": "1819010"
  },
  {
    "text": "previous example because notice that we don't do any error checking here how many tool write C code without error",
    "start": "1819010",
    "end": "1824230"
  },
  {
    "text": "checking come on everybody write C code writes it without error check how many",
    "start": "1824230",
    "end": "1831430"
  },
  {
    "text": "people know that printf returns an error code saying if it succeeded or failed how many people check that error code",
    "start": "1831430",
    "end": "1838260"
  },
  {
    "text": "nobody yeah nobody checks the error codes in the C you can and you can tell",
    "start": "1838260",
    "end": "1848290"
  },
  {
    "text": "this by if you fill your disk up almost to the top and then write execute some you know Canonical's C code that writes",
    "start": "1848290",
    "end": "1855790"
  },
  {
    "text": "to standard out and let it run and see what happens does an error out it just silently fails but anyhow by",
    "start": "1855790",
    "end": "1863770"
  },
  {
    "text": "encapsulating it we've actually we're always going to detect that hair you",
    "start": "1863770",
    "end": "1869980"
  },
  {
    "text": "don't have to make it or ugly ugly Phi",
    "start": "1869980",
    "end": "1875230"
  },
  {
    "text": "your code was checks for it it just checks for the errors for you",
    "start": "1875230",
    "end": "1881370"
  },
  {
    "text": "so what this does is of course it copies it standard and the standard out and we",
    "start": "1881370",
    "end": "1888390"
  },
  {
    "text": "could call it copy our first algorithm",
    "start": "1888390",
    "end": "1893720"
  },
  {
    "text": "so our algorithm is copy and it takes ours input range and our output range",
    "start": "1893720",
    "end": "1899130"
  },
  {
    "text": "and it copies it so I think we're making",
    "start": "1899130",
    "end": "1904470"
  },
  {
    "text": "good progress we've got our first algorithm and our two ranges the problem",
    "start": "1904470",
    "end": "1911670"
  },
  {
    "text": "is is it's nailed down to those specific types so if we want to have use",
    "start": "1911670",
    "end": "1918090"
  },
  {
    "text": "different types in there we're back to copypasta we've got to copy this and",
    "start": "1918090",
    "end": "1924660"
  },
  {
    "text": "then edit the types up to change them so we're still not there yet",
    "start": "1924660",
    "end": "1931039"
  },
  {
    "text": "so this is how you write templates in D we call our source range a source or",
    "start": "1932750",
    "end": "1941520"
  },
  {
    "start": "1936000",
    "end": "2103000"
  },
  {
    "text": "generic type source generic type sync and we parameterize based on those types",
    "start": "1941520",
    "end": "1946770"
  },
  {
    "text": "and there's our algorithm but now we've",
    "start": "1946770",
    "end": "1952860"
  },
  {
    "text": "got the opposite problem our first iteration was too specific on what it",
    "start": "1952860",
    "end": "1958500"
  },
  {
    "text": "types at once our next iteration is too general it takes any types in there you",
    "start": "1958500",
    "end": "1964500"
  },
  {
    "text": "could pass it an int okay what's gonna happen if you pass an int type as your source any brave souls tell me okay any",
    "start": "1964500",
    "end": "1976440"
  },
  {
    "text": "C++ template programmers here what happens if you've passed the wrong type",
    "start": "1976440",
    "end": "1982230"
  },
  {
    "text": "to a template you get a horrible error message because what happens is it dies",
    "start": "1982230",
    "end": "1987870"
  },
  {
    "text": "sometime somewhere deep down in your implementation of the algorithm and you",
    "start": "1987870",
    "end": "1994080"
  },
  {
    "text": "wind up with an error message that appears to have absolutely nothing to do with what you're doing worse it may",
    "start": "1994080",
    "end": "2004910"
  },
  {
    "text": "actually compile and appear to work but yet not work",
    "start": "2004910",
    "end": "2010500"
  },
  {
    "text": "so what we want to do is add constraints constraints are these idea of",
    "start": "2010500",
    "end": "2015960"
  },
  {
    "text": "implementing a concept so here are to our two template type parameters and we",
    "start": "2015960",
    "end": "2024240"
  },
  {
    "text": "can this is called ace constraint and we go if this is an input range and the",
    "start": "2024240",
    "end": "2033659"
  },
  {
    "text": "sync is an output range and it has an element type that matches the element",
    "start": "2033659",
    "end": "2039150"
  },
  {
    "text": "type of our input range then the template will be instantiated and we will accept it so this is kind of what",
    "start": "2039150",
    "end": "2047909"
  },
  {
    "text": "makes input ranges and output ranges concepts indeed rather than inheritance",
    "start": "2047909",
    "end": "2053628"
  },
  {
    "text": "so we're not saying we're inheriting from a particular type what we're doing is we're testing to see if the type has",
    "start": "2053629",
    "end": "2060750"
  },
  {
    "text": "certain properties and that's what these library types do and how they work is",
    "start": "2060750",
    "end": "2067950"
  },
  {
    "text": "actually a whole nother presentation but that's not relevant here at the point is they do work so the reason we have the",
    "start": "2067950",
    "end": "2077460"
  },
  {
    "text": "sync here the C++ STL sync returns the",
    "start": "2077460",
    "end": "2084480"
  },
  {
    "text": "input range as its argument but it's not composable because you still need the",
    "start": "2084480",
    "end": "2089790"
  },
  {
    "text": "end of your data this by actually",
    "start": "2089790",
    "end": "2095490"
  },
  {
    "text": "returning the input range makes it composable because now we can copy one",
    "start": "2095490",
    "end": "2100830"
  },
  {
    "text": "in the next so a current status and step",
    "start": "2100830",
    "end": "2107220"
  },
  {
    "start": "2103000",
    "end": "2229000"
  },
  {
    "text": "by step we're trying to meet our requirements as we've declared our source range our sync range and we do",
    "start": "2107220",
    "end": "2112349"
  },
  {
    "text": "copy and we're not there yet we're getting close it's starting to look like what we want we want to add uniform",
    "start": "2112349",
    "end": "2121670"
  },
  {
    "text": "function call syntax what that is is nothing more than you take the first",
    "start": "2121670",
    "end": "2127740"
  },
  {
    "text": "argument and you stick it out in front of it that's exactly how member",
    "start": "2127740",
    "end": "2135089"
  },
  {
    "text": "functions work there's a hidden parameter which is the first parameter called the dis pointer or self reference",
    "start": "2135089",
    "end": "2142619"
  },
  {
    "text": "or something like that and you can usually stick it on the front well this idea UFC has generalizes",
    "start": "2142619",
    "end": "2151980"
  },
  {
    "text": "it so it works for other functions too you can pull the first parameter out and stick it on the front it's purely",
    "start": "2151980",
    "end": "2158330"
  },
  {
    "text": "syntactic sugar and what it enables you to do is write it like this we have",
    "start": "2158330",
    "end": "2165810"
  },
  {
    "text": "source copy sink so that's although it's not using the",
    "start": "2165810",
    "end": "2173220"
  },
  {
    "text": "arrows at least it's going left to right that's what we want it to look like okay",
    "start": "2173220",
    "end": "2181440"
  },
  {
    "text": "let's go into some a little more about algorithms as opposed to oh boy I think",
    "start": "2181440",
    "end": "2188910"
  },
  {
    "text": "we're running low on time so I will speed up okay filters everyone knows",
    "start": "2188910",
    "end": "2194610"
  },
  {
    "text": "what filters are from functional programming filters read their input and",
    "start": "2194610",
    "end": "2200490"
  },
  {
    "text": "make a selection based on a lambda and the ones that pass the selection go through so here we have an array we",
    "start": "2200490",
    "end": "2207870"
  },
  {
    "text": "select the ones less than three and print them out which is one and two maps",
    "start": "2207870",
    "end": "2214370"
  },
  {
    "text": "maps transform its input from one to the next so one two three four five we",
    "start": "2214370",
    "end": "2220620"
  },
  {
    "text": "squared them with a times a and this little program prints this reducers",
    "start": "2220620",
    "end": "2227810"
  },
  {
    "text": "produce a single value in this case we want to sum them all up so a plus B the",
    "start": "2227810",
    "end": "2234960"
  },
  {
    "start": "2229000",
    "end": "2317000"
  },
  {
    "text": "result of one plus two plus three plus four plus five is fifteen so let's put",
    "start": "2234960",
    "end": "2242010"
  },
  {
    "text": "these bad boys together and see what it looks like what we want to do is this",
    "start": "2242010",
    "end": "2247350"
  },
  {
    "text": "little program reads from standard in we",
    "start": "2247350",
    "end": "2253800"
  },
  {
    "text": "want to keep our line terminators in there so we want to read our standard in by line and then we want to map it we",
    "start": "2253800",
    "end": "2263670"
  },
  {
    "text": "want to because reading from standard in uses a buffer and keeps reusing its",
    "start": "2263670",
    "end": "2268740"
  },
  {
    "text": "buffer we need to make copies of the data because byline is going to reroute",
    "start": "2268740",
    "end": "2274530"
  },
  {
    "text": "use this buffer so this man just makes a copy of it and its output",
    "start": "2274530",
    "end": "2281790"
  },
  {
    "text": "is fed into array which turns it into an array it assembles all those lines into",
    "start": "2281790",
    "end": "2287310"
  },
  {
    "text": "an array of them then we sort them using quicksort and then we take the result",
    "start": "2287310",
    "end": "2293910"
  },
  {
    "text": "and we copy it to standard out using locking text writer what locking text writer does is because writing a",
    "start": "2293910",
    "end": "2300900"
  },
  {
    "text": "standard out can be done by any thread you have to lock standard out while you",
    "start": "2300900",
    "end": "2305910"
  },
  {
    "text": "write to it otherwise you get the output from all your threads all interleaved and erratic ways so that's what this",
    "start": "2305910",
    "end": "2313770"
  },
  {
    "text": "does language features of D that are",
    "start": "2313770",
    "end": "2319650"
  },
  {
    "start": "2317000",
    "end": "2691000"
  },
  {
    "text": "needed to make this all work need exception handling for errors not error codes I don't even really know how",
    "start": "2319650",
    "end": "2327480"
  },
  {
    "text": "this would work how this would look with error codes because certainly it would I think it would turn out to be rather",
    "start": "2327480",
    "end": "2332940"
  },
  {
    "text": "ugly you need generic functions you need template constraints to implement the",
    "start": "2332940",
    "end": "2338280"
  },
  {
    "text": "concept idea we need uniform function calls syntax in order to make it look",
    "start": "2338280",
    "end": "2344310"
  },
  {
    "text": "you have that left to right locally desire I already talked about them being",
    "start": "2344310",
    "end": "2350370"
  },
  {
    "text": "concepts not types the language needs to support inlining customization and",
    "start": "2350370",
    "end": "2357710"
  },
  {
    "text": "optimization and all this is necessary in order to have high performance",
    "start": "2357710",
    "end": "2363140"
  },
  {
    "text": "results specialization you can write",
    "start": "2363140",
    "end": "2368400"
  },
  {
    "text": "specialized versions of your algorithms and the compiler will pick one that matches your data types so if you have",
    "start": "2368400",
    "end": "2376470"
  },
  {
    "text": "specialized sorts for various different kinds of data this will work with that",
    "start": "2376470",
    "end": "2382110"
  },
  {
    "text": "type deduction if you notice no types appear anywhere in there the compiler",
    "start": "2382110",
    "end": "2388920"
  },
  {
    "text": "deduces the types in this case it pretty much deduces them all because it knows that standard and returns characters so",
    "start": "2388920",
    "end": "2395730"
  },
  {
    "text": "that influences everything else following on as dealing with characters coming in and tuples although I didn't",
    "start": "2395730",
    "end": "2404940"
  },
  {
    "text": "have an example of it algorithms and filters and stuff can",
    "start": "2404940",
    "end": "2410940"
  },
  {
    "text": "actually moulton do multiple things at the same time on a single pass over the",
    "start": "2410940",
    "end": "2416010"
  },
  {
    "text": "data and then return a result as a tuple so it's nice to have tuples in the language to do it",
    "start": "2416010",
    "end": "2422630"
  },
  {
    "text": "okay conclusion components are a way to",
    "start": "2422630",
    "end": "2429020"
  },
  {
    "text": "make code reusable trying to get them to",
    "start": "2429020",
    "end": "2436290"
  },
  {
    "text": "work it's a combination of conventions and language support for them lots of",
    "start": "2436290",
    "end": "2442950"
  },
  {
    "text": "advanced features of D come together to get components to work I don't know of",
    "start": "2442950",
    "end": "2448050"
  },
  {
    "text": "another language with this combination of features so if you do have want to make components work in there I don't",
    "start": "2448050",
    "end": "2453750"
  },
  {
    "text": "think is going to work as well and it builds on the success of previous",
    "start": "2453750",
    "end": "2458910"
  },
  {
    "text": "component models which are files and filters streams and the standard",
    "start": "2458910",
    "end": "2464670"
  },
  {
    "text": "template library so there are two other",
    "start": "2464670",
    "end": "2471030"
  },
  {
    "text": "component models in wide use one is the functional programming idea and the",
    "start": "2471030",
    "end": "2477180"
  },
  {
    "text": "functional programming language is typically how do they connect the",
    "start": "2477180",
    "end": "2483980"
  },
  {
    "text": "sources algorithm the sinks who's got ideas sir using lists that's right they",
    "start": "2483980",
    "end": "2492840"
  },
  {
    "text": "connect what they do is they have it everything is represented as a list and",
    "start": "2492840",
    "end": "2498720"
  },
  {
    "text": "so that's how everything connects up as a list and the problem comes in when you",
    "start": "2498720",
    "end": "2506550"
  },
  {
    "text": "have algorithms that don't really perform very well on a list like a quicksort so a better component design",
    "start": "2506550",
    "end": "2514830"
  },
  {
    "text": "is one that enables the component builder to write a data structure that",
    "start": "2514830",
    "end": "2521060"
  },
  {
    "text": "more appropriately matches his data than just trying to force fit everything into",
    "start": "2521060",
    "end": "2528330"
  },
  {
    "text": "being a list the other component model in wide use uses virtual functions",
    "start": "2528330",
    "end": "2536480"
  },
  {
    "text": "you know like comm programming and things like that and that has two serious drawbacks one",
    "start": "2536480",
    "end": "2544530"
  },
  {
    "text": "is every iteration through it you're calling virtual functions which on",
    "start": "2544530",
    "end": "2549960"
  },
  {
    "text": "modern architectures is slow now it's possible with a sufficiently smart",
    "start": "2549960",
    "end": "2556260"
  },
  {
    "text": "optimizer you can fold out all those virtual functions or D virtualized and",
    "start": "2556260",
    "end": "2563160"
  },
  {
    "text": "inline them but not many languages are",
    "start": "2563160",
    "end": "2568500"
  },
  {
    "text": "sufficiently smart to do that and the other difficulty with them is you tend to not have control over your data",
    "start": "2568500",
    "end": "2575130"
  },
  {
    "text": "layout and if you're writing high-performance code and today's processors which need to optimize for",
    "start": "2575130",
    "end": "2582270"
  },
  {
    "text": "memory cache lines and things like that you really want to closely control how your data is laid out and the interface",
    "start": "2582270",
    "end": "2591660"
  },
  {
    "text": "designs the older ones generally preclude you from doing that so",
    "start": "2591660",
    "end": "2597810"
  },
  {
    "text": "questions yes sir oh I see what is the",
    "start": "2597810",
    "end": "2606240"
  },
  {
    "text": "output of the filter then the output of the filter is another input range ah",
    "start": "2606240",
    "end": "2612140"
  },
  {
    "text": "that is an excellent question the excellent question is you know this is a",
    "start": "2612140",
    "end": "2617820"
  },
  {
    "text": "range coming out do you get any output out of the filter until it's read all the input or do you get it element by",
    "start": "2617820",
    "end": "2624000"
  },
  {
    "text": "element okay and I would characterize that is it lazy or is it eager and the",
    "start": "2624000",
    "end": "2629700"
  },
  {
    "text": "answer is it's either you can do it either way so one of the neat things",
    "start": "2629700",
    "end": "2634860"
  },
  {
    "text": "about component programming and B is I can replace an eager algorithm with a",
    "start": "2634860",
    "end": "2641340"
  },
  {
    "text": "lazy one and vice versa all without just changing the name of the component I",
    "start": "2641340",
    "end": "2647640"
  },
  {
    "text": "plug in there so in fact I've often done that my first iteration of a component",
    "start": "2647640",
    "end": "2652830"
  },
  {
    "text": "actually usually is eager because it's easier to write an eager one and later",
    "start": "2652830",
    "end": "2659040"
  },
  {
    "text": "on if I find I'm using it a lot I'll improve it by making it a lazy one and",
    "start": "2659040",
    "end": "2664050"
  },
  {
    "text": "an interesting thing about lazy ones is lazy ones open up the possibility of doing things in parallel so although",
    "start": "2664050",
    "end": "2673050"
  },
  {
    "text": "that hasn't done yet with this stuff the opportunity is there to actually paralyze things",
    "start": "2673050",
    "end": "2681590"
  }
]