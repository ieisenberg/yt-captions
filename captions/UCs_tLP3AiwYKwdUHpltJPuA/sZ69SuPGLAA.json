[
  {
    "text": "[Music] welcome to the go-to podcast in this",
    "start": "260",
    "end": "7319"
  },
  {
    "text": "episode Sasha Urich author of elixir in action and Eric shun managing director",
    "start": "7319",
    "end": "13160"
  },
  {
    "text": "of llang solutions nordics explore the key benefits and best practices of functional programming language",
    "start": "13160",
    "end": "21520"
  },
  {
    "text": "Elixir created for developers by developers goto gathers the best Minds",
    "start": "23039",
    "end": "28160"
  },
  {
    "text": "in the software Community stay up to date with the latest in Tech through goto's top rated events held online and",
    "start": "28160",
    "end": "34840"
  },
  {
    "text": "in person in Chicago Amsterdam and Copenhagen and by subscribing to the",
    "start": "34840",
    "end": "39879"
  },
  {
    "text": "goto conferences YouTube channel where you can find thousands more highquality de talks learn more at gpa.",
    "start": "39879",
    "end": "49440"
  },
  {
    "text": "Tech we kicked off the conversation by asking Sasha what is",
    "start": "50440",
    "end": "56000"
  },
  {
    "text": "[Music] elixir so elixir here is a programming",
    "start": "56000",
    "end": "61559"
  },
  {
    "text": "language uh in theory you could say that it's a general purpose programming language but uh in my personal view it",
    "start": "61559",
    "end": "67680"
  },
  {
    "text": "has like it's a particular sweet spot of what kind of programs can you write with",
    "start": "67680",
    "end": "72880"
  },
  {
    "text": "uh with Elixir and uh such programs are what I call software systems and by that",
    "start": "72880",
    "end": "78680"
  },
  {
    "text": "I mean uh any kind of program that runs on the backend side of thing any kind of a server uh server side program such as",
    "start": "78680",
    "end": "85360"
  },
  {
    "text": "a web server but also for example say a database or a message cu",
    "start": "85360",
    "end": "90560"
  },
  {
    "text": "uh and uh what is particular uh for software systems compared to other types of programs is that once you put them",
    "start": "90560",
    "end": "97360"
  },
  {
    "text": "into production you know you start them for the very first time in production they have to be running for a long",
    "start": "97360",
    "end": "102840"
  },
  {
    "text": "period of time constantly continuously for a long amount of time like a couple of years or maybe even a couple of",
    "start": "102840",
    "end": "108240"
  },
  {
    "text": "decades and during this period you don't really want them to go down because that essentially means that uh the system is",
    "start": "108240",
    "end": "114040"
  },
  {
    "text": "not providing any service at all another particular uh property of a software system is that at any point in time it's",
    "start": "114040",
    "end": "120079"
  },
  {
    "text": "is doing a bunch of different things a bunch of different activities are happening within the system like say all",
    "start": "120079",
    "end": "125960"
  },
  {
    "text": "of us are making requests to a web server and each request by a different person is its own separate activity uh",
    "start": "125960",
    "end": "132840"
  },
  {
    "text": "but beyond just uh handling requests a system has to do other things like say run background jobs or periodical jobs",
    "start": "132840",
    "end": "140080"
  },
  {
    "text": "um it might need to manage some kind of an inmemory State such as cash for example it might need to uh do some uh",
    "start": "140080",
    "end": "147440"
  },
  {
    "text": "load control such as applying back pressure or rate limiting so a lot of stuff is happening just beyond plain",
    "start": "147440",
    "end": "153360"
  },
  {
    "text": "request responding and uh what's interesting is that these activities are mostly mutually either very Loosely",
    "start": "153360",
    "end": "160200"
  },
  {
    "text": "dependent or in many cases even completely independent like say your request and my request are typically you",
    "start": "160200",
    "end": "165920"
  },
  {
    "text": "know completely unrelated and what this means is that in a software system uh",
    "start": "165920",
    "end": "171159"
  },
  {
    "text": "the the the semantics of success are not binary you have like degrees of success",
    "start": "171159",
    "end": "176440"
  },
  {
    "text": "which is not true for every type of program like if you take say a compiler or typically any kind of a command line",
    "start": "176440",
    "end": "182120"
  },
  {
    "text": "tool you know these programs get some input they do some processing they produce the output and they can either",
    "start": "182120",
    "end": "187239"
  },
  {
    "text": "succeed or fail there is nothing in between uh but for software systems you have this uh these degrees of uh success",
    "start": "187239",
    "end": "194640"
  },
  {
    "text": "so like of course ideally uh we want uh the system to always work for everyone",
    "start": "194640",
    "end": "200519"
  },
  {
    "text": "but clearly this is not possible uh because I mean ultimately we're humans and we're going to produce some bugs and",
    "start": "200519",
    "end": "206080"
  },
  {
    "text": "some things will go wrong and even if we are able to write perfect soft this software runs on some Hardware which",
    "start": "206080",
    "end": "211519"
  },
  {
    "text": "will occasionally fail uh typically in many systems we depend on external stuff",
    "start": "211519",
    "end": "216720"
  },
  {
    "text": "not developed by us like say external database or third party services like say payment Gateway for example um so",
    "start": "216720",
    "end": "224000"
  },
  {
    "text": "these things might fall and it's completely out of or might fail right and that's completely out of our control",
    "start": "224000",
    "end": "229159"
  },
  {
    "text": "so things will go wrong uh but because there is a non-binary idea of success we",
    "start": "229159",
    "end": "234439"
  },
  {
    "text": "we can implement we can capitalize on this and implement the system in a way that it's uh provid as much of the",
    "start": "234439",
    "end": "240319"
  },
  {
    "text": "service as possible at any point in time even when something go wrong which is better than you know providing nothing",
    "start": "240319",
    "end": "246040"
  },
  {
    "text": "and so this is a very particular challenge for any kind of a software system and this is what I what I like to call uh what for me is high availability",
    "start": "246040",
    "end": "253400"
  },
  {
    "text": "it's not about you know chase chasing some mythical amount of nines of up time it's about providing as much of the",
    "start": "253400",
    "end": "258680"
  },
  {
    "text": "service as possible for our users you know and uh also of course the system",
    "start": "258680",
    "end": "264120"
  },
  {
    "text": "should be able to automatically detect when something goes wrong and recover automatically from that failure as soon",
    "start": "264120",
    "end": "270240"
  },
  {
    "text": "as possible given the circumstances um so those are the challenges of software system and uh",
    "start": "270240",
    "end": "277360"
  },
  {
    "text": "again they they are really applied to any kind of a software system regardless of the particular business domain or",
    "start": "277360",
    "end": "282720"
  },
  {
    "text": "even scale even in smaller systems and simple systems uh you still want your",
    "start": "282720",
    "end": "287800"
  },
  {
    "text": "system to be mostly up and running and providing as much of the service now Elixir uh as a language gives us tools",
    "start": "287800",
    "end": "294560"
  },
  {
    "text": "to uh address those challenges uh gives us you know like basic building blocks very simple in their nature but very",
    "start": "294560",
    "end": "301360"
  },
  {
    "text": "powerful and flexible to approach the challenge of high availability in a systematical uh fashion um now I want to",
    "start": "301360",
    "end": "309240"
  },
  {
    "text": "say that Elixir is not the only such language available uh for this job uh there are a couple of other languages",
    "start": "309240",
    "end": "315120"
  },
  {
    "text": "like for example erlang or a Lis for erlang or gleam as an example of a newer",
    "start": "315120",
    "end": "320880"
  },
  {
    "text": "and a strongly typed language and what ties all these languages together is the fact that they share the same runtime",
    "start": "320880",
    "end": "327840"
  },
  {
    "text": "which is called beam and this is the name of the erlang virtual machine originally designed or written for uh",
    "start": "327840",
    "end": "334120"
  },
  {
    "text": "the erlan programming language and now you know with time we have a bunch of other newer languages built on top of uh",
    "start": "334120",
    "end": "340840"
  },
  {
    "text": "beam and beam is really the secret Source here which uh allows this story to happen which allows us to build uh",
    "start": "340840",
    "end": "347240"
  },
  {
    "text": "highly available systems so Sasha speaking of the beam here I mean that's that's the Elixir virtual machine how do",
    "start": "347240",
    "end": "353919"
  },
  {
    "text": "you say how would you say that compares to to other virtual machines that people may be more more familiar with like the",
    "start": "353919",
    "end": "360240"
  },
  {
    "text": "the Java virtual machine the jvm for instance yeah so uh what I personally",
    "start": "360240",
    "end": "365360"
  },
  {
    "text": "find about beam is that it really has a strong focus on what it wants to do and this is to power the software systems",
    "start": "365360",
    "end": "371800"
  },
  {
    "text": "highly available uh long running programs which should ideally uh never fail never go down completely and uh",
    "start": "371800",
    "end": "378319"
  },
  {
    "text": "beam has been built from the ground up from the day one you know even day minus one if you will before it didn't even",
    "start": "378319",
    "end": "383440"
  },
  {
    "text": "exist there was a lot of thought put into it you know how to build such a runtime and so build provides many",
    "start": "383440",
    "end": "390039"
  },
  {
    "text": "things at the runtime layer which uh other runtimes typically do not uh let me briefly explain how how how it works",
    "start": "390039",
    "end": "396759"
  },
  {
    "text": "on beam so it's going to be clearer so um essentially the way it works is like when you build your program in a beam",
    "start": "396759",
    "end": "402160"
  },
  {
    "text": "language such as air or or Lang or other languages uh you will start your program and the single operating system process",
    "start": "402160",
    "end": "408720"
  },
  {
    "text": "is started and this is the instance of beam where uh our program is running if I run five beam programs I'm going to",
    "start": "408720",
    "end": "414639"
  },
  {
    "text": "have five of those uh instances five OS processes now within a single uh beam",
    "start": "414639",
    "end": "419759"
  },
  {
    "text": "instance uh we can start many uh small lightweight independent programs which",
    "start": "419759",
    "end": "425120"
  },
  {
    "text": "we call processes so just to clarify process is not an OS process OS process is one beam instance and then within a",
    "start": "425120",
    "end": "431479"
  },
  {
    "text": "single beam instance you can have a bunch of these small processes and when I say a bunch I really mean like a large",
    "start": "431479",
    "end": "436840"
  },
  {
    "text": "number like hundreds of thousands millions up to I think around 100 million uh processes per single beam",
    "start": "436840",
    "end": "443199"
  },
  {
    "text": "instance now uh these uh these processes these programs are completely isolated",
    "start": "443199",
    "end": "450360"
  },
  {
    "text": "uh from each other uh so they share no memory at all uh they have their own",
    "start": "450360",
    "end": "455520"
  },
  {
    "text": "separate memory space uh and they can only communicate through uh sending themselves messages which is also known",
    "start": "455520",
    "end": "461479"
  },
  {
    "text": "as message passing concurrency and uh they are completely isolated from each other so like if a single process",
    "start": "461479",
    "end": "467280"
  },
  {
    "text": "crashes if that single Small Program crashes all the other processes in the system are still up and running uh so",
    "start": "467280",
    "end": "473919"
  },
  {
    "text": "they will not fail and this crash can be detected and these are like the basic foundational uh stuff that we get at the",
    "start": "473919",
    "end": "480080"
  },
  {
    "text": "beam level now uh what this means is uh basically I like to sometimes say that",
    "start": "480080",
    "end": "486080"
  },
  {
    "text": "like we have uh support for microservices at least some parts of microservices directly at the runtime",
    "start": "486080",
    "end": "491520"
  },
  {
    "text": "layer and therefore directly at the language level we can uh do stuff for for which in other languages you have to",
    "start": "491520",
    "end": "497319"
  },
  {
    "text": "fall back to the OS level and run a bunch of different OS processes and different components and orchestrate",
    "start": "497319",
    "end": "503280"
  },
  {
    "text": "them through some uh service manager and whatnot you can do a lot of that stuff directly in a beam language such as",
    "start": "503280",
    "end": "509800"
  },
  {
    "text": "Elixir um and so the idea of building a fault tolerant and highly available system is uh like in its basic form it's",
    "start": "509800",
    "end": "516159"
  },
  {
    "text": "like very simple to me uh like let's say a system has to do this huge chunk huge amount of job you know everything the",
    "start": "516159",
    "end": "521959"
  },
  {
    "text": "system has to do like it's like some huge big square if you take this big square and somehow strategically split",
    "start": "521959",
    "end": "528000"
  },
  {
    "text": "it into a small number of independent or Loosely dependent programs then suddenly",
    "start": "528000",
    "end": "533080"
  },
  {
    "text": "no one is too big to fail right and so if you experience some sort of an error in a particular part of the system you",
    "start": "533080",
    "end": "540120"
  },
  {
    "text": "know like maybe there is some division by zero square root of minus one something unexpected happens uh still",
    "start": "540120",
    "end": "546120"
  },
  {
    "text": "most of the system is up and running and we are still providing as much of the service as possible and uh at the same",
    "start": "546120",
    "end": "552440"
  },
  {
    "text": "time because failure and in general the process termination is not a silent event so any other process can be",
    "start": "552440",
    "end": "558800"
  },
  {
    "text": "notified about it you can uh Implement uh self-healing uh strategies so like uh",
    "start": "558800",
    "end": "564320"
  },
  {
    "text": "one process crashes the other one gets notified about it and starts a new process in its place or maybe redirects",
    "start": "564320",
    "end": "571279"
  },
  {
    "text": "uh uh some jobs to another process that was uh that is still available uh so",
    "start": "571279",
    "end": "576560"
  },
  {
    "text": "it's like a pretty simple uh but very powerful idea um compared to other uh",
    "start": "576560",
    "end": "582160"
  },
  {
    "text": "virtual machines well I didn't do like a thorough comparison but in general as far as I know no other runtime layer uh",
    "start": "582160",
    "end": "589160"
  },
  {
    "text": "has such support uh uh for high available systems or such Focus uh in",
    "start": "589160",
    "end": "594480"
  },
  {
    "text": "particular for example in jbm as far as I know there is no lightwe concurrency at the runtime level",
    "start": "594480",
    "end": "599760"
  },
  {
    "text": "uh people do this on top of jvm so the most notable example is AKA which takes a lot of ideas from erlang and I mean",
    "start": "599760",
    "end": "607440"
  },
  {
    "text": "brings also a lot of other interesting ideas to the table but this is implemented at the library level so like",
    "start": "607440",
    "end": "613200"
  },
  {
    "text": "you implement AA in a language I don't know in which language is it written probably Java uh but uh what this means",
    "start": "613200",
    "end": "620040"
  },
  {
    "text": "is that you kind of fall short uh uh you basically can do only what your runtime can do so uh for example in beam these",
    "start": "620040",
    "end": "627920"
  },
  {
    "text": "processes are SC scheduled preemptively so to speak so like when a single process runs in an infinite CPU bound",
    "start": "627920",
    "end": "633519"
  },
  {
    "text": "loop it's moved out and someone else gets the slot so uh you can terminate",
    "start": "633519",
    "end": "638720"
  },
  {
    "text": "the process even if it gets stuck completely even if it refuses to stop as far as I know this these things are not",
    "start": "638720",
    "end": "644320"
  },
  {
    "text": "possible in AA or anything else because you essentially don't have the support from the runtime you know the runtime",
    "start": "644320",
    "end": "649920"
  },
  {
    "text": "doesn't know about uh these lightweight uh lightweight concurrency entities so",
    "start": "649920",
    "end": "655000"
  },
  {
    "text": "um in my view beam is really you know very focused and very well built it's a really stable runtime you know has been",
    "start": "655000",
    "end": "661320"
  },
  {
    "text": "around for more than 20 years or so uh and I mean llang itself is old I think",
    "start": "661320",
    "end": "667120"
  },
  {
    "text": "about 30 years or maybe even more if you take uh the design uh phase into account so uh very stable proven practice in",
    "start": "667120",
    "end": "674440"
  },
  {
    "text": "large systems and diverse systems such as WhatsApp for example and of course in Ericson Telecom systems uh so it's uh as",
    "start": "674440",
    "end": "682079"
  },
  {
    "text": "far as I know the best option we have available today or the most suitable option that we have available today as a",
    "start": "682079",
    "end": "687760"
  },
  {
    "text": "foundation for building software systems or again highly available false tolerance and scalable",
    "start": "687760",
    "end": "694040"
  },
  {
    "text": "programs so yeah I fully agree with you Sasha and this is really captured in in the saying right once run forever right",
    "start": "694040",
    "end": "701600"
  },
  {
    "text": "this that's sort of the essence of what you just described right in the community now there is a lot of talk",
    "start": "701600",
    "end": "707480"
  },
  {
    "text": "about go Lang and dark Lang uh and that are in some aspects similar um what are",
    "start": "707480",
    "end": "713920"
  },
  {
    "text": "your thoughts on on sort of the differences and similarities uh between these languages and and the languages on",
    "start": "713920",
    "end": "720399"
  },
  {
    "text": "the beam elexir being one of them of course mhm yeah so let's let's start with uh go um so in my view go go is a",
    "start": "720399",
    "end": "729000"
  },
  {
    "text": "really great language for uh building tools you know the complete opposite of software uh systems because a tool",
    "start": "729000",
    "end": "736360"
  },
  {
    "text": "especially like if you want to distribute them massively to a large audience which runs in a bunch of different operating systems and whatnot",
    "start": "736360",
    "end": "743279"
  },
  {
    "text": "so go go really has a great deployment story which I really like you know you build this Standalone binary and give it",
    "start": "743279",
    "end": "749880"
  },
  {
    "text": "away and it works you know so this is super great I think as far as I know it's probably the state-ofthe-art in",
    "start": "749880",
    "end": "756199"
  },
  {
    "text": "that particular area it's very simple language to pick up you know uh so uh",
    "start": "756199",
    "end": "761800"
  },
  {
    "text": "those are like pretty good things but uh I personally and I know that people are Building Systems with go but uh",
    "start": "761800",
    "end": "769199"
  },
  {
    "text": "personally I don't feel that go is as good of a fit uh for that job as beam",
    "start": "769199",
    "end": "774839"
  },
  {
    "text": "languages uh so I mean go does have lightweight concurrency but that's pretty much all it has so it's not just",
    "start": "774839",
    "end": "782040"
  },
  {
    "text": "about having lightweight concurrence it has to be designed in a particular way if you want to build software systems",
    "start": "782040",
    "end": "787240"
  },
  {
    "text": "with it in go for example all these go routines are sharing memory which can lead to all sort of uh strange problems",
    "start": "787240",
    "end": "794480"
  },
  {
    "text": "and bugs um if a go routin crashes then the entire program crashes so you know",
    "start": "794480",
    "end": "799720"
  },
  {
    "text": "think about like uh if you have uh a single go program which runs I don't",
    "start": "799720",
    "end": "805279"
  },
  {
    "text": "know maybe a million of go routines you are I don't know handling websocket connection to some real time uh game",
    "start": "805279",
    "end": "810839"
  },
  {
    "text": "server or something like that and S there is a single bug you know you have somewhere square root of minus one",
    "start": "810839",
    "end": "816639"
  },
  {
    "text": "single go routing crashes all of these connections go down and this is like super disruptive uh for all the users",
    "start": "816639",
    "end": "822120"
  },
  {
    "text": "you know this is the kind of thing that will not happen in beam when you design it properly uh you know you will just",
    "start": "822120",
    "end": "827399"
  },
  {
    "text": "have one process crashing um then go also basically has like still has",
    "start": "827399",
    "end": "832639"
  },
  {
    "text": "Cooperative uh scheduling they did a lot of improvements there but as far as I'm aware they're still not uh completely",
    "start": "832639",
    "end": "839680"
  },
  {
    "text": "preemptive so you can still end up with a go routine we just you know runs in some longer CPU bound Loop and uh just",
    "start": "839680",
    "end": "847079"
  },
  {
    "text": "takes up a single scheduler and a couple of such routines basically block your entire system and also uh you cannot",
    "start": "847079",
    "end": "855639"
  },
  {
    "text": "really terminate go routines this is a very interesting thing that you have on beam so in beam you know because process",
    "start": "855639",
    "end": "861199"
  },
  {
    "text": "is a runtime entity uh you can terminate it uh by the run time you can ask the rant time please stop this thing now you",
    "start": "861199",
    "end": "868120"
  },
  {
    "text": "know and when no matter what it does it's going to be stopped now because you know this is the runtime level service",
    "start": "868120",
    "end": "873199"
  },
  {
    "text": "and so this is the first class cancellation at the runtime layer you know that that kind of things pretty much are not possible to implement",
    "start": "873199",
    "end": "880320"
  },
  {
    "text": "reliably or completely reliably on uh in go or in say on top of jvm again because",
    "start": "880320",
    "end": "886000"
  },
  {
    "text": "the ranton doesn't uh have the support for that uh just maybe as a passing mention you know I explained this in",
    "start": "886000",
    "end": "891399"
  },
  {
    "text": "more details through a demo driven presentation about a year ago when I was talking at go to Chicago giving a talk",
    "start": "891399",
    "end": "897920"
  },
  {
    "text": "called the soul of l in Elixir so you know I'm giving a very high level overview here but if you want to see",
    "start": "897920",
    "end": "903160"
  },
  {
    "text": "this in action you may want to check out that talk so yeah in general I think that goal for me uh personally I would",
    "start": "903160",
    "end": "909600"
  },
  {
    "text": "definitely use it and recommend it to build tools to build oneof programs pretty works pretty great for that uh",
    "start": "909600",
    "end": "915800"
  },
  {
    "text": "probably the best in class for many such scenarios but for Software System you know again I understand that people are",
    "start": "915800",
    "end": "922680"
  },
  {
    "text": "building large and uh interesting things with that uh but personally you know for me that would not be the choice I feel",
    "start": "922680",
    "end": "928720"
  },
  {
    "text": "that uh beam languages are a better better option now when it comes to dark this is a very interesting story so I",
    "start": "928720",
    "end": "934880"
  },
  {
    "text": "really like dark um I mean what I've seen you know so I didn't really get to try it but I just saw a couple of",
    "start": "934880",
    "end": "941839"
  },
  {
    "text": "presentations uh I think the dark really has a very important story and this is the story that uh dark starts with the",
    "start": "941839",
    "end": "948240"
  },
  {
    "text": "premise that backend development is very complex because you have to use a huge amount of different tooling and somehow",
    "start": "948240",
    "end": "954360"
  },
  {
    "text": "glue it all together this is like the modern state of art you start with kubernetes and then run a bunch of different components and uh you split",
    "start": "954360",
    "end": "961480"
  },
  {
    "text": "your system into a bunch of different microservices and whatnot and the the amount of technical complexity we",
    "start": "961480",
    "end": "967160"
  },
  {
    "text": "introduce here uh is crazy this is like definitely server side backend side programming is way too complex these",
    "start": "967160",
    "end": "973959"
  },
  {
    "text": "days um and so dark aims to Sol this by being uh like a single tool you know you",
    "start": "973959",
    "end": "980079"
  },
  {
    "text": "learn this one tool and you can do everything with dark uh so uh you know it reduces a huge amount of this",
    "start": "980079",
    "end": "986399"
  },
  {
    "text": "technical complexity and I really like this story now what's interesting is that you can uh sort of get a similar",
    "start": "986399",
    "end": "991880"
  },
  {
    "text": "story on top of beam languages uh precisely because beam already at the runtime level gives you a lot of the",
    "start": "991880",
    "end": "997839"
  },
  {
    "text": "things that you get otherwise from the operating system uh so like indeed we sometimes say that llang or Elixir is",
    "start": "997839",
    "end": "1004240"
  },
  {
    "text": "like an operating system for our code um and uh when you have operating system",
    "start": "1004240",
    "end": "1009759"
  },
  {
    "text": "services in your code then you don't have to fall back to the operating system level and you can do a lot of stuff from the language and I've had a",
    "start": "1009759",
    "end": "1015839"
  },
  {
    "text": "bunch of these examples in practice where uh I built a system using exclusively earlan or using exclusively",
    "start": "1015839",
    "end": "1021720"
  },
  {
    "text": "Beam with nothing else running on the side supporting it so like no engine X",
    "start": "1021720",
    "end": "1027438"
  },
  {
    "text": "for example no external in memory KV because we have like an inmemory key value storage called ear ear longterm",
    "start": "1027439",
    "end": "1034480"
  },
  {
    "text": "storage or ETS um so uh things like that you know when with other languages I",
    "start": "1034480",
    "end": "1039918"
  },
  {
    "text": "would have to fall back and run a couple of different processes and a couple of different third party components and glue them and again this is a huge",
    "start": "1039919",
    "end": "1046280"
  },
  {
    "text": "amount of technical complexity uh with earling Elixir you can frequently you know get away just fine with a single",
    "start": "1046280",
    "end": "1052039"
  },
  {
    "text": "project and a single OS process uh running per each machine in the cluster",
    "start": "1052039",
    "end": "1057120"
  },
  {
    "text": "and uh I believe that uh basically with beam you can get similar U similar uh",
    "start": "1057120",
    "end": "1063440"
  },
  {
    "text": "sort of properties that dark Gams to give you uh however uh beam uh and the",
    "start": "1063440",
    "end": "1068600"
  },
  {
    "text": "entire ecosystem is kind of a ground up story it's more like a toolkit less than a framework so uh with beam and standard",
    "start": "1068600",
    "end": "1076080"
  },
  {
    "text": "libraries ofl and elixir you get like a relative ly lowlevel uh lowlevel uh abstractions and then uh libraries give",
    "start": "1076080",
    "end": "1083320"
  },
  {
    "text": "you some medium level abstractions and what we are kind of lacking and dark sort of starts from the opposite",
    "start": "1083320",
    "end": "1089520"
  },
  {
    "text": "direction are like super high level abstractions so ideally I mean this is perfectly possible we have Good",
    "start": "1089520",
    "end": "1095000"
  },
  {
    "text": "Foundations in place and again in my view you can typically Implement something like that on top of beam and",
    "start": "1095000",
    "end": "1101200"
  },
  {
    "text": "not many other platforms uh but we are lacking these high level obstructions and I would like to see the ecosystem",
    "start": "1101200",
    "end": "1106360"
  },
  {
    "text": "evolving to the point where like when a say I want to build a small to medium uh distributed uh web facing system and in",
    "start": "1106360",
    "end": "1113559"
  },
  {
    "text": "15 minutes you know I bring in a couple of libraries a single project and Bam it just works this is perfectly possible",
    "start": "1113559",
    "end": "1119000"
  },
  {
    "text": "and I would really like like to see our ecosystem getting there yeah and I think that's that's a very good comment I",
    "start": "1119000",
    "end": "1125360"
  },
  {
    "text": "think the the ecosystem Around The Elixir and the beam is fantastic and I'm sure there are brains as we speak",
    "start": "1125360",
    "end": "1131720"
  },
  {
    "text": "thinking and working on exactly those things so um slightly related topic I",
    "start": "1131720",
    "end": "1137520"
  },
  {
    "text": "was listening to another episode on on the go to book club on Elm in action and",
    "start": "1137520",
    "end": "1143039"
  },
  {
    "text": "um you know Elm being a totally different Beast of course but what I found interesting there is the the",
    "start": "1143039",
    "end": "1148440"
  },
  {
    "text": "approach taken to to static typing it's very very rigid what are your thoughts on on static typing for for the beam and",
    "start": "1148440",
    "end": "1155559"
  },
  {
    "text": "beam languages so uh in my view uh the lack",
    "start": "1155559",
    "end": "1161120"
  },
  {
    "text": "of static typing is uh the biggest deficiency on uh on beam languages uh",
    "start": "1161120",
    "end": "1167679"
  },
  {
    "text": "and I mean I know that there are like camps uh Dynamic versus static I personally you know done uh both both uh",
    "start": "1167679",
    "end": "1175240"
  },
  {
    "text": "for like many many years uh and uh for the past 15 years I've been mostly using",
    "start": "1175240",
    "end": "1180440"
  },
  {
    "text": "Dynamic languages and I'm now pretty much certain to say that I believe that static uh is definitely a better option",
    "start": "1180440",
    "end": "1186960"
  },
  {
    "text": "you know I still love erlang and elix here and these are like my first languages regardless of the lack of",
    "start": "1186960",
    "end": "1192600"
  },
  {
    "text": "static typing because they offer something that I cannot find anywhere else but I would love to see static",
    "start": "1192600",
    "end": "1197679"
  },
  {
    "text": "typing story on beam languages unfortunately uh mostly it hasn't been available so what we have for llang and",
    "start": "1197679",
    "end": "1204000"
  },
  {
    "text": "elixir is a what is called a success typing through the tool called dialyzer which I like to say is far from perfect",
    "start": "1204000",
    "end": "1210280"
  },
  {
    "text": "but it's the best we got uh however uh there are very interesting initiatives",
    "start": "1210280",
    "end": "1215520"
  },
  {
    "text": "um there is one language called Alpa and another language called gleam um which",
    "start": "1215520",
    "end": "1221280"
  },
  {
    "text": "look very very promising uh and uh they basically uh aim to bring static typing",
    "start": "1221280",
    "end": "1227159"
  },
  {
    "text": "into the beam world like you know proper sound static typing and uh this is",
    "start": "1227159",
    "end": "1232240"
  },
  {
    "text": "something I'm super excited about I still didn't have the chance to try them out but I would definitely love uh love",
    "start": "1232240",
    "end": "1238320"
  },
  {
    "text": "to see how this story unfolds um yeah I mean one challenge you know with beam languages is because you you really have",
    "start": "1238320",
    "end": "1244760"
  },
  {
    "text": "two dimensions in that those languages so like there is a functional Dimension so llang is a functional language and",
    "start": "1244760",
    "end": "1251039"
  },
  {
    "text": "elixir is a functional language typically all beam languages are functional because somehow the the",
    "start": "1251039",
    "end": "1256200"
  },
  {
    "text": "rantom itself is tuned to that and but then there is a whole other dimension which is concurrent Dimension",
    "start": "1256200",
    "end": "1262240"
  },
  {
    "text": "that's what I talked about you know the ability to run and manage a large number of programs within a single uh OS",
    "start": "1262240",
    "end": "1268039"
  },
  {
    "text": "process and this is usually lacking from other languages and like like these two dimensions are completely Ser completely",
    "start": "1268039",
    "end": "1274480"
  },
  {
    "text": "different purposes uh and the challenge is I'm curious to see how this will be solved in uh like gleam for example is",
    "start": "1274480",
    "end": "1282520"
  },
  {
    "text": "how to get uh type safe uh message passing for example uh so the is going",
    "start": "1282520",
    "end": "1288400"
  },
  {
    "text": "to be very interesting to see how it UNF fall but in any case I'm certain that uh strong typing can be added to beam",
    "start": "1288400",
    "end": "1294440"
  },
  {
    "text": "languages and I'm very very excited about uh gleam and I'm I'm looking",
    "start": "1294440",
    "end": "1299480"
  },
  {
    "text": "forward to see how it unfolds yeah I fully agree with you I think that's a very interesting story",
    "start": "1299480",
    "end": "1304559"
  },
  {
    "text": "and there's even rumors that you know WhatsApp they're being a big user of of the B langage called the Aang they they",
    "start": "1304559",
    "end": "1311679"
  },
  {
    "text": "are very much into strong typing and they they even invented different new",
    "start": "1311679",
    "end": "1318080"
  },
  {
    "text": "versions of of languages uh including strong types so let's see how that plays out I'm really excited so um moving a",
    "start": "1318080",
    "end": "1325000"
  },
  {
    "text": "bit into Elixir um what would you say are the the key benefits from from a",
    "start": "1325000",
    "end": "1332000"
  },
  {
    "text": "business perspective let's say a business user considering Elixir what what would be the key benefits from that",
    "start": "1332000",
    "end": "1338039"
  },
  {
    "text": "angle MH so uh right I mean as I said uh Elixir like any other beam language for",
    "start": "1338039",
    "end": "1344120"
  },
  {
    "text": "me should be strongly considered when you want to build a server side system and I don't want to repeat all that",
    "start": "1344120",
    "end": "1349679"
  },
  {
    "text": "again but definitely you know give it a try at least give it an evaluation uh but of course it beg the question you",
    "start": "1349679",
    "end": "1355520"
  },
  {
    "text": "know why would we choose say Elixir over llang which is the first beam language and uh clearly like the whole rantom has",
    "start": "1355520",
    "end": "1361679"
  },
  {
    "text": "been designed for llang and I mean there are of course other languages as well so in my personal View and just to be clear",
    "start": "1361679",
    "end": "1367760"
  },
  {
    "text": "you know I'm not the member of the core team or I'm not the creator of the language or anything so I'm just the user I always like to say I'm a happy",
    "start": "1367760",
    "end": "1373720"
  },
  {
    "text": "user of earling and elixir and uh my personal impression is that uh uh what",
    "start": "1373720",
    "end": "1379080"
  },
  {
    "text": "Elixir brings to the table compared to erlang is uh better approachability and",
    "start": "1379080",
    "end": "1385559"
  },
  {
    "text": "maybe a better developer productivity story uh so uh I have been using gang in",
    "start": "1385559",
    "end": "1391360"
  },
  {
    "text": "production for a couple of years before you know Elixir Ren existed and then uh",
    "start": "1391360",
    "end": "1396640"
  },
  {
    "text": "through the middle of the past decade I was using both languages side by side and uh finally a couple of years ago I",
    "start": "1396640",
    "end": "1403279"
  },
  {
    "text": "moved completely to elixa and I like to think that I had like a good uh good you know practice with both languages and so",
    "start": "1403279",
    "end": "1410559"
  },
  {
    "text": "I could have seen like pros and cons and the thing is you know in my view erlang is a very simple language you know",
    "start": "1410559",
    "end": "1416880"
  },
  {
    "text": "people get confused people uh think that Elixir is simpler but that's not true erlang is a simpler language it just",
    "start": "1416880",
    "end": "1422360"
  },
  {
    "text": "looks strange to most people because it has this prologue like uh syntax right but like very very simple language and",
    "start": "1422360",
    "end": "1428960"
  },
  {
    "text": "that's that's really cool um very simple syntax and very regular syntax no no ambiguities at all um but you know",
    "start": "1428960",
    "end": "1436159"
  },
  {
    "text": "that's the problem with Simplicity as well because uh the simpler the language also the less expressive it is so what I",
    "start": "1436159",
    "end": "1442679"
  },
  {
    "text": "found in llang is that I had to write a lot of repeating boiler plate and what you could call no noise you know I know",
    "start": "1442679",
    "end": "1448880"
  },
  {
    "text": "some people would say that it's like more explicit than but my personal sentiment is that it's more noisy and so",
    "start": "1448880",
    "end": "1454960"
  },
  {
    "text": "Elixir I would say which looks maybe more approachable for the syntax which is the least interesting part but you",
    "start": "1454960",
    "end": "1460600"
  },
  {
    "text": "know it has like this Ruby like syntax which people many people are used to but what really in my view is alixir versus",
    "start": "1460600",
    "end": "1467159"
  },
  {
    "text": "erlang is it's a more complex more complicated language uh so there's more there are more things to learn but",
    "start": "1467159",
    "end": "1473120"
  },
  {
    "text": "because of that uh you as a programmer can also be more expressive so you can actually reduce and put aside some Bower",
    "start": "1473120",
    "end": "1480200"
  },
  {
    "text": "plate and so I I found that like it strikes a better uh balance for me personally but you know I wouldn't dare",
    "start": "1480200",
    "end": "1486840"
  },
  {
    "text": "to say that either one of these two languages is better it's more about you know your own personal preferences of",
    "start": "1486840",
    "end": "1492360"
  },
  {
    "text": "whether you like to you know write a bit more uh and then have that boiler plate but also you know the simpler language",
    "start": "1492360",
    "end": "1498399"
  },
  {
    "text": "or you prefer to have like more complex uh features in the language uh but then",
    "start": "1498399",
    "end": "1503880"
  },
  {
    "text": "uh you know you you also can reduce some noise so it's a matter of personal preferences to me now another thing that",
    "start": "1503880",
    "end": "1510600"
  },
  {
    "text": "Elixir brought to the table uh back when it was uh when it originally appeared so I believe that Jose valim started",
    "start": "1510600",
    "end": "1517120"
  },
  {
    "text": "writing it in 2011 if I remember correctly I personally saw it in like early 2013 and at at that time my",
    "start": "1517120",
    "end": "1524159"
  },
  {
    "text": "impression my impression was that Elixir had a much better tooling support so like like uh basically llong didn't have",
    "start": "1524159",
    "end": "1529880"
  },
  {
    "text": "official tool at the time so you had to use some third party tool which now has been integrated um and which is now",
    "start": "1529880",
    "end": "1536399"
  },
  {
    "text": "actually much better so the story in erlank has approved as well um but you know with Elixir you just get this thing",
    "start": "1536399",
    "end": "1542840"
  },
  {
    "text": "and you start this mix new project and you do everything with mix and it was like very easy to build an OTP release",
    "start": "1542840",
    "end": "1548960"
  },
  {
    "text": "even back at that time when that thing doing it with llang was a bit more uh complex and again required some",
    "start": "1548960",
    "end": "1555440"
  },
  {
    "text": "different tools even the community ofl didn't have this consensus about which tool you should use so there were five",
    "start": "1555440",
    "end": "1561600"
  },
  {
    "text": "or more different options to do that so this is where I find you know historically Elixir working better I",
    "start": "1561600",
    "end": "1568320"
  },
  {
    "text": "believe that uh you know I don't really follow irlan So Much Anymore uh but my impression is that irank has improved as",
    "start": "1568320",
    "end": "1573880"
  },
  {
    "text": "well in those areas and I kind of like the thing that you know having these multiple choices that these communities",
    "start": "1573880",
    "end": "1579480"
  },
  {
    "text": "uh essentially move each other forward together so uh we are all like whole beam ecosystem and I mean it's always",
    "start": "1579480",
    "end": "1585880"
  },
  {
    "text": "worth saying that you can use uh like in Elixir you can use erlong libraries and we wouldn't even exist if we didn't use",
    "start": "1585880",
    "end": "1591760"
  },
  {
    "text": "those libraries starting from the standard library and the OTP framework but then also third party libraries such",
    "start": "1591760",
    "end": "1597159"
  },
  {
    "text": "as the popular cowboy web server and things like that and also then again uh owing to the work on Elixir there have",
    "start": "1597159",
    "end": "1603760"
  },
  {
    "text": "been some pull requests done back to the uh lotp so essentially these two languages",
    "start": "1603760",
    "end": "1610440"
  },
  {
    "text": "you know kind of work together and not just these two languages but all of them languages as they should so ultimately to me you know the uh the question of",
    "start": "1610440",
    "end": "1618120"
  },
  {
    "text": "say llang versus Elixir is all more about like do you prefer a simpler language with bit more typing or do you",
    "start": "1618120",
    "end": "1624039"
  },
  {
    "text": "want a more expressive language but also more complex language and again I think that uh my impression is that Elixir has",
    "start": "1624039",
    "end": "1630760"
  },
  {
    "text": "like a slightly better story in Tooling in documentation maybe support for uh tests and so on yeah I think you're",
    "start": "1630760",
    "end": "1638679"
  },
  {
    "text": "absolutely right there and that that was a bit of a weakness in in the community and I think the the whole elexir team",
    "start": "1638679",
    "end": "1644640"
  },
  {
    "text": "with with kosa and the others have have you know moved the community forwards as a whole and now the whole beam Community",
    "start": "1644640",
    "end": "1651480"
  },
  {
    "text": "can can benefit from it so I think that's just awesome work done there speaking a bit about your book uh I",
    "start": "1651480",
    "end": "1658640"
  },
  {
    "text": "think it's really cool and I love your your T-shirt so um what kind of person",
    "start": "1658640",
    "end": "1664480"
  },
  {
    "text": "did you have in mind when when writing it yeah that's that's a very good question uh thank you for giving me the",
    "start": "1664480",
    "end": "1670559"
  },
  {
    "text": "chance to clarify that uh so Elixir rection is I personally advertise it as",
    "start": "1670559",
    "end": "1676000"
  },
  {
    "text": "it's an introductional introductionary book to alexir uh but not for non-programmers so it's not introduction",
    "start": "1676000",
    "end": "1682480"
  },
  {
    "text": "to programming I actually expect a programmer who is has some experience in",
    "start": "1682480",
    "end": "1688120"
  },
  {
    "text": "other languages not related to beam at all uh you know such as Ruby C Java",
    "start": "1688120",
    "end": "1693840"
  },
  {
    "text": "JavaScript whatever you know Python and so on um preferably on the server side",
    "start": "1693840",
    "end": "1698919"
  },
  {
    "text": "of things you know for at least I would say a year or two so uh the reader should be familiar with what it feels",
    "start": "1698919",
    "end": "1704799"
  },
  {
    "text": "like to write a web server a web facing system way I like to call it um other",
    "start": "1704799",
    "end": "1710120"
  },
  {
    "text": "than that of course they don't have to know anything about um about beam or erlang or Elixir at all yeah nowadays",
    "start": "1710120",
    "end": "1717559"
  },
  {
    "text": "there there are quite a few books on on Elixir out there on the market so what would you say is is unique with with",
    "start": "1717559",
    "end": "1724760"
  },
  {
    "text": "elixir in action mhm uh yeah I actually you know up until a few years ago I read",
    "start": "1724760",
    "end": "1730720"
  },
  {
    "text": "all of books written on Elixir uh these days you know that there are like already so many that I don't I I find",
    "start": "1730720",
    "end": "1736039"
  },
  {
    "text": "hard to catch up uh my personal impression is uh obviously no I'm partial to my book but that uh my",
    "start": "1736039",
    "end": "1742720"
  },
  {
    "text": "personal impression is that all of these books are great books and that mostly they complement each other uh so in",
    "start": "1742720",
    "end": "1748600"
  },
  {
    "text": "particular for Elixir rection uh I wrote it with the focus again uh remember I",
    "start": "1748600",
    "end": "1755039"
  },
  {
    "text": "said there are like two dimensions of Elixir so functional and concurrent my focus was on concurrent aspect of Elixir",
    "start": "1755039",
    "end": "1761919"
  },
  {
    "text": "because this is where I find uh that any beam language really shines the most this is what uh what they bring",
    "start": "1761919",
    "end": "1768159"
  },
  {
    "text": "significance to the table compared to anything else available out there uh I'm not saying that functional is somehow",
    "start": "1768159",
    "end": "1774080"
  },
  {
    "text": "boring or anything but uh this is the the stuff that I kind of treated more as a",
    "start": "1774080",
    "end": "1779440"
  },
  {
    "text": "nuisance uh so that's uh one thing about Elixir rection know it starts very uneventfully very like the first part of",
    "start": "1779440",
    "end": "1786200"
  },
  {
    "text": "the book uh uh those are the first uh four chapters uh they basically deal",
    "start": "1786200",
    "end": "1792640"
  },
  {
    "text": "with functional programming and the type system and it's more like you have the this and you have that and you have that",
    "start": "1792640",
    "end": "1799159"
  },
  {
    "text": "so you kind of have to survive through this first third but then the the second and the third third uh so the second",
    "start": "1799159",
    "end": "1804880"
  },
  {
    "text": "part and the third part they are uh focused on concurrency how to think concurrently in beam and uh how to use",
    "start": "1804880",
    "end": "1812480"
  },
  {
    "text": "it properly and how to use the higher level of struction from the beam standpoint or from the those languages",
    "start": "1812480",
    "end": "1819000"
  },
  {
    "text": "like OTP uh how to use those things properly and what I really like about",
    "start": "1819000",
    "end": "1824120"
  },
  {
    "text": "those chapter is that uh they they're sort of modeled through my own experience you know like when I was",
    "start": "1824120",
    "end": "1829519"
  },
  {
    "text": "working with erlang for I started using erlang in 2010 and back then there",
    "start": "1829519",
    "end": "1835440"
  },
  {
    "text": "wasn't even the famous book learn you summer long and there were a couple of books I learned from Joe's book for example but it wasn't completely clear",
    "start": "1835440",
    "end": "1842080"
  },
  {
    "text": "to me how should I do things you know so I made many mistakes and in a sense this is replicated in a book uh so it doesn't",
    "start": "1842080",
    "end": "1848880"
  },
  {
    "text": "you know just guide you in a straight line from point8 to point B but it do more of like a zigzag you know it u i do",
    "start": "1848880",
    "end": "1856200"
  },
  {
    "text": "some things wrong deliberately at L so like you start in one chapter and you're going to start with something learn some",
    "start": "1856200",
    "end": "1862559"
  },
  {
    "text": "new techniques and build some implementation and you're going to feel good about yourself and then in the beginning of the next chapter I'm going",
    "start": "1862559",
    "end": "1868080"
  },
  {
    "text": "to explain why this implementation is wrong you know and then we're going to learn something new and then we're going",
    "start": "1868080",
    "end": "1873919"
  },
  {
    "text": "to improve it and then in the next chapter you're going to learn that this is wrong too uh so but I never let you",
    "start": "1873919",
    "end": "1879480"
  },
  {
    "text": "fall very far you know get go astray very far but uh I believe that in this sense you know my goal was to not",
    "start": "1879480",
    "end": "1886200"
  },
  {
    "text": "explain not only uh how you should do something but also why you should do something because this",
    "start": "1886200",
    "end": "1891720"
  },
  {
    "text": "is what I found at the time likeing uh in beam literature you know people will tell you like you should do it like this",
    "start": "1891720",
    "end": "1898679"
  },
  {
    "text": "and no explanation at all why and so uh I made some mistakes which I've seen on",
    "start": "1898679",
    "end": "1903720"
  },
  {
    "text": "I mean on forums and other exchange sites that people also tend to make when when they don't know this and this is",
    "start": "1903720",
    "end": "1909000"
  },
  {
    "text": "where I personally find uh the book uh like for me at least you know most",
    "start": "1909000",
    "end": "1914240"
  },
  {
    "text": "helpful and in essence I wrote this book uh the way I would want to have it you know if I if I didn't write it in so",
    "start": "1914240",
    "end": "1921080"
  },
  {
    "text": "something that I was found find missing myself now I really love that approach I",
    "start": "1921080",
    "end": "1926360"
  },
  {
    "text": "mean it's fantastic way way of teaching because that's the way you learn in reality right it's it's never this",
    "start": "1926360",
    "end": "1932399"
  },
  {
    "text": "straight path it's always you know one step forward a half step back and two step forward and so on and so forth so",
    "start": "1932399",
    "end": "1938799"
  },
  {
    "text": "so having that approach when when writing a book is is is really awesome thinking about you know being being a",
    "start": "1938799",
    "end": "1944600"
  },
  {
    "text": "writer myself um I'm curious to kind of feedback you you got on the book and what what kind of feedback was most",
    "start": "1944600",
    "end": "1950679"
  },
  {
    "text": "surprising to you because I mean you said that you wrote it like you would have liked it right so what kind of",
    "start": "1950679",
    "end": "1956880"
  },
  {
    "text": "feedback and and surprising feedback did you receive uh so far yeah well I mean",
    "start": "1956880",
    "end": "1962080"
  },
  {
    "text": "the book so this is now the second edition uh if I remember correctly the first edition was released in 2015 so",
    "start": "1962080",
    "end": "1969919"
  },
  {
    "text": "it's been like now 5 years or so yeah I got to say that I was surprised first",
    "start": "1969919",
    "end": "1975159"
  },
  {
    "text": "and foremost I was surprised that they got any feedback back uh so uh you know it was the first and the only book I",
    "start": "1975159",
    "end": "1981200"
  },
  {
    "text": "ever wrote and um I wasn't really famous or anything before that so there were",
    "start": "1981200",
    "end": "1986240"
  },
  {
    "text": "more famous authors writing on Elixir and I really you know didn't expect that",
    "start": "1986240",
    "end": "1992200"
  },
  {
    "text": "uh anyone would even read the book except for myself and my uh family but",
    "start": "1992200",
    "end": "1997799"
  },
  {
    "text": "yeah it was actually turned out like a pretty pretty nice surprise that people actually read it and I got a very good",
    "start": "1997799",
    "end": "2002960"
  },
  {
    "text": "feedback and it feels like the book has uh grown sort of organic you know so I see people recommending it uh and",
    "start": "2002960",
    "end": "2010880"
  },
  {
    "text": "sometimes I get unsolicited feedback and just someone you know contacts me on whatever Channel and say you know hey I",
    "start": "2010880",
    "end": "2017360"
  },
  {
    "text": "read your book and it's uh it's a really good book thank you for writing it and this for me is is like the best reward",
    "start": "2017360",
    "end": "2023799"
  },
  {
    "text": "uh that you can get from a book you know when you're not fishing for a review or anything you know someone approaches you and just say you know I read your book",
    "start": "2023799",
    "end": "2029760"
  },
  {
    "text": "and it's uh I really enjoyed it it really helped me thanks for listening to this episode of the go-to podcast head",
    "start": "2029760",
    "end": "2036679"
  },
  {
    "text": "over to gpa. Tech for lots more content from the brightest Minds in software",
    "start": "2036679",
    "end": "2043320"
  },
  {
    "text": "[Music]",
    "start": "2043650",
    "end": "2052638"
  },
  {
    "text": "development",
    "start": "2052639",
    "end": "2055638"
  }
]