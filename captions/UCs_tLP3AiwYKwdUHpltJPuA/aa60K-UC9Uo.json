[
  {
    "text": "[Music] welcome to the go-to podcast each",
    "start": "280",
    "end": "7560"
  },
  {
    "text": "episode covers the brightest and boldest ideas from the world's leading experts in software development tune in for",
    "start": "7560",
    "end": "14120"
  },
  {
    "text": "practical lessons compelling theories and plenty of",
    "start": "14120",
    "end": "19279"
  },
  {
    "text": "inspiration go to gathers the brightest Minds in the software Community to help developers tackle projects today plan",
    "start": "19960",
    "end": "26720"
  },
  {
    "text": "for tomorrow and create a better future stay up to dat with the latest in Tech through go-to's top rated events held",
    "start": "26720",
    "end": "33320"
  },
  {
    "text": "online and in person in cities like Amsterdam London Copenhagen and Chicago",
    "start": "33320",
    "end": "39160"
  },
  {
    "text": "and by subscribing to the go-to conferences YouTube channel where you can find thousands more highquality de",
    "start": "39160",
    "end": "44719"
  },
  {
    "text": "talks learn more otopia [Music]",
    "start": "44719",
    "end": "51239"
  },
  {
    "text": "Tech hello and welcome to another goto unscripted series video and I it's here",
    "start": "51239",
    "end": "59120"
  },
  {
    "text": "to say hello to show that I never hosted before but here I am my name is mar vva",
    "start": "59120",
    "end": "65400"
  },
  {
    "text": "developer advocate for AWS at the sist team and I shine",
    "start": "65400",
    "end": "71040"
  },
  {
    "text": "we hello I'm Julian wood and Marshall and I are actually on the same team so we sort of do the same things although",
    "start": "71040",
    "end": "76560"
  },
  {
    "text": "we have different Specialties Mar is always lovely to talk to you and I love that your intro even for your own",
    "start": "76560",
    "end": "81960"
  },
  {
    "text": "podcast and your own YouTube channel transcen we here to go down script it so super cool I cannot avoid introducing",
    "start": "81960",
    "end": "88400"
  },
  {
    "text": "things it's my absolutely I have to say hello to",
    "start": "88400",
    "end": "93600"
  },
  {
    "text": "people so today we have a really cool topic because I don't know maybe people",
    "start": "93600",
    "end": "99360"
  },
  {
    "text": "reading the description of this this video like how how many B words you can put in a sentence uh functions La",
    "start": "99360",
    "end": "107159"
  },
  {
    "text": "containers containers and functions and it's like how is that possible are not",
    "start": "107159",
    "end": "113159"
  },
  {
    "text": "kind of the same thing um how well I",
    "start": "113159",
    "end": "118320"
  },
  {
    "text": "have heard about this uh open source functions that you can run yourself are",
    "start": "118320",
    "end": "123880"
  },
  {
    "text": "we talking about that uh what what is that we are going to talk today well we",
    "start": "123880",
    "end": "130000"
  },
  {
    "text": "need to put more Buzz words in just for the title so we'll say gen a few times and then we'll do gen gen functions and",
    "start": "130000",
    "end": "135560"
  },
  {
    "text": "containers and then we're covered so we have all the buzz crytocurrency oh nice one I like it",
    "start": "135560",
    "end": "141080"
  },
  {
    "text": "like yes so this this is an interesting topic to talk about because you know",
    "start": "141080",
    "end": "146200"
  },
  {
    "text": "people always think that there's some sort of philosophical technical whatever",
    "start": "146200",
    "end": "151959"
  },
  {
    "text": "either or debate between whether you can use functions uh or whether you can use",
    "start": "151959",
    "end": "157000"
  },
  {
    "text": "containers and obviously this is complicated because the word containers",
    "start": "157000",
    "end": "162200"
  },
  {
    "text": "let me get my uh quotes on the screen is a broad term which encompasses a whole bunch of different things and a",
    "start": "162200",
    "end": "168519"
  },
  {
    "text": "container can be a packaging format so it's a way that you can put a whole bunch of files together basically uh",
    "start": "168519",
    "end": "175519"
  },
  {
    "text": "containers can also be a distribution mechanism because it's a way that you can have something that runs on your machine and runs on another set of",
    "start": "175519",
    "end": "182159"
  },
  {
    "text": "machines in the cloud on previs anywhere that kind of thing and then um container",
    "start": "182159",
    "end": "187480"
  },
  {
    "text": "containerization can also be the sort of concept of oh we containerizing things we making them a little bit smaller a",
    "start": "187480",
    "end": "193200"
  },
  {
    "text": "little bit more agile maybe maybe it's a similar sort of concept of microservices so a lot of different",
    "start": "193200",
    "end": "199000"
  },
  {
    "text": "things that containers are and some sometimes people can come come at it from a different angle and so uh you",
    "start": "199000",
    "end": "204400"
  },
  {
    "text": "know they maybe get confused but the big picture is is that um when we talk about serus when servus sort of came on the",
    "start": "204400",
    "end": "211439"
  },
  {
    "text": "scene about sort of 10ish years ago it all about functions as a service well mainly about functions as a service",
    "start": "211439",
    "end": "216840"
  },
  {
    "text": "where you just upload your code somewhere and it would just run whatever scale it would just run and somebody",
    "start": "216840",
    "end": "223000"
  },
  {
    "text": "would take care of running that for you scaling it and you know updating it and securing some of it and all all that",
    "start": "223000",
    "end": "228840"
  },
  {
    "text": "kind of thing now obviously the term servus has evolved since then because it's not just functions as a service but",
    "start": "228840",
    "end": "234560"
  },
  {
    "text": "it's a whole sort of Suite of databases and messaging services and orchestration",
    "start": "234560",
    "end": "239840"
  },
  {
    "text": "systems that can do anything that sort of takes away that undifferentiated heavy lifting we talk about at at AWS",
    "start": "239840",
    "end": "246280"
  },
  {
    "text": "where you just get to do your run your service over the internet and we'll take care of a lot of the sort of grunt work",
    "start": "246280",
    "end": "252879"
  },
  {
    "text": "underneath so you can just focus on your on your application and so we had functions and then we had containers",
    "start": "252879",
    "end": "259040"
  },
  {
    "text": "that you could always run a lot of lot of um companies were doing either lifts and shifts or they were doing microservices and they were you know",
    "start": "259040",
    "end": "265479"
  },
  {
    "text": "containerizing your applications and when we talk about functions at least in their Beginnings we always show these",
    "start": "265479",
    "end": "271360"
  },
  {
    "text": "graphs that was like physical machines virtual machines containers functions",
    "start": "271360",
    "end": "277000"
  },
  {
    "text": "and now they're like H how how we put this things together yeah and I think the the sort of idea of that was",
    "start": "277000",
    "end": "283759"
  },
  {
    "text": "possibly good to show how the sort of evolution of things could be but it's not necessarily uh that the evolution",
    "start": "283759",
    "end": "290199"
  },
  {
    "text": "has to be that you have to migrate from a container to a function it's just a different way of running uh different",
    "start": "290199",
    "end": "296039"
  },
  {
    "text": "way of running code and you know running actual containers whether that's you know on kubernetes or ECS within which",
    "start": "296039",
    "end": "301960"
  },
  {
    "text": "is elastic container service within AWS you know that's a way for running a a full running container that can run for",
    "start": "301960",
    "end": "307720"
  },
  {
    "text": "hours forever in fact and yeah it's a great really great way to also run applications and function I think we can",
    "start": "307720",
    "end": "313160"
  },
  {
    "text": "go back to the definition of what a function is and what a container is and I think it's very important what you",
    "start": "313160",
    "end": "319240"
  },
  {
    "text": "said at the beginning the different layers of what a container can be because in this case of functions what",
    "start": "319240",
    "end": "325120"
  },
  {
    "text": "we are talking is about the packaging the container image and then we have the way of running the container and that's",
    "start": "325120",
    "end": "332199"
  },
  {
    "text": "what we wanted to graph in that typical graph of physical machines virtual machines containers and functions is",
    "start": "332199",
    "end": "339080"
  },
  {
    "text": "where is the responsibility and what is the abstraction layer now what we are going to say well now you can put your",
    "start": "339080",
    "end": "344520"
  },
  {
    "text": "container image the same that you put in your ECS or your uh whatever you're",
    "start": "344520",
    "end": "349680"
  },
  {
    "text": "using into Lambda yeah so you can basically the premise is you can build a",
    "start": "349680",
    "end": "355440"
  },
  {
    "text": "function from a container image and the world's like hang on hang on hang on what are you what are you talking about about and so yeah that's the confusing",
    "start": "355440",
    "end": "361880"
  },
  {
    "text": "thing we're going to try and tease apart uh trying to tease apart today and sort of help people understand why it can be useful and some of the trads that you",
    "start": "361880",
    "end": "368919"
  },
  {
    "text": "that that that you need to do yeah so now we clarify a little bit what we are",
    "start": "368919",
    "end": "374479"
  },
  {
    "text": "going to focus running container images in functions in serverless functions so",
    "start": "374479",
    "end": "382599"
  },
  {
    "text": "that's the the TIR of the this but why well the why",
    "start": "382599",
    "end": "391440"
  },
  {
    "text": "is good in a way because why not and that may sound a little bit silly but",
    "start": "391440",
    "end": "397919"
  },
  {
    "text": "the whole container ecosystem container ecosystem has gone wild over the past 10 years and for really good reasons",
    "start": "397919",
    "end": "404800"
  },
  {
    "text": "because uh containers when we are talking about the packaging format the way you can put things together is a",
    "start": "404800",
    "end": "410160"
  },
  {
    "text": "standard that so many different kind of things use and so uh the benefits of using a container image is that you",
    "start": "410160",
    "end": "417080"
  },
  {
    "text": "there's so many tools and there's so many Packaging there's so many scanning utilities and just so many developers",
    "start": "417080",
    "end": "423680"
  },
  {
    "text": "know how to package applications in a container so that's a and you can run it in your local machine yeah exactly and",
    "start": "423680",
    "end": "431039"
  },
  {
    "text": "so that's when we were talking about the portability earlier that is really cool that you can you know test and run",
    "start": "431039",
    "end": "436560"
  },
  {
    "text": "something on your on your Mac or your Windows machine and even if it's going to be you even on Windows if it's going to be deployed on a you know Linux OS",
    "start": "436560",
    "end": "443960"
  },
  {
    "text": "with another chipset in another cloud provider you know you can have this sort of confidence that your packaging format",
    "start": "443960",
    "end": "449759"
  },
  {
    "text": "can be useful and so what Lambda introduced I think it's about 3 years ago now is previously Lambda you had to",
    "start": "449759",
    "end": "457280"
  },
  {
    "text": "um take all the files that with your code and you had to zip it up you had to upload it to to the cloud to the Lambda",
    "start": "457280",
    "end": "462520"
  },
  {
    "text": "service it would store it in S3 object storage that's a bit behind the scenes and basically when the function ran it",
    "start": "462520",
    "end": "467840"
  },
  {
    "text": "would just copy that code down and run your function very simple but people were saying well hang on I'm why do I",
    "start": "467840",
    "end": "473960"
  },
  {
    "text": "have to have different tooling for Lambda or I'm using containers to build a whole bunch of other servers can't I",
    "start": "473960",
    "end": "480280"
  },
  {
    "text": "just use containers to build Lambda functions so Lambda came out with what's called sort of oci image support and so",
    "start": "480280",
    "end": "487919"
  },
  {
    "text": "a an oci image is the industry standard to build a container image and if you",
    "start": "487919",
    "end": "493840"
  },
  {
    "text": "think if you worked in containers at all I'm sure you've done Docker files well a Docker file is a way of doing a",
    "start": "493840",
    "end": "499759"
  },
  {
    "text": "container image and that's docker's implementation but it's using the oci spec under the hood but there are other",
    "start": "499759",
    "end": "504879"
  },
  {
    "text": "container run times which also use the oci spec so anyway what I to came out because instead of having to zip your",
    "start": "504879",
    "end": "511000"
  },
  {
    "text": "package up you could just use a Docker file to specify what is going to be your Lambda function and you could build a",
    "start": "511000",
    "end": "516719"
  },
  {
    "text": "Lambda function that so we're talking about some of the benefits we're talking about some of the tools using your tooling using your Docker CLI on your on",
    "start": "516719",
    "end": "523518"
  },
  {
    "text": "your laptop or wherever to do it um another one is portability well as you mentioned before if you've got a",
    "start": "523519",
    "end": "530360"
  },
  {
    "text": "function that is some code that is running somewhere um you can I Port that to Lambda or use some of the",
    "start": "530360",
    "end": "535720"
  },
  {
    "text": "functionality within Lambda much easier and then some other sort of uh useful",
    "start": "535720",
    "end": "541240"
  },
  {
    "text": "use cases was larger artifacts so one of the um constraints with Lambda is you",
    "start": "541240",
    "end": "546920"
  },
  {
    "text": "can only have as files that are 256 Meg with container images that is now up to",
    "start": "546920",
    "end": "552360"
  },
  {
    "text": "10 gig and there's a whole bunch of cool technology we're going to get into make we'll get into that because that's very",
    "start": "552360",
    "end": "557519"
  },
  {
    "text": "M love it love it that is so cool but yeah so you can build Lambda functions up to 10 gig so that means you know huge",
    "start": "557519",
    "end": "564920"
  },
  {
    "text": "binaries that you need to put in or even machine learning models or you know the that was a huge constraint for a lot of",
    "start": "564920",
    "end": "572079"
  },
  {
    "text": "our customers that they were like well I have so many dependencies I have so many things and even if you use Lambda layers",
    "start": "572079",
    "end": "579480"
  },
  {
    "text": "when you were running your functions in your traditional where you're still limited to that deployment package size",
    "start": "579480",
    "end": "586240"
  },
  {
    "text": "um well there's many reasons for why the package size is small uh but with",
    "start": "586240",
    "end": "592200"
  },
  {
    "text": "containers it seems that we have done some mashik and we have broke that uh in some",
    "start": "592200",
    "end": "599079"
  },
  {
    "text": "way we'll talk to that later so don't tune out um and and we can put 10 gigabytes so that's I think one of the",
    "start": "599079",
    "end": "606399"
  },
  {
    "text": "biggest things besides we already know how to use containers now we can put bigger things and I think another big",
    "start": "606399",
    "end": "613279"
  },
  {
    "text": "one that at least I heard from customers is the IM immutability and the control",
    "start": "613279",
    "end": "619040"
  },
  {
    "text": "that they have on their images because well if you use Lambda uh the vanilla",
    "start": "619040",
    "end": "625120"
  },
  {
    "text": "way the traditional way let's call it uh you are basically using uh whatever we",
    "start": "625120",
    "end": "631240"
  },
  {
    "text": "provide the runtime we provide maybe sometimes you need your own images you need your own run times you need your",
    "start": "631240",
    "end": "638040"
  },
  {
    "text": "own uh whatever because you have so many constraints in your organization and if",
    "start": "638040",
    "end": "644000"
  },
  {
    "text": "you use the uh container image support then you can bring all that into into",
    "start": "644000",
    "end": "649760"
  },
  {
    "text": "the play and that's also very important for me organizations y so that's when you talk about the the the packaging",
    "start": "649760",
    "end": "655320"
  },
  {
    "text": "format and you know the power container as a packaging format because by default one of the awesome things",
    "start": "655320",
    "end": "661399"
  },
  {
    "text": "about Lambda is it just automatically patches itself the operating system and you know if using python or node or Java",
    "start": "661399",
    "end": "668399"
  },
  {
    "text": "you know the the minor version of java node or python just gets automatically upgraded you know literally every time you run your function it's making sure",
    "start": "668399",
    "end": "674600"
  },
  {
    "text": "it's got the latest and greatest and that is fantastic because it means you don't have to do that work yourself but",
    "start": "674600",
    "end": "680240"
  },
  {
    "text": "for some customers they're like hang on um this means if I do have a library which suddenly has an incompatibility",
    "start": "680240",
    "end": "687000"
  },
  {
    "text": "now a bit stuck because something just broke and I didn't make any code changes",
    "start": "687000",
    "end": "692240"
  },
  {
    "text": "or Lambda functions run on Amazon Linux uh previously Amazon Linux 2 and our Amazon Linux 2023 my company uses a",
    "start": "692240",
    "end": "700120"
  },
  {
    "text": "buntu or Alpine or some other you know dbn or red hat or anything some other",
    "start": "700120",
    "end": "705920"
  },
  {
    "text": "Linux dis drone I don't really want to use have to use something different for Lambda because all my processors and",
    "start": "705920",
    "end": "711720"
  },
  {
    "text": "everything are set up to use this other L SRO and so as with a Docker file with a Lambda function and containing M Port",
    "start": "711720",
    "end": "718480"
  },
  {
    "text": "it means you can actually bring your own runtime and bring your own operating system and that is super powerful and I",
    "start": "718480",
    "end": "723920"
  },
  {
    "text": "have heard stories of people running cobal Lambda functions in this type of scenarios so when we mean run bring your",
    "start": "723920",
    "end": "730320"
  },
  {
    "text": "own runtime we mean bring your own run time yeah and that's yeah that's one of",
    "start": "730320",
    "end": "735600"
  },
  {
    "text": "the powerful features of Lambda there's a there's a way that you can use custom runtime so yes we Have No Java python",
    "start": "735600",
    "end": "741880"
  },
  {
    "text": "you know go all these manag run times but yeah there are the custom run times which custom run times is also a bit of",
    "start": "741880",
    "end": "747199"
  },
  {
    "text": "a funny term because custom means oh we've customized the runtime it basically is an OS only runtime so it's",
    "start": "747199",
    "end": "753600"
  },
  {
    "text": "an operating system and then you have the flexibility to build whatever you want on top of it and so yeah that gives a lot of um a lot of flexibility that",
    "start": "753600",
    "end": "760880"
  },
  {
    "text": "you can do in but also in the other hand it's not that you can bring your own things but you can also use all the base",
    "start": "760880",
    "end": "767760"
  },
  {
    "text": "images that Lambda provides so if you don't need any custom runtime or anything Weir you want to use what",
    "start": "767760",
    "end": "773920"
  },
  {
    "text": "Lambda provides just go grab the base image for the run time you will have like all the goodies yeah all the",
    "start": "773920",
    "end": "780480"
  },
  {
    "text": "goodies no need to stress because that's also what I love from Lambda that is simple and I don't need to reconfigure",
    "start": "780480",
    "end": "787800"
  },
  {
    "text": "the word in order to get started so there is the a lot of customization possible but also the EAS for the ones",
    "start": "787800",
    "end": "794720"
  },
  {
    "text": "that don't need that much level of customization definitely so literally the first line in your Docker file is when I'm starting my Docker file or when",
    "start": "794720",
    "end": "801040"
  },
  {
    "text": "I'm starting my container image for Lambda um please please Lambda service can I have the the the base image which",
    "start": "801040",
    "end": "807320"
  },
  {
    "text": "contains node or python or or whatever that kind of thing and so Lambda creates these base images which we um which are",
    "start": "807320",
    "end": "813639"
  },
  {
    "text": "publicly available on Docker Hub and elastic container registry and see you're not starting from scratch you just say I want the Lambda image and",
    "start": "813639",
    "end": "820079"
  },
  {
    "text": "that's got all the Lambda specific code in it as well so your code from your as you before can Lear exactly the same as",
    "start": "820079",
    "end": "826519"
  },
  {
    "text": "it is yeah makes it really easy to get started with building your functions you're not just starting from an operating system and have to craft",
    "start": "826519",
    "end": "832160"
  },
  {
    "text": "everything yourself so when we should not use containers because they are",
    "start": "832160",
    "end": "837759"
  },
  {
    "text": "lovely but yeah containers are lovely but I think some of the challenges uh people get to",
    "start": "837759",
    "end": "845399"
  },
  {
    "text": "when they think about containers with lamba is that original point we were making about what what a container is",
    "start": "845399",
    "end": "851040"
  },
  {
    "text": "because people think oh I'm just running a container in Lambda any container in Lambda that's not entirely true it needs",
    "start": "851040",
    "end": "857480"
  },
  {
    "text": "to be a container that Lambda works with or that's supports that can work with",
    "start": "857480",
    "end": "862600"
  },
  {
    "text": "Lambda because Lambda is an event driven uh application construct and architecture your container needs to be",
    "start": "862600",
    "end": "869399"
  },
  {
    "text": "able to support that an event driven basically means is an event that comes in your code does some processing and then Returns the returns the result so",
    "start": "869399",
    "end": "876440"
  },
  {
    "text": "maybe here we can stop for a second and talk a little bit on how we Define this",
    "start": "876440",
    "end": "882279"
  },
  {
    "text": "connection because in the vanilla Lambda scenario we have our infrastructure and",
    "start": "882279",
    "end": "888440"
  },
  {
    "text": "we say hey the input the function that we are going to start is in this file in",
    "start": "888440",
    "end": "893920"
  },
  {
    "text": "this method go from there and then we have our Handler file that has that",
    "start": "893920",
    "end": "899199"
  },
  {
    "text": "initially that method that will start the whole function and that's the event",
    "start": "899199",
    "end": "904680"
  },
  {
    "text": "driven part that we love from Lambda how we do that in containers do we need to change the code how how it work uh you",
    "start": "904680",
    "end": "911880"
  },
  {
    "text": "don't actually need to change your code if you're using the manage run times and you're just pulling that image layer down your code doesn't need to change at",
    "start": "911880",
    "end": "918839"
  },
  {
    "text": "all and you're just setting up basically a configuration option um for your Lambda function which can either be in",
    "start": "918839",
    "end": "924279"
  },
  {
    "text": "the which can either be within the docker file or it's just going to use the defaults for Lambda so say you're using a python uh function if you're",
    "start": "924279",
    "end": "931920"
  },
  {
    "text": "using the the python managed container image layer you just write your code and",
    "start": "931920",
    "end": "937319"
  },
  {
    "text": "you don't have to do anything but what you can actually also do is specify well actually um make sure that my Handler is",
    "start": "937319",
    "end": "943279"
  },
  {
    "text": "this file and this function within that file and then off you and or you can go and lots of people use that not just for",
    "start": "943279",
    "end": "949079"
  },
  {
    "text": "a single function but sometimes they're going to have multiple python functions a Lambda function to confuse that kind of thing and so you could have the same",
    "start": "949079",
    "end": "955839"
  },
  {
    "text": "file artifact or same container artifact and then going into different functions depending on your hand say",
    "start": "955839",
    "end": "961480"
  },
  {
    "text": "different ways to configure it um you can either configure it within your um within the configuration of your land a",
    "start": "961480",
    "end": "966759"
  },
  {
    "text": "function or within or set it within your do file yeah but it's the same idea so",
    "start": "966759",
    "end": "972000"
  },
  {
    "text": "when you have your your application in a container image you still need to tell Lambda what is the input uh the starting",
    "start": "972000",
    "end": "980040"
  },
  {
    "text": "point of that function so well we do that also for any kind of application we need to tell the server where to start",
    "start": "980040",
    "end": "987639"
  },
  {
    "text": "so similar for lamb but that's an important thing because uh sometimes we just oh let's put an express application",
    "start": "987639",
    "end": "994000"
  },
  {
    "text": "here we can run containers on Lambda no yeah not that straightforward going on",
    "start": "994000",
    "end": "999920"
  },
  {
    "text": "on the sort of the the specifics of how Lambda works that when when your function code runs it's going to take an",
    "start": "999920",
    "end": "1005519"
  },
  {
    "text": "input and that's going to be the the trigger that launched the Lambda function and that's going to be if you're it's behind an API well it's",
    "start": "1005519",
    "end": "1011959"
  },
  {
    "text": "going to be that API event if it's pulling a message off a que it's going to be the format of that message from a",
    "start": "1011959",
    "end": "1017120"
  },
  {
    "text": "queue if it is a you uploaded something to S3 and that's going to invoke the Lambda function well it's going to be",
    "start": "1017120",
    "end": "1022319"
  },
  {
    "text": "the metadata object that comes from S3 and so a Lambda function has an event which uh is that event we've been",
    "start": "1022319",
    "end": "1028079"
  },
  {
    "text": "talking about and then some contact information which is just some metadata about the the inbook and so your code",
    "start": "1028079",
    "end": "1033558"
  },
  {
    "text": "needs to be able to handle that as a container and you know so there's no point running you know server full",
    "start": "1033559",
    "end": "1040360"
  },
  {
    "text": "things inside your Lambda function such as a full exay app or or all that kind of thing so that's sort of one of the",
    "start": "1040360",
    "end": "1046240"
  },
  {
    "text": "differences with um with running Lambda and the other is just one of the constraints with Lambda is Lambda",
    "start": "1046240",
    "end": "1051600"
  },
  {
    "text": "functions can only run for 15 minutes and that idea is born from the fact that Lambda functions are there to do a piece",
    "start": "1051600",
    "end": "1057400"
  },
  {
    "text": "of work and they're going to return the they're going to then return the result back and you know hopefully it's going",
    "start": "1057400",
    "end": "1062559"
  },
  {
    "text": "to be within 15 well needs to be within 15 minutes obviously if you're running a full sort of more so a full workflow",
    "start": "1062559",
    "end": "1068880"
  },
  {
    "text": "within a container such as a flask or an Express app or some kind of really long running process that's going to run over",
    "start": "1068880",
    "end": "1074480"
  },
  {
    "text": "15 minutes that's not going to be suitable for Lambda so you know you maybe want to be thinking about some",
    "start": "1074480",
    "end": "1079520"
  },
  {
    "text": "other solution or maybe reducing the size or splitting up that job to do it within 15 minutes so it can",
    "start": "1079520",
    "end": "1086280"
  },
  {
    "text": "be so a lot of customers who taking applications and you know lift and shifting into the cloud and thinking I",
    "start": "1086280",
    "end": "1091720"
  },
  {
    "text": "can just take that container that does a long running process or uses you know",
    "start": "1091720",
    "end": "1096919"
  },
  {
    "text": "maybe specific Hardware features or runs an Express app as is and to just Port",
    "start": "1096919",
    "end": "1102080"
  },
  {
    "text": "that to Lambda yeah that's not going to quite work straight out the box but it's it's not going to be that easy that difficult to change the same with ations",
    "start": "1102080",
    "end": "1109240"
  },
  {
    "text": "that whenever we choose if we use Lambda or we use fargate we have to apply here",
    "start": "1109240",
    "end": "1114679"
  },
  {
    "text": "because the long running processes if it's not a driven if like uh fully lift",
    "start": "1114679",
    "end": "1120520"
  },
  {
    "text": "and shift well it's a stateless service so well all this kind of considerations that we have for traditional functions",
    "start": "1120520",
    "end": "1127799"
  },
  {
    "text": "we need to have in this case because at the end of the day it's the same way of running the application so and that one",
    "start": "1127799",
    "end": "1134600"
  },
  {
    "text": "that with with addition of that wonderful thing you mentioned earlier about the mutability and one of the of the container images you have full",
    "start": "1134600",
    "end": "1140400"
  },
  {
    "text": "control over it but then that means Lambda isn't going to automatically patch the the function for you so you do",
    "start": "1140400",
    "end": "1145840"
  },
  {
    "text": "need to build something into your you know delivery life cycle your cicd process when a new version of node comes",
    "start": "1145840",
    "end": "1151440"
  },
  {
    "text": "out or new operating system patch comes out that you can just regenerate that container image hopefully you've got",
    "start": "1151440",
    "end": "1156760"
  },
  {
    "text": "some good testing so you can just do some of that automatically but yeah that is one of the one of the differences between a container image on Lambda and",
    "start": "1156760",
    "end": "1163679"
  },
  {
    "text": "just the the previous Z Point yeah so now we cover a little bit",
    "start": "1163679",
    "end": "1169240"
  },
  {
    "text": "the pros cons when to use it and we dive a little bit on how we develop this so",
    "start": "1169240",
    "end": "1175679"
  },
  {
    "text": "we said that we need to have a specification that's kind of something",
    "start": "1175679",
    "end": "1181200"
  },
  {
    "text": "that changed so when we are developing this function uh we will create a specification file uh and there you",
    "start": "1181200",
    "end": "1188320"
  },
  {
    "text": "mentioned the base uh the base image uh if we want we can put the input for our",
    "start": "1188320",
    "end": "1195600"
  },
  {
    "text": "Handler where it's the starting of our application are something else that we need to put in this",
    "start": "1195600",
    "end": "1202520"
  },
  {
    "text": "specification uh if you if you're doing things as simple not really so if you're going to create your you're going to",
    "start": "1202520",
    "end": "1208000"
  },
  {
    "text": "create an image and it's just going to be basically a Docker file so the the first line of the docker file is going to be from some kind of Base image so",
    "start": "1208000",
    "end": "1216200"
  },
  {
    "text": "you're going to so you're going to say from some kind of Base image say we're talking node so from the node base image",
    "start": "1216200",
    "end": "1222520"
  },
  {
    "text": "your second line in the docker file may be to copy your local and to copy all your local files into their base image",
    "start": "1222520",
    "end": "1229679"
  },
  {
    "text": "and then I mean that's literally the simplest Docker file you're going to have and you may then want to specify what the what the hand method is as as",
    "start": "1229679",
    "end": "1236440"
  },
  {
    "text": "another file so that's going to be really really simple but people who package Docker Docker files know that",
    "start": "1236440",
    "end": "1242080"
  },
  {
    "text": "there's a build process that you can also do in there so that may be running uh you know npm install or pip install",
    "start": "1242080",
    "end": "1247679"
  },
  {
    "text": "if you're in the python world and you know when you when you're building applications there's obviously a lot that you can do and that's fully",
    "start": "1247679",
    "end": "1253159"
  },
  {
    "text": "supported in the docker file so what you can do is in your Docker file you can do you know pull the Bas layer you can then",
    "start": "1253159",
    "end": "1259760"
  },
  {
    "text": "say Oh I'm going to do a pip install for for python then I'm going to copy some files then I'm going to do you know",
    "start": "1259760",
    "end": "1265120"
  },
  {
    "text": "whatever it is in the docker file I'm going to you know change something grab something from another API pull another",
    "start": "1265120",
    "end": "1270440"
  },
  {
    "text": "uh image down which is going to be maybe some machine learning I'm then pull somewhere else and and get some uh you",
    "start": "1270440",
    "end": "1276640"
  },
  {
    "text": "know some um Source data that I want to store in my Docker image as you would in a normal Docker file you can just go",
    "start": "1276640",
    "end": "1282159"
  },
  {
    "text": "step by step by step and pull all the information in to create that sort of artifact and at the end obviously you would add your Lander function code",
    "start": "1282159",
    "end": "1289039"
  },
  {
    "text": "and then you know that hand comment you would want to do Docker also with the docker file land also supports um the",
    "start": "1289039",
    "end": "1296960"
  },
  {
    "text": "the builds where you can um do the oh my brain has G fried with the the",
    "start": "1296960",
    "end": "1302120"
  },
  {
    "text": "multi-stage builds so that's what you can also do is you can instead of actually um you can separate that sort",
    "start": "1302120",
    "end": "1308120"
  },
  {
    "text": "of process of uh having a the build part of your Docker file and then the actual imagration part of your Docker file so",
    "start": "1308120",
    "end": "1314600"
  },
  {
    "text": "some people need to install a whole bunch of tools to be able to build their Docker file so I can do that with a minimal image you know some people use",
    "start": "1314600",
    "end": "1321360"
  },
  {
    "text": "Alpine or minimal images like that and then they sort of start from scratch again go okay I've got I've got all of",
    "start": "1321360",
    "end": "1326679"
  },
  {
    "text": "that stuff I brought in that's all in in PS I need let me start building my actual final Docker file from the actual",
    "start": "1326679",
    "end": "1333080"
  },
  {
    "text": "node B nodejs sa face image and then I'm just going to copy those pre-compiled or uh you know brought in files and and",
    "start": "1333080",
    "end": "1340200"
  },
  {
    "text": "sort of then build up my so multi-stage builds works really well with do do and",
    "start": "1340200",
    "end": "1346480"
  },
  {
    "text": "when developing also an important thing is testing um is there some difference",
    "start": "1346480",
    "end": "1351919"
  },
  {
    "text": "on how we test this type of applications using Docker images than how we test the",
    "start": "1351919",
    "end": "1358080"
  },
  {
    "text": "traditional Severus functions uh yes in a good way that actually I think it probably makes a",
    "start": "1358080",
    "end": "1363760"
  },
  {
    "text": "little bit easier to test your um Docker files locally because you can just use Docker run and so there are lots of",
    "start": "1363760",
    "end": "1370799"
  },
  {
    "text": "other solutions for running zip files locally and you can use Sam or service framework or some cdk functionality to",
    "start": "1370799",
    "end": "1377520"
  },
  {
    "text": "to do it but that's not the tools maybe you're normally using so when you're actually developing Lander functions you",
    "start": "1377520",
    "end": "1383919"
  },
  {
    "text": "can do it literally fully in Docker and you can um run that Docker image there's",
    "start": "1383919",
    "end": "1389120"
  },
  {
    "text": "a little emulator you add in which pretends to be the sort of land API and that's also just another line you put in",
    "start": "1389120",
    "end": "1395000"
  },
  {
    "text": "your Docker file and so yeah means you can do Docker run locally two ways I",
    "start": "1395000",
    "end": "1400360"
  },
  {
    "text": "actually like to run it one is when I'm ready sort of developing from scratch and I actually don't know quite know",
    "start": "1400360",
    "end": "1405559"
  },
  {
    "text": "what's going on in that function what I can actually do is I can sort of live run that Docker image and I can just um",
    "start": "1405559",
    "end": "1412520"
  },
  {
    "text": "Connect into that Docker image and then literally live type you know line by line installing kind of things H copying",
    "start": "1412520",
    "end": "1417880"
  },
  {
    "text": "some code and just sort of iterating while I'm in the sort of uh um while I'm into the container and because it's",
    "start": "1417880",
    "end": "1424200"
  },
  {
    "text": "locally I'm not limited by any 15 minute timeouts or any kind of thing I'm just running something in a container and",
    "start": "1424200",
    "end": "1430000"
  },
  {
    "text": "that's really useful for testing out your whole build process fast because no need to go to the cloud you can do it a",
    "start": "1430000",
    "end": "1436520"
  },
  {
    "text": "channel in your Subway or in an airplane yes and then the second state",
    "start": "1436520",
    "end": "1441880"
  },
  {
    "text": "is so you know once you got your build process done in your container what you can do is just run it locally in a bit more in automated fashion where you uh",
    "start": "1441880",
    "end": "1449679"
  },
  {
    "text": "you create a mock input for example Lambda function and you you then send that to The Container it does its",
    "start": "1449679",
    "end": "1455080"
  },
  {
    "text": "processing and then Returns the result and so the container runs spins up does its work and then sort of spins down afterwards and that sort of formulates",
    "start": "1455080",
    "end": "1461679"
  },
  {
    "text": "the way that lambda's going to work and here is the same caveats that with any LDA function or with any application",
    "start": "1461679",
    "end": "1468080"
  },
  {
    "text": "that connects to it all the services if you are connecting in your function to Dynamo or s3e or S SNS whatever we are",
    "start": "1468080",
    "end": "1477039"
  },
  {
    "text": "local so either you make that connection to the cloud or you mock it uh but that",
    "start": "1477039",
    "end": "1482880"
  },
  {
    "text": "happens with any application that we are running locally that we need to be aware of that so that's something it's not",
    "start": "1482880",
    "end": "1489520"
  },
  {
    "text": "like this Docker file it's mical and we lemolate the whole AWS cloud in your computer it just runs the function and",
    "start": "1489520",
    "end": "1496559"
  },
  {
    "text": "if the function is to communicate with outside work well you need to do that and and because of the way Docker works",
    "start": "1496559",
    "end": "1502240"
  },
  {
    "text": "there also cool ways that you can sort of inject credentials into your Docker image so when it runs it can you know",
    "start": "1502240",
    "end": "1508080"
  },
  {
    "text": "create a create use another role or use some sort of session credentials that's actually really useful as well that you",
    "start": "1508080",
    "end": "1513919"
  },
  {
    "text": "can have this you know one of the packaging cool things about Docker is it all is all isolated and separate from",
    "start": "1513919",
    "end": "1519440"
  },
  {
    "text": "your local machine you just inject your credentials in do your database connection or whatever and you can prove",
    "start": "1519440",
    "end": "1524919"
  },
  {
    "text": "that it works yeah so now we developed this amazing application how we put it in the cloud yeah so the way that uh",
    "start": "1524919",
    "end": "1532840"
  },
  {
    "text": "your local Docker file gets connected to the Lambda service is by uploading the image to Amazon elastic container",
    "start": "1532840",
    "end": "1539120"
  },
  {
    "text": "registry so that's a uh AWS managed container registry sort of like Doc doah",
    "start": "1539120",
    "end": "1544200"
  },
  {
    "text": "Hub but it's aws's um at the moment Lambda only supports images from elastic container registry but as you use your",
    "start": "1544200",
    "end": "1551720"
  },
  {
    "text": "normal command line utility you do a Docker tag tag your image Docker push pushes up uh up to the repository you're",
    "start": "1551720",
    "end": "1557799"
  },
  {
    "text": "going to do and then when you configure your Lambda function your configuration of your Lambda function is actually you know what that Docker image I just",
    "start": "1557799",
    "end": "1564760"
  },
  {
    "text": "created you just point it to that and you sort of done so that's the that's the cool part of it so when Lambda then",
    "start": "1564760",
    "end": "1570480"
  },
  {
    "text": "deploys that function it is going to pull Lambda service is going to pull that image from ECR and is then going to",
    "start": "1570480",
    "end": "1575760"
  },
  {
    "text": "run your Lambda function based on that image so yeah twostep process but for people building any kind of container",
    "start": "1575760",
    "end": "1581120"
  },
  {
    "text": "image that's a normal way you would develop it you don't need any other AD tuning and just use your do yeah and",
    "start": "1581120",
    "end": "1588360"
  },
  {
    "text": "create the image they need to use awli or the Lambda part of it to actually build from that image yeah and many of",
    "start": "1588360",
    "end": "1593919"
  },
  {
    "text": "the Frameworks support that so if you're using Sam or cdk or something like that it's pretty straightforward to to behind",
    "start": "1593919",
    "end": "1600919"
  },
  {
    "text": "the scenes you don't even notice even worry but I think now the most interesting part is the running this",
    "start": "1600919",
    "end": "1608200"
  },
  {
    "text": "thing because well we talk about developing we put it in the cloud now it's a function nobody's using it so now",
    "start": "1608200",
    "end": "1615000"
  },
  {
    "text": "Marcia comes and do API gway call to that function and wakes it up for the",
    "start": "1615000",
    "end": "1621960"
  },
  {
    "text": "first time what happens well this is when we when we uh talk back to 10 gig",
    "start": "1621960",
    "end": "1628559"
  },
  {
    "text": "when people are going hang on obviously the most important thing that a lot of people worry about is cold starts with Lambda and cold STS are scar like oh you",
    "start": "1628559",
    "end": "1638360"
  },
  {
    "text": "you must be absolutely crazy and I I I have a huge machine learning model or I have you know the python based image or",
    "start": "1638360",
    "end": "1644760"
  },
  {
    "text": "or Java or net like are you people crazy because that's going to be ridiculously",
    "start": "1644760",
    "end": "1649799"
  },
  {
    "text": "uh scary for cold starts no so before I go into the the why not um just to explain about cold",
    "start": "1649799",
    "end": "1656720"
  },
  {
    "text": "starts and cold starts is as your code uh starts up in a in the Lambda in what",
    "start": "1656720",
    "end": "1662240"
  },
  {
    "text": "we call execution environment and that is just the isolated little microv VM that runs your Lambda code obviously you",
    "start": "1662240",
    "end": "1669000"
  },
  {
    "text": "know node has got to start up or Python's got to start up maybe you've got to make a database connection maybe",
    "start": "1669000",
    "end": "1674080"
  },
  {
    "text": "you've got to pull some secret from somewhere and then your code is going to run for inoke so those sort of first",
    "start": "1674080",
    "end": "1679440"
  },
  {
    "text": "initial steps is going to happen every single time that your Lambda function runs uh um and yet that's going to take",
    "start": "1679440",
    "end": "1685760"
  },
  {
    "text": "some time but that's as with all normal coding practices you know that's just just the way it happens uh it can be a",
    "start": "1685760",
    "end": "1691320"
  },
  {
    "text": "little bit more exacerbated in Lambda because obviously you're running more of these contain more of these execution",
    "start": "1691320",
    "end": "1696760"
  },
  {
    "text": "environments but the cool thing is actually is the more of them you run the actual fewer cold starts you get because",
    "start": "1696760",
    "end": "1702799"
  },
  {
    "text": "once you do a cold start and land is going to then run your invoke and next time an invoke comes in doesn't need to",
    "start": "1702799",
    "end": "1708159"
  },
  {
    "text": "run that c St process is just going to go and run your function hand the code if the execution environment is",
    "start": "1708159",
    "end": "1713640"
  },
  {
    "text": "Idle yeah yeah so uh this is an issue for some developers because some",
    "start": "1713640",
    "end": "1718720"
  },
  {
    "text": "developers are testing their functions and they deploy a new version of the function to the cloud and then they run the function and they go cold s okay and",
    "start": "1718720",
    "end": "1726080"
  },
  {
    "text": "then they do some feaking I deploy another for deploy the same function in a new version get a cold s they're like",
    "start": "1726080",
    "end": "1731200"
  },
  {
    "text": "this is going to be bad when I'm running production but actually because Lambda",
    "start": "1731200",
    "end": "1736240"
  },
  {
    "text": "is reusing these execution environments for subsequent invokes the busier application is the fewer cult SS you're",
    "start": "1736240",
    "end": "1742399"
  },
  {
    "text": "going to get and that is a bit counterintuitive and we talked to many customers and customers are running",
    "start": "1742399",
    "end": "1747519"
  },
  {
    "text": "these Lambda functions at reasonable scale you know whether it's high scale or low scale reasonable scale see sort",
    "start": "1747519",
    "end": "1753679"
  },
  {
    "text": "of between half a percent and 1% of cold starts so you know less than 1% of your",
    "start": "1753679",
    "end": "1759039"
  },
  {
    "text": "function invokes are going to be cold starts and rarely that actually only matters if you're running synchronous",
    "start": "1759039",
    "end": "1764600"
  },
  {
    "text": "workloads because then your client is waiting for a response you're doing some batch processing or stream processing or",
    "start": "1764600",
    "end": "1771200"
  },
  {
    "text": "some asynchronous process where you eventually need to update a database you don't really care about the cold starts",
    "start": "1771200",
    "end": "1776679"
  },
  {
    "text": "so it's not it's not as big a deal as people as people think so that's the",
    "start": "1776679",
    "end": "1781760"
  },
  {
    "text": "sort of history and and sort of why Cold starts matter in what it is so the free cart is like okay when I do a zip",
    "start": "1781760",
    "end": "1788760"
  },
  {
    "text": "function when the function runs it copies up that 250 make that's going to take some time 10 G you must be",
    "start": "1788760",
    "end": "1795000"
  },
  {
    "text": "absolutely insane there's no way I'm going to wait around for that so as part of this release Lambda came out with I",
    "start": "1795000",
    "end": "1802240"
  },
  {
    "text": "think is some of the coolest technology that I've seen in Lambda and this is one of the cool things with Lambda is that",
    "start": "1802240",
    "end": "1807679"
  },
  {
    "text": "there's just a whole bunch of stuff optimizations behind the scenes that you don't know about or you don't need to",
    "start": "1807679",
    "end": "1812960"
  },
  {
    "text": "know about and we just make things faster and more efficient for you so two things one is container images are",
    "start": "1812960",
    "end": "1820320"
  },
  {
    "text": "actually pretty uh AR pretty full so even though you can have up to 10 gig",
    "start": "1820320",
    "end": "1826120"
  },
  {
    "text": "function um most content most container um sizes are actually really small and",
    "start": "1826120",
    "end": "1831840"
  },
  {
    "text": "actually what's used out that function is even tinier so even if you are you know using Java or net or or that kind",
    "start": "1831840",
    "end": "1838360"
  },
  {
    "text": "of thing and you pull down that uh immediate layer and then your function code in terms of the actual amount of",
    "start": "1838360",
    "end": "1845320"
  },
  {
    "text": "bites that are going to be read from that container image is really tiny and so if you're using you know net Java",
    "start": "1845320",
    "end": "1851399"
  },
  {
    "text": "whatever runtime it is even node you're not using all of node or like everything that's possible that python could do so",
    "start": "1851399",
    "end": "1858200"
  },
  {
    "text": "what the first thing Lambda did is understood that well actually we don't need to download the whole container",
    "start": "1858200",
    "end": "1863639"
  },
  {
    "text": "image we only need to pull the things as you need as you need to use them so if you're going to use some Library within",
    "start": "1863639",
    "end": "1869760"
  },
  {
    "text": "node well what it's going to do is it's going to pull that image uh as you use it and that's sort of called it's like",
    "start": "1869760",
    "end": "1875240"
  },
  {
    "text": "lazy loading yeah instead of having to download the whole image before even running your function uh Lambda can just",
    "start": "1875240",
    "end": "1881840"
  },
  {
    "text": "say Well when your function code runs I'm going to be able to pull the things that you need and that can become really",
    "start": "1881840",
    "end": "1887320"
  },
  {
    "text": "efficient and that means that the amount of data that you're pulling down is literally probably 80 to 90% less and so",
    "start": "1887320",
    "end": "1893919"
  },
  {
    "text": "that's also uh you know super useful that you're not pulling the whole 256 250 Meg for for a zip AR function it's",
    "start": "1893919",
    "end": "1901080"
  },
  {
    "text": "literally only the data that you going to access I don't know if this is something that we have benchmarked",
    "start": "1901080",
    "end": "1906480"
  },
  {
    "text": "internally but I have seen some tweets of people running container images faster than the traditional seat Imes uh",
    "start": "1906480",
    "end": "1913880"
  },
  {
    "text": "and it's like okay this is the magic on how it works works because in your",
    "start": "1913880",
    "end": "1920240"
  },
  {
    "text": "traditional vanilla Lambda functions you pull everything down and in here you just pull exactly what you need so you",
    "start": "1920240",
    "end": "1926639"
  },
  {
    "text": "might be pulling like a few mags and boom you're ready to go uh so that's it",
    "start": "1926639",
    "end": "1932039"
  },
  {
    "text": "even get better because if you think of a lot of different functions that if you're using the nodejs manage runtime",
    "start": "1932039",
    "end": "1938399"
  },
  {
    "text": "or Java manage runtime how many different customers and how many different functions actually using the same manage run time so why when your",
    "start": "1938399",
    "end": "1945799"
  },
  {
    "text": "function run do you need runs do you need to copy all that information down so the second call state is where lamp",
    "start": "1945799",
    "end": "1952399"
  },
  {
    "text": "actually caches a lot of that information so the for the uh so for example if you were to build a node js20",
    "start": "1952399",
    "end": "1958880"
  },
  {
    "text": "runtime today using a container image I'm pretty confident that there are one or two other customers who are already",
    "start": "1958880",
    "end": "1964440"
  },
  {
    "text": "using the nodejs 20 image and so that is probably cached all through the Lambda Fleet and so when your function first",
    "start": "1964440",
    "end": "1972000"
  },
  {
    "text": "starts and it says oh I need to pull something from no this one it's have this one and that they multiple levels",
    "start": "1972000",
    "end": "1978080"
  },
  {
    "text": "of the cach and one of the levels of the cach is literally on the host on the actual server that runs your runs your",
    "start": "1978080",
    "end": "1983200"
  },
  {
    "text": "code so you know there's no even nothing to download even if Lambda has said oh",
    "start": "1983200",
    "end": "1988279"
  },
  {
    "text": "you're going to need to use that functionality that's in the cash and so that's going to be uh that's going to be super fast yeah so this is in a natural",
    "start": "1988279",
    "end": "1996320"
  },
  {
    "text": "a little bit of the magic of how we can run container images on functions but",
    "start": "1996320",
    "end": "2002919"
  },
  {
    "text": "before finishing this uh episode I want to let know the audience that we leave a",
    "start": "2002919",
    "end": "2008880"
  },
  {
    "text": "lot of the resources to Deep dive and to go into hands on with these things in",
    "start": "2008880",
    "end": "2015480"
  },
  {
    "text": "the description of this episode because well this just a short introduction but",
    "start": "2015480",
    "end": "2020799"
  },
  {
    "text": "you should try it you should explore it it's not hard and we are still on this pay and you use mode so you can have",
    "start": "2020799",
    "end": "2028000"
  },
  {
    "text": "your containers running in the free tier of Lambda with no problem so yeah so that's also yeah that's so",
    "start": "2028000",
    "end": "2035760"
  },
  {
    "text": "easy to so easy to play with it and uh and yeah the the speed thing is just so cool because uh we will put the link",
    "start": "2035760",
    "end": "2042399"
  },
  {
    "text": "in the show notes but there you know there's some public papers describing how this all works so even though it's",
    "start": "2042399",
    "end": "2047960"
  },
  {
    "text": "under the hood in Lambda you know we we explain it really well and the scientific papers showing how it all",
    "start": "2047960",
    "end": "2053079"
  },
  {
    "text": "puts together and yeah we we cash stuff in and in fact we've come up with a whole cool way that we can actually um",
    "start": "2053079",
    "end": "2059560"
  },
  {
    "text": "cash things across multiple different functions entirely securely without having to um share any information",
    "start": "2059560",
    "end": "2065440"
  },
  {
    "text": "between different functions of different customers so for example we talk about the node a 20",
    "start": "2065440",
    "end": "2070839"
  },
  {
    "text": "manage runtime coming down really quickly if you've got a python package or a node package that someone else is",
    "start": "2070839",
    "end": "2076079"
  },
  {
    "text": "used even though we don't have visibility into different people's functions the way uh we can manage it on",
    "start": "2076079",
    "end": "2081720"
  },
  {
    "text": "the on the system is we can uh use some clever caching technologies that we can dup across functions without functions",
    "start": "2081720",
    "end": "2088960"
  },
  {
    "text": "knowing about each other that sounds a bit like absolutely impossible um but yeah it's a part of it called converion",
    "start": "2088960",
    "end": "2094679"
  },
  {
    "text": "encryption which always sounds like a full name and so yeah just so many different ways we can we can cat this",
    "start": "2094679",
    "end": "2099720"
  },
  {
    "text": "and Mak make it faster and as Mara said um you know for many Lambda functions um",
    "start": "2099720",
    "end": "2104880"
  },
  {
    "text": "you know when they like it's actually faster on the container image than the ziar C because we take advantage of this",
    "start": "2104880",
    "end": "2111480"
  },
  {
    "text": "Cas yeah and I think with that we can close this episode uh for today it was",
    "start": "2111480",
    "end": "2117320"
  },
  {
    "text": "lovely chatting with you Julian I hope the audience enjoy this and learn uh",
    "start": "2117320",
    "end": "2122880"
  },
  {
    "text": "something new at least I hope because this is a very interesting topic that",
    "start": "2122880",
    "end": "2128280"
  },
  {
    "text": "many organizations are taking the benefit of because we all know containers uh and we have tooling for it",
    "start": "2128280",
    "end": "2135079"
  },
  {
    "text": "so why not to embrace it with L so thank you very much no thanks B always happy",
    "start": "2135079",
    "end": "2141240"
  },
  {
    "text": "to chat and yeah try it out it's really easy if you're container person and you're thinking lambda's going to be a",
    "start": "2141240",
    "end": "2146400"
  },
  {
    "text": "bit weird because it's all a bit different well now the Two Worlds emerged and you can just use your your container images to build your lamb",
    "start": "2146400",
    "end": "2151760"
  },
  {
    "text": "functions and uh hopefully it'll be a really great experience for you and yeah lots of resources in the notes which you",
    "start": "2151760",
    "end": "2157000"
  },
  {
    "text": "can de uh dealt deep into how to Works yes thank you bye thank you bye-bye",
    "start": "2157000",
    "end": "2162119"
  },
  {
    "text": "thanks for listening to this episode of the goto podcast head over to",
    "start": "2162119",
    "end": "2167880"
  },
  {
    "text": "goop.in and software development",
    "start": "2168319",
    "end": "2172880"
  },
  {
    "text": "[Music]",
    "start": "2173450",
    "end": "2181808"
  }
]