[
  {
    "start": "0",
    "end": "60000"
  },
  {
    "text": "Hello, everyone, and welcome back to \nGOTO Unscripted. My name is James Lewis,   and I'll be talking today, I'll be in conversation \nwith Richard Feldman. Welcome, Richard Feldman. I  ",
    "start": "13840",
    "end": "24000"
  },
  {
    "text": "think we're just gonna explore some ideas around \nthings like language design, because Richard will   introduce himself in a moment, but is the creator \nof the programming language Roc, and author of  ",
    "start": "24000",
    "end": "32439"
  },
  {
    "text": "the wildly successful, I'm told, he paid me \nto say that, \"Elm in Action.\" But, yeah. So,  ",
    "start": "32440",
    "end": "37600"
  },
  {
    "text": "we'll just have a conversation about languages, \nand programming in general, I guess. But, welcome.   Richard, maybe you could introduce yourself.\nI created the Roc programming language, which  ",
    "start": "37600",
    "end": "47560"
  },
  {
    "text": "is still kind of a work in progress. But I wrote \nthe book \"Elm in Action,\" and also spent a lot of  ",
    "start": "47560",
    "end": "52840"
  },
  {
    "text": "time with Rust. And later in the conference, I'm \ngonna be talking about Rust and Zig, and, sort of   together. Very interesting language design. You \nwere telling earlier, before the cameras were  ",
    "start": "52840",
    "end": "62760"
  },
  {
    "start": "60000",
    "end": "471000"
  },
  {
    "text": "rolling, about how you were there when Rich \nHickey announced Clojure, at the conference.  I was. I was at JAOO, I think it was still \nJAOO at the time, in Aarhus, in Denmark. Rich  ",
    "start": "62760",
    "end": "74560"
  },
  {
    "text": "turned up and sort of blew everyone away with \nthis announcement of Clojure. And obviously,   it's been pretty successful since. We've had many \nprojects in Thoughtworks that have used Clojure  ",
    "start": "74560",
    "end": "85800"
  },
  {
    "text": "over the years. And I know there's a consultancy, \nJUXT, in London, that is very successful as a pure  ",
    "start": "85800",
    "end": "93440"
  },
  {
    "text": "Clojure consultancy, actually, in the fintech, \nmainly in the fintech industry. What do you think?   I mean, it'd be interesting to get your take on \nthat. Do you think there are different domains  ",
    "start": "93440",
    "end": "101720"
  },
  {
    "text": "where different languages are more or less suited?\nWell, there certainly seems to be an element  ",
    "start": "101720",
    "end": "107040"
  },
  {
    "text": "of suitability, but there also seems to be an \nelement of just, sort of, cultural momentum. Like,   something will get traction in a particular \ndomain. Maybe it is, maybe it isn't, like,  ",
    "start": "107040",
    "end": "116560"
  },
  {
    "text": "especially well-suited for it, but then it just \nsort of perpetuates. So, the example that comes   immediately to mind is Rails and Ruby.\nRight. ",
    "start": "116560",
    "end": "122960"
  },
  {
    "text": "I mean, if you were to zoom out and \nsay, aliens land, and they're gonna   pick which of the programming languages \nare gonna become big in web development,  ",
    "start": "122960",
    "end": "130360"
  },
  {
    "text": "I don't know why anyone would say, \"Well, it's \ngonna be the one created by the Japanese guy   that's only big in Japan right now, that's, \nthe tagline is, 'Let's make programming fun.'  ",
    "start": "130360",
    "end": "138120"
  },
  {
    "text": "That's what's gonna be used widely in industry, \nyou know, and blow up in the next 10 years.\" I   don't think anyone would have predicted that.\nSo, I don't think it's necessarily just about,  ",
    "start": "138120",
    "end": "146480"
  },
  {
    "text": "you know, like, how well-suited it is, it's, \nlike, the perfect fit, as much as it is, like,   well, you know, one person, like DHH, made \nRails, that resonated with a lot of people,  ",
    "start": "146480",
    "end": "157480"
  },
  {
    "text": "and because Ruby was the language that he chose \nto make that in, yeah, he could have made it in   Python. And he would probably say, \"Nothing \nelse but Ruby would have inspired me to make  ",
    "start": "157480",
    "end": "165159"
  },
  {
    "text": "Rails.\" But I think you could pretty easily make \nthe case that someone could have made something  ",
    "start": "165160",
    "end": "170480"
  },
  {
    "text": "as successful as Rails in a different language.\nThe thing, you mentioned Python. That's super   interesting. Because I remember when Rails \nwas massively taking off. And in North America  ",
    "start": "170480",
    "end": "180760"
  },
  {
    "text": "in particular, and in India, Rails became a \nhuge thing. I mean, our founder at the time,  ",
    "start": "180760",
    "end": "186560"
  },
  {
    "text": "was very taken with it, and some very persuasive \npeople were talking about it. Obie Fernandez,  ",
    "start": "186560",
    "end": "192480"
  },
  {
    "text": "for example. And it seemed that we suddenly had \na load of projects in North America and India  ",
    "start": "192480",
    "end": "199599"
  },
  {
    "text": "using Rails. And we still do. I think the world's \nlargest Rails project was a Thoughtworks project  ",
    "start": "199600",
    "end": "204440"
  },
  {
    "text": "in Atlantic City, maybe.\nReally? But the weird thing is, it didn't spread to the \nrest of the countries that we're present in. So,  ",
    "start": "205360",
    "end": "214080"
  },
  {
    "text": "the UK was, still, remains still very \nmuch a Python shop. So, maybe it's not   just a domain-specific application. There's \nalso, like, a geographical thing going on  ",
    "start": "214080",
    "end": "224920"
  },
  {
    "text": "Well, I think you could generalize that to \nculture. Certain pockets of culture might   be geographic or might be just other things, \nthat contribute to those things. I've spent an  ",
    "start": "224920",
    "end": "235400"
  },
  {
    "text": "increasing amount of time over my career, like, \nlearning about, like, why things get adopted and   why they don't. And the more I learn about it, \nthe more reasons I discover. And it seems like  ",
    "start": "235400",
    "end": "244519"
  },
  {
    "text": "there's just an inordinate amount of variables. \nAnd as programmers, we like to look for simple   solutions and simple explanations for things. But, \nmuch like with...I would say another true thing,  ",
    "start": "244520",
    "end": "254400"
  },
  {
    "text": "where I, the more I get into it, the more \nvariables I discover, has been, like,   performance optimization, where, like, when I \nwas in school, you know, all the focus was on  ",
    "start": "254400",
    "end": "262360"
  },
  {
    "text": "big O notation, and, like, what's the asymptotic \ncomplexity of this algorithm and stuff like that.  And now I'm like, \"That's, like, this much \nof it.\" That's the tip of an extremely large  ",
    "start": "262360",
    "end": "273400"
  },
  {
    "text": "iceberg. Similarly, with adoption, languages or \ntechnologies in general, it's like, you know,  ",
    "start": "273400",
    "end": "281720"
  },
  {
    "text": "I would have thought, you know, early on, \nit's like, \"Oh, well, people use that because   that's the best thing for it. What else \nis there?\" And it's all these cultural,  ",
    "start": "281720",
    "end": "287960"
  },
  {
    "text": "and, all these timing, factors that come into it.\nI remember doing a thing with one of my colleagues  ",
    "start": "287960",
    "end": "295039"
  },
  {
    "text": "about program language adoption. And certainly, it \nwas as much about culture availability as anything  ",
    "start": "295040",
    "end": "302400"
  },
  {
    "text": "else, it seemed. You know, are you better off \npicking something where you know there's a lot  ",
    "start": "302400",
    "end": "308199"
  },
  {
    "text": "of people out there who you can just hire for it? \nOr, another example would be, a counter-example,  ",
    "start": "308200",
    "end": "314600"
  },
  {
    "text": "you know, we had a publishing client who \ndeliberately chose Scala because it meant  ",
    "start": "314600",
    "end": "321240"
  },
  {
    "text": "that they could offer a fun, or more, potentially \nmore, \"fun\" programming environment for developers  ",
    "start": "321240",
    "end": "326759"
  },
  {
    "text": "to come in because they couldn't pay the same \nrates as the banks. So, there's this almost, like,   trade-off is, do you offer this more interesting, \nexciting environment, versus, okay, just, yeah,  ",
    "start": "326760",
    "end": "335880"
  },
  {
    "text": "whatever it is, thousand euros a day for just \na standard job for the developer in a bank.  I think that's an underrated trade-off, is that \nif you're a company and you're considering a novel  ",
    "start": "335880",
    "end": "346000"
  },
  {
    "text": "technology, and I've talked about this before \nin other settings, but this is something like,   you know, at my previous job and my current job, \nwe both have used Elm on the front end as, like,  ",
    "start": "346000",
    "end": "355520"
  },
  {
    "text": "the entire front end, not just, like, a little \npart of it. Embracing that means that you get  ",
    "start": "355520",
    "end": "362080"
  },
  {
    "text": "to be very selective about who you hire. We just \nfilled a front-end role, and the recruiter was   talking to me about, yeah, we, you know, hired \nthis guy, and it was close. We had to decide  ",
    "start": "362080",
    "end": "370760"
  },
  {
    "text": "between him and, like, you know, a couple of \nother people who wanted this role. Usually,   it's the other way around, where employers are \nlike, \"I just wanna find anybody who can fit  ",
    "start": "370760",
    "end": "379639"
  },
  {
    "text": "this description that meets our criteria, and \nit's really hard to find people.\" But you flip   the script when you're offering a technology \nthat people wanna use, but that not a lot of  ",
    "start": "379640",
    "end": "388440"
  },
  {
    "text": "employers are using. And that's almost sort \nof like a, you know, self-fulfilling prophecy,  ",
    "start": "388440",
    "end": "394840"
  },
  {
    "text": "in the sense that if enough employers do \nthat, then it flips back around. But then,  ",
    "start": "394840",
    "end": "400120"
  },
  {
    "text": "by then, it's mainstream, so then it's not notable \nanymore, and now you are saying, \"Oh, well, I can   just find lots of people to do it, because it's \nbecome mainstream.\" But I think most people are  ",
    "start": "400120",
    "end": "408400"
  },
  {
    "text": "aware of that side of the dynamic, but they're not \nfamiliar with what happens before a language gets   mainstream and what the dynamic's like over there.\nI guess the big question is, did the person you  ",
    "start": "408400",
    "end": "417080"
  },
  {
    "text": "hired have 25 years of Elm experience?\nWell, let's see, Elm was created   in 2011, so yes. Of course.\nWhich, I guess, when it comes to Elm,  ",
    "start": "417080",
    "end": "426599"
  },
  {
    "text": "I'm gonna throw my hands up and profess to not \ngenerally being any good at all at front-end  ",
    "start": "426600",
    "end": "433080"
  },
  {
    "text": "software development.\nThat's fine.  It's not something I've done in my career, to \nbe honest. Any front end that I program tends   to look like a bad implementation \nof Excel. That's pretty much it.  ",
    "start": "433080",
    "end": "441520"
  },
  {
    "text": "Well, Excel is not an easy thing \nto implement, so, you know.  Well, funnily enough, coming back to Ruby, \nthe creator of RSpec, Nicholas Nielsen,  ",
    "start": "441520",
    "end": "450600"
  },
  {
    "text": "showed me an implementation of a spreadsheet \nwritten entirely in the const_missing method. ",
    "start": "450600",
    "end": "458680"
  },
  {
    "text": "Wow.\nBecause if you think about   having a spreadsheet, you have to be addressing \nthe, you know, by capital letter first. If you  ",
    "start": "458680",
    "end": "465000"
  },
  {
    "text": "didn't have that defined as a..\nOh, that's hilarious. Wow.  And you could do all the \ncalculations in “const_missing”.",
    "start": "465000",
    "end": "470520"
  },
  {
    "start": "471000",
    "end": "672000"
  },
  {
    "text": "Have you been surprised at the adoption \nof Elm and how successful it's been?  Yes, but maybe not in the way you might guess. \nSo, I would have thought that it would have been  ",
    "start": "474800",
    "end": "483440"
  },
  {
    "text": "sort of all or nothing. I would have thought \nthat either a language like Elm would just   take over the world, or it would just peter out \ninto nonexistence, and people would, you know,  ",
    "start": "483440",
    "end": "492000"
  },
  {
    "text": "walk away from it. Because I've seen that happen \nwith various languages. Like, TypeScript would   be an example of taking over the world. That's \nhappening right now. And then CoffeeScript would  ",
    "start": "492000",
    "end": "501320"
  },
  {
    "text": "be an example of something that sort of petered \nout and, you know, is not used anymore. Elm seems  ",
    "start": "501320",
    "end": "507240"
  },
  {
    "text": "to have sort of, like, found a solid niche. \nThere's just, like, a chunk of people who are   like, \"Yes, this is how I wanna do front-end \ndevelopment,\" but it doesn't seem like it's  ",
    "start": "507240",
    "end": "514760"
  },
  {
    "text": "on track to take over the world. It seems like \nit's on track to be... Well, it already is, like,   a self-sustaining thing, and it seems like it's on \ntrack to sustain. So, that's something that we've  ",
    "start": "514760",
    "end": "524039"
  },
  {
    "text": "seen with a lot of backend languages. There are \nplenty of backend languages that are not, like,   no language has taken over the whole backend. \nThere's just, like, people have preferences  ",
    "start": "524040",
    "end": "531680"
  },
  {
    "text": "on the backend world. Whereas on the front end, \nit's very much been, you can use any programming  ",
    "start": "531680",
    "end": "537560"
  },
  {
    "text": "language you want, as long as it's a JavaScript \ndialect. Like, it could be JavaScript or it could   be TypeScript or it could be CoffeeScript, all \nof which has the tagline, \"It's just JavaScript,\"  ",
    "start": "537560",
    "end": "545440"
  },
  {
    "text": "or implicitly in the case of JS itself.\nAll of the other ones have been, like, kind of  ",
    "start": "545440",
    "end": "551280"
  },
  {
    "text": "niche players. But if you think about it, I mean, \nlike, on the backend, it's really common to have   a language that has, like, low market share, but \nis, like, quite a healthy, active community, with  ",
    "start": "551280",
    "end": "559360"
  },
  {
    "text": "lots of people in it. It's just on the front end, \nthat's, like, a weird thing to be. And Elm being a  ",
    "start": "559360",
    "end": "564680"
  },
  {
    "text": "front-end-focused language, I just never guessed \nthat. I thought it was, like, oh, it's either   gonna take over or it's gonna peter out. I didn't \nexpect it to become more like a backend language,  ",
    "start": "564680",
    "end": "573800"
  },
  {
    "text": "in that it's just, yeah, there's a chunk of \npeople who like to do it this way, and it's fine.  You mentioned TypeScript. So, that's \nthe elephant in the room in some ways,  ",
    "start": "573800",
    "end": "581080"
  },
  {
    "text": "right? So what would you ascribe to...can you see, \nsort of, any particular reasons that TypeScript  ",
    "start": "581080",
    "end": "589160"
  },
  {
    "text": "has sort of eaten the world, or there's some \ndiscussion about it at the moment? They're both,  ",
    "start": "589160",
    "end": "595680"
  },
  {
    "text": "on the surface, surface, fairly similar ideas.\nElm and TypeScript? Or...? Which two things? ",
    "start": "595680",
    "end": "604240"
  },
  {
    "text": "Well, so, essentially taking something that's \ngonna be able to be used in the browser,  ",
    "start": "604240",
    "end": "610080"
  },
  {
    "text": "but offers may be a safer, allegedly more \nproductive perspective on programming front end. ",
    "start": "610080",
    "end": "616000"
  },
  {
    "text": "I think, like, when I think about comparing Elm \nto JavaScript and TypeScript to JavaScript, and   I guess also TypeScript to Elm, like, TypeScript \nand JavaScript, I mean, TypeScript is really like,  ",
    "start": "616880",
    "end": "626240"
  },
  {
    "text": "\"This is gonna feel like JavaScript, but with \ntypes.\" Elm is like, \"I am a programming language,   and I run in the browser.\" It has no relation \nto JavaScript other than, like, as a compilation  ",
    "start": "626240",
    "end": "634520"
  },
  {
    "text": "target. So, you mentioned, like, Clojure earlier. \nI would liken Elm to Clojure, except, like,  ",
    "start": "634520",
    "end": "640400"
  },
  {
    "text": "even more separated from the hosts. Like, Clojure \nis very much like, \"I'm a programming language,   but I intentionally have some Java-like elements \ninside,\" but I don't think anyone who's written  ",
    "start": "640400",
    "end": "649360"
  },
  {
    "text": "Clojure and has written Java would say, like, \"Oh, \nthis is a Java dialect,\" you know? But they do,  ",
    "start": "649360",
    "end": "654640"
  },
  {
    "text": "like, share data structures and things. Whereas \nElm, it's even less than that. It's just kind   of like, well, we use the same, like, string \nrepresentation under the hood and stuff like that,  ",
    "start": "654640",
    "end": "662720"
  },
  {
    "text": "but that's kind of about it. It's, like, \nthis feels like a different programming   language. Whereas TypeScript feels like this \nis a new take on JavaScript, I would say.",
    "start": "662720",
    "end": "671560"
  },
  {
    "text": "I guess that's maybe, it's a good comparison, \nI think, with Clojure as well, because if you   look at something like two different JVM \nlanguages, like Clojure and Scala, say,  ",
    "start": "671560",
    "end": "678480"
  },
  {
    "start": "672000",
    "end": "770000"
  },
  {
    "text": "I mean, most people's entry point into Scala was \nprogramming Java without semicolons. That was the   old joke, wasn't it? And, whereas Clojure is a \nfundamentally different paradigm, a fundamentally  ",
    "start": "678480",
    "end": "689600"
  },
  {
    "text": "different way of approaching writing code.\nThat's a good point. I've talked to people in the   Scala community who talk about there being sort \nof three different ways that people do Scala. So,  ",
    "start": "689600",
    "end": "699000"
  },
  {
    "text": "one is, like, Java++, or Java without semicolons, \nmaybe. Another is, I want a hybrid OOFP language.  ",
    "start": "699000",
    "end": "707360"
  },
  {
    "text": "I want a language that has a lot of OO support \nand a lot of FP support, and I'm gonna use them   together. And I can't get that from Java, so Scala \nis the way to go. And then the third group is,  ",
    "start": "707360",
    "end": "716000"
  },
  {
    "text": "I want Haskell, but my boss won't let me \nuse it, so I'm gonna use Scala as my Haskell   stand-in, and that's also a popular way of using \nit. But I don't see the same thing in Clojure or  ",
    "start": "716000",
    "end": "727120"
  },
  {
    "text": "Elm. It's like, pretty much it's like, nobody's \nusing Clojure as, like, Lispy Java. Everyone's  ",
    "start": "727120",
    "end": "732320"
  },
  {
    "text": "using it as, like, Clojure. The same thing in Elm.\nWould you say... Maybe a bit random,   but so, I remember a few years ago, when Google \nfirst, sort of, publish is the wrong word,  ",
    "start": "732320",
    "end": "738759"
  },
  {
    "text": "but created and then started talking about Dart, \nthe programming language. We act that in...we  ",
    "start": "738760",
    "end": "744160"
  },
  {
    "text": "have a thing called the Thoughtworks Technology \nRadar, which every six months, we sort of take new   stuff and sort of think about it and assign \nit, like, an assess or trial or hold. And,  ",
    "start": "744160",
    "end": "754240"
  },
  {
    "text": "at the time we sort of said, we put Dart on \nhold, on the basis that we were super worried  ",
    "start": "754240",
    "end": "761320"
  },
  {
    "text": "that adoption was gonna be limited by the fact \nthat other browsers weren't gonna jump on board,  ",
    "start": "761320",
    "end": "767160"
  },
  {
    "text": "right? Because it was very much a Chrome...\nWith the VM part of it?  The VM part of it, yeah, yeah, yeah. \nAnd of course, that's now come back,  ",
    "start": "767160",
    "end": "772640"
  },
  {
    "start": "770000",
    "end": "912000"
  },
  {
    "text": "right? I mean, it shows what we knew. Like, \nsome years later, we now have Flutter,   which is kind of, you know, very much being \nadopted quite rapidly at the moment. I kind  ",
    "start": "772640",
    "end": "782280"
  },
  {
    "text": "of find that kind of interesting, where you've \ngot something that sort of, at one point in time,  ",
    "start": "782280",
    "end": "788400"
  },
  {
    "text": "wasn't the right time for it to be adopted, but \nthen later on, it suddenly is the right time.",
    "start": "788400",
    "end": "798520"
  },
  {
    "text": "Well, I think that's a great story. That's \nthe...I mean, Dart, to me, fits the same  ",
    "start": "798520",
    "end": "805400"
  },
  {
    "text": "category of adoption as Ruby, where it existed \nfor quite a while like Ruby was just big in   Japan for a while. Ruby was created to be, like, \n\"Let's make a language...\" I mean, Matz was like,  ",
    "start": "805400",
    "end": "814360"
  },
  {
    "text": "\"I wanna make a language that's fun to program.\" \nThat was the word he used. I mean, Dart, as I   understand it, was created, basically, because of \nthe VM, because Lars Bock, you know, had done V8,  ",
    "start": "814360",
    "end": "823640"
  },
  {
    "text": "and was frustrated by how difficult it was to \ndo certain optimizations around JavaScript,   and he was thinking, \"If we just had a different \nlanguage that felt a lot like JavaScript,  ",
    "start": "823640",
    "end": "833080"
  },
  {
    "text": "but which was different in certain very specific \nways, we could make a much more efficient VM   implementation out of it,\" and that was kind \nof the motivation behind creating Dart. And,  ",
    "start": "833080",
    "end": "842760"
  },
  {
    "text": "you know, if you think about it, why would people \nwant to adopt that unless you're a VM author?   It's like, okay, but I'm over here doing my web \ndevelopment job. What's the pitch to me? I don't,  ",
    "start": "842760",
    "end": "851880"
  },
  {
    "text": "you know, care about how easy it is to optimize \nthe VM or how optimized it can be. I just...   Especially since, you know, you and your team, \nLars, did such a good job making V8 a lot faster.",
    "start": "851880",
    "end": "862280"
  },
  {
    "text": "Thank you, Eric, as well.\nWhat's in it for me to switch from JavaScript or  ",
    "start": "862280",
    "end": "869200"
  },
  {
    "text": "CoffeeScript, which was big at the time, to Dart? \nBut then the answer comes with Flutter. And again,  ",
    "start": "869200",
    "end": "874760"
  },
  {
    "text": "you could make the point, Flutter didn't have to \nbe implemented in Dart, but it was, the same way   that Rails didn't have to be implemented in Ruby, \nbut it was. And that, I mean, if you look at what  ",
    "start": "874760",
    "end": "882959"
  },
  {
    "text": "percentage of Dart usage in the industry is not \nFlutter, I would guess it's very small, similar to  ",
    "start": "882960",
    "end": "890520"
  },
  {
    "text": "Ruby and Rails. I mean, it's, like, overwhelmingly \nRails, it's overwhelmingly Flutter. So,   the term I use for this is, like, this is, like, \nthe killer app adoption explanation, is, like,  ",
    "start": "890520",
    "end": "898920"
  },
  {
    "text": "there's some application of the language that's \nso popular that it just brings the language's   popularity along for the ride because people wanna \nuse that thing, and that thing is implemented in  ",
    "start": "898920",
    "end": "907959"
  },
  {
    "text": "that language, and they want it so bad they'll use \nwhatever language it happens to be implemented in. That's quite a nice segue for me to \ngo to talk a little bit about Rust,  ",
    "start": "907960",
    "end": "916440"
  },
  {
    "start": "912000",
    "end": "1553000"
  },
  {
    "text": "maybe. Because you mentioned about your new \nlanguage, Roc, that you're writing. We'll come   on to that maybe in a minute.\nSure, sure, yeah. ",
    "start": "916440",
    "end": "922319"
  },
  {
    "text": "But you mentioned the fact that the compiler is \nwritten in Rust, and that's another... I mean,   I think, well, we are starting to see, in \nterms of Thoughtworks, and our clients,  ",
    "start": "922320",
    "end": "930960"
  },
  {
    "text": "adoption in very specific areas, for Rust. \nSpecifically, there's lots of interest,   for example, in automotive, or, you know, sort \nof safety-critical systems and these kinds of  ",
    "start": "930960",
    "end": "940960"
  },
  {
    "text": "things. What made you choose Rust yourself?\nThis is going to bring a little of my talk  ",
    "start": "940960",
    "end": "948960"
  },
  {
    "text": "into this conversation.\nNo, that's cool. This'll   be published a lot later, so...\nBasically, it's important to me that  ",
    "start": "948960",
    "end": "958040"
  },
  {
    "text": "the Roc compiler be very, very fast. I want it to \nrun as fast as possible, and I certainly did not   want to get to a point where I'd built this whole \ncompiler out... I say \"me,\" because that's what I  ",
    "start": "958040",
    "end": "967680"
  },
  {
    "text": "was thinking at the time. Now it's a bunch of \npeople working on it, and a lot of them are   better at this stuff than I am. But, you know, I \ndidn't wanna end up with a compiler that was very  ",
    "start": "967680",
    "end": "976200"
  },
  {
    "text": "feature-complete and very done, and then we're \nlike, \"And we can't take any more performance   out of it because of the language we've chosen, \nthat is, like, garbage-collected and whatnot,  ",
    "start": "976200",
    "end": "984800"
  },
  {
    "text": "and there's just this ceiling we cannot possibly \nexceed, no matter how many hours of performance   we put into it, unless we rewrite it in, \nlike, a Rust or a C or C++ or something.\" ",
    "start": "984800",
    "end": "992600"
  },
  {
    "text": "And I thought, \"I don't want that to happen. \nI want this to be as fast as it can be,   and I don't wanna hit that ceiling.\" So, that \nmeant one of a couple of different options. One  ",
    "start": "992600",
    "end": "1002000"
  },
  {
    "text": "was to do C or C++, which I'd had some really bad \nexperiences with earlier in my life around, like,  ",
    "start": "1002000",
    "end": "1007360"
  },
  {
    "text": "getting memory unsafety-related bugs that were \npainful to track down. And I was, like, well,  ",
    "start": "1008800",
    "end": "1015240"
  },
  {
    "text": "the pitch of Rust is that you have the maximum \nmemory ceiling, but, somehow, and I didn't really   knot the time, somehow, they do compiler things \nto help you not run into those problems. And so I  ",
    "start": "1015240",
    "end": "1026000"
  },
  {
    "text": "thought, \"Well, that seems like kind of the only \ngame in town that fits all my criteria. There's   no performance ceiling, and yet I'm not going \nto get these memory unsafety bugs that are a  ",
    "start": "1026000",
    "end": "1034839"
  },
  {
    "text": "nightmare to track down.\" So, I took the plunge, \nand I'd done a little, like, toy thing in Rust,  ",
    "start": "1034840",
    "end": "1041400"
  },
  {
    "text": "or I'd built a command-line app that I'd never \nquite finished before. So I had a feeling for the   language, and I was like, okay, I can get this. \nI can stumble through it. And now I feel very  ",
    "start": "1041400",
    "end": "1050280"
  },
  {
    "text": "comfortable in Rust. But when I started, it was \nlike, just because I had this list of criteria,   and that was the one language that fit them all.\nAnd you got to choose as well, which is  ",
    "start": "1050280",
    "end": "1059360"
  },
  {
    "text": "the nice thing, right?\nYes. Very important.   I remember my colleague, Erik \nDoernenburg, he's based in Germany,  ",
    "start": "1059360",
    "end": "1067240"
  },
  {
    "text": "he's a head of tech at the moment in Germany. \nAnd he did a great talk at one of these events   on Rust. And it was back at the time when \nnot that many people were adopting it. So,  ",
    "start": "1067240",
    "end": "1076480"
  },
  {
    "text": "it was quite early on. [inaudible 00:17:54] \nand it was a bit of an overview on why Rust,   and, again, actually why some of the other \nlanguages that have started to appear around,  ",
    "start": "1076480",
    "end": "1084760"
  },
  {
    "text": "which, you know, like Go and, oh God, I \nalways forget the Apple one, Swift, is it?",
    "start": "1084760",
    "end": "1090080"
  },
  {
    "text": "Yes, Swift.\nAnd why they,   you know, what problems they were attempting to \nsolve, you know, which is around memory safety.  ",
    "start": "1090080",
    "end": "1097320"
  },
  {
    "text": "It's something like, I can't remember the exact \nnumber, but some very high proportion of bugs... ",
    "start": "1097320",
    "end": "1103459"
  },
  {
    "text": "Seventy percent of CVEs, yeah.\n...at Microsoft. There you go, right? So,   yeah, I mean, this was around that. But he did \nthis lovely little thing at the end of it, where  ",
    "start": "1103459",
    "end": "1108680"
  },
  {
    "text": "I think he...he didn't...it wasn't Conway's, it \nwasn't Game of Life, but it was a similar kind of  ",
    "start": "1108680",
    "end": "1113960"
  },
  {
    "text": "agent-based kind of implementation. And he always \nuses that when he's learning a new language,  ",
    "start": "1113960",
    "end": "1120039"
  },
  {
    "text": "right? You need something, you know, you need some \nframework to understand when you're learning a   new language. And he started running it, and he \nwas sort of running multiple iterations of it,  ",
    "start": "1120040",
    "end": "1128559"
  },
  {
    "text": "and he was looking at the performance. He \nwas like, this is a lot, lot faster than the,   I think it was a JavaScript implementation, \nridiculously faster, orders of magnitude  ",
    "start": "1128560",
    "end": "1137160"
  },
  {
    "text": "faster. But he thought, \"Actually, I thought \nit'd be better than this.\" And he realized  ",
    "start": "1137160",
    "end": "1142640"
  },
  {
    "text": "he hadn't turned off, and I'm gonna get \nthis wrong, but he hadn't turned off the,   there's some kind of, like, setting in Rust, \nI think, which you can turn off. It's, like,  ",
    "start": "1142640",
    "end": "1152520"
  },
  {
    "text": "\"production mode\" versus...does that make sense?\nOh, yes. This is an optimization flag, yeah.  Right. And he'd forgotten to use \nthat. And then suddenly it was,  ",
    "start": "1152520",
    "end": "1158039"
  },
  {
    "text": "like, three orders and four orders of magnitude \nfaster. Which I quite like as an idea, yeah. ",
    "start": "1158040",
    "end": "1163160"
  },
  {
    "text": "That sounds about right. That \nflag makes a big difference. ",
    "start": "1163160",
    "end": "1166720"
  },
  {
    "text": "Maybe let's generalize it. There's Rust in \nparticular, which is spiky, I'm told. I've   only read some books. I've not made any serious \nattempt to learn it. But I'm informed it's quite  ",
    "start": "1170040",
    "end": "1182000"
  },
  {
    "text": "spiky. There's quite an adoption curve. How do \nyou go about adopting or learning new languages? ",
    "start": "1182000",
    "end": "1189748"
  },
  {
    "text": "Yeah, so....\nOr do you know enough now that   you just go, \"Oh, it's that sort of thing?\"\nWell, it's funny, because you mentioned,   like... I know a lot of people who like to do \nthe same, like, \"I'm gonna learn a new language,  ",
    "start": "1189748",
    "end": "1197720"
  },
  {
    "text": "I'm going to pick a project, like Game of Life, \nthat I'm very familiar with, and implement that   in the new language.\" I'm almost the opposite, \nwhere I always need to have some specific project  ",
    "start": "1197720",
    "end": "1207800"
  },
  {
    "text": "in mind first, where I'm like, \"I wanna build \nthis in this language,\" or this, whatever the   new technology is, and then that motivates me \nto push through whatever the learning curve is,  ",
    "start": "1207800",
    "end": "1216440"
  },
  {
    "text": "because I'm like, \"Well, I can't get it any other \nway, so I gotta do it.\" Whereas, so, I guess maybe  ",
    "start": "1216440",
    "end": "1222320"
  },
  {
    "text": "I don't tend to just seek to learn languages just \nfor the sake of learning them. It's more like,  ",
    "start": "1222320",
    "end": "1227399"
  },
  {
    "text": "there's some problem I wanna solve. This seems \nlike the right tool. All right, let's go. So,   I don't think I've ever done the...\nAnd picking the easy things,  ",
    "start": "1228200",
    "end": "1235159"
  },
  {
    "text": "right? I'll just write a compiler.\nI'll just write a compiler, which I'd  ",
    "start": "1235160",
    "end": "1240240"
  },
  {
    "text": "never done before either. But, I guess, I don't \nknow, at least for me, the hard part of learning  ",
    "start": "1240240",
    "end": "1247280"
  },
  {
    "text": "something new is generally sort of finding the \nmotivation to climb over these obstacles that I  ",
    "start": "1247280",
    "end": "1252880"
  },
  {
    "text": "hit, whatever they might be. And I also am aware \nof, there's an element of, if you pick a project  ",
    "start": "1252880",
    "end": "1259080"
  },
  {
    "text": "that's too hard and a language that's too hard, \nand, you know, like, those can kind of compound,   for sure. But I had previously done this \nlittle command line app in Rust, where,  ",
    "start": "1259080",
    "end": "1267600"
  },
  {
    "text": "actually, the motivation there was, it was the \nElm test runner, and now there actually is,   somebody else separately went off and, like, did a \ndifferent Elm test runner implementation in Rust.  ",
    "start": "1267600",
    "end": "1279080"
  },
  {
    "text": "But at that point, it was mostly just frustration \nwith Node.js APIs, which is what the one I'd  ",
    "start": "1279080",
    "end": "1285640"
  },
  {
    "text": "written previously was in. And, I one day...\nNot because Node is blazingly fast.  No, it was nothing to do with performance. I wanna \nwrite this in something that has a different set  ",
    "start": "1285640",
    "end": "1296880"
  },
  {
    "text": "of APIs, shall we say. And I didn't really wanna \nuse Go, because I didn't have any particular   interest in Go. And I was like, \"Well, I wanna \nlearn Rust, and I want to have a codebase that I  ",
    "start": "1296880",
    "end": "1305600"
  },
  {
    "text": "can maintain that's not Node.js anymore. So I'm \njust gonna rage rewrite it in Rust.\" And I got,   like, 70% of the way through that, and I was like, \nokay, I have a feel for this language now, and it,  ",
    "start": "1305600",
    "end": "1314640"
  },
  {
    "text": "you know, feels...I'm not great at it, but I at \nleast can stumble my way through doing things.  ",
    "start": "1314640",
    "end": "1320720"
  },
  {
    "text": "And I have this code base that, as happens \nwith many projects at around the 70% mark,   I was sort of, like, okay, yeah, but do I really \nwanna the rest of the work to get this over the  ",
    "start": "1320720",
    "end": "1329080"
  },
  {
    "text": "finish line, and then maintain that codebase \nand then new contributors are not gonna know   what they're doing, and so on, so I ended up kind \nof putting it on the shelf and not finishing it.  ",
    "start": "1329080",
    "end": "1336240"
  },
  {
    "text": "But somebody else separately went and did it.\nI definitely would agree with...the learning  ",
    "start": "1336240",
    "end": "1345080"
  },
  {
    "text": "curve on Rust is a downside. It's quite high, \nand it's also, it's not...like, some languages,  ",
    "start": "1345080",
    "end": "1351960"
  },
  {
    "text": "I think, have a high learning curve because, \nlike Haskell, for example. Haskell, I would say,   has a high learning curve, in part because \nof a lot of the things, you're encountering  ",
    "start": "1351960",
    "end": "1361679"
  },
  {
    "text": "for the first time. I've never heard of these \nconcepts before, I don't know what they're about,   and there's just kind of a lot of stuff to learn. \nIn Rust, I would say the thing that's the hardest  ",
    "start": "1361680",
    "end": "1371600"
  },
  {
    "text": "about the learning curve...and people often talk \nabout \"fighting the borrower checker.\" So, the   borrow checker is kind of Rust's, like, marquee \nfeature. It's what sets it apart from other  ",
    "start": "1371600",
    "end": "1378960"
  },
  {
    "text": "languages. It's what gives you the memory safety. \nBut, at the same time, it's not so much, like,  ",
    "start": "1378960",
    "end": "1384760"
  },
  {
    "text": "you can just sit down and, like, once you wrap \nyour head around the borrow checker, you got it,   and it clicks. It's more like there's just a whole \nlot of things that all fall under the umbrella of  ",
    "start": "1384760",
    "end": "1394200"
  },
  {
    "text": "borrow checker, but there are various scenarios.\nAnd I remember one time, it took me,  ",
    "start": "1394200",
    "end": "1399240"
  },
  {
    "text": "I'm embarrassed to say, like, I think it was, \nlike, two months or something, where I couldn't   figure out how this, part of the compiler was \nblocked, and I couldn't figure out how to do the  ",
    "start": "1399240",
    "end": "1407400"
  },
  {
    "text": "thing I wanted to do. And, you know, the borrower \nchecker gave me an error, and said, \"You can't do   this.\" And I was like, why not? I know this is \npossible. If this were in, like, C or something,  ",
    "start": "1407400",
    "end": "1416440"
  },
  {
    "text": "I would just be like, \"Here, take this thing and \nput it over there. Put it on this thread.\" And   it was like, \"No, you can't do that.\" And I was \nlike, \"Well, why not? Why can't I do that?\" And  ",
    "start": "1416440",
    "end": "1423039"
  },
  {
    "text": "I eventually realized, I was like, wait a minute, \ndo I just need to use, it was IterMut versus Iter.  ",
    "start": "1423040",
    "end": "1429040"
  },
  {
    "text": "And what Iter...the difference is, iterating over \nthese, Iter is, like, I wanna iterate through   these things, and IterMut is, I wanna iterate with \nthe possibility of mutating them. But it didn't  ",
    "start": "1429040",
    "end": "1437880"
  },
  {
    "text": "occur to me to use IterMut because I didn't wanna \nmutate them, at all. But the problem was I needed   to use IterMut to prove to the borrower checker \nthat I had permission to mutate it, which meant  ",
    "start": "1437880",
    "end": "1447520"
  },
  {
    "text": "that it was safe to put it on a thread. So, in \nthis case, mutable was sort of a stand-in for,   \"is uniquely owned by this particular instance.\" \nAnd I switched it to Iter and IterMut, and this  ",
    "start": "1447520",
    "end": "1456640"
  },
  {
    "text": "thing that I had been stuck on for, like, \ntwo months, it was like, \"Okay,\" right? And… I would love to have been in the room  ",
    "start": "1456640",
    "end": "1461840"
  },
  {
    "text": "at the time, it was like, oh my God.\nBut I bring this up as an analogy of  ",
    "start": "1461840",
    "end": "1468000"
  },
  {
    "text": "even though I had that, I already knew the mental \nmodel of what mutable means \"is uniquely owned,  ",
    "start": "1468000",
    "end": "1473560"
  },
  {
    "text": "and therefore has permission to do certain \nthings,\" it hadn't occurred to me that,   I didn't, like, put two and two together \nwith the implications of that, that, like,  ",
    "start": "1473560",
    "end": "1480120"
  },
  {
    "text": "oh, if I want to put these things on threads, I \nneed to IterMut, even though I'm not gonna mutate   them. So, it's just a lot of stuff like that.\nIt's almost like you're being more restrictive  ",
    "start": "1480120",
    "end": "1487440"
  },
  {
    "text": "than you need to, in some senses, right? \nBut because the mental model is, okay,   this is a restrictive memory model, \nso I wanna be overly restrictive  ",
    "start": "1487440",
    "end": "1497160"
  },
  {
    "text": "And I think, in this case, it was more of a \nlanguage terminology thing, in the sense that,  ",
    "start": "1497160",
    "end": "1502400"
  },
  {
    "text": "I think if instead of calling it IterMut, they \ncalled it, you know, IterUnique... I'm not saying  ",
    "start": "1502400",
    "end": "1508360"
  },
  {
    "text": "that they should rename it. It's more just, like, \nif they called it that, I think I would have more   quickly realized, like, \"Oh, yeah. To hand these \nthings out to the threads, they have to be unique  ",
    "start": "1508360",
    "end": "1517240"
  },
  {
    "text": "because the whole point is I don't want them \nto be shared across the threads.\" That's, like,   another aspect of Rust that makes it tricky, \nis that part of what the borrower checker  ",
    "start": "1517240",
    "end": "1524720"
  },
  {
    "text": "does has to do with when things are, like, \navailable in memory, like, when they're in,  ",
    "start": "1524720",
    "end": "1529880"
  },
  {
    "text": "the lifetimes of, like, when they're alive \nand when they're, you know, can be reclaimed.  Also about mutation access, like, this thing can \nor cannot mutate it. Also, multi-threading and,  ",
    "start": "1530600",
    "end": "1540120"
  },
  {
    "text": "like, which things have permission to \nmutate things, which has to do with, like,   preventing data races, in addition to memory \nsafety. So, there's just a lot of different  ",
    "start": "1540120",
    "end": "1548360"
  },
  {
    "text": "things that all kind of come together, and put \nit all together, you get a big learning curve.",
    "start": "1548360",
    "end": "1555080"
  },
  {
    "start": "1553000",
    "end": "1668000"
  },
  {
    "text": "You've spent a lot of time building this \ncompiler. But the aim of it, presumably,  ",
    "start": "1555080",
    "end": "1563519"
  },
  {
    "text": "is to compile this new language. So, maybe you can \ntalk a bit about Roc, and what makes it unique...  Yes.\n...and why?  ",
    "start": "1563520",
    "end": "1569159"
  },
  {
    "text": "Why do you decide to write a new language?\nFor Roc, the tagline is \"Fast, friendly,   functional.\" And I was just talking \nto Dave Thomas, and he mentioned  ",
    "start": "1569160",
    "end": "1577360"
  },
  {
    "text": "that he knows someone who made another \nlanguage. I think it was, was it K maybe?  Yes.\nRichard Feldman:, the  ",
    "start": "1577360",
    "end": "1582440"
  },
  {
    "text": "tagline was \"Fast, fun, functional,\" which \nI did not know existed, but it's very,   very close to what I independently came up with. \nBut the basic idea is, I really wanted a language  ",
    "start": "1582440",
    "end": "1593400"
  },
  {
    "text": "that felt like Elm in terms of the ergonomics and \nthe overall user experience, but which is for,  ",
    "start": "1593400",
    "end": "1600120"
  },
  {
    "text": "instead of being focused on browser-based UIs, \nwhich is sort of Elm's bread and butter, I wanted   it for sort of, not just, like, one other domain, \nbut sort of, like, the long tail of domains. So,  ",
    "start": "1600120",
    "end": "1609720"
  },
  {
    "text": "I'm not just thinking about, like, servers \nand commandline apps, although those are the   two things that people are most interested in it \nfor. Or desktop GUI applications, which I'm also  ",
    "start": "1609720",
    "end": "1618480"
  },
  {
    "text": "interested in. But also things like...\nIf you can replace Electron,   the world will be a happier place..\nWell, that's a very big challenge, right? It's  ",
    "start": "1618480",
    "end": "1628039"
  },
  {
    "text": "not an easy thing. There's a reason Electron's \nso popular. But definitely, I've always run into  ",
    "start": "1628040",
    "end": "1634840"
  },
  {
    "text": "these little cases, where it would be, and Vim \nscript is gonna be the one that comes first to   mind. I wanna write a Vim plugin. I don't wanna \nlearn Vim script. I don't wanna use Vim script.  ",
    "start": "1634840",
    "end": "1642720"
  },
  {
    "text": "I've heard, you know, it doesn't have a good \nreputation as a language. But what I wanna use is   I wanna have, like, an Elm-like experience, this \nreally pleasant experience I've had with Elm. But  ",
    "start": "1642720",
    "end": "1652960"
  },
  {
    "text": "Elm, being a focused language, is not ever gonna \nget into that. There's never gonna be an Elm for   Vim script. So I wanted to make a language that \nwas capable of being used in lots of different  ",
    "start": "1652960",
    "end": "1662000"
  },
  {
    "text": "domains, while still feeling like it was, to \nsome extent, domain-focused, like how Elm is.",
    "start": "1662000",
    "end": "1667920"
  },
  {
    "text": "Richard Feldman:So, without getting too much \ninto how we achieve that, there's this basic,   high-level concept of platforms and \napplications. So, what we mean by that,  ",
    "start": "1667920",
    "end": "1676920"
  },
  {
    "start": "1668000",
    "end": "2276000"
  },
  {
    "text": "an application is basically just, like, you know, \nmy project. I'm building a thing. A platform is  ",
    "start": "1676920",
    "end": "1681960"
  },
  {
    "text": "something like a framework, in the sense that \nit's sort of the foundation that you build on.   You never have more than one platform. You always \nhave one. But unlike most languages, in Roc,  ",
    "start": "1681960",
    "end": "1690679"
  },
  {
    "text": "you have to pick a platform. There's no such thing \nas, like, a platformless Roc application, or,   like a, you know, framework list, if you will.\nAnd the reason for that is that platforms,  ",
    "start": "1690680",
    "end": "1699720"
  },
  {
    "text": "although they kind of feel like frameworks, \nthey're scoped differently. So, a framework,   typically, like, let's use Rails for example, \nRails will be in charge of things like database  ",
    "start": "1699720",
    "end": "1708760"
  },
  {
    "text": "access, and how do you do routing, and, like, \nrequest handling and stuff like that. In Roc,  ",
    "start": "1708760",
    "end": "1714240"
  },
  {
    "text": "sure, that would be true too, but also, it's \ngonna be in charge of all of your low-level   IO primitives. So, it's gonna say, here is all the \nthings you can do, in terms of HTTP and, you know,  ",
    "start": "1714240",
    "end": "1724120"
  },
  {
    "text": "database access and this and that. And for a web \nserver, maybe you have, like, the full range,   but you probably don't have, like, reading from \nstandard in on a web server. Does that make sense? ",
    "start": "1724120",
    "end": "1733106"
  },
  {
    "text": "Yes It does. \nMaybe you leave that one out. Now, a better   example, though, is let's say that you wanna make \na platform for, like, a database extension. When  ",
    "start": "1733106",
    "end": "1739559"
  },
  {
    "text": "you're writing a Postgres extension, do you even \nwanna, like, have network access? Do you wanna   have arbitrary file system access? Does that make \nsense? So, the way most languages do this is the  ",
    "start": "1739560",
    "end": "1748960"
  },
  {
    "text": "standard library has all these really low-level \nIO primitives, and then there's certain use cases   where it's like, eh, don't do that. Don't write to \nthat. But a problem this creates in the ecosystem,  ",
    "start": "1748960",
    "end": "1758960"
  },
  {
    "text": "for these, sort of, long tail of use cases, is \nthat you use a library, and that library is like,   \"Oh, I can just, like, create a temp dir, and put \nstuff in there, right? And it's like, I don't know  ",
    "start": "1758960",
    "end": "1767559"
  },
  {
    "text": "if I want you doing that on my database server, \nyou know? And so, the idea is that, by basically  ",
    "start": "1767560",
    "end": "1773120"
  },
  {
    "text": "making it so that you have to pick a platform, \nthe platform says which primitives are available,   the ecosystem will sort of naturally design itself \nto be accommodating to that, and to be aware of  ",
    "start": "1773120",
    "end": "1782080"
  },
  {
    "text": "that, and to be like, \"Oh, if I choose to, you \nknow, use a temp dir or whatever, that's gonna   restrict which platforms I can potentially \nrun on.\" If I read from standard in, that's  ",
    "start": "1782080",
    "end": "1790280"
  },
  {
    "text": "gonna restrict which platforms I can run on.\nAnother thing is that the platforms, because   they're in charge of the IO primitives, they can \nimplement certain, like, sandboxing features. So,  ",
    "start": "1790280",
    "end": "1799040"
  },
  {
    "text": "one example of something that I'd be...I hope \nsomeone builds in Roc, because they now can,   which I would love to use, as a sort of, a sandbox \nscript runner. So, for example, like, this is  ",
    "start": "1799040",
    "end": "1809000"
  },
  {
    "text": "something that Deno has at the language level, \nbut in Roc you can just, anyone can implement   it in user space, which is basically, like, you \nknow, if I download a script from the internet,  ",
    "start": "1809000",
    "end": "1816679"
  },
  {
    "text": "and I run it, I know it might mess up my machine. \nLike, it might give me a virus, it might write to   places on my disk that I didn't want it to \nwrite to. But because in Roc you have this  ",
    "start": "1816680",
    "end": "1825840"
  },
  {
    "text": "platform-application split, if I have a platform \nthat's like, \"I'm a commandline runner, but I'm   a sandbox commandline runner,\" and because I'm in \ncharge of every single one of the IO primitives,  ",
    "start": "1825840",
    "end": "1834240"
  },
  {
    "text": "I can say, \"Yeah, look. I give you access to all \nthe IO primitives, but guess what? If you try to   write to this part of the file system, or you try \nto read from there, I'm gonna prompt the user, and  ",
    "start": "1834240",
    "end": "1843160"
  },
  {
    "text": "there's nothing you can do about it.\" So it's now \nas safe as a web browser, in terms of, you know... ",
    "start": "1843160",
    "end": "1848200"
  },
  {
    "text": "That's very interesting. \nBut at the command line. And   I would love to have that, because I run stuff \nthat I download from the internet all the time,  ",
    "start": "1848200",
    "end": "1853360"
  },
  {
    "text": "and I'm either doing it in a VM, right?\nYou heard it here first, folks. You   shouldn't run stuff you download from...\nYeah, well? And we all do, right? And I  ",
    "start": "1853360",
    "end": "1863000"
  },
  {
    "text": "would love to have something where I just had this \nconfidence that I don't need to audit the whole   thing. I just need to look what platform are you \nusing? Okay, it's the sandbox one. Great. Done. ",
    "start": "1863000",
    "end": "1870040"
  },
  {
    "text": "I think this is a really interesting idea, \nbecause, I mean, I've only sort of come across   this maybe a couple of times before, but it \nseems to have...people aren't talking about  ",
    "start": "1870040",
    "end": "1878960"
  },
  {
    "text": "it. It seems now, but five years ago, there \nwere lots of people talking about unikernels,  ",
    "start": "1878960",
    "end": "1884000"
  },
  {
    "text": "for a different reason. This was about \nsecurity, and about the kind of, you know,  ",
    "start": "1884000",
    "end": "1892240"
  },
  {
    "text": "the different, yeah, the surface, the attack \nsurface area, essentially. Can we limit the   amount of stuff we're gonna compile into our OS \nso that it's not available? You can't even use  ",
    "start": "1892240",
    "end": "1900799"
  },
  {
    "text": "any of it. It's just not there. And I think I \nhad a line at one point that Docker, 30% of the  ",
    "start": "1900800",
    "end": "1906280"
  },
  {
    "text": "way to unikernels. It's like, you know what I \nmean? That was five years ago. I talk about it,   but it seems like, in some ways, a similar idea, \nbut coming at it from a different perspective. ",
    "start": "1906280",
    "end": "1915200"
  },
  {
    "text": "It's definitely about, I mean, I would say \nthe thing that you have in common there is the   idea of security through just, like, absolutely \nnot making things available in the first place,  ",
    "start": "1915880",
    "end": "1924680"
  },
  {
    "text": "rather than having them be available and trying \nto make sure you played Whac-a-Mole and locked   everything down, right? Just saying, like, it's \nnot even there by default, and we are only gonna  ",
    "start": "1924680",
    "end": "1932520"
  },
  {
    "text": "opt into giving you access to the minimal set of \nthings necessary to do whatever you need to do. ",
    "start": "1932520",
    "end": "1938080"
  },
  {
    "text": "Cool. And what sort of language \nis it? Is it a purely functional   language? You said it's functional? \nIt's functional, and I would say, like Elm,  ",
    "start": "1938080",
    "end": "1947120"
  },
  {
    "text": "there's a very heavy focus on usability \nand user friendliness and stuff like that.  ",
    "start": "1947120",
    "end": "1950720"
  },
  {
    "text": "There's different sort of schools of thought \nof, like, functional programming languages. So,   I would say that, like, Haskell is very focused \non, like, mathematics, or at least, like, it  ",
    "start": "1952720",
    "end": "1960600"
  },
  {
    "text": "culturally feels that way. Maybe different people \nwould disagree with that, but... And I would say,  ",
    "start": "1960600",
    "end": "1966799"
  },
  {
    "text": "like, Clojure is a very, like, you know, it's \nall about Lisp, and, like, macros and, like,   these particular set of primitives that are not \nnecessarily required for functional programming,  ",
    "start": "1966800",
    "end": "1976040"
  },
  {
    "text": "but, like, fit together in interesting \nways with functional programming. And,   like, Elm and Roc are very much, like, typed, \npurely functional, very focused on, like,  ",
    "start": "1976040",
    "end": "1984080"
  },
  {
    "text": "having a small set of simple language primitives \nthat work well together, and then nice compiler   error messages and ergonomics and stuff like that.\nI would say we're, on the tooling side,  ",
    "start": "1984080",
    "end": "1995120"
  },
  {
    "text": "we're drawing a lot of inspiration from Go, where \nwe're like, we have the test runner built in,   we have the formatter built in. We wanna make \nit so, you know, you download the Roc binary,  ",
    "start": "1995120",
    "end": "2002920"
  },
  {
    "text": "and then you can just go. You don't need to, \nyou know, pick a bunch of things off the shelf,   you know, to get things that... Everybody \nagrees you should have a testing system,  ",
    "start": "2002920",
    "end": "2011400"
  },
  {
    "text": "but you don't need to go pick one off the shelf. \nIt's like, it's there. It's right there, built in.  And have you taken the same tooling of Go? I mean, \nhave you taken the same decisions around things  ",
    "start": "2011400",
    "end": "2019799"
  },
  {
    "text": "like testing with...or is it Rust? With Rust you, \ntest inline. You have the test in the same file   You can do that, yeah. Yeah. So, we do have \ninline tests. You just, it's, the keyword is  ",
    "start": "2019800",
    "end": "2028320"
  },
  {
    "text": "called \"expect,\" so you can just, like, write \nyour function, right below it, next line,   expect whatever, and then you're done.\nAh, super cool. ",
    "start": "2028320",
    "end": "2034040"
  },
  {
    "text": "Actually, I guess a nice example of ergonomics. \nThis is always something I'd liked. Power Assert   is the one that comes to mind, that I use, and \nI also, back in the day, I did a little bit  ",
    "start": "2034040",
    "end": "2042960"
  },
  {
    "text": "of development with Groovy, and they had that \nbuilt into their tester, and I always thought  ",
    "start": "2042960",
    "end": "2048679"
  },
  {
    "text": "it was cool, is that when you run your tests in \nRoc, you can just write normal booleans. Like,  ",
    "start": "2048680",
    "end": "2054079"
  },
  {
    "text": "you don't need to do, like, assert this or that. \nYou just say, like, you know, expect X equals, you  ",
    "start": "2054080",
    "end": "2059280"
  },
  {
    "text": "know, for X equals five, and that's it. And what \nit'll do is, if that test fails, is it'll show,  ",
    "start": "2059280",
    "end": "2066080"
  },
  {
    "text": "first of all, it'll print out the source code of \nthe actual test that you wrote, and then also,   any named variables that you had, it'll just tell \nyou what their values were. So you don't have to  ",
    "start": "2066080",
    "end": "2074000"
  },
  {
    "text": "go back and be like, \"Oh, wait. What was this \nand that?\" Just trying to give you...and we've   also talked about maybe expanding that a little \nbit to tell you, like, what's on either side of  ",
    "start": "2074000",
    "end": "2080240"
  },
  {
    "text": "the equals, or if you had, like, a less-than, you \nknow, show you those things, because you might   wanna know. Just try to give you the info that \nyou want anyway, and don't make you go back, and,  ",
    "start": "2080240",
    "end": "2087159"
  },
  {
    "text": "like, debug log the test.\nYes, cool.  That's the first thing you usually do anyway, \nright? So might as well save you the trouble. ",
    "start": "2087160",
    "end": "2094960"
  },
  {
    "text": "I was always of the opinion... I don't write as \nmuch code as I used to anymore, has to be said,  ",
    "start": "2096120",
    "end": "2102080"
  },
  {
    "text": "but I was always of the opinion if you \nuse the debugger, you're failing somehow,   but it was a...I come from a very, sort of, \npurist TDD kind of background, if you like, so…",
    "start": "2102080",
    "end": "2113280"
  },
  {
    "text": "Well, but regressions still happen.\nYes, of course.  Yes.\nSo, is it out? Is Roc out now? ",
    "start": "2113280",
    "end": "2122760"
  },
  {
    "text": "I would say it's pre-release. So, we don't have a \nnumbered version yet. You can download a nightly   release. We're in the process of making a real \nwebsite right now. Depending on when you watch  ",
    "start": "2122760",
    "end": "2132319"
  },
  {
    "text": "this, maybe it'll be out. But right now, it, \nlike, as of this exact moment, there's kind   of a placeholder website, that sort of describes \nthe language, but it's very bare-bones. But now  ",
    "start": "2132320",
    "end": "2141920"
  },
  {
    "text": "we've gotten to the point where it's useful for \nthings. So, before this point, like, last year,   I would say, like, \"Well, you can try it out \nand play around with it, but it's not, you know,  ",
    "start": "2141920",
    "end": "2149960"
  },
  {
    "text": "really that useful,\" but now it is useful. I would \nsay it's useful, but very immature and early,   and there are bugs and stuff like that, but you \ncan, like, build stuff with it for real now. And  ",
    "start": "2149960",
    "end": "2160280"
  },
  {
    "text": "now that we're at that point, we're like, \"Okay, \nnow we need a real website, and,\" you know, so   it's ready to be used by early adopters who aren't \nafraid to sort of roll up their sleeves with a new  ",
    "start": "2160280",
    "end": "2170280"
  },
  {
    "text": "technology. But, like, I have a lot of fondness \nfor my time at the beginning of Elm, because,  ",
    "start": "2170280",
    "end": "2176840"
  },
  {
    "text": "on the one hand, when you have a small set of \npeople using the technology, yes, there's sharp   edges and bugs and stuff, and the ecosystem's not \nthere yet. But on the other hand, you know, I used  ",
    "start": "2176840",
    "end": "2187520"
  },
  {
    "text": "to work with Bill Venners, who made ScalaTest, \nand I remember thinking, \"How could you have   made something that's used by so many people?\" \nand I asked him about that, and he's like,  ",
    "start": "2187520",
    "end": "2194480"
  },
  {
    "text": "\"Oh, that's very easy. Back then, there was no \ntesting thing, so I made one.\" And that's how it   is in the early stages of a language. Somebody's \ngotta be the first person to write whatever X is  ",
    "start": "2194480",
    "end": "2203480"
  },
  {
    "text": "for that particular, you know, use case.\nMy career goes back through, you know,   before, my programming career goes back through \nbefore Java, essentially, and that sort of  ",
    "start": "2203480",
    "end": "2211880"
  },
  {
    "text": "completely changed my life, right? So, when Java \ncame out, and the internet, essentially, well, the   World Wide Web, and Java really sort of changed \npretty much the way, I think, many programmers  ",
    "start": "2211880",
    "end": "2223720"
  },
  {
    "text": "went about their job. But the interesting thing \nwith that, and especially in Thoughtworks,   is everything was a first. You know, everything \nyou were doing was a first, in a lot of ways. The  ",
    "start": "2223720",
    "end": "2233200"
  },
  {
    "text": "kind of, the testing frameworks were a first. The \ncontinuous integration servers were a first. The,  ",
    "start": "2233200",
    "end": "2238960"
  },
  {
    "text": "you know, acceptance testing frameworks, like \nSelenium and these, they were a first. All  ",
    "start": "2238960",
    "end": "2245080"
  },
  {
    "text": "these sort of things were, the innovations that \nwere happening were because people were facing,   were hitting these issues, and then kind of trying \nto come up with a way of solving a problem that  ",
    "start": "2245080",
    "end": "2255319"
  },
  {
    "text": "they were experiencing on a day-to-day basis. I \ndo sort of wonder now, are we still seeing that,  ",
    "start": "2255320",
    "end": "2261200"
  },
  {
    "text": "or are all these sort of solved problems \nnow? It's just when we have a new thing,   new language, say, like Roc, we need to \ncreate the test runner for them, you know,  ",
    "start": "2261200",
    "end": "2270040"
  },
  {
    "text": "and there's someone who's gonna be the first \nperson to do that. There's someone who's gonna be   the first person to do X, rather than it being...\nOr, another example would be things like machine  ",
    "start": "2270040",
    "end": "2278320"
  },
  {
    "start": "2276000",
    "end": "2712000"
  },
  {
    "text": "learning, you know, applying engineering \ndiscipline to machine learning. So, you know,   there was a period, not so long ago, where the \nidea that you might version control your model  ",
    "start": "2278320",
    "end": "2287960"
  },
  {
    "text": "was, like, a crazy idea. Why would you think about \ndoing... But that's now a kind of normal thing,   so things are repeatable and so on. Is this \na case of, sort of, we're applying, I guess,  ",
    "start": "2287960",
    "end": "2297960"
  },
  {
    "text": "a set of tested and known patterns \nto the new things? Is that a kind of…",
    "start": "2297960",
    "end": "2303040"
  },
  {
    "text": "I'd say it's a mix. So, an example that comes to \nmind is, so, in Roc, we have a, as far as I know,  ",
    "start": "2303040",
    "end": "2309440"
  },
  {
    "text": "unique, I don't know of any other language that \ndoes it this way, approach to serialization and   deserialization. So, two different ways that \nthis is, like, commonly done today... So,  ",
    "start": "2309440",
    "end": "2317960"
  },
  {
    "text": "there's, like, the JavaScript way, the Ruby way, \nwhere you get some JSON in, and you just say,   like, JSON.parse(), and it's like, cool. Now \nyou have a JavaScript object. And of course,  ",
    "start": "2317960",
    "end": "2325680"
  },
  {
    "text": "the downside of this is, you know, you \nget partway through your program... ",
    "start": "2325680",
    "end": "2330440"
  },
  {
    "text": "Cool, now you have a JavaScript way\nWhat if the JSON doesn't match what you thought it   was gonna match? You're gonna find out about that \neventually, but it might be pretty distant from  ",
    "start": "2331160",
    "end": "2337319"
  },
  {
    "text": "where that original problem happened. So, that's \none way of doing things. Another way of doing   things is, I'm thinking of Rust, but, I mean, I \nknow in Java, you can do it the same way, where  ",
    "start": "2337320",
    "end": "2346520"
  },
  {
    "text": "you have a schema up front, and you say... So, \nthis would be, like, Jackson in Java. So, you say,  ",
    "start": "2346520",
    "end": "2352080"
  },
  {
    "text": "\"Here is exactly what I expect it to look like, \nand, you know, come and parse the JSON, and if it   doesn't match that, fail right away, right there.\"\nSo, that, in terms of, you know, how easy it is to  ",
    "start": "2352080",
    "end": "2362599"
  },
  {
    "text": "debug later, I would say that's easier to debug \nlater. But a downside of that is that you do need   to actually write out the whole schema, and, you \nknow, sort of keep it in sync with your program,  ",
    "start": "2362600",
    "end": "2370560"
  },
  {
    "text": "and so forth. So, something we've introduced \nin Roc, that as far as I know is novel,   is that we kind of have both. So, you can write at \nthe same time... So, you write the equivalent of,  ",
    "start": "2370560",
    "end": "2380720"
  },
  {
    "text": "like, JSON.parse(), and it does just, you don't \nhave to write a schema, but what it does is it  ",
    "start": "2380720",
    "end": "2386640"
  },
  {
    "text": "uses type inference to infer the type that you're \nparsing into, and based on how it's using the rest   of the program. And so it actually will decode it \nright there at the call site, and if it doesn't  ",
    "start": "2386640",
    "end": "2395000"
  },
  {
    "text": "match how you're going to be using it throughout \nthe rest of the program, it fails right away.  That's super interesting.\nYeah. Now, what's interesting about that is that  ",
    "start": "2395000",
    "end": "2402320"
  },
  {
    "text": "that's not specific to JSON. It's something that's \njust, like, we call it, you know, \"decoding\" is  ",
    "start": "2402320",
    "end": "2407640"
  },
  {
    "text": "the general term for it. So, in order to make it \nwork for, let's say, JSON, somebody needs to write  ",
    "start": "2407640",
    "end": "2413599"
  },
  {
    "text": "a particular, like, JSON-aware parser, that works \nwith this framework, so that it can, you know,  ",
    "start": "2413600",
    "end": "2419440"
  },
  {
    "text": "translate between JSON and Roc values. So, on the \none hand, you could look at that and say, \"Well,  ",
    "start": "2419440",
    "end": "2424839"
  },
  {
    "text": "this is just somebody needs to write a JSON parser \nfor Roc.\" But on the other hand, structurally,   it's different from how it's done in \nother languages. It's not like you're just  ",
    "start": "2424840",
    "end": "2431160"
  },
  {
    "text": "translating it into a normal JavaScript object.\nIs there a TypeScript library called io-ts   or something like that?\nI've heard of this, yeah. I believe that  ",
    "start": "2431160",
    "end": "2438599"
  },
  {
    "text": "that works like it works in Java, and in Elm and \nRust, where you do make a schema, and, you know,  ",
    "start": "2438600",
    "end": "2444960"
  },
  {
    "text": "somehow you define, in code, like, you write \nsome code that, you know, does this. I assume,  ",
    "start": "2444960",
    "end": "2450240"
  },
  {
    "text": "I don't know for sure, but I assume that you \neither write it by hand or you run some code that  ",
    "start": "2450240",
    "end": "2456640"
  },
  {
    "text": "generates it or something like that. But as far \nas I know, in TypeScript, it's either you do that,   or else you'd just say JSON.parse(), and, \nyou know, that part's just not type-checked. ",
    "start": "2456640",
    "end": "2465680"
  },
  {
    "text": "Yes, right.\nBut, yeah. But the point being, like, you know,   if you're writing this, it's like, you're doing \nit in a different way than has been done before.  ",
    "start": "2465680",
    "end": "2473640"
  },
  {
    "text": "But on the other hand, it is still just, you \nknow, for JSON, for XML, for CSV, whatever. ",
    "start": "2473640",
    "end": "2478440"
  },
  {
    "text": "It's good. We're talking about functional \nprogramming languages, and we've finally got   to the point where something's a bit monad-like. \nWhich is good, right? Because that is interesting,  ",
    "start": "2479560",
    "end": "2488119"
  },
  {
    "text": "right? That's why I found it interesting about \nTypeScript, and you're parsing stuff over the   wire, and you've got this lovely type safety \nwithin the environment you're working in,  ",
    "start": "2488120",
    "end": "2496920"
  },
  {
    "text": "which is the front end. But, as you say, like, you \ncould be sent garbage that is essentially, you've  ",
    "start": "2496920",
    "end": "2503920"
  },
  {
    "text": "got no way of knowing until you try and parse it, \ndecode it, whatever. So, I kind of like the idea  ",
    "start": "2503920",
    "end": "2509200"
  },
  {
    "text": "that actually there's maybe an attempt to solve \nsome of those problems, where you're actually   being type safe across the entire, I guess, \nback, front end, etc. And across the wire. And  ",
    "start": "2509200",
    "end": "2520640"
  },
  {
    "text": "one thing I do... I did a lot of integration, \na lot of XML parsing in my day. And, you know,  ",
    "start": "2520640",
    "end": "2528680"
  },
  {
    "text": "we used to use XML. We used to... What \nwas it called? XPath, that was the thing.  Oh, yes. I remember that.\nWhere, rather than do the,  ",
    "start": "2528680",
    "end": "2535520"
  },
  {
    "text": "kind of, like, take the schema, basically have \na client that's generated from the schema,   and you kind of, you know, when you receive a \nmessage, you turn that into the object, and if it  ",
    "start": "2535520",
    "end": "2546920"
  },
  {
    "text": "doesn't match the schema, you blow up. You'd say, \ninstead of that, you'd use XPath to just pick out,   and Schematron, actually, was the thing, you \npick out just the bits from the message that you  ",
    "start": "2546920",
    "end": "2555079"
  },
  {
    "text": "wanted, and therefore, you would know if...you \nwere insulated from changes to the schema,  ",
    "start": "2555080",
    "end": "2560880"
  },
  {
    "text": "if you like. So, you know, if someone changed the \nschema, you weren't just suddenly gonna blow up.   Because this is the main problem, right? I mean, \nhow do you avoid that issue, of, essentially just  ",
    "start": "2560880",
    "end": "2568920"
  },
  {
    "text": "falling over in a heap if the thing that turns up \nisn't what you were expecting? So, if it doesn't   conform to...If you can't decode it, right? Do you \njust blow up, and just, like, sorry, we're done? ",
    "start": "2568920",
    "end": "2579240"
  },
  {
    "text": "Well, the default is, I mean, it's not, like, \nthrowing an exception, it's just, like, you get   back a value that says either it succeeded, and \nhere's your answer, or it failed, and then here's,  ",
    "start": "2579760",
    "end": "2587920"
  },
  {
    "text": "you know, the error that it failed with, such as, \nlike, you know, this field is missing or something   like that. So, recovery is sort of up to you as \nthe application author. It's not, you know... I  ",
    "start": "2587920",
    "end": "2596119"
  },
  {
    "text": "don't think there's a one-size-fits-all \nway to recover from data being missing. ",
    "start": "2596120",
    "end": "2600600"
  },
  {
    "text": "Which, it's the compile time versus runtime \nchecking of these things, right? So, that's what  ",
    "start": "2601160",
    "end": "2606920"
  },
  {
    "text": "we used to do. We used to do it at build time. So, \nwe'll generate a library based off a schema, and  ",
    "start": "2606920",
    "end": "2612119"
  },
  {
    "text": "then that library's gonna be quite fragile in the \nface of changes elsewhere, if you like, and you'd   have to recompile your application if someone's \nschema changed somewhere, which is, like, suck. ",
    "start": "2612120",
    "end": "2623600"
  },
  {
    "text": "Now, having said that, if you want to write \nsomething that is more flexible at runtime,   like, you can say, well, it's okay, if this field \nis missing, I wanna default to this or that. You  ",
    "start": "2623600",
    "end": "2631720"
  },
  {
    "text": "can do that, but then at that point, you need to, \nat least in Roc's case, you would need to sort of,   I'm gonna use the term eject, you know, like, \ntranslate the automatic thing that's happening  ",
    "start": "2631720",
    "end": "2641119"
  },
  {
    "text": "into, like, an actual, like, written-out schema, \nlike a decoder that you can then customize. So,  ",
    "start": "2641120",
    "end": "2646760"
  },
  {
    "text": "this is how we do it in Elm, is, like, it's \nalways done that way, which makes it very easy   to customize. Another nice thing about that \nis, if you have it all written out, that it  ",
    "start": "2646760",
    "end": "2655280"
  },
  {
    "text": "means that if you wanna change your variable \nnames or something like that, you can do that   without worrying that you're accidentally causing \na regression in the decoding, which, you know,  ",
    "start": "2655280",
    "end": "2664240"
  },
  {
    "text": "hopefully, a test catches, but it might not.\nBut then again, there's another trade-off there,   which is that when you have it all written \nout, it becomes a little bit more brittle to  ",
    "start": "2664240",
    "end": "2674079"
  },
  {
    "text": "internal changes. Like, so if I need to, like, \nyou know, add a field somewhere that happens to  ",
    "start": "2674080",
    "end": "2679320"
  },
  {
    "text": "be in a data structure that's used quite often \nthroughout this thing, I have to go through and   change it in a bunch of different places. And \nso, certain things, like being synchronized,  ",
    "start": "2679320",
    "end": "2688560"
  },
  {
    "text": "either can be a source of bugs or can be a source \nof convenience, and it's just an innate trade-off.  ",
    "start": "2688560",
    "end": "2693560"
  },
  {
    "text": "But yeah, if you do sort of eject the decoder, \nand have it all written out, then you can be a lot   more flexible in terms of, if the runtime value is \nthis or that, or this is missing but that's not,  ",
    "start": "2694120",
    "end": "2704040"
  },
  {
    "text": "or, you know, I can say, well, I'll accept \nany of these three names here, and I'll just   internally convert them to the same thing. So, \na lot more flexibility if you go that route.",
    "start": "2704040",
    "end": "2712440"
  },
  {
    "start": "2712000",
    "end": "3557000"
  },
  {
    "text": "I feel like we've gone quite deep into some random \npart of the language, which is, like, parsing  ",
    "start": "2712440",
    "end": "2717720"
  },
  {
    "text": "responses. But let's maybe chunk it up a bit. So, \nwhat are you excited about in terms of features?  For Roc?\nFor Roc, yeah. ",
    "start": "2717720",
    "end": "2723720"
  },
  {
    "text": "Great question. I mean, that is, to be fair, one \nof the things I'm excited about. So, in general,  ",
    "start": "2724320",
    "end": "2729640"
  },
  {
    "text": "like, it's 100% type inference, so you can, you \nknow, you don't need to write any type annotations   if you don't want to. I mentioned that, like, \nyou know, it's fast, friendly, functional. So, in  ",
    "start": "2729640",
    "end": "2738920"
  },
  {
    "text": "terms of fast, the thing that I'm excited about, \nthere are two parts to that, one is really fast   compile time. So, we've spent a lot of time doing \nthat. We still have a number of projects to go,  ",
    "start": "2738920",
    "end": "2746880"
  },
  {
    "text": "but one of the things that, I mean, you mentioned, \nlike, TDD earlier, one of my hypotheses for why  ",
    "start": "2746880",
    "end": "2753839"
  },
  {
    "text": "there's a really strong testing culture in Ruby, \nlike, for example, and I think in Python also,  ",
    "start": "2753840",
    "end": "2760120"
  },
  {
    "text": "more so than I've seen in, like, type-checked \nlanguages, I think part of the reason for that   is that you get a really fast feedback loop when \nyou have a dynamic language for two reasons. One  ",
    "start": "2760840",
    "end": "2770400"
  },
  {
    "text": "is that there's no compile step. So, we wanna just \nmake our compiler so fast that you don't notice   it. But the other part of that is that, from a \nworkflows perspective, if I am writing a test in  ",
    "start": "2770400",
    "end": "2779480"
  },
  {
    "text": "Ruby, or let's say I've got a bunch of tests, and \nI'm refactoring something, all my tests go red,  ",
    "start": "2779480",
    "end": "2785080"
  },
  {
    "text": "because, you know, I've changed this thing. Okay, \nfine. Well, I can go and fix them one at a time.   I can go, like, change my implementation, fix \nwhatever, and then they go green one at a time.  ",
    "start": "2785080",
    "end": "2793640"
  },
  {
    "text": "Now, in a type-checked language, the norm, today, \nis that I make my changes and I get a bunch of   type errors, and all of my tests are not runnable \nanymore, until I fix every single one of the type  ",
    "start": "2793640",
    "end": "2802280"
  },
  {
    "text": "errors. So, the whole, like, make the tests green \none at a time by fixing implementation details,   that workflow is inaccessible until you've \nfixed every single one of the type errors. ",
    "start": "2802280",
    "end": "2811040"
  },
  {
    "text": "But quite often, I don't wanna do that. \nI wanna go through and, like, you know,   change the behavior one at a time, and make sure \nthat the new behavior actually passes all the  ",
    "start": "2811040",
    "end": "2818040"
  },
  {
    "text": "tests. And then maybe there's still some leftover \ntype errors because I changed the interface,   but those are just going through and updating, you \nknow, callers to do the new thing. In isolation,  ",
    "start": "2818040",
    "end": "2826720"
  },
  {
    "text": "I still just wanna just do this thing. Or, let's \nsay I'm trying something out because I think the  ",
    "start": "2826720",
    "end": "2832359"
  },
  {
    "text": "new implementation will have better performance, \nor I'm trying something out and I just wanna see   how it feels to use it. Again, I don't wanna have \nto go and fix every single implication of that.  ",
    "start": "2832360",
    "end": "2840520"
  },
  {
    "text": "So, this gets me to another thing that I'm excited \nabout, which is that we've designed the compiler,   it doesn't 100% work this way yet, but we've at \nleast designed it, and, you know, will get to a  ",
    "start": "2840520",
    "end": "2848600"
  },
  {
    "text": "point where this does work this way, where, the \ncompiler always type checks your code, and always  ",
    "start": "2848600",
    "end": "2854480"
  },
  {
    "text": "tells you about problems, but they don't block \nyou. So you can still run even, if it's got type   errors or naming errors or whatever. So, the \nidea is that, much like a dynamic language,  ",
    "start": "2854480",
    "end": "2862600"
  },
  {
    "text": "you still have those workflows available.\nSo, I wanna get that same experience. This is   always something I missed when going from dynamic \nto statically-typed languages, is that workflow  ",
    "start": "2862600",
    "end": "2870720"
  },
  {
    "text": "of, like, I can always run my tests, no matter \nwhat's going on. And I can see which ones fail,   and, you know, if they have a type mismatch, \nfine, that's a failure. Failed test. But only  ",
    "start": "2870720",
    "end": "2878839"
  },
  {
    "text": "if that affects that test. If the type mismatch is \nsome distant part of the codebase, I don't wanna   see that. Don't block me. Just let me run these \ntests, and I'll come back to that later. So, that  ",
    "start": "2878840",
    "end": "2888440"
  },
  {
    "text": "requires sort of building the whole compiler with \nthat in mind. And when I say it's not ready yet,  ",
    "start": "2888440",
    "end": "2893560"
  },
  {
    "text": "it's because there's stuff that has bugs that we \nneed to fix, but really, I'm really excited to use   that, like, when I get to a bigger Roc code base.\nDoes sound like a really interesting feature,  ",
    "start": "2893560",
    "end": "2901760"
  },
  {
    "text": "a cool feature, yeah.\nBecause I like both. I   like having the workflow where, you know, tell me \nabout the type errors up front. And I also like  ",
    "start": "2901760",
    "end": "2908160"
  },
  {
    "text": "the workflow where, you know, sometimes I just \nwanna run the thing and see what the answers are. ",
    "start": "2908160",
    "end": "2912760"
  },
  {
    "text": "It's become quite common, or certainly quite like \nusing, you know, kind of, basically monitoring  ",
    "start": "2914680",
    "end": "2921040"
  },
  {
    "text": "the file system for changes, and running your \ntests every time there's a file system change,   which kind of blows that completely \nout of the water, right? If suddenly  ",
    "start": "2921040",
    "end": "2928240"
  },
  {
    "text": "a type error is gonna stop everything...\nRight. It's like, \"Oh, they all fail. \"  Yeah. Everything's gone, right? \nIt's zero successes, 100% failure.  ",
    "start": "2928240",
    "end": "2934160"
  },
  {
    "text": "No, that's actually really cool. \nSo, one more that, this is in the   design stage, but it's, again, something \nthat we've designed the language around,  ",
    "start": "2934160",
    "end": "2941840"
  },
  {
    "text": "and the platforms and applications, and, also, \nthe fast runtime performance is a big part of   this. But something that I really want to exist \nin the world, and we're gonna make it happen,  ",
    "start": "2941840",
    "end": "2949839"
  },
  {
    "text": "is... So, package ecosystems, I think, are one of \nthe, after, like, garbage collection, have been,   like, one of the biggest, like, levers for \nmaking programming, like, a lot easier,  ",
    "start": "2950400",
    "end": "2959840"
  },
  {
    "text": "and making people more productive. And when you \nget a package, like, I install a new package,  ",
    "start": "2959840",
    "end": "2964920"
  },
  {
    "text": "I always get the code, and then I get \nthe documentation. And then sometimes,  ",
    "start": "2964920",
    "end": "2970599"
  },
  {
    "text": "occasionally, there might be, if it's, like, a \nreally popular, widely-used package, I might get,   separately from all that, some editor tooling \nfor my particular editor. So, you get like  ",
    "start": "2970600",
    "end": "2979840"
  },
  {
    "text": "a... I think, like, the React community has \ndone some cool stuff with this. So, like,   I remember, like, the Redux dev tools. I know \nRedux is not, like...it's falling out of favor,  ",
    "start": "2979840",
    "end": "2986680"
  },
  {
    "text": "but I do remember, like, oh, people built tooling \nfor that, and, like, but it didn't run in people's   editors. It ran in the browser. And I think \nthat was, like, kind of a hint of, like, hey,  ",
    "start": "2986680",
    "end": "2994600"
  },
  {
    "text": "our packages and stuff, we could be a lot more \nproductive with them if we had tooling for them.   But, in a lot of cases, people don't integrate \nthem into editors because it's like, well, what,  ",
    "start": "2994600",
    "end": "3002400"
  },
  {
    "text": "I'm gonna write...you like VS Code, and this \nperson likes IntelliJ, and this person likes   Emacs, and this person likes Vim. Not gonna write, \nyou know, 10 different implementations of this. ",
    "start": "3002400",
    "end": "3010160"
  },
  {
    "text": "And so, what ends up happening is that you get \nzero implementations. People just don't bother   doing it at all. So, what we wanna do is we wanna \nsolve this at, like, the language level. And my  ",
    "start": "3011040",
    "end": "3018320"
  },
  {
    "text": "specific, concrete goal is to make it as easy to \nwrite editor tooling as it is to write a function  ",
    "start": "3018320",
    "end": "3024000"
  },
  {
    "text": "in Roc. Like, you can just write a function \nand press enter, go down a line, and write,   like, a piece of editor tooling right there, \nand that gets distributed with packages. So,  ",
    "start": "3024000",
    "end": "3031800"
  },
  {
    "text": "it's just part of the language, and when \nsomeone implements, like, the VS Code, you know,   Roc extension, part of what they do is they \nimplement a way to handle these things because  ",
    "start": "3031800",
    "end": "3042600"
  },
  {
    "text": "we have sort of a...it has to be kind of a simple \nvocabulary for this. I realize that, of course,   we want these to be accessible, and if you're \nthinking with accessibility in mind, you already  ",
    "start": "3042600",
    "end": "3051600"
  },
  {
    "text": "have to have the language for describing these \ntools be pretty general, so that it can either   be rendered on the screen or rendered for a screen \nreader or something like that. And at that point,  ",
    "start": "3051600",
    "end": "3059799"
  },
  {
    "text": "you can sort of adapt that to whatever primitives, \nlike, Vim has different primitives than VS Code,   which has different primitives than IntelliJ.\nBut if you're describing the functionality that  ",
    "start": "3059800",
    "end": "3067400"
  },
  {
    "text": "you want at a sufficiently high level, the hope \nis that I can, you know, we talked earlier about,   like, exporting JSON, or ejecting it, right? I \nwould love for the JSON package that I installed  ",
    "start": "3067400",
    "end": "3078000"
  },
  {
    "text": "just to add, like, something to my context \nmenu where I can just say, hey, see this,   like, you know, type inference-based JSON decoder? \nI wanna just right-click on that, and say \"Extract  ",
    "start": "3078000",
    "end": "3086600"
  },
  {
    "text": "explicit decoder.\" It's like, [vocalization \n00:51:30] here it is. Right? And then, that works   in Vim and it works in Emacs and it works in this. \nAnd it's like, nobody needed to write a separate  ",
    "start": "3086600",
    "end": "3095360"
  },
  {
    "text": "plugin for each of those. It's just, that the Roc \nextension means that when the author of that JSON   package shipped, they included that little bit \nof functionality, and now everybody gets that,  ",
    "start": "3095360",
    "end": "3103480"
  },
  {
    "text": "and if they wanna do the customized version, they \ncan do that. It's trivial. That's exactly the type   of thing that I think could make the Roc ecosystem \njust do unprecedented things, where you have this,  ",
    "start": "3103480",
    "end": "3114280"
  },
  {
    "text": "like, everybody can not only ship the code but \nalso this tooling that's like a force multiplier  ",
    "start": "3114280",
    "end": "3119320"
  },
  {
    "text": "for everybody else. And then everybody's a \nmultiplier for everybody else. That can be a   compounding effect that I think would be powerful. \nAnd that's one of the things I'm most excited  ",
    "start": "3119320",
    "end": "3127160"
  },
  {
    "text": "about with the language. I could go on, but...\nNo, no, no that's very, very cool. It reminds   me of the...I think there's something called the \nprinciple of least surprise, right? The reason I  ",
    "start": "3127160",
    "end": "3133839"
  },
  {
    "text": "love certain tooling over other tooling is because \nit just lets me...I can almost guess how to  ",
    "start": "3133840",
    "end": "3142320"
  },
  {
    "text": "achieve a particular thing. \"Oh, I need to extract \na method. I wonder if I did that... Oh, cool,   it works,\" you know? But I like this...and it's \nsort of like, tooling that's designed that way,  ",
    "start": "3142320",
    "end": "3150680"
  },
  {
    "text": "I think is incredibly powerful, because it just, \nas you say, it acts as a force multiplier. So,   the idea of building that actually into \na language tool, I think that's super  ",
    "start": "3150680",
    "end": "3158120"
  },
  {
    "text": "interesting. Yeah. Maybe we should chunk up again. \nWhat else are you excited about what's going on? ",
    "start": "3158120",
    "end": "3166360"
  },
  {
    "text": "In Roc, or elsewhere?\nElsewhere. Just in   general. Maybe one or two things.\nI'm very excited right now about  ",
    "start": "3166360",
    "end": "3173520"
  },
  {
    "text": "learning more about performance optimization, on \na personal level. So, this was something where,   like, when I was in, as you would \nsay, university, we in Americas,  ",
    "start": "3173520",
    "end": "3180480"
  },
  {
    "text": "we always say college for some reason, even \nthough it says university in the title, whatever.  That's what...bizarrely, I was actually \nin a college, but it was a university.. ",
    "start": "3180480",
    "end": "3187120"
  },
  {
    "text": "I don't even know what the formal difference is, \nto be honest. We use them kind of interchangeably.   But when I learned about performance optimization \nthere, it was a very heavy focus on asymptotic  ",
    "start": "3190400",
    "end": "3200680"
  },
  {
    "text": "complexity, and, like, you know, as N gets \nbigger, the number of elements gets bigger,   what does the behavior look like? And, sort \nof, the stated reason for doing all that was,  ",
    "start": "3200680",
    "end": "3211920"
  },
  {
    "text": "well, this is some knowledge you can have that \ntranslates across hardware, because different   CPUs have different optimizations and yada, yada, \nand that was sort of hand-waved away. And the more  ",
    "start": "3212440",
    "end": "3222280"
  },
  {
    "text": "that I've gotten into, because like I said, I'm \ntrying to make Roc's compiler fast, the more that   I've learned about, okay, but, you wanna make it \nrun fast on, you know, particular hardware, like,  ",
    "start": "3222280",
    "end": "3231960"
  },
  {
    "text": "you know, the modern Apple laptops, or, you know, \nIntel servers or whatever, there's a particular  ",
    "start": "3231960",
    "end": "3239320"
  },
  {
    "text": "set of, like, techniques that you use, that do \nneed to know about the hardware. And there's,   like, as I have more and more come to learn, like, \nthe stuff that we learned about the asymptotic  ",
    "start": "3239320",
    "end": "3248640"
  },
  {
    "text": "complexity is just the tip of the iceberg. And if \nyou really wanna get stuff going fast, it's like,   now learning about, like, CPU memory \ncaches, and TLBs, and, like, you know,  ",
    "start": "3248640",
    "end": "3257640"
  },
  {
    "text": "virtual memory, and paging, and SIMD, and...\nThere's this great talk by Andrew Kelley,  ",
    "start": "3257640",
    "end": "3264440"
  },
  {
    "text": "who made Zig, a couple years ago, where he \ntalks...and it was at Handmade Seattle, I forget   what year, it was, like, 2021 maybe, something \nlike that. Maybe it was pre-pandemic. Might've  ",
    "start": "3264440",
    "end": "3273000"
  },
  {
    "text": "been 2019. But he talks about how he made Zig's \ncompiler a lot faster. And he's not talking about  ",
    "start": "3273000",
    "end": "3279600"
  },
  {
    "text": "any of that, like, asymptotic complexity \nstuff. He's talking about, like, you know,   here's the memory management techniques, the \nstrategies that we used, and data-oriented design,  ",
    "start": "3279600",
    "end": "3286840"
  },
  {
    "text": "and structure of arrays and, like, \"We're trying \nto avoid CPU cache misses. That's the name of the   game,\" and all these things. It's this whole world \nthat I had a... I didn't realize how superficial  ",
    "start": "3286840",
    "end": "3296240"
  },
  {
    "text": "my understanding of it was. And it's been really \nexciting to, like, get into it and be like, \"Wow,   I can make things so much faster than I realized.\"\nAre you familiar with Martin Thompson's work  ",
    "start": "3296240",
    "end": "3304440"
  },
  {
    "text": "on this? He talks about the idea of \nmechanical sympathy, for many years now. No. I've heard that term, but...\nMechanical sympathy, which is this  ",
    "start": "3304440",
    "end": "3310640"
  },
  {
    "text": "idea of being sympathetic to the hardware, \nright. But what I find fascinating is,  ",
    "start": "3310640",
    "end": "3315920"
  },
  {
    "text": "because we moved away, often there were so many \nlevels of abstraction between the code that   you're writing and the hardware it's running \non these days, that actually, that sort of,  ",
    "start": "3315920",
    "end": "3325840"
  },
  {
    "text": "I wouldn't say fall out of fashion, but people, \nI don't think people think enough about it,  ",
    "start": "3325840",
    "end": "3331040"
  },
  {
    "text": "certainly. But of course, where you wanna \nthink about it is in the compiler, right?  Yes.\nYou don't wanna be second-guessing that. ",
    "start": "3331040",
    "end": "3336760"
  },
  {
    "text": "I mean, the way I think about it is, something \nthat's been pretty consistent in my career for   the last, like, I don't know, 10, 20 years has \nbeen, like, trying to work backwards from the user  ",
    "start": "3336760",
    "end": "3345440"
  },
  {
    "text": "experience I want. And for some applications, the \nperformance is not a big concern there. It's just   like, well, you're gonna be bottlenecked on the \ndatabase, and the database is gonna be about as  ",
    "start": "3345440",
    "end": "3353839"
  },
  {
    "text": "fast as the indices you set up for it, and that's \nkind of it. I guess if you wanted to...I mean,   now I know enough that I'm like, okay, if \nyou really wanted to, you could roll your  ",
    "start": "3353840",
    "end": "3360560"
  },
  {
    "text": "own database alternative, that's highly optimized \nfor your specific use case. But in a lot of cases,   it's like, yeah, but people don't care about \nthat performance difference. They're like,  ",
    "start": "3360560",
    "end": "3368840"
  },
  {
    "text": "you know, they're gonna be waiting for the \nnetwork anyway, so you're never gonna get   sub-millisecond, you know...\nAnd then probably wouldn't  ",
    "start": "3368840",
    "end": "3374359"
  },
  {
    "text": "post the Jepsen test anyway, so, yeah...\nYes. No chance. Your hand-rolled database  ",
    "start": "3374360",
    "end": "3381480"
  },
  {
    "text": "probably. But there's a lot of use cases that \nI can think of where I really do want, like,  ",
    "start": "3381480",
    "end": "3388640"
  },
  {
    "text": "performance is part of UX, and it's a big part. \nAnd a compiler is absolutely one of them, where,  ",
    "start": "3388640",
    "end": "3394480"
  },
  {
    "text": "I mean, I like Rust in a lot of ways. I'm \nvery frustrated by the compile times, a lot   of the time. Especially the caching. Like, part of \nit is, like, how fast is the compiler, but also,  ",
    "start": "3394480",
    "end": "3404200"
  },
  {
    "text": "like, which work is it doing? And I, on some \nlevel, wish almost wish they didn't tell me this,  ",
    "start": "3404200",
    "end": "3409960"
  },
  {
    "text": "but sometimes I'll be rebuilding my project, and I \njust made one little change. And it's like, \"Hey,   I'm recompiling your, like, you know, JSON crate.\" \nAnd I'm like, \"What? I didn't do anything. What?  ",
    "start": "3409960",
    "end": "3418640"
  },
  {
    "text": "Why are you rebuilding that? Nothing has changed.\" \nAnd I'm sure there's, someone can explain to me   why it needed to do that. But there's...now that \nI have more of an appreciation for, like, \"Oh,  ",
    "start": "3418640",
    "end": "3429240"
  },
  {
    "text": "it doesn't have to be this slow. I don't have \nto be sitting here waiting for this,\" it's all   the more frustrating when the tools I use, you \nknow, whether they're compilers or otherwise,  ",
    "start": "3429240",
    "end": "3436440"
  },
  {
    "text": "are slow and I know they don't have to be.\nI think there's another, I mean,   I think there's another reason, I think, quite \nserious reason, actually, these days, to think  ",
    "start": "3436440",
    "end": "3443920"
  },
  {
    "text": "about mechanical sympathy, as well as user...user \nexperience is a fantastic example. But I think,   actually, the amount of energy we're using is \na super, super important consideration. And if  ",
    "start": "3443920",
    "end": "3453240"
  },
  {
    "text": "we can be more sympathetic to the hardware we're \nrunning on, then potentially we need less of it,   right. And that can only be good, I think, \ngiven the state of the world at the moment. ",
    "start": "3453240",
    "end": "3462760"
  },
  {
    "text": "Richard Feldman:I'm curious about how people \nmeasure that, because, so, we have, one of the   Roc server projects that's in progress right \nnow, we got a research grant to do it. We  ",
    "start": "3462760",
    "end": "3473359"
  },
  {
    "text": "probably don't have time to go into the reasons \nwhy it's novel and interesting, but it does,   like, interesting memory management behind \nthe scenes. And basically, so, it never has,  ",
    "start": "3473360",
    "end": "3482000"
  },
  {
    "text": "like, garbage collection pauses or things like \nthat. And there was a researcher, who is not  ",
    "start": "3482000",
    "end": "3487920"
  },
  {
    "text": "directly related to the project, but who became \ninterested in it because of the question of,   could this mean that you have servers that use \nless energy? Because, you know, garbage collector,  ",
    "start": "3487920",
    "end": "3495640"
  },
  {
    "text": "in addition to slowing down your UX, also requires \nenergy to use. And that then led to the question  ",
    "start": "3495640",
    "end": "3501000"
  },
  {
    "text": "was, how do we measure what the difference in \nenergy is? And I guess that researcher knows   more than I do about that. But it's something \nI'd never even thought about, is, like, yeah,  ",
    "start": "3501000",
    "end": "3508680"
  },
  {
    "text": "put a number on it. What number do you put on it? \nHow do you measure that number? I have no idea. ",
    "start": "3508680",
    "end": "3512960"
  },
  {
    "text": "It's certainly something we've been looking at \nin Thoughtworks, because it's sort of, there's   some interesting design decisions around things \nlike, even like how often you build, right? So,  ",
    "start": "3515120",
    "end": "3523960"
  },
  {
    "text": "we're used to, you know, \"Hey, we'll commit, and \nbuild, and deploy a thousand times a day.\" Well,  ",
    "start": "3523960",
    "end": "3528400"
  },
  {
    "text": "that's actually pushing your code through quite \na few potential stages of a pipeline. That's   quite a lot of CPU cycles you're doing every \ntime you're doing that. So, is there some,  ",
    "start": "3530720",
    "end": "3539440"
  },
  {
    "text": "or there's gonna be a function, probably a U-curve \noptimization, where you're gonna be looking at,  ",
    "start": "3539440",
    "end": "3545040"
  },
  {
    "text": "like, the optimum number of deploys per day, \nin order to, you know, when you go over that,   you're gonna be, like, using too much, or \nmore energy than you need to for the amount  ",
    "start": "3545040",
    "end": "3554520"
  },
  {
    "text": "of value you're getting from the software \nand all of that. Anyway. I think, probably,   Richard Feldman, we should probably call it \na day there. We've covered an awful lot. So,  ",
    "start": "3554520",
    "end": "3562120"
  },
  {
    "start": "3557000",
    "end": "3593000"
  },
  {
    "text": "thank you so much for coming along and \nchatting with us today. It's been brilliant.  Thanks for having me.\nThis is James Lewis and  ",
    "start": "3562120",
    "end": "3573560"
  },
  {
    "text": "Richard Feldman, saying goodbye from GOTO \nUnscripted at GOTO Copenhagen. Thanks very much.",
    "start": "3573560",
    "end": "3578480"
  }
]