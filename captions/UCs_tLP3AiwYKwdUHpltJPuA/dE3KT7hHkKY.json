[
  {
    "text": "so uh the title of this chalk is Jepson 4 hop Springs Eternal there is in fact",
    "start": "6680",
    "end": "11719"
  },
  {
    "text": "no Jepson 3 don't go looking for it it doesn't exist this should tell you a little bit about what we're going to",
    "start": "11719",
    "end": "16720"
  },
  {
    "text": "discuss in the talk today my name is Kyle Kingsbury uh you might know me as AER um I am scared and",
    "start": "16720",
    "end": "23760"
  },
  {
    "text": "confused and excited about computers all the time uh and today I work at a new",
    "start": "23760",
    "end": "28920"
  },
  {
    "text": "company called stripe uh we are a credit card company uh we help you sell goods",
    "start": "28920",
    "end": "34120"
  },
  {
    "text": "and services via some API um which is phenomenal right developers say oh I want to take credit cards how do I do it",
    "start": "34120",
    "end": "40559"
  },
  {
    "text": "well I could build all this PCI Compliant infrastructure or I could just make an HTP request to some magical rainbow in the sky and everything will",
    "start": "40559",
    "end": "47280"
  },
  {
    "text": "work out just great we've all built apis right they're not they're not real things they're abstractions they're",
    "start": "47280",
    "end": "52440"
  },
  {
    "text": "imaginary constructs so that's this rainbow up top that's our that's our API right but it's actually supported on",
    "start": "52440",
    "end": "58840"
  },
  {
    "text": "this steel G framework which is our code that's written in Ruby um and then that",
    "start": "58840",
    "end": "64320"
  },
  {
    "text": "code rests on top of all these libraries and the Ruby VM um that's represented here by this big pile of sticks and",
    "start": "64320",
    "end": "72600"
  },
  {
    "text": "those things in turn rest on a pile of tires which uh symbolize our databases",
    "start": "72600",
    "end": "78240"
  },
  {
    "text": "and uh and cues and other distributed systems now is anybody who's used a database how many of you have",
    "start": "78240",
    "end": "84880"
  },
  {
    "text": "actually oh very very good less than I expected um",
    "start": "84880",
    "end": "91799"
  },
  {
    "text": "anybody who's used to database knows everything is on fire all the time um",
    "start": "91799",
    "end": "96920"
  },
  {
    "text": "and our job is to continue building the tower higher and higher to try and get away from the Flames",
    "start": "96920",
    "end": "103399"
  },
  {
    "text": "uh this is called the hierarchy of abstraction uh so as good information",
    "start": "103399",
    "end": "109040"
  },
  {
    "text": "hiders we're trying to isolate the terrible things happening down below from the good things which our customers",
    "start": "109040",
    "end": "115360"
  },
  {
    "text": "think are happening uh and ideally it works ideally customers continue to come to the site they make requests data",
    "start": "115360",
    "end": "121439"
  },
  {
    "text": "flows properly even though nodes internally are failing and bad things are happening to the network that's the",
    "start": "121439",
    "end": "126719"
  },
  {
    "text": "goal what kind of bad things am I talking about well if you've ever used a a que or a database or any consistency",
    "start": "126719",
    "end": "133040"
  },
  {
    "text": "system whatsoever uh you know they can get into split brain scenarios where different nodes believe different truths",
    "start": "133040",
    "end": "139680"
  },
  {
    "text": "or there might be foreign key problems where you go to look up a record and it's gone or maybe you see read anomalies",
    "start": "139680",
    "end": "146560"
  },
  {
    "text": "where you go to examine a record and you do a write and you do a read and it's",
    "start": "146560",
    "end": "152080"
  },
  {
    "text": "not there and you do another read and it comes back you do another and it's gone right interesting flip-flops and state",
    "start": "152080",
    "end": "157720"
  },
  {
    "text": "can occur so in the face of these these problems we want to know How likely are",
    "start": "157720",
    "end": "162800"
  },
  {
    "text": "they to actually affect our systems are is our use of the database correct is is",
    "start": "162800",
    "end": "168159"
  },
  {
    "text": "our software likely to show these problems to users and the only way to do that is to",
    "start": "168159",
    "end": "173360"
  },
  {
    "text": "measure them so Jepson is a project I've been working on to understand distributed systems better uh it's it's",
    "start": "173360",
    "end": "180120"
  },
  {
    "text": "a code base it's uh articles it's talks um trying to put pressure on vendors",
    "start": "180120",
    "end": "185840"
  },
  {
    "text": "trying to educate users uh and figure out for myself what consistency actually",
    "start": "185840",
    "end": "191480"
  },
  {
    "text": "means in Jepson we take a systems based approach um what is a system well anything you can put a box around uh",
    "start": "191480",
    "end": "198120"
  },
  {
    "text": "which means pretty much everything is a system uh inside of the system we're going to have some interacting components they they're going to have",
    "start": "198120",
    "end": "204840"
  },
  {
    "text": "complicated and nuanced um things happening between them but our goal is that if we draw a box around the system",
    "start": "204840",
    "end": "210480"
  },
  {
    "text": "as a whole we should be able to characterize what goes on inside the Box just based on the interactions it has",
    "start": "210480",
    "end": "216080"
  },
  {
    "text": "with its environment and hopefully those interactions are simple so at the edge when we're when we're pushing things into a system and taking things out we",
    "start": "216080",
    "end": "222760"
  },
  {
    "text": "should have Simple Rules like maybe matter is conserved or maybe form momentum is conserved or maybe if I put",
    "start": "222760",
    "end": "229040"
  },
  {
    "text": "things into a que they come out again maybe if I write data into a database it should still be there in a week those",
    "start": "229040",
    "end": "235120"
  },
  {
    "text": "are those are simple high level rules and then internally the database can do whatever kind of locks and Transformations it wants wants to make those things",
    "start": "235120",
    "end": "241439"
  },
  {
    "text": "happen thinking about in invariance for a minute like what what sort of rules what sort of high level properties could",
    "start": "241439",
    "end": "247480"
  },
  {
    "text": "we want we might think about a simple program right like allocating a variable X set it initially to a we'll read the",
    "start": "247480",
    "end": "254599"
  },
  {
    "text": "variable by printing it that prints out a right when then we we'll set x equals B print X we all know what this does",
    "start": "254599",
    "end": "260239"
  },
  {
    "text": "right we've written a program like this before what you think it does is we",
    "start": "260239",
    "end": "265360"
  },
  {
    "text": "start off at the state a and we'll read it and then we'll change the state to B by performing a right and then we'll",
    "start": "265360",
    "end": "271919"
  },
  {
    "text": "read B so we print a and then B straightforward enough but this is not",
    "start": "271919",
    "end": "277280"
  },
  {
    "text": "the only possible interpretation of this program we could read B we could we",
    "start": "277280",
    "end": "282400"
  },
  {
    "text": "could read a we could do anything the program doesn't have to obey any laws unless we tell it to so the invariance",
    "start": "282400",
    "end": "289400"
  },
  {
    "text": "in our head map the program structure the sort of lexical structure of the of the process to the behaviors which is",
    "start": "289400",
    "end": "296800"
  },
  {
    "text": "allowed to undergo invariance are constraints that apply to the history of",
    "start": "296800",
    "end": "302000"
  },
  {
    "text": "the system like what what possible orderings of of States could we see what possible ways could the operations come",
    "start": "302000",
    "end": "308560"
  },
  {
    "text": "together we might think about not just a single threaded program but a concurrent one where multiple processes interact",
    "start": "308560",
    "end": "314880"
  },
  {
    "text": "with the state of the same time so here a top process uh reads A and then B that's that's crazy why did it change",
    "start": "314880",
    "end": "321560"
  },
  {
    "text": "well it changed because a process on the bottom performed to right of the value B",
    "start": "321560",
    "end": "327000"
  },
  {
    "text": "so individual processes may not have the whole story but if we unify the whole history from every process we should get",
    "start": "327000",
    "end": "332039"
  },
  {
    "text": "something that follows the same rules but it's a little more complicated than that because our systems aren't just concurrent they're also distributed",
    "start": "332039",
    "end": "340000"
  },
  {
    "text": "and distributed systems have some characteristic difference or some characteristic distance between nodes it takes time for messages to propagate if",
    "start": "340000",
    "end": "346960"
  },
  {
    "text": "I want to write a value to a register in dram I have to go off of the CPU into the memory controller through a bunch of",
    "start": "346960",
    "end": "353360"
  },
  {
    "text": "cashes back onto some wire like 11 whole centimet over to the Damm into the actual bit and it flips and that takes",
    "start": "353360",
    "end": "360000"
  },
  {
    "text": "like what a a nanc so then I have to come all the way back and that takes more time so",
    "start": "360000",
    "end": "365680"
  },
  {
    "text": "whenever we're manipulating States somewhere it's going to take a little bit of time to go back and forth and that time means that things might be",
    "start": "365680",
    "end": "371800"
  },
  {
    "text": "ambiguous we could see different orders for example if I do a write of B",
    "start": "371800",
    "end": "377479"
  },
  {
    "text": "and then concurrently begin a read and then the right completes and the read completes one possible ordering",
    "start": "377479",
    "end": "384720"
  },
  {
    "text": "depending on how those messages propagated is that I see the value B because the read arrives after to the",
    "start": "384720",
    "end": "389919"
  },
  {
    "text": "right but I could also see a if the read arrives first A or B A or B all that",
    "start": "389919",
    "end": "396800"
  },
  {
    "text": "changes is the ordering of the messages and an asynchronous Network like the ones that we're usually working with an",
    "start": "396800",
    "end": "402319"
  },
  {
    "text": "IP uh we don't get to control what those orderings are so both both histories are valid we have to consider all possible",
    "start": "402319",
    "end": "408880"
  },
  {
    "text": "interleavings of con current operations but it's not infinitely bad because we are not allowed to break the",
    "start": "408880",
    "end": "414960"
  },
  {
    "text": "laws of physics we can't go back in time if we're actually talking to a single point of Truth somewhere in the system",
    "start": "414960",
    "end": "421319"
  },
  {
    "text": "then the earliest possible State I could interact with is the one just after I send my request and the latest possible",
    "start": "421319",
    "end": "427759"
  },
  {
    "text": "States the one just before I receive a response so you get some window between invocation and response and that's the",
    "start": "427759",
    "end": "433639"
  },
  {
    "text": "the range of States we could interact with this property is called linearizability and it's kind of the gold standard for um both distributed",
    "start": "433639",
    "end": "441319"
  },
  {
    "text": "and concurrent systems you want to have uh things like Atomic registers like mutexes that give you real time",
    "start": "441319",
    "end": "447360"
  },
  {
    "text": "guarantees on the states you'll interact with and mutex when you lock it nobody else gets to claim it until you release",
    "start": "447360",
    "end": "453039"
  },
  {
    "text": "it that's a really nice strong property so linearizability means that any operations that are not concurrent",
    "start": "453039",
    "end": "459639"
  },
  {
    "text": "are ordered with respect to each other it's not a total order right we can still have those windows of concurrency where you could get a or b but that only",
    "start": "459639",
    "end": "466080"
  },
  {
    "text": "happens when two operations overlap in time that means that if I do a right and the right completes and then I begin a",
    "start": "466080",
    "end": "472560"
  },
  {
    "text": "read Because those two aren't concurrent the read is guaranteed to see the right or some later",
    "start": "472560",
    "end": "478319"
  },
  {
    "text": "state so everybody's going to agree on the same order of events we all see a b c d everybody's going to agree on uh",
    "start": "478319",
    "end": "486319"
  },
  {
    "text": "when an operation is visible once you've completed an operation you know everybody else is going to see it and this means we get nice and variant like",
    "start": "486319",
    "end": "492520"
  },
  {
    "text": "no stale reads like Mutual exclusion lots of systems rely on these these",
    "start": "492520",
    "end": "497879"
  },
  {
    "text": "properties but we don't have to be that strong this is a really rigid thing to",
    "start": "497879",
    "end": "503039"
  },
  {
    "text": "do we could we could relax the time constraints we could let you go backwards and forwards in time you could",
    "start": "503039",
    "end": "509840"
  },
  {
    "text": "read something from the past and write something to the Future well how do you write to the Future well you put your message in a bottle and you throw it in",
    "start": "509840",
    "end": "515680"
  },
  {
    "text": "the ocean somebody else picks it up uh if your ocean is well ordered as mine is um then this works just fine everything",
    "start": "515680",
    "end": "522159"
  },
  {
    "text": "arrives in order at your at your recipient uh maybe on a different coast and then they apply your operations and",
    "start": "522159",
    "end": "527399"
  },
  {
    "text": "they see the same history of messages they just see them a week later so all the participants are going to agree on",
    "start": "527399",
    "end": "533440"
  },
  {
    "text": "the same order of events all see ABC but they might not agree on what time those things happened we could relax that inv",
    "start": "533440",
    "end": "540240"
  },
  {
    "text": "variant still further if you're thinking about a transactional system uh with lots of um different cells interacting",
    "start": "540240",
    "end": "546320"
  },
  {
    "text": "maybe like an SQL database we could have a property like serializability where we say that every",
    "start": "546320",
    "end": "551600"
  },
  {
    "text": "transaction has to fit somewhere into a single linear history but we don't have to agree on when it happened or even in",
    "start": "551600",
    "end": "558440"
  },
  {
    "text": "what order just as long as you can squeeze the transaction in somewhere so in a serializable system",
    "start": "558440",
    "end": "565160"
  },
  {
    "text": "operations happen in N order we don't know what it is it's perfectly legal for example in a register to put all of your",
    "start": "565160",
    "end": "570680"
  },
  {
    "text": "rights to time infinity and all of your reads to time zero and just have Dev null be your database um that doesn't",
    "start": "570680",
    "end": "576880"
  },
  {
    "text": "seem very useful right but it's it's a sort of trivial solution if you have a more complex system like an SQL database",
    "start": "576880",
    "end": "582079"
  },
  {
    "text": "where you do something like set this row uh this particular column to be three if",
    "start": "582079",
    "end": "587279"
  },
  {
    "text": "and only if this thing plus that thing is equal to this other thing when the time is whatever those con those",
    "start": "587279",
    "end": "594200"
  },
  {
    "text": "constraints are actually a lot more difficult to preserve and so you get a stronger invariant out of it",
    "start": "594200",
    "end": "600800"
  },
  {
    "text": "finally we don't have to just have a single line of History we could actually have a forking diverging history in",
    "start": "600800",
    "end": "607079"
  },
  {
    "text": "eventually consistent systems uh the constraint is that things have to come together somehow so if we have a counter",
    "start": "607079",
    "end": "612640"
  },
  {
    "text": "that's value is zero that counter could diverge we could have two distinct copies of it and each one of them could",
    "start": "612640",
    "end": "618079"
  },
  {
    "text": "increment separately in return one and reads will show one for a while and then when the counters exchange information",
    "start": "618079",
    "end": "624320"
  },
  {
    "text": "the value will converge on two if we do everything right So eventually consistent systems have to converge and",
    "start": "624320",
    "end": "631040"
  },
  {
    "text": "what that convergence does doesn't just mean they have to agree on some value ideally they should Converge on a correct value so correct value might be",
    "start": "631040",
    "end": "637959"
  },
  {
    "text": "the most recently written value in the register a correct value might be the number of increments that have occurred",
    "start": "637959",
    "end": "643200"
  },
  {
    "text": "it depends on the semantics of the uh data type that you're working with finally we could imagine a variance",
    "start": "643200",
    "end": "649560"
  },
  {
    "text": "that just order two operations like a a right and a right or a right and a read we get this family monotonic rights",
    "start": "649560",
    "end": "655560"
  },
  {
    "text": "monotonic reads rights follow reads reads your rights uh um monotonic right just says that if I write a and then B",
    "start": "655560",
    "end": "662120"
  },
  {
    "text": "those have to take effect in the same order in the database and the same thing for monotonic read I should read a and",
    "start": "662120",
    "end": "667399"
  },
  {
    "text": "then B and then C never C then B then a wres follow reads means that once I've",
    "start": "667399",
    "end": "672480"
  },
  {
    "text": "done a read any write that I do will follow subsequent to it and conversely a read your write just says oh if I if I",
    "start": "672480",
    "end": "679120"
  },
  {
    "text": "write some data any read I do we'll see that effect so we're just relating the order in the program history remember",
    "start": "679120",
    "end": "685240"
  },
  {
    "text": "the the first program we talked about uh xal a xals b we're just putting those constraints onto any pair of operations",
    "start": "685240",
    "end": "692600"
  },
  {
    "text": "and you can mix and match these things there are infinitely many consistency classes they're just they're just allowable sets of histories so if you",
    "start": "692600",
    "end": "699240"
  },
  {
    "text": "can write it down it's it's a consistency model we could take linearizability plus the property that",
    "start": "699240",
    "end": "704680"
  },
  {
    "text": "after sometime you know T1 uh all reads cause an ancient squid God to rise from the depths that's cthulu consistency um",
    "start": "704680",
    "end": "713120"
  },
  {
    "text": "this is only implemented in certain data stores but they tend to fall into some",
    "start": "713120",
    "end": "720760"
  },
  {
    "text": "sort of hierarchy uh maybe not a hierarchy it's a it's a partial ordering but we could we can say certain things about inclusion so if I have a system",
    "start": "720760",
    "end": "727480"
  },
  {
    "text": "which is linearizable that is to say everything happens in a certain time window and everything happens in the same order",
    "start": "727480",
    "end": "734079"
  },
  {
    "text": "because everything happens in the same order on all nodes we also know that system is sequentially consistent and",
    "start": "734079",
    "end": "739199"
  },
  {
    "text": "it's also by extension causally consistent it obeys Pam which is a parallel memory model it gives us those",
    "start": "739199",
    "end": "744399"
  },
  {
    "text": "four properties read your rights monotonic reads monotonic rights rights follow reads all those things are sort",
    "start": "744399",
    "end": "749639"
  },
  {
    "text": "of uh they come out of the single register consistency research um that",
    "start": "749639",
    "end": "754839"
  },
  {
    "text": "goes back way through the 70s and then concurrently in the database world people were looking at transactional",
    "start": "754839",
    "end": "760560"
  },
  {
    "text": "systems for SQL databases for object stores and so they invented things like read uncommitted read committed uh",
    "start": "760560",
    "end": "766680"
  },
  {
    "text": "monatomic Atomic view Cur stability repeatable read serializability all those properties have their own sort of",
    "start": "766680",
    "end": "773240"
  },
  {
    "text": "partial order on the right hand side and the interesting stuff here is that there's actually theorems that tell us",
    "start": "773240",
    "end": "778920"
  },
  {
    "text": "us these systems have different performance and availability characteristics the reason you relax consistency is for Speed but it also",
    "start": "778920",
    "end": "785600"
  },
  {
    "text": "happens to give you availability so if you're down here monotonic reads monotonic rights uh Branch cut isolation",
    "start": "785600",
    "end": "791399"
  },
  {
    "text": "monotonic Atomic view those those safety models can actually be provided in the system which is totally available and",
    "start": "791399",
    "end": "797160"
  },
  {
    "text": "that is to say that every request to non-failing node will terminate successfully that's a really strong",
    "start": "797160",
    "end": "803040"
  },
  {
    "text": "property right it doesn't matter what your network does you could have nodes like here and on Mars that don't communicate everybody gets to do",
    "start": "803040",
    "end": "809079"
  },
  {
    "text": "operations all the time that's phenomenal from an operations perspective this is terrific but if we",
    "start": "809079",
    "end": "815279"
  },
  {
    "text": "want a stronger property like linearizability the cap theorem rules that out it tells us we can't have that",
    "start": "815279",
    "end": "820440"
  },
  {
    "text": "be totally available we also can't have cursive stability a repeatable read we can't even have sequential consistency",
    "start": "820440",
    "end": "826639"
  },
  {
    "text": "those properties are only attainable in systems which have some nodes go unavailable during failure maybe they",
    "start": "826639",
    "end": "831880"
  },
  {
    "text": "have a privileged primary node maybe they use majority quorums in the middle we've got this",
    "start": "831880",
    "end": "837399"
  },
  {
    "text": "kind of purple section that's things that are sticky available so that's totally available with the constraint",
    "start": "837399",
    "end": "843040"
  },
  {
    "text": "that every client always talks to the same server and if a client server dies then that client has to abort its its",
    "start": "843040",
    "end": "848759"
  },
  {
    "text": "operations and it loses those invariants so different consistency models and and by weaker I mean the ones",
    "start": "848759",
    "end": "856120"
  },
  {
    "text": "that let you do more histories the ones that allow more possible orders those are more available in the face of failure and they're also faster and less",
    "start": "856120",
    "end": "863759"
  },
  {
    "text": "intuitive because they let more things happen and they don't place as strong constraints on what could OCC so the",
    "start": "863759",
    "end": "870360"
  },
  {
    "text": "weaker models require less coordination you have to talk as much if you look at CPUs for example they reorder your operations like mad you actually have to",
    "start": "870360",
    "end": "876800"
  },
  {
    "text": "ask a CPU to get a a sort of linearizable right or read you have to do a fence operation or an atomic compar",
    "start": "876800",
    "end": "883199"
  },
  {
    "text": "and set if you just write a value it's py to cash it and maybe you'll see it at some later time and it does that because",
    "start": "883199",
    "end": "889240"
  },
  {
    "text": "it's expensive to coordinate between CPU cores finally I want to note that weakness doesn't necessarily mean unsafe",
    "start": "889240",
    "end": "896399"
  },
  {
    "text": "it depends on what you're doing so if I'm building a h counter service I can tolerate a little bit of loss in my reads my reads can be slightly laggy but",
    "start": "896399",
    "end": "903560"
  },
  {
    "text": "eventually I want to sum to the number of increments that occurred if I'm building a a registration service for",
    "start": "903560",
    "end": "908600"
  },
  {
    "text": "users though or a mutex a property like linearizability is critical I can't use an eventually consistent system so",
    "start": "908600",
    "end": "914519"
  },
  {
    "text": "safety depends on your actual application all right to recontextualize",
    "start": "914519",
    "end": "920040"
  },
  {
    "text": "for a minute what why have I been filling your heads with math uh this is all useless knowledge right the goal of",
    "start": "920040",
    "end": "925839"
  },
  {
    "text": "these invariants is to put constraints on the interaction of a database system with environment like all the clients",
    "start": "925839",
    "end": "931240"
  },
  {
    "text": "and the people behind those clients and then I'm going to test whether those invariant actually hold in",
    "start": "931240",
    "end": "937680"
  },
  {
    "text": "real systems so I'm trying to take theoretical results from computer",
    "start": "937680",
    "end": "942920"
  },
  {
    "text": "science research and apply them to actual databases that you might see undergoing failures in the",
    "start": "942920",
    "end": "948440"
  },
  {
    "text": "wild uh so our database could be comprised of five nodes maybe running an lxc maybe on physical hardware and those",
    "start": "948440",
    "end": "954759"
  },
  {
    "text": "nodes are connected by some IP network then we can induce failures in that Network or we could kill processes we",
    "start": "954759",
    "end": "959800"
  },
  {
    "text": "could pause processes induce different sorts of events and then outside that system we're going to run five client",
    "start": "959800",
    "end": "966600"
  },
  {
    "text": "processes and those are going to be a sort of um logically single-threaded series of operations against a database",
    "start": "966600",
    "end": "972560"
  },
  {
    "text": "like incrementing numbers or reading and writing and we're try to observe the boundary and see if the database",
    "start": "972560",
    "end": "979000"
  },
  {
    "text": "preserves the invariance we think it does we have no idea what happens inside of a database if you hand me an instance",
    "start": "979000",
    "end": "984639"
  },
  {
    "text": "of ROK or you hand me an instance of postgress I have no idea what kind of message is exchanging internally I don't",
    "start": "984639",
    "end": "990120"
  },
  {
    "text": "know it's internal State it's complicated it's millions of lines of code but if it follows these laws these",
    "start": "990120",
    "end": "995880"
  },
  {
    "text": "invariant we don't have to know what it does internally we just watch what occurs at the boundary and make sure that the clients all have a consistent",
    "start": "995880",
    "end": "1003360"
  },
  {
    "text": "view so a client's going to generate some randomized operations like write the number what number try six uh maybe",
    "start": "1003360",
    "end": "1009920"
  },
  {
    "text": "it'll try a read maybe it'll try an increment well we apply these operations to database and then they're going to",
    "start": "1009920",
    "end": "1015560"
  },
  {
    "text": "terminate in one of three ways we could we could successfully termin and that's when we know the operation succeeded we",
    "start": "1015560",
    "end": "1021600"
  },
  {
    "text": "could crash and We Know It failed so that's like if if you couldn't even look up the database node to talk to you know",
    "start": "1021600",
    "end": "1028280"
  },
  {
    "text": "your operation didn't take place we call that a failure or it could be indeterminate maybe there's a network",
    "start": "1028280",
    "end": "1033880"
  },
  {
    "text": "timeout maybe a process crashes you just don't know what happened and then we have to consider that operation as a",
    "start": "1033880",
    "end": "1039480"
  },
  {
    "text": "possibility maybe it occurs maybe it doesn't and it could take place at any time in the future maybe it's buffered in some in some Network hardware and",
    "start": "1039480",
    "end": "1046240"
  },
  {
    "text": "arrives 10 minutes later so as the clients interact with the system they're",
    "start": "1046240",
    "end": "1051320"
  },
  {
    "text": "going to build up a picture over time of uh increments or of additions to sets or",
    "start": "1051320",
    "end": "1057679"
  },
  {
    "text": "of reads every one of them is going to have an invocation and a completion some window of time when it was valid and if",
    "start": "1057679",
    "end": "1063080"
  },
  {
    "text": "it crashes that window will be infinite out to time infinity and our job is to figure out if these operations together",
    "start": "1063080",
    "end": "1070120"
  },
  {
    "text": "make sense like if we're looking for linearizability I have to find a path that takes us through all of the known",
    "start": "1070120",
    "end": "1075799"
  },
  {
    "text": "successful operations in a way that is consistent with the model of the system",
    "start": "1075799",
    "end": "1081280"
  },
  {
    "text": "and and that means if I've got a register for example I have to read the value that's currently in the register",
    "start": "1081280",
    "end": "1086440"
  },
  {
    "text": "along that path so I'm not allowed to read B from a register containing a I have to always read a from a register",
    "start": "1086440",
    "end": "1092559"
  },
  {
    "text": "that contains a to do this we write a data type um a function that just tells",
    "start": "1092559",
    "end": "1097880"
  },
  {
    "text": "us what things are allowed what can you do with a given data structure so for register we might say uh I've got a",
    "start": "1097880",
    "end": "1104799"
  },
  {
    "text": "register contains a single thing called X I have a step function that tells us given a current value of the register",
    "start": "1104799",
    "end": "1110520"
  },
  {
    "text": "and an operation to apply how we're going to evolve the system it depends on",
    "start": "1110520",
    "end": "1117039"
  },
  {
    "text": "the function f of the operation if we're doing a write we just replace the register with a new one that contains",
    "start": "1117039",
    "end": "1122400"
  },
  {
    "text": "the the given value so if I write the number four I hand you back a register that that contains four if you do a read",
    "start": "1122400",
    "end": "1128960"
  },
  {
    "text": "though it depends on whether the value that we have X is equal to the value",
    "start": "1128960",
    "end": "1134080"
  },
  {
    "text": "from the operation so if you try to read the number two from a reg that contains two this is valid and it doesn't change",
    "start": "1134080",
    "end": "1140960"
  },
  {
    "text": "the register so the register just returns unchanged that's R if you try to read something else like you you you do",
    "start": "1140960",
    "end": "1147480"
  },
  {
    "text": "a read and you see three but the value should have been two you know that it's inconsistent and so we return to special",
    "start": "1147480",
    "end": "1152840"
  },
  {
    "text": "inconsistent type this this single- threaded function encapsulates all the behavior of a register this is the model",
    "start": "1152840",
    "end": "1159320"
  },
  {
    "text": "the invariant that we talked about in that first consistency slide it's it's all the rules that we expect from uh",
    "start": "1159320",
    "end": "1166400"
  },
  {
    "text": "reads and writes against a variable and then we'll apply it to a given sort of single- threaded interpretation of",
    "start": "1166400",
    "end": "1172720"
  },
  {
    "text": "the history so if I've got a state like three I'll say okay let's call the step function with the register that contains",
    "start": "1172720",
    "end": "1178440"
  },
  {
    "text": "three I'll pass it an operation like read the value two because those things aren't equal it returns inconsistent and",
    "start": "1178440",
    "end": "1185080"
  },
  {
    "text": "we know that that particular timeline is invalid so over time as we move through the history we'll take every possible",
    "start": "1185080",
    "end": "1191679"
  },
  {
    "text": "path and we'll come up with some some operations some some histories that are valid and some that are invalid and",
    "start": "1191679",
    "end": "1197840"
  },
  {
    "text": "ideally we'll find one valid path or more than one valid path that takes us through the whole history and we'll know the system was",
    "start": "1197840",
    "end": "1203799"
  },
  {
    "text": "linearizable or if we building an eventually consistent system we might validate that all the successful increment operations on a counter are",
    "start": "1203799",
    "end": "1210679"
  },
  {
    "text": "eventually present in a read or maybe if we add things to a set all the things you put in should be eventually present",
    "start": "1210679",
    "end": "1216520"
  },
  {
    "text": "in some final read so you could write different sort of tests different checks against this sort of",
    "start": "1216520",
    "end": "1222280"
  },
  {
    "text": "History so generating random operations applying them to database looking and",
    "start": "1222280",
    "end": "1227679"
  },
  {
    "text": "seeing what happens and then from that concurrent history we we apply some functions that check to see whether or",
    "start": "1227679",
    "end": "1233440"
  },
  {
    "text": "not it makes sense sounds so good so far okay so now for the",
    "start": "1233440",
    "end": "1241080"
  },
  {
    "text": "blood uh are you not entertained uh so we've got we've got uh a way to check",
    "start": "1241080",
    "end": "1247960"
  },
  {
    "text": "systems now and I've been I've been working on this for a couple years and I've I've run quite a few analyses um",
    "start": "1247960",
    "end": "1253880"
  },
  {
    "text": "the first ones were with reos Sentinel mongodb and riok uh reos Sentinel will go into or at least would go into Long",
    "start": "1253880",
    "end": "1260760"
  },
  {
    "text": "Live split brain and lose a bunch of data um maybe up to 50% depending on how the preditions happened mongod DB lost",
    "start": "1260760",
    "end": "1267960"
  },
  {
    "text": "data at every level of right consistency rok's defaults for last right wins caused it to lose data as well during",
    "start": "1267960",
    "end": "1273960"
  },
  {
    "text": "petition um but if you use crdts and allow Mt true or siblings uh everything",
    "start": "1273960",
    "end": "1280200"
  },
  {
    "text": "works as designed this is actually how RI is intended to work this is a well documented result but because the defaults were last right wins you could",
    "start": "1280200",
    "end": "1286279"
  },
  {
    "text": "run into scenarios where if you tried to change data you could lose information in fall of 2013 came back",
    "start": "1286279",
    "end": "1292360"
  },
  {
    "text": "and tested Kafka newb and Cassandra uh also zookeeper zookeeper passed um Kafka",
    "start": "1292360",
    "end": "1299520"
  },
  {
    "text": "had a bug in their 08 beta prior to release uh where the replication algorithm would fail to preserve",
    "start": "1299520",
    "end": "1306279"
  },
  {
    "text": "documents when it ran out of insync nodes so if you had a primary die when",
    "start": "1306279",
    "end": "1312200"
  },
  {
    "text": "it was isolated away from the network that would cause it to discard uh inputs neb claimed to beat the the cap theorem",
    "start": "1312200",
    "end": "1319000"
  },
  {
    "text": "and the way it did this was by not doing anything at all during preditions and just waiting for them to be over uh",
    "start": "1319000",
    "end": "1325640"
  },
  {
    "text": "Cassandra valid strategy as long as your preditions are short um Cassandra uh",
    "start": "1325640",
    "end": "1331240"
  },
  {
    "text": "lost data the same way that riok does it uses time stamps to do uh resolution so it will discard uh more recent rights if",
    "start": "1331240",
    "end": "1338960"
  },
  {
    "text": "your time stamps for your clocks are not perfectly synchronized um the",
    "start": "1338960",
    "end": "1344559"
  },
  {
    "text": "transaction system in Cassandra also had a number of bugs uh one is that it uses four round trips for every message which",
    "start": "1344559",
    "end": "1351360"
  },
  {
    "text": "makes it somewhat slow the next one is that it would deadlock permanently and you had to reset the cluster State",
    "start": "1351360",
    "end": "1356520"
  },
  {
    "text": "manually um the next bug I found once that was fixed was that it would actually lose data by running multiple",
    "start": "1356520",
    "end": "1362120"
  },
  {
    "text": "copies of the operation over and over again um Cassandra has since fixed those",
    "start": "1362120",
    "end": "1368080"
  },
  {
    "text": "things I think uh the time stamp issues are still present but I think the transaction system is stronger 2014 uh rabid mq split brain",
    "start": "1368080",
    "end": "1376200"
  },
  {
    "text": "again uh when rabid mq recovers from partition one of the nodes simply clobbers the other one and so you lose all the information that happened on",
    "start": "1376200",
    "end": "1382159"
  },
  {
    "text": "that node uh etcd and console um are strongly consistent configuration sort of coordination systems um their rights",
    "start": "1382159",
    "end": "1389520"
  },
  {
    "text": "appear to be safe but the reads which were supposed to be linearizable were actually stale they see old data from",
    "start": "1389520",
    "end": "1394720"
  },
  {
    "text": "the past uh elastic search uh loses data in all sorts of exciting ways we'll talk a little bit more about that",
    "start": "1394720",
    "end": "1400919"
  },
  {
    "text": "later this is the part of the talk where I would present to you new databases I'd say and Now for Something Completely Different uh to do something completely",
    "start": "1400919",
    "end": "1408320"
  },
  {
    "text": "however I would like to do something which is in fact the same uh we're going to come back to some of these databases that I've talked about before and see",
    "start": "1408320",
    "end": "1413880"
  },
  {
    "text": "how they progressed for mongod DB which uh many of us know and love um had a",
    "start": "1413880",
    "end": "1420200"
  },
  {
    "text": "number of safety issues in the first Jepson test for rights it will lose data if you write to it uh well let's back up",
    "start": "1420200",
    "end": "1429039"
  },
  {
    "text": "for a second the way manga to be started was by not checking to see if any errors occurred whatsoever it would just sort",
    "start": "1429039",
    "end": "1435200"
  },
  {
    "text": "of cast its operations into the void and hope that they arrive safely on some foreign Shore um this of course is very",
    "start": "1435200",
    "end": "1441440"
  },
  {
    "text": "fast it leads to phenomenal benchmarks and reputation for performance that persists today however it is not particularly",
    "start": "1441440",
    "end": "1446880"
  },
  {
    "text": "safe the new defaults that they've been putting in place actually check to see whether not an error occurred um some of",
    "start": "1446880",
    "end": "1453440"
  },
  {
    "text": "the clients look to see if an error occurred uh up to the point at which it is acknowledged in memory this of course",
    "start": "1453440",
    "end": "1458960"
  },
  {
    "text": "is not safe if a node crashes uh other clients will check to make sure that it's safe on dis on at least one of the",
    "start": "1458960",
    "end": "1465039"
  },
  {
    "text": "nodes but that's also not safe if you're not running to a majority of nodes in  if you're using anything less than",
    "start": "1465039",
    "end": "1470960"
  },
  {
    "text": "right conserned majority you can have a roll back a roll back is where some",
    "start": "1470960",
    "end": "1476640"
  },
  {
    "text": "alternate history proceedes and some other node accepts new information which",
    "start": "1476640",
    "end": "1483520"
  },
  {
    "text": "conflicts with your rights and when the two come back together the one that has",
    "start": "1483520",
    "end": "1488799"
  },
  {
    "text": "more sort of authoritativeness whatever that means in will beat the one that did not replicate its rights fully",
    "start": "1488799",
    "end": "1495760"
  },
  {
    "text": "and those rights will be written onto disc in some file and you as as an operator have to go and look at that file and figure out what",
    "start": "1495760",
    "end": "1501799"
  },
  {
    "text": "happened this is of course impossible um at least in generality because imagine",
    "start": "1501799",
    "end": "1507720"
  },
  {
    "text": "that I give you a counter which has two versions one of them from the database as it currently stands and one of them",
    "start": "1507720",
    "end": "1513880"
  },
  {
    "text": "from disk the one in the database says the counter's value is six the one on disk says the value is five and these",
    "start": "1513880",
    "end": "1519320"
  },
  {
    "text": "things conflict what is the true value what do what do you think it",
    "start": "1519320",
    "end": "1524360"
  },
  {
    "text": "is six that's a great answer right so the value would five and then one node",
    "start": "1524360",
    "end": "1529640"
  },
  {
    "text": "was isolated and we did a single increment and the new value is six sounds good right who thinks that's",
    "start": "1529640",
    "end": "1536880"
  },
  {
    "text": "correct yeah that could be it it could be it another possible answer do you have",
    "start": "1536880",
    "end": "1542480"
  },
  {
    "text": "one let's try 11 imagine that diverge at state zero and one side incremented 1 2 3 4 5 and",
    "start": "1542480",
    "end": "1550320"
  },
  {
    "text": "another side incremented 1 2 34 5 6 the proper number of increments is 11 because these operations uh because",
    "start": "1550320",
    "end": "1558399"
  },
  {
    "text": "we have no causality tracking we don't know when the Divergence happened you cannot tell what the correct value is supposed to be only certain data",
    "start": "1558399",
    "end": "1565559"
  },
  {
    "text": "structures called crdts are safe to use in at any level less than majority if you hit a roll back you can lose data",
    "start": "1565559",
    "end": "1572360"
  },
  {
    "text": "uh at least for the way most people use it so problem with majority rights even",
    "start": "1572360",
    "end": "1578960"
  },
  {
    "text": "even at the strongest level which is supposed to be safe is that when mongodb hit a network error it would check off the okay box and send the response back",
    "start": "1578960",
    "end": "1585600"
  },
  {
    "text": "to the client um the client would of course interpret this as okay and then it would consider accepted rights to",
    "start": "1585600",
    "end": "1591240"
  },
  {
    "text": "have succeeded uh when in fact they were lost so that bug was fixed and I'd like",
    "start": "1591240",
    "end": "1597960"
  },
  {
    "text": "to come back to mongodb now at version 267 uh and try to evaluate whether it obeys the same",
    "start": "1597960",
    "end": "1604679"
  },
  {
    "text": "guarantees I'm testing 267 here um 30 was released during testing 30 still has",
    "start": "1604679",
    "end": "1610200"
  },
  {
    "text": "I believe single node data loss problems in wired tiger so it might be a bit premature to test those I believe",
    "start": "1610200",
    "end": "1615320"
  },
  {
    "text": "everything I'm going to tell you here applies equally to 26 7 and the 30 series the model I want to test is a",
    "start": "1615320",
    "end": "1621120"
  },
  {
    "text": "linearizable register this is a single document right doesn't give you inter document guarantees at all it's always on a single object uh and we're",
    "start": "1621120",
    "end": "1628360"
  },
  {
    "text": "just going to write a single number to it the operations we can do in a c register are to write so we'll change",
    "start": "1628360",
    "end": "1633720"
  },
  {
    "text": "the value from say 0 to one we can read and again reads have to read the the current value that's in the document you",
    "start": "1633720",
    "end": "1640000"
  },
  {
    "text": "can't read some random value and then we can do this thing called a compare and set which is where we've got a current",
    "start": "1640000",
    "end": "1646919"
  },
  {
    "text": "value like zero and we're going to compare it to the first argument and then if it's true we'll set it to the second so I can",
    "start": "1646919",
    "end": "1653559"
  },
  {
    "text": "compare and set zero from 0 to one the new value would be one if we try to compare and set zero from say one to two",
    "start": "1653559",
    "end": "1660240"
  },
  {
    "text": "we will fail because zero and one are different so this is a hybrid of a read and a write it's an atomic",
    "start": "1660240",
    "end": "1667679"
  },
  {
    "text": "transformation an interesting thing happened when I ran these tests I saw histories like this and of course there",
    "start": "1667679",
    "end": "1673640"
  },
  {
    "text": "there're thousands of elements long but this is this is a tiny fraction of a history from just after a network",
    "start": "1673640",
    "end": "1678960"
  },
  {
    "text": "partition began and the sort of strange thing happens we initially know the",
    "start": "1678960",
    "end": "1684279"
  },
  {
    "text": "value is zero we do a read of zero so somewhere in that green bar the very first one we know the state had to be",
    "start": "1684279",
    "end": "1689799"
  },
  {
    "text": "zero the next known operation is a read of four so the value had to be four that time and the only way we could get there",
    "start": "1689799",
    "end": "1696000"
  },
  {
    "text": "is by jumping up through this comparon set from 0 to four okay so far so good now we have to",
    "start": "1696000",
    "end": "1704320"
  },
  {
    "text": "get to this read of three we could execute a comparon set from four to two that'll go through because the current value is four but that leaves the value",
    "start": "1704320",
    "end": "1710760"
  },
  {
    "text": "as two which is not three so that path will fail we prune it alternatively we could write three",
    "start": "1710760",
    "end": "1716760"
  },
  {
    "text": "and that allows us to read three so we've got a consistent path now we have to get to this final",
    "start": "1716760",
    "end": "1722640"
  },
  {
    "text": "read of zero we could go through this WR of four but that makes the value four not zero we could write four change four",
    "start": "1722640",
    "end": "1729919"
  },
  {
    "text": "to two and then that value is two and that's not zero either we could read three compare in set 3 to one one is not",
    "start": "1729919",
    "end": "1737919"
  },
  {
    "text": "zero we could have that cast from one go through we could go to four we could go to two no matter how we order these",
    "start": "1737919",
    "end": "1743960"
  },
  {
    "text": "operations there's no way to get zero it's almost as if the state split",
    "start": "1743960",
    "end": "1749320"
  },
  {
    "text": "in time and and in one node on one copy of the history the state is still zero",
    "start": "1749320",
    "end": "1754559"
  },
  {
    "text": "it's unchanged and the other one we went through these changes and we saw uh four and then three",
    "start": "1754559",
    "end": "1760880"
  },
  {
    "text": "occur okay so this is a linearizability violation uh this could be interpreted as a stale read like we read a value",
    "start": "1760880",
    "end": "1767919"
  },
  {
    "text": "from the past alternatively you could look at it as as a a dirty uh read where",
    "start": "1767919",
    "end": "1773399"
  },
  {
    "text": "we're reading some uncommitted garbage data that like a right that succeeded when it shouldn't have or more",
    "start": "1773399",
    "end": "1779080"
  },
  {
    "text": "specifically a right that went indeterminate it could have succeeded it could have not succeeded uh we don't know what happened",
    "start": "1779080",
    "end": "1786200"
  },
  {
    "text": "to it but its effects were visible regardless so these are now reported as",
    "start": "1786200",
    "end": "1791360"
  },
  {
    "text": "server 17975 in uh both dirty reads and stale reads are closely related",
    "start": "1791360",
    "end": "1796600"
  },
  {
    "text": "phenomena dirty dir reads are known this is something that's documented to be uh because only supports read",
    "start": "1796600",
    "end": "1801760"
  },
  {
    "text": "uncommitted as its maximum isolation level dirty reads are where our our rights those C operations I talked about",
    "start": "1801760",
    "end": "1807760"
  },
  {
    "text": "in the rights those are all happening on some minority node in the cluster they don't get replicated",
    "start": "1807760",
    "end": "1814120"
  },
  {
    "text": "they're not successful they never actually should have gone through at all but mongodb just writes it immediately",
    "start": "1814120",
    "end": "1819679"
  },
  {
    "text": "to the local node and then tries to replicate it and so it's visible to anybody else who reads from that primary",
    "start": "1819679",
    "end": "1824919"
  },
  {
    "text": "so when we're doing read operations we can see this garbage data that should not have been committed and then those things would be destroyed during a roll",
    "start": "1824919",
    "end": "1831480"
  },
  {
    "text": "back alternatively we could look at it as a stale read which is where those rights instead of happening on on the",
    "start": "1831480",
    "end": "1837120"
  },
  {
    "text": "minority component they happen on the majority and then you can write valid data and then not see it so these things are are sort of two sides of the same",
    "start": "1837120",
    "end": "1844440"
  },
  {
    "text": "phenomena um since Mongo's read operations aren't linked to the replication algorithm it doesn't offer",
    "start": "1844440",
    "end": "1849919"
  },
  {
    "text": "us any guarantees about the values that we read in time that rules out read your rights and",
    "start": "1849919",
    "end": "1855440"
  },
  {
    "text": "monotonic reads uh because because I could write a value two and then see one I could see one two one two any order is",
    "start": "1855440",
    "end": "1862240"
  },
  {
    "text": "allowable I could see arbitrarily far back in time um depending on the time scales of",
    "start": "1862240",
    "end": "1867799"
  },
  {
    "text": "petitions it also by induction rules out pamm and causal and sequential and linearizable and and onsr all those",
    "start": "1867799",
    "end": "1875399"
  },
  {
    "text": "consistency models that you want to have uh if you're doing things like mutexes or trying to do things like claim a a",
    "start": "1875399",
    "end": "1881440"
  },
  {
    "text": "username those things no longer apply and this is particularly interesting because M to be explicitly",
    "start": "1881440",
    "end": "1886799"
  },
  {
    "text": "claimed linearizability in their documents they say that if you read with read preference primary you will see the",
    "start": "1886799",
    "end": "1892559"
  },
  {
    "text": "most recent rights you will see the most recent versions of a document this is not true you could see old",
    "start": "1892559",
    "end": "1898159"
  },
  {
    "text": "versions We also know from Dirty reads that we can't have read committed and anything higher than that so that",
    "start": "1898159",
    "end": "1904240"
  },
  {
    "text": "there's a documented failure on that side we know that uh read unom read",
    "start": "1904240",
    "end": "1909519"
  },
  {
    "text": "uncommitted rules out recommitted mon time view cability all this stuff this however is new so Monga will actually",
    "start": "1909519",
    "end": "1916880"
  },
  {
    "text": "give us us monotonic rights rights follow reads reeno committed what it claims to give us is all the way up to linearizability on a single document so",
    "start": "1916880",
    "end": "1923480"
  },
  {
    "text": "there's a discrepancy here between what the documentation says and what it actually provides if you're Mong to me user",
    "start": "1923480",
    "end": "1930799"
  },
  {
    "text": "um the results been somewhat complicated they closed the ticket saying it was a dupe of dirty reads uh they then tried",
    "start": "1930799",
    "end": "1937919"
  },
  {
    "text": "to close the ticket saying that it was uh working as",
    "start": "1937919",
    "end": "1942919"
  },
  {
    "text": "expected uh now it's been rescheduled for hopefully version 3.1 so we should",
    "start": "1943840",
    "end": "1949679"
  },
  {
    "text": "see a fix at some point if you're a  user the documentation says you only have to worry about stale reads if",
    "start": "1949679",
    "end": "1955159"
  },
  {
    "text": "you read from secondaries this is not true you have to worry about it all the time uh if you do need to ensure recency",
    "start": "1955159",
    "end": "1961159"
  },
  {
    "text": "you can do a compare and set changing the value you want to read to itself and",
    "start": "1961159",
    "end": "1966799"
  },
  {
    "text": "also to keep the Optimizer from ignoring your operation you have to change an unrelated field um so you do a hybrid read and",
    "start": "1966799",
    "end": "1974240"
  },
  {
    "text": "Cass operation those two things will give you a lot bound that tells you whether or not your read is",
    "start": "1974240",
    "end": "1979880"
  },
  {
    "text": "valid okay elastic search uh elastic search test was for",
    "start": "1979880",
    "end": "1986600"
  },
  {
    "text": "110 in June of 2014 we found uh well a there was an unnown case of",
    "start": "1986600",
    "end": "1992120"
  },
  {
    "text": "inconsistency uh elastic search had a long comment Thread about how if you have a partition which isolated most of",
    "start": "1992120",
    "end": "1999000"
  },
  {
    "text": "the network but left one node connecting two sides a node on each side could elect itself a primary and claim the",
    "start": "1999000",
    "end": "2005679"
  },
  {
    "text": "node in the middle as a follow and that not in the middle would happily sort of serve two uh primaries for a",
    "start": "2005679",
    "end": "2011480"
  },
  {
    "text": "while and it would you know override its state continuously and you would you would lose data when it came back together uh and this state would persist",
    "start": "2011480",
    "end": "2017919"
  },
  {
    "text": "as long as partition did what was not documented at the time was that Mong or sorry elastic search will actually lose",
    "start": "2017919",
    "end": "2023600"
  },
  {
    "text": "data even if a network partion completely cuts the cluster in half and in fact it will also lose data even if",
    "start": "2023600",
    "end": "2029279"
  },
  {
    "text": "only a single node is isolated so this could result in the loss of lots of data Maybe up to 90% of",
    "start": "2029279",
    "end": "2035360"
  },
  {
    "text": "your documents inserted during a fail failure uh the cluster status could return green when it was in fact hosed",
    "start": "2035360",
    "end": "2042320"
  },
  {
    "text": "uh you could end up with clusters that were permanently wedged and had to be rebooted uh you",
    "start": "2042320",
    "end": "2047679"
  },
  {
    "text": "could gosh this is a fun one so it there's a hardcoded timeout in elastic search no matter how many of the knobs",
    "start": "2047679",
    "end": "2054040"
  },
  {
    "text": "you turn down you cannot lower this as far as I know um it takes 90 seconds to elect a new primary during a petition so",
    "start": "2054040",
    "end": "2060720"
  },
  {
    "text": "if you're doing right swastic surge you have a 90c window any time a network hiccup isolates a primary during which you just can't do anything and have to",
    "start": "2060720",
    "end": "2066720"
  },
  {
    "text": "BL elastic search had initially no documentation for these failure modes uh",
    "start": "2066720",
    "end": "2072638"
  },
  {
    "text": "however they went back and added a bunch of documentation so there's now a really great page that has a huge overview of all the stuff that can happen including",
    "start": "2072639",
    "end": "2078960"
  },
  {
    "text": "stuff like loss of documents during Network petition uh they also went ahead and closed the GitHub issue uh and that",
    "start": "2078960",
    "end": "2086079"
  },
  {
    "text": "issue is for the uh split brain losing documents during intersective partition they say yes this issue is definitely",
    "start": "2086079",
    "end": "2092158"
  },
  {
    "text": "fixed now because it had a bunch of kind of false fixes before and had subsequently been",
    "start": "2092159",
    "end": "2097640"
  },
  {
    "text": "reopened um now folks are still referring to the last talk they're asking for a followup uh the response from elastic search employees is usually",
    "start": "2097640",
    "end": "2103800"
  },
  {
    "text": "something like durability in elastic search isn't a major problem these days because these complaints are old so I'd",
    "start": "2103800",
    "end": "2109599"
  },
  {
    "text": "like to come back and reevaluate this is with the most recent version as of uh like late February uh",
    "start": "2109599",
    "end": "2117200"
  },
  {
    "text": "150 intercepting partitions that case that was closed still cause data loss uh it's less less than before um it",
    "start": "2117200",
    "end": "2125320"
  },
  {
    "text": "no longer enters split brain for the whole duration of the partition now it just enters it for about 90 seconds and again that's related to that timeout in",
    "start": "2125320",
    "end": "2131720"
  },
  {
    "text": "in uh membership transition so you'll lose some documents but not all in fact complete transitions",
    "start": "2131720",
    "end": "2138520"
  },
  {
    "text": "or sry complete partitions and even single no partitions will also still lose your data so every failure mode",
    "start": "2138520",
    "end": "2144599"
  },
  {
    "text": "that we discussed in the first test is still open in elastic search right now even though the doc the the GitHub issue has been closed that only applies to the",
    "start": "2144599",
    "end": "2151560"
  },
  {
    "text": "longlived split brain not to the short-lived one and there are other tickets that address this now elting new",
    "start": "2151560",
    "end": "2156960"
  },
  {
    "text": "primary still takes 90 seconds so be prepared for unavailability uh but I want to emphasize the last ex has made",
    "start": "2156960",
    "end": "2162839"
  },
  {
    "text": "tremendous progress that that failure page that talks about all the ways they can lose data is actually a great resource for operations Engineers who",
    "start": "2162839",
    "end": "2168920"
  },
  {
    "text": "are trying to deploy this thing I really want to encourage all database venders to have something similar on their",
    "start": "2168920",
    "end": "2174920"
  },
  {
    "text": "sites so elastic search fail modes during Network preditions are no longer as bad but they are still present if you",
    "start": "2174920",
    "end": "2181680"
  },
  {
    "text": "use elastic search and your network is somewhat less than perfect which is true uh you need to be aware that you could",
    "start": "2181680",
    "end": "2187240"
  },
  {
    "text": "lose data so you should store your data in some other data store hopefully a safer one and then continuously fill",
    "start": "2187240",
    "end": "2193680"
  },
  {
    "text": "elastic search with a Conant of that database and you you troll over your primary database every day or so that",
    "start": "2193680",
    "end": "2198720"
  },
  {
    "text": "means if a document ever goes missing it'll be restored by tomorrow and this is typically fine because most of the time search is probabilistic anyway",
    "start": "2198720",
    "end": "2205839"
  },
  {
    "text": "right it's okay if a document disappears for a little bit as long as it comes back",
    "start": "2205839",
    "end": "2211119"
  },
  {
    "text": "later finally I want to close with a new database uh this is aerospike which is a",
    "start": "2211240",
    "end": "2216359"
  },
  {
    "text": "hyper performance five dimensional key Value Store um looks a little bit like Cassandra like big table it's often used",
    "start": "2216359",
    "end": "2221680"
  },
  {
    "text": "in OTP for adte uh often used as a cash offers phenomenal latencies like",
    "start": "2221680",
    "end": "2228200"
  },
  {
    "text": "typically like one to two millisecond latencies for you know millions of operations per second um it's been very",
    "start": "2228200",
    "end": "2235079"
  },
  {
    "text": "well optimized and it has this wonderful claim on the website reliability 100% uptime with",
    "start": "2235079",
    "end": "2244079"
  },
  {
    "text": "strong consistency acid 100% okay my high bar for availability is the",
    "start": "2244079",
    "end": "2250119"
  },
  {
    "text": "like the ericon axd 301 switch right uh which is offered like",
    "start": "2250119",
    "end": "2257240"
  },
  {
    "text": "999999999 up time over the life cycle the project or whatever it's like 1.1 million lines of Earline code this is a",
    "start": "2258000",
    "end": "2265000"
  },
  {
    "text": "significant technological achievement for uptime this is infinitely",
    "start": "2265000",
    "end": "2270119"
  },
  {
    "text": "better and it offers acid which this the the ericon switch did not so I'm I'm thrilled",
    "start": "2271599",
    "end": "2278240"
  },
  {
    "text": "uh specifically it tells us that there's no data loss which is like all right I'm in um there's Road level locking",
    "start": "2278240",
    "end": "2284599"
  },
  {
    "text": "immediate consistency acid with synchronous replication so I'm I'm guessing at this point that they've got a paxis algorithm that's going to handle",
    "start": "2284599",
    "end": "2290920"
  },
  {
    "text": "the the sort of rights that be synchronous it'll be highly available but it'll it'll lose availability if it ever goes below Quorum um I'm excited",
    "start": "2290920",
    "end": "2298400"
  },
  {
    "text": "this looks a little bit like Foundation DB to me uh",
    "start": "2298400",
    "end": "2304520"
  },
  {
    "text": "but we have to go a little deeper we have to dig into the documentation somewhat Aeros spike is it says by and",
    "start": "2304520",
    "end": "2311480"
  },
  {
    "text": "large an AP system which offers High consistency who knows the definition of",
    "start": "2311480",
    "end": "2317599"
  },
  {
    "text": "high consistency nobody because it's not a real term uh aerospike provides recommitted",
    "start": "2317599",
    "end": "2324960"
  },
  {
    "text": "ah there's a real term recommitted isolation level using record locks to ensure isolation between transactions",
    "start": "2324960",
    "end": "2330000"
  },
  {
    "text": "that's okay recommitted over here that's down in this green region of of uh availability where we can have total",
    "start": "2330000",
    "end": "2335920"
  },
  {
    "text": "availability that's an AP data store can offer recommitted this is this is so far so good but it goes on for operations in",
    "start": "2335920",
    "end": "2342839"
  },
  {
    "text": "single key to replication error Spike provides immediate consistency using synchronous rights to replicas so we're",
    "start": "2342839",
    "end": "2348599"
  },
  {
    "text": "going to we're going to write an operation to uh data store it will replicate out to its partners and then",
    "start": "2348599",
    "end": "2353920"
  },
  {
    "text": "come back and then it can respond that's a synchronous replication we typically see it with paxos or Zab or raft read",
    "start": "2353920",
    "end": "2360640"
  },
  {
    "text": "request it says are guaranteed to find the newly written data that to me sounds",
    "start": "2360640",
    "end": "2366040"
  },
  {
    "text": "like linear ability remember that's that real time constraint most recent copy that property is explicitly prohibited",
    "start": "2366040",
    "end": "2372960"
  },
  {
    "text": "from being totally available by the cap theorem so how do you beat",
    "start": "2372960",
    "end": "2378599"
  },
  {
    "text": "cap well you don't it's a theorem it's math right um the way you beat it practically is you virtually eliminate",
    "start": "2378599",
    "end": "2385280"
  },
  {
    "text": "partition formation proven by years of deployment in Data Center and Cloud environments so the Microsoft sigcom",
    "start": "2385280",
    "end": "2392280"
  },
  {
    "text": "paper tells us that well-managed data centers are not immune to partitions um um the cloud environments you're likely",
    "start": "2392280",
    "end": "2399480"
  },
  {
    "text": "to deploy to probably see partitions on a weekly basis I we certainly see them and anecdotally I know a lot of folks",
    "start": "2399480",
    "end": "2405079"
  },
  {
    "text": "you know you can't own up to it publicly right nobody's going to get up and admit oh yeah our network is terrible a lot of",
    "start": "2405079",
    "end": "2410400"
  },
  {
    "text": "people don't even instrument it but it is very common uh the way you",
    "start": "2410400",
    "end": "2416240"
  },
  {
    "text": "avoid it is to set up aerospike with cluster nodes that are tightly coupled so partitions are virtually impossible",
    "start": "2416240",
    "end": "2421359"
  },
  {
    "text": "to create remember coupling and availability are diametrically opposed if you put all your stuff in the same rep it's going to be more highly uh",
    "start": "2421359",
    "end": "2428680"
  },
  {
    "text": "coupled it it has has fewer Network hops so the predition probability is less but",
    "start": "2428680",
    "end": "2434280"
  },
  {
    "text": "when the rack power fails you lose your whole thing so you put them on different racks okay now I'm I'm working with the",
    "start": "2434280",
    "end": "2439400"
  },
  {
    "text": "top of rack switches the link between those could go down uh that's a chance for petitions maybe for even more",
    "start": "2439400",
    "end": "2444640"
  },
  {
    "text": "availability I'm Distributing them out between multiple data centers multiple availability zones and the probability",
    "start": "2444640",
    "end": "2450000"
  },
  {
    "text": "of network interruptions there is much much higher so for high availability we want to distribute things widely",
    "start": "2450000",
    "end": "2456920"
  },
  {
    "text": "logically if not spatially and yet for partition",
    "start": "2456920",
    "end": "2462280"
  },
  {
    "text": "tolerance this you know the more you distribute the the more likely PRS become and the more we have to actually",
    "start": "2462280",
    "end": "2467760"
  },
  {
    "text": "worry about these problems so what does aerospike recommend you deploy to where's the magical Network you'll find",
    "start": "2467760",
    "end": "2473319"
  },
  {
    "text": "that doesn't have these problems where it's apparently Google compute engine or Amazon",
    "start": "2473319",
    "end": "2478760"
  },
  {
    "text": "ec2 have you ever deployed to these things like we no you don't okay so what",
    "start": "2479040",
    "end": "2485280"
  },
  {
    "text": "happens you know if you're if you're given that Network PRS will occur what occurs an Eros Spike for a compared set",
    "start": "2485280",
    "end": "2491319"
  },
  {
    "text": "register you get anomalies that look a lot like the manga DB1 where we uh read a value zero we do some Transformations",
    "start": "2491319",
    "end": "2498079"
  },
  {
    "text": "we get two we get four and then we compare and set 0 to three this requires the value be zero but there's no right",
    "start": "2498079",
    "end": "2503880"
  },
  {
    "text": "of zero that could possibly have taken place in that time frame so this is this is actually worse",
    "start": "2503880",
    "end": "2509560"
  },
  {
    "text": "than and we read a value that was bad so we had a stale read in this we're doing a right which could",
    "start": "2509560",
    "end": "2514760"
  },
  {
    "text": "have only taken place had the Network or had had the state kind of diverged uh this means that Cass operations are not",
    "start": "2514760",
    "end": "2521319"
  },
  {
    "text": "safe you can lose rights in Aeros Spike if a network position happens so that's",
    "start": "2521319",
    "end": "2527119"
  },
  {
    "text": "that's a hard constraint right linearizable registers this is a tricky problem what about a commutative operation what about something that",
    "start": "2527119",
    "end": "2532640"
  },
  {
    "text": "could be eventually consistent like a counter we'll do a whole bunch of increments and then we'll look for the counter's red value to be somewhere",
    "start": "2532640",
    "end": "2538760"
  },
  {
    "text": "between the number of attempted the number of completed increments and hopefully it'll it'll drift into that range given long enough counters as it",
    "start": "2538760",
    "end": "2545520"
  },
  {
    "text": "turns out also drop data during partitions so if I look at uh the the",
    "start": "2545520",
    "end": "2550680"
  },
  {
    "text": "red value over time that's this red line it should stay somewhere in the orange region between the number of attempted",
    "start": "2550680",
    "end": "2555839"
  },
  {
    "text": "and acknowledged increment operations it doesn't it falls lower and lower as preditions occur and you'll even get",
    "start": "2555839",
    "end": "2561079"
  },
  {
    "text": "into split brain mode like right here in the Middle where you get this kind of bounciness that's because we're talking into two different replicas one of them",
    "start": "2561079",
    "end": "2566760"
  },
  {
    "text": "thinks the value is 100 101 102 the other thinks the value is like 200 2011",
    "start": "2566760",
    "end": "2572280"
  },
  {
    "text": "203 and so you get bouncing oscillating values depending on on which replica you just you talk",
    "start": "2572280",
    "end": "2578200"
  },
  {
    "text": "to so I thought maybe I'm doing it wrong maybe I I forgot to flip a configuration switch and in fact in the assd",
    "start": "2578200",
    "end": "2584200"
  },
  {
    "text": "documentation there's a setting that talks about AP versus CP mode uh CP mode of course does not exist there's a lot",
    "start": "2584200",
    "end": "2590920"
  },
  {
    "text": "of discussion of how it could work but it's not a real feature how does AP mode work well it works by resolving conflicts using a",
    "start": "2590920",
    "end": "2598240"
  },
  {
    "text": "generation count which is the number of modifications that have happened so if I write B and C to one copy and then I",
    "start": "2598240",
    "end": "2604680"
  },
  {
    "text": "write D to a different one D happened temporary last ospite claims I'll read the most recent value so I should see D",
    "start": "2604680",
    "end": "2611599"
  },
  {
    "text": "but instead I'll see C because C's generation is higher it went through more changes in that",
    "start": "2611599",
    "end": "2617920"
  },
  {
    "text": "replica alternatively I can use TTL based resolution this doesn't work if I'm using aerospike as a long-term data",
    "start": "2617920",
    "end": "2623800"
  },
  {
    "text": "store where I I set my ttls to Infinity um if my ttls are finite it relies on",
    "start": "2623800",
    "end": "2629240"
  },
  {
    "text": "synchronized clocks so we have the same problems as Cassandra and riok last right wins you end up with uh some clock",
    "start": "2629240",
    "end": "2635319"
  },
  {
    "text": "difference and you can discard newer copies of data either way you're looking at lost",
    "start": "2635319",
    "end": "2640480"
  },
  {
    "text": "updates there's no way to preserve the invariance you want so the system is eventually",
    "start": "2640480",
    "end": "2646240"
  },
  {
    "text": "consistent it does agree on a value but it agrees on the wrong value we want semantically something",
    "start": "2646240",
    "end": "2652319"
  },
  {
    "text": "like a crdt where we could do a PN counter and our final value is the number of increments not just some",
    "start": "2652319",
    "end": "2658800"
  },
  {
    "text": "higher value now this is possible in Aeros Spike because there's an option called",
    "start": "2658800",
    "end": "2663960"
  },
  {
    "text": "application merge that says that a read gives you two copies both both Divergent versions of the data and then it's up to",
    "start": "2663960",
    "end": "2669200"
  },
  {
    "text": "you to merge those things together if you do that you can recover all sorts of eventual consistency properties with",
    "start": "2669200",
    "end": "2674720"
  },
  {
    "text": "crdts um this is how uh riok does it this is how um to some extent cql",
    "start": "2674720",
    "end": "2680160"
  },
  {
    "text": "collections in Cassandra work uh like CP mode this feature is documented but does not actually exist um so you're out of",
    "start": "2680160",
    "end": "2688520"
  },
  {
    "text": "luck uh hopefully it will exist at a later time I've talked to aerospike and they're enthusiastic about building this",
    "start": "2688520",
    "end": "2693599"
  },
  {
    "text": "in so to make it simple they claim acid acid",
    "start": "2693599",
    "end": "2700280"
  },
  {
    "text": "is this stuff over here things likeed G stability recommitted all of those are ruled out by lost updates like that's",
    "start": "2700280",
    "end": "2706960"
  },
  {
    "text": "that's like rule number one don't lose right operations completely uh and of course all the linearizability",
    "start": "2706960",
    "end": "2712200"
  },
  {
    "text": "properties those are those are out the door as well you can write something and it will just disappear that rules that monotonic rights um so basically",
    "start": "2712200",
    "end": "2718680"
  },
  {
    "text": "everything that is claimed here is garbage this is especially pernicious",
    "start": "2718680",
    "end": "2724359"
  },
  {
    "text": "it's it's it's really quite vexing because there's a paxos implementation in this system it it handles the the",
    "start": "2724359",
    "end": "2731480"
  },
  {
    "text": "coordination for which nodes own what what copies the data and paxos is a consensus system that solves these",
    "start": "2731480",
    "end": "2736920"
  },
  {
    "text": "problems it's it's guaranteed that everybody's going to agree on the same value if you have majority that's a that's a CP sort of algorithm so why why",
    "start": "2736920",
    "end": "2744119"
  },
  {
    "text": "don't you put the rights through it the answer from from aerospike is that well it would impact performance negatively because uh it would it would take too",
    "start": "2744119",
    "end": "2751200"
  },
  {
    "text": "many hops for latency I want to dispel this myth um aerospike does synchronous replication to all replicas so in order",
    "start": "2751200",
    "end": "2758200"
  },
  {
    "text": "to return we have to rate for every single node to come back with a response that means that our response time is governed by the slowest node in the",
    "start": "2758200",
    "end": "2765720"
  },
  {
    "text": "system in a quorum protocol like paxos or Zab or raft or V stamp replication uh",
    "start": "2765720",
    "end": "2773119"
  },
  {
    "text": "you can return as soon as a majority of acknowledged so if I have three nodes I can I can go ahead when just two of them",
    "start": "2773119",
    "end": "2778760"
  },
  {
    "text": "have responded so I can actually respond faster in terms of latency bounds with paxos than I could with a fully",
    "start": "2778760",
    "end": "2784200"
  },
  {
    "text": "synchronous replication system and even better I could actually be",
    "start": "2784200",
    "end": "2789680"
  },
  {
    "text": "correct this is only true however if the number of replicas is greater than two and it's not uh aerospike Only Stores",
    "start": "2789680",
    "end": "2797000"
  },
  {
    "text": "two copies of its data not three um which actually means that if aerospike wants to provide uh assd consistency it",
    "start": "2797000",
    "end": "2802760"
  },
  {
    "text": "will have to go partially unavailable the instant loses any node because you can no longer get Quorum um",
    "start": "2802760",
    "end": "2808960"
  },
  {
    "text": "so my guess is that you could evolve the system in two ways you could either up the number of replicas to three and",
    "start": "2808960",
    "end": "2814119"
  },
  {
    "text": "start using a real consensus algorithm or you can go the full crdt route and you eventual consistency and look a lot more like riok depending on whether you",
    "start": "2814119",
    "end": "2820760"
  },
  {
    "text": "want to bias towards availability and cross data center Behavior or more toward safety bottom line uh aerospike might be",
    "start": "2820760",
    "end": "2828400"
  },
  {
    "text": "a great database for statistics might be a great database for adtech stuff maybe you're doing a whole bunch of Rights and you don't care about losing some small",
    "start": "2828400",
    "end": "2834480"
  },
  {
    "text": "fraction of them maybe you're just doing countert tracking or caching and it it's just going to be a an unnoticeable blip",
    "start": "2834480",
    "end": "2841000"
  },
  {
    "text": "in your long-term data store but if you're actually relying on these guarantees for you know your primary sort a record for for safety about",
    "start": "2841000",
    "end": "2847440"
  },
  {
    "text": "moving dollar signs around um then it might not be a great choice so what have we learned in",
    "start": "2847440",
    "end": "2854880"
  },
  {
    "text": "general uh my job is to inspire you not just to strike fear into the hearts of",
    "start": "2854880",
    "end": "2861480"
  },
  {
    "text": "humans uh I want to emphasize that just because uh nobody has tested the system does not mean it is correct um a lot of",
    "start": "2861480",
    "end": "2868760"
  },
  {
    "text": "people say oh you know there's no there's no Jepson thing for that so I bet it's fine this is this is silly you",
    "start": "2868760",
    "end": "2874400"
  },
  {
    "text": "should actually look and see what's inside uh I want to emphasize that and elastic search in particular and in",
    "start": "2874400",
    "end": "2880000"
  },
  {
    "text": "fact every database that I've tested has made dramatic improvements right everybody's trying very hard to solve these difficult problems U has now",
    "start": "2880000",
    "end": "2887680"
  },
  {
    "text": "fixed the issue with uh with their majority right concern um elastic search now has great failure documentation this",
    "start": "2887680",
    "end": "2894040"
  },
  {
    "text": "is this is really good progress but there are still surprises down there in the depths and so like like Jac custo",
    "start": "2894040",
    "end": "2901040"
  },
  {
    "text": "you know we we sort of as you go deeper into documentation you'll discover new and interesting",
    "start": "2901040",
    "end": "2906200"
  },
  {
    "text": "behaviors um much like Ariel uh you know when we are as Engineers choosing a",
    "start": "2906200",
    "end": "2911440"
  },
  {
    "text": "database we're sort of signing a contract with the marketing department which is here symbolized by Ursula the seawitch and they're going to do a song",
    "start": "2911440",
    "end": "2918200"
  },
  {
    "text": "and dance and tell us wonderful things about the database and how much they're going to help us but unless we read that",
    "start": "2918200",
    "end": "2923960"
  },
  {
    "text": "contract in full we'll miss the fine print like your network must not partition even if you run a Google Compu",
    "start": "2923960",
    "end": "2929160"
  },
  {
    "text": "engine or you must kiss the prce by the third day if you don't do those things your documents disappear you lose your voice so you you need to read the",
    "start": "2929160",
    "end": "2936200"
  },
  {
    "text": "documents completely and then you have to test those guarantees for yourself you can't just you know uh assume that",
    "start": "2936200",
    "end": "2942599"
  },
  {
    "text": "because they claim linearizability that it actually holds true you have to fire up a rig and figure out if it",
    "start": "2942599",
    "end": "2948319"
  },
  {
    "text": "holds if you're a database vendor a lot of times people will tell me like oh you know we're we're really embarrassed",
    "start": "2948319",
    "end": "2954280"
  },
  {
    "text": "about what the the marketing page says but that's the marketing Department's problem like they they own that page we can't get it through uh you have to stop",
    "start": "2954280",
    "end": "2962319"
  },
  {
    "text": "collaborate listen like the the the marketing department needs to listen to engineering an engineer needs to take",
    "start": "2962319",
    "end": "2967480"
  },
  {
    "text": "the time to acknowledge that public representation is important that communication is an important attribute of our our our our discipline right",
    "start": "2967480",
    "end": "2974280"
  },
  {
    "text": "we're not just building Technical Solutions we're building social Solutions and as a cultural problem we",
    "start": "2974280",
    "end": "2979880"
  },
  {
    "text": "can't solve it by just building better systems we have to accurately communicate those",
    "start": "2979880",
    "end": "2985200"
  },
  {
    "text": "guarantees so you have to sit down with people who run your website people who",
    "start": "2985200",
    "end": "2990280"
  },
  {
    "text": "run the website to sit down and think about a little bit of math and together you can figure out the formal language to describe your system",
    "start": "2990280",
    "end": "2996640"
  },
  {
    "text": "I really want to argue for formal terms because stuff like strict consistency acid uh strong consistency these are",
    "start": "2996640",
    "end": "3003880"
  },
  {
    "text": "weasel words right they're they're not well defined they make us feel good but they don't really mean very much in",
    "start": "3003880",
    "end": "3009799"
  },
  {
    "text": "order to tell what a database actually does in order for us to build safe software on top of database we need to know formal terms like linearizability",
    "start": "3009799",
    "end": "3016119"
  },
  {
    "text": "like sequential consistency as Engineers we have to",
    "start": "3016119",
    "end": "3021760"
  },
  {
    "text": "figure out which of those invariance we actually need so it's worth taking a little bit of time to read up on some of the literature and try to identify what",
    "start": "3021760",
    "end": "3028960"
  },
  {
    "text": "sort of promises do our users need What will what will result in the loss of of money what will result in the loss of",
    "start": "3028960",
    "end": "3034839"
  },
  {
    "text": "life what will result in nothing bad happening at all and in fact some of the time it could be okay for us to have",
    "start": "3034839",
    "end": "3041240"
  },
  {
    "text": "really strong guarantees that occasionally break a lot of banks for example aren't",
    "start": "3041240",
    "end": "3047520"
  },
  {
    "text": "100% safe uh a lot of a lot of companies that sell physical Goods don't guarantee",
    "start": "3047520",
    "end": "3052680"
  },
  {
    "text": "correctness either what happens when a failure occurs is you call up some people and you say look I'm very sorry",
    "start": "3052680",
    "end": "3058480"
  },
  {
    "text": "but we seem to have misplaced your order can we make it right it can be cheaper to hire people and to create cultural",
    "start": "3058480",
    "end": "3064799"
  },
  {
    "text": "processes that account for data loss than it is to actually engineer assistance is perfect in the first place so you have to consider that",
    "start": "3064799",
    "end": "3071880"
  },
  {
    "text": "trade-off once you've balanced those trade-offs you have to consider the failure modes that are going to happen in your actual",
    "start": "3071880",
    "end": "3078040"
  },
  {
    "text": "system think about things like crashes right this is this is a sort of first check on every distributed system can we",
    "start": "3078040",
    "end": "3083920"
  },
  {
    "text": "survive a process restarting you can kill it with kill das9 find out can you survive the failure of an entire node",
    "start": "3083920",
    "end": "3090440"
  },
  {
    "text": "this is a little bit harder than surviving just a process crash if you lose power for example you might uh have",
    "start": "3090440",
    "end": "3096960"
  },
  {
    "text": "data that's not fsync be not committed to dis in fact dat that's fsync might also not be committed to dis depending on how your discs work um so you can use",
    "start": "3096960",
    "end": "3103760"
  },
  {
    "text": "AWS terminate uh physical power switches you can unplug stuff inside your boxes and see what happens all sorts of",
    "start": "3103760",
    "end": "3109079"
  },
  {
    "text": "interesting behaviors can come out you should test with clock skew if you're doing all your development on a local",
    "start": "3109079",
    "end": "3114400"
  },
  {
    "text": "node you might not see these anomalies but once you start deploying to nodes that are are distributed and yes I know we all run ntp but somehow every week",
    "start": "3114400",
    "end": "3120839"
  },
  {
    "text": "somebody comes to me with an ntp running server that's like two years in the future uh yeah it's a real thing um so",
    "start": "3120839",
    "end": "3127960"
  },
  {
    "text": "you should test with nodes that are far offset in time set the system clock to be weird things and see what happens in",
    "start": "3127960",
    "end": "3133520"
  },
  {
    "text": "your systems use fake time to fake out specific processes you can actually tell fake time to like Advance time at twice",
    "start": "3133520",
    "end": "3139599"
  },
  {
    "text": "the normal rate or half the normal rate and you'll get really interesting anomalies for garbage collection IOP",
    "start": "3139599",
    "end": "3145599"
  },
  {
    "text": "what happens if your Colonel goes out to lunch and iio takes another like 120 seconds in your process is sitting there",
    "start": "3145599",
    "end": "3151200"
  },
  {
    "text": "hiccuping and then it comes back and it thinks oh yeah I'm still the primary let's do some work right that can result",
    "start": "3151200",
    "end": "3156280"
  },
  {
    "text": "in all sorts of data loss garbage collection elastic search actually causes things that look exactly like a network partition and you can simulate",
    "start": "3156280",
    "end": "3163000"
  },
  {
    "text": "those with Stig stop and S continue and finally partitions like an amazing way",
    "start": "3163000",
    "end": "3168319"
  },
  {
    "text": "to induce failures in all kinds of stuff IP tables DJ drop is a really easy way to simulate this stuff in production if",
    "start": "3168319",
    "end": "3174720"
  },
  {
    "text": "you want to go a little more subtle if you're working with gossip protocols especially uh traffic control the Linux utility uh TC can introduce delays and",
    "start": "3174720",
    "end": "3182520"
  },
  {
    "text": "drops in your in your traffic so it's not enough to talk about",
    "start": "3182520",
    "end": "3188839"
  },
  {
    "text": "a database as safety I'm I'm discussing simple uses of databases like rights to a single document or or uh increments on",
    "start": "3188839",
    "end": "3196079"
  },
  {
    "text": "a single set but we're building real systems that combine data structures",
    "start": "3196079",
    "end": "3201359"
  },
  {
    "text": "that perform multiple Transformations and we need to test those systems end to endend to ensure their correctness and variance hold so no just think about the",
    "start": "3201359",
    "end": "3208119"
  },
  {
    "text": "database specifically think about the low balancer and the application logic all these things can fail in tandem that",
    "start": "3208119",
    "end": "3213520"
  },
  {
    "text": "makes the failure space much larger than it would be for a single database but you can still apply these simple checks",
    "start": "3213520",
    "end": "3218599"
  },
  {
    "text": "Network partitions process crashes pauses ultimately I'm arguing for property based testing Define randomized",
    "start": "3218599",
    "end": "3226280"
  },
  {
    "text": "operations come up with simple invariant simple rules that describe what your system should do when I register a user in the user service it should still be",
    "start": "3226280",
    "end": "3232599"
  },
  {
    "text": "there in two seconds two people shouldn't be able to claim the same username um the number of dollars that goes into my company should be the same",
    "start": "3232599",
    "end": "3238559"
  },
  {
    "text": "as the number of dollars that go out and then verify those properties with a common distributed systems failure",
    "start": "3238559",
    "end": "3245040"
  },
  {
    "text": "modes this work is deeply indebted uh to people at all the different database companies uh in particular for this talk",
    "start": "3245040",
    "end": "3251480"
  },
  {
    "text": "Kevin Porter Lucen vmar Bose leskis Lee himman Matt Kangas uh everybody at",
    "start": "3251480",
    "end": "3256599"
  },
  {
    "text": "stripe who helped with the talk and and made this research possible especially Mark Hedland EV broer osar ksky Kelly",
    "start": "3256599",
    "end": "3262119"
  },
  {
    "text": "Sturman uh everybody who helped review early copies of the talk and text thank you all very much for",
    "start": "3262119",
    "end": "3269359"
  },
  {
    "text": "coming",
    "start": "3272000",
    "end": "3275000"
  }
]