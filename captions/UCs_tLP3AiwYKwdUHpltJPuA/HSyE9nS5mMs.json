[
  {
    "start": "0",
    "end": "291000"
  },
  {
    "text": "cool thank you Eric yes Eric and I have been traveling Poland since uh Sunday we're best buddies we're best buddies we",
    "start": "12200",
    "end": "18480"
  },
  {
    "text": "started in krackow and now we're in Warsaw and that was kind of the extent of our tour but it was it was a lot of",
    "start": "18480",
    "end": "23760"
  },
  {
    "text": "fun uh so this whole event is about events right event driven architectures",
    "start": "23760",
    "end": "29480"
  },
  {
    "text": "and as my good buddy Eric likes to say event driven architecture is essentially something happens and we react right we",
    "start": "29480",
    "end": "37840"
  },
  {
    "text": "we do something about it it's pretty simple it works so we've got all these data changes we use events as kind of",
    "start": "37840",
    "end": "44840"
  },
  {
    "text": "the connective tissue between all of these backend systems and as Eric Eric",
    "start": "44840",
    "end": "50840"
  },
  {
    "text": "already kind of said there's almost always some human interface in the loop right if you were in James's talk just",
    "start": "50840",
    "end": "58000"
  },
  {
    "text": "now he's got like a food delivery app I've got a food delivery app if you think about an e-commerce right you've",
    "start": "58000",
    "end": "63559"
  },
  {
    "text": "got the Loyalty system and you've got uh the uh delivery system and the invoicing",
    "start": "63559",
    "end": "70439"
  },
  {
    "text": "and all of these different systems and we're trading events back and forth but there's probably somebody like",
    "start": "70439",
    "end": "77240"
  },
  {
    "text": "me sitting there as well waiting very very",
    "start": "77240",
    "end": "82400"
  },
  {
    "text": "impatiently for their food to show up or to see where the package is and I",
    "start": "82400",
    "end": "88159"
  },
  {
    "text": "obsessively obsessively tra track these things and as Eric said the obsessive",
    "start": "88159",
    "end": "95799"
  },
  {
    "text": "tracking guy I'm Josh Khan I'm the worldwide Tech leader for serverless at AWS so I work with customers on",
    "start": "95799",
    "end": "103560"
  },
  {
    "text": "serverless architectures all the time and we have this big community of of internal experts called the technical",
    "start": "103560",
    "end": "109520"
  },
  {
    "text": "field community of which I think we've got about 1100 people on serverless at this point around the globe so if you",
    "start": "109520",
    "end": "115200"
  },
  {
    "text": "ever need help we probably have someone here but you end up with some app that",
    "start": "115200",
    "end": "121240"
  },
  {
    "text": "looks roughly like this and forgive my poor user interface design skills but",
    "start": "121240",
    "end": "127280"
  },
  {
    "text": "there's some food delivery type app or or delivery app where we we want to know Hey where's my food at where what state",
    "start": "127280",
    "end": "134360"
  },
  {
    "text": "is it in maybe we're tracking the driver to see them getting closer and closer",
    "start": "134360",
    "end": "139599"
  },
  {
    "text": "and closer but it's not just in the mobile world this is actually from Eric and my",
    "start": "139599",
    "end": "145519"
  },
  {
    "text": "trip here in our our stop off in Frankfurt in case you're interested um but there's these these types of things",
    "start": "145519",
    "end": "151840"
  },
  {
    "text": "out there as well and if if this you know the the boarding information is",
    "start": "151840",
    "end": "157879"
  },
  {
    "text": "wrong you're Pro likely to end up at the wrong gate maybe you're going to miss your flight it's not a good situation",
    "start": "157879",
    "end": "165000"
  },
  {
    "text": "but if you think about the airport it is entirely event- driven it's maybe not quite as simple to",
    "start": "165000",
    "end": "170560"
  },
  {
    "text": "conceptualize but when the plane is ready to board this should change to boarding like some of the that that",
    "start": "170560",
    "end": "176239"
  },
  {
    "text": "flight to uh Edinburg for example train stations have these things",
    "start": "176239",
    "end": "181840"
  },
  {
    "text": "they're all over the place in fact if you got a coffee today from other than",
    "start": "181840",
    "end": "187040"
  },
  {
    "text": "the self-served machine you've seen this in practice too right serverless espresso is very much event- driven and",
    "start": "187040",
    "end": "193760"
  },
  {
    "text": "what's cool is it actually shows off both of the kind of uh patterns that we're going to talk about today on on",
    "start": "193760",
    "end": "199920"
  },
  {
    "text": "the one hand you've got the broadcast side of the booth right where the you've got the big screen it shows everybody's",
    "start": "199920",
    "end": "206400"
  },
  {
    "text": "order what's in process what's ready for pickup this is more of a broadcast use case and",
    "start": "206400",
    "end": "212439"
  },
  {
    "text": "I'll I'll explain that again in a minute but you can also keep track of your own order on your mobile device and see what",
    "start": "212439",
    "end": "219120"
  },
  {
    "text": "state it's in as well and as these things change they get updated as well",
    "start": "219120",
    "end": "224720"
  },
  {
    "text": "so what was weird is I've worked the serverless espresso Booth a time or two in the last few years and often people",
    "start": "224720",
    "end": "231920"
  },
  {
    "text": "would come up to us and ask how how do you do this we we tried to do it and it",
    "start": "231920",
    "end": "237120"
  },
  {
    "text": "it didn't work it's not so simple right connecting the front end and the back end because",
    "start": "237120",
    "end": "243400"
  },
  {
    "text": "they often involve different teams different Technologies a different approach so I started thinking about",
    "start": "243400",
    "end": "250200"
  },
  {
    "text": "okay how how do I explain this are there some some general patterns that we can share there are believe it or not that",
    "start": "250200",
    "end": "257639"
  },
  {
    "text": "solve both of these use cases so the talk by the way is designed for frontend",
    "start": "257639",
    "end": "264639"
  },
  {
    "text": "engineers we're going to focus mostly on cloud principles though so we're going to also do some backend engineering ing",
    "start": "264639",
    "end": "269960"
  },
  {
    "text": "if you will backend engineers in the room there's going to be a very small amount of JavaScript code I promise only",
    "start": "269960",
    "end": "276280"
  },
  {
    "text": "a little bit but it does need to be there if you're a full stack engineer you're in the right place uh if you're",
    "start": "276280",
    "end": "282080"
  },
  {
    "text": "one of those mythical 10x Engineers also probably okay but maybe you can play it",
    "start": "282080",
    "end": "287120"
  },
  {
    "text": "at at Double the speed so we're going to take a look at all of these things all possible on AWS",
    "start": "287120",
    "end": "293680"
  },
  {
    "start": "291000",
    "end": "453000"
  },
  {
    "text": "today but user interfaces themselves are just inherently event- driven when you're scrolling on a page when you",
    "start": "293680",
    "end": "300560"
  },
  {
    "text": "click on a button there are events there if you if you didn't know your browser if that's what you're using a web",
    "start": "300560",
    "end": "306759"
  },
  {
    "text": "application knows how to link into these things so here's just a little bit of",
    "start": "306759",
    "end": "312120"
  },
  {
    "text": "react right so I've got this onclick Handler when somebody clicks on that button something's going to happen",
    "start": "312120",
    "end": "318880"
  },
  {
    "text": "somewhat basic right but we're just going to pop up an alert here every one of these things is an event and we want",
    "start": "318880",
    "end": "325800"
  },
  {
    "text": "something to happen in some cases sounds familiar right",
    "start": "325800",
    "end": "331639"
  },
  {
    "text": "but often times like we might have click a button or the page loads which is also another event and we're going to go load",
    "start": "332400",
    "end": "339840"
  },
  {
    "text": "some data but in a lot of cases like this one this is very very static right",
    "start": "339840",
    "end": "345880"
  },
  {
    "text": "that data is not going to change and it's also very synchronous but stuff's happening all",
    "start": "345880",
    "end": "352800"
  },
  {
    "text": "over the place right we know the world is asynchronous my pizza is getting closer to my house at least hopefully my",
    "start": "352800",
    "end": "359840"
  },
  {
    "text": "package is hopefully going to be delivered although some days I worry about that one as well so I check",
    "start": "359840",
    "end": "366360"
  },
  {
    "text": "obsessively so we often take this pattern of loading a whole lot of data up front synchronously and then doing",
    "start": "366360",
    "end": "372720"
  },
  {
    "text": "asynchronous updates that's a good way to think about that flight departure board as well where we go load the bulk",
    "start": "372720",
    "end": "379319"
  },
  {
    "text": "of the data up front and then just update individual flights as we",
    "start": "379319",
    "end": "384759"
  },
  {
    "text": "go because real-time data really does make the experience better hopefully I don't have to convince you of that",
    "start": "384759",
    "end": "391479"
  },
  {
    "text": "whether it be a food food delivery service or a stock ticker a sports score app anything like that it it really does",
    "start": "391479",
    "end": "398160"
  },
  {
    "text": "make it better but again if you've tried to build this it's not so",
    "start": "398160",
    "end": "404120"
  },
  {
    "text": "simple so very common way that we see people implement this is with",
    "start": "404120",
    "end": "409479"
  },
  {
    "text": "polling you have the client which I'm going to always show as a mobile device but it can be other things as",
    "start": "409479",
    "end": "416120"
  },
  {
    "text": "well you're always pulling and the the client on just a regular basis is calling and saying hey do you have any",
    "start": "416120",
    "end": "422160"
  },
  {
    "text": "data for me if you have kids you know this Behavior this is the kids sitting",
    "start": "422160",
    "end": "427919"
  },
  {
    "text": "in the backseat of the car asking are we there yet are we there yet are we there",
    "start": "427919",
    "end": "433800"
  },
  {
    "text": "yet it's bothersome with the kids it's needlessly chatty here right because",
    "start": "433800",
    "end": "439520"
  },
  {
    "text": "it's constantly taking up network resources often times the server is not returning anything new it's the exact",
    "start": "439520",
    "end": "445960"
  },
  {
    "text": "same response so it's not just not it's not useful it's just",
    "start": "445960",
    "end": "451879"
  },
  {
    "text": "expensive but if we wanted to implement polling on AWS pretty straightforward to",
    "start": "451879",
    "end": "458520"
  },
  {
    "start": "453000",
    "end": "952000"
  },
  {
    "text": "do the right side of this diagram is going to start looking familiar by the way because I'm going to use it over and",
    "start": "458520",
    "end": "464199"
  },
  {
    "text": "over again but we've got some Central event bus probably event bridge in this",
    "start": "464199",
    "end": "469639"
  },
  {
    "text": "case I like Lambda you could do this other ways but I like Lambda so I have a",
    "start": "469639",
    "end": "475120"
  },
  {
    "text": "Lambda function that I call an event handler that gets invoked whenever a particular type of event or events show",
    "start": "475120",
    "end": "481479"
  },
  {
    "text": "up right like the the delivery app changed some State or the order changed",
    "start": "481479",
    "end": "486639"
  },
  {
    "text": "some State my Lambda function writes into a Dynamo DB table uh I'm calling it",
    "start": "486639",
    "end": "492000"
  },
  {
    "text": "The View model table we'll talk about why in a in a few minutes but then this one's a little bit",
    "start": "492000",
    "end": "498400"
  },
  {
    "text": "different than the rest when my client wants an update on a let's just stick to one order like when my client wants an",
    "start": "498400",
    "end": "505720"
  },
  {
    "text": "update on that order it makes a a synchronous rest call to API Gateway API",
    "start": "505720",
    "end": "511919"
  },
  {
    "text": "Gateway invokes a Lambda function that goes and gets the data and returns it back to the client really simple right",
    "start": "511919",
    "end": "518200"
  },
  {
    "text": "you've probably built this if you like Lambda like I do really",
    "start": "518200",
    "end": "523919"
  },
  {
    "text": "simple and most rest apis you you can pull them that's why it's it's popular",
    "start": "523920",
    "end": "530000"
  },
  {
    "text": "people understand the semantics of rest we have lots of restful",
    "start": "530000",
    "end": "535160"
  },
  {
    "text": "apis the thing is there's some challenges here maybe not immedi but there are down the road so polling tends",
    "start": "535160",
    "end": "543760"
  },
  {
    "text": "to not be the best user experience at times it feels really slow to users",
    "start": "543760",
    "end": "549640"
  },
  {
    "text": "Because unless you're polling like over and over and over again we'll come back to that in a second it's going to feel",
    "start": "549640",
    "end": "556320"
  },
  {
    "text": "slow the updates aren't going to come in as quickly but if you are doing that really rapid polling you're putting a",
    "start": "556320",
    "end": "562519"
  },
  {
    "text": "lot more stress on whatever the server is now in this case Lambda is going to just scale up most likely to handle what",
    "start": "562519",
    "end": "568920"
  },
  {
    "text": "you need it's kind of hard to push past it you might need a a support request but we do that for you eventually though",
    "start": "568920",
    "end": "576399"
  },
  {
    "text": "you're going to hit some upper bound but you keep getting this wasteful chatty communication over the network and again",
    "start": "576399",
    "end": "583560"
  },
  {
    "text": "you're asking for data that hasn't changed now actually the hardest part here that you probably don't think about",
    "start": "583560",
    "end": "590040"
  },
  {
    "text": "is how do I calculate the Delta so how do I figure out what changed from a",
    "start": "590040",
    "end": "595200"
  },
  {
    "text": "request 5 seconds ago to the request that just came in",
    "start": "595200",
    "end": "600279"
  },
  {
    "text": "and if you're like me and you write somewhat questionable code you got to test it right so that to",
    "start": "600279",
    "end": "607640"
  },
  {
    "text": "me especially like with complex State that's the hardest thing is figuring out what changed from one request to the",
    "start": "607640",
    "end": "613480"
  },
  {
    "text": "next now there are practices you can use to improve polling uh make it more effective take",
    "start": "613480",
    "end": "620800"
  },
  {
    "text": "away some of those negatives but to me I prefer a more asynchronous approach and",
    "start": "620800",
    "end": "626480"
  },
  {
    "text": "the rest of the talk we're going to focus on async subscription-based ways",
    "start": "626480",
    "end": "631519"
  },
  {
    "text": "of updating you your user interface it's probably why you're here frankly so here we've got our our client",
    "start": "631519",
    "end": "638680"
  },
  {
    "text": "app again and it basically just says Hey server backend just let me know when data changes again back to our kids or",
    "start": "638680",
    "end": "645399"
  },
  {
    "text": "my kids at least this is saying to them hey I'll let you know when we get there",
    "start": "645399",
    "end": "651560"
  },
  {
    "text": "leave me alone and then you have a nice quiet ride hopefully and can listen Maybe to a podcast rarely",
    "start": "651560",
    "end": "657639"
  },
  {
    "text": "happens um so this again is really good for small data updates like the position",
    "start": "657639",
    "end": "663720"
  },
  {
    "text": "of the driver has changed or a flight is now boarding right or delayed hopefully",
    "start": "663720",
    "end": "669800"
  },
  {
    "text": "not cancelled uh you're not going to load the entire flight status board here um",
    "start": "669800",
    "end": "675839"
  },
  {
    "text": "most of the subscription patterns that we're going to actually all the subscription patterns we're going to talk about today use",
    "start": "675839",
    "end": "680880"
  },
  {
    "text": "websockets pretty common again it's pretty well-known technology there's different ways that you can use them you",
    "start": "680880",
    "end": "687120"
  },
  {
    "text": "might have also heard of things like web hooks which is another way that you can update",
    "start": "687120",
    "end": "692399"
  },
  {
    "text": "you know kind of let some subscriber know that data has changed web hooks tend to be less useful in this user",
    "start": "692399",
    "end": "698639"
  },
  {
    "text": "interface world right they just don't they're not quite as effective as when you would use them for like server to",
    "start": "698639",
    "end": "704320"
  },
  {
    "text": "server communication so there's three different kind of interaction patterns that I'm",
    "start": "704320",
    "end": "710200"
  },
  {
    "text": "going to talk about and how you can Implement these the first is real-time events we've already been talking about",
    "start": "710200",
    "end": "715360"
  },
  {
    "text": "what that is some State changes we want to update the user interface the second I called long running processes frankly",
    "start": "715360",
    "end": "722800"
  },
  {
    "text": "this came up because generative AI right like that's what people are talking about believe it or not but one of the",
    "start": "722800",
    "end": "729360"
  },
  {
    "text": "challenges here is that your llm or your model might take minutes to respond and",
    "start": "729360",
    "end": "735600"
  },
  {
    "text": "something like API Gateway has a 30- second timeout and at that point it just responds with an air that's not useful",
    "start": "735600",
    "end": "743240"
  },
  {
    "text": "so we've actually spent a lot of time working with customers to implement asynchronous patterns to deal with that",
    "start": "743240",
    "end": "749839"
  },
  {
    "text": "so that if it if it takes minutes to respond it's okay there's actually",
    "start": "749839",
    "end": "755839"
  },
  {
    "text": "another use case that I'm going to show when we get into that section A little bit later um I did a reinvent talk last",
    "start": "755839",
    "end": "762399"
  },
  {
    "text": "year on how to pick the right API front door and I had a very small diagram in",
    "start": "762399",
    "end": "768040"
  },
  {
    "text": "the upper right hand corner that I'm going to show you and that elicited far more questions about how to implement",
    "start": "768040",
    "end": "774079"
  },
  {
    "text": "that than anything else after the talk it was kind of an afterthought but it was just funny",
    "start": "774079",
    "end": "780040"
  },
  {
    "text": "very very very briefly at the end I'm going to talk about push notifications because they're kind of",
    "start": "780040",
    "end": "785880"
  },
  {
    "text": "like real-time events but the semantics and the technology are actually different and you've got a third party",
    "start": "785880",
    "end": "793360"
  },
  {
    "text": "in the middle you can't send push notifications to a device without getting Apple or Google or Firefox or",
    "start": "793360",
    "end": "799320"
  },
  {
    "text": "somebody involved sound good so just breezing through this is",
    "start": "799320",
    "end": "806000"
  },
  {
    "text": "our very simple conceptual architecture food delivery service we've got all these Services they emit events and I'm",
    "start": "806000",
    "end": "812959"
  },
  {
    "text": "focused on what we're calling the back end for front end which might be a pattern that you've heard before for",
    "start": "812959",
    "end": "819279"
  },
  {
    "text": "this use case I liked it it worked really well uh a back end for front end or",
    "start": "819279",
    "end": "825639"
  },
  {
    "text": "BFF is a very common architectural pattern that tightly couples what your",
    "start": "825639",
    "end": "830759"
  },
  {
    "text": "front end whether it be a web application or a mobile app needs with an optimized",
    "start": "830759",
    "end": "837000"
  },
  {
    "text": "API now in this Eda World We tend to talk about coupling",
    "start": "837000",
    "end": "842360"
  },
  {
    "text": "as being a negative to some degree right we tend to talk about decoupling a lot um the thing is with with this",
    "start": "842360",
    "end": "849560"
  },
  {
    "text": "pattern it actually works really well uh teams actually gain some more autonomy",
    "start": "849560",
    "end": "854720"
  },
  {
    "text": "and they have a better separation of concerns because if I've got a BFF for my IOS app and a BFF for my web app and",
    "start": "854720",
    "end": "862000"
  },
  {
    "text": "a BFF for my Android app those teams can Implement what they need and provide the",
    "start": "862000",
    "end": "867720"
  },
  {
    "text": "orchestration persist and aggregation that that front end layer needs all by",
    "start": "867720",
    "end": "873399"
  },
  {
    "text": "itself so there's a demo that we're going to see in a little bit the source code is out on GitHub and you have to",
    "start": "873399",
    "end": "879639"
  },
  {
    "text": "stay to the end to get the link for that sorry but I've actually implemented the",
    "start": "879639",
    "end": "885160"
  },
  {
    "text": "BFF for all of the patterns that we're going to see it's just a thin slice though so it's basically what I needed",
    "start": "885160",
    "end": "891360"
  },
  {
    "text": "to push the updates out to the front end you could totally take it and expand it out the rest of the way if you wanted",
    "start": "891360",
    "end": "897399"
  },
  {
    "text": "and do all of the persistence so just one more piece of terminology",
    "start": "897399",
    "end": "903000"
  },
  {
    "text": "that I already touched on two types of uh notifications or subscriptions the",
    "start": "903000",
    "end": "908240"
  },
  {
    "text": "first is what we'll call broadcast this is the the big board out there at servus espresso it's telling",
    "start": "908240",
    "end": "915160"
  },
  {
    "text": "everybody the weather in my hometown Chicago uh and then there's point-to-point messaging as well and",
    "start": "915160",
    "end": "921519"
  },
  {
    "text": "that's sending you an update about your individual order right that's serous espresso on your phone if you ordered a",
    "start": "921519",
    "end": "926920"
  },
  {
    "text": "coffee all right so let's get into some of those patterns and by the way on broadcast versus pointto Point real",
    "start": "926920",
    "end": "933720"
  },
  {
    "text": "quick uh the reason I bring those up is because some how you implement that in each of these patterns involves some",
    "start": "933720",
    "end": "940079"
  },
  {
    "text": "tradeoffs so if you need to support both broadcast and point too some of these might work better than",
    "start": "940079",
    "end": "946680"
  },
  {
    "text": "others okay so let's talk about realtime events this is going to be the longest section because frankly all of the",
    "start": "946680",
    "end": "952240"
  },
  {
    "start": "952000",
    "end": "1371000"
  },
  {
    "text": "others buildt on top of it so the first pattern I'm going to call uh real-time events with AWS",
    "start": "952240",
    "end": "958240"
  },
  {
    "text": "appsync if you're not familiar with appsync it's a managed graphql service",
    "start": "958240",
    "end": "963279"
  },
  {
    "text": "graphql is a query language for apis and it was aent to address some of the challenges with",
    "start": "963279",
    "end": "969680"
  },
  {
    "text": "rest um basically what's cool about graphql is the client asks for whatever",
    "start": "969680",
    "end": "974759"
  },
  {
    "text": "data it wants back there's a schema that the two the client and the server share",
    "start": "974759",
    "end": "980160"
  },
  {
    "text": "the client says hey I only want these fields that's all it gets back versus in the rest world where the server really",
    "start": "980160",
    "end": "987440"
  },
  {
    "text": "controls what come comes back to the client on a given request uh graphql very briefly has",
    "start": "987440",
    "end": "994399"
  },
  {
    "text": "three types of operations queries that get data mutations that change data and subscriptions sounds useful right that",
    "start": "994399",
    "end": "1001880"
  },
  {
    "text": "listen for changes to data some people don't like graphql you might not like",
    "start": "1001880",
    "end": "1007440"
  },
  {
    "text": "graphql I think it works really well for these types of datadriven use cases",
    "start": "1007440",
    "end": "1012680"
  },
  {
    "text": "particularly because it has that built-in subscription uh functionality so let's talk about the",
    "start": "1012680",
    "end": "1019319"
  },
  {
    "text": "pattern I'm only going to go through the right side one time because again it's a little bit repetitive or I guess this is",
    "start": "1019319",
    "end": "1025839"
  },
  {
    "text": "a second time but we've got our event bus it publishes some events we have a Lambda function that we call the event",
    "start": "1025839",
    "end": "1032000"
  },
  {
    "text": "handler subscribe to those events the event handler parses out what of those",
    "start": "1032000",
    "end": "1037038"
  },
  {
    "text": "or that order update it wants and writes it to that Dynamo DB view model okay",
    "start": "1037039",
    "end": "1043240"
  },
  {
    "text": "what's different so now we're actually going to publish those changes on a Dynamo DB stream and we have a second function",
    "start": "1043240",
    "end": "1050039"
  },
  {
    "text": "that I called the stream Handler um that stream Handler takes",
    "start": "1050039",
    "end": "1055160"
  },
  {
    "text": "those Events off the Dynamo DB stream and basically figures out do I want to publish something about these and if it",
    "start": "1055160",
    "end": "1061440"
  },
  {
    "text": "does it performs the mutation and I'll come back to that in a second against the appsync graphql",
    "start": "1061440",
    "end": "1068400"
  },
  {
    "text": "API with appsync you use mutations or data changes to invoke a subscription so",
    "start": "1068400",
    "end": "1075720"
  },
  {
    "text": "appsync will automatically say hey I have a client that's subscribed to listen to this data and it will",
    "start": "1075720",
    "end": "1082640"
  },
  {
    "text": "automatically publish that data out it's pretty nice because there's not",
    "start": "1082640",
    "end": "1088120"
  },
  {
    "text": "a lot you need to manage except understanding the schema",
    "start": "1088120",
    "end": "1093400"
  },
  {
    "text": "itself so some of the benefits here you can extend this pattern to pretty much",
    "start": "1094919",
    "end": "1100080"
  },
  {
    "text": "any data source that supports this type of change data capture so I'm using",
    "start": "1100080",
    "end": "1105679"
  },
  {
    "text": "Dynamo here because it's really flexible it does exactly what I need you could also throw Neptune in which is our",
    "start": "1105679",
    "end": "1111360"
  },
  {
    "text": "managed uh graph database not related to graphql by the way uh uh you could put",
    "start": "1111360",
    "end": "1117799"
  },
  {
    "text": "Aurora there basically anything you can do change data capture this would work for so a really flexible pattern you can",
    "start": "1117799",
    "end": "1125360"
  },
  {
    "text": "also take advantage of some of the features that the Lambda Event Source mapping or esm provides here so you can",
    "start": "1125360",
    "end": "1131559"
  },
  {
    "text": "filter the Dynamo DB stream if your stream Handler only cares about certain",
    "start": "1131559",
    "end": "1137280"
  },
  {
    "text": "events or maybe only cares if like a a a f Uh something's getting inserted into the table you can Define that with",
    "start": "1137280",
    "end": "1144440"
  },
  {
    "text": "configuration and your function's never going to be triggered this also does some things",
    "start": "1144440",
    "end": "1149799"
  },
  {
    "text": "like batching right and automatic air handling although I think the air handling sessions going on at the same",
    "start": "1149799",
    "end": "1155400"
  },
  {
    "text": "time right now sorry um so again you have a lot of flexibility that you can",
    "start": "1155400",
    "end": "1161720"
  },
  {
    "text": "build into this there is some additional complexity here though right you've got to use graphql there's a couple of",
    "start": "1161720",
    "end": "1167480"
  },
  {
    "text": "Lambda functions that you need to to mention uh need to take advantage of again graphql is okay by me but you make",
    "start": "1167480",
    "end": "1174840"
  },
  {
    "text": "may make other decisions based on what you're doing in your organization or what knowledge you already",
    "start": "1174840",
    "end": "1181840"
  },
  {
    "text": "have uh this pattern does use a websocket connection so essentially what",
    "start": "1181840",
    "end": "1187679"
  },
  {
    "text": "happens is the client says Hey I want to subscribe to these updates it performs a",
    "start": "1187679",
    "end": "1192720"
  },
  {
    "text": "subscription operation against the appsync API appsync will return a sec websocket",
    "start": "1192720",
    "end": "1200320"
  },
  {
    "text": "URI and then the client will open a connection up to that and they they do a handshake and you can see it all in the",
    "start": "1200320",
    "end": "1206559"
  },
  {
    "text": "web console if you really want to this is a one-way websocket connection though",
    "start": "1206559",
    "end": "1212760"
  },
  {
    "text": "appsync can send data to the client the client cannot send data",
    "start": "1212760",
    "end": "1217919"
  },
  {
    "text": "back now that also might be a trade-off depending on what you're building and if",
    "start": "1217919",
    "end": "1223080"
  },
  {
    "text": "it is we'll look at a pattern in a few minutes that actually works around that",
    "start": "1223080",
    "end": "1228919"
  },
  {
    "text": "um down at the bottom of every one of these slides I've given you kind of the off cheat sheet if you will so appsync",
    "start": "1228919",
    "end": "1235480"
  },
  {
    "text": "is very very flexible it supports both awsam and Cognito you can do a custom",
    "start": "1235480",
    "end": "1241200"
  },
  {
    "text": "authorizer with Lambda you can also do open ID connect but there is no public",
    "start": "1241200",
    "end": "1246400"
  },
  {
    "text": "endpoint for appsync there is no way to just put it out on the internet and in",
    "start": "1246400",
    "end": "1252120"
  },
  {
    "text": "fact for the demo I show you how to implement we'll call it guest mode so",
    "start": "1252120",
    "end": "1257880"
  },
  {
    "text": "that it is is really using I am other under the covers but you don't need to your user doesn't need to be signed in",
    "start": "1257880",
    "end": "1263880"
  },
  {
    "text": "so there are ways to do it you just have to work around it uh I'll also show you in just a",
    "start": "1263880",
    "end": "1269080"
  },
  {
    "text": "minute how you can do both broadcast and point too with this approach very very",
    "start": "1269080",
    "end": "1276158"
  },
  {
    "text": "simply so broadcast versus pointto Point pretty straight forward there's this",
    "start": "1278279",
    "end": "1283640"
  },
  {
    "text": "thing called a graphql schema that's kind of the interface the contract between uh your client and your",
    "start": "1283640",
    "end": "1289960"
  },
  {
    "text": "server the way I implemented it and there's not a ton of contrast there but",
    "start": "1289960",
    "end": "1295279"
  },
  {
    "text": "uh the way I implemented it is I have a subscription called oncreate or update order and you can optionally supply an",
    "start": "1295279",
    "end": "1302960"
  },
  {
    "text": "order ID with graphql you can make a a a parameter required by adding an",
    "start": "1302960",
    "end": "1308760"
  },
  {
    "text": "exclamation point after the type so in this case if I specify the order ID in",
    "start": "1308760",
    "end": "1315600"
  },
  {
    "text": "this subscription I will only get updates for that particular order and in the demo",
    "start": "1315600",
    "end": "1322679"
  },
  {
    "text": "you'll actually see that at the top of the screen there's one little widget that only cares about the order it just placed",
    "start": "1322679",
    "end": "1328880"
  },
  {
    "text": "essentially but if I don't specify an order ID it's going to get every update",
    "start": "1328880",
    "end": "1334600"
  },
  {
    "text": "that comes in and again kind of the second little bit and again it's a little bit hard to read but essentially",
    "start": "1334600",
    "end": "1340279"
  },
  {
    "text": "there's two different mutations here create order and update order and we use this AWS subscribe directive in appsync",
    "start": "1340279",
    "end": "1346679"
  },
  {
    "text": "to specify that this subscription should be triggered when those mutations are",
    "start": "1346679",
    "end": "1352360"
  },
  {
    "text": "invoked so just a little bit of wiring on the client side again this is",
    "start": "1352360",
    "end": "1357880"
  },
  {
    "text": "pretty straightforward to deal with um you know I can either specify an order",
    "start": "1357880",
    "end": "1363640"
  },
  {
    "text": "ID or not specify an order ID and this uses amplify there are other ways to connect graphql",
    "start": "1363640",
    "end": "1370240"
  },
  {
    "text": "apis second pattern looks a little bit like the first but it's actually a little simpler uh in this case we are using a",
    "start": "1370240",
    "end": "1377159"
  },
  {
    "start": "1371000",
    "end": "1753000"
  },
  {
    "text": "direct integration between event bridge and appsync we've eliminated the Lambda functions and maybe that's the most",
    "start": "1377159",
    "end": "1382679"
  },
  {
    "text": "serverless thing of all that we can do right Eric so in this case we have a vent",
    "start": "1382679",
    "end": "1388279"
  },
  {
    "text": "Bridge it just uh calls appsync the appsync API directly this is really really simple",
    "start": "1388279",
    "end": "1395279"
  },
  {
    "text": "there's not a lot of icons on the screen if that scares you that said though uh you are kind of",
    "start": "1395279",
    "end": "1402279"
  },
  {
    "text": "reliant on the input Transformer that eventbridge provides in this case because what we do is event Bridge is",
    "start": "1402279",
    "end": "1408720"
  },
  {
    "text": "actually going to take the payload the event payload the order update and it's",
    "start": "1408720",
    "end": "1414080"
  },
  {
    "text": "going to kind of transform and twist that information into the input that uh",
    "start": "1414080",
    "end": "1421480"
  },
  {
    "text": "appsync expects right so there's a little bit of mapping that goes on here it's it kind",
    "start": "1421480",
    "end": "1428240"
  },
  {
    "text": "of does what it does and if you needed to do more than that you probably don't want to use this pattern that's the",
    "start": "1428240",
    "end": "1434080"
  },
  {
    "text": "trade-off if that makes sense um",
    "start": "1434080",
    "end": "1440440"
  },
  {
    "text": "with both this pattern and the pattern first pattern you can also do this with private apis so if you only wanted your",
    "start": "1440679",
    "end": "1447559"
  },
  {
    "text": "appsync API to be accessible via like a VPC or a VPN connection you can set that",
    "start": "1447559",
    "end": "1453279"
  },
  {
    "text": "up if you want to subscriptions will work you just need to use the this domain name that appsync provides not a",
    "start": "1453279",
    "end": "1460039"
  },
  {
    "text": "custom domain name um again the graphql is just one",
    "start": "1460039",
    "end": "1465399"
  },
  {
    "text": "way and what we're actually doing here is is appsync has these these different",
    "start": "1465399",
    "end": "1470559"
  },
  {
    "text": "data sources so earlier we used a special thing called nun which is more of a pass through here we're using the",
    "start": "1470559",
    "end": "1477559"
  },
  {
    "text": "baked in integration between a uh appsync and Dynamo DB and you write a um",
    "start": "1477559",
    "end": "1484120"
  },
  {
    "text": "data mapping using JavaScript or velocity template language vtl which is",
    "start": "1484120",
    "end": "1489760"
  },
  {
    "text": "scary and people in the audience are shaking their head no yes most people like JavaScript makes it a lot easier",
    "start": "1489760",
    "end": "1496320"
  },
  {
    "text": "but you're actually doing all of this configuration through whatever infrastructure is code or whatever approach you're using and yes there is a",
    "start": "1496320",
    "end": "1503120"
  },
  {
    "text": "lot of boilerplate and a lot of examples out there on how to do it so to set up this integration I I",
    "start": "1503120",
    "end": "1510320"
  },
  {
    "text": "just wanted to spend a minute on it because it's really friendly and nice you can either go into the console and",
    "start": "1510320",
    "end": "1516480"
  },
  {
    "text": "then pick um appsync is an event Bridge Target and then event brid the event",
    "start": "1516480",
    "end": "1523960"
  },
  {
    "text": "bridge console is actually smart enough to go look at your graphql schema and figure out what mutations are available",
    "start": "1523960",
    "end": "1530640"
  },
  {
    "text": "so it'll actually give you a drop down list and you can just pick create order for example and then you can configure your",
    "start": "1530640",
    "end": "1537600"
  },
  {
    "text": "input Transformer we'll look at it in a second um but basically this is how you could wire it all up in the console and",
    "start": "1537600",
    "end": "1545039"
  },
  {
    "text": "what's nice but not shown here is there's actually an export button so you can go export this configuration to",
    "start": "1545039",
    "end": "1552320"
  },
  {
    "text": "cloud formation if that's your IAC of choice you can probably convert it to terraform or cdk or whatever else you",
    "start": "1552320",
    "end": "1558559"
  },
  {
    "text": "use if you wanted but as I was trying to figure out this feature when it was in beta that was really really helpful",
    "start": "1558559",
    "end": "1564840"
  },
  {
    "text": "because the docks weren't done",
    "start": "1564840",
    "end": "1570000"
  },
  {
    "text": "contrast uh so if we were to put this into cloud formation this is what it looks like I'll just try to point out what's important here but there's",
    "start": "1570000",
    "end": "1576440"
  },
  {
    "text": "something called graphql operation and this is where we actually specify the mutation itself okay so this mutation is",
    "start": "1576440",
    "end": "1584960"
  },
  {
    "text": "100% what it would look like if you were invoking that mutation using a graphql",
    "start": "1584960",
    "end": "1590000"
  },
  {
    "text": "library you can get pretty deta uh you can specify the input and then this is where you actually specify the fields",
    "start": "1590000",
    "end": "1596159"
  },
  {
    "text": "that you want to come back for the mutation I'm going to come back to that in a second because it's a really good",
    "start": "1596159",
    "end": "1602360"
  },
  {
    "text": "tripping Hazard further down uh we can specify the input",
    "start": "1602360",
    "end": "1609080"
  },
  {
    "text": "Transformer and this is where in a vent Bridge we specify these are the the fields from the event that we want to",
    "start": "1609080",
    "end": "1615399"
  },
  {
    "text": "take and how we want to transform that into to the payload that gets sent to",
    "start": "1615399",
    "end": "1621120"
  },
  {
    "text": "appsync I prefer to have one input as opposed to trying to map all of those to different different parameters uh it",
    "start": "1621120",
    "end": "1628559"
  },
  {
    "text": "just makes things simpler one quick trick is if you wrap these things in quotes it's a string but you don't need",
    "start": "1628559",
    "end": "1634840"
  },
  {
    "text": "to do that so in this case I actually had an array JavaScript array and by not putting quotes around it that's what I",
    "start": "1634840",
    "end": "1640919"
  },
  {
    "text": "got out that took a minute for me to figure out so maybe it solves you a problem solves a problem for you",
    "start": "1640919",
    "end": "1646520"
  },
  {
    "text": "too all right so one of thing I just want to mention about mutations and appsync because this is a tripping",
    "start": "1646520",
    "end": "1651760"
  },
  {
    "text": "Hazard people run into even when they're not using the event Bridge uh implementation or integration I should",
    "start": "1651760",
    "end": "1657720"
  },
  {
    "text": "say uh is that the selection set matters so selection set is this stuff it's the",
    "start": "1657720",
    "end": "1664519"
  },
  {
    "text": "set of fields that the graphql server is going to Res return to the caller when",
    "start": "1664519",
    "end": "1670080"
  },
  {
    "text": "that mutation gets invoked the way appsync works this is also the list of fields",
    "start": "1670080",
    "end": "1677600"
  },
  {
    "text": "that will be of available to subscribers so even though this is fire",
    "start": "1677600",
    "end": "1684000"
  },
  {
    "text": "and forget right event bridge is going to send that mutation to appsync eventbridge does not care what the",
    "start": "1684000",
    "end": "1690159"
  },
  {
    "text": "response is it cares if it's an error response right but it doesn't really care if it's",
    "start": "1690159",
    "end": "1696919"
  },
  {
    "text": "successful but if I've got a bunch of subscribers a bunch of mobile apps looking to see where their order is and",
    "start": "1696919",
    "end": "1704200"
  },
  {
    "text": "I don't include for example uh uh let's say order ID or the number of items in",
    "start": "1704200",
    "end": "1711159"
  },
  {
    "text": "the selection set I won't be able to see that in the subscription it'll just come back as",
    "start": "1711159",
    "end": "1716240"
  },
  {
    "text": "null hopefully that makes sense it's it's kind of subtle but it will save you a lot of time when you're wondering why",
    "start": "1716240",
    "end": "1723279"
  },
  {
    "text": "numb items is always null hopefully so my preference is to",
    "start": "1723279",
    "end": "1728960"
  },
  {
    "text": "specify every single field even though eventbridge or whatever my caller is",
    "start": "1728960",
    "end": "1734919"
  },
  {
    "text": "doesn't even though they don't care I specify everything so that my subscribers have access to all of that",
    "start": "1734919",
    "end": "1741960"
  },
  {
    "text": "data if they want it and maybe one day if you ever go do this that long",
    "start": "1741960",
    "end": "1747559"
  },
  {
    "text": "explanation will will jingle in your head and it'll save you a few hours of time all right so let's get away from",
    "start": "1747559",
    "end": "1753919"
  },
  {
    "start": "1753000",
    "end": "1984000"
  },
  {
    "text": "graphql so next we're going to look at how to use Amazon API Gateway to implement that same",
    "start": "1753919",
    "end": "1759960"
  },
  {
    "text": "pattern there are more icons on the screen yes so we've got the same same",
    "start": "1759960",
    "end": "1765600"
  },
  {
    "text": "thing we've got event Bridge triggers that event handler the event handler writes data into our Dynamo DB view",
    "start": "1765600",
    "end": "1771120"
  },
  {
    "text": "table it publishes those changes to a stream and then we've got this stream Handler that then goes and calls this",
    "start": "1771120",
    "end": "1777440"
  },
  {
    "text": "websocket endpoint but there's more connection Management in this case",
    "start": "1777440",
    "end": "1783240"
  },
  {
    "text": "is a little bit more do it yourself so whereas the appsync patterns appsync kind of took care of managing",
    "start": "1783240",
    "end": "1789679"
  },
  {
    "text": "subscribers for you with API Gateway you need to manage it",
    "start": "1789679",
    "end": "1795000"
  },
  {
    "text": "yourself so what we'll do is we have our client Cent the client is going to register with the endpoint and say Hey I",
    "start": "1795000",
    "end": "1802320"
  },
  {
    "text": "want to connect the way I've implemented this is I have a connection Handler",
    "start": "1802320",
    "end": "1808279"
  },
  {
    "text": "called onconnect there's also a second connection Handler called on disconnect that I'm not showing here and basically",
    "start": "1808279",
    "end": "1816080"
  },
  {
    "text": "what happens is this connection Handler writes another writes data to a second",
    "start": "1816080",
    "end": "1822000"
  },
  {
    "text": "Dynamo DB table I'm calling it The Client table and it's just got some unique identifiers for this particular",
    "start": "1822000",
    "end": "1830200"
  },
  {
    "text": "client we do have patterns on serverless land and other places that you can use to go implement this very very quickly",
    "start": "1830200",
    "end": "1837840"
  },
  {
    "text": "but there is more code for you to manage okay so back to our stream Handler I get an update on a particular",
    "start": "1837840",
    "end": "1845240"
  },
  {
    "text": "order 1 2 3 4 the stream Handler actually needs to",
    "start": "1845240",
    "end": "1850960"
  },
  {
    "text": "go to that client table and look up which clients which connections care",
    "start": "1850960",
    "end": "1856799"
  },
  {
    "text": "about order 1 23 4 so there's a second query involved here that we didn't have",
    "start": "1856799",
    "end": "1863399"
  },
  {
    "text": "before and then the stream Handler publishes that information to our websocket endpoint uh it needs some uh a",
    "start": "1863399",
    "end": "1871159"
  },
  {
    "text": "permission called manage connections on API Gateway in order to do",
    "start": "1871159",
    "end": "1876840"
  },
  {
    "text": "that and every one of those messages is going to get sent one by one I'll come back to that in just a second too so a",
    "start": "1876840",
    "end": "1884519"
  },
  {
    "text": "little bit a few more moving pieces here but there are some ADV advantages depending on what you're trying to do",
    "start": "1884519",
    "end": "1890320"
  },
  {
    "text": "depending on what you're trying to achieve here so again more moving Parts you need",
    "start": "1890320",
    "end": "1897519"
  },
  {
    "text": "to do some DIY connection management but if you're building something like a chat application where you want to have that",
    "start": "1897519",
    "end": "1903559"
  },
  {
    "text": "two-way connection between the client and server you can do that here right so API Gateway supports two-way",
    "start": "1903559",
    "end": "1910760"
  },
  {
    "text": "communication uh unlike appsync in the previous two examples you can also create a public",
    "start": "1910760",
    "end": "1917519"
  },
  {
    "text": "web socket endpoint right that's just totally public and open that's what I did for the demo just to show how to how",
    "start": "1917519",
    "end": "1924200"
  },
  {
    "text": "to pull that off but you can also wrap IAM and Lambda uh authorizers",
    "start": "1924200",
    "end": "1931440"
  },
  {
    "text": "here there is no true broadcast messaging with API Gateway there is no way for me to just",
    "start": "1931440",
    "end": "1938760"
  },
  {
    "text": "announce to the world the weather in Chicago we actually have to go and",
    "start": "1938760",
    "end": "1944559"
  },
  {
    "text": "inquiry our client table and look up the list of subscri subcribers and then",
    "start": "1944559",
    "end": "1949679"
  },
  {
    "text": "iterate through that one by one in our stream Handler in this case to send that update",
    "start": "1949679",
    "end": "1955760"
  },
  {
    "text": "message so there's some more work here again depending on what you're trying to do but this this pattern this approach",
    "start": "1955760",
    "end": "1963159"
  },
  {
    "text": "works really well for certain types of uh certain types of applications certain types of workloads um maybe you want",
    "start": "1963159",
    "end": "1970120"
  },
  {
    "text": "something a little bit more interactive collaborative writing apps or another common example that that people would",
    "start": "1970120",
    "end": "1975279"
  },
  {
    "text": "use something like this for so sound good Eric I have no idea what time I'm",
    "start": "1975279",
    "end": "1980919"
  },
  {
    "text": "supposed to be done now 10 minutes okay okay fourth pattern",
    "start": "1980919",
    "end": "1987360"
  },
  {
    "start": "1984000",
    "end": "2189000"
  },
  {
    "text": "this one uses iot core it's kind of similar to the first pattern and the third pattern but it uses this iot",
    "start": "1987360",
    "end": "1994080"
  },
  {
    "text": "service that we've had for for a long time and is actually really really friendly for what we're trying to do so",
    "start": "1994080",
    "end": "2000880"
  },
  {
    "text": "I'm not going to boil the ocean on on how the pattern works it's pretty much the same as what we've looked at um but",
    "start": "2000880",
    "end": "2007200"
  },
  {
    "text": "instead of this stream Handler calling appsync or API Gateway in this case it's going to send a message using iot",
    "start": "2007200",
    "end": "2013760"
  },
  {
    "text": "core so iot core uh is a publish subscribe model based on",
    "start": "2013760",
    "end": "2019919"
  },
  {
    "text": "mqtt uh and mqtt is a lightweight uh publish subscribe messaging protocol",
    "start": "2019919",
    "end": "2025279"
  },
  {
    "text": "that's primarily designed for remote devices that have very minimal code and bandwidth available to them things like",
    "start": "2025279",
    "end": "2031919"
  },
  {
    "text": "switches and attenuators our mobile phones our laptops are much much more",
    "start": "2031919",
    "end": "2037279"
  },
  {
    "text": "powerful than that okay they don't have that problem generally but this is really simple and",
    "start": "2037279",
    "end": "2044760"
  },
  {
    "text": "straightforward to go Implement as well it's very flexible because it's",
    "start": "2044760",
    "end": "2051560"
  },
  {
    "text": "topic based and you define the topic with a string again though if your code is",
    "start": "2051560",
    "end": "2058118"
  },
  {
    "text": "questionable like mine you might fat finger something and",
    "start": "2058119",
    "end": "2063320"
  },
  {
    "text": "one of our colleagues has said before that you know configuration by string is always always a little questionable",
    "start": "2063320",
    "end": "2069480"
  },
  {
    "text": "right so you do want to be careful with it the difference between a broadcast message and a point-to-point message",
    "start": "2069480",
    "end": "2075839"
  },
  {
    "text": "though is really just that topic name you can even there's even support for wild cards here so it's very very simple",
    "start": "2075839",
    "end": "2082919"
  },
  {
    "text": "to go Implement on the back end if you are doing true point-to-point messaging though you probably want to",
    "start": "2082919",
    "end": "2089760"
  },
  {
    "text": "have an I am policy that limits who can see particular topics because I probably",
    "start": "2089760",
    "end": "2094960"
  },
  {
    "text": "don't want the whole world to see where my pizza is although who really cares but if you have something more sensitive",
    "start": "2094960",
    "end": "2101200"
  },
  {
    "text": "you do need to implement a policy around that this also does support two-way communication so you can have the client",
    "start": "2101200",
    "end": "2108240"
  },
  {
    "text": "send data back now that said this is a single endpoint per region per account so with",
    "start": "2108240",
    "end": "2115640"
  },
  {
    "text": "iot core you get a single DNS entry that you have to use across that AWS account",
    "start": "2115640",
    "end": "2121960"
  },
  {
    "text": "in the region you can get it in cloud formation in the CLI in the console",
    "start": "2121960",
    "end": "2127839"
  },
  {
    "text": "but you might need to do some like Route 53 DNS magic if you want to kind of hide that name or use it for multiple",
    "start": "2127839",
    "end": "2135760"
  },
  {
    "text": "workloads uh the other thing to keep in mind is that the Au options are not the same you basically have I am or Cognito",
    "start": "2135760",
    "end": "2142599"
  },
  {
    "text": "or you can use an x509 certificate which is really more for devices than they are for for clients like the ones we're",
    "start": "2142599",
    "end": "2148680"
  },
  {
    "text": "talking about uh so iot core uh in order to do the client subscription uh again it's",
    "start": "2148680",
    "end": "2155839"
  },
  {
    "text": "really simple for broadcast vers versus point to point we just changed the topic name this was super super simple to set",
    "start": "2155839",
    "end": "2163800"
  },
  {
    "text": "up on the back end I cannot stress that enough in fact this is how serverless espresso does what you see on those",
    "start": "2163800",
    "end": "2169480"
  },
  {
    "text": "boards and on your mobile devices the front end not so much I",
    "start": "2169480",
    "end": "2175280"
  },
  {
    "text": "actually struggled a lot here because react kept trying to connect multiple times for some reason that I still",
    "start": "2175280",
    "end": "2181000"
  },
  {
    "text": "cannot figure out uh it probably had something to do with the library I was using all right live demo time yeah we",
    "start": "2181000",
    "end": "2188400"
  },
  {
    "text": "don't want to see the video although that's here too just to give you some idea of what you're about",
    "start": "2188400",
    "end": "2193800"
  },
  {
    "start": "2189000",
    "end": "2398000"
  },
  {
    "text": "to see there's a frontend application built in react uh pattern number one is not there",
    "start": "2193800",
    "end": "2200240"
  },
  {
    "text": "it's actually the polling pattern that you're going to see instead um but basically I've got a mock order",
    "start": "2200240",
    "end": "2206640"
  },
  {
    "text": "simulator that we're going to start running in the background it uses step functions and event Bridge scheduler",
    "start": "2206640",
    "end": "2212680"
  },
  {
    "text": "basically to just start sending fake order data at random intervals and running through a process an",
    "start": "2212680",
    "end": "2218960"
  },
  {
    "text": "orchestrated process and you'll start to see if I'm able when I get the demo going here that is the wrong",
    "start": "2218960",
    "end": "2226599"
  },
  {
    "text": "one there we go when I get the demo going here oh no that is the",
    "start": "2226599",
    "end": "2232760"
  },
  {
    "text": "video sorry AV fail Eric why didn't we practice this",
    "start": "2232760",
    "end": "2240520"
  },
  {
    "text": "before you're not taking the ramp that's the wrong one",
    "start": "2240680",
    "end": "2246359"
  },
  {
    "text": "okay where you at Chrome there we",
    "start": "2250920",
    "end": "2256240"
  },
  {
    "text": "go all right so we're going to start the simulation you're going to see this guy up at the top this is the or the the",
    "start": "2257480",
    "end": "2264400"
  },
  {
    "text": "little widget up at the top is only going to listen for updates on this order all of these others which we need",
    "start": "2264400",
    "end": "2270960"
  },
  {
    "text": "a little refresh sorry see this is what I get for doing a live demo",
    "start": "2270960",
    "end": "2278480"
  },
  {
    "text": "all right so we're going to start to see a bunch of stuff not",
    "start": "2281400",
    "end": "2285880"
  },
  {
    "text": "necessarily I should have gone with the video there we go okay so you'll start",
    "start": "2289760",
    "end": "2297000"
  },
  {
    "text": "to see it's going to start populating things so the the polling pattern is only pulling every 15 seconds now I I",
    "start": "2297000",
    "end": "2304359"
  },
  {
    "text": "could reduce that interval and you'd start seeing messages sewing up a little bit earlier a little bit more often um",
    "start": "2304359",
    "end": "2311200"
  },
  {
    "text": "but just trying to show the differences here all of the others are pulling data",
    "start": "2311200",
    "end": "2316520"
  },
  {
    "text": "off of that more subscription driven approach now there are some differences in terms I know it's a little hard to",
    "start": "2316520",
    "end": "2322680"
  },
  {
    "text": "see because I think I actually have it running two times right now um but there are some differences between kind of",
    "start": "2322680",
    "end": "2329119"
  },
  {
    "text": "latency and ordering at times here and the reason behind that is because a couple of these do use uh Dynamo DB",
    "start": "2329119",
    "end": "2336160"
  },
  {
    "text": "streams so there's B Bing going on in the background it's not delivering every single event on the stream immediately",
    "start": "2336160",
    "end": "2343560"
  },
  {
    "text": "it actually batches those up over some time you don't see that with pattern number two as much and once in a while",
    "start": "2343560",
    "end": "2349720"
  },
  {
    "text": "the ordering will be different in terms of how they show up as well so if you'd like to see this actually run properly",
    "start": "2349720",
    "end": "2357160"
  },
  {
    "text": "I'm happy to either share the video or all of the sample code is out there on GitHub you can go deploy um either all",
    "start": "2357160",
    "end": "2364920"
  },
  {
    "text": "of these patterns or just a couple of them to your aw us account and then all you need to know how to do is install",
    "start": "2364920",
    "end": "2370800"
  },
  {
    "text": "npm or node and just spin it up hit that Local Host on your browser and it will",
    "start": "2370800",
    "end": "2377359"
  },
  {
    "text": "actually run uh there are also web push notifications in here uh you might have",
    "start": "2377359",
    "end": "2383880"
  },
  {
    "text": "seen it pop up just briefly but it only shows up for one event because push",
    "start": "2383880",
    "end": "2389319"
  },
  {
    "text": "notifications can get annoying otherwise",
    "start": "2389319",
    "end": "2393920"
  },
  {
    "text": "all right so that was real-time events let's take a look at long running processes and Eric will eventually wave to me when I'm supposed to be finishing",
    "start": "2397560",
    "end": "2403880"
  },
  {
    "start": "2398000",
    "end": "2604000"
  },
  {
    "text": "up uh so this is just a generic I've got a long running process uh in this case",
    "start": "2403880",
    "end": "2411960"
  },
  {
    "text": "I'm invoking Bedrock right but I'm I'm actually using appsync again so this I",
    "start": "2411960",
    "end": "2418000"
  },
  {
    "text": "like this approach it works well but you can do it with any of the four patterns we looked at earlier believe it or not",
    "start": "2418000",
    "end": "2424520"
  },
  {
    "text": "this is using uh I believe pattern number one so what I'm going to do is I'm going to",
    "start": "2424520",
    "end": "2429960"
  },
  {
    "text": "have a mutation called send message this is kind of a met you know a chat bot with with a B uh",
    "start": "2429960",
    "end": "2436839"
  },
  {
    "text": "llm to help you place your pizza order it's then going to go start the execution of a step function State",
    "start": "2436839",
    "end": "2442920"
  },
  {
    "text": "machine maybe we're writing some data into Dynamo but of course invoking Bedrock is kind of the long Running part",
    "start": "2442920",
    "end": "2449760"
  },
  {
    "text": "of this it could take longer than 30 seconds because appsync also has a 30second timeout like API Gateway",
    "start": "2449760",
    "end": "2457680"
  },
  {
    "text": "when Bedrock finishes we are going to use send an event to event bridge I love",
    "start": "2457680",
    "end": "2463079"
  },
  {
    "text": "step functions because I can do all of this without writing any code um and then that event is going to eventually",
    "start": "2463079",
    "end": "2469160"
  },
  {
    "text": "be published to appsync again this is that direct integration so it's actually pattern",
    "start": "2469160",
    "end": "2474480"
  },
  {
    "text": "number two uh we can then trigger the subscription to send across to the",
    "start": "2474480",
    "end": "2479960"
  },
  {
    "text": "client and update them with the response to our uh from our llm again this can",
    "start": "2479960",
    "end": "2485000"
  },
  {
    "text": "run for minutes and even longer than that if you want to uh that connection will stay open for up to 2",
    "start": "2485000",
    "end": "2491760"
  },
  {
    "text": "hours so really powerful pattern it's a this is a great place to introduce",
    "start": "2491760",
    "end": "2497000"
  },
  {
    "text": "asynchronous asynchronicity uh between the back end and the front end because of how long the model might run",
    "start": "2497000",
    "end": "2504280"
  },
  {
    "text": "for this is that diagram I talked about earlier from uh my reinvent talk that was like way up in the corner and",
    "start": "2504280",
    "end": "2510400"
  },
  {
    "text": "everybody came to ask me about it so in this case we're actually doing some data queries and what we're doing is we have",
    "start": "2510400",
    "end": "2516800"
  },
  {
    "text": "Amazon Athena which is querying data in S3 again that's an asynchronous process",
    "start": "2516800",
    "end": "2522520"
  },
  {
    "text": "it can take a while and when Athena is done running the query it will actually write the results into another S3 bucket",
    "start": "2522520",
    "end": "2529920"
  },
  {
    "text": "so what we're doing here is we've got our client it starts the query again we're just using appsync appsync can",
    "start": "2529920",
    "end": "2536800"
  },
  {
    "text": "actually directly invoke other AWS Services as well just like API Gateway no Lambda functions we're going to run",
    "start": "2536800",
    "end": "2543559"
  },
  {
    "text": "the query and then when the results hit that results but bucket we can use the",
    "start": "2543559",
    "end": "2550240"
  },
  {
    "text": "event to go invoke another Lambda function that function then goes and",
    "start": "2550240",
    "end": "2556240"
  },
  {
    "text": "calls the appsync API mutation to send a subscription across to the client and",
    "start": "2556240",
    "end": "2562720"
  },
  {
    "text": "then maybe we deliver like an S3 pre-signed URL to go get the results so again this is another use case where",
    "start": "2562720",
    "end": "2569079"
  },
  {
    "text": "you're using a lot of these same processes a lot of the same Technologies and patterns that we use to power",
    "start": "2569079",
    "end": "2574480"
  },
  {
    "text": "something like serverless espresso or the flight departure board Bo but for a much more business oriented",
    "start": "2574480",
    "end": "2580880"
  },
  {
    "text": "process by the way my preference here is to use I am when I have Lambda uh",
    "start": "2580880",
    "end": "2586280"
  },
  {
    "text": "calling appsync why because I get those shortlived credentials I'm not constantly updating API",
    "start": "2586280",
    "end": "2593119"
  },
  {
    "text": "Keys um but appsync supports multiple off options and you can even do it per",
    "start": "2593119",
    "end": "2598559"
  },
  {
    "text": "type or per operation so you can use this in multiple different ways all right last",
    "start": "2598559",
    "end": "2605240"
  },
  {
    "start": "2604000",
    "end": "2815000"
  },
  {
    "text": "little section here is on push notification again these are kind of similar to that first group of of real realtime events",
    "start": "2605240",
    "end": "2612240"
  },
  {
    "text": "but there's different semantics and Technologies involved here the other thing is you probably don't want to",
    "start": "2612240",
    "end": "2617680"
  },
  {
    "text": "change every uh send a notification every time the state of your pizza delivery order changes right that would",
    "start": "2617680",
    "end": "2624280"
  },
  {
    "text": "become really really annoying and notifications are annoying enough so in",
    "start": "2624280",
    "end": "2629319"
  },
  {
    "text": "the demo I filter it out so that it only sends you a notification when it uh when your pizza's out for",
    "start": "2629319",
    "end": "2635480"
  },
  {
    "text": "delivery so this is web push so if you didn't know it your browser can handle",
    "start": "2635480",
    "end": "2640599"
  },
  {
    "text": "notifications just like your phone you probably get those prompts from websites that say would you like to hear from us",
    "start": "2640599",
    "end": "2646520"
  },
  {
    "text": "every 30 seconds and you probably say no um but that is a prerequisite",
    "start": "2646520",
    "end": "2651640"
  },
  {
    "text": "particularly with Safari they are very very Safari is very very strict about",
    "start": "2651640",
    "end": "2656920"
  },
  {
    "text": "making sure the user gives explicit permission right the the website can't",
    "start": "2656920",
    "end": "2663200"
  },
  {
    "text": "just all of a sudden say hey Eric subscribed for these updates it's okay you can trust me you actually have to",
    "start": "2663200",
    "end": "2669920"
  },
  {
    "text": "pop up a user interface element for them to click so as a prerequisite in this",
    "start": "2669920",
    "end": "2675400"
  },
  {
    "text": "pattern I I've got again I just used API Gateway here and it's a proxy to event",
    "start": "2675400",
    "end": "2680760"
  },
  {
    "text": "bridge but first it's going to pop up a a system notification that says do you",
    "start": "2680760",
    "end": "2686559"
  },
  {
    "text": "want to allow notifications from this site and you have to say yes if you want them and what will happen is the client",
    "start": "2686559",
    "end": "2693880"
  },
  {
    "text": "will then register some some keys we'll just leave it at that that we're going to write into a",
    "start": "2693880",
    "end": "2699720"
  },
  {
    "text": "subscriptions table in Dynam DB what does that mean how what is minutes",
    "start": "2699720",
    "end": "2704920"
  },
  {
    "text": "that's two minutes okay thank you too many it can mean anything yep um",
    "start": "2704920",
    "end": "2712079"
  },
  {
    "text": "so we're going to go register that subscription then when the order change comes in our event handler again needs",
    "start": "2712079",
    "end": "2718200"
  },
  {
    "text": "to go look up hey which subscriptions care about this order and it's going to publish that update through a",
    "start": "2718200",
    "end": "2724119"
  },
  {
    "text": "notification service this is the third party right so it might be Google it might be apple it might be",
    "start": "2724119",
    "end": "2730720"
  },
  {
    "text": "Firefox they are the ones that are actually responsible for delivering the notification to the browser in this case",
    "start": "2730720",
    "end": "2738680"
  },
  {
    "text": "now the demo code does walk you through how you can go create the keys you need to do that um but there is kind of a",
    "start": "2738680",
    "end": "2745240"
  },
  {
    "text": "precursor there as well on the mobile push side again it's a little bit different uh you have to register as a",
    "start": "2745240",
    "end": "2751960"
  },
  {
    "text": "developer with Apple or Google uh I this slide shows pinpoint but I think think",
    "start": "2751960",
    "end": "2757119"
  },
  {
    "text": "we actually might be calling this mo mobile user notifications or something now they changed the name of it slightly",
    "start": "2757119",
    "end": "2763079"
  },
  {
    "text": "um but once you have those keys from Apple or Google you again are going to kind of register the device using that",
    "start": "2763079",
    "end": "2769760"
  },
  {
    "text": "unique device token with pinpoint or whatever it's called now and then you",
    "start": "2769760",
    "end": "2775119"
  },
  {
    "text": "still do need to associate the order with that customer ID so pinpoint gives",
    "start": "2775119",
    "end": "2780520"
  },
  {
    "text": "you a nice way to do this because you can add some metadata to that particular device it makes it easier to go look up",
    "start": "2780520",
    "end": "2787680"
  },
  {
    "text": "which one do I need to go send the notification to but again that notification goes through Apple or",
    "start": "2787680",
    "end": "2793520"
  },
  {
    "text": "Google all right so those are the different patterns we looked at if you want the sample code that's the QR code",
    "start": "2793520",
    "end": "2799520"
  },
  {
    "text": "and the short link to get there so we looked at the three different interactions six different patterns is",
    "start": "2799520",
    "end": "2806240"
  },
  {
    "text": "uh to go deliver them hopefully this was useful and you uh kind of go wire up",
    "start": "2806240",
    "end": "2812040"
  },
  {
    "text": "some real time stuff on your front end now uh but thanks for coming",
    "start": "2812040",
    "end": "2817280"
  },
  {
    "start": "2815000",
    "end": "2833000"
  },
  {
    "text": "enjoy the rest of the day",
    "start": "2817280",
    "end": "2821119"
  }
]