[
  {
    "text": "brilliant thank you good morning thank you everybody for that",
    "start": "9559",
    "end": "15679"
  },
  {
    "text": "great introduction especially to Manuel uh thank you to Michelle for asking everybody to keep questions to the end",
    "start": "15679",
    "end": "22640"
  },
  {
    "text": "please ignore her right if I say something that you don't understand the best possible thing",
    "start": "22640",
    "end": "30240"
  },
  {
    "text": "you can do is ask a question that will help me that will help you and it will",
    "start": "30240",
    "end": "35440"
  },
  {
    "text": "probably help a lot of other people in the audience that have the same question so will you do that",
    "start": "35440",
    "end": "41559"
  },
  {
    "text": "please okay thank you also all for showing up so early in the morning um I know Melbourne has",
    "start": "41559",
    "end": "49160"
  },
  {
    "text": "attractions that might make it harder to get up early in the morning uh as a token of my thanks to all of you I'm",
    "start": "49160",
    "end": "55840"
  },
  {
    "text": "going to give a gift to one of you so oh what have we got",
    "start": "55840",
    "end": "63960"
  },
  {
    "text": "here Dave this is for you this is some kasasa straight from hi de",
    "start": "63960",
    "end": "70799"
  },
  {
    "text": "Janeiro thank you very",
    "start": "70799",
    "end": "74400"
  },
  {
    "text": "much and if you need a lesson in how to make a ceria ask me later but this is",
    "start": "77240",
    "end": "83159"
  },
  {
    "text": "what kosasa is for ceras who's had a cinga okay that's much more important",
    "start": "83159",
    "end": "88640"
  },
  {
    "text": "than using Ty classes",
    "start": "88640",
    "end": "91920"
  },
  {
    "text": "okay so hio de Janeiro is a city whose streets are literally paved with",
    "start": "94000",
    "end": "100880"
  },
  {
    "text": "lambdas and while I was there I'm not going to show you the rest of the",
    "start": "102200",
    "end": "108159"
  },
  {
    "text": "talk I did this oh we can make that bigger I think oh can we",
    "start": "109840",
    "end": "117560"
  },
  {
    "text": "not I'm wrong uh hold on",
    "start": "117560",
    "end": "123438"
  },
  {
    "text": "view Zoom",
    "start": "124560",
    "end": "129239"
  },
  {
    "text": "oh oh is that what the issue was yeah there we go I thought that should",
    "start": "129800",
    "end": "136200"
  },
  {
    "text": "work okay there we go I did this so I wrote a book called programming language",
    "start": "136200",
    "end": "141560"
  },
  {
    "text": "foundations in agda and it's that's showing it at local",
    "start": "141560",
    "end": "147280"
  },
  {
    "text": "host but let's see if the web is up",
    "start": "147280",
    "end": "151720"
  },
  {
    "text": "yeah there it is so the exact same thing is available",
    "start": "153360",
    "end": "159319"
  },
  {
    "text": "online I'm just running it locally on my machine because I'm giving a talk and",
    "start": "159319",
    "end": "165519"
  },
  {
    "text": "who knows if the web will work um so the whole book is here and what",
    "start": "165519",
    "end": "170840"
  },
  {
    "text": "I'm going to do today um so this morning I'm going to",
    "start": "170840",
    "end": "176000"
  },
  {
    "text": "try to take you very quickly through the key ideas in Naturals and induction so",
    "start": "176000",
    "end": "181879"
  },
  {
    "text": "those of you that saw bosa's talk yesterday I'm going to be covering the same ground but I hope with more",
    "start": "181879",
    "end": "188080"
  },
  {
    "text": "concrete examples that will be easy to follow um one of the things that linked",
    "start": "188080",
    "end": "194080"
  },
  {
    "text": "on the page is getting started I'm going to show you that so there's a section right at the beginning called getting",
    "start": "194080",
    "end": "200480"
  },
  {
    "text": "started with plfa and this is exactly what you need to do um if you've done it already",
    "start": "200480",
    "end": "207440"
  },
  {
    "text": "please follow along with the talk um but as mentioned there's going to be a workshop this afternoon I will go",
    "start": "207440",
    "end": "214000"
  },
  {
    "text": "through again uh induction and Naturals and I'll do the next chapter relation so",
    "start": "214000",
    "end": "219040"
  },
  {
    "text": "we're going to do the first three chapters of the book um today uh try to get very quickly",
    "start": "219040",
    "end": "226599"
  },
  {
    "text": "through ideas in the first two now um so this is what you need to do and in",
    "start": "226599",
    "end": "234159"
  },
  {
    "text": "particular pay attention to the bits at the bottom that tell you what you need to do to install the the libraries",
    "start": "234159",
    "end": "240400"
  },
  {
    "text": "there's just a couple of files you need to set up it's pretty straightforward but you do need to follow those",
    "start": "240400",
    "end": "245480"
  },
  {
    "text": "instructions so and uh oh one thing I want to do is ask for people who've used",
    "start": "245480",
    "end": "251400"
  },
  {
    "text": "agda before to serve as Tas this afternoon teaching assistants so who's",
    "start": "251400",
    "end": "257160"
  },
  {
    "text": "used agda before and was willing to serve as a TA fantastic there",
    "start": "257160",
    "end": "263400"
  },
  {
    "text": "was one other guy I spoke to yesterday but he's being shy oh there you are okay",
    "start": "263400",
    "end": "269120"
  },
  {
    "text": "um so so we might have a couple of Tas this afternoon to help you out I'll be very grateful to anybody who volunteers",
    "start": "269120",
    "end": "274960"
  },
  {
    "text": "for that helping other people get up to speed because there'll be lots of I hope there will be lots of people in the room",
    "start": "274960",
    "end": "280880"
  },
  {
    "text": "and um that way we can help you if you have any",
    "start": "280880",
    "end": "284960"
  },
  {
    "text": "difficulties okay let's go",
    "start": "286800",
    "end": "291159"
  },
  {
    "text": "back okay I'm going to get excited now cuz I",
    "start": "292160",
    "end": "297320"
  },
  {
    "text": "do the night sky hold more stars than I can",
    "start": "297400",
    "end": "302680"
  },
  {
    "text": "count though fewer than 5,000 are visible to the naked eye the observable",
    "start": "302680",
    "end": "308440"
  },
  {
    "text": "universe contains about 70 sextilion stars but the number of stars is",
    "start": "308440",
    "end": "317960"
  },
  {
    "text": "finite count all the stars and you will still have as many natural numbers left",
    "start": "317960",
    "end": "323880"
  },
  {
    "text": "over as you started with right there are lots of natural numbers lots and lots",
    "start": "323880",
    "end": "330479"
  },
  {
    "text": "and lots and lots and that means if you want to define something like addition even",
    "start": "330479",
    "end": "336039"
  },
  {
    "text": "though you and I probably learned addition from Little finite times taable sorry addition tables when we were in",
    "start": "336039",
    "end": "342919"
  },
  {
    "text": "school and then multiplication from times tables right they're finite and then you have these rules that let you",
    "start": "342919",
    "end": "348199"
  },
  {
    "text": "work on larger and larger numbers and it all seems really rather complicated and if you tried to write",
    "start": "348199",
    "end": "355000"
  },
  {
    "text": "out an actual table of all the addition results it would take you a long time time because there are an infinite",
    "start": "355000",
    "end": "363199"
  },
  {
    "text": "number of natural numbers so this is sort of a problem",
    "start": "363199",
    "end": "368560"
  },
  {
    "text": "right so what I'm going to show you today which I think is really",
    "start": "368560",
    "end": "374120"
  },
  {
    "text": "exciting maybe not that exciting what I'm going to show you",
    "start": "374120",
    "end": "379919"
  },
  {
    "text": "today which I think is really exciting is that you can Define all the natural numbers all Infinity of them in three",
    "start": "379919",
    "end": "388520"
  },
  {
    "text": "lines and then you can take something like addition and take all infinite number of",
    "start": "388520",
    "end": "395120"
  },
  {
    "text": "instances of addition and Define it in three lines so that's my goal for today show",
    "start": "395120",
    "end": "403280"
  },
  {
    "text": "you how to define natural numbers how to define addition and then how to prove",
    "start": "403280",
    "end": "409840"
  },
  {
    "text": "properties of all the infinite natural numbers such as that addition is",
    "start": "409840",
    "end": "415479"
  },
  {
    "text": "associative I'll pick that one simplest one but the same proofs work and are in the book for things like um",
    "start": "415479",
    "end": "422759"
  },
  {
    "text": "commutativity so clearly right um when you first learn functional programming",
    "start": "422759",
    "end": "428400"
  },
  {
    "text": "uh nobody could teach it to you in an hour um nobody could learn has school in",
    "start": "428400",
    "end": "435000"
  },
  {
    "text": "an hour but you could get a good introduction like Manuel gave a great introduction to hasool in four hours or",
    "start": "435000",
    "end": "441280"
  },
  {
    "text": "was it eight hours on Monday four right you can get a you can",
    "start": "441280",
    "end": "447000"
  },
  {
    "text": "get started but then you need to go back and do more more work on your own so my goal today is not to teach you",
    "start": "447000",
    "end": "453560"
  },
  {
    "text": "everything about dependent types but just to get you started and just to show you enough that you might know whether",
    "start": "453560",
    "end": "459919"
  },
  {
    "text": "this is something that's for you um so many people here I think are fans of hll",
    "start": "459919",
    "end": "466840"
  },
  {
    "text": "um and I'm a real fan now of agda having written this textbook I didn't know any agda when I started uh my graduate",
    "start": "466840",
    "end": "473280"
  },
  {
    "text": "student W CA who's a co-author of the book she helped me get started um",
    "start": "473280",
    "end": "480080"
  },
  {
    "text": "but I'm a real fan now I think that agda is what H wants to be when it grows",
    "start": "480080",
    "end": "486199"
  },
  {
    "text": "up uh and there they various bits in ag they're just so much more fun for me",
    "start": "486199",
    "end": "491360"
  },
  {
    "text": "than using has I'll show you some of that as we go along I hope so here's all the natural well I'm not going to write",
    "start": "491360",
    "end": "497560"
  },
  {
    "text": "down all the natural numbers because they're too many but here are the first few of them and we're going to skip over",
    "start": "497560",
    "end": "503680"
  },
  {
    "text": "that here is the definition in agda Okay so we've got",
    "start": "503680",
    "end": "510919"
  },
  {
    "text": "uh oh so we're going to use Unicode by the way so you have data funny n this is",
    "start": "510919",
    "end": "518159"
  },
  {
    "text": "the way mathematicians always write natural numbers which is a set where so",
    "start": "518159",
    "end": "523719"
  },
  {
    "text": "this is defining so set set in add is the name for",
    "start": "523719",
    "end": "529240"
  },
  {
    "text": "types uh so this is just telling you N is a type uh I know SE is a very weird way of",
    "start": "529240",
    "end": "536399"
  },
  {
    "text": "spelling type but there you go uh and then it has two Constructors so",
    "start": "536399",
    "end": "542360"
  },
  {
    "text": "the notion of a Constructor is very important and is separate from the notion of a function and these are",
    "start": "542360",
    "end": "547640"
  },
  {
    "text": "pretty much the only two things we're going to need to worry about is Constructors and values and the values",
    "start": "547640",
    "end": "553480"
  },
  {
    "text": "are going to include functions um so we've got two Constructors zero is",
    "start": "553480",
    "end": "560760"
  },
  {
    "text": "a natural number and successor takes a natural number to a natural number that's it",
    "start": "560760",
    "end": "571360"
  },
  {
    "text": "what does this mean okay well okay we now know one natural number zero and we",
    "start": "573040",
    "end": "580240"
  },
  {
    "text": "also know one way of getting more natural numbers once you have a natural number so suck if you've got a natural",
    "start": "580240",
    "end": "587320"
  },
  {
    "text": "number it will give you another one so zero is a natural number okay I now know one natural",
    "start": "587320",
    "end": "594600"
  },
  {
    "text": "number so I can take suck of it so suck of zero uh suck stands for successor so the",
    "start": "594600",
    "end": "600720"
  },
  {
    "text": "successor of zero is another number and then the successor of that one is another one and the successor of that",
    "start": "600720",
    "end": "606720"
  },
  {
    "text": "one is another one so successor of successor of successor of zero is a natural number right altogether how",
    "start": "606720",
    "end": "613880"
  },
  {
    "text": "would you pronounce that natural number in English three right so that's just three okay so that's it this idea alone",
    "start": "613880",
    "end": "623440"
  },
  {
    "text": "is enough to get us all the natural numbers right it's sort of painful so like writing out seven would be painful",
    "start": "623440",
    "end": "630360"
  },
  {
    "text": "so here's a little exercise let's try doing the",
    "start": "630360",
    "end": "634880"
  },
  {
    "text": "exercise uh let's see so we need one more",
    "start": "636079",
    "end": "643200"
  },
  {
    "text": "bit actually I'm going I I don't want to actually edit the textbook so I made up",
    "start": "643200",
    "end": "648720"
  },
  {
    "text": "another file I could",
    "start": "648720",
    "end": "653720"
  },
  {
    "text": "uh I made up another file here so",
    "start": "654480",
    "end": "661120"
  },
  {
    "text": "Let's do an example oh and so we're going to do one thing we're going to tell",
    "start": "662120",
    "end": "668639"
  },
  {
    "text": "agda that N is a definition of natural numbers and that's because agda has built into it right it looks at the data",
    "start": "668639",
    "end": "675639"
  },
  {
    "text": "type and says okay this is the data type in this case n but we could give it any name we could call it Fred and says okay",
    "start": "675639",
    "end": "682760"
  },
  {
    "text": "so Fred must be the set that's defined and then there must be one thingy whose",
    "start": "682760",
    "end": "688279"
  },
  {
    "text": "type is Fred and another thingy whose type is Fred to Fred and the thingy whose type is Fred that must be zero and",
    "start": "688279",
    "end": "695560"
  },
  {
    "text": "the thingy whose type is Fred to Fred that must be successor and then if you write down",
    "start": "695560",
    "end": "702519"
  },
  {
    "text": "seven the digit it knows that seven means let's try this",
    "start": "702519",
    "end": "707760"
  },
  {
    "text": "out so the whole textbook is written in a literal",
    "start": "707760",
    "end": "713279"
  },
  {
    "text": "literate Style",
    "start": "713279",
    "end": "717279"
  },
  {
    "text": "and that means that all the code you write must come between begin code and end code brackets everything else is",
    "start": "721519",
    "end": "726639"
  },
  {
    "text": "just a comment and so here we're just doing an example so examples always have the name",
    "start": "726639",
    "end": "732320"
  },
  {
    "text": "underbar and then the type of this example is going to be a proof that seven is the same as successor of",
    "start": "732320",
    "end": "740839"
  },
  {
    "text": "successor tell me when to stop",
    "start": "740839",
    "end": "745120"
  },
  {
    "text": "is that right one two three four five six oh",
    "start": "751360",
    "end": "756399"
  },
  {
    "text": "eight I counted wrong thank you you guys were counting properly get all the parentheses to",
    "start": "756399",
    "end": "763399"
  },
  {
    "text": "balance and um as you learned yesterday the name of a proof of",
    "start": "763399",
    "end": "769959"
  },
  {
    "text": "equality is raffle and let me tell you how this works in agda agda just takes the left",
    "start": "769959",
    "end": "777199"
  },
  {
    "text": "hand side and simplifies it as much as possible so it knows seven here is actually a definition for successor",
    "start": "777199",
    "end": "783120"
  },
  {
    "text": "applied seven times and this is just a bunch of Constructors appli to other Constructors so it doesn't simplify this",
    "start": "783120",
    "end": "790040"
  },
  {
    "text": "is already in simplest form so it simplifies this and simplifies this and that checks are those exactly the same",
    "start": "790040",
    "end": "796880"
  },
  {
    "text": "thing and if they are then there's a proof of that called raffle and if",
    "start": "796880",
    "end": "802519"
  },
  {
    "text": "there's not there's no way to prove that the set of proofs of that thing is empty which means if it has no proof it's it's",
    "start": "802519",
    "end": "809680"
  },
  {
    "text": "false or at least we can't prove it's true so this is something we can prove",
    "start": "809680",
    "end": "814760"
  },
  {
    "text": "its proof name is rle and now if I type control C control L it executes here's",
    "start": "814760",
    "end": "821120"
  },
  {
    "text": "the most important thing on this screen see this little screen at the bottom see that there's nothing written in",
    "start": "821120",
    "end": "827519"
  },
  {
    "text": "it that's very important what you are seeing there is no type-checking error",
    "start": "827519",
    "end": "833399"
  },
  {
    "text": "messages so that means the whole file type checked so that means everything you've said is",
    "start": "833399",
    "end": "841880"
  },
  {
    "text": "true right now this is really true right this is checked according to a formal",
    "start": "841920",
    "end": "847560"
  },
  {
    "text": "system it's been formally proved correct so as long as you got all your",
    "start": "847560",
    "end": "853160"
  },
  {
    "text": "definitions right and you've got your theorem stated properly and the proofs are all filled in and there no type",
    "start": "853160",
    "end": "859079"
  },
  {
    "text": "errors in the proof you're pretty certain of that right you're much more certain of",
    "start": "859079",
    "end": "865519"
  },
  {
    "text": "that than say a statement made by Donald Trump you're probably even more certain of",
    "start": "865519",
    "end": "872399"
  },
  {
    "text": "that than a statement made by your best friend because your best friend probably won't lie to you but your best friend is",
    "start": "872399",
    "end": "879959"
  },
  {
    "text": "probably a human being and therefore might make mistakes right um agda is we hope much",
    "start": "879959",
    "end": "888680"
  },
  {
    "text": "less likely to make a mistake of course it's a complicated piece of software so there's that issue what you'd really",
    "start": "888680",
    "end": "894279"
  },
  {
    "text": "like to do is have a version of agda proved correct in agda and that's an",
    "start": "894279",
    "end": "899600"
  },
  {
    "text": "ongoing project they're trying to get there uh but they do have proofs of of uh proofs by hands of a lot of the bits",
    "start": "899600",
    "end": "907000"
  },
  {
    "text": "of AGA um so that's the idea is to try to",
    "start": "907000",
    "end": "912240"
  },
  {
    "text": "actually have in your hand appr proof that things are correct so right the great thing is this gives you much more",
    "start": "912240",
    "end": "920000"
  },
  {
    "text": "Assurance this gives you much more assurance that uh what you're doing is",
    "start": "920000",
    "end": "925320"
  },
  {
    "text": "right and sometimes you need really high Assurance software I will give Give an example later on in the talk and those",
    "start": "925320",
    "end": "933000"
  },
  {
    "text": "are the times when you want to do this sort of thing right so you don't always",
    "start": "933000",
    "end": "940279"
  },
  {
    "text": "want to prove all your software correct but when you do then a proof assistant",
    "start": "940279",
    "end": "945480"
  },
  {
    "text": "like agda there are others out there as well is what you want there's a question can I show you a proof I can",
    "start": "945480",
    "end": "952720"
  },
  {
    "text": "show you a proof a oh so something broken",
    "start": "952720",
    "end": "960600"
  },
  {
    "text": "sure let's go back to what I mistakenly",
    "start": "960600",
    "end": "965480"
  },
  {
    "text": "wrote and now gives you an error message says seven is not equal to eight of Type",
    "start": "967279",
    "end": "973120"
  },
  {
    "text": "n good question thank you okay and then here's the same thing",
    "start": "973120",
    "end": "979000"
  },
  {
    "text": "done for two we'll we'll skip over that uh oh wait it always going to give me an error message for this one so let's",
    "start": "979000",
    "end": "985920"
  },
  {
    "text": "just uh correct this one again so it doesn't get our",
    "start": "985920",
    "end": "991199"
  },
  {
    "text": "way thanks",
    "start": "992319",
    "end": "997880"
  },
  {
    "text": "okay um so the next thing to do is Define plus and remember right in school",
    "start": "997880",
    "end": "1005199"
  },
  {
    "text": "you had a table right 0 plus 0 is 0 0 + 1 is 1 and so on then the next line was",
    "start": "1005199",
    "end": "1010880"
  },
  {
    "text": "uh 1 plus 0 is 0 1+ 1 is 2 2+ 1 1 plus 2 is three and so on right you all",
    "start": "1010880",
    "end": "1016639"
  },
  {
    "text": "memorize that table when you're in grade school right okay well you didn't need to well you",
    "start": "1016639",
    "end": "1021880"
  },
  {
    "text": "did need to to be able to do addition in um right this is linear representation right so the number 1",
    "start": "1021880",
    "end": "1028678"
  },
  {
    "text": "million takes a million sucks so that's really rather inefficient okay but it's great for doing proofs there's an",
    "start": "1028679",
    "end": "1034319"
  },
  {
    "text": "exercise in the textbook about doing binary representations in agda and",
    "start": "1034319",
    "end": "1039640"
  },
  {
    "text": "showing that they're equivalent to the unary representation that we're using here um so this is very inefficient but",
    "start": "1039640",
    "end": "1046360"
  },
  {
    "text": "it's great for doing definitions and proofs so in particular we can now Define addition in just three lines so",
    "start": "1046360",
    "end": "1054280"
  },
  {
    "text": "first we say plus is the addition function it takes a natural number and a natural number and gives you a natural",
    "start": "1054280",
    "end": "1060880"
  },
  {
    "text": "number so this is just saying here's the first argument here's the second argument here's the result if you're",
    "start": "1060880",
    "end": "1067919"
  },
  {
    "text": "familiar with hcll you'll know why we wrote it in this particular way um otherwise it's explained in the textbook",
    "start": "1067919",
    "end": "1074520"
  },
  {
    "text": "I'm not going to take time to do that now but just presume function of two arguments this is how we write it down",
    "start": "1074520",
    "end": "1081760"
  },
  {
    "text": "and then there are little underbars here and those are the places where the argument goes so we can use infixed",
    "start": "1081760",
    "end": "1087200"
  },
  {
    "text": "notation for defining things so hll also has infix notation instead of writing",
    "start": "1087200",
    "end": "1092799"
  },
  {
    "text": "underbar plus underbar you'd write Plus in parentheses and that's something called a section and that gives you a",
    "start": "1092799",
    "end": "1098760"
  },
  {
    "text": "nice name for the plus operation that's distinguished from its uses here where",
    "start": "1098760",
    "end": "1104159"
  },
  {
    "text": "it's in the middle of something um one of the great things about agda is it has mix fix notation so hll gives you",
    "start": "1104159",
    "end": "1112440"
  },
  {
    "text": "binary um AGA gives you any combination you'd want if underbar then underbar",
    "start": "1112440",
    "end": "1118520"
  },
  {
    "text": "else underbar is perfectly fine in agus you can find if then else and the",
    "start": "1118520",
    "end": "1123600"
  },
  {
    "text": "arguments go in the right place uh you can Define prefix functions postfix",
    "start": "1123600",
    "end": "1129440"
  },
  {
    "text": "functions anything you want so it's very flexible and I really really like that that's a great decision it's too bad",
    "start": "1129440",
    "end": "1135360"
  },
  {
    "text": "that hcll has too many users to retret that decis ision into it uh but it was a",
    "start": "1135360",
    "end": "1141679"
  },
  {
    "text": "really nice decision that they made in doing the language design that's by the way because they hav't aror R who's an",
    "start": "1141679",
    "end": "1147360"
  },
  {
    "text": "expert on building parsers so they knew how to parse such things question how do use as a",
    "start": "1147360",
    "end": "1155640"
  },
  {
    "text": "function um great question how do you use plus as a prefix function in AGA",
    "start": "1155640",
    "end": "1160840"
  },
  {
    "text": "that's an example of a section in agda and rather than Del delete delay the talk now leave that talk question to the",
    "start": "1160840",
    "end": "1168000"
  },
  {
    "text": "end or for a break uh okay so here's the definition",
    "start": "1168000",
    "end": "1174120"
  },
  {
    "text": "of plus uh does that work yeah so we've got",
    "start": "1174120",
    "end": "1180880"
  },
  {
    "text": "just got two lines oh actually let's just comment this out let's see let's",
    "start": "1180880",
    "end": "1186280"
  },
  {
    "text": "just try to Define Plus for ourselves wait I'll yeah just move that off the bottom",
    "start": "1186280",
    "end": "1193960"
  },
  {
    "text": "of the screen so you can't cheat okay so plus takes two arguments",
    "start": "1193960",
    "end": "1199320"
  },
  {
    "text": "m and n and it's going to give something so here's the other great thing in AGA",
    "start": "1199320",
    "end": "1205799"
  },
  {
    "text": "the whole so this question mark here says I don't know what to put there yet help me",
    "start": "1205799",
    "end": "1211799"
  },
  {
    "text": "out okay and if you type contrl c contr l it helps you out uh and it gives you lots of stuff at",
    "start": "1211799",
    "end": "1218880"
  },
  {
    "text": "the bottom which we can ignore it's just saying uh here's some stuff I don't know how to fill in",
    "start": "1218880",
    "end": "1224440"
  },
  {
    "text": "yet um if you find that scary don't worry oh right it's getting",
    "start": "1224440",
    "end": "1230440"
  },
  {
    "text": "by the way what we're it's doing here is it's saying I've removed the definition of plus and plus appears a lot later in",
    "start": "1230440",
    "end": "1236919"
  },
  {
    "text": "the file so this is everywhere else that plus appear it says I don't know how to type check this because I don't know",
    "start": "1236919",
    "end": "1242679"
  },
  {
    "text": "what this is that's basically what it's saying um but yeah sometimes you get",
    "start": "1242679",
    "end": "1248799"
  },
  {
    "text": "lots and lots of error messages which sort of look scary but that's okay just ignore it actually what I should do to",
    "start": "1248799",
    "end": "1255080"
  },
  {
    "text": "avoid them I can do this in AGA there's something that",
    "start": "1255080",
    "end": "1261120"
  },
  {
    "text": "says comment uncomment oops no I didn't want to do that one whatever that one was what have I just done version okay",
    "start": "1261440",
    "end": "1268520"
  },
  {
    "text": "we can ignore that comment uncom so let's see if I do it now yeah now it only says missing",
    "start": "1268520",
    "end": "1275400"
  },
  {
    "text": "definition for plus which is true okay uh and",
    "start": "1275400",
    "end": "1281720"
  },
  {
    "text": "now it's happy it it only says one thing which is there's this hole here whole",
    "start": "1281720",
    "end": "1287080"
  },
  {
    "text": "number zero which should have a natural number in it but I don't know which one and now if we go into the hole and",
    "start": "1287080",
    "end": "1294840"
  },
  {
    "text": "you type what is it contrl C comma it says",
    "start": "1294840",
    "end": "1300720"
  },
  {
    "text": "oh and to fill this hole in you can use two things you can use n and which is a",
    "start": "1300720",
    "end": "1306039"
  },
  {
    "text": "natural and M which is a natural all",
    "start": "1306039",
    "end": "1311159"
  },
  {
    "text": "right so I'm going to need to do case analysis right let's say I do case analysis you could do it on the second",
    "start": "1311159",
    "end": "1317720"
  },
  {
    "text": "argument that's a symmetric definition you could then prove the two definitions equivalent uh in fact if right what we'",
    "start": "1317720",
    "end": "1324440"
  },
  {
    "text": "want to do and we'll do later in the textbook is prove that plus is",
    "start": "1324440",
    "end": "1331399"
  },
  {
    "text": "commutative uh but what we uh we'll need to do a case analysis let's do it on the first argument so contrl c contrl c and",
    "start": "1331679",
    "end": "1340559"
  },
  {
    "text": "that says give me a variable to do a case analysis on so I'm going to Type M and return ha",
    "start": "1340559",
    "end": "1349000"
  },
  {
    "text": "it wrote a large chunk of the program for us yes everybody should applaud right",
    "start": "1349000",
    "end": "1354679"
  },
  {
    "text": "this is exciting um",
    "start": "1354679",
    "end": "1361320"
  },
  {
    "text": "so right that's so much fun I'm just going to do that",
    "start": "1361320",
    "end": "1366000"
  },
  {
    "text": "again that appla yeah everybody applaud this time",
    "start": "1366600",
    "end": "1371840"
  },
  {
    "text": "control C control c m boom",
    "start": "1371840",
    "end": "1378200"
  },
  {
    "text": "[Applause]",
    "start": "1378200",
    "end": "1383919"
  },
  {
    "text": "okay so it said well there are two possibilities right either m is zero or it's the successor of something else and",
    "start": "1383919",
    "end": "1390720"
  },
  {
    "text": "let's give that something else now the name m so this m is different than the M we had before we could call it m Prime",
    "start": "1390720",
    "end": "1398360"
  },
  {
    "text": "if we want to but I'm just going to call it m okay is that clear enough to people okay",
    "start": "1398360",
    "end": "1406919"
  },
  {
    "text": "so what is 0 plus n n right if you add zero to something it",
    "start": "1406919",
    "end": "1413520"
  },
  {
    "text": "doesn't change it so I'll type in an N there and then I will go contrl C",
    "start": "1413520",
    "end": "1421400"
  },
  {
    "text": "control space it says yep that type checks in fact let's do that again I can",
    "start": "1421400",
    "end": "1428000"
  },
  {
    "text": "show you something else you can do in ogda I can typ control C control a and",
    "start": "1428000",
    "end": "1433679"
  },
  {
    "text": "that means can you come up with a term of type uh big",
    "start": "1433679",
    "end": "1439679"
  },
  {
    "text": "and it will say yeah n works so it actually wrote that bit of code for",
    "start": "1439679",
    "end": "1446520"
  },
  {
    "text": "me we'll try that one again because that one's exciting too right okay contrl Z you're all going to",
    "start": "1446520",
    "end": "1454640"
  },
  {
    "text": "applaud right control a there we",
    "start": "1454640",
    "end": "1459360"
  },
  {
    "text": "go oh that worked so well let's try it again oh that's not what we want this",
    "start": "1459960",
    "end": "1466039"
  },
  {
    "text": "time is it we want something that uses m as well so what what shall we do here well this",
    "start": "1466039",
    "end": "1474440"
  },
  {
    "text": "is successor of something so our result can't be zero it",
    "start": "1474440",
    "end": "1480880"
  },
  {
    "text": "must be the successor of something so let's see if we put in contrl C controlr",
    "start": "1480880",
    "end": "1486919"
  },
  {
    "text": "that says use a Constructor it says no I don't know which one to use should I use zero or should I use suck so let's tell",
    "start": "1486919",
    "end": "1493120"
  },
  {
    "text": "it let you suck and then there'll be something else to put in there",
    "start": "1493120",
    "end": "1499480"
  },
  {
    "text": "um and oops Yeah okay so now we've got another hole oh what's the type of that",
    "start": "1502640",
    "end": "1508399"
  },
  {
    "text": "hole oh it's the same as before right now I need natural number n and um I've",
    "start": "1508399",
    "end": "1514360"
  },
  {
    "text": "got M and end available to compute it what do you think I should put in that",
    "start": "1514360",
    "end": "1519440"
  },
  {
    "text": "hole any suggestions I could just put n in but",
    "start": "1520080",
    "end": "1525279"
  },
  {
    "text": "that won't give us the right answer right we want to make use of M as well what could I put in the hole a recursive",
    "start": "1525279",
    "end": "1531760"
  },
  {
    "text": "call a recursive call okay which recursive call shall I put in there M",
    "start": "1531760",
    "end": "1537600"
  },
  {
    "text": "plus n what a great idea okay so this type checks good does",
    "start": "1537600",
    "end": "1546159"
  },
  {
    "text": "this give us we think what we",
    "start": "1546159",
    "end": "1551000"
  },
  {
    "text": "want um so why should this",
    "start": "1553200",
    "end": "1560520"
  },
  {
    "text": "work well this is one more than M and then we add it to n this is we add",
    "start": "1560520",
    "end": "1568880"
  },
  {
    "text": "m and n and then take one more of it so yeah those should both be the same",
    "start": "1568880",
    "end": "1574440"
  },
  {
    "text": "thing let's just do an example is it the case that 2 +",
    "start": "1574440",
    "end": "1580520"
  },
  {
    "text": "2 is equal notice I'm typing Unicode here right this is actually back slash equal",
    "start": "1580520",
    "end": "1587000"
  },
  {
    "text": "sign equal sign gives us this funny equal sign and then again if that's",
    "start": "1587000",
    "end": "1593240"
  },
  {
    "text": "true the proof should be",
    "start": "1593240",
    "end": "1597840"
  },
  {
    "text": "rle yay that worked let's see does two",
    "start": "1598480",
    "end": "1604520"
  },
  {
    "text": "plus because 2 + 3 = 5 let's check one more thing let's",
    "start": "1604520",
    "end": "1611520"
  },
  {
    "text": "check that 3 + 2 is equal to 5 yay those all work",
    "start": "1611520",
    "end": "1619440"
  },
  {
    "text": "let's check that 3 + 3 is equal to 5 oh no that didn't work and write the proof varas again it simplified this down to",
    "start": "1619440",
    "end": "1626679"
  },
  {
    "text": "six and that says no six and five are not the same thing okay so all that's working so",
    "start": "1626679",
    "end": "1635158"
  },
  {
    "text": "far and oh let's uncomment the rest of the file",
    "start": "1639760",
    "end": "1645919"
  },
  {
    "text": "okay now everything should work yeah and here's a proof that 2 + 3 is",
    "start": "1648840",
    "end": "1654640"
  },
  {
    "text": "five um so you can write proofs of equality and AGA this way later on in the book chapter",
    "start": "1654640",
    "end": "1661200"
  },
  {
    "text": "4 gives you um the explanation of how you Define equality which was something",
    "start": "1661200",
    "end": "1666840"
  },
  {
    "text": "that uh BOS talked about on yesterday uh",
    "start": "1666840",
    "end": "1672000"
  },
  {
    "text": "and it also tells you how to define notations like this but this is reasoning that you should have learned in grade school right you write one",
    "start": "1672000",
    "end": "1677919"
  },
  {
    "text": "thing and equal to something else and equal to something else and so on we write these equals with funny symbols in",
    "start": "1677919",
    "end": "1683919"
  },
  {
    "text": "them later on this is because this in this both Adda reduces them both to the",
    "start": "1683919",
    "end": "1689559"
  },
  {
    "text": "same thing uh it's just checking these all reduce to the same thing so it's like what we did before but now it's",
    "start": "1689559",
    "end": "1696159"
  },
  {
    "text": "reducing lots of things and checking that they're all the same later we can give some reasons for equality and we'll",
    "start": "1696159",
    "end": "1702000"
  },
  {
    "text": "see that in a minute uh so what does this say how do",
    "start": "1702000",
    "end": "1707159"
  },
  {
    "text": "you compute 2 plus three well which of these two lines are we going to use to do",
    "start": "1707159",
    "end": "1714200"
  },
  {
    "text": "it are we going to use the zero line or the successor line so two is the",
    "start": "1714600",
    "end": "1720240"
  },
  {
    "text": "successor of one right so it's going to match let's see stupid computer checks",
    "start": "1720240",
    "end": "1726559"
  },
  {
    "text": "the uh is successor of one zero uh no successor and zero are different Constructors nope it's not that one",
    "start": "1726559",
    "end": "1733120"
  },
  {
    "text": "uh-uh uh is successor of one the same as successor of M ooh it would be if M was",
    "start": "1733120",
    "end": "1741000"
  },
  {
    "text": "one so I'll let M be one and now it matches and so that matches two and then",
    "start": "1741000",
    "end": "1748679"
  },
  {
    "text": "a plus matches plus and then three matches n oh that would match if n was three so it's decided here that m is 1",
    "start": "1748679",
    "end": "1757080"
  },
  {
    "text": "and N is three and it rewrites the left hand side to the right hand side so then",
    "start": "1757080",
    "end": "1762480"
  },
  {
    "text": "you get successor of 1 + 3 then we do the same thing again then",
    "start": "1762480",
    "end": "1768960"
  },
  {
    "text": "okay does one match zero uh one is successor of zero oh they both have zero",
    "start": "1768960",
    "end": "1775240"
  },
  {
    "text": "in them maybe they match let's see is zero the same as successor of",
    "start": "1775240",
    "end": "1780440"
  },
  {
    "text": "zero oh no no no successor and zero are different they don't match okay that one",
    "start": "1780440",
    "end": "1785840"
  },
  {
    "text": "doesn't work uh does successor of m match successor of",
    "start": "1785840",
    "end": "1790880"
  },
  {
    "text": "zero successor and successor those are the same",
    "start": "1790880",
    "end": "1798159"
  },
  {
    "text": "so all I need is for M to be zero that does the same thing it decides n is three again so it rewrites a successor",
    "start": "1798159",
    "end": "1805200"
  },
  {
    "text": "of0 + three and that's what we've got here so 1 + 3 we wrote to successor of 0",
    "start": "1805200",
    "end": "1811360"
  },
  {
    "text": "+ 3 and we just carry over the successor and now when it tries does zero match",
    "start": "1811360",
    "end": "1816480"
  },
  {
    "text": "zero oh I think it does I think it does and then n matches three so it rewrites",
    "start": "1816480",
    "end": "1822480"
  },
  {
    "text": "to three so 0 + three here rewrites to three so we've got the successor successor of three three but three is",
    "start": "1822480",
    "end": "1829679"
  },
  {
    "text": "just an abbreviation for successor of successor of successor of zero so this is successor of successor successor of",
    "start": "1829679",
    "end": "1835039"
  },
  {
    "text": "successor of successor of zero which is [Applause]",
    "start": "1835039",
    "end": "1841000"
  },
  {
    "text": "five so that's why 2 + three ends up being five okay so that some of you",
    "start": "1841000",
    "end": "1848440"
  },
  {
    "text": "familiar with has have already seen this this idea goes back to the",
    "start": "1848440",
    "end": "1854799"
  },
  {
    "text": "1800s uh I think these particular definitions were were written down first by piano they're certainly called",
    "start": "1854799",
    "end": "1861039"
  },
  {
    "text": "piano's definitions uh similar ideas were come up with by uh dind in his",
    "start": "1861039",
    "end": "1868360"
  },
  {
    "text": "paper what are and what should be the numbers uh so this is not really a very",
    "start": "1869039",
    "end": "1875279"
  },
  {
    "text": "old idea using just zero in successor and using um proof by induction well",
    "start": "1875279",
    "end": "1881080"
  },
  {
    "text": "proof by induction I get that the Greeks knew proof by induction didn't they",
    "start": "1881080",
    "end": "1887799"
  },
  {
    "text": "who knows did the Greeks know proof by induction do say they know a 2,000-year old proof by",
    "start": "1890600",
    "end": "1896519"
  },
  {
    "text": "induction okay we're all ignorant including [Music]",
    "start": "1896639",
    "end": "1901919"
  },
  {
    "text": "me sorry before your",
    "start": "1901919",
    "end": "1907720"
  },
  {
    "text": "time okay I have to look that one up I think proof by induction is pretty old",
    "start": "1909240",
    "end": "1914880"
  },
  {
    "text": "but I'm not sure okay so um next thing right so now you've seen",
    "start": "1914880",
    "end": "1923480"
  },
  {
    "text": "definitions now we want to see proofs so here's an example of a proof so you're",
    "start": "1923480",
    "end": "1928880"
  },
  {
    "text": "at a party and you meet an operator you want to make small talk with the operator how do you do",
    "start": "1928880",
    "end": "1937880"
  },
  {
    "text": "that right what questions do you ask when you meet an operator at a party Dave a binary operator like plus that",
    "start": "1937880",
    "end": "1945559"
  },
  {
    "text": "you haven't met before what's your type great question okay",
    "start": "1945559",
    "end": "1952519"
  },
  {
    "text": "once you know its type um you might ask questions like are you associative or",
    "start": "1952519",
    "end": "1958320"
  },
  {
    "text": "are you commutative so associative just means you can put the parentheses anyways and commutative means does the",
    "start": "1958320",
    "end": "1964679"
  },
  {
    "text": "order of the arguments matter so if it's commutative we would prove that m+ n is",
    "start": "1964679",
    "end": "1970480"
  },
  {
    "text": "equal to n plus M reversed for all M andn for associative what means is the",
    "start": "1970480",
    "end": "1977240"
  },
  {
    "text": "parentheses can go either way so that says something like 3 + 4 + 5 is equal to 3 + 4 + 5 with the parentheses the",
    "start": "1977240",
    "end": "1985159"
  },
  {
    "text": "other way so open 3 + 4 close + 5 is the same as 3 + open 4 + 5",
    "start": "1985159",
    "end": "1994440"
  },
  {
    "text": "close yes question my definition of addition made",
    "start": "1994440",
    "end": "2004279"
  },
  {
    "text": "use of the fact that um one plus is associative that's why it's correct but",
    "start": "2004279",
    "end": "2011039"
  },
  {
    "text": "I just put it in by Fiat right now I'm going to show that that's enough to make it always associative for all",
    "start": "2011039",
    "end": "2018559"
  },
  {
    "text": "numbers good question um so this is bloody obvious",
    "start": "2018559",
    "end": "2024000"
  },
  {
    "text": "right is it really so obvious right because 3 + 4 is 7 so we get 7 + 5 well",
    "start": "2024000",
    "end": "2030159"
  },
  {
    "text": "that's 12 but the other way around right 4 + 5 is 9 so we get 3 + 9 oh yeah",
    "start": "2030159",
    "end": "2037159"
  },
  {
    "text": "that's also 12 but all of a sudden when I look at this I think is it really",
    "start": "2037159",
    "end": "2044518"
  },
  {
    "text": "obvious uh so the way you make it really obvious is with a a geometric proof",
    "start": "2044559",
    "end": "2051320"
  },
  {
    "text": "right if I have a line of length three next to a line of length four next to a line of length",
    "start": "2051320",
    "end": "2056358"
  },
  {
    "text": "five I can um first turn the four and five into a longer line or first turn",
    "start": "2056359",
    "end": "2062679"
  },
  {
    "text": "the three and four into a longer line but no matter which way I do it I get the same answer",
    "start": "2062679",
    "end": "2068800"
  },
  {
    "text": "um but here but that requires hand waving doing",
    "start": "2068800",
    "end": "2074118"
  },
  {
    "text": "geometric proofs on computer is possible but tricky uh much easier to do an inductive",
    "start": "2074119",
    "end": "2080599"
  },
  {
    "text": "proof so can we prove this by induction Yes again let's make that go",
    "start": "2080599",
    "end": "2088200"
  },
  {
    "text": "away let's comment it out",
    "start": "2088200",
    "end": "2092919"
  },
  {
    "text": "okay so now we want to prove using",
    "start": "2099599",
    "end": "2106560"
  },
  {
    "text": "induction so we need to give a proof here and induct um how many people are",
    "start": "2111839",
    "end": "2117520"
  },
  {
    "text": "familiar with proof by induction right quite a few of you um",
    "start": "2117520",
    "end": "2123119"
  },
  {
    "text": "how many people here are familiar with recursion right that's pretty much",
    "start": "2123119",
    "end": "2128359"
  },
  {
    "text": "everybody I think so here's the really cool thing this is the takeaway that I",
    "start": "2128359",
    "end": "2134359"
  },
  {
    "text": "would like you to get from today's lecture which is definition by",
    "start": "2134359",
    "end": "2141839"
  },
  {
    "text": "recursion and proof by induction are",
    "start": "2141839",
    "end": "2147920"
  },
  {
    "text": "bum the same thing",
    "start": "2147920",
    "end": "2153960"
  },
  {
    "text": "okay that's you should all go ooh 1 two 3",
    "start": "2153960",
    "end": "2161000"
  },
  {
    "text": "oo right it that's really amazing um so right when you do a",
    "start": "2161000",
    "end": "2166760"
  },
  {
    "text": "definition by recursion as we did with addition why did that",
    "start": "2166760",
    "end": "2172000"
  },
  {
    "text": "work right why is this better than saying something like say brexit equals",
    "start": "2172000",
    "end": "2177680"
  },
  {
    "text": "brexit right there's a definition by recursion but that's what we call a non-well-founded",
    "start": "2177680",
    "end": "2183280"
  },
  {
    "text": "recursion right it doesn't tell you anything about what brexit means but when we defined",
    "start": "2183280",
    "end": "2190319"
  },
  {
    "text": "addition up here we defined Plus in terms of plus how could that be the",
    "start": "2190319",
    "end": "2196240"
  },
  {
    "text": "right a right thing to do but the reason that it works is because plus of",
    "start": "2196240",
    "end": "2202680"
  },
  {
    "text": "successor of M and N is defined in terms of plus of M and N so if this is",
    "start": "2202680",
    "end": "2211760"
  },
  {
    "text": "two here this will be one right and that's why it works because two shr to",
    "start": "2211760",
    "end": "2217960"
  },
  {
    "text": "one shrinks to zero it the first argument gets smaller and smaller and smaller and that's because we did",
    "start": "2217960",
    "end": "2224560"
  },
  {
    "text": "pattern matching here and M is part of the first argument and then here we use",
    "start": "2224560",
    "end": "2230040"
  },
  {
    "text": "it as the first argument so when we do a recursive Co this is a part of the",
    "start": "2230040",
    "end": "2236839"
  },
  {
    "text": "argument for the thing we're defining so this is replaced by one of",
    "start": "2236839",
    "end": "2241880"
  },
  {
    "text": "its parts so that's called structural induction you're replacing the whole",
    "start": "2241880",
    "end": "2248160"
  },
  {
    "text": "by one of its",
    "start": "2248160",
    "end": "2250880"
  },
  {
    "text": "parts and that's why it works so this thing is getting smaller so we're going to do the same thing we're going to",
    "start": "2253640",
    "end": "2260359"
  },
  {
    "text": "prove for all MN and P that addition is associative but we're",
    "start": "2260359",
    "end": "2266640"
  },
  {
    "text": "going to do it in and we're going to do it in terms of that very fact but that fact on a smaller M as long as your M",
    "start": "2266640",
    "end": "2275240"
  },
  {
    "text": "gets smaller each time as long as what everything you're inducting on gets smaller each time that's okay the other",
    "start": "2275240",
    "end": "2282280"
  },
  {
    "text": "way we could do this is backwards and we say we're defining Plus on successor of",
    "start": "2282280",
    "end": "2287839"
  },
  {
    "text": "M in terms of Plus on M so it's similarly we're going to prove",
    "start": "2287839",
    "end": "2295280"
  },
  {
    "text": "associativity of successor of M in terms of associativity on",
    "start": "2295280",
    "end": "2301880"
  },
  {
    "text": "M so it's a smaller thing so as long as you do it on a smaller thing it's well",
    "start": "2301880",
    "end": "2307520"
  },
  {
    "text": "founded eventually you reach the base case which is zero so that's what we're going to do",
    "start": "2307520",
    "end": "2313280"
  },
  {
    "text": "proof by induction and we can do the same thing",
    "start": "2313280",
    "end": "2318440"
  },
  {
    "text": "interactively so we've got a hole here I can do the same thing contrl c contrl c",
    "start": "2318440",
    "end": "2323720"
  },
  {
    "text": "let's induct on M right m is the very first thing plus we defined by case",
    "start": "2323720",
    "end": "2330359"
  },
  {
    "text": "analysis on the very first argument so using the very first argument will work out well here we could also Define Plus",
    "start": "2330359",
    "end": "2336920"
  },
  {
    "text": "on the very last argument if we done that induction on P would be a better",
    "start": "2336920",
    "end": "2343640"
  },
  {
    "text": "choice so there we go um so what do we need to prove here",
    "start": "2343640",
    "end": "2350880"
  },
  {
    "text": "if we look in the whole it says what we need to prove is that n",
    "start": "2350880",
    "end": "2358839"
  },
  {
    "text": "plus right so this will simplify right so M plus n if m is z 0 plus n is what",
    "start": "2358839",
    "end": "2366240"
  },
  {
    "text": "n um so we've got n plus p on this side and 0 plus n plus P well this is zero so",
    "start": "2366240",
    "end": "2372839"
  },
  {
    "text": "it simplifies to n plus P so both sides simplify to n plus P so what we need to",
    "start": "2372839",
    "end": "2379200"
  },
  {
    "text": "show is n plus p is equal to n plus P okay that's really easy right that's just um rle and we're",
    "start": "2379200",
    "end": "2387640"
  },
  {
    "text": "done it's obvious uh but I'm going to write that out more long- winded I'm going to write",
    "start": "2387640",
    "end": "2394640"
  },
  {
    "text": "it out like this",
    "start": "2394640",
    "end": "2398318"
  },
  {
    "text": "so I'm writing it out like this so you this is what I just showed you right we've got 0 plus n plus P that",
    "start": "2406720",
    "end": "2412400"
  },
  {
    "text": "simplifies to n+ p and here we've got 0 plus n plus P which simplifies to n plus",
    "start": "2412400",
    "end": "2418440"
  },
  {
    "text": "P typically when you write out these proofs you do them so that one side is the the top is the left hand side of the",
    "start": "2418440",
    "end": "2425240"
  },
  {
    "text": "equation bottom is the right hand side of the equation and you simplify inwards so as we go from the top to the middle",
    "start": "2425240",
    "end": "2431680"
  },
  {
    "text": "we simplify as we go from the bottom to the middle we simplify so now what's left to prove",
    "start": "2431680",
    "end": "2438800"
  },
  {
    "text": "here so let's look in this hole and see what we need to prove now we need to prove the successor of M plus n plus p",
    "start": "2438800",
    "end": "2446720"
  },
  {
    "text": "is equal to the successor of oops M plus n plus P the other way",
    "start": "2446720",
    "end": "2453359"
  },
  {
    "text": "around right so how did we get these two successors out at the front so again let me copy over the",
    "start": "2453359",
    "end": "2461519"
  },
  {
    "text": "proof oops no we want this",
    "start": "2463599",
    "end": "2467960"
  },
  {
    "text": "bit la la la la la it's best to sing while you",
    "start": "2479440",
    "end": "2485040"
  },
  {
    "text": "code or prove la la la la la la la la no that's wrong la la la la",
    "start": "2485040",
    "end": "2495520"
  },
  {
    "text": "[Music] la okay so now we've got the same",
    "start": "2500110",
    "end": "2506640"
  },
  {
    "text": "equation we had before M plus n plus p = m plus n plus P but M gets replaced by",
    "start": "2506640",
    "end": "2513480"
  },
  {
    "text": "successor of M so now what we need to prove is success ucor of n plus n in",
    "start": "2513480",
    "end": "2519560"
  },
  {
    "text": "Brackets plus p is the same as successor of M plus n plus p in",
    "start": "2519560",
    "end": "2526240"
  },
  {
    "text": "Brackets right so we simplify so successor of M plus n plus P by",
    "start": "2526240",
    "end": "2532160"
  },
  {
    "text": "definition of addition is successor of M plus n and then successor of M plus n",
    "start": "2532160",
    "end": "2538119"
  },
  {
    "text": "plus P by definition is successor of M plus n plus p and you saw agda",
    "start": "2538119",
    "end": "2544359"
  },
  {
    "text": "automatically did that simplification for us I've written WR it out long hand so it's easier to follow what's going on",
    "start": "2544359",
    "end": "2550839"
  },
  {
    "text": "going top to bottom again successor of M added to n plus p is the same as successor of M plus n plus",
    "start": "2550839",
    "end": "2558400"
  },
  {
    "text": "P okay so now what we need to do is you show that M plus n plus P parenthesized",
    "start": "2558400",
    "end": "2565839"
  },
  {
    "text": "to the left is the same as M plus n plus P parenthesized to the right that's what",
    "start": "2565839",
    "end": "2571480"
  },
  {
    "text": "I'm trying to prove but now I've got M at the front",
    "start": "2571480",
    "end": "2576680"
  },
  {
    "text": "instead of successor of M so it's a smaller argument so I can recursively call plus a so of MN and P that's the",
    "start": "2576680",
    "end": "2584920"
  },
  {
    "text": "proof that this thing is equal to this thing but now I want the two things",
    "start": "2584920",
    "end": "2590000"
  },
  {
    "text": "equal with Kong written in sorry with suck written in front and the way you do",
    "start": "2590000",
    "end": "2595240"
  },
  {
    "text": "that is you say Kong suck applied to the proof Kong is short for congruence and",
    "start": "2595240",
    "end": "2600680"
  },
  {
    "text": "suck recall is short for successor and AO is short for associative",
    "start": "2600680",
    "end": "2607680"
  },
  {
    "text": "so by the congruence of su congruence of successor applied to",
    "start": "2607680",
    "end": "2612880"
  },
  {
    "text": "the associativity of plus of MN andp we get the desired",
    "start": "2612880",
    "end": "2619200"
  },
  {
    "text": "result and if I now type oh we don't what did I do wrong oh",
    "start": "2619400",
    "end": "2626359"
  },
  {
    "text": "I left this little hole here I shouldn't have done that",
    "start": "2626359",
    "end": "2631520"
  },
  {
    "text": "okay you've now seen how to show",
    "start": "2638079",
    "end": "2643480"
  },
  {
    "text": "associativity and there's another way of doing it which I'm not going to talk about okay we are done",
    "start": "2654119",
    "end": "2662119"
  },
  {
    "text": "yay okay let's go back to the textbook",
    "start": "2662240",
    "end": "2667240"
  },
  {
    "text": "so I've just gone through a very tiny part of the textbook thank you all for your help I had no idea if I would be",
    "start": "2667319",
    "end": "2674160"
  },
  {
    "text": "able to do all that in time live coding so thank you for your help we actually are on",
    "start": "2674160",
    "end": "2681319"
  },
  {
    "text": "schedule so of course to do that I've left out loads of things that are in the textbook and the idea is just to give",
    "start": "2683960",
    "end": "2689640"
  },
  {
    "text": "you a taster but you can now go back and look at all the other things in the textbook oh I should so they things like",
    "start": "2689640",
    "end": "2697520"
  },
  {
    "text": "the story of Creation in the beginning there are no natural numbers we won't do that you can look at that on your own",
    "start": "2697520",
    "end": "2703599"
  },
  {
    "text": "and philosophy and history and uh there's plus and guess what you",
    "start": "2703599",
    "end": "2712640"
  },
  {
    "text": "can also Define times in a very similar way or",
    "start": "2712640",
    "end": "2720599"
  },
  {
    "text": "subtraction um exponent is actually left as a exercise for the reader and there",
    "start": "2720599",
    "end": "2726119"
  },
  {
    "text": "subtraction and then at the bottom we get things like proving well curing which is why we",
    "start": "2726119",
    "end": "2733160"
  },
  {
    "text": "write this funny thing with Aros and more of the story of creation",
    "start": "2733160",
    "end": "2739559"
  },
  {
    "text": "and more of the story of creation and some examples of interactive programming which you've now",
    "start": "2739559",
    "end": "2745559"
  },
  {
    "text": "seen and then there's an exercise which is how do you do binary numbers so doing",
    "start": "2745559",
    "end": "2752800"
  },
  {
    "text": "binary numbers is an exercise in the textbook not an easy one if you do that you're doing very well",
    "start": "2752800",
    "end": "2759880"
  },
  {
    "text": "and then every chapter explains um what the connection to the standard library is so all these things",
    "start": "2759880",
    "end": "2767359"
  },
  {
    "text": "have exactly the same name in the standard Library that's usually the case but I deviate in one or two places and",
    "start": "2767359",
    "end": "2774440"
  },
  {
    "text": "how to type the different Unicode characters so like this funny n is actually back SL small B capital n and",
    "start": "2774440",
    "end": "2781079"
  },
  {
    "text": "so on for all the other ones um but the other thing I want to show you is I want to go on to the the",
    "start": "2781079",
    "end": "2787079"
  },
  {
    "text": "next chapter which was the proof by",
    "start": "2787079",
    "end": "2790800"
  },
  {
    "text": "induction notice what our proof of a for all is right we proved",
    "start": "2793160",
    "end": "2801559"
  },
  {
    "text": "here so the first takeaway which is very exciting is",
    "start": "2801559",
    "end": "2809280"
  },
  {
    "text": "that induction and recursion are the same thing but the other thing which I just slipped by you without explaining",
    "start": "2809680",
    "end": "2816040"
  },
  {
    "text": "it and nobody found it confusing enough to ask a question is no I said for all",
    "start": "2816040",
    "end": "2822000"
  },
  {
    "text": "MN and P we have the M plus n plus p is M plus n plus p and then our function",
    "start": "2822000",
    "end": "2829079"
  },
  {
    "text": "takes three arguments corresponding to m n and p so what is a proof of a for all",
    "start": "2829079",
    "end": "2837000"
  },
  {
    "text": "a universal quantification what does it mean to say that for all MN and P this",
    "start": "2837000",
    "end": "2843800"
  },
  {
    "text": "is true it means I've got a function which given a specific mnnp will be able to compute a rle of",
    "start": "2843800",
    "end": "2852040"
  },
  {
    "text": "the right type it'll be able to compute a rle that shows that this particular equation is true and here just writing",
    "start": "2852040",
    "end": "2859480"
  },
  {
    "text": "reffle wouldn't type check right we needed to do this recursive call in",
    "start": "2859480",
    "end": "2864520"
  },
  {
    "text": "order for it to type check U so it's a recursive function that has the right type that shows that",
    "start": "2864520",
    "end": "2872280"
  },
  {
    "text": "this type is always inhabited it computes an inhabited of this type and",
    "start": "2872280",
    "end": "2877599"
  },
  {
    "text": "in general what does it mean to say for all MN and P that some property",
    "start": "2877599",
    "end": "2883680"
  },
  {
    "text": "holds um it says give me a specific MN and P and I will compute a proof that",
    "start": "2883680",
    "end": "2890400"
  },
  {
    "text": "that property holds for that M that n and that P we're actually Computing",
    "start": "2890400",
    "end": "2895480"
  },
  {
    "text": "specific things",
    "start": "2895480",
    "end": "2898760"
  },
  {
    "text": "question sorry uh which thing do you want me to expand upon",
    "start": "2901920",
    "end": "2907800"
  },
  {
    "text": "I don't know what you mean by congruence in this case kak I did explain that very quickly",
    "start": "2908160",
    "end": "2914839"
  },
  {
    "text": "when I went through it we need to show that successor of this thing is equal to successor of this thing plus a sulk of",
    "start": "2914839",
    "end": "2922520"
  },
  {
    "text": "MP is a proof that this thing and this thing are equal and then to stick why",
    "start": "2922520",
    "end": "2928480"
  },
  {
    "text": "are we allowed to say because this thing and this thing are equal successor of these two things are equal it's because",
    "start": "2928480",
    "end": "2934880"
  },
  {
    "text": "functions are congruent if you apply a function to two equal things you still get two equal things if it's the same",
    "start": "2934880",
    "end": "2941440"
  },
  {
    "text": "function so this just says applying successor to both sides of this equation",
    "start": "2941440",
    "end": "2946760"
  },
  {
    "text": "still gives you two equal things good question thank you",
    "start": "2946760",
    "end": "2954440"
  },
  {
    "text": "okay uh so this is the other really important idea which is universal",
    "start": "2954960",
    "end": "2960880"
  },
  {
    "text": "quantification is proved just by a function implication also is proved by a function if I want to show a a implies B",
    "start": "2960880",
    "end": "2968240"
  },
  {
    "text": "what I do is I say given a proof of a I can compute a proof of B to proof A and",
    "start": "2968240",
    "end": "2975599"
  },
  {
    "text": "B as Bartos mentioned it's a pair it's a pair of a proof of a and a proof of B to",
    "start": "2975599",
    "end": "2982920"
  },
  {
    "text": "prove A or B it's a disjunction it's the either type in hascal um you hand",
    "start": "2982920",
    "end": "2988280"
  },
  {
    "text": "somebody either a proof of a or a proof of B and so",
    "start": "2988280",
    "end": "2994279"
  },
  {
    "text": "on uh okay let's go 10",
    "start": "2994480",
    "end": "3001240"
  },
  {
    "text": "minutes right no don't do that do that do that",
    "start": "3003720",
    "end": "3011119"
  },
  {
    "text": "Keye that do that okay I'm going to skip over some of",
    "start": "3011119",
    "end": "3018640"
  },
  {
    "text": "this stuff that's okay actually",
    "start": "3018640",
    "end": "3023720"
  },
  {
    "text": "I'm I'm going to very briefly mention this idea because it's a really important idea one of the things that",
    "start": "3024680",
    "end": "3030440"
  },
  {
    "text": "you get for free out of using um constructive Logics",
    "start": "3030440",
    "end": "3035520"
  },
  {
    "text": "like this um so notice by the way I said a proof of A or B is either a proof of a",
    "start": "3035520",
    "end": "3041200"
  },
  {
    "text": "or a proof of B uh and right it's a data Constructor so you have to hand back one or the",
    "start": "3041200",
    "end": "3046960"
  },
  {
    "text": "other you have to give it a proof of a or a proof of B notice this loses um something that we're familiar with from",
    "start": "3046960",
    "end": "3052960"
  },
  {
    "text": "classical logic which says it's always the case that a or not a is true you're",
    "start": "3052960",
    "end": "3058079"
  },
  {
    "text": "only allowed to say it if you can say which um right which is not always the",
    "start": "3058079",
    "end": "3063960"
  },
  {
    "text": "case right either forma's last theem holds or forma's last theem is false",
    "start": "3063960",
    "end": "3069440"
  },
  {
    "text": "you're not allowed to say that you have to tell me which which means you have to be Andrew ws and come up with the proof",
    "start": "3069440",
    "end": "3075319"
  },
  {
    "text": "of fal's Last Theorem which took 400 years so answering a or not a that can",
    "start": "3075319",
    "end": "3082440"
  },
  {
    "text": "be hard um but I'm going to show you a similar example of this which is",
    "start": "3082440",
    "end": "3090240"
  },
  {
    "text": "um right so the second half of the textbook is all about formalizing",
    "start": "3090240",
    "end": "3097240"
  },
  {
    "text": "programming languages using different variants of Lambda calculus and typed Lambda calculus and in type lamda",
    "start": "3097240",
    "end": "3104040"
  },
  {
    "text": "calculus we have two properties called progress and preservation now there's something else",
    "start": "3104040",
    "end": "3110359"
  },
  {
    "text": "right which is really useful that you'd like after you've defined your language you'd like something that can execute programs for you you'd like an evaluator",
    "start": "3110359",
    "end": "3118040"
  },
  {
    "text": "or an animator something that can do reduction steps and tell you what the answer",
    "start": "3118040",
    "end": "3123440"
  },
  {
    "text": "is um and when I started writing this textbook uh I was working at iohk with",
    "start": "3123440",
    "end": "3130119"
  },
  {
    "text": "gregori Ross who has something called the K system where you put in a bunch of rewriting rules and it gives you an",
    "start": "3130119",
    "end": "3135240"
  },
  {
    "text": "animation of them for free and so I had K Envy right I said I",
    "start": "3135240",
    "end": "3141480"
  },
  {
    "text": "I want to get uh evaluation for free um but right",
    "start": "3141480",
    "end": "3147920"
  },
  {
    "text": "in uh I based a lot of what I did on a previous textbook software foundations and in there they don't have it for free",
    "start": "3147920",
    "end": "3154400"
  },
  {
    "text": "they say oh I'll show you separately how to normalize things and they Define a normalized tactic uh there's a paper",
    "start": "3154400",
    "end": "3160520"
  },
  {
    "text": "called functional bigstep semantics where they say uh to test a semantics one must actually use it to evaluate",
    "start": "3160520",
    "end": "3167040"
  },
  {
    "text": "programs um and it says many small step approaches can do this but they only",
    "start": "3167040",
    "end": "3172799"
  },
  {
    "text": "site gregori Ross's work which I just mentioned and another nice piece of work by Robbie Findler and others called",
    "start": "3172799",
    "end": "3179400"
  },
  {
    "text": "redex which is available in scheme so redex and K can do it but nothing else",
    "start": "3179400",
    "end": "3184799"
  },
  {
    "text": "can so now I've got K and redex envy um and then in the pop Mark challenge",
    "start": "3184799",
    "end": "3190960"
  },
  {
    "text": "which was published quite a while ago right part one of it was prove some things using agda or some other proof of",
    "start": "3190960",
    "end": "3197400"
  },
  {
    "text": "system and the things they wanted you to prove were preservation and progress so preservation says if a term is well",
    "start": "3197400",
    "end": "3203359"
  },
  {
    "text": "typed and you reduce it one step then it's still well typed um that's covered",
    "start": "3203359",
    "end": "3208839"
  },
  {
    "text": "in much more detail in the textbook and progress says if a term is well typed then either it's a value or it can",
    "start": "3208839",
    "end": "3217319"
  },
  {
    "text": "reduce and then in the next section they say do automation which is do animation",
    "start": "3217319",
    "end": "3222880"
  },
  {
    "text": "which is a separate task so figure out how to reduce a given term what was not widely realized back then and I hope",
    "start": "3222880",
    "end": "3230680"
  },
  {
    "text": "everybody reading my textbook will realize as far as I can tell this textbook is the first place it's",
    "start": "3230680",
    "end": "3236799"
  },
  {
    "text": "published people like Bob Harper have known about this for years Bob Harper has this amazing thick textbook on",
    "start": "3236799",
    "end": "3243520"
  },
  {
    "text": "semantics does this fact appear that once you've done a constructive proof you've animated it no I asked him it's",
    "start": "3243520",
    "end": "3251799"
  },
  {
    "text": "not there I said why isn't he that there he said well you can't publish that 2 plus 2 equals 4 it's",
    "start": "3251799",
    "end": "3259720"
  },
  {
    "text": "obvious um and it is obvious once you've seen it it is completely obvious",
    "start": "3259920",
    "end": "3267160"
  },
  {
    "text": "right it's so obvious I will swear horribly and say it is bloody obvious",
    "start": "3267160",
    "end": "3273000"
  },
  {
    "text": "um but nobody published it and I didn't",
    "start": "3273000",
    "end": "3278640"
  },
  {
    "text": "realize it for until I was six months into writing the text and I went wait a minute preservation and progress are",
    "start": "3278640",
    "end": "3285599"
  },
  {
    "text": "exactly what you need to get evaluation and here's the definition of the",
    "start": "3285599",
    "end": "3291440"
  },
  {
    "text": "evaluator um and basically the idea is remember progress says it's either a",
    "start": "3291440",
    "end": "3296760"
  },
  {
    "text": "value or it takes a step it's constructive it has to tell you which so",
    "start": "3296760",
    "end": "3303079"
  },
  {
    "text": "if it tells you it's a value you're done if it tells you it takes a step you've taken a",
    "start": "3303079",
    "end": "3308280"
  },
  {
    "text": "step uh now all I need to do is recursively apply it oh but I need to know the thing I step to is well typed",
    "start": "3308280",
    "end": "3314839"
  },
  {
    "text": "oh that's what preservation gives me so just by repeatedly applying these two things U Bob Harper told me had a very",
    "start": "3314839",
    "end": "3321640"
  },
  {
    "text": "nice name for this the past do because preservation hands off to progress and progress hands back to preservation uh",
    "start": "3321640",
    "end": "3328680"
  },
  {
    "text": "sorry other way around you start with progress you preserve and you get back to progress anyhow you can write it up in this many lines I won't go through it",
    "start": "3328680",
    "end": "3335559"
  },
  {
    "text": "in detail but it's very concise to write up um in a constructive language like",
    "start": "3335559",
    "end": "3343200"
  },
  {
    "text": "agda every program you write terminates that's because agda insists when you do recursion that it's structural recursion",
    "start": "3343200",
    "end": "3350359"
  },
  {
    "text": "on something smaller uh anybody who's familiar with Lambda calculus knows that",
    "start": "3350359",
    "end": "3355400"
  },
  {
    "text": "given the right constructs like fixo you can write programs that don't terminate so how do we make this work we just give",
    "start": "3355400",
    "end": "3361799"
  },
  {
    "text": "it an extra counter here which is just a natural number and you count down so you always are reducing that and that's what",
    "start": "3361799",
    "end": "3369039"
  },
  {
    "text": "guarantees you terminate if you don't give it enough gas you won't reduce it to a normal form but you can take what",
    "start": "3369039",
    "end": "3374640"
  },
  {
    "text": "you get give it more gas and keep reducing it's called gas because that's what we do in the cryptocurrency field",
    "start": "3374640",
    "end": "3380039"
  },
  {
    "text": "we call it gas so the name is stolen from ethereum where they use a similar trick to guarantee that when you send in",
    "start": "3380039",
    "end": "3386480"
  },
  {
    "text": "a smart contract to the blockchain it doesn't take forever to evaluate uh oh and there's an actual",
    "start": "3386480",
    "end": "3393799"
  },
  {
    "text": "reduction of a term in Lambda calculus computed by this evaluator and the",
    "start": "3393799",
    "end": "3399280"
  },
  {
    "text": "textbook of course has lots of examples in it they were actually very hard to do by hand so I was really pleased when I",
    "start": "3399280",
    "end": "3405079"
  },
  {
    "text": "realized I can compute these all automatically and so that's what I do I reformat them a bit but they're all",
    "start": "3405079",
    "end": "3410960"
  },
  {
    "text": "computed automatically okay very quickly I have three minutes",
    "start": "3410960",
    "end": "3416960"
  },
  {
    "text": "hm okay very very very very very quickly we've done all this at iohk where we've",
    "start": "3416960",
    "end": "3423319"
  },
  {
    "text": "got a smart contract language which uh Manuel told you about here's the team",
    "start": "3423319",
    "end": "3429039"
  },
  {
    "text": "working on it all these people are all fantastic but I'm going to focus on the work of one person James Chapman so",
    "start": "3429039",
    "end": "3436079"
  },
  {
    "text": "James PhD thesis was about proving properties of of programming languages",
    "start": "3436079",
    "end": "3442559"
  },
  {
    "text": "in agda he's the world expert on this we have our own very simple language system",
    "start": "3442559",
    "end": "3450680"
  },
  {
    "text": "F uh which is based on lots of work by different logicians",
    "start": "3450680",
    "end": "3455880"
  },
  {
    "text": "who discovered the same thing independently but I won't go into that in detail but the logician Jean shad and",
    "start": "3455880",
    "end": "3462960"
  },
  {
    "text": "the computer scientist John RS both discovered system F within a couple of years of each other so that is the core",
    "start": "3462960",
    "end": "3470760"
  },
  {
    "text": "language that we run on the blockchain the idea is pick something 40 years old and maybe it will be good for the next",
    "start": "3470760",
    "end": "3477119"
  },
  {
    "text": "40 years so there's the complete syntax of it it's a little bit more complicated",
    "start": "3477119",
    "end": "3482880"
  },
  {
    "text": "than what Gerard did but not much it's a um derivative of what Gerard did Gerard",
    "start": "3482880",
    "end": "3488079"
  },
  {
    "text": "did system F Omega and we have a derivative called system F Omega mu which also has recursion because we need",
    "start": "3488079",
    "end": "3495359"
  },
  {
    "text": "recursion there's the whole thing written out in ogda the key thing is the lovely thing is in the cryptocurrency",
    "start": "3495359",
    "end": "3501760"
  },
  {
    "text": "field it's so important to get this right that there are actually several firms out there that have done",
    "start": "3501760",
    "end": "3508720"
  },
  {
    "text": "proofs in COA that their core system is correct or are in the middle of doing proofs in caul another proof assistant",
    "start": "3508720",
    "end": "3516440"
  },
  {
    "text": "that their core system is correct so when I went and said we should do a proof in agda that our core system is",
    "start": "3516440",
    "end": "3522400"
  },
  {
    "text": "correct right it's 40 years old but let's do the proof in agda and they all just said yes of course we should do that and they hired James to do it and",
    "start": "3522400",
    "end": "3529839"
  },
  {
    "text": "James has done an amazing job here's another colleague of mine Roman kirv um saying what a wonderful job James did",
    "start": "3529839",
    "end": "3537640"
  },
  {
    "text": "but this is a cool thing about cryptocurrency it's so much money that people are willing to um use functional",
    "start": "3537640",
    "end": "3544240"
  },
  {
    "text": "languages to get it right and willing to use proof assistance like agna and caul to prove they've gotten it right so we",
    "start": "3544240",
    "end": "3552400"
  },
  {
    "text": "actually now have a commercial application okay I'm done uh if you want",
    "start": "3552400",
    "end": "3560839"
  },
  {
    "text": "to learn more about this idea that people have been alluding to that data",
    "start": "3560839",
    "end": "3567119"
  },
  {
    "text": "structures like records are the same as logical things like conjunction that",
    "start": "3567119",
    "end": "3572920"
  },
  {
    "text": "things we do in programming all the time like functions are the same as logical things like implication then um have a",
    "start": "3572920",
    "end": "3580599"
  },
  {
    "text": "look at this paper propositions as types except you're all young so you don't read but there's a a video as",
    "start": "3580599",
    "end": "3589079"
  },
  {
    "text": "well so you can see it on YouTube the uh recording of a talk I gave at strange",
    "start": "3589079",
    "end": "3594480"
  },
  {
    "text": "Loop and I'm done",
    "start": "3594480",
    "end": "3598039"
  },
  {
    "text": "uh",
    "start": "3602319",
    "end": "3605319"
  }
]