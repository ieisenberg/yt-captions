[
  {
    "text": "thank you for that introduction and uh thank you for coming I hope you're having a good afternoon and have some",
    "start": "4279",
    "end": "9400"
  },
  {
    "text": "fun for the next hour right so I'm going to talk about using formal methods for to eliminate exploitable bugs thank you",
    "start": "9400",
    "end": "14960"
  },
  {
    "text": "for coming despite that really scary word formal methods in the title right so as you probably know from",
    "start": "14960",
    "end": "22560"
  },
  {
    "text": "reading the newspaper and other online Outlets computers these days are pretty",
    "start": "22560",
    "end": "27760"
  },
  {
    "text": "much unacceptably insecure it's relative ly easy for hackers to break in and steal information or cause havoc and to",
    "start": "27760",
    "end": "34960"
  },
  {
    "text": "a first approximation all computers these days are networked really there's no such thing as air gaps anymore it's",
    "start": "34960",
    "end": "41200"
  },
  {
    "text": "also true that nowadays there are many things that look like mundane normal objects that are actually networked",
    "start": "41200",
    "end": "47640"
  },
  {
    "text": "computers everything from scada systems that control industrial infrastructure like sewage treatment plants uranium",
    "start": "47640",
    "end": "54079"
  },
  {
    "text": "enrichment facilities the locks on Prison doors to medical devices like",
    "start": "54079",
    "end": "59199"
  },
  {
    "text": "insulin pumps and pacemakers to communication devices computer peripherals and various kinds",
    "start": "59199",
    "end": "65320"
  },
  {
    "text": "of vehicles you might have seen in uh July of this year this picture of a a",
    "start": "65320",
    "end": "70960"
  },
  {
    "text": "Jeep sitting in a ditch like the story of how that jeep came to be sitting in a ditch is pretty interesting two uh White",
    "start": "70960",
    "end": "77960"
  },
  {
    "text": "hack Hoppers called uh Chris valich and Charlie Miller convinced a reporter for Wired Magazine to get in that jeep and",
    "start": "77960",
    "end": "84880"
  },
  {
    "text": "drive to meet them somewhere and while he was in the car they wirelessly hacked",
    "start": "84880",
    "end": "90200"
  },
  {
    "text": "in and took control of his brakes and his acceleration in an act that was wildly irresponsible on the white hat",
    "start": "90200",
    "end": "96119"
  },
  {
    "text": "hacker part thankfully no one was injured the car uh wasn't particularly damaged even though it ended up in a",
    "start": "96119",
    "end": "101840"
  },
  {
    "text": "ditch um they didn't do anything that was new right they showed that they could hack this Jeep Cherokee and caused",
    "start": "101840",
    "end": "109119"
  },
  {
    "text": "uh Chrysler to issue a recall for 500,000 similar devices so they raised the level of visibility of the issue but",
    "start": "109119",
    "end": "115880"
  },
  {
    "text": "the underlying technical issue has been there for over 10 years we've known that it's been that way for over 10 years",
    "start": "115880",
    "end": "121079"
  },
  {
    "text": "based on work that Stephan Savage at the University of California at San Diego and Yoshi Kono at the University of",
    "start": "121079",
    "end": "126560"
  },
  {
    "text": "Washington did earlier so the thing to know about a modern automobile is a modern automobile",
    "start": "126560",
    "end": "131800"
  },
  {
    "text": "is really a computer on Wheels a modern automobile has something between 30 and 100 embedded control units an embedded",
    "start": "131800",
    "end": "138640"
  },
  {
    "text": "control unit is just a computer some of them are very very small little computers but some of them are full-blown computers running full-blown",
    "start": "138640",
    "end": "144400"
  },
  {
    "text": "Linux installations and those computers are connected via a series of networks they're called can networks some of",
    "start": "144400",
    "end": "151120"
  },
  {
    "text": "those networks are high speed some of they're low speed it's tempting to consider the high-speed networks high",
    "start": "151120",
    "end": "156200"
  },
  {
    "text": "security networks and the low speed ones low security but that's not at all true it just has to the high and low just has to do with the speed of the processor",
    "start": "156200",
    "end": "163159"
  },
  {
    "text": "and what Stephan Yoshi showed is that all those all those networks are connected to each other if you can connect to any one of them you can",
    "start": "163159",
    "end": "168319"
  },
  {
    "text": "connect to all of the others they showed that if they could plug into the diagnostic port that's required by law",
    "start": "168319",
    "end": "173640"
  },
  {
    "text": "in the United States to exist under the steering wheel they could connect they could uh Bridge all of those devices",
    "start": "173640",
    "end": "179959"
  },
  {
    "text": "they could replace any of the software on any of those devices so what kind of software are we talking about well the",
    "start": "179959",
    "end": "186519"
  },
  {
    "text": "brakes are controlled by software because of anti-lock braking right anti-lock braking is a really good thing you want to have anti-lock braking but",
    "start": "186519",
    "end": "192480"
  },
  {
    "text": "that means your software is controlling your braking you want to have cruise control right cruise control means",
    "start": "192480",
    "end": "198400"
  },
  {
    "text": "acceleration is under the control of software so they were able to rewrite the software code and those fancy cars that can park themselves do that",
    "start": "198400",
    "end": "204560"
  },
  {
    "text": "parallel parking trick so you don't have to in those cars the steering is also under software control the trend",
    "start": "204560",
    "end": "209840"
  },
  {
    "text": "basically is that everything in the car is under software control and they were able to rewrite that software to do whatever they wanted to do instead of",
    "start": "209840",
    "end": "216040"
  },
  {
    "text": "what the original equipment manufacturer wanted to do the response to that first paper was",
    "start": "216040",
    "end": "221120"
  },
  {
    "text": "a little bit muted since if you recall they were sitting in the front seat of the car plugged into the diagnostic part",
    "start": "221120",
    "end": "226799"
  },
  {
    "text": "if Port if they're sitting in the car they could Hotwire and have physical control over all those dases at the same",
    "start": "226799",
    "end": "232079"
  },
  {
    "text": "time so no big deal right so they responded with another paper about a year later so showing that they could",
    "start": "232079",
    "end": "238319"
  },
  {
    "text": "achieve exactly the same effect without physically touching the car in four different ways the first way was they",
    "start": "238319",
    "end": "245879"
  },
  {
    "text": "planted code on the mechanic's computer and then when the mechanic connected the diagnostic device from his computer into",
    "start": "245879",
    "end": "252920"
  },
  {
    "text": "the D that same diagnostic port they could spread their code from the laptop to the computer to the car and rewrite",
    "start": "252920",
    "end": "259199"
  },
  {
    "text": "the code the second way was through the Bluetooth interface right you want your car to have a Bluetooth interface",
    "start": "259199",
    "end": "264680"
  },
  {
    "text": "because that means you can talk on your cell phone without having your hands on the cell phone so you won't get a ticket",
    "start": "264680",
    "end": "269759"
  },
  {
    "text": "at least where I live you get tickets if you talk on the cell phone without uh uh using a Bluetooth interface so they",
    "start": "269759",
    "end": "275440"
  },
  {
    "text": "showed that they could wirelessly break in there's a little bit of security on that Bluetooth interface so uh they",
    "start": "275440",
    "end": "281120"
  },
  {
    "text": "estimated that if you had a parking garage that had 500 cars in it as the cars exited the parking garage they",
    "start": "281120",
    "end": "286360"
  },
  {
    "text": "would be able to hack into two of those cars as they drove by the third way they broke in was through the telematics unit",
    "start": "286360",
    "end": "292360"
  },
  {
    "text": "so telematics is the industry standard term for what GM calls OnStar system",
    "start": "292360",
    "end": "297560"
  },
  {
    "text": "it's the thing that if you're in an accident arranges to have the ambulance come and pick you up it's the thing if you lock your keys in the car you can",
    "start": "297560",
    "end": "303160"
  },
  {
    "text": "contact them and they'll remotely unlock your car for you so it's a great service has really useful safety and convenience",
    "start": "303160",
    "end": "308880"
  },
  {
    "text": "features and um health issues um but it means your car has a cell phone number",
    "start": "308880",
    "end": "314560"
  },
  {
    "text": "and what Chris what Charlie and uh Stefan were able to do was repeatedly call that cell phone number and",
    "start": "314560",
    "end": "320319"
  },
  {
    "text": "eventually break the uh little bit of security with on that device the estimated time to break into a car uh in",
    "start": "320319",
    "end": "327360"
  },
  {
    "text": "that way is 12 hours so they can just call the number over and over and over again and break into the into the system",
    "start": "327360",
    "end": "332919"
  },
  {
    "text": "uh in about 12 hours estimated time the fourth way was through the infotainment",
    "start": "332919",
    "end": "338360"
  },
  {
    "text": "system so they cre created a a version of a digital a digital version of a song one of Beethoven's symphonies in fact",
    "start": "338360",
    "end": "345280"
  },
  {
    "text": "this digital version of the song played just fine in your laptop and it played just fine in the uh home stereo system",
    "start": "345280",
    "end": "352479"
  },
  {
    "text": "but when it was played in the entertainment system in that particular car it caused a buffer overflow that allowed them to break in uh as they did",
    "start": "352479",
    "end": "359720"
  },
  {
    "text": "did in all the other ways right so not even your music is necessarily safe",
    "start": "359720",
    "end": "366759"
  },
  {
    "text": "right so you know why is this the way it is why is it so easy in some sense to",
    "start": "366759",
    "end": "371800"
  },
  {
    "text": "break into cars or to break into computers in general well it's easy",
    "start": "371800",
    "end": "376840"
  },
  {
    "text": "because it's really really hard to get security right right to get security right you have to do a lot of things",
    "start": "376840",
    "end": "382919"
  },
  {
    "text": "correctly like even an octopus doesn't have enough arms to take care of each thing one at a time right so what are",
    "start": "382919",
    "end": "389080"
  },
  {
    "text": "the things you have to do you have to design it right if you have a bad architecture a bad design it doesn't matter what the rest of the system is",
    "start": "389080",
    "end": "394400"
  },
  {
    "text": "doing you can't keep attackers out you have to be able to write down that design in a way that doesn't have bugs",
    "start": "394400",
    "end": "399599"
  },
  {
    "text": "that everybody understands what they're supposed to be doing the people who actually do the coding have to code it without implementation errors because",
    "start": "399599",
    "end": "406440"
  },
  {
    "text": "implementation errors often lead to exploitable vulnerabilities you have to make sure that your system doesn't leak out information you have to configure it",
    "start": "406440",
    "end": "413160"
  },
  {
    "text": "properly you have to teach your users how to use it properly and of course if you work with users you know how hard that is right even just getting password",
    "start": "413160",
    "end": "419680"
  },
  {
    "text": "words uh not on Post-it notes on top of desks it's a really hard uh hard thing",
    "start": "419680",
    "end": "425039"
  },
  {
    "text": "you have to deal with malicious insiders you have possibly faulty Hardware you have physical security you have to worry about because if an attacker can",
    "start": "425039",
    "end": "431199"
  },
  {
    "text": "actually physically touch your computer and and replace the software then again they're in control of your system not",
    "start": "431199",
    "end": "436840"
  },
  {
    "text": "not you and the list goes on right so it's a really really hard problem in this talk I'm just going to focus on",
    "start": "436840",
    "end": "443199"
  },
  {
    "text": "implementation errors so what I'm talking about is not a silver bullet it does not solve all security problems it",
    "start": "443199",
    "end": "448520"
  },
  {
    "text": "just provides a handle for dealing with implementation bugs and security flaws that come through implementation bugs",
    "start": "448520",
    "end": "454440"
  },
  {
    "text": "just one aspect okay so just one aspect but a",
    "start": "454440",
    "end": "459639"
  },
  {
    "text": "really important aspect because it turns out many bugs in software can be converted into exploits that black hat",
    "start": "459639",
    "end": "465840"
  },
  {
    "text": "hackers can use so this graph which was from a paper written by the IBM task force in 2012 looking at security issues",
    "start": "465840",
    "end": "473639"
  },
  {
    "text": "it shows the graph each year how many vulnerabilities were reported so obviously the number of vul buties",
    "start": "473639",
    "end": "479759"
  },
  {
    "text": "reported in 2012 was only a little over 8,000 so very very small number actually compared to uh the real ones the thing",
    "start": "479759",
    "end": "486919"
  },
  {
    "text": "that's really interesting to me about this uh data is that in of the 2012 numbers 3,400 of those uh a little bit",
    "start": "486919",
    "end": "494240"
  },
  {
    "text": "over 8,000 vulnerabilities had public exploits available so 42% of these publicly disclosed vulnerabilities had",
    "start": "494240",
    "end": "501400"
  },
  {
    "text": "public exploits available so vulnerabilities can be changed into exploitable",
    "start": "501400",
    "end": "506440"
  },
  {
    "text": "bugs into exploits then the next thing is that these exploits can be used to take over",
    "start": "506440",
    "end": "513039"
  },
  {
    "text": "control of your computer and to exfiltrate information so just while I was putting this talk together Microsoft",
    "start": "513039",
    "end": "519399"
  },
  {
    "text": "released the security bulletin ms150 078 critical this uh release had to do with",
    "start": "519399",
    "end": "525640"
  },
  {
    "text": "a buffer underflow in the Adobe type manager Library this uh bug allowed",
    "start": "525640",
    "end": "531240"
  },
  {
    "text": "remote code execution on every single Windows platform that Microsoft was supporting at the time so if you were",
    "start": "531240",
    "end": "537399"
  },
  {
    "text": "running a supported Microsoft device this summer your computer was vulnerable to remote code execution because of this",
    "start": "537399",
    "end": "543360"
  },
  {
    "text": "bug in the same kind of time frame time frame we saw the hard bleed vulnerability which came from a missing",
    "start": "543360",
    "end": "549279"
  },
  {
    "text": "bounce check in op SSH op SSL sorry which allowed the theft of secret keys and other information in a way that left",
    "start": "549279",
    "end": "555959"
  },
  {
    "text": "no Trail on your computer so you couldn't go back and audit your system to see if it had been compromised or not",
    "start": "555959",
    "end": "561880"
  },
  {
    "text": "you just you didn't know so these are examples that show that exploitable vulnerabilities can be used to take over",
    "start": "561880",
    "end": "567000"
  },
  {
    "text": "control of your system and to exfiltrate information however converting bugs into exploits is",
    "start": "567000",
    "end": "574720"
  },
  {
    "text": "actually pretty difficult it requires a lot of very specialized skill that most people don't have um but there's a",
    "start": "574720",
    "end": "580800"
  },
  {
    "text": "there's a market for that so the people who know how to do this can do this and create electronic skeleton keys black uh",
    "start": "580800",
    "end": "588959"
  },
  {
    "text": "uh exploit kits and then sell them on the black market so for example the Phoenix exploit kit which was available",
    "start": "588959",
    "end": "594200"
  },
  {
    "text": "in 2010 uh uses a lot of exploitable vulnerabilities to make it so that people who are not technically skilled",
    "start": "594200",
    "end": "600839"
  },
  {
    "text": "can go to the black market pay up their money and get exploit kits to be able to attack other systems so uh scaling if",
    "start": "600839",
    "end": "608360"
  },
  {
    "text": "you will to the to the masses probably not what we actually want okay so the point of this first part of the talk was",
    "start": "608360",
    "end": "614360"
  },
  {
    "text": "to say you know exploitable vulnerabilities are a problem which I'm sure you probably knew already the next",
    "start": "614360",
    "end": "620160"
  },
  {
    "text": "part of the talk is to talk about this hypothesis that formal methods can help us to eliminate many of these",
    "start": "620160",
    "end": "625279"
  },
  {
    "text": "exploitable vulnerabilities now if you've been working in the software industry for very long you're probably like yeah yeah right I've been there",
    "start": "625279",
    "end": "631920"
  },
  {
    "text": "tried that I was not impressed right the formal methods research Community has been basically been trying and saying for roughly 50 years that they can help",
    "start": "631920",
    "end": "638920"
  },
  {
    "text": "with this problem so why is now actually a good time to revisit this hypothesis",
    "start": "638920",
    "end": "644880"
  },
  {
    "text": "and I would say there's actually four reasons why now is a good time to reconsider this the first just has to do",
    "start": "644880",
    "end": "650880"
  },
  {
    "text": "with Mo's law right it turns out formal methods based techniques are incredibly computationally intens intensive both in",
    "start": "650880",
    "end": "656519"
  },
  {
    "text": "terms of cycles and in terms of memory so the fact that computers are just way faster and have way more memory means",
    "start": "656519",
    "end": "662920"
  },
  {
    "text": "that formal methods can do a lot now that they couldn't do 20 years ago 10 years ago a second huge enabler in the",
    "start": "662920",
    "end": "671200"
  },
  {
    "text": "formal method space is increased levels of Automation and a lot of this automation is coming from a very humble",
    "start": "671200",
    "end": "676279"
  },
  {
    "text": "little problem called satisfiability so satisfiability is you're given a Boolean formula which is",
    "start": "676279",
    "end": "682560"
  },
  {
    "text": "a Formula where the variables range over true and false connected via Andor not and the satisfiability problem just says",
    "start": "682560",
    "end": "689440"
  },
  {
    "text": "come up with an assignment of true and false to those Boolean variables that makes the overall formula true so",
    "start": "689440",
    "end": "695680"
  },
  {
    "text": "theoretical researchers showed a long time ago that this problem was was NP complete and therefore not all that",
    "start": "695680",
    "end": "701079"
  },
  {
    "text": "interesting the only known algorithm that works in all cases is exponential turns out however that it's",
    "start": "701079",
    "end": "706760"
  },
  {
    "text": "a really interesting problem to uh use heris you can solve many many of these instances heris and from that",
    "start": "706760",
    "end": "713760"
  },
  {
    "text": "observation there sprung this huge cottage industry every year there's a competition where one group uh puts",
    "start": "713760",
    "end": "719880"
  },
  {
    "text": "together a whole bunch of sad instances and challenges the world researchers to solve as many as they can in a two-hour",
    "start": "719880",
    "end": "725760"
  },
  {
    "text": "time frame the reason why satisfiability is interesting for formal methods is that you can encode many important",
    "start": "725760",
    "end": "732720"
  },
  {
    "text": "questions about the software that you're running into enormously large instances of these of this problem so you can take",
    "start": "732720",
    "end": "738880"
  },
  {
    "text": "this really complicated question about software and you can encode it in an enormous formula and then throw it to the SAT solver and the SATs solver can",
    "start": "738880",
    "end": "745519"
  },
  {
    "text": "then tell you almost always yes or no whether it's satisfiable answer your question automatically so what this",
    "start": "745519",
    "end": "751360"
  },
  {
    "text": "graph is showing is the progress that the research Community has made in automatically solving sat problems so",
    "start": "751360",
    "end": "757440"
  },
  {
    "text": "Daniel Leber in 2010 went and took the winners of the the international sat competition and ported all of them to a",
    "start": "757440",
    "end": "765320"
  },
  {
    "text": "modern machine and then he took the problem instances from the 2009",
    "start": "765320",
    "end": "770560"
  },
  {
    "text": "competition and he ran all of them so each line in this graph is one winner from one year each dot in the graph",
    "start": "770560",
    "end": "777839"
  },
  {
    "text": "represents how long it took that particular solver to solve that particular problem instance so the",
    "start": "777839",
    "end": "783160"
  },
  {
    "text": "horizontal axis is how many problems you've solved and the vertical axis is how long it took you to solve that",
    "start": "783160",
    "end": "788440"
  },
  {
    "text": "problem so this sort of lime green line over here is the winner from 2002 and",
    "start": "788440",
    "end": "795000"
  },
  {
    "text": "this really dark line over here is the winner from 2010 and if we just pick this point here",
    "start": "795000",
    "end": "800920"
  },
  {
    "text": "which is how long did it take to solve 80 problems the best solver in 2002 took",
    "start": "800920",
    "end": "806600"
  },
  {
    "text": "a th000 seconds whereas the best solver in 2010 took 40 seconds so that's a two",
    "start": "806600",
    "end": "812600"
  },
  {
    "text": "orders of magnitude improvement over that same time frame that we've seen the same kind of improvements from from",
    "start": "812600",
    "end": "818240"
  },
  {
    "text": "Moors law so much much faster so increased automation is the second reason the third reason then is",
    "start": "818240",
    "end": "825519"
  },
  {
    "text": "the infrastructure right in the last 20 30 years formal methods researchers have built huge numbers of tools that are",
    "start": "825519",
    "end": "832199"
  },
  {
    "text": "available to other researchers that can be used by the international formal methods community so before when a",
    "start": "832199",
    "end": "838440"
  },
  {
    "text": "formal methods researcher tried to do something they essentially they had to like if you're thinking as a programmer",
    "start": "838440",
    "end": "844480"
  },
  {
    "text": "and you wanted to build something before the analogy was they had you had to build the compiler and then start trying",
    "start": "844480",
    "end": "850480"
  },
  {
    "text": "to use the language that you just implemented to solve the problem so in the formal methods Community you had to build your formal methods tool and then",
    "start": "850480",
    "end": "856480"
  },
  {
    "text": "use it to solve the problem whereas nowadays the formal methods tools already exist like your compilers",
    "start": "856480",
    "end": "861519"
  },
  {
    "text": "already exist and it's starting to be the case that libraries exist so you don't have to start your implementation",
    "start": "861519",
    "end": "866680"
  },
  {
    "text": "even from scratch every time you go so that increasing infrastructure is making a huge difference and then I would say that the",
    "start": "866680",
    "end": "873399"
  },
  {
    "text": "fourth contributing factor is that the complexity of the code that people are writing and trying to reason about has",
    "start": "873399",
    "end": "879320"
  },
  {
    "text": "gotten to the level where it's clear that we need to have these kinds of tools to be able to understand what",
    "start": "879320",
    "end": "884440"
  },
  {
    "text": "we're doing so the researchers at Amazon web services wrote a white paper describing their adoption of formal",
    "start": "884440",
    "end": "890000"
  },
  {
    "text": "methods-based tools to reason about their distributed systems implementations basically there was one developer there who was building this",
    "start": "890000",
    "end": "896720"
  },
  {
    "text": "distributed system he's like I can't I can't keep all the cases in my head right humans are good at common cases at",
    "start": "896720",
    "end": "903440"
  },
  {
    "text": "the usual cases but we're bad at the weird Corner cases and when you're building a system that's of the scale of",
    "start": "903440",
    "end": "908959"
  },
  {
    "text": "Amazon web services if you have a flaw that happens one in a million times that's like every minute you have one of",
    "start": "908959",
    "end": "914160"
  },
  {
    "text": "those flaws so when you're Building Systems of that complexity you have to have uh not just human intuition about",
    "start": "914160",
    "end": "920120"
  },
  {
    "text": "what's going on and formal methods tools are really good at driving you into all the weird Corner cases and making you",
    "start": "920120",
    "end": "925880"
  },
  {
    "text": "understand what happens in those Corner cases okay so systems are insecure formal",
    "start": "925880",
    "end": "933120"
  },
  {
    "text": "methods offers interesting possibilities and now is a good time to investigate whether they're good for anything so",
    "start": "933120",
    "end": "939040"
  },
  {
    "text": "that's the startus the basis of the hackam program which is a program that DARPA is currently running exploring this space the hypothesis behind the",
    "start": "939040",
    "end": "946440"
  },
  {
    "text": "program is that formal methods can allow us to write software for vehicles that are less susceptible to remote cyber",
    "start": "946440",
    "end": "952880"
  },
  {
    "text": "attacks so they're less hackable in the ways that uh Chris and Charlie and Stefan and Yoshi showed on cars the",
    "start": "952880",
    "end": "959040"
  },
  {
    "text": "threat model is the attackers don't get to have physical access they have to be able to break in remotely like Charlie",
    "start": "959040",
    "end": "965920"
  },
  {
    "text": "and Chris and Stefan and Yoshi did we're assuming that the hardware is correct we know that's a bad assumption but you",
    "start": "965920",
    "end": "971800"
  },
  {
    "text": "can't solve all problems at the same time and we're working on a number of different experimental platforms so two",
    "start": "971800",
    "end": "977160"
  },
  {
    "text": "of them are shown here one of them is the arducopter which is an open source quadcopter that you can buy from Amazon",
    "start": "977160",
    "end": "982600"
  },
  {
    "text": "that is uh all the source code is available all the researchers on the team have full access to the system the",
    "start": "982600",
    "end": "988480"
  },
  {
    "text": "other is a picture of a Boeing's unman little bird which is a helicopter that's big enough to take two pilots but can",
    "start": "988480",
    "end": "994199"
  },
  {
    "text": "fly fully autonomously that system has all sorts of Boeing uh proprietary restrictions it also has US government",
    "start": "994199",
    "end": "1000839"
  },
  {
    "text": "itar restrictions and so not all the researchers can actually see uh very much of the code on that system so the",
    "start": "1000839",
    "end": "1007240"
  },
  {
    "text": "workflow here is that the researchers work on the open source vehicle the quadcopter the Boeing researchers watch",
    "start": "1007240",
    "end": "1012720"
  },
  {
    "text": "what they're doing learn the tools that they're using and then apply those same tools and techniques to the Boeing helicopter",
    "start": "1012720",
    "end": "1019759"
  },
  {
    "text": "so we started out conducting a baseline security assessment to understand how secure were those two platforms before",
    "start": "1019759",
    "end": "1025199"
  },
  {
    "text": "the researchers did anything to them we to do that security assessment we hired a red team which is a group of people",
    "start": "1025199",
    "end": "1031240"
  },
  {
    "text": "whose expertise is breaking into systems and gave them six weeks of full access to the system so they got access to all",
    "start": "1031240",
    "end": "1037000"
  },
  {
    "text": "the source code uh they can look at the systems and uh ask whatever questions they wanted of the people who were",
    "start": "1037000",
    "end": "1042640"
  },
  {
    "text": "running them the not surprisingly the red team was able to take complete control over both of the systems",
    "start": "1042640",
    "end": "1049799"
  },
  {
    "text": "uh this video shows a little bit about that this is an AR Drone",
    "start": "1049799",
    "end": "1057519"
  },
  {
    "text": "the AR drone is controlled using standard Wi-Fi technology it acts as a Wi-Fi access point to which you can",
    "start": "1083799",
    "end": "1090720"
  },
  {
    "text": "connect with a phone tablet or PC running the ground station",
    "start": "1090720",
    "end": "1095919"
  },
  {
    "text": "application aircrack is a readily available software package for monitoring and injecting traffic onto",
    "start": "1095919",
    "end": "1102840"
  },
  {
    "text": "wireless networks we will use it to attack the AR drone from this laptop",
    "start": "1102840",
    "end": "1108039"
  },
  {
    "text": "first we identif the physical address of the Drone access point next we sent commands to De",
    "start": "1108039",
    "end": "1114720"
  },
  {
    "text": "authenticate all clients including the ground station the ground station now has no",
    "start": "1114720",
    "end": "1121200"
  },
  {
    "text": "control over the vehicle the attacker laptop has taken control of the vehicle",
    "start": "1121200",
    "end": "1126280"
  },
  {
    "text": "and the ground station is not able to reconnect finally we can send arbitrary",
    "start": "1126280",
    "end": "1132000"
  },
  {
    "text": "commands from the attacker laptop in this case we will simply cause the vehicle to land",
    "start": "1132000",
    "end": "1140158"
  },
  {
    "text": "even though this was a very straightforward attack is representative of some of the current threats to network cyber physical systems that we",
    "start": "1141520",
    "end": "1147559"
  },
  {
    "text": "will address in the hackin project right so those are the blue hat researchers they're not the ones whose",
    "start": "1147559",
    "end": "1153799"
  },
  {
    "text": "expertise is breaking into the system and yet you could sort of see from what they were doing that it wasn't all that hard to break in it's not all that",
    "start": "1153799",
    "end": "1160240"
  },
  {
    "text": "surprising that it wasn't hard to break in right the people who make the arducopter their major concern is making sure that somebody can always connect",
    "start": "1160240",
    "end": "1166520"
  },
  {
    "text": "right they're worried about you flying your drone in the park and losing your connectivity and then having nobody being able to connect to it while it's",
    "start": "1166520",
    "end": "1172720"
  },
  {
    "text": "flying over the park and possibly crashing into somebody so the security was just sort of missing so the",
    "start": "1172720",
    "end": "1178200"
  },
  {
    "text": "challenge is you know can we figure out how to add it so this chart shows what the",
    "start": "1178200",
    "end": "1183840"
  },
  {
    "text": "researchers did in the first 16 months of the program of the hackam program so time is kind of going across this way",
    "start": "1183840",
    "end": "1190200"
  },
  {
    "text": "and the people the groups at the top are who did what work so they started out with the quad capture sort of off",
    "start": "1190200",
    "end": "1195360"
  },
  {
    "text": "the-shelf from Amazon it had monolithic software stack there was no realtime operating system there was no security",
    "start": "1195360",
    "end": "1201320"
  },
  {
    "text": "so the first thing they did was refactor that software they replaced the under underlying Arduino chip with a a",
    "start": "1201320",
    "end": "1206840"
  },
  {
    "text": "processor that was a little bit more powerful then they added a free real realtime operating system they added a",
    "start": "1206840",
    "end": "1212520"
  },
  {
    "text": "hardware abstraction layer that meant so that the rest of the code didn't need to know if it was running on this stack or the original chip over here they",
    "start": "1212520",
    "end": "1219400"
  },
  {
    "text": "released that open source and they received an award for contributions to the aruc capter community as a result of",
    "start": "1219400",
    "end": "1225520"
  },
  {
    "text": "that they then took this stack and started to replace the pieces one at a time with high Assurance version of the",
    "start": "1225520",
    "end": "1230799"
  },
  {
    "text": "software that came along that came with proofs that what it was doing was was correct so they started replacing the",
    "start": "1230799",
    "end": "1236760"
  },
  {
    "text": "freear toss with e Chronos which is a real-time operating system that's being developed at nicka here in Australia",
    "start": "1236760",
    "end": "1242960"
  },
  {
    "text": "they started replacing the flight control portions of the quadcopter software with flight control code that",
    "start": "1242960",
    "end": "1248600"
  },
  {
    "text": "was generated from a high level domain specific language along with proofs that the generated C code was memory safe",
    "start": "1248600",
    "end": "1254600"
  },
  {
    "text": "they also uh generated um they used a domain specific Lang language called Tower to specify the various components",
    "start": "1254600",
    "end": "1261360"
  },
  {
    "text": "of the software and how what the various what the communication channels were between those pieces of software and",
    "start": "1261360",
    "end": "1267080"
  },
  {
    "text": "from that uh domain specific language both generated the code to connect the pieces together and generated a model of",
    "start": "1267080",
    "end": "1273320"
  },
  {
    "text": "the code that the Rockwell Collins team used to prove systemwide properties about the code running in the copter um",
    "start": "1273320",
    "end": "1279720"
  },
  {
    "text": "so this is this and that's this is the generated gluc code that's connecting the pieces together so by the end of the",
    "start": "1279720",
    "end": "1285240"
  },
  {
    "text": "first 16 months they had a version that was almost entirely but not completely High assurance and they gave that",
    "start": "1285240",
    "end": "1290320"
  },
  {
    "text": "version to the red team for analysis so the first thing to look at",
    "start": "1290320",
    "end": "1295760"
  },
  {
    "text": "in that the new quadcopter was well how much functionality does it have how does it compare to the original quadcopter",
    "start": "1295760",
    "end": "1301679"
  },
  {
    "text": "the answer has almost all but not quite all the functionality it has the stability control the flight um the",
    "start": "1301679",
    "end": "1306799"
  },
  {
    "text": "altitude hold the directional hold they added a denial of service attack so that the quadcopter would report if it was if",
    "start": "1306799",
    "end": "1312679"
  },
  {
    "text": "it was being jammed they got most of the GPS Waypoint navigation there was about 80% of it done by the time they had to",
    "start": "1312679",
    "end": "1318240"
  },
  {
    "text": "hand the opter over to the um to the red team in addition to the code they proved properties about the system they prove",
    "start": "1318240",
    "end": "1325159"
  },
  {
    "text": "that the system is memory safe which means there's no buffer overflows no buffer underflows no integer overflows",
    "start": "1325159",
    "end": "1330279"
  },
  {
    "text": "no integer underflows nothing like that in the system they proved that it ignored all malformed messages so if a",
    "start": "1330279",
    "end": "1336120"
  },
  {
    "text": "message comes from off the system if that message doesn't have the right grammar it will be rejected they proved",
    "start": "1336120",
    "end": "1341880"
  },
  {
    "text": "that if a message coming from off the system isn't uh properly authenticated it will be rejected and dropped and then",
    "start": "1341880",
    "end": "1347600"
  },
  {
    "text": "they proved that any message that was well formed and was authenticated and was received by the quadcopter would eventually be acted",
    "start": "1347600",
    "end": "1354120"
  },
  {
    "text": "upon the red team was given six weeks of full access to the system they got to see all of the code they got to",
    "start": "1354120",
    "end": "1359720"
  },
  {
    "text": "participate in all of the blue team discussions about the design of the system at the end of that six we period they were not able to hack into the",
    "start": "1359720",
    "end": "1366840"
  },
  {
    "text": "system my colleague at DARPA who was a penetration testing expert his assessment of this quadcopter that these",
    "start": "1366840",
    "end": "1373159"
  },
  {
    "text": "researchers built in 16 months was it's the most secure UAV on the entire planet",
    "start": "1373159",
    "end": "1378279"
  },
  {
    "text": "which if you think about what uavs do is kind of scary right it's all available open",
    "start": "1378279",
    "end": "1384320"
  },
  {
    "text": "source as well so that was at the end of the first phase of hackam they've now finished the second phase so what did",
    "start": "1384320",
    "end": "1390520"
  },
  {
    "text": "they do in the second phase well the first thing they did was they updated the architecture of the quadcopter so it had two processors instead of one",
    "start": "1390520",
    "end": "1396520"
  },
  {
    "text": "connected via canbus one of those processors plays the role of a flight control computer which has essentially the functionality that we just saw the",
    "start": "1396520",
    "end": "1403640"
  },
  {
    "text": "other computer plays the role of the mission computer which directs the copter to First go over here take that picture then go over there take that",
    "start": "1403640",
    "end": "1410039"
  },
  {
    "text": "picture and so on they made those changes so that the architecture of the Quad capter matched almost exactly the",
    "start": "1410039",
    "end": "1415960"
  },
  {
    "text": "architecture of boeings on man little bird uh the mission computer is configured to run4 nicta's uh High",
    "start": "1415960",
    "end": "1423440"
  },
  {
    "text": "Assurance separation kernel it was configured in such a way so that there were multiple partitions and the red",
    "start": "1423440",
    "end": "1429440"
  },
  {
    "text": "team was given a partition on that mission computer they were the red team was given root access in that partition",
    "start": "1429440",
    "end": "1435720"
  },
  {
    "text": "and they were allowed to put whatever code they wanted in that partition at the end of phase two there was a flight test where they flew the real",
    "start": "1435720",
    "end": "1442799"
  },
  {
    "text": "helicopter 18 months earlier than they were actually scheduled to do so the test pilot on the unman little bird",
    "start": "1442799",
    "end": "1448360"
  },
  {
    "text": "couldn't tell the difference which is exactly what you want right you don't want your high Assurance software causing the copter to fly differently",
    "start": "1448360",
    "end": "1455279"
  },
  {
    "text": "the red team was again not able to break out of that partition despite having full access to all the source code",
    "start": "1455279",
    "end": "1461360"
  },
  {
    "text": "knowing about the entire design process and having been given root access in that partition they couldn't break out",
    "start": "1461360",
    "end": "1466480"
  },
  {
    "text": "and they couldn't disrupt the operation of the quad the helicopter in any way so really very exciting results at DARPA",
    "start": "1466480",
    "end": "1473080"
  },
  {
    "text": "the reaction at the end of the first 18 months when the results were on just on the quadcopter they were like yeah yeah it's a toy but when the results came",
    "start": "1473080",
    "end": "1480200"
  },
  {
    "text": "back at the end of the second phase on a real Boeing helicopter they were very interested so one hope is that that will",
    "start": "1480200",
    "end": "1487159"
  },
  {
    "text": "start to create a market for software that's of that quality if if customers who have high Assurance demands um needs",
    "start": "1487159",
    "end": "1494640"
  },
  {
    "text": "can know that they can actually purchase this they might start asking vendors to actually provide software at this quality",
    "start": "1494640",
    "end": "1500679"
  },
  {
    "text": "level okay so I've been telling you about formal methods as if it were secret sauce or you know magic wand so",
    "start": "1500679",
    "end": "1505799"
  },
  {
    "text": "what actually is formal methods so I went and looked online to see if I could get a good definition the best one I",
    "start": "1505799",
    "end": "1511600"
  },
  {
    "text": "could come up with was this one which is formal methods are best described as the application of a fairly broad variety of theoretical computer science",
    "start": "1511600",
    "end": "1517600"
  },
  {
    "text": "fundamentals to problems in software and Hardware specification and verification so yeah it doesn't really say",
    "start": "1517600",
    "end": "1525200"
  },
  {
    "text": "anything it's kind of one of these things where you know where you see it my definition of a formal methods-based",
    "start": "1525200",
    "end": "1530559"
  },
  {
    "text": "tool is that it's based on math that it's machine checkable so it's not just you the person who reads it and says",
    "start": "1530559",
    "end": "1536960"
  },
  {
    "text": "yeah that looks good to me but there's actually some computer that's checking to make sure that all your steps were completed properly it's capable of",
    "start": "1536960",
    "end": "1544000"
  },
  {
    "text": "proving properties of either code or models of code or both um and it's",
    "start": "1544000",
    "end": "1549080"
  },
  {
    "text": "really important that you read the fine print right formal methods make assumptions and they provide guarantees",
    "start": "1549080",
    "end": "1554720"
  },
  {
    "text": "the assumptions might be too strong for your application and the gu es might be too weak so they're only promising",
    "start": "1554720",
    "end": "1561240"
  },
  {
    "text": "what's in the fine print so there's a whole range of different kinds of formal methods based",
    "start": "1561240",
    "end": "1566520"
  },
  {
    "text": "techniques so this graph is just notional but it kind of explores the space so the horizontal access ranges",
    "start": "1566520",
    "end": "1572399"
  },
  {
    "text": "from techniques over on this side that are fully automatic and that scale to as much software as we know how to write",
    "start": "1572399",
    "end": "1578840"
  },
  {
    "text": "techniques on this side on the other hand require PhD years to to build to",
    "start": "1578840",
    "end": "1584880"
  },
  {
    "text": "use and are available can be processing codes somewhere between 10,000 and maybe",
    "start": "1584880",
    "end": "1590039"
  },
  {
    "text": "80 100,000 lines of code so much much smaller the vertical axis is how strong",
    "start": "1590039",
    "end": "1595440"
  },
  {
    "text": "are the guarantees that you did that you get at the bottom you just get type safety right a type Checker a sound type",
    "start": "1595440",
    "end": "1601440"
  },
  {
    "text": "Checker is a form of formal methods it's proving properties about your code at the top you have full functional",
    "start": "1601440",
    "end": "1606880"
  },
  {
    "text": "correctness which is the gold standard it means your code does what it's supposed to do and doesn't do anything",
    "start": "1606880",
    "end": "1612120"
  },
  {
    "text": "else and in the middle you have sort of intermediate levels things like no runtime errors so there's for methods",
    "start": "1612120",
    "end": "1618640"
  },
  {
    "text": "based techniques that live kind of oops uh oh there we go that uh fill out this",
    "start": "1618640",
    "end": "1624799"
  },
  {
    "text": "space so the ones at the bottom are type systems as you might have guessed then you have things like symbolic execution",
    "start": "1624799",
    "end": "1630679"
  },
  {
    "text": "which will execute a program in terms of symbols instead of numbers to try to drive the code down a whole bunch of different paths then you have model",
    "start": "1630679",
    "end": "1637399"
  },
  {
    "text": "Checkers that build a model of the code or a model of the code and try to find",
    "start": "1637399",
    "end": "1642440"
  },
  {
    "text": "take a property and try to find uh a counter example you have sound static analyzers which are like types of",
    "start": "1642440",
    "end": "1648159"
  },
  {
    "text": "systems on steroids they've been used a lot in France to prove Aeronautics um Aviation software and airbuses correct",
    "start": "1648159",
    "end": "1655360"
  },
  {
    "text": "then you have verified runtime monitors where the code that's running who knows what that code is is probably written by",
    "start": "1655360",
    "end": "1660880"
  },
  {
    "text": "a bad guy but the monitor itself is verified and guarantees that that bad guys code isn't going to be able to do",
    "start": "1660880",
    "end": "1666480"
  },
  {
    "text": "anything bad and then you have automatic theor provs which use those sad and smt solvers to good effect and at the very",
    "start": "1666480",
    "end": "1673000"
  },
  {
    "text": "very top the highest level of effort and the strongest payoff is the interactive the improvers and that's what nicta used",
    "start": "1673000",
    "end": "1679720"
  },
  {
    "text": "to prove the4 uh microc krel functionally",
    "start": "1679720",
    "end": "1684559"
  },
  {
    "text": "correct right okay so that's kind of an overview of what formal methods are now if you step back and think like okay",
    "start": "1685000",
    "end": "1691480"
  },
  {
    "text": "obviously I can't formally verify billions of lines of code that exist out in the world if I get to pick like what",
    "start": "1691480",
    "end": "1698200"
  },
  {
    "text": "are the most important pieces of software that I really want to verify the things that come to mind are things",
    "start": "1698200",
    "end": "1703320"
  },
  {
    "text": "like separation kernels hypervisors real-time operating systems compilers file systems web browser sandboxes",
    "start": "1703320",
    "end": "1710120"
  },
  {
    "text": "crypto algorithms and garbage collectors part of like the infrastructure that all the rest of the software really really",
    "start": "1710120",
    "end": "1715840"
  },
  {
    "text": "depends on it turns out there are already examples in all of these categories that have been proven to be",
    "start": "1715840",
    "end": "1721480"
  },
  {
    "text": "fully functionally correct some of them are more feature complete than others but there's already proofs of Concepts",
    "start": "1721480",
    "end": "1726559"
  },
  {
    "text": "in all of these areas so I'm just going to dive into two of them the first of them I've talked about already quite a",
    "start": "1726559",
    "end": "1731640"
  },
  {
    "text": "bit the4 microc kernel so what is a microc kernel it's the core core part of an operating system the part that abs",
    "start": "1731640",
    "end": "1738080"
  },
  {
    "text": "absolutely has to run in privileged mode anything that doesn't have to run in privileged mode gets kicked out to user space so it's the essence of an",
    "start": "1738080",
    "end": "1744399"
  },
  {
    "text": "operating system Nia implemented and proved uh the se4 microc kernel correct",
    "start": "1744399",
    "end": "1750159"
  },
  {
    "text": "in Isabelle Hall the microc kernel code itself was written in C about 10,000 lines of C code the proof in Isabelle",
    "start": "1750159",
    "end": "1757279"
  },
  {
    "text": "Hall was 480,000 lines of code so quite an overhead there it took them 13 person",
    "start": "1757279",
    "end": "1764120"
  },
  {
    "text": "years to build they estimate that if they did it again it would take them eight how fast is it well their one-way",
    "start": "1764120",
    "end": "1770279"
  },
  {
    "text": "IPC fast path takes 227 Cycles whereas their uh the unverified competitor is",
    "start": "1770279",
    "end": "1775600"
  },
  {
    "text": "about 26 Cycles so they're a little bit slower the proofs that they offered include Access Control enforcement so uh",
    "start": "1775600",
    "end": "1783120"
  },
  {
    "text": "processes can only access the things they've been configured to be able to access in a way that was uh machine",
    "start": "1783120",
    "end": "1788320"
  },
  {
    "text": "checked they Pro that if you have if you set up partitions the code running in those partitions cannot interfere with",
    "start": "1788320",
    "end": "1794120"
  },
  {
    "text": "each other in either memory or time they prove the compilation of that c code down to Binary was correct so that the",
    "start": "1794120",
    "end": "1800919"
  },
  {
    "text": "uh assembly code would correctly implemented the C code and they proved that IPC fast path is correct this graph",
    "start": "1800919",
    "end": "1807320"
  },
  {
    "text": "shows the call graph of the seo4 microc kernel so each dot here is a function",
    "start": "1807320",
    "end": "1813000"
  },
  {
    "text": "and the arrows are calls between them and the fact that this is really very dense is part of the reason why the",
    "start": "1813000",
    "end": "1818519"
  },
  {
    "text": "overhead in the proof is so high it's 480,000 lines of code because you can't really modularize the proof at all also",
    "start": "1818519",
    "end": "1825600"
  },
  {
    "text": "the proof that they the the statements the specific of what they were trying to prove is very complicated and takes a",
    "start": "1825600",
    "end": "1831240"
  },
  {
    "text": "lot of formal methods lines of code to to write down and it's all now available open",
    "start": "1831240",
    "end": "1837279"
  },
  {
    "text": "source the other uh verified artifact that I want to talk about in a little bit of detail is the comert verifying C",
    "start": "1837279",
    "end": "1842600"
  },
  {
    "text": "compiler that came out of inria and France it compiles a subset of the C language but quite a large subset in",
    "start": "1842600",
    "end": "1848360"
  },
  {
    "text": "fact it's the subset that's used by the aviation industry it was implemented and proven correct in Cox so another",
    "start": "1848360",
    "end": "1853640"
  },
  {
    "text": "interactive theor improver zavier lawa who did this proof did both the the actual implementation and the proofing",
    "start": "1853640",
    "end": "1859919"
  },
  {
    "text": "COA and then extracted the compiler from the COA system it took zavier three person years which sounds really small",
    "start": "1859919",
    "end": "1866960"
  },
  {
    "text": "um except Xavier is kind of a God among programmers so you know zavier years and normal person years don't really",
    "start": "1866960",
    "end": "1872679"
  },
  {
    "text": "correspond but still three person years the compiler is two times faster than",
    "start": "1872679",
    "end": "1878120"
  },
  {
    "text": "GCC with no optimization it's 7% slower with level one and 20 sorry 12% slower",
    "start": "1878120",
    "end": "1884200"
  },
  {
    "text": "with level two and they're in the process of getting it certified so it will actually be able to be the compiler",
    "start": "1884200",
    "end": "1889480"
  },
  {
    "text": "that is used in the Airbus uh software stack and the the reason why the comert",
    "start": "1889480",
    "end": "1895399"
  },
  {
    "text": "verification took less effort than the se4 verification kind of you can read off from this graph at the top which is",
    "start": "1895399",
    "end": "1901200"
  },
  {
    "text": "showing the various passes of the compiler right the way a compiler is written is you start out with the representation of your source code and",
    "start": "1901200",
    "end": "1907720"
  },
  {
    "text": "then you translate it into a representation of a slightly L lower level language and then you do the same thing over and over again until you end",
    "start": "1907720",
    "end": "1914399"
  },
  {
    "text": "up with a representation of your Assembly Language code so that's a very modular architecture right you can prove",
    "start": "1914399",
    "end": "1920200"
  },
  {
    "text": "that each one of those dotted lines from Red Box to Red Box is correct in isolation also the specification of what",
    "start": "1920200",
    "end": "1926360"
  },
  {
    "text": "it means for a compiler to be correct turns out to be really simple it's just that the meaning of the assembly code is contained in the meaning of the source",
    "start": "1926360",
    "end": "1932639"
  },
  {
    "text": "code so that proof just goes through each of those stages so the specification itself can be written relatively",
    "start": "1932639",
    "end": "1940159"
  },
  {
    "text": "compactly okay so I've just been talking about how formal methods can be used to produce really super high quality",
    "start": "1942200",
    "end": "1948200"
  },
  {
    "text": "software that's guaranteed not to have those kinds of implementation bugs that Stefan and Yoshi and Chris and Charlie",
    "start": "1948200",
    "end": "1953399"
  },
  {
    "text": "used to break into all those cars so why isn't everybody using formal methods",
    "start": "1953399",
    "end": "1958440"
  },
  {
    "text": "well one of the problems is there just aren't that many people who know how to use formal methods who've been trained in using them it's been an esoteric",
    "start": "1958440",
    "end": "1964919"
  },
  {
    "text": "research topic for a long time not something that is practically useful so this data comes from uh a paper that was",
    "start": "1964919",
    "end": "1971159"
  },
  {
    "text": "published in ACM computer surveys in October 2009 estimating how many people in each of these different regions know",
    "start": "1971159",
    "end": "1976720"
  },
  {
    "text": "anything about formal methods and in 2006 the total was less than 5,000 people obviously this graph is",
    "start": "1976720",
    "end": "1983679"
  },
  {
    "text": "dated in that Australia is not prominently featured here turns out Australia is one of the you know World",
    "start": "1983679",
    "end": "1988840"
  },
  {
    "text": "lead it's probably the world's leading region you know nickon and inria together are at the absolute Forefront",
    "start": "1988840",
    "end": "1994159"
  },
  {
    "text": "of this field okay so another reason why formal methods are not more used is the",
    "start": "1994159",
    "end": "2000639"
  },
  {
    "text": "required level of effort right I talked about this4 requiring 480,000 lines of proof um that turns out to be somewhat",
    "start": "2000639",
    "end": "2006919"
  },
  {
    "text": "of an outlier the other things listed on this chart were the other systems that have been proven to be fully",
    "start": "2006919",
    "end": "2012080"
  },
  {
    "text": "functionally correct and none of them have the same level of overhead as the4 microc kernel um but they still are",
    "start": "2012080",
    "end": "2017480"
  },
  {
    "text": "non-trivial so I don't think anytime soon we're going to see everything to be fully functionally verified I don't",
    "start": "2017480",
    "end": "2022600"
  },
  {
    "text": "think we'll actually ever see everything fully functionally verified I don't think that's a useful goal but I think that there are certain pieces of",
    "start": "2022600",
    "end": "2029120"
  },
  {
    "text": "software that underly critical infrastructure where this level of effort does make sense and if you count",
    "start": "2029120",
    "end": "2035080"
  },
  {
    "text": "the total cost of the flaws in those softwares that lead to vulnerabilities and exploits and exfiltrating",
    "start": "2035080",
    "end": "2041000"
  },
  {
    "text": "information then this level of investment starts to seem to actually be a good deal rather than prohibitively",
    "start": "2041000",
    "end": "2047399"
  },
  {
    "text": "expensive another objection is the performance consequences that how long does it take to uh uh that does the code",
    "start": "2047399",
    "end": "2055520"
  },
  {
    "text": "itself run slower so we saw that se4 was a little bit slower uh and the the comster compiler was a little bit slower",
    "start": "2055520",
    "end": "2062960"
  },
  {
    "text": "it turns out some of the times the formal methods versions can actually be faster sometimes s you know you prove an",
    "start": "2062960",
    "end": "2069520"
  },
  {
    "text": "invariant and because you've proved that invariant you know that certain Dynamic checks are not necessary and can be",
    "start": "2069520",
    "end": "2074800"
  },
  {
    "text": "eliminated but of course that's not the common common case usually it's slower it's worth thinking a little bit about",
    "start": "2074800",
    "end": "2080520"
  },
  {
    "text": "why it's slower though it's often the case that the fast code is there because",
    "start": "2080520",
    "end": "2085800"
  },
  {
    "text": "somebody took the time to look and figure out oh there's this special case and I can make the code run faster by",
    "start": "2085800",
    "end": "2090839"
  },
  {
    "text": "putting in special code for this special case right when you start to do the verification side you're like ah special",
    "start": "2090839",
    "end": "2096638"
  },
  {
    "text": "case more proof more proof more proof right each of those special cases increases the proof obligation by quite",
    "start": "2096639",
    "end": "2102200"
  },
  {
    "text": "a lot so what happens on the formal method side is the researchers do those special cases until they get the",
    "start": "2102200",
    "end": "2108079"
  },
  {
    "text": "performance to be good enough for their purposes and once the performance is good enough they stop and often that",
    "start": "2108079",
    "end": "2113520"
  },
  {
    "text": "good enough performance is slightly slower than the available competition but there's no intrinsic reason why the",
    "start": "2113520",
    "end": "2118800"
  },
  {
    "text": "formal methods researchers couldn't keep going and prove that the full system is correct unless of course the full system",
    "start": "2118800",
    "end": "2125000"
  },
  {
    "text": "isn't correct in which case you're not actually comparing apples to right your incorrect implementation might be faster",
    "start": "2125000",
    "end": "2130160"
  },
  {
    "text": "than my correct implementation but we're not doing the same thing another concern is time to market",
    "start": "2130160",
    "end": "2138119"
  },
  {
    "text": "right in certain kinds of Industries the F you have to get your code out as fast as possible and if you have to not just",
    "start": "2138119",
    "end": "2143320"
  },
  {
    "text": "get the code out but get the proof out at the same time that's obviously going to delay you your competitor is going to",
    "start": "2143320",
    "end": "2148480"
  },
  {
    "text": "uh get there faster than you are and you're going to be out of business right that's a really valid concern for many areas and those areas are probably ones",
    "start": "2148480",
    "end": "2155119"
  },
  {
    "text": "where the full functional correctness is not so important but even in this cases formal methods has something to say",
    "start": "2155119",
    "end": "2161680"
  },
  {
    "text": "right I showed you the graph of the whole Continuum of different kinds of formal methods based techniques and one",
    "start": "2161680",
    "end": "2166720"
  },
  {
    "text": "thing that Facebook is doing right now is exploring some of that sound static analysis so a point that's lower on the",
    "start": "2166720",
    "end": "2171839"
  },
  {
    "text": "Spectrum in terms of level of effort required uh and lower on the Spectrum in terms of the guarantees that are",
    "start": "2171839",
    "end": "2177720"
  },
  {
    "text": "produced but can scale to the full code base for for um Facebook so in fact Facebook bought a small company started",
    "start": "2177720",
    "end": "2184440"
  },
  {
    "text": "by formal methods researchers he used separation logic to reason about codes those researchers then having discovered",
    "start": "2184440",
    "end": "2190440"
  },
  {
    "text": "they now work for Facebook set about uh retooling their infrastructure to work",
    "start": "2190440",
    "end": "2195599"
  },
  {
    "text": "on the Facebook uh codebase for IOS and Android applications and they integrated",
    "start": "2195599",
    "end": "2201200"
  },
  {
    "text": "their tool into the development cycle at Facebook so that now if you're a Facebook developer working on iOS or",
    "start": "2201200",
    "end": "2206599"
  },
  {
    "text": "Android when you check in a change this static analysis tool is run over your program and you are given the feedback",
    "start": "2206599",
    "end": "2212599"
  },
  {
    "text": "of that tool within 10 minutes and if the tool is unhappy then you have to fix your code before you get to really check",
    "start": "2212599",
    "end": "2218079"
  },
  {
    "text": "it in they're also able to run this tool overnight over the entire code base it takes about 4 hours to run over the",
    "start": "2218079",
    "end": "2224359"
  },
  {
    "text": "entire code base so they're using formal methods techniques in an automated way that integrates with the development",
    "start": "2224359",
    "end": "2230160"
  },
  {
    "text": "cycle but the guarantees that they get are weaker they're proving only the absence of n pointer exceptions and",
    "start": "2230160",
    "end": "2236119"
  },
  {
    "text": "resource leaks another problem with formal methods based tools that I alluded to",
    "start": "2236119",
    "end": "2241720"
  },
  {
    "text": "earlier is the problem of a fine print right all proofs come with assumptions if you violate the assumptions all bet",
    "start": "2241720",
    "end": "2247640"
  },
  {
    "text": "are off so John rer is a programming language researcher at the University of Utah he has a fuzz tester essentially",
    "start": "2247640",
    "end": "2253760"
  },
  {
    "text": "for C compilers and he published a paper in 2012 2011 at pldi showing basically",
    "start": "2253760",
    "end": "2259720"
  },
  {
    "text": "that every C compiler that he could find on the planet had bugs in it including comcert like wait wait wait I just told",
    "start": "2259720",
    "end": "2265839"
  },
  {
    "text": "you right the comcert have been verified to be fully functionally correct so what's up with that well there were two",
    "start": "2265839",
    "end": "2270920"
  },
  {
    "text": "different sources of bugs and comcert one was the unverified front end read parser right so they didn't verify the",
    "start": "2270920",
    "end": "2277920"
  },
  {
    "text": "parser they started with the abstract syntax tree they've actually subsequently fixed that they've now verified the parser so uh there's now a",
    "start": "2277920",
    "end": "2284560"
  },
  {
    "text": "proof that the fun the parser and comert is fully functionally correct as well the other bug was in the hardware model",
    "start": "2284560",
    "end": "2291240"
  },
  {
    "text": "right the compiler has to uh use the underlying Hardware has to make assumptions about that hardware and so",
    "start": "2291240",
    "end": "2297240"
  },
  {
    "text": "in the proof you have to model that Hardware they modeled the hardware turned out in a way that was slightly wrong and the in a way that John rer and",
    "start": "2297240",
    "end": "2304079"
  },
  {
    "text": "his team found that vulnerability so the BL prints important",
    "start": "2304079",
    "end": "2309280"
  },
  {
    "text": "but you know the Striking thing that in reported in that paper was that they didn't find any other bugs there were no",
    "start": "2309280",
    "end": "2314960"
  },
  {
    "text": "bugs in the middle end of the compiler the part that was covered by the fine print of the theorem and it was not for",
    "start": "2314960",
    "end": "2320440"
  },
  {
    "text": "lack of trying John and his team spent more than six CPU years trying to break that compiler without 6cs it was the",
    "start": "2320440",
    "end": "2327319"
  },
  {
    "text": "only compiler that they tested that had that characteristic okay so taking stock I've",
    "start": "2327319",
    "end": "2335640"
  },
  {
    "text": "been talking about using formal methods to eliminate implementation bugs that can be converted into exploits um which",
    "start": "2335640",
    "end": "2342119"
  },
  {
    "text": "is one of the sweet spots for formal methods but as we saw earlier security is a really hard problem that has lots",
    "start": "2342119",
    "end": "2348240"
  },
  {
    "text": "and lots of different things you have to get right and formal methods can help with some of those other areas as well",
    "start": "2348240",
    "end": "2353839"
  },
  {
    "text": "things like faulty design or I talked about the researchers at Amazon web services who were using TLA to model",
    "start": "2353839",
    "end": "2359520"
  },
  {
    "text": "check their distributed system design and find flaws right that's they weren't checking their code they were checking",
    "start": "2359520",
    "end": "2365040"
  },
  {
    "text": "their design the same way model checking and other tools can be used to find bugs and",
    "start": "2365040",
    "end": "2370400"
  },
  {
    "text": "specifications the Rockwell Collins team did this as part of the hack's effort on the on the air team and Nick to use",
    "start": "2370400",
    "end": "2375880"
  },
  {
    "text": "formal methods to eliminate side Channel attacks from their sc4 microcal implementation and also you can use",
    "start": "2375880",
    "end": "2381480"
  },
  {
    "text": "formal methods based tools to analyze third party software and see if it has certain kinds of",
    "start": "2381480",
    "end": "2386839"
  },
  {
    "text": "vulnerabilities so formal methods can help with not just that implementation bug not to say that there aren't still",
    "start": "2386839",
    "end": "2392280"
  },
  {
    "text": "you know formal methods aren't really going to help with users or fa uh yeah with users and passwords and things like that",
    "start": "2392280",
    "end": "2398560"
  },
  {
    "text": "okay so what are some of the lessons learned about uh the formal methods being applied to real systems so one of",
    "start": "2398560",
    "end": "2405599"
  },
  {
    "text": "the lessons that the formal methods researchers came up with is you really really really don't want to verify",
    "start": "2405599",
    "end": "2410720"
  },
  {
    "text": "existing artifacts you really want to verify artifacts that you write at the time you're writing the proofs for a",
    "start": "2410720",
    "end": "2417480"
  },
  {
    "text": "long time formal methods researchers were trying to verify code that somebody else wrote and that turned out to be",
    "start": "2417480",
    "end": "2422720"
  },
  {
    "text": "just much much harder than verifying as you went along now why might that be I think there there're two reasons one is",
    "start": "2422720",
    "end": "2429079"
  },
  {
    "text": "that when you're writing the code you know what all those invariants are that you need to capture in the formal",
    "start": "2429079",
    "end": "2434520"
  },
  {
    "text": "methods tools and so you don't have to sort of uh architect architect uh yeah",
    "start": "2434520",
    "end": "2440880"
  },
  {
    "text": "what is Indiana Jones he's a wow my word just disappeared archaeologist right you don't have to use archaeology to",
    "start": "2440880",
    "end": "2447800"
  },
  {
    "text": "discover the invariance you can you know them yourself because you're building it so that's one and the other is as you're",
    "start": "2447800",
    "end": "2453480"
  },
  {
    "text": "coding a system there often choices right you could do it this way or you could do it that way way and if you're doing the proof at the same time it well",
    "start": "2453480",
    "end": "2460400"
  },
  {
    "text": "could be that this way is easy for the proof and that way is bad and if you're doing them both you choose the way",
    "start": "2460400",
    "end": "2465560"
  },
  {
    "text": "that's easy for the proof instead of the way that's bad another uh trick that they used was",
    "start": "2465560",
    "end": "2471319"
  },
  {
    "text": "don't try to start verifying the system until you're pretty sure you've eliminated all the low hanging bugs right you don't want to start a long",
    "start": "2471319",
    "end": "2477280"
  },
  {
    "text": "proof to discover oh there's a really stupid bug that my you know my static analyzer would have fixed so run this",
    "start": "2477280",
    "end": "2483839"
  },
  {
    "text": "the normal debugging process first it's also you don't really need to verify all the code you can often partition a",
    "start": "2483839",
    "end": "2490119"
  },
  {
    "text": "system into the code that really really matters for security and code that doesn't matter for security and you",
    "start": "2490119",
    "end": "2495760"
  },
  {
    "text": "don't want to spend your time fussing with the code that doesn't matter for security so in the red team on the uh",
    "start": "2495760",
    "end": "2501400"
  },
  {
    "text": "the helicopter for example right the4 team was able to put give the red team",
    "start": "2501400",
    "end": "2507240"
  },
  {
    "text": "complete control over whatever code they wanted to put there right that's like the insecure code in the system the the",
    "start": "2507240",
    "end": "2513560"
  },
  {
    "text": "seo4 researchers by proving the se4 microc kernel was correct made it so the rest of the code could do whatever you",
    "start": "2513560",
    "end": "2518839"
  },
  {
    "text": "wanted and it wasn't going to disrupt the overall operation of the helicopter so you don't have to verify all the code",
    "start": "2518839",
    "end": "2524000"
  },
  {
    "text": "just the code that is security relevant in this case many formal methods researchers also instead of starting with raw C code",
    "start": "2524000",
    "end": "2531280"
  },
  {
    "text": "or uh raw general purpose code they instead use dsl's much higher level of",
    "start": "2531280",
    "end": "2536520"
  },
  {
    "text": "abstraction and they generate the lowle code along with the proof that the DSL code is correct so that's what the",
    "start": "2536520",
    "end": "2541559"
  },
  {
    "text": "researchers were using in the Control software where they had a DSL for writing C code that was guaranteed to be Memory safe",
    "start": "2541559",
    "end": "2548440"
  },
  {
    "text": "it turns out automation is really important so I talked earlier about the SAT solvers smt solvers or like sat",
    "start": "2548440",
    "end": "2553599"
  },
  {
    "text": "solvers except they come with equational theories uh interactive theor improvers come with tactic libraries that allow",
    "start": "2553599",
    "end": "2558920"
  },
  {
    "text": "you to script the theor improver in replayable ways so all of those things increase the level of automation they",
    "start": "2558920",
    "end": "2564319"
  },
  {
    "text": "make it so the computer can do more of the work and the PHD researchers can do less hopefully at some point not have to",
    "start": "2564319",
    "end": "2569839"
  },
  {
    "text": "have a PhD to do that there are of course as you probably",
    "start": "2569839",
    "end": "2574920"
  },
  {
    "text": "can imagine many many many research challenges I'm not at all here saying this is a solved problem we know how to do this I think the state we're in is",
    "start": "2574920",
    "end": "2581800"
  },
  {
    "text": "that we're just starting to have a glimmer that it might be possible to use these techniques for safety critical",
    "start": "2581800",
    "end": "2587040"
  },
  {
    "text": "security critical software there are a lot of research challenges to be addressed before this becomes a standard",
    "start": "2587040",
    "end": "2592720"
  },
  {
    "text": "practice at all one of the key ones is producing and validating models of the real world like we saw in the comcert",
    "start": "2592720",
    "end": "2599480"
  },
  {
    "text": "example the model of the underlying Hardware was not quite right and that not quite rightness allowed John rer to",
    "start": "2599480",
    "end": "2605119"
  },
  {
    "text": "S sleep in and sleep in Snick sneak in and find a vulnerability um so the kinds of things",
    "start": "2605119",
    "end": "2611480"
  },
  {
    "text": "that we need to be able to model are things like the x86 architecture which is of course you know really simple the",
    "start": "2611480",
    "end": "2617400"
  },
  {
    "text": "uh the llvm uh compiler infrastructure Linux browser apis posix apis we need to have",
    "start": "2617400",
    "end": "2625079"
  },
  {
    "text": "really good detailed accurate correct models of these systems for these formal methods efforts to be useful the good",
    "start": "2625079",
    "end": "2630720"
  },
  {
    "text": "news is that researchers are starting to bound together and create kind of standard uh interfaces for these things",
    "start": "2630720",
    "end": "2636240"
  },
  {
    "text": "so that people can it's like the libraries right you can just start with one instead of having to build it for",
    "start": "2636240",
    "end": "2641359"
  },
  {
    "text": "yourself there's a lot of work on increasing the level of automation um there's also work on integrating into",
    "start": "2641359",
    "end": "2646520"
  },
  {
    "text": "the normal development process like we saw with a Facebook infer project of course another big challenge is getting",
    "start": "2646520",
    "end": "2651920"
  },
  {
    "text": "Buy in from people right formal methods is really really scary word to most people so the researchers at Amazon web",
    "start": "2651920",
    "end": "2657720"
  },
  {
    "text": "services for example there was one researcher who started this process he was worried about his code he went and learned how to use TLA and how to use",
    "start": "2657720",
    "end": "2664160"
  },
  {
    "text": "the model Checker he found a ton of problems with his code to the point where he was convinced or his design rather that there was a really good idea",
    "start": "2664160",
    "end": "2670800"
  },
  {
    "text": "so he went and found a buddy and had the Buddy do the same experience the same thing the the buddy had the same experience they got together and like",
    "start": "2670800",
    "end": "2677319"
  },
  {
    "text": "okay this is really important for us how are we going to get this to be more widely used at Amazon web services so",
    "start": "2677319",
    "end": "2684000"
  },
  {
    "text": "they offered a tutorial on using tlaa using model checking to find bugs but they didn't call it formal methods they",
    "start": "2684000",
    "end": "2689319"
  },
  {
    "text": "called it exhaustively testable pseudo code because they felt like if they put formal methods in the title no one would",
    "start": "2689319",
    "end": "2694680"
  },
  {
    "text": "come and no one would listen and no one would learn to use their tool and now they have a group of I think 12 13",
    "start": "2694680",
    "end": "2700200"
  },
  {
    "text": "people they in fact they've started a whole group of formal Methods at Amazon uh largely out of this this",
    "start": "2700200",
    "end": "2705400"
  },
  {
    "text": "work and then you know the elephant in the room or maybe the two elephants in the room as far as formal methods has",
    "start": "2705400",
    "end": "2711240"
  },
  {
    "text": "concerned is concurrency right much of formal methods-based work is focused on single-threaded uh systems where you",
    "start": "2711240",
    "end": "2718200"
  },
  {
    "text": "don't have to worry about concurrency or you have to worry about it only at the very highest level with very minimal",
    "start": "2718200",
    "end": "2723240"
  },
  {
    "text": "levels of inner leaving so when you start to get lots of interner leaving going on cases explode in the same way",
    "start": "2723240",
    "end": "2728599"
  },
  {
    "text": "that it's impossible for people to reason about it's pretty much impossible for formal methods based tools to reason about now as",
    "start": "2728599",
    "end": "2734599"
  },
  {
    "text": "well right okay so I would say you know I have this dream that eventually we'll",
    "start": "2734599",
    "end": "2740119"
  },
  {
    "text": "get to a point where you have Exquisite pieces of software for those really security critical places that have been",
    "start": "2740119",
    "end": "2746119"
  },
  {
    "text": "verified to be fully functionally correct and we know how to take those Exquisite artifacts and be able to put them together to build systems where you",
    "start": "2746119",
    "end": "2753040"
  },
  {
    "text": "get systemwide security properties leveraged out of the security properties of those pieces and where bugs are no",
    "start": "2753040",
    "end": "2760079"
  },
  {
    "text": "longer sort of a rampant source of exploitable vulnerabilities by the black hat community and instead black hat",
    "start": "2760079",
    "end": "2766359"
  },
  {
    "text": "researchers are reduced to attacking systems kind of one at a time the oldfashioned way so you know perfect",
    "start": "2766359",
    "end": "2771599"
  },
  {
    "text": "security is not possible you'll always have attack vectors but you want your attackers to have to work really really",
    "start": "2771599",
    "end": "2776720"
  },
  {
    "text": "hard in order to break into a system thank you very much for your attention I have time for a few",
    "start": "2776720",
    "end": "2782760"
  },
  {
    "text": "questions I think [Applause]",
    "start": "2782760",
    "end": "2791459"
  }
]