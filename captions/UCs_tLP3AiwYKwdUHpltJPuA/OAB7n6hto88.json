[
  {
    "text": "[Music] I'm going to go through some technology which I've been working on for the last",
    "start": "6990",
    "end": "13719"
  },
  {
    "text": "three plus years um it's some ideas which um it's really history repeating",
    "start": "13719",
    "end": "20840"
  },
  {
    "text": "itself I started programming back in the' 70s um assembler and then got into",
    "start": "20840",
    "end": "27840"
  },
  {
    "text": "C C++ uh the 80s obviously I was at school at the time um and in those days we had",
    "start": "27840",
    "end": "38079"
  },
  {
    "text": "machines with very very little memory um and every little tiny bit of memory you",
    "start": "38079",
    "end": "43360"
  },
  {
    "text": "had to use and you had to use it very very efficiently anybody remember the BBC micros Sinclair z x 80s 81s all those",
    "start": "43360",
    "end": "51920"
  },
  {
    "text": "sort of things uh they had ridiculously small well in today's standards ridiculously small amounts of memory so",
    "start": "51920",
    "end": "57960"
  },
  {
    "text": "you literally had to use for example the the screen buffers um you'd have double",
    "start": "57960",
    "end": "63320"
  },
  {
    "text": "buffering and and if you needed to do some computation you'd often use the screen buffers for these things and um",
    "start": "63320",
    "end": "71880"
  },
  {
    "text": "if you wanted to to to run a game or you wanted to have something uh do some computation you had",
    "start": "71880",
    "end": "79000"
  },
  {
    "text": "to use literally everything so what I did was um working in financial services",
    "start": "79000",
    "end": "85520"
  },
  {
    "text": "started to go and see a lot of clients and these clients were putting um hundreds of millions of messages and in",
    "start": "85520",
    "end": "91320"
  },
  {
    "text": "many cases billions of messages and they're busy using Hadoop and they're",
    "start": "91320",
    "end": "96600"
  },
  {
    "text": "spending a lot of money um to do this they're spending a huge amount of um resources um not just people but",
    "start": "96600",
    "end": "103479"
  },
  {
    "text": "equipment as well and and I thought this is a little strange because you look at Mo's law um Mo's law is just identifies",
    "start": "103479",
    "end": "110640"
  },
  {
    "text": "what's happening it's not the actual sort of reason why it's happening but these machines are getting faster and faster and faster we're getting more and",
    "start": "110640",
    "end": "116640"
  },
  {
    "text": "more RAM and I'm thinking okay the data is not increasing that much it is increasing a lot but something's wrong",
    "start": "116640",
    "end": "122159"
  },
  {
    "text": "with this anyway um so we got into uh looking at uh we had the way we can",
    "start": "122159",
    "end": "128319"
  },
  {
    "text": "improve um improve this so ironically this beginning of this week started off",
    "start": "128319",
    "end": "134120"
  },
  {
    "text": "a little a little strange for me because um I've been working at a company which I founded in uh or co-founded with some",
    "start": "134120",
    "end": "140000"
  },
  {
    "text": "colleagues in 2000 we sold it in 2007 we bought it back in 2011 and at the beginning of this week uh that's Monday",
    "start": "140000",
    "end": "147000"
  },
  {
    "text": "sold it again um interestingly this company now has the",
    "start": "147000",
    "end": "153400"
  },
  {
    "text": "technology which we developed over this so it's um they bought other things as",
    "start": "153400",
    "end": "158519"
  },
  {
    "text": "well but it's sort of proof proof in the pudding that it it actually works so let me give you a little bit of background",
    "start": "158519",
    "end": "164680"
  },
  {
    "text": "why do we distribute um as we get um larger and larger we need more and more",
    "start": "164680",
    "end": "171000"
  },
  {
    "text": "computational power we need to start to use other CPUs U any of these machines we buy we can buy some really powerful",
    "start": "171000",
    "end": "177200"
  },
  {
    "text": "machines today we can buy machines with 48 cuse um we can have multiple CPUs in",
    "start": "177200",
    "end": "183159"
  },
  {
    "text": "the in the box and you get these things which um would run um entire Industries",
    "start": "183159",
    "end": "189959"
  },
  {
    "text": "um just a few just a decade ago in fact but you get to the stage where you need more CPU power and to do that you've got",
    "start": "189959",
    "end": "196159"
  },
  {
    "text": "to distribute and share the load and to do that you've got to go across a piece of wire we often need memory as well why",
    "start": "196159",
    "end": "202840"
  },
  {
    "text": "do we use memory well it's a lot faster than dis disc is very cheap but it's incredibly slow and the next slide I'm",
    "start": "202840",
    "end": "207920"
  },
  {
    "text": "going to sort of point out just how slow that is so some of these numbers I'd like you to try and remember these uh not not the",
    "start": "207920",
    "end": "214439"
  },
  {
    "text": "actual numbers but the ratios between them now the reasons now this is something you can just grab off the Internet it's fairly well well known",
    "start": "214439",
    "end": "221400"
  },
  {
    "text": "I've redone this side um they used a different ratio now the ratio of these this is to sort of put for people that",
    "start": "221400",
    "end": "227840"
  },
  {
    "text": "don't or can't comprehend uh nanc PCS microsc Etc this is to put it into sort",
    "start": "227840",
    "end": "233959"
  },
  {
    "text": "of real life numbers that we can sort of understand um the way I worked this out",
    "start": "233959",
    "end": "239519"
  },
  {
    "text": "was a round trip San Francisco to New York it's about 6 hours oneway 5 hours back Etc and on an airplane so i' I've",
    "start": "239519",
    "end": "247159"
  },
  {
    "text": "basically sort of put it down into airplane standards the difference between the speed of light and an airplane is about a million times so",
    "start": "247159",
    "end": "254159"
  },
  {
    "text": "these are about 1 million times slower than these so let's look at this if we're writing data to uh to disk we're",
    "start": "254159",
    "end": "261239"
  },
  {
    "text": "we're in the millisecond realm it takes a long time for the disc if it's con it's obviously constantly spinning but",
    "start": "261239",
    "end": "267400"
  },
  {
    "text": "the head has to seek to the position where your data is is that's extremely timec consuming now you'll have multiple",
    "start": "267400",
    "end": "273240"
  },
  {
    "text": "heads multiple platters on the disc Etc but it's very very timec consuming you can you can uh obviously speed this up",
    "start": "273240",
    "end": "278919"
  },
  {
    "text": "somewhat with um with different levels of raid then we get to SSD and we're",
    "start": "278919",
    "end": "284759"
  },
  {
    "text": "getting a lot faster there's no physical uh movement of the disc and we're down",
    "start": "284759",
    "end": "289880"
  },
  {
    "text": "to sort of millisecond U microsc times when we get into RAM and this is the reason why something that doesn't write",
    "start": "289880",
    "end": "296759"
  },
  {
    "text": "out to to SSD or to dis is is so much faster so we can see there's quite a big",
    "start": "296759",
    "end": "302240"
  },
  {
    "text": "Improvement here but look at the difference between the memory here and the L3 L2",
    "start": "302240",
    "end": "307840"
  },
  {
    "text": "cache that is the cache that is in your CPU now that cache is actually quite",
    "start": "307840",
    "end": "313120"
  },
  {
    "text": "large for the average even a laptop for the L3 cache which is the one shared by all of the cores it's about 16 megabytes",
    "start": "313120",
    "end": "321600"
  },
  {
    "text": "24 32 you can get uh larger uh these L2 caches they get smaller this is shared",
    "start": "321600",
    "end": "327800"
  },
  {
    "text": "by the just each core um we're down into sort of 500k but there's a lot you can get into",
    "start": "327800",
    "end": "334720"
  },
  {
    "text": "500k that's still typically 10 times larger than the BBC microcomputers that",
    "start": "334720",
    "end": "340080"
  },
  {
    "text": "we were using um just 30 years ago so there's a lot of um leeway in",
    "start": "340080",
    "end": "345880"
  },
  {
    "text": "this the problem that we have with this distributed technology is is not uh the",
    "start": "345880",
    "end": "351000"
  },
  {
    "text": "serialization that's that's actually putting it on the wire it's the process of taking it off the wire it's the",
    "start": "351000",
    "end": "356880"
  },
  {
    "text": "process of decoding it any data that we send to a computer um that we send for",
    "start": "356880",
    "end": "362600"
  },
  {
    "text": "processing whether it come from another computer whether it comes from a human or whether it's come across the internet",
    "start": "362600",
    "end": "368000"
  },
  {
    "text": "needs to be understood by the CPU it cannot be processed properly unless it's understood by the CPU otherwise it's",
    "start": "368000",
    "end": "374919"
  },
  {
    "text": "just a document or or a random um pile of btes so this uh the big issue here is",
    "start": "374919",
    "end": "381880"
  },
  {
    "text": "deserialization let me let me show you what this looks like um this is just a",
    "start": "381880",
    "end": "387080"
  },
  {
    "text": "the uh this is the postmortem uh using this rather clever Tool uh that I I use",
    "start": "387080",
    "end": "392280"
  },
  {
    "text": "a lot from J Clarity um of a very simple program that's generating um commod",
    "start": "392280",
    "end": "398440"
  },
  {
    "text": "delimited files U or commod delimited lines so it generates as you can see 5 million of them here it generates them",
    "start": "398440",
    "end": "406039"
  },
  {
    "text": "writes them to to memory or to disk and then reads them back so the time to",
    "start": "406039",
    "end": "411400"
  },
  {
    "text": "generate them is is here the time to write them out is here and the rest of this is the time to read them back",
    "start": "411400",
    "end": "419720"
  },
  {
    "text": "why well because the way that they're stored the way that they're serialized whether you serialize them to Memory to",
    "start": "419720",
    "end": "426160"
  },
  {
    "text": "network or to disk is not correct or not uh understandable by the CPU so as",
    "start": "426160",
    "end": "432680"
  },
  {
    "text": "they're read back they need to be U put into a form that can be used or can be",
    "start": "432680",
    "end": "438840"
  },
  {
    "text": "useful if we look um back at this um who who's programmed in C or C++",
    "start": "438840",
    "end": "446160"
  },
  {
    "text": "before there's quite a lot of you so you're remember the days of if you're trying to make something efficient you",
    "start": "446160",
    "end": "452280"
  },
  {
    "text": "use bit Fields you can use all you got used to doing this the whole point of java was to abstractors from the",
    "start": "452280",
    "end": "458319"
  },
  {
    "text": "different size of integers the the different big Indians little Indians and you get this language all of a sudden",
    "start": "458319",
    "end": "463919"
  },
  {
    "text": "which is the actual language is standardized it's not the hardware and depending on the hardware depending it",
    "start": "463919",
    "end": "469400"
  },
  {
    "text": "then dictated the size of the integers and things you'd get that made it very difficult to have portable c um and",
    "start": "469400",
    "end": "477440"
  },
  {
    "text": "C++ if we were to take three letters we want to store ABC um and moving into the um Financial",
    "start": "477440",
    "end": "485400"
  },
  {
    "text": "Services worlds ABC would obviously represents in this this case not a currency but it's GBP USD uh e we want",
    "start": "485400",
    "end": "494080"
  },
  {
    "text": "to store this or serialize it or read it back if you're doing this in most",
    "start": "494080",
    "end": "499680"
  },
  {
    "text": "low-level languages you just need four bytes to do this uh we have two choices",
    "start": "499680",
    "end": "504800"
  },
  {
    "text": "we can either stick the zero at the end this means that this ABC has ended um or",
    "start": "504800",
    "end": "510000"
  },
  {
    "text": "we could put a number at the beginning here which says three characters now if you know it's always",
    "start": "510000",
    "end": "515240"
  },
  {
    "text": "three characters because it's a currency you could actually say fine I will just Reserve three three bytes um and we can",
    "start": "515240",
    "end": "521240"
  },
  {
    "text": "make this far far more efficient we just have three bytes knowing that it will always be three bytes and when I write",
    "start": "521240",
    "end": "527440"
  },
  {
    "text": "it it will always fit in the same space so if I got three currencies it will be nine bytes nice and easy when we put",
    "start": "527440",
    "end": "533399"
  },
  {
    "text": "this in Java we have this many bytes or bits 48 minimum so so every single",
    "start": "533399",
    "end": "540440"
  },
  {
    "text": "currency is that we store takes 48 bytes now we can take a copy of one of those",
    "start": "540440",
    "end": "546959"
  },
  {
    "text": "and make a reference and it will be smaller it'll be 16 bytes but remembering that the data is coming off",
    "start": "546959",
    "end": "552720"
  },
  {
    "text": "a piece of wire off a feed or we've deserialized it if even if you get the same currency twice you get GBP twice it",
    "start": "552720",
    "end": "560320"
  },
  {
    "text": "doesn't compare it and say oh this is the same as the previous one I had it just reads it in so each one has 48",
    "start": "560320",
    "end": "566040"
  },
  {
    "text": "bytes and this is what we get and it's not uh just with strings",
    "start": "566040",
    "end": "571760"
  },
  {
    "text": "it's with uh pretty much any uh Java object some are more efficient some are less efficient but every single Java",
    "start": "571760",
    "end": "578320"
  },
  {
    "text": "object that you read and write into these things is going to take at least 48",
    "start": "578320",
    "end": "583600"
  },
  {
    "text": "bytes we could optimize this we could say okay we could put uh we only need a bite to store the year the month the day",
    "start": "583600",
    "end": "590240"
  },
  {
    "text": "uh we could optimize it we get a little bit less and we could probably get this down to about 16 bytes but 16 bytes when",
    "start": "590240",
    "end": "596200"
  },
  {
    "text": "we only need three seems quite a lot remember now if we were reading this off the wire uh the difference between",
    "start": "596200",
    "end": "602320"
  },
  {
    "text": "reading 16 and three or 16 3 to 40 48 is already quite significant so we would",
    "start": "602320",
    "end": "608200"
  },
  {
    "text": "make some improvements however if you take uh let's just take a",
    "start": "608200",
    "end": "614240"
  },
  {
    "text": "date and I'll I'll come back to the currency but if you take a date this represents it's not the real uh stuff",
    "start": "614240",
    "end": "620560"
  },
  {
    "text": "this represents um the amount of bits you would need to store a date in Java",
    "start": "620560",
    "end": "627040"
  },
  {
    "text": "if you actually think of uh you you all obviously if you've been programming in c C++ and even Java you'll know the",
    "start": "627040",
    "end": "632800"
  },
  {
    "text": "epoch date uh 1st of January 2017 and everything is counted from there if we",
    "start": "632800",
    "end": "638320"
  },
  {
    "text": "take that date and it's very easy to get hold of that date divide it by the number of seconds in the day we can get",
    "start": "638320",
    "end": "644040"
  },
  {
    "text": "the number of um days since uh 1st of January",
    "start": "644040",
    "end": "649880"
  },
  {
    "text": "2017 that number is less than 65,000 which means we can store it in just two",
    "start": "649880",
    "end": "655279"
  },
  {
    "text": "bytes which means we can store any date between now and about 21 60 something or other as two bytes so we need just two",
    "start": "655279",
    "end": "663440"
  },
  {
    "text": "bytes like this as opposed to 48 bytes like this if that data is now stored on the",
    "start": "663440",
    "end": "670000"
  },
  {
    "text": "CPU as two bytes we can do date comparisons we can we can say get everything greater than this date less",
    "start": "670000",
    "end": "676279"
  },
  {
    "text": "than this date equal to this date and we can now start to do analytics and it's in the right format imagine now when we",
    "start": "676279",
    "end": "683800"
  },
  {
    "text": "serialize this instead of serializing and when we do Java serialization we don't just serialize this",
    "start": "683800",
    "end": "690240"
  },
  {
    "text": "we serialize the name of the class as well so we get java.util doe and the content",
    "start": "690240",
    "end": "697560"
  },
  {
    "text": "of this so the actual serialization of a date is is actually about 80 bytes it's quite significantly larger rather than",
    "start": "697560",
    "end": "705160"
  },
  {
    "text": "this if we know we're serializing a date and we serialize just two uh bytes when",
    "start": "705160",
    "end": "710760"
  },
  {
    "text": "we read it back in it's going to be vastly more efficient because we can already use this it's in it's in a CPU",
    "start": "710760",
    "end": "715920"
  },
  {
    "text": "efficient format so extend this a little bit further we take something um comma",
    "start": "715920",
    "end": "723200"
  },
  {
    "text": "delimited file this is the one that I used in the example uh we've got dates so we could now move that down to two",
    "start": "723200",
    "end": "729360"
  },
  {
    "text": "bytes uh Buy cell anyone want to guess how many bytes we need for",
    "start": "729360",
    "end": "735720"
  },
  {
    "text": "that come on it's not that early in the morning one bit y so we need one bit",
    "start": "735720",
    "end": "743000"
  },
  {
    "text": "bits are inefficient so we'll we'll use a bite for this um bits we can use if we had lots of them we could use lots of",
    "start": "743000",
    "end": "748320"
  },
  {
    "text": "bits and eventually make a bite um but yes a bit is the is all we need um typically we'd use a bite uh for this um",
    "start": "748320",
    "end": "756199"
  },
  {
    "text": "currencies now we said three characters so we'd need minimum three characters but if you actually look at the iso",
    "start": "756199",
    "end": "762600"
  },
  {
    "text": "currency table there are only in fact 163 currencies defined so 163 currencies",
    "start": "762600",
    "end": "768199"
  },
  {
    "text": "less than 256 therefore we only need one bite to store every single currency what",
    "start": "768199",
    "end": "773600"
  },
  {
    "text": "if we want flexibility uh what if we want to put put precious metals in there we have X AU for gold xpt for platinum",
    "start": "773600",
    "end": "781600"
  },
  {
    "text": "um okay we can add a few more in there but there's not that many precious metals that are traded we could also add an escape sequence so we could put an",
    "start": "781600",
    "end": "787519"
  },
  {
    "text": "escape sequence so if it's zero or 255 we could say that the next three bytes",
    "start": "787519",
    "end": "792920"
  },
  {
    "text": "are the currency so we have plenty of flexibility in this uh numbers they're i e standards",
    "start": "792920",
    "end": "799600"
  },
  {
    "text": "already pretty efficient so we're not too far off with this um we do need some flexibility we need to make sure we",
    "start": "799600",
    "end": "805360"
  },
  {
    "text": "don't get rounding so we're probably down to four bytes for these um same with with exchange rates we can store",
    "start": "805360",
    "end": "811360"
  },
  {
    "text": "exchange rates are only five significant digits therefore we just need a um two parts the the five significant",
    "start": "811360",
    "end": "819040"
  },
  {
    "text": "significant digits and the the multiplier 10 the power of back to the currencies back to the numbers and back",
    "start": "819040",
    "end": "824399"
  },
  {
    "text": "to the dates again so we can store this very very much more efficiently this comes in in in this",
    "start": "824399",
    "end": "829760"
  },
  {
    "text": "format it's roughly um on average about 70 bytes um per line This is using asy",
    "start": "829760",
    "end": "836680"
  },
  {
    "text": "naturally if it's uu encoded it's it's twice the size but let's let's stick to ask you for the moment when this comes",
    "start": "836680",
    "end": "841959"
  },
  {
    "text": "in it's not in a CPU readable format so it has to be paused this character here",
    "start": "841959",
    "end": "848240"
  },
  {
    "text": "uh the two is asky code or asky character 32 the next one is 36 30 34 35",
    "start": "848240",
    "end": "856279"
  },
  {
    "text": "uh 33 Etc so those have to be computed multiplied by 10 as or divided by 10 as",
    "start": "856279",
    "end": "862160"
  },
  {
    "text": "they come in so that we actually take this number which is in uh binary encoded decimal um at in fact no it's in",
    "start": "862160",
    "end": "869920"
  },
  {
    "text": "it's not it's not even binary encoded decimal it's actually in in in asy and we have to read that in and that's the",
    "start": "869920",
    "end": "876279"
  },
  {
    "text": "the thing that is taking the time to pause this file so if I ask someone to any one of",
    "start": "876279",
    "end": "882720"
  },
  {
    "text": "you uh or anyone else in an interview question to code up a class for this um",
    "start": "882720",
    "end": "887920"
  },
  {
    "text": "this would not be something that you would um fail the interview for it's for the data that we've got up here that we",
    "start": "887920",
    "end": "894399"
  },
  {
    "text": "can see this looks reasonably good um possibly fail them in an interview if they put an INT in here because it's",
    "start": "894399",
    "end": "900079"
  },
  {
    "text": "very quickly to very easy to wrap around the ins um in some of the Telco stuff that we've done we've actually wrapped",
    "start": "900079",
    "end": "906199"
  },
  {
    "text": "around the uh the Longs as well uh we found after a couple of days the the Longs have wrapped around because we're",
    "start": "906199",
    "end": "911720"
  },
  {
    "text": "the amount of data we're getting in in millions per second anyway um trade",
    "start": "911720",
    "end": "917000"
  },
  {
    "text": "dates strings but think how much space this is now taking not just in memory but think of the serialization so we got",
    "start": "917000",
    "end": "924240"
  },
  {
    "text": "um obviously eight for this and the way that Java stores it we got 48 48 48 48",
    "start": "924240",
    "end": "931079"
  },
  {
    "text": "Etc all the way going down when we serialize this it's even worse I I'll come to that very",
    "start": "931079",
    "end": "937120"
  },
  {
    "text": "shortly so we can we write this class we write gets and sets and with the GS and",
    "start": "937120",
    "end": "942519"
  },
  {
    "text": "sets um we could do something simple as PA the line we use a a line split so we",
    "start": "942519",
    "end": "947720"
  },
  {
    "text": "just say line split on the on the commas it's not doing anything particularly fancy and we just simply use the gets",
    "start": "947720",
    "end": "954639"
  },
  {
    "text": "and Setters in here to say uh set trade date we get the format we get each of the fields 1 2 3 4 5 Etc and everything",
    "start": "954639",
    "end": "962160"
  },
  {
    "text": "works it's nice it's pretty quick um we could pause as you've seen several several million lines fairly quickly and",
    "start": "962160",
    "end": "969759"
  },
  {
    "text": "and that's classic Java the problem is when we start to scale this and this is",
    "start": "969759",
    "end": "974839"
  },
  {
    "text": "this this is the problem that we've had since Java came out in the uh",
    "start": "974839",
    "end": "980040"
  },
  {
    "text": "mid90s uh we've gone we weren't globalized in the mid 9s because although the internet did technically",
    "start": "980040",
    "end": "985880"
  },
  {
    "text": "exist no one was using it we didn't see the internet coming coming in and and messaging taking over from databases we",
    "start": "985880",
    "end": "991880"
  },
  {
    "text": "were in a database Centric world in the '90s as the internet's come in we've we've now got a message Centric world",
    "start": "991880",
    "end": "997920"
  },
  {
    "text": "and it's quite normal to expect to get messages coming in from uh from everywhere on the planet and all of a",
    "start": "997920",
    "end": "1004600"
  },
  {
    "text": "sudden the scale that we need has just gone has ballooned out and our simple Java now starts to show performance",
    "start": "1004600",
    "end": "1011680"
  },
  {
    "text": "problems so this becomes uh very very verbose um who here",
    "start": "1011680",
    "end": "1017319"
  },
  {
    "text": "thinks that XML is a sort of a verbose standard for data a yeah quite a few of",
    "start": "1017319",
    "end": "1024000"
  },
  {
    "text": "you well I can tell you Java is worse Java is actually worse than XML so if",
    "start": "1024000",
    "end": "1029520"
  },
  {
    "text": "you're putting your data from java into XML you're actually saving space believe it or not this 70 lines roughly 70 per",
    "start": "1029520",
    "end": "1038240"
  },
  {
    "text": "line comes out at 328 bytes in memory that's a",
    "start": "1038240",
    "end": "1043720"
  },
  {
    "text": "lot so reading in a million of these is not 70 megabytes we now need 328",
    "start": "1043720",
    "end": "1050919"
  },
  {
    "text": "megabytes this is half a gigabyte just to read in a million of these and that's assuming you haven't got any inefficiencies in the way that you've",
    "start": "1050919",
    "end": "1057200"
  },
  {
    "text": "you've stored this so we've already bloated it about four times larger and that also has to be read from the disc",
    "start": "1057200",
    "end": "1064520"
  },
  {
    "text": "or red from the network that's bad to start with but we haven't got into serialization yet so Java is really",
    "start": "1064520",
    "end": "1070480"
  },
  {
    "text": "bloating things I like to think of it like this for those of you that program in C",
    "start": "1070480",
    "end": "1076840"
  },
  {
    "text": "C++ everything if you want to to process vegetables it's all beautiful crisp",
    "start": "1076840",
    "end": "1082679"
  },
  {
    "text": "really nice and fresh when we working in C++ it's it's pretty hard to to get everything right and the memory right",
    "start": "1082679",
    "end": "1088840"
  },
  {
    "text": "and yes this all could get crushed and uh distorted if you abuse your memory",
    "start": "1088840",
    "end": "1095159"
  },
  {
    "text": "but when we work in Java we work in a much more protected world every one of those things is is wrapped up it's",
    "start": "1095159",
    "end": "1101600"
  },
  {
    "text": "wrapped up with garbage that we don't need those two bites that we actually needed for the date yes I've stripped",
    "start": "1101600",
    "end": "1107600"
  },
  {
    "text": "off the hours minutes second and milliseconds but um we could add those with another few bytes this is even uh",
    "start": "1107600",
    "end": "1115320"
  },
  {
    "text": "this isn't even correct in Java each one of these would be individually wrapped inside the container so we'd have",
    "start": "1115320",
    "end": "1121799"
  },
  {
    "text": "individually wrapped things inside wrapped things which would be inside more plastic bags and that's what we get",
    "start": "1121799",
    "end": "1127200"
  },
  {
    "text": "and that is another problem so we got two problems now one is that the data is inefficient um and we're not using it",
    "start": "1127200",
    "end": "1134679"
  },
  {
    "text": "correctly so the CPU is working overtime seriously amount of over time but we've",
    "start": "1134679",
    "end": "1139919"
  },
  {
    "text": "also now got to go back and collect all of the crap that we've left um as we've processed this so everything that gets",
    "start": "1139919",
    "end": "1146400"
  },
  {
    "text": "left around this needs to be cleared up it's not just Java for anyone that",
    "start": "1146400",
    "end": "1151679"
  },
  {
    "text": "thinks ah I'm using the latest uh wonderful language that um makes Java",
    "start": "1151679",
    "end": "1157240"
  },
  {
    "text": "look um silly I'm really trendy so I'm using one of these things actually some of them are pretty good cotlin is great",
    "start": "1157240",
    "end": "1163799"
  },
  {
    "text": "um but it's the same problem you're working in a jvm and if you think okay I",
    "start": "1163799",
    "end": "1168880"
  },
  {
    "text": "mean I doubt many people who works in Microsoft here with Microsoft languages okay few of you I mean you have the same",
    "start": "1168880",
    "end": "1174039"
  },
  {
    "text": "problem you're working inside a a virtual machine the virtual machine is abstracting you from the hardware you're",
    "start": "1174039",
    "end": "1179480"
  },
  {
    "text": "getting the same issues with this if you're putting things into memory uh rather than using uh a map or",
    "start": "1179480",
    "end": "1188080"
  },
  {
    "text": "something that comes with the language you'll probably often using one of these uh inmemory data grids this I wouldn't",
    "start": "1188080",
    "end": "1195200"
  },
  {
    "text": "say solves but it makes your life easier with Distributing the data so if you putting data into these uh you can write",
    "start": "1195200",
    "end": "1200799"
  },
  {
    "text": "into gemfire coherence um Neo for J hazelcast Etc you can write it in it",
    "start": "1200799",
    "end": "1206600"
  },
  {
    "text": "will distribute them for you but what you're not seeing is is all of the stuff",
    "start": "1206600",
    "end": "1211720"
  },
  {
    "text": "that goes on underneath and all of the serialization now some of these have optimizations for this but it's it's still a lot of work that needs to be",
    "start": "1211720",
    "end": "1218679"
  },
  {
    "text": "done so how can we solve this let's let's go back uh look at the",
    "start": "1218679",
    "end": "1224760"
  },
  {
    "text": "the Java work if we were taking this um classic and we were putting into uh",
    "start": "1224760",
    "end": "1230000"
  },
  {
    "text": "standard Java code we could generate this um and this is Java binding those",
    "start": "1230000",
    "end": "1235840"
  },
  {
    "text": "of you that have used anyone used jaxb jibx these sort of things so you've got",
    "start": "1235840",
    "end": "1241400"
  },
  {
    "text": "got perhaps a database you've got um you've got XML and it will generate the Java code for you that's relatively",
    "start": "1241400",
    "end": "1247600"
  },
  {
    "text": "simple and easy to do but what it's doing is generating this from this and",
    "start": "1247600",
    "end": "1253000"
  },
  {
    "text": "we just said it's sort of it's acceptable it's okay but it's starting to use a lot of",
    "start": "1253000",
    "end": "1258919"
  },
  {
    "text": "memory so what happens if we just store the row well all of a sudden we've now improved the size of the memory from 324",
    "start": "1258919",
    "end": "1266720"
  },
  {
    "text": "down to just 70 bytes so we've made a huge Improvement but now I've got a billion of these rows they're much",
    "start": "1266720",
    "end": "1272640"
  },
  {
    "text": "smaller which is great how do I search through them if I want to search through",
    "start": "1272640",
    "end": "1277799"
  },
  {
    "text": "these I've now got to go back and pause the damn things so when I'm reading this line I want to say get everything which",
    "start": "1277799",
    "end": "1284159"
  },
  {
    "text": "is uh above a particular date which has a buy with with um Euro against dollar I",
    "start": "1284159",
    "end": "1292559"
  },
  {
    "text": "have to pass every line and every line that I've passed I then have to pass the data in it to understand it I could",
    "start": "1292559",
    "end": "1298960"
  },
  {
    "text": "build an index ah but I'm storing objects in the index so it it makes a complete fast of having to store it in",
    "start": "1298960",
    "end": "1305000"
  },
  {
    "text": "this way so it's very good for storage but it's not uh any use for actually processing the data so I need the CPU",
    "start": "1305000",
    "end": "1311919"
  },
  {
    "text": "needs to understand what's in there so original data would go in this is quite useful for for XML because it's",
    "start": "1311919",
    "end": "1319200"
  },
  {
    "text": "you've got to pause out all the XML if you take a standard XML contract like fpml in in um in the banking world it's",
    "start": "1319200",
    "end": "1327640"
  },
  {
    "text": "it's up to about 25k just for every single contract and you could have hundreds of millions of these things so",
    "start": "1327640",
    "end": "1333240"
  },
  {
    "text": "it uses up a lot of memory there are banks around here in the city which have tens of terabytes of inmemory storage",
    "start": "1333240",
    "end": "1341039"
  },
  {
    "text": "that's a lot it's expensive what about compression or compaction okay what's the difference",
    "start": "1341039",
    "end": "1347880"
  },
  {
    "text": "well if we were to compress them we have two ways as as anyone that's tried to compress a file there's two different",
    "start": "1347880",
    "end": "1353799"
  },
  {
    "text": "ways you can do it you can either either compress individual files and you get a",
    "start": "1353799",
    "end": "1359200"
  },
  {
    "text": "relatively okay compression ratio but if you compress everything together you get a much better compression ratio okay so",
    "start": "1359200",
    "end": "1366159"
  },
  {
    "text": "now we've got a million of these rows if we compress them that's pretty good but",
    "start": "1366159",
    "end": "1372000"
  },
  {
    "text": "if we want just one of them we have to decompress the entire 1 million of them that's not so good and not only that but",
    "start": "1372000",
    "end": "1377400"
  },
  {
    "text": "it generates some needs a lot of memory to do that so now we can press individual lines instead well hang on",
    "start": "1377400",
    "end": "1384400"
  },
  {
    "text": "that also takes a long time not only that but I've got to decompress it before I can even understand the content of it so that makes it even slower we've",
    "start": "1384400",
    "end": "1392200"
  },
  {
    "text": "saved even more memory but it makes it even slower if we compact it let's go back to the Java date so if we compact",
    "start": "1392200",
    "end": "1400480"
  },
  {
    "text": "it um we've now only got two bytes and we don't need to decode the entire",
    "start": "1400480",
    "end": "1407159"
  },
  {
    "text": "message to be able to read those two bytes we just need to know where they are so what we need to do is calculate",
    "start": "1407159",
    "end": "1412480"
  },
  {
    "text": "where those two bytes are that we need we can read them into the CPU and we can immediately do the comparison so move",
    "start": "1412480",
    "end": "1418840"
  },
  {
    "text": "this into binary if we store every one of these rows simply as a bite array and that",
    "start": "1418840",
    "end": "1426919"
  },
  {
    "text": "bite array is not the asy that was in this but the binary that we have replace",
    "start": "1426919",
    "end": "1432799"
  },
  {
    "text": "with this with so we have um maybe four bytes at the beginning for this for the",
    "start": "1432799",
    "end": "1438200"
  },
  {
    "text": "or or eight depending what we want to keep it as we have two bytes for the date there is no time in there so it's",
    "start": "1438200",
    "end": "1444520"
  },
  {
    "text": "just we need two bytes for that we have one bite for the buy sell we have one bite for the currency it's all we need",
    "start": "1444520",
    "end": "1451159"
  },
  {
    "text": "uh Etc as we go across we can get this down much smaller ha you say well now we",
    "start": "1451159",
    "end": "1457200"
  },
  {
    "text": "got to change all the code well you're working in an object-oriented world we have",
    "start": "1457200",
    "end": "1462520"
  },
  {
    "text": "encapsulation so if we have get trade date and set trade date which is the typical way we would do with the class",
    "start": "1462520",
    "end": "1469200"
  },
  {
    "text": "if we replace that with get trade date and I'm just using the simple example",
    "start": "1469200",
    "end": "1475080"
  },
  {
    "text": "here so uh this is getting the date from the data so we we go and find this is",
    "start": "1475080",
    "end": "1481240"
  },
  {
    "text": "just something that goes off and finds the date in this particular case this could be complicated if it was something",
    "start": "1481240",
    "end": "1486320"
  },
  {
    "text": "larger it could be simple if it's a fixed length format uh so in this particular case it it's at offset 8 and",
    "start": "1486320",
    "end": "1493360"
  },
  {
    "text": "we read the word back now we don't have words in Java so we read this back into a long the rest of it is is zero or",
    "start": "1493360",
    "end": "1499039"
  },
  {
    "text": "whatever you want it to be and Java has this rather convenient",
    "start": "1499039",
    "end": "1505000"
  },
  {
    "text": "ability to actually take uh along which is the number of milliseconds since 1 of",
    "start": "1505000",
    "end": "1510440"
  },
  {
    "text": "January 20170 what we do is multiply this number by 86,400 th000 which is the",
    "start": "1510440",
    "end": "1518399"
  },
  {
    "text": "number of milliseconds in the day if we do that we pass in a new date we get",
    "start": "1518399",
    "end": "1523880"
  },
  {
    "text": "back the original date so we can go from two bytes to a fulls sizee uh date",
    "start": "1523880",
    "end": "1530320"
  },
  {
    "text": "why now we just said we we really want to avoid objects because we want to avoid garbage so what have we done here",
    "start": "1530360",
    "end": "1537200"
  },
  {
    "text": "while we just we've used this this word new um new creates another object so",
    "start": "1537200",
    "end": "1542520"
  },
  {
    "text": "every single time we''ll be calling this method we will be getting a new object surely that's not good well Java the the",
    "start": "1542520",
    "end": "1549799"
  },
  {
    "text": "way the uh allocation works is divided uh the jvm is divided up into uh",
    "start": "1549799",
    "end": "1555919"
  },
  {
    "text": "separate sections these if they used very quickly because they use we get the date and we use it as a comparison for",
    "start": "1555919",
    "end": "1562320"
  },
  {
    "text": "example as soon as it's been used it's garbage collected it's from the Eden space so this is like a if you're like a",
    "start": "1562320",
    "end": "1567919"
  },
  {
    "text": "ring buffer it's incredibly fast um we tried to do some uh some clever things",
    "start": "1567919",
    "end": "1574039"
  },
  {
    "text": "with this um by by using static fields on this so that they'd be reused and we",
    "start": "1574039",
    "end": "1579799"
  },
  {
    "text": "went to talk to the guys at Oracle about it and they said H just use just ignore it just use new it's actually faster it",
    "start": "1579799",
    "end": "1586200"
  },
  {
    "text": "will be garbage collected even quicker we did and uh with the whatever it was",
    "start": "1586200",
    "end": "1591919"
  },
  {
    "text": "1.6 verore sort of 70 something rather onwards it it worked um incredibly fast",
    "start": "1591919",
    "end": "1598360"
  },
  {
    "text": "this is effectively it's free it's almost free it's it's U comes down to sort of single single",
    "start": "1598360",
    "end": "1605039"
  },
  {
    "text": "instructions same with the trade date we take the date uh we get the long we divide it by the same number and then we",
    "start": "1605039",
    "end": "1611440"
  },
  {
    "text": "we use these things that C++ programmers will remember very very well we use them all the time or C programmers uh these",
    "start": "1611440",
    "end": "1617520"
  },
  {
    "text": "are rotate uh right we have rotate shift Etc now I won't have I don't have time",
    "start": "1617520",
    "end": "1624720"
  },
  {
    "text": "unfortunately to show you the code but if anyone's interested I've got the code you can if you got a a memory stick you can walk away with it or give me an",
    "start": "1624720",
    "end": "1630080"
  },
  {
    "text": "email and I'll send it to you it's just a simple example of how this works and in this um I've got two comparisons I've",
    "start": "1630080",
    "end": "1636919"
  },
  {
    "text": "got the same piece of code because we're using effectively like an interface we're using the Getters and Setters I",
    "start": "1636919",
    "end": "1642600"
  },
  {
    "text": "can run it with both classic Java objects and I can run it with binary objects looking at the results and I do",
    "start": "1642600",
    "end": "1648440"
  },
  {
    "text": "is run it as the demo U so looking at the results um this is the amount of bytes used in the classic Java object",
    "start": "1648440",
    "end": "1655919"
  },
  {
    "text": "this is what we use uh with the binary version I could compact that down a little bit further as well because I",
    "start": "1655919",
    "end": "1661840"
  },
  {
    "text": "used an entire bite for the uh for the buy sell um when we serialize it as I said",
    "start": "1661840",
    "end": "1668240"
  },
  {
    "text": "the serialization is the name of the class and then the content of the class it's tag value pairs as we serialize but",
    "start": "1668240",
    "end": "1674440"
  },
  {
    "text": "if we serialize one object that contains multiple other objects you get name content and then inside that you get",
    "start": "1674440",
    "end": "1681080"
  },
  {
    "text": "name content name content name content so this each row started off at 70 bytes",
    "start": "1681080",
    "end": "1687760"
  },
  {
    "text": "now serialized is nearly 700 bytes 10 times bigger that's why javra is slow",
    "start": "1687760",
    "end": "1693960"
  },
  {
    "text": "not only that but it has to read it back and still decode it the binary version is 85 now it's gone up because it's",
    "start": "1693960",
    "end": "1701559"
  },
  {
    "text": "actually the class name that I used something like binary demo or something like that so I've got um John davis.",
    "start": "1701559",
    "end": "1708760"
  },
  {
    "text": "binary demo or something and that's where these extra bytes have gone now we can now because in a Java object if you",
    "start": "1708760",
    "end": "1715679"
  },
  {
    "text": "wanted to store a string you don't know where the memory is for the string there the whole point of the encapsulation you",
    "start": "1715679",
    "end": "1720840"
  },
  {
    "text": "have a pointer or a reference for the string you can get the data from the string and you can actually take it out",
    "start": "1720840",
    "end": "1726399"
  },
  {
    "text": "and you can write it that would be customized serialization so we could avoid it but when we've got a bite array",
    "start": "1726399",
    "end": "1732279"
  },
  {
    "text": "we know exactly where the memory is because it's a we can basically iterate through this bite array so we can now",
    "start": "1732279",
    "end": "1738360"
  },
  {
    "text": "use custom serialization because we know it's 39 bytes in size in this particular",
    "start": "1738360",
    "end": "1744000"
  },
  {
    "text": "case not in every case it doesn't vary so let's just round it up to an 8 by boundary and we get magically 40 this",
    "start": "1744000",
    "end": "1751279"
  },
  {
    "text": "means we can now write if we got a million of these we can write out an array of a million time 40 so 40",
    "start": "1751279",
    "end": "1757840"
  },
  {
    "text": "megabytes for 1 million of these things in one go interesting Advantage now we",
    "start": "1757840",
    "end": "1762919"
  },
  {
    "text": "can seek to any one of those and we can read out the data almost instantly not only that but when we read it back in we",
    "start": "1762919",
    "end": "1769200"
  },
  {
    "text": "can actually if we know we're reading in a million we can read in 1 million rows as using Java nio in one go directly",
    "start": "1769200",
    "end": "1776880"
  },
  {
    "text": "from the disc directly back into memory not only that but it's immediately U",
    "start": "1776880",
    "end": "1781919"
  },
  {
    "text": "understandable there's no pausing to be done now look at the performance now so if we take this standard serialization",
    "start": "1781919",
    "end": "1789480"
  },
  {
    "text": "uh 41 uh micros typically so we're getting uh what 20",
    "start": "1789480",
    "end": "1796039"
  },
  {
    "text": "250 20 uh what is it about two 2.5 million 25,000",
    "start": "1796039",
    "end": "1802279"
  },
  {
    "text": "a second on this when we use the batched I writing out a thousand or writing out",
    "start": "1802279",
    "end": "1808200"
  },
  {
    "text": "a million of these uh as binary we're now down to 44 nanoseconds so we've got",
    "start": "1808200",
    "end": "1814519"
  },
  {
    "text": "almost a thousand times increase in performance and that's typically what we do find out of",
    "start": "1814519",
    "end": "1820000"
  },
  {
    "text": "this let me just show you some comparisons these two graphs I will enlarge the one on the right in a second",
    "start": "1820000",
    "end": "1826440"
  },
  {
    "text": "uh this is the post morm um Heap usage of the ordinary Java object version this",
    "start": "1826440",
    "end": "1835240"
  },
  {
    "text": "is 200 seconds so 200 seconds down here this is 8 gabt of Heap this is creating",
    "start": "1835240",
    "end": "1841960"
  },
  {
    "text": "5 million writing them out and then reading the same 5 million back into a",
    "start": "1841960",
    "end": "1847039"
  },
  {
    "text": "second array so we end up with 10 million in memory hence the the increase in size so 8 GB Heap this one is a 2 GB",
    "start": "1847039",
    "end": "1856480"
  },
  {
    "text": "Heap and This is 40 seconds and I just sort of scaled them so you can see them roughly side by side What's",
    "start": "1856480",
    "end": "1863240"
  },
  {
    "text": "Happening Here is exactly the same as What's Happening Here the fact that the slope looks different is just because",
    "start": "1863240",
    "end": "1868840"
  },
  {
    "text": "the scale is different it's it's so this part here and here is the same this is the reading it back so this is the",
    "start": "1868840",
    "end": "1877320"
  },
  {
    "text": "deserialization so the deserialization we're writing them out serialization uh sorry creating serialization",
    "start": "1877320",
    "end": "1885080"
  },
  {
    "text": "deserialization and as you can see just on this very simple example five times",
    "start": "1885080",
    "end": "1890320"
  },
  {
    "text": "faster look now at the Heap usage so this is the GC pause time GC pause time",
    "start": "1890320",
    "end": "1897720"
  },
  {
    "text": "is what kills most applications particularly if you're working in a in a should we say real time or Soo real time",
    "start": "1897720",
    "end": "1902960"
  },
  {
    "text": "or something where a GC pause will kill your machine um one of the best ways of",
    "start": "1902960",
    "end": "1908279"
  },
  {
    "text": "avoiding this is to have as little memory as possible um and you have multiple machines if you have little",
    "start": "1908279",
    "end": "1913440"
  },
  {
    "text": "memory then you've got to distribute it and you're back with the same issues again if you have a very large amount of",
    "start": "1913440",
    "end": "1918480"
  },
  {
    "text": "memory you get less GC pauses but when they happen they're into the sort of seconds and tens of seconds and it shuts",
    "start": "1918480",
    "end": "1924440"
  },
  {
    "text": "your machine down and given the way Java works it will also even if you're single threaded it will grab every single um",
    "start": "1924440",
    "end": "1932000"
  },
  {
    "text": "core on your machine it will kill your machine and I'm sure you've seen it um occasionally when it and it goes Haywire",
    "start": "1932000",
    "end": "1938120"
  },
  {
    "text": "it's quite quite easy to replicate and sometimes it gets to the stage where it doesn't actually catch",
    "start": "1938120",
    "end": "1944240"
  },
  {
    "text": "its own signal to to throw the um out of memory exception in which case your",
    "start": "1944240",
    "end": "1949279"
  },
  {
    "text": "machine will just go into a horrible die and if you're using a laptop all the fans will come on and it'll start getting pretty hot um and I'm sure",
    "start": "1949279",
    "end": "1956039"
  },
  {
    "text": "you've seen that so let's just look at this again uh 200 seconds here this is",
    "start": "1956039",
    "end": "1961159"
  },
  {
    "text": "half a second two half second pauses in this this is 40 seconds now the very",
    "start": "1961159",
    "end": "1968240"
  },
  {
    "text": "bottom rung here uh is 50 milliseconds so we got 50 100 150 200 Etc half second",
    "start": "1968240",
    "end": "1975519"
  },
  {
    "text": "here that the top of this one is 45 milliseconds 45 milliseconds maximum",
    "start": "1975519",
    "end": "1981880"
  },
  {
    "text": "pause time and 1/5 of the time to actually process it this is a really",
    "start": "1981880",
    "end": "1987080"
  },
  {
    "text": "really simple example this is something that if you've got data that you're using Distributing um and you can make",
    "start": "1987080",
    "end": "1994399"
  },
  {
    "text": "very very small modifications this is the sort of performance you can see when we did this to more complex things like",
    "start": "1994399",
    "end": "2000080"
  },
  {
    "text": "XML we got performance increases by in the Realms of in this case was five we got in the Realms of 50 times faster 50",
    "start": "2000080",
    "end": "2007960"
  },
  {
    "text": "times less memory um and that was very very significant so the it's the",
    "start": "2007960",
    "end": "2013840"
  },
  {
    "text": "serialization and deserialization which is causing the problems um with this",
    "start": "2013840",
    "end": "2019279"
  },
  {
    "text": "and this is [Music] um there are there are many many",
    "start": "2019279",
    "end": "2024720"
  },
  {
    "text": "Frameworks um in fact probably 20 30 different Frameworks because serialization is so slow it needed to be",
    "start": "2024720",
    "end": "2031159"
  },
  {
    "text": "compatible across so anybody worked with any of these Avro cryo Thrift um",
    "start": "2031159",
    "end": "2036279"
  },
  {
    "text": "protobuf Etc at all these are significantly better than the jvm because the jvm is just so bad so",
    "start": "2036279",
    "end": "2044720"
  },
  {
    "text": "you can you can do pretty much anything and you're going to improve on the jvm you can write your own serialization and",
    "start": "2044720",
    "end": "2050839"
  },
  {
    "text": "effectively that's what these do but these also store tag value pairs they store a token to say this is I'm going",
    "start": "2050839",
    "end": "2057839"
  },
  {
    "text": "to send you a string I'm going to send you a a date I'm going to send you a something else if you're sending data",
    "start": "2057839",
    "end": "2063240"
  },
  {
    "text": "from A to B typically you have a contract B knows what a is sending so",
    "start": "2063240",
    "end": "2069000"
  },
  {
    "text": "why bother to send all of the details about what you're about to send if you send XML uh so if you go to a rest Bas",
    "start": "2069000",
    "end": "2075398"
  },
  {
    "text": "service or or something and get Json or or XML you've typically got a schema",
    "start": "2075399",
    "end": "2080599"
  },
  {
    "text": "that defines what that is and because of that um it's well defined what's been",
    "start": "2080599",
    "end": "2087000"
  },
  {
    "text": "sent now if you're sending serialized data um or you're storing data in a",
    "start": "2087000",
    "end": "2092200"
  },
  {
    "text": "serialized format you don't actually need to store the contract or the content of the message with every",
    "start": "2092200",
    "end": "2098200"
  },
  {
    "text": "message because it's it's not going to vary you need to store some tags and some tokens to say this will either be",
    "start": "2098200",
    "end": "2104040"
  },
  {
    "text": "one of these or one of these and you can put that into a bit or a bite but you don't need to do the tag value pairs so",
    "start": "2104040",
    "end": "2110560"
  },
  {
    "text": "when we compare this with uh with these uh if we just do Straight binary um",
    "start": "2110560",
    "end": "2116240"
  },
  {
    "text": "writing out it is very significantly faster than these as well um anybody use jmh before another",
    "start": "2116240",
    "end": "2126040"
  },
  {
    "text": "one of these things really recommend if you want to walk away with something um useful to use this is an amazing Tool uh",
    "start": "2126040",
    "end": "2134160"
  },
  {
    "text": "jmh just search for the Java micro Benchmark harness unbelievably useful um",
    "start": "2134160",
    "end": "2139320"
  },
  {
    "text": "does some really nice stuff draws creates all of these uh very very quickly the downside is it uses Maven",
    "start": "2139320",
    "end": "2145760"
  },
  {
    "text": "which I hate um because I spend so much of my coding time on planes and of course Maven doesn't work on planes",
    "start": "2145760",
    "end": "2151520"
  },
  {
    "text": "because they haven't got Nexus repositories on them yet still waiting for that day um but when when you put in",
    "start": "2151520",
    "end": "2158520"
  },
  {
    "text": "this uh micro Benchmark what you do get out of it is for example you can see this is nanc per op we can see 171 nanc",
    "start": "2158520",
    "end": "2165359"
  },
  {
    "text": "for binary sterilization and with cryo in this particular example um quite",
    "start": "2165359",
    "end": "2171079"
  },
  {
    "text": "quite a bit slower it is still very significantly faster than Java uh than",
    "start": "2171079",
    "end": "2176280"
  },
  {
    "text": "standard Java um benchmarking it across all these different ones Thrift protobuf Etc we can see uh we we got some uh",
    "start": "2176280",
    "end": "2183640"
  },
  {
    "text": "pretty pretty good performance here uh the other interesting thing is this is serialization and der serialization is",
    "start": "2183640",
    "end": "2188800"
  },
  {
    "text": "virtually instantaneous because it's nio this was an open- Source Benchmark that we used um",
    "start": "2188800",
    "end": "2195720"
  },
  {
    "text": "so as realistic as as this particular Benchmark was but um it did mean that we got pretty much instantaneous uh",
    "start": "2195720",
    "end": "2202359"
  },
  {
    "text": "readback on this if we're doing analytics uh this is where the CPU comes",
    "start": "2202359",
    "end": "2209240"
  },
  {
    "text": "in um if you're um analyzing very large",
    "start": "2209240",
    "end": "2214760"
  },
  {
    "text": "amounts of data and your data is stored in Java objects every time you use those",
    "start": "2214760",
    "end": "2219880"
  },
  {
    "text": "Java objects and you've got an array of maybe a 100 a thousand a million because you're searching through an array so you're saying okay I want of my array I",
    "start": "2219880",
    "end": "2226560"
  },
  {
    "text": "want to get everything which is between these dates and between this amount of currency or between these things and I want to process it so I want to do a a",
    "start": "2226560",
    "end": "2233640"
  },
  {
    "text": "Lambda here with a map reduce where I'm um getting the uh the currency amount",
    "start": "2233640",
    "end": "2240920"
  },
  {
    "text": "um for so I'm basically doing a map reduce across each type of currency um",
    "start": "2240920",
    "end": "2246920"
  },
  {
    "text": "creating a starting with a big decimal from zero and I'm getting the amount and I'm basically adding this up so I'm",
    "start": "2246920",
    "end": "2252480"
  },
  {
    "text": "basically for each currency get me the total of of each of the currencies um if",
    "start": "2252480",
    "end": "2258079"
  },
  {
    "text": "it's in Java objects it's very fast if it's in these binary objects I've now",
    "start": "2258079",
    "end": "2263480"
  },
  {
    "text": "got to do a little bit of calculation so you might think it's actually slightly slower because I've now for example with",
    "start": "2263480",
    "end": "2268640"
  },
  {
    "text": "the dates I've now got to do this manipulation of multiplying by 86,400 th000 for example you think okay it",
    "start": "2268640",
    "end": "2275839"
  },
  {
    "text": "should be slower what actually happens is because we now have an array of a million of these or 10,000 or whatever",
    "start": "2275839",
    "end": "2282240"
  },
  {
    "text": "it may be that array is read into the cach because it's in the cache I'm not",
    "start": "2282240",
    "end": "2287760"
  },
  {
    "text": "doing memory fetches so I'm going from my 200 120 nanc fetch time um from",
    "start": "2287760",
    "end": "2294119"
  },
  {
    "text": "memory I'm going straight into the cache now in Java I'll get a lot of it in the cache but when it's stored in binary I",
    "start": "2294119",
    "end": "2300480"
  },
  {
    "text": "can get even more in the cache and we actually find that the binary objects are even faster than Java objects which",
    "start": "2300480",
    "end": "2306960"
  },
  {
    "text": "is sort of weird because um you're actually doing more work but it's actually faster so we have the ability because",
    "start": "2306960",
    "end": "2315160"
  },
  {
    "text": "we're we've encapsulated it even although it's stored in binary we can still do everything that we could do before uh we get some very very high",
    "start": "2315160",
    "end": "2322319"
  },
  {
    "text": "performance and and interesting results but we could do it a lot faster anybody use Hadoop",
    "start": "2322319",
    "end": "2328920"
  },
  {
    "text": "here maybe yeah don't bother anyone use",
    "start": "2328920",
    "end": "2334640"
  },
  {
    "text": "spark yeah little little bit more intelligent way of doing doing it um one of the problems with spark or Hadoop is",
    "start": "2334640",
    "end": "2341599"
  },
  {
    "text": "that as soon as you've gone past the the capabilities of the machine you're working on you've got to distribute you",
    "start": "2341599",
    "end": "2347319"
  },
  {
    "text": "have two choices you you basically run out of CPU power and memory you you can",
    "start": "2347319",
    "end": "2352599"
  },
  {
    "text": "either go to disc so you put everything on the disc and use the existing CPU or you can you can distribute and you can",
    "start": "2352599",
    "end": "2358160"
  },
  {
    "text": "go to more memory which is faster but you hit serialization and uh but you get",
    "start": "2358160",
    "end": "2364599"
  },
  {
    "text": "the the extra CPUs the problem when you do that is let me just show you here uh",
    "start": "2364599",
    "end": "2370319"
  },
  {
    "text": "this is this the speed that it takes in standard spark uh when we're on the same",
    "start": "2370319",
    "end": "2376800"
  },
  {
    "text": "machine but as soon as we hit um what was this one cache serialized memory or",
    "start": "2376800",
    "end": "2381839"
  },
  {
    "text": "or distributed memory we hit this Cliff uh anytime that you distribute you hit",
    "start": "2381839",
    "end": "2387319"
  },
  {
    "text": "this massive Cliff because we have to serialize it so Sparks comes quite standard it's one of the optimizations",
    "start": "2387319",
    "end": "2393359"
  },
  {
    "text": "you can use is is cryo it's a it's the optimized serialization which means that you as you use spark um it's faster to",
    "start": "2393359",
    "end": "2401440"
  },
  {
    "text": "use the serialization you can see there's an improvement um okay these are benchmarks so don't necessarily take",
    "start": "2401440",
    "end": "2407720"
  },
  {
    "text": "them as as sort of fact or figure uh what I would uh ask you to sort of",
    "start": "2407720",
    "end": "2413480"
  },
  {
    "text": "really notice even although it's just a benchmark and all benchmarks can lie there there is a massive difference here",
    "start": "2413480",
    "end": "2419839"
  },
  {
    "text": "between these two because we've now improved the serialization because we're reading this stuff directly back in a",
    "start": "2419839",
    "end": "2426119"
  },
  {
    "text": "format that they CPU can use um using binary uh we can now distribute and we",
    "start": "2426119",
    "end": "2432000"
  },
  {
    "text": "don't have this Cliff as we we hit the um distribution boundary the network where basically it's just like a little",
    "start": "2432000",
    "end": "2438280"
  },
  {
    "text": "a ledge so really just to wrap this up if you can rewrite a little bit of your",
    "start": "2438280",
    "end": "2445680"
  },
  {
    "text": "code keep encapsulation um you can get some incredibly fast um performance out",
    "start": "2445680",
    "end": "2452200"
  },
  {
    "text": "of your data you also don't need to distribute quite so much because you got more data in the memory that you had in the first place uh quite significantly",
    "start": "2452200",
    "end": "2459040"
  },
  {
    "text": "more um it's incredibly fast and from not just from the benchmarks and the",
    "start": "2459040",
    "end": "2465280"
  },
  {
    "text": "test but from actual customers we uh installed this with and some some very large customers using this um going from",
    "start": "2465280",
    "end": "2473440"
  },
  {
    "text": "this is the object and again these particular numbers are just uh benchmarks it uh cycling through um I",
    "start": "2473440",
    "end": "2480920"
  },
  {
    "text": "don't know what this was uh yeah 100,000 fpml messages these are very complex XML but these are binarized Java objects",
    "start": "2480920",
    "end": "2488520"
  },
  {
    "text": "took 22 milliseconds but the binary version only took 17 milliseconds so we're starting to already see some of",
    "start": "2488520",
    "end": "2494960"
  },
  {
    "text": "the performance gains from hitting the cache we have more work to do and the XML was more complicated because you",
    "start": "2494960",
    "end": "2500480"
  },
  {
    "text": "have to work out where the data is um and because you've got recurring elements in the XML it's much more",
    "start": "2500480",
    "end": "2507160"
  },
  {
    "text": "complicated because you've got things that vary in size and you you're stepping over uh data to find out where",
    "start": "2507160",
    "end": "2512520"
  },
  {
    "text": "the the data is that you want despite all of that extra work that had to be done we still got performance increases",
    "start": "2512520",
    "end": "2518000"
  },
  {
    "text": "over standard objects and the data was a fraction of the size U transport friendly",
    "start": "2518000",
    "end": "2523800"
  },
  {
    "text": "um the other Advantage when you run out of memory you just write it to disk you got something like SSD because you can",
    "start": "2523800",
    "end": "2530839"
  },
  {
    "text": "write it to disk and read it back into memory with no paing that's important there's no deserialization to be done",
    "start": "2530839",
    "end": "2537480"
  },
  {
    "text": "you read it directly from dis directly into memory you use it instantly um so",
    "start": "2537480",
    "end": "2543680"
  },
  {
    "text": "to write something out to disk is only a sort of 50% slower than actually using it in memory so a typical machine with",
    "start": "2543680",
    "end": "2551200"
  },
  {
    "text": "um let's say 16 GB of RAM and a terabyte plus of dis you can actually use that",
    "start": "2551200",
    "end": "2556880"
  },
  {
    "text": "terabyte almost as if it was Ram it's slower naturally but almost at the same uh similar performance which is just",
    "start": "2556880",
    "end": "2563880"
  },
  {
    "text": "absolutely impossible using standard Java objects um so what I hopefully this is",
    "start": "2563880",
    "end": "2570440"
  },
  {
    "text": "the last slide uh what I'd like you to walk away with here um is a little bit of um there's a lot of things you can do",
    "start": "2570440",
    "end": "2577400"
  },
  {
    "text": "to improve the code uh that you've got to improve performance um to make small",
    "start": "2577400",
    "end": "2582520"
  },
  {
    "text": "changes to make small tweaks but this is something that U I've",
    "start": "2582520",
    "end": "2587640"
  },
  {
    "text": "taken stuff that we used to do 20 years ago was just standard practice this is something that you can go back and and",
    "start": "2587640",
    "end": "2594160"
  },
  {
    "text": "I've done this with many uh initial clients where we go in we look at the data they've got and within half a day",
    "start": "2594160",
    "end": "2601359"
  },
  {
    "text": "you can start to see some incredible performance uh increases by taking the objects that you've got making a couple",
    "start": "2601359",
    "end": "2607960"
  },
  {
    "text": "of small modifications um from half a day you can go to a week you can say okay we've seen",
    "start": "2607960",
    "end": "2613440"
  },
  {
    "text": "some performance improvements we we'd go to a client for example that had massive amounts of data we'd um take it away",
    "start": "2613440",
    "end": "2620400"
  },
  {
    "text": "from the evening rewrite the class uh put a few little improvements in there they would see a five times performance",
    "start": "2620400",
    "end": "2627040"
  },
  {
    "text": "gain uh five times less memory and all of a sudden uh in the space of one day",
    "start": "2627040",
    "end": "2633119"
  },
  {
    "text": "that gave them something they were about to do a an entire six man month um plus project on and we've done it in",
    "start": "2633119",
    "end": "2639760"
  },
  {
    "text": "one day so if there's anything you can walk away with here it is this is a very very small change you can make to your",
    "start": "2639760",
    "end": "2645359"
  },
  {
    "text": "code that makes a massive difference uh both to the performance and the the uh",
    "start": "2645359",
    "end": "2651480"
  },
  {
    "text": "the way that your CPU uses the memory um I've hopefully got a little",
    "start": "2651480",
    "end": "2656680"
  },
  {
    "text": "bit of time for some questions other than that I'd like to thank you very much any any questions at",
    "start": "2656680",
    "end": "2664000"
  },
  {
    "text": "all yep C++ program here um well I'm I'm from a Microsoft",
    "start": "2665240",
    "end": "2672119"
  },
  {
    "text": "background so don't boo never mind so uh it sounded to me unless I",
    "start": "2672119",
    "end": "2678079"
  },
  {
    "text": "misunderstood that you've kind of ruled out compression as a way to improve performance um but I don't know if",
    "start": "2678079",
    "end": "2684800"
  },
  {
    "text": "you're aware of Microsoft's column store indexes that they they use I'm just wondering whether that would be a good",
    "start": "2684800",
    "end": "2690640"
  },
  {
    "text": "way to get really really good compression factor from your data and also another of the",
    "start": "2690640",
    "end": "2697800"
  },
  {
    "text": "Technologies in memory oltp where they use hash functions so hash buckets I",
    "start": "2697800",
    "end": "2702920"
  },
  {
    "text": "wondered whether combining those kind of two methodologies would maybe make that a viable um you know addition to yeah AB",
    "start": "2702920",
    "end": "2711079"
  },
  {
    "text": "absolutely I think the the hardest thing we found as we were sort of we thought okay this is the uh this is going to",
    "start": "2711079",
    "end": "2717440"
  },
  {
    "text": "change the world in the Java world and then you you go to clients and they were use so many of them were using existing",
    "start": "2717440",
    "end": "2723640"
  },
  {
    "text": "optimizations to get around this um in in similar sorts of ways um a lot of the",
    "start": "2723640",
    "end": "2729119"
  },
  {
    "text": "in-memory data grids already had pre-optimization for certain things and you're effectively not competing with",
    "start": "2729119",
    "end": "2734640"
  },
  {
    "text": "that because you do um complement it but there's an extra little bit of work we had to do to to make that comp",
    "start": "2734640",
    "end": "2742400"
  },
  {
    "text": "complement complimenting work with the existing optimization so in answer to your question yes it can be used um",
    "start": "2742400",
    "end": "2750400"
  },
  {
    "text": "because there's optimization and you're adding more optimization um it's sometimes a little",
    "start": "2750400",
    "end": "2756400"
  },
  {
    "text": "harder to get the two to work nicely together we did manage that in in every case we did manage it um if you're going",
    "start": "2756400",
    "end": "2763200"
  },
  {
    "text": "for Something Completely unoptimized this is a superb optimization if you're going for something already",
    "start": "2763200",
    "end": "2768319"
  },
  {
    "text": "pre-optimized you have a little bit of extra work to do but it did make a very very significant performance Improvement",
    "start": "2768319",
    "end": "2774720"
  },
  {
    "text": "and one of the I mean I I was using Microsoft for back in the 90s before",
    "start": "2774720",
    "end": "2780520"
  },
  {
    "text": "before Max and uh Linux became quite so available so I've I've got a a long background in the Microsoft world as",
    "start": "2780520",
    "end": "2785920"
  },
  {
    "text": "well um and a lot of the clients use Microsoft as well um Microsoft is not the issue",
    "start": "2785920",
    "end": "2792000"
  },
  {
    "text": "it's just the fact you have to pay for the licensing and if you can um basically reduce the amount of machines",
    "start": "2792000",
    "end": "2797920"
  },
  {
    "text": "you're using you reduce the licensing another",
    "start": "2797920",
    "end": "2803480"
  },
  {
    "text": "question I sort a Twitchy hand I thought someone just coughing any more",
    "start": "2803480",
    "end": "2809720"
  },
  {
    "text": "questions okay thank you very",
    "start": "2809720",
    "end": "2813480"
  },
  {
    "text": "much okay",
    "start": "2815839",
    "end": "2819880"
  }
]