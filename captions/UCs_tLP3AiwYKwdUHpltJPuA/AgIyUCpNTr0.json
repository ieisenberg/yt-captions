[
  {
    "start": "0",
    "end": "117000"
  },
  {
    "text": "uh it's really fantastic to be here at Yao today uh and thank you so much for coming and surviving until the very last",
    "start": "4160",
    "end": "10440"
  },
  {
    "text": "session I know I am standing in between you and the reception so I'll try to",
    "start": "10440",
    "end": "15639"
  },
  {
    "text": "make this as engaging and as fun as possible um so yeah and hopefully with lots of food for thought or then you can",
    "start": "15639",
    "end": "22199"
  },
  {
    "text": "just Drown Your sorrows at the end now um I did go onto Amazon Prime uh and I",
    "start": "22199",
    "end": "27920"
  },
  {
    "text": "wanted to order a cannon that would shoot out tim tams uh to keep you all awake um and also I'm from the UK uh in",
    "start": "27920",
    "end": "35680"
  },
  {
    "text": "the UK we don't have tim tams unless you import them here from Australia uh we have what's called a penguin uh which is",
    "start": "35680",
    "end": "41360"
  },
  {
    "text": "definitely not as nice tim tams are infinitely 100 times better so that is one of the many things you Australians",
    "start": "41360",
    "end": "47120"
  },
  {
    "text": "get right and we get fundamentally wrong in the UK but unfortunately it won't arrive in time here in Brisbane so",
    "start": "47120",
    "end": "52640"
  },
  {
    "text": "you're going to have to uh survive with this AI generated image now when I uh",
    "start": "52640",
    "end": "59160"
  },
  {
    "text": "ask people about their experience of running large scale systems Joy is very",
    "start": "59160",
    "end": "65880"
  },
  {
    "text": "much on the bottom of the list of the word that comes to mind you know you're probably thinking about anxiety pressure",
    "start": "65880",
    "end": "72759"
  },
  {
    "text": "being on call um how many folks are are typically on call in their organization here yeah quite a few hands anyone who's",
    "start": "72759",
    "end": "79200"
  },
  {
    "text": "on call today oh I see a few hands so yeah if the page of Duty sound goes off",
    "start": "79200",
    "end": "84439"
  },
  {
    "text": "uh then you know we can all uh you know have that sigh of of of pressure uh you",
    "start": "84439",
    "end": "89479"
  },
  {
    "text": "know that one where the alarm and the pager goes off you know we've sort of normalized running hundreds if not",
    "start": "89479",
    "end": "94880"
  },
  {
    "text": "thousands of instances and you know lots of different systems with varying de",
    "start": "94880",
    "end": "100280"
  },
  {
    "text": "degrees of complexity under the guise of scale uh and with the ever increasing likelihood of failure within our",
    "start": "100280",
    "end": "106799"
  },
  {
    "text": "particular systems but it doesn't need to be this way we need to reframe our understanding and our relationship with",
    "start": "106799",
    "end": "113079"
  },
  {
    "text": "hardware and software uh to run systems more efficiently now I'm going to start",
    "start": "113079",
    "end": "118360"
  },
  {
    "start": "117000",
    "end": "370000"
  },
  {
    "text": "with my conclusion so if you wish to run away then I'm going to do a quick 360 and you could quickly make an escape for the door um I believe many systems of",
    "start": "118360",
    "end": "125960"
  },
  {
    "text": "today don't take full advantage of the hardware that is available to them sometimes this is by Design uh you know",
    "start": "125960",
    "end": "132760"
  },
  {
    "text": "many of our learnings have come from a world where Hardware had different tradeoffs fair not though we're all",
    "start": "132760",
    "end": "138560"
  },
  {
    "text": "practitioners in this room uh and this talk will go into how that's been the case uh you know sort of semi",
    "start": "138560",
    "end": "144720"
  },
  {
    "text": "accidentally and Evolutions in the industry that we can get excited about uh that take advant of the hardware of",
    "start": "144720",
    "end": "151360"
  },
  {
    "text": "today now we're going to take we're going to talk about a whole bunch of you know systems and software and design",
    "start": "151360",
    "end": "157040"
  },
  {
    "text": "patterns and things that going to sound new and novel uh and often associated with complexity but you know I also",
    "start": "157040",
    "end": "164319"
  },
  {
    "text": "subscribe to the boring technology Club if you're a a small organization or if you're just getting started then you",
    "start": "164319",
    "end": "170040"
  },
  {
    "text": "know you don't need to go write all of your systems in Rust unless you're writing something which is running at high frequency uh you know you can get",
    "start": "170040",
    "end": "175959"
  },
  {
    "text": "your cloud provider to run your software for you for you know a couple hundred dollar and you know take advantage of",
    "start": "175959",
    "end": "181640"
  },
  {
    "text": "all of the systems that they've built with all of their learnings oh I should not touch the mic uh sorry about that uh",
    "start": "181640",
    "end": "187920"
  },
  {
    "text": "think of this as more of a retrospective when it comes to engineering uh and you know maybe a bit of a discussion about",
    "start": "187920",
    "end": "193599"
  },
  {
    "text": "where systems are heading especially when you're running at scale before we dive too deep uh quick",
    "start": "193599",
    "end": "199840"
  },
  {
    "text": "introduction my name is sahal nice to meet you uh and I'm a Staff engineer at a company called monzo we are a bank in",
    "start": "199840",
    "end": "205879"
  },
  {
    "text": "the UK uh and I work in the platform group where we provide all of the underlying infrastructure so that",
    "start": "205879",
    "end": "211879"
  },
  {
    "text": "Engineers can focus on building a bank and not have to worry about you know whether their databases are up and",
    "start": "211879",
    "end": "216959"
  },
  {
    "text": "running and whether the cues are continuing to be consumed and all the things like that uh if you have used",
    "start": "216959",
    "end": "222840"
  },
  {
    "text": "Heroku in the past that's the kind of experience that we aim to emulate uh but you know with sufficient guard rails uh",
    "start": "222840",
    "end": "229560"
  },
  {
    "text": "and a very fast paav road if you were in Gregor's talk a little bit earlier uh you know he talked about really high",
    "start": "229560",
    "end": "235439"
  },
  {
    "text": "guard rails and you know a paid road that made full of sand that's the experience that we try to avoid we want",
    "start": "235439",
    "end": "241159"
  },
  {
    "text": "a super fast autoban uh you know with the minimal amount of guard rails uh that makes The Regulators",
    "start": "241159",
    "end": "248439"
  },
  {
    "text": "happy now monzo is a consumer facing Retail Bank in the UK um and we're also available in the US uh we don't have any",
    "start": "248439",
    "end": "255439"
  },
  {
    "text": "physical branches uh funnny enough we actually have an API that we're legally mandated to provide which uh is an API",
    "start": "255439",
    "end": "261440"
  },
  {
    "text": "that lists all of our branches and it's the most reliable API that we have because it just returns an empty list uh",
    "start": "261440",
    "end": "266880"
  },
  {
    "text": "and that hasn't changed in the eight years that we've been operating we power all of our banking features through an",
    "start": "266880",
    "end": "272960"
  },
  {
    "text": "online app uh we're a bit like Mi bank here in Australia I believe um but I argue that we have much much nicer",
    "start": "272960",
    "end": "279199"
  },
  {
    "text": "looking cards and potentially even a better app uh so if any of you Australians Want To Be Inspired about",
    "start": "279199",
    "end": "284400"
  },
  {
    "text": "what banking looks like in the UK uh please come and have a chat with me outside now our whole philosophy at",
    "start": "284400",
    "end": "291199"
  },
  {
    "text": "monzo is to build infrastructure using composable microservices uh we are a",
    "start": "291199",
    "end": "296560"
  },
  {
    "text": "consumer facing Retail Bank uh with direct integration with payment networks like MasterCard and we have a thing in",
    "start": "296560",
    "end": "302759"
  },
  {
    "text": "the in the UK called the fostter payment scheme which allows us to send money to uh our peers uh directly and instantly",
    "start": "302759",
    "end": "309960"
  },
  {
    "text": "and where you know there's many microservices that get involved for example when you tap your card uh to make a card payment this uh includes",
    "start": "309960",
    "end": "317039"
  },
  {
    "text": "things like recording the payment in our banking Ledger uh managing accounts making sure that that is a valid payment",
    "start": "317039",
    "end": "323000"
  },
  {
    "text": "uh you know doing Financial crime checks uh to make sure that a payment is all legitimate and and you have the money",
    "start": "323000",
    "end": "328639"
  },
  {
    "text": "available in your account and it is deducted accordingly now all these uh all these uh interactions need to talk",
    "start": "328639",
    "end": "335319"
  },
  {
    "text": "to databases and cues and other distributed systems and we need them to be quick and mega reliable we only have",
    "start": "335319",
    "end": "342319"
  },
  {
    "text": "a handful of seconds uh from the moment that you tap your card to the point that we actually need to give a decision on",
    "start": "342319",
    "end": "347520"
  },
  {
    "text": "whether we accept that payment or not uh you know ultimately we don't want you to go to Bunnings uh and wait for your",
    "start": "347520",
    "end": "354000"
  },
  {
    "text": "sausage Sizzle um by the way any Australians uh if you could explain to me what a Bunnings is uh and why the why",
    "start": "354000",
    "end": "360840"
  },
  {
    "text": "why a hardware store sells food uh that would be much appreciated is it like an Ikea situation uh yeah please do catch",
    "start": "360840",
    "end": "366759"
  },
  {
    "text": "me afterwards uh and let me know now before I jump into the next few slides",
    "start": "366759",
    "end": "372440"
  },
  {
    "start": "370000",
    "end": "395000"
  },
  {
    "text": "uh in 2012 there was a publication on latency numbers that programers should know and I put some of the numbers on",
    "start": "372440",
    "end": "377680"
  },
  {
    "text": "the screen here and we'll revisit these uh in just a bit to see how things have changed now keep in mind for example the",
    "start": "377680",
    "end": "385080"
  },
  {
    "text": "last number there which is the cost of a dis seek now it's a little bit old and more geared towards spinning hard drives",
    "start": "385080",
    "end": "390680"
  },
  {
    "text": "but it's still important now to reframe how Hardware has changed just within the last",
    "start": "390680",
    "end": "396000"
  },
  {
    "start": "395000",
    "end": "637000"
  },
  {
    "text": "decade now let's go into why all of this matters if you've been part of a computer science course or cracked open",
    "start": "396000",
    "end": "402160"
  },
  {
    "text": "an algorithms book you will have come across a b tree it's used in many popular database implementations and B",
    "start": "402160",
    "end": "407800"
  },
  {
    "text": "trees are fairly fundamental they're used as index implementations in many popular databases if you ever Define an",
    "start": "407800",
    "end": "414080"
  },
  {
    "text": "index using the create index command it will almost certainly be implemented as B tree when represented",
    "start": "414080",
    "end": "420080"
  },
  {
    "text": "in your database system and on disk now if you're familiar with a binary tree you know it's a popular algorithm that",
    "start": "420080",
    "end": "426400"
  },
  {
    "text": "you have a b tree is very similar where you've got a a tree of sorted elements and you can Traverse the tree in order",
    "start": "426400",
    "end": "432840"
  },
  {
    "text": "and doing a search in a in a in a b tree uh is like doing a binary search in a large list you start at the head you",
    "start": "432840",
    "end": "439400"
  },
  {
    "text": "make your way down to the node you're trying to find and you can find any record in this tree uh that I've put on",
    "start": "439400",
    "end": "444639"
  },
  {
    "text": "the screen for example in a maximum of four comparisons which is pretty good going now B trees are self-balancing as",
    "start": "444639",
    "end": "451440"
  },
  {
    "text": "you insert things and they will juggle items around uh to maintain an Optimum distribution and many implementations",
    "start": "451440",
    "end": "458000"
  },
  {
    "text": "will try and keep the height uh which is the number of connections from top to bottom as minimal as possible because it",
    "start": "458000",
    "end": "463560"
  },
  {
    "text": "can affect performance now why is this the case uh these berries are a data structure that lives on the hard drive",
    "start": "463560",
    "end": "470240"
  },
  {
    "text": "as opposed to for example being on Ram uh there is a little bit of an ASX because uh many systems have very large",
    "start": "470240",
    "end": "475879"
  },
  {
    "text": "amounts of ram but let's assume that we're running on on a constrained system you're going to have to uh swap out to",
    "start": "475879",
    "end": "481400"
  },
  {
    "text": "dis uh this allows the B tree to grow uh as your data grows uh without the fear of running out of uh main memory however",
    "start": "481400",
    "end": "488759"
  },
  {
    "text": "if your data is written over time your B tree isn't going to live in a contiguous Place uh on the hard drive and you don't",
    "start": "488759",
    "end": "495159"
  },
  {
    "text": "want your B tree to be splattered all over your hard drive uh but that's what you end up with as your B Tree Grows uh",
    "start": "495159",
    "end": "501520"
  },
  {
    "text": "and you know elements change organically over time this means if you need to do a",
    "start": "501520",
    "end": "506840"
  },
  {
    "text": "change or a lookup in your B tree if you remember for example our search example we had a we had a tree with a height of",
    "start": "506840",
    "end": "512279"
  },
  {
    "text": "four uh you need to do four comparisons and what you're doing is you're waiting for that read right head to continuously",
    "start": "512279",
    "end": "518120"
  },
  {
    "text": "move around on the hard drive to get to the right position on dis where that particular bit might be located and",
    "start": "518120",
    "end": "523399"
  },
  {
    "text": "there's a couple milliseconds right there each time the right read right head has to move uh and you know when",
    "start": "523399",
    "end": "529000"
  },
  {
    "text": "you're compounding all of those operations that's tens of milliseconds just to do a single lookup even on cloud",
    "start": "529000",
    "end": "534959"
  },
  {
    "text": "network storage like EPS which uh may be much more familiar nowadays you need need to do four or five independent IO",
    "start": "534959",
    "end": "541399"
  },
  {
    "text": "operations or iops uh to do what an optimized system might do in a single IO",
    "start": "541399",
    "end": "546880"
  },
  {
    "text": "operation now I'm not sure whether uh you know the vast majority of this audience uh remembers the days of having",
    "start": "546880",
    "end": "552720"
  },
  {
    "text": "to do dis defragmentation uh the general principle was that your data was splattered all over this hard drive and",
    "start": "552720",
    "end": "558760"
  },
  {
    "text": "it grew organically over time uh and the idea of this defragmentation was to lay",
    "start": "558760",
    "end": "564959"
  },
  {
    "text": "out your data uh in a much more contiguous manner to rewrite the m slots on on your hard drive and rewrite data",
    "start": "564959",
    "end": "572000"
  },
  {
    "text": "points within your hard drive uh to maintain some amount of data locality so that when you read data the read right",
    "start": "572000",
    "end": "578320"
  },
  {
    "text": "head would need to move as minimally as possible it's why defragmenting your hard drive made your computer feel much",
    "start": "578320",
    "end": "584279"
  },
  {
    "text": "much faster your files would be relay relid out in a manner which made it much more optimized for how it would be",
    "start": "584279",
    "end": "591480"
  },
  {
    "text": "read now even in the age of solid state hard drives ssds are much more efficient",
    "start": "591480",
    "end": "596959"
  },
  {
    "text": "in Reading sequential data rather than doing doing Random Access now the above chart is from 2009 uh but the premise of",
    "start": "596959",
    "end": "604000"
  },
  {
    "text": "optimizing for reads uh and writes very much exist today because you know sequential is much faster than random",
    "start": "604000",
    "end": "610800"
  },
  {
    "text": "access on many ssds you can read one kilobyte or sometimes even 4 kilobytes of data in a single IO operation uh and",
    "start": "610800",
    "end": "618440"
  },
  {
    "text": "you know that means your system can be much faster if your data is fully local and fits within that 4 kiloby page if",
    "start": "618440",
    "end": "624000"
  },
  {
    "text": "your bites are scattered all over the place then you have a whole bunch of seek operations before you even manage",
    "start": "624000",
    "end": "629320"
  },
  {
    "text": "to read 4 kilobytes ultimately reducing the performance of your application uh or like a database Q whatever you want",
    "start": "629320",
    "end": "636519"
  },
  {
    "text": "to call it now when a lot of the algorithms for many modern systems that we run today",
    "start": "636519",
    "end": "641959"
  },
  {
    "start": "637000",
    "end": "780000"
  },
  {
    "text": "were designed we had a completely different set of trade-offs to read an item from disk we were talking",
    "start": "641959",
    "end": "647360"
  },
  {
    "text": "milliseconds uh with ssds that has reduced by an order of magnitude to submillisecond and now with nvme ssds",
    "start": "647360",
    "end": "654639"
  },
  {
    "text": "that has gone down to nanc and again with throughput a hard drive would saturate at about 200ish megabytes per",
    "start": "654639",
    "end": "661560"
  },
  {
    "text": "second and nowadays with nvme you can Breeze past at multiple gigabytes a second um I saw an nvme drive a couple",
    "start": "661560",
    "end": "668560"
  },
  {
    "text": "months back that could reach over 7 gigabytes per second and some of these drives are getting wickedly quick uh",
    "start": "668560",
    "end": "673959"
  },
  {
    "text": "they are generating so much heat that you need to add a heat sink on top of these drives just to keep them cool",
    "start": "673959",
    "end": "679120"
  },
  {
    "text": "because of the speeds that we're we're utilizing these chips are and all of this is fine and dandy many of these",
    "start": "679120",
    "end": "685560"
  },
  {
    "text": "improvements we can get without any changes in our application at all for example you can get some benefits of you",
    "start": "685560",
    "end": "692600"
  },
  {
    "text": "know added CPU or better Network headr room or faster disc speeds by deploying existing applications on newer Hardware",
    "start": "692600",
    "end": "699720"
  },
  {
    "text": "uh this is uh this is a chart from a Samsung white paper uh showcasing a higher transaction uh count per second",
    "start": "699720",
    "end": "706120"
  },
  {
    "text": "for a MySQL benchmarking workload using the exact same Hardware but with uh",
    "start": "706120",
    "end": "711240"
  },
  {
    "text": "different types of discs so sasis versus nvme versus SATA discs uh and things",
    "start": "711240",
    "end": "716560"
  },
  {
    "text": "like that this might sound a little bit contradictory to the example that I gave a couple slides back because clearly you",
    "start": "716560",
    "end": "722160"
  },
  {
    "text": "know just changing the hardware is significantly increasing our throughput so there might be nothing that we need",
    "start": "722160",
    "end": "727279"
  },
  {
    "text": "to do apart from just uh add more Hardware but with some uh small tweaks",
    "start": "727279",
    "end": "732320"
  },
  {
    "text": "in in the software that we write this can accelerate off the charts and make it take full advantage of the speed",
    "start": "732320",
    "end": "739040"
  },
  {
    "text": "there was a really interesting research article that I came across a couple months back on further improving I/O",
    "start": "739040",
    "end": "744680"
  },
  {
    "text": "performance by translating random right Calles into sequential right Calles uh at the at the Block device layer uh",
    "start": "744680",
    "end": "751880"
  },
  {
    "text": "now this helps reduce wear on the nvme drives itself um and in their benchmarking they achieved a 5 to 11% uh",
    "start": "751880",
    "end": "760560"
  },
  {
    "text": "increase in right transaction throughput uh depending on the file system that was used so for example in this particular test they were using ext4 which is",
    "start": "760560",
    "end": "767399"
  },
  {
    "text": "pretty popular um you know if you're installing uh many modern operating systems so you know 11% Improvement is",
    "start": "767399",
    "end": "774120"
  },
  {
    "text": "is pretty neat uh and you know a lot of people would just take that it's pretty great",
    "start": "774120",
    "end": "779360"
  },
  {
    "text": "now shifting from the world of hard disks even in the world of CPUs uh We've continued to see 10 to 15% year on-year",
    "start": "779360",
    "end": "786440"
  },
  {
    "start": "780000",
    "end": "947000"
  },
  {
    "text": "gains in single thread CPU performance now we're not living mors law we haven't been doing that for a couple decades but",
    "start": "786440",
    "end": "792519"
  },
  {
    "text": "cumulatively we're able to extract significant performance just out of a single thread uh you know we don't even",
    "start": "792519",
    "end": "798480"
  },
  {
    "text": "need to go into multicore architectures and these CPUs are getting uh ever larger you know we can get CPUs with",
    "start": "798480",
    "end": "804519"
  },
  {
    "text": "like up to 48 cores with the thread rippers nowadays it's it's not about CPU",
    "start": "804519",
    "end": "809680"
  },
  {
    "text": "frequency either the caches on the CPUs themselves have been getting larger and larger too and I've plotted the",
    "start": "809680",
    "end": "816399"
  },
  {
    "text": "difference between L1 and L2 caches for different types of AWS instances so these are instances that are in the",
    "start": "816399",
    "end": "821800"
  },
  {
    "text": "cloud that run on the AWS platform uh and you can see how there has been a continuous increase um over time now the",
    "start": "821800",
    "end": "828120"
  },
  {
    "text": "leap may not look that dramatic uh when you look at the bars themselves but you know uh overall in in software",
    "start": "828120",
    "end": "834759"
  },
  {
    "text": "increasing the probability of a cash hit can dramatically reduce the amount of CPU Cycles spent an L1 cash hit remember",
    "start": "834759",
    "end": "841920"
  },
  {
    "text": "is 200 times more faster than going to main memory for a long amount of time our",
    "start": "841920",
    "end": "848079"
  },
  {
    "text": "Focus has been on x86 based processors and now many providers are providing their own Uh custom Hardware custom",
    "start": "848079",
    "end": "854800"
  },
  {
    "text": "silicon with arm-based CPU processors uh at price points which are uh much below",
    "start": "854800",
    "end": "860920"
  },
  {
    "text": "their x86 equivalent often with similar performance or if not better performance ads for example very recently announced",
    "start": "860920",
    "end": "867880"
  },
  {
    "text": "their graviton for chips uh which have over 500 GB a second of memory bandwidth",
    "start": "867880",
    "end": "873320"
  },
  {
    "text": "across 96 CPU cores uh which is pretty massive uh there was a study done by the",
    "start": "873320",
    "end": "878880"
  },
  {
    "text": "folks at honeycomb uh where they write a bunch of telemetry software and they reported a 30% Improvement in price to",
    "start": "878880",
    "end": "886440"
  },
  {
    "text": "Performance of their server Fleet using graviton instances so all they did was swap out their existing existing",
    "start": "886440",
    "end": "892160"
  },
  {
    "text": "software uh onto uh you know different style of Hardware with graviton from x86 to graviton and had a 30% % Improvement",
    "start": "892160",
    "end": "899360"
  },
  {
    "text": "in price to Performance and all they had to do to leverage these new types of instances was to re uh retool their CI",
    "start": "899360",
    "end": "906360"
  },
  {
    "text": "to generate build artifacts for arm instead of x86 to take advantage of the hardware and typically in in many modern",
    "start": "906360",
    "end": "913040"
  },
  {
    "text": "programming languages like go you can do that with a single environment variable and it will just",
    "start": "913040",
    "end": "918519"
  },
  {
    "text": "work now there has been one principle of distributed systems that has held true",
    "start": "918519",
    "end": "923639"
  },
  {
    "text": "over the years and may probably never change which is the network has not gotten any more reliable in general",
    "start": "923639",
    "end": "930120"
  },
  {
    "text": "unless maybe you are the Google Cloud spanner team in which case you say the network is fully reliable um if you're",
    "start": "930120",
    "end": "936560"
  },
  {
    "text": "Building A system that spans over multiple machines and they need to do coordination there's still a heap of",
    "start": "936560",
    "end": "942120"
  },
  {
    "text": "work that you need to do in your application in order to handle Network disruptions but networks are getting",
    "start": "942120",
    "end": "948240"
  },
  {
    "start": "947000",
    "end": "1128000"
  },
  {
    "text": "significantly faster in our original latency numbers it assumed a 1 GB Network which was entirely reasonable a",
    "start": "948240",
    "end": "954480"
  },
  {
    "text": "decade ago but many of the major Cloud providers now give you 10 or 25 G uh 25",
    "start": "954480",
    "end": "960680"
  },
  {
    "text": "gigabit uh per second networking nowadays even on the bog Standard Generation of instances so even on the",
    "start": "960680",
    "end": "966160"
  },
  {
    "text": "cheapest uh Fleet a lot of networking behind the scenes is focused on Hardware offload and bypassing the traditional",
    "start": "966160",
    "end": "973199"
  },
  {
    "text": "operating system stack uh through things like xtp uh because CPUs can't keep up with this super fast uh networking uh",
    "start": "973199",
    "end": "980480"
  },
  {
    "text": "speeds you don't have time to Doo uh you know if you're processing tens of millions of packets a second but there",
    "start": "980480",
    "end": "988079"
  },
  {
    "text": "is one fallacy that has remained true which is you still need to be aware of the pesky Cloud egress charges I think",
    "start": "988079",
    "end": "993720"
  },
  {
    "text": "we have someone from the audience from AWS if you could reduce our our egress bill that would be absolutely fantastic",
    "start": "993720",
    "end": "999040"
  },
  {
    "text": "AWS and the folks of like AWS and gcp are pretty happy to bill you 10 times as",
    "start": "999040",
    "end": "1005040"
  },
  {
    "text": "much with 10 times as much Network performance oh I think I'm going to stop moving my arms because that's going to cause a bit of feedback for all yeah um",
    "start": "1005040",
    "end": "1012759"
  },
  {
    "text": "this is a Google tensor Processing Unit or a TPU and there's a whole bunch of custom silicon uh which is purpose",
    "start": "1012759",
    "end": "1019639"
  },
  {
    "text": "developed for machine learning use cases and a key element of this particular Hardware is all you know all the",
    "start": "1019639",
    "end": "1025240"
  },
  {
    "text": "Fantastic uh design CPU cores uh the processing cores that are available for training but also the network",
    "start": "1025240",
    "end": "1032199"
  },
  {
    "text": "interconnect fabric that is available to these tensor processing units uh which can sustain 10 terabits uh terabits per",
    "start": "1032199",
    "end": "1038760"
  },
  {
    "text": "second when clustered together for really fast distributed workloads so if you're doing a lot of machine learning",
    "start": "1038760",
    "end": "1044600"
  },
  {
    "text": "or like AI or llms and stuff like that you can spread your workloads across uh",
    "start": "1044600",
    "end": "1050480"
  },
  {
    "text": "multiple tpus with terabits of bandwidth in between so coming back to our latency",
    "start": "1050480",
    "end": "1056600"
  },
  {
    "text": "numbers our L1 and L2 caches have become much larger and the likelihood of getting a cach hit and skipping main",
    "start": "1056600",
    "end": "1063000"
  },
  {
    "text": "memory has also gotten much larger you know we didn't get a chance to Deep dive into main memory but we're seeing",
    "start": "1063000",
    "end": "1069039"
  },
  {
    "text": "successive iterations of the spec and now we're on ddr5 which uh brings three to four times higher throughput and",
    "start": "1069039",
    "end": "1076159"
  },
  {
    "text": "bandwidth and this is especially important for multi-core systems memory is also getting significantly larger you",
    "start": "1076159",
    "end": "1081840"
  },
  {
    "text": "can get machines with you know terabytes of memory nowadays uh you can fit your entire data set in memory uh you know",
    "start": "1081840",
    "end": "1088480"
  },
  {
    "text": "for many applications negating the need to go onto disk in the first place hard",
    "start": "1088480",
    "end": "1093760"
  },
  {
    "text": "drives have also gotten significantly quicker removing a really large source of bottleneck if you need to read",
    "start": "1093760",
    "end": "1099400"
  },
  {
    "text": "something off disk in 2005 there was an article uh",
    "start": "1099400",
    "end": "1104799"
  },
  {
    "text": "titled the free lunches over by uh BL called herbut uh and the article talked",
    "start": "1104799",
    "end": "1111000"
  },
  {
    "text": "about the slowing down of Moos law and how the DraStic increases in uh CPU",
    "start": "1111000",
    "end": "1116480"
  },
  {
    "text": "clock speed were coming to an end now I was a little bit too young to understand this article but when you read it in",
    "start": "1116480",
    "end": "1121880"
  },
  {
    "text": "retrospect you know it makes a lot of sense uh it was almost like a crystal ball into the present of today now take",
    "start": "1121880",
    "end": "1128840"
  },
  {
    "start": "1128000",
    "end": "1330000"
  },
  {
    "text": "a second to digest that quote there no matter how fast processors get software",
    "start": "1128840",
    "end": "1134440"
  },
  {
    "text": "consistently finds a new ways to eat up all of that extra speed make a CPU 10",
    "start": "1134440",
    "end": "1139760"
  },
  {
    "text": "times as fast and software will find 10 times as much things to do now between",
    "start": "1139760",
    "end": "1145200"
  },
  {
    "text": "that article in 2005 and the present day we've had a big revolution in the era of",
    "start": "1145200",
    "end": "1150240"
  },
  {
    "text": "cloud computing uh and a consumption-based rental model for Hardware you know gone other days where",
    "start": "1150240",
    "end": "1155960"
  },
  {
    "text": "you know you had to uh justify to your your financial controller or whatever that you needed to spend 10 million uh",
    "start": "1155960",
    "end": "1161919"
  },
  {
    "text": "buying new servers uh when you just spent 10 million the the month before uh because you needed to run your",
    "start": "1161919",
    "end": "1167159"
  },
  {
    "text": "applications at scale uh you know we can now scale for pennies uh just by clicking a few buttons in the",
    "start": "1167159",
    "end": "1173120"
  },
  {
    "text": "AWS console and the Fantastic AWS billing engine is happy to bill you at infat for it uh you know but that means",
    "start": "1173120",
    "end": "1180240"
  },
  {
    "text": "that our software hasn't uh you know been been iterated on we've not got a ton of regard for performance per unit",
    "start": "1180240",
    "end": "1187200"
  },
  {
    "text": "of compute that we're achieving her predicted that the next Frontier will be in optimizing software",
    "start": "1187200",
    "end": "1194200"
  },
  {
    "text": "and at that time you know that Frontier was uh you know declared to be concurrency would be you know all",
    "start": "1194200",
    "end": "1199520"
  },
  {
    "text": "concurrency Engineers today we're all prompt engineers in this room uh but you know we'd be concurrency Engineers you",
    "start": "1199520",
    "end": "1205280"
  },
  {
    "text": "know Engineers had managed to Gro objects and objectoriented programming and concurrency was what we needed to",
    "start": "1205280",
    "end": "1211120"
  },
  {
    "text": "become natural at so Herb's thesis was all about you know becoming much more proficient around efficiency and",
    "start": "1211120",
    "end": "1217960"
  },
  {
    "text": "performance optimization to identify places where we could take advantage of concurrency uh her predicted that",
    "start": "1217960",
    "end": "1224919"
  },
  {
    "text": "languages and paradigms that lead to heavy optimization would find new life",
    "start": "1224919",
    "end": "1230120"
  },
  {
    "text": "and I think in today's era of software that realization is more true than",
    "start": "1230120",
    "end": "1235720"
  },
  {
    "text": "ever cumulatively we use 1% of worldwide power on data centers now you may argue",
    "start": "1235720",
    "end": "1243120"
  },
  {
    "text": "that 1% is not a significant amount compared to other Industries and you know when you look at it in comparison",
    "start": "1243120",
    "end": "1249039"
  },
  {
    "text": "to the monetari and societal value that the computers uh create it might not be",
    "start": "1249039",
    "end": "1254080"
  },
  {
    "text": "that much but our demand for compute is ever increasing and and you know I don't think anyone would in in this room would",
    "start": "1254080",
    "end": "1260600"
  },
  {
    "text": "want to be wasteful there was a really fascinating Intel report and I I found it particularly fascinating because you",
    "start": "1260600",
    "end": "1266640"
  },
  {
    "text": "know Intel wins out as they sell more chips so it's really fascinating that this report came from Intel that I read",
    "start": "1266640",
    "end": "1272080"
  },
  {
    "text": "a couple months back which stated that 50% of greenhouse gases are due to",
    "start": "1272080",
    "end": "1277159"
  },
  {
    "text": "infrastructure and software inefficiency in the data center now 50% that figure",
    "start": "1277159",
    "end": "1282360"
  },
  {
    "text": "on the outset seems really really high but when you think about the software that runs at your organization or if",
    "start": "1282360",
    "end": "1287720"
  },
  {
    "text": "you're consultant you go into many organizations and you see software that is being run when you account for",
    "start": "1287720",
    "end": "1293320"
  },
  {
    "text": "provisioning buffers and runtime overheads and operating system overheads and just bad algorithms and",
    "start": "1293320",
    "end": "1299120"
  },
  {
    "text": "virtualization overheads that inefficiency does accumulate and you can see how that 50% can come",
    "start": "1299120",
    "end": "1305760"
  },
  {
    "text": "about Hardware has gone on a lot faster and has is giving us much more throughput in pretty much all aspects",
    "start": "1305760",
    "end": "1312640"
  },
  {
    "text": "and yet with the systems that we're running we're still scaling into the thousands of instances what is happening",
    "start": "1312640",
    "end": "1317799"
  },
  {
    "text": "in the the world of software that is taking advantage of all of those optimizations most of our multi-threaded",
    "start": "1317799",
    "end": "1324240"
  },
  {
    "text": "applications nowadays follow a shared everything architecture we have all of our data in memory and we work on",
    "start": "1324240",
    "end": "1330159"
  },
  {
    "start": "1330000",
    "end": "1672000"
  },
  {
    "text": "different parts of the same shared address space at the same time naturally if two cores want to access the same",
    "start": "1330159",
    "end": "1336960"
  },
  {
    "text": "parts of data for example let's say that a request comes in and you're writing to a bit of data with another request",
    "start": "1336960",
    "end": "1342520"
  },
  {
    "text": "coming in at the same time that wants to read the same data what you put behind it is a is a mutex to make sure that the",
    "start": "1342520",
    "end": "1348799"
  },
  {
    "text": "two don't collude uh don't Collide sorry uh you need to use a synchronization primitive like a mutex to guard against",
    "start": "1348799",
    "end": "1355320"
  },
  {
    "text": "that particular race condition now with a thread per core design your application is pinned to a particular",
    "start": "1355320",
    "end": "1361200"
  },
  {
    "text": "CPU thread and you Shard your data space uh so that each core is handling a",
    "start": "1361200",
    "end": "1366480"
  },
  {
    "text": "particular portion of that particular data space now this pattern uh hasn't become really ubiquitous in the software",
    "start": "1366480",
    "end": "1372760"
  },
  {
    "text": "that we write today and when I introduce this concept to many Engineers it's the first time that they're hearing about it",
    "start": "1372760",
    "end": "1378320"
  },
  {
    "text": "because it requires a bit of effort your application needs to become aware of the sharded space and also you have to have",
    "start": "1378320",
    "end": "1384600"
  },
  {
    "text": "some element of request steering so that two requests for the same data space land on the same core now you could uh",
    "start": "1384600",
    "end": "1392600"
  },
  {
    "text": "you know you could run all of these request in seral uh but you know by using this sort of architecture you can",
    "start": "1392600",
    "end": "1398480"
  },
  {
    "text": "get rid of the synchronization perimeters while still allowing for elements of concurrency within your",
    "start": "1398480",
    "end": "1404080"
  },
  {
    "text": "system and what that means overall is that you can reduce the number of CPU cont text switches that your application",
    "start": "1404080",
    "end": "1409279"
  },
  {
    "text": "needs to do because that thread is only working on that particular data space within your particular",
    "start": "1409279",
    "end": "1414720"
  },
  {
    "text": "application now it's not only about data though uh data though CPUs also need to",
    "start": "1414720",
    "end": "1420320"
  },
  {
    "text": "contact switch to handle things like Network interrupts and dis interrupts and and other kinds of IO interrupts as",
    "start": "1420320",
    "end": "1426360"
  },
  {
    "text": "Network packets come in for example the packet processing will be widespread across your CPU Calles which means if",
    "start": "1426360",
    "end": "1433360"
  },
  {
    "text": "they are also serving application requests for data uh you know your latency IES are going to suffer in Linux",
    "start": "1433360",
    "end": "1440240"
  },
  {
    "text": "for example you can use pretty uh ingrained systems like irq to pin Network requests to particular cause and",
    "start": "1440240",
    "end": "1446720"
  },
  {
    "text": "but that also means that your application needs to be designed in such a way to leave that particular thread as",
    "start": "1446720",
    "end": "1451799"
  },
  {
    "text": "a network handling thread to maximize efficiency now there was a paper in 2019",
    "start": "1451799",
    "end": "1457480"
  },
  {
    "text": "that measured the impact on T latency by pinning the network interrupt in uh",
    "start": "1457480",
    "end": "1462919"
  },
  {
    "text": "popular open source systems like mcash and sphinx uh to particular CPU CES using irq and they found a 71% reduction",
    "start": "1462919",
    "end": "1471520"
  },
  {
    "text": "in tail latencies uh you know and uh utilizing irq is not complicated uh you",
    "start": "1471520",
    "end": "1477480"
  },
  {
    "text": "can read the man page it's relatively easy there's plenty of blog po out there as well this model of computing isn't",
    "start": "1477480",
    "end": "1484039"
  },
  {
    "text": "very revolutionary systems like engine X have been doing this for absolutely ages and with really great benefit um however",
    "start": "1484039",
    "end": "1491120"
  },
  {
    "text": "this like style of programming can be quite fiddly as you need to get quite deep into the networking stack and build",
    "start": "1491120",
    "end": "1497840"
  },
  {
    "text": "a model for thread-based message passing fortunately there's some fantastic work in the open source world",
    "start": "1497840",
    "end": "1504640"
  },
  {
    "text": "that can help you here if you a C++ user definitely check out the sear framework which I have linked there uh by the",
    "start": "1504640",
    "end": "1510679"
  },
  {
    "text": "folks at sadb and I think there is also an equivalent in Rust and some other programming languages they have a very",
    "start": "1510679",
    "end": "1516679"
  },
  {
    "text": "comprehensive tutorial on how to get started um even if you are a novice to multi-threaded C++ like I",
    "start": "1516679",
    "end": "1524960"
  },
  {
    "text": "am in the world of asynchronous IO you know asynchronous IO in Linux has been pretty complicated as well you know you",
    "start": "1524960",
    "end": "1531640"
  },
  {
    "text": "can get into a world where you'd Implement asynchronous IO in your application but for example your buffers",
    "start": "1531640",
    "end": "1536799"
  },
  {
    "text": "would get full or the io wasn't quite matching what your particular dis was doing or the file system was expecting",
    "start": "1536799",
    "end": "1543600"
  },
  {
    "text": "or you'd filled your dis request cue which meant that asynchronous core that you were doing uh became synchronous and",
    "start": "1543600",
    "end": "1549559"
  },
  {
    "text": "blocking there was a lot of memory overhead too with asynchronous IO so if you were doing lots of small requests",
    "start": "1549559",
    "end": "1556000"
  },
  {
    "text": "that overhead accumulated really really rapidly I uring for example uh provides a new interface and apis at the kernel",
    "start": "1556000",
    "end": "1563200"
  },
  {
    "text": "level uh for Linux based systems which addresses these problems and iur ring is not that complicated in its nature it is",
    "start": "1563200",
    "end": "1569600"
  },
  {
    "text": "two ring buffer two ring buffers you submit your request in the submission queue and then you can uh fetch the",
    "start": "1569600",
    "end": "1576200"
  },
  {
    "text": "result in the completion queue now here are two charts of random",
    "start": "1576200",
    "end": "1582200"
  },
  {
    "text": "reads and writes for a 4 kilobyte block size uh with and without iur ring now",
    "start": "1582200",
    "end": "1587880"
  },
  {
    "text": "remember towards the beginning of the talk I was talking about you know random reads in the context of be trees is where it sort of coms full circle if we",
    "start": "1587880",
    "end": "1595120"
  },
  {
    "text": "were using the standard Linux async IO operations there's a cap on the number of operations that we can achieve before",
    "start": "1595120",
    "end": "1601600"
  },
  {
    "text": "all of our resources are starved waiting for dis that chart on the bottom there shows a massive Delta on random reads",
    "start": "1601600",
    "end": "1608520"
  },
  {
    "text": "with iing it's a significant Improvement uh it unlocks a significant amount of performance and uh you know sort of",
    "start": "1608520",
    "end": "1615480"
  },
  {
    "text": "again questions the notion around discs and Hardware being the bottleneck you know for a long amount of time we've",
    "start": "1615480",
    "end": "1621000"
  },
  {
    "text": "said oh you know Hardware hasn't kept up with the world of software um you know these benchmarks were done on exactly",
    "start": "1621000",
    "end": "1627159"
  },
  {
    "text": "the same system the only thing that we've changed uh is the software implementation that we're using",
    "start": "1627159",
    "end": "1633159"
  },
  {
    "text": "underneath over the last couple months a popular open source Library lib UV um you know added async IO support and I",
    "start": "1633159",
    "end": "1640080"
  },
  {
    "text": "love the particular comment that the uh the maintainer put which is performance looks great an ax increase in throughput",
    "start": "1640080",
    "end": "1646520"
  },
  {
    "text": "uh has been observed now it's always important to be wary about benchmarks and you know synthetic workloads and",
    "start": "1646520",
    "end": "1652320"
  },
  {
    "text": "stuff like that but you know um for this is a multiplier benefit in in in a core",
    "start": "1652320",
    "end": "1657559"
  },
  {
    "text": "library that is used across many systems and anyone anything that depends on lib UV in for example like node and uh",
    "start": "1657559",
    "end": "1664000"
  },
  {
    "text": "things like that will get an immediate benefit in their IO operations so this is work that is happening right now in",
    "start": "1664000",
    "end": "1669720"
  },
  {
    "text": "the community moving away from specific features and into the world of",
    "start": "1669720",
    "end": "1675840"
  },
  {
    "start": "1672000",
    "end": "1783000"
  },
  {
    "text": "programming languages programming language have also seen rapid development to really take advantage of",
    "start": "1675840",
    "end": "1681799"
  },
  {
    "text": "Hardware that is closer to the metal you usually had to resort to writing C or C++ uh you know which is difficult error",
    "start": "1681799",
    "end": "1688919"
  },
  {
    "text": "prone I've had my fair share of uh you know failures and and exceptions and",
    "start": "1688919",
    "end": "1694519"
  },
  {
    "text": "with the extremely rapid rise of system programming languages like rust and Zig that is a much much much better",
    "start": "1694519",
    "end": "1700600"
  },
  {
    "text": "experience it's a much better developer experience uh and they're continuing to become safer and more delightful the",
    "start": "1700600",
    "end": "1706559"
  },
  {
    "text": "barrier to entry for programmers like me uh is becoming much lower um if you have the opportunity I",
    "start": "1706559",
    "end": "1713960"
  },
  {
    "text": "would strongly encourage you to have a go with rust uh I'm not a fanboy or anything uh but I was amazed at how",
    "start": "1713960",
    "end": "1719919"
  },
  {
    "text": "seamless it is to actually get started and even integrate with other existing programming languages like python using",
    "start": "1719919",
    "end": "1725960"
  },
  {
    "text": "libraries like the P3 Bridge I've worked with cpython uh quite extensively uh to",
    "start": "1725960",
    "end": "1731120"
  },
  {
    "text": "write some stuff that was pretty slow in Python into see and call it from python uh but it's really really difficult to",
    "start": "1731120",
    "end": "1738039"
  },
  {
    "text": "get right and maintain and package and the rust ecosystem have uh you know they've made it really really simple",
    "start": "1738039",
    "end": "1743919"
  },
  {
    "text": "with tools like maturing the developer experience and the ergonomics are much much",
    "start": "1743919",
    "end": "1748960"
  },
  {
    "text": "better there was some research in 2017 on the Energy Efficiency uh across",
    "start": "1748960",
    "end": "1754240"
  },
  {
    "text": "program languages and they use the same like you know data processing test Suite uh with their implementation in in",
    "start": "1754240",
    "end": "1760960"
  },
  {
    "text": "different programming languages and then rank the results for energy and time usage now we're not here to start",
    "start": "1760960",
    "end": "1767360"
  },
  {
    "text": "program language debate especially for the last Talk of the session uh but it's interesting to see how different programming languages compare you know",
    "start": "1767360",
    "end": "1774440"
  },
  {
    "text": "python for example is marked as being 75 times less efficient than C Russ and",
    "start": "1774440",
    "end": "1780360"
  },
  {
    "text": "that is a massive massive Delta now many moons ago I used to work for a company that dealt with public",
    "start": "1780360",
    "end": "1786440"
  },
  {
    "start": "1783000",
    "end": "2001000"
  },
  {
    "text": "transit data uh so you know think like buses and trains and trams and things like that and uh part of public transit",
    "start": "1786440",
    "end": "1792600"
  },
  {
    "text": "data is dealing with schedules and schedules have lots and lots of timestamps that we needed to pass and",
    "start": "1792600",
    "end": "1797760"
  },
  {
    "text": "process and understand now all of these in our in our interpretation were ISO 8601 Tim stamps uh so we didn't have",
    "start": "1797760",
    "end": "1804159"
  },
  {
    "text": "much variation to worry about um and what we saw is that in the hot path this was taking a significant amount of time",
    "start": "1804159",
    "end": "1810519"
  },
  {
    "text": "in the world of python and when we changed that out to a c-based function uh that code saw an instant 10x speed up",
    "start": "1810519",
    "end": "1818000"
  },
  {
    "text": "uh and so this is how I got really interested in the space of software efficiency it's quite a minor change you",
    "start": "1818000",
    "end": "1823360"
  },
  {
    "text": "know we introduced an open source library and changed the implementation uh and we knew the the types of time",
    "start": "1823360",
    "end": "1829000"
  },
  {
    "text": "stamps that we were handling uh and you know we saw a 10x Improvement which is absolutely massive uh if you understand",
    "start": "1829000",
    "end": "1835080"
  },
  {
    "text": "the constraints of your system you can make assumptions rather than using generalized code out there uh that need",
    "start": "1835080",
    "end": "1841640"
  },
  {
    "text": "to cater for every single permutation now I wanted to like get into the practice and actually see how",
    "start": "1841640",
    "end": "1847880"
  },
  {
    "text": "easy would this be would it be to actually translate the C library I was using to rust uh now if you are used to",
    "start": "1847880",
    "end": "1853720"
  },
  {
    "text": "writing C libraries uh that interact with python there are a lot of foot guns you know you need to deal with pi object",
    "start": "1853720",
    "end": "1859360"
  },
  {
    "text": "all over the place and deal with the global interpreter log and you know it is it is a big hassle uh and then you",
    "start": "1859360",
    "end": "1864840"
  },
  {
    "text": "got to figure out your magic incantation with the make file and setup.py and it's really really a big pain uh there is an",
    "start": "1864840",
    "end": "1871559"
  },
  {
    "text": "open source Library called Maturin uh you know which provides a very nice ux for generating all of these bindings and",
    "start": "1871559",
    "end": "1877639"
  },
  {
    "text": "it generates a python wheel um and it will give you a function where you can",
    "start": "1877639",
    "end": "1882960"
  },
  {
    "text": "put your rust code so uh next few slides we have just a little bit of code you don't need to",
    "start": "1882960",
    "end": "1888919"
  },
  {
    "text": "read and understand it all we don't have time for rust 101 effectively what we have is I created a library called R ISO",
    "start": "1888919",
    "end": "1895720"
  },
  {
    "text": "8601 uh it generated all of this code and it gave me a PA date time function where I could add our",
    "start": "1895720",
    "end": "1902000"
  },
  {
    "text": "implementation so this is what we need to do you've got a string that looks like this you need to extract out all of",
    "start": "1902000",
    "end": "1907399"
  },
  {
    "text": "the components and convert it into a python object and we added uh our",
    "start": "1907399",
    "end": "1913240"
  },
  {
    "text": "implementation to effectively pause all of these numbers and one of the big benefit that we get for free is that",
    "start": "1913240",
    "end": "1919000"
  },
  {
    "text": "even as part of this you can raise exceptions within rust and they will get raised as python exceptions so for",
    "start": "1919000",
    "end": "1924600"
  },
  {
    "text": "example uh when we pass in a valid string we get a valid python object out uh but when we pass in a bad Tim stamp",
    "start": "1924600",
    "end": "1931399"
  },
  {
    "text": "uh you know it's given us a a very pretty exception and all of this is handled by uh you know the bridge",
    "start": "1931399",
    "end": "1937799"
  },
  {
    "text": "between P3 uh rust and python maturan handles all of the",
    "start": "1937799",
    "end": "1943840"
  },
  {
    "text": "packaging and and you know building a wheel and then you can put that out there and it's really really easy to you",
    "start": "1943840",
    "end": "1949120"
  },
  {
    "text": "so it's really really nice now I'm not advocating that we stop what we're doing now and you know immediately switch all",
    "start": "1949120",
    "end": "1955240"
  },
  {
    "text": "of our all of our programming to using C or or rust or any of the new hot Frameworks that are that are coming out",
    "start": "1955240",
    "end": "1961080"
  },
  {
    "text": "there if there is a takeaway consider the inflection point where you know the runtime cost of compute power uh for",
    "start": "1961080",
    "end": "1968440"
  },
  {
    "text": "your core or large systems has surpass the development uh or organizational",
    "start": "1968440",
    "end": "1973960"
  },
  {
    "text": "costs you know often we've optimized for the latter you know we optimized for organizational cost without any regard",
    "start": "1973960",
    "end": "1980120"
  },
  {
    "text": "for refactoring or improving or profiling software because you know squeezing out runtime performance was",
    "start": "1980120",
    "end": "1985519"
  },
  {
    "text": "really really complex you know we called it you know premature optimization nowadays abstractions have gotten a lot",
    "start": "1985519",
    "end": "1992279"
  },
  {
    "text": "simpler Hardware has changed quite significantly and there was a big focus on the world of software with new",
    "start": "1992279",
    "end": "1998639"
  },
  {
    "text": "Frameworks and systems and tools to take advantage now aside from Hardware",
    "start": "1998639",
    "end": "2003919"
  },
  {
    "start": "2001000",
    "end": "2327000"
  },
  {
    "text": "related optimizations there's been a big Focus on wide ranging improvements in",
    "start": "2003919",
    "end": "2009240"
  },
  {
    "text": "programming ecosystems in Java for example there's been a big focus on language features uh but the one that",
    "start": "2009240",
    "end": "2015360"
  },
  {
    "text": "I've been most excited about that has been released with Java 17 and now we have Java 21 which is also an LTS",
    "start": "2015360",
    "end": "2020799"
  },
  {
    "text": "release is the new zgc garbage collector I don't I can't believe that I'm getting excited about a garbage collector but",
    "start": "2020799",
    "end": "2026600"
  },
  {
    "text": "it's really really cool and its goal is to give submillisecond Max pause times",
    "start": "2026600",
    "end": "2032320"
  },
  {
    "text": "uh regardless of your HEAP size now I enabled this for our Kafka clusters in production a couple months back and have",
    "start": "2032320",
    "end": "2038880"
  },
  {
    "text": "been able to see these submillisecond pause times with my own eyes you know it just completely reduces tail latency so",
    "start": "2038880",
    "end": "2045760"
  },
  {
    "text": "this isn't some distant reality this is production ready today and being used by many organizations for many of us that",
    "start": "2045760",
    "end": "2052398"
  },
  {
    "text": "are programming or writing Java applications for example pause times you know a large contribution to tail",
    "start": "2052399",
    "end": "2057960"
  },
  {
    "text": "latency and reduce throughput it's ingrained in Us in the software that we write that you know we minimize the",
    "start": "2057960",
    "end": "2063839"
  },
  {
    "text": "amount of garbage uh you know but often operating systems and you know large",
    "start": "2063839",
    "end": "2069240"
  },
  {
    "text": "scale systems like Cassandra or Kafka where we don't want to go and change the underlying implementation uh yeah and",
    "start": "2069240",
    "end": "2075599"
  },
  {
    "text": "you know some amount of garbage is going to be inevitable so it's really exciting to see a world where we're you know",
    "start": "2075599",
    "end": "2081358"
  },
  {
    "text": "edging towards a pauseless Java now I mention all of this because I know so many companies that are still running",
    "start": "2081359",
    "end": "2087800"
  },
  {
    "text": "Java 8 uh there was a jet brain survey uh a couple of days back that I think",
    "start": "2087800",
    "end": "2093200"
  },
  {
    "text": "the number was 41% Java 8 came out when the iPhone iPhone 6 came out think about",
    "start": "2093200",
    "end": "2098359"
  },
  {
    "text": "that for a second uh even uh profiling your own software uh is really really important",
    "start": "2098359",
    "end": "2105359"
  },
  {
    "text": "so for example this is a a workload that we have at monzo uh we have a Kafka cluster that's running uh and alongside",
    "start": "2105359",
    "end": "2112040"
  },
  {
    "text": "that Kafka cluster we want observability uh we want to know what is that Kafka cluster doing oops what that Kafka is",
    "start": "2112040",
    "end": "2118720"
  },
  {
    "text": "doing so we run an open source exporter called the jmx Prometheus exporter which",
    "start": "2118720",
    "end": "2123760"
  },
  {
    "text": "is embedded as a Java agent now uh I was uh doing a bit of profiling on aafa",
    "start": "2123760",
    "end": "2129160"
  },
  {
    "text": "cluster and I noticed that this jmx agent was taking a significant amount of CPU time uh and which was affecting our",
    "start": "2129160",
    "end": "2136280"
  },
  {
    "text": "Kafka performance so I uh wrote a small fix which minimized the amount of scraping you need to do this fix is now",
    "start": "2136280",
    "end": "2142440"
  },
  {
    "text": "in the open source world as well by by another contributor so thank you for that uh that is relevant to you and we",
    "start": "2142440",
    "end": "2148280"
  },
  {
    "text": "saw a dramatic decrease in CPU usage uh you know we basically reduced our CPU usage by half uh for this particular",
    "start": "2148280",
    "end": "2155599"
  },
  {
    "text": "Kafka cluster uh and you know that was a net benefit because we didn't need to scale up this cafka cluster any longer",
    "start": "2155599",
    "end": "2162400"
  },
  {
    "text": "these tools for profiling like the Java flight recorder now come a standard in the Java runtime from JRE 11 onwards",
    "start": "2162400",
    "end": "2169119"
  },
  {
    "text": "they just need to be enabled and exposed no JS for example has a dedicated performance team and they are",
    "start": "2169119",
    "end": "2175960"
  },
  {
    "text": "doing some fantastic work to tune performance uh of many underlying apis that Engineers rely on now many of these",
    "start": "2175960",
    "end": "2183160"
  },
  {
    "text": "improvements are non-breaking uh micro tweaks that culminate into large scale improvements for example reading an asky",
    "start": "2183160",
    "end": "2189440"
  },
  {
    "text": "encoded file which is a pretty common use case uh has seen a large jump in in node 18 uh with added",
    "start": "2189440",
    "end": "2196000"
  },
  {
    "text": "throughput python as well is getting a massive speed up there small task force funded by the wonderful Folks at",
    "start": "2196000",
    "end": "2201520"
  },
  {
    "text": "Microsoft uh and lead by the uh python benevolent dictator for Life G van rosam",
    "start": "2201520",
    "end": "2206599"
  },
  {
    "text": "to go and tackle some of the performance bottlenecks in Python so with some minimal work handling deprecations it",
    "start": "2206599",
    "end": "2212800"
  },
  {
    "text": "can be as simple as upgrading your python runtime to 311 and taking advantage of some of these speed",
    "start": "2212800",
    "end": "2218480"
  },
  {
    "text": "improvements in production you don't need to go and change your entire programming tool chain you don't need to",
    "start": "2218480",
    "end": "2223640"
  },
  {
    "text": "go and rewrite all of your systems uh but you know being able to keep on top of your toll chain can still yield these",
    "start": "2223640",
    "end": "2230440"
  },
  {
    "text": "massive improvements in in the software that you run now earlier on I talked about uh you know Java flight recorder",
    "start": "2230440",
    "end": "2237440"
  },
  {
    "text": "and Mission Control so for example at monzo all of our systems are written in go and within go you can expose a",
    "start": "2237440",
    "end": "2244480"
  },
  {
    "text": "profiling server uh that allows you to grab profiles of running systems now",
    "start": "2244480",
    "end": "2249680"
  },
  {
    "text": "from day one we've had this enabled in our production cluster um and the profiling tour allows you to grab these",
    "start": "2249680",
    "end": "2255520"
  },
  {
    "text": "profiles uh with you know no impact with very minimal impact on on on latency of",
    "start": "2255520",
    "end": "2261319"
  },
  {
    "text": "running applications and we've exposed this to all of our Engineers to be able to access so any engineer that is",
    "start": "2261319",
    "end": "2267200"
  },
  {
    "text": "curious can go in and grab a profile and you know there is no like memory data that is leaked into the profile it's a",
    "start": "2267200",
    "end": "2273599"
  },
  {
    "text": "really really cool piece of software um and this a great cap capability for example during incidents uh where we",
    "start": "2273599",
    "end": "2279240"
  },
  {
    "text": "have a system using more resources than we think uh or or that we assume it",
    "start": "2279240",
    "end": "2284280"
  },
  {
    "text": "should be serving for the number of requests it's serving it's also really great uh you know we have a channel on our slack Channel called graph trending",
    "start": "2284280",
    "end": "2290240"
  },
  {
    "text": "downwards uh and it's where Engineers can you know take uh profiles of systems and uh make an improvement with the code",
    "start": "2290240",
    "end": "2297440"
  },
  {
    "text": "uh and deploy it and see a decrease in CPU which ultimately means we reduce our costs now that last bit is really really",
    "start": "2297440",
    "end": "2304680"
  },
  {
    "text": "important you know we've developed a got intuition based on our practices and how much performance we should expect it's",
    "start": "2304680",
    "end": "2311800"
  },
  {
    "text": "not an exact science but you know typically a service can service tens of thousands of requests per CPU core that",
    "start": "2311800",
    "end": "2318160"
  },
  {
    "text": "is allocated so if you're running a service which can only service 10 requests per CPU core it's definitely",
    "start": "2318160",
    "end": "2325000"
  },
  {
    "text": "worth probing into that if you have an existing application where you can't add profiling tools",
    "start": "2325000",
    "end": "2330880"
  },
  {
    "start": "2327000",
    "end": "2575000"
  },
  {
    "text": "maybe because it's closed Source or you don't want to go and modify the source code and figure out how it is built you",
    "start": "2330880",
    "end": "2335960"
  },
  {
    "text": "can still gain gain some insights through uh you know BPF and ebpf tours uh which can leverage kernel based",
    "start": "2335960",
    "end": "2342040"
  },
  {
    "text": "tracing uh assuming that you're on Linux 4 One or above now my favorite tool",
    "start": "2342040",
    "end": "2347200"
  },
  {
    "text": "chain in uh in this tool box uh continues to be BPF Trace uh I like to",
    "start": "2347200",
    "end": "2352280"
  },
  {
    "text": "use it even alongside the language specific profiling tools because it gives a really good insight into the",
    "start": "2352280",
    "end": "2358800"
  },
  {
    "text": "file system and networking stack via CIS tracking now all of the tours and arrows",
    "start": "2358800",
    "end": "2363920"
  },
  {
    "text": "are things that can be probed within your system so there is really no excuse to get deeper into the hardware and get",
    "start": "2363920",
    "end": "2370319"
  },
  {
    "text": "better understanding of the hardware you can download all of these tools are open source that you can grab and modify uh",
    "start": "2370319",
    "end": "2376640"
  },
  {
    "text": "so and there is not a lot of uh operational overhead to running these things in production assuming that you",
    "start": "2376640",
    "end": "2381880"
  },
  {
    "text": "have access to the to the system that is underlying and if not then have your uh operations folks you know give you uh",
    "start": "2381880",
    "end": "2388319"
  },
  {
    "text": "exposure to these tools because they're not going to affect your runtime performance and they're not going to leak any",
    "start": "2388319",
    "end": "2393880"
  },
  {
    "text": "data with shifts in both hardware and and software there was a cultural shift",
    "start": "2393880",
    "end": "2399160"
  },
  {
    "text": "in writing and sometimes rewriting core software to take better advantage of the hardware and we can all play a part in",
    "start": "2399160",
    "end": "2406200"
  },
  {
    "text": "that uh by evaluating our systems profiling our systems understanding understanding the the benefits of the",
    "start": "2406200",
    "end": "2412760"
  },
  {
    "text": "hardware that we're running uh behind understanding the power that is available to us in modern Computing we",
    "start": "2412760",
    "end": "2418640"
  },
  {
    "text": "can all have an element of mechanical sympathy it can start with profiling and optimizing bottlenecks making sure that",
    "start": "2418640",
    "end": "2425240"
  },
  {
    "text": "you are taking full advantage of enhancements in your particular programming language make sure that your",
    "start": "2425240",
    "end": "2430520"
  },
  {
    "text": "code is not creating tons and tons of garbage uh you know making sure that your kernels are are updated so that you",
    "start": "2430520",
    "end": "2436599"
  },
  {
    "text": "have access to new apis like iing um and make sure that you are tuning and upgrading your system over",
    "start": "2436599",
    "end": "2442960"
  },
  {
    "text": "time now throughout this entire presentation apart from the the can with the tim tams I've resisted talking about",
    "start": "2442960",
    "end": "2449160"
  },
  {
    "text": "AI uh and I'm not going to go deep now it's too late in the day for that uh but you know we're at a turning point where",
    "start": "2449160",
    "end": "2454960"
  },
  {
    "text": "generative AI has captured the minds of the masses um but one you know big uh",
    "start": "2454960",
    "end": "2460920"
  },
  {
    "text": "debate in the industry is the sheer amount of compute power that is required to train and operate these models and",
    "start": "2460920",
    "end": "2467400"
  },
  {
    "text": "there's low hanging fruit in those in this space too you know llama for example is a folks is a is a model by",
    "start": "2467400",
    "end": "2473000"
  },
  {
    "text": "the folks at meta and there was a popular open- Source implementation um and there was an excellent pull request",
    "start": "2473000",
    "end": "2478640"
  },
  {
    "text": "a couple months back uh that tweak the file format to take advantage of mmap uh which led to 100x Improvement in low",
    "start": "2478640",
    "end": "2485480"
  },
  {
    "text": "times and and half as much memory used uh at runtime so old tricks like M map",
    "start": "2485480",
    "end": "2491760"
  },
  {
    "text": "has been known for many decades and memory alignment can still yield massive benefits even in systems that we are",
    "start": "2491760",
    "end": "2497800"
  },
  {
    "text": "writing today uh that are you know supposedly running the next generation of user interaction and",
    "start": "2497800",
    "end": "2504119"
  },
  {
    "text": "Computing now here is a little bit of a hot take uh so please don't mob me especially at this hour uh most of our",
    "start": "2504119",
    "end": "2510839"
  },
  {
    "text": "most of the systems we build are glorified data processors we take some data from one end we trans it and we put",
    "start": "2510839",
    "end": "2517760"
  },
  {
    "text": "that data somewhere else um at infinum uh and there is noow hanging fruit even",
    "start": "2517760",
    "end": "2523520"
  },
  {
    "text": "at that transformation layer too uh chances are that many of us work with Jason on a daily basis take a profile of",
    "start": "2523520",
    "end": "2529880"
  },
  {
    "text": "your systems and chances are uh you know there's a large portion of cumulative",
    "start": "2529880",
    "end": "2535319"
  },
  {
    "text": "compute within your systems that is just serialization and deserialization and even in the world of Json paes you know",
    "start": "2535319",
    "end": "2542880"
  },
  {
    "text": "they are getting a fine-tuning under a magnifying gloss there a particular project that I've been interested in",
    "start": "2542880",
    "end": "2547960"
  },
  {
    "text": "called Sim djon which uh uses processor instructions that are available in uh processors that I've been running for",
    "start": "2547960",
    "end": "2553920"
  },
  {
    "text": "multiple decades uh single instruction multiple data and there's an open source C++ library and there's bindings in many",
    "start": "2553920",
    "end": "2560400"
  },
  {
    "text": "many programming languages uh uh and you know uh you can you can install this and",
    "start": "2560400",
    "end": "2565880"
  },
  {
    "text": "you can pause Json at gigabytes per second so there are optimizations opportunities at every layer and uh many",
    "start": "2565880",
    "end": "2572839"
  },
  {
    "text": "layers that we work with on a daily basis let's go back to the statement at the",
    "start": "2572839",
    "end": "2578760"
  },
  {
    "start": "2575000",
    "end": "2684000"
  },
  {
    "text": "beginning of my talk many of the systems we rely on are built for an era where",
    "start": "2578760",
    "end": "2584119"
  },
  {
    "text": "Hardware was quite different the bottleneck a decade ago was present in hard drives and Main memory and and uh",
    "start": "2584119",
    "end": "2591040"
  },
  {
    "text": "the networking stack and things like that but today Hardware has gone so fast the bottleneck is firmly uh in how",
    "start": "2591040",
    "end": "2597720"
  },
  {
    "text": "quickly we can execute uh with our software it's staring us right in the face in many of our organizations we",
    "start": "2597720",
    "end": "2604480"
  },
  {
    "text": "often put up faux barriers faux guard rails that stop us from taking advantage of this of these uh of these Hardware",
    "start": "2604480",
    "end": "2610920"
  },
  {
    "text": "improvements you know this room is full of uh smart leaders and Architects and we have a perfect chance to influence uh",
    "start": "2610920",
    "end": "2618520"
  },
  {
    "text": "changes in culture within our organizations these improvements are in long-term support uh and are in release",
    "start": "2618520",
    "end": "2625319"
  },
  {
    "text": "versions so there's very little reason to be stuck on old versions of java you can convince your security teams you",
    "start": "2625319",
    "end": "2631200"
  },
  {
    "text": "know you're missing out on many months of security uh many years of security patches you don't need to be stuck on",
    "start": "2631200",
    "end": "2636480"
  },
  {
    "text": "older versions of python you know organizations like Amazon and Microsoft are using program languages like rust",
    "start": "2636480",
    "end": "2642960"
  },
  {
    "text": "for critical infrastructure there's no reason why you can't use it for your companies what we've also seen is that",
    "start": "2642960",
    "end": "2650040"
  },
  {
    "text": "there are tools uh out there that allows our software to keep up with Pace there",
    "start": "2650040",
    "end": "2655520"
  },
  {
    "text": "are features being introduced at the kernel level and within programming languages and programming paradigms and",
    "start": "2655520",
    "end": "2661240"
  },
  {
    "text": "libraries which we can take advantage of uh simply by upgrading or or changing",
    "start": "2661240",
    "end": "2666760"
  },
  {
    "text": "the way that we write software by keeping Pace we can use less compute power less energy less resources for the",
    "start": "2666760",
    "end": "2674040"
  },
  {
    "text": "same level of output conversely we can build and and Empower richer systems uh",
    "start": "2674040",
    "end": "2679880"
  },
  {
    "text": "by taking full advantage of the hardware that is available to us today and with that thank you so much for",
    "start": "2679880",
    "end": "2687760"
  },
  {
    "start": "2684000",
    "end": "2693000"
  },
  {
    "text": "listening",
    "start": "2691079",
    "end": "2694079"
  }
]