[
  {
    "text": "[Applause]",
    "start": "4130",
    "end": "8280"
  },
  {
    "text": "okay well uh thanks for coming and uh I",
    "start": "8280",
    "end": "11519"
  },
  {
    "text": "hope to somebody said to me yesterday",
    "start": "11519",
    "end": "14519"
  },
  {
    "text": "don't pull any punches and I said I",
    "start": "14519",
    "end": "17039"
  },
  {
    "text": "don't think there's any risk of that I",
    "start": "17039",
    "end": "19080"
  },
  {
    "text": "think uh I think uh it's going to be fun",
    "start": "19080",
    "end": "22640"
  },
  {
    "text": "right so the first thing to say is I",
    "start": "22640",
    "end": "25199"
  },
  {
    "text": "love you Lambda yeah like everybody here",
    "start": "25199",
    "end": "29080"
  },
  {
    "text": "Lambda calcul is wonderful I fell in",
    "start": "29080",
    "end": "31439"
  },
  {
    "text": "love with Lambda calculus decades ago",
    "start": "31439",
    "end": "33879"
  },
  {
    "text": "and I'm still in love yeah I mean it's t",
    "start": "33879",
    "end": "38680"
  },
  {
    "text": "incomplete well there are lots of T",
    "start": "38680",
    "end": "40719"
  },
  {
    "text": "incomplete calculi it supports",
    "start": "40719",
    "end": "43280"
  },
  {
    "text": "equational reasoning you can replace",
    "start": "43280",
    "end": "45399"
  },
  {
    "text": "equals with equals and there some do and",
    "start": "45399",
    "end": "49000"
  },
  {
    "text": "some don't well uh let's see uh T",
    "start": "49000",
    "end": "52559"
  },
  {
    "text": "combinatory logic supports equational",
    "start": "52559",
    "end": "54800"
  },
  {
    "text": "reasoning too right but when it comes to",
    "start": "54800",
    "end": "58519"
  },
  {
    "text": "abstraction Lambda calculus is the queen",
    "start": "58519",
    "end": "62199"
  },
  {
    "text": "right nobody does abstraction like",
    "start": "62199",
    "end": "64400"
  },
  {
    "text": "Lambda calculus yeah fantastic stuff and",
    "start": "64400",
    "end": "67799"
  },
  {
    "text": "this Lambda abstraction is great for us",
    "start": "67799",
    "end": "69720"
  },
  {
    "text": "programmers because we get to write",
    "start": "69720",
    "end": "72799"
  },
  {
    "text": "functions in a natural way it's easy to",
    "start": "72799",
    "end": "75000"
  },
  {
    "text": "read and it's great for modularity",
    "start": "75000",
    "end": "77560"
  },
  {
    "text": "because what is a module interface is",
    "start": "77560",
    "end": "79600"
  },
  {
    "text": "just a big fat abstraction right yeah",
    "start": "79600",
    "end": "82840"
  },
  {
    "text": "and it's great for implementation",
    "start": "82840",
    "end": "84479"
  },
  {
    "text": "because we can build closures and do all",
    "start": "84479",
    "end": "86600"
  },
  {
    "text": "these things that that make it all",
    "start": "86600",
    "end": "88200"
  },
  {
    "text": "microphone is the microphone",
    "start": "88200",
    "end": "90640"
  },
  {
    "text": "okay sorry sorry sorry okay it's it's",
    "start": "90640",
    "end": "93079"
  },
  {
    "text": "just you Chrissy",
    "start": "93079",
    "end": "95840"
  },
  {
    "text": "sorry yes so uh and it's good for",
    "start": "96200",
    "end": "98960"
  },
  {
    "text": "implementation because it guides the",
    "start": "98960",
    "end": "100720"
  },
  {
    "text": "formation of things like closures and",
    "start": "100720",
    "end": "102439"
  },
  {
    "text": "the rest so so it's all wonderful stuff",
    "start": "102439",
    "end": "106119"
  },
  {
    "text": "but I've met someone",
    "start": "106119",
    "end": "109320"
  },
  {
    "text": "new actually I've met a few others right",
    "start": "109320",
    "end": "113240"
  },
  {
    "text": "yeah so so the love is still there but",
    "start": "113240",
    "end": "116159"
  },
  {
    "text": "but uh there are others I've got to",
    "start": "116159",
    "end": "118079"
  },
  {
    "text": "admit it right and it's you know for all",
    "start": "118079",
    "end": "120920"
  },
  {
    "text": "the good things there are some problems",
    "start": "120920",
    "end": "123439"
  },
  {
    "text": "Lambda you you don't support evaluation",
    "start": "123439",
    "end": "128160"
  },
  {
    "text": "strategies not like the combinatory",
    "start": "128160",
    "end": "130640"
  },
  {
    "text": "logic SK Ki",
    "start": "130640",
    "end": "132920"
  },
  {
    "text": "calculus and the proofs are difficult if",
    "start": "132920",
    "end": "136080"
  },
  {
    "text": "you want to prove something like",
    "start": "136080",
    "end": "137239"
  },
  {
    "text": "Confluence it's hard work yeah it's",
    "start": "137239",
    "end": "140120"
  },
  {
    "text": "pages and pages of computations to get",
    "start": "140120",
    "end": "142959"
  },
  {
    "text": "those proofs to go and there are VAR",
    "start": "142959",
    "end": "145440"
  },
  {
    "text": "there's a variation of the Lambda",
    "start": "145440",
    "end": "146840"
  },
  {
    "text": "calculus the Delta Lambda calculus that",
    "start": "146840",
    "end": "149440"
  },
  {
    "text": "actually makes those proofs a lot",
    "start": "149440",
    "end": "153200"
  },
  {
    "text": "easier if you want to do other",
    "start": "153239",
    "end": "155480"
  },
  {
    "text": "programming Styles like uh queries or",
    "start": "155480",
    "end": "158040"
  },
  {
    "text": "object orientation stuff that that",
    "start": "158040",
    "end": "160080"
  },
  {
    "text": "doesn't go very well either right it's",
    "start": "160080",
    "end": "162560"
  },
  {
    "text": "all a bit hard and program analysis well",
    "start": "162560",
    "end": "166560"
  },
  {
    "text": "the Lambda calculus is extensional Don't",
    "start": "166560",
    "end": "169560"
  },
  {
    "text": "Look Under the",
    "start": "169560",
    "end": "170840"
  },
  {
    "text": "Lambda yeah if you want to do program",
    "start": "170840",
    "end": "173879"
  },
  {
    "text": "analysis you have to work harder right",
    "start": "173879",
    "end": "177239"
  },
  {
    "text": "and well in SF calculus that all goes",
    "start": "177239",
    "end": "179840"
  },
  {
    "text": "was just fine and uh well this SF",
    "start": "179840",
    "end": "183480"
  },
  {
    "text": "calculus is a combinatory calculus kind",
    "start": "183480",
    "end": "186159"
  },
  {
    "text": "of like ski but better right and uh the",
    "start": "186159",
    "end": "189760"
  },
  {
    "text": "reaction to that was but I love my",
    "start": "189760",
    "end": "192680"
  },
  {
    "text": "lambdas this commentatory stuff is cute",
    "start": "192680",
    "end": "195680"
  },
  {
    "text": "but I love my L I need my lambdas right",
    "start": "195680",
    "end": "198599"
  },
  {
    "text": "so so now we have the Lambda SF calculus",
    "start": "198599",
    "end": "202200"
  },
  {
    "text": "which does all of that stuff and you get",
    "start": "202200",
    "end": "204239"
  },
  {
    "text": "your lambdas",
    "start": "204239",
    "end": "205680"
  },
  {
    "text": "too yeah so Lambda calculus is wonderful",
    "start": "205680",
    "end": "210080"
  },
  {
    "text": "but there's all this stuff that it",
    "start": "210080",
    "end": "212840"
  },
  {
    "text": "doesn't do that spawns whole conferences",
    "start": "212840",
    "end": "215959"
  },
  {
    "text": "and disciplines of people trying to make",
    "start": "215959",
    "end": "218040"
  },
  {
    "text": "this stuff go so uh let's see what we",
    "start": "218040",
    "end": "222120"
  },
  {
    "text": "can do about it so the uh here's the",
    "start": "222120",
    "end": "226480"
  },
  {
    "text": "menu for The Talk today I hesitate to",
    "start": "226480",
    "end": "229920"
  },
  {
    "text": "use this metaphor because I you know if",
    "start": "229920",
    "end": "232319"
  },
  {
    "text": "you're thinking about dinner I want you",
    "start": "232319",
    "end": "234159"
  },
  {
    "text": "to come back come back right we're going",
    "start": "234159",
    "end": "236319"
  },
  {
    "text": "to just a little bit longer and we'll uh",
    "start": "236319",
    "end": "239000"
  },
  {
    "text": "we'll do some cool stuff but my real",
    "start": "239000",
    "end": "240879"
  },
  {
    "text": "fear was that we would start doing",
    "start": "240879",
    "end": "242400"
  },
  {
    "text": "things at the beginning and you'd all uh",
    "start": "242400",
    "end": "244840"
  },
  {
    "text": "eat too much bread right and get full",
    "start": "244840",
    "end": "247640"
  },
  {
    "text": "and we wouldn't get to the end of the",
    "start": "247640",
    "end": "249400"
  },
  {
    "text": "story so we have uh some canipes some",
    "start": "249400",
    "end": "252760"
  },
  {
    "text": "some little things to wet your appetite",
    "start": "252760",
    "end": "255120"
  },
  {
    "text": "get you interested and then some uh",
    "start": "255120",
    "end": "257680"
  },
  {
    "text": "starters the main course is going to be",
    "start": "257680",
    "end": "260040"
  },
  {
    "text": "this program analysis stuff in SF",
    "start": "260040",
    "end": "262880"
  },
  {
    "text": "calculus and then for dessert fantastic",
    "start": "262880",
    "end": "265919"
  },
  {
    "text": "we get our lambdas back Lambda SF yeah",
    "start": "265919",
    "end": "269479"
  },
  {
    "text": "so so this is the the uh the overview",
    "start": "269479",
    "end": "272960"
  },
  {
    "text": "and there's a lot of stuff going in",
    "start": "272960",
    "end": "274639"
  },
  {
    "text": "there and and I wonder if it's too much",
    "start": "274639",
    "end": "277080"
  },
  {
    "text": "for half hour talk but anyway we're got",
    "start": "277080",
    "end": "279800"
  },
  {
    "text": "to see how we go right",
    "start": "279800",
    "end": "284680"
  },
  {
    "text": "uh",
    "start": "285759",
    "end": "288080"
  },
  {
    "text": "so when we're in the pure Lambda",
    "start": "288080",
    "end": "290360"
  },
  {
    "text": "Calculus if we want to have an",
    "start": "290360",
    "end": "292520"
  },
  {
    "text": "evaluation strategy then we have to add",
    "start": "292520",
    "end": "295240"
  },
  {
    "text": "stuff have to say oh it's going to be",
    "start": "295240",
    "end": "297960"
  },
  {
    "text": "lazy like haskal or it's going to be",
    "start": "297960",
    "end": "300320"
  },
  {
    "text": "eager like ml oh and no matter what you",
    "start": "300320",
    "end": "303400"
  },
  {
    "text": "do under no circumstances do you",
    "start": "303400",
    "end": "305600"
  },
  {
    "text": "evaluate under the lambdas that would be",
    "start": "305600",
    "end": "308360"
  },
  {
    "text": "that that's uh no good will come of it",
    "start": "308360",
    "end": "310720"
  },
  {
    "text": "right so evaluation strategies cost",
    "start": "310720",
    "end": "314440"
  },
  {
    "text": "extra uh simple example of this is the",
    "start": "314440",
    "end": "317759"
  },
  {
    "text": "fixo operator so Y is is the standard",
    "start": "317759",
    "end": "321720"
  },
  {
    "text": "fixo operator and uh YF reduces to F",
    "start": "321720",
    "end": "325440"
  },
  {
    "text": "applied to YF that gives you the the fix",
    "start": "325440",
    "end": "328240"
  },
  {
    "text": "Point uh structure but there's YF again",
    "start": "328240",
    "end": "331240"
  },
  {
    "text": "so you can reduce this YF to get another",
    "start": "331240",
    "end": "333759"
  },
  {
    "text": "YF and it goes on forever so even your",
    "start": "333759",
    "end": "336880"
  },
  {
    "text": "factorial function even the simplest",
    "start": "336880",
    "end": "339639"
  },
  {
    "text": "fixo function you could imagine has this",
    "start": "339639",
    "end": "342520"
  },
  {
    "text": "capacity for infinite evaluation",
    "start": "342520",
    "end": "345639"
  },
  {
    "text": "sequences and you have to do something",
    "start": "345639",
    "end": "348479"
  },
  {
    "text": "you know when I first started doing",
    "start": "348479",
    "end": "350280"
  },
  {
    "text": "functional programming I'm saying what's",
    "start": "350280",
    "end": "352160"
  },
  {
    "text": "the big beef about recursion and say oh",
    "start": "352160",
    "end": "355000"
  },
  {
    "text": "it's trickier than you might think right",
    "start": "355000",
    "end": "357639"
  },
  {
    "text": "there's all this compilation stuff going",
    "start": "357639",
    "end": "359440"
  },
  {
    "text": "on on to try and and avoid these kinds",
    "start": "359440",
    "end": "362360"
  },
  {
    "text": "of difficulties",
    "start": "362360",
    "end": "365240"
  },
  {
    "text": "yeah if you want to do program analysis",
    "start": "365240",
    "end": "367919"
  },
  {
    "text": "and you want to analyze recursive",
    "start": "367919",
    "end": "369680"
  },
  {
    "text": "functions which if you're going to do",
    "start": "369680",
    "end": "371440"
  },
  {
    "text": "program analysis you probably want to do",
    "start": "371440",
    "end": "374440"
  },
  {
    "text": "well then you already have to start",
    "start": "374440",
    "end": "376080"
  },
  {
    "text": "messing with the calculus to freeze the",
    "start": "376080",
    "end": "379240"
  },
  {
    "text": "form and uh the usual kind of thing to",
    "start": "379240",
    "end": "381759"
  },
  {
    "text": "do is some kind of quotation process",
    "start": "381759",
    "end": "384319"
  },
  {
    "text": "right oh it's not a Lambda term anymore",
    "start": "384319",
    "end": "386479"
  },
  {
    "text": "we're going to take the syntax tree of a",
    "start": "386479",
    "end": "388479"
  },
  {
    "text": "Lambda term and we're going to work with",
    "start": "388479",
    "end": "390160"
  },
  {
    "text": "that and that's a cost that's another",
    "start": "390160",
    "end": "393360"
  },
  {
    "text": "addition problem there well the ski",
    "start": "393360",
    "end": "397160"
  },
  {
    "text": "calculus has been around almost as long",
    "start": "397160",
    "end": "399639"
  },
  {
    "text": "as Lambda calculus and we all know it's",
    "start": "399639",
    "end": "402400"
  },
  {
    "text": "equivalent to Lambda right except not",
    "start": "402400",
    "end": "407680"
  },
  {
    "text": "exactly not exactly because in the ski",
    "start": "407680",
    "end": "411160"
  },
  {
    "text": "calculus you have much more control over",
    "start": "411160",
    "end": "414280"
  },
  {
    "text": "evaluation than you do in Lambda",
    "start": "414280",
    "end": "417120"
  },
  {
    "text": "calculus so in particular we can build a",
    "start": "417120",
    "end": "420759"
  },
  {
    "text": "combinator Y2 with a property that y2f",
    "start": "420759",
    "end": "424319"
  },
  {
    "text": "does not reduce it waits for another",
    "start": "424319",
    "end": "427919"
  },
  {
    "text": "arguments if you know about combinatory",
    "start": "427919",
    "end": "430400"
  },
  {
    "text": "logic you know that the S operator needs",
    "start": "430400",
    "end": "432800"
  },
  {
    "text": "three arguments before any reduction",
    "start": "432800",
    "end": "434960"
  },
  {
    "text": "happens and this Y2 of f is s applied to",
    "start": "434960",
    "end": "438160"
  },
  {
    "text": "two arguments so it just sits there and",
    "start": "438160",
    "end": "440599"
  },
  {
    "text": "waits but when you get this the the the",
    "start": "440599",
    "end": "443319"
  },
  {
    "text": "argument to this recursive function aha",
    "start": "443319",
    "end": "446360"
  },
  {
    "text": "now you get the fix Point reduction but",
    "start": "446360",
    "end": "448919"
  },
  {
    "text": "why to F doesn't have an argument it's",
    "start": "448919",
    "end": "451720"
  },
  {
    "text": "only if F ends up calling an application",
    "start": "451720",
    "end": "454599"
  },
  {
    "text": "of this thing that you'll get the next",
    "start": "454599",
    "end": "456520"
  },
  {
    "text": "step so using Y",
    "start": "456520",
    "end": "460120"
  },
  {
    "text": "2 the the factorial function is strongly",
    "start": "460120",
    "end": "464800"
  },
  {
    "text": "normalizing you can't get those infinite",
    "start": "464800",
    "end": "467120"
  },
  {
    "text": "reduction",
    "start": "467120",
    "end": "469000"
  },
  {
    "text": "sequences so even in terms of stuff",
    "start": "469000",
    "end": "471680"
  },
  {
    "text": "that's been known since the",
    "start": "471680",
    "end": "473479"
  },
  {
    "text": "1930s there are subtle differences that",
    "start": "473479",
    "end": "476120"
  },
  {
    "text": "have gone it seems to me unrecognized so",
    "start": "476120",
    "end": "479560"
  },
  {
    "text": "we can once we have this Y2 function",
    "start": "479560",
    "end": "483479"
  },
  {
    "text": "well now we can say even our recursive",
    "start": "483479",
    "end": "486639"
  },
  {
    "text": "programs are normal",
    "start": "486639",
    "end": "490120"
  },
  {
    "text": "forms we can set things up so the",
    "start": "490120",
    "end": "492440"
  },
  {
    "text": "factorial all those recursive all our",
    "start": "492440",
    "end": "494800"
  },
  {
    "text": "programs are normal forms and we're",
    "start": "494800",
    "end": "497199"
  },
  {
    "text": "halfway to being able to analyze them if",
    "start": "497199",
    "end": "500400"
  },
  {
    "text": "your programs have infinite reduction",
    "start": "500400",
    "end": "502800"
  },
  {
    "text": "sequences well then it's hopeless CU",
    "start": "502800",
    "end": "504960"
  },
  {
    "text": "these things are constantly running away",
    "start": "504960",
    "end": "507159"
  },
  {
    "text": "from you but even just in ski calculus",
    "start": "507159",
    "end": "510240"
  },
  {
    "text": "we can say programs are normal forms and",
    "start": "510240",
    "end": "513320"
  },
  {
    "text": "uh at least we have something stable we",
    "start": "513320",
    "end": "516080"
  },
  {
    "text": "can hope to analyze",
    "start": "516080",
    "end": "518599"
  },
  {
    "text": "it you can't analyze it in ski it's",
    "start": "518599",
    "end": "521839"
  },
  {
    "text": "extensional like Lambda calculus but at",
    "start": "521839",
    "end": "523719"
  },
  {
    "text": "least we have something fixed",
    "start": "523719",
    "end": "525760"
  },
  {
    "text": "there so that's that's the evaluation",
    "start": "525760",
    "end": "528720"
  },
  {
    "text": "strategies what about the easy proof",
    "start": "528720",
    "end": "531360"
  },
  {
    "text": "story",
    "start": "531360",
    "end": "533200"
  },
  {
    "text": "well in Lambda Calculus if you want to",
    "start": "533200",
    "end": "535920"
  },
  {
    "text": "substitute into an application you",
    "start": "535920",
    "end": "538040"
  },
  {
    "text": "substitute into the function and the",
    "start": "538040",
    "end": "540320"
  },
  {
    "text": "argument",
    "start": "540320",
    "end": "542000"
  },
  {
    "text": "separately but that application might be",
    "start": "542000",
    "end": "544240"
  },
  {
    "text": "a redex so when you want to substitute",
    "start": "544240",
    "end": "546920"
  },
  {
    "text": "in Lambda calculus you end up breaking",
    "start": "546920",
    "end": "548959"
  },
  {
    "text": "redexes let's pull apart this redex mess",
    "start": "548959",
    "end": "552120"
  },
  {
    "text": "with the pieces put them back together",
    "start": "552120",
    "end": "555000"
  },
  {
    "text": "and now if you work really hard you can",
    "start": "555000",
    "end": "557480"
  },
  {
    "text": "prove that nothing got broken that what",
    "start": "557480",
    "end": "560160"
  },
  {
    "text": "you get back is another redex kind of",
    "start": "560160",
    "end": "562800"
  },
  {
    "text": "similar to the one you started with it's",
    "start": "562800",
    "end": "565519"
  },
  {
    "text": "hard work yeah I I expect there people",
    "start": "565519",
    "end": "569600"
  },
  {
    "text": "in the room here who have been uh",
    "start": "569600",
    "end": "571480"
  },
  {
    "text": "decided that that's all too difficult",
    "start": "571480",
    "end": "574000"
  },
  {
    "text": "yeah maybe later I'll study that",
    "start": "574000",
    "end": "576120"
  },
  {
    "text": "Confluence stuff right well once we",
    "start": "576120",
    "end": "580240"
  },
  {
    "text": "understand the problem we can modify the",
    "start": "580240",
    "end": "582360"
  },
  {
    "text": "Lambda calculus to make sure that",
    "start": "582360",
    "end": "585040"
  },
  {
    "text": "substitution never interferes with any",
    "start": "585040",
    "end": "588760"
  },
  {
    "text": "redexes in fact we can redefine Lambda",
    "start": "588760",
    "end": "591440"
  },
  {
    "text": "calculus so that substitution is not",
    "start": "591440",
    "end": "594000"
  },
  {
    "text": "required as a meta operation",
    "start": "594000",
    "end": "598279"
  },
  {
    "text": "if the body of the function is a",
    "start": "599720",
    "end": "601560"
  },
  {
    "text": "variable then just uh do the immediate",
    "start": "601560",
    "end": "604519"
  },
  {
    "text": "substitution bare hands if it's some",
    "start": "604519",
    "end": "607000"
  },
  {
    "text": "other variable then uh forget",
    "start": "607000",
    "end": "609720"
  },
  {
    "text": "it here is the interesting case if we're",
    "start": "609720",
    "end": "612959"
  },
  {
    "text": "substituting into a function whose body",
    "start": "612959",
    "end": "616240"
  },
  {
    "text": "is headed by a variable okay well",
    "start": "616240",
    "end": "619560"
  },
  {
    "text": "substitute into the two halves of the",
    "start": "619560",
    "end": "621800"
  },
  {
    "text": "application when I say substitute we",
    "start": "621800",
    "end": "624079"
  },
  {
    "text": "create two new uh beta",
    "start": "624079",
    "end": "627560"
  },
  {
    "text": "redexes yeah but but in this way we",
    "start": "627560",
    "end": "630560"
  },
  {
    "text": "don't have to break any redexes because",
    "start": "630560",
    "end": "632640"
  },
  {
    "text": "if it's headed by a variable then",
    "start": "632640",
    "end": "634680"
  },
  {
    "text": "there's no reduction possible yeah and",
    "start": "634680",
    "end": "638200"
  },
  {
    "text": "we have a rule for swapping the bindings",
    "start": "638200",
    "end": "641360"
  },
  {
    "text": "on the",
    "start": "641360",
    "end": "642360"
  },
  {
    "text": "abstraction so here's a variant of",
    "start": "642360",
    "end": "645399"
  },
  {
    "text": "Lambda calculus in which there are no",
    "start": "645399",
    "end": "647839"
  },
  {
    "text": "critical pairs in",
    "start": "647839",
    "end": "649480"
  },
  {
    "text": "reduction there is no conflict between",
    "start": "649480",
    "end": "652120"
  },
  {
    "text": "different ways of reducing things and so",
    "start": "652120",
    "end": "654440"
  },
  {
    "text": "the proof of Confluence comes for free",
    "start": "654440",
    "end": "659360"
  },
  {
    "text": "so these are these are we're going to",
    "start": "659560",
    "end": "661519"
  },
  {
    "text": "get into uh uh more esoteric things in a",
    "start": "661519",
    "end": "665519"
  },
  {
    "text": "minute but these are things that are are",
    "start": "665519",
    "end": "667440"
  },
  {
    "text": "well within the uh the way of thinking",
    "start": "667440",
    "end": "671160"
  },
  {
    "text": "that underpins Lambda calculus and",
    "start": "671160",
    "end": "673079"
  },
  {
    "text": "combinatory logic as far as I know",
    "start": "673079",
    "end": "675800"
  },
  {
    "text": "nobody's ever uh built a calculus like",
    "start": "675800",
    "end": "679040"
  },
  {
    "text": "this",
    "start": "679040",
    "end": "681320"
  },
  {
    "text": "before so that's our",
    "start": "681560",
    "end": "684240"
  },
  {
    "text": "starters the canipes that get to the",
    "start": "684240",
    "end": "686600"
  },
  {
    "text": "starters now well Lambda",
    "start": "686600",
    "end": "691240"
  },
  {
    "text": "calculus when you want to uh query a",
    "start": "691240",
    "end": "694320"
  },
  {
    "text": "data",
    "start": "694320",
    "end": "695200"
  },
  {
    "text": "structure in pure Lambda calculus you do",
    "start": "695200",
    "end": "697839"
  },
  {
    "text": "the following thing you say Okay first",
    "start": "697839",
    "end": "700120"
  },
  {
    "text": "tell me the type of the data structure",
    "start": "700120",
    "end": "702839"
  },
  {
    "text": "then uh in the way that John described",
    "start": "702839",
    "end": "705839"
  },
  {
    "text": "yesterday will build a function",
    "start": "705839",
    "end": "707560"
  },
  {
    "text": "representation of that data structure",
    "start": "707560",
    "end": "710440"
  },
  {
    "text": "and then we'll build a query that knows",
    "start": "710440",
    "end": "713079"
  },
  {
    "text": "what that representation is uh so that",
    "start": "713079",
    "end": "715639"
  },
  {
    "text": "we can uh find uh the the information",
    "start": "715639",
    "end": "718639"
  },
  {
    "text": "we're looking for for inside but it's",
    "start": "718639",
    "end": "720639"
  },
  {
    "text": "all very ad hoc because uh you can't",
    "start": "720639",
    "end": "723880"
  },
  {
    "text": "tell what kind of data structure a",
    "start": "723880",
    "end": "725519"
  },
  {
    "text": "landra abstraction is till you know what",
    "start": "725519",
    "end": "727519"
  },
  {
    "text": "the types are so you've got this type",
    "start": "727519",
    "end": "730160"
  },
  {
    "text": "bytype process of organizing your",
    "start": "730160",
    "end": "733240"
  },
  {
    "text": "queries I mean how would you do a SQL",
    "start": "733240",
    "end": "735800"
  },
  {
    "text": "query in Lambda Calculus if you didn't",
    "start": "735800",
    "end": "738199"
  },
  {
    "text": "know the types of the data if you didn't",
    "start": "738199",
    "end": "741079"
  },
  {
    "text": "have the type scheme of the",
    "start": "741079",
    "end": "743040"
  },
  {
    "text": "database yeah so in patent",
    "start": "743040",
    "end": "747160"
  },
  {
    "text": "calculus we start from a different point",
    "start": "747160",
    "end": "749399"
  },
  {
    "text": "of view that every data structure is",
    "start": "749399",
    "end": "753000"
  },
  {
    "text": "either an atomic thing like nil or zero",
    "start": "753000",
    "end": "757839"
  },
  {
    "text": "or it's a compound it's a list with a",
    "start": "757839",
    "end": "760240"
  },
  {
    "text": "head and a tail it's a binary tree with",
    "start": "760240",
    "end": "762920"
  },
  {
    "text": "two",
    "start": "762920",
    "end": "764000"
  },
  {
    "text": "subes and now every data structure is",
    "start": "764000",
    "end": "766920"
  },
  {
    "text": "either an atom or a",
    "start": "766920",
    "end": "769120"
  },
  {
    "text": "compound and that means we just need two",
    "start": "769120",
    "end": "771519"
  },
  {
    "text": "rules to query an arbitrary data",
    "start": "771519",
    "end": "775560"
  },
  {
    "text": "structure here is an example these are",
    "start": "775560",
    "end": "778600"
  },
  {
    "text": "four line here so this is the select",
    "start": "778600",
    "end": "781720"
  },
  {
    "text": "function given a predicate P find uh",
    "start": "781720",
    "end": "786079"
  },
  {
    "text": "find the things that satisfy P inside",
    "start": "786079",
    "end": "789839"
  },
  {
    "text": "Zed well if Zed satisfies the predicate",
    "start": "789839",
    "end": "793519"
  },
  {
    "text": "then you get a Singleton list with zed",
    "start": "793519",
    "end": "796120"
  },
  {
    "text": "back otherwise if Z is a compound it has",
    "start": "796120",
    "end": "800120"
  },
  {
    "text": "a left and right piece well then aend",
    "start": "800120",
    "end": "802959"
  },
  {
    "text": "the results of selecting on the pieces",
    "start": "802959",
    "end": "805639"
  },
  {
    "text": "and otherwise it must be an atom like",
    "start": "805639",
    "end": "807959"
  },
  {
    "text": "nil or zero or something and uh so you",
    "start": "807959",
    "end": "811000"
  },
  {
    "text": "get no",
    "start": "811000",
    "end": "812480"
  },
  {
    "text": "Solutions so here is a program that will",
    "start": "812480",
    "end": "815680"
  },
  {
    "text": "work on lists or pairs or binary trees",
    "start": "815680",
    "end": "819320"
  },
  {
    "text": "any kind of algebraic data type you like",
    "start": "819320",
    "end": "822519"
  },
  {
    "text": "because all of their values are just",
    "start": "822519",
    "end": "824639"
  },
  {
    "text": "atoms or compounds and these two cases",
    "start": "824639",
    "end": "827720"
  },
  {
    "text": "will deal with all",
    "start": "827720",
    "end": "830759"
  },
  {
    "text": "possibilities yes so uh this is the idea",
    "start": "831240",
    "end": "834360"
  },
  {
    "text": "of patent calculus that patent matching",
    "start": "834360",
    "end": "836480"
  },
  {
    "text": "is a better foundation for computing",
    "start": "836480",
    "end": "838720"
  },
  {
    "text": "than Lambda calculus because you can do",
    "start": "838720",
    "end": "841320"
  },
  {
    "text": "these uh database these data structure",
    "start": "841320",
    "end": "844120"
  },
  {
    "text": "processes and I wrote a book about that",
    "start": "844120",
    "end": "846360"
  },
  {
    "text": "in 2009 patent calculus that uh was",
    "start": "846360",
    "end": "850040"
  },
  {
    "text": "published by",
    "start": "850040",
    "end": "852240"
  },
  {
    "text": "Springer so that uh so in principle all",
    "start": "852240",
    "end": "855759"
  },
  {
    "text": "the database queries can now be done in",
    "start": "855759",
    "end": "857680"
  },
  {
    "text": "a higher order functional",
    "start": "857680",
    "end": "861199"
  },
  {
    "text": "language what about object",
    "start": "863199",
    "end": "866000"
  },
  {
    "text": "orientation well once again in Lambda",
    "start": "866000",
    "end": "868160"
  },
  {
    "text": "calculus it doesn't go very well uh you",
    "start": "868160",
    "end": "871120"
  },
  {
    "text": "it's all a bit ad hoc but in the patent",
    "start": "871120",
    "end": "873959"
  },
  {
    "text": "calculus this is all just fine so I",
    "start": "873959",
    "end": "876959"
  },
  {
    "text": "won't try and do Theory here I'll just",
    "start": "876959",
    "end": "879279"
  },
  {
    "text": "give an",
    "start": "879279",
    "end": "880320"
  },
  {
    "text": "example suppose we have a a class of",
    "start": "880320",
    "end": "883399"
  },
  {
    "text": "points and we have a move method well",
    "start": "883399",
    "end": "886560"
  },
  {
    "text": "the class generates a Constructor for an",
    "start": "886560",
    "end": "888959"
  },
  {
    "text": "algebraic data type just the way we",
    "start": "888959",
    "end": "890880"
  },
  {
    "text": "would do in hascal or",
    "start": "890880",
    "end": "892920"
  },
  {
    "text": "ml we have a a an argument X which is",
    "start": "892920",
    "end": "896800"
  },
  {
    "text": "the coordinate of the point as mentioned",
    "start": "896800",
    "end": "899959"
  },
  {
    "text": "in the class",
    "start": "899959",
    "end": "901160"
  },
  {
    "text": "declaration but since this class can",
    "start": "901160",
    "end": "903639"
  },
  {
    "text": "have",
    "start": "903639",
    "end": "904480"
  },
  {
    "text": "subclasses a point may contain",
    "start": "904480",
    "end": "906800"
  },
  {
    "text": "additional Fields may have extra",
    "start": "906800",
    "end": "909040"
  },
  {
    "text": "information so in the in the algebraic",
    "start": "909040",
    "end": "912399"
  },
  {
    "text": "data type we have an additional argument",
    "start": "912399",
    "end": "915079"
  },
  {
    "text": "for the rest of the fields we don't know",
    "start": "915079",
    "end": "917680"
  },
  {
    "text": "what they are yet we don't know what",
    "start": "917680",
    "end": "919399"
  },
  {
    "text": "subclasses might appear all right so to",
    "start": "919399",
    "end": "922399"
  },
  {
    "text": "move a point by distance DX you just",
    "start": "922399",
    "end": "925639"
  },
  {
    "text": "take this point and produce another",
    "start": "925639",
    "end": "927639"
  },
  {
    "text": "point the same way you would do in any",
    "start": "927639",
    "end": "929440"
  },
  {
    "text": "pattern matching uh system yeah no magic",
    "start": "929440",
    "end": "933639"
  },
  {
    "text": "so far all pretty",
    "start": "933639",
    "end": "935560"
  },
  {
    "text": "straightforward now suppose that we",
    "start": "935560",
    "end": "937880"
  },
  {
    "text": "declare a class of colored points well",
    "start": "937880",
    "end": "940880"
  },
  {
    "text": "the rest of the information is now Mark",
    "start": "940880",
    "end": "945319"
  },
  {
    "text": "tagged as being a colored Point here's",
    "start": "945319",
    "end": "946959"
  },
  {
    "text": "the colored Point Constructor we have a",
    "start": "946959",
    "end": "949480"
  },
  {
    "text": "color and we have some other fields we",
    "start": "949480",
    "end": "951880"
  },
  {
    "text": "don't know what they might be let's call",
    "start": "951880",
    "end": "953399"
  },
  {
    "text": "them s so the move method we might",
    "start": "953399",
    "end": "957040"
  },
  {
    "text": "specialize to say change the color to",
    "start": "957040",
    "end": "959160"
  },
  {
    "text": "Red every time you move a point change",
    "start": "959160",
    "end": "961040"
  },
  {
    "text": "the color to Red we can see it's been",
    "start": "961040",
    "end": "962680"
  },
  {
    "text": "moved right so we just write we just add",
    "start": "962680",
    "end": "965759"
  },
  {
    "text": "a new case to the pattern matching",
    "start": "965759",
    "end": "967519"
  },
  {
    "text": "function below is the old case but now",
    "start": "967519",
    "end": "970639"
  },
  {
    "text": "there's a new pattern here point of X",
    "start": "970639",
    "end": "973800"
  },
  {
    "text": "colored point of C and S we move the uh",
    "start": "973800",
    "end": "977800"
  },
  {
    "text": "the coordinate X and we change the color",
    "start": "977800",
    "end": "980040"
  },
  {
    "text": "to",
    "start": "980040",
    "end": "981319"
  },
  {
    "text": "Red so all the the challenges of method",
    "start": "981319",
    "end": "985040"
  },
  {
    "text": "specialization and object orientation",
    "start": "985040",
    "end": "987399"
  },
  {
    "text": "have been resolved in in this uh",
    "start": "987399",
    "end": "990199"
  },
  {
    "text": "approach by putting in the rest of the",
    "start": "990199",
    "end": "992959"
  },
  {
    "text": "fields and and doing the same thing in",
    "start": "992959",
    "end": "995279"
  },
  {
    "text": "the typing part of the story all of that",
    "start": "995279",
    "end": "997880"
  },
  {
    "text": "gets sorted out yeah so patent cap",
    "start": "997880",
    "end": "1000720"
  },
  {
    "text": "matching is pretty cool",
    "start": "1000720",
    "end": "1003959"
  },
  {
    "text": "stuff well the one thing you couldn't do",
    "start": "1004639",
    "end": "1008040"
  },
  {
    "text": "in the patent calculus was write a",
    "start": "1008040",
    "end": "1009920"
  },
  {
    "text": "patent matching uh case for a Lambda",
    "start": "1009920",
    "end": "1013199"
  },
  {
    "text": "abstraction or another case so if in the",
    "start": "1013199",
    "end": "1017000"
  },
  {
    "text": "patent calculus you pass a patent",
    "start": "1017000",
    "end": "1019319"
  },
  {
    "text": "matching function and abstraction as its",
    "start": "1019319",
    "end": "1021759"
  },
  {
    "text": "argument then it just fails to match no",
    "start": "1021759",
    "end": "1025000"
  },
  {
    "text": "we don't match on abstractions this is",
    "start": "1025000",
    "end": "1027160"
  },
  {
    "text": "for data",
    "start": "1027160",
    "end": "1028280"
  },
  {
    "text": "structures but the question that came to",
    "start": "1028280",
    "end": "1031038"
  },
  {
    "text": "mind was well how would we start doing",
    "start": "1031039",
    "end": "1034000"
  },
  {
    "text": "pattern matching on uh",
    "start": "1034000",
    "end": "1036918"
  },
  {
    "text": "functions not just on data structures",
    "start": "1036919",
    "end": "1040678"
  },
  {
    "text": "and the answer is to shift to a",
    "start": "1040679",
    "end": "1042480"
  },
  {
    "text": "combinatory",
    "start": "1042480",
    "end": "1043959"
  },
  {
    "text": "calculus so uh the traditional",
    "start": "1043959",
    "end": "1046480"
  },
  {
    "text": "combinatory logic has operators uh SK",
    "start": "1046480",
    "end": "1049720"
  },
  {
    "text": "and",
    "start": "1049720",
    "end": "1051600"
  },
  {
    "text": "I but now we're going to introduce a",
    "start": "1051600",
    "end": "1054160"
  },
  {
    "text": "factorization operator",
    "start": "1054160",
    "end": "1056280"
  },
  {
    "text": "F in terms of what we saw with select",
    "start": "1056280",
    "end": "1059640"
  },
  {
    "text": "the quickest way to uh start is to think",
    "start": "1059640",
    "end": "1063960"
  },
  {
    "text": "that F corresponds to the following kind",
    "start": "1063960",
    "end": "1066400"
  },
  {
    "text": "of pattern matching function so uh if f",
    "start": "1066400",
    "end": "1070240"
  },
  {
    "text": "is applied to X then it queries the",
    "start": "1070240",
    "end": "1072160"
  },
  {
    "text": "structure of x if x is an atom return s",
    "start": "1072160",
    "end": "1076400"
  },
  {
    "text": "there's the default case there but if if",
    "start": "1076400",
    "end": "1079039"
  },
  {
    "text": "the argument is a compound y z then",
    "start": "1079039",
    "end": "1082720"
  },
  {
    "text": "return T so you use this abstraction as",
    "start": "1082720",
    "end": "1086480"
  },
  {
    "text": "the the second argument of F Well the",
    "start": "1086480",
    "end": "1089720"
  },
  {
    "text": "combinator corresponding to that",
    "start": "1089720",
    "end": "1091400"
  },
  {
    "text": "abstraction right so so this SF calculus",
    "start": "1091400",
    "end": "1095480"
  },
  {
    "text": "allows you to now uh analyze the",
    "start": "1095480",
    "end": "1098840"
  },
  {
    "text": "internal",
    "start": "1098840",
    "end": "1099880"
  },
  {
    "text": "structure of combinators that are in",
    "start": "1099880",
    "end": "1102200"
  },
  {
    "text": "normal form and that includes all of our",
    "start": "1102200",
    "end": "1105080"
  },
  {
    "text": "programs",
    "start": "1105080",
    "end": "1108080"
  },
  {
    "text": "so we've got program analysis there now",
    "start": "1110440",
    "end": "1113679"
  },
  {
    "text": "I see some uh anxious faces in the",
    "start": "1113679",
    "end": "1116200"
  },
  {
    "text": "audience and I look up and I realize I",
    "start": "1116200",
    "end": "1117880"
  },
  {
    "text": "skipped a line right and that's kind of",
    "start": "1117880",
    "end": "1120679"
  },
  {
    "text": "it's kind of perhaps the most emotional",
    "start": "1120679",
    "end": "1123320"
  },
  {
    "text": "uh point in the whole talk right so was",
    "start": "1123320",
    "end": "1126039"
  },
  {
    "text": "that a Freudian slip was I sort of",
    "start": "1126039",
    "end": "1128280"
  },
  {
    "text": "hesitant to actually address that well",
    "start": "1128280",
    "end": "1130200"
  },
  {
    "text": "anyway we've we've uh touched on the",
    "start": "1130200",
    "end": "1132840"
  },
  {
    "text": "F let's come back here Lambda calculus",
    "start": "1132840",
    "end": "1136520"
  },
  {
    "text": "is not complete for computation",
    "start": "1136520",
    "end": "1140720"
  },
  {
    "text": "well if I say to you you can't analyze a",
    "start": "1141039",
    "end": "1143480"
  },
  {
    "text": "Lambda abstraction in Lambda calculus",
    "start": "1143480",
    "end": "1146159"
  },
  {
    "text": "you probably say yeah of course not we",
    "start": "1146159",
    "end": "1148039"
  },
  {
    "text": "all know that if I say well you can't",
    "start": "1148039",
    "end": "1151280"
  },
  {
    "text": "decide equality of Lambda terms in",
    "start": "1151280",
    "end": "1154200"
  },
  {
    "text": "Lambda calculus even when they're closed",
    "start": "1154200",
    "end": "1156280"
  },
  {
    "text": "normal forms you'll say yeah yeah yeah",
    "start": "1156280",
    "end": "1159360"
  },
  {
    "text": "we we all know that this Barry what's",
    "start": "1159360",
    "end": "1161559"
  },
  {
    "text": "your point right I mean Baron direct has",
    "start": "1161559",
    "end": "1164600"
  },
  {
    "text": "got that in his book right well I say",
    "start": "1164600",
    "end": "1167440"
  },
  {
    "text": "that the ability to deci side equality",
    "start": "1167440",
    "end": "1169559"
  },
  {
    "text": "of programs terms in closed normal form",
    "start": "1169559",
    "end": "1172720"
  },
  {
    "text": "is a computable function yeah so let's",
    "start": "1172720",
    "end": "1177000"
  },
  {
    "text": "just uh click on here right equality of",
    "start": "1177000",
    "end": "1181120"
  },
  {
    "text": "programs is computable I'm not talking",
    "start": "1181120",
    "end": "1183400"
  },
  {
    "text": "about those things that don't have",
    "start": "1183400",
    "end": "1184799"
  },
  {
    "text": "normal forms remember we can set up",
    "start": "1184799",
    "end": "1187240"
  },
  {
    "text": "programs to be normal forms now all",
    "start": "1187240",
    "end": "1189440"
  },
  {
    "text": "right equality of closed normal forms is",
    "start": "1189440",
    "end": "1193080"
  },
  {
    "text": "definitely computable it's just Alpha",
    "start": "1193080",
    "end": "1196480"
  },
  {
    "text": "equality but it's also definitely not",
    "start": "1196480",
    "end": "1199159"
  },
  {
    "text": "definable in Lambda",
    "start": "1199159",
    "end": "1201679"
  },
  {
    "text": "calculus so Lambda calculus we all know",
    "start": "1201679",
    "end": "1205000"
  },
  {
    "text": "in some sense we all know in some sense",
    "start": "1205000",
    "end": "1207840"
  },
  {
    "text": "that Lambda calculus is not complete for",
    "start": "1207840",
    "end": "1212360"
  },
  {
    "text": "computation many of us maybe most of us",
    "start": "1213600",
    "end": "1216559"
  },
  {
    "text": "also know that it is complete for",
    "start": "1216559",
    "end": "1218240"
  },
  {
    "text": "computation at the same time there's",
    "start": "1218240",
    "end": "1221600"
  },
  {
    "text": "this uh Church shuring thesis or",
    "start": "1221600",
    "end": "1224000"
  },
  {
    "text": "something right that says uh says that",
    "start": "1224000",
    "end": "1226840"
  },
  {
    "text": "you can do anything in Lambda calculus",
    "start": "1226840",
    "end": "1229159"
  },
  {
    "text": "so we kind of believe things that are",
    "start": "1229159",
    "end": "1233159"
  },
  {
    "text": "contradictory it's kind of like there's",
    "start": "1233159",
    "end": "1235080"
  },
  {
    "text": "a paradox but actually there is no",
    "start": "1235080",
    "end": "1238039"
  },
  {
    "text": "Paradox Lambda calculus just isn't",
    "start": "1238039",
    "end": "1240960"
  },
  {
    "text": "complete for",
    "start": "1240960",
    "end": "1243679"
  },
  {
    "text": "computation what's happened is that uh",
    "start": "1243679",
    "end": "1246440"
  },
  {
    "text": "if you go back through the work of",
    "start": "1246440",
    "end": "1247919"
  },
  {
    "text": "cleeny uh in particular he was the one",
    "start": "1247919",
    "end": "1250559"
  },
  {
    "text": "who wrote down most about this stuff",
    "start": "1250559",
    "end": "1252960"
  },
  {
    "text": "then the argument for the completeness",
    "start": "1252960",
    "end": "1255080"
  },
  {
    "text": "of Lambda calculus goes as follows well",
    "start": "1255080",
    "end": "1258320"
  },
  {
    "text": "let's see let's talk about numerical",
    "start": "1258320",
    "end": "1260480"
  },
  {
    "text": "functions they we can encode numbers as",
    "start": "1260480",
    "end": "1263080"
  },
  {
    "text": "Church numerals and we can do all the",
    "start": "1263080",
    "end": "1265440"
  },
  {
    "text": "computable during computable functions",
    "start": "1265440",
    "end": "1267320"
  },
  {
    "text": "on natural numbers right yes yes yes",
    "start": "1267320",
    "end": "1270320"
  },
  {
    "text": "that's all fine no problem what about",
    "start": "1270320",
    "end": "1272760"
  },
  {
    "text": "some arbitrary symbolic system ah well",
    "start": "1272760",
    "end": "1276600"
  },
  {
    "text": "following girdle we can encode the",
    "start": "1276600",
    "end": "1279240"
  },
  {
    "text": "symbols as natural numbers and then",
    "start": "1279240",
    "end": "1281960"
  },
  {
    "text": "using churches stuff we can encode that",
    "start": "1281960",
    "end": "1284279"
  },
  {
    "text": "as Lambda terms and uh now anything that",
    "start": "1284279",
    "end": "1287880"
  },
  {
    "text": "you want to comp",
    "start": "1287880",
    "end": "1289279"
  },
  {
    "text": "can be computed in the Lambda calculus",
    "start": "1289279",
    "end": "1293159"
  },
  {
    "text": "right it's just one",
    "start": "1293159",
    "end": "1295720"
  },
  {
    "text": "hitch we haven't specified exactly what",
    "start": "1295720",
    "end": "1299200"
  },
  {
    "text": "that gird girdle encoding is but in",
    "start": "1299200",
    "end": "1302120"
  },
  {
    "text": "general we need to be we need to take",
    "start": "1302120",
    "end": "1304120"
  },
  {
    "text": "account of the encoding when your",
    "start": "1304120",
    "end": "1306360"
  },
  {
    "text": "symbolic system is the Lambda calculus",
    "start": "1306360",
    "end": "1308720"
  },
  {
    "text": "itself you have two choices of encoding",
    "start": "1308720",
    "end": "1312080"
  },
  {
    "text": "you can take the identity coding you",
    "start": "1312080",
    "end": "1314520"
  },
  {
    "text": "just say the Lambda term represents",
    "start": "1314520",
    "end": "1316840"
  },
  {
    "text": "itself or you can take the uh Church",
    "start": "1316840",
    "end": "1320240"
  },
  {
    "text": "numeral of the girdle number of that",
    "start": "1320240",
    "end": "1322320"
  },
  {
    "text": "Lambda term and According to which",
    "start": "1322320",
    "end": "1325080"
  },
  {
    "text": "representation you take you get",
    "start": "1325080",
    "end": "1327400"
  },
  {
    "text": "different",
    "start": "1327400",
    "end": "1330000"
  },
  {
    "text": "answers if you turn everything into",
    "start": "1330720",
    "end": "1332919"
  },
  {
    "text": "numbers then of course it's just your",
    "start": "1332919",
    "end": "1335400"
  },
  {
    "text": "incompleteness but if you take the",
    "start": "1335400",
    "end": "1337159"
  },
  {
    "text": "identity encoding which would be your",
    "start": "1337159",
    "end": "1339279"
  },
  {
    "text": "first thought what does it mean to for",
    "start": "1339279",
    "end": "1341159"
  },
  {
    "text": "something to be definable in Lambda",
    "start": "1341159",
    "end": "1342799"
  },
  {
    "text": "calculus when the function acts on",
    "start": "1342799",
    "end": "1344760"
  },
  {
    "text": "Lambda terms you would take the identity",
    "start": "1344760",
    "end": "1347440"
  },
  {
    "text": "encoding as barend Dr does",
    "start": "1347440",
    "end": "1351279"
  },
  {
    "text": "right but that gives a different result",
    "start": "1351279",
    "end": "1354080"
  },
  {
    "text": "to taking the church numeral of the",
    "start": "1354080",
    "end": "1355960"
  },
  {
    "text": "girdle",
    "start": "1355960",
    "end": "1357520"
  },
  {
    "text": "number so there's this been this",
    "start": "1357520",
    "end": "1359679"
  },
  {
    "text": "confusion going on for about 80 years",
    "start": "1359679",
    "end": "1362960"
  },
  {
    "text": "about uh the importance of the encodings",
    "start": "1362960",
    "end": "1365400"
  },
  {
    "text": "that lack of recognition that the",
    "start": "1365400",
    "end": "1367440"
  },
  {
    "text": "encoding",
    "start": "1367440",
    "end": "1368720"
  },
  {
    "text": "matters and if you're trying to get a",
    "start": "1368720",
    "end": "1371200"
  },
  {
    "text": "hold of computability you would surely",
    "start": "1371200",
    "end": "1373320"
  },
  {
    "text": "start with the identity encoding and",
    "start": "1373320",
    "end": "1375720"
  },
  {
    "text": "using the identity encoding Lambda",
    "start": "1375720",
    "end": "1377960"
  },
  {
    "text": "calculus we all know is",
    "start": "1377960",
    "end": "1382080"
  },
  {
    "text": "incomplete",
    "start": "1382080",
    "end": "1383760"
  },
  {
    "text": "yeah well at this point you might say",
    "start": "1383760",
    "end": "1386640"
  },
  {
    "text": "well that's history philosophy who cares",
    "start": "1386640",
    "end": "1389679"
  },
  {
    "text": "what does it matter in",
    "start": "1389679",
    "end": "1391200"
  },
  {
    "text": "practice well the Practical point is",
    "start": "1391200",
    "end": "1393760"
  },
  {
    "text": "that there are better calculate in which",
    "start": "1393760",
    "end": "1396400"
  },
  {
    "text": "these girdle numbers and these uh",
    "start": "1396400",
    "end": "1398640"
  },
  {
    "text": "program analyses can be conducted and",
    "start": "1398640",
    "end": "1401480"
  },
  {
    "text": "that's the SF",
    "start": "1401480",
    "end": "1404080"
  },
  {
    "text": "calculus so I mentioned briefly how you",
    "start": "1404080",
    "end": "1406799"
  },
  {
    "text": "can think about F here is complete",
    "start": "1406799",
    "end": "1409240"
  },
  {
    "text": "account of the SF",
    "start": "1409240",
    "end": "1410840"
  },
  {
    "text": "calculus there are two operators S and F",
    "start": "1410840",
    "end": "1414000"
  },
  {
    "text": "S is exactly the same as in ski no",
    "start": "1414000",
    "end": "1417200"
  },
  {
    "text": "change",
    "start": "1417200",
    "end": "1418600"
  },
  {
    "text": "there there's the rule F has two rules",
    "start": "1418600",
    "end": "1422440"
  },
  {
    "text": "it looks at its first argument and it",
    "start": "1422440",
    "end": "1424279"
  },
  {
    "text": "branches according to whether that",
    "start": "1424279",
    "end": "1425960"
  },
  {
    "text": "argument is an operator or a",
    "start": "1425960",
    "end": "1429400"
  },
  {
    "text": "compound now many people look at the",
    "start": "1429400",
    "end": "1431840"
  },
  {
    "text": "rule for compounds and they say aha but",
    "start": "1431840",
    "end": "1434480"
  },
  {
    "text": "this PQ could reduce right in Lambda",
    "start": "1434480",
    "end": "1437679"
  },
  {
    "text": "calculus all applications reduce but in",
    "start": "1437679",
    "end": "1440799"
  },
  {
    "text": "combinatory logic there are applications",
    "start": "1440799",
    "end": "1443200"
  },
  {
    "text": "that don't reduce if PQ is given by",
    "start": "1443200",
    "end": "1448279"
  },
  {
    "text": "SRQ it doesn't reduce it's a it's not a",
    "start": "1448279",
    "end": "1452640"
  },
  {
    "text": "redex so in the combinatory world there",
    "start": "1452640",
    "end": "1455480"
  },
  {
    "text": "are applications that don't reduce",
    "start": "1455480",
    "end": "1458159"
  },
  {
    "text": "unlike Lambda calculus so we can do a",
    "start": "1458159",
    "end": "1461200"
  },
  {
    "text": "test here say okay are you an operator",
    "start": "1461200",
    "end": "1463799"
  },
  {
    "text": "or an irreducible application and if",
    "start": "1463799",
    "end": "1466320"
  },
  {
    "text": "you're an irreducible application no",
    "start": "1466320",
    "end": "1468520"
  },
  {
    "text": "harm can come by breaking that",
    "start": "1468520",
    "end": "1470679"
  },
  {
    "text": "application up into its two components",
    "start": "1470679",
    "end": "1473279"
  },
  {
    "text": "and using them",
    "start": "1473279",
    "end": "1475720"
  },
  {
    "text": "separately so we can query the internal",
    "start": "1475720",
    "end": "1478840"
  },
  {
    "text": "structure of our",
    "start": "1478840",
    "end": "1481880"
  },
  {
    "text": "arguments well ski sits inside SF",
    "start": "1481880",
    "end": "1485440"
  },
  {
    "text": "because K can be represented by FF and I",
    "start": "1485440",
    "end": "1488000"
  },
  {
    "text": "is SK K as usual but you cannot Define f",
    "start": "1488000",
    "end": "1492279"
  },
  {
    "text": "inside ski",
    "start": "1492279",
    "end": "1494520"
  },
  {
    "text": "calculus because we know that there are",
    "start": "1494520",
    "end": "1497320"
  },
  {
    "text": "combinators that have different internal",
    "start": "1497320",
    "end": "1499200"
  },
  {
    "text": "structure but represent the same",
    "start": "1499200",
    "end": "1501919"
  },
  {
    "text": "functionality any combinator of the form",
    "start": "1501919",
    "end": "1504919"
  },
  {
    "text": "skx is an identity no matter whether X",
    "start": "1504919",
    "end": "1507960"
  },
  {
    "text": "is K or s or anything else so uh those X",
    "start": "1507960",
    "end": "1512279"
  },
  {
    "text": "that X can be extracted by F but cannot",
    "start": "1512279",
    "end": "1514919"
  },
  {
    "text": "be extracted by Lambda calculus or",
    "start": "1514919",
    "end": "1517960"
  },
  {
    "text": "combinatory traditional combinatory",
    "start": "1517960",
    "end": "1522278"
  },
  {
    "text": "logic using SF we can turn programs into",
    "start": "1522640",
    "end": "1527840"
  },
  {
    "text": "girdle number numbers and back again we",
    "start": "1527840",
    "end": "1531120"
  },
  {
    "text": "can do arbitrary program analysis we can",
    "start": "1531120",
    "end": "1533679"
  },
  {
    "text": "decide equality we can do all of those",
    "start": "1533679",
    "end": "1537360"
  },
  {
    "text": "things things that can't be done in",
    "start": "1537360",
    "end": "1539480"
  },
  {
    "text": "Lambda calculus or",
    "start": "1539480",
    "end": "1542679"
  },
  {
    "text": "ski any questions any outrage",
    "start": "1550520",
    "end": "1554640"
  },
  {
    "text": "any okay so uh five minutes we've just",
    "start": "1554640",
    "end": "1558520"
  },
  {
    "text": "got through the main course so I think",
    "start": "1558520",
    "end": "1560480"
  },
  {
    "text": "we're doing okay abstraction right uh",
    "start": "1560480",
    "end": "1564080"
  },
  {
    "text": "Lambda SF calculus puts the lambdas back",
    "start": "1564080",
    "end": "1566440"
  },
  {
    "text": "in in some sense it's just the union the",
    "start": "1566440",
    "end": "1569320"
  },
  {
    "text": "disjoint Union of the Lambda calculus",
    "start": "1569320",
    "end": "1571159"
  },
  {
    "text": "and SF but we have to explain how to",
    "start": "1571159",
    "end": "1573360"
  },
  {
    "text": "factorize landra",
    "start": "1573360",
    "end": "1574840"
  },
  {
    "text": "abstractions and this took me some years",
    "start": "1574840",
    "end": "1577159"
  },
  {
    "text": "to figure out I feel embarrassed now",
    "start": "1577159",
    "end": "1580039"
  },
  {
    "text": "because the answer is really quite",
    "start": "1580039",
    "end": "1581159"
  },
  {
    "text": "simple the left component of Lambda",
    "start": "1581159",
    "end": "1583320"
  },
  {
    "text": "abstraction is just a tag that says I",
    "start": "1583320",
    "end": "1585240"
  },
  {
    "text": "used to be a Lambda before you messed",
    "start": "1585240",
    "end": "1587679"
  },
  {
    "text": "with me",
    "start": "1587679",
    "end": "1588840"
  },
  {
    "text": "right we actually use the identity uh",
    "start": "1588840",
    "end": "1590919"
  },
  {
    "text": "combinator and the right hand side is uh",
    "start": "1590919",
    "end": "1594640"
  },
  {
    "text": "uh something that begins the conversion",
    "start": "1594640",
    "end": "1596600"
  },
  {
    "text": "of the abstraction into a combinator not",
    "start": "1596600",
    "end": "1599159"
  },
  {
    "text": "the complete conversion but eliminates",
    "start": "1599159",
    "end": "1601320"
  },
  {
    "text": "one Lambda and uh by recursively doing",
    "start": "1601320",
    "end": "1604840"
  },
  {
    "text": "this factorizing we can convert any",
    "start": "1604840",
    "end": "1606840"
  },
  {
    "text": "landra abstraction that's a program into",
    "start": "1606840",
    "end": "1609520"
  },
  {
    "text": "a closed normal combinator we can analiz",
    "start": "1609520",
    "end": "1612559"
  },
  {
    "text": "its structure in SF calculus we can get",
    "start": "1612559",
    "end": "1615200"
  },
  {
    "text": "back the land abstraction everything's",
    "start": "1615200",
    "end": "1617480"
  },
  {
    "text": "just fine",
    "start": "1617480",
    "end": "1620240"
  },
  {
    "text": "so much of this stuff has been coded up",
    "start": "1621600",
    "end": "1624200"
  },
  {
    "text": "in Bondi we're zooming out now we're",
    "start": "1624200",
    "end": "1626440"
  },
  {
    "text": "getting close to the end Bondi supports",
    "start": "1626440",
    "end": "1628880"
  },
  {
    "text": "is buil on the patent calculus and",
    "start": "1628880",
    "end": "1631520"
  },
  {
    "text": "supports all these different programming",
    "start": "1631520",
    "end": "1633279"
  },
  {
    "text": "Styles and even Dynamic patterns ask me",
    "start": "1633279",
    "end": "1636520"
  },
  {
    "text": "later if you want to know about that the",
    "start": "1636520",
    "end": "1639200"
  },
  {
    "text": "bad news is there are no users right",
    "start": "1639200",
    "end": "1642679"
  },
  {
    "text": "yeah uh and Robin Milner said the only",
    "start": "1642679",
    "end": "1645600"
  },
  {
    "text": "good programming language is a language",
    "start": "1645600",
    "end": "1647480"
  },
  {
    "text": "that has user right so all these fine",
    "start": "1647480",
    "end": "1650559"
  },
  {
    "text": "theoretical properties but problem there",
    "start": "1650559",
    "end": "1653799"
  },
  {
    "text": "and it doesn't do the program analysis",
    "start": "1653799",
    "end": "1655760"
  },
  {
    "text": "which ler SF does so I'm thinking I",
    "start": "1655760",
    "end": "1659440"
  },
  {
    "text": "don't want to build another language",
    "start": "1659440",
    "end": "1661200"
  },
  {
    "text": "alone but are there people here who",
    "start": "1661200",
    "end": "1664360"
  },
  {
    "text": "would like to join me in building uh all",
    "start": "1664360",
    "end": "1667200"
  },
  {
    "text": "singing all dancing uh functional",
    "start": "1667200",
    "end": "1670240"
  },
  {
    "text": "programming language yeah so there's a",
    "start": "1670240",
    "end": "1674360"
  },
  {
    "text": "lot to love about Lambda calculus you",
    "start": "1674360",
    "end": "1676799"
  },
  {
    "text": "know this abstraction is a really cool",
    "start": "1676799",
    "end": "1678880"
  },
  {
    "text": "thing it's never going to go away it's",
    "start": "1678880",
    "end": "1680600"
  },
  {
    "text": "fantastic everybody's adding abstraction",
    "start": "1680600",
    "end": "1682640"
  },
  {
    "text": "and nobody's getting rid of it right but",
    "start": "1682640",
    "end": "1685159"
  },
  {
    "text": "on the other hand Lambda calculus is not",
    "start": "1685159",
    "end": "1687200"
  },
  {
    "text": "complete for computation it can't decide",
    "start": "1687200",
    "end": "1689399"
  },
  {
    "text": "a quality of programs it can't analyze",
    "start": "1689399",
    "end": "1691600"
  },
  {
    "text": "programs we all kind of know this",
    "start": "1691600",
    "end": "1693880"
  },
  {
    "text": "already yeah patent calculus does a bit",
    "start": "1693880",
    "end": "1697000"
  },
  {
    "text": "better by showing how to do generic",
    "start": "1697000",
    "end": "1698880"
  },
  {
    "text": "queries like select and object",
    "start": "1698880",
    "end": "1700720"
  },
  {
    "text": "orientation and other programming Styles",
    "start": "1700720",
    "end": "1703440"
  },
  {
    "text": "SF calculus is a step in advance because",
    "start": "1703440",
    "end": "1706240"
  },
  {
    "text": "now we can even analyze program not just",
    "start": "1706240",
    "end": "1708840"
  },
  {
    "text": "data structures and lambar SF puts back",
    "start": "1708840",
    "end": "1712399"
  },
  {
    "text": "the lambra abstraction that everybody",
    "start": "1712399",
    "end": "1714640"
  },
  {
    "text": "was missing in the SF calculus so it's t",
    "start": "1714640",
    "end": "1717880"
  },
  {
    "text": "and complete supports equational",
    "start": "1717880",
    "end": "1719519"
  },
  {
    "text": "reasoning and supports abstraction just",
    "start": "1719519",
    "end": "1721440"
  },
  {
    "text": "like Lambda calculus but it's",
    "start": "1721440",
    "end": "1723559"
  },
  {
    "text": "intentionally complete you can do any",
    "start": "1723559",
    "end": "1726360"
  },
  {
    "text": "program analysis you like no holds bad",
    "start": "1726360",
    "end": "1728840"
  },
  {
    "text": "because it all comes down to numbers now",
    "start": "1728840",
    "end": "1731120"
  },
  {
    "text": "we can convert everything we can galze",
    "start": "1731120",
    "end": "1733720"
  },
  {
    "text": "inside the language without quotation or",
    "start": "1733720",
    "end": "1736880"
  },
  {
    "text": "that other stuff so I'm thinking we",
    "start": "1736880",
    "end": "1739720"
  },
  {
    "text": "could build a multi-paradigm language",
    "start": "1739720",
    "end": "1741760"
  },
  {
    "text": "that supports all these different",
    "start": "1741760",
    "end": "1743000"
  },
  {
    "text": "programming Styles it could be self",
    "start": "1743000",
    "end": "1745559"
  },
  {
    "text": "analyzing all the optimizations and even",
    "start": "1745559",
    "end": "1748080"
  },
  {
    "text": "Dynamic on the Fly uh program",
    "start": "1748080",
    "end": "1750919"
  },
  {
    "text": "manipulation can be done inside the",
    "start": "1750919",
    "end": "1752960"
  },
  {
    "text": "language so you can grow your own",
    "start": "1752960",
    "end": "1754919"
  },
  {
    "text": "languages and all that kind of stuff and",
    "start": "1754919",
    "end": "1757080"
  },
  {
    "text": "it's intentionally",
    "start": "1757080",
    "end": "1758559"
  },
  {
    "text": "complete any analysis you want to do can",
    "start": "1758559",
    "end": "1761159"
  },
  {
    "text": "be",
    "start": "1761159",
    "end": "1762279"
  },
  {
    "text": "done thank you",
    "start": "1762279",
    "end": "1764940"
  },
  {
    "text": "[Applause]",
    "start": "1764940",
    "end": "1768389"
  }
]