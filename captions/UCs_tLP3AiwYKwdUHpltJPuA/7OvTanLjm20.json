[
  {
    "start": "0",
    "end": "166000"
  },
  {
    "text": "[Music] all right thanks Chris for the wonderful introduction how's everyone",
    "start": "3430",
    "end": "9719"
  },
  {
    "text": "doing good all right uh I'm guessing this session is interesting for you for",
    "start": "9719",
    "end": "17600"
  },
  {
    "text": "maybe couple of reasons one is you have uh embro the microservices",
    "start": "17600",
    "end": "25599"
  },
  {
    "text": "journey yeah or the other is you have open API specifications and figure out",
    "start": "25599",
    "end": "31119"
  },
  {
    "text": "fig trying to figure out what to do with them yeah all right uh",
    "start": "31119",
    "end": "38200"
  },
  {
    "text": "so this session essentially is like uh experience of the last four years have",
    "start": "38200",
    "end": "44399"
  },
  {
    "text": "trying to help uh couple of really large organizations who have embarked the microservices journey they have hundreds",
    "start": "44399",
    "end": "52120"
  },
  {
    "text": "of microservices maybe in some case thousands of microservices and all the",
    "start": "52120",
    "end": "58440"
  },
  {
    "text": "microservices have uh you know if they are using HTTP then they have open API specification and if",
    "start": "58440",
    "end": "66280"
  },
  {
    "text": "they are using asynchronous like Kafka or some JMS or something like that then they have async API specifications and",
    "start": "66280",
    "end": "74840"
  },
  {
    "text": "often those things go out of sync uh they're not up to date and the whole",
    "start": "74840",
    "end": "80840"
  },
  {
    "text": "reason for people to Embark onto the micros Services Journey at least the lot",
    "start": "80840",
    "end": "85960"
  },
  {
    "text": "of clients I've worked with uh wanted to kind of speed their time to Market like",
    "start": "85960",
    "end": "91240"
  },
  {
    "text": "reduce their time to Market so they can get to the uh to Market as quickly as possible and why is that the case right",
    "start": "91240",
    "end": "98079"
  },
  {
    "text": "because the idea with microservices is that I can have really small teams building these microservices and",
    "start": "98079",
    "end": "104439"
  },
  {
    "text": "deploying them uh to production independently",
    "start": "104439",
    "end": "110240"
  },
  {
    "text": "correct how many of you have been able to realize that in your",
    "start": "110240",
    "end": "116119"
  },
  {
    "text": "organizations Maybe and and one big challenge in my experience and correct me if I'm wrong",
    "start": "118119",
    "end": "124520"
  },
  {
    "text": "is that while we have teams being able to independently build these microservices uh if you've deployed to",
    "start": "124520",
    "end": "131400"
  },
  {
    "text": "production you might have realized that there's some integration issue or things like that and so quickly teams want to",
    "start": "131400",
    "end": "137400"
  },
  {
    "text": "you know even though some microservices are ready they want to make sure all microservices are ready they integrate",
    "start": "137400",
    "end": "142720"
  },
  {
    "text": "them test the whole thing and then they want to deploy them to production right at least that was kind of one of the",
    "start": "142720",
    "end": "148360"
  },
  {
    "text": "main challenges that we were seeing in organizations and so this talk is uh a",
    "start": "148360",
    "end": "154599"
  },
  {
    "text": "solution Not the Only Solution but a solution of how we can address that we built a little open- Source tool called",
    "start": "154599",
    "end": "161040"
  },
  {
    "text": "spec Matic so I'm going to try and demonstrate that so for today's uh demo",
    "start": "161040",
    "end": "166480"
  },
  {
    "start": "166000",
    "end": "275000"
  },
  {
    "text": "I'm going to take uh you know a app which basically makes a request to a BFF",
    "start": "166480",
    "end": "171560"
  },
  {
    "text": "layer uh back end for front end layer uh which in turn then calls a domain service you could have one or more",
    "start": "171560",
    "end": "178159"
  },
  {
    "text": "domain Services right and the domain service gets you back a response uh now at this point you might",
    "start": "178159",
    "end": "185440"
  },
  {
    "text": "want to log this message onto a Kafka topic so that your analytics Services",
    "start": "185440",
    "end": "191000"
  },
  {
    "text": "can pick it up and do some analytics on top of it and finally respond back to the application right I'm going to use",
    "start": "191000",
    "end": "198440"
  },
  {
    "text": "this as a uh example for today and surely uh no organization has this",
    "start": "198440",
    "end": "204760"
  },
  {
    "text": "simplistic uh microservices architecture probably it's a lot more complicated I'm going to show you a little later about",
    "start": "204760",
    "end": "211360"
  },
  {
    "text": "another tool kind of insights which is there in specma which kind of helps you visualize all your microservices the",
    "start": "211360",
    "end": "217640"
  },
  {
    "text": "dependencies between them and stuff like that all right uh now generally what you would do",
    "start": "217640",
    "end": "224799"
  },
  {
    "text": "is you would uh create an open API specification for your BFF layer so that",
    "start": "224799",
    "end": "230480"
  },
  {
    "text": "your app can independently start developing things similarly your uh BFF",
    "start": "230480",
    "end": "235720"
  },
  {
    "text": "layer can independently develop things and deploy uh same way you would have a BFF layer and between the domain service",
    "start": "235720",
    "end": "243760"
  },
  {
    "text": "a uh open API specification and for things like Kafka JMS and asynchronous",
    "start": "243760",
    "end": "249200"
  },
  {
    "text": "you would have something like a async API specification right uh how many",
    "start": "249200",
    "end": "254280"
  },
  {
    "text": "people are familiar with open API specifications could show off hand oh cool that's quite a lot how about async",
    "start": "254280",
    "end": "263320"
  },
  {
    "text": "API a few okay it's not as popular but it kind of is the very same idea for or",
    "start": "263360",
    "end": "270000"
  },
  {
    "text": "async uh you know uh stuff so with that I'm going to jump into a live demo most",
    "start": "270000",
    "end": "276520"
  },
  {
    "start": "275000",
    "end": "1533000"
  },
  {
    "text": "of this is going to be a live demo and I would like you to guide me what to do next all",
    "start": "276520",
    "end": "283880"
  },
  {
    "text": "right cool rolling up the sleeves a little bit as we get in so uh let's",
    "start": "283880",
    "end": "290360"
  },
  {
    "text": "start with uh so right here I have a uh my uh order API which is the domain",
    "start": "290360",
    "end": "298199"
  },
  {
    "text": "service so I'm just going to uh start that so you know I'm not faking this so I've just got the order service kicked",
    "start": "298199",
    "end": "304720"
  },
  {
    "text": "off while this brings up let's also bring up Kafka so I'm going to start uh",
    "start": "304720",
    "end": "309960"
  },
  {
    "text": "Kafka here okay and I'm going to start my BFF",
    "start": "309960",
    "end": "318440"
  },
  {
    "text": "layer so I've kind of triggered all of these all right it's a little spring",
    "start": "318440",
    "end": "324120"
  },
  {
    "text": "boot app it's just coming up it's going to run on port 8080 and uh let let's see yep Kafka is",
    "start": "324120",
    "end": "331240"
  },
  {
    "text": "already up it's listening for topics on product queries uh let's see this guy is",
    "start": "331240",
    "end": "337560"
  },
  {
    "text": "also up and running on Port 8090 yeah cool so let's uh just quickly",
    "start": "337560",
    "end": "347160"
  },
  {
    "text": "make a curl request and see if everything is okay sure I have one product in my database and it's returned",
    "start": "347160",
    "end": "353560"
  },
  {
    "text": "that product so at this stage everything's wired up right so remember the diagram I just showed you we have",
    "start": "353560",
    "end": "359880"
  },
  {
    "text": "app which is making request to the BFF layer uh so this Cur is essentially the",
    "start": "359880",
    "end": "365560"
  },
  {
    "text": "app which made a request to the BFF layer which in turn went to The Domain Service uh which is running here right",
    "start": "365560",
    "end": "372440"
  },
  {
    "text": "this is my domain service the order API which returned the response back and then it put a message onto Kafka so you",
    "start": "372440",
    "end": "379280"
  },
  {
    "text": "can see here Kafka got a message all right so all of this is wired up which",
    "start": "379280",
    "end": "385080"
  },
  {
    "text": "is great so now I have a open API specification okay let's look at this uh",
    "start": "385080",
    "end": "393759"
  },
  {
    "text": "open API specification i' actually go to the so what you can see from here is",
    "start": "393759",
    "end": "399720"
  },
  {
    "text": "essentially it has three parts in the open API specification a SL uh Slash",
    "start": "399720",
    "end": "405400"
  },
  {
    "text": "find available product uh which essentially takes a query parameter",
    "start": "405400",
    "end": "412160"
  },
  {
    "text": "called type and it is not required it's optional it also takes a page size which",
    "start": "412160",
    "end": "418360"
  },
  {
    "text": "is in the letter and that is of type integer and it's",
    "start": "418360",
    "end": "423479"
  },
  {
    "text": "mandatory uh it gives you back three responses 200 to 400 and",
    "start": "423479",
    "end": "429400"
  },
  {
    "text": "503 uh we have something called orders we have something called Product on product I have uh post request that I",
    "start": "429400",
    "end": "436759"
  },
  {
    "text": "can make as you can see here and it has three mandatory Fields name type and",
    "start": "436759",
    "end": "443160"
  },
  {
    "text": "inventory and You' notice the type is an enum uh which has four possible values",
    "start": "443160",
    "end": "449240"
  },
  {
    "text": "right that's kind of the job of a open API specification most of you will be familiar so I've kind of just got this",
    "start": "449240",
    "end": "454960"
  },
  {
    "text": "all documented now my question is I want to verify if this open API specification",
    "start": "454960",
    "end": "461160"
  },
  {
    "text": "and the BFF uh the service that I have are they in sync or not right how would you verify",
    "start": "461160",
    "end": "470520"
  },
  {
    "text": "that how would you verify if your open API specification is in sync with your",
    "start": "471840",
    "end": "477159"
  },
  {
    "text": "actual implementation stod analis static code",
    "start": "477159",
    "end": "482400"
  },
  {
    "text": "analysis is one way you could do that you could have uh API tests that",
    "start": "482400",
    "end": "488759"
  },
  {
    "text": "could verify uh someone could look at the open API specification write tests",
    "start": "488759",
    "end": "493960"
  },
  {
    "text": "API test and make sure that works right I'm going to show you a third technique today all",
    "start": "493960",
    "end": "500400"
  },
  {
    "text": "right uh it's uh plug-in uh so I'm going to say run contract test all",
    "start": "500400",
    "end": "507879"
  },
  {
    "text": "right and what it does is it brings up a little uh UI here uh what it basically",
    "start": "507879",
    "end": "514320"
  },
  {
    "text": "is pointing is to where my open API specification is the API specification",
    "start": "514320",
    "end": "519880"
  },
  {
    "text": "that we were just looking and where is your application running right Local Host ad8 with that let's run and see",
    "start": "519880",
    "end": "529200"
  },
  {
    "text": "what",
    "start": "529200",
    "end": "531399"
  },
  {
    "text": "happens cool it's run seven tests five of them have succeeded two of them have",
    "start": "537200",
    "end": "544120"
  },
  {
    "text": "failed zero lines of code at this point right just take the open API",
    "start": "544120",
    "end": "550240"
  },
  {
    "text": "specification use pcmatic and it generated the test for you what did it generate how did it figure out what test",
    "start": "550240",
    "end": "557160"
  },
  {
    "text": "to generate right uh let's look at this in a minute let's scroll to the",
    "start": "557160",
    "end": "564279"
  },
  {
    "text": "beginning of this and so that was the command I Ran So it basically said hey I",
    "start": "564279",
    "end": "570320"
  },
  {
    "text": "S I figured out that slash products is a route that you have endpoint and it",
    "start": "570320",
    "end": "575920"
  },
  {
    "text": "requires three mandatory parameters so I've basically pled in some random values for these of course wherever type",
    "start": "575920",
    "end": "583160"
  },
  {
    "text": "was uh enum so I've picked those values so it took Gadget and it generated a",
    "start": "583160",
    "end": "589240"
  },
  {
    "text": "request and it got an ID back zero and it says Okay so this particular thing",
    "start": "589240",
    "end": "594440"
  },
  {
    "text": "was s successful right and then it took and it",
    "start": "594440",
    "end": "599680"
  },
  {
    "text": "changed it to book this one it generated Gadget uh book and so it just went",
    "start": "599680",
    "end": "606640"
  },
  {
    "text": "through the four types we have food and the fourth one is other so it generated four combinations just iterated through",
    "start": "606640",
    "end": "613279"
  },
  {
    "text": "all of them and made sure all of them succeed uh then it also slind available",
    "start": "613279",
    "end": "620200"
  },
  {
    "text": "products is another API uh so it basically made a request and it got these two products back and it says okay",
    "start": "620200",
    "end": "627360"
  },
  {
    "text": "this also seems to be working fine so hence it say succeeded it said what happens if I put some random type value",
    "start": "627360",
    "end": "635279"
  },
  {
    "text": "and c and of course that ended up in a 400 bad request right and the last one I",
    "start": "635279",
    "end": "642560"
  },
  {
    "text": "think it generated is uh you know a test with uh for uh SL orders post it created",
    "start": "642560",
    "end": "649519"
  },
  {
    "text": "a post request and this came back with a 404 not found uh what was the reason for",
    "start": "649519",
    "end": "656399"
  },
  {
    "text": "a 404 not found because this SL orders didn't even exist what happened here let's quickly",
    "start": "656399",
    "end": "663839"
  },
  {
    "text": "look here so this is a quick summary that spec Matic spits out it basically is called the API coverage uh summary",
    "start": "663839",
    "end": "671040"
  },
  {
    "text": "and it says hey I found slash find available products it has three routes in it uh I was able to cover uh the",
    "start": "671040",
    "end": "678839"
  },
  {
    "text": "first one the other two I was not able to cover at this stage I also found something called slash orders which is",
    "start": "678839",
    "end": "685880"
  },
  {
    "text": "uh Missing in the spec what does this mean missing in the",
    "start": "685880",
    "end": "693160"
  },
  {
    "text": "spec so what spec mtic does is it basically uh if you're using spring boot",
    "start": "693160",
    "end": "698839"
  },
  {
    "text": "or any of the things they expose something called as an actuator endpoint on which you can go and query saying hey",
    "start": "698839",
    "end": "706360"
  },
  {
    "text": "can you tell me what all routes are available on this service right so it went queried it got slash orders as a",
    "start": "706360",
    "end": "713279"
  },
  {
    "text": "route that the actuator exposed it went and looked in the spec and it says I can't find it in the spec",
    "start": "713279",
    "end": "720600"
  },
  {
    "text": "right and that's what it's saying it's missing in the spec but instead it found something else in the spec which is not",
    "start": "720600",
    "end": "727360"
  },
  {
    "text": "implemented so it's there in the spec but not implemented by the application in this case it turns out",
    "start": "727360",
    "end": "734079"
  },
  {
    "text": "that it's a simple typo as you can see but it could be a seriously something",
    "start": "734079",
    "end": "739160"
  },
  {
    "text": "that someone's missed implementing altogether and it found another one which also it covered so now what do we",
    "start": "739160",
    "end": "746199"
  },
  {
    "text": "do we'll quickly look at how I can fix this right so I have uh this",
    "start": "746199",
    "end": "752720"
  },
  {
    "text": "specification and uh in this if you see it says orders but actually it's a typo",
    "start": "752720",
    "end": "759360"
  },
  {
    "text": "should have been orders right so if I fix that and I go",
    "start": "759360",
    "end": "765720"
  },
  {
    "text": "back and run my test let me just clear this out before I run so let's run this",
    "start": "765720",
    "end": "772000"
  },
  {
    "text": "see what happens it's going to again generate those same seven",
    "start": "772000",
    "end": "777480"
  },
  {
    "text": "tests and this time sure enough it's there's",
    "start": "778120",
    "end": "783519"
  },
  {
    "text": "no more missing in Spec or uh not implemented it's address those and we have now 33% coverage on each of them",
    "start": "783519",
    "end": "791160"
  },
  {
    "text": "why 33% because there are three uh responses we are able to only exercise one of",
    "start": "791160",
    "end": "799079"
  },
  {
    "text": "them with me so far all of this with zero lines of core just an open API",
    "start": "799079",
    "end": "806240"
  },
  {
    "text": "specification and specma doing all of this magic for you right it's reading the specification generating the uh",
    "start": "806240",
    "end": "813440"
  },
  {
    "text": "request hitting the end point and then getting the response and validating with the",
    "start": "813440",
    "end": "819000"
  },
  {
    "text": "specification cool now I'm going to show you something more interesting ready for",
    "start": "819000",
    "end": "825800"
  },
  {
    "text": "that",
    "start": "826440",
    "end": "829440"
  },
  {
    "text": "yeah cool uh one thing you'll notice is that we have a few tests that are",
    "start": "831480",
    "end": "838240"
  },
  {
    "text": "failing right right and those tests are failing because uh you know the specific",
    "start": "838240",
    "end": "843800"
  },
  {
    "text": "uh request that it's making that's not available in our database right specma",
    "start": "843800",
    "end": "849120"
  },
  {
    "text": "can't really figure out what is inside your database right so you have to guide specma to say Hey you know these are the",
    "start": "849120",
    "end": "855720"
  },
  {
    "text": "examples or these are the values that are there in my database so make requests with them all right so for that",
    "start": "855720",
    "end": "862279"
  },
  {
    "text": "what I'm going to use now uh is I'm going to use so let's go here uh I want to enrich",
    "start": "862279",
    "end": "870720"
  },
  {
    "text": "this specification with some examples which are what is there in my database",
    "start": "870720",
    "end": "875839"
  },
  {
    "text": "so I'm going to use uh generate examples again another uh part of the specma plugin which is",
    "start": "875839",
    "end": "882639"
  },
  {
    "text": "going to go ahead and it's talking to GPT 4 at this stage it's saying all",
    "start": "882639",
    "end": "888240"
  },
  {
    "text": "right uh I've looked at the specification I kind of understand your domain can I actually instead of me",
    "start": "888240",
    "end": "894959"
  },
  {
    "text": "sitting here and writing each of these examples by hand can I just use gp4 to",
    "start": "894959",
    "end": "901199"
  },
  {
    "text": "generate the examples for me right because in this day and age trying to sit and write these is a bit of lost",
    "start": "901199",
    "end": "909279"
  },
  {
    "text": "cause uh of course GPD 4 is uh the first time you're running it's trying to fully understand the model and trying to then",
    "start": "909279",
    "end": "915800"
  },
  {
    "text": "generate relevant examples for you uh which allows you to kind of I mean of",
    "start": "915800",
    "end": "921399"
  },
  {
    "text": "course this is a simple example and I probably spend next 15 minutes and do that but why take the pain right and so",
    "start": "921399",
    "end": "929240"
  },
  {
    "text": "gbt 4 has come back all right and it's saying hey I found and generated these",
    "start": "929240",
    "end": "935319"
  },
  {
    "text": "examples for you all right so it's giving you a comparison a side by-side comparison so it's put this success",
    "start": "935319",
    "end": "943399"
  },
  {
    "text": "where essentially if I am doing a post on product uh then this should be uh",
    "start": "943399",
    "end": "950440"
  },
  {
    "text": "input and I should get back an id1 which is an output uh it's it's generated a bunch of",
    "start": "950440",
    "end": "957480"
  },
  {
    "text": "these examples you also notice that the description and things like that it's generated is actually fairly relevant",
    "start": "957480",
    "end": "964160"
  },
  {
    "text": "right it's not some garbage that it's generated uh you know if I use something like Faker or things like that you might",
    "start": "964160",
    "end": "970839"
  },
  {
    "text": "be po uh familiar with that'll just generate some random values usually but here we able to leverage this and",
    "start": "970839",
    "end": "977360"
  },
  {
    "text": "generate more meaningful value so now that I have these uh things it's updated",
    "start": "977360",
    "end": "982519"
  },
  {
    "text": "here uh right let's make sure there the examples are here so now if I go ahead",
    "start": "982519",
    "end": "989000"
  },
  {
    "text": "and run the test what do you expect to",
    "start": "989000",
    "end": "993759"
  },
  {
    "text": "see now it's executing three tests remember earlier it was executing seven tests now we have kind of said hey you",
    "start": "998040",
    "end": "1005279"
  },
  {
    "text": "know use only these examples right and generate tests only for those don't go",
    "start": "1005279",
    "end": "1010880"
  },
  {
    "text": "and generate all random examples so you're kind of guiding it saying generate only these and look here what",
    "start": "1010880",
    "end": "1017319"
  },
  {
    "text": "do we have success ESS right Isn't that",
    "start": "1017319",
    "end": "1025360"
  },
  {
    "text": "cool without writing a single line of code all right but I'm not happy that I",
    "start": "1025360",
    "end": "1032160"
  },
  {
    "text": "was earlier at seven tests and now I'm down to three tests that isn't",
    "start": "1032160",
    "end": "1037918"
  },
  {
    "text": "cool so can specma do something for",
    "start": "1037919",
    "end": "1043360"
  },
  {
    "text": "us I see this sck box check box let's try and see what happens I'm going to",
    "start": "1043360",
    "end": "1049000"
  },
  {
    "text": "click generative tests all right let's clear this out and I'm going to say run",
    "start": "1049000",
    "end": "1054840"
  },
  {
    "text": "tests with generative tests who 41",
    "start": "1054840",
    "end": "1060200"
  },
  {
    "text": "tests just like",
    "start": "1060200",
    "end": "1063919"
  },
  {
    "text": "that what is it doing ooh lot of",
    "start": "1065440",
    "end": "1073759"
  },
  {
    "text": "scrolling it says Hey I was able to generate 41 tests six of them are s",
    "start": "1073960",
    "end": "1079720"
  },
  {
    "text": "passing and 35 of them are",
    "start": "1079720",
    "end": "1084400"
  },
  {
    "text": "failing what happened here uh so I'll explain what generative",
    "start": "1084880",
    "end": "1090159"
  },
  {
    "text": "tests is and what it does but let's first figure out why these tests failed so that we can fix it and then talk",
    "start": "1090159",
    "end": "1096840"
  },
  {
    "text": "about uh what happened so as you can see it's saying hey uh when I made this",
    "start": "1096840",
    "end": "1102320"
  },
  {
    "text": "request I'm getting response body message but the key named message is uh",
    "start": "1102320",
    "end": "1108880"
  },
  {
    "text": "in the response but was not in the specification so what has happened here",
    "start": "1108880",
    "end": "1114360"
  },
  {
    "text": "is it's generated a whole bunch of combinations which are generating a 400 response you can see here it's generated",
    "start": "1114360",
    "end": "1122000"
  },
  {
    "text": "27 uh responses 400 combinations for us and when when I look at this this is",
    "start": "1122000",
    "end": "1129520"
  },
  {
    "text": "basically the keis this is the sorry uh this is the request that it's",
    "start": "1129520",
    "end": "1137200"
  },
  {
    "text": "generated you know can notice for count it's try to put a string instead of a number and it is expecting to get a 400",
    "start": "1137200",
    "end": "1145360"
  },
  {
    "text": "response back which it did get 400 back however the response schema did not",
    "start": "1145360",
    "end": "1151240"
  },
  {
    "text": "match with what you were expecting I'll show you that in a minute uh let me just go down here let's scroll to yeah here",
    "start": "1151240",
    "end": "1160120"
  },
  {
    "text": "is my bad request so you can see uh I've got a Time status over here sure I've",
    "start": "1160120",
    "end": "1165880"
  },
  {
    "text": "got a time stamp as well I've got a status I've got an error uh but here",
    "start": "1165880",
    "end": "1171039"
  },
  {
    "text": "I've got path versus here I've got a message uh looks like again the spec is",
    "start": "1171039",
    "end": "1178960"
  },
  {
    "text": "out of back with what is actually coming back so I'm going to just replace that",
    "start": "1178960",
    "end": "1184760"
  },
  {
    "text": "clear this out and run the test",
    "start": "1184760",
    "end": "1190159"
  },
  {
    "text": "again and it's going to run again the same 41 tests and I would expect to see all all",
    "start": "1191440",
    "end": "1198840"
  },
  {
    "text": "the tests passing at this stage but let's see if that is actually true sure",
    "start": "1198840",
    "end": "1204520"
  },
  {
    "text": "enough 41 tests all test successful but how did I get 41 test",
    "start": "1204520",
    "end": "1210640"
  },
  {
    "text": "generated right that's the interesting piece over here so let's go look at some",
    "start": "1210640",
    "end": "1215880"
  },
  {
    "text": "of the tests that this guy's generated the initial tests are the standard tests",
    "start": "1215880",
    "end": "1221000"
  },
  {
    "text": "that uh we were generating which is now calling them as positive scenarios right based on the examples that you had given",
    "start": "1221000",
    "end": "1228480"
  },
  {
    "text": "uh but then let's look at some of the negative scenarios over here A bunch of positive",
    "start": "1228480",
    "end": "1236080"
  },
  {
    "text": "scenarios here's the first negative scenario so what has it done it's basically taken name and made it null",
    "start": "1236080",
    "end": "1243919"
  },
  {
    "text": "name is a mandatory field It's Made It null and it's actually expecting a 400",
    "start": "1243919",
    "end": "1249799"
  },
  {
    "text": "back and it did get a 400 back and hence it's saying this test is",
    "start": "1249799",
    "end": "1255600"
  },
  {
    "text": "successful okay so this idea of generative tests kind of uh was an",
    "start": "1255760",
    "end": "1262120"
  },
  {
    "text": "inspiration we took from two different schools of testing uh two different ideas of testing one is property based",
    "start": "1262120",
    "end": "1269440"
  },
  {
    "text": "testing uh show me a quick hand if you're familiar with property based testing okay few people uh so what is",
    "start": "1269440",
    "end": "1277679"
  },
  {
    "text": "property based testing you could take any system and you could say okay what are the properties of this system like",
    "start": "1277679",
    "end": "1284799"
  },
  {
    "text": "in case of an open API specification if a field is option then I can say that if I send that",
    "start": "1284799",
    "end": "1291520"
  },
  {
    "text": "particular parameter or if I don't send the parameter in both cases I should get back the same",
    "start": "1291520",
    "end": "1297679"
  },
  {
    "text": "response like a successful response right that's one property if I uh do not",
    "start": "1297679",
    "end": "1305120"
  },
  {
    "text": "send a mandatory field then the system should not give me back a 200 right that's a property of the system so",
    "start": "1305120",
    "end": "1312480"
  },
  {
    "text": "essentially by looking at the open API specification we can generate a bunch of properties and use that as an input to",
    "start": "1312480",
    "end": "1320240"
  },
  {
    "text": "generate tests the second inspiration we took was from mutation testing what is",
    "start": "1320240",
    "end": "1326200"
  },
  {
    "text": "mutation testing so if I have a test which basically verifies that you know",
    "start": "1326200",
    "end": "1332080"
  },
  {
    "text": "imagine in my code I have if some condition then return X else return Y",
    "start": "1332080",
    "end": "1337200"
  },
  {
    "text": "and so I would have written let's say two tests where in one case the condition is true and I would assert",
    "start": "1337200",
    "end": "1343039"
  },
  {
    "text": "that I got X back another test I would have written where I would have uh simulated so I get the condition false",
    "start": "1343039",
    "end": "1349720"
  },
  {
    "text": "and I get y back and I assert that X and Y in each of those respective tests right so what mutation testing does is",
    "start": "1349720",
    "end": "1356840"
  },
  {
    "text": "it basically goes and mutates the code so let's say it makes instead of the condition it says not of that condition",
    "start": "1356840",
    "end": "1364039"
  },
  {
    "text": "and then it expects two tests to fail as long as the test fails it says okay this",
    "start": "1364039",
    "end": "1369799"
  },
  {
    "text": "is good your tests are valid and they catching the mutations if your tests are",
    "start": "1369799",
    "end": "1375080"
  },
  {
    "text": "not catching the mutants then essentially your test are not good enough right make sense so in our case",
    "start": "1375080",
    "end": "1383400"
  },
  {
    "text": "we are not mutating the code instead we are basically mutating",
    "start": "1383400",
    "end": "1390000"
  },
  {
    "text": "uh so we not mutating the code instead we mutating the requests so we are basically playing around with the",
    "start": "1390000",
    "end": "1396440"
  },
  {
    "text": "request and we are saying if I don't send a mandatory one I should get a 400",
    "start": "1396440",
    "end": "1401559"
  },
  {
    "text": "if I change the data type of something then I should get a 400 back right and that's what but that's",
    "start": "1401559",
    "end": "1409080"
  },
  {
    "text": "how we have been able to generate 41 tests out of this so quick recap we started with just",
    "start": "1409080",
    "end": "1416720"
  },
  {
    "text": "an open API specification we generated seven tests when we started we had five",
    "start": "1416720",
    "end": "1422760"
  },
  {
    "text": "tests passing two were failing and we saw some mismatches between the open API specification and your actual",
    "start": "1422760",
    "end": "1429840"
  },
  {
    "text": "implementation so we fixed those typos and stuff like that and then uh we",
    "start": "1429840",
    "end": "1435159"
  },
  {
    "text": "generated examples to guide specma and then we we went down to three examples",
    "start": "1435159",
    "end": "1440640"
  },
  {
    "text": "right three tests then we turned on generative test and we got 41 tests there was again some",
    "start": "1440640",
    "end": "1448159"
  },
  {
    "text": "mismatch between the specification we were able to fix that and now we have 41 tests",
    "start": "1448159",
    "end": "1454080"
  },
  {
    "text": "passing all of this again without writing a single line of code right I keep repeating that without writing a",
    "start": "1454080",
    "end": "1460720"
  },
  {
    "text": "single line of code because I think like this is all mundane stuff like why would",
    "start": "1460720",
    "end": "1466399"
  },
  {
    "text": "you sit and write you know tests code for stuff like",
    "start": "1466399",
    "end": "1472360"
  },
  {
    "text": "this all right so this is good but not happy yet",
    "start": "1472760",
    "end": "1479399"
  },
  {
    "text": "right what else could we",
    "start": "1479399",
    "end": "1483240"
  },
  {
    "text": "do notice here we've been able to exercise the 200 and 400 which is why we",
    "start": "1484559",
    "end": "1490840"
  },
  {
    "text": "are now at 67% coverage but we still have this 500 left and we have not",
    "start": "1490840",
    "end": "1496559"
  },
  {
    "text": "exercised that so how do I exercise the",
    "start": "1496559",
    "end": "1503039"
  },
  {
    "text": "500 so now I have 41 tests which requires let's say the downstream",
    "start": "1503039",
    "end": "1508200"
  },
  {
    "text": "service to respond back to me but let's say I want to now write a new test which",
    "start": "1508200",
    "end": "1513679"
  },
  {
    "text": "will uh expect the downstream service to time out or not respond back at all",
    "start": "1513679",
    "end": "1519480"
  },
  {
    "text": "right and I want to make sure that my service can now give me a 503 back and I can verify that a 503 is in fact working",
    "start": "1519480",
    "end": "1527600"
  },
  {
    "text": "as expected right okay that's little confusing so let me go to the slide and see if that",
    "start": "1527600",
    "end": "1533279"
  },
  {
    "start": "1533000",
    "end": "1672000"
  },
  {
    "text": "would be helpful so my BFF layer is making a request to The Domain service",
    "start": "1533279",
    "end": "1538440"
  },
  {
    "text": "okay now Imagine The Domain Service uh here in your BFF layer you have a time",
    "start": "1538440",
    "end": "1544279"
  },
  {
    "text": "out right if the if the domain service does not respond back to you let's say within 3 seconds then you want to time",
    "start": "1544279",
    "end": "1550919"
  },
  {
    "text": "out okay uh when it times out basically the BFF layer can't really do much it's",
    "start": "1550919",
    "end": "1557080"
  },
  {
    "text": "going to give you back a 503 service not available right now I want to simulate",
    "start": "1557080",
    "end": "1562679"
  },
  {
    "text": "that I want to actually test if I have timeouts are being implemented correctly or not right what if the developer",
    "start": "1562679",
    "end": "1569320"
  },
  {
    "text": "completely forgotten to implement any timeout and it's just going to infinitely wait for the domain service",
    "start": "1569320",
    "end": "1575039"
  },
  {
    "text": "to respond so I want to simulate this condition where a downstream service is",
    "start": "1575039",
    "end": "1582360"
  },
  {
    "text": "misbehaving but I want my service to still adhere to whatever its specifications are",
    "start": "1582360",
    "end": "1589000"
  },
  {
    "text": "how would you do that",
    "start": "1589000",
    "end": "1594200"
  },
  {
    "text": "yeah B so you send requests to the BFF",
    "start": "1596640",
    "end": "1602159"
  },
  {
    "text": "layer overlo am and that might uh take down the BFF",
    "start": "1602159",
    "end": "1608679"
  },
  {
    "text": "layer itself which would be an interesting test like ads on the BFF",
    "start": "1608679",
    "end": "1614000"
  },
  {
    "text": "right but what I want to do is I want to see if the downstream service times out",
    "start": "1614000",
    "end": "1619919"
  },
  {
    "text": "right then the BFF is still behaving the way I expect it to behave right if the",
    "start": "1619919",
    "end": "1625960"
  },
  {
    "text": "down stream is timing out I don't want this guy to keep infinitely waiting",
    "start": "1625960",
    "end": "1631760"
  },
  {
    "text": "correct so I want this guy to respond",
    "start": "1631760",
    "end": "1636000"
  },
  {
    "text": "back cool so you could uh mock the downstream and then simulate these",
    "start": "1638080",
    "end": "1643720"
  },
  {
    "text": "conditions correct but for the 41 test I do want this that guy to be there is",
    "start": "1643720",
    "end": "1649679"
  },
  {
    "text": "just that for the one test I don't want the guy to respond back on time right so one way to do is watch see the 41 test",
    "start": "1649679",
    "end": "1657799"
  },
  {
    "text": "run and then when the 42nd test is about to go shut down this",
    "start": "1657799",
    "end": "1663080"
  },
  {
    "text": "service right that's one way to do it but Life's too short for",
    "start": "1663080",
    "end": "1668760"
  },
  {
    "text": "that so what I'm going to uh show you is a technique where uh specma can actually",
    "start": "1669919",
    "end": "1677080"
  },
  {
    "start": "1672000",
    "end": "2415000"
  },
  {
    "text": "stub out a service right uh however uh",
    "start": "1677080",
    "end": "1682799"
  },
  {
    "text": "let's imagine I don't have an open API specification because someone says hey that's an internal service so we're not",
    "start": "1682799",
    "end": "1688919"
  },
  {
    "text": "going to give you an open API specification so what do we",
    "start": "1688919",
    "end": "1694278"
  },
  {
    "text": "do we have a feature in Spec Matic where you can generate the open API",
    "start": "1695279",
    "end": "1700840"
  },
  {
    "text": "specification okay so I'm going to go this called proxy so I'm going to say",
    "start": "1700840",
    "end": "1706120"
  },
  {
    "text": "hey spec Matic run a proxy see for host 8090 which is where my domain service is",
    "start": "1706120",
    "end": "1712320"
  },
  {
    "text": "running okay and record whatever you see right so this is your classic uh service",
    "start": "1712320",
    "end": "1718840"
  },
  {
    "text": "virtualization right so basically now pcmatic says okay proxy server started",
    "start": "1718840",
    "end": "1725720"
  },
  {
    "text": "on Port 9000 what do I do in my application properties instead",
    "start": "1725720",
    "end": "1731360"
  },
  {
    "text": "of 8090 now I'm going to make this 9,000 so I'm telling spec Matic that domain",
    "start": "1731360",
    "end": "1737240"
  },
  {
    "text": "service is now available on 9,000 all right once that I've done this change I",
    "start": "1737240",
    "end": "1742679"
  },
  {
    "text": "have to uh restart my domains the BFF layer to make sure that it is up and",
    "start": "1742679",
    "end": "1750320"
  },
  {
    "text": "running on that port or at least is looking for cool so let's clear",
    "start": "1750320",
    "end": "1759279"
  },
  {
    "text": "this now let me run this test and you would see that on the proxy a bunch of",
    "start": "1759279",
    "end": "1766200"
  },
  {
    "text": "traffic is going through it and it's recording all the traffic",
    "start": "1766200",
    "end": "1772360"
  },
  {
    "text": "okay it stopped and this test has no clue at",
    "start": "1772760",
    "end": "1778080"
  },
  {
    "text": "this stage right it's just run the way it was running 41 are still there 41 has passed but what happened here is it's",
    "start": "1778080",
    "end": "1784799"
  },
  {
    "text": "recorded all of this and let me now just kill this and when you kill it'll just basically spit out everything that it",
    "start": "1784799",
    "end": "1791840"
  },
  {
    "text": "kind of recorded okay let's look here what has happened",
    "start": "1791840",
    "end": "1797600"
  },
  {
    "text": "so there is there's a folder called recording remember I said put whatever you find in the recording folder and",
    "start": "1797600",
    "end": "1803360"
  },
  {
    "text": "it's generated a open API specification for me for the downstream service the",
    "start": "1803360",
    "end": "1810200"
  },
  {
    "text": "domain service all right and it's generated 13 stop files which is nothing",
    "start": "1810200",
    "end": "1815320"
  },
  {
    "text": "but a request response pair for me right but notice one thing right we had 41",
    "start": "1815320",
    "end": "1822159"
  },
  {
    "text": "tests but we only have 13 uh of these files step files so we",
    "start": "1822159",
    "end": "1828559"
  },
  {
    "text": "call this intelligent service virtualization it's not dumb it's not just capturing every request response",
    "start": "1828559",
    "end": "1833919"
  },
  {
    "text": "and storing it as is it's actually looking and duping off all of that and and kind of saying okay you know this is",
    "start": "1833919",
    "end": "1840960"
  },
  {
    "text": "just a variation of that this is just a variation of that and kind of condenses it down to 13 unique uh request response",
    "start": "1840960",
    "end": "1848200"
  },
  {
    "text": "pair right so we call that intelligent service virtualization because that's trendy",
    "start": "1848200",
    "end": "1855559"
  },
  {
    "text": "right all right so now I have the stub files what do I",
    "start": "1855559",
    "end": "1861000"
  },
  {
    "text": "do I say specma stub and take this yaml",
    "start": "1862159",
    "end": "1867519"
  },
  {
    "text": "file and run it as a",
    "start": "1867519",
    "end": "1871159"
  },
  {
    "text": "stub and it's loaded all of them it says okay I have this running here now what",
    "start": "1873320",
    "end": "1879080"
  },
  {
    "text": "I'm going to do is I'm going to go to my domain service which is running on Port 8090 I'm going to kill",
    "start": "1879080",
    "end": "1884760"
  },
  {
    "text": "that because I no longer need this guy sitting around",
    "start": "1884760",
    "end": "1889919"
  },
  {
    "text": "right let's now go ahead and run the test again what would we expect to",
    "start": "1891480",
    "end": "1900720"
  },
  {
    "text": "see 41 tests all passing but we see one",
    "start": "1903200",
    "end": "1910919"
  },
  {
    "text": "failure it's not magic right uh what's happened is let's look at why it failed",
    "start": "1910919",
    "end": "1917720"
  },
  {
    "text": "right it says okay uh negative scenario I expected a 400 but I have got a 2011",
    "start": "1917720",
    "end": "1926039"
  },
  {
    "text": "back why did this happen let's look at this particular",
    "start": "1926039",
    "end": "1933200"
  },
  {
    "text": "thing that's",
    "start": "1933200",
    "end": "1935880"
  },
  {
    "text": "failed okay so it's made a request and notice here type is",
    "start": "1938760",
    "end": "1945480"
  },
  {
    "text": "989 but remember type was a enum with only those four values right so the stub that was",
    "start": "1945480",
    "end": "1953559"
  },
  {
    "text": "generated the yaml file that was generated uh did not capture this aspect",
    "start": "1953559",
    "end": "1959679"
  },
  {
    "text": "that a particular uh you know the enum uh for the type is only of these four",
    "start": "1959679",
    "end": "1965519"
  },
  {
    "text": "values so I'm going to just copy this thing uh and go to the",
    "start": "1965519",
    "end": "1973720"
  },
  {
    "text": "stub the generated uh stub over here and I'm going going to just let it know that",
    "start": "1973720",
    "end": "1980960"
  },
  {
    "text": "it should whenever it gets a request of uh here type query it should only",
    "start": "1980960",
    "end": "1989360"
  },
  {
    "text": "accept uh it should only accept this",
    "start": "1989360",
    "end": "1995159"
  },
  {
    "text": "enum so the Stu that it generated uh the yaml file the contract that uh did not",
    "start": "1995159",
    "end": "2001960"
  },
  {
    "text": "have this uh captured it couldn't figure that out so we have to guide it a little",
    "start": "2001960",
    "end": "2007039"
  },
  {
    "text": "bit saying okay okay whenever a request comes you have to accept this same thing in the request body there's also again a",
    "start": "2007039",
    "end": "2014120"
  },
  {
    "text": "type uh which is here so we have to let it know that that also should be of type",
    "start": "2014120",
    "end": "2021600"
  },
  {
    "text": "so these are the two changes i' have to do all right we're still trying to figure out if we can do this ourselves",
    "start": "2021600",
    "end": "2028080"
  },
  {
    "text": "but for now we're not yet there so You' have to guide this a little bit uh that",
    "start": "2028080",
    "end": "2033799"
  },
  {
    "text": "so that's a little bit of a caveat or a drawback any of you want to contribute to that that would be",
    "start": "2033799",
    "end": "2039919"
  },
  {
    "text": "great and let me run this now again 41",
    "start": "2039919",
    "end": "2048158"
  },
  {
    "text": "tests and all 41 passing right of course still no 500 because all we have done is",
    "start": "2049960",
    "end": "2057320"
  },
  {
    "text": "we've just been able to stub out the downstream service now that we've stubbed it out now we have full control",
    "start": "2057320",
    "end": "2064679"
  },
  {
    "text": "right we can play around with it any which ways we want so what can we do",
    "start": "2064679",
    "end": "2070079"
  },
  {
    "text": "now remember we wanted to simulate a situation where we should be able to",
    "start": "2070079",
    "end": "2075200"
  },
  {
    "text": "time out the downstream service so to be able to do that I'm going to go to my specification I'm",
    "start": "2075200",
    "end": "2082118"
  },
  {
    "text": "going to go to uh slind and notice we have these examples",
    "start": "2082119",
    "end": "2088440"
  },
  {
    "text": "uh over here where we are saying uh this is an example of success where the type",
    "start": "2088440",
    "end": "2094398"
  },
  {
    "text": "that we are sending as a parameter Gadget I'm just going to create another",
    "start": "2094399",
    "end": "2099680"
  },
  {
    "text": "uh example over here I'm going to call it",
    "start": "2099680",
    "end": "2104640"
  },
  {
    "text": "timeout okay uh co-pilot is already saying okay you looks like you would",
    "start": "2105680",
    "end": "2110920"
  },
  {
    "text": "want a value like this and I'm say other right there were four options I'm going to say anytime I'm going to send other",
    "start": "2110920",
    "end": "2117040"
  },
  {
    "text": "then timeout all right uh similarly I'm just going to put",
    "start": "2117040",
    "end": "2123400"
  },
  {
    "text": "a timeout here and let's say",
    "start": "2123400",
    "end": "2128880"
  },
  {
    "text": "99 and finally when I get a response back here in my uh this thing I should",
    "start": "2128880",
    "end": "2137599"
  },
  {
    "text": "have examples and example timeout and this should be the response back so what",
    "start": "2137599",
    "end": "2143680"
  },
  {
    "text": "I'm basically telling is anytime I send a request for find products with a type",
    "start": "2143680",
    "end": "2149800"
  },
  {
    "text": "equals other I expect a 500 back all right so let me just do that change and",
    "start": "2149800",
    "end": "2157680"
  },
  {
    "text": "and uh run this test 41 tests were there remember so I'm",
    "start": "2157680",
    "end": "2163800"
  },
  {
    "text": "going to go ahead and run this tests",
    "start": "2163800",
    "end": "2168280"
  },
  {
    "text": "now so now it's generated 42 tests it's added one more test because I've added",
    "start": "2169920",
    "end": "2175280"
  },
  {
    "text": "an example all right and sure enough that test is failed right this is",
    "start": "2175280",
    "end": "2183000"
  },
  {
    "text": "basically saying hey I expected a 503 but I'm still getting a 200 back",
    "start": "2183000",
    "end": "2188920"
  },
  {
    "text": "why because we've not done anything on the stop side we've just set the expectation that on the this guy side so",
    "start": "2188920",
    "end": "2195160"
  },
  {
    "text": "now we'll go and quickly set the expectation and I want to show you how simple it is to do",
    "start": "2195160",
    "end": "2201680"
  },
  {
    "text": "that so here I have a slash products which takes Gadget right so I'm just",
    "start": "2201680",
    "end": "2207960"
  },
  {
    "text": "going to duplicate this call it as",
    "start": "2207960",
    "end": "2213720"
  },
  {
    "text": "timeout and on the timeout I'm going to say other",
    "start": "2213720",
    "end": "2219520"
  },
  {
    "text": "okay and then here I'm going to basically specify",
    "start": "2221119",
    "end": "2227839"
  },
  {
    "text": "delay delay in seconds all right delay in seconds to be",
    "start": "2227839",
    "end": "2236920"
  },
  {
    "text": "5 Seconds that's the only change I need to make Give an example just copy an",
    "start": "2236920",
    "end": "2242440"
  },
  {
    "text": "existing one give a example and specify delay in seconds five so take five seconds seconds before you respond back",
    "start": "2242440",
    "end": "2249680"
  },
  {
    "text": "all right every time I make a change you will notice that this automatically reloads the specification so I don't",
    "start": "2249680",
    "end": "2256240"
  },
  {
    "text": "need to do anything with the proxy uh the step server it automatically does that let's go back to this and let's",
    "start": "2256240",
    "end": "2264640"
  },
  {
    "text": "clean this out and run this 42",
    "start": "2264640",
    "end": "2271760"
  },
  {
    "text": "tests one test was failing last time",
    "start": "2271760",
    "end": "2278560"
  },
  {
    "text": "42 tests all 42 tests succeeded you see this 503 is covered and you have 100%",
    "start": "2278560",
    "end": "2284240"
  },
  {
    "text": "coverage on this right so this is as simple as",
    "start": "2284240",
    "end": "2290599"
  },
  {
    "text": "basically being able to try out different fault injection",
    "start": "2290599",
    "end": "2295760"
  },
  {
    "text": "scenarios cool isn't that great again",
    "start": "2295760",
    "end": "2303838"
  },
  {
    "text": "without single line of code all right uh someone can argue that the",
    "start": "2304400",
    "end": "2310960"
  },
  {
    "text": "Json files are code and you did copy them but sure",
    "start": "2310960",
    "end": "2317000"
  },
  {
    "text": "enough cool so with this notice I've been able to get to 100% API coverage of",
    "start": "2317000",
    "end": "2323040"
  },
  {
    "text": "course there are two more scenarios and I can cover them as well but you get the point all right so let me quickly by the",
    "start": "2323040",
    "end": "2329680"
  },
  {
    "text": "way all of this stuff I've been doing through this interactive ID mode but I don't expect developers to keep doing",
    "start": "2329680",
    "end": "2336119"
  },
  {
    "text": "this right so you can actually run all of this through uh so I have a contract",
    "start": "2336119",
    "end": "2342079"
  },
  {
    "text": "test over here you'll notice that in this contract test I basically specifying so this is a programmatic way",
    "start": "2342079",
    "end": "2348839"
  },
  {
    "text": "of running this right so I'm specifying where my uh application is Local Host",
    "start": "2348839",
    "end": "2354480"
  },
  {
    "text": "880 I have uh you know stub running on 9,000 I have this I mean it's not",
    "start": "2354480",
    "end": "2360000"
  },
  {
    "text": "running you're saying this is where you would want to run it and then in the before all you essentially uh specify",
    "start": "2360000",
    "end": "2367000"
  },
  {
    "text": "where are your stubs uh start the Kafka mock start the application and similarly",
    "start": "2367000",
    "end": "2373640"
  },
  {
    "text": "in the shutdown the shutdown uh this is the only onetime code that you would have to do this also is generated by the",
    "start": "2373640",
    "end": "2380359"
  },
  {
    "text": "way you don't actually handwrite it you only have to give those properties and once you do that You' be able to",
    "start": "2380359",
    "end": "2386560"
  },
  {
    "text": "generate the same 42 test that you were seeing programmatically now I could run",
    "start": "2386560",
    "end": "2391599"
  },
  {
    "text": "this in my CI pipeline whenever a developer raises a pull request I would actually run this and make sure that",
    "start": "2391599",
    "end": "2397400"
  },
  {
    "text": "that no contract is broken before I accept the pr right so this becomes part",
    "start": "2397400",
    "end": "2402640"
  },
  {
    "text": "of your you know regular development process and it's not like being",
    "start": "2402640",
    "end": "2408319"
  },
  {
    "text": "individually like manually being done cool all right with that let me just",
    "start": "2408319",
    "end": "2416240"
  },
  {
    "start": "2415000",
    "end": "2512000"
  },
  {
    "text": "quickly summarize what did we see so",
    "start": "2416240",
    "end": "2420640"
  },
  {
    "text": "far all right so we have the BFF which was the system under test for us",
    "start": "2422800",
    "end": "2429079"
  },
  {
    "text": "uh okay we have uh spec mtic which is basically running those contract tests",
    "start": "2429079",
    "end": "2435640"
  },
  {
    "text": "for you uh using the open API specification similarly we have specma",
    "start": "2435640",
    "end": "2440760"
  },
  {
    "text": "which is also being used to stub out the downstream Services right uh again using the open API specification we also use",
    "start": "2440760",
    "end": "2448160"
  },
  {
    "text": "pcmatic to generate the cfast tub which essentially uses async API to generate a",
    "start": "2448160",
    "end": "2453920"
  },
  {
    "text": "inmemory broker uh and create a topic on which it's listening and uh it also does",
    "start": "2453920",
    "end": "2459839"
  },
  {
    "text": "schema validations I'll show that in a minute so essentially the test initially sets the expectation from those Json",
    "start": "2459839",
    "end": "2466319"
  },
  {
    "text": "files that we had onto the specma stub then it also sets the expectation on the",
    "start": "2466319",
    "end": "2471800"
  },
  {
    "text": "async then makes a request which goes to the stub the stub responds back posts a",
    "start": "2471800",
    "end": "2477480"
  },
  {
    "text": "message on the topic and then gives a response back once it gets the response it basically validates if the response",
    "start": "2477480",
    "end": "2484440"
  },
  {
    "text": "is as per the schema or not and then finally all also verifies if on the uh",
    "start": "2484440",
    "end": "2490160"
  },
  {
    "text": "the messages that were posted on Kafka whether they are as per the specifications uh in in the sense of",
    "start": "2490160",
    "end": "2495599"
  },
  {
    "text": "whether the message format meets your expectation and the count how many messages were actually sent right so",
    "start": "2495599",
    "end": "2502520"
  },
  {
    "text": "that's kind of the full cycle of uh what we call as contract tests over",
    "start": "2502520",
    "end": "2509000"
  },
  {
    "text": "here so what is actually happening here we have uh open API or async API which",
    "start": "2509000",
    "end": "2516359"
  },
  {
    "start": "2512000",
    "end": "2547000"
  },
  {
    "text": "basically you can use for intelligent service virtualization right which means the consumer can now talk to this uh you",
    "start": "2516359",
    "end": "2524119"
  },
  {
    "text": "know mock or stub whatever you like to call it without actually having to depend on the real service right the",
    "start": "2524119",
    "end": "2531800"
  },
  {
    "text": "very same API specification can also be used against the provider to generate",
    "start": "2531800",
    "end": "2537400"
  },
  {
    "text": "contract tests against it right so this now becomes your single source of truth",
    "start": "2537400",
    "end": "2543319"
  },
  {
    "text": "that basically validates if the uh essentially the provider is adhering to",
    "start": "2543319",
    "end": "2548880"
  },
  {
    "start": "2547000",
    "end": "2693000"
  },
  {
    "text": "this and using the same thing I can basically stub out the provider and do my thing as a",
    "start": "2548880",
    "end": "2555240"
  },
  {
    "text": "consumer right that's the key idea over here you have the same specification which is used both by the provider and",
    "start": "2555240",
    "end": "2562319"
  },
  {
    "text": "consumer and we put that into a single source of Truth so all uh API open API",
    "start": "2562319",
    "end": "2569720"
  },
  {
    "text": "or async API specifications we put into a git repo all right uh and it goes",
    "start": "2569720",
    "end": "2575960"
  },
  {
    "text": "through again a PR process to get into the git repo the first part of the pr process does linting to make sure that",
    "start": "2575960",
    "end": "2582359"
  },
  {
    "text": "the open API specification or async API specification is as per the standards that you've agreed in your company uh",
    "start": "2582359",
    "end": "2589520"
  },
  {
    "text": "next thing it does its backward compatibility or compatibility testing all right what is compatibility testing",
    "start": "2589520",
    "end": "2596640"
  },
  {
    "text": "so let's assume I have a version of the spec that is already in now I want to add new uh end points or I want to add a",
    "start": "2596640",
    "end": "2604520"
  },
  {
    "text": "new parameter to the existing specification because apis are always evolving but when I do that I want to",
    "start": "2604520",
    "end": "2610599"
  },
  {
    "text": "make sure that I didn't accidentally break the compatibility right now to be able to do that uh essentially again you",
    "start": "2610599",
    "end": "2617960"
  },
  {
    "text": "would leverage pcmatic to do backward compatibility testing this was almost an accidental finding uh that we had we",
    "start": "2617960",
    "end": "2625040"
  },
  {
    "text": "said hey if I can use the same spec for generating tests as well as generating a",
    "start": "2625040",
    "end": "2631079"
  },
  {
    "text": "mock now guess what I can do I can take the new version of the spec that's come",
    "start": "2631079",
    "end": "2636680"
  },
  {
    "text": "in I can take the old version of the spec that's already there uh in the thing so now I have version the old",
    "start": "2636680",
    "end": "2643880"
  },
  {
    "text": "version and the new version what can I do with it I can take the new version",
    "start": "2643880",
    "end": "2649040"
  },
  {
    "text": "run it as a stub so now I have a stub server running I take the old version",
    "start": "2649040",
    "end": "2654880"
  },
  {
    "text": "and I run it as tests against the stub if all the tests pass then guess what",
    "start": "2654880",
    "end": "2662079"
  },
  {
    "text": "the new version is Backward Compatible right right it's a trivial",
    "start": "2662079",
    "end": "2669520"
  },
  {
    "text": "idea but it's kind of quite profound you can actually do this and now I can actually be sure that my new version is",
    "start": "2669520",
    "end": "2677119"
  },
  {
    "text": "Backward Compatible you can flip the order and say is it Forward compatible or not right so you can do full",
    "start": "2677119",
    "end": "2683760"
  },
  {
    "text": "compatibility testing on this that's kind of the idea of the central git repo and then of course someone will review",
    "start": "2683760",
    "end": "2689319"
  },
  {
    "text": "and merge the pr so to quickly summarize uh we have spec Matic which",
    "start": "2689319",
    "end": "2695240"
  },
  {
    "start": "2693000",
    "end": "2819000"
  },
  {
    "text": "can Leverage The Open API or AC API in fact we also work with soap by the way",
    "start": "2695240",
    "end": "2700319"
  },
  {
    "text": "because we realize quite a few companies also use soap and stuff like that uh so you can take the specification so on the",
    "start": "2700319",
    "end": "2707640"
  },
  {
    "text": "consumer side they can do their development locally and test everything locally similarly the providers can use",
    "start": "2707640",
    "end": "2715200"
  },
  {
    "text": "this almost like a test driven development cycle where you start with the open API specification you'll",
    "start": "2715200",
    "end": "2720760"
  },
  {
    "text": "generate a bunch of tests all of them will fail and then you go and basically use GPT to generate the code right",
    "start": "2720760",
    "end": "2727000"
  },
  {
    "text": "because nobody writes code these days so you can just keep generating code and keep seeing all your tests pass right",
    "start": "2727000",
    "end": "2733079"
  },
  {
    "text": "that's pretty much the cycle we use a lot of times uh and then in the",
    "start": "2733079",
    "end": "2738640"
  },
  {
    "text": "respective CI you would have each of them uh run these things of course using",
    "start": "2738640",
    "end": "2743720"
  },
  {
    "text": "specma to stub out the other thing because in my pipeline I don't want the provider a dependency on the provider",
    "start": "2743720",
    "end": "2750359"
  },
  {
    "text": "right as a consumer so I can decouple individually test each of these but still be sure that nothing's going to go",
    "start": "2750359",
    "end": "2757079"
  },
  {
    "text": "wrong because uh essentially we are talking to the single source of Truth the same version of the specification",
    "start": "2757079",
    "end": "2764040"
  },
  {
    "text": "right this is one problem with lot of other Alternatives where you'd see them drift away and then when they get into",
    "start": "2764040",
    "end": "2770880"
  },
  {
    "text": "some kind of an integration environment surprise surprise right like things have evolved so here you expect not to see",
    "start": "2770880",
    "end": "2777880"
  },
  {
    "text": "any surprises at least that's been our experience having tested this battle tested this for 4 years now and then",
    "start": "2777880",
    "end": "2783680"
  },
  {
    "text": "your part to production is clean right and and you figuring out things as early",
    "start": "2783680",
    "end": "2789240"
  },
  {
    "text": "as possible in the cycle so that's the true shift left uh and not figuring out these late in the development cycle",
    "start": "2789240",
    "end": "2796800"
  },
  {
    "text": "right and this is what truly allows you to independently develop and deploy things you no longer have to bring",
    "start": "2796800",
    "end": "2804040"
  },
  {
    "text": "everything to an integrated environment test everything together and then say okay you can go ahead then you're losing",
    "start": "2804040",
    "end": "2810599"
  },
  {
    "text": "the entire benefit of microservices is it making",
    "start": "2810599",
    "end": "2815839"
  },
  {
    "text": "sense all right uh I talked about insights uh",
    "start": "2815839",
    "end": "2821520"
  },
  {
    "start": "2819000",
    "end": "3004000"
  },
  {
    "text": "so again accidental finding we said if we have uh I'm I'm going to wrap up in 2",
    "start": "2821520",
    "end": "2826960"
  },
  {
    "text": "minutes uh so we said if you're going to have uh all these tests running in the",
    "start": "2826960",
    "end": "2833319"
  },
  {
    "text": "pipelines and generating all this data can you do something with it and the",
    "start": "2833319",
    "end": "2839000"
  },
  {
    "text": "answer is yes you can do a lot of interesting things with it right uh so you can generate things like this where",
    "start": "2839000",
    "end": "2846640"
  },
  {
    "text": "you you know you can actually visualize all your uh services and how they interact with each other or how they're",
    "start": "2846640",
    "end": "2853160"
  },
  {
    "text": "dependent on each other right and like some of the CTO we've shown this they are like oh why do we have this circular",
    "start": "2853160",
    "end": "2859680"
  },
  {
    "text": "dependency you know why is this guy depending on this and then this guy is depending on that right uh so you start",
    "start": "2859680",
    "end": "2865359"
  },
  {
    "text": "visualizing your landscape of services uh you don't have to wait till you go to",
    "start": "2865359",
    "end": "2871000"
  },
  {
    "text": "production and get the logs and then visualize you do this much earlier so if you're basically having wrong uh",
    "start": "2871000",
    "end": "2877839"
  },
  {
    "text": "connections or if you're having bottlenecks or stuff like that you can figure that out very early in the cycle",
    "start": "2877839",
    "end": "2884480"
  },
  {
    "text": "right uh you can actually click on each of these and uh stuff like that so if you go to insights. specma doin uh",
    "start": "2884480",
    "end": "2891800"
  },
  {
    "text": "you'll be able to play around with this there are examples for you to do that you can then look at an individual",
    "start": "2891800",
    "end": "2897440"
  },
  {
    "text": "service and see okay what are the dependencies of this service and who's calling this service right because most",
    "start": "2897440",
    "end": "2904720"
  },
  {
    "text": "often when I'm about to change some service I actually have no idea who's calling me what are they you know",
    "start": "2904720",
    "end": "2910200"
  },
  {
    "text": "dependent on me or who am I dependent on who I'm dependent on still you at least the developers would know but who's",
    "start": "2910200",
    "end": "2916319"
  },
  {
    "text": "calling you sometimes you're not very sure about them right so you can get that and you can also see is it a HTTP",
    "start": "2916319",
    "end": "2922319"
  },
  {
    "text": "dependency a Kafka dependency a readus dependency what kind of dependency do I have right and then uh you can actually",
    "start": "2922319",
    "end": "2930359"
  },
  {
    "text": "see what's overall across all your projects what's your API coverage right",
    "start": "2930359",
    "end": "2936079"
  },
  {
    "text": "and how many uh specs are there actually in the central repo versus not in the central",
    "start": "2936079",
    "end": "2941520"
  },
  {
    "text": "repo or floating around in some emails or stuff like that right so you get all these realtime dashboards for you to be",
    "start": "2941520",
    "end": "2948280"
  },
  {
    "text": "able to visualize what's your current CDD contract driven development adoption in your",
    "start": "2948280",
    "end": "2953680"
  },
  {
    "text": "company right make sense uh go to the link here",
    "start": "2953680",
    "end": "2959240"
  },
  {
    "text": "and play around with it uh again just a reminder we can do GMS uh mocking as",
    "start": "2959240",
    "end": "2965440"
  },
  {
    "text": "well using this uh we can do uh jdbc stubbing uh so this is again something a",
    "start": "2965440",
    "end": "2971359"
  },
  {
    "text": "lot of uh teams need uh is they have extremely complicated database interactions and stuff like that and for",
    "start": "2971359",
    "end": "2977280"
  },
  {
    "text": "the testing they want to stub out that so you know the same approach can basically be used uh for jdbc stubbing",
    "start": "2977280",
    "end": "2984559"
  },
  {
    "text": "uh or redis for that matter uh the point I'm trying to make here is the way specma is architected is each of these",
    "start": "2984559",
    "end": "2991920"
  },
  {
    "text": "protocols or each of these different kinds of things are essentially plugin into the architecture",
    "start": "2991920",
    "end": "2997160"
  },
  {
    "text": "right so you can now add uh anything else you want to add as a plug-in into",
    "start": "2997160",
    "end": "3003000"
  },
  {
    "text": "it okay so with that I'm going to shut up and hopefully this was uh useful for",
    "start": "3003000",
    "end": "3010599"
  },
  {
    "start": "3004000",
    "end": "3017000"
  },
  {
    "text": "[Applause] [Music] you",
    "start": "3010780",
    "end": "3018280"
  }
]