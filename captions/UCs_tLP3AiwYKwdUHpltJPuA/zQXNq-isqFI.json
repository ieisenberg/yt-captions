[
  {
    "text": "- Okay, welcome, welcome. I hope you're sitting comfortably.",
    "start": "9910",
    "end": "16742"
  },
  {
    "text": "My name is Mads Torgersen, and known in America as Mads Torgersen.",
    "start": "16742",
    "end": "22986"
  },
  {
    "text": "I work on C# for Microsoft. I'm getting old, so I\nalways carry a t-shirt with the name of the program and language",
    "start": "24096",
    "end": "30362"
  },
  {
    "text": "I'm working on in case I forget. And I'm here to talk about C#,",
    "start": "30362",
    "end": "36441"
  },
  {
    "text": "and why it may be worth thinking about, even if you haven't so far.",
    "start": "36441",
    "end": "41529"
  },
  {
    "text": "So let's get the embarrassing\ndetails over with. How many people are\nalready familiar with C#?",
    "start": "41529",
    "end": "48765"
  },
  {
    "text": "(laughs) That's a lot. How many are not? Wow.",
    "start": "48765",
    "end": "54038"
  },
  {
    "text": "So I will completely fail, introducing somebody to C# at this talk.",
    "start": "54038",
    "end": "59367"
  },
  {
    "text": "Good to know. We can maybe breeze over some\ndetails I had planned on, and get into some I hadn't.",
    "start": "59367",
    "end": "66151"
  },
  {
    "text": "So, even so, they say that the reason why they make those SUV commercials,",
    "start": "66151",
    "end": "73047"
  },
  {
    "text": "is not to make people buy them. It's to make the people who\nalready bought them feel good about the fact that they did.",
    "start": "74316",
    "end": "80779"
  },
  {
    "text": "So maybe I can achieve that. So, I have been asked to remind\nyou to evaluate the talk.",
    "start": "80779",
    "end": "87851"
  },
  {
    "text": "It's good for me, because\nthen if I do something in an unsatisfactory\nway, I can do it better",
    "start": "89376",
    "end": "96631"
  },
  {
    "text": "next time, maybe. And it's good for the GoTo folks, because then they can decide",
    "start": "96631",
    "end": "101647"
  },
  {
    "text": "whether to invite me\nagain some other time.",
    "start": "101647",
    "end": "105230"
  },
  {
    "text": "So this is in the feel-good department. Stack Overflow have a survey every year",
    "start": "107169",
    "end": "113308"
  },
  {
    "text": "of their developers, and they ask them various questions, and, of course, it's skewed,",
    "start": "113308",
    "end": "119100"
  },
  {
    "text": "and unscientific in all kinds of ways. First of all, you have to be on Stack Overflow to participate,",
    "start": "119100",
    "end": "125219"
  },
  {
    "text": "but I like the numbers, so\nI'm gonna use them anyway. So if we look here,",
    "start": "125219",
    "end": "131739"
  },
  {
    "text": "C# is a very widely used language. It's number four here, of the three above,",
    "start": "133502",
    "end": "141666"
  },
  {
    "text": "one of them is not a programming language. So I'm not talking about JavaScript.",
    "start": "141666",
    "end": "147166"
  },
  {
    "text": "I'm talking about SQL. So C# is definitely a language that's in broad usage already.",
    "start": "147166",
    "end": "153063"
  },
  {
    "text": "It's one of the, sort of,\nmain mainstream languages, if you will. And they also ask people",
    "start": "153063",
    "end": "159715"
  },
  {
    "text": "whether they would like to continue using the language they're using, and they use that to rate\nthe most loved technologies.",
    "start": "161656",
    "end": "168888"
  },
  {
    "text": "And it's interesting to see\nthat C# is on this list as well. So people actually love\nC#, to some degree.",
    "start": "168888",
    "end": "175480"
  },
  {
    "text": "There are some languages\nthat they love more, but if you notice, many\nof them are languages with smaller audiences,\nsort of very dedicated",
    "start": "175480",
    "end": "182368"
  },
  {
    "text": "audiences that are maybe\nmore part of a cult or something.",
    "start": "182368",
    "end": "187331"
  },
  {
    "text": "But it's only a few here at the bottom that are actually in both lists, that are both highly\nused and highly loved.",
    "start": "189963",
    "end": "195989"
  },
  {
    "text": "So it's nice to be one\nof the three technologies on that list, two of which\nare programming languages, and yay for Python also\nfor being on there.",
    "start": "195989",
    "end": "202445"
  },
  {
    "text": "Right so, we and Python, we\nmust be doing something right.",
    "start": "202445",
    "end": "206612"
  },
  {
    "text": "And we constantly try to think about, what is it that we're\nprobably doing right, that we have still fairly enjoyed",
    "start": "207482",
    "end": "213077"
  },
  {
    "text": "programming language\nafter all these years. So it seems to be not the fact that everybody uses to C#\njust because they have to,",
    "start": "214790",
    "end": "221846"
  },
  {
    "text": "because people did 10\nyears ago at their company, and they have all this legacy code. There seems to be some\nkind of energy around,",
    "start": "221846",
    "end": "227711"
  },
  {
    "text": "and we wanna try to keep that going. And we have some ideas\nabout why that may be, and that's sort of what is driving",
    "start": "227711",
    "end": "234008"
  },
  {
    "text": "our language evolution, if you will. So we'll get back to\nthat a little bit later.",
    "start": "234008",
    "end": "239090"
  },
  {
    "text": "But I think one core thing\nto point out here is that we are very eager to evolve C#.",
    "start": "239090",
    "end": "246120"
  },
  {
    "text": "Like if you look at the language evolution scale from a little to a lot, we are kind of over there.",
    "start": "247393",
    "end": "252401"
  },
  {
    "text": "As mainstream languages\ngo, we kind of tend to be pretty aggressive about\nkeeping the language fresh,",
    "start": "252401",
    "end": "258609"
  },
  {
    "text": "and keeping it modern. And as the programming language",
    "start": "258609",
    "end": "262752"
  },
  {
    "text": "state of the art evolves, so do we. And sometimes we are the movers, and sometimes we are the followers,",
    "start": "263943",
    "end": "269487"
  },
  {
    "text": "but we try to keep the language a good choice for\nprogrammers in modern day.",
    "start": "269488",
    "end": "276393"
  },
  {
    "text": "Not just something you have to do because somebody made that choice in a previous decade.",
    "start": "276393",
    "end": "282581"
  },
  {
    "text": "So that's kind of our\nphilosophy around it. I also wanna point out F#,\nbecause it's our little sister",
    "start": "282581",
    "end": "288806"
  },
  {
    "text": "language, and it's very popular, because it's also very small.",
    "start": "288807",
    "end": "293456"
  },
  {
    "text": "And there's a talk next door about it at the same time. So I'm sorry that those are\nscheduled at the same time.",
    "start": "295907",
    "end": "302565"
  },
  {
    "text": "But F# is a very much\nmore functional language, and we have a lot of benefit",
    "start": "302565",
    "end": "308209"
  },
  {
    "text": "from the collaboration with F#, and the kind of inspiration\nthat it gives us",
    "start": "309503",
    "end": "314810"
  },
  {
    "text": "in the C# language design as well. So I wanted to call that out.",
    "start": "314810",
    "end": "319059"
  },
  {
    "text": "So how many of you use C# on something other than Windows?",
    "start": "320558",
    "end": "326419"
  },
  {
    "text": "Okay, thank you. It looked like none for a second there, now it's more like two percent. Good.",
    "start": "327804",
    "end": "333142"
  },
  {
    "text": "That's a lot. So most people use C# on Windows, and that's because that\npretty much used to be",
    "start": "333142",
    "end": "338317"
  },
  {
    "text": "where you could use C#. And we kind of are\nchanging our tune on that.",
    "start": "338317",
    "end": "345169"
  },
  {
    "text": "So part of the reason I wanted to frame the talk in this way was\nthat we're really pushing.",
    "start": "345170",
    "end": "351673"
  },
  {
    "text": "It's sort of increasingly been the case, that you can use C# elsewhere, but we're pushing to make\nthat an option, right.",
    "start": "351674",
    "end": "357578"
  },
  {
    "text": "We're sort of in this weird situation, where C# has been a massive,",
    "start": "357578",
    "end": "361063"
  },
  {
    "text": "main programming language in Windows, but at the same time, we are like complete newcomers",
    "start": "363272",
    "end": "368335"
  },
  {
    "text": "to some other platforms. At least mostly so. And so it's this interesting situation,",
    "start": "368335",
    "end": "373677"
  },
  {
    "text": "where now that it's\nactually becoming an option on all the platforms, we're at the same time very entrenched,",
    "start": "373677",
    "end": "379653"
  },
  {
    "text": "and also very new and\nkind of the fledgling language on some of those platforms.",
    "start": "379653",
    "end": "385533"
  },
  {
    "text": "We're eager to help that adoption on those other platforms.",
    "start": "385533",
    "end": "391157"
  },
  {
    "text": "One other thing that is\nchanging how and where you can use C# is the\nfact that we've evolved",
    "start": "392415",
    "end": "398716"
  },
  {
    "text": "our language technology. So the compiler and IDE technologies that underlies the implementation",
    "start": "398717",
    "end": "405181"
  },
  {
    "text": "of the language quite a bit, what we call Project Roslyn, and that's enabling some, I think,",
    "start": "405181",
    "end": "412308"
  },
  {
    "text": "quite unique scenarios about how you can program in C#.",
    "start": "412308",
    "end": "416315"
  },
  {
    "text": "I'm gonna show a little bit of that, because I think it's nerdy and cool, and maybe it's also useful to you.",
    "start": "418069",
    "end": "424054"
  },
  {
    "text": "One of the consequences of that is that, that work on sort of the language core,",
    "start": "425667",
    "end": "431065"
  },
  {
    "text": "and ripping it out of the, sort of, Windows and Visual Studios specifics, means that it's become very easy,",
    "start": "431065",
    "end": "438135"
  },
  {
    "text": "as these things go, to implement C# and others IDEs.",
    "start": "439545",
    "end": "444961"
  },
  {
    "text": "So you can essentially use\nC# in your favorite IDE, and we'll talk a little\nbit about that as well, or your favorite editor.",
    "start": "444961",
    "end": "452001"
  },
  {
    "text": "And of course, one of the\nbig changes is we've moved from being a completely\nproprietary technology,",
    "start": "452001",
    "end": "457751"
  },
  {
    "text": "to being completely open source. So everyone can contribute to C#, and a lot of people do.",
    "start": "457751",
    "end": "463287"
  },
  {
    "text": "And we're getting a conversation with the community that's\nvastly different now.",
    "start": "463287",
    "end": "469151"
  },
  {
    "text": "It's more of a collaboration project, as opposed to, \"Microsoft says...\" And that's very exciting.",
    "start": "469151",
    "end": "475456"
  },
  {
    "text": "It means that, rather than coming out every three years or whatever, and saying, \"Ta-da, this is what we\nworked on, hope you like it.\"",
    "start": "475456",
    "end": "483229"
  },
  {
    "text": "We are now in a very open dialogue everyday with the community\nabout our direction.",
    "start": "483229",
    "end": "489710"
  },
  {
    "text": "We get feedback all the time. Like probably, tens of\nyou will come to me after, and say why we should be\ndoing something different,",
    "start": "489710",
    "end": "496182"
  },
  {
    "text": "or proposing things. And that happens online, and on GitHub, and elsewhere as well.",
    "start": "496182",
    "end": "502087"
  },
  {
    "text": "So we have a much better, we have much better quality on our design work as a\nresult of it, I think.",
    "start": "502926",
    "end": "511634"
  },
  {
    "text": "Okay, so that's a couple of good things. Let's start with some\nof those other places",
    "start": "511635",
    "end": "516797"
  },
  {
    "text": "that C# are. So how many people here have used Xamarin?",
    "start": "516797",
    "end": "521286"
  },
  {
    "text": "So a few there. Have you all, you must\nall have used Xamarin",
    "start": "522386",
    "end": "530281"
  },
  {
    "text": "on non Windows platforms, right? That's probably the reason why you do.",
    "start": "530281",
    "end": "537134"
  },
  {
    "text": "So Xamarin, how many people\nare aware what Xamarin is? Okay, about half.",
    "start": "537134",
    "end": "542383"
  },
  {
    "text": "Xamarin, it used to be a separate company. We acquired them six months ago. It's a technology for using C#",
    "start": "545675",
    "end": "553084"
  },
  {
    "text": "to target, to make native\napps for Android and iOS. So it's technology\nthat's very much based on",
    "start": "553085",
    "end": "560229"
  },
  {
    "text": "letting you use the same language, and the same source\ncode, for the most part,",
    "start": "560229",
    "end": "566309"
  },
  {
    "text": "to write apps for multiple different mobile platforms, right? So it works on iOS, it works on Android.",
    "start": "566309",
    "end": "572234"
  },
  {
    "text": "It actually targets Mac as well, and by the way, Windows\ntoo, if you want to.",
    "start": "572234",
    "end": "577536"
  },
  {
    "text": "And it creates high-quality native UIs. It's a number of big apps that\nare using this technology,",
    "start": "577536",
    "end": "583738"
  },
  {
    "text": "because it saves the effort\nof separate implementations on those platforms. It also lets you use the language",
    "start": "583738",
    "end": "589416"
  },
  {
    "text": "that you can use on the back end as well, which, yes you can with Java, but it's not quite there yet\nwith Swift or Objective-C.",
    "start": "589416",
    "end": "598048"
  },
  {
    "text": "And so, it's sort of economy of scale, and it's also just a very good language for implementing apps.",
    "start": "598048",
    "end": "604152"
  },
  {
    "text": "It's based on the Mono project. How many people know\nabout the Mono project?",
    "start": "604152",
    "end": "609672"
  },
  {
    "text": "Okay, about half. That is an open source implementation done by people outside of\nMicrosoft many years ago,",
    "start": "609672",
    "end": "617191"
  },
  {
    "text": "and maintained ever since to target C# to other platforms and Windows.",
    "start": "617192",
    "end": "622648"
  },
  {
    "text": "While we at Microsoft\nwere sort of tunnel-vision on Windows for many, many years, these people saw the\ncross platform potential",
    "start": "622648",
    "end": "629136"
  },
  {
    "text": "of C# much before we did and implemented this great cross platform.",
    "start": "629136",
    "end": "635338"
  },
  {
    "text": "Cross platform implementation. So Xamarin is based on that, and a lot of the apps that you see",
    "start": "635338",
    "end": "641626"
  },
  {
    "text": "in the iOS or Android are stores that are actually based on C#. Either because of Xamarin,",
    "start": "641626",
    "end": "647898"
  },
  {
    "text": "or because of Unity, which is probably the\nindustry leading game engine.",
    "start": "647898",
    "end": "654010"
  },
  {
    "text": "So if you're up there on the back rows playing a game instead of listening, chances are, it's written in Unity.",
    "start": "654010",
    "end": "661075"
  },
  {
    "text": "Right, so even your hands\nare engaged in C# right now.",
    "start": "661075",
    "end": "665242"
  },
  {
    "text": "So again, this is based on Mono, and this 2D, 3D game engine",
    "start": "666698",
    "end": "673287"
  },
  {
    "text": "is one that you\nessentially target with C#. So a lot of those games out there",
    "start": "673288",
    "end": "679264"
  },
  {
    "text": "are written in C# as well. So we do actually have\nthis cross platform reach in many of the client technologies",
    "start": "679264",
    "end": "686922"
  },
  {
    "text": "that many people are not aware of. So I wanted to call that out. Also at Microsoft, we are\nworking on what we call",
    "start": "686922",
    "end": "693185"
  },
  {
    "text": ".NET Core, which is a\nfresh implementation, if you will, of the whole .NET stack, the runtime, and the libraries,",
    "start": "693185",
    "end": "700261"
  },
  {
    "text": "that's intended to be lightweight, and for kinda server-side use; for Cloud, and server workloads.",
    "start": "700262",
    "end": "706519"
  },
  {
    "text": "It's also cross-platform, works in Linux, Mac, oh and Windows.",
    "start": "707457",
    "end": "712681"
  },
  {
    "text": "And we're putting the\nASP.NET framework on top, which is very broadly used web framework,",
    "start": "712681",
    "end": "720433"
  },
  {
    "text": "that you can now run on\nnon Windows machines,",
    "start": "720433",
    "end": "724183"
  },
  {
    "text": "and it's open source. So this kinda helps with,",
    "start": "725665",
    "end": "731711"
  },
  {
    "text": "why are we building a separate one? Well this helps with, sort of the more, the\nlighter weight things",
    "start": "731711",
    "end": "737383"
  },
  {
    "text": "that you wanna do when\nyou're on the server-side. First of all, there's no UI framework, but it also is able to do\nstand-alone deployment.",
    "start": "737383",
    "end": "746157"
  },
  {
    "text": "For instance, you can ship the runtime together with your code, so that you don't have dependencies",
    "start": "746158",
    "end": "751815"
  },
  {
    "text": "on various things being installed on the box that it happens to run on; in the Cloud somewhere. So it kinda has a better architecture,",
    "start": "751815",
    "end": "759694"
  },
  {
    "text": "makes it a lot more\nsuitable for microservices and stuff like that. So it's kinda trying to\nmodernize our platform",
    "start": "759694",
    "end": "767150"
  },
  {
    "text": "for the server-side as well. How many people have dabbled\nwith the .NET Core so far?",
    "start": "767150",
    "end": "773773"
  },
  {
    "text": "So quite a few again. Wow. Given that the tooling\nisn't even at RTM yet, I'm quite impressed.",
    "start": "773773",
    "end": "779421"
  },
  {
    "text": "Do you like it? Okay, I'm glad to hear because\na lot of people don't yet,",
    "start": "779421",
    "end": "785386"
  },
  {
    "text": "but I think we kinda just\nneed to finish it properly. So this kind of proliferation\nof all these different",
    "start": "785386",
    "end": "792260"
  },
  {
    "text": ".NETs that run on different platforms, or sets of platforms, creates a little bit of confusion,",
    "start": "792260",
    "end": "798808"
  },
  {
    "text": "especially if you're a library provider. You wanna try to write something that runs on multiple different platforms.",
    "start": "798809",
    "end": "806965"
  },
  {
    "text": "So we also do one called .NET Standard, which is, we're\nspecifying, instead of APIs",
    "start": "807843",
    "end": "813837"
  },
  {
    "text": "that are supposed to be an all-compliant .NET platform. So if you target that, and you could sort of just\nsay target .NET Standard",
    "start": "813837",
    "end": "822502"
  },
  {
    "text": "in your tool, then the thing\nyou write will run everywhere. So you kinda claw back the ability",
    "start": "822502",
    "end": "829390"
  },
  {
    "text": "to write code that works everywhere in the .NET ecosystem. And we'll evolve the Standard overtime,",
    "start": "830584",
    "end": "837047"
  },
  {
    "text": "including new, kind of\ncore essential libraries, and you can then target\nwhichever Standard you want.",
    "start": "837047",
    "end": "844190"
  },
  {
    "text": "So that's pretty much the rub on where C# runs. And hopefully that should convince,",
    "start": "845672",
    "end": "851207"
  },
  {
    "text": "if there was anyone in the room who needed to be convinced that, people that there's a much\nbigger addressable space",
    "start": "851207",
    "end": "858782"
  },
  {
    "text": "for C# than there's sort\nof traditionally been. And it's kind of exciting for\nus to be able to target that.",
    "start": "860518",
    "end": "868773"
  },
  {
    "text": "So I wanna go to the more geekery side, and talk more about the Project Roslyn.",
    "start": "870893",
    "end": "876915"
  },
  {
    "text": "So, I said that we modernized\nthe C# language engine, if you will. It used to be that\nthere was a C# compiler.",
    "start": "876916",
    "end": "883597"
  },
  {
    "text": "It was written in C++, and then there was Visual Studio,",
    "start": "883597",
    "end": "889428"
  },
  {
    "text": "and some language\nintegration there for C#. Both kind of understood\nC# in their own way,",
    "start": "889428",
    "end": "895338"
  },
  {
    "text": "just a little bit of code sharing, and nobody else could\nkinda get in on the deal. If somebody wanted to\nunderstand anything about C#,",
    "start": "895338",
    "end": "901690"
  },
  {
    "text": "write a tool, or add their\nown IDE support or whatever, they were kinda lost.",
    "start": "901690",
    "end": "907395"
  },
  {
    "text": "They had to start from scratch, because it was all black box.",
    "start": "907395",
    "end": "910964"
  },
  {
    "text": "And that was kinda\nunsatisfactory for us as well. So when we decided it was\ntime to rewrite the compiler, not only did we do it in C#,",
    "start": "913417",
    "end": "920484"
  },
  {
    "text": "but we also took some strong architectural stands, if you\nwill, on how it should be done.",
    "start": "920484",
    "end": "927623"
  },
  {
    "text": "So essentially, I don't\nthink we articulated it quite this way when we started, but this is kinda how it turned out;",
    "start": "927623",
    "end": "933367"
  },
  {
    "text": "that there should really only need to be one place in the world,\nwhere the C# semantics",
    "start": "933367",
    "end": "938814"
  },
  {
    "text": "are implemented. We should build the thing\nthat everybody can use for everything they want\nto do with the language.",
    "start": "938814",
    "end": "946550"
  },
  {
    "text": "Regardless of platform,\nregardless of what it is they're doing, regardless of\nwhether it's a batch process, like a compilation, or\nwhether it's an interactive",
    "start": "946551",
    "end": "954175"
  },
  {
    "text": "situation like an IDE,\nfull of erroneous code and all that stuff.",
    "start": "954175",
    "end": "959636"
  },
  {
    "text": "It should work for all of those things. So it's pretty it's a pretty lofty goal, and it took us quite a\nwhile, and a lot of people",
    "start": "959636",
    "end": "967901"
  },
  {
    "text": "worked on it. But we now have the Roslyn API, which really does satisfy this goal.",
    "start": "967901",
    "end": "973797"
  },
  {
    "text": "And most things out there that understand C# are\nshifting over to Roslyn.",
    "start": "975253",
    "end": "981470"
  },
  {
    "text": "Not all of them. The speaker in the room, Ted Brangs, is an exception to this for\ntechnical reasons of their own.",
    "start": "983873",
    "end": "992595"
  },
  {
    "text": "But so the idea really is that this is the code base that\nyou use to implement IDEs and editors. And if you have analysis\ntools of various kinds,",
    "start": "994140",
    "end": "1001604"
  },
  {
    "text": "linters that call out\nproblems with your code. If you wanna manipulate\ncode, like have automatic",
    "start": "1001604",
    "end": "1007316"
  },
  {
    "text": "fixers, or refactorings or whatever, that produce new code from old code,",
    "start": "1007316",
    "end": "1012588"
  },
  {
    "text": "you can use it. If you actually generate source, you can use it. If you're doing more interactive things,",
    "start": "1012588",
    "end": "1018032"
  },
  {
    "text": "like scripting, or REPLs or whatever, like we have now a C#\nREPL in the Visual Studio,",
    "start": "1018032",
    "end": "1023466"
  },
  {
    "text": "for instance, it's built on top of Roslyn. Oh and it still does\ncompile the code as well and produce output.",
    "start": "1023466",
    "end": "1029209"
  },
  {
    "text": "So, this is sort of a sampling of the kinds of things that you can do,",
    "start": "1030690",
    "end": "1037433"
  },
  {
    "text": "and that people are doing in\nSpades with Roslyn right now. So it has really created this explosion,",
    "start": "1037433",
    "end": "1044478"
  },
  {
    "text": "this can be an explosion\nof language based tools, because people can now get\noff the ground much faster.",
    "start": "1045345",
    "end": "1051304"
  },
  {
    "text": "It sort of democratizes\nworking with the language. You already have something\nyou can ask about, the syntax and semantics,",
    "start": "1051304",
    "end": "1057403"
  },
  {
    "text": "you just need to add the specific bits to what you wanna do.",
    "start": "1057403",
    "end": "1060689"
  },
  {
    "text": "And one particular community\nproject that makes really great use of this is OmniSharp.",
    "start": "1063195",
    "end": "1068467"
  },
  {
    "text": "How many people have heard\nof or used OmniSharp? So that's too few. More of you should know about OmniSharp.",
    "start": "1068467",
    "end": "1075099"
  },
  {
    "text": "It's really a project to make C# available on your favorite editor. Okay?",
    "start": "1075099",
    "end": "1080803"
  },
  {
    "text": "And the way they do it is pretty clever. Because C# now runs everywhere, they can take the Roslyn C# engine,",
    "start": "1080803",
    "end": "1087984"
  },
  {
    "text": "and they can run it in a separate process on whatever machine you're developing on, be it a Mac or whatever.",
    "start": "1089236",
    "end": "1096104"
  },
  {
    "text": "They run that as a separate process and then they only need\nto do a thin integration",
    "start": "1096104",
    "end": "1101275"
  },
  {
    "text": "into whatever integration layer that particular editor has\nthat talks on the wire,",
    "start": "1101275",
    "end": "1108179"
  },
  {
    "text": "using some wire format,\ntalks to the process about everything regarding the language. So every time you press a\nkey, like you press dot,",
    "start": "1108179",
    "end": "1114346"
  },
  {
    "text": "and you wanna get completion, it asks the process next door, like, \"Hey, they pressed dot.",
    "start": "1114347",
    "end": "1119978"
  },
  {
    "text": "What should I show in\nthe completion list?\" And it knows all the semantics. It'll tell them, \"Oh these five methods are\navailable, show those.\"",
    "start": "1119978",
    "end": "1125906"
  },
  {
    "text": "And it's kinda this\nseparation of concerns, where all the language understanding is wrapped up in a separate process,",
    "start": "1125906",
    "end": "1132755"
  },
  {
    "text": "and can be created over that\nstandardized wire format. And so that made it possible to go and implement really good,",
    "start": "1132755",
    "end": "1139450"
  },
  {
    "text": "semantically-aware C#\nmodes in lots of editors that some of you might love\nit, or hate or whatever.",
    "start": "1139451",
    "end": "1147151"
  },
  {
    "text": "Some of which are sampled up here. I should note that Microsoft's\nVisual Studio code, for instance, uses\nOmniSharp for its C# mode,",
    "start": "1147151",
    "end": "1154746"
  },
  {
    "text": "which is an extension\nthat you just load in like anything else. It's not built into the editor. C# is just an extension\nlike other languages.",
    "start": "1154746",
    "end": "1163306"
  },
  {
    "text": "So that's a pretty cool\ntechnology I think. I also want to. It's time for some code, I think,",
    "start": "1163306",
    "end": "1170044"
  },
  {
    "text": "and I don't know if you're itching for code as well, or it makes you sleepy. It's probably 50-50.",
    "start": "1170044",
    "end": "1175242"
  },
  {
    "text": "I should go out and see if I have my\nproject still running here.",
    "start": "1175243",
    "end": "1181349"
  },
  {
    "text": "So let's do, probably the weirdest,",
    "start": "1181349",
    "end": "1184266"
  },
  {
    "text": "geekiest example here. We have some resolution issues here. Can you see the code on the back row?",
    "start": "1186636",
    "end": "1194376"
  },
  {
    "text": "- [Audience Member] Yes. - [Instructor] Yes? You can actually read it? - [Audience Member] Yeah. - [Instructor] Cool. Well it is a pretty big screen up there.",
    "start": "1194376",
    "end": "1200836"
  },
  {
    "text": "Good! So what I wanna do, is\none of the things we did to kinda help people get started",
    "start": "1200836",
    "end": "1207364"
  },
  {
    "text": "thinking about language-based tool, and tried to democratize is\nwe created this framework, that we call the Analyzer framework,",
    "start": "1207364",
    "end": "1213444"
  },
  {
    "text": "where it's really easy to build something that analyzes people's source code,",
    "start": "1213444",
    "end": "1219148"
  },
  {
    "text": "and can give diagnostics on it. And also to build something, that when you get those diagnostics, it will offer up fixes to the code.",
    "start": "1219148",
    "end": "1227444"
  },
  {
    "text": "And so if you think\nabout your organization having special code styles\nthat you want to enforce,",
    "start": "1227444",
    "end": "1232992"
  },
  {
    "text": "or you have refactorings\nthat you wanna build, because you often do\nthis kind of manipulation",
    "start": "1232992",
    "end": "1238815"
  },
  {
    "text": "of the code yourself,\nor you wanna share that with the world; you have fixes that\nyou often find yourself",
    "start": "1238815",
    "end": "1246117"
  },
  {
    "text": "doing that you might as well automate; this is the tool for you. And this is a project type\nthat you can just install",
    "start": "1246117",
    "end": "1253668"
  },
  {
    "text": "in Visual Studio and start using. When you open the project, it comes with a bunch of boilerplate",
    "start": "1253668",
    "end": "1259145"
  },
  {
    "text": "already built for you. So what happens, specifically, when you enter debug mode\non a project like this,",
    "start": "1259145",
    "end": "1265408"
  },
  {
    "text": "is that it takes that analyzer\nthat you were writing, and the code fixes and whatever,",
    "start": "1265408",
    "end": "1271264"
  },
  {
    "text": "and it installs them. They can be run in batch code or whatever, you can ship them as a nougat package, but what I does is, it\nactually installs them",
    "start": "1271264",
    "end": "1277807"
  },
  {
    "text": "as a Visual Studio extension, in a nested version of Visual Studio that it then runs as part\nof the debug mode here.",
    "start": "1277807",
    "end": "1284943"
  },
  {
    "text": "So now I have Visual Studio running Visual Studio with a code\nfixes that I'm writing actually operative in the\nnested version of Visual Studio.",
    "start": "1284943",
    "end": "1293255"
  },
  {
    "text": "So let's open some code\nin the nested version of Visual Studio here. And so I should say, I\nhaven't completely written",
    "start": "1293255",
    "end": "1300354"
  },
  {
    "text": "those analyzers yet. We'll do that together. So it doesn't do anything yet. But here's some sample code\nthat we want to operate on.",
    "start": "1300354",
    "end": "1308673"
  },
  {
    "text": "The thing I want to implement\nis fairly syntactical, just for simplicity, but\nI could have implemented",
    "start": "1309829",
    "end": "1314929"
  },
  {
    "text": "some Antegros as well. The Roslyn engine provides\ncomplete information for me to use, but what\nI wanna just say here is,",
    "start": "1314929",
    "end": "1321954"
  },
  {
    "text": "it's bad style to have statements\ninside of ifStatements, or else clauses, that don't\nhave curlies around em'.",
    "start": "1321954",
    "end": "1330414"
  },
  {
    "text": "We wanna implement that old-fashioned, rigid style of there\nalways have to be curlies, because then you don't\nget so many bugs as you",
    "start": "1330414",
    "end": "1336946"
  },
  {
    "text": "edit the code later. So we wanna actually\ncomplain about this code in those cases, and for the sake of time,",
    "start": "1336946",
    "end": "1344554"
  },
  {
    "text": "I will only implement it for if, but we could also implement it for else. So let's implement a little code analyzer live here.",
    "start": "1344554",
    "end": "1350690"
  },
  {
    "text": "So we go back to the running code. I'm not actually gonna\nstop the nested thing here.",
    "start": "1351994",
    "end": "1358065"
  },
  {
    "text": "I'm going to just put a break point. So what I did is essentially,\nwhat I did ahead of time is I'm just registering that,",
    "start": "1359049",
    "end": "1366255"
  },
  {
    "text": "whenever we see an ifStatement, we should call this method AnalyzeNode. That's all I did,",
    "start": "1366255",
    "end": "1371548"
  },
  {
    "text": "and so whenever the source analysis in Visual Studio hits an\nifStatement, go here, okay?",
    "start": "1371548",
    "end": "1378940"
  },
  {
    "text": "And let's then go and trigger that. So if we go to the nested\nVisual Studio here,",
    "start": "1378940",
    "end": "1386380"
  },
  {
    "text": "and I do an edit, it\nwill reanalyze the code, and boom! It'll hit the break point and I now get all kinds of information",
    "start": "1386380",
    "end": "1394639"
  },
  {
    "text": "about where I am in the code\nthat I can start working on. So the thing that I get\npast is a context object.",
    "start": "1394639",
    "end": "1401850"
  },
  {
    "text": "So let's look, what's inside of that: context. Hmm, it looks like I am able to report",
    "start": "1403244",
    "end": "1409537"
  },
  {
    "text": "diagnostics if I don't\nlike this ifStatement. I can also get the node of the syntax tree",
    "start": "1409537",
    "end": "1414848"
  },
  {
    "text": "that I'm looking at, which\nis the ifStatement hopefully. So let's start getting that out",
    "start": "1414848",
    "end": "1420551"
  },
  {
    "text": "and if we hover over it here, since we're in debug mode, that's an actual object\nthat got passed in. We see that it is indeed an ifStatement.",
    "start": "1421456",
    "end": "1427440"
  },
  {
    "text": "Sorry that the font is\na little small here. So let's get it as an ifStatement",
    "start": "1427440",
    "end": "1432905"
  },
  {
    "text": "using just, essentially\nRoslyn is an object model for code, right?",
    "start": "1432905",
    "end": "1438175"
  },
  {
    "text": "So I'm just looking at a syntax tree node, and it happens to be of the derived class that is a ifStatement syntax here.",
    "start": "1438176",
    "end": "1444424"
  },
  {
    "text": "So we can say var\nifStatement is that thing.",
    "start": "1444425",
    "end": "1448092"
  },
  {
    "text": "And now that's the only kinda thing we're gonna get called with, so I'm gonna skip checking that it actually was an ifStatement.",
    "start": "1449720",
    "end": "1456729"
  },
  {
    "text": "And we'll just say, when\nis an ifStatement wrong? Well it's wrong if the\nifStatement's statement,",
    "start": "1456729",
    "end": "1463361"
  },
  {
    "text": "the thing that's inside of it, if that is not something\nwith curlies around it.",
    "start": "1463361",
    "end": "1468424"
  },
  {
    "text": "That's called a block. So if the kind of thing that this is is not a block,",
    "start": "1468425",
    "end": "1474098"
  },
  {
    "text": "SyntaxKind.block, then I wanna complain. Okay? Then I wanna say to the\nuser, \"You're wrong.\"",
    "start": "1475096",
    "end": "1483320"
  },
  {
    "text": "And so what I essentially\nwant to do is take that, remember that report\ndiagnostic that I have here.",
    "start": "1483320",
    "end": "1489350"
  },
  {
    "text": "Now I'm gonna report a diagnostic. Okay? And what am I gonna put in there?",
    "start": "1489350",
    "end": "1495812"
  },
  {
    "text": "I'm gonna put a diagnostic. Okay? Whatever that is, let's call it Diagostic.",
    "start": "1495812",
    "end": "1501409"
  },
  {
    "text": "So I don't have that yet, so I'm going to use a little refactoring to generate a local for it.",
    "start": "1502452",
    "end": "1509294"
  },
  {
    "text": "It turns out I can create a diagnostic by saying Diagnostic.Create, and it takes a few things\nI happen to have prepared.",
    "start": "1510158",
    "end": "1517990"
  },
  {
    "text": "A descriptor, sorry, is called Rule,",
    "start": "1517990",
    "end": "1522520"
  },
  {
    "text": "and then I need some kind of location. That is where to put\na squiggle in the code",
    "start": "1523598",
    "end": "1528846"
  },
  {
    "text": "when this problem appears, and then I need to say\nwhat kind of statement,",
    "start": "1528846",
    "end": "1534197"
  },
  {
    "text": "what kind of thing I'm\nlooking at here as well. So okay, and we need or find\nout what the location is.",
    "start": "1534197",
    "end": "1539701"
  },
  {
    "text": "So let's do that refactoring\nagain, generate a local. This is all while I'm in\ndebug mode, by the way, I'm actually debugging right now.",
    "start": "1539701",
    "end": "1547378"
  },
  {
    "text": "Let's see, what is the location? We're probably, the node\nthat I'm looking at, the ifStatement.",
    "start": "1549050",
    "end": "1555270"
  },
  {
    "text": "Where do we actually want the squiggle? Let's have it on the if keyword, alright? So the ifStatement, what does it have?",
    "start": "1555270",
    "end": "1561542"
  },
  {
    "text": "It has an if keyword, because this is a concrete syntax tree. It has all the details about the code,",
    "start": "1561542",
    "end": "1566790"
  },
  {
    "text": "including where everything is. And so let's get the location of that.",
    "start": "1566790",
    "end": "1573606"
  },
  {
    "text": "Let's see there's a get location method. Let's get the location of that if keyword and put that in.",
    "start": "1573606",
    "end": "1579112"
  },
  {
    "text": "Okay so I just wrote some code. Let's see if it actually works. Let's remove the break point,",
    "start": "1579112",
    "end": "1586191"
  },
  {
    "text": "and keep running in the debugger. We wait a little to see what happens, and now you see squiggles\nappear in the ifStatements",
    "start": "1587447",
    "end": "1593564"
  },
  {
    "text": "up here, right? So that was all I had\nto do: was write those three, four lines of\ncode in order to identify",
    "start": "1593564",
    "end": "1599249"
  },
  {
    "text": "the problem and tell the\nframework where to show it. Okay?",
    "start": "1599249",
    "end": "1604802"
  },
  {
    "text": "And just to prove to you\nthat it actually works, I can go, where did that sound come from?",
    "start": "1605785",
    "end": "1613553"
  },
  {
    "text": "I can go and put curlies there and the squiggle will\ngo away in that half. Alright? So essentially we've\ncreated a very easy to use,",
    "start": "1613553",
    "end": "1622009"
  },
  {
    "text": "it gets a little harder when\nyou start to do complex things, but a relatively easy to\nuse model of the language,",
    "start": "1623143",
    "end": "1629326"
  },
  {
    "text": "including its full syntax, and\nits full binding semantics, and so on, so that people can build tools, share them out, and the\nwhole editing experience",
    "start": "1629327",
    "end": "1636508"
  },
  {
    "text": "for everyone using C#, regardless\nof which editor they use, as long as it's based on Roslyn,",
    "start": "1636509",
    "end": "1643066"
  },
  {
    "text": "and regardless of which\nplatform they're on, they can benefit from these.",
    "start": "1643066",
    "end": "1649647"
  },
  {
    "text": "And the analyzer that I wrote can be equally run in batch mode. It could be part of\nthe compilation process and it could flag warnings or errors,",
    "start": "1649647",
    "end": "1656183"
  },
  {
    "text": "just like the compiler does\nand its own native things. Alright? So let's see, for time,",
    "start": "1656183",
    "end": "1662411"
  },
  {
    "text": "I'm probably gonna skip. I could also implement the fixer, but I'm not gonna do that\nin the interest of time.",
    "start": "1663248",
    "end": "1670416"
  },
  {
    "text": "But we could also write a little fixer, it's not much harder, that actually fixes up the code, and puts those curlies in.",
    "start": "1670416",
    "end": "1676071"
  },
  {
    "text": "Okay, so that's sorta the geek-out on the Roslyn side,",
    "start": "1676072",
    "end": "1678895"
  },
  {
    "text": "and how that hopefully\nhelps people get a better editing experience, a better\ndevelopment experience",
    "start": "1681576",
    "end": "1689168"
  },
  {
    "text": "with C#, quite outside the language. It also gave us a much better code base, a much better architecture code base,",
    "start": "1689168",
    "end": "1695512"
  },
  {
    "text": "and obviously one in C#, so we can dogfood our own language, that helps\nus evolve the language itself.",
    "start": "1695512",
    "end": "1700736"
  },
  {
    "text": "It's a lot easier for us now to evolve the language,\nand for the community",
    "start": "1700736",
    "end": "1705944"
  },
  {
    "text": "to participate in that\nevolution through contributions. So let's take a quick\nreminder of the evolution",
    "start": "1705944",
    "end": "1713064"
  },
  {
    "text": "of C# here. That's a lot of versions. I'm not gonna go through all of them,",
    "start": "1713064",
    "end": "1718757"
  },
  {
    "text": "but I think what it kinda shows is this kind of\naggressiveness that we've had",
    "start": "1718757",
    "end": "1724501"
  },
  {
    "text": "in innovation. I may wanna point out the Async.",
    "start": "1724501",
    "end": "1730301"
  },
  {
    "text": "There's a couple things, where I think we kinda did\nfun things in the language.",
    "start": "1731857",
    "end": "1737641"
  },
  {
    "text": "We did the link, the queries that we introduced in C# three.",
    "start": "1737641",
    "end": "1742401"
  },
  {
    "text": "One of the things that we try to do is, we try to take concepts that exist in interesting languages\nthat aren't very used,",
    "start": "1746095",
    "end": "1752540"
  },
  {
    "text": "and we try to mainstream them, and kinda pull them into C#\nas a mainstream language, and help bring them to a\nbroader market, if you will.",
    "start": "1752540",
    "end": "1760284"
  },
  {
    "text": "This is definitely an example of that. The link queries in C# are an example of comprehensions that you\nfind in functional languages",
    "start": "1760284",
    "end": "1767602"
  },
  {
    "text": "and so on. We pulled those in along with Lambdas. Now every language in\nthe world has Lambdas. It was a little less common back then.",
    "start": "1767603",
    "end": "1773486"
  },
  {
    "text": "Java got them now I hear. So that's pretty cool. Of course, way back in\nC# two we did Generics,",
    "start": "1773486",
    "end": "1781049"
  },
  {
    "text": "only a little later than Java did. I actually got to be part of\nintroducing Generics to Java,",
    "start": "1781049",
    "end": "1786521"
  },
  {
    "text": "then went to C#, and was\npart of rolling it out there. In C# we did it right, in that,",
    "start": "1786521",
    "end": "1794489"
  },
  {
    "text": "I'm sorry, I'm getting into Java-bashing. I shouldn't really. We did it right, in that,\nGenerics are kinda deeply",
    "start": "1794489",
    "end": "1801871"
  },
  {
    "text": "implemented into the runtime. Java did the more cautious approach",
    "start": "1801871",
    "end": "1806975"
  },
  {
    "text": "of making Generics\nsomething that the compiler compiles away. When you have it deeply in the runtime,",
    "start": "1806975",
    "end": "1812224"
  },
  {
    "text": "that's really good for, first of all, getting the semantic\n100%, but it also means",
    "start": "1812224",
    "end": "1819234"
  },
  {
    "text": "that the performance\ncharacteristics are very different, especially when you have value types in the language, like C# had\nfrom version one on here,",
    "start": "1819234",
    "end": "1826866"
  },
  {
    "text": "that Java's possibly getting\nit sometime in the future. When you have value types,\nyou really want Generics",
    "start": "1826866",
    "end": "1833394"
  },
  {
    "text": "to recognize those and\nkinda specialize for those value types so you don't\nget a lot of boxing and allocation around using Generics.",
    "start": "1833394",
    "end": "1840994"
  },
  {
    "text": "It has to be that Generics makes your code faster, not slower. And Generics has really\nbeen the work horse",
    "start": "1840994",
    "end": "1846995"
  },
  {
    "text": "for many of the language features we did since then. We were able to do queries right,",
    "start": "1846995",
    "end": "1852497"
  },
  {
    "text": "because of Generics. Because the Generics\nwas deeply implemented in the runtime, were\navailable through reflection,",
    "start": "1852498",
    "end": "1859666"
  },
  {
    "text": "as we did all kinds of weird code quoting, and translating C# to SQL,\nand all that kind of stuff.",
    "start": "1859666",
    "end": "1866043"
  },
  {
    "text": "It was all based on the fact\nthat the types would flow, and that would be\navailable even at runtime.",
    "start": "1866043",
    "end": "1871642"
  },
  {
    "text": "Dynamic we integrated dynamic-ness",
    "start": "1871642",
    "end": "1874475"
  },
  {
    "text": "into a static type system, by having a type for\nwhen things were dynamic, called Dynamic.",
    "start": "1877204",
    "end": "1881262"
  },
  {
    "text": "Again, uses Generics\nheavily under the hood to make that efficient, and\nto avoid a bunch of boxing",
    "start": "1882332",
    "end": "1889844"
  },
  {
    "text": "and stuff. Async: very deeply reliant\non Generics as well.",
    "start": "1889844",
    "end": "1894905"
  },
  {
    "text": "Then in C# six, we got\nRoslyn, and we were like, okay now it's no longer",
    "start": "1896992",
    "end": "1901770"
  },
  {
    "text": "a big war to implement any\ngiven language feature. We actually have more agility, and so now is the time to\ntake all those little features",
    "start": "1902665",
    "end": "1909776"
  },
  {
    "text": "that we never got to implement, that we wanted to implement, to just make development\neasier, and nicer, and lighter, and cleaner.",
    "start": "1909776",
    "end": "1915768"
  },
  {
    "text": "And so we did a swath of those in C# six, which is the version of\nC# that's out there now.",
    "start": "1916960",
    "end": "1922106"
  },
  {
    "text": "And then in C# seven, we're taking on some of the deeper features again, that we think that we,\nagain, borrow heavily",
    "start": "1922106",
    "end": "1929632"
  },
  {
    "text": "from the functional world,\nand we think that we are",
    "start": "1929632",
    "end": "1933799"
  },
  {
    "text": "essentially taking the next step, in terms of dealing with\ndata that's not necessarily",
    "start": "1935640",
    "end": "1941304"
  },
  {
    "text": "so object-oriented, if you will. I think you're seeing us start\nas a very object-oriented",
    "start": "1942729",
    "end": "1949849"
  },
  {
    "text": "language and kinda lean\ntowards a more functional style as a supplement to the\nobject-oriented, if you will,",
    "start": "1949849",
    "end": "1955882"
  },
  {
    "text": "and trying to integrate\nthose as well as we can. It's a bit of an inspiration\nfrom Scala, if you will. and what it's doing on the JVM,",
    "start": "1955882",
    "end": "1962681"
  },
  {
    "text": "which is to try to make functional and object-oriented work well together, but definitely with our\nroots in the imperative",
    "start": "1962681",
    "end": "1969767"
  },
  {
    "text": "object-oriented world for our situation. And so I think the next\nthing we should do,",
    "start": "1969767",
    "end": "1976985"
  },
  {
    "text": "I'm gonna skip the Async demo, since most of you probably\nknow what that is about.",
    "start": "1976985",
    "end": "1982920"
  },
  {
    "text": "And then let's talk a little\nbit about what's coming into C# seven.",
    "start": "1984166",
    "end": "1989612"
  },
  {
    "text": "So how many people actually use C# six?",
    "start": "1989612",
    "end": "1992862"
  },
  {
    "text": "Or knew? So that's quite a lot of you. So many of you have a feeling\nfor what's in there already.",
    "start": "1995877",
    "end": "2002353"
  },
  {
    "text": "So with C# seven, and now I apologize to the few in the room\nthat aren't C sharp-y, if this gets a little too deep here,",
    "start": "2002353",
    "end": "2009918"
  },
  {
    "text": "but, I think, hopefully\nit's still useful to see. I didn't plan to kinda\nshow all the new features that are there, but I think\nsome of the most important",
    "start": "2009918",
    "end": "2016762"
  },
  {
    "text": "ones are worth looking at. They kinda goes to some\nof the common situations",
    "start": "2016762",
    "end": "2022211"
  },
  {
    "text": "you find you're in, where\nthe sort of standard C-style object-oriented paradigm\nget a little in the way.",
    "start": "2022211",
    "end": "2027907"
  },
  {
    "text": "So let's start out with tuples. Okay, so I have this is\nmy whole program here.",
    "start": "2027907",
    "end": "2034454"
  },
  {
    "text": "So I have some numbers. Actually, since they're,",
    "start": "2034454",
    "end": "2038542"
  },
  {
    "text": "they're sort of recognizable here, but not everybody may know them by heart. We actually have binary literals now. It's kind of a tiny feature, but hey.",
    "start": "2041825",
    "end": "2050149"
  },
  {
    "text": "It's good for when you're\nteaching your kids to program, right, oh these are the\nbits that are underneath",
    "start": "2050150",
    "end": "2055165"
  },
  {
    "text": "these numbers. Okay, I'm gonna stop here. No actually, I'm gonna make one more, because another thing we also did,",
    "start": "2055165",
    "end": "2061108"
  },
  {
    "text": "this is totally just in there. I'm just doing this because, yeah I don't know why I'm doing it.",
    "start": "2061109",
    "end": "2066592"
  },
  {
    "text": "But we also have digit separators now so you can, like other languages do, so you can put underbars\nwherever you want,",
    "start": "2066592",
    "end": "2071783"
  },
  {
    "text": "so the numbers get easier to read. And if you want many it's fine. So okay, now let's leave the 32 there.",
    "start": "2071784",
    "end": "2079940"
  },
  {
    "text": "So what I wanna do is I wanna implement a method called Tally,",
    "start": "2079940",
    "end": "2084321"
  },
  {
    "text": "that summarizes the numbers in an array, that sums them up, and also counts them.",
    "start": "2086512",
    "end": "2092061"
  },
  {
    "text": "Okay? So we'll tally these numbers, okay?",
    "start": "2092062",
    "end": "2095812"
  },
  {
    "text": "Of course I don't have that method yet, so let's use the\nrefactoring to generate it. So this is static method here.",
    "start": "2097126",
    "end": "2104322"
  },
  {
    "text": "It returns void. It probably should return something else.",
    "start": "2105534",
    "end": "2111597"
  },
  {
    "text": "So here's the question, right? Should it return the sum or\nshould it return the count?",
    "start": "2111597",
    "end": "2117154"
  },
  {
    "text": "Both, yes right. Okay, so the idea is you\ncan only return one thing",
    "start": "2117154",
    "end": "2122328"
  },
  {
    "text": "in C# today, but tomorrow\nyou can return two things, and three, like cuddling,",
    "start": "2122328",
    "end": "2128631"
  },
  {
    "text": "but you can also return four. So if you were in the\nroom last week cuddling, we beat you by one.",
    "start": "2128631",
    "end": "2134031"
  },
  {
    "text": "Actually we beat you by infinite, because you can have as\nbig tuples as you want, but it's probably a bad idea.",
    "start": "2134031",
    "end": "2140375"
  },
  {
    "text": "So let's return two ints, okay? So this is a tuple type,\nand it sort of deliberately,",
    "start": "2140375",
    "end": "2147916"
  },
  {
    "text": "well it's a tuple type. So it says two ints, so it should be pretty easy to understand.",
    "start": "2147916",
    "end": "2154259"
  },
  {
    "text": "And here's a tuple literal\nthat we'll return a dummy for now to get started.",
    "start": "2154260",
    "end": "2159161"
  },
  {
    "text": "That then consists of some values, also with parentheses and commas, and that shouldn't be too\nsurprising as syntax for it.",
    "start": "2160102",
    "end": "2167778"
  },
  {
    "text": "And so when I go up here, I can take the result of the tally, and I can look at it, and lo and behold,",
    "start": "2167778",
    "end": "2173251"
  },
  {
    "text": "it's a tuple. Great, so how can I use a tuple?",
    "start": "2173251",
    "end": "2176902"
  },
  {
    "text": "Let's print something out, since this is a console app. That's pretty much what we can do. Interpolated strings, we love them.",
    "start": "2178558",
    "end": "2185212"
  },
  {
    "text": "The sum is probably the\nfirst thing in there. So let's see, t. Let's see what a tuple has.",
    "start": "2185212",
    "end": "2192355"
  },
  {
    "text": "It has an item one and it has an item two. Okay, it's kinda obvious what they are,",
    "start": "2192355",
    "end": "2197585"
  },
  {
    "text": "so we can use them. Not the best names in the world, but it works.",
    "start": "2197585",
    "end": "2202707"
  },
  {
    "text": "t.Item2, okay. So here's something that works,",
    "start": "2202707",
    "end": "2209035"
  },
  {
    "text": "but it would be nice if\nthey had nicer names. So tuples in C# can actually\noptionally have names",
    "start": "2209035",
    "end": "2215650"
  },
  {
    "text": "for the different elements here. So now I give them names. And what does that mean?",
    "start": "2219395",
    "end": "2225446"
  },
  {
    "text": "Well it means that when I get it back, it tells me what they\nare, a good, sort of,",
    "start": "2225446",
    "end": "2230470"
  },
  {
    "text": "operational comment, if you will. It also means though, that if I go here,",
    "start": "2230470",
    "end": "2235820"
  },
  {
    "text": "and press dot, in addition to these, which, this is a preview;",
    "start": "2235821",
    "end": "2241350"
  },
  {
    "text": "the final version should probably hide the bad names. We have the good names, because you can see sum is here and I can use that name instead.",
    "start": "2241350",
    "end": "2247817"
  },
  {
    "text": "So these are the, sort of, real names of the underlying type, but the compiler knows to keep track",
    "start": "2249538",
    "end": "2254679"
  },
  {
    "text": "of these other names\nand show those instead. So you get a nice experience\ngoing against that.",
    "start": "2255581",
    "end": "2261773"
  },
  {
    "text": "So I think it's important that tuples have names in them, because who can remember",
    "start": "2263197",
    "end": "2268675"
  },
  {
    "text": "whether it was first name, last name, or last name, first name, and all those things, right? They need to come with that information,",
    "start": "2270153",
    "end": "2276097"
  },
  {
    "text": "and it needs to be operational. You need to be able to get it. Of course, you might prefer to immediately",
    "start": "2276097",
    "end": "2283305"
  },
  {
    "text": "pick the tuple apart as you get it and deconstruct it, and\nyou can do that too in C#. So you can say sum, count here,",
    "start": "2283305",
    "end": "2291257"
  },
  {
    "text": "and now the tuple immediately\ngets deconstructed into sum variable and to count variable that get declared here.",
    "start": "2291257",
    "end": "2297684"
  },
  {
    "text": "And instead of t. here, we\ncan just say sum and count. Okay.",
    "start": "2298527",
    "end": "2303537"
  },
  {
    "text": "Alright? Tuple names, yea? (audience applause)",
    "start": "2303538",
    "end": "2309978"
  },
  {
    "text": "So let's go now and implement\nthis method for real. So instead of returning just a dummy here,",
    "start": "2313258",
    "end": "2320241"
  },
  {
    "text": "let's return a result,",
    "start": "2320241",
    "end": "2322074"
  },
  {
    "text": "and let's make the result\nequal to that dummy value here to start with.",
    "start": "2327488",
    "end": "2333616"
  },
  {
    "text": "So what we wanna do is we\nwanna, foreach of the numbers, let's call them values,\nbecause I like that better.",
    "start": "2333616",
    "end": "2338960"
  },
  {
    "text": "Let's foreach of the values, and var v in values.",
    "start": "2338960",
    "end": "2342719"
  },
  {
    "text": "And then we want to update\nthe result every time around. So we can say, actually\nresult is too long.",
    "start": "2344860",
    "end": "2352371"
  },
  {
    "text": "I wanna just call it r. Is that okay? There we go. So let's just say r equals,",
    "start": "2352371",
    "end": "2358782"
  },
  {
    "text": "and then a new tuple literal, r. I wanna get the old value out.",
    "start": "2359787",
    "end": "2365338"
  },
  {
    "text": "I wish the r had names as well. Let's go and give it names. You can give names in the\ntuple literal as well.",
    "start": "2365339",
    "end": "2372719"
  },
  {
    "text": "So you do that with the same syntax that you use for named arguments.",
    "start": "2372719",
    "end": "2377613"
  },
  {
    "text": "So now r has a \"s\" and a \"c.\" So now we can say r.s, the\nsum that's already there, plus the new value, and the\ncount that was already there,",
    "start": "2379626",
    "end": "2388483"
  },
  {
    "text": "plus one. Okay?",
    "start": "2388483",
    "end": "2390838"
  },
  {
    "text": "You might be justified in wondering, isn't this terribly wasteful? Isn't he allocating a new array? Or a new tuple every\ntime around in this loop,",
    "start": "2396306",
    "end": "2403265"
  },
  {
    "text": "and in these resource constrained devices, and cycles that cost money",
    "start": "2403266",
    "end": "2408769"
  },
  {
    "text": "on the Cloud and so on? Isn't it wasteful to\nallocate all these tuples? And it's not because the\ntuples aren't actually objects.",
    "start": "2410066",
    "end": "2417400"
  },
  {
    "text": "Tuples are implemented as a\nvalue type, as a struct in C#. So they're not allocated.",
    "start": "2417400",
    "end": "2422413"
  },
  {
    "text": "This is just really in\nplace, updating some stuff that's already on the stack. Right, so their value\ntypes are passed by copy,",
    "start": "2422413",
    "end": "2429925"
  },
  {
    "text": "not by reference. Tuples don't have identity, they just have values. Okay?",
    "start": "2429925",
    "end": "2434327"
  },
  {
    "text": "Which I think is the way tuples should be. They should sort of be ephemeral. They shouldn't have this\nkind of life of their own,",
    "start": "2435551",
    "end": "2440604"
  },
  {
    "text": "and also it's more\nefficient, so that's good.",
    "start": "2440604",
    "end": "2444354"
  },
  {
    "text": "Tuples are not only value types, they're also mutable. And I know there are people\nin the functional camp",
    "start": "2446223",
    "end": "2452263"
  },
  {
    "text": "that are going to revolt about this, because they already have,\nbut tuples are mutable.",
    "start": "2452263",
    "end": "2458447"
  },
  {
    "text": "You can mutate a tuple. So instead of doing this, I could write, it's probably less\nelegant, but I could write,",
    "start": "2458447",
    "end": "2464876"
  },
  {
    "text": "r.s += value. And as a separate statement:\nr.c ++, no pun intended.",
    "start": "2464876",
    "end": "2474595"
  },
  {
    "text": "Well a little, but I can actually mutate\nthe tuple in place, because that's not dangerous,",
    "start": "2474595",
    "end": "2480424"
  },
  {
    "text": "because there's no shared mutable state among threads or whatever here, because it's a struct, right?",
    "start": "2480424",
    "end": "2485557"
  },
  {
    "text": "Nobody's sharing it. You pass it to someone, it's a copy. So it's not actually dangerous.",
    "start": "2485558",
    "end": "2491588"
  },
  {
    "text": "So we just said, what the heck? This is one of these, like, why does it always have to\nbe so object-oriented, right?",
    "start": "2491589",
    "end": "2496663"
  },
  {
    "text": "Why does everything\nhave to be encapsulated? And so tuples don't have properties,",
    "start": "2496663",
    "end": "2502644"
  },
  {
    "text": "they just have fields. They're just a struct with\nsome mutable public fields. There, alright?",
    "start": "2502644",
    "end": "2508556"
  },
  {
    "text": "It's as simple as it gets, so\nyou understand what you have. I think that's right for tuples, because they're not really an abstraction.",
    "start": "2508556",
    "end": "2514732"
  },
  {
    "text": "They're not wrapping something. They're just values. So let em' just be values. So I could do this,\nbut let's actually not,",
    "start": "2514732",
    "end": "2522948"
  },
  {
    "text": "because I like the other thing better. Okay? So the remaining few things\nthere are to say about tuples",
    "start": "2522948",
    "end": "2531037"
  },
  {
    "text": "is that, since it's a type, it has value equality.",
    "start": "2531037",
    "end": "2536567"
  },
  {
    "text": "So you can use it as a key in\na dictionary, for instance. So that means,",
    "start": "2536568",
    "end": "2541808"
  },
  {
    "text": "if you want to be keyed off of two things, they both have to be right, then you can just the tuple as the key,",
    "start": "2543541",
    "end": "2549053"
  },
  {
    "text": "and everything works right; the hatch code and\neverything work out right in the data structures.",
    "start": "2549053",
    "end": "2553682"
  },
  {
    "text": "Also, of course, it's a good\nway to get multiple results back from an asynchronous method, because if your Async,",
    "start": "2554942",
    "end": "2560878"
  },
  {
    "text": "and you return task of the tuple, then it all works out when\nyou go up here and await it.",
    "start": "2561724",
    "end": "2567380"
  },
  {
    "text": "The tuple comes back out,\nand you can deconstruct and keep going. So they're a good transport.",
    "start": "2567381",
    "end": "2572461"
  },
  {
    "text": "For the situation around\nmultiple results was even worse for Async methods and other methods,",
    "start": "2572461",
    "end": "2579002"
  },
  {
    "text": "because you couldn't use out parameters, but now you can just use tuples. Okay?",
    "start": "2579002",
    "end": "2583033"
  },
  {
    "text": "Of course I don't get to await, because that thing was not Async. But ignore that, okay? So that's tuples for you.",
    "start": "2584062",
    "end": "2589969"
  },
  {
    "text": "The other thing that I\nthink is quite interesting is that we are starting to\nadd pattern matching to C#.",
    "start": "2591254",
    "end": "2599005"
  },
  {
    "text": "And that's a whole new\nconcept that we're bringing in from the functional camp, and we're sort of doing it gradually.",
    "start": "2599006",
    "end": "2604062"
  },
  {
    "text": "So I think that you'll\nsee more on that front in later versions of C#,",
    "start": "2604062",
    "end": "2608239"
  },
  {
    "text": "but we're taking a big step, I think, in introducing the\nfirst couple of patterns.",
    "start": "2610642",
    "end": "2615682"
  },
  {
    "text": "And so how does this work? Well let's turn this example into one where we have recursive lists of numbers.",
    "start": "2615682",
    "end": "2621674"
  },
  {
    "text": "So instead of an int array,\nthis is an object array, where we just have a convention\nthat the things inside are either ints or they're\nother arrays with ints in them.",
    "start": "2621674",
    "end": "2630085"
  },
  {
    "text": "So new object array, with some of these ints nested inside,",
    "start": "2630085",
    "end": "2634085"
  },
  {
    "text": "like this. Maybe there's also a null\nin there for good measure, and now we wanna update the tally method,",
    "start": "2635852",
    "end": "2641722"
  },
  {
    "text": "so that it can deal with that. So let's take object arrays instead here, and now we get an error here",
    "start": "2641722",
    "end": "2647550"
  },
  {
    "text": "because v is not an int anymore. It's an object. So we need to know that it's an int before we can add it here. So we need some kind of logic there,",
    "start": "2649934",
    "end": "2657343"
  },
  {
    "text": "and what we would do in the old days, is we'd do a type test. So well say if v is int,",
    "start": "2658418",
    "end": "2663510"
  },
  {
    "text": "then we can go and do this, but of course, even though we just checked",
    "start": "2666378",
    "end": "2672448"
  },
  {
    "text": "that it's int, we don't actually\nknow it again down here. We have to check it again\nand cast it or whatever. So what we're doing instead now,",
    "start": "2672448",
    "end": "2678056"
  },
  {
    "text": "is we're, so first approximation,\nyou could think of it as, we're extending the is expression.",
    "start": "2678056",
    "end": "2684609"
  },
  {
    "text": "So that you can now\ndeclare a variable here. When you ask if it's in, if it is, then take that int and put\nit into the new variable i.",
    "start": "2684609",
    "end": "2692536"
  },
  {
    "text": "And then the variable\ni has the value of v, but typed as int. So now I can add it here,\nand I know I'm good.",
    "start": "2692537",
    "end": "2699593"
  },
  {
    "text": "Okay? So it's sort of just an extended version of the is expression, if you will.",
    "start": "2699593",
    "end": "2705744"
  },
  {
    "text": "But what's really going on is that the is expression is now being extended to allow patterns, which\nis a new concept in C#.",
    "start": "2705745",
    "end": "2712866"
  },
  {
    "text": "Patterns, instead of just types. And patterns can be many different things. They can't be very many\ndifferent things now.",
    "start": "2712866",
    "end": "2719777"
  },
  {
    "text": "They can essentially just be constants, or type patterns like this. It could be, a constant\ncould for instance be,",
    "start": "2719777",
    "end": "2727432"
  },
  {
    "text": "you could say v is seven. That's actually also now allowed because that's a constant pattern.",
    "start": "2727433",
    "end": "2733694"
  },
  {
    "text": "And then we are taking these patterns, we're integrating them\ninto language features, such as the is expression.",
    "start": "2733694",
    "end": "2739205"
  },
  {
    "text": "The other place where\nwe're integrating it, just to stay with the example here,",
    "start": "2739205",
    "end": "2745888"
  },
  {
    "text": "is we're integrating into\nthe switch statement. So if I say, if I say switch,",
    "start": "2745888",
    "end": "2752525"
  },
  {
    "text": "if could spell here, switch. I can now switch on anything. It used to be that\nswitch could just switch",
    "start": "2752525",
    "end": "2757825"
  },
  {
    "text": "on primitive types. It's sort of this dinosaur of a feature, but now it can switch on anything. I can switch an object: switch on v.",
    "start": "2757825",
    "end": "2764706"
  },
  {
    "text": "And now in my switch\nstatement, I can have cases that have not just constants in them,",
    "start": "2765866",
    "end": "2771858"
  },
  {
    "text": "which are now just a\nspecial kind of pattern, but the cases can have\nany kind of pattern. So I can say case int\ni, except we need to do",
    "start": "2771858",
    "end": "2779715"
  },
  {
    "text": "something to entail a\nsense here to completion before we ship this.",
    "start": "2779715",
    "end": "2785020"
  },
  {
    "text": "And I have to remember the break, that's why I'm getting the squiggly there. And now, I've essentially used a pattern.",
    "start": "2786400",
    "end": "2791825"
  },
  {
    "text": "So I extended the case clauses\nin the switch statement to be able to apply a pattern,",
    "start": "2791825",
    "end": "2797128"
  },
  {
    "text": "and say when this pattern\napplies, do this particular case. Right? And so now I can sort of modernize",
    "start": "2797128",
    "end": "2803144"
  },
  {
    "text": "the switch statement a bit. I can also say case object array, which is the other thing I'm expecting.",
    "start": "2803144",
    "end": "2811461"
  },
  {
    "text": "Let's call that a, and I can actually also put conditions in my\nswitch, in my case clauses here. So I can say I only want the object a",
    "start": "2811461",
    "end": "2819348"
  },
  {
    "text": "when a is longer than zero, because,",
    "start": "2819348",
    "end": "2823278"
  },
  {
    "text": "a.Length is greater than zero, because, otherwise there's no work to do.",
    "start": "2825393",
    "end": "2832550"
  },
  {
    "text": "Right, and when that's the case, I can do var t = Tally, the nested array,",
    "start": "2832550",
    "end": "2837537"
  },
  {
    "text": "and go add that to r as well; r equals r dot, you know how it goes, r.s + t.sum, r.c + t.c)",
    "start": "2842135",
    "end": "2849227"
  },
  {
    "text": "right? And a break. So again spelling helps.",
    "start": "2856679",
    "end": "2863234"
  },
  {
    "text": "So this is a generalization\nof existing features with patterns, and that's\nhow far we got in C# so far",
    "start": "2863234",
    "end": "2870634"
  },
  {
    "text": "with pattern matching. There are some things that, if I go back to the slides here,",
    "start": "2870634",
    "end": "2876564"
  },
  {
    "text": "some things that we would like to do. There are more things we wanna do with patterns int the future.",
    "start": "2876564",
    "end": "2882336"
  },
  {
    "text": "First of all, we wanna\nhave smarter patterns. So you should be able to\nhave recursive patterns.",
    "start": "2882336",
    "end": "2888708"
  },
  {
    "text": "We actually, I didn't show, but we actually also let you specify in a given type that it\ncan be deconstructed.",
    "start": "2888708",
    "end": "2895912"
  },
  {
    "text": "So you can specify an\npoint type, for instance, that it can be deconstructed, just like a deconstructed\ntuple into separate variables.",
    "start": "2895912",
    "end": "2902727"
  },
  {
    "text": "When things are deconstructable, why don't we put that together\nwith the pattern matching,",
    "start": "2902727",
    "end": "2908270"
  },
  {
    "text": "and allow you to, if both\ncheck that always a point, and if it is, deconstruct\nit, and maybe apply patterns",
    "start": "2908270",
    "end": "2915023"
  },
  {
    "text": "recursively here saying, if o is a point, and the first part of that point.",
    "start": "2915023",
    "end": "2920734"
  },
  {
    "text": "The x is five, then put the\nsecond part into variable y, and do something with y.",
    "start": "2920735",
    "end": "2926156"
  },
  {
    "text": "So you can kinda get smarter\nand smarter patterns. You can probably also write\nunreadable code with this, but I think in general,\nit's going to be useful",
    "start": "2926156",
    "end": "2933604"
  },
  {
    "text": "to be able to dig little\ndeeper in the pattern. The other thing is,\nmaybe we should come up",
    "start": "2933604",
    "end": "2938979"
  },
  {
    "text": "with new places to have patterns. The switch statement is kinda, it is kinda sixties, right?",
    "start": "2938979",
    "end": "2945162"
  },
  {
    "text": "And so maybe there's an expression version of the switch statement. Maybe it's a match expression,",
    "start": "2945162",
    "end": "2950470"
  },
  {
    "text": "like it's called in functional languages, that has a niftier syntax,",
    "start": "2950470",
    "end": "2955475"
  },
  {
    "text": "it's expression based,\nthe cases are expressions, and your code gets a little\nmore terse like that.",
    "start": "2955475",
    "end": "2960979"
  },
  {
    "text": "But that's the kind of thing\nthat now we have the notion of patterns in there, we can both add new patterns, and add new places where they occur.",
    "start": "2960979",
    "end": "2967459"
  },
  {
    "text": "So that's one thing that we're focused on for the next generation of C#, which we're already working on, because C# seven is pretty much done.",
    "start": "2967459",
    "end": "2973187"
  },
  {
    "text": "We just haven't shipped it yet, and don't ask me when. The other thing we're thinking about is,",
    "start": "2973187",
    "end": "2978578"
  },
  {
    "text": "one of the things I talked about, kinda moving with the state of the art. And one of the things\nthat's becoming mainstream",
    "start": "2978578",
    "end": "2983789"
  },
  {
    "text": "in newer lovely little languages, is the ability to distinguish\nin the type system,",
    "start": "2983789",
    "end": "2990405"
  },
  {
    "text": "when things are supposed to be nullable and when they're not. This variable is supposed\nto sometimes be null,",
    "start": "2990405",
    "end": "2996844"
  },
  {
    "text": "it's part of its domain, this one isn't, so why am I getting all reference\nexceptions all the time? The previous guy here, he\ntalked about the same thing",
    "start": "2996844",
    "end": "3003524"
  },
  {
    "text": "for cuddling. And Swift has that as well, and so on. So we've been like, can we do something",
    "start": "3003524",
    "end": "3009159"
  },
  {
    "text": "for C# along these lines, even though we've had seven versions now, where nullability has been\npurely a runtime thing?",
    "start": "3009159",
    "end": "3016458"
  },
  {
    "text": "And we think we can, and it's\nalong familiar lines, maybe, where we already have that\ntrailing question mark in C#",
    "start": "3016458",
    "end": "3025116"
  },
  {
    "text": "for nullable value types, so if we allow you to apply\nthat to a reference type, maybe that's how you say\nthat something is nullable.",
    "start": "3025116",
    "end": "3031108"
  },
  {
    "text": "And if you say that, then there are things we won't let you do. On the other hand, if you don't say that,",
    "start": "3031108",
    "end": "3036580"
  },
  {
    "text": "and you're up into this new world somehow, then we will expect the thing\nin there to not be null.",
    "start": "3036580",
    "end": "3041692"
  },
  {
    "text": "And we will help you maintain that, okay? So what that means is I\ncan assign null into the n,",
    "start": "3041692",
    "end": "3047413"
  },
  {
    "text": "but not into the s. And I can't assign n to s\nwithout any qualification either, because that might be null, right?",
    "start": "3047413",
    "end": "3054967"
  },
  {
    "text": "So I'm just protecting the variable from the kinds of variables\nthat it's not supposed to hold. On the other hand, though,",
    "start": "3054967",
    "end": "3060088"
  },
  {
    "text": "when I want to use it to reference it, I can do s.Length",
    "start": "3060088",
    "end": "3065572"
  },
  {
    "text": "without any qualification, because I know it's not null. I know it's probably not null,",
    "start": "3065572",
    "end": "3071340"
  },
  {
    "text": "cause we probably can't\ngive any absolute guarantees in a language like C#,",
    "start": "3071340",
    "end": "3077300"
  },
  {
    "text": "but it's probably gonna\nfind most of the places where you're not supposed to dot. So, other hand, n.Length\nis gonna warn you about it",
    "start": "3077300",
    "end": "3085428"
  },
  {
    "text": "potentially being null, and you potentially getting that null reference exception, right?",
    "start": "3085428",
    "end": "3090547"
  },
  {
    "text": "And so the way to get around that is, some of these new languages, they have specific new\nnull-checking features, alright.",
    "start": "3090548",
    "end": "3098730"
  },
  {
    "text": "They have like a new way\nthat pattern matching, or whatever you can use to check for null. We don't wanna change\nhow you check for null.",
    "start": "3098730",
    "end": "3105591"
  },
  {
    "text": "There are already, like, seven ways of checking for null in C#. We're good, thanks. So what we wanna do instead is to track,",
    "start": "3105591",
    "end": "3113405"
  },
  {
    "text": "have the compiler track when you checked that something was null,\nthen use that knowledge. So if you have an ifStatement",
    "start": "3113405",
    "end": "3118806"
  },
  {
    "text": "that sees that n is not,\nin fact, null in this case, then we will know that in\nthe scope of that check.",
    "start": "3118806",
    "end": "3126332"
  },
  {
    "text": "It is, in fact, not null, and we'll assume that it's\nfine that you dot into it. Okay, are there ways to get around this?",
    "start": "3126332",
    "end": "3131388"
  },
  {
    "text": "Yeah, but you kinda have to work a little to get around it now. Instead of the other way around,",
    "start": "3131388",
    "end": "3136404"
  },
  {
    "text": "where you have to work all the time to eliminate all your\nnull reference exceptions. So there'll also be a Dammit operator,",
    "start": "3136404",
    "end": "3144567"
  },
  {
    "text": "we call it, where you can actually\nwalk up to a nullable thing and put a bang, a post a bang on it,",
    "start": "3145509",
    "end": "3151521"
  },
  {
    "text": "and that means, the thing you are, but assuming in the type system that that was not null cause I know better",
    "start": "3151521",
    "end": "3157978"
  },
  {
    "text": "than the compiler. So sometimes you just know, you tested something else\nand you knew somewhere,",
    "start": "3157978",
    "end": "3163186"
  },
  {
    "text": "and you know in this\ncase, this is never null, and if you're bold enough\nto stick with that, you get to insist and we will let you dot",
    "start": "3163186",
    "end": "3169634"
  },
  {
    "text": "without a warning. Alright? So that's another thing that, we're already working on this feature, and we're hoping to get it\nin the next generation of C#.",
    "start": "3169634",
    "end": "3176576"
  },
  {
    "text": "So hopefully that's gonna be useful. The interesting thing about\na feature like this is it needs to not only go into the language,",
    "start": "3176576",
    "end": "3182631"
  },
  {
    "text": "but we need to make sure that\nour frameworks, and so on,",
    "start": "3182632",
    "end": "3186799"
  },
  {
    "text": "are adequately annotated, so that when you build on those, you get the right nullabilities",
    "start": "3187639",
    "end": "3193665"
  },
  {
    "text": "propagated into your own code. Okay, so it is a bit of\na challenging feature, but I think it's worth it.",
    "start": "3193665",
    "end": "3198909"
  },
  {
    "text": "So I think we are at the end, where I say, remember\nto fill out evaluations.",
    "start": "3198909",
    "end": "3204861"
  },
  {
    "text": "Do know that we're over time. Thank you very much. It's a pleasure.\n(audience applauds)",
    "start": "3204861",
    "end": "3212852"
  }
]