[
  {
    "text": "[Music]",
    "start": "3520",
    "end": "7840"
  },
  {
    "text": "welcome to clean architecture with asp.net course 3.0 my name is Jason",
    "start": "13570",
    "end": "18980"
  },
  {
    "text": "Taylor and I'm an SSW solution architect I've been developing now for 19 years and I've learned that the most important",
    "start": "18980",
    "end": "24949"
  },
  {
    "text": "principle is kiss or keep it simple stupid and today I'm going to show you the simplest approach to enterprise",
    "start": "24949",
    "end": "30859"
  },
  {
    "text": "application development with clean architecture let's get started so with",
    "start": "30859",
    "end": "36320"
  },
  {
    "text": "clean architecture the domain and the application layer are at the center of the design this is known as the core of",
    "start": "36320",
    "end": "42860"
  },
  {
    "text": "the system well the domain contains enterprise logic and types and the",
    "start": "42860",
    "end": "48080"
  },
  {
    "text": "application layer contains business logic and types the difference being that the enterprise logic could be",
    "start": "48080",
    "end": "53540"
  },
  {
    "text": "shared across many systems whereas the application logic or the business logic is specific to this system now rather",
    "start": "53540",
    "end": "60140"
  },
  {
    "text": "than have core be dependent on concerns such as data access and infrastructure we invert those dependencies so",
    "start": "60140",
    "end": "66970"
  },
  {
    "text": "presentation and infrastructure depend on core but core has no dependency on",
    "start": "66970",
    "end": "72050"
  },
  {
    "text": "either layer now this is achieved by adding abstractions or interfaces within the application layer which are then",
    "start": "72050",
    "end": "78710"
  },
  {
    "text": "implemented outside of the application layer in other layers so for example if we wanted to implement the repository",
    "start": "78710",
    "end": "84710"
  },
  {
    "text": "pattern we would add an irepository interface within application and an implementation within infrastructure now",
    "start": "84710",
    "end": "92600"
  },
  {
    "text": "with this design all dependencies point inwards so you can see that core has no dependencies on other layers now",
    "start": "92600",
    "end": "99409"
  },
  {
    "text": "presentation and infrastructure depend on core but not on one another and that's very important we want to make",
    "start": "99409",
    "end": "105740"
  },
  {
    "text": "sure that the logic that we create for this system stays within core if presentation for example took a",
    "start": "105740",
    "end": "111680"
  },
  {
    "text": "dependency on an infrastructure so that it could send some notifications that's logic and that logic now has to appear",
    "start": "111680",
    "end": "117860"
  },
  {
    "text": "within the presentation layer and it has to orchestrate that interaction between presentation and infrastructure we don't",
    "start": "117860",
    "end": "123560"
  },
  {
    "text": "want that to happen because we can't reuse that logic we want a system that's going to last 20 years and if we've got",
    "start": "123560",
    "end": "129080"
  },
  {
    "text": "a front end with an asp.net core web api well that's not going to be there in 20 years we need that logic inside of core",
    "start": "129080",
    "end": "135920"
  },
  {
    "text": "where it's isolated from all of those things so this results in architecture and",
    "start": "135920",
    "end": "141910"
  },
  {
    "text": "design that's independent of frameworks it doesn't require the existence of some framework or tool it's testable and it's",
    "start": "141910",
    "end": "148570"
  },
  {
    "text": "easy to test everything in core is isolated from the outside world and it contains your most important system",
    "start": "148570",
    "end": "154570"
  },
  {
    "text": "logic so we can 100% unit test that logic it's independent of the UI so",
    "start": "154570",
    "end": "160660"
  },
  {
    "text": "right now as I mentioned I'm using asp.net core Web API with an angular front-end but I might want to change",
    "start": "160660",
    "end": "166150"
  },
  {
    "text": "that we're all getting a little bit sick of writing JavaScript right so we're going to switch it over to blazer soon and with all of my logic inside of core",
    "start": "166150",
    "end": "172990"
  },
  {
    "text": "that's not going to be so hard it's independent of the database right now we're using sequel server with the same",
    "start": "172990",
    "end": "179470"
  },
  {
    "text": "design we've also used Postgres sequel Lite and we're going to try it out with cosmos DB as well it's independent of",
    "start": "179470",
    "end": "186550"
  },
  {
    "text": "anything external in fact core doesn't know anything at all about the outside world and that's what makes this design",
    "start": "186550",
    "end": "192580"
  },
  {
    "text": "so great we've got all of our logic encapsulated within core isolated from the outside world and that will make a",
    "start": "192580",
    "end": "198520"
  },
  {
    "text": "difference between a system that lasts three years and a system that lasts 20 years let's take a look over a couple of",
    "start": "198520",
    "end": "203830"
  },
  {
    "text": "examples when I first started talking about clean architecture last year we use Northwind traders as a sample",
    "start": "203830",
    "end": "210489"
  },
  {
    "text": "why because Northwind traders is cool and I wanted to show the world now I wasn't wrong this repository on github",
    "start": "210489",
    "end": "218200"
  },
  {
    "text": "now has over close to 3,000 stars and almost 1,000 Forks and as a result of",
    "start": "218200",
    "end": "223959"
  },
  {
    "text": "that there's a great big community behind this project and I want to take a moment to thank them thank you for your",
    "start": "223959",
    "end": "230080"
  },
  {
    "text": "support thank you for your pull request thank you for the tough questions you've really helped to evolve this solution to",
    "start": "230080",
    "end": "236290"
  },
  {
    "text": "become what it is today so based on this I've gone ahead and created a clean architecture solution template so I",
    "start": "236290",
    "end": "242860"
  },
  {
    "text": "wanted a very simple file new project experience right coming back to kiss keep it simple so if you want to",
    "start": "242860",
    "end": "249910"
  },
  {
    "text": "excellent file a new project experience with a clean architecture solution you can use this template if you want",
    "start": "249910",
    "end": "255190"
  },
  {
    "text": "something cool check out an author and traitors let's take a look at an example",
    "start": "255190",
    "end": "261390"
  },
  {
    "text": "so you can see here on my github repo you can access the Northwind traders solution or the clean architecture",
    "start": "261390",
    "end": "267880"
  },
  {
    "text": "template one second please",
    "start": "267880",
    "end": "275419"
  },
  {
    "text": "there we go okay too slow",
    "start": "276409",
    "end": "285768"
  },
  {
    "text": "okay let's try that again",
    "start": "296490",
    "end": "300300"
  },
  {
    "text": "there we go so this is the clean architecture solution template on github you can see",
    "start": "302130",
    "end": "307360"
  },
  {
    "text": "that it's set up as a github template so I can actually just ctrl click on that and create a new repository from the",
    "start": "307360",
    "end": "312970"
  },
  {
    "text": "clean up texture repo so just give it a name and I'm ready to get started but for my experience I wanted a actual",
    "start": "312970",
    "end": "320050"
  },
  {
    "text": "dotnet core solution template so to get started you can actually run dotnet new install clean architecture solution",
    "start": "320050",
    "end": "326770"
  },
  {
    "text": "template and then to create a project you can go dotnet new CA solution let's",
    "start": "326770",
    "end": "331870"
  },
  {
    "text": "have a quick look at that now so if I create a new folder go to Copenhagen",
    "start": "331870",
    "end": "341280"
  },
  {
    "text": "jump into that and then we go dotnet new this only has to be done once or when",
    "start": "341280",
    "end": "348460"
  },
  {
    "text": "you want to update the package clean architecture dot solution template so we",
    "start": "348460",
    "end": "357400"
  },
  {
    "text": "can install the new project template that'll install and then it will give us a list of all of the project templates",
    "start": "357400",
    "end": "362590"
  },
  {
    "text": "that are available from the command line so if we scroll back up here you can see",
    "start": "362590",
    "end": "367690"
  },
  {
    "text": "the clean architecture solution template at the top and it's short name is ca - solution so we can run that now and that",
    "start": "367690",
    "end": "377710"
  },
  {
    "text": "will create the project so what it actually does is create a project with on all of those layers and",
    "start": "377710",
    "end": "385420"
  },
  {
    "text": "all of the infrastructure in place ready to get started because this is something that I was doing manually each time I",
    "start": "385420",
    "end": "390940"
  },
  {
    "text": "had to create a new client project so if we have a quick peek in here you can see that it's using the correct name spacing",
    "start": "390940",
    "end": "396580"
  },
  {
    "text": "also based off the project term folder that we used jumping into source you can",
    "start": "396580",
    "end": "403840"
  },
  {
    "text": "see that we have four folders domain application infrastructure and web UI and then jumping back into tests you can",
    "start": "403840",
    "end": "412150"
  },
  {
    "text": "see that we have test projects for each of those layers as well so what you get out of the box is a template that gets",
    "start": "412150",
    "end": "419110"
  },
  {
    "text": "you up and running quickly we've already wired up kind of the database and asp.net core identity we've provided",
    "start": "419110",
    "end": "426759"
  },
  {
    "text": "solutions of everything that goes into the application layer a domain layer an infrastructure layer so it's really easy",
    "start": "426759",
    "end": "432639"
  },
  {
    "text": "to get started so I won't run that one because it'll have to restore a bunch of",
    "start": "432639",
    "end": "438130"
  },
  {
    "text": "dependencies but we can have a look at this one here so you can see here's the clean architecture solution template in",
    "start": "438130",
    "end": "444190"
  },
  {
    "text": "Visual Studio basically ready to go there's a readme which explains a little",
    "start": "444190",
    "end": "450400"
  },
  {
    "text": "bit about it and shows you how to get up and running that's the same readme from the github repo that's it so very easy",
    "start": "450400",
    "end": "457780"
  },
  {
    "text": "to get started ok so key points of this",
    "start": "457780",
    "end": "463030"
  },
  {
    "text": "section so the domain contains enterprise-wide logic and types and that can be shared across multiple systems",
    "start": "463030",
    "end": "468660"
  },
  {
    "text": "application layer contains business logic and types and that's specific to this system infrastructure contains all",
    "start": "468660",
    "end": "475000"
  },
  {
    "text": "external concerns and previous versions of this talk and in previous versions of the northland trader solution I",
    "start": "475000",
    "end": "480849"
  },
  {
    "text": "separated our persistence and infrastructure into two different layers but I found it simpler just to bring",
    "start": "480849",
    "end": "486520"
  },
  {
    "text": "them together I mean what's simpler than two projects right one project so I merged it together a lot of the dependencies were",
    "start": "486520",
    "end": "492280"
  },
  {
    "text": "similar so that was easy so presentation and infrastructure depend only on application but not on",
    "start": "492280",
    "end": "497470"
  },
  {
    "text": "each other and infrastructure and presentation components can be replaced with minimal effort let's take a look at",
    "start": "497470",
    "end": "504909"
  },
  {
    "text": "the domain layer so within the domain layer we have entities value objects",
    "start": "504909",
    "end": "510720"
  },
  {
    "text": "enumerations logic and custom exceptions we're going to have a look at each of those in turn so for the remainder of",
    "start": "510720",
    "end": "522099"
  },
  {
    "text": "this talk we're going to be looking at each layer and I'm going to be making key points on these layers so that hopefully if you if you take a look at",
    "start": "522099",
    "end": "529150"
  },
  {
    "text": "this project or the template later you'll be able to get up and running quickly and understand how everything fits together so the first thing I want",
    "start": "529150",
    "end": "537550"
  },
  {
    "text": "to show you is this to-do item entity so I've got a really nice to-do item sample",
    "start": "537550",
    "end": "542830"
  },
  {
    "text": "in this project I should show you that now so if you go ctrl f5 f5 on this",
    "start": "542830",
    "end": "549220"
  },
  {
    "text": "solution this is what you'll get you'll get basically the starter angular template with a complex",
    "start": "549220",
    "end": "555720"
  },
  {
    "text": "to do this component so it allows you to manage numerous lists and numerous to-do items and there's lots of nice little",
    "start": "555720",
    "end": "561629"
  },
  {
    "text": "features in there for working with lists and lists options and to-do items and",
    "start": "561629",
    "end": "567930"
  },
  {
    "text": "and the wonderful thing of course about building a to-do list is that you can also use it to store your requirements as you go once you get it to a certain",
    "start": "567930",
    "end": "574649"
  },
  {
    "text": "point so you can see all the things that I've checked off there I haven't asked for a code review that's probably that's",
    "start": "574649",
    "end": "580199"
  },
  {
    "text": "probably bad I did I actually I did ask for a code review but it hasn't been done yet so let's have a look I also",
    "start": "580199",
    "end": "587129"
  },
  {
    "text": "have open API integrated into this solution so you can click on API access swagger UI and it's fully integrated and",
    "start": "587129",
    "end": "594269"
  },
  {
    "text": "fully automated so with the solution when you go down to a new CA solution it's set up so that it will generate the",
    "start": "594269",
    "end": "600810"
  },
  {
    "text": "open API specification automatically it will render swagger UI automatically it",
    "start": "600810",
    "end": "606509"
  },
  {
    "text": "will also generate an angular typescript client and all of the Associated data types needed to run the front-end I'll",
    "start": "606509",
    "end": "613350"
  },
  {
    "text": "have a look at that later but the first thing I wanted to look at was this to-do item GTO so one of the very simple key",
    "start": "613350",
    "end": "619920"
  },
  {
    "text": "points that I make is that you shouldn't use data annotations within your domain model and because we don't want to",
    "start": "619920",
    "end": "626009"
  },
  {
    "text": "clutter our domain model with data annotations in the past they were used for validation and for object relational",
    "start": "626009",
    "end": "632939"
  },
  {
    "text": "modeling by EF core but nowadays EF court doesn't use it for validation or it only uses it for the object",
    "start": "632939",
    "end": "638699"
  },
  {
    "text": "relational mapping and the alternative is to use fluent API configuration which provides a much more powerful",
    "start": "638699",
    "end": "644040"
  },
  {
    "text": "configuration system anyway so we can just go ahead and remove those and I",
    "start": "644040",
    "end": "650160"
  },
  {
    "text": "also want to talk about value objects so in this solution I've got an example of an ad account value object okay and so",
    "start": "650160",
    "end": "659819"
  },
  {
    "text": "you can see that a value object is a complex type and it doesn't have an identity and why would I create an ad",
    "start": "659819",
    "end": "666209"
  },
  {
    "text": "account value object player I could store an ad account just as easily as a string right and that's what I want you",
    "start": "666209",
    "end": "672029"
  },
  {
    "text": "to think about when you're defining your entities and you define something that's a primitive type think about is it",
    "start": "672029",
    "end": "677430"
  },
  {
    "text": "really a primitive type do all strings represent all value objects or are sorry",
    "start": "677430",
    "end": "684240"
  },
  {
    "text": "do all strings represent all ad accounts or a ad accounts a little bit more conflict than that and the answer of course is",
    "start": "684240",
    "end": "691360"
  },
  {
    "text": "what ad accounts are more complicated they consist of a domain name and a user",
    "start": "691360",
    "end": "696760"
  },
  {
    "text": "name in a certain format and when we when we work with an ad account we often want to access say the domain name or",
    "start": "696760",
    "end": "703930"
  },
  {
    "text": "the user name or the whole thing and so if we use a string we have to write",
    "start": "703930",
    "end": "709330"
  },
  {
    "text": "logic associated with interacting with that value object somewhere in our system now new developers are not going",
    "start": "709330",
    "end": "715690"
  },
  {
    "text": "to know where that logic is and it's going to appear all over the system but instead using a complex type such as an",
    "start": "715690",
    "end": "720700"
  },
  {
    "text": "ad account value object we have a place to store all of that logic and that makes it very easy for users to work",
    "start": "720700",
    "end": "727510"
  },
  {
    "text": "with our system they don't have to think how can I access the ad account just user name part there's a property for",
    "start": "727510",
    "end": "733630"
  },
  {
    "text": "that unfortunately with any framework or one of the features that has is the",
    "start": "733630",
    "end": "740170"
  },
  {
    "text": "owned entity types and it's very easy to then configure that value object in",
    "start": "740170",
    "end": "746160"
  },
  {
    "text": "using the fluent API configuration so you can see here we have a model builder entity called order that owns one",
    "start": "746160",
    "end": "753070"
  },
  {
    "text": "shipping address and what's that's going to do is it's actually in this order entity when it relates that to the",
    "start": "753070",
    "end": "760470"
  },
  {
    "text": "relational model in the database it'll store an order table or an orders table with a column called ID and then it will",
    "start": "760470",
    "end": "767589"
  },
  {
    "text": "have a column called shipping address underscore street and shipping address underscore city",
    "start": "767589",
    "end": "772630"
  },
  {
    "text": "so energy Framework court handles all of that for us so when we use these value objects in this way and we configure",
    "start": "772630",
    "end": "778149"
  },
  {
    "text": "them using the owns one type we don't have to worry about converting that back",
    "start": "778149",
    "end": "783670"
  },
  {
    "text": "from our object model to relational model and the other way it's very simple so it's a great approach so one of the",
    "start": "783670",
    "end": "793570"
  },
  {
    "text": "things that I wanted to mention and this is again about making it easy for new developers is to always initialize your",
    "start": "793570",
    "end": "799390"
  },
  {
    "text": "collections so you can see here I'm initializing the items collection and also recommend to remove or simply set",
    "start": "799390",
    "end": "805750"
  },
  {
    "text": "they set it to private and why do we do these things it's about forcing",
    "start": "805750",
    "end": "811779"
  },
  {
    "text": "developers into the pit of success we want to make it easy for them to do the right thing and hard for them to do the",
    "start": "811779",
    "end": "817959"
  },
  {
    "text": "wrong thing and so if we don't do this new developers might say I needed to do list so I'll go over I'd",
    "start": "817959",
    "end": "824460"
  },
  {
    "text": "to-do list equals new to-do list and then I'll initialize the to-do items collection because that's what they've",
    "start": "824460",
    "end": "830160"
  },
  {
    "text": "been used to doing but if we set this to private they actually can't do that and what's more they never have to worry",
    "start": "830160",
    "end": "836640"
  },
  {
    "text": "about whether it's initialized or not because whether they're creating it themselves or it's coming back from a of course that collection is ready to go so",
    "start": "836640",
    "end": "843240"
  },
  {
    "text": "there's something that they no longer have to worry about it makes our code simpler more concise one of the things",
    "start": "843240",
    "end": "850260"
  },
  {
    "text": "that I didn't show you in the ad account value object is an example of a custom domain exception so you can see here",
    "start": "850260",
    "end": "857340"
  },
  {
    "text": "that if for some reason I failed to create the ad account from the account string it throws an ad account invalid",
    "start": "857340",
    "end": "864120"
  },
  {
    "text": "exception why would I do that well it's simple the ad account invalid exception is much",
    "start": "864120",
    "end": "869280"
  },
  {
    "text": "easier to understand and debug than an index out of range exception okay so we can create these exceptions for these",
    "start": "869280",
    "end": "876030"
  },
  {
    "text": "expected domain type events I've also added a few features in here just to",
    "start": "876030",
    "end": "882450"
  },
  {
    "text": "help people get started there's the auditable entity base class any entity that derives from that will",
    "start": "882450",
    "end": "889380"
  },
  {
    "text": "automatically have those fields populated when the changes are persisted to the database so it'll store the ID of",
    "start": "889380",
    "end": "896670"
  },
  {
    "text": "the user who created the entity the date and time that they created it and if it's being modified the user ID who",
    "start": "896670",
    "end": "903120"
  },
  {
    "text": "modified it and the date and time that they modified it and all that's necessary is just to derive from that",
    "start": "903120",
    "end": "909480"
  },
  {
    "text": "property it's kind of a starter sample you can definitely build that out into something more complex",
    "start": "909480",
    "end": "916160"
  },
  {
    "text": "now there's also some sample unit tests associated with this at the moment it's just for the value objects but at least",
    "start": "916430",
    "end": "923850"
  },
  {
    "text": "it shows you how to get started so you can see that when you're working with a value object it's really easy to create",
    "start": "923850",
    "end": "929100"
  },
  {
    "text": "one based on an account string you just say a count of four we've got a two string method which we can ensure",
    "start": "929100",
    "end": "935010"
  },
  {
    "text": "returns the correct format we have an implicit conversion operator which makes it easy to convert from an ID account to",
    "start": "935010",
    "end": "941460"
  },
  {
    "text": "a string just by our assignment we have an explicit conversion operator which makes it easy to cast from a string to",
    "start": "941460",
    "end": "947550"
  },
  {
    "text": "an ad account and we have this exception which thrown in the case that the ad account string is invalid so when we",
    "start": "947550",
    "end": "955320"
  },
  {
    "text": "talk about the value objects and all the logic encapsulated within it you can see that we have a really simple place to encapsulate a",
    "start": "955320",
    "end": "961170"
  },
  {
    "text": "whole bunch of logic that we don't have to have in some helper class that new developers won't be able to find okay so",
    "start": "961170",
    "end": "970290"
  },
  {
    "text": "the key points so avoid using dart annotations they clutter our domain model and we can use fluent API",
    "start": "970290",
    "end": "975750"
  },
  {
    "text": "configuration which we'll see when we look at the infrastructure layer use value objects where appropriate I just",
    "start": "975750",
    "end": "981150"
  },
  {
    "text": "want you to think is it really a primitive type or is it more complicated than that well I have logic associated",
    "start": "981150",
    "end": "986940"
  },
  {
    "text": "with that type create custom domain exceptions to make it easier to work with your system initialize all",
    "start": "986940",
    "end": "992940"
  },
  {
    "text": "collections and use private setters again to make it easier to work with your system and automatically track",
    "start": "992940",
    "end": "997980"
  },
  {
    "text": "changes with the auditable and C base type so now I'll have a look at the",
    "start": "997980",
    "end": "1003500"
  },
  {
    "text": "application layer so within the application layer we have interfaces our interfaces that are defined within the",
    "start": "1003500",
    "end": "1009620"
  },
  {
    "text": "application layer and then implemented in the outside layers such as infrastructure our models have view",
    "start": "1009620",
    "end": "1014840"
  },
  {
    "text": "models and DTRS our logic commands and queries we'll talk about that shortly our validators and of course again our",
    "start": "1014840",
    "end": "1022520"
  },
  {
    "text": "custom exceptions so everyone by now has heard of CQRS but if you haven't it stands for command",
    "start": "1022520",
    "end": "1029180"
  },
  {
    "text": "query responsibility segregation and with CQRS we separate our reads from our",
    "start": "1029180",
    "end": "1034430"
  },
  {
    "text": "rights when people talk about CQRS they say it's great it maximizes performance and scalability but for me it's all",
    "start": "1034430",
    "end": "1041390"
  },
  {
    "text": "about simplicity because we're CQRS it's easy to add new features I just add a",
    "start": "1041390",
    "end": "1046520"
  },
  {
    "text": "new command or a query and it's also easy to maintain my changes typically only affect one command or query and",
    "start": "1046520",
    "end": "1053240"
  },
  {
    "text": "that means that I have less braking changes what's more is that if your",
    "start": "1053240",
    "end": "1058250"
  },
  {
    "text": "audience CQRS you should also use mediator those two are like the perfect couple",
    "start": "1058250",
    "end": "1063530"
  },
  {
    "text": "so with mediator we define our commands and queries as requests and that means",
    "start": "1063530",
    "end": "1069590"
  },
  {
    "text": "that the application layer is just a series of request response objects and that might not sound like a big deal but",
    "start": "1069590",
    "end": "1076520"
  },
  {
    "text": "it's what happens next it's the ability to attach additional behavior to any request that comes into the system so",
    "start": "1076520",
    "end": "1082940"
  },
  {
    "text": "with mediator we can attach behavior before and/or after each request so if",
    "start": "1082940",
    "end": "1088160"
  },
  {
    "text": "we need to implement some cross-cutting concerns in the application layer then we can do that very easily so for",
    "start": "1088160",
    "end": "1094310"
  },
  {
    "text": "example if we wanted to validate every single request that comes in through the application layer well we can do that",
    "start": "1094310",
    "end": "1099800"
  },
  {
    "text": "and that's already in this solution so let's have a look ok so you can see in",
    "start": "1099800",
    "end": "1119240"
  },
  {
    "text": "the application layer I basically have a single common folder and then three feature folders so within the common",
    "start": "1119240",
    "end": "1126380"
  },
  {
    "text": "folder I have some behaviors so there's a mediator pavis for those cross-cutting concerns some custom exceptions some",
    "start": "1126380",
    "end": "1133100"
  },
  {
    "text": "interfaces for interacting with the infrastructure some mappings we'll talk about that later and some some models",
    "start": "1133100",
    "end": "1139820"
  },
  {
    "text": "those are shared models but inside of this to-do lists folder I have some commands and queries you can see",
    "start": "1139820",
    "end": "1145760"
  },
  {
    "text": "everything's very neatly organized and easy to find so I've got a query here I've got an export to do this query",
    "start": "1145760",
    "end": "1152810"
  },
  {
    "text": "which will export a CSV export to do list as a CSV I've got to get to do this",
    "start": "1152810",
    "end": "1158420"
  },
  {
    "text": "query let's have a look at this one this one's kind of nice because it's made up of DT OS and view models so you can see",
    "start": "1158420",
    "end": "1164540"
  },
  {
    "text": "here I have a get to do is query and it",
    "start": "1164540",
    "end": "1171680"
  },
  {
    "text": "consists of a query which could also be a DTO so the query itself is a DTO now I",
    "start": "1171680",
    "end": "1179600"
  },
  {
    "text": "don't have any properties that I'm passing in with this query but it wouldn't be much to say ad pagination",
    "start": "1179600",
    "end": "1184640"
  },
  {
    "text": "and say we start to add things like page size and current page and that sort of",
    "start": "1184640",
    "end": "1192710"
  },
  {
    "text": "thing ok some of the commands have properties that you can have a look at you can see that I've nested their",
    "start": "1192710",
    "end": "1199070"
  },
  {
    "text": "handler so with mediator when we define our commands and queries as a request",
    "start": "1199070",
    "end": "1204590"
  },
  {
    "text": "we're basically defining an I request which is the query and an I request handler so it separates the request from",
    "start": "1204590",
    "end": "1211610"
  },
  {
    "text": "the handling of the request I'll just zoom that in a little bit more and so",
    "start": "1211610",
    "end": "1217730"
  },
  {
    "text": "you can see I've nested this and this is something that I've done to improve the discoverability of the queries",
    "start": "1217730",
    "end": "1222920"
  },
  {
    "text": "so when you actually go to the to do list controller that's where the goon",
    "start": "1222920",
    "end": "1228920"
  },
  {
    "text": "that's where the query is invoked and you can see here that we're using mediator to send the query and we all",
    "start": "1228920",
    "end": "1235520"
  },
  {
    "text": "have for this one because there's no properties we just specify get to do is query if there were some properties like",
    "start": "1235520",
    "end": "1241430"
  },
  {
    "text": "the pagination then we could just pass that back from the client as follows or you could use a request object if you",
    "start": "1241430",
    "end": "1247160"
  },
  {
    "text": "prefer but what I found is that when developers saw this they would go control f12 on get to do is query and",
    "start": "1247160",
    "end": "1253550"
  },
  {
    "text": "they would come to a file that contained just the query so it was hard to kind of understand and then find the handler",
    "start": "1253550",
    "end": "1259610"
  },
  {
    "text": "actually have to go to solution Explorer and then go one down and double click on the handler so by nesting the query or",
    "start": "1259610",
    "end": "1265880"
  },
  {
    "text": "just by putting the two classes in the same file you improve the discoverability which is great so let's",
    "start": "1265880",
    "end": "1272390"
  },
  {
    "text": "have a look at this query so we've got a query which is a request and it's going to return a to dues VM the today's VM",
    "start": "1272390",
    "end": "1280940"
  },
  {
    "text": "has everything that the view model will require to render there to reduce view which includes a lookup list of priority",
    "start": "1280940",
    "end": "1287480"
  },
  {
    "text": "levels and the to-do lists themselves which is of type to-do list DTO",
    "start": "1287480",
    "end": "1294100"
  },
  {
    "text": "and to-do list eto contains the DTO properties wait there we go",
    "start": "1294550",
    "end": "1306220"
  },
  {
    "text": "so the query returns to dues VM and then the handler says ok this is the get to",
    "start": "1306400",
    "end": "1312290"
  },
  {
    "text": "do is query Handler and I handle requests of type get to do is query and I return it to dues VM then down here",
    "start": "1312290",
    "end": "1318590"
  },
  {
    "text": "we've got the constructor or injecting our dependencies and here we have the implementation and so the thing that I",
    "start": "1318590",
    "end": "1325070"
  },
  {
    "text": "really like about this the thing that makes this very simple is that this is the business case of getting a list of",
    "start": "1325070",
    "end": "1331520"
  },
  {
    "text": "to-do items okay so obviously there's some requirement behind that the business has come to me and said they",
    "start": "1331520",
    "end": "1337400"
  },
  {
    "text": "want to implement that sorry I pressed l5 I think and I've been able to",
    "start": "1337400",
    "end": "1342620"
  },
  {
    "text": "encapsulate everything that's associated with that business case in this one file",
    "start": "1342620",
    "end": "1348290"
  },
  {
    "text": "and what's more I also have all of the files that are associated with this",
    "start": "1348290",
    "end": "1353390"
  },
  {
    "text": "business case in this one folder so what I need to change this I come to this single folder and",
    "start": "1353390",
    "end": "1358849"
  },
  {
    "text": "everything that I need is here I don't have to jump around to multiple folders I don't have to jump around to a DTS",
    "start": "1358849",
    "end": "1364759"
  },
  {
    "text": "folder or a view models folder I don't have to go to a handlers folder or a queries folder it's all here",
    "start": "1364759",
    "end": "1370399"
  },
  {
    "text": "and what's more because it's co-located like this I'm actually discourage the sharing of this code I don't want people",
    "start": "1370399",
    "end": "1377539"
  },
  {
    "text": "to reuse this code I want this code just to be used for this business case and you might think that's kind of strange",
    "start": "1377539",
    "end": "1383330"
  },
  {
    "text": "but if I do that I don't have breaking change and if I start to share it pretty",
    "start": "1383330",
    "end": "1388879"
  },
  {
    "text": "soon we're going to start to see conditionals a period in there and they're going to be conditionals for seperate use cases for certain queries",
    "start": "1388879",
    "end": "1395389"
  },
  {
    "text": "and it's just going to make things more complicated than it needs to be so i co-locate these things together i make",
    "start": "1395389",
    "end": "1400820"
  },
  {
    "text": "it easy to change and i avoid breaking changes and i think that's really good approach so you can see in here we have",
    "start": "1400820",
    "end": "1407840"
  },
  {
    "text": "our commands everything's very nice and easy to find we've got to create to-do list command it's also very simple we've",
    "start": "1407840",
    "end": "1415849"
  },
  {
    "text": "got our DTO all we need to create a to-do list is a title and we've got the",
    "start": "1415849",
    "end": "1421309"
  },
  {
    "text": "handler and that's got all of the logic associated with it and creating the to-do list so I want to show you some of",
    "start": "1421309",
    "end": "1429320"
  },
  {
    "text": "the cross-cutting concerns so if we jump into behaviors you can see I have three behaviors implemented I have a request",
    "start": "1429320",
    "end": "1435710"
  },
  {
    "text": "logger that logs every single request that comes into the system I have a request performance behavior that logs",
    "start": "1435710",
    "end": "1442249"
  },
  {
    "text": "warnings for any request that takes too long and I have a request validation behavior that validates every single",
    "start": "1442249",
    "end": "1448669"
  },
  {
    "text": "request that comes through the system it's very simple to set these up you can",
    "start": "1448669",
    "end": "1455029"
  },
  {
    "text": "see it's going me now with just a little bit of code I'm actually logging every",
    "start": "1455029",
    "end": "1460429"
  },
  {
    "text": "single request that comes through the system including the user ID who initiated the request the username and",
    "start": "1460429",
    "end": "1465859"
  },
  {
    "text": "the request itself and that's not just the name of the request it's the actual DTO it's the request and all of the",
    "start": "1465859",
    "end": "1473359"
  },
  {
    "text": "arguments that were associated with that request so if I have a problem I can go to the log I can grab that DTO I can",
    "start": "1473359",
    "end": "1479929"
  },
  {
    "text": "create a unit test I can see that test fail and I can fix it it's it's a simple thing it's 32 lines of code but with it",
    "start": "1479929",
    "end": "1487460"
  },
  {
    "text": "comes a great amount of value because remember everything in the application layer is represented as a request all of that all",
    "start": "1487460",
    "end": "1494070"
  },
  {
    "text": "of the requests come into the system either through a commander or query and I'm logging all those what's more I'm",
    "start": "1494070",
    "end": "1501270"
  },
  {
    "text": "validating all of those and so I have a request validation behavior so this runs",
    "start": "1501270",
    "end": "1506550"
  },
  {
    "text": "before the request and it basically says okay for this request this dto this",
    "start": "1506550",
    "end": "1511620"
  },
  {
    "text": "command or query try to find any validators and if there are validators associated with it collect up all the",
    "start": "1511620",
    "end": "1518820"
  },
  {
    "text": "errors if there are any and then if the failure count if the error count is not",
    "start": "1518820",
    "end": "1524070"
  },
  {
    "text": "equal to zero then throw a validation exception and so every single request",
    "start": "1524070",
    "end": "1529080"
  },
  {
    "text": "that comes into the system is automatically validated all that my developers need to do if they want",
    "start": "1529080",
    "end": "1534900"
  },
  {
    "text": "something to be validated it's creative elevator so here's an example of a",
    "start": "1534900",
    "end": "1540510"
  },
  {
    "text": "validator this is using fluent validation and you can see that it has a rule for their title as part of the",
    "start": "1540510",
    "end": "1548430"
  },
  {
    "text": "create to the list command it says the title shouldn't be empty it should have a maximum length of 200 characters and",
    "start": "1548430",
    "end": "1555870"
  },
  {
    "text": "it must be a unique title and you can see here I'm injecting in my application DB context which is my interface to my",
    "start": "1555870",
    "end": "1563040"
  },
  {
    "text": "actual DB context and I'm checking the collection to see that that is a unique title so this is some really powerful",
    "start": "1563040",
    "end": "1569520"
  },
  {
    "text": "validation that I've created here and that's an important point well we can use data annotations for validation they",
    "start": "1569520",
    "end": "1576000"
  },
  {
    "text": "tend to only be suited for simple scenarios and when we want something a little bit more complex then we can use",
    "start": "1576000",
    "end": "1582360"
  },
  {
    "text": "flow and validation and it provides the best the best result for simple scenarios and more complicated scenarios",
    "start": "1582360",
    "end": "1589910"
  },
  {
    "text": "so the other thing that I've actually implemented in this in this new version in this template is some mapping",
    "start": "1589910",
    "end": "1596190"
  },
  {
    "text": "behavior so with Auto mapper I've done it in a way that I'm super happy with",
    "start": "1596190",
    "end": "1602760"
  },
  {
    "text": "the result and I've backed it by unit tests so that any of those runtime exceptions that used to kind of cause",
    "start": "1602760",
    "end": "1608910"
  },
  {
    "text": "headaches with Auto mapper I'm less likely to encounter let me show you so",
    "start": "1608910",
    "end": "1614820"
  },
  {
    "text": "if we're going to this to-do lists query and have a look at this to-do list dto",
    "start": "1614820",
    "end": "1620100"
  },
  {
    "text": "you might have noticed that it's implementing IMAP from two dualist and so that's basically saying",
    "start": "1620100",
    "end": "1628400"
  },
  {
    "text": "this to-do-list DTO can be mapped from a to-do list and auto map it handles the rest now I",
    "start": "1628400",
    "end": "1635460"
  },
  {
    "text": "also have the to-do item DTO and it says I map from to-do item but",
    "start": "1635460",
    "end": "1641490"
  },
  {
    "text": "actually it's not going to be a convention space mapping because Auto map is all about conventions it'll do a",
    "start": "1641490",
    "end": "1646590"
  },
  {
    "text": "lot for you if you follow the conventions but then you have to specify a configuration so you can see that",
    "start": "1646590",
    "end": "1653100"
  },
  {
    "text": "while the to-do lists DTO didn't have a mapping method the to-do item GTO does",
    "start": "1653100",
    "end": "1659490"
  },
  {
    "text": "have a mapping method and just specifies some configuration on how to map the priority field now this is actually made",
    "start": "1659490",
    "end": "1666660"
  },
  {
    "text": "possible through c-sharp eight interfaces they provide default implementations so I can actually say",
    "start": "1666660",
    "end": "1674070"
  },
  {
    "text": "for classes that implement this interface if they don't specify an implementation for this mapping method",
    "start": "1674070",
    "end": "1680730"
  },
  {
    "text": "then just use the default implementation and the default implementation basically says well this is just going to be an",
    "start": "1680730",
    "end": "1686580"
  },
  {
    "text": "automatic inventions based mapping so create a map from the entity to the",
    "start": "1686580",
    "end": "1693060"
  },
  {
    "text": "derived type which is the DTO so I don't actually have to specify anything just",
    "start": "1693060",
    "end": "1699050"
  },
  {
    "text": "implementing an eye map from and the entity name is an office what's more I",
    "start": "1699050",
    "end": "1706010"
  },
  {
    "text": "didn't want to wire all those up manually so I've created this mapping profile and added this apply mappings",
    "start": "1706010",
    "end": "1712350"
  },
  {
    "text": "from assembly method so all of these DT OS with the eye map from being implemented I've got a method that will",
    "start": "1712350",
    "end": "1718950"
  },
  {
    "text": "just scan the assembly find them all actually invoke what's called the",
    "start": "1718950",
    "end": "1724830"
  },
  {
    "text": "mapping interface and the mapping will then add that map to the profile so auto",
    "start": "1724830",
    "end": "1731640"
  },
  {
    "text": "map knows about it so then finally when I go to use that mapping in Mike get to",
    "start": "1731640",
    "end": "1738030"
  },
  {
    "text": "do list query I can just say project to to-do list DT",
    "start": "1738030",
    "end": "1743700"
  },
  {
    "text": "oh and it does that nested projection for me without me writing more code than a little bit of configuration for the",
    "start": "1743700",
    "end": "1750210"
  },
  {
    "text": "priority over to-do item",
    "start": "1750210",
    "end": "1753740"
  },
  {
    "text": "so I'm really excited about that but I couldn't have written that without writing some unit tests and so in here",
    "start": "1756490",
    "end": "1764270"
  },
  {
    "text": "inside of application unit test I have",
    "start": "1764270",
    "end": "1769280"
  },
  {
    "text": "some mapping tests and they're very simple I have one test which is a is",
    "start": "1769280",
    "end": "1775280"
  },
  {
    "text": "actually a test provided by the automat framework that basically just says assert that the configuration is valid",
    "start": "1775280",
    "end": "1781670"
  },
  {
    "text": "for all of the map types and that will basically say if there's any properties that are not being assigned to fail this",
    "start": "1781670",
    "end": "1788270"
  },
  {
    "text": "test and that's going to avoid a runtime error and that's great and then I have this test which is a theory and I just",
    "start": "1788270",
    "end": "1795740"
  },
  {
    "text": "specify my expected mappings and all this test to is created an instance and then try to map and if it fails we know",
    "start": "1795740",
    "end": "1803000"
  },
  {
    "text": "something's gone wrong with that mapping and so I protected myself from probably eighteen ninety percent of the problems",
    "start": "1803000",
    "end": "1808820"
  },
  {
    "text": "that I could run into with this technique also very happy with that now",
    "start": "1808820",
    "end": "1815000"
  },
  {
    "text": "I have this dependency injection class in the application layer which is basically just an extension method on I",
    "start": "1815000",
    "end": "1821450"
  },
  {
    "text": "collection services and what that allows me to do is to just have an extension method that wires up all of my",
    "start": "1821450",
    "end": "1828260"
  },
  {
    "text": "application dependencies so that I don't have to do it in startups es the startup",
    "start": "1828260",
    "end": "1834530"
  },
  {
    "text": "dot CS tends to get very bloated if if you're just using the built-in dependency injection so you can see here",
    "start": "1834530",
    "end": "1840590"
  },
  {
    "text": "all I have to do is say services don't add application excuse me that's very",
    "start": "1840590",
    "end": "1845960"
  },
  {
    "text": "nice so last thing to look out in the application layer is just unit tests so",
    "start": "1845960",
    "end": "1853670"
  },
  {
    "text": "you can see this unit test for the mapping behavior there is unit tests for",
    "start": "1853670",
    "end": "1860360"
  },
  {
    "text": "the commands and there are unit tests",
    "start": "1860360",
    "end": "1865940"
  },
  {
    "text": "for the validators as well so you have good examples of how to test all of those elements inside of core all right",
    "start": "1865940",
    "end": "1878720"
  },
  {
    "text": "so key points using CQRS and mediator simplifies your overall design and",
    "start": "1878720",
    "end": "1884090"
  },
  {
    "text": "what's more mediator simplifies the cross-cutting concerns with that pipeline of behavior fluent validation",
    "start": "1884090",
    "end": "1890510"
  },
  {
    "text": "is useful for all validation scenarios so not just simple scenarios like data annotations or a mapper can be used to",
    "start": "1890510",
    "end": "1897799"
  },
  {
    "text": "simplify your mappings and projections and this application layer is independent of infrastructure concerns",
    "start": "1897799",
    "end": "1903470"
  },
  {
    "text": "we interact with infrastructure only vial of interfaces so now let's have a",
    "start": "1903470",
    "end": "1909950"
  },
  {
    "text": "quick look at the infrastructure layer so within infrastructure we have our persistence concerns our identity",
    "start": "1909950",
    "end": "1915620"
  },
  {
    "text": "concerns so using asp.net for identity file system we've got some examples of CSV files the system clock we've got an",
    "start": "1915620",
    "end": "1923299"
  },
  {
    "text": "abstraction for working with the system clock because that's a dependency - and API clients so big question unit of work",
    "start": "1923299",
    "end": "1931250"
  },
  {
    "text": "and repository pattern should we implement these patterns so show a hands who thinks we should still be implementing these patterns so about",
    "start": "1931250",
    "end": "1940730"
  },
  {
    "text": "five people and I'm gonna I'm going to take a leap and say that the rest of you think we shouldn't be implementing these",
    "start": "1940730",
    "end": "1946309"
  },
  {
    "text": "patterns well the interesting thing is that we're all right that is the correct",
    "start": "1946309",
    "end": "1951980"
  },
  {
    "text": "answer whether we think we should implement them or should not implement them that's correct we'll get into that in a second but",
    "start": "1951980",
    "end": "1957799"
  },
  {
    "text": "first with the F core it's not always the best choice because you have core insulates your code from database",
    "start": "1957799",
    "end": "1963530"
  },
  {
    "text": "changes if core uses a provider system and it's simply a matter of you bringing in a new get package for sequel server",
    "start": "1963530",
    "end": "1969350"
  },
  {
    "text": "or sequel Lite or Postgres or cosmos whatever it is that we want to use and we can change that out so DB context",
    "start": "1969350",
    "end": "1976280"
  },
  {
    "text": "actually is a unit of work and the DB set actually is a repository so if we're",
    "start": "1976280",
    "end": "1981470"
  },
  {
    "text": "just trying to implement those patterns for the sake of having those patterns and programming in that way we already",
    "start": "1981470",
    "end": "1986630"
  },
  {
    "text": "have that with the F core in the past say if EF 6 and earlier we used to",
    "start": "1986630",
    "end": "1991909"
  },
  {
    "text": "implement the repository and the universe so that we could do write effective unit tests we don't need to do",
    "start": "1991909",
    "end": "1997429"
  },
  {
    "text": "that anymore since we have the EF core in memory provider we also have the sequel Lite remember of provider and they can be really helpful in kind of",
    "start": "1997429",
    "end": "2004450"
  },
  {
    "text": "using those tools as testing tools to write unit tests so with that in mind what do the experts think",
    "start": "2004450",
    "end": "2010700"
  },
  {
    "text": "so first we have Jimmy Jimmy Bogart creator of automap and mediator and chief architect at head springs and he",
    "start": "2010700",
    "end": "2016670"
  },
  {
    "text": "says I'm over repositories and definitely over abstracting your data layer then we have Steve Smith and Steve",
    "start": "2016670",
    "end": "2023480"
  },
  {
    "text": "Smith's being a Microsoft MVP since all time and he was a Microsoft regional director of for 10 years and he says no",
    "start": "2023480",
    "end": "2029510"
  },
  {
    "text": "you don't need a repository but there are many benefits and you should consider it when Steve said that he's",
    "start": "2029510",
    "end": "2035360"
  },
  {
    "text": "been really diplomatic if you've listened to his podcasts listen to his blog posts and looked at and looked at",
    "start": "2035360",
    "end": "2041090"
  },
  {
    "text": "his conversations on Twitter's he's definitely Pro repository and he has a lot of really really good designs on how",
    "start": "2041090",
    "end": "2047330"
  },
  {
    "text": "to create a great repository and why you should be using it then we have John Smith so he's the author of energy",
    "start": "2047330",
    "end": "2053690"
  },
  {
    "text": "framework core in action and he says no the repository slash unit of work pattern isn't useful with the F core so",
    "start": "2053690",
    "end": "2059629"
  },
  {
    "text": "with that in mind when the experts don't agree what should we do well it's really simple we just need to remember that the",
    "start": "2059630",
    "end": "2066440"
  },
  {
    "text": "repository and unit of work is just design patterns okay if it solves a problem we have that's great use it if",
    "start": "2066440",
    "end": "2073220"
  },
  {
    "text": "it doesn't solve the problem you have then don't use it because that would just introduce unnecessary complexity so",
    "start": "2073220",
    "end": "2079040"
  },
  {
    "text": "what sort of problems could a unit of work and repository design patent solve well one very simple problem is the",
    "start": "2079040",
    "end": "2084440"
  },
  {
    "text": "dependency on the enemy framework or framework if we didn't want our solution to be dependent on that framework then",
    "start": "2084440",
    "end": "2090350"
  },
  {
    "text": "implementing the unit of work and repository pattern would solve that problem another problem is if we wanted",
    "start": "2090350",
    "end": "2095780"
  },
  {
    "text": "to limit access to certain entities so we were going to create order and order",
    "start": "2095780",
    "end": "2101450"
  },
  {
    "text": "details with order at the aggregate route well then we could create repositories only at the aggregate route",
    "start": "2101450",
    "end": "2106460"
  },
  {
    "text": "and force developers to only update orders with the collection of order details they wouldn't be able to update",
    "start": "2106460",
    "end": "2112280"
  },
  {
    "text": "an order detail individually and therefore we'd be able to have lots of logic and validation associated with that so just think any design pattern",
    "start": "2112280",
    "end": "2119330"
  },
  {
    "text": "does it solve a problem I have great use it let's have a look",
    "start": "2119330",
    "end": "2126190"
  },
  {
    "text": "so inside of the infrastructure layers we see we have four folders we have files which is that CSV help for example",
    "start": "2131470",
    "end": "2138380"
  },
  {
    "text": "that I've put together we have identity which is my concerns related to asp.net core identity we have",
    "start": "2138380",
    "end": "2143839"
  },
  {
    "text": "persistence which is by fluid API configurations for my entities my DB context and my DB contacts seed if we",
    "start": "2143839",
    "end": "2151940"
  },
  {
    "text": "have services I'm at the moment the sister date/time service in there so that we don't have a dependency on the machine clock let's have a look first at",
    "start": "2151940",
    "end": "2159500"
  },
  {
    "text": "the fluent API configuration so you can see that it's quite simple here I've got",
    "start": "2159500",
    "end": "2164660"
  },
  {
    "text": "a to-do item configuration and it's do list configuration and that just allows me to define how that entity will be",
    "start": "2164660",
    "end": "2171109"
  },
  {
    "text": "mapped to the relational model until I that up all I have to do is say apply",
    "start": "2171109",
    "end": "2178670"
  },
  {
    "text": "configuration from assembly that's built into F core now as of of core to one and",
    "start": "2178670",
    "end": "2184490"
  },
  {
    "text": "specify the assembly now you'll note that I've left this based on model creating statement now in the past you",
    "start": "2184490",
    "end": "2191810"
  },
  {
    "text": "didn't actually need to leave that in there so if you've written code like this you've probably just left it out and it's worked just fine well it's not",
    "start": "2191810",
    "end": "2197750"
  },
  {
    "text": "the case anymore if you're working with asp.net core identity has a version three and upwards it actually does have an implementation",
    "start": "2197750",
    "end": "2204589"
  },
  {
    "text": "in the base so you'll leave that in otherwise you'll run into an error and add it back in so when you create in",
    "start": "2204589",
    "end": "2214250"
  },
  {
    "text": "these these configurations I want you to remember that ear of core is conventions",
    "start": "2214250",
    "end": "2219260"
  },
  {
    "text": "based framework so the first thing that you want to do is make sure that you understand the conventions and don't",
    "start": "2219260",
    "end": "2224480"
  },
  {
    "text": "create configuration for for conventions because you're just making it more complicated than it needs to be for",
    "start": "2224480",
    "end": "2230330"
  },
  {
    "text": "example you could say something like this",
    "start": "2230330",
    "end": "2237520"
  },
  {
    "text": "this is my typing you could say that",
    "start": "2241630",
    "end": "2248089"
  },
  {
    "text": "that properties are key right but you don't need to do that the fact that it's named ID means that energy framework",
    "start": "2248089",
    "end": "2254720"
  },
  {
    "text": "call will automatically assume that it's a key and so then in the to-do item",
    "start": "2254720",
    "end": "2263319"
  },
  {
    "text": "entity it has a list ID and it in it based on based on the name of that list",
    "start": "2263650",
    "end": "2269599"
  },
  {
    "text": "ID and the name of this property it assumes that that's a foreign key and maps it as so so always when you're",
    "start": "2269599",
    "end": "2275539"
  },
  {
    "text": "working with a conventions based system know the conventions because it's going to make it much simpler for you to work",
    "start": "2275539",
    "end": "2280849"
  },
  {
    "text": "with and means that your code is going to be simpler as a result so now having",
    "start": "2280849",
    "end": "2287509"
  },
  {
    "text": "a quick look at the DB context you can see that in here we've got our identity",
    "start": "2287509",
    "end": "2293809"
  },
  {
    "text": "concerns being wired up and we also have this chase Save Changes async method which I've overridden and you can see",
    "start": "2293809",
    "end": "2300589"
  },
  {
    "text": "here that this is where I've implemented the auditable entity functionality so it basically looks to see if the entity is",
    "start": "2300589",
    "end": "2306019"
  },
  {
    "text": "being added or modified and then sets those properties using these two services so very simple and something",
    "start": "2306019",
    "end": "2313519"
  },
  {
    "text": "that you can build on so inside of identity we've got the application user",
    "start": "2313519",
    "end": "2320980"
  },
  {
    "text": "we've got this identity result extensions which I built to make this identity service a little bit simpler so",
    "start": "2320980",
    "end": "2328220"
  },
  {
    "text": "for now I've just created a single identity service a lot of time in the past I might create a user service and a",
    "start": "2328220",
    "end": "2333259"
  },
  {
    "text": "role service and that sort of thing but the concerns for this application are relatively simple but what you can see",
    "start": "2333259",
    "end": "2339380"
  },
  {
    "text": "is the identity services implementing the identity service which is inside of the application layer so when I need to",
    "start": "2339380",
    "end": "2345859"
  },
  {
    "text": "write logic against identity I'm just writing logic against this service so I can change this implementation whenever",
    "start": "2345859",
    "end": "2352190"
  },
  {
    "text": "I want I can move away from asp.net core identity so you can see there's some samples of in there of working with",
    "start": "2352190",
    "end": "2358339"
  },
  {
    "text": "identity",
    "start": "2358339",
    "end": "2360880"
  },
  {
    "text": "okay so it's important to note that no layers depends on infrastructure it's",
    "start": "2365490",
    "end": "2370690"
  },
  {
    "text": "completely isolated from the rest of the system and it also has a dependency injection extension and in this",
    "start": "2370690",
    "end": "2377590"
  },
  {
    "text": "extension of white up all of the dependencies that are associated with infrastructure so you can see there's the database",
    "start": "2377590",
    "end": "2383020"
  },
  {
    "text": "there's the interface which I used to interact with the database there's some test configuration for identity server",
    "start": "2383020",
    "end": "2389170"
  },
  {
    "text": "in the backend we've got lots of unit tests that are working with identity server and testing against authenticated",
    "start": "2389170",
    "end": "2395650"
  },
  {
    "text": "controllers so there's good examples of that there's the configuration if it's not",
    "start": "2395650",
    "end": "2400720"
  },
  {
    "text": "part of the part of the test environment and that's it so again all of this logic has been",
    "start": "2400720",
    "end": "2407290"
  },
  {
    "text": "moved out of startup CS into this extension methods so that all I have to do within startup is just say add",
    "start": "2407290",
    "end": "2414130"
  },
  {
    "text": "infrastructure so you can see I pass through the configuration and the environment so I have that information available inside of the test folder",
    "start": "2414130",
    "end": "2425650"
  },
  {
    "text": "there's some integration tests which you can take a look at which are all about testing that auditable entity logic okay",
    "start": "2425650",
    "end": "2435820"
  },
  {
    "text": "so key points infrastructure is independent of the database we can switch out a provider and choose a",
    "start": "2435820",
    "end": "2442000"
  },
  {
    "text": "different database solution the solution however that I've built is not independent of entity framework core",
    "start": "2442000",
    "end": "2448120"
  },
  {
    "text": "I've kind of gone all-in with entity framework course so if I do decide to move to a different RM in the future",
    "start": "2448120",
    "end": "2453490"
  },
  {
    "text": "I'll have a little bit of pain there but I'm okay with that I've been using EF for I don't even remember how long now",
    "start": "2453490",
    "end": "2458980"
  },
  {
    "text": "so useful an API configuration over data annotations it's just a better approach",
    "start": "2458980",
    "end": "2465490"
  },
  {
    "text": "it does more and it means that you domain models not clogged with data annotations prefer and know your",
    "start": "2465490",
    "end": "2471190"
  },
  {
    "text": "conventions prefer conventions over configuration automatically apply all entity type configurations and no layers",
    "start": "2471190",
    "end": "2478510"
  },
  {
    "text": "depend on the infrastructure layer eg presentation layer if we do that will result in logic being created in the",
    "start": "2478510",
    "end": "2484180"
  },
  {
    "text": "wrong places and we need it to stay within core ok finally the presentation",
    "start": "2484180",
    "end": "2490330"
  },
  {
    "text": "layer so within the presentation layer it can be whatever we want we've kept all of the logic inside of core so",
    "start": "2490330",
    "end": "2496090"
  },
  {
    "text": "really do you that we create is very simple we have well-defined view models we have",
    "start": "2496090",
    "end": "2501280"
  },
  {
    "text": "well-defined queries and commands so that interactions being made as simple as possible so it could be a single page",
    "start": "2501280",
    "end": "2506470"
  },
  {
    "text": "application angular reactive view it could be blazer web api razor pages MVC",
    "start": "2506470",
    "end": "2511660"
  },
  {
    "text": "even web forms if you prefer let's have a look so one thing that I want to show",
    "start": "2511660",
    "end": "2518590"
  },
  {
    "text": "is the typical example of a controller whoops I don't know what happened there so in this example of a controller you",
    "start": "2518590",
    "end": "2526450"
  },
  {
    "text": "see the DB context is being injected directly into the controller entities are being returned from the controller",
    "start": "2526450",
    "end": "2533440"
  },
  {
    "text": "which is which which is a bit of a no-no it comes with a whole host of issues that we don't really want one to have to",
    "start": "2533440",
    "end": "2538870"
  },
  {
    "text": "deal with security and complexity and all of the logics kind of as simple as",
    "start": "2538870",
    "end": "2544810"
  },
  {
    "text": "this logic is all of the logic is within the controller and that's because we didn't we didn't give ourself any other",
    "start": "2544810",
    "end": "2550210"
  },
  {
    "text": "choice when you inject something like a DB context which is such a low-level concept with something like a controller",
    "start": "2550210",
    "end": "2556510"
  },
  {
    "text": "there's no place left to put your logic okay but we've avoided that problem with this solution because we're using CQRS",
    "start": "2556510",
    "end": "2562870"
  },
  {
    "text": "we've moved all of our logic into commands and queries in the application layer so this is a typical example but",
    "start": "2562870",
    "end": "2569320"
  },
  {
    "text": "let's have a look at the same controller in the clean architecture solution so",
    "start": "2569320",
    "end": "2578410"
  },
  {
    "text": "you can see with this with this controller we don't even have a constructor right why have a constructor",
    "start": "2578410",
    "end": "2583930"
  },
  {
    "text": "if you don't have a constructor it's simpler so we just got a base class the",
    "start": "2583930",
    "end": "2589270"
  },
  {
    "text": "the method for get just basically sends a mediator request mediators come in",
    "start": "2589270",
    "end": "2594730"
  },
  {
    "text": "from the base class and that's it being injected by a property injection the method for getting by ID it's just",
    "start": "2594730",
    "end": "2601390"
  },
  {
    "text": "basically two lines of code one line of code for create a few lines of code maybe you don't need that for update and",
    "start": "2601390",
    "end": "2608920"
  },
  {
    "text": "two lines of code for delete so there's absolutely no logic in there we've essentially reduced this controller to",
    "start": "2608920",
    "end": "2615910"
  },
  {
    "text": "infrastructure it does one thing it takes in a request and returns a",
    "start": "2615910",
    "end": "2621280"
  },
  {
    "text": "response so it's as simple as can be and there's no logic within there all of the",
    "start": "2621280",
    "end": "2627370"
  },
  {
    "text": "logics been moved into the relevant commands and crew so you can see also that when we talked",
    "start": "2627370",
    "end": "2633430"
  },
  {
    "text": "about that it is view model that for each query we're trying to return a well-defined view moral so that when the",
    "start": "2633430",
    "end": "2639490"
  },
  {
    "text": "client receives that response it has everything that it needs to render that",
    "start": "2639490",
    "end": "2645340"
  },
  {
    "text": "view whatever it may be and that means that the client doesn't have to make additional API calls to get more",
    "start": "2645340",
    "end": "2650530"
  },
  {
    "text": "information so encapsulate everything in well-defined view models and make it",
    "start": "2650530",
    "end": "2655600"
  },
  {
    "text": "simpler again so I mentioned that open API is running behind the scenes in this",
    "start": "2655600",
    "end": "2662650"
  },
  {
    "text": "solution and I'll give you a quick look at how that's set up I also have a blog post on it that you can check as well so",
    "start": "2662650",
    "end": "2669480"
  },
  {
    "text": "essentially with open API I prefer to use an swag so an swag is probably the",
    "start": "2669480",
    "end": "2676690"
  },
  {
    "text": "best tool chain because it's capable of generating the specifications it's capable of generating the clients it's",
    "start": "2676690",
    "end": "2682030"
  },
  {
    "text": "kind of an all-in-one shop and it has a nice some windows application that",
    "start": "2682030",
    "end": "2687040"
  },
  {
    "text": "allows you to specify that configuration so you can get up and running really quickly so in this solution in the web",
    "start": "2687040",
    "end": "2692920"
  },
  {
    "text": "UI what I have it doing at Build time excuse me",
    "start": "2692920",
    "end": "2698050"
  },
  {
    "text": "is it generates the specification just there and it generates an angular climb",
    "start": "2698050",
    "end": "2710910"
  },
  {
    "text": "there it is just there and when I talk about this I talk about how it's",
    "start": "2711120",
    "end": "2717820"
  },
  {
    "text": "bridging the gap between the back end and the front end and the reason for that is all those really nicely defined",
    "start": "2717820",
    "end": "2724510"
  },
  {
    "text": "few models and all those nicely defined commands are created I generated here",
    "start": "2724510",
    "end": "2730620"
  },
  {
    "text": "this is code that I don't have to write but if we come down to the bottom here so you can see here's my update to-do",
    "start": "2730620",
    "end": "2737410"
  },
  {
    "text": "item detail command so I have these types nicely defined in the backend so instead of creating manually creating",
    "start": "2737410",
    "end": "2743440"
  },
  {
    "text": "these versions on the front end they're now generated and the angular client to access the web api is now generated and",
    "start": "2743440",
    "end": "2749380"
  },
  {
    "text": "that all happens automatically I just have to build the web UI project and all of that happens if you build in micro",
    "start": "2749380",
    "end": "2755830"
  },
  {
    "text": "servers with this approach you can also use n swag to generate c-sharp clients and so then you can publish those at",
    "start": "2755830",
    "end": "2761710"
  },
  {
    "text": "NuGet packages show them with the other services depending on your approach of course so",
    "start": "2761710",
    "end": "2767950"
  },
  {
    "text": "one of the things that I'm doing in the application layer is something does occur if something happens wrong we throw an exception and so I've created",
    "start": "2767950",
    "end": "2774490"
  },
  {
    "text": "an exception middleware which is responsible for intercepting those exceptions from the application layer",
    "start": "2774490",
    "end": "2780339"
  },
  {
    "text": "and converting them into something a little bit more meaningful excuse me so",
    "start": "2780339",
    "end": "2785680"
  },
  {
    "text": "you see here that we've got two two requests being handled a validation exception and are not found exception so",
    "start": "2785680",
    "end": "2792520"
  },
  {
    "text": "if a validation exception is encountered it will basically take those failures turn it into a 400 bad request response",
    "start": "2792520",
    "end": "2799089"
  },
  {
    "text": "and return the result to the client I'll be releasing a new version of that shortly which will work with validation",
    "start": "2799089",
    "end": "2804640"
  },
  {
    "text": "problem details so that'll be even a nicer experience then we have the not found exception and that's basically",
    "start": "2804640",
    "end": "2811420"
  },
  {
    "text": "it's wrong when it can't find some entity when it's trying to get something by ID or to update or delete something and so it returns that in - it turns",
    "start": "2811420",
    "end": "2818680"
  },
  {
    "text": "that into a not found response code and returns the message back to the client so we have that same same nice",
    "start": "2818680",
    "end": "2824440"
  },
  {
    "text": "consistent experience at least from the asp.net core perspective so with those exceptions it's really up to the client",
    "start": "2824440",
    "end": "2830619"
  },
  {
    "text": "how they will handle that and in this case I've handled it using custom exception middleware with identity",
    "start": "2830619",
    "end": "2838990"
  },
  {
    "text": "there's just a couple of classes in here under services I've got the current user service which will basically just",
    "start": "2838990",
    "end": "2844869"
  },
  {
    "text": "interrogate the clients and find the user ID so then I can pass that to my identity service within infrastructure",
    "start": "2844869",
    "end": "2850869"
  },
  {
    "text": "and do things with that user one of the",
    "start": "2850869",
    "end": "2855940"
  },
  {
    "text": "things that I've added to the web UI is a whole bunch of integration tests and there was quite a lot of work that went",
    "start": "2855940",
    "end": "2861640"
  },
  {
    "text": "into this just because of the integration with identity so if i zoom",
    "start": "2861640",
    "end": "2867310"
  },
  {
    "text": "in here you can see that we're using asp.net core web application factory to",
    "start": "2867310",
    "end": "2873430"
  },
  {
    "text": "wire up all of our dependencies and spin up a a host we've got an integration test helper as test version of the",
    "start": "2873430",
    "end": "2880420"
  },
  {
    "text": "current user service a test of the date/time service end of the test version of the identity service but with",
    "start": "2880420",
    "end": "2886569"
  },
  {
    "text": "all of that work done we actually have some really simple tests that we can write so you can see here",
    "start": "2886569",
    "end": "2892869"
  },
  {
    "text": "that this create test is referencing the controllers the to do items controller",
    "start": "2892869",
    "end": "2900130"
  },
  {
    "text": "and the create action and so we have some tests written for that so you can see I've got to help a method to grab a",
    "start": "2900130",
    "end": "2906789"
  },
  {
    "text": "HTTP client not just a HTTP client but an authenticated client so I've made it really easy to write these integration",
    "start": "2906789",
    "end": "2913450"
  },
  {
    "text": "tests so if you wanting to test at that level where you're exercising the full asp.net core stack you can and it's",
    "start": "2913450",
    "end": "2919720"
  },
  {
    "text": "simple because it's already set up so you can see here I'm getting my HTTP client authenticated I'm creating a",
    "start": "2919720",
    "end": "2925990"
  },
  {
    "text": "command I'm getting I'm turning that into request content and then I'm posting that get in response and just",
    "start": "2925990",
    "end": "2933009"
  },
  {
    "text": "ensuring the success status code so you can see really simple to write these tests and what I'm trying to do with",
    "start": "2933009",
    "end": "2939430"
  },
  {
    "text": "these tests is just to verify the basic system inputs and outputs I want to make",
    "start": "2939430",
    "end": "2945640"
  },
  {
    "text": "sure that kind of at a high level everything's working nicely and the fact that I can write these tests and that I",
    "start": "2945640",
    "end": "2951309"
  },
  {
    "text": "can write them quickly it's just fantastic so here's our delete test so you can see",
    "start": "2951309",
    "end": "2958480"
  },
  {
    "text": "that we're basically saying hey I've got a valid ID and I want to make sure that if I delete that that it returns this",
    "start": "2958480",
    "end": "2963789"
  },
  {
    "text": "success status code we don't care that it was deleted from the database or anything like that we just want to kind",
    "start": "2963789",
    "end": "2969009"
  },
  {
    "text": "of make sure at a high level things are working we can write other tests to check that it was deleted from the database if we get time in this one",
    "start": "2969009",
    "end": "2976839"
  },
  {
    "text": "given an invalid ID basically ensures that the HTTP status code returned is not found so again a basic system",
    "start": "2976839",
    "end": "2983259"
  },
  {
    "text": "input-output test very quick to write because all of the infrastructure is in place so key points controllers should",
    "start": "2983259",
    "end": "2992230"
  },
  {
    "text": "not contain him any impact sorry controllers should not contain any application logic it's responsible only",
    "start": "2992230",
    "end": "2998859"
  },
  {
    "text": "for taking a request and convert it into a response and that logic list lives in the application layer we should create",
    "start": "2998859",
    "end": "3005099"
  },
  {
    "text": "and consume well-defined view models don't make your clients ask questions open API bridges the gap between the",
    "start": "3005099",
    "end": "3011279"
  },
  {
    "text": "front end and the back end and ensberg automates the generation of open api specifications and clients and we",
    "start": "3011279",
    "end": "3018599"
  },
  {
    "text": "automate that using a simple msbuild task so that we don't have to look at it again",
    "start": "3018599",
    "end": "3024600"
  },
  {
    "text": "so thank you for coming to my talk today if you're keen to learn more please grab the code and/or install the template and",
    "start": "3024600",
    "end": "3032130"
  },
  {
    "text": "try it out give it a go I think you'll find this approach is simple to build and maintain all the way from",
    "start": "3032130",
    "end": "3038220"
  },
  {
    "text": "development to production thank you [Applause]",
    "start": "3038220",
    "end": "3048630"
  }
]