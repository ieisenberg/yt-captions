[
  {
    "text": "okay so thank you very much for the nice introduction and thank you very much for the invitation it's a real pleasure to",
    "start": "4380",
    "end": "10200"
  },
  {
    "text": "be here and I'm looking forward to a very exciting day but first you have to listen to me of course I'll do my best",
    "start": "10200",
    "end": "16320"
  },
  {
    "text": "not to obliterate too many brains so um I just want to start by saying",
    "start": "16320",
    "end": "21840"
  },
  {
    "text": "that this talk is not just um my own talk I prepared this together with Mary Sheeran who is um my colleague and my",
    "start": "21840",
    "end": "29820"
  },
  {
    "text": "wife here she is she's also a researcher in functional programming and so there's",
    "start": "29820",
    "end": "34860"
  },
  {
    "text": "there's no side effects in our household so the talk is named after my paper that",
    "start": "34860",
    "end": "42420"
  },
  {
    "text": "we just uh heard about um but um although I wrote this more than 30 years ago and it's become a very",
    "start": "42420",
    "end": "48899"
  },
  {
    "text": "popular paper since then it's probably my most read paper then of course functional programming is",
    "start": "48899",
    "end": "54840"
  },
  {
    "text": "much older than this paper and also a lot has happened in the last 30 years so",
    "start": "54840",
    "end": "60059"
  },
  {
    "text": "what I'm going to give you is a collection of highlights some of the I'm going to talk about some of the classic",
    "start": "60059",
    "end": "65700"
  },
  {
    "text": "papers in the field I will talk a bit about what's in this paper and I'll talk also about some of the personal",
    "start": "65700",
    "end": "71700"
  },
  {
    "text": "highlights that Mary and I have experienced during the course of our careers",
    "start": "71700",
    "end": "77460"
  },
  {
    "text": "so let's go right back to the beginning functional programming started around about 1940 but it was very different in",
    "start": "77460",
    "end": "85380"
  },
  {
    "text": "those days in 1940 functional programming was very very minimal",
    "start": "85380",
    "end": "90659"
  },
  {
    "text": "so for example if you want a minimal programming language who needs booleans",
    "start": "90659",
    "end": "95939"
  },
  {
    "text": "right what is a Boolean for a Boolean is only there so you can make a choice",
    "start": "95939",
    "end": "101759"
  },
  {
    "text": "well we can make choices with functions let's define true and false to be functions that make choices",
    "start": "101759",
    "end": "109020"
  },
  {
    "text": "if they're going to make choices they have to have two things to choose between so let's give them two arguments",
    "start": "109020",
    "end": "115140"
  },
  {
    "text": "and now we can just Define true we'll say true twos are the first one false choos of the second",
    "start": "115140",
    "end": "121200"
  },
  {
    "text": "there we are so do these functions really correspond to booleans in any meaningful way well yes because now I",
    "start": "121200",
    "end": "128700"
  },
  {
    "text": "can Define if then else but here's if then else it takes a bull that's one of these functions and the",
    "start": "128700",
    "end": "135180"
  },
  {
    "text": "then branch and the else branch and it just chooses then or else by calling the Boolean",
    "start": "135180",
    "end": "141660"
  },
  {
    "text": "so in a language with functions we don't need booleans cool",
    "start": "141660",
    "end": "148459"
  },
  {
    "text": "what about numbers who needs numbers really I mean what's a number four an integer if not for",
    "start": "148620",
    "end": "155160"
  },
  {
    "text": "counting Loop iterations",
    "start": "155160",
    "end": "158239"
  },
  {
    "text": "for example if it takes a loop body F and a starting value X and just calls F twice",
    "start": "160260",
    "end": "168840"
  },
  {
    "text": "they are in the same way one will call F once zero will call it zero times you get the idea",
    "start": "168840",
    "end": "175500"
  },
  {
    "text": "so now for any positive integer I can define a function that I say corresponds to it",
    "start": "175500",
    "end": "181140"
  },
  {
    "text": "but how can I convince you that that these functions really do represent integers well I should show you how to",
    "start": "181140",
    "end": "187800"
  },
  {
    "text": "turn them back into a normal integer so suppose you write these definitions in Haskell How can I convert 2 for",
    "start": "187800",
    "end": "194819"
  },
  {
    "text": "example back into a normal haskical integer well I can just call it",
    "start": "194819",
    "end": "200099"
  },
  {
    "text": "in the Haskell shell this is the Haskell redevelop print Loop and I'll run a loop that increments zero",
    "start": "200099",
    "end": "209280"
  },
  {
    "text": "okay so plus one is Haskell notation for the increment function so this says increment 0 twice and what do we get",
    "start": "209280",
    "end": "216959"
  },
  {
    "text": "two there we are so these really do represent integers because I can get the",
    "start": "216959",
    "end": "222120"
  },
  {
    "text": "integers back out from them well is this just a trick what if I want to do arithmetic on these things can I",
    "start": "222120",
    "end": "228420"
  },
  {
    "text": "do that look we can add together these functions just",
    "start": "228420",
    "end": "235140"
  },
  {
    "text": "by sequencing Loops how do you execute a loop body M plus n times",
    "start": "235140",
    "end": "240780"
  },
  {
    "text": "simple first you executed M times then you execute it n times that's what this",
    "start": "240780",
    "end": "246120"
  },
  {
    "text": "does we're taking the loop body F first I'm executing it n times and then M times on the result",
    "start": "246120",
    "end": "252720"
  },
  {
    "text": "what about multiplication how can you execute a loop body M times n times",
    "start": "252720",
    "end": "259739"
  },
  {
    "text": "you Nest the loops what could be simpler there we are so we have an inner loop",
    "start": "259739",
    "end": "265320"
  },
  {
    "text": "here that calls f n times and then an outer loop that does all of that M times",
    "start": "265320",
    "end": "270600"
  },
  {
    "text": "and that's just the product of M and N does this really work",
    "start": "270600",
    "end": "276840"
  },
  {
    "text": "well you can try it out in Haskell you can just say okay let's add one to multiply two and two",
    "start": "276840",
    "end": "283080"
  },
  {
    "text": "and then we'll take that function and we'll use it to iterate the increment function",
    "start": "283080",
    "end": "288419"
  },
  {
    "text": "five times on zero and yes we get five",
    "start": "288419",
    "end": "294120"
  },
  {
    "text": "so this is great now you could have a functional programming language without booleans or numbers",
    "start": "294120",
    "end": "299699"
  },
  {
    "text": "that means you can write the factorial function I'm sure you've all been waiting for it",
    "start": "299699",
    "end": "305880"
  },
  {
    "text": "so here is factorial Allen 1940 and so I'm just using my if then else if n",
    "start": "305880",
    "end": "313259"
  },
  {
    "text": "is zero I'll return one otherwise I'll multiply n by a factorial of n minus one",
    "start": "313259",
    "end": "318300"
  },
  {
    "text": "as usual and does this work well I can just try it out I can construct the function for",
    "start": "318300",
    "end": "324900"
  },
  {
    "text": "factorial five and use that to run increment from zero and",
    "start": "324900",
    "end": "330060"
  },
  {
    "text": "yes we got 120. it works now there's a couple of things I haven't",
    "start": "330060",
    "end": "336000"
  },
  {
    "text": "shown you how to do there's there is zero function that's easy how do you tell if a function n represents zero",
    "start": "336000",
    "end": "342060"
  },
  {
    "text": "well you use it to iterate a loop body that returns false starting from true",
    "start": "342060",
    "end": "347639"
  },
  {
    "text": "okay so if there's zero iterations you'll get true if there's more than zero you get false",
    "start": "347639",
    "end": "353100"
  },
  {
    "text": "easy and we also need to decrement a number and the less said about that the better",
    "start": "353100",
    "end": "359940"
  },
  {
    "text": "but you can do it and in fact you can carry this idea further and you can take any data",
    "start": "359940",
    "end": "367800"
  },
  {
    "text": "structures your lists tuples you name it and represent them all by functions",
    "start": "367800",
    "end": "372840"
  },
  {
    "text": "so you don't need any of that stuff and the man who realized this was Alonso",
    "start": "372840",
    "end": "378060"
  },
  {
    "text": "Church they're called church encodings after him why did he want to do this well because",
    "start": "378060",
    "end": "384419"
  },
  {
    "text": "church was interested in using functional programming as a foundation for mathematics and foundation for",
    "start": "384419",
    "end": "390840"
  },
  {
    "text": "computation he wanted to show that you could build everything else out of just functions",
    "start": "390840",
    "end": "396180"
  },
  {
    "text": "so he had a very theoretical interest but actually these ideas have had a practical impact as well",
    "start": "396180",
    "end": "403080"
  },
  {
    "text": "you may not know this but early versions of the Glasgow high school compiler actually represented data structures",
    "start": "403080",
    "end": "409020"
  },
  {
    "text": "this way not numbers obviously that would be stupid",
    "start": "409020",
    "end": "414479"
  },
  {
    "text": "but data structures there was a man called John Fairbank was the first to do this he built his own functional",
    "start": "414479",
    "end": "420120"
  },
  {
    "text": "language compiler and he implemented lists and tuples just he did a quick hack and he used the",
    "start": "420120",
    "end": "426780"
  },
  {
    "text": "church encodings and then after a little while when the compiler was working a bit better he thought okay now I should",
    "start": "426780",
    "end": "432180"
  },
  {
    "text": "Implement them properly so he implemented built-in data structures and the code went slower",
    "start": "432180",
    "end": "438960"
  },
  {
    "text": "why was that because the church encodings do a lot of unconditional",
    "start": "438960",
    "end": "444060"
  },
  {
    "text": "jumps and when he represented them properly he turned those into tests and conditional",
    "start": "444060",
    "end": "450240"
  },
  {
    "text": "jumps more instructions they were slower it's not the case anymore because all",
    "start": "450240",
    "end": "456360"
  },
  {
    "text": "the jumps that you get done it to Dynamic addresses they really screw with Branch prediction but back around 1990",
    "start": "456360",
    "end": "462360"
  },
  {
    "text": "Branch prediction wasn't so important and so that this was actually the quickest way to implement data structures",
    "start": "462360",
    "end": "468900"
  },
  {
    "text": "if you want to try this at home I should warn you all the code I've shown you is runnable but if you just type in exactly",
    "start": "468900",
    "end": "475800"
  },
  {
    "text": "what I showed you you'll get a complaint from the type checker the high school type Checker will say",
    "start": "475800",
    "end": "481380"
  },
  {
    "text": "there's an occurs check error we cannot construct the infinite type",
    "start": "481380",
    "end": "486419"
  },
  {
    "text": "T twiddle t r t r t okay that sounds bad doesn't it",
    "start": "486419",
    "end": "491699"
  },
  {
    "text": "but don't worry because this isn't all the information you get the type Checker",
    "start": "491699",
    "end": "497160"
  },
  {
    "text": "will also very helpfully tell you the type it was expecting",
    "start": "497160",
    "end": "502220"
  },
  {
    "text": "and the type that it got and by the way this is the first time I",
    "start": "503699",
    "end": "509639"
  },
  {
    "text": "have ever had the chance to use a three-point font on a slide now I realize even this might look a",
    "start": "509639",
    "end": "516060"
  },
  {
    "text": "little overwhelming but don't worry there's more it also tells you the types of all the variables in scope",
    "start": "516060",
    "end": "523260"
  },
  {
    "text": "so the problem is that although you can run this code in Haskell it's just a little bit uh too tricky for the type",
    "start": "523260",
    "end": "530160"
  },
  {
    "text": "inference to understand it so you have to add the red symbols two symbols and you have",
    "start": "530160",
    "end": "537300"
  },
  {
    "text": "to tell the type Checker what the type of the factorial function is the black stuff is all stuff that the type Checker could infer by itself the red bit you",
    "start": "537300",
    "end": "544740"
  },
  {
    "text": "have to add so if you want to try it out don't forget to do that okay so way back in",
    "start": "544740",
    "end": "551779"
  },
  {
    "text": "1940 Alonso Church could write functional programs that was great but he couldn't actually run them",
    "start": "551779",
    "end": "559860"
  },
  {
    "text": "that was a bit sad wasn't it you couldn't run functional programs until around 1960",
    "start": "559860",
    "end": "566880"
  },
  {
    "text": "when John McCarthy implemented lisp here's the factorial function in lisp and although it may look a little funny",
    "start": "566880",
    "end": "573779"
  },
  {
    "text": "to most of us nowadays Liz was actually quite a powerful functional language it",
    "start": "573779",
    "end": "578880"
  },
  {
    "text": "even had higher order functions so you could for example map list fact",
    "start": "578880",
    "end": "584040"
  },
  {
    "text": "down the list one two three four map list is what John McCarthy called the map function",
    "start": "584040",
    "end": "589860"
  },
  {
    "text": "so this will just call the factorial function for each of these arguments and you get the list of factorial numbers just as you would expect so you could do",
    "start": "589860",
    "end": "597000"
  },
  {
    "text": "a lot of fun functional programming in this and um actually lisp was my gateway drug",
    "start": "597000",
    "end": "603860"
  },
  {
    "text": "I I read a book about this but I didn't have access to an implementation so I wrote my own lisp interpreter so that I",
    "start": "604560",
    "end": "610860"
  },
  {
    "text": "could play with it it was great education so a lot of exciting stuff was going on",
    "start": "610860",
    "end": "616620"
  },
  {
    "text": "in the early 60s but I'm going to skip ahead a little bit to the middle of the decade and a truly Landmark paper",
    "start": "616620",
    "end": "623940"
  },
  {
    "text": "by Peter Landon this was from 1965. a paper called the next 700 programming languages and this is really one of the",
    "start": "623940",
    "end": "630000"
  },
  {
    "text": "classics in the whole programming languages area I'm just going to read you an extract from the abstract",
    "start": "630000",
    "end": "636060"
  },
  {
    "text": "he says today 1700 special programming languages are used to communicate in over 700",
    "start": "636060",
    "end": "642959"
  },
  {
    "text": "application areas well Landon thought that was 1699 too many",
    "start": "642959",
    "end": "651899"
  },
  {
    "text": "all we really need surely is one programming language his programming language I swim",
    "start": "651899",
    "end": "658860"
  },
  {
    "text": "which stands for if you see what I mean and 700 libraries",
    "start": "658860",
    "end": "665100"
  },
  {
    "text": "protecting different application areas so you know quite a modern approach",
    "start": "665100",
    "end": "670620"
  },
  {
    "text": "anyway um Landon described his ice cream language which has had a huge impact on",
    "start": "670620",
    "end": "676260"
  },
  {
    "text": "functional languages ever since for example you can see here's the factorial function in Iceland look there's a where",
    "start": "676260",
    "end": "681779"
  },
  {
    "text": "that is nowadays familiar to us in Haskell for example but I'm not going to talk so much about",
    "start": "681779",
    "end": "687720"
  },
  {
    "text": "the language but about something else that Landon really emphasized in this paper and that was what he called laws",
    "start": "687720",
    "end": "695700"
  },
  {
    "text": "what is a law well a law is an equivalence between two programs that tell you that they will",
    "start": "695700",
    "end": "702180"
  },
  {
    "text": "behave exactly the same in any context so you can always replace one side by the other",
    "start": "702180",
    "end": "708120"
  },
  {
    "text": "and this is an example of a law about lisp programs it says that if you reverse a list and",
    "start": "708120",
    "end": "715140"
  },
  {
    "text": "then map list F over the elements you get the same result as if you first map list F and then reverse the results that",
    "start": "715140",
    "end": "722399"
  },
  {
    "text": "you get unfortunately it's not quite true in lisp because let's pass functions with side",
    "start": "722399",
    "end": "729000"
  },
  {
    "text": "effects and the left side performs the calls to F in a different order from the right hand side so if F has side effects you",
    "start": "729000",
    "end": "735959"
  },
  {
    "text": "could get different results Latin thought that was bad laws are made to be followed",
    "start": "735959",
    "end": "744180"
  },
  {
    "text": "and indeed he discusses this point in his paper quite explicitly he says you might be wondering",
    "start": "744180",
    "end": "751819"
  },
  {
    "text": "you know what is the point of having a law like this because it gives you two different ways of doing the same",
    "start": "752040",
    "end": "758459"
  },
  {
    "text": "thing what's the point of that wouldn't it be better if they did subtly different things",
    "start": "758459",
    "end": "764760"
  },
  {
    "text": "because then you'd have a choice I would give you expressive power surely in the making the choice between them",
    "start": "764760",
    "end": "772740"
  },
  {
    "text": "London Thunders no expressive power should be by Design rather than by",
    "start": "772740",
    "end": "779579"
  },
  {
    "text": "accident yes Mr Landon it's hard to deny has a point is it",
    "start": "779579",
    "end": "787560"
  },
  {
    "text": "so London really emphasized the importance of laws and I think ever since then in",
    "start": "787560",
    "end": "793920"
  },
  {
    "text": "the functional programmers have cared about whether their programs satisfying nice laws",
    "start": "793920",
    "end": "799800"
  },
  {
    "text": "let me jump ahead to another landmark paper um can programming be liberated from the",
    "start": "799800",
    "end": "806459"
  },
  {
    "text": "Von Norman Style by John Backus who knows who John Backus was",
    "start": "806459",
    "end": "813319"
  },
  {
    "text": "okay oh many many people do many people don't so you've heard of for example Bacchus",
    "start": "813660",
    "end": "821100"
  },
  {
    "text": "normal form BNF that was John Baptist's invention but in",
    "start": "821100",
    "end": "827940"
  },
  {
    "text": "1977 he got the touring award and it wasn't for BNF he got the touring award because Bacchus",
    "start": "827940",
    "end": "833339"
  },
  {
    "text": "was the man who led the team that developed the first Fortran compiler",
    "start": "833339",
    "end": "838440"
  },
  {
    "text": "and the first Fortune compiler was the first compiler that could generate",
    "start": "838440",
    "end": "844079"
  },
  {
    "text": "better code than a human could write consistently and in those days this was you know in",
    "start": "844079",
    "end": "849899"
  },
  {
    "text": "the 50s computers were so expensive nobody cared about program of productivity they only cared about",
    "start": "849899",
    "end": "855779"
  },
  {
    "text": "making the best use of the machine and John Backus made it possible to get the best use from the machine with a",
    "start": "855779",
    "end": "862320"
  },
  {
    "text": "high level language instead of writing machine code at that time there were",
    "start": "862320",
    "end": "867420"
  },
  {
    "text": "people who seriously thought Assembly Language removed you too far from the machine because you couldn't reuse the",
    "start": "867420",
    "end": "873480"
  },
  {
    "text": "big patterns of instructions as data if they happen to have the right value",
    "start": "873480",
    "end": "878779"
  },
  {
    "text": "so although Fortran even at the time that I was studying was the language",
    "start": "879959",
    "end": "885180"
  },
  {
    "text": "everybody loved to hate well one shouldn't let that diminish one's appreciation of the enormous achievement",
    "start": "885180",
    "end": "890399"
  },
  {
    "text": "that the fortune compiler was so John back has got the Turing water that and when you get the Turing award then",
    "start": "890399",
    "end": "897300"
  },
  {
    "text": "you get to give a talk and to publish a paper and of course John Backus could have",
    "start": "897300",
    "end": "902639"
  },
  {
    "text": "talked about how they had developed the Fortran compiler and all the techniques that they used in fact he later on wrote",
    "start": "902639",
    "end": "908579"
  },
  {
    "text": "a paper about exactly that which is very interesting too but he chose to use his touring award lecture to say",
    "start": "908579",
    "end": "915480"
  },
  {
    "text": "no no we got it all wrong we shouldn't be using imperative",
    "start": "915480",
    "end": "920639"
  },
  {
    "text": "languages like Fortran we should be using functional languages his new love",
    "start": "920639",
    "end": "927019"
  },
  {
    "text": "I'm just going to read you a few phrases from the introduction to the paper because they're so wonderful",
    "start": "927540",
    "end": "933540"
  },
  {
    "text": "conventional programming languages are growing ever more enormous but not stronger",
    "start": "933540",
    "end": "940260"
  },
  {
    "text": "this was before c plus existed",
    "start": "940260",
    "end": "944660"
  },
  {
    "text": "languages like Ada inherent defects at the most basic level",
    "start": "947339",
    "end": "953399"
  },
  {
    "text": "cause them to be both fat and weak it's stirring stuff isn't it",
    "start": "953399",
    "end": "959959"
  },
  {
    "text": "they're primitive word at a time style of programming inherited from their",
    "start": "960139",
    "end": "965880"
  },
  {
    "text": "ancestor the Von Norman computer so he goes on to explain that in a computer certainly at that time you would have a",
    "start": "965880",
    "end": "972420"
  },
  {
    "text": "processor and a memory and the connection between was the bus and the programs were all expressed at the level",
    "start": "972420",
    "end": "977880"
  },
  {
    "text": "of processing one word at a time all the words you wanted to compute with had to go between the memory and the processor",
    "start": "977880",
    "end": "983880"
  },
  {
    "text": "and back again over this one bus that's what he called Von Neumann bottleneck it was clearly a very bad idea for parallel",
    "start": "983880",
    "end": "990839"
  },
  {
    "text": "programming for example as indeed it has turned out to be so Backus was very down on word at a",
    "start": "990839",
    "end": "997500"
  },
  {
    "text": "time programming he wanted to program with with larger scale structures",
    "start": "997500",
    "end": "1002839"
  },
  {
    "text": "let's follow back again their inability to effectively use powerful combining",
    "start": "1002839",
    "end": "1008240"
  },
  {
    "text": "forms for building new programs from existing ones",
    "start": "1008240",
    "end": "1013120"
  },
  {
    "text": "what's he talking about I've got to show you some of his combining forms pictorially so I'm going to draw some diagrams a",
    "start": "1013519",
    "end": "1019639"
  },
  {
    "text": "back is thought of a program as a function from its input to its output I'm going to draw the input on the right",
    "start": "1019639",
    "end": "1025579"
  },
  {
    "text": "hand side it's just going to work better so if this is a function or a program Backus proposed combining forms for",
    "start": "1025579",
    "end": "1033079"
  },
  {
    "text": "building larger programs from smaller ones such as apply to all which we wrote Alpha",
    "start": "1033079",
    "end": "1038900"
  },
  {
    "text": "so Alpha F would take a program that converted an input element to an output element and turn it into a program that",
    "start": "1038900",
    "end": "1045380"
  },
  {
    "text": "would take a vector of inputs or a list of inputs and produce a vector of outputs nowadays we call it map",
    "start": "1045380",
    "end": "1053380"
  },
  {
    "text": "here's another of his combining forms if you've got a bunch of programs F1 F2 F3 and so on you could make a construction",
    "start": "1055580",
    "end": "1062600"
  },
  {
    "text": "of them which you wrote like this and this is a program that takes it the",
    "start": "1062600",
    "end": "1067820"
  },
  {
    "text": "input and replicates it and passes it to each of the functions making a vector of the results",
    "start": "1067820",
    "end": "1075039"
  },
  {
    "text": "so those are just two examples and there were many more their lack of useful mathematical",
    "start": "1075740",
    "end": "1082160"
  },
  {
    "text": "properties for reasoning about programs this is very bad um so let me show you one of those",
    "start": "1082160",
    "end": "1087559"
  },
  {
    "text": "properties look at this program so this is a composition of a construction with",
    "start": "1087559",
    "end": "1094340"
  },
  {
    "text": "another function this is G and composition was one of Baxter's combining forms that's a black dot there",
    "start": "1094340",
    "end": "1101539"
  },
  {
    "text": "so this diagram can be described by this expression in bakers's language",
    "start": "1101539",
    "end": "1106580"
  },
  {
    "text": "but if you think about it this will compute the same results as this program",
    "start": "1106580",
    "end": "1112520"
  },
  {
    "text": "but it doesn't matter whether we replicate the input sorry whether we take the output of G and replicate that",
    "start": "1112520",
    "end": "1119240"
  },
  {
    "text": "or first replicate the input and then process it several times and this",
    "start": "1119240",
    "end": "1124940"
  },
  {
    "text": "can be written in this form it's a construction of compositions of F1 with G F2 with G and so on",
    "start": "1124940",
    "end": "1132620"
  },
  {
    "text": "and so these two programs will always be equal and that's one of bacchus's laws",
    "start": "1132620",
    "end": "1137900"
  },
  {
    "text": "one of the mathematical properties he was talking about so the paper talks a lot about these",
    "start": "1137900",
    "end": "1143179"
  },
  {
    "text": "things and then he also shows the kinds of programs he wants to write let's look at the example of that",
    "start": "1143179",
    "end": "1148400"
  },
  {
    "text": "this isn't one of them this is a program for computing the product the scalar product of two",
    "start": "1148400",
    "end": "1154760"
  },
  {
    "text": "vectors and it's written in algor 60. look at it we take one element at a time",
    "start": "1154760",
    "end": "1160700"
  },
  {
    "text": "from each Vector one word at a time we multiply them together we add one word into this variable C it's very very word",
    "start": "1160700",
    "end": "1167900"
  },
  {
    "text": "at a time backers didn't like that he wanted to write this program like this instead",
    "start": "1167900",
    "end": "1174140"
  },
  {
    "text": "where you take a program that receives a pair of vectors as input",
    "start": "1174140",
    "end": "1179960"
  },
  {
    "text": "transposes them this is Matrix transpose to get a vector of pairs applies multiplication to all the",
    "start": "1179960",
    "end": "1186020"
  },
  {
    "text": "elements of the pair so now we get a vector of product and then we just add them up and insert is what that is",
    "start": "1186020",
    "end": "1191960"
  },
  {
    "text": "called what we now call folder so that would just sum the results and we get the scalared product very simply",
    "start": "1191960",
    "end": "1198799"
  },
  {
    "text": "so you can see this program is treating the whole value the pair of",
    "start": "1198799",
    "end": "1204320"
  },
  {
    "text": "vectors as a whole it's not word at the time but backers would actually have written that like this I think he had a little",
    "start": "1204320",
    "end": "1210559"
  },
  {
    "text": "bit of APL Envy but um but that that's really not so important",
    "start": "1210559",
    "end": "1217100"
  },
  {
    "text": "so this paper was enormously influential I can't over",
    "start": "1217100",
    "end": "1223700"
  },
  {
    "text": "uh emphasized to you just how important it was that the man who gave us Fortran",
    "start": "1223700",
    "end": "1229039"
  },
  {
    "text": "the most widely used programming language of the time said in his Turing water dress no less",
    "start": "1229039",
    "end": "1234679"
  },
  {
    "text": "it was all a mistake it's as though Beyond a Strauss drop were to stand here and say you should",
    "start": "1234679",
    "end": "1240620"
  },
  {
    "text": "all be using Haskell so it inspired a whole generation of",
    "start": "1240620",
    "end": "1246380"
  },
  {
    "text": "researchers to work on functional programming at that time myself among them if you haven't read the paper",
    "start": "1246380",
    "end": "1253220"
  },
  {
    "text": "Google Backus touring award today the PDF for the paper is the first hit",
    "start": "1253220",
    "end": "1260120"
  },
  {
    "text": "and if there's one thing to remember from this talk it's that if you've not read that paper you should go away and",
    "start": "1260120",
    "end": "1266240"
  },
  {
    "text": "do so or at least you should read the first half the first half is just brilliant a",
    "start": "1266240",
    "end": "1271640"
  },
  {
    "text": "classic of the genre the second half with some ideas for handling IO which haven't proved as influential in the",
    "start": "1271640",
    "end": "1278120"
  },
  {
    "text": "long run but the first half it's gold so John Backus now I want to skip ahead",
    "start": "1278120",
    "end": "1286039"
  },
  {
    "text": "another few years to uh this band Peter Henderson remember",
    "start": "1286039",
    "end": "1291080"
  },
  {
    "text": "the face so Peter was Mary's PhD supervisor",
    "start": "1291080",
    "end": "1296720"
  },
  {
    "text": "and he was also very excited about functional programming um but he had two loves in life",
    "start": "1296720",
    "end": "1303640"
  },
  {
    "text": "functional programming and the artworks of M.C Escher",
    "start": "1303640",
    "end": "1308900"
  },
  {
    "text": "this is one of those this one is called Square limit I'm sure we've all seen them and Peter wondered if he could combine",
    "start": "1308900",
    "end": "1315620"
  },
  {
    "text": "the two so in those days right so he wanted to be",
    "start": "1315620",
    "end": "1321380"
  },
  {
    "text": "able to produce this picture and in those days if he wanted to do Graphics you had to draw pictures on graph plotter there was a piece of paper and",
    "start": "1321380",
    "end": "1328159"
  },
  {
    "text": "the plotter would pick up a pen and draw on the paper for you it was very",
    "start": "1328159",
    "end": "1333980"
  },
  {
    "text": "time consuming and you had to program those plotters by sending commands to tell the pen which",
    "start": "1333980",
    "end": "1339679"
  },
  {
    "text": "way to move very word at a time picture Peter didn't want to do that of",
    "start": "1339679",
    "end": "1344840"
  },
  {
    "text": "course he wanted to work with whole values pictures like this fish for example",
    "start": "1344840",
    "end": "1351380"
  },
  {
    "text": "and he wanted to work with combining forms for putting pictures together like this one here I'm using an overlay",
    "start": "1351380",
    "end": "1359240"
  },
  {
    "text": "operator to Overlay the fish with a double rotation of itself rotation here is by 90 degrees so this",
    "start": "1359240",
    "end": "1365840"
  },
  {
    "text": "is a 180 degree rotation so now we've got two fish chasing each other's Tails so it's nice isn't it",
    "start": "1365840",
    "end": "1371480"
  },
  {
    "text": "and it turns out that this fish is very cunningly designed so that it can fit together with itself in more than one way",
    "start": "1371480",
    "end": "1377240"
  },
  {
    "text": "in fact if you rotate it 45 degrees to get fish too",
    "start": "1377240",
    "end": "1382340"
  },
  {
    "text": "then you get a smaller fish and you can overlay the original fish and I think",
    "start": "1382340",
    "end": "1388400"
  },
  {
    "text": "this is fish too and this is a triple rotation of fish too and they all fit together so now we've got a big fish and",
    "start": "1388400",
    "end": "1393559"
  },
  {
    "text": "two smaller ones swimming beside it let's call that tea",
    "start": "1393559",
    "end": "1399740"
  },
  {
    "text": "here's another nice picture where I've overlaid four copies of the 45 degree fish fish two",
    "start": "1399740",
    "end": "1406940"
  },
  {
    "text": "and we've so we've got four rotations of it that fit together and they give us four fish swimming in a circle doesn't",
    "start": "1406940",
    "end": "1412820"
  },
  {
    "text": "that look like part of square limit yeah he went on to Define more functions on",
    "start": "1412820",
    "end": "1419780"
  },
  {
    "text": "pictures like quartet that takes four pictures and puts them together into a square equally spaced",
    "start": "1419780",
    "end": "1427400"
  },
  {
    "text": "and now you can take for example that picture T that had three fish in and",
    "start": "1427400",
    "end": "1434659"
  },
  {
    "text": "I've got two copies here this one is rotated if you put that together in a quartet",
    "start": "1434659",
    "end": "1440120"
  },
  {
    "text": "with two empty pictures then we get a picture in which we've got larger fish swimming here and smaller",
    "start": "1440120",
    "end": "1446419"
  },
  {
    "text": "ones above so we've got two different sizes of fish but of course in square limit there are",
    "start": "1446419",
    "end": "1452299"
  },
  {
    "text": "many different sizes of fish but what if we call this picture side one and we make another quartet",
    "start": "1452299",
    "end": "1458900"
  },
  {
    "text": "where we put smaller copies of side one up here now we've got four different sizes of",
    "start": "1458900",
    "end": "1464840"
  },
  {
    "text": "fish getting smaller towards the edge and of course we can keep doing that until the fish becomes smaller than the",
    "start": "1464840",
    "end": "1471020"
  },
  {
    "text": "pixel at least so we can get infinitely many fish getting smaller towards the edge",
    "start": "1471020",
    "end": "1476840"
  },
  {
    "text": "likewise if we take that Force fish swimming in a circle then here I've made",
    "start": "1476840",
    "end": "1483679"
  },
  {
    "text": "a picture where I put three empty pictures together with that you can see it looks a bit like a corner",
    "start": "1483679",
    "end": "1489260"
  },
  {
    "text": "but now if I fill in these other three parts with a smaller version of the original corner",
    "start": "1489260",
    "end": "1495140"
  },
  {
    "text": "and two sides one of them rotated then we have a suitable corner for the",
    "start": "1495140",
    "end": "1500240"
  },
  {
    "text": "picture with fish getting smaller towards the edge and so on and so forth",
    "start": "1500240",
    "end": "1506419"
  },
  {
    "text": "and at the end of the day if you make a Nonet that's nine pictures in a square with copies of the side and the corner",
    "start": "1506419",
    "end": "1513740"
  },
  {
    "text": "and rotations of each of them and let's picture you in the middle then this is what you get",
    "start": "1513740",
    "end": "1520700"
  },
  {
    "text": "isn't that beautiful look there's Ash's Square limit",
    "start": "1520700",
    "end": "1527740"
  },
  {
    "text": "it's close isn't it okay he doesn't have black and white fish that's an exercise for the reader",
    "start": "1527840",
    "end": "1535480"
  },
  {
    "text": "but he had great fun doing this and Mary spent part of her PhD time implementing various versions of his functional",
    "start": "1535820",
    "end": "1541940"
  },
  {
    "text": "geometry and drawing these fish on the graph plotters she had a great time but of course the there's more",
    "start": "1541940",
    "end": "1549679"
  },
  {
    "text": "because Peter had to find a way to represent pictures",
    "start": "1549679",
    "end": "1554779"
  },
  {
    "text": "how might he represent pictures what would Alonso Church do",
    "start": "1554779",
    "end": "1560900"
  },
  {
    "text": "yes of course a picture is a function so Peter found a cunning way of",
    "start": "1560900",
    "end": "1567140"
  },
  {
    "text": "representing pictures as a function from three vectors A B and C",
    "start": "1567140",
    "end": "1573260"
  },
  {
    "text": "that would return a list of plotter commands that Drew the picture within the blue rectangle defined by these",
    "start": "1573260",
    "end": "1579260"
  },
  {
    "text": "three vectors and choosing this representation made the",
    "start": "1579260",
    "end": "1584480"
  },
  {
    "text": "operations on pictures really easy to Define so how do you overlay two pictures p and",
    "start": "1584480",
    "end": "1589580"
  },
  {
    "text": "Q we could just draw them both in the same rectangle and then take the union of the plotter commands",
    "start": "1589580",
    "end": "1596000"
  },
  {
    "text": "how do you put one picture beside another well if we want to put P beside Q we",
    "start": "1596000",
    "end": "1602299"
  },
  {
    "text": "just have to split up the blue rectangle into two smaller ones and then we draw p in a rectangle defined by a b over 2 and",
    "start": "1602299",
    "end": "1610159"
  },
  {
    "text": "c and we draw Q in a rectangle defined by this will be a plus b over 2 is the bottom corner and B over 2 and C",
    "start": "1610159",
    "end": "1618080"
  },
  {
    "text": "pretty simple you can even rotate pictures in the same way you might wonder how to do that how",
    "start": "1618080",
    "end": "1623779"
  },
  {
    "text": "do we rotate P well we draw it in this rectangle instead where the origin is now the original a",
    "start": "1623779",
    "end": "1630620"
  },
  {
    "text": "plus b the bottom is now the vector C and the side is the vector minus B",
    "start": "1630620",
    "end": "1637360"
  },
  {
    "text": "so the find has picture operations this way and then he went on to prove a whole",
    "start": "1637400",
    "end": "1643460"
  },
  {
    "text": "bunch of laws about them like this one for example I've not shown you a buff but this is easy to understand if I put",
    "start": "1643460",
    "end": "1648559"
  },
  {
    "text": "P above q and rotate it I get the same thing as if I rotate P rotate Q I put",
    "start": "1648559",
    "end": "1655400"
  },
  {
    "text": "one beside the other and if you take those simple definitions I showed you giving a proof of this is",
    "start": "1655400",
    "end": "1662000"
  },
  {
    "text": "very very easy so Peter proved many many laws about his combinators why did he do that he says",
    "start": "1662000",
    "end": "1669620"
  },
  {
    "text": "in the paper it seems It's a positive correlation between the Simplicity of the rules and",
    "start": "1669620",
    "end": "1674960"
  },
  {
    "text": "the quality of the algebra as a description tool in other words he's saying",
    "start": "1674960",
    "end": "1680179"
  },
  {
    "text": "finding definitions for these operations that satisfy good laws that's how he",
    "start": "1680179",
    "end": "1686779"
  },
  {
    "text": "knew that his design was right so we see here important ideas in",
    "start": "1686779",
    "end": "1693260"
  },
  {
    "text": "general for functional programming Peter's programming with whole values pictures using combining forms like the",
    "start": "1693260",
    "end": "1699320"
  },
  {
    "text": "picture operations checking the laws they satisfy and using the algebra as a litmus test for a good",
    "start": "1699320",
    "end": "1705620"
  },
  {
    "text": "design and once again using Church's idea of functions as representations",
    "start": "1705620",
    "end": "1712279"
  },
  {
    "text": "those ideas come back in functional programming again and again so functional geometry was a lot of fun",
    "start": "1712279",
    "end": "1719000"
  },
  {
    "text": "I want to now skip ahead to a paper from the 90s that is a personal favorite of mine you",
    "start": "1719000",
    "end": "1725120"
  },
  {
    "text": "might not be aware of it it's paper called Haskell versus Ada versus C plus plus versus orc versus dot dot dot an",
    "start": "1725120",
    "end": "1733220"
  },
  {
    "text": "experiment in software prototyping productivity and it's by Paul Hudak and Mark Jones",
    "start": "1733220",
    "end": "1740059"
  },
  {
    "text": "Paul Hudak was a giant of functional program he died a couple of years ago and he was the person who took the",
    "start": "1740059",
    "end": "1746000"
  },
  {
    "text": "initiative to the design of Haskell um but in the 90s Haskell did exist but",
    "start": "1746000",
    "end": "1752600"
  },
  {
    "text": "it was very hard to get research money in the U.S for building real software with functional programming",
    "start": "1752600",
    "end": "1758299"
  },
  {
    "text": "however Paul figured out that you could get it for software prototyping software prototyping was was hot at that",
    "start": "1758299",
    "end": "1765380"
  },
  {
    "text": "time it's like microservices today and there was a big DARPA grant for",
    "start": "1765380",
    "end": "1773179"
  },
  {
    "text": "using a variety of languages as prototype and languages orc for example",
    "start": "1773179",
    "end": "1779779"
  },
  {
    "text": "so there was a group who were trying to use each of these languages for prototyping anyway um",
    "start": "1779779",
    "end": "1785899"
  },
  {
    "text": "early on in the project DARPA decided they would check and see how people were getting on so they decided to give",
    "start": "1785899",
    "end": "1791059"
  },
  {
    "text": "everybody the same problem and a short time to build a prototype and then they would evaluate them and DARPA being darker the Prototype was",
    "start": "1791059",
    "end": "1799039"
  },
  {
    "text": "what they call it two-dimensional geometry server and it was a question of reading in data",
    "start": "1799039",
    "end": "1804980"
  },
  {
    "text": "about the positions of various objects and their trajectories and constructing regions with funny names like slave",
    "start": "1804980",
    "end": "1812360"
  },
  {
    "text": "Doctrine and weapon Doctrine and engageability Zone",
    "start": "1812360",
    "end": "1817880"
  },
  {
    "text": "and then there would be objects in here like a hostile aircraft and the commercial aircraft and the Prototype",
    "start": "1817880",
    "end": "1823279"
  },
  {
    "text": "was supposed to spit out some text that would say you know the commercial aircraft is at this point it's in the engage ability Zone it's in the tight",
    "start": "1823279",
    "end": "1829520"
  },
  {
    "text": "Zone and the Hostile craft is in the carrier slave Doctrine I don't know if that's good or bad but",
    "start": "1829520",
    "end": "1835580"
  },
  {
    "text": "it didn't matter so Mark Jones who was a postdoc at the time with Paul got the job of building",
    "start": "1835580",
    "end": "1842840"
  },
  {
    "text": "the Prototype and of course what you have to do to solve this problem you have to find a way to represent regions",
    "start": "1842840",
    "end": "1849380"
  },
  {
    "text": "regions in the plane how might you represent a region",
    "start": "1849380",
    "end": "1855500"
  },
  {
    "text": "what would Alonso Church do of course as a function so that's what",
    "start": "1855500",
    "end": "1861559"
  },
  {
    "text": "Mark did so Marx regions were just functions from points in the plane to a Boolean true if",
    "start": "1861559",
    "end": "1866960"
  },
  {
    "text": "the point is in the region and fault if it's not and that made it really easy to Define functions that construct shapes for",
    "start": "1866960",
    "end": "1874399"
  },
  {
    "text": "example a circle how do you tell if a pointer is within a circle you just compute how far it is from the origin compare that to the radius",
    "start": "1874399",
    "end": "1881000"
  },
  {
    "text": "how do you compute the outside of a region well you compute the inside and you negate the Boolean how do you take the intersection of two",
    "start": "1881000",
    "end": "1888080"
  },
  {
    "text": "regions well you just ask is the point in the first and in the second it's just the conjunction of the booleans so it's",
    "start": "1888080",
    "end": "1893899"
  },
  {
    "text": "dead easy and then you can go on to Define for example a ring shape an annulus it's the outside of one Circle",
    "start": "1893899",
    "end": "1900279"
  },
  {
    "text": "insected intersected with the inside of another you can imagine",
    "start": "1900279",
    "end": "1905960"
  },
  {
    "text": "ah after a little while can solved the problem and when the solutions were compared",
    "start": "1905960",
    "end": "1912620"
  },
  {
    "text": "these were the results here's a table from the paper here's Mark's solution it's 85 lines of",
    "start": "1912620",
    "end": "1919640"
  },
  {
    "text": "code and that compares very well with 760 lines of ADA or 1100 lines of C plus",
    "start": "1919640",
    "end": "1926539"
  },
  {
    "text": "plus so that that was great what I think is a bit of a shame is that Marx Mark was",
    "start": "1926539",
    "end": "1932960"
  },
  {
    "text": "very fond of writing type signatures which you don't have to do in Haskell so that those 85 lines",
    "start": "1932960",
    "end": "1939740"
  },
  {
    "text": "29 were lines the type Checker could have inferred for him so it could have been a 56 line solution",
    "start": "1939740",
    "end": "1946460"
  },
  {
    "text": "he missed an opportunity there anyway each group submitted their",
    "start": "1946460",
    "end": "1951860"
  },
  {
    "text": "solution and DARPA evaluators looked at them and originally they just didn't",
    "start": "1951860",
    "end": "1957260"
  },
  {
    "text": "believe that this was executable code I thought he's just written down some kind of spec no no uh Paul and Mark insisted you",
    "start": "1957260",
    "end": "1964580"
  },
  {
    "text": "could run the code so then they thought well this must be because Mark Jones is a genius",
    "start": "1964580",
    "end": "1971600"
  },
  {
    "text": "which is true but um nevertheless they didn't trust it",
    "start": "1971600",
    "end": "1976820"
  },
  {
    "text": "so what they did was without telling Paul and Mark they picked a graduate student somewhere else and they gave them a week to learn",
    "start": "1976820",
    "end": "1983539"
  },
  {
    "text": "article and then gave him the problem and that's why Haskell is in this list twice",
    "start": "1983539",
    "end": "1990559"
  },
  {
    "text": "with both the first and second smallest Solutions",
    "start": "1990559",
    "end": "1995320"
  },
  {
    "text": "but you can see with only a week's experience her solution was almost twice the size of marks [Laughter]",
    "start": "1996080",
    "end": "2003629"
  },
  {
    "text": "well I I thought this is a truly wonderful result and you would think well what a topic going to say you know",
    "start": "2004179",
    "end": "2010000"
  },
  {
    "text": "here's proof positive that Haskell is way better at prototyping at least than",
    "start": "2010000",
    "end": "2015159"
  },
  {
    "text": "all of these other languages so what was the reaction too cute for its own good",
    "start": "2015159",
    "end": "2022899"
  },
  {
    "text": "higher order functions are just a trick probably not useful in other contexts",
    "start": "2022899",
    "end": "2028000"
  },
  {
    "text": "so next time you use one remember it's just a trick anyway I love that paper I think you can",
    "start": "2028000",
    "end": "2034299"
  },
  {
    "text": "see why there's much more goodness in the paper than I have time to tell you about so that's another good recommendation if you fancy some fun",
    "start": "2034299",
    "end": "2040539"
  },
  {
    "text": "reading I want to go back now and discuss another very important idea which is",
    "start": "2040539",
    "end": "2047200"
  },
  {
    "text": "represented in Haskell lazy evaluation so lazy evaluation was an idea that was in the air there were a number of people",
    "start": "2047200",
    "end": "2054280"
  },
  {
    "text": "who had come up with variations on it around this time but there are two papers in particular that are usually credited um with the invention certainly",
    "start": "2054280",
    "end": "2061118"
  },
  {
    "text": "with the invention of the name uh one called a lazy evaluator in Europe by Henderson Morris look",
    "start": "2061119",
    "end": "2067300"
  },
  {
    "text": "remember this guy member supervisor and the other in the US by uh Dan",
    "start": "2067300",
    "end": "2073419"
  },
  {
    "text": "Friedman and David Wise Khan should not evaluate its arguments and they illuminated different aspects of laser",
    "start": "2073419",
    "end": "2078460"
  },
  {
    "text": "evaluation they were both very inspiring and uh",
    "start": "2078460",
    "end": "2084398"
  },
  {
    "text": "for those of you who might not know what lazy evaluation is the best way to I can explain it like this it it means that",
    "start": "2084399",
    "end": "2090878"
  },
  {
    "text": "when you pass a parameter to a function for example or when you put a component in a data structure you don't evaluate",
    "start": "2090879",
    "end": "2096099"
  },
  {
    "text": "it straight away you wait until you're going to need it it's like trying to get a teenager out",
    "start": "2096099",
    "end": "2102040"
  },
  {
    "text": "of the house put on your jacket I will",
    "start": "2102040",
    "end": "2108940"
  },
  {
    "text": "put on your shoes I will clean your teeth",
    "start": "2108940",
    "end": "2114579"
  },
  {
    "text": "I will we're going now oh wait a minute laser",
    "start": "2114579",
    "end": "2119740"
  },
  {
    "text": "evaluation is just like that so what I was really inspired by in",
    "start": "2119740",
    "end": "2125740"
  },
  {
    "text": "these papers was I was fascinated by whole value programming and with lazy valuation the whole value can be",
    "start": "2125740",
    "end": "2132460"
  },
  {
    "text": "infinite for example it could be the infinite list of natural numbers 0 1 2 3 and so",
    "start": "2132460",
    "end": "2138760"
  },
  {
    "text": "on Without End it could be all of the iterations of a function",
    "start": "2138760",
    "end": "2144640"
  },
  {
    "text": "x f of x f twice of X and so on now of course this doesn't mean well we program with",
    "start": "2144640",
    "end": "2151060"
  },
  {
    "text": "these things that we're ever actually going to compute all the iterations of a function you can't you fall into an infinite Loop what it means is that it's",
    "start": "2151060",
    "end": "2157660"
  },
  {
    "text": "the consumer of such a list who decides how many values are needed",
    "start": "2157660",
    "end": "2163780"
  },
  {
    "text": "so you can separate the code that produces values with a code that consumes them",
    "start": "2163780",
    "end": "2169540"
  },
  {
    "text": "and decides how many it needs and I thought that separation was really exciting and had lots of possibilities",
    "start": "2169540",
    "end": "2175540"
  },
  {
    "text": "for structuring code better for example I had studied numerical methods as a student I wasn't very good",
    "start": "2175540",
    "end": "2180700"
  },
  {
    "text": "at it and partly the problem was that numerical algorithms always seem to be",
    "start": "2180700",
    "end": "2185859"
  },
  {
    "text": "very involved and you know there were lots of moving parts that were hard to understand but I realized I could write one",
    "start": "2185859",
    "end": "2192640"
  },
  {
    "text": "consumer function for numerical methods to compute the limit of a sequence because many methods compute the limit",
    "start": "2192640",
    "end": "2198579"
  },
  {
    "text": "of a sequence for approximations so I could take a sequence constructed by any means and just take the first",
    "start": "2198579",
    "end": "2205599"
  },
  {
    "text": "value that is within Epsilon of its predecessor and then I could use that in many",
    "start": "2205599",
    "end": "2211359"
  },
  {
    "text": "numerical algorithms here's a newton-raphson square root for example next is the function that Maps one",
    "start": "2211359",
    "end": "2218079"
  },
  {
    "text": "approximation to the next one so I can just iterate that starting from any value let's take 1.0",
    "start": "2218079",
    "end": "2225460"
  },
  {
    "text": "and this gives me potentially infinitely many approximations to the square root",
    "start": "2225460",
    "end": "2231160"
  },
  {
    "text": "but I'm not going to evaluate them all I'll just take the limit which means I keep going until I find something that's",
    "start": "2231160",
    "end": "2236260"
  },
  {
    "text": "sufficiently accurate here's another example this computes the",
    "start": "2236260",
    "end": "2242079"
  },
  {
    "text": "derivative of the function so to compute a numerical derivative of a function you compute its slope",
    "start": "2242079",
    "end": "2248859"
  },
  {
    "text": "at a point x between a point x and a neighboring Point X plus h and the smaller H is the more accurate",
    "start": "2248859",
    "end": "2255820"
  },
  {
    "text": "the slope will be the more closer it is to the actual derivative so this slope function computes that",
    "start": "2255820",
    "end": "2261339"
  },
  {
    "text": "slope and now to compute the derivative I can just compute a decreasing sequence of",
    "start": "2261339",
    "end": "2267820"
  },
  {
    "text": "H's I've chosen to take one and then half it at each step compute slope with each of these H's and",
    "start": "2267820",
    "end": "2275140"
  },
  {
    "text": "then take the limit and it's the same code for taking the limit and doing the convergence check in",
    "start": "2275140",
    "end": "2281619"
  },
  {
    "text": "both cases even though the approximations are constructed quite differently",
    "start": "2281619",
    "end": "2287400"
  },
  {
    "text": "there's something else you can do here so I explained how you do numerical",
    "start": "2288520",
    "end": "2294099"
  },
  {
    "text": "differentiation and there's this parameter H the smaller H gets the more accurate the result integration is the same",
    "start": "2294099",
    "end": "2300760"
  },
  {
    "text": "you can compute an integral by adding up the area of a lot of rectangles and again the width of each rectangle is a",
    "start": "2300760",
    "end": "2307000"
  },
  {
    "text": "parameter H the smaller you make H the more accurate a result you get so here we've got two ways of",
    "start": "2307000",
    "end": "2313599"
  },
  {
    "text": "constructing sequence of approximations that both depend on an H that is getting smaller",
    "start": "2313599",
    "end": "2318880"
  },
  {
    "text": "so what if that now the interesting thing about numerical methods like this is you can",
    "start": "2318880",
    "end": "2325300"
  },
  {
    "text": "express the result you get in this form the right answer a plus an error term",
    "start": "2325300",
    "end": "2332260"
  },
  {
    "text": "which is some coefficient B times a power of H and then the larger the power of H the more quickly the algorithm",
    "start": "2332260",
    "end": "2339940"
  },
  {
    "text": "converges so now remember that I'm in my sequences",
    "start": "2339940",
    "end": "2345339"
  },
  {
    "text": "of approximation so I'm halving H at each step if I take two successive approximations",
    "start": "2345339",
    "end": "2351579"
  },
  {
    "text": "I've got these two values and I've got two unknowns A and B",
    "start": "2351579",
    "end": "2356859"
  },
  {
    "text": "think back High School maths if I know these two values and there are two unknowns I can solve for the",
    "start": "2356859",
    "end": "2362859"
  },
  {
    "text": "unknowns right how cool is that that means I can take my sequence of approximations",
    "start": "2362859",
    "end": "2369940"
  },
  {
    "text": "and I can just take the first two values and solve and get A and B I don't care about B but a is the right answer",
    "start": "2369940",
    "end": "2378040"
  },
  {
    "text": "all I need is two approximations to get the right answer",
    "start": "2378040",
    "end": "2383380"
  },
  {
    "text": "well okay that sounds like magic it's not quite as magic as that because",
    "start": "2383380",
    "end": "2388480"
  },
  {
    "text": "this a times error term that's itself an approximation so what happens here is that if I take",
    "start": "2388480",
    "end": "2395440"
  },
  {
    "text": "the first two elements I'll get the right answer but if I take the next",
    "start": "2395440",
    "end": "2401079"
  },
  {
    "text": "two elements I'll get a better right answer and so I can take this sequence and",
    "start": "2401079",
    "end": "2407920"
  },
  {
    "text": "construct a whole new sequence of right answers they're more and more accurate right answers",
    "start": "2407920",
    "end": "2413500"
  },
  {
    "text": "but the point is that this sequence converges much faster than this one it's a better numerical method with a higher",
    "start": "2413500",
    "end": "2420820"
  },
  {
    "text": "order error term and I can write a function that does that and once I've got a function that does",
    "start": "2420820",
    "end": "2426760"
  },
  {
    "text": "it I can use it more than once look here's a really fast derivative",
    "start": "2426760",
    "end": "2431920"
  },
  {
    "text": "we start off by just constructing my original approximations as before and there's a first or error term let's get",
    "start": "2431920",
    "end": "2438339"
  },
  {
    "text": "rid of that a second order a return we'll get rid of that too and then take the limit if I want an even faster one I",
    "start": "2438339",
    "end": "2444400"
  },
  {
    "text": "could just improve the sequence again when I was a student I studied by hard",
    "start": "2444400",
    "end": "2449680"
  },
  {
    "text": "work doing manipulations by hand to figure out these kind of faster algorithms and actually all you have to",
    "start": "2449680",
    "end": "2455140"
  },
  {
    "text": "do is call a function so this works even better for integration I really loved it because",
    "start": "2455140",
    "end": "2460720"
  },
  {
    "text": "everything in it is now programmed separately everything's easy to understand the approximations are easy",
    "start": "2460720",
    "end": "2466660"
  },
  {
    "text": "to understand the Improvement is easier to understand the convergence check is easy to understand you just put them",
    "start": "2466660",
    "end": "2472060"
  },
  {
    "text": "together and you get um wonderful coat",
    "start": "2472060",
    "end": "2478900"
  },
  {
    "text": "this was one of the important examples in my paper why functional programming matters",
    "start": "2478900",
    "end": "2484359"
  },
  {
    "text": "so I was I really loved this idea of separating the producer and the consumer where the consumer would demand values",
    "start": "2484359",
    "end": "2490540"
  },
  {
    "text": "and that would drive the producer to produce them and you've seen the idea of using a convergence test and",
    "start": "2490540",
    "end": "2498940"
  },
  {
    "text": "numerical approximations to express numerical algorithms very very simply",
    "start": "2498940",
    "end": "2504460"
  },
  {
    "text": "the paper also talks about a different application where the producer is constructing a search space",
    "start": "2504460",
    "end": "2511720"
  },
  {
    "text": "and the consumer is the search strategy and in the paper I take a games program",
    "start": "2511720",
    "end": "2519060"
  },
  {
    "text": "where the search strategy is the alpha beta heuristic which is quite a good certain strategy for game trees and um",
    "start": "2519060",
    "end": "2525820"
  },
  {
    "text": "because I only had a very small computer the game was noughts and Crosses sorry",
    "start": "2525820",
    "end": "2531220"
  },
  {
    "text": "could do something more exciting nowadays but I was able to build a game program",
    "start": "2531220",
    "end": "2536980"
  },
  {
    "text": "that would play noughts and Crosses optimally um but I didn't need to mix up the search",
    "start": "2536980",
    "end": "2543280"
  },
  {
    "text": "strategy with the code that built the search space they were both separated cleanly and I like that very much I'm",
    "start": "2543280",
    "end": "2550720"
  },
  {
    "text": "not going to show you that in detail I'm going to quickly mention a later paper I wrote the design of a pretty printing",
    "start": "2550720",
    "end": "2556180"
  },
  {
    "text": "Library which uses the same idea so here the producer constructs many",
    "start": "2556180",
    "end": "2562300"
  },
  {
    "text": "ways to lay out a document and the consumer selects the best layout",
    "start": "2562300",
    "end": "2567520"
  },
  {
    "text": "for doing pretty printing what is pretty printing well if you are pretty printing source code for example you will often",
    "start": "2567520",
    "end": "2574180"
  },
  {
    "text": "need to choose between laying out a conditional expression like this horizontally if it fits or if it doesn't",
    "start": "2574180",
    "end": "2579940"
  },
  {
    "text": "laying the same thing out vertically and pretty printers can be used for giving source code a standard format or",
    "start": "2579940",
    "end": "2587200"
  },
  {
    "text": "printing data structures so compilers have many different data structures different languages internally and you",
    "start": "2587200",
    "end": "2593200"
  },
  {
    "text": "want pretty printers for all of them it's a very common programming task if you've written a pretty printer from",
    "start": "2593200",
    "end": "2598480"
  },
  {
    "text": "scratch yourselves you will know just how hard it is to get those suckers right it's very easy to end up with very",
    "start": "2598480",
    "end": "2605560"
  },
  {
    "text": "bad layout as a result so what we need to do we need to choose",
    "start": "2605560",
    "end": "2610960"
  },
  {
    "text": "between horizontal and vertical layouts and often in the vertical layouts we need to insert some indentation",
    "start": "2610960",
    "end": "2616900"
  },
  {
    "text": "but of course we don't want that indentation to appear in the horizontal layer that would be stupid",
    "start": "2616900",
    "end": "2622599"
  },
  {
    "text": "so I defined a collection of combining forms for building",
    "start": "2622599",
    "end": "2628180"
  },
  {
    "text": "a space of possible layouts here's how that example I showed you would look",
    "start": "2628180",
    "end": "2633760"
  },
  {
    "text": "uh it's built by calling sep that chooses between horizontal and vertical layouts of the elements of a list",
    "start": "2633760",
    "end": "2640660"
  },
  {
    "text": "text just converts a string to one of these documents Nest inserts indentation but only in a",
    "start": "2640660",
    "end": "2647260"
  },
  {
    "text": "vertical context so this piece of code can generate either of those forms that you saw in the previous slide",
    "start": "2647260",
    "end": "2655119"
  },
  {
    "text": "and I'd found five or six combining forms for putting these things together how did I know I had the design right",
    "start": "2655119",
    "end": "2662079"
  },
  {
    "text": "I looked at the laws for example indentation is not supposed to appear horizontally right this is",
    "start": "2662079",
    "end": "2668680"
  },
  {
    "text": "horizontal composition so a beside Nest KB is the same as a b",
    "start": "2668680",
    "end": "2673839"
  },
  {
    "text": "is IB or it should be the same but if it's a that's nested of course I",
    "start": "2673839",
    "end": "2680260"
  },
  {
    "text": "that's not in a horizontal context it depends on the context of the whole thing so putting a nested a beside B",
    "start": "2680260",
    "end": "2687280"
  },
  {
    "text": "should be the same as nesting a beside B and so on",
    "start": "2687280",
    "end": "2692680"
  },
  {
    "text": "and I use these laws both to guide the design of the combinators and also in the implementation when you run my",
    "start": "2692680",
    "end": "2698859"
  },
  {
    "text": "library what it's doing internally is applying all of these laws to transform the document you start off with into the",
    "start": "2698859",
    "end": "2704560"
  },
  {
    "text": "layout that you want to print and then you need to choose the best layout as well and I had a little heuristic that",
    "start": "2704560",
    "end": "2710740"
  },
  {
    "text": "first of all tries to choose a layout that stays within the paper width but it turns out that if if your entire",
    "start": "2710740",
    "end": "2717220"
  },
  {
    "text": "code fits on one line and 80 characters that's usually not the prettiest layout and so it also I always used a heuristic",
    "start": "2717220",
    "end": "2724359"
  },
  {
    "text": "that tried to limit the width of each line of text as well",
    "start": "2724359",
    "end": "2729579"
  },
  {
    "text": "so I had a lot of fun to sign this Library it's another of my most read papers and I know it's a good idea because so",
    "start": "2729579",
    "end": "2736900"
  },
  {
    "text": "many other people have improved on it since then and in fact if you look in the libraries that come with most functional",
    "start": "2736900",
    "end": "2743079"
  },
  {
    "text": "programming languages today you'll find a pretty printing library that if you trace back",
    "start": "2743079",
    "end": "2748300"
  },
  {
    "text": "it you can trace back to my paper it started off a whole little sub literature on functional pretty printing",
    "start": "2748300",
    "end": "2756960"
  },
  {
    "text": "so I've also briefly mentioned probably what I'm best known for nowadays and that is Quick Check which I did together",
    "start": "2758859",
    "end": "2764980"
  },
  {
    "text": "with class 2000 um if you haven't seen it what's it do it lets you write properties of your",
    "start": "2764980",
    "end": "2771339"
  },
  {
    "text": "code this is from the outlang version um and there's there are combining forms",
    "start": "2771339",
    "end": "2776859"
  },
  {
    "text": "for constructing properties so this property of the reverse function says for all X's that our list of integers if",
    "start": "2776859",
    "end": "2782560"
  },
  {
    "text": "you reverse X is twice you get the list you started off with",
    "start": "2782560",
    "end": "2787200"
  },
  {
    "text": "and you give that a quick check it generates 100 by default random tests and",
    "start": "2787900",
    "end": "2794200"
  },
  {
    "text": "says everything was okay so the property seems to be true more interesting is when the property is not true for example here's the wrong",
    "start": "2794200",
    "end": "2800980"
  },
  {
    "text": "property that says that the reverse list reverses the identity function well of course it isn't",
    "start": "2800980",
    "end": "2806619"
  },
  {
    "text": "and if you give this to Quick Check it'll find a counter example here's a list that's not its own reversal",
    "start": "2806619",
    "end": "2813040"
  },
  {
    "text": "but as you can see this is far from the simplest failing case you wouldn't want to debug a program given failing cases",
    "start": "2813040",
    "end": "2820000"
  },
  {
    "text": "look like this so the next thing it does is start shrinking that looking systematically for a smaller example",
    "start": "2820000",
    "end": "2826720"
  },
  {
    "text": "and it turns out that the smallest list that isn't its own reversal is the list containing zero and one",
    "start": "2826720",
    "end": "2831940"
  },
  {
    "text": "why is that smallest well if you take the one away zero is its own reversal if you take the",
    "start": "2831940",
    "end": "2838119"
  },
  {
    "text": "zero away one is its own reversal and if you replace that one by a zero zero zero",
    "start": "2838119",
    "end": "2844000"
  },
  {
    "text": "is its own reversal so zero one is the smallest what I want to",
    "start": "2844000",
    "end": "2849880"
  },
  {
    "text": "besides about quick check here",
    "start": "2849880",
    "end": "2853078"
  },
  {
    "text": "the combining forms for properties describe a space of all possible tests",
    "start": "2855339",
    "end": "2860680"
  },
  {
    "text": "and quick check uses a search strategy to find a test that fails the only difference is that here we're",
    "start": "2860680",
    "end": "2867160"
  },
  {
    "text": "first of all using a random search and once we find a counter example A systematic one to find the simplest",
    "start": "2867160",
    "end": "2873700"
  },
  {
    "text": "failing case but it's the same idea look I only have one idea",
    "start": "2873700",
    "end": "2882420"
  },
  {
    "text": "luckily it's a good one so now just to uh for the last part of",
    "start": "2882819",
    "end": "2889359"
  },
  {
    "text": "the talk I want to move to hardware has anybody seen this book",
    "start": "2889359",
    "end": "2894579"
  },
  {
    "text": "oh one but two people this is three people this is Mead and Conway",
    "start": "2894579",
    "end": "2900579"
  },
  {
    "text": "um Introduction to vlsi System so when it came out in 1979 it revolutionized the other side design",
    "start": "2900579",
    "end": "2907720"
  },
  {
    "text": "it changed the LSI design from being about where to put rectangles on Silicon",
    "start": "2907720",
    "end": "2913000"
  },
  {
    "text": "to how to design the algorithms that Hardware would run Mary read this book and she was very",
    "start": "2913000",
    "end": "2919240"
  },
  {
    "text": "inspired by it and she thought wouldn't it be great to have a programming language that let us describe circuits",
    "start": "2919240",
    "end": "2925480"
  },
  {
    "text": "in this way and she realized that bacchus's FP was",
    "start": "2925480",
    "end": "2930880"
  },
  {
    "text": "already quite a good programming language what I showed it to you I drew pictures that looked rather like circuits",
    "start": "2930880",
    "end": "2937300"
  },
  {
    "text": "but what was missing was the notion of clock cycles and thus of lashes clock cycle delays",
    "start": "2937300",
    "end": "2943480"
  },
  {
    "text": "so Mary added a clock cycle delay which I'll draw as a blue box to FP to design a language of her own",
    "start": "2943480",
    "end": "2949780"
  },
  {
    "text": "mufp and that inherited many of the laws and",
    "start": "2949780",
    "end": "2955060"
  },
  {
    "text": "many of the combining forms from bacchus's work and it was good for reasoning about alternative designs",
    "start": "2955060",
    "end": "2960220"
  },
  {
    "text": "because you could use the laws to restructure a circuit here's an example law",
    "start": "2960220",
    "end": "2965700"
  },
  {
    "text": "here's a little orange component here it's getting one input from the right and one from above and as you can",
    "start": "2965700",
    "end": "2972280"
  },
  {
    "text": "see its output is delayed one clock cycle but that's going to produce the same",
    "start": "2972280",
    "end": "2977740"
  },
  {
    "text": "behavior if we don't delay the output but delay the two inputs instead",
    "start": "2977740",
    "end": "2982900"
  },
  {
    "text": "right so this law is called re-timing I think it's clear that these two circuits will behave equivalently",
    "start": "2982900",
    "end": "2988780"
  },
  {
    "text": "okay who cares look at this circuit this is a regular array circuit",
    "start": "2988780",
    "end": "2994780"
  },
  {
    "text": "and it's a bad design why because there is a single combinational",
    "start": "2994780",
    "end": "3001020"
  },
  {
    "text": "path from this input through all the orange boxes to the output and that means that in one clock cycle data has",
    "start": "3001020",
    "end": "3008460"
  },
  {
    "text": "to flow all the way from here to here through a lot of hardware and that in turn means that this circuit",
    "start": "3008460",
    "end": "3016560"
  },
  {
    "text": "will have to be clocked slowly but you can improve it",
    "start": "3016560",
    "end": "3021720"
  },
  {
    "text": "suppose we throw in a block of delay elements okay so far this is not an",
    "start": "3021720",
    "end": "3026880"
  },
  {
    "text": "improvement so far we've taken a slow circuit we've made it even slower because you now have to wait four o'clock Cycles before it even starts",
    "start": "3026880",
    "end": "3033359"
  },
  {
    "text": "producing output but let's try some re-timing look at this box it's two inputs are",
    "start": "3033359",
    "end": "3039660"
  },
  {
    "text": "delayed what do we know we know that we can move that delay to the output",
    "start": "3039660",
    "end": "3044819"
  },
  {
    "text": "now this box has two delayed inputs we can do it again and again and again",
    "start": "3044819",
    "end": "3051300"
  },
  {
    "text": "okay now I'm going to keep this column unchanged but I'm going to do the same things with",
    "start": "3051300",
    "end": "3057420"
  },
  {
    "text": "the remaining three boxes and again",
    "start": "3057420",
    "end": "3064220"
  },
  {
    "text": "and and again and what I have now because I've applied",
    "start": "3064619",
    "end": "3070260"
  },
  {
    "text": "retiming it's a circuit that is guaranteed to be equivalent to the one I showed you before you still have to wait",
    "start": "3070260",
    "end": "3075540"
  },
  {
    "text": "four o'clock Cycles before any help comes out but on the other hand now within in one",
    "start": "3075540",
    "end": "3081900"
  },
  {
    "text": "clock cycle data only has to propagate from here to here and that means you're going to be able",
    "start": "3081900",
    "end": "3087059"
  },
  {
    "text": "to clock this circuit four times as fast so it's a huge Improvement it's an example of a systolic array a mufp was",
    "start": "3087059",
    "end": "3093420"
  },
  {
    "text": "very good at designing these things it even got some users Plessy a group of Plessy began to use it",
    "start": "3093420",
    "end": "3100500"
  },
  {
    "text": "to design a video motion estimation chip that's part of MPEG compression and they wrote a paper about it they",
    "start": "3100500",
    "end": "3106920"
  },
  {
    "text": "said using mufp the array processing element was described in just one line of code and the complete array required",
    "start": "3106920",
    "end": "3113460"
  },
  {
    "text": "four lines of description mufp enabled the effects of adding or moving data latches within the array to",
    "start": "3113460",
    "end": "3119579"
  },
  {
    "text": "be assessed quickly so that was great uses for functional Hardware description",
    "start": "3119579",
    "end": "3126599"
  },
  {
    "text": "what happened next was that Plessy were bought by Siemens and GC and they weren't at all interested in",
    "start": "3126599",
    "end": "3132540"
  },
  {
    "text": "this stuff they probably thought it was too cute for its own good and so that was the end of that",
    "start": "3132540",
    "end": "3138359"
  },
  {
    "text": "temporarily but Mary continued working on it and her",
    "start": "3138359",
    "end": "3143819"
  },
  {
    "text": "research student satnam Singh took this work further satnam realized that it would make sense to combine mufp and",
    "start": "3143819",
    "end": "3150839"
  },
  {
    "text": "functional geometry uh why well mufp was very good at",
    "start": "3150839",
    "end": "3156000"
  },
  {
    "text": "defining the semantics of circuits functional geometry could Define placement",
    "start": "3156000",
    "end": "3161880"
  },
  {
    "text": "and so satnam designed a language called lava that used both to generate Hardware",
    "start": "3161880",
    "end": "3167460"
  },
  {
    "text": "layouts where you could control placement and then after his PhD he went to xilinx",
    "start": "3167460",
    "end": "3173940"
  },
  {
    "text": "where he used lava to generate layouts for their fpgas what difference does it make to control",
    "start": "3173940",
    "end": "3180300"
  },
  {
    "text": "placement well here's an example of a regular circuit four added trees laid out by the zionics tools as you can see",
    "start": "3180300",
    "end": "3187559"
  },
  {
    "text": "it's a dog's breakfast here's what you got from lava where the structure is regular and",
    "start": "3187559",
    "end": "3194460"
  },
  {
    "text": "clearly visible and the difference that makes is a this will perform better but more importantly",
    "start": "3194460",
    "end": "3200220"
  },
  {
    "text": "because it's laid out efficiently it'll fit on the chip and for many problems there were many",
    "start": "3200220",
    "end": "3207480"
  },
  {
    "text": "designers customers who had problems that were just too big to fit and satnam was able to fit them by",
    "start": "3207480",
    "end": "3213480"
  },
  {
    "text": "reprotting them in lava so he had lava as a Haskell library and he would just",
    "start": "3213480",
    "end": "3218880"
  },
  {
    "text": "generate windows binaries and give them designings customers he wouldn't tell them what was in them you know he said here's a generator fuel problem and just",
    "start": "3218880",
    "end": "3226020"
  },
  {
    "text": "don't ask so this was quite successful in practice",
    "start": "3226020",
    "end": "3232380"
  },
  {
    "text": "I want to talk about another famous Hardware incident do you",
    "start": "3232380",
    "end": "3237599"
  },
  {
    "text": "remember this yes so uh here we're taking a number starting with four dividing it by a",
    "start": "3237599",
    "end": "3243900"
  },
  {
    "text": "number starting with three multiplying by the number starting with three again so we should get back this one and subtracting it from the same number of",
    "start": "3243900",
    "end": "3250980"
  },
  {
    "text": "course we should get zero on uh flawed pentiums you've got 256. thank",
    "start": "3250980",
    "end": "3258119"
  },
  {
    "text": "you and Intel in the end they had to replace",
    "start": "3258119",
    "end": "3263839"
  },
  {
    "text": "very many of those pentiums it cost 475 million dollars",
    "start": "3263839",
    "end": "3269280"
  },
  {
    "text": "which was a lot of money even for Intel because they had a lot of Duff pentiums",
    "start": "3269280",
    "end": "3274619"
  },
  {
    "text": "after that so what do they do with them they put them in keyrings and they gave them to their employees I've actually",
    "start": "3274619",
    "end": "3280440"
  },
  {
    "text": "seen one of these and on the back it says bad companies are destroyed by crises",
    "start": "3280440",
    "end": "3285960"
  },
  {
    "text": "good companies survive them great companies are improved by them",
    "start": "3285960",
    "end": "3292020"
  },
  {
    "text": "what was the Improvement they hired this man Carl Sieger a former",
    "start": "3292020",
    "end": "3297660"
  },
  {
    "text": "student at our University who'd learned lazy functional programming at the time and didn't understand what it was for",
    "start": "3297660",
    "end": "3303059"
  },
  {
    "text": "but at Intel he built his own lazy functional language which had hundreds of users",
    "start": "3303059",
    "end": "3308640"
  },
  {
    "text": "within the company and they used that for Designing hardware for writing the specifications for scripting their tools",
    "start": "3308640",
    "end": "3315059"
  },
  {
    "text": "they built fear improvers for proving that circuits were doing the same thing before and after transformation",
    "start": "3315059",
    "end": "3320760"
  },
  {
    "text": "and this was a huge success this is one of Carl sieger's own slides and you can see that everything from the micro",
    "start": "3320760",
    "end": "3326940"
  },
  {
    "text": "architecture at the RTL level down to the actual layout was done using this",
    "start": "3326940",
    "end": "3333240"
  },
  {
    "text": "lazy functional language so why hasn't there been another Pentium bug it's at least partly thanks to",
    "start": "3333240",
    "end": "3339599"
  },
  {
    "text": "functional programming many people don't know that they had a lazy functional language",
    "start": "3339599",
    "end": "3345300"
  },
  {
    "text": "here's something else they did they built search spaces representing",
    "start": "3345300",
    "end": "3350760"
  },
  {
    "text": "for example ways to lay out certain kinds of circuit and selection criteria that could pick the lowest power implementation",
    "start": "3350760",
    "end": "3356760"
  },
  {
    "text": "so again we see the same ideas coming back again and again",
    "start": "3356760",
    "end": "3361940"
  },
  {
    "text": "I want to show you one more thing because it's really cool blue Speck have you heard of that",
    "start": "3362099",
    "end": "3367559"
  },
  {
    "text": "it's functional programming for Hardware what it it's the product of um",
    "start": "3367559",
    "end": "3373619"
  },
  {
    "text": "arvind at MIT and one of his students and what it",
    "start": "3373619",
    "end": "3379440"
  },
  {
    "text": "gives you is a haskell-like language for the architecture of your circuit together with some very clever",
    "start": "3379440",
    "end": "3385260"
  },
  {
    "text": "Atomic transition rules for doing the actual higher remodeling from which the compiler can extract lots and lots of",
    "start": "3385260",
    "end": "3390599"
  },
  {
    "text": "parallelism so it's a very high level language for expressing Hardware and just like high functional",
    "start": "3390599",
    "end": "3397680"
  },
  {
    "text": "programming in other contexts that lets designers explore better algorithms make architectural changes easily and get",
    "start": "3397680",
    "end": "3405000"
  },
  {
    "text": "very good performance as a result it's a very nice paper about this by uh nikhil which as a reference to there so this",
    "start": "3405000",
    "end": "3412200"
  },
  {
    "text": "lets you basically take Haskell programs and put them on Hardware which Haskell program would you like to",
    "start": "3412200",
    "end": "3417780"
  },
  {
    "text": "put on Hardware if you could guess which high school program I would like to put on Hardware if I could",
    "start": "3417780",
    "end": "3424520"
  },
  {
    "text": "Quick Check of course and that's been done it's called blue",
    "start": "3425880",
    "end": "3431160"
  },
  {
    "text": "check done by Matthew Naylor and Moira in Cambridge so they've got their version",
    "start": "3431160",
    "end": "3436800"
  },
  {
    "text": "of Quick Check in bluespec you can synthesize it and put it on an fpga and",
    "start": "3436800",
    "end": "3442980"
  },
  {
    "text": "then it generates and shrinks tests on the fpga and feaga designers they're",
    "start": "3442980",
    "end": "3448859"
  },
  {
    "text": "blown away by this they've never seen anything like it so it's it's becoming a big success",
    "start": "3448859",
    "end": "3454500"
  },
  {
    "text": "I think that's just great fun Okay so we've come on a long journey today from",
    "start": "3454500",
    "end": "3460200"
  },
  {
    "text": "Church numerals all the way down to Quick Check on an fpga",
    "start": "3460200",
    "end": "3466338"
  },
  {
    "text": "but throughout the whole talk we've seen the same ideas coming back again and again",
    "start": "3466740",
    "end": "3471960"
  },
  {
    "text": "the importance of programming with whole values not word at a time combining forms and putting things",
    "start": "3471960",
    "end": "3477900"
  },
  {
    "text": "together that satisfies simple laws to tell us when our design is good and making use where we can of functions",
    "start": "3477900",
    "end": "3484859"
  },
  {
    "text": "as representations I think we would have made Backus proud",
    "start": "3484859",
    "end": "3490680"
  },
  {
    "text": "thank you [Applause]",
    "start": "3490680",
    "end": "3499169"
  }
]