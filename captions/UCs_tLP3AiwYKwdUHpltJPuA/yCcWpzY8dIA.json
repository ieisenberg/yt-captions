[
  {
    "start": "0",
    "end": "30000"
  },
  {
    "text": "(smooth electronic music)",
    "start": "429",
    "end": "3929"
  },
  {
    "text": "- Hello, everybody, thank\nyou very much for coming. Good morning. Hope you are doing well.",
    "start": "10098",
    "end": "15292"
  },
  {
    "text": "I'd like to talk today\nabout conflict resolution in distributed systems, that is if several",
    "start": "16431",
    "end": "21937"
  },
  {
    "text": "people change some data\nindependently of each other, what happens, how do we\nresolve those conflicts",
    "start": "21937",
    "end": "29259"
  },
  {
    "text": "that'll occur. My background is I'm a\nresearcher at the University of Cambridge.",
    "start": "29259",
    "end": "34813"
  },
  {
    "start": "30000",
    "end": "90000"
  },
  {
    "text": "I was previously in industry and a bunch of internet start ups. So I worked at Linkedin\nfor a couple of years,",
    "start": "34813",
    "end": "40344"
  },
  {
    "text": "for example. At the moment, I'm working\non this research product called Trve Data. Spelled T-R-V-E",
    "start": "40344",
    "end": "46532"
  },
  {
    "text": "and what we're trying to do here is to bring end to end encryption to a larger range of applications.",
    "start": "46532",
    "end": "53048"
  },
  {
    "text": "So think something like Google Docs where several people can edit a document at the same time online",
    "start": "53048",
    "end": "58961"
  },
  {
    "text": "but without having to trust Google servers because what we want to do is to be able to put data on\nvarious servers in the cloud",
    "start": "58962",
    "end": "66330"
  },
  {
    "text": "but not have to worry about what happens if they get compromised or so on. So that's kind of the\nbackground of all of this.",
    "start": "66330",
    "end": "74164"
  },
  {
    "text": "I'm not talking about the encryption and the security protocols today, I'm only focusing on one little\npiece of that whole project",
    "start": "74164",
    "end": "81273"
  },
  {
    "text": "which is what happens if\nseveral people edit data at the same time and\nhow do we resolve that.",
    "start": "81273",
    "end": "88543"
  },
  {
    "text": "So I'd like to start with a scenario that will probably be familiar with you, which is you, a little\nblue stick figure here,",
    "start": "88543",
    "end": "95380"
  },
  {
    "start": "90000",
    "end": "420000"
  },
  {
    "text": "are hacking on some code on your computer and at some point you decide\nthat this code is done",
    "start": "95380",
    "end": "101868"
  },
  {
    "text": "and you commit it using your favorite version of control system. I'll just use git as an example here",
    "start": "101869",
    "end": "107349"
  },
  {
    "text": "and so at this point, you'd put the code in the repository and then\nmaybe you push it somewhere",
    "start": "107349",
    "end": "113216"
  },
  {
    "text": "so that other people can\nsee that `code as well. So in the case of Git,\nyou maybe you'll push",
    "start": "113216",
    "end": "118452"
  },
  {
    "text": "it to a repository on Github and this is now the\ncommunication mechanism for people with your team.",
    "start": "118452",
    "end": "125127"
  },
  {
    "text": "So if there's somebody else, say, this little red stick figure who is also hacking on code,",
    "start": "125127",
    "end": "131683"
  },
  {
    "text": "then well you can synchronize up through the central repository. This is all very familiar, this is what we do everyday",
    "start": "131684",
    "end": "137187"
  },
  {
    "text": "and so the little red person here might independently at the same time also be working on the same code base",
    "start": "137187",
    "end": "144099"
  },
  {
    "text": "and also do a commit and I'll, what happens if you\nthis person now fetches from Github, well they'll have to either",
    "start": "144099",
    "end": "151297"
  },
  {
    "text": "do a merge or rebase if\nthat's how your work flow goes or something along those lines. So somehow these changes are going",
    "start": "151297",
    "end": "158283"
  },
  {
    "text": "to have to be combined together and as you've probably experienced, if people change different\nfiles in the same repository,",
    "start": "158283",
    "end": "165748"
  },
  {
    "text": "that's no problem, they will\njust get merged cleanly. If one person changes\nthe beginning of a file",
    "start": "165748",
    "end": "171107"
  },
  {
    "text": "and another person changes\nthe end of the file, that's probably okay because\nthe version control system",
    "start": "171107",
    "end": "176741"
  },
  {
    "text": "will merge them automatically. If people change the same\npart of the same file, then you're going to have to\nresolve the merge conflict",
    "start": "176742",
    "end": "183690"
  },
  {
    "text": "yourself and then we have these tools for doing three way\nmergers for copying patches",
    "start": "183690",
    "end": "188890"
  },
  {
    "text": "from one side to another and figuring out what the results should be. So you've probably have to\nfind with things like this.",
    "start": "188890",
    "end": "194072"
  },
  {
    "text": "This is exactly the kind of\nproblem I'm talking about. But this problem happens not\nonly in software development.",
    "start": "194072",
    "end": "201131"
  },
  {
    "text": "It's a very general purpose problem. So imagine you're a lawyer\nworking in a law firm",
    "start": "201131",
    "end": "207268"
  },
  {
    "text": "and maybe there's a\ncontract being negotiated with, you've got a client on one side",
    "start": "207268",
    "end": "212327"
  },
  {
    "text": "and the other company's\nlaw firm on the other side and everybody is sending these versions",
    "start": "212327",
    "end": "218367"
  },
  {
    "text": "of contracts back and forth and the contracts are probably\nMicrosoft Word documents because that's how lawyers work",
    "start": "218367",
    "end": "223808"
  },
  {
    "text": "and they send these things by email and so you've got one\nperson making changes to these Word documents and then hit save",
    "start": "223808",
    "end": "231819"
  },
  {
    "text": "and then at the same\ntime, maybe somebody else, maybe at the different company is also updating the same document.",
    "start": "231819",
    "end": "238209"
  },
  {
    "text": "Changes it and now you email\nthese changes to each other and so this is actually\nvery much the same data flow",
    "start": "238209",
    "end": "244719"
  },
  {
    "text": "and I actually just\nreused the same diagram and changed the labels. You've got the email as\nthe communication path",
    "start": "244719",
    "end": "251197"
  },
  {
    "text": "and at some point these changes are going to have to be merged together and now before Microsoft Word,",
    "start": "251197",
    "end": "258165"
  },
  {
    "text": "I'm not sure there is even this kind of nice user interface\nfor three way mergers. I know you can compare two documents",
    "start": "258165",
    "end": "263598"
  },
  {
    "text": "but I think what people end up doing is manually copying the changes",
    "start": "263598",
    "end": "269439"
  },
  {
    "text": "from one version of\nthe document to another and so performing this\nmerge really manually.",
    "start": "269439",
    "end": "274499"
  },
  {
    "text": "So that's kind of this\noh crap situation here. So in this case, it's\nkind of best to have like",
    "start": "274499",
    "end": "279934"
  },
  {
    "text": "an informal lock where one person says, okay I'm going to be\nediting the document now. Please don't change it for the next day.",
    "start": "279934",
    "end": "285929"
  },
  {
    "text": "I'll send it to you and\nthen you can edit it. So people try to sequence their updates like this crude manual communication.",
    "start": "285929",
    "end": "293095"
  },
  {
    "text": "What happens in another? Let's look at the third example. Let's look at a to do list. So this is maybe a shared",
    "start": "294098",
    "end": "299621"
  },
  {
    "text": "to do list where me and my wife together have this shopping list\nwhere I can add stuff and she can add stuff\nand then whoever next",
    "start": "299621",
    "end": "306763"
  },
  {
    "text": "goes to the shop can buy those things. So here buying milk is added to the to do list and\nlet's say this to do list",
    "start": "306763",
    "end": "314000"
  },
  {
    "text": "is stored on a central server. Now so thats what allows us to communicate and so I add buy milk to the to do list",
    "start": "314000",
    "end": "320886"
  },
  {
    "text": "and press okay button\nand so it does a request, like maybe an http post request over the network, stores\nit there, it comes back",
    "start": "322365",
    "end": "329927"
  },
  {
    "text": "and says okay that was\nadded to the to do list and at the same time, maybe my wife goes,",
    "start": "329927",
    "end": "335087"
  },
  {
    "text": "oh you need to water the\nplants, so I just remembered. So add stuff to the to do list also does this post to the server",
    "start": "335087",
    "end": "341293"
  },
  {
    "text": "and comes back okay and so in this case,\nactually what has happened is if this central server stores its data",
    "start": "341293",
    "end": "349246"
  },
  {
    "text": "in a data base and it uses\nsomething like transactions. If this is a relational database say, then we actually have\nserialization going on",
    "start": "350758",
    "end": "358700"
  },
  {
    "text": "and that is these updates\nare actually applied in a sequential order, in a serial order.",
    "start": "358700",
    "end": "363935"
  },
  {
    "text": "That's where serializable comes from and database transactions.",
    "start": "363935",
    "end": "368981"
  },
  {
    "text": "Which means they're applied one at a time. So you don't actually have\nthe same concurrency problem as we had with the code editing",
    "start": "368981",
    "end": "375251"
  },
  {
    "text": "and with the Word documents\nbeing sent back and forth. Cause actually, there's one\nprimary copy of the data",
    "start": "375251",
    "end": "381117"
  },
  {
    "text": "and that lives on the server and that's being updated one transaction at a time in sequence.",
    "start": "381118",
    "end": "386265"
  },
  {
    "text": "So in this case, you don't get this conflict resolution problem. So this seems nice but on the other hand",
    "start": "386265",
    "end": "392063"
  },
  {
    "text": "you have a problem which is well, what if I don't have signal\non my mobile phone right now or if the network is interuppted\nfor some other reason",
    "start": "392063",
    "end": "399292"
  },
  {
    "text": "or I can press the button to save and I'll just a spinning,\nspinning wait indicator",
    "start": "399292",
    "end": "405673"
  },
  {
    "text": "and nothing will happen. So here we have this,\nit's kind of obvious, this problem if you don't\nhave internet connection",
    "start": "406901",
    "end": "414261"
  },
  {
    "text": "then you can't reach the central server so you can't store any data. You can't edit the data in anyway. So it doesn't work offline.",
    "start": "414261",
    "end": "420127"
  },
  {
    "start": "420000",
    "end": "571000"
  },
  {
    "text": "So these are the problems here. We get the advantage from a central server that we don't have to worry about",
    "start": "420127",
    "end": "425979"
  },
  {
    "text": "this concurrency and these different edits happening at the same time",
    "start": "425980",
    "end": "431001"
  },
  {
    "text": "and having to merge those together but at the cost of it only works online.",
    "start": "431002",
    "end": "436718"
  },
  {
    "text": "So we now we require constant\nconnectivity to the server. Which is not so great. Especially if you're doing\nthings on mobile devices.",
    "start": "436718",
    "end": "444080"
  },
  {
    "text": "Another problem is that these requests are synchornous, so when\nI press the save button,",
    "start": "444080",
    "end": "451189"
  },
  {
    "text": "I have to wait until I get\nthe okay back from the server and only then I notice it\nis actually being saved.",
    "start": "451190",
    "end": "456606"
  },
  {
    "text": "So until I get the okay back, I don't know whether the network request actually made it through or not.",
    "start": "456606",
    "end": "462820"
  },
  {
    "text": "Maybe if the network is unrealiable. So that also can be a timing problem.",
    "start": "462821",
    "end": "468250"
  },
  {
    "text": "Let's see in the document editing case, say in the case of Google Docs,",
    "start": "468251",
    "end": "473912"
  },
  {
    "text": "you know you can press one letter and then a second later that letter will appear on the screen for another person who's\nediting the same document.",
    "start": "473912",
    "end": "479795"
  },
  {
    "text": "So there the edits of,\nthe units of editing is a single key stroke. Its not even like a commit\nor something like that.",
    "start": "479795",
    "end": "486747"
  },
  {
    "text": "It's just a single letter and so in that case, if\nyou wanted to send that through a central server",
    "start": "486747",
    "end": "492703"
  },
  {
    "text": "than every time you press a letter, you'd have to first\nsend that to the server, wait for it to be saved there,",
    "start": "492703",
    "end": "498786"
  },
  {
    "text": "wait for the server to come back to you, say okay, and then you could display the letter on the screen and so you would have to\nwait that network round trip",
    "start": "498786",
    "end": "506447"
  },
  {
    "text": "for every single change to the document. Which is actually what happens exactly",
    "start": "506447",
    "end": "512070"
  },
  {
    "text": "if you're editing a file over SSH. So if you're logged into a Linux server and you're using Vim or Emax or something",
    "start": "512070",
    "end": "518244"
  },
  {
    "text": "on the server and you type a letter then that edit actually\nlives on the server.",
    "start": "518244",
    "end": "524077"
  },
  {
    "text": "So you've actually got\nthat synchronus round trip. So if you've got a slow\none, reliable network, and using SSH is pretty painful,",
    "start": "524077",
    "end": "530724"
  },
  {
    "text": "as you've probably experienced. Our final problem with putting everything",
    "start": "530724",
    "end": "536277"
  },
  {
    "text": "on a central server is that now there's this single point of failure and people make fun of Github for example, every time Github goes down,",
    "start": "536278",
    "end": "542327"
  },
  {
    "text": "people say, oh we've got\nthis nice decentrilized version control system and what do we do? We put everything back\nin a centralized service.",
    "start": "542327",
    "end": "549185"
  },
  {
    "text": "Isn't that great? So the sync can be disrupted. If you worry about denial\nof surface attacks,",
    "start": "549185",
    "end": "555279"
  },
  {
    "text": "for example, or if you\nworry about blocking, maybe in some countries\nthat don't have such",
    "start": "555279",
    "end": "561342"
  },
  {
    "text": "free internet access, if you're critical of the local regime or\nsomething like that, actually this kind of blockability",
    "start": "561342",
    "end": "567714"
  },
  {
    "text": "is quite a problem. So what we'd like to do is to figure out how to\nnot have these problems",
    "start": "567715",
    "end": "574670"
  },
  {
    "start": "571000",
    "end": "849000"
  },
  {
    "text": "of the single central server but at the same time, not have all of the problems of having",
    "start": "575973",
    "end": "582977"
  },
  {
    "text": "to do the merges by hand. So coming back to the to do list example,",
    "start": "582977",
    "end": "587757"
  },
  {
    "text": "if we think about this having to synchronously having to communicate with a server, that's okay if\nthe server is in the same town",
    "start": "589095",
    "end": "595558"
  },
  {
    "text": "but if the server is on the\nother side of the planet, then this is quite slow because it's simply speed of light",
    "start": "595558",
    "end": "600808"
  },
  {
    "text": "takes a while to go all the way round to the other side of the\nworld and back again. So what if we just put\ndata centers in several",
    "start": "600809",
    "end": "607309"
  },
  {
    "text": "different places? So let's say when the\nblue person adds buy milk",
    "start": "607309",
    "end": "612420"
  },
  {
    "text": "to the to do list, that request just goes to the blue person's local data center, call it data center one\nand get saved there,",
    "start": "612420",
    "end": "619328"
  },
  {
    "text": "and when the red person adds water plants to the to do list, then that goes to the local data center, too.",
    "start": "619328",
    "end": "625284"
  },
  {
    "text": "Those are two different\nlocal data centers. If the people are in different locations, and so now that's okay.",
    "start": "625284",
    "end": "632324"
  },
  {
    "text": "So each person can get the\nresponse from their local data center and now these changes will be",
    "start": "632324",
    "end": "639140"
  },
  {
    "text": "propagated asynchronously and so the speed of light\ngoing all the way around",
    "start": "639140",
    "end": "644447"
  },
  {
    "text": "the planet is still as\nslow as it was before. So it could happen that two\npeople make these changes",
    "start": "644447",
    "end": "649492"
  },
  {
    "text": "without knowing about each other and then you simply don't\nknow which one of these actually came first.",
    "start": "649492",
    "end": "654703"
  },
  {
    "text": "Because you know it's not really defined. Did the blue come first or the red one. From the point of view of data center one,",
    "start": "654703",
    "end": "661058"
  },
  {
    "text": "first the blue one came and\nthen the red one came in but from the point of\nview of data center two",
    "start": "661058",
    "end": "666368"
  },
  {
    "text": "it was first the red\none then the blue one. So if this adding an\nitem to the to do list",
    "start": "666368",
    "end": "672938"
  },
  {
    "text": "means just appending it\nto the end of the list, then which order should\nthese items appear?",
    "start": "672939",
    "end": "678120"
  },
  {
    "text": "Now we certainly have\nto worry about the fact that the data center one might have buying milk first and\nwatering the plants second",
    "start": "678120",
    "end": "685734"
  },
  {
    "text": "and the other data center\nmight have them flipped in the other order. Oh dear. Let's think this further.",
    "start": "685734",
    "end": "691152"
  },
  {
    "text": "Even without two data centers, we can just make it really extreme",
    "start": "691152",
    "end": "696263"
  },
  {
    "text": "and say okay we're not even going to talk to the data center, we're just going to talk to our local storage on the device and I'm going to treat the\nstorage on my mobile phone",
    "start": "696263",
    "end": "703535"
  },
  {
    "text": "as a data center though it's\nthe best data center ever because I can't have a\nnetwork interupption between",
    "start": "703535",
    "end": "708678"
  },
  {
    "text": "me and the storage on my phone. So this communication\nis always going to work. So I can just store something locally",
    "start": "708678",
    "end": "715214"
  },
  {
    "text": "and that will be nice and fast and the red user can\nsimilarly store something locally and then we can just kind of have",
    "start": "715215",
    "end": "721473"
  },
  {
    "text": "some kind of blah blah network stuff to synchronize the changes around and if you think about it,",
    "start": "721473",
    "end": "727360"
  },
  {
    "text": "this is exactly the same as\nthe synchronization process that has to happen with\nthe two data centers,",
    "start": "727361",
    "end": "733641"
  },
  {
    "text": "exchanging data and this is exactly the same synchronization process that happened with the Git commits",
    "start": "733641",
    "end": "739886"
  },
  {
    "text": "being sent via Github or\nwith the Word documents being sent by email. It's all exactly the same, which is you've got some\nchanges which are happening",
    "start": "739886",
    "end": "747839"
  },
  {
    "text": "concurrently, independently\nfrom each other and those changes are being\npropagated asynchronously",
    "start": "747839",
    "end": "754334"
  },
  {
    "text": "and here, of course, now we're back to this problem of conflict. So take the example of adding two items",
    "start": "754334",
    "end": "761103"
  },
  {
    "text": "to the to do list. You can kind of imagine\nthat quite easy to resolve. You just make sure that you somehow",
    "start": "762273",
    "end": "768082"
  },
  {
    "text": "decide on a consistent order. Maybe using some Ids or something or some user Ids.",
    "start": "768082",
    "end": "773106"
  },
  {
    "text": "You can order them arbtrially but what if one item, one change is deleted to do item",
    "start": "773106",
    "end": "781281"
  },
  {
    "text": "and the other actually\nedits that same to do item. So the red one changes buying\nmilk to buying soy milk",
    "start": "781281",
    "end": "790470"
  },
  {
    "text": "and the blue one just\ndeletes the buying milk item and these two changes\nhappen without knowing about",
    "start": "790470",
    "end": "796005"
  },
  {
    "text": "each other, so how do we resolve this? Because if you say that the deletion wins.",
    "start": "796005",
    "end": "801562"
  },
  {
    "text": "So, okay this item was deleted, the to do list item was deleted so that edit to change\nbuy milk to buy soy milk",
    "start": "801562",
    "end": "809050"
  },
  {
    "text": "is just gone because the\nitem that it refers to is no longer there but that means that we've\nforgotten about the fact",
    "start": "809051",
    "end": "816032"
  },
  {
    "text": "that soy milk was added in there and so maybe that's an important fact that we've now lost.",
    "start": "816032",
    "end": "821682"
  },
  {
    "text": "On the other hand, we can do\nit the way other way around. We could say that this\nbuying soy milk wins but when the deletion has been lost",
    "start": "821682",
    "end": "827646"
  },
  {
    "text": "and so maybe the deletion is meaningful. So how do we resolve\nthese kind of conflicts? In general, we have concurrent operations",
    "start": "827646",
    "end": "835073"
  },
  {
    "text": "that happen, concurrent\ndoesn't mean necessarily at the same moment in time. It just means they happen\nwithout knowing about each other",
    "start": "835073",
    "end": "841495"
  },
  {
    "text": "and somehow we need to achieve convergence where everybody agrees on\nthe same data at the end,",
    "start": "841495",
    "end": "847165"
  },
  {
    "text": "and so people talk about\neventual consistency which is kind of the data base term",
    "start": "847165",
    "end": "852284"
  },
  {
    "text": "that's often used for\ndescribing these types of system where you simply, you can\nallow different things",
    "start": "852284",
    "end": "857698"
  },
  {
    "text": "to happen concurrently and you just want to end up in the same state at the end. The problem with the\nterm eventual consistency",
    "start": "857698",
    "end": "864216"
  },
  {
    "text": "is that it's actually very vaguely defined and so people are very\nimprecise when talking about it and I'd like to break it\ndown into three points,",
    "start": "864216",
    "end": "871893"
  },
  {
    "text": "three properties that\nare a bit more precise. So I'm going to firstly assume",
    "start": "871893",
    "end": "877696"
  },
  {
    "text": "eventual delivery and\nthat is we sent messages over the network and we're going to assume",
    "start": "877697",
    "end": "883656"
  },
  {
    "text": "that the network is not\ninteruppted forever. So we're going to assume\nthat after some finite amount",
    "start": "883656",
    "end": "889251"
  },
  {
    "text": "of time, you get a\nnetwork connection again and so if you keep\nretrying then you can get the message through eventually.",
    "start": "889252",
    "end": "897029"
  },
  {
    "text": "You kind of have to make this assumption because if you assume that a device can be offline forever, then it\ncan never come in synch",
    "start": "897029",
    "end": "902692"
  },
  {
    "text": "with the other devices again. Just by definition of offline. So we're just going to assume",
    "start": "902692",
    "end": "908886"
  },
  {
    "text": "that eventually some messages go through but we're not going to\nmake any assumptions about how quick that is. So if I go to Iceland and there's",
    "start": "908887",
    "end": "916229"
  },
  {
    "text": "no mobile signal and I'm hiking somewhere up on the top of a volcano for two weeks, then I\nwon't get any messages",
    "start": "916229",
    "end": "921268"
  },
  {
    "text": "for two weeks and when I get back to Reykjavik, then I\nwill get some messages when I reach an internet connection again.",
    "start": "921268",
    "end": "927468"
  },
  {
    "text": "So that means my message delay\nis two weeks in that case. That's okay, we're just going\nto assume that's alright.",
    "start": "927468",
    "end": "933512"
  },
  {
    "text": "Secondly, the second part\nof eventual consistency is making sure that everybody\nends up in the same state.",
    "start": "933512",
    "end": "940162"
  },
  {
    "text": "That is if we assume\nthat eventually everybody gets all the messages, then if two people",
    "start": "940162",
    "end": "946661"
  },
  {
    "text": "have received the same\nmessages, then they should be in the same state. So that means even if\nthey received the messages",
    "start": "946661",
    "end": "952783"
  },
  {
    "text": "in a different order, they\nshould end up in the same state and finally what we want\nis to not lose data.",
    "start": "952783",
    "end": "959276"
  },
  {
    "text": "Now this, it seems like a\nkind of ridiculous point because of course nobody\nwants to lose data",
    "start": "959276",
    "end": "966765"
  },
  {
    "text": "but it is actually quite\nimportant to make this explicit. So quite a few data\nbase users use this mode",
    "start": "966765",
    "end": "972358"
  },
  {
    "text": "called last writer wins where you say if two\npeople change the data at the same time, we're just going",
    "start": "972358",
    "end": "978448"
  },
  {
    "text": "to pick one of them arbitrally based on the time stamp\nas being the winner and the other ones were\njust going to throw away",
    "start": "978448",
    "end": "983905"
  },
  {
    "text": "and so this is like\nequivalent if you think about the word document example of,",
    "start": "983905",
    "end": "989754"
  },
  {
    "text": "well we've got two people\nediting the Word document and one person emailed\ntheir change to another and the other person is just going to say,",
    "start": "989754",
    "end": "996323"
  },
  {
    "text": "well I made changes myself as well and I'm going to declare\nthat my changes are",
    "start": "996323",
    "end": "1001504"
  },
  {
    "text": "newer than your changes and so I'm just going to\nignore your changes, sorry, and so this is not very friendly to people",
    "start": "1001505",
    "end": "1008381"
  },
  {
    "text": "because changes get lost. So let's require not losing data as well.",
    "start": "1008381",
    "end": "1013325"
  },
  {
    "text": "So this is what I mean\nwith eventual consistency and this is the kind of data structure",
    "start": "1014464",
    "end": "1019790"
  },
  {
    "start": "1017000",
    "end": "1114000"
  },
  {
    "text": "to which we might want to apply it. So I'm going to model this to do list now as a JSON document and\nyou can just imagine",
    "start": "1019790",
    "end": "1027255"
  },
  {
    "text": "it's like a list of to do items which is like each to do item has a title",
    "start": "1027255",
    "end": "1032885"
  },
  {
    "text": "and the flag done,\nwhether it's done or not, true or false and then\nmaybe there's some settings and stuff as well on the side,",
    "start": "1032885",
    "end": "1039383"
  },
  {
    "text": "and so the main data\nstructures that we have here are an ordered list. That is you've got a list of to do items",
    "start": "1039383",
    "end": "1046909"
  },
  {
    "text": "and they have to appear in a certain order and the user specifies this order and also you have maps.",
    "start": "1046909",
    "end": "1053365"
  },
  {
    "text": "So you've got, maybe one adjacent object inside another adjacent\nobject or something like that. Now once we've got these data structures",
    "start": "1053365",
    "end": "1060222"
  },
  {
    "text": "we can then make various changes to them. So as the user interact\nwith the application, they will make changes.",
    "start": "1060222",
    "end": "1066271"
  },
  {
    "text": "For example, they might set\nwatering plants to true. So they say, okay this is now done, I'm going to check the box on my phone",
    "start": "1066271",
    "end": "1072947"
  },
  {
    "text": "and what that does is set this done flag from false to true. So the operation here,\nthe change operation,",
    "start": "1072947",
    "end": "1080057"
  },
  {
    "text": "the edit operation, is assigning a value to a particular field\nin this JSON document. Another thing that might happen",
    "start": "1080057",
    "end": "1087174"
  },
  {
    "text": "is somebody might edit a string. So change milk, change\nbuy milk to buy soy milk. So by inserting a few\nletters into that string,",
    "start": "1087174",
    "end": "1095346"
  },
  {
    "text": "another thing that might, people might do is insert a whole new list item of phone mum between buy milk\nand before watering water",
    "start": "1095346",
    "end": "1103643"
  },
  {
    "text": "and plants. So this is editing the ordered list object to insert a new item.",
    "start": "1103643",
    "end": "1109077"
  },
  {
    "text": "Another thing that people might do is add another key to this map here or they might even delete an entire entry.",
    "start": "1109077",
    "end": "1115340"
  },
  {
    "start": "1114000",
    "end": "1204000"
  },
  {
    "text": "So the top level to do item,\njust delete the entire list. Why not? Maybe you have several lists\nor something like that.",
    "start": "1115340",
    "end": "1121260"
  },
  {
    "text": "So these are the kinds\nof changes that people can make to these documents and what we want to do is\nhave some way of resolving",
    "start": "1121260",
    "end": "1128172"
  },
  {
    "text": "those changes. So that even if people make\nthese changes concurrently to each other, we end up\nwith eventual consistency.",
    "start": "1128172",
    "end": "1135325"
  },
  {
    "text": "So we can model this document as a tree and we can have some data\ntype annotations on it.",
    "start": "1135325",
    "end": "1142393"
  },
  {
    "text": "So say the top level document is a map and inside it we have a\nlist under the key to do",
    "start": "1142393",
    "end": "1147498"
  },
  {
    "text": "and so on. Won't go into too much detail. So this is actually an\nalgorithm that I developed",
    "start": "1147498",
    "end": "1152599"
  },
  {
    "text": "with a colleague and we\nwrote this paper about it a few months ago. So if you're interested in\nthat, you can find it online.",
    "start": "1152599",
    "end": "1159886"
  },
  {
    "text": "It's called a Conflict-Free\nReplicated JSON Datatype. Has anyone here heard of CRDTS before?",
    "start": "1159886",
    "end": "1165859"
  },
  {
    "text": "Okay a few people, cool. So this is an example of a CRDT. If you don't know what\na CRDT is, don't worry. This paper is very theoretical .",
    "start": "1167252",
    "end": "1175277"
  },
  {
    "text": "It looks inside, it\nlooks kind of like this. So I'm not actually going to run through all of the operational semantics today,",
    "start": "1175277",
    "end": "1181546"
  },
  {
    "text": "so don't worry about that. I'm just going to kind give the intuition about how the algorithm works",
    "start": "1181546",
    "end": "1186795"
  },
  {
    "text": "and just show kind of some\nof the curious edge cases that occur there. Some of the stuff that\nwe have to think about",
    "start": "1186795",
    "end": "1193489"
  },
  {
    "text": "when trying to do this. So the hope is that this algorithm would allow people to concurrently edit",
    "start": "1193489",
    "end": "1199948"
  },
  {
    "text": "JSON documents and merge those edits and end up with a sensible\nresult at the end.",
    "start": "1199948",
    "end": "1206736"
  },
  {
    "start": "1204000",
    "end": "1277000"
  },
  {
    "text": "So one example of a document, we saw the to do list example, another one might be\nsimply a text document. So.",
    "start": "1206736",
    "end": "1212461"
  },
  {
    "text": "So a text document\nconsists of the file name, which is just a string.",
    "start": "1216331",
    "end": "1221700"
  },
  {
    "text": "Consists of characters or of the body, of the actual text. So each individual characters. Like the smallest unit you can edit",
    "start": "1222731",
    "end": "1229774"
  },
  {
    "text": "and like maybe there\nmight be additional stuff for formatting, setting fonts and so on,",
    "start": "1229775",
    "end": "1236015"
  },
  {
    "text": "I'm just going to leave all of that out. Another thing that's quite\nuseful is cursor positions. So if you use Google\nDocs, you can see where",
    "start": "1236015",
    "end": "1242151"
  },
  {
    "text": "in the document another\nuser is editing right now. That's quite handy to see\nso that you don't change",
    "start": "1242151",
    "end": "1247979"
  },
  {
    "text": "the same place at the same\ntime while you're online. So you could imagine\nimplementing that as a map",
    "start": "1247979",
    "end": "1253256"
  },
  {
    "text": "from each client has a position. A position is like a\nlocation in the document and so that would allow you to keep track",
    "start": "1253256",
    "end": "1260290"
  },
  {
    "text": "of other people's cursors. So I'll just focus on the\nbody characters for now.",
    "start": "1260290",
    "end": "1265712"
  },
  {
    "text": "So the ordered list of characters is what constitutes the\ncontent of the document. You might wonder, why this is,",
    "start": "1265713",
    "end": "1271500"
  },
  {
    "text": "why this is a list of strings and not a list of characters. So begin footnotes.",
    "start": "1271500",
    "end": "1276641"
  },
  {
    "start": "1277000",
    "end": "1504000"
  },
  {
    "text": "It's a list of strings because in Unicode, if you actually\nrepresent like one character,",
    "start": "1278188",
    "end": "1284632"
  },
  {
    "text": "the smallest editable unit of the document is not necessarily a\nsingle Unicode code point.",
    "start": "1284632",
    "end": "1290481"
  },
  {
    "text": "Because you have things like combining, combining marks, I think\nthey're called for accents,",
    "start": "1290481",
    "end": "1295510"
  },
  {
    "text": "and diacritics and various things or for emoji, I think\nthe skin color annotation",
    "start": "1295510",
    "end": "1300688"
  },
  {
    "text": "is a combining mark and so\nyou end up with a sequence of several Unicode code\npoints that constitutes",
    "start": "1300688",
    "end": "1306927"
  },
  {
    "text": "an character from user points of view. If you're interested in this,\nlook at the Unicode annex number 29.",
    "start": "1306927",
    "end": "1312561"
  },
  {
    "text": "Anyway, end of footnote. This is completely irrelevant. I just wanted to mention that as well.",
    "start": "1312561",
    "end": "1318976"
  },
  {
    "text": "I'll give a little demo of the text editor we implemented because\nits just kind of fun",
    "start": "1318976",
    "end": "1325124"
  },
  {
    "text": "to make this a bit more interactive. So what I have here is\nsomething that doesn't work.",
    "start": "1325124",
    "end": "1331757"
  },
  {
    "text": "Sorry. This is always the thing with demos.",
    "start": "1341463",
    "end": "1345614"
  },
  {
    "text": "Maybe it has to be on the wifi. Okay, let's try again.",
    "start": "1352259",
    "end": "1355985"
  },
  {
    "text": "Okay, good. So. So this is a very basic text editor",
    "start": "1362519",
    "end": "1368376"
  },
  {
    "text": "that we implemented using\nthis data structure, this algorithm that we developed and I've got actually two\nwindows here, left and right,",
    "start": "1368376",
    "end": "1376224"
  },
  {
    "text": "which are both instances\nof this text editor running and I can say hello to\nBerlin and it works.",
    "start": "1376224",
    "end": "1382514"
  },
  {
    "text": "So you can see I can type\nsomething on one side and it appears on the other side and these two editors are\nactually communicating",
    "start": "1386408",
    "end": "1392298"
  },
  {
    "text": "via a network connection. So they are two separate processes that are otherwise don't share anything.",
    "start": "1392298",
    "end": "1397631"
  },
  {
    "text": "So they could easily be\non two separate computers on other sides of the world, no problem and what I can now do is\ncan I kill this server.",
    "start": "1397631",
    "end": "1405672"
  },
  {
    "text": "So they use a web socket\nserver here to communicate and when I kill the server,",
    "start": "1407592",
    "end": "1412289"
  },
  {
    "text": "what I'm simulating is\na network interupption between the two. So now both editors are offline. So this could be because\nactually it's a server outage",
    "start": "1413205",
    "end": "1420158"
  },
  {
    "text": "or just because the clients\nhave lost their internet connection, it doesn't really matter and so I can keep editing offline.",
    "start": "1420158",
    "end": "1426969"
  },
  {
    "text": "So lets say here.",
    "start": "1428727",
    "end": "1430144"
  },
  {
    "text": "So I'll say, Hello everyone at GOTO Berlin and you see it doesn't appear\non the right hand side, because they're offline.",
    "start": "1434521",
    "end": "1440352"
  },
  {
    "text": "So we have these two now and so I'm going to restart the server now and what we want is for\nall of those changes",
    "start": "1443708",
    "end": "1449969"
  },
  {
    "text": "to be preserved. So make sure, look at that\neveryone at is still there and hope you're all doing\nwell is still there.",
    "start": "1449969",
    "end": "1457654"
  },
  {
    "text": "So when I restart the server, the editors in the background keep trying to reconnect to the server automatically",
    "start": "1457655",
    "end": "1464086"
  },
  {
    "text": "and keep retrying in the background and eventually they will mange to connect and resychronize and\nnow you see everyone at",
    "start": "1464087",
    "end": "1470973"
  },
  {
    "text": "has been copied from the left to the right and the hope you're all doing well has been copied from the right to the left",
    "start": "1470973",
    "end": "1476318"
  },
  {
    "text": "and we didn't have any\nlike three way merge user interface for this. Like it just did this automatically.",
    "start": "1476318",
    "end": "1482618"
  },
  {
    "text": "Now, let's have a look at how this algorithm actually works because",
    "start": "1482618",
    "end": "1488987"
  },
  {
    "text": "that's kind of interesting. This is basically the same as\nwhat Google Docs does, right? So, Google Docs is a bit fussy",
    "start": "1488988",
    "end": "1496363"
  },
  {
    "text": "with its offline support but if you force it\ninto actually doing it, it essentially does the same kind of merge",
    "start": "1496363",
    "end": "1503491"
  },
  {
    "text": "and I can run a bit of how the algorithm in Google Docs work.",
    "start": "1503491",
    "end": "1508379"
  },
  {
    "start": "1504000",
    "end": "1819000"
  },
  {
    "text": "So imagine you have a document consisting of the letters H E L and O",
    "start": "1509349",
    "end": "1515263"
  },
  {
    "text": "and you label each letter with the index of what position it is. So 0, 1, 2, 3 and on the left hand side",
    "start": "1515264",
    "end": "1522261"
  },
  {
    "text": "we've got the green editor and on the right hand side,\nwe've got the purple editor and each editor now makes an edit to this.",
    "start": "1522261",
    "end": "1528217"
  },
  {
    "text": "So the left hand side\ninserts a second L character to change it to Hello and the right hand side\ninserts and exclamation mark",
    "start": "1528217",
    "end": "1536092"
  },
  {
    "text": "at the end, making it\nH-E-L-O-exclamation mark and so now we want to\nmerge these two changes",
    "start": "1536093",
    "end": "1543082"
  },
  {
    "text": "that have happened concurrently and so in order to do that, we have the server to,",
    "start": "1543082",
    "end": "1548637"
  },
  {
    "text": "this is, in this case, run by Google and these clients send essentially a dif",
    "start": "1548637",
    "end": "1554753"
  },
  {
    "text": "or like an operation\nrecording what the change, what change has been made by the user",
    "start": "1554753",
    "end": "1560891"
  },
  {
    "text": "and sent that operation over to the server and so the left hand side says insert L at position three.",
    "start": "1560891",
    "end": "1566597"
  },
  {
    "text": "So you see 0,1,2,3,4 so we inserted the L so the O has moved from position three",
    "start": "1566597",
    "end": "1572970"
  },
  {
    "text": "to position four and so we inserted that L there and so this side, we have the\ninserting exclamation mark",
    "start": "1572970",
    "end": "1579304"
  },
  {
    "text": "at the position four and so that describes\nthe change that was made and now server forwards those changes over",
    "start": "1579305",
    "end": "1585853"
  },
  {
    "text": "to the other client and\nso the green change, inserting the L gets forward\nby the server over here.",
    "start": "1585853",
    "end": "1592430"
  },
  {
    "text": "Insert L at position three, position three is the right position here. So you end up with Hello exclamation mark.",
    "start": "1592430",
    "end": "1598765"
  },
  {
    "text": "Which is what we wanted. However, if you think about what happens in the other direction.",
    "start": "1598765",
    "end": "1604715"
  },
  {
    "text": "So this insert exclamation\nmark at position four, if we simply send that through unchanged, what we will get is\nHell exclamation mark O",
    "start": "1604715",
    "end": "1613203"
  },
  {
    "text": "because over here, we\ninserted the letter L",
    "start": "1613203",
    "end": "1616786"
  },
  {
    "text": "at position three so the O moved along from three to four. So really we would need to change that",
    "start": "1619429",
    "end": "1625294"
  },
  {
    "text": "to insert exclamation\nmark at position five and only then we would\nget the right outcome",
    "start": "1625295",
    "end": "1630517"
  },
  {
    "text": "of having Hello exclamation mark and so what has to happen here is that",
    "start": "1630517",
    "end": "1636236"
  },
  {
    "text": "this position four needs to\nbe changed to position five because there was concurrently an insert",
    "start": "1636236",
    "end": "1641635"
  },
  {
    "text": "at position three. So the server has to keep track of all of these things\ngoing on simultaneously",
    "start": "1641635",
    "end": "1648044"
  },
  {
    "text": "and it has to transform the messages, rewriting this three to four. Some of the transformation\nhappens on the client as well",
    "start": "1648044",
    "end": "1654468"
  },
  {
    "text": "but this algorithm does actually depend on the server to do some work as well and that works. So this algorithm is called\noperational transformation",
    "start": "1654468",
    "end": "1661458"
  },
  {
    "text": "and it's been around for quite awhile. So it was first discussed\nin the academic literature back in the 1980s.",
    "start": "1661458",
    "end": "1667507"
  },
  {
    "text": "Although the first paper that presented this algorithm was actually incorrect and they said so in the paper.",
    "start": "1668959",
    "end": "1674517"
  },
  {
    "text": "They said, heres a case in\nwhich our algorithm fails. Can someone help us fix it please? And then several people,\nresearchers came along",
    "start": "1674517",
    "end": "1681285"
  },
  {
    "text": "and proposed fixes to it, which worked, and there were several different competing",
    "start": "1681285",
    "end": "1687206"
  },
  {
    "text": "algorithms there. The one that most of the, well done operational\ntransformation based systems",
    "start": "1687206",
    "end": "1692694"
  },
  {
    "text": "are kind of inherit from is called Jupiter from 1995 and that's what like Google Docs",
    "start": "1692694",
    "end": "1698365"
  },
  {
    "text": "and Ethopad is based off and Google Wave which is now Apache Wave.",
    "start": "1698365",
    "end": "1704773"
  },
  {
    "text": "They all use this Jupiter design which is to use a central server that does some of the transformations.",
    "start": "1704774",
    "end": "1710474"
  },
  {
    "text": "Some of the others don't\nuse a central server but instead keep track of some kind of multidimensonal hypercubes",
    "start": "1710474",
    "end": "1716194"
  },
  {
    "text": "of all of the edits\nhappening simultaneously. They start requiring\nquite a lot of memory, some of those algorithms.",
    "start": "1716194",
    "end": "1721740"
  },
  {
    "text": "Which is why they're not\nused as often in practice and so this kind of works\nfine for Google's purposes",
    "start": "1721740",
    "end": "1728737"
  },
  {
    "text": "but remember what we wanted is to be able to work within enter and encryption and so in that case we can't have a server",
    "start": "1728737",
    "end": "1734946"
  },
  {
    "text": "transforming our messages because the server would then have to see the content of the messages and we want what we want is,",
    "start": "1734947",
    "end": "1741070"
  },
  {
    "text": "well we want to avoid one central server because that's a single point of failure and we want to avoid that\nserver seeing the content",
    "start": "1741070",
    "end": "1747903"
  },
  {
    "text": "of our messages. So we want to be able to\njust forward the messages and this is where CRDT's come in.",
    "start": "1747904",
    "end": "1753410"
  },
  {
    "text": "So CRDT stands for communative, no sorry, conflict free\nreplicated data types",
    "start": "1753410",
    "end": "1760449"
  },
  {
    "text": "which is a bit of a mouthful which is people just say CRDTS and essentially this is a\nfamily of data structures",
    "start": "1760449",
    "end": "1766910"
  },
  {
    "text": "where several nodes\ncan concurrently change the data and they could\nautomatically merge",
    "start": "1766910",
    "end": "1772417"
  },
  {
    "text": "and so they've got, as\npart of the definition of the data structure,\nthey've got merge functions",
    "start": "1772417",
    "end": "1778229"
  },
  {
    "text": "or functions which allow\nyou to apply operations in a different order\nand still get the same outcome at the end and if we want",
    "start": "1778229",
    "end": "1786367"
  },
  {
    "text": "to model something like a text document like what I had in our editor example,",
    "start": "1786367",
    "end": "1791663"
  },
  {
    "text": "in that case we have an\nordered list of characters and so the data type we want here",
    "start": "1791663",
    "end": "1798164"
  },
  {
    "text": "is an ordered list and several different algorithms were, have been\nproposed to that (mumbles),",
    "start": "1798164",
    "end": "1803669"
  },
  {
    "text": "more recent about in the last 10 years these things have come up and the one that I'll describe now",
    "start": "1803669",
    "end": "1809588"
  },
  {
    "text": "and that our text editor has based off is called RGA, replicated growable array. Which came out of a Korean\nresearch group in 2011.",
    "start": "1809588",
    "end": "1817911"
  },
  {
    "text": "So let me show you how this one works, in a nutshell. We start off with the\nsame example document",
    "start": "1818925",
    "end": "1825542"
  },
  {
    "start": "1819000",
    "end": "2051000"
  },
  {
    "text": "which is H-E-L-O but now instead of giving each letter just an index, 0,1,2,3",
    "start": "1825542",
    "end": "1832573"
  },
  {
    "text": "I'm going to give each\na unique identifier. Each letter has a unique identifier which might be just 0a, 1a, 2a, 3a",
    "start": "1832573",
    "end": "1839198"
  },
  {
    "text": "and we now have the same\nedits happen on the left side, we insert the letter L and on the right hand side,\nwe insert the exclamation mark",
    "start": "1840420",
    "end": "1847736"
  },
  {
    "text": "and every time we insert a new letter, we have to make up a new\nidentifier for that letter",
    "start": "1847736",
    "end": "1853507"
  },
  {
    "text": "and we're going to have a little rule for how we create new identifiers. So we have, they have\nto be globally unique",
    "start": "1853507",
    "end": "1860764"
  },
  {
    "text": "and they also have the\ncertain ordering property and so we're going to\nconstruct them as follows.",
    "start": "1860764",
    "end": "1866596"
  },
  {
    "text": "Each identifier is a number and a letter and for the number, we chose one greater",
    "start": "1866596",
    "end": "1873066"
  },
  {
    "text": "than the highest number we\nhave so far in the document and so the document so far\ncontains 0 to three as numbers",
    "start": "1873066",
    "end": "1878700"
  },
  {
    "text": "so the next number we're\ngoing to pick is four and then we call the\nleft hand one is node A,",
    "start": "1878700",
    "end": "1884173"
  },
  {
    "text": "the right hand one is Node B and so that will be the letter that we use for the identifier and so if we assume",
    "start": "1884173",
    "end": "1889431"
  },
  {
    "text": "that the names of the nodes are unique. So there's no other node\ncalled A, there's only one node",
    "start": "1889431",
    "end": "1895086"
  },
  {
    "text": "called A and the, furthermore we assume that these numbers are generated by taking",
    "start": "1895086",
    "end": "1901035"
  },
  {
    "text": "one plus the highest we have. So the numbers per node\nwill always be unique. So that means we generate\n4a on the left hand side",
    "start": "1901035",
    "end": "1908631"
  },
  {
    "text": "and 4b on the right hand side. So it's the same four\nbecause they're both in the same starting position but they\nhave two different node Ids",
    "start": "1908631",
    "end": "1917199"
  },
  {
    "text": "so we get two different identifiers and so that works and now we can send\nthese things via server",
    "start": "1917199",
    "end": "1924133"
  },
  {
    "text": "or it doesn't even have to be a server that goes via P2P network or\nanything else you like as well. So I'll just use a server\nhere for simplicity",
    "start": "1924134",
    "end": "1932448"
  },
  {
    "text": "and instead of inserting\nat the particular position, we're now going to say insert L and we're going to say the\nidea of the new letter,",
    "start": "1932448",
    "end": "1940308"
  },
  {
    "text": "which is 4a and we're going to say where to insert it by\nsaying after position 2a and so 2a is the first L and so the new L",
    "start": "1940308",
    "end": "1948132"
  },
  {
    "text": "with 4a get's inserted after 2a and on the other side, we\ninsert the exclamation mark after 4, after 3a.",
    "start": "1949523",
    "end": "1955532"
  },
  {
    "text": "3a is the letter O and so inserting the exclamation mark\nwith ID for b after 3a",
    "start": "1955532",
    "end": "1962450"
  },
  {
    "text": "means put the exclamation mark after the O and so, we can now forward these messages. So insert L with 4a after 2a.",
    "start": "1962450",
    "end": "1969747"
  },
  {
    "text": "2a here still means the first L, so it's going to put the\nsecond L in the right place and give it ID 4a",
    "start": "1969747",
    "end": "1976246"
  },
  {
    "text": "and on the other side,\nwe can take this message and apply that. Insert exclamation mark after 3a.",
    "start": "1976246",
    "end": "1982901"
  },
  {
    "text": "3a is still the letter O even though we inserted\nthe letter L before it. It hasn't changed the fact that the ID",
    "start": "1982901",
    "end": "1990319"
  },
  {
    "text": "of the letter O is still 3a and so we can put the exclamation mark with 4b after the letter O,",
    "start": "1990319",
    "end": "1996200"
  },
  {
    "text": "after 3a and so we end\nup with the same document in both places which is very nice.",
    "start": "1996200",
    "end": "2001722"
  },
  {
    "text": "We can now just have some\nkind of network between these two. It doesn't have to transform\nthe messages in anyway,",
    "start": "2001723",
    "end": "2007284"
  },
  {
    "text": "it just needs to make\nsure it keeps retrying and eventually the messages get through. That's all we need here.",
    "start": "2007284",
    "end": "2012435"
  },
  {
    "text": "We can encrypt them\nand it's all very nice. Now there's still a problem\nwith this algorithm,",
    "start": "2012436",
    "end": "2017558"
  },
  {
    "text": "which I wonder if anyone can spot? Yes? Deletion is one thing.",
    "start": "2017558",
    "end": "2023419"
  },
  {
    "text": "Yes I, deletion is actually quite easy. So what we do for deletion\nis just to set a flag for every ID and say that if it's deleted",
    "start": "2023419",
    "end": "2030676"
  },
  {
    "text": "then the ID actually remains\nthere, secretly hidden, but we're just going to say\nokay, this O is gone now,",
    "start": "2030676",
    "end": "2037397"
  },
  {
    "text": "so don't show it in the user interface. That's called a tombstone. There's not.",
    "start": "2037397",
    "end": "2043164"
  },
  {
    "text": "Same position, exactly. So what if two people\ninsert at the same position?",
    "start": "2043164",
    "end": "2049157"
  },
  {
    "start": "2051000",
    "end": "2285000"
  },
  {
    "text": "So let's have a simpler\nexample document here. A,b,c, with Ids 1a, 2a, 3a,",
    "start": "2053016",
    "end": "2057621"
  },
  {
    "text": "and now let's say X\nand Y get inserted here between A and B. So the left hand inserts X and Y,",
    "start": "2059201",
    "end": "2066578"
  },
  {
    "text": "gives them two new Ids\naccording to the rules that I specified earlier. So 4a and 5a and and so what that means\nhere is insert X after 1a,",
    "start": "2066579",
    "end": "2075630"
  },
  {
    "text": "insert Y after 4a and on the other side, on the right hand side,\nI'm going to insert P and Q",
    "start": "2078746",
    "end": "2084858"
  },
  {
    "text": "and we'll have the same\nrule again for assigning Ids so they'll get 4b and 5b as their Ids",
    "start": "2084859",
    "end": "2092025"
  },
  {
    "text": "and they also appear between A and B and now we need to make sure\nthat all of these letters",
    "start": "2092026",
    "end": "2098687"
  },
  {
    "text": "end up in some kind of consistent order on both nodes afterwards and so lets take those\noperations and apply them",
    "start": "2098687",
    "end": "2103834"
  },
  {
    "text": "to the other side. So insert P with the new Id 4b after 1a.",
    "start": "2103834",
    "end": "2108942"
  },
  {
    "text": "1a is the first letter\nA, so we insert P there and then insert Q with letter,",
    "start": "2108942",
    "end": "2114000"
  },
  {
    "text": "with id 5b after 4b. 4b was the letter Q, which\nwe've already inserted,",
    "start": "2115278",
    "end": "2121064"
  },
  {
    "text": "so we can put the, with the letter P. 4b with the P. So the Q with 5b goes after the 4b",
    "start": "2121064",
    "end": "2129001"
  },
  {
    "text": "so we put A, P, Q, X, Y, B, C.",
    "start": "2129001",
    "end": "2131501"
  },
  {
    "text": "So now, okay that's fine. So far now, we need to make\nsure that on the other side, we're actually going to\nend up with the same thing.",
    "start": "2135460",
    "end": "2144194"
  },
  {
    "text": "So we need to make sure the X ends up here after the P Q but before the B because we put the X here,",
    "start": "2144194",
    "end": "2150313"
  },
  {
    "text": "then the two would be inconsistent. So, well how do we do this now? Because the message is\ngoing to be the same.",
    "start": "2150313",
    "end": "2157192"
  },
  {
    "text": "The message is just going to be, insert X with ID 4a after 1a but if we put it straight after 1a,",
    "start": "2157192",
    "end": "2163610"
  },
  {
    "text": "then the X will go here and we have an inconsistency. So I'm gong to introduce a small algorithm",
    "start": "2163611",
    "end": "2169988"
  },
  {
    "text": "which uses these Ids and that is, look at the Id of\nthe incoming operation here.",
    "start": "2169988",
    "end": "2175793"
  },
  {
    "text": "When you're applying an\noperation that came in from a different node,\nin this case that's 4a. So 4a is the incoming operation",
    "start": "2177170",
    "end": "2183800"
  },
  {
    "text": "and we first find the position after which we want to insert. So 1a is here. So we start here, after the A",
    "start": "2183800",
    "end": "2189930"
  },
  {
    "text": "and we look at the next,\nthe ID of the next element in that list.",
    "start": "2189930",
    "end": "2194983"
  },
  {
    "text": "Which is 4b and if that ID here, 4b,",
    "start": "2194983",
    "end": "2197983"
  },
  {
    "text": "is greater than the incoming element, ID 4a, then we're going to skip over it",
    "start": "2200042",
    "end": "2205091"
  },
  {
    "text": "and if it's greater, the next one is greater again, we'll\nagain skip over that and we keep skipping\nuntil we find an element",
    "start": "2206238",
    "end": "2212973"
  },
  {
    "text": "that is less than the ID\nof the incoming operation. So 2a is less than 4a.",
    "start": "2212973",
    "end": "2218602"
  },
  {
    "text": "So in this ordering here,\nwe look at first the number than the letter. So here 4b is greater than 4a\nbecause B is greater than A.",
    "start": "2218602",
    "end": "2225676"
  },
  {
    "text": "5b is definitely greater than 4a because five is greater than four but two is less than four",
    "start": "2225676",
    "end": "2231599"
  },
  {
    "text": "so we know now we have to insert between the 5b and the 2a.",
    "start": "2231599",
    "end": "2235517"
  },
  {
    "text": "Whew and then for the final\noperation is actually easy. So this insert Y with Id 5a after 4a",
    "start": "2236748",
    "end": "2242583"
  },
  {
    "text": "while 4a is here. So 5a just goes after it, that works, and if you're wondering the skipping here",
    "start": "2243664",
    "end": "2249214"
  },
  {
    "text": "doesn't apply on this side because here the 4b is greater than 4a so we inserted this 4b\nhere, we didn't skip over 4a",
    "start": "2249215",
    "end": "2257705"
  },
  {
    "text": "because 4b is greater than 4a and so this actually works and you kind of have to actually prove it",
    "start": "2259334",
    "end": "2266432"
  },
  {
    "text": "mathematically to convince yourself this really works in all cases but we have proved it and\nso we actually believed it",
    "start": "2266432",
    "end": "2271989"
  },
  {
    "text": "and so hoorah, we now have an algorithm which will allow us to make these changes concurrently without any transformation,",
    "start": "2271989",
    "end": "2279492"
  },
  {
    "text": "without any coordination and just allow us to end up in the same place.",
    "start": "2279492",
    "end": "2284987"
  },
  {
    "text": "So let's say our document is Hey guys and we decided that is\nnot gender neutral enough,",
    "start": "2284987",
    "end": "2291117"
  },
  {
    "start": "2285000",
    "end": "2389000"
  },
  {
    "text": "so one person is going to\nchange it to hey everyone and the other person is going to change it to hey folks and what does our\neditor do in this case now?",
    "start": "2291117",
    "end": "2299453"
  },
  {
    "text": "So I described just now how deletion works and so deletion just means\nsetting a flag on these",
    "start": "2299453",
    "end": "2304686"
  },
  {
    "text": "so if two people are concurrently delete the same letter, they\nboth delete the G of guys,",
    "start": "2304686",
    "end": "2309947"
  },
  {
    "text": "well that deleting it once is\nthe same as deleting twice, it doesn't get anymore deleted",
    "start": "2309947",
    "end": "2315001"
  },
  {
    "text": "through being deleted several times. So those letters just get deleted",
    "start": "2315001",
    "end": "2319190"
  },
  {
    "text": "and the insertion stay because insertion doesn't\nreplace another insertion. So as these two merge, what\nyou're going to end up with",
    "start": "2320274",
    "end": "2327633"
  },
  {
    "text": "is the two insertion concatinated, so it will be hey everyone folks",
    "start": "2327633",
    "end": "2333632"
  },
  {
    "text": "or maybe it will be hey folks everyone. So the order of those two is arbitrary, that just depends on coincidence of how",
    "start": "2333632",
    "end": "2340128"
  },
  {
    "text": "the networking happens to work out and you know there's no order that is any,",
    "start": "2340128",
    "end": "2345522"
  },
  {
    "text": "one order isn't any better than the other. The problem is just\nthat what we have here, everyone folks is not an English word",
    "start": "2345522",
    "end": "2351804"
  },
  {
    "text": "and so you kind of end up\nwith junk in the document. Though this is actually what\nGoogle Docs does as well.",
    "start": "2351804",
    "end": "2357041"
  },
  {
    "text": "So at this point I'm willing to just say, okay we'll tell the users that look here, this doesn't pass the spell checker",
    "start": "2357041",
    "end": "2362932"
  },
  {
    "text": "and it maybe can pop up a warning saying hey several people\nedited the document",
    "start": "2362933",
    "end": "2368020"
  },
  {
    "text": "at the same place. Actually Google Docs doesn't\neven do this warning. It just leaves humans\nto spot it by themselves",
    "start": "2368020",
    "end": "2373041"
  },
  {
    "text": "and it seems to work in practice so I think at this point we just say okay, it's good enough.",
    "start": "2373041",
    "end": "2378107"
  },
  {
    "text": "We're not going to try to do a grammatical analyze of the sentences and\ndo the merges automatically so that they obey English grammar",
    "start": "2378107",
    "end": "2384289"
  },
  {
    "text": "because that's just not going to work and people have tried that and it simply doesn't work.",
    "start": "2384289",
    "end": "2389752"
  },
  {
    "start": "2389000",
    "end": "2459000"
  },
  {
    "text": "So we've got this CRDT,\nthis data structure",
    "start": "2389752",
    "end": "2393335"
  },
  {
    "text": "for all the lists which\nseveral people can change at the same time. Described deletion and how that works.",
    "start": "2394911",
    "end": "2400799"
  },
  {
    "text": "There's still a lot of\nopen questions there. So the problem with deletion here is we need to actually\nremember for a long time",
    "start": "2400800",
    "end": "2407992"
  },
  {
    "text": "afterwards where a particular ID is because we use these Ids\nas a position in the list",
    "start": "2407992",
    "end": "2414115"
  },
  {
    "text": "like address like a pointer and so we can't just delete, if something gets deleted\nfrom the document,",
    "start": "2414115",
    "end": "2420197"
  },
  {
    "text": "we can't then just remove\nit and forget about it entirely because then some\noperation would come in and insert after 500 and 3a",
    "start": "2420197",
    "end": "2427086"
  },
  {
    "text": "and we go 500 and 3a,\nsorry that was deleted. I don't know where we put that insertion. So we have to keep those things",
    "start": "2427086",
    "end": "2432608"
  },
  {
    "text": "which are called tombstones. Also haven't talked about how to do undo, like you know, control zed type of undo",
    "start": "2432608",
    "end": "2438566"
  },
  {
    "text": "or how to reorder the\nelements in the list. That's kind of interesting or how to make all of these Ids efficient",
    "start": "2438566",
    "end": "2443871"
  },
  {
    "text": "so it doesn't take too much storage. So still a lot of open questions there. I think the basic\nalgorithm is kind of fine",
    "start": "2443872",
    "end": "2450622"
  },
  {
    "text": "but actually putting it into practice is still going to need a bit of work but I want to talk about some\nother stuff as well, actually",
    "start": "2450622",
    "end": "2456940"
  },
  {
    "text": "so we were talking about\nthese JSON documents earlier and so interesting things happened",
    "start": "2456940",
    "end": "2462691"
  },
  {
    "start": "2459000",
    "end": "2632000"
  },
  {
    "text": "when several people concurrently\nchange JSON documents that don't happen just in\nthe case of a text document.",
    "start": "2462691",
    "end": "2469851"
  },
  {
    "text": "So let's say we've got here, it's a bit of a contrived\nexample I'm afraid, a map of colors and so this is,",
    "start": "2469851",
    "end": "2476214"
  },
  {
    "text": "imagine this is an actual structure. So it's not like curly\nbrace qoutation mark CO etc",
    "start": "2477289",
    "end": "2483181"
  },
  {
    "text": "as a text document but it's\nactually the JSON syntax tree. Described here and so one\nperson inserts a new color,",
    "start": "2484271",
    "end": "2491267"
  },
  {
    "text": "the color red, into this map and so you would then end up with a map containing blue and red",
    "start": "2491268",
    "end": "2497108"
  },
  {
    "text": "and another person concurrently decides actually they want to wipe\nout the entire contents",
    "start": "2497108",
    "end": "2503724"
  },
  {
    "text": "of the map so it sets it to the empty map and then adds green into the map",
    "start": "2503724",
    "end": "2510486"
  },
  {
    "text": "and so how do we now merge\nthese concurrent changes that have happened here?",
    "start": "2510486",
    "end": "2515897"
  },
  {
    "text": "What happens, what's the outcome, what is even the right behavior here?",
    "start": "2515897",
    "end": "2520911"
  },
  {
    "text": "What do we expect? So we can think about it systematically and say, well okay blue,\ndoes it contain blue?",
    "start": "2520911",
    "end": "2526851"
  },
  {
    "text": "Well blue was deleted\non the right hand side by setting the whole map to empty",
    "start": "2526851",
    "end": "2532103"
  },
  {
    "text": "so I guess blue should\nnot be in the final result cause it was deleted and the\nleft hand side didn't touch it.",
    "start": "2532103",
    "end": "2537825"
  },
  {
    "text": "What about red? Red intially didn't exist but\nit was inserted on the right, on the left hand side\nand the right hand side",
    "start": "2537825",
    "end": "2544808"
  },
  {
    "text": "didn't touch red so I guess we need red to be in the final result. What about green? Green was inserted on the right hand side",
    "start": "2544808",
    "end": "2552008"
  },
  {
    "text": "and it was not touched\non the left hand side, so yes we want green to\nbe in the final results. So our final expected outcome\nis to contain red and green",
    "start": "2552008",
    "end": "2559842"
  },
  {
    "text": "but not blue. That seem logical? I guess so.",
    "start": "2559842",
    "end": "2563829"
  },
  {
    "text": "So we can do that and\nour algorithm does this. What this means here is that we have",
    "start": "2564904",
    "end": "2570721"
  },
  {
    "text": "to keep track of what this\nsetting the map to empty means because if you just take this and say,",
    "start": "2570721",
    "end": "2577420"
  },
  {
    "text": "on the left hand client, you first add the red in and\nthen you take that change",
    "start": "2577420",
    "end": "2583880"
  },
  {
    "text": "that came from the right hand side which is setting the map to empty and if you just apply that naively",
    "start": "2583880",
    "end": "2589100"
  },
  {
    "text": "and say you've got an operation that has sent the map to empty, well then you're going to wipe out the red because the red was added concurrently.",
    "start": "2589100",
    "end": "2596749"
  },
  {
    "text": "So we have to somehow remember what the state of the map was at the time when you set it to empty.",
    "start": "2596749",
    "end": "2603583"
  },
  {
    "text": "So we have here, the thing\nis known as a causal context or something like that. In databases like react or example,",
    "start": "2603583",
    "end": "2609539"
  },
  {
    "text": "has anyone used react? They have this data types feature, okay. It works very similair\nto this that you have",
    "start": "2609539",
    "end": "2616977"
  },
  {
    "text": "this little extra bit of\ninformation that you pass around in a HTP header and that,",
    "start": "2616977",
    "end": "2622155"
  },
  {
    "text": "the purpose of that is to keep track of what is the state, what was\nthe state of the document",
    "start": "2622155",
    "end": "2627898"
  },
  {
    "text": "at this time when you\nsaw it so that then later you know what the\nchanges need to apply to.",
    "start": "2627898",
    "end": "2634871"
  },
  {
    "text": "So let's look at a different example. Here we've got again an to do list example and we've got buying milk\nand it is not yet done",
    "start": "2634871",
    "end": "2641936"
  },
  {
    "text": "and so on the left hand\nside an edit happens and it just deletes buy milk from the list",
    "start": "2641936",
    "end": "2647781"
  },
  {
    "text": "because maybe it's been done or maybe we no longer\nneed milk or whatever, it's just removed from the list.",
    "start": "2647781",
    "end": "2653238"
  },
  {
    "text": "On the right hand side,\nsomebody sets done to true. So taps the button to set\nbuying milk done to true.",
    "start": "2653238",
    "end": "2661015"
  },
  {
    "text": "What happens if we try to merge\nthese two different updates?",
    "start": "2661015",
    "end": "2665182"
  },
  {
    "text": "We can apply the same\nlogic as we have just now with the colors with the nested maps. So with the colors what we said is okay,",
    "start": "2666392",
    "end": "2673467"
  },
  {
    "text": "does it contain each\nof the different things depending on who edited what? Okay so the title of buying milk,",
    "start": "2673467",
    "end": "2679286"
  },
  {
    "text": "on the left hand side that was deleted because we deleted the entire to do item. So I guess the title should\nnot be in the result.",
    "start": "2679286",
    "end": "2686082"
  },
  {
    "text": "On the right hand side,\nwe didn't touch the title. So that's got to be deleted. What about done false?",
    "start": "2686082",
    "end": "2691842"
  },
  {
    "text": "Well done false was deleted\non the left hand side and over written on the right\nhand side with done true.",
    "start": "2691842",
    "end": "2699328"
  },
  {
    "text": "So I guess done false is out. What about done true? Done true did not appear\non the left hand side.",
    "start": "2699329",
    "end": "2704692"
  },
  {
    "text": "On the right hand side,\ndone true was added so we want done true to\nbe in the end result.",
    "start": "2704693",
    "end": "2710432"
  },
  {
    "text": "So if we apply exactly\nthe same reasoning logic what we end up with is a to do item that contains the flag\ndone true but no title",
    "start": "2710433",
    "end": "2719128"
  },
  {
    "text": "and this is kind of not what you expect because like we've applied\nexactly the same logic",
    "start": "2720812",
    "end": "2726268"
  },
  {
    "text": "but what we've ended up with\nsomething is that looks weird and it looks weird because\nwe kind of have this implicit",
    "start": "2726269",
    "end": "2732905"
  },
  {
    "text": "scheme idea we expected to do item to always have a title and the done field but this merge here has essentially",
    "start": "2732905",
    "end": "2740335"
  },
  {
    "text": "tampered with our schema. So what do we do here? Maybe we need a schema\nto explicitly say exactly",
    "start": "2740335",
    "end": "2745416"
  },
  {
    "start": "2741000",
    "end": "2861000"
  },
  {
    "text": "what fields something must have but in that case what do we do? So if somebody changes, if\none person changes a field",
    "start": "2745416",
    "end": "2752715"
  },
  {
    "text": "within an object that has a schema and another person deletes\nthat entire object, well do we say the deletion wins?",
    "start": "2752715",
    "end": "2759873"
  },
  {
    "text": "So in that case, any changes to stuff within the deleted item are just going to be lost but we said earlier we\ndon't want to lose data",
    "start": "2760781",
    "end": "2767724"
  },
  {
    "text": "so how do we resolve this? Well maybe we say, actually the, if somebody concurrently changes this",
    "start": "2767724",
    "end": "2774161"
  },
  {
    "text": "and sets done to true then we actually going to\nbring the title back as well. So even though the title\nwas actually deleted",
    "start": "2774162",
    "end": "2779608"
  },
  {
    "text": "on the left hand side,\nwe kind of ressurect this whole deleted item and say, okay it's gonna both\nthe title and one true",
    "start": "2779608",
    "end": "2786935"
  },
  {
    "text": "but then well we forgot about the fact that somebody deleted this item.",
    "start": "2786935",
    "end": "2792692"
  },
  {
    "text": "So it seems like something\nhas got to give here and we don't really know what it is. We could say that maybe\noverwriting something",
    "start": "2792692",
    "end": "2799837"
  },
  {
    "text": "with an empty map should\nnot have the same semantics as deleting it and re adding it again",
    "start": "2799837",
    "end": "2805433"
  },
  {
    "text": "or maybe it should have\nthe same semantics. So I'm afraid this is going to end on a slightly depressing note which is,",
    "start": "2805434",
    "end": "2811663"
  },
  {
    "text": "like we simply don't know how to expose these kind of concurrently\neditable data structures",
    "start": "2811663",
    "end": "2818002"
  },
  {
    "text": "to application in a way that\nis not horrendously computing and so I think that, I\nthink there's a lot of value",
    "start": "2818002",
    "end": "2824921"
  },
  {
    "text": "in having these kind of data structures that you can just merge automatically and not have to worry about",
    "start": "2824921",
    "end": "2830410"
  },
  {
    "text": "writing manual conflict resolution code but at the same time,\nconccurenacy still is hard,",
    "start": "2830410",
    "end": "2836818"
  },
  {
    "text": "even if you abstract away\nthe concurrent communication and everything, you've\nstill got the problem",
    "start": "2836818",
    "end": "2841968"
  },
  {
    "text": "that somehow you can sometimes end up in these merge situations\nwhere's there no one right way",
    "start": "2841968",
    "end": "2848622"
  },
  {
    "text": "of doing it and so if\nany of you have ideas, I'd love to hear them. Otherwise, we're\ncontinuing to work on this",
    "start": "2848623",
    "end": "2855734"
  },
  {
    "text": "and just try different approaches, see what kind of APIs\nmake sense to developers.",
    "start": "2855735",
    "end": "2861241"
  },
  {
    "start": "2861000",
    "end": "2904000"
  },
  {
    "text": "We could go back to the old bad days and say okay, we're\njust going to have this, this oh crap scenario,",
    "start": "2861241",
    "end": "2867213"
  },
  {
    "text": "we're just going to let users resolve all of the edits manually. I don't think that's\nreally friendly to users",
    "start": "2867214",
    "end": "2872661"
  },
  {
    "text": "and so I think that like\nthe popularity of things like Google Docs and indeed like, Meld or things like that\nfor conflict resolution",
    "start": "2872661",
    "end": "2881180"
  },
  {
    "text": "get, shows that I actually, people do need a bit of tooling and help in order to, in order to resolve conflict.",
    "start": "2881180",
    "end": "2888223"
  },
  {
    "text": "We could say, okay well\njust put everything on a central server and\nserialize everything. That's an option too but again,",
    "start": "2888223",
    "end": "2894269"
  },
  {
    "text": "we've got this problem that you require a network communication all the time and if stuff doesn't work offline,",
    "start": "2894269",
    "end": "2899288"
  },
  {
    "text": "which is also a shame. So I think it is worth\nworking on this problem but it is an open problem. If you're interested in\nmore details on this,",
    "start": "2899289",
    "end": "2906575"
  },
  {
    "start": "2904000",
    "end": "2927000"
  },
  {
    "text": "I've put, tweeted the slides already so you can find it there and there are links to all of the papers.",
    "start": "2906575",
    "end": "2912734"
  },
  {
    "text": "Heres the second page\nand here is a third page of references. So our paper is one of those",
    "start": "2912734",
    "end": "2918655"
  },
  {
    "text": "and there are also several others about different CRTDs\nand different operational transformation functions.",
    "start": "2918655",
    "end": "2924125"
  },
  {
    "text": "So that goes into vast amounts of detail. Here is a book that I've been writing",
    "start": "2924125",
    "end": "2930171"
  },
  {
    "start": "2927000",
    "end": "2964000"
  },
  {
    "text": "that I've just sent off to the publishers just two days ago. So you an get an early release\nof this online already.",
    "start": "2930171",
    "end": "2937051"
  },
  {
    "text": "This is, it's not\nspecifically about merging, it's very broad, kind of introduction to the architecture of databases",
    "start": "2937051",
    "end": "2943182"
  },
  {
    "text": "and what do databases\ndo under the hood, also. So if you're interested\nin this sort of thing, I'd love if you could check it out.",
    "start": "2943182",
    "end": "2950099"
  },
  {
    "text": "Maybe give me any feedback if you have any thoughts about it. That would be wonderful. Thank you very much all for coming",
    "start": "2950100",
    "end": "2955456"
  },
  {
    "text": "and I hope you have a great\nrest of the conference. (applause)",
    "start": "2955456",
    "end": "2959904"
  },
  {
    "start": "2964000",
    "end": "3095000"
  },
  {
    "text": "Do we have a minute or two for questions? I'm a bit short of time. We do?",
    "start": "2969440",
    "end": "2975022"
  },
  {
    "text": "Okay, does anyone have any questions or comments or anything?",
    "start": "2975022",
    "end": "2978402"
  },
  {
    "text": "We have some on the app. That's alright. So the question is, \"Apart\nfrom the operational",
    "start": "2980231",
    "end": "2986193"
  },
  {
    "text": "transformation algorithm, is there any algorithm which\nuses weighted operators to decide the last operation?",
    "start": "2986193",
    "end": "2992562"
  },
  {
    "text": "For instance, the delete operation has the lowest impact for that loses. In terms of weight maybe,",
    "start": "2992562",
    "end": "2998051"
  },
  {
    "text": "neural network probabilities\nmaking decision faster?\"",
    "start": "3000380",
    "end": "3004547"
  },
  {
    "text": "So you can used weighting except that doesn't fundamentally\nresolve the problem.",
    "start": "3006363",
    "end": "3013256"
  },
  {
    "text": "Which is that you can end up then in some kind of scenarios\nwhere you've just got an impasse and you've got two things",
    "start": "3013256",
    "end": "3018611"
  },
  {
    "text": "with the same weighting and\none of them has got to win and so you can then arbitraily decide",
    "start": "3018612",
    "end": "3024157"
  },
  {
    "text": "whether one thing should win over another and so that's what I was getting at with kind of these trade offs here of like,",
    "start": "3024157",
    "end": "3031268"
  },
  {
    "text": "you could specify maybe in a schema maybe some kind of semantic annotation saying we want delete to win",
    "start": "3032460",
    "end": "3038390"
  },
  {
    "text": "or we want update to win. The problem there is that\nit's really hard, I think, to communicate that to developers of like",
    "start": "3038391",
    "end": "3044839"
  },
  {
    "text": "what does that actually mean? If you don't have PHD\nin distributed systems, will you still be able to understand what this flag in your\nschema actually means?",
    "start": "3044839",
    "end": "3053237"
  },
  {
    "text": "So I think just making\nstuff comphrensiable in a way that like, somebody can just go",
    "start": "3053237",
    "end": "3058748"
  },
  {
    "text": "and build an app and they don't have to know about all of the internal details of how conflict resolved internally.",
    "start": "3058748",
    "end": "3065907"
  },
  {
    "text": "I think would be very good and so maybe priorities\nis one way of doing that but I'm not sure.",
    "start": "3065907",
    "end": "3071901"
  },
  {
    "text": "The other question just there was, \"How did I make my slides?\" Which is using an iPad,\nI draw them by hand",
    "start": "3071902",
    "end": "3077911"
  },
  {
    "text": "using a iPad app called Paper by a company called 53.",
    "start": "3077911",
    "end": "3082367"
  },
  {
    "text": "- [Man] I think you should wrap up. - Okay, thank you very much for coming. (applause)",
    "start": "3083345",
    "end": "3088783"
  }
]