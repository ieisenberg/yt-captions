[
  {
    "start": "0",
    "end": "75000"
  },
  {
    "text": "[Music]",
    "start": "970",
    "end": "7838"
  },
  {
    "text": "hello go to my name is Malia Villa and I'm speaking to you from Oslo Norway",
    "start": "14480",
    "end": "20560"
  },
  {
    "text": "where I was supposed to board the boat on Wednesday morning unfortunately it",
    "start": "20560",
    "end": "26750"
  },
  {
    "text": "didn't work out so I'm addressing you virtually I'll have important content to share with you",
    "start": "26750",
    "end": "32800"
  },
  {
    "text": "my github account is called object and my twitter name is oho object with",
    "start": "32800",
    "end": "39890"
  },
  {
    "text": "triple o so it might hint about my professional attachment to object and development",
    "start": "39890",
    "end": "45820"
  },
  {
    "text": "still I'm giving a talk we just called alive after Business Objects so stay",
    "start": "45820",
    "end": "51740"
  },
  {
    "text": "with me for the next 40 minutes to hear about my journey my discoveries and",
    "start": "51740",
    "end": "57320"
  },
  {
    "text": "about what I do now if you have a question during the presentation you can",
    "start": "57320",
    "end": "62989"
  },
  {
    "text": "use a go to mobile app to write a question and I would be happy to answer them afterwards and don't forget to rate",
    "start": "62989",
    "end": "71240"
  },
  {
    "text": "the presentation in the end one thing I",
    "start": "71240",
    "end": "76670"
  },
  {
    "start": "75000",
    "end": "125000"
  },
  {
    "text": "want to make clear this not is not about the best programming paradigm actually",
    "start": "76670",
    "end": "83090"
  },
  {
    "text": "the talk is about being pragmatic",
    "start": "83090",
    "end": "88749"
  },
  {
    "text": "Eric sink among his blog posts fuse ago he used expression primitives in pain",
    "start": "88749",
    "end": "95959"
  },
  {
    "text": "and I think it describes pretty much very well transition which many",
    "start": "95959",
    "end": "104689"
  },
  {
    "text": "developers abandon object-oriented world come through the matting and they become",
    "start": "104689",
    "end": "113509"
  },
  {
    "text": "dissatisfied with how things work or them with how efficiently they can",
    "start": "113509",
    "end": "121159"
  },
  {
    "text": "design the system using using object-oriented paradigm but the",
    "start": "121159",
    "end": "127249"
  },
  {
    "start": "125000",
    "end": "144000"
  },
  {
    "text": "reference is our product we work with live TV live radio podcasts TV on demand",
    "start": "127249",
    "end": "133580"
  },
  {
    "text": "radio and among news clips it's a public domain we will not be going into details",
    "start": "133580",
    "end": "140450"
  },
  {
    "text": "of how the main actually we will begin with quite simple thing with a 6",
    "start": "140450",
    "end": "148280"
  },
  {
    "start": "144000",
    "end": "297000"
  },
  {
    "text": "and modeling at point what can be easier than model point couple of years ago I",
    "start": "148280",
    "end": "156580"
  },
  {
    "text": "saw a great presentation by Dimitri even are from jetbrains it's called immutable",
    "start": "156580",
    "end": "161840"
  },
  {
    "text": "collections it book net and I asked him permission to use couple of slides from",
    "start": "161840",
    "end": "167569"
  },
  {
    "text": "his presentation actually it's one of the first slides where he was showing how quickly for the very simple class",
    "start": "167569",
    "end": "178000"
  },
  {
    "text": "developers start making mistakes and this is a plus point which a lot of",
    "start": "178000",
    "end": "185600"
  },
  {
    "text": "developers probably would write something like this in this is Steve sharp in Joey it would it would be",
    "start": "185600",
    "end": "190790"
  },
  {
    "text": "something similar and if you examine this class is implementation you will",
    "start": "190790",
    "end": "197319"
  },
  {
    "text": "find that the completion has pipe lines and four of them are wrong they should",
    "start": "197319",
    "end": "205790"
  },
  {
    "text": "be there and two of them are missing so point as it's written now this",
    "start": "205790",
    "end": "213650"
  },
  {
    "text": "implementation it's not thread safe you can't you can't reuse it in a multi",
    "start": "213650",
    "end": "219260"
  },
  {
    "text": "spreading environment and of course if you want to compare points you should",
    "start": "219260",
    "end": "225650"
  },
  {
    "text": "also implement gasket hashcode and equals so the the correct implementation",
    "start": "225650",
    "end": "232070"
  },
  {
    "text": "will look something like this but think about simplicity of point and how",
    "start": "232070",
    "end": "242290"
  },
  {
    "text": "quickly developers start making mistakes implementing such simple class further",
    "start": "242290",
    "end": "251799"
  },
  {
    "text": "comparison this is data structures as you write them in a shop it's it's a function programming language and there",
    "start": "251799",
    "end": "258470"
  },
  {
    "text": "are several functional languages available different platforms it doesn't need to be everybody but net it's pretty",
    "start": "258470",
    "end": "265070"
  },
  {
    "text": "much a default functional programming language if you want to do that so",
    "start": "265070",
    "end": "272539"
  },
  {
    "text": "that's it that point and you don't need to do remember of all these tricks which",
    "start": "272539",
    "end": "279470"
  },
  {
    "text": "you need to do in c-sharp and yeah so this is how you define point",
    "start": "279470",
    "end": "287389"
  },
  {
    "text": "P we define point Q which can actually inherit some of them what I had but some",
    "start": "287389",
    "end": "295159"
  },
  {
    "text": "of the properties of it and its",
    "start": "295159",
    "end": "301759"
  },
  {
    "text": "consequences not of design mistake I wouldn't say call it that when c-sharp",
    "start": "301759",
    "end": "308599"
  },
  {
    "text": "developers write incorrectly this point class it's like insufficient experience",
    "start": "308599",
    "end": "315590"
  },
  {
    "text": "because actually trying to write a class like the way it looks natural to man and",
    "start": "315590",
    "end": "323689"
  },
  {
    "text": "then but they they must have bigger experience to write the class correctly",
    "start": "323689",
    "end": "330639"
  },
  {
    "text": "and I think there are principal differences between issue sets of befores and opie and functional",
    "start": "330639",
    "end": "337099"
  },
  {
    "text": "programming because it obligatory programming it empowers you it empowers you through a variety of choices",
    "start": "337099",
    "end": "342680"
  },
  {
    "text": "actually can do a lot you can achieve a lot pretty responsibility in function",
    "start": "342680",
    "end": "348409"
  },
  {
    "text": "programming it's safe default choices it prevents you from unconscious mistakes",
    "start": "348409",
    "end": "355310"
  },
  {
    "text": "and it's very important I first thought about how you write stuff using",
    "start": "355310",
    "end": "364430"
  },
  {
    "text": "functional programming very often it's the right decision it's a natural choice",
    "start": "364430",
    "end": "370300"
  },
  {
    "start": "370000",
    "end": "438000"
  },
  {
    "text": "and another important thing to mention is posture concurrency which is given to",
    "start": "370300",
    "end": "377960"
  },
  {
    "text": "you by function programming which is very important for modern application of",
    "start": "377960",
    "end": "383379"
  },
  {
    "text": "this so-called and else law which states",
    "start": "383379",
    "end": "389649"
  },
  {
    "text": "grid numbers which easily tells you if that part of your code can be paralyzed",
    "start": "389649",
    "end": "397129"
  },
  {
    "text": "then how much be from us again you can expect if you increase a number of your",
    "start": "397129",
    "end": "403370"
  },
  {
    "text": "course number of your it's abuse and I guess most workers just unaware how",
    "start": "403370",
    "end": "411680"
  },
  {
    "text": "quickly you reach the maximum of your performance gain if you don't",
    "start": "411680",
    "end": "417690"
  },
  {
    "text": "have realization in your code so if only 40% you have code can be",
    "start": "417690",
    "end": "423690"
  },
  {
    "text": "paralyzed then if you multiply by ten number of your processors then you will",
    "start": "423690",
    "end": "430200"
  },
  {
    "text": "only achieve performance gain of a additional fifty fifty six percent so",
    "start": "430200",
    "end": "436020"
  },
  {
    "text": "that's something to think about but let's have a closer look at business we",
    "start": "436020",
    "end": "445590"
  },
  {
    "start": "438000",
    "end": "507000"
  },
  {
    "text": "still on on a point and this is our original class implementation from the",
    "start": "445590",
    "end": "451980"
  },
  {
    "text": "first slide and actually missing visibility qualifier so it should",
    "start": "451980",
    "end": "459960"
  },
  {
    "text": "something like this you see all these public methods and the question is that why some of the Dangerous Method method",
    "start": "459960",
    "end": "467760"
  },
  {
    "text": "that change point why are they public I don't want them to be public but that's",
    "start": "467760",
    "end": "474480"
  },
  {
    "text": "that's my only option if I want to expose public API I have scenario of doing different",
    "start": "474480",
    "end": "482100"
  },
  {
    "text": "scenarios in most of scenarios I want going to be viewable and not adjustable and I have just some special scenario",
    "start": "482100",
    "end": "488880"
  },
  {
    "text": "where I want it only in this scenario I want my dangerous matters should be",
    "start": "488880",
    "end": "495480"
  },
  {
    "text": "exposed so what should I do inheritance well I don't I don't think I",
    "start": "495480",
    "end": "502110"
  },
  {
    "text": "need to explain that this is bad choice",
    "start": "502110",
    "end": "507139"
  },
  {
    "start": "507000",
    "end": "603000"
  },
  {
    "text": "alternative is to move methods that change the state to separate us like a point manager well that's an option but",
    "start": "508610",
    "end": "518180"
  },
  {
    "text": "essentially means abandoning pointless business objects because this is whatever been telling us early if you",
    "start": "518180",
    "end": "525360"
  },
  {
    "text": "can actually make the object exposing its method and what we do now we will be",
    "start": "525360",
    "end": "531089"
  },
  {
    "text": "removing methods from the prompt from the object so it's no longer business",
    "start": "531089",
    "end": "536100"
  },
  {
    "text": "over with F sharp we use models as",
    "start": "536100",
    "end": "542089"
  },
  {
    "text": "business logic scopes so ever we don't meet remix big",
    "start": "542089",
    "end": "548880"
  },
  {
    "text": "and methods that functions that applies",
    "start": "548880",
    "end": "554340"
  },
  {
    "text": "to this data we try to separate every tag point another module where we put",
    "start": "554340",
    "end": "563180"
  },
  {
    "text": "methods of function if you want to apply and it if you want it to be visible to",
    "start": "563180",
    "end": "570000"
  },
  {
    "text": "everyone that we just call it the same name as a type and then it's available for everyone but if you want to yes you",
    "start": "570000",
    "end": "576630"
  },
  {
    "text": "see this example of code that uses it but if you want to separate it we have a",
    "start": "576630",
    "end": "581790"
  },
  {
    "text": "different module which called point a plate and we put these dangerous methods there and only those find code that use",
    "start": "581790",
    "end": "595260"
  },
  {
    "text": "point updated open point a bit module only only that code and actually use",
    "start": "595260",
    "end": "601620"
  },
  {
    "text": "this dangerous method what are the business objects business objects are",
    "start": "601620",
    "end": "611640"
  },
  {
    "start": "603000",
    "end": "699000"
  },
  {
    "text": "the cornerstone of object-oriented paradigm it's a second",
    "start": "611640",
    "end": "621589"
  },
  {
    "text": "it's a harmony between date and data",
    "start": "621710",
    "end": "627210"
  },
  {
    "text": "structures and meses operations on both data which are attached directly to data",
    "start": "627210",
    "end": "637290"
  },
  {
    "text": "structure themselves but the more I",
    "start": "637290",
    "end": "643400"
  },
  {
    "text": "worked in large projects which used Opie",
    "start": "643400",
    "end": "649140"
  },
  {
    "text": "and and that was a couple of decades the more the relationship between data",
    "start": "649140",
    "end": "660240"
  },
  {
    "text": "structures and operations and them looked like like this like like the",
    "start": "660240",
    "end": "665580"
  },
  {
    "text": "painting by famous Russian painter yeah repin these poor people these are data",
    "start": "665580",
    "end": "675210"
  },
  {
    "text": "structures these are data fields properties and have no personal interest",
    "start": "675210",
    "end": "681330"
  },
  {
    "text": "in the dragging this this ship the boat of",
    "start": "681330",
    "end": "688220"
  },
  {
    "text": "business logic attached to them for some",
    "start": "688220",
    "end": "693240"
  },
  {
    "text": "reasons and I'm trying to explain why I think it's it's wrong why I think it's",
    "start": "693240",
    "end": "698400"
  },
  {
    "text": "fundamentally wrong I'll be using the same domain of similar scenarios which",
    "start": "698400",
    "end": "707220"
  },
  {
    "text": "Scott blushin described in his excellent book the main modeling made functional",
    "start": "707220",
    "end": "713300"
  },
  {
    "text": "Scott showed functional way of",
    "start": "713300",
    "end": "718820"
  },
  {
    "text": "implementing this business functionality I will I want to do the same in in",
    "start": "718880",
    "end": "727200"
  },
  {
    "text": "c-sharp and similar color of course can be written in C++ in Java it's it's photo processing like everybody knows",
    "start": "727200",
    "end": "734160"
  },
  {
    "text": "this domain it's typical workflow you have unrelated order then water gets",
    "start": "734160",
    "end": "741480"
  },
  {
    "text": "validated price attached to it and it all complete Swiss border being shipped",
    "start": "741480",
    "end": "748440"
  },
  {
    "text": "or if the owner is council then its concept with reason attached to the",
    "start": "748440",
    "end": "755100"
  },
  {
    "text": "cancellation details so how do we implement it and as you sharp okay so",
    "start": "755100",
    "end": "762060"
  },
  {
    "start": "758000",
    "end": "881000"
  },
  {
    "text": "this is one possible limitation we have class order with some properties like",
    "start": "762060",
    "end": "768570"
  },
  {
    "text": "total price tracking URL vacillation reason few properties which describes",
    "start": "768570",
    "end": "775290"
  },
  {
    "text": "its state whether it was validated shipped cancel it but so far it's just",
    "start": "775290",
    "end": "782760"
  },
  {
    "text": "just data so where do we attach the operations on an order but of course one",
    "start": "782760",
    "end": "791330"
  },
  {
    "text": "option is to attach it directly to the order because immediately we we get",
    "start": "791330",
    "end": "796680"
  },
  {
    "text": "drawn into discussions whether the order can validate sheep also itself or",
    "start": "796680",
    "end": "805010"
  },
  {
    "text": "actually the derivative of external class and actually this is part of what",
    "start": "805010",
    "end": "811920"
  },
  {
    "text": "actually turns me off a few coriander develop these decisions",
    "start": "811920",
    "end": "819430"
  },
  {
    "text": "are very much opinionated like different developers great developers will come to",
    "start": "819430",
    "end": "828040"
  },
  {
    "text": "the same domain and they will split these methods they will attach them",
    "start": "828040",
    "end": "834630"
  },
  {
    "text": "differently to data structures another option is to",
    "start": "834630",
    "end": "841840"
  },
  {
    "text": "have older and older manager and probably more experienced developers will go will take this path if you have",
    "start": "841840",
    "end": "852250"
  },
  {
    "text": "the data structure and then if all the manager which encapsulate business logic",
    "start": "852250",
    "end": "857640"
  },
  {
    "text": "that's a way to go one of the viable options I just want to emphasize that",
    "start": "857640",
    "end": "864250"
  },
  {
    "text": "actually we abandoning this classical object approach here because we have few",
    "start": "864250",
    "end": "871720"
  },
  {
    "text": "data and we have few business so there is not much of Hope Opie left in this",
    "start": "871720",
    "end": "879760"
  },
  {
    "text": "implementation and this exactly what",
    "start": "879760",
    "end": "885030"
  },
  {
    "start": "881000",
    "end": "970000"
  },
  {
    "text": "Johansson found wrong with object-oriented paradigm and he he",
    "start": "885030",
    "end": "892240"
  },
  {
    "text": "described it as different types of animals and it's fundamentally incorrect",
    "start": "892240",
    "end": "897580"
  },
  {
    "text": "to lock them up in the same cage now I fully agree with this statement so this",
    "start": "897580",
    "end": "907330"
  },
  {
    "text": "is one way to implement like if I came",
    "start": "907330",
    "end": "912670"
  },
  {
    "text": "back to what we brought it drumming now I would probably implement in c-sharp or",
    "start": "912670",
    "end": "920020"
  },
  {
    "text": "Java order processing the basic types",
    "start": "920020",
    "end": "925810"
  },
  {
    "text": "like this very small classes fast for for each processing phase and data",
    "start": "925810",
    "end": "934660"
  },
  {
    "text": "attached only to those types which make",
    "start": "934660",
    "end": "939850"
  },
  {
    "text": "them relevant like total price have nothing to do with unvalidated order tracking URL for shipment have nothing",
    "start": "939850",
    "end": "946960"
  },
  {
    "text": "to do with price order and of course all operations I would",
    "start": "946960",
    "end": "955410"
  },
  {
    "text": "encapsulate in dedicated classes and not just one class not just older manager",
    "start": "955410",
    "end": "962410"
  },
  {
    "text": "single order management but just a separate class for each operation time",
    "start": "962410",
    "end": "970589"
  },
  {
    "start": "970000",
    "end": "1387000"
  },
  {
    "text": "let's have a look at domain modeling in functional languages in HR",
    "start": "971069",
    "end": "978189"
  },
  {
    "text": "already when I showed on previous slide",
    "start": "978189",
    "end": "983319"
  },
  {
    "text": "how implement today order processing in c-sharp it it was similar to how we're",
    "start": "983319",
    "end": "993100"
  },
  {
    "text": "doing it in F sharp so it's very small types and the first types it's it's",
    "start": "993100",
    "end": "1000899"
  },
  {
    "text": "called record types which just data structures no operations which contain",
    "start": "1000899",
    "end": "1006060"
  },
  {
    "text": "exactly the amount of information which is used and that or the processing phase",
    "start": "1006060",
    "end": "1014399"
  },
  {
    "text": "as you can see we have oral tales and the am elated order have justice details",
    "start": "1014399",
    "end": "1020129"
  },
  {
    "text": "then we advance to validated order and it has details and validation time then",
    "start": "1020129",
    "end": "1027600"
  },
  {
    "text": "we price the order and then the price comes we ship the order and then there",
    "start": "1027600",
    "end": "1034949"
  },
  {
    "text": "is a shipping you're tracking URL and if the owner is council then there is a conservation string just those date",
    "start": "1034949",
    "end": "1044579"
  },
  {
    "text": "those properties that I used each our processing phase and all operations they",
    "start": "1044579",
    "end": "1053610"
  },
  {
    "text": "are implemented in a separate module which encapsulate all transformations",
    "start": "1053610",
    "end": "1060929"
  },
  {
    "text": "and this transformation they transform from previous to the next type with star",
    "start": "1060929",
    "end": "1072990"
  },
  {
    "text": "fission and validated order and there is the formation which transforms it into",
    "start": "1072990",
    "end": "1078840"
  },
  {
    "text": "validated order and from validated we can use price Odin or you see this message they only work on",
    "start": "1078840",
    "end": "1086360"
  },
  {
    "text": "compatible types you can apply price order to unrelated order because order",
    "start": "1086360",
    "end": "1092039"
  },
  {
    "text": "must be related first so then we can use it as a building bricks to build a",
    "start": "1092039",
    "end": "1099539"
  },
  {
    "text": "business processing broke floor so you",
    "start": "1099539",
    "end": "1104610"
  },
  {
    "text": "see this is actually easily readable by non-technical people because this",
    "start": "1104610",
    "end": "1110850"
  },
  {
    "text": "explains describes the whole business process here we start with the product",
    "start": "1110850",
    "end": "1116880"
  },
  {
    "text": "which is booked in this example and then there is a pipeline processing pipeline",
    "start": "1116880",
    "end": "1123630"
  },
  {
    "text": "we send it through validation ok validate order then in the it returns",
    "start": "1123630",
    "end": "1132080"
  },
  {
    "text": "validated all the time then we can send it to price order and then we price it",
    "start": "1132080",
    "end": "1137340"
  },
  {
    "text": "and then we ship it it's worth mentioning that this approach this",
    "start": "1137340",
    "end": "1146880"
  },
  {
    "text": "partial informations can be implemented as few functions without side effects",
    "start": "1146880",
    "end": "1152120"
  },
  {
    "text": "mark seaman had a great talk which is called from dependency injection to",
    "start": "1152120",
    "end": "1157230"
  },
  {
    "text": "dependency rejection which shows technical details of how this can be",
    "start": "1157230",
    "end": "1162270"
  },
  {
    "text": "implemented and of course such implementation makes it testable without",
    "start": "1162270",
    "end": "1169220"
  },
  {
    "text": "using databases calls to external services algebraic data types in",
    "start": "1169220",
    "end": "1179789"
  },
  {
    "text": "function languages its script issue that can't be overestimated approximately",
    "start": "1179789",
    "end": "1188490"
  },
  {
    "text": "languages you have both product types and sometimes product types are similar",
    "start": "1188490",
    "end": "1196860"
  },
  {
    "text": "to classes to straps in languages like C",
    "start": "1196860",
    "end": "1202980"
  },
  {
    "text": "sharp and Java so it's a Cartesian projection example from financial",
    "start": "1202980",
    "end": "1209970"
  },
  {
    "text": "domains expiry date of a credit card you have year and month it's it's a",
    "start": "1209970",
    "end": "1215220"
  },
  {
    "text": "prototype and for payment card card number and expiry",
    "start": "1215220",
    "end": "1222690"
  },
  {
    "text": "date it is also it produces a product time but it is in the product type in",
    "start": "1222690",
    "end": "1232010"
  },
  {
    "text": "functional languages and in in a sharp in particular there are support some",
    "start": "1232730",
    "end": "1239250"
  },
  {
    "text": "types either or example is funding source so finite source can be either",
    "start": "1239250",
    "end": "1245970"
  },
  {
    "text": "payment card or bank account and there is no way you can define in",
    "start": "1245970",
    "end": "1251630"
  },
  {
    "text": "traditional object-oriented languages sometimes in such manner you will have",
    "start": "1251630",
    "end": "1257490"
  },
  {
    "text": "to use abstract classes with subclasses or interfaces and it quickly becomes",
    "start": "1257490",
    "end": "1264510"
  },
  {
    "text": "quite heavier also you can typically you",
    "start": "1264510",
    "end": "1270590"
  },
  {
    "text": "use some types in code that uses pattern",
    "start": "1270590",
    "end": "1280169"
  },
  {
    "text": "matching and in pattern matching you can",
    "start": "1280169",
    "end": "1285080"
  },
  {
    "text": "use compiler to help you find out if you you've forgot some case too much",
    "start": "1286340",
    "end": "1293429"
  },
  {
    "text": "for example wherever is source valid method here and it matches a funding",
    "start": "1293429",
    "end": "1298950"
  },
  {
    "text": "source on payment card and bank account and okay back account let's say it's obvious valid but for payment card we",
    "start": "1298950",
    "end": "1305429"
  },
  {
    "text": "check expiry date and if you forget that the case for bank account then compiler",
    "start": "1305429",
    "end": "1312780"
  },
  {
    "text": "will generate a warning and of course if we treat warnings as errors and we usually do then your compilation fails",
    "start": "1312780",
    "end": "1319559"
  },
  {
    "text": "and these interfaces of course you you won't have a chance to to have compiled",
    "start": "1319559",
    "end": "1325980"
  },
  {
    "text": "check on on that you have gone through all possible cases of your sometime I",
    "start": "1325980",
    "end": "1337580"
  },
  {
    "text": "should also mention active patterns in that shop which is quite powerful",
    "start": "1337580",
    "end": "1343429"
  },
  {
    "text": "feature they give you this ability to implement map",
    "start": "1343429",
    "end": "1350550"
  },
  {
    "text": "Ching a pattern matching on steroids match on infinite sets so you define",
    "start": "1350550",
    "end": "1357690"
  },
  {
    "text": "so-called active pattern which for every number it defines property of being even",
    "start": "1357690",
    "end": "1367650"
  },
  {
    "text": "of old and you can match on those properties for for any N which which is",
    "start": "1367650",
    "end": "1374820"
  },
  {
    "text": "integer so you can treat the numbers like they were like just finite number",
    "start": "1374820",
    "end": "1383010"
  },
  {
    "text": "of elements and you can put imagine them like in this example knows a lot was",
    "start": "1383010",
    "end": "1391680"
  },
  {
    "start": "1387000",
    "end": "1544000"
  },
  {
    "text": "said about norms about danger of nulls already and I shouldn't think that I",
    "start": "1391680",
    "end": "1400650"
  },
  {
    "text": "want to trace out a different aspect of handling missing data because developers",
    "start": "1400650",
    "end": "1410450"
  },
  {
    "text": "who transition from object oriented",
    "start": "1410450",
    "end": "1416580"
  },
  {
    "text": "languages like C sharp and Java to function languages like F sharp for",
    "start": "1416580",
    "end": "1422520"
  },
  {
    "text": "example they they say that okay we have news and you don't have in in core F",
    "start": "1422520",
    "end": "1430650"
  },
  {
    "text": "sharp nose we have just options and have to be very explicit about handling",
    "start": "1430650",
    "end": "1435930"
  },
  {
    "text": "missing missing data which makes it impossible just just to forget that this",
    "start": "1435930",
    "end": "1441030"
  },
  {
    "text": "is a new land that it can cause numerous exception you have options so it's they",
    "start": "1441030",
    "end": "1447240"
  },
  {
    "text": "guard you they protect you from from having from heaven knows however options",
    "start": "1447240",
    "end": "1453060"
  },
  {
    "text": "while not being as bad as knows they can",
    "start": "1453060",
    "end": "1458670"
  },
  {
    "text": "also be nasty because they can they",
    "start": "1458670",
    "end": "1466470"
  },
  {
    "text": "still represent missing data and they can corrupt your business logic this is",
    "start": "1466470",
    "end": "1475170"
  },
  {
    "text": "what from yarn Minsky make legal state and presentable and what",
    "start": "1475170",
    "end": "1481950"
  },
  {
    "text": "he is emphasizing is that our code will become much cleaner much easier to",
    "start": "1481950",
    "end": "1489929"
  },
  {
    "text": "maintain if we exclude combination of",
    "start": "1489929",
    "end": "1497730"
  },
  {
    "text": "data that are really illegal that that",
    "start": "1497730",
    "end": "1503639"
  },
  {
    "text": "not correspond to real-world scenario so",
    "start": "1503639",
    "end": "1511860"
  },
  {
    "text": "it will be much less if much less branches in our code the cop will be",
    "start": "1511860",
    "end": "1518490"
  },
  {
    "text": "more tight and the same goes to optional type if we rework our scenarios to",
    "start": "1518490",
    "end": "1526590"
  },
  {
    "text": "exclude optional data wherever possible",
    "start": "1526590",
    "end": "1533000"
  },
  {
    "text": "then that's got to be much cleaner and easier to maintain so where we can where",
    "start": "1533000",
    "end": "1548429"
  },
  {
    "start": "1544000",
    "end": "1738000"
  },
  {
    "text": "we cannot live without option values its domain boundaries because the world",
    "start": "1548429",
    "end": "1554580"
  },
  {
    "text": "isn't perfect and then we we read data from databases where we can be from some services then we have to deal with them",
    "start": "1554580",
    "end": "1561450"
  },
  {
    "text": "but the problem is that we often allow them into our core data structure and",
    "start": "1561450",
    "end": "1567000"
  },
  {
    "text": "they craft our business logic we have to be very critical about allowing this",
    "start": "1567000",
    "end": "1573120"
  },
  {
    "text": "imperfect representation of world to",
    "start": "1573120",
    "end": "1580049"
  },
  {
    "text": "become part of our whole domain so we have to go through a data structure and",
    "start": "1580049",
    "end": "1587820"
  },
  {
    "text": "find out how can we get rid of option B and one way is that if we just split our",
    "start": "1587820",
    "end": "1596610"
  },
  {
    "text": "scenarios if you remember this order processing where we had unrelated or invalidating order and then on",
    "start": "1596610",
    "end": "1605029"
  },
  {
    "text": "validated order there is a additional field which may come like a validation",
    "start": "1605029",
    "end": "1611519"
  },
  {
    "text": "time wherein unvalidated order is not field so it had common order type than",
    "start": "1611519",
    "end": "1618409"
  },
  {
    "text": "if you have it to drag all this optional data from between different scenarios",
    "start": "1618409",
    "end": "1623529"
  },
  {
    "text": "unrelated validated priced shaped while if you have smaller types which respond",
    "start": "1623529",
    "end": "1630919"
  },
  {
    "text": "to different smaller business process phrases then we are unable to keep those",
    "start": "1630919",
    "end": "1638179"
  },
  {
    "text": "data types without optional data sometimes we just have optional data",
    "start": "1638179",
    "end": "1644179"
  },
  {
    "text": "because they may be needed somewhere like a processing pipeline in in the",
    "start": "1644179",
    "end": "1652610"
  },
  {
    "text": "future when we about to finalize now",
    "start": "1652610",
    "end": "1657950"
  },
  {
    "text": "data processing and we have to find a way of to to restructure such data to",
    "start": "1657950",
    "end": "1664249"
  },
  {
    "text": "hide so from data so they not seen in in the steps where they're not used there's",
    "start": "1664249",
    "end": "1671869"
  },
  {
    "text": "a great pop which I can recommend the whole our talk is just about how bad our",
    "start": "1671869",
    "end": "1680360"
  },
  {
    "text": "option ladies but maybe not by reaching by creator of closure the talk was in",
    "start": "1680360",
    "end": "1688210"
  },
  {
    "text": "2018 and so those also goes from rich",
    "start": "1688210",
    "end": "1696740"
  },
  {
    "text": "Hickey where he attacked this may be type which is wishes option in a sharp",
    "start": "1696740",
    "end": "1703490"
  },
  {
    "text": "and trying to show like how bad they are for data processing and on the left side",
    "start": "1703490",
    "end": "1714230"
  },
  {
    "text": "it's a it's a picture from a rich Hickey slides it's the ship's and there's the",
    "start": "1714230",
    "end": "1720649"
  },
  {
    "text": "optional ship there's no there's no maybe sheep but you you have to be very",
    "start": "1720649",
    "end": "1725809"
  },
  {
    "text": "explicit this our your data on the right side it's its record with slots with some optional data and you have some",
    "start": "1725809",
    "end": "1732139"
  },
  {
    "text": "holes and it's harder to write algorithms which have to deal with shows",
    "start": "1732139",
    "end": "1738638"
  },
  {
    "text": "so I went through some differences between",
    "start": "1740860",
    "end": "1746710"
  },
  {
    "text": "object-oriented and functional approach but what if we didn't make a change what",
    "start": "1746710",
    "end": "1755810"
  },
  {
    "text": "if we're still being using c-sharp what would be different today",
    "start": "1755810",
    "end": "1763690"
  },
  {
    "text": "could we make our system in c-sharp absolutely of course we could so how can",
    "start": "1763690",
    "end": "1774380"
  },
  {
    "text": "we describe the gain how how is cry can we describe the advantage of switching",
    "start": "1774380",
    "end": "1781250"
  },
  {
    "text": "to functional programming and if I if I",
    "start": "1781250",
    "end": "1788300"
  },
  {
    "text": "try to explain it just in one slide just in one sentence I would just say that it",
    "start": "1788300",
    "end": "1796100"
  },
  {
    "text": "shortened the cycle from specification to production so this is a value for",
    "start": "1796100",
    "end": "1803780"
  },
  {
    "text": "which is observed by and appreciated by",
    "start": "1803780",
    "end": "1809060"
  },
  {
    "text": "how stakeholders so we became more efficient as developers writing more",
    "start": "1809060",
    "end": "1817880"
  },
  {
    "text": "compact code comparing to c-sharp the",
    "start": "1817880",
    "end": "1823030"
  },
  {
    "text": "code metrics in F sharp well it's it's roughly 50% which is code is more",
    "start": "1823030",
    "end": "1829220"
  },
  {
    "text": "compact and it's not tight code and and",
    "start": "1829220",
    "end": "1834800"
  },
  {
    "text": "it it codes it fails not as often",
    "start": "1834800",
    "end": "1840280"
  },
  {
    "text": "add/edit it used to so yes it we just",
    "start": "1840280",
    "end": "1846230"
  },
  {
    "text": "became more efficient as as development team and if you try to summarize impact",
    "start": "1846230",
    "end": "1855770"
  },
  {
    "text": "of F sharp on PC development cycle again so so what actually makes our us more",
    "start": "1855770",
    "end": "1864860"
  },
  {
    "text": "efficient so some of the important",
    "start": "1864860",
    "end": "1870470"
  },
  {
    "text": "factors it would be on domain modelling is",
    "start": "1870470",
    "end": "1876169"
  },
  {
    "text": "use of algebraic data types so we are",
    "start": "1876169",
    "end": "1881990"
  },
  {
    "text": "quite efficient now in expressing functional requirements and it's it's",
    "start": "1881990",
    "end": "1888679"
  },
  {
    "text": "easy to read and it's easy to maintain and that's a very important factor",
    "start": "1888679",
    "end": "1894710"
  },
  {
    "text": "probably it's worse to be listed as number one when I was switching to",
    "start": "1894710",
    "end": "1902889"
  },
  {
    "text": "f-sharp that one of the reasons was immutability for example but today I",
    "start": "1902889",
    "end": "1910190"
  },
  {
    "text": "would say that domain modeling is probably the most important reason for",
    "start": "1910190",
    "end": "1918070"
  },
  {
    "text": "for my transformation as a developer",
    "start": "1918070",
    "end": "1923110"
  },
  {
    "text": "then separation between data structures",
    "start": "1923110",
    "end": "1930799"
  },
  {
    "text": "and operations and use of small immutable records it's very efficient so",
    "start": "1930799",
    "end": "1938570"
  },
  {
    "text": "we in in c-sharp in Java typically types pluses they are",
    "start": "1938570",
    "end": "1947409"
  },
  {
    "text": "important they know you we store one",
    "start": "1947409",
    "end": "1953259"
  },
  {
    "text": "class per file so we have as many files as we have classes classes are sort of",
    "start": "1953259",
    "end": "1963429"
  },
  {
    "text": "big in a way it's a it's a big thing in object-oriented and in factual",
    "start": "1963429",
    "end": "1970460"
  },
  {
    "text": "programming you know types are cheap to declare and not as we're both as in",
    "start": "1970460",
    "end": "1980440"
  },
  {
    "text": "object-oriented languages so types can be just like a couple of flights and",
    "start": "1980440",
    "end": "1986720"
  },
  {
    "text": "this is your type some just give me a few you know some small record and then we have planes you have these small",
    "start": "1986720",
    "end": "1992809"
  },
  {
    "text": "immutable records and of course we no longer need to keep one type definition",
    "start": "1992809",
    "end": "1998929"
  },
  {
    "text": "profile here we have small file with no twenty definitions it is really very",
    "start": "1998929",
    "end": "2005169"
  },
  {
    "text": "efficient illumination of notes and of course what I was also saying few",
    "start": "2005169",
    "end": "2011080"
  },
  {
    "text": "minutes ago that we try also we strive to eliminate options by defining more",
    "start": "2011080",
    "end": "2020590"
  },
  {
    "text": "tight data structures and we use models",
    "start": "2020590",
    "end": "2028230"
  },
  {
    "text": "to limit scope of business projects so",
    "start": "2028230",
    "end": "2035230"
  },
  {
    "text": "we no longer have this public API defined on public methods attached to",
    "start": "2035230",
    "end": "2040869"
  },
  {
    "text": "beta which is visible to everyone we have small modules which contain just",
    "start": "2040869",
    "end": "2046299"
  },
  {
    "text": "logic that needs to be exposed for for the given scenario and we open this",
    "start": "2046299",
    "end": "2053108"
  },
  {
    "text": "model only in the code that uses this scenario so those are probably most",
    "start": "2053109",
    "end": "2063550"
  },
  {
    "text": "important factors of our efficiency",
    "start": "2063550",
    "end": "2068800"
  },
  {
    "text": "after switching from object oriented programming to programming",
    "start": "2068800",
    "end": "2076408"
  },
  {
    "text": "so this concludes my talk about life of the business objects my github account",
    "start": "2076980",
    "end": "2084970"
  },
  {
    "text": "is still object and probably will always be but I believe I'm now as a developer",
    "start": "2084970",
    "end": "2092429"
  },
  {
    "text": "then I was when I created github account and chose the name for it and I hope",
    "start": "2092429",
    "end": "2104020"
  },
  {
    "text": "that I managed to explain the reasons for the transformation and I hope that",
    "start": "2104020",
    "end": "2114910"
  },
  {
    "text": "these were good reasons and good transformation",
    "start": "2114910",
    "end": "2120599"
  }
]