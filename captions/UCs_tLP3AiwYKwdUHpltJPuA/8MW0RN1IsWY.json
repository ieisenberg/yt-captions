[
  {
    "text": "thank you um good morning so the title of this talk is fpga",
    "start": "6960",
    "end": "13120"
  },
  {
    "text": "microservices ultra low latency with off the-shelf Hardware I'm going to talk a bit about what each of those words means",
    "start": "13120",
    "end": "20320"
  },
  {
    "text": "it's not very often that they get put together in the same sentence I think when I proposed this talk people thought",
    "start": "20320",
    "end": "27560"
  },
  {
    "text": "maybe I was not for real like are these um are these tools too",
    "start": "27560",
    "end": "34600"
  },
  {
    "text": "powerful for the job is this an appropriate use of Technology what what",
    "start": "34600",
    "end": "39719"
  },
  {
    "text": "does this mean right and I think part of it is that people have a lot of um",
    "start": "39719",
    "end": "44879"
  },
  {
    "text": "people don't know what to do and so that's really what I'm going to address today I come from a um from a Trading",
    "start": "44879",
    "end": "53039"
  },
  {
    "text": "Company maybe that's what you think of when you think of a trading floor that's a that's a pit of lots of people",
    "start": "53039",
    "end": "58519"
  },
  {
    "text": "shouting orders at each other in reality it's really more like this nowadays um Traders have the best land",
    "start": "58519",
    "end": "67799"
  },
  {
    "text": "parties and basically um what what I really love about the trading",
    "start": "68600",
    "end": "73759"
  },
  {
    "text": "environment is that there's nothing stopping you using whatever the best",
    "start": "73759",
    "end": "79439"
  },
  {
    "text": "technology you can find is if you can work out how to build",
    "start": "79439",
    "end": "85079"
  },
  {
    "text": "something um and you can get a good strategy going and you can run it then it should fund itself so you don't have",
    "start": "85079",
    "end": "91560"
  },
  {
    "text": "to worry about grants and um customers and clients and things like that in some",
    "start": "91560",
    "end": "96640"
  },
  {
    "text": "sense it's a pretty good driver for um for research and Innovation and when there's things like",
    "start": "96640",
    "end": "104119"
  },
  {
    "text": "um like fpga uh we're in this environment where",
    "start": "104119",
    "end": "110439"
  },
  {
    "text": "you really need to change uh code really really quickly so if someone else comes up with a new strategy or something you",
    "start": "110439",
    "end": "116560"
  },
  {
    "text": "need to be able to react to that and um a and you change what you're doing you",
    "start": "116560",
    "end": "124399"
  },
  {
    "text": "are generally not allowed to have systems that crash so you really really",
    "start": "124399",
    "end": "131319"
  },
  {
    "text": "need to minimize bugs um some exchanges will actually kick you off you can um not be allowed to trade anymore if you",
    "start": "131319",
    "end": "138480"
  },
  {
    "text": "if you lose connectivity which means that you might pretend that you um you know you might not have got an acknowledgement or might not have um",
    "start": "138480",
    "end": "144959"
  },
  {
    "text": "seen some water in the market so you really need to be connected and you've got this um agreement with the exchange",
    "start": "144959",
    "end": "150840"
  },
  {
    "text": "that you're always connected so having a really high reliability environment where you just don't crash is is pretty",
    "start": "150840",
    "end": "158159"
  },
  {
    "text": "important now contrast that with fpj programming which",
    "start": "158159",
    "end": "164599"
  },
  {
    "text": "um traditionally has very very long development Cycles like we're talking months even years to um build Hardware",
    "start": "164599",
    "end": "174239"
  },
  {
    "text": "products it makes it very difficult to react and put in a new a new way of um",
    "start": "174239",
    "end": "181840"
  },
  {
    "text": "a new way of operating the next day now the title of this talk is um fpj",
    "start": "181840",
    "end": "188519"
  },
  {
    "text": "microservices on off-the-shelf Hardware so I was going to discuss some um PCI",
    "start": "188519",
    "end": "195360"
  },
  {
    "text": "card Solutions which if you have a data center you can put it you can put a card into a network server and it will",
    "start": "195360",
    "end": "201480"
  },
  {
    "text": "actually um take over the network connection I'll go into that a bit but",
    "start": "201480",
    "end": "206680"
  },
  {
    "text": "what's really exciting yesterday uh this article came out that Amazon AWS is",
    "start": "206680",
    "end": "212720"
  },
  {
    "text": "launching fpga instances now these use zyink fpgas and they allow General",
    "start": "212720",
    "end": "218840"
  },
  {
    "text": "general purpose applications that you can you can build if you can build fpj software you can put onto the cloud so",
    "start": "218840",
    "end": "224439"
  },
  {
    "text": "that gets rid of that will get rid of a whole lot of um deployment issues of actually having to set up your own",
    "start": "224439",
    "end": "230280"
  },
  {
    "text": "servers having to maintain them and so on just the usual kinds of cloud",
    "start": "230280",
    "end": "235400"
  },
  {
    "text": "benefits no need to um to Source your own components to to find what um what",
    "start": "235799",
    "end": "242640"
  },
  {
    "text": "you going to run on so you'd actually be able to this just a screenshot of the um Dev instance that you can actually log",
    "start": "242640",
    "end": "248360"
  },
  {
    "text": "in just have a normal um a normal Cloud instance but you put a um binary on to",
    "start": "248360",
    "end": "256040"
  },
  {
    "text": "which will then run run on the fpga just discussing microservices why",
    "start": "256040",
    "end": "262639"
  },
  {
    "text": "why we talk about microservices here the usual sort of um that there's a lot of",
    "start": "262639",
    "end": "267880"
  },
  {
    "text": "discussion of what microservices are and why it to be useful but for the point of for the point of",
    "start": "267880",
    "end": "273360"
  },
  {
    "text": "view of putting things on fpj what I really like about the architecture of building larger systems with with small",
    "start": "273360",
    "end": "279400"
  },
  {
    "text": "Services is that allows you to compartmentalize concerns that means that you can scale separately so if you",
    "start": "279400",
    "end": "285680"
  },
  {
    "text": "have one part of your application which is doing authorization for example another one which is doing some computation then you can put them onto",
    "start": "285680",
    "end": "292479"
  },
  {
    "text": "different um machines different Hardware Solutions in different locations depending on what they're doing so for",
    "start": "292479",
    "end": "298440"
  },
  {
    "text": "example if you have something which needs to connect databases well you might want to run that on a CPU if you have something which is doing some",
    "start": "298440",
    "end": "304000"
  },
  {
    "text": "machine learning perhaps that'll go on a GPU if you're doing something which is purely calculation based and you want to",
    "start": "304000",
    "end": "309600"
  },
  {
    "text": "be able to get um get a very fast response then perhaps an fpj is a",
    "start": "309600",
    "end": "315320"
  },
  {
    "text": "plausible solution for that what do I mean by ultra low latency now if you're",
    "start": "315320",
    "end": "321680"
  },
  {
    "text": "doing a um a video service then you need to be able to respond within like 30 60",
    "start": "321680",
    "end": "328880"
  },
  {
    "text": "frames a second which gives you some number of milliseconds that you need to be able to do a calculation",
    "start": "328880",
    "end": "334960"
  },
  {
    "text": "in we're getting towards some really interesting applications with virtual reality now um VR Optics actually",
    "start": "334960",
    "end": "340919"
  },
  {
    "text": "require you to have much higher frame rates so you get a uh you get",
    "start": "340919",
    "end": "346960"
  },
  {
    "text": "um sorry you get more of a sense of dissonance if you have even just like 30",
    "start": "346960",
    "end": "352479"
  },
  {
    "text": "frames a second which is fine for a still image over here when you're immersed in that then you actually notice uh flickering much more",
    "start": "352479",
    "end": "360240"
  },
  {
    "text": "become becomes quite disturbing and hap Dix is where you're actually having a touch sense and the human touch sense is",
    "start": "360240",
    "end": "367319"
  },
  {
    "text": "much much more sensitive than our Optical sense and so you actually need refresh rates up to thousands of um",
    "start": "367319",
    "end": "375680"
  },
  {
    "text": "thousands of frames a second of updates per second now you translate this into",
    "start": "375680",
    "end": "381000"
  },
  {
    "text": "latencies and suddenly you're talking sub millisecond latencies for",
    "start": "381000",
    "end": "386280"
  },
  {
    "text": "responses so my favorite um example of why this would matter why this would",
    "start": "386280",
    "end": "392160"
  },
  {
    "text": "matter for a microservice is imagine you're actually imagine that I'm building like a virtual world where you want to be able to walk around in people",
    "start": "392160",
    "end": "398240"
  },
  {
    "text": "in different countries are connecting um to each other are are talking to each other are in the same world moving",
    "start": "398240",
    "end": "405240"
  },
  {
    "text": "objects around you know throwing a ball or something you want to be able to have simultaneous updates between multiple",
    "start": "405240",
    "end": "411280"
  },
  {
    "text": "participants now if you have a traditional uh micros service where you",
    "start": "411280",
    "end": "416599"
  },
  {
    "text": "have this sort of ping pong between multiple servers that are coordinating the behaviors of these people so you",
    "start": "416599",
    "end": "422520"
  },
  {
    "text": "know locations other objects in the room from multiple parts around the world um",
    "start": "422520",
    "end": "428000"
  },
  {
    "text": "each hop adds a little bit of latency so if you have even like a millisecond of",
    "start": "428000",
    "end": "433879"
  },
  {
    "text": "latency um at each hop then pretty soon it'll um it it'll add up to something that's",
    "start": "433879",
    "end": "441800"
  },
  {
    "text": "worse than the frame rate that you want um when you start talking about haptics and actually having to deal with object",
    "start": "441800",
    "end": "448440"
  },
  {
    "text": "collisions and finding out when when something hit somebody and get that that sense immediately then even that's not",
    "start": "448440",
    "end": "454800"
  },
  {
    "text": "fast enough um so we're really talking about every microsc counting in that kind of",
    "start": "454800",
    "end": "463840"
  },
  {
    "text": "environment so I'm just going to talk about what an fpga is how many people here have actually worked with fpga",
    "start": "464680",
    "end": "471120"
  },
  {
    "text": "Hardware there are a small number a few not so many um so basically it's from",
    "start": "471120",
    "end": "477240"
  },
  {
    "text": "our point of view it's a separate chip okay um it could exist on network card it could exist",
    "start": "477240",
    "end": "483080"
  },
  {
    "text": "um uh there are some new ones which are together a system on chip with a CPU and",
    "start": "483080",
    "end": "488520"
  },
  {
    "text": "so on um it could just be on the cloud somewhere it's a it's an fpj now um but basically what it is programming Wise",
    "start": "488520",
    "end": "495280"
  },
  {
    "text": "It's a bunch of logic gates so lots and lots of little lookup tables that can be",
    "start": "495280",
    "end": "500879"
  },
  {
    "text": "programmed in the field which means that you can change what they doing um you",
    "start": "500879",
    "end": "506479"
  },
  {
    "text": "load a binary on onto it and that will describe the configuration of all these Gates how they all hook up how they",
    "start": "506479",
    "end": "512680"
  },
  {
    "text": "connect to each other from a programmer's point of view it's just a build Target so you generate",
    "start": "512680",
    "end": "519760"
  },
  {
    "text": "the binary file you use an application like Vado is a commercial one uh you write source code in the language like",
    "start": "519760",
    "end": "525720"
  },
  {
    "text": "vhdl or VAR log and basically you're just writing text files you're building stuff so",
    "start": "525720",
    "end": "531880"
  },
  {
    "text": "we're back in software land now we've got a programming language we can compile that down to a binary flash it maybe reboot and you've",
    "start": "531880",
    "end": "539600"
  },
  {
    "text": "got an execution happening on Hardware so it is a pretty normal kind of building environment",
    "start": "539600",
    "end": "546760"
  },
  {
    "text": "nowadays I even go as far now as saying that I'm really treating vhdl and very",
    "start": "546760",
    "end": "551880"
  },
  {
    "text": "log as intermediate languages",
    "start": "551880",
    "end": "556440"
  },
  {
    "text": "um generally generally don't need to hack them too much directly uh vhdl",
    "start": "558880",
    "end": "564920"
  },
  {
    "text": "itself though it's pretty tedious to develop right so um it's more low level than assembly you're describing circuits",
    "start": "564920",
    "end": "572320"
  },
  {
    "text": "of logic gates you're thinking about ands and ores and things you're worrying about clock timings you're actually",
    "start": "572320",
    "end": "578360"
  },
  {
    "text": "building a pipeline so you're making up how different stages of the circuit are",
    "start": "578360",
    "end": "584519"
  },
  {
    "text": "going to how they're going to operate you have to make sure that each one only has a certain path length to meet the",
    "start": "584519",
    "end": "590839"
  },
  {
    "text": "timing of the clock that you're setting up if they get too long then you put register in between and that delays the",
    "start": "590839",
    "end": "596959"
  },
  {
    "text": "pipeline by one more clock cycle so you actually bu build up um sets of logic",
    "start": "596959",
    "end": "602959"
  },
  {
    "text": "and each one you can imagine you can have as much parallel going on a parallel paths as As You Wish um as long",
    "start": "602959",
    "end": "610920"
  },
  {
    "text": "as the whole thing fits within the fits within the die within the number of gates that you've got in the fpj and that is growing really really large now",
    "start": "610920",
    "end": "617959"
  },
  {
    "text": "um but you are missing out on stuff you don't necessarily have things like floating Point numbers you can get libraries that will give you floating",
    "start": "617959",
    "end": "624240"
  },
  {
    "text": "Point support um but you generally have to work in much more lowlevel math operations",
    "start": "624240",
    "end": "630160"
  },
  {
    "text": "and sometimes the tools can be a bit flaky so they've been around for a long time um they they are getting you know",
    "start": "630160",
    "end": "636800"
  },
  {
    "text": "better and better all the time of course but it's maybe it's not as mature as some of the software um build chain but on the flip",
    "start": "636800",
    "end": "644720"
  },
  {
    "text": "side it's possible to create really really efficient circuits so you can optimize you can use as few bits as you want so I'll do things where I'm having",
    "start": "644720",
    "end": "652200"
  },
  {
    "text": "um you know like 17 bits here and six bits here um doing a lot of fix Point math and things like that and you can",
    "start": "652200",
    "end": "658680"
  },
  {
    "text": "optimize for Time by doing more things in parallel so you can just set up right I want to do like um multiple copies of",
    "start": "658680",
    "end": "665320"
  },
  {
    "text": "the same same object I mean one the same computation for example when you do a",
    "start": "665320",
    "end": "671200"
  },
  {
    "text": "for Loop in vhdl then you actually end up with multiple um multiple copies so it's it's a completely different way of",
    "start": "671200",
    "end": "677079"
  },
  {
    "text": "thinking to normal sequential programming it can be very um very tempting be very easy to build huge",
    "start": "677079",
    "end": "683760"
  },
  {
    "text": "circuits Without Really realizing what you're doing if you think in terms of um of sequential coding",
    "start": "683760",
    "end": "690040"
  },
  {
    "text": "so what do we do when we've got something that's really hard to do and we want to get some Reliable Software out bang go straight to has",
    "start": "690040",
    "end": "697040"
  },
  {
    "text": "schull so I'm using this language called Clash it's pretty much based it's pretty much hous school um it's got some uh new",
    "start": "697040",
    "end": "705959"
  },
  {
    "text": "some extra features which are more like library or a different um Prelude which is the basic library that you use in high school it's got types like length",
    "start": "705959",
    "end": "713200"
  },
  {
    "text": "typed bit vectors and so that means that the number of bits is actually part of the type so you've got natural numbers",
    "start": "713200",
    "end": "719519"
  },
  {
    "text": "in the type signature so um if I make a like a 17-bit signed integer then that's a 17",
    "start": "719519",
    "end": "727639"
  },
  {
    "text": "bit signed integer um it's got some primitive data flow",
    "start": "727639",
    "end": "732839"
  },
  {
    "text": "strategies like million more machines I'll talk about and parallel reducers so",
    "start": "732839",
    "end": "738639"
  },
  {
    "text": "what this means is that you can set up computations and it will actually build a circuit which most efficiently",
    "start": "738639",
    "end": "745920"
  },
  {
    "text": "implements the um the idea of the computation so for example if you're folding addition over a",
    "start": "745920",
    "end": "752120"
  },
  {
    "text": "vector now in has school fold is a it's a function which you generally might",
    "start": "752120",
    "end": "757600"
  },
  {
    "text": "apply to a list and it will take the first element of the list um maybe take the first two elements add them together",
    "start": "757600",
    "end": "764360"
  },
  {
    "text": "then get the next one add that next one add that and that's when you fold Edition across a list that's a way to um",
    "start": "764360",
    "end": "771360"
  },
  {
    "text": "describe that you want to do a computation over a collection that's the kind of thing that",
    "start": "771360",
    "end": "778199"
  },
  {
    "text": "in like or Java or something you would generally write a full loop for you say you know for iterating over these",
    "start": "778199",
    "end": "784120"
  },
  {
    "text": "elements then add up a temporary variable um but there if you're doing that then you're explicitly saying how",
    "start": "784120",
    "end": "790760"
  },
  {
    "text": "you want to do the computation in hasal what you're really describing is I want to do this computation I just want the",
    "start": "790760",
    "end": "796480"
  },
  {
    "text": "general concept of adding up all the numbers in this Vector on a CPU sure that we'll go",
    "start": "796480",
    "end": "803519"
  },
  {
    "text": "through and add them up one by one but in Hardware you can make parallel things",
    "start": "803519",
    "end": "808720"
  },
  {
    "text": "so you can can split the task up so when you do that in Clash you'll actually end up with a network like that where lots",
    "start": "808720",
    "end": "817800"
  },
  {
    "text": "of pairs are put together um in par added in parallel so like each level",
    "start": "817800",
    "end": "823560"
  },
  {
    "text": "here is going to be a different pipeline stage um sorry may maybe a different pipeline",
    "start": "823560",
    "end": "830959"
  },
  {
    "text": "stage but the dependencies are wired up like that so that um so you have your login tree of",
    "start": "831000",
    "end": "837600"
  },
  {
    "text": "adders rather than a order n uh set of additions and if we go back that was the",
    "start": "837600",
    "end": "844639"
  },
  {
    "text": "code was just fold plus over the vector so it's very very um very tur to",
    "start": "844639",
    "end": "850040"
  },
  {
    "text": "write and you end up with with really really um more complex and neat",
    "start": "850040",
    "end": "856800"
  },
  {
    "text": "Hardware um there is some poor support they say for recursive functions because",
    "start": "856800",
    "end": "861959"
  },
  {
    "text": "you can imagine if you are recursing then you're actually going to get um infinite Paths of Hardware so you need",
    "start": "861959",
    "end": "868480"
  },
  {
    "text": "to limit that and um you know understand what you're doing when you want to do things when you",
    "start": "868480",
    "end": "873800"
  },
  {
    "text": "actually want to do stuff over and over again but other than that most of hascol is",
    "start": "873800",
    "end": "879639"
  },
  {
    "text": "supported um so just in general I think has schol is very well suited to designing parallel systems because the",
    "start": "879639",
    "end": "885560"
  },
  {
    "text": "language describes the dependencies between Expressions you're actually just setting up um expressions in terms of",
    "start": "885560",
    "end": "892040"
  },
  {
    "text": "how they're built up from other expressions and that translates pretty directly into the hardware so quite often I'll have a a function with a wear",
    "start": "892040",
    "end": "898839"
  },
  {
    "text": "claw which um defines uh smaller Expressions which I'm going to refer to in the main expression",
    "start": "898839",
    "end": "906279"
  },
  {
    "text": "in the main function um each of those can then turn into a separate pipeline stage pretty easily just by putting a",
    "start": "906279",
    "end": "912279"
  },
  {
    "text": "register keyword around them so for a quick example just going",
    "start": "912279",
    "end": "918040"
  },
  {
    "text": "to go through CC 32 which is a pure math thing um so let's say we just got a",
    "start": "918040",
    "end": "923959"
  },
  {
    "text": "little check summing server um it's going to be 32 lines of hcal so really",
    "start": "923959",
    "end": "929120"
  },
  {
    "text": "short it's got two on liners for testing so we're actually going to build a small um test",
    "start": "929120",
    "end": "934959"
  },
  {
    "text": "bench now Clash here generates um 11 files of vhdl and that includes five files for a",
    "start": "934959",
    "end": "942480"
  },
  {
    "text": "test bench which normally you'd have to write by hand normally that can be very very tedious so you know what happens people skip",
    "start": "942480",
    "end": "948639"
  },
  {
    "text": "it um then we uh what I'll go through here",
    "start": "948639",
    "end": "954240"
  },
  {
    "text": "is loading that into Vado which is a commercial tool for um generating generating circuit so we can see what it",
    "start": "954240",
    "end": "959880"
  },
  {
    "text": "looks like and synthesize it to make an actual optimal circuit layout what we end up with is a really",
    "start": "959880",
    "end": "967240"
  },
  {
    "text": "um so this is all from generated code basically in the hardware simulator we",
    "start": "967240",
    "end": "972800"
  },
  {
    "text": "actually get a buole and done signal it switches to True when we know the test",
    "start": "972800",
    "end": "978440"
  },
  {
    "text": "passes so we actually go a waveform view it's um it's all cool we generate some",
    "start": "978440",
    "end": "983959"
  },
  {
    "text": "test data so because I want to be able to compare this to some known good dat data I'll start off with a standard C",
    "start": "983959",
    "end": "991199"
  },
  {
    "text": "implementation of the crc32 function uh we build that run it on run",
    "start": "991199",
    "end": "999040"
  },
  {
    "text": "it on a string we end up with uh some integers so that's going to be the expected output that we will use later",
    "start": "999040",
    "end": "1005560"
  },
  {
    "text": "for our testing and that's generated from C from something that we know is implemented",
    "start": "1005560",
    "end": "1011399"
  },
  {
    "text": "correctly um small thing here we've just added in",
    "start": "1011399",
    "end": "1016880"
  },
  {
    "text": "a zero bite at the start of the um at the start of the input which I'll",
    "start": "1016880",
    "end": "1022160"
  },
  {
    "text": "use for um because the circuit starts off in zero state but yeah that's that's all the C",
    "start": "1022160",
    "end": "1027959"
  },
  {
    "text": "code we set this up into a when we build a hardware we set up a thing called a m",
    "start": "1027959",
    "end": "1034120"
  },
  {
    "text": "machine which is just um simply a component that has an input uh input an output and maintains a state so it's a",
    "start": "1034120",
    "end": "1041520"
  },
  {
    "text": "general Hardware design thing but um in Clash we actually have a",
    "start": "1041520",
    "end": "1046640"
  },
  {
    "text": "merely function so we can pass in a transform function which is the CRC 32t",
    "start": "1046640",
    "end": "1051799"
  },
  {
    "text": "transform on the bottom line we just pass that into the mely with an initial",
    "start": "1051799",
    "end": "1057520"
  },
  {
    "text": "value of zero and that gives us our our whole C C32 meing machine",
    "start": "1057520",
    "end": "1064840"
  },
  {
    "text": "function so one thing we'll notice here is",
    "start": "1064840",
    "end": "1071520"
  },
  {
    "text": "the the bottom function crc32 once it's gone into the melee machine it's actually of type signal so it's got an",
    "start": "1071520",
    "end": "1077799"
  },
  {
    "text": "unsigned 8 which which is of course an 8bit unsigned integer as input and it's outputting an unsigned",
    "start": "1077799",
    "end": "1084679"
  },
  {
    "text": "32 each of those is inside wrapped inside a signal which means that this is going to continuously operate as",
    "start": "1084679",
    "end": "1091480"
  },
  {
    "text": "something that changes what's happening on a wire whereas the CC 32t function above",
    "start": "1091480",
    "end": "1097960"
  },
  {
    "text": "that is not a signal function it's just a pure mathematical function of um",
    "start": "1097960",
    "end": "1104400"
  },
  {
    "text": "taking a unsigned 32 32bit an 8bit and outp putting a toule of two",
    "start": "1104400",
    "end": "1111840"
  },
  {
    "text": "32bit integers so there's no signals going on there and that's just a um",
    "start": "1111840",
    "end": "1117280"
  },
  {
    "text": "that's a straight hcal function uh using these Clash types which uh give you the bit",
    "start": "1117280",
    "end": "1124559"
  },
  {
    "text": "lengths one thing that's really cool is the truncate B function there so we'll",
    "start": "1132120",
    "end": "1138240"
  },
  {
    "text": "see if we look a bit closer into that step function on the third line from the",
    "start": "1138240",
    "end": "1144799"
  },
  {
    "text": "bottom it's got a a trunk a b in there and what that actually does it simply",
    "start": "1144799",
    "end": "1149840"
  },
  {
    "text": "truncates two um bit values so here we might take a a 32bit value down to an",
    "start": "1149840",
    "end": "1155200"
  },
  {
    "text": "8bit value the type of that is unsigned a to",
    "start": "1155200",
    "end": "1161080"
  },
  {
    "text": "unsigned B which means it's polymorphic and Clash will actually",
    "start": "1161080",
    "end": "1166280"
  },
  {
    "text": "generate whatever you need to um um to to change the size of of integers",
    "start": "1166280",
    "end": "1173080"
  },
  {
    "text": "which means that it's actually going to remove wires there's also a resize function which can add zero",
    "start": "1173080",
    "end": "1179880"
  },
  {
    "text": "values and because that's all inferred by the hull compiler you don't need to",
    "start": "1179880",
    "end": "1185640"
  },
  {
    "text": "specify what the input and output bit widths are or anything like that because that's all encoded in the type already",
    "start": "1185640",
    "end": "1190799"
  },
  {
    "text": "so it actually ends up that you have to write a lot less code and you have to think less about the details of the",
    "start": "1190799",
    "end": "1197120"
  },
  {
    "text": "hardware that you're designing than would if you were developing vhdl",
    "start": "1197120",
    "end": "1202360"
  },
  {
    "text": "directly okay so we have a um cc32 table in here which",
    "start": "1203360",
    "end": "1210159"
  },
  {
    "text": "is just a big um ROM table that we're going to load um that that we're going to have on the",
    "start": "1210159",
    "end": "1216919"
  },
  {
    "text": "fpga somehow I'll get into that later um we Implement that as an async ROM in",
    "start": "1216919",
    "end": "1222919"
  },
  {
    "text": "Clash that means we just say async ROM file uh of size 250",
    "start": "1222919",
    "end": "1230639"
  },
  {
    "text": "six and we give an input um data file",
    "start": "1230919",
    "end": "1237320"
  },
  {
    "text": "which uh which the compiler is going to read at at um at compile time and it's going to generate that as part of the",
    "start": "1237320",
    "end": "1244720"
  },
  {
    "text": "binary and finally we end up with uh we build a top entity now the top entity we're going to",
    "start": "1246760",
    "end": "1252960"
  },
  {
    "text": "use is just the cc32 signal function so any any signal is um is part",
    "start": "1252960",
    "end": "1261480"
  },
  {
    "text": "of a synchronous a clocked",
    "start": "1261480",
    "end": "1264679"
  },
  {
    "text": "circuit one really cool thing you can do is then compose M machines so you have",
    "start": "1267919",
    "end": "1273360"
  },
  {
    "text": "that's just one way describing one you could use that as one pipeline stage and then you can compose those together to",
    "start": "1273360",
    "end": "1278799"
  },
  {
    "text": "make larger stages as well and finally the test bench so this",
    "start": "1278799",
    "end": "1285600"
  },
  {
    "text": "is where um we're really starting to do things that we normally do easily in",
    "start": "1285600",
    "end": "1291120"
  },
  {
    "text": "vhdl so we um we specify our inputs which here um we start off with zero",
    "start": "1291120",
    "end": "1298039"
  },
  {
    "text": "just to have nothing in the circuit to start with and um 79 112 whatever are",
    "start": "1298039",
    "end": "1303679"
  },
  {
    "text": "the asky letters for oper and then the expected output is what our C program",
    "start": "1303679",
    "end": "1309440"
  },
  {
    "text": "produced earlier and so we can just um specify",
    "start": "1309440",
    "end": "1315960"
  },
  {
    "text": "those with the Clash functions for the stimula gener and the output verifier and that'll then generate a circuit",
    "start": "1315960",
    "end": "1322159"
  },
  {
    "text": "which uh in simulation will have a a stimuli generator will",
    "start": "1322159",
    "end": "1327480"
  },
  {
    "text": "actually be a little bit of the circuit that generates those numbers and the output verifier will look at those and check if that's what what we were",
    "start": "1327480",
    "end": "1334240"
  },
  {
    "text": "expecting and put out a Boolean signal which is the the done value and the true signal at the",
    "start": "1334240",
    "end": "1339279"
  },
  {
    "text": "end but before we do that um we can do something which we generally which we can't do normally with vhdl is that we",
    "start": "1339279",
    "end": "1346559"
  },
  {
    "text": "can test this in a software interpreter so we run Clash interactive which is um",
    "start": "1346559",
    "end": "1353159"
  },
  {
    "text": "really just wrap around ghci the standard hcll interpreter and we",
    "start": "1353159",
    "end": "1359159"
  },
  {
    "text": "can uh we can sample that expected output of top end test input which is",
    "start": "1359159",
    "end": "1365600"
  },
  {
    "text": "running the the main",
    "start": "1365600",
    "end": "1368760"
  },
  {
    "text": "function it it it does actually um it gives you the whole signal which is all false false false false false and then",
    "start": "1370960",
    "end": "1377960"
  },
  {
    "text": "um there will be a true at the end um with this caveat of what I what I",
    "start": "1377960",
    "end": "1383400"
  },
  {
    "text": "copy out here from the from the",
    "start": "1383400",
    "end": "1386760"
  },
  {
    "text": "docs finally if we're happy that that um that that works and we will get the true",
    "start": "1388880",
    "end": "1394919"
  },
  {
    "text": "uh we can just generate vhdl recently I've also been generating VAR log similar kind of thing you can just do",
    "start": "1394919",
    "end": "1400480"
  },
  {
    "text": "colum VAR log or Clash D VAR log in a make file um and yeah as I said before",
    "start": "1400480",
    "end": "1405919"
  },
  {
    "text": "I'm basically treating vhdl or very log as intermediate languages they're just generated by Clash I don't need to",
    "start": "1405919",
    "end": "1411799"
  },
  {
    "text": "generally I don't need to do anything I just load them into Vado and and build um yeah I did find one compiler",
    "start": "1411799",
    "end": "1419559"
  },
  {
    "text": "bug with Clash last week where it was um I was doing some fixed Point math and it",
    "start": "1419559",
    "end": "1424960"
  },
  {
    "text": "was uh generating an argument it was giving an argument literal which was um like 132 bits or",
    "start": "1424960",
    "end": "1432960"
  },
  {
    "text": "something and trying to put that into a 127 bit argument and because it was",
    "start": "1432960",
    "end": "1438440"
  },
  {
    "text": "giving it in hex it couldn't do 127 bits so that was really I I had to do a manual truncate in the generated",
    "start": "1438440",
    "end": "1445720"
  },
  {
    "text": "vhdl um that's about the only time I've really had to go in and hack the vhdl",
    "start": "1445720",
    "end": "1450880"
  },
  {
    "text": "directly and and change it generally it just it just works as you know as as an",
    "start": "1450880",
    "end": "1456240"
  },
  {
    "text": "Intermediate Language so that's a that's a pretty big um pretty big change like not having to think about thousands and",
    "start": "1456240",
    "end": "1462600"
  },
  {
    "text": "thousands of lines of of vhdl so running simulation test passed",
    "start": "1462600",
    "end": "1469120"
  },
  {
    "text": "we have um we have a system clock we have the",
    "start": "1469120",
    "end": "1474200"
  },
  {
    "text": "8bit input and we have the 32-bit output um as the numbers at the bottom um but",
    "start": "1474200",
    "end": "1481039"
  },
  {
    "text": "the main thing is we can see the true signal at the top when it's",
    "start": "1481039",
    "end": "1485840"
  },
  {
    "text": "finished after we've done that so we know that simulates okay that the circuit should do what we want we make",
    "start": "1487440",
    "end": "1493520"
  },
  {
    "text": "an elaborated design so that's how the how the logic fits together so here we",
    "start": "1493520",
    "end": "1498840"
  },
  {
    "text": "can see all the adders um as an actual circuit that it would be",
    "start": "1498840",
    "end": "1504919"
  },
  {
    "text": "developing but that's still just logical",
    "start": "1504919",
    "end": "1509360"
  },
  {
    "text": "components what we then do is synthesize it so this then goes down to the actual",
    "start": "1511120",
    "end": "1516240"
  },
  {
    "text": "gate design in the fpga so we can see in the the top the",
    "start": "1516240",
    "end": "1523080"
  },
  {
    "text": "very top Corner we've got the 8 bit input and the 32 bits 32 lines of output at the other end all the these little",
    "start": "1523080",
    "end": "1528640"
  },
  {
    "text": "yellow boxes in the middle are all the ls the lookup tables which have been generated and they're just binary values",
    "start": "1528640",
    "end": "1533760"
  },
  {
    "text": "they might have um like three bullion inputs and one bullan output or something like that um multiple ones so",
    "start": "1533760",
    "end": "1542000"
  },
  {
    "text": "yes in this design some of them are two or three bits in some of them are six",
    "start": "1542000",
    "end": "1547960"
  },
  {
    "text": "and literally um what Vado has done is work out what the optimal way of",
    "start": "1547960",
    "end": "1557399"
  },
  {
    "text": "implementing all those logic gates using these lookup tables um could be and this is remember this is like for multiple",
    "start": "1557399",
    "end": "1564520"
  },
  {
    "text": "for eight bits of input coming in um so it splits them all up so it's once you",
    "start": "1564520",
    "end": "1571000"
  },
  {
    "text": "get down to this level then it's pretty hard to follow what's actually going on you can look at each of those tables and",
    "start": "1571000",
    "end": "1577000"
  },
  {
    "text": "each of those lots has a different binary lookup table which has been",
    "start": "1577000",
    "end": "1582080"
  },
  {
    "text": "generated now you remember that we had a ROM we had a a big ROM file of um CRC",
    "start": "1582080",
    "end": "1587399"
  },
  {
    "text": "values that um that we were meant to load in somewhere and I can't see any big ROM",
    "start": "1587399",
    "end": "1593360"
  },
  {
    "text": "anywhere is what's actually happened um the fpj does have block Ram so sometimes",
    "start": "1593360",
    "end": "1600440"
  },
  {
    "text": "if you've got large data it will be stored in Ram which um that there can be",
    "start": "1600440",
    "end": "1606279"
  },
  {
    "text": "blocks situated throughout the chip but for this small function V",
    "start": "1606279",
    "end": "1611960"
  },
  {
    "text": "worked out that it could actually implement it as a bunch of different lookup tables so the data lookup is",
    "start": "1611960",
    "end": "1618000"
  },
  {
    "text": "actually spread across all these um these lights as well so yeah there's there's no way",
    "start": "1618000",
    "end": "1623640"
  },
  {
    "text": "you're going to go backwards from the synthesized design to The Logical circuit to work out what what's actually",
    "start": "1623640",
    "end": "1629240"
  },
  {
    "text": "going on once you've once you've implemented it like that so that's pretty complex how can",
    "start": "1629240",
    "end": "1636360"
  },
  {
    "text": "you remain agile when you end up with systems like that and",
    "start": "1636360",
    "end": "1641559"
  },
  {
    "text": "when um it can be really hard to test eventually like you're going to have to put this onto Hardware at some point",
    "start": "1641559",
    "end": "1647159"
  },
  {
    "text": "you're going to have to load it and run it so yeah with um with normal vhdl",
    "start": "1647159",
    "end": "1653640"
  },
  {
    "text": "design if it takes 6 months to uh to develop a moderately sized application",
    "start": "1653640",
    "end": "1660159"
  },
  {
    "text": "then yeah it's very hard to remain agile and remember like for the trading",
    "start": "1660159",
    "end": "1665440"
  },
  {
    "text": "environment um the requirements keep changing uh you need to be able to",
    "start": "1665440",
    "end": "1672320"
  },
  {
    "text": "develop systems really quickly so I'm not even talking about bug bug fixes here like um",
    "start": "1672320",
    "end": "1678640"
  },
  {
    "text": "you know we've got to move on from software we're having bugs we need to actually get uh new better features",
    "start": "1678640",
    "end": "1684360"
  },
  {
    "text": "out so what's really good with has and Clash here is just the general idea that",
    "start": "1684360",
    "end": "1691559"
  },
  {
    "text": "if it compiles it works now I know you know people think N I can't really be real but that is really my experience",
    "start": "1691559",
    "end": "1697519"
  },
  {
    "text": "with with hasool in general um with Clash you do have this extra layer of",
    "start": "1697519",
    "end": "1703039"
  },
  {
    "text": "putting into Hardware these extra steps then it has to meet timing uh if it doesn't meet timing you go back and um",
    "start": "1703039",
    "end": "1709399"
  },
  {
    "text": "generally just add registers uh split up your pipeline stages and so on um which again is is very easy",
    "start": "1709399",
    "end": "1718919"
  },
  {
    "text": "because the code has already specified logical you you've logically separated",
    "start": "1718919",
    "end": "1725519"
  },
  {
    "text": "um the the different parts of each function so it's quite easy to go through and add registers to to it",
    "start": "1725519",
    "end": "1731240"
  },
  {
    "text": "later the fact that you can run tests in the software interpreter before you've generated",
    "start": "1731240",
    "end": "1736360"
  },
  {
    "text": "vhdl that means that you can set up build Bots which will test out the code",
    "start": "1736360",
    "end": "1741840"
  },
  {
    "text": "when your V push changes without requiring having fpj Hardware or all the commercial tools on",
    "start": "1741840",
    "end": "1750039"
  },
  {
    "text": "every buildbot so you can just set up a standard you know whatever um Centos environment or something and uh install",
    "start": "1750039",
    "end": "1756120"
  },
  {
    "text": "Clash on it and run any tests so it just becomes another part of your normal",
    "start": "1756120",
    "end": "1761679"
  },
  {
    "text": "software uh deployment setup so going to conclude there the main the",
    "start": "1761679",
    "end": "1770240"
  },
  {
    "text": "really interesting thing here is that fpgs are becoming commonly available what I really wanted to get through is",
    "start": "1770240",
    "end": "1777200"
  },
  {
    "text": "that this is not some crazy thing that only really specialized applications are",
    "start": "1777200",
    "end": "1784919"
  },
  {
    "text": "are using I mean it is now but in the future there's no reason that you can't",
    "start": "1784919",
    "end": "1790240"
  },
  {
    "text": "deploy this for common applications and as we have um low",
    "start": "1790240",
    "end": "1797320"
  },
  {
    "text": "latency require Ms in more areas things like virtual reality and we can get fpga on uh cloud",
    "start": "1797320",
    "end": "1805519"
  },
  {
    "text": "services we can deploy them much more easily um I think this is a way that is",
    "start": "1805519",
    "end": "1811120"
  },
  {
    "text": "this is going to become more and more common and really there's no need to fear this whole long development",
    "start": "1811120",
    "end": "1818880"
  },
  {
    "text": "cycle using tools like hll and Clash you can actually build it up as part of your",
    "start": "1818880",
    "end": "1824840"
  },
  {
    "text": "normal software you can build Source test deploy get a binary out there have",
    "start": "1824840",
    "end": "1829880"
  },
  {
    "text": "it as as your normal continuous integration continuous development continuous deployment and",
    "start": "1829880",
    "end": "1836640"
  },
  {
    "text": "um yeah and remain agile even though you're you're building on",
    "start": "1836640",
    "end": "1842799"
  },
  {
    "text": "fpg okay I'm going to finish up there thank you",
    "start": "1843880",
    "end": "1849039"
  },
  {
    "text": "[Applause]",
    "start": "1849830",
    "end": "1853679"
  }
]