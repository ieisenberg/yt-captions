[
  {
    "start": "0",
    "end": "154000"
  },
  {
    "text": "yeah thanks for the thanks for the introduction George um or George types Wilson um as I like to know him um so",
    "start": "2159",
    "end": "8719"
  },
  {
    "text": "yes my name is Tim mcgilchrist hopefully you're here to see my talk about o camel um titled o camel for Fun and Profit",
    "start": "8719",
    "end": "15880"
  },
  {
    "text": "so a little bit more about me so um my",
    "start": "15880",
    "end": "21320"
  },
  {
    "text": "background is very much in Industry so I've worked on various projects doing",
    "start": "21320",
    "end": "26840"
  },
  {
    "text": "Finance doing payments doing machine learning and building web applications in a range of different Technologies so",
    "start": "26840",
    "end": "33760"
  },
  {
    "text": "I've used Stacks from java to Ruby to JavaScript to Scala and into functional",
    "start": "33760",
    "end": "40600"
  },
  {
    "text": "programming like oaml erlang and hll so during that process I managed to",
    "start": "40600",
    "end": "46360"
  },
  {
    "text": "convince people to pay me to write o camel um and that final stage is what I",
    "start": "46360",
    "end": "51760"
  },
  {
    "text": "wanted to talk to you about today so in this talk I want to do sort of a progam um prog pragmatic uh journey through",
    "start": "51760",
    "end": "60199"
  },
  {
    "text": "using o camel to build Real World Systems so that is systems that are",
    "start": "60199",
    "end": "65320"
  },
  {
    "text": "critical to customers who will notice if they're not performing or they're not available um and for me at work that",
    "start": "65320",
    "end": "72159"
  },
  {
    "text": "means systems that support the oaml community so the company I'm working for",
    "start": "72159",
    "end": "77439"
  },
  {
    "text": "is called tadz um interesting fact T tadz is a French uh word and it means a",
    "start": "77439",
    "end": "84479"
  },
  {
    "text": "boat that carries camels so that's why it's there um and",
    "start": "84479",
    "end": "90720"
  },
  {
    "text": "at tadz I lead a team called the cops team which is looking after a lot of the",
    "start": "90720",
    "end": "96880"
  },
  {
    "text": "community infrastructure for doing things like validation of the compiler building packages providing a lot of the",
    "start": "96880",
    "end": "104320"
  },
  {
    "text": "QA sort of supporting infrastructure so terz is a software engineering business that focuses on",
    "start": "104320",
    "end": "111600"
  },
  {
    "text": "building functional systems using a camel um and sort of concretely that means that we uh work on the EML",
    "start": "111600",
    "end": "119159"
  },
  {
    "text": "compiler itself self we work on the build system we work on the package manager and supporting tools like that",
    "start": "119159",
    "end": "126759"
  },
  {
    "text": "um we also work on system software and embedded systems like Mirage OS unic kernel um which is the little stylized",
    "start": "126759",
    "end": "134560"
  },
  {
    "text": "camel in the middle there um we also work on a high performance data store called man which is used in the tesos",
    "start": "134560",
    "end": "141080"
  },
  {
    "text": "blockchain so a little man logo there and and finally we run a lot of those",
    "start": "141080",
    "end": "146400"
  },
  {
    "text": "systems for the oal community like continuous integration and testing infrastructure",
    "start": "146400",
    "end": "153000"
  },
  {
    "text": "so what's my motivation so when Dave asked me to speak here um I was really",
    "start": "153000",
    "end": "158920"
  },
  {
    "start": "154000",
    "end": "200000"
  },
  {
    "text": "honored and thrilled and a little bit nervous and terrified but the cool thing is that I get to talk to talk about one",
    "start": "158920",
    "end": "165200"
  },
  {
    "text": "of my favorite programming languages oaml um to a group of people that probably don't know much about it or",
    "start": "165200",
    "end": "172640"
  },
  {
    "text": "certainly don't get to use it in Anger for their day jobs so a lot of my previous talks are like sort of deeply",
    "start": "172640",
    "end": "179280"
  },
  {
    "text": "technical talks at functional programming user groups or conferences focusing on functional programming which",
    "start": "179280",
    "end": "185239"
  },
  {
    "text": "is which is all great and super interesting but here I've got a group of people that are building real stuff real",
    "start": "185239",
    "end": "191280"
  },
  {
    "text": "world systems and this applied functional programming is the space that I'm passionate",
    "start": "191280",
    "end": "197080"
  },
  {
    "text": "about okay so oaml who here has heard of",
    "start": "197080",
    "end": "202280"
  },
  {
    "start": "200000",
    "end": "327000"
  },
  {
    "text": "oaml your hands okay this is a good response um and in what",
    "start": "202280",
    "end": "208200"
  },
  {
    "text": "context like F okay anything else to related to H yes",
    "start": "208200",
    "end": "216080"
  },
  {
    "text": "camel is not H but okay cool cool at least we've got some people that have heard about it so we'll go through this",
    "start": "216080",
    "end": "222799"
  },
  {
    "text": "part a little bit more quickly than than I was originally planning so a camel is",
    "start": "222799",
    "end": "228200"
  },
  {
    "text": "a general purpose industrial strength programming language with an emphasis on expressivity and safety so going through",
    "start": "228200",
    "end": "235760"
  },
  {
    "text": "the sort of main features or the ways that you might sort of break down down what okl provides so it's got a native",
    "start": "235760",
    "end": "242239"
  },
  {
    "text": "compiler so it generates native code it's also got a bite code interpreter so it's an interpreted mode um it features",
    "start": "242239",
    "end": "250200"
  },
  {
    "text": "static type checking so with the raise of hands I won't go into static type checking too much but briefly it means",
    "start": "250200",
    "end": "256280"
  },
  {
    "text": "that the language checks programs while it is compiling so that errors in your programs types become compiler errors",
    "start": "256280",
    "end": "263800"
  },
  {
    "text": "and this is compared to a dynamic language like python or Ruby or JavaScript where you errors would become",
    "start": "263800",
    "end": "271080"
  },
  {
    "text": "runtime errors and you wouldn't find out about them until you run your program so",
    "start": "271080",
    "end": "276479"
  },
  {
    "text": "what else does it feature it's got this thing called algebraic data types don't worry about the acronym it's fairly",
    "start": "276479",
    "end": "282000"
  },
  {
    "text": "fairly straightforward probably not very scary it features automatic memory management with a garbage collector it's",
    "start": "282000",
    "end": "288479"
  },
  {
    "text": "got a typed module system which is uh one of its main differences from something like uh Scala or hasal and",
    "start": "288479",
    "end": "296520"
  },
  {
    "text": "it's got a bunch of these other cool features which which we might get to at the end so it's got first class modules",
    "start": "296520",
    "end": "302479"
  },
  {
    "text": "it's got gads It's got objects and classes and a bunch of other things so",
    "start": "302479",
    "end": "308600"
  },
  {
    "text": "looking at that like the response that I've got a lot when I've talked about EML elsewhere is that it's just for",
    "start": "308600",
    "end": "314919"
  },
  {
    "text": "compilers and academic static verification systems and I I'm here to convince you that no it's used for use",
    "start": "314919",
    "end": "322360"
  },
  {
    "text": "um useful everyday regular programming tasks all right so who uses it um so",
    "start": "322360",
    "end": "329639"
  },
  {
    "start": "327000",
    "end": "458000"
  },
  {
    "text": "here's a here's a collection of companies off the oam org website of places that are using oaml for building",
    "start": "329639",
    "end": "336319"
  },
  {
    "text": "real things um so let's sort of go through it um I think Microsoft is sponsoring here as well so um people are",
    "start": "336319",
    "end": "343680"
  },
  {
    "text": "using it for building Rich web applications so a company like href is building all of their front-end um",
    "start": "343680",
    "end": "350440"
  },
  {
    "text": "visualization code so hre's builds a web indexing crawling sort of infrastructure",
    "start": "350440",
    "end": "356960"
  },
  {
    "text": "for doing SEO um so they build all of their web front end in",
    "start": "356960",
    "end": "362440"
  },
  {
    "text": "oel um places are using it for lowlevel systems programming so places like uh",
    "start": "362440",
    "end": "368560"
  },
  {
    "text": "Docker are using it for low-level systems programming in Docker desktop so",
    "start": "368560",
    "end": "373759"
  },
  {
    "text": "I imagine we've got more developers in this room so you've probably already used Docker for desktop um on a Mac or",
    "start": "373759",
    "end": "381120"
  },
  {
    "text": "Windows raise of hand maybe yep okay you've run no camel with that so all of",
    "start": "381120",
    "end": "386800"
  },
  {
    "text": "the infrastructure for um going between the Linux VM and the underlying Operating System is using oaml and Dave",
    "start": "386800",
    "end": "394759"
  },
  {
    "text": "Scott from Docker has got a great blog post that I'll link to at the end of the end of the talk describing the technical",
    "start": "394759",
    "end": "400759"
  },
  {
    "text": "details of how that works but there's a there's o camel in all of those Docker",
    "start": "400759",
    "end": "406319"
  },
  {
    "text": "for desktop deployments um who else is using it um people are using it for",
    "start": "406319",
    "end": "411720"
  },
  {
    "text": "performance sensitive services in the finance area like Jane Street and Bloomberg uh people are using it for",
    "start": "411720",
    "end": "417160"
  },
  {
    "text": "Designing hardware and generating very l or vhdl um lexify is a good example of",
    "start": "417160",
    "end": "424120"
  },
  {
    "text": "somewhere that's using it for modeling complex business domains they have a bunch of uh work in modeling uh",
    "start": "424120",
    "end": "431199"
  },
  {
    "text": "Financial contracts and the interaction between those that they use for oaml um",
    "start": "431199",
    "end": "436560"
  },
  {
    "text": "interestingly they use oaml but their P their primary platform is Windows um and",
    "start": "436560",
    "end": "442479"
  },
  {
    "text": "then a bunch of places are using it for uh IOS and Android mobile applications",
    "start": "442479",
    "end": "451319"
  },
  {
    "text": "so I think it's a it's generally useful these places are using it they're finding value out of it um so you know",
    "start": "451440",
    "end": "459680"
  },
  {
    "start": "458000",
    "end": "916000"
  },
  {
    "text": "maybe it's something to consider so I've taken this this sort of top thing as a",
    "start": "459680",
    "end": "465000"
  },
  {
    "text": "is not quite a quote but it's sort of a quote um so it's EML provides you with all that you need to program in general",
    "start": "465000",
    "end": "471639"
  },
  {
    "text": "defining data structures functions and the means for combining them so I I borrowed this and edited a little bit",
    "start": "471639",
    "end": "477520"
  },
  {
    "text": "from Peter novik's uh book called paradigms of artificial intelligence programming but I think this sort of",
    "start": "477520",
    "end": "484639"
  },
  {
    "text": "captures um kind of this is the essence of most programming languages but for",
    "start": "484639",
    "end": "490080"
  },
  {
    "text": "oaml there's a particular set of features that make a real difference and",
    "start": "490080",
    "end": "495120"
  },
  {
    "text": "without those features and this tasteful collection of of features that work well",
    "start": "495120",
    "end": "500520"
  },
  {
    "text": "together there okam wouldn't be as successful and was be as effective as it",
    "start": "500520",
    "end": "505639"
  },
  {
    "text": "is so we've kind of had a little bit of look that with again algebraic data",
    "start": "505639",
    "end": "511080"
  },
  {
    "text": "types and we'll go through some examples type inference first class",
    "start": "511080",
    "end": "516599"
  },
  {
    "text": "functions uh strict evaluation and large scale typed patterns so this is the",
    "start": "516599",
    "end": "523839"
  },
  {
    "text": "first slide that's got some code on it um there's a few few code slides so here",
    "start": "523839",
    "end": "529200"
  },
  {
    "text": "we're looking at um so on the right hand side as you look at the a look at the",
    "start": "529200",
    "end": "534240"
  },
  {
    "text": "screen we've got some algebraic data types so that's not too scary um so the",
    "start": "534240",
    "end": "540440"
  },
  {
    "text": "author and book are defining records and so records are just a collection of labeled data um and then we've got an",
    "start": "540440",
    "end": "547920"
  },
  {
    "text": "Australian Boolean value which is truthy and so this is representing a variant so",
    "start": "547920",
    "end": "553000"
  },
  {
    "text": "that's a choice between different options so these are the basic building blocks that you use in O camel to build",
    "start": "553000",
    "end": "559600"
  },
  {
    "text": "up more rich and complex types um the second second code snippet",
    "start": "559600",
    "end": "565120"
  },
  {
    "text": "I've got here is a example from the grp see uh tutorial Library um and so I I",
    "start": "565120",
    "end": "574600"
  },
  {
    "text": "won't go into like the details of what it's doing but the intent That I Want from this is that you're passing around",
    "start": "574600",
    "end": "580640"
  },
  {
    "text": "functions defining functions passing functions into other things is quite a natural thing so we've got a couple of",
    "start": "580640",
    "end": "586800"
  },
  {
    "text": "functions here which let uh say hello is introducing a binding or a function",
    "start": "586800",
    "end": "592640"
  },
  {
    "text": "that's got this logic in it and then we're passing so that's one way of defining a function the other way is",
    "start": "592640",
    "end": "598200"
  },
  {
    "text": "with this fun requ so the til f is like a labeled argument to this uh function make and it's",
    "start": "598200",
    "end": "607000"
  },
  {
    "text": "passing in a function that's taking a request doing something and returning some sort of grpc",
    "start": "607000",
    "end": "613519"
  },
  {
    "text": "response um hopefully that's it's not scary and it's sort of Fairly readable",
    "start": "613519",
    "end": "619959"
  },
  {
    "text": "um but this this concept of passing around functions is much more mainstream",
    "start": "619959",
    "end": "625399"
  },
  {
    "text": "than it used to be when I started doing FP but it's quite a natural natural thing there's not too many barers there",
    "start": "625399",
    "end": "632000"
  },
  {
    "text": "so I won go on about that too much more um second thing so type inferencing in a",
    "start": "632000",
    "end": "639480"
  },
  {
    "text": "camel is complete um what do I mean by that so maybe you've worked with a functional",
    "start": "639480",
    "end": "648320"
  },
  {
    "text": "statically typed language like hasal or Scala or something like that and you've",
    "start": "648320",
    "end": "653720"
  },
  {
    "text": "had to annotate things and write down okay I'm writing this function",
    "start": "653720",
    "end": "659639"
  },
  {
    "text": "okay it doesn't type check why doesn't it type check oh I need to specifically say here's the type for this thing",
    "start": "659639",
    "end": "667240"
  },
  {
    "text": "that's not a problem in O camel the the type checking for o camel is complete it will find the most General type for a",
    "start": "667240",
    "end": "673360"
  },
  {
    "text": "situation you don't need to write types for functions um it'll find the most General",
    "start": "673360",
    "end": "679600"
  },
  {
    "text": "one for that um for that code which is really nice because you don't have to",
    "start": "679600",
    "end": "684959"
  },
  {
    "text": "write deal with these complicated type annotations um got a very natural flow",
    "start": "684959",
    "end": "690560"
  },
  {
    "text": "of writing code without needing to specify everything up front um but it also means that the code when when the",
    "start": "690560",
    "end": "697600"
  },
  {
    "text": "code Type checks then it'll compile and it should fit together I won't say it'll",
    "start": "697600",
    "end": "704720"
  },
  {
    "text": "it'll just work because that lots of people say that about functional languages like once it compiles it works",
    "start": "704720",
    "end": "710560"
  },
  {
    "text": "um but at least everything fits together the way that you think it it it should and that gives you a bit bit more extra",
    "start": "710560",
    "end": "716560"
  },
  {
    "text": "confidence that the code should work um so the the second thing for o camel",
    "start": "716560",
    "end": "724519"
  },
  {
    "text": "that it has compared to a lot of high school or let's just say High School um",
    "start": "724519",
    "end": "730920"
  },
  {
    "text": "is it strictly evaluated language and that's really nice because it kind of maps to the way that we think about",
    "start": "730920",
    "end": "737079"
  },
  {
    "text": "programming and the way most people have been taught programming in most other",
    "start": "737079",
    "end": "742920"
  },
  {
    "text": "languages so in this example here the code is evaluated from the top to the",
    "start": "742920",
    "end": "748680"
  },
  {
    "text": "bottom there's nothing unusual about it it's sort of evaluated that you would the way",
    "start": "748680",
    "end": "754360"
  },
  {
    "text": "that you would expect in Ruby and in Elixir and in um in Java or C or",
    "start": "754360",
    "end": "761720"
  },
  {
    "text": "something like that it's just kind of obvious or the way that you would",
    "start": "761720",
    "end": "768920"
  },
  {
    "text": "expect the second the second part about the strictness of evaluation of O camel is that it's it runs those statements so",
    "start": "768920",
    "end": "776720"
  },
  {
    "text": "it's not doing something strange behind the scenes it's just running the codee as you see there um this example so",
    "start": "776720",
    "end": "784880"
  },
  {
    "text": "going to this this example is taken from the grpc tutorial again um and it's",
    "start": "784880",
    "end": "790199"
  },
  {
    "text": "setting up um so it's running Let's uh round brackets is the main function and",
    "start": "790199",
    "end": "797320"
  },
  {
    "text": "it's running some sort of grpc server and listening on a connection and",
    "start": "797320",
    "end": "802600"
  },
  {
    "text": "running some structured concurrency code um to set up and clean up things um but",
    "start": "802600",
    "end": "809199"
  },
  {
    "text": "the thing that I want you to focus on is that there's no type annotations here if we if I was in an editor I'd show you",
    "start": "809199",
    "end": "815720"
  },
  {
    "text": "there's there's actually quite reasonably complicated types in behind all of this but we're not seeing any of",
    "start": "815720",
    "end": "822920"
  },
  {
    "text": "it and we don't have to write any of it and hopefully it's it's more readable and straightforward to review and look",
    "start": "822920",
    "end": "829519"
  },
  {
    "text": "at than it would be if there was type annotations everywhere um and then the final thing",
    "start": "829519",
    "end": "836360"
  },
  {
    "text": "and we'll get to this a little bit later is that OK cel's got great support for programming in the large with modules",
    "start": "836360",
    "end": "842040"
  },
  {
    "text": "and abstractions over modules and here there's a little bit uh no previous",
    "start": "842040",
    "end": "847560"
  },
  {
    "text": "previous code so we've got a little bit of this where we're saying module say hello so we're passing in an entire",
    "start": "847560",
    "end": "854120"
  },
  {
    "text": "module um into some other code um and we don't have an example here",
    "start": "854120",
    "end": "862839"
  },
  {
    "text": "so and with the with the idea of having modules um so example a module might be",
    "start": "862839",
    "end": "870480"
  },
  {
    "text": "something like an INT so you've got you've got an INT module and there's some ways of creating it there maybe",
    "start": "870480",
    "end": "876240"
  },
  {
    "text": "there's a way of pretty printing it there's some other operations associated with that and with modeling this in the",
    "start": "876240",
    "end": "883079"
  },
  {
    "text": "type system and our camel that means that you can pass around this module type and do abstractions over the module",
    "start": "883079",
    "end": "889480"
  },
  {
    "text": "type and pass it into other sorts of code and you can even extend the built-in modules or other people's",
    "start": "889480",
    "end": "896000"
  },
  {
    "text": "modules with your own code known as monkey pack matching when I was doing it in rails um so you could but in a",
    "start": "896000",
    "end": "903000"
  },
  {
    "text": "principle typed way so you can kind of know that it's you're not doing something runtime um but you're not",
    "start": "903000",
    "end": "909680"
  },
  {
    "text": "doing something that won't get checked elsewhere so that's really nice next phrase so changing changing",
    "start": "909680",
    "end": "918279"
  },
  {
    "start": "916000",
    "end": "1164000"
  },
  {
    "text": "tact here a little bit so how does statically typed functional programmers",
    "start": "918279",
    "end": "923320"
  },
  {
    "text": "write code so I've sort of based this on my experience but also on this really cool paper here um that wase presented",
    "start": "923320",
    "end": "931759"
  },
  {
    "text": "at uh Splash or oops one an academic conference um and there's a link there",
    "start": "931759",
    "end": "938079"
  },
  {
    "text": "if you want to look it up and that goes through sort of a sociology sort of",
    "start": "938079",
    "end": "943639"
  },
  {
    "text": "approach on how functional programmers write code which is really cool because",
    "start": "943639",
    "end": "949120"
  },
  {
    "text": "most of the other examples I've seen of this have been more um o oriented um",
    "start": "949120",
    "end": "955480"
  },
  {
    "text": "papers so out of this and out of my experience I've sort of pulled out sort of five main points that I want to talk",
    "start": "955480",
    "end": "962199"
  },
  {
    "text": "about about how FP programmers write code so it's this process of",
    "start": "962199",
    "end": "968839"
  },
  {
    "text": "iteratively development iterative development of the types and their inhabitants so as a as an FP programmer",
    "start": "968839",
    "end": "976959"
  },
  {
    "text": "you naturally start by writing down the types res representing the concepts your",
    "start": "976959",
    "end": "982120"
  },
  {
    "text": "program needs to handle this works nicely with things like event modeling or DDD that other speakers have SP",
    "start": "982120",
    "end": "988519"
  },
  {
    "text": "spoken about but these Concepts might be things like orders customers or whatever",
    "start": "988519",
    "end": "993639"
  },
  {
    "text": "your domain concepts are so I really like the DDD terminology here and I think that approach works really nicely",
    "start": "993639",
    "end": "999959"
  },
  {
    "text": "with oaml you give a nice name to the different types and then once you've got this skeleton of types you start writing",
    "start": "999959",
    "end": "1007000"
  },
  {
    "text": "functions over those types fleshing out the operations that apply to your domain Concepts so how does a customer get",
    "start": "1007000",
    "end": "1013720"
  },
  {
    "text": "created what happens to an order during its life cycle you know maybe order gets",
    "start": "1013720",
    "end": "1019399"
  },
  {
    "text": "created and then some maybe gets checked um paid for fulfilled you know there's",
    "start": "1019399",
    "end": "1025120"
  },
  {
    "text": "different different events during that life cycle and from this you get a collection of functions and maybe some",
    "start": "1025120",
    "end": "1031160"
  },
  {
    "text": "other modules as collections of related functionality along with more questions and more types and you sort of iterate",
    "start": "1031160",
    "end": "1038319"
  },
  {
    "text": "on this until you're happy with the design so this works nicely with existing processes that maybe other that",
    "start": "1038319",
    "end": "1045959"
  },
  {
    "text": "you're using from other languages but it fits in nicely and then for o camel you",
    "start": "1045959",
    "end": "1051360"
  },
  {
    "text": "have this extra typing information about module signatures so we talked about we introduced modules before so a module",
    "start": "1051360",
    "end": "1058520"
  },
  {
    "text": "can have a signature and module signatures contain the types and function sign signatures for a potential",
    "start": "1058520",
    "end": "1065520"
  },
  {
    "text": "module so you can write module signatures before you write the implementation for the module and you",
    "start": "1065520",
    "end": "1071280"
  },
  {
    "text": "can type check your code that uses that module without having an implementation of that module and so you can you can",
    "start": "1071280",
    "end": "1078960"
  },
  {
    "text": "write up a this is what I think it looks like and then you can write other code that uses it and you don't have to",
    "start": "1078960",
    "end": "1084200"
  },
  {
    "text": "implement all of it to make it type check so you can do it in this more incremental",
    "start": "1084200",
    "end": "1089360"
  },
  {
    "text": "fashion and this is kind of the core programming Loop that you experience using a camel is like defining types",
    "start": "1089360",
    "end": "1096679"
  },
  {
    "text": "you're defining some um trans Transformations over those types and",
    "start": "1096679",
    "end": "1101799"
  },
  {
    "text": "then you combining those and iterating on those maybe going back and then you type",
    "start": "1101799",
    "end": "1108679"
  },
  {
    "text": "check you're using your compiler as a companion in writing your code so when you add a new thing to a uh a data type",
    "start": "1108679",
    "end": "1116880"
  },
  {
    "text": "you compile it the compiler says oh here's this list of places like almost like a to-do list of places I haven't",
    "start": "1116880",
    "end": "1123720"
  },
  {
    "text": "considered it here or here or here so the compiler is kind of like this companion it's not an AI companion but",
    "start": "1123720",
    "end": "1130200"
  },
  {
    "text": "it's kind of like we've heard a lot about AI but it's it's it's it's gives you a reminder of where you need to",
    "start": "1130200",
    "end": "1136320"
  },
  {
    "text": "consider things and so compared to like an AI thing which might go I'm going to",
    "start": "1136320",
    "end": "1141760"
  },
  {
    "text": "write some code for you or I'm going to assume what you mean I kind of like that",
    "start": "1141760",
    "end": "1147000"
  },
  {
    "text": "everywhere that it's pointing out is somewhere where I need to think so I need to sort of sit there and go okay",
    "start": "1147000",
    "end": "1152280"
  },
  {
    "text": "what does it mean in this context when I've got this new information rather than going oh I'll just put something in",
    "start": "1152280",
    "end": "1158480"
  },
  {
    "text": "there or I'll ignore it cool um so changing tact a little bit",
    "start": "1158480",
    "end": "1167080"
  },
  {
    "start": "1164000",
    "end": "1390000"
  },
  {
    "text": "I want to go into a couple of case studies for places where I've used o camel um and just talk about some of the",
    "start": "1167080",
    "end": "1172760"
  },
  {
    "text": "benefits that we've got from putting o camel in those places so one place that we're using it a lot is um to interrupt",
    "start": "1172760",
    "end": "1180520"
  },
  {
    "text": "with other languages so here's an here's a lovely asy diagram of uh representing",
    "start": "1180520",
    "end": "1187320"
  },
  {
    "text": "um an idealized abstraction of our CI systems so I won't go into it too much",
    "start": "1187320",
    "end": "1192559"
  },
  {
    "text": "but the idea is that you've got these communicating um communicating domain Ms",
    "start": "1192559",
    "end": "1199280"
  },
  {
    "text": "and there's interrupt between them and you're passing information in between these these boxes so we've got a",
    "start": "1199280",
    "end": "1205200"
  },
  {
    "text": "JavaScript front ends we've got a web server using dream we've got some sort of build pipeline which is the logic for",
    "start": "1205200",
    "end": "1211799"
  },
  {
    "text": "building packages say got some scheduler that tells that has the capability to",
    "start": "1211799",
    "end": "1216960"
  },
  {
    "text": "execute these commands and we've got a bunch of workers that will take those so",
    "start": "1216960",
    "end": "1222240"
  },
  {
    "text": "where we've got a lot of value for o camel in this is enforcing um boundaries",
    "start": "1222240",
    "end": "1228320"
  },
  {
    "text": "so if you if you look at say the captain P so Captain Proto is a serialization",
    "start": "1228320",
    "end": "1234440"
  },
  {
    "text": "RPC protocol in between the web server and the pipeline so okl gives you a nice",
    "start": "1234440",
    "end": "1240640"
  },
  {
    "text": "way of enforcing the typed boundaries between those things so you can make sure that your serialization on The Wire",
    "start": "1240640",
    "end": "1247880"
  },
  {
    "text": "um data types don't leak Into Your Logic so you can enforce this boundary this",
    "start": "1247880",
    "end": "1253159"
  },
  {
    "text": "forces's validation boundary between the two so that when you get into your real code your your types and your data is",
    "start": "1253159",
    "end": "1262320"
  },
  {
    "text": "valid you're not dealing with oh maybe this is an optional type or maybe I've added this type or there's sort of two",
    "start": "1262320",
    "end": "1268559"
  },
  {
    "text": "different versions of it um so you can enforce these boundaries using types the",
    "start": "1268559",
    "end": "1274080"
  },
  {
    "text": "second place we've used it really effectively um is to do type- directed property testing so you might have seen",
    "start": "1274080",
    "end": "1280600"
  },
  {
    "text": "some other talks about contract testing so that's that's great and we could have used that here for for something like",
    "start": "1280600",
    "end": "1286559"
  },
  {
    "text": "Captain P or or um grpc if we're using that um what what o camel and type",
    "start": "1286559",
    "end": "1292799"
  },
  {
    "text": "directed property testing brings is that rather than just having that for your interface definition between things you",
    "start": "1292799",
    "end": "1298720"
  },
  {
    "text": "have it for all of your things so anything that you've got a type for you can use the the structure of that type",
    "start": "1298720",
    "end": "1304840"
  },
  {
    "text": "to generate properties and generate tests from those and we've had great value from doing that",
    "start": "1304840",
    "end": "1311279"
  },
  {
    "text": "um third thing making invalid States unrepresentable and that's sort of part",
    "start": "1311279",
    "end": "1316840"
  },
  {
    "text": "of um so the idea there is that kind of like null is the worst the",
    "start": "1316840",
    "end": "1322880"
  },
  {
    "text": "worst um or best example is like if you have to consider null everywhere in your",
    "start": "1322880",
    "end": "1327960"
  },
  {
    "text": "program then you've got all of this extra code validating that null doesn't exist so the idea with making invalid",
    "start": "1327960",
    "end": "1334480"
  },
  {
    "text": "States unrepresentable is that if you can validate that you've handled the null on the outside then all of your",
    "start": "1334480",
    "end": "1340919"
  },
  {
    "text": "code inside of that can just go yeah it's never going to be null and so",
    "start": "1340919",
    "end": "1346000"
  },
  {
    "text": "that's like that's fine for nulls but what about for other things you know enforcing these these these uh",
    "start": "1346000",
    "end": "1353200"
  },
  {
    "text": "boundaries and making sure that inside your core logic you're not having to go oh but this came off GPC I need to make",
    "start": "1353200",
    "end": "1360720"
  },
  {
    "text": "sure that this is not null okay so that's the idea with with making invalid States",
    "start": "1360720",
    "end": "1366200"
  },
  {
    "text": "unrepresentable and the fourth thing is we've got great support for RPC",
    "start": "1366200",
    "end": "1371799"
  },
  {
    "text": "protocols in oaml so we've got things like Captain P JPC Thrift Proto Buffs",
    "start": "1371799",
    "end": "1379400"
  },
  {
    "text": "Json uh open API all of those sorts of things it gives you a great opportunity",
    "start": "1379400",
    "end": "1385559"
  },
  {
    "text": "to experiment with including a camel into an existing system so another place that we've and I",
    "start": "1385559",
    "end": "1393320"
  },
  {
    "start": "1390000",
    "end": "1911000"
  },
  {
    "text": "like to call this extending to the front end um so another place we've used a camel a lot is in building uis so web",
    "start": "1393320",
    "end": "1401760"
  },
  {
    "text": "uis um so a camel has a really mature story for compiling to JavaScript",
    "start": "1401760",
    "end": "1408360"
  },
  {
    "text": "there's not one but two wellestablished compilers for compiling to JavaScript so",
    "start": "1408360",
    "end": "1414640"
  },
  {
    "text": "the first one is called JS ofo camel um it's also sometimes written as JS o but",
    "start": "1414640",
    "end": "1419760"
  },
  {
    "text": "that's hard to say so that's the typed version well the typed version and JS of oel is usually the spoken version um so",
    "start": "1419760",
    "end": "1427120"
  },
  {
    "text": "that's a b that's a compiler from uh okel B code to JavaScript it makes it",
    "start": "1427120",
    "end": "1432760"
  },
  {
    "text": "really easy to take an existing oel program and just compile it to run in",
    "start": "1432760",
    "end": "1437919"
  },
  {
    "text": "node or in the browser I've literally taken projects written without a thought for JavaScript and then compiled them",
    "start": "1437919",
    "end": "1445000"
  },
  {
    "text": "either to nodejs or put them into a website just by changing the build uh",
    "start": "1445000",
    "end": "1451000"
  },
  {
    "text": "language to say give me JavaScript rather than give me bite code or give me",
    "start": "1451000",
    "end": "1456200"
  },
  {
    "text": "compiled code so the focus for using JS uh JS of O camel is if you have existing",
    "start": "1456200",
    "end": "1462240"
  },
  {
    "text": "okel code and expect to generally use OK camel code and it does support ffi into",
    "start": "1462240",
    "end": "1467279"
  },
  {
    "text": "JavaScript but it's it's maybe not as natural as this next one so mange is branded as oel",
    "start": "1467279",
    "end": "1475840"
  },
  {
    "text": "for JavaScript developers which says a lot about its focus so I've got a link to the website um so it takes it",
    "start": "1475840",
    "end": "1482760"
  },
  {
    "text": "compiles each individual okl source file into a JavaScript module which means",
    "start": "1482760",
    "end": "1488559"
  },
  {
    "text": "that it interacts really nicely with the existing JavaScript ecosystem and tooling so it can reuse you can reuse",
    "start": "1488559",
    "end": "1495679"
  },
  {
    "text": "JavaScript module bundlers like webpack you can uh import okel code just like",
    "start": "1495679",
    "end": "1502679"
  },
  {
    "text": "any other JavaScript module like it was typescript or playing JavaScript importing assets like CSS files and",
    "start": "1502679",
    "end": "1509279"
  },
  {
    "text": "fonts in the same way as you would do in a JavaScript project and with this focus milange is",
    "start": "1509279",
    "end": "1515600"
  },
  {
    "text": "really good for working inside Rich web applications so it interacts it uses a",
    "start": "1515600",
    "end": "1521039"
  },
  {
    "text": "lot of the tools a lot of the technologies that would you would be using for JavaScript so for this i' in",
    "start": "1521039",
    "end": "1527080"
  },
  {
    "text": "my opinion i' I'd say if you're building a rich web application look at mange",
    "start": "1527080",
    "end": "1532600"
  },
  {
    "text": "it's also got really mature bindings for react so you can reuse your react knowledge but using the typed ecosystem",
    "start": "1532600",
    "end": "1540679"
  },
  {
    "text": "of oaml on top of that and it's got a real focus of that that interoperability",
    "start": "1540679",
    "end": "1546279"
  },
  {
    "text": "with the JavaScript ecosystem cool so this is kind of a",
    "start": "1546279",
    "end": "1554760"
  },
  {
    "text": "somewhat representative box diagram of an example um of a system that I worked",
    "start": "1554760",
    "end": "1559960"
  },
  {
    "text": "on which was doing uh it was a JavaScript front end and it was doing",
    "start": "1559960",
    "end": "1566440"
  },
  {
    "text": "uh it was an application for helping in education to help kids learn to read and",
    "start": "1566440",
    "end": "1572919"
  },
  {
    "text": "do mathematics and that sort of thing so the details aren't really important but the the idea is that you've got you've",
    "start": "1572919",
    "end": "1579480"
  },
  {
    "text": "got some sort of RPC where you talk back to a server you've got some sort of presentation layer and you've got a whole bunch of uh components and you've",
    "start": "1579480",
    "end": "1586799"
  },
  {
    "text": "got some sort of data store which is representing the data that gets sent to the server and back um so we had a",
    "start": "1586799",
    "end": "1594679"
  },
  {
    "text": "number of challenges with this system and I think what oaml would bring to",
    "start": "1594679",
    "end": "1600000"
  },
  {
    "text": "this particular system that we didn't have at the time is like a number of",
    "start": "1600000",
    "end": "1605399"
  },
  {
    "text": "things so we had a lot of issues with ill formed HTML this was in the HTML 5",
    "start": "1605399",
    "end": "1612159"
  },
  {
    "text": "sort of canvas sort of migration um we had a lot of problems with ill formed HTML that would um generate bad pages",
    "start": "1612159",
    "end": "1621080"
  },
  {
    "text": "and bad displays and break the application so in okl we've got this Library called Ty XML um which is a",
    "start": "1621080",
    "end": "1629399"
  },
  {
    "text": "typed HTML generation Library it's valid by construction um that extends to",
    "start": "1629399",
    "end": "1637679"
  },
  {
    "text": "composing different bits of tyml so as you compose different bits they're also valid by construction the Whole Thing",
    "start": "1637679",
    "end": "1644559"
  },
  {
    "text": "Remains well typed going back to this making invalid unrepresentable if your if your um whole",
    "start": "1644559",
    "end": "1652240"
  },
  {
    "text": "structure is typed and you can't represent you know the wrong link here",
    "start": "1652240",
    "end": "1657520"
  },
  {
    "text": "or a an H H link without a ref or something like that you just can't build",
    "start": "1657520",
    "end": "1663679"
  },
  {
    "text": "it so you can't you don't have to consider it the second place that we we",
    "start": "1663679",
    "end": "1668799"
  },
  {
    "text": "had issues with and this was all written in JavaScript is routes and links and",
    "start": "1668799",
    "end": "1675360"
  },
  {
    "text": "routes well more links pointing to routes that didn't exist or routes that were there where we had to have string",
    "start": "1675360",
    "end": "1683799"
  },
  {
    "text": "um concatenation to build up the links so there's there's multiple libraries in no camel that provide this nice valid by",
    "start": "1683799",
    "end": "1691679"
  },
  {
    "text": "construction typed routes and links so you combine the two you have one representation of it and then you know",
    "start": "1691679",
    "end": "1698679"
  },
  {
    "text": "that when it compiles that all of your links and all of your routes match up you can't point to something that",
    "start": "1698679",
    "end": "1703840"
  },
  {
    "text": "doesn't exist so type routes and typed links means no more broken",
    "start": "1703840",
    "end": "1709440"
  },
  {
    "text": "links uh the third thing is typed data components so what do I mean by that so",
    "start": "1709440",
    "end": "1715240"
  },
  {
    "text": "we were using a JavaScript um project called emberjs which I don't know",
    "start": "1715240",
    "end": "1720279"
  },
  {
    "text": "whether that still exists or whether it's that popular maybe it's something else these days um JavaScript moves so",
    "start": "1720279",
    "end": "1726039"
  },
  {
    "text": "quickly it's hard to keep up so the basic the basic problem that we had was when we wanted to change data",
    "start": "1726039",
    "end": "1732320"
  },
  {
    "text": "representation in our data store um we had JavaScript and if we wanted to work",
    "start": "1732320",
    "end": "1739600"
  },
  {
    "text": "out whether the things worked we either needed to run the application or run a",
    "start": "1739600",
    "end": "1746519"
  },
  {
    "text": "whole bunch of integration tests to check whether the components fitted together if that was in a typed language",
    "start": "1746519",
    "end": "1753279"
  },
  {
    "text": "like o camel then your types would take care of that if it compiled and it type",
    "start": "1753279",
    "end": "1759240"
  },
  {
    "text": "checked then things work together and as you as you evolve things things would continue to work or they would break",
    "start": "1759240",
    "end": "1765559"
  },
  {
    "text": "with the compiler so you'd avoid these sort of errors that we were getting with",
    "start": "1765559",
    "end": "1771480"
  },
  {
    "text": "with um data representation and conversion between",
    "start": "1771480",
    "end": "1776919"
  },
  {
    "text": "things um the fourth thing that I wanted to go about is changing and closing the loop between",
    "start": "1777640",
    "end": "1785480"
  },
  {
    "text": "the front and the back end so what we've used okam for is because we've got a",
    "start": "1785480",
    "end": "1792159"
  },
  {
    "text": "JavaScript compiler and we can produce JavaScript on the front end and we can use on the back end we have this thing",
    "start": "1792159",
    "end": "1799480"
  },
  {
    "text": "where we can start sharing types between the two and we can start sharing logic between the two because it's just a it's",
    "start": "1799480",
    "end": "1805880"
  },
  {
    "text": "just a compiler um a build system option to say oh produce me JavaScript or produce me oaml so with this you can do",
    "start": "1805880",
    "end": "1813640"
  },
  {
    "text": "really cool things like okay I've I want to serice side render my page okay I've",
    "start": "1813640",
    "end": "1819120"
  },
  {
    "text": "got the code here to do that that lives on the server but what if I want to when that gets updated I want to render the",
    "start": "1819120",
    "end": "1825039"
  },
  {
    "text": "page on the client site well you know if you've got two different two different text Stacks or you've got say Ruby on",
    "start": "1825039",
    "end": "1831880"
  },
  {
    "text": "the front on the back end and you've got JavaScript on the front end you might need to write that code twice well with",
    "start": "1831880",
    "end": "1837799"
  },
  {
    "text": "o camel you can have your code shared between the front and the back end and you don't need to worry about writing it",
    "start": "1837799",
    "end": "1843679"
  },
  {
    "text": "twice fixing the bugs changing your representation as it evolves the code is",
    "start": "1843679",
    "end": "1848720"
  },
  {
    "text": "the same code and with some simple annotations to the build uh build",
    "start": "1848720",
    "end": "1854200"
  },
  {
    "text": "language you can say Okay produce produce both versions of this and then I'll ship one with my front end and I'll",
    "start": "1854200",
    "end": "1860039"
  },
  {
    "text": "ship one with my my backend server so that's really powerful and the final one",
    "start": "1860039",
    "end": "1865880"
  },
  {
    "text": "if you haven't heard about wasm before I'm not sure anyone's heard about wasum um few people um so Wass this really",
    "start": "1865880",
    "end": "1873840"
  },
  {
    "text": "cool um there's a couple of other talks about this the wasm is a really cool um new way of of running JavaScript um or",
    "start": "1873840",
    "end": "1881519"
  },
  {
    "text": "web assembly um so a camel has again not one but two different wasm compilers um",
    "start": "1881519",
    "end": "1887639"
  },
  {
    "text": "that are being worked on at the moment they are functional um but there they rely on some experimental support in the",
    "start": "1887639",
    "end": "1894880"
  },
  {
    "text": "browsers but at the moment that you're able to run compile oaml to",
    "start": "1894880",
    "end": "1900360"
  },
  {
    "text": "wasm um using with a with a couple of couple of extensions and I can go into",
    "start": "1900360",
    "end": "1906679"
  },
  {
    "text": "that later so those are a few places that we've been using EML um now switch back to to something",
    "start": "1906679",
    "end": "1916039"
  },
  {
    "start": "1911000",
    "end": "2052000"
  },
  {
    "text": "else so collaborate using types this is Yoda um practice type driven development",
    "start": "1916039",
    "end": "1924360"
  },
  {
    "text": "so what do I mean by that so with type driven development you use the types and",
    "start": "1924360",
    "end": "1930760"
  },
  {
    "text": "the interfaces as the design and collaboration tool so you're not using",
    "start": "1930760",
    "end": "1935840"
  },
  {
    "text": "something that's abstracted from your language you're not using something that is in a separate file or a separate",
    "start": "1935840",
    "end": "1943159"
  },
  {
    "text": "document or something like that you're using the things that you're actually going to write your program",
    "start": "1943159",
    "end": "1949679"
  },
  {
    "text": "for um and on top of that you can with camel you can choose how tightly you",
    "start": "1949679",
    "end": "1955679"
  },
  {
    "text": "want to type your programs so it doesn't have to be the case and maybe I",
    "start": "1955679",
    "end": "1961080"
  },
  {
    "text": "certainly heard it when I was learning FP everything needs to be super tightly typed and you know you know hammer it",
    "start": "1961080",
    "end": "1968440"
  },
  {
    "text": "until it is is so like you might want to start off with something that's a little bit more Loosely typed you know you",
    "start": "1968440",
    "end": "1974960"
  },
  {
    "text": "might want to go oh at the the moment I just want to prototype and okay if this is a string or an INT for data",
    "start": "1974960",
    "end": "1982159"
  },
  {
    "text": "representations obviously that's terrible for something that's production not everything's strings and you can",
    "start": "1982159",
    "end": "1987799"
  },
  {
    "text": "tighten that up later on enforcing more structure and sort of buying more into",
    "start": "1987799",
    "end": "1993559"
  },
  {
    "text": "it and adding more structure on top of it as you learn more about it but you can also start with just using",
    "start": "1993559",
    "end": "2000120"
  },
  {
    "text": "strings um the more the more crucial the component is to the correctness of your",
    "start": "2000120",
    "end": "2006679"
  },
  {
    "text": "system the more effort and typing go into getting it right like if there's this core piece of your business process",
    "start": "2006679",
    "end": "2014519"
  },
  {
    "text": "or doing some calculations that must be correct spend your time there don't burn",
    "start": "2014519",
    "end": "2020760"
  },
  {
    "text": "developer time nailing down you know something that doesn't I won't say",
    "start": "2020760",
    "end": "2026960"
  },
  {
    "text": "doesn't matter but is less critical for what you're doing you can certainly end up writing or should I say typing",
    "start": "2026960",
    "end": "2033440"
  },
  {
    "text": "yourself into a corner where the type's created to model what you want are too restrictive and get in your way or make",
    "start": "2033440",
    "end": "2040399"
  },
  {
    "text": "the larger changes that you want to do more difficult than they should be like all good things like Yoda would tell us",
    "start": "2040399",
    "end": "2046440"
  },
  {
    "text": "there needs to be",
    "start": "2046440",
    "end": "2049158"
  },
  {
    "text": "balance next topic refactoring fearlessly I think this is the most",
    "start": "2051679",
    "end": "2056878"
  },
  {
    "start": "2052000",
    "end": "2264000"
  },
  {
    "text": "important slide in the whole talk well yeah this is the most important slide",
    "start": "2056879",
    "end": "2062839"
  },
  {
    "text": "more of your time will be spent reading and modifying existing code than writing new code like how much of your time do",
    "start": "2062839",
    "end": "2069520"
  },
  {
    "text": "you actually write brand new code like for me maybe 10% of the time maybe you",
    "start": "2069520",
    "end": "2078000"
  },
  {
    "text": "know on a hacking day maybe it's 80% of the time but it's certainly not all the time and what I think um gets what I",
    "start": "2078000",
    "end": "2086480"
  },
  {
    "text": "think is a superpower of something like o camel is that it supports you in refactoring and modifying code because",
    "start": "2086480",
    "end": "2094720"
  },
  {
    "text": "that's what you're going to do more of the time gives you a huge leg up in dealing with code maintenance things",
    "start": "2094720",
    "end": "2101000"
  },
  {
    "text": "like exhaustive patent matching combined with the typing information tells you where the issues are in your code you",
    "start": "2101000",
    "end": "2107800"
  },
  {
    "text": "know go and check all of these places you know it won't fix them for you but it'll point out oh you haven't thought",
    "start": "2107800",
    "end": "2113720"
  },
  {
    "text": "about this here what about if this changes and I think that's hugely important and something that isn't",
    "start": "2113720",
    "end": "2120200"
  },
  {
    "text": "talked about enough so for example for with our with our author and book thing say I'm doing uh a online store or",
    "start": "2120200",
    "end": "2128160"
  },
  {
    "text": "actually writing a library um sry a home library for my books you know if I wanted to add in the ISBN which is the",
    "start": "2128160",
    "end": "2136640"
  },
  {
    "text": "the serial number for books so if I added that in there and then just compiled my project it would point out",
    "start": "2136640",
    "end": "2143119"
  },
  {
    "text": "all of the places where I haven't thought about the ISBN you know is that in the display logic is that in the",
    "start": "2143119",
    "end": "2150160"
  },
  {
    "text": "serialization maybe I'm serializing it to a database maybe it's in some CLI tool where I'm rendering it out you know",
    "start": "2150160",
    "end": "2157640"
  },
  {
    "text": "it'll point out all the places where I haven't thought about it I think this is really important and not talked about",
    "start": "2157640",
    "end": "2162960"
  },
  {
    "text": "enough in terms of languages and their",
    "start": "2162960",
    "end": "2167680"
  },
  {
    "text": "use so refactoring fearlessly so this test driven development Loop is what I",
    "start": "2168160",
    "end": "2175400"
  },
  {
    "text": "started with when I started doing software development because I wanted really correct and great software so",
    "start": "2175400",
    "end": "2181640"
  },
  {
    "text": "what do you do you write some tests describing how you expect something to work you run these tests and they fail",
    "start": "2181640",
    "end": "2187400"
  },
  {
    "text": "of course they do because you haven't written the code for it you write some code to make one or more tests pass and",
    "start": "2187400",
    "end": "2192880"
  },
  {
    "text": "then you either write some more code or fix some more tests and you go around this Loop so what I'm suggesting is you",
    "start": "2192880",
    "end": "2199760"
  },
  {
    "text": "replace this with type driven development what's the essence of what this is asking you for",
    "start": "2199760",
    "end": "2206319"
  },
  {
    "text": "so looking at this you're what you're trying to do is you're trying to",
    "start": "2206319",
    "end": "2211760"
  },
  {
    "text": "describe how things should work but you're describing it test code",
    "start": "2211760",
    "end": "2217400"
  },
  {
    "text": "you're not describing it in your your actual code that's running so what you do with types and functions over those",
    "start": "2217400",
    "end": "2225520"
  },
  {
    "text": "types is you encode those properties that you expect to hold for your program into the types and then the compiler",
    "start": "2225520",
    "end": "2233839"
  },
  {
    "text": "checks that those things are there the key idea is encoding these properties in your types and you get free checks about",
    "start": "2233839",
    "end": "2240400"
  },
  {
    "text": "these these properties the fastest code to write is the code that you don't need to write additionally by getting the",
    "start": "2240400",
    "end": "2247800"
  },
  {
    "text": "computer to check for you you can concentrate on other things knowing that the compiler has your back you only have",
    "start": "2247800",
    "end": "2254640"
  },
  {
    "text": "a certain amount of focus during a day and during a coding session why spend that checking things that you can",
    "start": "2254640",
    "end": "2261079"
  },
  {
    "text": "automate away going okay we'll do this this one",
    "start": "2261079",
    "end": "2267720"
  },
  {
    "start": "2264000",
    "end": "2328000"
  },
  {
    "text": "briefly um so getting getting the my knowledge from hack and use comments um",
    "start": "2267720",
    "end": "2273359"
  },
  {
    "text": "and the wisdom that they are um what if we train our engineers and they leave what if we don't and they",
    "start": "2273359",
    "end": "2281359"
  },
  {
    "text": "stay so at some point you're going to need to bring people on board um that's",
    "start": "2282079",
    "end": "2288280"
  },
  {
    "text": "a that's a common thing you have turnover in a business what I think with okam compared to a lot of other",
    "start": "2288280",
    "end": "2294440"
  },
  {
    "text": "languages I've used is it's a very small language it's got a set of orthogonal features that are well chosen that work",
    "start": "2294440",
    "end": "2300480"
  },
  {
    "text": "together it is learnable I've done this before I've brought people on from java",
    "start": "2300480",
    "end": "2305960"
  },
  {
    "text": "from C sharp from other backgrounds and taught them moamel it is possible it's not a big thing you're going to teach",
    "start": "2305960",
    "end": "2312560"
  },
  {
    "text": "people anyway when you join a new organization you're going to learn about how things are deployed what tooling",
    "start": "2312560",
    "end": "2317880"
  },
  {
    "text": "they're using that sort of thing why is teaching the person the language or the details about the language any different",
    "start": "2317880",
    "end": "2325839"
  },
  {
    "text": "I'm going to skip over a couple of bits here because there's a few things I want to get to at the end um so I mentioned",
    "start": "2325839",
    "end": "2331720"
  },
  {
    "start": "2328000",
    "end": "2505000"
  },
  {
    "text": "programming in the large and this is the second most important slide in the in the talk so PR programming in the large",
    "start": "2331720",
    "end": "2337280"
  },
  {
    "text": "what do I mean by that so I Define it in contrast to programming in the small and",
    "start": "2337280",
    "end": "2343240"
  },
  {
    "text": "this is an idea I got from a colleague Mark hibbit so programming in the small is within one file or maybe a couple of",
    "start": "2343240",
    "end": "2350040"
  },
  {
    "text": "files and it's programming with functions and values with you know yourself one other",
    "start": "2350040",
    "end": "2356920"
  },
  {
    "text": "coworker but it's typically restricted in scope and so most languages do really",
    "start": "2356920",
    "end": "2363079"
  },
  {
    "text": "well here by contrast programming in the large is what happens when you scale",
    "start": "2363079",
    "end": "2369520"
  },
  {
    "text": "that up what happens if you've got a huge number of files multiple Engineers all working on some complex Behavior as",
    "start": "2369520",
    "end": "2375920"
  },
  {
    "text": "you add more people and more code you need to find a way to organize things what I've experienced with Dynamic",
    "start": "2375920",
    "end": "2382000"
  },
  {
    "text": "languages like Ruby and JavaScript and even type languages like Scala is that you start introducing these conventions",
    "start": "2382000",
    "end": "2388720"
  },
  {
    "text": "you know put your controller logic over here in this directory over here and you name things in a certain way and if you",
    "start": "2388720",
    "end": "2394920"
  },
  {
    "text": "do this the framework and your colleagues will know what you're talking about and how it works like conventions",
    "start": "2394920",
    "end": "2400720"
  },
  {
    "text": "are fine and really useful but they fall down when you someone doesn't know or",
    "start": "2400720",
    "end": "2405800"
  },
  {
    "text": "doesn't follow the conventions or when you need to change the conventions because something was overlooked or",
    "start": "2405800",
    "end": "2411319"
  },
  {
    "text": "something gets added or you might upgrade your your framework um now your convention's less useful what if you",
    "start": "2411319",
    "end": "2417960"
  },
  {
    "text": "could encode that convention into a rule that the compiler enforces and this is what I'm talking about with programming",
    "start": "2417960",
    "end": "2423920"
  },
  {
    "text": "in the large fro ceml so we've got a bunch of we've seen modules signatures and packages we won't go over those but",
    "start": "2423920",
    "end": "2430000"
  },
  {
    "text": "we've got these four other things that are really good for organizing code in the large so we've got funs which are",
    "start": "2430000",
    "end": "2435960"
  },
  {
    "text": "functions from modules to modules so given you can pass in modules as your",
    "start": "2435960",
    "end": "2441040"
  },
  {
    "text": "arguments and you can get new Behavior out as a new module so this is a great",
    "start": "2441040",
    "end": "2446079"
  },
  {
    "text": "way of doing things like dependency injection or parameterization of your code you can write the abstract code",
    "start": "2446079",
    "end": "2451640"
  },
  {
    "text": "that you want to without worrying about the implementation details of certain dependencies so that's one way we got",
    "start": "2451640",
    "end": "2458000"
  },
  {
    "text": "this thing called generalized algebraic data types which are an extension of algebraic data types I won't go into too",
    "start": "2458000",
    "end": "2464520"
  },
  {
    "text": "much detail because that's like probably another hour um so they are a great way of encoding more information into your",
    "start": "2464520",
    "end": "2470920"
  },
  {
    "text": "algebraic data types and having Rich a way of patent matching and pulling apart your data types we also have first class",
    "start": "2470920",
    "end": "2477839"
  },
  {
    "text": "modules so this is basically modules as values so you can have a a parameter or",
    "start": "2477839",
    "end": "2483760"
  },
  {
    "text": "you can have a a let binding and you can put a module into there and you can pull it out so it gives you a nice sort of",
    "start": "2483760",
    "end": "2490560"
  },
  {
    "text": "more Dynamic way of of switching behaviors and then finally we've got",
    "start": "2490560",
    "end": "2496280"
  },
  {
    "text": "objects and classes so you can do proper object orientation in your functional programming which is which is quite cool",
    "start": "2496280",
    "end": "2502400"
  },
  {
    "text": "and sometimes quite useful um so might skip over this a little bit",
    "start": "2502400",
    "end": "2510720"
  },
  {
    "start": "2505000",
    "end": "2643000"
  },
  {
    "text": "um yeah let's go to this one so here's a sort of selection of of systems that",
    "start": "2510720",
    "end": "2517240"
  },
  {
    "text": "we've used like concrete systems we've used a camelon um to sort of show the breadth of things that we're doing so",
    "start": "2517240",
    "end": "2524000"
  },
  {
    "text": "one is O Builder which provides a CR crossplatform sandbox execution library that supports",
    "start": "2524000",
    "end": "2529839"
  },
  {
    "text": "Linux Mac OS Windows FreeBSD and all of the tier one architectures that okl",
    "start": "2529839",
    "end": "2535520"
  },
  {
    "text": "supports um so the the same code is is same abstract code is there but we",
    "start": "2535520",
    "end": "2542200"
  },
  {
    "text": "provide the we use funs to plug in different implement for the different platforms so it's a really great example",
    "start": "2542200",
    "end": "2549040"
  },
  {
    "text": "of using fun to structure something got CI okl CI which is a CI system for for",
    "start": "2549040",
    "end": "2555040"
  },
  {
    "text": "EML projects hosted on GitHub and gitlab um this solver service so when",
    "start": "2555040",
    "end": "2560960"
  },
  {
    "text": "you install packages you need to solve and find out what your dependencies are the interesting thing with this solver",
    "start": "2560960",
    "end": "2566480"
  },
  {
    "text": "service is it's written in a way that it's able to saturate a many core um",
    "start": "2566480",
    "end": "2572319"
  },
  {
    "text": "large machine um so I think we're running it across 80 cores at the moment on an arm machine and it's able to",
    "start": "2572319",
    "end": "2578640"
  },
  {
    "text": "saturate all of those within one okel um process well one o camel um",
    "start": "2578640",
    "end": "2586559"
  },
  {
    "text": "program another one is the docci so this is large scale documentation generation",
    "start": "2586559",
    "end": "2592000"
  },
  {
    "text": "for all oaml packages so at the moment I think it's a bit higher than this number so it's like 27,000 package versions and",
    "start": "2592000",
    "end": "2599480"
  },
  {
    "text": "builds those um incrementally um which is about is about 2 50 gab per run um",
    "start": "2599480",
    "end": "2610680"
  },
  {
    "text": "and takes you know maybe you know six or seven hours to build everything um and",
    "start": "2610680",
    "end": "2617640"
  },
  {
    "text": "then one of the final systems is opam repository CI which is a build system that validates the full Matrix of",
    "start": "2617640",
    "end": "2623920"
  },
  {
    "text": "operating systems Hardware um architectures and reverse dependencies across new packages that are added to",
    "start": "2623920",
    "end": "2631079"
  },
  {
    "text": "opam repository across a bunch of different so it does Windows it does Linux it does different distributions",
    "start": "2631079",
    "end": "2637240"
  },
  {
    "text": "and all that sort of thing ensuring the health of the package",
    "start": "2637240",
    "end": "2641599"
  },
  {
    "text": "Universe uh rid up how are we doing for time good okay um so just in just in summary",
    "start": "2642400",
    "end": "2650800"
  },
  {
    "start": "2643000",
    "end": "2683000"
  },
  {
    "text": "types are fantastic they're really great use them collaborate using types I think",
    "start": "2650800",
    "end": "2657040"
  },
  {
    "text": "a small language with orthogonal features that fit together is really really great you don't want a large",
    "start": "2657040",
    "end": "2663119"
  },
  {
    "text": "language where you have to pick in subsets of things pick a pick a language where people have considered it and just",
    "start": "2663119",
    "end": "2669359"
  },
  {
    "text": "put together a good well-considered set of features native support for refactoring",
    "start": "2669359",
    "end": "2675559"
  },
  {
    "text": "and code maintenance and this idea of language support for programming in the",
    "start": "2675559",
    "end": "2681960"
  },
  {
    "text": "large got a bunch of resources here um hopefully people can have a look at that",
    "start": "2682119",
    "end": "2688000"
  },
  {
    "start": "2683000",
    "end": "2731000"
  },
  {
    "text": "so there's some some details about different interesting projects uh real worlder camel is the is a good textbook",
    "start": "2688000",
    "end": "2695480"
  },
  {
    "text": "for learning o camel oxygen is a web programming framework that does a lot of those ideas about typed routes typed",
    "start": "2695480",
    "end": "2701920"
  },
  {
    "text": "HTML um and sharing code between the front back end and different places um",
    "start": "2701920",
    "end": "2708559"
  },
  {
    "text": "There's the link to the paper there about how statically type functional programmers right code um and then a few",
    "start": "2708559",
    "end": "2714920"
  },
  {
    "text": "other um examples most lexify I talked about earlier hrefs and some examples of",
    "start": "2714920",
    "end": "2721720"
  },
  {
    "text": "um how they're using it to using o camel to build their uis and then a link to",
    "start": "2721720",
    "end": "2727160"
  },
  {
    "text": "that Docker desktop uses o camel um information so I think that's that's",
    "start": "2727160",
    "end": "2733839"
  },
  {
    "start": "2731000",
    "end": "2742000"
  },
  {
    "text": "good let's call it there thank [Applause]",
    "start": "2733839",
    "end": "2740359"
  },
  {
    "text": "you",
    "start": "2740359",
    "end": "2743359"
  }
]