[
  {
    "start": "0",
    "end": "84000"
  },
  {
    "text": "[Music]",
    "start": "3550",
    "end": "7840"
  },
  {
    "text": "everybody's here me okay very good so thanks for coming to my",
    "start": "12599",
    "end": "18070"
  },
  {
    "text": "introduction to my criminal talk for those who don't know who I am my name is",
    "start": "18070",
    "end": "23770"
  },
  {
    "text": "Graham Roche I'm the Creator creates over a couple of relatively well-known",
    "start": "23770",
    "end": "29590"
  },
  {
    "text": "frameworks Grails and micronauts I work at a fantastic company called object",
    "start": "29590",
    "end": "36219"
  },
  {
    "text": "appearing who are really dedicated to open-source and I'm an engineer they're leaving the team behind Grails and",
    "start": "36219",
    "end": "41859"
  },
  {
    "text": "micronaut last year I was privileged enough to receive the Oracle",
    "start": "41859",
    "end": "48519"
  },
  {
    "text": "groundbreaker award for contributions to the groovy and grails community from Oracle the kind folks at Oracle and it",
    "start": "48519",
    "end": "56859"
  },
  {
    "text": "was an honor to be standing next to the creator of Kafka and all these amazing people to receive that award on the",
    "start": "56859",
    "end": "65228"
  },
  {
    "text": "agenda today we're going to look at the challenges facing Java and software in",
    "start": "65229",
    "end": "71470"
  },
  {
    "text": "general that you know is been around for a long time when adapting to things like",
    "start": "71470",
    "end": "77080"
  },
  {
    "text": "micro versus and traditional models we'll look at Mike we'll do some Mike not demos and we'll have time for",
    "start": "77080",
    "end": "82270"
  },
  {
    "text": "questions so serverless challenges server lists is all the rage nowadays",
    "start": "82270",
    "end": "89940"
  },
  {
    "start": "84000",
    "end": "480000"
  },
  {
    "text": "and there are definite challenges to using the java language in a service",
    "start": "89940",
    "end": "97750"
  },
  {
    "text": "scenario existing tools and frameworks that out there that were built you know",
    "start": "97750",
    "end": "104890"
  },
  {
    "text": "a decade ago are not really optimized as well as other technologies if you look",
    "start": "104890",
    "end": "111130"
  },
  {
    "text": "at something like go the language go or node they have you know superior cold",
    "start": "111130",
    "end": "117790"
  },
  {
    "text": "start and low memory performance and you have you know relatively well-known",
    "start": "117790",
    "end": "122860"
  },
  {
    "text": "folks like Tim Bray from Amazon making claims that you know not recommending Java for service and this is an",
    "start": "122860",
    "end": "130239"
  },
  {
    "text": "unfortunate scenario given that you know how popular Java is and and and it really is you have to think",
    "start": "130239",
    "end": "139989"
  },
  {
    "text": "about things in a completely different way with serverless so for example you",
    "start": "139989",
    "end": "145900"
  },
  {
    "text": "know that things like connection pools in a service model are not really necessary since your processes are",
    "start": "145900",
    "end": "151150"
  },
  {
    "text": "coming coming and going you don't really need to bother with local caches because those caches are going to disappear and",
    "start": "151150",
    "end": "158859"
  },
  {
    "text": "you really need to optimize for cold starts so you should be looking at technology based on your cold start",
    "start": "158859",
    "end": "165340"
  },
  {
    "text": "requirements essentially micro service is you know not the same as soulless",
    "start": "165340",
    "end": "172709"
  },
  {
    "text": "cold starts are also important so but you know not not as important plenty of",
    "start": "172709",
    "end": "178900"
  },
  {
    "text": "people people build much services and you know we're called starts or not the the with technologies where the cold",
    "start": "178900",
    "end": "184629"
  },
  {
    "text": "starts are not being important factor in your technology decision but the container is the deployment units and",
    "start": "184629",
    "end": "190299"
  },
  {
    "text": "you know containers in Java they do require special memory management and",
    "start": "190299",
    "end": "195639"
  },
  {
    "text": "you do have to optimize how Java uses memory in a container based environment",
    "start": "195639",
    "end": "203040"
  },
  {
    "text": "so if you look at traditional frameworks out there this will be your Jakarta is",
    "start": "203040",
    "end": "208239"
  },
  {
    "text": "your Springs and so forth like spring itself is really an amazing piece of",
    "start": "208239",
    "end": "213280"
  },
  {
    "text": "technology it does so many things that",
    "start": "213280",
    "end": "220030"
  },
  {
    "text": "for the developer and provides this massive productivity boost and it does",
    "start": "220030",
    "end": "225729"
  },
  {
    "text": "all these things though however by doing things at runtime so at runtime it will",
    "start": "225729",
    "end": "230979"
  },
  {
    "text": "read you know the bike code of the beans it finds it will analyze them",
    "start": "230979",
    "end": "236409"
  },
  {
    "text": "synthesizing annotations for each annotation on each beam method constructors and so forth distinct for",
    "start": "236409",
    "end": "243250"
  },
  {
    "text": "what's called construct annotation metadata annotation metadata is essentially meta information about the",
    "start": "243250",
    "end": "249489"
  },
  {
    "text": "annotations on your source files it's not enough in Java frameworks traditional Java frameworks to just read",
    "start": "249489",
    "end": "255790"
  },
  {
    "text": "those annotations because they may reference classes that are not on the class path you may want to find out what",
    "start": "255790",
    "end": "262150"
  },
  {
    "text": "meta annotations are if an annotation is annotated annotated with another annotation",
    "start": "262150",
    "end": "267430"
  },
  {
    "text": "there's all sorts of things that you want to factor in so so spring synthesizes this annotation metadata and",
    "start": "267430",
    "end": "272790"
  },
  {
    "text": "it builds reflective metadata as well for all the beans constructors fields",
    "start": "272790",
    "end": "279630"
  },
  {
    "text": "for performing what's called dependency injection and that's how traditional",
    "start": "279630",
    "end": "284919"
  },
  {
    "text": "frameworks work and you know all of this consumes a lot of memories so if you",
    "start": "284919",
    "end": "291070"
  },
  {
    "text": "have a you know if you're thinking about using something like spring in Jakarta II in a service service environment you",
    "start": "291070",
    "end": "297070"
  },
  {
    "text": "have a kind of tough technology this is in their head because you have to choose the appropriate technology for the job",
    "start": "297070",
    "end": "303430"
  },
  {
    "text": "and traditional frameworks are not typically the best choice now I also",
    "start": "303430",
    "end": "310750"
  },
  {
    "text": "want to differentiate here spring the container and spring the IE the dependency injection container and",
    "start": "310750",
    "end": "316270"
  },
  {
    "text": "spring the the library because there's many many fabulous libraries for spring many of them are usable without the",
    "start": "316270",
    "end": "322750"
  },
  {
    "text": "container so and the same thing with Jakarta Jakarta AE I imagine the micro",
    "start": "322750",
    "end": "330849"
  },
  {
    "text": "reality is that frameworks based on reflection and reflection is how pretty",
    "start": "330849",
    "end": "337120"
  },
  {
    "text": "much most Java frameworks work today become fat pretty quickly and there's a",
    "start": "337120",
    "end": "344500"
  },
  {
    "text": "reason for this which I'll get to in a minute but you know we love the programming model we love the productivity that",
    "start": "344500",
    "end": "350949"
  },
  {
    "text": "things like spring give us so we live with it but the question is you know what why can't we be more efficient",
    "start": "350949",
    "end": "357340"
  },
  {
    "text": "isn't there a way to be more efficient in Java and there's this correlation in",
    "start": "357340",
    "end": "364449"
  },
  {
    "text": "a typical spring application or traditionally application between the",
    "start": "364449",
    "end": "369699"
  },
  {
    "text": "amount or the number of lines of code and the startup time and memory consumption and as your particulars and",
    "start": "369699",
    "end": "376240"
  },
  {
    "text": "size you will start at time and memories consumption goes up this this this is an",
    "start": "376240",
    "end": "383110"
  },
  {
    "text": "unbreakable correlation and we let's do more of the reasons for it in minutes",
    "start": "383110",
    "end": "388750"
  },
  {
    "text": "but generally what's ended up happening in the Java frameworks space is people",
    "start": "388750",
    "end": "394539"
  },
  {
    "text": "have been making technology decisions on adopting technologies you know based on",
    "start": "394539",
    "end": "400150"
  },
  {
    "text": "their the memory consumption and startup time characteristics and in the bottom of bottom corner corner you got all these",
    "start": "400150",
    "end": "405850"
  },
  {
    "text": "like really high past starting low memory low memory consumption toolkits I",
    "start": "405850",
    "end": "411880"
  },
  {
    "text": "like to call them things like Rat Pack spark for Spock Java vertex and so on and they they make they consume very",
    "start": "411880",
    "end": "419919"
  },
  {
    "text": "little memory but they don't do a lot for you so you kind of have to hand roll your your you know your own di you have",
    "start": "419919",
    "end": "427630"
  },
  {
    "text": "to you know configure everything manually and then in the top right corner you've got the high productivity frameworks which you know people",
    "start": "427630",
    "end": "434729"
  },
  {
    "text": "university love if you look at if you look at the adoption of frameworks you know spring is out overwhelmingly",
    "start": "434729",
    "end": "441699"
  },
  {
    "text": "dominant and its dominant and one of the major reasons it's dominant is because",
    "start": "441699",
    "end": "447240"
  },
  {
    "text": "people love the productivity benefits it provides you it provides you with all",
    "start": "447240",
    "end": "453099"
  },
  {
    "text": "these auto configurations that are opinionated that do a lot for you and grails as well girls are still",
    "start": "453099",
    "end": "459009"
  },
  {
    "text": "immensely popular because it provides this convention over configuration auto configuration everything done for you",
    "start": "459009",
    "end": "465610"
  },
  {
    "text": "out of the box but it's a shame that we have to make this decision where you have to decide you know if I'm gonna go",
    "start": "465610",
    "end": "472300"
  },
  {
    "text": "in that corner I'm gonna use more memory or if I'm gonna go in this corner I'm gonna lose productivity it's a shame",
    "start": "472300",
    "end": "478449"
  },
  {
    "text": "we're in this scenario and there's various problems for Java for framework",
    "start": "478449",
    "end": "486250"
  },
  {
    "start": "480000",
    "end": "811000"
  },
  {
    "text": "developers for Java that make it break very very difficult to achieve low",
    "start": "486250",
    "end": "491919"
  },
  {
    "text": "memory with existing technology stacks one of them is the limited annotation",
    "start": "491919",
    "end": "498880"
  },
  {
    "text": "API so Java has annotations however as a",
    "start": "498880",
    "end": "503889"
  },
  {
    "text": "framework developer it's very hard to know you know you can kind of get all the annotations you can get the declared",
    "start": "503889",
    "end": "509979"
  },
  {
    "text": "annotations but you can't there's no API if you come out like refuse annotation metadata or say you've got an interface",
    "start": "509979",
    "end": "517328"
  },
  {
    "text": "that's implemented and mentioned by a class you can get the annotations in the",
    "start": "517329",
    "end": "522880"
  },
  {
    "text": "class but to get the annotations on the interface you have to kind of Traverse up the hierarchy to get the because you might want to inherit inherit",
    "start": "522880",
    "end": "529420"
  },
  {
    "text": "annotations from in its face there's no real way to like do very complex things in Java frameworks with",
    "start": "529420",
    "end": "535120"
  },
  {
    "text": "patients without provoking them at runtime which places an immense burden",
    "start": "535120",
    "end": "540430"
  },
  {
    "text": "on the framework developer another thing that places in immense burden on the framework developer is type eurasia",
    "start": "540430",
    "end": "545589"
  },
  {
    "text": "so type your Asia you know in Java has generics you have this you have this",
    "start": "545589",
    "end": "551680"
  },
  {
    "text": "field in your class right it's a list of string yeah you know it's a list of string because you can see it in your",
    "start": "551680",
    "end": "557920"
  },
  {
    "text": "source code you can see it this is list of string so now when I want to actually get you know figure out this is a list",
    "start": "557920",
    "end": "564370"
  },
  {
    "text": "of string at runtime I have to do all this gymnastics around like a reflection",
    "start": "564370",
    "end": "569589"
  },
  {
    "text": "and field and get parameterised type and get this and get that and get the next thing the analysis the amount of code",
    "start": "569589",
    "end": "576190"
  },
  {
    "text": "that is in frameworks to do analysis of generic types information is mind-blowing seriously it is and",
    "start": "576190",
    "end": "584100"
  },
  {
    "text": "reflection reflection is is slow it's slow because you know there's no weight",
    "start": "584100",
    "end": "592240"
  },
  {
    "text": "and physically possibly be faster than in blocking a method directly and because it's slow what frameworks tend",
    "start": "592240",
    "end": "598900"
  },
  {
    "text": "to do is create caches reflective data caches yeah they cache all this",
    "start": "598900",
    "end": "604390"
  },
  {
    "text": "reflection data and we enter ended up with all these reflection data caches you know if you look at a typical",
    "start": "604390",
    "end": "610360"
  },
  {
    "text": "project that's built with spring hibernate Jackson you have a reflective hibernate has a reflection reflection",
    "start": "610360",
    "end": "616720"
  },
  {
    "text": "cache Jackson has another reflection cache Spring has another reflection cast this",
    "start": "616720",
    "end": "622150"
  },
  {
    "text": "is like a Brazilian reflection caches because you know each framework is no standard way to define a reflection",
    "start": "622150",
    "end": "627730"
  },
  {
    "text": "cache so each framework defines its own one and they just fill up all the memory and it's really hard to optimize for",
    "start": "627730",
    "end": "634680"
  },
  {
    "text": "class path scanning class path scanning can be expensive it's not the main bottleneck in any of this but it's",
    "start": "634680",
    "end": "641350"
  },
  {
    "text": "certainly an expensive expensive activity dynamic class loading dynamic",
    "start": "641350",
    "end": "646990"
  },
  {
    "text": "class learning is slower than static class loading there's no way to really really get around that it just what it",
    "start": "646990",
    "end": "653830"
  },
  {
    "text": "is and all of these all of these problems are a real challenge for framework developers and you as",
    "start": "653830",
    "end": "661620"
  },
  {
    "text": "consumers of a framework maybe doesn't see this but it's it's real difficulty",
    "start": "661620",
    "end": "666970"
  },
  {
    "text": "in dealing with these things that the level so I always ask this question",
    "start": "666970",
    "end": "672120"
  },
  {
    "text": "imagine if communities or daca which we all of us run locally yeah we're written",
    "start": "672120",
    "end": "677410"
  },
  {
    "text": "in wood spring or Jakarta II now both of these systems are a suite of micro services if you look at the source code",
    "start": "677410",
    "end": "683260"
  },
  {
    "text": "they're built as a collection of micro services so and there's maybe like 20 30 30 of them 40 of them and imagine",
    "start": "683260",
    "end": "690850"
  },
  {
    "text": "running 20 30 40 java processes locally you every single one of us would need",
    "start": "690850",
    "end": "697830"
  },
  {
    "text": "one of these as a laptop right because the the memory consumption requirements",
    "start": "697830",
    "end": "704530"
  },
  {
    "text": "would be insane this is why a lot of people go to things like go you know because the thing consumes less memory",
    "start": "704530",
    "end": "710530"
  },
  {
    "text": "it takes first what's up far faster now why exactly is reflection the problem",
    "start": "710530",
    "end": "717970"
  },
  {
    "text": "and the good thing about Java today is that the job JDK is open JDK yeah you",
    "start": "717970",
    "end": "725860"
  },
  {
    "text": "can look at the source code so take a look at that line in the jdk source code",
    "start": "725860",
    "end": "732490"
  },
  {
    "text": "that is aligned in java the language class what that line does is at the first access of reflective data any",
    "start": "732490",
    "end": "740050"
  },
  {
    "text": "reflective that there whether it be a method to construct the field or even the interfaces on the class java will",
    "start": "740050",
    "end": "746950"
  },
  {
    "text": "initialize all of the reflective data for that class yeah everything",
    "start": "746950",
    "end": "752130"
  },
  {
    "text": "everything in there and it will and it will cache it in a cache which is using",
    "start": "752130",
    "end": "758470"
  },
  {
    "text": "a soft reference yeah so the reason reflection is a problem for memory is because reflection is indiscriminate",
    "start": "758470",
    "end": "765640"
  },
  {
    "text": "there's no way to ask a class actually for this class I want only reflective",
    "start": "765640",
    "end": "771010"
  },
  {
    "text": "data for these two methods or this field or these three fields and I don't care",
    "start": "771010",
    "end": "776590"
  },
  {
    "text": "about the rest it loads everything caches it using using using a software France and for",
    "start": "776590",
    "end": "784540"
  },
  {
    "text": "those you don't know what soft references are a soft reference basically means that it will not be garbage collected and told the Java",
    "start": "784540",
    "end": "790870"
  },
  {
    "text": "process is low on memory yeah so so basically as soon as you touch",
    "start": "790870",
    "end": "797350"
  },
  {
    "text": "reflective data in in a Java class you have got all that you've paid that memory consumption cost",
    "start": "797350",
    "end": "802780"
  },
  {
    "text": "and there's no way babe there's no way coming back from it yeah so reflection",
    "start": "802780",
    "end": "808540"
  },
  {
    "text": "is a problem if you want to achieve low memory having said all of the all of this Java's problems are are greatly",
    "start": "808540",
    "end": "817240"
  },
  {
    "text": "exaggerated there has been you know a campaign against Java since the",
    "start": "817240",
    "end": "822610"
  },
  {
    "text": "beginning of time to say that Java is dead because of Ruby on Rails or because",
    "start": "822610",
    "end": "828340"
  },
  {
    "text": "of note or because of not go that is the",
    "start": "828340",
    "end": "833710"
  },
  {
    "text": "trend golang is that is the new conqueror of Java but you know Java has",
    "start": "833710",
    "end": "840610"
  },
  {
    "text": "been dead forever and it's not dying it's not going in time soon unfortunately it's still number one language it will be the number one",
    "start": "840610",
    "end": "846970"
  },
  {
    "text": "language this year will be the number one language in five years time and I'm willing to put good money on that and it",
    "start": "846970",
    "end": "854020"
  },
  {
    "text": "can be fast just take a look at at Android and Mac note so if you look you",
    "start": "854020",
    "end": "859450"
  },
  {
    "text": "know Android on a mobile device they have the same low memory consumption requirements speed requirements as in",
    "start": "859450",
    "end": "865270"
  },
  {
    "text": "the Microsoft environment Java can be fast however many existing tools for",
    "start": "865270",
    "end": "870460"
  },
  {
    "text": "Java are based around these principles that I told you about it for which is reflection",
    "start": "870460",
    "end": "876460"
  },
  {
    "text": "runtime proxies runtime byte code generation generating bytecode at the",
    "start": "876460",
    "end": "881740"
  },
  {
    "text": "runtime is horrible for memory consumption because you have to generate classes at runtime which consumes more",
    "start": "881740",
    "end": "888339"
  },
  {
    "text": "memory bike buddy it suddenly for Amos Lee's byte buddy CG Lib Java assist",
    "start": "888339",
    "end": "893350"
  },
  {
    "text": "whatever your consuming memory by generating byte code at runtime so if you want to keep memory low don't",
    "start": "893350",
    "end": "900430"
  },
  {
    "text": "generate but runtime bytecode Javas advantages are so many though it's",
    "start": "900430",
    "end": "908500"
  },
  {
    "start": "903000",
    "end": "1000000"
  },
  {
    "text": "mature robust ecosystem there's not another language out there has the breadth and support in I des out there",
    "start": "908500",
    "end": "916240"
  },
  {
    "text": "whether you choose Visual Studio code where the issues IntelliJ whether you choose eclipse you are going to have a",
    "start": "916240",
    "end": "922630"
  },
  {
    "text": "fantastic experience with a great IDE code maintenance and refactoring is",
    "start": "922630",
    "end": "928540"
  },
  {
    "text": "unrivaled there's no there's not a single language out there that allows you to refactor and",
    "start": "928540",
    "end": "933860"
  },
  {
    "text": "and evolve a large coal-based in the same way Java does developer availability there are developers for",
    "start": "933860",
    "end": "941060"
  },
  {
    "text": "Java available readily and easily in market because it's mentally popular",
    "start": "941060",
    "end": "947080"
  },
  {
    "text": "build systems if anybody had any done any node JavaScript world you come",
    "start": "947080",
    "end": "953630"
  },
  {
    "text": "running back to Java with you know I and I never I never want to question maven again right I never want to question it",
    "start": "953630",
    "end": "960890"
  },
  {
    "text": "again so diversity as well Java is used everywhere mobile IOT server-side and",
    "start": "960890",
    "end": "967150"
  },
  {
    "text": "him such languages there's like language choices you got like Java Kotlin release",
    "start": "967150",
    "end": "972410"
  },
  {
    "text": "Karla there's like you know so many different languages out there written on",
    "start": "972410",
    "end": "977480"
  },
  {
    "text": "top of Java and it's a very diverse ecosystem and there's somebody mentioned",
    "start": "977480",
    "end": "982700"
  },
  {
    "text": "this the other day and I think it's absolutely treated but but I my language like go has all the features of Java Java start at time will match goes so",
    "start": "982700",
    "end": "990350"
  },
  {
    "text": "what's what's what's you know what what do you want to choose move to go now or just wait till Java catches up with in",
    "start": "990350",
    "end": "996470"
  },
  {
    "text": "terms of start of time which is going to be soon and like I said this is an",
    "start": "996470",
    "end": "1001630"
  },
  {
    "start": "1000000",
    "end": "1031000"
  },
  {
    "text": "already solve problem Android and the Android community already solved this",
    "start": "1001630",
    "end": "1007270"
  },
  {
    "text": "problem using what's called ahead of time compilation there's something called Google dagger which is a compile",
    "start": "1007270",
    "end": "1013750"
  },
  {
    "text": "time dependency injector it's completely reflection free it's limited in scope to di because they want to keep it Android",
    "start": "1013750",
    "end": "1019750"
  },
  {
    "text": "compatible but you know it it uses ahead",
    "start": "1019750",
    "end": "1024880"
  },
  {
    "text": "of time compilation to avoid reflection and keep memory low and performance fast",
    "start": "1024880",
    "end": "1030660"
  },
  {
    "text": "so what is ahead of time compilation a will a ot so if you listen to the AAT",
    "start": "1030660",
    "end": "1038110"
  },
  {
    "start": "1031000",
    "end": "1300000"
  },
  {
    "text": "folks they they they use phrases like the pre computation of application code",
    "start": "1038110",
    "end": "1044020"
  },
  {
    "text": "using closed world static analysis ok then it's just a fancy way of saying",
    "start": "1044020",
    "end": "1050740"
  },
  {
    "text": "just do more stuff at compile time and less stuff this stuff at runtime right",
    "start": "1050740",
    "end": "1056910"
  },
  {
    "text": "and that's where Mike Renaud comes in so micronaut is a micro services and",
    "start": "1056910",
    "end": "1065770"
  },
  {
    "text": "service focus framework it's the name Micra not right but it's also a complete application framework",
    "start": "1065770",
    "end": "1072039"
  },
  {
    "text": "for any type of application so whether you're building a category message or Microsoft servers or a CLI application",
    "start": "1072039",
    "end": "1081419"
  },
  {
    "text": "it uses ahead-of-time compilation to do",
    "start": "1081419",
    "end": "1086710"
  },
  {
    "text": "dependency injection and it takes it further than something like dagger because it supports AOP aspect oriented",
    "start": "1086710",
    "end": "1092320"
  },
  {
    "text": "programming configuration management beam introspection and everything-everything reflection free as",
    "start": "1092320",
    "end": "1098980"
  },
  {
    "text": "much as possible so what does Micra not use a OT for like I said all your di all",
    "start": "1098980",
    "end": "1106090"
  },
  {
    "text": "your pins ejection all your configuration injection the annotation metadata I talked about micro not will",
    "start": "1106090",
    "end": "1111850"
  },
  {
    "text": "pre compute a compile time the annotation metadata for all your source",
    "start": "1111850",
    "end": "1117220"
  },
  {
    "text": "files this means that there's no need to traverse through your class hierarchy and method hierarchy and reflectively do",
    "start": "1117220",
    "end": "1122860"
  },
  {
    "text": "all this work at runtime to figure out your annotation metadata because micron is going to do at a compilation time all",
    "start": "1122860",
    "end": "1129580"
  },
  {
    "text": "IFP proxies are computed at compile time essentially everything that is framework",
    "start": "1129580",
    "end": "1134799"
  },
  {
    "text": "infrastructure is done at compilation time to avoid paying the cost work in",
    "start": "1134799",
    "end": "1140080"
  },
  {
    "text": "terms of memory and in terms of start time at runtime so with micronaut you",
    "start": "1140080",
    "end": "1147279"
  },
  {
    "text": "can build you can build march services you can build server list applications you can build message driven applications and this is actually one of",
    "start": "1147279",
    "end": "1154570"
  },
  {
    "text": "the most popular areas that we've seen in micronauts we have an immense amount of interest in micro not from the Kafka",
    "start": "1154570",
    "end": "1160240"
  },
  {
    "text": "community building message driven micro services that don't have a UI just listening to Kafka message streams and",
    "start": "1160240",
    "end": "1167019"
  },
  {
    "text": "and CLI applications as well a lot of interest in micro not for building CLI",
    "start": "1167019",
    "end": "1172389"
  },
  {
    "text": "applications we you can even build Android applications we have micro up and running on Android you can use the",
    "start": "1172389",
    "end": "1178450"
  },
  {
    "text": "same client used on the server on Android and communicate back and forth",
    "start": "1178450",
    "end": "1183570"
  },
  {
    "text": "anything that is got a static void main is fair game from micronaut so what is",
    "start": "1183570",
    "end": "1190210"
  },
  {
    "text": "Mike not really I'd like to think it is an application framework for the future for the next 10 years its reflection",
    "start": "1190210",
    "end": "1197259"
  },
  {
    "text": "free runtime proxy free uses äôt it provides api's for doing alt",
    "start": "1197259",
    "end": "1205450"
  },
  {
    "text": "as well so one of the coolest projects built on micro not out there right now is our is our swagger support we at we",
    "start": "1205450",
    "end": "1213220"
  },
  {
    "text": "have support for swagger for defying you api's and at compilation time it analyzes your your your source files and",
    "start": "1213220",
    "end": "1221470"
  },
  {
    "text": "produces the swagger llamo a compile-time so that we don't have to analyze your classes at runtime in cost",
    "start": "1221470",
    "end": "1227200"
  },
  {
    "text": "you know pay all that cost to run times you know it computes all of your swagger llamo at compilation time that's using",
    "start": "1227200",
    "end": "1234910"
  },
  {
    "text": "our äôt api's arrow and by the way it does let you build microservices so it",
    "start": "1234910",
    "end": "1240910"
  },
  {
    "text": "does that too so micronauts has had a huge impact since we announced it in",
    "start": "1240910",
    "end": "1247059"
  },
  {
    "text": "march 2000 1818 we announced then we open sources on 28th of May it sparked",
    "start": "1247059",
    "end": "1254470"
  },
  {
    "text": "industry-wide improvements from companies I Red Hat and pivotal with spring bootie 2.2 starts up a whole",
    "start": "1254470",
    "end": "1261820"
  },
  {
    "text": "bunch faster and and and that's great news for the whole industry and Red Hat",
    "start": "1261820",
    "end": "1267880"
  },
  {
    "text": "came up with something called Quackers curiously the first commit exactly a month after Microsoft microwatt was open",
    "start": "1267880",
    "end": "1274690"
  },
  {
    "text": "sourced curious but which uses ahead of time compilation to do dependency free dependency reflection for EDI and so",
    "start": "1274690",
    "end": "1282580"
  },
  {
    "text": "forth so my Kanade is changing the face of server-side Java by by by essentially",
    "start": "1282580",
    "end": "1288900"
  },
  {
    "text": "changing this perception that it's load startup consumes lots of memory and it's one of those projects after that is",
    "start": "1288900",
    "end": "1294760"
  },
  {
    "text": "really changing the perception of how I was perceived at being heavyweight then",
    "start": "1294760",
    "end": "1300640"
  },
  {
    "start": "1300000",
    "end": "1780000"
  },
  {
    "text": "there's another interesting technology it's called grow vm and grow vm is a is",
    "start": "1300640",
    "end": "1309100"
  },
  {
    "text": "a polygon runtime a virtual machine includes a whole bunch of things truffle",
    "start": "1309100",
    "end": "1316030"
  },
  {
    "text": "a language runtime for doing interrupts between languages one of the features it",
    "start": "1316030",
    "end": "1321370"
  },
  {
    "text": "has is called is it like a native image tool that converts Java using ahead of time compilation into native machine",
    "start": "1321370",
    "end": "1328480"
  },
  {
    "text": "code and it has a bunch of requirements for using",
    "start": "1328480",
    "end": "1335610"
  },
  {
    "text": "which you know things like you have to declare your reflective usage upfront you have to declare upfront which",
    "start": "1335779",
    "end": "1341960"
  },
  {
    "text": "classes are going to be like proxied using runtime proxies and because Mike",
    "start": "1341960",
    "end": "1349130"
  },
  {
    "text": "Renault doesn't use runtime proxies doesn't use reflection doesn't use dynamic class loading it works really",
    "start": "1349130",
    "end": "1357019"
  },
  {
    "text": "well with micronauts you know just out of the box because without any special additional integration or configuration",
    "start": "1357019",
    "end": "1363850"
  },
  {
    "text": "now that's the good news the bad news regarding Rolla vm is that it's still",
    "start": "1363850",
    "end": "1370669"
  },
  {
    "text": "very much experimental so I wouldn't class the native image tool as production-ready yet it's certainly good",
    "start": "1370669",
    "end": "1378590"
  },
  {
    "text": "to try out now and and but it does have",
    "start": "1378590",
    "end": "1384769"
  },
  {
    "text": "some disadvantages so for example the compile times along very long compile times and you lose if you essentially",
    "start": "1384769",
    "end": "1392659"
  },
  {
    "text": "lose write once run anywhere yeah so that's something that you need to factor in like you have to build the machine",
    "start": "1392659",
    "end": "1398539"
  },
  {
    "text": "image on the machine that it's gonna run on it's not like Java you can just run it anyway yeah so so there's there's",
    "start": "1398539",
    "end": "1407570"
  },
  {
    "text": "some downsides but there are some serious upsides so start at time from micronaut for example is 20 milliseconds",
    "start": "1407570",
    "end": "1413389"
  },
  {
    "text": "and memory memory consumption is only 18 megabyte so certainly you can write you can run all these processes in dark",
    "start": "1413389",
    "end": "1419690"
  },
  {
    "text": "they're written in Java you know 100 of them in your and you consider me consuming a fraction of the memory so",
    "start": "1419690",
    "end": "1427159"
  },
  {
    "text": "it's an interesting project and want to keep an eye on so that's enough of the talk in the fluff and whatever else",
    "start": "1427159",
    "end": "1433279"
  },
  {
    "text": "let's actually do some demos and have some fun hopefully things don't go horribly wrong I might need your help in the audience",
    "start": "1433279",
    "end": "1440029"
  },
  {
    "text": "if they do go horribly horribly wrong then I apologize in advance this is live demos everything you see is live I'm not",
    "start": "1440029",
    "end": "1445789"
  },
  {
    "text": "recording anything so let's have a go so first of all let's get into presentation",
    "start": "1445789",
    "end": "1454190"
  },
  {
    "text": "mode so this is a micro node project and you know very similar structure to any",
    "start": "1454190",
    "end": "1461570"
  },
  {
    "text": "kind of your typical Java project there's an application class and",
    "start": "1461570",
    "end": "1467480"
  },
  {
    "text": "just has of main best method that has my cannot run and I can run this as just a",
    "start": "1467480",
    "end": "1474890"
  },
  {
    "text": "normal Java application and you can see that it starts up pretty fast eight",
    "start": "1474890",
    "end": "1481130"
  },
  {
    "text": "hundred and fifty milliseconds startup time instantaneous start up obviously this is",
    "start": "1481130",
    "end": "1487340"
  },
  {
    "text": "an empty application that's not doing much at this point in time but you know the startup time is already out of the",
    "start": "1487340",
    "end": "1493580"
  },
  {
    "text": "box a good thing so how do you actually build a a mark another application so",
    "start": "1493580",
    "end": "1499250"
  },
  {
    "text": "what I'm going to do is I'm going to create a greeting controller and just do",
    "start": "1499250",
    "end": "1504410"
  },
  {
    "text": "like a little hello world example yeah so let's see so there's sorry and we're",
    "start": "1504410",
    "end": "1513320"
  },
  {
    "text": "gonna say act controller this is gonna be great and let's just do you like the",
    "start": "1513320",
    "end": "1520970"
  },
  {
    "text": "typical hello world example of saying gift and the name and we're gonna greet",
    "start": "1520970",
    "end": "1528950"
  },
  {
    "text": "person and we're gonna say turn hello",
    "start": "1528950",
    "end": "1535600"
  },
  {
    "text": "name and that's our simple greeting controller so how would I write a test",
    "start": "1535600",
    "end": "1540770"
  },
  {
    "text": "with this let's let's have a look so I'm going to create a greeting controller",
    "start": "1540770",
    "end": "1546770"
  },
  {
    "text": "test it's going to be a micro node test it's going to have tested ten years I'm",
    "start": "1546770",
    "end": "1554480"
  },
  {
    "text": "going to test the grid and I'm going to inject into my Mac node test a a client",
    "start": "1554480",
    "end": "1562480"
  },
  {
    "text": "that is the an Rx HTTP client there it",
    "start": "1562480",
    "end": "1567560"
  },
  {
    "text": "is and we're going to map the client the root to the root URI then I'm going to",
    "start": "1567560",
    "end": "1574040"
  },
  {
    "text": "say client retrieve greet Fred and I'm",
    "start": "1574040",
    "end": "1581240"
  },
  {
    "text": "gonna say blocking first because it's a reactive client and we're gonna get the",
    "start": "1581240",
    "end": "1586730"
  },
  {
    "text": "result I'm gonna say assert equals",
    "start": "1586730",
    "end": "1591190"
  },
  {
    "text": "certain equals hello Fred that's why we",
    "start": "1593770",
    "end": "1599059"
  },
  {
    "text": "expecting back and we're gonna get there I'm gonna sir today what comes back is",
    "start": "1599059",
    "end": "1604700"
  },
  {
    "text": "hello Fred so my controllers rendering the text hello Fred three-tier I we're sending great lot",
    "start": "1604700",
    "end": "1611720"
  },
  {
    "text": "Fred and we're gonna set the response now one of the interesting things about Micra not compared to to traditional",
    "start": "1611720",
    "end": "1619130"
  },
  {
    "text": "framework is it's all compilation time so that provides some advantages so any one thing you'll notice is that you know",
    "start": "1619130",
    "end": "1625580"
  },
  {
    "text": "you just have to define string name and another thing you know you can notice if I rename this to to say n for example",
    "start": "1625580",
    "end": "1634309"
  },
  {
    "text": "and I and I attempt to to run my test here it's attempt to run it you'll see",
    "start": "1634309",
    "end": "1642200"
  },
  {
    "text": "that I get a compilation error and it says you know the route declares the your variable name name name but no",
    "start": "1642200",
    "end": "1648530"
  },
  {
    "text": "course supporting method argument is present so at compilation time we are compile time checking your framework",
    "start": "1648530",
    "end": "1655159"
  },
  {
    "text": "level code because we're able to integrate with the compiler and that will catches a lot of things that you",
    "start": "1655159",
    "end": "1660350"
  },
  {
    "text": "know in traditional frameworks you would not you'd have to wait until run time to diagnose which is which which is pretty",
    "start": "1660350",
    "end": "1666440"
  },
  {
    "text": "cool so if I I'm going to rename that back to name I'm gonna run my test again",
    "start": "1666440",
    "end": "1673250"
  },
  {
    "text": "this time it's going to compile and you can see that the test runs instantaneously there's no waiting",
    "start": "1673250",
    "end": "1679909"
  },
  {
    "text": "around for your thing and then for your server to start up and this is a full integration test where my I've got my",
    "start": "1679909",
    "end": "1685850"
  },
  {
    "text": "server starting I got my client starting I'm running the tests invoking it's in working in the server and it's it's",
    "start": "1685850",
    "end": "1692179"
  },
  {
    "text": "instantaneous there's no there's no there's no waiting around it just runs so many frameworks out there force you",
    "start": "1692179",
    "end": "1698299"
  },
  {
    "text": "to make this choice where you say I I should use a mock MVC framework MVC tool",
    "start": "1698299",
    "end": "1705710"
  },
  {
    "text": "to mock out my because my service do slow so I have to mock out my MVC part",
    "start": "1705710",
    "end": "1710740"
  },
  {
    "text": "because doesn't start up fast enough all you make all projects that make a decision I'm not gonna write functional",
    "start": "1710740",
    "end": "1716000"
  },
  {
    "text": "tests because my it's too slow to run them you know you shouldn't be making a decision about whether you may run",
    "start": "1716000",
    "end": "1722270"
  },
  {
    "text": "functional tests or unit tests based on how fast your application starts up that's that shouldn't be a factor but it",
    "start": "1722270",
    "end": "1728840"
  },
  {
    "text": "is in Java because we're used to the the separation of functional tests and unit tests because things start up start up",
    "start": "1728840",
    "end": "1735529"
  },
  {
    "text": "to you slowly so as you can see my test runs instantaneously in the passes and",
    "start": "1735529",
    "end": "1742210"
  },
  {
    "text": "you know if you don't believe me about about this being a you know real request",
    "start": "1742210",
    "end": "1747740"
  },
  {
    "text": "and so forth you I can come in and say add a logger here for IO Don micronaut HTTP Val",
    "start": "1747740",
    "end": "1754490"
  },
  {
    "text": "client and I can say this is gonna be a trace level logging and you can see that",
    "start": "1754490",
    "end": "1766370"
  },
  {
    "text": "now when I when I run the test you can see the sending the operating requests",
    "start": "1766370",
    "end": "1772700"
  },
  {
    "text": "receiving the response etc etc and it's real really interaction between our",
    "start": "1772700",
    "end": "1779690"
  },
  {
    "text": "client and our service so but this is obviously like just a simple hello world what else can we do here it's create a",
    "start": "1779690",
    "end": "1787190"
  },
  {
    "text": "greeting object instead and then annotate it with at introspected in just at introspect this is an interesting",
    "start": "1787190",
    "end": "1792860"
  },
  {
    "text": "annotation in my keynote it lets you do reflection free being introspection so you can marshal JSON back and forth",
    "start": "1792860",
    "end": "1798590"
  },
  {
    "text": "without using reflection and I'm gonna give it some text I'm going to generate",
    "start": "1798590",
    "end": "1804980"
  },
  {
    "text": "a getter and setter and instead of returning a string we're gonna return a",
    "start": "1804980",
    "end": "1811220"
  },
  {
    "text": "greeting we you can say perfectly this into my text you can create a greeting",
    "start": "1811220",
    "end": "1816950"
  },
  {
    "text": "object there it is we can set the text",
    "start": "1816950",
    "end": "1822789"
  },
  {
    "text": "we can return the greeting and now if I run my test again you'll see that it's",
    "start": "1822789",
    "end": "1829730"
  },
  {
    "text": "gonna fail probably because instead of getting the the you know the text back I'm getting the actual JSON the raw JSON",
    "start": "1829730",
    "end": "1835549"
  },
  {
    "text": "back so I'm doing JSON interchange so on the clients on the client-side you know",
    "start": "1835549",
    "end": "1842450"
  },
  {
    "start": "1840000",
    "end": "1980000"
  },
  {
    "text": "I can I can alter this this client request here to receive a greeting",
    "start": "1842450",
    "end": "1847760"
  },
  {
    "text": "instead of a and get the actual unmarshal greeting object but what I'm",
    "start": "1847760",
    "end": "1853669"
  },
  {
    "text": "actually doing it now is demonstrate one of the really nice features of Micra node which is the client decorative client",
    "start": "1853669",
    "end": "1859370"
  },
  {
    "text": "I'm going to create an interface it's going to be a client it's going to be mapped to the Greek URI and it's gonna",
    "start": "1859370",
    "end": "1866060"
  },
  {
    "text": "return it's going to return a it's going to turn a Greek in fact what I'm gonna do is I'm gonna go to my controller you",
    "start": "1866060",
    "end": "1871730"
  },
  {
    "text": "can actually share it interface between client and server if you want I could extract this into another interface and have an operations I'm gonna stick it in",
    "start": "1871730",
    "end": "1878690"
  },
  {
    "text": "there and now instead of me so I've got this greeting clients it's just an",
    "start": "1878690",
    "end": "1884510"
  },
  {
    "text": "interface annotated with that client takes the name get the same type checking if I want over here on the name",
    "start": "1884510",
    "end": "1889760"
  },
  {
    "text": "variable instead of injecting this I'm gonna inject the actual client there it",
    "start": "1889760",
    "end": "1896330"
  },
  {
    "text": "is and I'm gonna get reaching your client greet Fred get texts and this is",
    "start": "1896330",
    "end": "1911320"
  },
  {
    "text": "gonna use my client to instead instead work the invoke the endpoints so I'm",
    "start": "1911320",
    "end": "1917360"
  },
  {
    "text": "I've got a decorative client and the cool thing about this is this is all compilation time yeah so Mike Rinder",
    "start": "1917360",
    "end": "1924470"
  },
  {
    "text": "Mike Rinder is not implementing this interface four-year run time at compilation time it's computing the",
    "start": "1924470",
    "end": "1930620"
  },
  {
    "text": "implementation so that a run time it's instantaneous it doesn't impact the dollar time I can create loads of these",
    "start": "1930620",
    "end": "1936140"
  },
  {
    "text": "clients and it will memory consumption and they're just classes then you'd get nude up so I think that's pretty cool",
    "start": "1936140",
    "end": "1944660"
  },
  {
    "text": "and of course you know the all the rage nowadays is to be react reactive so if instead you know this is obviously",
    "start": "1944660",
    "end": "1950900"
  },
  {
    "text": "blocking if I instead want to return in our RX Java single I can do that and you",
    "start": "1950900",
    "end": "1958880"
  },
  {
    "text": "know subscribe to it or whatever or you know in the case of a test call blocking yet its retrieve it and now we're doing",
    "start": "1958880",
    "end": "1967300"
  },
  {
    "text": "reactive non blocking interchange between client and server and it's more",
    "start": "1967300",
    "end": "1972890"
  },
  {
    "text": "or less the same deal and you know there's also some niceties in in micronauts go through some of them this",
    "start": "1972890",
    "end": "1979760"
  },
  {
    "text": "my controller for example is not really doing anything interesting but you know we have full di supports so you know",
    "start": "1979760",
    "end": "1986030"
  },
  {
    "text": "instead I can create like a get a a greeting new Java class that is a great",
    "start": "1986030",
    "end": "1992600"
  },
  {
    "text": "servus I can you know instead put this",
    "start": "1992600",
    "end": "1997759"
  },
  {
    "text": "method in there I can annotate this as a single tone I can create a field here",
    "start": "1997759",
    "end": "2006549"
  },
  {
    "text": "that is my my greeting service and we",
    "start": "2006549",
    "end": "2012789"
  },
  {
    "text": "can use constructor injection to inject the service we can then instead of",
    "start": "2012789",
    "end": "2018850"
  },
  {
    "text": "invoking having all this you know essential business logic darkling here we can delegate the work to my service",
    "start": "2018850",
    "end": "2025509"
  },
  {
    "text": "and my service is annotated with a singleton to declare it as a singleton",
    "start": "2025509",
    "end": "2031179"
  },
  {
    "text": "bean and that you know that that essentially does allows me to do full di",
    "start": "2031179",
    "end": "2037870"
  },
  {
    "text": "and you know inject things into other things and dependency injection and all that business so that's that's all",
    "start": "2037870",
    "end": "2043990"
  },
  {
    "text": "working really nicely and yes because we at compile time we have to create some",
    "start": "2043990",
    "end": "2049599"
  },
  {
    "text": "really nice areas as well so you know if I added the constructor and I was wondering you know inject a you you you",
    "start": "2049599",
    "end": "2055599"
  },
  {
    "text": "ID in here now there's no UUID bean this is something that doesn't exist obviously so this you know this would be",
    "start": "2055599",
    "end": "2063099"
  },
  {
    "text": "this would be an error now that's an area we're not able to to catch a compilation time because we're more and",
    "start": "2063099",
    "end": "2069069"
  },
  {
    "text": "you know dynamic in substitution of beans but you can see that the dependency injection error that you get",
    "start": "2069069",
    "end": "2074679"
  },
  {
    "text": "is really nice in that you know it tells you over here the path taken we try to",
    "start": "2074679",
    "end": "2081040"
  },
  {
    "text": "new up the controller that didn't work then we try to knee up the greeting servers then we try to knee up that and",
    "start": "2081040",
    "end": "2088060"
  },
  {
    "text": "we go to this argument and oh no new ID doesn't exist this that's a really nice",
    "start": "2088060",
    "end": "2094679"
  },
  {
    "text": "error reporting a mechanism in micronaut which is very cool configure in",
    "start": "2094679",
    "end": "2101349"
  },
  {
    "start": "2100000",
    "end": "2195000"
  },
  {
    "text": "configuration injections so I can say you know create a greeting configuration and then have a configuration properties",
    "start": "2101349",
    "end": "2107619"
  },
  {
    "text": "that map to greeting and maybe maybe I'm going to let my the stem of my message",
    "start": "2107619",
    "end": "2114280"
  },
  {
    "text": "be configurable so we're gonna have and used together in setter so this is my configuration we can inject that into my",
    "start": "2114280",
    "end": "2121930"
  },
  {
    "text": "service my configuration here",
    "start": "2121930",
    "end": "2127050"
  },
  {
    "text": "you can use constructor injection make this private final for example then in",
    "start": "2127319",
    "end": "2134619"
  },
  {
    "text": "the stem so if we can have like a default stem of hello and you know then",
    "start": "2134619",
    "end": "2145529"
  },
  {
    "text": "you do something like this greeting configuration get stem and make",
    "start": "2145529",
    "end": "2151839"
  },
  {
    "text": "it customizable by by a configuration so now so now if I went into my application",
    "start": "2151839",
    "end": "2158230"
  },
  {
    "text": "Yama file and I went greeting stem hola",
    "start": "2158230",
    "end": "2167849"
  },
  {
    "text": "then you'll see that my test will fail because I've changed the configuration",
    "start": "2167849",
    "end": "2176049"
  },
  {
    "text": "of my application and the injection just works so that's pretty cool so how are we doing for time not much",
    "start": "2176049",
    "end": "2182499"
  },
  {
    "text": "time left so we're gonna cut this short and go back to the presentation so that",
    "start": "2182499",
    "end": "2190559"
  },
  {
    "text": "there is a brief demo of micronaut you can define controllers you can find",
    "start": "2190559",
    "end": "2197049"
  },
  {
    "start": "2195000",
    "end": "2310000"
  },
  {
    "text": "clients everything is compilation time computer it's fast it stays fast how",
    "start": "2197049",
    "end": "2204249"
  },
  {
    "text": "small is it so we also wanted to be small in terms of like distribution size so when you build this into a war file",
    "start": "2204249",
    "end": "2210460"
  },
  {
    "text": "in this application that if I come in here and go into terminal and I say",
    "start": "2210460",
    "end": "2218829"
  },
  {
    "text": "maven W clean package and package it up and package it into a jar file you'll",
    "start": "2218829",
    "end": "2226029"
  },
  {
    "text": "see that the distribution size of my jar",
    "start": "2226029",
    "end": "2234819"
  },
  {
    "text": "file is just 12 megabytes so you can build a whole microservice in just a 12",
    "start": "2234819",
    "end": "2240489"
  },
  {
    "text": "megabyte jar file it's really small you know third party dependencies stays",
    "start": "2240489",
    "end": "2246160"
  },
  {
    "text": "small and you can also you know run this with the very little memory so I can say",
    "start": "2246160",
    "end": "2251170"
  },
  {
    "text": "Java jar just check that I'm using the right version of Java there's",
    "start": "2251170",
    "end": "2257210"
  },
  {
    "text": "so many distributions of Java now it's really getting quite silly how many",
    "start": "2257210",
    "end": "2265009"
  },
  {
    "text": "different different ones there okay so if I say Java XMS 10 megabytes jar",
    "start": "2265009",
    "end": "2276460"
  },
  {
    "text": "target reading service so the the the",
    "start": "2276460",
    "end": "2282259"
  },
  {
    "text": "thing distinct so stuffs are fast still starts up instantaneously I'm limited to 10 megabytes the memory consumption and",
    "start": "2282259",
    "end": "2289579"
  },
  {
    "text": "you can see that the actual Java process from for the micronaut app which is this",
    "start": "2289579",
    "end": "2295910"
  },
  {
    "text": "one is only consuming 75 megabyte of memory yeah and even if I hit all the requests you'll see the the memory consumptions",
    "start": "2295910",
    "end": "2302329"
  },
  {
    "text": "go up and the the memory consumption of a micro app it can be very small which",
    "start": "2302329",
    "end": "2310460"
  },
  {
    "start": "2310000",
    "end": "2658000"
  },
  {
    "text": "is pretty cool for instance Java start time is generally sub-second for Java or Kotlin all di everything happens in",
    "start": "2310460",
    "end": "2317180"
  },
  {
    "text": "compilation time so some stats call starts run a memory 800 milliseconds the",
    "start": "2317180",
    "end": "2324470"
  },
  {
    "text": "Eclipse open j9 j TK has a nice class sharing feature and if you enable it you",
    "start": "2324470",
    "end": "2329630"
  },
  {
    "text": "can actually get 300 milliseconds at a time if you go growl native you get 15",
    "start": "2329630",
    "end": "2335359"
  },
  {
    "text": "milliseconds at a time and any 50 megabyte of memory consumption again my keynote is deployable to alias lambda",
    "start": "2335359",
    "end": "2342049"
  },
  {
    "text": "and we support for Abe we have a support for API gateway a plus growl custom runtime gives you a hundred and fifty",
    "start": "2342049",
    "end": "2348650"
  },
  {
    "text": "minutes millisecond start ups and even for a simple function start up time is pretty fast on lambda Mike not 1.1 that",
    "start": "2348650",
    "end": "2356779"
  },
  {
    "text": "is out now in production ready where they have many clients using in production compile time di HTTP client",
    "start": "2356779",
    "end": "2363529"
  },
  {
    "text": "server one point one has RPC and graph QL supports rabbit in queue and",
    "start": "2363529",
    "end": "2368839"
  },
  {
    "text": "improvements that Kafka support we just released a reads Canada of Mackinaw 1.2 which includes our integrated reflection",
    "start": "2368839",
    "end": "2377029"
  },
  {
    "text": "free bean validation support and we support our VM 19 native but it's still",
    "start": "2377029",
    "end": "2383150"
  },
  {
    "text": "very much experimental and like I said it's hidden third-party library support is hidden miss",
    "start": "2383150",
    "end": "2389070"
  },
  {
    "text": "we continue continuing to support our BM native and we'll continue to evolve micronauts towards it but it's still",
    "start": "2389070",
    "end": "2394830"
  },
  {
    "text": "early days for native and substrate it's a healthy project tears development by",
    "start": "2394830",
    "end": "2400590"
  },
  {
    "text": "several OSI ideas we have a lot of contributors already we're already up to 2400 stars the project growing 6000",
    "start": "2400590",
    "end": "2409109"
  },
  {
    "text": "commits we have some exciting announcements coming in 2019 so it's going to be a pretty exciting year some",
    "start": "2409109",
    "end": "2419570"
  },
  {
    "text": "some I cannot resources you know if you we have a gala community if you want to",
    "start": "2419570",
    "end": "2425310"
  },
  {
    "text": "come chat to us online there's a really comprehensive user guide and the",
    "start": "2425310",
    "end": "2433109"
  },
  {
    "text": "micronaut guides website as well has had a lot of guys you know how to integrate",
    "start": "2433109",
    "end": "2438180"
  },
  {
    "text": "my corner with different technologies whether it be JPA whether it be database",
    "start": "2438180",
    "end": "2445650"
  },
  {
    "text": "security we have an epic FAQ Mike Rinder is completely open-source just if that's",
    "start": "2445650",
    "end": "2450990"
  },
  {
    "text": "obviously obviously one of the first questions we get asked and it's Apache licensed the project is on github",
    "start": "2450990",
    "end": "2457380"
  },
  {
    "text": "examples are there so so yeah and in",
    "start": "2457380",
    "end": "2463770"
  },
  {
    "text": "terms of Gras I didn't know if I was going to have much time because actually building a ground native image in Gras",
    "start": "2463770",
    "end": "2469670"
  },
  {
    "text": "it takes a significant amount of time so if I were going to list this and I'm",
    "start": "2469670",
    "end": "2476280"
  },
  {
    "text": "gonna use use the finding the grower when it is always a challenge there it",
    "start": "2476280",
    "end": "2481320"
  },
  {
    "text": "is so I'm gonna use growl 19 Java and",
    "start": "2481320",
    "end": "2486570"
  },
  {
    "text": "the way you build the growl native Minister Mike Ranaut is you package up your jar file which is what I've just",
    "start": "2486570",
    "end": "2491700"
  },
  {
    "text": "done then growl has a native image tool and what you say is I said if you run it",
    "start": "2491700",
    "end": "2497609"
  },
  {
    "text": "without the server no server there's cloth path target and greeting service",
    "start": "2497609",
    "end": "2504420"
  },
  {
    "text": "and you run this and this will start constructing your native image now I'm",
    "start": "2504420",
    "end": "2511770"
  },
  {
    "text": "going to set expectations here I could be talking for the next five minutes and it might not finish because you know",
    "start": "2511770",
    "end": "2518760"
  },
  {
    "text": "this is this is going to take a long time basically so I you know we could spend the next",
    "start": "2518760",
    "end": "2525369"
  },
  {
    "text": "five minutes watching terminal go by that could be entertaining but I'm not going to put you through through that",
    "start": "2525369",
    "end": "2531970"
  },
  {
    "text": "necessarily because we probably should say have time for Q&A so I did build a",
    "start": "2531970",
    "end": "2539290"
  },
  {
    "text": "backup image and you know if you start",
    "start": "2539290",
    "end": "2544390"
  },
  {
    "text": "it up you can see it starts up in 20 milliseconds really fast it uses like a",
    "start": "2544390",
    "end": "2550690"
  },
  {
    "text": "very little memory if we find the greeting service somewhere there it is",
    "start": "2550690",
    "end": "2557740"
  },
  {
    "text": "so it's using 11 megabyte of memory which is pretty impressive and but yeah",
    "start": "2557740",
    "end": "2565780"
  },
  {
    "text": "we you know grow VM is exciting technology we're really excited about it and we're really excited about the",
    "start": "2565780",
    "end": "2573310"
  },
  {
    "text": "substrate support becoming production-ready probably in 2020 I mentioned so just but keep an eye on",
    "start": "2573310",
    "end": "2580540"
  },
  {
    "text": "that technology so in summary then and to leave time for for Q&A micron or",
    "start": "2580540",
    "end": "2587440"
  },
  {
    "text": "lingual p.m. are leading the era of time crumble at ahead of time compilation revolution server-side Java is adapting",
    "start": "2587440",
    "end": "2595540"
  },
  {
    "text": "to the service world by changing doing things more more stuff at compilation time less stuff at runtime building more",
    "start": "2595540",
    "end": "2603640"
  },
  {
    "text": "efficient applications as possible with the right framework choices and with you know frameworks evolving I'm sure you",
    "start": "2603640",
    "end": "2610990"
  },
  {
    "text": "know you have members of the spring team here I'm sure even Springer's evolving to do some things at compilation time",
    "start": "2610990",
    "end": "2616570"
  },
  {
    "text": "and more stuff ahead of time and so forth and a or C sacrifices you know",
    "start": "2616570",
    "end": "2622420"
  },
  {
    "text": "Mike Renaud is not the Silver Bullet by any means IOT sacrifices compilation",
    "start": "2622420",
    "end": "2628060"
  },
  {
    "text": "speed to gain runtime speeds so compilation times are slower in our measurement around 50% may vary so you",
    "start": "2628060",
    "end": "2638020"
  },
  {
    "text": "sacrifice compilation speed to gain so much more and going native",
    "start": "2638020",
    "end": "2643359"
  },
  {
    "text": "in terms of substrate is an option for the future withdrawal VM which is an exciting project which you should keep an eye on",
    "start": "2643359",
    "end": "2648970"
  },
  {
    "text": "so that is my talk and we have time",
    "start": "2648970",
    "end": "2653940"
  }
]