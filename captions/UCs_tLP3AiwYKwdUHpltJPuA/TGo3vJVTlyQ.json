[
  {
    "start": "0",
    "end": "41000"
  },
  {
    "text": "[Music]",
    "start": "3520",
    "end": "7840"
  },
  {
    "text": "[Applause] thank you so my name is Dan Callahan you",
    "start": "11010",
    "end": "17550"
  },
  {
    "text": "can find me on twitter as callahan I've tweeted a link to all the links that are relevant for this talk so if you want to",
    "start": "17550",
    "end": "24029"
  },
  {
    "text": "learn more or see something you wanna learn more go to Twitter I work for Mozilla you might notice for Firefox",
    "start": "24029",
    "end": "30060"
  },
  {
    "text": "we're also the nonprofit that began the rust project and we are one of the co-inventors of webassembly",
    "start": "30060",
    "end": "37250"
  },
  {
    "text": "what I want to do today with this talk is start by demystifying webassembly",
    "start": "37250",
    "end": "43940"
  },
  {
    "start": "41000",
    "end": "103000"
  },
  {
    "text": "because I think we're at a point in the industry where many web developers have heard of love assembly and can probably",
    "start": "43940",
    "end": "50579"
  },
  {
    "text": "connect it to the ideas of performance or efficiency but I don't think we have a broad understanding of what web assembly really is what problem was it",
    "start": "50579",
    "end": "58590"
  },
  {
    "text": "trying to solve how does it do it what does it look like under the hood and so what I want to do first and foremost is have you leave this room feeling like",
    "start": "58590",
    "end": "65909"
  },
  {
    "text": "you're empowered to know when you should reach for web assembly and why the second thing I want to do is take that",
    "start": "65909",
    "end": "71820"
  },
  {
    "text": "knowledge and apply it outside of the browser because what web was simply set out to do was to lift a fundamental",
    "start": "71820",
    "end": "77130"
  },
  {
    "text": "limitation from the web and we happen to do so in a way that applies broadly to",
    "start": "77130",
    "end": "84420"
  },
  {
    "text": "everything from how we develop and distribute software potentially to edge computing and IOT devices and and I want",
    "start": "84420",
    "end": "90960"
  },
  {
    "text": "to convince you of the transformative potential of of assembly because I think it will influence everything about our",
    "start": "90960",
    "end": "97380"
  },
  {
    "text": "craft in the coming years and my remote",
    "start": "97380",
    "end": "103829"
  },
  {
    "start": "103000",
    "end": "188000"
  },
  {
    "text": "does not work very well I should have used the room's remote I will stand over here to understand what I mean by",
    "start": "103829",
    "end": "110490"
  },
  {
    "text": "fundamental limitations in web assembly or on the web that web assembly is trying to address you just look at what",
    "start": "110490",
    "end": "115619"
  },
  {
    "text": "our web technologies first and foremost in 1993 the first version of HTML was",
    "start": "115619",
    "end": "123360"
  },
  {
    "text": "introduced and this was wonderful but within three years we had added two",
    "start": "123360",
    "end": "128640"
  },
  {
    "text": "other languages we had add CSS and JavaScript because we found that there was something missing HTML alone",
    "start": "128640",
    "end": "133880"
  },
  {
    "text": "could not express everything we wanted the web to express I didn't have all the capabilities we wanted to have to have and so by 1996 we had HTML CSS and",
    "start": "133880",
    "end": "143390"
  },
  {
    "text": "JavaScript we had structure style and logic and these three technologies formed the basis of the open and",
    "start": "143390",
    "end": "150320"
  },
  {
    "text": "standards-based world wide web for the following 22 years so in the first three",
    "start": "150320",
    "end": "158840"
  },
  {
    "text": "years we went from from one to three and then for the following two decades we",
    "start": "158840",
    "end": "166160"
  },
  {
    "text": "haven't added anything else to the base of the web and sure HTML and JavaScript and CSS have gotten better and they've",
    "start": "166160",
    "end": "172250"
  },
  {
    "text": "evolved and they've they've added new capabilities but as far as fundamental open standards-based parts of the web we",
    "start": "172250",
    "end": "178580"
  },
  {
    "text": "stopped there and did we stop because we we finally found everything we needed or did we stopped for some other reason or",
    "start": "178580",
    "end": "184550"
  },
  {
    "text": "we were we not done yet when I think",
    "start": "184550",
    "end": "189890"
  },
  {
    "start": "188000",
    "end": "343000"
  },
  {
    "text": "about programming languages I tend to think about them on a spectrum from high level to low level we're at the lowest",
    "start": "189890",
    "end": "196640"
  },
  {
    "text": "level there's machine code the the actual instructions that the physical CPU inside of your computer understands",
    "start": "196640",
    "end": "202400"
  },
  {
    "text": "and just slightly higher level than that or languages like C C++ rust languages",
    "start": "202400",
    "end": "208160"
  },
  {
    "text": "that compile to machine code but that still give you the programmer a great degree of manual control you can control",
    "start": "208160",
    "end": "213800"
  },
  {
    "text": "how things exist in memory when memory is allocated when it's freed and I think for me and this is all subjective high",
    "start": "213800",
    "end": "220640"
  },
  {
    "text": "and low level don't have have static definitions but for me I think that control over memory is what makes the",
    "start": "220640",
    "end": "226220"
  },
  {
    "text": "difference between a high level and a low level language because on the opposite end of the spectrum where languages like JavaScript and Python and",
    "start": "226220",
    "end": "231230"
  },
  {
    "text": "Ruby and Lua and typescript which free you from having to worry about those",
    "start": "231230",
    "end": "237380"
  },
  {
    "text": "low-level details but you also lose the ability to reach down to those levels should you need to",
    "start": "237380",
    "end": "244240"
  },
  {
    "text": "until recently javascript only had a single numeric type floating-point number so if you needed to work with larger numbers you could not do that in",
    "start": "244360",
    "end": "250610"
  },
  {
    "text": "JavaScript on the other hand you didn't have to worry about things like where does my memory for a list come from and",
    "start": "250610",
    "end": "256459"
  },
  {
    "text": "then of course there are languages in the middle Java c-sharp go and Swift they give you a great degree of control",
    "start": "256459",
    "end": "261709"
  },
  {
    "text": "but they still have mandatory garbage collection or reference counting baked in little into the language so you don't",
    "start": "261709",
    "end": "267650"
  },
  {
    "text": "quite have the same degree of manual control that you would get from a language like C or rust and the great thing about programming is that we can reach into",
    "start": "267650",
    "end": "275360"
  },
  {
    "text": "this toolbox of dozens of languages that are in use today and we can choose the best language for the task at hand and",
    "start": "275360",
    "end": "280910"
  },
  {
    "text": "so if you're doing low-level work you can reach for Cu or rust if you're doing high-level work you can reach for Python",
    "start": "280910",
    "end": "286730"
  },
  {
    "text": "or Ruby or JavaScript until you go to the web and when you go to the web you",
    "start": "286730",
    "end": "292910"
  },
  {
    "text": "only have one choice and that choice is JavaScript and JavaScript is an excellent language but it's a high level language and that means that it has strong opinions about what sort of data",
    "start": "292910",
    "end": "300380"
  },
  {
    "text": "types are allowed to use and how you're going to use them and so while on the on",
    "start": "300380",
    "end": "307310"
  },
  {
    "text": "the backend on native platforms it's very common to mix and match these languages for instance the data science",
    "start": "307310",
    "end": "312950"
  },
  {
    "text": "community is standardizing on Python and pythons a great high level language but all of their computation all their their",
    "start": "312950",
    "end": "319310"
  },
  {
    "text": "analysis software happens to be written in or the majority of it written in C C++ Fortran these lower level languages",
    "start": "319310",
    "end": "324740"
  },
  {
    "text": "that that can benefit from that degree of control and that are then wrapped in these nice Python modules so that",
    "start": "324740",
    "end": "329990"
  },
  {
    "text": "they're high-level application logic can stay stay in Python well we can't do that on the web because our only choice",
    "start": "329990",
    "end": "335840"
  },
  {
    "text": "is a single high level language nothing wrong with JavaScript but there is something wrong with only having one opinionated choice let's talk about SAS",
    "start": "335840",
    "end": "344720"
  },
  {
    "start": "343000",
    "end": "439000"
  },
  {
    "text": "SAS is a CSS preprocessor it lets you write very terse very expressive style sheets",
    "start": "344720",
    "end": "350110"
  },
  {
    "text": "SAS was originally implemented in Ruby which is another high-level language and one of the challenges with high level",
    "start": "350110",
    "end": "356240"
  },
  {
    "text": "languages is because they have those opinions because they have these these broader expectations of what sort of runtime environment will exist in it's",
    "start": "356240",
    "end": "363200"
  },
  {
    "text": "hard to combine high level languages it's hard to use a ruby library inside Python and so after a few years when SAS",
    "start": "363200",
    "end": "369500"
  },
  {
    "text": "became popular enough there was an effort to rewrite it in C++ libsass and",
    "start": "369500",
    "end": "375200"
  },
  {
    "text": "by writing in a low-level language it's possible to build bindings from libsass so you can use the same core logic in a",
    "start": "375200",
    "end": "383150"
  },
  {
    "text": "dozen of other languages so in Crystal Go Java Java Script Lua net note Perl PHP Python Ruby Scala all of these have",
    "start": "383150",
    "end": "390710"
  },
  {
    "text": "libraries that are based on the same C++ code no SAS for example gets over four",
    "start": "390710",
    "end": "396470"
  },
  {
    "text": "million downloads a week on NPM very popular implementation one of the most popular",
    "start": "396470",
    "end": "401900"
  },
  {
    "text": "rappers of libsass and it's trivially easy to use if you're an OU developer",
    "start": "401900",
    "end": "406970"
  },
  {
    "text": "you go into your package.json you depend on notes ass and what you get is something that looks and feels like a",
    "start": "406970",
    "end": "413960"
  },
  {
    "text": "JavaScript module but in the inside it's really a C++ library with a very thin",
    "start": "413960",
    "end": "420800"
  },
  {
    "text": "layer of JavaScript on the outside one of the challenges with this mode of",
    "start": "420800",
    "end": "427100"
  },
  {
    "text": "software development this mode of software distribution is that you have to compile that CSR that CP C++",
    "start": "427100",
    "end": "433210"
  },
  {
    "text": "differently for every machine code architecture that you want to target and",
    "start": "433210",
    "end": "438470"
  },
  {
    "text": "so for 32 and 64-bit Intel you have to compile it differently for different versions of arm you have to compile that",
    "start": "438470",
    "end": "444350"
  },
  {
    "text": "library differently and not only that you have to compile it differently depending on which operating system you're going to deploy to you and",
    "start": "444350",
    "end": "450280"
  },
  {
    "text": "because node itself does not have a stable ABI you also have to compile that",
    "start": "450280",
    "end": "455390"
  },
  {
    "text": "same matrix for every version of know do you want to support and so you get the benefit of only having a single C++",
    "start": "455390",
    "end": "461300"
  },
  {
    "text": "library so you have a single point of development but when it comes to distribution you suddenly have this combinatoric explosion of platforms node",
    "start": "461300",
    "end": "469430"
  },
  {
    "text": "versions and CPU architectures that you have to support and indeed when you go",
    "start": "469430",
    "end": "475070"
  },
  {
    "start": "474000",
    "end": "581000"
  },
  {
    "text": "to the node SAS release page on github and you scroll down you can see this table of supported environments",
    "start": "475070",
    "end": "480440"
  },
  {
    "text": "operating system CPU architecture node version and when you scroll further you can see the binary assets that they",
    "start": "480440",
    "end": "486860"
  },
  {
    "text": "publish with every node release a hundred and seventeen binary packages each individual file each individual",
    "start": "486860",
    "end": "493850"
  },
  {
    "text": "compilation of note SAS is about two megabytes two and a half megabytes and yet we're publishing hundreds of",
    "start": "493850",
    "end": "500210"
  },
  {
    "text": "megabytes of compiled data every release because the node SAS authors don't want",
    "start": "500210",
    "end": "505580"
  },
  {
    "text": "you to have to compile it yourself they want to just work out of the box and so they have to to deal with that big 3d",
    "start": "505580",
    "end": "511160"
  },
  {
    "text": "matrix of compatibility a notable thing that's missing is no ARM processors or",
    "start": "511160",
    "end": "517490"
  },
  {
    "text": "support so if you're doing this on a Raspberry Pi you have to compile it yourself that's fine the big difficulty",
    "start": "517490",
    "end": "523700"
  },
  {
    "text": "in the the problem I have with this this method of software distribution this is something we've done in every native platform community it's not you need to",
    "start": "523700",
    "end": "530120"
  },
  {
    "text": "know it's that you need to know at SAS we can do all this compilation but none",
    "start": "530120",
    "end": "535250"
  },
  {
    "text": "of this helps us go to the web and we can't go to the web because we don't know what",
    "start": "535250",
    "end": "542089"
  },
  {
    "text": "machine architecture the was going to run on and the what needs to be forever and the web needs to be universal and so",
    "start": "542089",
    "end": "548870"
  },
  {
    "text": "if you don't know what operating system we don't know what processor the web's going to be on how could we take these native libraries and bring them to the",
    "start": "548870",
    "end": "554570"
  },
  {
    "text": "web and the web shows up in weird places",
    "start": "554570",
    "end": "561620"
  },
  {
    "text": "a few years ago a product owner at LG decided that he wanted the the company",
    "start": "561620",
    "end": "570200"
  },
  {
    "text": "to create a refrigerator that had windows on it so that you could get more utility a refrigerator and someone else",
    "start": "570200",
    "end": "576200"
  },
  {
    "text": "read that spec sheet and maybe there was a capitalization error or maybe something happened and they put windows",
    "start": "576200",
    "end": "581630"
  },
  {
    "start": "581000",
    "end": "651000"
  },
  {
    "text": "on a fridge literally Microsoft Windows not like glass windows that would be useful but like the gadget headline LG's",
    "start": "581630",
    "end": "590690"
  },
  {
    "text": "29 inch Windows 10 tablet comes stuck to a smart fridge but the wonderful thing",
    "start": "590690",
    "end": "598190"
  },
  {
    "text": "about this is that this fridge has a browser and that means this fridge has access to the web and this fridge has",
    "start": "598190",
    "end": "603470"
  },
  {
    "text": "access to the whole entire web there's not a fridge web there's not a fridge OS you're not having to build things for",
    "start": "603470",
    "end": "609290"
  },
  {
    "text": "the fridge store you you just build things for the web and now they work on",
    "start": "609290",
    "end": "614510"
  },
  {
    "text": "the fridge and you don't even have to know that exists you hopefully did not know that exists it's the same way that",
    "start": "614510",
    "end": "621020"
  },
  {
    "text": "the mobile web doesn't exist at least not anymore the mobile app anymore it's just the web on mobile because we've",
    "start": "621020",
    "end": "627320"
  },
  {
    "text": "created this set of standards with HTML with JavaScript and CSS where if you bring a browser engine to to a new",
    "start": "627320",
    "end": "632839"
  },
  {
    "text": "platform then the whole web comes with it and the web is the killer app I don't",
    "start": "632839",
    "end": "639170"
  },
  {
    "text": "know why but I don't think it's possible for any consumer electronic device to exist without the ability to render web",
    "start": "639170",
    "end": "644570"
  },
  {
    "text": "content my car has a web browser the Apple watch can render websites who",
    "start": "644570",
    "end": "651890"
  },
  {
    "start": "651000",
    "end": "698000"
  },
  {
    "text": "knows where it's gonna go but the problem is when you go to the web you only have this one high-level language",
    "start": "651890",
    "end": "657260"
  },
  {
    "text": "and that imposes a kind of complexity floor where you're not allowed to reach",
    "start": "657260",
    "end": "662269"
  },
  {
    "text": "deeper into the machine than JavaScript exposes and that means that all these other languages the target machine code",
    "start": "662269",
    "end": "667850"
  },
  {
    "text": "languages light go and rust and si have a hard time going to the web so that's what web assembly",
    "start": "667850",
    "end": "675709"
  },
  {
    "text": "is we can't have a real bike our machine coke so you don't know where the web is going to go but we can have a slightly",
    "start": "675709",
    "end": "683560"
  },
  {
    "text": "abstracted machine code and then trust the runtime the browser or node or",
    "start": "683560",
    "end": "689750"
  },
  {
    "text": "whatever else happens to be supporting web technologies to translate the web assembly into machine code and execute",
    "start": "689750",
    "end": "695990"
  },
  {
    "text": "it the idea here is that you can take a",
    "start": "695990",
    "end": "701360"
  },
  {
    "text": "single single file a single program compile it to webassembly you get away as a module and then you could",
    "start": "701360",
    "end": "706819"
  },
  {
    "text": "distribute that one binary to a number of platforms so to Firefox on a laptop to Safari on and I have iPhone to know",
    "start": "706819",
    "end": "713509"
  },
  {
    "text": "JSON our raspberry pi and then those runtimes themselves do whatever they need to do to make that code execute on",
    "start": "713509",
    "end": "719240"
  },
  {
    "text": "whatever processor they have to be having to be running on great that means",
    "start": "719240",
    "end": "724610"
  },
  {
    "text": "that you as a developer compile it once distribute it once and that whole matrix just goes away in favor of for instance",
    "start": "724610",
    "end": "733610"
  },
  {
    "text": "hopefully in the future libsass Tizen and sure you can still put a thin JavaScript layer around it so that it",
    "start": "733610",
    "end": "739160"
  },
  {
    "text": "maintains the same interface that that you would expect to have from the the previous version but you no longer have",
    "start": "739160",
    "end": "746149"
  },
  {
    "text": "to compile it 117 times what's more the way that we've designed web assembly modules is we've designed",
    "start": "746149",
    "end": "752509"
  },
  {
    "text": "them to be compatible with es6 modules with echo script modules so that in the",
    "start": "752509",
    "end": "757730"
  },
  {
    "text": "future even that javascript wrapper can go away and you should be able to use this inside nodejs",
    "start": "757730",
    "end": "764079"
  },
  {
    "text": "just like you would any other yes module so you could say import render from libs a style Azzam now that's something that",
    "start": "764079",
    "end": "771139"
  },
  {
    "text": "you can make that syntax work today with enough command line flags and node the",
    "start": "771139",
    "end": "778790"
  },
  {
    "text": "hope is that will be a common way to work with things in the future but right now you'll still have to write",
    "start": "778790",
    "end": "784850"
  },
  {
    "text": "a little bit of JavaScript to get a happy path experience the goal here",
    "start": "784850",
    "end": "792319"
  },
  {
    "start": "791000",
    "end": "835000"
  },
  {
    "text": "being if webassembly modules have a similar semantic model to echo script modules then you can depend on them and",
    "start": "792319",
    "end": "799160"
  },
  {
    "text": "you can intermix them in your dependency tree and so you write JavaScript because it's a high-level Ling and it's a great language and your",
    "start": "799160",
    "end": "804440"
  },
  {
    "text": "application code fits well in it but your dependencies might be you might be depending on code that's written in",
    "start": "804440",
    "end": "809839"
  },
  {
    "text": "whether something you might be offending on code that's written in JavaScript and you don't have to care you don't have to be aware because they all work like",
    "start": "809839",
    "end": "815810"
  },
  {
    "text": "modules and that's great because it means that as the things you depend on find uses for rob assembly and perhaps",
    "start": "815810",
    "end": "822620"
  },
  {
    "text": "find efficiencies in web assembly they'll be able to to kind of swap out their JavaScript implementations your",
    "start": "822620",
    "end": "829220"
  },
  {
    "text": "code gets better your application gets better and you don't have to change a thing because you can maintain that same API interface and this is real October",
    "start": "829220",
    "end": "838339"
  },
  {
    "text": "2017 was when edge shipped web assembly by default on by default and that was",
    "start": "838339",
    "end": "844220"
  },
  {
    "text": "the moment where every major web browser was shipping web assembly on by default and so this has been real and this is",
    "start": "844220",
    "end": "850130"
  },
  {
    "text": "existed for two years over two years which means we have the fourth thing and",
    "start": "850130",
    "end": "857240"
  },
  {
    "start": "854000",
    "end": "904000"
  },
  {
    "text": "we've had it for two years we have content presentation high-level language",
    "start": "857240",
    "end": "863360"
  },
  {
    "text": "low-level language and those two languages compliment each other because that's what what allows you not to run",
    "start": "863360",
    "end": "869329"
  },
  {
    "text": "web assembly on the web you're not going to think about running web assembly on the web that's what gives you freedom to insert other tools of your choice so the",
    "start": "869329",
    "end": "877640"
  },
  {
    "text": "web stack is HTML CSS JavaScript and anything else that compiles to webassembly and many many languages I",
    "start": "877640",
    "end": "883579"
  },
  {
    "text": "daresay most languages have some experiment or some additionally mature",
    "start": "883579",
    "end": "889430"
  },
  {
    "text": "way to compile from that language to up assembly and that's the goal the web",
    "start": "889430",
    "end": "895160"
  },
  {
    "text": "shouldn't be monolingual and it's not anymore because we have web assembly and that gives us that platform that lets us",
    "start": "895160",
    "end": "901850"
  },
  {
    "text": "bring the other languages along webassembly is a binary format you can pilot it's a bytecode bytecode means we",
    "start": "901850",
    "end": "908990"
  },
  {
    "start": "904000",
    "end": "999000"
  },
  {
    "text": "have 256 operations to work with kind of map them out I'm gonna take you through them one by one they're they're color",
    "start": "908990",
    "end": "918020"
  },
  {
    "text": "coded there there are a few types of operations you'll see when you look at web assembly bytecode not that you'll ever need to do that in practice but I",
    "start": "918020",
    "end": "923149"
  },
  {
    "text": "want this talk to to at least give you a sense of what's going on under the hood that's that's what I find fun we've got",
    "start": "923149",
    "end": "929540"
  },
  {
    "text": "a number of operations for control flow so things like loops calling other functions we don't have go to control",
    "start": "929540",
    "end": "935990"
  },
  {
    "text": "flow and rub assembly to be structured so you can't have execution go jump to a random point in in your code we have functions for",
    "start": "935990",
    "end": "944269"
  },
  {
    "text": "variables for parameters some functions for memories so webassembly can load and store data in memory it can request more",
    "start": "944269",
    "end": "949790"
  },
  {
    "text": "memory it can't access arbitrary memory it only has access to memory that it has",
    "start": "949790",
    "end": "955370"
  },
  {
    "text": "access to that it's being given access to so it's not gonna run rampant on your system and then everything else is",
    "start": "955370",
    "end": "960470"
  },
  {
    "text": "numbers webassembly has four number types integers floating point numbers 32",
    "start": "960470",
    "end": "965779"
  },
  {
    "text": "64-bit and all the rest of the bytecode operations are constants of those",
    "start": "965779",
    "end": "971329"
  },
  {
    "text": "numbers comparisons of those numbers conversions between them or operations on them you can read the spec it's it's",
    "start": "971329",
    "end": "977589"
  },
  {
    "text": "generally actually kind of nice to scroll through and you can look at the slides later where you see okay here are",
    "start": "977589",
    "end": "984800"
  },
  {
    "text": "all my my numeric operators for integers I can and/or X or I can add subtract",
    "start": "984800",
    "end": "990980"
  },
  {
    "text": "multiply four floats I can ceiling floor truncate really basic stuff it can do",
    "start": "990980",
    "end": "996380"
  },
  {
    "text": "math but math is useful it can't do a",
    "start": "996380",
    "end": "1001899"
  },
  {
    "start": "999000",
    "end": "1167000"
  },
  {
    "text": "lot of other things right now just webassembly on its own can do math math is useful because if you take a language like c and you write a function that",
    "start": "1001899",
    "end": "1008699"
  },
  {
    "text": "takes an integer foo or it takes an integer X and returns X divided by four",
    "start": "1008699",
    "end": "1015690"
  },
  {
    "text": "when you compile that you get out this",
    "start": "1015690",
    "end": "1021910"
  },
  {
    "text": "webassembly module that exports the function named foo it says foo is a function that takes a parameter VAR 0 of",
    "start": "1021910",
    "end": "1029410"
  },
  {
    "text": "type 32 bit int and returns a 32-bit end and the body of the function is three",
    "start": "1029410",
    "end": "1034660"
  },
  {
    "text": "operations it gets the variable you passed in it gets the constant value of four because well simply the stack machine so it kind of puts both of those",
    "start": "1034660",
    "end": "1040510"
  },
  {
    "text": "on the stack and it calls div s sine division which pops those off divides them and puts the result back on the",
    "start": "1040510",
    "end": "1046390"
  },
  {
    "text": "stack there's your return value again you won't have to worry about this this",
    "start": "1046390",
    "end": "1052090"
  },
  {
    "text": "is just for interest in edification intellectual gratification you'll worry about writing code and C or in rust or",
    "start": "1052090",
    "end": "1058480"
  },
  {
    "text": "whatever other language but what will happen is that that code will get compiled down to web assembly and then when the browser or node or whatever",
    "start": "1058480",
    "end": "1064360"
  },
  {
    "text": "other runtime seems that web assembly it'll convert it into machine code one of the nice things about web assembly is",
    "start": "1064360",
    "end": "1071200"
  },
  {
    "text": "it has static types it has those four number types and C also has static types",
    "start": "1071200",
    "end": "1076419"
  },
  {
    "text": "we took in an int and we returned an nth JavaScript by being a dynamic language",
    "start": "1076419",
    "end": "1082360"
  },
  {
    "text": "is a lot harder to optimize because you don't know up front you don't know just by reading the code what data types",
    "start": "1082360",
    "end": "1089289"
  },
  {
    "text": "functions are going to deal with and so browsers have to sit there they have to watch your code execute they have to",
    "start": "1089289",
    "end": "1094360"
  },
  {
    "text": "profile and they have to take guesses and say okay I think this is working with integers I haven't seen a floating-point number yet so I'll go",
    "start": "1094360",
    "end": "1100360"
  },
  {
    "text": "ahead and and I'll generate some machine code all just in time compile this to be a fast function dealing with integers",
    "start": "1100360",
    "end": "1106000"
  },
  {
    "text": "but then what if you pass a float so every time the JavaScript engine has to has to check itself and throw out those",
    "start": "1106000",
    "end": "1112570"
  },
  {
    "text": "optimizations and reoptimize and it's this very dynamic and very complex process whereas if webassembly we know",
    "start": "1112570",
    "end": "1118720"
  },
  {
    "text": "the types of front and if you're using a language that can compile to static types then you can can get a lot of",
    "start": "1118720",
    "end": "1124000"
  },
  {
    "text": "efficiency just in that for example if I know I'm only going to pass positive",
    "start": "1124000",
    "end": "1129039"
  },
  {
    "text": "numbers to this I can change that from taking int X to taking unsigned and X and then when I recompile instead of",
    "start": "1129039",
    "end": "1136120"
  },
  {
    "text": "being a divided by four this turns into shift right by two because if you take",
    "start": "1136120",
    "end": "1141880"
  },
  {
    "text": "an integer and you shift the bits over every time you do that you cut it in half and the other thing that happened",
    "start": "1141880",
    "end": "1148419"
  },
  {
    "text": "is that we eliminate some of the machine code operations because that's a much easier operation for a CPU to perform",
    "start": "1148419",
    "end": "1155110"
  },
  {
    "text": "and that's where a lot of the efficiency gains and webassembly come from they come from being able to take advantage of that lower-level information of",
    "start": "1155110",
    "end": "1162549"
  },
  {
    "text": "having the data types of being able to pre-compile things well simply on its",
    "start": "1162549",
    "end": "1169000"
  },
  {
    "text": "own is like a CPU on its own you can hook them some wires up to it you can do math but if you want to do anything more",
    "start": "1169000",
    "end": "1174880"
  },
  {
    "text": "interesting you need some way to do i oh you need some way to to connect it to",
    "start": "1174880",
    "end": "1180640"
  },
  {
    "text": "something else and so what assembly does have a concept of imports and exports and so you can build shims that from the",
    "start": "1180640",
    "end": "1189130"
  },
  {
    "start": "1182000",
    "end": "1245000"
  },
  {
    "text": "outside environment exposed functions to web assembly so you can hook up console dot log to web assembly or the html5",
    "start": "1189130",
    "end": "1195220"
  },
  {
    "text": "canvas api s or any other function that exists in your computing environment you can expose to web assembly and you are",
    "start": "1195220",
    "end": "1201370"
  },
  {
    "text": "responsible for exposing it well assuming we can't go out and on its own get these capabilities and it can't do",
    "start": "1201370",
    "end": "1206440"
  },
  {
    "text": "anything it can't break out of the browser sandbox because it's running the same sandbox that Java scripts running into you and so you don't need to worry",
    "start": "1206440",
    "end": "1212980"
  },
  {
    "text": "about this reading random memory or doing anything beyond what you worry about with JavaScript and and by and",
    "start": "1212980",
    "end": "1218410"
  },
  {
    "text": "large we trust browsers because they're doing the machine code generation from JavaScript to native code we trust them",
    "start": "1218410",
    "end": "1224530"
  },
  {
    "text": "to do that safely in the same way that we trust them to convert web assembly and execute that safely but if you have",
    "start": "1224530",
    "end": "1231670"
  },
  {
    "text": "the ability even if it's not particularly economic and it's not yet that we're working on it if you have the ability to expose browser api's to a web",
    "start": "1231670",
    "end": "1238510"
  },
  {
    "text": "assembly module and the module can take those in and can use them then that's enough to write a compiler to take kind",
    "start": "1238510",
    "end": "1244150"
  },
  {
    "text": "of arbitrary code from C or C++ and this is where where a lot of these projects start is we started with a compiler",
    "start": "1244150",
    "end": "1250090"
  },
  {
    "start": "1245000",
    "end": "1299000"
  },
  {
    "text": "called M scripting that can take C and C++ and it can compile to web assembly and it can shim things like if you use",
    "start": "1250090",
    "end": "1256090"
  },
  {
    "text": "STL to access opengl to do 3d graphics it can port that to WebGL and so",
    "start": "1256090",
    "end": "1261910"
  },
  {
    "text": "suddenly you can take things like the unity and we thought games were great a",
    "start": "1261910",
    "end": "1274240"
  },
  {
    "text": "great test case because there were one of the few holdouts of plugins on the web these these kind of non-standard",
    "start": "1274240",
    "end": "1279340"
  },
  {
    "text": "third-party native code modules that we were loading into browsers and that expanded our surface attack surface and",
    "start": "1279340",
    "end": "1285580"
  },
  {
    "text": "we're all sorts of problems but they gave you that performance they gave you the ability to bring other code in well assembly tries to find a way to do that",
    "start": "1285580",
    "end": "1291730"
  },
  {
    "text": "safely with very close to native performance and leveraging the web api",
    "start": "1291730",
    "end": "1297070"
  },
  {
    "text": "is it's not apart from the levites part of the web and so you can also see epic porting their Unreal Engine web assembly",
    "start": "1297070",
    "end": "1303490"
  },
  {
    "text": "so both of these these game development engines Unreal and unity",
    "start": "1303490",
    "end": "1308730"
  },
  {
    "text": "can export to the web and they can do that via web assembly and this all runs live in the browser street but again if",
    "start": "1308730",
    "end": "1316320"
  },
  {
    "text": "you have a compiler you can compile arbitrary things so the AutoCAD team compiled AutoCAD web system will you took a 35 year old codebase a codebase",
    "start": "1316320",
    "end": "1322379"
  },
  {
    "text": "older than the web itself and that's now just a link away and you can run AutoCAD in your browser or you can take",
    "start": "1322379",
    "end": "1328649"
  },
  {
    "start": "1327000",
    "end": "1427000"
  },
  {
    "text": "something like imagine the dosbox emulator so DOSBox lets you run a little dawson",
    "start": "1328649",
    "end": "1334230"
  },
  {
    "text": "early women programs see chrome windows 3 in the browser and if you have Windows",
    "start": "1334230",
    "end": "1341970"
  },
  {
    "text": "3 you can also run netscape 3 and this is a version netscape from 1996 so CSS",
    "start": "1341970",
    "end": "1347369"
  },
  {
    "text": "had been proposed but had not yet been introduced into netscape this version does support javascript though and",
    "start": "1347369",
    "end": "1353429"
  },
  {
    "text": "what's interesting is is how similar this looks to a modern browser it's at least recognizable as a browser and this",
    "start": "1353429",
    "end": "1361470"
  },
  {
    "text": "is what 23 years old but it's all running in firefox because we could",
    "start": "1361470",
    "end": "1368970"
  },
  {
    "text": "compile DOSBox to web assembly then we can run all this other code unmodified and that's kind of neat it's not particularly practical but it's possible",
    "start": "1368970",
    "end": "1376259"
  },
  {
    "text": "and the Internet Archive is actually using this two port emulators to the web to preserve our software heritage so you",
    "start": "1376259",
    "end": "1383100"
  },
  {
    "text": "can go you can play old games and use old applications right in your browser without having to download anything without me worrying about your willis",
    "start": "1383100",
    "end": "1389129"
  },
  {
    "text": "emulator still work when you upgrade to a new process or architecture or whatever else it's no it's all part of",
    "start": "1389129",
    "end": "1394350"
  },
  {
    "text": "the web now but by being part of the web but what this is doing is DOSBox is drawing pixels into to the web assembly",
    "start": "1394350",
    "end": "1400799"
  },
  {
    "text": "memory and then javascript on the browser site is reading that out and drawing pixels to an html5 canvas and if",
    "start": "1400799",
    "end": "1406529"
  },
  {
    "text": "you have a canvas you can mix that up with other web api's and so you can map that onto a WebGL texture and so that",
    "start": "1406529",
    "end": "1412889"
  },
  {
    "text": "you can simulate coding in a basement in the 90's and this is a demo by James",
    "start": "1412889",
    "end": "1418769"
  },
  {
    "text": "Pike Ohio who published it in April 2017 I just credit where credit's due",
    "start": "1418769",
    "end": "1424440"
  },
  {
    "text": "brilliant brilliant idea oh this is magic its spectacle it's wonders I'm",
    "start": "1424440",
    "end": "1431399"
  },
  {
    "start": "1427000",
    "end": "1504000"
  },
  {
    "text": "like look we put games in your browser we put windows in your back in your window it it's fun but it's not",
    "start": "1431399",
    "end": "1438749"
  },
  {
    "text": "particularly practical and so our job over the next few years is to kill magic and turn into something useful",
    "start": "1438749",
    "end": "1444980"
  },
  {
    "text": "because the the demos that we've seen over the last two years with the introduction web simply are not the",
    "start": "1444980",
    "end": "1451259"
  },
  {
    "text": "things not the problems that I'm dealing with in a day to day job as a web developer so when do I reach for what",
    "start": "1451259",
    "end": "1458220"
  },
  {
    "text": "assembly when should I be reaching for over simply when do I do I harness these capabilities in my my actual job well",
    "start": "1458220",
    "end": "1465119"
  },
  {
    "text": "two things one we've seen that you can use both assembly to reuse existing code on the web and that's pretty cool second",
    "start": "1465119",
    "end": "1471359"
  },
  {
    "text": "and and I think much more important you can now use better languages on the web",
    "start": "1471359",
    "end": "1476399"
  },
  {
    "text": "and I say that not to slight JavaScript JavaScript is an exceptional language but no one tool can be the best tool for",
    "start": "1476399",
    "end": "1482789"
  },
  {
    "text": "every job and so by by having webassembly we can now bring other tools that may allow me to express myself more",
    "start": "1482789",
    "end": "1489419"
  },
  {
    "text": "concisely or more efficiently they may be able to to solve a certain problem more performant ly then I could have",
    "start": "1489419",
    "end": "1495359"
  },
  {
    "text": "when I was previously limited just to a single language choice a more practical",
    "start": "1495359",
    "end": "1500879"
  },
  {
    "text": "example for using code for both of these reasons is squish a p-- spelled squish",
    "start": "1500879",
    "end": "1508200"
  },
  {
    "start": "1504000",
    "end": "1580000"
  },
  {
    "text": "app and this is by the chrome dev tools team and what they wanted used they",
    "start": "1508200",
    "end": "1513779"
  },
  {
    "text": "wanted to put an image optimizer in the browser so you could upload a big image and then client-side experiment with you",
    "start": "1513779",
    "end": "1519149"
  },
  {
    "text": "know what does this look like as a quality to JPEG or what if I rien coded",
    "start": "1519149",
    "end": "1524279"
  },
  {
    "text": "as web P re encoded it as PNG and they were able to take these existing image",
    "start": "1524279",
    "end": "1529649"
  },
  {
    "text": "libraries up to PNG Lib Moz JPEG Lib web P compile those code bases C and C++",
    "start": "1529649",
    "end": "1535590"
  },
  {
    "text": "code bases compile them to web assembly and then you can run those image encoders directly in your browser and you don't have to re-implement them in",
    "start": "1535590",
    "end": "1542159"
  },
  {
    "text": "JavaScript you can reuse libraries that are the standard and desktop in native",
    "start": "1542159",
    "end": "1547619"
  },
  {
    "text": "environments you can now use them on the web and you don't have to remit the wheel and I think that's really important I'm really powerful but they",
    "start": "1547619",
    "end": "1554159"
  },
  {
    "text": "also had a really interesting use case where they wanted to allow you to rotate images if you're dealing with a large enough image the ability to work at a",
    "start": "1554159",
    "end": "1561779"
  },
  {
    "text": "lower level could be really helpful because you're you're swapping pixel data when you're doing the rotation and if you could do that if you could",
    "start": "1561779",
    "end": "1568200"
  },
  {
    "text": "control how all that data is represented in memory and control how that gets swapped you could avoid creating garbage",
    "start": "1568200",
    "end": "1573450"
  },
  {
    "text": "collection loops you could you could probably do it more efficiently or at least that was the the theory and so what the the chrome dev",
    "start": "1573450",
    "end": "1580240"
  },
  {
    "start": "1580000",
    "end": "1647000"
  },
  {
    "text": "tools team did was they implemented that rotation function in JavaScript and they found that a couple browsers could do it",
    "start": "1580240",
    "end": "1586180"
  },
  {
    "text": "in under half a second for a large image one browser took over eight seconds this is a logarithmic scale and that",
    "start": "1586180",
    "end": "1592930"
  },
  {
    "text": "variation really strikes at the heart of JavaScript being a complex language it's really really hard you have to be really",
    "start": "1592930",
    "end": "1598420"
  },
  {
    "text": "really clever to get good performance out of JavaScript when you're doing something that's compute-intensive because it doesn't give you a lot of",
    "start": "1598420",
    "end": "1604480"
  },
  {
    "text": "information upfront and so he did that and then he also turned around they implemented the same function in web in",
    "start": "1604480",
    "end": "1610780"
  },
  {
    "text": "three languages that compile the web assembly see assembly script and rust and what they found was not that the",
    "start": "1610780",
    "end": "1615790"
  },
  {
    "text": "webisode we was always faster wasn't always faster but the variation was much less between browsers because well this",
    "start": "1615790",
    "end": "1623260"
  },
  {
    "text": "simile gives you so much more information upfront it puts everyone at a more even playing field you don't have to be as clever to to get good",
    "start": "1623260",
    "end": "1630940"
  },
  {
    "text": "performance out of web assembly and you're not having to rely on tricks and hacks that might make one browser faster but might confuse another browsers Jay",
    "start": "1630940",
    "end": "1637900"
  },
  {
    "text": "SVM and so their takeaway from this was was not that web simply is faster always but that web assembly is much more",
    "start": "1637900",
    "end": "1644290"
  },
  {
    "text": "predictable in terms of the performance it gives you and that means that if you have a set of modules or you have a",
    "start": "1644290",
    "end": "1651940"
  },
  {
    "start": "1647000",
    "end": "1684000"
  },
  {
    "text": "software project that has one code path that's spending a lot of time on your CPU and it's slowing everything else",
    "start": "1651940",
    "end": "1658480"
  },
  {
    "text": "down it's possible to take just that one hot code path and replace it with rust",
    "start": "1658480",
    "end": "1664150"
  },
  {
    "text": "to replace it with Swift or go or well these other languages that compile web assembly and then hopefully both free",
    "start": "1664150",
    "end": "1670060"
  },
  {
    "text": "rein in your performance and also ensure that performance is more consistent across browsers you're seeing this sort",
    "start": "1670060",
    "end": "1675610"
  },
  {
    "text": "of sort of approach and a number of of web-based tools I believe Sigma does",
    "start": "1675610",
    "end": "1680980"
  },
  {
    "text": "quite a lot with web assembly there's a",
    "start": "1680980",
    "end": "1686950"
  },
  {
    "start": "1684000",
    "end": "1732000"
  },
  {
    "text": "really interesting talk two months ago at Rus comp called from electron to atom to rust and back to electron by arena",
    "start": "1686950",
    "end": "1693490"
  },
  {
    "text": "sestok and she works on a project called MongoDB compass and what that is is a it's an electron slash browser app that",
    "start": "1693490",
    "end": "1700480"
  },
  {
    "text": "lets you analyze MongoDB databases and kind of see what sort of data is stored in a collection and because it's",
    "start": "1700480",
    "end": "1706060"
  },
  {
    "text": "electron because it's browser-based it was already in JavaScript but when analyzing very large",
    "start": "1706060",
    "end": "1711190"
  },
  {
    "text": "collections they were running into into bottlenecks where it was taking up to three minutes to analyze ten thousand",
    "start": "1711190",
    "end": "1717430"
  },
  {
    "text": "documents so she rewrote the analysis functions in rust compiled that web assembly and got a 40 X speed-up so what",
    "start": "1717430",
    "end": "1724720"
  },
  {
    "text": "was prohibitively expensive waiting two minutes for summary could now happen in three seconds and that somewhat mirrors",
    "start": "1724720",
    "end": "1730030"
  },
  {
    "text": "our experience in Firefox where a few years ago we we make the Firefox dev tools using web technology like HTML CSS",
    "start": "1730030",
    "end": "1736780"
  },
  {
    "text": "and JavaScript we're using react when you open the dev tools and Firefox it's all just web tech and so we had a source",
    "start": "1736780",
    "end": "1742420"
  },
  {
    "text": "map parser that was written in JavaScript hand-tuned highly optimized javascript and we wanted to try porting",
    "start": "1742420",
    "end": "1748960"
  },
  {
    "text": "that to rust and porting that to webassembly and seeing what happened and what happened was we started with just a",
    "start": "1748960",
    "end": "1754330"
  },
  {
    "text": "naive implementation do it as simple and straightforward as possible make sure it works and we got a 6x speed-up and then",
    "start": "1754330",
    "end": "1760810"
  },
  {
    "text": "we tried to make it faster and tried to optimize it and we got an 11 X speed-up just out of gate and Nick Nick",
    "start": "1760810",
    "end": "1770230"
  },
  {
    "text": "Fitzgerald the author of this post read another post called speed without wizardry which notes that we actually we",
    "start": "1770230",
    "end": "1776740"
  },
  {
    "text": "went from more complex to less complex code when we went from JavaScript or us because parsing and data analysis are",
    "start": "1776740",
    "end": "1783010"
  },
  {
    "text": "two of those sweet spots where you're really doing things that are memory or CPU intensive that web simply shines at",
    "start": "1783010",
    "end": "1788440"
  },
  {
    "text": "and by writing simpler code we also got better performance I thought that was pretty cool or as arena put it rust lets",
    "start": "1788440",
    "end": "1794680"
  },
  {
    "text": "you write performant and clean code right off the bat so plug for rust rust is a is a great language in its own right highly recommended if you're",
    "start": "1794680",
    "end": "1801040"
  },
  {
    "text": "interested web assembly start their interest and just learning another language start their great community",
    "start": "1801040",
    "end": "1806740"
  },
  {
    "text": "attached to an amazing language really really cool but of course every other language is welcome to play on the web",
    "start": "1806740",
    "end": "1812410"
  },
  {
    "text": "tube because weld assembly if you have a compiler you can go to the web so that's",
    "start": "1812410",
    "end": "1818920"
  },
  {
    "start": "1817000",
    "end": "1829000"
  },
  {
    "text": "what web assembly is do does that make sense do you feel like you kind of have a better understanding of like this is",
    "start": "1818920",
    "end": "1824980"
  },
  {
    "text": "what we're trying to do this is how we did it what the heck does that have to do with things outside of the browser well if you go back ten years",
    "start": "1824980",
    "end": "1831910"
  },
  {
    "start": "1829000",
    "end": "1909000"
  },
  {
    "text": "Ryan Dahl looked at HTML CSS and JavaScript and said you know JavaScript cool on the web it's cool in the browser",
    "start": "1831910",
    "end": "1837220"
  },
  {
    "text": "I wonder if it's any useful on its own and as we all know nodejs was",
    "start": "1837220",
    "end": "1842600"
  },
  {
    "text": "complete failure and we we've learned from its mistake ever since node used v8",
    "start": "1842600",
    "end": "1849700"
  },
  {
    "text": "so you have the most most common programming language or the most common",
    "start": "1849700",
    "end": "1856850"
  },
  {
    "text": "runtime for the most common programming language in the world which now supports more programming languages because v8",
    "start": "1856850",
    "end": "1863360"
  },
  {
    "text": "supports what assembly and that's pretty wild because it means you're someone like CloudFlare and you're an edge",
    "start": "1863360",
    "end": "1868640"
  },
  {
    "text": "compute network where you you have a bunch of servers around the world and people update their code and you run it for them close to other users well",
    "start": "1868640",
    "end": "1874940"
  },
  {
    "text": "normally when you isolate those things you would isolate them by running them in their own virtual machine and that",
    "start": "1874940",
    "end": "1881179"
  },
  {
    "text": "has an enormous amount of overhead whereas on the web we're really used to",
    "start": "1881179",
    "end": "1886190"
  },
  {
    "text": "running untrusted code side by side and keeping things separated and so v8 has an isolate model where you can you can",
    "start": "1886190",
    "end": "1892070"
  },
  {
    "text": "pack more code kind of all in one process so you start up a single JavaScript VM and you would everybody's",
    "start": "1892070",
    "end": "1897770"
  },
  {
    "text": "code into it and everything's still separated and safe and so that's what CloudFlare does the CloudFlare worker platform supports JavaScript and it",
    "start": "1897770",
    "end": "1903830"
  },
  {
    "text": "supports web assembly which means it also supports every language that compiles to web simply and that's pretty wild",
    "start": "1903830",
    "end": "1909490"
  },
  {
    "start": "1909000",
    "end": "1987000"
  },
  {
    "text": "but then that raises the obvious question of well 10 years after node",
    "start": "1909490",
    "end": "1914950"
  },
  {
    "text": "well this simply is great in the browser web assembly is great with javascript is",
    "start": "1914950",
    "end": "1922630"
  },
  {
    "text": "web assembly any good on its own and we",
    "start": "1922630",
    "end": "1927799"
  },
  {
    "text": "mozilla think so so we built was sometime at sometimes a standalone web simply runtime it's small it's",
    "start": "1927799",
    "end": "1932870"
  },
  {
    "text": "configurable it's embeddable and we weren't the only ones fastly also built",
    "start": "1932870",
    "end": "1938150"
  },
  {
    "text": "a runtime called lucid which allows them to operate their own edge compute network where you can compile to web assembly and and one of the benefits of",
    "start": "1938150",
    "end": "1945159"
  },
  {
    "text": "doing this is that by going to of assembly and by losing javascript",
    "start": "1945159",
    "end": "1950690"
  },
  {
    "text": "downside you don't have javascript up side you don't have to start a whole J SVM and so in fast Lee's case they're",
    "start": "1950690",
    "end": "1956750"
  },
  {
    "text": "able to start up a web stably process instantiated websley module in about 50 microseconds compared to 5 milliseconds",
    "start": "1956750",
    "end": "1963260"
  },
  {
    "text": "for v8 and it has a few kilobytes of memory overhead versus tens of megabytes",
    "start": "1963260",
    "end": "1968299"
  },
  {
    "text": "of memory overhead and so your what a hundred times faster 10,000 times",
    "start": "1968299",
    "end": "1973970"
  },
  {
    "text": "smaller downside you don't have JavaScript upside you can go so many places that",
    "start": "1973970",
    "end": "1979679"
  },
  {
    "text": "JavaScript just wouldn't fit IOT devices edge computing kind of interesting and apparently the two of us",
    "start": "1979679",
    "end": "1986129"
  },
  {
    "text": "aren't alone last week Mozilla announced the founding of the bytecode Alliance alongside fastly until on Red Hat",
    "start": "1986129",
    "end": "1991440"
  },
  {
    "start": "1987000",
    "end": "2025000"
  },
  {
    "text": "all of whom were working on web assembly executable runtimes outside of the browser and we're trying to define the",
    "start": "1991440",
    "end": "1997200"
  },
  {
    "text": "future of web assembly beyond the browser web assembly itself is is standardized at the w3c but this is more",
    "start": "1997200",
    "end": "2003499"
  },
  {
    "text": "of an industry group that's formalizing existing cooperation where you're trying to figure out all right well we're",
    "start": "2003499",
    "end": "2009679"
  },
  {
    "text": "facing one of the same problems that Ryan doll face when we created nude which is that once you remove the browser how do you data into and out of",
    "start": "2009679",
    "end": "2015559"
  },
  {
    "text": "JavaScript and so we had to define the node standard library and so we're running the same thing a flow of assembly well if we don't have JavaScript we don't have the node",
    "start": "2015559",
    "end": "2021469"
  },
  {
    "text": "standard library how do we get I Oh in web assembly and so just like web simply gave us a slightly abstract CPU we have",
    "start": "2021469",
    "end": "2030979"
  },
  {
    "start": "2025000",
    "end": "2056000"
  },
  {
    "text": "something called huazi the web assembly system interface which is a proposal for a slightly abstract platform library in",
    "start": "2030979",
    "end": "2036079"
  },
  {
    "text": "the same way that like POSIX or the way API describes things like file system access and network paths and how i/o",
    "start": "2036079",
    "end": "2042679"
  },
  {
    "text": "works wisey concerns itself those same sorts of things how do you get data in and out of whether simply how do you give it",
    "start": "2042679",
    "end": "2047690"
  },
  {
    "text": "access to the network then I say Y Z is it's just a library weather symbol a modules can import functions and they",
    "start": "2047690",
    "end": "2054289"
  },
  {
    "text": "can export functions and so they can import functions from Y Z and the way I like to explain this is I like to think",
    "start": "2054289",
    "end": "2059358"
  },
  {
    "start": "2056000",
    "end": "2094000"
  },
  {
    "text": "about potatoes this is also the first time I've tried to explain it this way so you'll have to let me know if it works but but you can look at this and",
    "start": "2059359",
    "end": "2065628"
  },
  {
    "text": "you can tell those are all potatoes they're different potatoes and maybe they're different because like programs",
    "start": "2065629",
    "end": "2071628"
  },
  {
    "text": "even though programs are all made up of compiled binary sometimes they're compiled for different architectures and so you can imagine that each potatoes is",
    "start": "2071629",
    "end": "2078648"
  },
  {
    "text": "a different CPU architecture I don't know the the point where this analogy runs into trouble is what's a web",
    "start": "2078649",
    "end": "2084019"
  },
  {
    "text": "assembly module what's what's what's an abstract potato what's an abstract program and I think it's this kind of naked mr. Potato Head and and the idea",
    "start": "2084019",
    "end": "2092898"
  },
  {
    "text": "of the naked mr. Potato Head is that it has well-defined points for imports and for exports and so you can you can look",
    "start": "2092899",
    "end": "2099799"
  },
  {
    "start": "2094000",
    "end": "2110000"
  },
  {
    "text": "at this toy and you can see if this were a web assembly module it's not a real potato it's not going to go and when",
    "start": "2099799",
    "end": "2105500"
  },
  {
    "text": "you're not looking grow eyes somewhere and do something unexpected it's it's inert and so if somebody handed you this mod",
    "start": "2105500",
    "end": "2112230"
  },
  {
    "start": "2110000",
    "end": "2149000"
  },
  {
    "text": "this webisode module and said I want you to translate and run this we could say okay well that's only gonna be able to do math because it doesn't have anything",
    "start": "2112230",
    "end": "2117600"
  },
  {
    "text": "hooked up to it and they hand you this one you could say okay maybe it can read and write files because it has eyes and hands if they hand you this one you",
    "start": "2117600",
    "end": "2125910"
  },
  {
    "text": "might be a little more concerned because I does a whole bunch of other capabilities the one in the middle you're not worried about it you know green write files we're not worried",
    "start": "2125910",
    "end": "2131520"
  },
  {
    "text": "about walking off of the files cuz it doesn't have any feet and so this is this is one of the ideas behind the the",
    "start": "2131520",
    "end": "2137790"
  },
  {
    "text": "static modules the ability that webassembly has to declare here are the things that I'm importing here are the things I need you to attach to me and",
    "start": "2137790",
    "end": "2143580"
  },
  {
    "text": "here are the things that I'm going to give you back and you can know that without having to execute any code and",
    "start": "2143580",
    "end": "2149370"
  },
  {
    "text": "what happens is the runtime will take take that web assembly module as kind of a template it's kind of a guide and it'll say okay I need to build a real",
    "start": "2149370",
    "end": "2154920"
  },
  {
    "text": "program that can read and write files and so it translate that into a real potato and it doesn't look exactly the",
    "start": "2154920",
    "end": "2162270"
  },
  {
    "text": "same has to use whatever machine code whatever potato starch is available in",
    "start": "2162270",
    "end": "2167280"
  },
  {
    "text": "its local environment but what you get out is is a program that has the same capabilities to be more concrete this is",
    "start": "2167280",
    "end": "2175440"
  },
  {
    "start": "2173000",
    "end": "2222000"
  },
  {
    "text": "hello world and y'see again you're not gonna write this you're gonna write things that compile to this but the important part is up here at the",
    "start": "2175440",
    "end": "2181320"
  },
  {
    "text": "top where you declare a module and you say you import from huazi unstable FD right and if T right is a function that",
    "start": "2181320",
    "end": "2188130"
  },
  {
    "text": "has the function signature input for integers output one integer the names of",
    "start": "2188130",
    "end": "2196170"
  },
  {
    "text": "these functions there are arguments what those arguments mean for instance when you call this view give it the first",
    "start": "2196170",
    "end": "2202530"
  },
  {
    "text": "integer as one that means you're willing to write two standard out but that's what web assembly system interface Y Z",
    "start": "2202530",
    "end": "2207780"
  },
  {
    "text": "defines it's the the syntax and the vocabulary around dealing with i/o it's just a standard library but the ability",
    "start": "2207780",
    "end": "2214020"
  },
  {
    "text": "to import functions from the outside world is something that's common to all webassembly modules any module can can",
    "start": "2214020",
    "end": "2219660"
  },
  {
    "text": "ask for any sort of functionality the idea being that if you're doing",
    "start": "2219660",
    "end": "2225750"
  },
  {
    "start": "2222000",
    "end": "2243000"
  },
  {
    "text": "something like this this is hello world and rust and you go to compile it you can use a tool called cargo huazi you",
    "start": "2225750",
    "end": "2230850"
  },
  {
    "text": "say alright cargo as you build it'll go and compile your web assembly module and then you can run that output binary file",
    "start": "2230850",
    "end": "2236760"
  },
  {
    "text": "with lazon time so say Y sometime gives it the path to the dot wiesen file and you get hello world",
    "start": "2236760",
    "end": "2242890"
  },
  {
    "text": "and if we go and disassemble that binary and we search it for the string FD right you can see that on line 26 we imported",
    "start": "2242890",
    "end": "2250369"
  },
  {
    "text": "FD right from lies neon stable so you can look at that module and you can know exactly what capabilities it's pulling",
    "start": "2250369",
    "end": "2255740"
  },
  {
    "text": "in from the outside world and when you run it because the the runtime",
    "start": "2255740",
    "end": "2260839"
  },
  {
    "text": "environment is responsible for fulfilling those imports while some time will say okay if u FD right to file",
    "start": "2260839",
    "end": "2266810"
  },
  {
    "text": "descriptor 1 I'm going to print that to the terminal so I'm operating in a terminal environment but if you take you to the browser you don't have a terminal",
    "start": "2266810",
    "end": "2272660"
  },
  {
    "text": "I mean you have a console but it's not quite the same and so it's up to whatever page you're loading in the",
    "start": "2272660",
    "end": "2277790"
  },
  {
    "text": "browser to choose how to implement that function and so for example on this page you can take that same exact binary that",
    "start": "2277790",
    "end": "2284000"
  },
  {
    "text": "you just ran in well some time on your on your native platform and you can upload it into a browser and that browser supplies a definition of F T",
    "start": "2284000",
    "end": "2291050"
  },
  {
    "text": "right that prints into a text area it's a that one layer of abstraction just",
    "start": "2291050",
    "end": "2296240"
  },
  {
    "text": "like whether somebody gives you a layer of abstraction over machine code was he gives you a layer of abstraction over these system calls and it's up to the",
    "start": "2296240",
    "end": "2301790"
  },
  {
    "text": "environment to kind of supply functionality that makes sense you don't",
    "start": "2301790",
    "end": "2306829"
  },
  {
    "start": "2305000",
    "end": "2345000"
  },
  {
    "text": "have to use these tools the hope is it wisely is just what comes in the box well as some time loose it the the bike hood Alliance runtimes support y'see",
    "start": "2306829",
    "end": "2313400"
  },
  {
    "text": "we're working on up streaming lousy support into node the idea is that if you say like I need file IO and you use",
    "start": "2313400",
    "end": "2319190"
  },
  {
    "text": "Y Z's vocabulary for it it should just work on these other runtimes if you want",
    "start": "2319190",
    "end": "2324500"
  },
  {
    "text": "to attach something else you have to supply the implementation for the runtime but ok let's say let's say you",
    "start": "2324500",
    "end": "2329900"
  },
  {
    "text": "have a module and the first thing is that you know what capabilities it has let's say it needs file IO access it",
    "start": "2329900",
    "end": "2335089"
  },
  {
    "text": "needs to be able to read and write things how do you make that safe because a big part of assembly a big part of not having execute memory not having go to",
    "start": "2335089",
    "end": "2341240"
  },
  {
    "text": "you is that we want these modules to be safe to run untrusted code in and that is where it gets lightweight sandboxing",
    "start": "2341240",
    "end": "2347750"
  },
  {
    "start": "2345000",
    "end": "2356000"
  },
  {
    "text": "where we take those modules and any access to the outside world is mediated",
    "start": "2347750",
    "end": "2352910"
  },
  {
    "text": "by the runtime a good example this is file i/o so say I had that hello world and one of its dependencies got updated",
    "start": "2352910",
    "end": "2360740"
  },
  {
    "start": "2356000",
    "end": "2447000"
  },
  {
    "text": "and I recompiled it if I built this as a native binary so I just cargo build",
    "start": "2360740",
    "end": "2366349"
  },
  {
    "text": "cargos the the rest build tool carga build what I get out is a native binary for Mac OS and when I run that I get",
    "start": "2366349",
    "end": "2373369"
  },
  {
    "text": "hello world looks like everything worked I updated my dependency I recompiled off to the races",
    "start": "2373369",
    "end": "2378859"
  },
  {
    "text": "if I do the same thing in huazi cargo as II build compile it",
    "start": "2378859",
    "end": "2384319"
  },
  {
    "text": "get as and file out this time when I try to run it it errors and the error it",
    "start": "2384319",
    "end": "2389750"
  },
  {
    "text": "throws is that error failed to find a pre open file descriptor through which user Dan SSH ID RSA could be open so for",
    "start": "2389750",
    "end": "2396440"
  },
  {
    "text": "some reason my hello world was trying to read my SH key huh hello crap I ran the",
    "start": "2396440",
    "end": "2403940"
  },
  {
    "text": "native binary because we run native binaries they execute with the same permissions as the user and we don't have that degree of mediation who knows",
    "start": "2403940",
    "end": "2410000"
  },
  {
    "text": "what that native binary just did with that file it shouldn't have needed to access that but because I was running it",
    "start": "2410000",
    "end": "2415130"
  },
  {
    "text": "just as my user it was able to whereas the wazoo module as far as he is we don't have an instruction that allows",
    "start": "2415130",
    "end": "2421730"
  },
  {
    "text": "for arbitrary file access any file that the module opens has to be kind of pre",
    "start": "2421730",
    "end": "2427099"
  },
  {
    "text": "authorized by the runtime and so I can start Wisin if I can say ok it's ok for you to access - Dirar",
    "start": "2427099",
    "end": "2433309"
  },
  {
    "text": "and pass it the path - to the files that needs to access and then prints hello",
    "start": "2433309",
    "end": "2438619"
  },
  {
    "text": "world and god knows what it did with my key and this this is a simplified example but but this sort of attack put",
    "start": "2438619",
    "end": "2446960"
  },
  {
    "text": "about 15 million dollars at risk in a cryptocurrency wallet there was an",
    "start": "2446960",
    "end": "2452270"
  },
  {
    "start": "2447000",
    "end": "2508000"
  },
  {
    "text": "electron app that had a node dependency that just handled showing notifications on your system and the maintainer of",
    "start": "2452270",
    "end": "2460700"
  },
  {
    "text": "that module decided to retire from maintaining it passed it off to a community contributor someone else said",
    "start": "2460700",
    "end": "2466579"
  },
  {
    "text": "like I'll take over I'll keep that up to date that person released a few completely benign updates to the module",
    "start": "2466579",
    "end": "2473270"
  },
  {
    "text": "kept it working and then they released an update that in addition to doing what it was supposed to do also try to exfiltrate the private keys from this",
    "start": "2473270",
    "end": "2479329"
  },
  {
    "text": "cryptocurrency wallet and so somewhere deeply nested in this in this tree of dependencies when you npm installed it",
    "start": "2479329",
    "end": "2486980"
  },
  {
    "text": "it would go and try to read all these private files it has no business reading and so if we adopted webassembly modules",
    "start": "2486980",
    "end": "2494420"
  },
  {
    "text": "for these extensions or for these sorts of use cases were british tribune code where we're using third-party modules if",
    "start": "2494420",
    "end": "2500779"
  },
  {
    "text": "we had that type of lightweight sandboxing $15,000,000 would not be at",
    "start": "2500779",
    "end": "2505819"
  },
  {
    "text": "risk right now and that seems kind of useful so Leah Mazar is safe portable runtimes",
    "start": "2505819",
    "end": "2511560"
  },
  {
    "start": "2508000",
    "end": "2538000"
  },
  {
    "text": "right we can you can run untrusted code we can run on Trista code in a way that can be safe and is easy to make safe and",
    "start": "2511560",
    "end": "2518340"
  },
  {
    "text": "is safe by default and that's coming off of experience that the webassembly community group has as browser vendors",
    "start": "2518340",
    "end": "2524370"
  },
  {
    "text": "we've had a lot of experience running untrusted code and we we want to have a runtime that that implements the",
    "start": "2524370",
    "end": "2530280"
  },
  {
    "text": "principle of least Authority that doesn't give doesn't automatically grant all the keys to your computers any program that you run we also gain a",
    "start": "2530280",
    "end": "2539490"
  },
  {
    "start": "2538000",
    "end": "2559000"
  },
  {
    "text": "universal binary format so this gives us something that that other programming languages and other programs can compile to you and targetnode they can target",
    "start": "2539490",
    "end": "2546570"
  },
  {
    "text": "the web they can run outside of that they can run on their own and that's really interesting because if we if we",
    "start": "2546570",
    "end": "2551640"
  },
  {
    "text": "make these runtimes small enough and portable enough you can imagine you know we seen we've seen web symbol in the browser we've seen web with somebody",
    "start": "2551640",
    "end": "2557430"
  },
  {
    "text": "outside the browser you can also imagine whether somebody inside other languages so as an experiment a few months ago we",
    "start": "2557430",
    "end": "2562680"
  },
  {
    "start": "2559000",
    "end": "2606000"
  },
  {
    "text": "ported one time that the Mozilla whoops in the ground time we ported it to a Python module and so yeah we have to do",
    "start": "2562680",
    "end": "2568650"
  },
  {
    "text": "a whole matrix of compilations but we do that once and now when you import math sometime as a Python module you can then",
    "start": "2568650",
    "end": "2574230"
  },
  {
    "text": "import wasm modules into Python as if they were Python modules so what we do",
    "start": "2574230",
    "end": "2579900"
  },
  {
    "text": "is we took pull down see mark which is a rust library for a markdown compile that to web assembly and now when you say",
    "start": "2579900",
    "end": "2586920"
  },
  {
    "text": "import markdown this is actually going importing a markdown that hasn't file into Python completely seamlessly and",
    "start": "2586920",
    "end": "2592950"
  },
  {
    "text": "we've called markdown dot render you get HTML X that's what markdown does and now",
    "start": "2592950",
    "end": "2598230"
  },
  {
    "text": "that's interesting because that same exact byte for byte identical markdown that lazon file can also be used a node",
    "start": "2598230",
    "end": "2604860"
  },
  {
    "text": "or in the browser and we can take this one module this one code base compile it",
    "start": "2604860",
    "end": "2610230"
  },
  {
    "start": "2606000",
    "end": "2661000"
  },
  {
    "text": "once and share it everywhere and so not only just love to simply bring all the",
    "start": "2610230",
    "end": "2617970"
  },
  {
    "text": "other programming languages to the web for the browser it also solves some security and some efficiency problems",
    "start": "2617970",
    "end": "2624210"
  },
  {
    "text": "with untrusted code outside the browser and it also gives us potentially a universal library format and you use universal executable format and I think",
    "start": "2624210",
    "end": "2631800"
  },
  {
    "text": "that's pretty exciting and I think that's something that whether or not web assembly itself succeeds in whether or not was he becomes the standard library",
    "start": "2631800",
    "end": "2637440"
  },
  {
    "text": "we build on or these runtimes become the ones we use I think the the idea is here in the implementation here I think we'll shape the way that we build",
    "start": "2637440",
    "end": "2644410"
  },
  {
    "text": "develop distribute and use software pervasively in the future and it's real",
    "start": "2644410",
    "end": "2649569"
  },
  {
    "text": "like you can do all of this right now I pre record the demos because I don't",
    "start": "2649569",
    "end": "2654699"
  },
  {
    "text": "want to tempt fate but all of this works on my laptop right now and I can show it to you after the talk and I think that's",
    "start": "2654699",
    "end": "2660489"
  },
  {
    "text": "pretty cool so if you want to learn more I said my name is Dan Callahan on Twitter is Cal",
    "start": "2660489",
    "end": "2666459"
  },
  {
    "start": "2661000",
    "end": "2714000"
  },
  {
    "text": "ahead I tweeted a link to github just that just has a bunch of links to other things you can go and find some articles",
    "start": "2666459",
    "end": "2671979"
  },
  {
    "text": "I really recommend if for nothing else it's just fascinating the Nick Fitzgerald article on speed without",
    "start": "2671979",
    "end": "2678459"
  },
  {
    "text": "wizardry it's under the the thing where we oxidize source maps oxidizing being",
    "start": "2678459",
    "end": "2683499"
  },
  {
    "text": "like the rust lingo for converting code to rust in Firefox cuz it talks about how we got that 11 X improvement by",
    "start": "2683499",
    "end": "2689559"
  },
  {
    "text": "rewriting and rust and some of the the crazy things that you can do to get similar performance in JavaScript if",
    "start": "2689559",
    "end": "2695799"
  },
  {
    "text": "you're willing to tune for a specific engine lots of resources really cool I've got five minutes I can answer a few questions thank you so much I hope this",
    "start": "2695799",
    "end": "2703299"
  },
  {
    "text": "is if not useful at least interesting thank you",
    "start": "2703299",
    "end": "2708479"
  }
]