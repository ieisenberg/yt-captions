[
  {
    "text": "[Music]",
    "start": "2550",
    "end": "11269"
  },
  {
    "text": "okay so I'm going to start with a few different things show you some things",
    "start": "11269",
    "end": "18390"
  },
  {
    "text": "around column which you don't get in an introduction course although Kotlin and such isn't such a complex language so",
    "start": "18390",
    "end": "27090"
  },
  {
    "text": "really it's it's easy to essentially pick up but let's dive in a little bit",
    "start": "27090",
    "end": "32488"
  },
  {
    "text": "so higher-order function which you're all familiar with so I have like a",
    "start": "32489",
    "end": "37920"
  },
  {
    "text": "function that takes an int eternity another integer and returns an integer and that's a higher-order function right",
    "start": "37920",
    "end": "43770"
  },
  {
    "text": "so it's a function that takes a function or a function that returns a function and in Kotlin we can you know have",
    "start": "43770",
    "end": "52320"
  },
  {
    "text": "multiple functions so I can have for instance a GE over here that takes no",
    "start": "52320",
    "end": "57870"
  },
  {
    "text": "parameters and returns nothing wealth returns the unit which is actually different to nothing right",
    "start": "57870",
    "end": "65010"
  },
  {
    "text": "it truly is unit is not nothing unit is an object which is different to a class",
    "start": "65010",
    "end": "72869"
  },
  {
    "text": "so how many of you are JavaScript developers here it's and not to",
    "start": "72869",
    "end": "78240"
  },
  {
    "text": "embarrass to put up their hands so object is the equivalent of object in in",
    "start": "78240",
    "end": "85229"
  },
  {
    "text": "JavaScript you know how you went from Java or C sharp to JavaScript and you like oh I'm gonna take everything I brought with me so let me in create this",
    "start": "85229",
    "end": "91229"
  },
  {
    "text": "amazing system in JavaScript called classes and hierarchies and everyone's like no don't do that you have objects",
    "start": "91229",
    "end": "97829"
  },
  {
    "text": "in calling we have objects and we have classes object is essentially a",
    "start": "97829",
    "end": "103649"
  },
  {
    "text": "singleton this is how you implement a singleton in Kotlin you just write object that's it you don't have to buy a",
    "start": "103649",
    "end": "109110"
  },
  {
    "text": "book which was a good book by the way although now nowadays you can't say",
    "start": "109110",
    "end": "116509"
  },
  {
    "text": "you've read the Gang of Four they'll frown on you they're like oh you're not doing functional programming then so and",
    "start": "116509",
    "end": "125680"
  },
  {
    "text": "I was saying that it's not nothing right because nothing is something in Collier",
    "start": "125680",
    "end": "131050"
  },
  {
    "text": "how many of you have heard of nothing okay so nothing is something so this is",
    "start": "131050",
    "end": "137269"
  },
  {
    "text": "do something that does nothing and if I have unit and I do throw exception this",
    "start": "137269",
    "end": "145730"
  },
  {
    "text": "does nothing right because if I write it does nothing well it throws an exception but if I come to my main function here",
    "start": "145730",
    "end": "152540"
  },
  {
    "text": "and I say print nine hello that will work if I write throw exception law that",
    "start": "152540",
    "end": "159769"
  },
  {
    "text": "won't and if I well that will throw an exception and a five right by the compiler will say that this doesn't work",
    "start": "159769",
    "end": "165319"
  },
  {
    "text": "because it's never going to reach that code because exception being thrown so",
    "start": "165319",
    "end": "170810"
  },
  {
    "text": "but if I write here do something it's going to not work as well because it's",
    "start": "170810",
    "end": "178910"
  },
  {
    "text": "of the exception however if I remove this and I take this line over here and I move it down print line is still going",
    "start": "178910",
    "end": "186829"
  },
  {
    "text": "to supposedly work right because it's saying well it's it's going to work it's",
    "start": "186829",
    "end": "191930"
  },
  {
    "text": "gonna call a method it's going to come back and that's the difference between unit and nothing because nothing actually says that this function is not",
    "start": "191930",
    "end": "200600"
  },
  {
    "text": "going to return it's going to essentially be nothing and there now it says that this code is unreachable so",
    "start": "200600",
    "end": "207290"
  },
  {
    "text": "there is a difference between unit and nothing and as as I always say nothing is nothing for you to worry about so",
    "start": "207290",
    "end": "213829"
  },
  {
    "text": "let's move on so we have this do something and we have this higher-order function and one of the things that we",
    "start": "213829",
    "end": "221569"
  },
  {
    "text": "have in Kotlin if you're familiar with obviously you've got the string extension you've got the function",
    "start": "221569",
    "end": "227030"
  },
  {
    "text": "extensions but you also have property extensions right so very good example of",
    "start": "227030",
    "end": "234170"
  },
  {
    "text": "this is always like I can have a long that I can write or a float that I can",
    "start": "234170",
    "end": "239299"
  },
  {
    "text": "write using literal so I can write ten F that means that it's an actual float and we",
    "start": "239299",
    "end": "244670"
  },
  {
    "text": "we worked with big decimals which we loved to work with I want to be able to write big decimals these ten BD I cannot",
    "start": "244670",
    "end": "250580"
  },
  {
    "text": "do that because there's no such literal for big decimals I could do the next best thing to that which is creates an",
    "start": "250580",
    "end": "256250"
  },
  {
    "text": "extension property right so well I could create an extension function write that",
    "start": "256250",
    "end": "261290"
  },
  {
    "text": "but it doesn't look that good but I can create an extension property so I can create an extension to integer for",
    "start": "261290",
    "end": "266870"
  },
  {
    "text": "instance that returns a big decimal and then this is going to return a big",
    "start": "266870",
    "end": "272990"
  },
  {
    "text": "decimal of this right so that is giving me an extension property okay so one of",
    "start": "272990",
    "end": "282530"
  },
  {
    "text": "the benefits of this is that apart from making it very nice to read look at is that you can essentially delegate them",
    "start": "282530",
    "end": "292490"
  },
  {
    "text": "the the functionality of a property to something else right to external",
    "start": "292490",
    "end": "298340"
  },
  {
    "text": "function which you can reuse over and over again and that's one of the benefits of delegated properties right",
    "start": "298340",
    "end": "304100"
  },
  {
    "text": "so I have a class with a bunch of delegated properties and I can delegate these to other functionalities and then",
    "start": "304100",
    "end": "309590"
  },
  {
    "text": "share them across multiple classes and that's where we have for instance a bunch of built-in delegates so you all",
    "start": "309590",
    "end": "315830"
  },
  {
    "text": "probably familiar with the lazy delegate right how many of you here familiar with lazy so lazy essentially is lazy",
    "start": "315830",
    "end": "322640"
  },
  {
    "text": "initialization of a property it's going to initialize it when it's accessed for the first time and it's just gonna",
    "start": "322640",
    "end": "328460"
  },
  {
    "text": "initialize that code and it's not going to run that code ever again and that is done by using declaring the property",
    "start": "328460",
    "end": "334729"
  },
  {
    "text": "lazy and then using by and then lazy which is the built-in delegate and then",
    "start": "334729",
    "end": "341150"
  },
  {
    "text": "I pass in the actual function that is going to initialize our property so if we go over to lazy over here we can see",
    "start": "341150",
    "end": "347300"
  },
  {
    "text": "this that this is a higher-order function that takes an initializer it also has a overloaded versions which",
    "start": "347300",
    "end": "355070"
  },
  {
    "text": "allow you to pass in the different type of initialization that you want to do synchronization on shared properties but",
    "start": "355070",
    "end": "363500"
  },
  {
    "text": "that's one of the most common ones but there's a few other ones that are also built into the standard library right",
    "start": "363500",
    "end": "369080"
  },
  {
    "text": "one of them is the veto book so veto wall is a delegated property which allows you to say if a certain condition",
    "start": "369080",
    "end": "375680"
  },
  {
    "text": "is matched then update the property if not do not do it right without you",
    "start": "375680",
    "end": "381620"
  },
  {
    "text": "having to write that logic over and over again so in this case I'm saying that I've got the property I've got an old value I've got a new value and I say",
    "start": "381620",
    "end": "388430"
  },
  {
    "text": "that if the new value starts with an S then update the value if not then don't",
    "start": "388430",
    "end": "394670"
  },
  {
    "text": "update the value so here where we're creating for instance a class veto and",
    "start": "394670",
    "end": "400640"
  },
  {
    "text": "then I say set the value I said it to change I print out the value I set it to strange I print out the value in",
    "start": "400640",
    "end": "406880"
  },
  {
    "text": "principle the value should only change after I hit strange right so if we run this you can see that on the first call",
    "start": "406880",
    "end": "413990"
  },
  {
    "text": "it's not actually setting the property okay and it's setting the property on the second call over here when I hit",
    "start": "413990",
    "end": "420170"
  },
  {
    "text": "strange so this veto ball lazy and observable are some of the built-in",
    "start": "420170",
    "end": "426860"
  },
  {
    "text": "delegates that we have in in the standard library which you can use but of course you can also create your own",
    "start": "426860",
    "end": "433390"
  },
  {
    "text": "property delegation in common and essentially what you have to do is you have to create a class that defines two",
    "start": "433390",
    "end": "441800"
  },
  {
    "text": "operators one of them is called get value the other one is called set value and much like you saw in the veto of all",
    "start": "441800",
    "end": "447980"
  },
  {
    "text": "example what I'm getting here is some information about the actual class then I'm getting information about the",
    "start": "447980",
    "end": "453620"
  },
  {
    "text": "property K property what is K property that's just like property but prefixed with a K that's here and that's one way",
    "start": "453620",
    "end": "463850"
  },
  {
    "text": "to explain Cortland take everything Java and prefix it with a K and then release libraries with a K",
    "start": "463850",
    "end": "470290"
  },
  {
    "text": "intercalated with a C know that one with a K and that's called it so K property is a Kotlin property so it's essentially",
    "start": "470290",
    "end": "477169"
  },
  {
    "text": "reflection enhanced right so in Kotlin you might be aware that you can use Java reflection you can also use",
    "start": "477169",
    "end": "483380"
  },
  {
    "text": "Kotlin reflection it's like Java reflection but better it's got some additional things that has intrinsic",
    "start": "483380",
    "end": "491000"
  },
  {
    "text": "entrance intrinsic knowledge of Kotlin such as properties so this is how you",
    "start": "491000",
    "end": "496580"
  },
  {
    "text": "can create your custom delegates and then essentially just use these delegates anywhere you want in your own classes properties top-level variables",
    "start": "496580",
    "end": "503990"
  },
  {
    "text": "etc okay so one other thing that we have in",
    "start": "503990",
    "end": "509390"
  },
  {
    "text": "collin is algebraic data types or we have we represent our to break data types with sill right so here is a",
    "start": "509390",
    "end": "516320"
  },
  {
    "text": "simple example of what would be an algebraic data type which if you're not",
    "start": "516320",
    "end": "521960"
  },
  {
    "text": "familiar with that concept now generic data byte data type is a type that can be a one type or another for instance",
    "start": "521960",
    "end": "528140"
  },
  {
    "text": "boolean boolean can be of type true of type false so in calling you can essentially do the same thing by",
    "start": "528140",
    "end": "534260"
  },
  {
    "text": "declaring this as an open result right so here now what I'm saying is that my class can inherit from result and I have",
    "start": "534260",
    "end": "541700"
  },
  {
    "text": "two cases this is very common for instance if you want to move away from exceptions or you want to have a",
    "start": "541700",
    "end": "547040"
  },
  {
    "text": "function that returns one of two different types in case of success or failure you could do something like this",
    "start": "547040",
    "end": "553730"
  },
  {
    "text": "right and if you do this this is absolutely valid the problem with this",
    "start": "553730",
    "end": "559730"
  },
  {
    "text": "is that if I come here and let's all go over for example to a file and I say",
    "start": "559730",
    "end": "564770"
  },
  {
    "text": "class sometimes and sometimes inherits from result right that is going to work",
    "start": "564770",
    "end": "577130"
  },
  {
    "text": "as well right because result is an open class so if I'm writing code that is",
    "start": "577130",
    "end": "582830"
  },
  {
    "text": "checking for that that kind of sucks what you can do instead is mark class as sealed instead of open and sealed",
    "start": "582830",
    "end": "590390"
  },
  {
    "text": "essentially what it means is that it's closing off the hierarchy okay so now you cannot inherit from that class",
    "start": "590390",
    "end": "598870"
  },
  {
    "text": "beyond what you've all inherited and you might be asking what is that well whatever is on that file so",
    "start": "598870",
    "end": "604759"
  },
  {
    "text": "sealed will close the hierarchy off to that file right so over here sometimes",
    "start": "604759",
    "end": "610129"
  },
  {
    "text": "no longer works but over here sometimes does work and this doesn't necessarily",
    "start": "610129",
    "end": "615379"
  },
  {
    "text": "need to be but up top level classes you can also have it as nested classes do",
    "start": "615379",
    "end": "621889"
  },
  {
    "text": "you have a question or did I answer it oh I'm too loud that's what my family",
    "start": "621889",
    "end": "629509"
  },
  {
    "text": "always says to me I'm sorry I'll try and",
    "start": "629509",
    "end": "636829"
  },
  {
    "text": "talk a little bit better that's better so you're sitting there like this",
    "start": "636829",
    "end": "642129"
  },
  {
    "text": "suffering with pain I'm so sorry so I have I I have tinnitus now you know",
    "start": "642129",
    "end": "648139"
  },
  {
    "text": "how I feel except it's not my own voice it's some damn ringing anyway so I'm also happy to know that my",
    "start": "648139",
    "end": "655040"
  },
  {
    "text": "explanations are so awesome that you only care about the volume that's like recently I was giving I was giving a",
    "start": "655040",
    "end": "662120"
  },
  {
    "text": "webinar for for one hour right one hour webinar and I had of all people one of my heroes Eric Meyer as a moderator",
    "start": "662120",
    "end": "668420"
  },
  {
    "text": "right so 50 minutes in nobody's asking questions and eventually Eric says how",
    "start": "668420",
    "end": "674990"
  },
  {
    "text": "do we have a question I'm like yes what is it it's on Collin right that the boy",
    "start": "674990",
    "end": "680269"
  },
  {
    "text": "Evan are there like yes someone's asking what is that arrow in IntelliJ IDEA",
    "start": "680269",
    "end": "686740"
  },
  {
    "text": "anyway when I grow up I'm gonna be a",
    "start": "689949",
    "end": "696980"
  },
  {
    "text": "programmer numbers 1 to 100 now you all know that in Collin if I write something",
    "start": "696980",
    "end": "704029"
  },
  {
    "text": "like this and then I do for instance numbers filter it is less than 10 or",
    "start": "704029",
    "end": "709730"
  },
  {
    "text": "let's say it is divisor by 5 if I could",
    "start": "709730",
    "end": "716540"
  },
  {
    "text": "type and then say take 30 what's going to happen here is what this is eager evaluation right so essentially it's",
    "start": "716540",
    "end": "723199"
  },
  {
    "text": "going to look through the entire list and then it's going to filter out those that are dividable by 5 even though at",
    "start": "723199",
    "end": "730639"
  },
  {
    "text": "the end of the day all I want is the first 30 of them if you want to have lazy evaluation that",
    "start": "730639",
    "end": "737930"
  },
  {
    "text": "is possible in Colleen all you need to do is take any iterable and call as sequence on it as soon as you call as",
    "start": "737930",
    "end": "745430"
  },
  {
    "text": "sequence that now becomes lazy evaluated right so essentially the same as Haskell where everything is by default lazy",
    "start": "745430",
    "end": "751880"
  },
  {
    "text": "evaluated so this works with essentially anything that is an iterable if you",
    "start": "751880",
    "end": "757070"
  },
  {
    "text": "actually navigate to a sequence you can see that it's just an extension function on a Tribble so any iterable collection",
    "start": "757070",
    "end": "763460"
  },
  {
    "text": "anything you can basically convert to a sequence and then chain all of the wonderful methods that you have when",
    "start": "763460",
    "end": "770630"
  },
  {
    "text": "you're doing method pipelining so what",
    "start": "770630",
    "end": "776480"
  },
  {
    "text": "happens in the cases when you cannot have an interval to begin with for that we have other functions as part of the",
    "start": "776480",
    "end": "782090"
  },
  {
    "text": "standard library namely generate sequence which has two versions one of them taking a seat and then on that seed",
    "start": "782090",
    "end": "788240"
  },
  {
    "text": "you can do whatever you want and then from there again filter and all of this",
    "start": "788240",
    "end": "796400"
  },
  {
    "text": "again will be lazily evaluated okay so there's two ways to do it as sequence or",
    "start": "796400",
    "end": "802700"
  },
  {
    "text": "if you don't have a collection to begin with you can use the generate sequence okay now in the previous thing you saw",
    "start": "802700",
    "end": "812300"
  },
  {
    "text": "type aliases or am I still too loud oh oh you're scanning okay",
    "start": "812300",
    "end": "819460"
  },
  {
    "text": "right so in the previous one you had",
    "start": "819460",
    "end": "824660"
  },
  {
    "text": "type aliases a one example of when you want to use that is for instance that that you said you know I want to have a",
    "start": "824660",
    "end": "830360"
  },
  {
    "text": "handler that is a function that goes from string to string for instance right",
    "start": "830360",
    "end": "835970"
  },
  {
    "text": "if I knew how to write Kotlin code and or forget it I don't",
    "start": "835970",
    "end": "842300"
  },
  {
    "text": "and that is one use I actually don't like that use as much because one of the",
    "start": "842300",
    "end": "848430"
  },
  {
    "text": "things that I like around Kotlin is the discoverability when you look at a",
    "start": "848430",
    "end": "853710"
  },
  {
    "text": "function you exactly know what the parameters are so when I look at a higher order function and I see int of",
    "start": "853710",
    "end": "859740"
  },
  {
    "text": "Intuit I exactly know what it's going to take I don't have to introspect the type",
    "start": "859740",
    "end": "864840"
  },
  {
    "text": "to I actually understand what it's going to take but one other useful case of",
    "start": "864840",
    "end": "869990"
  },
  {
    "text": "type aliases is for using it with deprecated so how many of you right here",
    "start": "869990",
    "end": "875580"
  },
  {
    "text": "api's and you ship those api's to your customers even that's internal and you'd",
    "start": "875580",
    "end": "881640"
  },
  {
    "text": "love to break your api's and then you know what you can do you can actually sell subscriptions on it and then that",
    "start": "881640",
    "end": "888300"
  },
  {
    "text": "way you can always upgrade so for the record JetBrains doesn't sell api's so",
    "start": "888300",
    "end": "897420"
  },
  {
    "text": "one one cool thing that you can do with api's is let's say that I have a class",
    "start": "897420",
    "end": "904320"
  },
  {
    "text": "so let's go ahead and actually remove all of this nonsense over here so let's",
    "start": "904320",
    "end": "909600"
  },
  {
    "text": "say that I have a class called customer right and then I have a main function",
    "start": "909600",
    "end": "914790"
  },
  {
    "text": "that is using this customer so I say well customer eCos customer now tomorrow",
    "start": "914790",
    "end": "920310"
  },
  {
    "text": "I want to come and rename my art customer to awesome customer right now if I rename this is going to break my api's so what I could do is introduce a",
    "start": "920310",
    "end": "928620"
  },
  {
    "text": "new a ty values which is awesome customer right which is essentially a",
    "start": "928620",
    "end": "934320"
  },
  {
    "text": "customer ok and then what I could do is come to my customer class and add the",
    "start": "934320",
    "end": "939510"
  },
  {
    "text": "deprecated and say customer is now awesome customer right and see as soon",
    "start": "939510",
    "end": "948810"
  },
  {
    "text": "as I do that when I add the deprecated the ID is going to highlight this and say this is a an awesome customer now",
    "start": "948810",
    "end": "955700"
  },
  {
    "text": "but the good thing is that I haven't broken my API so I can do a phased upgrade right I can introduce the type",
    "start": "955700",
    "end": "961530"
  },
  {
    "text": "Ali us have people switch over to that and then eventually in the second version remove that type alias and in",
    "start": "961530",
    "end": "969690"
  },
  {
    "text": "fact if you've been on board with Kotlin for many many years I back when we",
    "start": "969690",
    "end": "975510"
  },
  {
    "text": "we used to call interfaces traits I want to actually make out a t-shirt that says I was using Collin when it was traits we",
    "start": "975510",
    "end": "983130"
  },
  {
    "text": "did this phased migration for Emory every M release we do this phase migration we first give you warning and",
    "start": "983130",
    "end": "990329"
  },
  {
    "text": "then the next release is going to be a compiler error and you can actually use the IDE to fix this for you so you can",
    "start": "990329",
    "end": "997620"
  },
  {
    "text": "say that replaces with awesome customer and what they replace with does is that now it gives you the magically alt-enter",
    "start": "997620",
    "end": "1004490"
  },
  {
    "text": "right so you now have the replace with awesome customer so that's one other use that you could use for type aliases to",
    "start": "1004490",
    "end": "1010850"
  },
  {
    "text": "do a faced migration okay some things around inline functionings",
    "start": "1010850",
    "end": "1017360"
  },
  {
    "text": "right so let's go to a higher order here",
    "start": "1017360",
    "end": "1023149"
  },
  {
    "text": "we've seen it right so in this case one",
    "start": "1023149",
    "end": "1032000"
  },
  {
    "text": "thing that we have with column is is inline functions and in fact if you look at a lot of the functionality in the",
    "start": "1032000",
    "end": "1038329"
  },
  {
    "text": "standard library you can see that many things are in lines right you can see",
    "start": "1038329",
    "end": "1043850"
  },
  {
    "text": "that a lot of these functions are in line and the reason for this well if you're who's familiar here with inlining",
    "start": "1043850",
    "end": "1050059"
  },
  {
    "text": "right so for those not familiar inlining essentially what it means it's copy/paste right so instead of me",
    "start": "1050059",
    "end": "1056179"
  },
  {
    "text": "calling when you invoke a function when you call operation instead of actually",
    "start": "1056179",
    "end": "1061460"
  },
  {
    "text": "invoking and having all of the call stack associated with that what it's going to do is going to copy that",
    "start": "1061460",
    "end": "1066500"
  },
  {
    "text": "function and paste it exactly where you're invoking it okay so it makes",
    "start": "1066500",
    "end": "1072200"
  },
  {
    "text": "sense to do this with functions that are small you know do you don't do this with",
    "start": "1072200",
    "end": "1078410"
  },
  {
    "text": "functions that are you know 200 lines of code now of course if you have functions that are 200 lines of code your problem is",
    "start": "1078410",
    "end": "1084740"
  },
  {
    "text": "why do you have functions that are two hundred lines of code not the inlining now with Kotlin it only really makes",
    "start": "1084740",
    "end": "1091250"
  },
  {
    "text": "sense to do inlining when your functions are higher-order functions not just",
    "start": "1091250",
    "end": "1097040"
  },
  {
    "text": "general functions so for instance if I were to create a function here called",
    "start": "1097040",
    "end": "1102169"
  },
  {
    "text": "fun my friend and this function has an integer and then I add an inline",
    "start": "1102169",
    "end": "1109159"
  },
  {
    "text": "to it over here you can see that the compiler is going to give me a warning and it's going to say that my friend in",
    "start": "1109159",
    "end": "1115190"
  },
  {
    "text": "line is insignificant the performance gained over in lining this function is",
    "start": "1115190",
    "end": "1120379"
  },
  {
    "text": "insignificant in lining works best for functions with lambdas as parameters okay in this case it's not saying it",
    "start": "1120379",
    "end": "1128479"
  },
  {
    "text": "because I actually have a lambda as a parameter so what this means is that when I create this inline function it's",
    "start": "1128479",
    "end": "1135169"
  },
  {
    "text": "not only going to inline the actual call to this function but it's going to inline the parameter as well",
    "start": "1135169",
    "end": "1140690"
  },
  {
    "text": "right that's where you get some of the benefits now inline functions give us another benefit as well which we'll see",
    "start": "1140690",
    "end": "1146629"
  },
  {
    "text": "in a moment but there are times for whatever reasons namely for instance you",
    "start": "1146629",
    "end": "1151849"
  },
  {
    "text": "want to be able to hold a reference to an inline factor to a high order to a function that's being passed in this",
    "start": "1151849",
    "end": "1157279"
  },
  {
    "text": "parameter which you cannot do with inline functions the that are being passed in the lambdas all you can do is",
    "start": "1157279",
    "end": "1164029"
  },
  {
    "text": "essentially invoke them so there are times when you want certain functions to not be inline which in this case you can",
    "start": "1164029",
    "end": "1170359"
  },
  {
    "text": "decorate it with a no inline so if I have for instance another higher-order function here I can decorate the second",
    "start": "1170359",
    "end": "1176929"
  },
  {
    "text": "one with no inline right so now it's saying that while inlining is applicable",
    "start": "1176929",
    "end": "1182119"
  },
  {
    "text": "in this case because I have a lambda that is being inlined for certain cases I don't want it to be",
    "start": "1182119",
    "end": "1188899"
  },
  {
    "text": "inline okay there's another fact there's another one which is called cross inline",
    "start": "1188899",
    "end": "1195109"
  },
  {
    "text": "which I'm not going to give you the explanation of because for that you're gonna get a chocolate so go on go and google it",
    "start": "1195109",
    "end": "1201669"
  },
  {
    "text": "so the inlining also gives us certain",
    "start": "1201669",
    "end": "1206960"
  },
  {
    "text": "benefits right and it also changes somewhat a behavior and that's where we",
    "start": "1206960",
    "end": "1212840"
  },
  {
    "text": "come to returns so here I have a",
    "start": "1212840",
    "end": "1217999"
  },
  {
    "text": "function which is called containing function and it basically loops through",
    "start": "1217999",
    "end": "1224210"
  },
  {
    "text": "a list of numbers and then it's going to do a return if I were to run this what",
    "start": "1224210",
    "end": "1229369"
  },
  {
    "text": "do you think the output of that would be",
    "start": "1229369",
    "end": "1232629"
  },
  {
    "text": "nothing no it doesn't return nothing it's a returns unit I'm joking who says nothing who says hello who says",
    "start": "1236000",
    "end": "1245159"
  },
  {
    "text": "it's me no don't get it Adele oh sorry that was bad no okay yeah",
    "start": "1245159",
    "end": "1255480"
  },
  {
    "text": "you've heard worse now oh yes and you",
    "start": "1255480",
    "end": "1261809"
  },
  {
    "text": "have called Adele alright um yeah that must have sucked okay I'm so if I run this it doesn't return it doesn't print",
    "start": "1261809",
    "end": "1269970"
  },
  {
    "text": "uh it doesn't run what did I do Oh G parameter G where's my G op no just",
    "start": "1269970",
    "end": "1285840"
  },
  {
    "text": "remove that that's what happens when I do live coding okay so back to returns",
    "start": "1285840",
    "end": "1291299"
  },
  {
    "text": "if I run this it's going to return nothing right it what I'm sorry what it",
    "start": "1291299",
    "end": "1298200"
  },
  {
    "text": "doesn't print anything now before we understand why take a look at this example this is my inline",
    "start": "1298200",
    "end": "1304830"
  },
  {
    "text": "function there is an interval of my for each and this is exactly the same as for",
    "start": "1304830",
    "end": "1310139"
  },
  {
    "text": "each in fact if you navigate to for each over here right let's split vertically",
    "start": "1310139",
    "end": "1316080"
  },
  {
    "text": "and then I'll switch back to returns you can see that my for each is essentially",
    "start": "1316080",
    "end": "1322049"
  },
  {
    "text": "the same as the for each here which now died on me but anyway it's exactly the same trust",
    "start": "1322049",
    "end": "1328230"
  },
  {
    "text": "me if I if I run containing function",
    "start": "1328230",
    "end": "1334409"
  },
  {
    "text": "with my for each what do you think it's going to print hello",
    "start": "1334409",
    "end": "1345110"
  },
  {
    "text": "or it won't print anything well if it's exactly the same as the other for each",
    "start": "1345440",
    "end": "1350990"
  },
  {
    "text": "is going to not print anything right that was that was like a trick question it's not going to print anything however",
    "start": "1350990",
    "end": "1356540"
  },
  {
    "text": "notice one thing I wasn't going to run this if I remove the inline I can't return right and this is what's called",
    "start": "1356540",
    "end": "1365480"
  },
  {
    "text": "non-local returns the fact that this is returning outside",
    "start": "1365480",
    "end": "1370490"
  },
  {
    "text": "the fact that it's not printing hello is because the return is returning from containing function why is it returning",
    "start": "1370490",
    "end": "1376820"
  },
  {
    "text": "from containing function because for each is an inline function therefore it means it's essentially copying pasting",
    "start": "1376820",
    "end": "1382490"
  },
  {
    "text": "the code in line and when I call return there's only one function to return with which is the containing function so what",
    "start": "1382490",
    "end": "1390410"
  },
  {
    "text": "happens in this case well in this case you can't actually do a non-local return",
    "start": "1390410",
    "end": "1395480"
  },
  {
    "text": "because functions the returns are only applicable directly when invoked like",
    "start": "1395480",
    "end": "1401120"
  },
  {
    "text": "this they're only applicable to inline functions now what happens if I want to",
    "start": "1401120",
    "end": "1408020"
  },
  {
    "text": "actually return to the containing function and not to the invocation of",
    "start": "1408020",
    "end": "1413510"
  },
  {
    "text": "the containing function I use a label no this is not a go to please it is not",
    "start": "1413510",
    "end": "1418790"
  },
  {
    "text": "okay this is not a go to it's a nicer go to it's an act so I use ad and AD is the",
    "start": "1418790",
    "end": "1428300"
  },
  {
    "text": "actual name of the function these aren't built in labels right if I if my function was called my foreach then it",
    "start": "1428300",
    "end": "1434600"
  },
  {
    "text": "would be at my forage and in fact you can prefix it with an label as well I can give that lambda label so I can say",
    "start": "1434600",
    "end": "1441260"
  },
  {
    "text": "my label and then return at my label now if you're not aware in Collin we have",
    "start": "1441260",
    "end": "1447350"
  },
  {
    "text": "lambdas well you know we've seen them right this is a lambda I mean where as",
    "start": "1447350",
    "end": "1455090"
  },
  {
    "text": "my higher order if I write main this is",
    "start": "1455090",
    "end": "1461240"
  },
  {
    "text": "a lambda so if I write higher-order F and then X to X plus something this is a",
    "start": "1461240",
    "end": "1472100"
  },
  {
    "text": "lambda right this is a lambda which in many languages",
    "start": "1472100",
    "end": "1477720"
  },
  {
    "text": "is called the same anonymous function in coordinates not we have anonymous functions as well this is an anonymous",
    "start": "1477720",
    "end": "1483540"
  },
  {
    "text": "function right it's literally the same as in JavaScript so I have a function with no name where I can pass in the",
    "start": "1483540",
    "end": "1491580"
  },
  {
    "text": "actual parameter name and then do a return in the case of an anonymous",
    "start": "1491580",
    "end": "1496650"
  },
  {
    "text": "function it does perform a local return as opposed to a lambda so meaning that",
    "start": "1496650",
    "end": "1503610"
  },
  {
    "text": "if you want local returns you can either use labels or anonymous functions okay",
    "start": "1503610",
    "end": "1512120"
  },
  {
    "text": "yes what do you mean",
    "start": "1512120",
    "end": "1521630"
  },
  {
    "text": "but you don't that's why I just showed you you can use for anonymous functions",
    "start": "1527080",
    "end": "1532200"
  },
  {
    "text": "that's a that's a question best asked from Andre I guess not me there's",
    "start": "1532409",
    "end": "1537580"
  },
  {
    "text": "there's a lot of reasons that we do some things in Kotlin some of them are for performance reasons others are for",
    "start": "1537580",
    "end": "1543370"
  },
  {
    "text": "tooling take into account though a lot of times when people say to us why should I use Carlin if Scala is just",
    "start": "1543370",
    "end": "1550059"
  },
  {
    "text": "like Kotlin but it allows me for more more things because the flexibility and",
    "start": "1550059",
    "end": "1555070"
  },
  {
    "text": "the versatility that Scala has it also makes it extremely power of art to do",
    "start": "1555070",
    "end": "1561190"
  },
  {
    "text": "tooling and performance wise it's not as performant right so there are there might be some reasons sometimes that we",
    "start": "1561190",
    "end": "1567610"
  },
  {
    "text": "do it for for performance other times it might mean we're doing something because",
    "start": "1567610",
    "end": "1573669"
  },
  {
    "text": "we're going to later add another feature that enable to be able to distinguish",
    "start": "1573669",
    "end": "1578950"
  },
  {
    "text": "we're using this ahead of time right",
    "start": "1578950",
    "end": "1584100"
  },
  {
    "text": "okay now with the inlining I said that inlining is good for performance reasons",
    "start": "1584100",
    "end": "1590169"
  },
  {
    "text": "the other one is for reification of generics okay so if you're familiar with the JVM which you probably are you",
    "start": "1590169",
    "end": "1597549"
  },
  {
    "text": "know that we have this minor little problem called type erasure right so what you can do with Kotlin is any",
    "start": "1597549",
    "end": "1604779"
  },
  {
    "text": "inline function you can add the refight keyword to it and that will then allow",
    "start": "1604779",
    "end": "1612250"
  },
  {
    "text": "you to do certain type checking on the generic type right so in this case I can",
    "start": "1612250",
    "end": "1618010"
  },
  {
    "text": "say is input of T if I remove reified it says to me that I cannot do this okay so",
    "start": "1618010",
    "end": "1626710"
  },
  {
    "text": "reification and if i remove in refight you see that i get the warning again",
    "start": "1626710",
    "end": "1631990"
  },
  {
    "text": "right it says the performance improvement here is minimal because you don't have a lambda yet that does not",
    "start": "1631990",
    "end": "1639970"
  },
  {
    "text": "appear when I'm using the refight because it does allow me to get some information at times okay one other",
    "start": "1639970",
    "end": "1648159"
  },
  {
    "text": "thing we have in Cortland is well you have this in many languages but is",
    "start": "1648159",
    "end": "1654360"
  },
  {
    "text": "variance covariance and contravariance so here's some code this is a mutable",
    "start": "1654360",
    "end": "1659919"
  },
  {
    "text": "list of any and this immutable list of string and if I uncomment this is this gonna work yes or no I'll give you a hint",
    "start": "1659919",
    "end": "1666799"
  },
  {
    "text": "the reason it's commented out is because I always check that this project compiles before I do the demos so it's",
    "start": "1666799",
    "end": "1672740"
  },
  {
    "text": "not going to work why is it not going to work so I have a you know a string is a",
    "start": "1672740",
    "end": "1679669"
  },
  {
    "text": "subtype of any but variants it's typing",
    "start": "1679669",
    "end": "1686960"
  },
  {
    "text": "variants but why doesn't it work explain to me why this won't work right and",
    "start": "1686960",
    "end": "1702860"
  },
  {
    "text": "that's what this is saying but yes",
    "start": "1702860",
    "end": "1708039"
  },
  {
    "text": "no I'm not saying how to fix it I'm saying why doesn't this work okay yes",
    "start": "1714850",
    "end": "1732290"
  },
  {
    "text": "yes and imagine imagine a much easier example for you to to see this it would",
    "start": "1732290",
    "end": "1737930"
  },
  {
    "text": "be very obvious as if you're passing a mutable list to a function and you pass",
    "start": "1737930",
    "end": "1743450"
  },
  {
    "text": "if a function of type any in your passive type string the function is of type any so essentially inside that",
    "start": "1743450",
    "end": "1749300"
  },
  {
    "text": "function you could add anything to that list right because it's off type any and yet if you're passing in an array of",
    "start": "1749300",
    "end": "1754850"
  },
  {
    "text": "string you can't add a number to a an array of string right no I just told",
    "start": "1754850",
    "end": "1764570"
  },
  {
    "text": "them the answer I've got better ones for chocolate thank you I will is it is it",
    "start": "1764570",
    "end": "1774470"
  },
  {
    "text": "is it dark chocolate or is it milk I don't want it",
    "start": "1774470",
    "end": "1779830"
  },
  {
    "text": "so now this does work why does this work because it's immutable right and by",
    "start": "1780730",
    "end": "1788270"
  },
  {
    "text": "default in Kotlin list collections they're all immutable as opposed to mutable that's why you have to write",
    "start": "1788270",
    "end": "1794570"
  },
  {
    "text": "beautiful okay now in column we don't have we have call site variants but what",
    "start": "1794570",
    "end": "1802850"
  },
  {
    "text": "you can do is you can declare certain types like this list here this list is",
    "start": "1802850",
    "end": "1808480"
  },
  {
    "text": "if you go to the declaration you can see that this list is contravariant right",
    "start": "1808480",
    "end": "1814910"
  },
  {
    "text": "which is indicating that what we've just done is possible and in Kotlin this is",
    "start": "1814910",
    "end": "1820070"
  },
  {
    "text": "expressed without okay so you have out and you have in so we have declaration",
    "start": "1820070",
    "end": "1826850"
  },
  {
    "text": "site variance which means that we declare the the covariance or the contravariance of that type at the",
    "start": "1826850",
    "end": "1832370"
  },
  {
    "text": "declaration site you also have you site variance when you're interrupting with java for instance or in a specific",
    "start": "1832370",
    "end": "1838190"
  },
  {
    "text": "function you can call you site variance but generally in Kotlin you do declaration site variance which means",
    "start": "1838190",
    "end": "1844490"
  },
  {
    "text": "it's great because i don't have to have this question mark extends of all this that we do constantly in Java the rule",
    "start": "1844490",
    "end": "1850540"
  },
  {
    "text": "of thumb here is really simple is if your class is only consuming then it's",
    "start": "1850540",
    "end": "1856840"
  },
  {
    "text": "covariance and in fact the IDE can tell you it says that you're only consuming here so you can add the in to make this",
    "start": "1856840",
    "end": "1864280"
  },
  {
    "text": "covariance if you're producing then it's going to be contravariant and you would add the out okay so to summarize you",
    "start": "1864280",
    "end": "1872800"
  },
  {
    "text": "have covariance and contravariance you can declare it at the decoration site and you can also use it in specific",
    "start": "1872800",
    "end": "1878590"
  },
  {
    "text": "cases on call sites now let's get into some of the other things around column",
    "start": "1878590",
    "end": "1884740"
  },
  {
    "text": "which is dsls okay so let's do some coding here so how many are you familiar",
    "start": "1884740",
    "end": "1891400"
  },
  {
    "text": "with DSL so domain-specific languages dsls are awesome ddd me Scott I don't",
    "start": "1891400",
    "end": "1899470"
  },
  {
    "text": "know why Ross Scott go to ok and that's how we name things I'm from Spain I",
    "start": "1899470",
    "end": "1911550"
  },
  {
    "text": "didn't mean that as an insult no and on one time I was going to I went",
    "start": "1911550",
    "end": "1917860"
  },
  {
    "text": "to come I went to a company before I joined Jabbar I was doing consulting and I went to two I tell you this story",
    "start": "1917860",
    "end": "1923050"
  },
  {
    "text": "because this is really really true I went to a consulting company and I was doing the code review and they had a",
    "start": "1923050",
    "end": "1929500"
  },
  {
    "text": "function which was called so anyone speak Spanish here okay you all speak Spanish so it was called fetch a Manolo",
    "start": "1929500",
    "end": "1936700"
  },
  {
    "text": "write and fetch her Manolo fetch a means date and Manolo is Manuel a name and I",
    "start": "1936700",
    "end": "1945070"
  },
  {
    "text": "said what is fetch a Manola and he said it's a function we've written for Manolo",
    "start": "1945070",
    "end": "1951600"
  },
  {
    "text": "because Manolo wanted the date in this specific format and I said but there's",
    "start": "1951600",
    "end": "1957640"
  },
  {
    "text": "there's two Manolos here and they said no he's manual which is short for Manolo",
    "start": "1957640",
    "end": "1963700"
  },
  {
    "text": "Manuel and this one's Manolo I said so what happens if you want a variation he",
    "start": "1963700",
    "end": "1968710"
  },
  {
    "text": "says well we'll just call it my knowledge who write and I kid you not this is the code that's out there anyway",
    "start": "1968710",
    "end": "1975510"
  },
  {
    "text": "so you all know about function extensions in callings so I can write is same as value string and then I do for",
    "start": "1975510",
    "end": "1982539"
  },
  {
    "text": "example this equals value right and if again I I used to know how to write",
    "start": "1982539",
    "end": "1987669"
  },
  {
    "text": "Kotlin code there you go so this is an extension function so I can say now or",
    "start": "1987669",
    "end": "1994140"
  },
  {
    "text": "this is same as this right and I can do",
    "start": "1994140",
    "end": "1999580"
  },
  {
    "text": "this in infix notation as well which I can just write it like that and get rid of",
    "start": "1999580",
    "end": "2005370"
  },
  {
    "text": "that and the best part about doing doing demos in Kotlin in IntelliJ is because I don't even need to know Kotlin I just",
    "start": "2005370",
    "end": "2011399"
  },
  {
    "text": "hit alt enter and I can get that in in fix and now that is awesome because now I can call this an infix notation and it",
    "start": "2011399",
    "end": "2017880"
  },
  {
    "text": "starts to say oh this looks nice it looks like kind of like dsls right or our BDD okay so this is the this is the",
    "start": "2017880",
    "end": "2026820"
  },
  {
    "text": "typical thing that you see in Kotlin right now DSL is go a little bit farther with cotton and what we couldn't do is",
    "start": "2026820",
    "end": "2033899"
  },
  {
    "text": "let's try and create for instance a DSL that allows me to like do some creative",
    "start": "2033899",
    "end": "2040860"
  },
  {
    "text": "framework around web developments how many of you are familiar with Express Jas or Ruby or Sinatra and stuff like",
    "start": "2040860",
    "end": "2046919"
  },
  {
    "text": "that right so I want to basically create a function that has for instance a get that takes a path of type string and",
    "start": "2046919",
    "end": "2054628"
  },
  {
    "text": "then takes a handler right and the handler is going to take for instance a request which is an HTTP request and a",
    "start": "2054629",
    "end": "2061080"
  },
  {
    "text": "response and it's going to return unit and then I'm going to have a class request that for instance takes property",
    "start": "2061080",
    "end": "2068429"
  },
  {
    "text": "of type accept and I'm going to have a class response that takes for instance property status code of type ends and of",
    "start": "2068429",
    "end": "2076858"
  },
  {
    "text": "our content of type string right so now I could do something like get get home",
    "start": "2076859",
    "end": "2084690"
  },
  {
    "text": "they're now in Cortland remember if the last parameter to another to a function is another function what can you do in",
    "start": "2084690",
    "end": "2091378"
  },
  {
    "text": "Kotlin while instead of enclosing it here you can enclose it outside of the",
    "start": "2091379",
    "end": "2097740"
  },
  {
    "text": "brackets right so I could enclose this over here okay okay",
    "start": "2097740",
    "end": "2103470"
  },
  {
    "text": "and let's go get let's rename this to get root for instance okay why is that",
    "start": "2103470",
    "end": "2112920"
  },
  {
    "text": "giving me an error the what requester oh",
    "start": "2112920",
    "end": "2120930"
  },
  {
    "text": "yeah okay so yes so now I've got to do request response and then I have to do for instance if requests accept echos",
    "start": "2120930",
    "end": "2130680"
  },
  {
    "text": "application JSON right then whatever like for example response content equals",
    "start": "2130680",
    "end": "2138690"
  },
  {
    "text": "some JSON right and I love escaping key",
    "start": "2138690",
    "end": "2144630"
  },
  {
    "text": "by the way you know how to write JSON in IntelliJ right alt enter inject JSON and",
    "start": "2144630",
    "end": "2149819"
  },
  {
    "text": "then you do alt enter edit JSON fragment and then you do it like that you don't",
    "start": "2149819",
    "end": "2157619"
  },
  {
    "text": "sit there and do escaping of characters okay so now this is nice the problem is",
    "start": "2157619",
    "end": "2165119"
  },
  {
    "text": "that I have all of this horrible request response and the curly braces and all of that crap and this looks kind of sucky",
    "start": "2165119",
    "end": "2170310"
  },
  {
    "text": "now what I can do is I can replace this with handler for instance right create a",
    "start": "2170310",
    "end": "2176369"
  },
  {
    "text": "type called handler that handler in turn takes a request object and a response",
    "start": "2176369",
    "end": "2182880"
  },
  {
    "text": "object right and then what I can do is since in Kotlin I could potentially if",
    "start": "2182880",
    "end": "2189960"
  },
  {
    "text": "there's a single parameter to a function replace it with it I could get rid of",
    "start": "2189960",
    "end": "2194970"
  },
  {
    "text": "the explicit declaration here and then this one prefix it with it right and",
    "start": "2194970",
    "end": "2201839"
  },
  {
    "text": "then request would become request and response would be become response okay",
    "start": "2201839",
    "end": "2207560"
  },
  {
    "text": "now that looks nice but again it's that it it's that wretched it that I want to get",
    "start": "2207560",
    "end": "2214109"
  },
  {
    "text": "rid of so how can I do this I want to do just like",
    "start": "2214109",
    "end": "2219970"
  },
  {
    "text": "if request how can I do that so you're all familiar with high order functions right higher order functions are what",
    "start": "2219970",
    "end": "2225280"
  },
  {
    "text": "functions that take other functions or return functions what else do we have in called in apart from functions we have",
    "start": "2225280",
    "end": "2230770"
  },
  {
    "text": "extension functions so why not combine the two why not create a higher-order function that doesn't just take a",
    "start": "2230770",
    "end": "2236290"
  },
  {
    "text": "function but takes an extension function so what I could do is instead of this taking a function I can say that I want",
    "start": "2236290",
    "end": "2243070"
  },
  {
    "text": "get root to take an extension function and the way you do that is by prefixing",
    "start": "2243070",
    "end": "2248770"
  },
  {
    "text": "it with a dot similar to how you declare an extension function so now I'm saying that root get root takes an extension",
    "start": "2248770",
    "end": "2258010"
  },
  {
    "text": "function now given that this is an extension function over here this means that this lambda is what it's a member",
    "start": "2258010",
    "end": "2265780"
  },
  {
    "text": "of handler since it's a mammal of handler what does it have access to it",
    "start": "2265780",
    "end": "2271030"
  },
  {
    "text": "has access to properties of that Handler meaning that I can get rid of it",
    "start": "2271030",
    "end": "2277770"
  },
  {
    "text": "okay and I have my nice little much nicer syntax here okay following me good",
    "start": "2277770",
    "end": "2286390"
  },
  {
    "text": "now this is also nice but I want to go one step further what if I want to do",
    "start": "2286390",
    "end": "2291790"
  },
  {
    "text": "something like that what if I want to do something like that right content now let's follow the same",
    "start": "2291790",
    "end": "2298300"
  },
  {
    "text": "pattern the problem here is that response is now what it's a type and",
    "start": "2298300",
    "end": "2303510"
  },
  {
    "text": "essentially what I'm doing here is I want to do what I want to invoke a type",
    "start": "2303510",
    "end": "2308820"
  },
  {
    "text": "right because this is this is a lambda so I'm saying how can I invoke a type",
    "start": "2308820",
    "end": "2314620"
  },
  {
    "text": "that's not possible actually it is in calling you can create a class foo and then you can say I want to create a new",
    "start": "2314620",
    "end": "2321610"
  },
  {
    "text": "instance of foo right and then in foo I can say hello and then this will say",
    "start": "2321610",
    "end": "2327790"
  },
  {
    "text": "squiggly and I'll say no and what I'll do is I'll create an operator that is",
    "start": "2327790",
    "end": "2333820"
  },
  {
    "text": "called invoke so that now allows me to invoke an instance given that I can",
    "start": "2333820",
    "end": "2341140"
  },
  {
    "text": "invoke an instance there well why don't I just do the same thing here why don't I invoke an instance how do I do that",
    "start": "2341140",
    "end": "2347740"
  },
  {
    "text": "well what is response response is a type so I have to do is create an operator invoke for the class type and I'll just",
    "start": "2347740",
    "end": "2355930"
  },
  {
    "text": "tell IntelliJ to do it for me now comes the question of what do I pass in its",
    "start": "2355930",
    "end": "2361450"
  },
  {
    "text": "parameter well what do I need here I need content what is content it's a property of response",
    "start": "2361450",
    "end": "2367450"
  },
  {
    "text": "therefore I create this as an extension property to response meaning I now have",
    "start": "2367450",
    "end": "2374590"
  },
  {
    "text": "my content okay and that's how you create their cells in Collin okay now",
    "start": "2374590",
    "end": "2380950"
  },
  {
    "text": "this is just one sample DSL and the beauty here is exactly what we've seen",
    "start": "2380950",
    "end": "2386650"
  },
  {
    "text": "is that when we talk about DSL people quickly single how I'm not going to create my own HTML no you're not",
    "start": "2386650",
    "end": "2391900"
  },
  {
    "text": "the beauty of DSL is the small DSL that you create across your application right",
    "start": "2391900",
    "end": "2397150"
  },
  {
    "text": "if you combine this something with Alberto's workshop around the domain-driven design what is one of the",
    "start": "2397150",
    "end": "2402700"
  },
  {
    "text": "ideas behind domain-driven design sorry that's a different workshop about domain during design the idea is to have this",
    "start": "2402700",
    "end": "2407950"
  },
  {
    "text": "concept of the ubiquitous language right whether whether where the business aligns with how you write code think the",
    "start": "2407950",
    "end": "2414640"
  },
  {
    "text": "potential you could have here right you could have the Dutch tax office define",
    "start": "2414640",
    "end": "2419830"
  },
  {
    "text": "their own rules in cotton it's like mind blown I was actually at the Dutch tax",
    "start": "2419830",
    "end": "2426250"
  },
  {
    "text": "office and I told them this so and they said they're gonna start",
    "start": "2426250",
    "end": "2431520"
  },
  {
    "text": "looking at Cartland so there you go the",
    "start": "2431520",
    "end": "2437010"
  },
  {
    "text": "deal was if I move to to Amsterdam I get like a massive tax break",
    "start": "2437010",
    "end": "2443240"
  },
  {
    "text": "don't be cool I do it anyway yes anyway so that's kind of like the",
    "start": "2443240",
    "end": "2450510"
  },
  {
    "text": "dsl stuff in Cortland right and this is where you can use this car and you can use this stuff to create wonderful",
    "start": "2450510",
    "end": "2455700"
  },
  {
    "text": "little dsls for your domain-driven design for your configuration file for all of these things we've used this",
    "start": "2455700",
    "end": "2461309"
  },
  {
    "text": "extensively so for instance in team city which is our continuous integration server we have now created dsl tool as",
    "start": "2461309",
    "end": "2466920"
  },
  {
    "text": "allows you to define all of your configuration using cotton right Gradle has adopted this for the same purpose",
    "start": "2466920",
    "end": "2473430"
  },
  {
    "text": "okay any questions yes in what sense",
    "start": "2473430",
    "end": "2481770"
  },
  {
    "text": "would it be performance",
    "start": "2481770",
    "end": "2484760"
  },
  {
    "text": "I don't think that it is appreciated I",
    "start": "2490130",
    "end": "2495950"
  },
  {
    "text": "don't think it is like it's it would be minimal in that case I know I don't see an issue in terms of performance it okay",
    "start": "2495950",
    "end": "2504080"
  },
  {
    "text": "quickly I've got a few minutes left right so I'll show you quickly some things around what is this thing that",
    "start": "2504080",
    "end": "2513140"
  },
  {
    "text": "we're going to see karate yes karate okay how many of you have",
    "start": "2513140",
    "end": "2518210"
  },
  {
    "text": "looked into co-routines and Colleen right Cole routines are great they're the best way to do things",
    "start": "2518210",
    "end": "2524150"
  },
  {
    "text": "I'm joking um so okay um I don't have internet so I can't put my wonderful",
    "start": "2524150",
    "end": "2530390"
  },
  {
    "text": "slides on but how many of you doing a synchronous programming right now how",
    "start": "2530390",
    "end": "2536510"
  },
  {
    "text": "many of you do threads I love it JavaScript callbacks love it it's",
    "start": "2536510",
    "end": "2547880"
  },
  {
    "text": "JavaScript part of the callbacks part right so threads are complicated we all know that pull backs suck because the",
    "start": "2547880",
    "end": "2554930"
  },
  {
    "text": "problem with callback is that you have a function that call that once it's complete it will call back another function the problem of course we all",
    "start": "2554930",
    "end": "2561080"
  },
  {
    "text": "know is that it's not just one function that function will then have to call another function as a callback and then another function as a callback and so on",
    "start": "2561080",
    "end": "2567860"
  },
  {
    "text": "and so forth and welcome to the wonderful world of JavaScript which looks like a tilted Christmas tree right because when you put all of the little",
    "start": "2567860",
    "end": "2573890"
  },
  {
    "text": "you know arrows like this it looks like a Christmas tree if you look at it horizontally right and then of course",
    "start": "2573890",
    "end": "2580610"
  },
  {
    "text": "injury in the world of JavaScript do the normally with callbacks error handling",
    "start": "2580610",
    "end": "2586940"
  },
  {
    "text": "is also problematic right so usually the first parameter in JavaScript by",
    "start": "2586940",
    "end": "2591980"
  },
  {
    "text": "convention was e for error of course some people think he is event or for exciting so they don't even",
    "start": "2591980",
    "end": "2597980"
  },
  {
    "text": "handle errors so in Coleen we've tried",
    "start": "2597980",
    "end": "2602990"
  },
  {
    "text": "to take an approach to a synchronous programming and concurrent programming using this generic concept which within",
    "start": "2602990",
    "end": "2608210"
  },
  {
    "text": "around since the 70s or if not earlier I think the 50s called co-routines right or suspend herbal computations",
    "start": "2608210",
    "end": "2615110"
  },
  {
    "text": "under the covers co-routines are essentially the exact same thing as callbacks except you're not worried",
    "start": "2615110",
    "end": "2620870"
  },
  {
    "text": "about doing the callbacks it is the compiler that is the callbacks right the compiler under",
    "start": "2620870",
    "end": "2626120"
  },
  {
    "text": "the covers is creating the state machine making sure where the compat where when you when when in front of suspended",
    "start": "2626120",
    "end": "2632480"
  },
  {
    "text": "function is called it can essentially resume at some point where it can resume all of this is taken care of for you",
    "start": "2632480",
    "end": "2638360"
  },
  {
    "text": "under the covers by the compiler and the way that we've done it in cotton is essentially by adding a single key words",
    "start": "2638360",
    "end": "2646160"
  },
  {
    "text": "of the language called suspend right and the see that the suspension the this function is over here is this key word",
    "start": "2646160",
    "end": "2655520"
  },
  {
    "text": "here suspend and what suspend means is that that function essentially can be",
    "start": "2655520",
    "end": "2660830"
  },
  {
    "text": "suspended in some point of time and then at some point resumed okay so think",
    "start": "2660830",
    "end": "2667160"
  },
  {
    "text": "about a function that you can pause and resume right Cortines take this idea of",
    "start": "2667160",
    "end": "2676240"
  },
  {
    "text": "having suspend herbal computations where I can call a function suspend it continue something else resume that",
    "start": "2676240",
    "end": "2683120"
  },
  {
    "text": "function get the information back and so on and so forth and doing this a compiler level meaning that you do not",
    "start": "2683120",
    "end": "2688850"
  },
  {
    "text": "need any primitives meaning that if you are targeting JavaScript with Kotlin targeting the JVM with calling you don't",
    "start": "2688850",
    "end": "2695840"
  },
  {
    "text": "have to worry about one platform having threads one platform having not threads all of that is taking care of you under",
    "start": "2695840",
    "end": "2701900"
  },
  {
    "text": "the covers by the compiler to understand how it does it it does it with",
    "start": "2701900",
    "end": "2707710"
  },
  {
    "text": "lightweight threads and when I say lightweight threads I mean it so here is an example where I have one to a hundred",
    "start": "2707710",
    "end": "2714620"
  },
  {
    "text": "thousand jobs which are essentially threads that I'm launching and I'm gonna",
    "start": "2714620",
    "end": "2719660"
  },
  {
    "text": "do a thread sleep and then I'm going to print out a dot when that thread sleeps and I'm going to run this okay so I'm",
    "start": "2719660",
    "end": "2726410"
  },
  {
    "text": "gonna run threads okay I'm gonna run this what do you think the results going to be out of memory yes",
    "start": "2726410",
    "end": "2733940"
  },
  {
    "text": "and look at my awesome nyan cat thing out of memory unable to create new",
    "start": "2733940",
    "end": "2740150"
  },
  {
    "text": "thread okay so I'm gonna do the same with co-routines and kolaches you can",
    "start": "2740150",
    "end": "2746420"
  },
  {
    "text": "essentially see that it's exactly the same thing except instead of one two jobs a one tooth under oath I've created",
    "start": "2746420",
    "end": "2752330"
  },
  {
    "text": "a list I've got this little thing here called launch that you don't need to worry about right now I've this thing called delay which is",
    "start": "2752330",
    "end": "2758280"
  },
  {
    "text": "essentially the same as thread sleep and I've got print if I run this what do you think is gonna happen it's obvious right",
    "start": "2758280",
    "end": "2764610"
  },
  {
    "text": "because if it failed there will be a really shitty demo so this is actually",
    "start": "2764610",
    "end": "2770010"
  },
  {
    "text": "going to run and it will finish and it's printed out a hundred thousand threads right and in fact I can print out a",
    "start": "2770010",
    "end": "2775200"
  },
  {
    "text": "million threads right and allows me to catch my breath and what this is doing is really lightweight threads right so",
    "start": "2775200",
    "end": "2783630"
  },
  {
    "text": "it's suspending functions doing the work suspending doing the work suspending resuming back and it's doing this by",
    "start": "2783630",
    "end": "2790860"
  },
  {
    "text": "using trying to do it in a way that is familiar with the way you already code",
    "start": "2790860",
    "end": "2796170"
  },
  {
    "text": "so the main idea behind co-routines is that I continue to work the way I have",
    "start": "2796170",
    "end": "2801900"
  },
  {
    "text": "usually worked okay with no having to learn about new operators with not",
    "start": "2801900",
    "end": "2808860"
  },
  {
    "text": "having to learn about new ways of writing a synchronous code have any of you played with rx Java right so Rx Java",
    "start": "2808860",
    "end": "2816660"
  },
  {
    "text": "the first time they introduce you to rx Java they say to you everything is a stream and it's observable and you kind",
    "start": "2816660",
    "end": "2822840"
  },
  {
    "text": "of think what the hell did you just say to me right and the idea is that you move away from discrete value or you move away",
    "start": "2822840",
    "end": "2829020"
  },
  {
    "text": "from you know into the specific set of values to a stream of values that you continuously can subscribe to using",
    "start": "2829020",
    "end": "2837090"
  },
  {
    "text": "what's essentially an observable pattern right Rx is pretty much an observable pattern with a series of operators on",
    "start": "2837090",
    "end": "2843780"
  },
  {
    "text": "top and if you have done rx you know that you have to have a mind shift to move away from one certain way of",
    "start": "2843780",
    "end": "2850560"
  },
  {
    "text": "programming to a different way of programming with co-routines the idea is that you do not do that with co-routines",
    "start": "2850560",
    "end": "2857430"
  },
  {
    "text": "the idea is that you continue to program the same way that you would in fact take a look at this code right this code is",
    "start": "2857430",
    "end": "2865680"
  },
  {
    "text": "calling two functions and measuring millimeters is is a standard library",
    "start": "2865680",
    "end": "2872490"
  },
  {
    "text": "function that just measures how long code some code is going to take and then I'm going to call function one function",
    "start": "2872490",
    "end": "2877530"
  },
  {
    "text": "two and print out the result of one plus two this function has a suspend it's",
    "start": "2877530",
    "end": "2883710"
  },
  {
    "text": "called this magical thing called suspend which means it's a suspending function and this one has a suspend",
    "start": "2883710",
    "end": "2889800"
  },
  {
    "text": "as well if I run this how long do you think this is going to take one second",
    "start": "2889800",
    "end": "2897230"
  },
  {
    "text": "let's run it it's going to take neither one nor two it's gonna take two thousand",
    "start": "2897230",
    "end": "2903150"
  },
  {
    "text": "fifteen milliseconds which is slightly over two seconds so yeah it's gonna take",
    "start": "2903150",
    "end": "2908160"
  },
  {
    "text": "two seconds the point being is that this is exactly what you would come to expect I am running a function and then I'm",
    "start": "2908160",
    "end": "2916080"
  },
  {
    "text": "running another function the idea behind co-routines is that I continue to work the way I am then",
    "start": "2916080",
    "end": "2921480"
  },
  {
    "text": "you're saying that what's the bloody point of the others because this is not running on the main thread it's potentially not blocking the main thread",
    "start": "2921480",
    "end": "2927780"
  },
  {
    "text": "anymore why there's this thing over here called ROM blocking which is going to",
    "start": "2927780",
    "end": "2933360"
  },
  {
    "text": "block but forget the name it's going to block the main thread until any core",
    "start": "2933360",
    "end": "2938490"
  },
  {
    "text": "routine don't use so let me get to that so this is a suspending function right I",
    "start": "2938490",
    "end": "2944970"
  },
  {
    "text": "can't just come and have a main function here that's if I take a main function",
    "start": "2944970",
    "end": "2951900"
  },
  {
    "text": "here and I say function one it's not going to let me call it because this says this is suspending function so the",
    "start": "2951900",
    "end": "2959400"
  },
  {
    "text": "function that calls this needs to be able to know how to handle suspension suspending functions so you can only",
    "start": "2959400",
    "end": "2965190"
  },
  {
    "text": "call suspending functions from other suspending functions the main entry point to an application you could use",
    "start": "2965190",
    "end": "2971550"
  },
  {
    "text": "something like ROM blocking or some other mechanism which you will see but ROM blocking is kind of like a helper",
    "start": "2971550",
    "end": "2977460"
  },
  {
    "text": "method that allows you to invoke suspending functions the fact that this is doing this means that it's no longer",
    "start": "2977460",
    "end": "2983370"
  },
  {
    "text": "blocking the main thread you had a question",
    "start": "2983370",
    "end": "2987319"
  },
  {
    "text": "thread thought join is is essentially waiting for the threads right here there",
    "start": "2988460",
    "end": "2993600"
  },
  {
    "text": "is no threat or join in threat or join in what sense is it different like in thread I'll join you are launching 30",
    "start": "2993600",
    "end": "3000470"
  },
  {
    "text": "threads right and then you're waiting for them to join okay but you have to",
    "start": "3000470",
    "end": "3006590"
  },
  {
    "text": "add some at some point wait for the threads to join and you're launching threads okay in this case to the",
    "start": "3006590",
    "end": "3013490"
  },
  {
    "text": "practical like the the in terms of the result it is not there's no difference",
    "start": "3013490",
    "end": "3019550"
  },
  {
    "text": "the difference is that there are no threads here okay these are lightweight threads Otis okay but the point being is that this is",
    "start": "3019550",
    "end": "3028040"
  },
  {
    "text": "top-down it's no magic because one of the things that we favor in Kotlin is",
    "start": "3028040",
    "end": "3033770"
  },
  {
    "text": "that when you want concurrency you need to be explicit right and this isn't",
    "start": "3033770",
    "end": "3040790"
  },
  {
    "text": "concurrent this is sequential so how do i do concurrent like this in concurrent",
    "start": "3040790",
    "end": "3048020"
  },
  {
    "text": "i have a syntax called a sink and a sink is not a key word of the language a sink",
    "start": "3048020",
    "end": "3054080"
  },
  {
    "text": "is essentially a library called part of the Kotlin co-routines library and I",
    "start": "3054080",
    "end": "3059270"
  },
  {
    "text": "think what it's doing now in this case it's saying that yes this function is now a synchronously cold so in this case",
    "start": "3059270",
    "end": "3067010"
  },
  {
    "text": "it's going to run this concurrently meaning that the time is going to be one",
    "start": "3067010",
    "end": "3072350"
  },
  {
    "text": "second right if you're familiar with c-sharp this is would be similar to the",
    "start": "3072350",
    "end": "3077870"
  },
  {
    "text": "a sync await in c-sharp the difference is that here I actually can get the value as opposed to getting a task and",
    "start": "3077870",
    "end": "3084830"
  },
  {
    "text": "then inspecting the value of that task and you can do some cool things with",
    "start": "3084830",
    "end": "3089900"
  },
  {
    "text": "code routines like for instance even have a synchronous calls that are lazily evaluated so for instance here I'm",
    "start": "3089900",
    "end": "3096470"
  },
  {
    "text": "defining one function one one function two and then I say result a wait and result wait just like before the",
    "start": "3096470",
    "end": "3104030"
  },
  {
    "text": "difference is that I'm passing in a parameter called lazy what does that mean that means that it will only",
    "start": "3104030",
    "end": "3110330"
  },
  {
    "text": "initiate this co-routine when it is needed which means when a wait is called",
    "start": "3110330",
    "end": "3116660"
  },
  {
    "text": "meaning that in this case this would run two seconds right because until a weight",
    "start": "3116660",
    "end": "3123920"
  },
  {
    "text": "is not called here it doesn't actually need to call it okay so you know",
    "start": "3123920",
    "end": "3130970"
  },
  {
    "text": "co-routines yes the common pool so the co-routines use this lightweight",
    "start": "3130970",
    "end": "3139490"
  },
  {
    "text": "threads so to speak and the you can launch these in different contexts",
    "start": "3139490",
    "end": "3146180"
  },
  {
    "text": "context so common pool is one like a common pool of thread so to speak that you could launch this in and then",
    "start": "3146180",
    "end": "3152480"
  },
  {
    "text": "there's different parameters you can have for example unconfined meaning that I you know it doesn't",
    "start": "3152480",
    "end": "3158540"
  },
  {
    "text": "matter where you launch it you can launch it in one place and resume it in another this is essentially restricting it to a",
    "start": "3158540",
    "end": "3164240"
  },
  {
    "text": "specific common pool you could also create your own threaded context and have it associated to that threaded",
    "start": "3164240",
    "end": "3169730"
  },
  {
    "text": "context the point being here is that can I go two minutes overboard thank you",
    "start": "3169730",
    "end": "3176630"
  },
  {
    "text": "the point being here is that I should have done this when I started launching Android studio actually now I should",
    "start": "3176630",
    "end": "3185810"
  },
  {
    "text": "have launch the emulator before I even flew out from Malaga the point here",
    "start": "3185810",
    "end": "3193760"
  },
  {
    "text": "being is that when you're launching a khole routine when you pass in common",
    "start": "3193760",
    "end": "3199880"
  },
  {
    "text": "pool I can actually pass in other things are you familiar with our ex Java so subscribe on publish on kind of similar",
    "start": "3199880",
    "end": "3205730"
  },
  {
    "text": "and I can actually launch on the UI thread as well right so here's an example this is like this",
    "start": "3205730",
    "end": "3211220"
  },
  {
    "text": "is it for me for Android like I don't I know nothing more than how to launch this app in Android ok and this is the",
    "start": "3211220",
    "end": "3217520"
  },
  {
    "text": "only time I ever open up Android studio so this is Android this is an",
    "start": "3217520",
    "end": "3224240"
  },
  {
    "text": "application that essentially is launching Fibonacci on the main thread",
    "start": "3224240",
    "end": "3229880"
  },
  {
    "text": "so to speak right and it is calculating Fibonacci sequences on the main thread",
    "start": "3229880",
    "end": "3236840"
  },
  {
    "text": "and every time I click this it is calculating a Fibonacci sequence right and you see that the UI is updating and",
    "start": "3236840",
    "end": "3244430"
  },
  {
    "text": "when I keep clicking this it keeps updating and it's updating this on the main thread so I don't even have to",
    "start": "3244430",
    "end": "3250220"
  },
  {
    "text": "worry about that because it is taking care of making sure that this is coming back on the main thread so that's the",
    "start": "3250220",
    "end": "3255890"
  },
  {
    "text": "context parameter that you're passing in yes similar yeah okay so yeah Cora teens",
    "start": "3255890",
    "end": "3264620"
  },
  {
    "text": "are a separate library that are ship that's calling co-routines when you try them please try them now please use them",
    "start": "3264620",
    "end": "3271070"
  },
  {
    "text": "when you first try them the ID is going to complain and say this is a experimental feature you can see that it",
    "start": "3271070",
    "end": "3277520"
  },
  {
    "text": "says experimental fix that if I just say there you go you just add this and then",
    "start": "3277520",
    "end": "3284270"
  },
  {
    "text": "no longer experimental everything's wonderful the the reason that we made that experimental was",
    "start": "3284270",
    "end": "3289970"
  },
  {
    "text": "because marketing wasn't involved in its a completely wrong word we are it's completely semane tained we are we are",
    "start": "3289970",
    "end": "3296000"
  },
  {
    "text": "using an introduction in fact there's a new framework that we've created from the ground up for calling web framework",
    "start": "3296000",
    "end": "3301910"
  },
  {
    "text": "called Couture which is using co-routines from the ground up we're using an in production code we will",
    "start": "3301910",
    "end": "3306980"
  },
  {
    "text": "maintain it so don't worry about that experimental flag just ignore it it's not there it's not part of the standard",
    "start": "3306980",
    "end": "3313220"
  },
  {
    "text": "library as part of the library called co-routines Kotlin X called Linux or co-routines the only thing we added to the actual",
    "start": "3313220",
    "end": "3320420"
  },
  {
    "text": "language itself was that keyword called suspend okay [Applause]",
    "start": "3320420",
    "end": "3331189"
  }
]