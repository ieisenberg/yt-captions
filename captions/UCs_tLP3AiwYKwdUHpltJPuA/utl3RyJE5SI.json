[
  {
    "start": "0",
    "end": "55000"
  },
  {
    "text": "right so I'm here today to talk about this concept called sterilized ability",
    "start": "4890",
    "end": "9960"
  },
  {
    "text": "and so in this talk I'm gonna tell you a little bit about what it means when you want to use it when you might not want",
    "start": "9960",
    "end": "15959"
  },
  {
    "text": "to use it and I'm gonna talk a little bit about my journey through the PhD and how I got interested in this in the",
    "start": "15959",
    "end": "21330"
  },
  {
    "text": "first place so first a little background on me I don't even know if I'm a PhD candidate anymore because I defended",
    "start": "21330",
    "end": "27720"
  },
  {
    "text": "yesterday so that was very exciting thank you I don't know what my formal",
    "start": "27720",
    "end": "34410"
  },
  {
    "text": "status is right now but I still have to finish my thesis so it's not all not all over I used to work at Google I was a",
    "start": "34410",
    "end": "41550"
  },
  {
    "text": "software engineer there where I worked on a storage system and I also worked a little bit on browser security and my",
    "start": "41550",
    "end": "47190"
  },
  {
    "text": "research at MIT has mostly been about fast transactions for multi-core databases and distributed systems okay",
    "start": "47190",
    "end": "55590"
  },
  {
    "start": "55000",
    "end": "123000"
  },
  {
    "text": "so another sort of little bit of insight into what I do and who we are how many of you guys know this handsome gentleman",
    "start": "55590",
    "end": "61290"
  },
  {
    "text": "James Mickens oh you guys I'm about to change a world okay so you got to go out",
    "start": "61290",
    "end": "66540"
  },
  {
    "text": "there Google James Mickens and go read his writings okay he is an academic",
    "start": "66540",
    "end": "71580"
  },
  {
    "text": "researcher from MSR Microsoft Research and he just writes the most entertaining things about computer science that I've",
    "start": "71580",
    "end": "78870"
  },
  {
    "text": "ever seen he also gives really great talks but I think that this quote is is really apt for the kind of work that I",
    "start": "78870",
    "end": "85470"
  },
  {
    "text": "do and the kind of work that people in my group do so I'm gonna read it however the most well just a little background",
    "start": "85470",
    "end": "90810"
  },
  {
    "text": "this is James sort of like theorizing on in the zombie apocalypse who he would want on his team okay so however the",
    "start": "90810",
    "end": "98280"
  },
  {
    "text": "most important person in my gang will be a systems programmer a person who can debug a device driver or a distributed",
    "start": "98280",
    "end": "104460"
  },
  {
    "text": "system is a person who can be trusted in a Hobbesian nightmare of breathtaking scope a systems programmer has seen the",
    "start": "104460",
    "end": "111509"
  },
  {
    "text": "terrors of the world and understood the intrinsic horror of existence every",
    "start": "111509",
    "end": "116790"
  },
  {
    "text": "systems programmer I know who reads this is like yeah this is so true so let's go",
    "start": "116790",
    "end": "122009"
  },
  {
    "text": "on this journey together this is gonna be fun yeah so okay so let's talk about this I want you to get from this talk",
    "start": "122009",
    "end": "129479"
  },
  {
    "text": "and understanding about what the concept of serializability means in my why you might want to care about it in your",
    "start": "129479",
    "end": "135540"
  },
  {
    "text": "database so how many people here work a system that is backed by database okay",
    "start": "135540",
    "end": "142030"
  },
  {
    "text": "great and how many people have had trouble or have had their lives in some",
    "start": "142030",
    "end": "147880"
  },
  {
    "text": "way made worse by this database yeah okay so databases are complicated",
    "start": "147880",
    "end": "153360"
  },
  {
    "text": "databases are confusing and we need them to perform really well unfortunately for",
    "start": "153360",
    "end": "158770"
  },
  {
    "start": "156000",
    "end": "186000"
  },
  {
    "text": "our applications so here are three examples whatsapp sees a peek message rate of over a million messages per",
    "start": "158770",
    "end": "164860"
  },
  {
    "text": "second this is a little disturbing but it turns out Facebook is a fifth of all of the pageviews in the United States",
    "start": "164860",
    "end": "170470"
  },
  {
    "text": "and Twitter has to handle many millions of messages for mobile devices for analytics and you know maybe we aren't",
    "start": "170470",
    "end": "177310"
  },
  {
    "text": "all running whatsapp or a Facebook or a Twitter but you know we can dream we can hope to get there one day and data is",
    "start": "177310",
    "end": "183820"
  },
  {
    "text": "only increasing in size well that's pretty unfortunate because databases are",
    "start": "183820",
    "end": "188950"
  },
  {
    "start": "186000",
    "end": "234000"
  },
  {
    "text": "pretty difficult to scale so it's pretty easy to scale application servers you",
    "start": "188950",
    "end": "194350"
  },
  {
    "text": "have more traffic to your website you have more load more mobile apps and you just add more servers it works pretty",
    "start": "194350",
    "end": "201459"
  },
  {
    "text": "well you can handle more traffic databases don't work this way they're stateful inherently it's very",
    "start": "201459",
    "end": "207970"
  },
  {
    "text": "difficult to scale your database and so what people usually do to handle this problem is you buy a bigger database and",
    "start": "207970",
    "end": "215080"
  },
  {
    "text": "then a bigger one and then a bigger one and eventually you're spending a lot of money on some really huge instance with",
    "start": "215080",
    "end": "221890"
  },
  {
    "text": "a lot of cores that you're not even using all the time and you know someone's like you need to spend less",
    "start": "221890",
    "end": "227890"
  },
  {
    "text": "money on your database you got to fix this situation things are slow things are bad and so the direction that a lot",
    "start": "227890",
    "end": "233470"
  },
  {
    "text": "of people go in is they move towards distributed databases so smaller databases we partition our data amongst",
    "start": "233470",
    "end": "240820"
  },
  {
    "start": "234000",
    "end": "261000"
  },
  {
    "text": "them you know and we can think about things like elasticity and spinning up more databases to handle traffic and",
    "start": "240820",
    "end": "246790"
  },
  {
    "text": "things like that that rarely ever works in practice but it's a great idea and so",
    "start": "246790",
    "end": "252160"
  },
  {
    "text": "what we're doing is we're partitioning our data amongst the different servers and this is a distributed database so",
    "start": "252160",
    "end": "258579"
  },
  {
    "text": "here's an example of what that might look like you might have your widgets table and you're gonna take your widgets",
    "start": "258579",
    "end": "264640"
  },
  {
    "start": "261000",
    "end": "372000"
  },
  {
    "text": "table and you're gonna choose some partitioning key and that might be the widget ID or something like that and",
    "start": "264640",
    "end": "270520"
  },
  {
    "text": "you're gonna break your table up into and you're gonna put them on different servers okay so this is called a",
    "start": "270520",
    "end": "276530"
  },
  {
    "text": "horizontal partitioning and what we've got going here is we've got a range of widget IDs on each server so now",
    "start": "276530",
    "end": "283520"
  },
  {
    "text": "unfortunately our application servers have to get a lot more complicated they need to know about the range",
    "start": "283520",
    "end": "288980"
  },
  {
    "text": "partitioning they need to know how to figure out where data is and they have to probably talk to all the databases",
    "start": "288980",
    "end": "294740"
  },
  {
    "text": "too in order to put data back together and do different kinds of queries now when once we've moved to this model of a",
    "start": "294740",
    "end": "301670"
  },
  {
    "text": "distributed database we've lost a lot of features that we used to have in our one monolithic database we've lost secondary",
    "start": "301670",
    "end": "308960"
  },
  {
    "text": "indexes we've lost foreign key constraints we've lost query optimization because oftentimes in this situation you don't",
    "start": "308960",
    "end": "315410"
  },
  {
    "text": "really have queries anymore you're doing key value lookups you've also lost joins",
    "start": "315410",
    "end": "320420"
  },
  {
    "text": "and so all of that work has not just disappeared it's now being done by your",
    "start": "320420",
    "end": "326660"
  },
  {
    "text": "web application server and so there's two problems here the first problem is that now when we add another web",
    "start": "326660",
    "end": "333080"
  },
  {
    "text": "application server it has to talk to all the databases and we've got this problem where we're adding a lot of new contention it sorry connections and also",
    "start": "333080",
    "end": "341290"
  },
  {
    "text": "you know if you need to add another server you've got to figure out how to shuffle your data around and this is",
    "start": "341290",
    "end": "347990"
  },
  {
    "text": "really complex this is a pretty big challenge it's hard to do this without actually having downtime in your system",
    "start": "347990",
    "end": "354020"
  },
  {
    "text": "and you know god forbid you actually want to change which key you partition your data on that could be a nightmare",
    "start": "354020",
    "end": "360310"
  },
  {
    "text": "so this is kind of the setup this is where I was coming from this situation where distributed databases were be",
    "start": "360310",
    "end": "367760"
  },
  {
    "text": "starting to be used more often but they were kind of terrible and came with this huge set of problems so I was at Google",
    "start": "367760",
    "end": "374420"
  },
  {
    "start": "372000",
    "end": "423000"
  },
  {
    "text": "up until around 2007 and it was a really exciting time because Google was in the",
    "start": "374420",
    "end": "380270"
  },
  {
    "text": "middle of building all these really cool distributed systems and so I was super excited to be there I was very into it",
    "start": "380270",
    "end": "386200"
  },
  {
    "text": "Google built MapReduce which influenced a lot of the big data analytics that we're doing today they have the Google",
    "start": "386200",
    "end": "392750"
  },
  {
    "text": "file system which was a direct precursor to HDFS and you know they had BigTable",
    "start": "392750",
    "end": "398930"
  },
  {
    "text": "and it just seemed like this was the future BigTable is a very large distributed database that's a key value",
    "start": "398930",
    "end": "404300"
  },
  {
    "text": "store so I was I was very excited about this these ideas were being developed by",
    "start": "404300",
    "end": "409310"
  },
  {
    "text": "other companies simultaneously there was Cassandra MongoDB Amazon published a",
    "start": "409310",
    "end": "414529"
  },
  {
    "text": "paper in 2007 about their database dynamo which was very influential and",
    "start": "414529",
    "end": "419689"
  },
  {
    "text": "you know this was a really big thing this is very exciting distributed was a future so let's talk a little bit about",
    "start": "419689",
    "end": "425900"
  },
  {
    "start": "423000",
    "end": "516000"
  },
  {
    "text": "you know the pros and cons of that so I went to grad school and I decided I",
    "start": "425900",
    "end": "431300"
  },
  {
    "text": "wanted to work in this area I wanted to work on distributed systems because I thought they were really cool and they",
    "start": "431300",
    "end": "436340"
  },
  {
    "text": "were the future and they were really exciting ideas there and so here's the reason that I think these systems got a",
    "start": "436340",
    "end": "442430"
  },
  {
    "text": "lot of traction first of all they were in memory so there was no disk sitting there imposing latency on your query",
    "start": "442430",
    "end": "450199"
  },
  {
    "text": "requests they were highly scalable very highly scalable BigTable I know for sure",
    "start": "450199",
    "end": "455569"
  },
  {
    "text": "ran on tens of thousands of machines they were transparently fault-tolerant so when you're running with that many",
    "start": "455569",
    "end": "461479"
  },
  {
    "text": "machines failures are going to happen and you don't want to have to wake someone up every single time that does",
    "start": "461479",
    "end": "466520"
  },
  {
    "text": "happen and so these systems were great because they replicated for failure tolerance and they also provided geo",
    "start": "466520",
    "end": "472969"
  },
  {
    "text": "replication so these days we have users all over the world and we don't necessarily want to pay that 300 to 400",
    "start": "472969",
    "end": "480680"
  },
  {
    "text": "millisecond latency hit in order to go get our data from halfway around the world we want to keep data close to",
    "start": "480680",
    "end": "486469"
  },
  {
    "text": "users but we still need to keep that data in sync and so a lot of these systems provided these kinds of things",
    "start": "486469",
    "end": "492589"
  },
  {
    "text": "out of the box now here are the cons these systems had a lot of faults -",
    "start": "492589",
    "end": "497899"
  },
  {
    "text": "there was no schema so moving from a key from a database to a key value store you",
    "start": "497899",
    "end": "503839"
  },
  {
    "text": "completely lose any idea of a schema to describe your data they require and then that schema that organization that data",
    "start": "503839",
    "end": "510800"
  },
  {
    "text": "organization didn't just disappear now you kind of had to move it into your Kiro document design so if you're",
    "start": "510800",
    "end": "517250"
  },
  {
    "start": "516000",
    "end": "544000"
  },
  {
    "text": "setting up MongoDB you have to decide what goes here what's an index what am I doing with things like BigTable keys",
    "start": "517250",
    "end": "524600"
  },
  {
    "text": "were very special you needed to make sure that they were created in such a way that you could do range scans on",
    "start": "524600",
    "end": "529610"
  },
  {
    "text": "them these systems didn't have query languages and they at the time didn't support indexes",
    "start": "529610",
    "end": "535780"
  },
  {
    "text": "so I think some of them do now they didn't have any notion of transactions and they really didn't give you very",
    "start": "535780",
    "end": "542020"
  },
  {
    "text": "many consistency guarantees so it was",
    "start": "542020",
    "end": "547480"
  },
  {
    "text": "pretty challenging for someone to move from a database to one of these systems so let's say you've got your single",
    "start": "547480",
    "end": "554350"
  },
  {
    "text": "machine my sequel server a Postgres server and you've got your like schema that you very carefully crafted you've",
    "start": "554350",
    "end": "560710"
  },
  {
    "text": "got indexes and foreign key constraints you've done all this stuff you know you've you've ran queries you figured",
    "start": "560710",
    "end": "566380"
  },
  {
    "text": "out what you can and can't do and then you're basically just gonna throw all of that out the window when you move to a",
    "start": "566380",
    "end": "571780"
  },
  {
    "text": "distributed database which is which is kind of unfortunate there's also this",
    "start": "571780",
    "end": "577690"
  },
  {
    "start": "575000",
    "end": "599000"
  },
  {
    "text": "cartoon which I love by Jay recursive and is pretty old but it's still very classic and it's this guy asking how do",
    "start": "577690",
    "end": "584170"
  },
  {
    "text": "I query the database and the other guy tells him you have to write a distributed MapReduce function in Erlang like that that was the state that we",
    "start": "584170",
    "end": "590830"
  },
  {
    "text": "were living in at the time and we're still we're not too far from the state right now which is pretty unfortunate ok",
    "start": "590830",
    "end": "600190"
  },
  {
    "start": "599000",
    "end": "637000"
  },
  {
    "text": "so here's another thing we lose and that I'm going to talk about for the rest of the talk when we jump to a distributed",
    "start": "600190",
    "end": "606700"
  },
  {
    "text": "database we lose this thing called transactions and some of you might have been using transactions some of you",
    "start": "606700",
    "end": "613330"
  },
  {
    "text": "might not use them but you didn't even realize you were using them so in my",
    "start": "613330",
    "end": "618550"
  },
  {
    "text": "sequel I believe auto commit is set to true and so whatever you run on my sequel query a single one you are",
    "start": "618550",
    "end": "625000"
  },
  {
    "text": "running a transaction and so if you're running something like an update query that's gonna look at a lot of different",
    "start": "625000",
    "end": "630400"
  },
  {
    "text": "rows and potentially change a lot of different rows that's running with transactional semantics in my sequel and",
    "start": "630400",
    "end": "637110"
  },
  {
    "text": "it's not okay to just drop transactions out of the system and the reason for",
    "start": "637110",
    "end": "642130"
  },
  {
    "text": "that is because it's very difficult to reason about concurrent interleavings of",
    "start": "642130",
    "end": "647589"
  },
  {
    "text": "the stuff that we're running in our database we it might result in incorrect and possibly even unrecoverable State",
    "start": "647589",
    "end": "654339"
  },
  {
    "text": "and so let's talk about an example where that happened so let's say we had a",
    "start": "654339",
    "end": "659589"
  },
  {
    "text": "completely decentralized currency which committed transactions but not the kind I'm talking about financial transactions",
    "start": "659589",
    "end": "666070"
  },
  {
    "text": "to a log and there no way to undo things in the case of fraud so once you gave your bitcoins to",
    "start": "666070",
    "end": "672339"
  },
  {
    "text": "somebody and it committed to the to the log you were pretty much screwed it was done so this happened last year a",
    "start": "672339",
    "end": "680519"
  },
  {
    "start": "677000",
    "end": "746000"
  },
  {
    "text": "Bitcoin currency exchange actually lost a lot of money and here was the code about it the hacker discovered that",
    "start": "680519",
    "end": "687220"
  },
  {
    "text": "multiple simultaneous withdrawals are processed essentially at the same time and that the system software doesn't",
    "start": "687220",
    "end": "694089"
  },
  {
    "text": "check quickly enough for a negative balance so this was kind of like spun as a security problem I don't see this as a",
    "start": "694089",
    "end": "700779"
  },
  {
    "text": "security problem at all this is not a security problem this is a very classic problem that has to do with transactions",
    "start": "700779",
    "end": "706750"
  },
  {
    "text": "you want to be able to check the balance and do the decrement together at the",
    "start": "706750",
    "end": "712089"
  },
  {
    "text": "same time you when you don't do something like that you can have a whole bunch of people checking the balance at",
    "start": "712089",
    "end": "717940"
  },
  {
    "text": "the same time seeing everything's okay and then doing a bunch of decrements all at the same time which makes you go",
    "start": "717940",
    "end": "723399"
  },
  {
    "text": "negative so this is a this exchange didn't lose too much money but it's a",
    "start": "723399",
    "end": "729339"
  },
  {
    "text": "little bit worrisome that there are people out there building software that is addressing something as important as",
    "start": "729339",
    "end": "735310"
  },
  {
    "text": "financial data and our money and it's in or in total in a system where it's really seriously not possible to go back",
    "start": "735310",
    "end": "742060"
  },
  {
    "text": "and fix it and they're not really thinking about these concepts so that's",
    "start": "742060",
    "end": "747820"
  },
  {
    "start": "746000",
    "end": "811000"
  },
  {
    "text": "the point of consistency consistency guarantees helped us reason about our code and avoid subtle bugs and that's",
    "start": "747820",
    "end": "754690"
  },
  {
    "text": "why I think this area is so important and interesting so consensus consistency",
    "start": "754690",
    "end": "760300"
  },
  {
    "text": "is a very misused word in systems and I think the reason for that is because there were these two different fields",
    "start": "760300",
    "end": "765610"
  },
  {
    "text": "there was the database people and there were the distributed systems people and they kind of sort of ran in their own",
    "start": "765610",
    "end": "771279"
  },
  {
    "text": "circles then they did different sorts of things and then you know these fields have been moving closer and closer and",
    "start": "771279",
    "end": "776290"
  },
  {
    "text": "closer together and they're pretty much overlapping right now but it's still people coming from very different backgrounds and so the word consistency",
    "start": "776290",
    "end": "783430"
  },
  {
    "text": "means different things there's consistency as an acid how many of you",
    "start": "783430",
    "end": "788589"
  },
  {
    "text": "guys have heard this acronym before all right a few of you okay good there C as in cap as in the cap theorem there C as",
    "start": "788589",
    "end": "795850"
  },
  {
    "text": "in sequential causal eventual or even strict consistent there are many different consistency",
    "start": "795850",
    "end": "802399"
  },
  {
    "text": "models and now the thing is all three of these words consistency are talking",
    "start": "802399",
    "end": "807620"
  },
  {
    "text": "about different things which is kind of unfortunate so let's start with acid",
    "start": "807620",
    "end": "812779"
  },
  {
    "start": "811000",
    "end": "902000"
  },
  {
    "text": "transactions since that is what this talk is mostly going to be about so this is what acid stands for it stands for",
    "start": "812779",
    "end": "819649"
  },
  {
    "text": "atomic consistent isolated and durable and again if you are running a my sequel",
    "start": "819649",
    "end": "824839"
  },
  {
    "text": "or Postgres database then you can run acid transactions and you can get serialize ability and this is what you",
    "start": "824839",
    "end": "830839"
  },
  {
    "text": "would type into a terminal in order to do that so atomic means that the whole",
    "start": "830839",
    "end": "837230"
  },
  {
    "text": "thing happens or not so a transaction is a piece of code multiple statements",
    "start": "837230",
    "end": "842360"
  },
  {
    "text": "multiple reads and writes and a topic atomic means you're either gonna see the effect of all of those or none of those",
    "start": "842360",
    "end": "848620"
  },
  {
    "text": "consistent in this context specifically for acid transactions is an application",
    "start": "848620",
    "end": "855529"
  },
  {
    "text": "defined form of correctness so going back to our Bitcoin example are a bank example consistent here would mean my",
    "start": "855529",
    "end": "863389"
  },
  {
    "text": "idea that balances should never go negative isolated is the idea that other",
    "start": "863389",
    "end": "868819"
  },
  {
    "text": "transactions so they might be executing at the same time don't actually interfere with each other and durable",
    "start": "868819",
    "end": "874970"
  },
  {
    "text": "means that you can recover from a crash so what this means is that if the database tells you that your transaction",
    "start": "874970",
    "end": "880579"
  },
  {
    "text": "has committed even if it fails as soon as you get it back up again you're gonna see the database at that point you're",
    "start": "880579",
    "end": "886130"
  },
  {
    "text": "gonna see the database at a consistent point and that's going to include your committed transaction so I'm gonna most",
    "start": "886130",
    "end": "893449"
  },
  {
    "text": "of this talk is going to actually focus on the first three because I think the first three are what are what have to do",
    "start": "893449",
    "end": "898970"
  },
  {
    "text": "with our other definitions of consistency okay so serializability",
    "start": "898970",
    "end": "904519"
  },
  {
    "start": "902000",
    "end": "922000"
  },
  {
    "text": "serializability is a form of consistency it's a property of a schedule of",
    "start": "904519",
    "end": "909740"
  },
  {
    "text": "transactions and one thing that I want to stress very heavily is that serializability does not mean serial it",
    "start": "909740",
    "end": "915380"
  },
  {
    "text": "does not mean that you're doing one thing at a time it means that the effects of what you do are like you did",
    "start": "915380",
    "end": "921319"
  },
  {
    "text": "one thing at a time so here's a slightly more formal definition the result of executing a set",
    "start": "921319",
    "end": "928009"
  },
  {
    "start": "922000",
    "end": "977000"
  },
  {
    "text": "of transactions is the same as if those transactions had one at a time in some serial order",
    "start": "928009",
    "end": "934460"
  },
  {
    "text": "that's all that serialize ability is is that the return values from the transactions and what's written to the",
    "start": "934460",
    "end": "941150"
  },
  {
    "text": "database and what you give back to the user it looks like you ran them one at a time which kind of makes sense and so in",
    "start": "941150",
    "end": "947420"
  },
  {
    "text": "our model in our acid model if we write each transaction to preserve correctness",
    "start": "947420",
    "end": "953120"
  },
  {
    "text": "in our database that means when we start the transaction things are an incorrect statement at the end things are in a",
    "start": "953120",
    "end": "958280"
  },
  {
    "text": "correct State then that means that at the end of running these transactions concurrently our database is also going",
    "start": "958280",
    "end": "964520"
  },
  {
    "text": "to be in a correct State and that means that we get to pretend like concurrency isn't actually happening we're getting",
    "start": "964520",
    "end": "971420"
  },
  {
    "text": "the performance gains of it hopefully without actually having to worry about it when we're writing our code so here's",
    "start": "971420",
    "end": "978530"
  },
  {
    "start": "977000",
    "end": "1044000"
  },
  {
    "text": "an example of what that really means here I have two transactions the first one is reading two keys ok K&J and just",
    "start": "978530",
    "end": "985730"
  },
  {
    "text": "ignore the syntax for a moment I know it's a little weird but you know reads and writes and this one transaction two",
    "start": "985730",
    "end": "991520"
  },
  {
    "text": "is adding one to the values for K and J and so what we want to happen here is",
    "start": "991520",
    "end": "996980"
  },
  {
    "text": "that in a serializable execution we want it we want to see the values of K and J atomically we want to see both of them",
    "start": "996980",
    "end": "1002950"
  },
  {
    "text": "at one instance in time and we want to make sure that we do the ads correctly and also atomically so let's say we",
    "start": "1002950",
    "end": "1009280"
  },
  {
    "text": "start out with k equals zero and J equals zero what are valid values to get back after we've thrown these two",
    "start": "1009280",
    "end": "1015010"
  },
  {
    "text": "transactions at the database anybody",
    "start": "1015010",
    "end": "1022060"
  },
  {
    "text": "right K and J equal to one another one is K and J equal to zero so one thing",
    "start": "1022060",
    "end": "1027589"
  },
  {
    "text": "that could happen is that transaction one looks like it ran first and then transaction two and we get that means",
    "start": "1027589",
    "end": "1034100"
  },
  {
    "text": "you get zero zero back and another one is the transaction two ran first and transit then transaction one you get one",
    "start": "1034100",
    "end": "1039170"
  },
  {
    "text": "one back you should never get a 0 and a 1 back that's what's here lies ability means now the benefits of this are that",
    "start": "1039170",
    "end": "1046130"
  },
  {
    "start": "1044000",
    "end": "1072000"
  },
  {
    "text": "we don't have to reason about interleavings and we don't have to Express invariance anywhere but the code",
    "start": "1046130",
    "end": "1052610"
  },
  {
    "text": "if we can write our transactions correctly then the database will promise to execute them for us in a way that",
    "start": "1052610",
    "end": "1058130"
  },
  {
    "text": "looks like one at a time and I don't know about you but I do not want a reason about n factorial lines of",
    "start": "1058130",
    "end": "1064070"
  },
  {
    "text": "concurrent interleavings of transactions that can get very complicated and it can be very difficult to understand what can",
    "start": "1064070",
    "end": "1070100"
  },
  {
    "text": "go wrong unfortunately serialize it a",
    "start": "1070100",
    "end": "1081440"
  },
  {
    "text": "Tom atom city is part of C realisability I would say yeah it looks like the transactions were atomic that they",
    "start": "1081440",
    "end": "1087320"
  },
  {
    "text": "happened at one instance in time in order so serialize ability unfortunately",
    "start": "1087320",
    "end": "1094130"
  },
  {
    "text": "is kind of expensive it'll it really does have serious costs to use this as",
    "start": "1094130",
    "end": "1099650"
  },
  {
    "text": "your isolation model on a multi-core database this cost comes from serialization and cache line transfers",
    "start": "1099650",
    "end": "1105500"
  },
  {
    "text": "between the different processors on a distributed database it's also the serialization or concurrency control and",
    "start": "1105500",
    "end": "1111200"
  },
  {
    "text": "network calls and so in order to enforce this property in our database we have to",
    "start": "1111200",
    "end": "1117140"
  },
  {
    "text": "use concurrency control which usually involves either locking or validation and essentially some form of",
    "start": "1117140",
    "end": "1124040"
  },
  {
    "text": "coordination so in order to get around this people often jump straight to",
    "start": "1124040",
    "end": "1129230"
  },
  {
    "start": "1126000",
    "end": "1238000"
  },
  {
    "text": "eventual consistency which is what a lot of key value stores claim to provide",
    "start": "1129230",
    "end": "1134919"
  },
  {
    "text": "when they don't provide any I haven't seen a key value store yet that really provides something much stronger than",
    "start": "1134919",
    "end": "1141140"
  },
  {
    "text": "this so what eventual consistency says is that if no new updates are made to",
    "start": "1141140",
    "end": "1146600"
  },
  {
    "text": "the object eventually all accesses will return the last updated value so this",
    "start": "1146600",
    "end": "1151940"
  },
  {
    "text": "concept was at least popularized by Werner Vogel's from Amazon he has a great blog",
    "start": "1151940",
    "end": "1157650"
  },
  {
    "text": "and I don't know exactly actually defined it or not but it was definitely one of the first times that I've seen it",
    "start": "1157650",
    "end": "1163440"
  },
  {
    "text": "and this was how he defined it now I'm gonna make a little bit of an edit here because I'm sure you guys have all heard",
    "start": "1163440",
    "end": "1169980"
  },
  {
    "text": "that in a distributed system there's not really a very good consistent notion of time so what is the last updated value",
    "start": "1169980",
    "end": "1176640"
  },
  {
    "text": "mean your last my last some other servers last the clients last who knows right so we don't really know what last",
    "start": "1176640",
    "end": "1184050"
  },
  {
    "text": "means in this context and so it's not really the case that it's getting updated to the last value we're eventual consistency just says",
    "start": "1184050",
    "end": "1190920"
  },
  {
    "text": "we're gonna get the same value and also that key part up there if no new updates",
    "start": "1190920",
    "end": "1196470"
  },
  {
    "text": "are made to the object so when does that actually happen in a system I'm wondering who runs these systems where",
    "start": "1196470",
    "end": "1202380"
  },
  {
    "text": "you actually stop writing for some period of time and you can give your some undetermined period of time by the",
    "start": "1202380",
    "end": "1208440"
  },
  {
    "text": "way this period of time isn't isn't bounded and you can let your your servers kind of coalesce into the same",
    "start": "1208440",
    "end": "1214440"
  },
  {
    "text": "state this doesn't actually happen when you're running a product and this does",
    "start": "1214440",
    "end": "1220080"
  },
  {
    "text": "nothing about multi key transactions so despite the fact that you're getting you",
    "start": "1220080",
    "end": "1225990"
  },
  {
    "text": "know things are converging to the same value you're not going to be able to do the bank balance thing that I talked about this property definitely does not",
    "start": "1225990",
    "end": "1232230"
  },
  {
    "text": "give you that so a slightly stronger form of consistent well a much stronger",
    "start": "1232230",
    "end": "1238200"
  },
  {
    "start": "1238000",
    "end": "1299000"
  },
  {
    "text": "form of consistency is sequential consistency and the best way I found to",
    "start": "1238200",
    "end": "1243450"
  },
  {
    "text": "think about this is it's what your laptop is doing right now so you've got multiple processors and each of those",
    "start": "1243450",
    "end": "1250170"
  },
  {
    "text": "processors has a cache and what's happening is that your processors the hardware is keeping your cache",
    "start": "1250170",
    "end": "1256970"
  },
  {
    "text": "sequentially consistent and I'm using that term a bit loosely because technically it's not even sequential",
    "start": "1256970",
    "end": "1263340"
  },
  {
    "text": "consistency but unless you're building sort of locking protocols or things like that we're not going to worry about it",
    "start": "1263340",
    "end": "1269580"
  },
  {
    "text": "it's close enough to sequential consistency and so what's happening here is that your processor is tracking what",
    "start": "1269580",
    "end": "1276240"
  },
  {
    "text": "cache lines it's reading and writing and it's making sure that those stay in sync",
    "start": "1276240",
    "end": "1281430"
  },
  {
    "text": "across all of the caches so the what sequential consistency means is that",
    "start": "1281430",
    "end": "1287300"
  },
  {
    "text": "when you're doing a series reads and writes they happen in some order the reads and writes correspond to",
    "start": "1287300",
    "end": "1294090"
  },
  {
    "text": "happening in an order and usually they give you the feature as well that if",
    "start": "1294090",
    "end": "1299250"
  },
  {
    "start": "1299000",
    "end": "1380000"
  },
  {
    "text": "you're on a processor they look like they're happening in the order the processor executed them in so let's",
    "start": "1299250",
    "end": "1305190"
  },
  {
    "text": "start with this example right here so here are three processors and they're doing a series of reads and writes to",
    "start": "1305190",
    "end": "1310710"
  },
  {
    "text": "the same variable so the first ones writing a then the second one is writing be a writing B to X and then the third",
    "start": "1310710",
    "end": "1318180"
  },
  {
    "text": "one is reading a and then reading B does this look legal to you guys does this look correct",
    "start": "1318180",
    "end": "1324860"
  },
  {
    "text": "yeah okay well yeah maybe that's maybe it was obvious but and the reason for",
    "start": "1324860",
    "end": "1330240"
  },
  {
    "text": "that is because the president we're allowed to reorder reads and writes between the different processors and so",
    "start": "1330240",
    "end": "1336810"
  },
  {
    "text": "this is a correct interleaving of this where a we can just kind of shove that right on processor to down and pretend",
    "start": "1336810",
    "end": "1343080"
  },
  {
    "text": "like it happened after the read now how about this one we're writing a then",
    "start": "1343080",
    "end": "1348330"
  },
  {
    "text": "we're writing B then we're reading B and we're reading a nope this is correct so",
    "start": "1348330",
    "end": "1356520"
  },
  {
    "text": "the reason that this is correct is we can shove that right even further down and we can create something that looks",
    "start": "1356520",
    "end": "1362760"
  },
  {
    "text": "like this so sequential consistency even though it's one of the strongest forms",
    "start": "1362760",
    "end": "1368820"
  },
  {
    "text": "of consistency is still really confusing I still get really confused by what's",
    "start": "1368820",
    "end": "1374370"
  },
  {
    "text": "allowable and what's not under this model so there's an even stronger form",
    "start": "1374370",
    "end": "1379920"
  },
  {
    "text": "of consistency out there called external consistency and I think this is occasionally referred to as linearise",
    "start": "1379920",
    "end": "1385800"
  },
  {
    "start": "1380000",
    "end": "1454000"
  },
  {
    "text": "ability and the idea here is that it's what sequential consistency promises you",
    "start": "1385800",
    "end": "1391050"
  },
  {
    "text": "you're going to see the reads and writes in some order that makes sense but the results are actually gonna match time so",
    "start": "1391050",
    "end": "1398010"
  },
  {
    "text": "to me this is the only thing that actually makes sense in the world this is the only way that I can actually like reason about what's going on and one way",
    "start": "1398010",
    "end": "1404520"
  },
  {
    "text": "to think about it is as though there's a little a little detective a little external observer sitting there looking",
    "start": "1404520",
    "end": "1410730"
  },
  {
    "text": "at reads and writes and watching what's happening so if we're looking in our previous example where we had the right",
    "start": "1410730",
    "end": "1417510"
  },
  {
    "text": "to a and the right to B if those really happens at different points in time then an observer",
    "start": "1417510",
    "end": "1422970"
  },
  {
    "text": "could have come in and seen that the right to be happened after the right to a and so then if processor three read",
    "start": "1422970",
    "end": "1430049"
  },
  {
    "text": "them in this order the observer would know that this was incorrect it would know that since there weren't any other",
    "start": "1430049",
    "end": "1435539"
  },
  {
    "text": "rights to X that um that this was an incorrect interleaving so this is the",
    "start": "1435539",
    "end": "1442440"
  },
  {
    "text": "strongest form of consistency everything's matching this sort of one copy things happen one at a time",
    "start": "1442440",
    "end": "1447960"
  },
  {
    "text": "according to time according to when someone actually issues a read or write",
    "start": "1447960",
    "end": "1453860"
  },
  {
    "text": "so this is the type of consistency that is being talked about when you hear the words the cap theorem so this stands for",
    "start": "1453860",
    "end": "1461549"
  },
  {
    "start": "1454000",
    "end": "1593000"
  },
  {
    "text": "consistency availability and partition tolerance it was first proposed by Eric Brewer from Berkeley in 2000 at a talk",
    "start": "1461549",
    "end": "1468390"
  },
  {
    "text": "in pod C which is a distributed distributed systems conference and it",
    "start": "1468390",
    "end": "1474179"
  },
  {
    "text": "turned out that it's a rephrasing of a much older result FLP result and so this was done in 1985 by Nancy Lynch at MIT",
    "start": "1474179",
    "end": "1483690"
  },
  {
    "text": "and some other people and okay so what Eric Brewer was saying is that I mean a",
    "start": "1483690",
    "end": "1490919"
  },
  {
    "text": "sensibly what he said and what's quoted is out of these three you get to choose two but what he was really saying is",
    "start": "1490919",
    "end": "1496919"
  },
  {
    "text": "that partition tolerance is a failure model sometimes your servers won't be able to talk to each other and sometimes",
    "start": "1496919",
    "end": "1503400"
  },
  {
    "text": "you're not going to be able to know how long they're not going to be able to talk to each other and because you don't",
    "start": "1503400",
    "end": "1508770"
  },
  {
    "text": "know about you're gonna process reads",
    "start": "1508770",
    "end": "1514350"
  },
  {
    "text": "and writes potentially incorrectly violating consistency or not and so that's the choice that I think that he's",
    "start": "1514350",
    "end": "1520350"
  },
  {
    "text": "really talking about now one thing that's important to note the FLP result is actually very cool if you want to go",
    "start": "1520350",
    "end": "1526289"
  },
  {
    "text": "read this paper there's this this very cool construction in it where they prove",
    "start": "1526289",
    "end": "1531630"
  },
  {
    "text": "that it's impossible to reach consensus with a group of servers even if there's one faulty process and the reason for",
    "start": "1531630",
    "end": "1538650"
  },
  {
    "text": "this is because this faulty process can just always do the wrong thing at the right time so no matter how close you",
    "start": "1538650",
    "end": "1545669"
  },
  {
    "text": "get to deciding amongst all of your servers this one faulty process can step in right before you're about to decide",
    "start": "1545669",
    "end": "1551850"
  },
  {
    "text": "and screw everything up now it's important to note that both of the ideas were based on a certain model of",
    "start": "1551850",
    "end": "1560000"
  },
  {
    "text": "both the network and failure so this was based on the asynchronous model of the",
    "start": "1560000",
    "end": "1565520"
  },
  {
    "text": "network and like I said there's this idea here that you might drop network packets you might have errors a server",
    "start": "1565520",
    "end": "1572539"
  },
  {
    "text": "might start doing garbage collection and pause but you can't tell the difference between delay and failure so this is the",
    "start": "1572539",
    "end": "1580010"
  },
  {
    "text": "idea of an unbounded amount of time right so it might be you you can't",
    "start": "1580010",
    "end": "1585289"
  },
  {
    "text": "decide that a server has died because it might be possible that it was just it was just delayed for a little bit more",
    "start": "1585289",
    "end": "1591500"
  },
  {
    "text": "than that amount of time so what does this mean what are these results mean and what",
    "start": "1591500",
    "end": "1597440"
  },
  {
    "start": "1593000",
    "end": "1674000"
  },
  {
    "text": "what do they mean for distributed systems does it mean that we have to give up hope that I should forgo any of",
    "start": "1597440",
    "end": "1605899"
  },
  {
    "text": "the rest of my PhD and rip up my thesis and throw it away because we're never gonna be able to do anything because it's impossible to side stuff on the",
    "start": "1605899",
    "end": "1611840"
  },
  {
    "text": "Internet well here's an analogy that I really like have you guys played candy crush a little bit okay I haven't played",
    "start": "1611840",
    "end": "1619220"
  },
  {
    "text": "it though I played other Thailand games and this is a category category games called match three games and it's been",
    "start": "1619220",
    "end": "1626960"
  },
  {
    "text": "shown that this category of games is np-hard so what does that mean that means that",
    "start": "1626960",
    "end": "1632419"
  },
  {
    "text": "there exists no polynomial time algorithm to solve all instances of this game now NP and there's this famous",
    "start": "1632419",
    "end": "1640460"
  },
  {
    "text": "question of P equals NP and we rely on the fact that certain things are are np-hard be Kaleo love our cryptography",
    "start": "1640460",
    "end": "1647779"
  },
  {
    "text": "in order to function in the world now does this mean that we can't play candy",
    "start": "1647779",
    "end": "1653570"
  },
  {
    "text": "crush saga no right I like it doesn't matter that it might take you more than",
    "start": "1653570",
    "end": "1658880"
  },
  {
    "text": "the number of atoms in the universe to figure out the answer to a very large game of candy crush saga I can still",
    "start": "1658880",
    "end": "1665120"
  },
  {
    "text": "play candy crush saga on my phone and I can still like occasionally beat the game and I bet there's someone out there who always beats the game and you know",
    "start": "1665120",
    "end": "1671360"
  },
  {
    "text": "is really good at this and so I I really like this analogy because it means that it helps you",
    "start": "1671360",
    "end": "1678919"
  },
  {
    "start": "1674000",
    "end": "1725000"
  },
  {
    "text": "understand what this theorem is really saying and what it's saying is that it's saying it's impossible to 100% of the",
    "start": "1678919",
    "end": "1687049"
  },
  {
    "text": "time decide everything on the internet if we can't rely on synchronous messaging we",
    "start": "1687049",
    "end": "1694250"
  },
  {
    "text": "can 100% of the time decide everything if partitions heal if we know the upper bound on message delays our system might",
    "start": "1694250",
    "end": "1700820"
  },
  {
    "text": "be really slow it might not be the most ideal system we build but if we remove this one part of the model then we can",
    "start": "1700820",
    "end": "1707990"
  },
  {
    "text": "and also just because you can't get to 100% all the time doesn't mean you can't",
    "start": "1707990",
    "end": "1713690"
  },
  {
    "text": "function at 99.99% a lot of the time this is an impossibility result this",
    "start": "1713690",
    "end": "1719360"
  },
  {
    "text": "means it's impossible to do something all the time we can still play candy crush we can still occasionally beat the game",
    "start": "1719360",
    "end": "1725150"
  },
  {
    "start": "1725000",
    "end": "1758000"
  },
  {
    "text": "and so that's why in my research I haven't really focused so much on the",
    "start": "1725150",
    "end": "1730190"
  },
  {
    "text": "cap theorem instead what I really care about is consistency versus performance so in the day-to-day operating of your",
    "start": "1730190",
    "end": "1737690"
  },
  {
    "text": "system how expensive is it to maintain good semantics this is a question that I",
    "start": "1737690",
    "end": "1743300"
  },
  {
    "text": "really care about answering and what I want to know is how we can reduce these costs while still producing a correct",
    "start": "1743300",
    "end": "1749870"
  },
  {
    "text": "ordering of reads and writes and can we do this while still handling failures and eventually making progress in the",
    "start": "1749870",
    "end": "1756380"
  },
  {
    "text": "case of failures so there's been a lot of research about improving the",
    "start": "1756380",
    "end": "1762620"
  },
  {
    "start": "1758000",
    "end": "1891000"
  },
  {
    "text": "performance of these stronger forms of consistency like serializability so here",
    "start": "1762620",
    "end": "1768980"
  },
  {
    "text": "are four different types of research for techniques that I found really interesting so one of them is to base it",
    "start": "1768980",
    "end": "1776630"
  },
  {
    "text": "basically get around the fact that you don't know what time it is by trying to force everybody to be very very close in",
    "start": "1776630",
    "end": "1782840"
  },
  {
    "text": "time so spanner a system by Google is a giant distributed database and they put",
    "start": "1782840",
    "end": "1787910"
  },
  {
    "text": "atomic clocks in all of their data centers so that they're able to bound the skew they're able to determine",
    "start": "1787910",
    "end": "1793880"
  },
  {
    "text": "exactly how far it's possible for two clocks to be off and then they rely on this fact so that they don't have to do",
    "start": "1793880",
    "end": "1800780"
  },
  {
    "text": "as much coordination and communication in order to do some of their transactions",
    "start": "1800780",
    "end": "1806679"
  },
  {
    "text": "unfortunately spanner is still really slow yeah so there's been a lot of other techniques developed that are pretty",
    "start": "1806679",
    "end": "1812390"
  },
  {
    "text": "cool there's the theory of transaction chopping and the idea here is that if you know you're only going to be doing a",
    "start": "1812390",
    "end": "1818870"
  },
  {
    "text": "certain set of transactions if your application is doing something and you know what it's gonna be doing it's",
    "start": "1818870",
    "end": "1824280"
  },
  {
    "text": "always gonna be issuing the same kinds of queries you can analyze that set of queries and you can figure out if you",
    "start": "1824280",
    "end": "1829860"
  },
  {
    "text": "can divide those set of queries up so that serialize ability is less expensive and here are two pieces of research from",
    "start": "1829860",
    "end": "1836820"
  },
  {
    "text": "NYU where they've leveraged this technique to get better performance in a geo replicated system so they're able to",
    "start": "1836820",
    "end": "1843240"
  },
  {
    "text": "do transactions across a geo replicated system then there's this idea of",
    "start": "1843240",
    "end": "1848310"
  },
  {
    "text": "commutative locking so I'm pretty I'm pretty excited about community and this is something that I used very heavily in my own research and this has been used",
    "start": "1848310",
    "end": "1854760"
  },
  {
    "text": "in different forms there's this idea of commutative locking and escrow transactions this is from the database",
    "start": "1854760",
    "end": "1860340"
  },
  {
    "text": "community it's a very old idea abstract data types and Doppel is a system that I",
    "start": "1860340",
    "end": "1865950"
  },
  {
    "text": "wrote that takes advantage of commutative commutativity to do things per core without communication and then",
    "start": "1865950",
    "end": "1872130"
  },
  {
    "text": "finally there are some systems that use deterministic ordering basically if you have a distributed database and you know",
    "start": "1872130",
    "end": "1879000"
  },
  {
    "text": "that people have to commit transactions in a certain order and they all need to commit them in the same order you can just decide on that order ahead",
    "start": "1879000",
    "end": "1885720"
  },
  {
    "text": "of time and this can help you get better performance in some cases now our goal",
    "start": "1885720",
    "end": "1892560"
  },
  {
    "text": "here my goal at least is to get parallel performance when we're executing",
    "start": "1892560",
    "end": "1898410"
  },
  {
    "text": "transactions on a multi-core or a distributed database and I think that",
    "start": "1898410",
    "end": "1904410"
  },
  {
    "text": "these are some of the ideas that we're going to use in the future to be able to do that I think that it's important to think",
    "start": "1904410",
    "end": "1909990"
  },
  {
    "text": "about different concurrency control schemes for popular and contended data so something that's important to note",
    "start": "1909990",
    "end": "1915300"
  },
  {
    "text": "here is that if your transactions are all on different data they're not going to contend and serializability is not",
    "start": "1915300",
    "end": "1921900"
  },
  {
    "text": "actually going to be that expensive so it's really going to be a problem when your transactions are accessing the same",
    "start": "1921900",
    "end": "1927930"
  },
  {
    "text": "hot popular data and if that's really the case are there special things that we can do for this data to make our",
    "start": "1927930",
    "end": "1934350"
  },
  {
    "text": "transactions go faster I think commutative locking and abstract data types are really important and I",
    "start": "1934350",
    "end": "1941250"
  },
  {
    "text": "think interfaces that reveal data types to the programmer are much better than",
    "start": "1941250",
    "end": "1948000"
  },
  {
    "text": "readwrite interfaces so here's an example so whenever we talk about transaction execution we talk about",
    "start": "1948000",
    "end": "1954210"
  },
  {
    "start": "1949000",
    "end": "1998000"
  },
  {
    "text": "reads and writes get puts and that's what all of the cereal box utilizability models deal with however oftentimes when we are doing",
    "start": "1954210",
    "end": "1961890"
  },
  {
    "text": "things to our data we're actually following a data type specification where it's a counter and",
    "start": "1961890",
    "end": "1967230"
  },
  {
    "text": "we're incrementing it or decrementing it or we're taking the max of something or it's an index and we're inserting into",
    "start": "1967230",
    "end": "1973320"
  },
  {
    "text": "it with some sort of order and if we know the semantics of the type of objects that we are manipulating then we",
    "start": "1973320",
    "end": "1979710"
  },
  {
    "text": "can like some of them are actually commutative so we can take advantage of as some of the techniques I just told you about to get faster transactions and",
    "start": "1979710",
    "end": "1987540"
  },
  {
    "text": "we can also do all sorts of other different kinds of things with them and so that's some of what I've been exploring in my research is how we can",
    "start": "1987540",
    "end": "1993900"
  },
  {
    "text": "use these ideas to get faster transactions so I'm gonna leave me with",
    "start": "1993900",
    "end": "1999270"
  },
  {
    "start": "1998000",
    "end": "2036000"
  },
  {
    "text": "a with well I'm gonna I'm gonna give you this quote this was in the past banner paper so I think it's really interesting",
    "start": "1999270",
    "end": "2005630"
  },
  {
    "text": "that Google kind of was one of the one of the first systems in the no sequel movement with BigTable they got rid of",
    "start": "2005630",
    "end": "2011780"
  },
  {
    "text": "all of the relational and query parts of a database and then they came full circle and they built spanner which is",
    "start": "2011780",
    "end": "2018020"
  },
  {
    "text": "an f-1 which is basically a giant distributed relational database and",
    "start": "2018020",
    "end": "2023030"
  },
  {
    "text": "here's a quote from spanner we believe it is better to have application programmers deal with performance",
    "start": "2023030",
    "end": "2028220"
  },
  {
    "text": "problems due to overuse of transactions as bottlenecks arise rather than always",
    "start": "2028220",
    "end": "2033320"
  },
  {
    "text": "coding around the lack of transactions and so that's what I want to leave you",
    "start": "2033320",
    "end": "2038450"
  },
  {
    "start": "2036000",
    "end": "2078000"
  },
  {
    "text": "guys with that those are the takeaways here use databases that are well tested",
    "start": "2038450",
    "end": "2043670"
  },
  {
    "text": "don't try to use the latest hotness on your the most important part of your system and your product use serializable",
    "start": "2043670",
    "end": "2051230"
  },
  {
    "text": "until it becomes a performance problem so don't optimize too early and when you",
    "start": "2051230",
    "end": "2056990"
  },
  {
    "text": "get to a point where you have to make a decision where you have to think about giving up some of your good semantics",
    "start": "2056990",
    "end": "2062600"
  },
  {
    "text": "for performance think about exactly what it is that you're giving up and what's changing when you move to a system with",
    "start": "2062600",
    "end": "2068480"
  },
  {
    "text": "different models alright so that's pretty much it thank you very much and",
    "start": "2068480",
    "end": "2073850"
  },
  {
    "text": "I'm happy to take questions",
    "start": "2073850",
    "end": "2076510"
  }
]