[
  {
    "text": "[Music] hello and it's really nice to be back in",
    "start": "6990",
    "end": "13740"
  },
  {
    "text": "Amsterdam the first time I was here I'd go to Amsterdam was about my third ever presentation so I was insanely nervous",
    "start": "13740",
    "end": "20310"
  },
  {
    "text": "and now I'm not insanely nervous but I probably should be friendly hello I'm sure sure I work for JetBrains",
    "start": "20310",
    "end": "27269"
  },
  {
    "text": "I am the advocate for intelligent idea and up source and what that kind of",
    "start": "27269",
    "end": "32279"
  },
  {
    "text": "means is that I have set up to date with what's happening in the Java world and particularly obviously the big news at the moment is Java 9 so my job today is",
    "start": "32279",
    "end": "40469"
  },
  {
    "text": "to try and look at how the Java 9 features will impact odds as Java developers and which ones we might",
    "start": "40469",
    "end": "45840"
  },
  {
    "text": "actually use in real life so we're going to go over jigsaw in action so I really",
    "start": "45840",
    "end": "52710"
  },
  {
    "text": "I didn't want to talk about jigsaw because everyone is going to connect jigsaw all year this year for Java 9 and",
    "start": "52710",
    "end": "58020"
  },
  {
    "text": "it's like the big ticket item and don't tell anyone but I don't think it's very exciting so I really didn't want to talk",
    "start": "58020",
    "end": "64378"
  },
  {
    "text": "about jigsaw but I did them I did try it out so I do want to talk about the pain of using modularity in Java and who",
    "start": "64379",
    "end": "72240"
  },
  {
    "text": "knows about jigsaw so far anyone a bunch of you that's good I'm just checking you our Java programmers ish right good",
    "start": "72240",
    "end": "79049"
  },
  {
    "text": "excellent I'm hope using Java 8 oh my god that's like all of you this is really good",
    "start": "79049",
    "end": "85470"
  },
  {
    "text": "you're exactly the right audience for this talk so I will talk about jigsaw even though I really didn't want to so",
    "start": "85470",
    "end": "90720"
  },
  {
    "text": "we will go over that and the original goal of this presentation was to talk about reactive programming in Java 9 the",
    "start": "90720",
    "end": "96960"
  },
  {
    "text": "reason being that the reactor streams API is embedded in a language in Java 9 so I want to see this big reactive",
    "start": "96960",
    "end": "102180"
  },
  {
    "text": "programming thing but it turns out there's so many features in Java 9 there's just not a lot of time for all of that so we'll skim over what that",
    "start": "102180",
    "end": "107880"
  },
  {
    "text": "looks like but we won't go into it in a lot of detail and then we'll talk about all of the other stuff in Java 9 now not",
    "start": "107880",
    "end": "114689"
  },
  {
    "text": "all of it just the bits that are interesting so if you do decide to migrate to Java 9 don't do that just yet",
    "start": "114689",
    "end": "121259"
  },
  {
    "text": "but if you do want to then you're going to need some arguments as to why why use Java 9 now the Oracle guys in particular",
    "start": "121259",
    "end": "127350"
  },
  {
    "text": "have been working very hard as usual on the latest version of Java so it's not just",
    "start": "127350",
    "end": "132560"
  },
  {
    "text": "adding modularity there's loads of like free stuff like better performance better use of the CPU better",
    "start": "132560",
    "end": "138560"
  },
  {
    "text": "documentation better graphics blah blah blah so even if you don't use any of the Java 9 features you will get",
    "start": "138560",
    "end": "144260"
  },
  {
    "text": "improvements probably if you use Java 9 the slides will be available afterwards so and this talk never ever comes in at",
    "start": "144260",
    "end": "151880"
  },
  {
    "text": "50 minutes so I'm going to talk really fast I apologize and skip over a bunch of slides so if you're interested in the",
    "start": "151880",
    "end": "157970"
  },
  {
    "text": "detail you can put the slides after and of course jigsaw is part of Java 9 you may have heard as a repple who's heard",
    "start": "157970",
    "end": "164690"
  },
  {
    "text": "of the repple in Java 9 loads of you who has heard of a referal generally or used",
    "start": "164690",
    "end": "171260"
  },
  {
    "text": "one okay so the wrestle for others Java developers I think the repple is a",
    "start": "171260",
    "end": "176630"
  },
  {
    "text": "fairly is a very new idea so it allows us to try out things from the command line so we can type like a single line",
    "start": "176630",
    "end": "182480"
  },
  {
    "text": "of code and have it execute which for Java is very exciting you don't have to have a whole class with public static",
    "start": "182480",
    "end": "188810"
  },
  {
    "text": "void main or any of that nonsense you don't have to create entire test files just to just to create like a little",
    "start": "188810",
    "end": "195110"
  },
  {
    "text": "tiny trial Smith it of code you can do that from the record and the repple is going to be part of Java 9 we're not",
    "start": "195110",
    "end": "200780"
  },
  {
    "text": "going to cover a lot of that because that's kind of a big topic in its own right as well so if you think about Java 9 you hear about jigsaw you hear about",
    "start": "200780",
    "end": "206690"
  },
  {
    "text": "the rep or maybe and you don't really know if there's anything else in Java 9 that's particularly exciting for us as",
    "start": "206690",
    "end": "212239"
  },
  {
    "text": "Java developers but it turns out that it's just one or two other features that went into Java 9 sits a couple and some",
    "start": "212239",
    "end": "220100"
  },
  {
    "text": "of these you won't see there's a lot of stuff under the covers I mentioned some of the performance improvements there's things like they wrote performance tests",
    "start": "220100",
    "end": "226670"
  },
  {
    "text": "for the JDK itself and there's a lot of infrastructure stuff that went on that doesn't necessarily they're not features",
    "start": "226670",
    "end": "232430"
  },
  {
    "text": "that we'll use but they will hopefully impact us in terms of a better JDK a better JVM but there are things in here",
    "start": "232430",
    "end": "238549"
  },
  {
    "text": "that we won't have heard of small features that I do want to cover in this talk I always like to set the",
    "start": "238549",
    "end": "244340"
  },
  {
    "text": "expectations appropriately low so do not put Java 9 into production it's not",
    "start": "244340",
    "end": "250730"
  },
  {
    "text": "ready yet it's not out yet recently they were saying it's going to be else in July now they're proposing September so it's not",
    "start": "250730",
    "end": "258560"
  },
  {
    "text": "out yet however you can try out the EA version of it which I do highly",
    "start": "258560",
    "end": "263960"
  },
  {
    "text": "recommend but it is evolving and still evolving to the extent that even the api's are still changing so each API",
    "start": "263960",
    "end": "270200"
  },
  {
    "text": "will behave HEA will behave slightly differently I've just updated this demo from build 166 which I used early on",
    "start": "270200",
    "end": "277310"
  },
  {
    "text": "this year to build 173 and there are changes in those in those builds and the other early access thing is IntelliJ",
    "start": "277310",
    "end": "284630"
  },
  {
    "text": "IDEA so I'm using IntelliJ IDEA 2017 point to EAP which is as always this ApS",
    "start": "284630",
    "end": "290870"
  },
  {
    "text": "an interesting experience and sometimes crashes horribly so like I say setting",
    "start": "290870",
    "end": "298130"
  },
  {
    "text": "expectations appropriately low but the 2017 point to EAP has a bunch of jigsaw features which I really want to demo so",
    "start": "298130",
    "end": "304700"
  },
  {
    "text": "I have to use all the early access things to kind of show you this stuff the case study and you may or may not",
    "start": "304700",
    "end": "312770"
  },
  {
    "text": "have seen an earlier presentation I did was called Java Aiken anger and I wrote this is like a Java effects UI which",
    "start": "312770",
    "end": "319580"
  },
  {
    "text": "I'll see if I can show it to you and it kind of reacts in real-time to like",
    "start": "319580",
    "end": "325460"
  },
  {
    "text": "Twitter messages it says like how happy or sad they are who's doing the most tweets and stuff like that and this was",
    "start": "325460",
    "end": "330590"
  },
  {
    "text": "designed to show off the Java 8 features so there's like streams and lambdas and stuff oh no blah blah blah blah blah and",
    "start": "330590",
    "end": "340270"
  },
  {
    "text": "and what I wanted to do was use this because it's a real it's a real piece of code it's kind of demo code but it's a",
    "start": "340270",
    "end": "345680"
  },
  {
    "text": "real piece of code and I wanted to see how much pain it was to migrate towards Java 9 what the advantages might be so",
    "start": "345680",
    "end": "351710"
  },
  {
    "text": "we're going to use this code base and try and use some of the Java 9 features in it the other good thing about it is",
    "start": "351710",
    "end": "357740"
  },
  {
    "text": "is they're kind of where I wouldn't say micro servers architecture because it doesn't have good micro service and stuff like you know reliability but it",
    "start": "357740",
    "end": "364820"
  },
  {
    "text": "does have independent services which can which were designed to pass messages",
    "start": "364820",
    "end": "370640"
  },
  {
    "text": "between them so this architecture works quite nicely for the reactive paradigms so that's another reason why I wanted to",
    "start": "370640",
    "end": "376100"
  },
  {
    "text": "use this case study if you're interested in the original case study then go away and look at the video of that I'm not",
    "start": "376100",
    "end": "382070"
  },
  {
    "text": "going to do any of the background on this at all so because it's just a waste of time there's loads of videos on that already as I said I'm going to go quite",
    "start": "382070",
    "end": "389420"
  },
  {
    "text": "quickly first up compiling with Java 9 if you've heard anything about Java 9 it's",
    "start": "389420",
    "end": "395040"
  },
  {
    "text": "probably that everything is going to break that's not strictly true but there",
    "start": "395040",
    "end": "401670"
  },
  {
    "text": "are a lot of changes which may impact your code so the first thing I wanted to do was compile my Java 8 application in",
    "start": "401670",
    "end": "408480"
  },
  {
    "text": "Java 9 and and see what breaks so let's go ahead and do that",
    "start": "408480",
    "end": "413600"
  },
  {
    "text": "ok so let's switch switch to an appropriate branch which has got which",
    "start": "423620",
    "end": "429870"
  },
  {
    "text": "is my original code so this is my if I",
    "start": "429870",
    "end": "435330"
  },
  {
    "text": "compile this we build the whole project this is my original Java 8 code building",
    "start": "435330",
    "end": "440340"
  },
  {
    "text": "on build 173 of Java 9 let's put this into presentation mode so you can see it",
    "start": "440340",
    "end": "445740"
  },
  {
    "text": "properly right so the first error we get",
    "start": "445740",
    "end": "459510"
  },
  {
    "text": "is that as of release 9 underscores a keyword may not be used as identifier so this is something I did sneak in to show",
    "start": "459510",
    "end": "465810"
  },
  {
    "text": "an error I didn't really have something which is called underscore it turns out honestly I promise it turns out that",
    "start": "465810",
    "end": "473730"
  },
  {
    "text": "under school was a perfectly valid variable field parameter name and and it's not going to be going forward but",
    "start": "473730",
    "end": "479820"
  },
  {
    "text": "now everyone knows that it's a valid field name people are like oh that's quite interesting I could use that it's",
    "start": "479820",
    "end": "485100"
  },
  {
    "text": "going away don't need it so that's an easy fix something useful just rename it",
    "start": "485100",
    "end": "490500"
  },
  {
    "text": "to something else but if you are using underscores it won't work anymore in Java 8 you'll get a warning about that so you should see that that's something",
    "start": "490500",
    "end": "497220"
  },
  {
    "text": "you shouldn't be doing ok what else happens if I recompile so this is the",
    "start": "497220",
    "end": "504600"
  },
  {
    "text": "sort of thing that we will have heard about we read anything about Java 9 the encapsulation of internal api's so",
    "start": "504600",
    "end": "510900"
  },
  {
    "text": "anything which is some misc which we shouldn't have been using in the first place but we did because sometimes there",
    "start": "510900",
    "end": "517229"
  },
  {
    "text": "wasn't an alternative in this case I genuinely was using this class in my Java 8 one because I was like oh that",
    "start": "517229",
    "end": "522780"
  },
  {
    "text": "does what I want I know not supposed to use it but it does what I want so I'm going to use it anyway which is what we are to so you can't use",
    "start": "522780",
    "end": "529690"
  },
  {
    "text": "that anymore basically the compiler says and it's not there now it is there it's just hidden away so you can't access it",
    "start": "529690",
    "end": "535420"
  },
  {
    "text": "anymore and so I need to get rid of that and replace it with whatever the the replacement is and in this case it turns",
    "start": "535420",
    "end": "541990"
  },
  {
    "text": "out it's fairly straightforward I need base 64 Java dot util get the",
    "start": "541990",
    "end": "549610"
  },
  {
    "text": "controller and codes of strings rebuild and everything will work so generally",
    "start": "549610",
    "end": "558190"
  },
  {
    "text": "speaking if you're using some miss position that's been in the first place you need to replace those anything which",
    "start": "558190",
    "end": "564070"
  },
  {
    "text": "has a valid replacement in Java 8 or 9 is documented so you can see what the replacement should be there are a couple",
    "start": "564070",
    "end": "569890"
  },
  {
    "text": "of exceptions which don't have replacements most notably some misses or unsafe so unsafe is a special case and",
    "start": "569890",
    "end": "576730"
  },
  {
    "text": "has been it's been given it's been given leave to continue existing for the time",
    "start": "576730",
    "end": "581860"
  },
  {
    "text": "being because there isn't a full replacement for unsafe but an you shouldn't be using unsafe if you don't know what you're doing anyway that's",
    "start": "581860",
    "end": "588580"
  },
  {
    "text": "what they say that's what I have to say that's the official line and when I did my last annotation here I was talking",
    "start": "588580",
    "end": "594640"
  },
  {
    "text": "about the destructor and the destructor does use unsafe because it has to use on face and that's that's where it goes and",
    "start": "594640",
    "end": "599880"
  },
  {
    "text": "right so compiling with Java 9 you may find there some things which are broken but probably not as broken as as you",
    "start": "599880",
    "end": "606340"
  },
  {
    "text": "expected one of the things I wanted to recommend is that you drop the Java 9 JVM into your continuous integration",
    "start": "606340",
    "end": "613510"
  },
  {
    "text": "environment and spin it up and see if it runs and it turns out that lots of CI servers don't support Java 9 yet so that",
    "start": "613510",
    "end": "621310"
  },
  {
    "text": "might not work so you might yes download it give it a go see what breaks",
    "start": "621310",
    "end": "627750"
  },
  {
    "text": "jigsaw let's talk a bit about jigsaw and because you know everyone's going to",
    "start": "627750",
    "end": "632800"
  },
  {
    "text": "talk about jigsaw now this is my original project structure it is modular",
    "start": "632800",
    "end": "637840"
  },
  {
    "text": "I was using make Gradle plus IntelliJ to kind of split it into modules I had this",
    "start": "637840",
    "end": "642910"
  },
  {
    "text": "kind of micro service type architecture so it lends itself to modular code but it turns out that when I went back to it",
    "start": "642910",
    "end": "648430"
  },
  {
    "text": "later to turn it into proper modular code I hadn't done it right who knew so",
    "start": "648430",
    "end": "654150"
  },
  {
    "text": "what I had done in the original one is I had a mod for my UI code a module for my shared",
    "start": "654150",
    "end": "659930"
  },
  {
    "text": "infrastructure code and the module for everything else all of my back-end services and I didn't notice this with a",
    "start": "659930",
    "end": "666320"
  },
  {
    "text": "problem probably because I am NOT responsible for deploying this code because it's demo code now if I had to deploy it as small independent jars I",
    "start": "666320",
    "end": "672980"
  },
  {
    "text": "probably would have split it up differently I'm with jigsaw with the Java module",
    "start": "672980",
    "end": "678110"
  },
  {
    "text": "system you're forced to think about what you're going to deploy which jars you're going to deploy and how your code is",
    "start": "678110",
    "end": "683899"
  },
  {
    "text": "modular eyes like as a developer that something you have to think about which is I think it's kind of a good thing so",
    "start": "683899",
    "end": "689569"
  },
  {
    "text": "when I modular as my code I ended up with a module for my UI code a module for my shared infrastructure code a",
    "start": "689569",
    "end": "695839"
  },
  {
    "text": "module for another utility and then all of my other services were independent modules so it was actually more correct",
    "start": "695839",
    "end": "702529"
  },
  {
    "text": "so jigsaw kind of forced me to think about this more correctly so I did it wrong to begin with but I didn't have",
    "start": "702529",
    "end": "708920"
  },
  {
    "text": "anything to really tell me I was doing it wrong and when you oh yes and the",
    "start": "708920",
    "end": "714290"
  },
  {
    "text": "other thing is that grater doesn't work in Java 9 they're working on it and I",
    "start": "714290",
    "end": "719959"
  },
  {
    "text": "keep pinging them every week saying is it done yet and who's it done yet Gradle doesn't work in Java 9 it will they are",
    "start": "719959",
    "end": "725209"
  },
  {
    "text": "working on it the problem is that Java 9 has been moving so fast that Gradle were like we're just going to wait for DES",
    "start": "725209",
    "end": "731180"
  },
  {
    "text": "stabilize a little bit before we start trying to catch up maven does work Gradle doesn't so I have",
    "start": "731180",
    "end": "736519"
  },
  {
    "text": "to rip Gradle out of my project groovy at the time when I first wrote this in February groovy wasn't working with Java",
    "start": "736519",
    "end": "742130"
  },
  {
    "text": "9 I don't know if it is now so I can't categorically state so I stripped out all the groovy tests as well turn them",
    "start": "742130",
    "end": "748010"
  },
  {
    "text": "into J unit 5 tests and it turns out that I mean I really like spots for testing but what I noticed when I was",
    "start": "748010",
    "end": "754490"
  },
  {
    "text": "using J unit 5 is that the tests run much quicker now so I'm not using groovy which is sad but true",
    "start": "754490",
    "end": "759980"
  },
  {
    "text": "so as well as restructuring my whole project I also had to rip out Gradle to",
    "start": "759980",
    "end": "765139"
  },
  {
    "text": "get it to work and I had to rip out groovy to get it to work and then I can",
    "start": "765139",
    "end": "770360"
  },
  {
    "text": "jigsaw wise my code so what this means is are you cut to that very well but you",
    "start": "770360",
    "end": "776420"
  },
  {
    "text": "have a magics new file called module - - info Java and that defines the modules",
    "start": "776420",
    "end": "783170"
  },
  {
    "text": "it doesn't just define what the module looks like it also tells things like IntelliJ IDEA that you're using",
    "start": "783170",
    "end": "790460"
  },
  {
    "text": "so you can pile with module module path instead of class path and this is where",
    "start": "790460",
    "end": "796070"
  },
  {
    "text": "all the magic happens so the thing about jigsaw about modularity that I hadn't really realized till I started doing my",
    "start": "796070",
    "end": "801440"
  },
  {
    "text": "research is when you use modularity there's no such thing as a class path anymore that was sort of part of the point to",
    "start": "801440",
    "end": "807380"
  },
  {
    "text": "try and get rid of this enormous monster and trying to treat code as separate individual modules so when you start",
    "start": "807380",
    "end": "815090"
  },
  {
    "text": "using module info files you have to start using module passing center classifier I'm not going to go into details of that but just be aware of",
    "start": "815090",
    "end": "821420"
  },
  {
    "text": "that because I didn't know that class path was like a thing of the past it's a dinosaur it's dead but except you can",
    "start": "821420",
    "end": "828170"
  },
  {
    "text": "still use class path if you still want to use class path and that's part of the the noise around when do we release Java",
    "start": "828170",
    "end": "835730"
  },
  {
    "text": "9 what does jigsaw look like what are we allowed to do what we're not allowed to do lots of people still want to use a",
    "start": "835730",
    "end": "841070"
  },
  {
    "text": "class class not surprisingly and the other thing is so my structure here is I'm using a grader style structure which",
    "start": "841070",
    "end": "847040"
  },
  {
    "text": "has got the module with a source directory and a test directory and my tests are actually doesn't have a module",
    "start": "847040",
    "end": "852860"
  },
  {
    "text": "file because then I'd have split packages across two different modules there is a way to fix that I didn't do",
    "start": "852860",
    "end": "859400"
  },
  {
    "text": "it for this demo and I run the test from inside the IDE so it doesn't impact me",
    "start": "859400",
    "end": "864500"
  },
  {
    "text": "that much so moving to use a modular system was a non-trivial task for me the",
    "start": "864500",
    "end": "872000"
  },
  {
    "text": "suggestions from the the demos and stuff from the Oracle guys is that your structure has a source directory at the",
    "start": "872000",
    "end": "879230"
  },
  {
    "text": "top level and your modules are inside your source and then you have a test site between modules inside that which",
    "start": "879230",
    "end": "884390"
  },
  {
    "text": "is what I did when I first migrated but that's like I obviously if I was using Gradle it would completely freak out",
    "start": "884390",
    "end": "890060"
  },
  {
    "text": "about that so it's a totally different way of working but you can do it the sort of more traditional Gradle Maven",
    "start": "890060",
    "end": "895190"
  },
  {
    "text": "way and it still works it's fine right so we're talking about architectural",
    "start": "895190",
    "end": "900800"
  },
  {
    "text": "type stuff so I thought I'd put some UML up here I generated a diagram using IntelliJ because I'm lazy and what I",
    "start": "900800",
    "end": "908870"
  },
  {
    "text": "wanted to do is when I was starting to split my project into modules I needed to understand my dependencies to figure",
    "start": "908870",
    "end": "915080"
  },
  {
    "text": "out if I had things correct and it turns out I don't have them correct because I have my modular code from two",
    "start": "915080",
    "end": "921550"
  },
  {
    "text": "different services to upon code from another service which isn't right it can depend it can listen",
    "start": "921550",
    "end": "927670"
  },
  {
    "text": "to messages from that service but it shouldn't be reusing code from there I have one jar file which is only used by",
    "start": "927670",
    "end": "934390"
  },
  {
    "text": "one particular module which made sense it's no sense it's an API which shouldn't have been being used and I had",
    "start": "934390",
    "end": "941290"
  },
  {
    "text": "a reactor streams jar file which was used by two different modules which also made no sense it should either be used by one or all of them and so by actually",
    "start": "941290",
    "end": "949330"
  },
  {
    "text": "mapping out my dependencies I kind of figured out I designed my application in a slightly weird way so i redesigned it",
    "start": "949330",
    "end": "956110"
  },
  {
    "text": "so all my services are now at the same level they don't depend upon each other code wise which is the right thing they",
    "start": "956110",
    "end": "961750"
  },
  {
    "text": "depend upon my reusable infrastructure code and they depend upon my only",
    "start": "961750",
    "end": "967030"
  },
  {
    "text": "utility as well my back-end services all depend upon this reactor streams utility and two of my services care about one",
    "start": "967030",
    "end": "976000"
  },
  {
    "text": "reactive implementation and another one cares about a different reaction implementation the idea here being that",
    "start": "976000",
    "end": "981660"
  },
  {
    "text": "I'm using react so streams API so I don't care about the implementations in the independent services and so that's",
    "start": "981660",
    "end": "990280"
  },
  {
    "text": "the dependencies diagram I was talking about our intelligence and our jar files this is not the same as a as a JDK",
    "start": "990280",
    "end": "997330"
  },
  {
    "text": "module diagram so if we look at one of these modules to client the UI module",
    "start": "997330",
    "end": "1002610"
  },
  {
    "text": "let's look at what the module diagram looks like so this is kind of quite a",
    "start": "1002610",
    "end": "1008340"
  },
  {
    "text": "different way of looking at things so my client uses Java effects so it's dependent upon a number of Java FX",
    "start": "1008340",
    "end": "1015750"
  },
  {
    "text": "modules from the JDK specifically FX ml controls and Java X base and you can see",
    "start": "1015750",
    "end": "1023190"
  },
  {
    "text": "there all the dependencies inside there of all the modules they depend upon so all those yellow ones are inside the JDK",
    "start": "1023190",
    "end": "1029730"
  },
  {
    "text": "itself and the point about modularity is that you don't have to use the whole JDK you just define which bits you want to",
    "start": "1029730",
    "end": "1035910"
  },
  {
    "text": "use so here I have to say I want to use these specific bits of Java FX and apparently that will have all of those",
    "start": "1035910",
    "end": "1042810"
  },
  {
    "text": "other dependencies my back-end and service module depends upon jar file",
    "start": "1042810",
    "end": "1049170"
  },
  {
    "text": "which has not been modularized so it doesn't look as pretty as the the jdk",
    "start": "1049170",
    "end": "1054180"
  },
  {
    "text": "dependencies what happens when you when you're depending upon a jar file that hasn't been modularized as it gets",
    "start": "1054180",
    "end": "1060460"
  },
  {
    "text": "turned into something called an automatic module and this is something else that people are arguing over what do automatic modules look like what",
    "start": "1060460",
    "end": "1066610"
  },
  {
    "text": "should the name be how do they work and in this case I'm dependent upon one jar",
    "start": "1066610",
    "end": "1072130"
  },
  {
    "text": "file which is the WebSocket server impulse and that translates to three",
    "start": "1072130",
    "end": "1080890"
  },
  {
    "text": "different automatic modules because it's based upon package name so if there's",
    "start": "1080890",
    "end": "1085960"
  },
  {
    "text": "something to be aware of like there's not a one-to-one mapping between the idea of a module and the jar and and the",
    "start": "1085960",
    "end": "1093610"
  },
  {
    "text": "point here is that the jdk modules there are lots of them and you have to understand how to work also this new and",
    "start": "1093610",
    "end": "1100360"
  },
  {
    "text": "this module diagram is new in IntelliJ IDEA 2017 point two so I kind of want to",
    "start": "1100360",
    "end": "1105640"
  },
  {
    "text": "show off as well but it's quite useful when you're starting getting started with jigsaw to understand the architecture it's quite useful obviously",
    "start": "1105640",
    "end": "1112120"
  },
  {
    "text": "to draw this out to figure out what you've got so you can see if you're if it matches your expectations so given",
    "start": "1112120",
    "end": "1119170"
  },
  {
    "text": "all of that preambles which was supposed to take five minutes and didn't let's look at what happens if we want to",
    "start": "1119170",
    "end": "1125710"
  },
  {
    "text": "create a module info file so let's look at this from a code from a developer point of view and see see how hard it really is I'm going to switch it to the",
    "start": "1125710",
    "end": "1134920"
  },
  {
    "text": "right branch",
    "start": "1134920",
    "end": "1137250"
  },
  {
    "text": "so what I've got here hmm I've got my my different modules most of these have a",
    "start": "1147270",
    "end": "1154710"
  },
  {
    "text": "module info already I've got one module which doesn't have one so we're going to create one for this module obviously I'm",
    "start": "1154710",
    "end": "1167020"
  },
  {
    "text": "going to make the IDE do it for me because I'm really lazy and once I start doing that when I compile as I've",
    "start": "1167020",
    "end": "1174040"
  },
  {
    "text": "mentioned before the the way the compiler works is now different it's not dependent upon all the code on the class",
    "start": "1174040",
    "end": "1180160"
  },
  {
    "text": "path you have to start defining the modules that you care about so if we have a look at this class for example",
    "start": "1180160",
    "end": "1187110"
  },
  {
    "text": "previously I was dependent upon Java util lager and and that was fine and",
    "start": "1189000",
    "end": "1194860"
  },
  {
    "text": "that works and it compiled and now I've just added a single thing I've added the module info file now that no longer",
    "start": "1194860",
    "end": "1201610"
  },
  {
    "text": "compiles and that sounds kind of weird but it's because you need to specifically state that you know you're",
    "start": "1201610",
    "end": "1207549"
  },
  {
    "text": "using the module Java logging so if we add that let me show you my module info",
    "start": "1207549",
    "end": "1213730"
  },
  {
    "text": "we have to say we require Java dot logging by default what we get I don't have to say this I'll just show you what",
    "start": "1213730",
    "end": "1219700"
  },
  {
    "text": "it looks like by default we will get requires Java dot base I don't have to say that and Java doc base has things",
    "start": "1219700",
    "end": "1225850"
  },
  {
    "text": "like Java dot util and most of the basic stuff that you use all the time so you don't have to say you need that for",
    "start": "1225850",
    "end": "1231640"
  },
  {
    "text": "anything else outside of the base package base module you have to explicitly declare that you're dependent",
    "start": "1231640",
    "end": "1237610"
  },
  {
    "text": "upon a different module so in this case Java dot logging and the other thing I",
    "start": "1237610",
    "end": "1243970"
  },
  {
    "text": "need is I'm using an external jar file I'm using react to streams so I need to",
    "start": "1243970",
    "end": "1250090"
  },
  {
    "text": "tell the module info file to look for those modules even though they're not",
    "start": "1250090",
    "end": "1255880"
  },
  {
    "text": "real modules so here I say it requires",
    "start": "1255880",
    "end": "1261010"
  },
  {
    "text": "reactive streams if I drill through to that",
    "start": "1261010",
    "end": "1265679"
  },
  {
    "text": "there we go it's loading up that means it's using this jar file here okay so",
    "start": "1268150",
    "end": "1275240"
  },
  {
    "text": "the good thing is that IDE can do a lot of the heavy lifting for you if you're not keen on the idea doing heavy lifting",
    "start": "1275240",
    "end": "1280670"
  },
  {
    "text": "for you you can use a tool called J dips which will analyze your dependencies and it will tell you which modules you are",
    "start": "1280670",
    "end": "1286550"
  },
  {
    "text": "depending on and then you can basically copy paste all those modules into your into your module intro file and then it",
    "start": "1286550",
    "end": "1292130"
  },
  {
    "text": "should work I believe you can use J dips to generate your module info file but I didn't I",
    "start": "1292130",
    "end": "1297380"
  },
  {
    "text": "couldn't get that to work last time I tried I think that might be in a version that's not out yet and so actually build",
    "start": "1297380",
    "end": "1303110"
  },
  {
    "text": "what's the other error we've got",
    "start": "1303110",
    "end": "1306850"
  },
  {
    "text": "now if I want to use the the flow module from another module this is the module",
    "start": "1311290",
    "end": "1319240"
  },
  {
    "text": "flow does not export the package send stop flow so the if I want my module to",
    "start": "1319240",
    "end": "1325150"
  },
  {
    "text": "be used by other people which presumably I do because I created the module I need to say what I export so I'm going to",
    "start": "1325150",
    "end": "1333370"
  },
  {
    "text": "export just that package what that means is that the whole point about modularity is to allow you to encapsulate your code",
    "start": "1333370",
    "end": "1339820"
  },
  {
    "text": "so what I what I could have is if I'd had another package here let's say new",
    "start": "1339820",
    "end": "1344980"
  },
  {
    "text": "package if I had an import package I didn't want you to access then I don't",
    "start": "1344980",
    "end": "1351640"
  },
  {
    "text": "export the import package and you can't do anything with it you can't access it so all of my internal details are hidden",
    "start": "1351640",
    "end": "1357490"
  },
  {
    "text": "away from you and that's the point of jigsaw really not just the spitting out your code but hiding stuff that you",
    "start": "1357490",
    "end": "1363490"
  },
  {
    "text": "don't want people to see alright so",
    "start": "1363490",
    "end": "1372070"
  },
  {
    "text": "let's talk about the pain of moving specifically to jigsaw and some structural reorganization may be needed",
    "start": "1372070",
    "end": "1377710"
  },
  {
    "text": "not as much as I originally thought I didn't have to restructure everything to follow the the JDK way of doing stuff I",
    "start": "1377710",
    "end": "1384070"
  },
  {
    "text": "can still continue to have modules in a Gradle style structure but I did have to do some structural reorganization but",
    "start": "1384070",
    "end": "1390490"
  },
  {
    "text": "that's largely because I hadn't been designing my application in a modular way to begin with so it's kind of my own",
    "start": "1390490",
    "end": "1396220"
  },
  {
    "text": "fault for not doing it right in the first place and this project has no command line build because I don't have",
    "start": "1396220",
    "end": "1401230"
  },
  {
    "text": "Gradle I just take Gradle out so everything is done through the IDE all the dependencies are managed through the IDE running the tests is done through",
    "start": "1401230",
    "end": "1407620"
  },
  {
    "text": "the IDE so it's not super real-world application I do want to try this in maven to see if it works out properly",
    "start": "1407620",
    "end": "1413520"
  },
  {
    "text": "the IDE support for new functionality specifically jigsaw but Java 9 stuff is",
    "start": "1413520",
    "end": "1419440"
  },
  {
    "text": "not quite as mature as it is for other stuff and so you could see that I could",
    "start": "1419440",
    "end": "1425530"
  },
  {
    "text": "add modules into my module info file but I can't generate my module info file I couldn't generate the exports statement",
    "start": "1425530",
    "end": "1433540"
  },
  {
    "text": "yet either so this stuff is is coming it's we're working on it we have issues for all of it but mu4 jigsaw",
    "start": "1433540",
    "end": "1441190"
  },
  {
    "text": "specifically it's a good idea to understand what's going on under the covers so that you know what to do it's a raw",
    "start": "1441190",
    "end": "1447290"
  },
  {
    "text": "level because the IDE can't fix everything for you and do if you do want to use jigsaw if you do want to use",
    "start": "1447290",
    "end": "1453680"
  },
  {
    "text": "modularity you really do have to do your homework I did a lot of brute force",
    "start": "1453680",
    "end": "1459620"
  },
  {
    "text": "trying to figure out what my module files look like let me show you an example so I don't show you the others",
    "start": "1459620",
    "end": "1467530"
  },
  {
    "text": "let's look at the client one this module",
    "start": "1468940",
    "end": "1474920"
  },
  {
    "text": "info I brute force my way through this so I basically fixed all my compilation errors the Java compiler will give you",
    "start": "1474920",
    "end": "1482390"
  },
  {
    "text": "useful messages like you need to depend upon this module or you need to export that so it does tell you what's wrong",
    "start": "1482390",
    "end": "1488030"
  },
  {
    "text": "but it just takes a while to brute-force your way through that plus some of the errors only come when you start at the",
    "start": "1488030",
    "end": "1493100"
  },
  {
    "text": "runtime not just at compile time so don't do it my way because it took about two days to do that",
    "start": "1493100",
    "end": "1498320"
  },
  {
    "text": "run jada and figure out how J tips works I was really lazy I couldn't figure out how to get the J tips to work so I was",
    "start": "1498320",
    "end": "1504080"
  },
  {
    "text": "like oh how hard can it be two days later and we should just figure out how to use J dibs so do read the manual and otherwise",
    "start": "1504080",
    "end": "1512420"
  },
  {
    "text": "he'll be totally lost especially this difference between module path and class path that is actually what stopped me being able to run J tips because I",
    "start": "1512420",
    "end": "1518690"
  },
  {
    "text": "needed a module path not a class path the advantages you do get a cleaner",
    "start": "1518690",
    "end": "1523760"
  },
  {
    "text": "design it is better design it's better encapsulation better separation of concerns and you do get I'm not sure",
    "start": "1523760",
    "end": "1529640"
  },
  {
    "text": "deployables is a word and you can potentially make the code that you deploy your jar files smaller which can",
    "start": "1529640",
    "end": "1535220"
  },
  {
    "text": "be a good thing particularly in the IOT worlds maybe in cloud if you're like paying per byte I don't know but it can",
    "start": "1535220",
    "end": "1542540"
  },
  {
    "text": "give you smaller coder deploy for probably most applications particularly",
    "start": "1542540",
    "end": "1547820"
  },
  {
    "text": "enterprise applications that will kind of run on site I do not think these benefits are worth the pain",
    "start": "1547820",
    "end": "1555080"
  },
  {
    "text": "certainly not straight away the important thing to know though is you don't have to use jigsaw to use Java 9",
    "start": "1555080",
    "end": "1560690"
  },
  {
    "text": "this is all optional so if you don't use jigsaw you don't add module info you're still using the class path you're still",
    "start": "1560690",
    "end": "1566240"
  },
  {
    "text": "working with jar files the way you used to everything should work the way you expect it to so don't go down the jigsaw path just",
    "start": "1566240",
    "end": "1571970"
  },
  {
    "text": "because you think you should because you don't have to and I don't recommend it either right let's talk a bit about reactive ap",
    "start": "1571970",
    "end": "1579090"
  },
  {
    "text": "I have 20 minutes on jigsaw okay hi let's talk a bit about the reactive API in Java world or the JVM world it's not",
    "start": "1579090",
    "end": "1586740"
  },
  {
    "text": "just Java we have how to react to streams API for a little while in 1.0 and the reactor streams API has most",
    "start": "1586740",
    "end": "1594300"
  },
  {
    "text": "importantly a publisher and subscriber and it's also got a processor which is both of those things combined and a",
    "start": "1594300",
    "end": "1599760"
  },
  {
    "text": "subscription to help you manage your subscriptions and so there are lots of implementations as there's actor reactor",
    "start": "1599760",
    "end": "1606390"
  },
  {
    "text": "rx Java vertex a bunch of things like that so if you're using a reactive",
    "start": "1606390",
    "end": "1611520"
  },
  {
    "text": "streams library it's most of them like rx Java 2.0 onwards will support the",
    "start": "1611520",
    "end": "1617610"
  },
  {
    "text": "reactive streams API it turns out that the the Java guys thought this is important enough to actually build it",
    "start": "1617610",
    "end": "1623010"
  },
  {
    "text": "into their language so the reactor streams API is part of Java 9 and it's not just part of Java 9 it's actually",
    "start": "1623010",
    "end": "1628770"
  },
  {
    "text": "part of the Java base module so it's part of the free stuff you get so it's kind of like seems to be suggesting that",
    "start": "1628770",
    "end": "1635580"
  },
  {
    "text": "the react programming is going to be I was going though way to go but like a way a standard way of working at first",
    "start": "1635580",
    "end": "1643830"
  },
  {
    "text": "glance this looks exactly the same as the REC 2 streams API it's not of course and the package name is different so",
    "start": "1643830",
    "end": "1651200"
  },
  {
    "text": "Java dot util concurrent dot flow with inner interfaces which match the same",
    "start": "1651200",
    "end": "1657870"
  },
  {
    "text": "names of the interfaces this is a bit of a pain because when I was implementing this one I am using rxjava and reactor",
    "start": "1657870",
    "end": "1664620"
  },
  {
    "text": "and they use the vector streams API and I wanted my service staff to talk in",
    "start": "1664620",
    "end": "1670170"
  },
  {
    "text": "terms of the Java 9 reactive API and then I have to adapt between the two so it's a bit of a pain I'm not really sure",
    "start": "1670170",
    "end": "1678300"
  },
  {
    "text": "how the library developers are going to manage that I suspect maybe multi release jar files might help but I'm not",
    "start": "1678300",
    "end": "1684450"
  },
  {
    "text": "sure anyway be aware of that it looks same it's not the same where do I use",
    "start": "1684450",
    "end": "1689520"
  },
  {
    "text": "the reaction streams API this is where we come back to our case study so my services are really stupid they use",
    "start": "1689520",
    "end": "1695100"
  },
  {
    "text": "WebSockets to talk to each other and they basically they deal with strings so",
    "start": "1695100",
    "end": "1700530"
  },
  {
    "text": "I'm going to get string in and I'm going to per string out and I'm going to do stuff in the middle and the stuff in the",
    "start": "1700530",
    "end": "1707220"
  },
  {
    "text": "middle because it was a Java 8 demo the stuff in it'll effectively is a lambda expression that map's a string to a string so",
    "start": "1707220",
    "end": "1715020"
  },
  {
    "text": "that's kind of that's what I was doing so I can do something a bit more powerful with reactive streams so I can",
    "start": "1715020",
    "end": "1722820"
  },
  {
    "text": "actually just say well let's assume that when I get stuff off the WebSocket I can publish it and people can subscribe to",
    "start": "1722820",
    "end": "1729780"
  },
  {
    "text": "me to listen to that information the business logic can now use the power of a reactive implementation to do",
    "start": "1729780",
    "end": "1736350"
  },
  {
    "text": "something with that and then I can have a subscriber which listens to the output of whatever the business logic does and",
    "start": "1736350",
    "end": "1742860"
  },
  {
    "text": "then put that back on the WebSocket it's still the same functionality but potentially can give me a lot more power",
    "start": "1742860",
    "end": "1748549"
  },
  {
    "text": "so I'll just take a quick look at how I implemented this so my look at the",
    "start": "1748549",
    "end": "1763650"
  },
  {
    "text": "publisher to begin with my publisher was a class called client endpoints so I",
    "start": "1763650",
    "end": "1769559"
  },
  {
    "text": "made this implements load up publisher which is the Java 9 reactive streams API and this has a single method on it",
    "start": "1769559",
    "end": "1777470"
  },
  {
    "text": "subscribe so something a subscriber will subscribe to me so I'm just going to",
    "start": "1777470",
    "end": "1783900"
  },
  {
    "text": "implement that here I get given a subscriber and I've chosen in my service",
    "start": "1783900",
    "end": "1790080"
  },
  {
    "text": "code to create my own reactive implementation don't recommend doing this by the way because other people",
    "start": "1790080",
    "end": "1796559"
  },
  {
    "text": "have done this and done all the hard work but all I really wanted to do with management descriptions so I just",
    "start": "1796559",
    "end": "1802110"
  },
  {
    "text": "basically create some subscriptions have a list of subscriptions and then when I",
    "start": "1802110",
    "end": "1807240"
  },
  {
    "text": "get something off the WebSocket I just tell all my subscribers about that so my implementation is quite it's quite",
    "start": "1807240",
    "end": "1813150"
  },
  {
    "text": "simple so I can write my own implementations I think it sounds simple that took ages to implement of course",
    "start": "1813150",
    "end": "1819720"
  },
  {
    "text": "because you know everything always does so on the other end my subscriber end I",
    "start": "1819720",
    "end": "1829039"
  },
  {
    "text": "have broadcasting server end point which can the point is that anything can be",
    "start": "1829039",
    "end": "1834270"
  },
  {
    "text": "like I have a number of things listening to the WebSocket there and this implements subscriber the SUBSCRIBE is a",
    "start": "1834270",
    "end": "1841350"
  },
  {
    "text": "bit more complicated I have an unsubscribe which subscription on next which is the main",
    "start": "1841350",
    "end": "1846510"
  },
  {
    "text": "thing which does something when I when I get something from as a subscriber when I get something what do I do with it on",
    "start": "1846510",
    "end": "1852780"
  },
  {
    "text": "error and on completes at the end of it what do I do at the end so my",
    "start": "1852780",
    "end": "1860670"
  },
  {
    "text": "broadcasting server endpoint has unsubscribe unsubscribe all I'm going to do is to say give me everything you've got",
    "start": "1860670",
    "end": "1866550"
  },
  {
    "text": "just like everything not just some set of values on next is the main thing so",
    "start": "1866550",
    "end": "1871740"
  },
  {
    "text": "I'm just going to publish anything I get I published that on the WebSocket to anything that's listening to me on error do not do this because I was",
    "start": "1871740",
    "end": "1882780"
  },
  {
    "text": "writing the demo because I was learning stuff you know I did stuff that the simplest quickest way possible and I",
    "start": "1882780",
    "end": "1889410"
  },
  {
    "text": "would like to call out that if you are working with reactive streams the simplest quickest way possible is not to",
    "start": "1889410",
    "end": "1896460"
  },
  {
    "text": "do nothing on error these are asynchronous messages and so if something goes wrong you have no idea",
    "start": "1896460",
    "end": "1903060"
  },
  {
    "text": "you don't get stack traces you don't it doesn't stop it just just doesn't do what you want it to do and you've got no",
    "start": "1903060",
    "end": "1909240"
  },
  {
    "text": "idea why so this is not a quick way to learn reactive programming always do something with error message even if",
    "start": "1909240",
    "end": "1915480"
  },
  {
    "text": "it's just printed to system out and on completely closed of WebSocket so again I've got a fairly simple implementation",
    "start": "1915480",
    "end": "1921900"
  },
  {
    "text": "of this I will come back to the error handling obviously so now that I have",
    "start": "1921900",
    "end": "1932550"
  },
  {
    "text": "done that where do I apply this what's the point what's the point in kind of",
    "start": "1932550",
    "end": "1937580"
  },
  {
    "text": "changing my whole infrastructure to expose reactive streams this reactor streams API well I put one specific",
    "start": "1937580",
    "end": "1944820"
  },
  {
    "text": "example of it 15 minutes I will never get this talk to under 50 minutes and",
    "start": "1944820",
    "end": "1949850"
  },
  {
    "text": "let's look at one example what I had",
    "start": "1949850",
    "end": "1956220"
  },
  {
    "text": "here I'm like I was saying before one of the points of this demo is to demonstrate Java eight streams so I've",
    "start": "1956220",
    "end": "1962670"
  },
  {
    "text": "got a lot of suffered streams and lambda expressions what I could do instead of using Java eight streams for this is use",
    "start": "1962670",
    "end": "1968670"
  },
  {
    "text": "react histories what the functionality does is I'm reading a file and for every line in that file I'm going to filter",
    "start": "1968670",
    "end": "1975150"
  },
  {
    "text": "out some noise I'm going to insert a delay of 100 milliseconds because thank you windows for wanting to restart",
    "start": "1975150",
    "end": "1982440"
  },
  {
    "text": "my computer this is demo code so I kind of I want the stuff that displays on the",
    "start": "1982440",
    "end": "1987900"
  },
  {
    "text": "screen to not like just get fired at the screen I want to delay of 100 milliseconds so that you can see it ticking over and then I'm going to",
    "start": "1987900",
    "end": "1994260"
  },
  {
    "text": "publish that string so we can do the same thing with reactive with reactive streams I'll come at that I'm going to",
    "start": "1994260",
    "end": "2001820"
  },
  {
    "text": "use our extrav are for this particular implementation so we have flowable so I",
    "start": "2001820",
    "end": "2009470"
  },
  {
    "text": "need to add reactive Rx Java to the cuff cuff and I need to okay fine import the",
    "start": "2009470",
    "end": "2018650"
  },
  {
    "text": "class and then I need to add requires rx Java to my module info that's my Java 9",
    "start": "2018650",
    "end": "2024680"
  },
  {
    "text": "overhead and so flowable from iterable",
    "start": "2024680",
    "end": "2029800"
  },
  {
    "text": "I'm going to do basically the same sort of thing I could do before but I don't get a nice try with resources functionality because it's not it's not",
    "start": "2029800",
    "end": "2037280"
  },
  {
    "text": "quite straightforward but we'll do something similar and then I can feel I",
    "start": "2037280",
    "end": "2045350"
  },
  {
    "text": "mean we use all of that peak in Java 8",
    "start": "2045350",
    "end": "2051740"
  },
  {
    "text": "we'll do some operation on everything which comes through the pipeline of that stage and in our extra hour I can say do",
    "start": "2051740",
    "end": "2059510"
  },
  {
    "text": "one next instead is the same same functionality basically so I can use our",
    "start": "2059510",
    "end": "2065210"
  },
  {
    "text": "extravasated Java 8 streams to do let's get rid of",
    "start": "2065210",
    "end": "2070250"
  },
  {
    "text": "the Java 8 version so now I've got slightly more code it's not quite as",
    "start": "2070250",
    "end": "2075590"
  },
  {
    "text": "pretty and I depend upon an external library to do exactly the same thing but I'll show you why this might be an",
    "start": "2075590",
    "end": "2081379"
  },
  {
    "text": "advantage I was always uncomfortable with this is kind of like use the kind of server the debug peek method to like",
    "start": "2081380",
    "end": "2089899"
  },
  {
    "text": "inject 100 millisecond delay but it's actually part of the business logic of my application I want each each line in",
    "start": "2089900",
    "end": "2096800"
  },
  {
    "text": "the file I wanted to be delayed by 100 milliseconds in with reactive streams you can do this in a slightly different",
    "start": "2096800",
    "end": "2101990"
  },
  {
    "text": "way so I can say flowable interval give",
    "start": "2101990",
    "end": "2108890"
  },
  {
    "text": "it an interval of 100 milliseconds let's call it tick so this is a stream",
    "start": "2108890",
    "end": "2115220"
  },
  {
    "text": "which is just going to tick every 100 milliseconds it's going to make a long value every 100 milliseconds now what I",
    "start": "2115220",
    "end": "2120619"
  },
  {
    "text": "can do instead of inserting this delay here I can zip my stream of strings from",
    "start": "2120619",
    "end": "2128359"
  },
  {
    "text": "the file to my stream of of ticks at an",
    "start": "2128359",
    "end": "2134000"
  },
  {
    "text": "interval and then I have to say well given I have a string from this stream",
    "start": "2134000",
    "end": "2140180"
  },
  {
    "text": "and a long from this stream what do you want me to do with those two values well I don't care about the long I just want",
    "start": "2140180",
    "end": "2145880"
  },
  {
    "text": "them I just want the string value and then I can get rid of this and and so",
    "start": "2145880",
    "end": "2156020"
  },
  {
    "text": "that's quite a nice way of having the same functionality and also demonstrate something very different about reactor",
    "start": "2156020",
    "end": "2161839"
  },
  {
    "text": "streams versus Java eight streams you can actually merge two streams together you can use two streams at the same time",
    "start": "2161839",
    "end": "2167510"
  },
  {
    "text": "you can also do things that you can reuse streams in Java eight streams when",
    "start": "2167510",
    "end": "2172579"
  },
  {
    "text": "you don't for each then this stream is done and that's that you can't do anything else with it but with reactive",
    "start": "2172579",
    "end": "2178609"
  },
  {
    "text": "streams if I have this as a stream in its own right I can do and I can do",
    "start": "2178609",
    "end": "2186619"
  },
  {
    "text": "other stuff with a stream and and I can reuse it so I can split streams and I can merge streams and I can reuse",
    "start": "2186619",
    "end": "2192680"
  },
  {
    "text": "strings which I can't do in Java I have",
    "start": "2192680",
    "end": "2199880"
  },
  {
    "text": "another implementation as well which uses reactor but it's basically the same thing it shows that you have a syntax",
    "start": "2199880",
    "end": "2204890"
  },
  {
    "text": "which is very similar to Java eight but the functionality is slightly different in this in this other case I'm using flat map and flatmap in reactive streams",
    "start": "2204890",
    "end": "2212480"
  },
  {
    "text": "has a very different concurrency model to flat map in Java eight streams and it's something to really be aware of",
    "start": "2212480",
    "end": "2218170"
  },
  {
    "text": "because it doesn't work if you think that it just works in a single threaded way okay so just to summarize the",
    "start": "2218170",
    "end": "2226160"
  },
  {
    "text": "reactive side of things I told you how it's going to give you a really quick demo of reactive and Java eight streams",
    "start": "2226160",
    "end": "2232880"
  },
  {
    "text": "and reactive streams look pretty much identical the syntax is very similar but",
    "start": "2232880",
    "end": "2237920"
  },
  {
    "text": "they're not the same thing and they don't work the same way so reactor streams you can work with multiple streams you can zip them you",
    "start": "2237920",
    "end": "2243049"
  },
  {
    "text": "can you have multiple consumers back pressure is a very very important part",
    "start": "2243049",
    "end": "2248330"
  },
  {
    "text": "of reactive streams and this is this is a good thing you treat back pressure as being like a first-class thing to consider like what",
    "start": "2248330",
    "end": "2254660"
  },
  {
    "text": "do I do if the if the producer is producing more than the consumer can consume do I drop messages do I block do",
    "start": "2254660",
    "end": "2262010"
  },
  {
    "text": "I send a message to the user saying stop pressing that button so much I mean that what do I do under the case where when I have that",
    "start": "2262010",
    "end": "2268970"
  },
  {
    "text": "pressure and has a very different concurrency model there's like threading going on these are covers sometimes",
    "start": "2268970",
    "end": "2274460"
  },
  {
    "text": "you're not aware of where as Java 8 streams are single threaded unless you tell them to be parallel and but the",
    "start": "2274460",
    "end": "2282590"
  },
  {
    "text": "point about the Java 9 reactive API is that you can expose your active API and",
    "start": "2282590",
    "end": "2288920"
  },
  {
    "text": "use whichever implementation you want to under the covers so in this case I used rx Java and reactor I could even be",
    "start": "2288920",
    "end": "2294800"
  },
  {
    "text": "using different jvm languages and but they're still talking in the same API so that's a really good benefit all right",
    "start": "2294800",
    "end": "2302810"
  },
  {
    "text": "oh good I've got 10 minutes that other Java 9 feature this is fine there",
    "start": "2302810",
    "end": "2308480"
  },
  {
    "text": "weren't many of them I think the most used Java 9 feature is going to be this convenience factory",
    "start": "2308480",
    "end": "2314690"
  },
  {
    "text": "methods for collections and I'll show you why let's take a look in the olden",
    "start": "2314690",
    "end": "2325220"
  },
  {
    "text": "days ie now and when we want to create a new list we say arrays door as lists in",
    "start": "2325220",
    "end": "2331730"
  },
  {
    "text": "the New World Order I can say list of I've just saved myself six characters",
    "start": "2331730",
    "end": "2338210"
  },
  {
    "text": "yay and the implementation of list is slightly different it is an immutable",
    "start": "2338210",
    "end": "2343580"
  },
  {
    "text": "list but I believe arrays door as list gives you an immutable list anyway it's just a slightly different type of a mutable list so that's great",
    "start": "2343580",
    "end": "2350570"
  },
  {
    "text": "most used feature no so let me show you why it's interesting let's pretend that we have a set instead now currently if",
    "start": "2350570",
    "end": "2358190"
  },
  {
    "text": "you want quite a set like the most succinct way of doing it is to create a list and then put it in a hash set and",
    "start": "2358190",
    "end": "2363620"
  },
  {
    "text": "then put it in a set now of course we don't have to do that anymore",
    "start": "2363620",
    "end": "2368859"
  },
  {
    "text": "tada and that's the immutable collection as well so this is a good thing and of",
    "start": "2369580",
    "end": "2375580"
  },
  {
    "text": "course you can make this narrower let's get rid of that and then in at some",
    "start": "2375580",
    "end": "2381490"
  },
  {
    "text": "point in the near future new features like Java 11 you might be able to say",
    "start": "2381490",
    "end": "2386650"
  },
  {
    "text": "that okay probably not for a constant",
    "start": "2386650",
    "end": "2392230"
  },
  {
    "text": "maybe for like a variable but um so you can see how we start to get rid of some of the boilerplate that everyone's",
    "start": "2392230",
    "end": "2397900"
  },
  {
    "text": "always moaning about in Java the other places is really interesting particularly cuz I used to work for",
    "start": "2397900",
    "end": "2404830"
  },
  {
    "text": "MongoDB and we used to create a lot of maps is this is just again this is code",
    "start": "2404830",
    "end": "2410140"
  },
  {
    "text": "that existed in this application I needed to initialize a map this way and this is in the production code not in the test code and it's not uncommon to",
    "start": "2410140",
    "end": "2416890"
  },
  {
    "text": "see this and it's ugly and horrible but it was the only way I had to do it but not anymore I could say map of entries I",
    "start": "2416890",
    "end": "2426750"
  },
  {
    "text": "can use my very favorite column selection mode map store entry I can use",
    "start": "2426780",
    "end": "2437370"
  },
  {
    "text": "the most used feature of IntelliJ IDEA replace await now I need to replace it",
    "start": "2437370",
    "end": "2444670"
  },
  {
    "text": "with that",
    "start": "2444670",
    "end": "2446940"
  },
  {
    "text": "and and so now this is how I create my my map it's a bit smaller it's not like",
    "start": "2459910",
    "end": "2466089"
  },
  {
    "text": "those smaller but it is a bit smaller a bit more succinct what's really nice about it is if you've got fewer than ten",
    "start": "2466089",
    "end": "2473490"
  },
  {
    "text": "get rid of conflict you've got fewer than ten you can say",
    "start": "2473490",
    "end": "2479200"
  },
  {
    "text": "map off and you can get rid of all of this I happen to call them flick our",
    "start": "2479200",
    "end": "2494230"
  },
  {
    "text": "IntelliJ don't let me down now oh you hate me so much",
    "start": "2494230",
    "end": "2500289"
  },
  {
    "text": "fine let's use the most used feature I",
    "start": "2500289",
    "end": "2505140"
  },
  {
    "text": "told you it's an EIP also I'm using a",
    "start": "2508259",
    "end": "2515890"
  },
  {
    "text": "surface",
    "start": "2515890",
    "end": "2518278"
  },
  {
    "text": "so away all right so and then I can just",
    "start": "2525950",
    "end": "2532830"
  },
  {
    "text": "give key value pairs if it's a fewer than 10 so you can see I've got key 9 there so that's quite nice so this would",
    "start": "2532830",
    "end": "2540270"
  },
  {
    "text": "have been super useful when I was working at MongoDB three years ago and it's still not out yet in Java 9 but and",
    "start": "2540270",
    "end": "2546540"
  },
  {
    "text": "it's not quite as pretty as perhaps the groovy way of creating maps but it is an enormous step in the right direction so",
    "start": "2546540",
    "end": "2551730"
  },
  {
    "text": "working with collections is just going to be an awful lot easier in Java 9 and I honestly this is the thing I think I'm",
    "start": "2551730",
    "end": "2556830"
  },
  {
    "text": "going to use most from Java 9 more than anything else report Oracle developers they work",
    "start": "2556830",
    "end": "2562200"
  },
  {
    "text": "really hard on Java 9 for seven years and I'm like oh I really like your collection methods it's great if you use",
    "start": "2562200",
    "end": "2568290"
  },
  {
    "text": "jigsaw no we dope you Tilley and right private methods on interfaces this might",
    "start": "2568290",
    "end": "2573540"
  },
  {
    "text": "seem really stupid because what is the point of having an interface which defines your API and then having a",
    "start": "2573540",
    "end": "2579120"
  },
  {
    "text": "private method on there now let me show you again this is real code which was",
    "start": "2579120",
    "end": "2584550"
  },
  {
    "text": "actually in Maya predation and I have to have duplicate code without being able",
    "start": "2584550",
    "end": "2589920"
  },
  {
    "text": "to extract it into a reusable method because in Java 8 as you know you can have static methods on interfaces and",
    "start": "2589920",
    "end": "2595230"
  },
  {
    "text": "default methods on interfaces so interfaces don't just define them as a signature they actually have behavior in",
    "start": "2595230",
    "end": "2600360"
  },
  {
    "text": "them so you could potentially in Java 8 have duplicate code I could of course",
    "start": "2600360",
    "end": "2606600"
  },
  {
    "text": "have extracted this into a method get value for field and sat down and but I",
    "start": "2606600",
    "end": "2614910"
  },
  {
    "text": "didn't want this to be part of my interface so I don't want this to be a public method and in Java 9 it doesn't",
    "start": "2614910",
    "end": "2621300"
  },
  {
    "text": "have to be ok so it's super useful for static methods and for default methods otherwise it's",
    "start": "2621300",
    "end": "2627780"
  },
  {
    "text": "really stupid to have a private method or interface and this is part of a",
    "start": "2627780",
    "end": "2634460"
  },
  {
    "text": "bigger jet called milling project coin and there's loads of little bits and pieces in this about better ways of",
    "start": "2634460",
    "end": "2640530"
  },
  {
    "text": "working with generics and anonymous inner classes and some other things which just tightens up some of the",
    "start": "2640530",
    "end": "2645600"
  },
  {
    "text": "syntax new methods on the streams API so Java 8 streams can have let's turn this",
    "start": "2645600",
    "end": "2653130"
  },
  {
    "text": "back into Java 8 streams think that and this as well Java edge",
    "start": "2653130",
    "end": "2673299"
  },
  {
    "text": "streams Java a streams can be infinite streams the same less reactive streams are designed to the infinite streams Java 8 streams communes in extremes I do",
    "start": "2673299",
    "end": "2680289"
  },
  {
    "text": "not recommend this this is very difficult to terminate streams in Java 8 plate those are very it's very difficult",
    "start": "2680289",
    "end": "2685479"
  },
  {
    "text": "to say I'm done now pleased like let's get over it and now in Java 9 there is a",
    "start": "2685479",
    "end": "2691839"
  },
  {
    "text": "way of saying take while so take while some predicate is true so let's assume",
    "start": "2691839",
    "end": "2698229"
  },
  {
    "text": "that our file of of tweets let's say it was ordered and each string started with",
    "start": "2698229",
    "end": "2703329"
  },
  {
    "text": "like a number so let's say I want to take the first anything which begins with 1 through 5 then I could say I've",
    "start": "2703329",
    "end": "2710710"
  },
  {
    "text": "started it starts with so I'm going to",
    "start": "2710710",
    "end": "2719410"
  },
  {
    "text": "take while and it doesn't begin with 6 and then when I get to the first entry which begins at 6 I just stop the stream",
    "start": "2719410",
    "end": "2725380"
  },
  {
    "text": "and it terminates it I could potentially combine this with drop while and I can",
    "start": "2725380",
    "end": "2731769"
  },
  {
    "text": "say a start starts with I don't - so I can take everything from like 3 through",
    "start": "2731769",
    "end": "2737440"
  },
  {
    "text": "5 so this is going to be I think this could be really useful if you're working",
    "start": "2737440",
    "end": "2742479"
  },
  {
    "text": "with infinite streams it's particularly useful if you're working with ordered streams obviously because you want to be able to say like while like it's not the",
    "start": "2742479",
    "end": "2749200"
  },
  {
    "text": "first set of values and ignore the last set of values you can you can use it to",
    "start": "2749200",
    "end": "2754420"
  },
  {
    "text": "cheat and do some other stuff so I had a running field so running equals true and",
    "start": "2754420",
    "end": "2761859"
  },
  {
    "text": "then I can set running equals false when",
    "start": "2761859",
    "end": "2767769"
  },
  {
    "text": "I actually want it to be false and then my stream will terminate so I can do that also it should be an atomic boolean",
    "start": "2767769",
    "end": "2775180"
  },
  {
    "text": "because it's multi-threaded and black but you get the idea it's possible to terminate things with external and",
    "start": "2775180",
    "end": "2780690"
  },
  {
    "text": "criteria as well so that's really useful and in my opinion should have been there from the beginning but you know these",
    "start": "2780690",
    "end": "2787509"
  },
  {
    "text": "things are difficult to see and set walking API this is everyone",
    "start": "2787509",
    "end": "2792789"
  },
  {
    "text": "knows it creating or getting a stack trace is quite expensive right and now we can do things in a more lazy way now",
    "start": "2792789",
    "end": "2798009"
  },
  {
    "text": "that we have things like lambdas and streams and stuff so that we can we don't have to get the whole stack trade",
    "start": "2798009",
    "end": "2803289"
  },
  {
    "text": "and then do something with it we can kind of build it in a lazy way and I",
    "start": "2803289",
    "end": "2808539"
  },
  {
    "text": "don't know all of the ins and outs of it but I've only played it a little bit but",
    "start": "2808539",
    "end": "2814420"
  },
  {
    "text": "what you do is you get a stack Walker and then you get you end up with",
    "start": "2814420",
    "end": "2822609"
  },
  {
    "text": "slightly complicated syntax stack frame stream which is a real stream I put this",
    "start": "2822609",
    "end": "2829359"
  },
  {
    "text": "down here so I can do the sorts of operations I expect to be able to do so",
    "start": "2829359",
    "end": "2834459"
  },
  {
    "text": "when I filter it so I could say I don't know I want to filter out anything where my set frame starts a stack frame get",
    "start": "2834459",
    "end": "2842499"
  },
  {
    "text": "class name starts with I don't know like my package name and then maybe I want to",
    "start": "2842499",
    "end": "2849699"
  },
  {
    "text": "be something like count how many instances of my classes are in that",
    "start": "2849699",
    "end": "2855130"
  },
  {
    "text": "stack frame I mean I'm not sure exactly what you might want to do but the point is that you can that's not what I wanted",
    "start": "2855130",
    "end": "2861849"
  },
  {
    "text": "to do and so you can do things like you",
    "start": "2861849",
    "end": "2870549"
  },
  {
    "text": "can basically do queries on the stack frame as it is and it's not as expensive",
    "start": "2870549",
    "end": "2875890"
  },
  {
    "text": "as it was for of course if you do for each then if it's as expensive as",
    "start": "2875890",
    "end": "2882249"
  },
  {
    "text": "getting the stack frame to begin with but it's quite an interesting thing and it doesn't have to be in an or in an error message it could be it could be at",
    "start": "2882249",
    "end": "2889479"
  },
  {
    "text": "any point in your code so if you're doing lower level stuff you might want to figure out where you are what happened and so forth a multi release",
    "start": "2889479",
    "end": "2897939"
  },
  {
    "text": "jar files this is like a big topic in its own right I had a bit of a play with us from now on potentially a library",
    "start": "2897939",
    "end": "2904779"
  },
  {
    "text": "might give you a single jar file which is for both Java 9 and pre Java 9",
    "start": "2904779",
    "end": "2909910"
  },
  {
    "text": "versions just in a single jar file so you know that at the moment if you're using Java 8 some of your libraries",
    "start": "2909910",
    "end": "2915369"
  },
  {
    "text": "might say use this version for Java 8 and use this version for pre Java 8 well from now on you just it will",
    "start": "2915369",
    "end": "2921970"
  },
  {
    "text": "the Java file itself will have Java nine specific code if you're running on Java 9 otherwise it will use the Java 8 and",
    "start": "2921970",
    "end": "2929380"
  },
  {
    "text": "the 4 code note that this only works Java 9 pre Java 9 you can't do the Java",
    "start": "2929380",
    "end": "2935380"
  },
  {
    "text": "8 version and a Java 9 version which is kind of sad but going forward you'll be able have a Java 9 version of Java 10",
    "start": "2935380",
    "end": "2940990"
  },
  {
    "text": "version Java 11 version so this is kind of cool I haven't seen anyone using it yet I heard of it the play it's not",
    "start": "2940990",
    "end": "2946720"
  },
  {
    "text": "impossible to work with there are some best practice ideas that the API should",
    "start": "2946720",
    "end": "2952569"
  },
  {
    "text": "be the same between the different versions so I'm not sure if this is a solution to the the reactive streams API",
    "start": "2952569",
    "end": "2958900"
  },
  {
    "text": "problem or not but it's potentially their process for API updates I'm kind",
    "start": "2958900",
    "end": "2964780"
  },
  {
    "text": "of really out of time so I'm just going to give a quick show of what this looks like and the main thing here is that you",
    "start": "2964780",
    "end": "2975400"
  },
  {
    "text": "can get your own kid so you get your process ID now which is quite cool now so I think that's the most useful thing",
    "start": "2975400",
    "end": "2980890"
  },
  {
    "text": "here there's loads of other stuff around being able to build up command line stuff and that's great but I think probably the most useful thing is the",
    "start": "2980890",
    "end": "2986530"
  },
  {
    "text": "ability to get your amp it updated deprecation this is kind of cool this is",
    "start": "2986530",
    "end": "2992890"
  },
  {
    "text": "all cool otherwise I want to put it in here and threads here we go now when you see deprecated methods you",
    "start": "2992890",
    "end": "3000300"
  },
  {
    "text": "can they can also be annotated with when they were deprecated so Java 1.2 and whether they're going away or not okay",
    "start": "3000300",
    "end": "3007170"
  },
  {
    "text": "so that's kind of cool so you can get an idea of is this deprecated ml you shouldn't really use it or this is",
    "start": "3007170",
    "end": "3013470"
  },
  {
    "text": "deprecated and if you don't stop using it it will go away and your code will break so this is really useful for when",
    "start": "3013470",
    "end": "3019200"
  },
  {
    "text": "we're looking at other library if you're working on library code of your own then do start using this because it's super",
    "start": "3019200",
    "end": "3024359"
  },
  {
    "text": "useful for for your users and what else I keep moving the slides on so fast that",
    "start": "3024359",
    "end": "3030450"
  },
  {
    "text": "you can't take photos I feel ready sorry you can generate html5 Java doc yay we",
    "start": "3030450",
    "end": "3036150"
  },
  {
    "text": "brought Java doc into the 21st century only 17 years too late",
    "start": "3036150",
    "end": "3041359"
  },
  {
    "text": "this is great if you generate Java doc of course this is kind of useful to know mostly we will be reading Java doc so",
    "start": "3041359",
    "end": "3047430"
  },
  {
    "text": "it's kind of nice to know that our Java doc won't be quite as ugly most importantly this allows us to have a Java doc search",
    "start": "3047430",
    "end": "3053849"
  },
  {
    "text": "look and it's got type-ahead as well so when you start typing in there it says",
    "start": "3053849",
    "end": "3060089"
  },
  {
    "text": "what do you mean I don't know I suppose Java dot util dot whatever and I mean",
    "start": "3060089",
    "end": "3066089"
  },
  {
    "text": "this so this is the actual Java 9 Java doc and I've been using the search feature on here and it is super useful",
    "start": "3066089",
    "end": "3071940"
  },
  {
    "text": "it's really cool oh what a shame I don't have time to talk about the repple and if you're interested in the raffle",
    "start": "3071940",
    "end": "3078539"
  },
  {
    "text": "there's a tutorial here it tells you how to get started it tells you the sorts of things that you can do from the raffle if you have used a record before and you",
    "start": "3078539",
    "end": "3085559"
  },
  {
    "text": "kind of know what you want to do with a referal and particularly how you wanted to integrate with the IDE do tell us how",
    "start": "3085559",
    "end": "3091769"
  },
  {
    "text": "you want IntelliJ IDEA integrate with the repple because we haven't done it yet and we really do want to know and",
    "start": "3091769",
    "end": "3096839"
  },
  {
    "text": "use cases from from you guys ok in summary I'm sorry I made you late for",
    "start": "3096839",
    "end": "3102930"
  },
  {
    "text": "lunch the pain of Java 9 your code might break and so that my recommendation is",
    "start": "3102930",
    "end": "3110219"
  },
  {
    "text": "do download an early access of Java 9 do try it out now figure out which things",
    "start": "3110219",
    "end": "3115499"
  },
  {
    "text": "break because it's probably not your code it might be your infrastructure it might be your CI server it might be Gradle it might be something else it",
    "start": "3115499",
    "end": "3122459"
  },
  {
    "text": "might be a library that you're dependent upon for this demo I had to migrate from Marketo to point seven point eight to",
    "start": "3122459",
    "end": "3128579"
  },
  {
    "text": "mockito to point eight point nine because it was dependent on a library called bite buddy which wasn't working with jigsaw with the version that I was",
    "start": "3128579",
    "end": "3135390"
  },
  {
    "text": "using so download it and see what's going to stop working is probably not your code it's probably something else",
    "start": "3135390",
    "end": "3141599"
  },
  {
    "text": "then the important thing here is that if you find a library that isn't working with it or you find a tool it isn't",
    "start": "3141599",
    "end": "3146729"
  },
  {
    "text": "working with it do tell the library maintainer Zoar the tool vendor because we don't always know what weird things",
    "start": "3146729",
    "end": "3153329"
  },
  {
    "text": "you're doing in your system and we need to know like how how the pain that you're feeling so that we can fix it and",
    "start": "3153329",
    "end": "3159630"
  },
  {
    "text": "it sounds unfair to put the work on to you guys but when I worked at this library is like a hundred classes it's",
    "start": "3159630",
    "end": "3165690"
  },
  {
    "text": "this tiny library including tests but people were using in all sorts of odd ways and there's no way that we can test",
    "start": "3165690",
    "end": "3171180"
  },
  {
    "text": "it in like a million different environments it's just not possible the reason why your code might break is that",
    "start": "3171180",
    "end": "3176519"
  },
  {
    "text": "there's a lot of stuff that's going away deprecated stuff is being deleted in Java 9 whoo",
    "start": "3176519",
    "end": "3182420"
  },
  {
    "text": "and there's a lot of stuff that the command-line so garbage collection flags",
    "start": "3182420",
    "end": "3188779"
  },
  {
    "text": "and launch time JRE version selection which I'm not sure I've ever used but lots of things that you can use the",
    "start": "3188779",
    "end": "3194900"
  },
  {
    "text": "command line is just basically gone away encapsulate most internal API s that's",
    "start": "3194900",
    "end": "3200930"
  },
  {
    "text": "the thing where some missed whatever they all go away so it says encapsulate which sounds nice what it means is it's",
    "start": "3200930",
    "end": "3206420"
  },
  {
    "text": "gone away you can't get to it and your codes going to break and they've removed a bunch of stuff that you probably weren't using anyway oh yes deprecated",
    "start": "3206420",
    "end": "3214069"
  },
  {
    "text": "the after API someone asked me on Mondays what's the replacement for applet HTML not sure and there will be",
    "start": "3214069",
    "end": "3224569"
  },
  {
    "text": "some unexpected behavior I believe so there's things here these are the sorts of things that these are sort of changes",
    "start": "3224569",
    "end": "3232039"
  },
  {
    "text": "that people make think you know that won't impact anybody and it'll turn out that somebody somewhere is doing something weird like looking at the GC",
    "start": "3232039",
    "end": "3239690"
  },
  {
    "text": "log files and like pausing the string values to get particular errors to figure out what went wrong and they've",
    "start": "3239690",
    "end": "3245240"
  },
  {
    "text": "changed a lot of the logging so they've changed including some of the love messages and stuff so some of that stuff",
    "start": "3245240",
    "end": "3250339"
  },
  {
    "text": "might impact odd things that you are doing for me the number one thing here I think well another thing is that g1 is",
    "start": "3250339",
    "end": "3256460"
  },
  {
    "text": "now the default garbage collector I don't think that's a big deal because I think if you care about garbage collection you've probably tuned your",
    "start": "3256460",
    "end": "3262759"
  },
  {
    "text": "systems within an inch of its life and you don't care about the defaults and if you are if you don't care about the",
    "start": "3262759",
    "end": "3268009"
  },
  {
    "text": "garbage collector you're using defaults and you don't care so I think it's not a problem but be aware of it the one thing",
    "start": "3268009",
    "end": "3273619"
  },
  {
    "text": "which I think is going to bite people in the arse and not realize it is new version string scheme Java 9 is",
    "start": "3273619",
    "end": "3279230"
  },
  {
    "text": "officially Java 9 not Java 1.9 like Java 8 with Java 1.8 and when you get the",
    "start": "3279230",
    "end": "3284569"
  },
  {
    "text": "version string it comes back as 9 and you'll see that some of the tools that you use including earlier versions of",
    "start": "3284569",
    "end": "3290059"
  },
  {
    "text": "Gradle and earlier versions I think of IntelliJ will tell you I have no idea what this version 9 is or it might tell",
    "start": "3290059",
    "end": "3296809"
  },
  {
    "text": "you they've gotten out a ray out of index exception as it tries to do one point something and it's not there so I",
    "start": "3296809",
    "end": "3303500"
  },
  {
    "text": "think this is going to bite way more people than anyone realizes to be aware of it if you are doing any version",
    "start": "3303500",
    "end": "3309140"
  },
  {
    "text": "string pausing in your application it's not going to work in Java 9 Java 9 is",
    "start": "3309140",
    "end": "3314569"
  },
  {
    "text": "still evolving its evolving even now Oliver in June it was supposed to be released next month and the API is still changing gifs are still",
    "start": "3314569",
    "end": "3321410"
  },
  {
    "text": "changing a lot mostly for the better those module info files that I showed you when I first did this application",
    "start": "3321410",
    "end": "3327470"
  },
  {
    "text": "which is only February March they were massive I had to define like every single package I was using and now",
    "start": "3327470",
    "end": "3332930"
  },
  {
    "text": "they're much much smaller and much easier to manage so still evolving still getting better IntelliJ IDEA is also still evolving and",
    "start": "3332930",
    "end": "3339710"
  },
  {
    "text": "we need your help as and the Oracle guys on the JDK and the library developers need the help of real developers to tell",
    "start": "3339710",
    "end": "3347150"
  },
  {
    "text": "us what pain you're feeling or what features you want to see to help us give you what you need and Java 9 I've",
    "start": "3347150",
    "end": "3353480"
  },
  {
    "text": "actually raised like two or three bugs from Java 9 I thought I was being stupid and I broke something it turns out I was",
    "start": "3353480",
    "end": "3359119"
  },
  {
    "text": "doing something fairly ordinary but hadn't been expected so I've raised bugs on the JDK and the JDK has changed",
    "start": "3359119",
    "end": "3365299"
  },
  {
    "text": "accordingly so they're still trying to do that now better to do it now than before it's actually officially released",
    "start": "3365299",
    "end": "3370599"
  },
  {
    "text": "it's worth it don't mush into modular ization you don't have to use jigsaw to",
    "start": "3370599",
    "end": "3375859"
  },
  {
    "text": "use Java 9 and I don't recommend modular eyes in your code unless you have to for new applications I think it's a good",
    "start": "3375859",
    "end": "3382609"
  },
  {
    "text": "idea to think in a modular way because I think your design will be simpler and cleaner and it's kind of the way forward",
    "start": "3382609",
    "end": "3388009"
  },
  {
    "text": "but if you're working in a fairly mature application I would not recommend making",
    "start": "3388009",
    "end": "3395029"
  },
  {
    "text": "major changes like motorizing your code is the same as deciding to migrate your monolith to microservices just for shits",
    "start": "3395029",
    "end": "3401779"
  },
  {
    "text": "and giggles which we've all done let's be fair plan so yeah it might not be for you do be aware that it's not a trivial",
    "start": "3401779",
    "end": "3409039"
  },
  {
    "text": "thing we access streams are not the same as Java 8 streams they look the same but they have different behavior and they're",
    "start": "3409039",
    "end": "3414529"
  },
  {
    "text": "designed for different news cases the game jigsaw in particular encourages",
    "start": "3414529",
    "end": "3420470"
  },
  {
    "text": "good design and capsulation separation concerns that's great Java 9 encourages",
    "start": "3420470",
    "end": "3426079"
  },
  {
    "text": "new ways of working particularly via the repple via reactive streams and things like that so that's good it's kind of",
    "start": "3426079",
    "end": "3431539"
  },
  {
    "text": "it's moving us forward is helping us to evolve for me it's not like the most",
    "start": "3431539",
    "end": "3436789"
  },
  {
    "text": "compelling tag line Java 9 just a bit nicer to write code but if that's actually the most compelling thing",
    "start": "3436789",
    "end": "3442759"
  },
  {
    "text": "though it will be easier for us to create collections there will be slightly less boilerplate",
    "start": "3442759",
    "end": "3448190"
  },
  {
    "text": "we'll be things like being able to get the kids for our processes and stuff oh I think these things would just make our",
    "start": "3448190",
    "end": "3453829"
  },
  {
    "text": "life a little bit easier all the slides all the resources all the links to where",
    "start": "3453829",
    "end": "3459200"
  },
  {
    "text": "to download Java 9 all the links to pretty much everything is available from this link this URL here so please do",
    "start": "3459200",
    "end": "3466849"
  },
  {
    "text": "take a look and because I don't have any time for questions service or e thank",
    "start": "3466849",
    "end": "3471950"
  },
  {
    "text": "you very much",
    "start": "3471950",
    "end": "3474520"
  },
  {
    "text": "you",
    "start": "3477819",
    "end": "3479880"
  }
]