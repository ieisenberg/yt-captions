[
  {
    "start": "0",
    "end": "27000"
  },
  {
    "text": "thank you",
    "start": "6180",
    "end": "8839"
  },
  {
    "text": "okay so we're going to talk about structured concurrency in Java uh specifically what it is and why it is",
    "start": "11360",
    "end": "18420"
  },
  {
    "text": "important um okay so let's get started uh I'm balconstar Raul I work as ID chapter",
    "start": "18420",
    "end": "23520"
  },
  {
    "text": "lead at ING Bank um project Loom okay so project Loom is",
    "start": "23520",
    "end": "29340"
  },
  {
    "start": "27000",
    "end": "115000"
  },
  {
    "text": "one of the most important projects at open jdk and the purpose of loom is",
    "start": "29340",
    "end": "35820"
  },
  {
    "text": "supporting easy to use high throughput lightweight concurrency and new programming models for it so the focus",
    "start": "35820",
    "end": "41700"
  },
  {
    "text": "is a lot on concurrency specifically on lightweight concurrency also something that gives high throughput and which is",
    "start": "41700",
    "end": "47940"
  },
  {
    "text": "easy to easy to use okay there are three main features in this uh virtual",
    "start": "47940",
    "end": "54840"
  },
  {
    "text": "threads structured concurrency and scope values um the focus of this talk is going to be",
    "start": "54840",
    "end": "60239"
  },
  {
    "text": "about structured concurrency and in order to get there we'll get a little introduction of virtual threads but",
    "start": "60239",
    "end": "66659"
  },
  {
    "text": "scope values are out of scope we'll not discuss that um and uh yeah the the status as of now so",
    "start": "66659",
    "end": "74820"
  },
  {
    "text": "what is envisioned for Java 21 is that virtual threads will be finalized so",
    "start": "74820",
    "end": "80520"
  },
  {
    "text": "they are out of preview uh such a concurrency and scope values uh will be in preview so a lot of the code that you",
    "start": "80520",
    "end": "85680"
  },
  {
    "text": "will see yeah you can use it with uh the Early Access bills of of java 21.",
    "start": "85680",
    "end": "91920"
  },
  {
    "text": "um and the talk will be roughly 12 into three parts so we start with virtual threads first",
    "start": "91920",
    "end": "97939"
  },
  {
    "text": "and then we'll go a little deeper into structured concurrency and at the end we",
    "start": "97939",
    "end": "103799"
  },
  {
    "text": "have some examples where we compare a complete World future API with structured concurrency API and that will",
    "start": "103799",
    "end": "110579"
  },
  {
    "text": "be the it's the biggest part of this of this talk",
    "start": "110579",
    "end": "115159"
  },
  {
    "start": "115000",
    "end": "233000"
  },
  {
    "text": "okay to start with virtual threads we have to go to First platform threads so platform threads are the traditional",
    "start": "115920",
    "end": "121200"
  },
  {
    "text": "threads which we know as threads from java 1.1 and they provide an abstraction over",
    "start": "121200",
    "end": "127020"
  },
  {
    "text": "operating system threads so what that means is if your application requires a new thread that application has to go to",
    "start": "127020",
    "end": "134099"
  },
  {
    "text": "OS and ask for a new thread to be created now OS threads are let's say resource uh intensive uh they",
    "start": "134099",
    "end": "141840"
  },
  {
    "text": "take a relatively large amount of memory um and also it's rather slow process to create a new OS thread and therefore",
    "start": "141840",
    "end": "149340"
  },
  {
    "text": "what happens is that uh if you use thread per request model for your",
    "start": "149340",
    "end": "154860"
  },
  {
    "text": "application it might provide you limited scalability so because there are so many number of threads you can create uh and",
    "start": "154860",
    "end": "160739"
  },
  {
    "text": "therefore if you are using the thread per request uh meaning if a new request",
    "start": "160739",
    "end": "166920"
  },
  {
    "text": "to your application is creating a new thread to process it then you will have scalability which would be still high",
    "start": "166920",
    "end": "174239"
  },
  {
    "text": "number of threads but but let's say uh Limited",
    "start": "174239",
    "end": "180440"
  },
  {
    "text": "and because of the the the the nature of the platform threads that they require",
    "start": "181140",
    "end": "187040"
  },
  {
    "text": "so much memory and also it is resource intensive task to create them",
    "start": "187040",
    "end": "192300"
  },
  {
    "text": "we tend to pull them so we we put them in pools where you don't have to create them again you know once they once they",
    "start": "192300",
    "end": "197700"
  },
  {
    "text": "are requested so you can take them from the from the pool um virtual trace on the other hand are",
    "start": "197700",
    "end": "204239"
  },
  {
    "text": "lightweight user threads lightweight because they require significantly less memory than than platform threads",
    "start": "204239",
    "end": "210180"
  },
  {
    "text": "and because they require so less memory uh you can just create them in abundance so",
    "start": "210180",
    "end": "215940"
  },
  {
    "text": "thousands or even millions that makes them highly scalable also they don't really require your application to go to",
    "start": "215940",
    "end": "222480"
  },
  {
    "text": "operating system and there is no need to pull them because they are cheap you can just",
    "start": "222480",
    "end": "227879"
  },
  {
    "text": "create them whenever you need them and you can just throw away when you don't need them but okay how do you create a new thread",
    "start": "227879",
    "end": "234420"
  },
  {
    "start": "233000",
    "end": "415000"
  },
  {
    "text": "I think you all probably have uh done this at least in your now uh",
    "start": "234420",
    "end": "241379"
  },
  {
    "text": "example applications where you create a new thread by passing a runnable to it",
    "start": "241379",
    "end": "248180"
  },
  {
    "text": "uh so in this case let me just print the current thread right so if I start this",
    "start": "248640",
    "end": "254400"
  },
  {
    "text": "thread um",
    "start": "254400",
    "end": "258199"
  },
  {
    "text": "yeah okay so if I run this method so actually how do I run it I",
    "start": "260040",
    "end": "265320"
  },
  {
    "text": "have a junit which just executes this there's not really a junit test but it is just a wrapper to run this method so",
    "start": "265320",
    "end": "272100"
  },
  {
    "text": "if I run this uh this creates a new thread okay with",
    "start": "272100",
    "end": "278280"
  },
  {
    "text": "the new thread API you are still able to create new thread by using",
    "start": "278280",
    "end": "284699"
  },
  {
    "text": "um thread dot off platform",
    "start": "284699",
    "end": "292580"
  },
  {
    "text": "dot start so that also takes runnable you don't need to call start explicitly so if I run this you will see the same",
    "start": "294120",
    "end": "300240"
  },
  {
    "text": "thing basically it creates a new thread now how do we create virtual thread",
    "start": "300240",
    "end": "305520"
  },
  {
    "text": "you probably would have guessed from the previous call so you do thread dot of virtual and then you do start again pass",
    "start": "305520",
    "end": "312180"
  },
  {
    "text": "it a runnable and I'm going to do the same thing",
    "start": "312180",
    "end": "317340"
  },
  {
    "text": "thread dot current thread okay uh if I run this we will see a",
    "start": "317340",
    "end": "325880"
  },
  {
    "text": "H sorry I run the wrong method so if I run this one",
    "start": "326940",
    "end": "332639"
  },
  {
    "text": "you will see virtual set being created now there is more",
    "start": "332639",
    "end": "338000"
  },
  {
    "text": "there is more to this API so uh there's also a shorthand method so you can just do thread dot start virtual",
    "start": "338280",
    "end": "344820"
  },
  {
    "text": "thread does the same thing and you can also use an Executor service",
    "start": "344820",
    "end": "352500"
  },
  {
    "text": "well um so if I use a new executor",
    "start": "352500",
    "end": "358979"
  },
  {
    "text": "with executors DOT new show thread but task executed so um",
    "start": "358979",
    "end": "366000"
  },
  {
    "text": "this will basically create a new new virtual thread every time you request it so there is no",
    "start": "366000",
    "end": "371940"
  },
  {
    "text": "pulling involved um and I can do the same thing so use the executor",
    "start": "371940",
    "end": "377460"
  },
  {
    "text": "dot submit and that creates a new virtual thread uh it takes a runnable so I can basically",
    "start": "377460",
    "end": "384360"
  },
  {
    "text": "just do the same thing um",
    "start": "384360",
    "end": "389520"
  },
  {
    "text": "and that is exactly same as doing uh the earlier operation I can have multiple of",
    "start": "389520",
    "end": "394680"
  },
  {
    "text": "them so if I see here uh then I get multiple virtual threads",
    "start": "394680",
    "end": "401160"
  },
  {
    "text": "and basically as I said earlier they are lightweight so you can create thousands of millions but we're gonna not gonna do",
    "start": "401160",
    "end": "406319"
  },
  {
    "text": "that right now uh presentation",
    "start": "406319",
    "end": "412080"
  },
  {
    "text": "okay let's continue and I think I will have to end the presentation whatever time I",
    "start": "412080",
    "end": "417660"
  },
  {
    "start": "415000",
    "end": "508000"
  },
  {
    "text": "switch to code but okay we'll do that um okay so what we see here is you have",
    "start": "417660",
    "end": "423300"
  },
  {
    "text": "a bunch of virtual threads which are connected to one um platform thread what that means is uh",
    "start": "423300",
    "end": "430560"
  },
  {
    "text": "virtual thread on its own cannot execute anything so it has to be associated with a platform thread to execute something",
    "start": "430560",
    "end": "438960"
  },
  {
    "text": "and that that process is called as mounting a virtual thread onto uh",
    "start": "438960",
    "end": "444120"
  },
  {
    "text": "platform thread or Carrier thread so uh and that is being done by a virtual thread scheduler so there is a specific",
    "start": "444120",
    "end": "449819"
  },
  {
    "text": "scheduler for it what that does it if a virtual thread requires platform thread it mounts that onto the platform thread",
    "start": "449819",
    "end": "455580"
  },
  {
    "text": "and when it does not require platform thread for example if there's a blocking operation being carried out and the",
    "start": "455580",
    "end": "461699"
  },
  {
    "text": "virtual set is just waiting then it unmounts it from the platform thread and that mounting and mounting is done by a",
    "start": "461699",
    "end": "467520"
  },
  {
    "text": "virtual thread scheduler and it uses a dedicated folk joint pool",
    "start": "467520",
    "end": "472620"
  },
  {
    "text": "that's why in the example here you see fork joint pool uh been used and what you see in the IDS",
    "start": "472620",
    "end": "479940"
  },
  {
    "text": "of these virtual threads is that this is the virtual thread ID and this is basically the carrier status platform",
    "start": "479940",
    "end": "486360"
  },
  {
    "text": "that it is using and one interesting thing that we see here is that because I created three of them",
    "start": "486360",
    "end": "491880"
  },
  {
    "text": "uh you see the first virtual thread is using this platform thread worker one",
    "start": "491880",
    "end": "497580"
  },
  {
    "text": "with the second oh yeah I have to end the",
    "start": "497580",
    "end": "504680"
  },
  {
    "text": "um and the slideshow switch to code okay so what you see here is that",
    "start": "504720",
    "end": "511440"
  },
  {
    "start": "508000",
    "end": "547000"
  },
  {
    "text": "we created three virtual threads uh and this part is the platform thread or the",
    "start": "511440",
    "end": "517200"
  },
  {
    "text": "carrier thread and this part is the virtual thread so this is basically an ID which puts both ideas together uh",
    "start": "517200",
    "end": "524339"
  },
  {
    "text": "what we see is that the first virtual thread is using uh one platform thread",
    "start": "524339",
    "end": "529620"
  },
  {
    "text": "but the second and third virtual threads are using the same platform thread so that's what basically having multiple",
    "start": "529620",
    "end": "535620"
  },
  {
    "text": "virtual threads being mounted and unmounted from the same platform thread",
    "start": "535620",
    "end": "542580"
  },
  {
    "text": "um okay let me go back to presentation mode",
    "start": "542580",
    "end": "549500"
  },
  {
    "start": "547000",
    "end": "653000"
  },
  {
    "text": "uh so yeah here you see another example where you have four virtual threads and",
    "start": "549839",
    "end": "556580"
  },
  {
    "text": "basically they are uh let's say they do some",
    "start": "556940",
    "end": "562320"
  },
  {
    "text": "processing and then they have some waiting time the waiting time is represented here in Gray and the processing is then in green so what you",
    "start": "562320",
    "end": "569640"
  },
  {
    "text": "see is that there is a waiting time some processing time for all four of these but the way they are processing is done",
    "start": "569640",
    "end": "575240"
  },
  {
    "text": "they are able to basically utilize the same platform thread uh this way",
    "start": "575240",
    "end": "580620"
  },
  {
    "text": "typically the gray part is like really big because that's a imagine a network i",
    "start": "580620",
    "end": "586320"
  },
  {
    "text": "o that requires hundreds of milliseconds and the green part is really small like some nanoseconds so you can imagine the",
    "start": "586320",
    "end": "592860"
  },
  {
    "text": "the scale of uh let's say waiting time is Thousands or millions millions of times bigger than the processing time so",
    "start": "592860",
    "end": "598800"
  },
  {
    "text": "a platform that can basically handle uh thousands of uh virtual thread and that",
    "start": "598800",
    "end": "604260"
  },
  {
    "text": "gives the high scalability part uh so how do you use Virtual threads you",
    "start": "604260",
    "end": "610680"
  },
  {
    "text": "you use Virtual threads to model your tasks right you don't uh use them as platform threads because they are easy",
    "start": "610680",
    "end": "618420"
  },
  {
    "text": "to easy to create like they are cheap so you basically uh the best way to use them is to submit a task or a business",
    "start": "618420",
    "end": "625560"
  },
  {
    "text": "task to it and you can put these tasks together and you can structure them in",
    "start": "625560",
    "end": "630660"
  },
  {
    "text": "uh it's a logical way that your business requirements uh depict and that that",
    "start": "630660",
    "end": "635820"
  },
  {
    "text": "would be the uh let's say best way to use Virtual threads",
    "start": "635820",
    "end": "641000"
  },
  {
    "text": "um also because that would represent your business logic in the uh what do you say in an easy to read way now the",
    "start": "642540",
    "end": "649920"
  },
  {
    "text": "the way of structuring these these tasks are virtual threads is called a structured concurrency so that's how",
    "start": "649920",
    "end": "655079"
  },
  {
    "start": "653000",
    "end": "882000"
  },
  {
    "text": "virtual threads enable structured concurrency right with platform threads you still have to think about how are you going to",
    "start": "655079",
    "end": "661320"
  },
  {
    "text": "manage your pools um but with virtual threads you can only focus on your business logic uh create",
    "start": "661320",
    "end": "668959"
  },
  {
    "text": "virtual threads for your business tasks uh and structure them in in the most",
    "start": "668959",
    "end": "674279"
  },
  {
    "text": "logical way uh structured concurrency is that as a term is also inspired by the term",
    "start": "674279",
    "end": "680820"
  },
  {
    "text": "structured programming um so the way structured programming brings in Clarity or readability to your",
    "start": "680820",
    "end": "686880"
  },
  {
    "text": "programs structured concurrency brings in that readability or Clarity to your concurrent programs right so what",
    "start": "686880",
    "end": "693120"
  },
  {
    "text": "structured concurrency is to concurrent programs uh is what structure programming is two programs",
    "start": "693120",
    "end": "699660"
  },
  {
    "text": "a little bit more more about security concurrency so the the principle is that when a flow of",
    "start": "699660",
    "end": "705240"
  },
  {
    "text": "execution splits into multiple concurrent flows basically executing multiple sub tasks they rejoin in the",
    "start": "705240",
    "end": "711000"
  },
  {
    "text": "same code block so what we see here is that you have this first Green Arrow which basically",
    "start": "711000",
    "end": "716760"
  },
  {
    "text": "represents uh part of the main task and that splits into multiple subtasks and",
    "start": "716760",
    "end": "722100"
  },
  {
    "text": "in this case we want all of these subtasks to be finished at the same time in order to continue with the with the",
    "start": "722100",
    "end": "727380"
  },
  {
    "text": "main task right and the benefits of structured concurrency are that you get error",
    "start": "727380",
    "end": "733079"
  },
  {
    "text": "handling which short circuiting so in this case if you are it's a first task get some error you don't really want to",
    "start": "733079",
    "end": "739200"
  },
  {
    "text": "continue with the other two sub tasks right because you want results of all of them uh so they are immediately canceled",
    "start": "739200",
    "end": "744720"
  },
  {
    "text": "again cancellation propagation what that means is if you have a parent task which is creating subtask and if the parent",
    "start": "744720",
    "end": "750720"
  },
  {
    "text": "task gets canceled uh it gets propagated to the child task as well and they are also canceled",
    "start": "750720",
    "end": "756240"
  },
  {
    "text": "that is all being done by the white socket concurrency API Clarity because your code represents",
    "start": "756240",
    "end": "762480"
  },
  {
    "text": "exactly what you want what you want from your let's say business requirements you know the way",
    "start": "762480",
    "end": "767880"
  },
  {
    "text": "uh the the logic should be so that that Clarity comes to your application and that makes",
    "start": "767880",
    "end": "773760"
  },
  {
    "text": "it more more readable also observability so if you see here you always have like parent task subtasks and their subtasks",
    "start": "773760",
    "end": "781560"
  },
  {
    "text": "so it's a big hierarchy of of tasks basically big hierarchy of virtual threads right and when you do a thread",
    "start": "781560",
    "end": "788040"
  },
  {
    "text": "them that exact same hierarchy is put into your thread dump so that way you get a good overview of what is happening",
    "start": "788040",
    "end": "794100"
  },
  {
    "text": "with your threads and you can pinpoint to a particular set if if that is going wrong",
    "start": "794100",
    "end": "800100"
  },
  {
    "text": "um okay few more examples so this is what we saw earlier you have one main task three sub tasks you want all of them to",
    "start": "800100",
    "end": "807120"
  },
  {
    "text": "be finished you can also organize in such a way that you want only one of them to be finished right and then you don't wait for other",
    "start": "807120",
    "end": "813360"
  },
  {
    "text": "subtasks or you can also have nested uh what is a nested tasks or nested scope",
    "start": "813360",
    "end": "820320"
  },
  {
    "text": "so you start basically with in in here you start with these three sub tasks you wait only for the completion of two of",
    "start": "820320",
    "end": "826680"
  },
  {
    "text": "them and then you start a fourth subtask and then you wait for the first and the fourth to continue with your your main",
    "start": "826680",
    "end": "832560"
  },
  {
    "text": "task now all of these examples can be modeled using structured task and that that is",
    "start": "832560",
    "end": "838200"
  },
  {
    "text": "what we will see later on with uh with some code examples",
    "start": "838200",
    "end": "843259"
  },
  {
    "text": "um so what we will do is we'll basically get few examples we will Implement them using completed future API then we will",
    "start": "846420",
    "end": "853320"
  },
  {
    "text": "Implement them using structured concurrency API and then we will do a comparison of how how it looks",
    "start": "853320",
    "end": "858480"
  },
  {
    "text": "right so a quick recap of the or revisit to the completable Future API",
    "start": "858480",
    "end": "865800"
  },
  {
    "text": "um it provides an API for a synchronous processing so it's a very powerful API which allows you to chain multiple",
    "start": "865800",
    "end": "871560"
  },
  {
    "text": "stages and then create these Pipelines and it relies heavily on callbacks because of the asynchronous processing",
    "start": "871560",
    "end": "878399"
  },
  {
    "text": "so what we will do is uh as I said we will basically uh compare them head to",
    "start": "878399",
    "end": "883800"
  },
  {
    "start": "882000",
    "end": "909000"
  },
  {
    "text": "head with fewer fewer examples so let's start with the first example so",
    "start": "883800",
    "end": "889139"
  },
  {
    "text": "here what you have is you want to create an event uh in order to calculate that event you",
    "start": "889139",
    "end": "894899"
  },
  {
    "text": "need uh to reserve a new book hotel and buy supplies when all of these subtasks are finished you are able to create your",
    "start": "894899",
    "end": "900779"
  },
  {
    "text": "event right so we let's go back to IntelliJ and I have to remind that I have to end",
    "start": "900779",
    "end": "906360"
  },
  {
    "text": "my slideshow uh go to IntelliJ",
    "start": "906360",
    "end": "911699"
  },
  {
    "start": "909000",
    "end": "2335000"
  },
  {
    "text": "then open completable Future examples",
    "start": "911699",
    "end": "916940"
  },
  {
    "text": "and yeah so this is the first example what you see here is you have create event method",
    "start": "917040",
    "end": "923399"
  },
  {
    "text": "and that is basically creating three concluded Futures each for one task",
    "start": "923399",
    "end": "929459"
  },
  {
    "text": "there is a venue book or tell by supplies and when these three uh and then these three Futures are combined",
    "start": "929459",
    "end": "934560"
  },
  {
    "text": "using all of because you want to finish all of them do some exception handling and then",
    "start": "934560",
    "end": "940680"
  },
  {
    "text": "basically in a callback get their results and create your event object what's happening within these event util",
    "start": "940680",
    "end": "947399"
  },
  {
    "text": "is not that exciting is just basically login and wait so um yeah it is to",
    "start": "947399",
    "end": "953040"
  },
  {
    "text": "simulate the fact that there is some blocking operation happening and log and weight is waiting for random amount of",
    "start": "953040",
    "end": "958500"
  },
  {
    "text": "time it also prints which thread it is getting executed on it says the task is done when it is done so uh",
    "start": "958500",
    "end": "965220"
  },
  {
    "text": "nothing really fancy okay so let me run this and the way to run this again is to have junit so I have some J unit tests",
    "start": "965220",
    "end": "972180"
  },
  {
    "text": "which are just wrappers around these methods if I run the first one",
    "start": "972180",
    "end": "977959"
  },
  {
    "text": "yeah this one then what should happen is these three subtasks should get started when all of",
    "start": "978899",
    "end": "985440"
  },
  {
    "text": "them finish then you are even should get created yeah so uh what you saw is",
    "start": "985440",
    "end": "992339"
  },
  {
    "text": "these platform threads are being created and they are used to execute these tasks",
    "start": "992339",
    "end": "997440"
  },
  {
    "text": "when all of them are finished you have your event object now how do you do that in structured concurrency API",
    "start": "997440",
    "end": "1004360"
  },
  {
    "text": "I have this class Loom examples where I'm gonna Implement these methods so",
    "start": "1006320",
    "end": "1011480"
  },
  {
    "text": "basically you always start with try with resources because the scope object that",
    "start": "1011480",
    "end": "1017120"
  },
  {
    "text": "you create is Auto closable so it basically at the end",
    "start": "1017120",
    "end": "1023300"
  },
  {
    "text": "of the uh try it frees up resources when when they're not needed and structured task group is the what do you say uh uh",
    "start": "1023300",
    "end": "1031339"
  },
  {
    "text": "sort of the main API and it has two subclasses",
    "start": "1031339",
    "end": "1037160"
  },
  {
    "text": "shutdown on failure and shutdown on success in this case we will shut down on failure because we want all of the subclass to",
    "start": "1037160",
    "end": "1043400"
  },
  {
    "text": "be finished so basically shutdown on failure means that you shut down when there is a failure and when uh you want",
    "start": "1043400",
    "end": "1048500"
  },
  {
    "text": "all of your subtasks to be finished you basically want to stop when there is a failure because that doesn't it doesn't make any sense to continue you want all",
    "start": "1048500",
    "end": "1054559"
  },
  {
    "text": "of them to be successful when there is one failure you stop you cancel everything and say there is something wrong",
    "start": "1054559",
    "end": "1060080"
  },
  {
    "text": "right so we use shutdown on failure in this case because we have these subtasks and we",
    "start": "1060080",
    "end": "1066020"
  },
  {
    "text": "want all of them to be finished and what you do with the scope you Fork uh you",
    "start": "1066020",
    "end": "1071600"
  },
  {
    "text": "folk some tasks from there so that will create a virtual thread and I can just basically copy paste these subtasks here",
    "start": "1071600",
    "end": "1080620"
  },
  {
    "text": "um yeah",
    "start": "1080780",
    "end": "1083980"
  },
  {
    "text": "okay so each Fork method gives you a task actually an instance of a class",
    "start": "1086900",
    "end": "1092539"
  },
  {
    "text": "called subtask subtask and you can get a handle on that and",
    "start": "1092539",
    "end": "1098539"
  },
  {
    "text": "which will be useful later so let me just do that and then what do you do with",
    "start": "1098539",
    "end": "1104120"
  },
  {
    "text": "this with the scope you basically join because you want to wait for it to finish and then join throws an exception",
    "start": "1104120",
    "end": "1110539"
  },
  {
    "text": "which is encrypted exception uh and if something goes wrong in this whole operation you want the errors to",
    "start": "1110539",
    "end": "1117860"
  },
  {
    "text": "be propagated so you do that by using throw a field so we failed also throws an exception",
    "start": "1117860",
    "end": "1124160"
  },
  {
    "text": "um and we can catch that as well right okay uh what do you do with the",
    "start": "1124160",
    "end": "1130220"
  },
  {
    "text": "scope then now you want to get the results of your sub tasks so in this",
    "start": "1130220",
    "end": "1135679"
  },
  {
    "text": "case the first task will give me venue and the other two subtasks will give me",
    "start": "1135679",
    "end": "1144760"
  },
  {
    "text": "hotel and supplies and then I can use them to create my event",
    "start": "1144799",
    "end": "1150799"
  },
  {
    "text": "so if I just create new event",
    "start": "1150799",
    "end": "1156340"
  },
  {
    "text": "I can pass venue Hotel supplies to it and that should be",
    "start": "1156799",
    "end": "1162380"
  },
  {
    "text": "equivalent to the completable Future example",
    "start": "1162380",
    "end": "1167620"
  },
  {
    "text": "okay so when I run this it should behave exactly the same as the other example uh the only difference being it will use",
    "start": "1169100",
    "end": "1175340"
  },
  {
    "text": "Virtual threads instead of and they all take seven seconds so they all should be done at the same time okay uh so you",
    "start": "1175340",
    "end": "1181700"
  },
  {
    "text": "have your event object um okay now let's do a little comparison so what we see here is that",
    "start": "1181700",
    "end": "1188360"
  },
  {
    "text": "um uh the computable future relies on callbacks so you always have",
    "start": "1188360",
    "end": "1195020"
  },
  {
    "text": "this then method so then apply then accept uh and then",
    "start": "1195020",
    "end": "1200960"
  },
  {
    "text": "uh you basically do your processing Within These callbacks that's uh that's the nature of computer future API",
    "start": "1200960",
    "end": "1207520"
  },
  {
    "text": "whereas instructor concurrency you do it sort of imperatively right you create",
    "start": "1207520",
    "end": "1213440"
  },
  {
    "text": "your subtasks you join them get their results and then you continue uh other difference is that here your",
    "start": "1213440",
    "end": "1220160"
  },
  {
    "text": "exception handling relies on runtime exceptions I think completely future throws completion exception which is a",
    "start": "1220160",
    "end": "1225559"
  },
  {
    "text": "runtime exception whereas in structured task group you get execution exception which is a checked exception so you",
    "start": "1225559",
    "end": "1232340"
  },
  {
    "text": "basically have to handle the error scenarios you can't you can't escape I think it's nice yeah",
    "start": "1232340",
    "end": "1238460"
  },
  {
    "text": "uh what else yeah one small difference or one small Quirk about the all off yeah it gives you a compatible feature",
    "start": "1238460",
    "end": "1245660"
  },
  {
    "text": "of void basically that means you have a useless parameter that you have to deal with I mean nothing really big but",
    "start": "1245660",
    "end": "1251419"
  },
  {
    "text": "that's a a small uh what is a quirk of all of method",
    "start": "1251419",
    "end": "1257720"
  },
  {
    "text": "okay so that's that's about the first example and we have more example I'm not",
    "start": "1257720",
    "end": "1263179"
  },
  {
    "text": "going to switch to the presentation mode but let's get the second one so here you have three subtasks and you want to uh",
    "start": "1263179",
    "end": "1270220"
  },
  {
    "text": "just get the results of anyone which finishes right",
    "start": "1270220",
    "end": "1275020"
  },
  {
    "text": "so what you have here is um you want to get weather and you have three different sources you basically ask all of them at",
    "start": "1275600",
    "end": "1283220"
  },
  {
    "text": "the same time and whichever gives you answer first you just use that uh how will you do it completely future",
    "start": "1283220",
    "end": "1290600"
  },
  {
    "text": "um you basically have these three computable features for your three",
    "start": "1290600",
    "end": "1296179"
  },
  {
    "text": "subtasks and then you use any of because",
    "start": "1296179",
    "end": "1301220"
  },
  {
    "text": "you want well a new future which should finish when any of the underlying",
    "start": "1301220",
    "end": "1306740"
  },
  {
    "text": "Futures finishes and then you do some exception handling and then you basically get your result right let me",
    "start": "1306740",
    "end": "1313820"
  },
  {
    "text": "run this and see if it works the way we want it to work",
    "start": "1313820",
    "end": "1319419"
  },
  {
    "text": "uh and it does so basically you have these three platform threads taking some time and the first one I think finishes",
    "start": "1321679",
    "end": "1327740"
  },
  {
    "text": "really fast in zero seconds so you get the result from Source three um and whether it's gonna be 27 degrees",
    "start": "1327740",
    "end": "1336559"
  },
  {
    "text": "um let me do this same thing with uh uh with a structured concurrency so",
    "start": "1336559",
    "end": "1343220"
  },
  {
    "text": "again you start with drive with resources right you have a scope object which is nothing but a structured task",
    "start": "1343220",
    "end": "1348740"
  },
  {
    "text": "group and in this case we'll use it down on success because we want uh to stop when there is Success from one of the",
    "start": "1348740",
    "end": "1354860"
  },
  {
    "text": "underlying subtasks right uh it takes a parameter which is going to be the type",
    "start": "1354860",
    "end": "1360860"
  },
  {
    "text": "of the result that you expect so in this case we are expecting weather so we will use weather as a type",
    "start": "1360860",
    "end": "1367760"
  },
  {
    "text": "and and then again something similar to what we did earlier so you use",
    "start": "1367760",
    "end": "1373659"
  },
  {
    "text": "scope.org and then you Fork your sub tasks let's get the",
    "start": "1373659",
    "end": "1381260"
  },
  {
    "text": "runnables from here so uh yeah so you get the result from the First",
    "start": "1381260",
    "end": "1387679"
  },
  {
    "text": "Source and then you get from the second",
    "start": "1387679",
    "end": "1393140"
  },
  {
    "text": "and third and then you basically join",
    "start": "1393140",
    "end": "1398240"
  },
  {
    "text": "you want to wait until one of them finishes and handle the exception and in this",
    "start": "1398240",
    "end": "1405500"
  },
  {
    "text": "case uh you immediately get the result from from the scope itself",
    "start": "1405500",
    "end": "1411399"
  },
  {
    "text": "right so and then you can yeah you can basically you use it in a",
    "start": "1415460",
    "end": "1420679"
  },
  {
    "text": "variable and let me just print that so this should behave same as the",
    "start": "1420679",
    "end": "1427280"
  },
  {
    "text": "compatible future example",
    "start": "1427280",
    "end": "1431080"
  },
  {
    "text": "right it does so in this case uh Source One",
    "start": "1435559",
    "end": "1440260"
  },
  {
    "text": "finishes fast and you have your weather um okay now let's do a little comparison",
    "start": "1441080",
    "end": "1449000"
  },
  {
    "text": "uh besides the what do you say asynchronous nature of computer",
    "start": "1449000",
    "end": "1454299"
  },
  {
    "text": "with callables and the fact that the exception handling is with runtime Expressions uh what else do you see",
    "start": "1454299",
    "end": "1461059"
  },
  {
    "text": "different I mean uh yeah one small little thing any of uh gives you a complete feature of",
    "start": "1461059",
    "end": "1467900"
  },
  {
    "text": "object uh although all of these features will give you a weather it's a bit",
    "start": "1467900",
    "end": "1473960"
  },
  {
    "text": "strange that this gives you an object so basically this weather is just an object instance and not a weather instance",
    "start": "1473960",
    "end": "1481039"
  },
  {
    "text": "whereas in this case when you do result you actually get a weather object so this weather is an instance of a weather",
    "start": "1481039",
    "end": "1487640"
  },
  {
    "text": "class uh and okay now I'm going to ask you a question",
    "start": "1487640",
    "end": "1493520"
  },
  {
    "text": "so you have your here three subtasks right what happens one of them let's say",
    "start": "1493520",
    "end": "1499400"
  },
  {
    "text": "Frozen exception or fails so new",
    "start": "1499400",
    "end": "1505640"
  },
  {
    "text": "runtime exception um although one of them fails but there are",
    "start": "1505640",
    "end": "1512360"
  },
  {
    "text": "two which would eventually continue and be successful how many of you think that this will result in an in an error",
    "start": "1512360",
    "end": "1520299"
  },
  {
    "text": "okay there is one person two three four five that's probably let's say 10 or maybe",
    "start": "1520460",
    "end": "1527360"
  },
  {
    "text": "less than 10 percent of the audience um well you guys are right because if I",
    "start": "1527360",
    "end": "1532940"
  },
  {
    "text": "now skewed this oh not that one",
    "start": "1532940",
    "end": "1539740"
  },
  {
    "text": "yeah so it's a bit strange to have your resulting future given error when you",
    "start": "1545900",
    "end": "1552380"
  },
  {
    "text": "know that one of them is going to be successful or which might become successful and you stop at the first",
    "start": "1552380",
    "end": "1558020"
  },
  {
    "text": "instance you get you get an error uh now with the same setup what do you",
    "start": "1558020",
    "end": "1564020"
  },
  {
    "text": "think will happen with compared to the future or structured concurrency API",
    "start": "1564020",
    "end": "1569380"
  },
  {
    "text": "how many of you think will there will be an error none because this talk is about social",
    "start": "1571820",
    "end": "1576919"
  },
  {
    "text": "concurrency so of course it's not going to be an error so yeah you see two of",
    "start": "1576919",
    "end": "1582200"
  },
  {
    "text": "the subtasks because you don't see the one which throws a random exception",
    "start": "1582200",
    "end": "1587240"
  },
  {
    "text": "and well because they are both finished at the same time you see both of them finished here so only one of them is",
    "start": "1587240",
    "end": "1594500"
  },
  {
    "text": "used to actually get the get the result but the error is ignored let me run it",
    "start": "1594500",
    "end": "1599600"
  },
  {
    "text": "once again just to be sure that is actually using one and canceling the other so in this case you have to wait for",
    "start": "1599600",
    "end": "1605659"
  },
  {
    "text": "seven seconds and then you will get output from one and yeah so three are",
    "start": "1605659",
    "end": "1610880"
  },
  {
    "text": "not from the source two so I I think it's a bit more logical this way in uh",
    "start": "1610880",
    "end": "1615940"
  },
  {
    "text": "although it is still fine as long as you know what's happening uh underneath the API and you can you can handle it deal",
    "start": "1615940",
    "end": "1622400"
  },
  {
    "text": "with it um but yeah I think it's more logical the way it's such a concurrency API",
    "start": "1622400",
    "end": "1627860"
  },
  {
    "text": "behaves okay now the third example",
    "start": "1627860",
    "end": "1633320"
  },
  {
    "text": "so what we have here is a packing portal and you first",
    "start": "1633320",
    "end": "1640580"
  },
  {
    "text": "get the customer data then you have to wait to finish two of your sub tasks to get Savings and Loans data and in the",
    "start": "1640580",
    "end": "1646580"
  },
  {
    "text": "end you calculate offers apparently this the customer is waiting for some offer and this is how you do it",
    "start": "1646580",
    "end": "1652460"
  },
  {
    "text": "so uh how would you do that in computable future APM",
    "start": "1652460",
    "end": "1658340"
  },
  {
    "text": "yeah so you create first a future of your sub task which gives you a customer",
    "start": "1658340",
    "end": "1665600"
  },
  {
    "text": "then you basically start these two other Futures in an async fashion because you",
    "start": "1665600",
    "end": "1671059"
  },
  {
    "text": "want them to be doing uh what do you say things at the same time concurrently",
    "start": "1671059",
    "end": "1677120"
  },
  {
    "text": "and you wait for the first one to finish and then you combine future two and",
    "start": "1677120",
    "end": "1682400"
  },
  {
    "text": "future three with the results of future one and then you get some object you use",
    "start": "1682400",
    "end": "1688220"
  },
  {
    "text": "that to calculate offer right so this is how uh the implementation will be let's",
    "start": "1688220",
    "end": "1695000"
  },
  {
    "text": "see if it works the way we want it to work",
    "start": "1695000",
    "end": "1699039"
  },
  {
    "text": "okay so first uh we are getting the customer takes four seconds then we have",
    "start": "1700760",
    "end": "1708020"
  },
  {
    "text": "um two subtasks to get the Savings and Loans data once we have both of them",
    "start": "1708020",
    "end": "1713120"
  },
  {
    "text": "we calculate offer and then you have the offer object",
    "start": "1713120",
    "end": "1718240"
  },
  {
    "text": "um okay how will it look like in in structured concurrency API yeah you always start with Drive resources right",
    "start": "1719059",
    "end": "1726320"
  },
  {
    "text": "okay so what we're going to do inside this we are going to call this subtask which will get the current customer right",
    "start": "1726320",
    "end": "1732799"
  },
  {
    "text": "but um this is the only operation that we are doing we are not actually orchestrating multiple subtasks right so do you really",
    "start": "1732799",
    "end": "1739220"
  },
  {
    "text": "need a scope around it no you can just be done with it by using one let's say virtual thread so you can",
    "start": "1739220",
    "end": "1747620"
  },
  {
    "text": "just simply do thread Dot",
    "start": "1747620",
    "end": "1753620"
  },
  {
    "text": "virtual start and then you can write your logic to get the current customer here",
    "start": "1753620",
    "end": "1762880"
  },
  {
    "text": "okay um but imagine a scenario where your",
    "start": "1768860",
    "end": "1774559"
  },
  {
    "text": "application is deployed in a server which by default creates virtual threads right so your let's say your Tomcat is",
    "start": "1774559",
    "end": "1780380"
  },
  {
    "text": "creating virtual threads every time there is a new request so you are operating in a virtual thread context",
    "start": "1780380",
    "end": "1785600"
  },
  {
    "text": "then you don't need to create a new virtual thread right so in that case you could only",
    "start": "1785600",
    "end": "1791720"
  },
  {
    "text": "uh could only do this and that should be sufficient",
    "start": "1791720",
    "end": "1798640"
  },
  {
    "text": "right in order to simulate that environment what I have done is basically I create a virtual thread inside the",
    "start": "1799640",
    "end": "1806179"
  },
  {
    "text": "um inside the JNL test and so that simulates the environment where you have",
    "start": "1806179",
    "end": "1811340"
  },
  {
    "text": "your uh your web server creating virtual threads to process your requests and then okay uh we have we have our",
    "start": "1811340",
    "end": "1818419"
  },
  {
    "text": "customer object again now the interesting thing about this is that this is a blocking operation and",
    "start": "1818419",
    "end": "1824120"
  },
  {
    "text": "although it is blocking we don't care because it's virtual thread it will get unmounted when there is blocking uh",
    "start": "1824120",
    "end": "1829820"
  },
  {
    "text": "let's see uh blocking operation and when you have result it gets mounted so we don't really have to worry about whether",
    "start": "1829820",
    "end": "1835460"
  },
  {
    "text": "you're calling blocking or non-blocking and let's just continue with the the",
    "start": "1835460",
    "end": "1840620"
  },
  {
    "text": "results so you have customer now then you have to execute these two methods so you use again",
    "start": "1840620",
    "end": "1846799"
  },
  {
    "text": "try with resources",
    "start": "1846799",
    "end": "1850120"
  },
  {
    "text": "you create your scope and in this case it's going to be structured task scope",
    "start": "1851840",
    "end": "1857480"
  },
  {
    "text": "shutdown on success or sit on failure because you want both of them to be",
    "start": "1857480",
    "end": "1863000"
  },
  {
    "text": "finished failure yes so um",
    "start": "1863000",
    "end": "1868899"
  },
  {
    "text": "and then you have the scope.org and then you for cure",
    "start": "1872120",
    "end": "1879260"
  },
  {
    "text": "um subtasks yeah in this case we can't use method references that the only downside",
    "start": "1879260",
    "end": "1885740"
  },
  {
    "text": "I have seen so far but um you have to explicitly call because you are passing",
    "start": "1885740",
    "end": "1893139"
  },
  {
    "text": "because you're passing the data to it which is which it doesn't",
    "start": "1893299",
    "end": "1898700"
  },
  {
    "text": "have yet okay and then you can you get the",
    "start": "1898700",
    "end": "1904039"
  },
  {
    "text": "alone stay time and these are two sub tasks",
    "start": "1904039",
    "end": "1912399"
  },
  {
    "text": "okay and then you join the scope exception handling",
    "start": "1916700",
    "end": "1923919"
  },
  {
    "text": "and exception propagation",
    "start": "1924919",
    "end": "1929620"
  },
  {
    "text": "okay uh so task one will give you uh savings",
    "start": "1931760",
    "end": "1936980"
  },
  {
    "text": "and task two will give you loans data",
    "start": "1936980",
    "end": "1941260"
  },
  {
    "text": "okay what do you do with that you will create a details object apparently so",
    "start": "1948799",
    "end": "1953840"
  },
  {
    "text": "new uh customer details with",
    "start": "1953840",
    "end": "1959559"
  },
  {
    "text": "a customer Savings and Loans data",
    "start": "1959559",
    "end": "1965899"
  },
  {
    "text": "um okay what do you do then now you have to call calculate offer which is again going to be blocking it's good to call",
    "start": "1965899",
    "end": "1971299"
  },
  {
    "text": "it with as scope around it so you have your scope you can also create new scope inside that so let's",
    "start": "1971299",
    "end": "1978080"
  },
  {
    "text": "just say we create a new scope or try scope 2.",
    "start": "1978080",
    "end": "1983779"
  },
  {
    "text": "and it would be fine to do that but there's also interesting thing about scope that you can reuse it",
    "start": "1983779",
    "end": "1991299"
  },
  {
    "text": "so when you Fork your subtask and you join them you can reuse the same scope to Fork",
    "start": "1992480",
    "end": "1999080"
  },
  {
    "text": "again so you basically can do scope dot fork and then",
    "start": "1999080",
    "end": "2005260"
  },
  {
    "text": "you can Fork the calculate offer subtask",
    "start": "2005260",
    "end": "2010740"
  },
  {
    "text": "and pass details to it",
    "start": "2016720",
    "end": "2020278"
  },
  {
    "text": "has to be Lambda okay and then this will",
    "start": "2022000",
    "end": "2029620"
  },
  {
    "text": "basically give us a task three",
    "start": "2029620",
    "end": "2035260"
  },
  {
    "text": "yeah don't use these uh variable names in your actual code use more logical",
    "start": "2035260",
    "end": "2040299"
  },
  {
    "text": "names this is just for example um",
    "start": "2040299",
    "end": "2045299"
  },
  {
    "text": "last three will give us an offer",
    "start": "2046240",
    "end": "2050460"
  },
  {
    "text": "okay and then you can print your offer",
    "start": "2052300",
    "end": "2057960"
  },
  {
    "text": "so let's just run this",
    "start": "2057960",
    "end": "2061919"
  },
  {
    "text": "and this should behave same as the completed future one so you have your customer",
    "start": "2064000",
    "end": "2069040"
  },
  {
    "text": "uh then you are running your subtasks parallelly oops that is an",
    "start": "2069040",
    "end": "2074440"
  },
  {
    "text": "error",
    "start": "2074440",
    "end": "2076740"
  },
  {
    "text": "oh yeah of course you have to join and uh so you wait and then you propagate the",
    "start": "2079540",
    "end": "2087398"
  },
  {
    "text": "errors it's good to find the errors in your unit test right",
    "start": "2087399",
    "end": "2094060"
  },
  {
    "text": "um okay so again wait for customer and then Savings and Loans data",
    "start": "2094060",
    "end": "2102580"
  },
  {
    "text": "once you have them you do the final subtask calculating offer and this looks similar to what we had with some",
    "start": "2102580",
    "end": "2109300"
  },
  {
    "text": "typical future okay uh one small thing uh you actually are doing one operation here you really",
    "start": "2109300",
    "end": "2116140"
  },
  {
    "text": "need a score no right you're not you're not orchestrating anything so why not just",
    "start": "2116140",
    "end": "2121420"
  },
  {
    "text": "to or offer here just like that it's",
    "start": "2121420",
    "end": "2127599"
  },
  {
    "text": "blocking we don't care okay so let me run this and this should again be the same way",
    "start": "2127599",
    "end": "2136200"
  },
  {
    "text": "and it will um let's wait to finish",
    "start": "2137020",
    "end": "2143800"
  },
  {
    "text": "eight seconds the next thing we'll do is we will",
    "start": "2143800",
    "end": "2148960"
  },
  {
    "text": "compare the these two implementations okay so let's look at completely future",
    "start": "2148960",
    "end": "2155079"
  },
  {
    "text": "example um so what I see here is uh I mean you have this picture right",
    "start": "2155079",
    "end": "2161500"
  },
  {
    "text": "and the picture is not really clear from here so you actually have to read this code then form a mental model of what is",
    "start": "2161500",
    "end": "2167920"
  },
  {
    "text": "happening with these subtasks right and then use that mental model to continue reading code further",
    "start": "2167920",
    "end": "2173440"
  },
  {
    "text": "whereas in computer or sorry whereas in a structured concurrency you basically get the structure of your sub tasks",
    "start": "2173440",
    "end": "2180700"
  },
  {
    "text": "right from the code so you see that you have a you basically get customer then",
    "start": "2180700",
    "end": "2185859"
  },
  {
    "text": "you focus some sub tasks you wait for them and then you basically continue with uh",
    "start": "2185859",
    "end": "2191680"
  },
  {
    "text": "with a more more tasks so that's the advantage with structured structured currency API",
    "start": "2191680",
    "end": "2198280"
  },
  {
    "text": "um that your uh what is a business logic becomes really clear and it's easier to read",
    "start": "2198280",
    "end": "2205240"
  },
  {
    "text": "okay I have one final thing to show you and then we go back to the presentation so so uh",
    "start": "2205240",
    "end": "2212920"
  },
  {
    "text": "here this actually concurrency API uh it says you Fork your subtask and you",
    "start": "2212920",
    "end": "2218560"
  },
  {
    "text": "join them but who's stopping you from just joining without creating subtasks right so you can just",
    "start": "2218560",
    "end": "2224320"
  },
  {
    "text": "now let me just comment these things out what do you think will happen here",
    "start": "2224320",
    "end": "2230079"
  },
  {
    "text": "you're you're joining you're seeing uh we want to wait or we want to shutdown on failure",
    "start": "2230079",
    "end": "2237040"
  },
  {
    "text": "but there are no sub tasks okay let me run this and see what",
    "start": "2237040",
    "end": "2242619"
  },
  {
    "text": "happens um",
    "start": "2242619",
    "end": "2248040"
  },
  {
    "text": "okay so it runs fine why well we are saying that you will",
    "start": "2252160",
    "end": "2258940"
  },
  {
    "text": "shut down on a failure or you will basically say there is",
    "start": "2258940",
    "end": "2263980"
  },
  {
    "text": "something wrong when there's a failure but there's no failure Happening Here although there are zero subtasks all Zero subtasks have finished successfully",
    "start": "2263980",
    "end": "2270160"
  },
  {
    "text": "so there is no problem all right so I mean if you look at it in a way it's it's still logical",
    "start": "2270160",
    "end": "2276099"
  },
  {
    "text": "now what do you think will happen in this example when you do the exact same thing so you basically comment these",
    "start": "2276099",
    "end": "2281800"
  },
  {
    "text": "and compiler doesn't complain here right the compiler is even fine with you",
    "start": "2281800",
    "end": "2286960"
  },
  {
    "text": "getting the results from your scope so what's happening um",
    "start": "2286960",
    "end": "2292420"
  },
  {
    "text": "now what do you think will happen success error",
    "start": "2292420",
    "end": "2300220"
  },
  {
    "text": "okay those who are saying error are the winners uh yes it does give you an error thankfully so because",
    "start": "2300220",
    "end": "2307300"
  },
  {
    "text": "you can't have results when you don't have any subtasks right and if you see here the exception is being thrown by",
    "start": "2307300",
    "end": "2313480"
  },
  {
    "text": "result and not by join so join is happily joining because there are zero subtasks but you actually want a result",
    "start": "2313480",
    "end": "2319359"
  },
  {
    "text": "if there is an error so that's how the let's say there are some quotes from these structured currency API as well",
    "start": "2319359",
    "end": "2324400"
  },
  {
    "text": "this is probably the last thing to show uh go back to the presentation",
    "start": "2324400",
    "end": "2332740"
  },
  {
    "text": "um so uh shut down policies as we saw there are three there are two policies are",
    "start": "2332740",
    "end": "2338380"
  },
  {
    "start": "2335000",
    "end": "2443000"
  },
  {
    "text": "done on failures return on success so you use the failure one when you want uh all of your sub tasks to be finished uh",
    "start": "2338380",
    "end": "2345700"
  },
  {
    "text": "so in that case it cancels when there is failure answer down on success you will use it when you want one of the tasks to",
    "start": "2345700",
    "end": "2350980"
  },
  {
    "text": "succeed right and it cancels the other tasks when there is Success on one uh we can also create custom shutdown policy",
    "start": "2350980",
    "end": "2358000"
  },
  {
    "text": "by extending the structured task code so like you create one more sub subclass as set on on failure down and success you",
    "start": "2358000",
    "end": "2364420"
  },
  {
    "text": "override the handle complete method so that's the handle you have on basically dealing with uh what is happening with",
    "start": "2364420",
    "end": "2369820"
  },
  {
    "text": "the successes or failures and you can use it to write your custom logic you can let's say shut down on uh completion",
    "start": "2369820",
    "end": "2377320"
  },
  {
    "text": "of some tasks successfully or in in Failure mode but that's uh yeah you can",
    "start": "2377320",
    "end": "2382359"
  },
  {
    "text": "just do whatever you want uh we're not going to see that example because I don't think we have a Time uh",
    "start": "2382359",
    "end": "2389320"
  },
  {
    "text": "one thing to be really aware of uh with while dealing with virtual threads is spinning uh so when your virtual thread",
    "start": "2389320",
    "end": "2395680"
  },
  {
    "text": "is executing a synchronized code block or a synchronized method uh the",
    "start": "2395680",
    "end": "2400960"
  },
  {
    "text": "virtual threat gets pinned to the to the platform thread uh what that means is that the virtual thread cannot be",
    "start": "2400960",
    "end": "2406480"
  },
  {
    "text": "unmounted from the platform thread if that is happening I mean there is no benefit of using virtual threads right because your virtual threads will behave",
    "start": "2406480",
    "end": "2413320"
  },
  {
    "text": "same as platform threads with the extra overhead of map of creating these virtual threads uh it is only a problem",
    "start": "2413320",
    "end": "2420520"
  },
  {
    "text": "if you are doing long running or blocking operations inside your synchronized code because if it's just",
    "start": "2420520",
    "end": "2426099"
  },
  {
    "text": "like let's say finishes quickly then the pinning happens only for a really short period of time and your application",
    "start": "2426099",
    "end": "2431140"
  },
  {
    "text": "won't notice it but if you do have these cases you can identify them with uh with JFR the jdk flight recorder and then you",
    "start": "2431140",
    "end": "2437440"
  },
  {
    "text": "can replace your synchronized logic with reactant log and that should uh that should basically solve it uh that's it",
    "start": "2437440",
    "end": "2444099"
  },
  {
    "start": "2443000",
    "end": "2460000"
  },
  {
    "text": "and",
    "start": "2444099",
    "end": "2446640"
  }
]