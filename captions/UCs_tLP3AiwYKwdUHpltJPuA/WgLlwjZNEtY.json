[
  {
    "start": "0",
    "end": "101000"
  },
  {
    "text": "thank you thank you for showing up thank you for showing up in person i'm here today to talk about russ to",
    "start": "13679",
    "end": "18800"
  },
  {
    "text": "give you an introduction and i i'm always when i do this talk i'm always very honest i am not a rust expert i'm",
    "start": "18800",
    "end": "23840"
  },
  {
    "text": "not a core committer to the rust community or anything i'm just the person who has programmed in a number of different",
    "start": "23840",
    "end": "29519"
  },
  {
    "text": "programming languages commercially also i think i counted roughly 10 or so languages that i got paid to write code",
    "start": "29519",
    "end": "34960"
  },
  {
    "text": "in and rust is one of the or is the latest one that i learned and the newest one for me so i think",
    "start": "34960",
    "end": "41840"
  },
  {
    "text": "actually as not a real expert it might actually be helpful to you to get an understanding of what rust feels",
    "start": "41840",
    "end": "47920"
  },
  {
    "text": "like by me sharing what i went through when i discovered rust and learned it and i'm going to do that on some real",
    "start": "47920",
    "end": "53920"
  },
  {
    "text": "code as you will see later my goal for today is that you go home",
    "start": "53920",
    "end": "59760"
  },
  {
    "text": "and you start to think okay i should really do some rust and you download as i will show you how rust works in the",
    "start": "59760",
    "end": "65518"
  },
  {
    "text": "tool chain and you try to write a five line program in rust i'm not sure why you are here today i",
    "start": "65519",
    "end": "71600"
  },
  {
    "text": "guess it is also because of that that was the party keynote yesterday for those of you remember it and mark did",
    "start": "71600",
    "end": "77759"
  },
  {
    "text": "say a lot of bad things about a lot of programming languages but the one he singled out as the one that he didn't",
    "start": "77759",
    "end": "82799"
  },
  {
    "text": "want to say anything bad about was actually rust and he said it's brilliant or something similar it was at",
    "start": "82799",
    "end": "88640"
  },
  {
    "text": "the beginning of the party i'm not sure whether it's a verbatim quote but it was roughly like that what he said",
    "start": "88640",
    "end": "95600"
  },
  {
    "text": "so is mark alone with it am i alone with it i show you the 2021",
    "start": "95600",
    "end": "103280"
  },
  {
    "start": "101000",
    "end": "234000"
  },
  {
    "text": "survey from stack overflow and this here is where rust ended up on it",
    "start": "103280",
    "end": "108880"
  },
  {
    "text": "and the weird thing i've been giving this talk for about two years and when i started this talk i had a similar slide",
    "start": "108880",
    "end": "114640"
  },
  {
    "text": "in it and i said for four years in a row rust has been in that top spot the most loved programming language this",
    "start": "114640",
    "end": "121280"
  },
  {
    "text": "is two years on and it's still in every single edition of the stack overflow developer",
    "start": "121280",
    "end": "126719"
  },
  {
    "text": "developer survey not journey developer survey rust turns out to be in that spot",
    "start": "126719",
    "end": "131760"
  },
  {
    "text": "and incidentally six years ago is when rust 1.0 came out",
    "start": "131760",
    "end": "136879"
  },
  {
    "text": "so for the entire duration of rust being publicly available in a 1-0 version it",
    "start": "136879",
    "end": "142160"
  },
  {
    "text": "has been the most loved programming language",
    "start": "142160",
    "end": "146319"
  },
  {
    "text": "but when we then look at what is the most popular one which is what people actually use you probably",
    "start": "148080",
    "end": "154640"
  },
  {
    "text": "have started looking for it it is down there so it is not very widely used at the moment this is up two percentage",
    "start": "154640",
    "end": "161840"
  },
  {
    "text": "points last year it was at five percent this year's at seven percent i think that is actually okay because",
    "start": "161840",
    "end": "167599"
  },
  {
    "text": "one thing that people forget or i'm not saying you do but a lot of people forget that a programming language doesn't have",
    "start": "167599",
    "end": "174080"
  },
  {
    "text": "to be universal mark really talked about that quite nicely in the party keynote last night often programming languages",
    "start": "174080",
    "end": "179599"
  },
  {
    "text": "are really good for a niche and rust is really really good for a certain niche and i think we'll probably get to a",
    "start": "179599",
    "end": "185840"
  },
  {
    "text": "closer understanding of what that niche is in the coming 45 minutes but it is i'm not expecting this at least it's",
    "start": "185840",
    "end": "192879"
  },
  {
    "text": "going to be widespread at the company where i work we often write architectures that are based on microservices lots of microservices that",
    "start": "192879",
    "end": "199920"
  },
  {
    "text": "are backing javascript front-ends and so on and i don't know i can't really see myself or one of our teams writing those",
    "start": "199920",
    "end": "207120"
  },
  {
    "text": "microservices in a normal business application context deployed into a public cloud kubernetes maybe in in russ",
    "start": "207120",
    "end": "214319"
  },
  {
    "text": "i don't think that is the niche for rust and that is i think why we see those numbers and i'm not as i'm not saying",
    "start": "214319",
    "end": "219840"
  },
  {
    "text": "this is a failure i'm just saying this is probably showing that russ is really successful in what it does but it",
    "start": "219840",
    "end": "226080"
  },
  {
    "text": "doesn't mean that it is trying to be the be all and end all for all areas",
    "start": "226080",
    "end": "232799"
  },
  {
    "start": "234000",
    "end": "434000"
  },
  {
    "text": "briefly what do these three companies have in common what do you think i mean that's probably a lot of things i could do a question and to probably come up",
    "start": "235120",
    "end": "240879"
  },
  {
    "text": "with 10 valid answers but one answer that i'm after today is they all had a big or have a big",
    "start": "240879",
    "end": "246879"
  },
  {
    "text": "dependency on c based languages a lot of what they do is based on program codes sometimes 20 30 years old that is",
    "start": "246879",
    "end": "253920"
  },
  {
    "text": "written in c and they're all kind of unhappy about it because it is really really hard to",
    "start": "253920",
    "end": "259919"
  },
  {
    "text": "write good c code i come back to that in a minute so what those three these companies did they all came up with",
    "start": "259919",
    "end": "266960"
  },
  {
    "text": "their own alternatives apple invented swift go came up sorry google came up with",
    "start": "266960",
    "end": "273040"
  },
  {
    "text": "golang and then mozilla came up with rust i'm not really going to talk about swift and go and i would even argue that they're",
    "start": "273040",
    "end": "280080"
  },
  {
    "text": "not really competitors in many cases so i can certainly think of use cases where",
    "start": "280080",
    "end": "285280"
  },
  {
    "text": "i would reach for go and not for us than others where i would clearly say this is something where i would use rust",
    "start": "285280",
    "end": "290560"
  },
  {
    "text": "for and to give you an idea at least i mean go i think is really easy to learn very",
    "start": "290560",
    "end": "296160"
  },
  {
    "text": "easy to pick up but it lacks a lot of more advanced language constructs and abstraction features so go is probably",
    "start": "296160",
    "end": "302240"
  },
  {
    "text": "the language i would choose for a microservice if i had to write something in a really very performant language it",
    "start": "302240",
    "end": "307600"
  },
  {
    "text": "has a garbage collector also if i'm writing something bigger and also in the embedded space maybe or something that i",
    "start": "307600",
    "end": "313120"
  },
  {
    "text": "think will last for the next 20 years probably reach for a language that provides more abstraction",
    "start": "313120",
    "end": "318880"
  },
  {
    "text": "and swift yeah i mean i'm programming in swift too i would use that if i have to which means i'm writing ios or mac os",
    "start": "318880",
    "end": "325680"
  },
  {
    "text": "applications speaking of which i made the point that they don't like c",
    "start": "325680",
    "end": "332320"
  },
  {
    "text": "but that's always easy to say right i can say this about a 20 30 50 000 person company say they don't like something",
    "start": "332320",
    "end": "338080"
  },
  {
    "text": "but what is it that is causing them to dislike a programming language to the point where they want to or what they",
    "start": "338080",
    "end": "344000"
  },
  {
    "text": "have created their own one these are the patch notes for a recent",
    "start": "344000",
    "end": "349039"
  },
  {
    "text": "ios update and if you look at the color sync one at the bottom there you can see in the description that it's addressing a",
    "start": "349039",
    "end": "355280"
  },
  {
    "text": "memory problem which is one of the biggest problems the manual memory management that you have",
    "start": "355280",
    "end": "360479"
  },
  {
    "text": "in c to a certain extent also in c plus plus and that is causing increasingly more problematic security problems if",
    "start": "360479",
    "end": "367520"
  },
  {
    "text": "you then pan out a little bit this is the entirety of the patch notes and i've marked all the ones that have to do",
    "start": "367520",
    "end": "373199"
  },
  {
    "text": "something with memory related problems with this pink dot and you can see that way more than half of them are memory",
    "start": "373199",
    "end": "379600"
  },
  {
    "text": "related problems as a whole class of problems that you simply as i will show you later cannot",
    "start": "379600",
    "end": "386000"
  },
  {
    "text": "run into with rust so that is one not the only but that is one of the reasons why a lot of companies feel a necessity",
    "start": "386000",
    "end": "393360"
  },
  {
    "text": "to get away from c because they're trying they're trying really hard they've tried for over a decade to write",
    "start": "393360",
    "end": "398960"
  },
  {
    "text": "secure safe c code that manages memory well without any leaks without any of",
    "start": "398960",
    "end": "404400"
  },
  {
    "text": "the other associated problems microsoft wrote an entire book about it and actually in two editions it's that",
    "start": "404400",
    "end": "410960"
  },
  {
    "text": "thick everybody as far as i know had to read this at microsoft they have every incentive in the world to write secure",
    "start": "410960",
    "end": "416639"
  },
  {
    "text": "code and they're still coming up with lists that are often way longer than this one so it is i think for most human beings",
    "start": "416639",
    "end": "423919"
  },
  {
    "text": "human programmers it is impossible in the end practically to write c code that doesn't come with these issues and that",
    "start": "423919",
    "end": "430160"
  },
  {
    "text": "is one strong motivation speaking of microsoft they actually were quite explicit about",
    "start": "430160",
    "end": "437199"
  },
  {
    "start": "434000",
    "end": "553000"
  },
  {
    "text": "it if you could say so this is an article from the visual studio magazine from 2019",
    "start": "437199",
    "end": "442560"
  },
  {
    "text": "and the title is obviously they they have problems with c plus plus and they're looking to use rust instead",
    "start": "442560",
    "end": "448240"
  },
  {
    "text": "and there's a growing number of companies including amazon facebook the linux kernel even that are all",
    "start": "448240",
    "end": "454639"
  },
  {
    "text": "allowing or looking at writing more code in rust and of course with the heritage from mozilla which are using rust to",
    "start": "454639",
    "end": "461280"
  },
  {
    "text": "replace core functionality in firefox the interoperability between rust and c",
    "start": "461280",
    "end": "466319"
  },
  {
    "text": "is very good so you can do that gradual shift from c based languages into rust",
    "start": "466319",
    "end": "472319"
  },
  {
    "text": "microsoft didn't only say that in visual studio magazine microsoft is actually quite good with research they had a",
    "start": "472319",
    "end": "477520"
  },
  {
    "text": "research division and they wrote this",
    "start": "477520",
    "end": "480960"
  },
  {
    "text": "so what i showed you with that screenshot of the apple release notes i can actually back this",
    "start": "486319",
    "end": "491360"
  },
  {
    "text": "up by citing some research from microsoft they came to the same conclusion with much more sound methodologies than i did scanning the",
    "start": "491360",
    "end": "497520"
  },
  {
    "text": "release notes they looked at that and they found the same thing personally i became interested in rust",
    "start": "497520",
    "end": "503120"
  },
  {
    "text": "two two and a half years ago because of these things we get a lot of embedded computers now",
    "start": "503120",
    "end": "508879"
  },
  {
    "text": "that are way more powerful you can see the size of this thing compared to the battery but this really is a powerful",
    "start": "508879",
    "end": "514320"
  },
  {
    "text": "computer actually at the moment there is the nvidia conference running for those of you who have some time in the hotel room",
    "start": "514320",
    "end": "519839"
  },
  {
    "text": "tonight to see more talks about this but these things are actually used in same modern passenger cars",
    "start": "519839",
    "end": "525760"
  },
  {
    "text": "and they have often been written in c c plus plus maybe even other languages like",
    "start": "525760",
    "end": "530800"
  },
  {
    "text": "simulink also but the software in those devices is also getting increasingly",
    "start": "530800",
    "end": "536000"
  },
  {
    "text": "more complex and if we are making a break if we are going away from the traditional architectures there it is in",
    "start": "536000",
    "end": "542000"
  },
  {
    "text": "my opinion at least worthwhile to look at also making the shift to a more modern programming language that has",
    "start": "542000",
    "end": "547839"
  },
  {
    "text": "learned from the past and has avoided many of the problems",
    "start": "547839",
    "end": "553120"
  },
  {
    "start": "553000",
    "end": "941000"
  },
  {
    "text": "so getting ready that's the best thing about rust it's",
    "start": "553360",
    "end": "558480"
  },
  {
    "text": "super boring you can download something from the website a shell script of course you should inspect that shell",
    "start": "558480",
    "end": "564000"
  },
  {
    "text": "script you run this and it will install the rust tool chain in your home directory you don't even have to have",
    "start": "564000",
    "end": "569279"
  },
  {
    "text": "permissions anywhere you can just install it in your home directory and after that you have this tool as i",
    "start": "569279",
    "end": "574800"
  },
  {
    "text": "highlighted up there called rust up which allows you to update your rust tool chain so there's no fussing about",
    "start": "574800",
    "end": "580240"
  },
  {
    "text": "there's no weird dependencies in user local or wherever else",
    "start": "580240",
    "end": "585600"
  },
  {
    "text": "and it just works so it's boring but that's good i would say similarly",
    "start": "585600",
    "end": "590880"
  },
  {
    "text": "boring but good is a package manager called cargo here's another back reference to the",
    "start": "590880",
    "end": "596080"
  },
  {
    "text": "party keynote when you start out programming in rust rust and cargo cargo are not good search",
    "start": "596080",
    "end": "601680"
  },
  {
    "text": "terms on your web engine of choice so often times you learn all sorts about things about rust in cars and all sorts",
    "start": "601680",
    "end": "607920"
  },
  {
    "text": "of other things that you really didn't want to know about they're not good terms to actually search and cargo is no",
    "start": "607920",
    "end": "613040"
  },
  {
    "text": "exception here but cargo is the package manager you can see here as you would expect create some scaffolding and it",
    "start": "613040",
    "end": "618399"
  },
  {
    "text": "just works and like so many other things in rust it is actually quite simple it creates a main file that contains the",
    "start": "618399",
    "end": "624160"
  },
  {
    "text": "entry point and this tamil file which is the package description as you would know from other programming languages",
    "start": "624160",
    "end": "630320"
  },
  {
    "text": "and the main of course compiles into a binary so",
    "start": "630320",
    "end": "635920"
  },
  {
    "text": "if you notice this is actually intellij normally my go-to tool is visual studio code that i use to write in many",
    "start": "635920",
    "end": "642560"
  },
  {
    "text": "programming languages or just have installed on all the machines i found through back and forth",
    "start": "642560",
    "end": "647680"
  },
  {
    "text": "experimentation that the support in intellij for rust at least for me seems better than what visual studio code is",
    "start": "647680",
    "end": "653839"
  },
  {
    "text": "doing for now i'm going to go back and forth for a while to see but it is actually worth noting that intellij has",
    "start": "653839",
    "end": "659839"
  },
  {
    "text": "pretty good support not everything works some of the refactorings do work sometimes they don't other refactorings",
    "start": "659839",
    "end": "665200"
  },
  {
    "text": "that you know from java they don't work but it actually works surprisingly well and has really good support",
    "start": "665200",
    "end": "671760"
  },
  {
    "text": "what you can see here in the package file are a couple of things that i think are worth noting in one line and i need to",
    "start": "671760",
    "end": "678320"
  },
  {
    "text": "in line 11 you see a dependency on third which is the serializer d serializer so",
    "start": "678320",
    "end": "683839"
  },
  {
    "text": "even serialization is not built into the language it really takes more the approach of c and javascript in saying",
    "start": "683839",
    "end": "689360"
  },
  {
    "text": "we don't have a small library we actually bring other things into the language as you need it that's also",
    "start": "689360",
    "end": "695279"
  },
  {
    "text": "quite good from a security perspective also good for constrained areas because you reduce the attack surface you make",
    "start": "695279",
    "end": "700800"
  },
  {
    "text": "your binary smaller etc chrono is actually the date time library i was really",
    "start": "700800",
    "end": "706640"
  },
  {
    "text": "surprised by this i was like where's the date time class i couldn't find anything and i was like oh that's an external dependency which one is it that i should",
    "start": "706640",
    "end": "712560"
  },
  {
    "text": "use there are multiple sometimes you have to choose a little bit usually these days for the basics is actually",
    "start": "712560",
    "end": "717920"
  },
  {
    "text": "quite quick to find the dominant one the one that probably works for most people out of the box",
    "start": "717920",
    "end": "723920"
  },
  {
    "text": "interestingly you can also see that in the lines further down in lines 12 and 13 cert itself comes with specific variants",
    "start": "723920",
    "end": "731360"
  },
  {
    "text": "there's a json version and a derived version i leave the last one off but even json isn't built into the standard",
    "start": "731360",
    "end": "736959"
  },
  {
    "text": "serializer deserializer again keeping the library keeping the binary small keeping the attack surface small if you",
    "start": "736959",
    "end": "742639"
  },
  {
    "text": "want json you say i want the json part of the serializer d serializer and at the very bottom the uuid library",
    "start": "742639",
    "end": "749760"
  },
  {
    "text": "i'm using here that actually you can see has this thing called features so i can say i want certain features and here you can see",
    "start": "749760",
    "end": "755839"
  },
  {
    "text": "the libraries can know about each other so the uuid library can know about cert and say oh i want to serialize my uids",
    "start": "755839",
    "end": "762480"
  },
  {
    "text": "so that is all built in and you can turn those features on and off as you need them",
    "start": "762480",
    "end": "768399"
  },
  {
    "text": "last thing or two things worthwhile mentioning line 5 editions so rust has explicit editions and i can say which",
    "start": "768480",
    "end": "774320"
  },
  {
    "text": "one i want to target for those of you who have ever programmed swift i mean check out the swift repository that you",
    "start": "774320",
    "end": "780000"
  },
  {
    "text": "wrote two years ago try to compile it with today's xcode it generally doesn't work it doesn't even compile anymore",
    "start": "780000",
    "end": "785120"
  },
  {
    "text": "then you think oh never mind i'm going to use an older version of xcode the ide that doesn't run the current operating system anymore in rust that is actually",
    "start": "785120",
    "end": "792000"
  },
  {
    "text": "much much easier they also went live or went public quite early they have evolved the language over time but",
    "start": "792000",
    "end": "797440"
  },
  {
    "text": "they've really done quite nicely by by marking editions being able to target older editions",
    "start": "797440",
    "end": "803120"
  },
  {
    "text": "and they have even gone in a community effort to try to go through stack overflow in other places to make sure that questions that are",
    "start": "803120",
    "end": "809519"
  },
  {
    "text": "pertaining to older versions of the language are marked as such so that you're not misled when you end up being on them",
    "start": "809519",
    "end": "816160"
  },
  {
    "text": "the code i'm going to use to introduce rust to you in on the code level from now on is a little hobby project of mine",
    "start": "816160",
    "end": "822720"
  },
  {
    "text": "that is a genetic programming simulator so genetic programming is the idea that you have little pieces of software that",
    "start": "822720",
    "end": "828480"
  },
  {
    "text": "have some fitness function the better ones are recombined you use some operators to merge two programs and then",
    "start": "828480",
    "end": "834639"
  },
  {
    "text": "hopefully you have a new one you find out is it better or not it doesn't really matter so much what you need to take away from this is",
    "start": "834639",
    "end": "841360"
  },
  {
    "text": "basically have a world there's creatures running around those creatures eat food if they don't eat enough food they die",
    "start": "841360",
    "end": "847680"
  },
  {
    "text": "that's the whole thing i like this idea better than showing your hello world example but i can make",
    "start": "847680",
    "end": "853120"
  },
  {
    "text": "all the points i want to make with a real code base and i can show you something else later as well",
    "start": "853120",
    "end": "858560"
  },
  {
    "text": "so this is what it looks like to build something cargo build as i said boring you can see a relatively small",
    "start": "858560",
    "end": "863920"
  },
  {
    "text": "application does take some time you can see the cursor ticking along here",
    "start": "863920",
    "end": "869040"
  },
  {
    "text": "you can also see that the dependencies are being pulled in in source code they need to be compiled that excludes a",
    "start": "869040",
    "end": "874800"
  },
  {
    "text": "whole class of problems that we've seen in the javascript world where what is checked in into github in source is not",
    "start": "874800",
    "end": "880079"
  },
  {
    "text": "what the binary is in the npm registry so that worked it's not too bad",
    "start": "880079",
    "end": "885519"
  },
  {
    "text": "but it's not fast at the same time the builds are incremental so the next time i would do this it would be much faster",
    "start": "885519",
    "end": "891120"
  },
  {
    "text": "because it remembers what it has compiled before these directories can get quite big so",
    "start": "891120",
    "end": "896959"
  },
  {
    "text": "if you do backups don't back up all the target directories where the binaries are in you will store gigabytes of intermediate files",
    "start": "896959",
    "end": "903360"
  },
  {
    "text": "testing very similar cargo tests i'm showing you the command line version is usually integrated in ide and here you",
    "start": "903360",
    "end": "908560"
  },
  {
    "text": "saw already the incremental compile it didn't compile the main thing just the test it went much quicker the running of",
    "start": "908560",
    "end": "913920"
  },
  {
    "text": "the test then is incredibly fast and i must say i'm a huge fan i must say i am a huge fan of test driven development",
    "start": "913920",
    "end": "920880"
  },
  {
    "text": "and it has never really stopped me the compiler never feel felt in the way or bothering me i'm quite sensitive to",
    "start": "920880",
    "end": "926639"
  },
  {
    "text": "getting out of the flow but it was usually fast enough that i could type a unit test say run the test and it was",
    "start": "926639",
    "end": "933120"
  },
  {
    "text": "within a second or two that i had the answer because of the incremental compiler so",
    "start": "933120",
    "end": "938959"
  },
  {
    "text": "15 minutes in let's look at some real code",
    "start": "938959",
    "end": "944160"
  },
  {
    "start": "941000",
    "end": "1557000"
  },
  {
    "text": "what are you seeing here so this is the first bit of code this is the world as defined in the programming simulator you",
    "start": "946000",
    "end": "952320"
  },
  {
    "text": "see a couple of things maybe immediately you can see the brevity of some of the keywords you see pub fn impul u64 that",
    "start": "952320",
    "end": "960000"
  },
  {
    "text": "is something that rust has gone for it is considered idiomatic in rust and i've started doing that as well you can see",
    "start": "960000",
    "end": "965680"
  },
  {
    "text": "this here in line 25 it says params instead of parameters it's quite weird",
    "start": "965680",
    "end": "971040"
  },
  {
    "text": "today when you come from some languages that really spell out everything and you think that's good because it's english",
    "start": "971040",
    "end": "976399"
  },
  {
    "text": "they made this choice it's the way it is but you can see public i mean i like the idea of having",
    "start": "976399",
    "end": "982240"
  },
  {
    "text": "functions as fun as fun but they went for something even shorter fn only but",
    "start": "982240",
    "end": "987440"
  },
  {
    "text": "what you can also see is in line 15 i'm declaring a structure for those of you who know c that's familiar a structure",
    "start": "987440",
    "end": "994079"
  },
  {
    "text": "is just a data structure in memory without associated code like not a class just the data structure and i could",
    "start": "994079",
    "end": "1001040"
  },
  {
    "text": "leave it at that i could only declare the structures that you see from line 15 to 22.",
    "start": "1001040",
    "end": "1006560"
  },
  {
    "text": "but what i can then do and you can see this on line 24 i can attach",
    "start": "1006560",
    "end": "1011600"
  },
  {
    "text": "an implementation to this and that makes it roughly like a class in other programming languages so you can see i'm",
    "start": "1011600",
    "end": "1016959"
  },
  {
    "text": "saying infill world and further up i've said there's the structure so i'm separating the structure definition from",
    "start": "1016959",
    "end": "1022560"
  },
  {
    "text": "the behavior definition what you also see is rust avoided the",
    "start": "1022560",
    "end": "1028558"
  },
  {
    "text": "billion dollar mistake so no nulls really we have options this is like if you know scala or some of the other",
    "start": "1028559",
    "end": "1034480"
  },
  {
    "text": "modern programming languages you are probably familiar with the concept so this name of the world can either be a string and then it would",
    "start": "1034480",
    "end": "1041760"
  },
  {
    "text": "be some the name of like the content of the string or it can be none but it is explicit and i have to deal with it i'm",
    "start": "1041760",
    "end": "1047918"
  },
  {
    "text": "making explicit that the world can be nameless",
    "start": "1047919",
    "end": "1052679"
  },
  {
    "text": "rust doesn't have constructors but it has a convention for constructors you can see this here in line 25",
    "start": "1053600",
    "end": "1059919"
  },
  {
    "text": "you usually declare a public function a static function like not associated to a memory structure and you can say that",
    "start": "1059919",
    "end": "1067200"
  },
  {
    "text": "that is the constructor and you often call it new and you can see that a couple of things are being passed in here a name which is",
    "start": "1067200",
    "end": "1073679"
  },
  {
    "text": "some kind of stru i guess a string i'll come back to that later and a parameters object or parameter structure i should",
    "start": "1073679",
    "end": "1080080"
  },
  {
    "text": "better say that is being used and then you can see this arrow notation to see the return type is world",
    "start": "1080080",
    "end": "1086000"
  },
  {
    "text": "so this is the kind of constructor if you will the actual construction though the syntax that rust uses is down here",
    "start": "1086000",
    "end": "1092559"
  },
  {
    "text": "you just write the name of the structure and then in curly braces you fill the structure you also notice there's no",
    "start": "1092559",
    "end": "1098640"
  },
  {
    "text": "return keyword the last expression in the in the function in the method is actually what is being returned so what",
    "start": "1098640",
    "end": "1104559"
  },
  {
    "text": "we're seeing here is this constructor to make it a function again is actually internally using",
    "start": "1104559",
    "end": "1110640"
  },
  {
    "text": "the the idiomatic rust syntax but that is actually quite common i didn't invent this this is what most people do you can",
    "start": "1110640",
    "end": "1115919"
  },
  {
    "text": "see this here for example the random number generator or the logger they're using the same thing we're using new to",
    "start": "1115919",
    "end": "1121679"
  },
  {
    "text": "instantiate a random number generator and a logger into which the world can write significant events",
    "start": "1121679",
    "end": "1127760"
  },
  {
    "text": "what you also see is here in those lines that rust oftentimes has syntactic sugar",
    "start": "1127760",
    "end": "1133200"
  },
  {
    "text": "to make life for the experience programmer easier but that can make it a bit harder for the less experienced",
    "start": "1133200",
    "end": "1138880"
  },
  {
    "text": "programmer or for the newbie to rust so what does this mean so the first the line above is clear right i'm",
    "start": "1138880",
    "end": "1144160"
  },
  {
    "text": "initializing the world and the name is sum and then the name that i got passed in from the outside",
    "start": "1144160",
    "end": "1150640"
  },
  {
    "text": "but params is just this keyword right this is just a shortcut for this",
    "start": "1150640",
    "end": "1155679"
  },
  {
    "text": "terrain the field in the structure is initialized with terrain the variable that you can see declared on line 26",
    "start": "1155679",
    "end": "1162960"
  },
  {
    "text": "so you have to know the shortcut rather than writing terrain colon terrain you can just leave out the latter part again",
    "start": "1162960",
    "end": "1169120"
  },
  {
    "text": "this is something that you will see throughout rus there's a couple of shortcuts you have to be aware of when you're reading other people's code and",
    "start": "1169120",
    "end": "1174640"
  },
  {
    "text": "it's probably good to learn them but it does increase the cognitive overhead to learn the language",
    "start": "1174640",
    "end": "1181039"
  },
  {
    "text": "as i said in my opinion rust really is for code bases that will live for quite a while that will become quite big and",
    "start": "1181039",
    "end": "1186720"
  },
  {
    "text": "then of course you're happy to make the investment of learning a more complicated programming language because you can reap the benefits from having",
    "start": "1186720",
    "end": "1193039"
  },
  {
    "text": "more tense more concise code so",
    "start": "1193039",
    "end": "1198799"
  },
  {
    "text": "these were classes if you will structures let's look at methods so here we see",
    "start": "1198960",
    "end": "1204080"
  },
  {
    "text": "something from the world structure called do cycles that is do the cycles of the simulation",
    "start": "1204080",
    "end": "1209919"
  },
  {
    "text": "and like in python or other languages methods are just functions and you can see in the first line here i have to",
    "start": "1209919",
    "end": "1216159"
  },
  {
    "text": "pass in self or this in java so you have to make it explicit that you are a method and then self is of course the",
    "start": "1216159",
    "end": "1223120"
  },
  {
    "text": "instance of the object that you're dealing with that ampersand mute will leave for later",
    "start": "1223120",
    "end": "1229039"
  },
  {
    "text": "i can ask who of you are c or c plus plus developers or no c and c plus plus",
    "start": "1229039",
    "end": "1234720"
  },
  {
    "text": "ah okay good good good so i can skip over one slide a little bit faster you are very aware of course what the",
    "start": "1234720",
    "end": "1239840"
  },
  {
    "text": "ampersand operator does i would assume interestingly also in line 157 you see",
    "start": "1239840",
    "end": "1245280"
  },
  {
    "text": "number as a u64 unsigned 64-bit integer you will have your fun with integers",
    "start": "1245280",
    "end": "1251039"
  },
  {
    "text": "because there's all sorts of them 32-bit 64-bit signed unsigned etc and you can't",
    "start": "1251039",
    "end": "1256240"
  },
  {
    "text": "simply assign them to each other there's good reasons for doing that but it is something that you will probably get",
    "start": "1256240",
    "end": "1261760"
  },
  {
    "text": "used to and you will curse the the type system every now and then for it",
    "start": "1261760",
    "end": "1267360"
  },
  {
    "text": "oops sorry i thought there was a green box coming up in in line 158 you can see a couple",
    "start": "1267360",
    "end": "1272880"
  },
  {
    "text": "of more modern features also you can see the underscore in the for loop i don't care about the variable normally if i",
    "start": "1272880",
    "end": "1278080"
  },
  {
    "text": "have a variable that would be unused i would get a warning so i can say never mind i don't care you can also see the",
    "start": "1278080",
    "end": "1283919"
  },
  {
    "text": "syntax for ranges there zero dot dot num so ranges are again the first class type in rust and then you can see i can call",
    "start": "1283919",
    "end": "1291120"
  },
  {
    "text": "another method self do one cycle i think everybody if you have any programming language you understand how this works",
    "start": "1291120",
    "end": "1297120"
  },
  {
    "text": "right you get how many cycles you do you iterate over them and do that",
    "start": "1297120",
    "end": "1302400"
  },
  {
    "text": "something else this is a function actually not from the",
    "start": "1303039",
    "end": "1308559"
  },
  {
    "text": "actual code base but from the unit tests and oftentimes i needed to figure out how many cycles does one of these",
    "start": "1308559",
    "end": "1314720"
  },
  {
    "text": "programs for the creatures take to execute like cycles in this artificial language that the the creatures run not",
    "start": "1314720",
    "end": "1321120"
  },
  {
    "text": "on the actual cpu and so i had this function called cycle count and i'm passing in at the second",
    "start": "1321120",
    "end": "1327200"
  },
  {
    "text": "parameter the program that the creature will have which is basically an array of instructions so that's how the program",
    "start": "1327200",
    "end": "1333120"
  },
  {
    "text": "is represented it's just a list of instructions that the creature will cycle through and the first parameter or the first",
    "start": "1333120",
    "end": "1339840"
  },
  {
    "text": "argument to this function is the parameters that define the world all sorts of parameters about the world how",
    "start": "1339840",
    "end": "1345360"
  },
  {
    "text": "large is it what commands are available etc etc i guess what the intent of this method should be",
    "start": "1345360",
    "end": "1351360"
  },
  {
    "text": "relatively clear and return to u64 to say this is how many cycles there are",
    "start": "1351360",
    "end": "1356720"
  },
  {
    "text": "before i explain this function i want to show you something different rust has a very very powerful macro",
    "start": "1356720",
    "end": "1362559"
  },
  {
    "text": "system you can extend the language with rust code that interoperates in the compiler step on the abstract syntax",
    "start": "1362559",
    "end": "1369520"
  },
  {
    "text": "tree so you can do really quite a bit more than with the c preprocessor and more than with the regex preprocessor",
    "start": "1369520",
    "end": "1375600"
  },
  {
    "text": "that mark mentioned last night what we can see here is rust does not have a literal",
    "start": "1375600",
    "end": "1382000"
  },
  {
    "text": "implementation of maps or hash maps that's just not part of the language specification but there there's this",
    "start": "1382000",
    "end": "1387280"
  },
  {
    "text": "dependency this crate as they're called called maplet literal maps and you can",
    "start": "1387280",
    "end": "1392400"
  },
  {
    "text": "see this here you can see hashmap bang which is the invocation for macros and you can see i can define here",
    "start": "1392400",
    "end": "1399440"
  },
  {
    "text": "a literal hashmap i'm saying the each command takes 10 cycles the move command takes five cycles and so on this is not",
    "start": "1399440",
    "end": "1406720"
  },
  {
    "text": "core part of the rust programming language the ide will have a hard time to pass it because the the syntax that",
    "start": "1406720",
    "end": "1412720"
  },
  {
    "text": "i'm seeing here is what the designer of the library has created that's all i'm going to say about the",
    "start": "1412720",
    "end": "1418240"
  },
  {
    "text": "macro system it is quite powerful which again is really suitable for large code bases because it gives you",
    "start": "1418240",
    "end": "1424000"
  },
  {
    "text": "it's a sharp knife you can cut yourself with it but it gives you lots of really good abstractions including this one for",
    "start": "1424000",
    "end": "1429279"
  },
  {
    "text": "example and you can see here the response type is also hashmap and then you can see if you know java it's like",
    "start": "1429279",
    "end": "1435279"
  },
  {
    "text": "generics right it maps from instruction to u64 so",
    "start": "1435279",
    "end": "1441520"
  },
  {
    "text": "we talked a bit about the more object oriented side of rust here i want to show you a bit more of the functional",
    "start": "1441520",
    "end": "1446880"
  },
  {
    "text": "side we see here the list the program as i said is just an array angular brackets for the array",
    "start": "1446880",
    "end": "1454159"
  },
  {
    "text": "and we iterate over it we can say iterate over this array most programming languages have something like this these",
    "start": "1454159",
    "end": "1460320"
  },
  {
    "text": "days even java has it it's a bit more convoluted there but i can just say create me a stream",
    "start": "1460320",
    "end": "1465760"
  },
  {
    "text": "of things in the array then i'm doing a simple left fold i'm starting with an accumulator of zero",
    "start": "1465760",
    "end": "1473360"
  },
  {
    "text": "and now i'm using this anonymous function so you see the syntax of anonymous functions here quite nice concise focused on what you want to do",
    "start": "1473360",
    "end": "1480320"
  },
  {
    "text": "behind the bars behind the between the pipe symbols you see the parameters ack the accumulator and install the",
    "start": "1480320",
    "end": "1486880"
  },
  {
    "text": "instruction so what's happening this function will be called for each element in the array you get the accumulator from the previous invocation and the",
    "start": "1486880",
    "end": "1493440"
  },
  {
    "text": "current instructions remember i want to sum up all the cycle counts so basically",
    "start": "1493440",
    "end": "1498880"
  },
  {
    "text": "what i'm doing in the body i'm saying accumulator plus i'm getting from the work parameters how long does the",
    "start": "1498880",
    "end": "1504320"
  },
  {
    "text": "current instruction that i have here take and i'm adding this simple left fold and you can see quite",
    "start": "1504320",
    "end": "1509440"
  },
  {
    "text": "concise syntax as i mentioned before rust really is designed for the long haul and while this would work",
    "start": "1509440",
    "end": "1518240"
  },
  {
    "text": "it's a bit repetitive right i mean left folds with accumulators we've seen that before you often have clear cases and i",
    "start": "1518240",
    "end": "1524159"
  },
  {
    "text": "already said it i want to sum up something so basically what you can do here i can make it easier",
    "start": "1524159",
    "end": "1529840"
  },
  {
    "text": "i can oh sorry i can just say do the iterator and then i'm saying map and that of course makes my internal",
    "start": "1529840",
    "end": "1536640"
  },
  {
    "text": "anonymous function much easier i only get the instruction i'm returning remember no return keyword here i'm just",
    "start": "1536640",
    "end": "1542159"
  },
  {
    "text": "returning the count and the whole start with zero pass in the accumulator add to it i don't have to do because it creates",
    "start": "1542159",
    "end": "1548400"
  },
  {
    "text": "a new stream of numbers and then at the end i have the sum operator to sum up the new stream here",
    "start": "1548400",
    "end": "1554080"
  },
  {
    "text": "so that chaining works equally well",
    "start": "1554080",
    "end": "1557840"
  },
  {
    "start": "1557000",
    "end": "2472000"
  },
  {
    "text": "now to something different memory management i said that was one of the main motivations why people are actually looking at rust",
    "start": "1560159",
    "end": "1566640"
  },
  {
    "text": "these examples here are actually not i use the different color background so remember this these are not from my program these are from the rust book",
    "start": "1566640",
    "end": "1573200"
  },
  {
    "text": "that is online on the web it's actually quite a good book to read or actually at least to refer back to while you're learning rust",
    "start": "1573200",
    "end": "1579360"
  },
  {
    "text": "and these examples are taken straight from there because they explained them really well so what happens with memory",
    "start": "1579360",
    "end": "1585200"
  },
  {
    "text": "management you can see here i'm creating a local variable called s and",
    "start": "1585200",
    "end": "1590400"
  },
  {
    "text": "i'm assigning hello to it and at the end of that block of the curly braces when s goes out of scope",
    "start": "1590400",
    "end": "1596000"
  },
  {
    "text": "the memory is reclaimed so it's based on the scoping",
    "start": "1596000",
    "end": "1601279"
  },
  {
    "text": "what happens when i assign variables and all the ones with red are the ones that don't compile so what i'm doing here is i'm doing s1",
    "start": "1601360",
    "end": "1608559"
  },
  {
    "text": "again i'm just showing a different way of initializing a string here and then i'm saying s2",
    "start": "1608559",
    "end": "1613679"
  },
  {
    "text": "is assigned the value of s1 but now what happens when does this get out of scope",
    "start": "1613679",
    "end": "1619039"
  },
  {
    "text": "when s1 goes out of scope when s2 goes out of scope we are quickly into automatic reference counting which they",
    "start": "1619039",
    "end": "1625279"
  },
  {
    "text": "wanted to avoid so this is illegal basically after the line where you're assigning the value of",
    "start": "1625279",
    "end": "1630880"
  },
  {
    "text": "s1 to s2 you cannot use s1 anymore and if you try to compile this program the",
    "start": "1630880",
    "end": "1636480"
  },
  {
    "text": "compiler would tell you as much at that line when it says print line it will say you can't use s1 anymore you",
    "start": "1636480",
    "end": "1642320"
  },
  {
    "text": "have transferred the value to s2 and the memory held by the string will",
    "start": "1642320",
    "end": "1647440"
  },
  {
    "text": "go out of scope now when s2 goes out of scope",
    "start": "1647440",
    "end": "1652000"
  },
  {
    "text": "that's a nice approach but it really creates a big problem with functions i mean what am i going to do if i pass it",
    "start": "1653440",
    "end": "1659840"
  },
  {
    "text": "to a function then i can't use s1 here but i only want to calculate the length how do i get ownership back and it just",
    "start": "1659840",
    "end": "1665360"
  },
  {
    "text": "would be a real mess so what i can do instead rather than passing the actual memory the ownership i can actually pass",
    "start": "1665360",
    "end": "1672240"
  },
  {
    "text": "a reference to it to that function so in here in the length function as you",
    "start": "1672240",
    "end": "1677840"
  },
  {
    "text": "can see i see another integer here you size which is also an integer type",
    "start": "1677840",
    "end": "1683520"
  },
  {
    "text": "i'm just returning the string length i mean normally you wouldn't write a function for it but i'm trying to show this to you so basically at the end of",
    "start": "1683520",
    "end": "1689600"
  },
  {
    "text": "the function s goes out of scope but s is just the reference to the string not",
    "start": "1689600",
    "end": "1695360"
  },
  {
    "text": "the string itself for those of you who didn't raise their hands when you set the osc program as a",
    "start": "1695360",
    "end": "1701279"
  },
  {
    "text": "very brief introduction what that actually means this is for illustration purposes this is not how c or c plus plus works this",
    "start": "1701279",
    "end": "1707600"
  },
  {
    "text": "is not how current modern cpus work it's just an idealized version so this is a memory dump in light in light grey on",
    "start": "1707600",
    "end": "1713919"
  },
  {
    "text": "the side you can see the addresses in memory then you can see a hex dump of the memory and an ascii version of it",
    "start": "1713919",
    "end": "1719679"
  },
  {
    "text": "so something like this led message like get message so now this message variable owns this chunk of memory you",
    "start": "1719679",
    "end": "1726480"
  },
  {
    "text": "can see this here that starts at line six nine whatever six seven four",
    "start": "1726480",
    "end": "1732320"
  },
  {
    "text": "or memory location right this is the chunk of memory and you can see on the left hand side done reached the end of all worlds that is really owned by the",
    "start": "1732320",
    "end": "1738960"
  },
  {
    "text": "variable the reference what does that look like if i'm putting an ampersand all the c program as you know this",
    "start": "1738960",
    "end": "1744960"
  },
  {
    "text": "when i put an ampersand in front of it i'm creating something else in memory i'm creating a pointer in memory and you",
    "start": "1744960",
    "end": "1750480"
  },
  {
    "text": "can see this here it actually happens to be this address 69674 which is the address of where it's",
    "start": "1750480",
    "end": "1756559"
  },
  {
    "text": "stored so in the previous example when s when the reference goes out of scope the pink",
    "start": "1756559",
    "end": "1761679"
  },
  {
    "text": "memory is reclaimed but not the yellow memory the yellow is only reclaimed and can only be owned by one variable i can",
    "start": "1761679",
    "end": "1768720"
  },
  {
    "text": "have multiple references multiple of these pink ones pointing to it and i can reclaim that memory and as i said this",
    "start": "1768720",
    "end": "1774480"
  },
  {
    "text": "is not how it really works they wouldn't be on the heap so",
    "start": "1774480",
    "end": "1781039"
  },
  {
    "text": "what we see here is a bit confusing for those of you who know c s.lang is now a reference it doesn't distinguish between",
    "start": "1781039",
    "end": "1788000"
  },
  {
    "text": "the real thing and the reference in the syntax you can put a dot in here rather than a pointy sign in c it is even",
    "start": "1788000",
    "end": "1794880"
  },
  {
    "text": "doubly confusing because sometimes when you have integer types you do have to dereference them when you only have a",
    "start": "1794880",
    "end": "1800240"
  },
  {
    "text": "reference but with these objects and structures you don't you treat them like they",
    "start": "1800240",
    "end": "1805279"
  },
  {
    "text": "like the real thing so what happens here",
    "start": "1805279",
    "end": "1810640"
  },
  {
    "text": "again string i'm passing it to a new function here i'm passing a reference in but now what this function does the",
    "start": "1810640",
    "end": "1816480"
  },
  {
    "text": "change function it tries to change the string and those of you who do multi-thread programming you can already scream and",
    "start": "1816480",
    "end": "1822720"
  },
  {
    "text": "think oh my god i'm passing references to multiple threads they're all changing this thing that's never going to work",
    "start": "1822720",
    "end": "1827760"
  },
  {
    "text": "true and it doesn't work that's why the red thing is there you can only change something on a",
    "start": "1827760",
    "end": "1833679"
  },
  {
    "text": "reference when you have explicitly made the variable mutable you can see this here now in the first line let mute s so",
    "start": "1833679",
    "end": "1840399"
  },
  {
    "text": "the string needs to be mutable to start with but also in the function in the change function i have to say i want to",
    "start": "1840399",
    "end": "1846640"
  },
  {
    "text": "have a mutable reference only then are you allowed to change the contents",
    "start": "1846640",
    "end": "1851840"
  },
  {
    "text": "why is that useful because it can stop these data races we can see here i'm trying to create",
    "start": "1851840",
    "end": "1857919"
  },
  {
    "text": "immutable reference to s in r1 trying to create a second one which would could potentially to a data race compiler",
    "start": "1857919",
    "end": "1864240"
  },
  {
    "text": "doesn't allow it similarly i can create many references",
    "start": "1864240",
    "end": "1869279"
  },
  {
    "text": "that are immutable r1 and r2 nothing bad can happen right i can pass immutable references but then i'm trying to create",
    "start": "1869279",
    "end": "1876080"
  },
  {
    "text": "a mutable reference and the compiler doesn't let me do it so basically the rules are you can have",
    "start": "1876080",
    "end": "1881360"
  },
  {
    "text": "as many as you want immutable references or and a strict or one and only one mutual reference and",
    "start": "1881360",
    "end": "1888720"
  },
  {
    "text": "that really excludes a whole class of data race problems because the mutual one can change it but",
    "start": "1888720",
    "end": "1894640"
  },
  {
    "text": "it's the only reference out there the immutable ones you can have or else you can copy things",
    "start": "1894640",
    "end": "1901360"
  },
  {
    "text": "there's also a whole other class i want to briefly mention at least dangling pointers can't do it you can see this in",
    "start": "1901360",
    "end": "1906720"
  },
  {
    "text": "the function it creates a local variable s we already know s would go out of scope at the end of the function dangle",
    "start": "1906720",
    "end": "1913360"
  },
  {
    "text": "we're trying to return a reference to this thing that goes out of scope the compiler won't let us do it it says i'm",
    "start": "1913360",
    "end": "1918799"
  },
  {
    "text": "smarter i can see what you're doing here that's a dangling pointer we will have a reference to nothing and we don't want",
    "start": "1918799",
    "end": "1924159"
  },
  {
    "text": "that so",
    "start": "1924159",
    "end": "1929519"
  },
  {
    "text": "i hope that made sense and i think the rules are reasonably enough the rules are easy to",
    "start": "1929519",
    "end": "1934960"
  },
  {
    "text": "understand i hope at least how i explained them but i do want to show you how quickly and how profoundly that",
    "start": "1934960",
    "end": "1940720"
  },
  {
    "text": "changes how you program and i can actually completely corroborate or confirm what mark said",
    "start": "1940720",
    "end": "1947840"
  },
  {
    "text": "yesterday sometimes it's really hard to get this right and i'll show you why but once it is correct you have every",
    "start": "1947840",
    "end": "1954080"
  },
  {
    "text": "confidence that your code actually really works and doesn't contain any problems so",
    "start": "1954080",
    "end": "1959200"
  },
  {
    "text": "you see more syntax here of rust here's a different function this time not from the world but from the terrain",
    "start": "1959200",
    "end": "1964799"
  },
  {
    "text": "the thing that actually the creatures can run around in and we have a function here that says do with creatures mute",
    "start": "1964799",
    "end": "1970399"
  },
  {
    "text": "there's another convention to say this will mutate some of the data structures it's a method so i'm passing in self",
    "start": "1970399",
    "end": "1976480"
  },
  {
    "text": "self is here reference to the terrain structure and i'm also passing in a function functions are also first class",
    "start": "1976480",
    "end": "1982000"
  },
  {
    "text": "citizens and the intent of this function or method is to say dear terrain i give",
    "start": "1982000",
    "end": "1987200"
  },
  {
    "text": "you a function please apply this function to every creature that lives on your terrain",
    "start": "1987200",
    "end": "1992480"
  },
  {
    "text": "it's a nice way of abstracting away from it rust is pretty typed so what is this f",
    "start": "1992480",
    "end": "1997840"
  },
  {
    "text": "thing what is the type of that function i can't pass any old function into it and like languages like c sharp and so",
    "start": "1997840",
    "end": "2003919"
  },
  {
    "text": "on inlining the definition of the function in the declaration of another function can look utterly confusing so what",
    "start": "2003919",
    "end": "2010240"
  },
  {
    "text": "you're basically doing is you're saying f and you explain on a second line or on a consecutive piece of code what f",
    "start": "2010240",
    "end": "2017279"
  },
  {
    "text": "actually is so here i have this generic method do with creatures which takes a function",
    "start": "2017279",
    "end": "2023440"
  },
  {
    "text": "and f is a function now we're saying it's a mutating function it will get as the first parameter a terrain as a",
    "start": "2023440",
    "end": "2029760"
  },
  {
    "text": "second parameter the creature because it's iterating over all of them it will and now you can see another nice thing",
    "start": "2029760",
    "end": "2035120"
  },
  {
    "text": "in rust you can do tuples so it'll get a tuple of two integers",
    "start": "2035120",
    "end": "2040159"
  },
  {
    "text": "basically a pair if you will that's a data structure and it returns an option",
    "start": "2040159",
    "end": "2045519"
  },
  {
    "text": "of a tuple and what that thing is the world is x and y coordinates this is where the",
    "start": "2045519",
    "end": "2052240"
  },
  {
    "text": "creature lives in the world so i have to pass in a function that will take the terrain the creature under observation",
    "start": "2052240",
    "end": "2059679"
  },
  {
    "text": "it will take the coordinates where the creature currently lives and that function can return a new position when",
    "start": "2059679",
    "end": "2065760"
  },
  {
    "text": "the creature moved but it's an option because the creature could die and then it would return none and say this",
    "start": "2065760",
    "end": "2070800"
  },
  {
    "text": "creature doesn't exist in the world anymore makes sense",
    "start": "2070800",
    "end": "2075838"
  },
  {
    "text": "let's turn this around let's look at the called side where do i call this function",
    "start": "2076320",
    "end": "2081919"
  },
  {
    "text": "so this here is again from the world class and there's this function called process all creatures so do something",
    "start": "2081919",
    "end": "2088398"
  },
  {
    "text": "with all the creatures in the simulation step and we can see outside the green box",
    "start": "2088399",
    "end": "2095040"
  },
  {
    "text": "self.terrain so that's the world knows its terrain and it says calls this function that we just",
    "start": "2095040",
    "end": "2100400"
  },
  {
    "text": "discussed create a sorry do without do for all creatures and we can see here now the declaration of this anonymous",
    "start": "2100400",
    "end": "2107119"
  },
  {
    "text": "function it takes exactly the three parameters i described the terrain the creature and the position",
    "start": "2107119",
    "end": "2112720"
  },
  {
    "text": "and what it does in here for example the first thing it does it takes some energy points away one energy point away from",
    "start": "2112720",
    "end": "2118960"
  },
  {
    "text": "the creature every cycle of the of the simulation the creatures lose one energy",
    "start": "2118960",
    "end": "2124240"
  },
  {
    "text": "point and then you can see other things like if the creature's age is larger than the creature's maximum age or its",
    "start": "2124240",
    "end": "2131599"
  },
  {
    "text": "energy points are zero then return none in that case the creature dies it has reached the maximum age that is set in",
    "start": "2131599",
    "end": "2137119"
  },
  {
    "text": "the simulation in the parameters or if the energy has been drained to zero it hasn't eaten enough it's not a",
    "start": "2137119",
    "end": "2143359"
  },
  {
    "text": "successful creature then we return none makes sense i'm not going to talk about the other bit but it's similar",
    "start": "2143359",
    "end": "2150160"
  },
  {
    "text": "and relatively easy to follow i think the problem that i want to highlight here is that does not work",
    "start": "2150160",
    "end": "2156640"
  },
  {
    "text": "this is the error message you get",
    "start": "2156640",
    "end": "2160160"
  },
  {
    "text": "these error messages are i mean they're baffling at first i mean as i said i've programmed in many programming languages",
    "start": "2162160",
    "end": "2167760"
  },
  {
    "text": "i'm used to compiler errors i was like i didn't really know what to make of this right i mean",
    "start": "2167760",
    "end": "2173520"
  },
  {
    "text": "it uses ascii art it's colorful it really tries to be super helpful",
    "start": "2173520",
    "end": "2178880"
  },
  {
    "text": "but in the end i was often a bit yeah what is it trying to tell me it shows me many words but i'm not really sure what",
    "start": "2178880",
    "end": "2184960"
  },
  {
    "text": "it's trying to tell me you can see this here the error message says can't borrow self.terrain as mutable because previous",
    "start": "2184960",
    "end": "2191520"
  },
  {
    "text": "closure requires unique access and like okay i can understand every english word of that but what does it really mean but",
    "start": "2191520",
    "end": "2198480"
  },
  {
    "text": "then you can see in the red highlights it says look here self terrain and then further down the second borrow occurs",
    "start": "2198480",
    "end": "2204880"
  },
  {
    "text": "here actually really nicely done to show this you can also see in blue another",
    "start": "2204880",
    "end": "2210000"
  },
  {
    "text": "way of actually reaching the same problem but the cool thing is you can see these error numbers i hope in the",
    "start": "2210000",
    "end": "2216000"
  },
  {
    "text": "very top line you can see this error 0501 this is actually the key all the error",
    "start": "2216000",
    "end": "2221760"
  },
  {
    "text": "messages are numbered you can look them up they are actually this is a screenshot from intellij they're actually hyperlinks here so you can",
    "start": "2221760",
    "end": "2227599"
  },
  {
    "text": "click on them and then you can go to a web page that explains in even more detail what the problem is and helps you",
    "start": "2227599",
    "end": "2232720"
  },
  {
    "text": "so it is not easy to understand what's wrong i'll show you in a minute what is wrong but you also get as much help as you can",
    "start": "2232720",
    "end": "2239760"
  },
  {
    "text": "you can see at the very bottom here i'm actually standing in front of it but it can you can see it says and try rust c",
    "start": "2239760",
    "end": "2247680"
  },
  {
    "text": "and explain to me what this error message actually means",
    "start": "2247680",
    "end": "2252480"
  },
  {
    "text": "but speaking of error messages do you remember from the party keynote last night the story about the greek question mark",
    "start": "2254720",
    "end": "2260800"
  },
  {
    "text": "for all of you who are who weren't there the greek question mark looks exactly like a semicolon",
    "start": "2260800",
    "end": "2267119"
  },
  {
    "text": "the rust community is actually awesome i wrote a blog post that is basically along the lines of this talk and i got",
    "start": "2267119",
    "end": "2272320"
  },
  {
    "text": "so much help and people helped me understand rust better and as i mentioned earlier they are going through old answers on stack overflow to update",
    "start": "2272320",
    "end": "2278640"
  },
  {
    "text": "them and so on and somebody noticed this thing about the greek semicolon",
    "start": "2278640",
    "end": "2284640"
  },
  {
    "text": "so the semicolon degree question mark apologies and filed a bug number",
    "start": "2284640",
    "end": "2290040"
  },
  {
    "text": "25957 this is like way back like five years or longer ago they filed it on the rus programming language on github in",
    "start": "2290040",
    "end": "2296160"
  },
  {
    "text": "the main repository and guess what the rust community did they fixed it",
    "start": "2296160",
    "end": "2301280"
  },
  {
    "text": "and you now get this error message i actually did this in the hotel room last night i had to find a greek",
    "start": "2301280",
    "end": "2307359"
  },
  {
    "text": "question mark which i put into line 13 there and it actually tells you the unicode i",
    "start": "2307359",
    "end": "2313040"
  },
  {
    "text": "mean the normal error message would be the one further up right it would be unknown start of token slash use 37e but",
    "start": "2313040",
    "end": "2320000"
  },
  {
    "text": "then the help is hey if you use the greek question mark it looks like a semicolon maybe you",
    "start": "2320000",
    "end": "2326000"
  },
  {
    "text": "meant a semicolon but anyway so back to our problem",
    "start": "2326000",
    "end": "2333119"
  },
  {
    "text": "what would happen what was happening here is inside this closure inside this anonymous function i was using",
    "start": "2333119",
    "end": "2338839"
  },
  {
    "text": "self.params.com and most of you probably didn't blink when you saw the code for the first time be like yeah sure i'm in the world class",
    "start": "2338839",
    "end": "2345760"
  },
  {
    "text": "the world knows its parameters and i just want to grab the maximum age of the creatures and there's another reference",
    "start": "2345760",
    "end": "2350880"
  },
  {
    "text": "further down but the problem is with the do with creatures and the terrain is mutable so",
    "start": "2350880",
    "end": "2357440"
  },
  {
    "text": "i'm actually beginning to change the world because i can change its terrain and it says here you have a reference to",
    "start": "2357440",
    "end": "2365760"
  },
  {
    "text": "something else in the world the params object and you can't have that",
    "start": "2365760",
    "end": "2370960"
  },
  {
    "text": "so you have self terrain which is the first borrow this is the mutable one and remember only one mutable one if you",
    "start": "2370960",
    "end": "2376560"
  },
  {
    "text": "have a mutual one you can't have immutable ones but in here in the middle the self params is an immutable one",
    "start": "2376560",
    "end": "2382800"
  },
  {
    "text": "at the same time as the mutual one and then you get this error message the closure wants unique access because it's",
    "start": "2382800",
    "end": "2389280"
  },
  {
    "text": "mutable but you've tried to borrow it already you probably didn't expect that right",
    "start": "2389280",
    "end": "2395200"
  },
  {
    "text": "when i explained the rules and it looked also simple one mutable and so on but it actually does bite you on those",
    "start": "2395200",
    "end": "2400400"
  },
  {
    "text": "occasions once you get used to it you realize yeah it actually makes sense and the fix is",
    "start": "2400400",
    "end": "2405839"
  },
  {
    "text": "relatively easy what i'm doing here is in this method i'm just pulling out from self into local variables",
    "start": "2405839",
    "end": "2413040"
  },
  {
    "text": "the parents object because i know it's not going to change if another thread it's not happening in the simulation but if another thread were to changes",
    "start": "2413040",
    "end": "2419200"
  },
  {
    "text": "actually i wouldn't want that anyway i want the parameters as they are at that moment in time i'm pulling out a local",
    "start": "2419200",
    "end": "2425359"
  },
  {
    "text": "variable and now inside the closure i can actually use this i can use the params this one now has no problem i",
    "start": "2425359",
    "end": "2432240"
  },
  {
    "text": "don't need to borrow anything here the scoping is clear the closure uses the local variable but doesn't need anything",
    "start": "2432240",
    "end": "2438000"
  },
  {
    "text": "from the world structure it is very clear and that is i think one of the few cases where go which ex which",
    "start": "2438000",
    "end": "2445280"
  },
  {
    "text": "has excellent these go routines but where they actually fumble this a little bit sometimes you can create situations",
    "start": "2445280",
    "end": "2450560"
  },
  {
    "text": "in go where you can create these reference in multiple threads and it's not really clear who captured it when and something might change they have",
    "start": "2450560",
    "end": "2456560"
  },
  {
    "text": "made it again very very explicit what you can and can't do and the good thing is as i said before",
    "start": "2456560",
    "end": "2463040"
  },
  {
    "text": "if it compiles there's every chance in the world that it's actually semantically correct and won't lead to data races or memory corruption issues",
    "start": "2463040",
    "end": "2471760"
  },
  {
    "start": "2472000",
    "end": "2911000"
  },
  {
    "text": "which brings me to the last major point i want to talk about parallelism that is something that is really hard to do most",
    "start": "2472079",
    "end": "2478480"
  },
  {
    "text": "of the times when you're programming websites or things that run on the server you don't care so much about parallelism because",
    "start": "2478480",
    "end": "2485040"
  },
  {
    "text": "you have thousands of requests coming at you and you normally assign one thread to an operation and you're done with it",
    "start": "2485040",
    "end": "2490560"
  },
  {
    "text": "you don't really have to do multi-thread programming the application server or the whatever you're using to as the",
    "start": "2490560",
    "end": "2496800"
  },
  {
    "text": "foundation for your microservice fixes that for you you don't have to think about it but there's of course a growing class of problems and again",
    "start": "2496800",
    "end": "2503280"
  },
  {
    "text": "think about the niche that rust is targeted large applications may be embedded where you actually have to be explicit about multi-threaded",
    "start": "2503280",
    "end": "2509280"
  },
  {
    "text": "programming and with all the memory management with the borrow checker that i talked about with the data race",
    "start": "2509280",
    "end": "2515680"
  },
  {
    "text": "avoidance and so on it makes it really easy what we can see here",
    "start": "2515680",
    "end": "2521680"
  },
  {
    "text": "is a function from somewhere else which says run several of those simulations at the same time",
    "start": "2521680",
    "end": "2528640"
  },
  {
    "text": "and if you do machine learning you've probably come across this notion of hyper parameters like the parameters",
    "start": "2528640",
    "end": "2533839"
  },
  {
    "text": "which with which you initialize the simulation i've shown you on a number of occasions this params object that had",
    "start": "2533839",
    "end": "2539359"
  },
  {
    "text": "things like the world size the instruction count i showed you but when you're running a simulator you'd often",
    "start": "2539359",
    "end": "2545040"
  },
  {
    "text": "don't know what those hyper parameters should be you don't know is it good if the world is 100 100 or 50 by 50 because",
    "start": "2545040",
    "end": "2551440"
  },
  {
    "text": "it has different it has a different impact on locality on where these creatures run around and so",
    "start": "2551440",
    "end": "2556560"
  },
  {
    "text": "on so oftentimes what you do is to determine those hyper parameters you use an algorithm at another level you can do",
    "start": "2556560",
    "end": "2562560"
  },
  {
    "text": "a monte carlo simulation you just randomly choose some hyper parameters put them in the simulation and see what",
    "start": "2562560",
    "end": "2567760"
  },
  {
    "text": "happens or you do some other more like hill climbing some other more algorithms to actually find this",
    "start": "2567760",
    "end": "2572960"
  },
  {
    "text": "out but the idea here really is run multiverse is the idea to run many of",
    "start": "2572960",
    "end": "2578240"
  },
  {
    "text": "those simulations the simulations themselves and i come back to that in a minute are quite fast",
    "start": "2578240",
    "end": "2584079"
  },
  {
    "text": "so i did not make them multi-threaded it also didn't make much sense because the creatures they do so little and then the",
    "start": "2584079",
    "end": "2590319"
  },
  {
    "text": "coordination for multiple threads with accessing memory would be so expensive that it didn't make any sense so each",
    "start": "2590319",
    "end": "2596240"
  },
  {
    "text": "simulation runs in its own thread but if i want to run 10 000 simulations of course i can use my cpu cores and assign",
    "start": "2596240",
    "end": "2603920"
  },
  {
    "text": "a simulation to each cpu course what i basically have here at the top i",
    "start": "2603920",
    "end": "2609520"
  },
  {
    "text": "have a function called the world function which when i invoke it it takes no parameters when i invoke it it",
    "start": "2609520",
    "end": "2615680"
  },
  {
    "text": "returns a new world an empty world with a set of parameters as the simulation once",
    "start": "2615680",
    "end": "2622079"
  },
  {
    "text": "it and you can see here i can actually inline the function declaration i don't have to do it as i showed you in the",
    "start": "2622079",
    "end": "2627760"
  },
  {
    "text": "other example where i'm saying f and then in the next line i'm saying what f is",
    "start": "2627760",
    "end": "2634280"
  },
  {
    "text": "and you can also see a little bit further down in line 25 typical convention um",
    "start": "2636240",
    "end": "2642000"
  },
  {
    "text": "constants are all uppercase num threads so on this machine there was an eight core machine that i did this example on",
    "start": "2642000",
    "end": "2647440"
  },
  {
    "text": "i defined it as 7 i wanted one thread to i don't know browse the web while i was running the simulation in the background",
    "start": "2647440",
    "end": "2652960"
  },
  {
    "text": "so basically it iterates over each like over the number of threads at once",
    "start": "2652960",
    "end": "2659280"
  },
  {
    "text": "and then what it does it actually spawns in that line as you can see in",
    "start": "2659280",
    "end": "2665599"
  },
  {
    "text": "line 26 it spawns a new thread and what i'm doing here is i'm passing in again an anonymous function these double bars",
    "start": "2665599",
    "end": "2672720"
  },
  {
    "text": "are nothing special they're just an empty parameter list i'm not passing any parameters to this function i'm passing a function that takes no parameters",
    "start": "2672720",
    "end": "2679760"
  },
  {
    "text": "and then you can see this function is now executed in the thread so on this machine this loop threatened number of",
    "start": "2679760",
    "end": "2687040"
  },
  {
    "text": "threads is seven so it iterates seven times and spawns seven threads and each thread then runs",
    "start": "2687040",
    "end": "2693760"
  },
  {
    "text": "as many times as it needs over the simulations and then runs the world with the threat number the simulation number",
    "start": "2693760",
    "end": "2700480"
  },
  {
    "text": "and the world function and here you see i'm invoking the world function so i'm calling it the return value is the world",
    "start": "2700480",
    "end": "2706560"
  },
  {
    "text": "so run world basically gets the world and it runs it in its own thread and there's actually zero problem at all",
    "start": "2706560",
    "end": "2713599"
  },
  {
    "text": "because of the way how rust is designed it just worked out of the box",
    "start": "2713599",
    "end": "2719440"
  },
  {
    "text": "i actually didn't tell you that yet this application i had written enclosure before the functional programming",
    "start": "2719440",
    "end": "2725200"
  },
  {
    "text": "language the lisp on the jvm if you will and i didn't even dare try to make this multi-threaded it just i mean maybe it",
    "start": "2725200",
    "end": "2732079"
  },
  {
    "text": "was me but i'm actually a reasonably competent closure programmer but there were so many cases where there were references that were kind of global or i",
    "start": "2732079",
    "end": "2738880"
  },
  {
    "text": "wasn't really sure whether they would be totally isolated and so on but in rus the way it was designed it was so easy",
    "start": "2738880",
    "end": "2744640"
  },
  {
    "text": "to do it to actually run this in multiple threads the one thing you haven't noticed or if",
    "start": "2744640",
    "end": "2751200"
  },
  {
    "text": "you have noticed but i haven't talked about it in line 26 move is a special keyword that can say",
    "start": "2751200",
    "end": "2756480"
  },
  {
    "text": "take everything that i'm using inside the closure and own it copy it over like you can see like the",
    "start": "2756480",
    "end": "2762880"
  },
  {
    "text": "variable t num and s num the threat number and simulation number i'm using from the outside i'm just saying forget",
    "start": "2762880",
    "end": "2768880"
  },
  {
    "text": "about what was in the other thread you are a new thread these are your copies they have nothing to do with the outside",
    "start": "2768880",
    "end": "2774000"
  },
  {
    "text": "world anymore this is of course important because otherwise if you think about it if i could have t num and i",
    "start": "2774000",
    "end": "2779520"
  },
  {
    "text": "would make it mutable i could change it in the thread and i would have a data race problem again",
    "start": "2779520",
    "end": "2785520"
  },
  {
    "text": "what you can also see though is when i'm spawning a thread i'm getting a handle back you can see",
    "start": "2786960",
    "end": "2792240"
  },
  {
    "text": "this here in the first line in 26 and then at the bottom in line 31 i'm just",
    "start": "2792240",
    "end": "2797520"
  },
  {
    "text": "pushing them and like many programming languages a stack is an array array is a stack if you will so that handles array",
    "start": "2797520",
    "end": "2804400"
  },
  {
    "text": "that i declared in line 23 you can see how i'm just pushing the handles onto it so after these lines of",
    "start": "2804400",
    "end": "2810079"
  },
  {
    "text": "code are done there's in this case seven threads running with the simulation they all have their work cut out they will run",
    "start": "2810079",
    "end": "2816240"
  },
  {
    "text": "one simulation after another we'll call the world function to create one and i have an array with",
    "start": "2816240",
    "end": "2821680"
  },
  {
    "text": "access to the threads what do i do as a good programmer i don't just i mean how do i continue these threads are",
    "start": "2821680",
    "end": "2827680"
  },
  {
    "text": "running in the background what do i want to do how do i clean up when everything ends so i need to join back the threads",
    "start": "2827680",
    "end": "2834880"
  },
  {
    "text": "and you can see here the handle's push is mirrored of course by a pop operation",
    "start": "2834880",
    "end": "2840480"
  },
  {
    "text": "to pop the handles off the stack and here you can see how a lot of the syntactic sugar in rust comes together",
    "start": "2840480",
    "end": "2846720"
  },
  {
    "text": "it handles pop of course is a stack implementation most of the times when programming languages use arrays for",
    "start": "2846720",
    "end": "2852880"
  },
  {
    "text": "stacks you have to signal the stack is empty in almost all cases you use null for that right you get an element back",
    "start": "2852880",
    "end": "2859119"
  },
  {
    "text": "or null if the if the stack is empty as i said russ doesn't really have it it uses options and what we can see here is",
    "start": "2859119",
    "end": "2866640"
  },
  {
    "text": "it can use destructuring for those of you who know javascript or other programming languages that have destructuring i can actually say this",
    "start": "2866640",
    "end": "2873280"
  },
  {
    "text": "here you can see some in brackets h so if pop returns something",
    "start": "2873280",
    "end": "2879599"
  },
  {
    "text": "then h is that something if pop returns none",
    "start": "2879599",
    "end": "2884880"
  },
  {
    "text": "then the destructuring doesn't work and then the while loop terminates",
    "start": "2884880",
    "end": "2890480"
  },
  {
    "text": "you can see this this while let let is creating a new variable the variable is called h but it's only declaring the",
    "start": "2890480",
    "end": "2896960"
  },
  {
    "text": "variable if the destructuring to sum works if the destruction doesn't work then the let says",
    "start": "2896960",
    "end": "2902960"
  },
  {
    "text": "i don't know i can't destructure this to how i want and and then the while loop finishes so",
    "start": "2902960",
    "end": "2908720"
  },
  {
    "text": "that's actually beautifully done i think so last but not least let's have a word",
    "start": "2908720",
    "end": "2915200"
  },
  {
    "start": "2911000",
    "end": "3357000"
  },
  {
    "text": "about performance i did mention this is actually a screenshot from a like a visualization of this simulation",
    "start": "2915200",
    "end": "2921680"
  },
  {
    "text": "you can see these creatures running around the green dots are the food and you can see that they're doing stuff",
    "start": "2921680",
    "end": "2927280"
  },
  {
    "text": "i wrote this enclosure this is actually the visualization of the closure version and in closure",
    "start": "2927280",
    "end": "2933520"
  },
  {
    "text": "on it was not this laptop it was a previous version of this laptop it had about it ran about 110 000 cycles per",
    "start": "2933520",
    "end": "2940400"
  },
  {
    "text": "second simulation cycles i mean for each creature like one of the cycles like the eight command would be ten cycles",
    "start": "2940400",
    "end": "2946400"
  },
  {
    "text": "turning would be one hundred ten thousand of those those cycles not per creature like each creature",
    "start": "2946400",
    "end": "2952319"
  },
  {
    "text": "right if there's a thousand creatures it would do 111 per second i was actually a little bit surprised",
    "start": "2952319",
    "end": "2957760"
  },
  {
    "text": "when i wrote the closure version how fast it actually was because i mean in closure i think about",
    "start": "2957760",
    "end": "2962880"
  },
  {
    "text": "it it's a functional language you have a lot of immutable data structures and there's a lot of state in this simulation where's the creature and i",
    "start": "2962880",
    "end": "2969200"
  },
  {
    "text": "want to change little parameters but it is so optimized on the jvm that is actually reasonably fast and i was",
    "start": "2969200",
    "end": "2974720"
  },
  {
    "text": "positively surprised about how fast the closure version was at the same time",
    "start": "2974720",
    "end": "2979760"
  },
  {
    "text": "if you think about it i was telling you i didn't know the hyper parameters this is a hobby project right i'm just playing with it",
    "start": "2979760",
    "end": "2985680"
  },
  {
    "text": "and i wanted to run 10 000 simulations and i did a back of the envelope calculation it was like three weeks or so i was like am i really gonna run the",
    "start": "2985680",
    "end": "2992640"
  },
  {
    "text": "laptop for three weeks in a row just running at 100 cpu probably not and i kind of lost a little",
    "start": "2992640",
    "end": "2998000"
  },
  {
    "text": "bit interest because i couldn't play with this it was more playful i wasn't the researcher obviously i was like okay",
    "start": "2998000",
    "end": "3003200"
  },
  {
    "text": "it is faster than i thought or it is fast but maybe not so that is useful that's also what prompted me to revisit",
    "start": "3003200",
    "end": "3009040"
  },
  {
    "text": "this um project when i wanted to learn rust so without further ado the first",
    "start": "3009040",
    "end": "3014640"
  },
  {
    "text": "implementation i did with rust it did 3.5 million cycles per second so that's quite a significant improvement",
    "start": "3014640",
    "end": "3021760"
  },
  {
    "text": "in performance and i wasn't totally unsurprised i thought that is roughly in line i've",
    "start": "3021760",
    "end": "3027040"
  },
  {
    "text": "programmed enough c in my life and i was like okay that looks pretty good and of course this is more than order of magnitude faster that would have already",
    "start": "3027040",
    "end": "3034000"
  },
  {
    "text": "brought the time into reasonable territory",
    "start": "3034000",
    "end": "3039119"
  },
  {
    "text": "and then i remembered something i was like okay there were these optimizer compilers right i mean you could optimize the",
    "start": "3039200",
    "end": "3045119"
  },
  {
    "text": "build this was the debug version that i'm compiling here which includes some bound checking and some other symbols",
    "start": "3045119",
    "end": "3050640"
  },
  {
    "text": "and so on and you from c that if you let the compiler optimize you can improve the performance a little bit",
    "start": "3050640",
    "end": "3056720"
  },
  {
    "text": "what i wasn't prepared for was this so i turned off the compile the compiler flag or turned on the compiler effect to",
    "start": "3056720",
    "end": "3063760"
  },
  {
    "text": "do an optimizing build the compiler takes longer then of course it needs to optimize but look at that it's almost another magnitude faster",
    "start": "3063760",
    "end": "3070559"
  },
  {
    "text": "it's 25 million cycles per second and that is now i find really significant and i will be very honest with you",
    "start": "3070559",
    "end": "3077520"
  },
  {
    "text": "i enjoyed programming the simulation enclosure more it was more fun i really like and i like writing closure and it",
    "start": "3077520",
    "end": "3084000"
  },
  {
    "text": "just felt better and there was so much idiomatic syntax and it was really cool to see and russ sometimes i showed you",
    "start": "3084000",
    "end": "3090160"
  },
  {
    "text": "the error messages like okay what do i have to do next how do i get over this borrow check all right but in the end",
    "start": "3090160",
    "end": "3096000"
  },
  {
    "text": "for this application it was totally worth it because it got me re-engaged with the application with this speed you",
    "start": "3096000",
    "end": "3101440"
  },
  {
    "text": "could run something that would take three weeks in the closure version over one night in the rust version and similarly if you are",
    "start": "3101440",
    "end": "3108400"
  },
  {
    "text": "i mean if you're writing a micro services based architecture you just buy more instances on aws or azure or gcp",
    "start": "3108400",
    "end": "3113920"
  },
  {
    "text": "right i mean because the programming time is too expensive but if you are using firefox on your desktop you want it to be fast",
    "start": "3113920",
    "end": "3120559"
  },
  {
    "text": "right and that's probably the reason why it's not written in another programming language why it is written in c or in rust now",
    "start": "3120559",
    "end": "3127839"
  },
  {
    "text": "so that was quite nice i'm not the only one who had this this is a quote by brian cantrell the",
    "start": "3127839",
    "end": "3133359"
  },
  {
    "text": "author of d-trace which is a kernel tracing utility i'll let you read it",
    "start": "3133359",
    "end": "3139839"
  },
  {
    "text": "so that completely mirrors my experience i was also just like",
    "start": "3147599",
    "end": "3153040"
  },
  {
    "text": "i know get this done get the closure version working i actually literally copy pasted the acceptance test from",
    "start": "3153040",
    "end": "3158319"
  },
  {
    "text": "closure into the rust um file change the syntax so the acceptance test would compile in rust and then when the",
    "start": "3158319",
    "end": "3165440"
  },
  {
    "text": "compiler was happy and the test was green i was like that's probably all right this is how i went about doing this and",
    "start": "3165440",
    "end": "3171280"
  },
  {
    "text": "brian actually went in a similar way just get it to work and here are his results he says this is",
    "start": "3171280",
    "end": "3177440"
  },
  {
    "text": "a modest state map or trace four million state transitions and the first implementation he did was",
    "start": "3177440",
    "end": "3184000"
  },
  {
    "text": "do that in node.js and we've heard a lot of things about node.js about how fast it is",
    "start": "3184000",
    "end": "3189440"
  },
  {
    "text": "i think every javascript framework a bit of a pet peeve of mine comes with this saying it's blazingly fast right i",
    "start": "3189440",
    "end": "3195359"
  },
  {
    "text": "always joke it's only blazingly fast if you've never seen anything but javascript",
    "start": "3195359",
    "end": "3200559"
  },
  {
    "text": "and i guess brian being somebody involved with more kernel code had a similar inclination and what he did is",
    "start": "3200559",
    "end": "3205599"
  },
  {
    "text": "he rewrote the core loop in that passing in c so we had a hybrid",
    "start": "3205599",
    "end": "3211200"
  },
  {
    "text": "implementation node.js on the outside but almost all the processing done in that c loop",
    "start": "3211200",
    "end": "3216480"
  },
  {
    "text": "and that's what it got down to 11.8 seconds so here we go blazing fast javascript right it is actually quite",
    "start": "3216480",
    "end": "3222079"
  },
  {
    "text": "interesting if you follow javascript in the um the packers that are being used in the pipelines like webpack and so on they",
    "start": "3222079",
    "end": "3228880"
  },
  {
    "text": "always used to be blazing fast and now the applications are getting bigger and bigger and people realize oh it is",
    "start": "3228880",
    "end": "3233920"
  },
  {
    "text": "actually not blazing fast anymore and now they've implemented bundlers and packers that are written in go and then",
    "start": "3233920",
    "end": "3239040"
  },
  {
    "text": "we say oh my god they're so fast and yeah like okay there is a difference there is a difference between languages",
    "start": "3239040",
    "end": "3244720"
  },
  {
    "text": "that like javascript also to a certain extent like java definitely like python and ruby and languages that are really",
    "start": "3244720",
    "end": "3251359"
  },
  {
    "text": "compiled to native like like for example rust and c so",
    "start": "3251359",
    "end": "3256960"
  },
  {
    "text": "that's that but i guess the number you're waiting for is how did the rust version perform and that is the result",
    "start": "3256960",
    "end": "3263440"
  },
  {
    "text": "so he didn't do any performance improvement and as i said he's very explicit about it the qr code if you",
    "start": "3263440",
    "end": "3268559"
  },
  {
    "text": "trust me enough you can click on it that is the article where he um the blog post where he describes it",
    "start": "3268559",
    "end": "3274400"
  },
  {
    "text": "he didn't do any performance tuning and the c version 99.9 of the time is spent in the c version and not in the",
    "start": "3274400",
    "end": "3280559"
  },
  {
    "text": "surrounding javascript code and yet the rust version is faster he dug into more detail than i understood to be",
    "start": "3280559",
    "end": "3286240"
  },
  {
    "text": "honest with you looking at how register allocated and so on in the end the rust compiler front end compiles to the",
    "start": "3286240",
    "end": "3292640"
  },
  {
    "text": "so-called llvm the low-level virtual machine that is also used by c by swift also by the way and that then generates",
    "start": "3292640",
    "end": "3299760"
  },
  {
    "text": "the machine code and apparently something the rust front-end compiler does that actually allows the underlying",
    "start": "3299760",
    "end": "3305680"
  },
  {
    "text": "optimization steps to be even more efficient so even without doing any specific rewriting and rust just getting",
    "start": "3305680",
    "end": "3310880"
  },
  {
    "text": "it work it allowed him to write code that was actually not on par with c which is often seen as the gold standard but was",
    "start": "3310880",
    "end": "3317599"
  },
  {
    "text": "faster this is not that common but it can definitely happen there's really good paper",
    "start": "3317599",
    "end": "3323440"
  },
  {
    "text": "by a couple of researchers that compared memory efficiency speed and energy efficiency",
    "start": "3323440",
    "end": "3329200"
  },
  {
    "text": "which is different from speed of different programming languages and you can see that rust is usually in the same",
    "start": "3329200",
    "end": "3334720"
  },
  {
    "text": "ballpark as c but sometimes it like this example shows it can even be faster and the good news",
    "start": "3334720",
    "end": "3340240"
  },
  {
    "text": "are because llvm this low-level virtual machine and the tool chain are used by so many programming languages any",
    "start": "3340240",
    "end": "3346640"
  },
  {
    "text": "improvements that are being done for example by apple to make swift faster will also benefit rust because it",
    "start": "3346640",
    "end": "3352559"
  },
  {
    "text": "uses the same compiler back end and that's all i wanted to say thank you",
    "start": "3352559",
    "end": "3358720"
  },
  {
    "start": "3357000",
    "end": "3374000"
  },
  {
    "text": "very much [Applause]",
    "start": "3358720",
    "end": "3367909"
  },
  {
    "text": "you",
    "start": "3372880",
    "end": "3374960"
  }
]