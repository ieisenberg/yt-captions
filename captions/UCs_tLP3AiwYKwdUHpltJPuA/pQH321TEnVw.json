[
  {
    "text": "[Applause]",
    "start": "5880",
    "end": "11880"
  },
  {
    "text": "so when I first started doing the slides for this talk I Wast a lot of time stuffing around with CSS because I'm a",
    "start": "11880",
    "end": "17880"
  },
  {
    "text": "front- end Dev and I put a little animation on this front slide and I realized nobody's ever seen it because",
    "start": "17880",
    "end": "24119"
  },
  {
    "text": "when you start it's done already so here you go",
    "start": "24119",
    "end": "30830"
  },
  {
    "text": "[Laughter] yeah I'm so glad someone's finally seen",
    "start": "30830",
    "end": "36480"
  },
  {
    "text": "that so me uh as Michelle said my name is Aon Zimmer uh contrary to what it",
    "start": "36480",
    "end": "42800"
  },
  {
    "text": "says on the website I don't work at Australia Post I now work at shine and",
    "start": "42800",
    "end": "48960"
  },
  {
    "text": "I'd like to thank them for letting me to come to this conference when I only started there last week",
    "start": "48960",
    "end": "56399"
  },
  {
    "text": "so I think I've actually spent more time here than in the office",
    "start": "56399",
    "end": "61879"
  },
  {
    "text": "uh you can hit me up on Twitter and my slides are available on GitHub um a word",
    "start": "61879",
    "end": "68000"
  },
  {
    "text": "of warning about the slides they are written in web components using HTML Imports so they're only going to work in",
    "start": "68000",
    "end": "75159"
  },
  {
    "text": "a browser that supports HTML Imports or as we normally call that",
    "start": "75159",
    "end": "80720"
  },
  {
    "text": "Chrome um what about all you folk who here writes JavaScript or typescript or",
    "start": "81479",
    "end": "87880"
  },
  {
    "text": "Elm or anything that gets to run in a browser cool hopefully this talk will be",
    "start": "87880",
    "end": "92960"
  },
  {
    "text": "interesting and relevant for you for everyone else um there's pictures of dinosaur I I was pretty pleased actually",
    "start": "92960",
    "end": "101079"
  },
  {
    "text": "on the way in from the airport I saw in the what is it the concert the concert hall they've got dinosaur skeletons",
    "start": "101079",
    "end": "106920"
  },
  {
    "text": "everywhere that's that's one of these ones so I thought that was pretty cool um so who's heard of the event",
    "start": "106920",
    "end": "114200"
  },
  {
    "text": "Loop cool have you're anything like me You' probably but like I was when I",
    "start": "114200",
    "end": "119280"
  },
  {
    "text": "started this whole journey you probably you know you've heard of it and you've got some idea that it's got something to",
    "start": "119280",
    "end": "126399"
  },
  {
    "text": "do with when your callbacks a run or something um but you don't really know",
    "start": "126399",
    "end": "131400"
  },
  {
    "text": "what's really going on so by the end of this talk we're going to have a really a really Crystal Clear idea of what's going on or like you know like 1080p",
    "start": "131400",
    "end": "138760"
  },
  {
    "text": "kind of level of clear um to do that let's start by",
    "start": "138760",
    "end": "145040"
  },
  {
    "text": "having a look what's going on inside our browser turns out that inside the browser there are a bunch of different",
    "start": "145040",
    "end": "152120"
  },
  {
    "text": "bits there's the bit that runs your JavaScript obviously there's a bit that handles",
    "start": "152120",
    "end": "157680"
  },
  {
    "text": "Network requests there's a bit that um handles timers so when you call set timeout and",
    "start": "157680",
    "end": "163720"
  },
  {
    "text": "set interval uh there's a bit that reads and writes to dis you guys remember when discs look like this",
    "start": "163720",
    "end": "170800"
  },
  {
    "text": "right there's a bit that handles user input so it tracks Mouse position um clicks keyboard input that kind of",
    "start": "170800",
    "end": "178319"
  },
  {
    "text": "stuff and there's a whole bunch of bits that deal with paing and rendering uh",
    "start": "178319",
    "end": "183720"
  },
  {
    "text": "HTML and CSS like managing the Dom and all that kind of stuff so all of these",
    "start": "183720",
    "end": "189239"
  },
  {
    "text": "bits that aren't the bit that runs your JavaScript collectively they're called the web",
    "start": "189239",
    "end": "195920"
  },
  {
    "text": "apis this bit that is the bit that runs your JavaScript is called the JavaScript engine or you might hear it referred to",
    "start": "196040",
    "end": "202680"
  },
  {
    "text": "as JavaScript VM there's a bunch of different JavaScript VMS geeking around",
    "start": "202680",
    "end": "208000"
  },
  {
    "text": "uh you might be familiar with V8 which Chrome and node and Opera if anybody's still using",
    "start": "208000",
    "end": "214840"
  },
  {
    "text": "that uh Edge has an engine called chakra uh web kit browsers like Safari",
    "start": "214840",
    "end": "222239"
  },
  {
    "text": "use squirrel fish and Firefox has an engine called uh",
    "start": "222239",
    "end": "227280"
  },
  {
    "text": "squirrel monkey I could not find a logo for that though so here is an actual",
    "start": "227280",
    "end": "232560"
  },
  {
    "text": "squirrel monkey so the event Loop is basically responsible for orchestration between",
    "start": "232560",
    "end": "238840"
  },
  {
    "text": "these web apis and the JavaScript engine and in its simplest form it looks something like this so it's an infinite",
    "start": "238840",
    "end": "245720"
  },
  {
    "text": "loop it's going to run forever uh each iteration of the loop it's going to take a task off the task CU and it's going to",
    "start": "245720",
    "end": "252239"
  },
  {
    "text": "run that task uh so while this code is uh nice",
    "start": "252239",
    "end": "257239"
  },
  {
    "text": "and succinct I guess it probably raises a couple of questions like what's a",
    "start": "257239",
    "end": "263639"
  },
  {
    "text": "task what's a task q and how do tasks get on the task Q these are all fair",
    "start": "263639",
    "end": "270880"
  },
  {
    "text": "questions um and we'll start with the first one a task is basically just a bit of JavaScript that's run in a particular",
    "start": "270880",
    "end": "277400"
  },
  {
    "text": "context so if we have a script tag like this the paer is going to read through",
    "start": "277400",
    "end": "282479"
  },
  {
    "text": "it's going to pause the JavaScript there and it's going to create a task and that task is then going to get",
    "start": "282479",
    "end": "290919"
  },
  {
    "text": "added to the task q and the event Loop is going to run through it so there's a",
    "start": "290919",
    "end": "296280"
  },
  {
    "text": "couple of important things here first of all tasks always run through to completion once a task starts running it",
    "start": "296280",
    "end": "303639"
  },
  {
    "text": "either runs the H way through and finishes or you've up and it",
    "start": "303639",
    "end": "308680"
  },
  {
    "text": "exits with an exception but there's no uh there's no concept of an interrupt in JavaScript",
    "start": "308680",
    "end": "314800"
  },
  {
    "text": "everything runs through start to finish also the task Q as the name",
    "start": "314800",
    "end": "320319"
  },
  {
    "text": "suggests is a queue so things get executed in the order that they arrive first in first",
    "start": "320319",
    "end": "327720"
  },
  {
    "text": "out um so I mean this is all pretty easy to understand I guess but it kind of seems like a bit of a a roundabout kind",
    "start": "327960",
    "end": "335160"
  },
  {
    "text": "of way to execute a bit of code right sort of Wonder like JavaScript why why",
    "start": "335160",
    "end": "342319"
  },
  {
    "text": "why are you like that and the answer has two",
    "start": "342319",
    "end": "349560"
  },
  {
    "text": "parts the first one is something that most people I think who write JavaScript know and that is Javascript is",
    "start": "350280",
    "end": "357840"
  },
  {
    "text": "single-threaded if you're writing JavaScript script you don't have to worry about all that crap with concurrency and locking and whatever I",
    "start": "357840",
    "end": "365240"
  },
  {
    "text": "don't know what any of that stuff I don't know how it works um you don't have to worry about it which is nice but",
    "start": "365240",
    "end": "371400"
  },
  {
    "text": "it's also important because every bit of JavaScript that's running in the browser",
    "start": "371400",
    "end": "376840"
  },
  {
    "text": "at some point it's going to interact with the Dom right otherwise what what would be the point the Dom is essentially this",
    "start": "376840",
    "end": "384639"
  },
  {
    "text": "massive data structure that is shared not only between all of the Java running",
    "start": "384639",
    "end": "390520"
  },
  {
    "text": "on your page but also potentially JavaScript running on other Pages which I'll show you later so it's really",
    "start": "390520",
    "end": "398160"
  },
  {
    "text": "important that we have a mechanism to lock this I guess so you don't have multiple um bits of JavaScript accessing",
    "start": "398160",
    "end": "404319"
  },
  {
    "text": "it at the same time so yeah JavaScript is single threaded browsers however have a",
    "start": "404319",
    "end": "412720"
  },
  {
    "text": "shitload of threats if you remember our diagram from before with all of these things these guys they're all running in",
    "start": "412720",
    "end": "419879"
  },
  {
    "text": "their own threads this is this is how asynchronous programming can even work in JavaScript right if the these all",
    "start": "419879",
    "end": "426319"
  },
  {
    "text": "need to be able to run a different threads so they can run at the same time otherwise you'd have to sit there blocking every time you write made a",
    "start": "426319",
    "end": "432479"
  },
  {
    "text": "network request so what does that look like so say I wanted to call one of these web",
    "start": "432479",
    "end": "438400"
  },
  {
    "text": "apis I'm going to call set timeout um and I'm going to pass it a callback and ask for a delay of three seconds so",
    "start": "438400",
    "end": "446160"
  },
  {
    "text": "what's going to happen in the browser the engine's going to say hey web API could you wait three seconds and then",
    "start": "446160",
    "end": "453039"
  },
  {
    "text": "run this call back for me and the web API is going to say no worries you keep doing what you're doing and I'll take",
    "start": "453039",
    "end": "459800"
  },
  {
    "text": "care of this thing so here we have our browser our engine is going to keep",
    "start": "459800",
    "end": "466360"
  },
  {
    "text": "doing its thing on the okay when you're talking like this I always get mixed up the little clock guy is that on the left",
    "start": "466360",
    "end": "472919"
  },
  {
    "text": "or the right okay because it's on my left and I don't know all that's that's call that",
    "start": "472919",
    "end": "478960"
  },
  {
    "text": "the right all right so we've got the JavaScript running on the left uh the the JavaScript engine running on the",
    "start": "478960",
    "end": "485000"
  },
  {
    "text": "left and the timeout running on the right and they're going to run both at the same time JavaScript engine is going to keep doing what it's doing time is",
    "start": "485000",
    "end": "491520"
  },
  {
    "text": "going to run until the 3 seconds runs out at that point the time the the web API is going to say hey JavaScript",
    "start": "491520",
    "end": "498639"
  },
  {
    "text": "engine I've waited three seconds now I need you to run that callback that you wanted to run and the JavaScript engine",
    "start": "498639",
    "end": "503759"
  },
  {
    "text": "is going to say piss off I'm busy right now but that's okay because we can add",
    "start": "503759",
    "end": "509639"
  },
  {
    "text": "it to the queue the engine can finish what it was doing before and then it can run our",
    "start": "509639",
    "end": "516200"
  },
  {
    "text": "callback and everything works fine um so in the grander scheme for",
    "start": "516200",
    "end": "522200"
  },
  {
    "text": "instance we could have a web page running uh it's maybe paing some script tags the user is interacting with it",
    "start": "522200",
    "end": "527480"
  },
  {
    "text": "because they always do that um we've got some timers running we made some Network requests and all of these things can be",
    "start": "527480",
    "end": "533720"
  },
  {
    "text": "happening in parallel while the JavaScript engine is just running one thing at a time single threaded so so",
    "start": "533720",
    "end": "539680"
  },
  {
    "text": "the event Loop essentially provides like a funnel between the multi-threaded um nature of the browser",
    "start": "539680",
    "end": "547480"
  },
  {
    "text": "into the single threaded nature of the engine so that's the event",
    "start": "547480",
    "end": "555560"
  },
  {
    "text": "Loop uh super easy right yeah cool because it turns out",
    "start": "555560",
    "end": "563120"
  },
  {
    "text": "it's a little bit more complicated than that you see the task Q runs in",
    "start": "563120",
    "end": "568320"
  },
  {
    "text": "conjunction with the rendering pip P line and the rendering pipeline is responsible for everything that you see displayed on the screen right so every",
    "start": "568320",
    "end": "574519"
  },
  {
    "text": "time you update the Dom you change your CSS anything that needs to be laid out again that's what the rendering pipeline",
    "start": "574519",
    "end": "581320"
  },
  {
    "text": "does the way that it works is so we've got our web apis across the top again",
    "start": "581320",
    "end": "587519"
  },
  {
    "text": "we've got the rendering Pipeline on the right and the task on the left and the rule is that anytime the",
    "start": "587519",
    "end": "594720"
  },
  {
    "text": "event Loop finishes processing a task then it can run the rendering pipeline it doesn't always run the rendering",
    "start": "594720",
    "end": "600880"
  },
  {
    "text": "pipeline though because um browsers are clever and they they don't like doing",
    "start": "600880",
    "end": "605959"
  },
  {
    "text": "extra work and the rendering pipeline knows that there's no point in calculating all of that layout on the",
    "start": "605959",
    "end": "611399"
  },
  {
    "text": "screen because these are expensive calculations it knows there's no point doing all that work unless the screen is",
    "start": "611399",
    "end": "616839"
  },
  {
    "text": "about to refresh right so most screens are running at 60 Herz um so it's going to run every 16",
    "start": "616839",
    "end": "624279"
  },
  {
    "text": "milliseconds so if we run our task this is slowed down in case that",
    "start": "624279",
    "end": "630839"
  },
  {
    "text": "wasn't obvious the task finishes and after the 16 milliseconds",
    "start": "630839",
    "end": "636639"
  },
  {
    "text": "have finished then the rendering pipeline will run obviously sitting around doing nothing like that for all",
    "start": "636639",
    "end": "642600"
  },
  {
    "text": "that time is a bit of a waste so in the real world h on it's ready to render",
    "start": "642600",
    "end": "648120"
  },
  {
    "text": "again in the real world the browser is going to run a couple of",
    "start": "648120",
    "end": "653160"
  },
  {
    "text": "tasks um so the running pipeline is not ready to run it'll run another task remember earlier I said though that",
    "start": "653160",
    "end": "658760"
  },
  {
    "text": "tasks can't be interrupted so if the um if the engine is partway through a task",
    "start": "658760",
    "end": "665880"
  },
  {
    "text": "when it gets to the 15 the 16 milliseconds then it has to finish that",
    "start": "665880",
    "end": "672000"
  },
  {
    "text": "task the rendering pipeline has to wait now if I mean if you lose a couple",
    "start": "672000",
    "end": "678399"
  },
  {
    "text": "of milliseconds here and there it's not really going to matter that's fine but if you have a lot of tasks that run",
    "start": "678399",
    "end": "685120"
  },
  {
    "text": "really long or a really long time of like or one that runs a really long time over 16 milliseconds",
    "start": "685120",
    "end": "690639"
  },
  {
    "text": "browser is going to start dropping frames and your page is going to run really",
    "start": "690639",
    "end": "697399"
  },
  {
    "text": "janky so there are ways to deal with this and one way is if you've got a long",
    "start": "700200",
    "end": "706120"
  },
  {
    "text": "running task break it up into smaller tasks so here we've got a function that",
    "start": "706120",
    "end": "711760"
  },
  {
    "text": "you pass in a callback and it's going to run it multiple times that could be a big number so rather than running you",
    "start": "711760",
    "end": "718839"
  },
  {
    "text": "know one 10,000 times which is going to take a long time it's just going to run it once and then it's going to create a new",
    "start": "718839",
    "end": "725600"
  },
  {
    "text": "task and pass in back into itself recursively so you'll still get a loop",
    "start": "725600",
    "end": "730760"
  },
  {
    "text": "that runs through you know 10,000 times but each iteration is going to be in its own task which means that the rendering",
    "start": "730760",
    "end": "737160"
  },
  {
    "text": "pipeline will have an opportunity to to repaint the screen after each",
    "start": "737160",
    "end": "742720"
  },
  {
    "text": "iteration um I mean this is one way to do it it works okay in this particular",
    "start": "742720",
    "end": "748560"
  },
  {
    "text": "use case um if the action itself took a long time it would still like make the page janky",
    "start": "748560",
    "end": "755120"
  },
  {
    "text": "so it's not the best way to do it the best way to do it is to use web workers so to uh create a web worker we",
    "start": "755120",
    "end": "761920"
  },
  {
    "text": "can create a script which is listening for an on message event see events",
    "start": "761920",
    "end": "768000"
  },
  {
    "text": "everywhere um which is just doing the same thing as I Loop before right except it's just in a full loop it's going to run through and call that action however",
    "start": "768000",
    "end": "774320"
  },
  {
    "text": "many times they're in the the repeats in our main um application code we just",
    "start": "774320",
    "end": "779639"
  },
  {
    "text": "create a a worker and pass it that script and then we pass it a message um and that will work without",
    "start": "779639",
    "end": "787480"
  },
  {
    "text": "breaking any rendering yay so why don't web workers interfere with rendering the answer to that is in",
    "start": "787480",
    "end": "795639"
  },
  {
    "text": "the spec it's uh it's really straightforward very simple uh each work of global scope object has a distinct",
    "start": "795639",
    "end": "801680"
  },
  {
    "text": "event Loop separate from those used by units of related similar origin browsing",
    "start": "801680",
    "end": "807240"
  },
  {
    "text": "contexts right you you all got that it's just saying each web worker has its own event",
    "start": "807240",
    "end": "813279"
  },
  {
    "text": "Loop so this looks something like this we've got our uh main browser window on",
    "start": "813279",
    "end": "819120"
  },
  {
    "text": "the right and the web worker on the the web worker on the left and you can see our browser can do",
    "start": "819120",
    "end": "825320"
  },
  {
    "text": "all of its stuff create some events it can send a message to the web worker which might",
    "start": "825320",
    "end": "831320"
  },
  {
    "text": "make some Network requests might create some timeouts whatever can send a message back you can see those two things are operating completely",
    "start": "831320",
    "end": "838519"
  },
  {
    "text": "independently of each other so they can't interfere with each other um they're essentially running in",
    "start": "838519",
    "end": "844360"
  },
  {
    "text": "two separate threads um they are completely isolated",
    "start": "844360",
    "end": "850480"
  },
  {
    "text": "the web worker doesn't have access to any data structure that's touched by the main browser so they don't share a Dom",
    "start": "850480",
    "end": "857480"
  },
  {
    "text": "um they don't even share when you post messages between them all of that is po is passed by copies of the data so they",
    "start": "857480",
    "end": "864720"
  },
  {
    "text": "can't interact with each other any other way uh the worker event Loop looks just",
    "start": "864720",
    "end": "870399"
  },
  {
    "text": "like the main event Loop except a bit simpler um it doesn't have to deal with",
    "start": "870399",
    "end": "875639"
  },
  {
    "text": "any user interactions it doesn't have a rendering pipeline obviously because it doesn't have a Dom and it's not allowed to touch",
    "start": "875639",
    "end": "881639"
  },
  {
    "text": "the Dom at all so party",
    "start": "881639",
    "end": "887639"
  },
  {
    "text": "um if you're wondering if you can use web workers in your particular application the answer is a pretty",
    "start": "887639",
    "end": "895440"
  },
  {
    "text": "resounding yes like unless you're supporting ie9 or some old version of",
    "start": "895440",
    "end": "901320"
  },
  {
    "text": "Android browser then yeah you can use web workers um the one red one on the",
    "start": "901320",
    "end": "906600"
  },
  {
    "text": "line that is the the current browsers is Opera Mini if you've got something that needs a web worker it is not going to",
    "start": "906600",
    "end": "913079"
  },
  {
    "text": "run in Opera Mini anyway so you've got other problems to deal",
    "start": "913079",
    "end": "918360"
  },
  {
    "text": "with cool so web workers run in separate threads they're not the only reason that",
    "start": "918360",
    "end": "923839"
  },
  {
    "text": "a browser might run JavaScript in multiple threads though if you've ever had a bunch of tab",
    "start": "923839",
    "end": "929160"
  },
  {
    "text": "open in Chrome and you've opened the task manager or the activity monitor on a Mac you will see something like",
    "start": "929160",
    "end": "937480"
  },
  {
    "text": "this this is because Chrome opens every single uh tab I just saw the other",
    "start": "937480",
    "end": "942959"
  },
  {
    "text": "mitter down there Chrome runs every single tab in",
    "start": "942959",
    "end": "949399"
  },
  {
    "text": "its own process so every tab has its own event Loop which means that there's no data sharing between them also means",
    "start": "949399",
    "end": "956079"
  },
  {
    "text": "that different tabs can't um impact the performance of other tabs everything's nice and sandboxed and separated out",
    "start": "956079",
    "end": "962600"
  },
  {
    "text": "into separate threads um Chrome does this but browsers don't have to work this way right so",
    "start": "962600",
    "end": "968839"
  },
  {
    "text": "Firefox uses a different model if you were to open all of these same tabs in Firefox you would get this that's one",
    "start": "968839",
    "end": "976079"
  },
  {
    "text": "process for the browser itself one process for your extensions and up to four processes for your tabs so if",
    "start": "976079",
    "end": "982959"
  },
  {
    "text": "you've got more than four tabs open some of those tabs are sharing a process and they're sharing an event Loop Loop so",
    "start": "982959",
    "end": "990240"
  },
  {
    "text": "they could potentially affect each other performance-wise um obviously this has some D drawbacks",
    "start": "990240",
    "end": "997800"
  },
  {
    "text": "due to that but the big Advantage is that it means that you have some Ram left over to do other",
    "start": "997800",
    "end": "1003480"
  },
  {
    "text": "things so uh yeah like I said it's up to up to the browsers whether they prefer to use",
    "start": "1003480",
    "end": "1009279"
  },
  {
    "text": "this sort of sharing model or if they prefer to keep everything tightly um locked away I don't know what",
    "start": "1009279",
    "end": "1016560"
  },
  {
    "text": "this is a photo of I um yeah so there's one exception to that",
    "start": "1016560",
    "end": "1023399"
  },
  {
    "text": "and that is uh shared browsing contexts so if you've got a page that has an iframe or that opens a child window",
    "start": "1023399",
    "end": "1030000"
  },
  {
    "text": "those two things have to be on the same on the same event Loop because they share some stuff so for instance here we",
    "start": "1030000",
    "end": "1037678"
  },
  {
    "text": "have a link that is going to open a child window like so just make this a bit",
    "start": "1037679",
    "end": "1045678"
  },
  {
    "text": "smaller and put it over here so we can see both of them so this button when I click it it",
    "start": "1047840",
    "end": "1054919"
  },
  {
    "text": "basically runs a while loop for like 5 seconds so it's holding up the rendering",
    "start": "1054919",
    "end": "1061039"
  },
  {
    "text": "pipeline um just wait for the dinosaur to come back so if I click on this come back",
    "start": "1061039",
    "end": "1066760"
  },
  {
    "text": "dinosaur you can see that this page is stuck because it can't reender but also our dinosaur is stuck because it can't",
    "start": "1066760",
    "end": "1073640"
  },
  {
    "text": "render either because these two things share an event Loop even though there",
    "start": "1073640",
    "end": "1078799"
  },
  {
    "text": "separate tabs and we're in Chrome um there is a reason for that though like I said they share some data",
    "start": "1078799",
    "end": "1085000"
  },
  {
    "text": "structures so they have access to each other's Dom so I can",
    "start": "1085000",
    "end": "1091440"
  },
  {
    "text": "do no not document do a",
    "start": "1091440",
    "end": "1096600"
  },
  {
    "text": "do does anybody have a favorite um CSS color Rebecca purple all right",
    "start": "1100799",
    "end": "1110760"
  },
  {
    "text": "so I can control the color of the background of that parent window from the child window the reason the dinosaur",
    "start": "1112000",
    "end": "1117840"
  },
  {
    "text": "is still in a black background is because it's actually in an ey frame but that is not a",
    "start": "1117840",
    "end": "1125760"
  },
  {
    "text": "problem oh",
    "start": "1137720",
    "end": "1144679"
  },
  {
    "text": "typing don't need that body all right do you want Rebecca",
    "start": "1146679",
    "end": "1151960"
  },
  {
    "text": "purple again or do we have another color purple it is oh no forgot Style ah",
    "start": "1151960",
    "end": "1160960"
  },
  {
    "text": "a DOT all right so we can control both of those from the child window um this looks like a security",
    "start": "1160960",
    "end": "1168919"
  },
  {
    "text": "problem it's not because these things have to be on the same origin and presumably you're not going to try and",
    "start": "1168919",
    "end": "1174840"
  },
  {
    "text": "hack yourself um previously there was a bit",
    "start": "1174840",
    "end": "1180320"
  },
  {
    "text": "of a security risk here because even a cross origin child window could actually control the Navigator option object of",
    "start": "1180320",
    "end": "1188039"
  },
  {
    "text": "the parent window which meant you could open a child window it could go back and change the page that the parent window was on um but somebody noticed and I",
    "start": "1188039",
    "end": "1196480"
  },
  {
    "text": "think all of the major browsers have patched that V unability that said if you do open a child window even on a",
    "start": "1196480",
    "end": "1202480"
  },
  {
    "text": "different domain it is going to be still running in the same event loop as your window so there is still the the risk of",
    "start": "1202480",
    "end": "1209000"
  },
  {
    "text": "having the performance issues like I showed you there where a slow script in the child window can um slow down the parent window luckily there is a",
    "start": "1209000",
    "end": "1218519"
  },
  {
    "text": "fix um should we keep the slides purple",
    "start": "1219520",
    "end": "1224280"
  },
  {
    "text": "or I think there might be some contrast issues later on",
    "start": "1225120",
    "end": "1230159"
  },
  {
    "text": "um so yeah we can fix this just by adding this rail equals no opener attribute anytime we're opening a child",
    "start": "1230159",
    "end": "1235280"
  },
  {
    "text": "window so we do that now um we can see that if I run this again this",
    "start": "1235280",
    "end": "1243080"
  },
  {
    "text": "Windows stop stopped but the dinosaur still keeps running and I no longer have access to",
    "start": "1243080",
    "end": "1251080"
  },
  {
    "text": "that parent um window window. opener is now null so we've solved that",
    "start": "1251080",
    "end": "1257600"
  },
  {
    "text": "problem",
    "start": "1257600",
    "end": "1260600"
  },
  {
    "text": "so now our event Loop looks like this it's still an infinite Loop every iteration we're going to grab a task off",
    "start": "1263480",
    "end": "1269880"
  },
  {
    "text": "the task you and we're going to run that task and then if it's time to repaint we'll repaint are we all cool with this",
    "start": "1269880",
    "end": "1277120"
  },
  {
    "text": "cool because it turns out it's a little bit more complicated than this if you were to uh sit down and read",
    "start": "1277120",
    "end": "1285559"
  },
  {
    "text": "through the spec which I I mean that's how I spend my weekends I don't know about about all of you but you would",
    "start": "1285559",
    "end": "1291520"
  },
  {
    "text": "learned that an event Loop can have one or more task cues uh so at this point I kind of have",
    "start": "1291520",
    "end": "1298360"
  },
  {
    "text": "to level with you I I was writing my slides and I thought what I'll do is I'll show you how an event Loop has",
    "start": "1298360",
    "end": "1303799"
  },
  {
    "text": "multiple task cues I'll go and I'll have a look at like an open source browser and I'll see how it implements the event",
    "start": "1303799",
    "end": "1309279"
  },
  {
    "text": "Loop and I'll um I'll see how many task cues it's got and I'll be able to show you a real proper demo but I'm a I'm a",
    "start": "1309279",
    "end": "1316919"
  },
  {
    "text": "JavaScript developer and browsers by and large are written in",
    "start": "1316919",
    "end": "1322679"
  },
  {
    "text": "C++ C++ it turns out is mostly punctuation and the word",
    "start": "1322679",
    "end": "1328919"
  },
  {
    "text": "delegate so I don't know what's going on there instead we're going to look at a",
    "start": "1333080",
    "end": "1338320"
  },
  {
    "text": "theoretical browser with multiple event uh event no multiple task cues uh to be fair this example is",
    "start": "1338320",
    "end": "1345799"
  },
  {
    "text": "actually the example that's given in the spec so I didn't just make it up somebody else just made it",
    "start": "1345799",
    "end": "1352240"
  },
  {
    "text": "up so this browser has two task cues and it prioritizes user input so how that",
    "start": "1352240",
    "end": "1358360"
  },
  {
    "text": "works is if we have user input it goes in the user input queue if we have",
    "start": "1358360",
    "end": "1363520"
  },
  {
    "text": "anything else it goes in the everything else cue and each so each turn of the event",
    "start": "1363520",
    "end": "1370960"
  },
  {
    "text": "Loop now the browser has to pick a cue to choose from and in this particular case it's going to choose user input if",
    "start": "1370960",
    "end": "1376799"
  },
  {
    "text": "there's user input in the queue it's going to run that once that user input queue is empty then it'll go back to",
    "start": "1376799",
    "end": "1382320"
  },
  {
    "text": "processing the other queue um everything else stays the same right the task still run start to finish you can still run",
    "start": "1382320",
    "end": "1388600"
  },
  {
    "text": "the rendering pipeline after each um task finishes all of that still the same",
    "start": "1388600",
    "end": "1394520"
  },
  {
    "text": "um I mean it's pretty pretty straightforward there's a there's a couple of rules so the first one is that the q's",
    "start": "1394520",
    "end": "1401240"
  },
  {
    "text": "can be executed in any order which isn't really a rule it's kind of like the opposite of a rule but that's it's up to",
    "start": "1401240",
    "end": "1407600"
  },
  {
    "text": "the browsers so we could have said pick three three tasks of one Q four tasks of the other whatever it's up to the",
    "start": "1407600",
    "end": "1413919"
  },
  {
    "text": "browser um The Q's are still Q's so the tasks have to be executed in the order that they arrive and tasks from the same",
    "start": "1413919",
    "end": "1421679"
  },
  {
    "text": "Source have to go in the same queue so if you have a queue that has all of your timer tasks all of your timer tasks have",
    "start": "1421679",
    "end": "1428279"
  },
  {
    "text": "to go in there um to be honest this isn't going to affect your life at all I",
    "start": "1428279",
    "end": "1433360"
  },
  {
    "text": "don't it's just in there for completeness I guess I wanted you to get used to the idea of multiple cues",
    "start": "1433360",
    "end": "1439600"
  },
  {
    "text": "so this is how event Loop looks now it's still an infinite loop at each iteration we're going to pick a Q and then we're",
    "start": "1439600",
    "end": "1446200"
  },
  {
    "text": "going to take the first task off that queue we're going to run that task and then if it's time to repaint we'll",
    "start": "1446200",
    "end": "1452000"
  },
  {
    "text": "repaint are we all cool with that awesome because it turns out it's a",
    "start": "1452000",
    "end": "1458120"
  },
  {
    "text": "little bit more complicated than that we also have microtask",
    "start": "1458120",
    "end": "1463799"
  },
  {
    "text": "cues so microtasks are a tasks that can happen",
    "start": "1463799",
    "end": "1469159"
  },
  {
    "text": "between tasks uh there's a couple of different ways you can get them so do anybody here",
    "start": "1469159",
    "end": "1474640"
  },
  {
    "text": "use mutation observers nobody okay oh one one person",
    "start": "1474640",
    "end": "1481279"
  },
  {
    "text": "so a mutation Observer is a thing that you can do where you watch an element in the Dom and when it changes your",
    "start": "1481279",
    "end": "1487320"
  },
  {
    "text": "callback gets fired so if it gets resized it gets things added to it whatever your callback gets fired um and that callback is executed",
    "start": "1487320",
    "end": "1494720"
  },
  {
    "text": "as a microtask the more common use for microtasks is promises if you create a",
    "start": "1494720",
    "end": "1501320"
  },
  {
    "text": "promise when you call the then call back or the catch call back those things are microtasks thirdly you can create a",
    "start": "1501320",
    "end": "1509000"
  },
  {
    "text": "microtask by calling window. q microtask and passing it a callback window. Q",
    "start": "1509000",
    "end": "1515159"
  },
  {
    "text": "microtask is currently implemented in approximately zero browsers so if you're",
    "start": "1515159",
    "end": "1521200"
  },
  {
    "text": "going to do that you might have to do it sometime in the future okay so how does it actually",
    "start": "1521200",
    "end": "1527039"
  },
  {
    "text": "work so so say we've got uh we've got our microtask queue there in yellow next",
    "start": "1527039",
    "end": "1532559"
  },
  {
    "text": "to the um next to the rendering pipeline so we're going to run some tasks we're going to do some stuff and we're going",
    "start": "1532559",
    "end": "1538720"
  },
  {
    "text": "to have a promise and the promise call pack is going to go in the microtask queue the microtask Q is going to get",
    "start": "1538720",
    "end": "1545159"
  },
  {
    "text": "run every time a task finishes so we finish a",
    "start": "1545159",
    "end": "1551440"
  },
  {
    "text": "task we run run the microtask queue if there's a few things in the microtask queue we're going to run all of those",
    "start": "1551440",
    "end": "1557799"
  },
  {
    "text": "things if we add more things to the microtask CU while it's running we're going to run those things too and you'll",
    "start": "1557799",
    "end": "1565039"
  },
  {
    "text": "notice the microtas Q takes priority over the rendering pipeline the rendering pipeline can't run until",
    "start": "1565039",
    "end": "1570320"
  },
  {
    "text": "everything in the microtask Q has run so we can have a look at a quick demo of like the implications of that I",
    "start": "1570320",
    "end": "1578440"
  },
  {
    "text": "guess so tasks versus microtasks we start with tasks so real",
    "start": "1578440",
    "end": "1584320"
  },
  {
    "text": "simple bit of code we're going to click the button it's going to call this start function we is going to find an element on the page it's going to set the inner",
    "start": "1584320",
    "end": "1591039"
  },
  {
    "text": "HTML of that element to the number of tasks that have run and then it's going to increment the number of tasks then",
    "start": "1591039",
    "end": "1596480"
  },
  {
    "text": "it's create a new task by calling set timeout which just recursively calls itself so it's essentially an infinite",
    "start": "1596480",
    "end": "1601799"
  },
  {
    "text": "Loop made of tasks so if we click the button it starts counting it's it's pretty boring",
    "start": "1601799",
    "end": "1608480"
  },
  {
    "text": "but you can see even though this is an infinite Loop because their tasks the rendering pipeline gets a chance to run",
    "start": "1608480",
    "end": "1614279"
  },
  {
    "text": "so I can still interact with the page I can highlight text I can click stop we can all move on with our",
    "start": "1614279",
    "end": "1620480"
  },
  {
    "text": "lives if we do the same thing with microtasks it's almost like I know",
    "start": "1620480",
    "end": "1625520"
  },
  {
    "text": "something bad is going to happen so it's the same thing we're going to click the button it's going to",
    "start": "1625520",
    "end": "1631120"
  },
  {
    "text": "call our function we're going to find the element on the page we're going to set the in HTML to the number of microtasks that have run and increment",
    "start": "1631120",
    "end": "1637600"
  },
  {
    "text": "our counter and then we're going to create a new microtask using promise. resolve. then so if I click the button",
    "start": "1637600",
    "end": "1644399"
  },
  {
    "text": "we can immediately see everything has gone to  the button has rendered The Click",
    "start": "1644399",
    "end": "1649760"
  },
  {
    "text": "but it hasn't popped back up again I don't know if you can see the cursor there but it's still the little hand that you get when you hover over a",
    "start": "1649760",
    "end": "1655720"
  },
  {
    "text": "button I can't um select any of the text and I can't click the stop button which",
    "start": "1655720",
    "end": "1661960"
  },
  {
    "text": "wouldn't have helped anyway because I never implemented",
    "start": "1661960",
    "end": "1666240"
  },
  {
    "text": "it um if we leave this for a bit longer Chrome will notice that it's broken and",
    "start": "1668559",
    "end": "1673880"
  },
  {
    "text": "it will um let us stop the process but we don't have that kind of time okay so what's going on there we've run",
    "start": "1673880",
    "end": "1681159"
  },
  {
    "text": "our script we've clicked on the button and that callback has created a",
    "start": "1681159",
    "end": "1688760"
  },
  {
    "text": "microtask which has created a microtask which has created a microtask",
    "start": "1688799",
    "end": "1694600"
  },
  {
    "text": "and so on so as you can see because we keep creating microtasks the rendering pipeline never gets a chance to run so",
    "start": "1694600",
    "end": "1699919"
  },
  {
    "text": "we just get stuck with nothing being able to happen on the browser um so the moral of the story",
    "start": "1699919",
    "end": "1706240"
  },
  {
    "text": "here is don't create infinite Loops out of mic microtasks but also be aware that they",
    "start": "1706240",
    "end": "1711880"
  },
  {
    "text": "can um affect when you're rendering pipeline runs if you're doing a lot of stuff in",
    "start": "1711880",
    "end": "1717679"
  },
  {
    "text": "microtasks cool so now our event Loop looks like this it's still an infinite",
    "start": "1717919",
    "end": "1724159"
  },
  {
    "text": "Loop each iteration we're going to pick a que and then we're going to grab the",
    "start": "1724159",
    "end": "1729440"
  },
  {
    "text": "first task of the que and then we're going to run that task then as long as there are tasks in the microtask queue",
    "start": "1729440",
    "end": "1735919"
  },
  {
    "text": "we're going to run all of those and then if it's time to repaint we'll",
    "start": "1735919",
    "end": "1741799"
  },
  {
    "text": "repaint are we all cool with that cool because it turns out it's a",
    "start": "1741799",
    "end": "1748559"
  },
  {
    "text": "little bit more complicated than that we also have the animation frame",
    "start": "1748559",
    "end": "1753640"
  },
  {
    "text": "callback cue which is another special cue you can add things to the animation",
    "start": "1753640",
    "end": "1759760"
  },
  {
    "text": "queue by calling request animation frame and passing in a callback it's the question here is why",
    "start": "1759760",
    "end": "1767519"
  },
  {
    "text": "why would you do such a thing so imagine we have an animation of a square it's pretty exting I probably should have",
    "start": "1767519",
    "end": "1773679"
  },
  {
    "text": "used a dinosaur um this square is moving along sine wave so its position at any point",
    "start": "1773679",
    "end": "1778840"
  },
  {
    "text": "in time is just dependent on how much time has passed we can animate that it's pretty",
    "start": "1778840",
    "end": "1783960"
  },
  {
    "text": "straightforward so if we were to write the code for that our first naive attempt might look",
    "start": "1783960",
    "end": "1791000"
  },
  {
    "text": "something like this so we got a while loop that's going to keep running until the right hand side of the box or the",
    "start": "1791000",
    "end": "1797399"
  },
  {
    "text": "left hand side of whichever side we decided that was was is going to hit the right hand side of the screen and in",
    "start": "1797399",
    "end": "1803679"
  },
  {
    "text": "each iteration of the loop we're going to calculate how much time has passed and then we're going to set the X and Y",
    "start": "1803679",
    "end": "1808760"
  },
  {
    "text": "coordinates of the box if we do this we will get",
    "start": "1808760",
    "end": "1814279"
  },
  {
    "text": "this uh the the box is just going to appear in its final position without any animation and we're going to be",
    "start": "1814279",
    "end": "1820880"
  },
  {
    "text": "sad the reason this has happened is that what we've done is essentially this we've created a massive task that's",
    "start": "1820880",
    "end": "1827000"
  },
  {
    "text": "running through a w Loop calculating all the positions recalculating recalculating all the way through the while loop but it's all in",
    "start": "1827000",
    "end": "1833720"
  },
  {
    "text": "one task so the rendering pipeline can't run so it doesn't run until we finished all the calculations by which point the",
    "start": "1833720",
    "end": "1840880"
  },
  {
    "text": "box is already at the edge so we can try it again with",
    "start": "1840880",
    "end": "1847880"
  },
  {
    "text": "tasks this time we calculate the distance uh we calculate how much time has passed we calculate the position of",
    "start": "1847880",
    "end": "1854559"
  },
  {
    "text": "the box and then if the Box hasn't got to the end of the screen yet we create a",
    "start": "1854559",
    "end": "1859639"
  },
  {
    "text": "new task using set timeout which then calls the same uh function again",
    "start": "1859639",
    "end": "1865159"
  },
  {
    "text": "recursively right so this works spoiler alert it",
    "start": "1865159",
    "end": "1871240"
  },
  {
    "text": "works um because it looks something like this we're going to create a task and",
    "start": "1871240",
    "end": "1877480"
  },
  {
    "text": "then do the calculations create another task do the calculations create another task and the running pipeline is going",
    "start": "1877480",
    "end": "1883080"
  },
  {
    "text": "to get a chance to run hooray so our box is going to move and then we're going to keep going like that we can keep creating tasks keep doing the",
    "start": "1883080",
    "end": "1889760"
  },
  {
    "text": "calculations and every 16 milliseconds the rendering pipeline can run and our box can move along we get the nice",
    "start": "1889760",
    "end": "1895120"
  },
  {
    "text": "animation um you can probably see the drawback of this",
    "start": "1895120",
    "end": "1901159"
  },
  {
    "text": "method which is that like four out of five tasks get thrown out right we do",
    "start": "1901159",
    "end": "1908039"
  },
  {
    "text": "the calculation and then we don't use it we just do another calculation we don't use it then we do another calculation",
    "start": "1908039",
    "end": "1915480"
  },
  {
    "text": "until finally we do a calculation in the rendering pipeline runs so this is this is pretty wasteful",
    "start": "1915480",
    "end": "1922799"
  },
  {
    "text": "and the way that we can solve that is by using request animation frame so the reason request animation",
    "start": "1922799",
    "end": "1929880"
  },
  {
    "text": "framew Works to solve this problem is we have our script running we call request",
    "start": "1929880",
    "end": "1935600"
  },
  {
    "text": "animation frame the call back gets added to the to the animation frame cue there in the green next to the rendering",
    "start": "1935600",
    "end": "1942080"
  },
  {
    "text": "pipeline but that que only gets run when the rendering pipeline is about to run",
    "start": "1942080",
    "end": "1947919"
  },
  {
    "text": "we've got tasks here we create this guy that task is going to sit",
    "start": "1947919",
    "end": "1953279"
  },
  {
    "text": "there until the rendering pipeline is ready to run the rendering pipeline is ready to",
    "start": "1953279",
    "end": "1959960"
  },
  {
    "text": "run and then the animation frame tasks will get run if there are multiple",
    "start": "1959960",
    "end": "1966240"
  },
  {
    "text": "animation frame tasks in the queue they'll all get",
    "start": "1966240",
    "end": "1971559"
  },
  {
    "text": "run but if you add more while you're processing the queue those new ones AR",
    "start": "1971559",
    "end": "1977799"
  },
  {
    "text": "aren't going to get run and the reason for that is that we're probably using it like we were in our example where we're",
    "start": "1977799",
    "end": "1983919"
  },
  {
    "text": "calling request animation frame and within the callback for that we're setting up the next frame so obviously",
    "start": "1983919",
    "end": "1989480"
  },
  {
    "text": "we want to repaint between each frame cool so now we've got the top box",
    "start": "1989480",
    "end": "1997080"
  },
  {
    "text": "animated using request animation frame and the bottom box animated using set",
    "start": "1997080",
    "end": "2002559"
  },
  {
    "text": "timeout and as you can see they're like it's pretty identical they work pretty much the same",
    "start": "2002559",
    "end": "2009240"
  },
  {
    "text": "with the one important difference that by the time they get to the edge of the screen request animation frame has done",
    "start": "2009240",
    "end": "2015799"
  },
  {
    "text": "700 odd calculations and set timeout has done 2600 so like three and a half times as",
    "start": "2015799",
    "end": "2022919"
  },
  {
    "text": "many um uh the other thing is that this only works exactly the same because there's",
    "start": "2022919",
    "end": "2029000"
  },
  {
    "text": "nothing else happening on this page if there was a bunch of other stuff going on the set timeout task could get added",
    "start": "2029000",
    "end": "2035639"
  },
  {
    "text": "to the end of a long queue so it might not get run every time there's a frame so not only are you wasting calculations",
    "start": "2035639",
    "end": "2041279"
  },
  {
    "text": "it's not even doing anything so yeah request animation",
    "start": "2041279",
    "end": "2046679"
  },
  {
    "text": "frame again if you're wondering if you can use request animation frame in your particular application the answer is yes",
    "start": "2046679",
    "end": "2053520"
  },
  {
    "text": "unless you're using Opera Mini in which case again you've got bigger",
    "start": "2053520",
    "end": "2059000"
  },
  {
    "text": "problems and now our event Loop looks like this it's an infinite Loop every",
    "start": "2059119",
    "end": "2064679"
  },
  {
    "text": "iteration we're going to pick a q we're going to take the first task off that queue we're going to execute the task",
    "start": "2064679",
    "end": "2070760"
  },
  {
    "text": "we're going to run everything in the microtask queue then if it's time to repaint we're going to run everything that's currently in the animation frame",
    "start": "2070760",
    "end": "2077720"
  },
  {
    "text": "queue and then we're going to repaint cool are we all okay with that I",
    "start": "2077720",
    "end": "2083440"
  },
  {
    "text": "promise that's as complicated as it gets there is just one other small thing that we haven't spoken about and that is",
    "start": "2083440",
    "end": "2092320"
  },
  {
    "text": "node so who here writes node code cool quite a few people nice",
    "start": "2092320",
    "end": "2098240"
  },
  {
    "text": "well this is the bit you'll be interested in uh good news the node event Loop Works quite a lot like the",
    "start": "2098240",
    "end": "2103640"
  },
  {
    "text": "browser event Loop except it's a bit simpler um it has a set of apis much",
    "start": "2103640",
    "end": "2109920"
  },
  {
    "text": "like the web apis they're not called Web apis though because that would be",
    "start": "2109920",
    "end": "2115280"
  },
  {
    "text": "weird they're called The Unicorn Velociraptor library or lib",
    "start": "2115280",
    "end": "2121359"
  },
  {
    "text": "UV when I found out that that's what lib UV stands for I didn't even believe it but apparently that's a thing",
    "start": "2121359",
    "end": "2129480"
  },
  {
    "text": "um the node event Loop like I said it's a bit simpler uh there's no Dom so that's a whole bunch of worries that you",
    "start": "2129480",
    "end": "2135800"
  },
  {
    "text": "don't even have to care about obviously there's no rendering pipeline you're pretty Limited in user interactions so",
    "start": "2135800",
    "end": "2141359"
  },
  {
    "text": "you can like you can get a a user typing into a terminal or whatever but they're not free to just click on whenever",
    "start": "2141359",
    "end": "2147079"
  },
  {
    "text": "they feel like like they always do and there's none of that worry about",
    "start": "2147079",
    "end": "2152960"
  },
  {
    "text": "sharing uh an event Loop between various Windows because there aren't any",
    "start": "2152960",
    "end": "2159480"
  },
  {
    "text": "the other difference is that the browser event Loop keeps running forever in an",
    "start": "2159480",
    "end": "2164839"
  },
  {
    "text": "infinite Loop Round and Round and Round the node event Loop doesn't really work like that it um it'll run through if",
    "start": "2164839",
    "end": "2170720"
  },
  {
    "text": "there's tasks it'll run through a loop if there's more tasks waiting it'll run through another loop but once all the",
    "start": "2170720",
    "end": "2176280"
  },
  {
    "text": "tasks are done the process will exit so it looks like",
    "start": "2176280",
    "end": "2181920"
  },
  {
    "text": "this uh we've got three cues that are worth talking about uh they are the",
    "start": "2181920",
    "end": "2188480"
  },
  {
    "text": "event callback queue the check q and the timer queue so if we do stuff like make",
    "start": "2188480",
    "end": "2195480"
  },
  {
    "text": "um dis reads Network requests that kind of thing they're going to go in the event queue uh the check queue I will",
    "start": "2195480",
    "end": "2201680"
  },
  {
    "text": "get to in a minute and if we call set timeout or set interval it's going to go in the timer que um node cues are",
    "start": "2201680",
    "end": "2209640"
  },
  {
    "text": "referred to as phases because the way it runs basically it's going to start with the event phase it's going to run everything that's in the event Cube and",
    "start": "2209640",
    "end": "2216079"
  },
  {
    "text": "then it's going to move to the check phase and run everything that's in the check q and then it's going to move to the timer phase and run everything",
    "start": "2216079",
    "end": "2222000"
  },
  {
    "text": "that's in that that timer queue so it just runs everything everything everything through phases and then it goes back to the start",
    "start": "2222000",
    "end": "2228520"
  },
  {
    "text": "again uh the check Q you can add things to the check Q by calling set immediate",
    "start": "2228520",
    "end": "2234280"
  },
  {
    "text": "and passing it a call back it basically just works the same as set timeout with no delay uh the difference being that if",
    "start": "2234280",
    "end": "2240839"
  },
  {
    "text": "you call set time out with no delay and you also call set immediate set immediate will get called first because of the order that the cues are",
    "start": "2240839",
    "end": "2249119"
  },
  {
    "text": "in um yeah node also has two microtask cues no I don't know why um one of them",
    "start": "2249119",
    "end": "2257960"
  },
  {
    "text": "is for promises it just works exactly the same as the browser one the other microtask Q is the next",
    "start": "2257960",
    "end": "2264880"
  },
  {
    "text": "tick Q you can add things to the next tick que by calling process. next tick and passing it a call back um it's sort",
    "start": "2264880",
    "end": "2271920"
  },
  {
    "text": "of intended as a way to let you um if something fails you can finish the process running and then do the error",
    "start": "2271920",
    "end": "2277560"
  },
  {
    "text": "handling later in a like in a microtask so it's not spread out over another task",
    "start": "2277560",
    "end": "2283000"
  },
  {
    "text": "but yeah that's the thing um yeah so we have events timers whatever going",
    "start": "2283000",
    "end": "2288640"
  },
  {
    "text": "on um as soon as a task is finished um being processed then we'll",
    "start": "2288640",
    "end": "2296400"
  },
  {
    "text": "do the microtasks the next TI Q is processed first and then the promise que um yeah I mean like I said it's it's",
    "start": "2296400",
    "end": "2303760"
  },
  {
    "text": "pretty similar to the browser it's pretty straightforward there's just that there's two new things of uh set",
    "start": "2303760",
    "end": "2308839"
  },
  {
    "text": "immediate and process. next tick if you have trouble remembering them it's pretty simple set immediate does",
    "start": "2308839",
    "end": "2314000"
  },
  {
    "text": "something on the next tick process. next tick does something",
    "start": "2314000",
    "end": "2319160"
  },
  {
    "text": "immediately naming things is hard I guess so the node event Loop is a not",
    "start": "2320440",
    "end": "2328760"
  },
  {
    "text": "infinite loop it's just going to keep looping as long as there are tasks waiting to be processed each iteration we're going to",
    "start": "2328760",
    "end": "2335760"
  },
  {
    "text": "pick a Q and then as long as there are tasks in that queue we're going to pick the first task off the queue and we're",
    "start": "2335760",
    "end": "2342280"
  },
  {
    "text": "going to run that task then we're going to run everything that's in the next TI queue and then we're going to run",
    "start": "2342280",
    "end": "2347359"
  },
  {
    "text": "everything that's in the promise queue easy cool so that is the event Loop",
    "start": "2347359",
    "end": "2354200"
  },
  {
    "text": "things to remember don't block rendering it will make things it will make users",
    "start": "2354200",
    "end": "2359760"
  },
  {
    "text": "sad um if you have long running tasks you can use web workers to solve that",
    "start": "2359760",
    "end": "2365040"
  },
  {
    "text": "problem if you're opening child windows is use real equals no opener it is um a",
    "start": "2365040",
    "end": "2371520"
  },
  {
    "text": "good practice to use even when it doesn't matter um microtasks beat tasks so",
    "start": "2371520",
    "end": "2377720"
  },
  {
    "text": "they're always going to execute first and they can affect the way that things render and use request animation frame",
    "start": "2377720",
    "end": "2383119"
  },
  {
    "text": "if you are making animations so hopefully by the end of this talk now if you are looking through some JavaScript",
    "start": "2383119",
    "end": "2389200"
  },
  {
    "text": "code and you see something like this and you think what were they doing you",
    "start": "2389200",
    "end": "2394880"
  },
  {
    "text": "understand now why they might have why the the previous develop who might have been you did this why it works and",
    "start": "2394880",
    "end": "2400599"
  },
  {
    "text": "perhaps what you can do to not do it but most of all I hope that now you all feel like clever",
    "start": "2400599",
    "end": "2408319"
  },
  {
    "text": "girls",
    "start": "2418000",
    "end": "2421000"
  }
]