[
  {
    "text": "[Music] I haven't even done anything yet I",
    "start": "980",
    "end": "14559"
  },
  {
    "text": "getting applause this is a great start to the day yeah good okay so there's this great",
    "start": "14559",
    "end": "21369"
  },
  {
    "text": "session thing like Jonathan says please rate at the end of the talk and yeah ask",
    "start": "21369",
    "end": "26859"
  },
  {
    "text": "me questions there and I'll hopefully have about 10 minutes of the enfant for questions but we all know how that goes right so I am today I'm going to talk to",
    "start": "26859",
    "end": "33699"
  },
  {
    "text": "you about C++ it's the oldest new language this is sort of rather pejoratively called the",
    "start": "33699",
    "end": "40329"
  },
  {
    "text": "old-school languages but I would like to sort of try and leave you with the impression that C++ is not a funny old",
    "start": "40329",
    "end": "46930"
  },
  {
    "text": "language it is in fact a cutting-edge awesome language that you should all be using so who uses C++ first of all of",
    "start": "46930",
    "end": "56590"
  },
  {
    "text": "you lot one person using C++ anyone else using C++ currently two three yeah some",
    "start": "56590",
    "end": "63010"
  },
  {
    "text": "people Wow okay this is useful because it tells me whether or not I should go more into the details of some of the",
    "start": "63010",
    "end": "68709"
  },
  {
    "text": "watery bits of C++ or whether I should concentrate on the the bits that are interesting to me about choosing C++ as",
    "start": "68709",
    "end": "75550"
  },
  {
    "text": "a language so in answer to who uses C++ more generally like industry side of",
    "start": "75550",
    "end": "80800"
  },
  {
    "text": "things and I'm sorry people are waving me from outside I've used C++ pretty",
    "start": "80800",
    "end": "86920"
  },
  {
    "text": "much exclusively through my my career and I spent 10 years in the games industry and in the games industry C++",
    "start": "86920",
    "end": "93759"
  },
  {
    "text": "is a pretty good choice for writing engines and 3d systems back at the very very beginning like the late 90s in my",
    "start": "93759",
    "end": "100060"
  },
  {
    "text": "career it was still C rather than C++ but C++ became pretty much the standard",
    "start": "100060",
    "end": "105399"
  },
  {
    "text": "after that obviously scripting within games is done in other languages sometimes lower and other bits and",
    "start": "105399",
    "end": "110560"
  },
  {
    "text": "pieces but C++ is a good good place to start I've worked in finance and finance",
    "start": "110560",
    "end": "116229"
  },
  {
    "text": "certainly if you're doing anything that has like a high throughput or a low latency flavor to it C++ can be a good",
    "start": "116229",
    "end": "122739"
  },
  {
    "text": "choice there too embedded devices again C is also a good choice for these things",
    "start": "122739",
    "end": "129130"
  },
  {
    "text": "but C++ is becoming more and more of a good choice because it gives you the flexibility of a high level language and",
    "start": "129130",
    "end": "136450"
  },
  {
    "text": "all the con trucks that come with that were but still be able to get down and poke hardware registers as you might need to",
    "start": "136450",
    "end": "141910"
  },
  {
    "text": "be able to do and I've played around on cell phones writing MPEG decoders and",
    "start": "141910",
    "end": "147160"
  },
  {
    "text": "things like that and C++ was a great choice for that kind of thing and talking to like hardware MPEG devices",
    "start": "147160",
    "end": "152710"
  },
  {
    "text": "and in servers if you're you know if you type a web query right now it's almost",
    "start": "152710",
    "end": "158050"
  },
  {
    "text": "certainly going to be handled by something written in C++ on the back end but but why did why would he pick C++ so",
    "start": "158050",
    "end": "166570"
  },
  {
    "text": "obviously the first thing that springs to mind for most people about C++ is that it's something you write in if you",
    "start": "166570",
    "end": "172870"
  },
  {
    "text": "want high-performance code and I'm gonna make no apologies this is an evangelical",
    "start": "172870",
    "end": "178450"
  },
  {
    "text": "talk about C++ other languages are available and and in fact I will make",
    "start": "178450",
    "end": "183820"
  },
  {
    "text": "reference to them but I'm not an expert in other languages so I will try and keep my my mentions of other languages",
    "start": "183820",
    "end": "190030"
  },
  {
    "text": "too factual and not sort of emotional because I'm certain there are people in this audience who know a lot more about",
    "start": "190030",
    "end": "195790"
  },
  {
    "text": "those languages than I so I'm gonna surprise you the things about C++ that I",
    "start": "195790",
    "end": "202209"
  },
  {
    "text": "think make it a good choice are these value types clear object lifetimes and",
    "start": "202209",
    "end": "208720"
  },
  {
    "text": "then third performance so performance obviously is a very important thing for a lot of the applications I've just",
    "start": "208720",
    "end": "214959"
  },
  {
    "text": "described but there are aspects of C++ that make it a really good choice even if you don't need to be writing super",
    "start": "214959",
    "end": "221470"
  },
  {
    "text": "performant code I'm going to come back to these in a few slides and explain a",
    "start": "221470",
    "end": "227200"
  },
  {
    "text": "little bit more about what I mean by a value type and what the clear object lifetimes mean but by now somebody in",
    "start": "227200",
    "end": "234430"
  },
  {
    "text": "this audience possibly all of you are thinking but isn't C++ that horrible thing with the multiple pages of error",
    "start": "234430",
    "end": "240100"
  },
  {
    "text": "messages and all the crashes and the memory leaks and and all the security flaws and all that stuff and of course",
    "start": "240100",
    "end": "245800"
  },
  {
    "text": "yes to some extent it was that's the old C++",
    "start": "245800",
    "end": "251320"
  },
  {
    "text": "new C++ is better and of course because",
    "start": "251320",
    "end": "256870"
  },
  {
    "text": "it's backwards compatible you can still write old-style C++ and leave yourself open to all these problems but I'm going",
    "start": "256870",
    "end": "263650"
  },
  {
    "text": "to hopefully explain to you that you shouldn't be doing that anymore and that there is a better choice for you so what",
    "start": "263650",
    "end": "269200"
  },
  {
    "text": "has changed in the language I only give a little table here and give you the highlights of each revision of",
    "start": "269200",
    "end": "275889"
  },
  {
    "text": "the language many of you may not know that C++ has been room updated fairly frequently well I guess we started in",
    "start": "275889",
    "end": "283720"
  },
  {
    "text": "1998 with like the first real version of C++ that was a standard and the",
    "start": "283720",
    "end": "289810"
  },
  {
    "text": "highlights of that were memory leaks use after free crashes all those things now obviously those are not really",
    "start": "289810",
    "end": "295750"
  },
  {
    "text": "highlights but I want to try make a point here and then in 2011 a new",
    "start": "295750",
    "end": "301449"
  },
  {
    "text": "standard for C++ was released there was a committee meeting in the late 2000s and for those of you who who know about",
    "start": "301449",
    "end": "309310"
  },
  {
    "text": "these things it was called C++ Oh x4 forever because they thought they were actually going to get it out in the 2000s but it sort of over on and over",
    "start": "309310",
    "end": "315699"
  },
  {
    "text": "ran and eventually became C++ 11 so there you go but we got a whole raft of",
    "start": "315699",
    "end": "320979"
  },
  {
    "text": "awesome new features the first thing is this keyword auto now if you're as old",
    "start": "320979",
    "end": "326110"
  },
  {
    "text": "as me you may know that auto has always been a keyword in C and it's like the",
    "start": "326110",
    "end": "331360"
  },
  {
    "text": "opposite of static and it's also the default so you would never write int I as a so you're never an auto int I",
    "start": "331360",
    "end": "339250"
  },
  {
    "text": "semicolon till I define a variable called I but that's what it means the auto means it's automatic storage it",
    "start": "339250",
    "end": "345669"
  },
  {
    "text": "means it's on on the stack but nobody used that so they've co-opted the keyword and auto now means you guess the",
    "start": "345669",
    "end": "353169"
  },
  {
    "text": "type compiler so if I do Auto I equals zero semicolon eyes type will be",
    "start": "353169",
    "end": "360479"
  },
  {
    "text": "different derives to be an integer and",
    "start": "360479",
    "end": "365680"
  },
  {
    "text": "if I do Auto I equals false then I will be boolean or if I call some complicated",
    "start": "365680",
    "end": "371560"
  },
  {
    "text": "function it will be whatever that complicated function returns and that's super handy you've probably if you're",
    "start": "371560",
    "end": "376990"
  },
  {
    "text": "like you used to programming in less strongly typed languages you're used to things like let or other sort of ways to",
    "start": "376990",
    "end": "384039"
  },
  {
    "text": "just say I just need a variable called X and it's this thing over here C++ is not weakly typed so there is a strong type",
    "start": "384039",
    "end": "390759"
  },
  {
    "text": "associated with that but the auto says you work it out compiler you figure it out for me and it gets rid of so much of",
    "start": "390759",
    "end": "395800"
  },
  {
    "text": "the boilerplate code that you would otherwise need I've got some examples of that coming up we've got range for",
    "start": "395800",
    "end": "403980"
  },
  {
    "text": "so before this if you wanted to iterate over a container or a sequence of things you'd either have to count from zero to",
    "start": "403980",
    "end": "410310"
  },
  {
    "text": "the number of things in the container or you'd have to use these complicated iterator trait type things where it's",
    "start": "410310",
    "end": "415440"
  },
  {
    "text": "like vector of int Colin : const iterator and that's already a huge amount to type out and you start at the",
    "start": "415440",
    "end": "421560"
  },
  {
    "text": "beginning and you keep iterating until you hit the end and that's just very inconvenient so we get range four so now",
    "start": "421560",
    "end": "426630"
  },
  {
    "text": "I can go over a container by going for auto I : container and I will get for",
    "start": "426630",
    "end": "432150"
  },
  {
    "text": "every element in that container I get a variable called I and I didn't even have to know what what type it was because the auto thing has worked that out for",
    "start": "432150",
    "end": "438510"
  },
  {
    "text": "me too we get lambdas so I can now define a small function inline where I need it",
    "start": "438510",
    "end": "445920"
  },
  {
    "text": "and those lambdas can capture variables by either copy or reference from there",
    "start": "445920",
    "end": "451320"
  },
  {
    "text": "enclosing scope and that's a really powerful thing if you're writing functional style programming where you might have an algorithm that says I need",
    "start": "451320",
    "end": "457860"
  },
  {
    "text": "to combine a bunch of things together and I'd like to supply the combining function now previously you'd have to",
    "start": "457860",
    "end": "464100"
  },
  {
    "text": "define somewhere else a function that is the how to combine things function and you'd have to refer to it in the program",
    "start": "464100",
    "end": "470850"
  },
  {
    "text": "at the point where you were were calling it but now you can actually just define in that spot the function itself and",
    "start": "470850",
    "end": "477930"
  },
  {
    "text": "even more importantly you can capture some like local variables or state basically a closure",
    "start": "477930",
    "end": "483810"
  },
  {
    "text": "we got move which I've just put down as move him and there's a whole bunch of machinery that was added to the language",
    "start": "483810",
    "end": "489150"
  },
  {
    "text": "to support the idea that object lifetimes can be transferred so oh through object ownership can be",
    "start": "489150",
    "end": "495810"
  },
  {
    "text": "transferred so I can clearly define when I'm giving an object to somebody else and I don't need it anymore and that's",
    "start": "495810",
    "end": "501960"
  },
  {
    "text": "really important with the next point which is smart pointers I can write and if the standard now provides a set of",
    "start": "501960",
    "end": "509040"
  },
  {
    "text": "template objects which look like pointers but under the hood they",
    "start": "509040",
    "end": "514260"
  },
  {
    "text": "actively manage the thing that they're pointing at so whereas before you might just do int star I equals new int and",
    "start": "514260",
    "end": "521640"
  },
  {
    "text": "then just remember to delete I when you finished with it else you've got a memory leak I can now make a unique",
    "start": "521640",
    "end": "527910"
  },
  {
    "text": "pointer to I and a unique pointer says I uniquely owned the thing that I'm",
    "start": "527910",
    "end": "532950"
  },
  {
    "text": "pointing at and when the unique pointer falls away out of scope and can't be or by the compiler it will be its",
    "start": "532950",
    "end": "540480"
  },
  {
    "text": "destructor will run and its destructor will clean up the piece of memory that it's pointing at and that's extremely powerful it means that I can effectively",
    "start": "540480",
    "end": "547520"
  },
  {
    "text": "trust the compiler to generate both the [Music]",
    "start": "547520",
    "end": "553310"
  },
  {
    "text": "what would to capture the pointer that I have created into the heap and also to guarantee that it will be thrown away",
    "start": "553310",
    "end": "559170"
  },
  {
    "text": "when I finished with it that's really really powerful but in order to be able to use that effectively I need to be",
    "start": "559170",
    "end": "564510"
  },
  {
    "text": "able to say well I've made one of these things and I'd like to give it to somebody else now but the uniqueness of",
    "start": "564510",
    "end": "569670"
  },
  {
    "text": "unique pointer says that I can't have a copy of it there I'm not allowed to copy these things because it would be a unique anymore either have to clone the",
    "start": "569670",
    "end": "576480"
  },
  {
    "text": "object is pointing at which would be an expensive operation or there would have to be two pointers pointing at the same",
    "start": "576480",
    "end": "582120"
  },
  {
    "text": "object and then I'd have to remember that only one of them is allowed to destroy and gets complicated so the move",
    "start": "582120",
    "end": "587970"
  },
  {
    "text": "semantics allowed me to wrap an object and say hey I'm giving this to you now and my object is dead that's really",
    "start": "587970",
    "end": "594300"
  },
  {
    "text": "powerful we also got this thing called context / context / allows us to write",
    "start": "594300",
    "end": "600090"
  },
  {
    "text": "compile time run code or in principle compile time run code and this is a new",
    "start": "600090",
    "end": "606270"
  },
  {
    "text": "laptop and I haven't chest set it up for conferences yeah means I've been talking about this for too long if the saver",
    "start": "606270",
    "end": "612300"
  },
  {
    "text": "kicks in so I can write compile time code and if you've ever played around with like preprocessor tricks because",
    "start": "612300",
    "end": "617880"
  },
  {
    "text": "you need like a constant that's the available at compile time then now you could write it without horrible macros",
    "start": "617880",
    "end": "624570"
  },
  {
    "text": "you can write it in the language you're already writing in will we'll see a little bit of that down the line but that's a pretty powerful concept and",
    "start": "624570",
    "end": "630630"
  },
  {
    "text": "it's going to be built on in future we've got Atomics atomic sir a lettuce access memory in a way that is thread",
    "start": "630630",
    "end": "637680"
  },
  {
    "text": "multiple threads safe if you if you're careful we get a memory model that",
    "start": "637680",
    "end": "643740"
  },
  {
    "text": "allows threading to actually be well defined we've got user-defined literals that there's tons of stuff it was a huge",
    "start": "643740",
    "end": "649590"
  },
  {
    "text": "reboot to the language and in three years later we've got another revision of the language giving us a whole bunch",
    "start": "649590",
    "end": "655500"
  },
  {
    "text": "of stuff including return type deductions so now I don't even need to say what my function returns I can just",
    "start": "655500",
    "end": "661860"
  },
  {
    "text": "do Auto myfunc and then just do return seven it's like well I guess you wanted it this to return and into",
    "start": "661860",
    "end": "666880"
  },
  {
    "text": "which obviously saves on typing but in some generic code that's a very valuable thing I don't maybe I don't know what",
    "start": "666880",
    "end": "672459"
  },
  {
    "text": "the result of what I'm going to return is because it's based on what I was given so it's a powerful concept and the",
    "start": "672459",
    "end": "677560"
  },
  {
    "text": "lambda support got even better so now we can actually capture things and move them into the lambdas we can rename them",
    "start": "677560",
    "end": "683500"
  },
  {
    "text": "we can do some bits and pieces that allow me to more effectively use lambdas and Landers became what themselves",
    "start": "683500",
    "end": "688630"
  },
  {
    "text": "context borough as well which is just another mind-bending thing I can write generic code using lambdas and know that",
    "start": "688630",
    "end": "695259"
  },
  {
    "text": "they can be in principle executed at compile time and the result just being fed out and might just be a number so",
    "start": "695259",
    "end": "700420"
  },
  {
    "text": "that's pretty powerful and I have a friend of mine has done a presentation where they've written he's written a",
    "start": "700420",
    "end": "705639"
  },
  {
    "text": "compile time JSON parser which is just nuts anyway unimportant using lambdas",
    "start": "705639",
    "end": "712350"
  },
  {
    "text": "C++ 17 this is the most recent version of the the standard we've got if Const X",
    "start": "712350",
    "end": "717490"
  },
  {
    "text": "burrow which is essentially an if statement that's run by the compiler",
    "start": "717490",
    "end": "722740"
  },
  {
    "text": "with a constant expression something which can be evaluated at compile time and it works a bit like the hash if if",
    "start": "722740",
    "end": "728290"
  },
  {
    "text": "you've done again preprocessor hacks before now so I can have a piece of code that's gent generic and maybe take some",
    "start": "728290",
    "end": "735069"
  },
  {
    "text": "kind of type T that I don't know about say a template type T and then I can actually have conditional bits of code",
    "start": "735069",
    "end": "740920"
  },
  {
    "text": "that say well if T is an int then I'm gonna do this thing and if T is a double I can do this other thing and the",
    "start": "740920",
    "end": "746860"
  },
  {
    "text": "important thing is that the stuff that's in the if statement just needs to be possible it doesn't have to be semantically correct so if the failing",
    "start": "746860",
    "end": "754660"
  },
  {
    "text": "case if the else clause that wasn't actually run by my if it's not well",
    "start": "754660",
    "end": "761560"
  },
  {
    "text": "formed for whatever type it is maybe it's like you know they say if T is a pointer type then dereference it now of",
    "start": "761560",
    "end": "766990"
  },
  {
    "text": "course if T wasn't a pointer type that wouldn't be valid code the compiler is allowed to throw that away now and it gives us a powerful way for writing",
    "start": "766990",
    "end": "773639"
  },
  {
    "text": "template meta programming sort of very high order functions without resorting",
    "start": "773639",
    "end": "779589"
  },
  {
    "text": "to resorting to some of the old techniques that you probably have seen along the way that give the voluminous",
    "start": "779589",
    "end": "784630"
  },
  {
    "text": "error messages that I alluded to at the beginning we also got a whole bunch of new things in the standard some",
    "start": "784630",
    "end": "789639"
  },
  {
    "text": "algebraic data types optional variant there's an any type that could hold anything string view is",
    "start": "789639",
    "end": "796000"
  },
  {
    "text": "like a window into an existing area that Alexis like look at a sequence of",
    "start": "796000",
    "end": "801540"
  },
  {
    "text": "bytes as a string without like copying it and these are things are very very powerful so these we've got a lot of",
    "start": "801540",
    "end": "807810"
  },
  {
    "text": "cool things that come down the pylons what I'm trying to say here and in C++ 20 which is already be in the pipeline",
    "start": "807810",
    "end": "813530"
  },
  {
    "text": "we're gonna get concepts hopefully we're gonna get some ranges which allow us to do like almost like pipe based",
    "start": "813530",
    "end": "819410"
  },
  {
    "text": "programming you heard at the keynote like UNIX pipes are a forgotten thing and I disagree for that I used buicks",
    "start": "819410",
    "end": "825300"
  },
  {
    "text": "pipes all the time and it would be even more awesome to be able to take a range of values pieden through something which",
    "start": "825300",
    "end": "831000"
  },
  {
    "text": "doubles them and pipe them through something which sorts them out pipe them through something else and then get get a range out of the end and say well this",
    "start": "831000",
    "end": "837360"
  },
  {
    "text": "is like a my lazy evaluation of things that so that's hopefully coming co-routines as well which we may network",
    "start": "837360",
    "end": "843210"
  },
  {
    "text": "programming more palatable hopefully and these things are already starting to appear in compilers which is amazing",
    "start": "843210",
    "end": "850080"
  },
  {
    "text": "so I want to just give you a quick example of how code might look different I don't know if that's they is that",
    "start": "850080",
    "end": "856140"
  },
  {
    "text": "readable enough I don't know if I can do much about the font size so I apologize in advance and I'll go through this super quickly I'm not gonna try and",
    "start": "856140",
    "end": "861330"
  },
  {
    "text": "explain because I've already ascertained that most of the room is not currently doing C++ development but this is like",
    "start": "861330",
    "end": "867570"
  },
  {
    "text": "an old way of iterating over an array the main the main sort of aspect here is this horrific variable I had to define",
    "start": "867570",
    "end": "874500"
  },
  {
    "text": "that says you know this is the thing this is the type of the thing that I'm iterating with and that's just horrible",
    "start": "874500",
    "end": "879660"
  },
  {
    "text": "so the first thing we could do is just replace it with Auto which is lovely so I don't have to remember what my silly type is or how many colons or less-than",
    "start": "879660",
    "end": "886080"
  },
  {
    "text": "or greater-than as I need but even better I don't need to iterate over this anymore I can use the range for so then",
    "start": "886080",
    "end": "891210"
  },
  {
    "text": "it just becomes that much nicer of course if you were a functional programmer type person you might know",
    "start": "891210",
    "end": "898710"
  },
  {
    "text": "that there is a built-in function to C++ called accumulate which allows you to say well here's the beginning of",
    "start": "898710",
    "end": "904440"
  },
  {
    "text": "something that you can iterate over here's the end of something that I want you to wait right over here's the",
    "start": "904440",
    "end": "910050"
  },
  {
    "text": "starting value just add them all up or accumulate them all in which case you could write something like this so I",
    "start": "910050",
    "end": "915660"
  },
  {
    "text": "mentioned earlier about lambdas being allowing you to write stuff in line this is the opposite of that there's my function at the top there that's",
    "start": "915660",
    "end": "921900"
  },
  {
    "text": "accumulating and in this instance because I'm doing a root mean square sorry I didn't say that earlier I need",
    "start": "921900",
    "end": "927870"
  },
  {
    "text": "to take the partial sum and add the square of the thing that's being to it to kind of get my sum of the",
    "start": "927870",
    "end": "933430"
  },
  {
    "text": "squares before I square root it so I mean it's not too bad in this case but if you've got a big sprawling codebase",
    "start": "933430",
    "end": "938529"
  },
  {
    "text": "having like loads of functions everywhere it's just you know cognitively loading so you can write",
    "start": "938529",
    "end": "944230"
  },
  {
    "text": "this which arguably isn't much better all things considered but at least I've got my begin and end by zero and then",
    "start": "944230",
    "end": "951040"
  },
  {
    "text": "there is my lambda this block in the middle there's just says hey I just need a function right here that does this please",
    "start": "951040",
    "end": "956230"
  },
  {
    "text": "so things have got a little bit better there I hope so",
    "start": "956230",
    "end": "961450"
  },
  {
    "text": "C++ has changed C++ has evolved a lot and some of the things like the smart",
    "start": "961450",
    "end": "967089"
  },
  {
    "text": "pointers are sort of game changes you no longer have to worry about use after",
    "start": "967089",
    "end": "972579"
  },
  {
    "text": "free or or like memory leaks and various things like that you if you can rely",
    "start": "972579",
    "end": "977740"
  },
  {
    "text": "totally on smart pointers to manage the memory for you then you're in a good place already but why would you pick C++",
    "start": "977740",
    "end": "984550"
  },
  {
    "text": "when there are so many other good languages out there I mean in particular like things like rust are a really good",
    "start": "984550",
    "end": "990850"
  },
  {
    "text": "choices for this and I'm very excited about rust and I think probably maybe I'm speaking out of turn here but I",
    "start": "990850",
    "end": "995980"
  },
  {
    "text": "wonder if a lot of the acceleration in C++ is development has come from like the fact that there is now a genuine",
    "start": "995980",
    "end": "1001199"
  },
  {
    "text": "competitor this is C++ so I want to talk a little bit about why I think those",
    "start": "1001199",
    "end": "1007290"
  },
  {
    "text": "value types the first thing that I said am i bullet lists are really really important so what is a value type it's",
    "start": "1007290",
    "end": "1013620"
  },
  {
    "text": "passed an object that's passed by value I'm not gonna take reference to this this to this thing it's like either in",
    "start": "1013620",
    "end": "1020190"
  },
  {
    "text": "just an integer or a pair of integers or something that's small maybe you know 16 32 bytes worth of data for which it is",
    "start": "1020190",
    "end": "1027900"
  },
  {
    "text": "cheaper just to copy around by value rather than having something in memory somewhere that I keep referring back to",
    "start": "1027900",
    "end": "1034230"
  },
  {
    "text": "and if you come from like manage languages like Java in particular it's hard to think about anything that isn't",
    "start": "1034230",
    "end": "1041850"
  },
  {
    "text": "a reference because every object that you've ever dealt with is a new dub object that lives on the heap somewhere",
    "start": "1041850",
    "end": "1046980"
  },
  {
    "text": "that you're pointing to but there's a sort of category of problems that come with reference based programming and",
    "start": "1046980",
    "end": "1053700"
  },
  {
    "text": "that is you don't know who else has got a reference to that object and you it's very hard for you to reason about",
    "start": "1053700",
    "end": "1059160"
  },
  {
    "text": "whether or that object is going to change under your feet so if you've got a function that takes a ref",
    "start": "1059160",
    "end": "1064419"
  },
  {
    "text": "to an object and maybe you have some kind of listen a callback thing and you like your write writing your code and your function runs you do some work and",
    "start": "1064419",
    "end": "1071200"
  },
  {
    "text": "then you say oh I admit my something interesting happened event and I know somebody subscribed to it they've done",
    "start": "1071200",
    "end": "1076509"
  },
  {
    "text": "something with it and then I carry on with my code for all you know all your references have gone unchanged to be something else you know that the object",
    "start": "1076509",
    "end": "1082779"
  },
  {
    "text": "pointed up has been mutated in some way and that's that makes it difficult to reason about so passing by value gets",
    "start": "1082779",
    "end": "1088239"
  },
  {
    "text": "rid of that you've got your own copy of that that's really cool in C++ value types have no overhead at all they are",
    "start": "1088239",
    "end": "1094809"
  },
  {
    "text": "literally the four or eight or sixteen bytes that are in a register somewhere or on the stack somewhere and that means",
    "start": "1094809",
    "end": "1101859"
  },
  {
    "text": "that there is just no overhead I'm passing an inter and but it's not an int it's it's my type and my type can have",
    "start": "1101859",
    "end": "1107820"
  },
  {
    "text": "behavior so I can define what it means to add two of my types together it can",
    "start": "1107820",
    "end": "1113200"
  },
  {
    "text": "have I can write streaming operators for it I can I can sort of make it my own",
    "start": "1113200",
    "end": "1120009"
  },
  {
    "text": "knowing that really it's still just a 32-bit value that's going to be treated as an integer somewhere and they're really useful for things like positions",
    "start": "1120009",
    "end": "1126940"
  },
  {
    "text": "error codes prices quantities times anything where it would be really really",
    "start": "1126940",
    "end": "1132159"
  },
  {
    "text": "really bad if you got things mixed up I mean I saw I worked in finance for a",
    "start": "1132159",
    "end": "1137289"
  },
  {
    "text": "very long time and you never want to get your parameters the one way round to your function which I'll show you in a second and you know it's just there's a",
    "start": "1137289",
    "end": "1145600"
  },
  {
    "text": "lot more what's the word oh gosh I had a good word for this and my brains gone",
    "start": "1145600",
    "end": "1150879"
  },
  {
    "text": "blank not enough coffee you know you're modeling your domain by saying that this is a type of this rather than just",
    "start": "1150879",
    "end": "1156369"
  },
  {
    "text": "saying into something in your in your function signature you say no it's a quantity it's like oh that's that's handy I'm documenting it's it's and so",
    "start": "1156369",
    "end": "1164139"
  },
  {
    "text": "that C++ is strong typing means that I will get an error if for example haha if",
    "start": "1164139",
    "end": "1170080"
  },
  {
    "text": "I were to write a function called buy shares and it takes a con char pointer to the symbol it takes a double for the",
    "start": "1170080",
    "end": "1175809"
  },
  {
    "text": "price and I'm gonna stop right here and say never ever ever use doubles for prices this is purely here a slide code",
    "start": "1175809",
    "end": "1181840"
  },
  {
    "text": "I will be lynched if anyone ever sees sees this in production code and an in",
    "start": "1181840",
    "end": "1187090"
  },
  {
    "text": "quantity there and then I'm gonna call my function with buy shares want to buy eight hundred shares of Google for nine",
    "start": "1187090",
    "end": "1192940"
  },
  {
    "text": "hundred and seventy five bucks right and the compiler will let me do this and in very many cases it even give me a warning that something",
    "start": "1192940",
    "end": "1198940"
  },
  {
    "text": "has gone on because whoops I got the parameters the wrong way around 800 is a completely valid double precision number",
    "start": "1198940",
    "end": "1204999"
  },
  {
    "text": "and 970 5.0 can be pretty easily coerced into an integer and you know microsoft's",
    "start": "1204999",
    "end": "1211389"
  },
  {
    "text": "compiler I think wins is that you're like narrowing here with the warning level cranked up on clang you'll get",
    "start": "1211389",
    "end": "1216730"
  },
  {
    "text": "some of the warnings here but it's like it's it's the kind of thing you could imagine yourself doing right and it's",
    "start": "1216730",
    "end": "1222249"
  },
  {
    "text": "the kind of thing that could be very very expensive to get the wrong way around so what if instead I'd written it",
    "start": "1222249",
    "end": "1227409"
  },
  {
    "text": "this way I've used my little tiny tights my price price in my quantity quantity knowing that they really still just a",
    "start": "1227409",
    "end": "1232480"
  },
  {
    "text": "register value so I'm not giving up any performance here and then I try and do this still so I'm gonna buy 800 at 975",
    "start": "1232480",
    "end": "1239859"
  },
  {
    "text": "and now the compiler tells me that I've made a mistake and that's great and it's the the message is not the best right I",
    "start": "1239859",
    "end": "1246759"
  },
  {
    "text": "mean I was trying to like I'm trying to spin this to be like C++ is awesome and all the met error messages that you see in your past have all been fixed but",
    "start": "1246759",
    "end": "1252730"
  },
  {
    "text": "it's not quite true but that's not terrible it's telling me that like the second argument here I couldn't turn that quantity you gave me into a pricing",
    "start": "1252730",
    "end": "1258460"
  },
  {
    "text": "like whoops that's an expensive mistake averted and so this is what a value type",
    "start": "1258460",
    "end": "1264129"
  },
  {
    "text": "might look like it's written just like a regular class or a structure I'm just going to highlight some other new things",
    "start": "1264129",
    "end": "1269889"
  },
  {
    "text": "that are new to C++ in the implementation of a value type this is a two-dimensional position using floating",
    "start": "1269889",
    "end": "1275559"
  },
  {
    "text": "point values for the X and the y and so the first thing I say is like I can initialize my X&Y",
    "start": "1275559",
    "end": "1280840"
  },
  {
    "text": "in my structure and again if you guys are not familiar with C++ this is like news to us I know Java has had it since",
    "start": "1280840",
    "end": "1287019"
  },
  {
    "text": "forever and and the initializer here is the default initializer I've just used",
    "start": "1287019",
    "end": "1292809"
  },
  {
    "text": "open and closed parens here which will mean it we initialize to zero but I could also just done float x equals zero",
    "start": "1292809",
    "end": "1298119"
  },
  {
    "text": "or float x equals 10 or whatever I wanted the default value to be so that's pretty cool I'm gonna skip that and come",
    "start": "1298119",
    "end": "1304749"
  },
  {
    "text": "back to it this is the constructor that says okay if you do want to make a position with a preformed position with",
    "start": "1304749",
    "end": "1310450"
  },
  {
    "text": "an x and a y that i already know then you can construct one with an x and a y and I'm just going to initialize the X with the X and the y with the wide I",
    "start": "1310450",
    "end": "1315730"
  },
  {
    "text": "would be past it that's pretty cool now as soon as I start defining my own constructors C++ says ok I get at you",
    "start": "1315730",
    "end": "1323919"
  },
  {
    "text": "you want to do the construction yourself I won't allow anybody to make a position without using one of the constructors",
    "start": "1323919",
    "end": "1329169"
  },
  {
    "text": "that you get me but I just went to all this attention this care to make sure that like it",
    "start": "1329169",
    "end": "1334940"
  },
  {
    "text": "would be initialized to zero by default right so I want to kind of get that that behavior back I'm gonna say no no no the",
    "start": "1334940",
    "end": "1340279"
  },
  {
    "text": "empty constructor the one that doesn't take any arguments at all that allows me to just go pause P that's just default",
    "start": "1340279",
    "end": "1346399"
  },
  {
    "text": "bring that band back bring it back and it will be default initialized to x equals zero y equals zero and just as an",
    "start": "1346399",
    "end": "1352970"
  },
  {
    "text": "example down here this is like how I start adding behavior I'm saying that this is how to add a position to me to",
    "start": "1352970",
    "end": "1358789"
  },
  {
    "text": "give a new position so for those not familiar with C++ sort of idioms the",
    "start": "1358789",
    "end": "1364730"
  },
  {
    "text": "context bird the beginning is one of the new C++ 11 features which says look in principle this could be done at compile",
    "start": "1364730",
    "end": "1371059"
  },
  {
    "text": "time and if I were to do anything in here that was not in principle compile time doable if I were to allocate memory in here or to throw an exception on a",
    "start": "1371059",
    "end": "1378230"
  },
  {
    "text": "path where it would actually be executed by the compiler it would the compiler would bug out and say no I can't do this",
    "start": "1378230",
    "end": "1385519"
  },
  {
    "text": "I can't do this at compile time so it's completely unnecessary in this case I'm just going exposing it here I'm",
    "start": "1385519",
    "end": "1392360"
  },
  {
    "text": "returning a pause object I'm the operator plus this is what happens that if I add I'm the other pause here is",
    "start": "1392360",
    "end": "1398120"
  },
  {
    "text": "what I miss being added to me and you'll notice that I'm taking it by value this is the point of these things being value",
    "start": "1398120",
    "end": "1403250"
  },
  {
    "text": "types I can guarantee that it'll fit in a register or two registers or whatever and it'll just come to me and be quick",
    "start": "1403250",
    "end": "1408769"
  },
  {
    "text": "and I'm returning a new position using the constructor I've defined above just by adding things together with it and",
    "start": "1408769",
    "end": "1413899"
  },
  {
    "text": "then the thing that I really want to draw your attention to is non C++ that this thingy doesn't work anyone be on the recording anyway is the Const at the",
    "start": "1413899",
    "end": "1420529"
  },
  {
    "text": "end of that line there so the console extra pause operator plus poles other Const that is I think fairly unique to",
    "start": "1420529",
    "end": "1426710"
  },
  {
    "text": "C++ maybe rust as well maybe anyone who's a language expert here it means that the object that this method is",
    "start": "1426710",
    "end": "1432500"
  },
  {
    "text": "being called on is itself constant for the duration of this method I can't",
    "start": "1432500",
    "end": "1438529"
  },
  {
    "text": "mutate the object here is it's a it's a big hint to me as a programmer that I'm not allowed to change myself and I'm",
    "start": "1438529",
    "end": "1443929"
  },
  {
    "text": "telling also my callers that you can call my method and nothing interesting will happen to the object it will still",
    "start": "1443929",
    "end": "1449149"
  },
  {
    "text": "be the same object afterwards that's that's I think a useful thing and something I miss from from when I do any",
    "start": "1449149",
    "end": "1454759"
  },
  {
    "text": "kind of Java side work or stuff like that where where I get a method and I you know you'll get method you could",
    "start": "1454759",
    "end": "1461419"
  },
  {
    "text": "potentially poke around inside your object and chain things so I koala that's a nice thing about seeing us and then he would do",
    "start": "1461419",
    "end": "1466529"
  },
  {
    "text": "other all the other operators and you have a nice value type a quick example of the clear object lifetime that I",
    "start": "1466529",
    "end": "1473610"
  },
  {
    "text": "talked about earlier so I mentioned that when an object falls out of scope its destructor is run and almost all",
    "start": "1473610",
    "end": "1480330"
  },
  {
    "text": "languages have some notion of when my object is dead I'd like you to do something for me a Java has finalizes",
    "start": "1480330",
    "end": "1489450"
  },
  {
    "text": "and c-sharp probably has something similar right I'm looking at the crowd in case anybody can correct me again I",
    "start": "1489450",
    "end": "1494789"
  },
  {
    "text": "said I'm not an expert than anything other than well not even see the spaz but whatever so fine that the problem",
    "start": "1494789",
    "end": "1501240"
  },
  {
    "text": "with finalizes is that they are run when the garbage collector or whatever mechanism is used to track when an",
    "start": "1501240",
    "end": "1506940"
  },
  {
    "text": "object is no longer needed just realizes that that object is unreachable and",
    "start": "1506940",
    "end": "1512159"
  },
  {
    "text": "that's great but may not be a good time for you so for example here I've made up",
    "start": "1512159",
    "end": "1518639"
  },
  {
    "text": "a database query function here and this is the worst code is slide code and all that kind of nonsense but on this one",
    "start": "1518639",
    "end": "1525600"
  },
  {
    "text": "here I'm this mythical DB connection object that it doesn't exist anywhere it's just made up but I'm constructing",
    "start": "1525600",
    "end": "1531240"
  },
  {
    "text": "one and I'm giving it a hard-coded name of the server to connect to called server and port 9000 or whatever those",
    "start": "1531240",
    "end": "1537149"
  },
  {
    "text": "parameters mean it doesn't really matter but you know that if you're talking to a database somewhere behind the scenes there's going to be probably a TCP",
    "start": "1537149",
    "end": "1544350"
  },
  {
    "text": "connection so a sockets being created a connection has happened some probably",
    "start": "1544350",
    "end": "1549600"
  },
  {
    "text": "some buffers have been allocated on your side and probably on the database now you're taking up resources on this remote database there's a connection up",
    "start": "1549600",
    "end": "1556080"
  },
  {
    "text": "on the the database side that's that's taking up some of its RAM and it's like God its buffer and it's allocations on",
    "start": "1556080",
    "end": "1561450"
  },
  {
    "text": "that side so that's an expensive heavyweight thing to do and obviously in a real code you'd cash",
    "start": "1561450",
    "end": "1567149"
  },
  {
    "text": "it in some way and do connection pooling and also some whatever but okay it's like slide good and then I'm gonna call",
    "start": "1567149",
    "end": "1572279"
  },
  {
    "text": "query and I'm gonna return the query so I'm gonna delegate out to whatever this query is going to do presumably it runs",
    "start": "1572279",
    "end": "1578130"
  },
  {
    "text": "the query on the database and gives me a string of the result like the worst representation ever of a query but",
    "start": "1578130",
    "end": "1583169"
  },
  {
    "text": "whatever and I'm just going to return it to my caller and that's great what about that database connection what about all",
    "start": "1583169",
    "end": "1588809"
  },
  {
    "text": "the resources associated with it in a in a managed language you would probably",
    "start": "1588809",
    "end": "1594360"
  },
  {
    "text": "have to do something where you explicitly call something too they like clothes conduct clothes or or you would have like a whizz block or",
    "start": "1594360",
    "end": "1601030"
  },
  {
    "text": "some of the other sort of I'm only familiar with Python in this particular thing where you don't with open or foo",
    "start": "1601030",
    "end": "1606910"
  },
  {
    "text": "as X and you indent the block and then at the closing of the block then some magic method is called on the the object",
    "start": "1606910",
    "end": "1612970"
  },
  {
    "text": "that you whiz with and that's great but you have to remember to do it and this",
    "start": "1612970",
    "end": "1619210"
  },
  {
    "text": "means I can write code database connection code like this which there's just no way to leave a dangling",
    "start": "1619210",
    "end": "1625300"
  },
  {
    "text": "reference unless it as soon as that con object is not available to anybody anymore then that connection is closed",
    "start": "1625300",
    "end": "1630460"
  },
  {
    "text": "the resources on my site are cleaned up and the resources and the remote side will be cleaned up as well and of course there's a whole bunch of things to do",
    "start": "1630460",
    "end": "1635740"
  },
  {
    "text": "with Eric checking and exceptions and stuff so obviously but I get to make up crappy code like this and you have to",
    "start": "1635740",
    "end": "1641800"
  },
  {
    "text": "kind of like invent the other bits for me another example now this is sort of showing the the transfer of ownership",
    "start": "1641800",
    "end": "1646990"
  },
  {
    "text": "that I was talking about earlier is like this this example here where I have a document and a document has elements and",
    "start": "1646990",
    "end": "1653890"
  },
  {
    "text": "the elements are like some virtual base class and that is an abstract class an interface class for people coming from",
    "start": "1653890",
    "end": "1662140"
  },
  {
    "text": "co-op java worlds the problem with those objects is that i don't know how big they are because it's up to the caller",
    "start": "1662140",
    "end": "1668020"
  },
  {
    "text": "the caller can make any implementation that conforms to that interface and they can make any object they like and give",
    "start": "1668020",
    "end": "1675160"
  },
  {
    "text": "it to me as an them so i can't store a lens myself directly so i can't just",
    "start": "1675160",
    "end": "1680200"
  },
  {
    "text": "have an array of them and i can't just have a vector of the money to have references to them on the heap and again",
    "start": "1680200",
    "end": "1685210"
  },
  {
    "text": "as soon as you start having references to things on the heap you have to be careful about whose responsibility is to clean up those references those objects",
    "start": "1685210",
    "end": "1691210"
  },
  {
    "text": "so here what I've done is I've stored my I'm gonna store my lens if my clicker works in a vector which is to say a",
    "start": "1691210",
    "end": "1698860"
  },
  {
    "text": "growing array of unique pointers to a lens so the unique pointer is going to",
    "start": "1698860",
    "end": "1705010"
  },
  {
    "text": "be the guy who's going to look after the allocation and de-allocation or rather the deallocation in this case of those",
    "start": "1705010",
    "end": "1711010"
  },
  {
    "text": "LM objects the problem is though those unique pointers can't be copied because",
    "start": "1711010",
    "end": "1716470"
  },
  {
    "text": "again they're unique so how do we how do we how do we get things into them in the first place because someone has one and",
    "start": "1716470",
    "end": "1722860"
  },
  {
    "text": "they're going to give me their Blair their pointer and then I have to kind of well I need to get it in somehow without",
    "start": "1722860",
    "end": "1728110"
  },
  {
    "text": "copying it and the way to do that is with this double ampersand thing here now I will say that that's not a very good syntax",
    "start": "1728110",
    "end": "1734179"
  },
  {
    "text": "for anybody but this double ampersand here is called an r-value reference and what this basically is is a reference to",
    "start": "1734179",
    "end": "1741559"
  },
  {
    "text": "an object that someone else is either promised that they're not going to use again or it's a temporary value and",
    "start": "1741559",
    "end": "1747559"
  },
  {
    "text": "which case they buy construction you know that that object is about to die anyway that allows me to steal the",
    "start": "1747559",
    "end": "1753590"
  },
  {
    "text": "contents of that object excuse me and then like basically nuke the object that it came from now I'm not actually you",
    "start": "1753590",
    "end": "1760159"
  },
  {
    "text": "don't see that in this code here it's all in the standard library at this point but I'm accepting it it's me",
    "start": "1760159",
    "end": "1765229"
  },
  {
    "text": "saying like when you call my method ad you are giving me that object that you need pointer is now mine and then",
    "start": "1765229",
    "end": "1771200"
  },
  {
    "text": "because now my function owns it my ad function that owns it when I give it to the in place back method of the",
    "start": "1771200",
    "end": "1777339"
  },
  {
    "text": "expanding array those objects are right there I have to say well I'm done with it now I'm finished with it I have to",
    "start": "1777339",
    "end": "1783200"
  },
  {
    "text": "move it into the caller argument for that the first argument for that",
    "start": "1783200",
    "end": "1788330"
  },
  {
    "text": "function so that's just an example of how ownership is being tracked and transferred now in modern C++ finally",
    "start": "1788330",
    "end": "1795769"
  },
  {
    "text": "you wouldn't be able to go away without saying something about performance and I realize I'm starting to run out of time",
    "start": "1795769",
    "end": "1800979"
  },
  {
    "text": "but I made up something using my funny little pause class that I wrote earlier to just sort of see how good the how",
    "start": "1800979",
    "end": "1806809"
  },
  {
    "text": "well the compiler could do with it and here I'm using like the most functional way I could think of to find the",
    "start": "1806809",
    "end": "1812029"
  },
  {
    "text": "midpoint of a bunch of positions which is to say accumulate them all and add",
    "start": "1812029",
    "end": "1818059"
  },
  {
    "text": "them all up together and then divide them by the number of them that finds like the average of all the points which is if I'm not mistaken in the middle",
    "start": "1818059",
    "end": "1823639"
  },
  {
    "text": "point and of course I couldn't do a talk without having a click on this so this",
    "start": "1823639",
    "end": "1829039"
  },
  {
    "text": "is a an interactive view of that and you can't really see oh you can see it okay",
    "start": "1829039",
    "end": "1834279"
  },
  {
    "text": "so same code and just to sort of give you I mean there's no one's good understand what this is doing here we",
    "start": "1834279",
    "end": "1839690"
  },
  {
    "text": "don't really do but what I would just point out is that that huge block of v mods things here the compiler is able to",
    "start": "1839690",
    "end": "1845119"
  },
  {
    "text": "take advantage of the fact that it knows the memory layout of that array of objects I didn't do anything",
    "start": "1845119",
    "end": "1850669"
  },
  {
    "text": "particularly special you've seen all the code it's up on the slides but the compiler is smart enough to notice that you've got X Y and then the next one is",
    "start": "1850669",
    "end": "1857259"
  },
  {
    "text": "sorry X Y of the first point and the second point in that array will be the next X Y and so on so we wouldn't",
    "start": "1857259",
    "end": "1864110"
  },
  {
    "text": "did you a stream of xyxy in memory and it turns out that this the CPUs have",
    "start": "1864110",
    "end": "1869330"
  },
  {
    "text": "instructions which will just hover up swaths of numbers and be able to add them in parallel to each other using",
    "start": "1869330",
    "end": "1876740"
  },
  {
    "text": "these vector instructions so the fact that it's lined up like this means that the the the compiler can take advantage",
    "start": "1876740",
    "end": "1882980"
  },
  {
    "text": "of the memory layout it can take advantage of the architecture and it can write generate code that is pretty much",
    "start": "1882980",
    "end": "1888080"
  },
  {
    "text": "as fast as you could imagine and I think for other languages where those things are not guaranteed stored contiguous",
    "start": "1888080",
    "end": "1894110"
  },
  {
    "text": "it's very hard for optimizing jits and things to take advantage of that I know",
    "start": "1894110",
    "end": "1899419"
  },
  {
    "text": "there are things coming down the line I think for Java in terms of layout but but and now we're into the but wait there's more of my sales pitch and I'm",
    "start": "1899419",
    "end": "1906020"
  },
  {
    "text": "gonna blast through these because I would like to have time to have some questions at the end compilers there are many compilers to",
    "start": "1906020",
    "end": "1911870"
  },
  {
    "text": "choose from clang has is now like probably the best one to go to nowadays it is just",
    "start": "1911870",
    "end": "1918830"
  },
  {
    "text": "awesomely well developed it has amazing error messages and it supports a whole bunch of tooling which allows you to",
    "start": "1918830",
    "end": "1924169"
  },
  {
    "text": "interrogate and do like refactoring operations on your C++ stuff like Google",
    "start": "1924169",
    "end": "1930230"
  },
  {
    "text": "have really thrown their weight behind this as well so Google are now sort of suggesting that if you're using any of",
    "start": "1930230",
    "end": "1935750"
  },
  {
    "text": "their libraries then you like just pick the latest version of the library and just continuously live at the head",
    "start": "1935750",
    "end": "1941179"
  },
  {
    "text": "version of that and every time they do a breaking API change they're going to supply a tool based on like clang which will convert and move arguments around",
    "start": "1941179",
    "end": "1947929"
  },
  {
    "text": "and do all sorts of clever things on it so it's a kind of an interesting thing that this the clang the compiler has allowed us to do GTCC obviously is a",
    "start": "1947929",
    "end": "1954799"
  },
  {
    "text": "classic and both ICC the intel's compiler and microsoft's compilers are doing a very good job of tracking the",
    "start": "1954799",
    "end": "1961220"
  },
  {
    "text": "most recent changes in the language and GCC and clang nightly bills will have almost all of the things that even being",
    "start": "1961220",
    "end": "1966710"
  },
  {
    "text": "just discussed on the mailing loop lists about what is coming in c++ 20 sanitizers so I've spun you this tale",
    "start": "1966710",
    "end": "1973850"
  },
  {
    "text": "that's totally impossible now to have any kind of memory errors in your program using file pointers obviously",
    "start": "1973850",
    "end": "1979760"
  },
  {
    "text": "that's not quite true there's always a way to muck this stuff up but we have",
    "start": "1979760",
    "end": "1984950"
  },
  {
    "text": "the sanitizers now so if you've any of you have ever used valgrind or heard of valgrind the sanitizers are like a",
    "start": "1984950",
    "end": "1990260"
  },
  {
    "text": "version of valgrind that compiles into your code so the compilers themselves have flags that say hey generate bounced",
    "start": "1990260",
    "end": "1995960"
  },
  {
    "text": "checks for everything hey keep track of which things are live and which things are dead make sure that I can",
    "start": "1995960",
    "end": "2001580"
  },
  {
    "text": "generate an error message at runtime and it slows your program down but at runtime saying hey you did something",
    "start": "2001580",
    "end": "2007430"
  },
  {
    "text": "that was bad and the problem of course well and there are various types of sanitizers we've got memory accesses",
    "start": "2007430",
    "end": "2012830"
  },
  {
    "text": "undefined behavior thread safety there's a whole bunch of things coming but I just like to show you an example of what would happen here so here's my dreadful",
    "start": "2012830",
    "end": "2019880"
  },
  {
    "text": "piece of code which is slightly surprising the compiler actually compiles without any warnings whatsoever but I have an array of ten and I read",
    "start": "2019880",
    "end": "2026420"
  },
  {
    "text": "the eleventh element which is I think actually two off the end of it now if you were to look at the assembly code generated well forgetting the fact that",
    "start": "2026420",
    "end": "2032810"
  },
  {
    "text": "it'll optimize the whole damn thing away probably if you were to look at the assembly it would read off of the end of that array on the stack and that's",
    "start": "2032810",
    "end": "2038600"
  },
  {
    "text": "probably not going to cause it to crash so it's like it's it's broken but it probably won't even crack but what you have got is if you've got this kind of",
    "start": "2038600",
    "end": "2044930"
  },
  {
    "text": "error is a gaping security hole in your program where you're allowing somebody to read on it memory that they weren't",
    "start": "2044930",
    "end": "2050300"
  },
  {
    "text": "supposed to be able to read with the sanitizers on and forgive the shortness",
    "start": "2050300",
    "end": "2056419"
  },
  {
    "text": "of this all but you the thing like three from the bottom here with the big green line here I get this error at the point",
    "start": "2056420",
    "end": "2062510"
  },
  {
    "text": "that it happens the program stops it goes whoa there cowboy you've gone off the end of the the array here you're",
    "start": "2062510",
    "end": "2069200"
  },
  {
    "text": "poking around in the stack somewhere where you shouldn't be you've probably got an error and that's just awesome there's even more output",
    "start": "2069200",
    "end": "2075230"
  },
  {
    "text": "from that down below that tells you all the sort of other bits and pieces that are going on in your program at that time and so if you've got like decent test cases in your code",
    "start": "2075230",
    "end": "2081379"
  },
  {
    "text": "and you should have and you are prepared to build the debug and run all you of your tests with the sanitizer on then",
    "start": "2081380",
    "end": "2087290"
  },
  {
    "text": "you know you're gonna get a very good indication if you've done anything you should ought not to have done even by",
    "start": "2087290",
    "end": "2092629"
  },
  {
    "text": "accident and for what it's worth like although it slows your program down I was able to run a fairly full trading",
    "start": "2092630",
    "end": "2099320"
  },
  {
    "text": "system in debug with this sanitization on and still be able to like run it and not like timeout so it's fast enough",
    "start": "2099320",
    "end": "2105680"
  },
  {
    "text": "on today's stupidly fast computers editors have gotten better there are",
    "start": "2105680",
    "end": "2111110"
  },
  {
    "text": "plugins for everything you know your VI if you're a VI user can have autocomplete the clang tooling is",
    "start": "2111110",
    "end": "2116930"
  },
  {
    "text": "available and is allows like a language server for C++ which is awesome",
    "start": "2116930",
    "end": "2122000"
  },
  {
    "text": "sea lion is is just tremendous if you're used IntelliJ or any of the JetBrains products you now have IntelliJ for C++",
    "start": "2122000",
    "end": "2128300"
  },
  {
    "text": "which is brilliant the community C++ in the last sort of three or four years I think has really really picked",
    "start": "2128300",
    "end": "2134510"
  },
  {
    "text": "up there's a real the some of the members of the the Standards Committee are putting out like core guidelines",
    "start": "2134510",
    "end": "2140540"
  },
  {
    "text": "clearly stating like okay well we need to support these old things but you shouldn't be using them anymore you",
    "start": "2140540",
    "end": "2146420"
  },
  {
    "text": "should be using these idioms and these ideas and there's a library that goes alongside that that allows you to better",
    "start": "2146420",
    "end": "2153050"
  },
  {
    "text": "adhere to the recommendations that they've given there is a very inclusive C++ community that has a bunch of has a",
    "start": "2153050",
    "end": "2162500"
  },
  {
    "text": "what does it call discord channel there's a slack channel there's some best practices there's a lot of information out there there are tons of",
    "start": "2162500",
    "end": "2168740"
  },
  {
    "text": "things on YouTube if you're interested in like bite size best practices or would like to five-minute videos about",
    "start": "2168740",
    "end": "2173960"
  },
  {
    "text": "like hey here's a new feature of C++ he didn't know it's really picked up recently and so what are you waiting for",
    "start": "2173960",
    "end": "2179720"
  },
  {
    "text": "you should be giving C++ a go right now thank you everyone we've got ten minutes",
    "start": "2179720",
    "end": "2191210"
  },
  {
    "text": "for questions I think yeah I think I write ten minutes and we've got one question in the app but if anybody's got",
    "start": "2191210",
    "end": "2197089"
  },
  {
    "text": "a question now don't be shy read the one from the god it's one of the back there",
    "start": "2197089",
    "end": "2204500"
  },
  {
    "text": "yes hi so the quick the question was if",
    "start": "2204500",
    "end": "2214940"
  },
  {
    "text": "I'm a little bit aware of rust what do I see I'm aware of rust yeah I mean I've written like to toy programs in there",
    "start": "2214940",
    "end": "2221240"
  },
  {
    "text": "and I've looked at the like from my point of view I love performance and things so I like row raytracer and I was like compare you with my C++ raytracer",
    "start": "2221240",
    "end": "2226849"
  },
  {
    "text": "and I'm like oh yeah that seems pretty good actually so Russ brings almost all of the things that seemed lost lost",
    "start": "2226849",
    "end": "2232490"
  },
  {
    "text": "brings in total honesty to you it is slightly more slightly it's much much",
    "start": "2232490",
    "end": "2238369"
  },
  {
    "text": "stricter about the borrowing which I know I've said it's like moving ownership around it's much stricter on",
    "start": "2238369",
    "end": "2244190"
  },
  {
    "text": "that front which allows you to be to be in the situation where if your code compiles you probably aren't gonna fall",
    "start": "2244190",
    "end": "2250760"
  },
  {
    "text": "afoul of anything you don't need a sanitizer as such in Russ because if the compiler come compiler compiled it you're probably okay",
    "start": "2250760",
    "end": "2255890"
  },
  {
    "text": "whereas with C++ it's still possible to play fast and loose which is sort of part of the appeal because sometimes you know your own access patterns and it's",
    "start": "2255890",
    "end": "2262970"
  },
  {
    "text": "very hard to prove too static checker that there the path that it's found by construction of your",
    "start": "2262970",
    "end": "2268410"
  },
  {
    "text": "program can't actually happen so I'm very excited for rust I don't know",
    "start": "2268410",
    "end": "2273450"
  },
  {
    "text": "enough about it to comment more than that though but I think it brings most of the things that C++ has any other",
    "start": "2273450",
    "end": "2278700"
  },
  {
    "text": "questions in the room I was wonder from here so the question",
    "start": "2278700",
    "end": "2288390"
  },
  {
    "text": "was do we use sanitizers in debug bills but not in our production stuff broadly",
    "start": "2288390",
    "end": "2293609"
  },
  {
    "text": "yes although I know that Google are using some of the sanitizers in some of their core components just to for",
    "start": "2293609",
    "end": "2300750"
  },
  {
    "text": "security sort of checking reasons so like cut down things for overflows of",
    "start": "2300750",
    "end": "2306059"
  },
  {
    "text": "like signed and unsigned integers and some of the weird things that compiler can do around those I think they build those into like core components of the",
    "start": "2306059",
    "end": "2311400"
  },
  {
    "text": "Android operating system just to get the protection from it they're like performance is not as important as not crashing and not having a giant security",
    "start": "2311400",
    "end": "2317519"
  },
  {
    "text": "hole so we've got one question via the app which are we - my biggest issue with",
    "start": "2317519",
    "end": "2323069"
  },
  {
    "text": "getting started is understanding the ecosystem how do you start a new project and add dependencies what about",
    "start": "2323069",
    "end": "2328740"
  },
  {
    "text": "deployments and build systems that is yes that is conspicuous by its absence",
    "start": "2328740",
    "end": "2333839"
  },
  {
    "text": "in this talk I'm afraid it the story is not good yet for C++ the best thing in",
    "start": "2333839",
    "end": "2340529"
  },
  {
    "text": "terms of sort of getting yourself up and started with a HelloWorld I would suggest grabbing sea lion",
    "start": "2340529",
    "end": "2346680"
  },
  {
    "text": "Community Edition and just saying file new project and sort of playing around with that that's quite a good way of",
    "start": "2346680",
    "end": "2352380"
  },
  {
    "text": "getting started it builds a seem a project in the background and stuff there's there's a lot of layers of things that are going on there I'm not a",
    "start": "2352380",
    "end": "2359910"
  },
  {
    "text": "fan of that myself but it certainly gets you up and running quickly in terms of adding dependencies there is a couple of",
    "start": "2359910",
    "end": "2366240"
  },
  {
    "text": "current like best-of-breed package management systems for C++ there's something called Conan I haven't",
    "start": "2366240",
    "end": "2373859"
  },
  {
    "text": "used it myself extensively but it worked well enough to like follow the tutorial but yeah with the committee are well",
    "start": "2373859",
    "end": "2379319"
  },
  {
    "text": "aware that this is a problem now and in fact as of the last meeting they have put together a new working group to try",
    "start": "2379319",
    "end": "2387180"
  },
  {
    "text": "and make that onboarding process affecting the tooling around C++ much much better because it's compared to",
    "start": "2387180",
    "end": "2393299"
  },
  {
    "text": "rust I mean that's that's that's where rust shines right I mean I this is a brand new laptop and I I would need to put a whole bunch of",
    "start": "2393299",
    "end": "2399090"
  },
  {
    "text": "things in it I put rust in and I just clicked on the link and typed it through my shell and I had rust running and I just ran one of my projects and",
    "start": "2399090",
    "end": "2405120"
  },
  {
    "text": "downloaded all the dependencies and it built them all and then it ran my application like this this is how it should be for C++ but it's not there yet",
    "start": "2405120",
    "end": "2413000"
  },
  {
    "text": "yeah I'm sorry that's not the answer that the question I wanted I'm certain but what would be a compelling reason to",
    "start": "2413000",
    "end": "2419730"
  },
  {
    "text": "start a new project and C++ I find myself wondering I mean you just heard a big appeal about fighting against",
    "start": "2419730",
    "end": "2425910"
  },
  {
    "text": "entropy throw away the old code yeah with new things that is very true so yeah the entropy that you mentioned -",
    "start": "2425910",
    "end": "2432180"
  },
  {
    "text": "from the the keynote I think that is a real problem but one man's entropy is",
    "start": "2432180",
    "end": "2438150"
  },
  {
    "text": "another person's like core component and there are still some code in systems",
    "start": "2438150",
    "end": "2444930"
  },
  {
    "text": "that I've worked on that have like come from 10 years prior to my arrival and those are probably written in C or early",
    "start": "2444930",
    "end": "2450840"
  },
  {
    "text": "C++ and it's sometimes it's nice to pay that code up and just pump it in and there's no interoperability problems",
    "start": "2450840",
    "end": "2455940"
  },
  {
    "text": "it's just a function like any other function so there are certain things to be said for that that said you know the",
    "start": "2455940",
    "end": "2461640"
  },
  {
    "text": "rough story is pretty good and you know it's interoperability is is I believe pretty good - yeah that's my biggest",
    "start": "2461640",
    "end": "2468870"
  },
  {
    "text": "gripe with C++ all the old ways of shooting yourself in the foot are still they're still valid yeah there's think",
    "start": "2468870",
    "end": "2474240"
  },
  {
    "text": "the very I think Auto pointer has actually been taken out now was it which was the first aborted attempt at doing",
    "start": "2474240",
    "end": "2479370"
  },
  {
    "text": "these smart pointers and it just didn't work and there were some horrific problems were there so but any more",
    "start": "2479370",
    "end": "2485100"
  },
  {
    "text": "questions from the audience",
    "start": "2485100",
    "end": "2487820"
  },
  {
    "text": "tdd I would recommend I use catch the catch to I think it's called and I think",
    "start": "2493170",
    "end": "2499590"
  },
  {
    "text": "it has a BDD and TDD mode of doing it it's a header Oni library it's pretty",
    "start": "2499590",
    "end": "2506070"
  },
  {
    "text": "easy pretty straightforward to use okay",
    "start": "2506070",
    "end": "2511380"
  },
  {
    "text": "oh one there hi so the guideline support",
    "start": "2511380",
    "end": "2530550"
  },
  {
    "text": "sort of the guidelines whatever where they where I'll go back a couple of slides where are we the core guidelines which these are these slides will have",
    "start": "2530550",
    "end": "2536670"
  },
  {
    "text": "links to them and they are pretty good about saying this part don't touch that anymore but they're a",
    "start": "2536670",
    "end": "2543240"
  },
  {
    "text": "huge document now I would say that the vast majority of the standard library is actually fine there's no problems with",
    "start": "2543240",
    "end": "2549900"
  },
  {
    "text": "with it they mean things like Auto pointer which is like the one like glaring problem that has actually been removed or it has a deprecation warning",
    "start": "2549900",
    "end": "2556230"
  },
  {
    "text": "or whatever so I think you're pretty okay with that boost is a high quality",
    "start": "2556230",
    "end": "2561660"
  },
  {
    "text": "piece of software as well there are what else is there I think probably boost is",
    "start": "2561660",
    "end": "2568680"
  },
  {
    "text": "the best one to recommend it as a general-purpose like here are some algorithms and I mean it that's another thing that supercilious is a little bit",
    "start": "2568680",
    "end": "2574050"
  },
  {
    "text": "weak on you like you want to say hey I just want to like change the case of my string I've got my string and I want to upper case you're like ah here's this",
    "start": "2574050",
    "end": "2579480"
  },
  {
    "text": "snippet of code that does it with a stood transform of this to stood up and you're like no no no I won't string to",
    "start": "2579480",
    "end": "2585030"
  },
  {
    "text": "upper case please that's what I'm used to in every other reasonable language ever but these things will be coming down the pike oh I think people are",
    "start": "2585030",
    "end": "2590760"
  },
  {
    "text": "starting to realize that that is a real barrier to adoption for people is it if you can't just dive in and do the stuff you want to do straight away then you're",
    "start": "2590760",
    "end": "2596820"
  },
  {
    "text": "going to very quickly go something else any more questions",
    "start": "2596820",
    "end": "2603740"
  },
  {
    "text": "all right in which case thank you very much Matt thank you very much - cool thank you come and grab there are some",
    "start": "2603740",
    "end": "2610680"
  },
  {
    "text": "compiler Explorer stickers up here if you want to come in grab one",
    "start": "2610680",
    "end": "2614990"
  }
]