[
  {
    "start": "0",
    "end": "50000"
  },
  {
    "text": "[Music] my name is Ben I work at Google in Munich on webassembly it's a project I",
    "start": "6990",
    "end": "13920"
  },
  {
    "text": "started three years ago with some colleagues that actually not colleagues but some collaborators at Mozilla and",
    "start": "13920",
    "end": "19439"
  },
  {
    "text": "since then many people have been involved my colleague andreas Rosberg also works at Google we're gonna give a",
    "start": "19439",
    "end": "24989"
  },
  {
    "text": "half-and-half presentation so we're gonna switch off in the middle so you can stand there and be creepy if you like you can sit but I'll go ahead and",
    "start": "24989",
    "end": "33840"
  },
  {
    "text": "begin yes you can stand up and slap me",
    "start": "33840",
    "end": "38969"
  },
  {
    "text": "if I say something wrong okay so I'm gonna talk about what webassembly is why we did webassembly",
    "start": "38969",
    "end": "45059"
  },
  {
    "text": "why it's like that actually the why is gonna be more Andres as test to describe and we're gonna talk about where it's",
    "start": "45059",
    "end": "50909"
  },
  {
    "start": "50000",
    "end": "134000"
  },
  {
    "text": "going so what is web assembly what we've designed is basically a bytecode for the",
    "start": "50909",
    "end": "56850"
  },
  {
    "text": "web is designed to be portable across machines across platforms so that you",
    "start": "56850",
    "end": "62069"
  },
  {
    "text": "can write a program and get to sort of run right once run anywhere kind of promise that java head",
    "start": "62069",
    "end": "69390"
  },
  {
    "text": "it's designed to be compact and to be compact it's a binary format so you don't see text unless you disassemble a",
    "start": "69390",
    "end": "75900"
  },
  {
    "text": "binary in order to be universal it has a low-level execution model in particular",
    "start": "75900",
    "end": "81300"
  },
  {
    "text": "we wanted to support languages like C++ because we observed that many people had",
    "start": "81300",
    "end": "86490"
  },
  {
    "text": "their asou plus plus applications such as games and we're already compiling them to the web and running them in",
    "start": "86490",
    "end": "91680"
  },
  {
    "text": "JavaScript so those already used case that we wanted to support so we had to make sure that it worked well nowadays",
    "start": "91680",
    "end": "96990"
  },
  {
    "text": "which is really great for me to be able to say this it's natively support in all major browsers that means Chrome Firefox",
    "start": "96990",
    "end": "103110"
  },
  {
    "text": "Safari and edge we developed in under the auspices of a w3c community group",
    "start": "103110",
    "end": "111120"
  },
  {
    "text": "which basically allows anyone to join and comment and also we have a working",
    "start": "111120",
    "end": "116490"
  },
  {
    "text": "group which is a more formal body which sort of they actually approve final",
    "start": "116490",
    "end": "121620"
  },
  {
    "text": "specifications the idea is that we didn't want to reinvent the web platform but integrate with the web platform so",
    "start": "121620",
    "end": "128459"
  },
  {
    "text": "any API that you have for example that's available in JavaScript you can get you through web assembly so there's a lot of",
    "start": "128459",
    "end": "136620"
  },
  {
    "start": "134000",
    "end": "159000"
  },
  {
    "text": "users already and many potential users coming so we've shown demos including",
    "start": "136620",
    "end": "142110"
  },
  {
    "text": "Google Earth the unity3d engine which many many games both on Android and on",
    "start": "142110",
    "end": "147450"
  },
  {
    "text": "the web use but CAD applications farmville - which makes money for Zynga",
    "start": "147450",
    "end": "153800"
  },
  {
    "text": "audio editing and things like that all these things are now coming to the web and web assemblies execution technology",
    "start": "153800",
    "end": "159870"
  },
  {
    "start": "159000",
    "end": "238000"
  },
  {
    "text": "for them I'm going to talk about the basics of the technology so all code and",
    "start": "159870",
    "end": "165840"
  },
  {
    "text": "web assembly comes in larger groups of what we call modules a module is",
    "start": "165840",
    "end": "171390"
  },
  {
    "text": "basically a group of related functions it can be as large as a whole executable or can be as small as a DLL you can also",
    "start": "171390",
    "end": "178020"
  },
  {
    "text": "make a module as small as a single function if you like a module always imports the functionality that it needs",
    "start": "178020",
    "end": "183300"
  },
  {
    "text": "from outside so anything besides running peer computation and accessing memory anything that would be i/o anything that",
    "start": "183300",
    "end": "190140"
  },
  {
    "text": "would be networking anything that would be displaying graphics that has to be explicitly imported into a module what",
    "start": "190140",
    "end": "196290"
  },
  {
    "text": "that gives us is a separation to say that web assembly code can be sandboxed so you add the external functionality it",
    "start": "196290",
    "end": "203220"
  },
  {
    "text": "can also be embedded in other scenarios besides the web but in particular web gives us the capabilities to talk to the",
    "start": "203220",
    "end": "210090"
  },
  {
    "text": "Dom for example but always through JavaScript enforce a module is not an actual program that's executing it has",
    "start": "210090",
    "end": "217440"
  },
  {
    "text": "no state it instead is like a declaration you can consider analogous to the text of your program it's not an",
    "start": "217440",
    "end": "223739"
  },
  {
    "text": "actually running program in order to get it running you have to instantiate it that creates something that does have state and I'll",
    "start": "223739",
    "end": "230340"
  },
  {
    "text": "talk about in detail what the state is but it's basically a large memory and also local variables global variables so",
    "start": "230340",
    "end": "237840"
  },
  {
    "text": "an instance is the running program so to speak so to put that in pictures just because a slides full of texts are",
    "start": "237840",
    "end": "244380"
  },
  {
    "start": "238000",
    "end": "273000"
  },
  {
    "text": "boring you I'm now using green boxes to represent modules module basically again",
    "start": "244380",
    "end": "250560"
  },
  {
    "text": "has just functions inside everything that it needs from outside is explicitly imported and it can also export",
    "start": "250560",
    "end": "257400"
  },
  {
    "text": "functions so anything which is functionality such as the main function or subroutines to decode images or",
    "start": "257400",
    "end": "263940"
  },
  {
    "text": "whatever that modules role is our exports instantiation produces an",
    "start": "263940",
    "end": "270539"
  },
  {
    "text": "instance an instance has the actual live data in it",
    "start": "270539",
    "end": "275639"
  },
  {
    "start": "273000",
    "end": "392000"
  },
  {
    "text": "so I'm going to talk about the binary format for those of you interested in bytes and bits just to give you some",
    "start": "275639",
    "end": "282220"
  },
  {
    "text": "context you don't have to memorize this hopefully that you're not actually writing web assembly using the raw bytes",
    "start": "282220",
    "end": "288690"
  },
  {
    "text": "but it's basically very simple it's just a series of sections that come in in a",
    "start": "288690",
    "end": "293740"
  },
  {
    "text": "specific order each section has a byte which tells you what type it is we use a",
    "start": "293740",
    "end": "298870"
  },
  {
    "text": "very variable length encoding that gives us future proofing so if we have much larger modules in the future we're",
    "start": "298870",
    "end": "305889"
  },
  {
    "text": "basically limited to 4 gigabyte modules now but you can imagine all and it's sort of go away and form this of time",
    "start": "305889",
    "end": "313410"
  },
  {
    "text": "function bodies which are basically the meat of your program the code is a stack",
    "start": "313410",
    "end": "318520"
  },
  {
    "text": "machine and that code is represented as byte code so it's very dense so it looks",
    "start": "318520",
    "end": "323919"
  },
  {
    "text": "basically like this we have these codes which come in order a module first",
    "start": "323919",
    "end": "329139"
  },
  {
    "text": "declares all the signatures of functions that is going to be using in the first section because those will be referred",
    "start": "329139",
    "end": "335050"
  },
  {
    "text": "to by later sections imports come next so you can already within the first two sections you can tell what functions",
    "start": "335050",
    "end": "341830"
  },
  {
    "text": "signatures will be there what types and also what a module imports and then we",
    "start": "341830",
    "end": "346930"
  },
  {
    "text": "get two function declarations which are functions that are inside this module and defined inside this module the",
    "start": "346930",
    "end": "352539"
  },
  {
    "text": "indirect table is how we do indirect calls I won't not important to get into the details of that memory configuration",
    "start": "352539",
    "end": "358000"
  },
  {
    "text": "talks about how big the memory is that this module expects and other properties of it Global's are global variables",
    "start": "358000",
    "end": "364740"
  },
  {
    "text": "exports are the functions that will be exported from this module and therefore be available outside the module there's",
    "start": "364740",
    "end": "371470"
  },
  {
    "text": "also an initialization function which you can specify the indirect tables can",
    "start": "371470",
    "end": "377259"
  },
  {
    "text": "be initialized that's as the next section after that then the main section after that is the function bodies which",
    "start": "377259",
    "end": "382960"
  },
  {
    "text": "includes byte code and then there's some initializing initialization data through",
    "start": "382960",
    "end": "388060"
  },
  {
    "text": "memory so you can have some part of your binary basically gets loaded into memory at the start so proportionately speaking",
    "start": "388060",
    "end": "394900"
  },
  {
    "start": "392000",
    "end": "420000"
  },
  {
    "text": "most of the most of the binary is going to be the function bodies it's going to be code we've observed about 90% of the",
    "start": "394900",
    "end": "401650"
  },
  {
    "text": "modules in the wild are comprised of code and then of course it depends",
    "start": "401650",
    "end": "407780"
  },
  {
    "text": "you can add custom sections to a binary those things are ignored by the engine they execute the engine they execute",
    "start": "407780",
    "end": "413900"
  },
  {
    "text": "your binary and you can add them at the end or sprinkle them in the middle and obviously the proportions will change",
    "start": "413900",
    "end": "421150"
  },
  {
    "start": "420000",
    "end": "518000"
  },
  {
    "text": "with how much extra sections that you add okay so I'm going to talk about the",
    "start": "421150",
    "end": "427490"
  },
  {
    "text": "execution model now so above this sort of dashed red line in the middle of the",
    "start": "427490",
    "end": "433280"
  },
  {
    "text": "slide that's application state that state that your program can actually change by executing instructions things",
    "start": "433280",
    "end": "440150"
  },
  {
    "text": "below the line you cannot directly change nor address and this is basically how we accomplish sandboxing so if you",
    "start": "440150",
    "end": "446780"
  },
  {
    "text": "can imagine if you think to x86 if you think all the way down at the Machine level you can address the stack and you",
    "start": "446780",
    "end": "451880"
  },
  {
    "text": "can smash the stack and that's a huge security vulnerability we didn't want that for the web they'll be terrible so",
    "start": "451880",
    "end": "457940"
  },
  {
    "text": "instead the call stack is something that you cannot directly address you cannot no bug in your program can cause to the",
    "start": "457940",
    "end": "464030"
  },
  {
    "text": "call stack to become corrupted similarly with the indirect function table which is how we do indirect calls that cannot",
    "start": "464030",
    "end": "469729"
  },
  {
    "text": "be corrupted by your program the function representations whatever they look like inside the actual web assembly",
    "start": "469729",
    "end": "476390"
  },
  {
    "text": "engine you cannot get to them and that's by design instead the state that we give you to",
    "start": "476390",
    "end": "481729"
  },
  {
    "text": "play with in your program is basically a large byte array it sounds almost silly",
    "start": "481729",
    "end": "488720"
  },
  {
    "text": "when you put it that way but it's basically an emulation of a machine web assembly is a machine so you can",
    "start": "488720",
    "end": "495130"
  },
  {
    "text": "literally put any bits that you want into the memory but that memory is separated from all the other memory in",
    "start": "495130",
    "end": "500450"
  },
  {
    "text": "the process of the embedding so you can't get to the browser state through the linear memory that's only private to",
    "start": "500450",
    "end": "505850"
  },
  {
    "text": "the program the other state that we have is global variables and those you cannot address indirectly you have must always",
    "start": "505850",
    "end": "512150"
  },
  {
    "text": "specify an index so you can't corrupt the global variables by having an arrant pointer in your C program for example",
    "start": "512150",
    "end": "519219"
  },
  {
    "start": "518000",
    "end": "598000"
  },
  {
    "text": "I'll talk about the instruction set we have four basic types they're all simple",
    "start": "519219",
    "end": "524890"
  },
  {
    "text": "primitive types so we have 32-bit integers 64-bit integers 32-bit",
    "start": "524890",
    "end": "530000"
  },
  {
    "text": "floating-point numbers in 64-bit floating-point numbers integers do not have a sign instead we put the sign on",
    "start": "530000",
    "end": "536360"
  },
  {
    "text": "operations this is the same way like a machine works so x86 does not define that",
    "start": "536360",
    "end": "541520"
  },
  {
    "text": "a 32-bit register has a sign instead there are operations that treat the high order bit as signed or not instructions",
    "start": "541520",
    "end": "549350"
  },
  {
    "text": "are you can group them roughly by the types of values they manipulate so we",
    "start": "549350",
    "end": "555110"
  },
  {
    "text": "have addition and subtraction and things like that for each of these primitive types but we also have instructions",
    "start": "555110",
    "end": "561230"
  },
  {
    "text": "which are polymorphic or there's sort of parameterize over types so accessing",
    "start": "561230",
    "end": "566630"
  },
  {
    "text": "local variables global variables and the memory all of those you can load different types and then to accomplish",
    "start": "566630",
    "end": "574460"
  },
  {
    "text": "function calls we have byte codes for calling functions directly where you specify an index calling functions",
    "start": "574460",
    "end": "581510"
  },
  {
    "text": "indirectly that's where this table comes from this is where you specify computed index returning from a function and then",
    "start": "581510",
    "end": "588380"
  },
  {
    "text": "local control flow is done with blocks ifs and loops so instead of having jumps",
    "start": "588380",
    "end": "593720"
  },
  {
    "text": "and branches in your code you actually have structure control flow constructs",
    "start": "593720",
    "end": "598930"
  },
  {
    "start": "598000",
    "end": "746000"
  },
  {
    "text": "okay so now we get to actually look at the bytes if you're interested so we have a text format for web assembly code",
    "start": "598930",
    "end": "605090"
  },
  {
    "text": "you can take any binary and and disassemble it to that text format you can also go what the other direction",
    "start": "605090",
    "end": "610970"
  },
  {
    "text": "take the text format and go to the binary just to be clear this is more",
    "start": "610970",
    "end": "616340"
  },
  {
    "text": "like disassembling x86 machine code this is not like going back to your programs original code we don't expect people to",
    "start": "616340",
    "end": "622220"
  },
  {
    "text": "write the text format to write their programs this way instead they compile into web assembly but I'll show you kind",
    "start": "622220",
    "end": "629120"
  },
  {
    "text": "of some various highlights about how we about how the binary format works so on",
    "start": "629120",
    "end": "635840"
  },
  {
    "text": "the Left we have an add function it has two parameters we declare the types as I 32 we declare this result type as I 32",
    "start": "635840",
    "end": "643280"
  },
  {
    "text": "and then inside the function we have this in the text format we have this syntax which looks a bit like Lisp which",
    "start": "643280",
    "end": "649250"
  },
  {
    "text": "is s expressions you can we're adding the two we're getting the the values of",
    "start": "649250",
    "end": "655010"
  },
  {
    "text": "those two local variables and then just adding them in returning there there's an implicit return so if you fall off",
    "start": "655010",
    "end": "661280"
  },
  {
    "text": "the end of the code with a value that gets returned from the function so in",
    "start": "661280",
    "end": "666290"
  },
  {
    "text": "the binary what we have is a selection of what shows up in various sections so",
    "start": "666290",
    "end": "671480"
  },
  {
    "text": "in the type section we have to have a declaration of that function signature type this is how it looks 6d",
    "start": "671480",
    "end": "677950"
  },
  {
    "text": "and hex actually means hey this is a function type to is the number of parameters than 7f is int which you",
    "start": "677950",
    "end": "684370"
  },
  {
    "text": "should probably not memorize but and then there's one return value and that's actually the future proof for adding",
    "start": "684370",
    "end": "690339"
  },
  {
    "text": "more return values in the future so that's how we describe this type and then in the function declaration section",
    "start": "690339",
    "end": "696190"
  },
  {
    "text": "we just have a series of there types the only thing that we have to declare what the function is its type and we use a",
    "start": "696190",
    "end": "701649"
  },
  {
    "text": "index into the type section so we have one function it's type number zero which happens to be that and then the function",
    "start": "701649",
    "end": "707800"
  },
  {
    "text": "body we have one function body its length is seven so that blue number",
    "start": "707800",
    "end": "713529"
  },
  {
    "text": "there is actually a variable length encoding of the number seven it could actually be one byte but in this example",
    "start": "713529",
    "end": "719399"
  },
  {
    "text": "it's padded and then the function body comes next it tells you that we have",
    "start": "719399",
    "end": "724690"
  },
  {
    "text": "zero additional local variables it tells and then we have the actual byte codes so the byte codes come in execution",
    "start": "724690",
    "end": "732250"
  },
  {
    "text": "order to 20 and X's get local which you should also memorize and then the local",
    "start": "732250",
    "end": "739480"
  },
  {
    "text": "variable indices so the actual need of this program is only the seven byte a body which is quite a bit shorter than",
    "start": "739480",
    "end": "745990"
  },
  {
    "text": "the text format obviously okay so I'm going to talk about how we embed web",
    "start": "745990",
    "end": "752260"
  },
  {
    "start": "746000",
    "end": "918000"
  },
  {
    "text": "assembly we had a very clear goal that we wanted to separate the execution core",
    "start": "752260",
    "end": "757630"
  },
  {
    "text": "of web assembly from how its embedded in another program in another setting so I mentioned that I mentioned the x86 a",
    "start": "757630",
    "end": "765220"
  },
  {
    "text": "couple of times is you can think of web assembly as being an out analogous to an instruction set architecture x86 doesn't",
    "start": "765220",
    "end": "772420"
  },
  {
    "text": "have I Oh functions that doesn't have a graphics card that's part of the instruction set instead that's all",
    "start": "772420",
    "end": "778089"
  },
  {
    "text": "provided by a layer of software above web assembly is very similar we call all that layer above the embedding so that",
    "start": "778089",
    "end": "786010"
  },
  {
    "text": "layer provides the ability to load and instantiate modules link modules so imports and exports being connected",
    "start": "786010",
    "end": "792520"
  },
  {
    "text": "together and also import host functionality so again like IO functions accessing frame buffers whatever you",
    "start": "792520",
    "end": "800200"
  },
  {
    "text": "like that's all in a layer above web assembly so we've defined a very clear separation on purpose for doing that",
    "start": "800200",
    "end": "806340"
  },
  {
    "text": "the most important embedding is definitely JavaScript so web assembly",
    "start": "806340",
    "end": "812190"
  },
  {
    "text": "can be embedded in a JavaScript execution context and in fact in v8 in Chrome that's how it's implemented it's",
    "start": "812190",
    "end": "818100"
  },
  {
    "text": "embedded in the JavaScript API and then that is embedded further in the web so",
    "start": "818100",
    "end": "823440"
  },
  {
    "text": "there's actually more layers above web assembly so the JavaScript API is allow",
    "start": "823440",
    "end": "829260"
  },
  {
    "text": "us to load in the stanchions and get access to other api's in javascript to",
    "start": "829260",
    "end": "834510"
  },
  {
    "text": "do all those fun things with the screen in the dom we can also call web assembly from JavaScript and the key idea is that",
    "start": "834510",
    "end": "842190"
  },
  {
    "text": "web assembly doesn't add any new API surface to the web other than the API is for manipulating web assembly it doesn't",
    "start": "842190",
    "end": "848550"
  },
  {
    "text": "fundamentally change what you can do with the web so just to make that a",
    "start": "848550",
    "end": "853920"
  },
  {
    "text": "picture because again text is boring we've got our module here actually an",
    "start": "853920",
    "end": "858930"
  },
  {
    "text": "instance here it's got his code and data inside the only way that it can get to the outside the only way can get to the console or",
    "start": "858930",
    "end": "865260"
  },
  {
    "text": "do IO is through imported functions that means that the outside world can sort of interpose and make sure that web",
    "start": "865260",
    "end": "873630"
  },
  {
    "text": "assembly module doesn't escape its sandbox so to speak okay so we can have",
    "start": "873630",
    "end": "880589"
  },
  {
    "text": "explicitly imported JavaScript functions you can think of this blackness around as the void which is JavaScript we can",
    "start": "880589",
    "end": "886920"
  },
  {
    "text": "have explicitly imported JavaScript functions and we have an API which I'll show in the next slide or two slides",
    "start": "886920",
    "end": "892700"
  },
  {
    "text": "what that looks like to load and validate the modules and then when a function is exported from a web assembly",
    "start": "892700",
    "end": "899700"
  },
  {
    "text": "module it's just callable from JavaScript like another JavaScript function we can also",
    "start": "899700",
    "end": "905400"
  },
  {
    "text": "export the the actual data the memory the linear memory that I mentioned in the other slide we can actually get to",
    "start": "905400",
    "end": "911040"
  },
  {
    "text": "that from JavaScript that's optional that's basically a way that you can do zero copy IO with JavaScript in the web",
    "start": "911040",
    "end": "918570"
  },
  {
    "start": "918000",
    "end": "980000"
  },
  {
    "text": "platform so this is what that JavaScript",
    "start": "918570",
    "end": "925650"
  },
  {
    "text": "API looks like there's a web assembly object which is in the outermost JavaScript context and everything hangs",
    "start": "925650",
    "end": "931770"
  },
  {
    "text": "off that we have types which represent modules so this is an opaque representation where you take the bytes",
    "start": "931770",
    "end": "938730"
  },
  {
    "text": "and you decode that to a web module instance and then from JavaScript you can create the next thing which is a",
    "start": "938730",
    "end": "944580"
  },
  {
    "text": "web assembly instance and actually has the state the memory is in tables you",
    "start": "944580",
    "end": "949620"
  },
  {
    "text": "can actually create and manipulate from JavaScript through the API and that's I won't get",
    "start": "949620",
    "end": "954870"
  },
  {
    "text": "into that but you can accomplish a kind of dynamic linking that way there's also an synchronous and asynchronous API is",
    "start": "954870",
    "end": "961260"
  },
  {
    "text": "in JavaScript for doing these things for example the constructors that take bytes",
    "start": "961260",
    "end": "966870"
  },
  {
    "text": "those are synchronous those will not complete until that operation is done for example compiling or parsing the",
    "start": "966870",
    "end": "973170"
  },
  {
    "text": "bytes but the asynchronous API is give you a promise back so that you can go back to the main event loop and then the",
    "start": "973170",
    "end": "979590"
  },
  {
    "text": "promise will complete when that operation is done now I'd like to hand it over to my colleague andreas for the",
    "start": "979590",
    "end": "985590"
  },
  {
    "start": "980000",
    "end": "1178000"
  },
  {
    "text": "rest of ya so at this point we could give you all sorts of examples of how",
    "start": "985590",
    "end": "991860"
  },
  {
    "text": "you use that web assembly and how you write code how the code looks in I mean Ben gave some simple examples but the",
    "start": "991860",
    "end": "998070"
  },
  {
    "text": "the basic idea is you should never be doing that right you shouldn't be writing web assembly code by hand so",
    "start": "998070",
    "end": "1003260"
  },
  {
    "text": "there isn't much point in actually showing much of that in the presentation here rather instead of doing that I want",
    "start": "1003260",
    "end": "1011330"
  },
  {
    "text": "to give you some more high-level background about why we did web assembly and why we did it the way we did it and",
    "start": "1011330",
    "end": "1017690"
  },
  {
    "text": "where it's heading so okay so obviously",
    "start": "1017690",
    "end": "1025640"
  },
  {
    "text": "one of the goals of webassembly was to provide high performance to the web I mean with JavaScript these days you can",
    "start": "1025640",
    "end": "1032150"
  },
  {
    "text": "get pretty good they are amazingly fast if if you hit the the good cases but",
    "start": "1032150",
    "end": "1037670"
  },
  {
    "text": "it's it all depends on actually hitting the good cases right so actually more",
    "start": "1037670",
    "end": "1043459"
  },
  {
    "text": "important than just performance in general is that this performance is predictable so that was one of the main",
    "start": "1043459",
    "end": "1049160"
  },
  {
    "text": "goals of web asunder to write provide you with predictable performance models",
    "start": "1049160",
    "end": "1055090"
  },
  {
    "text": "another important goal for us is actually basically let me call it breaking the javascript monopoly on the",
    "start": "1055840",
    "end": "1062540"
  },
  {
    "text": "web right so there are a gazillion languages that compile through the web these days but if any of you who is a",
    "start": "1062540",
    "end": "1068030"
  },
  {
    "text": "compiler writer will probably realize that javascript is like a horrible compilation target",
    "start": "1068030",
    "end": "1073660"
  },
  {
    "text": "and you have to jump through all sorts of fruits and it's gonna be inefficient in many cases to compile a random",
    "start": "1073660",
    "end": "1079840"
  },
  {
    "text": "language to JavaScript so for web assembly we wanted to have this universal format that you can",
    "start": "1079840",
    "end": "1086650"
  },
  {
    "text": "compile any language to in a reasonable manner and what comes with that also is",
    "start": "1086650",
    "end": "1093970"
  },
  {
    "text": "the ability to add features and have languages that compile to the web",
    "start": "1093970",
    "end": "1099030"
  },
  {
    "text": "support features that JavaScript does not support and probably won't ever support so one early example of a",
    "start": "1099030",
    "end": "1106360"
  },
  {
    "text": "feature that JavaScript currently doesn't support is like in 64 native types other things are threats in some",
    "start": "1106360",
    "end": "1114580"
  },
  {
    "text": "way and cyndi for example we're gonna add at some point and things like that",
    "start": "1114580",
    "end": "1119830"
  },
  {
    "text": "tail calls is another interesting example I could talk about quite a while",
    "start": "1119830",
    "end": "1126210"
  },
  {
    "text": "so yeah it gives us a new way of adding features to the web where JavaScript",
    "start": "1126210",
    "end": "1131380"
  },
  {
    "text": "would get in the way and one other thing I guess some of you are aware of like",
    "start": "1131380",
    "end": "1138460"
  },
  {
    "text": "previous technologies that existed like SMGs was kind of like a predecessor of web assembly and that was done by",
    "start": "1138460",
    "end": "1145480"
  },
  {
    "text": "Mozilla and and Google had this technology called Native Client where you could actually ship x86 or in in",
    "start": "1145480",
    "end": "1153910"
  },
  {
    "text": "portable neckla was LLVM bit code to the web but all these technologies had their",
    "start": "1153910",
    "end": "1161560"
  },
  {
    "text": "issues and weren't widely adopted and one one reason to do web assembly is to unify them into one thing that everybody",
    "start": "1161560",
    "end": "1167470"
  },
  {
    "text": "supports and it's maybe interesting to know that all the people who worked on asm.js and on neckl before all working",
    "start": "1167470",
    "end": "1174880"
  },
  {
    "text": "on web assembly in these days so we",
    "start": "1174880",
    "end": "1180700"
  },
  {
    "start": "1178000",
    "end": "1303000"
  },
  {
    "text": "designed this thing I gave you some reasons why we want to do it and obviously that comes with a number of",
    "start": "1180700",
    "end": "1186040"
  },
  {
    "text": "design goals and also design constraints so there's a whole list of them I just",
    "start": "1186040",
    "end": "1192570"
  },
  {
    "text": "give them here I don't want to go through all of them but obviously some of these we already mentioned before",
    "start": "1192570",
    "end": "1197980"
  },
  {
    "text": "like it's supposed to be in language independence it must be platform-independent which on the web or",
    "start": "1197980",
    "end": "1203200"
  },
  {
    "text": "Hardware independent on the web it's an obvious goal by at home independent I actually mean it's",
    "start": "1203200",
    "end": "1208700"
  },
  {
    "text": "not dependent on the web or JavaScript either and I will get back to that and then yeah of course you want it to be",
    "start": "1208700",
    "end": "1215090"
  },
  {
    "text": "fast to execute you want it to be safe which is also important on the web and the lower two bits are properties we",
    "start": "1215090",
    "end": "1222169"
  },
  {
    "text": "wanted to have for this yeah it should have nice properties it should be",
    "start": "1222169",
    "end": "1227600"
  },
  {
    "text": "predictable in in various semantic dimensions so this is all about the the",
    "start": "1227600",
    "end": "1232940"
  },
  {
    "text": "semantics of web assembly as a language if you want but there's another",
    "start": "1232940",
    "end": "1238909"
  },
  {
    "text": "dimension that then also already mentioned which is the representation",
    "start": "1238909",
    "end": "1243980"
  },
  {
    "text": "that I mentioned so it's also important because you transfer this these binaries these modules over the wire that they",
    "start": "1243980",
    "end": "1250190"
  },
  {
    "text": "are compact right because that is where where time is spent and probably you're on your budget and for your mobile to",
    "start": "1250190",
    "end": "1257659"
  },
  {
    "text": "contract so it's really important that it's compact but then also we want to",
    "start": "1257659",
    "end": "1262779"
  },
  {
    "text": "generate just-in-time compile a t'v code so it's designed to make that easy so",
    "start": "1262779",
    "end": "1269029"
  },
  {
    "text": "that we can decode it fast that we can compile it fast that we can validate it",
    "start": "1269029",
    "end": "1274580"
  },
  {
    "text": "fast on top of that the whole binary format is designed in a way that even makes it possible to start compiling",
    "start": "1274580",
    "end": "1281119"
  },
  {
    "text": "without having seen the whole thing so you can actually streaming compiled like while the bytes are still coming in you",
    "start": "1281119",
    "end": "1287779"
  },
  {
    "text": "can start compiling some functions and you can paralyze out compilation of separate functions to the whole binary",
    "start": "1287779",
    "end": "1293600"
  },
  {
    "text": "format and the order of sections you saw on Ben's slide was chosen particular to",
    "start": "1293600",
    "end": "1300529"
  },
  {
    "text": "make these things possible so did we achieve these goals well it's",
    "start": "1300529",
    "end": "1306799"
  },
  {
    "start": "1303000",
    "end": "1440000"
  },
  {
    "text": "in general it's probably a bit early to tell but we have some preliminary numbers so we we wrote a paper that we",
    "start": "1306799",
    "end": "1314389"
  },
  {
    "text": "submitted to to a scientific conference earlier this year which is called PL di",
    "start": "1314389",
    "end": "1319519"
  },
  {
    "text": "where we had a number a couple of of graphs so this is one of them which is",
    "start": "1319519",
    "end": "1325369"
  },
  {
    "text": "about performance and there's actually a lot to see in that graph I'm not going",
    "start": "1325369",
    "end": "1330739"
  },
  {
    "text": "to explain everything but it shows like execution time compile time and validation time and VM start up for",
    "start": "1330739",
    "end": "1338919"
  },
  {
    "text": "various individual Tremont's from from a larger benchmark suit called police",
    "start": "1338919",
    "end": "1344329"
  },
  {
    "text": "pelleve entity and the blue bar is probably the most important one that",
    "start": "1344329",
    "end": "1351229"
  },
  {
    "text": "actually first what what is the percentage on the left that is the comparison to execution time for the",
    "start": "1351229",
    "end": "1356959"
  },
  {
    "text": "same program so these RC programs essentially when running on in compiled",
    "start": "1356959",
    "end": "1362449"
  },
  {
    "text": "SC programs to native code offline on on the same machine and this is like",
    "start": "1362449",
    "end": "1367999"
  },
  {
    "text": "showing how how performant webassembly is in comparison when you compile that",
    "start": "1367999",
    "end": "1373189"
  },
  {
    "text": "to web assembly and then run that on the same machine so wherever we are at 100%",
    "start": "1373189",
    "end": "1379189"
  },
  {
    "text": "we have basically reached native code performance so as you can see we're not quite there yet everywhere but for most",
    "start": "1379189",
    "end": "1387349"
  },
  {
    "text": "of these benchmarks at least we're getting pretty close I mean these are benchmarks you always have to be careful",
    "start": "1387349",
    "end": "1393049"
  },
  {
    "text": "with benchmarks in reality it's more often like that we are 50% or 100% over",
    "start": "1393049",
    "end": "1399379"
  },
  {
    "text": "so up to 2x is currently more like realistic to expect for for your",
    "start": "1399379",
    "end": "1406209"
  },
  {
    "text": "application when you compile to WebP assembly but this is very early days and",
    "start": "1406209",
    "end": "1411289"
  },
  {
    "text": "we expect that to still improve so one other thing you can see there is as well",
    "start": "1411289",
    "end": "1416719"
  },
  {
    "text": "or actually can't see is one one kind of bar there is so these are all stacked is validation so that is the time it takes",
    "start": "1416719",
    "end": "1423829"
  },
  {
    "text": "to validate the bytecode so what the JVM calls bytecode verification and you can",
    "start": "1423829",
    "end": "1429169"
  },
  {
    "text": "actually see that it doesn't show up there so one of the because it's so tiny it's so fast that it doesn't actually",
    "start": "1429169",
    "end": "1435199"
  },
  {
    "text": "matter so that was also an important design goal to make validation very fast",
    "start": "1435199",
    "end": "1440679"
  },
  {
    "start": "1440000",
    "end": "1497000"
  },
  {
    "text": "so that is about performance in terms of time and then I talked about could being",
    "start": "1440679",
    "end": "1446959"
  },
  {
    "text": "compacts a code size is another important dimension so this is another graph from the same paper and it's a",
    "start": "1446959",
    "end": "1452959"
  },
  {
    "text": "scatter graph that plots the size of the same programs in either a asm.js or in",
    "start": "1452959",
    "end": "1461689"
  },
  {
    "text": "x86 SMS in code throwing machine code against its size in web assembly and",
    "start": "1461689",
    "end": "1467959"
  },
  {
    "text": "that diagonal is basically where they there are equal size so anything that is",
    "start": "1467959",
    "end": "1473119"
  },
  {
    "text": "below the diagonal where most of the points lie fortunately says that the webassembly representation",
    "start": "1473119",
    "end": "1479600"
  },
  {
    "text": "is smaller than either so yellow would be the asm.js representation and blue",
    "start": "1479600",
    "end": "1486020"
  },
  {
    "text": "dots are the native code representation so wherever they are below the diagonal that means that webassembly is smaller",
    "start": "1486020",
    "end": "1493120"
  },
  {
    "text": "so that was important for us to measure that we actually have achieved this goal",
    "start": "1493120",
    "end": "1499000"
  },
  {
    "start": "1497000",
    "end": "1636000"
  },
  {
    "text": "how did we achieve that I don't really want to go much into implementation here just a couple of things to say here what",
    "start": "1499000",
    "end": "1505970"
  },
  {
    "text": "engines do so first thing to to note is",
    "start": "1505970",
    "end": "1511760"
  },
  {
    "text": "that at least in browsers web assembly is actually not like a whole new thing that is in the browser it's actually",
    "start": "1511760",
    "end": "1518240"
  },
  {
    "text": "just implemented as part of the existing JavaScript engines so it really reuses lots of the infrastructure that the",
    "start": "1518240",
    "end": "1524270"
  },
  {
    "text": "JavaScript engines already have in particular much of the compilation pipeline and the memory management and",
    "start": "1524270",
    "end": "1530630"
  },
  {
    "text": "all that and that also has the advantage that calling back and forth between web",
    "start": "1530630",
    "end": "1536540"
  },
  {
    "text": "assembly and JavaScript is like really fast we can make that really fast so there's even though you have to go",
    "start": "1536540",
    "end": "1542450"
  },
  {
    "text": "through javascript to for example manipulate the Dom or use WebGL or",
    "start": "1542450",
    "end": "1547490"
  },
  {
    "text": "anything that shouldn't actually be a significant overhead yeah and there are",
    "start": "1547490",
    "end": "1555730"
  },
  {
    "text": "so there's this one design we have which is implemented in various browsers and",
    "start": "1555730",
    "end": "1560870"
  },
  {
    "text": "one thing to know is also that this design is kind of general in that it allows various different implementation",
    "start": "1560870",
    "end": "1567440"
  },
  {
    "text": "strategies and right now all the browser's use actually somewhat different strategies to implement it in",
    "start": "1567440",
    "end": "1573320"
  },
  {
    "text": "particular one one interesting dimension is like how many compilation or optimization tiers you have new pipeline",
    "start": "1573320",
    "end": "1580370"
  },
  {
    "text": "and so this is something that is like very important when you compile JavaScript you usually have several",
    "start": "1580370",
    "end": "1586910"
  },
  {
    "text": "levels of optimization which means several compilers so you start with a",
    "start": "1586910",
    "end": "1592190"
  },
  {
    "text": "simple one that is fast so that you that startup times are minimized and once code becomes hot you recompile it with a",
    "start": "1592190",
    "end": "1598880"
  },
  {
    "text": "more optimizing compiler and these are strategies that also apply to web assembly there may be some one less",
    "start": "1598880",
    "end": "1606170"
  },
  {
    "text": "important because the quote as much lower level so you can compile it more directly you don't have to do",
    "start": "1606170",
    "end": "1612549"
  },
  {
    "text": "all the crazy that you have to do for JavaScript but still it can make a difference between like in especially in",
    "start": "1612549",
    "end": "1619659"
  },
  {
    "text": "terms of startup times it's really important yeah and then there are",
    "start": "1619659",
    "end": "1625750"
  },
  {
    "text": "various textbook optimizations that we apply in these in this just-in-time",
    "start": "1625750",
    "end": "1632230"
  },
  {
    "text": "compilers in the engines and other tricks that I won't go into here so this",
    "start": "1632230",
    "end": "1638919"
  },
  {
    "start": "1636000",
    "end": "1749000"
  },
  {
    "text": "is the engine side but how do you actually produce web assembly I mean Ben mentioned it the the ideas that you",
    "start": "1638919",
    "end": "1645370"
  },
  {
    "text": "compile to it right you don't write it manually you compile to it and you can",
    "start": "1645370",
    "end": "1651070"
  },
  {
    "text": "do that from whatever language you want as long as you find somebody who were writing a compiler for you right",
    "start": "1651070",
    "end": "1656830"
  },
  {
    "text": "so our first big customers are C and C++ of course most of them being prior users",
    "start": "1656830",
    "end": "1664510"
  },
  {
    "text": "of asm.js already so that is currently at least done mostly through the",
    "start": "1664510",
    "end": "1669880"
  },
  {
    "text": "Emscripten pipeline and then there is a quite a significant effort to have a",
    "start": "1669880",
    "end": "1675039"
  },
  {
    "text": "rust compiler targeting assembly and there are various other like projects",
    "start": "1675039",
    "end": "1681190"
  },
  {
    "text": "going on already forms ranging from some real toy stuff to something real serious so we really hope to see like tons of",
    "start": "1681190",
    "end": "1689500"
  },
  {
    "text": "new languages coming to the web and in the near future and this is kind of like",
    "start": "1689500",
    "end": "1698049"
  },
  {
    "text": "the the the obvious thing you just compile something offline and then run",
    "start": "1698049",
    "end": "1704140"
  },
  {
    "text": "it but one important goal for webassembly also is to be even more versatile so that you can support",
    "start": "1704140",
    "end": "1710860"
  },
  {
    "text": "platforms like say the JVM or dotnet that actually use JIT compilation themselves right so that you can",
    "start": "1710860",
    "end": "1717820"
  },
  {
    "text": "implement bills on top of what webassembly does so there are some",
    "start": "1717820",
    "end": "1723549"
  },
  {
    "text": "implementation efforts already being started in that direction but we don't have any real executable experience with",
    "start": "1723549",
    "end": "1728679"
  },
  {
    "text": "that right now just pointing out that this was also a design goal to support that yeah so this all flows into this",
    "start": "1728679",
    "end": "1737470"
  },
  {
    "text": "overarching goal that this is really supposed to be a language in you and formant so yeah producing",
    "start": "1737470",
    "end": "1746259"
  },
  {
    "text": "webassembly the the other side the engine briefly getting back to that is the what we call the consumer web",
    "start": "1746259",
    "end": "1752409"
  },
  {
    "start": "1749000",
    "end": "1835000"
  },
  {
    "text": "assembly and right now our main consumer",
    "start": "1752409",
    "end": "1758499"
  },
  {
    "text": "is are the engines in in web browsers so yes been mentioned this is part of the",
    "start": "1758499",
    "end": "1764080"
  },
  {
    "text": "web platform it's and embedded into JavaScript but this is kind of only the first wave as far as we see we really we",
    "start": "1764080",
    "end": "1771609"
  },
  {
    "text": "are really looking forward to other embeddings and again there are already people working on things like that so",
    "start": "1771609",
    "end": "1777570"
  },
  {
    "text": "standalone implementations of WebP assembly that you could use to I don't know write your own programming language",
    "start": "1777570",
    "end": "1783519"
  },
  {
    "text": "in a in a fairly simple way you just have a runtime they're already like",
    "start": "1783519",
    "end": "1789099"
  },
  {
    "text": "people who use the JVM for example to implement other languages and this would",
    "start": "1789099",
    "end": "1794919"
  },
  {
    "text": "be completely independent of the web or even JavaScript right you don't need Java Script flow and then there are also",
    "start": "1794919",
    "end": "1801879"
  },
  {
    "text": "people working on embedding it in other environments like so there there's their",
    "start": "1801879",
    "end": "1809889"
  },
  {
    "text": "efforts to do some blockchain stuff with that where you can put web assembly code on the blockchain like aetherium they",
    "start": "1809889",
    "end": "1816190"
  },
  {
    "text": "are thinking about moving to to webassembly it's neckhold format i talked to some guys on docker they might",
    "start": "1816190",
    "end": "1822220"
  },
  {
    "text": "they consider using it as their send boxing code format internally and so on",
    "start": "1822220",
    "end": "1827830"
  },
  {
    "text": "and so forth there's a lot of stuff to to expect yeah and this is goals into",
    "start": "1827830",
    "end": "1833649"
  },
  {
    "text": "the goal that it's really platforming so there are producers consumers and the",
    "start": "1833649",
    "end": "1841029"
  },
  {
    "start": "1835000",
    "end": "2062000"
  },
  {
    "text": "contract between the two is the web assembly specification and I want to briefly talk about that because it is",
    "start": "1841029",
    "end": "1848019"
  },
  {
    "text": "somewhat remarkable there are actually two things that are remarkable about webassembly the first is that as far as",
    "start": "1848019",
    "end": "1853929"
  },
  {
    "text": "we know it's the first time that's a technology like that was really designed in collaboration between all the major",
    "start": "1853929",
    "end": "1861309"
  },
  {
    "text": "browser vendors I think that was is completely nolan hasn't happened before and it was a very successful collaboration the other way in which web",
    "start": "1861309",
    "end": "1870999"
  },
  {
    "text": "assembly is remarkable from our perspective is the way the rigger the way it's",
    "start": "1870999",
    "end": "1878180"
  },
  {
    "text": "rigorously specified so we really wanted to set a new bar in terms of industrial",
    "start": "1878180",
    "end": "1883610"
  },
  {
    "text": "language specifications so that means particularly that webassembly the",
    "start": "1883610",
    "end": "1891680"
  },
  {
    "text": "official language specification comes with a complete formalized semantics so",
    "start": "1891680",
    "end": "1897470"
  },
  {
    "text": "and to explain what that means I have to do my one minute rant about the poor",
    "start": "1897470",
    "end": "1902510"
  },
  {
    "text": "state of mainstream programming languages so I mean probably all of you",
    "start": "1902510",
    "end": "1908240"
  },
  {
    "text": "know how to read a BNF grammar right so BNF grammars were invented with Algol 60",
    "start": "1908240",
    "end": "1914150"
  },
  {
    "text": "so it's like 60 years old way to formally specify student acts but for",
    "start": "1914150",
    "end": "1923330"
  },
  {
    "text": "for semantics basically we're still stuck in the same decade like the way",
    "start": "1923330",
    "end": "1929330"
  },
  {
    "text": "industrial languages are specified is still the same way they were specified 60 years ago at least when it comes to",
    "start": "1929330",
    "end": "1934910"
  },
  {
    "text": "industrial languages and this is pretty sad because actually at least in in research and everywhere we know how to",
    "start": "1934910",
    "end": "1942050"
  },
  {
    "text": "do that right for at least 30 or 4 years but it has never been adapted and so we",
    "start": "1942050",
    "end": "1947990"
  },
  {
    "text": "wanted really we really wanted to change this game and use the state-of-the-art standard techniques that are really",
    "start": "1947990",
    "end": "1954020"
  },
  {
    "text": "standard in research everybody used them there and employ them here and this one",
    "start": "1954020",
    "end": "1961910"
  },
  {
    "text": "outcome of this is that you when you do this in lockstep with the whole design and the formal specification you",
    "start": "1961910",
    "end": "1967460"
  },
  {
    "text": "actually arrive at a much cleaner and simpler design it's not just formalized",
    "start": "1967460",
    "end": "1975140"
  },
  {
    "text": "on paper we actually have a machine verified version of this formulation and",
    "start": "1975140",
    "end": "1980210"
  },
  {
    "text": "that we have put into a theory improver and this theorem and we have proof that",
    "start": "1980210",
    "end": "1985520"
  },
  {
    "text": "the the whole validation provides us with a subtype silence result that there's no undefined behavior and",
    "start": "1985520",
    "end": "1991640"
  },
  {
    "text": "webassembly that the sandbox is safe and all these are results that are machine verified so",
    "start": "1991640",
    "end": "2000090"
  },
  {
    "text": "just want to flesh this at you very briefly so this is from the paper again which I already mentioned",
    "start": "2000090",
    "end": "2007330"
  },
  {
    "text": "just to make the point how clean and simple it is so don't worry if you can't read this and it's small anyway but this",
    "start": "2007330",
    "end": "2013760"
  },
  {
    "text": "is the entire execution semantics of web assembly it's one page in normal",
    "start": "2013760",
    "end": "2019970"
  },
  {
    "text": "notation in a standard notation called structural operational semantics so these are reductions don't worry about",
    "start": "2019970",
    "end": "2026179"
  },
  {
    "text": "what they mean it's just and as a user you probably never have to read them but it's to make the point that it can",
    "start": "2026179",
    "end": "2033080"
  },
  {
    "text": "actually be done and it leads to something very clean and similarly this is our the typing rules which specify",
    "start": "2033080",
    "end": "2041149"
  },
  {
    "text": "completely specified validation for Wepa so it's not even a full page and you",
    "start": "2041149",
    "end": "2047690"
  },
  {
    "text": "might be a slightly more impressed by this if you if you're aware that the",
    "start": "2047690",
    "end": "2053589"
  },
  {
    "text": "specification of bytecode verification for the JVM for example takes a hundred sixty pages just keep that in mind okay",
    "start": "2053589",
    "end": "2062950"
  },
  {
    "start": "2062000",
    "end": "2135000"
  },
  {
    "text": "so this was about where web assembly is where we came from and I want to spend",
    "start": "2062950",
    "end": "2068540"
  },
  {
    "text": "the rest of my talk how much time do I have left okay yeah I don't think I need",
    "start": "2068540",
    "end": "2076868"
  },
  {
    "text": "to say a little bit about where we're going next with web assembly what's",
    "start": "2076869",
    "end": "2082010"
  },
  {
    "text": "what's coming down the road and there are various things we are working on one",
    "start": "2082010",
    "end": "2087919"
  },
  {
    "text": "obviously is improving performance which is natural we also want to improve tools",
    "start": "2087919",
    "end": "2095599"
  },
  {
    "text": "support obviously so right now it's like very basic right I mean you always start out with something very basic and the",
    "start": "2095599",
    "end": "2102890"
  },
  {
    "text": "more people are starting to use it the more pressure there will be to have better it's I'm pretty sure and then I",
    "start": "2102890",
    "end": "2112040"
  },
  {
    "text": "already mentioned that we're looking forward to seeing more languages and more more platforms or embeddings and",
    "start": "2112040",
    "end": "2120490"
  },
  {
    "text": "probably the last last group of things is more features inside web assembly itself and the other the other four I",
    "start": "2120490",
    "end": "2127730"
  },
  {
    "text": "kind of we already went through and I mentioned in the talk before so I will focus on the last point here for the",
    "start": "2127730",
    "end": "2135349"
  },
  {
    "start": "2135000",
    "end": "2600000"
  },
  {
    "text": "rest my presentation so what are the future features there are there a couple of proposal",
    "start": "2135349",
    "end": "2140420"
  },
  {
    "text": "that are in the making for wepa sembly at different stages so we have a whole",
    "start": "2140420",
    "end": "2145460"
  },
  {
    "text": "process of how we do proposals and you have to write it up as text and then you",
    "start": "2145460",
    "end": "2152390"
  },
  {
    "text": "have to write up the semantics in more detail at some point you actually have to write up the formal semantics and you",
    "start": "2152390",
    "end": "2158990"
  },
  {
    "text": "have to implement it in our reference interpreter so we also have a reference interpreter that is written in you know",
    "start": "2158990",
    "end": "2164119"
  },
  {
    "text": "camel and you have to write tests that this interpreter can run and all that so there's a whole list of things you have",
    "start": "2164119",
    "end": "2170690"
  },
  {
    "text": "to do for proposal and there are different stages in this in this process so one proposal that's already pretty",
    "start": "2170690",
    "end": "2178609"
  },
  {
    "text": "far along is support for threats and that actually doesn't for at least for now doesn't mean that you can spawn",
    "start": "2178609",
    "end": "2184460"
  },
  {
    "text": "threats within webassembly itself but it means that a webassembly instance can be entered from different",
    "start": "2184460",
    "end": "2190670"
  },
  {
    "text": "threats and can communicate through shared memory so the main feature that this is adding here is primitives for",
    "start": "2190670",
    "end": "2198200"
  },
  {
    "text": "atomic access to the to the linear memory and that is important in",
    "start": "2198200",
    "end": "2203210"
  },
  {
    "text": "particular for for people compiling their C++ code base to web assembly",
    "start": "2203210",
    "end": "2208579"
  },
  {
    "text": "because that's the only way for them to Emily @p threats and everybody uses P threats for games for example to to",
    "start": "2208579",
    "end": "2215740"
  },
  {
    "text": "provide parallelism so this is really important and I think this will should",
    "start": "2215740",
    "end": "2223220"
  },
  {
    "text": "be shipping relatively soon another feature also important kind of for",
    "start": "2223220",
    "end": "2230540"
  },
  {
    "text": "compiling C++ at least if you're compiling C++ with exception handling is more efficient support for exceptions",
    "start": "2230540",
    "end": "2238099"
  },
  {
    "text": "right now it's actually the way you compile this C++ with exceptions to web",
    "start": "2238099",
    "end": "2243109"
  },
  {
    "text": "assembly is you have to call back into JavaScript to that do a handler there and it's like really it's it's horrible",
    "start": "2243109",
    "end": "2249200"
  },
  {
    "text": "so obviously we don't want that but it's a bit more tricky to the design and exception mechanism in web assembly",
    "start": "2249200",
    "end": "2256010"
  },
  {
    "text": "because it has to remain safe and it has to mean remain safe even across different languages that are compiled",
    "start": "2256010",
    "end": "2262940"
  },
  {
    "text": "into it and that don't understand how each other is using exceptions right so there there are some things that you",
    "start": "2262940",
    "end": "2270140"
  },
  {
    "text": "have to be careful next one is sim D so Cindy is something",
    "start": "2270140",
    "end": "2279769"
  },
  {
    "text": "that all modern CPUs provided it stands for single instruction multiple data so these are vector instructions basically",
    "start": "2279769",
    "end": "2286940"
  },
  {
    "text": "that can manipulate a whole vector of numbers at one time and when you want to",
    "start": "2286940",
    "end": "2292880"
  },
  {
    "text": "reach like the last 10% of performance for a computation intensive application then you want to have access to two",
    "start": "2292880",
    "end": "2299329"
  },
  {
    "text": "simony capabilities yourself Europe if your machine so this is just adding a whole zoo of instructions that are",
    "start": "2299329",
    "end": "2306670"
  },
  {
    "text": "individually not particularly interesting but yeah and then one kind",
    "start": "2306670",
    "end": "2316849"
  },
  {
    "text": "of thing along several things here together is better support in general for more high-level languages so the",
    "start": "2316849",
    "end": "2322160"
  },
  {
    "text": "initial design goal for web assembly we explicitly cut it down to okay for",
    "start": "2322160",
    "end": "2328789"
  },
  {
    "text": "version 100 we want to support C++ well but it was always a goal that after that",
    "start": "2328789",
    "end": "2334069"
  },
  {
    "text": "we want to broaden the support for more high level languages and that means having all sorts of features that maybe",
    "start": "2334069",
    "end": "2340609"
  },
  {
    "text": "C++ doesn't really need or make much use of but other languages might for example tail calls in particular or the ability",
    "start": "2340609",
    "end": "2347450"
  },
  {
    "text": "to not return multiple values from a function and so on and so forth and this",
    "start": "2347450",
    "end": "2352579"
  },
  {
    "text": "is also not just to support certain languages directly but it also can",
    "start": "2352579",
    "end": "2359119"
  },
  {
    "text": "support certain compilation techniques like I mentioned earlier that we want to support platforms running on top of web",
    "start": "2359119",
    "end": "2367609"
  },
  {
    "text": "assembly that use for example themselves or imagine you want to implement a dynamic language like",
    "start": "2367609",
    "end": "2373880"
  },
  {
    "text": "JavaScript maybe even met some some point in the future that uses all sorts of techniques to dynamically generate",
    "start": "2373880",
    "end": "2380299"
  },
  {
    "text": "code and stuff and for some of these you need things like tail bolts for example to make that efficient so there's also",
    "start": "2380299",
    "end": "2386450"
  },
  {
    "text": "like a compilation technique and then a",
    "start": "2386450",
    "end": "2392390"
  },
  {
    "text": "big one which is probably further out is really let's phrase it as a support for garbage",
    "start": "2392390",
    "end": "2400069"
  },
  {
    "text": "collection way so Ben doesn't like that term so as Ben",
    "start": "2400069",
    "end": "2409240"
  },
  {
    "text": "showed you right now you only have this like four data types right this like super primitive you have to emulate",
    "start": "2409240",
    "end": "2414430"
  },
  {
    "text": "everything yourself in an in your memory and so if you wanted to compile a",
    "start": "2414430",
    "end": "2420460"
  },
  {
    "text": "garbage collect language to to webassembly you can do that but you have to ship it with your own runtime system",
    "start": "2420460",
    "end": "2426280"
  },
  {
    "text": "your own garbage collector and which is probably not gonna be super fast because",
    "start": "2426280",
    "end": "2432910"
  },
  {
    "text": "this is kind of the use case where you pay most for the overhead that webassembly has and it's kind of crazy",
    "start": "2432910",
    "end": "2439630"
  },
  {
    "text": "too I mean at least on the web you're already running in this engine that has this super tuned highly performant",
    "start": "2439630",
    "end": "2446500"
  },
  {
    "text": "garbage collector right that has like 100 men years of work that went into it so you should really be able to just use",
    "start": "2446500",
    "end": "2454480"
  },
  {
    "text": "that and the idea here is that we had new ways for defining basically struct types in web assembly that you can just",
    "start": "2454480",
    "end": "2463030"
  },
  {
    "text": "create a value of and this value will be allocated on se but the JavaScript heat actually and then it will just be",
    "start": "2463030",
    "end": "2469810"
  },
  {
    "text": "garbage collector when the last reference to it goes away so this is still supposed to be a fairly low-level mechanism so not like a heavyweight",
    "start": "2469810",
    "end": "2476860"
  },
  {
    "text": "object model like you would have in the JVM or an ad but really just basically",
    "start": "2476860",
    "end": "2482350"
  },
  {
    "text": "tuples of values you can allocate it or raise and then every language that wants",
    "start": "2482350",
    "end": "2487750"
  },
  {
    "text": "to use it has to map its own object model into these data structures but still it provides the convenience and",
    "start": "2487750",
    "end": "2494020"
  },
  {
    "text": "the performance of built-in garbage collection yeah another part of that is that the first item there is the ability",
    "start": "2494020",
    "end": "2501610"
  },
  {
    "text": "to actually use passed in references from the host environment like on the",
    "start": "2501610",
    "end": "2506920"
  },
  {
    "text": "web Dom objects for example into JavaScript right now you can't do that right you only have numbers so what you",
    "start": "2506920",
    "end": "2512800"
  },
  {
    "text": "have to do right now if you want to interface with the Dom you have to build some by ejection on the boundary that map's the objects you want to manipulate",
    "start": "2512800",
    "end": "2520990"
  },
  {
    "text": "to some numbers that you use internally to identify them and then you have to worry about like how do you the the",
    "start": "2520990",
    "end": "2527560"
  },
  {
    "text": "cross boundary garbage collection all that so this is pretty yeah it's not",
    "start": "2527560",
    "end": "2532630"
  },
  {
    "text": "very nice so with if you have garbage collection inside webassembly itself it could just",
    "start": "2532630",
    "end": "2538519"
  },
  {
    "text": "pass in references and the last point",
    "start": "2538519",
    "end": "2544159"
  },
  {
    "text": "item here is we want to have better support for host bindings so right now yeah you have a web assembly function",
    "start": "2544159",
    "end": "2551779"
  },
  {
    "text": "you can export it well you can only take numbers as arguments right so if you want to interface with JavaScript this",
    "start": "2551779",
    "end": "2559699"
  },
  {
    "text": "type doesn't even tell you whether these numbers are supposed to be interpreted as signed or unsigned so what we want to",
    "start": "2559699",
    "end": "2565039"
  },
  {
    "text": "add is some description and notation language in the binary format like a new",
    "start": "2565039",
    "end": "2570619"
  },
  {
    "text": "custom section basically that describes some binding mechanism to JavaScript in this case where it says how the values",
    "start": "2570619",
    "end": "2578239"
  },
  {
    "text": "are converted between JavaScript and mathiesen and this also gives you a way to deal with strings for example the",
    "start": "2578239",
    "end": "2584929"
  },
  {
    "text": "only way to pass in strings right now is you have to somehow expose the linear memory of webassembly to JavaScript and",
    "start": "2584929",
    "end": "2590719"
  },
  {
    "text": "then copy bytes into it because there are no string objects right and this",
    "start": "2590719",
    "end": "2595849"
  },
  {
    "text": "could all be taken care of more or less automatically by by this binding layer",
    "start": "2595849",
    "end": "2601419"
  },
  {
    "start": "2600000",
    "end": "2922000"
  },
  {
    "text": "right so that's roughly it brief summary",
    "start": "2601419",
    "end": "2606889"
  },
  {
    "text": "what's the point of this all this yeah mention it it's it's supposed to be a",
    "start": "2606889",
    "end": "2612049"
  },
  {
    "text": "new code format with all the nice properties we have it already runs in",
    "start": "2612049",
    "end": "2617389"
  },
  {
    "text": "all the browsers and probably beyond in the future actually there are even more browsers it's running in I know that",
    "start": "2617389",
    "end": "2623929"
  },
  {
    "text": "it's already available in opera as well because that's just based on chromium and some other browser process based on",
    "start": "2623929",
    "end": "2630289"
  },
  {
    "text": "chromium yeah and we made a point of",
    "start": "2630289",
    "end": "2635719"
  },
  {
    "text": "making this design and its whole specification and the whole proposal evolution process really really rigorous",
    "start": "2635719",
    "end": "2641989"
  },
  {
    "text": "much more rigorous than anything you've seen so far in industrial languages so",
    "start": "2641989",
    "end": "2648189"
  },
  {
    "text": "hopefully this opens up a whole new world of things you can do on the web including breaking it and yeah so",
    "start": "2648189",
    "end": "2657799"
  },
  {
    "text": "there's a web page too if you want to look up more information",
    "start": "2657799",
    "end": "2664179"
  },
  {
    "text": "okay thank you so I got a few questions",
    "start": "2672680",
    "end": "2678140"
  },
  {
    "text": "well some of them are around is it already production ready can I use it in",
    "start": "2678140",
    "end": "2684230"
  },
  {
    "text": "enterprise development and what about versions do we have to expect some",
    "start": "2684230",
    "end": "2691890"
  },
  {
    "text": "issues with different versions of assembly maybe say something about that sure yeah we consider this to be we",
    "start": "2691890",
    "end": "2699720"
  },
  {
    "text": "shipped it in stable Chrome we should it's been shipped in stable Firefox so yeah you can use it in enterprise apps",
    "start": "2699720",
    "end": "2705839"
  },
  {
    "text": "and people are compiling huge engine so the epic engine which is like something like 200 megabytes has already been",
    "start": "2705839",
    "end": "2712589"
  },
  {
    "text": "compiled a web assembly and people are shipping stuff that makes money with web assembly and it was what about versions",
    "start": "2712589",
    "end": "2720510"
  },
  {
    "text": "different versions and finally compatibility yeah so one design goal was actually to make the binary format",
    "start": "2720510",
    "end": "2726630"
  },
  {
    "text": "forward compatible so the idea is we we have a Persian flag in there but the idea is that we never have to bump it",
    "start": "2726630",
    "end": "2732980"
  },
  {
    "text": "and so this is really just an escape hatch so anything we want to add we add",
    "start": "2732980",
    "end": "2739230"
  },
  {
    "text": "in the future it should be backwards compatible so just adding new things that were just enveloped before and then",
    "start": "2739230",
    "end": "2746760"
  },
  {
    "text": "you could use some form of feature detection like you use in JavaScript as well to find out whether your browser",
    "start": "2746760",
    "end": "2752130"
  },
  {
    "text": "already supports that so you can one way you can do that is you just generally like a tiny little module that uses the",
    "start": "2752130",
    "end": "2759960"
  },
  {
    "text": "feature you want and then you call in the JavaScript API there's a validate function for example you just try to",
    "start": "2759960",
    "end": "2766109"
  },
  {
    "text": "validate it on the browser and if it says yes then you can use it and it says no then you have to fall back to something else okay then quite a lot of",
    "start": "2766109",
    "end": "2774329"
  },
  {
    "text": "questions regarding which languages will be supported are supported and so on I also see a few questions about whether",
    "start": "2774329",
    "end": "2780839"
  },
  {
    "text": "Java will be supported do you know any Java project that tries to compile Java",
    "start": "2780839",
    "end": "2786359"
  },
  {
    "text": "to vapor sembly currently no we don't know about anybody that's using Java with webassembly",
    "start": "2786359",
    "end": "2791400"
  },
  {
    "text": "so about in general because web assembly is a machine it's there's this implicit or explicit",
    "start": "2791400",
    "end": "2797850"
  },
  {
    "text": "separation between what languages run on top and what the what the engine is specified so we've completed the",
    "start": "2797850",
    "end": "2803670"
  },
  {
    "text": "implementation of the engine so as long as you can generate bytecode which conforms to that spec then any language",
    "start": "2803670",
    "end": "2809040"
  },
  {
    "text": "will run as far as the reality of what languages runs C and C++ run by using in",
    "start": "2809040",
    "end": "2815070"
  },
  {
    "text": "script in rust has essentially a beta back in for that assembly script is more",
    "start": "2815070",
    "end": "2820980"
  },
  {
    "text": "like a more like a layer on top of web assembly other languages are coming I think specifically for Java is probably",
    "start": "2820980",
    "end": "2828180"
  },
  {
    "text": "gonna require the managed objects proposal so that's probably a couple years out but as you saw web assembly is",
    "start": "2828180",
    "end": "2833970"
  },
  {
    "text": "a low-level machine in order to bring a high-level language you have to compile the high-level language away or compile",
    "start": "2833970",
    "end": "2841290"
  },
  {
    "text": "part of it to JavaScript for example how does it relate to LLVM you can consider",
    "start": "2841290",
    "end": "2847380"
  },
  {
    "text": "web assembly to be a portable binary format so as was mentioned pinnacle was",
    "start": "2847380",
    "end": "2852990"
  },
  {
    "text": "a I was a Google Google technology that uses LVM bit code as a transportation format you can consider web assembly to",
    "start": "2852990",
    "end": "2860040"
  },
  {
    "text": "be as sort of the delivery of that promise LVM is a compiler framework but it also has like it has a bit code",
    "start": "2860040",
    "end": "2867420"
  },
  {
    "text": "format that you can use for various purposes okay and one was one question",
    "start": "2867420",
    "end": "2873390"
  },
  {
    "text": "was there is there already something like no GS or for Mac assembly said one",
    "start": "2873390",
    "end": "2880920"
  },
  {
    "text": "of the platform levels and compiling JavaScript to web simply right or you mean support in node.js for web assembly",
    "start": "2880920",
    "end": "2887760"
  },
  {
    "text": "probably yeah so I think the current node.js version is on what what v8 version as soon as it reaches the right",
    "start": "2887760",
    "end": "2894270"
  },
  {
    "text": "v8 version it will be there implicitly all right I mean I think it's already is I don't know exactly what we agree yeah",
    "start": "2894270",
    "end": "2900270"
  },
  {
    "text": "I think the latest node has already shipped the 5.8 which included web assembly by default so yeah okay so it's",
    "start": "2900270",
    "end": "2907170"
  },
  {
    "text": "anchors any other questions which are not on here okay then thanks a lot",
    "start": "2907170",
    "end": "2917660"
  }
]