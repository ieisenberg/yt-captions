[
  {
    "text": "[Music]",
    "start": "3510",
    "end": "7529"
  },
  {
    "text": "today I'm going to be talking about the solid principles which are a set of five",
    "start": "13549",
    "end": "18630"
  },
  {
    "text": "design principles originally created for object-oriented programming we'll discuss whether these principles",
    "start": "18630",
    "end": "25560"
  },
  {
    "text": "can be applied to a functional code base or whether functional programming needs its own set of design principles my name",
    "start": "25560",
    "end": "34860"
  },
  {
    "text": "is Georgina and I'm a software developer and most of my experience has been in",
    "start": "34860",
    "end": "40230"
  },
  {
    "text": "object-oriented Java development but at the moment I am working on a project",
    "start": "40230",
    "end": "46230"
  },
  {
    "text": "which comprises of Micra services and some of those services are written in elixir when I first started out my",
    "start": "46230",
    "end": "55350"
  },
  {
    "text": "career there was a lot to learn I was using Java and C++ so probably the most",
    "start": "55350",
    "end": "61920"
  },
  {
    "text": "object oriented languages that you can find and I had to learn how to see the world as objects and how those objects",
    "start": "61920",
    "end": "68909"
  },
  {
    "text": "would interact with each other I also had to learn the syntax of the language so I could bring the solutions to life",
    "start": "68909",
    "end": "75090"
  },
  {
    "text": "and at this early stage most of my effort was spent just lashing code",
    "start": "75090",
    "end": "80130"
  },
  {
    "text": "together hoping that it would work getting it working but over time I got",
    "start": "80130",
    "end": "86070"
  },
  {
    "text": "to grips with the OO way of thinking and I soon realized that just getting my code to work was not really enough I",
    "start": "86070",
    "end": "93119"
  },
  {
    "text": "needed to take my code further in order to produce solutions that could live longer and be easier to maintain and",
    "start": "93119",
    "end": "100200"
  },
  {
    "text": "test and for other people to work on so luckily I made a career move and I",
    "start": "100200",
    "end": "106259"
  },
  {
    "text": "joined a company which was very much invested in teaching their developers some best practices and the solid",
    "start": "106259",
    "end": "114600"
  },
  {
    "text": "principles became an integral part of the developers process after applying",
    "start": "114600",
    "end": "119790"
  },
  {
    "text": "the solid principles to my Java code I felt I could be proud of my solutions they were easier to maintain and extend",
    "start": "119790",
    "end": "127140"
  },
  {
    "text": "they were more robust the same company asked me to learn a",
    "start": "127140",
    "end": "132410"
  },
  {
    "text": "functional language so as a consultant I could go in to different clients and evaluate which paradigm and which",
    "start": "132410",
    "end": "139970"
  },
  {
    "text": "languages would be best suited to solve the problems that they were facing so I",
    "start": "139970",
    "end": "145670"
  },
  {
    "text": "decided to learn a lick sir at this point I had years of experience of",
    "start": "145670",
    "end": "151390"
  },
  {
    "text": "systems analysis and problem solving I could already program in Java so",
    "start": "151390",
    "end": "156470"
  },
  {
    "text": "learning the syntax of elixir was not very difficult it wasn't really a barrier and I quickly got something",
    "start": "156470",
    "end": "162890"
  },
  {
    "text": "working but then I felt I was in the same position as I had been earlier in my career I had a functional code base",
    "start": "162890",
    "end": "169519"
  },
  {
    "text": "which worked but I felt I needed to take it a step further and I didn't really",
    "start": "169519",
    "end": "174530"
  },
  {
    "text": "know what principles to apply I wasn't aware of any principles specifically for functional programming languages so I",
    "start": "174530",
    "end": "182209"
  },
  {
    "text": "decided to stick with what I knew and do an experiment and apply the solid principles to a functional code base so",
    "start": "182209",
    "end": "190930"
  },
  {
    "text": "the solid principles are a set of five design principles where each letter stands for a different principle when",
    "start": "191380",
    "end": "199880"
  },
  {
    "text": "applied they're intended to improve the quality of your software in terms of making it easier to extend less likely",
    "start": "199880",
    "end": "207110"
  },
  {
    "text": "to break if you face making some changes and they're originally devised for object-oriented programming but I wanted",
    "start": "207110",
    "end": "213739"
  },
  {
    "text": "to see if they'd work in the functional landscape the case study that I've",
    "start": "213739",
    "end": "220160"
  },
  {
    "text": "chosen to demonstrate these principles today are an elixir micro service which forms part of a holiday booking site the",
    "start": "220160",
    "end": "228079"
  },
  {
    "text": "code we'll be looking at concerns customers search preferences so they can search for what accommodation that they",
    "start": "228079",
    "end": "234200"
  },
  {
    "text": "want to find when they're going on holiday it's an elixir plug service and the",
    "start": "234200",
    "end": "239989"
  },
  {
    "text": "services will interact using HTTP the",
    "start": "239989",
    "end": "245090"
  },
  {
    "text": "booking sites have many search forms like so when customers log in and they can navigate to this tab they can select",
    "start": "245090",
    "end": "251480"
  },
  {
    "text": "what they're looking for in terms of accommodation press search and be presented with a list of options the",
    "start": "251480",
    "end": "258919"
  },
  {
    "text": "first time a user logs into the page there'll be no options pre-selected on the form",
    "start": "258919",
    "end": "264170"
  },
  {
    "text": "but as soon as they've gone on and made a search we'll save those search preferences so that should they come back we'll be able to pre populate the",
    "start": "264170",
    "end": "271100"
  },
  {
    "text": "form with the last preferences that they're used so in order to fetch these",
    "start": "271100",
    "end": "277310"
  },
  {
    "text": "pre saved preferences we have a get end point in our system a typical workflow",
    "start": "277310",
    "end": "284120"
  },
  {
    "text": "is the user will log in and they'll go to the Search tab unloading the page a",
    "start": "284120",
    "end": "290810"
  },
  {
    "text": "get request is fired and under the hood we'll go and do a get to the database",
    "start": "290810",
    "end": "297470"
  },
  {
    "text": "and we're using dynamo DB for this example which is a non SQL database associated in 8 well it's available in",
    "start": "297470",
    "end": "304790"
  },
  {
    "text": "AWS but you could use any any persistent store we store our data internally in a",
    "start": "304790",
    "end": "312620"
  },
  {
    "text": "map format and then we translate that to some JSON and send it back to the",
    "start": "312620",
    "end": "317990"
  },
  {
    "text": "calling client and that's used then to populate the search form having",
    "start": "317990",
    "end": "323960"
  },
  {
    "text": "explained how to get the data we also have to be able to persist the data so the use case here is that a user would",
    "start": "323960",
    "end": "330680"
  },
  {
    "text": "log in and navigate to the form they would select what they want to search for and then on pressing search will",
    "start": "330680",
    "end": "337580"
  },
  {
    "text": "trigger off a post which will go ahead and start the persistence workflow off",
    "start": "337580",
    "end": "343900"
  },
  {
    "text": "we have to translate our data the other way around this time from the JSON to our internal map so that we can store",
    "start": "343900",
    "end": "350450"
  },
  {
    "text": "that in the database and it will get popped into the dynamo DB so for the",
    "start": "350450",
    "end": "355520"
  },
  {
    "text": "purposes of this talk just think about the service as a crud service so now you",
    "start": "355520",
    "end": "363560"
  },
  {
    "text": "have a flavor of the domain we can get back to our solid principles the first",
    "start": "363560",
    "end": "368870"
  },
  {
    "text": "one is called single responsibility so",
    "start": "368870",
    "end": "373880"
  },
  {
    "text": "the official definition of single responsibility from Wikipedia is that",
    "start": "373880",
    "end": "378910"
  },
  {
    "text": "every class or module should be responsible for a particular part of the system so what does that really mean",
    "start": "378910",
    "end": "386510"
  },
  {
    "text": "well using this definition on this occasion let's decide that fetching user",
    "start": "386510",
    "end": "392000"
  },
  {
    "text": "preferences is a single part of the system so we can write an elixir module that will encapsulate",
    "start": "392000",
    "end": "397710"
  },
  {
    "text": "that logic we have our module here the",
    "start": "397710",
    "end": "402840"
  },
  {
    "text": "first thing we need to do is query the database with the customer ID which is obtained when the users logged on we",
    "start": "402840",
    "end": "410880"
  },
  {
    "text": "then need to translate our raw database data into an internal struct and that",
    "start": "410880",
    "end": "416130"
  },
  {
    "text": "strips out metadata that DynamoDB returns which we're not really interested in and then we transform our",
    "start": "416130",
    "end": "423900"
  },
  {
    "text": "raw data our struct into some JSON and then we'll return that back to the calling client so in a nutshell we have",
    "start": "423900",
    "end": "432630"
  },
  {
    "text": "three steps inside this module we look up the data from the database we strip out the metadata and then we translate",
    "start": "432630",
    "end": "439470"
  },
  {
    "text": "that to a JSON response so is that really single responsibility well those",
    "start": "439470",
    "end": "446460"
  },
  {
    "text": "three steps do make up fetching user preferences but let's ask ourselves",
    "start": "446460",
    "end": "452430"
  },
  {
    "text": "another question one way of trying to",
    "start": "452430",
    "end": "457560"
  },
  {
    "text": "identify if you're violating the single responsibility principle is to ask yourselves of the steps within this",
    "start": "457560",
    "end": "463680"
  },
  {
    "text": "module can any of them change independently for instance if we decided",
    "start": "463680",
    "end": "469830"
  },
  {
    "text": "to change the query to the database so instead of using the customer ID we use the customer ID and country of origin or",
    "start": "469830",
    "end": "478440"
  },
  {
    "text": "something would that mean our JSON response needed changing probably not",
    "start": "478440",
    "end": "485190"
  },
  {
    "text": "as long as the data we're getting back is in the same format all of the downstream steps wouldn't really be affected so this could mean that we have",
    "start": "485190",
    "end": "493590"
  },
  {
    "text": "steps that could diverge and change independently which could lead to a",
    "start": "493590",
    "end": "498960"
  },
  {
    "text": "violation of the single responsibility principle there's a few definitions on",
    "start": "498960",
    "end": "505380"
  },
  {
    "text": "Wikipedia of this principle and I tend to favor this one from Uncle Bob and he",
    "start": "505380",
    "end": "511770"
  },
  {
    "text": "expresses that the principle should mean that a class should only have one reason",
    "start": "511770",
    "end": "516810"
  },
  {
    "text": "to change and in elixir we don't have classes instead we have modules so we",
    "start": "516810",
    "end": "522479"
  },
  {
    "text": "could update this definition to be a module only has one reason to change",
    "start": "522479",
    "end": "528560"
  },
  {
    "text": "so as a reminder we started out with one module containing three steps so let's apply this updated definition from Uncle",
    "start": "529840",
    "end": "536620"
  },
  {
    "text": "Bob and see if our solution suits having each step inside is own module so we'll",
    "start": "536620",
    "end": "545230"
  },
  {
    "text": "start with the functionality which queries the database we've wrapped that in its own module and we can already see it's far for smaller and much more",
    "start": "545230",
    "end": "552610"
  },
  {
    "text": "focused so now we can actually test this independently and we'll have much more focused tests if the JSON response",
    "start": "552610",
    "end": "560710"
  },
  {
    "text": "change now we wouldn't have to touch this at all it's completely separated",
    "start": "560710",
    "end": "567210"
  },
  {
    "text": "the second step we defined was transforming our raw data response into a struct to strip out surplus data we",
    "start": "567330",
    "end": "574480"
  },
  {
    "text": "don't need now if we look closely at this module we're actually just wrapping",
    "start": "574480",
    "end": "579790"
  },
  {
    "text": "a library call here we're using the library X AWS to help us interact with the database so it's debatable whether",
    "start": "579790",
    "end": "587350"
  },
  {
    "text": "this actually needs its own module or whether this could just be merged with the previous module which looks up the",
    "start": "587350",
    "end": "593140"
  },
  {
    "text": "user preferences because there's not really any business logic in here but the point is don't be afraid to break",
    "start": "593140",
    "end": "599470"
  },
  {
    "text": "down your systems and if you find you need to put bits back together again then that's fine the last step is",
    "start": "599470",
    "end": "607720"
  },
  {
    "text": "transforming to jason and it makes sense to have this separate because it's doing a completely different job it's not",
    "start": "607720",
    "end": "614050"
  },
  {
    "text": "interacting with the database at all and we can change this JSON response as we wish without affecting any of the",
    "start": "614050",
    "end": "619540"
  },
  {
    "text": "database queries our controller now becomes quite thin it just coordinates",
    "start": "619540",
    "end": "626020"
  },
  {
    "text": "the calls between the new modules and it means the testing of this is easier as well so if we think back to when we had",
    "start": "626020",
    "end": "634750"
  },
  {
    "text": "all of the logic in one controller if we wanted to test the JSON formatting we'd",
    "start": "634750",
    "end": "640330"
  },
  {
    "text": "need to hit the get end point we need to mimic data coming back from the database we then have to translate that into a",
    "start": "640330",
    "end": "646120"
  },
  {
    "text": "struct transform it to Jason and and then we could check that the jason was as expected and that's an awful lot of",
    "start": "646120",
    "end": "651970"
  },
  {
    "text": "setup so by having these smaller more focused modules we can have much more focused tests and with focus tests come",
    "start": "651970",
    "end": "659709"
  },
  {
    "text": "much more focused failures and that tends to lead to a much quicker resolution the number of high-level tests can be",
    "start": "659709",
    "end": "666790"
  },
  {
    "text": "reduced because there's only you need to check that the coordination is happening correctly and they tend to be more",
    "start": "666790",
    "end": "672640"
  },
  {
    "text": "expensive to run and require more setup anyway so keeping them thin is a nice idea there's always trade-offs and with",
    "start": "672640",
    "end": "681970"
  },
  {
    "text": "every module that exists there is an overhead you have to maintain it and you have to make sure it's kept up to date",
    "start": "681970",
    "end": "689500"
  },
  {
    "text": "so it is good to make sure that every module you'll create does warrant its",
    "start": "689500",
    "end": "694870"
  },
  {
    "text": "existence and if you find yourself with a plethora of modules of which some",
    "start": "694870",
    "end": "700120"
  },
  {
    "text": "always change together then it might be a sign that they should actually be merged together the next principle is",
    "start": "700120",
    "end": "708850"
  },
  {
    "text": "the open closed principle this principle states that you should be able to extend",
    "start": "708850",
    "end": "714550"
  },
  {
    "text": "functionality without modifying the source code that sounds like an oxymoron like how do you change something if you",
    "start": "714550",
    "end": "721630"
  },
  {
    "text": "can't touch the source code well I try to think of it as it should be the",
    "start": "721630",
    "end": "727930"
  },
  {
    "text": "ability to add new code without changing any of the existing code so we'll just",
    "start": "727930",
    "end": "735100"
  },
  {
    "text": "remind ourselves of our post endpoints when a user searches for some accommodation we persist the search",
    "start": "735100",
    "end": "741550"
  },
  {
    "text": "preferences into our database so that we",
    "start": "741550",
    "end": "746770"
  },
  {
    "text": "don't store any incomplete data we perform a set of validation rules prior to persisting we want to check that the",
    "start": "746770",
    "end": "754090"
  },
  {
    "text": "customer ID is valid and that the request body has some mandatory fields we must have those fields existing with",
    "start": "754090",
    "end": "762460"
  },
  {
    "text": "our single responsibility principle in mind we've got the validation rules defined and each rule is in its own",
    "start": "762460",
    "end": "767680"
  },
  {
    "text": "module so that they can be tested independently we have we run through all",
    "start": "767680",
    "end": "774010"
  },
  {
    "text": "the validation rules and if everything's good the request is valid we'll go ahead",
    "start": "774010",
    "end": "779740"
  },
  {
    "text": "and persist our row into our database and return a 201 back to our client but",
    "start": "779740",
    "end": "787090"
  },
  {
    "text": "if something is missing from the request we want to indicate that what the problem was so we returned",
    "start": "787090",
    "end": "793480"
  },
  {
    "text": "a 400 and we will give a reason as to why the requesters rejected and the client can amend their",
    "start": "793480",
    "end": "799740"
  },
  {
    "text": "request and try again so I want to add a new validation rule to my service so",
    "start": "799740",
    "end": "807870"
  },
  {
    "text": "I'll create a new module which contains the business logic of the new rule and I'll add that into my wit statement so",
    "start": "807870",
    "end": "814079"
  },
  {
    "text": "that is executed as part of the flow if that rule fails I need to be able to",
    "start": "814079",
    "end": "820529"
  },
  {
    "text": "handle that and I want to tell the client why so I need to add an error case but wait a minute the open closed",
    "start": "820529",
    "end": "829200"
  },
  {
    "text": "principle stated that we should be able to add new code without actually modifying any existing code and here",
    "start": "829200",
    "end": "835950"
  },
  {
    "text": "we're modifying existing code we've updated the with statement and we've had to add the error handling in so we're",
    "start": "835950",
    "end": "842490"
  },
  {
    "text": "violating that open closed principle now whilst adding a new rule in this example",
    "start": "842490",
    "end": "847589"
  },
  {
    "text": "seems quite trivial in a real production system you could have tens or hundreds",
    "start": "847589",
    "end": "852839"
  },
  {
    "text": "of rules and having to configure them and test all those permutations might be quite complicated so as that list of",
    "start": "852839",
    "end": "862949"
  },
  {
    "text": "rules grow we don't want to have to maintain all these different permutations of tests and also even for",
    "start": "862949",
    "end": "869699"
  },
  {
    "text": "the sunny day scenario we'd have to make sure our request was set up so that all of the rules that were adhered to so it",
    "start": "869699",
    "end": "876930"
  },
  {
    "text": "might be more convenient if we instead have a kind of plug-in architecture that",
    "start": "876930",
    "end": "882329"
  },
  {
    "text": "way in our test environment for example we could just plug in one or two rules and then in production we could plug in",
    "start": "882329",
    "end": "887880"
  },
  {
    "text": "all of the rules so let's do that let's",
    "start": "887880",
    "end": "893399"
  },
  {
    "text": "look at our original set of rules and I think we could say that they generally fall into two categories those that",
    "start": "893399",
    "end": "899820"
  },
  {
    "text": "concern validation of the header and those that contain validation of the",
    "start": "899820",
    "end": "905190"
  },
  {
    "text": "body so if we create a list of header rules and a list of body rules and we",
    "start": "905190",
    "end": "911519"
  },
  {
    "text": "wrap each of those lists in an elixir module we can then iterate over those",
    "start": "911519",
    "end": "916649"
  },
  {
    "text": "lists and traverse the rules so here I've got a list of my validation",
    "start": "916649",
    "end": "921990"
  },
  {
    "text": "functions I traverse over those rules and if any of them fail a reporting",
    "start": "921990",
    "end": "928140"
  },
  {
    "text": "error and give a reason why so now if we were to add a new rule we'd",
    "start": "928140",
    "end": "933750"
  },
  {
    "text": "need to add it to the list but they're surrounding logic the surrounding code wouldn't actually need to change their",
    "start": "933750",
    "end": "941310"
  },
  {
    "text": "calling code of this then becomes more simple because it just needs to kick off the header rules and the body rules and",
    "start": "941310",
    "end": "947459"
  },
  {
    "text": "the details of each of the rules is hidden away at a lower level so we could",
    "start": "947459",
    "end": "953490"
  },
  {
    "text": "say that at this level we're hearing to open closed principle because it doesn't know whether it's executing one rule or",
    "start": "953490",
    "end": "958769"
  },
  {
    "text": "a hundred rules so what needs to change now if we want to add a new validation",
    "start": "958769",
    "end": "964949"
  },
  {
    "text": "rule we'd need to add a new module containing the new rule as a function in",
    "start": "964949",
    "end": "970889"
  },
  {
    "text": "the list and if we think of this list as configuration rather than code we could",
    "start": "970889",
    "end": "977009"
  },
  {
    "text": "say that we are adhering to the open closed principle because none of our other code in this module needs to change but there's always trade-offs and",
    "start": "977009",
    "end": "985550"
  },
  {
    "text": "testings not really become any easier because if we do have a hundred rules we still have to make sure that our test",
    "start": "985550",
    "end": "991889"
  },
  {
    "text": "data is adhering to all those rules and in our test environment they'll all be injected in our words we might just want",
    "start": "991889",
    "end": "998490"
  },
  {
    "text": "one or two in to simplify things so as these rules grow permutations become",
    "start": "998490",
    "end": "1004610"
  },
  {
    "text": "more difficult and maintenance might become an overhead so definitely a step in the right direction to narrow down",
    "start": "1004610",
    "end": "1012290"
  },
  {
    "text": "the area of change just to a single list but one of the other drawbacks here is",
    "start": "1012290",
    "end": "1017509"
  },
  {
    "text": "that there's no contracts in place so we don't really have any safety in terms of what these functions are going to return",
    "start": "1017509",
    "end": "1024428"
  },
  {
    "text": "and the surrounding code is expecting that a tuple is returned so in order to",
    "start": "1024429",
    "end": "1030530"
  },
  {
    "text": "firm up and make this more secure we could actually use an elixir behavior and this allows us to define a contract",
    "start": "1030530",
    "end": "1038538"
  },
  {
    "text": "a bit like in Java how you have an interface and you define a contract which that class will need to adhere to",
    "start": "1038539",
    "end": "1046058"
  },
  {
    "text": "so each module that implements this behavior will need to provide an",
    "start": "1046510",
    "end": "1051590"
  },
  {
    "text": "implementation for the functions defined on that behavior so we can define one",
    "start": "1051590",
    "end": "1057650"
  },
  {
    "text": "which has an is valid function so this states that any modules that are going",
    "start": "1057650",
    "end": "1063950"
  },
  {
    "text": "to use this behavior provide their own implementation of the is valid method which takes a map and it",
    "start": "1063950",
    "end": "1070010"
  },
  {
    "text": "will return either a tuple containing okay and some data or a tuple containing",
    "start": "1070010",
    "end": "1075710"
  },
  {
    "text": "error and then some reasons as to why that request has errored so now we need",
    "start": "1075710",
    "end": "1083179"
  },
  {
    "text": "to update the rules to actually implement our behavior to do that we just provide an annotation and then we",
    "start": "1083179",
    "end": "1090110"
  },
  {
    "text": "provide the function that their contract is needing so when were using these",
    "start": "1090110",
    "end": "1098960"
  },
  {
    "text": "behaviors rather than having a list of functions we can actually now just have a list of modules because we know what",
    "start": "1098960",
    "end": "1104690"
  },
  {
    "text": "an functionality is available on these modules because they're all adhering to the same contract then in our code when",
    "start": "1104690",
    "end": "1113090"
  },
  {
    "text": "we iterate the rules we can actually safely call the is valid function because we know that that's on the",
    "start": "1113090",
    "end": "1118460"
  },
  {
    "text": "contract if you forget to provide your implementation then you will get an",
    "start": "1118460",
    "end": "1124190"
  },
  {
    "text": "exception telling you so the last step to make this fully configurable would be",
    "start": "1124190",
    "end": "1129950"
  },
  {
    "text": "to move the list of modules from the code into the config files and this way",
    "start": "1129950",
    "end": "1136010"
  },
  {
    "text": "we can set up different lists of rules depending on the different runtime environment so in elixir you have a",
    "start": "1136010",
    "end": "1143030"
  },
  {
    "text": "different config file for every environment so in our test config we could just provide a couple but in",
    "start": "1143030",
    "end": "1148940"
  },
  {
    "text": "production we could provide them all then at runtime we look up in our config",
    "start": "1148940",
    "end": "1154250"
  },
  {
    "text": "what set of rules should be injected in and that gives us then the flexibility of just using a couple of rules in one",
    "start": "1154250",
    "end": "1161150"
  },
  {
    "text": "environment or when we're running our unit tests and then all the rules when were running the real system so now to",
    "start": "1161150",
    "end": "1168530"
  },
  {
    "text": "add a new rule we need to add a new module containing the new business logic for our rule we need to configure that",
    "start": "1168530",
    "end": "1174679"
  },
  {
    "text": "module name in the relevant list in the config file of the relevant environment and that's all we needed to do we've",
    "start": "1174679",
    "end": "1181400"
  },
  {
    "text": "managed to successfully add new rules without touching any existing source code so we're now adhering to the",
    "start": "1181400",
    "end": "1187039"
  },
  {
    "text": "open-closed principle again this might seem overkill for this example but in",
    "start": "1187039",
    "end": "1192770"
  },
  {
    "text": "real life where you have rapidly changing business requirements and you might need to demo things quickly and get faster feedback",
    "start": "1192770",
    "end": "1198740"
  },
  {
    "text": "than having the ability to plug in and out different rules might be an advantage so the next principle is Lisco",
    "start": "1198740",
    "end": "1207590"
  },
  {
    "text": "substitution in object-oriented languages we have the concept of classes",
    "start": "1207590",
    "end": "1214700"
  },
  {
    "text": "and classes can inherit behavior of other classes so in this example here we",
    "start": "1214700",
    "end": "1220429"
  },
  {
    "text": "have a report-- class and that provides a format method and then we have a marketing report class which inherits",
    "start": "1220429",
    "end": "1226610"
  },
  {
    "text": "this behavior as well as having some behavior of its own this is the official",
    "start": "1226610",
    "end": "1233809"
  },
  {
    "text": "definition of Lascaux substitution and if you haven't come across it before I wouldn't even try and understand it",
    "start": "1233809",
    "end": "1239299"
  },
  {
    "text": "because they always write it in a really complicated way but essentially it's trying to say where you have a variable",
    "start": "1239299",
    "end": "1245990"
  },
  {
    "text": "that's of the base type so in our case in our example the report you should be",
    "start": "1245990",
    "end": "1251090"
  },
  {
    "text": "able to switch in any of the subclass types without having an undesirable",
    "start": "1251090",
    "end": "1256970"
  },
  {
    "text": "effect on your system so this is probably best demonstrated with a small Java snippet so here we have declared",
    "start": "1256970",
    "end": "1265970"
  },
  {
    "text": "report variable and that's a marketing report and we're calling formats let's go substitution is saying we",
    "start": "1265970",
    "end": "1272960"
  },
  {
    "text": "should be able to replace the format at the report type with the marketing report type and everything should still",
    "start": "1272960",
    "end": "1278870"
  },
  {
    "text": "run and this works because of the inheritance model we know that the format method is available on the most",
    "start": "1278870",
    "end": "1285440"
  },
  {
    "text": "generic layer that there is so everything will compile and run now in",
    "start": "1285440",
    "end": "1291919"
  },
  {
    "text": "functional programming we don't really use inheritance very much sometimes not",
    "start": "1291919",
    "end": "1297230"
  },
  {
    "text": "at all but let's see how we can model something similar using elixir we have",
    "start": "1297230",
    "end": "1304520"
  },
  {
    "text": "some reporting capabilities in our holiday service user preferences are sent to our marketing department so that",
    "start": "1304520",
    "end": "1311510"
  },
  {
    "text": "targeting advertising can be sent to our customer base additionally customer preferences are",
    "start": "1311510",
    "end": "1317779"
  },
  {
    "text": "sent to our data warehouse department so that over time we can see historical searches and we can look for trends so",
    "start": "1317779",
    "end": "1325820"
  },
  {
    "text": "in a nutshell the raw data in the database is sliced and diced into different views which are then used to",
    "start": "1325820",
    "end": "1331279"
  },
  {
    "text": "create different report for different areas around the company so we're going to use another behavior",
    "start": "1331279",
    "end": "1337250"
  },
  {
    "text": "to help us we're going to have each report module implement this formatter",
    "start": "1337250",
    "end": "1342740"
  },
  {
    "text": "behavior which has a format to rows function and that will be the logic",
    "start": "1342740",
    "end": "1347870"
  },
  {
    "text": "which is formatting the raw data particularly for a specific report so we",
    "start": "1347870",
    "end": "1354710"
  },
  {
    "text": "can map some modules to this diagram we have an advertising report module which",
    "start": "1354710",
    "end": "1360830"
  },
  {
    "text": "implements the formatter behavior so this means the advertising report must provide a format to rows implementation",
    "start": "1360830",
    "end": "1367940"
  },
  {
    "text": "which formats the data specifically for the advertising report we have a",
    "start": "1367940",
    "end": "1374330"
  },
  {
    "text": "historical data warehouse report and again that implements the same behavior and it will provide a different logic",
    "start": "1374330",
    "end": "1381410"
  },
  {
    "text": "inside the format to rose specific for this historical report and then we have",
    "start": "1381410",
    "end": "1387679"
  },
  {
    "text": "a report generator and this takes the raw data and a list of for matters and",
    "start": "1387679",
    "end": "1393440"
  },
  {
    "text": "it will map over those four matters formatting the data before dispatching them to the various departments so here",
    "start": "1393440",
    "end": "1402350"
  },
  {
    "text": "we could actually plug in any module that implements the formatter and this",
    "start": "1402350",
    "end": "1407390"
  },
  {
    "text": "code will run as expected because it will have the same contractor will have a format to rows function available and",
    "start": "1407390",
    "end": "1412820"
  },
  {
    "text": "it there'll be no undesirable effects so we can say that we're adhering to the",
    "start": "1412820",
    "end": "1418280"
  },
  {
    "text": "Liskov substitution principle but you know what real life's like our holiday",
    "start": "1418280",
    "end": "1424790"
  },
  {
    "text": "sites really taking off it's gained a lot of traction and at the same time there's a regulatory requirement that's",
    "start": "1424790",
    "end": "1430340"
  },
  {
    "text": "come in so we need to generate a new report and it's Baliga and legal are always a bit tricky they never they",
    "start": "1430340",
    "end": "1436490"
  },
  {
    "text": "never want something you've already got they want something like what you've got but a bit different so they state that",
    "start": "1436490",
    "end": "1443870"
  },
  {
    "text": "they need a report that's got the same formatting as the historical data report but it needs a bit more tinkering with",
    "start": "1443870",
    "end": "1452419"
  },
  {
    "text": "we have to add a disclaimer a header and add some colors okay so we can create a",
    "start": "1452419",
    "end": "1459980"
  },
  {
    "text": "legal report generator that will take the raw data and a formatter we've already got a format where",
    "start": "1459980",
    "end": "1466560"
  },
  {
    "text": "formats the data as we want and we can just add in the disclaimer the headers and the colors so let's do that we'll",
    "start": "1466560",
    "end": "1475260"
  },
  {
    "text": "update our historical data report so that we can reuse their functionality already defined in the format two rows",
    "start": "1475260",
    "end": "1481620"
  },
  {
    "text": "function and then we can just add these new presentation functions on to it so",
    "start": "1481620",
    "end": "1488210"
  },
  {
    "text": "when we pass this in now to our legal report generator we have an implementation for all of the functions",
    "start": "1488210",
    "end": "1494520"
  },
  {
    "text": "that's expecting will format two rows and then we just added the new disclaimer and the headers and so on so",
    "start": "1494520",
    "end": "1501600"
  },
  {
    "text": "we can successfully run this without any problems and we generate our legal report and legal are happy but what",
    "start": "1501600",
    "end": "1510240"
  },
  {
    "text": "happens if we now send in an advertising formatter to our legal report generator",
    "start": "1510240",
    "end": "1517430"
  },
  {
    "text": "our advertising report has a definition for format two rows but it doesn't have",
    "start": "1517430",
    "end": "1523140"
  },
  {
    "text": "a definition for the disclaimer adding the headers and the colors because they are not actually on the contract so of",
    "start": "1523140",
    "end": "1530700"
  },
  {
    "text": "course we'll get an exception happen and that's an undesirable effect in the system so now we're breaking the",
    "start": "1530700",
    "end": "1537480"
  },
  {
    "text": "discourse substitution because according to Lisco substitution we should be able to pass in anything that implements the",
    "start": "1537480",
    "end": "1543540"
  },
  {
    "text": "formatter behavior and the system should work as expected so we need to think a",
    "start": "1543540",
    "end": "1549120"
  },
  {
    "text": "little bit more we know we want to reuse the formatting that's in historical data",
    "start": "1549120",
    "end": "1554550"
  },
  {
    "text": "report but we need to do something extra so rather than updating the existing report let's create a new one which uses",
    "start": "1554550",
    "end": "1562800"
  },
  {
    "text": "the existing one so we create a new report which implements the original",
    "start": "1562800",
    "end": "1569760"
  },
  {
    "text": "formatted behavior so that we don't break any contracts inside the format to",
    "start": "1569760",
    "end": "1575940"
  },
  {
    "text": "rows function we're going to delegate out and use our existing data warehouse modules so that we can leverage the",
    "start": "1575940",
    "end": "1581730"
  },
  {
    "text": "format to rows functionality that we already have and then we can go on and add the presentation and we can hide",
    "start": "1581730",
    "end": "1589050"
  },
  {
    "text": "this behind the format to rows function by just providing some private methods so now all of our reports actually",
    "start": "1589050",
    "end": "1596640"
  },
  {
    "text": "adhere to the same interface so we don't need a special illegal generator anymore we can actually just use the same report",
    "start": "1596640",
    "end": "1602980"
  },
  {
    "text": "generator for all of them so by wrapping an existing formatter",
    "start": "1602980",
    "end": "1609250"
  },
  {
    "text": "we were able to extend its functionality without actually exposing that to any of the calling clients so in elixir we",
    "start": "1609250",
    "end": "1618220"
  },
  {
    "text": "could say that Liskov substitution could be defined as where we have code that expects a behavioral type make sure that",
    "start": "1618220",
    "end": "1625690"
  },
  {
    "text": "you're using only those functions that are defined on the behavior so at the most generic level but why didn't we",
    "start": "1625690",
    "end": "1635200"
  },
  {
    "text": "just update the formatter so that it had these presentation functions on it as well",
    "start": "1635200",
    "end": "1640620"
  },
  {
    "text": "we saw how this potentially made sense for historical data report because some",
    "start": "1640620",
    "end": "1646000"
  },
  {
    "text": "times it needed them but for our advertising report is actually not relevant we don't need to add these",
    "start": "1646000",
    "end": "1653020"
  },
  {
    "text": "presentation level methods at all but if we had updated the behavior we would",
    "start": "1653020",
    "end": "1659110"
  },
  {
    "text": "have been forced to update all of our four matters because they would have needed to adhere to the contract so in",
    "start": "1659110",
    "end": "1665650"
  },
  {
    "text": "our advertising report we would have had to of added a disclaimer add a header and and the colors functions but they",
    "start": "1665650",
    "end": "1672400"
  },
  {
    "text": "wouldn't have really had any work to do so essentially we would have just been supplying an empty definition and that's",
    "start": "1672400",
    "end": "1680530"
  },
  {
    "text": "confusing for the developer because where you see a contract that you need to adhere to you typically expect that",
    "start": "1680530",
    "end": "1686440"
  },
  {
    "text": "you need to provide a good implementation for those functions and that they're needed but in this case",
    "start": "1686440",
    "end": "1691720"
  },
  {
    "text": "they're not so it's usually a sign that your design is not quite right similarly",
    "start": "1691720",
    "end": "1697330"
  },
  {
    "text": "if we had lots and lots of different reports we wouldn't really want to have to update them all to have these new",
    "start": "1697330",
    "end": "1704050"
  },
  {
    "text": "functions just because maybe one or two of them actually needed it so if we had",
    "start": "1704050",
    "end": "1709150"
  },
  {
    "text": "done this we could say that we'd bloated the behavior in order to satisfy a new requirement and in turn that would have",
    "start": "1709150",
    "end": "1716460"
  },
  {
    "text": "violated the next solid principle which is interface segregation",
    "start": "1716460",
    "end": "1722400"
  },
  {
    "text": "so the interface segregation principle states that clients should not be forced to depend on contracts that they don't",
    "start": "1723370",
    "end": "1728830"
  },
  {
    "text": "actually use in object-oriented programming there's different traits you",
    "start": "1728830",
    "end": "1735010"
  },
  {
    "text": "can look out for in the codebase which indicate this violation so typically it's found in very tall class",
    "start": "1735010",
    "end": "1740500"
  },
  {
    "text": "hierarchies where maybe methods are spread across different responsibilities or in things like Java interfaces where",
    "start": "1740500",
    "end": "1747430"
  },
  {
    "text": "you have lots and lots of methods again which are spread across different things so translating this into the world of",
    "start": "1747430",
    "end": "1754630"
  },
  {
    "text": "elixir we could look for modules that have many many functions across different responsibilities or large",
    "start": "1754630",
    "end": "1760390"
  },
  {
    "text": "behaviors we already discussed why we",
    "start": "1760390",
    "end": "1765550"
  },
  {
    "text": "thought it wasn't a very good idea to update the formatter behavior to include those presentation level functions and",
    "start": "1765550",
    "end": "1772420"
  },
  {
    "text": "that was because they're not relevant to all of the implementations so let's leave the formatter behavior as it was",
    "start": "1772420",
    "end": "1778420"
  },
  {
    "text": "so that we don't break any existing contracts and instead let's create a",
    "start": "1778420",
    "end": "1784060"
  },
  {
    "text": "second behavior which contains the presentation level functions so having",
    "start": "1784060",
    "end": "1789940"
  },
  {
    "text": "these split now allows us to leave our advertising report alone because it already implements the formatter",
    "start": "1789940",
    "end": "1795880"
  },
  {
    "text": "behavior and it doesn't need the presentation level once and we can actually update our historical data",
    "start": "1795880",
    "end": "1802090"
  },
  {
    "text": "format to implement both because elixir lets you implement as many behaviors as",
    "start": "1802090",
    "end": "1807310"
  },
  {
    "text": "you like as long as you provide a body for all of the functions that are expected so now when we generate our",
    "start": "1807310",
    "end": "1816250"
  },
  {
    "text": "reports we can split it up into two steps we can run the formatting through and dispatch those reports but if the",
    "start": "1816250",
    "end": "1823960"
  },
  {
    "text": "report needs to be presented as well we can run that through another step and the calling code can decide which step",
    "start": "1823960",
    "end": "1830170"
  },
  {
    "text": "is relevant for which report so this way we've been able to restrict the extra",
    "start": "1830170",
    "end": "1838450"
  },
  {
    "text": "functionality down to only those reports where it's actually relevant and you'll find that several of the solid",
    "start": "1838450",
    "end": "1844750"
  },
  {
    "text": "principles start to overlap because by keeping your behaviors small and focused you're typically reinforcing their",
    "start": "1844750",
    "end": "1851500"
  },
  {
    "text": "single responsibility rules as well so that brings us onto our lasts",
    "start": "1851500",
    "end": "1857240"
  },
  {
    "text": "that principle which is dependency inversion there was too many words on",
    "start": "1857240",
    "end": "1863540"
  },
  {
    "text": "Wikipedia to put them all on a slide but I've tried to represent the essence of it here and it's about keeping your high",
    "start": "1863540",
    "end": "1870200"
  },
  {
    "text": "level layers separated from your low level layers in your system if you",
    "start": "1870200",
    "end": "1876020"
  },
  {
    "text": "remember we have a get end point which fetches user search preferences under",
    "start": "1876020",
    "end": "1881140"
  },
  {
    "text": "the hood this connects to a database to do the query and the database is an",
    "start": "1881140",
    "end": "1886580"
  },
  {
    "text": "external system we use a library to help us interact with our database and this",
    "start": "1886580",
    "end": "1894830"
  },
  {
    "text": "library expects that to be a running database in place which can either be running a dynamo DB in an instance of",
    "start": "1894830",
    "end": "1901940"
  },
  {
    "text": "AWS or else you can run dynamo DB locally and you can configure your config to look on localhost and find the",
    "start": "1901940",
    "end": "1908810"
  },
  {
    "text": "database there when I'm running my unit tests I don't actually want to connect",
    "start": "1908810",
    "end": "1915020"
  },
  {
    "text": "to a real AWS instance and nor do I want to have to orchestrate bringing up a",
    "start": "1915020",
    "end": "1920660"
  },
  {
    "text": "local instance of Dynamo creating a table populating that data for the test and then tearing it all down once my",
    "start": "1920660",
    "end": "1927050"
  },
  {
    "text": "unit test is finished so basically in",
    "start": "1927050",
    "end": "1932390"
  },
  {
    "text": "terms of dependency inversion I don't want my high level module which is my get customer preferences module to",
    "start": "1932390",
    "end": "1937730"
  },
  {
    "text": "depend on the details of this library instead I want to separate those layers",
    "start": "1937730",
    "end": "1943220"
  },
  {
    "text": "and give myself the ability to plug in a fake database so that when I run my unit",
    "start": "1943220",
    "end": "1948320"
  },
  {
    "text": "tests I don't have to connect to any running database at all if you recall an",
    "start": "1948320",
    "end": "1954170"
  },
  {
    "text": "elixir we can configure different implementations in different environments so if I can isolate the",
    "start": "1954170",
    "end": "1960860"
  },
  {
    "text": "code that connects to the database I could put different implementations in whether I'm a prod or in tests so",
    "start": "1960860",
    "end": "1969860"
  },
  {
    "text": "looking at the code there's actually only one line which physically will connect to dynamo dB so I'm going to",
    "start": "1969860",
    "end": "1975110"
  },
  {
    "text": "extract that out and then work out a way where I can either plug it back in for production or use a fake implementation",
    "start": "1975110",
    "end": "1982490"
  },
  {
    "text": "for my other environments Alexa gives you a couple of ways that",
    "start": "1982490",
    "end": "1988730"
  },
  {
    "text": "you can achieve this and one way is to use the config to substitute in and out",
    "start": "1988730",
    "end": "1994910"
  },
  {
    "text": "at runtime so in terms of our design for dependency inversion I want to have",
    "start": "1994910",
    "end": "2001510"
  },
  {
    "text": "different implementations of the database so I have the real database and then I have a fake database and I want",
    "start": "2001510",
    "end": "2008050"
  },
  {
    "text": "them to adhere to a contract and abstraction which will use a behavior for again then I have my high-level",
    "start": "2008050",
    "end": "2014710"
  },
  {
    "text": "module which is the get customer preferences and I want that to use the behavior",
    "start": "2014710",
    "end": "2020050"
  },
  {
    "text": "so it's unaware whether or not I'm connecting to the real database underneath or whether I'm just using a",
    "start": "2020050",
    "end": "2025390"
  },
  {
    "text": "fake database so I create my behavior",
    "start": "2025390",
    "end": "2031240"
  },
  {
    "text": "which is my abstraction I want to wrap the library call into a module which",
    "start": "2031240",
    "end": "2037990"
  },
  {
    "text": "implements that behavior and then I want to provide a fake database it's going to",
    "start": "2037990",
    "end": "2044560"
  },
  {
    "text": "be another module which implements the same behavior but when I call the",
    "start": "2044560",
    "end": "2050020"
  },
  {
    "text": "request I'm just going to return a canned result in the same format as what the real database would be returning",
    "start": "2050020",
    "end": "2057360"
  },
  {
    "text": "then in my config files I'm going to state that I want to use the fake database and my test environment and my",
    "start": "2057360",
    "end": "2063610"
  },
  {
    "text": "real database in my prod environment that's what you configure and then at",
    "start": "2063610",
    "end": "2070090"
  },
  {
    "text": "runtime you can look up and it will inject in there configured implementation so",
    "start": "2070090",
    "end": "2077260"
  },
  {
    "text": "that's great that actually helps I can in my test environment get my canned result back and that's fine if I just",
    "start": "2077260",
    "end": "2084638"
  },
  {
    "text": "have one test but I want to test some of the edge cases I want to test what",
    "start": "2084639",
    "end": "2090970"
  },
  {
    "text": "happens when I hit the database and there's no result found and that there's multiple results found and that an",
    "start": "2090970",
    "end": "2097390"
  },
  {
    "text": "exception is thrown and at the moment is always just returning the same canned result so I can build some logic into my",
    "start": "2097390",
    "end": "2105550"
  },
  {
    "text": "fake but the only way I can drive the logic is from the input into the function and in this case it's the",
    "start": "2105550",
    "end": "2111880"
  },
  {
    "text": "customer ID so I could update my fake to say something like if the customer ID is one and returned the canned result if",
    "start": "2111880",
    "end": "2118780"
  },
  {
    "text": "customer ID is two an empty result if it's three throw an exception and so on but it's quite",
    "start": "2118780",
    "end": "2125339"
  },
  {
    "text": "tricky to keep that expresses through the codebase and from looking at a unit test I might not know which branch of",
    "start": "2125339",
    "end": "2131130"
  },
  {
    "text": "that fake is going to be executed and over time that fake might be quite complex and it might not know which",
    "start": "2131130",
    "end": "2137849"
  },
  {
    "text": "branches are actually ever executed and then do I start unit testing my fakes and the complexity can grow so whilst",
    "start": "2137849",
    "end": "2148980"
  },
  {
    "text": "using config files gives you quite a bit of flexibility if you have a rich set of test scenarios you might find that your",
    "start": "2148980",
    "end": "2154680"
  },
  {
    "text": "fakes become quite complex in themselves so another option you could think about",
    "start": "2154680",
    "end": "2159869"
  },
  {
    "text": "is using a mocking library and one of the ones I've used is called mocks and",
    "start": "2159869",
    "end": "2165290"
  },
  {
    "text": "that way you're able to define the behavior of your your mock right there",
    "start": "2165290",
    "end": "2170550"
  },
  {
    "text": "in the unit test where perhaps it's most relevant so to use mocks as a dependency",
    "start": "2170550",
    "end": "2176220"
  },
  {
    "text": "you just add it to your mixed dependency file and we'll keep our same design for dependency inversion but we don't",
    "start": "2176220",
    "end": "2183359"
  },
  {
    "text": "actually need to create the fake database ourselves we can get mocks to do that for us so we can actually remove",
    "start": "2183359",
    "end": "2189900"
  },
  {
    "text": "the fake database form of the picture we",
    "start": "2189900",
    "end": "2195660"
  },
  {
    "text": "still need to wrap a real database call adhering to the behavior that we defined we still want to configure that in our",
    "start": "2195660",
    "end": "2203160"
  },
  {
    "text": "products so that run time of its production it will use the real database but in our test config we'll declare",
    "start": "2203160",
    "end": "2209880"
  },
  {
    "text": "that we want to use a mock request and this can actually have any name you like because we're going to get mocks to",
    "start": "2209880",
    "end": "2215700"
  },
  {
    "text": "create it for us and we do that in our Test helper we can save mocks please",
    "start": "2215700",
    "end": "2222150"
  },
  {
    "text": "create me a module called mock request which implements their database requests behavior at run time we'll look up which",
    "start": "2222150",
    "end": "2232560"
  },
  {
    "text": "implementation we want to use so it work for prods and in tests using the fake",
    "start": "2232560",
    "end": "2237930"
  },
  {
    "text": "one and in our unit tests we declare that we want to use the mock requests which mocks has created and then we",
    "start": "2237930",
    "end": "2245099"
  },
  {
    "text": "provide our expectation so here we're saying when that fake that mocks has created is hid and the request function",
    "start": "2245099",
    "end": "2251760"
  },
  {
    "text": "is invoked then return a tuple containing an okay status and a can result which we've declared elsewhere in",
    "start": "2251760",
    "end": "2258420"
  },
  {
    "text": "that file if you forget to provide the expectation you will get an exception",
    "start": "2258420",
    "end": "2265500"
  },
  {
    "text": "and that's good feedback and I've also found that it's helped me understand how",
    "start": "2265500",
    "end": "2271170"
  },
  {
    "text": "many layers through the code my tests are actually running because sometimes you don't realize you're going to hit",
    "start": "2271170",
    "end": "2276180"
  },
  {
    "text": "the database because you're your minds testing something else but then you'll get an exception like this which reminds you oh yes this flow is indeed going to",
    "start": "2276180",
    "end": "2283080"
  },
  {
    "text": "hit the database so there's definitely similarities between creating your own",
    "start": "2283080",
    "end": "2290130"
  },
  {
    "text": "config and your own fakes and using something like mocks to help you but I",
    "start": "2290130",
    "end": "2296790"
  },
  {
    "text": "think one of the main advantages of using the mocking library is that you define the return behavior right there",
    "start": "2296790",
    "end": "2302610"
  },
  {
    "text": "in your tests so as a developer when you're looking through the test cases it's much clearer and what's going to",
    "start": "2302610",
    "end": "2308820"
  },
  {
    "text": "happen when these dependencies are hit and you don't need to go to a fake file somewhere else on your file tree and try",
    "start": "2308820",
    "end": "2315780"
  },
  {
    "text": "and figure out which branch of that fakes going to be executed the only slight untidy edge is that mocks mix",
    "start": "2315780",
    "end": "2322800"
  },
  {
    "text": "will spit out warning because you're referring to a module which doesn't physically exist on your file tree because mocks has created that on the",
    "start": "2322800",
    "end": "2330150"
  },
  {
    "text": "fly for you but I think the advantages outweigh that so in terms of dependency",
    "start": "2330150",
    "end": "2337740"
  },
  {
    "text": "inversion having separated our high-level modules from our the detail of our low-level modules we've been able",
    "start": "2337740",
    "end": "2343890"
  },
  {
    "text": "to swap in and out different implementations which has provided greater flexibility for testing so can",
    "start": "2343890",
    "end": "2351900"
  },
  {
    "text": "you write solid elixir well we just did we've applied every single solid",
    "start": "2351900",
    "end": "2357450"
  },
  {
    "text": "principle to our elixir code base and it's all still running fine I think the",
    "start": "2357450",
    "end": "2363660"
  },
  {
    "text": "real question is is this idiomatic elixir or have we just ended up with a functional code base which resembles",
    "start": "2363660",
    "end": "2370560"
  },
  {
    "text": "something like Java code are these rules the right rules to be applying to our functional landscape",
    "start": "2370560",
    "end": "2378440"
  },
  {
    "text": "I mean the characteristics of an object oriented programming language are different to that of functional but",
    "start": "2379260",
    "end": "2385290"
  },
  {
    "text": "amongst other things in functional you tend to be passing data around most of the time whereas an oh you're reacting",
    "start": "2385290",
    "end": "2391350"
  },
  {
    "text": "to messages that are being sent between different objects so I think the solid principles definitely get you started",
    "start": "2391350",
    "end": "2397619"
  },
  {
    "text": "but we might need to adapt some of them slightly to align with the traits of the functional programming languages with",
    "start": "2397619",
    "end": "2405750"
  },
  {
    "text": "maintainability in mind it seems beneficial to adhere to the single responsibility principle having",
    "start": "2405750",
    "end": "2412770"
  },
  {
    "text": "small focused functions is as good an elixir as it is in any programming language oh or functional functions are",
    "start": "2412770",
    "end": "2422190"
  },
  {
    "text": "the building blocks of a functional language so having small functions will lead to more potential reuse if you're",
    "start": "2422190",
    "end": "2427590"
  },
  {
    "text": "occurring them together passing them in and out so from my point of view s is",
    "start": "2427590",
    "end": "2432840"
  },
  {
    "text": "fully implemented in functional language",
    "start": "2432840",
    "end": "2437990"
  },
  {
    "text": "regarding open/close it seems low risk to be able to add to your codebase without touching any existing code",
    "start": "2437990",
    "end": "2445350"
  },
  {
    "text": "because this will reduce any retesting efforts in elixir we have high order",
    "start": "2445350",
    "end": "2451140"
  },
  {
    "text": "functions so we can pass functions into other functions so you could argue that in functional languages it's actually",
    "start": "2451140",
    "end": "2457530"
  },
  {
    "text": "easier to adhere to that open-closed principle because you can just pass a new function in to some existing code",
    "start": "2457530",
    "end": "2462990"
  },
  {
    "text": "without touching it so I think open/close is a good goal to strive for",
    "start": "2462990",
    "end": "2469280"
  },
  {
    "text": "what about Lisco substitution we saw how in our world this tends to leverage the",
    "start": "2469280",
    "end": "2475380"
  },
  {
    "text": "inheritance model which we don't really use much in the functional world so perhaps this is one we should redefine",
    "start": "2475380",
    "end": "2481680"
  },
  {
    "text": "slightly one of the things functional programmers strive for is purity and",
    "start": "2481680",
    "end": "2488550"
  },
  {
    "text": "pure functions are deterministic they have an input and an output and given",
    "start": "2488550",
    "end": "2494070"
  },
  {
    "text": "the same input they will always give back the same output without any other side-effects so we have a pure function",
    "start": "2494070",
    "end": "2501240"
  },
  {
    "text": "here which simply adds two numbers together we can use this in a function",
    "start": "2501240",
    "end": "2507060"
  },
  {
    "text": "called lucky number and we can derive what the output of lucky number will be and in this case the out",
    "start": "2507060",
    "end": "2512790"
  },
  {
    "text": "is always going to be the number seven so if I went through the codebase and",
    "start": "2512790",
    "end": "2517980"
  },
  {
    "text": "replaced every time I'd called lucky number with the value seven my program",
    "start": "2517980",
    "end": "2523590"
  },
  {
    "text": "should still run exactly as it was because the result of the evaluating expression is going to have the same",
    "start": "2523590",
    "end": "2530130"
  },
  {
    "text": "mathematical value as a starting code and this is known as referential transparency so I would propose we",
    "start": "2530130",
    "end": "2537600"
  },
  {
    "text": "modify the definition of Lascaux substitution and instead replace it with referential transparency as a",
    "start": "2537600",
    "end": "2543840"
  },
  {
    "text": "substitution model and that will be more in line with the functional characteristics in our programming we",
    "start": "2543840",
    "end": "2552360"
  },
  {
    "text": "saw that the interface segregation was about keeping your interfaces small and concise and we did the same with our",
    "start": "2552360",
    "end": "2558780"
  },
  {
    "text": "behaviors and in the elixir documentation actually states that if you have to you can think of a behavior",
    "start": "2558780",
    "end": "2565350"
  },
  {
    "text": "as being similar to a Java interface so I think that backs up for my point that",
    "start": "2565350",
    "end": "2571080"
  },
  {
    "text": "we should be applying the interface interface segregation principle to our elixir behaviors and then we saw D and",
    "start": "2571080",
    "end": "2579060"
  },
  {
    "text": "we saw how creating an abstraction between our high level layers and our low level layers allowed us to swap in",
    "start": "2579060",
    "end": "2585090"
  },
  {
    "text": "and out different implementations and that particularly helped when testing with external systems so at a future",
    "start": "2585090",
    "end": "2596400"
  },
  {
    "text": "date perhaps we need to work in some of these other traits functional languages are immutable functional languages tend",
    "start": "2596400",
    "end": "2602760"
  },
  {
    "text": "to favor recursion over imperative looping and in elixir we have pattern matching so over time we can build some",
    "start": "2602760",
    "end": "2609870"
  },
  {
    "text": "of these things into some more principles that are relevant for our functional world so coming back to the",
    "start": "2609870",
    "end": "2617100"
  },
  {
    "text": "title of the talk many of those who consider themselves a functional programmer tend to brush aside the",
    "start": "2617100",
    "end": "2623100"
  },
  {
    "text": "learnings from the community so by going to the extreme and actually forcing",
    "start": "2623100",
    "end": "2628320"
  },
  {
    "text": "these oo principles on my elixir code base I actually found many of them made sense and the result was more concise",
    "start": "2628320",
    "end": "2635730"
  },
  {
    "text": "more focused code that was easier to test and regardless of what we consider",
    "start": "2635730",
    "end": "2641340"
  },
  {
    "text": "to be idiomatic code we can probably all agree that we should be writing code that",
    "start": "2641340",
    "end": "2646500"
  },
  {
    "text": "easy to update and easy to maintain overtime so single responsibility is",
    "start": "2646500",
    "end": "2654180"
  },
  {
    "text": "definitely applicable in the functional world over open/close is a good goal to strive for",
    "start": "2654180",
    "end": "2660350"
  },
  {
    "text": "we replaced L with Artie for referential transparency to acknowledge the purity",
    "start": "2660350",
    "end": "2665700"
  },
  {
    "text": "of the language we can apply the integration segregation principle to our Alexa behaviors and we can use",
    "start": "2665700",
    "end": "2672390"
  },
  {
    "text": "dependency injection to help with our testing so perhaps the baseline for",
    "start": "2672390",
    "end": "2678260"
  },
  {
    "text": "design principles in elixir could be sorted thank you very much",
    "start": "2678260",
    "end": "2685230"
  },
  {
    "text": "[Applause]",
    "start": "2685230",
    "end": "2691119"
  }
]