[
  {
    "start": "0",
    "end": "67000"
  },
  {
    "text": "[Music]",
    "start": "960",
    "end": "8889"
  },
  {
    "text": "is better than functional or is it the",
    "start": "14559",
    "end": "16720"
  },
  {
    "text": "other way around",
    "start": "16720",
    "end": "18240"
  },
  {
    "text": "maybe the next big thing will be better",
    "start": "18240",
    "end": "20000"
  },
  {
    "text": "than both of them this is one of those",
    "start": "20000",
    "end": "21920"
  },
  {
    "text": "arguments that exercises developers",
    "start": "21920",
    "end": "24720"
  },
  {
    "text": "and they tend to fall into one camp or",
    "start": "24720",
    "end": "26960"
  },
  {
    "text": "the other",
    "start": "26960",
    "end": "27920"
  },
  {
    "text": "either you think that functional",
    "start": "27920",
    "end": "29519"
  },
  {
    "text": "programming is the only sane answer or",
    "start": "29519",
    "end": "32160"
  },
  {
    "text": "oo is the defining approach for complex",
    "start": "32160",
    "end": "34399"
  },
  {
    "text": "systems",
    "start": "34399",
    "end": "35520"
  },
  {
    "text": "so what are the differences and do they",
    "start": "35520",
    "end": "37760"
  },
  {
    "text": "matter what advantages does language",
    "start": "37760",
    "end": "40239"
  },
  {
    "text": "paradigm have to offer",
    "start": "40239",
    "end": "42480"
  },
  {
    "text": "and have we found all of the paradigms",
    "start": "42480",
    "end": "44559"
  },
  {
    "text": "that there are to find",
    "start": "44559",
    "end": "47519"
  },
  {
    "text": "[Music]",
    "start": "47570",
    "end": "52729"
  },
  {
    "text": "hi i'm dave farley of continuous",
    "start": "53280",
    "end": "55280"
  },
  {
    "text": "delivery welcome to my channel if you",
    "start": "55280",
    "end": "57680"
  },
  {
    "text": "haven't already please do hit subscribe",
    "start": "57680",
    "end": "60480"
  },
  {
    "text": "and if you enjoyed the video hit like as",
    "start": "60480",
    "end": "62559"
  },
  {
    "text": "well",
    "start": "62559",
    "end": "63680"
  },
  {
    "text": "whatever programming paradigm or",
    "start": "63680",
    "end": "65680"
  },
  {
    "text": "technology you pick a deployment",
    "start": "65680",
    "end": "68240"
  },
  {
    "start": "67000",
    "end": "167000"
  },
  {
    "text": "pipeline will improve your workflow",
    "start": "68240",
    "end": "70960"
  },
  {
    "text": "check out my new continuous delivery",
    "start": "70960",
    "end": "73040"
  },
  {
    "text": "pipelines book on leanpub",
    "start": "73040",
    "end": "75840"
  },
  {
    "text": "which will help you to get started",
    "start": "75840",
    "end": "77680"
  },
  {
    "text": "building and to build better deployment",
    "start": "77680",
    "end": "80159"
  },
  {
    "text": "pipelines",
    "start": "80159",
    "end": "82000"
  },
  {
    "text": "links in the description again",
    "start": "82000",
    "end": "84880"
  },
  {
    "text": "in this episode i want to explore",
    "start": "84880",
    "end": "86640"
  },
  {
    "text": "programming paradigms",
    "start": "86640",
    "end": "88479"
  },
  {
    "text": "there's an argument made by bob martin",
    "start": "88479",
    "end": "91439"
  },
  {
    "text": "that we've identified all of the",
    "start": "91439",
    "end": "93280"
  },
  {
    "text": "paradigms that there are to find",
    "start": "93280",
    "end": "95759"
  },
  {
    "text": "i think that he might be wrong",
    "start": "95759",
    "end": "98079"
  },
  {
    "text": "but we'll cover that later on",
    "start": "98079",
    "end": "100640"
  },
  {
    "text": "i do though like his analysis of",
    "start": "100640",
    "end": "103040"
  },
  {
    "text": "language the language paradigms that we",
    "start": "103040",
    "end": "105040"
  },
  {
    "text": "currently have he argues that a",
    "start": "105040",
    "end": "107520"
  },
  {
    "text": "programming paradigm works by removing a",
    "start": "107520",
    "end": "110320"
  },
  {
    "text": "freedom of some kind it constrains us in",
    "start": "110320",
    "end": "113920"
  },
  {
    "text": "some way limiting our options in ways",
    "start": "113920",
    "end": "116799"
  },
  {
    "text": "that tend to help us to reduce or even",
    "start": "116799",
    "end": "119200"
  },
  {
    "text": "avoid some kinds of mistakes",
    "start": "119200",
    "end": "121759"
  },
  {
    "text": "i quite like that description",
    "start": "121759",
    "end": "124479"
  },
  {
    "text": "a good place to start is how these",
    "start": "124479",
    "end": "126479"
  },
  {
    "text": "paradigms arose in the first place the",
    "start": "126479",
    "end": "128959"
  },
  {
    "text": "first languages were unstructured kind",
    "start": "128959",
    "end": "131680"
  },
  {
    "text": "of paradigm free they were general",
    "start": "131680",
    "end": "134000"
  },
  {
    "text": "purpose languages but this first",
    "start": "134000",
    "end": "136160"
  },
  {
    "text": "generation were pretty unconstrained",
    "start": "136160",
    "end": "138879"
  },
  {
    "text": "they were really like high-level",
    "start": "138879",
    "end": "140480"
  },
  {
    "text": "assembler languages in some sense you",
    "start": "140480",
    "end": "142640"
  },
  {
    "text": "could do anything",
    "start": "142640",
    "end": "144800"
  },
  {
    "text": "the usual way to describe the history of",
    "start": "144800",
    "end": "146879"
  },
  {
    "text": "programming languages is as some kind of",
    "start": "146879",
    "end": "149680"
  },
  {
    "text": "linear progression",
    "start": "149680",
    "end": "151360"
  },
  {
    "text": "we started with unstructured languages",
    "start": "151360",
    "end": "154000"
  },
  {
    "text": "invented structure and then oo came",
    "start": "154000",
    "end": "156480"
  },
  {
    "text": "along and finally functional is the new",
    "start": "156480",
    "end": "159280"
  },
  {
    "text": "kid on the block",
    "start": "159280",
    "end": "161040"
  },
  {
    "text": "this is rubbish and completely wrong",
    "start": "161040",
    "end": "163920"
  },
  {
    "text": "in reality it was quite a lot messier",
    "start": "163920",
    "end": "166239"
  },
  {
    "text": "than that",
    "start": "166239",
    "end": "167280"
  },
  {
    "start": "167000",
    "end": "246000"
  },
  {
    "text": "grace hopper wrote the first compiler of",
    "start": "167280",
    "end": "169599"
  },
  {
    "text": "any kind in the early 1950s fortran was",
    "start": "169599",
    "end": "173040"
  },
  {
    "text": "the first high-level language written in",
    "start": "173040",
    "end": "175040"
  },
  {
    "text": "1957 which is quickly followed by lisp",
    "start": "175040",
    "end": "178640"
  },
  {
    "text": "in 1958",
    "start": "178640",
    "end": "180800"
  },
  {
    "text": "so languages began with an unstructured",
    "start": "180800",
    "end": "183519"
  },
  {
    "text": "language fortran but then the second",
    "start": "183519",
    "end": "185920"
  },
  {
    "text": "language invented was functional kind of",
    "start": "185920",
    "end": "189680"
  },
  {
    "text": "fortran was intentionally mathematical",
    "start": "189680",
    "end": "192080"
  },
  {
    "text": "fortran was named for formula translator",
    "start": "192080",
    "end": "194879"
  },
  {
    "text": "it was unstructured but was built on",
    "start": "194879",
    "end": "197200"
  },
  {
    "text": "some core concepts that are common in",
    "start": "197200",
    "end": "199440"
  },
  {
    "text": "programming today concepts like variable",
    "start": "199440",
    "end": "202080"
  },
  {
    "text": "assignment conditionals and loops",
    "start": "202080",
    "end": "205120"
  },
  {
    "text": "cobol was the next big language written",
    "start": "205120",
    "end": "207280"
  },
  {
    "text": "in 1959",
    "start": "207280",
    "end": "209120"
  },
  {
    "text": "it was trying to make programming",
    "start": "209120",
    "end": "210400"
  },
  {
    "text": "language more like natural language and",
    "start": "210400",
    "end": "212480"
  },
  {
    "text": "so easier to learn which i think that",
    "start": "212480",
    "end": "214799"
  },
  {
    "text": "most people these days would consider a",
    "start": "214799",
    "end": "216879"
  },
  {
    "text": "mistake for a general purpose language",
    "start": "216879",
    "end": "219599"
  },
  {
    "text": "lisp was written for researching",
    "start": "219599",
    "end": "221840"
  },
  {
    "text": "artificial intelligence",
    "start": "221840",
    "end": "224000"
  },
  {
    "text": "at the time we'll come back to the",
    "start": "224000",
    "end": "226080"
  },
  {
    "text": "functional paradigm that lisp gave birth",
    "start": "226080",
    "end": "228720"
  },
  {
    "text": "to shortly",
    "start": "228720",
    "end": "231280"
  },
  {
    "text": "so people built most systems in fortran",
    "start": "231280",
    "end": "233760"
  },
  {
    "text": "or cobalt for a while lisp was a bit of",
    "start": "233760",
    "end": "236480"
  },
  {
    "text": "an outlier even then but systems were",
    "start": "236480",
    "end": "238879"
  },
  {
    "text": "getting bigger and more complex so the",
    "start": "238879",
    "end": "241120"
  },
  {
    "text": "lack of constraints meant that there",
    "start": "241120",
    "end": "243200"
  },
  {
    "text": "were lots of balls of mud being produced",
    "start": "243200",
    "end": "246720"
  },
  {
    "start": "246000",
    "end": "308000"
  },
  {
    "text": "dykstra came along in 1968.",
    "start": "246720",
    "end": "249920"
  },
  {
    "text": "he wanted systems to be mathematically",
    "start": "249920",
    "end": "252159"
  },
  {
    "text": "provable so he said go-to statements are",
    "start": "252159",
    "end": "254959"
  },
  {
    "text": "considered harmful",
    "start": "254959",
    "end": "256720"
  },
  {
    "text": "and gave birth to structured programming",
    "start": "256720",
    "end": "258880"
  },
  {
    "text": "in 68.",
    "start": "258880",
    "end": "260560"
  },
  {
    "text": "structured programming works by",
    "start": "260560",
    "end": "262479"
  },
  {
    "text": "constraining the flow of transfer of",
    "start": "262479",
    "end": "265360"
  },
  {
    "text": "control",
    "start": "265360",
    "end": "266639"
  },
  {
    "text": "you can't just jump to any point in a",
    "start": "266639",
    "end": "268800"
  },
  {
    "text": "program as you could in cobol or fortran",
    "start": "268800",
    "end": "271840"
  },
  {
    "text": "or assembler",
    "start": "271840",
    "end": "273199"
  },
  {
    "text": "you are forced to jump to fixed points",
    "start": "273199",
    "end": "275840"
  },
  {
    "text": "that are defined jump to points in the",
    "start": "275840",
    "end": "278320"
  },
  {
    "text": "language if you like that we these days",
    "start": "278320",
    "end": "280639"
  },
  {
    "text": "call functions or methods",
    "start": "280639",
    "end": "283120"
  },
  {
    "text": "this allows us to be a bit more cautious",
    "start": "283120",
    "end": "286080"
  },
  {
    "text": "at these points",
    "start": "286080",
    "end": "287600"
  },
  {
    "text": "we're forced to assemble arguments and",
    "start": "287600",
    "end": "290479"
  },
  {
    "text": "we can check them for validity if we",
    "start": "290479",
    "end": "292560"
  },
  {
    "text": "want to when the call is received",
    "start": "292560",
    "end": "295360"
  },
  {
    "text": "as i said earlier it's a mistake to see",
    "start": "295360",
    "end": "298080"
  },
  {
    "text": "this as some kind of linear progression",
    "start": "298080",
    "end": "300400"
  },
  {
    "text": "of language goodness",
    "start": "300400",
    "end": "302479"
  },
  {
    "text": "while all of this was going on elsewhere",
    "start": "302479",
    "end": "305520"
  },
  {
    "text": "in parallel o was being invented",
    "start": "305520",
    "end": "308560"
  },
  {
    "start": "308000",
    "end": "462000"
  },
  {
    "text": "the term o.o was invented by alan kaye",
    "start": "308560",
    "end": "311680"
  },
  {
    "text": "in 1966 but the ideas that led to it",
    "start": "311680",
    "end": "315039"
  },
  {
    "text": "were around for a few years before that",
    "start": "315039",
    "end": "317360"
  },
  {
    "text": "even as early as 1961",
    "start": "317360",
    "end": "320080"
  },
  {
    "text": "the first real oo language was simula",
    "start": "320080",
    "end": "323120"
  },
  {
    "text": "which was created in 1965",
    "start": "323120",
    "end": "326240"
  },
  {
    "text": "but there were earlier attempts",
    "start": "326240",
    "end": "328720"
  },
  {
    "text": "the radical oo step though was small",
    "start": "328720",
    "end": "331039"
  },
  {
    "text": "talk in 1972. the oo paradigm is not",
    "start": "331039",
    "end": "334479"
  },
  {
    "text": "really what most people think though",
    "start": "334479",
    "end": "337600"
  },
  {
    "text": "it's not really about inheritance and",
    "start": "337600",
    "end": "340560"
  },
  {
    "text": "why it is about putting data and",
    "start": "340560",
    "end": "342320"
  },
  {
    "text": "behavior together i think that most oo",
    "start": "342320",
    "end": "344800"
  },
  {
    "text": "programmers would say it is much more",
    "start": "344800",
    "end": "346880"
  },
  {
    "text": "about polymorphism",
    "start": "346880",
    "end": "349039"
  },
  {
    "text": "later alan kaye said this i'm sorry that",
    "start": "349039",
    "end": "353360"
  },
  {
    "text": "i long ago coined the term objects for",
    "start": "353360",
    "end": "355600"
  },
  {
    "text": "this topic because it gets many people",
    "start": "355600",
    "end": "357919"
  },
  {
    "text": "to focus on the lesser idea",
    "start": "357919",
    "end": "360240"
  },
  {
    "text": "the big idea is messaging",
    "start": "360240",
    "end": "363520"
  },
  {
    "text": "i think that what k means here is that",
    "start": "363520",
    "end": "366240"
  },
  {
    "text": "the real value is that we can send a",
    "start": "366240",
    "end": "368319"
  },
  {
    "text": "message to something and it figures out",
    "start": "368319",
    "end": "371199"
  },
  {
    "text": "how to process that message",
    "start": "371199",
    "end": "373520"
  },
  {
    "text": "we can send the same message to two",
    "start": "373520",
    "end": "375759"
  },
  {
    "text": "different things",
    "start": "375759",
    "end": "377360"
  },
  {
    "text": "and each of them deals with that same",
    "start": "377360",
    "end": "379680"
  },
  {
    "text": "message but in different ways ways that",
    "start": "379680",
    "end": "382160"
  },
  {
    "text": "make sense to them",
    "start": "382160",
    "end": "384479"
  },
  {
    "text": "this is polymorphism really this is the",
    "start": "384479",
    "end": "387360"
  },
  {
    "text": "real power of oh not inheritance",
    "start": "387360",
    "end": "390880"
  },
  {
    "text": "in fact the 1972 version of small talk",
    "start": "390880",
    "end": "394479"
  },
  {
    "text": "didn't support inheritance at all",
    "start": "394479",
    "end": "397759"
  },
  {
    "text": "in bob martin's model",
    "start": "397759",
    "end": "399759"
  },
  {
    "text": "this",
    "start": "399759",
    "end": "400880"
  },
  {
    "text": "this is called dependency management",
    "start": "400880",
    "end": "402800"
  },
  {
    "text": "through polymorphism that's how he",
    "start": "402800",
    "end": "404479"
  },
  {
    "text": "characterizes the oo paradigm",
    "start": "404479",
    "end": "408000"
  },
  {
    "text": "the real value of oo is our ability to",
    "start": "408000",
    "end": "410639"
  },
  {
    "text": "modularize our systems and deal from the",
    "start": "410639",
    "end": "413680"
  },
  {
    "text": "outside with different modules in",
    "start": "413680",
    "end": "415919"
  },
  {
    "text": "consistent ways",
    "start": "415919",
    "end": "417919"
  },
  {
    "text": "this is polymorphism",
    "start": "417919",
    "end": "420800"
  },
  {
    "text": "structured oo and functional aren't the",
    "start": "420800",
    "end": "423280"
  },
  {
    "text": "only paradigms logic programming",
    "start": "423280",
    "end": "425759"
  },
  {
    "text": "constrains programs to follow the rules",
    "start": "425759",
    "end": "428240"
  },
  {
    "text": "of formal logic for example you could",
    "start": "428240",
    "end": "430720"
  },
  {
    "text": "argue that machine learning in its",
    "start": "430720",
    "end": "432639"
  },
  {
    "text": "current incarnation is a different",
    "start": "432639",
    "end": "434800"
  },
  {
    "text": "paradigm that constrains programmers by",
    "start": "434800",
    "end": "437360"
  },
  {
    "text": "allowing them to pick good examples and",
    "start": "437360",
    "end": "439759"
  },
  {
    "text": "the only defined fitness functions",
    "start": "439759",
    "end": "442960"
  },
  {
    "text": "but let's get back to our topic for",
    "start": "442960",
    "end": "444639"
  },
  {
    "text": "today though",
    "start": "444639",
    "end": "446319"
  },
  {
    "text": "remember on the timeline kind of weirdly",
    "start": "446319",
    "end": "449919"
  },
  {
    "text": "structured programming is historically",
    "start": "449919",
    "end": "452080"
  },
  {
    "text": "the last of these paradigms to turn up",
    "start": "452080",
    "end": "455759"
  },
  {
    "text": "but let's loop back to the current on",
    "start": "455759",
    "end": "458560"
  },
  {
    "text": "point fashion leader",
    "start": "458560",
    "end": "460400"
  },
  {
    "text": "the functional paradigm",
    "start": "460400",
    "end": "462720"
  },
  {
    "start": "462000",
    "end": "553000"
  },
  {
    "text": "the defining characteristic of",
    "start": "462720",
    "end": "464240"
  },
  {
    "text": "functional programming is really that it",
    "start": "464240",
    "end": "466720"
  },
  {
    "text": "constrains assignment",
    "start": "466720",
    "end": "469280"
  },
  {
    "text": "we write code with no side effects",
    "start": "469280",
    "end": "472160"
  },
  {
    "text": "each function translates its inputs into",
    "start": "472160",
    "end": "474800"
  },
  {
    "text": "a new output and that's all it does",
    "start": "474800",
    "end": "477759"
  },
  {
    "text": "without changing these inputs in any way",
    "start": "477759",
    "end": "480639"
  },
  {
    "text": "and without relying on anything but its",
    "start": "480639",
    "end": "483120"
  },
  {
    "text": "inputs to achieve its goals",
    "start": "483120",
    "end": "485919"
  },
  {
    "text": "sometimes functional programmers talk",
    "start": "485919",
    "end": "487840"
  },
  {
    "text": "about this as separating data and",
    "start": "487840",
    "end": "490240"
  },
  {
    "text": "function",
    "start": "490240",
    "end": "491520"
  },
  {
    "text": "but if i'm honest i think that this is",
    "start": "491520",
    "end": "493120"
  },
  {
    "text": "probably so that they can argue with our",
    "start": "493120",
    "end": "494879"
  },
  {
    "text": "own programmers who talk about",
    "start": "494879",
    "end": "497280"
  },
  {
    "text": "combining data and behavior",
    "start": "497280",
    "end": "499599"
  },
  {
    "text": "in reality i like the idea of the",
    "start": "499599",
    "end": "502160"
  },
  {
    "text": "constraints i think that we talk a lot",
    "start": "502160",
    "end": "505360"
  },
  {
    "text": "of rubbish about languages and paradigms",
    "start": "505360",
    "end": "508319"
  },
  {
    "text": "i am probably primarily an old",
    "start": "508319",
    "end": "511360"
  },
  {
    "text": "programmer that's where i spent most of",
    "start": "511360",
    "end": "513599"
  },
  {
    "text": "my career but a lot of my thinking was",
    "start": "513599",
    "end": "516320"
  },
  {
    "text": "informed by my early programming in",
    "start": "516320",
    "end": "518640"
  },
  {
    "text": "assembler languages of different kinds",
    "start": "518640",
    "end": "520959"
  },
  {
    "text": "an unstructured approach programming",
    "start": "520959",
    "end": "522560"
  },
  {
    "text": "approach if ever there was one",
    "start": "522560",
    "end": "524640"
  },
  {
    "text": "by shooting myself in the foot many",
    "start": "524640",
    "end": "526880"
  },
  {
    "text": "times when writing assembler programs i",
    "start": "526880",
    "end": "529360"
  },
  {
    "text": "adopted some defensive habits that i",
    "start": "529360",
    "end": "531760"
  },
  {
    "text": "later learned were part functional part",
    "start": "531760",
    "end": "534080"
  },
  {
    "text": "o part structured",
    "start": "534080",
    "end": "536160"
  },
  {
    "text": "so that when i learned more about these",
    "start": "536160",
    "end": "538320"
  },
  {
    "text": "ideas they kind of fit together",
    "start": "538320",
    "end": "541440"
  },
  {
    "text": "and that is what i like about this model",
    "start": "541440",
    "end": "543920"
  },
  {
    "text": "of constraints because that's exactly",
    "start": "543920",
    "end": "546080"
  },
  {
    "text": "how and why i learned these things i",
    "start": "546080",
    "end": "548480"
  },
  {
    "text": "wanted to constrain the freedom with",
    "start": "548480",
    "end": "550720"
  },
  {
    "text": "which i made designs so that i screwed",
    "start": "550720",
    "end": "553040"
  },
  {
    "start": "553000",
    "end": "704000"
  },
  {
    "text": "up less often",
    "start": "553040",
    "end": "554640"
  },
  {
    "text": "i adopt programming habits that limit",
    "start": "554640",
    "end": "557120"
  },
  {
    "text": "the degree to which i screw up when i",
    "start": "557120",
    "end": "558959"
  },
  {
    "text": "write code",
    "start": "558959",
    "end": "560240"
  },
  {
    "text": "i don't really think of myself as a",
    "start": "560240",
    "end": "562480"
  },
  {
    "text": "language or even a paradigm focused",
    "start": "562480",
    "end": "564880"
  },
  {
    "text": "developer but i like to pick the tools",
    "start": "564880",
    "end": "567440"
  },
  {
    "text": "that make sense to me at the time",
    "start": "567440",
    "end": "570160"
  },
  {
    "text": "modern languages are mostly a",
    "start": "570160",
    "end": "572800"
  },
  {
    "text": "combination of these constraints rarely",
    "start": "572800",
    "end": "576160"
  },
  {
    "text": "pure in concept although there are some",
    "start": "576160",
    "end": "579200"
  },
  {
    "text": "i laugh when functional programmers",
    "start": "579200",
    "end": "581680"
  },
  {
    "text": "rubbish oo for example and then go on to",
    "start": "581680",
    "end": "584800"
  },
  {
    "text": "use",
    "start": "584800",
    "end": "585760"
  },
  {
    "text": "collections to implement folds",
    "start": "585760",
    "end": "588480"
  },
  {
    "text": "the degree to which the collections like",
    "start": "588480",
    "end": "590399"
  },
  {
    "text": "these make sense",
    "start": "590399",
    "end": "592240"
  },
  {
    "text": "is really applying polymorphism to me",
    "start": "592240",
    "end": "594800"
  },
  {
    "text": "and oh idea the degree to which the data",
    "start": "594800",
    "end": "598160"
  },
  {
    "text": "is external in a list is an",
    "start": "598160",
    "end": "600720"
  },
  {
    "text": "implementation detail in this case",
    "start": "600720",
    "end": "603360"
  },
  {
    "text": "as long as we don't change that data",
    "start": "603360",
    "end": "606480"
  },
  {
    "text": "if i write immutable code in java or c",
    "start": "606480",
    "end": "609600"
  },
  {
    "text": "sharp or any other oo programming",
    "start": "609600",
    "end": "611519"
  },
  {
    "text": "language then i can justifiably be seen",
    "start": "611519",
    "end": "614480"
  },
  {
    "text": "to be writing in a functional style",
    "start": "614480",
    "end": "617519"
  },
  {
    "text": "i used to write c i used to use ideas",
    "start": "617519",
    "end": "620480"
  },
  {
    "text": "that i now i'd call oo and functional in",
    "start": "620480",
    "end": "623519"
  },
  {
    "text": "the design of my code",
    "start": "623519",
    "end": "625600"
  },
  {
    "text": "my language didn't help me much in those",
    "start": "625600",
    "end": "627519"
  },
  {
    "text": "days in the same way that java doesn't",
    "start": "627519",
    "end": "630160"
  },
  {
    "text": "enforce no assignment when i'm using it",
    "start": "630160",
    "end": "633600"
  },
  {
    "text": "but it doesn't take a lot of",
    "start": "633600",
    "end": "636079"
  },
  {
    "text": "self-discipline to achieve the same",
    "start": "636079",
    "end": "638160"
  },
  {
    "text": "results if i want to",
    "start": "638160",
    "end": "640720"
  },
  {
    "text": "so at the technical level i think that",
    "start": "640720",
    "end": "643600"
  },
  {
    "text": "your choice of paradigm is just that",
    "start": "643600",
    "end": "646320"
  },
  {
    "text": "it's a choice",
    "start": "646320",
    "end": "647839"
  },
  {
    "text": "and it can be fluid and contextual",
    "start": "647839",
    "end": "651360"
  },
  {
    "text": "let's be clear though you can write crap",
    "start": "651360",
    "end": "653760"
  },
  {
    "text": "code in any paradigm and you can write",
    "start": "653760",
    "end": "656560"
  },
  {
    "text": "great code in any paradigm too",
    "start": "656560",
    "end": "659680"
  },
  {
    "text": "there's no functional good oh bad here",
    "start": "659680",
    "end": "665120"
  },
  {
    "text": "there's a fashion for each side to",
    "start": "665120",
    "end": "667440"
  },
  {
    "text": "rubbish the other and if i'm honest i",
    "start": "667440",
    "end": "669920"
  },
  {
    "text": "think that that is a little naive",
    "start": "669920",
    "end": "672000"
  },
  {
    "text": "there are advantages to different para",
    "start": "672000",
    "end": "674399"
  },
  {
    "text": "paradigms different advantages for each",
    "start": "674399",
    "end": "677040"
  },
  {
    "text": "as i've said i am more of an ooh than a",
    "start": "677040",
    "end": "679600"
  },
  {
    "text": "functional programmer so probably",
    "start": "679600",
    "end": "681360"
  },
  {
    "text": "somewhat biased uh the problem with this",
    "start": "681360",
    "end": "683839"
  },
  {
    "text": "kind of religious war is that people get",
    "start": "683839",
    "end": "686160"
  },
  {
    "text": "over emotional so if i do trample on any",
    "start": "686160",
    "end": "688720"
  },
  {
    "text": "of your sacred cows during the course of",
    "start": "688720",
    "end": "690480"
  },
  {
    "text": "this please do forgive me there is a",
    "start": "690480",
    "end": "693040"
  },
  {
    "text": "social dimension to all of this though",
    "start": "693040",
    "end": "695600"
  },
  {
    "text": "and we need we tend to be too tribal in",
    "start": "695600",
    "end": "698000"
  },
  {
    "text": "software development",
    "start": "698000",
    "end": "699760"
  },
  {
    "text": "broadly i think that we could over",
    "start": "699760",
    "end": "702240"
  },
  {
    "text": "simplify the tribes like this",
    "start": "702240",
    "end": "704880"
  },
  {
    "start": "704000",
    "end": "867000"
  },
  {
    "text": "functional programmers tend to think of",
    "start": "704880",
    "end": "706880"
  },
  {
    "text": "programming as maths",
    "start": "706880",
    "end": "708880"
  },
  {
    "text": "oo programmers tend to think of coding",
    "start": "708880",
    "end": "711440"
  },
  {
    "text": "as a problem of modeling",
    "start": "711440",
    "end": "713920"
  },
  {
    "text": "neither of these are completely true",
    "start": "713920",
    "end": "716800"
  },
  {
    "text": "but maybe a reasonable approximation",
    "start": "716800",
    "end": "719760"
  },
  {
    "text": "so the benefits of a functional approach",
    "start": "719760",
    "end": "722399"
  },
  {
    "text": "are that we can abstract ideas into",
    "start": "722399",
    "end": "724639"
  },
  {
    "text": "functions that are always correct",
    "start": "724639",
    "end": "727279"
  },
  {
    "text": "in every circumstance and so write less",
    "start": "727279",
    "end": "730560"
  },
  {
    "text": "code",
    "start": "730560",
    "end": "731519"
  },
  {
    "text": "by excluding or at least constraining",
    "start": "731519",
    "end": "734560"
  },
  {
    "text": "assignment we can create more stable",
    "start": "734560",
    "end": "736959"
  },
  {
    "text": "systems and maybe even prove more",
    "start": "736959",
    "end": "739120"
  },
  {
    "text": "provable systems",
    "start": "739120",
    "end": "741120"
  },
  {
    "text": "the benefits of a model based approach",
    "start": "741120",
    "end": "744320"
  },
  {
    "text": "are that we can be guided in our",
    "start": "744320",
    "end": "746399"
  },
  {
    "text": "analysis by the problem",
    "start": "746399",
    "end": "748800"
  },
  {
    "text": "i think that this is one of the",
    "start": "748800",
    "end": "749839"
  },
  {
    "text": "advantages that ooh has over functional",
    "start": "749839",
    "end": "753360"
  },
  {
    "text": "programming",
    "start": "753360",
    "end": "754880"
  },
  {
    "text": "it's that when done well the code is",
    "start": "754880",
    "end": "757600"
  },
  {
    "text": "more navigable because it's closer to",
    "start": "757600",
    "end": "759680"
  },
  {
    "text": "the problem",
    "start": "759680",
    "end": "760880"
  },
  {
    "text": "it allows us to explore the",
    "start": "760880",
    "end": "762480"
  },
  {
    "text": "relationships more clearly and",
    "start": "762480",
    "end": "764639"
  },
  {
    "text": "understand the problem in small pieces",
    "start": "764639",
    "end": "767120"
  },
  {
    "text": "in a way that is closely related to how",
    "start": "767120",
    "end": "769600"
  },
  {
    "text": "we think about the problem",
    "start": "769600",
    "end": "772399"
  },
  {
    "text": "human beings are naturally classifiers",
    "start": "772399",
    "end": "776320"
  },
  {
    "text": "this gets us to what seems to me like an",
    "start": "776320",
    "end": "778720"
  },
  {
    "text": "important point",
    "start": "778720",
    "end": "780560"
  },
  {
    "text": "i think o.o is more closely aligned with",
    "start": "780560",
    "end": "783519"
  },
  {
    "text": "how humans brains work i can certainly",
    "start": "783519",
    "end": "786880"
  },
  {
    "text": "buy the claim that the more mathematical",
    "start": "786880",
    "end": "789440"
  },
  {
    "text": "functional approach is a more rigorous",
    "start": "789440",
    "end": "792079"
  },
  {
    "text": "way to capture an idea",
    "start": "792079",
    "end": "794560"
  },
  {
    "text": "but much as i love maths",
    "start": "794560",
    "end": "796880"
  },
  {
    "text": "it's famously difficult and in essence",
    "start": "796880",
    "end": "799600"
  },
  {
    "text": "an unnatural way of thinking for human",
    "start": "799600",
    "end": "801839"
  },
  {
    "text": "brains",
    "start": "801839",
    "end": "803040"
  },
  {
    "text": "we value mathematical think thinkers",
    "start": "803040",
    "end": "805279"
  },
  {
    "text": "highly because their skills are so rare",
    "start": "805279",
    "end": "808480"
  },
  {
    "text": "this is so obvious if i throw a ball to",
    "start": "808480",
    "end": "811360"
  },
  {
    "text": "you",
    "start": "811360",
    "end": "812720"
  },
  {
    "text": "is it easier to catch it or to work out",
    "start": "812720",
    "end": "815279"
  },
  {
    "text": "the physics of its flight and predict",
    "start": "815279",
    "end": "817040"
  },
  {
    "text": "where it will land so that you can move",
    "start": "817040",
    "end": "818639"
  },
  {
    "text": "to the right place",
    "start": "818639",
    "end": "820880"
  },
  {
    "text": "we don't do the maths when we catch a",
    "start": "820880",
    "end": "822720"
  },
  {
    "text": "ball if we did we'd certainly miss the",
    "start": "822720",
    "end": "824959"
  },
  {
    "text": "ball",
    "start": "824959",
    "end": "826160"
  },
  {
    "text": "so there's something to be said for ease",
    "start": "826160",
    "end": "829040"
  },
  {
    "text": "of comprehension clarity of expression",
    "start": "829040",
    "end": "832639"
  },
  {
    "text": "which is clearer this",
    "start": "832639",
    "end": "836160"
  },
  {
    "text": "or this",
    "start": "836160",
    "end": "838240"
  },
  {
    "text": "even if you are a functional programmer",
    "start": "838240",
    "end": "840800"
  },
  {
    "text": "i think that you would agree that the",
    "start": "840800",
    "end": "842399"
  },
  {
    "text": "second version was easier to read",
    "start": "842399",
    "end": "845440"
  },
  {
    "text": "sure we can argue about the flexibility",
    "start": "845440",
    "end": "848320"
  },
  {
    "text": "of folds versus loops and because of the",
    "start": "848320",
    "end": "851120"
  },
  {
    "text": "immutability of functional style our",
    "start": "851120",
    "end": "853360"
  },
  {
    "text": "potential to parallelize the computation",
    "start": "853360",
    "end": "855920"
  },
  {
    "text": "of our programs an argument which i",
    "start": "855920",
    "end": "858000"
  },
  {
    "text": "confess as a developer of high",
    "start": "858000",
    "end": "859199"
  },
  {
    "text": "performance systems i'm a bit skeptical",
    "start": "859199",
    "end": "861199"
  },
  {
    "text": "about but the readability the",
    "start": "861199",
    "end": "863279"
  },
  {
    "text": "comprehensibility of our code matters a",
    "start": "863279",
    "end": "865519"
  },
  {
    "text": "lot",
    "start": "865519",
    "end": "866880"
  },
  {
    "text": "here is a function written in imperative",
    "start": "866880",
    "end": "869440"
  },
  {
    "text": "style in this case in java",
    "start": "869440",
    "end": "872160"
  },
  {
    "text": "we're just going to",
    "start": "872160",
    "end": "874399"
  },
  {
    "text": "look at a collection of numbers and",
    "start": "874399",
    "end": "876639"
  },
  {
    "text": "form some kind of total",
    "start": "876639",
    "end": "879279"
  },
  {
    "text": "um",
    "start": "879279",
    "end": "880399"
  },
  {
    "text": "here is the same function written in",
    "start": "880399",
    "end": "882560"
  },
  {
    "text": "haskell",
    "start": "882560",
    "end": "885279"
  },
  {
    "text": "in this case we're going to",
    "start": "885279",
    "end": "887839"
  },
  {
    "text": "define the function as a recursive",
    "start": "887839",
    "end": "890639"
  },
  {
    "text": "function",
    "start": "890639",
    "end": "892399"
  },
  {
    "text": "the first seems to be a lot easier to",
    "start": "892399",
    "end": "894399"
  },
  {
    "text": "explain to somebody that has never",
    "start": "894399",
    "end": "896079"
  },
  {
    "text": "written any code",
    "start": "896079",
    "end": "897760"
  },
  {
    "text": "because of this",
    "start": "897760",
    "end": "900079"
  },
  {
    "text": "alignment with the way in which people",
    "start": "900079",
    "end": "902000"
  },
  {
    "text": "think about things",
    "start": "902000",
    "end": "904240"
  },
  {
    "text": "you have to",
    "start": "904240",
    "end": "905279"
  },
  {
    "text": "access some reasonably complex ideas",
    "start": "905279",
    "end": "908079"
  },
  {
    "text": "like recursion to even start to",
    "start": "908079",
    "end": "910440"
  },
  {
    "text": "understand the second example",
    "start": "910440",
    "end": "913440"
  },
  {
    "text": "yes the code is shorter",
    "start": "913440",
    "end": "915839"
  },
  {
    "text": "but that compromises its readability",
    "start": "915839",
    "end": "918079"
  },
  {
    "text": "somewhat too",
    "start": "918079",
    "end": "919680"
  },
  {
    "text": "the first is a bit more like catching",
    "start": "919680",
    "end": "922079"
  },
  {
    "text": "the ball than doing the maths",
    "start": "922079",
    "end": "924880"
  },
  {
    "text": "in reality in haskell this sum function",
    "start": "924880",
    "end": "927839"
  },
  {
    "text": "is a library function which i'm told is",
    "start": "927839",
    "end": "930959"
  },
  {
    "text": "apparently implemented like this",
    "start": "930959",
    "end": "934720"
  },
  {
    "text": "i rest my case",
    "start": "935440",
    "end": "937279"
  },
  {
    "text": "i think that the functional paradigm has",
    "start": "937279",
    "end": "939199"
  },
  {
    "text": "a lot to offer in particular the idea of",
    "start": "939199",
    "end": "942320"
  },
  {
    "text": "limiting side effects is an excellent",
    "start": "942320",
    "end": "944560"
  },
  {
    "text": "one however you choose to write your",
    "start": "944560",
    "end": "946480"
  },
  {
    "text": "programs",
    "start": "946480",
    "end": "947600"
  },
  {
    "text": "i've adopted that style of thinking in",
    "start": "947600",
    "end": "949680"
  },
  {
    "text": "my oo code for a long time now not",
    "start": "949680",
    "end": "952160"
  },
  {
    "text": "eliminating assignment but certainly",
    "start": "952160",
    "end": "955040"
  },
  {
    "text": "limiting it and reducing the side",
    "start": "955040",
    "end": "956959"
  },
  {
    "text": "effects",
    "start": "956959",
    "end": "958079"
  },
  {
    "text": "i confess that i've never tried to write",
    "start": "958079",
    "end": "960480"
  },
  {
    "text": "a whole functional sys system as a pure",
    "start": "960480",
    "end": "963839"
  },
  {
    "text": "functional system and i'm sure that i",
    "start": "963839",
    "end": "965759"
  },
  {
    "text": "would learn a lot if i did but i think",
    "start": "965759",
    "end": "968480"
  },
  {
    "text": "that one of the reasons that everyone",
    "start": "968480",
    "end": "970639"
  },
  {
    "text": "doesn't do functional programming",
    "start": "970639",
    "end": "973120"
  },
  {
    "text": "is that it's more difficult to transpose",
    "start": "973120",
    "end": "975199"
  },
  {
    "text": "these isds into the kinds of functions",
    "start": "975199",
    "end": "977279"
  },
  {
    "text": "in a way that keeps the code readable",
    "start": "977279",
    "end": "979199"
  },
  {
    "text": "and navigable",
    "start": "979199",
    "end": "981440"
  },
  {
    "text": "i said at the beginning that i disagreed",
    "start": "981440",
    "end": "983600"
  },
  {
    "text": "somewhat with bob martin about whether",
    "start": "983600",
    "end": "985920"
  },
  {
    "text": "we have found all of the programming",
    "start": "985920",
    "end": "988320"
  },
  {
    "text": "paradigms",
    "start": "988320",
    "end": "989600"
  },
  {
    "text": "there is another aspect of programs and",
    "start": "989600",
    "end": "992320"
  },
  {
    "text": "programming that we can usefully",
    "start": "992320",
    "end": "994839"
  },
  {
    "text": "constrain that has some very interesting",
    "start": "994839",
    "end": "997600"
  },
  {
    "text": "properties",
    "start": "997600",
    "end": "998880"
  },
  {
    "text": "that is synchronicity",
    "start": "998880",
    "end": "1001519"
  },
  {
    "text": "what if we constrained our programs to",
    "start": "1001519",
    "end": "1004160"
  },
  {
    "text": "disallow synchronous calls between",
    "start": "1004160",
    "end": "1006320"
  },
  {
    "text": "modules of code",
    "start": "1006320",
    "end": "1008160"
  },
  {
    "text": "each component of the system only",
    "start": "1008160",
    "end": "1010079"
  },
  {
    "text": "communicated with any other by sending a",
    "start": "1010079",
    "end": "1013440"
  },
  {
    "text": "message",
    "start": "1013440",
    "end": "1014880"
  },
  {
    "text": "response is sent in a different message",
    "start": "1014880",
    "end": "1018160"
  },
  {
    "text": "some time later",
    "start": "1018160",
    "end": "1020800"
  },
  {
    "text": "i'm not talking about async awaits here",
    "start": "1020800",
    "end": "1023360"
  },
  {
    "text": "which i dislike",
    "start": "1023360",
    "end": "1025120"
  },
  {
    "text": "more like this a",
    "start": "1025120",
    "end": "1027199"
  },
  {
    "text": "sends an add item message to b",
    "start": "1027199",
    "end": "1030319"
  },
  {
    "text": "uh sometime later b sends an item added",
    "start": "1030319",
    "end": "1033678"
  },
  {
    "text": "message back saying confirming the",
    "start": "1033679",
    "end": "1035839"
  },
  {
    "text": "receipt",
    "start": "1035839",
    "end": "1038079"
  },
  {
    "text": "concurrency only allowed at these module",
    "start": "1038079",
    "end": "1041038"
  },
  {
    "text": "boundaries no creating threads inside a",
    "start": "1041039",
    "end": "1043760"
  },
  {
    "text": "module",
    "start": "1043760",
    "end": "1044720"
  },
  {
    "text": "each module is internally single",
    "start": "1044720",
    "end": "1047038"
  },
  {
    "text": "threaded and so naturally concurrent",
    "start": "1047039",
    "end": "1050559"
  },
  {
    "text": "each module is allowed to be stateful or",
    "start": "1050559",
    "end": "1054320"
  },
  {
    "text": "stateless as need arises",
    "start": "1054320",
    "end": "1057840"
  },
  {
    "text": "this approach is significantly higher",
    "start": "1057840",
    "end": "1060080"
  },
  {
    "text": "performance than any other approach that",
    "start": "1060080",
    "end": "1061919"
  },
  {
    "text": "i am familiar with certainly higher",
    "start": "1061919",
    "end": "1063919"
  },
  {
    "text": "performance than a functional design",
    "start": "1063919",
    "end": "1066480"
  },
  {
    "text": "functional systems copy a lot of stuff",
    "start": "1066480",
    "end": "1068799"
  },
  {
    "text": "to achieve immutability the best that",
    "start": "1068799",
    "end": "1071280"
  },
  {
    "text": "they can do is clever tricks to pretend",
    "start": "1071280",
    "end": "1074160"
  },
  {
    "text": "that they're copying things",
    "start": "1074160",
    "end": "1076240"
  },
  {
    "text": "but but actually not moving the bytes",
    "start": "1076240",
    "end": "1078160"
  },
  {
    "text": "around in memory however clever these",
    "start": "1078160",
    "end": "1080320"
  },
  {
    "text": "tricks are though",
    "start": "1080320",
    "end": "1081840"
  },
  {
    "text": "it's still going to add cpu cycles",
    "start": "1081840",
    "end": "1085120"
  },
  {
    "text": "this is less tightly coupled than oo",
    "start": "1085120",
    "end": "1087679"
  },
  {
    "text": "systems this this approach of limiting",
    "start": "1087679",
    "end": "1090640"
  },
  {
    "text": "synchronicity that i've described but it",
    "start": "1090640",
    "end": "1093200"
  },
  {
    "text": "has some properties of both functional",
    "start": "1093200",
    "end": "1095679"
  },
  {
    "text": "and oo design",
    "start": "1095679",
    "end": "1098160"
  },
  {
    "text": "it also sounds to me quite a lot closer",
    "start": "1098160",
    "end": "1100640"
  },
  {
    "text": "to the vision that allen k had back in",
    "start": "1100640",
    "end": "1102880"
  },
  {
    "text": "the 1960s",
    "start": "1102880",
    "end": "1105280"
  },
  {
    "text": "i wrote about some of these ideas in a",
    "start": "1105280",
    "end": "1106880"
  },
  {
    "text": "thing called the reactive manifesto you",
    "start": "1106880",
    "end": "1108640"
  },
  {
    "text": "could as a link in the description",
    "start": "1108640",
    "end": "1111200"
  },
  {
    "text": "if you'd like to hear more about these",
    "start": "1111200",
    "end": "1113440"
  },
  {
    "text": "kinds of ideas in a future video do let",
    "start": "1113440",
    "end": "1115919"
  },
  {
    "text": "me know in the comments thank you very",
    "start": "1115919",
    "end": "1117440"
  },
  {
    "text": "much for watching",
    "start": "1117440",
    "end": "1119250"
  },
  {
    "text": "[Music]",
    "start": "1119250",
    "end": "1124869"
  },
  {
    "text": "[Music]",
    "start": "1126980",
    "end": "1130739"
  },
  {
    "text": "you",
    "start": "1142400",
    "end": "1144480"
  }
]