[
  {
    "start": "0",
    "end": "35000"
  },
  {
    "text": "[Music]",
    "start": "960",
    "end": "8889"
  },
  {
    "text": "okay um so uh my name is Joe Beaton I'm a senior security researcher at contrast",
    "start": "12599",
    "end": "17640"
  },
  {
    "text": "security uh we provide security tooling for Developers",
    "start": "17640",
    "end": "23640"
  },
  {
    "text": "we have a boo in the corner if after this anyone's interested in more about the kind of products we Supply",
    "start": "23640",
    "end": "31019"
  },
  {
    "text": "um so let's get started cool so the main part of this talk about",
    "start": "31019",
    "end": "38040"
  },
  {
    "start": "35000",
    "end": "141000"
  },
  {
    "text": "is about the Java instrumentation API when I'd say Java it could or jvm this",
    "start": "38040",
    "end": "45059"
  },
  {
    "text": "could be a Java or Copeland or scar application anything that runs on jvm can use the information instrumentation",
    "start": "45059",
    "end": "51300"
  },
  {
    "text": "API so it was added in one five so that was",
    "start": "51300",
    "end": "57059"
  },
  {
    "text": "well 12 years ago now yeah we'll take um and then updated in one six but it",
    "start": "57059",
    "end": "63539"
  },
  {
    "text": "was mostly there in one five it allows you to instrument a running",
    "start": "63539",
    "end": "68840"
  },
  {
    "text": "jvm a Java process either statically or as in you add a",
    "start": "68840",
    "end": "75240"
  },
  {
    "text": "dash Java agent to a path and then it runs that as part of the application or even dynamically you can attach a Java",
    "start": "75240",
    "end": "82320"
  },
  {
    "text": "agent to a running Java process after it started up",
    "start": "82320",
    "end": "87540"
  },
  {
    "text": "um and I'll go through both of those in a second um so you probably use this if you're a",
    "start": "87540",
    "end": "92580"
  },
  {
    "text": "Java developer already if you ever use any sort of uh test coverage tooling",
    "start": "92580",
    "end": "98100"
  },
  {
    "text": "then you do use the instrumentation API that's how um in say J units it will and you that's",
    "start": "98100",
    "end": "105299"
  },
  {
    "text": "linked to a uh IDE like IntelliJ and you get a",
    "start": "105299",
    "end": "111420"
  },
  {
    "text": "percentage of code coverage that's done via the instrumentation API or if you're using chicoco as part of your build",
    "start": "111420",
    "end": "117479"
  },
  {
    "text": "process or any other uh tool like that again it will use this under the hood in",
    "start": "117479",
    "end": "123360"
  },
  {
    "text": "fact most of those kind of testing tools used to go under the hood even if they use something on top of that and also",
    "start": "123360",
    "end": "129420"
  },
  {
    "text": "contrast assess and protect product also use this for Java base applications",
    "start": "129420",
    "end": "136800"
  },
  {
    "text": "I'm going to back a bit more in a little while so how do you do it so the first part I'll go the more",
    "start": "136800",
    "end": "143760"
  },
  {
    "start": "141000",
    "end": "494000"
  },
  {
    "text": "interesting bit which is dynamically attaching so if you have an existing Java process and you want to attach an",
    "start": "143760",
    "end": "150180"
  },
  {
    "text": "agent to do something it's code wise is actually very simple uh that's it on the",
    "start": "150180",
    "end": "158160"
  },
  {
    "text": "that's the entire code to attach the Java agent specify a process ID one two three four",
    "start": "158160",
    "end": "165360"
  },
  {
    "text": "location of a Java agent jar and attach and detach",
    "start": "165360",
    "end": "172500"
  },
  {
    "text": "and that's it I hope you all enjoyed this uh it really is simple well it looks",
    "start": "172500",
    "end": "179280"
  },
  {
    "text": "simple but under the hood under the hood it gets a bit weird and so that's what you have on the",
    "start": "179280",
    "end": "186120"
  },
  {
    "text": "attach the cooler process for the what then gets called in the Target jvm the",
    "start": "186120",
    "end": "192239"
  },
  {
    "text": "one you're attaching to is when you hit the we need to attach it loads that jar file and calls an agent",
    "start": "192239",
    "end": "198659"
  },
  {
    "text": "main method and then you have code in there that does stuff and it passes also in the",
    "start": "198659",
    "end": "204840"
  },
  {
    "text": "list of arguments that you passed in as part from the uh attacher process and an",
    "start": "204840",
    "end": "210659"
  },
  {
    "text": "instrumentation class which gives you lots of information about the",
    "start": "210659",
    "end": "216120"
  },
  {
    "text": "running process and it so this is all to be clear this is occurring within the J",
    "start": "216120",
    "end": "221280"
  },
  {
    "text": "the target jvm so at this point it's all within the process you're attached to",
    "start": "221280",
    "end": "227340"
  },
  {
    "text": "and that instrumentation contains a list of all classes that have been loaded other information about Heap space usage",
    "start": "227340",
    "end": "234840"
  },
  {
    "text": "and stuff like that and other things like it allows you to modify the bytecode of existing loaded classes",
    "start": "234840",
    "end": "243120"
  },
  {
    "text": "so how does that attaching process work so you have an attach a jvm and then the",
    "start": "243120",
    "end": "250860"
  },
  {
    "text": "target jvm so the attacher creates so you have to pass into the",
    "start": "250860",
    "end": "256139"
  },
  {
    "text": "attach to the process ID as we saw earlier one two three four so this process is slightly different on",
    "start": "256139",
    "end": "262199"
  },
  {
    "text": "Windows and Linux and also it's jvm specific so this is how it works for",
    "start": "262199",
    "end": "267300"
  },
  {
    "text": "open jdk and Oracle on Linux uh this isn't necessarily the same thing that",
    "start": "267300",
    "end": "272400"
  },
  {
    "text": "happens on Windows and imbm Java or any other kind of odd",
    "start": "272400",
    "end": "277880"
  },
  {
    "text": "uh jvm it may be different but this is how Oracle does it",
    "start": "277880",
    "end": "285960"
  },
  {
    "text": "so the attached to jvmcrates under temp a DOT attach PID then press as ID",
    "start": "285960",
    "end": "292259"
  },
  {
    "text": "of the file it then sends a Sig quit to the Target jvm",
    "start": "292259",
    "end": "298100"
  },
  {
    "text": "this is in Unix this is an optional this is a call to quit that to for that",
    "start": "298100",
    "end": "304620"
  },
  {
    "text": "process to kill itself but it's optional the the process doesn't actually have to",
    "start": "304620",
    "end": "310500"
  },
  {
    "text": "adhere to it and in this case it doesn't but this is the signal that they've decided to use",
    "start": "310500",
    "end": "316259"
  },
  {
    "text": "so the target jvm takes that secret signal checks for a DOT attach paid its",
    "start": "316259",
    "end": "322320"
  },
  {
    "text": "own process ID to see if that exists if it does exist it then realizes that rather than someone is trying to shut",
    "start": "322320",
    "end": "329639"
  },
  {
    "text": "down this process it's once a an agent to attach to it",
    "start": "329639",
    "end": "337580"
  },
  {
    "text": "it then creates a Handler thread which then deals with this attaching",
    "start": "337680",
    "end": "344400"
  },
  {
    "text": "it then creates a DOT Java PID file then the part the process id1234",
    "start": "344400",
    "end": "352320"
  },
  {
    "text": "this isn't a file this is a Unix socket and this is what's used for inter-process communication between the",
    "start": "352320",
    "end": "357979"
  },
  {
    "text": "attacher and the target jvm so once that file is created the",
    "start": "357979",
    "end": "363060"
  },
  {
    "text": "attached jvm is looking for that file to be that that pipe to be created once it's done it attaches to it",
    "start": "363060",
    "end": "370740"
  },
  {
    "text": "and then it sends a load agent location of the agent jar file",
    "start": "370740",
    "end": "378500"
  },
  {
    "text": "and the uh then to the target jvm the target jvm gets that location of the jar",
    "start": "378660",
    "end": "385919"
  },
  {
    "text": "file on disk uh loads it reads the Manifest file looks for an entry uh which will give a",
    "start": "385919",
    "end": "393060"
  },
  {
    "text": "location of the agent main method",
    "start": "393060",
    "end": "398960"
  },
  {
    "text": "and then calls that method with uh with the arguments and instrumentation class",
    "start": "401720",
    "end": "410240"
  },
  {
    "text": "and from there it then does whatever code was in that agent so in the Manifest file it's a bit",
    "start": "410340",
    "end": "417180"
  },
  {
    "text": "different to a regular manifest file you have a few extra things uh pre-main",
    "start": "417180",
    "end": "423419"
  },
  {
    "text": "is for when you're attaching statically so with a dash agent on low on Startup and uh",
    "start": "423419",
    "end": "431759"
  },
  {
    "text": "agent class is for dynamic you then have some um in the Manifest",
    "start": "431759",
    "end": "439919"
  },
  {
    "text": "file you have some permissions that can be set redefine and re-transform classes for modifying bytecode so it allows the",
    "start": "439919",
    "end": "448080"
  },
  {
    "text": "agent to modify whatever code you're running swap it out for something else and then you'll Target jvm will use that",
    "start": "448080",
    "end": "455460"
  },
  {
    "text": "and Native prefix is for if you want to modify Nate's well instrument native",
    "start": "455460",
    "end": "461280"
  },
  {
    "text": "classes or native methods because they don't have any a native method if you remember if you",
    "start": "461280",
    "end": "467220"
  },
  {
    "text": "know about Java has no uh is empty it's essentially like an",
    "start": "467220",
    "end": "473580"
  },
  {
    "text": "interface which then calls the C code but having a prefix allows you to or",
    "start": "473580",
    "end": "478620"
  },
  {
    "text": "changing that prefix allows you to put in a kind of a proxy method in front of that to instrument it which you can't do",
    "start": "478620",
    "end": "484500"
  },
  {
    "text": "if there's no Java code because you can't add Java code to a native method directly didn't expand that very well",
    "start": "484500",
    "end": "491460"
  },
  {
    "text": "um but generally speaking you won't need that anyway um so",
    "start": "491460",
    "end": "496620"
  },
  {
    "start": "494000",
    "end": "1281000"
  },
  {
    "text": "I'll give you a quick demo of that hopefully it'll work um to give you some background J bomb is",
    "start": "496620",
    "end": "502979"
  },
  {
    "text": "a tool we created it's open source to create a bill of materials for a running Java application",
    "start": "502979",
    "end": "511740"
  },
  {
    "text": "this was created um kind of after the kind of look for J",
    "start": "511740",
    "end": "516959"
  },
  {
    "text": "log for Shell um event that happened",
    "start": "516959",
    "end": "522659"
  },
  {
    "text": "about Christmas last year where finding look for J isn't necessarily",
    "start": "522659",
    "end": "529560"
  },
  {
    "text": "easy in an application because it may not necessarily be um directly direct dependency it can be",
    "start": "529560",
    "end": "535800"
  },
  {
    "text": "transfer dependency of something else you don't necessarily know it's right it's in your application and so this gives you a way of creating a bill of",
    "start": "535800",
    "end": "541860"
  },
  {
    "text": "materials of all the dependencies in your application at runtime there are other tools that do similar stuff but",
    "start": "541860",
    "end": "548339"
  },
  {
    "text": "this is different in electron it's a you can use it to attach to a running application so if you did a similar",
    "start": "548339",
    "end": "555300"
  },
  {
    "text": "thing looking at your source code it would be and you use some um some of the various tooling out there",
    "start": "555300",
    "end": "562019"
  },
  {
    "text": "it will give you a bill of materials of that jar file that or Warfare file and",
    "start": "562019",
    "end": "568200"
  },
  {
    "text": "which it will then load onto a application server and the application server has its own set of dependencies",
    "start": "568200",
    "end": "574920"
  },
  {
    "text": "which will be in your on your class path right runtime but it's not necessarily there at build time or you may have",
    "start": "574920",
    "end": "581279"
  },
  {
    "text": "plugins that are loaded dynamically at runtime as well and so this gives you a way of looking at what you really have",
    "start": "581279",
    "end": "587700"
  },
  {
    "text": "uh run at the application at runtime rather than just build time because those don't necessarily match up all the",
    "start": "587700",
    "end": "594540"
  },
  {
    "text": "time so let's take a look hopefully I can get us to work",
    "start": "594540",
    "end": "600079"
  },
  {
    "text": "so okay so first of all",
    "start": "601620",
    "end": "610740"
  },
  {
    "text": "but using a spring boot application for most of this",
    "start": "610740",
    "end": "615560"
  },
  {
    "text": "well you might not see it I can't",
    "start": "616200",
    "end": "619760"
  },
  {
    "text": "this is just a regular spring boot application",
    "start": "622860",
    "end": "628880"
  },
  {
    "text": "um I'll just start it up that's running so",
    "start": "630120",
    "end": "636180"
  },
  {
    "text": "first of all I've got to find the process ID",
    "start": "636180",
    "end": "641420"
  },
  {
    "text": "and then you know",
    "start": "644820",
    "end": "649040"
  },
  {
    "text": "so Japan allows you to first of all it'll give you a list of all the Java processors running on this app on this",
    "start": "653880",
    "end": "659700"
  },
  {
    "text": "machine my laptop and so we want",
    "start": "659700",
    "end": "665060"
  },
  {
    "text": "this one which is my spring boot application we'll then pass in",
    "start": "668640",
    "end": "677060"
  },
  {
    "text": "so now that started up I'll attach a debugger to it so we can see what it's doing",
    "start": "685740",
    "end": "692839"
  },
  {
    "text": "so we've attached",
    "start": "711600",
    "end": "715399"
  },
  {
    "text": "and nothing's happened",
    "start": "725820",
    "end": "729260"
  },
  {
    "text": "let's probably download the problem we're doing live demos um okay so I can't work out why that's not",
    "start": "732740",
    "end": "740820"
  },
  {
    "text": "working and I can't really see it let's just",
    "start": "740820",
    "end": "746420"
  },
  {
    "text": "attach please no okay so I'll just have to explain the code",
    "start": "746640",
    "end": "753899"
  },
  {
    "text": "so what would have happened if I was able to get the debugger working",
    "start": "753899",
    "end": "758940"
  },
  {
    "text": "is I can't see a thing um",
    "start": "758940",
    "end": "764600"
  },
  {
    "text": "so what would have so if I go back to the terminal Okay so",
    "start": "770959",
    "end": "778160"
  },
  {
    "text": "okay just realized what's happened",
    "start": "780899",
    "end": "784100"
  },
  {
    "text": "there we go so now we've actually attached to the right Java process",
    "start": "800880",
    "end": "807720"
  },
  {
    "text": "um what this will now be doing because this is attached to the uh",
    "start": "807720",
    "end": "816380"
  },
  {
    "text": "so at the moment we're attached to the Target the j-bomb Java application not the spring boot application and this",
    "start": "816959",
    "end": "823139"
  },
  {
    "text": "will go through and if I hit play",
    "start": "823139",
    "end": "826940"
  },
  {
    "text": "uh it will go to the attach and as you can see we'll be attaching to the process ID load the agent jar then",
    "start": "830779",
    "end": "837899"
  },
  {
    "text": "detach this will inject the j-bomb application code into the spring boot",
    "start": "837899",
    "end": "845459"
  },
  {
    "text": "application and then it will run so",
    "start": "845459",
    "end": "850100"
  },
  {
    "text": "what I need to do",
    "start": "850740",
    "end": "853700"
  },
  {
    "text": "is attached to both because previous was actually a spring boot application that's why it didn't work",
    "start": "856560",
    "end": "862579"
  },
  {
    "text": "so I hit play and now we've jumped to the springbook application so what's",
    "start": "865800",
    "end": "871200"
  },
  {
    "text": "happened is it's gone through the process that we saw that I talked about a minute ago we would have",
    "start": "871200",
    "end": "877740"
  },
  {
    "text": "created a temp file a pipe sent the jar file to this the springboard application",
    "start": "877740",
    "end": "883459"
  },
  {
    "text": "and now it's called the agent main method we're in the jar file that's just been loaded",
    "start": "883459",
    "end": "890399"
  },
  {
    "text": "um and then play again",
    "start": "890399",
    "end": "894440"
  },
  {
    "text": "loading into a Json file and now what it's going to do is list through all the classes which I won't go through all",
    "start": "898920",
    "end": "906180"
  },
  {
    "text": "um find the jar the jar file that class file came from work out it's Maven dependency from what the details of that",
    "start": "906180",
    "end": "912839"
  },
  {
    "text": "jar file and use that to build a list of dependencies",
    "start": "912839",
    "end": "918420"
  },
  {
    "text": "um for the application so if I just hit play again",
    "start": "919740",
    "end": "925279"
  },
  {
    "text": "and in fact I can just attach it",
    "start": "931620",
    "end": "935660"
  },
  {
    "text": "so as we can see it's gone through hopefully we've created a file",
    "start": "937980",
    "end": "944480"
  },
  {
    "text": "take a look at that file which will contain all the details of all of the dependencies",
    "start": "945240",
    "end": "952639"
  },
  {
    "text": "as we can see and scroll down a bit uh",
    "start": "970500",
    "end": "976260"
  },
  {
    "text": "you should be able to see so Jackson databind or Jackson core and",
    "start": "976260",
    "end": "982079"
  },
  {
    "text": "lots of stuff for that uh which we can just take my word for it that there's lots of other dependencies in there okay",
    "start": "982079",
    "end": "988260"
  },
  {
    "text": "so that's a dynamic attach and that's J bomb which is a tool you",
    "start": "988260",
    "end": "994800"
  },
  {
    "text": "can it's open source you can there'll be a link to at the end if you want if you're interested in looking at it so this is very useful if you a if at",
    "start": "994800",
    "end": "1002360"
  },
  {
    "text": "runtime your dependencies aren't the same as build time or if you have an application that you don't have the",
    "start": "1002360",
    "end": "1008000"
  },
  {
    "text": "source code for like it say it's a third party system that your business relies upon",
    "start": "1008000",
    "end": "1013880"
  },
  {
    "text": "but you don't have a source code for say jira or Confluence things like that",
    "start": "1013880",
    "end": "1019339"
  },
  {
    "text": "you they won't give the source code but you want to see if you have log4j within that web application which will give you",
    "start": "1019339",
    "end": "1026360"
  },
  {
    "text": "ability to do that so that was uh Dynamic attaching static",
    "start": "1026360",
    "end": "1032540"
  },
  {
    "text": "attaching is a lot easier um you just add a Java agent flag to the",
    "start": "1032540",
    "end": "1040220"
  },
  {
    "text": "startup with the location of the jar file and you can add variables to that as well and on Startup",
    "start": "1040220",
    "end": "1046640"
  },
  {
    "text": "it'll call their pre-made method which is pretty much the same as agent main it's just different so that if there's",
    "start": "1046640",
    "end": "1053120"
  },
  {
    "text": "any differences required within the agent it knows which way around it it's being called from and again that's uh",
    "start": "1053120",
    "end": "1060500"
  },
  {
    "text": "the location of the pre-made methods is in the Manifest file and so very very simple",
    "start": "1060500",
    "end": "1068059"
  },
  {
    "text": "for static attaching although it is the one a lot of time is most used uh rather",
    "start": "1068059",
    "end": "1073580"
  },
  {
    "text": "attaching to something after it started up so um every part of this talk is how those",
    "start": "1073580",
    "end": "1080840"
  },
  {
    "text": "are used especially in our in contrast so",
    "start": "1080840",
    "end": "1086299"
  },
  {
    "text": "the we have a tool called protect which is a rasp runtime application",
    "start": "1086299",
    "end": "1091520"
  },
  {
    "text": "self-protection there are others although of course all is the best",
    "start": "1091520",
    "end": "1096760"
  },
  {
    "text": "and it works by modifying the underlying application and it adds instrumentation",
    "start": "1096760",
    "end": "1102320"
  },
  {
    "text": "to that the application you've attached it to and that instrumentation allows us to",
    "start": "1102320",
    "end": "1110600"
  },
  {
    "text": "look at you have a source and a sink where a source could be like a spring",
    "start": "1110600",
    "end": "1116660"
  },
  {
    "text": "boot controller we have a get mapping and that would be a source it's data coming into your application and a sync is a uh a",
    "start": "1116660",
    "end": "1125960"
  },
  {
    "text": "potentially security vulnerable and",
    "start": "1125960",
    "end": "1131380"
  },
  {
    "text": "uh specify for describing it it's um",
    "start": "1131380",
    "end": "1136820"
  },
  {
    "text": "kind of a end to your application which is my parent has a security vulnerability like a data database or",
    "start": "1136820",
    "end": "1143660"
  },
  {
    "text": "executing other code or a command on our print system or reading your file that",
    "start": "1143660",
    "end": "1149059"
  },
  {
    "text": "kind of thing so you have the source and the sink and because we're able to instrument your application we can see",
    "start": "1149059",
    "end": "1154700"
  },
  {
    "text": "where lyrics was coming in and going and going out to we can work out whether there's a",
    "start": "1154700",
    "end": "1161059"
  },
  {
    "text": "potential vulnerability there and with protect if we're certain that there is we can block that execution so if it was",
    "start": "1161059",
    "end": "1168860"
  },
  {
    "text": "say a SQL injection and we can work out based",
    "start": "1168860",
    "end": "1174200"
  },
  {
    "text": "on the input which would normally be just give it username from the database",
    "start": "1174200",
    "end": "1179299"
  },
  {
    "text": "but its username and then as equal injection pattern and that then goes",
    "start": "1179299",
    "end": "1184640"
  },
  {
    "text": "into the database in a way that's not secure we can block that at runtime so it will",
    "start": "1184640",
    "end": "1191480"
  },
  {
    "text": "block as equal injection or path reversal remote code execution jndi lots",
    "start": "1191480",
    "end": "1197059"
  },
  {
    "text": "of other things um unfortunately I can't show you that code",
    "start": "1197059",
    "end": "1203480"
  },
  {
    "text": "um but I've created a simple rasp for this demonstration",
    "start": "1203480",
    "end": "1210380"
  },
  {
    "text": "which will block uh log for shell which if you're a Java developer I'm",
    "start": "1210380",
    "end": "1215480"
  },
  {
    "text": "sure you know about um because I'm sure someone asks you whether it is in your code base",
    "start": "1215480",
    "end": "1220640"
  },
  {
    "text": "earlier on this year um and the locker shell vulnerability allowed you to if there was any user",
    "start": "1220640",
    "end": "1227720"
  },
  {
    "text": "data that was being logged so from a web application um if they were able to add a string like",
    "start": "1227720",
    "end": "1235820"
  },
  {
    "text": "the one below a dollar parentheses Jandy RMI something something it would then lead to remote",
    "start": "1235820",
    "end": "1242900"
  },
  {
    "text": "code execution on that server and you had lots of uh I think one of the",
    "start": "1242900",
    "end": "1248480"
  },
  {
    "text": "funniest was Minecraft servers being popped by people just putting into the log into the chat",
    "start": "1248480",
    "end": "1255340"
  },
  {
    "text": "essentially this string um but",
    "start": "1255340",
    "end": "1261880"
  },
  {
    "text": "no you're not I hope you like my channel though",
    "start": "1265820",
    "end": "1271100"
  },
  {
    "text": "okay sorry about that uh",
    "start": "1271100",
    "end": "1276400"
  },
  {
    "text": "okay so where were we we were there weren't we great so uh I'll go quickly",
    "start": "1276400",
    "end": "1281900"
  },
  {
    "start": "1281000",
    "end": "1306000"
  },
  {
    "text": "static attaching so this is the pre-made method um uh as I was mentioning earlier you",
    "start": "1281900",
    "end": "1287960"
  },
  {
    "text": "have it's very simple you have a Java agent location um and on Startup this method gets",
    "start": "1287960",
    "end": "1293360"
  },
  {
    "text": "called by the jvm and that method is in a class specified by the Manifest file",
    "start": "1293360",
    "end": "1299020"
  },
  {
    "text": "very similar to Dynamic attaching but without all of the weird stuff you have to do to attach to a already running",
    "start": "1299020",
    "end": "1305120"
  },
  {
    "text": "process um rasps um you all heard me",
    "start": "1305120",
    "end": "1312020"
  },
  {
    "start": "1306000",
    "end": "1349000"
  },
  {
    "text": "um so again so this is the string at the bottom that's a payload for uh log for shell",
    "start": "1312020",
    "end": "1317659"
  },
  {
    "text": "and that things like Minecraft servers you've got a chat message with that in there you could get a remote code",
    "start": "1317659",
    "end": "1324320"
  },
  {
    "text": "execution on that Minecraft server not just Minecraft servers any Java application that use look for J was",
    "start": "1324320",
    "end": "1330200"
  },
  {
    "text": "potentially vulnerable to this that was using block4j a very vulnerable version",
    "start": "1330200",
    "end": "1336460"
  },
  {
    "text": "so you have this payload but how does that logging that to a log file how does that",
    "start": "1336460",
    "end": "1344120"
  },
  {
    "text": "then lead to someone taking over that web application",
    "start": "1344120",
    "end": "1349159"
  },
  {
    "start": "1349000",
    "end": "1438000"
  },
  {
    "text": "so log4j had a well it still does but it's removed most of the vulnerable stuff has a feature called interpolation",
    "start": "1349159",
    "end": "1357919"
  },
  {
    "text": "this allowed you to when you log a message if you had dollar parentheses",
    "start": "1357919",
    "end": "1363400"
  },
  {
    "text": "something it would potentially look that up and output that to the log rather",
    "start": "1363400",
    "end": "1368480"
  },
  {
    "text": "than the string that was there in the first place so if you have that logger",
    "start": "1368480",
    "end": "1373880"
  },
  {
    "text": "info and the username it would look outly in the environment variables the user variable and output that to log",
    "start": "1373880",
    "end": "1380659"
  },
  {
    "text": "instead um and that's not so bad but it also",
    "start": "1380659",
    "end": "1386360"
  },
  {
    "text": "allows you to do gndi lookups never really sure why but it did",
    "start": "1386360",
    "end": "1392299"
  },
  {
    "text": "and that's where the problem occurred so in here right so if a use if a user",
    "start": "1392299",
    "end": "1399860"
  },
  {
    "text": "is able to inject a value into the log message which isn't that hard because a",
    "start": "1399860",
    "end": "1405860"
  },
  {
    "text": "lot of time you'll be logging out say the username that's attempted to login for example and so if they put in this",
    "start": "1405860",
    "end": "1412039"
  },
  {
    "text": "as the username that will then be logged but there's lots of fields it could be",
    "start": "1412039",
    "end": "1418039"
  },
  {
    "text": "depending on how that replication is set up so how does that work how does jndi work",
    "start": "1418039",
    "end": "1427899"
  },
  {
    "text": "um so yeah if you pop if you sent that blogger info to that you would potentially get a command executed on",
    "start": "1429919",
    "end": "1436460"
  },
  {
    "text": "the offering system so jndi for those that aren't familiar it's",
    "start": "1436460",
    "end": "1442760"
  },
  {
    "start": "1438000",
    "end": "1494000"
  },
  {
    "text": "a way of storing data in a directory that can be looked up from your Java from your jvm and that could be local as",
    "start": "1442760",
    "end": "1450020"
  },
  {
    "text": "in the top level which is getting a the jdbc data source and then running a SQL",
    "start": "1450020",
    "end": "1455240"
  },
  {
    "text": "query on it or it could be remote and there's a few different protocols that supported",
    "start": "1455240",
    "end": "1460460"
  },
  {
    "text": "and so here you have an ldap request which is then converted into an out-up",
    "start": "1460460",
    "end": "1466159"
  },
  {
    "text": "object um going to ldap.example.com so",
    "start": "1466159",
    "end": "1471860"
  },
  {
    "text": "that's all fine as long as it's a static variable you're passing in to jndi you don't have a problem it's only really an",
    "start": "1471860",
    "end": "1478039"
  },
  {
    "text": "issue when you have the ability a a user or attacker is able to specify what that",
    "start": "1478039",
    "end": "1484760"
  },
  {
    "text": "string will be under normal circumstances that isn't the case but blog for J",
    "start": "1484760",
    "end": "1490520"
  },
  {
    "text": "um allows that to occur so if a malicious if her attacker was able to",
    "start": "1490520",
    "end": "1497480"
  },
  {
    "start": "1494000",
    "end": "1750000"
  },
  {
    "text": "influence what was in that J and the eye string what could happen and how does",
    "start": "1497480",
    "end": "1502520"
  },
  {
    "text": "that cause vulnerability so this is about this one is for pre-java 180 191",
    "start": "1502520",
    "end": "1509240"
  },
  {
    "text": "which was from October 2018. after that there is another way of doing it but it's a bit more convoluted",
    "start": "1509240",
    "end": "1516620"
  },
  {
    "text": "um so what happens when they're ambitious gender request occurs so",
    "start": "1516620",
    "end": "1522140"
  },
  {
    "text": "initial context look up so it's doing the lookup for the jndi request to evil",
    "start": "1522140",
    "end": "1527960"
  },
  {
    "text": "server obviously this must be influenced by an attacker",
    "start": "1527960",
    "end": "1534080"
  },
  {
    "text": "that's it will be there so it makes the request and the evil gmdi server so this for",
    "start": "1534080",
    "end": "1540380"
  },
  {
    "text": "this to occur you also need to be able to control the jndi server at the other end but if you can specify the hostname",
    "start": "1540380",
    "end": "1546200"
  },
  {
    "text": "of that of the lookup that doesn't matter because you can sell page and the I server anywhere and uh",
    "start": "1546200",
    "end": "1553340"
  },
  {
    "text": "that service and then the application will be able to access it and it will pass out the payload so this uh jndi",
    "start": "1553340",
    "end": "1560960"
  },
  {
    "text": "server passes back a implementation of the Java X name reference and that'll be",
    "start": "1560960",
    "end": "1566779"
  },
  {
    "text": "the payload so what the application then does with that is it looks up the",
    "start": "1566779",
    "end": "1575000"
  },
  {
    "text": "um The Factory location so and if there's a fact if there is a",
    "start": "1575000",
    "end": "1581179"
  },
  {
    "text": "class file Factory location it will then pre-java one eight one by one",
    "start": "1581179",
    "end": "1588679"
  },
  {
    "text": "um it will then load that location using the URL class",
    "start": "1588679",
    "end": "1594200"
  },
  {
    "text": "file loader and load that class into your jvm",
    "start": "1594200",
    "end": "1601520"
  },
  {
    "text": "and then execute it and that's that's it really it's very simple it allowed the attacker can",
    "start": "1601520",
    "end": "1608179"
  },
  {
    "text": "specify what that is and in that payload you'll have you'll execute something",
    "start": "1608179",
    "end": "1614539"
  },
  {
    "text": "malicious usually um so it will load up the location then",
    "start": "1614539",
    "end": "1621380"
  },
  {
    "text": "make sure a HTTP request to the gndi server well I suppose that's now a HTTP",
    "start": "1621380",
    "end": "1626419"
  },
  {
    "text": "server um that then gets loaded unless there's a potential payload class",
    "start": "1626419",
    "end": "1634220"
  },
  {
    "text": "that gets loaded so that bytecode is returned Ur class data loads it into",
    "start": "1634220",
    "end": "1639380"
  },
  {
    "text": "your jvm and at that point it will then instantiate that and so it will it will",
    "start": "1639380",
    "end": "1646159"
  },
  {
    "text": "run the default Constructor as you can see here and in this case",
    "start": "1646159",
    "end": "1651860"
  },
  {
    "text": "proper calculator [Music] probably something worse than that",
    "start": "1651860",
    "end": "1658720"
  },
  {
    "text": "in post so Oracle decided that this wasn't a good idea that you could",
    "start": "1658720",
    "end": "1664940"
  },
  {
    "text": "um if you can control the jdi location it then becomes very easy to take control of the server using this method",
    "start": "1664940",
    "end": "1671419"
  },
  {
    "text": "and so that's in this update that was disabled by default you can still enable",
    "start": "1671419",
    "end": "1677659"
  },
  {
    "text": "remote class loading but it's uh it's a flag you would have to specify",
    "start": "1677659",
    "end": "1685520"
  },
  {
    "text": "um so it's very rare in after 180 there are other ways of",
    "start": "1685520",
    "end": "1692600"
  },
  {
    "text": "doing it so rather than expecting our class file location if there's a class file that exists on your class path that",
    "start": "1692600",
    "end": "1700700"
  },
  {
    "text": "can still be loaded because it's not a remote so when the um",
    "start": "1700700",
    "end": "1706840"
  },
  {
    "text": "uh the payload reference class is returned instead of having a payload",
    "start": "1708760",
    "end": "1714260"
  },
  {
    "text": "location which won't be read you pass in a factory name and as long as there is a",
    "start": "1714260",
    "end": "1719900"
  },
  {
    "text": "factory that can be influenced to do something malicious on the class path that again will can lead to remote code",
    "start": "1719900",
    "end": "1725960"
  },
  {
    "text": "execution one of the more popular ones which is in Spring boot Tomcat is the",
    "start": "1725960",
    "end": "1731360"
  },
  {
    "text": "Apache Bean Factory and then that can be used to uh then call the expression",
    "start": "1731360",
    "end": "1736700"
  },
  {
    "text": "language processor which will then execute command and that works up to Java 15 when the",
    "start": "1736700",
    "end": "1743600"
  },
  {
    "text": "underlying Nash horn JavaScript engine was removed",
    "start": "1743600",
    "end": "1749080"
  },
  {
    "start": "1750000",
    "end": "1800000"
  },
  {
    "text": "so back to look for Jane this is the jndi lookup class",
    "start": "1751120",
    "end": "1758019"
  },
  {
    "text": "um this is the class that causes all the problems so it would be nice",
    "start": "1758120",
    "end": "1765380"
  },
  {
    "text": "if we could change that to say this and then all our problems will go away",
    "start": "1765380",
    "end": "1771159"
  },
  {
    "text": "uh so let's do another demo because the first one works so well",
    "start": "1771159",
    "end": "1777159"
  },
  {
    "text": "foreign",
    "start": "1785899",
    "end": "1788899"
  },
  {
    "start": "1800000",
    "end": "2292000"
  },
  {
    "text": "so I have a malicious jndi server uh running locally",
    "start": "1803500",
    "end": "1809480"
  },
  {
    "text": "um they'll look a link to this it will be available at the end if anyone wants to run all this themselves so I have it",
    "start": "1809480",
    "end": "1815840"
  },
  {
    "text": "running on localhost and I can use this to if I'm able to inject a jndi lookup",
    "start": "1815840",
    "end": "1822620"
  },
  {
    "text": "into the application it will then call this on localhost but it could be remote and this will return a payload which",
    "start": "1822620",
    "end": "1829640"
  },
  {
    "text": "will open up the calculator hopefully so",
    "start": "1829640",
    "end": "1834799"
  },
  {
    "text": "first of all to show that it all works correctly",
    "start": "1834799",
    "end": "1839140"
  },
  {
    "text": "uh demo",
    "start": "1840860",
    "end": "1844898"
  },
  {
    "text": "cool so",
    "start": "1847179",
    "end": "1850720"
  },
  {
    "text": "foreign so I have a controller here",
    "start": "1852440",
    "end": "1860600"
  },
  {
    "text": "so I'll just run that so we have end of user me",
    "start": "1860600",
    "end": "1866659"
  },
  {
    "text": "and don't work okay and",
    "start": "1866659",
    "end": "1874299"
  },
  {
    "text": "if I put in a payload I really hope this works",
    "start": "1875299",
    "end": "1881679"
  },
  {
    "text": "so called that and so that's the local J vulnerability",
    "start": "1886580",
    "end": "1893419"
  },
  {
    "text": "it's open up a calculator because it's actually gone through that entire process I just described called the gndi",
    "start": "1893419",
    "end": "1899779"
  },
  {
    "text": "server back return the location of a class file that was then loaded and then",
    "start": "1899779",
    "end": "1904820"
  },
  {
    "text": "executed which caused this to run so that all works",
    "start": "1904820",
    "end": "1910779"
  },
  {
    "text": "so if I kill this",
    "start": "1910779",
    "end": "1914559"
  },
  {
    "text": "and then restart it with a rasp",
    "start": "1922220",
    "end": "1928419"
  },
  {
    "text": "some sort of problem isn't there ah thank you",
    "start": "1935539",
    "end": "1942039"
  },
  {
    "text": "okay now if I go to my",
    "start": "1945080",
    "end": "1949840"
  },
  {
    "text": "okay so I'm low so I'm starting up my spring group application and I've specified in there a let me just show",
    "start": "1953840",
    "end": "1961460"
  },
  {
    "text": "you that I've um",
    "start": "1961460",
    "end": "1966740"
  },
  {
    "text": "in the job I've got a Java agent flag with the rasp and debug as well",
    "start": "1966740",
    "end": "1972200"
  },
  {
    "text": "um so we'll wait till it starts up so so it's now the jvm has",
    "start": "1972200",
    "end": "1979600"
  },
  {
    "text": "called the pre-made method um which we'll call this and so what",
    "start": "1980720",
    "end": "1986419"
  },
  {
    "text": "we've had in the instrumentation you have the ability to add class file transform implementations which is what",
    "start": "1986419",
    "end": "1992059"
  },
  {
    "text": "I've done here and that class file Transformer allows you to modify class files",
    "start": "1992059",
    "end": "1998960"
  },
  {
    "text": "um so we've added that breakpoint again so it's going to go",
    "start": "1998960",
    "end": "2004120"
  },
  {
    "text": "through and on start as it's starting up every time a classifier is loaded by uh",
    "start": "2004120",
    "end": "2009700"
  },
  {
    "text": "in the jvm it will pass into this method and I'm able to modify that if I so",
    "start": "2009700",
    "end": "2016299"
  },
  {
    "text": "you'll get the bike a bit so this contains the bikes uh code",
    "start": "2016299",
    "end": "2022720"
  },
  {
    "text": "of that class file and what we can do is modify that if we wish to",
    "start": "2022720",
    "end": "2028299"
  },
  {
    "text": "so first of all um it's going to pass every class so let's just get to that breakpoint",
    "start": "2028299",
    "end": "2033700"
  },
  {
    "text": "otherwise it'll take forever okay so now we have the jndi lookup class that we want to modify",
    "start": "2033700",
    "end": "2040539"
  },
  {
    "text": "now that we have it we're going to load up load this up into ASM which is a bytecode manipulation Library it's not",
    "start": "2040539",
    "end": "2048339"
  },
  {
    "text": "the only one it's fairly low level there are more easy ones to use if you're new to this kind of thing bike body is",
    "start": "2048339",
    "end": "2055480"
  },
  {
    "text": "probably the best one although that is built on top of ASM because as in a quite low level I'm having kind of",
    "start": "2055480",
    "end": "2061060"
  },
  {
    "text": "Builds on top of it so I'm going to load this into ASM and then",
    "start": "2061060",
    "end": "2066940"
  },
  {
    "text": "once that's done um it will cool every method in that",
    "start": "2066940",
    "end": "2072398"
  },
  {
    "text": "class Constructor look up method that we're looking for anything else and it will this method adapter will be",
    "start": "2072399",
    "end": "2079419"
  },
  {
    "text": "called at the beginning and the end we're only extending the end method and from there we can make changes",
    "start": "2079419",
    "end": "2086560"
  },
  {
    "text": "so looking for the okay so now into the lookup method",
    "start": "2086560",
    "end": "2094480"
  },
  {
    "text": "first of all just to show you what the instructions look like this is the original uh jndi lookup",
    "start": "2094480",
    "end": "2102760"
  },
  {
    "text": "method um quite large",
    "start": "2102760",
    "end": "2107820"
  },
  {
    "text": "these are all up codes and stuff I'm gonna try and work out what those mean",
    "start": "2107820",
    "end": "2113920"
  },
  {
    "text": "as you could see from the screenshot earlier on it's a reasonable size method so what we're going to do now is clear",
    "start": "2113920",
    "end": "2120400"
  },
  {
    "text": "that set of instructions because we don't want any of that then add just two instructions of Our",
    "start": "2120400",
    "end": "2126220"
  },
  {
    "text": "Own a const null a gnome object and then return to return it so we're",
    "start": "2126220",
    "end": "2133720"
  },
  {
    "text": "just adding those two instructions inserting that that list into the instruction list",
    "start": "2133720",
    "end": "2139480"
  },
  {
    "text": "and I'm returning it",
    "start": "2139480",
    "end": "2142560"
  },
  {
    "text": "and that's it",
    "start": "2144700",
    "end": "2147780"
  },
  {
    "text": "so that's done so we're not just uh so that will then now be returned to the",
    "start": "2150460",
    "end": "2156520"
  },
  {
    "text": "class loader and the class loader will load that our modified version rather than the original version we're also writing out the disks to make",
    "start": "2156520",
    "end": "2162940"
  },
  {
    "text": "it easier to see so I can show you that in decompile in a second so",
    "start": "2162940",
    "end": "2168940"
  },
  {
    "text": "that's now run and the application has started up so if we take a look at our demo",
    "start": "2168940",
    "end": "2175900"
  },
  {
    "text": "application we always written out to jndi lookup this was the class",
    "start": "2175900",
    "end": "2181480"
  },
  {
    "text": "um this is a decal power version and the lookup method has now been all the logic's been removed and we're just",
    "start": "2181480",
    "end": "2186579"
  },
  {
    "text": "returning null so hopefully we've blocked we've patched the log for J",
    "start": "2186579",
    "end": "2192940"
  },
  {
    "text": "vulnerability um let's find out because we just hit this again",
    "start": "2192940",
    "end": "2199980"
  },
  {
    "text": "and nothing it's not interpolated that into a result it's just giving you the plain text of",
    "start": "2201460",
    "end": "2208119"
  },
  {
    "text": "it and no calculator has popped up so uh that's hopefully worked",
    "start": "2208119",
    "end": "2214839"
  },
  {
    "text": "you can also do this dynamically you can attach you can do the same thing using",
    "start": "2214839",
    "end": "2220720"
  },
  {
    "text": "the dynamic attach as well as a static attach and the end result is the same",
    "start": "2220720",
    "end": "2227400"
  },
  {
    "text": "so yeah what we've done is looked up the JDR lookup method removed its contents",
    "start": "2228520",
    "end": "2233680"
  },
  {
    "text": "return now and therefore blocked the vulnerability",
    "start": "2233680",
    "end": "2239980"
  },
  {
    "text": "um so using this method and similar",
    "start": "2240280",
    "end": "2246940"
  },
  {
    "text": "technology techniques were able to block other more serious issues with this same",
    "start": "2246940",
    "end": "2252660"
  },
  {
    "text": "rasp I've created also blocks certain desolization attacks in Java",
    "start": "2252660",
    "end": "2257980"
  },
  {
    "text": "um it's it's available there'll be a link at the end if you want to take a look at it it's not for use in",
    "start": "2257980",
    "end": "2263500"
  },
  {
    "text": "production it really is just a demo to give people an idea of how it works really don't use it it's not good",
    "start": "2263500",
    "end": "2270160"
  },
  {
    "text": "um and that's about it so",
    "start": "2270160",
    "end": "2276300"
  },
  {
    "text": "here's the just realized it was on",
    "start": "2276599",
    "end": "2282779"
  },
  {
    "text": "that when",
    "start": "2284800",
    "end": "2291839"
  },
  {
    "start": "2292000",
    "end": "2323000"
  },
  {
    "text": "there we go okay so um this is the list of links",
    "start": "2292960",
    "end": "2298240"
  },
  {
    "text": "um well this is all of the code I've run today um you can take a look",
    "start": "2298240",
    "end": "2304060"
  },
  {
    "text": "um at all of that uh there's also we have control security has lots of developer",
    "start": "2304060",
    "end": "2311140"
  },
  {
    "text": "resources and different um scanning tools that you can use as part",
    "start": "2311140",
    "end": "2317500"
  },
  {
    "text": "of your pipeline I run locally and I'm sure there'll be someone Abu who'll give you a better demo I can do",
    "start": "2317500",
    "end": "2324780"
  }
]