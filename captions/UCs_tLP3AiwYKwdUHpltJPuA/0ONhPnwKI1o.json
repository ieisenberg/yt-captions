[
  {
    "start": "0",
    "end": "59000"
  },
  {
    "text": "Hey, everyone. Welcome to another episode of \nGOTO Unscripted that we're in Copenhagen at  ",
    "start": "12960",
    "end": "18840"
  },
  {
    "text": "GOTO Copenhagen 2023. I'm Andrea Leopardi. \nI'm from Italy. I'm a member of the Elixir  ",
    "start": "18840",
    "end": "26920"
  },
  {
    "text": "team. Elixir is a functional language \nthat runs on the Erlang virtual machine,   and I'm here with Francesco Cesarini.\nSo, I'm Francesco Cesarini. I'm the founder  ",
    "start": "26920",
    "end": "34520"
  },
  {
    "text": "and technical director at Erlang Solutions. I \nhave been working with Erlang Ecosystem since  ",
    "start": "34520",
    "end": "40640"
  },
  {
    "text": "the mid-'90s. Very fortunate to have seen \na programming language become an ecosystem   of languages, and I think that's probably \nwhat we're gonna talk about today, right? ",
    "start": "40640",
    "end": "48480"
  },
  {
    "text": "Francesco and I live very close to each \nother. We've never met in Italy, only through  ",
    "start": "50960",
    "end": "57480"
  },
  {
    "text": "conferences, various conferences, but yeah. He's \nbeen involved with Erlang a lot longer than I  ",
    "start": "57480",
    "end": "65479"
  },
  {
    "start": "59000",
    "end": "224000"
  },
  {
    "text": "have. I came into the Elixir generation, yeah. So, \nhow was it to see this, like, ecosystem grow or,  ",
    "start": "65480",
    "end": "76000"
  },
  {
    "text": "like, this small language I guess grow?\nIt was really interesting. I mean,   the first language on the BEAM came \nabout...I discovered it had been written,  ",
    "start": "76000",
    "end": "88159"
  },
  {
    "text": "it was called Reia. I heard about it at the Open \nSource Conference in Portland in 2008. And so,  ",
    "start": "88160",
    "end": "97760"
  },
  {
    "text": "when we ran our first conference in America, we \ninvited Tony to come in and present it. It was  ",
    "start": "97760",
    "end": "102600"
  },
  {
    "text": "interesting looking at how, you know, he'd taken \na Ruby-like syntax and then applied it to Erlang  ",
    "start": "103120",
    "end": "110160"
  },
  {
    "text": "running on the BEAM, which is the prevalent \nvirtual machine on which we run everything   today. And then from there, soon after Lisp \nFlavored Erlang came about with Robert Virding,  ",
    "start": "111160",
    "end": "122360"
  },
  {
    "text": "Efene by Mariano Guerra. And so, there were \na lot of Prologue, you know, got ported. So,  ",
    "start": "122360",
    "end": "129280"
  },
  {
    "text": "there were a lot of languages that came about, \nand some were even being used in production. ",
    "start": "129280",
    "end": "136360"
  },
  {
    "text": "But we never kind of realized it had become an \necosystem of languages probably until 2014 when  ",
    "start": "136360",
    "end": "145280"
  },
  {
    "text": "we were in San Francisco, and we had for the first \ntime at the Erlang factory dedicated a whole track  ",
    "start": "145280",
    "end": "151880"
  },
  {
    "text": "to Elixir. It was still in the early days. I think \nit was the year the first Elixir Comp happened,  ",
    "start": "151880",
    "end": "158680"
  },
  {
    "text": "so I think something like 140 people including \nDave Thomas's dog. I was walking with Garrett  ",
    "start": "158680",
    "end": "169879"
  },
  {
    "text": "Smith and we were discussing this new phenomenon \ncalled Elixir and excited about what was happening  ",
    "start": "169880",
    "end": "177560"
  },
  {
    "text": "and how Elixir was opening up the door to whole \nnew communities of programmers. And in that  ",
    "start": "177560",
    "end": "187480"
  },
  {
    "text": "conversation, it kind of transpired, you know, \nGarrett came up, \"Well, yeah, Erlang's becoming  ",
    "start": "187480",
    "end": "194000"
  },
  {
    "text": "now an ecosystem of languages,\" and that's when it \nclicked. That's exactly what happened with Java.  ",
    "start": "194000",
    "end": "200560"
  },
  {
    "text": "That's exactly what happened. NET. And the same \nwas happening with Erlang, and yeah, it's been  ",
    "start": "200560",
    "end": "210800"
  },
  {
    "text": "amazing to see. And you look at it today, I think \nthere are over 35 languages running on the BEAM,  ",
    "start": "210800",
    "end": "217640"
  },
  {
    "text": "which is impressive. You know, not all of these \nare used in production, many are experimental. ",
    "start": "217640",
    "end": "223080"
  },
  {
    "start": "224000",
    "end": "833000"
  },
  {
    "text": "And it's interesting, I was speaking with Sam \nAaron from Sonic Pi earlier and he was talking  ",
    "start": "224760",
    "end": "232760"
  },
  {
    "text": "about differences between Java and Closure being \na lot more than differences between, for example,  ",
    "start": "232760",
    "end": "239040"
  },
  {
    "text": "Erlang and Elixir. And I think that's...do \nyou feel that's true that, like, in...and the  ",
    "start": "239040",
    "end": "245200"
  },
  {
    "text": "languages on the BEAM are much...while there are \nmany flavors of languages on the BEAM and some  ",
    "start": "245200",
    "end": "251120"
  },
  {
    "text": "are statically typed, some, like, have different \nflavored syntaxes like Lisp, or they look like  ",
    "start": "251120",
    "end": "256799"
  },
  {
    "text": "Prologue, they look like Lisp, or they look sort \nof like Ruby. Do you feel like the difference...?  ",
    "start": "256800",
    "end": "262720"
  },
  {
    "text": "My feeling is that the differences are like...\nI agree. They're not...the differences aren't   major, but my view is that Erlang...they got a \nlot of things right when they invented Erlang  ",
    "start": "262720",
    "end": "273600"
  },
  {
    "text": "when they created Erlang. They spent probably \nthree years prototyping a certain domain  ",
    "start": "273600",
    "end": "282120"
  },
  {
    "text": "of the problem, you know, the problem domain of \nscalable, fully tolerant, soft real-time systems.  ",
    "start": "282120",
    "end": "289320"
  },
  {
    "text": "You know, first looking at all existing languages, \nlanguages being used in the industry back in the  ",
    "start": "289320",
    "end": "296040"
  },
  {
    "text": "'80s and then from there using a virtual machine \nimplementing a prologue. So by the time they  ",
    "start": "296040",
    "end": "301880"
  },
  {
    "text": "started creating the first virtual machine written \nin C, they'd come so far in these prototyping  ",
    "start": "301880",
    "end": "308840"
  },
  {
    "text": "activities that they streamlined and created the \nlanguage with the bare bones and bare necessities. ",
    "start": "308840",
    "end": "315680"
  },
  {
    "text": "If you ask the different co-inventors of Erlang \nwhat they contributed, you know, Mike Williams  ",
    "start": "315680",
    "end": "322479"
  },
  {
    "text": "once told me, \"Oh, I spent most of my time \nconvincing Joe and Robert that even though   this was a cool language feature, we didn't need \nit because didn't add any value.\" And, you know,  ",
    "start": "322480",
    "end": "331440"
  },
  {
    "text": "these design and prototype activities, they \nlooked at different constructs which they tested,  ",
    "start": "331440",
    "end": "337120"
  },
  {
    "text": "and if this construct added value and reduced \nthe code base and made the task of building  ",
    "start": "337120",
    "end": "344760"
  },
  {
    "text": "these telecom systems easier, they kept it. If \nit didn't, they removed it. And so, as a result,  ",
    "start": "344760",
    "end": "351880"
  },
  {
    "text": "I think Erlang became a very compact language \nthat was fit for purpose. And so as a result,  ",
    "start": "351880",
    "end": "361760"
  },
  {
    "text": "I think all the language is written on top \nof the BEAM, you know, get all of those   features and then add their flavors to it. \nAccidentally looked at the T-shirt I got.  ",
    "start": "361760",
    "end": "372520"
  },
  {
    "text": "Which flavor of Erlang is your favorite? This is \nvery small. I was wondering though, do you think  ",
    "start": "373920",
    "end": "382080"
  },
  {
    "text": "that these similarities between these languages \nare also due...at least that's also how I feel  ",
    "start": "382080",
    "end": "389879"
  },
  {
    "text": "in part, but also because Erlang is really hard \nto extend? Like, it's not...like, the basic data  ",
    "start": "389880",
    "end": "396400"
  },
  {
    "text": "structures in Erlang, for example, are very set. \nLike, it's just those. And if you look at things  ",
    "start": "396400",
    "end": "402800"
  },
  {
    "text": "like, for example, queues in Erlang, they're \nimplemented as, like, on top of existing data  ",
    "start": "402800",
    "end": "409680"
  },
  {
    "text": "structures doubles and lists, right? Or if you \nlook at Elixir, they have to be implemented on  ",
    "start": "409680",
    "end": "414960"
  },
  {
    "text": "top of maps. They're like something that compiled \ntime time-checked, but they have to be implemented   on top of maps. Do you think that's...?\nI mean, everything is possible even with  ",
    "start": "414960",
    "end": "424120"
  },
  {
    "text": "Erlang. But when the language inventors go out \nand create a programming language, they're out to  ",
    "start": "424120",
    "end": "432800"
  },
  {
    "text": "solve a particular problem. And I think, you know, \nso the problems they're trying to solve dictates  ",
    "start": "432800",
    "end": "439520"
  },
  {
    "text": "the features which they need. I mean, if you look \nat macros, for example, they exist in Erlang, but  ",
    "start": "439520",
    "end": "445240"
  },
  {
    "text": "they're made with...you know, they're very well \nhidden and they're not accessible to everyone. So,  ",
    "start": "446360",
    "end": "452280"
  },
  {
    "text": "they're very hard to use and implement. And that \nwas a conscious decision because they didn't want  ",
    "start": "452280",
    "end": "460760"
  },
  {
    "text": "the language to be extendable. I think one of \nthe problems they were trying to solve was the  ",
    "start": "460760",
    "end": "466080"
  },
  {
    "text": "cost of maintenance. They were trying to reduce \nmaintenance and operational costs in systems,  ",
    "start": "466080",
    "end": "473000"
  },
  {
    "text": "which they did very, very successfully with the \ntoolings and the hooks, introspection hooks you've  ",
    "start": "473000",
    "end": "479040"
  },
  {
    "text": "got into the VM. And again, everything, \nyou know, we were being able to all,  ",
    "start": "479040",
    "end": "485938"
  },
  {
    "text": "all the systems we've been able to solve, it's \nrare we've gone in and said, you know, we wish we  ",
    "start": "485938",
    "end": "493280"
  },
  {
    "text": "had this or that. Maybe some libraries might have \nbeen missing, but not language features because  ",
    "start": "493280",
    "end": "499600"
  },
  {
    "text": "keeping it simple meant you could do things with a \nfew lines of code on top of it if you needed it.  ",
    "start": "499600",
    "end": "505800"
  },
  {
    "text": "A super interesting thing that comes \nto mind is that maps, for example,   are a recent Erlang feature, right? And they now \nfeel like a really necessary language feature. ",
    "start": "507600",
    "end": "518680"
  },
  {
    "text": "Absolutely. I mean, maps were first presented, \nI believe, at the Erlang User Conference by  ",
    "start": "518680",
    "end": "525320"
  },
  {
    "text": "Richard O'Keefe, and what eventually became \nmaps in 2000 but it probably took a decade   before they made it into the language.\nBecause I remember it was around the  ",
    "start": "525320",
    "end": "534280"
  },
  {
    "text": "time Elixir was becoming 1.0 that they \nmade it to OTPR like 17 maybe is like... ",
    "start": "534280",
    "end": "541120"
  },
  {
    "text": "Correct. Yeah. Correct. And again, this is \nEricsson, you know, Ericsson is a benevolent  ",
    "start": "541120",
    "end": "548920"
  },
  {
    "text": "dictator and that's the reality is when you're \ndealing with open source and they're incredibly  ",
    "start": "548920",
    "end": "554240"
  },
  {
    "text": "conservative over new features because they add \nto the language. After all, if they add something,   they need to support and maintain it.\nFor decades. ",
    "start": "554240",
    "end": "562960"
  },
  {
    "text": "And not only that, but everything they do needs \nto be backward compatible. Because there are tens  ",
    "start": "562960",
    "end": "569960"
  },
  {
    "text": "of millions of lines of coding in production. You \nmake something that isn't backward compatible, you  ",
    "start": "569960",
    "end": "575400"
  },
  {
    "text": "break the build and upgrading will take...yeah, \ncan take years. We've worked on projects where  ",
    "start": "575400",
    "end": "585200"
  },
  {
    "text": "they forked the BEAM and to get the code base back \non the latest version of the BEAM, you know, 3, 4  ",
    "start": "585200",
    "end": "594320"
  },
  {
    "text": "years later, in some cases, it took 6 to 12 months \nof work and we've seen this on multiple occasions. ",
    "start": "594320",
    "end": "602600"
  },
  {
    "text": "The thing I like though is that I have a wish \nlist of things that would go into Erlang. I think  ",
    "start": "602600",
    "end": "608680"
  },
  {
    "text": "maybe the biggest one would be structs because the \ninteroperability would be nice. Like the fact... ",
    "start": "608680",
    "end": "614320"
  },
  {
    "text": "I think structs is exactly what is stopping the \nease of calling Elixir libraries from Erlang. ",
    "start": "614320",
    "end": "627200"
  },
  {
    "text": "Yes, because you have to do some \nesoteric-looking stuff to get them to work.  Exactly. And it is one of the gating issues. So, \nyou know, there are conversations ongoing, and one  ",
    "start": "627200",
    "end": "640000"
  },
  {
    "text": "of the missing possibilities is to add structure \nto the language for compatibility issues. I mean,  ",
    "start": "640000",
    "end": "646240"
  },
  {
    "text": "going back to the very first ElixirCon, if I \nremember Jose saying, oh, we've got access to  ",
    "start": "646240",
    "end": "655800"
  },
  {
    "text": "all of the libraries written in Erlang, which \nis decades of work of open source libraries,  ",
    "start": "655800",
    "end": "664399"
  },
  {
    "text": "which we can use from Elixir, and the opposite \nisn't...you know, you don't have the opposite  ",
    "start": "664400",
    "end": "670160"
  },
  {
    "text": "from Erlang. And it's payback time, so yeah, \nadding structure would be...you know, that  ",
    "start": "670160",
    "end": "675680"
  },
  {
    "text": "would be one of the huge benefits from it.\nI think so. And there is such like a central,  ",
    "start": "675680",
    "end": "681320"
  },
  {
    "text": "like Elixir seems to have developed around \nstructs a lot. It's very...you see them all  ",
    "start": "681320",
    "end": "687920"
  },
  {
    "text": "over the place, extremely idiomatic, and it would \nbe nice to see them in Erlang core because you  ",
    "start": "687920",
    "end": "694720"
  },
  {
    "text": "could probably significantly optimize tagging \nthis struct for example. After all, we have to  ",
    "start": "694720",
    "end": "699800"
  },
  {
    "text": "use this little construct that takes memory and \nall these structures that we have in the system,  ",
    "start": "699800",
    "end": "706360"
  },
  {
    "text": "and it would be nice to have it in the \nBEAM because that would probably change. Absolutely. Absolutely.\nSo, that's very interesting. ",
    "start": "706360",
    "end": "712720"
  },
  {
    "text": "As a side note, Robert Virding added \nstructs to Lisp Flavored Erlang,  ",
    "start": "712720",
    "end": "717759"
  },
  {
    "text": "which is...yeah, one of the many languages is a \nLisp implementation running on the BEAM. And so,  ",
    "start": "717760",
    "end": "722920"
  },
  {
    "text": "yeah, that now allows us to call all the \nElixir libraries completely seamlessly. ",
    "start": "722920",
    "end": "727720"
  },
  {
    "text": "I'm curious if Gleam has structures. Gleam is \na statically typed language that's compiled via  ",
    "start": "728440",
    "end": "735160"
  },
  {
    "text": "Rust though, like the Gleam compiler's reading \nRust and it generates Erlang by code or AST, I  ",
    "start": "735160",
    "end": "742279"
  },
  {
    "text": "don't know. But I wonder if it has structs and I \nwonder if it...I mean, I would bet that it has,  ",
    "start": "742280",
    "end": "748960"
  },
  {
    "text": "like, records. It would be interesting to \nknow if they actually can get away with not   having them tagged because it's a static type \nlanguage that you can probably do the checking. ",
    "start": "748960",
    "end": "758800"
  },
  {
    "text": "It's a good point. I don't know...\nBut one thing that I've noticed in Erlang  ",
    "start": "758800",
    "end": "765200"
  },
  {
    "text": "that's very exciting is that I do feel like \nit sometimes it can be hard to extend Erlang,  ",
    "start": "765200",
    "end": "770360"
  },
  {
    "text": "the VM itself, which is probably for the best, \nright? Like, it's a very intricate VM with, like,  ",
    "start": "770360",
    "end": "778160"
  },
  {
    "text": "lots of...it's a big VM, right? It's a very \nsmart VM, like, with the scheduling and the   process and the garbage collection has lots \nof features, and so, like, it would be hard,  ",
    "start": "778160",
    "end": "788480"
  },
  {
    "text": "I think, to make it extensible in any significant \nway when you go and touch, like, the depth of the  ",
    "start": "788480",
    "end": "794279"
  },
  {
    "text": "VM. But recently it's been...like, the releases \nof ODP have been exciting. They've added a lot of  ",
    "start": "794280",
    "end": "802400"
  },
  {
    "text": "stuff in the last, just even the last two or three \nyears. Being able to call gen servers I think this  ",
    "start": "802400",
    "end": "814360"
  },
  {
    "text": "is OTP 25 or 26, like very recent, like being able \nto do asynchronous calls to gen server and, like,  ",
    "start": "814360",
    "end": "820120"
  },
  {
    "text": "check for the response later. All this stuff \nis, like, getting into core and that's awesome  ",
    "start": "820120",
    "end": "825520"
  },
  {
    "text": "because it allows us to build a lot of these, \nlike, lower-level abstractions for ourselves. ",
    "start": "825520",
    "end": "831942"
  },
  {
    "text": "That is correct. \nI'm a big fan. If you look at an actual BEAM itself, I think \nthe biggest challenge in extending and adding  ",
    "start": "831942",
    "end": "840800"
  },
  {
    "start": "833000",
    "end": "1174000"
  },
  {
    "text": "things to it is ensuring they don't disrupt \nthe soft real-time properties of the scheduler,  ",
    "start": "840800",
    "end": "846399"
  },
  {
    "text": "which is I think their biggest fear.\nInterestingly, you mentioned this because  ",
    "start": "846400",
    "end": "851480"
  },
  {
    "text": "like one of the people that are familiar with \nthe BEAM and Elixir, and Erlang and Elixir,  ",
    "start": "851480",
    "end": "857480"
  },
  {
    "text": "probably know this, but one of the...maybe \nthe only shared functional data structure,  ",
    "start": "857480",
    "end": "864720"
  },
  {
    "text": "like pure functional data structure lives in \nshared memories is binaries, right? Like bigger,  ",
    "start": "864720",
    "end": "870560"
  },
  {
    "text": "binaries larger than 64 bytes, so they go into, \nlike, a shared memory area, so they didn't have  ",
    "start": "870560",
    "end": "875600"
  },
  {
    "text": "to move them around the process, you just move \nreferences. And that's the only data structure   that I know of that's completely shared across. \nWell, now they have Atomics encounters, but... ",
    "start": "875600",
    "end": "885440"
  },
  {
    "text": "ETS tables are another that \nhas destructive operations.  Right. But ETS tables are sort of like shared \nmemory errors, right? But it's treated as an  ",
    "start": "885440",
    "end": "895640"
  },
  {
    "text": "impure. You can modify its state, right?\nCorrect  And the stuff with the binaries is not like that. \nYou can't modify the selected binary. And it's so  ",
    "start": "895640",
    "end": "903680"
  },
  {
    "text": "interesting to me that even just binaries \nwhich are very pragmatic to be in a, like,  ",
    "start": "903680",
    "end": "908839"
  },
  {
    "text": "separate memory space after 64 bytes and all that, \nthey cause many problems because, like, it turns   out that like a lot of memory leaks in Erlang \napplications are from parsers copying binaries or,  ",
    "start": "908840",
    "end": "919279"
  },
  {
    "text": "like, taking big binaries and splitting them up.\nMemory fragmentation.  Exactly. And, like, creating copies of these, \nlike, smaller banners or having, like, memory  ",
    "start": "919280",
    "end": "925759"
  },
  {
    "text": "leaks where you have reference to the binary that \nyou don't clear up or the process doesn't die or   this or that, and then you have a memory leak \nbecause, like, the binary never gets garbage  ",
    "start": "925760",
    "end": "934120"
  },
  {
    "text": "collected. And it's interesting because you notice \nthat, like, even one day the structure that it's   built-in still bubbles up to problems for users \nin some specific use cases. After all, like,  ",
    "start": "934120",
    "end": "945000"
  },
  {
    "text": "it's hard to do this. Like, the BEAM has wonderful \nproperties of software priming per process garbage  ",
    "start": "945000",
    "end": "950360"
  },
  {
    "text": "collection and all this stuff, but they're hard \nto maintain, you know? Maybe some of it is...  I think yeah, you've answered your question as to \nwhy I think Ericsson has to be very conservative  ",
    "start": "950360",
    "end": "964440"
  },
  {
    "text": "and change. I mean, just the JIT compiler, \nwhich, you know, that I mean was at least three,  ",
    "start": "964440",
    "end": "970520"
  },
  {
    "text": "four years in the making. Extensive research, \nbut when that came out, it allowed WhatsApp  ",
    "start": "970520",
    "end": "978640"
  },
  {
    "text": "to reduce its server needs by around 30%. That \nwas when WhatsApp went out and tweeted about it  ",
    "start": "978640",
    "end": "988160"
  },
  {
    "text": "thanking Ericsson for it. And that, in turn, \nyou know, translates to huge energy savings,  ",
    "start": "988680",
    "end": "997000"
  },
  {
    "text": "which is something that we're seeing.\nIt's interesting that Elixir itself,  ",
    "start": "997000",
    "end": "1001680"
  },
  {
    "text": "it's not in a spot where we're not adding much \nto it either, right? Like, I think arguably more  ",
    "start": "1003200",
    "end": "1009880"
  },
  {
    "text": "stuff is coming up into Erlang in the past, \nlike, a couple of years maybe because Elixir   has been very...Elixir's ecosystem is expanding \nincredibly. Like, all the machine learning stuff  ",
    "start": "1009880",
    "end": "1018920"
  },
  {
    "text": "is nuts. Like, the live view stuff is nuts but…\nBut this is the positive. A good part of it  ",
    "start": "1018920",
    "end": "1024160"
  },
  {
    "text": "is also the positive influence \nElixir is having back on Erlang.  Because people are realizing that a lot of things \nyou have to solve in Erlang. Like, for example,  ",
    "start": "1024160",
    "end": "1032040"
  },
  {
    "text": "Atomics. All these new features that have \nbeen added a persistent term, those are,   like, fantastic features that have been added \nin just the last couple or two or three years,  ",
    "start": "1034480",
    "end": "1042199"
  },
  {
    "text": "I think, in Erlang. And they, you just cannot do \nthem. Like, something like the persistent term,   which is like this shared persistent storage gets \nthis copied tool processes, very fast to read,  ",
    "start": "1042200",
    "end": "1052039"
  },
  {
    "text": "very painful to write, it's awesome, like, \nfor so many use cases, but you just can't   do it in...like, you have to do it at the VM \nlevel, right? You can't do it at the...So,  ",
    "start": "1052040",
    "end": "1060760"
  },
  {
    "text": "it's awesome that these features are, like, \npopping up in Erlang because, like, from Elixir,   we just get them for free, and from...you know, \nin Erlang, you can just use them. You can use  ",
    "start": "1060760",
    "end": "1070480"
  },
  {
    "text": "them in Gleam, you can use them. That's the \nbenefit, obviously, of adding features to Erlang.",
    "start": "1070480",
    "end": "1075600"
  },
  {
    "text": "That's amusing if you say, oh, nothing's \nhappening with Erlang. No, there's a lot of   work happening. You know, Ericsson is doing \nan amazing job at driving things forward,  ",
    "start": "1077400",
    "end": "1087480"
  },
  {
    "text": "but it's not so much the language, it's the \nlibraries where the effort is being put in  ",
    "start": "1087480",
    "end": "1093559"
  },
  {
    "text": "and on the virtual machine. And...\nI think that's tricky because,   like, the work that the Erlang team is \nputting into Erlang is low-level. Like,  ",
    "start": "1093560",
    "end": "1103240"
  },
  {
    "text": "something like persistent term or something like \nAtomic or counters, these are low-level stuff that  ",
    "start": "1103240",
    "end": "1111559"
  },
  {
    "text": "usually you need...99% I think of use cases \nare for, like, library authors or OTP itself. ",
    "start": "1111560",
    "end": "1117200"
  },
  {
    "text": "Exactly. And the user doesn't see it.\nAre mostly used for gen server calls and,   like, they're used by OTP itself, right? So, you \ndon't get to...And the advancements and the news  ",
    "start": "1117200",
    "end": "1128720"
  },
  {
    "text": "that are happening in Elixir are...like, \nthey seem more exciting because they're,   like, much easier. It's like, oh, there's a \nnew machine learning library that lets you,  ",
    "start": "1128720",
    "end": "1138520"
  },
  {
    "text": "like, pick up models from [inaudible 00:18:47] \nand run your machine learning models. Like,   that's something I can touch very easily that can \nget easily to users or live new features in live  ",
    "start": "1138520",
    "end": "1148240"
  },
  {
    "text": "view. They get right into the hands of users. And \ninstead, the work that Erlang is doing is just as   important and just as prolific, right? Like, \nthey're doing a lot of stuff. It's just that  ",
    "start": "1148240",
    "end": "1157240"
  },
  {
    "text": "it's so within maybe the depth...\nIt's much more low-level. It's   a low level where you need to have...\nSo, it's harder to get it to users, you know? ",
    "start": "1157240",
    "end": "1163200"
  },
  {
    "text": "It's where you need to have full \ncontrol over what's going on.  But it does have an impact. I mean, \nfor libraries, I've used counters,  ",
    "start": "1163840",
    "end": "1170280"
  },
  {
    "text": "I've used Atomics, I've used new \nfeatures, like, and they've been awesome. An amazing new feature, which I discovered reading \nthe manual pages a couple of weeks ago, is the  ",
    "start": "1170280",
    "end": "1181840"
  },
  {
    "start": "1174000",
    "end": "1319000"
  },
  {
    "text": "ability to match specifications. So, a match \nspecification, for those of you who don't know,  ",
    "start": "1181840",
    "end": "1189960"
  },
  {
    "text": "is a program that provides a set of...it's a \nterm, which consists of a set of variables,  ",
    "start": "1189960",
    "end": "1196480"
  },
  {
    "text": "a set of logical operations you can do on these \nvariables, and then a set of actions. And so, it's  ",
    "start": "1196480",
    "end": "1204320"
  },
  {
    "text": "a very simple program. It has a very, very small \nsubset of operations and actions you can take,  ",
    "start": "1204320",
    "end": "1212919"
  },
  {
    "text": "and it was originally used for tracing local and \nglobal function calls in runtime. You know, we're  ",
    "start": "1212920",
    "end": "1221280"
  },
  {
    "text": "having to trace, and compile the code, and you \nwanted to turn on or turn off the trace or trigger   trace messages when certain conditions were met.\nSo, you know, only if, you know, the first  ",
    "start": "1221280",
    "end": "1236600"
  },
  {
    "text": "argument to a local call was user Andrea Leopardi \nand the second argument was to have them call  ",
    "start": "1236600",
    "end": "1243679"
  },
  {
    "text": "home, for example. At that level of granularity, \nyou could trigger a trace message. If you knew,   you know, that was where, you know, you needed to \ngo in and troubleshoot. And, you know, this has  ",
    "start": "1243680",
    "end": "1254760"
  },
  {
    "text": "been extended to message passing, to pattern \nmatching. It's just been extended to a large  ",
    "start": "1254760",
    "end": "1263800"
  },
  {
    "text": "variety of things. It also works on ETS tables. \nIt has worked on the ETS table for a while,   but, you know. So basically, you know, the \nreport, the power of tracing off, kind of,  ",
    "start": "1263800",
    "end": "1274080"
  },
  {
    "text": "sequential calls to a lot of other \nconstructs where, again, you know,  ",
    "start": "1274080",
    "end": "1280200"
  },
  {
    "text": "a process receives a particular message, you \ntrigger, you know, you start tracing, you know? ",
    "start": "1280200",
    "end": "1286440"
  },
  {
    "text": "It's a very fast way of, like, matching \non stuff and extracting information,   which is why it's allowed in ETS tables.\nIt's not for the faint of heart,  ",
    "start": "1287320",
    "end": "1296760"
  },
  {
    "text": "especially if you're doing it in a live system. \nBut what is kind of hard to reason and hard to  ",
    "start": "1297400",
    "end": "1304080"
  },
  {
    "text": "figure out bugs. Again, one of the points of \nErlang was to reduce operational costs. And  ",
    "start": "1304080",
    "end": "1310600"
  },
  {
    "text": "this reduces the time it takes to troubleshoot \nsystems and find that needle in a haystack.",
    "start": "1310600",
    "end": "1319440"
  },
  {
    "start": "1319000",
    "end": "1671000"
  },
  {
    "text": "I think Elixir is doing a...I'm not teaming up \nwith any of it, that's why I allow myself to   say it, but it's doing an amazing job at doing \nsomething similar with compiler tracing and,  ",
    "start": "1319440",
    "end": "1328159"
  },
  {
    "text": "like, code diagnostics. There has been a ton \nof work really in the last, I don't know,  ",
    "start": "1328160",
    "end": "1333440"
  },
  {
    "text": "year to, like, improve Elixir's lexer and \nparser and, like, all the code compilers. ",
    "start": "1333440",
    "end": "1339639"
  },
  {
    "text": "So, you're putting hooks into the code.\nEverywhere. So, essentially, like,   the language servers become very precise in doing \nstuff. Like, now Elixir's able to, for example,  ",
    "start": "1339640",
    "end": "1352000"
  },
  {
    "text": "partially tokenize strings that are...like, all \nElixir codes that have syntax errors so that,   like, we can point you to the syntax error and \nwhere it is, you know, like all these tools,  ",
    "start": "1352000",
    "end": "1361280"
  },
  {
    "text": "and that's really...like, it makes me \nthink of that because, like, that's, like,   really precise tracing at the compilation level, \nright? And like, I'm not involved in any of it,  ",
    "start": "1361280",
    "end": "1370760"
  },
  {
    "text": "sadly, but I'll benefit from it, you know.\nI imagine when they went in and added line  ",
    "start": "1370760",
    "end": "1375960"
  },
  {
    "text": "numbers in error messages, you know, which...\nElixir, especially with this tooling stuff,  ",
    "start": "1375960",
    "end": "1387320"
  },
  {
    "text": "can have its compiler written mostly in \nElixir, right? And a little bit of Erlang,  ",
    "start": "1387320",
    "end": "1393240"
  },
  {
    "text": "like the compiler for Elixir itself, is very \nhigh level but very easy to...I've always, like,   felt it's, like, quite easy to contribute to and \nit's quite easy to, like, do bigger stuff compared  ",
    "start": "1393240",
    "end": "1401880"
  },
  {
    "text": "to language, like, where you have a lower level \ncompiler that, like, has to take care of, like,   optimizations and, like, do multiple more passes. \nLike, Elixir's compilation passes are less,  ",
    "start": "1401880",
    "end": "1411720"
  },
  {
    "text": "for example, so you have easier opportunities for \ndoing this sort of stuff like tracing compilation,  ",
    "start": "1411720",
    "end": "1418799"
  },
  {
    "text": "compilation hooks, and all this stuff for code \ndiagnostics, so it's been very interesting.  Why don't you tell us, you know, Elixir is making \nits way into a lot of new verticals. I think one  ",
    "start": "1418800",
    "end": "1428680"
  },
  {
    "text": "of them is machine learning. Can you share a \nlittle bit about what's happening in that space? ",
    "start": "1428680",
    "end": "1433680"
  },
  {
    "text": "I am not involved in that space at all, so \nalways a pinch of salt, but essentially we  ",
    "start": "1436800",
    "end": "1444440"
  },
  {
    "text": "have port...like, the Elixir...Sean Moriarty, \nin particular, has been leading all of this,   but the Elixir community has been writing \nthe SLs for Elixir that compile to this,  ",
    "start": "1444440",
    "end": "1456560"
  },
  {
    "text": "like, GPU frameworks. You know, like, I don't \nknow any of them. Like, I'll embarrass myself,  ",
    "start": "1456560",
    "end": "1463480"
  },
  {
    "text": "but essentially you can do tons of operations in \nElixir now. And from that, sort of, was born a  ",
    "start": "1463480",
    "end": "1472280"
  },
  {
    "text": "whole ecosystem of things that you can do now \nin Elixir-related machine learning. The really   interesting thing to me is that this is not...it's \nnot necessarily better than Python as far as  ",
    "start": "1472280",
    "end": "1483160"
  },
  {
    "text": "I understand, for example, because they both \ncompile to, like, GPU instructions. Eventually,  ",
    "start": "1483160",
    "end": "1489000"
  },
  {
    "text": "they use like this Google compilers for GPU \ninstructions and stuff. So it's not necessarily,  ",
    "start": "1489000",
    "end": "1494000"
  },
  {
    "text": "like, better performance, but the thing \nthat's been interesting is this seems to   be one of the first languages to challenge \nPython's dominance over this space, right?",
    "start": "1495160",
    "end": "1504100"
  },
  {
    "text": "Well, it focuses on user experience and...\nExactly, yeah. It looks nice.  ...adoptability as they do for machine learning \nwhat they've done for web development in Phoenix,  ",
    "start": "1504100",
    "end": "1511760"
  },
  {
    "text": "where they've reduced the barrier to entry where \nyou need to know a little, just, you know, a  ",
    "start": "1511760",
    "end": "1517040"
  },
  {
    "text": "subset of Elixir to be productive using Phoenix \nand not understand, yeah, anything of what's  ",
    "start": "1517040",
    "end": "1524280"
  },
  {
    "text": "happening under the hood, right? And, in no \ntime, you'll deploy the website. If they do   the same for machine learning, I think it's gonna \nopen up the doors to a whole new set of users. ",
    "start": "1524280",
    "end": "1534800"
  },
  {
    "text": "There's a lot of focus... There's a lot of \nfocus on user experience again, like we saw  ",
    "start": "1534800",
    "end": "1539880"
  },
  {
    "text": "with Phoenix, like we saw with LiveView, \nlike all these tools, like we saw with...  On Nerves as well.\nNerves, exactly.  So Nerves is the embedded framework used \nFor embedded devices and, like, the same thing,  ",
    "start": "1539880",
    "end": "1551320"
  },
  {
    "text": "like, very, very usable, very user-friendly, \nand they're doing the same thing with machine   learning. And to me, it's very interesting \nbecause, like, you can see that the ergonomics  ",
    "start": "1551320",
    "end": "1560040"
  },
  {
    "text": "make a big difference, right? Like having...even \nif, like, maybe performance's not gonna be better   than Python because they're gonna compile, like, \nvery similar...I don't know anything. I could be  ",
    "start": "1560040",
    "end": "1568080"
  },
  {
    "text": "saying, like, total lies here, but like, I \nthink that's how it works. And, you know,  ",
    "start": "1568080",
    "end": "1574720"
  },
  {
    "text": "it turns out that ergonomics developer experience \nand usability matter to developers, right? I  ",
    "start": "1574720",
    "end": "1581360"
  },
  {
    "text": "think of this, like, it's interesting this is \none of the...from my very limited experience,   it seems to be one of the very few languages that \nare challenging Python's because Python's like,  ",
    "start": "1581360",
    "end": "1590720"
  },
  {
    "text": "it's the thing in the machine learning sphere, \nright? Like, you write Python. And instead, like,  ",
    "start": "1590720",
    "end": "1595960"
  },
  {
    "text": "Elixir is coming up with like, oh, hey, you know, \nyou can write this in Elixir too. And it's very,  ",
    "start": "1595960",
    "end": "1601080"
  },
  {
    "text": "very interesting to see what that will \nbring in the future. I have no clue.  ",
    "start": "1601080",
    "end": "1606519"
  },
  {
    "text": "I'm not involved sadly because, I don't know, I \ndon't do anything with machine learning but... ",
    "start": "1606520",
    "end": "1613080"
  },
  {
    "text": "What really kind of excites me is the ability \nto run everything in the same memory space. So,  ",
    "start": "1613080",
    "end": "1618600"
  },
  {
    "text": "you know, if you look at Phoenix and you \ndecide to use Python as a backend database,  ",
    "start": "1618600",
    "end": "1624120"
  },
  {
    "text": "you know, you'd have the web server, you'd have \nyour business logic, and your database all in the   same memory space, which makes it extremely fast. \nI mean, it's faster to create dynamic pages and  ",
    "start": "1624120",
    "end": "1635440"
  },
  {
    "text": "to read static pages cached in Redis. So, if \nyou can do the same if the same happens with  ",
    "start": "1635440",
    "end": "1641399"
  },
  {
    "text": "machine learning, then it's gonna be fantastic.\nWe use a lot of ETS at my job for caching and for,  ",
    "start": "1641400",
    "end": "1648320"
  },
  {
    "text": "like, responding very quickly to requests and, \nyou know, like, we have an endpoint for beginning  ",
    "start": "1648320",
    "end": "1655039"
  },
  {
    "text": "ETS tables are the Redis on the \nBEAM. The Redis on the BEAM.  Like half a milliseconds and it just queues \nrequests and then we flush them out to... ",
    "start": "1656560",
    "end": "1663559"
  },
  {
    "text": "You distributed ETS tables? \nThere's a lot of tools, very powerful tools.",
    "start": "1663560",
    "end": "1671320"
  },
  {
    "start": "1671000",
    "end": "1810000"
  },
  {
    "text": "What's your view over kind of the \nfuture of Erlang, Elixir, Gleam,   and the ecosystem as a whole?\nGood question. I have no clue.  ",
    "start": "1672720",
    "end": "1683040"
  },
  {
    "text": "My dream is just that, like, they become so \ninteroperable that I can write my libraries  ",
    "start": "1683040",
    "end": "1690000"
  },
  {
    "text": "in...some libraries in Elixir, some libraries in \nGleam, some libraries in Erlang, and they just   like all work together. That's my dream because, \nlike, I think people are gonna have preferences.  ",
    "start": "1690000",
    "end": "1698760"
  },
  {
    "text": "Erlang is a simpler language, for example, and I \nthink a bunch of...in that it has fewer features,  ",
    "start": "1698760",
    "end": "1704240"
  },
  {
    "text": "strictly speaking. Like, there's less feature \nsurface, so it's, like, simpler. Gleam has  ",
    "start": "1704240",
    "end": "1711600"
  },
  {
    "text": "completely different directories, like, you \nknow, the static type stuff, and I would like   to be able to choose which one I want to use \nfor different use cases. Like, I want to write,  ",
    "start": "1711600",
    "end": "1719480"
  },
  {
    "text": "I don't know, like a compression algorithm, like \nmaybe Gleam is nice because it lets me like do it,  ",
    "start": "1719480",
    "end": "1726080"
  },
  {
    "text": "like, have static types and check all this \nstuff. I need to write something related to,   I don't know, like mingling with protocol \nstuff. It's nice to have, like, static types. ",
    "start": "1726080",
    "end": "1736120"
  },
  {
    "text": "I want to write something that, like, is gonna \nbe complex and I want to write in Erlang to keep   the feature set simple. I wanna write something \nthat, you know, like, uses protocols. I want to  ",
    "start": "1736120",
    "end": "1744920"
  },
  {
    "text": "be able to use Elixir. So my dream would be to \nhave...and also to have a single communal. Like,  ",
    "start": "1744920",
    "end": "1750000"
  },
  {
    "text": "I wrote a bunch of drivers in Elixir, for example, \nCassandra already. So, like all this stuff,  ",
    "start": "1750000",
    "end": "1755160"
  },
  {
    "text": "I would love it if people could just use \nthem, you know? Because, like, the Cassandra   Absolutely. Absolutely. I \nthink interoperability is key. ",
    "start": "1755160",
    "end": "1763600"
  },
  {
    "text": "I hope, that's my hope.\nAnd I completely agree with you. From  ",
    "start": "1763600",
    "end": "1769160"
  },
  {
    "text": "my point of view, I'm seeing, kind of, Erlang, \nElixir, and other BEAM languages making their  ",
    "start": "1769160",
    "end": "1774720"
  },
  {
    "text": "way to edge networks, and even out on the IOT \ndevices. And that's for example, where I think,  ",
    "start": "1774720",
    "end": "1781280"
  },
  {
    "text": "you know, Gleam would take off for the simple \nreason it's statically typed and it makes the  ",
    "start": "1781280",
    "end": "1788440"
  },
  {
    "text": "language much more secure.\nYou can take off a bunch   of stuff from round time because\nExactly. You're reducing the surface of  ",
    "start": "1788440",
    "end": "1796320"
  },
  {
    "text": "attack and the external surface of attack. But \nthe great thing is that all of these languages  ",
    "start": "1796320",
    "end": "1802360"
  },
  {
    "text": "are interoperable and dependent on each other. \nI'm hoping they'll thrive and continue growing  ",
    "start": "1802360",
    "end": "1809559"
  },
  {
    "text": "together. Thanks, Andrea.\nThank you.",
    "start": "1809560",
    "end": "1825480"
  }
]