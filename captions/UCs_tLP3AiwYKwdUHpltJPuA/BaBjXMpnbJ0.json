[
  {
    "start": "0",
    "end": "45000"
  },
  {
    "text": "my name is crying on I have been an engineer at Goldman Sachs for about 10 years I've worked in a number of",
    "start": "0",
    "end": "5670"
  },
  {
    "text": "projects there JS collections has been kind of a side project of going for a",
    "start": "5670",
    "end": "10980"
  },
  {
    "text": "number of years today here's the agenda I'm going to talk about some of the",
    "start": "10980",
    "end": "17730"
  },
  {
    "text": "eight guys that were lost and now are found with Java 8 a little bit about the street is a pif in Java 8 and strings",
    "start": "17730",
    "end": "25949"
  },
  {
    "text": "are religious the tip of the iceberg there's a lot of features that we have in Jesus collections that we would also",
    "start": "25949",
    "end": "31470"
  },
  {
    "text": "like to see make it into this in turn my race or language so some of the iceberg",
    "start": "31470",
    "end": "37050"
  },
  {
    "text": "is AP is fluency memory efficiency and I have a short section about meth",
    "start": "37050",
    "end": "42270"
  },
  {
    "text": "references and a short career record person right so when is Gia's collections it is a consumer strong",
    "start": "42270",
    "end": "49649"
  },
  {
    "start": "45000",
    "end": "100000"
  },
  {
    "text": "collections burner developed internally for since 2004 we open sourced it in",
    "start": "49649",
    "end": "55530"
  },
  {
    "text": "January 2012 it's there I'm give up under the apache license and it is meant",
    "start": "55530",
    "end": "62699"
  },
  {
    "text": "to be either supplements to the drama collection much the same way that belies a supplement or it can be a complete",
    "start": "62699",
    "end": "69310"
  },
  {
    "text": "replacement for the Java collections printer so we have our own list sets and maps as well and the launch of other",
    "start": "69310",
    "end": "74799"
  },
  {
    "text": "things alone with the library itself we will desserts the training materials we call it the JS collections cod cod it's",
    "start": "74799",
    "end": "82149"
  },
  {
    "text": "set up as a series of unit tests which fell to have blanks which are terminals and you fill in the blanks so it's kind",
    "start": "82149",
    "end": "87700"
  },
  {
    "text": "of a fun way to learn JC collections and that's our second repository out there and get up and all of our new hires go",
    "start": "87700",
    "end": "93340"
  },
  {
    "text": "through it so we have over 1500 people open to the training and rising all",
    "start": "93340",
    "end": "100479"
  },
  {
    "start": "100000",
    "end": "175000"
  },
  {
    "text": "right so I need to take a trip down memory lane and I'm going to stop before was my manager gonna rob was the creator",
    "start": "100479",
    "end": "106240"
  },
  {
    "text": "of the framework and he is a small talk developer performer small tactical and",
    "start": "106240",
    "end": "111990"
  },
  {
    "text": "who hears work with small talk before you know how you can tell there's",
    "start": "111990",
    "end": "117789"
  },
  {
    "text": "someone's worked as small talk before it's it's not a trick tell you about",
    "start": "117789",
    "end": "123000"
  },
  {
    "text": "so here the iteration patterns that were in the small town collections from we",
    "start": "123000",
    "end": "128050"
  },
  {
    "text": "called the dr seuss api because it rhymes so I collect exact objected to and these are names are familiar with",
    "start": "128050",
    "end": "134709"
  },
  {
    "text": "like another going to dislike filtering map or transform but they're the same times that were used in many other",
    "start": "134709",
    "end": "140500"
  },
  {
    "text": "languages and when javab one came along and collections from Earth shortly",
    "start": "140500",
    "end": "146650"
  },
  {
    "text": "afterwards all of these patterns were missing and if you came from a small type of background it was it was",
    "start": "146650",
    "end": "152440"
  },
  {
    "text": "upsetting to see all the aeration parents are gone and in these two books book I came back they're separated by a",
    "start": "152440",
    "end": "159489"
  },
  {
    "text": "decade a full decade later the patterns the best practices are really just only focused on the containers and as late as",
    "start": "159489",
    "end": "167350"
  },
  {
    "text": "java 7 i'm atlas and said but all behaviors are more gone so geous",
    "start": "167350",
    "end": "173170"
  },
  {
    "text": "collections was really built around that idea but we you know an anticipated lambeth but we didn't have on business",
    "start": "173170",
    "end": "179620"
  },
  {
    "start": "175000",
    "end": "230000"
  },
  {
    "text": "already so on this slide a look inside you can see these small talk 85 ever",
    "start": "179620",
    "end": "185319"
  },
  {
    "text": "forever and in the middle column here's the code that we've been writing in java",
    "start": "185319",
    "end": "191200"
  },
  {
    "text": "through java 7 to achieve the same thing but with more lines of code and usually",
    "start": "191200",
    "end": "197350"
  },
  {
    "text": "the intent is buried on the inside of the loop on the right hand side we have gist collections it's a disposition",
    "start": "197350",
    "end": "205450"
  },
  {
    "text": "missions backwards compatible to java 5 italy repair shop but here we're using the java 8",
    "start": "205450",
    "end": "210580"
  },
  {
    "text": "use it with lambda seamlessly and syntax differences aside the retina left logo",
    "start": "210580",
    "end": "217210"
  },
  {
    "text": "must I found one tab at Harry's for the last two plans collect and injecting too we're actually using the new method",
    "start": "217210",
    "end": "223780"
  },
  {
    "text": "reference insects and I'll talk about more later we r who loveth references",
    "start": "223780",
    "end": "229620"
  },
  {
    "text": "one interesting thing about the streaming guy is that it is a user's lazy evaluation and for a lot of times",
    "start": "229980",
    "end": "237640"
  },
  {
    "start": "230000",
    "end": "297000"
  },
  {
    "text": "that's exactly what I'm if you're going to build up a complicated pipeline with competitions you want it to be lazy and",
    "start": "237640",
    "end": "244030"
  },
  {
    "text": "of course evaluation and when you don't want lazy evaluation if all you're going to do is one filterless a and then you",
    "start": "244030",
    "end": "250450"
  },
  {
    "text": "want record collection it's not ideal and in that case eager valuation can",
    "start": "250450",
    "end": "256239"
  },
  {
    "text": "lead to much more terse code so in JS collections we have both as lazy is the",
    "start": "256239",
    "end": "261640"
  },
  {
    "text": "equivalent of stream and so here you can see side-by-side they're pretty similar",
    "start": "261640",
    "end": "266860"
  },
  {
    "text": "they both indicate laziness through their return types so in stream if you",
    "start": "266860",
    "end": "272230"
  },
  {
    "text": "call method like filter which returns industry that indicates laziness as long as you're getting on the stream it has a",
    "start": "272230",
    "end": "278650"
  },
  {
    "text": "divorce attorney competition and similarly just collections we have",
    "start": "278650",
    "end": "283830"
  },
  {
    "text": "the other crimes like for example any satisfy me mash which returned sure",
    "start": "283830",
    "end": "289120"
  },
  {
    "text": "thing about a condition they return of billions of is moving in for that competition anymore that force its",
    "start": "289120",
    "end": "294880"
  },
  {
    "text": "evaluation when you do want eager evaluation like we want to collection",
    "start": "294880",
    "end": "301060"
  },
  {
    "start": "297000",
    "end": "384000"
  },
  {
    "text": "back because you're going to store it in the field then you have to jump through bummer and that is determining the",
    "start": "301060",
    "end": "307300"
  },
  {
    "text": "street using the operator called collect there's a name flesh there we have collected me something different but",
    "start": "307300",
    "end": "313780"
  },
  {
    "text": "collect takes a collector and in the three vehicles here for filter and from",
    "start": "313780",
    "end": "319090"
  },
  {
    "text": "now we're passing in the collector to list to terminate the stream so there's",
    "start": "319090",
    "end": "324550"
  },
  {
    "text": "two we call it like the bun and meet the blunt operations are the stream and the collector collect and then the mean",
    "start": "324550",
    "end": "331479"
  },
  {
    "text": "evaporation is alina if you want eager evaluation it's nicer than threat oh my",
    "start": "331479",
    "end": "337750"
  },
  {
    "text": "gosh but that was weird that we've been too difficult to do in job itself the",
    "start": "337750",
    "end": "342940"
  },
  {
    "text": "reason bolo blends difficult they would have interfere with people's libraries they cook the streams a guide a smooth",
    "start": "342940",
    "end": "351370"
  },
  {
    "text": "surface by adding one with it onto collections which is called stream and all new methods are there if it have put",
    "start": "351370",
    "end": "358090"
  },
  {
    "text": "a lot of methods like let's say they put group by for example right collection it could interfere with",
    "start": "358090",
    "end": "363720"
  },
  {
    "text": "anyone else because that's goodbye and that doesn't even accept any collections implementations like ours it could be in or as for example since provides a",
    "start": "363720",
    "end": "370470"
  },
  {
    "text": "concept for so it's it's very nice of",
    "start": "370470",
    "end": "375660"
  },
  {
    "text": "the streaming API has a low surface area but it does mean that sometimes the code gets a little bit longer as you see here",
    "start": "375660",
    "end": "383240"
  },
  {
    "text": "so we've seen a taste of Java extremes and you know it's been out for around a",
    "start": "383870",
    "end": "389010"
  },
  {
    "start": "384000",
    "end": "482000"
  },
  {
    "text": "year so if that's a tryout and my impression is that it is a great addition to core job it provides a lot",
    "start": "389010",
    "end": "396330"
  },
  {
    "text": "of these iteration tires which we have been missing for a long time and as the interesting design decision is lazy by",
    "start": "396330",
    "end": "402210"
  },
  {
    "text": "default but in a lot of cases that's what I want it also supports with serial and parallel iteration and again Martha",
    "start": "402210",
    "end": "410550"
  },
  {
    "text": "car alliteration there and it has some limited support for primitives as well",
    "start": "410550",
    "end": "416460"
  },
  {
    "text": "and if we have in-stream long stream and double stream and it's expensive there's",
    "start": "416460",
    "end": "423900"
  },
  {
    "text": "only a few minutes on stream but it's extensible through that collects pad wearing cussing collectors and we'll see",
    "start": "423900",
    "end": "429750"
  },
  {
    "text": "a little bit more of it but overall I would say that the streams that guy is really just the tip of the iceberg",
    "start": "429750",
    "end": "435690"
  },
  {
    "text": "there's so many more features that we want and kind of you know give me an angel on mild all these things are",
    "start": "435690",
    "end": "442110"
  },
  {
    "text": "features that are either ingeus collections or their collections libraries that are out there and I think it's important to",
    "start": "442110",
    "end": "448210"
  },
  {
    "text": "think about in future versions of Java how can we advance the same guy even further strings is a huge step for",
    "start": "448210",
    "end": "454690"
  },
  {
    "text": "forward but I'm thinking in terms of Java 10 what additional features should",
    "start": "454690",
    "end": "460960"
  },
  {
    "text": "make it into the core libraries Java nice feature set is pretty much that's recycled content islands here so as I go",
    "start": "460960",
    "end": "468400"
  },
  {
    "text": "through some of these features think about which ones would you really support being in the poor which are push",
    "start": "468400",
    "end": "475300"
  },
  {
    "text": "that we really know at this point are solid and really belong in the spec so",
    "start": "475300",
    "end": "482800"
  },
  {
    "start": "482000",
    "end": "559000"
  },
  {
    "text": "here's some of what is another lottery iceberg eager advantage i mentioned",
    "start": "482800",
    "end": "488520"
  },
  {
    "text": "covariant return types of the collections protocols what I mean here is that when you string every method",
    "start": "488520",
    "end": "494770"
  },
  {
    "text": "return the string not like a list stream our century you're responsible for keeping track of the uniqueness and",
    "start": "494770",
    "end": "501250"
  },
  {
    "text": "things like that look if there's an ordering in Iran there's no new collections as everything is new API new",
    "start": "501250",
    "end": "507520"
  },
  {
    "text": "methods new behaviors but the renewing of containers so we don't have bags full circle multisets there's no line apps or",
    "start": "507520",
    "end": "514690"
  },
  {
    "text": "multi nap see some of these they're very libraries because like ours set an appt",
    "start": "514690",
    "end": "521140"
  },
  {
    "text": "the hatchling dimetrodon memory fishing all sides of the problems with the orientation and there were only",
    "start": "521140",
    "end": "527700"
  },
  {
    "text": "minor changes to them so they still have performance problems there are primitive",
    "start": "527700",
    "end": "533280"
  },
  {
    "text": "streams but no new primitive containers so that means that you can avoid the",
    "start": "533280",
    "end": "539670"
  },
  {
    "text": "garbage of our boxing in the middle of a confrontation but at the end you still have to do something or less straight",
    "start": "539670",
    "end": "545250"
  },
  {
    "text": "streams are like iterators easier than once and then they're done so if you want to store it and use these",
    "start": "545250",
    "end": "550830"
  },
  {
    "text": "primitives that you've computed again you have to be something else other than user straight and there's no miracle",
    "start": "550830",
    "end": "556590"
  },
  {
    "text": "containers I also metrics here when I figure through all of them with the most",
    "start": "556590",
    "end": "562290"
  },
  {
    "start": "559000",
    "end": "626000"
  },
  {
    "text": "interesting one to me is the last one it's lines of code which is not the greatest metric in the world is what we",
    "start": "562290",
    "end": "568080"
  },
  {
    "text": "have and the interesting thing to me was that the string Takai added about 15,000 lines to for libraries which is an",
    "start": "568080",
    "end": "576810"
  },
  {
    "text": "incredible accomplishment there's a ton of new behavior in just fifteen thousand lines and cereal and curl and and it's",
    "start": "576810",
    "end": "583890"
  },
  {
    "text": "extensible so they've accomplished a lot of very few lines and got great could reduce by comparison JS collections is",
    "start": "583890",
    "end": "590370"
  },
  {
    "text": "quite big as warm as a dozen lines of and within that there's templates that generate the primitive collections the",
    "start": "590370",
    "end": "597640"
  },
  {
    "text": "reason is that an ollie printable lists for example are very similar so we generated from a single template and",
    "start": "597640",
    "end": "603250"
  },
  {
    "text": "even Biggers maps where we have ever created for the key in every primitive for the value so multiplies up and it",
    "start": "603250",
    "end": "609130"
  },
  {
    "text": "generates over a thousand million last more so it's quite a large library and I",
    "start": "609130",
    "end": "614170"
  },
  {
    "text": "don't think that all of his collections could ever get into the core libraries as why I'm very focused on finding which",
    "start": "614170",
    "end": "620650"
  },
  {
    "text": "are the most important parts ever they belong in the Jacob's gone through some",
    "start": "620650",
    "end": "627550"
  },
  {
    "text": "of the iteration patterns like filtering that and those are all streams but the ones that I've show them this slide are",
    "start": "627550",
    "end": "632860"
  },
  {
    "text": "pretty much it there's not a lot of iteration pattern string these other patterns that we've seen other languages",
    "start": "632860",
    "end": "638680"
  },
  {
    "text": "and libraries that you see up here you have to get them through collectors and I have a few code examples of collectors",
    "start": "638680",
    "end": "646020"
  },
  {
    "text": "collectors of our societal a class which we saw earlier by static utility I mean",
    "start": "646020",
    "end": "652420"
  },
  {
    "text": "it's a class that you don't instantiate you don't write new collectors use the factory method it's similar in a way the",
    "start": "652420",
    "end": "658690"
  },
  {
    "text": "collections class grateful sort you don't say sorry ingeus collections we discover a",
    "start": "658690",
    "end": "667990"
  },
  {
    "text": "long time ago the futility till date comes to learning the only way you know",
    "start": "667990",
    "end": "673360"
  },
  {
    "text": "about you static utility is by reading the horsing a presentation about it but it's not discoverable in your ID I new",
    "start": "673360",
    "end": "681490"
  },
  {
    "text": "method onto an existing interface is much more learnable because you just typed odd and you control space in your",
    "start": "681490",
    "end": "687250"
  },
  {
    "text": "any show your own methods that are available to you there's other advantages of writing on returning to",
    "start": "687250",
    "end": "693160"
  },
  {
    "text": "photoshop i'm going to go into its kind of others butts I agility is a little bit harder to find it started optimized",
    "start": "693160",
    "end": "699730"
  },
  {
    "text": "since the data doesn't live with the behavior it can be harder to read",
    "start": "699730",
    "end": "704980"
  },
  {
    "text": "whenever you come across the collect Power Move to read the collector before you understand what it's doing so it",
    "start": "704980",
    "end": "709990"
  },
  {
    "text": "doesn't read especially loved right that's an aesthetic daughter I want to go through the code examples you could",
    "start": "709990",
    "end": "715030"
  },
  {
    "text": "decide yourself away from career here's the first example here we are comparing",
    "start": "715030",
    "end": "721600"
  },
  {
    "start": "717000",
    "end": "782000"
  },
  {
    "text": "enjoying using streaming data versus mainstream inches collections so we're setting a list of things and we want to",
    "start": "721600",
    "end": "728890"
  },
  {
    "text": "convert each one to a string and have a comma-separated string since this isn't a pattern right on stream the next place",
    "start": "728890",
    "end": "735730"
  },
  {
    "text": "you look at some collectors and there is a collector called joining you created this way and the other thing you have to",
    "start": "735730",
    "end": "743290"
  },
  {
    "text": "do is first converted right onto a string to me that there's a conversation you got obviously if you're joining",
    "start": "743290",
    "end": "749560"
  },
  {
    "text": "you want to convert long string objects into strings so I would have turned this",
    "start": "749560",
    "end": "755030"
  },
  {
    "text": "into a different collector the collector that works on any outfit but it's not too bad you can tell what's going on in",
    "start": "755030",
    "end": "763070"
  },
  {
    "text": "JS collections to be a mythical main string directly out of collections so you can see that autocomplete would be easier here for example both of similar",
    "start": "763070",
    "end": "771140"
  },
  {
    "text": "options and that you can replace the you have options of note parameters a",
    "start": "771140",
    "end": "777710"
  },
  {
    "text": "separator or also starvation the second",
    "start": "777710",
    "end": "783770"
  },
  {
    "start": "782000",
    "end": "833000"
  },
  {
    "text": "example is similar except that we immediately terminate this industry we",
    "start": "783770",
    "end": "789200"
  },
  {
    "text": "call stream immediately terminated with but here what we're doing is we're taking a list of employees and we're",
    "start": "789200",
    "end": "795440"
  },
  {
    "text": "getting their salaries its own so again some is not a high- final string so you",
    "start": "795440",
    "end": "800750"
  },
  {
    "text": "go to local collectors find the swimming into collector and custom the function to get the seller JS collections are",
    "start": "800750",
    "end": "808490"
  },
  {
    "text": "give me a pattern fall right on all of our collections call some of it one other point here is the return type I",
    "start": "808490",
    "end": "814910"
  },
  {
    "text": "think that sewing integers are returning in Haines is mistaken it along and",
    "start": "814910",
    "end": "820940"
  },
  {
    "text": "that's what we have on JS collections this sort of thing is very hard to fix",
    "start": "820940",
    "end": "826880"
  },
  {
    "text": "outliers release so this might be a permanent the sum against collector will say now",
    "start": "826880",
    "end": "834530"
  },
  {
    "start": "833000",
    "end": "1035000"
  },
  {
    "text": "we're looking at a bit more complicated our urban body so here we're going to take the same collection of employees",
    "start": "834530",
    "end": "841190"
  },
  {
    "text": "and we want to group them by their department so we're going to get back structural or with your query for this",
    "start": "841190",
    "end": "846740"
  },
  {
    "text": "department and get all the employees in that apartment again create a string and immediately terminated with a collect",
    "start": "846740",
    "end": "852680"
  },
  {
    "text": "operator and we're building a collector similar to that we did before where",
    "start": "852680",
    "end": "858590"
  },
  {
    "text": "we're just passing the function that function gets the key for James collections freakin providers to pattern",
    "start": "858590",
    "end": "864920"
  },
  {
    "text": "right on the collection super just call it directly and the other interesting difference here's the return types like",
    "start": "864920",
    "end": "870980"
  },
  {
    "text": "I mentioned before job I need to not get multi maps and so grouping by eyes can",
    "start": "870980",
    "end": "876950"
  },
  {
    "text": "return on map where the values are lists that means you have to deal with the",
    "start": "876950",
    "end": "882620"
  },
  {
    "text": "fact that you might have known watching the other problem with this in my opinion is that I didn't say that",
    "start": "882620",
    "end": "888480"
  },
  {
    "text": "employees it's a list I could have been a set in that case after grouping the",
    "start": "888480",
    "end": "893550"
  },
  {
    "text": "employees there's the groups are still going to be unique and they're in a random order they're still going to be",
    "start": "893550",
    "end": "898950"
  },
  {
    "text": "in around pseudo random order and so in that case I would walk back amount of sets of employees to indicate that",
    "start": "898950",
    "end": "905399"
  },
  {
    "text": "they're silly any kind of harm but that's not how grouping by works we have one time as soon as you hopped into the",
    "start": "905399",
    "end": "911399"
  },
  {
    "text": "string API you lose some of the compilot of information ingest collection since",
    "start": "911399",
    "end": "918300"
  },
  {
    "text": "it's a returns that on an interface we can have full covariant between types and multi neither is the most generic if",
    "start": "918300",
    "end": "924959"
  },
  {
    "text": "employees were a mutable set I would get that immutable 70 and we had all sorts",
    "start": "924959",
    "end": "930330"
  },
  {
    "text": "of multi knives this pattern is its",
    "start": "930330",
    "end": "936630"
  },
  {
    "text": "aggregation so it's even more complicated and goodbye we start out the same way we want to group the invoice by their department but now instead of a",
    "start": "936630",
    "end": "943080"
  },
  {
    "text": "list of employees I'm doing this second aggregation I talked about before someone i'm going to send their salaries within each requirement so i'm still",
    "start": "943080",
    "end": "949860"
  },
  {
    "text": "going to get back on that like structure not multi-month though because I've aggregated something about all the",
    "start": "949860",
    "end": "955380"
  },
  {
    "text": "employees again I have stream that I can we terminate and now the grouping but i",
    "start": "955380",
    "end": "961050"
  },
  {
    "text": "still use a grouping by collector but it's an override it's not the same one before we start with the first parameter",
    "start": "961050",
    "end": "966149"
  },
  {
    "text": "at the sandwich is to get department function and now I passing a second lecture so I have a collector",
    "start": "966149",
    "end": "971900"
  },
  {
    "text": "collector so these collectors as you can see they can build up NASA can become",
    "start": "971900",
    "end": "977360"
  },
  {
    "text": "quite complicated and you can build really a very functional Attica on the",
    "start": "977360",
    "end": "983570"
  },
  {
    "text": "other hand this one might not be the most intuitive I think it's a little bit",
    "start": "983570",
    "end": "989060"
  },
  {
    "text": "harder to learn how to do this ingeus collections we're still doing",
    "start": "989060",
    "end": "994820"
  },
  {
    "text": "aggregations with still gonna be more complex pattern but at least some my aunt is a method right on container and",
    "start": "994820",
    "end": "1001090"
  },
  {
    "text": "you can see it shot out separately and you can see that that it takes two functions also will give returns an",
    "start": "1001090",
    "end": "1008470"
  },
  {
    "text": "object long nap which is one of our primitive collections so the lungs are not Autobots internally they are",
    "start": "1008470",
    "end": "1014290"
  },
  {
    "text": "primitives and the same problem int vs long for a song that i mentioned before",
    "start": "1014290",
    "end": "1020980"
  },
  {
    "text": "applies here since it is someone into collector is embedded here we get back on map of wraps integer obvious when",
    "start": "1020980",
    "end": "1029079"
  },
  {
    "text": "wheezing streams it where I really want unwrapped blonds my final code example",
    "start": "1029080",
    "end": "1036939"
  },
  {
    "start": "1035000",
    "end": "1098000"
  },
  {
    "text": "is parts of the partition tire so here we have a collection of students and Mr",
    "start": "1036940",
    "end": "1042100"
  },
  {
    "text": "Justice separate out the passing and failing ones based on some freshman so the function is the same for both and",
    "start": "1042100",
    "end": "1049110"
  },
  {
    "text": "the most interesting difference here is that return types with streams I get back in now where I'm going to have the",
    "start": "1049110",
    "end": "1056740"
  },
  {
    "text": "two boolean operators keys and the values will be again lists of students it doesn't matter if I started with a",
    "start": "1056740",
    "end": "1062410"
  },
  {
    "text": "set of students after calling stream I'm going to get back on that book lists again for JS collections we have",
    "start": "1062410",
    "end": "1068410"
  },
  {
    "text": "specific Kovarian are two types so in this case students was a list after partitioning I get back a partition list",
    "start": "1068410",
    "end": "1074410"
  },
  {
    "text": "which is our own type that has methods to get the selected rejected items and we will maintain a work so if everyone",
    "start": "1074410",
    "end": "1082900"
  },
  {
    "text": "passed I went up with a list in the same water in the selected students any",
    "start": "1082900",
    "end": "1092530"
  },
  {
    "text": "questions on these codes it was before",
    "start": "1092530",
    "end": "1096180"
  },
  {
    "start": "1098000",
    "end": "1220000"
  },
  {
    "text": "how do they stack up we took a screenshot of the stack traces intelligent and all we did to get these",
    "start": "1098460",
    "end": "1104280"
  },
  {
    "text": "was put break points inside the lambda that we're using on the last example partitioning and there's some",
    "start": "1104280",
    "end": "1112080"
  },
  {
    "text": "interesting things that you can finally the stat tricks on the left hand side we",
    "start": "1112080",
    "end": "1117150"
  },
  {
    "text": "have the stream spectryx and at the bottom is our test at the top is the liner so just reading up from the bottom",
    "start": "1117150",
    "end": "1123660"
  },
  {
    "text": "we're immediately terminating with collect so a lot of the stack trace is going to be the same for everything using a collector because good to",
    "start": "1123660",
    "end": "1130080"
  },
  {
    "text": "collect evaluate I didn't start with a cargo stream to stream stream so that actually is it evaluates a question we",
    "start": "1130080",
    "end": "1137250"
  },
  {
    "text": "rappin copy to copy to and fruit remaining twice and exhausted all of that is the same for all the patterns",
    "start": "1137250",
    "end": "1143310"
  },
  {
    "text": "because they're all just using clouds after that we're stepping into the exception if it of the lambda and lambda",
    "start": "1143310",
    "end": "1149760"
  },
  {
    "text": "was actually built from the collector so that's restarts immediate and you can",
    "start": "1149760",
    "end": "1155580"
  },
  {
    "text": "actually see the line that's a partitioning it's kind of abandonment if",
    "start": "1155580",
    "end": "1160980"
  },
  {
    "text": "you want to stuff like this which I did because I really want to learn the streams API and set out its lover to",
    "start": "1160980",
    "end": "1167730"
  },
  {
    "text": "step through when you're just looking for West collection but it is understandable the",
    "start": "1167730",
    "end": "1175440"
  },
  {
    "text": "gist collection spectryx is a lot to do with partition in this case and it's",
    "start": "1175440",
    "end": "1181559"
  },
  {
    "text": "because of the fact that it's just a fact oriented as a method on every collection so here after the tests are",
    "start": "1181559",
    "end": "1187110"
  },
  {
    "text": "separate into a partition on abstract list that we share and from there it goes into our house that utility that",
    "start": "1187110",
    "end": "1193169"
  },
  {
    "text": "actually performs the partition on a random access list and mr no mana so",
    "start": "1193169",
    "end": "1198360"
  },
  {
    "text": "this actress is a little bit easier to understand but this is sort of it comes out of the fact that we have more code",
    "start": "1198360",
    "end": "1205590"
  },
  {
    "text": "you know we've written partition for every type differently where strings that she's better code sharing but we",
    "start": "1205590",
    "end": "1213840"
  },
  {
    "text": "have basically the station stack trace for everything",
    "start": "1213840",
    "end": "1218000"
  },
  {
    "start": "1220000",
    "end": "1304000"
  },
  {
    "text": "so I sure the cultural examples that show the differences in the API you're going to feel free difference in fluency",
    "start": "1220679",
    "end": "1226289"
  },
  {
    "text": "too but I have some code examples that I might show that really emphasize fluency for this example I'm going to use the",
    "start": "1226289",
    "end": "1233159"
  },
  {
    "text": "anagram tutorial which is part of the Oracle documentation it was written",
    "start": "1233159",
    "end": "1238200"
  },
  {
    "text": "around the time with Java file and it hasn't been updated it still shows a Java 510 pounds so users generics but",
    "start": "1238200",
    "end": "1244529"
  },
  {
    "text": "not James and I'm not going to show the old Java file solution you can just find",
    "start": "1244529",
    "end": "1250559"
  },
  {
    "text": "it online but we updated it as best we could to use streams and our own yet",
    "start": "1250559",
    "end": "1256679"
  },
  {
    "text": "they actually Oliver them is to start with all the words in the dictionary for",
    "start": "1256679",
    "end": "1261869"
  },
  {
    "text": "each word compute its alpha Brown alpha room is just the sort of letters so to",
    "start": "1261869",
    "end": "1267509"
  },
  {
    "text": "hannah grams will have a same calendar so in this example we have alerts and stellar a new circuit letters it's the",
    "start": "1267509",
    "end": "1273629"
  },
  {
    "text": "same key so that becomes the key in the map all the anagrams become the value of",
    "start": "1273629",
    "end": "1278700"
  },
  {
    "text": "one collection of noise after grouping them all we filter building the groups",
    "start": "1278700",
    "end": "1285509"
  },
  {
    "text": "that have a threshold so it's at least eight patterns then sort descending and",
    "start": "1285509",
    "end": "1290970"
  },
  {
    "text": "print them a lot starting with the most so here the most entrance is loving and",
    "start": "1290970",
    "end": "1296519"
  },
  {
    "text": "you see the whole prep anonymous wrong so we rewrote the tutorial using streams",
    "start": "1296519",
    "end": "1302909"
  },
  {
    "text": "and this is the solution that we came up with if you can do them better than us i would like to see it we start with i",
    "start": "1302909",
    "end": "1309629"
  },
  {
    "start": "1304000",
    "end": "1366000"
  },
  {
    "text": "getting the words which is just a collection and we need to opt in Simple Touch stream then we collect",
    "start": "1309629",
    "end": "1316460"
  },
  {
    "text": "using a grouping like lecture we saw before so that gives us back a simulated multi-member but if you remember it's an",
    "start": "1316460",
    "end": "1321890"
  },
  {
    "text": "app with lists as values since we're only after grouping by the key we're not",
    "start": "1321890",
    "end": "1327830"
  },
  {
    "text": "interested in bikini morning we only care about those collections of diagrams so we use the values that's an old",
    "start": "1327830",
    "end": "1333290"
  },
  {
    "text": "method it's been a map forever and that means it returns a collection not straight right dollars gives you data",
    "start": "1333290",
    "end": "1339050"
  },
  {
    "text": "collection so now we continue fluently calling more methods you have to call",
    "start": "1339050",
    "end": "1344780"
  },
  {
    "text": "streaming the second time to get back into the stream avi and then we can do the rest of the audit we filter we call",
    "start": "1344780",
    "end": "1351170"
  },
  {
    "text": "sorted and the interesting thing or Christmas orders are using company compared with us to use of primitive",
    "start": "1351170",
    "end": "1356840"
  },
  {
    "text": "comparator so I'm going to auto blasting their map each to a string and then",
    "start": "1356840",
    "end": "1362720"
  },
  {
    "text": "finally print it up in real life I probably wouldn't do it this fluently",
    "start": "1362720",
    "end": "1369560"
  },
  {
    "start": "1366000",
    "end": "1522000"
  },
  {
    "text": "without any intermediate herbs but you know I'm just trying to point your mouth fluency for JS collections is slightly",
    "start": "1369560",
    "end": "1377000"
  },
  {
    "text": "shorter because we don't have to call strength two times but that is the main difference but i think that the",
    "start": "1377000",
    "end": "1382970"
  },
  {
    "text": "intermediate return types if i did a sexy two variables are interesting so much a walker than here so as i",
    "start": "1382970",
    "end": "1388820"
  },
  {
    "text": "mentioned before a group i gives you back and perennial tina and it's specific to the technical side so words",
    "start": "1388820",
    "end": "1394460"
  },
  {
    "text": "is a example so I get back immutable is multi map where the key is my alpha grams head",
    "start": "1394460",
    "end": "1400230"
  },
  {
    "text": "and the value the value from your strings once you have the multi luck we",
    "start": "1400230",
    "end": "1406320"
  },
  {
    "text": "have the use of the keys values key value pairs the one I'm on here is multi-valued view and this is the",
    "start": "1406320",
    "end": "1413940"
  },
  {
    "text": "collection collection sits a similar amount in this case and here we run into",
    "start": "1413940",
    "end": "1419160"
  },
  {
    "text": "a limitation of the Java type system it's kind of a curiously in that you don't run too frequently but generics",
    "start": "1419160",
    "end": "1425130"
  },
  {
    "text": "and jela are inherent and so that means that even though I know the inner type here i have a list of lists basically",
    "start": "1425130",
    "end": "1432300"
  },
  {
    "text": "they in turn i'm actually not right that it's list so roughing it is but i just can't express that a java step system so",
    "start": "1432300",
    "end": "1438780"
  },
  {
    "text": "i have to say it's an internal variables and richard or rulers just our top of our higher it's the arrow 2 plus all",
    "start": "1438780",
    "end": "1445800"
  },
  {
    "text": "these iterations episode of the scene next time control select is filtering it",
    "start": "1445800",
    "end": "1451740"
  },
  {
    "text": "down based on the size mushroom and that the filtering never changes that the tightest so I've still got Richard your",
    "start": "1451740",
    "end": "1457020"
  },
  {
    "text": "little perch intervals here I'm sorting by size and I really just wanted to show",
    "start": "1457020",
    "end": "1462990"
  },
  {
    "text": "off it to start a list by but this does sorted in ascending order",
    "start": "1462990",
    "end": "1468580"
  },
  {
    "text": "on a descending so I now need to reverse it and i'll use it as reverse method we",
    "start": "1468580",
    "end": "1474520"
  },
  {
    "text": "thought all this name information or anything that says as it is going to return a rapid object and anything in such a constant time or lazy operation",
    "start": "1474520",
    "end": "1481720"
  },
  {
    "text": "anything that has two in the name is a linear operation does the full operation to fully automation so as reversed is",
    "start": "1481720",
    "end": "1488740"
  },
  {
    "text": "one of the ways you can opt into our lazy okay so here we go back lazier lazy",
    "start": "1488740",
    "end": "1494290"
  },
  {
    "text": "interval of Richard rebels and we still know those rich intervals are lists next",
    "start": "1494290",
    "end": "1499750"
  },
  {
    "text": "I'm going to collect and this is our collective a strange plant so this games",
    "start": "1499750",
    "end": "1505180"
  },
  {
    "text": "map I'm not vacationing to string and so Ivana battering the inner collection for",
    "start": "1505180",
    "end": "1511870"
  },
  {
    "text": "lists because I can do that on a meter interval and finally I print out using each all right that's a four different",
    "start": "1511870",
    "end": "1520630"
  },
  {
    "text": "texture a note on the lazy evaluation one of the cool things about streams is",
    "start": "1520630",
    "end": "1526120"
  },
  {
    "start": "1522000",
    "end": "1613000"
  },
  {
    "text": "that you can just replace the method stream with parallel stream and adopted into parallel valuation that's that's",
    "start": "1526120",
    "end": "1531490"
  },
  {
    "text": "really cool it's not a separate thing to learn seems I think in fact it's the same return type extreme doing have a",
    "start": "1531490",
    "end": "1537640"
  },
  {
    "text": "separate interface called parish and that's good that it's a smaller guy",
    "start": "1537640",
    "end": "1542740"
  },
  {
    "text": "easier to learn but it means that you have to keep track yourself that this thing it will execute a perm that the",
    "start": "1542740",
    "end": "1549250"
  },
  {
    "text": "land is you passing has to be stateless or pure functional for JS collections we",
    "start": "1549250",
    "end": "1555670"
  },
  {
    "text": "also have a car loan lazy API you opt into it with the ass and it doesn't default things for either",
    "start": "1555670",
    "end": "1561140"
  },
  {
    "text": "the fragrance so you passing your executor in your batch size and then the important thing here is the return type",
    "start": "1561140",
    "end": "1567620"
  },
  {
    "text": "we have a specific return type it's a perilous terrible see you know that even after collecting in this case each",
    "start": "1567620",
    "end": "1574460"
  },
  {
    "text": "person's address I still have a car almost there it still hasn't evaluated because I nope it from the return type",
    "start": "1574460",
    "end": "1580130"
  },
  {
    "text": "it's lazy but I know that when it does evaluate I will still have something in work still is like in this talk I'm",
    "start": "1580130",
    "end": "1589400"
  },
  {
    "text": "really focusing on API and I'm not I don't have time to get into performance but I've given a talk at Q browser um",
    "start": "1589400",
    "end": "1596470"
  },
  {
    "text": "folks solely focused on paralyzing the firm's and so the video is aligning with you and I go into the performance of GS",
    "start": "1596470",
    "end": "1604730"
  },
  {
    "text": "collections extremes of course and scholar our collections as well as you can check out that video if you're interested in performance",
    "start": "1604730",
    "end": "1612640"
  },
  {
    "start": "1613000",
    "end": "1685000"
  },
  {
    "text": "next I have a new on memory efficiency so I have this church on memory usage of",
    "start": "1613870",
    "end": "1619870"
  },
  {
    "text": "maps and on the x-axis I have the size of the collection up to millions and on",
    "start": "1619870",
    "end": "1625390"
  },
  {
    "text": "the y-axis I have megabytes the top and oranges the job hashtag failures I have",
    "start": "1625390",
    "end": "1632110"
  },
  {
    "text": "two convenient mask our own which is called univ I'm at Aunt Rose as well and they have different growth strategies",
    "start": "1632110",
    "end": "1638340"
  },
  {
    "text": "the ones for so hash map and Arlene finally have this Pilar they grow with a",
    "start": "1638340",
    "end": "1644830"
  },
  {
    "text": "slow slow that's when you're getting new collisions they both use chaining so that occlusions go into a linked list of",
    "start": "1644830",
    "end": "1651820"
  },
  {
    "text": "collisions you know that slowest Lopez the collisions grow and then there's a shark so when we double O king sized",
    "start": "1651820",
    "end": "1656980"
  },
  {
    "text": "correctly trillions is a different strategy it uses open addressing so",
    "start": "1656980",
    "end": "1662559"
  },
  {
    "text": "collisions go right into the array using program and so that you know this flat line as collisions are being added and",
    "start": "1662559",
    "end": "1669190"
  },
  {
    "text": "then a doubling in size of realism so even though the freaking size the group",
    "start": "1669190",
    "end": "1674350"
  },
  {
    "text": "is different if you take it to the limit you see that javascript is using on average twice the ramp the other two so",
    "start": "1674350",
    "end": "1681280"
  },
  {
    "text": "why is it going there's a very well hash map is built on",
    "start": "1681280",
    "end": "1686830"
  },
  {
    "start": "1685000",
    "end": "1778000"
  },
  {
    "text": "top of the table of entry objects an entry is an interesting class it holds the key in the value of course it also",
    "start": "1686830",
    "end": "1692830"
  },
  {
    "text": "holds a next pointer that forms the linked list of collisions so if there are no collisions next is written all it",
    "start": "1692830",
    "end": "1699690"
  },
  {
    "text": "also catches the hash code which is an interesting time memory trade-off obviously it uses memory to cash it but",
    "start": "1699690",
    "end": "1707860"
  },
  {
    "text": "every once in a while while you're growing in hash map it has to double its size and pretensioners which is pretty",
    "start": "1707860",
    "end": "1713110"
  },
  {
    "text": "much the most expensive operation can do on a hashmap and so casual enough about greatly reduces I cost in terms of",
    "start": "1713110",
    "end": "1720640"
  },
  {
    "text": "memory at least it's much better to do away with entries completely that's what we've done in unified map we just have a",
    "start": "1720640",
    "end": "1727480"
  },
  {
    "text": "double size array where we alternate key values in that array directly when there",
    "start": "1727480",
    "end": "1733240"
  },
  {
    "text": "are two collisions are marked in bucket we replace the key with a sentinel indicating that the solutions and value",
    "start": "1733240",
    "end": "1738910"
  },
  {
    "text": "with an array which is similar it has key values alternating this strategy uses half a memory on average but if the",
    "start": "1738910",
    "end": "1747250"
  },
  {
    "text": "watch out for this one method in Teresa and she said is none of those leaky abstractions it as soon as that you are",
    "start": "1747250",
    "end": "1753280"
  },
  {
    "text": "facing your mountain on a table entries and if you have that table you can just return it but if not you have to create",
    "start": "1753280",
    "end": "1760000"
  },
  {
    "text": "them on banana so it turns entry set from a constant time operation to linear operation for us it is much better to",
    "start": "1760000",
    "end": "1766480"
  },
  {
    "text": "just use our method for each key value which takes a lambda that expects a few",
    "start": "1766480",
    "end": "1773680"
  },
  {
    "text": "or anything last night to an entry on guys the picture for sets is even worse",
    "start": "1773680",
    "end": "1781740"
  },
  {
    "start": "1778000",
    "end": "1813000"
  },
  {
    "text": "hash set uses four times the memory that it means do on average the reason is",
    "start": "1781740",
    "end": "1789730"
  },
  {
    "text": "that hash set is bath high fashion which is a good strategy for reducing code but",
    "start": "1789730",
    "end": "1796150"
  },
  {
    "text": "it's not so efficient everything I said about a tree is still applies and in addition within each entry the key is",
    "start": "1796150",
    "end": "1802570"
  },
  {
    "text": "used in the values not use so the buildings are pure waste of memory multiplying the doubling for both we get",
    "start": "1802570",
    "end": "1809320"
  },
  {
    "text": "a four times memory based on average this picture just shows the headers and",
    "start": "1809320",
    "end": "1816010"
  },
  {
    "start": "1813000",
    "end": "1867000"
  },
  {
    "text": "stuff on each entry operator and if you do the math that it comes out to that this is a map says the two times memory",
    "start": "1816010",
    "end": "1822880"
  },
  {
    "text": "waste that I mentioned now there's little point to make about the memory",
    "start": "1822880",
    "end": "1828640"
  },
  {
    "text": "waste it's that these types not only really not replaced in Java 8 or",
    "start": "1828640",
    "end": "1834060"
  },
  {
    "text": "improved but if you want to build on top of them if you want these other collections that I've mentioned like",
    "start": "1834060",
    "end": "1841980"
  },
  {
    "text": "bags multinational vimax you need to build on top of mass so these features",
    "start": "1841980",
    "end": "1848830"
  },
  {
    "text": "as well but since they target being a supplement to job they didn't do anything to replace a front menasha so",
    "start": "1848830",
    "end": "1855760"
  },
  {
    "text": "their little teen ops have a very severe API and is very nice API but they have",
    "start": "1855760",
    "end": "1860950"
  },
  {
    "text": "the same memory problems as the jdk",
    "start": "1860950",
    "end": "1864630"
  },
  {
    "text": "when we r memory is primitive collections I hinted at this before I",
    "start": "1866870",
    "end": "1872040"
  },
  {
    "start": "1867000",
    "end": "1891000"
  },
  {
    "text": "mean this journalism totally fair because I'm comparing an ArrayList of crap arrives with a printed list for a",
    "start": "1872040",
    "end": "1877350"
  },
  {
    "text": "new trailer for JS collections and of course it wouldn't want to wrap initiative with it up at all costs but",
    "start": "1877350",
    "end": "1883559"
  },
  {
    "text": "think about where your choices are if you're using strings you do have these primitive strings now but like I said",
    "start": "1883559",
    "end": "1889559"
  },
  {
    "text": "before there they're like iterators you use them once they've done so we're not appropriate to the store in a field",
    "start": "1889559",
    "end": "1894840"
  },
  {
    "start": "1891000",
    "end": "1964000"
  },
  {
    "text": "what's that if it's in a field you're going to want to access the little x or you're not going to know how long my",
    "start": "1894840",
    "end": "1900179"
  },
  {
    "text": "lips so if you do this competition and use during their strings in the middle and you want to store them not to",
    "start": "1900179",
    "end": "1906299"
  },
  {
    "text": "terminate it was collecting you have two choices were there for what you can do you can terminate an improved if array",
    "start": "1906299",
    "end": "1911520"
  },
  {
    "text": "and that's what I think most people would shoot us because it's obviously memory efficient or you can create it by",
    "start": "1911520",
    "end": "1919130"
  },
  {
    "text": "boxing objects and then you have box the litter box that I think most people",
    "start": "1919130",
    "end": "1925620"
  },
  {
    "text": "would opt for the premium of the rain but then you're losing a little semantic information even know if there's duplicates in area",
    "start": "1925620",
    "end": "1931730"
  },
  {
    "text": "you don't know how solicitor so so I like the pre- strings are huge step for",
    "start": "1931730",
    "end": "1937590"
  },
  {
    "text": "but i looked at supreme of collections as well the problem is how far we'll take it I Queens have all eight",
    "start": "1937590",
    "end": "1942720"
  },
  {
    "text": "primitives for lists and all 64 for maps even more cuz object eternity reveal",
    "start": "1942720",
    "end": "1948180"
  },
  {
    "text": "yourself and that's too much code I'm entering the code generation I don't think all about could make it into the",
    "start": "1948180",
    "end": "1954240"
  },
  {
    "text": "JK itself is just too too many methods so we need to pare it down the strategy of using just the three employ a double",
    "start": "1954240",
    "end": "1961110"
  },
  {
    "text": "like a nice compromise I have a section",
    "start": "1961110",
    "end": "1966150"
  },
  {
    "start": "1964000",
    "end": "2259000"
  },
  {
    "text": "on method references we love method references they are really cool I",
    "start": "1966150",
    "end": "1971220"
  },
  {
    "text": "haven't seen a future like this and other languages that I've used even once that happens when in Java 8 came out we",
    "start": "1971220",
    "end": "1977070"
  },
  {
    "text": "wanted to play with the new features and so we just used our training materials and kind of operating them to jogging we",
    "start": "1977070",
    "end": "1982170"
  },
  {
    "text": "saw what we could do with new features and one of the brilliant things about the implementation language is that they just compile these functional interfaces",
    "start": "1982170",
    "end": "1988920"
  },
  {
    "text": "that we've always used like comparator and so it works with our types too like I said the juice collections we comply",
    "start": "1988920",
    "end": "1994920"
  },
  {
    "text": "luggage up to five but it works love with each other hate features so one of",
    "start": "1994920",
    "end": "2000470"
  },
  {
    "text": "our exercises that you see here we start with your sort of customers which is when I collect their cities and",
    "start": "2000470",
    "end": "2006600"
  },
  {
    "text": "that one translated very naturally they used to have an anonymous near class of function we just in fact the ID will",
    "start": "2006600",
    "end": "2014220"
  },
  {
    "text": "auto and intelligence and ice autofix just replaces it with method reference",
    "start": "2014220",
    "end": "2019350"
  },
  {
    "text": "or alive so here just replaced it for us with customer at City and the head reference other ones didn't naturally",
    "start": "2019350",
    "end": "2026460"
  },
  {
    "text": "convert into method reference so in this second example we have the list of customers and we want to filter only",
    "start": "2026460",
    "end": "2033539"
  },
  {
    "text": "those that are from London and so that becomes is landed here which is still a lot nicer than Thomas in your class I",
    "start": "2033539",
    "end": "2038820"
  },
  {
    "text": "think got us thinking like why is this one not as a reference could we use a method reference here and you can kind",
    "start": "2038820",
    "end": "2044220"
  },
  {
    "text": "of force it with the so you're right a method lives in London that's the right",
    "start": "2044220",
    "end": "2050820"
  },
  {
    "text": "shape so you can do it but of course no one writes methods like this because it's not abstract or you can coded the",
    "start": "2050820",
    "end": "2056128"
  },
  {
    "text": "city right right in a method that doesn't make sense in a real code but",
    "start": "2056129",
    "end": "2061679"
  },
  {
    "text": "it's interesting like we have to confirms this shape when we saw this week it reminded us of a problem that we",
    "start": "2061679",
    "end": "2066780"
  },
  {
    "text": "had in Korea Java 8 days keep in mind we been using these functional planets forever a reason our own function in",
    "start": "2066780",
    "end": "2072658"
  },
  {
    "text": "around predicate so we would always be instantiating the multiplex and they're usually stateless objects so going back",
    "start": "2072659",
    "end": "2078540"
  },
  {
    "text": "to the example of customers that are collecting your cities here's what we would do in realistic production code",
    "start": "2078540",
    "end": "2084570"
  },
  {
    "text": "where we've had functions that we've ever used we have this function that goes from a customer no city we were",
    "start": "2084570",
    "end": "2090929"
  },
  {
    "text": "turning into a constant because this function it's an anonymous inner class",
    "start": "2090929",
    "end": "2096270"
  },
  {
    "text": "it's very small but it's still an object that lives on he's still instantiated with you it's still gets garbage",
    "start": "2096270",
    "end": "2101460"
  },
  {
    "text": "collected and so if you're going to use it which is very close singing higher music gets used by",
    "start": "2101460",
    "end": "2107359"
  },
  {
    "text": "collective group i publish brothers we were just stuffing and our coding conventions would be filled a function",
    "start": "2107359",
    "end": "2114200"
  },
  {
    "text": "from custom ernest ranglin lives put it on the customer class as a constant",
    "start": "2114200",
    "end": "2119440"
  },
  {
    "text": "naman by what is going to go to city and we were already doing this for years and",
    "start": "2119440",
    "end": "2124609"
  },
  {
    "text": "the interesting thing is that this code raised in customer to city looks remarkably like method references and it",
    "start": "2124609",
    "end": "2131059"
  },
  {
    "text": "was a trick we've been doing just to avoid other publication now the second",
    "start": "2131059",
    "end": "2137390"
  },
  {
    "text": "example with the filtering we can run into the same example the same exact",
    "start": "2137390",
    "end": "2142849"
  },
  {
    "text": "problem when trying to reduce garbage creation here we want to filter the",
    "start": "2142849",
    "end": "2148309"
  },
  {
    "text": "customer by some city and up here at embed in london is a constant but you have to imagine that one is a variable",
    "start": "2148309",
    "end": "2154730"
  },
  {
    "text": "or grammar and this is going to close over it in terms of the bytecode the",
    "start": "2154730",
    "end": "2160940"
  },
  {
    "text": "predator had a hanging feel for that that's in it in this case you can't just extract the predicate is a constant",
    "start": "2160940",
    "end": "2167540"
  },
  {
    "text": "because it has to close over city and it's different for each city's different instance and when we were in two",
    "start": "2167540",
    "end": "2173710"
  },
  {
    "text": "examples like this in loops we really had a garbage creation problem some of our most perform associative apps and so",
    "start": "2173710",
    "end": "2180079"
  },
  {
    "text": "we actually came over the second time address this and we call it our witnesses because its name slept with",
    "start": "2180079",
    "end": "2185369"
  },
  {
    "text": "collect with etcetera instead of taking a predicate it takes our credit to type",
    "start": "2185369",
    "end": "2190410"
  },
  {
    "text": "which takes the object t plus an arbitrary manner which in this case is that City of London and so now the",
    "start": "2190410",
    "end": "2197520"
  },
  {
    "text": "predicate is stateless but it takes two arguments and so we can start as a constant it's called lips in which is",
    "start": "2197520",
    "end": "2203820"
  },
  {
    "text": "simple because that matches the method that it delegates do and instead of",
    "start": "2203820",
    "end": "2209609"
  },
  {
    "text": "select I call select with lives in London doesn't creating a garbage this",
    "start": "2209609",
    "end": "2214710"
  },
  {
    "text": "is a trick that we've been using java file for java 7 now these methods just",
    "start": "2214710",
    "end": "2220410"
  },
  {
    "text": "happen to work perfectly with method references in the place we're going to use that constant is tell lizzie and the",
    "start": "2220410",
    "end": "2228150"
  },
  {
    "text": "bytecode for this stuff can be complicated it doesn't actually create an announced in your class but you can",
    "start": "2228150",
    "end": "2235500"
  },
  {
    "text": "presume that this sort of pattern would perform dead and the java 7 code so this",
    "start": "2235500",
    "end": "2241619"
  },
  {
    "text": "increases the number of places we can use method references and we really love our syntax so this is kind of exciting so i would like to c times like this on",
    "start": "2241619",
    "end": "2248849"
  },
  {
    "text": "streams as well filter and filter with the name isn't important to use that with the naming convention",
    "start": "2248849",
    "end": "2254979"
  },
  {
    "text": "but the idea i think is important all",
    "start": "2254979",
    "end": "2260170"
  },
  {
    "start": "2259000",
    "end": "2327000"
  },
  {
    "text": "right i have this framework comparison and i'm not going to go for every cell here but the important point about this",
    "start": "2260170",
    "end": "2268299"
  },
  {
    "text": "the feature matrix here is that these features stack on top of each other it's more than some of its parts so i",
    "start": "2268299",
    "end": "2276269"
  },
  {
    "text": "mentioned for example one of the cells here except you have optimized sets and maps when we built our by maps multi",
    "start": "2276269",
    "end": "2282759"
  },
  {
    "text": "maps and Babs we built on top of our optimized containers when we when we did",
    "start": "2282759",
    "end": "2292059"
  },
  {
    "text": "apparel el evaluation as well serial evaluation it's on our interfaces it's not free collectors for example so we",
    "start": "2292059",
    "end": "2298749"
  },
  {
    "text": "wound up with every choice I couldn't multiply that by the library so vague if even losing elevation your serial and",
    "start": "2298749",
    "end": "2305410"
  },
  {
    "text": "parallel direction and we have all of these iterations that are you have you seen on every choice and every container",
    "start": "2305410",
    "end": "2310749"
  },
  {
    "text": "type so it is a big library but it's very feature-rich of these things are important in our occupations stink of",
    "start": "2310749",
    "end": "2317950"
  },
  {
    "text": "the wishes these features you would want to see in the core job so that you don't have to use as many collections rumor",
    "start": "2317950",
    "end": "2326219"
  },
  {
    "start": "2327000",
    "end": "2381000"
  },
  {
    "text": "all right to wrap up here's where you can go for more information you can reverse reach out to me directly I'd",
    "start": "2327470",
    "end": "2333960"
  },
  {
    "text": "love to see more questions on stack overflow we've created a tag and we just started answering questions on stack",
    "start": "2333960",
    "end": "2339540"
  },
  {
    "text": "overflow so if you watch that time that's a great place to interact with us you can check out all of our code on",
    "start": "2339540",
    "end": "2344790"
  },
  {
    "text": "github there's the two repositories and are looking to install of our clocks the two talks I wanted to highlight the word",
    "start": "2344790",
    "end": "2351120"
  },
  {
    "text": "the performance woman from cucumber where parallel lacy performance which",
    "start": "2351120",
    "end": "2356160"
  },
  {
    "text": "out of eight versus a lot of persons JS collections and we have more info on remembering suspect remarks i just",
    "start": "2356160",
    "end": "2361650"
  },
  {
    "text": "showed three today but everybody told entrance you can also check out our engineering site where we have a few",
    "start": "2361650",
    "end": "2368550"
  },
  {
    "text": "articles about JS collections as well as other engineering problems that myself all right that's what i have like to",
    "start": "2368550",
    "end": "2375090"
  },
  {
    "text": "open it up for questions",
    "start": "2375090",
    "end": "2377960"
  }
]