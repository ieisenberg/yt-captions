[
  {
    "start": "0",
    "end": "138000"
  },
  {
    "text": "[Music]",
    "start": "960",
    "end": "8889"
  },
  {
    "text": "hey everyone it's good to see so many familiar faces again after all these years been away",
    "start": "13860",
    "end": "20100"
  },
  {
    "text": "um so my name is Ian and I oops and unspecified amount of time before I",
    "start": "20100",
    "end": "27300"
  },
  {
    "text": "go I used to graduate from UCO which is not far down the road from here I guess the uh with the Masters in computer",
    "start": "27300",
    "end": "33480"
  },
  {
    "text": "science and one of my so I'm always proud or maybe I could be only notable achievement academically it was from at",
    "start": "33480",
    "end": "40559"
  },
  {
    "text": "least from my time at University whereas I came top of the class for this specific module in the second year",
    "start": "40559",
    "end": "46200"
  },
  {
    "text": "called the computational complexity number two and it was all about the data",
    "start": "46200",
    "end": "51600"
  },
  {
    "text": "structures and the big old notation and understanding what's different between MP problems versus MP hard and MP",
    "start": "51600",
    "end": "58320"
  },
  {
    "text": "complete which I can absolutely cannot tell you what they mean anymore because those are skills that I you know whilst",
    "start": "58320",
    "end": "64680"
  },
  {
    "text": "is useful I don't actually use them directly in my work in the last 15 years but what it did do for me it was give me",
    "start": "64680",
    "end": "71820"
  },
  {
    "text": "a framework to think about software complexity so if you fast forward to 2022 now I've been building stuff on AWS",
    "start": "71820",
    "end": "78960"
  },
  {
    "text": "since 2010 so I went through the whole ec2 instances containers serverless",
    "start": "78960",
    "end": "84180"
  },
  {
    "text": "nowadays and today I worked I guess I spent about half my time working with romigo as a developer Advocate I'm going",
    "start": "84180",
    "end": "91680"
  },
  {
    "text": "to talk a bit more about rubiko later and they've got a booth down there as well the other half of my time I spent",
    "start": "91680",
    "end": "98159"
  },
  {
    "text": "as a dependent consultant where I help other companies go faster for Less by adopting serverless",
    "start": "98159",
    "end": "104520"
  },
  {
    "text": "and as part of that line work I spend a lot of time working with a lot",
    "start": "104520",
    "end": "110220"
  },
  {
    "text": "of different AWS Services many of which I'm sure most of you would have used already even if you don't recognize the",
    "start": "110220",
    "end": "116340"
  },
  {
    "text": "logo to be honest looking at this now I can't tell a lot of some of these logos are either",
    "start": "116340",
    "end": "122040"
  },
  {
    "text": "um but what what I want to say is that I do strongly believe that nowadays understanding how these different AWS",
    "start": "122040",
    "end": "128220"
  },
  {
    "text": "Services work it's just as important as understanding data structures so that you know how to say when to use an array",
    "start": "128220",
    "end": "134640"
  },
  {
    "text": "versus a linked list for instance um and here we are at the event that's",
    "start": "134640",
    "end": "140160"
  },
  {
    "start": "138000",
    "end": "170000"
  },
  {
    "text": "specifically talking about the event driven architectures and I think the key word here is driven it's because",
    "start": "140160",
    "end": "147300"
  },
  {
    "text": "our applications are built in such a way that it's going to do something useful for our users and uh and to do that we",
    "start": "147300",
    "end": "154680"
  },
  {
    "text": "need some events happen so that it's able to trigger those business logic we've got to do something valuable to",
    "start": "154680",
    "end": "160440"
  },
  {
    "text": "our customers but the question here is well what do we use to receive those events and to",
    "start": "160440",
    "end": "166620"
  },
  {
    "text": "distribute them to our business logic so as far as the building given architecture goes on AWS eventbridge is",
    "start": "166620",
    "end": "173819"
  },
  {
    "start": "170000",
    "end": "376000"
  },
  {
    "text": "the king here is kind of the de facto Choice nowadays when you're building event driven architectures where you're",
    "start": "173819",
    "end": "180360"
  },
  {
    "text": "using eventbridge to capture all these different things happening in your system and then using uh the the event",
    "start": "180360",
    "end": "186540"
  },
  {
    "text": "patterns to then fend them out to different consumers that are going to do some interesting things so when say a",
    "start": "186540",
    "end": "193260"
  },
  {
    "text": "user signs up to the application and so on is no all this is thanks to the fact",
    "start": "193260",
    "end": "198360"
  },
  {
    "text": "that you've got this the content-based filtering which is one of the big things that you can do with eventbridge that",
    "start": "198360",
    "end": "203760"
  },
  {
    "text": "you can't do with something like SNS and if you zoom out for a second however",
    "start": "203760",
    "end": "209220"
  },
  {
    "text": "your application is made up of most likely lots of different services and",
    "start": "209220",
    "end": "214440"
  },
  {
    "text": "each of the services is going to have its own domain it's going to have its own set of responsibilities and it's",
    "start": "214440",
    "end": "219780"
  },
  {
    "text": "going to do different things when something happens elsewhere in the system so you're using event bridge to",
    "start": "219780",
    "end": "225299"
  },
  {
    "text": "kind of exchange events and messages so that the other services don't have to be tightly coupled to other services but if",
    "start": "225299",
    "end": "232739"
  },
  {
    "text": "you look into one of these microservices you have you may also see some event driven business logic inside there as",
    "start": "232739",
    "end": "239580"
  },
  {
    "text": "well and for different workloads you may have different requirements in terms of what you need from the thing that's",
    "start": "239580",
    "end": "245879"
  },
  {
    "text": "ingesting events and also then notifying your application so that you can do something",
    "start": "245879",
    "end": "251939"
  },
  {
    "text": "you may have say functional requirements which are usually non-negotiable I guess",
    "start": "251939",
    "end": "257100"
  },
  {
    "text": "uh for example you might need a fifo because you need to process say events",
    "start": "257100",
    "end": "262199"
  },
  {
    "text": "related to an e-commerce order in the same order in which they appear so that you can guarantee consistency and all",
    "start": "262199",
    "end": "269100"
  },
  {
    "text": "that and sometimes you may need to be able to repay events so for instance you're building an event source",
    "start": "269100",
    "end": "275460"
  },
  {
    "text": "application and you'll notice that oh there was a bug in how we calculate something and so you fix the bug and now",
    "start": "275460",
    "end": "282540"
  },
  {
    "text": "you can replay the events from the time when the bug was introduced so that you can get to the correct current state for",
    "start": "282540",
    "end": "288180"
  },
  {
    "text": "your Event Source system a lot of times you have you may also have a non-functional requirements",
    "start": "288180",
    "end": "294360"
  },
  {
    "text": "things like how scalable is this the solution we are using and how is the cost going to grow",
    "start": "294360",
    "end": "301259"
  },
  {
    "text": "as we have more and more traffic going into the system and as far as AWS goes there's quite a",
    "start": "301259",
    "end": "307020"
  },
  {
    "text": "lot of different Services you can use to different messaging services you can use and do the job here these are just a few",
    "start": "307020",
    "end": "312780"
  },
  {
    "text": "that comes to the Mind straight away you call your SNS sqs eventbridge Kinesis that have DB streams and iot core but I",
    "start": "312780",
    "end": "319560"
  },
  {
    "text": "wish you missed out quite a few other Solutions here as well including manage the Kafka active mq and probably half a",
    "start": "319560",
    "end": "326220"
  },
  {
    "text": "dozen others so in general I think knowing how these different Services work",
    "start": "326220",
    "end": "332699"
  },
  {
    "text": "is super useful and being able to pick the right solution for your workload is",
    "start": "332699",
    "end": "337740"
  },
  {
    "text": "a very valuable skill as a child as I made earlier that the knowing AWS Services is kind of the new data",
    "start": "337740",
    "end": "344039"
  },
  {
    "text": "structures and knowing when to use them is a very valuable skill to help you get the most out of AWS",
    "start": "344039",
    "end": "349979"
  },
  {
    "text": "and so for the next let's say about 30 minutes let's do some mental exercise and think about how our choice of the",
    "start": "349979",
    "end": "357360"
  },
  {
    "text": "messaging service here is going to impact our application in terms of the scalability cost and how easily we can",
    "start": "357360",
    "end": "364940"
  },
  {
    "text": "develop problems and so on so for the sake of Simplicity I'm just",
    "start": "364940",
    "end": "370139"
  },
  {
    "text": "gonna focus on these four Services here because they tend to be the most popular ones I see in production",
    "start": "370139",
    "end": "376860"
  },
  {
    "start": "376000",
    "end": "864000"
  },
  {
    "text": "so let's start by just talking about how our choice for messaging service here is going to affect our scalability and when",
    "start": "376860",
    "end": "384479"
  },
  {
    "text": "it comes to scalability you got to think about the sort of scaling constraints of the service that you want to use here",
    "start": "384479",
    "end": "390539"
  },
  {
    "text": "and probably the best way to do that is really just go to Google and Google whatever service name quotas and the 99",
    "start": "390539",
    "end": "398160"
  },
  {
    "text": "of the time you're gonna you know lend on the page that's that's dedicated to that service AWS done a really good job",
    "start": "398160",
    "end": "405060"
  },
  {
    "text": "of publishing these quotas page for every single service with an explanation for what those quotas mean and how they",
    "start": "405060",
    "end": "412199"
  },
  {
    "text": "work and in some cases that goes into details on where there are differences between regions and what",
    "start": "412199",
    "end": "419160"
  },
  {
    "text": "regions has you know what are the default throughput limits and the way you make it for you're going to find these days is that the fact you know I",
    "start": "419160",
    "end": "425759"
  },
  {
    "text": "think maybe last year A lot of people are talking about SNS being a better choice than the eventbridge because it's",
    "start": "425759",
    "end": "431100"
  },
  {
    "text": "got higher default throughput but nowadays if you look at the default throughputs for uh event bridge for most",
    "start": "431100",
    "end": "436860"
  },
  {
    "text": "of the big regions is actually the same as SNS and in some regions you may find that the eventbridge has got a higher",
    "start": "436860",
    "end": "442680"
  },
  {
    "text": "throughput than the SNS so knowing your region and the strip for the service",
    "start": "442680",
    "end": "448380"
  },
  {
    "text": "that you want to use is actually very useful and you can actually nowadays go to the service quotas service in AWS go",
    "start": "448380",
    "end": "455699"
  },
  {
    "text": "go to the console find the service and then navigate to the AWS service they're looking at so once you've got a good",
    "start": "455699",
    "end": "461580"
  },
  {
    "text": "idea from these Pages AWS publish what the different quotas mean and when they",
    "start": "461580",
    "end": "466680"
  },
  {
    "text": "apply then you go to this page and see for your current account in the region what is your throughput limit what are",
    "start": "466680",
    "end": "473520"
  },
  {
    "text": "the quota values the other side of the equation when it comes to scaling scalability is",
    "start": "473520",
    "end": "479880"
  },
  {
    "text": "understanding how the service you decide to use in the place with the Lambda concurrency in terms of say you know",
    "start": "479880",
    "end": "486720"
  },
  {
    "text": "you've got a high a volume messages coming through how is how is the landing",
    "start": "486720",
    "end": "491940"
  },
  {
    "text": "currency going to change so if you plot the Lambda concurrency against the number of messages that",
    "start": "491940",
    "end": "497460"
  },
  {
    "text": "you're just coming in per second on an X and Y axis so this is the for the likes",
    "start": "497460",
    "end": "503520"
  },
  {
    "text": "of SNS and Kinesis uh sir and the eventbridge basically anything that involves Lambda functions asynchronously",
    "start": "503520",
    "end": "510419"
  },
  {
    "text": "uh you're gonna see like more of a like a linear graph here where if we say we're going to send 100 messages to SNS",
    "start": "510419",
    "end": "517500"
  },
  {
    "text": "concurrently so straight away SNS going to try to invoke your Lambda function 100 times concurrently as well so that",
    "start": "517500",
    "end": "524459"
  },
  {
    "text": "yours the the concurrency for your application is going to grow nearly linearly to the number of messages that",
    "start": "524459",
    "end": "530459"
  },
  {
    "text": "comes that is coming in with something like sqs on the other hand the concurrency is controlled by",
    "start": "530459",
    "end": "537540"
  },
  {
    "text": "the number of polars that Amazon is running on your behalf so when using Lambda the process messages from sqs it",
    "start": "537540",
    "end": "544320"
  },
  {
    "text": "looks like it's like a push thing you don't do any polling yourself but sqs itself is a polling-based service so",
    "start": "544320",
    "end": "550140"
  },
  {
    "text": "what's all that's happening is that Lambda is running a cluster of Polish and the number of polars it runs for you",
    "start": "550140",
    "end": "556320"
  },
  {
    "text": "depends on the store starts with five and then it's going to scale up if",
    "start": "556320",
    "end": "561540"
  },
  {
    "text": "there's more messages coming in then you can handle it's going to scale up by 60 instances of polars per minute",
    "start": "561540",
    "end": "569279"
  },
  {
    "text": "which essentially means that the concurrency for your Lambda function does processing messages from sqs is",
    "start": "569279",
    "end": "575339"
  },
  {
    "text": "going to grow at that rate of up to 60 per minute so as your stupid goes up uh",
    "start": "575339",
    "end": "580860"
  },
  {
    "text": "your concurrency for Lambda is going to grow much more gradually compared to if you're using something like SNS and the",
    "start": "580860",
    "end": "586980"
  },
  {
    "text": "eventbridge and then on the other hand you also have something like Kinesis or data MTP",
    "start": "586980",
    "end": "592560"
  },
  {
    "text": "streams which by default you have one concurrent executions for a Lambda function for each shot you have in the",
    "start": "592560",
    "end": "599459"
  },
  {
    "text": "Kinesis stream so in this case you can actually control how much concurrency your application",
    "start": "599459",
    "end": "605459"
  },
  {
    "text": "has in terms of you know processing messages based on the number of shards you have that you allocate to the stream",
    "start": "605459",
    "end": "612240"
  },
  {
    "text": "so this will give you a really good control in terms of concurrency of your application and for those of you who are",
    "start": "612240",
    "end": "618060"
  },
  {
    "text": "not familiar with Kinesis with a single shot you can ingest up to one megabytes of data or a thousand messages per",
    "start": "618060",
    "end": "624959"
  },
  {
    "text": "second so that actually gives you a lot of throughput to handle large volumes of data",
    "start": "624959",
    "end": "631140"
  },
  {
    "text": "but you can actually also increase your throughput by your processing throughput by configuring The Event Source mapping",
    "start": "631140",
    "end": "638160"
  },
  {
    "text": "so that you can have up to 10 concurrent Lambda instances processing events from the same shot and so this allows you to",
    "start": "638160",
    "end": "645180"
  },
  {
    "text": "guess through those messages much quicker but it still guarantees that the records that are that you're processing",
    "start": "645180",
    "end": "651300"
  },
  {
    "text": "are processed in the same order as they received so it's a really really nice feature",
    "start": "651300",
    "end": "657720"
  },
  {
    "text": "so and depending on your setting you can increase the Lambda concurrency a lot quicker by adding more shards or",
    "start": "657720",
    "end": "664740"
  },
  {
    "text": "increasing the concurrency that you have for each shot and a lot of times having more Lambda",
    "start": "664740",
    "end": "670680"
  },
  {
    "text": "concurrency and using more Lambda concur currency to get through those messages quicker it's a good thing",
    "start": "670680",
    "end": "676500"
  },
  {
    "text": "except when it's not because sometimes we need to worry about Downstream systems so if Lambda function is talking",
    "start": "676500",
    "end": "683640"
  },
  {
    "text": "to some Legacy database that just can't scale as fast and as quickly as your",
    "start": "683640",
    "end": "688980"
  },
  {
    "text": "application can then you don't want to cause problems Downstream or sometimes you're using third-party apis that has",
    "start": "688980",
    "end": "695399"
  },
  {
    "text": "got rate limits and sometimes there are penalties for exceeding their rate limits so that you may get I don't know",
    "start": "695399",
    "end": "701399"
  },
  {
    "text": "a blacklisted for a little while or you're just getting a lot of errors in your API course",
    "start": "701399",
    "end": "706620"
  },
  {
    "text": "so depending on if you're looking for the maximum amount of stripper you can possibly get to get to all the messages",
    "start": "706620",
    "end": "712200"
  },
  {
    "text": "as quickly as you can then you then you may want to go that down the route of using SMS and the event and the",
    "start": "712200",
    "end": "719100"
  },
  {
    "text": "eventbridge but on the other side if you need to have a tighter control around the concurrency of your application then",
    "start": "719100",
    "end": "725160"
  },
  {
    "text": "this is gives you that control by allowing you to control concurrency with the number of shots the allocate and the",
    "start": "725160",
    "end": "731940"
  },
  {
    "text": "concurrency that you allocate that that you use for each shard",
    "start": "731940",
    "end": "737279"
  },
  {
    "text": "and in between that you have this spectrum of different services that is going to scale up the Lambda concurrency",
    "start": "737279",
    "end": "743640"
  },
  {
    "text": "at different rates like sqs versus say something like Dynam DB streams",
    "start": "743640",
    "end": "750480"
  },
  {
    "text": "and there's actually another mechanism that in the control mechanism you can use to control to manage the amount of",
    "start": "750480",
    "end": "755880"
  },
  {
    "text": "concurrent Lambda concurrency use and that is to use the reserve concurrency setting on Lambda functions which also",
    "start": "755880",
    "end": "763440"
  },
  {
    "text": "acts as the maximum concurrency this Lambda function would have so you can use that to control how many concurrent",
    "start": "763440",
    "end": "770279"
  },
  {
    "text": "invocations for given Lambda function will be running at any moment in time this is a very useful option to have",
    "start": "770279",
    "end": "776459"
  },
  {
    "text": "when you have maybe you know one or two functions where you need to control these concurrency uh tightly so that it",
    "start": "776459",
    "end": "782279"
  },
  {
    "text": "doesn't you know run wild and start using too much concurrency because remember with Lambda you've got this",
    "start": "782279",
    "end": "787860"
  },
  {
    "text": "concept of original concurrency limit so that across all the functions you have in your in your region they can they can",
    "start": "787860",
    "end": "794519"
  },
  {
    "text": "only be say up to a thousand instance of them running at any moment in time so if one function goes well and start using",
    "start": "794519",
    "end": "800940"
  },
  {
    "text": "up all your risk concurrency then it might be appropriate for Downstream systems but you can also cause other functions to start throttling and it's a",
    "start": "800940",
    "end": "807899"
  },
  {
    "text": "problem that I've actually run into several times in production group is laughing there because uh you know where we used to work we had that in our in",
    "start": "807899",
    "end": "814980"
  },
  {
    "text": "our accounts and the reserve concurrency has also another caveat in that it takes it the",
    "start": "814980",
    "end": "821880"
  },
  {
    "text": "word Reserve comes from the fact that it reserves some some amount of that",
    "start": "821880",
    "end": "826980"
  },
  {
    "text": "concurrence or that original concurrency for this particular function so that other functions can now only scale up on",
    "start": "826980",
    "end": "834180"
  },
  {
    "text": "demand into the remaining amount of concurrency you have so what you have to do this broadly and control concurrency",
    "start": "834180",
    "end": "840600"
  },
  {
    "text": "for a lot of functions this becomes quite difficult and also quite easy to make",
    "start": "840600",
    "end": "845700"
  },
  {
    "text": "mistakes whereby you may over allocate to these functions and not leave enough concurrency for all your other functions",
    "start": "845700",
    "end": "851700"
  },
  {
    "text": "to scale on demand into so that you may find that your API functions that's handling user requests suddenly get",
    "start": "851700",
    "end": "858360"
  },
  {
    "text": "throttled because that's just not in enough for concurrency in the region for them to scale into",
    "start": "858360",
    "end": "864240"
  },
  {
    "start": "864000",
    "end": "1180000"
  },
  {
    "text": "and when you talk about the scaling you're also tightly linked to your costs as well because a lot of these decisions",
    "start": "864240",
    "end": "870779"
  },
  {
    "text": "you make really impacts your cost of your application because when you try to project the cost",
    "start": "870779",
    "end": "877620"
  },
  {
    "text": "of your application with something like the service or Technologies where you only pay when you use them which is",
    "start": "877620",
    "end": "883560"
  },
  {
    "text": "great but when you have a scale run them as a really large scale then those costs",
    "start": "883560",
    "end": "888600"
  },
  {
    "text": "can start to uh to mount up pretty quickly so you always need to factor the scale or throughput that you expect to",
    "start": "888600",
    "end": "894240"
  },
  {
    "text": "handle into the equation okay for example if you're assuming you're you know Pro you're sending one",
    "start": "894240",
    "end": "900240"
  },
  {
    "text": "message a second for a whole month uh this is probably roughly how much you're looking at for the the cost for those",
    "start": "900240",
    "end": "906540"
  },
  {
    "text": "different Services you're going to be using so looking at you know low throughput scenarios like this you may",
    "start": "906540",
    "end": "912300"
  },
  {
    "text": "think okay Kinesis is kind of expensive here you may even say it's all to a magnitude more expensive than say using",
    "start": "912300",
    "end": "918360"
  },
  {
    "text": "sqs or SNS even though already you're talking about nine bucks which is kind of cost of a pie nowadays right so in",
    "start": "918360",
    "end": "924660"
  },
  {
    "text": "absolute terms these are still pretty minuscule compared in the grand scheme of things and also consider the fact that the",
    "start": "924660",
    "end": "931320"
  },
  {
    "text": "Kinesis nowadays has got an on-demand mode so that the offers you own demand pricing in terms of",
    "start": "931320",
    "end": "938579"
  },
  {
    "text": "compared to where you would have to say choose how many shots you want to run nowadays you can say you know Kinesis",
    "start": "938579",
    "end": "944820"
  },
  {
    "text": "you do that for me you figured out how many shots there should be and do the do the scaling for me and but but I'm still",
    "start": "944820",
    "end": "951899"
  },
  {
    "text": "going to be paying for enough time for the stream itself but not for individual shots anymore and also because now you're not paying",
    "start": "951899",
    "end": "959519"
  },
  {
    "text": "for individual shots in terms of the throughput you are now paying for the data that you ingest as well as the",
    "start": "959519",
    "end": "965880"
  },
  {
    "text": "retrieve from the kinesi Stream So if you add that to our list here suddenly you see you know kinesi is on demand",
    "start": "965880",
    "end": "971940"
  },
  {
    "text": "it's even more expensive at the low stripper scenarios like this but what happens if we were to you know",
    "start": "971940",
    "end": "978060"
  },
  {
    "text": "scale Up application a thousand fold now certainly we're looking at Thousand messages a second for a whole month now",
    "start": "978060",
    "end": "984839"
  },
  {
    "text": "certainly the cost for the different Services looks very different and now when you talk about being an order of",
    "start": "984839",
    "end": "990660"
  },
  {
    "text": "magnitude out is actually a notable and significant amount of money now um for just ingesting the event the",
    "start": "990660",
    "end": "997980"
  },
  {
    "text": "price I'm including here doesn't include for Kinesis on demand at least it doesn't include the processing cost in",
    "start": "997980",
    "end": "1003259"
  },
  {
    "text": "terms of retrieving the data but when you can have things like this you can see that now at scale you're",
    "start": "1003259",
    "end": "1009560"
  },
  {
    "text": "given a multimount scale of thousand messages a second Kinesis is significantly cheaper as than just in",
    "start": "1009560",
    "end": "1015320"
  },
  {
    "text": "those events compared to other services because it has got a much lower cost of per million API course compared to the",
    "start": "1015320",
    "end": "1022279"
  },
  {
    "text": "other services so when you're dumping lots and lots of messages Kinesis can the cause of Kinesis grows much more",
    "start": "1022279",
    "end": "1028819"
  },
  {
    "text": "gradually compared to the others and A good rule of thumb here to remember is that the services where you",
    "start": "1028819",
    "end": "1034760"
  },
  {
    "text": "are paying by uptime tend to be all the magnitude cheaper uh when you're running a very large scale and that applies to",
    "start": "1034760",
    "end": "1041720"
  },
  {
    "text": "your compute layer as well as for services that you're using for adjusting messages for instance",
    "start": "1041720",
    "end": "1048319"
  },
  {
    "text": "and this was um and this was something that's very much on the minds of the engineers at the rally which is the",
    "start": "1048319",
    "end": "1054679"
  },
  {
    "text": "national broadcaster in Finland uh where they've got this system for ingesting over something like 500 million messages",
    "start": "1054679",
    "end": "1062179"
  },
  {
    "text": "events a day from the you know people that are interacting with the live TV",
    "start": "1062179",
    "end": "1067220"
  },
  {
    "text": "programs they have at the peak of over 600 000 messages a second so per minute I was really lucky to speak to Anna hit",
    "start": "1067220",
    "end": "1074480"
  },
  {
    "text": "Pogo solver or about this work on my podcast that she was one of the engineers behind this system and like",
    "start": "1074480",
    "end": "1081140"
  },
  {
    "text": "the rest of her team she's a big fan of service Technologies and we have a possibility go straight to serverless",
    "start": "1081140",
    "end": "1086539"
  },
  {
    "text": "solutions they want to do things they don't have to manage the scaling do not know they only pay for things when they",
    "start": "1086539",
    "end": "1092299"
  },
  {
    "text": "um when they use but even for the team full of serverless enthusiasts they",
    "start": "1092299",
    "end": "1097820"
  },
  {
    "text": "still end up using choosing a far gate and Kinesis here because of the fact that at that kind of throughput they're",
    "start": "1097820",
    "end": "1103880"
  },
  {
    "text": "using something like Lambda and using other thing other messaging services is going to be prohibitively expensive to",
    "start": "1103880",
    "end": "1110539"
  },
  {
    "text": "handle the workload they have so both these decisions were driven by by the throughput of a system they're",
    "start": "1110539",
    "end": "1116780"
  },
  {
    "text": "trying to build and also trying to find the need for to find the cost efficient way to build this system",
    "start": "1116780",
    "end": "1122720"
  },
  {
    "text": "and you also may be noticed that it was sqs during the and this is quite a common pattern you see in systems that",
    "start": "1122720",
    "end": "1129980"
  },
  {
    "text": "need to be highly robust so this is there so that if Kinesis fails for whatever reason they can use sqs as a",
    "start": "1129980",
    "end": "1137600"
  },
  {
    "text": "fallback with the assumption that the different systems in AWS is not going to fail all at once which can happen and it",
    "start": "1137600",
    "end": "1145400"
  },
  {
    "text": "kind of happened was it two three years ago with the car Watcher problems",
    "start": "1145400",
    "end": "1150679"
  },
  {
    "text": "obviously the S3 event I forgot what it was the trigger was I think it was Car Wash they had a problem and they ended",
    "start": "1150679",
    "end": "1155960"
  },
  {
    "text": "up having a knock-on impacts on Kinesis and took it and took down other services as well so assuming that now sqs is not",
    "start": "1155960",
    "end": "1163039"
  },
  {
    "text": "going to fail at the same time as Kinesis then you've got in the solution that you can use to capture the messages that you couldn't send to Kinesis",
    "start": "1163039",
    "end": "1169520"
  },
  {
    "text": "because this is down so they don't lose data and when this kinesi is back then you can then pump those data back into",
    "start": "1169520",
    "end": "1175880"
  },
  {
    "text": "the Kinesis stream once it's back online and that brings me nicely to the the",
    "start": "1175880",
    "end": "1182780"
  },
  {
    "start": "1180000",
    "end": "1560000"
  },
  {
    "text": "need to understand the retry behavior of the services that you're using especially when it comes to how the",
    "start": "1182780",
    "end": "1188179"
  },
  {
    "text": "interplay with your Lambda functions because one of the nice things with using Lambda to process events from you",
    "start": "1188179",
    "end": "1193940"
  },
  {
    "text": "know eventbridge and SNS and Kinesis is the fact that AWS is doing a lot of this",
    "start": "1193940",
    "end": "1199039"
  },
  {
    "text": "heavy lifting for you and and also giving you things like for event asynchronous invocations a built-in",
    "start": "1199039",
    "end": "1205520"
  },
  {
    "text": "retrying mechanism for your Lambda function and also it's got support for Delta cues as well but the thing with",
    "start": "1205520",
    "end": "1212360"
  },
  {
    "text": "Delta cues is that they only capture the payload that your Lambda function can't process and doesn't capture any context",
    "start": "1212360",
    "end": "1219860"
  },
  {
    "text": "around why you couldn't process them so a lot of time you're going to see a payload being captured in your dlq but",
    "start": "1219860",
    "end": "1225500"
  },
  {
    "text": "you have no idea you know why did it fail in the first place and if it's safe for you to reprocess a message now so",
    "start": "1225500",
    "end": "1231559"
  },
  {
    "text": "you have to end up going to your logs going to other places trying to figure it out okay what actually happened when we try to process this message assuming",
    "start": "1231559",
    "end": "1238700"
  },
  {
    "text": "that it's not some kind of like a systemic failure that everything was failing then you know okay Downstream",
    "start": "1238700",
    "end": "1244039"
  },
  {
    "text": "system is probably down that's probably why but if it's individual messages have failed you need to understand you know",
    "start": "1244039",
    "end": "1249679"
  },
  {
    "text": "why why we couldn't process it despite the fact that we have two ways choices out of the box",
    "start": "1249679",
    "end": "1255500"
  },
  {
    "text": "so this is when um you know you go to your logs you're trying to figure out what's what's going on and then you make decisions on a",
    "start": "1255500",
    "end": "1261740"
  },
  {
    "text": "message by message basis so this is quite a common problem people have so the Lambda team decides to",
    "start": "1261740",
    "end": "1267440"
  },
  {
    "text": "decide to go do one better and they give you landed destinations nowadays which",
    "start": "1267440",
    "end": "1272660"
  },
  {
    "text": "compared to dlq has got some really significant advantages one of which is the fact that you can use it with async",
    "start": "1272660",
    "end": "1280400"
  },
  {
    "text": "classifications as well as for stream based invocations as well so if you have Lambda functions processing events from",
    "start": "1280400",
    "end": "1286880"
  },
  {
    "text": "Kinesis or dynamic streams you can use the same mechanism to capture events that your functions can't handle or",
    "start": "1286880",
    "end": "1293480"
  },
  {
    "text": "couldn't process the first time uh but unfortunately um it's only for asynchronous and the",
    "start": "1293480",
    "end": "1298820"
  },
  {
    "text": "stream based implications and not for sqs which has got its own stock category for polling-based invocations",
    "start": "1298820",
    "end": "1307100"
  },
  {
    "text": "another thing with uh destinations is that they score more targets you can you can use at least for the asynchronous",
    "start": "1307100",
    "end": "1313520"
  },
  {
    "text": "invocations you can use SNS and sqs but you can also now use the eventbridge and Lambda as well which is very useful if",
    "start": "1313520",
    "end": "1320600"
  },
  {
    "text": "you want to do some kind of like an automated process for automated response to I don't know do something in your",
    "start": "1320600",
    "end": "1326539"
  },
  {
    "text": "Lambda function you can also use it in the successful cases as well so you can if you've got a very simple workflow",
    "start": "1326539",
    "end": "1333260"
  },
  {
    "text": "that's just one step rather than trying to bring in Step functions and have to bring more moving Parts into",
    "start": "1333260",
    "end": "1338419"
  },
  {
    "text": "architecture you can use the lamp the destinations to do that one hop which can be useful for things like",
    "start": "1338419",
    "end": "1344440"
  },
  {
    "text": "I'm processing a message and I need to respond straight away but then I can now use it I can now use a destination to do",
    "start": "1344440",
    "end": "1352820"
  },
  {
    "text": "the Second Step which could be to do uh I don't know send out some notifications or something like that but that's not",
    "start": "1352820",
    "end": "1357860"
  },
  {
    "text": "you know critical to my uh my my my job to process this particular message which",
    "start": "1357860",
    "end": "1363620"
  },
  {
    "text": "is a useful way to sort of architect the distributed transactions out of your application",
    "start": "1363620",
    "end": "1370100"
  },
  {
    "text": "another big advantage that the Lambda destinations has over dlqs is the fact",
    "start": "1370100",
    "end": "1375140"
  },
  {
    "text": "that it captures a lot more information than that accused so you've got the event payload that your function",
    "start": "1375140",
    "end": "1381320"
  },
  {
    "text": "couldn't process the first time after the retrace but you also get information about the invocation itself a number of",
    "start": "1381320",
    "end": "1388100"
  },
  {
    "text": "attempts but also importantly in the case of an error you've got a stack trace and the error message so this",
    "start": "1388100",
    "end": "1393980"
  },
  {
    "text": "saves you from having to go to your logs and trying to figure out you know why what it happened and a lot of times you",
    "start": "1393980",
    "end": "1400520"
  },
  {
    "text": "may find that maybe you're not logging enough information to help you debug those those failed messages in the first",
    "start": "1400520",
    "end": "1406400"
  },
  {
    "text": "place so having this being captured as part of the payload just saves you from doing that yourself",
    "start": "1406400",
    "end": "1412820"
  },
  {
    "text": "and this is one of the big reasons why you should definitely prefer using Lambda destinations over using Delta",
    "start": "1412820",
    "end": "1418940"
  },
  {
    "text": "queues nowadays even though you could use both of them side by side uh I don't",
    "start": "1418940",
    "end": "1424640"
  },
  {
    "text": "know I can't think of any use case where you'll be useful to actually use them no for the purpose of a dlq at least",
    "start": "1424640",
    "end": "1431539"
  },
  {
    "text": "if anyone's got some useful use cases feel free to come to me afterwards I'm really interested to understand the why",
    "start": "1431539",
    "end": "1437480"
  },
  {
    "text": "not the two of them works together um so while we're still on the destinations uh one thing I do want to",
    "start": "1437480",
    "end": "1443659"
  },
  {
    "text": "talk about is that the destination is also not perfect yeah the special when it comes to stream based invocations so",
    "start": "1443659",
    "end": "1450500"
  },
  {
    "text": "for Lambda function there's processing events of Kinesis streams or time people streams Lambda destinations will still",
    "start": "1450500",
    "end": "1457039"
  },
  {
    "text": "be able to capture failed payloads and this is what you're gonna get in that case you're gonna get the request",
    "start": "1457039",
    "end": "1463760"
  },
  {
    "text": "contacts the response context as well as information about the Kinesis batch like",
    "start": "1463760",
    "end": "1468919"
  },
  {
    "text": "the shot ID start sequence and sequence and so on and so forth but notice what's",
    "start": "1468919",
    "end": "1473960"
  },
  {
    "text": "on on the the actual Message Board itself so the message board is still on a",
    "start": "1473960",
    "end": "1479000"
  },
  {
    "text": "stream all you have here is information you need to go to the stream and get the data before they are expired",
    "start": "1479000",
    "end": "1485780"
  },
  {
    "text": "so if it's the first time you're you know you're seeing this kind of uh message being captured in the",
    "start": "1485780",
    "end": "1492559"
  },
  {
    "text": "destination for a stream based Lambda function then the there's no there's a chance that this may have happened over",
    "start": "1492559",
    "end": "1498679"
  },
  {
    "text": "the weekend and there's a very good chance that you then load okay okay we have got a message there we couldn't",
    "start": "1498679",
    "end": "1504140"
  },
  {
    "text": "process let's go and find out but we can't because data has been expired with ton of deep streams you only keep status",
    "start": "1504140",
    "end": "1509900"
  },
  {
    "text": "for 24 hours and with Kinesis the default is also 24 hours even though you could enable retention extended",
    "start": "1509900",
    "end": "1517280"
  },
  {
    "text": "retention for up to the year but if you don't do that and pay for that then there's a very good chance nothing happened over the weekend and come",
    "start": "1517280",
    "end": "1523220"
  },
  {
    "text": "Monday this is the first time you're seeing the message and suddenly you don't have a way to retrieve those data from your stream anymore",
    "start": "1523220",
    "end": "1529880"
  },
  {
    "text": "so that's just something that really you have to keep in mind if you're using kinesi streams and you're using destinations for failures",
    "start": "1529880",
    "end": "1537260"
  },
  {
    "text": "and as I mentioned earlier as well this whole mechanism also just doesn't work for sqs which you have to fall back to",
    "start": "1537260",
    "end": "1544580"
  },
  {
    "text": "using Delta cues on sqs using sqs its own uh redrive policy which again takes",
    "start": "1544580",
    "end": "1550700"
  },
  {
    "text": "you back to the place where messages fail but you don't see the context of why they failed and having to figure out",
    "start": "1550700",
    "end": "1556640"
  },
  {
    "text": "you know what happened in the first place which also very nicely placed into what I'm going to talk about next which",
    "start": "1556640",
    "end": "1562520"
  },
  {
    "start": "1560000",
    "end": "2327000"
  },
  {
    "text": "is how do you figure out when something failed this is all planned smoothly",
    "start": "1562520",
    "end": "1568220"
  },
  {
    "text": "um so a possibility I guess depending on who you talk to you may hear all kind of different definitions uh my favorite",
    "start": "1568220",
    "end": "1574580"
  },
  {
    "text": "definition for observability is it's a measure of how well the internal state of the application basically what's",
    "start": "1574580",
    "end": "1581120"
  },
  {
    "text": "actually going on uh based on just its external output now external outputs",
    "start": "1581120",
    "end": "1586400"
  },
  {
    "text": "like the logs uh distributed traces and maybe the side effects that you were",
    "start": "1586400",
    "end": "1591500"
  },
  {
    "text": "able to see from the function like data being written into Tatum DB",
    "start": "1591500",
    "end": "1596600"
  },
  {
    "text": "and within AWS you have a cloud watch you've got Cloud watch logs and you also have a distributed tracing service",
    "start": "1596600",
    "end": "1602659"
  },
  {
    "text": "called the X-ray which I'm sure many of you are familiar with already so I try",
    "start": "1602659",
    "end": "1608000"
  },
  {
    "text": "to do a bit of a market research recently and to see how well different the resolutions support the different",
    "start": "1608000",
    "end": "1613840"
  },
  {
    "text": "breadth of different services that we often use inside a service application so I put together a little demo app",
    "start": "1613840",
    "end": "1620299"
  },
  {
    "text": "which now it's got an API function that handles the request and then all you know is this is bringing messages to",
    "start": "1620299",
    "end": "1626900"
  },
  {
    "text": "lots of different places to SNS to sqs Kinesis event Bridge as well as Dunham",
    "start": "1626900",
    "end": "1634279"
  },
  {
    "text": "DB and S3 to trigger some other Lambda function to run I want to see how do",
    "start": "1634279",
    "end": "1639740"
  },
  {
    "text": "these different Services support you know different workloads that use different messaging services and so",
    "start": "1639740",
    "end": "1645260"
  },
  {
    "text": "obviously I looked at x-ray first and so given one transaction hitting so many different things I was hoping to see you",
    "start": "1645260",
    "end": "1652340"
  },
  {
    "text": "know one transaction one Trace inside x-ray but what I do see is I see see six",
    "start": "1652340",
    "end": "1657740"
  },
  {
    "text": "different traces for the entire thing which you know when it comes to debugging obviously it's not going to",
    "start": "1657740",
    "end": "1663440"
  },
  {
    "text": "help me very much because I see now fragmented of fragments of information of you know what actually happened in",
    "start": "1663440",
    "end": "1669380"
  },
  {
    "text": "the transaction and when you take into account sampling the X-ray applies by default as well so there's a very good",
    "start": "1669380",
    "end": "1675020"
  },
  {
    "text": "chance you know that you're not even going to see all of these fragments for your transaction in production",
    "start": "1675020",
    "end": "1680539"
  },
  {
    "text": "and in this case x-ray is not able to trace through a lot of different services so basically anything that goes",
    "start": "1680539",
    "end": "1685580"
  },
  {
    "text": "to sqs as well as the Kinesis and the time DB streams and S3 S3 as well so",
    "start": "1685580",
    "end": "1693380"
  },
  {
    "text": "there's a lot of things they just won't be able to see inside x-ray at least not as part of one cohesive transaction",
    "start": "1693380",
    "end": "1701299"
  },
  {
    "text": "so this makes the debugging a bit more difficult the other side of it is the fact that most people still rely on",
    "start": "1701299",
    "end": "1707299"
  },
  {
    "text": "having their locks to be just figured out what actually happened x-ray captures some information so you capture",
    "start": "1707299",
    "end": "1712940"
  },
  {
    "text": "the fact that your function made a call to this other service and maybe it triggers say another function after that",
    "start": "1712940",
    "end": "1719840"
  },
  {
    "text": "as part of the same transaction so you can see Lambda to SNS to another Lambda function but then the",
    "start": "1719840",
    "end": "1727159"
  },
  {
    "text": "it doesn't show you the logs by default so if you have to you know augment the information you see in x-ray oftentimes",
    "start": "1727159",
    "end": "1733640"
  },
  {
    "text": "you see people put you know console.log json.stringify event as the first line of the Lambda function and display that",
    "start": "1733640",
    "end": "1740720"
  },
  {
    "text": "across all the Lambda functions because you know when debugging you want to see okay we see a problem we don't see the",
    "start": "1740720",
    "end": "1746659"
  },
  {
    "text": "course so let's figure out what event our Lambda function had in the first place right I see that kind of code all",
    "start": "1746659",
    "end": "1751880"
  },
  {
    "text": "over the place and then you also find that okay we see the the side effect of Something Happening Here we see the",
    "start": "1751880",
    "end": "1758059"
  },
  {
    "text": "event but we don't know why we got this error from this API call we made so we need to then add more logging for say",
    "start": "1758059",
    "end": "1764899"
  },
  {
    "text": "the request body the responsibility so that we can figure out okay what's actually going on here",
    "start": "1764899",
    "end": "1770899"
  },
  {
    "text": "so you have to do that yourself and figure out some way for you to implement the correlation IDs into into your",
    "start": "1770899",
    "end": "1776960"
  },
  {
    "text": "Lambda function so that that context is passed along to all the different functions so that you can search for that correlation ID and find logs for",
    "start": "1776960",
    "end": "1783919"
  },
  {
    "text": "all the functions that you've got here so I think this is where something like lumigo can let you add a lot of value",
    "start": "1783919",
    "end": "1789200"
  },
  {
    "text": "here because if you look at the same transaction inside lumigo I mean for one you have able to know is able to capture",
    "start": "1789200",
    "end": "1795200"
  },
  {
    "text": "all the different components inside this transaction so you can see my you know Lambda function handed from API call",
    "start": "1795200",
    "end": "1801440"
  },
  {
    "text": "from API Gateway to no SNS but also includes SNS and sqs to Lambda here",
    "start": "1801440",
    "end": "1807980"
  },
  {
    "text": "you've got the sqs you've got S3 which for some reason there's like a separate thing stands there I think they work",
    "start": "1807980",
    "end": "1814100"
  },
  {
    "text": "there they know about that they're working on that uh there's also talented streams condensing streams and eventbridge and so on so it has got a",
    "start": "1814100",
    "end": "1821059"
  },
  {
    "text": "much better support across the breadth of different services that you often use inside your service application but I",
    "start": "1821059",
    "end": "1826580"
  },
  {
    "text": "think the the big thing for me oftentimes is the fact that I get all the logs for my Lambda functions side by side as well so that I don't have to you",
    "start": "1826580",
    "end": "1833539"
  },
  {
    "text": "know two different places I've got to go and find information I need and while I'm here I can click on any of the icons",
    "start": "1833539",
    "end": "1839059"
  },
  {
    "text": "to find more so that I can click on a Lambda function it shows me the invocation event the response value the",
    "start": "1839059",
    "end": "1846020"
  },
  {
    "text": "environment variables and the logs so that again I can just delete a lot of the Consular log stuff that I've got in",
    "start": "1846020",
    "end": "1852500"
  },
  {
    "text": "my code in fact since I started using lumigo I don't write many logs anymore",
    "start": "1852500",
    "end": "1858440"
  },
  {
    "text": "um I mean go up here and I we work together at the Zone we put this whole sort of tooling together to pass creation IDs around and again all of",
    "start": "1858440",
    "end": "1865039"
  },
  {
    "text": "that is kind of gone it's gone to the bin for me as well I don't have to use a lot of these tools anymore um and then the nice thing that clubigo",
    "start": "1865039",
    "end": "1872120"
  },
  {
    "text": "does the over x-ray is the fact that when you oh my keys come off it's gone off when you call some other surveys",
    "start": "1872120",
    "end": "1879380"
  },
  {
    "text": "from your Lambda function it automatically captures the fact that you made a request but also it captures the",
    "start": "1879380",
    "end": "1884539"
  },
  {
    "text": "request body and response so when you go to Lambda function you have a lot of checkpoints about what the internal",
    "start": "1884539",
    "end": "1891140"
  },
  {
    "text": "State for the application is at any moment in time whenever you make a i o call from your function so in terms of",
    "start": "1891140",
    "end": "1897140"
  },
  {
    "text": "inferring the internal state of your application remember the definition for observability I think this gives you a",
    "start": "1897140",
    "end": "1902899"
  },
  {
    "text": "much complete picture of what's going on inside your function as every time as your function do is does something make",
    "start": "1902899",
    "end": "1908659"
  },
  {
    "text": "an API call you get that so the only time I write logs nowadays is pretty much when I've got",
    "start": "1908659",
    "end": "1914000"
  },
  {
    "text": "some complex business logic like data transformation where I there's no I O core so I don't see what's going on from",
    "start": "1914000",
    "end": "1920240"
  },
  {
    "text": "the Migos so I would recommend what I see you inside the Migo with the custom blog messages to say okay this is the",
    "start": "1920240",
    "end": "1926720"
  },
  {
    "text": "starting point of transformation this is what we did halfway this is the what we end up with and then you probably see",
    "start": "1926720",
    "end": "1932779"
  },
  {
    "text": "that you know that end data results uh when we make a call to Dunham DB or some other services",
    "start": "1932779",
    "end": "1939500"
  },
  {
    "text": "and the great thing about using lumigo is also is the fact that there's no manual instrumentation you don't spend",
    "start": "1939500",
    "end": "1944960"
  },
  {
    "text": "you don't have to spend a lot of time to instrument your code to get to make sure you get all the information you need um using the server framework um there's",
    "start": "1944960",
    "end": "1951620"
  },
  {
    "text": "such a plugin you can install which just takes you two lines of code to configure lumigo and now for that you just get all",
    "start": "1951620",
    "end": "1957919"
  },
  {
    "text": "the visibility out of the box um so I think the lumigo is a really good tool very useful tool because they",
    "start": "1957919",
    "end": "1964159"
  },
  {
    "text": "also support for containers nowadays as well but um definitely the wrong person I'm not",
    "start": "1964159",
    "end": "1969260"
  },
  {
    "text": "even going to say not the right person I'm the wrong person to ask for containers pretty actively avoid",
    "start": "1969260",
    "end": "1974299"
  },
  {
    "text": "containers as much as they can so if you want to find out more about your Amigo it goes to that proof and ask them about containers",
    "start": "1974299",
    "end": "1980179"
  },
  {
    "text": "um right so I'm kind of I guess I gotta be sidetracked it um so",
    "start": "1980179",
    "end": "1986000"
  },
  {
    "text": "no after all this in terms of answering the question of which messaging services should you use for your workload based",
    "start": "1986000",
    "end": "1993200"
  },
  {
    "text": "on your requirements um turns out someone actually did a lot of the hard work for me already um so magic here so put together a",
    "start": "1993200",
    "end": "2000100"
  },
  {
    "text": "pretty good decision Tree in terms of you know which service you want to use based on your use case and I pretty much",
    "start": "2000100",
    "end": "2006640"
  },
  {
    "text": "agree with it was he's got here 100 you know high volume data Kinesis if you need archiving replay eventbridge but",
    "start": "2006640",
    "end": "2014559"
  },
  {
    "text": "I'll probably classify this the last Point here about do you have multiple consumers um worth it maybe differently because I",
    "start": "2014559",
    "end": "2021399"
  },
  {
    "text": "think that this is the question really you're talking about here is um it's not weird or not you can marry your consumers but whether or not what you're",
    "start": "2021399",
    "end": "2028059"
  },
  {
    "text": "sending as a message is it a task or is it an event because I think it's also worthwhile making that distinction where",
    "start": "2028059",
    "end": "2035500"
  },
  {
    "text": "an event is you saying hey something happens and here's what happened with",
    "start": "2035500",
    "end": "2040659"
  },
  {
    "text": "the details uh whereas with the task you're telling somebody to go now hey please do this thing and here's",
    "start": "2040659",
    "end": "2047679"
  },
  {
    "text": "information you're going to need to do that thing so a task has a very specific Target in",
    "start": "2047679",
    "end": "2053320"
  },
  {
    "text": "mind and this is why you will never see say sqsq with multiple subscribers because you have some expected outcome",
    "start": "2053320",
    "end": "2061000"
  },
  {
    "text": "that you have in mind when you send a message to sqs you're not going to expect one of a number of random things",
    "start": "2061000",
    "end": "2067240"
  },
  {
    "text": "to happen depending on which subscriber picked up the task right so",
    "start": "2067240",
    "end": "2072520"
  },
  {
    "text": "and also oftentimes when you're sending a message to say you know please post something out of band uh outside of my",
    "start": "2072520",
    "end": "2079300"
  },
  {
    "text": "sync synchronous path you're also expecting some kind of answer so oftentimes you see you know sqs being",
    "start": "2079300",
    "end": "2084940"
  },
  {
    "text": "used with Lambda but some kind of a callback pattern also being used as well so that you can you know get the answer",
    "start": "2084940",
    "end": "2090760"
  },
  {
    "text": "at the end of it where so when you're talking about is the message is being sent as the event",
    "start": "2090760",
    "end": "2096638"
  },
  {
    "text": "uh you know as a publisher I really don't I shouldn't which I well I said I say I shouldn't have to care about who",
    "start": "2096639",
    "end": "2103540"
  },
  {
    "text": "are listening to those events uh because you know you should be the couple from those consumers of this event",
    "start": "2103540",
    "end": "2110380"
  },
  {
    "text": "and so as a magic says here he said decision tree is pretty much going to be good for you 90 of the time to help you",
    "start": "2110380",
    "end": "2116500"
  },
  {
    "text": "made the right choice but there's still a lot of room for you know questions over the last 10 percent for example",
    "start": "2116500",
    "end": "2122260"
  },
  {
    "text": "where if you need the fifo and when is it the right time to ever to use something like Dynamic TV streams",
    "start": "2122260",
    "end": "2129640"
  },
  {
    "text": "um so also put together a little like a reference sheet for all the different characteristics for the services that we",
    "start": "2129640",
    "end": "2135579"
  },
  {
    "text": "kind of focus on today in terms of whether or not they support um patching ordering and so on and once you",
    "start": "2135579",
    "end": "2143560"
  },
  {
    "text": "kind of got this different trade-offs in mind you can also start to see them as you know Lego pieces you can start to so",
    "start": "2143560",
    "end": "2149680"
  },
  {
    "text": "you know combine them together to you know create some other effects for example if you've got a use case that",
    "start": "2149680",
    "end": "2156400"
  },
  {
    "text": "needs ordering and you also need archiving and replays and you want to maximize your concurrency and you don't",
    "start": "2156400",
    "end": "2162520"
  },
  {
    "text": "mind paying by request then eventbridge almost takes every single box except it",
    "start": "2162520",
    "end": "2168400"
  },
  {
    "text": "doesn't have the ordering on the other hand you also have got SNS fifo which gives you ordering but no archiving and",
    "start": "2168400",
    "end": "2174880"
  },
  {
    "text": "no replays so what can you what about if you just combine and two of them together so perhaps you can put them together",
    "start": "2174880",
    "end": "2180880"
  },
  {
    "text": "like this so that you have messages going to skns 50 with a four to",
    "start": "2180880",
    "end": "2186280"
  },
  {
    "text": "eventbridge and then trigger your function to do some stuff uh or what if you put them the other way",
    "start": "2186280",
    "end": "2191980"
  },
  {
    "text": "you have event bridge in just event and then forward to SNS fifo and then you do some stuff so I guess maybe we don't",
    "start": "2191980",
    "end": "2199300"
  },
  {
    "text": "have time to do a quick post I'm just going to tell you that this was supposed to be a trick question as you often here on conferences talks that both answers",
    "start": "2199300",
    "end": "2206260"
  },
  {
    "text": "are wrong because when you do this you lose the ordering when the events are going from eventbridge to SNS fifo so by",
    "start": "2206260",
    "end": "2213520"
  },
  {
    "text": "the time you process them they're out of order already equally if you do the other way it's also wrong because the",
    "start": "2213520",
    "end": "2219099"
  },
  {
    "text": "better part of the time sorry Parts okay so this one was from Eventbrite as soon as powerful yeah so",
    "start": "2219099",
    "end": "2225160"
  },
  {
    "text": "so by the time from eventbrids to your function you're also going to lose the ordering as well so um when I'm playing this whole trick",
    "start": "2225160",
    "end": "2231160"
  },
  {
    "text": "question thing uh but anyway the right answer here uh it's actually still something like this",
    "start": "2231160",
    "end": "2237040"
  },
  {
    "text": "where you know for things that actually need the ordering uh the or in order processing you get them from SNS fifo",
    "start": "2237040",
    "end": "2244119"
  },
  {
    "text": "directly maybe it's going through sqs50 as well because it's almost customary and also because it allows you to then",
    "start": "2244119",
    "end": "2250780"
  },
  {
    "text": "okay you know deactivate the Lambda function for whatever reason without losing data but because messages are",
    "start": "2250780",
    "end": "2257619"
  },
  {
    "text": "also going to eventbridge as well so you still get archiving and replays if you need to and also anybody else who's",
    "start": "2257619",
    "end": "2263560"
  },
  {
    "text": "interested in these events they can also get them from eventbridge as well uh equally if you got something that",
    "start": "2263560",
    "end": "2270460"
  },
  {
    "text": "requires the back chain because it's high volume and you want to pay for uptime because you know cost then the Kinesis is a good choice here",
    "start": "2270460",
    "end": "2277420"
  },
  {
    "text": "but even as you you know churning through lots and lots and lots and lots of messages from Kinesis you can still",
    "start": "2277420",
    "end": "2283060"
  },
  {
    "text": "create those domain Events maybe when you see something interesting in the in the mix or whenever you're doing making",
    "start": "2283060",
    "end": "2289119"
  },
  {
    "text": "State changes in the system that other people might be interested in so you can still publish events from your Lambda",
    "start": "2289119",
    "end": "2294579"
  },
  {
    "text": "function to eventbridge so that again when you zoom out you got your little service there is your domain you are",
    "start": "2294579",
    "end": "2301000"
  },
  {
    "text": "using a particular service for your workload that fits you best but you're still sharing events that other services",
    "start": "2301000",
    "end": "2306940"
  },
  {
    "text": "might be interested in and vice versa so different services are still exchanging",
    "start": "2306940",
    "end": "2312040"
  },
  {
    "text": "events are still reacting to things happening elsewhere by sending events to eventbridge and so at the heart of your",
    "start": "2312040",
    "end": "2319240"
  },
  {
    "text": "event driven architectures chances are you're still going to see eventbridge even if on individual workload level you",
    "start": "2319240",
    "end": "2325060"
  },
  {
    "text": "may choose something different and with that I think we're out of time and I want to thank you guys so much for",
    "start": "2325060",
    "end": "2330760"
  },
  {
    "start": "2327000",
    "end": "2361000"
  },
  {
    "text": "being here this morning and as mentioned before I'm a consultant so if you want to work with me go to the Bernie mac.com",
    "start": "2330760",
    "end": "2336220"
  },
  {
    "text": "and thank you guys very much I will share the slides with the organizers afterwards so you can find them online",
    "start": "2336220",
    "end": "2341619"
  },
  {
    "text": "as well okay thank you [Applause]",
    "start": "2341619",
    "end": "2350199"
  }
]