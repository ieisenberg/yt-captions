[
  {
    "text": "[Music] welcome to the go-to podcast each",
    "start": "280",
    "end": "7399"
  },
  {
    "text": "episode covers the brightest and boldest ideas from the world's leading experts in software development tune in for",
    "start": "7399",
    "end": "14200"
  },
  {
    "text": "practical lessons compelling theories and plenty of",
    "start": "14200",
    "end": "19279"
  },
  {
    "text": "inspiration go to gathers the brightest Minds in the software Community to help developers tackle projects today plan",
    "start": "19920",
    "end": "26679"
  },
  {
    "text": "for tomorrow and create a better future stay up to date with the latest in Tech through goto's top rated events held",
    "start": "26679",
    "end": "33280"
  },
  {
    "text": "online and in person in cities like Amsterdam London Copenhagen and Chicago",
    "start": "33280",
    "end": "39120"
  },
  {
    "text": "and by subscribing to the go-to conferences YouTube channel where you can find thousands more highquality de",
    "start": "39120",
    "end": "44680"
  },
  {
    "text": "talks learn more at [Music]",
    "start": "44680",
    "end": "51549"
  },
  {
    "text": "goop.in scripted we're at go to Copenhagen my name is Yun Engles I'm joined with Andrew Kelly um so I'm is",
    "start": "52079",
    "end": "60120"
  },
  {
    "text": "software engineer at krike I work um primarily with Elm uh I like to in my",
    "start": "60120",
    "end": "65840"
  },
  {
    "text": "spare time work in a uh Elm liner which is called Elm review um which I",
    "start": "65840",
    "end": "71920"
  },
  {
    "text": "presented at the conference um Andre uh hello uh as yurun uh mentioned",
    "start": "71920",
    "end": "79600"
  },
  {
    "text": "my name is Andrew Kelly I am the President and Lead software developer of Zig software",
    "start": "79600",
    "end": "86040"
  },
  {
    "text": "foundation and uh that sounds so much more f see the",
    "start": "86040",
    "end": "92320"
  },
  {
    "text": "ey well I heard that you have a thirst for linters I do I do and I heard that",
    "start": "92520",
    "end": "100200"
  },
  {
    "text": "you don't use linter yeah the static analysis tools is just something that I",
    "start": "100200",
    "end": "105280"
  },
  {
    "text": "find very enjoyable because like i' I've been a job developer before and I was",
    "start": "105280",
    "end": "112119"
  },
  {
    "text": "always kind of frustrated with all the problems that popped up with the the code um so I worked with um es lint on",
    "start": "112119",
    "end": "121960"
  },
  {
    "text": "trying to figure out like what rules can we enable to make sure that these problems don't um don't end up in our",
    "start": "121960",
    "end": "129679"
  },
  {
    "text": "production code base and um at some point I started work looking at Elm",
    "start": "129679",
    "end": "135440"
  },
  {
    "text": "which is basically a very good fresh um New Perspective where all the problems",
    "start": "135440",
    "end": "141920"
  },
  {
    "text": "that I had with eslint or with job didn't appear anymore H but I still figured like H it",
    "start": "141920",
    "end": "148879"
  },
  {
    "text": "would still make sense to have a litter for Elm even though like almost none of the problem same problems apply does Elm",
    "start": "148879",
    "end": "156120"
  },
  {
    "text": "offer uh any powerful uh refactoring tools uh you mean for instance in IDs or",
    "start": "156120",
    "end": "163959"
  },
  {
    "text": "yes uh for instance uh Java developers enjoy very high level abstraction uh",
    "start": "163959",
    "end": "169480"
  },
  {
    "text": "refactoring tools such as uh they can highlight a block of code and say extract into method or they can even",
    "start": "169480",
    "end": "176760"
  },
  {
    "text": "take a a function and just reorder the parameter and it will update every call site at",
    "start": "176760",
    "end": "182560"
  },
  {
    "text": "once do you have anything like this for Elm uh we have to some extent but definitely not to the same level um but",
    "start": "182560",
    "end": "190360"
  },
  {
    "text": "it's just a matter of someone needs to uh be passionate about it and Tackle those issues",
    "start": "190360",
    "end": "197120"
  },
  {
    "text": "because we have so much more knowledge about uh what the the code is doing in",
    "start": "197120",
    "end": "203200"
  },
  {
    "text": "Elm compared to Java or other languages in my opinion that's it's all doable",
    "start": "203200",
    "end": "210319"
  },
  {
    "text": "uh so it's just a matter someone needs to do it uh we have some uh refactorings",
    "start": "210319",
    "end": "215439"
  },
  {
    "text": "like we can extract variables we can rename things but that's about it for now well and more of it that's pretty",
    "start": "215439",
    "end": "223879"
  },
  {
    "text": "nice what do you have for Zig do you have a good integration with I think vs vs code is the one where that supports",
    "start": "223879",
    "end": "231200"
  },
  {
    "text": "six the best yeah the best we have for now is a third- party uh language server",
    "start": "231200",
    "end": "237239"
  },
  {
    "text": "protocol implementation y um but it's it's kind of a best effort",
    "start": "237239",
    "end": "242400"
  },
  {
    "text": "implementation and you know third party it's not doesn't come with the compiler it can it can break separately um is is",
    "start": "242400",
    "end": "249840"
  },
  {
    "text": "it best effort because you're not the focus hasn't been there yet or yeah I mean I don't I don't work on it you know",
    "start": "249840",
    "end": "255760"
  },
  {
    "text": "someone from the community works on it and they they do a great job but um uh shout outs to uh August uh for working",
    "start": "255760",
    "end": "262600"
  },
  {
    "text": "on that um but there's only so much you can do without it being integrated with the actual type information that the",
    "start": "262600",
    "end": "269639"
  },
  {
    "text": "compiler has um but I will say that the investment in the F that we've done for",
    "start": "269639",
    "end": "274840"
  },
  {
    "text": "this for the future is uh designing the language without um with with",
    "start": "274840",
    "end": "281840"
  },
  {
    "text": "conditional compilation being um a first class part of the language rather than",
    "start": "281840",
    "end": "287120"
  },
  {
    "text": "being through you know textual uh pre-processor what do what do you mean",
    "start": "287120",
    "end": "292160"
  },
  {
    "text": "what does that change so you know if if I have uh an IDE for C or C++ code and",
    "start": "292160",
    "end": "298039"
  },
  {
    "text": "part of my my C Library API is that one of the functions it's just a macro that",
    "start": "298039",
    "end": "303280"
  },
  {
    "text": "gets replaced that gets textually replaced okay then you know refactoring tools they don't know how to deal with",
    "start": "303280",
    "end": "309360"
  },
  {
    "text": "this because it's not one language it's two languages and one of them is text",
    "start": "309360",
    "end": "315240"
  },
  {
    "text": "you know text based concatenation and it doesn't know how to yeah if your",
    "start": "315240",
    "end": "320520"
  },
  {
    "text": "language C if it was some muchat standard that you had macros that were",
    "start": "320520",
    "end": "325600"
  },
  {
    "text": "being replaced all over the place well then the tool could analyze it well okay",
    "start": "325600",
    "end": "331360"
  },
  {
    "text": "well we know that there's this macro in the codebase therefore it will be replaced at this location this location",
    "start": "331360",
    "end": "338080"
  },
  {
    "text": "this location um but if if those macros get to custom then it's really hard to",
    "start": "338080",
    "end": "343880"
  },
  {
    "text": "analyze right and therefore you lose all the guarantees about oh well I can't see any goto U",
    "start": "343880",
    "end": "352080"
  },
  {
    "text": "um um instruction here therefore I know that it's not doing anything weird but if you have macros that change the code",
    "start": "352080",
    "end": "359080"
  },
  {
    "text": "then you lose that kind of guarantee yeah you lose that kind of guarantee or you have to execute the pre-processor",
    "start": "359080",
    "end": "365840"
  },
  {
    "text": "and then assume that you know one set of defines is true and but maybe you know",
    "start": "365840",
    "end": "371000"
  },
  {
    "text": "if you your build system changes the option then this other if def defines it",
    "start": "371000",
    "end": "376560"
  },
  {
    "text": "the other way and so then you try to do a refactoring tool but then it's wrong for all the places where the other",
    "start": "376560",
    "end": "382240"
  },
  {
    "text": "definition would be activated yeah you can't you know you",
    "start": "382240",
    "end": "387599"
  },
  {
    "text": "can't solve the problem and also you have to point the the the eror at some point at some location in the code base",
    "start": "387599",
    "end": "393599"
  },
  {
    "text": "but if that code base doesn't exist because that's the result of applying the macro then what are you pointing at",
    "start": "393599",
    "end": "400880"
  },
  {
    "text": "well so yeah yeah that's a good point do you want to talk about uh errors versus warnings oh sure so during my talk I",
    "start": "400880",
    "end": "408560"
  },
  {
    "text": "talked about uh severity levels so some um LS they allow you to specify uh for",
    "start": "408560",
    "end": "414720"
  },
  {
    "text": "each rule how you want them to in influence the um exit code of of the of",
    "start": "414720",
    "end": "421319"
  },
  {
    "text": "the linter if you have a rule that is said to be an error then whatever it reports will cause the linter to exit",
    "start": "421319",
    "end": "429479"
  },
  {
    "text": "with an eror code meaning that it will fail uh cause your test to fail and you",
    "start": "429479",
    "end": "434879"
  },
  {
    "text": "will be notified and you will have to fix it and then you also have warnings",
    "start": "434879",
    "end": "440039"
  },
  {
    "text": "which um do not cause your lter to exit with an error code and uh as I said",
    "start": "440039",
    "end": "447919"
  },
  {
    "text": "during the talk that doesn't doesn't really make much sense because you're trying to enforce a",
    "start": "447919",
    "end": "454560"
  },
  {
    "text": "rule without trying to enforce it because you you enable a rule and you",
    "start": "454560",
    "end": "460120"
  },
  {
    "text": "say well if I I want this rule to be enforced but I also don't want it to cause the L the test to fail so",
    "start": "460120",
    "end": "467840"
  },
  {
    "text": "therefore it's not enforced and that doesn't that just doesn't make sense I completely agree like yeah uh okay but",
    "start": "467840",
    "end": "475800"
  },
  {
    "text": "let's try to uh explore this idea so um weal you talked about false positives",
    "start": "475800",
    "end": "483280"
  },
  {
    "text": "and you gave your example of your favorite lter rule which I also happen to have as a favorite which is uh dead",
    "start": "483280",
    "end": "490879"
  },
  {
    "text": "code unused variables unused functions get get rid of them yeah love that um",
    "start": "490879",
    "end": "497080"
  },
  {
    "text": "that one is not one that has false positives but what about a linter rule",
    "start": "497080",
    "end": "502479"
  },
  {
    "text": "that is useful but you it fundamentally",
    "start": "502479",
    "end": "507919"
  },
  {
    "text": "must have false positives in it can uh can you think of any or perhaps do you think that there should never be this",
    "start": "507919",
    "end": "514320"
  },
  {
    "text": "kind of lunter rule uh yeah so code smells are usually those kinds right um we also say",
    "start": "514320",
    "end": "522640"
  },
  {
    "text": "we always say it's code smell because it's probably a sign that there's something bad about",
    "start": "522640",
    "end": "529080"
  },
  {
    "text": "it but we don't know for sure sometimes it's good just like",
    "start": "529080",
    "end": "534600"
  },
  {
    "text": "cheese it smells bad but in some cases it's good",
    "start": "534600",
    "end": "541200"
  },
  {
    "text": "um so yeah Co coat smells um whatever that might be for your language or your",
    "start": "541680",
    "end": "548000"
  },
  {
    "text": "ecosystem if it smells like a stinky foot could be a bug could be blue cheese",
    "start": "548000",
    "end": "553240"
  },
  {
    "text": "or stinky foot or stinky foot and stinky foot is better than new",
    "start": "553240",
    "end": "558839"
  },
  {
    "text": "foot W oh I see I see your point your point is that um maybe it is smelly code",
    "start": "558839",
    "end": "564800"
  },
  {
    "text": "uh but there's no other way around it uh this problem is hairy and on the stinky foot has hair on it potentially I see",
    "start": "564800",
    "end": "572279"
  },
  {
    "text": "yeah yeah okay analogy has gone quite far uh but do you have an example of a",
    "start": "572279",
    "end": "577640"
  },
  {
    "text": "uh of a smell code smell lint I'm going somewhere with this I I'm",
    "start": "577640",
    "end": "583440"
  },
  {
    "text": "going to ask about um disable comments but I want to come up with an example first that we can",
    "start": "583440",
    "end": "590880"
  },
  {
    "text": "examine yeah the thing is I don't have too many examples because when we have",
    "start": "590880",
    "end": "596519"
  },
  {
    "text": "too many counter examples in when we're trunk to think of a rule we tend to not Implement that rule right right right",
    "start": "596519",
    "end": "605399"
  },
  {
    "text": "so yeah it's a bit tricky for me because I just didn't think about those for for",
    "start": "605399",
    "end": "611040"
  },
  {
    "text": "for Elm right but what what if you're stuck with a more Legacy language you know C C++ JavaScript um so maybe it's",
    "start": "611040",
    "end": "619800"
  },
  {
    "text": "we don't the language is not as nice and so we might have more smells yeah so yeah in those cases for instance you",
    "start": "619800",
    "end": "625600"
  },
  {
    "text": "could say well you should never access anything on null right okay um and imagine if we imagine",
    "start": "625600",
    "end": "632959"
  },
  {
    "text": "we're targeting JavaScript and not typescript we don't have any information about um whether something is notable or",
    "start": "632959",
    "end": "642720"
  },
  {
    "text": "not well then you pretty much have to targ to report everything right if",
    "start": "642720",
    "end": "650200"
  },
  {
    "text": "you don't say oh if this parameter is not null then uh you can do this if it's",
    "start": "650200",
    "end": "657680"
  },
  {
    "text": "null then you do something else but if you don't have those checks then you're going to have to",
    "start": "657680",
    "end": "662800"
  },
  {
    "text": "report every usage of this so I mean so what is the lint the lint is so yeah",
    "start": "662800",
    "end": "668560"
  },
  {
    "text": "let's imagine the lint is uh we want to report any uh field usage of a",
    "start": "668560",
    "end": "675800"
  },
  {
    "text": "potentially null value like if you do a do B then if we if you haven't checked",
    "start": "675800",
    "end": "683120"
  },
  {
    "text": "that a is no or not no well what if what if a comes from the function parameter",
    "start": "683120",
    "end": "688440"
  },
  {
    "text": "and it we're expecting it to never be null um how how would you tell it that",
    "start": "688440",
    "end": "693920"
  },
  {
    "text": "it shouldn't be null if you don't have types oh I see so you would need to assert that it's not null and that",
    "start": "693920",
    "end": "700079"
  },
  {
    "text": "assertion would make the linter error go away yeah okay this sounds okay sounds kind of nice actually yeah but you would",
    "start": "700079",
    "end": "706639"
  },
  {
    "text": "have a lot of false positive because you know oh well this function is never called with a null value we know it",
    "start": "706639",
    "end": "711760"
  },
  {
    "text": "because we have asserted before mhm but because the lter doesn't know that it it",
    "start": "711760",
    "end": "719079"
  },
  {
    "text": "has to force you to reassert that it's not null mhm well that answers my question because the next question I was",
    "start": "719079",
    "end": "725360"
  },
  {
    "text": "going to ask is uh why not I mean you mentioned that you think that there's never a a reason to have a disabled",
    "start": "725360",
    "end": "732399"
  },
  {
    "text": "comment uh for a ler I I wouldn't say never oh not never okay but it should be",
    "start": "732399",
    "end": "738880"
  },
  {
    "text": "very rare very rare and well you you already showed that in this case uh it could be disabled not with a comment but",
    "start": "738880",
    "end": "745800"
  },
  {
    "text": "with an assert yeah and that's better and that doesn't count as a disable comment right no that is you pushing",
    "start": "745800",
    "end": "751760"
  },
  {
    "text": "towards a better code or code that reads more like you what you want right that's",
    "start": "751760",
    "end": "758199"
  },
  {
    "text": "very nice yeah yeah I I have to admit during your talk I was thinking to myself there has to be lint where you",
    "start": "758199",
    "end": "765040"
  },
  {
    "text": "need to disable them but now that we're trying to think of any I'm coming up dry",
    "start": "765040",
    "end": "770120"
  },
  {
    "text": "yeah in some cases it will be like we don't have the information that we need uh but people can always change",
    "start": "770120",
    "end": "777320"
  },
  {
    "text": "their codes in a way that the ler can understand that hey here there's no",
    "start": "777320",
    "end": "782720"
  },
  {
    "text": "problem because we add it we add it in assert or we add it in if condition where it's we say is this value null",
    "start": "782720",
    "end": "791079"
  },
  {
    "text": "things like that so whenever you get a lint report you",
    "start": "791079",
    "end": "796600"
  },
  {
    "text": "always have to change your code be it through a disable comment or through changing the code mm that makes",
    "start": "796600",
    "end": "804160"
  },
  {
    "text": "sense do you want to talk about uh autofix or uh prompt fix fix prompts",
    "start": "804160",
    "end": "810360"
  },
  {
    "text": "sure yeah um so what I talked during my",
    "start": "810360",
    "end": "815480"
  },
  {
    "text": "presentation was that um LS they tend to have this feature where they",
    "start": "815480",
    "end": "821720"
  },
  {
    "text": "automatically fix some of the issues which is a very hard thing to do like I don't know if you've written any linter",
    "start": "821720",
    "end": "828760"
  },
  {
    "text": "rules in your career uh but writing a lter rule that does the right thing",
    "start": "828760",
    "end": "834560"
  },
  {
    "text": "always is very hard it takes a lot of gathering contact Gathering information",
    "start": "834560",
    "end": "839720"
  },
  {
    "text": "and do some logic to figure out is there a problem or is there no problem um and",
    "start": "839720",
    "end": "847079"
  },
  {
    "text": "writing a fixed for it is a lot harder because you need to gather a lot more information to make sure that you don't",
    "start": "847079",
    "end": "853440"
  },
  {
    "text": "change the code to something that will not compile that will break MH maybe even that um doesn't look weird code",
    "start": "853440",
    "end": "861800"
  },
  {
    "text": "style wise like the indentation still needs to be all right right and you might not have type information we might",
    "start": "861800",
    "end": "867120"
  },
  {
    "text": "not have type information um so yeah so fixes are super useful but",
    "start": "867120",
    "end": "874600"
  },
  {
    "text": "they they can be done in a trustworthy or untrustworthy way so the example that",
    "start": "874600",
    "end": "881240"
  },
  {
    "text": "I took was for eslint where I said um if you run eslint D- fix it will fix all",
    "start": "881240",
    "end": "886920"
  },
  {
    "text": "the issues that it that it can fix automatically um the problem is that if",
    "start": "886920",
    "end": "892959"
  },
  {
    "text": "you do that on a new project or you just enabled a very large um a new rule that",
    "start": "892959",
    "end": "899839"
  },
  {
    "text": "changes a lot of things then you have a very big diff MH and that diff can be",
    "start": "899839",
    "end": "905160"
  },
  {
    "text": "very hard to to analyze and the problem is that um the lter doesn't tell you",
    "start": "905160",
    "end": "911160"
  },
  {
    "text": "which errors were reported and it doesn't tell you um how it tried to fix",
    "start": "911160",
    "end": "916720"
  },
  {
    "text": "each individual uh issue and therefore you have a lot of trouble figure out",
    "start": "916720",
    "end": "921880"
  },
  {
    "text": "whether the change was safe um and whether you can push this to production so what I do with armor view is when you",
    "start": "921880",
    "end": "928839"
  },
  {
    "text": "run it with the fixed um flag uh it prompts you for every error um with a",
    "start": "928839",
    "end": "937160"
  },
  {
    "text": "fix like it tells you all the details like this is why I'm reporting this issue uh this is what you did wrong uh",
    "start": "937160",
    "end": "944440"
  },
  {
    "text": "but I think I can fix this would you like to accept this change uh yes or no",
    "start": "944440",
    "end": "950360"
  },
  {
    "text": "and by doing this process of prompting for every um uh error uh we can get to",
    "start": "950360",
    "end": "958920"
  },
  {
    "text": "trust the tool um because we see that it's doing the the correct thing we see well it",
    "start": "958920",
    "end": "965240"
  },
  {
    "text": "suggested this it reported this problem it suggested this fix that looks pretty good to me um and if I see that it does",
    "start": "965240",
    "end": "973399"
  },
  {
    "text": "that 100 times in a row I start trust it mhm mhm um and only when you trust the",
    "start": "973399",
    "end": "980600"
  },
  {
    "text": "tool then we have an Al review fix all um uh feature to fix all the issues in",
    "start": "980600",
    "end": "987000"
  },
  {
    "text": "one go and then prompt you yeah that's nice uh I have to admit though I I found myself thinking while watching um your",
    "start": "987000",
    "end": "993800"
  },
  {
    "text": "talk on this that uh you know you showed a 600 line diff and the alternative is",
    "start": "993800",
    "end": "1001000"
  },
  {
    "text": "you know uh a command line prompt that shows you a small diff you know I don't",
    "start": "1001000",
    "end": "1006639"
  },
  {
    "text": "know 100 times that adds up to 600 line diff Y and uh for me personally I",
    "start": "1006639",
    "end": "1013360"
  },
  {
    "text": "actually would rather pick the 600 line diff because on one hand it's nice that the",
    "start": "1013360",
    "end": "1018600"
  },
  {
    "text": "smaller prompt will give you the context but it's going to be the same issue over and over again right you know it did the",
    "start": "1018600",
    "end": "1025079"
  },
  {
    "text": "same fix the same fix the same fix if it's the same rule yes if there are like",
    "start": "1025079",
    "end": "1030520"
  },
  {
    "text": "if you have 200 rules that each do a different thing and fix the issue or fix",
    "start": "1030520",
    "end": "1036160"
  },
  {
    "text": "their issue in different ways then those compounds you have one transformation",
    "start": "1036160",
    "end": "1041199"
  },
  {
    "text": "then another transformation then another transformation and the code the beginning code and the end result code",
    "start": "1041199",
    "end": "1047120"
  },
  {
    "text": "they look very different right right so you don't know like how many errors were reported how many fixes were applied",
    "start": "1047120",
    "end": "1053520"
  },
  {
    "text": "because it might be multiple fixes in the same lines I understand yeah yeah and in that case it's gets complex if",
    "start": "1053520",
    "end": "1059799"
  },
  {
    "text": "you only have a single rule that reports all these issues yeah go use fix all if",
    "start": "1059799",
    "end": "1064840"
  },
  {
    "text": "you think that looking at a gen diff is good enough in this case go for it that's when that's why you have El fix",
    "start": "1064840",
    "end": "1071760"
  },
  {
    "text": "all so if so if the so maybe just uh you know if scrolling through the diff is is fastest and the changes are simple",
    "start": "1071760",
    "end": "1078480"
  },
  {
    "text": "enough then perfect yes but it's nice to have that advanced option for when it's",
    "start": "1078480",
    "end": "1084400"
  },
  {
    "text": "a little more tricky to understand what just happened yeah at least we have this tool that can break it down so you're",
    "start": "1084400",
    "end": "1091039"
  },
  {
    "text": "never just trying to trust you don't have to trust the tool you can you can have it the tool explain to you why is",
    "start": "1091039",
    "end": "1097320"
  },
  {
    "text": "it doing what it's doing you don't have to trust the tool right I see I see your point yeah you don't trust it you you",
    "start": "1097320",
    "end": "1103240"
  },
  {
    "text": "submit to it is what i' like to say because imagine you're a junior",
    "start": "1103240",
    "end": "1108520"
  },
  {
    "text": "developer you just started uh using JavaScript uh you just start using ESN",
    "start": "1108520",
    "end": "1114120"
  },
  {
    "text": "because someone told you it was good and you you run Isn fix and then it changes the code",
    "start": "1114120",
    "end": "1119799"
  },
  {
    "text": "in in very different ways and you have no clue like I don't I barely knew what",
    "start": "1119799",
    "end": "1125559"
  },
  {
    "text": "the code was doing before now I don't know what it's it's doing now well yeah if I'm a if I'm a junior developer I'm",
    "start": "1125559",
    "end": "1131880"
  },
  {
    "text": "going to assume that the tool knows better than me and accept it blindly right yeah I mean I I would just read",
    "start": "1131880",
    "end": "1138000"
  },
  {
    "text": "the diff if I was a junior developer that I would I would just assume that someone else knows better than me and",
    "start": "1138000",
    "end": "1143320"
  },
  {
    "text": "just say yes yes yes yes yes but that that's not always correct right because",
    "start": "1143320",
    "end": "1148640"
  },
  {
    "text": "the the fix is just a suggestion of a fix right right yeah the forance if you have an",
    "start": "1148640",
    "end": "1154360"
  },
  {
    "text": "unused variable the fix is to remove it right but potentially it's the code that",
    "start": "1154360",
    "end": "1159679"
  },
  {
    "text": "I just wrote and the correct solution to that is to start using it somewhere right right so that's also a reason why",
    "start": "1159679",
    "end": "1167000"
  },
  {
    "text": "I like to push towards uh prompting for every fix um is to notice oh there's",
    "start": "1167000",
    "end": "1173400"
  },
  {
    "text": "something that I did wrong and that the tool won't help me with yeah so the tool",
    "start": "1173400",
    "end": "1179200"
  },
  {
    "text": "is not doing something wrong but it uh there are sometimes better solutions to the problem okay so here's a question so",
    "start": "1179200",
    "end": "1186840"
  },
  {
    "text": "you're uh you've written Elm review and you have some you You' put a lot of thought into the um the workflow of",
    "start": "1186840",
    "end": "1193640"
  },
  {
    "text": "using leners uh okay so I've created the zig compiler and the zip compiler is it has",
    "start": "1193640",
    "end": "1200880"
  },
  {
    "text": "has more features than aot most compilers it's not a Bare Bones compiler I mean it has formatter built into it um",
    "start": "1200880",
    "end": "1207880"
  },
  {
    "text": "it has uh I mean it has unused variable errors and in a branch I haven't merged",
    "start": "1207880",
    "end": "1213360"
  },
  {
    "text": "it yet but I I have this D- fix uh feature in the compiler directly not a",
    "start": "1213360",
    "end": "1218679"
  },
  {
    "text": "separate linting tool yeah um so the topic I wanted to bring up for you is can we talk about the tradeoffs of",
    "start": "1218679",
    "end": "1227000"
  },
  {
    "text": "having uh linting errors so stuff like you know removing unused",
    "start": "1227000",
    "end": "1232880"
  },
  {
    "text": "variables um maybe other things like that too I'm sure that the C comper has",
    "start": "1232880",
    "end": "1238039"
  },
  {
    "text": "a lot of warnings that you don't have yeah we we do not have warnings only errors okay uh so sounds good to me",
    "start": "1238039",
    "end": "1245360"
  },
  {
    "text": "sounds good right okay but but we also don't have a linter yeah uh and and so people do find it annoying that when",
    "start": "1245360",
    "end": "1251840"
  },
  {
    "text": "they're trying to iterate quickly they are not allowed to have unused variables mhm and so I mean one obvious Cho choice",
    "start": "1251840",
    "end": "1258360"
  },
  {
    "text": "is just separate the linter uh step from the compilation step and that's that's",
    "start": "1258360",
    "end": "1264120"
  },
  {
    "text": "the workflow that you've described yes I think that's the way to go MH yeah okay",
    "start": "1264120",
    "end": "1269760"
  },
  {
    "text": "so then so then here's here's a downside though uh if I'm looking at someone's",
    "start": "1269760",
    "end": "1274880"
  },
  {
    "text": "code then uh maybe they didn't run the lunter step and so I'm looking at it and",
    "start": "1274880",
    "end": "1281440"
  },
  {
    "text": "I'm and I'm seeing this function and I'm trying to understand it and it's it's",
    "start": "1281440",
    "end": "1286919"
  },
  {
    "text": "annoying because it doesn't make sense why why is it doing this why is it doing this and then 30 minutes later I realized it's never called and that",
    "start": "1286919",
    "end": "1293360"
  },
  {
    "text": "explains it right yeah so it would have been nice if that lter guarantee was there but they just didn't run the lter",
    "start": "1293360",
    "end": "1299520"
  },
  {
    "text": "yet because it's not Tuesday I don't know you see what I'm saying so in which context are you looking at it because",
    "start": "1299520",
    "end": "1304960"
  },
  {
    "text": "that that changes the how you think about it as well for instance if you have a PO request mhm and the test are",
    "start": "1304960",
    "end": "1312760"
  },
  {
    "text": "green and you look at the code then you will still have the guarantee well all the",
    "start": "1312760",
    "end": "1318760"
  },
  {
    "text": "code that is there is used because the lter has run if you're looking at code that um is still being written like",
    "start": "1318760",
    "end": "1326279"
  },
  {
    "text": "you're pairing with someone or someone says hey I have a bug can you help me",
    "start": "1326279",
    "end": "1331520"
  },
  {
    "text": "fix it then sure uh the code might be unused but for a good reason because",
    "start": "1331520",
    "end": "1338360"
  },
  {
    "text": "they're still working on the function um and they may want to clean it up later so it really depends on the",
    "start": "1338360",
    "end": "1344880"
  },
  {
    "text": "context of where you're when you're looking at the uh the code I think uh you could also",
    "start": "1344880",
    "end": "1351080"
  },
  {
    "text": "say well if I want to look at any Zig code um on the internet uh just like in",
    "start": "1351080",
    "end": "1357080"
  },
  {
    "text": "a GI up gist or something gist um then I want to know whether um all the used",
    "start": "1357080",
    "end": "1364919"
  },
  {
    "text": "things are used or not but someone might Bas some non-c compiling Zin code as",
    "start": "1364919",
    "end": "1370679"
  },
  {
    "text": "well that's true so yeah I think if you don't have a CI running next to the code",
    "start": "1370679",
    "end": "1379360"
  },
  {
    "text": "that you're looking at or you just run the test then you don't have any guarantees anyway I think that's an",
    "start": "1379360",
    "end": "1386320"
  },
  {
    "text": "interesting point so yeah one kind of takeaway at least for me from this conversation is that uh linting is",
    "start": "1386320",
    "end": "1395760"
  },
  {
    "text": "fundamentally related to the idea of continuous integration yes like if you",
    "start": "1395760",
    "end": "1401440"
  },
  {
    "text": "have a lter but you don't enforce it at uh in your Ci or in your test Suite mhm",
    "start": "1401440",
    "end": "1407520"
  },
  {
    "text": "that's not news it's just like having warnings for everything right so we have this this phase of the development cycle",
    "start": "1407520",
    "end": "1414880"
  },
  {
    "text": "there's the the development phase and then there's the integration",
    "start": "1414880",
    "end": "1420760"
  },
  {
    "text": "phase and even if you have continuous integration that's still a separate phase that happens when you make the",
    "start": "1420760",
    "end": "1426279"
  },
  {
    "text": "patch set to send yeah that's interesting yeah what about okay so I'm just brainstorming here are there any",
    "start": "1426279",
    "end": "1434159"
  },
  {
    "text": "projects that justifiably do not have a separate inte integration phase So when",
    "start": "1434159",
    "end": "1439960"
  },
  {
    "text": "you say Integra integration phase you mean specifically what well I I'm I'm",
    "start": "1439960",
    "end": "1445440"
  },
  {
    "text": "I'm calling uh the part where you run the CI tests you maybe you make a PO request and then the tests run",
    "start": "1445440",
    "end": "1452320"
  },
  {
    "text": "automatically you know before you merge it that's the integration phase right the development phase would be on the",
    "start": "1452320",
    "end": "1457679"
  },
  {
    "text": "local developer's computer before they submit the patch so is there other there any projects where in the integration",
    "start": "1457679",
    "end": "1463840"
  },
  {
    "text": "phase doesn't make sense well where where the the team justifies viably doeses not have an integration face so I",
    "start": "1463840",
    "end": "1471440"
  },
  {
    "text": "I'm not trying to make a point I'm actually just musing out loud like I don't know maybe video game companies don't have an integration phase or maybe",
    "start": "1471440",
    "end": "1478279"
  },
  {
    "text": "their integration phase is you play test the code I don't know yeah I think there might be two use cases that I can think",
    "start": "1478279",
    "end": "1484640"
  },
  {
    "text": "of uh one is when the product or the project is very",
    "start": "1484640",
    "end": "1491240"
  },
  {
    "text": "early um in its development phase mhm and people don't care about the code",
    "start": "1491240",
    "end": "1496840"
  },
  {
    "text": "quality um like we've seen a talk from Henrik um about the fact that code",
    "start": "1496840",
    "end": "1504720"
  },
  {
    "text": "quality should be done after the prototyping because you want to iterate",
    "start": "1504720",
    "end": "1510760"
  },
  {
    "text": "you want to explore ideas and afterwards then you can think about code quality",
    "start": "1510760",
    "end": "1516279"
  },
  {
    "text": "mhm um but then you could just not do the linter step on that case as well potentially yeah um it's an approach",
    "start": "1516279",
    "end": "1524240"
  },
  {
    "text": "that I haven't tried out so I'm curious to to know how it will work out maybe you would only enable some of the",
    "start": "1524240",
    "end": "1529760"
  },
  {
    "text": "L rules and when for the code that you know has been um should be in the code",
    "start": "1529760",
    "end": "1535919"
  },
  {
    "text": "quality phase then you enable more rules for that specific part of the code base",
    "start": "1535919",
    "end": "1541520"
  },
  {
    "text": "maybe well that was U pretty interesting do you have any other topics that you uh",
    "start": "1541520",
    "end": "1547159"
  },
  {
    "text": "want to examine yeah um so from the little I've seen from Zig",
    "start": "1547159",
    "end": "1554080"
  },
  {
    "text": "um it cares a lot about guarantees like you you told me me like I see some Zig",
    "start": "1554080",
    "end": "1559120"
  },
  {
    "text": "code I want to know I want to have the guarantee that um this function here is",
    "start": "1559120",
    "end": "1564679"
  },
  {
    "text": "used that this function compiles that it will not crash um stuff like that things",
    "start": "1564679",
    "end": "1570399"
  },
  {
    "text": "that are enforced by compiler potentially by a lter or code for matter",
    "start": "1570399",
    "end": "1575840"
  },
  {
    "text": "and I feel like the same happens with Elm like we care a lot about guarantees",
    "start": "1575840",
    "end": "1581520"
  },
  {
    "text": "about adding constraints that give us a lot of things in return and I feel like that's something that is quite recent um",
    "start": "1581520",
    "end": "1589679"
  },
  {
    "text": "is uh so I've worked with JavaScript before where he had almost no guarantees",
    "start": "1589679",
    "end": "1595640"
  },
  {
    "text": "you worked with C where you have a lot of things can go wrong and I feel like the language that um pop out",
    "start": "1595640",
    "end": "1603840"
  },
  {
    "text": "recently um especially the ones that come with the functional programming",
    "start": "1603840",
    "end": "1609039"
  },
  {
    "text": "Paradigm they care a lot about giving guarantees about the code about how it",
    "start": "1609039",
    "end": "1615600"
  },
  {
    "text": "will um execute and I feel like is there a",
    "start": "1615600",
    "end": "1621399"
  },
  {
    "text": "trend to add more guarantees in languages is that something that we now all care about what do you think um I",
    "start": "1621399",
    "end": "1629240"
  },
  {
    "text": "actually do not think that that's the case because I do see a lot of uh contemporary new languages which they",
    "start": "1629240",
    "end": "1637159"
  },
  {
    "text": "don't seem to focus on it too much mhm do you have any examples oh you're going to make me burn burn in other projects",
    "start": "1637159",
    "end": "1644080"
  },
  {
    "text": "huh um I will give an example so uh the",
    "start": "1644080",
    "end": "1649880"
  },
  {
    "text": "example I will give will be Nim so Nim's emphasis is on uh flexibility and power",
    "start": "1649880",
    "end": "1656080"
  },
  {
    "text": "and so you can do some really impressive things with the uh with a Nim macros",
    "start": "1656080",
    "end": "1662320"
  },
  {
    "text": "like I think I think that they they Pride themselves on having uh a lot of the core syntax such",
    "start": "1662320",
    "end": "1669799"
  },
  {
    "text": "as just like plus and minus and Division and things like this uh defined in the",
    "start": "1669799",
    "end": "1675279"
  },
  {
    "text": "standard Library um you can also Implement async A8 with in in userland",
    "start": "1675279",
    "end": "1683039"
  },
  {
    "text": "in Nim which is pretty cool right it's pretty powerful that you can do that that's a fundamental transformation of",
    "start": "1683039",
    "end": "1689120"
  },
  {
    "text": "the control flow of a function to make it async weight yeah and they they do that with um like the powerful",
    "start": "1689120",
    "end": "1695960"
  },
  {
    "text": "metaprogramming tools that the language exposes you see where I'm going with this though you know if you're reading a",
    "start": "1695960",
    "end": "1701760"
  },
  {
    "text": "function does it use a powerful metaprogramming technique to fundamentally change what that function",
    "start": "1701760",
    "end": "1708320"
  },
  {
    "text": "does maybe you don't have that guarantee it doesn't say it explicitly it does it implicitly oh I don't know enough uh",
    "start": "1708320",
    "end": "1716039"
  },
  {
    "text": "yeah I don't know enough but I mean you could just be scrolled down and you're not looking at the top of the function or something like this do you see what",
    "start": "1716039",
    "end": "1721600"
  },
  {
    "text": "I'm saying yeah um whereas with Zig it's a trade-off so we don't we don't have some of these powers",
    "start": "1721600",
    "end": "1727720"
  },
  {
    "text": "like you can't Implement async a we in userland I it's part of the language syntax yeah um but if you're in the",
    "start": "1727720",
    "end": "1735200"
  },
  {
    "text": "middle of a function just looking at you know a piece of code you have a lot of guarantees that if you see you know this",
    "start": "1735200",
    "end": "1741679"
  },
  {
    "text": "variable and you see the definition of that variable somewhere else on outer scope it's the same thing you know it's",
    "start": "1741679",
    "end": "1748399"
  },
  {
    "text": "not it's not shadowed or uh redefined or something like this so yeah I think uh",
    "start": "1748399",
    "end": "1756640"
  },
  {
    "text": "yeah there's there's my uh my crafty I'm not not trying to burn",
    "start": "1756640",
    "end": "1761799"
  },
  {
    "text": "n but there's an example for you language yeah yeah so so what do you care about having so many G",
    "start": "1761799",
    "end": "1768880"
  },
  {
    "text": "just preference I mean it's just a my subjective opinion is that I I like to",
    "start": "1768880",
    "end": "1774440"
  },
  {
    "text": "make reading code uh the the easiest thing to do with the language and we see",
    "start": "1774440",
    "end": "1779760"
  },
  {
    "text": "this sometimes um uh sometimes people use um Advent of code to learn Zig and",
    "start": "1779760",
    "end": "1785320"
  },
  {
    "text": "it doesn't really go well for them because Advent of code is righton code you're never going to come back and read",
    "start": "1785320",
    "end": "1791159"
  },
  {
    "text": "it again you don't care about it it's it's a small you know 20 30 line program",
    "start": "1791159",
    "end": "1797000"
  },
  {
    "text": "and it's just it's write only but I mean Zig code is almost readon you know it's",
    "start": "1797000",
    "end": "1802799"
  },
  {
    "text": "meant it's obviously it's not read only because you have to edit it but you know Zig code is meant to be maintained it's",
    "start": "1802799",
    "end": "1808039"
  },
  {
    "text": "meant to be refactored moved around it's meant to be a large code base that you're trying to manage the complexity",
    "start": "1808039",
    "end": "1813679"
  },
  {
    "text": "of yeah and uh and secure and safe and yeah that ref Factor it and it will",
    "start": "1813679",
    "end": "1819480"
  },
  {
    "text": "still work yeah and and this I I have to tell you so I have um uh a lot of our l",
    "start": "1819480",
    "end": "1827799"
  },
  {
    "text": "errors I guess you can call them like unused variables uh there's categories of Errors so some require the type",
    "start": "1827799",
    "end": "1833480"
  },
  {
    "text": "Checker but some can operate directly on a file they don't need uh it doesn't it doesn't matter what flags you pass it",
    "start": "1833480",
    "end": "1840039"
  },
  {
    "text": "doesn't matter what Target you pass like we know if you have an unused variable just based on the file alone nothing",
    "start": "1840039",
    "end": "1846399"
  },
  {
    "text": "else um so I have this on on save so when I save a file in Zig it runs the",
    "start": "1846399",
    "end": "1851840"
  },
  {
    "text": "formatter and it will give me uh like an error list for unused variables uh for",
    "start": "1851840",
    "end": "1857240"
  },
  {
    "text": "or use of Undeclared variables like a certain class of errors that are detected on like just a file level those",
    "start": "1857240",
    "end": "1864159"
  },
  {
    "text": "are all reported just instantly yeah and I love it so much for refactoring",
    "start": "1864159",
    "end": "1870000"
  },
  {
    "text": "because all I have to do is just grab a block of code I can just cut and paste code I don't even read the code I just",
    "start": "1870000",
    "end": "1877519"
  },
  {
    "text": "cut it I paste it I put it somewhere else or if I want a piece of logic from this function I just move it yeah and",
    "start": "1877519",
    "end": "1883679"
  },
  {
    "text": "then I get errors for it's almost like I I reached into a robot and just like grabbed their arm and then I just put it",
    "start": "1883679",
    "end": "1891440"
  },
  {
    "text": "on another robot and then I just get an error for every wire I just need to like",
    "start": "1891440",
    "end": "1896840"
  },
  {
    "text": "reattach to the you know that's exposed and then it works yeah because of all these guarantees yeah I I love that uh",
    "start": "1896840",
    "end": "1905639"
  },
  {
    "text": "just that ability to move large pieces of coat around yeah do do you also call it if it composite works because we do",
    "start": "1905639",
    "end": "1912440"
  },
  {
    "text": "that in Elm all the time yeah I mean that it's subjective and I'm biased but I I definitely feel that way way yeah",
    "start": "1912440",
    "end": "1918720"
  },
  {
    "text": "yeah yeah I'm guessing there's also the bias like well I'm a senior engineer I",
    "start": "1918720",
    "end": "1924240"
  },
  {
    "text": "have experience so of course it's going to work because I do the right things does it also work for a junior well",
    "start": "1924240",
    "end": "1931360"
  },
  {
    "text": "maybe maybe yeah yeah there's there's lessons to be learned in order to get to that level but uh the uh the power is",
    "start": "1931360",
    "end": "1938200"
  },
  {
    "text": "there yeah yeah I absolutely understand the the need and the longing for that",
    "start": "1938200",
    "end": "1945519"
  },
  {
    "text": "kind of safety mhm we have it in El as well it's just amazing it's so",
    "start": "1945519",
    "end": "1951880"
  },
  {
    "text": "so it's so hard to imagine coding without it because I know that I'm going",
    "start": "1951880",
    "end": "1957360"
  },
  {
    "text": "to make a lot of mistakes and I just want some tool to help me figure out",
    "start": "1957360",
    "end": "1963240"
  },
  {
    "text": "that I miss that I messed up yeah when I'm going to mess up okay here's an interesting topic so I'm used to doing",
    "start": "1963240",
    "end": "1968720"
  },
  {
    "text": "imperative programming where the goal is that uh I write code and at the end of the day it's machine code you know and",
    "start": "1968720",
    "end": "1974760"
  },
  {
    "text": "that's that's the transformation getting a virtual machine or actual machine you're used to doing functional",
    "start": "1974760",
    "end": "1981159"
  },
  {
    "text": "programming in Elm mhm and you're used to having certain kinds of guarantees we",
    "start": "1981159",
    "end": "1986799"
  },
  {
    "text": "both understand guarantees but let's try to find uh let's try to find a bonus",
    "start": "1986799",
    "end": "1992039"
  },
  {
    "text": "guarantee that you have in Elm that I don't have in Zig because of imperative",
    "start": "1992039",
    "end": "1998000"
  },
  {
    "text": "versus functional yeah but you have to help me because uh you're the you have the expert on what yeah is available to",
    "start": "1998000",
    "end": "2004799"
  },
  {
    "text": "you I have referential transparency okay can you explain that um so",
    "start": "2004799",
    "end": "2010200"
  },
  {
    "text": "basically when you do an operation mhm if you take the same code and put it",
    "start": "2010200",
    "end": "2015320"
  },
  {
    "text": "somewhere else they will give you the same results so doing the same operation will give",
    "start": "2015320",
    "end": "2021399"
  },
  {
    "text": "you the same results for the same inputs you get the same outputs uh that is only",
    "start": "2021399",
    "end": "2026720"
  },
  {
    "text": "true if you don't have any side effects or side causes like accessing Global",
    "start": "2026720",
    "end": "2031919"
  },
  {
    "text": "variables mutating them um U making HT GDP calls things like",
    "start": "2031919",
    "end": "2038320"
  },
  {
    "text": "that um because in Elm uh you don't have imputations you don't have side effects",
    "start": "2038320",
    "end": "2043600"
  },
  {
    "text": "everything is just pure computation um based on the inputs and",
    "start": "2043600",
    "end": "2049679"
  },
  {
    "text": "based on constants uh you're always going to get the same um result for the",
    "start": "2049679",
    "end": "2055398"
  },
  {
    "text": "same input and that can give some um that can make some",
    "start": "2055399",
    "end": "2062760"
  },
  {
    "text": "simplifications a lot easier for instance if you do uh if um f of0 is equal to F of0 then do",
    "start": "2062760",
    "end": "2072118"
  },
  {
    "text": "something MH well in in a functional language or at least a pure functional",
    "start": "2072119",
    "end": "2077560"
  },
  {
    "text": "language we don't care what what f is we don't care about the implementation we",
    "start": "2077560",
    "end": "2082638"
  },
  {
    "text": "know that it's one function with the argument zero and we compare it to the",
    "start": "2082639",
    "end": "2088878"
  },
  {
    "text": "same function with the same arguments so we know those are always going to be",
    "start": "2088879",
    "end": "2093919"
  },
  {
    "text": "equal so we can simplify that um if expression to oh I see at the call site",
    "start": "2093919",
    "end": "2099560"
  },
  {
    "text": "you can simplify this yeah for inance I see those kinds of simplifications we can do we can also move code around uh",
    "start": "2099560",
    "end": "2107119"
  },
  {
    "text": "without caring about well did this um function depend on this other function",
    "start": "2107119",
    "end": "2112839"
  },
  {
    "text": "to be called first so we can move it very easily uh a",
    "start": "2112839",
    "end": "2118000"
  },
  {
    "text": "linter can do that for us and um you can do that with",
    "start": "2118000",
    "end": "2123560"
  },
  {
    "text": "imperative languages uh by either getting false positives or by doing a lot of um static",
    "start": "2123560",
    "end": "2130880"
  },
  {
    "text": "analysis to figure out whether this is okay or not to do but then it would only",
    "start": "2130880",
    "end": "2136880"
  },
  {
    "text": "work if the programmer cooperated and wrote functions that did not have side effects right yeah um yeah",
    "start": "2136880",
    "end": "2145560"
  },
  {
    "text": "if yeah or you would have false positives but you could also have the lter be very smart about it do a lot of",
    "start": "2145560",
    "end": "2152200"
  },
  {
    "text": "extensive research like does this function have any side effect does it access global variables that the other",
    "start": "2152200",
    "end": "2157960"
  },
  {
    "text": "function also does MH um and that is very very tricky to do I think I haven't",
    "start": "2157960",
    "end": "2164760"
  },
  {
    "text": "tried it but um I think in some cases you will reach",
    "start": "2164760",
    "end": "2170200"
  },
  {
    "text": "some um missing information for instance it's using a function from independency",
    "start": "2170200",
    "end": "2175520"
  },
  {
    "text": "if you don't know what the code in independency is doing then you don't know does that can",
    "start": "2175520",
    "end": "2182040"
  },
  {
    "text": "you call that function twice in a row without having any I see weird effect",
    "start": "2182040",
    "end": "2187560"
  },
  {
    "text": "yeah we don't know therefore we have some missing information and when we have missing information you either have false",
    "start": "2187560",
    "end": "2194760"
  },
  {
    "text": "positives or false negatives yeah I think that the bulk of imperative code",
    "start": "2194760",
    "end": "2200800"
  },
  {
    "text": "I'm trying to think when it when it might apply to the scenario or not I think the bulk of imperative code would",
    "start": "2200800",
    "end": "2207040"
  },
  {
    "text": "have a um not necessarily a global variable but all of these functions um",
    "start": "2207040",
    "end": "2214240"
  },
  {
    "text": "you know let's a b CDE e f or whatever uh they'd be methods so they would all",
    "start": "2214240",
    "end": "2219359"
  },
  {
    "text": "take as the first parameter a mutable pointer to some shared State effectively act as a global a global variable but",
    "start": "2219359",
    "end": "2226800"
  },
  {
    "text": "it's not Global but you know the sequence of function calls is these these methods are basically operating on",
    "start": "2226800",
    "end": "2233400"
  },
  {
    "text": "an object instance Y and mutating it and that's kind of the only mutations",
    "start": "2233400",
    "end": "2241359"
  },
  {
    "text": "so if we were able to in functional programming or in in imperative okay yeah I think that if we were able to",
    "start": "2241359",
    "end": "2248079"
  },
  {
    "text": "model these as uh if these mutations were able to be",
    "start": "2248079",
    "end": "2254359"
  },
  {
    "text": "to be modeled then we could we could have these uh these kind of abstractions of you know I I don't know what's the",
    "start": "2254359",
    "end": "2261680"
  },
  {
    "text": "purpose is for optimization or for linter warnings or something um the use case I'm thinking of is a simplifying",
    "start": "2261680",
    "end": "2267880"
  },
  {
    "text": "code like oh yeah you gave the example with with map right yeah if you do um",
    "start": "2267880",
    "end": "2273359"
  },
  {
    "text": "list. map on a on a list and and then you um you take the result of that and",
    "start": "2273359",
    "end": "2279760"
  },
  {
    "text": "you call list. concat which is like a flat map concat map um then you can just",
    "start": "2279760",
    "end": "2285920"
  },
  {
    "text": "use list. um concat map instead in and",
    "start": "2285920",
    "end": "2290960"
  },
  {
    "text": "you have multiple of these um similars and Transformations that you can do but",
    "start": "2290960",
    "end": "2297160"
  },
  {
    "text": "if you care about the if the order of operations matter then this can be a um",
    "start": "2297160",
    "end": "2304000"
  },
  {
    "text": "potentially breaking change in the sense that will break your code right right like I know that ok caml is a um",
    "start": "2304000",
    "end": "2311839"
  },
  {
    "text": "functional language but it doesn't have uh Purity so for instance whenever it",
    "start": "2311839",
    "end": "2317160"
  },
  {
    "text": "tries to do um list. map it will always try to keep the order of the individual",
    "start": "2317160",
    "end": "2324440"
  },
  {
    "text": "function calls the same so uh we we call list on map with a function f while we",
    "start": "2324440",
    "end": "2330920"
  },
  {
    "text": "call F of the first element then F of the second one element and so on and so on and they have have to keep that order",
    "start": "2330920",
    "end": "2338160"
  },
  {
    "text": "otherwise um the code might change right because theod might change is allowed to rely on",
    "start": "2338160",
    "end": "2345079"
  },
  {
    "text": "uh on that property yeah understand and if you have a pure functional language then move it around just you like you",
    "start": "2345079",
    "end": "2351240"
  },
  {
    "text": "want uh so this is called referential transpar transparency yeah I think so",
    "start": "2351240",
    "end": "2356680"
  },
  {
    "text": "I'm not entirely sure but I think that's it uh given the same inputs you get the same outputs mhm yeah well I mean that's",
    "start": "2356680",
    "end": "2363000"
  },
  {
    "text": "the the essence of a pure functional language right yeah yeah I I uh I enjoyed exploring some of these ideas",
    "start": "2363000",
    "end": "2369599"
  },
  {
    "text": "with you I'm I'm definitely walking away from here U I don't know rethinking some of my um conclusions about the role of",
    "start": "2369599",
    "end": "2377960"
  },
  {
    "text": "of linting in The Zo compiler so I appreciate that yeah I really enjoy this look as well and maybe you will make SE",
    "start": "2377960",
    "end": "2384760"
  },
  {
    "text": "functional language soon thanks for your time yeah thank you",
    "start": "2384760",
    "end": "2390960"
  },
  {
    "text": "too thanks for listening to this episode of the goto podcast head over to goopi",
    "start": "2390960",
    "end": "2396240"
  },
  {
    "text": "te to discover lots more content from the brightest minds and software",
    "start": "2396240",
    "end": "2401520"
  },
  {
    "text": "[Music]",
    "start": "2403120",
    "end": "2411160"
  },
  {
    "text": "development",
    "start": "2411160",
    "end": "2414160"
  }
]