[
  {
    "text": "so quick intro I'm at you can find me here on Twitter so if you've got any other questions just feel free to ping",
    "start": "11920",
    "end": "18310"
  },
  {
    "text": "ping me and I'm I basically work as a back-end engineer I've worked",
    "start": "18310",
    "end": "24180"
  },
  {
    "text": "specifically with go for about three four years now and at the moment I'm",
    "start": "24180",
    "end": "30970"
  },
  {
    "text": "working with a company called Mons oh so Mons oh are a new starter we form the",
    "start": "30970",
    "end": "36760"
  },
  {
    "text": "company February last year and basically we're trying to build a new kind of bank and that's kind of a bit of an",
    "start": "36760",
    "end": "44380"
  },
  {
    "text": "interesting thing to do banking for me is kind of like this I don't know if",
    "start": "44380",
    "end": "51190"
  },
  {
    "text": "anyone else has this kind of experience if you ever go into a bank branch that's super dated and certainly in the UK",
    "start": "51190",
    "end": "57579"
  },
  {
    "text": "banking is is terrible as a mobile experience it's kind of come on the last couple of years but you just can't do",
    "start": "57579",
    "end": "64570"
  },
  {
    "text": "the things you would expect to do from any other kind of internet product and you can book a taxi and it will arrive",
    "start": "64570",
    "end": "69790"
  },
  {
    "text": "in two minutes you can book food and arrives in half an hour but I still can't like pay someone I've never paid",
    "start": "69790",
    "end": "75909"
  },
  {
    "text": "before through any of my banking apps I have to like log into their website set them up as a new person and then I can",
    "start": "75909",
    "end": "82719"
  },
  {
    "text": "somehow do that and it's just a terrible customer experience and a lot of the",
    "start": "82719",
    "end": "87819"
  },
  {
    "text": "reason for that is because at their core banks have quite dated technology and",
    "start": "87819",
    "end": "93359"
  },
  {
    "text": "this for example is the system/360 fun fact if you wrote COBOL or other things",
    "start": "93359",
    "end": "99340"
  },
  {
    "text": "that run on this you can still run that on current IBM said series mainframes so that's great like you can run code from",
    "start": "99340",
    "end": "105429"
  },
  {
    "text": "50 years ago but it's not really ideal if you're trying to build new products",
    "start": "105429",
    "end": "110979"
  },
  {
    "text": "you have these extremely large monolithic systems at the core of your bank and lots of banks use extremely",
    "start": "110979",
    "end": "118479"
  },
  {
    "text": "modern technologies as a kind of veneer around these things but they can't",
    "start": "118479",
    "end": "124299"
  },
  {
    "text": "change the core and as an example Barclays in the UK spent three billion",
    "start": "124299",
    "end": "129729"
  },
  {
    "text": "pounds on IT infrastructure in 2014",
    "start": "129729",
    "end": "134890"
  },
  {
    "text": "who here has three billion pounds to spend on i.t anyone one put one guy cool so just",
    "start": "134890",
    "end": "143299"
  },
  {
    "text": "think what you could build with three billion pounds like probably something a",
    "start": "143299",
    "end": "148370"
  },
  {
    "text": "lot better than the current banking experience and we don't have three billion pounds not not by a long way and",
    "start": "148370",
    "end": "154719"
  },
  {
    "text": "we're basically trying to build something that normal people would use people who spend all their time on their",
    "start": "154719",
    "end": "160370"
  },
  {
    "text": "smartphone and they expect very quick interactions to sort out their finances they expect things to be automated and",
    "start": "160370",
    "end": "165680"
  },
  {
    "text": "taken care kind of automatically so we started last year we give out super fun",
    "start": "165680",
    "end": "172909"
  },
  {
    "text": "hot coral prepaid cards and we've basically been going through the process to become a fully regulated bank and",
    "start": "172909",
    "end": "179900"
  },
  {
    "text": "that kind of happened a couple of months ago so these cars will convert into normal current accounts probably early",
    "start": "179900",
    "end": "185329"
  },
  {
    "text": "next year um and these are connected to an app which is mobile first we kind of give",
    "start": "185329",
    "end": "192260"
  },
  {
    "text": "you spending analysis we tell you how much you spend for example I've paid James's sent me some money here and",
    "start": "192260",
    "end": "200060"
  },
  {
    "text": "actually shows his profile really basic things like icons of where I shopped and",
    "start": "200060",
    "end": "205729"
  },
  {
    "text": "that's just not something that any current bank does um I don't know why it they just unable to and they're kind of",
    "start": "205729",
    "end": "212359"
  },
  {
    "text": "constrained by their technology and all sorts of other fun things so you can do searching you can actually search with",
    "start": "212359",
    "end": "218090"
  },
  {
    "text": "emojis so we we look up coffee it's a very important feature we can attach",
    "start": "218090",
    "end": "224120"
  },
  {
    "text": "receipts I attach pictures of my brunch and other things like turn your card on",
    "start": "224120",
    "end": "229430"
  },
  {
    "text": "and off with a single tap so if you lose it you can you know like disable it cool",
    "start": "229430",
    "end": "235099"
  },
  {
    "text": "it's lost and then you can re-enable it magic and I mean this is obviously like",
    "start": "235099",
    "end": "241819"
  },
  {
    "text": "a boon flag in our database right but technically an enum but it's I mean",
    "start": "241819",
    "end": "247459"
  },
  {
    "text": "that's just something you can't do with any other Bank so if we're starting from",
    "start": "247459",
    "end": "252530"
  },
  {
    "text": "scratch we would obviously have some form of application and all right the beginning we're startups so we should",
    "start": "252530",
    "end": "258709"
  },
  {
    "text": "start off really really simple and inevitably we'll have some kind of applications and databases and over time",
    "start": "258709",
    "end": "265880"
  },
  {
    "text": "this is going to get progressively larger and in our case we",
    "start": "265880",
    "end": "271418"
  },
  {
    "text": "need to work with lots of distributed teams because we have to integrate with lots of different systems as soon as we expand internationally we have to",
    "start": "271580",
    "end": "277400"
  },
  {
    "text": "integrate with lots of payment systems and these things get really complicated for example we have to have actual",
    "start": "277400",
    "end": "283939"
  },
  {
    "text": "physical fibre delivered to physical data centers which is kind of a bit weird I just assumed you could put all",
    "start": "283939",
    "end": "291199"
  },
  {
    "text": "of that stuff in Amazon these days but that's not a thing so eventually these things have become",
    "start": "291199",
    "end": "297800"
  },
  {
    "text": "quite complicated and we potentially need more databases our application is",
    "start": "297800",
    "end": "303080"
  },
  {
    "text": "very big we maybe had some searchings and caching various other features that are essential for a bank and inevitably",
    "start": "303080",
    "end": "310819"
  },
  {
    "text": "and I mean the reason that we're kind of all in this room is that these things",
    "start": "310819",
    "end": "315909"
  },
  {
    "text": "like you hit problems with them and you're actually hidden quite quickly and I've worked on a lot of kind of big",
    "start": "315909",
    "end": "322789"
  },
  {
    "text": "projects where we just have one big application obviously we have to ship",
    "start": "322789",
    "end": "327979"
  },
  {
    "text": "that we have release cycles and you just can't do anything and so this is kind of like my impression on that so right from",
    "start": "327979",
    "end": "336199"
  },
  {
    "text": "the beginning we we decided we didn't want to do them and starting out by",
    "start": "336199",
    "end": "341690"
  },
  {
    "text": "breaking our application apart into essentially a series of micro services at the beginning is kind of a risky",
    "start": "341690",
    "end": "347419"
  },
  {
    "text": "prospect there's a number of things that you don't necessarily understand and you don't necessarily kind of break things",
    "start": "347419",
    "end": "353599"
  },
  {
    "text": "upon the right way but we were able to start isolating those things so we",
    "start": "353599",
    "end": "359270"
  },
  {
    "text": "started with a series of micro services fairly small these communicated via either synchronous or asynchronous",
    "start": "359270",
    "end": "366190"
  },
  {
    "text": "message buses and the main kind of principles behind this were again like",
    "start": "366190",
    "end": "372500"
  },
  {
    "text": "standard things that we've heard from people like Netflix Amazon Twitter are",
    "start": "372500",
    "end": "377659"
  },
  {
    "text": "our services have a single responsibility they do one specific job very well in order to decide what they",
    "start": "377659",
    "end": "385460"
  },
  {
    "text": "do we take our part our whole domain and bound the context so we have small",
    "start": "385460",
    "end": "392360"
  },
  {
    "text": "chunks of our business logic which we can isolate into unique applications and",
    "start": "392360",
    "end": "399370"
  },
  {
    "text": "then by doing that we can build very well-defined interfaces for example we can split apart",
    "start": "399370",
    "end": "405420"
  },
  {
    "text": "transaction model and our transaction in my bank account shouldn't really need to",
    "start": "405420",
    "end": "410460"
  },
  {
    "text": "know things about the merchant like if I buy something at a shop obviously that",
    "start": "410460",
    "end": "415890"
  },
  {
    "text": "has a logo but the transaction doesn't need to know about that we can relate those separately and we can also because",
    "start": "415890",
    "end": "422370"
  },
  {
    "text": "we're doing that we can apply different availability constraints to those so our transactional model needs to be extremely reliable but that kind of like",
    "start": "422370",
    "end": "429570"
  },
  {
    "text": "merchant data if it doesn't work we could kind of provide four bytes to customers and we can kind of abstract",
    "start": "429570",
    "end": "435270"
  },
  {
    "text": "that away and once we break these apart we then get really good composability so",
    "start": "435270",
    "end": "441240"
  },
  {
    "text": "we can break our services break our application apart into reusable units",
    "start": "441240",
    "end": "446970"
  },
  {
    "text": "reusable services and then actually we can build products much much quicker because we can reuse some of that",
    "start": "446970",
    "end": "453660"
  },
  {
    "text": "functionality so when we started we had",
    "start": "453660",
    "end": "461760"
  },
  {
    "text": "a number of different options and one of the things we we really wanted to look at was the kind of language we would",
    "start": "461760",
    "end": "467640"
  },
  {
    "text": "build most these things in in our case we chose go so has anyone here used go",
    "start": "467640",
    "end": "473990"
  },
  {
    "text": "yeah loads of people awesome so if anyone who hasn't used Go Go has a super",
    "start": "473990",
    "end": "480600"
  },
  {
    "text": "cool really cute mascot this is the Go gopher who makes an appearance on pretty",
    "start": "480600",
    "end": "487260"
  },
  {
    "text": "much every talk and the thing that I really like about Coe is that as a",
    "start": "487260",
    "end": "492570"
  },
  {
    "text": "language it's extremely simple so there aren't a million ways that you can do",
    "start": "492570",
    "end": "497640"
  },
  {
    "text": "things and go there's kind of like one way there are other ways but they're usually not easy ematic and it you're",
    "start": "497640",
    "end": "503700"
  },
  {
    "text": "almost fighting against the language to do things in a different way however in",
    "start": "503700",
    "end": "512580"
  },
  {
    "text": "addition to being statically typed which for a bank is quite useful we don't really want kind of we had type",
    "start": "512580",
    "end": "519300"
  },
  {
    "text": "conversions and things obviously rounding money is quite dangerous ego",
    "start": "519300",
    "end": "526080"
  },
  {
    "text": "also has a really comprehensive standard library so although the language itself is very simple there the language comes",
    "start": "526080",
    "end": "533190"
  },
  {
    "text": "with a huge number of that you can use and as an example the",
    "start": "533190",
    "end": "539000"
  },
  {
    "text": "HTTP server you can spin up a new server in about three lines of code and as of I",
    "start": "539000",
    "end": "544520"
  },
  {
    "text": "think go 1.6 or 1.7 that is now automatically HTTP to server so all",
    "start": "544520",
    "end": "552050"
  },
  {
    "text": "you'd have to do is take your code we compile it with the latest version ago and it will transparently upgrade your",
    "start": "552050",
    "end": "557750"
  },
  {
    "text": "clients to HTTP 2 if they support it and that's just something that's built into the language like the the standard",
    "start": "557750",
    "end": "563090"
  },
  {
    "text": "library has all these things built in on top of that the there is a number of",
    "start": "563090",
    "end": "569090"
  },
  {
    "text": "really cool language features so one really big one in go is those extremely",
    "start": "569090",
    "end": "575300"
  },
  {
    "text": "lightweight concurrency and by that I mean you can literally run any number of",
    "start": "575300",
    "end": "583160"
  },
  {
    "text": "functions just concurrently with each other almost too easily to be honest so",
    "start": "583160",
    "end": "588890"
  },
  {
    "text": "if we had a function for example which is going to handle a request this function call block so we'll execute them go off and we'll",
    "start": "588890",
    "end": "597710"
  },
  {
    "text": "kind of come back at some point in the future hopefully we have some timeouts if we're handling requests and we'll",
    "start": "597710",
    "end": "602990"
  },
  {
    "text": "assume that's dealt with if we want that to run concurrently say we are in a kind of loop that is reading off a socket and",
    "start": "602990",
    "end": "609620"
  },
  {
    "text": "with we're passing requests off to something else we can literally just put go before it and that will now fire that",
    "start": "609620",
    "end": "615650"
  },
  {
    "text": "off in a separate go routine and these long threads these are extremely",
    "start": "615650",
    "end": "621260"
  },
  {
    "text": "lightweight almost like green threads if anyone's kind of used those a long time ago but they're extremely lightweight",
    "start": "621260",
    "end": "628900"
  },
  {
    "text": "ways of running your Co concurrently and the reason they're so lightweight is when you far off a new go routine all",
    "start": "628900",
    "end": "635510"
  },
  {
    "text": "you're really doing is allocating like a K on the stack it's like really really small and in go are the stacks",
    "start": "635510",
    "end": "643810"
  },
  {
    "text": "automatically expand so you don't need to kind of worry about that the stock will start off really small is extremely",
    "start": "643810",
    "end": "650030"
  },
  {
    "text": "lightweight and then as you're kind of stack grows then go or dynamically allocate memory to that so in practice",
    "start": "650030",
    "end": "662480"
  },
  {
    "text": "you potentially have thousands tens of thousands even hundreds of thousands of these running",
    "start": "662480",
    "end": "667550"
  },
  {
    "text": "and go has a really good scheduler built-in so the scheduler will basically",
    "start": "667550",
    "end": "673550"
  },
  {
    "text": "run one operating system thread per call and then all dynamically scheduled in userspace",
    "start": "673550",
    "end": "678740"
  },
  {
    "text": "these go routines across those threads and if they block on i/o then it will kind of put that to the side and it will",
    "start": "678740",
    "end": "684709"
  },
  {
    "text": "schedule another go routine so that all of them can make progress if anyone wants to read about that is like really",
    "start": "684709",
    "end": "690380"
  },
  {
    "text": "really interesting about probably a bit bit too much for right now but the",
    "start": "690380",
    "end": "696380"
  },
  {
    "text": "really cool thing is like even Network IO isn't blocking so some of the talks I've seen before where we're using",
    "start": "696380",
    "end": "701470"
  },
  {
    "text": "specific frameworks in hate say Java they're literally blocking on a thread",
    "start": "701470",
    "end": "707510"
  },
  {
    "text": "while a request has gone to an external server now that's obviously like pretty poor design but in this case that",
    "start": "707510",
    "end": "713120"
  },
  {
    "text": "doesn't happen like we run go routines we run potentially hundreds of thousands of them and every time we fire off a",
    "start": "713120",
    "end": "721519"
  },
  {
    "text": "request to another server it actually goes into a separate i/o thread and all of the network is taken care of and it",
    "start": "721519",
    "end": "728390"
  },
  {
    "text": "will just kind of pass that back to the go routine as soon as there's data to be consumed so given that we have all of",
    "start": "728390",
    "end": "740360"
  },
  {
    "text": "these concurrent kind of almost threads running how do we then communicate",
    "start": "740360",
    "end": "747200"
  },
  {
    "text": "between them so if we need to share memory if we need to kind of share values between these things inevitably",
    "start": "747200",
    "end": "754520"
  },
  {
    "text": "we're going to have to put loads of mutexes and things around these and then go that's not the way that you do this",
    "start": "754520",
    "end": "760160"
  },
  {
    "text": "so go advocate sharing by communicating between processes rather than sharing memory and this is kind of based on CSP",
    "start": "760160",
    "end": "768110"
  },
  {
    "text": "if anyone's heard of that communicating sequential processes I think by Tony",
    "start": "768110",
    "end": "773959"
  },
  {
    "text": "Hall in the 70s and channels provide a way that go routines messages between",
    "start": "773959",
    "end": "780589"
  },
  {
    "text": "them and these can be either synchronous blocking calls or asynchronous so we can",
    "start": "780589",
    "end": "787670"
  },
  {
    "text": "buffer them and put them in a queue and this again is something built into the language so we can literally pass",
    "start": "787670",
    "end": "794779"
  },
  {
    "text": "messages between all our go routines and that allows us to do fun things like kind of funny",
    "start": "794779",
    "end": "799820"
  },
  {
    "text": "out funding in messages we can run worker pools and all of these things are kind of enabled and used in the standard",
    "start": "799820",
    "end": "805820"
  },
  {
    "text": "library just by being able to run go routines and having channels that communicate between them on top of that if you are building",
    "start": "805820",
    "end": "816350"
  },
  {
    "text": "services and deploying them go is statically linked or leased it is if you pass in a specific number of billed",
    "start": "816350",
    "end": "822890"
  },
  {
    "text": "flags so by default go will use Segoe which uses some of the go library of",
    "start": "822890",
    "end": "828200"
  },
  {
    "text": "some of the C libraries available on your own machine but if you disable C go you can statically compiled all of the",
    "start": "828200",
    "end": "835220"
  },
  {
    "text": "native go code and it will it will then run on any machine anywhere any machine",
    "start": "835220",
    "end": "840620"
  },
  {
    "text": "with the same architecture without any runtime dependencies and this is really cool if you then want to very easily",
    "start": "840620",
    "end": "846770"
  },
  {
    "text": "deploy binaries you can compile your whole go program to a single a single",
    "start": "846770",
    "end": "851840"
  },
  {
    "text": "file single binary you can put that somewhere you can drop that onto a machine you can execute it and that's it",
    "start": "851840",
    "end": "858650"
  },
  {
    "text": "you don't need a runtime you don't need to install loads of stuff on your machine so if you're kind of like want more immutable infrastructure then this",
    "start": "858650",
    "end": "865940"
  },
  {
    "text": "is like a really cool way to do that so if you want to start with go as a kind",
    "start": "865940",
    "end": "875210"
  },
  {
    "text": "of micro service framework there are a couple of things that you can use to do this so one of the big ones is go kits I",
    "start": "875210",
    "end": "883220"
  },
  {
    "text": "don't know if anyone's heard of this a couple of people so peter borgin who is",
    "start": "883220",
    "end": "889460"
  },
  {
    "text": "the kind of lead honest eye is doing I think a workshop later this week so if",
    "start": "889460",
    "end": "894920"
  },
  {
    "text": "you're interested definitely go along and go kit provides a kind of framework",
    "start": "894920",
    "end": "899930"
  },
  {
    "text": "that allows you to build services really quickly really simply and you can plug",
    "start": "899930",
    "end": "905030"
  },
  {
    "text": "in all sorts of things like service discovery and tracing and kind of all the other kind of tooling things that",
    "start": "905030",
    "end": "910370"
  },
  {
    "text": "you need out of the box and those are kind of all configurable in go kit",
    "start": "910370",
    "end": "915520"
  },
  {
    "text": "there's another one called micro which basically is quite similar but it takes",
    "start": "915520",
    "end": "921380"
  },
  {
    "text": "a kind of different philosophical approach so micro is more of a kind of ecosystem and as well as providing a",
    "start": "921380",
    "end": "927890"
  },
  {
    "text": "framework that you can use to build services it also provides lots of other tools so there are specific",
    "start": "927890",
    "end": "933670"
  },
  {
    "text": "discovery services that you can run id generation services all those kind of things",
    "start": "933670",
    "end": "938920"
  },
  {
    "text": "so if you want to kind of build all those things into a system really quickly then microbe provides quite a few of those unfortunately neither of",
    "start": "938920",
    "end": "947110"
  },
  {
    "text": "those existed when we start our company so we have one call month called time",
    "start": "947110",
    "end": "952450"
  },
  {
    "text": "it's available MIT licensed on github and it's basically a really kind of",
    "start": "952450",
    "end": "960180"
  },
  {
    "text": "really really simple framework so all it does is allows us to build kind of clients and servers that can communicate",
    "start": "960180",
    "end": "966310"
  },
  {
    "text": "to each other and then we can configure them in a kind of standardized way so in our case we started off with potentially",
    "start": "966310",
    "end": "974860"
  },
  {
    "text": "a number of services these are communicating to each other and the real question is how they communicate so in",
    "start": "974860",
    "end": "982300"
  },
  {
    "text": "our case right at the beginning we needed something that kind of worked down the box really really quickly among",
    "start": "982300",
    "end": "987760"
  },
  {
    "text": "way of kind of cheating is basically to put a message bus in the mail so if you use something I rub a McCue you",
    "start": "987760",
    "end": "994210"
  },
  {
    "text": "essentially get a request queue and you can name these request queues and then you can have n number of instances of",
    "start": "994210",
    "end": "1000300"
  },
  {
    "text": "what you can to kind of consume off that named queue and that gives you essentially service discovery for free",
    "start": "1000300",
    "end": "1006600"
  },
  {
    "text": "because you can just publish a message to a queue you don't actually need to know where the instances of a service on",
    "start": "1006600",
    "end": "1012720"
  },
  {
    "text": "and it will be consumed at some point by a queue um it also kind of gives you",
    "start": "1012720",
    "end": "1018300"
  },
  {
    "text": "kind of again cheating at load-balancing because the model here is a pull model",
    "start": "1018300",
    "end": "1024150"
  },
  {
    "text": "so you have a queue of requests that are outstanding you potentially have a TTL on those within the queues so you don't",
    "start": "1024150",
    "end": "1030660"
  },
  {
    "text": "fill the buffer and if we have one particularly performant instance and one",
    "start": "1030660",
    "end": "1036959"
  },
  {
    "text": "which has a really noisy neighbors so we have really bad performance then those will just consume messages at different",
    "start": "1036960",
    "end": "1042569"
  },
  {
    "text": "speeds and to be honest that got us quite a long way we started off in",
    "start": "1042570",
    "end": "1048890"
  },
  {
    "text": "February and we've been progressively adding more more services to our",
    "start": "1048890",
    "end": "1054600"
  },
  {
    "text": "infrastructure building out the features of our Bank core banking systems basically everything so 95% of the stuff",
    "start": "1054600",
    "end": "1061440"
  },
  {
    "text": "that we built is from scratch and we've kind of starts off at obviously zero",
    "start": "1061440",
    "end": "1067650"
  },
  {
    "text": "and we're now on about 140 or so services so the services that we run are",
    "start": "1067650",
    "end": "1072900"
  },
  {
    "text": "quite small they do again one thing one thing well and we run a number of copies",
    "start": "1072900",
    "end": "1079410"
  },
  {
    "text": "of those within our infrastructure for availability so when we started with",
    "start": "1079410",
    "end": "1085260"
  },
  {
    "text": "this that was absolutely fine because the only language we used was go and I",
    "start": "1085260",
    "end": "1091860"
  },
  {
    "text": "don't know if anyone's ever had the problem where you need to do something in a particular language and you don't",
    "start": "1091860",
    "end": "1098130"
  },
  {
    "text": "have any libraries for it whatsoever some like everyone must have hit this problem so if you're using a",
    "start": "1098130",
    "end": "1106260"
  },
  {
    "text": "particularly new language and go is kind of getting to the point now that it's quite mature you don't necessarily have",
    "start": "1106260",
    "end": "1111780"
  },
  {
    "text": "libraries that cover every possible eventuality and as an example if you're",
    "start": "1111780",
    "end": "1117270"
  },
  {
    "text": "integrating with financial infrastructure you basically have to use IBM MQ so who",
    "start": "1117270",
    "end": "1122460"
  },
  {
    "text": "has used IBM MQ here loads of people or good who enjoys using IBM MQ here",
    "start": "1122460",
    "end": "1128540"
  },
  {
    "text": "literally no one oh no one person okay sorry and in our case we which one to",
    "start": "1128540",
    "end": "1136800"
  },
  {
    "text": "move fast as a startup so writing well there are libraries which you allow you to use those particular things but to do",
    "start": "1136800",
    "end": "1144810"
  },
  {
    "text": "that we'd have to basically use the C bindings and compile them into our go binary which would be really terrible it",
    "start": "1144810",
    "end": "1152070"
  },
  {
    "text": "also doesn't have the same level of functionality is not as well tested whereas using something like Java for that one specific service gives us much",
    "start": "1152070",
    "end": "1159960"
  },
  {
    "text": "better flexibility and the problem we now have is if you have built a micro",
    "start": "1159960",
    "end": "1165690"
  },
  {
    "text": "service architecture and you have n number of services that are communicating towards between each other",
    "start": "1165690",
    "end": "1171770"
  },
  {
    "text": "you probably have some standardized way of doing this and if you've done it all in one language you've essentially built",
    "start": "1171770",
    "end": "1178260"
  },
  {
    "text": "a quite large tool chain so just in that language which means introducing any other languages into your infrastructure",
    "start": "1178260",
    "end": "1184530"
  },
  {
    "text": "becomes almost prohibitively expensive and actually the place that I worked out",
    "start": "1184530",
    "end": "1190260"
  },
  {
    "text": "before munzo was halo where we moved from like a PHP Java kind of",
    "start": "1190260",
    "end": "1197030"
  },
  {
    "text": "infrastructure there to one that was built in go with a couple of Java services for some",
    "start": "1197030",
    "end": "1203320"
  },
  {
    "text": "specific things and the problem we had there was we ended up with 198 go services and two Java services so we",
    "start": "1203320",
    "end": "1210610"
  },
  {
    "text": "have to somehow main maintain feature compatibility on these libraries even though only a tiny amount borrowing",
    "start": "1210610",
    "end": "1217060"
  },
  {
    "text": "structure was was doing that so a quick way around map is to use a client and",
    "start": "1217060",
    "end": "1224380"
  },
  {
    "text": "server the every language house which is obviously HTTP bit of a stupid things",
    "start": "1224380",
    "end": "1229690"
  },
  {
    "text": "have gone all the way full circle but the reason that we did this was because right the beginning we could get all of",
    "start": "1229690",
    "end": "1235300"
  },
  {
    "text": "those things like service discovery and load balancing free and we can write that in about three or four days whereas",
    "start": "1235300",
    "end": "1240370"
  },
  {
    "text": "in order to jump in straight away with kind of basically HTTP based services you need to think about all of these",
    "start": "1240370",
    "end": "1246880"
  },
  {
    "text": "kind of things so you need to be able to discover where your instances are which IPS they are ports if you're doing dns",
    "start": "1246880",
    "end": "1253600"
  },
  {
    "text": "to resolve them or some other discovery mechanism you need to load balance between them you obviously need circuit breaking if",
    "start": "1253600",
    "end": "1259960"
  },
  {
    "text": "some of them a slow will fail and the real question is how you do all of this and if you do all of that again in your",
    "start": "1259960",
    "end": "1268150"
  },
  {
    "text": "own language your your again building this big client and server library that to all of these things so in our case we",
    "start": "1268150",
    "end": "1277600"
  },
  {
    "text": "chose to simplify those quite significantly and we're actually using link addi in the middle to do quite a",
    "start": "1277600",
    "end": "1284170"
  },
  {
    "text": "lot these things so as anyone's seen a pinnacle from Twitter I see it's written in Scala so",
    "start": "1284170",
    "end": "1289900"
  },
  {
    "text": "it's not something we wanted to directly import into any of our services but linka D allows us to run that as",
    "start": "1289900",
    "end": "1295840"
  },
  {
    "text": "essentially a standalone proxy locally and we can offload all of these things",
    "start": "1295840",
    "end": "1302050"
  },
  {
    "text": "kind of into that proxy and because lots of instances are passing through this proxy it has a far better knowledge of",
    "start": "1302050",
    "end": "1308860"
  },
  {
    "text": "what's going on in our infrastructure which leaves our services like really really simple and they can still have",
    "start": "1308860",
    "end": "1316480"
  },
  {
    "text": "all of the kind of performance and flexibility we need but without having to maintain a huge amount of code to do",
    "start": "1316480",
    "end": "1322000"
  },
  {
    "text": "all these kind of complicated things you need in a micro service architecture",
    "start": "1322000",
    "end": "1327540"
  },
  {
    "text": "so to start with our the top of infrastructure we obviously have a load",
    "start": "1327590",
    "end": "1333630"
  },
  {
    "text": "balance that comes all of our traffickers into we go into some kind of routing layer so this is just going to",
    "start": "1333630",
    "end": "1338940"
  },
  {
    "text": "take a HTTP request decide where it's going to be routed to and drop it into our proxy and this is routed to an API",
    "start": "1338940",
    "end": "1347190"
  },
  {
    "text": "service now these services are no different they essentially still just",
    "start": "1347190",
    "end": "1353400"
  },
  {
    "text": "take HTTP but what we do is we define kind of our endpoints on our API by",
    "start": "1353400",
    "end": "1359760"
  },
  {
    "text": "these particular types of services and that means for example we have a public",
    "start": "1359760",
    "end": "1365640"
  },
  {
    "text": "API which has a web hook endpoint that allows you to register web hooks on your bank accounts and we can route all",
    "start": "1365640",
    "end": "1372270"
  },
  {
    "text": "things that go to the web hooks route through our proxy into this go binary",
    "start": "1372270",
    "end": "1377640"
  },
  {
    "text": "and then once we've done that we can kind of process that we're literally",
    "start": "1377640",
    "end": "1382680"
  },
  {
    "text": "going to validate the request to send that on to kind of Authenticator maybe kind of actually create the web hook and",
    "start": "1382680",
    "end": "1388050"
  },
  {
    "text": "register that for callbacks at some point in the future and these again have different databases and potentially",
    "start": "1388050",
    "end": "1394490"
  },
  {
    "text": "those can kind of call out to any external provider literally is just going to be a bog-standard HTTP server",
    "start": "1394490",
    "end": "1401340"
  },
  {
    "text": "that's going to process our request for us and the cool thing about this is because all I'm doing here is deploying",
    "start": "1401340",
    "end": "1408630"
  },
  {
    "text": "a new section or API and we have this routing automatically if I want to deploy any new functionality which for",
    "start": "1408630",
    "end": "1414630"
  },
  {
    "text": "infrastructure we don't touch any of the other services we can deploy services individually we can add new services we",
    "start": "1414630",
    "end": "1420420"
  },
  {
    "text": "can add new endpoints on to our API without any impact whatsoever and the only realistically be the worst thing",
    "start": "1420420",
    "end": "1427230"
  },
  {
    "text": "that possibly happen would be we deploy a number of instances and they consume all the CPU and memory on those",
    "start": "1427230",
    "end": "1432960"
  },
  {
    "text": "particular servers and kind of those crash as a result and then we'd get",
    "start": "1432960",
    "end": "1438900"
  },
  {
    "text": "replacements at some point so in go the way we do this is by defining a type",
    "start": "1438900",
    "end": "1446640"
  },
  {
    "text": "which we call a service and all that's going to do is take any request so it's a function that takes a request and",
    "start": "1446640",
    "end": "1452880"
  },
  {
    "text": "returns a response so if anyone's seen anything again like in pinnacle basically you you pass it",
    "start": "1452880",
    "end": "1460100"
  },
  {
    "text": "kind of defining your service as a function you just pass in some requests get a response back and you allow kind",
    "start": "1460100",
    "end": "1467090"
  },
  {
    "text": "of the the libraries to wrap all of these kind of filters around those and",
    "start": "1467090",
    "end": "1473649"
  },
  {
    "text": "given that we can use a bog standard HTTP routing library so we can register",
    "start": "1473740",
    "end": "1478820"
  },
  {
    "text": "routes on here and again each one of these so list register and D register is",
    "start": "1478820",
    "end": "1483920"
  },
  {
    "text": "again just a function that takes a request returns response and it can do anything we need to do that so this",
    "start": "1483920",
    "end": "1490910"
  },
  {
    "text": "stuff's like quite easy to do and go you can spin up HTTP server literally a few lines of code there's some really good",
    "start": "1490910",
    "end": "1497150"
  },
  {
    "text": "routing libraries and you can just register your function just straight away so the main problem we then have as",
    "start": "1497150",
    "end": "1505400"
  },
  {
    "text": "a bank is that we have to be really really reliable so it's all well and",
    "start": "1505400",
    "end": "1511160"
  },
  {
    "text": "good having like fails and our services going down when it's just kind of the app that's affected but if it's our card",
    "start": "1511160",
    "end": "1518660"
  },
  {
    "text": "payment infrastructure and no one can buy anything in the store then that's that's a really really big problem for",
    "start": "1518660",
    "end": "1524390"
  },
  {
    "text": "us and this again is kind of the the reason that we started off with this",
    "start": "1524390",
    "end": "1530300"
  },
  {
    "text": "kind of infrastructure is because we need that 24/7 availability we we can't",
    "start": "1530300",
    "end": "1535460"
  },
  {
    "text": "add all the banks in the UK have like overnight batch processes or their systems turn off for like five hours",
    "start": "1535460",
    "end": "1541700"
  },
  {
    "text": "overnight and and we can't really have that we we need our services to be on the whole time and that means even",
    "start": "1541700",
    "end": "1550460"
  },
  {
    "text": "though we're running in Amazon or any other cloud provider we will inevitably have failure that we have to deal with so in our case we obviously everyone is",
    "start": "1550460",
    "end": "1558470"
  },
  {
    "text": "using docker because it's so hot right now but in our case we can actually",
    "start": "1558470",
    "end": "1563690"
  },
  {
    "text": "compile our go binary we can statically link it and we put it in a scratch container so we don't have anything",
    "start": "1563690",
    "end": "1569540"
  },
  {
    "text": "inside that container at all there's not even a shell so if you had like a breakout like some kind of bug in our",
    "start": "1569540",
    "end": "1576650"
  },
  {
    "text": "code there's no shell to actually execute code within that container and we can then run those on kubernetes",
    "start": "1576650",
    "end": "1583370"
  },
  {
    "text": "so is anyone use kubernetes here cool a few people so from our perspective we",
    "start": "1583370",
    "end": "1588770"
  },
  {
    "text": "actually start off with measures and marathon and the because right the beginning we didn't feel Cuba natives was really kind",
    "start": "1588770",
    "end": "1594640"
  },
  {
    "text": "production level at that point and we had kind of mixed mixed experiences with",
    "start": "1594640",
    "end": "1600679"
  },
  {
    "text": "that we found operationally it was quite difficult to run especially if you aren't really a kind of Java shop which",
    "start": "1600679",
    "end": "1607250"
  },
  {
    "text": "were not so debugging it was quite difficult and overall I think the the",
    "start": "1607250",
    "end": "1612950"
  },
  {
    "text": "kubernetes kind of design architectural is is significantly better having said",
    "start": "1612950",
    "end": "1618440"
  },
  {
    "text": "that if you ever want to run it yourself on Amazon rather than using a self-hosted one to run that in are",
    "start": "1618440",
    "end": "1623450"
  },
  {
    "text": "highly available mode is still quite difficult so there are a few blogs around them and it's kind of a trial by",
    "start": "1623450",
    "end": "1629240"
  },
  {
    "text": "fire though but we've kind of tested our stuff quite a lot now and it's worked out quite well and the advantages we've",
    "start": "1629240",
    "end": "1636320"
  },
  {
    "text": "seen from that is this is we did a kind of migration in August so what two",
    "start": "1636320",
    "end": "1641779"
  },
  {
    "text": "months ago and this is the expenditure on our infrastructure so we started off with this red area which was our old",
    "start": "1641779",
    "end": "1648980"
  },
  {
    "text": "infrastructure and we spun up on new of structure and then we kind of progressively shut things down and the",
    "start": "1648980",
    "end": "1656090"
  },
  {
    "text": "reason that we've got great cost savings here is because we can pack our services much more densely and also we can use",
    "start": "1656090",
    "end": "1663169"
  },
  {
    "text": "spare capacity for things like our compilation jobs so we used to have really big Jenkins machines which would",
    "start": "1663169",
    "end": "1670220"
  },
  {
    "text": "like compile everything and push the resulting binaries up to s3 where as",
    "start": "1670220",
    "end": "1675710"
  },
  {
    "text": "Cuban entries makes it really easy for us to just run those with a lower priority using spare capacity so we don't need to run any of those servers",
    "start": "1675710",
    "end": "1681860"
  },
  {
    "text": "anymore so that's been a massive massive win for us so given that we have a",
    "start": "1681860",
    "end": "1689539"
  },
  {
    "text": "number of instances these service we can use a combination of communities and linker D in our case to kind of resolve",
    "start": "1689539",
    "end": "1697130"
  },
  {
    "text": "things like topology changes so if one of our services are explodes in a kind",
    "start": "1697130",
    "end": "1702950"
  },
  {
    "text": "of shower of flames at some point fairly soon we'll get a replacement automatically because we've defined i3",
    "start": "1702950",
    "end": "1710899"
  },
  {
    "text": "replicas of our pods in communities and equally if we get slow or kind of",
    "start": "1710899",
    "end": "1717140"
  },
  {
    "text": "transient errors linka d will kind of resolve these for us so internally is",
    "start": "1717140",
    "end": "1722450"
  },
  {
    "text": "using exponentially weighted moving average load balancer which will detect failures",
    "start": "1722450",
    "end": "1728030"
  },
  {
    "text": "become quite sensitive to latency and all these things kind of happen automatically and you can build these",
    "start": "1728030",
    "end": "1733610"
  },
  {
    "text": "things quite easily and go using a host pool and there's really a couple of really good libraries from bitly that",
    "start": "1733610",
    "end": "1739730"
  },
  {
    "text": "will do this for you but my experience is if you want to build like a micro service architecture you're kind of",
    "start": "1739730",
    "end": "1746630"
  },
  {
    "text": "putting all those things in your services is kind of the thing you should probably try and avoid because again",
    "start": "1746630",
    "end": "1751640"
  },
  {
    "text": "every time you want to add additional components you then need to build an exponentially weighted moving average",
    "start": "1751640",
    "end": "1757580"
  },
  {
    "text": "load balancer in that service in our language and you just have like a huge kind of step before you want to you want",
    "start": "1757580",
    "end": "1765230"
  },
  {
    "text": "to do that work and then the other thing we do um in RF structure is push as many",
    "start": "1765230",
    "end": "1773090"
  },
  {
    "text": "things as possible to being asynchronous so there are certain things we have to do which are synchronous for example if",
    "start": "1773090",
    "end": "1780500"
  },
  {
    "text": "if I buy something in a shop we obviously need to check I have enough money to actually be able to make that",
    "start": "1780500",
    "end": "1785540"
  },
  {
    "text": "payment and in order for that to happen we have to make some synchronous call through and get a response back to the",
    "start": "1785540",
    "end": "1792260"
  },
  {
    "text": "card Network and that doesn't have to be too quick but it does have to be a synchronous response however we use",
    "start": "1792260",
    "end": "1800169"
  },
  {
    "text": "Kafka to publish events of everything that's happened in our infrastructure and for example if we have a service",
    "start": "1800169",
    "end": "1807440"
  },
  {
    "text": "here we would have some kind of business event we'd publish that this has happened then any of elsinore",
    "start": "1807440",
    "end": "1813830"
  },
  {
    "text": "infrastructure can consume that and then",
    "start": "1813830",
    "end": "1820669"
  },
  {
    "text": "from these they can then make additional synchronous requests and if those fail the kind of queuing system will allow",
    "start": "1820669",
    "end": "1826220"
  },
  {
    "text": "them to retry with some kind of exponential back-off the problem with any kind of infrastructure like this is",
    "start": "1826220",
    "end": "1832820"
  },
  {
    "text": "inevitably you have no idea what's going on so I might know like this section and",
    "start": "1832820",
    "end": "1839210"
  },
  {
    "text": "someone else in the company all know that section and this is some something",
    "start": "1839210",
    "end": "1844940"
  },
  {
    "text": "that you have to deal with if you are making calls between different services so having well-defined interfaces which",
    "start": "1844940",
    "end": "1850130"
  },
  {
    "text": "allow you to essentially read the documentation rather than speaking in depth to different teams is kind of",
    "start": "1850130",
    "end": "1855350"
  },
  {
    "text": "really really useful for that the other thing that's really useful is",
    "start": "1855350",
    "end": "1860650"
  },
  {
    "text": "various tooling so someone used kind of tracing systems like Zipkin know okay a",
    "start": "1860650",
    "end": "1869420"
  },
  {
    "text": "couple of people so Zipkin allows you to trace a request as it goes all the way",
    "start": "1869420",
    "end": "1875510"
  },
  {
    "text": "through your infrastructure which if you have a number of services they all kind of crossing a request boundary that",
    "start": "1875510",
    "end": "1881090"
  },
  {
    "text": "that's extremely valuable because it's the only way you can really do bug things like this so go allows you to do",
    "start": "1881090",
    "end": "1887420"
  },
  {
    "text": "this really easily so given a request that's kind of propagating through three services we'd start right at the top we",
    "start": "1887420",
    "end": "1894350"
  },
  {
    "text": "in our API tag every request with a unique ID which is just a type for you it and then we pass that down through",
    "start": "1894350",
    "end": "1903350"
  },
  {
    "text": "each request and kind of we basically marshal at once the wire send it as",
    "start": "1903350",
    "end": "1909620"
  },
  {
    "text": "headers unmarshal it in the server and kind of pop it all the way down the stack and in go we can use the context",
    "start": "1909620",
    "end": "1918470"
  },
  {
    "text": "package so go how use this used to be actually an external package and it's",
    "start": "1918470",
    "end": "1924320"
  },
  {
    "text": "recently at 1.7 moved into the standard library so it's available built into the",
    "start": "1924320",
    "end": "1929330"
  },
  {
    "text": "language and the context package is essentially providing something like",
    "start": "1929330",
    "end": "1935150"
  },
  {
    "text": "thread-local variables so go doesn't have thread-local variables there aren't any threads and in a context it's",
    "start": "1935150",
    "end": "1942800"
  },
  {
    "text": "basically an object that is immutable so it's thread safe and we can store",
    "start": "1942800",
    "end": "1948080"
  },
  {
    "text": "values of any key and any value and that allows us to store our trace ID and pass",
    "start": "1948080",
    "end": "1954290"
  },
  {
    "text": "it all the way through so we can pass that ID all the way down and then each",
    "start": "1954290",
    "end": "1960890"
  },
  {
    "text": "one of these steps we can kind of send off instrumentation data and then we can",
    "start": "1960890",
    "end": "1965930"
  },
  {
    "text": "aggregate all of that we actually use a tool called phosphor internally but Zipkin basically does the same thing and",
    "start": "1965930",
    "end": "1972530"
  },
  {
    "text": "probably much better and then we get all of that data into something that is",
    "start": "1972530",
    "end": "1977960"
  },
  {
    "text": "completely unintelligible like this but obviously this is intended for a machine",
    "start": "1977960",
    "end": "1983600"
  },
  {
    "text": "consumption because we can take that and we can generate core graphs so this is an example",
    "start": "1983600",
    "end": "1989100"
  },
  {
    "text": "of a kind being charged in the store so we have our API right at the top we have",
    "start": "1989100",
    "end": "1995030"
  },
  {
    "text": "done this section that's synchronous which is kind of the minimum things we can do to charge someone's card we kind",
    "start": "1995030",
    "end": "2001610"
  },
  {
    "text": "of need to look up the cars we have to record the transaction update the balance kind of things like that and then as a part of that we fire an",
    "start": "2001610",
    "end": "2009650"
  },
  {
    "text": "asynchronous message on take Africa which is reliable and nothing else happens synchronously so in the app you",
    "start": "2009650",
    "end": "2017990"
  },
  {
    "text": "have a list of things essentially on your bank account that happened and at this point that is not appeared and it",
    "start": "2017990",
    "end": "2024890"
  },
  {
    "text": "will appear at some point because we have a durable queue but it's not essential that I appears immediately so",
    "start": "2024890",
    "end": "2031309"
  },
  {
    "text": "we can kind of shunt that off to like an asynchronous processor and then at some",
    "start": "2031309",
    "end": "2037309"
  },
  {
    "text": "point that will get picked up and we will take the transaction and we'll look up what the company was we'll try and",
    "start": "2037309",
    "end": "2043909"
  },
  {
    "text": "get a logo for it see if it's already got one kind of like add as much metadata to that as possible and then",
    "start": "2043909",
    "end": "2050030"
  },
  {
    "text": "we'll far another message asynchronously and then something picks that up and actually insert it into the customers",
    "start": "2050030",
    "end": "2055700"
  },
  {
    "text": "feed in their app and then that again finds something is infamously and then",
    "start": "2055700",
    "end": "2061700"
  },
  {
    "text": "at some point they get sent a push notification which looks something like this and the cool thing is here we have",
    "start": "2061700",
    "end": "2068090"
  },
  {
    "text": "a coffee cup emoji because it's a Starbucks which is clearly an extremely",
    "start": "2068090",
    "end": "2073878"
  },
  {
    "text": "important feature but the cool thing is that all of this stuff happens and you",
    "start": "2073879",
    "end": "2080060"
  },
  {
    "text": "get this before the receipt prints on the machine even though all of these",
    "start": "2080060",
    "end": "2085220"
  },
  {
    "text": "things have happened asynchronously but if anyone was broken your card would still work and you just get like a",
    "start": "2085220",
    "end": "2090618"
  },
  {
    "text": "delayed message like 10 seconds later or worst case scenario if it's too late we",
    "start": "2090619",
    "end": "2096648"
  },
  {
    "text": "wouldn't send the push notification but it would arrive and people can still use their card they can spend their money and they still have a very reliable",
    "start": "2096649",
    "end": "2102920"
  },
  {
    "text": "system even though we have all this additional functionality we want to provide in actual well in actuality this",
    "start": "2102920",
    "end": "2111109"
  },
  {
    "text": "is a massive lie what actually happens is that so there's lots of other things that happen and the other cool thing is",
    "start": "2111109",
    "end": "2118430"
  },
  {
    "text": "each one of these things we can aggregate log lines using a logging library we have this trace ID we can write that on every log",
    "start": "2118430",
    "end": "2125550"
  },
  {
    "text": "line we can pump that into analog occupation system and that means we get every log line for every one of these",
    "start": "2125550",
    "end": "2132630"
  },
  {
    "text": "requests even though they're on different servers different services and we can tie all of those things back",
    "start": "2132630",
    "end": "2137940"
  },
  {
    "text": "together and obviously expire them quite quickly because there's quite a lot of data and again you can use this kind of",
    "start": "2137940",
    "end": "2145200"
  },
  {
    "text": "data to aggregate kind of maps of your systems and like really understand kind of how these things work so why should",
    "start": "2145200",
    "end": "2153000"
  },
  {
    "text": "use go from my perspective go is a small simple and really easy language to learn",
    "start": "2153000",
    "end": "2159720"
  },
  {
    "text": "so we found it really easy to be able to like hire people obviously hiring is",
    "start": "2159720",
    "end": "2164730"
  },
  {
    "text": "quite difficult if it's language that not many people have learnt so having the ability to pick up really easy",
    "start": "2164730",
    "end": "2170730"
  },
  {
    "text": "idiomatic code has been incredible for us and I don't think we've had anyone",
    "start": "2170730",
    "end": "2175740"
  },
  {
    "text": "who's had any any problems of that at all on top of that go has excellent",
    "start": "2175740",
    "end": "2182190"
  },
  {
    "text": "concurrency really good communication the networking stacks amazing",
    "start": "2182190",
    "end": "2187950"
  },
  {
    "text": "so for micro services where essentially all you're doing is communicating over the network all the time that's kind of",
    "start": "2187950",
    "end": "2193859"
  },
  {
    "text": "like a really really good thing to have there are inevitably some downsides so",
    "start": "2193859",
    "end": "2201060"
  },
  {
    "text": "as I mentioned if you're integrating with kind of some specific technologies",
    "start": "2201060",
    "end": "2206820"
  },
  {
    "text": "there might be not be libraries that particular one tested there have historically been problems with vending",
    "start": "2206820",
    "end": "2212960"
  },
  {
    "text": "so if you have dependent libraries they obviously change over time and you need",
    "start": "2212960",
    "end": "2220470"
  },
  {
    "text": "to kind of pull all of that source code into your tree so the way that we do that is we actually vendor every version",
    "start": "2220470",
    "end": "2228359"
  },
  {
    "text": "into a single giant repository which is pretty huge but the advantages there is",
    "start": "2228359",
    "end": "2234390"
  },
  {
    "text": "that we can vet those dependencies as they pulled in so we obviously have to do things like change control is as a",
    "start": "2234390",
    "end": "2239790"
  },
  {
    "text": "financial company and we can vet those and we know that that is the code that's compiled and it's a deterministic build",
    "start": "2239790",
    "end": "2246330"
  },
  {
    "text": "every time so should you start things",
    "start": "2246330",
    "end": "2251400"
  },
  {
    "text": "with micro services probably quite a contentious thing I'd say the disadvantage of doing this is",
    "start": "2251400",
    "end": "2257540"
  },
  {
    "text": "when we started building a company I knew nothing about banking and I probably still don't know very much",
    "start": "2257540",
    "end": "2263700"
  },
  {
    "text": "about banking and if you don't know a huge amount about your your business that you're trying to build then it's",
    "start": "2263700",
    "end": "2270420"
  },
  {
    "text": "very difficult to make those kind of delineations between the services that you want to build and you end up with",
    "start": "2270420",
    "end": "2276660"
  },
  {
    "text": "interfaces that then change which then causes problems however if you do understand your infrastructure and you",
    "start": "2276660",
    "end": "2282750"
  },
  {
    "text": "understand your kind of product that you're building really well then it's kind of a really easy thing to do you",
    "start": "2282750",
    "end": "2288480"
  },
  {
    "text": "can easily pull these services out and pipe them across and go as a perfect language to do them and that's about it",
    "start": "2288480",
    "end": "2294450"
  },
  {
    "text": "thank you very much",
    "start": "2294450",
    "end": "2297680"
  },
  {
    "text": "so there are few questions yeah how do you transactionally commit events to",
    "start": "2305450",
    "end": "2312359"
  },
  {
    "text": "Kafka so Catholic itself we run in",
    "start": "2312359",
    "end": "2317989"
  },
  {
    "text": "cluster mode so you write to a partition try and remember exactly how the code",
    "start": "2317989",
    "end": "2323430"
  },
  {
    "text": "works basically we when a request comes in we will write those into Kafka the",
    "start": "2323430",
    "end": "2330869"
  },
  {
    "text": "credit card network is kind of an interesting one because it's essentially a two-phase commit we we will get we'll",
    "start": "2330869",
    "end": "2337049"
  },
  {
    "text": "get an authorization message we will write that into our transaction database if that fails then we return failure",
    "start": "2337049",
    "end": "2344099"
  },
  {
    "text": "back to the card Network if that succeeds but we still return failure then they kind of retry and if that",
    "start": "2344099",
    "end": "2350730"
  },
  {
    "text": "still fails then two days later it essentially gets undone by the card network as far as I actually going to",
    "start": "2350730",
    "end": "2357150"
  },
  {
    "text": "Kafka we we write everything to kind of partition so you have your key will",
    "start": "2357150",
    "end": "2363829"
  },
  {
    "text": "basically hash to a specific partition and you write it straight into them so",
    "start": "2363829",
    "end": "2370079"
  },
  {
    "text": "yeah there aren't enough to be failure modes I mean there always are in distributed systems but yeah Kafka kind",
    "start": "2370079",
    "end": "2376769"
  },
  {
    "text": "of means once it's committed it's definitely replicated to multiple machines ok go by default has a very",
    "start": "2376769",
    "end": "2384480"
  },
  {
    "text": "peculiar way of organizing source code files how do you structure your source code and why interesting and so go",
    "start": "2384480",
    "end": "2391799"
  },
  {
    "text": "stores code in packages and essentially",
    "start": "2391799",
    "end": "2396980"
  },
  {
    "text": "we would define a package as a folder with many files as long as they will have the same package name it doesn't",
    "start": "2396980",
    "end": "2402239"
  },
  {
    "text": "really matter how they're broken up across those files but we usually try and kind of break up as an example if we",
    "start": "2402239",
    "end": "2408119"
  },
  {
    "text": "have a service with multiple handlers so multiple kind of different requests that's going to handle each one of those",
    "start": "2408119",
    "end": "2413789"
  },
  {
    "text": "will go in a different file within a handler package and then go provides a",
    "start": "2413789",
    "end": "2419099"
  },
  {
    "text": "way to either export those or keep them internal within the package so we would",
    "start": "2419099",
    "end": "2424319"
  },
  {
    "text": "export which you basically by giving them a capital letter at the beginning you export kind of a defined interface",
    "start": "2424319",
    "end": "2431759"
  },
  {
    "text": "and the default thing is to basically keep everything encapsulated unless you specifically",
    "start": "2431759",
    "end": "2437670"
  },
  {
    "text": "want to export like a kind of node interface that okay how do you define so",
    "start": "2437670",
    "end": "2445200"
  },
  {
    "text": "next term sectional boundaries when multiple services are invoked within a single unit of work and what about",
    "start": "2445200",
    "end": "2451890"
  },
  {
    "text": "rollback undo the service number four out of five fails within",
    "start": "2451890",
    "end": "2458220"
  },
  {
    "text": "that unit of work so distributed transactions basically yeah that's",
    "start": "2458220",
    "end": "2463860"
  },
  {
    "text": "that's like not really a thing so basically the way we do this specifically using Kafka for those",
    "start": "2463860",
    "end": "2470760"
  },
  {
    "text": "things is Kafka is not really a queue it's a replicated kind of log and that",
    "start": "2470760",
    "end": "2477870"
  },
  {
    "text": "means that we define define our messages very specifically so every message has a specific schema and we publish those so",
    "start": "2477870",
    "end": "2487950"
  },
  {
    "text": "one worker will be consuming particular messages so if it can't process one of",
    "start": "2487950",
    "end": "2493230"
  },
  {
    "text": "those messages it basically means the entire system is down and that consumer will kind of that consumer in a consumer",
    "start": "2493230",
    "end": "2498840"
  },
  {
    "text": "group incalculable pause and kind of wait until we can then resume them so in",
    "start": "2498840",
    "end": "2504150"
  },
  {
    "text": "the case of specific the only case that's really counts is where you're moving money atomically which is",
    "start": "2504150",
    "end": "2509880"
  },
  {
    "text": "obviously something that's quite important and in that case we we do like",
    "start": "2509880",
    "end": "2515310"
  },
  {
    "text": "kind of two-phase commit in the database and again if that fails our Cod",
    "start": "2515310",
    "end": "2520950"
  },
  {
    "text": "processes upstream will send us a failure message and they retry that wall",
    "start": "2520950",
    "end": "2526410"
  },
  {
    "text": "most indefinitely so all I could really say is like if there's anything you can",
    "start": "2526410",
    "end": "2531960"
  },
  {
    "text": "ever do to avoid distributed transactions you should I'm sure you can by extremely expensive proprietary",
    "start": "2531960",
    "end": "2538830"
  },
  {
    "text": "software for it but there's nothing really in the open source world that will do that for you",
    "start": "2538830",
    "end": "2544200"
  },
  {
    "text": "so yeah we basically log transactions and then kind of retry them and alert if",
    "start": "2544200",
    "end": "2549510"
  },
  {
    "text": "those have failed his database support good and go what are using yeah so",
    "start": "2549510",
    "end": "2557280"
  },
  {
    "text": "database support is actually really good if you're using anything that's SQL based the standard library has an SQL",
    "start": "2557280",
    "end": "2562860"
  },
  {
    "text": "driver you can then play in specific database drivers into that and it gives you a standardized",
    "start": "2562860",
    "end": "2567970"
  },
  {
    "text": "interface essentially for like normal SQL databases we actually use Cassandra",
    "start": "2567970",
    "end": "2574349"
  },
  {
    "text": "which is because we was we used Sandra if like 95% of the data that we use",
    "start": "2574349",
    "end": "2581579"
  },
  {
    "text": "there are certain things you can't really use Cassandra for where you need kind of atomicity but Cassandra means",
    "start": "2581579",
    "end": "2589780"
  },
  {
    "text": "that we can run a distributed database we run it with quorum reads and writes within a data center and we route",
    "start": "2589780",
    "end": "2595720"
  },
  {
    "text": "request to the kind of correct place so that we can read and write a corn the",
    "start": "2595720",
    "end": "2601260"
  },
  {
    "text": "support for Cassandra is okay and go I'd say most of the problems mostly outages",
    "start": "2601260",
    "end": "2607900"
  },
  {
    "text": "we have a probably due to that and that's something that we are progressively improving but yeah a mixed",
    "start": "2607900",
    "end": "2616569"
  },
  {
    "text": "bag can you show code and go with a micro service mm-hmm some samples uh as",
    "start": "2616569",
    "end": "2625690"
  },
  {
    "text": "in some of my code yeah sure okay let's find something good",
    "start": "2625690",
    "end": "2632339"
  },
  {
    "text": "not very sure wasn't scream come maybe",
    "start": "2637619",
    "end": "2645130"
  },
  {
    "text": "not that whole thing go",
    "start": "2645130",
    "end": "2651660"
  },
  {
    "text": "okay so let's use the web poker service as an example yeah I am just trying to",
    "start": "2654580",
    "end": "2662440"
  },
  {
    "text": "find our first kill just close all the",
    "start": "2662440",
    "end": "2668080"
  },
  {
    "text": "other things I do okay uh so Oh wrong",
    "start": "2668080",
    "end": "2676750"
  },
  {
    "text": "screen yeah that one we have quite a lot",
    "start": "2676750",
    "end": "2682870"
  },
  {
    "text": "services but oh I can't see this at all",
    "start": "2682870",
    "end": "2687960"
  },
  {
    "text": "sorry everyone okay so if we have a look",
    "start": "2687960",
    "end": "2702580"
  },
  {
    "text": "on our um web poke API that I mentioned a minute ago our - libraries open source",
    "start": "2702580",
    "end": "2708100"
  },
  {
    "text": "so we basically in it with a few kind of known settings so all all go programs",
    "start": "2708100",
    "end": "2715360"
  },
  {
    "text": "have an extremely small there we go all go programs have a func main and this is",
    "start": "2715360",
    "end": "2723160"
  },
  {
    "text": "the entry point your entire program and in that all we really do is we define a service and then we run that service so",
    "start": "2723160",
    "end": "2729850"
  },
  {
    "text": "that kind of like an internal library the kicks off HTTP server and then all our handlers are doing is each one of",
    "start": "2729850",
    "end": "2736930"
  },
  {
    "text": "these let's find lists so if you want to list your web hooks which you can do by the",
    "start": "2736930",
    "end": "2743650"
  },
  {
    "text": "public API we have registered get slash which would be slash web hooks flash and",
    "start": "2743650",
    "end": "2750670"
  },
  {
    "text": "that is well this is kind of using a bit of a terrible compatibility layer",
    "start": "2750670",
    "end": "2756060"
  },
  {
    "text": "probably the wrong one to have picked this is going to take in a HTTP request",
    "start": "2756060",
    "end": "2763180"
  },
  {
    "text": "and some parameters and then it is going to check for an account ID it's going to",
    "start": "2763180",
    "end": "2770140"
  },
  {
    "text": "return a validation error and it checked if you authenticated we also pull out your OAuth client ID and then this is",
    "start": "2770140",
    "end": "2777100"
  },
  {
    "text": "the interesting part where we use protocol buffers anyone use protocol buffers few people",
    "start": "2777100",
    "end": "2784000"
  },
  {
    "text": "okay so protocol buffers for us are just a way of defining essentially message request response and they allow",
    "start": "2784000",
    "end": "2790590"
  },
  {
    "text": "you to compile that to any number of languages so it's really cool if you want to use request responses across a number of services and we just have our",
    "start": "2790590",
    "end": "2798360"
  },
  {
    "text": "particular response type and we make a request if anyone wants to come in like specifically ask me this is probably not",
    "start": "2798360",
    "end": "2804660"
  },
  {
    "text": "hugely useful on on this screen but I can walk you through kind of like a slightly more sample application what",
    "start": "2804660",
    "end": "2815250"
  },
  {
    "text": "turn ative x' to go did you consider a good question so actually in our case um",
    "start": "2815250",
    "end": "2821570"
  },
  {
    "text": "myself and a few other people worked at halo before so we moved from PHP and",
    "start": "2821570",
    "end": "2827880"
  },
  {
    "text": "Java kind of originally kind of monolithic system to a service-oriented",
    "start": "2827880",
    "end": "2833340"
  },
  {
    "text": "architecture that had kind of run full of services and then a few more services and then we rewrote that in a",
    "start": "2833340",
    "end": "2838560"
  },
  {
    "text": "combination of going Java and actually as a result of um go was kind of our default choice we did we did consider",
    "start": "2838560",
    "end": "2846510"
  },
  {
    "text": "Ruby for a really short period of time only because that was like super fast",
    "start": "2846510",
    "end": "2851640"
  },
  {
    "text": "startup kind of get approached hype out but that would never have been a kind of",
    "start": "2851640",
    "end": "2857160"
  },
  {
    "text": "long-term solution for a micro service architecture look you kind of suggest",
    "start": "2857160",
    "end": "2866310"
  },
  {
    "text": "splitting your problem into micro services is hard is this not something then can be done continuously rather",
    "start": "2866310",
    "end": "2872370"
  },
  {
    "text": "than upfront yes it is so if you're sorting all from scratch and you have a",
    "start": "2872370",
    "end": "2878040"
  },
  {
    "text": "really really basic product then you probably only have a handful of services and you can probably understand that problem well enough to break the problem",
    "start": "2878040",
    "end": "2884670"
  },
  {
    "text": "apart so in our case we obviously have some kind of known constants things like a bank account has transactions so we",
    "start": "2884670",
    "end": "2891450"
  },
  {
    "text": "have a transaction service we have a number of bank accounts so we have an account service equally people have a",
    "start": "2891450",
    "end": "2898350"
  },
  {
    "text": "profile with their name address and various other things and those things are very easily discernible the problem",
    "start": "2898350",
    "end": "2904650"
  },
  {
    "text": "comes if you then realize you haven't quite broken apart in the right way and that's something that's much easier if",
    "start": "2904650",
    "end": "2910650"
  },
  {
    "text": "you're doing a migration because you understand your problem domain much better than if you're building a problem",
    "start": "2910650",
    "end": "2915660"
  },
  {
    "text": "like building a company entire from scratch um so it is a continuous process and actually",
    "start": "2915660",
    "end": "2920940"
  },
  {
    "text": "on one of these slides I think in the",
    "start": "2920940",
    "end": "2931450"
  },
  {
    "text": "the one we had no mail as long as",
    "start": "2931450",
    "end": "2938980"
  },
  {
    "text": "there we go I'm sorry this is a good example where we we starts off with a kind of a slow growth and then we",
    "start": "2938980",
    "end": "2946090"
  },
  {
    "text": "rebuilt some things and actually deleted a large section of our infrastructure and then that's kind of gone up and down",
    "start": "2946090",
    "end": "2951369"
  },
  {
    "text": "and fluctuated as we've gone up and there have been many times where we've kind of refracted at one service into a",
    "start": "2951369",
    "end": "2956860"
  },
  {
    "text": "couple or delete those and that's definitely a continuous process did you",
    "start": "2956860",
    "end": "2963580"
  },
  {
    "text": "consider encapsulating that Java MQ and a go service we did however what we've",
    "start": "2963580",
    "end": "2971380"
  },
  {
    "text": "actually done is encapsulated literally in something which will take in messages",
    "start": "2971380",
    "end": "2976420"
  },
  {
    "text": "and call a specific other service which is go so we have a driver service that",
    "start": "2976420",
    "end": "2981520"
  },
  {
    "text": "essentially connects to MQ and we don't pull the messages off and that's virtual",
    "start": "2981520",
    "end": "2987490"
  },
  {
    "text": "it does so it's written in Scala and it's probably like 50 lines of code it's really really small and that means that",
    "start": "2987490",
    "end": "2993730"
  },
  {
    "text": "all we're doing there is pulling messages off and dispatching them to another service which is an NGO which we",
    "start": "2993730",
    "end": "2999670"
  },
  {
    "text": "then have all of our domains or chicken so it means it's like really nice and small and actually reusable so if we end",
    "start": "2999670",
    "end": "3006000"
  },
  {
    "text": "up having to connect to multiple different providers but with different configuration we can actually just configure like this set of instances of",
    "start": "3006000",
    "end": "3013619"
  },
  {
    "text": "that service to push data there and this one depreciate that okay that's it",
    "start": "3013619",
    "end": "3019200"
  },
  {
    "text": "remember to rate and thank you man thank you very much",
    "start": "3019200",
    "end": "3025040"
  },
  {
    "text": "you",
    "start": "3025310",
    "end": "3027370"
  }
]