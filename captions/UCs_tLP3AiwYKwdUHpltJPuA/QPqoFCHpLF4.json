[
  {
    "text": "okay we've got lots to go through so let's get through it so most people have heard about like the",
    "start": "5560",
    "end": "13080"
  },
  {
    "text": "Lambda calculus how many people have heard of Lambda calculus how many people have ever actually done",
    "start": "13080",
    "end": "18520"
  },
  {
    "text": "anything in it one person awesome a couple people yeah Tom's done a little bit of it so I'm not really going to go",
    "start": "18520",
    "end": "24599"
  },
  {
    "text": "into like the details of Lambda calculus and all of that it leads to church numerals and I find those a bit",
    "start": "24599",
    "end": "31680"
  },
  {
    "text": "pretentious um you know fancy list manipulation stuff like that um but the",
    "start": "31680",
    "end": "36920"
  },
  {
    "text": "code's really cool when all you have is a Lambda when all you have is a function",
    "start": "36920",
    "end": "42640"
  },
  {
    "text": "and you don't have anything else so we've all most people have kind",
    "start": "42640",
    "end": "47879"
  },
  {
    "text": "of heard of it but few people have really like actually gone in and done anything with it or actually seen why",
    "start": "47879",
    "end": "54920"
  },
  {
    "text": "and a lot of times if you do see people give talks on it it's things like here's how you build lists and they just kind",
    "start": "54920",
    "end": "61680"
  },
  {
    "text": "of put out the code so what I kind of what I thought it would be fun is to do",
    "start": "61680",
    "end": "68280"
  },
  {
    "text": "some coding with with a couple constraints the main constraint being that all we have is a",
    "start": "68280",
    "end": "73759"
  },
  {
    "text": "Lambda um and in fact it only has one single input and single output so a lot",
    "start": "73759",
    "end": "79920"
  },
  {
    "text": "of the times coding you can learn a lot if you put these really crazy constraints on what you're doing so I",
    "start": "79920",
    "end": "87079"
  },
  {
    "text": "thought what fun at a coding conference than to stand up here and actually live code stuff with you um the other thing",
    "start": "87079",
    "end": "93840"
  },
  {
    "text": "is we're going to we're going to do today in these 50 minutes we're going to build up um what are called the natural",
    "start": "93840",
    "end": "100520"
  },
  {
    "text": "numbers anybody heard about numbers they're pretty useful we're going to do them with something called Piano axioms",
    "start": "100520",
    "end": "108680"
  },
  {
    "text": "anybody heard of piano axioms awesome so piano was a 19th century mathematician",
    "start": "108680",
    "end": "115560"
  },
  {
    "text": "Italian ji piano um made these aums as",
    "start": "115560",
    "end": "121840"
  },
  {
    "text": "a sort of a statement about the natural numbers 0 1 2 all of those we're not",
    "start": "121840",
    "end": "128160"
  },
  {
    "text": "going to go into a lot of the sort of mathematical formalism about it but we're going to kind of go through",
    "start": "128160",
    "end": "134200"
  },
  {
    "text": "starting with just a Lambda and I'll show you what that looks like and we're",
    "start": "134200",
    "end": "139239"
  },
  {
    "text": "going to end up with the natural numbers fun coding exercise everybody's happy so",
    "start": "139239",
    "end": "145360"
  },
  {
    "text": "what I want to do is I want to look through the piano axioms and I'm sure all of you have them in your um clipboard ring like I do um so the piano",
    "start": "145360",
    "end": "154840"
  },
  {
    "text": "aums there's eight of them the first one is a pretty obvious one that zero is our is a natural number it's sort of like",
    "start": "154840",
    "end": "161040"
  },
  {
    "text": "the starting point the next four are equality axioms they talk about quality",
    "start": "161040",
    "end": "166920"
  },
  {
    "text": "this will take you back to grade school um for every number x xals x that's",
    "start": "166920",
    "end": "172440"
  },
  {
    "text": "reflexive X for everything X and Y if xal y then y equals z that's symmetric",
    "start": "172440",
    "end": "179280"
  },
  {
    "text": "uh for all numbers X Y and Z if xal Y and yals Z then xals Z that's is",
    "start": "179280",
    "end": "185000"
  },
  {
    "text": "transitive uh for all A and B this is an important one if B is a natural number and a equals B then a is also a natural",
    "start": "185000",
    "end": "191799"
  },
  {
    "text": "number this seems like kind of a weird one that it's we have to have an axiom about being closed under equality but",
    "start": "191799",
    "end": "197760"
  },
  {
    "text": "this is essential because it it means that if you have two things that you're saying are equal one of them isn't like",
    "start": "197760",
    "end": "202920"
  },
  {
    "text": "a cow or some other thing it's a natural number you can all you know if two things are equal they're both natural",
    "start": "202920",
    "end": "209159"
  },
  {
    "text": "numbers the next three are about what is called a successor function which we're going to build it's going to be awesome",
    "start": "209159",
    "end": "215519"
  },
  {
    "text": "uh for every number n s of N is a number so we're closed under succession I guess",
    "start": "215519",
    "end": "221519"
  },
  {
    "text": "or successor um for all numbers M andn this is important m equals n if and only if",
    "start": "221519",
    "end": "228120"
  },
  {
    "text": "the successor of m equals the successor of n this is effectively 0 equals 0 1 =",
    "start": "228120",
    "end": "234799"
  },
  {
    "text": "1 2al 2 but we're going to use this to Great Advantage um number eight says",
    "start": "234799",
    "end": "240280"
  },
  {
    "text": "that for every number n oh bye um the if",
    "start": "240280",
    "end": "246000"
  },
  {
    "text": "you find the successor of n equal to zero that's false so zero is kind of our",
    "start": "246000",
    "end": "251079"
  },
  {
    "text": "starting point and we'll actually use this one surprisingly um there's a ninth aium which is about induction which is",
    "start": "251079",
    "end": "257359"
  },
  {
    "text": "the way of saying that oh it's true for zero and one and it's true for everything so it's true for everything",
    "start": "257359",
    "end": "263600"
  },
  {
    "text": "um I'm going to skip that and just wave my arms a lot so okay um brief aside",
    "start": "263600",
    "end": "269280"
  },
  {
    "text": "about how I'm going to use Ruby most people would think that like hasco would be a great thing for this and it",
    "start": "269280",
    "end": "276280"
  },
  {
    "text": "would but we're going to use Ruby because cuz cuz well Ruby so um a Lambda",
    "start": "276280",
    "end": "283840"
  },
  {
    "text": "and Ruby gets written like this get an identifier um you don't need to know if",
    "start": "283840",
    "end": "290160"
  },
  {
    "text": "you don't know Ruby that's okay because most of the time when I'm done with this nobody has actually recognized that I've written Ruby um we get an identifier in",
    "start": "290160",
    "end": "297759"
  },
  {
    "text": "this case the identity function little stabby pointy thing um and then an X",
    "start": "297759",
    "end": "303960"
  },
  {
    "text": "which is your parameter we're only Ruby Ruby lambdas can take multiple parameters but we're only letting it",
    "start": "303960",
    "end": "309479"
  },
  {
    "text": "have one and what's inside of it is your return value in this case this is the",
    "start": "309479",
    "end": "315160"
  },
  {
    "text": "identity function um you can actually call Ruby paramet or",
    "start": "315160",
    "end": "321880"
  },
  {
    "text": "Ruby um lambas in two different ways you can use this",
    "start": "321880",
    "end": "328160"
  },
  {
    "text": "wonderful um dot parentheses syntax it looks like a method call or you can use this bracket",
    "start": "328160",
    "end": "335639"
  },
  {
    "text": "which looks like accessing an array and doesn't seem like it should actually execute the Lambda um but if you run",
    "start": "335639",
    "end": "344240"
  },
  {
    "text": "this and yeah that actually is my normal prompt um it does",
    "start": "344240",
    "end": "349639"
  },
  {
    "text": "run so we're of course going to use the crazy bracket one because why not the",
    "start": "349639",
    "end": "356520"
  },
  {
    "text": "other one has actually one more character and I I don't like to type that that much so let's get started",
    "start": "356520",
    "end": "362080"
  },
  {
    "text": "everybody's cool um we need a good starting place and a good starting place",
    "start": "362080",
    "end": "367759"
  },
  {
    "text": "as I learned last time I watched um I believe it's the sound of music is that it's at the beginning so",
    "start": "367759",
    "end": "376440"
  },
  {
    "text": "zero is a natural number that's a great place to start so let's start with that",
    "start": "376440",
    "end": "382240"
  },
  {
    "text": "so I'm going to actually write something that is is zero zero that seems like a pretty straightforward thing to write",
    "start": "382240",
    "end": "389360"
  },
  {
    "text": "but the problem is of course I don't know anything about this I don't know anything about iszero function I don't know anything about that zero statement",
    "start": "389360",
    "end": "396240"
  },
  {
    "text": "there we don't have any information at all and also axioms are about statements",
    "start": "396240",
    "end": "401759"
  },
  {
    "text": "of fact they're not about like just having a piece of code so really the Axiom is more something like this that I",
    "start": "401759",
    "end": "409599"
  },
  {
    "text": "can assert that there's a zero that there is something so now I've got this other function assert of course I don't",
    "start": "409599",
    "end": "415919"
  },
  {
    "text": "know anything about that either and I'm just making stuff up as I go along so let's take a step back and talk about",
    "start": "415919",
    "end": "423400"
  },
  {
    "text": "assert so the behavior we want from assert is I assert is something that I",
    "start": "423400",
    "end": "430360"
  },
  {
    "text": "want to use to figure out if a statement is valid whoops that wasn't oh if a statement is valid now what does",
    "start": "430360",
    "end": "439599"
  },
  {
    "text": "that mean I don't know yet but I know that if it's valid I wanted to print out",
    "start": "439599",
    "end": "445759"
  },
  {
    "text": "something like a t and if it's invalid I wanted to print out something like an F so it needs to tell the difference",
    "start": "445759",
    "end": "452039"
  },
  {
    "text": "between these two things and I'm going to make up two other functions and two other statements called true and",
    "start": "452039",
    "end": "458840"
  },
  {
    "text": "false so my assert function if I pass it true I would expect it to Output a",
    "start": "458840",
    "end": "466520"
  },
  {
    "text": "t right and if it's false I'm going to have it output an F this is just a",
    "start": "466520",
    "end": "472680"
  },
  {
    "text": "statement I can make up anything I want because that's I got nothing to work",
    "start": "472680",
    "end": "477759"
  },
  {
    "text": "with so we've got these two new functions now true and false remember everything's a function in this so now",
    "start": "477759",
    "end": "484599"
  },
  {
    "text": "I've got a little bit more information I can talk about aert now so what are true and false so I've got these two",
    "start": "484599",
    "end": "492199"
  },
  {
    "text": "statements so I'm going to do a little bit of circular logic here because that's always a great way to make",
    "start": "492199",
    "end": "498000"
  },
  {
    "text": "decisions so true is the thing that if I pass it to assert I see a t right and",
    "start": "498000",
    "end": "506800"
  },
  {
    "text": "false is the thing that if I pass it to assert I see and F that's great I can make up things as I",
    "start": "506800",
    "end": "513200"
  },
  {
    "text": "want um assert if I I'm going to say the definition of assert the behavior I",
    "start": "513200",
    "end": "519440"
  },
  {
    "text": "expect is that if I pass it a true I see a t and if I pass it a false I see an F",
    "start": "519440",
    "end": "529279"
  },
  {
    "text": "does seem kind of circular but the only way to really talk about things into to figure things out is how they behave",
    "start": "529279",
    "end": "535839"
  },
  {
    "text": "together CU if you abide by certain philosophy oph nothing actually exists",
    "start": "535839",
    "end": "541120"
  },
  {
    "text": "in reality except as they interact with other things that's kind of how I live",
    "start": "541120",
    "end": "546560"
  },
  {
    "text": "so we're going to do that so what can I know about assert now what I do know is",
    "start": "546560",
    "end": "551760"
  },
  {
    "text": "that assert accepts something and it it accepts something called a Boolean I'm just going to make this term",
    "start": "551760",
    "end": "558000"
  },
  {
    "text": "up I don't know if you've ever heard of this I'm going to make it up to mean true or false but we don't know what",
    "start": "558000",
    "end": "564800"
  },
  {
    "text": "assert actually has to do so we figured out a little bit about it that it needs a Boolean um if you look at assert and",
    "start": "564800",
    "end": "571560"
  },
  {
    "text": "you look at the definition and this sort of circular logic is that it's got to do",
    "start": "571560",
    "end": "576680"
  },
  {
    "text": "three things it has to figure out if I passed in a true or a false it's got to",
    "start": "576680",
    "end": "582279"
  },
  {
    "text": "figure out what to do so print a t or print an f and it also has to execute",
    "start": "582279",
    "end": "588880"
  },
  {
    "text": "that function so it's got to figure out what what are the cases choose which",
    "start": "588880",
    "end": "594519"
  },
  {
    "text": "case and then execute that case that's three things and of course that's way",
    "start": "594519",
    "end": "599560"
  },
  {
    "text": "too many things for a function to do will you know one of the core principles of the Lambda calculus and lambdas in",
    "start": "599560",
    "end": "606480"
  },
  {
    "text": "general is this concept called the single responsibility principle mostly because you only have like one line in",
    "start": "606480",
    "end": "612800"
  },
  {
    "text": "there and so you can't do much so what we're going to do is take a look at",
    "start": "612800",
    "end": "619160"
  },
  {
    "text": "assert and what we do know is that it needs to either puts a",
    "start": "619160",
    "end": "626440"
  },
  {
    "text": "t or I want the function of puts an",
    "start": "626440",
    "end": "631640"
  },
  {
    "text": "F so assert its job is to actually do one of these two",
    "start": "631640",
    "end": "638959"
  },
  {
    "text": "things so we've already mentioned booleans that are true and false these encapsulate the idea of two different",
    "start": "638959",
    "end": "644839"
  },
  {
    "text": "things right we've got them right up there so it seems reasonable to handle let them handle an actual Choice",
    "start": "644839",
    "end": "652399"
  },
  {
    "text": "mechanism so our booleans are the things that we're actually going to use to do the choosing but we need it one one more",
    "start": "652399",
    "end": "659680"
  },
  {
    "text": "construct we have three things to do we've got a a responsibility for assert we have a responsibility for our",
    "start": "659680",
    "end": "665639"
  },
  {
    "text": "booleans we have a third thing and I'm going to pull just a word out of the",
    "start": "665639",
    "end": "672079"
  },
  {
    "text": "dictionary and I'm going to call that if um I know it's kind of crazy so what",
    "start": "672079",
    "end": "680240"
  },
  {
    "text": "if's job is to do is to actually execute the final thing so it's sort of a",
    "start": "680240",
    "end": "687200"
  },
  {
    "text": "coordinator between my assert method and the Boolean itself I'm just making",
    "start": "687200",
    "end": "692560"
  },
  {
    "text": "this up and it's got two letters so it's okay um one of the things that I want to be able to say about it so I'm going to",
    "start": "692560",
    "end": "698880"
  },
  {
    "text": "I want to give a little bit of definition and little examples of it so if I give it a",
    "start": "698880",
    "end": "705760"
  },
  {
    "text": "true and I give it something that says you gave me a",
    "start": "705760",
    "end": "711399"
  },
  {
    "text": "true and then I give it something you know a second thing that puts you",
    "start": "711399",
    "end": "720360"
  },
  {
    "text": "gave me a false and I actually spell that",
    "start": "720360",
    "end": "725720"
  },
  {
    "text": "right um then I should see you gave me a true and",
    "start": "725720",
    "end": "732680"
  },
  {
    "text": "you gave me a false this is what I would like to have happen I would like the if statement to actually execute this it",
    "start": "732680",
    "end": "738839"
  },
  {
    "text": "coordinates between the Boolean and these two options for the sticklers out there um",
    "start": "738839",
    "end": "746399"
  },
  {
    "text": "I'm I am kind of breaking the Only lambdas Rule here I'm using some Ruby stuff to do puts and there's a string",
    "start": "746399",
    "end": "751800"
  },
  {
    "text": "there but that's for expediency have to bear with me a tiny bit here otherwise we're going to end up",
    "start": "751800",
    "end": "758240"
  },
  {
    "text": "spending all day generating numbers and letters and strings and lists and all of that and I don't really feel like doing",
    "start": "758240",
    "end": "763959"
  },
  {
    "text": "that today um so let's look again at this now",
    "start": "763959",
    "end": "769720"
  },
  {
    "text": "what is if what can I tell about if since I've wrote these examples so what",
    "start": "769720",
    "end": "775040"
  },
  {
    "text": "I can say is that if it's a function that when given true",
    "start": "775040",
    "end": "781959"
  },
  {
    "text": "executes the first function that I gave it and if I give it false it executes",
    "start": "781959",
    "end": "788680"
  },
  {
    "text": "the second function that's sort of the definition that's what I want this construct to",
    "start": "788680",
    "end": "795639"
  },
  {
    "text": "do um no because false executes the second function so I",
    "start": "797079",
    "end": "805160"
  },
  {
    "text": "want this to say the first time you gave me a true the second time you gave me a false so awesome so with this I can",
    "start": "805160",
    "end": "812959"
  },
  {
    "text": "start to define a little bit about if I can start to figure out a few things about it so what do we know we know that",
    "start": "812959",
    "end": "820720"
  },
  {
    "text": "if takes a Boolean right that's that first thing it returns a function that takes",
    "start": "820720",
    "end": "829360"
  },
  {
    "text": "something else because remember we only are accept one parameter per function that's this second thing the true case",
    "start": "829360",
    "end": "836920"
  },
  {
    "text": "and then it takes a false case like",
    "start": "836920",
    "end": "842639"
  },
  {
    "text": "that but I don't exactly know what's what goes here I know that I want the behavior to be if Boolean is true",
    "start": "842639",
    "end": "849720"
  },
  {
    "text": "execute true case if false false case so I I know that that's kind of",
    "start": "849720",
    "end": "856639"
  },
  {
    "text": "what the the functionality that I want so one thing we're going to be implementing a couple sort of functions",
    "start": "856639",
    "end": "863560"
  },
  {
    "text": "that technically take more than one parameter but because our constraint is only one parameter um um we have to do",
    "start": "863560",
    "end": "870560"
  },
  {
    "text": "this sort of like crazy indented passing in other functions and things like that",
    "start": "870560",
    "end": "875720"
  },
  {
    "text": "um I like to write it like this to sort of highlight that it actually is a three parameter function but because I'm silly",
    "start": "875720",
    "end": "882720"
  },
  {
    "text": "and put a constraint on myself I can't do that okay so also helps with some",
    "start": "882720",
    "end": "888320"
  },
  {
    "text": "indentation stuff so let's keep moving on um so the if statement is responsible for",
    "start": "888320",
    "end": "896240"
  },
  {
    "text": "the execution we decided that the boo Jan was responsible for choosing so we kind",
    "start": "896240",
    "end": "903279"
  },
  {
    "text": "of it would be nice if we could do this now what this says is hey",
    "start": "903279",
    "end": "911000"
  },
  {
    "text": "Boolean why don't you choose between these two and then whatever comes back I'm",
    "start": "911000",
    "end": "917360"
  },
  {
    "text": "going to execute I have to pass in the identity because remember we have single parameter functions so I can't just call",
    "start": "917360",
    "end": "923880"
  },
  {
    "text": "the function I have to give it something and identity is the closest thing we have to I don't care care like it's just",
    "start": "923880",
    "end": "931079"
  },
  {
    "text": "it's identity who has an identity it doesn't really matter nothing exists",
    "start": "931079",
    "end": "936440"
  },
  {
    "text": "okay so now we have a little bit about true and false now we've determined a few of",
    "start": "936440",
    "end": "942480"
  },
  {
    "text": "the behaviors or one core behavior that we need which is that true it takes a first parameter and it",
    "start": "942480",
    "end": "951759"
  },
  {
    "text": "takes a second parameter because that's what booleans do and what does it do it returns me the first one",
    "start": "951759",
    "end": "959160"
  },
  {
    "text": "it returns me the true case false on the other hand let me just",
    "start": "959160",
    "end": "965120"
  },
  {
    "text": "grab that false returns me the second",
    "start": "965120",
    "end": "972160"
  },
  {
    "text": "one so now this if statement works I pass these the true case and the",
    "start": "972160",
    "end": "979360"
  },
  {
    "text": "FSE case if Boolean happens to be true it will return me the first one I execute it great and let's see if it",
    "start": "979360",
    "end": "985560"
  },
  {
    "text": "runs and sure enough we have our little sample here working so now we have an if",
    "start": "985560",
    "end": "992560"
  },
  {
    "text": "statement we've we've Dei devised this crazy idea called boans so we can move on to assert now so",
    "start": "992560",
    "end": "1001199"
  },
  {
    "text": "of course our assert is pretty easy because we have",
    "start": "1001199",
    "end": "1006680"
  },
  {
    "text": "everything that we needed so if my Boolean is",
    "start": "1006680",
    "end": "1012880"
  },
  {
    "text": "true then print that otherwise there so I just check it",
    "start": "1012880",
    "end": "1019920"
  },
  {
    "text": "this is the kind of a standard way to write it now I can I",
    "start": "1019920",
    "end": "1026600"
  },
  {
    "text": "would expect my initial things that I wanted assert true and assert false to print tnf and sure enough they do so now",
    "start": "1026600",
    "end": "1035079"
  },
  {
    "text": "I have an assert method and of course everybody knows that you can't code if you don't have an assert method because",
    "start": "1035079",
    "end": "1040760"
  },
  {
    "text": "how do you know it works so now we have our testing framework which is really all you need",
    "start": "1040760",
    "end": "1047880"
  },
  {
    "text": "and we can come back so we've done a lot of work here just to",
    "start": "1047880",
    "end": "1053280"
  },
  {
    "text": "get sort of a basic thing and there's this weird thing too",
    "start": "1053280",
    "end": "1058480"
  },
  {
    "text": "here the reason you have to put this wrap this in a Lambda and I can't just",
    "start": "1058480",
    "end": "1064200"
  },
  {
    "text": "say if boan puts T is because Ruby is an eager evaluating language which means",
    "start": "1064200",
    "end": "1070679"
  },
  {
    "text": "that Ruby evaluates every function argument before it calls the",
    "start": "1070679",
    "end": "1076679"
  },
  {
    "text": "function and so if I did didn't have this Lambda like that it would actually",
    "start": "1076679",
    "end": "1083200"
  },
  {
    "text": "try to execute that puts T and the puts F and then it would go into the functions and you'd you'd end up with a",
    "start": "1083200",
    "end": "1089000"
  },
  {
    "text": "nail reference exception which is sort of the general exception that always happens in",
    "start": "1089000",
    "end": "1095919"
  },
  {
    "text": "Ruby um Okay so we've got our assert I'm going to jump just slightly ahead",
    "start": "1095919",
    "end": "1103679"
  },
  {
    "text": "because um if you have aert it always is nice to have refute",
    "start": "1103679",
    "end": "1110120"
  },
  {
    "text": "which just does this the other side we're going to use this later refute just says the Boolean should be",
    "start": "1110120",
    "end": "1116080"
  },
  {
    "text": "false um there's a whole another talk I'm putting together where we actually build up Boolean logic and and and not",
    "start": "1116080",
    "end": "1123159"
  },
  {
    "text": "and all of that stuff but um not this time so now we've got assert we can get back to this",
    "start": "1123159",
    "end": "1129600"
  },
  {
    "text": "thing ah assert so now we're back to actually doing something interesting if",
    "start": "1129600",
    "end": "1134760"
  },
  {
    "text": "we try to run this of course we get uninitialized constant is zero because I haven't defined that but",
    "start": "1134760",
    "end": "1141760"
  },
  {
    "text": "by defining assert I now have a little bit of information about is zero I know",
    "start": "1141760",
    "end": "1148039"
  },
  {
    "text": "that is zero has to take a parameter and it has to return a Boolean because I'm",
    "start": "1148039",
    "end": "1154640"
  },
  {
    "text": "asserting on it and I determined that assert takes a Boolean so I'm just going to return true because that's always the",
    "start": "1154640",
    "end": "1161919"
  },
  {
    "text": "easiest thing to do um we don't know anything about zero either the parameter",
    "start": "1161919",
    "end": "1167919"
  },
  {
    "text": "that comes in we do know that it's a function because everything's a function so since I don't",
    "start": "1167919",
    "end": "1173720"
  },
  {
    "text": "know anything about it I'm just going to make something up and give it my standin",
    "start": "1173720",
    "end": "1179480"
  },
  {
    "text": "for okay so now we're passing so we got our T so we've actually got a zero now",
    "start": "1179520",
    "end": "1186200"
  },
  {
    "text": "and we have a way to determine whether or not something is zero pretty cool right that's a lot of work so",
    "start": "1186200",
    "end": "1193360"
  },
  {
    "text": "here's our reward yay there's my cat Zack",
    "start": "1193360",
    "end": "1198880"
  },
  {
    "text": "okay so now the piano axioms have a part",
    "start": "1198880",
    "end": "1204080"
  },
  {
    "text": "about equality all we have right now is zero we've satisfied axm axium 1 we're",
    "start": "1204080",
    "end": "1209360"
  },
  {
    "text": "going to start talking about equality axium 2 here states that for every number x x equals x pretty",
    "start": "1209360",
    "end": "1215919"
  },
  {
    "text": "straightforward that's the symmetric property so we're going to come down here and say I can assert right that numbers",
    "start": "1215919",
    "end": "1224960"
  },
  {
    "text": "equal 0 and zero that's a a pretty that's what Axiom 2",
    "start": "1224960",
    "end": "1233559"
  },
  {
    "text": "says of course I don't know what numbers equal is so it'll help if I actually try to write that so numbers equal well what",
    "start": "1233559",
    "end": "1241600"
  },
  {
    "text": "is it I know it's a Lambda that takes something because I've got the Axiom",
    "start": "1241600",
    "end": "1247720"
  },
  {
    "text": "that tells me that it's comparing two things I know that it takes two parameters so I'm going to take the",
    "start": "1247720",
    "end": "1253640"
  },
  {
    "text": "first and the second parameter now all we have in our",
    "start": "1253640",
    "end": "1259200"
  },
  {
    "text": "numbering system is zero and 0 equals z we don't have any other things so what should this return",
    "start": "1259200",
    "end": "1266760"
  },
  {
    "text": "I know it has to return a Boolean well the simplest thing for it to return is true because as it stands that's all I",
    "start": "1266760",
    "end": "1274600"
  },
  {
    "text": "actually know and if I run there it is I'm still I'm passing again and and life",
    "start": "1274600",
    "end": "1280200"
  },
  {
    "text": "is good so life is really simple this philosophical Point life is simple when",
    "start": "1280200",
    "end": "1286360"
  },
  {
    "text": "all you have is zero okay that's my statement of fact about the",
    "start": "1286360",
    "end": "1291640"
  },
  {
    "text": "world so let's bu let's move onward to the building of sort of the natural",
    "start": "1291640",
    "end": "1296960"
  },
  {
    "text": "numbers we've started at zero we actually kind of need to move up otherwise nothing is really that",
    "start": "1296960",
    "end": "1302480"
  },
  {
    "text": "interesting so let's take a look at these successor functions we kind of instinctively know that the successor",
    "start": "1302480",
    "end": "1308200"
  },
  {
    "text": "function is sort of like plus one or it's it's the next number in there but we can't use our intuition on any of",
    "start": "1308200",
    "end": "1314679"
  },
  {
    "text": "this cuz of course we're using these axioms to build up the natural number so if we come down and talk about so for",
    "start": "1314679",
    "end": "1322640"
  },
  {
    "text": "every number n the successor of N is a number seems pretty straightforward so",
    "start": "1322640",
    "end": "1328000"
  },
  {
    "text": "what I can come I can say is let's start building this function so if I come up and I say",
    "start": "1328000",
    "end": "1333960"
  },
  {
    "text": "successor well it's a function that takes a",
    "start": "1333960",
    "end": "1339000"
  },
  {
    "text": "number it has to return me a natural number because the Axiom says that the",
    "start": "1339400",
    "end": "1344600"
  },
  {
    "text": "successor of N is a natural number well I only have two natural numbers that I know about zero and the successor of",
    "start": "1344600",
    "end": "1351360"
  },
  {
    "text": "zero and it seems kind of strange for the successor of Z to return the successor of0 so since it doesn't tell",
    "start": "1351360",
    "end": "1359200"
  },
  {
    "text": "me anything else I'm just going to choose it to return zero still only kind of have zero but everything's happy now",
    "start": "1359200",
    "end": "1366720"
  },
  {
    "text": "so since it's a natural number we can use our number equality",
    "start": "1366720",
    "end": "1372480"
  },
  {
    "text": "because where is it this thing for all A and B if B is a",
    "start": "1372480",
    "end": "1377520"
  },
  {
    "text": "natural number and they're equal their natural numbers so I can actually write that the",
    "start": "1377520",
    "end": "1383919"
  },
  {
    "text": "numbers equal the successor of zero and the successor of",
    "start": "1383919",
    "end": "1391120"
  },
  {
    "text": "zero how do I know that that's true there we",
    "start": "1391120",
    "end": "1396320"
  },
  {
    "text": "go I know this is true because I have the Axiom that",
    "start": "1396320",
    "end": "1403840"
  },
  {
    "text": "says if xal y 0 equals 0 then the success",
    "start": "1403840",
    "end": "1409600"
  },
  {
    "text": "that's this one 0 equals 0 if and only if the successors of 0 is equal to the",
    "start": "1409600",
    "end": "1415640"
  },
  {
    "text": "successors of 0 so I can make this statement this bold bold statement and I",
    "start": "1415640",
    "end": "1420960"
  },
  {
    "text": "can run my tests and sure enough it's true as I've said a couple times life is",
    "start": "1420960",
    "end": "1426200"
  },
  {
    "text": "super easy when all you have is zero so this point number equals always returns",
    "start": "1426200",
    "end": "1431919"
  },
  {
    "text": "true um it doesn't give us that much wonderful information but here's the",
    "start": "1431919",
    "end": "1438240"
  },
  {
    "text": "thing thing we're going to do our big breakthrough comes when we look at the",
    "start": "1438240",
    "end": "1444559"
  },
  {
    "text": "amazing axium number eight Axiom number eight says that for every number",
    "start": "1444559",
    "end": "1450440"
  },
  {
    "text": "n the successor of n is not zero so if we say that it's zero then",
    "start": "1450440",
    "end": "1457799"
  },
  {
    "text": "we're false so that gives us a little statement here so we can say that we can",
    "start": "1457799",
    "end": "1464200"
  },
  {
    "text": "actually refute the idea that the successor of zero is",
    "start": "1464200",
    "end": "1472760"
  },
  {
    "text": "zero and we can also refute if we try to do numbers equal of the successor of zero and",
    "start": "1472760",
    "end": "1483200"
  },
  {
    "text": "zero so these two statements according to those ax that axom this should give",
    "start": "1483200",
    "end": "1489480"
  },
  {
    "text": "me truth but FS my number system does not work so",
    "start": "1489480",
    "end": "1497640"
  },
  {
    "text": "these are you know these are kind of the same but so let's take a step back to the beginning and look at is",
    "start": "1497640",
    "end": "1504760"
  },
  {
    "text": "zero this needs to differentiate now between zero and the successor of zero",
    "start": "1504760",
    "end": "1510000"
  },
  {
    "text": "or zero and not zero so what we can want to do is well let's",
    "start": "1510000",
    "end": "1516880"
  },
  {
    "text": "do something let's make it so that zero it's got to be a function let's actually",
    "start": "1516880",
    "end": "1522919"
  },
  {
    "text": "make it a function that returns true that says yay I'm zero success cessor since it's zero we",
    "start": "1522919",
    "end": "1530640"
  },
  {
    "text": "can replace it with this which was which is zero but we want to just mark it and",
    "start": "1530640",
    "end": "1535960"
  },
  {
    "text": "say you're not zero so we're taking the code that zero was and just saying nope",
    "start": "1535960",
    "end": "1543080"
  },
  {
    "text": "false um oh let's run it so you can see",
    "start": "1543080",
    "end": "1551000"
  },
  {
    "text": "it so successor returns a function we need to effect is zero here because is",
    "start": "1551120",
    "end": "1558799"
  },
  {
    "text": "zero is just doing that but now each number that we have is a function that",
    "start": "1558799",
    "end": "1564039"
  },
  {
    "text": "returns whether it's zero or not so we can just call it and get that true or",
    "start": "1564039",
    "end": "1569720"
  },
  {
    "text": "false back so at this point we can just uh is",
    "start": "1569720",
    "end": "1575480"
  },
  {
    "text": "zero can ask are you zero or not and we can see that we got one more",
    "start": "1575480",
    "end": "1580840"
  },
  {
    "text": "T which was this reputation but our numbers equal still doesn't work so",
    "start": "1580840",
    "end": "1587840"
  },
  {
    "text": "we're going to take a little bit of a step back in order to get this working and comment these out and look",
    "start": "1587840",
    "end": "1595919"
  },
  {
    "text": "again at numbers equal 0 0 this is going to",
    "start": "1595919",
    "end": "1601799"
  },
  {
    "text": "help us build out this numbers equal method for a second so what we want to",
    "start": "1601799",
    "end": "1607159"
  },
  {
    "text": "say is that if there if the numbers if the first number is",
    "start": "1607159",
    "end": "1613440"
  },
  {
    "text": "zero then we can actually check and see if the second number is",
    "start": "1615640",
    "end": "1624480"
  },
  {
    "text": "zero make sure that I have like that and then otherwise we can",
    "start": "1624480",
    "end": "1631799"
  },
  {
    "text": "just say you're not it doesn't matter so this says if the first number is zero then just return whether or not the",
    "start": "1631799",
    "end": "1638120"
  },
  {
    "text": "second number is zero and if they're both zero then you get a true doing",
    "start": "1638120",
    "end": "1644600"
  },
  {
    "text": "this ah it helps if I actually make that",
    "start": "1646679",
    "end": "1654559"
  },
  {
    "text": "second nothing okay so this isn't the final",
    "start": "1654559",
    "end": "1661720"
  },
  {
    "text": "solution but it's something that satisfies what we have so far and it satisfies axium 8 so if I come down oops",
    "start": "1661720",
    "end": "1670600"
  },
  {
    "text": "and get rid of these which is the axium 8 I can see that it those are satisfied",
    "start": "1670600",
    "end": "1676000"
  },
  {
    "text": "now so we know that that the successor of zero is not",
    "start": "1676000",
    "end": "1683240"
  },
  {
    "text": "zero and so we can kind of take the leap to move on to nonzero numbers and",
    "start": "1683240",
    "end": "1690200"
  },
  {
    "text": "actually start talking about these a little bit more let's expand this one just a little",
    "start": "1690200",
    "end": "1698080"
  },
  {
    "text": "bit to show that not equaling",
    "start": "1698080",
    "end": "1703880"
  },
  {
    "text": "is sort of successor of Z is not equal to zero but also so Zer is not equal to",
    "start": "1703880",
    "end": "1709440"
  },
  {
    "text": "the successor of zero just kind of flipping them around the idea that",
    "start": "1709440",
    "end": "1714640"
  },
  {
    "text": "successor of zero is equal to is not equal to zero and then the symmetric form says that zero is not equal to the",
    "start": "1714640",
    "end": "1722159"
  },
  {
    "text": "successor of zero one day I'm actually this whole like successor successor",
    "start": "1722159",
    "end": "1728200"
  },
  {
    "text": "successor successor kind of thing will deal with that okay so let's talk about",
    "start": "1728200",
    "end": "1734360"
  },
  {
    "text": "nonzero numbers so if we kind of jump up here for a second we know that 0 equals",
    "start": "1734360",
    "end": "1740440"
  },
  {
    "text": "0 right and we know that m equals n if and",
    "start": "1740440",
    "end": "1747360"
  },
  {
    "text": "only if the successor of M is equal to the successor of",
    "start": "1747360",
    "end": "1752679"
  },
  {
    "text": "n this implies that the S this implies this",
    "start": "1752679",
    "end": "1761039"
  },
  {
    "text": "guy that the successor of zero needs to be equal to the successor of zero but",
    "start": "1761240",
    "end": "1768519"
  },
  {
    "text": "there's an F our implementation doesn't satisfy this and this makes sense because if you",
    "start": "1768519",
    "end": "1775440"
  },
  {
    "text": "look at what we're doing we're always returning false so what should we do about this well let's look at Axiom",
    "start": "1775440",
    "end": "1782840"
  },
  {
    "text": "number seven this says oops for all numbers m and n m equals n if and only",
    "start": "1782840",
    "end": "1789679"
  },
  {
    "text": "if the successor of m equals a successor of n this means that this should be true",
    "start": "1789679",
    "end": "1797799"
  },
  {
    "text": "since since we're only working with zero and non zero right now we can put here that if the first",
    "start": "1797799",
    "end": "1805240"
  },
  {
    "text": "number is not zero then the second one can't be zero",
    "start": "1805240",
    "end": "1812760"
  },
  {
    "text": "either so I can just return false if the second one is",
    "start": "1813799",
    "end": "1820279"
  },
  {
    "text": "zero means you need to open and then I'm just going to return",
    "start": "1820279",
    "end": "1825840"
  },
  {
    "text": "true here",
    "start": "1825840",
    "end": "1829240"
  },
  {
    "text": "oops now we're back to everything passing off all the te's yay so this is actually",
    "start": "1834840",
    "end": "1842600"
  },
  {
    "text": "getting pretty ugly can anybody read this it's it's kind of hard awesome not",
    "start": "1842600",
    "end": "1848480"
  },
  {
    "text": "until can um but we're we're biting sort of my usual process of coding which is",
    "start": "1848480",
    "end": "1854159"
  },
  {
    "text": "make it work then make it pretty um hopefully remembering that second part of it so we could return false",
    "start": "1854159",
    "end": "1862440"
  },
  {
    "text": "here but if we do that then we get that failure so true enough we need to return",
    "start": "1862440",
    "end": "1869639"
  },
  {
    "text": "true to do it so okay so this works for two numbers we",
    "start": "1869639",
    "end": "1876440"
  },
  {
    "text": "now have zero and we have the successor of zero but we don't have anything more than that so what this kind of says is I",
    "start": "1876440",
    "end": "1883639"
  },
  {
    "text": "would really really love it if I could take the successor of the successor of",
    "start": "1883639",
    "end": "1889600"
  },
  {
    "text": "zero and compare it",
    "start": "1889600",
    "end": "1895679"
  },
  {
    "text": "to the successor of zero does any does anybody think this is",
    "start": "1895679",
    "end": "1901799"
  },
  {
    "text": "should work no this is effectively 2 equals 1",
    "start": "1901799",
    "end": "1908200"
  },
  {
    "text": "um especially if I put an extra thing there but it",
    "start": "1908200",
    "end": "1915600"
  },
  {
    "text": "passes everybody of course has heard that 2 equals 1 for sufficiently large values of",
    "start": "1915600",
    "end": "1921840"
  },
  {
    "text": "one but for us we can't abide by that we",
    "start": "1921840",
    "end": "1926960"
  },
  {
    "text": "don't have we have just a size of one so we're going to use the wonderful Axiom",
    "start": "1926960",
    "end": "1933639"
  },
  {
    "text": "here Axiom number eight to figure this out um",
    "start": "1933639",
    "end": "1940240"
  },
  {
    "text": "however let's talk about how this is going to help us so for every number n the successor of n is equal to zero is",
    "start": "1940240",
    "end": "1946919"
  },
  {
    "text": "false so there's no number whose successor is zero now I'm going to do a little bit of math",
    "start": "1946919",
    "end": "1952720"
  },
  {
    "text": "here so hold your horses I'm about to do math I'm going to use a a logic or a",
    "start": "1952720",
    "end": "1959960"
  },
  {
    "text": "proof mechanism called proof by contradiction so we'll walk through it quickly it's my favorite way of proving",
    "start": "1959960",
    "end": "1965600"
  },
  {
    "text": "things so let's assume this is true like our number statement or our system says",
    "start": "1965600",
    "end": "1970919"
  },
  {
    "text": "so let me do a little bit of setting a variable I'm going to say m is equal to",
    "start": "1970919",
    "end": "1977720"
  },
  {
    "text": "the the successor of zero n is equal to Z so if I repeat this or substitute this",
    "start": "1977720",
    "end": "1986519"
  },
  {
    "text": "back in that says that the successor of M is equal to the successor of n",
    "start": "1986519",
    "end": "1993840"
  },
  {
    "text": "yeah now if I replace M and N with their definitions",
    "start": "1994320",
    "end": "2001200"
  },
  {
    "text": "right what am I doing um oh",
    "start": "2001200",
    "end": "2009600"
  },
  {
    "text": "MN this says the successor of M and N we know that the according to Axiom",
    "start": "2010519",
    "end": "2018080"
  },
  {
    "text": "8 or Axiom 7 if m equals n if and only if the successor of M is equal to",
    "start": "2018080",
    "end": "2024919"
  },
  {
    "text": "successor of n which says I should if the successors are equal then the",
    "start": "2024919",
    "end": "2030000"
  },
  {
    "text": "numbers are equal so that tells me I can say this",
    "start": "2030000",
    "end": "2035039"
  },
  {
    "text": "MN right just by substituting well let me substitute these back in oh look at",
    "start": "2035039",
    "end": "2045120"
  },
  {
    "text": "this what does that say that says that the successor of zero is equal to",
    "start": "2047639",
    "end": "2054800"
  },
  {
    "text": "zero that violates axium number eight so that means that I've reached a",
    "start": "2055000",
    "end": "2062878"
  },
  {
    "text": "contradiction I've reached something false which means that's wrong that's wrong that's that's wrong that's wrong",
    "start": "2062879",
    "end": "2068638"
  },
  {
    "text": "that's wrong that's wrong so since assuming that this was true led me to a contradiction I",
    "start": "2068639",
    "end": "2076118"
  },
  {
    "text": "actually have the opposite of what that assumption was so Tech so my these",
    "start": "2076119",
    "end": "2081358"
  },
  {
    "text": "axioms along with what I have so far has shown me that I need to put a refute",
    "start": "2081359",
    "end": "2087839"
  },
  {
    "text": "here but my my code doesn't satisfy that because my code only knows about",
    "start": "2087839",
    "end": "2095280"
  },
  {
    "text": "this Everybody follow that okay well let's have a picture of a cat",
    "start": "2095280",
    "end": "2101640"
  },
  {
    "text": "there's squeaks her full name is you can do it squeaks the story of little Carrie strug",
    "start": "2101640",
    "end": "2108000"
  },
  {
    "text": "by Corey Haynes because I find Cary strug to be one of the most inspirational figures in",
    "start": "2108000",
    "end": "2114240"
  },
  {
    "text": "the world so I wanted to name my cat after her so awesome now here we are we've got",
    "start": "2114240",
    "end": "2121920"
  },
  {
    "text": "a failing test everything's good we've only got a few minutes left so we need",
    "start": "2121920",
    "end": "2127839"
  },
  {
    "text": "to build four pages worth of stuff so let's come up here we're going to",
    "start": "2127839",
    "end": "2134000"
  },
  {
    "text": "comment out this stuff for a second",
    "start": "2134000",
    "end": "2138520"
  },
  {
    "text": "oh and we're going to come up the so we have tests for successor we have this",
    "start": "2139720",
    "end": "2145880"
  },
  {
    "text": "final test that if it passes we know that we have 0 one two we've got sort of",
    "start": "2145880",
    "end": "2151960"
  },
  {
    "text": "the ability to get that the successor of the successor of zero is not the successor of zero so what we really want",
    "start": "2151960",
    "end": "2159520"
  },
  {
    "text": "to do though is be able to come down to this numberers equal and figure out not",
    "start": "2159520",
    "end": "2164720"
  },
  {
    "text": "just everything's equal that isn't zero but we actually want to be able to ask",
    "start": "2164720",
    "end": "2169960"
  },
  {
    "text": "it are these two numbers the same to do this we really need to know",
    "start": "2169960",
    "end": "2176079"
  },
  {
    "text": "what are the things that caused first and second first and second came about by calling successor on something we",
    "start": "2176079",
    "end": "2183079"
  },
  {
    "text": "need to find out what that something is so what we're going to do is we're going to say we really would like a function",
    "start": "2183079",
    "end": "2190160"
  },
  {
    "text": "called",
    "start": "2190160",
    "end": "2192760"
  },
  {
    "text": "predecessor that is sort of the inverse of successor it's the thing that caused",
    "start": "2195200",
    "end": "2201000"
  },
  {
    "text": "my successor to be what it is so if I take the successor of zero and I take the predecessor of that I should get",
    "start": "2201000",
    "end": "2207040"
  },
  {
    "text": "zero I'm going to write one that's kind of crazy just to capture it so the predecessor of the successor",
    "start": "2207040",
    "end": "2215119"
  },
  {
    "text": "of the successor of zero is is successor of",
    "start": "2215119",
    "end": "2222240"
  },
  {
    "text": "zero right so these are kind of there's smoke tests just to help me make sure",
    "start": "2222240",
    "end": "2227920"
  },
  {
    "text": "that I've got predecessor working once we have predecessor working then I can rely on number seven that m equals n if",
    "start": "2227920",
    "end": "2237160"
  },
  {
    "text": "and only if the successors if I flip that it's the successors are equal only if the numbers",
    "start": "2237160",
    "end": "2243119"
  },
  {
    "text": "are equal which says I should be able to come down here to numbers equal and say say numbers",
    "start": "2243119",
    "end": "2250640"
  },
  {
    "text": "equal predecessor of first predecessor of second if I do if I build predecessor",
    "start": "2250640",
    "end": "2257960"
  },
  {
    "text": "I can do this and my numbers equal will be working but I haven't yet so I can't",
    "start": "2257960",
    "end": "2263839"
  },
  {
    "text": "so that's our goal is to build predecessor okay so let's do that um",
    "start": "2263839",
    "end": "2270280"
  },
  {
    "text": "let's come up and look at zero the",
    "start": "2270280",
    "end": "2275319"
  },
  {
    "text": "successor okay so these have got this pretty far this zero and successor where we're just returning true and false but",
    "start": "2275319",
    "end": "2281560"
  },
  {
    "text": "we need to not just Mark whether it's zero or not but we need to somehow carry along when we call successor we need to",
    "start": "2281560",
    "end": "2288480"
  },
  {
    "text": "carry along what the number is that we are the successor of so we kind of if I kind of pseudo coded it I'd like it to",
    "start": "2288480",
    "end": "2295280"
  },
  {
    "text": "look something like this you know a",
    "start": "2295280",
    "end": "2302160"
  },
  {
    "text": "pair and it because at that point I can just say that the predecessor of the of a number m is just the the",
    "start": "2303240",
    "end": "2311680"
  },
  {
    "text": "rightmost thing of M I just I need a pair well of course we don't have a pair",
    "start": "2311680",
    "end": "2318920"
  },
  {
    "text": "all we have is a Lambda and a couple of these things we did so so let's build pairs real",
    "start": "2318920",
    "end": "2324000"
  },
  {
    "text": "quick so in order to write some just some smoke tests I'm going to actually",
    "start": "2324000",
    "end": "2330200"
  },
  {
    "text": "make a pair that is true and false and then I am going to make a pair that is",
    "start": "2330200",
    "end": "2335760"
  },
  {
    "text": "false and true and then I'm going to assert that the left or the first part of true",
    "start": "2335760",
    "end": "2345040"
  },
  {
    "text": "false I can assert that because it should be true and I can refute the second part of true",
    "start": "2345400",
    "end": "2353720"
  },
  {
    "text": "false and I can assert or actually I can",
    "start": "2353720",
    "end": "2359520"
  },
  {
    "text": "refute the first part of false",
    "start": "2360160",
    "end": "2365119"
  },
  {
    "text": "true so basically I'm making a pair of true false and false true and then I'm writing a couple smoke tests to say that",
    "start": "2365960",
    "end": "2372760"
  },
  {
    "text": "first and second work okay so what do we know about these functions well I know",
    "start": "2372760",
    "end": "2379200"
  },
  {
    "text": "that pair has to take a first and a second",
    "start": "2379200",
    "end": "2383760"
  },
  {
    "text": "right I don't know what it does with them I know that first is going to take",
    "start": "2384319",
    "end": "2389400"
  },
  {
    "text": "a pair I don't know what it does with it yet and I know that",
    "start": "2389400",
    "end": "2394480"
  },
  {
    "text": "second is going to take a pair and it's going to do something similar",
    "start": "2394480",
    "end": "2399880"
  },
  {
    "text": "to first but I'm not sure exactly what feels a little bit like booleans again where Boolean the true picked the first",
    "start": "2399880",
    "end": "2406720"
  },
  {
    "text": "one so makes me feel a little okay um so what do I know about pair so let's work",
    "start": "2406720",
    "end": "2413200"
  },
  {
    "text": "with first and second because these are sort of our outer behaviors what do I know about pair I know one thing it's a",
    "start": "2413200",
    "end": "2420680"
  },
  {
    "text": "function which means I can call it with a parameter wouldn't it be awesome",
    "start": "2420680",
    "end": "2427480"
  },
  {
    "text": "if I could call it with a",
    "start": "2427480",
    "end": "2433079"
  },
  {
    "text": "function that accepts the first and the second arguments in the pair and",
    "start": "2433079",
    "end": "2439280"
  },
  {
    "text": "returns not true but the first one so this is a technique I like to",
    "start": "2439280",
    "end": "2446520"
  },
  {
    "text": "call programming by wishful thinking which is I code it as though I always",
    "start": "2446520",
    "end": "2451960"
  },
  {
    "text": "say to myself wouldn't it be cool if I could do that and actually get the first item yes",
    "start": "2451960",
    "end": "2459160"
  },
  {
    "text": "thank you second wouldn't it be cool if I could do",
    "start": "2459160",
    "end": "2465200"
  },
  {
    "text": "that it would be awesome so how do I do that well that tells me that payer needs",
    "start": "2465200",
    "end": "2470720"
  },
  {
    "text": "to return a function what's that function called well I'm going to call it selects",
    "start": "2470720",
    "end": "2476800"
  },
  {
    "text": "value so it's a function that takes a function and then it calls that function",
    "start": "2476800",
    "end": "2482400"
  },
  {
    "text": "passing in first and second thank you um so it when I call pair with true",
    "start": "2482400",
    "end": "2490800"
  },
  {
    "text": "and false it returns me a function that takes this select value",
    "start": "2490800",
    "end": "2497680"
  },
  {
    "text": "function oh I didn't write PR yet so these are passing look at that four",
    "start": "2499119",
    "end": "2506240"
  },
  {
    "text": "T's so now I have pairs pretty",
    "start": "2506240",
    "end": "2511400"
  },
  {
    "text": "fancy um so it passes the test I'm going to get rid of these because of course these",
    "start": "2511400",
    "end": "2516960"
  },
  {
    "text": "are just smoke tests and if you saw Jay's talk then you should delete all of your",
    "start": "2516960",
    "end": "2522160"
  },
  {
    "text": "tests and we're going to come down and we're actually going to use a little bit of this to write some things so zero",
    "start": "2522160",
    "end": "2529319"
  },
  {
    "text": "what I want zero to be is a pair of true and something else doesn't matter what",
    "start": "2529319",
    "end": "2534760"
  },
  {
    "text": "it is and whenever I don't care I use my identity somewhere there's an identity",
    "start": "2534760",
    "end": "2540720"
  },
  {
    "text": "theft joke in there but it's not now um",
    "start": "2540720",
    "end": "2545960"
  },
  {
    "text": "so is zero simply needs to take the first item of",
    "start": "2545960",
    "end": "2552920"
  },
  {
    "text": "that well what does successor do successor builds me a pair of false",
    "start": "2552920",
    "end": "2559240"
  },
  {
    "text": "and N that's like saying that the successor of n is equal to false",
    "start": "2559240",
    "end": "2566440"
  },
  {
    "text": "n the successor of the successor of n is equal to false false",
    "start": "2566440",
    "end": "2571760"
  },
  {
    "text": "n so every successor knows that it is not zero",
    "start": "2571760",
    "end": "2577760"
  },
  {
    "text": "now what does predecessor do it takes the second",
    "start": "2577760",
    "end": "2584720"
  },
  {
    "text": "part and returns it because if you successor makes a pair of false and",
    "start": "2585079",
    "end": "2592440"
  },
  {
    "text": "N predecessor simply takes that",
    "start": "2592440",
    "end": "2597318"
  },
  {
    "text": "out that means that if I come down here and I run my",
    "start": "2597960",
    "end": "2603680"
  },
  {
    "text": "tests my little smoke tests for predecessor are work working so now predecessor is working which",
    "start": "2603680",
    "end": "2611040"
  },
  {
    "text": "means I can come back to here and do the big",
    "start": "2611040",
    "end": "2616079"
  },
  {
    "text": "trick which is take if the first is not",
    "start": "2616079",
    "end": "2622079"
  },
  {
    "text": "zero and the second's not zero then let me take the predecessor of",
    "start": "2622079",
    "end": "2629480"
  },
  {
    "text": "the first and the predecessor of the second and see if they're equal because",
    "start": "2629480",
    "end": "2635400"
  },
  {
    "text": "if they are one more no don't need one more according",
    "start": "2635400",
    "end": "2640800"
  },
  {
    "text": "to seven if first and second are only equal",
    "start": "2640800",
    "end": "2646040"
  },
  {
    "text": "if their predecessors are equal so now if I come up and I get rid of all of",
    "start": "2646040",
    "end": "2652559"
  },
  {
    "text": "those oh look at that that's my production app they're all passing whoah",
    "start": "2652559",
    "end": "2660920"
  },
  {
    "text": "whoah so what does this mean Dave",
    "start": "2660920",
    "end": "2667520"
  },
  {
    "text": "oh it means I have five minutes left",
    "start": "2667520",
    "end": "2672599"
  },
  {
    "text": "awesome of course I wouldn't expect Dave to know what all of this means so what",
    "start": "2672599",
    "end": "2678000"
  },
  {
    "text": "does this mean well this means that I have the ability to I have a zero I have",
    "start": "2678000",
    "end": "2683640"
  },
  {
    "text": "a successor of zero and I have a successor of a successor of zero that I",
    "start": "2683640",
    "end": "2690520"
  },
  {
    "text": "know is different so what I've got is I've got zero I've I've got",
    "start": "2690520",
    "end": "2698000"
  },
  {
    "text": "one and I have two and I know and I've proven that",
    "start": "2698000",
    "end": "2704240"
  },
  {
    "text": "one does not equal two and that my one is not sufficiently large so with some",
    "start": "2704240",
    "end": "2711839"
  },
  {
    "text": "arm waving around the induction Axiom what we have is we have an",
    "start": "2711839",
    "end": "2719200"
  },
  {
    "text": "infinite number of natural numbers to show that and to do something",
    "start": "2719200",
    "end": "2725880"
  },
  {
    "text": "really fun with since we have a couple minutes um let's",
    "start": "2725880",
    "end": "2733039"
  },
  {
    "text": "build two natural what this does is this takes a number uh in Ruby and gives me the",
    "start": "2733119",
    "end": "2740720"
  },
  {
    "text": "associated successor successor successor successor like that and then we're going",
    "start": "2740720",
    "end": "2746000"
  },
  {
    "text": "to take from natural which does a little bit different it takes a one of my",
    "start": "2746000",
    "end": "2751440"
  },
  {
    "text": "natural numbers and returns it as a ruby numeral and so what I can do with this",
    "start": "2751440",
    "end": "2756760"
  },
  {
    "text": "is is say puts from natural to",
    "start": "2756760",
    "end": "2763079"
  },
  {
    "text": "Natural 10 and it prints",
    "start": "2763079",
    "end": "2770760"
  },
  {
    "text": "10 yes yes nailed it",
    "start": "2773559",
    "end": "2779880"
  },
  {
    "text": "um what this does do though is I have three minutes so we can do we can use",
    "start": "2779880",
    "end": "2785559"
  },
  {
    "text": "these numbers now to do do some pretty cool stuff such as this what if I wrote a function called times that took a do",
    "start": "2785559",
    "end": "2794599"
  },
  {
    "text": "this this many times and said",
    "start": "2794599",
    "end": "2801040"
  },
  {
    "text": "if this many times is zero then just do the identity which is",
    "start": "2801359",
    "end": "2809720"
  },
  {
    "text": "nothing of course otherwise I want to",
    "start": "2809720",
    "end": "2817960"
  },
  {
    "text": "do this passing in you know this many",
    "start": "2818040",
    "end": "2825680"
  },
  {
    "text": "times and then call back to times except take the predecessor so",
    "start": "2825680",
    "end": "2832720"
  },
  {
    "text": "this is counting down and if I wrote it",
    "start": "2832720",
    "end": "2839880"
  },
  {
    "text": "correctly I can say put",
    "start": "2840160",
    "end": "2845078"
  },
  {
    "text": "hello the IND X and say do this to natural number 10",
    "start": "2845400",
    "end": "2854078"
  },
  {
    "text": "times am I missing a",
    "start": "2855280",
    "end": "2858960"
  },
  {
    "text": "bracket thank you this is when it's actually I'm actually live coding so",
    "start": "2863160",
    "end": "2868400"
  },
  {
    "text": "look at that oh a proc because n is actually there so from natural",
    "start": "2868400",
    "end": "2876599"
  },
  {
    "text": "look at that look at that nailed it",
    "start": "2878359",
    "end": "2884180"
  },
  {
    "text": "[Applause] awesome all right so that's my time hope",
    "start": "2884180",
    "end": "2891200"
  },
  {
    "text": "it was fun this was a fun coding one of the cool things about this that if exercise for home is to write",
    "start": "2891200",
    "end": "2897559"
  },
  {
    "text": "ad and when you write ad in this way like you get up to like adding a 100 and",
    "start": "2897559",
    "end": "2903440"
  },
  {
    "text": "100 and you can like visibly see your process or slow down it's super fun all",
    "start": "2903440",
    "end": "2908760"
  },
  {
    "text": "right thank you very much um oh before you",
    "start": "2908760",
    "end": "2914240"
  },
  {
    "text": "go there's pistachio oh I love",
    "start": "2914520",
    "end": "2919720"
  },
  {
    "text": "her okay and also you can buy my book thank you very much have a good",
    "start": "2919720",
    "end": "2925440"
  },
  {
    "text": "afternoon",
    "start": "2925440",
    "end": "2928440"
  }
]