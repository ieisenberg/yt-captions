[
  {
    "text": "okay uh welcome everybody uh as mentioned my name is Sam Richie I'm from codp in Perth um this is benti not Bill",
    "start": "4839",
    "end": "11840"
  },
  {
    "text": "uh he's from shine in Melbourne and uh we're here today to talk to you about alternatives to NBC for Native mobile",
    "start": "11840",
    "end": "17480"
  },
  {
    "text": "development so the background to this talk if you heard this morning was that both Ben and I presented separate talks",
    "start": "17480",
    "end": "22960"
  },
  {
    "text": "at Ya connected this year so y connected's the mobile conference down in Melbourne um and the Y organizers got",
    "start": "22960",
    "end": "29000"
  },
  {
    "text": "in touch and said hey do you guys want to do a joint presentation um on the main y tour so you know of course we said yes that'll be awesome um the",
    "start": "29000",
    "end": "36160"
  },
  {
    "text": "problem is that Ben's talk was on react native which is a JavaScript based view framework and my talk was on reactive",
    "start": "36160",
    "end": "42000"
  },
  {
    "text": "Coco which is a swift FP Library they're not really the same thing although do both start with the word react so they",
    "start": "42000",
    "end": "48640"
  },
  {
    "text": "they must be practically identical um oh our names our um Twitter",
    "start": "48640",
    "end": "53960"
  },
  {
    "text": "names up here so if you are live tweeting this please get the names right otherwise we won't give you any love hearts um so",
    "start": "53960",
    "end": "61760"
  },
  {
    "text": "what we're um what we're going to go through today is um I'm going to talk",
    "start": "61760",
    "end": "67920"
  },
  {
    "text": "about uh some of the issues that we've got facing uh you know mobile development there's some unique issues",
    "start": "67920",
    "end": "73400"
  },
  {
    "text": "that we and challenges we need to resolve um and then Ben's going to introduce react native and talk about how they can solve some of those",
    "start": "73400",
    "end": "80040"
  },
  {
    "text": "problems um I'm going to do a similar thing with reactive Coco coming from a slightly different direction but",
    "start": "80040",
    "end": "85079"
  },
  {
    "text": "incorporating some of those react techniques to to try and solve the same problem and then um will'll introduce a",
    "start": "85079",
    "end": "90799"
  },
  {
    "text": "couple of other uh sort of technologies that you can use to try and take those Concepts a little bit",
    "start": "90799",
    "end": "97000"
  },
  {
    "text": "further so um this talk isn't a pure technology demo okay we are using react",
    "start": "97000",
    "end": "103840"
  },
  {
    "text": "native and reactive Coco to sort of illustrate some of these Concepts around around State and around immutability and",
    "start": "103840",
    "end": "109479"
  },
  {
    "text": "and and view rendering those sorts of things but they're not just Tech demos on those and it's also not a hardcore",
    "start": "109479",
    "end": "114840"
  },
  {
    "text": "functional talk I've heard all their stories about Brisbane being this functional programming meca so I'm sorry there's no might add Transformers or",
    "start": "114840",
    "end": "120960"
  },
  {
    "text": "anything here or maybe there is I don't know what they look like they're somewhat like burritos aren't",
    "start": "120960",
    "end": "126240"
  },
  {
    "text": "they so there's a function programing joke all right so let's talk about",
    "start": "126240",
    "end": "131480"
  },
  {
    "text": "mobile development um firstly I'm a bit of a fan of the visual pun so feel free to Gran when they pop up on screen uh so",
    "start": "131480",
    "end": "138280"
  },
  {
    "text": "mobile development is uh is hard and it's not just because you might fall off the scooter um if you're a service",
    "start": "138280",
    "end": "144440"
  },
  {
    "text": "developer your job's really easy okay request comes in you've run some code maybe update a database with send it our response know piece of",
    "start": "144440",
    "end": "151400"
  },
  {
    "text": "Cate uh I'm just just making enemies all over the place here the worst that can",
    "start": "151400",
    "end": "156879"
  },
  {
    "text": "happen is the request that comes in maybe doesn't statewise course it the the request that comes in maybe doesn't",
    "start": "156879",
    "end": "162800"
  },
  {
    "text": "make sense in the context of the state you've got in the database at which point you throw out a bad request to make it somebody else's",
    "start": "162800",
    "end": "168360"
  },
  {
    "text": "problem um in contrast with mobile development we've got a bunch of things going on at the same time so we've got a",
    "start": "168360",
    "end": "173480"
  },
  {
    "text": "long running process and then we've got all of those callbacks happening asynchronously we've got you know UI",
    "start": "173480",
    "end": "178760"
  },
  {
    "text": "touch events we might have a Network request uh callback we might enter a leave geofence you might get a phone",
    "start": "178760",
    "end": "184200"
  },
  {
    "text": "call in the middle of using your app um and your app needs to handle all of those and function reliably and",
    "start": "184200",
    "end": "189440"
  },
  {
    "text": "predictably in all of those cases um now the problem with those isn't necessarily that we're getting",
    "start": "189440",
    "end": "195120"
  },
  {
    "text": "asynchronous callbacks uh the problem is that in a lot of them we're mutating shared mutable State okay and this is",
    "start": "195120",
    "end": "202640"
  },
  {
    "text": "bad because it makes our and I'm hope you're all generally on board with the with the concept of mutable State um it",
    "start": "202640",
    "end": "209319"
  },
  {
    "text": "makes your program unpredictable okay you you're not able to accurately or reliably predict how your app's going to",
    "start": "209319",
    "end": "215480"
  },
  {
    "text": "behave in inside a certain callback because you don't know how the state's been set up previously and this is one of the reasons why Josh aathy one of the",
    "start": "215480",
    "end": "222040"
  },
  {
    "text": "guys behind reactive Coco came up with this awesome quote your eyes a big messy mutable state for bags of",
    "start": "222040",
    "end": "227439"
  },
  {
    "text": "sadness so one of the things we're trying to do is trying to introduce the concept of",
    "start": "227439",
    "end": "233200"
  },
  {
    "text": "um you know um managing the state a little bit better and uh you know being",
    "start": "233200",
    "end": "238439"
  },
  {
    "text": "a little bit more predictable into deterministic in how we render our views okay and ultimately we're trying to make",
    "start": "238439",
    "end": "244200"
  },
  {
    "text": "this problem of rendering views a little bit more tractable yes okay I'll hand over to Ben",
    "start": "244200",
    "end": "250720"
  },
  {
    "text": "and he's going to talk about react native thanks Sam let's just get that off the screen",
    "start": "250720",
    "end": "258680"
  },
  {
    "text": "all right okay um rack native okay so what I'm going to argue in this section of the talk is basically that react",
    "start": "258680",
    "end": "264880"
  },
  {
    "text": "native and specifically the react programming model is a bit of a gateway drug for starting to introduce some",
    "start": "264880",
    "end": "271080"
  },
  {
    "text": "functional programming techniques uh to building user interfaces just a couple of details we'll get out of the way",
    "start": "271080",
    "end": "276240"
  },
  {
    "text": "first so Rec native it's a a framework for building building uh web uh mo",
    "start": "276240",
    "end": "281479"
  },
  {
    "text": "mobile um applications uh and it's it's targeting both IOS and Android okay and",
    "start": "281479",
    "end": "287639"
  },
  {
    "text": "whilst it's it's not really specifically um aiming to be a crossplatform framework it is aspiring to what they",
    "start": "287639",
    "end": "294160"
  },
  {
    "text": "call a uh a learn once right anywhere approach it's also using JavaScript as a",
    "start": "294160",
    "end": "299840"
  },
  {
    "text": "as Sam mentioned before and um whilst it uses some kind of web inspired techniques for styling and layout and",
    "start": "299840",
    "end": "307160"
  },
  {
    "text": "stuff like that I think a really important thing to remember about react native is that it's all Native under the hood so there's no HTML being um",
    "start": "307160",
    "end": "314600"
  },
  {
    "text": "rendered there's no UI web view or anything like that it's all Native uh if you've heard of the react",
    "start": "314600",
    "end": "321280"
  },
  {
    "text": "web framework um react native is really uh it's essentially using the same model",
    "start": "321280",
    "end": "326319"
  },
  {
    "text": "under the hood but there is one thing I want to get out of the way now um I saw this this was tweeted a couple of months",
    "start": "326319",
    "end": "332000"
  },
  {
    "text": "ago um and as a web developer I found it funny U basically because it's true you",
    "start": "332000",
    "end": "337479"
  },
  {
    "text": "know let's not lie to ourselves here uh and I certainly can't guarantee that R",
    "start": "337479",
    "end": "342560"
  },
  {
    "text": "native is going to R is going to be the last uh JavaScript web framework in fact I know it's not going to be the last one",
    "start": "342560",
    "end": "347960"
  },
  {
    "text": "but I do think it's the first in a long time that's introduced some genuinely new ideas um to UI development and",
    "start": "347960",
    "end": "355520"
  },
  {
    "text": "that's kind of what I'm going to talk about here and these ideas are kind of drawing upon um programming research",
    "start": "355520",
    "end": "360919"
  },
  {
    "text": "from the last 40 years you know since MVC was originated and also they just",
    "start": "360919",
    "end": "366199"
  },
  {
    "text": "they just leverag the fact that computers are a lot faster than they were 40 years",
    "start": "366199",
    "end": "371319"
  },
  {
    "text": "ago okay so what what is this this model that I speak about um so react is really",
    "start": "371319",
    "end": "377680"
  },
  {
    "text": "just a reference implementation of some ideas the original react web framework and react native just be thought of as",
    "start": "377680",
    "end": "384599"
  },
  {
    "text": "an alternate representation of these ideas so I'm going to go through some of these Concepts now and we'll put them",
    "start": "384599",
    "end": "390240"
  },
  {
    "text": "under the general category of the react programming model I'm going to start by introducing this concept of virtual view",
    "start": "390240",
    "end": "396400"
  },
  {
    "text": "hierarchies so of lightweight inmemory representations of a view that you manipulate rather than actually what",
    "start": "396400",
    "end": "401840"
  },
  {
    "text": "your device is displaying and then I'm going to show that leads us to be able to think about our uis declaratively to",
    "start": "401840",
    "end": "407319"
  },
  {
    "text": "be able to describe them in terms of you know what they do at a point in time rather than how you go about manipulating them and even to start",
    "start": "407319",
    "end": "413360"
  },
  {
    "text": "thinking them as being sort of a deterministic output of a function that will always behave the same way given a",
    "start": "413360",
    "end": "418599"
  },
  {
    "text": "particular set of input and then finally I'm going to talk about how we can start to model change within",
    "start": "418599",
    "end": "423680"
  },
  {
    "text": "our applications really is this oneway data flow process which puts it in a little bit of um a point of difference",
    "start": "423680",
    "end": "429479"
  },
  {
    "text": "to maybe what we've done traditionally with MVC we can have big cascading chains of events that are hard to reason",
    "start": "429479",
    "end": "434919"
  },
  {
    "text": "about or even if you're using two-way binding is quite inexplicable Behavior frankly so let's get started with",
    "start": "434919",
    "end": "441400"
  },
  {
    "text": "virtual view hierarchies so if you know anything about um rect you may have heard that it had this concept of the",
    "start": "441400",
    "end": "447639"
  },
  {
    "text": "virtual Dawn so in the beginning there was the browser Dom and uh if we wanted to manipulate what the browser display",
    "start": "447639",
    "end": "454080"
  },
  {
    "text": "then we would manipulate the browser Dom that in the case of browsers at least proved to be a little slow so react",
    "start": "454080",
    "end": "460000"
  },
  {
    "text": "introduced this idea of a virtual Dom and so if we wanted to manipulate what the the browser displayed we would make",
    "start": "460000",
    "end": "466680"
  },
  {
    "text": "changes to the virtual Dom and then we would leave it up to react to form a diff between the two and then to patch",
    "start": "466680",
    "end": "472720"
  },
  {
    "text": "the browser Dom accordingly and efficiently so in react native we pretty much have exactly the same concept now",
    "start": "472720",
    "end": "478759"
  },
  {
    "text": "we have this virt view hierarchy instead so react notive introduces a concept of a virtual a virtual view",
    "start": "478759",
    "end": "485919"
  },
  {
    "text": "hierarchy if we want to make changes to what's been displayed by our native app we make changes to the virtual view",
    "start": "485919",
    "end": "491599"
  },
  {
    "text": "hierarchy and then we leave it up to react native to assemble a diff between the two and Patch the native view hierarchy",
    "start": "491599",
    "end": "498800"
  },
  {
    "text": "accordingly so the good thing about us starting to represent our view hierarchy",
    "start": "498800",
    "end": "504000"
  },
  {
    "text": "using a lightweight inmemory object model is that we can actually throw",
    "start": "504000",
    "end": "509680"
  },
  {
    "text": "object model away with alarming regularity and recreate it from scratch without really having to worry about the",
    "start": "509680",
    "end": "515200"
  },
  {
    "text": "implications of that anymore there's no more poking into a native U hierarchy manipulating we can just throw the whole",
    "start": "515200",
    "end": "521000"
  },
  {
    "text": "virtual U hierarchy away and then let reacts take care of rendering it efficiently for us to the native view",
    "start": "521000",
    "end": "526880"
  },
  {
    "text": "hierarchy and this brings us to declarative uis this idea that we can now start to describe our user interface",
    "start": "526880",
    "end": "534519"
  },
  {
    "text": "declaratively and so to do this I'm going to give you a little examples this is an app I wrote",
    "start": "534519",
    "end": "539800"
  },
  {
    "text": "um it's my thing is not to do app so as you may know in JavaScript land uh whenever a new web framework comes out",
    "start": "539800",
    "end": "546079"
  },
  {
    "text": "which is you know let's be honest pretty much every week uh it's customary to write a to-do app so I've just turned it",
    "start": "546079",
    "end": "551279"
  },
  {
    "text": "on its head a little bit and here's a react native application that I've written that is my list of things not to do and we'll just take it for a little",
    "start": "551279",
    "end": "557160"
  },
  {
    "text": "spin now um we go so it's got a list of items just like any other this is all",
    "start": "557160",
    "end": "563839"
  },
  {
    "text": "Native uh top of the list um not to do have children less than L months apart I've done that before it was terrible I",
    "start": "563839",
    "end": "570200"
  },
  {
    "text": "highly recommend against it and I'm going to make it that I can filter this list down just here at the top so how",
    "start": "570200",
    "end": "575800"
  },
  {
    "text": "might we go about implementing something like this with rect Native let's start with this top level component for this",
    "start": "575800",
    "end": "581720"
  },
  {
    "text": "page so we'll call it TD main everything you see prefixed with TD is a component that I've written myself and it",
    "start": "581720",
    "end": "587519"
  },
  {
    "text": "comprises the filter area at the top and the list and then the button down at the bottom here's some code for this",
    "start": "587519",
    "end": "594040"
  },
  {
    "text": "component now react native uses es6 modules so we're going to bring in the react native module here at the top and then bring bring in a couple of modules",
    "start": "594040",
    "end": "600279"
  },
  {
    "text": "that I've written myself going to extract a couple of classes out of the react native module let's just say for",
    "start": "600279",
    "end": "606160"
  },
  {
    "text": "now we're going to hard code the datter in although I'll loop back on this later a little later on so here's the code for",
    "start": "606160",
    "end": "611200"
  },
  {
    "text": "the actual component it's a class that extends upon a base and it has a render method this is a really important method",
    "start": "611200",
    "end": "617079"
  },
  {
    "text": "because it returns a representation of this component at any particular point in time and clearly that is not",
    "start": "617079",
    "end": "622720"
  },
  {
    "text": "JavaScript what is this you might be asking well this is jsx the important thing to remember",
    "start": "622720",
    "end": "628079"
  },
  {
    "text": "about jsx in r doorack native us is that a it's entirely optional and B at the",
    "start": "628079",
    "end": "633279"
  },
  {
    "text": "end of the day it all compiles down to JavaScript and I actually think it's kind of instructive to look at what this",
    "start": "633279",
    "end": "639000"
  },
  {
    "text": "JavaScript is so if we were to take this jsx with a little bit of markup inside of it this is what the generator",
    "start": "639000",
    "end": "644639"
  },
  {
    "text": "JavaScript looks like in our jsx we've got our view tag up at the top here so we just have some JavaScript generated",
    "start": "644639",
    "end": "650639"
  },
  {
    "text": "that creates an element A View element we have our TD filterable list tag here so we have some JavaScript that creates",
    "start": "650639",
    "end": "657000"
  },
  {
    "text": "the TD filterable list element we have a TD button so some JavaScript",
    "start": "657000",
    "end": "662200"
  },
  {
    "text": "is generated that creates our TD button element we can actually pass properties to tags and really those are just a",
    "start": "662200",
    "end": "670399"
  },
  {
    "text": "hatch that is passed to each element when it's created and finally sometimes we do want to actually uh access some",
    "start": "670399",
    "end": "676320"
  },
  {
    "text": "some variables in the surrounding scope ins inside our jsx so we can do that using this little curly bracket notation",
    "start": "676320",
    "end": "682560"
  },
  {
    "text": "so all I'm doing here is accessing the the global items list that I've set up um it can be any expression any",
    "start": "682560",
    "end": "688200"
  },
  {
    "text": "JavaScript expression I want and that's just going to pass it in there when the element gets created okay so let's drill into this",
    "start": "688200",
    "end": "695000"
  },
  {
    "text": "user interface a little bit further let's actually look at the filterable list this is the filter up the top and the list in the middle what's the code",
    "start": "695000",
    "end": "701000"
  },
  {
    "text": "for this look like okay we've got our top level view tag really this is just a container for other elements it's going",
    "start": "701000",
    "end": "707399"
  },
  {
    "text": "to have a text input at the top that's where we're going to put the filter text in and then we've got our list view this is just something the rator gives us for",
    "start": "707399",
    "end": "713600"
  },
  {
    "text": "displaying a list of data um it's got two properties the first one is a data source I don't want you to worry too",
    "start": "713600",
    "end": "719000"
  },
  {
    "text": "much about the details of this other to say it's just a mediator between a list and a collection of items in this case",
    "start": "719000",
    "end": "724600"
  },
  {
    "text": "the important part is that the collection of items is this do props do item now items now this. props is a",
    "start": "724600",
    "end": "730680"
  },
  {
    "text": "special um uh special property that each uh component can have and this is how we",
    "start": "730680",
    "end": "736959"
  },
  {
    "text": "get access to the the properties that have been passed into the component was instantiated and the Really key part of",
    "start": "736959",
    "end": "742120"
  },
  {
    "text": "it is in the context of the rep PR programming model is that it's read only you don't really mutate what's been",
    "start": "742120",
    "end": "747399"
  },
  {
    "text": "passed into you by the doop props and then secondly uh we're going to pass in another property to our list VI",
    "start": "747399",
    "end": "752560"
  },
  {
    "text": "properties can actually also be function so in this case we're actually going to pass in a function that g gets given some row data and then produces some",
    "start": "752560",
    "end": "758519"
  },
  {
    "text": "markup for each row on the list okay so now we've got our declarative UI set up we can think about the render process as",
    "start": "758519",
    "end": "764839"
  },
  {
    "text": "follows we have TD main at the top render gets called TD filterable list gets called and has the list of items",
    "start": "764839",
    "end": "770600"
  },
  {
    "text": "passed into it as properties it in turn sets up the text input then we have the list view it gets a data source passed",
    "start": "770600",
    "end": "776480"
  },
  {
    "text": "into it as a property and then each of the children gets rendered in turn this is kind of the the the render",
    "start": "776480",
    "end": "784480"
  },
  {
    "text": "process and I think it's really important to understand with react now let's talk a little bit about oneway data flow so I've showed you a static UI",
    "start": "784480",
    "end": "791040"
  },
  {
    "text": "so far how do we actually start to model change with this okay so if you remember we've got",
    "start": "791040",
    "end": "796720"
  },
  {
    "text": "this filter at the top let's use this as an example entering a string in here how do we filter this list down and change",
    "start": "796720",
    "end": "802199"
  },
  {
    "text": "what actually gets displayed by react native okay now it's time for us to introduce some mutable State okay uh the",
    "start": "802199",
    "end": "809959"
  },
  {
    "text": "good thing about the r programming model is it encourages you to keep mutable State as absolutely small as possible",
    "start": "809959",
    "end": "815240"
  },
  {
    "text": "and to only put it as high in the view hierarchy as it needs to be no higher and no lower so what we're going to do",
    "start": "815240",
    "end": "820800"
  },
  {
    "text": "in this case is on the TD filter b list we're going to add a Constructor to it and that sets up a this do state variable we're just going to assign it",
    "start": "820800",
    "end": "827680"
  },
  {
    "text": "to be an object that's just got an ENT empty filter string associated with it so this do state is another special",
    "start": "827680",
    "end": "832800"
  },
  {
    "text": "react component property and this describes the mutable State for the component but we try and keep it as small as possible and that text input",
    "start": "832800",
    "end": "839800"
  },
  {
    "text": "we're going to detect the event when cheex text changes and we're going to call this do state it's a special method",
    "start": "839800",
    "end": "845519"
  },
  {
    "text": "that each rep component has and what it does is it updates the state but it also marks the component as dirty and in need",
    "start": "845519",
    "end": "851399"
  },
  {
    "text": "of being rendered finally we're going to actually filter our list down so at the top of",
    "start": "851399",
    "end": "856480"
  },
  {
    "text": "our render method we're going to take our list of items that was passed in and apply filter operator to it just using a",
    "start": "856480",
    "end": "862040"
  },
  {
    "text": "substring match as a criteria and then we're going to pass the filtered list of items into the list view now really",
    "start": "862040",
    "end": "868040"
  },
  {
    "text": "important thing to not about this is that we're filtering the items at the top of the render method we're not filtering them somewhere else and then",
    "start": "868040",
    "end": "873560"
  },
  {
    "text": "storing them as additional State because then that's more state that people can mess with later on we're going to recompute this every time that render",
    "start": "873560",
    "end": "880160"
  },
  {
    "text": "gets called now is that expensive and you know do a lot of objects C get created well yes but doesn't matter",
    "start": "880160",
    "end": "886279"
  },
  {
    "text": "we'll usually know okay and the good thing about this is that we can start to think of our render method as being",
    "start": "886279",
    "end": "892800"
  },
  {
    "text": "something that produces the same set of outputs given a particular set of inputs this time in the form of some properties in a minimal state",
    "start": "892800",
    "end": "900040"
  },
  {
    "text": "so this code will get executed every time we enter enter a character into this field and R native takes care of",
    "start": "900040",
    "end": "906720"
  },
  {
    "text": "making sure that this rendering process is efficient so if we think about or",
    "start": "906720",
    "end": "911800"
  },
  {
    "text": "visualize this again in terms of the way the change is happening we have our onchange method on change event coming",
    "start": "911800",
    "end": "916880"
  },
  {
    "text": "to our text input it calls set State on its parent the parent is now marked as dirty and in need of being rendered",
    "start": "916880",
    "end": "923399"
  },
  {
    "text": "again it renders its text input it passs in the list view this time with the recomputed uh list of now filtered items",
    "start": "923399",
    "end": "929880"
  },
  {
    "text": "it's only got one item in it now and then that child gets rendered in turn this is the this is the process of",
    "start": "929880",
    "end": "935720"
  },
  {
    "text": "oneway data flow and react we propagated an event up to the highest point in the component hierarchy where that minimal",
    "start": "935720",
    "end": "941000"
  },
  {
    "text": "set of state is called the state gets mutated and then the entire sub tree gets rendered again this is oneway data",
    "start": "941000",
    "end": "946360"
  },
  {
    "text": "flow and it's such an important concept that I'm going to give you one more example this time actually loading some",
    "start": "946360",
    "end": "951920"
  },
  {
    "text": "data so we've had some hardcoded data Lo loaded in there how are we going to load some real data how does that process",
    "start": "951920",
    "end": "957920"
  },
  {
    "text": "work now I'm going to introduce some state to TD main at the very top again",
    "start": "957920",
    "end": "963440"
  },
  {
    "text": "this state will be minimal but it does need to be the list of items we're going to make it empty by make them empty by",
    "start": "963440",
    "end": "968560"
  },
  {
    "text": "default now and in the render method we'll render these items from the state object now I'm going to use a hook that",
    "start": "968560",
    "end": "975000"
  },
  {
    "text": "react gives me called component in now this will get comp called when the component is instantiated first time but",
    "start": "975000",
    "end": "980199"
  },
  {
    "text": "not every time it's rendered just when it's instantiated for the first time I'm going to use a fetch API to just make a",
    "start": "980199",
    "end": "985519"
  },
  {
    "text": "cord or back end you don't have to worry too much about the details of this other than just say that a couple of asynchronous operations occur and at the",
    "start": "985519",
    "end": "991399"
  },
  {
    "text": "end of it we call set State again and now it will populate this list of items for us accordingly and mark the",
    "start": "991399",
    "end": "996519"
  },
  {
    "text": "component and is dirty and it needed now being rendered so if we would have visualized this again using our virtual",
    "start": "996519",
    "end": "1003000"
  },
  {
    "text": "view hierarchy now we've got an empty list so by default nothing gets rendered a call",
    "start": "1003000",
    "end": "1008880"
  },
  {
    "text": "to go out and fetch takes place eventually it comes back in again now with a set of results set state gets",
    "start": "1008880",
    "end": "1016160"
  },
  {
    "text": "called and the entire view hierarchy now is is dirty and we go through this rendering process again we call for TD",
    "start": "1016160",
    "end": "1022639"
  },
  {
    "text": "filterable list and this time we pass into it the list of items it creates a text input creates a list you passes in",
    "start": "1022639",
    "end": "1028438"
  },
  {
    "text": "the data source and it creates each child in turn and Rec native takes care of",
    "start": "1028439",
    "end": "1034959"
  },
  {
    "text": "rendering all of that for us efficiently so this is the react programming model in a nutshell and I believe a bit of a",
    "start": "1034959",
    "end": "1041120"
  },
  {
    "text": "gateway drug to doing functional program using functional programming techniques in in user interface programming because",
    "start": "1041120",
    "end": "1046400"
  },
  {
    "text": "it lets you start to minimize mutable State as much as possible and have a very clear picture about the way change",
    "start": "1046400",
    "end": "1051520"
  },
  {
    "text": "is flowing through your application so if we were to recap on it we had virtual view H here's at the start lightweight",
    "start": "1051520",
    "end": "1057520"
  },
  {
    "text": "in memory representations of our view we saw have that enabled declarative UI and to be able to think about our view as",
    "start": "1057520",
    "end": "1064120"
  },
  {
    "text": "being a function that takes an input and always produces the same output and finally this notion of modeling change",
    "start": "1064120",
    "end": "1070039"
  },
  {
    "text": "with oneway data flow this is a react programming model and I think it you",
    "start": "1070039",
    "end": "1075360"
  },
  {
    "text": "know I've used as a web developer I've used backbone and angular and things like that that and um they're terrific",
    "start": "1075360",
    "end": "1081159"
  },
  {
    "text": "but uh I think that the react programming model is great because they are very explicit explicit about the way",
    "start": "1081159",
    "end": "1086960"
  },
  {
    "text": "that you model data flow through your application and I found that to be really handy so we're going to change gears a little bit now and Sam's going",
    "start": "1086960",
    "end": "1093559"
  },
  {
    "text": "to talk a bit about reactive Coco and I think he's going to start that by posing what he believes at least is an important",
    "start": "1093559",
    "end": "1100960"
  },
  {
    "text": "question okay so thanks for that Ben um a lot of really really good ideas in react native but what if like me there",
    "start": "1102840",
    "end": "1108520"
  },
  {
    "text": "are things that we prefer to be doing rather than writing JavaScript um so I'm going to talk about",
    "start": "1108520",
    "end": "1114720"
  },
  {
    "text": "I'm going to talk about how to use some of these Concepts using a real programming language so just quickly are there any",
    "start": "1114720",
    "end": "1122080"
  },
  {
    "text": "actual Swift developers in the room because when I did this down in Melbourne I think everybody was a JavaScript",
    "start": "1122080",
    "end": "1127960"
  },
  {
    "text": "developer not many all right so you guys are going to hate me um all right so first I'm going to talk about reactive",
    "start": "1128080",
    "end": "1133679"
  },
  {
    "text": "Coco and how awesome it is uh then how some of the issues that we run into when we're stitching re Coco together with",
    "start": "1133679",
    "end": "1139720"
  },
  {
    "text": "uiit which is an imperative objectoriented view hierarchy um and then how we can incorporate some react",
    "start": "1139720",
    "end": "1145960"
  },
  {
    "text": "techniques to try and make uh working with this a little bit better okay so first we're going to",
    "start": "1145960",
    "end": "1152080"
  },
  {
    "text": "diverge from discussing uis a little bit and start talking about nobody got that one did they it's not as funny when I",
    "start": "1152080",
    "end": "1159120"
  },
  {
    "text": "have to explain it um so I'm going to talk about functional reactive programming so the",
    "start": "1159120",
    "end": "1164720"
  },
  {
    "text": "way I like to describe functional reactive programming is it's just a shared library of re usable functions",
    "start": "1164720",
    "end": "1169880"
  },
  {
    "text": "that allow you to deal with uh streams of events okay so you would not write your own array sorting function okay you",
    "start": "1169880",
    "end": "1175919"
  },
  {
    "text": "would steal one you would download it from GitHub and use it because it would be better than anything you'd write yourself um similarly you shouldn't be",
    "start": "1175919",
    "end": "1182240"
  },
  {
    "text": "writing your own code to filter events and and Aggregate and Throttle events you should be using a library that does",
    "start": "1182240",
    "end": "1188640"
  },
  {
    "text": "that and that's what FP libraries do for you so in iOS we've got reactive Coco um",
    "start": "1188640",
    "end": "1195200"
  },
  {
    "text": "reactive Coco has been around for a little while it's one of the more popular ones uh it was originally Objective C then when Swift came out",
    "start": "1195200",
    "end": "1201159"
  },
  {
    "text": "they Reed in Swift then when Swift 2 came out they Reed again in Swift 2 and I bet they stoked about Swift 3 but",
    "start": "1201159",
    "end": "1207600"
  },
  {
    "text": "coming out next year um so I'm just going to give you a very very brief introduction to reactive Coco um so we",
    "start": "1207600",
    "end": "1214159"
  },
  {
    "text": "can go on and have a look at the rest of the demo so the core obstruction in reactive Coco is a signal okay a signal",
    "start": "1214159",
    "end": "1220360"
  },
  {
    "text": "is a stream of events in some RX libraries it's called an observable okay and within the reactive Coco within the",
    "start": "1220360",
    "end": "1227000"
  },
  {
    "text": "RX Community um are usually represented as Marbles and that's what those um",
    "start": "1227000",
    "end": "1232280"
  },
  {
    "text": "round things with the Epic frame rate are meant to be um so I'm just going to show you some of the functions that",
    "start": "1232280",
    "end": "1238360"
  },
  {
    "text": "reactive COC provides out of the box to give you a little bit of a feel for how it works okay so we can filter events by",
    "start": "1238360",
    "end": "1243640"
  },
  {
    "text": "just supplying a predicate the same way we'd be able to filter an array this is Swift Code by the way um so you know if",
    "start": "1243640",
    "end": "1249799"
  },
  {
    "text": "you're Blinded By Its awesomeness that's why um we can apply an arbitrary delay",
    "start": "1249799",
    "end": "1255480"
  },
  {
    "text": "to a stream of events uh we can D duplicate events by skipping repeated",
    "start": "1255480",
    "end": "1260640"
  },
  {
    "text": "values this is very very useful as we'll see later uh we can Throttle events to avoid flooding a server because they",
    "start": "1260640",
    "end": "1266640"
  },
  {
    "text": "boss is too cheap to pay for a good one um we can flatten multiple signals",
    "start": "1266640",
    "end": "1272279"
  },
  {
    "text": "uh into a a single stream of events um if the signals are of the same type uh we can use a signal as a trigger",
    "start": "1272279",
    "end": "1279960"
  },
  {
    "text": "to sample events on another signal okay often this will be a timer but you can also use it for things like button",
    "start": "1279960",
    "end": "1285200"
  },
  {
    "text": "pushes and and those sorts of things and we can do a combined latest now what combin latest does is it sends",
    "start": "1285200",
    "end": "1292440"
  },
  {
    "text": "a toule of the latest value on each of the source signals now this starts getting very very interesting because",
    "start": "1292440",
    "end": "1297960"
  },
  {
    "text": "suddenly once you can access the most recent value on a signal you can start sort of rethinking what it means to",
    "start": "1297960",
    "end": "1303520"
  },
  {
    "text": "store state within your app okay so now I'm going to introduce a a demo app um it's not as cool as Ben",
    "start": "1303520",
    "end": "1310520"
  },
  {
    "text": "sorry um I've reimplemented the iBooks storefront interface but I'm using comic",
    "start": "1310520",
    "end": "1315880"
  },
  {
    "text": "books CU comic books are really cool according to 15 you old me um and so what this is doing is downloading the",
    "start": "1315880",
    "end": "1321880"
  },
  {
    "text": "top 20 comics from our server um it's downloading prices from the app store because for in purchase and I've got a",
    "start": "1321880",
    "end": "1327720"
  },
  {
    "text": "download thumbnails of course to display as well um once I hit the bottom of the table view then I reload the next 20 and",
    "start": "1327720",
    "end": "1333919"
  },
  {
    "text": "uh we go from there um okay so how might this look in",
    "start": "1333919",
    "end": "1339880"
  },
  {
    "text": "traditional NVC code before we we start going reactive so we'll probably have some mutable State again Shield your",
    "start": "1339880",
    "end": "1346559"
  },
  {
    "text": "eyes if you if you don't want to be blinded by the Swift awesomess um we probably have some mutable State at the top of our view controller that's how it",
    "start": "1346559",
    "end": "1353039"
  },
  {
    "text": "tends to be done okay then within our initialization code we're going to kick off an asynchronous call okay and within",
    "start": "1353039",
    "end": "1359200"
  },
  {
    "text": "that call back we're going to mutate our state reload the table View and then we'll kick off another Asing call to get",
    "start": "1359200",
    "end": "1365480"
  },
  {
    "text": "the prices from the uh from the um App Store our app store prices uh load",
    "start": "1365480",
    "end": "1372159"
  },
  {
    "text": "basically when that completes again we're going to mutate our state and reload the table and then we've got a",
    "start": "1372159",
    "end": "1378240"
  },
  {
    "text": "load thumbnail which we call from our table rendering code again predictably within that call back we mute out estate",
    "start": "1378240",
    "end": "1384240"
  },
  {
    "text": "again and we reload the table again um in the table rendering code if",
    "start": "1384240",
    "end": "1390600"
  },
  {
    "text": "you haven't worked with table views on iOS before they are a callback based API so the view controller will ask the uh",
    "start": "1390600",
    "end": "1396640"
  },
  {
    "text": "sorry the table view will ask the view controller give me the Cell at this particular row um so what we do is we uh",
    "start": "1396640",
    "end": "1403120"
  },
  {
    "text": "access the create a cell then we access our um our local mutable state our comic",
    "start": "1403120",
    "end": "1409039"
  },
  {
    "text": "list and we build our labels together there we do the same thing for the price but we need to be reasonably careful",
    "start": "1409039",
    "end": "1414400"
  },
  {
    "text": "because the price might not have finished downloading so we've got to do a check there to make sure that that's right um and then we can do the same",
    "start": "1414400",
    "end": "1420400"
  },
  {
    "text": "thing with the image the main difference there is we are kicking off an asnc call to download the images if we don't already have",
    "start": "1420400",
    "end": "1425880"
  },
  {
    "text": "one lastly when we hit the bottom then we're going to kick off the load of the next 20 and that's going to be a",
    "start": "1425880",
    "end": "1431360"
  },
  {
    "text": "cascading sequence of callbacks that does the whole lot again all right so I mean this is sort of standard um iOS",
    "start": "1431360",
    "end": "1439360"
  },
  {
    "text": "view controller code um it's what you'll see in most apps just to sort of visualize what's going on here I spent",
    "start": "1439360",
    "end": "1445400"
  },
  {
    "text": "buddy ages coming up with a keynote animation that shows the controller flow popping around between the various callbacks that are going on within our",
    "start": "1445400",
    "end": "1451720"
  },
  {
    "text": "view controller now in each of those callbacks it is accessing the state in some way it's accessing it or mutating",
    "start": "1451720",
    "end": "1458080"
  },
  {
    "text": "it and the problem there is because I mean I haven't finished implementing this I haven't done um you know purchase",
    "start": "1458080",
    "end": "1463880"
  },
  {
    "text": "authorization I haven't done restoring purchases I haven't done managing downloads I haven't done you know managing errors all of these things",
    "start": "1463880",
    "end": "1469640"
  },
  {
    "text": "still need to be done I'm going to have half a dozen more callbacks and probably some more State and things are going to start getting very very fragile okay",
    "start": "1469640",
    "end": "1476120"
  },
  {
    "text": "it's easy for me to look at that State wrong and uh and then bad stuff happens so let's say we uh we want to",
    "start": "1476120",
    "end": "1484279"
  },
  {
    "text": "introduce reactive Coco because it think we think it's going to make things better maybe you went along to ya connected in Melbourne and watched a",
    "start": "1484279",
    "end": "1489799"
  },
  {
    "text": "very handsome and knowledgeable presenter tell you that you should be doing it that way um so let's see what",
    "start": "1489799",
    "end": "1495000"
  },
  {
    "text": "that might look like as an initial pass okay so what we've done we've converted our callbacks into signals but we",
    "start": "1495000",
    "end": "1502039"
  },
  {
    "text": "haven't really fixed anything here so we're pretty much just converting them back into callbacks using the start with next and um and then just using callback",
    "start": "1502039",
    "end": "1509279"
  },
  {
    "text": "base code and this is really really common okay so if you're um if you're dealing with network calls or um",
    "start": "1509279",
    "end": "1515159"
  },
  {
    "text": "location updates it's really really conceptually easy to map those to signals but then once you hit the UI",
    "start": "1515159",
    "end": "1520200"
  },
  {
    "text": "it's sort of not as obvious how you meant to go about doing things here and um and",
    "start": "1520200",
    "end": "1525440"
  },
  {
    "text": "ultimately people end up just dropping back callbacks and you know they don't don't really fix anything in that in",
    "start": "1525440",
    "end": "1531360"
  },
  {
    "text": "that area so there's not an awful lot of uh guidance from the racket Coco Community",
    "start": "1531360",
    "end": "1536559"
  },
  {
    "text": "about how you would go about doing that um what is there basically says use a view model okay and hopefully some of",
    "start": "1536559",
    "end": "1543559"
  },
  {
    "text": "you heard of mbvm or seen this diagram before um hopefully because I'm not going to bother explaining it uh so I",
    "start": "1543559",
    "end": "1550640"
  },
  {
    "text": "don't like view models for reactive Coco the reason being that they end up looking like this okay so it's a class",
    "start": "1550640",
    "end": "1556919"
  },
  {
    "text": "it's a reference type so it's shared and then we've got a bunch of mutable properties which are a reactive cocoa",
    "start": "1556919",
    "end": "1562600"
  },
  {
    "text": "type that can both um consume and emit signals so they can uh they can observe",
    "start": "1562600",
    "end": "1567880"
  },
  {
    "text": "and publish events okay and what ends up happening there is you start seeing things like this where you've got very",
    "start": "1567880",
    "end": "1574360"
  },
  {
    "text": "very fine grained property based notifications coupling your view model through to your view hierarchy and then",
    "start": "1574360",
    "end": "1579799"
  },
  {
    "text": "on the other side we tend to see signals just being wide directly into the view model okay and so in this scenario",
    "start": "1579799",
    "end": "1585919"
  },
  {
    "text": "you're not really getting the most out of reactive Coco it's more more or less just a glorified uh bindings layer on",
    "start": "1585919",
    "end": "1591120"
  },
  {
    "text": "The View side and you've got this sort of stateful objectoriented um view model sitting in the middle it's a bit like",
    "start": "1591120",
    "end": "1596919"
  },
  {
    "text": "the NSA it's uh it's intercepting all of the signals and then passing information onto to people on a need to know",
    "start": "1596919",
    "end": "1603880"
  },
  {
    "text": "basis um and it's not too dissimilar to the way that we always used Objective C with kvo so we can do a little bit",
    "start": "1603880",
    "end": "1610200"
  },
  {
    "text": "better um but how how would we do that so I do like looking at JavaScript view Frameworks for that because ultimately",
    "start": "1610200",
    "end": "1617000"
  },
  {
    "text": "anything that can make sense of a clunky is the Dom using a language as awful as JavaScript must be doing something right",
    "start": "1617000",
    "end": "1623840"
  },
  {
    "text": "so if we have a look at I'm slowly pieing off all of the JavaScript developers um so if we have a look at",
    "start": "1623840",
    "end": "1629720"
  },
  {
    "text": "react notive some of the really nice things that are going on there is we've got that concept of the single uh render",
    "start": "1629720",
    "end": "1635200"
  },
  {
    "text": "method uh the props which youve got all the data needed to render the view um and the the um oneway data flow and so",
    "start": "1635200",
    "end": "1641679"
  },
  {
    "text": "we might end up having something like this so if we can um combine all of our asynchronous operations into a single",
    "start": "1641679",
    "end": "1647720"
  },
  {
    "text": "large signal an Uber signal if you will um and then just provide a fully formed",
    "start": "1647720",
    "end": "1652840"
  },
  {
    "text": "properties uh type through to the view controller The View controller can just render that within a single callback and",
    "start": "1652840",
    "end": "1658559"
  },
  {
    "text": "everybody's happy okay and then we can just pass an action up through when we need to perform user interface uh sort",
    "start": "1658559",
    "end": "1664519"
  },
  {
    "text": "of events and that can feed back into our signal and uh and render everything so that sounds really awesome",
    "start": "1664519",
    "end": "1671240"
  },
  {
    "text": "but how do we build this Uber signal um so it's a bit hard to visualize this",
    "start": "1671240",
    "end": "1676919"
  },
  {
    "text": "from the code so I've done some more breathtaking keyote animations firstly we've got a signal",
    "start": "1676919",
    "end": "1682559"
  },
  {
    "text": "that returns our values from the server there's only three of them but pretend there's 20 for argument sake um we can",
    "start": "1682559",
    "end": "1688519"
  },
  {
    "text": "perform a flat map to generate new signals one of which uh gets the process from the App Store and one of which",
    "start": "1688519",
    "end": "1694519"
  },
  {
    "text": "returns thumbnails from our server so the prices are good to go um we're happy with those the thumbnails from the",
    "start": "1694519",
    "end": "1700120"
  },
  {
    "text": "server are an issue because they're coming through one at a time and because we want to send them through all at once uh you know we um we're going to have to",
    "start": "1700120",
    "end": "1706720"
  },
  {
    "text": "store them somewhere which sounds suspicious like State and that's a bit evil so we could do a collect which we wait till they're all um finish",
    "start": "1706720",
    "end": "1713399"
  },
  {
    "text": "downloading and then send through an array but then we don't get anything until they're all done so instead we'll do a scan which uh basically do use it",
    "start": "1713399",
    "end": "1721480"
  },
  {
    "text": "an accumulator like the reduced function in Swift array and um gradually builds",
    "start": "1721480",
    "end": "1726640"
  },
  {
    "text": "up a dictionary of thumbnails as they come down okay we can then use combine latest",
    "start": "1726640",
    "end": "1732600"
  },
  {
    "text": "okay and that will as I said before send through a tle with each of the latest values on each of those three signals",
    "start": "1732600",
    "end": "1739080"
  },
  {
    "text": "okay and hopefully you should be able to see from there we'll be able to do a map from a toule of arays to an array of",
    "start": "1739080",
    "end": "1746519"
  },
  {
    "text": "tles or an array of of property objects here so importantly here each event that we're sending through is the full list",
    "start": "1746519",
    "end": "1752200"
  },
  {
    "text": "of 20 items okay but initially it doesn't have very much detail and then progressively more and more detail gets",
    "start": "1752200",
    "end": "1757640"
  },
  {
    "text": "added as more information arrives Okay so we've got a single event which has got all of the information we need to",
    "start": "1757640",
    "end": "1763480"
  },
  {
    "text": "render the view all right so let's have a look and see how that might look look in code",
    "start": "1763480",
    "end": "1769399"
  },
  {
    "text": "it's time coding demo time you guys aren't as excited about the coding demo as I thought you might",
    "start": "1769399",
    "end": "1775799"
  },
  {
    "text": "be yes coding demo time okay so I have here some properties",
    "start": "1775799",
    "end": "1784519"
  },
  {
    "text": "uh types which I've generated in Swift they are mutable Swift um value types unlike JavaScript they are actually",
    "start": "1784519",
    "end": "1790600"
  },
  {
    "text": "immutable as in uh if you try and mutate them the compiler will actually give you",
    "start": "1790600",
    "end": "1795880"
  },
  {
    "text": "an error um for JavaScript developers compiling is kind of like jitting except it happens before you run the",
    "start": "1795880",
    "end": "1803480"
  },
  {
    "text": "software uh so I've got all my values that I need for each row in my comic book row props and then I've got a top level store props which has got the",
    "start": "1803480",
    "end": "1809720"
  },
  {
    "text": "array of rows and an action which can be used to load more all right so let's go back to our",
    "start": "1809720",
    "end": "1815399"
  },
  {
    "text": "view controller code this is the same you saw on the slide before and that's not rendering",
    "start": "1815399",
    "end": "1822240"
  },
  {
    "text": "properly maybe X code needs to be reactive so I'm going to start with my cell um there's no in this cell which is",
    "start": "1822240",
    "end": "1828799"
  },
  {
    "text": "not uncommon in uh in table view cells at the moment and what I'm going to do",
    "start": "1828799",
    "end": "1834080"
  },
  {
    "text": "you guys did not want to watch me type all that out by the way um so what I'm going to do is declare a props uh type",
    "start": "1834080",
    "end": "1840320"
  },
  {
    "text": "on my cell which is a mutable property and it's of this comic book row props type which has got my the values all the",
    "start": "1840320",
    "end": "1845760"
  },
  {
    "text": "values I need to render the cell um it's it's a strongly typed value so obviously I'm always going to get that that uh a",
    "start": "1845760",
    "end": "1853039"
  },
  {
    "text": "value of that type rather than JavaScript in which case I might get any OD rubbish thanks to the of the type system",
    "start": "1853039",
    "end": "1859919"
  },
  {
    "text": "sorry for the JavaScript developers a type",
    "start": "1859919",
    "end": "1863880"
  },
  {
    "text": "system okay so within my render function um I'm just doing regular Ur kit imperative code okay the important this",
    "start": "1865080",
    "end": "1871559"
  },
  {
    "text": "an important concept here I'm not trying to fight the framework I'm just doing regular UI kit code here um and because",
    "start": "1871559",
    "end": "1878519"
  },
  {
    "text": "I've got all of the information that I need to render that view I can just do it within that single function then within my initialization code I'm",
    "start": "1878519",
    "end": "1884919"
  },
  {
    "text": "accessing the signal from that property and then just doing start with next to start the signal and register the",
    "start": "1884919",
    "end": "1890440"
  },
  {
    "text": "Callback which is my render Method All right so I've got that working now let's do the sorry let's do",
    "start": "1890440",
    "end": "1897480"
  },
  {
    "text": "the table view level so I'll get rid of this horrible Mankey",
    "start": "1897480",
    "end": "1902600"
  },
  {
    "text": "State okay oh no my delete key is not working that's",
    "start": "1903320",
    "end": "1909880"
  },
  {
    "text": "weird a there we go um",
    "start": "1912639",
    "end": "1918960"
  },
  {
    "text": "so I'll do props at the top level and I've got a render function now this render function is a",
    "start": "1918960",
    "end": "1924880"
  },
  {
    "text": "little bit more complicated this is where the react model falls down a little bit I don't have um an automatic",
    "start": "1924880",
    "end": "1930080"
  },
  {
    "text": "diffing um you know framework that's going to work out what's changed so I can't just reender the whole table um",
    "start": "1930080",
    "end": "1936320"
  },
  {
    "text": "actually I can just reender the whole table I could do a table view reload data but that's not very fun um so what I'm trying to show here is I can do",
    "start": "1936320",
    "end": "1943039"
  },
  {
    "text": "manual diffing by sending through the old and new properties and then just working out what's changed in this case I'm doing an insert on you know the",
    "start": "1943039",
    "end": "1949519"
  },
  {
    "text": "additional rows that have been added so where would I get the old and new properties from I can hear you asking I",
    "start": "1949519",
    "end": "1955399"
  },
  {
    "text": "can't hear you asking I'm just",
    "start": "1955399",
    "end": "1958639"
  },
  {
    "text": "pretending okay so what I can do is use the reactive Coco combine previous and that's automatically going to send",
    "start": "1960600",
    "end": "1965840"
  },
  {
    "text": "through the previous and the next value and then I can do my manual diffing and perform my render code from there okay",
    "start": "1965840",
    "end": "1971880"
  },
  {
    "text": "so from now I can get rid of my old callbacks okay and I'm just going to",
    "start": "1971880",
    "end": "1978799"
  },
  {
    "text": "update a couple of bits that are broken okay so this is accessing the uh",
    "start": "1978799",
    "end": "1986799"
  },
  {
    "text": "the mutable property as a property rather than as a uh um as a signal which",
    "start": "1986799",
    "end": "1992799"
  },
  {
    "text": "is really really handy if you're trying to mix um reactive and imperative code and if you're dealing with lots of things that have callbacks um it makes",
    "start": "1992799",
    "end": "2000679"
  },
  {
    "text": "it very very handy to work with so what I can do now is I get rid of all of my rendering code out of the to the view",
    "start": "2000679",
    "end": "2006440"
  },
  {
    "text": "controller level and instead what I'm going to do is",
    "start": "2006440",
    "end": "2013399"
  },
  {
    "text": "bind um bind the props object at the at the cell level to the props object at",
    "start": "2013399",
    "end": "2018799"
  },
  {
    "text": "the uh view controller level using this Natty little sperm operator and um",
    "start": "2018799",
    "end": "2025440"
  },
  {
    "text": "basically it's going to automatically update whenever the uh the properties at the top level change all of the views",
    "start": "2025440",
    "end": "2030480"
  },
  {
    "text": "the cells are going to get an updated event on the properties now I don't necessarily want that um if nothing's",
    "start": "2030480",
    "end": "2035760"
  },
  {
    "text": "changed on that particular row so I can fix that using what we saw before which is the skip repeats",
    "start": "2035760",
    "end": "2043039"
  },
  {
    "text": "function okay so now it's only going to reender the view if something's actually changed on that properties object okay",
    "start": "2044000",
    "end": "2050839"
  },
  {
    "text": "and lastly I'm just going to do a value load more so when we hit the",
    "start": "2050839",
    "end": "2056280"
  },
  {
    "text": "bottom of our table view um we're going to kick off a Reload and that's our signal is going to automatically update",
    "start": "2056280",
    "end": "2062480"
  },
  {
    "text": "things okay so at the top level on the not that one sorry and the up delegate",
    "start": "2062480",
    "end": "2069878"
  },
  {
    "text": "um I can do a similar thing in that I",
    "start": "2069879",
    "end": "2075000"
  },
  {
    "text": "can uh bind the signal um with my properties using the sperm operator again um to my top level signal so I'm",
    "start": "2075000",
    "end": "2081800"
  },
  {
    "text": "passing in all of the all of the context all of the the state generating component and I don't need to access Singletons from within my bu controller",
    "start": "2081800",
    "end": "2088358"
  },
  {
    "text": "which makes me very happy all right so let's run that now",
    "start": "2088359",
    "end": "2095000"
  },
  {
    "text": "I had to put him on there okay so you can see that everything's loading happily asynchronously and it's just",
    "start": "2098720",
    "end": "2103960"
  },
  {
    "text": "rendering and uh then extra things are being inserted when they come down so that's our demo hopefully it shows I",
    "start": "2103960",
    "end": "2110359"
  },
  {
    "text": "mean the key elements there are trying to push more of the asynchrony and more of the state into the signal and then",
    "start": "2110359",
    "end": "2116480"
  },
  {
    "text": "just uh consolidate what we're working with a view in that single rendom method we borrowed from react um to make it a",
    "start": "2116480",
    "end": "2122599"
  },
  {
    "text": "little bit more predictable and uh you know and easy to understand and work with okay so to wrap up I'm going to",
    "start": "2122599",
    "end": "2129520"
  },
  {
    "text": "hand back to Ben and he will uh he will go through some other Concepts all right um thanks",
    "start": "2129520",
    "end": "2136560"
  },
  {
    "text": "Sam so so there's two things that we've kind of introduced to just get you to",
    "start": "2136560",
    "end": "2142160"
  },
  {
    "text": "start to think about the possibilities that are available to you when it comes to using some functional techniques to",
    "start": "2142160",
    "end": "2147240"
  },
  {
    "text": "to write your UI code um before we before we wrap up I think that there's just a few extra things we want to kind",
    "start": "2147240",
    "end": "2153599"
  },
  {
    "text": "of put on your radar if this has Peak your interest um I guess the first thing is we kind of mentioned this at the",
    "start": "2153599",
    "end": "2159440"
  },
  {
    "text": "start is that speaking about speaking to what react does really they're just ideas so they're not specific to the web",
    "start": "2159440",
    "end": "2166800"
  },
  {
    "text": "as we've proven but they're not even specific to JavaScript okay so one thing that you might be interested in is",
    "start": "2166800",
    "end": "2172880"
  },
  {
    "text": "something like few. Swift so this really kind of takes some of the ideas behind rack and imports them literally to Swift",
    "start": "2172880",
    "end": "2179079"
  },
  {
    "text": "so um here's some few Swift Code now I'm not a swift expert what we can kind of see there is that they've kind of got a",
    "start": "2179079",
    "end": "2184119"
  },
  {
    "text": "DSL for describing their UI just as we sort of had with with jsx and it's using",
    "start": "2184119",
    "end": "2189920"
  },
  {
    "text": "um a virtual view hierarchy here and taking care of all of that diff process and everything explicitly in this case and then this opens it up to describing",
    "start": "2189920",
    "end": "2197079"
  },
  {
    "text": "your eyes declaratively and modeling change within your application with one way data flow that said f. Swift is in",
    "start": "2197079",
    "end": "2203800"
  },
  {
    "text": "at kind of at a very early stage I don't think I'd necessarily describe it as production ready at this point in time",
    "start": "2203800",
    "end": "2208839"
  },
  {
    "text": "but you know if you're in a swift there are other Alternatives available similarly there's a component kit if you",
    "start": "2208839",
    "end": "2213960"
  },
  {
    "text": "into Objective C okay another thing I want to talk about that you may or may not have heard",
    "start": "2213960",
    "end": "2219000"
  },
  {
    "text": "of in the context of react is flux so important thing firstly about flux is it's just a pattern I really want to",
    "start": "2219000",
    "end": "2224920"
  },
  {
    "text": "kind of emphasize that up front it's a pattern that takes this concept of oneway data flow and allows you to apply",
    "start": "2224920",
    "end": "2230480"
  },
  {
    "text": "it to your entire data model rather than just your bu so in flux we sort of have a view still um and we have a set of",
    "start": "2230480",
    "end": "2237319"
  },
  {
    "text": "stores and that's where we externalize the state within our application we have this dispatcher object and its job is to",
    "start": "2237319",
    "end": "2242640"
  },
  {
    "text": "take actions that are produced by your view in response to some sort of stimulus send it to the that goes to the the dispatcher and the dispatcher's job",
    "start": "2242640",
    "end": "2248880"
  },
  {
    "text": "is to Route it to the appropriate Store the store is then responsible for for changing the the state accordingly and",
    "start": "2248880",
    "end": "2254319"
  },
  {
    "text": "it gets sent back to the view accordingly now there are a multitude of implementations of the flux patent",
    "start": "2254319",
    "end": "2259720"
  },
  {
    "text": "available for JavaScript and also for other languages as well but if you're interested in bringing this oneway data",
    "start": "2259720",
    "end": "2264920"
  },
  {
    "text": "flow approach to your application whil still externalizing your model from your view view explicitly the flux patterns",
    "start": "2264920",
    "end": "2271200"
  },
  {
    "text": "one way to go I've seen it used with react native applications um there's no reason that you know can't be us that",
    "start": "2271200",
    "end": "2277520"
  },
  {
    "text": "text and I've even seen implementations for Swift as well second thing I want to talk about is Redux now this is a bit",
    "start": "2277520",
    "end": "2282960"
  },
  {
    "text": "more of a a JavaScript Fanboy um framework at the moment but there's again no reason that the concepts can't",
    "start": "2282960",
    "end": "2288040"
  },
  {
    "text": "be applied to other languages Redux is a bit like flux but it simplifies elements",
    "start": "2288040",
    "end": "2293760"
  },
  {
    "text": "of it and introduces explicitly the concept of immutability so in rux you still have a view but you now just have",
    "start": "2293760",
    "end": "2299920"
  },
  {
    "text": "a single store and that still contains a model and that res uh that contains or represents the entire Atomic state of",
    "start": "2299920",
    "end": "2306319"
  },
  {
    "text": "your application of a particular point in time just as in flux we still have actions that come out of your view um",
    "start": "2306319",
    "end": "2312960"
  },
  {
    "text": "but quite explicitly Redux has functions that will take an action and a model and",
    "start": "2312960",
    "end": "2318040"
  },
  {
    "text": "produce an entirely new model representing the new state of application after being transformed by that action used in conjunction with",
    "start": "2318040",
    "end": "2324400"
  },
  {
    "text": "something like react it can then be fed back into the view and rendered efficiently again I've seen um Redux",
    "start": "2324400",
    "end": "2330000"
  },
  {
    "text": "being used with react native quite successfully and there's no reason it can't be ported to other platforms as well finally there's the Big Daddy of",
    "start": "2330000",
    "end": "2336839"
  },
  {
    "text": "them all um Elm so Elm is a compil to JavaScript language that pretty much",
    "start": "2336839",
    "end": "2342960"
  },
  {
    "text": "unifies this concept of functional ractive programming that Sam's talked about with declarative UI is what I've talked about brings them together",
    "start": "2342960",
    "end": "2349480"
  },
  {
    "text": "together into one approach uh Elm is its own language and it's typed unlike JavaScript um and in fact it's got quite",
    "start": "2349480",
    "end": "2356040"
  },
  {
    "text": "a modern type inference engine in it which is kind of cool um probably the most notable thing um about Elm is that",
    "start": "2356040",
    "end": "2362480"
  },
  {
    "text": "in Elm like everything has to be immutable mutability is not an option in Elm",
    "start": "2362480",
    "end": "2367880"
  },
  {
    "text": "Elm also has a concept of signals just like in ractive Coco and um takes this",
    "start": "2367880",
    "end": "2373200"
  },
  {
    "text": "through to its Lo logical conclusion so in Elm you have a signal that represents your model and a signal that repres",
    "start": "2373200",
    "end": "2379520"
  },
  {
    "text": "represents your view and the view signal is derived from the model signal and when actions come into your application also on signals they're used to create a",
    "start": "2379520",
    "end": "2386160"
  },
  {
    "text": "whole new model on the model signal and then that's used to create a new view on The View signal and so really your",
    "start": "2386160",
    "end": "2391240"
  },
  {
    "text": "modeling your entire application that way and even better this approach composes within your application so small parts of your screen can use it",
    "start": "2391240",
    "end": "2397599"
  },
  {
    "text": "and the application overall can use it and that's kind of what's known as the elm architecture and I think what you'll find is that uh really with things like",
    "start": "2397599",
    "end": "2404760"
  },
  {
    "text": "Redux everyone's just kind of unwittingly uh or otherwise um gravitating towards the way that Elm",
    "start": "2404760",
    "end": "2411560"
  },
  {
    "text": "does things so if uh I've seen re R native being used in very early stages",
    "start": "2411560",
    "end": "2416839"
  },
  {
    "text": "with Elm but you know certainly not even close to ready for production but if you're interested in the Confluence",
    "start": "2416839",
    "end": "2422680"
  },
  {
    "text": "between functional retive programming and declarative uis I think elm's a really good place to look at just to get",
    "start": "2422680",
    "end": "2428200"
  },
  {
    "text": "your head around how the concepts can be unified so if SE I wanted us to get",
    "start": "2428200",
    "end": "2435160"
  },
  {
    "text": "anything across to you in this presentation it's just been that there are now alternatives to using traditional NBC approaches to building",
    "start": "2435160",
    "end": "2441560"
  },
  {
    "text": "uis be they for mobile or web or anywhere else and these these techniques",
    "start": "2441560",
    "end": "2447160"
  },
  {
    "text": "Embrace functional programming paradigms okay specifically the sorts of programs that help you start to minimize and in",
    "start": "2447160",
    "end": "2453560"
  },
  {
    "text": "some cases even completely eliminate mutable state from application and the good news is that you can actually start",
    "start": "2453560",
    "end": "2459079"
  },
  {
    "text": "to use these techniques now you know you could use a framework like R native if you're um willing to adopt the O",
    "start": "2459079",
    "end": "2466440"
  },
  {
    "text": "encompassing approach or you can start to experiment with FP Frameworks like um Sam intro introduced today with retive",
    "start": "2466440",
    "end": "2472599"
  },
  {
    "text": "Coco but either way whichever way you come at it um I think now is a really good time to start to look at these",
    "start": "2472599",
    "end": "2478240"
  },
  {
    "text": "things and see how they can help you write UI code that's just easier to understand comprehend and reason about",
    "start": "2478240",
    "end": "2485040"
  },
  {
    "text": "thanks very much [Applause]",
    "start": "2485040",
    "end": "2492739"
  }
]