[
  {
    "text": "[Music]",
    "start": "980",
    "end": "7849"
  },
  {
    "text": "how's it going everyone good we're all right good yeah yeah excited",
    "start": "12530",
    "end": "19350"
  },
  {
    "text": "enthusiastic all right okay so I'm gonna talk about cloud native Java my name is",
    "start": "19350",
    "end": "24840"
  },
  {
    "text": "Kenny Bustani I'm a spring developer advocate at pivotal a little bit about myself",
    "start": "24840",
    "end": "29880"
  },
  {
    "text": "I spent a couple years writing a book called cloud native Java with Josh long who's a colleague of mine at pivotal",
    "start": "29880",
    "end": "36510"
  },
  {
    "text": "it's about 600 pages of everything that you want to know about cloud native architecture building cloud native java",
    "start": "36510",
    "end": "43320"
  },
  {
    "text": "applications so most of the stuff that I talked about today if you want a good reference for it feel free to check out",
    "start": "43320",
    "end": "50730"
  },
  {
    "text": "the book I'll be doing book signings tomorrow I'm not sure what time I think around the same time 11 o'clock so",
    "start": "50730",
    "end": "56489"
  },
  {
    "text": "you'll be able to get a full book okay so let's jump right in",
    "start": "56489",
    "end": "61530"
  },
  {
    "text": "we're gonna talk about a lot of stuff I'm gonna go kind of fast because there's a lot of content but the first",
    "start": "61530",
    "end": "67380"
  },
  {
    "text": "thing we're to talk about is architecture because it's really important to understand the why rather",
    "start": "67380",
    "end": "73200"
  },
  {
    "text": "than the what I think so often today there can be a lot of popular buzzwords out there and it's really hard for",
    "start": "73200",
    "end": "79080"
  },
  {
    "text": "people to kind of weed through what makes sense and what doesn't until they implement it and then it usually doesn't make sense and so we're",
    "start": "79080",
    "end": "85650"
  },
  {
    "text": "going to talk about monolith to microservices and then I'm going to show you a microservice reference architecture which is an online store",
    "start": "85650",
    "end": "91710"
  },
  {
    "text": "we're gonna use that throughout this talk and then we'll dive into spring",
    "start": "91710",
    "end": "96869"
  },
  {
    "text": "boot and spring cloud all right so microservices so the question we have to",
    "start": "96869",
    "end": "102060"
  },
  {
    "text": "ask is how did we get there now we started with the monolithic application now most of you all of you are probably",
    "start": "102060",
    "end": "108540"
  },
  {
    "text": "familiar with this architecture this is an Apache Tomcat server this application",
    "start": "108540",
    "end": "113670"
  },
  {
    "text": "server is going to house our war deployment that's going to be the artifact that our entire organization is",
    "start": "113670",
    "end": "118829"
  },
  {
    "text": "going to basically compile and work on together and push to production it's going to sit on that application server",
    "start": "118829",
    "end": "124049"
  },
  {
    "text": "and so our entire organization shares this application server they share the database in the backend and they share",
    "start": "124049",
    "end": "131459"
  },
  {
    "text": "that deployment now this causes a lot of cultural problems first of all it's going to slow",
    "start": "131459",
    "end": "137260"
  },
  {
    "text": "our velocity getting into production right so if we have a bunch of people working on the same application working",
    "start": "137260",
    "end": "142840"
  },
  {
    "text": "on the same source code if one person changes one line of code you have to compile the entire application and you",
    "start": "142840",
    "end": "149080"
  },
  {
    "text": "have to push it to production right so there's no easy way to scale the number of engineers working on this application",
    "start": "149080",
    "end": "155230"
  },
  {
    "text": "because every time somebody changes something to operationalize it you have to put the entire thing into production",
    "start": "155230",
    "end": "161110"
  },
  {
    "text": "it also takes way too long to ramp up new engineers right so every time you",
    "start": "161110",
    "end": "166840"
  },
  {
    "text": "make a change usually you're adding lines of code and so this monolith can get pretty large and it's gonna be very",
    "start": "166840",
    "end": "172510"
  },
  {
    "text": "difficult for you to just add people to a project to go faster what ends up happening is that if you add more people",
    "start": "172510",
    "end": "179319"
  },
  {
    "text": "at some point because there's just so much going on in that monolith that things tend to go wrong there might be a",
    "start": "179319",
    "end": "184629"
  },
  {
    "text": "defect in production there's a lot of risk and at some point the codebase",
    "start": "184629",
    "end": "189879"
  },
  {
    "text": "really is just too large for any one person to fully comprehend now you might have these experts in the organization",
    "start": "189879",
    "end": "196390"
  },
  {
    "text": "who originally designed the application you might be one of them and today what they do is they spend all of their time",
    "start": "196390",
    "end": "203019"
  },
  {
    "text": "in meetings rather than actually writing code because they're having to teach the history of the codebase right and so as",
    "start": "203019",
    "end": "209980"
  },
  {
    "text": "you add more engineers to this monolith to work on it you're gonna have these experts who are gonna spend majority",
    "start": "209980",
    "end": "216400"
  },
  {
    "text": "their time in meetings trying to explain to the younger engineers what's going on and so this can be very",
    "start": "216400",
    "end": "221440"
  },
  {
    "text": "counterproductive we also have these two forces in the organization we have the",
    "start": "221440",
    "end": "227739"
  },
  {
    "text": "force of change which is our developers we're hiring them to change the application and then we have our DBAs we",
    "start": "227739",
    "end": "234130"
  },
  {
    "text": "have our ops team and they're kind of responsible for resisting that change right so you have this you have this",
    "start": "234130",
    "end": "241450"
  },
  {
    "text": "force for change and then you have the force to resist this change and this causes a lot of tension between these",
    "start": "241450",
    "end": "246519"
  },
  {
    "text": "two groups your developers may want to just throw an artifact of war deployment",
    "start": "246519",
    "end": "251590"
  },
  {
    "text": "over the fence to our ops team and maybe it's a Friday at 5:30 p.m. and they're kind of stuck with the consequences of",
    "start": "251590",
    "end": "257739"
  },
  {
    "text": "that we also have a lot of operational problems as well so we're gonna have to",
    "start": "257739",
    "end": "263890"
  },
  {
    "text": "batch together all of our changes from different right so we're gonna have to integration test across those different teams to",
    "start": "263890",
    "end": "270550"
  },
  {
    "text": "make sure that all of these changes are going to work when they get to production and so there's a lot more coordination now when there's a lot more",
    "start": "270550",
    "end": "277060"
  },
  {
    "text": "coordination before every release the release cycle ends up being longer right so you might have a release cycle that's",
    "start": "277060",
    "end": "283000"
  },
  {
    "text": "four times a year and it's kind of like taking public transportation to production but that bus only comes four",
    "start": "283000",
    "end": "289330"
  },
  {
    "text": "times a year and so you have to really work with somebody else's schedule and that's why this can be very difficult to",
    "start": "289330",
    "end": "295330"
  },
  {
    "text": "work with over time now our operations team is going to drive the runtime environment of the application meaning",
    "start": "295330",
    "end": "302350"
  },
  {
    "text": "that they're going to control all aspects of how our infrastructure in production is going to be managed is",
    "start": "302350",
    "end": "308500"
  },
  {
    "text": "going to be installed what versions of libraries will be on that server and this is going to be very counter",
    "start": "308500",
    "end": "315699"
  },
  {
    "text": "intuitive to your developers who want to use new tools right so developers may want to use the latest and greatest",
    "start": "315699",
    "end": "321400"
  },
  {
    "text": "tools that are available because maybe their friend at a different company is going a lot faster is being more",
    "start": "321400",
    "end": "326710"
  },
  {
    "text": "productive just because they're using new tools and then you have your ops team who's kind of the bottleneck for",
    "start": "326710",
    "end": "332710"
  },
  {
    "text": "having to upgrade these virtual machines but more than anything it's this one",
    "start": "332710",
    "end": "337990"
  },
  {
    "text": "thing you have to deploy everything at once or nothing at all and that's why the monolithic application is very",
    "start": "337990",
    "end": "345669"
  },
  {
    "text": "difficult to manage over time and so on the way to microservice is we got a little bit better we move towards the",
    "start": "345669",
    "end": "352210"
  },
  {
    "text": "SOA now instead of having just one dirt road to production we have three dirt roads to production I have the",
    "start": "352210",
    "end": "358180"
  },
  {
    "text": "accounting service here inventory and the shipping service now the SOA was a",
    "start": "358180",
    "end": "363550"
  },
  {
    "text": "good idea in practice right what we did is we separated that release cycle from one two maybe three or four or five and",
    "start": "363550",
    "end": "369580"
  },
  {
    "text": "so now we have three or four or five different ways to get code into production on a release cycle right and",
    "start": "369580",
    "end": "377020"
  },
  {
    "text": "so the problem with the SOA is that over time what we didn't realize is that we",
    "start": "377020",
    "end": "382780"
  },
  {
    "text": "were sharing libraries now whenever you share ownership over anything across teams it's gonna blur these boundaries",
    "start": "382780",
    "end": "389800"
  },
  {
    "text": "and these teams are going to have trouble negotiating who changes what right maybe one team changes something",
    "start": "389800",
    "end": "396940"
  },
  {
    "text": "and it breaks it for the other team now at the very bottom you have that main language and these are the objects",
    "start": "396940",
    "end": "402429"
  },
  {
    "text": "that these services are going to need to exchange with one another it's their language and what ends up happening is",
    "start": "402429",
    "end": "409209"
  },
  {
    "text": "that the ownership of these objects becomes blurred over time now if I wanted to make a change to say the",
    "start": "409209",
    "end": "415389"
  },
  {
    "text": "customer record down there then I can just deploy the accounting service but what happens when I make a change to the",
    "start": "415389",
    "end": "421449"
  },
  {
    "text": "address record because this is owned by or used by three separate services now I",
    "start": "421449",
    "end": "427089"
  },
  {
    "text": "have to have a coordinated release of all three of these services instead of just deploying one at a time and so now",
    "start": "427089",
    "end": "433029"
  },
  {
    "text": "I have a distributed monolith and over time this is going to become worse than the monolith and so now we've arrived at",
    "start": "433029",
    "end": "440610"
  },
  {
    "text": "microcircuits and a lot of you know what micro services are today so I'm not going to jump into it too much but",
    "start": "440610",
    "end": "446759"
  },
  {
    "text": "basically you're gonna have these small team of developers who are going to have their own release cycle they're going to",
    "start": "446759",
    "end": "453069"
  },
  {
    "text": "integrate with api's and they're gonna have everything that they need to be able to both build and run their",
    "start": "453069",
    "end": "458589"
  },
  {
    "text": "application in production and so in this example here I have a user service movie",
    "start": "458589",
    "end": "463869"
  },
  {
    "text": "rating recommendation and an analysis service now you'll notice here as well as they have their own application",
    "start": "463869",
    "end": "470319"
  },
  {
    "text": "server is that they also have their own database and so this can also be an",
    "start": "470319",
    "end": "475330"
  },
  {
    "text": "issue maybe this is the next problem that we saw an SOA is that we have too many databases all were there different",
    "start": "475330",
    "end": "481269"
  },
  {
    "text": "guarantees and we still have foreign key relationships spanning across these boundaries and so while we've gotten a",
    "start": "481269",
    "end": "486969"
  },
  {
    "text": "little bit better we've also gotten a little bit worse so now I'm gonna walk",
    "start": "486969",
    "end": "492579"
  },
  {
    "text": "you through an online store example that I put together for the book it's called cloud native Outfitters and this is an",
    "start": "492579",
    "end": "500169"
  },
  {
    "text": "online store it sells for t-shirts about the cloud and before I can actually add",
    "start": "500169",
    "end": "507099"
  },
  {
    "text": "any of these to my cart I'm gonna go ahead and sign in here and that's gonna direct me to a different URL here this",
    "start": "507099",
    "end": "514209"
  },
  {
    "text": "is my off to Gateway and I'll sign in",
    "start": "514209",
    "end": "520380"
  },
  {
    "text": "and that's going to redirect me back to the application now this is a micro",
    "start": "520380",
    "end": "525579"
  },
  {
    "text": "service architecture so on the very front I have an angularjs application it's all static content in the backend I",
    "start": "525579",
    "end": "532750"
  },
  {
    "text": "have multiple micro services so if you're a front-end developer kind of think about how you might build this application usually you",
    "start": "532750",
    "end": "539920"
  },
  {
    "text": "integrate with one API right so if you have many more micro services what's the solution to be able to actually",
    "start": "539920",
    "end": "545770"
  },
  {
    "text": "integrate with those api's so now I'll go back to one of these t-shirts I'll",
    "start": "545770",
    "end": "550990"
  },
  {
    "text": "add a few to the cart and then I'll go",
    "start": "550990",
    "end": "556840"
  },
  {
    "text": "to my shopping cart and checkout and so",
    "start": "556840",
    "end": "563740"
  },
  {
    "text": "we see that the order was created we can see the status of the order as well as the items that were ordered shipping",
    "start": "563740",
    "end": "570460"
  },
  {
    "text": "address and I believe a credit card and then I can go to my account settings so",
    "start": "570460",
    "end": "576580"
  },
  {
    "text": "I can see information about my account and then finally I can go to my orders",
    "start": "576580",
    "end": "582480"
  },
  {
    "text": "so I'll ask you guys how many micro services do you think are powering this application just threw out a number I've",
    "start": "582480",
    "end": "592630"
  },
  {
    "text": "heard seven three more than seven come",
    "start": "592630",
    "end": "598240"
  },
  {
    "text": "on guys more than seven any guesses ten nailed it",
    "start": "598240",
    "end": "603270"
  },
  {
    "text": "thank you got a little awkward there for a second all right so ten and this is",
    "start": "603270",
    "end": "608380"
  },
  {
    "text": "what it looks like so I have my ten separate applications and at the very top we have in purple the online store",
    "start": "608380",
    "end": "613660"
  },
  {
    "text": "web that's where all my static content is going to be deployed and so I'll have my front-end team who's working on the",
    "start": "613660",
    "end": "619600"
  },
  {
    "text": "front-end content being able to deploy that independently to that application we also interacted with another",
    "start": "619600",
    "end": "625930"
  },
  {
    "text": "application called the user service there in the middle and that user service is going to be my Oh off to",
    "start": "625930",
    "end": "631000"
  },
  {
    "text": "Gateway now down below that I have all my micro services I have the catalogue service the account service inventory",
    "start": "631000",
    "end": "637600"
  },
  {
    "text": "shopping cart and my order service now the way that the front-end developers are going to communicate with the API",
    "start": "637600",
    "end": "644370"
  },
  {
    "text": "api's in the backend is they're going to go through that read application that edge service and that's going to be my",
    "start": "644370",
    "end": "649660"
  },
  {
    "text": "API gateway so in the middle all of those four applications they're solving cross-cutting concerns that all of these",
    "start": "649660",
    "end": "655750"
  },
  {
    "text": "micro services are going to need to be able to function now that online store web if it wants to",
    "start": "655750",
    "end": "661300"
  },
  {
    "text": "communicate with let's say the inventory service it's going to go through that edge service by going to ford slash inventory",
    "start": "661300",
    "end": "667150"
  },
  {
    "text": "and it's going to be reverse proxy to that inventory service and that response is then going to come back up to the",
    "start": "667150",
    "end": "673150"
  },
  {
    "text": "online store web now that user service there is pretty important when I sign in I'm going to be given a session and that",
    "start": "673150",
    "end": "679870"
  },
  {
    "text": "session is going to be relayed every single request that I go downstream let's say I go from the online store web",
    "start": "679870",
    "end": "686110"
  },
  {
    "text": "to the inventory service to the order service this session is going to be",
    "start": "686110",
    "end": "691300"
  },
  {
    "text": "relayed with every single request downstream and so that each micro service is going to have that session",
    "start": "691300",
    "end": "696970"
  },
  {
    "text": "they can call back to the user service to validate that user session and then I",
    "start": "696970",
    "end": "702279"
  },
  {
    "text": "have my discovery service and my config server we're gonna go over those more in a bit alright so there are two popular",
    "start": "702279",
    "end": "711250"
  },
  {
    "text": "migration strategies today for people going from monolith to microservice the",
    "start": "711250",
    "end": "716290"
  },
  {
    "text": "first one is called splitting the monolith and the idea here is that you're going to look at your monolithic application and you're going to begin to",
    "start": "716290",
    "end": "722920"
  },
  {
    "text": "slice off pieces of it refactor that out to a separate application and then communicate back to it via API now in",
    "start": "722920",
    "end": "730990"
  },
  {
    "text": "this example I have the start of a splitting the monolith exercise which is",
    "start": "730990",
    "end": "736720"
  },
  {
    "text": "that the customer service here is my monolithic application now the first step the easiest step is just to slice",
    "start": "736720",
    "end": "743350"
  },
  {
    "text": "off anything that's stateless right so anything that doesn't connect to the database that's easy to split out and",
    "start": "743350",
    "end": "749230"
  },
  {
    "text": "refactor into a separate application and now you have to release cycles and so that's what I've done here with the",
    "start": "749230",
    "end": "754810"
  },
  {
    "text": "online banking web app that's just going to be front-end content and then it's going to communicate back with the",
    "start": "754810",
    "end": "760720"
  },
  {
    "text": "customer service over HTTP now the next part of this is very hard right so now I",
    "start": "760720",
    "end": "765790"
  },
  {
    "text": "have to look at the backend and I have to start to split apart that schema now this is a very simple schema I have the",
    "start": "765790",
    "end": "772180"
  },
  {
    "text": "account customer and user table now in reality it's probably a hundred different tables with all of these",
    "start": "772180",
    "end": "778750"
  },
  {
    "text": "foreign key relationships spanning across each one of these tables now I have to pick which one of these tables",
    "start": "778750",
    "end": "784720"
  },
  {
    "text": "to rip out and to migrate to a different or a new database and so I've chosen the",
    "start": "784720",
    "end": "791140"
  },
  {
    "text": "user table and so I'll have to do a migration of that data to that new database called the user DB and then I'm",
    "start": "791140",
    "end": "798280"
  },
  {
    "text": "going to refactor out all the functionality that's related to that data in the customer service and I'm going to put",
    "start": "798280",
    "end": "804460"
  },
  {
    "text": "that into a new application called the user service and then I'm going to communicate back to that customer",
    "start": "804460",
    "end": "809470"
  },
  {
    "text": "service via an API now in practice this ends up failing for most large enterprise companies because they have a",
    "start": "809470",
    "end": "816280"
  },
  {
    "text": "lot more going on so on paper splitting the monolith looks really good but in practice it becomes very difficult",
    "start": "816280",
    "end": "821950"
  },
  {
    "text": "because of the data challenge now in addition to having a complex schema you",
    "start": "821950",
    "end": "827350"
  },
  {
    "text": "might have a data warehouse in the backend and you might have ETL that are going back and forth between third party",
    "start": "827350",
    "end": "833830"
  },
  {
    "text": "systems and your system of record and starting to split those apart is very",
    "start": "833830",
    "end": "838840"
  },
  {
    "text": "difficult and so there's a better way to do this now the Strangler pattern was",
    "start": "838840",
    "end": "844000"
  },
  {
    "text": "first introduced by martin fowler back in around 2001 or 2002 he went to",
    "start": "844000",
    "end": "849460"
  },
  {
    "text": "australia on vacation and he saw this fascinating plant this is called a strangler vine now what the strangler",
    "start": "849460",
    "end": "856060"
  },
  {
    "text": "vine does that seeds itself in the upper branches of a fig tree and it works its way down the trunk all the way to the",
    "start": "856060",
    "end": "862510"
  },
  {
    "text": "roots strangling the resources of the tree over time and then eventually killing it now",
    "start": "862510",
    "end": "868480"
  },
  {
    "text": "the reason why it does this is it doesn't have to compete from the forest floor all the way up to the canopy it",
    "start": "868480",
    "end": "874090"
  },
  {
    "text": "can take a top-down approach now what martin said was that you could actually take this and apply it to your software",
    "start": "874090",
    "end": "881020"
  },
  {
    "text": "and that you could gradually create a new system around the edges of the old letting it grow slowly over several",
    "start": "881020",
    "end": "887020"
  },
  {
    "text": "years until the old system is strangled now you can apply this to your micro",
    "start": "887020",
    "end": "892330"
  },
  {
    "text": "services as well but the question again is going to be around your data and so that data might represent the water of",
    "start": "892330",
    "end": "899440"
  },
  {
    "text": "the tree and the question is how can we take advantage of building micro services that also strangle data away",
    "start": "899440",
    "end": "905560"
  },
  {
    "text": "from a large system of record and a legacy system now this is going to",
    "start": "905560",
    "end": "910900"
  },
  {
    "text": "depend on what your architecture looks like if it looks like this the point-to-point connection between your",
    "start": "910900",
    "end": "915910"
  },
  {
    "text": "web services it's going to be very difficult because you have to go and refactor each one of these applications",
    "start": "915910",
    "end": "921130"
  },
  {
    "text": "and change the way that it routes the idea here is that we want to create a vine an edge around these applications",
    "start": "921130",
    "end": "928330"
  },
  {
    "text": "that can begin to slowly strangle data away from that large shared database",
    "start": "928330",
    "end": "933550"
  },
  {
    "text": "and so here's one solution now in all cases you're going to use something that",
    "start": "933550",
    "end": "940430"
  },
  {
    "text": "looks a lot like an API gateway now this legacy edge adapter here this is going to be my API gateway between my legacy",
    "start": "940430",
    "end": "947240"
  },
  {
    "text": "services which might be on Prem and then my microservices to the left which is",
    "start": "947240",
    "end": "952610"
  },
  {
    "text": "going to be all new development and so I'm going to try and freeze as much as I can all new development all new feature",
    "start": "952610",
    "end": "958640"
  },
  {
    "text": "development in the legacy layer and I'm going to start to build those new features out on the edge with these",
    "start": "958640",
    "end": "964460"
  },
  {
    "text": "micro services and I'm going to communicate back into that system via that API gateway very similar to what I",
    "start": "964460",
    "end": "971090"
  },
  {
    "text": "showed you earlier now what you can do here is begin to strangle data away from",
    "start": "971090",
    "end": "976490"
  },
  {
    "text": "that large shared database by acting as a facade on top of these services I",
    "start": "976490",
    "end": "981820"
  },
  {
    "text": "think you can zoom in here so this is a very similar diagram that we looked at earlier and here I have a profile",
    "start": "981820",
    "end": "989120"
  },
  {
    "text": "service this is a new microcircuits and it's going to act as a facade on top of this legacy service here called the",
    "start": "989120",
    "end": "995420"
  },
  {
    "text": "customer service now the legacy edge here is this blue line and what's gonna",
    "start": "995420",
    "end": "1001180"
  },
  {
    "text": "happen is every time I get a request for a profile I'm gonna go and check to see whether or not that profile exists in",
    "start": "1001180",
    "end": "1007450"
  },
  {
    "text": "the customer service whether it exists in my own database and if it doesn't I'm gonna start a migration by moving that",
    "start": "1007450",
    "end": "1014500"
  },
  {
    "text": "data away from the large shared database into my profile database and so over",
    "start": "1014500",
    "end": "1019570"
  },
  {
    "text": "time what you can do is migrate the system of record as you're building new features in a very organic way instead",
    "start": "1019570",
    "end": "1026410"
  },
  {
    "text": "of having to split that model at the part and worry about all of the consequences now I have an example of",
    "start": "1026410",
    "end": "1034240"
  },
  {
    "text": "this on my blog all the stuff that I talked about it's either in the book or you can go to my blog which is cannabis",
    "start": "1034240",
    "end": "1040780"
  },
  {
    "text": "Donny calm and I have the full example somewhere here alright so now we're",
    "start": "1040780",
    "end": "1048370"
  },
  {
    "text": "going to dive into some demos I want to talk about spring boot spring boot is at the core of how we're building cloud",
    "start": "1048370",
    "end": "1055630"
  },
  {
    "text": "native java applications today but first what is spring boot so if you're familiar with the spring framework",
    "start": "1055630",
    "end": "1061980"
  },
  {
    "text": "spring boot builds on top of it this tweet back from 2015",
    "start": "1061980",
    "end": "1067210"
  },
  {
    "text": "Phil web explain the difference between Spring Framework and spring boo and what",
    "start": "1067210",
    "end": "1073840"
  },
  {
    "text": "he said was that spring boot is really just a collection of these different ingredients that the spring team is",
    "start": "1073840",
    "end": "1080170"
  },
  {
    "text": "going to compose for you what you had to do before is you had to pick these ingredients out and you had to mix them",
    "start": "1080170",
    "end": "1086020"
  },
  {
    "text": "together yourself you had to do all this undifferentiated heavy lifting before you could get started with actually",
    "start": "1086020",
    "end": "1091780"
  },
  {
    "text": "changing the business logic or adding business logic now what spring boot does",
    "start": "1091780",
    "end": "1096910"
  },
  {
    "text": "is it it allows you to pick these ingredients and it will Auto configure them for you in a way that the spring",
    "start": "1096910",
    "end": "1103780"
  },
  {
    "text": "engineers recommend for a production environment and how we do this is we use",
    "start": "1103780",
    "end": "1109420"
  },
  {
    "text": "a tool called spring initializer which is at start spring I oh and I'm just",
    "start": "1109420",
    "end": "1115210"
  },
  {
    "text": "gonna build a quick application here I'm gonna build a maven project with Java and I'll choose 2.2.1",
    "start": "1115210",
    "end": "1123940"
  },
  {
    "text": "and I'll name this the user service and",
    "start": "1123940",
    "end": "1129000"
  },
  {
    "text": "here's where the magic happens now this is the ingredients that you're going to choose for your app now if I'm building",
    "start": "1129000",
    "end": "1134650"
  },
  {
    "text": "a micro service I'm going to need very similar ingredients every time I build one the first thing I need is I need it",
    "start": "1134650",
    "end": "1140770"
  },
  {
    "text": "to be a web application right so I can choose web here and that's gonna embed Apache Tomcat in the artifact that I",
    "start": "1140770",
    "end": "1146800"
  },
  {
    "text": "create so with the war deployment what I was doing is I was creating a war artifact and I was shipping that to an",
    "start": "1146800",
    "end": "1152620"
  },
  {
    "text": "application server now what I'm gonna do is I'm going to actually build an application server embed that in the",
    "start": "1152620",
    "end": "1158620"
  },
  {
    "text": "artifact that I create as a jar and so I'll choose web and next I'm gonna need",
    "start": "1158620",
    "end": "1164530"
  },
  {
    "text": "a data layer and the first thing I'll choose here is spring data JPA and this",
    "start": "1164530",
    "end": "1169720"
  },
  {
    "text": "is going to provide us with the ORM that we can use for our data entities our domain objects that will be translated",
    "start": "1169720",
    "end": "1176350"
  },
  {
    "text": "into tables in a relational database so I'll choose JPA and then I'll need a",
    "start": "1176350",
    "end": "1183190"
  },
  {
    "text": "database driver I'm going to choose h2 here it's an end memory database and this is used for things like unit",
    "start": "1183190",
    "end": "1189010"
  },
  {
    "text": "testing or integration testing where you don't have to actually connect to an integration environment and then I will",
    "start": "1189010",
    "end": "1196690"
  },
  {
    "text": "choose rest repositories and so the domain objects that I create with spring dated JPA will also be",
    "start": "1196690",
    "end": "1203769"
  },
  {
    "text": "created as a REST API so I can actually do basic crud operations on those objects and then finally I'm going to",
    "start": "1203769",
    "end": "1210850"
  },
  {
    "text": "choose actuator and this is going to give me a set of operational end points via REST API that I can use to inspect",
    "start": "1210850",
    "end": "1217899"
  },
  {
    "text": "my application I'm actually going to downgrade here to",
    "start": "1217899",
    "end": "1222909"
  },
  {
    "text": "one point five two and when I generate the project that's gonna allow me to",
    "start": "1222909",
    "end": "1229419"
  },
  {
    "text": "download a compress folder with my source code and I can go ahead and run",
    "start": "1229419",
    "end": "1239379"
  },
  {
    "text": "this application with the command maven spring boot run that's going to compile it and start up the application server",
    "start": "1239379",
    "end": "1246840"
  },
  {
    "text": "and so I see that it started up on port 8080 and I'll go to my browser and I can",
    "start": "1251759",
    "end": "1258309"
  },
  {
    "text": "see the response that comes back so this is a hyper media response this is",
    "start": "1258309",
    "end": "1263679"
  },
  {
    "text": "something that we use throughout Spring Framework today with every REST API response you get back it's gonna give",
    "start": "1263679",
    "end": "1269320"
  },
  {
    "text": "you a collection of links related to that response now because I added a",
    "start": "1269320",
    "end": "1276779"
  },
  {
    "text": "because I added actuator you can see here that I get a collection of links back that tell me how I can inspect my",
    "start": "1276779",
    "end": "1283509"
  },
  {
    "text": "application and so let's look at a few of these the first one we'll look at is at ford slash health and this is going",
    "start": "1283509",
    "end": "1291250"
  },
  {
    "text": "to give me the basic status of my application whether it's up or down now",
    "start": "1291250",
    "end": "1297850"
  },
  {
    "text": "anything else on the actuator endpoints I will need to disable authentication so",
    "start": "1297850",
    "end": "1304299"
  },
  {
    "text": "let's say I go to four slash inv that's going to give me an error saying",
    "start": "1304299",
    "end": "1309490"
  },
  {
    "text": "unauthorized and by default we're gonna lock down many of these endpoints and so I can actually go in and change that and",
    "start": "1309490",
    "end": "1316539"
  },
  {
    "text": "remove that authorization and so I'll open this up in IntelliJ",
    "start": "1316539",
    "end": "1323850"
  },
  {
    "text": "and here's the source code and you can see here that I have my user service",
    "start": "1329850",
    "end": "1336450"
  },
  {
    "text": "application and it's annotated with spring boot application this is the application class when I start the app",
    "start": "1336450",
    "end": "1343740"
  },
  {
    "text": "up it's going to see this annotation it's gonna boot strap it the other thing that I need to look at here is my",
    "start": "1343740",
    "end": "1350220"
  },
  {
    "text": "application properties and in this file here I can override all those default opinions that spring team provides for",
    "start": "1350220",
    "end": "1358020"
  },
  {
    "text": "each one of the components now with actuator it's locked down by default and so we can go ahead and disable that by",
    "start": "1358020",
    "end": "1364350"
  },
  {
    "text": "setting management security enabled to false and while I'm here let's change",
    "start": "1364350",
    "end": "1369860"
  },
  {
    "text": "some other things I'll change the port and I'll give the application a name and",
    "start": "1369860",
    "end": "1380180"
  },
  {
    "text": "then I'll restart",
    "start": "1380180",
    "end": "1383780"
  },
  {
    "text": "and I see that it was started on seven - seven - so I'll just change the port here and we can see what the environment",
    "start": "1392710",
    "end": "1399549"
  },
  {
    "text": "endpoint looks like for the environment endpoint we have a lot of useful properties here I have the system",
    "start": "1399549",
    "end": "1406299"
  },
  {
    "text": "properties I have the system environment variables and so here are all the",
    "start": "1406299",
    "end": "1411580"
  },
  {
    "text": "environment variables that I have on my machine things like my AWS secret key",
    "start": "1411580",
    "end": "1417340"
  },
  {
    "text": "which is generally a no-no when you present in public but by default it's",
    "start": "1417340",
    "end": "1422619"
  },
  {
    "text": "gonna look at the name of that key and it's going to see that it has a word secret or key in it and it'll obscure",
    "start": "1422619",
    "end": "1428710"
  },
  {
    "text": "the value which is a bit safer now at the very bottom I have my application",
    "start": "1428710",
    "end": "1434470"
  },
  {
    "text": "configuration now this is very important because with a cloud native application you're going to ship your app to any",
    "start": "1434470",
    "end": "1440110"
  },
  {
    "text": "environment and it's going to be able to attach to the configuration in that environment now this is one of the",
    "start": "1440110",
    "end": "1445450"
  },
  {
    "text": "twelve factors from the 12 factor methodologies which make your application cloud native and you can see",
    "start": "1445450",
    "end": "1451240"
  },
  {
    "text": "here that the application configs coming from the classpath which means that it's not cloud native now when you connect to",
    "start": "1451240",
    "end": "1457360"
  },
  {
    "text": "a configuration server you can actually download your configuration from there instead of baking it into the build so",
    "start": "1457360",
    "end": "1467200"
  },
  {
    "text": "we're going to move right along so that's one application one micro service now we want to see how these things",
    "start": "1467200",
    "end": "1473499"
  },
  {
    "text": "connect together we want to see things like a discovery service and a config server but first let's look at how these",
    "start": "1473499",
    "end": "1479649"
  },
  {
    "text": "things are going to run in containers now before we went to cloud native we were running our applications on an",
    "start": "1479649",
    "end": "1486159"
  },
  {
    "text": "application server now what we're going to do is we're going to bake the application server into the artifact that we create as a",
    "start": "1486159",
    "end": "1492129"
  },
  {
    "text": "jar and then we will package it in a Linux container and ship that to any",
    "start": "1492129",
    "end": "1497169"
  },
  {
    "text": "cloud provider that we want now in this example here I have one virtual machine",
    "start": "1497169",
    "end": "1502269"
  },
  {
    "text": "that allows you to have multiple different containers running side-by-side now the advantage here is",
    "start": "1502269",
    "end": "1508659"
  },
  {
    "text": "that I can have my own runtime environment described by my developers whether it's docker or whether it's",
    "start": "1508659",
    "end": "1515019"
  },
  {
    "text": "Cloud Foundry and what I can do is I can ship that to a virtual machine and I don't have to worry about installing an",
    "start": "1515019",
    "end": "1520749"
  },
  {
    "text": "application server right so I can run a JVM application next to a ruby app",
    "start": "1520749",
    "end": "1526110"
  },
  {
    "text": "next to a Python application now a cloud platform will be able to look at the",
    "start": "1526110",
    "end": "1532570"
  },
  {
    "text": "metrics for that app and determine whether or not it needs to scale up and so with an auto scaler you can define a",
    "start": "1532570",
    "end": "1539590"
  },
  {
    "text": "rule saying that if my application is utilized at 80% then I want to scale up one more",
    "start": "1539590",
    "end": "1546910"
  },
  {
    "text": "instance and that's gonna schedule another container and so with multiple virtual machines here you can see that",
    "start": "1546910",
    "end": "1552670"
  },
  {
    "text": "the containers kind of breathe in and breathe out depending on the demands of these applications in production now",
    "start": "1552670",
    "end": "1560500"
  },
  {
    "text": "because all these applications are being scheduled on-demand all of the addresses all the IP addresses are going to be",
    "start": "1560500",
    "end": "1566800"
  },
  {
    "text": "assigned when the application start up now we don't want to use things like a host name because it's very slow and so",
    "start": "1566800",
    "end": "1573340"
  },
  {
    "text": "we need a better way for these micro-services to be able to find their dependencies in an environment and",
    "start": "1573340",
    "end": "1578710"
  },
  {
    "text": "that's going to be the subject of discovery service now we have another",
    "start": "1578710",
    "end": "1584710"
  },
  {
    "text": "tool set called spring cloud which is on top of spring boot and this is a tool set designed for building distributed",
    "start": "1584710",
    "end": "1590770"
  },
  {
    "text": "systems now going back to what Phil Webb said about spring boot he posted this",
    "start": "1590770",
    "end": "1597160"
  },
  {
    "text": "tweet later that day it was a bunch of cupcakes but I think it's a good analogy what he's saying is that you're gonna",
    "start": "1597160",
    "end": "1602830"
  },
  {
    "text": "have your entire organization building microservices and each team's gonna have their own flavor their own recipe that",
    "start": "1602830",
    "end": "1609370"
  },
  {
    "text": "they used and there needs to be a way for all these things to be connected together in an easy way so that this",
    "start": "1609370",
    "end": "1616450"
  },
  {
    "text": "micro service architecture doesn't fall on its face and so I'm gonna walk",
    "start": "1616450",
    "end": "1622270"
  },
  {
    "text": "through a couple demos will start with service discovery and this is going to allow applications to find each other in",
    "start": "1622270",
    "end": "1629410"
  },
  {
    "text": "an environment and this is an essential component when using a dynamic container",
    "start": "1629410",
    "end": "1636340"
  },
  {
    "text": "scheduler so if you're using a cloud provider that's scheduling these containers up and down you're going to",
    "start": "1636340",
    "end": "1642070"
  },
  {
    "text": "need something like service discovery now for a developer what changes is that each application is going to be able to",
    "start": "1642070",
    "end": "1648190"
  },
  {
    "text": "handle its own routing and so developers only need to know the name of the",
    "start": "1648190",
    "end": "1653230"
  },
  {
    "text": "application they want to communicate with and not the URL and then finally",
    "start": "1653230",
    "end": "1658900"
  },
  {
    "text": "you'll have a service register which acts as a phone book where all your applications are able to subscribe to that phonebook provide information of",
    "start": "1658900",
    "end": "1665790"
  },
  {
    "text": "where they're located on the network and that's going to be distributed out to all of the subscribers and so in this",
    "start": "1665790",
    "end": "1673860"
  },
  {
    "text": "example here I have a recommendation service and a movie service those are my two micro services and then I have a",
    "start": "1673860",
    "end": "1680370"
  },
  {
    "text": "config service and a discovery service so let's say that the movie service starts up it's going to contact that",
    "start": "1680370",
    "end": "1687390"
  },
  {
    "text": "blue application the discovery service it's going to tell it where it's located on the network and in exchange it's",
    "start": "1687390",
    "end": "1693660"
  },
  {
    "text": "going to get information about where the recommendation service is located right so it's able to subscribe and exchange",
    "start": "1693660",
    "end": "1699870"
  },
  {
    "text": "information and that built a map a distributed map of where everything is located on the network and so the",
    "start": "1699870",
    "end": "1707640"
  },
  {
    "text": "service registry is just going to be a small in this case an XML file that contains applications as well as the",
    "start": "1707640",
    "end": "1715440"
  },
  {
    "text": "instances and so in this example I have a movie application and recommendation",
    "start": "1715440",
    "end": "1720660"
  },
  {
    "text": "and you can see that I have a single instance of each one and it tells me exactly where they're located now I'm",
    "start": "1720660",
    "end": "1729900"
  },
  {
    "text": "going to do a demo of client side load balancing which is a benefit that you get with this kind of architecture now",
    "start": "1729900",
    "end": "1735570"
  },
  {
    "text": "when you're using service discovery you can load bounce from the client side instead of having to worry about",
    "start": "1735570",
    "end": "1741000"
  },
  {
    "text": "changing load balancer configuration at the server side and so in this example we'll have a user client and a user",
    "start": "1741000",
    "end": "1748200"
  },
  {
    "text": "service and the user service will scale up to two instances and the user client",
    "start": "1748200",
    "end": "1754050"
  },
  {
    "text": "will be able to switch traffic back and forth between those two nodes and so the",
    "start": "1754050",
    "end": "1762720"
  },
  {
    "text": "first thing that I need is a discovery service and so what I'll do is go back to start spring do and I can name this",
    "start": "1762720",
    "end": "1771600"
  },
  {
    "text": "discovery service and I'm going to choose Eureka server and for time I have",
    "start": "1771600",
    "end": "1781890"
  },
  {
    "text": "this up already and so let's just walk through what this looks like so the",
    "start": "1781890",
    "end": "1788010"
  },
  {
    "text": "first thing I'm going to do is I'm going to add in the annotation enable eureka server and then I can start this",
    "start": "1788010",
    "end": "1794050"
  },
  {
    "text": "location up and it will assume the role of Eureka but I do need to change some configurations as well so going back to",
    "start": "1794050",
    "end": "1800890"
  },
  {
    "text": "the application properties I'm going to name this discovery service and I'm",
    "start": "1800890",
    "end": "1806770"
  },
  {
    "text": "going to give it the port eight seven six one now by default all of the subscribers on local hosts are",
    "start": "1806770",
    "end": "1814000"
  },
  {
    "text": "going to look to local host eight seven six one to communicate with Eureka and that's the reason why I've changed the",
    "start": "1814000",
    "end": "1820810"
  },
  {
    "text": "port to that and I'll go ahead and start up Eureka I can find it",
    "start": "1820810",
    "end": "1833460"
  },
  {
    "text": "and that'll start up on eight seven six one yep and go into the browser we can",
    "start": "1838610",
    "end": "1848779"
  },
  {
    "text": "take a look alright so here's the spring",
    "start": "1848779",
    "end": "1855350"
  },
  {
    "text": "Eureka dashboard and this is going to tell me it's gonna give me information about all my subscribers that have",
    "start": "1855350",
    "end": "1861399"
  },
  {
    "text": "contacted Eureka now after about thirty seconds Eureka will register itself and that",
    "start": "1861399",
    "end": "1873019"
  },
  {
    "text": "gives me just one instance to look at but there it is okay and so you can see",
    "start": "1873019",
    "end": "1879049"
  },
  {
    "text": "here the application name and you can see the status now we already know where it's located so this doesn't do us much",
    "start": "1879049",
    "end": "1885470"
  },
  {
    "text": "good but what I need to do now is to start up my user client and user service",
    "start": "1885470",
    "end": "1893799"
  },
  {
    "text": "now I have the source code for each of those we're going to take a look at the",
    "start": "1893799",
    "end": "1899029"
  },
  {
    "text": "user service first now the user service does one simple thing it's going to",
    "start": "1899029",
    "end": "1905240"
  },
  {
    "text": "return back the port that the application is running on so the first",
    "start": "1905240",
    "end": "1910340"
  },
  {
    "text": "thing I need to do is to add the annotation enable discovery client and then I have a rest controller here which",
    "start": "1910340",
    "end": "1917090"
  },
  {
    "text": "is going to modify the rest api by default now I have some other things",
    "start": "1917090",
    "end": "1922789"
  },
  {
    "text": "here that I will talk about later but the thing that we want to focus on right now is just this one request",
    "start": "1922789",
    "end": "1928519"
  },
  {
    "text": "mapping at the root end point and it's going to return back to the port and this is going to be injected into this",
    "start": "1928519",
    "end": "1934190"
  },
  {
    "text": "field here called port using this value annotation so if you remember earlier when I modified the application",
    "start": "1934190",
    "end": "1940340"
  },
  {
    "text": "properties I changed the value of the key server port and that's going to bind to the value here at the root end point",
    "start": "1940340",
    "end": "1947889"
  },
  {
    "text": "and so I'll start up two instances of that",
    "start": "1947889",
    "end": "1952870"
  },
  {
    "text": "I will start one up with the port number one one one one and then another one",
    "start": "1958000",
    "end": "1964860"
  },
  {
    "text": "with one one one two",
    "start": "1964860",
    "end": "1968429"
  },
  {
    "text": "and going back to Eureka if i refresh you can see that the first one",
    "start": "1973340",
    "end": "1978799"
  },
  {
    "text": "registered so I have one user service available and if i refresh we'll see that the other one registered as well",
    "start": "1978799",
    "end": "1985340"
  },
  {
    "text": "and so now i have two user service instances and we can look at the service",
    "start": "1985340",
    "end": "1990919"
  },
  {
    "text": "registry by going to ford slash eureka",
    "start": "1990919",
    "end": "1996070"
  },
  {
    "text": "ford slash apps and that's going to give me that manifest of all of my",
    "start": "1996070",
    "end": "2001120"
  },
  {
    "text": "applications and their instances and so you can see here that i have the user service with the two instances that are",
    "start": "2001120",
    "end": "2007600"
  },
  {
    "text": "available and so all i need now is a user client now the user client",
    "start": "2007600",
    "end": "2018369"
  },
  {
    "text": "application is very similar it's going to be a subscriber to Eureka so I have a",
    "start": "2018369",
    "end": "2023559"
  },
  {
    "text": "naval discovery client here and then I'm going to need a rest client to actually",
    "start": "2023559",
    "end": "2028899"
  },
  {
    "text": "communicate with that user service and so here I've defined a bean called rest",
    "start": "2028899",
    "end": "2034029"
  },
  {
    "text": "template and I've specified that I want it to be load balance now the rest template if I don't specify",
    "start": "2034029",
    "end": "2039549"
  },
  {
    "text": "load balance it's just going to use DNS to look up any hostname when I add in",
    "start": "2039549",
    "end": "2044590"
  },
  {
    "text": "this annotation it will actually look to the service registry and find the name of the application that I want to communicate with and swap out that name",
    "start": "2044590",
    "end": "2051878"
  },
  {
    "text": "for an IP address now in the rest controller here I've",
    "start": "2051879",
    "end": "2058329"
  },
  {
    "text": "gone ahead and I've injected in that rest template via the constructor and I",
    "start": "2058329",
    "end": "2063490"
  },
  {
    "text": "have a request mapping here at the root end point and what I'm going to do here is I'm going to call the user service",
    "start": "2063490",
    "end": "2068679"
  },
  {
    "text": "and just return whatever it gives me in this case it's going to be the port number and so I use rest template get",
    "start": "2068679",
    "end": "2075368"
  },
  {
    "text": "fer entity and here's the URL that I'm going to communicate with its user -",
    "start": "2075369",
    "end": "2080710"
  },
  {
    "text": "service so this is just the name of the service that we just started up right so I don't need to know the IP address of",
    "start": "2080710",
    "end": "2087220"
  },
  {
    "text": "the application I want to communicate with I just need to know the name and then I return back the response",
    "start": "2087220",
    "end": "2094470"
  },
  {
    "text": "so I'll start up the user client",
    "start": "2096970",
    "end": "2101650"
  },
  {
    "text": "and go back to Eureka and I can see that the user client has registered and so",
    "start": "2109980",
    "end": "2116700"
  },
  {
    "text": "now I'm going to go to that user client here and and so this is the info",
    "start": "2116700",
    "end": "2125640"
  },
  {
    "text": "endpoint I want to go to the root end point and this is where it's gonna call to that user service and return back a response so the first time I do it it's",
    "start": "2125640",
    "end": "2133440"
  },
  {
    "text": "going to return back the port 1 1 1 1 but if i refresh over and over again you'll see that it's going to switch",
    "start": "2133440",
    "end": "2139859"
  },
  {
    "text": "traffic back and forth between those two instances now let's say that I add a node or if I delete a node well the",
    "start": "2139859",
    "end": "2147390"
  },
  {
    "text": "service registry is going to be updated every time an event happens it's going to be sent to Eureka and that service",
    "start": "2147390",
    "end": "2153060"
  },
  {
    "text": "registry is going to be sent out to all the subscribers now this is a pretty",
    "start": "2153060",
    "end": "2158670"
  },
  {
    "text": "trivial example so let's zoom out so going back to the online store architecture we have our front end here",
    "start": "2158670",
    "end": "2166589"
  },
  {
    "text": "the online store web it's going to send traffic to that edge service which will then be routed to the back-end services",
    "start": "2166589",
    "end": "2173369"
  },
  {
    "text": "now depending on what their load is what I can do is I can scale up let's say",
    "start": "2173369",
    "end": "2178950"
  },
  {
    "text": "that the inventory service is at 80% you resources then I can go ahead and scale",
    "start": "2178950",
    "end": "2184500"
  },
  {
    "text": "up another instance of that it will contact the discovery service and tell it to let everybody know that there's a",
    "start": "2184500",
    "end": "2190380"
  },
  {
    "text": "new node available and I can Auto scale without having to worry about changing any load balancer configuration all",
    "start": "2190380",
    "end": "2199050"
  },
  {
    "text": "right so the next demo I'm going to do is the config server and the configuration server is going to allow",
    "start": "2199050",
    "end": "2204750"
  },
  {
    "text": "applications to source their configuration from a central service configuration can also be changed",
    "start": "2204750",
    "end": "2211650"
  },
  {
    "text": "without deployment so this is one of the main benefits here is that I can change configuration notify an application that",
    "start": "2211650",
    "end": "2217740"
  },
  {
    "text": "is config has been changed and it can refresh or restart without having to",
    "start": "2217740",
    "end": "2223170"
  },
  {
    "text": "recompile and deploy the app I can also use different default configurations",
    "start": "2223170",
    "end": "2229560"
  },
  {
    "text": "that cascade so let's say that I have a organization opinion of how you should configure your applications I could give",
    "start": "2229560",
    "end": "2236490"
  },
  {
    "text": "that to all my micro service teams and then they can override that with their own configuration it uses a git report",
    "start": "2236490",
    "end": "2243840"
  },
  {
    "text": "satori is a file system so this allows me to have an audit log of all of my changes and so let's look at that",
    "start": "2243840",
    "end": "2252030"
  },
  {
    "text": "previous example I had the recommendation service and the movie service now the configuration service is",
    "start": "2252030",
    "end": "2258510"
  },
  {
    "text": "going to be very similar to the discovery service but it's going to have a URL that tells it where to source its",
    "start": "2258510",
    "end": "2266010"
  },
  {
    "text": "configurations from and so in this case I have my staging environment which is one get URI and my production",
    "start": "2266010",
    "end": "2272790"
  },
  {
    "text": "environment which is just a different get URI and so we're going to use this",
    "start": "2272790",
    "end": "2279720"
  },
  {
    "text": "same example and I have a config server",
    "start": "2279720",
    "end": "2288150"
  },
  {
    "text": "ready to go here and so I'll add the annotation enable config server just",
    "start": "2288150",
    "end": "2293160"
  },
  {
    "text": "like I did with Eureka and in the application properties I will change the",
    "start": "2293160",
    "end": "2300690"
  },
  {
    "text": "server port to 4/8 and then here's the URI that I will source my convicts from",
    "start": "2300690",
    "end": "2308300"
  },
  {
    "text": "and I'll go ahead and start that up",
    "start": "2310880",
    "end": "2314990"
  },
  {
    "text": "now the examples that are already running they're already configured to talk to the config server and so if I go",
    "start": "2323099",
    "end": "2328769"
  },
  {
    "text": "back to the response that I got from the user client if I go to floor slash",
    "start": "2328769",
    "end": "2334229"
  },
  {
    "text": "message it gives a response I don't know what I am and that's because in the",
    "start": "2334229",
    "end": "2340739"
  },
  {
    "text": "source code what I didn't show you earlier was that I've found a key called",
    "start": "2340739",
    "end": "2348959"
  },
  {
    "text": "message with the default value I don't know what I am to this field here now on",
    "start": "2348959",
    "end": "2354749"
  },
  {
    "text": "the git repository that the config server is connected to I have three",
    "start": "2354749",
    "end": "2367049"
  },
  {
    "text": "separate files I have my application Y amyl user client and user service now",
    "start": "2367049",
    "end": "2372630"
  },
  {
    "text": "when an application starts up it's going to contact the config server it's going to provide its name and it's going to",
    "start": "2372630",
    "end": "2377819"
  },
  {
    "text": "get back the configuration that's meant for it so in this case the user client should receive this configuration user",
    "start": "2377819",
    "end": "2384420"
  },
  {
    "text": "service should retrieve this one now this application y amal is a default opinion if i go to the source you can",
    "start": "2384420",
    "end": "2392999"
  },
  {
    "text": "see here that the message is i'm an application so now that the config",
    "start": "2392999",
    "end": "2398279"
  },
  {
    "text": "server is started all i need to do is to notify the services that they should go and fetch their configuration from that",
    "start": "2398279",
    "end": "2404640"
  },
  {
    "text": "service and so i'm going to send a post",
    "start": "2404640",
    "end": "2410130"
  },
  {
    "text": "request to 8080 and refresh",
    "start": "2410130",
    "end": "2421609"
  },
  {
    "text": "and so when I send this post request to Ford / refresh its going to tell that user client to now talk to the config",
    "start": "2421960",
    "end": "2430069"
  },
  {
    "text": "server retrieve that configuration and then update itself without restarting and the response that I get back is",
    "start": "2430069",
    "end": "2437150"
  },
  {
    "text": "going to be a collection of keys where the values were modified in this case message so now when I go to back to the",
    "start": "2437150",
    "end": "2449869"
  },
  {
    "text": "browser if i refresh here it's going to give me back a different message and it says I'm an application and that's",
    "start": "2449869",
    "end": "2456019"
  },
  {
    "text": "because it defaulted on that application yeah mol if I go back to that source code for the user client you can see",
    "start": "2456019",
    "end": "2463489"
  },
  {
    "text": "that that value has been commented out and so what I'm gonna do here is fix",
    "start": "2463489",
    "end": "2468799"
  },
  {
    "text": "that and commit that to get",
    "start": "2468799",
    "end": "2478599"
  },
  {
    "text": "and push it",
    "start": "2488240",
    "end": "2491260"
  },
  {
    "text": "and now I'll send another refresh signal and it should pick up its new",
    "start": "2497509",
    "end": "2503209"
  },
  {
    "text": "configuration and I'll go back to the browser and refresh and it should say",
    "start": "2503209",
    "end": "2508429"
  },
  {
    "text": "I'm the user client now this is a pretty trivial example so I'm going to zoom out",
    "start": "2508429",
    "end": "2513529"
  },
  {
    "text": "again and you can see here that in yellow I have my configuration server",
    "start": "2513529",
    "end": "2518929"
  },
  {
    "text": "now each one of these applications in this architecture is going to connect that context server and fetch their",
    "start": "2518929",
    "end": "2524809"
  },
  {
    "text": "configs and so from the operations perspective what I can do is I can modify gate configurations I can push",
    "start": "2524809",
    "end": "2532489"
  },
  {
    "text": "them to get and to notify the config server to push out those updates to each application I have to wrap up in two",
    "start": "2532489",
    "end": "2540859"
  },
  {
    "text": "minutes I'm just gonna push through so the next demo very simple is the API",
    "start": "2540859",
    "end": "2547459"
  },
  {
    "text": "gateway earlier we saw the API gateway in the edge service in red and this is",
    "start": "2547459",
    "end": "2552499"
  },
  {
    "text": "going to allow applications to reverse proxy into your back-end Micra services",
    "start": "2552499",
    "end": "2557749"
  },
  {
    "text": "now in this example that I have running we did actually reverse proxy with the",
    "start": "2557749",
    "end": "2564849"
  },
  {
    "text": "user client but we did it manually and so you can see here that we called it",
    "start": "2564849",
    "end": "2571519"
  },
  {
    "text": "from the rest template I'm going to go ahead and comment that out and then I'm going to add an annotation up on top",
    "start": "2571519",
    "end": "2578919"
  },
  {
    "text": "which is enable tool proxy and restart",
    "start": "2578919",
    "end": "2586389"
  },
  {
    "text": "now going back to the browser going to the root end point of the user client it",
    "start": "2602110",
    "end": "2607690"
  },
  {
    "text": "should give me an error right but now that I've added that Zul proxy annotation if I go to four slash routes",
    "start": "2607690",
    "end": "2614550"
  },
  {
    "text": "you can see that I have a collection of routes here just very ugly so let's fix",
    "start": "2614550",
    "end": "2620650"
  },
  {
    "text": "that and so you can see here that I have the user service and discovery service",
    "start": "2620650",
    "end": "2626590"
  },
  {
    "text": "which I can contact I'm gonna go to the user service and it's going to give me",
    "start": "2626590",
    "end": "2631840"
  },
  {
    "text": "back that same response that we did manually so pretty simple and I think",
    "start": "2631840",
    "end": "2639310"
  },
  {
    "text": "that's it one minute okay last thing",
    "start": "2639310",
    "end": "2644320"
  },
  {
    "text": "distributed tracing this is very important for your micro service architecture I don't have enough time to",
    "start": "2644320",
    "end": "2649540"
  },
  {
    "text": "show you a demo but I'm going to walk you through what it is spring cloud sleuth is going to allow you to add in",
    "start": "2649540",
    "end": "2654670"
  },
  {
    "text": "Zipkin which is a distributed tracing tool which is going to collect metrics from all of your micro services and",
    "start": "2654670",
    "end": "2660160"
  },
  {
    "text": "these metrics are going to be stitched together into something called spans which will give you a graph",
    "start": "2660160",
    "end": "2666060"
  },
  {
    "text": "visualization of how your services are communicating with each other and so you can see here traffic from online store",
    "start": "2666060",
    "end": "2672400"
  },
  {
    "text": "web is going to the edge service which is then being proxy to my back-end Micra",
    "start": "2672400",
    "end": "2677410"
  },
  {
    "text": "services now if you have a lot of these very heavy arrows pointed to one service",
    "start": "2677410",
    "end": "2683560"
  },
  {
    "text": "that means that there's a lot of traffic being sent to it in this case I found out that the user service was being",
    "start": "2683560",
    "end": "2688930"
  },
  {
    "text": "hammered by traffic because every time I go downstream one request I'm gonna call back to that user service and so this",
    "start": "2688930",
    "end": "2696370"
  },
  {
    "text": "tool is going to allow you to debug that it also gives you kind of like a chrome developer tools view which will show you",
    "start": "2696370",
    "end": "2703330"
  },
  {
    "text": "the individual trace and you can see here that it's going from the edge service to the user service to the",
    "start": "2703330",
    "end": "2710380"
  },
  {
    "text": "shopping cart service back to the user service and so what I can do here to optimize this is to add in spring",
    "start": "2710380",
    "end": "2717280"
  },
  {
    "text": "session which will put a Redis cluster into your microcircuits architecture and",
    "start": "2717280",
    "end": "2723700"
  },
  {
    "text": "I can go ahead and I can cache the session of the user there instead of having to go back to the user service",
    "start": "2723700",
    "end": "2729280"
  },
  {
    "text": "each time and before I get kicked out thank you very much",
    "start": "2729280",
    "end": "2734470"
  },
  {
    "text": "I don't think we have time for questions",
    "start": "2734470",
    "end": "2741840"
  },
  {
    "text": "I think we're out of time for questions",
    "start": "2741840",
    "end": "2747220"
  },
  {
    "text": "but there is a lunch break so maybe we'll take one from the questions that were entered in the app and otherwise I",
    "start": "2747220",
    "end": "2754060"
  },
  {
    "text": "want to remind people about the women in tech networking event that's going to be taking place how intelligence is the low",
    "start": "2754060",
    "end": "2766000"
  },
  {
    "text": "how intelligent is the load balancer can I configure different modes other than round-robin etc so yeah by default",
    "start": "2766000",
    "end": "2772720"
  },
  {
    "text": "you're gonna get round-robin it it isn't it's not trivial and it's not too difficult to change it there are some",
    "start": "2772720",
    "end": "2779170"
  },
  {
    "text": "examples out there but it's not as simple as what I showed you in the demo you're gonna have to actually add a",
    "start": "2779170",
    "end": "2784210"
  },
  {
    "text": "filter and that filter you'll have to describe for each one of your applications how it should load balance",
    "start": "2784210",
    "end": "2789730"
  },
  {
    "text": "from the client slide that's that's squeezing one more here a lot of",
    "start": "2789730",
    "end": "2796510"
  },
  {
    "text": "properties that we put in config file if changed require a hard restart of the application so how does having a",
    "start": "2796510",
    "end": "2802420"
  },
  {
    "text": "separate config service help say it again a lot of properties that we put in",
    "start": "2802420",
    "end": "2808599"
  },
  {
    "text": "config in a config file if change require hard restart on the application so how does having a separate config",
    "start": "2808599",
    "end": "2814060"
  },
  {
    "text": "service help so the way that spring is connected together or at least spring",
    "start": "2814060",
    "end": "2820089"
  },
  {
    "text": "cloud with the config service here I'm",
    "start": "2820089",
    "end": "2825369"
  },
  {
    "text": "connected to my URI which is okay I'm",
    "start": "2825369",
    "end": "2831460"
  },
  {
    "text": "gonna have to walk through this yes so I guess the short answer to that is we provide the plumbing that will actually",
    "start": "2831460",
    "end": "2838780"
  },
  {
    "text": "send signals to your applications telling them to refresh their configuration and you can set boundaries",
    "start": "2838780",
    "end": "2845440"
  },
  {
    "text": "inside your application that say this is a boundary where it's okay to just refresh this part of the context and to",
    "start": "2845440",
    "end": "2853119"
  },
  {
    "text": "not refresh anything else and what that gives you is a way to just refresh one part of your spring context you don't",
    "start": "2853119",
    "end": "2860020"
  },
  {
    "text": "have to do a hard restart at the application server itself so thank you very much Kenny we've really run out of",
    "start": "2860020",
    "end": "2865660"
  },
  {
    "text": "time here Thank You Jonathan [Applause]",
    "start": "2865660",
    "end": "2872170"
  }
]