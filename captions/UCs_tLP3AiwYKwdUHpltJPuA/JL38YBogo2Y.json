[
  {
    "start": "0",
    "end": "89000"
  },
  {
    "text": "welcome everybody um looking forward to the session today so first off who here has heard of ooth",
    "start": "12160",
    "end": "20279"
  },
  {
    "text": "oh good okay so um I am going to going to go over some of the background of oo",
    "start": "20279",
    "end": "26880"
  },
  {
    "text": "which maybe you are not as familiar with um and then talk about how oath is used",
    "start": "26880",
    "end": "32160"
  },
  {
    "text": "today and also kind of what is being worked on in the future where things are headed so should we should be a lot of",
    "start": "32160",
    "end": "38640"
  },
  {
    "text": "fun um I do a lot of things related to ooth uh I I have a book I have video",
    "start": "38640",
    "end": "45360"
  },
  {
    "text": "courses you may have seen some of my videos on YouTube I also actually work on the specs at the ietf working on a",
    "start": "45360",
    "end": "50640"
  },
  {
    "text": "number of of them right now um there's always a lot of interesting new work going",
    "start": "50640",
    "end": "56199"
  },
  {
    "text": "on so okay let's go back in time a little bit and H not that",
    "start": "56199",
    "end": "63799"
  },
  {
    "text": "fast you uh might be familiar with ooth from buttons like these like sign in",
    "start": "63799",
    "end": "69320"
  },
  {
    "text": "with Facebook or whatever it is is this really",
    "start": "69320",
    "end": "75280"
  },
  {
    "text": "ooth yes and no it's not it's it's technically these are built on ooth but",
    "start": "75280",
    "end": "81320"
  },
  {
    "text": "they these were not the original goal of what ooth was set out to solve the original thing ooth was",
    "start": "81320",
    "end": "88000"
  },
  {
    "text": "created for was to stop this kind of thing from being common this used to be",
    "start": "88000",
    "end": "95000"
  },
  {
    "start": "89000",
    "end": "125000"
  },
  {
    "text": "very very normal on the internet you would go to a random website and it would be like hey let's log in with your",
    "start": "95000",
    "end": "100799"
  },
  {
    "text": "Gmail account and then it would ask you for your actual Gmail address and your password to your Gmail account and in",
    "start": "100799",
    "end": "106280"
  },
  {
    "text": "case you weren't sure about which password it was asking for it says your",
    "start": "106280",
    "end": "111399"
  },
  {
    "text": "email password really so hopefully at this point you don't go",
    "start": "111399",
    "end": "117479"
  },
  {
    "text": "around giving your email password to random websites I think we're generally pretty used to this concept by now but",
    "start": "117479",
    "end": "126439"
  },
  {
    "start": "125000",
    "end": "207000"
  },
  {
    "text": "just to be very explicit about it why is this pattern bad what this website what these",
    "start": "126439",
    "end": "132239"
  },
  {
    "text": "websites are usually intending to do is to uh access some part of your data",
    "start": "132239",
    "end": "137920"
  },
  {
    "text": "that's in your email account in in many cases it was the contact list it was find your friends so it only needs",
    "start": "137920",
    "end": "144280"
  },
  {
    "text": "access to some of the data in your account but as soon as you give it your password you're giving it access to everything in your account including the",
    "start": "144280",
    "end": "150519"
  },
  {
    "text": "ability to change your password so the other important thing though is that",
    "start": "150519",
    "end": "156879"
  },
  {
    "text": "even if it was even if you didn't even if you intended to give the app all of the access to your account there's no",
    "start": "156879",
    "end": "163239"
  },
  {
    "text": "way to take it back there's no way to undo that so once You' given it your password that is the key to your account",
    "start": "163239",
    "end": "169599"
  },
  {
    "text": "so essentially what this means is that by giving by entering passwords directly into Apps you are trusting that",
    "start": "169599",
    "end": "176000"
  },
  {
    "text": "application completely so ideally there would be a solution for",
    "start": "176000",
    "end": "182280"
  },
  {
    "text": "apps like Yelp to access data in uh in your account that you want to share",
    "start": "182280",
    "end": "188519"
  },
  {
    "text": "because people do want to share data in their accounts for various reasons like finding their friends so ideally there",
    "start": "188519",
    "end": "194280"
  },
  {
    "text": "would be some way to access some part of the account while preventing access to other parts of the account and this",
    "start": "194280",
    "end": "202239"
  },
  {
    "text": "accessing data part is really what ooth was originally created for how do we let",
    "start": "202239",
    "end": "207400"
  },
  {
    "start": "207000",
    "end": "313000"
  },
  {
    "text": "apps access data without sharing passwords it's actually very similar to checking",
    "start": "207400",
    "end": "214680"
  },
  {
    "text": "into a hotel where you go to the front desk and you you check in you show them your ID and a credit card and then you",
    "start": "214680",
    "end": "220280"
  },
  {
    "text": "get back a hotel Key that key represents your access to things in the hotel it",
    "start": "220280",
    "end": "225319"
  },
  {
    "text": "doesn't represent you as a person it does it's not an alternative ID it doesn't even usually have any identifying information on it it",
    "start": "225319",
    "end": "232040"
  },
  {
    "text": "represents that you can access resources in the hotel so you take that key and you go to the door and you swipe it and",
    "start": "232040",
    "end": "237920"
  },
  {
    "text": "the door opens up because the door knows that key is authorized to open it at this point in time and that access may",
    "start": "237920",
    "end": "245079"
  },
  {
    "text": "change later it might give you access to multiple doors in the hotel uh but it's",
    "start": "245079",
    "end": "250519"
  },
  {
    "text": "going to be some sort of limited access which is very different than for example you go to a hotel and they give you the",
    "start": "250519",
    "end": "255920"
  },
  {
    "text": "skeleton key that can open every door and they just kind of hope that you only open the doors you're allowed to",
    "start": "255920",
    "end": "262560"
  },
  {
    "text": "right so okay so in in back in an ooth flow",
    "start": "262560",
    "end": "268120"
  },
  {
    "text": "you're you're probably familiar with with this pattern where you're on a website it's asking you to sign in or or",
    "start": "268120",
    "end": "274160"
  },
  {
    "text": "Grant access it's going to send you away from that from that website to the",
    "start": "274160",
    "end": "280440"
  },
  {
    "text": "actual account in this case sign in with Google that's where you log in you enter your email address you enter your",
    "start": "280440",
    "end": "286280"
  },
  {
    "text": "password you enter your uh your second factor of some",
    "start": "286280",
    "end": "292840"
  },
  {
    "text": "sort and then usually you get asked for uh if it's okay if you actually want to",
    "start": "292840",
    "end": "298560"
  },
  {
    "text": "Grant this access um and then once you have finally gone through all this you get sent back to",
    "start": "298560",
    "end": "304199"
  },
  {
    "text": "the website and you are logged in or it's able to access the data so again accessing data is what",
    "start": "304199",
    "end": "311520"
  },
  {
    "text": "ooth was really created for I want to go over a quick version of what the the",
    "start": "311520",
    "end": "318560"
  },
  {
    "start": "313000",
    "end": "758000"
  },
  {
    "text": "different actual roles involved in oo flow and um what and how the data kind",
    "start": "318560",
    "end": "325000"
  },
  {
    "text": "of moves around so in in an O flow we're going to talk about users usually uh who are",
    "start": "325000",
    "end": "333319"
  },
  {
    "text": "using some sort of they have a browser or a mobile app a mobile phone that browser is accessing a",
    "start": "333319",
    "end": "339960"
  },
  {
    "text": "website or the mobile phone is running an app and that application wants to access data in some API uh in oath terms",
    "start": "339960",
    "end": "348520"
  },
  {
    "text": "called resource server in order to get access to that API it needs it needs to",
    "start": "348520",
    "end": "354080"
  },
  {
    "text": "actually go through this ooth flow to get an access token it can use so the",
    "start": "354080",
    "end": "360039"
  },
  {
    "text": "client is going to first tell the browser or the user agent to go send the",
    "start": "360039",
    "end": "365560"
  },
  {
    "text": "user over to the o server that's where they're going to log in and do whatever",
    "start": "365560",
    "end": "370880"
  },
  {
    "text": "authentication steps and consent steps are necessary and eventually it's going to send back to the client the",
    "start": "370880",
    "end": "377360"
  },
  {
    "text": "authorization server is going to redirect back with this temporary code it's an authorization code the client",
    "start": "377360",
    "end": "383880"
  },
  {
    "text": "will then exchange that code back at the authorization server for the actual access token like a key",
    "start": "383880",
    "end": "390479"
  },
  {
    "text": "and it can use that access token to go make API",
    "start": "390479",
    "end": "394919"
  },
  {
    "text": "requests the API obviously needs to know how to validate tokens so it can happen in a number of different ways we'll get",
    "start": "395639",
    "end": "401360"
  },
  {
    "text": "into some of the details of that later but one way it can validate tokens is to go and ask the authorization server if",
    "start": "401360",
    "end": "407039"
  },
  {
    "text": "the token is valid and get a response and eventually returning data so this",
    "start": "407039",
    "end": "412520"
  },
  {
    "text": "picture we're going to come back to this picture uh again when I start talking about some of the other extensions to",
    "start": "412520",
    "end": "417919"
  },
  {
    "text": "oath because a lot of the extensions Target different parts of the flow for different",
    "start": "417919",
    "end": "423599"
  },
  {
    "text": "reasons an alternative way to look at this is uh this kind of like uh sequence diagram so we'll go through this again",
    "start": "423599",
    "end": "430759"
  },
  {
    "text": "really quick in this different format kind of helps to to visualize it differently I think so again the user",
    "start": "430759",
    "end": "436120"
  },
  {
    "text": "agent is going to um where the user clicks log in in in in the browser or in",
    "start": "436120",
    "end": "441160"
  },
  {
    "text": "the app that application is then going to tell the browser to go visit the authorization server and you might",
    "start": "441160",
    "end": "446520"
  },
  {
    "text": "notice that I have this kind of loop Arrow here because the application to",
    "start": "446520",
    "end": "452000"
  },
  {
    "text": "this stage is not actually making a request over to the OAS server it's telling the browser to go there so it's",
    "start": "452000",
    "end": "457240"
  },
  {
    "text": "actually a redirect so then the user's browser lands at the o server they log in they do the consent step and the",
    "start": "457240",
    "end": "463319"
  },
  {
    "text": "authorization server wants to give this temporary code back to the app but it doesn't have a way to give it to the app",
    "start": "463319",
    "end": "469639"
  },
  {
    "text": "it actually sends it to the browser first and the browser takes it to the app and this is a really important step",
    "start": "469639",
    "end": "475039"
  },
  {
    "text": "it's a really important aspect of ooth this redirect concept then that application can go directly and talk to",
    "start": "475039",
    "end": "482479"
  },
  {
    "text": "the Olo server and exchange that code for an access token so the colored lines here it turns",
    "start": "482479",
    "end": "488800"
  },
  {
    "text": "out are significant and um the animation wasn't supposed to carry",
    "start": "488800",
    "end": "495960"
  },
  {
    "text": "over to that slide so the um top half the blue part is all happening in the",
    "start": "495960",
    "end": "502319"
  },
  {
    "text": "front Channel front Channel essentially meaning that it's all happening through redirects the two things that are",
    "start": "502319",
    "end": "507440"
  },
  {
    "text": "talking to each other here if you look at who's trying to actually send data it's the the app is trying to talk to",
    "start": "507440",
    "end": "513360"
  },
  {
    "text": "the o server and the o server is trying to get data back to the app but they don't talk directly to each other they always talk through the browser through",
    "start": "513360",
    "end": "519120"
  },
  {
    "text": "redirects that's what that's the front channel the back channel is kind of like the normal HTTP request they can talk",
    "start": "519120",
    "end": "525760"
  },
  {
    "text": "directly to each other this is also kind of this is",
    "start": "525760",
    "end": "530880"
  },
  {
    "text": "something that's um it's not necessarily unique to O but it is kind of core to to ooth and it's a source of a lot of the",
    "start": "530880",
    "end": "538760"
  },
  {
    "text": "things that we have to to do to secure the use of of the flows so the back channel is kind of like the normal way",
    "start": "538760",
    "end": "545240"
  },
  {
    "text": "to make requests on the internet of HTP client talking to an HTTP server hopefully over https um but it",
    "start": "545240",
    "end": "552320"
  },
  {
    "text": "essentially means that that connection is direct the the there's encryption in",
    "start": "552320",
    "end": "557760"
  },
  {
    "text": "in that connection and we know that the response was received without being manipulated and U that's all great",
    "start": "557760",
    "end": "565279"
  },
  {
    "text": "anytime we're using the front channel the two things talking to each other uh have to go through this sort of",
    "start": "565279",
    "end": "572519"
  },
  {
    "text": "untrusted third party the browser so there's a lot of opportunities for things to go wrong there the user can",
    "start": "572519",
    "end": "580120"
  },
  {
    "text": "change the data that's being sent between the two parties browser extensions can manipulate the data they can read the data so there's a lot of",
    "start": "580120",
    "end": "586440"
  },
  {
    "text": "different things we have to do in order to protect the use of the front",
    "start": "586440",
    "end": "591120"
  },
  {
    "text": "channel so okay ooth sets out this framework for getting getting these",
    "start": "591760",
    "end": "598160"
  },
  {
    "text": "access tokens to apps it's described in two parts at the beginning ooth 67 or",
    "start": "598160",
    "end": "603320"
  },
  {
    "text": "RFC 6749 ooth core and 6750 which is beer tokens",
    "start": "603320",
    "end": "608399"
  },
  {
    "text": "there's not very interesting reasons for those documents being split it's not super relevant anymore they're kind of",
    "start": "608399",
    "end": "613880"
  },
  {
    "text": "all just talked about as one thing at this point um the core spec talks about a number of different ways that apps can",
    "start": "613880",
    "end": "620680"
  },
  {
    "text": "get access tokens we looked at the authorization code flow just now um there are a few other versions of that",
    "start": "620680",
    "end": "626440"
  },
  {
    "text": "the implicit flow is a shortcut the password Grant is there's no redirects happening it's just a kind of direct",
    "start": "626440",
    "end": "631880"
  },
  {
    "text": "authentication of the from the user um and then the barer token spec defines a couple different ways apps can use",
    "start": "631880",
    "end": "638079"
  },
  {
    "text": "access tokens because of the problems of this using redirects and in in uh in these",
    "start": "638079",
    "end": "646480"
  },
  {
    "text": "different kinds of applications there's a number of opportunities for things to go wrong so we need to start adding more",
    "start": "646480",
    "end": "653480"
  },
  {
    "text": "layers of security kind of fix things up first the first one of those is called pixie it's actually publish as a",
    "start": "653480",
    "end": "658920"
  },
  {
    "text": "separate RFC several years after original originally oo was created and",
    "start": "658920",
    "end": "664000"
  },
  {
    "text": "this um we'll talk a little bit about it later but essentially it's protecting the the use of the front Channel and",
    "start": "664000",
    "end": "671399"
  },
  {
    "text": "then there's another RFC that talks about how we should be using pixie in mobile apps then later it turns out that",
    "start": "671399",
    "end": "677360"
  },
  {
    "text": "pixie solves attacks that were also possible for not mobile apps regular web server apps so now we have this security",
    "start": "677360",
    "end": "684040"
  },
  {
    "text": "BCP that comes along and says actually don't use the implicit flow anymore it's it's pointless we need pixie everywhere",
    "start": "684040",
    "end": "690240"
  },
  {
    "text": "we need uh we probably shouldn't be sending access tokens and query strings anymore and at this point you're probably thinking this is doesn't make",
    "start": "690240",
    "end": "696680"
  },
  {
    "text": "any sense like I just trying to just build this app like I don't care about all this and it's true there's a lot of",
    "start": "696680",
    "end": "703519"
  },
  {
    "text": "different specs involved in the in the O process it's partly because of just the",
    "start": "703519",
    "end": "709680"
  },
  {
    "text": "slow evolution of understanding of the security space it's partly because some of these features are required by some",
    "start": "709680",
    "end": "716120"
  },
  {
    "text": "business needs where others don't need those features so they kind of broken out into different specs so that you can",
    "start": "716120",
    "end": "721399"
  },
  {
    "text": "kind of pick and choose what you want but it's kind of hard to navigate uh and it's it's some at least some of this is",
    "start": "721399",
    "end": "731240"
  },
  {
    "text": "considered core ooth or like what when we say oo today what we actually mean is",
    "start": "731240",
    "end": "738440"
  },
  {
    "text": "this kind of Baseline which we're now consolidating into what actually is a",
    "start": "738440",
    "end": "744320"
  },
  {
    "text": "much simpler picture of use authorization code flow with Pixie all the time there's also the client",
    "start": "744320",
    "end": "749720"
  },
  {
    "text": "credentials grant for when there's no user involved um and then a couple different ways to use tokens but that is",
    "start": "749720",
    "end": "755720"
  },
  {
    "text": "what we're trying to that's what we're working on right now with updating oo 2 to oo 2.1 oo 2.1 is this evolution of",
    "start": "755720",
    "end": "764519"
  },
  {
    "start": "758000",
    "end": "816000"
  },
  {
    "text": "what is now um almost gosh almost 14 years of oo 2 where it kind of got a bit",
    "start": "764519",
    "end": "773160"
  },
  {
    "text": "messy and trying to bring it back together and say like okay this is what we mean now when we say ooth today",
    "start": "773160",
    "end": "779720"
  },
  {
    "text": "so it's not a whole new thing it's actually just like the best parts of oo 2 we're taking out a lot of the parts",
    "start": "779720",
    "end": "785880"
  },
  {
    "text": "that wer aren't needed anymore a lot of the optionality that was there for",
    "start": "785880",
    "end": "791240"
  },
  {
    "text": "reasons that aren't relevant anymore uh and trying to just give it a name so that we can refer to it by",
    "start": "791240",
    "end": "798040"
  },
  {
    "text": "something so that we can consistently refer to it when we say what ooth is um it's also an opportunity to add",
    "start": "798040",
    "end": "803399"
  },
  {
    "text": "references to a lot of new extensions because there's a lot of new new interesting work going in that uh wasn't",
    "start": "803399",
    "end": "809160"
  },
  {
    "text": "n around when AWA 2 was originally published so at this point I should also",
    "start": "809160",
    "end": "814800"
  },
  {
    "text": "talk about how open ID connect relates to this because ooth is just one part of the",
    "start": "814800",
    "end": "820040"
  },
  {
    "start": "816000",
    "end": "979000"
  },
  {
    "text": "picture think of ooth as a hotel as as the hotel Key example ooth issues access",
    "start": "820040",
    "end": "827240"
  },
  {
    "text": "tokens access tokens are used to access data that's why they're called access tokens Hotel keys are used to access",
    "start": "827240",
    "end": "833360"
  },
  {
    "text": "resources in the hotel the hotel Key does not say anything about you a person",
    "start": "833360",
    "end": "839279"
  },
  {
    "text": "it is not a representation of your identity it has nothing to do with any of that so essentially if we want to",
    "start": "839279",
    "end": "845800"
  },
  {
    "text": "answer those kinds of questions in an ooth like flow we need to add openid connect so ooth is all about accessing",
    "start": "845800",
    "end": "853399"
  },
  {
    "text": "apis whereas open ID connect is about identifying the user so think of ooth as the way that an",
    "start": "853399",
    "end": "860720"
  },
  {
    "text": "application can go make API requests it's going to use an O flow get an access token make API requests the uh",
    "start": "860720",
    "end": "868440"
  },
  {
    "text": "open ID connect extensions to it are going to actually tell that app about the user who's",
    "start": "868440",
    "end": "873920"
  },
  {
    "text": "authenticating so the way that it's going to do this is aoth is going to issue access tokens open ID connect is",
    "start": "873920",
    "end": "879560"
  },
  {
    "text": "going to issue ID tokens so you can think of access tokens",
    "start": "879560",
    "end": "885920"
  },
  {
    "text": "like a key you can do things with a key you can use it you can go around to",
    "start": "885920",
    "end": "891240"
  },
  {
    "text": "different resources and open different doors an ID token is more just like a statement it's just like a a a statement",
    "start": "891240",
    "end": "897720"
  },
  {
    "text": "about something that happened and there's going to be a bunch of information on that it's going to be like this user logged in at this time to",
    "start": "897720",
    "end": "904120"
  },
  {
    "text": "this application from this place whatever else you want to add into that it's like a receipt it's just a",
    "start": "904120",
    "end": "910040"
  },
  {
    "text": "statement about things and it can importantly it can be validated it has a signature so you know that it's a real",
    "start": "910040",
    "end": "917120"
  },
  {
    "text": "statement issued by the open server and not uh faked but this also implies that the",
    "start": "917120",
    "end": "924480"
  },
  {
    "text": "things that are going to be reading these two different tokens are different things a access token will only ever be read by",
    "start": "924480",
    "end": "931480"
  },
  {
    "text": "an API that it's going to be accessing whereas an ID token is read by the app",
    "start": "931480",
    "end": "937319"
  },
  {
    "text": "and this goes both ways so this means if you're building an API you should never expect to see ID tokens because ID",
    "start": "937319",
    "end": "943759"
  },
  {
    "text": "tokens are not part of that that ecosystem they're part of the the application went and got both tokens and",
    "start": "943759",
    "end": "950480"
  },
  {
    "text": "then as an API you're going to see the access token if you're building the application and you are going to get",
    "start": "950480",
    "end": "957440"
  },
  {
    "text": "both of these tokens because you need one to go and make API requests and you need the other to learn about the user",
    "start": "957440",
    "end": "962839"
  },
  {
    "text": "you're never going to read the access token the access token should be treated as just a random string of of gibberish",
    "start": "962839",
    "end": "968920"
  },
  {
    "text": "that has no significance to the app it's only the API that cares about",
    "start": "968920",
    "end": "974680"
  },
  {
    "text": "that so I want to go back to this idea of front Channel and back Channel",
    "start": "974680",
    "end": "980720"
  },
  {
    "start": "979000",
    "end": "1310000"
  },
  {
    "text": "again so the back channel is the server to server connection or client to server connection where it's HTTP requests",
    "start": "980720",
    "end": "988240"
  },
  {
    "text": "actually sending and receiving data and the front Channel being passing data between two pieces of software through",
    "start": "988240",
    "end": "994839"
  },
  {
    "text": "some other software a browser so with the back channel it's",
    "start": "994839",
    "end": "1000560"
  },
  {
    "text": "it's it's almost like we forget why it's so useful because it's just kind of assumed the the",
    "start": "1000560",
    "end": "1006480"
  },
  {
    "text": "default when the client makes a request if we're using https it's going to do certificate validation so we know we're",
    "start": "1006480",
    "end": "1012040"
  },
  {
    "text": "talking to the right server that also establishes an encrypted connection so you know that that data can't be",
    "start": "1012040",
    "end": "1017319"
  },
  {
    "text": "tampered with and that means that you know that when you get a response from an HTTP request you know that it's the",
    "start": "1017319",
    "end": "1024558"
  },
  {
    "text": "data you were expecting I like to think of it as hand delivering a message like you walk up to somebody you can take a",
    "start": "1024559",
    "end": "1030558"
  },
  {
    "text": "thing you give it to them you can see they took it they know who you are you know that the transaction was successful",
    "start": "1030559",
    "end": "1036678"
  },
  {
    "text": "you know that nobody else came in and stole that the front Channel however is",
    "start": "1036679",
    "end": "1041798"
  },
  {
    "text": "more like taking whatever message you're going to send putting it in an envelope sending it in the mail and then hoping",
    "start": "1041799",
    "end": "1048319"
  },
  {
    "text": "that it gets there and this is really important to remember on both sides of the transaction if you send data in the",
    "start": "1048319",
    "end": "1055559"
  },
  {
    "text": "front Channel you have no way to know if it was received just like when you send a letter you send a letter you have no",
    "start": "1055559",
    "end": "1062120"
  },
  {
    "text": "confirmation that it was received even if there was a tracking number on the letter all that means is that the",
    "start": "1062120",
    "end": "1067640"
  },
  {
    "text": "delivery company says it was received it's not actually proof right and on the",
    "start": "1067640",
    "end": "1072799"
  },
  {
    "text": "receiving end you have no guarantee of where this actually came from was it from the o server was it from somebody",
    "start": "1072799",
    "end": "1080720"
  },
  {
    "text": "who just put a different return address on the envelope did they open it up to take out the contents replace it and",
    "start": "1080720",
    "end": "1086880"
  },
  {
    "text": "seal it back up you have no way to know right so essentially anytime we're using the front channel from either side of",
    "start": "1086880",
    "end": "1093679"
  },
  {
    "text": "this transaction you have to just remain skeptical so why do we use it at all",
    "start": "1093679",
    "end": "1099440"
  },
  {
    "text": "then well this is actually how we let the user get involved in the flow",
    "start": "1099440",
    "end": "1104559"
  },
  {
    "text": "without the front Channel we would have uh users directly entering password into Apps which open up a separate set of",
    "start": "1104559",
    "end": "1112480"
  },
  {
    "text": "problems um this is also how we're able to add two Factor off into the O off flow",
    "start": "1112480",
    "end": "1117760"
  },
  {
    "text": "securely so I want to give you some concrete examples of front Channel back Channel because it can be kind of uh",
    "start": "1117760",
    "end": "1124320"
  },
  {
    "text": "kind of confusing once you start looking at different actual deployment scenarios it's kind of the most clear in",
    "start": "1124320",
    "end": "1131400"
  },
  {
    "text": "uh server sign apps this is like any kind of language that's running on a server somewhere that the user accessing from a browser this is the most",
    "start": "1131400",
    "end": "1137840"
  },
  {
    "text": "straightforward separation of the two where the separation is the most easily visible so you if you think about it",
    "start": "1137840",
    "end": "1144360"
  },
  {
    "text": "from the uh authorization server point of view it's getting a message in the",
    "start": "1144360",
    "end": "1149440"
  },
  {
    "text": "front Channel first and it's getting a message in the back Channel second in the ooth flow so the front Channel message is coming from the user's",
    "start": "1149440",
    "end": "1155679"
  },
  {
    "text": "browser which means it's going to have a um a user agent string it's going to have an IP address that's going to be",
    "start": "1155679",
    "end": "1161679"
  },
  {
    "text": "their you know home internet whereas the back Channel message it's getting it's coming from the web server that's",
    "start": "1161679",
    "end": "1166840"
  },
  {
    "text": "running this application so it's going to have it's going to be running you know in AWS or something like some sort",
    "start": "1166840",
    "end": "1171960"
  },
  {
    "text": "of totally different IP address where the two requests are coming from and then you can that kind of makes it very",
    "start": "1171960",
    "end": "1177320"
  },
  {
    "text": "clear why uh from the authorization servers point of view why there's no immediate connection between the two",
    "start": "1177320",
    "end": "1184039"
  },
  {
    "text": "requests they are they're coming from two totally separate places at different",
    "start": "1184039",
    "end": "1189440"
  },
  {
    "text": "times the same concept is also true in single Page Apps and mobile apps but it",
    "start": "1189440",
    "end": "1194640"
  },
  {
    "text": "gets a little bit more blurry to see the differences",
    "start": "1194640",
    "end": "1199679"
  },
  {
    "text": "in a single page app where you have JavaScript code running in the browser the front channel is when the JavaScript",
    "start": "1199679",
    "end": "1207200"
  },
  {
    "text": "code tells the browser to redirect somewhere right where it's actually telling the browser to go make a request",
    "start": "1207200",
    "end": "1213280"
  },
  {
    "text": "the back channel is when the JavaScript code itself makes an HTTP request using fetch or XML HTP request or Ajax or",
    "start": "1213280",
    "end": "1220760"
  },
  {
    "text": "whatever so even though from the authorization server point of view the request is coming from the same IP",
    "start": "1220760",
    "end": "1226919"
  },
  {
    "text": "address CU it's both of these are in the same device we still have to consider them separately because there's still a",
    "start": "1226919",
    "end": "1233600"
  },
  {
    "text": "lot of the same opportunities to kind of inject or mess with the",
    "start": "1233600",
    "end": "1238919"
  },
  {
    "text": "requests in a mobile app it's similar and the lines are a little bit even more blurry now because um because in in",
    "start": "1238919",
    "end": "1248320"
  },
  {
    "text": "Mobile we have uh the front channel is is the use of these system apis on iOS",
    "start": "1248320",
    "end": "1254240"
  },
  {
    "text": "it's called as web authentication session but essentially it's that little browser that you'll see that'll slide up inside the app and uh the app no longer",
    "start": "1254240",
    "end": "1262520"
  },
  {
    "text": "has control over that browser so it can tell the phone to go to a certain address and then it kind of doesn't see",
    "start": "1262520",
    "end": "1269120"
  },
  {
    "text": "anything that happens until eventually a callback Handler is called in the native",
    "start": "1269120",
    "end": "1274159"
  },
  {
    "text": "code whereas a back Channel request is the native code actually using an HTP",
    "start": "1274159",
    "end": "1279760"
  },
  {
    "text": "client so if you haven't caught on that the theme Here is back channel is an HTTP client whereas the front channel is",
    "start": "1279760",
    "end": "1287720"
  },
  {
    "text": "not an HTT client it's the the code that you're writing not making an HTP request",
    "start": "1287720",
    "end": "1293120"
  },
  {
    "text": "it's telling the browser to do something",
    "start": "1293120",
    "end": "1299320"
  },
  {
    "text": "so let's um let's talk about some of the recent ooth extensions that have been",
    "start": "1299360",
    "end": "1305120"
  },
  {
    "text": "published and I want to kind of relate them back to the original diagram and also the front Channel versus back",
    "start": "1305120",
    "end": "1312120"
  },
  {
    "start": "1310000",
    "end": "1929000"
  },
  {
    "text": "channel so the first one I want to talk about is called pushed authorization requests it's um RFC 9126 so several",
    "start": "1312120",
    "end": "1322200"
  },
  {
    "text": "thousand rfc's later if we think about back to this",
    "start": "1322200",
    "end": "1327440"
  },
  {
    "text": "diagram um the first thing that the app did in the traditional o flow was",
    "start": "1327440",
    "end": "1332679"
  },
  {
    "text": "redirect the user's browser so it first tells the user agent to go redirect to the o server that's a front Channel",
    "start": "1332679",
    "end": "1338200"
  },
  {
    "text": "request the problem with a front Channel request is that the authorization server is getting that request not from the",
    "start": "1338200",
    "end": "1344080"
  },
  {
    "text": "client it's getting it from the browser so as a user if you happen to to see the query string that is uh the app is",
    "start": "1344080",
    "end": "1351039"
  },
  {
    "text": "building you can modify it and you can add Scopes that it's requesting or delete Scopes it's requesting and you",
    "start": "1351039",
    "end": "1356480"
  },
  {
    "text": "can cause all sorts of chaos with applications by doing this so push authorization requests changes the way",
    "start": "1356480",
    "end": "1362799"
  },
  {
    "text": "the flow starts to uh actually starting to flow in the back channel so instead of redirecting with",
    "start": "1362799",
    "end": "1372679"
  },
  {
    "text": "all these things in the query string the client is actually first going to make a back Channel request to the ooth server",
    "start": "1372679",
    "end": "1379400"
  },
  {
    "text": "and this is good for both um both clients that have credentials and not if",
    "start": "1379400",
    "end": "1386720"
  },
  {
    "text": "the client has credentials because it's a server side app now that first request can actually be authenticated and that",
    "start": "1386720",
    "end": "1392840"
  },
  {
    "text": "means that the o server can really know for sure that it's that app making the request for JavaScript clients or mobile",
    "start": "1392840",
    "end": "1398720"
  },
  {
    "text": "clients there's no authentication in the request but it's still better than the front Channel because at least the user doesn't have the opportunity to mess",
    "start": "1398720",
    "end": "1405279"
  },
  {
    "text": "with the query string parameters and any else that can see query parameters uh in the request are also it's all hidden",
    "start": "1405279",
    "end": "1411880"
  },
  {
    "text": "it's also uh possible to send much larger requests this way which is important once you start getting into things like uh banking use cases where",
    "start": "1411880",
    "end": "1419200"
  },
  {
    "text": "you might have really large initial requests because you're trying to describe a request of authorizing access",
    "start": "1419200",
    "end": "1424600"
  },
  {
    "text": "to a bunch of accounts or authorizing specific payment between different accounts um so it's just a lot nicer to",
    "start": "1424600",
    "end": "1430640"
  },
  {
    "text": "kind of bundle those up into a post request uh there's also Rich authorization requests which is um",
    "start": "1430640",
    "end": "1438880"
  },
  {
    "text": "kind of it's actually one of the good reasons to use push authorization requests because what this does is this",
    "start": "1438880",
    "end": "1445640"
  },
  {
    "text": "uh does it does um affect the you could use it in the front Channel or the back",
    "start": "1445640",
    "end": "1451440"
  },
  {
    "text": "Channel but it makes more sense to use it with with push authorization requests essentially what this is is uh an",
    "start": "1451440",
    "end": "1458000"
  },
  {
    "text": "addition an expansion of the idea of oo Scopes so with ooth Scopes you would be uh typically",
    "start": "1458000",
    "end": "1463919"
  },
  {
    "text": "saying this application is trying to get access to this user's you know email or",
    "start": "1463919",
    "end": "1468960"
  },
  {
    "text": "contacts and that's pretty uh rough it's like course grained right so if you",
    "start": "1468960",
    "end": "1475200"
  },
  {
    "text": "wanted to be able to describe more specific things like this app is requesting access to this particular",
    "start": "1475200",
    "end": "1482039"
  },
  {
    "text": "account or wants to authorize the ability to pay up to $10 to these 10",
    "start": "1482039",
    "end": "1489000"
  },
  {
    "text": "people none of that is really going to be possible with Scopes without going pretty overboard with with defining",
    "start": "1489000",
    "end": "1495559"
  },
  {
    "text": "scope strings so essentially it's a it's a sytax for it's a framework for describing those kinds of syntaxes again",
    "start": "1495559",
    "end": "1501799"
  },
  {
    "text": "it has a lot of uses in the banking uh space as you can probably",
    "start": "1501799",
    "end": "1506880"
  },
  {
    "text": "imagine um another one that was recently finished was uh is a step up authentication challenge so this one",
    "start": "1506880",
    "end": "1513120"
  },
  {
    "text": "affects the link between the client talking to the uh resource over the API so the client talks to the API it's",
    "start": "1513120",
    "end": "1519240"
  },
  {
    "text": "making API requests and at some point that API might say it's been too long since you've last authenticated uh you",
    "start": "1519240",
    "end": "1526200"
  },
  {
    "text": "you last logged in at the o server a week ago and you've been kind of riding on access tokens and refresh tokens",
    "start": "1526200",
    "end": "1532200"
  },
  {
    "text": "since then um so Step Up off is the ability gives the ability of for the API to tell",
    "start": "1532200",
    "end": "1540120"
  },
  {
    "text": "the client that uh the user needs to reauthenticate or do a second Factor so if you um if you imagine from the from",
    "start": "1540120",
    "end": "1547120"
  },
  {
    "text": "the api's point of view you're going to get this access token and it's going to have information in it like when the",
    "start": "1547120",
    "end": "1553080"
  },
  {
    "text": "user last logged in whether they used the second Factor when they did log in um",
    "start": "1553080",
    "end": "1558840"
  },
  {
    "text": "and at some point you might be like okay well it's been too long like I need to know that these are is actually actually still there because the app can go a",
    "start": "1558840",
    "end": "1565520"
  },
  {
    "text": "long time using refresh tokens to kind of extend its own access without ever bothering the user so that's a a good",
    "start": "1565520",
    "end": "1572120"
  },
  {
    "text": "framework for that speaking of access tokens uh there is uh actually no",
    "start": "1572120",
    "end": "1577679"
  },
  {
    "text": "requirement in oo that access tokens have any particular format and you do see this in practice uh pretty big range",
    "start": "1577679",
    "end": "1583640"
  },
  {
    "text": "of of things it usually tends to be the case that in kind of simpler smaller",
    "start": "1583640",
    "end": "1588960"
  },
  {
    "text": "deployments um not maybe not smaller but simpler structures um access tokens will",
    "start": "1588960",
    "end": "1596279"
  },
  {
    "text": "just be a random string like if you look at a lot of a lot of consumer websites",
    "start": "1596279",
    "end": "1602679"
  },
  {
    "text": "it's usually things where there's just like a a website or a system um then",
    "start": "1602679",
    "end": "1608360"
  },
  {
    "text": "they just use random strings but as soon as you start getting into deploying more complicated scenarios or kind of moving",
    "start": "1608360",
    "end": "1614520"
  },
  {
    "text": "your authorization server out somewhere else to a different subsystem and then then having a bunch of different",
    "start": "1614520",
    "end": "1620000"
  },
  {
    "text": "apis then the random string pattern starts to add a lot of uh a lot of",
    "start": "1620000",
    "end": "1625720"
  },
  {
    "text": "complications so the job profile for Access tokens describes an actual uh a syntax and",
    "start": "1625720",
    "end": "1633880"
  },
  {
    "text": "claims that are used in adjacent web token that you can use as an access token this is where things start to get",
    "start": "1633880",
    "end": "1640240"
  },
  {
    "text": "a little bit um messy though with with app developers because as soon as an app",
    "start": "1640240",
    "end": "1645600"
  },
  {
    "text": "developer sees that it's a job you can recognize it from the p pattern right as soon as the app developer sees it's a jot they're like oh that means I can",
    "start": "1645600",
    "end": "1651640"
  },
  {
    "text": "parse it right but no like again just like a hotel key card if you're using it",
    "start": "1651640",
    "end": "1657720"
  },
  {
    "text": "you don't care what's on it you just care that what you're sending it to what you're using it at does know how to read",
    "start": "1657720",
    "end": "1663200"
  },
  {
    "text": "it so again apps are never going to parse tokens even if it's technically possible because you're going to you're",
    "start": "1663200",
    "end": "1669200"
  },
  {
    "text": "breaking the breaking the security barriers here um this is also uh a good time to",
    "start": "1669200",
    "end": "1677440"
  },
  {
    "text": "mention the difference between random string tokens or structured tokens like Jason web tokens um if you are doing if",
    "start": "1677440",
    "end": "1685360"
  },
  {
    "text": "you are using a structure token like a Json web token what it's doing in addition to defining a common set of",
    "start": "1685360",
    "end": "1692240"
  },
  {
    "text": "claims it's actually giving that API the ability to validate the token without network traffic so if you start spinning",
    "start": "1692240",
    "end": "1698240"
  },
  {
    "text": "up a bunch of different API servers uh in a bunch of different places they no longer have to kind of",
    "start": "1698240",
    "end": "1705480"
  },
  {
    "text": "share access to a database to look up these random strings so one um one common use of this is in",
    "start": "1705480",
    "end": "1714840"
  },
  {
    "text": "deployments behind an API Gateway because what you can do here is you can actually have an API Gateway do your",
    "start": "1714840",
    "end": "1719919"
  },
  {
    "text": "token validation and this Gateway is on the public Internet it's going to be getting all this traffic from a bunch of",
    "start": "1719919",
    "end": "1725120"
  },
  {
    "text": "random things like with valid tokens expired tokens attackers are going to be trying to get in you're going to just",
    "start": "1725120",
    "end": "1731600"
  },
  {
    "text": "get you're getting uh requests with tokens have been revoked because uh a user logged out or whatever it was and",
    "start": "1731600",
    "end": "1738679"
  },
  {
    "text": "also just junk requests you don't want to have all of those requests have to do a database lookup to even before you",
    "start": "1738679",
    "end": "1745080"
  },
  {
    "text": "even process the rest of the request right so you can do local validation at the Gateway layer look at the jot decide",
    "start": "1745080",
    "end": "1751519"
  },
  {
    "text": "is it was it signed correctly is it uh is it expired and you can throw away a lot of the traffic right right there",
    "start": "1751519",
    "end": "1759080"
  },
  {
    "text": "however it's usually not actually the end of the story because you're going to let that Gateway doing local validation",
    "start": "1759080",
    "end": "1765600"
  },
  {
    "text": "will let through valid tokens but also Al tokens that would have been valid if",
    "start": "1765600",
    "end": "1771399"
  },
  {
    "text": "they hadn't been revoked for other reasons cuz essentially if you think about Jason web token the server is",
    "start": "1771399",
    "end": "1776799"
  },
  {
    "text": "going to create it it's going to say it's valid for 12 hours or whatever it is and what happens if things changed",
    "start": "1776799",
    "end": "1783880"
  },
  {
    "text": "between the time it was issued and 12 hours when it expires things can change",
    "start": "1783880",
    "end": "1788919"
  },
  {
    "text": "like if it depends on what you have in that token but it could be Scopes that were granted it could be um well maybe",
    "start": "1788919",
    "end": "1795559"
  },
  {
    "text": "the user was deleted and the token looks like it's still Val for another 12 hours or any number of things",
    "start": "1795559",
    "end": "1801640"
  },
  {
    "text": "right different parts of your internal systems May care more or less about those so there isn't even a correct",
    "start": "1801640",
    "end": "1808559"
  },
  {
    "text": "solution kind of going back to the the opening talk there's no right or wrong absolute yes or no on",
    "start": "1808559",
    "end": "1816120"
  },
  {
    "text": "it's it's all like you have to decide what's the right what what are the trade-offs you're going to make in terms",
    "start": "1816120",
    "end": "1821519"
  },
  {
    "text": "of speed benefits versus flexibility or um usability",
    "start": "1821519",
    "end": "1828120"
  },
  {
    "text": "so if you have like your um different internal apis maybe you have a customer",
    "start": "1828120",
    "end": "1833480"
  },
  {
    "text": "API that's going to just return the user's current rewards points balance like that's not super sensitive",
    "start": "1833480",
    "end": "1839360"
  },
  {
    "text": "information it doesn't identify the user it doesn't change very often so if that",
    "start": "1839360",
    "end": "1844679"
  },
  {
    "text": "API didn't uh didn't go any further than just the local J validation it's",
    "start": "1844679",
    "end": "1851159"
  },
  {
    "text": "probably fine because like you're not going to leak that much information if you accidentally responded when the user",
    "start": "1851159",
    "end": "1856919"
  },
  {
    "text": "account was deleted or if the user had revoked that app but a billing API that's going to go charge the user's credit card very different story right",
    "start": "1856919",
    "end": "1863720"
  },
  {
    "text": "like you want to make sure that at that moment you know for sure that that token is actually valid through all the other",
    "start": "1863720",
    "end": "1869200"
  },
  {
    "text": "validation steps you're going to be doing so for those you can go back and do the token introspection or database",
    "start": "1869200",
    "end": "1877320"
  },
  {
    "text": "lookup of some sort actually checking your your your revocation lists go back",
    "start": "1877320",
    "end": "1882440"
  },
  {
    "text": "to the Olf server and reject the revoke tokens so one way to think about this is",
    "start": "1882440",
    "end": "1887720"
  },
  {
    "text": "that access tokens when they're a jot access token it's actually a cache of the state of the system when the token",
    "start": "1887720",
    "end": "1894840"
  },
  {
    "text": "was created and that cash has a cash lifetime which is your access token lifetime so you can change how the",
    "start": "1894840",
    "end": "1903120"
  },
  {
    "text": "system behaves by changing your cash Lifetime and and that has performance and security implications on on both",
    "start": "1903120",
    "end": "1909039"
  },
  {
    "text": "sides so I just find it a useful way to think of instead of trying to be more",
    "start": "1909039",
    "end": "1915639"
  },
  {
    "text": "black and white about it um about this way is always right or this way is always",
    "start": "1915639",
    "end": "1921559"
  },
  {
    "text": "wrong so okay let's move on to some of the specifications that are getting",
    "start": "1922360",
    "end": "1929080"
  },
  {
    "start": "1929000",
    "end": "2175000"
  },
  {
    "text": "close to um being final one of them is",
    "start": "1929080",
    "end": "1935340"
  },
  {
    "text": "[Music] um oath for browser based application it's actually called a best current",
    "start": "1935340",
    "end": "1940799"
  },
  {
    "text": "practice um it is not defining new ooth Concepts but it is",
    "start": "1940799",
    "end": "1946840"
  },
  {
    "text": "describing concerns that are related to building ooth applications in browser based apps JavaScript",
    "start": "1946840",
    "end": "1953600"
  },
  {
    "text": "apps the main thing this does is it lays out three um common patterns for uh that that you",
    "start": "1953600",
    "end": "1962919"
  },
  {
    "text": "can usually use in when creating a single page app that's going to be a pure single",
    "start": "1962919",
    "end": "1969559"
  },
  {
    "text": "page app or a backend for the single page app and there's two variations in the back end one is where it's proing",
    "start": "1969559",
    "end": "1975679"
  },
  {
    "text": "all requests and one that where it's only kind of pro boxing tokens so it's laying out these patterns and then",
    "start": "1975679",
    "end": "1981679"
  },
  {
    "text": "describing what are the benefits and drawbacks of each pattern it turns out there's problems on all of them because",
    "start": "1981679",
    "end": "1988159"
  },
  {
    "text": "browsers are just a very messy world to live in um so in a single page app you",
    "start": "1988159",
    "end": "1993519"
  },
  {
    "text": "have um no backend right the JavaScript code that you're writing is making API",
    "start": "1993519",
    "end": "1998639"
  },
  {
    "text": "requests directly so it needs to obtain the tokens itself and it needs to use those tokens to make API requests this",
    "start": "1998639",
    "end": "2006039"
  },
  {
    "text": "is um it's not right or wrong it's just this is a pattern and there um are trade-offs",
    "start": "2006039",
    "end": "2014760"
  },
  {
    "text": "in the pattern the the main um kind",
    "start": "2014760",
    "end": "2019880"
  },
  {
    "text": "of concern here is the fact that the uh",
    "start": "2019880",
    "end": "2025000"
  },
  {
    "text": "well the unique thing about this flow is that the browser is actually making API requests so the browser has to have the",
    "start": "2025000",
    "end": "2030200"
  },
  {
    "text": "token which means it needs to store the token somewhere so you're also dealing with token storage concerns don't have",
    "start": "2030200",
    "end": "2036200"
  },
  {
    "text": "time to go into all of the the concerns here but do read the document if if if",
    "start": "2036200",
    "end": "2041679"
  },
  {
    "text": "you're curious uh but I want to point out the differ the main differences between the patterns the um sort of Middle Ground",
    "start": "2041679",
    "end": "2049040"
  },
  {
    "text": "pattern is where you end up with this uh backend that is only responsible for",
    "start": "2049040",
    "end": "2055240"
  },
  {
    "text": "obtaining tokens and then sending the tokens to the JavaScript code so rather",
    "start": "2055240",
    "end": "2060720"
  },
  {
    "text": "than um rather than so the JavaScript code",
    "start": "2060720",
    "end": "2065760"
  },
  {
    "text": "still actually has the tokens and does make API requests directly to the resource server but it's not responsible",
    "start": "2065760",
    "end": "2071638"
  },
  {
    "text": "for that that kind of initial uh obtaining the tokens so your backend for",
    "start": "2071639",
    "end": "2077200"
  },
  {
    "text": "example can be a confidential client which means that only that backend can actually obtain tokens and there's no",
    "start": "2077200",
    "end": "2083320"
  },
  {
    "text": "way to impersonate it which is good um so this actually does solve a number of",
    "start": "2083320",
    "end": "2088599"
  },
  {
    "text": "of issues that are um attacks that are possible in a pure single page app but still leaves some",
    "start": "2088599",
    "end": "2096280"
  },
  {
    "text": "concerns open because the JavaScript code does ultimately end up with the token the um third pattern most common",
    "start": "2096280",
    "end": "2104720"
  },
  {
    "text": "pattern is the is the full backend pattern where uh the browser doesn't see",
    "start": "2104720",
    "end": "2111400"
  },
  {
    "text": "any part of the oo flow or your your JavaScript code doesn't see any part of the O flow uh it's all handled through",
    "start": "2111400",
    "end": "2117160"
  },
  {
    "text": "the backend and the browser doesn't even make API requests to the apis themselves it'll it proxies all the requests",
    "start": "2117160",
    "end": "2123680"
  },
  {
    "text": "through its backend and this is the most secure of the three there are still",
    "start": "2123680",
    "end": "2129000"
  },
  {
    "text": "attacks that are possible but essentially what it uh what it does is it means that if cross scripting attacks",
    "start": "2129000",
    "end": "2134359"
  },
  {
    "text": "happen the cross scripting attacker can't steal any access tokens because the access tokens weren't even in the",
    "start": "2134359",
    "end": "2140119"
  },
  {
    "text": "browser in the first place the worst that happens that the attacker can tell the backend to make API requests",
    "start": "2140119",
    "end": "2146680"
  },
  {
    "text": "impersonating the app which is about the best that you can do in in JavaScript so it's worth reading this",
    "start": "2146680",
    "end": "2153800"
  },
  {
    "text": "full spec uh if you are if you are finding yourself building any JavaScript",
    "start": "2153800",
    "end": "2159280"
  },
  {
    "text": "applications because there's a lot more to it than you might think and there's in there a lot of really",
    "start": "2159280",
    "end": "2165160"
  },
  {
    "text": "subtle uh subtle tricks that can that can get you and you may want to consider",
    "start": "2165160",
    "end": "2170280"
  },
  {
    "text": "one of these patterns uh over others based on all those different",
    "start": "2170280",
    "end": "2175480"
  },
  {
    "start": "2175000",
    "end": "2440000"
  },
  {
    "text": "trade-offs um another largely uh well I don't want to say unsolved but but only",
    "start": "2175480",
    "end": "2182960"
  },
  {
    "text": "recently possible to be solved problem is this problem with send your constraint access tokens so again back",
    "start": "2182960",
    "end": "2188880"
  },
  {
    "text": "to the hotel Key example um if you have a hotel Key and you go to",
    "start": "2188880",
    "end": "2194319"
  },
  {
    "text": "the door and swipe it it opens up great what happens if you give your key to somebody else they can access the door",
    "start": "2194319",
    "end": "2200119"
  },
  {
    "text": "just as well as you can right the key represents the authorization so this is also true with oo access tokens the",
    "start": "2200119",
    "end": "2207119"
  },
  {
    "text": "access token represents the authorization so if you steal an access token you can use it just as well as the",
    "start": "2207119",
    "end": "2212160"
  },
  {
    "text": "real app because that is what is authorizing the request which is as you",
    "start": "2212160",
    "end": "2217240"
  },
  {
    "text": "can imag imine not super great if you have a way to steal access tokens and",
    "start": "2217240",
    "end": "2222640"
  },
  {
    "text": "this is not not a um theoretical problem there are at this point many many",
    "start": "2222640",
    "end": "2229880"
  },
  {
    "text": "examples uh some of which are relatively high-profile um where accounts get taken over through this kind of this kind of",
    "start": "2229880",
    "end": "2237680"
  },
  {
    "text": "attack this is an example of the lineus tech tips YouTube channel um getting",
    "start": "2237680",
    "end": "2243359"
  },
  {
    "text": "taken over and rebranded and then broadcasting cryptocurrency schemes because",
    "start": "2243359",
    "end": "2248599"
  },
  {
    "text": "of this bear token problem if you can steal all the all the cookies out of the browser you can put them into a new",
    "start": "2248599",
    "end": "2255160"
  },
  {
    "text": "browser and they look just the same as the original browser and um it's it's",
    "start": "2255160",
    "end": "2260760"
  },
  {
    "text": "all the cookies and access tokens have the same problem the the problem is that the thing that was issued is the same",
    "start": "2260760",
    "end": "2267880"
  },
  {
    "text": "thing that is used in the request so if you can steal it in some part of the flow either when it was sent or if it",
    "start": "2267880",
    "end": "2273800"
  },
  {
    "text": "was stored on disk you can impersonate that application so the idea of sender constraint access",
    "start": "2273800",
    "end": "2280400"
  },
  {
    "text": "tokens is to require some sort of authentication of the software that's",
    "start": "2280400",
    "end": "2286480"
  },
  {
    "text": "using the token or the cookie and there are a number of different ways",
    "start": "2286480",
    "end": "2292760"
  },
  {
    "text": "you can accomplish this some of which are easier to deploy than others there have been many attempts at this over the",
    "start": "2292760",
    "end": "2298599"
  },
  {
    "text": "years um many failed attempts some semis successful attempts at this point the",
    "start": "2298599",
    "end": "2304720"
  },
  {
    "text": "ones that are relevant are the three at the top Mutual TLS it's not a new RFC um",
    "start": "2304720",
    "end": "2310880"
  },
  {
    "text": "but it is kind of the harder one of the harder ones to deploy because it's it's using client certificates in your HTTP",
    "start": "2310880",
    "end": "2317000"
  },
  {
    "text": "client which is awkward for a lot of HTP clients but also kind of awkward on the server side because you have to",
    "start": "2317000",
    "end": "2322839"
  },
  {
    "text": "terminate it at the TLs Terminator so if you're using a a Gateway and a bunch of stuff Downstream it's like it just",
    "start": "2322839",
    "end": "2328520"
  },
  {
    "text": "doesn't really it's hard to deploy in a lot of cases um depop is a more recent",
    "start": "2328520",
    "end": "2333760"
  },
  {
    "text": "RFC which was created essentially in direct response to try to find an alternative to Mutual TLS and it does it",
    "start": "2333760",
    "end": "2341160"
  },
  {
    "text": "moves all that client certificate stuff into the application layer so that it's just an HTTP header that you can set",
    "start": "2341160",
    "end": "2347440"
  },
  {
    "text": "which means it can also be sent Downstream through other other uh layers of your server side uh it is much easier",
    "start": "2347440",
    "end": "2354599"
  },
  {
    "text": "to write code for you can do pure JavaScript implementations of it in a browser um it's it's actually pretty",
    "start": "2354599",
    "end": "2361000"
  },
  {
    "text": "reasonable to uh to deploy signed HTP requests is not an",
    "start": "2361000",
    "end": "2366359"
  },
  {
    "text": "ooth RFC it's actually an HP RFC and um it's a general purpose signing method",
    "start": "2366359",
    "end": "2372280"
  },
  {
    "text": "rather than for Access token binding but you could use it for Access token binding so depop is kind of the",
    "start": "2372280",
    "end": "2379359"
  },
  {
    "text": "purpose-built ooth specific token binding um RFC of choice at this point",
    "start": "2379359",
    "end": "2385440"
  },
  {
    "text": "um I'm still optimistic about HTTP signatures personally but there's no current work being done in the in the",
    "start": "2385440",
    "end": "2391800"
  },
  {
    "text": "ooth world to apply there yet I mentioned cookies um cookies are",
    "start": "2391800",
    "end": "2397440"
  },
  {
    "text": "also have the same problem they're beer tokens as well there are uh efforts going on by the browsers to actually",
    "start": "2397440",
    "end": "2404040"
  },
  {
    "text": "solve that at the browser layer as well um so I think the one that is kind of",
    "start": "2404040",
    "end": "2410520"
  },
  {
    "text": "coming out on top is Google's at this point deviceb session credentials um",
    "start": "2410520",
    "end": "2415599"
  },
  {
    "text": "it's in Chrome right now behind a flag if you turn it on and you can kind of prototype it but essentially it's the same concept of the browser has a key",
    "start": "2415599",
    "end": "2423119"
  },
  {
    "text": "and it is able to uh sign requests when it us when it makes requests that the",
    "start": "2423119",
    "end": "2428240"
  },
  {
    "text": "server can validate so that stolen cookies aren't possible to be used",
    "start": "2428240",
    "end": "2433440"
  },
  {
    "text": "anymore so we are coming up on the on the end of the session um couple of",
    "start": "2433440",
    "end": "2439280"
  },
  {
    "text": "really quick things to to point out that are kind of more of the future even",
    "start": "2439280",
    "end": "2444760"
  },
  {
    "start": "2440000",
    "end": "2590000"
  },
  {
    "text": "farther out uh work just to kind of get your get your interest um if you are",
    "start": "2444760",
    "end": "2450319"
  },
  {
    "text": "interested in in helping develop any of these these are all like open work items and a lot of the working groups that are",
    "start": "2450319",
    "end": "2455920"
  },
  {
    "text": "that are just out there you if you wanted to join um this whole idea of wallets weirdly has a lot of overlap",
    "start": "2455920",
    "end": "2462400"
  },
  {
    "text": "with ooth uh because it's it's again a similar thing of like you're getting a credential from somewhere and then using",
    "start": "2462400",
    "end": "2468319"
  },
  {
    "text": "it somewhere uh there's a lot of similarities with with oos flows but some pretty different fundamental",
    "start": "2468319",
    "end": "2474760"
  },
  {
    "text": "concepts as well um that work is kind of split in a few different places uh really interesting stuff another um big",
    "start": "2474760",
    "end": "2482440"
  },
  {
    "text": "problem is the uh client adastation problem so for usually we talk about",
    "start": "2482440",
    "end": "2487480"
  },
  {
    "text": "this in the context of mobile apps if you download a mobile app you can't ship a credential into it so how do you know",
    "start": "2487480",
    "end": "2492839"
  },
  {
    "text": "when your mobile app makes an API request or talking to the O Ser how do you know it's really your app it could be anybody so client adastation is the idea",
    "start": "2492839",
    "end": "2500640"
  },
  {
    "text": "of let's figure out a way for that mobile app to do something that can prove that it really is your app and not",
    "start": "2500640",
    "end": "2506880"
  },
  {
    "text": "somebody impersonating your app there's a lot of um interesting uses",
    "start": "2506880",
    "end": "2513119"
  },
  {
    "text": "of token chaining so if we look into an API it's often made up of a lot of other smaller subsystems and those often need",
    "start": "2513119",
    "end": "2520640"
  },
  {
    "text": "to do something more than just um passing the same access token along to",
    "start": "2520640",
    "end": "2526920"
  },
  {
    "text": "every layer of this chain so there's a lot of interesting um options available",
    "start": "2526920",
    "end": "2532160"
  },
  {
    "text": "for token exchanges or chaining or modifying tokens to be able to request things from Downstream apps without",
    "start": "2532160",
    "end": "2538640"
  },
  {
    "text": "having that same bare token be sent along the whole way through um there's there's some",
    "start": "2538640",
    "end": "2544400"
  },
  {
    "text": "interesting cross domain use cases of you need to get a from one server but then use it somewhere else so the sort",
    "start": "2544400",
    "end": "2551960"
  },
  {
    "text": "of typical patterns that we would see don't apply and um there's two drafts",
    "start": "2551960",
    "end": "2558240"
  },
  {
    "text": "right now that are in progress um for in the in the ooth group for for",
    "start": "2558240",
    "end": "2564000"
  },
  {
    "text": "this there's also some interesting revocation use cases of um especially",
    "start": "2564000",
    "end": "2569800"
  },
  {
    "text": "once you get into uh anything beyond just like the typical app to its own oo server but if that oo server actually",
    "start": "2569800",
    "end": "2576800"
  },
  {
    "text": "has log in with Enterprise identity providers how what how do you handle the case of that Enterprise IDP wanting to",
    "start": "2576800",
    "end": "2583440"
  },
  {
    "text": "deactivate users across every app in the Enterprise right um speaking of",
    "start": "2583440",
    "end": "2589440"
  },
  {
    "text": "Enterprises there's a lot of um there's a lot of work to be done here um",
    "start": "2589440",
    "end": "2596760"
  },
  {
    "start": "2590000",
    "end": "2759000"
  },
  {
    "text": "the open ID is is a common use in Enterprise for Enterprise SSO also samle",
    "start": "2596760",
    "end": "2603400"
  },
  {
    "text": "but if you look at what um actually happens in an Enterprise deployment of things you end up with an Enterprise IDP",
    "start": "2603400",
    "end": "2611079"
  },
  {
    "text": "actually integrating with a bunch of different applications and then it kind of turns into a mess of all these tokens",
    "start": "2611079",
    "end": "2617839"
  },
  {
    "text": "flying around all these different devices users logging in on three or four devices to the same applications",
    "start": "2617839",
    "end": "2623960"
  },
  {
    "text": "and what does it actually look like from the perspective of the app developers who are building these apps that get",
    "start": "2623960",
    "end": "2630160"
  },
  {
    "text": "Enterprise deals needing to actually make sure that they provide the right controls to the Enterprise idps so",
    "start": "2630160",
    "end": "2636040"
  },
  {
    "text": "there's a lot of work there to uh handle all the different parts of the",
    "start": "2636040",
    "end": "2641240"
  },
  {
    "text": "flow so one of the things that um I've been working on most recently is trying",
    "start": "2641240",
    "end": "2647359"
  },
  {
    "text": "to consolidate these use cases into a single um a single place where you can",
    "start": "2647359",
    "end": "2654160"
  },
  {
    "text": "actually go learn about how to make your app ready for Enterprise customers",
    "start": "2654160",
    "end": "2659240"
  },
  {
    "text": "handling before and during and after authentication a lot of what we talk about in oath and openconnect is really",
    "start": "2659240",
    "end": "2665760"
  },
  {
    "text": "just the sort of middle part of like the user logged in but how did they get the account set up in that SAS app before",
    "start": "2665760",
    "end": "2672559"
  },
  {
    "text": "how do they know how does that app know what the users allowed to do within that app the entitlements part of it um what",
    "start": "2672559",
    "end": "2679800"
  },
  {
    "text": "about after they log in just because they logged in once doesn't mean they should always have access from then going forward right so we need to handle",
    "start": "2679800",
    "end": "2687520"
  },
  {
    "text": "things like what happens if a user's device device is lost they should get logged out of apps on that device what",
    "start": "2687520",
    "end": "2693000"
  },
  {
    "text": "about when the user is leaves the company they to get deprovisioned from the the application so there's a lot of",
    "start": "2693000",
    "end": "2699319"
  },
  {
    "text": "those kinds of um concerns that are that go far beyond the uh just the open ID",
    "start": "2699319",
    "end": "2706160"
  },
  {
    "text": "connect part of it and uh just last week uh we have started a new working group",
    "start": "2706160",
    "end": "2712359"
  },
  {
    "text": "in the open ID foundation called Ipsy the long name is inter operability profile for secure identity in the",
    "start": "2712359",
    "end": "2718280"
  },
  {
    "text": "Enterprise but essentially it's a collection of all of these different specs that are used in Enterprise",
    "start": "2718280",
    "end": "2723440"
  },
  {
    "text": "deployments um open ID connect being the only one of them and uh I'm really excited to get to work",
    "start": "2723440",
    "end": "2729480"
  },
  {
    "text": "on this it's uh a lot of interesting interesting problems to solve and if you are building sass apps and you have",
    "start": "2729480",
    "end": "2735760"
  },
  {
    "text": "Enterprise customers you probably do care about this uh so feel free to uh go",
    "start": "2735760",
    "end": "2741599"
  },
  {
    "text": "to go to the website to learn more and and and join me in working on that um you can find this and a lot more",
    "start": "2741599",
    "end": "2748440"
  },
  {
    "text": "information on o.net I have uh I keep it up to date with extensions and libraries and things like that uh events that are",
    "start": "2748440",
    "end": "2755400"
  },
  {
    "text": "relevant to the community as well so feel free to uh check it out there and thank you all very much",
    "start": "2755400",
    "end": "2763920"
  }
]