[
  {
    "start": "0",
    "end": "139000"
  },
  {
    "text": "Hello, and welcome to the GOTO Book Club. Today,   we will talk about “Building Micro-Frontends” \nand I've invited Luca the author here.  ",
    "start": "65600",
    "end": "72320"
  },
  {
    "text": "Welcome to the show, Luca.\nAll right. Thank you for having me.  My name is Lucas Dohmen. I'm a senior consultant \nfrom INNOQ, and I'm also very interested in front  ",
    "start": "72320",
    "end": "82080"
  },
  {
    "text": "ends and how to build good architectures \nfor web applications, especially big ones.   Luca, maybe you can introduce yourself.\nSure. My name is Luca Mezzalira. I'm  ",
    "start": "82080",
    "end": "92880"
  },
  {
    "text": "Italian but based in London. I'm a principal \nsolution architect in AWS and in the last  ",
    "start": "92880",
    "end": "99840"
  },
  {
    "text": "seven years, I have explored the micro-frontends \ntopic quite extensively, not only writing a book  ",
    "start": "100880",
    "end": "109360"
  },
  {
    "text": "but also building multiple applications \nand helping customers to implement these  ",
    "start": "109360",
    "end": "117840"
  },
  {
    "text": "architecture patterns across different industries, \nseeing different challenges and figuring out how  ",
    "start": "117840",
    "end": "125200"
  },
  {
    "text": "to overcome them. So it was a very interesting \njourney so far. So I hope that will continue.",
    "start": "125200",
    "end": "130640"
  },
  {
    "text": "Awesome. Micro-frontends is already a word where \ndifferent people have different ideas of what it  ",
    "start": "131840",
    "end": "138000"
  },
  {
    "text": "means. But before we get into that, I would say \nlet's first look into the app shell thing again, I  ",
    "start": "138000",
    "end": "143440"
  },
  {
    "start": "139000",
    "end": "237000"
  },
  {
    "text": "think most people are not aware what exactly \nthat means. Can you explain what an app shell is?  Sure. So the application shell is the first \nthing in a fat client, as is called, or  ",
    "start": "143440",
    "end": "153840"
  },
  {
    "text": "rich client-side application that you usually \ndownload. So when you type your mysite.com,  ",
    "start": "153840",
    "end": "160800"
  },
  {
    "text": "the first thing that you download in that case \nis an application shell. Application shell is   unaware of the business domain, or it should be as \nmuch as possible, because that is a common part.  ",
    "start": "160800",
    "end": "172239"
  },
  {
    "text": "And what is responsible for is responsible \nfor loading the micro-frontends and routing  ",
    "start": "172240",
    "end": "181120"
  },
  {
    "text": "the URL basically on where the user wants to \ngo, and then load the right micro-frontends  ",
    "start": "181120",
    "end": "185760"
  },
  {
    "text": "associated with that. It's also responsible for \ndelinking, that usually comes for free out of  ",
    "start": "186480",
    "end": "193440"
  },
  {
    "text": "the box when we are implementing the application \nshell and is usually used either within horizontal  ",
    "start": "193440",
    "end": "199840"
  },
  {
    "text": "or vertical split. So the application shell, when \nwe do on the client side, we can decide to go with  ",
    "start": "199840",
    "end": "205760"
  },
  {
    "text": "horizontal or vertical or both, as we said before.\nThe interesting part is that the very light  ",
    "start": "205760",
    "end": "213920"
  },
  {
    "text": "implementation, there are several technologies \nthat you can handle that. In my humble opinion,  ",
    "start": "213920",
    "end": "219280"
  },
  {
    "text": "usually, if you are capable to keep that as \nframework-agnostic as possible, it opens up  ",
    "start": "219280",
    "end": "225520"
  },
  {
    "text": "also the possibility in the future to evolve \nthe micro-frontends without the coordination  ",
    "start": "225520",
    "end": "230320"
  },
  {
    "text": "of having the application shell that is \nholding you to experiment or try to use…",
    "start": "230960",
    "end": "236960"
  },
  {
    "text": "So let's dive into that topic as well. Because \nI think one thing that I've come across a lot  ",
    "start": "236960",
    "end": "242960"
  },
  {
    "start": "237000",
    "end": "906000"
  },
  {
    "text": "is the question, \"Can I use different \nframeworks for different parts of my   micro-frontend? Or should I use one...the same \none for every one, right? Like, should I use  ",
    "start": "242960",
    "end": "254640"
  },
  {
    "text": "Angular and React mixed, and some use an Angular \nand some React? Or should I always use React  ",
    "start": "254640",
    "end": "260799"
  },
  {
    "text": "for all of them?\" Right? Not looking at \nAngular or React right now. Right? But  ",
    "start": "260800",
    "end": "264800"
  },
  {
    "text": "where do you see both in the vertical and \nin the horizontal split with app shell,  ",
    "start": "265840",
    "end": "271120"
  },
  {
    "text": "how do you see how you can handle that?\nI think not only for... Despite the  ",
    "start": "271120",
    "end": "277280"
  },
  {
    "text": "architectural pattern that you're going \nto take on micro-frontends, I would say   that is a misconception that was raised \nby the community for several years by now.  ",
    "start": "277280",
    "end": "288560"
  },
  {
    "text": "And the challenge I see, and usually is this \nexample that I made. So imagine that you have  ",
    "start": "289120",
    "end": "294639"
  },
  {
    "text": "a single-page application. Technically \nspeaking, you can mix React and Angular.  ",
    "start": "294640",
    "end": "300080"
  },
  {
    "text": "And I remember back in the days when React came \nout, there were some experiments on that using  ",
    "start": "300080",
    "end": "306400"
  },
  {
    "text": "the React library as UI and the rest of Angular \nframework for the management of the...state  ",
    "start": "307360",
    "end": "316080"
  },
  {
    "text": "management and the rest of the application.\nNow, despite you can, it doesn't mean that  ",
    "start": "316080",
    "end": "322639"
  },
  {
    "text": "you have to. Therefore, in my opinion, there are \ncertain situation where having multiple frameworks  ",
    "start": "322640",
    "end": "329520"
  },
  {
    "text": "might help with micro-frontends. So \nwhen you are migrating, for instance,   from a legacy application to a new one, \nor if you are migrating an application  ",
    "start": "329520",
    "end": "337840"
  },
  {
    "text": "from an older version of the framework to a new \none, what you want to do, instead of going stealth  ",
    "start": "338400",
    "end": "344160"
  },
  {
    "text": "mode for a month and then deliver something in \nfront of your customer is taking a vertical of  ",
    "start": "344160",
    "end": "349280"
  },
  {
    "text": "your application and start to iterate on that. \nDeploying production alongside the previous  ",
    "start": "349280",
    "end": "354720"
  },
  {
    "text": "application and start to generate value for the \nusers because we are going back to the real scope  ",
    "start": "354720",
    "end": "360240"
  },
  {
    "text": "why we are developing code. And that's where I can \nsee for a certain period of time, because I know  ",
    "start": "360240",
    "end": "367280"
  },
  {
    "text": "that is a migration, a mix and match of framework.\nAnd another option could be when you are acquiring  ",
    "start": "367280",
    "end": "376639"
  },
  {
    "text": "your company. So if your company's acquiring \nanother one, and you want to immediately see the  ",
    "start": "376640",
    "end": "381920"
  },
  {
    "text": "value of your investment inside your, let's say, \nbrand, inside your umbrella, you can do that. And  ",
    "start": "381920",
    "end": "389600"
  },
  {
    "text": "you can easily have another, let's say, technology \nthat is developed by the other company that is  ",
    "start": "389600",
    "end": "394960"
  },
  {
    "text": "living alongside your application. That is another \nsituation. Overall, I discourage this practice  ",
    "start": "394960",
    "end": "401440"
  },
  {
    "text": "unless there are strong, let's say, reasoning \nbehind that. Because, obviously, is going to have   an impact on your users. And at the end of the \nday, we know that for certain type of workloads,  ",
    "start": "401440",
    "end": "413280"
  },
  {
    "text": "think about, for instance, e-commerce, the first \ntime byte is quite important because it could,  ",
    "start": "413280",
    "end": "422880"
  },
  {
    "text": "let's say, generate more revenue or not. And \nI know that sometimes it could seem silly,  ",
    "start": "423680",
    "end": "430479"
  },
  {
    "text": "what I'm saying, that one second could generate \nmillions in revenue. But in reality, we have  ",
    "start": "430480",
    "end": "436160"
  },
  {
    "text": "quite a lot of companies that prove that that is \ntrue. And therefore, it's very important that we  ",
    "start": "436160",
    "end": "442320"
  },
  {
    "text": "optimize our application, despite the architecture \nwe're using, without penalizing our... ",
    "start": "442320",
    "end": "448560"
  },
  {
    "text": "No, I agree. Like, we should not go to a \nmulti-framework solution, right, because we   are downloading way too much data. And it will \nalso be complicated for things like server-side  ",
    "start": "450320",
    "end": "459680"
  },
  {
    "text": "pre-rendering and stuff like that. I think that \na lot of people that are doing architectures for  ",
    "start": "459680",
    "end": "465199"
  },
  {
    "text": "the front end are paying not enough attention to \nthe fact that you already mentioned of migrations,  ",
    "start": "465200",
    "end": "472080"
  },
  {
    "text": "right? If we are going into a situation where we \nneed to do a framework update that is a breaking  ",
    "start": "472080",
    "end": "477840"
  },
  {
    "text": "change, for example, and we are forced \nto do it across our entire application,   then we are paying all the costs that we have \nfor a monolith, right? Because then we need to  ",
    "start": "477840",
    "end": "487919"
  },
  {
    "text": "update all at once. And that might be costly.\nAnd the same goes for like if you remember   something like BackboneJS, that was the first \nframework I built a single-page application with,  ",
    "start": "487920",
    "end": "496720"
  },
  {
    "text": "nobody would use it today, I would say, right? \nAnd sometimes those frameworks go out of style.  ",
    "start": "496720",
    "end": "502080"
  },
  {
    "text": "And we cannot say which one will maybe be end of \nlife by the people behind it. Right? It's not very  ",
    "start": "502080",
    "end": "509919"
  },
  {
    "text": "likely that React and Angular will just disappear, \nright? Because there are so many applications   written in it. But we should at least, like, \nkeep it in the back of our minds that this  ",
    "start": "511360",
    "end": "520400"
  },
  {
    "text": "might happen. And that we have a strategy, if that \noccurs. And especially for the framework updates,  ",
    "start": "520400",
    "end": "526160"
  },
  {
    "text": "the breaking changes will be something you \nshould pay attention to, in my opinion.  Yeah, I fully agree. And also, because \noften we need to think about if,  ",
    "start": "526160",
    "end": "536000"
  },
  {
    "text": "technically, architects and developers are more \nkeen to work with modularity, the business studies  ",
    "start": "536000",
    "end": "542400"
  },
  {
    "text": "wants to work with agility. So they want to drift \nthe direction in the way that they want. And if we  ",
    "start": "544000",
    "end": "549360"
  },
  {
    "text": "link agility with modularity, basically, you \nhave exactly what we are talking about here.   So you have the possibility to take the drift \nof the organization towards your architecture,  ",
    "start": "549360",
    "end": "559120"
  },
  {
    "text": "and therefore your code, and shift the way how \nyou're working today for having a better future  ",
    "start": "559120",
    "end": "564880"
  },
  {
    "text": "tomorrow. That is, let's say, probably the key \nthing that an architect should do, try to map  ",
    "start": "564880",
    "end": "572160"
  },
  {
    "text": "the business characteristics towards \nwhat we're trying to build. But yeah,   I agree with you in your mindset...\nAnd so, what other integration methods or  ",
    "start": "572160",
    "end": "583040"
  },
  {
    "text": "app shell would be one integration method, right? \nOne other thing you brought up on the client-side   horizontal split were the Module Federation, which \nis a feature from webpack. Can you explain what  ",
    "start": "583040",
    "end": "594560"
  },
  {
    "text": "it does on a high level, right, not on a code \nlevel, because it's always a bit bad on format  ",
    "start": "594560",
    "end": "600720"
  },
  {
    "text": "like this one, what it means and what it does?\nIndeed. Yeah, sure. So Module Federation is an  ",
    "start": "600720",
    "end": "606000"
  },
  {
    "text": "official webpack plugin that is available from \nwebpack 5. The interesting part that it does is  ",
    "start": "606000",
    "end": "615760"
  },
  {
    "text": "not mainly for micro-frontends. The idea behind \nModule Federation is the fact that is a transport  ",
    "start": "615760",
    "end": "623040"
  },
  {
    "text": "layer for bundles. And that opens up quite a lot \nof opportunities, not only on the client side,  ",
    "start": "623040",
    "end": "630720"
  },
  {
    "text": "but also if you think about cloud or server side, \nyou can still use Module Federation, no problems.  ",
    "start": "630720",
    "end": "635680"
  },
  {
    "text": "The interesting bit for micro-frontends is that \nif I talk about the transport layer for bundles,  ",
    "start": "636320",
    "end": "642880"
  },
  {
    "text": "the bundles could be an independent piece \nof code. And therefore, it reside very well   with also micro-frontends. And that means \npotentially, I can use Module Federation for  ",
    "start": "642880",
    "end": "652320"
  },
  {
    "text": "composing my micro-frontends. Because what \nit does is exactly this. I take a bundle  ",
    "start": "652320",
    "end": "657360"
  },
  {
    "text": "that is independent, and I, let's say, \nload inside another application. That is  ",
    "start": "657360",
    "end": "663760"
  },
  {
    "text": "exactly what we want to do with micro-frontends.\nThe other great thing that Module Federation does,  ",
    "start": "663760",
    "end": "669600"
  },
  {
    "text": "is taking care of all the dependencies. So one of \nthe challenge you have when you deal with, let's  ",
    "start": "670480",
    "end": "677279"
  },
  {
    "text": "say, your own implementation of micro-frontends is \nhow I can make sure that everyone is using React  ",
    "start": "677280",
    "end": "684720"
  },
  {
    "text": "15 or React 16, or the same version of a framework \nor library whatever. Module Federation obstructs  ",
    "start": "684720",
    "end": "691680"
  },
  {
    "text": "that for you, but goes even, let's say, \nfurther, providing you the possibility to,  ",
    "start": "691680",
    "end": "697920"
  },
  {
    "text": "let's say, create a scope around the same library \nwith different versions. So if a team wants  ",
    "start": "699360",
    "end": "705279"
  },
  {
    "text": "to use, I don't know, MomentJS with an older \nversion, compare the rest of the application,  ",
    "start": "705280",
    "end": "711120"
  },
  {
    "text": "they can do that without crashing because \nthe scope is different. And that is another  ",
    "start": "711120",
    "end": "716160"
  },
  {
    "text": "great functionality of Module Federation.\nI think the interesting bit is very foundational  ",
    "start": "716160",
    "end": "723920"
  },
  {
    "text": "is going to a level where yes, you are tight with \nwebpack 5, there is a version for webpack 4 that  ",
    "start": "724480",
    "end": "731600"
  },
  {
    "text": "doesn't have the full fledge of features that \nI described. There is another one on esbuild  ",
    "start": "731600",
    "end": "737279"
  },
  {
    "text": "that I know that is about to be built or in \nprogress. And there are other open-source  ",
    "start": "737280",
    "end": "746240"
  },
  {
    "text": "frameworks that are doing something similar \nwithout using webpack. But the overall idea  ",
    "start": "746240",
    "end": "751360"
  },
  {
    "text": "of creating a way that abstract the loading of \na specific module or a specific bundle is pretty  ",
    "start": "751360",
    "end": "759600"
  },
  {
    "text": "good. Because the other thing we often forgot \nto say about Module Federation is because it's   a webpack plugin, we can mix and match with the \nrest of the plugins available in the ecosystem.  ",
    "start": "759600",
    "end": "769680"
  },
  {
    "text": "Therefore, if instead if Module Federation \ngenerate too many chunks of your JavaScript,  ",
    "start": "769680",
    "end": "775600"
  },
  {
    "text": "you can configure it in a way that instead you \nhave just, let's say, one chunk or smaller chunk,  ",
    "start": "775600",
    "end": "783680"
  },
  {
    "text": "or you want to set a certain budget per chunk, \nevery chunk has to be at least 15 kilobytes,  ",
    "start": "783680",
    "end": "788960"
  },
  {
    "text": "stuff like that. So you have a great flexibility \nand is solving quite peculiar problem of... ",
    "start": "788960",
    "end": "796160"
  },
  {
    "text": "But doesn't mean that the built of those different \nsubsystems or different micro-frontends are  ",
    "start": "797680",
    "end": "804160"
  },
  {
    "text": "bound to each other, or are they still like \nindependently buildable? So can I just build  ",
    "start": "804160",
    "end": "808560"
  },
  {
    "text": "the component that does the product view, \nfor example? Or is that not possible anymore?  It's totally possible. Because the whole point \nof Module Federation is moving away from the  ",
    "start": "809280",
    "end": "819040"
  },
  {
    "text": "concept I need to centralize the build of my \nelements. I can use Module Federation. There  ",
    "start": "819040",
    "end": "826079"
  },
  {
    "text": "are two concepts that are key, the host, that \nis the container of, let's say, another bundle,  ",
    "start": "826080",
    "end": "831920"
  },
  {
    "text": "and the remote that is what is loaded inside the \nhost. The beauty of this approach is that you can  ",
    "start": "831920",
    "end": "838320"
  },
  {
    "text": "create multiple application completely independent \nthat are living inside their own work, and then  ",
    "start": "838320",
    "end": "844480"
  },
  {
    "text": "load them together at runtime. And all the loading \npart is handled by Module Federation. So you just  ",
    "start": "846560",
    "end": "852240"
  },
  {
    "text": "need to deploy, for instance, let's assume that \nyou're using an S3 bucket with a CloudFront   distribution in front of it, you deploy your \nmicro-frontends tens of times per day in S3, and  ",
    "start": "852240",
    "end": "863040"
  },
  {
    "text": "every time that application shell is loading, this \ngo with Module Federation, is going to go to the  ",
    "start": "863040",
    "end": "868720"
  },
  {
    "text": "latest Federation of your micro-frontend. The \nbeauty of this is you're completely independent   despite you're using webpack that I know \nsometimes we think always all we be centralized... ",
    "start": "868720",
    "end": "878720"
  },
  {
    "text": "All we need to align on is the build \ntool that we are using. Right? So we   are bound to the same version of webpack for \nall micro-frontends, right? Yes. Okay. And not  ",
    "start": "881520",
    "end": "892960"
  },
  {
    "text": "webpack 5.110 or something, right? Okay, cool.\nNo, no, it's just webpack 5. It should be retro  ",
    "start": "892960",
    "end": "898800"
  },
  {
    "text": "compatible. I didn't try that, but I never...to \nbe honest, I never heard anything like that.",
    "start": "898800",
    "end": "904240"
  },
  {
    "text": "Okay. So the second approach that you outlined in \nthe book is using iframes for a horizontal split.  ",
    "start": "904240",
    "end": "911440"
  },
  {
    "start": "906000",
    "end": "1435000"
  },
  {
    "text": "So I think a lot of people when they hear iframes, \nthey think this is like an outdated technology  ",
    "start": "911440",
    "end": "916480"
  },
  {
    "text": "that nobody uses today. What's your take on that?\nI agree in certain contexts. In others is solving  ",
    "start": "916480",
    "end": "922399"
  },
  {
    "text": "quite a few problems. So iframes, yes, true are \nnot new, but are the safest option that we have  ",
    "start": "922400",
    "end": "928720"
  },
  {
    "text": "to create strong boundaries and have better \ncontrol for our code. So if, for instance, you  ",
    "start": "928720",
    "end": "935519"
  },
  {
    "text": "acquire a company and the code that maybe is \nold jQuery with other things that you want to  ",
    "start": "936640",
    "end": "943520"
  },
  {
    "text": "put inside your brand new micro-frontends \napplication, but you don't want to have the   headache to go through the code and build or \nanything, you take the build that is available  ",
    "start": "943520",
    "end": "953120"
  },
  {
    "text": "currently in the application, you move in your \nserver, and you use an iframe to basically protect  ",
    "start": "953120",
    "end": "958720"
  },
  {
    "text": "the rest of your application. That is a nice way.\nThere is a micro-frontends framework called Luigi  ",
    "start": "958720",
    "end": "965199"
  },
  {
    "text": "framework that was created by SAP that is using \niframes for isolating the different contexts. And  ",
    "start": "965200",
    "end": "971520"
  },
  {
    "text": "usually, what they do is using this iframe, there \nare not many per view, there are three or four.  ",
    "start": "971520",
    "end": "979200"
  },
  {
    "text": "And they're using that because they are sure \nthat who is developing the code is not going   to clash with the rest. And they provide a \nset of facilities in this Luigi framework  ",
    "start": "980480",
    "end": "989280"
  },
  {
    "text": "for the communication part, retrieving the \nauthentication on SAP and stuff like that. The  ",
    "start": "989280",
    "end": "994720"
  },
  {
    "text": "other option that I've seen iframes very useful is \non the security side. Because there are certain,  ",
    "start": "994720",
    "end": "1001040"
  },
  {
    "text": "let's say, industries that require strong set \nof securities. And with iframe, you can fulfill  ",
    "start": "1001600",
    "end": "1007519"
  },
  {
    "text": "them very easily. And therefore, I agree there are \nseveral drawbacks on iframe. They're quite heavy  ",
    "start": "1007520",
    "end": "1014400"
  },
  {
    "text": "and so on and so forth, but there are situations \nwhere iframes can be a valuable option. ",
    "start": "1014400",
    "end": "1019600"
  },
  {
    "text": "The other thing is currently, the TC39 is \nexploring a proposal that's called ShadowRealms.  ",
    "start": "1019600",
    "end": "1026400"
  },
  {
    "text": "They changed the name recently. And the \nidea is basically having a glorified iframe,   but without all the burden and the problems that \nwe have with the iframe. So you don't have to  ",
    "start": "1027040",
    "end": "1036000"
  },
  {
    "text": "have the full structure of the wind \nof the object and so on. But you have,   like, a light iframe with all the benefits of...\nI've never seen anyone use iframes to integrate  ",
    "start": "1036560",
    "end": "1048880"
  },
  {
    "text": "within one company. Right? But I think, \nespecially using it between companies,   if you are integrating something from a different \ncompany, then iframes are a very good solution. I  ",
    "start": "1048880",
    "end": "1058720"
  },
  {
    "text": "think a good example for that is Google Maps that \neveryone uses iframes to integrate Google Maps,  ",
    "start": "1058720",
    "end": "1066240"
  },
  {
    "text": "right? They don't realize it because they put in \na script source. But it's a good way to really,  ",
    "start": "1066240",
    "end": "1071679"
  },
  {
    "text": "for security reasons, split out this application, \nand don't give it access to the entire  ",
    "start": "1071680",
    "end": "1077120"
  },
  {
    "text": "DOM that you have. Right? But I would say \nit's rather an intuitive way to integrate  ",
    "start": "1077760",
    "end": "1083520"
  },
  {
    "text": "within your company where you have \nhigher levels of trust, I would say.  Yes, it's true. But very often, in \nlarge organizations, I've seen used  ",
    "start": "1083520",
    "end": "1091120"
  },
  {
    "text": "iframes despite there are now these \nother options for security reasons.  So one other thing are web components. And I think \nthis is also one of those words where people are  ",
    "start": "1091120",
    "end": "1101759"
  },
  {
    "text": "not entirely sure what it means. So can you \nexplain what the pillars of web components are? ",
    "start": "1101760",
    "end": "1106720"
  },
  {
    "text": "Yeah. Web components are an API standard \nthat is available for developers to create  ",
    "start": "1107280",
    "end": "1114320"
  },
  {
    "text": "components that are compatible with nowadays \nvast majority...all the browser's, if not,  ",
    "start": "1114320",
    "end": "1120399"
  },
  {
    "text": "majority of them, and is providing some \nutilities like custom components and  ",
    "start": "1120400",
    "end": "1128080"
  },
  {
    "text": "Shadow DOM. And those two things are quite key \nfor micro-frontend. So the custom component is  ",
    "start": "1130960",
    "end": "1136880"
  },
  {
    "text": "possibility to create your own components that \ncontains your code. And the interesting bit,  ",
    "start": "1136880",
    "end": "1143760"
  },
  {
    "text": "you can have in Light DOM or in Shadow \nDOM, depends which path you're going to   take. And the main difference is the Shadow \nDOM basically is completely decoupled from  ",
    "start": "1143760",
    "end": "1153120"
  },
  {
    "text": "the main DOM element. And that means, \nbasically, that you can, for instance, have  ",
    "start": "1153120",
    "end": "1159360"
  },
  {
    "text": "also some duplication on, classic example, CSS \nstyle. They are not going to override the one  ",
    "start": "1159360",
    "end": "1166160"
  },
  {
    "text": "that are available or be overridden by what the \napplication is using. The Shadow DOM is basically  ",
    "start": "1166160",
    "end": "1173600"
  },
  {
    "text": "like a nice black box that is \npreventing that someone can access it. ",
    "start": "1173600",
    "end": "1180559"
  },
  {
    "text": "I think the interesting part of web components \nis that nowadays, if you're using them...they  ",
    "start": "1182320",
    "end": "1187039"
  },
  {
    "text": "are compatible with any framework. So if you're \ndoing an effort for building some elements with  ",
    "start": "1188560",
    "end": "1194240"
  },
  {
    "text": "web components, then you know that if \ntoday's React and tomorrow will be VueJS,   you will be able to reuse that part of the \ncode. That is great. In fact, also in my book,  ",
    "start": "1195120",
    "end": "1207200"
  },
  {
    "text": "I warmly recommend then if it's possible to use \nthem for creating design systems. Because that  ",
    "start": "1207200",
    "end": "1214159"
  },
  {
    "text": "basically will allow you to reuse portion of your \ncode and your application despite the underlying  ",
    "start": "1214160",
    "end": "1222080"
  },
  {
    "text": "UI framework could change. That for me, in my \nhead, creates also this concept of evolutionary  ",
    "start": "1224080",
    "end": "1230720"
  },
  {
    "text": "architecture the web components can provide.\nThe only challenge I have seen so far with web  ",
    "start": "1230720",
    "end": "1237039"
  },
  {
    "text": "components for micro-frontends is that often \ndevelopers are overlapping this concept of  ",
    "start": "1237040",
    "end": "1243200"
  },
  {
    "text": "components and micro-frontend. And that is a risk \nbecause sometimes you might hear people saying,  ",
    "start": "1243200",
    "end": "1251039"
  },
  {
    "text": "\"Oh, yes, we are using micro-frontends. \nAnd we have a gazillion of micro-frontends  ",
    "start": "1251040",
    "end": "1256480"
  },
  {
    "text": "in the same view.\" But in reality, they're \nusing components. And a rule of thumb that I  ",
    "start": "1257200",
    "end": "1262159"
  },
  {
    "text": "try to rationalize lately probably was towards \nthe end of the book, I was trying to figure out  ",
    "start": "1263520",
    "end": "1270640"
  },
  {
    "text": "how I can explain easily the difference between \ncomponents and micro-frontends. And the idea is,  ",
    "start": "1270640",
    "end": "1277360"
  },
  {
    "text": "I think the key here is the extensibility \nfactor. If you think about the component,  ",
    "start": "1277360",
    "end": "1282880"
  },
  {
    "text": "usually the container is providing some context \nfor the component to behave. In that case,  ",
    "start": "1282880",
    "end": "1290160"
  },
  {
    "text": "you pass maybe, I don't know, the labels, the \nlocalization, the type of behavior you expect  ",
    "start": "1290160",
    "end": "1295600"
  },
  {
    "text": "from the component, and so on, so forth.\nIn the micro-frontend, you define the   input and output. Worst-case scenario, \nyou can inject an event emitter or,  ",
    "start": "1295600",
    "end": "1304320"
  },
  {
    "text": "let's say, somebody that's very, let's say, not \ndomain related, but the micro-frontends own his  ",
    "start": "1304320",
    "end": "1310159"
  },
  {
    "text": "narrative. He knows how to build, he knows \nhow to render, he knows everything that...how  ",
    "start": "1310160",
    "end": "1314720"
  },
  {
    "text": "to behave. But it doesn't have to be instruct \nfrom the container. Therefore, there is no leak  ",
    "start": "1315520",
    "end": "1321680"
  },
  {
    "text": "of domain outside the micro-frontend. And that is, \nfor me, the key difference for understanding if   you're dealing with components or micro-frontend.\nBut you already mentioned the problem with CSS,  ",
    "start": "1322320",
    "end": "1333360"
  },
  {
    "text": "right? So if I take a solution with \nclient-side approach with an app shell,  ",
    "start": "1333360",
    "end": "1339040"
  },
  {
    "text": "then I might have collisions in CSS class \nnames, for example. So one approach would be  ",
    "start": "1339040",
    "end": "1344240"
  },
  {
    "text": "to use Shadow DOM, as you already outlined. Are \nthere any other approaches that we can use for,  ",
    "start": "1344240",
    "end": "1349440"
  },
  {
    "text": "yeah, getting out of trouble there?\nYeah. Another idea that is, let's say,  ",
    "start": "1350400",
    "end": "1356560"
  },
  {
    "text": "quite simple to implement, despite if you're \nusing web components or not, is using graphics.  ",
    "start": "1356560",
    "end": "1361360"
  },
  {
    "text": "So if you divide the work that you're doing in \nmultiple teams, every team might have a name  ",
    "start": "1361920",
    "end": "1368720"
  },
  {
    "text": "or a domain that are representing. So if they \nprepend the class name that they want to use  ",
    "start": "1368720",
    "end": "1376400"
  },
  {
    "text": "with their own unique name, they can then \nhave uniqueness on their class names,  ",
    "start": "1376960",
    "end": "1383120"
  },
  {
    "text": "the reason that there would be a clash.\nAnd that is usually one thing, for instance,  ",
    "start": "1383120",
    "end": "1389360"
  },
  {
    "text": "I was using material UI for a demo and I was using \nmicro-frontends, and I have to make sure that they  ",
    "start": "1389360",
    "end": "1396559"
  },
  {
    "text": "didn't clash together because it was material UI \nacross the entire application but with different  ",
    "start": "1396560",
    "end": "1402160"
  },
  {
    "text": "parameter and everything. So I don't want the same \nstyle or class name that was rendering one way  ",
    "start": "1402160",
    "end": "1409040"
  },
  {
    "text": "in one part of the application could clash \nwith another one. Therefore, in that case,   using prefixes, I was able to decouple, basically, \nthe two styles. And despite I might have a  ",
    "start": "1409680",
    "end": "1422640"
  },
  {
    "text": "style that by default would clash together in \nthe application shell, they weren't clashing in  ",
    "start": "1423360",
    "end": "1428480"
  },
  {
    "text": "reality because there was a prefix that was, \nlet's say, creating uniqueness to all those.",
    "start": "1429120",
    "end": "1433840"
  },
  {
    "text": "One thing I wondered when I read the book, and \nalso I wondered again now is how do you handle  ",
    "start": "1434720",
    "end": "1440480"
  },
  {
    "start": "1435000",
    "end": "1674000"
  },
  {
    "text": "things like pattern library? So if I want to do \nsomething like shared style data between all the  ",
    "start": "1440480",
    "end": "1445840"
  },
  {
    "text": "applications, right, they have, like, a certain \namount of code...a certain amount of styling that   is shared between everyone and a certain amount \nthat is, like, very specific to one part of the  ",
    "start": "1446880",
    "end": "1456799"
  },
  {
    "text": "application. Right? So how do you handle that \nboth in Shadow DOM and in something like BEM   that you just mentioned? How do you do that?\nYes. So usually, in Shadow DOM, you have less  ",
    "start": "1456800",
    "end": "1467360"
  },
  {
    "text": "problems because are encapsulated. So in that \ncase, you can take your own decisions and every  ",
    "start": "1467360",
    "end": "1473440"
  },
  {
    "text": "component won't clash with each other because it's \nnot even in the same, if you want, scope of the  ",
    "start": "1474400",
    "end": "1480160"
  },
  {
    "text": "application. In the other side, I think with BEM \nis the prefixes that allows you...BEM basically  ",
    "start": "1480160",
    "end": "1487360"
  },
  {
    "text": "provide you a more granular way to describe \nthe element that you're styling, and going more  ",
    "start": "1487360",
    "end": "1493679"
  },
  {
    "text": "up to a certain granularity that makes it more \ndifficult to have, let's say, redundancy on names.  ",
    "start": "1494400",
    "end": "1500880"
  },
  {
    "text": "But if that happens, the graphics strategy, it \nhelps a lot. Because then at the end of the day,  ",
    "start": "1500880",
    "end": "1507040"
  },
  {
    "text": "if you're using the same button but with \ndifferent, I'm gonna say, styles or parameter  ",
    "start": "1507040",
    "end": "1512720"
  },
  {
    "text": "that you want to use, you can do that without any \nclash. Because you are going to basically create,  ",
    "start": "1513360",
    "end": "1519920"
  },
  {
    "text": "let's say, your way to handle one thing. And \nthen you can supplement, as you described before,  ",
    "start": "1520720",
    "end": "1525440"
  },
  {
    "text": "with your own style for that specific portion of \nthe application that require different styles. So  ",
    "start": "1526000",
    "end": "1531120"
  },
  {
    "text": "you can really do mix and match with just...\nSo maybe this is a bit too deep into the  ",
    "start": "1531120",
    "end": "1539040"
  },
  {
    "text": "technical part. But if I imagine that you \nhave a page that consists of the app shell,   and then three sub-parts that are split, right, \nthat are different parts of the application.  ",
    "start": "1539040",
    "end": "1550080"
  },
  {
    "text": "And each of them has its own Shadow DOM. So \ndo you include, like, the basic styling as one  ",
    "start": "1550720",
    "end": "1557039"
  },
  {
    "text": "CSS file in each of the Shadow DOMs and the \napp shell, and then add specific styling to  ",
    "start": "1557040",
    "end": "1562960"
  },
  {
    "text": "the sub-parts? Or how do you do that in practice?\nUsually, so if you go in the part that you include  ",
    "start": "1562960",
    "end": "1570799"
  },
  {
    "text": "older base elements, obviously, it's going to, \nlet's say, have more kilobytes download for the  ",
    "start": "1570800",
    "end": "1578800"
  },
  {
    "text": "users, but you guarantee that are completely \nindependent. So potentially, if tomorrow  ",
    "start": "1578800",
    "end": "1583840"
  },
  {
    "text": "one of the team is using an older version of the \nstyles that you will still provide, let's say,  ",
    "start": "1584720",
    "end": "1592720"
  },
  {
    "text": "an independent element that can be updated at \nsome point. The moment that you start to share  ",
    "start": "1592720",
    "end": "1598159"
  },
  {
    "text": "anything, style, code, whatever across those three \nindependent parts, then you have a risk that there  ",
    "start": "1598160",
    "end": "1603360"
  },
  {
    "text": "is a runtime error that you didn't pick up in \nyour environment or in that environment because  ",
    "start": "1603360",
    "end": "1608640"
  },
  {
    "text": "it potentially could be different. So ideally, \nyou need to understand if that is the, let's say,  ",
    "start": "1608640",
    "end": "1614960"
  },
  {
    "text": "trade off that you want to take, or if you create \nmore...you spend more energy and more effort for  ",
    "start": "1614960",
    "end": "1622000"
  },
  {
    "text": "making sure that everything's still there on time, \nit's not going to be locking from the customer. ",
    "start": "1622000",
    "end": "1626240"
  },
  {
    "text": "Okay, good.\nIt's up to you to decide   where you want to spend your effort. It could be \na simple, say, okay, I have a bit of duplication,  ",
    "start": "1627520",
    "end": "1634000"
  },
  {
    "text": "is 10 kilobyte more. That's not the end \nof the world. Or no, that 10 kilobyte I  ",
    "start": "1634000",
    "end": "1639280"
  },
  {
    "text": "really need them. And therefore, I need \nto find a way to optimize my pipeline to  ",
    "start": "1639280",
    "end": "1644480"
  },
  {
    "text": "make sure that I'm not going to create issues...\nVery good. So one thing that we did in one project  ",
    "start": "1644480",
    "end": "1649840"
  },
  {
    "text": "was that the base style was available versioned \nat a URL, and you could use it in the different  ",
    "start": "1649840",
    "end": "1655440"
  },
  {
    "text": "parts of the application. And then you can take \nadvantage of caching, right? So at least if  ",
    "start": "1655440",
    "end": "1661600"
  },
  {
    "text": "everyone is on the same version at that point \nin time, you only download it once, right?   But yeah, that's also an approach where you can \nmaybe find, like, a middle ground between those  ",
    "start": "1661600",
    "end": "1671440"
  },
  {
    "text": "two approaches. Cool.\nOh, yeah. Of course. So talking about the server-side part, I think \none of the things that a lot of people have  ",
    "start": "1671440",
    "end": "1678799"
  },
  {
    "start": "1674000",
    "end": "1911000"
  },
  {
    "text": "never heard about is SSI and ESI, and maybe some \npeople heard about SSI, like, a lot of years ago.  ",
    "start": "1678800",
    "end": "1685520"
  },
  {
    "text": "Can you first explain what ESI and SSI are?\nYeah. So SSI and the ESI are server-side  ",
    "start": "1685520",
    "end": "1692560"
  },
  {
    "text": "include and edge-side include, those are \na markup language that basically are using  ",
    "start": "1692560",
    "end": "1698400"
  },
  {
    "text": "a mechanism called transclusion. Transclusion, \nbasically, is an algorithm. What it does is very  ",
    "start": "1699040",
    "end": "1704960"
  },
  {
    "text": "simple. You have a placeholder element that when \nis parsed by the engine is going to be replaced by  ",
    "start": "1704960",
    "end": "1711039"
  },
  {
    "text": "more concrete elements. For instance, imagine \nthat you have, I don't know, a cart element  ",
    "start": "1711760",
    "end": "1717520"
  },
  {
    "text": "that you are describing with that placeholder. \nAnd then when the engine is going to parse that  ",
    "start": "1718160",
    "end": "1724960"
  },
  {
    "text": "markup element is going to replace that \nwith a div element, maybe, I don't know,  ",
    "start": "1725760",
    "end": "1731360"
  },
  {
    "text": "a image that represent the icon and some \nthings. That is basically what it means. ",
    "start": "1731360",
    "end": "1736960"
  },
  {
    "text": "Those are running either edge-side include on the \nCDN level, or server-side include on the server  ",
    "start": "1737920",
    "end": "1743920"
  },
  {
    "text": "level. And I think server-side include is quite \nold technology. So it's not nothing revolutionary  ",
    "start": "1743920",
    "end": "1753440"
  },
  {
    "text": "but allows you to work at the server side and \ncompose multiple elements because there are  ",
    "start": "1753440",
    "end": "1759679"
  },
  {
    "text": "servers like NGINX, for instance, that \nare allowing you to use this technique for  ",
    "start": "1760560",
    "end": "1767200"
  },
  {
    "text": "composing your page and provide a final output \nfor the user. On edge-side site include is that  ",
    "start": "1767200",
    "end": "1773039"
  },
  {
    "text": "is a markup language that was created back in the \ndays by Akamai and Oracle and few other companies,  ",
    "start": "1773040",
    "end": "1778240"
  },
  {
    "text": "that is available in certain CDN providers, and \nnot all of them. And the other problem is the ones  ",
    "start": "1779600",
    "end": "1787679"
  },
  {
    "text": "that are supporting ESI sometimes are not even \nsupporting the full implementation. Therefore,  ",
    "start": "1787680",
    "end": "1796480"
  },
  {
    "text": "if you think about [inaudible 00:48:09] strategy \nprobably is not feasible. Or if you're thinking to  ",
    "start": "1796480",
    "end": "1802000"
  },
  {
    "text": "migrate from one CDN that has the full fledge \nof specification implement it to another one,  ",
    "start": "1802000",
    "end": "1809920"
  },
  {
    "text": "you might think twice because you \ndon't know if everything is supported.  The other problem of ESI more than SSI \nis the developer experience. That I think  ",
    "start": "1809920",
    "end": "1821520"
  },
  {
    "text": "is quite important. In ESI, there aren't \nmany companies that are providing a smooth  ",
    "start": "1821520",
    "end": "1826640"
  },
  {
    "text": "developer experience. So you need to test \nagainst your CDN. Akamai, for instance,  ",
    "start": "1826640",
    "end": "1834000"
  },
  {
    "text": "is providing a Docker container that basically \nallows you to test on your laptop how...sort of  ",
    "start": "1834000",
    "end": "1842400"
  },
  {
    "text": "how the CDN node in Akamai would render your \napplication, but it's the only company currently  ",
    "start": "1843200",
    "end": "1848720"
  },
  {
    "text": "that I am aware that is doing something like that. \nUsually these techniques I have seen use where you  ",
    "start": "1848720",
    "end": "1857520"
  },
  {
    "text": "have, let's say, more static content on the UI.\nSo, for instance, IKEA used edge-side include  ",
    "start": "1857520",
    "end": "1864160"
  },
  {
    "text": "back in the days for their catalog. And everything \nwas extremely static. They were using edge-side  ",
    "start": "1864160",
    "end": "1869600"
  },
  {
    "text": "include. But when they started to have dynamicity \nor they wanted dynamic content or interactivity,  ",
    "start": "1869600",
    "end": "1875039"
  },
  {
    "text": "they supplement edge-side include with client-side \ninclude. But there are some libraries available in  ",
    "start": "1875040",
    "end": "1880480"
  },
  {
    "text": "JavaScript, but basically they do exactly the \nsame thing using transclusion but on the client  ",
    "start": "1880480",
    "end": "1886080"
  },
  {
    "text": "side. So you can mix and match those and provide \ninteractivity as well, high shareability and also,  ",
    "start": "1886080",
    "end": "1893760"
  },
  {
    "text": "let's say, span the load across multiple edge \nnodes instead of going every time to the origin,  ",
    "start": "1895120",
    "end": "1904320"
  },
  {
    "text": "usually the original way less than all \nthe CDN nodes that are available in…",
    "start": "1904320",
    "end": "1909120"
  },
  {
    "text": "Very cool. So one thing I noticed when I read the \nbook is that one approach that we at INNOQ use a  ",
    "start": "1910080",
    "end": "1917840"
  },
  {
    "start": "1911000",
    "end": "2430000"
  },
  {
    "text": "lot that is very focused on vertical splits is \nnot really striking the book. So I wanted to get  ",
    "start": "1917840",
    "end": "1924400"
  },
  {
    "text": "your opinion where you fit it into your frame \nof mind. Right? So I added it to this as well.  ",
    "start": "1924400",
    "end": "1931120"
  },
  {
    "text": "So a few years ago, we wrote this guideline called \n\"Self-contained Systems,\" where we describe how  ",
    "start": "1931680",
    "end": "1940000"
  },
  {
    "text": "you can integrate multiple vertical splits \ninto one system, right? And there we focus a  ",
    "start": "1940000",
    "end": "1947360"
  },
  {
    "text": "lot on server-side routing, or edge-side routing, \nI don't make a big distinction between those two. ",
    "start": "1947360",
    "end": "1953040"
  },
  {
    "text": "So each of those systems delivers its own front \nend, right, so its entire stack from the database  ",
    "start": "1954320",
    "end": "1962639"
  },
  {
    "text": "to front end, right? And we integrate those \nsystems with things that we already mentioned,  ",
    "start": "1962640",
    "end": "1967920"
  },
  {
    "text": "like transclusions or also components \nin the other system, both transclusions  ",
    "start": "1967920",
    "end": "1972720"
  },
  {
    "text": "with ESI or also client-side transclusions that \nyou just mentioned. And also simple things like  ",
    "start": "1973680",
    "end": "1979680"
  },
  {
    "text": "links between those two systems, right? So they \nare really independently, yeah, deployable,  ",
    "start": "1979680",
    "end": "1986320"
  },
  {
    "text": "right? They are manageable by one team. Why \nwould you put that into your frame of reference? ",
    "start": "1986320",
    "end": "1992080"
  },
  {
    "text": "In that case, I would say are we in front \nof micro-frontends? Because the reality is,  ",
    "start": "1992080",
    "end": "1999600"
  },
  {
    "text": "yes, you divide by system, but if we \nsay that everything that is divided by  ",
    "start": "2000560",
    "end": "2006000"
  },
  {
    "text": "multiple system render on the client \nside might represent micro-frontend,   then where is the distinction between a \nsingle-page application or micro-frontends,  ",
    "start": "2006000",
    "end": "2014960"
  },
  {
    "text": "whatever it is? So I think the distinction \non micro-frontends is the fact that you  ",
    "start": "2014960",
    "end": "2019360"
  },
  {
    "text": "have a map with business domain, and then you can \ngo more granular and whatever. The fact that you  ",
    "start": "2020000",
    "end": "2027520"
  },
  {
    "text": "have, like, an application shell that I think is \none key distinction for micro-frontends and other  ",
    "start": "2027520",
    "end": "2032880"
  },
  {
    "text": "implementation. In your case you are dividing \nmore in a modular monolith fashion, where you  ",
    "start": "2032880",
    "end": "2037920"
  },
  {
    "text": "divide some verticals that might or not represent \na domain, and then you are basically linking and  ",
    "start": "2037920",
    "end": "2044080"
  },
  {
    "text": "using web standards for moving through between the \nshoes. I think, I'm not even sure that I would... ",
    "start": "2044080",
    "end": "2050639"
  },
  {
    "text": "That's good to know because I just \nwanted to, like, understand where   you see the distinction. Because in the \npast, I saw descriptions of micro-frontends  ",
    "start": "2052880",
    "end": "2061839"
  },
  {
    "text": "where this would be part of it and other parts \nwhere this would not be part of it. Right? So   it's always good to, like, get a good frame of \nreference. Because it's a different approach to  ",
    "start": "2062400",
    "end": "2071360"
  },
  {
    "text": "it that solves some of the same problems, because \nyou still can deploy independently and so on.  ",
    "start": "2071360",
    "end": "2076000"
  },
  {
    "text": "Yeah, goes a different route. Okay. So that's \ngood to know. That helps me a lot. Okay, so  ",
    "start": "2077280",
    "end": "2083120"
  },
  {
    "text": "one thing that you also described in your book \nis the whole topic of the back-end structure. So  ",
    "start": "2084240",
    "end": "2089360"
  },
  {
    "text": "how is the back end structured to allow access \nfrom the front end? And you outline three ways,  ",
    "start": "2089360",
    "end": "2095280"
  },
  {
    "text": "API gateways, BFFs, and service dictionaries. \nCan you just give us a brief overview of those  ",
    "start": "2095280",
    "end": "2100560"
  },
  {
    "text": "three approaches and where you see them fit?\nSure, I will start with the service dictionary   that probably is nothing new, but I think is very \nhelpful. So a way that I found helpful to decouple  ",
    "start": "2100560",
    "end": "2113440"
  },
  {
    "text": "micro-frontends from the endpoints that allow \nbasically to run independently, the back-end parts  ",
    "start": "2113440",
    "end": "2120960"
  },
  {
    "text": "with the front-end part, is injecting basically \nto the micro-frontends the list of endpoints to  ",
    "start": "2120960",
    "end": "2127040"
  },
  {
    "text": "use with a dictionary, basically, of services \nthat are available. That allows, basically, to  ",
    "start": "2127040",
    "end": "2132960"
  },
  {
    "text": "a micro-frontend to pick the service that they \nneed. And also, potentially, you can do something  ",
    "start": "2134400",
    "end": "2139680"
  },
  {
    "text": "even smarter. And every time the micro-frontends \nis questing specific service dictionary, you serve  ",
    "start": "2139680",
    "end": "2144960"
  },
  {
    "text": "a list of endpoints that are useful for \nthat version of the micro-frontends.  That allows, for instance, if you work with \nAPI control first, where you maintain the same  ",
    "start": "2144960",
    "end": "2153680"
  },
  {
    "text": "code and at the same contract between the API, \nthen you can evolve independently the application.  ",
    "start": "2156480",
    "end": "2164160"
  },
  {
    "text": "You don't even have to care about injecting them \nin CI/CD, as I've seen before, or even create a  ",
    "start": "2164160",
    "end": "2171280"
  },
  {
    "text": "library that is loading inside of micro-frontends \nfor handling this part. Because when you have   these kinds of information that are loaded, you \nmight wish that you...instead of having all the  ",
    "start": "2171280",
    "end": "2181040"
  },
  {
    "text": "micro-frontends using a specific version of the \nAPIs, you have some of the micro-frontends using   a version, some others another version, and then \nyou need to coordinate the redeployment of these  ",
    "start": "2181040",
    "end": "2191200"
  },
  {
    "text": "shared library that is a pain, especially in large \norganizations. So this one is just a runtime way  ",
    "start": "2191200",
    "end": "2197760"
  },
  {
    "text": "for handling that is as simple as a JSON Schema \nor a JASON [SP] that is providing a list of  ",
    "start": "2197760",
    "end": "2204400"
  },
  {
    "text": "endpoints that are specific for a micro-frontend\nIn the case of the API gateway, API gateway is  ",
    "start": "2204400",
    "end": "2211760"
  },
  {
    "text": "a well-known way for exposing APIs, especially \nin microservices world. And in that case,  ",
    "start": "2212640",
    "end": "2220559"
  },
  {
    "text": "you have, like, your endpoints that are...you \ncan, let's say, have behind that API gateway  ",
    "start": "2220560",
    "end": "2227280"
  },
  {
    "text": "wherever you want, portion of monolith, and \nthe rest of microservices or microservices   completely up to you. But for the client, it's \nnot a big deal. And that basically also might  ",
    "start": "2227280",
    "end": "2238880"
  },
  {
    "text": "help where people are saying, \"Oh, if we \nwork with microservices and micro-frontend,   we need to have cross-functional teams.\" It's not \ntrue. Because you can...at the end of the day,  ",
    "start": "2238880",
    "end": "2248240"
  },
  {
    "text": "you can use APIs as a nice way for communicating \nbetween teams, front and back end, and  ",
    "start": "2248240",
    "end": "2254640"
  },
  {
    "text": "maintain the independence of these two \nlayers. Then there are people that argue,   but I want to have some work that is handled by \none team only, can deliver a feature independently  ",
    "start": "2255440",
    "end": "2267920"
  },
  {
    "text": "and create, let's say, value for the customers.\nAnd I agree, that is the favorite way also for me.  ",
    "start": "2267920",
    "end": "2274079"
  },
  {
    "text": "But there are certain situation like you cannot do \nthat. For instance, in my previous company, we had   roughly 40 different targets on the front end we \nneed to manage and with different technologies. So  ",
    "start": "2274080",
    "end": "2286880"
  },
  {
    "text": "if I have to create a team that can deliver a \nfuture end-to-end without creating first-class  ",
    "start": "2286880",
    "end": "2291680"
  },
  {
    "text": "citizenship inside my teams, I need to have a team \nof 15, 20 people. That is not manageable at all,  ",
    "start": "2292320",
    "end": "2299520"
  },
  {
    "text": "it doesn't perform. So instead, if we \ndivide, in that case, in front and back end,   you can have, let's say, more interaction between \nfront-end and back-end teams. But at the end,  ",
    "start": "2299520",
    "end": "2309600"
  },
  {
    "text": "if you work well with API contract first, \nyou reduce basically this type of interaction  ",
    "start": "2309600",
    "end": "2315120"
  },
  {
    "text": "that can work independently against the same \nAPI contract that is not changing every day. ",
    "start": "2315120",
    "end": "2319520"
  },
  {
    "text": "And the last one is backend for \nfrontend, where backend for frontend,   basically, is a pattern that allows \nyou to...usually front-end team, to  ",
    "start": "2321920",
    "end": "2330560"
  },
  {
    "text": "create a layer that is in between the APIs \nand the front end. And they are able to  ",
    "start": "2331200",
    "end": "2337040"
  },
  {
    "text": "use the APIs that they want, put them together \nand serve to their client. Usually are divided by  ",
    "start": "2337760",
    "end": "2343760"
  },
  {
    "text": "device. So you have, like, maybe a mobile backend \nfor frontend, one web, etc. But I have seen also  ",
    "start": "2346640",
    "end": "2352640"
  },
  {
    "text": "people that are dividing per domain. So instead \nof having one per device, you have, like, one for,  ",
    "start": "2353200",
    "end": "2360079"
  },
  {
    "text": "I don't know, the catalog, and one for \nauthentication. And you handle that in that way. ",
    "start": "2360080",
    "end": "2366880"
  },
  {
    "text": "It really depends how you want \nto...how complex is the application,   how large is the application of your structure. \nBut backend for frontend provides a benefit where  ",
    "start": "2366880",
    "end": "2375760"
  },
  {
    "text": "also if someone is updating, let's say, an API and \nyou're not aware for that, for any given reason,  ",
    "start": "2377280",
    "end": "2384880"
  },
  {
    "text": "is not going to cause a cascade effect on \nthe client side. So you can slowly but steady  ",
    "start": "2385547",
    "end": "2390880"
  },
  {
    "text": "migrate your API on the backend for frontend \nlayer, and also aggregate them in a way that  ",
    "start": "2390880",
    "end": "2398559"
  },
  {
    "text": "the client can do less round trips and \nprovide a better experience for the users.   And sometimes I have seen use REST, \nsometimes I've seen use GraphQL  ",
    "start": "2398560",
    "end": "2407200"
  },
  {
    "text": "for this implementation. It's completely up to \nthe team. And often, I have also seen one backend  ",
    "start": "2409840",
    "end": "2415920"
  },
  {
    "text": "for frontend written with GraphQL and use Schema \nFederation for stitching together the different  ",
    "start": "2415920",
    "end": "2422799"
  },
  {
    "text": "APIs in a unique layer that the clients can \nconsume either mobile, web, micro-frontend…",
    "start": "2422800",
    "end": "2428400"
  },
  {
    "text": "Where do you see the responsibility for \nthe BFF? Is it the responsibility of the   front-end team that uses it? Or is it \nthe responsibility of a different team? ",
    "start": "2429440",
    "end": "2438160"
  },
  {
    "start": "2430000",
    "end": "2652000"
  },
  {
    "text": "For me, it would be responsibility of the \nfront-end team. Because they are the ones that  ",
    "start": "2438160",
    "end": "2443520"
  },
  {
    "text": "are using that layer and consuming that layer. So \nthey need to know how to handle that. Or whether I  ",
    "start": "2443520",
    "end": "2449600"
  },
  {
    "text": "would recommend to have some help from the \nback-end teams because there are certain,  ",
    "start": "2450400",
    "end": "2455440"
  },
  {
    "text": "let's say, topics like scalability, \nobservability, stuff like that, that   they have definitely more experience, especially \nwhen we are talking about building microservices. ",
    "start": "2456240",
    "end": "2466320"
  },
  {
    "text": "Very cool. So one thing you already brought \nup, but I wanted to have as our last topic   for the day is the question of feature teams with \ncomponent teams. So how do you see team structure  ",
    "start": "2466320",
    "end": "2477600"
  },
  {
    "text": "and where do you see it in regards to all the \nthings that we talked about until this point? ",
    "start": "2477600",
    "end": "2483280"
  },
  {
    "text": "I don't have a strong preference. I mean, I \nwork in both and I've seen both system working.  ",
    "start": "2483280",
    "end": "2490320"
  },
  {
    "text": "I think that the context should drive \nthat decision. As I said before, I had,  ",
    "start": "2491280",
    "end": "2497280"
  },
  {
    "text": "say, the possibility to work in companies where \nit was impossible to work with features team,  ",
    "start": "2498560",
    "end": "2503360"
  },
  {
    "text": "and others that I work in features teams and \nit was working extremely well. The problem  ",
    "start": "2504160",
    "end": "2509520"
  },
  {
    "text": "there then is when you have a limited amount of \nresource, but the number of features are growing.  ",
    "start": "2509520",
    "end": "2515680"
  },
  {
    "text": "And then you have a feature team that suddenly \nbecame a features team. And therefore, you  ",
    "start": "2515680",
    "end": "2520800"
  },
  {
    "text": "have to handle multiple events that are touching \nmultiple points and the complexity starts to rise.  For me, it's very important as a tech leadership, \nin general, architects, principal engineers,  ",
    "start": "2520800",
    "end": "2532000"
  },
  {
    "text": "whatever, that we take regular steps back \nto understand if our model is still valid.  ",
    "start": "2532000",
    "end": "2537760"
  },
  {
    "text": "Because often, companies start in one way and \nthey stick with that despite is not working.  ",
    "start": "2537760",
    "end": "2543440"
  },
  {
    "text": "And then the problem is, oh, but we don't \nhave enough developers, or we don't hire   the right developers. And in reality, maybe \nthe problem is only how the communication  ",
    "start": "2544320",
    "end": "2552880"
  },
  {
    "text": "structure works, how the company is organized.\nSo either that should be a component of feature  ",
    "start": "2552880",
    "end": "2558799"
  },
  {
    "text": "team, my suggestion is check regularly if that is \nthe model that is still working for your company  ",
    "start": "2558800",
    "end": "2565680"
  },
  {
    "text": "or if the way how you sliced your domains is \ncorrect. Because as the company's evolving,  ",
    "start": "2565680",
    "end": "2573440"
  },
  {
    "text": "your architecture has to evolve with the company. \nIt's not something static. It's completely fluid   and organic. We need to bear in mind that the \nmoment that we are designing application today,  ",
    "start": "2574080",
    "end": "2584560"
  },
  {
    "text": "in one year time, the things could be \ncompletely different with the same people  ",
    "start": "2584560",
    "end": "2590080"
  },
  {
    "text": "or not. Because the business drift towards \na different direction from the beginning.  So the assumption and the characteristics of \nour architecture and organizational structure  ",
    "start": "2590080",
    "end": "2598960"
  },
  {
    "text": "that we made a year ago, are now obsolete and \nwe need to replace them with another way. So  ",
    "start": "2598960",
    "end": "2605200"
  },
  {
    "text": "don't be afraid to change and switch model \nif you see that there are some challenges.  ",
    "start": "2605200",
    "end": "2611680"
  },
  {
    "text": "And question yourself, it might be that you \ncreate a genuinely discussion, but questioning  ",
    "start": "2611680",
    "end": "2617839"
  },
  {
    "text": "the decision that we were making, like, 6 months \nago, 4 months...4 months usually is a good time,   but 6 to 12 months ago is definitely...\nI think those are very good closing words,  ",
    "start": "2617840",
    "end": "2629920"
  },
  {
    "text": "because I think it's very true for a lot of \nparts of our system that we should question   our decisions and also think about which \narchitecture really fits our needs. And maybe  ",
    "start": "2629920",
    "end": "2642080"
  },
  {
    "text": "at the beginning where we are more flexible of \nchanging things, especially change things up when  ",
    "start": "2642080",
    "end": "2647760"
  },
  {
    "text": "we notice that it doesn't fit us even though we \nthought that it would. So thank you so much, Luca,   for your time and for your insights. And I wish \nyou a nice day and all our listeners the same. ",
    "start": "2647760",
    "end": "2658640"
  },
  {
    "start": "2652000",
    "end": "2699000"
  },
  {
    "text": "Thank you very much for having me, \nand was a pleasure sharing with you my   perception of micro-frontends. I \nhope that you will enjoy the book. ",
    "start": "2658640",
    "end": "2665600"
  },
  {
    "text": "Okay. Bye.\nAnd thank you again for having me.",
    "start": "2665600",
    "end": "2667120"
  }
]