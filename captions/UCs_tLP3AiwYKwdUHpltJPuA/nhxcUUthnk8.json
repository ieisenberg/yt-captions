[
  {
    "start": "0",
    "end": "49000"
  },
  {
    "text": "hello everybody as for say my name is y mandri and today we're going to talk",
    "start": "2240",
    "end": "7279"
  },
  {
    "text": "about Java Cod coverage and the best friend bite Cod there will be a little bit of scandals a little bit of",
    "start": "7279",
    "end": "12960"
  },
  {
    "text": "intrigues and investigations before we start I should tell you some disclaimer",
    "start": "12960",
    "end": "18560"
  },
  {
    "text": "I work in a great company sonar creators of sonar Cube sonar lint sonar Cloud you might know them by the way let me do a",
    "start": "18560",
    "end": "25760"
  },
  {
    "text": "quick check do you use our products wonderful don't be shy I don't",
    "start": "25760",
    "end": "30800"
  },
  {
    "text": "care if you hate them um because whatever I'm going to tell you today is not at all about my work or not my",
    "start": "30800",
    "end": "37960"
  },
  {
    "text": "primary work it's all about what I do for open source my free time in at night",
    "start": "37960",
    "end": "44600"
  },
  {
    "text": "um so this has nothing to do with my employer um at my free time I work on a",
    "start": "44600",
    "end": "52440"
  },
  {
    "start": "49000",
    "end": "275000"
  },
  {
    "text": "wonderful library or a two call it jao you also might know it or not that's",
    "start": "52440",
    "end": "58079"
  },
  {
    "text": "fine this two allows you to measure Java code coverage and we're going to talk",
    "start": "58079",
    "end": "64080"
  },
  {
    "text": "about interesting things in Java that came out of this",
    "start": "64080",
    "end": "69680"
  },
  {
    "text": "work um while developing jako we tested on quite R quite wide range of uh GDK",
    "start": "69680",
    "end": "76720"
  },
  {
    "text": "versions uh for different Java compiler versions if I'm not mistaken as of today",
    "start": "76720",
    "end": "83640"
  },
  {
    "text": "it accounts for 17 and a half GDK versions why half because we also test",
    "start": "83640",
    "end": "88799"
  },
  {
    "text": "Early Access builds um why we do so well because we do find",
    "start": "88799",
    "end": "94079"
  },
  {
    "text": "some bus and funny fact I could even say that most of the time we find bugs not",
    "start": "94079",
    "end": "99439"
  },
  {
    "text": "in our tools but in GDK itself if again my memory is correct around the time of",
    "start": "99439",
    "end": "106520"
  },
  {
    "text": "uh Java 9 we've been one of the top open-source contributors of bux in",
    "start": "106520",
    "end": "112640"
  },
  {
    "text": "jdk they gets fix it and of course sometimes we do Implement new features in our tool so for example for some code",
    "start": "112640",
    "end": "121560"
  },
  {
    "text": "base code coverage reper with Jaco version uh 0.8.9 some time ago looked like this",
    "start": "121560",
    "end": "129200"
  },
  {
    "text": "while looking on this report you might say well there is not enough tests there is some uncovered code so probably it's",
    "start": "129200",
    "end": "136360"
  },
  {
    "text": "not well tested application well we implemented some new features in jao and starting with jao",
    "start": "136360",
    "end": "144959"
  },
  {
    "text": "0.8.2 exactly the same code base exactly the same tests started to generate",
    "start": "144959",
    "end": "150319"
  },
  {
    "text": "following report everything is tested 100% coverage why this happened what those new features are about that's",
    "start": "150319",
    "end": "157519"
  },
  {
    "text": "exactly what we're going to talk today and before we start it's really",
    "start": "157519",
    "end": "163120"
  },
  {
    "text": "important to understand that jao receives all of the information from the class files from the bite code not from",
    "start": "163120",
    "end": "170120"
  },
  {
    "text": "the source code this is interesting property because it heavily simplifies integration we don't need to recompile",
    "start": "170120",
    "end": "176879"
  },
  {
    "text": "your files we can easily integrate into already compiled Cod on some application",
    "start": "176879",
    "end": "182400"
  },
  {
    "text": "server Etc absence of source files is not a problem you can measure code coverage for some library for which you",
    "start": "182400",
    "end": "188400"
  },
  {
    "text": "don't have a source code this is nice also this helps us developers of this",
    "start": "188400",
    "end": "193720"
  },
  {
    "text": "Tool uh cover a new synta taxic sugar in the language which does not change the",
    "start": "193720",
    "end": "198760"
  },
  {
    "text": "bite code some examples of this is text blocks which appear it in Java 15 or",
    "start": "198760",
    "end": "204319"
  },
  {
    "text": "there is some other drafts like concise method bodies that wouldn't change anything in the bite Cod which would",
    "start": "204319",
    "end": "209760"
  },
  {
    "text": "change only the source code it's not a big deal for us to support these new features and at the beginning we saw",
    "start": "209760",
    "end": "216519"
  },
  {
    "text": "that this is a nice way that opens us a door to other gvm languages such as Scotland scalar",
    "start": "216519",
    "end": "221959"
  },
  {
    "text": "groovy why this doesn't hold true anymore maybe you would see today uh we",
    "start": "221959",
    "end": "227200"
  },
  {
    "text": "will see some examples why this doesn't hold true even for Java and here is a real disclaimer sorry for this there",
    "start": "227200",
    "end": "235000"
  },
  {
    "text": "will be a little bit blood out of gvm sorry for this we're going to use Ed today naked Java compiler no ID no Maven",
    "start": "235000",
    "end": "242599"
  },
  {
    "text": "no grel no spring boot nothing command line only sorry for this we're going to",
    "start": "242599",
    "end": "247879"
  },
  {
    "text": "talk strong language we're not going to talk English today we're going to talk bite code if you are not ready for this",
    "start": "247879",
    "end": "253840"
  },
  {
    "text": "maybe it's you have still time to go and visit another session and sorry for this",
    "start": "253840",
    "end": "261160"
  },
  {
    "text": "within remaining 30 minutes I will try to do intense violence of your brain",
    "start": "261160",
    "end": "266479"
  },
  {
    "text": "again if you're not ready let's go and Al together listen some other wonderful session so are you",
    "start": "266479",
    "end": "274160"
  },
  {
    "text": "ready okay let's start let's talk about Java let's start with something pretty",
    "start": "274160",
    "end": "279680"
  },
  {
    "start": "275000",
    "end": "1116000"
  },
  {
    "text": "simple pretty basic let me have an empty class and let's let me call it bless me",
    "start": "279680",
    "end": "285240"
  },
  {
    "text": "why not who agrees that this class is empty there is no fields in it there is no",
    "start": "285240",
    "end": "291880"
  },
  {
    "text": "methods in it it's empty right who thinks that it is empty I do think it is",
    "start": "291880",
    "end": "298080"
  },
  {
    "text": "empty okay who thinks it is not empty okay who all other people it",
    "start": "298080",
    "end": "306520"
  },
  {
    "text": "depends it depends okay wonderful who thinks it depends okay some other people so what",
    "start": "306520",
    "end": "313720"
  },
  {
    "text": "we are going to be doing today we will be compiling this code so Java C bless me and we're going to be looking at its",
    "start": "313720",
    "end": "319319"
  },
  {
    "text": "bite code Java P standard Tool Part of uh GDK with two arguments with two",
    "start": "319319",
    "end": "325800"
  },
  {
    "text": "options minus vbos and minus P show me private T sets Etc uh together those two",
    "start": "325800",
    "end": "332639"
  },
  {
    "text": "options this is two my favorite options I call them show me everything Java P minus V minus p and a class name bless",
    "start": "332639",
    "end": "339759"
  },
  {
    "text": "me and here we see some meta information about class file when it was created",
    "start": "339759",
    "end": "346360"
  },
  {
    "text": "it's md5 checks from which source file it was compiled we're going to see for which",
    "start": "346360",
    "end": "352600"
  },
  {
    "text": "Java version it was compiled in in current case I us it my favorite GDK 8",
    "start": "352600",
    "end": "358240"
  },
  {
    "text": "so in why are you laughing it's my favorite GDK um so in the bite Cod major",
    "start": "358240",
    "end": "365840"
  },
  {
    "text": "version is 52 corresponding to Java 8 we're also going to see constant pool this is the first and the last time you",
    "start": "365840",
    "end": "372479"
  },
  {
    "text": "see constant pool basically it is a list of all the constants in the bite code",
    "start": "372479",
    "end": "377800"
  },
  {
    "text": "strings numbers Etc and all the rest of the bite code just references an item in",
    "start": "377800",
    "end": "384720"
  },
  {
    "text": "the constant pool why it's the last time because it's quite big it's hard to references so I will be inlining them on",
    "start": "384720",
    "end": "392160"
  },
  {
    "text": "the next slide in the place where they used and here is what we are going to",
    "start": "392160",
    "end": "398000"
  },
  {
    "text": "see as a body of this class indeed the holy place is never empty uh the ones who say it it's empty we're right",
    "start": "398000",
    "end": "404000"
  },
  {
    "text": "because in the source code it is empty the ones who say it it is not empty were",
    "start": "404000",
    "end": "409039"
  },
  {
    "text": "also right because in the bite code it is not empty so indeed it depends what",
    "start": "409039",
    "end": "414960"
  },
  {
    "text": "we're going to see here indeed there is a Constructor every class in Java should",
    "start": "414960",
    "end": "420639"
  },
  {
    "text": "have a Constructor so if we don't write a Constructor by ourselves it's going to",
    "start": "420639",
    "end": "425919"
  },
  {
    "text": "be generated by the compiler compiler on our behalf and every class should",
    "start": "425919",
    "end": "431520"
  },
  {
    "text": "inherit from something by default we inherit from javal link object so there should be uh a super Constructor",
    "start": "431520",
    "end": "438319"
  },
  {
    "text": "invocation here it is and we canot just end method with nothing we should return",
    "start": "438319",
    "end": "443360"
  },
  {
    "text": "from the method so here is the return return this is a simple bite code of an empty class and the is few things more",
    "start": "443360",
    "end": "450720"
  },
  {
    "text": "to notice there is a little link with the source code in the bite code more precisely the only information in the",
    "start": "450720",
    "end": "457160"
  },
  {
    "text": "bite code that exists is soal line number table line number table says",
    "start": "457160",
    "end": "462639"
  },
  {
    "text": "starting from the following bite code of set instruction uh all the following",
    "start": "462639",
    "end": "467879"
  },
  {
    "text": "instructions correspond to the following Source line in this particular case all the bite Cod of this method is maed to",
    "start": "467879",
    "end": "475120"
  },
  {
    "text": "the line wine of our class let's move on let's let's have",
    "start": "475120",
    "end": "480520"
  },
  {
    "text": "something more complicated I hope you're warming up because I will be increasing",
    "start": "480520",
    "end": "485560"
  },
  {
    "text": "complexity so what we have here we have an outer class we have an inner uh with",
    "start": "485560",
    "end": "491560"
  },
  {
    "text": "a private field we have an inner class and inside of an inner class we do",
    "start": "491560",
    "end": "499800"
  },
  {
    "text": "increment of the field of outer class first of all who thinks that this is a",
    "start": "499800",
    "end": "506879"
  },
  {
    "text": "valid Java code if is it possible to do like this in Java yes who thinks I I think so but",
    "start": "506879",
    "end": "515599"
  },
  {
    "text": "don't worry we don't need to guess we can just compile it so as we say Java C",
    "start": "515599",
    "end": "521159"
  },
  {
    "text": "example if there is no errors then it's valid Java code we compile it indeed it",
    "start": "521159",
    "end": "526800"
  },
  {
    "text": "compiles and we could have a look at the bite code so we decompile the inner",
    "start": "526800",
    "end": "532120"
  },
  {
    "text": "class and what we see in the inner class again my favorite Java 8 version you might laugh again um here is is Method",
    "start": "532120",
    "end": "540720"
  },
  {
    "text": "where we do an increment but can we see increment here there is no increment",
    "start": "540720",
    "end": "546399"
  },
  {
    "text": "here there is invocation of some strange method access dollar",
    "start": "546399",
    "end": "552760"
  },
  {
    "text": "008 like an like an engent but without seven with eight what this method is",
    "start": "552760",
    "end": "558839"
  },
  {
    "text": "let's have a look at the outer class what we have in the outer class here is the",
    "start": "558839",
    "end": "564120"
  },
  {
    "text": "method notice that our initial method was private",
    "start": "564120",
    "end": "570839"
  },
  {
    "text": "this one is package local static notice that it also has some strange keyword",
    "start": "570839",
    "end": "576040"
  },
  {
    "text": "that we don't have uh in Java synthetic and this method indeed does an",
    "start": "576040",
    "end": "581320"
  },
  {
    "text": "increment here is an increment all that no first of all",
    "start": "581320",
    "end": "589839"
  },
  {
    "text": "before all that why this happens we we first should answer on the question why this happens well if you open our Bible",
    "start": "589839",
    "end": "598360"
  },
  {
    "text": "Java language spe specification according to the Java language specification the source code that we just wrote is indeed valid and Java",
    "start": "598360",
    "end": "605399"
  },
  {
    "text": "compiler accepts it but according to the Java virtual machine specification it's",
    "start": "605399",
    "end": "610640"
  },
  {
    "text": "not valid to access privates from one of one class from another",
    "start": "610640",
    "end": "616200"
  },
  {
    "text": "class so in order to align those two specifications Java compiler should do",
    "start": "616200",
    "end": "622720"
  },
  {
    "text": "the trick and this trick is let's generate on on behalf of the user let's",
    "start": "622720",
    "end": "629079"
  },
  {
    "text": "generate package local method that gvm would accept that gvm would let to",
    "start": "629079",
    "end": "635639"
  },
  {
    "text": "call and that's how we will access the private all that changed in Java 11 with",
    "start": "635639",
    "end": "643639"
  },
  {
    "text": "introduction of Nest Basit Access Control if you take exactly the same example and we'll compile it with GDK",
    "start": "643639",
    "end": "651040"
  },
  {
    "text": "11 here is Major version 55 it's GDK",
    "start": "651040",
    "end": "657240"
  },
  {
    "text": "11 it's significant lost in because there is no more such methods generated",
    "start": "657240",
    "end": "663959"
  },
  {
    "text": "there is no more synthetic methods and this all was possible thanks to",
    "start": "663959",
    "end": "669000"
  },
  {
    "text": "introduction of the new attributes Nest members which says well I have some",
    "start": "669000",
    "end": "674519"
  },
  {
    "text": "nested classes please allow those nested classes to access my private and if you",
    "start": "674519",
    "end": "679800"
  },
  {
    "text": "look at the inner class we're going to see the same picture there is a new attribute and there is no more any",
    "start": "679800",
    "end": "685560"
  },
  {
    "text": "synthetics no more other changes and new attribute is host which says well I am",
    "start": "685560",
    "end": "691120"
  },
  {
    "text": "nested inside of another class you can hm you can verify this relationship and",
    "start": "691120",
    "end": "696760"
  },
  {
    "text": "allow the the access to the privates right um that's wonderful",
    "start": "696760",
    "end": "702519"
  },
  {
    "text": "that's one more reason if you was not convinced that yesterday to move on a more recent uh Java version this one",
    "start": "702519",
    "end": "708440"
  },
  {
    "text": "more reason for you um let's move on let's have a look at some other example",
    "start": "708440",
    "end": "714959"
  },
  {
    "text": "we have two classes A and B Class B simply extends Class A and",
    "start": "714959",
    "end": "722040"
  },
  {
    "text": "inside of those two classes we have two methods one in each the first class declares a method",
    "start": "722040",
    "end": "730200"
  },
  {
    "text": "fun with return type object and the second methods method overwrites what",
    "start": "730200",
    "end": "737000"
  },
  {
    "text": "was declared in the base class two return types the second method",
    "start": "737000",
    "end": "742079"
  },
  {
    "text": "overwrites with a different return type again is it valid Java Cod",
    "start": "742079",
    "end": "750880"
  },
  {
    "text": "we don't need to guess let's just compile right we compile it it compiles",
    "start": "751720",
    "end": "756880"
  },
  {
    "text": "yes it's valid Java Cod what we could see in the bite cut so this time I don't",
    "start": "756880",
    "end": "763320"
  },
  {
    "text": "want to take any bets of old Java and and Java versions let me try to use Java",
    "start": "763320",
    "end": "769399"
  },
  {
    "text": "at straight from the beginning to not have any surprises so major version in the bite code",
    "start": "769399",
    "end": "775440"
  },
  {
    "text": "62 let's move on here is our method that we wrote it returns",
    "start": "775440",
    "end": "782040"
  },
  {
    "text": "string no surprises right oh no wait here is another method that we didn't",
    "start": "782040",
    "end": "787440"
  },
  {
    "text": "wrote in a class B and it returns subject and the only thing it does ah",
    "start": "787440",
    "end": "794240"
  },
  {
    "text": "sorry it's also again Market as synthetic and the only thing that it does it invokes method which we've",
    "start": "794240",
    "end": "802000"
  },
  {
    "text": "read why this happens why we need this second method well the answer is pretty",
    "start": "802000",
    "end": "807760"
  },
  {
    "text": "simple in all places that do accept an instance of Class A we could simply pass",
    "start": "807760",
    "end": "814240"
  },
  {
    "text": "an instance of Class B Because B extends a and all the places which expect",
    "start": "814240",
    "end": "821839"
  },
  {
    "text": "instance of a Class A should be able to work with a Class B but they do expect",
    "start": "821839",
    "end": "826959"
  },
  {
    "text": "the return type of a method to be an object so here it is a again compiler",
    "start": "826959",
    "end": "834519"
  },
  {
    "text": "generates on behalf of us some compatibility Bridge",
    "start": "834519",
    "end": "840759"
  },
  {
    "text": "let's move on let's have a look on something more interesting on a pretty",
    "start": "841000",
    "end": "846800"
  },
  {
    "text": "simple construction switch by y here is a switch oh sorry here is Yum it has two constants false and",
    "start": "846800",
    "end": "853399"
  },
  {
    "text": "true and here is a switch but you know it has three cases",
    "start": "853399",
    "end": "859519"
  },
  {
    "text": "false and true and a default one because you know otherwise compiler would complain that we didn't write a",
    "start": "859519",
    "end": "866000"
  },
  {
    "text": "default and that's it we compile it we decompile we look what is inside here is",
    "start": "866000",
    "end": "872320"
  },
  {
    "text": "the method that we wrote here is the switch all fine so far but switch is",
    "start": "872320",
    "end": "879720"
  },
  {
    "text": "done not by yum constant not but by the ordinary value of yum constant switch is",
    "start": "879720",
    "end": "885040"
  },
  {
    "text": "done by some strange expression the name of yum was e and now",
    "start": "885040",
    "end": "891680"
  },
  {
    "text": "switch is done by uh by something strange we go into the class E dollar",
    "start": "891680",
    "end": "898240"
  },
  {
    "text": "one in this class we get a field dollar switch map Dollar e this field",
    "start": "898240",
    "end": "904560"
  },
  {
    "text": "apparently an array we take a value from this array which corresponds to ordinal value of our yum and we do the switch by",
    "start": "904560",
    "end": "913880"
  },
  {
    "text": "what is stored in the in let's have a look on this strange class that we never",
    "start": "913880",
    "end": "918920"
  },
  {
    "text": "wrote this time class is synthetic not entire method but a class here is the",
    "start": "918920",
    "end": "924519"
  },
  {
    "text": "field it's indeed array of integers and this class has static",
    "start": "924519",
    "end": "929680"
  },
  {
    "text": "initializer what happens in this static initializer we take a false constant of",
    "start": "929680",
    "end": "936279"
  },
  {
    "text": "zum we take its ordinal and in the position of this array of the value of",
    "start": "936279",
    "end": "942920"
  },
  {
    "text": "this ordinal we write one we do the same for the true constant",
    "start": "942920",
    "end": "948199"
  },
  {
    "text": "but we write true uh two and there is some exception handling this is not very",
    "start": "948199",
    "end": "955240"
  },
  {
    "text": "interesting why all of this happens let me scroll scroll back to our original",
    "start": "955240",
    "end": "960720"
  },
  {
    "text": "example all of this happens because in our current case both switch and inum",
    "start": "960720",
    "end": "967440"
  },
  {
    "text": "have written in the same source file but if you would write them separately it would also be possible to compile them",
    "start": "967440",
    "end": "974600"
  },
  {
    "text": "separately and actually to have two different versions at run time we can",
    "start": "974600",
    "end": "979800"
  },
  {
    "text": "compile switch first then change in yum for example order of constants or flip",
    "start": "979800",
    "end": "987399"
  },
  {
    "text": "them uh yes change order flip them or add a new constants or remove constants",
    "start": "987399",
    "end": "992560"
  },
  {
    "text": "and without any tricks if you do so the switch will stop working if switch does",
    "start": "992560",
    "end": "999519"
  },
  {
    "text": "just take into account only original order so switch somehow should take into",
    "start": "999519",
    "end": "1004560"
  },
  {
    "text": "account any order that we would later have at run time that's why compiler",
    "start": "1004560",
    "end": "1009800"
  },
  {
    "text": "needs to store the mapping from original order original yum constants to the Yum",
    "start": "1009800",
    "end": "1017240"
  },
  {
    "text": "constants that will be there at R time here is a little trick that compiler",
    "start": "1017240",
    "end": "1022920"
  },
  {
    "text": "again does on our behalf let's move",
    "start": "1022920",
    "end": "1028760"
  },
  {
    "text": "on so we've seen this synthetic attribute",
    "start": "1028760",
    "end": "1034240"
  },
  {
    "text": "already many many times and if we go into our other Bible Java virtual machine specification in this",
    "start": "1034240",
    "end": "1040000"
  },
  {
    "text": "specification we would find the following statement a class member that doesn't appear in the source code must",
    "start": "1040000",
    "end": "1045079"
  },
  {
    "text": "be marked as synthetic or else it must have some flux set the only exceptions",
    "start": "1045079",
    "end": "1051039"
  },
  {
    "text": "to this rule are compiler generated methods for example instance",
    "start": "1051039",
    "end": "1057280"
  },
  {
    "text": "initialization method representing default Constructor uh we've already seen this example default Constructor",
    "start": "1057280",
    "end": "1063440"
  },
  {
    "text": "generated wasn't Market as synthetic uh cluster interface initialization methods static initialization methods and",
    "start": "1063440",
    "end": "1070160"
  },
  {
    "text": "implicitly declared members of Ys and",
    "start": "1070160",
    "end": "1074679"
  },
  {
    "text": "Records bum and a little remark at the bottom of the page that states all of",
    "start": "1076000",
    "end": "1081600"
  },
  {
    "text": "the the synthetic attribute was introduced back in GDK 1.1 to support nested classes and interfaces we already",
    "start": "1081600",
    "end": "1088600"
  },
  {
    "text": "seen that we've seen why it was introduced it was necessarily to align Java virtual machine specification with",
    "start": "1088600",
    "end": "1095360"
  },
  {
    "text": "Java language specification and to disallow users from using this synthetically generated members uh they",
    "start": "1095360",
    "end": "1103039"
  },
  {
    "text": "needed to introduce a new attribute you would never be able to access",
    "start": "1103039",
    "end": "1109000"
  },
  {
    "text": "those methods if you just use after completion in ID they would just ignore",
    "start": "1109000",
    "end": "1114400"
  },
  {
    "text": "them and interesting uh conclusion comes out of all this if you never brought",
    "start": "1114400",
    "end": "1120400"
  },
  {
    "start": "1116000",
    "end": "2295000"
  },
  {
    "text": "those methods those classes they're probably not significant to be shown to",
    "start": "1120400",
    "end": "1125880"
  },
  {
    "text": "the user for example for our code coverage to if actually what happens on",
    "start": "1125880",
    "end": "1132520"
  },
  {
    "text": "practice when users see something that they never wrote In The Source Code they surpris that we see something wrong the",
    "start": "1132520",
    "end": "1138600"
  },
  {
    "text": "tool is broken so simple stupid conclusion jao should ignore all synthetic methods and that's exactly",
    "start": "1138600",
    "end": "1144919"
  },
  {
    "text": "what we did since very beginning we always been ignoring synthetic methods",
    "start": "1144919",
    "end": "1150039"
  },
  {
    "text": "guess what happened things changed let's have a look at more complicated examples lambdas when",
    "start": "1150039",
    "end": "1157039"
  },
  {
    "text": "lambdas appear it in Java language do you remember java8 Java 8 yes my",
    "start": "1157039",
    "end": "1162360"
  },
  {
    "text": "favorite Java version okay so we have a method exact",
    "start": "1162360",
    "end": "1167760"
  },
  {
    "text": "it accept enable nothing interesting in it and we have a method fun inside of a method fun we call method exact and we",
    "start": "1167760",
    "end": "1175400"
  },
  {
    "text": "pass Lambda is an argument please notice that inside of a Lambda we have a joker string Joker and please notice that it",
    "start": "1175400",
    "end": "1183120"
  },
  {
    "text": "is on line number n if you compile all this and decompile here's what we're going to see exact",
    "start": "1183120",
    "end": "1190080"
  },
  {
    "text": "method exact nothing strange in it here's our method fun but where is string jcker it",
    "start": "1190080",
    "end": "1197760"
  },
  {
    "text": "completely disappeared where is line number nine you could see nine here but this is not",
    "start": "1197760",
    "end": "1204840"
  },
  {
    "text": "a line number this is bite Cod of set instruction corresponding to the return",
    "start": "1204840",
    "end": "1211320"
  },
  {
    "text": "return there's absolutely no line number nine apparently implementation details",
    "start": "1211320",
    "end": "1218120"
  },
  {
    "text": "of lambdas are the following the Lambda body becomes a new member a new method",
    "start": "1218120",
    "end": "1225679"
  },
  {
    "text": "in your class with a wonderful name lamb the dollar fun dollar Z here is our",
    "start": "1225679",
    "end": "1232280"
  },
  {
    "text": "Jer and here is line number nine and please notice that this method",
    "start": "1232280",
    "end": "1238520"
  },
  {
    "text": "is synthetic indeed it doesn't appear in the sour Cod so what what happens is with our",
    "start": "1238520",
    "end": "1246520"
  },
  {
    "text": "wonderful Cod coverage to well yes we ignore lambdas there is no way to show",
    "start": "1246520",
    "end": "1251880"
  },
  {
    "text": "Cod coverage for lambas and this time it is implementation details this time there",
    "start": "1251880",
    "end": "1258400"
  },
  {
    "text": "is no specification nor Java language specification nor Java virtual machine specification nor even GDK itself they",
    "start": "1258400",
    "end": "1265960"
  },
  {
    "text": "say that lambdas would be compiled always like this and the method names",
    "start": "1265960",
    "end": "1271440"
  },
  {
    "text": "would look always like this actually this is even not true uh Java uses this",
    "start": "1271440",
    "end": "1276960"
  },
  {
    "text": "naming convention cotlin uses another naming convention Scala uses the third naming convention and actually Scala",
    "start": "1276960",
    "end": "1282840"
  },
  {
    "text": "changed it two or three times already we need to adapt to all this in our B to we",
    "start": "1282840",
    "end": "1288760"
  },
  {
    "text": "need to write a dirty hug like yes it is synthetic we need to ignore it but only if it doesn't start with Lambda dollar",
    "start": "1288760",
    "end": "1296720"
  },
  {
    "text": "and then we can get the code coverage for lambdas that's the features that we",
    "start": "1296720",
    "end": "1302120"
  },
  {
    "text": "Implement let's move on at this moment in time you might start wondering hey do you have something non synthetic this is",
    "start": "1302120",
    "end": "1308360"
  },
  {
    "text": "not very interesting right well let's have a look we already seen yums what's",
    "start": "1308360",
    "end": "1314360"
  },
  {
    "text": "interesting with yums let's try to see we compile with the compile here is fi",
    "start": "1314360",
    "end": "1320520"
  },
  {
    "text": "values in enums it stores all values of the eneration here is Method values you all",
    "start": "1320520",
    "end": "1327400"
  },
  {
    "text": "I guess know this method values this method values it returns all the values of the eneration and in Java virtual",
    "start": "1327400",
    "end": "1335039"
  },
  {
    "text": "machine specification we already saw that indeed those those methods are not marked as synthetic even though they",
    "start": "1335039",
    "end": "1342120"
  },
  {
    "text": "generated why because you users should be able to call those methods",
    "start": "1342120",
    "end": "1348960"
  },
  {
    "text": "but and there is Method value of but unfortunately you're not Al you're not",
    "start": "1348960",
    "end": "1355240"
  },
  {
    "text": "interested in seeing code coverage for those methods because well let's trust the compiler compiler does the right job",
    "start": "1355240",
    "end": "1362200"
  },
  {
    "text": "here why for every you know we need to test exactly the same implementation of exactly the same methods so we",
    "start": "1362200",
    "end": "1369000"
  },
  {
    "text": "developers of bite Cod analyzis tool should adapt to this and also somehow",
    "start": "1369000",
    "end": "1374559"
  },
  {
    "text": "realize that oh yes you're looking on the en in the en we should ignore the following methods even though they are",
    "start": "1374559",
    "end": "1381320"
  },
  {
    "text": "not Market as synthetic and here is also Constructors that have thats have and",
    "start": "1381320",
    "end": "1388159"
  },
  {
    "text": "static inzer to iniz uh Fields etc etc so yes uh some time ago we wasn't",
    "start": "1388159",
    "end": "1395960"
  },
  {
    "text": "ignoring those methods and users were not happy with this we started to ignore them uh we didn't realize that that",
    "start": "1395960",
    "end": "1402159"
  },
  {
    "text": "there is some users that like to use yums which do not have yum constants so",
    "start": "1402159",
    "end": "1408720"
  },
  {
    "text": "the in Constructor is never executed I don't know why they like such en but this happen so we need to also ignore",
    "start": "1408720",
    "end": "1415640"
  },
  {
    "text": "the Constructor and here is how code coverage report evolves let's move on this one should be",
    "start": "1415640",
    "end": "1422480"
  },
  {
    "text": "easy after we saw all the previous ones I hope you warm it up enough records",
    "start": "1422480",
    "end": "1427640"
  },
  {
    "text": "Java 14 another wonderful feature I appear it in quite recent Java version",
    "start": "1427640",
    "end": "1434240"
  },
  {
    "text": "records if we compile such simple record we're going to see a lot lot of generated stuff which is not synthetic",
    "start": "1434240",
    "end": "1440200"
  },
  {
    "text": "we are going to see yeah a lot I need to move to zoom in is it visible fun I need",
    "start": "1440200",
    "end": "1445880"
  },
  {
    "text": "to zoom in even more we're going to see field we're going to see Constructor",
    "start": "1445880",
    "end": "1451559"
  },
  {
    "text": "we're going to see two strength method generated first hash code method equals",
    "start": "1451559",
    "end": "1458279"
  },
  {
    "text": "g all of this we need to ignore but let's move on do we have something more",
    "start": "1458279",
    "end": "1464799"
  },
  {
    "text": "interesting than just ignoring the methods let's come back to my again",
    "start": "1464799",
    "end": "1470120"
  },
  {
    "text": "favorite Java 8 version another wonderful feature introduced in Java 8 was switch by string so here is a switch",
    "start": "1470120",
    "end": "1478520"
  },
  {
    "text": "it's done by a string and this switch has three cases right case r and case b",
    "start": "1478520",
    "end": "1486679"
  },
  {
    "text": "and a default pretty simple let's have a look what happens in the bite Cod let's zoom",
    "start": "1486679",
    "end": "1494000"
  },
  {
    "text": "in still probably not visible let's move in more there was only one switch",
    "start": "1494000",
    "end": "1500960"
  },
  {
    "text": "right but in the bite codes there is two switches",
    "start": "1500960",
    "end": "1506480"
  },
  {
    "text": "why we've WR just one switch what happens here what's interesting is that",
    "start": "1506480",
    "end": "1511679"
  },
  {
    "text": "the first switch is done by a hash cut why so well",
    "start": "1511679",
    "end": "1519240"
  },
  {
    "text": "apparently and yes here is a switch apparently it's very efficient to",
    "start": "1519240",
    "end": "1524720"
  },
  {
    "text": "implement switch by string using HH cut with a high probability all our strings",
    "start": "1524720",
    "end": "1530880"
  },
  {
    "text": "are going to have a distance hash codes so if we do a switch by a hash Cod we",
    "start": "1530880",
    "end": "1536919"
  },
  {
    "text": "would probably already choose the right case of course it's not always true",
    "start": "1536919",
    "end": "1542960"
  },
  {
    "text": "because sometimes we can have hash collisions and some strings might have exactly the same hash code so we need to",
    "start": "1542960",
    "end": "1550200"
  },
  {
    "text": "do also some comparisons to verify that indeed it's a string with the given hash",
    "start": "1550200",
    "end": "1555440"
  },
  {
    "text": "Cod and expected string in this particular case it happened that I choose two strings whose cash Cod is",
    "start": "1555440",
    "end": "1562159"
  },
  {
    "text": "exactly the same so here is the two comparisons for exactly the same HH cut and the second switch is what finally",
    "start": "1562159",
    "end": "1570240"
  },
  {
    "text": "happens we determine it which string it is and here is first case here is the",
    "start": "1570240",
    "end": "1576000"
  },
  {
    "text": "second case and here is third case and you can imagine without anything done on our",
    "start": "1576000",
    "end": "1583320"
  },
  {
    "text": "site users are going to see all of these branches they're going to see two switches and they're going to see all",
    "start": "1583320",
    "end": "1590080"
  },
  {
    "text": "the ifs and they're going to wonder why there is nine branches I just wrote one",
    "start": "1590080",
    "end": "1595399"
  },
  {
    "text": "switch with three conditions right so I expect to see three not nine and how the",
    "start": "1595399",
    "end": "1601559"
  },
  {
    "text": "hell I should cover the remaining branches and all those remaining branches is for the cases when hash Cod",
    "start": "1601559",
    "end": "1608159"
  },
  {
    "text": "collisions happen so we also need to write some more sophisticated filters that finds a switch by string by hash",
    "start": "1608159",
    "end": "1616480"
  },
  {
    "text": "Cod and filters it out saying yeah please don't worry all good all fine",
    "start": "1616480",
    "end": "1622360"
  },
  {
    "text": "there is just three conditions in your code no more let's move on Java",
    "start": "1622360",
    "end": "1629240"
  },
  {
    "text": "12 Java 12 introduced as another wonderful feature oops sorry uh switch",
    "start": "1629240",
    "end": "1635880"
  },
  {
    "text": "Expressions now we don't need to write a default case anymore if our switch is",
    "start": "1635880",
    "end": "1641120"
  },
  {
    "text": "exhaustive if we listed for example all the possible cases of enumeration there is no default any previously we had a",
    "start": "1641120",
    "end": "1648039"
  },
  {
    "text": "default now we don't so what happens in the bite cut let's zoom in there is",
    "start": "1648039",
    "end": "1653799"
  },
  {
    "text": "still three cases why so we've wrote two well we",
    "start": "1653799",
    "end": "1659640"
  },
  {
    "text": "cannot leave default not implemented again split compilation what if I recompile it inum separately from the",
    "start": "1659640",
    "end": "1666600"
  },
  {
    "text": "switch a new case might appear and will be triggered at a turn time what we expect to happen well pretty same",
    "start": "1666600",
    "end": "1674440"
  },
  {
    "text": "implementation generated here we expect exception to happen and this exception",
    "start": "1674440",
    "end": "1679519"
  },
  {
    "text": "was uh for quite some time in compatible class change error if I'm not mistaken in Java 21 it's much",
    "start": "1679519",
    "end": "1686320"
  },
  {
    "text": "exception boom and by the way speaking about pattern matching about match",
    "start": "1686320",
    "end": "1692320"
  },
  {
    "text": "exceptions Java 14 also brought us another preview feature which is pattern matching now we can write inside of an",
    "start": "1692320",
    "end": "1699360"
  },
  {
    "text": "if instance of do the pattern matching by type and then",
    "start": "1699360",
    "end": "1705039"
  },
  {
    "text": "operate with this variable s if it is of the following typee if you compile such",
    "start": "1705039",
    "end": "1711440"
  },
  {
    "text": "a simple example if you decompile it look inside what's going to happen here I use Java 14 preview feature so minor",
    "start": "1711440",
    "end": "1719240"
  },
  {
    "text": "turns into the magic number 65,000 here is our example here's",
    "start": "1719240",
    "end": "1725440"
  },
  {
    "text": "condition instance off that's it that's what we expected we've wrote instance",
    "start": "1725440",
    "end": "1730480"
  },
  {
    "text": "off there is instance of wait a second there is another",
    "start": "1730480",
    "end": "1735880"
  },
  {
    "text": "condition what what the hell well apparently you can implement the feature",
    "start": "1736200",
    "end": "1741679"
  },
  {
    "text": "pattern matching for instance of by source to Source translation exactly the same if you could write it using my",
    "start": "1741679",
    "end": "1749320"
  },
  {
    "text": "favorite Java 8 version using the following",
    "start": "1749320",
    "end": "1754399"
  },
  {
    "text": "construction there is a second condition this second condition allows to assign",
    "start": "1754519",
    "end": "1759559"
  },
  {
    "text": "value to a variable that you would be able to use inside of the if body but this second condition has no sense",
    "start": "1759559",
    "end": "1765559"
  },
  {
    "text": "because it always evaluates to true this is dead Cod and what actually",
    "start": "1765559",
    "end": "1772480"
  },
  {
    "text": "happened with all bite cot analyzis tools when this feature was implemented tools like handbags FBS uh Etc jao they",
    "start": "1772480",
    "end": "1780440"
  },
  {
    "text": "started to detect this second Branch FB started to complain well you have a de",
    "start": "1780440",
    "end": "1785919"
  },
  {
    "text": "cut in your program whereas we did not jao started to complain well there is uncovered Cod whereas there was no",
    "start": "1785919",
    "end": "1793519"
  },
  {
    "text": "uncovered Cod here it is so we repated it back to to GDK developers uh thanks",
    "start": "1793519",
    "end": "1799600"
  },
  {
    "text": "God this was a preview feature so it could uh be fixed quickly without users even noticing it and it got fix it so in",
    "start": "1799600",
    "end": "1806679"
  },
  {
    "text": "Java 16 all this turn it into pretty simple pretty neat construction so Java",
    "start": "1806679",
    "end": "1812559"
  },
  {
    "text": "16 no more preview features here is our method example and there is only one condition exactly as",
    "start": "1812559",
    "end": "1819640"
  },
  {
    "text": "expected Java 17 we continue with pattern matching Java 17 brought to us",
    "start": "1819640",
    "end": "1825159"
  },
  {
    "text": "another preview feature pattern matching for switch Expressions so here is a switch by object we can do pattern",
    "start": "1825159",
    "end": "1831679"
  },
  {
    "text": "matching by a type we could also have some conditions pretty neat pretty simple right if you compile all of this",
    "start": "1831679",
    "end": "1839000"
  },
  {
    "text": "what we're going to see again Java 17 preview quite big method here is",
    "start": "1839000",
    "end": "1846279"
  },
  {
    "text": "switch here is a condition of a first case body of a first case if the if",
    "start": "1846279",
    "end": "1853000"
  },
  {
    "text": "there is no much on the first case there is use of invoke dynamic instruction the",
    "start": "1853000",
    "end": "1858039"
  },
  {
    "text": "same instruction that is used for lambdas but that's not interesting uh what is more interesting is line number",
    "start": "1858039",
    "end": "1865399"
  },
  {
    "text": "table there is a problem with line number table Can you spot it I bet no because I also can't you",
    "start": "1865399",
    "end": "1873240"
  },
  {
    "text": "need to visualize this first how to visualize this well you need to step in the debugger through all the lines of",
    "start": "1873240",
    "end": "1880919"
  },
  {
    "text": "this class and when you do so you would be quite surpris surprised at which",
    "start": "1880919",
    "end": "1886000"
  },
  {
    "text": "lines the bagger highlight it's not at all the lines you expect and that was a mistake introduced in this",
    "start": "1886000",
    "end": "1892919"
  },
  {
    "text": "feature and this time we was quite fast on testing this we provided the feedback",
    "start": "1892919",
    "end": "1898159"
  },
  {
    "text": "even before this feature was integrated it was a comment on the pool request and",
    "start": "1898159",
    "end": "1904000"
  },
  {
    "text": "this problem was fixed even before you received it a preview feature pretty n",
    "start": "1904000",
    "end": "1909120"
  },
  {
    "text": "pretty nice right and here finally we come to finally what an",
    "start": "1909120",
    "end": "1914600"
  },
  {
    "text": "irony pretty simple construction right it exists since I don't know since my favorite Java 8 version and even",
    "start": "1914600",
    "end": "1921080"
  },
  {
    "text": "probably before we have a tri cage block and we have a finally inside try body we",
    "start": "1921080",
    "end": "1927519"
  },
  {
    "text": "do call a method knob inside final finally body we we do call the same method knob pretty simple if we compile",
    "start": "1927519",
    "end": "1934799"
  },
  {
    "text": "it and decompile and look inside here is what we're going to see we're going to see fre invocations of method knob wait",
    "start": "1934799",
    "end": "1941360"
  },
  {
    "text": "a second we saw two right or three let's check how many methods s",
    "start": "1941360",
    "end": "1947679"
  },
  {
    "text": "do we see on the slide I do C3 but the third one doesn't count right",
    "start": "1947679",
    "end": "1953360"
  },
  {
    "text": "it's a method declaration so there is only two well to help us let's uh let's",
    "start": "1953360",
    "end": "1958960"
  },
  {
    "text": "introduce some markers let's add an argument inside of a try body we're",
    "start": "1958960",
    "end": "1964279"
  },
  {
    "text": "going to use a string try inside of a finally body we're going to use a string finally let's compile this one let's",
    "start": "1964279",
    "end": "1972240"
  },
  {
    "text": "change it let me highlight it there is one trib",
    "start": "1972240",
    "end": "1977799"
  },
  {
    "text": "and to finally why this well this is implementation details of",
    "start": "1977799",
    "end": "1985720"
  },
  {
    "text": "try finally apparently on the bite code level there is no such construction as",
    "start": "1985720",
    "end": "1991000"
  },
  {
    "text": "finally the only construction that exist in the bite code is exception table exception table says if exception",
    "start": "1991000",
    "end": "1998159"
  },
  {
    "text": "happened from the following bite code instruction to the following B Cod instruction of the following type of",
    "start": "1998159",
    "end": "2004519"
  },
  {
    "text": "exception then use the following except Handler this is a",
    "start": "2004519",
    "end": "2010279"
  },
  {
    "text": "catch how using a catch to implement finally finally should be executed when exception happen it and when exception",
    "start": "2010279",
    "end": "2016880"
  },
  {
    "text": "didn't happen right so here is how we Implement finally in case of exception",
    "start": "2016880",
    "end": "2023399"
  },
  {
    "text": "we use exception table here is exception Handler all good in case if there is no",
    "start": "2023399",
    "end": "2029799"
  },
  {
    "text": "exception we still needs to insert body of a final to execute it so come",
    "start": "2029799",
    "end": "2037000"
  },
  {
    "text": "compiler on behalf of you does some code duplication pretty neat right and at",
    "start": "2037000",
    "end": "2043159"
  },
  {
    "text": "home you might try something interesting with this you can try to Nest try finally inside of a finally and the",
    "start": "2043159",
    "end": "2051118"
  },
  {
    "text": "growth of this cot is you can understand it's exponential so at some moment in time you will probably reach a limit on",
    "start": "2051119",
    "end": "2058320"
  },
  {
    "text": "the method in Java that's why it's one of the bad ideas to call try finally",
    "start": "2058320",
    "end": "2065760"
  },
  {
    "text": "inside of a finally again the same thing happens but we need to write even more sophisticated filter",
    "start": "2065760",
    "end": "2071960"
  },
  {
    "text": "which will find code duplicates inside of your code that corresponds to the",
    "start": "2071960",
    "end": "2077560"
  },
  {
    "text": "finally blocks and would merge them together because well users don't expect to test non-exceptional pass exceptional",
    "start": "2077560",
    "end": "2084599"
  },
  {
    "text": "pass sometimes you cannot test all of them because some conditions are only true on exceptional pass some conditions",
    "start": "2084599",
    "end": "2091358"
  },
  {
    "text": "are only true on non- exceptional path so we write filter again to pretend don't worry there is no duplicates in",
    "start": "2091359",
    "end": "2097760"
  },
  {
    "text": "your code a little bit of archology java 1.4",
    "start": "2097760",
    "end": "2104000"
  },
  {
    "text": "I don't know if you remember it I do remember and in Java 1.4 what's",
    "start": "2104000",
    "end": "2110800"
  },
  {
    "text": "interesting it was possible to implement try finally without",
    "start": "2110800",
    "end": "2117240"
  },
  {
    "text": "duplication apparently it was enough to use exception Handler and a neat feature",
    "start": "2117240",
    "end": "2124200"
  },
  {
    "text": "of java 1.4 GSR and red instructions Java sub routines",
    "start": "2124200",
    "end": "2129880"
  },
  {
    "text": "apparently in Java 1.4 it was possible to have functions inside of",
    "start": "2129880",
    "end": "2135280"
  },
  {
    "text": "functions if you're interested in this feature and would like to learn a little",
    "start": "2135280",
    "end": "2140560"
  },
  {
    "text": "bit about archaeology I could recommend uh another presentation of my friend",
    "start": "2140560",
    "end": "2146599"
  },
  {
    "text": "about bite Cod verification but let's move on and now I hope you really warm it up",
    "start": "2146599",
    "end": "2154599"
  },
  {
    "text": "are you let's have a look at final",
    "start": "2154599",
    "end": "2159760"
  },
  {
    "text": "examples and let's embrace them dver resources PR NE feature when was it",
    "start": "2159760",
    "end": "2167400"
  },
  {
    "text": "introduced if you're going to say Java 8 your favorite Java version no you're going to be wrong Tri resources were",
    "start": "2167400",
    "end": "2173720"
  },
  {
    "text": "actually introduced in Java 7 ders resources are pretty nice they allow us",
    "start": "2173720",
    "end": "2179040"
  },
  {
    "text": "to declare resource to say this resource is closable Implement a method close and",
    "start": "2179040",
    "end": "2186119"
  },
  {
    "text": "to use uh dve resources construction passing an instance of our resource with",
    "start": "2186119",
    "end": "2191319"
  },
  {
    "text": "a guarantee that once we don't need this resource the method close is going to be C and can close all the files all the",
    "start": "2191319",
    "end": "2199800"
  },
  {
    "text": "connections to database etc etc right pretty need feature without it it was",
    "start": "2199800",
    "end": "2205599"
  },
  {
    "text": "quite cumbersome to write uh exception handling when resources are involved",
    "start": "2205599",
    "end": "2210760"
  },
  {
    "text": "right what happens if we compile this source code we're going to get such a big piece",
    "start": "2210760",
    "end": "2217560"
  },
  {
    "text": "of the bite cut you probably couldn't even see what's written at least I could not let's zoom in does it help well no",
    "start": "2217560",
    "end": "2225160"
  },
  {
    "text": "let's zoom in more there is four times call of a method close why four times",
    "start": "2225160",
    "end": "2233160"
  },
  {
    "text": "well pretty simple we know that we need to close the resource so let's call the method close four times to be sure that",
    "start": "2233160",
    "end": "2240480"
  },
  {
    "text": "we closed the resource right no probably not we need to look closer there is also",
    "start": "2240480",
    "end": "2245839"
  },
  {
    "text": "some checks if something is not now it's quite hard to investigate looking on the bite code so let's try to find some",
    "start": "2245839",
    "end": "2253359"
  },
  {
    "text": "clues for this and this time I don't know why I don't know why for lambdas there was no clues in Java language",
    "start": "2253359",
    "end": "2259720"
  },
  {
    "text": "specification but in case of Tri is resources there is a clue in the specification the meaning of a basic",
    "start": "2259720",
    "end": "2266480"
  },
  {
    "text": "trive is resources statement like the one we've just seen is given by the following translation to a local",
    "start": "2266480",
    "end": "2272280"
  },
  {
    "text": "variable declaration and a try catch final statement da da da and the following piece of cut so the example",
    "start": "2272280",
    "end": "2279560"
  },
  {
    "text": "that we've just seen is semantically equivalent to this",
    "start": "2279560",
    "end": "2285359"
  },
  {
    "text": "C cut it does exactly the same thing at this moment in time you could",
    "start": "2285359",
    "end": "2291000"
  },
  {
    "text": "ask can I prove it well I can prove it let me try",
    "start": "2291000",
    "end": "2296480"
  },
  {
    "start": "2295000",
    "end": "2622000"
  },
  {
    "text": "so what we have here I have one one it's exactly TR",
    "start": "2296480",
    "end": "2302200"
  },
  {
    "text": "resources that you've just seen I have fun to it's exactly the B that we also",
    "start": "2302200",
    "end": "2308000"
  },
  {
    "text": "just seen if we compile fun one and decompile it uh what's the name of the",
    "start": "2308000",
    "end": "2316319"
  },
  {
    "text": "class example and safe result of compilation uh decompilation in one",
    "start": "2316319",
    "end": "2323240"
  },
  {
    "text": "txt if you do exactly the same with fun two and save result of De compilation on",
    "start": "2323240",
    "end": "2329200"
  },
  {
    "text": "2 txt and we try to look at the",
    "start": "2329200",
    "end": "2334200"
  },
  {
    "text": "difference uh something didn't went right let me",
    "start": "2335520",
    "end": "2342480"
  },
  {
    "text": "try",
    "start": "2342480",
    "end": "2344880"
  },
  {
    "text": "again example and fun",
    "start": "2350400",
    "end": "2357200"
  },
  {
    "text": "example one and fun",
    "start": "2357200",
    "end": "2365040"
  },
  {
    "text": "two",
    "start": "2365440",
    "end": "2368440"
  },
  {
    "text": "ah right why you're not helping me um we did not use it my wonderful",
    "start": "2373560",
    "end": "2380880"
  },
  {
    "text": "options for the decompilation minus Vier bus minus P show me",
    "start": "2380880",
    "end": "2387599"
  },
  {
    "text": "everything so we really want to see everything what happens",
    "start": "2387599",
    "end": "2394200"
  },
  {
    "text": "here bum they are different but how they are different of",
    "start": "2395400",
    "end": "2402240"
  },
  {
    "text": "course modification time changed because I haven't done compilation at exactly the same time of course they produ it",
    "start": "2402240",
    "end": "2408160"
  },
  {
    "text": "from two different source files but that's pretty much it the rest is line",
    "start": "2408160",
    "end": "2413319"
  },
  {
    "text": "number changes of course they have different line numbers but all other bite code is",
    "start": "2413319",
    "end": "2419119"
  },
  {
    "text": "exactly the same only line number changes so if we go back to this example",
    "start": "2419119",
    "end": "2425440"
  },
  {
    "text": "compilation of this Cod on the bite Cod level is a pure equivalent to drive the",
    "start": "2425440",
    "end": "2432359"
  },
  {
    "text": "sources what does it mean for bite Cod analyzis tool like our Cod coverage tool",
    "start": "2432359",
    "end": "2439040"
  },
  {
    "text": "we cannot distinguish those two from each other they're",
    "start": "2439040",
    "end": "2444680"
  },
  {
    "text": "identical so what we do yes we do Implement filter which finds such a pattern in the bite coton says well this",
    "start": "2444680",
    "end": "2452319"
  },
  {
    "text": "should be triy with resources and we filter it out without showing all the branches pretending that there is no Cod",
    "start": "2452319",
    "end": "2458560"
  },
  {
    "text": "duplicates etc etc etc but if you will write such a source Cod we will also",
    "start": "2458560",
    "end": "2465920"
  },
  {
    "text": "find driver's resources in the bite Cod and filter it out and you wouldn't see coverage for",
    "start": "2465920",
    "end": "2472040"
  },
  {
    "text": "the such code thankfully it's all right because",
    "start": "2472040",
    "end": "2477319"
  },
  {
    "text": "if you was able to write such a source code then you probably know how to write it then probably you don't need to test",
    "start": "2477319",
    "end": "2483359"
  },
  {
    "text": "it if it compiles to exactly the same by C compiler does again you don't need to",
    "start": "2483359",
    "end": "2488800"
  },
  {
    "text": "test it so you don't need to see code coverage for it and so far nobody complain it so we are",
    "start": "2488800",
    "end": "2494160"
  },
  {
    "text": "safe um let's have a look what happens in this source code why trve the sources",
    "start": "2494160",
    "end": "2500119"
  },
  {
    "text": "compiles like this there is a TR cat if exception happens we need to",
    "start": "2500119",
    "end": "2505839"
  },
  {
    "text": "remember this exception there is a finally and you remember from the previous example that finally are going",
    "start": "2505839",
    "end": "2511880"
  },
  {
    "text": "to be duplicated on all the paes of all the except ceptions and plus on non-",
    "start": "2511880",
    "end": "2518480"
  },
  {
    "text": "exceptional pass and inight of this finally we do some ifs in case of",
    "start": "2518480",
    "end": "2524520"
  },
  {
    "text": "exception happen it we need to close the resource and if during closing of resource exception again happened we",
    "start": "2524520",
    "end": "2530720"
  },
  {
    "text": "need to attach one exception to the other in case if there was no exception",
    "start": "2530720",
    "end": "2535800"
  },
  {
    "text": "we just need to close the resource and just let exception propagate and well we",
    "start": "2535800",
    "end": "2541280"
  },
  {
    "text": "for some reason check whether the resource is null or not but in this particular case compiler knows that it",
    "start": "2541280",
    "end": "2546559"
  },
  {
    "text": "cannot be now so there is a dead cut there is another dead cut if exception",
    "start": "2546559",
    "end": "2552119"
  },
  {
    "text": "happened and we in line finally inside of a catch we don't need this",
    "start": "2552119",
    "end": "2557520"
  },
  {
    "text": "condition because exception always happens in the catch we just catched this exception so there is another dead",
    "start": "2557520",
    "end": "2563720"
  },
  {
    "text": "Cod again all by Cod analyzers tool would complain on this example that there is some dead cut this is exactly",
    "start": "2563720",
    "end": "2569960"
  },
  {
    "text": "what was happening so GDK did some improvements and uh Java 7 Tres",
    "start": "2569960",
    "end": "2575800"
  },
  {
    "text": "resources was introduced with Java 8 it was improved instead of four EES that",
    "start": "2575800",
    "end": "2582119"
  },
  {
    "text": "we've seen before we now get two and future improvements uh if you",
    "start": "2582119",
    "end": "2587400"
  },
  {
    "text": "use Java compiler 11 but still Target Java 8 we're going to see Zero",
    "start": "2587400",
    "end": "2595280"
  },
  {
    "text": "ifs that's need and this is exactly why we need to test our tool on such wide",
    "start": "2595280",
    "end": "2600720"
  },
  {
    "text": "range of the compilers because well even from compiler version to the compiler version the patterns that we are looking",
    "start": "2600720",
    "end": "2607559"
  },
  {
    "text": "for that they are changing so that's exactly what happens",
    "start": "2607559",
    "end": "2612920"
  },
  {
    "text": "we implemented the filter and we pretend that well you do not have such a big",
    "start": "2612920",
    "end": "2619359"
  },
  {
    "text": "piece of code under the Trib resource here we come to",
    "start": "2619359",
    "end": "2625400"
  },
  {
    "start": "2622000",
    "end": "2755000"
  },
  {
    "text": "conclusion source code is not bite Cod please be careful what you see in tools",
    "start": "2625400",
    "end": "2632640"
  },
  {
    "text": "that are based on the bite Cod analyzis is not at all what you write in the",
    "start": "2632640",
    "end": "2637960"
  },
  {
    "text": "source code please be careful and the source code is not actually what is",
    "start": "2637960",
    "end": "2643640"
  },
  {
    "text": "going to be executed gvm is going to execute bite code and even this is not",
    "start": "2643640",
    "end": "2650680"
  },
  {
    "text": "true because you know there is jit jit is going to come jit is going to compile bite code to the native code and execute",
    "start": "2650680",
    "end": "2658240"
  },
  {
    "text": "even not a bite code but the compiled native code so please be careful there",
    "start": "2658240",
    "end": "2663280"
  },
  {
    "text": "is dragons we've seen that quite a lot of information is generated on behalf of us this could lead to not only strange",
    "start": "2663280",
    "end": "2671160"
  },
  {
    "text": "Cod coverage reports this could lead to degraded performance in the places where we don't expect it like with nested",
    "start": "2671160",
    "end": "2677640"
  },
  {
    "text": "classes there is additional methods Etc and well bite code based tools such",
    "start": "2677640",
    "end": "2684160"
  },
  {
    "text": "as find bux hbx jaoko they have to guess what they see in the bite code they have",
    "start": "2684160",
    "end": "2690119"
  },
  {
    "text": "to guess what user wrote In The Source Code so please bear with us we have to live with this we developers of those",
    "start": "2690119",
    "end": "2697160"
  },
  {
    "text": "tools has have to adapt have to develop some filters for you and you developers",
    "start": "2697160",
    "end": "2702480"
  },
  {
    "text": "users of those tools you also should live with it so please next time when",
    "start": "2702480",
    "end": "2708000"
  },
  {
    "text": "you find something strange in COD coverage tool or in uh your favorite uh",
    "start": "2708000",
    "end": "2714319"
  },
  {
    "text": "bu hunting tool like fbx that analyzes bite code please don't come to the developers of this tool screaming oh oh",
    "start": "2714319",
    "end": "2720880"
  },
  {
    "text": "it doesn't work no it works but it works just on a different level",
    "start": "2720880",
    "end": "2726640"
  },
  {
    "text": "instead of saying it doesn't work now you know how to investigate so you could",
    "start": "2726640",
    "end": "2732079"
  },
  {
    "text": "compile decompile look inside and come with the reper saying look what I found",
    "start": "2732079",
    "end": "2737839"
  },
  {
    "text": "pretty neat pretty interesting could you please do something with this and that's",
    "start": "2737839",
    "end": "2743440"
  },
  {
    "text": "it thank you for coming and if you have any questions we don't have time but you",
    "start": "2743440",
    "end": "2749000"
  },
  {
    "text": "could catch me outside and talk about whatever you",
    "start": "2749000",
    "end": "2754680"
  },
  {
    "text": "want",
    "start": "2754880",
    "end": "2757880"
  }
]