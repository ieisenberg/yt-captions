[
  {
    "start": "0",
    "end": "98000"
  },
  {
    "text": "[Music]",
    "start": "970",
    "end": "7838"
  },
  {
    "text": "good good hi there and welcome to Kotlin four",
    "start": "18170",
    "end": "23520"
  },
  {
    "text": "versus Scala 3 which is higher quality so we need to say at the outset we do new it's complet 1.4 but we just made it",
    "start": "23520",
    "end": "30960"
  },
  {
    "text": "four for the title because it's signed it a lot better so yes we lied always a good way to start a talk so I'm Garth",
    "start": "30960",
    "end": "37800"
  },
  {
    "text": "and this is Eamonn and we are presenting to you from Abu - no Slough absolutely",
    "start": "37800",
    "end": "43410"
  },
  {
    "text": "look at a seagull so let me tell you a little bit about myself I was a",
    "start": "43410",
    "end": "48809"
  },
  {
    "text": "full-time software developer for about six years and then the opportunity came up to give this a go and that was 15",
    "start": "48809",
    "end": "54629"
  },
  {
    "text": "years and a thousand deliveries ago which is a little bit terrifying so I've been doing training for a long time I'll",
    "start": "54629",
    "end": "60960"
  },
  {
    "text": "also do coaching mentoring a little bit of contract development to try and keep my skills sharp aim and you wanna say a",
    "start": "60960",
    "end": "68040"
  },
  {
    "text": "few things about yourself yeah I haven't been training for as long as Garth I've been training for about three and a half",
    "start": "68040",
    "end": "73350"
  },
  {
    "text": "years now doing a development as well on the side prior data but 15 years experience there are different forms of",
    "start": "73350",
    "end": "79500"
  },
  {
    "text": "development not C++ C I love Kotlin I love typescript I hear that the scale is",
    "start": "79500",
    "end": "87030"
  },
  {
    "text": "a nice language he talks about it ya know so love coding love training yeah",
    "start": "87030",
    "end": "94770"
  },
  {
    "text": "very good we'll convert you yet yeah so we both work for a company called it's still based out of Belfast which is",
    "start": "94770",
    "end": "101369"
  },
  {
    "start": "98000",
    "end": "123000"
  },
  {
    "text": "definitely where we aren't at the moment and we we do lots of projects we do",
    "start": "101369",
    "end": "106619"
  },
  {
    "text": "client web apps we started off doing lots and lots of Android we teach courses we do coaching and training the",
    "start": "106619",
    "end": "113909"
  },
  {
    "text": "usual stuff so you can find us online at instill docker and these are our wonderful offices where we aren't and",
    "start": "113909",
    "end": "119909"
  },
  {
    "text": "these are some of the people that we've done work for so this course is all about quality I'm a philosopher by",
    "start": "119909",
    "end": "126780"
  },
  {
    "start": "123000",
    "end": "187000"
  },
  {
    "text": "training so I really encourage you to read zen and the art of motorcycle maintenance or Zed a man versus",
    "start": "126780",
    "end": "132319"
  },
  {
    "text": "in the dread and that the follow-up book called Lila which is all about definitions of quality and the key thing",
    "start": "132319",
    "end": "139010"
  },
  {
    "text": "is that quality is an event are very relevant these days in architectural terms so quality isn't something that",
    "start": "139010",
    "end": "145219"
  },
  {
    "text": "you sit down and define quality is an event that you encounter you knew it you",
    "start": "145219",
    "end": "150230"
  },
  {
    "text": "know it's a bit like the lion in the room great quote from Hannibal you know when it's there I assure you you will",
    "start": "150230",
    "end": "156140"
  },
  {
    "text": "know so we all know quality when it confronts us in code yeah but it's very hard to give an intellectual definition",
    "start": "156140",
    "end": "162590"
  },
  {
    "text": "of what it is but we're going to be talking about quality in Kotlin and Scala so two hoses both alike in dignity",
    "start": "162590",
    "end": "170090"
  },
  {
    "text": "and fair JVM land where we lay our scene so we have these two languages that we",
    "start": "170090",
    "end": "176450"
  },
  {
    "text": "want to stack up against one another and I'll start off with Scala and so this is",
    "start": "176450",
    "end": "188569"
  },
  {
    "start": "187000",
    "end": "262000"
  },
  {
    "text": "how I first learned scallop programming in Scala by ultimate so if you look at the watermark on the side you can see",
    "start": "188569",
    "end": "194480"
  },
  {
    "text": "that's my personal PDF prepared for me by little demons and the internet back",
    "start": "194480",
    "end": "199729"
  },
  {
    "text": "in about 2006 and then in about 2008 articles like this started coming out",
    "start": "199729",
    "end": "206090"
  },
  {
    "text": "very nice one here nice series by Ted nerd used to recommend this to anybody",
    "start": "206090",
    "end": "211639"
  },
  {
    "text": "wanting to learn about Scala so absolutely wonderful language it was where I first started to learn about",
    "start": "211639",
    "end": "217909"
  },
  {
    "text": "functional programming really impressed me from the beginning spent an awful lot of time learning it",
    "start": "217909",
    "end": "223760"
  },
  {
    "text": "trying to use it in projects and then going out and teaching it so back in 2011 I was gainfully employed teaching",
    "start": "223760",
    "end": "231199"
  },
  {
    "text": "Scala courses and here's an example from the scale of course I had at the time",
    "start": "231199",
    "end": "236419"
  },
  {
    "text": "and as you can see there were doing pattern matching on XML it was acceptable at the time you know okay can",
    "start": "236419",
    "end": "242870"
  },
  {
    "text": "I also just say as well this is an example of what happens whenever you have developers doing design work so big",
    "start": "242870",
    "end": "249889"
  },
  {
    "text": "share duties and help us improve the designer were slaves because otherwise they would look like this then they",
    "start": "249889",
    "end": "255799"
  },
  {
    "text": "would look like this yes so yes thank you very much Jason for cleaning up my horrible slides cool",
    "start": "255799",
    "end": "262320"
  },
  {
    "start": "262000",
    "end": "345000"
  },
  {
    "text": "so Scala was the heir apparent to Java everybody thought it was going to take",
    "start": "262320",
    "end": "267990"
  },
  {
    "text": "over everybody used it thought it was really good and then it seems to fallen out of favor you know so amongst",
    "start": "267990",
    "end": "274410"
  },
  {
    "text": "mainstream Enterprise Development scholars and used half as much as it used to be and a good example of this as",
    "start": "274410",
    "end": "281220"
  },
  {
    "text": "you go to the spring initializer so as you know most enterprise developers are using the the spring platform these days",
    "start": "281220",
    "end": "287490"
  },
  {
    "text": "and some sheer perform so if you go to the spring initializer to create a new project well you can use Java Kotlin or",
    "start": "287490",
    "end": "294330"
  },
  {
    "text": "groovy as your language and support for Scala well that's gone to the Attic okay",
    "start": "294330",
    "end": "300750"
  },
  {
    "text": "so that's an eye on that the second image there way down the bottom and is no longer formally supported so why did",
    "start": "300750",
    "end": "308190"
  },
  {
    "text": "this happen so why did Scala decline so a nice Shakespearean quote here a rather",
    "start": "308190",
    "end": "314040"
  },
  {
    "text": "Luke she experienced it's got by a guy called Gavin Ezra and he used it for",
    "start": "314040",
    "end": "319290"
  },
  {
    "text": "Michael Heseltine whenever Thatcher was being deposed from being p.m. in the UK and the 80s so that the hand that wields",
    "start": "319290",
    "end": "326760"
  },
  {
    "text": "the knife shall never aware of the crime in other words that the characteristics that make you the person who knocks the",
    "start": "326760",
    "end": "333750"
  },
  {
    "text": "king or queen off the throne well those kind of disqualify you from being the successor so maybe Scala was too novel too radical",
    "start": "333750",
    "end": "342030"
  },
  {
    "text": "too functional back in the day so things have changed Knight we've got scale of",
    "start": "342030",
    "end": "348270"
  },
  {
    "start": "345000",
    "end": "425000"
  },
  {
    "text": "three we've got a brand new Scala compiler rewritten from scratch for",
    "start": "348270",
    "end": "353430"
  },
  {
    "text": "speed for correctness the language has been simplified and extended an awful",
    "start": "353430",
    "end": "358919"
  },
  {
    "text": "awful lot of changes have been made so they've taken out some unpopular and redundant features they've added new",
    "start": "358919",
    "end": "365040"
  },
  {
    "text": "features that reflect how popular functional programming is these days and then features that were good but were",
    "start": "365040",
    "end": "372230"
  },
  {
    "text": "implemented in a slightly dodgy way like implicit sand macros and so on",
    "start": "372230",
    "end": "377280"
  },
  {
    "text": "been redone so there's an awful lot going on in Scala 3 so everything compiles into a new",
    "start": "377280",
    "end": "383700"
  },
  {
    "text": "intermediate format called TST which is short for typed abstract syntax trees and from that they can generate",
    "start": "383700",
    "end": "390150"
  },
  {
    "text": "JavaScript different versions of bytecode whatever and you can also reflect against through syntax trees and",
    "start": "390150",
    "end": "397139"
  },
  {
    "text": "that's how they've implemented support from a Cruz so there is lots of new and interesting stuff in Scala 3 which I'm",
    "start": "397139",
    "end": "403950"
  },
  {
    "text": "about to run you through so these are the instructions here if you want to start with Scala 3 yourself very",
    "start": "403950",
    "end": "411030"
  },
  {
    "text": "straightforward to do with visual studio code and there's a little application",
    "start": "411030",
    "end": "416880"
  },
  {
    "text": "view which contains all the running demos we're going to show you in the slides and we'll make it available along",
    "start": "416880",
    "end": "422880"
  },
  {
    "text": "with the rest of the top materials so this is the stuff that dice xml literals",
    "start": "422880",
    "end": "429030"
  },
  {
    "start": "425000",
    "end": "464000"
  },
  {
    "text": "you can remember a time and that was a good idea yes you are that old yeah so",
    "start": "429030",
    "end": "435740"
  },
  {
    "text": "xml literals is gone I don't think there'll be any mumbling at the bar because of that yeah and then a bunch of",
    "start": "435740",
    "end": "442919"
  },
  {
    "text": "other things so I delayed in it and the procedure said tax and the do-while loop those are the only ones that you know",
    "start": "442919",
    "end": "449280"
  },
  {
    "text": "most of our us regular Scala developers you'll notice the rest below there a little bit obscure you know you're",
    "start": "449280",
    "end": "455340"
  },
  {
    "text": "probably not using them so glad they took the effort to take out to do oh yeah that's a little story in itself",
    "start": "455340",
    "end": "462120"
  },
  {
    "text": "but but never mind yeah so and just to run you through some of the new features so anything can be declared at the top",
    "start": "462120",
    "end": "469440"
  },
  {
    "start": "464000",
    "end": "501000"
  },
  {
    "text": "level so you no longer need to package things up in an object in some way you",
    "start": "469440",
    "end": "475140"
  },
  {
    "text": "can declare functions you can declare variables and so on right within the file itself so you see here this is the",
    "start": "475140",
    "end": "482340"
  },
  {
    "text": "the user interface for my little demo application so we've got a triple quoted string for the menu and then we've got",
    "start": "482340",
    "end": "489539"
  },
  {
    "text": "the main method which is novel e-enough called fubar so any top-level method can",
    "start": "489539",
    "end": "494610"
  },
  {
    "text": "become the main method as long as you Theatre with me okay interesting feature",
    "start": "494610",
    "end": "501070"
  },
  {
    "start": "501000",
    "end": "540000"
  },
  {
    "text": "and then you don't have to use new anymore so they've added a fourth way of invoking a function what's called create",
    "start": "501070",
    "end": "508550"
  },
  {
    "text": "or applications and this lets you create an instance of a type without saying new without the need to write an apply",
    "start": "508550",
    "end": "515810"
  },
  {
    "text": "method so as to say as is listed here from the language spec there's no forth way to invoke a function so we can now",
    "start": "515810",
    "end": "523700"
  },
  {
    "text": "write code like this so we can have the person type with two constructors and",
    "start": "523700",
    "end": "528920"
  },
  {
    "text": "then inside our little helper method their Creator applications we can create two person objects okay that's very",
    "start": "528920",
    "end": "536840"
  },
  {
    "text": "clean yes reminds me of something and then you can",
    "start": "536840",
    "end": "542060"
  },
  {
    "start": "540000",
    "end": "593000"
  },
  {
    "text": "add extension methods so again if I just go on to the code here I'm going to",
    "start": "542060",
    "end": "547070"
  },
  {
    "text": "extend the string tight by adding a method called times two so that's the syntax for defining an extension method",
    "start": "547070",
    "end": "553460"
  },
  {
    "text": "on the string type by itself but then I'm also going to add x 3 and x 4 as a",
    "start": "553460",
    "end": "558970"
  },
  {
    "text": "group of extension methods so in the helper function below I can declare a",
    "start": "558970",
    "end": "564200"
  },
  {
    "text": "string and then we can call x 2 x 3 and x 4 and you can see what gets printed",
    "start": "564200",
    "end": "569570"
  },
  {
    "text": "out so extension methods very useful for layering on extra functionality to a",
    "start": "569570",
    "end": "575120"
  },
  {
    "text": "type when you not like to go near the source code or you just don't want to because it's a feature that's only going",
    "start": "575120",
    "end": "581030"
  },
  {
    "text": "to be used in certain specific circumstances really nice for when you want to tee in multiple methods together",
    "start": "581030",
    "end": "587240"
  },
  {
    "text": "as well do you have like nice affluent as well absolutely yeah and then finally",
    "start": "587240",
    "end": "593960"
  },
  {
    "text": "yeah we get an uber agent yeah so scale in my opinion has always suffered from having second-class enums so you could",
    "start": "593960",
    "end": "601190"
  },
  {
    "text": "implement them but indirectly and the kind of awkward way and so on but finally it does them in the Java style",
    "start": "601190",
    "end": "608090"
  },
  {
    "text": "so we can just say enum direction for example and then we can say kiyose to",
    "start": "608090",
    "end": "613460"
  },
  {
    "text": "introduce the different direction types north south east west and we can add a little print our method so again that",
    "start": "613460",
    "end": "619550"
  },
  {
    "text": "the demo method down the bottom I can create a direction I can print the died and I can call print out",
    "start": "619550",
    "end": "625190"
  },
  {
    "text": "and we get north with the northerly out I was surprised when I saw it it didn't have these already",
    "start": "625190",
    "end": "630230"
  },
  {
    "text": "yes it's an interesting feature of Scala but it didn't have them I wanted to go in a different direction instead but",
    "start": "630230",
    "end": "636170"
  },
  {
    "text": "neither fully supported now you may look at all these language features and say",
    "start": "636170",
    "end": "641570"
  },
  {
    "start": "638000",
    "end": "659000"
  },
  {
    "text": "something very familiar about all this yeah so I know that people in the jvm",
    "start": "641570",
    "end": "647330"
  },
  {
    "text": "community are kind of a little bit sick of being shouted at by Cortland developers yeah hi nice Kotlin it yeah",
    "start": "647330",
    "end": "653660"
  },
  {
    "text": "but these features do seem to be for for catching up with call them so we're both",
    "start": "653660",
    "end": "660620"
  },
  {
    "text": "big fans of The Princess Bride so Eamonn there's something I ought to tell you tell me I don't use the new",
    "start": "660620",
    "end": "667070"
  },
  {
    "text": "keyword either I don't use implicit Sider I also have a numerator types I also have extension methods I can",
    "start": "667070",
    "end": "672830"
  },
  {
    "text": "declare top-level types so yes so that's Scala",
    "start": "672830",
    "end": "678770"
  },
  {
    "text": "keeping up with coffin as then continuing on with enumerations you can",
    "start": "678770",
    "end": "683930"
  },
  {
    "text": "also use these as algebraic data types or generic algebraic data types Wow well",
    "start": "683930",
    "end": "689780"
  },
  {
    "text": "I think everybody will have used option at least in Java yet so here's the one",
    "start": "689780",
    "end": "695390"
  },
  {
    "text": "that people typically learn after option this is try so try can either be a success or a failure those are the two",
    "start": "695390",
    "end": "702290"
  },
  {
    "text": "cases so we're going to call some code that might blew up and in the event that",
    "start": "702290",
    "end": "707930"
  },
  {
    "text": "it blows up we want to get back a failure containing an error message instead of throwing the exception and if",
    "start": "707930",
    "end": "713870"
  },
  {
    "text": "it succeeds we want to get back a success containing a value of type T so",
    "start": "713870",
    "end": "718910"
  },
  {
    "text": "you can see here we've included enum as I try as an enum and we've got the two cases there and then we've got a fooled",
    "start": "718910",
    "end": "726170"
  },
  {
    "text": "method so we're going to pass in two lambdas or two addresses of methods and in the case of success will call bomb in",
    "start": "726170",
    "end": "733730"
  },
  {
    "text": "the case of failure will cause another and then we get a little demo method called reap property isn't so that's",
    "start": "733730",
    "end": "740150"
  },
  {
    "text": "going to take in the name of the JVM property and then try and convert it to an integer and should it succeed well",
    "start": "740150",
    "end": "747589"
  },
  {
    "text": "then we'll return a success otherwise we'll return a failure so here's the little test method",
    "start": "747589",
    "end": "755689"
  },
  {
    "text": "for it so we're going to create a property called test prop whose value is 1 2 3 and then we'll try and read that",
    "start": "755689",
    "end": "761660"
  },
  {
    "text": "in isn't that should work but then we'll try and go out and read in Java dot",
    "start": "761660",
    "end": "767149"
  },
  {
    "text": "vendor isn't and internally that ship through but what we should get back instead as a failure so result one",
    "start": "767149",
    "end": "773629"
  },
  {
    "text": "should be a success result two should be a failure and we should find out about that whenever we fold over it you know",
    "start": "773629",
    "end": "779569"
  },
  {
    "text": "which if you try the action code we do so enumerations very very useful very",
    "start": "779569",
    "end": "786559"
  },
  {
    "text": "very flexible feature so and the next set of features this will mate really",
    "start": "786559",
    "end": "792199"
  },
  {
    "start": "788000",
    "end": "887000"
  },
  {
    "text": "make fans of demand ribbon design happy because this gives you a much richer toolkit for describing data so this lets",
    "start": "792199",
    "end": "799579"
  },
  {
    "text": "you define types as something that almost looks like pseudocode so first of all types can be defined as unions of",
    "start": "799579",
    "end": "806779"
  },
  {
    "text": "other types so the most common type that you'll see this is as parameters so you see here we've got a function called foo",
    "start": "806779",
    "end": "813379"
  },
  {
    "text": "which takes a parameter called input and input is going to be of type foo or bar",
    "start": "813379",
    "end": "819199"
  },
  {
    "text": "or is that so it's going to be the union of all three of them and they can be",
    "start": "819199",
    "end": "824329"
  },
  {
    "text": "very they can be very unrelated types it can just be in this particular case that it makes sense to bind them together so",
    "start": "824329",
    "end": "831379"
  },
  {
    "text": "here's a kind of more real-world example let's say that we want to employ you okay so we need your name if we're going",
    "start": "831379",
    "end": "838850"
  },
  {
    "text": "to implore you and then we need the reason why we're employing you and let's say there are three reasons and these",
    "start": "838850",
    "end": "844369"
  },
  {
    "text": "are represented by the case classes at the top so we might want to employ you because of your work experience you get",
    "start": "844369",
    "end": "850399"
  },
  {
    "text": "a certain number of years of work experience or we might want to employ you because you have a degree you know",
    "start": "850399",
    "end": "855649"
  },
  {
    "text": "in a relevant subject or we might want to employ you because you route a book or a paper you know on this particular",
    "start": "855649",
    "end": "860749"
  },
  {
    "text": "thing whatever it happens to be so those classes might be unrelated in our design",
    "start": "860749",
    "end": "866029"
  },
  {
    "text": "apart from this point in the code where we want to bring them together so we want to say okay we're employing you for",
    "start": "866029",
    "end": "871999"
  },
  {
    "text": "a reason and that reason may be degree or work experience or publication and then inside the code we",
    "start": "871999",
    "end": "879430"
  },
  {
    "text": "can match and the reason and we can react appropriately so that's nice that the ability to union types together and",
    "start": "879430",
    "end": "888279"
  },
  {
    "start": "887000",
    "end": "950000"
  },
  {
    "text": "then as well as union types we can have intersection types so it's like intersection types so again we've got a",
    "start": "888279",
    "end": "894819"
  },
  {
    "text": "function called foo and this time input is going to be foo and bar and said so a",
    "start": "894819",
    "end": "901389"
  },
  {
    "text": "more real-world example let's say we've got a tree it called edible and the tree it called drinkable so if you're a",
    "start": "901389",
    "end": "907269"
  },
  {
    "text": "double you can be if you're drinkable you can be drunk and then Apple extends",
    "start": "907269",
    "end": "912310"
  },
  {
    "text": "editable so we're overriding the method and then milk extends drinkable so we're",
    "start": "912310",
    "end": "917470"
  },
  {
    "text": "overriding the drink method but then suit is both edible and drinkable so depending on your favorite method of",
    "start": "917470",
    "end": "923589"
  },
  {
    "text": "consumption you can either eat soup or you can drink soup so I've got this",
    "start": "923589",
    "end": "928990"
  },
  {
    "text": "method here where we're saying eat drink and be merry so we're going to take in some input and that input must be both edible and",
    "start": "928990",
    "end": "936190"
  },
  {
    "text": "drinkable and we're going to try and both eat and drink it so if we were to call that function and pass in an apple",
    "start": "936190",
    "end": "942850"
  },
  {
    "text": "wouldn't work pass Edinson milk wouldn't work but pass in some soup and it will work just fine and the next one literal",
    "start": "942850",
    "end": "952329"
  },
  {
    "start": "950000",
    "end": "1020000"
  },
  {
    "text": "types this is a little bit weird but basically any literal value can be used",
    "start": "952329",
    "end": "957939"
  },
  {
    "text": "as a type with a singleton instance of itself in other words two-point-three can be thought of as a type which is a",
    "start": "957939",
    "end": "965560"
  },
  {
    "text": "single instance 2.3 ABC can be thought of as a type which is a single instance",
    "start": "965560",
    "end": "971259"
  },
  {
    "text": "ABC okay so if you look in the code here I can declare a variable called special",
    "start": "971259",
    "end": "977199"
  },
  {
    "text": "number of type 1 2 3 so then the only thing I can set it to is 1 2 3 or I can",
    "start": "977199",
    "end": "983439"
  },
  {
    "text": "declare a special option which is an option of 4 5 6 that can either be a nun",
    "start": "983439",
    "end": "988569"
  },
  {
    "text": "or an option of 4 5 6 and so on so you can see the utility of it here with this",
    "start": "988569",
    "end": "993970"
  },
  {
    "text": "function where we're saying ok input can either be a b c or d e f or GHI so",
    "start": "993970",
    "end": "1000750"
  },
  {
    "text": "imagine this was an event handler and we wanted his pass in the name of the event and we wanted to say okay this can only",
    "start": "1000750",
    "end": "1006790"
  },
  {
    "text": "handle on click or or move or on focus lost you know something like that so it",
    "start": "1006790",
    "end": "1013390"
  },
  {
    "text": "sounds a little bit crazy when you hear about it for the first time but when you see how it can be used it's very nice",
    "start": "1013390",
    "end": "1019620"
  },
  {
    "text": "and then the final one in this little set of pig type aliases what okay well",
    "start": "1019620",
    "end": "1026230"
  },
  {
    "start": "1020000",
    "end": "1079000"
  },
  {
    "text": "let's say we're doing our demand driven design and we want to have a ubiquitous language we want to have a very rich set",
    "start": "1026230",
    "end": "1032949"
  },
  {
    "text": "of types and let's say we've got item id and underneath the hood item id is just",
    "start": "1032950",
    "end": "1038199"
  },
  {
    "text": "going to be a string you know but in our pseudocode and in our real code we want to represent it as an actual thing so we",
    "start": "1038200",
    "end": "1045760"
  },
  {
    "text": "could of course create a new class and that class would have a single field of type string but then we would incur the",
    "start": "1045760",
    "end": "1051940"
  },
  {
    "text": "overhead of boxing and unboxing the value so what would be really nice as if we could say to the compiler look",
    "start": "1051940",
    "end": "1057970"
  },
  {
    "text": "there's this thing called item ID and it's actually a string but don't let me get away with that in my code okay so if",
    "start": "1057970",
    "end": "1064420"
  },
  {
    "text": "I declare a function that takes an item ID well then it actually takes a string but only let me pass in something of",
    "start": "1064420",
    "end": "1071110"
  },
  {
    "text": "type item ID that's really klaris is using nominal typing so you're restricted to that one time",
    "start": "1071110",
    "end": "1077920"
  },
  {
    "text": "exactly so yeah so so you see here we've been a little example where we've got a shop type and the shop is going to have",
    "start": "1077920",
    "end": "1084880"
  },
  {
    "start": "1079000",
    "end": "1145000"
  },
  {
    "text": "some purchases which is a stack of item ID and whenever you want to buy something what we want to take in",
    "start": "1084880",
    "end": "1091030"
  },
  {
    "text": "something of type item ID and just push it on to that stack but if we look at item ID we've said opaque type item ID",
    "start": "1091030",
    "end": "1099490"
  },
  {
    "text": "equal strength so we're saying that item ID is just a string in disguise and then",
    "start": "1099490",
    "end": "1106360"
  },
  {
    "text": "we've also defined the supply method so the compiler knows how to turn a string into an item ID and we're telling it",
    "start": "1106360",
    "end": "1112720"
  },
  {
    "text": "they're just the same thing so I can go out and use it now and I can create a new shop and I could try and say shop",
    "start": "1112720",
    "end": "1119560"
  },
  {
    "text": "buy a b12 but that won't compile so what I can do is I can create a new variable",
    "start": "1119560",
    "end": "1125020"
  },
  {
    "text": "of type item ID and then say shop by item 1 or I could just combine those two",
    "start": "1125020",
    "end": "1130900"
  },
  {
    "text": "together with shop by item I cd34 like that but whatever way we're",
    "start": "1130900",
    "end": "1137450"
  },
  {
    "text": "choosing to do it the compiler is enforcing extra types in thing but there's no but there's no overhead yeah",
    "start": "1137450",
    "end": "1144080"
  },
  {
    "text": "that's cool so again something very familiar about all this okay",
    "start": "1144080",
    "end": "1149780"
  },
  {
    "start": "1145000",
    "end": "1204000"
  },
  {
    "text": "so if you're into your DDD you've probably read this amazing book here if you haven't I encourage you to go out",
    "start": "1149780",
    "end": "1156530"
  },
  {
    "text": "and do it so it's about DDD with using f-sharp to represent the types yeah and",
    "start": "1156530",
    "end": "1162800"
  },
  {
    "text": "it shows you how some of the language features of F shot make it really easy and powerful to model types in a way",
    "start": "1162800",
    "end": "1169910"
  },
  {
    "text": "that even non-technical people can understand yeah and so what we seem to",
    "start": "1169910",
    "end": "1175160"
  },
  {
    "text": "have here is Skylar catching up with that F shot so there's something I ought to tell you tell me I didn't need rapper",
    "start": "1175160",
    "end": "1182000"
  },
  {
    "text": "types either I also support Union x we could also do some of this with typescript as well",
    "start": "1182000",
    "end": "1187670"
  },
  {
    "text": "typescript has union types and action types yep so typescript is really",
    "start": "1187670",
    "end": "1193910"
  },
  {
    "text": "accelerating JavaScript forward and adding some really modern and powerful features as well definitely so this",
    "start": "1193910",
    "end": "1200390"
  },
  {
    "text": "could either be an F sharp or typescript cool then moving on to other features",
    "start": "1200390",
    "end": "1206570"
  },
  {
    "start": "1204000",
    "end": "1263000"
  },
  {
    "text": "and this one was quite a shock to me and so Scala 3 supports significant",
    "start": "1206570",
    "end": "1211850"
  },
  {
    "text": "whitespace Wow yeah you got there just before me so here's two versions of my mind million",
    "start": "1211850",
    "end": "1219560"
  },
  {
    "text": "function okay so they're identical apart from the fact that one is called zoo and one is called fubar yeah and also if you",
    "start": "1219560",
    "end": "1226250"
  },
  {
    "text": "look at the one on the left we omit the opening brace so we declare our function and then say equals but we leave off the",
    "start": "1226250",
    "end": "1233630"
  },
  {
    "text": "opening brace yeah so if you do that white space becomes significant yeah so the level of indentation matters and all",
    "start": "1233630",
    "end": "1242030"
  },
  {
    "text": "of the conditionals all of the iteration statements they now have a new form so",
    "start": "1242030",
    "end": "1247220"
  },
  {
    "text": "you can see here we're saying while not done do ya so for the conditionals and iterative statements there's a new way",
    "start": "1247220",
    "end": "1253760"
  },
  {
    "text": "of writing them that doesn't require require braces so if you choose to yeah",
    "start": "1253760",
    "end": "1258890"
  },
  {
    "text": "you can right you're Skyler code in a white spear sensitive manner and again something very familiar about this yeah",
    "start": "1258890",
    "end": "1265980"
  },
  {
    "start": "1263000",
    "end": "1288000"
  },
  {
    "text": "so this seems to be scala trying to compete with python and of course they're in very tight competition",
    "start": "1265980",
    "end": "1272640"
  },
  {
    "text": "whenever it comes to machine learning in that kind of world so you can see how Scala would want to",
    "start": "1272640",
    "end": "1278580"
  },
  {
    "text": "tempt people away from Python so there's something I want to tell you I don't use braces either",
    "start": "1278580",
    "end": "1285230"
  },
  {
    "text": "yes I agree yeah and then moving on to the completely new stuff export our",
    "start": "1287270",
    "end": "1293970"
  },
  {
    "start": "1288000",
    "end": "1406000"
  },
  {
    "text": "classes what's that well this is this feature here so as you know in oh",
    "start": "1293970",
    "end": "1300150"
  },
  {
    "text": "there's this anti pattern called implementation inheritance yeah and that's where we inherit from something",
    "start": "1300150",
    "end": "1306720"
  },
  {
    "text": "just to reuse it yeah so let's say I've got a shopping cart and a shopping cart",
    "start": "1306720",
    "end": "1311730"
  },
  {
    "text": "is basically just a kind of list so I'll just inherit from list to get all the list functionality and that's a good",
    "start": "1311730",
    "end": "1317250"
  },
  {
    "text": "idea isn't it so so it's very easy to use inheritance for things that",
    "start": "1317250",
    "end": "1323310"
  },
  {
    "text": "shouldn't be used for yeah but what we can do here in Scala is you see how good a my buffer and this is going to wrap up",
    "start": "1323310",
    "end": "1330390"
  },
  {
    "text": "a string buffer and then my buffer is going to be implemented in terms of the string buffer yeah so I want to be able",
    "start": "1330390",
    "end": "1336870"
  },
  {
    "text": "to say okay whenever you append to the my buffer you just appending to the string buffer you know whenever you put",
    "start": "1336870",
    "end": "1342390"
  },
  {
    "text": "something in the my buffer then you're just going to insert it into the string buffer and so on well what I can I do is",
    "start": "1342390",
    "end": "1349260"
  },
  {
    "text": "instead of how they need to write that bridge code glue code boilerplate code whatever you want I can just get the",
    "start": "1349260",
    "end": "1355860"
  },
  {
    "text": "compiler to do it so I can say here okay I want to be able to call the pend on a",
    "start": "1355860",
    "end": "1360990"
  },
  {
    "text": "my buffer and what that should do is append an SB I want to be able to call",
    "start": "1360990",
    "end": "1366420"
  },
  {
    "text": "insert I'm sorry even I want to be able to call put him on in my buffer and that should call insert on the string offer",
    "start": "1366420",
    "end": "1373560"
  },
  {
    "text": "so these calls to export here these cause the compiler to write the the glue",
    "start": "1373560",
    "end": "1379110"
  },
  {
    "text": "code for you so I can call a method on my type in this case the my buffer type",
    "start": "1379110",
    "end": "1384830"
  },
  {
    "text": "and it'll actually be called against the type of wrapping up so that's designed to make wrapping up a type as simple as",
    "start": "1384830",
    "end": "1392510"
  },
  {
    "text": "inheriting from it and get rid of the temptation to use inheritance for",
    "start": "1392510",
    "end": "1397669"
  },
  {
    "text": "implement that's really cool feature sort of similar to delegation in Kotlin but yeah really cool nice idea",
    "start": "1397669",
    "end": "1405880"
  },
  {
    "text": "then implicit are replaced yeah or they're replaced with something",
    "start": "1405880",
    "end": "1412100"
  },
  {
    "start": "1406000",
    "end": "1508000"
  },
  {
    "text": "better so let me just show you how that works so let's say we define a tree at an interface if you're not familiar with",
    "start": "1412100",
    "end": "1418220"
  },
  {
    "text": "Scala called make important so what we want to be able to do is we want to be able to escalate the importance of",
    "start": "1418220",
    "end": "1424399"
  },
  {
    "text": "something and then that's the generic type of course so we'll define two instances so you see there I've got",
    "start": "1424399",
    "end": "1431450"
  },
  {
    "text": "string make important than in to make important yeah and that's going to be make important for the string type and",
    "start": "1431450",
    "end": "1437240"
  },
  {
    "text": "make important for the int type so I'm saying okay if you need to make a string important well then the way you do that",
    "start": "1437240",
    "end": "1443990"
  },
  {
    "text": "is by calling two uppercuts if you need to make an internment well then the way you do that is by multiplying it by a",
    "start": "1443990",
    "end": "1450830"
  },
  {
    "text": "hundred so then I've got this function called do important work and you can see",
    "start": "1450830",
    "end": "1456440"
  },
  {
    "text": "it takes two lists of parameters so in the first list of parameters we have our thing in the second list of parameters",
    "start": "1456440",
    "end": "1463429"
  },
  {
    "text": "we have some implementation of make important and you see there I've declared it with using and that means",
    "start": "1463429",
    "end": "1469700"
  },
  {
    "text": "that the compiler can go out and find it and fill that in for me so I can",
    "start": "1469700",
    "end": "1474830"
  },
  {
    "text": "actually go and if you look down there at given instances I'm saying do important work little and do important",
    "start": "1474830",
    "end": "1482240"
  },
  {
    "text": "work one two three so I'm only supplying the first set of parameters but the",
    "start": "1482240",
    "end": "1487250"
  },
  {
    "text": "compiler can go away and find a given which implements the treat appropriately",
    "start": "1487250",
    "end": "1492279"
  },
  {
    "text": "so now whenever we get web all printed out all those printed out in caps whenever we get one to three printed out",
    "start": "1492279",
    "end": "1498679"
  },
  {
    "text": "it's been multiplied by a hundred so we've gone it--and escalated both of those so that's the app the new",
    "start": "1498679",
    "end": "1504960"
  },
  {
    "text": "way that implicit they're going to be implemented and then finally we have",
    "start": "1504960",
    "end": "1510510"
  },
  {
    "start": "1508000",
    "end": "1642000"
  },
  {
    "text": "support for meta programming and as we mentioned before this relies and the the",
    "start": "1510510",
    "end": "1515910"
  },
  {
    "text": "TST format so this is something that I'm only learning about it myself so I need to go away and research this",
    "start": "1515910",
    "end": "1522240"
  },
  {
    "text": "and a lot of detail but just to give you a little view and how it works so you see here I've got this function called",
    "start": "1522240",
    "end": "1528150"
  },
  {
    "text": "test1 and I've got an expression 100 plus 50 and I'm saying tech braces so",
    "start": "1528150",
    "end": "1534720"
  },
  {
    "text": "what the tick braces do is they take your code and they convert it into a TST",
    "start": "1534720",
    "end": "1539790"
  },
  {
    "text": "syntax tree so expert is going to point to an expression object and that's going",
    "start": "1539790",
    "end": "1545340"
  },
  {
    "text": "to be the top of that the TST syntax tree and then I've got a function called",
    "start": "1545340",
    "end": "1551430"
  },
  {
    "text": "test one so test one so I've got a function called test to you and that",
    "start": "1551430",
    "end": "1556590"
  },
  {
    "text": "inside test2 we're calling test one but you see we're using the dollar braces so",
    "start": "1556590",
    "end": "1561810"
  },
  {
    "text": "what that's going to do is expand the syntax tree so dollar braces takes an existing syntax tree and converts it",
    "start": "1561810",
    "end": "1569100"
  },
  {
    "text": "back into regular code for you and then test two is declared as being in line so",
    "start": "1569100",
    "end": "1574410"
  },
  {
    "text": "we know what in line dos but another languages in line is a suggestion you're saying to the compiler if it makes sense",
    "start": "1574410",
    "end": "1580440"
  },
  {
    "text": "to inline it then go ahead and employment okay here in scarlet it's come out that means you must inline this",
    "start": "1580440",
    "end": "1586310"
  },
  {
    "text": "so if we go away we've got the helper called using macros and we're just printing out a little message and then",
    "start": "1586310",
    "end": "1593070"
  },
  {
    "text": "we're calling testing so if we look at what gets printed out well you can see that it actually evaluated this code",
    "start": "1593070",
    "end": "1600210"
  },
  {
    "text": "here at compile time yeah because it says evaluating macro and the type of",
    "start": "1600210",
    "end": "1605460"
  },
  {
    "text": "the thing is an expression before we actually go out and run through bar and then we've got our options as usual so",
    "start": "1605460",
    "end": "1612420"
  },
  {
    "text": "whenever we go out and run tests to well we created a syntax tree from that expression and then we took the syntax",
    "start": "1612420",
    "end": "1619080"
  },
  {
    "text": "tree and turned it back into code so printed item so it's not doing anything useful but",
    "start": "1619080",
    "end": "1624450"
  },
  {
    "text": "it's just a shoe you want the syntaxes so if you're into defining macros this gives you a nice simple environment to",
    "start": "1624450",
    "end": "1631410"
  },
  {
    "text": "do it so we have a data text any extra functionality but we can do that by reflecting against the syntax tree but",
    "start": "1631410",
    "end": "1638070"
  },
  {
    "text": "as I say that's a that's something you have to go out and learn about myself so there's an awful lot of really nice new",
    "start": "1638070",
    "end": "1644850"
  },
  {
    "start": "1642000",
    "end": "1758000"
  },
  {
    "text": "features in Scala 3 and I would argue that means it is high quality so what",
    "start": "1644850",
    "end": "1649950"
  },
  {
    "text": "can Kotlin say to that well commonly",
    "start": "1649950",
    "end": "1657480"
  },
  {
    "text": "guess was already a brilliant language and it had all the pragmatic features so",
    "start": "1657480",
    "end": "1663150"
  },
  {
    "text": "we've seen some of it with Scala here a lot of those features there they're a little bit like me two features taking",
    "start": "1663150",
    "end": "1669570"
  },
  {
    "text": "from other languages from our chard from Kotlin from Python Colin I think is",
    "start": "1669570",
    "end": "1675330"
  },
  {
    "text": "quite content with where it's out at the moment it's it's if I had to like take like a word for Scala would probably be",
    "start": "1675330",
    "end": "1681570"
  },
  {
    "text": "like like pure or beautiful or something like that quite with Kotlin the word",
    "start": "1681570",
    "end": "1687630"
  },
  {
    "text": "that I that jumps into my head is pragmatic or practical it's just a practical language that allows you to",
    "start": "1687630",
    "end": "1694350"
  },
  {
    "text": "just deliver solutions so what we see with Colin is that it's not going to",
    "start": "1694350",
    "end": "1699600"
  },
  {
    "text": "have as many features because it already has substantially it is all the features really that you want so like I didn't",
    "start": "1699600",
    "end": "1710070"
  },
  {
    "text": "still here we're absolute mod by Colin we talked about Colin quite a bit I really like it because I'm a big fan of",
    "start": "1710070",
    "end": "1715350"
  },
  {
    "text": "Java and so from a JVM language point of view I think it's brilliant no Scala does seem really impressive as",
    "start": "1715350",
    "end": "1721980"
  },
  {
    "text": "well but Colin seems like cut through and it just says here's the stuff that's gonna allow you to be productive and",
    "start": "1721980",
    "end": "1727140"
  },
  {
    "text": "Jeffrey did you know they read your own dog food when they got this language and they de grow up and this time they were using it so we were a common conf",
    "start": "1727140",
    "end": "1734220"
  },
  {
    "text": "in 2018 and we degree of time there and we did a workshop which was running full",
    "start": "1734220",
    "end": "1739770"
  },
  {
    "text": "stack using Colin in the front end and the back end and then just there at Christmas past we were there for Colin",
    "start": "1739770",
    "end": "1745860"
  },
  {
    "text": "Colin 2019 and again we had a good time out of booth we did another workshop this time",
    "start": "1745860",
    "end": "1751350"
  },
  {
    "text": "was on column native which was quite exciting and we did like a little ballgames good fun so yeah we love",
    "start": "1751350",
    "end": "1756840"
  },
  {
    "text": "Collin and we also ran 12 days of Kotlin which was where we released a blog post",
    "start": "1756840",
    "end": "1762299"
  },
  {
    "start": "1758000",
    "end": "1840000"
  },
  {
    "text": "every day so if you haven't checked it I would go and check there yeah there's there's some good posts in there and some interesting stuff and and you know",
    "start": "1762299",
    "end": "1770700"
  },
  {
    "text": "we were sort of finding that all the guys internally the only thing that's of one of the downsides with collins once",
    "start": "1770700",
    "end": "1776730"
  },
  {
    "text": "you've tried it it's very hard to go back and as a you know as a service business where we're developing",
    "start": "1776730",
    "end": "1781950"
  },
  {
    "text": "solutions for customers sometimes they dictate the language and sometimes they dictate java for historical reasons or",
    "start": "1781950",
    "end": "1789000"
  },
  {
    "text": "it's legacy code so it's the only time that I see was Colin is whenever you have to transition away from Colin this",
    "start": "1789000",
    "end": "1794850"
  },
  {
    "text": "is the baked bean point and you know we're seeing that our clients that live as well because we're actually delivering good solutions so this is our",
    "start": "1794850",
    "end": "1801780"
  },
  {
    "text": "director of business development Matt and he was saying as a service business we need to focus primarily on our",
    "start": "1801780",
    "end": "1807360"
  },
  {
    "text": "customers need something that's what we should all be focused on thankfully it's not just our development developers that",
    "start": "1807360",
    "end": "1812669"
  },
  {
    "text": "have grown to love their the language our customers are in turn getting more Latinos so software to market with lower",
    "start": "1812669",
    "end": "1818789"
  },
  {
    "text": "lead times and that's the thing you know when we learnt and read for for projects we will push this language as something",
    "start": "1818789",
    "end": "1824400"
  },
  {
    "text": "where we can build code faster to a higher quality and that's ultimately gonna make your customers however it's",
    "start": "1824400",
    "end": "1830549"
  },
  {
    "text": "not all just about developers being selfish you know at heart developers good developers want to be productive",
    "start": "1830549",
    "end": "1836159"
  },
  {
    "text": "and deliver for the customer so it's all it's all going to the same place so as I",
    "start": "1836159",
    "end": "1841620"
  },
  {
    "start": "1840000",
    "end": "2055000"
  },
  {
    "text": "said Colin already has a lot of really really good features here's a long long list of Polynice some of them that are",
    "start": "1841620",
    "end": "1848340"
  },
  {
    "text": "really good we can see that at different times in its in its life there was a there was like a hot topic so like at",
    "start": "1848340",
    "end": "1855539"
  },
  {
    "text": "the start the safety of the language sonal CFT was a big thing and again these are not necessarily ideas a common",
    "start": "1855539",
    "end": "1860820"
  },
  {
    "text": "invented but Colin was able to take lots of good ideas from other language including Scarlets those took these",
    "start": "1860820",
    "end": "1867570"
  },
  {
    "text": "really really really good features and blended gather into this really nice language sonal cfd was a big one at the starting",
    "start": "1867570",
    "end": "1873580"
  },
  {
    "text": "around 2011 2016 was about just how succinct the language it was and not not gravity with with losing clarity and",
    "start": "1873580",
    "end": "1881470"
  },
  {
    "text": "there was actually neither code and you know last was most definitely more and 2017 using builders lambdas with",
    "start": "1881470",
    "end": "1889450"
  },
  {
    "text": "receivers we saw that we could build awesome dsls and and that seems everybody's writing dsls you know like",
    "start": "1889450",
    "end": "1895210"
  },
  {
    "text": "like even with cradled and things that got there you can build awesome DSL is very very very easily is the thing as",
    "start": "1895210",
    "end": "1901090"
  },
  {
    "text": "well cortines absolutely love so doing I've done a lot of C sharp and after I've had this kind of idea and doing",
    "start": "1901090",
    "end": "1908230"
  },
  {
    "text": "covert teams to handle asynchronous workflows I think it's like one of the neatest solutions and certainly I think",
    "start": "1908230",
    "end": "1913750"
  },
  {
    "text": "simpler than something like react over rx and then last year that the big the",
    "start": "1913750",
    "end": "1920170"
  },
  {
    "text": "big drive was a multi-platform library so this idea where we can take Holland and use it everywhere and you know",
    "start": "1920170",
    "end": "1925570"
  },
  {
    "text": "there's more features than that and we could do a couple of hours talk or we could do a three-day courts you know yes",
    "start": "1925570",
    "end": "1933120"
  },
  {
    "text": "all these topics but it's just a really good productive language and we saw that Scala's not catching up with some of",
    "start": "1934080",
    "end": "1940960"
  },
  {
    "text": "those features so we see we see languages doing this leapfrog in one another so yeah we were there at the",
    "start": "1940960",
    "end": "1946360"
  },
  {
    "text": "comic-con from were there with a hombre he was doing his keynote and he was talking about you know what was coming",
    "start": "1946360",
    "end": "1952090"
  },
  {
    "text": "up and in column one point for the the mean feature is it doesn't need to show",
    "start": "1952090",
    "end": "1961390"
  },
  {
    "text": "up it's it's probably more than quantity so then the signal feature is really the",
    "start": "1961390",
    "end": "1968430"
  },
  {
    "text": "functional interfaces so having an interface here with a single method and then being able to pass functions or",
    "start": "1968430",
    "end": "1974260"
  },
  {
    "text": "lambdas in in place of that so here we can see that run action was taking an action which is a an interface but we",
    "start": "1974260",
    "end": "1981280"
  },
  {
    "text": "can pass an alarm that are below and then of course because we've got this trailing lambda syntax in Colin it's",
    "start": "1981280",
    "end": "1987550"
  },
  {
    "text": "like a really nice it almost looks like a like a DSL looks like a specific language",
    "start": "1987550",
    "end": "1993030"
  },
  {
    "text": "which is really nice but that's not all we're getting okay there's lots of other things that are coming that's just like the mean language feature so there's",
    "start": "1993030",
    "end": "1999750"
  },
  {
    "text": "lots of things that that I'd say are more around stabilizing and sort of reinforcing the platform that already",
    "start": "1999750",
    "end": "2006680"
  },
  {
    "text": "has so you know serialization is getting in there stabilizing we're getting flow out of lots of multi-platform stuff so",
    "start": "2006680",
    "end": "2013550"
  },
  {
    "text": "webassembly j/s stuff getting stabilized and need of improving compilations",
    "start": "2013550",
    "end": "2020390"
  },
  {
    "text": "getting faster it's all about building on what's there rather than use shiny features and luckily they haven't tried",
    "start": "2020390",
    "end": "2027050"
  },
  {
    "text": "to copy quite significant I know you",
    "start": "2027050",
    "end": "2031690"
  },
  {
    "text": "they don't need to show off this is this is the point I guess so this is already talking so he said that colin is not as",
    "start": "2032140",
    "end": "2038930"
  },
  {
    "text": "becoming another language not a toolset not a word it's an ecosystem colin is not a piece of software it's people its",
    "start": "2038930",
    "end": "2045440"
  },
  {
    "text": "people man so this is what we want colin to become in the future the universal solution for every platform so in the",
    "start": "2045440",
    "end": "2053419"
  },
  {
    "text": "words of one of my favorite bands with okay I want it all and I want it now",
    "start": "2053419",
    "end": "2059120"
  },
  {
    "start": "2055000",
    "end": "2137000"
  },
  {
    "text": "so this is the thing you know at the start from the JetBrains for developing the language you know what's for them it",
    "start": "2059120",
    "end": "2065570"
  },
  {
    "text": "was javi ambience you know they were using it for writing like the desktop software and services so it's all very",
    "start": "2065570",
    "end": "2071720"
  },
  {
    "text": "JVM vs yep then get into Android on with Android is a game changer because of the",
    "start": "2071720",
    "end": "2076730"
  },
  {
    "text": "limitations our own job within Android generally Coplin is the comments much better in Java on the JVM it's massively",
    "start": "2076730",
    "end": "2083179"
  },
  {
    "text": "better in Android it's really makes Android development a lot better and that's where Colin I think got a big push and people really start paying",
    "start": "2083179",
    "end": "2089720"
  },
  {
    "text": "attention to it and but now you know we can use Kotlin for j/s we can use Kotlin for native so now we can have Kotlin for",
    "start": "2089720",
    "end": "2097940"
  },
  {
    "text": "all the things and that's really their big drive at the moment is is taking over taking over everything which is",
    "start": "2097940",
    "end": "2103250"
  },
  {
    "text": "quite interesting : everybody but you know you don't have to believe us you know you know you're saying that the",
    "start": "2103250",
    "end": "2109580"
  },
  {
    "text": "collins good for Android believe believe Google so this is from IO in 2019 and today were nice in",
    "start": "2109580",
    "end": "2116660"
  },
  {
    "text": "another big step Android development will become increasingly Kotlin first and that's the thing",
    "start": "2116660",
    "end": "2122210"
  },
  {
    "text": "because it's a better language they can do nicer features first many new jetpack api's and features will be offered first",
    "start": "2122210",
    "end": "2128360"
  },
  {
    "text": "and Colin if you're starting a new project you shoot rather than cut them so there we go that's a big statement no",
    "start": "2128360",
    "end": "2135260"
  },
  {
    "text": "official from hi but yeah so and I'm going to say good Google they're telling",
    "start": "2135260",
    "end": "2141170"
  },
  {
    "start": "2137000",
    "end": "2229000"
  },
  {
    "text": "you that's what you're doing that is the answer no no ifs or buts about it and but it is just better you'll get smaller",
    "start": "2141170",
    "end": "2147440"
  },
  {
    "text": "code bases now I'm not gonna quote a number jab branch quote 40% I'm not going to say that but it's definitely",
    "start": "2147440",
    "end": "2153920"
  },
  {
    "text": "less it's much much less code but the code that you have is simpler it's not obfuscated code in any way it's neater",
    "start": "2153920",
    "end": "2160610"
  },
  {
    "text": "code you know it just makes some of the things we're an Android a little bit neater neater like getting elements in",
    "start": "2160610",
    "end": "2167600"
  },
  {
    "text": "the UI and things we have is much neater you can pull in features that are not available in Java because Java is still",
    "start": "2167600",
    "end": "2172880"
  },
  {
    "text": "progressing so some of the features are leaner versions of Java you can't leverage on Android but you",
    "start": "2172880",
    "end": "2178160"
  },
  {
    "text": "can use them with Colin and if you're learning Colin you are so future proofing your scale because because",
    "start": "2178160",
    "end": "2183350"
  },
  {
    "text": "Google are saying you know this is the language you should be using so there you see a jetpack which again analyzed",
    "start": "2183350",
    "end": "2189920"
  },
  {
    "text": "it makes it much easier to develop Android applications again are getting Kotlin features there first but not only",
    "start": "2189920",
    "end": "2197720"
  },
  {
    "text": "that I mean we're also seeing Kotlin in libraries like spring boot which is a big job of framework you know we're",
    "start": "2197720",
    "end": "2205490"
  },
  {
    "text": "seeing features that are called them first we're seeing api's are specialized to call them co-routines things like",
    "start": "2205490",
    "end": "2210560"
  },
  {
    "text": "that obviously the creative DSL you can use from the spring initializer as your main language for",
    "start": "2210560",
    "end": "2216900"
  },
  {
    "text": "for writing your Gradle scripts and it's just taking over everything you know and it is it's it's not it's not like a",
    "start": "2216900",
    "end": "2223050"
  },
  {
    "text": "marketing thing it's just a Productivity thing it's a practicality thing it's a better language to write your code in",
    "start": "2223050",
    "end": "2229130"
  },
  {
    "start": "2229000",
    "end": "2342000"
  },
  {
    "text": "and you can use it for JavaScript as well so you can create react applications and there's lots of people",
    "start": "2229130",
    "end": "2234750"
  },
  {
    "text": "who've done some great stuff there as well so last year everything was around the main focus was multi-platform live",
    "start": "2234750",
    "end": "2240690"
  },
  {
    "text": "research it's a multi-platform projects because of the applications or libraries and the idea here is again taking our",
    "start": "2240690",
    "end": "2247230"
  },
  {
    "text": "Comment and running it everywhere so we need to take Kotlin right column once and have it deployed as a native",
    "start": "2247230",
    "end": "2252990"
  },
  {
    "text": "artifact like a library or an executable and as an iOS app as a JSP bundle for",
    "start": "2252990",
    "end": "2258570"
  },
  {
    "text": "the browser or for node and or as a jar for the JVM so and being able to take Collin and deployed all of these and",
    "start": "2258570",
    "end": "2264870"
  },
  {
    "text": "writing that code inside a project now the good thing about Collin is most of the code that you write will be common",
    "start": "2264870",
    "end": "2271170"
  },
  {
    "text": "code can work on any of those platforms it'll be fairly generic especially data models business logic and I will that",
    "start": "2271170",
    "end": "2277350"
  },
  {
    "text": "sort of thing and but then whenever you get into these platforms there are some",
    "start": "2277350",
    "end": "2282810"
  },
  {
    "text": "specific features so you will have things that you can do in the browser that you can't do in an Android",
    "start": "2282810",
    "end": "2288900"
  },
  {
    "text": "application and vice versa with native applications there would be libraries that you can call in to need of",
    "start": "2288900",
    "end": "2295080"
  },
  {
    "text": "resources that you'll be able to operate with and that you can't do any other platform so the idea behind the multi",
    "start": "2295080",
    "end": "2300900"
  },
  {
    "text": "platform projects is that we can have most of our common code and our specific code would all monkeys together and they",
    "start": "2300900",
    "end": "2307530"
  },
  {
    "text": "have this concept of expectation and actual code so the common code can",
    "start": "2307530",
    "end": "2312690"
  },
  {
    "text": "actually call into the specific code and things that got there so it's really clever way of doing it it's all in one",
    "start": "2312690",
    "end": "2317910"
  },
  {
    "text": "project and makes it easy to have these right ones run everywhere some people",
    "start": "2317910",
    "end": "2323820"
  },
  {
    "text": "are even doing this as a universal data layer even when the front-end we cool yeah yeah and you'll see in",
    "start": "2323820",
    "end": "2329890"
  },
  {
    "text": "their documentation you'll see API is within common that are only available in",
    "start": "2329890",
    "end": "2334960"
  },
  {
    "text": "one platform so you'll see like support like we've got here for for a particular API on each of the platforms that they",
    "start": "2334960",
    "end": "2341350"
  },
  {
    "text": "serve so this is the ID again we can write columns specific for the JVM and",
    "start": "2341350",
    "end": "2346720"
  },
  {
    "start": "2342000",
    "end": "2364000"
  },
  {
    "text": "for Android and so on or we can write this multi platform solution that can work across them all and we're seeing",
    "start": "2346720",
    "end": "2353350"
  },
  {
    "text": "you know libraries out there open-source libraries out there that you can consume in a multi platform so you can consume",
    "start": "2353350",
    "end": "2358570"
  },
  {
    "text": "them and your specific platforms or you can consume them from your multi platform solutions which is really good",
    "start": "2358570",
    "end": "2364710"
  },
  {
    "start": "2364000",
    "end": "2446000"
  },
  {
    "text": "so yeah common versus Scala take us home yeah no absolutely so whatever we first",
    "start": "2364710",
    "end": "2370900"
  },
  {
    "text": "set out to write this talk we pitched it without knowing what the conclusion would be which always makes for a more interesting creative writing experience",
    "start": "2370900",
    "end": "2378010"
  },
  {
    "text": "yes and in some ways it might have been a better talk of Cortland and Scala were at each other's throats at the moment",
    "start": "2378010",
    "end": "2384370"
  },
  {
    "text": "you know trying to outdo each other in features but very much at the moment it feels like Cortland and Schuyler just",
    "start": "2384370",
    "end": "2390430"
  },
  {
    "text": "ships passing in the night yeah each of them is trying to achieve quality but each of them is going in a completely",
    "start": "2390430",
    "end": "2396220"
  },
  {
    "text": "different direction so there are some things in common they both have a new compiler which allegedly works a lot",
    "start": "2396220",
    "end": "2402280"
  },
  {
    "text": "faster in both cases they both compile to an intermediate representation so to",
    "start": "2402280",
    "end": "2407770"
  },
  {
    "text": "simplify back-end so the front end of the compiler will always be the same the back end can then target JavaScript",
    "start": "2407770",
    "end": "2414490"
  },
  {
    "text": "bytecode assembly whatever seems to be whatever they need yeah but in the case",
    "start": "2414490",
    "end": "2420160"
  },
  {
    "text": "of Scala there are many many new language features in the case of Cortland it's just a few in the case of",
    "start": "2420160",
    "end": "2426460"
  },
  {
    "text": "Scala 3 they're really focused around the language and trying to make the language the best it can possibly be in",
    "start": "2426460",
    "end": "2432220"
  },
  {
    "text": "the case of : they're trying to extend the platform they're very very deliberately trying to make open the one",
    "start": "2432220",
    "end": "2438160"
  },
  {
    "text": "universal language that can work on any platform and fit in with any projects needs so two very very different",
    "start": "2438160",
    "end": "2445180"
  },
  {
    "text": "definitions of quality so yes in many ways that they're trying to do the same thing but in more ways they're often",
    "start": "2445180",
    "end": "2452380"
  },
  {
    "start": "2446000",
    "end": "2513000"
  },
  {
    "text": "different directions so a good example I find of this is as you know you've got this architecture which is",
    "start": "2452380",
    "end": "2459249"
  },
  {
    "text": "now being used for web servers and restful services so you've got the HTTP",
    "start": "2459249",
    "end": "2465819"
  },
  {
    "text": "4k and HTTP for s and now HTTP for J and so on so if you look at HTTP for K well",
    "start": "2465819",
    "end": "2472930"
  },
  {
    "text": "it's very straightforward I mean I learned how to use this in an R and I was creating restful services with it",
    "start": "2472930",
    "end": "2479650"
  },
  {
    "text": "and it was great so very simple very straightforward very useable and then I went out and looked at the HTTP for s",
    "start": "2479650",
    "end": "2486700"
  },
  {
    "text": "and that it's all using Katz effects so it's all based around an effect architecture and it did not take me an",
    "start": "2486700",
    "end": "2493210"
  },
  {
    "text": "hour to learn this I'm still learning about how it works but it's interesting it's new it's challenging me it's making",
    "start": "2493210",
    "end": "2499119"
  },
  {
    "text": "me think in different directions you know I can feel myself getting smarter as I'm playing with this so you have two",
    "start": "2499119",
    "end": "2505690"
  },
  {
    "text": "very different approaches you know the scalar approach and the common approach they're going off in totally different",
    "start": "2505690",
    "end": "2511690"
  },
  {
    "text": "directions so I often think that if Scala and Kotlin met in the bar it would",
    "start": "2511690",
    "end": "2517180"
  },
  {
    "start": "2513000",
    "end": "2604000"
  },
  {
    "text": "be like the scene in under siege you know they would just talk about developers and go you and me were puppets in the CM Sikkim we serve the",
    "start": "2517180",
    "end": "2523809"
  },
  {
    "text": "same master and he's a lunatic and he's ungrateful there's nothing we can do about that you know you and me we're the same you",
    "start": "2523809",
    "end": "2530799"
  },
  {
    "text": "know so that you have two languages that are working in the same environment but yet are going off in completely",
    "start": "2530799",
    "end": "2537099"
  },
  {
    "text": "different directions so which is greater quality well put it like this for",
    "start": "2537099",
    "end": "2542109"
  },
  {
    "text": "learning new things for hacking around in for playing with stuff I absolutely",
    "start": "2542109",
    "end": "2547119"
  },
  {
    "text": "love Scala different were me and my four best friends if I had four friends then",
    "start": "2547119",
    "end": "2552309"
  },
  {
    "text": "you know and we were starting some kind of Kickstarter you know some kind of new startup project well then definitely",
    "start": "2552309",
    "end": "2558309"
  },
  {
    "text": "maybe I choose Scala for that on the other hand if I was a coach if I was a",
    "start": "2558309",
    "end": "2563739"
  },
  {
    "text": "senior developer if I was working in an enterprise environment if I needed to mentor and bring on a dozen junior",
    "start": "2563739",
    "end": "2570700"
  },
  {
    "text": "developers then it would absolutely be Kotlin all the way you know with eiders can thought so so that that's the",
    "start": "2570700",
    "end": "2577059"
  },
  {
    "text": "environment in which we we seem to find ourselves you know so as ever pick the the tool that works",
    "start": "2577059",
    "end": "2583329"
  },
  {
    "text": "best for you thanks very much everybody thank you very much there's what's up",
    "start": "2583329",
    "end": "2591540"
  },
  {
    "text": "thank you",
    "start": "2594210",
    "end": "2597359"
  }
]