[
  {
    "start": "0",
    "end": "51000"
  },
  {
    "text": "so it's great to be here this is my first time at this conference and um i've been having a great time it's a",
    "start": "399",
    "end": "6560"
  },
  {
    "text": "it's a really terrific conference uh and so i'm i'm really also delighted that i i have a chance to to talk about the",
    "start": "6560",
    "end": "14240"
  },
  {
    "text": "chakra engine mostly i'm just walking on my treadmill",
    "start": "14240",
    "end": "19600"
  },
  {
    "text": "coding on it and and don't don't get out much but this is a great",
    "start": "19600",
    "end": "24800"
  },
  {
    "text": "pleasure so you'll notice that from the talk abstract in your",
    "start": "24800",
    "end": "30000"
  },
  {
    "text": "little booklet i've i've changed the metaphor from inner workings to under the hood",
    "start": "30000",
    "end": "35520"
  },
  {
    "text": "that's a shout out to uh our home team the uh the v8 team",
    "start": "35520",
    "end": "41280"
  },
  {
    "text": "uh uh and all the great work they've done and using the engine metaphor um",
    "start": "41280",
    "end": "48559"
  },
  {
    "text": "okay so this is the slide that we showed the internet explorer team two and a half",
    "start": "48559",
    "end": "54239"
  },
  {
    "start": "51000",
    "end": "51000"
  },
  {
    "text": "years ago or has it been no it's been longer than that",
    "start": "54239",
    "end": "59520"
  },
  {
    "text": "more than three years ago um uh to to express the principles of what we were going to do",
    "start": "59520",
    "end": "65680"
  },
  {
    "text": "to try to to reinvigorate the internet explorer javascript engine and i bring it up here now mostly",
    "start": "65680",
    "end": "73200"
  },
  {
    "text": "to just remind everybody in the audience that it's not all about perf there are other things and and and",
    "start": "73200",
    "end": "80080"
  },
  {
    "text": "actually before you can really dig in and work on on on perf like we are now you have to",
    "start": "80080",
    "end": "87600"
  },
  {
    "text": "um make sure that the thing is secure and and compliant and then uh by balanced",
    "start": "87600",
    "end": "95520"
  },
  {
    "text": "performance i'm just referring to that uh there's a lot of dimensions to to the",
    "start": "95520",
    "end": "100960"
  },
  {
    "text": "performance of a language runtime system you know in addition to throughput which we often talk about",
    "start": "100960",
    "end": "107520"
  },
  {
    "text": "there's also things like how fast does the application load how much battery power are you consuming and so on and so",
    "start": "107520",
    "end": "114479"
  },
  {
    "text": "that's why i put balance performance there and then transparency that's up there uh because it really",
    "start": "114479",
    "end": "120399"
  },
  {
    "text": "matters that you get predictable performance so when you're authoring something",
    "start": "120399",
    "end": "126079"
  },
  {
    "text": "as a javascript developer you're authoring a big app you want to know okay 15 minutes into",
    "start": "126079",
    "end": "132319"
  },
  {
    "text": "the thing is the performance going to degrade uh can i predict that if i use a certain",
    "start": "132319",
    "end": "137520"
  },
  {
    "text": "style like a lot of closures or you know a lot of long prototype chains",
    "start": "137520",
    "end": "143360"
  },
  {
    "text": "what's that's going to do to the performance of the thing and so one of the key goals in addition",
    "start": "143360",
    "end": "148480"
  },
  {
    "text": "to just getting great performance was to make the performance predictable for app developers so that's the main",
    "start": "148480",
    "end": "156000"
  },
  {
    "text": "design principles that we had and i'll start with security so",
    "start": "156000",
    "end": "163440"
  },
  {
    "text": "when you go to do just incline code generation you introduce a an additional possible attack vector",
    "start": "164560",
    "end": "173040"
  },
  {
    "text": "and so i'll talk a little bit about jit security but before i talk about that i'll talk about some of the other things",
    "start": "173519",
    "end": "179680"
  },
  {
    "text": "so a key thing that we did for the chakra engine is is do a lot of",
    "start": "179680",
    "end": "187360"
  },
  {
    "text": "security work even in the native code of the chakra engine and",
    "start": "187360",
    "end": "193280"
  },
  {
    "text": "one of the things we did is that we hired an outside vendor of um people who like",
    "start": "193360",
    "end": "199920"
  },
  {
    "text": "to go to the black hat conference and had them attack us for a period of time and",
    "start": "199920",
    "end": "205599"
  },
  {
    "text": "got quarterly and reports and so we we had a lot of fun actually",
    "start": "205599",
    "end": "211599"
  },
  {
    "text": "hardening this thing and it was it was gratifying that after a while they had a really",
    "start": "211599",
    "end": "217120"
  },
  {
    "text": "hard time finding attack vectors of course nothing is perfect but we keep working on it",
    "start": "217120",
    "end": "223920"
  },
  {
    "text": "so one of the big things we worked on because it was new in what we were doing is is this jit",
    "start": "223920",
    "end": "229120"
  },
  {
    "text": "spray attack some of you may not be familiar with that term but it just refers to",
    "start": "229120",
    "end": "235680"
  },
  {
    "text": "a clever adversary trying to figure out some way that they can send you javascript source code",
    "start": "235680",
    "end": "242000"
  },
  {
    "text": "a lot of it and then you will emit sequences of native instructions that",
    "start": "242000",
    "end": "248480"
  },
  {
    "text": "they can then exploit from another exploit that they already have going",
    "start": "248480",
    "end": "253680"
  },
  {
    "text": "in the native part of your code so if for example they can jump to an arbitrary address in memory then they",
    "start": "253680",
    "end": "261040"
  },
  {
    "text": "can or even some region of memory they can do things like put in a thing called a",
    "start": "261040",
    "end": "266479"
  },
  {
    "text": "no op which is then you follow a bunch of no-ops and you get to the attack code",
    "start": "266479",
    "end": "273040"
  },
  {
    "text": "so this type of attack is is out there there have been real",
    "start": "273040",
    "end": "280160"
  },
  {
    "text": "exploits that have caused millions of dollars of damage from this so so we did our best with it and uh so the",
    "start": "280160",
    "end": "288240"
  },
  {
    "text": "first and foremost thing we did was we run our uh our engine with data execute protection",
    "start": "288240",
    "end": "294320"
  },
  {
    "text": "on as far as i know we're the only script engine that does that",
    "start": "294320",
    "end": "300960"
  },
  {
    "start": "295000",
    "end": "295000"
  },
  {
    "text": "the reason we chose to do that is that for a lot of other programs we've seen a huge",
    "start": "300960",
    "end": "308720"
  },
  {
    "text": "decrease in the amount of exploits revealed over time on those programs if we have data execute protection on",
    "start": "308720",
    "end": "315600"
  },
  {
    "text": "so there was a lot of solid evidence that it would work",
    "start": "315600",
    "end": "320560"
  },
  {
    "text": "it does make certain performance things a little challenging because you have to do things like",
    "start": "320639",
    "end": "327840"
  },
  {
    "text": "well you can't write the code because because once we once we output the code we take a",
    "start": "327840",
    "end": "334160"
  },
  {
    "text": "checksum a cryptographic checksum we then turn right permission off and then",
    "start": "334160",
    "end": "339199"
  },
  {
    "text": "turn execute permission on and so um so the pages that are executed",
    "start": "339199",
    "end": "344320"
  },
  {
    "text": "cannot be written and are checked to make sure that they're exactly the code that the jig compiler emitted and because",
    "start": "344320",
    "end": "352479"
  },
  {
    "text": "of that it's a little trickier to do things like polymorphic inline caching some of you may not be familiar with",
    "start": "352479",
    "end": "358479"
  },
  {
    "text": "that term but that's a geeky term from dynamic language implementation where you",
    "start": "358479",
    "end": "364479"
  },
  {
    "text": "take objects that come through a code site that might be of different hidden class types and you have to be",
    "start": "364479",
    "end": "370479"
  },
  {
    "text": "able to cache how to get at a particular property that's on the object",
    "start": "370479",
    "end": "375840"
  },
  {
    "text": "and i know for example the v8 engine will just write in the the value of the of",
    "start": "375840",
    "end": "382720"
  },
  {
    "text": "of the current type right in the code but we can't do that because we've got data execute protection on",
    "start": "382720",
    "end": "387919"
  },
  {
    "text": "so it makes it a little harder but it's worth it okay so code base alignment",
    "start": "387919",
    "end": "394560"
  },
  {
    "text": "randomization that is uh to make it so that it's not very easy",
    "start": "394560",
    "end": "399919"
  },
  {
    "text": "to know some offset that you can jump to that will work for you random no up insertion is for the same",
    "start": "399919",
    "end": "407039"
  },
  {
    "text": "purpose constant blinding that's because people will write whole programs in",
    "start": "407039",
    "end": "412639"
  },
  {
    "text": "little constants especially on the x86 which has a profusion of instructions where you can stick",
    "start": "412639",
    "end": "417840"
  },
  {
    "text": "big juicy constants right in there and then they'll jump off alignment to",
    "start": "417840",
    "end": "423360"
  },
  {
    "text": "these constants and it'll be an actual sequence of executable instructions so um constant blinding is where you do xor",
    "start": "423360",
    "end": "430479"
  },
  {
    "text": "tricks um and then also there's a a large but",
    "start": "430479",
    "end": "436080"
  },
  {
    "text": "present heuristic to avoid a big blitz of code allocation",
    "start": "436080",
    "end": "443440"
  },
  {
    "text": "and finally there's there's page randomization which means we don't just open a giant buffer and then generate",
    "start": "443680",
    "end": "450319"
  },
  {
    "text": "code into sequences of pages this is just a little bit of comparison that a third party did",
    "start": "450319",
    "end": "457520"
  },
  {
    "start": "454000",
    "end": "454000"
  },
  {
    "text": "and i think the really the only thing to take away from the slide is that it's a good thing that firefox",
    "start": "457520",
    "end": "463039"
  },
  {
    "text": "doesn't have a high probability of being attacked because at present they're not doing a",
    "start": "463039",
    "end": "468560"
  },
  {
    "text": "whole lot chrome has um just about caught up to where ie is in doing the jit hardening i think",
    "start": "468560",
    "end": "476639"
  },
  {
    "text": "this this third party took this for chrome 14 and i know chrome has added added some more of these rows since then",
    "start": "476639",
    "end": "484080"
  },
  {
    "text": "um okay so on to compliance so this is a screen from a recent run of the test 262",
    "start": "484080",
    "end": "491680"
  },
  {
    "start": "487000",
    "end": "487000"
  },
  {
    "text": "which is a suite of tests a conformance test that a group of people from the industry",
    "start": "491680",
    "end": "496800"
  },
  {
    "text": "including microsoft are collaborating on um that it's like over 10 000 tests and",
    "start": "496800",
    "end": "502879"
  },
  {
    "text": "it's just to make sure that everybody is running the same language and you can see here ie10 right now has",
    "start": "502879",
    "end": "510720"
  },
  {
    "text": "the highest pass rate and we're missing one test and i was really sad to come here with the one test missing but it turns",
    "start": "510720",
    "end": "517360"
  },
  {
    "text": "out that there's this new little unicode test and there's a bug actually in the",
    "start": "517360",
    "end": "523360"
  },
  {
    "text": "windows operating system so in fact all the browsers right now have this test failing",
    "start": "523360",
    "end": "528640"
  },
  {
    "text": "um but we had 100 i was ready to show you 100 but it's not to be um oh and",
    "start": "528640",
    "end": "535600"
  },
  {
    "text": "actually before i get off this i this this slide it reminds me of a of a a particular day",
    "start": "535600",
    "end": "541839"
  },
  {
    "text": "in the history of this project it was a great day it was the it was i think january 6 2010 which is the day",
    "start": "541839",
    "end": "549120"
  },
  {
    "text": "that we turned the chakra runtime engine on by default in the internet explorer 9 browser",
    "start": "549120",
    "end": "555279"
  },
  {
    "text": "and that's not that easy to do because they run a suite of 4 000 web pages that",
    "start": "555279",
    "end": "562800"
  },
  {
    "text": "just goes across every possible compatibility range so it's like corporate things that",
    "start": "562800",
    "end": "569200"
  },
  {
    "text": "use ancient assumptions about what the browser does and up to very modern things like",
    "start": "569200",
    "end": "574399"
  },
  {
    "text": "acid three tests so passing all that was a great day and the internet explorer team actually",
    "start": "574399",
    "end": "580640"
  },
  {
    "text": "sent us krispy kreme donuts which was great and they gave us love for about 12 hours and then we started",
    "start": "580640",
    "end": "586560"
  },
  {
    "text": "getting email messages like hey did you know that for this web page you regressed working set by half a",
    "start": "586560",
    "end": "592080"
  },
  {
    "text": "percent that's not acceptable so then we had a",
    "start": "592080",
    "end": "597360"
  },
  {
    "text": "really good two months of fixing all that um before we're ready to go so",
    "start": "597360",
    "end": "604000"
  },
  {
    "text": "let's start with a little stuff on how we do page loads so so basically source code comes in and",
    "start": "604000",
    "end": "610160"
  },
  {
    "start": "608000",
    "end": "608000"
  },
  {
    "text": "it's parsed i can get that far we make an ast as abstract syntax tree",
    "start": "610160",
    "end": "616640"
  },
  {
    "text": "for those of you who don't write compilers and then that goes into a byte code generator",
    "start": "616640",
    "end": "622640"
  },
  {
    "text": "why do we generate byte code instead of just going right to native code well because we want to interpret",
    "start": "622640",
    "end": "627680"
  },
  {
    "text": "why do we want to interpret because as far as we can tell by running experiments that's",
    "start": "627680",
    "end": "633360"
  },
  {
    "text": "the fastest way to get code actually running and to get interactive response of a page so get the byte code out put it in the",
    "start": "633360",
    "end": "641279"
  },
  {
    "text": "interpreter and that's it that's all that you have to do for",
    "start": "641279",
    "end": "647040"
  },
  {
    "text": "to say load the new york times and the important thing is that the the parsing is deferred so",
    "start": "647040",
    "end": "654160"
  },
  {
    "text": "there's a a prominent cable news site that i i'm not allowed to say who it is but",
    "start": "655360",
    "end": "662240"
  },
  {
    "text": "um i was amazed to find and this is very common that they",
    "start": "662240",
    "end": "667440"
  },
  {
    "text": "download 70 000 functions for their front page and they they use",
    "start": "667440",
    "end": "673839"
  },
  {
    "text": "19 of them during the page load so um we certainly we soon learned that if",
    "start": "673839",
    "end": "680160"
  },
  {
    "text": "we wanted to cut page load time we had to parse as little as possible um",
    "start": "680160",
    "end": "685600"
  },
  {
    "text": "and so we you know we just parse curly braces and we fill in later and there's all kinds of",
    "start": "685600",
    "end": "691680"
  },
  {
    "text": "tricks to that and and there's ongoing challenges so for example",
    "start": "691680",
    "end": "696720"
  },
  {
    "text": "the ecmascript 6 committee they're they're working on features like lead and const and one of the specifications about let",
    "start": "696720",
    "end": "704160"
  },
  {
    "text": "and const which by the way are new ways of introducing",
    "start": "704160",
    "end": "709519"
  },
  {
    "text": "variables into local scopes in ecoscript six is that syntax errors are",
    "start": "709519",
    "end": "716000"
  },
  {
    "text": "supposed to be reported synchronously with the load of those function bodies and the problem with that is that it's",
    "start": "716000",
    "end": "722160"
  },
  {
    "text": "very hard to do deferred parsing and then report errors about local variable",
    "start": "722160",
    "end": "728240"
  },
  {
    "text": "declarations so we're working with them on that so it's a it's always a struggle to to keep getting performance through",
    "start": "728240",
    "end": "736880"
  },
  {
    "text": "the design of these things okay um so but we try page load is important",
    "start": "736880",
    "end": "743120"
  },
  {
    "start": "743000",
    "end": "743000"
  },
  {
    "text": "because it's it's one of the most visceral parts of the user experience you know a",
    "start": "743120",
    "end": "749040"
  },
  {
    "text": "lot of times especially with the old school web before we had web applications um you know you're just navigating",
    "start": "749040",
    "end": "756160"
  },
  {
    "text": "sequentially through a series of of page load hits so it's very important to get right",
    "start": "756160",
    "end": "762880"
  },
  {
    "text": "and you know there's solid evidence that internet explorer is is doing pretty well with it both for i9 and i10",
    "start": "763040",
    "end": "771200"
  },
  {
    "text": "most of the independent reviews that i've seen and a lot of the recent reviews",
    "start": "771200",
    "end": "776639"
  },
  {
    "text": "say that internet explorer is loading pages the fastest certainly does pretty well so what do we",
    "start": "776639",
    "end": "781680"
  },
  {
    "text": "do we we interpret so we start execution almost immediately that's very helpful there's deferred",
    "start": "781680",
    "end": "786880"
  },
  {
    "text": "parsing there's startup profile caching so a lot of you guys",
    "start": "786880",
    "end": "792240"
  },
  {
    "text": "will have heard the term hotspot which was you know done by a lot of the",
    "start": "792240",
    "end": "799120"
  },
  {
    "text": "v8 crew and other people for sun microsystems for java execution",
    "start": "799120",
    "end": "805519"
  },
  {
    "text": "so one of the things that you can do for very little memory uh on stored is is just",
    "start": "805519",
    "end": "812880"
  },
  {
    "text": "save where the hot spots are and so what we do is we don't write out any code or",
    "start": "812880",
    "end": "818079"
  },
  {
    "text": "or any um complex information we just like say what the hot spots are and we say",
    "start": "818079",
    "end": "823680"
  },
  {
    "text": "what heuristics work the best and so like for example for that",
    "start": "823680",
    "end": "829279"
  },
  {
    "text": "big cable news site with the 70 000 functions in one and a half k of output we can",
    "start": "829279",
    "end": "834639"
  },
  {
    "text": "capture everything that's needed to know exactly what we need to generate code for and also we",
    "start": "834639",
    "end": "841920"
  },
  {
    "text": "generate that code in the background so so instead of uh",
    "start": "841920",
    "end": "848000"
  },
  {
    "text": "generating code on the same thread that we're trying to give user responsiveness what we do is we",
    "start": "848000",
    "end": "854160"
  },
  {
    "text": "generate it on another core and we interpret right away and then we use the interpreter to gather",
    "start": "854160",
    "end": "861199"
  },
  {
    "text": "information that's going to help us generate accurate code for the thing so and also the garbage collector is",
    "start": "861199",
    "end": "868959"
  },
  {
    "text": "concurrent i'll have a few more slides on what the garbage collector does in a few minutes but",
    "start": "868959",
    "end": "874880"
  },
  {
    "text": "concurrent garbage collection is really helpful so one wonderful fact about page loads is that page loads are do not",
    "start": "874880",
    "end": "882560"
  },
  {
    "text": "follow the generational hypothesis so for those of you who",
    "start": "882560",
    "end": "888720"
  },
  {
    "text": "don't like to read about garbage collectors the generational hypothesis is that most objects die young",
    "start": "888720",
    "end": "897120"
  },
  {
    "text": "but in in a in a and that can be exploited by uh doing a little copying thing where",
    "start": "897120",
    "end": "903760"
  },
  {
    "text": "you have a nursery of of these young objects but um in a page load what happens is all",
    "start": "903760",
    "end": "909199"
  },
  {
    "text": "the objects are created and almost no objects are destroyed because you're setting up for people to click on things and try everything",
    "start": "909199",
    "end": "915680"
  },
  {
    "text": "and so of course you you just create a lot of live state and then leave it there and so it's important um",
    "start": "915680",
    "end": "922560"
  },
  {
    "text": "that your garbage collector doesn't take up time during the page load and mostly how we",
    "start": "922560",
    "end": "927760"
  },
  {
    "text": "accomplish that is by making the garbage collector concurrent",
    "start": "927760",
    "end": "932240"
  },
  {
    "text": "okay so now on to throughput and and to interactive response which will largely in this talk mean gc",
    "start": "933199",
    "end": "940639"
  },
  {
    "text": "pause times and making them small okay so more powerpoint animations you saw this part",
    "start": "940639",
    "end": "946560"
  },
  {
    "text": "now we have the heartbeat interpreter and that heartbeat is generating profile information so whether we store",
    "start": "946560",
    "end": "952959"
  },
  {
    "text": "that profile information to disk and get it back or not what we do is we use the profiler as kind of a data",
    "start": "952959",
    "end": "958720"
  },
  {
    "text": "gathering machine so as it's running the code and giving you interactive response it's also",
    "start": "958720",
    "end": "965440"
  },
  {
    "text": "measuring where the hotspots are and measuring what loops might benefit from further optimization",
    "start": "965440",
    "end": "971360"
  },
  {
    "text": "and what object accesses are monomorphic what object x's are polymorphic",
    "start": "971360",
    "end": "977120"
  },
  {
    "text": "what functions should be inlined and what code don't you totally don't care about and you will never get out of deferred parsing so the",
    "start": "977120",
    "end": "983839"
  },
  {
    "text": "interpreter is gathering all that information and then there's a set of heuristics that determines whether you have enough",
    "start": "983839",
    "end": "990560"
  },
  {
    "text": "good information to try to type specialize something or generate good code for something",
    "start": "990560",
    "end": "996480"
  },
  {
    "text": "and then you take the runtime profiler and you feed it into core number two where there is a the just-in-time",
    "start": "996480",
    "end": "1002320"
  },
  {
    "text": "compiler and the just-in-time compiler produces machine code and right now it's",
    "start": "1002320",
    "end": "1008000"
  },
  {
    "text": "the same targets i think as v8 you know arm",
    "start": "1008000",
    "end": "1012480"
  },
  {
    "text": "and x64 and x86 so we've got machine code and it too has",
    "start": "1013279",
    "end": "1019279"
  },
  {
    "text": "a heartbeat and then finally the garbage collector is mostly running in core",
    "start": "1019279",
    "end": "1024640"
  },
  {
    "text": "three now this picture is a little misleading because it's not like three cores are blazing all the time the",
    "start": "1024640",
    "end": "1030959"
  },
  {
    "text": "actual cpu utilization is about 1.2 cores because most of the time either the code",
    "start": "1030959",
    "end": "1037199"
  },
  {
    "text": "generator isn't running or the garbage collector isn't running but if they have to to deliver you good interactive response",
    "start": "1037199",
    "end": "1042720"
  },
  {
    "text": "they'll all run at the same time okay so a little bit of more detail",
    "start": "1042720",
    "end": "1048319"
  },
  {
    "text": "about the garbage collector it's conservative this is always something that",
    "start": "1048319",
    "end": "1053760"
  },
  {
    "start": "1050000",
    "end": "1050000"
  },
  {
    "text": "people uh find controversial or interesting but um it works out very well for us and um",
    "start": "1053760",
    "end": "1061440"
  },
  {
    "text": "the the the reason we decided to make it conservative is for good interoperation with native",
    "start": "1061440",
    "end": "1067440"
  },
  {
    "text": "code for example a native host like internet explorer with its dom implementation or",
    "start": "1067440",
    "end": "1073280"
  },
  {
    "text": "a native host like node with its",
    "start": "1073280",
    "end": "1077600"
  },
  {
    "text": "basically native code that does things like talk to sockets so um we did a number of things in the in",
    "start": "1078720",
    "end": "1085760"
  },
  {
    "text": "the shocker engine to to interoperate well one is this allowing",
    "start": "1085760",
    "end": "1090880"
  },
  {
    "text": "pointers to objects to be on the native stack and still finding them and that relieves the native code of the",
    "start": "1090880",
    "end": "1097919"
  },
  {
    "text": "pressure of having to work with whatever kind of ad reference",
    "start": "1097919",
    "end": "1102960"
  },
  {
    "text": "release or smart pointer or i'm in a scope now now i'm out of the scope various",
    "start": "1102960",
    "end": "1108400"
  },
  {
    "text": "disciplines that you would otherwise have to do in order to interact with your script engine we don't have to do",
    "start": "1108400",
    "end": "1113760"
  },
  {
    "text": "because we just look at the stack um there's also the capability of of",
    "start": "1113760",
    "end": "1119039"
  },
  {
    "text": "doing what's called a guest heap or guest arena where the the native code can just",
    "start": "1119039",
    "end": "1124320"
  },
  {
    "text": "allocate some space using the garbage collector and then any object javascript object",
    "start": "1124320",
    "end": "1130000"
  },
  {
    "text": "pointers that it stores there are automatically scanned by the the garbage collector and that makes interrupt very simple",
    "start": "1130000",
    "end": "1136960"
  },
  {
    "text": "you just have to follow a simple discipline so um it turns out the conservative choice",
    "start": "1136960",
    "end": "1142240"
  },
  {
    "text": "we've measured it a lot because we get a lot of questions is that okay aren't you going to get spurious references",
    "start": "1142240",
    "end": "1148880"
  },
  {
    "text": "well no um there's an average of .02 spurious references per collection",
    "start": "1148880",
    "end": "1154640"
  },
  {
    "text": "so that's like two spurious references over a hundred collections um and one of the reasons it's so low in",
    "start": "1154640",
    "end": "1162080"
  },
  {
    "text": "practice is that we have tagged integers in our javascript implementation and so",
    "start": "1162080",
    "end": "1170880"
  },
  {
    "text": "you it's impossible in the javascript part of the stack which is most of the stack to mistake an integer for a pointer",
    "start": "1170880",
    "end": "1177200"
  },
  {
    "text": "because the integers are tagged so so it's also generational there's no",
    "start": "1177200",
    "end": "1184160"
  },
  {
    "text": "separate nursery space but you you can do partial collections and you can tenure some of",
    "start": "1184160",
    "end": "1189600"
  },
  {
    "text": "some of the objects because sometimes the generational hypothesis is followed like in things like",
    "start": "1189600",
    "end": "1196799"
  },
  {
    "text": "gmail or outlook web access so it's mark and sweep but pretty much",
    "start": "1196799",
    "end": "1203679"
  },
  {
    "text": "all garbage collectors these days are small objects are are stuck in size buckets to reduce fragmentation",
    "start": "1203679",
    "end": "1210880"
  },
  {
    "text": "um there's the large object heap has another defragmentation strategy but right now we aren't copying or",
    "start": "1210880",
    "end": "1216480"
  },
  {
    "text": "evacuating anything which also surprises people um but we read a number of studies that were done",
    "start": "1216480",
    "end": "1223440"
  },
  {
    "text": "in the late 90s late 90s and early 2000s that showed that the impact",
    "start": "1223440",
    "end": "1229360"
  },
  {
    "text": "of copying garbage collection is actually much greater on your memory system",
    "start": "1229360",
    "end": "1234480"
  },
  {
    "text": "than just keeping everything in place you actually go through more pages go",
    "start": "1234480",
    "end": "1239520"
  },
  {
    "text": "through more cache lines and so on if you're copying all the time then if then if you're not now it turns",
    "start": "1239520",
    "end": "1246320"
  },
  {
    "text": "out that we could copy over 90 percent of the objects in a typical heap",
    "start": "1246320",
    "end": "1251760"
  },
  {
    "text": "because only the the object headers can't be copied things like you know the",
    "start": "1251760",
    "end": "1258080"
  },
  {
    "text": "the front of an object before it contains the slots that point out all the the properties of the object or the",
    "start": "1258080",
    "end": "1265200"
  },
  {
    "text": "string header but the payload of a string or the payload of an array",
    "start": "1265200",
    "end": "1270640"
  },
  {
    "text": "or the slot array that holds all the properties of the objects all of those things could be copied",
    "start": "1270640",
    "end": "1276000"
  },
  {
    "text": "because there's only one pointer to those things and so if we did need to do evacuation and copying we could",
    "start": "1276000",
    "end": "1281520"
  },
  {
    "text": "but we haven't found any smoking gun in any of the apps that we try to run",
    "start": "1281520",
    "end": "1288240"
  },
  {
    "text": "that makes us do it and that's the way we run a lot of of our performances that we uh no one is",
    "start": "1288240",
    "end": "1295039"
  },
  {
    "text": "allowed to speculatively add anything to the chakra engine there has to be an app that is agreed to be important",
    "start": "1295039",
    "end": "1301919"
  },
  {
    "text": "enough um and what we call a smoking gun like a measurement that focuses in and says",
    "start": "1301919",
    "end": "1307360"
  },
  {
    "text": "okay to make this app run well enough we really do need to take this optimization",
    "start": "1307360",
    "end": "1313280"
  },
  {
    "text": "so this little diagram here is not to scale the blue parts so the bottom part is supposed to be the",
    "start": "1313280",
    "end": "1318640"
  },
  {
    "text": "concurrent garbage collection thread and then the top part is supposed to be the ui thread and the little blue on the",
    "start": "1318640",
    "end": "1325840"
  },
  {
    "text": "top where we're scanning roots and then rescanning those are actually smaller but i couldn't fit the text in there",
    "start": "1325840",
    "end": "1332720"
  },
  {
    "text": "and so basically what happens with concurrent gc is you get a little pause and you scan the registers in the",
    "start": "1332720",
    "end": "1339360"
  },
  {
    "text": "stack and then you put all that on the mark stack and then you go back and run user code",
    "start": "1339360",
    "end": "1346320"
  },
  {
    "text": "and and give them good interactive response meanwhile the background thread is marking through the object graph",
    "start": "1346320",
    "end": "1352480"
  },
  {
    "text": "then once you um have marked through the object graph and",
    "start": "1352480",
    "end": "1358880"
  },
  {
    "text": "you're given an opportunity you do a thing called rescan which is that any objects that were written",
    "start": "1358880",
    "end": "1364559"
  },
  {
    "text": "during this middle phase of the program right here need to be checked to see if they have",
    "start": "1364559",
    "end": "1371600"
  },
  {
    "text": "any have any new references and then you also have to rescan the stack",
    "start": "1371600",
    "end": "1377039"
  },
  {
    "text": "normally this results in a very modest amount of new objects being stuck on the mark stack and so we go ahead and mark through",
    "start": "1377200",
    "end": "1383440"
  },
  {
    "text": "sequentially and finish so we um",
    "start": "1383440",
    "end": "1390559"
  },
  {
    "text": "you can also not um not finish what you can do is you can",
    "start": "1390559",
    "end": "1397360"
  },
  {
    "text": "say oh you know what i i got too many objects to mark through sequentially so i'm going to go back concurrent mark",
    "start": "1397360",
    "end": "1403840"
  },
  {
    "text": "the object graph again and then try again to finish okay so what that leads to is very small",
    "start": "1403840",
    "end": "1409679"
  },
  {
    "text": "predictable pause times and so we measured some here's some examples",
    "start": "1409679",
    "end": "1414799"
  },
  {
    "text": "of what we measured outlook bing maps being image search and then a couple",
    "start": "1414799",
    "end": "1421200"
  },
  {
    "start": "1415000",
    "end": "1415000"
  },
  {
    "text": "sharepoint so we've measured this on a lot of things both microsoft things which this mostly is or other things",
    "start": "1421200",
    "end": "1426720"
  },
  {
    "text": "like gmail page loads um and and and it's pretty much this is",
    "start": "1426720",
    "end": "1433520"
  },
  {
    "text": "what it looks like the one exception is um html5 games which is kind of a frontier for us we're",
    "start": "1433520",
    "end": "1440240"
  },
  {
    "text": "trying to you know hi get high frame rate games to work really smoothly and we we still",
    "start": "1440240",
    "end": "1445919"
  },
  {
    "text": "have some challenges with that um but working on it hard but for for things like this big web",
    "start": "1445919",
    "end": "1451360"
  },
  {
    "text": "applications and web pages we're doing quite well so this is this is the max time ever spent in garbage",
    "start": "1451360",
    "end": "1457360"
  },
  {
    "text": "collection over across a a big session like about a 20-minute session of using these",
    "start": "1457360",
    "end": "1462640"
  },
  {
    "text": "programs with a script that the person goes through to test it and so you see for for outlook and",
    "start": "1462640",
    "end": "1468960"
  },
  {
    "text": "sharepoint the background gc used about 15",
    "start": "1468960",
    "end": "1474159"
  },
  {
    "text": "milliseconds um for a collection but but the foreground gc",
    "start": "1474159",
    "end": "1479520"
  },
  {
    "text": "at most used seven milliseconds or in the case of sharepoint up to 10 milliseconds so these are short",
    "start": "1479520",
    "end": "1486000"
  },
  {
    "text": "pauses that aren't going to interfere with your interactive response so if you're busy typing in something like in office 365 powerpoint or",
    "start": "1486000",
    "end": "1493840"
  },
  {
    "text": "whatever you're doing something under 30 milliseconds is probably not going to",
    "start": "1493840",
    "end": "1499840"
  },
  {
    "text": "interfere with the interactive response and then another thing to note is that the average",
    "start": "1499840",
    "end": "1506240"
  },
  {
    "text": "time is a lot is somewhat lower like under four milliseconds for all",
    "start": "1506240",
    "end": "1512880"
  },
  {
    "text": "but still it's pretty consistent so so what you're getting is you're getting consistent predictable pause times which",
    "start": "1512880",
    "end": "1518799"
  },
  {
    "text": "is what is great for delivering interactive response in these in these big web applications",
    "start": "1518799",
    "end": "1524320"
  },
  {
    "text": "um and so that's mostly due to the concurrent gc and how it's architected okay so",
    "start": "1524320",
    "end": "1530720"
  },
  {
    "text": "now the obligatory throughput slide so here we go um and i have to tell you that",
    "start": "1530720",
    "end": "1537840"
  },
  {
    "start": "1535000",
    "end": "1535000"
  },
  {
    "text": "uh being in our house the v8 is a fierce competitor so",
    "start": "1537840",
    "end": "1542960"
  },
  {
    "text": "when when when we were working on i9 we passed",
    "start": "1542960",
    "end": "1551760"
  },
  {
    "text": "chrome seven times and seven times they passed us back again before we could ship a preview",
    "start": "1551760",
    "end": "1558159"
  },
  {
    "text": "and so for a time it was you know quite difficult um and we worked really hard on it and",
    "start": "1558159",
    "end": "1565120"
  },
  {
    "text": "of course different benchmarks are different but this is the benchmark that people paid",
    "start": "1565120",
    "end": "1570640"
  },
  {
    "text": "the most attention to and had the most diversity of little snippets so we focused on it a",
    "start": "1570640",
    "end": "1575840"
  },
  {
    "text": "lot and um we've managed to hold the lead between the the shipping of i-9 and now",
    "start": "1575840",
    "end": "1582640"
  },
  {
    "text": "the the the shipping of ie10 but you know i'm sure v8 will surge past us at some",
    "start": "1582640",
    "end": "1590559"
  },
  {
    "text": "point or it's it really doesn't matter that much because honestly you have to take these kinds of",
    "start": "1590559",
    "end": "1596799"
  },
  {
    "text": "benchmarks with a big grain of salt because um you know like",
    "start": "1596799",
    "end": "1602880"
  },
  {
    "text": "the press loves a horse race and they're a number and people can focus on",
    "start": "1602880",
    "end": "1607919"
  },
  {
    "text": "the number and be like oh yeah it's this number but i think what we try to do instead is think about",
    "start": "1607919",
    "end": "1615279"
  },
  {
    "text": "classes of applications so what do you want to do on the web application",
    "start": "1615279",
    "end": "1620720"
  },
  {
    "text": "platform that you can't do because i think we all share i know from talking to lars that that",
    "start": "1620720",
    "end": "1628480"
  },
  {
    "text": "his team feels this way and i think we all share that we just want to make the web platform better we want to make it",
    "start": "1628480",
    "end": "1633520"
  },
  {
    "text": "more applicable to more classes of apps and so what we try to do is we try not to get",
    "start": "1633520",
    "end": "1638720"
  },
  {
    "text": "drawn into the benchmarks too much and to focus more on okay we want to do cut the rope and can we",
    "start": "1638720",
    "end": "1646720"
  },
  {
    "text": "make sure that it doesn't glitch at all or you know or in the looking back in the past it",
    "start": "1646720",
    "end": "1651919"
  },
  {
    "text": "was more things like well you want to run a word processor or powerpoint or a mail client and you want",
    "start": "1651919",
    "end": "1658559"
  },
  {
    "text": "to make that smooth interactive response and can we do that and and sort of forcing there to be a",
    "start": "1658559",
    "end": "1664799"
  },
  {
    "text": "smoking gun from one of those things that apply to this but so um we make",
    "start": "1664799",
    "end": "1670480"
  },
  {
    "text": "steady progress on benchmarks we use benchmarks we think you know they have a place but we're hopeful that we can all work together to",
    "start": "1670480",
    "end": "1677840"
  },
  {
    "text": "craft a benchmark as an industry that would be more like the spec mark and and less like the the current",
    "start": "1677840",
    "end": "1684159"
  },
  {
    "text": "benchmark so back when we were all doing you know c and c plus plus performance there was a thing called the bite mark",
    "start": "1684159",
    "end": "1690240"
  },
  {
    "text": "and other little sort of code snippet based benchmarks which is kind of like what",
    "start": "1690240",
    "end": "1695360"
  },
  {
    "text": "sunspider is and some of the other vendor-supplied benchmarks that there are what we'd like to see is that evolve the",
    "start": "1695360",
    "end": "1702960"
  },
  {
    "text": "way it evolved for c performance to this thing called the spec mark which is basically scenarios from a",
    "start": "1702960",
    "end": "1709120"
  },
  {
    "text": "bunch of real applications that people really use and using that to measure",
    "start": "1709120",
    "end": "1715039"
  },
  {
    "text": "the performance of the language runtime system we think that that would be a really good direction okay so",
    "start": "1715039",
    "end": "1722080"
  },
  {
    "text": "that said what kind of games do we play to run code really fast um well so",
    "start": "1722080",
    "end": "1729520"
  },
  {
    "text": "these slides are are highly abstract uh i i so i'll try to interpret what",
    "start": "1729520",
    "end": "1736000"
  },
  {
    "start": "1731000",
    "end": "1731000"
  },
  {
    "text": "they're they're trying to convey so basically uh what this is trying to convey is that the orange is bad",
    "start": "1736000",
    "end": "1743279"
  },
  {
    "text": "and that the the green and red are better the orange was bad because in i9 we just",
    "start": "1743279",
    "end": "1750240"
  },
  {
    "text": "generated polymorphic code so when we weren't interpreting we would just generate",
    "start": "1750240",
    "end": "1757039"
  },
  {
    "text": "a code that was polym that that no matter what the object type was that came through a particular code site",
    "start": "1757279",
    "end": "1762880"
  },
  {
    "text": "everything was cool you know so if you're doing a loop over something and you're doing a plus plus",
    "start": "1762880",
    "end": "1769200"
  },
  {
    "text": "well if it's an integer grade if it's a floating point number great if it's an object great if it's a string and you're",
    "start": "1769200",
    "end": "1774240"
  },
  {
    "text": "incrementing it you know great we'll try to do that you know so obviously some things are are",
    "start": "1774240",
    "end": "1779679"
  },
  {
    "text": "supposed to produce runtime errors according to ecmascript but most things don't and so",
    "start": "1779679",
    "end": "1785679"
  },
  {
    "text": "but generic polymorphic code only runs so fast especially on applications that use",
    "start": "1785679",
    "end": "1792880"
  },
  {
    "text": "a lot of object access so we wanted to do better and how you do better is you play this",
    "start": "1792880",
    "end": "1798960"
  },
  {
    "text": "game where it's kind of a game of chicken so you",
    "start": "1798960",
    "end": "1804799"
  },
  {
    "text": "run the thing in the interpreter for a while and figure out what the types are usually going through the particular code sites and then you say okay",
    "start": "1804799",
    "end": "1811279"
  },
  {
    "text": "now i'm going to bet that that code is that object is always going to be that type and i'm just going to generate code that",
    "start": "1811279",
    "end": "1817679"
  },
  {
    "text": "just believes that and type specialize it as much as i possibly can for that type",
    "start": "1817679",
    "end": "1825279"
  },
  {
    "text": "but oh wait a minute the ecmascript committee says that i can't just generate that tight beautiful code",
    "start": "1825279",
    "end": "1831520"
  },
  {
    "text": "because it might not be that type that's coming through there and so um you always need to do extra checks",
    "start": "1831520",
    "end": "1837360"
  },
  {
    "text": "and this is where the rub comes in like even when you're generating the much better code that you'll see in a minute",
    "start": "1837360",
    "end": "1843520"
  },
  {
    "text": "it's still not as good as native code because you still have to do those checks of course you can try to hoist the checks out of loops and that is helpful",
    "start": "1843520",
    "end": "1850559"
  },
  {
    "text": "but you still have to do them okay so that's and and basically how that's done is we",
    "start": "1850559",
    "end": "1856480"
  },
  {
    "text": "check and if it isn't the type we think it is or the set of types we think it is we bail out to the interpreter we",
    "start": "1856480",
    "end": "1862480"
  },
  {
    "text": "collect information more and we say oh actually it's polymorphic and then we try again we say okay it's",
    "start": "1862480",
    "end": "1868640"
  },
  {
    "text": "either this type or this type and generate code now um you might be",
    "start": "1868640",
    "end": "1874240"
  },
  {
    "text": "thinking the astute audience member might be thinking oh but didn't he say he wanted",
    "start": "1874240",
    "end": "1880000"
  },
  {
    "text": "predictable performance and people could think about it and get the right performance well",
    "start": "1880000",
    "end": "1886320"
  },
  {
    "text": "i guess i should say predictable performance up to what the semantics of the language are",
    "start": "1886320",
    "end": "1892480"
  },
  {
    "text": "and we're always trying to figure out how to make it more predictable but basically if you don't make these leaps that you",
    "start": "1892480",
    "end": "1898960"
  },
  {
    "text": "can bail out from there's only a limit to how good of code you can generate",
    "start": "1898960",
    "end": "1904640"
  },
  {
    "text": "okay so for example here is type specialized integer math",
    "start": "1904799",
    "end": "1909919"
  },
  {
    "start": "1909000",
    "end": "1909000"
  },
  {
    "text": "um so basically this is a thing where we notice that some of the",
    "start": "1909919",
    "end": "1917039"
  },
  {
    "text": "variables like these variable b and the variable c",
    "start": "1917039",
    "end": "1923120"
  },
  {
    "text": "and the variable m are integers every darn time through the loop and the interpreter runs the loop ten thousand",
    "start": "1923120",
    "end": "1928399"
  },
  {
    "text": "times and it's like it was always integers so then we generate this code and we think okay it's going to always be",
    "start": "1928399",
    "end": "1933600"
  },
  {
    "text": "integers and this is more or less the native code except for this little sad line in red",
    "start": "1933600",
    "end": "1940480"
  },
  {
    "text": "where hey if it wasn't an integer we go to the bailout we go back into the interpreter and we try to get",
    "start": "1940480",
    "end": "1945600"
  },
  {
    "text": "smarter about that loop similarly here's floating point math in ie10",
    "start": "1945600",
    "end": "1951279"
  },
  {
    "start": "1950000",
    "end": "1950000"
  },
  {
    "text": "and i'll show you comparison 99 in a minute this is from the sun spyder benchmark and if you sort of gloss your eyes over",
    "start": "1951279",
    "end": "1958880"
  },
  {
    "text": "this assembly code you'll see that there's mostly ssc2 instructions in there and that's mostly good because that means you're",
    "start": "1958880",
    "end": "1965039"
  },
  {
    "text": "mostly doing what the code intended you to do and not much else and then there's the evil two instructions",
    "start": "1965039",
    "end": "1972640"
  },
  {
    "text": "that you are forced to do because you might be wrong and something other than a floating point number might come through there okay",
    "start": "1972880",
    "end": "1980799"
  },
  {
    "text": "so fast property axis in i9 this is actually sort of just a retrospective slide but i included it because it's so pretty",
    "start": "1980799",
    "end": "1987360"
  },
  {
    "start": "1983000",
    "end": "1983000"
  },
  {
    "text": "i'm sure you guys have seen a million times how people do polymorphic inline caching",
    "start": "1987360",
    "end": "1992880"
  },
  {
    "text": "and but what you're going to see here actually is monomorphic inline caching because that's all ie",
    "start": "1992880",
    "end": "1998799"
  },
  {
    "text": "9 had okay and so basically what this is is that the little bubble thing um on your right",
    "start": "1998799",
    "end": "2005919"
  },
  {
    "text": "there is the hidden class that's what people typically call it when you",
    "start": "2005919",
    "end": "2011039"
  },
  {
    "text": "sort of make up types for objects as you go along in the runtime",
    "start": "2011039",
    "end": "2016399"
  },
  {
    "text": "and then you can see that b1 and b2 are um two objects with two different types",
    "start": "2016399",
    "end": "2023039"
  },
  {
    "text": "um and well in this monomorphic case they're the same type and that's good because x and y came in in the same order but",
    "start": "2023039",
    "end": "2030000"
  },
  {
    "text": "then in this case here unfortunately they're not the same even",
    "start": "2030000",
    "end": "2036399"
  },
  {
    "text": "though if i were to access x or y everything would be cool but the c",
    "start": "2036399",
    "end": "2041679"
  },
  {
    "text": "is kind of messing me up so and in i-9 we didn't have any provision for that so code was slow",
    "start": "2041679",
    "end": "2050398"
  },
  {
    "text": "so what did we do in i-10 we did object type specialization we made polymorphic property caches",
    "start": "2050399",
    "end": "2057358"
  },
  {
    "text": "we did field hoisting which means if you access a field of an object more than once in a loop we will try to",
    "start": "2057359",
    "end": "2062720"
  },
  {
    "text": "stick that access outside the loop if possible we did copy propagation",
    "start": "2062720",
    "end": "2070079"
  },
  {
    "text": "we did streamlined object layout which for example means that instead of",
    "start": "2070639",
    "end": "2075760"
  },
  {
    "text": "actually having a slot array and all that you just stick the",
    "start": "2075760",
    "end": "2081280"
  },
  {
    "text": "the slots right in the object header for some fixed known of known amount of slots and function",
    "start": "2081280",
    "end": "2087440"
  },
  {
    "text": "inlining which is a big deal so as a result this is the code",
    "start": "2087440",
    "end": "2093040"
  },
  {
    "text": "on the left this is i9 code for that little javascript snippet at the top total plus equals o",
    "start": "2093040",
    "end": "2098800"
  },
  {
    "text": "dot x plus o dot y plus o dot z and then this is the i-10 code you see the o.x is you know",
    "start": "2098800",
    "end": "2105599"
  },
  {
    "text": "still pretty nasty and there's still the test of the type of the object and",
    "start": "2105599",
    "end": "2111200"
  },
  {
    "text": "the bailing out to the interpreter if we need to but the code for accessing o dot y and oda z",
    "start": "2111200",
    "end": "2118160"
  },
  {
    "text": "a lot cleaner so we made a ton of progress there in in a loop it's even more dramatic",
    "start": "2118160",
    "end": "2126960"
  },
  {
    "text": "because basically you only do the loop header one time you do the loop body say a hundred times and you can actually",
    "start": "2126960",
    "end": "2133440"
  },
  {
    "text": "hoist some the checks out of the loop as well and then you get very tight code",
    "start": "2133440",
    "end": "2139280"
  },
  {
    "text": "so this is how that ends up looking is that the loop here in",
    "start": "2139280",
    "end": "2145359"
  },
  {
    "text": "blue is very nice and small only one bailout check and then also",
    "start": "2145359",
    "end": "2153359"
  },
  {
    "text": "this is showing in lining so we took calculate and we inlined it there this is just to say",
    "start": "2153359",
    "end": "2160240"
  },
  {
    "text": "that that we've worked a lot on throughput um as well as load time and",
    "start": "2160240",
    "end": "2166560"
  },
  {
    "text": "power consumption and all those other things and we've we've made a great deal of progress with it",
    "start": "2166560",
    "end": "2172400"
  },
  {
    "text": "we are at the point where we're running large applications that that you know",
    "start": "2172720",
    "end": "2179200"
  },
  {
    "text": "use a lot of objects with a lot of properties on them very well well enough that you know",
    "start": "2179200",
    "end": "2185440"
  },
  {
    "text": "big applications 50 000 line applications are delivering very good uh compute intensive performance and",
    "start": "2185440",
    "end": "2191760"
  },
  {
    "text": "very good interactive response um but now we're we're trying to tackle",
    "start": "2191760",
    "end": "2196880"
  },
  {
    "text": "additional application classes for example like html5 games and they bring in new challenges and so",
    "start": "2196880",
    "end": "2204079"
  },
  {
    "text": "we're always trying to broaden the class of applications that the thing can actually do okay so speaking of broadening there's",
    "start": "2204079",
    "end": "2211040"
  },
  {
    "text": "another thing we've been working on and there's a few things that the the script engine does that are related to",
    "start": "2211040",
    "end": "2217200"
  },
  {
    "text": "that and that's that there's this thing called windows 8 it's coming out",
    "start": "2217200",
    "end": "2223520"
  },
  {
    "text": "october 26 is when everyone will be able to buy windows 8 machines everywhere and",
    "start": "2223520",
    "end": "2229599"
  },
  {
    "text": "but it's actually done and a lot of corporate customers already are using it so",
    "start": "2229599",
    "end": "2236880"
  },
  {
    "text": "and and one of the things that made me really happy about windows 8 is that",
    "start": "2236880",
    "end": "2244960"
  },
  {
    "text": "we were able to apply the web development model to building desktop apps so",
    "start": "2244960",
    "end": "2252160"
  },
  {
    "text": "a lot of the the key applications like the music player and the mail client that just come with windows 8",
    "start": "2252240",
    "end": "2258320"
  },
  {
    "text": "were written using exactly the same development paradigm that people",
    "start": "2258320",
    "end": "2263520"
  },
  {
    "text": "use to build say gmail use you know html css javascript and so we think this is great",
    "start": "2263520",
    "end": "2270400"
  },
  {
    "text": "because then people can leverage their skills um to do yet another thing and so when",
    "start": "2270400",
    "end": "2275520"
  },
  {
    "text": "there are windows devices you know competitors the ipad for example you you'll be able to build a reach",
    "start": "2275520",
    "end": "2281920"
  },
  {
    "text": "client and then you'll be able to use that same client to do the the device specific stuff",
    "start": "2281920",
    "end": "2288160"
  },
  {
    "text": "um hopefully leveraging most your your your code so there were a few",
    "start": "2288160",
    "end": "2293359"
  },
  {
    "text": "things we did just specifically to make windows store applications great one is that",
    "start": "2293359",
    "end": "2298480"
  },
  {
    "text": "we did byte code caching in addition to the profile caching and that's because we",
    "start": "2298480",
    "end": "2304720"
  },
  {
    "text": "wanted to make sure that with the windows store applications most of the javascript code they're ever",
    "start": "2304720",
    "end": "2310240"
  },
  {
    "text": "going to run is known at the time they're installed up on the store and so it's really",
    "start": "2310240",
    "end": "2316079"
  },
  {
    "text": "nice just to be able to create the byte codes for that thing the first time it's run on the box and then store the byte codes",
    "start": "2316079",
    "end": "2323839"
  },
  {
    "text": "away so that so that you can avoid um because by cogeneration is actually a huge component of application",
    "start": "2323839",
    "end": "2330160"
  },
  {
    "text": "load time and then another another thing is we added a way for hosts to tell",
    "start": "2330160",
    "end": "2337599"
  },
  {
    "text": "the chakra garbage collector when they are idle or when they're going to suspend the application to",
    "start": "2337599",
    "end": "2344480"
  },
  {
    "text": "disk so that we can run gc at more opportune moments so that",
    "start": "2344480",
    "end": "2349520"
  },
  {
    "text": "when the person is sitting and thinking what they're going to type is when we run gc and not when they're actually typing",
    "start": "2349520",
    "end": "2355839"
  },
  {
    "text": "and then probably the most extensive work we did was fast marshalling the native code",
    "start": "2356000",
    "end": "2361599"
  },
  {
    "text": "this was made easier by the fact that chakra in the first place made some decisions for",
    "start": "2361599",
    "end": "2368560"
  },
  {
    "text": "a great interop with native code which is that we use native calling conventions so the same exact calling convention",
    "start": "2368560",
    "end": "2374400"
  },
  {
    "text": "that if you wrote a little snippet of c code would be generated is what chakra is generating for its javascript stack",
    "start": "2374400",
    "end": "2381200"
  },
  {
    "text": "also we use native exception handling so all of the exception handling machinery that's put on the stack",
    "start": "2381200",
    "end": "2387760"
  },
  {
    "text": "is exactly the same this also helps by the way with debugging infrastructure it's",
    "start": "2387760",
    "end": "2393280"
  },
  {
    "text": "easier to debug the stack because there's already existing tools that know about these stacks and know about the exceptions and know how to deal with",
    "start": "2393280",
    "end": "2399280"
  },
  {
    "text": "them so so that was a big help and then probably the the biggest one thing we did was the",
    "start": "2399280",
    "end": "2406079"
  },
  {
    "text": "generation and caching of method entry points so one of the things that windows 8",
    "start": "2406079",
    "end": "2411119"
  },
  {
    "text": "comes with is like a big surface area so you can work with like the touch screen and the gps",
    "start": "2411119",
    "end": "2417040"
  },
  {
    "text": "and you know all the other device features um you know shaking it whatever that's",
    "start": "2417040",
    "end": "2422800"
  },
  {
    "text": "called the gyrometer and uh so there's apis for that and",
    "start": "2422800",
    "end": "2429040"
  },
  {
    "text": "we wanted an easy way for javascript programmers to just program in intuitive normal javascript",
    "start": "2429040",
    "end": "2435839"
  },
  {
    "text": "and see events that were coming from this in a javascript way and call the apis in just an in just a",
    "start": "2435839",
    "end": "2443920"
  },
  {
    "text": "natural way so we wrote this marshalling layer that makes all of the hosts",
    "start": "2443920",
    "end": "2449599"
  },
  {
    "text": "apis and it doesn't just have to be the windows the new windows apis any host of chakra",
    "start": "2449599",
    "end": "2456480"
  },
  {
    "text": "can create an api surface area like this and we'll custom marshal to it",
    "start": "2456480",
    "end": "2462318"
  },
  {
    "text": "basically by we we read metadata that says you know what are the interfaces what are the types of the the",
    "start": "2462480",
    "end": "2468560"
  },
  {
    "text": "method calls and then we generate marshalling stubs for them on the fly so",
    "start": "2468560",
    "end": "2473920"
  },
  {
    "text": "so that's kind of the work we did for sort of the more desktop application of the thing and then there's always more work to do",
    "start": "2473920",
    "end": "2480319"
  },
  {
    "text": "so array operations and um like you were asking about the polymorphism",
    "start": "2480319",
    "end": "2485839"
  },
  {
    "start": "2482000",
    "end": "2482000"
  },
  {
    "text": "um we're going to get a lot better in the future now that we kind of get what we have to",
    "start": "2485839",
    "end": "2492560"
  },
  {
    "text": "do there's always you know the esx standard is in progress and there's things that are",
    "start": "2492560",
    "end": "2498160"
  },
  {
    "text": "already pretty much agreed on um that we're already working on to comply with that and and",
    "start": "2498160",
    "end": "2504000"
  },
  {
    "text": "to support it um we are still working on things from the last standard",
    "start": "2504000",
    "end": "2509359"
  },
  {
    "text": "ratification like access or performance for es5 um and then like i said we're trying to",
    "start": "2509359",
    "end": "2517359"
  },
  {
    "text": "find new application classes that that customers are coming to us and saying no we want to run this on the web",
    "start": "2517359",
    "end": "2523119"
  },
  {
    "text": "we want to run cut the rope on the web we don't want to have an ios client and everything we just want to have with one thing",
    "start": "2523119",
    "end": "2528400"
  },
  {
    "text": "so we're trying to make uh that work and and new perf work always comes up for",
    "start": "2528400",
    "end": "2534200"
  },
  {
    "text": "example we have a conservative gc but it turns out that very very often we know",
    "start": "2534200",
    "end": "2541280"
  },
  {
    "text": "precise information about what's a pointer and what's not a pointer in a particular object and",
    "start": "2541280",
    "end": "2547200"
  },
  {
    "text": "for example all the things that are allocated by the native run time system",
    "start": "2547200",
    "end": "2553359"
  },
  {
    "text": "those things we know exactly where the pointers are and so taking advantage of that precision is one thing",
    "start": "2553359",
    "end": "2558480"
  },
  {
    "text": "that will help html5 games and log running applications",
    "start": "2558480",
    "end": "2563760"
  },
  {
    "text": "and then also doing an even more aggressive amount of iterating between sequential and",
    "start": "2563760",
    "end": "2570240"
  },
  {
    "text": "concurrent phases of garbage collection so that doing a heuristic where you say you know what if i've paused for more than 10",
    "start": "2570240",
    "end": "2576319"
  },
  {
    "text": "milliseconds i am just bailing and going right into the concurrent marking we don't do that very",
    "start": "2576319",
    "end": "2582880"
  },
  {
    "text": "aggressively right now i think that's a a thing we'll look seriously at in the future",
    "start": "2582880",
    "end": "2588240"
  },
  {
    "text": "um so yeah i mentioned games and then the other big app",
    "start": "2588240",
    "end": "2593520"
  },
  {
    "text": "category that we're trying to expand to right now is long running applications uh you know so",
    "start": "2593520",
    "end": "2599680"
  },
  {
    "text": "pages you do a little bit and then you navigate but you might stay on facebook for you know",
    "start": "2599680",
    "end": "2606800"
  },
  {
    "text": "an hour and so the gc requirements of that are are pretty different",
    "start": "2606800",
    "end": "2611920"
  },
  {
    "text": "and we're working on that okay so finally big picture last slide what are we",
    "start": "2611920",
    "end": "2618800"
  },
  {
    "text": "really trying to do um i think all of us who you know many of of of the people who do the most work",
    "start": "2618800",
    "end": "2625920"
  },
  {
    "text": "on this kind of thing are here at this conference and i think all of us um really are just trying to make the web platform better you know trying to",
    "start": "2625920",
    "end": "2634000"
  },
  {
    "text": "find a way that more and more interesting killer apps can just be on the web and we don't have to have like",
    "start": "2634000",
    "end": "2639200"
  },
  {
    "text": "little square bracket programming for ios and all that other stuff but instead we can just develop the darn",
    "start": "2639200",
    "end": "2645920"
  },
  {
    "text": "thing once and it runs beautifully everywhere obviously that that's a dream that will never quite be realized but",
    "start": "2645920",
    "end": "2652000"
  },
  {
    "text": "to the extent we can do it i mean the the person who is you know in sri lanka with",
    "start": "2652000",
    "end": "2658319"
  },
  {
    "text": "you know a web browser like on a phone it would be great if if you know they",
    "start": "2658319",
    "end": "2663599"
  },
  {
    "text": "could do everything they could learn to program they could edit documents maybe on a you know a tablet or something whatever they have",
    "start": "2663599",
    "end": "2670480"
  },
  {
    "text": "you know the pc at the library the web is what gives that promise and so what we're trying to do is um you know",
    "start": "2670480",
    "end": "2677599"
  },
  {
    "text": "fulfill that promise by by making great infrastructure for the web and i kind of think there's there's",
    "start": "2677599",
    "end": "2683599"
  },
  {
    "text": "three parts to that one of which i don't have anything to do with and that's the part that's in in the middle in blue there",
    "start": "2683599",
    "end": "2689599"
  },
  {
    "text": "like ap apis device capabilities and secure component model i think those are all things that we need to",
    "start": "2689599",
    "end": "2696160"
  },
  {
    "text": "do better on to make the web a truly great application platform uh things that that i and other people",
    "start": "2696160",
    "end": "2703200"
  },
  {
    "text": "in in microsoft work on are the great js engine performance",
    "start": "2703200",
    "end": "2708319"
  },
  {
    "text": "um using all the resources like multiple cores and gpu continuing to optimize so that's what",
    "start": "2708319",
    "end": "2714640"
  },
  {
    "text": "we've just been talking about in this talk and then finally i think the other piece of the picture that has to be there",
    "start": "2714640",
    "end": "2721280"
  },
  {
    "text": "is that we have to build tools that enable construction of large-scale javascript applications",
    "start": "2721280",
    "end": "2726960"
  },
  {
    "text": "because it's hard it's hard to take a language that you know puts everything in the global",
    "start": "2726960",
    "end": "2732000"
  },
  {
    "text": "namespace by default and so on and actually build um large-scale javascript applications",
    "start": "2732000",
    "end": "2737680"
  },
  {
    "text": "and so i think to really support an app ecosystem where the next killer app",
    "start": "2737680",
    "end": "2743839"
  },
  {
    "text": "is going to be a web application we need to do a better job with tooling and i am",
    "start": "2743839",
    "end": "2750000"
  },
  {
    "text": "really excited about that one today because in about",
    "start": "2750000",
    "end": "2755359"
  },
  {
    "text": "an hour and 10 minutes i think um microsoft is going to make a pretty big",
    "start": "2755440",
    "end": "2761920"
  },
  {
    "text": "announcement so 6 p.m uh denmark time in the tooling space",
    "start": "2761920",
    "end": "2767920"
  },
  {
    "text": "uh and and and i feel great about it because i i feel like it's it's it's it's something that i'm really",
    "start": "2767920",
    "end": "2774000"
  },
  {
    "text": "going to be able to uh join with the my colleagues who built this and and offer it",
    "start": "2774000",
    "end": "2779760"
  },
  {
    "text": "um to the open source community and to um to everyone trying to make the web",
    "start": "2779760",
    "end": "2786000"
  },
  {
    "text": "platform better so i'm really looking forward to all your feedback not only on this talk but but",
    "start": "2786000",
    "end": "2791760"
  },
  {
    "text": "on that announcement that's coming in about an hour so that's that's it thanks any questions",
    "start": "2791760",
    "end": "2797760"
  },
  {
    "text": "so the the question was with long-running javascript applications do you see",
    "start": "2797760",
    "end": "2805359"
  },
  {
    "text": "sort of creeping heap remnants over time as the application runs longer and longer and those",
    "start": "2805839",
    "end": "2812880"
  },
  {
    "text": "creeping heap remnants that you know they can be due to fragmentation uh",
    "start": "2812880",
    "end": "2818560"
  },
  {
    "text": "you know which means where you um are allocating little objects out out of bigger pieces",
    "start": "2818560",
    "end": "2824160"
  },
  {
    "text": "and then you get little holes where you can't put anything and it can also be due to people just",
    "start": "2824160",
    "end": "2830800"
  },
  {
    "text": "holding on to references like one of the speakers earlier today mentioned",
    "start": "2830800",
    "end": "2835920"
  },
  {
    "text": "so we sort of expected to see that we we haven't seen it enough to do",
    "start": "2836160",
    "end": "2842240"
  },
  {
    "text": "anything about it like opportunistic evacuation for example is something we could do which basically",
    "start": "2842240",
    "end": "2847280"
  },
  {
    "text": "means that when you know you have all the pointers to an object you go ahead and move it into a new page to try to line things up",
    "start": "2847280",
    "end": "2854880"
  },
  {
    "text": "and reduce fragmentation but the fragmentation strategy we're using um",
    "start": "2854880",
    "end": "2859920"
  },
  {
    "text": "seems to be working well um we actually we did comparative studies",
    "start": "2859920",
    "end": "2866240"
  },
  {
    "text": "of similar size applications running for similar lengths written all in c and written in the web",
    "start": "2866240",
    "end": "2873040"
  },
  {
    "text": "development paradigm and actually there's less fragmentation right now in the ones we measured so we're looking",
    "start": "2873040",
    "end": "2878800"
  },
  {
    "text": "for a smoking gun there haven't seen it we have a set of work items we can take if we do",
    "start": "2878800",
    "end": "2884480"
  },
  {
    "text": "there's there's great interest in running chakra on the server side in the azure community",
    "start": "2884480",
    "end": "2891040"
  },
  {
    "text": "um unfortunately right now chakra is only available on the windows platform and so um it's not really something that could",
    "start": "2891040",
    "end": "2898160"
  },
  {
    "text": "compete with with v8 to be a node for that reason because i'm sure more than 50 of the node",
    "start": "2898160",
    "end": "2906800"
  },
  {
    "text": "applications are running on on non-windows platforms but um in in our little world uh yes we're",
    "start": "2906800",
    "end": "2914720"
  },
  {
    "text": "we've got multiple uh customers that will be shipping servers this year uh that use chakra on the",
    "start": "2914720",
    "end": "2921760"
  },
  {
    "text": "server side um and we did a lot of work both initially with chakra and sense then to make it scalable and",
    "start": "2921760",
    "end": "2930640"
  },
  {
    "text": "hardened for the server environment so things like memory leaks things like the avs and what to do with",
    "start": "2930640",
    "end": "2935920"
  },
  {
    "text": "them you know we can run about 12 000",
    "start": "2935920",
    "end": "2941200"
  },
  {
    "text": "script context simultaneously in a process um you know with isolation so",
    "start": "2941200",
    "end": "2947440"
  },
  {
    "text": "that's a pretty good number competitively and it's proven to be quite good for",
    "start": "2947440",
    "end": "2954640"
  },
  {
    "text": "for the people who are using chakra in this context and i think a lot of the work we did to do good",
    "start": "2954640",
    "end": "2959680"
  },
  {
    "text": "native interop like native calling conventions conservative gc native exceptions",
    "start": "2959680",
    "end": "2965440"
  },
  {
    "text": "really benefit people on the server side because it just simplifies everything but the stack looks a whole lot more like",
    "start": "2965440",
    "end": "2970720"
  },
  {
    "text": "the native stack and so when you go through gymnastics like you were describing in your",
    "start": "2970720",
    "end": "2976559"
  },
  {
    "text": "talk it's actually a little bit simpler because we it turns out we already have code to traverse the native stack and pull out all kinds of information like",
    "start": "2976559",
    "end": "2982960"
  },
  {
    "text": "that so um so yeah we we care a lot about that in our own little world of",
    "start": "2982960",
    "end": "2989200"
  },
  {
    "text": "windows customers and and we've been pretty pleased with the initial results of it",
    "start": "2989200",
    "end": "2995520"
  },
  {
    "text": "okay so the first the first question actually i'll take the second question first so the second question was",
    "start": "2995520",
    "end": "3001599"
  },
  {
    "text": "um great work when are we going to open source it and",
    "start": "3001599",
    "end": "3006480"
  },
  {
    "text": "i think unfortunately you have to ask more people than me that question i think if you asked me",
    "start": "3008480",
    "end": "3014160"
  },
  {
    "text": "and i just spoke my heart you might like the answer but i think that",
    "start": "3014160",
    "end": "3020079"
  },
  {
    "text": "microsoft as a as a whole is gradually waking up to the fact that there's a software commons out there",
    "start": "3020079",
    "end": "3026960"
  },
  {
    "text": "and that the software development community has committed to the idea that we're going to share a",
    "start": "3026960",
    "end": "3032720"
  },
  {
    "text": "lot and we're going to compete and build our own stacks but we're also going to share a lot of",
    "start": "3032720",
    "end": "3038079"
  },
  {
    "text": "things we build our stacks on and i think that's super healthy and super interesting to be",
    "start": "3038079",
    "end": "3043200"
  },
  {
    "text": "interacting in that way not just writing papers about things like we used to do but actually sharing code working together on code",
    "start": "3043200",
    "end": "3050000"
  },
  {
    "text": "it's terrific and microsoft has to understand that that's not going away people are permanently going to do it",
    "start": "3050000",
    "end": "3055599"
  },
  {
    "text": "and that microsoft as the biggest producer of software in the world ought to contribute to that so that's clear and that meme is",
    "start": "3055599",
    "end": "3062800"
  },
  {
    "text": "expanding at microsoft um so i think that's that's all",
    "start": "3062800",
    "end": "3068079"
  },
  {
    "text": "that i can say about that uh the the the first question was um",
    "start": "3068079",
    "end": "3074480"
  },
  {
    "text": "do we when we store profile information what about input changes how stable is the profile information",
    "start": "3075839",
    "end": "3082319"
  },
  {
    "text": "under input changes uh because if we're going to say hey that this worked then what if the input says",
    "start": "3082319",
    "end": "3088000"
  },
  {
    "text": "if if new input then make it a float otherwise make it an it right um so",
    "start": "3088000",
    "end": "3095440"
  },
  {
    "text": "um what we do is that we",
    "start": "3095440",
    "end": "3100480"
  },
  {
    "text": "have actually primary and secondary heuristics so there's actually heuristics that say um",
    "start": "3100480",
    "end": "3106720"
  },
  {
    "text": "what is the likelihood that this thing will be stable and therefore it won't change under input and what is",
    "start": "3106720",
    "end": "3112240"
  },
  {
    "text": "likelihood it won't and so far those heuristics have been",
    "start": "3112240",
    "end": "3117359"
  },
  {
    "text": "good enough that we",
    "start": "3117359",
    "end": "3121040"
  },
  {
    "text": "can run things faster by guessing and bailing out than by then by not following the advice of the",
    "start": "3122559",
    "end": "3128880"
  },
  {
    "text": "of the profile okay uh thank you very much really",
    "start": "3128880",
    "end": "3134000"
  },
  {
    "text": "enjoyed it and uh have a one great conference",
    "start": "3134000",
    "end": "3139838"
  }
]