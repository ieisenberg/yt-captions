[
  {
    "text": "[Music]",
    "start": "3510",
    "end": "7529"
  },
  {
    "text": "1 1 2 3 5 hello my name is Oleg thank you for the introduction and we're gonna",
    "start": "9860",
    "end": "16920"
  },
  {
    "text": "talk about valium and I'm very happy that he chose this topic because indeed that's a quite an exciting development",
    "start": "16920",
    "end": "23070"
  },
  {
    "text": "in the world of virtual machines programming languages and seem to be in",
    "start": "23070",
    "end": "28080"
  },
  {
    "text": "the industry elsewhere I work as a developer advocate for growl",
    "start": "28080",
    "end": "33329"
  },
  {
    "text": "veeam at or collapse which is a research and development department within Oracle",
    "start": "33329",
    "end": "39980"
  },
  {
    "text": "so the goal of that is to actually do you academic research and push the",
    "start": "39980",
    "end": "45510"
  },
  {
    "text": "boundaries of what we know as humanity in computer science and in software engineering and accumulate those those",
    "start": "45510",
    "end": "53270"
  },
  {
    "text": "that knowledge and then at some point convert that to industrial projects",
    "start": "53270",
    "end": "59899"
  },
  {
    "text": "hopefully for the benefit of the community and the parent company but it",
    "start": "59899",
    "end": "65400"
  },
  {
    "text": "is and research institution first so there are quite a bit of academic papers and if you really want to like deep down",
    "start": "65400",
    "end": "73799"
  },
  {
    "text": "level details about gravia and how its implemented then perhaps you can look into that I'm available in the",
    "start": "73799",
    "end": "81540"
  },
  {
    "text": "Internet's mostly go by ash life almost everywhere if you want to ask questions",
    "start": "81540",
    "end": "87750"
  },
  {
    "text": "but for some reason you didn't manage to do that here face to face just tweet at",
    "start": "87750",
    "end": "95250"
  },
  {
    "text": "me I'll be happy to transfer anytime but Ravi I'm about life software engineering",
    "start": "95250",
    "end": "101340"
  },
  {
    "text": "or anything without any particular difference so if you have questions here",
    "start": "101340",
    "end": "108420"
  },
  {
    "text": "and you don't want to ask them after please do you use the app it's quite",
    "start": "108420",
    "end": "113850"
  },
  {
    "text": "important also please do not base any for do make any fort growing business",
    "start": "113850",
    "end": "121140"
  },
  {
    "text": "decisions based on the confidence of this presentation that is very important but with all those necessary things out",
    "start": "121140",
    "end": "129929"
  },
  {
    "text": "of the way let's talk about growl VM dravyam is a high-performance polyglot",
    "start": "129929",
    "end": "137470"
  },
  {
    "text": "embeddable virtual machine capable of running programs written in different languages currently it supports jvm languages so",
    "start": "137470",
    "end": "144850"
  },
  {
    "text": "Java Catalan Scala closure Dru V and so",
    "start": "144850",
    "end": "151300"
  },
  {
    "text": "on we have note implementation and a JavaScript engine we have Ruby",
    "start": "151300",
    "end": "156370"
  },
  {
    "text": "implementation our Python as well and we also have an LLVM interpreter so even if",
    "start": "156370",
    "end": "165130"
  },
  {
    "text": "you are trying to run native code if you manage to compile that through LLVM you can run that on top of gravia and the",
    "start": "165130",
    "end": "172600"
  },
  {
    "text": "promise of the problem is that we want to be the fastest the most",
    "start": "172600",
    "end": "178030"
  },
  {
    "text": "high-performance virtual machine for all given languages so it should be the",
    "start": "178030",
    "end": "184150"
  },
  {
    "text": "virtual machine for whatever application written whatever language you want to run if we talk about the whole guavian",
    "start": "184150",
    "end": "194319"
  },
  {
    "text": "in the single picture if if you would take away one thing from this session",
    "start": "194319",
    "end": "200590"
  },
  {
    "text": "then probably this slide is what I want you to remember so gravy I'm not only",
    "start": "200590",
    "end": "207010"
  },
  {
    "text": "can support all those languages and run terminals written with them both",
    "start": "207010",
    "end": "212829"
  },
  {
    "text": "individually and in the mix interoperating between different languages but it also can run in",
    "start": "212829",
    "end": "219250"
  },
  {
    "text": "different contexts in using underlying platforms so you can run programs",
    "start": "219250",
    "end": "225100"
  },
  {
    "text": "written in those languages on top of the JVM and currently we is open JDK you can",
    "start": "225100",
    "end": "231489"
  },
  {
    "text": "run them in the context of normal note application so there will be the normal",
    "start": "231489",
    "end": "236709"
  },
  {
    "text": "event loop and everything that's expected from the node deployment it's",
    "start": "236709",
    "end": "242380"
  },
  {
    "text": "also embedded so it was designed from the start to be modular and to use the",
    "start": "242380",
    "end": "248290"
  },
  {
    "text": "components different components necessary to run a managed programming language from the underlying platform so",
    "start": "248290",
    "end": "255730"
  },
  {
    "text": "for example you can supply a garbage collection implementation from outside or code shuttling thread shadowing or",
    "start": "255730",
    "end": "265060"
  },
  {
    "text": "code all that so you can embed that in your applications and enrich them with",
    "start": "265060",
    "end": "270520"
  },
  {
    "text": "ability to run programs in those languages this way you can run that in Oracle database more",
    "start": "270520",
    "end": "277900"
  },
  {
    "text": "for example in my sequel or if you have any platform that you would like to",
    "start": "277900",
    "end": "283900"
  },
  {
    "text": "embed it both Java based or both native platforms you can do that and also you",
    "start": "283900",
    "end": "291550"
  },
  {
    "text": "can compile your JVM bytecode to an standalone native image to execute all",
    "start": "291550",
    "end": "299530"
  },
  {
    "text": "binary or shared library and run that as native code which which which is a",
    "start": "299530",
    "end": "306820"
  },
  {
    "text": "different platform as well so how many of you use Java mostly day-to-day any",
    "start": "306820",
    "end": "315430"
  },
  {
    "text": "other genome languages excellent Scala cool this could be very",
    "start": "315430",
    "end": "324940"
  },
  {
    "text": "interesting for you Scala especially we should really great results for for scholar workloads javascript a couple of people excellent",
    "start": "324940",
    "end": "333810"
  },
  {
    "text": "something out of the other things Ruby are Python not so much but yeah some",
    "start": "333810",
    "end": "339580"
  },
  {
    "text": "people do so in a sense what grow them currently supports and those things are in different stages of maturity and",
    "start": "339580",
    "end": "345640"
  },
  {
    "text": "compatibility with echo system but what it supports or will support in in in the",
    "start": "345640",
    "end": "350710"
  },
  {
    "text": "future kind of handles the top of the most popular programming languages",
    "start": "350710",
    "end": "356730"
  },
  {
    "text": "currently in use so in in the in the",
    "start": "356730",
    "end": "362070"
  },
  {
    "text": "depths of the problem what happens is that it transforms the programming",
    "start": "362070",
    "end": "367840"
  },
  {
    "text": "languages and interpreters for those two and a very efficient compiler and then it can compile the code from those",
    "start": "367840",
    "end": "374140"
  },
  {
    "text": "languages the very efficient machine code and kind of inject that and run in those platforms so you get high",
    "start": "374140",
    "end": "381310"
  },
  {
    "text": "performance in all of those contexts because because of the compiler and with",
    "start": "381310",
    "end": "388270"
  },
  {
    "text": "all that if you're interested in different use cases where you can use volume what you can do you can read a",
    "start": "388270",
    "end": "394960"
  },
  {
    "text": "blog post by Chris Eaton who is currently the project lead for our Ruby implementation",
    "start": "394960",
    "end": "402250"
  },
  {
    "text": "and back in April he wrote the top 10 things to do with brawl VM and what it",
    "start": "402250",
    "end": "408130"
  },
  {
    "text": "can be for you and even some people on the ground team were surprised that",
    "start": "408130",
    "end": "413770"
  },
  {
    "text": "Braham can actually do that because it's a very versatile project so we'll I'll",
    "start": "413770",
    "end": "418930"
  },
  {
    "text": "show a couple of demos for different things here but if you want to take a loop yourself just there is a resource",
    "start": "418930",
    "end": "426220"
  },
  {
    "text": "and you can you can try it yourself from the architecture point of view it looks",
    "start": "426220",
    "end": "433420"
  },
  {
    "text": "like that so at the bottom we'll have an underlying platform in this case this would be the hotspot VM the normal JVM",
    "start": "433420",
    "end": "441370"
  },
  {
    "text": "but it could be note or something else here so with hotspot the next layer is the",
    "start": "441370",
    "end": "448570"
  },
  {
    "text": "growl compiler and the growl compiler integrates with JVM using JVM sky which",
    "start": "448570",
    "end": "454450"
  },
  {
    "text": "is the java virtual machine compiler interface which is the normal way how you would plug a third-party compiler",
    "start": "454450",
    "end": "460030"
  },
  {
    "text": "into the JVM so there is a defined interface it was added in Java 9 and we",
    "start": "460030",
    "end": "465670"
  },
  {
    "text": "back ported that to Java 8 and basically what it gives the JVM an opportunity to",
    "start": "465670",
    "end": "472480"
  },
  {
    "text": "you just call a third-party compiler and says to say oh here's my by code please",
    "start": "472480",
    "end": "477850"
  },
  {
    "text": "optimize this for me please compile this to machine code and that's how grand compiler fits in and just through those",
    "start": "477850",
    "end": "485470"
  },
  {
    "text": "two layers we can run JVM bytecode because with the whole JVM as a platform it can do everything the JVM normally",
    "start": "485470",
    "end": "492430"
  },
  {
    "text": "does and then normal Java bytecode comes in and the compiler can optimize that and compile that to machine code so the",
    "start": "492430",
    "end": "500020"
  },
  {
    "text": "jvm languages supported directly and then on top of that for other language",
    "start": "500020",
    "end": "505180"
  },
  {
    "text": "integrations there is additional layer layer called truffle framework so truffle framework is the framework for",
    "start": "505180",
    "end": "512140"
  },
  {
    "text": "creating managed languages it gives you an API to define an interpreter for",
    "start": "512140",
    "end": "517780"
  },
  {
    "text": "language so you don't have to write an optimizing compiler or the full virtual machine but what you need to do you need",
    "start": "517780",
    "end": "524650"
  },
  {
    "text": "to define that in an abstract syntax tree interpreter basically a tree consisting of nodes which define",
    "start": "524650",
    "end": "530770"
  },
  {
    "text": "operations and then you go through the tree in the valley that note by note light as you",
    "start": "530770",
    "end": "536880"
  },
  {
    "text": "would normally do an interpreter and gravia will compile that and optimize",
    "start": "536880",
    "end": "542010"
  },
  {
    "text": "that at runtime very efficiently through so that we have Ruby and all those",
    "start": "542010",
    "end": "547020"
  },
  {
    "text": "interpreters and we have an LLVM inter bit code interpreter through which native forms can be run this is very",
    "start": "547020",
    "end": "554280"
  },
  {
    "text": "important because for those dynamic languages very many of them come with native extensions when people realized",
    "start": "554280",
    "end": "560910"
  },
  {
    "text": "that some code isn't performing up to their expectations they've rewrote certain parts of that behavior in native",
    "start": "560910",
    "end": "568260"
  },
  {
    "text": "languages to get the speed up to improve performance of those critical paths so",
    "start": "568260",
    "end": "573660"
  },
  {
    "text": "in order to support the ecosystem of those languages we needed to be able to run native code and with an Olivia",
    "start": "573660",
    "end": "580440"
  },
  {
    "text": "interpreter we can do that and it brings very fascinating results so if we talk",
    "start": "580440",
    "end": "587400"
  },
  {
    "text": "about performance this is an approximate approximate result that we got in the",
    "start": "587400",
    "end": "594270"
  },
  {
    "text": "summer I think last year from one of the academic papers comparing draw to the",
    "start": "594270",
    "end": "601280"
  },
  {
    "text": "competition so you can see that we have a little bit better results than Java or",
    "start": "601280",
    "end": "606870"
  },
  {
    "text": "normal Java code and this is across all the benchmarks the normal decouple and everything which may be not as",
    "start": "606870",
    "end": "614310"
  },
  {
    "text": "significant but also not as bad because JVM is really state-of-the-art virtual",
    "start": "614310",
    "end": "620490"
  },
  {
    "text": "machine very many very smart people worked very hard very many years to make",
    "start": "620490",
    "end": "626730"
  },
  {
    "text": "it very fast and and beating that is not not as easy as it sounds on different",
    "start": "626730",
    "end": "633300"
  },
  {
    "text": "workloads which we we get different results and you have to evaluate on your code but even on across all the",
    "start": "633300",
    "end": "641220"
  },
  {
    "text": "benchmarks in average we do get a little bit of performance boost for performance of the other languages even jvm",
    "start": "641220",
    "end": "647340"
  },
  {
    "text": "languages it could be way better for Scala for example we show something like 20 25 % improvements because Scala",
    "start": "647340",
    "end": "655080"
  },
  {
    "text": "bytecode the bytecode patterns that Scala code emits they are not similar to",
    "start": "655080",
    "end": "660210"
  },
  {
    "text": "the normal Java to the normal parents that Java programs generate right so",
    "start": "660210",
    "end": "665520"
  },
  {
    "text": "Ct the normal compiler knows very intimately about what bytecode parents",
    "start": "665520",
    "end": "671280"
  },
  {
    "text": "are created by Java programs and if they drew together so it's way better at",
    "start": "671280",
    "end": "677700"
  },
  {
    "text": "optimizing Java code than say Scala code so on Scala and other jvm languages we",
    "start": "677700",
    "end": "683130"
  },
  {
    "text": "get a larger performance boost typical dynamic languages we get way more and very interestingly we get a very decent",
    "start": "683130",
    "end": "691110"
  },
  {
    "text": "performance out of the elevator prefer for native code which is actually",
    "start": "691110",
    "end": "696630"
  },
  {
    "text": "totally surprising for myself but we get that and we are just a little bit slower",
    "start": "696630",
    "end": "701850"
  },
  {
    "text": "than than v8 which is a very good",
    "start": "701850",
    "end": "707490"
  },
  {
    "text": "virtual machine for JavaScript but DRA VM is a one virtual machine to run all",
    "start": "707490",
    "end": "713370"
  },
  {
    "text": "those languages so we'll get there at some point of time hopefully it should",
    "start": "713370",
    "end": "719040"
  },
  {
    "text": "be the best the most high preference virtual machine for all languages so the",
    "start": "719040",
    "end": "724530"
  },
  {
    "text": "team is working on improvement for phones for all of those as well so if you want to know how we get those",
    "start": "724530",
    "end": "730650"
  },
  {
    "text": "results this is one of the papers that I would recommend it's an academic paper",
    "start": "730650",
    "end": "736110"
  },
  {
    "text": "so it's not written as a typical blog post but it's really reasonably easy to understand or atlas skim and it talks",
    "start": "736110",
    "end": "743130"
  },
  {
    "text": "about the partial valuation technique and and you welcome to read that so it",
    "start": "743130",
    "end": "754110"
  },
  {
    "text": "it explains how we optimize the ast abstract syntax trees of the introverts",
    "start": "754110",
    "end": "760170"
  },
  {
    "text": "before giving that to the JIT compiler so there are different layers of optimizations happening so if you're",
    "start": "760170",
    "end": "768900"
  },
  {
    "text": "interested in how you can get all that good stuff this is an open source",
    "start": "768900",
    "end": "775440"
  },
  {
    "text": "project so you can go to github the development is happening on github",
    "start": "775440",
    "end": "781290"
  },
  {
    "text": "it's Oracle's flash crawl there are a couple other repositories for example for the intrapreneurs for javascript",
    "start": "781290",
    "end": "787080"
  },
  {
    "text": "there is a separate repository and python is a different implementation separate repository but this is the main",
    "start": "787080",
    "end": "793410"
  },
  {
    "text": "one and you can follow the links to other ones you can look at the code one of the great benefits of the",
    "start": "793410",
    "end": "799450"
  },
  {
    "text": "growl vm project is that all of the things are written in Java so if you are",
    "start": "799450",
    "end": "807280"
  },
  {
    "text": "interested in virtual machines or compilers or anything but somehow your knowledge of native code stopped you",
    "start": "807280",
    "end": "813550"
  },
  {
    "text": "from researching that and you are like I not really sure which one is the",
    "start": "813550",
    "end": "819190"
  },
  {
    "text": "dereference operator is it ampersand or a star or a question mark it's not a",
    "start": "819190",
    "end": "826690"
  },
  {
    "text": "question mark that one I know but if you're not sure but you were capable of reading writing and understand Java code",
    "start": "826690",
    "end": "833070"
  },
  {
    "text": "you can take a look and you can understand what's happening behind the curtains inside the virtual machine so",
    "start": "833070",
    "end": "841030"
  },
  {
    "text": "you can download the binaries just if you want to use it not just research or",
    "start": "841030",
    "end": "847390"
  },
  {
    "text": "contribute to or anything you can download them from the grow em that org website there is a community edition",
    "start": "847390",
    "end": "854040"
  },
  {
    "text": "which is based on the open source components that you can see on the",
    "start": "854040",
    "end": "859480"
  },
  {
    "text": "github so you can build that yourself or you can use our built and currently it",
    "start": "859480",
    "end": "866170"
  },
  {
    "text": "is for Linux and Mac OS and there is an Enterprise Edition which comes with the",
    "start": "866170",
    "end": "871890"
  },
  {
    "text": "more powerful advanced compiler giving you additional performance and some",
    "start": "871890",
    "end": "877240"
  },
  {
    "text": "security and scalability features but this is an additional value you can do",
    "start": "877240",
    "end": "883660"
  },
  {
    "text": "everything all the demos and run all the workloads on the Community Edition but",
    "start": "883660",
    "end": "889060"
  },
  {
    "text": "if you consciously choose to opt in for better performance you're welcome to",
    "start": "889060",
    "end": "895090"
  },
  {
    "text": "evaluate and try the Enterprise Edition and you have to download that from Oracle technology Network so you have to",
    "start": "895090",
    "end": "901450"
  },
  {
    "text": "accept this one check box saying that you read the evaluation license but he",
    "start": "901450",
    "end": "908290"
  },
  {
    "text": "can evaluate that and see what performance boost it gives you and how you can do interrupt but the Community",
    "start": "908290",
    "end": "915040"
  },
  {
    "text": "Edition is functionally complete so you can just use that if you want the licenses for those are at the for the",
    "start": "915040",
    "end": "921850"
  },
  {
    "text": "Community Edition are reasonable across the ecosystem for for Java parts this",
    "start": "921850",
    "end": "926950"
  },
  {
    "text": "GPL the two plus class pass exception just like open JDK the Java Script",
    "start": "926950",
    "end": "932700"
  },
  {
    "text": "milled runtime is under the normal node license Python as well so it could be a",
    "start": "932700",
    "end": "938550"
  },
  {
    "text": "drop-in replacement for for those runtimes if you want it to be the actual",
    "start": "938550",
    "end": "944370"
  },
  {
    "text": "implementations of the interpreters that we created on our under the GPL which is",
    "start": "944370",
    "end": "949440"
  },
  {
    "text": "the universal principle isince which is a myth like licensed very very safe very",
    "start": "949440",
    "end": "954480"
  },
  {
    "text": "free so you're welcome to try it and see where it brings you so now it's demo",
    "start": "954480",
    "end": "962100"
  },
  {
    "text": "time since you all said that most of you said that you're mostly doing Java I'm",
    "start": "962100",
    "end": "967200"
  },
  {
    "text": "gonna show you what graylien can do for your Java code so let's see I have a",
    "start": "967200",
    "end": "974040"
  },
  {
    "text": "benchmark here it's a Java simple stream benchmark and it's very simple so it's",
    "start": "974040",
    "end": "981210"
  },
  {
    "text": "normal jmh benchmark so Java micro benchmark harness I know it does it just",
    "start": "981210",
    "end": "986940"
  },
  {
    "text": "has it just has a list of integers and then it does typical stream operations",
    "start": "986940",
    "end": "993210"
  },
  {
    "text": "on top of those so you stream that array and then you map a couple of functions all on top of",
    "start": "993210",
    "end": "998730"
  },
  {
    "text": "that and then you run that and you get what do you get you get a number back so",
    "start": "998730",
    "end": "1005270"
  },
  {
    "text": "this is the code that you typically would see in a normal applications right you would how many of you use Java 8 and",
    "start": "1005270",
    "end": "1011690"
  },
  {
    "text": "later out of curiosity John 9 and later how many of you migrated ok cool so we are",
    "start": "1011690",
    "end": "1020840"
  },
  {
    "text": "providing for gravettian bills we are providing Java 8 based builds so you if you want to evaluate that on your code",
    "start": "1020840",
    "end": "1027380"
  },
  {
    "text": "you can just download that and have a replace have just replaced your normal",
    "start": "1027380",
    "end": "1033319"
  },
  {
    "text": "JVM with that so I have this gray VM Enterprise Edition here I downloaded that you can see that if you look into",
    "start": "1033320",
    "end": "1041240"
  },
  {
    "text": "the bin folder you will find a normal Java commands there java java c and everything you will also find normal",
    "start": "1041240",
    "end": "1048230"
  },
  {
    "text": "JavaScript commands j/s and note some commands for our Python Ruby and so on",
    "start": "1048230",
    "end": "1055870"
  },
  {
    "text": "so you can just download that unpack and use this Java instead of your normal",
    "start": "1055870",
    "end": "1064700"
  },
  {
    "text": "Java and C where it brings you so I have my benchmark and I compiled that and then",
    "start": "1064700",
    "end": "1071240"
  },
  {
    "text": "we'll run this so first of all I will run this and I will run this with no",
    "start": "1071240",
    "end": "1076370"
  },
  {
    "text": "growl let me show you what this is so we",
    "start": "1076370",
    "end": "1081890"
  },
  {
    "text": "will use the genre from growl VM but we will disable the JVM sy compiler",
    "start": "1081890",
    "end": "1087230"
  },
  {
    "text": "we will disable the growl compiler so this will run with normal CT and then",
    "start": "1087230",
    "end": "1092570"
  },
  {
    "text": "we'll show you I just want you to show the difference so it will run for 40 seconds but what it does essentially it",
    "start": "1092570",
    "end": "1099400"
  },
  {
    "text": "loads a machine and search new threats and it runs that code again and again and again to allow JIT to optimize that",
    "start": "1099400",
    "end": "1107240"
  },
  {
    "text": "code and and to run it as fast as possible so and it warmed up something",
    "start": "1107240",
    "end": "1113420"
  },
  {
    "text": "and then it does the iterations and it",
    "start": "1113420",
    "end": "1120050"
  },
  {
    "text": "will report the numbers you have to understand that those numbers are just numbers you need to interpret them",
    "start": "1120050",
    "end": "1126860"
  },
  {
    "text": "you cannot just look at the numbers and and be really excited and extrapolate",
    "start": "1126860",
    "end": "1132020"
  },
  {
    "text": "that to all workloads but those numbers are reasonably showing something so our",
    "start": "1132020",
    "end": "1139070"
  },
  {
    "text": "score here is 174 nanoseconds per operation for one method call that's 174",
    "start": "1139070",
    "end": "1147850"
  },
  {
    "text": "nanoseconds so if I just do the growl thing right so I just I will not disable the compiler so I",
    "start": "1147850",
    "end": "1155030"
  },
  {
    "text": "will run this the same way and I will go back to the slides no to spoil the results it will run the same way for 40",
    "start": "1155030",
    "end": "1161930"
  },
  {
    "text": "seconds to warm it up and then just do things so how many of you think growl VM",
    "start": "1161930",
    "end": "1170210"
  },
  {
    "text": "will be faster here with the girl compiler yeah yeah it will be faster it",
    "start": "1170210",
    "end": "1178970"
  },
  {
    "text": "should be faster right how many of you how much faster will it be like five",
    "start": "1178970",
    "end": "1184160"
  },
  {
    "text": "percent who thinks it will be five percent faster that's reasonable five",
    "start": "1184160",
    "end": "1190100"
  },
  {
    "text": "percent not much 10 percent okay one",
    "start": "1190100",
    "end": "1195440"
  },
  {
    "text": "hand can go higher 20 percent not really yeah the JVM is a",
    "start": "1195440",
    "end": "1201960"
  },
  {
    "text": "state-of-the-art virtual machine it's really really fast right it it's heavily optimized it does does things so even",
    "start": "1201960",
    "end": "1208860"
  },
  {
    "text": "when a percent is off the charts incredible performance boost so typically in the audience there will be",
    "start": "1208860",
    "end": "1215519"
  },
  {
    "text": "more optimistic people so we will go to like twice as fast and then people kind",
    "start": "1215519",
    "end": "1221250"
  },
  {
    "text": "of stop start giving up on say like five times as fast because that is just crazy",
    "start": "1221250",
    "end": "1227210"
  },
  {
    "text": "so forty seconds passed let's see the numbers and we can see that one",
    "start": "1227210",
    "end": "1234240"
  },
  {
    "text": "execution of this operation there with the ground compiler benchmarks even though the numbers below are just data",
    "start": "1234240",
    "end": "1241190"
  },
  {
    "text": "it was nine nine a seconds per operation on c2 it was 174 that's 20 times faster",
    "start": "1241190",
    "end": "1252299"
  },
  {
    "text": "that is 20 times faster that is 20 times",
    "start": "1252299",
    "end": "1259260"
  },
  {
    "text": "faster that is that is an amazing performance boost and of course yeah",
    "start": "1259260",
    "end": "1264840"
  },
  {
    "text": "this is a like a synthetic benchmark right it's not representative workloads",
    "start": "1264840",
    "end": "1269880"
  },
  {
    "text": "and nine nanoseconds for operation it probably means the compiler is just really really smart that it just",
    "start": "1269880",
    "end": "1276630"
  },
  {
    "text": "collapses that into into into nothing and just returns the result but showing",
    "start": "1276630",
    "end": "1282149"
  },
  {
    "text": "that it can be that much faster even on small pieces of code is really",
    "start": "1282149",
    "end": "1287220"
  },
  {
    "text": "impressive and really important because it gives you understand that it could be potentially much much faster than the",
    "start": "1287220",
    "end": "1293909"
  },
  {
    "text": "compiler that you're currently using so take that with a grain of salt but also",
    "start": "1293909",
    "end": "1299789"
  },
  {
    "text": "take that as an invitation to evaluate grahyam on human workloads even if you",
    "start": "1299789",
    "end": "1306600"
  },
  {
    "text": "get 20% or if you get 10% as some of you expected on these new benchmarks that's",
    "start": "1306600",
    "end": "1312690"
  },
  {
    "text": "a lot of additional performance that will make your customers happier that might make your cloud provider build",
    "start": "1312690",
    "end": "1319919"
  },
  {
    "text": "smaller if you deploy your stuff to the cloud you know that you have to pay for",
    "start": "1319919",
    "end": "1324929"
  },
  {
    "text": "that if you pay 20% less that could save",
    "start": "1324929",
    "end": "1331200"
  },
  {
    "text": "a lot of money so let's let's look at other things I think I have some other things here yeah",
    "start": "1331200",
    "end": "1339030"
  },
  {
    "text": "I did so we we run of course we run all kinds of benchmarks not just that but we",
    "start": "1339030",
    "end": "1344760"
  },
  {
    "text": "also run other other typical benchmarks and kind of published articles about that so for example we evaluate a",
    "start": "1344760",
    "end": "1351809"
  },
  {
    "text": "problem on different stream operations different benchmarks on that starting",
    "start": "1351809",
    "end": "1358080"
  },
  {
    "text": "from simple like this one and more complicated where you have 10 filter calls and maps and aggregation different",
    "start": "1358080",
    "end": "1365220"
  },
  {
    "text": "streams operations and it showed reasonable results that dravyam is twice as fast or sometimes more sometimes a",
    "start": "1365220",
    "end": "1372150"
  },
  {
    "text": "little bit less but it's faster than hotspot on those workloads then we run one of those was the JavaScript Scrabble",
    "start": "1372150",
    "end": "1379820"
  },
  {
    "text": "benchmark is just live full game of Scrabble I've written using streams API and we run that and you just run that in",
    "start": "1379820",
    "end": "1386550"
  },
  {
    "text": "a gem age benchmark in a loop and you also get twice X performance so what it",
    "start": "1386550",
    "end": "1391559"
  },
  {
    "text": "tells you is that even though across all benchmarks maybe this performance boost is not as established but for the",
    "start": "1391559",
    "end": "1398580"
  },
  {
    "text": "application level code that you write because most probably you don't write low-level arithmetic sand mathematics no",
    "start": "1398580",
    "end": "1407520"
  },
  {
    "text": "particle generation then then probably for yo code those performance boost benefits will be more pronounced if you",
    "start": "1407520",
    "end": "1415370"
  },
  {
    "text": "use other gem languages especially for example Scala the results are very",
    "start": "1415370",
    "end": "1420960"
  },
  {
    "text": "fascinating so the Community Edition compiler gives you something like 10% performance boost on typical workloads",
    "start": "1420960",
    "end": "1428280"
  },
  {
    "text": "so for example we evaluated that on just compiling Scala projects because SBT and Scala Co normal Scala prod programs and",
    "start": "1428280",
    "end": "1435750"
  },
  {
    "text": "it gives you numbers the Enterprise Edition gives you a 10 a 1/3 of performance boost and you can you can",
    "start": "1435750",
    "end": "1442160"
  },
  {
    "text": "evaluate that so you're welcome to do that especially people who are using Scala which has some reputation for",
    "start": "1442160",
    "end": "1450540"
  },
  {
    "text": "being slower at compile phase that maybe it could be maybe you should look into",
    "start": "1450540",
    "end": "1455850"
  },
  {
    "text": "this and get some of that time back and on top of that so that was just numbers",
    "start": "1455850",
    "end": "1462420"
  },
  {
    "text": "running on the ground there is this there are two project which are virtual machines for Java",
    "start": "1462420",
    "end": "1469150"
  },
  {
    "text": "right so there is open JDK which is mostly developed and maintained by the",
    "start": "1469150",
    "end": "1476080"
  },
  {
    "text": "drama group people at Oracle and the community and number of companies and there is ground VM which is a also a",
    "start": "1476080",
    "end": "1483190"
  },
  {
    "text": "virtual machine that is capable of running Java you have to understand that those are T different projects with",
    "start": "1483190",
    "end": "1488200"
  },
  {
    "text": "different vision and different priorities so Brown VM wants to be the virtual machine to run everything and",
    "start": "1488200",
    "end": "1494290"
  },
  {
    "text": "it's anywhere greenfield project we're not even that the first release yet currently we have release candidate",
    "start": "1494290",
    "end": "1500920"
  },
  {
    "text": "gilts out and open JDK is a very mature project with millions of deployments and",
    "start": "1500920",
    "end": "1507520"
  },
  {
    "text": "they need to devalue stability backwards compatibility way more so but those two",
    "start": "1507520",
    "end": "1514480"
  },
  {
    "text": "projects work as friendly open-source projects so for example open JDK sends",
    "start": "1514480",
    "end": "1520540"
  },
  {
    "text": "some versions indefinitely in the lemons includes grant compiler the version of",
    "start": "1520540",
    "end": "1526840"
  },
  {
    "text": "the open source grant compiler which they pull into their open JDK sources and you can experiment with grant",
    "start": "1526840",
    "end": "1534220"
  },
  {
    "text": "compiler just by using normal open JDK and we are using open JDK as the",
    "start": "1534220",
    "end": "1539920"
  },
  {
    "text": "platform for our general workloads so we use the whole JVM just replacing the",
    "start": "1539920",
    "end": "1545620"
  },
  {
    "text": "compiler a bit and and we we are trying to be very friendly and good citizens of",
    "start": "1545620",
    "end": "1552670"
  },
  {
    "text": "the open-source community both of us so if you experiment with those the ground",
    "start": "1552670",
    "end": "1558370"
  },
  {
    "text": "compiler in side the open JDK what you have to do you have to have a reasonably",
    "start": "1558370",
    "end": "1563590"
  },
  {
    "text": "recent version of Java and then you just add a common lines flags so you unlock experimental vm options",
    "start": "1563590",
    "end": "1569620"
  },
  {
    "text": "because using ground compiler is an experimental option currently in the open JDK and then you just say use JVM",
    "start": "1569620",
    "end": "1575980"
  },
  {
    "text": "CI compiler and then grant compiler will be the top tier just-in-time compiler in",
    "start": "1575980",
    "end": "1581200"
  },
  {
    "text": "your open JDK so you can run your normal Java download it from whatever place you",
    "start": "1581200",
    "end": "1587200"
  },
  {
    "text": "download open JDK builds and there will be ground compile it so last week a",
    "start": "1587200",
    "end": "1593530"
  },
  {
    "text": "couple of weeks ago last week just in the end of October there was Oracle code one conference and at keynote they talked",
    "start": "1593530",
    "end": "1600860"
  },
  {
    "text": "about the upcoming plants and of course I mentioned project Valhalla the data types and they showed this benchmark of",
    "start": "1600860",
    "end": "1608390"
  },
  {
    "text": "matrix multiplication which there were more code than that and you're welcome",
    "start": "1608390",
    "end": "1613790"
  },
  {
    "text": "to watch the stream there but essentially what it does it multiplies complex numbers so you have complex",
    "start": "1613790",
    "end": "1619880"
  },
  {
    "text": "numbers and represented as an object it has the real and imaginary parts and you do some maths operations in that and the",
    "start": "1619880",
    "end": "1626210"
  },
  {
    "text": "benchmark showed that he if if they use a prototype with Valhalla with value types they can pack that in memory much",
    "start": "1626210",
    "end": "1631880"
  },
  {
    "text": "more efficiently and the performance improves tenfold right so what we did we took this benchmark and we run that",
    "start": "1631880",
    "end": "1639429"
  },
  {
    "text": "on-ground compiler in the open JDK 11 which is currently assessable so we can",
    "start": "1639429",
    "end": "1646550"
  },
  {
    "text": "run that currently so the results are at the table like this",
    "start": "1646550",
    "end": "1651679"
  },
  {
    "text": "so if you just run it on JDK 11 you get the score of like that seven nine four",
    "start": "1651679",
    "end": "1657470"
  },
  {
    "text": "four and this is also not a seconds for operations so lower is better and if you",
    "start": "1657470",
    "end": "1663350"
  },
  {
    "text": "just run on JDK 11 with those common line flags you get twice as good result",
    "start": "1663350",
    "end": "1669020"
  },
  {
    "text": "and if you run that on the Java 8 based built of the crown VM Enterprise Edition",
    "start": "1669020",
    "end": "1675200"
  },
  {
    "text": "you get a little bit more performance boost out of that on this particular workload but you have to understand this is twice as fast and a little bit faster",
    "start": "1675200",
    "end": "1683510"
  },
  {
    "text": "than that so what you currently can do if you have those workloads you can evaluate growl",
    "start": "1683510",
    "end": "1689240"
  },
  {
    "text": "compiler not even downloading new virtual machine but just like adding common line flags which is a no-brainer",
    "start": "1689240",
    "end": "1696670"
  },
  {
    "text": "most probably you will not get the performance boost like that for for all your workloads but there are several",
    "start": "1696670",
    "end": "1704290"
  },
  {
    "text": "really good optimizations that guala compiler implements there was a question",
    "start": "1704290",
    "end": "1711250"
  },
  {
    "text": "for the Enterprise Edition I'm not actually sure I run this on my so the",
    "start": "1713920",
    "end": "1719150"
  },
  {
    "text": "question was why the error value here is so so large I run this on my macbook which is not the most appropriate",
    "start": "1719150",
    "end": "1726530"
  },
  {
    "text": "machine to run the benchmarks maybe something else was happening",
    "start": "1726530",
    "end": "1732229"
  },
  {
    "text": "maybe there were not enough iterations because I just ran this for a couple of",
    "start": "1732229",
    "end": "1737359"
  },
  {
    "text": "minutes maybe something so you have to reevaluate that and but you have like a",
    "start": "1737359",
    "end": "1744469"
  },
  {
    "text": "couple of words about the optimizations that bring that performance boost is that dravyam control compiler has great",
    "start": "1744469",
    "end": "1752169"
  },
  {
    "text": "inlining algorithm polymorphic inlining so when you have interfaces through",
    "start": "1752169",
    "end": "1757340"
  },
  {
    "text": "which you call very many different optimizations implementations like say collection interfaces which everyone",
    "start": "1757340",
    "end": "1764659"
  },
  {
    "text": "uses in every application and great escape analysis so we don't generate as",
    "start": "1764659",
    "end": "1771859"
  },
  {
    "text": "much as much as many objects in the innermost loops and because we can",
    "start": "1771859",
    "end": "1778369"
  },
  {
    "text": "eliminate those object creation we can just operate on the stack with primitive values and then you save on creating",
    "start": "1778369",
    "end": "1786349"
  },
  {
    "text": "objects you save on garbage collection and you save on everything else and then you inline everything better",
    "start": "1786349",
    "end": "1791989"
  },
  {
    "text": "so because of those three I think those are the most important optimizations for the workloads like that because of that",
    "start": "1791989",
    "end": "1798529"
  },
  {
    "text": "you get those numbers Twitter is one",
    "start": "1798529",
    "end": "1804649"
  },
  {
    "text": "company who is using ground compiler in production right now so they are running their Scala Scala micro services with",
    "start": "1804649",
    "end": "1813679"
  },
  {
    "text": "the ground compiler I don't think they're using I know they're not using",
    "start": "1813679",
    "end": "1819169"
  },
  {
    "text": "our builds of growl iam but they just plug a compiler into the open JDK built",
    "start": "1819169",
    "end": "1826219"
  },
  {
    "text": "using JVM sky and Chris telling her he's a Twitter VM engineering group engineer",
    "start": "1826219",
    "end": "1836239"
  },
  {
    "text": "and he does presentations about how to use that and some where it's about how",
    "start": "1836239",
    "end": "1845330"
  },
  {
    "text": "to measure the performance improvements for example growl compiler is written in Java so when you currently run that you",
    "start": "1845330",
    "end": "1851330"
  },
  {
    "text": "need to compile that machine code first to efficiently compile other code so you need to it will give it a little bit",
    "start": "1851330",
    "end": "1857690"
  },
  {
    "text": "more warm up to your benchmarks because there are more things to compile and also because it's just Java code it uses",
    "start": "1857690",
    "end": "1864979"
  },
  {
    "text": "Java keep for the compilation so initially you might see more heap usage because it",
    "start": "1864979",
    "end": "1870490"
  },
  {
    "text": "just puts the compiler infrastructure data into your heap and then after the",
    "start": "1870490",
    "end": "1877600"
  },
  {
    "text": "compilation is done you hit back backed it gets back to you but that could be an",
    "start": "1877600",
    "end": "1883230"
  },
  {
    "text": "unexpected issue if you do benchmark so I recommend listening to his talks and",
    "start": "1883230",
    "end": "1889180"
  },
  {
    "text": "he does prove that growl compiler even the Community Edition gives performance",
    "start": "1889180",
    "end": "1894580"
  },
  {
    "text": "boost to them and encourages other people to try which is what I also would",
    "start": "1894580",
    "end": "1900010"
  },
  {
    "text": "like to tell you if you have a chance try gull compiler or graham build and",
    "start": "1900010",
    "end": "1906420"
  },
  {
    "text": "come back to us with the results we would like to make it really good",
    "start": "1906420",
    "end": "1911880"
  },
  {
    "text": "runtime so but enough about java for a",
    "start": "1911880",
    "end": "1917560"
  },
  {
    "text": "moment let's talk about other languages why do we want to support other languages is because the ecosystem of",
    "start": "1917560",
    "end": "1926760"
  },
  {
    "text": "different languages or very large so it just makes sense that sometimes the best",
    "start": "1926760",
    "end": "1934780"
  },
  {
    "text": "tool for a given problem is not to use the language that you are currently using or what your platform currently",
    "start": "1934780",
    "end": "1941920"
  },
  {
    "text": "supports but he's something else there are half a million packages modules on",
    "start": "1941920",
    "end": "1947260"
  },
  {
    "text": "NPM everything literally that is worth writing has been written in JavaScript",
    "start": "1947260",
    "end": "1953500"
  },
  {
    "text": "at some point of time so you can just use those implementations for example from any other language or you can use",
    "start": "1953500",
    "end": "1959350"
  },
  {
    "text": "your Java libraries from any other language so it makes sense to to enable",
    "start": "1959350",
    "end": "1965770"
  },
  {
    "text": "this interoperability between different things so I would like to show you",
    "start": "1965770",
    "end": "1971350"
  },
  {
    "text": "another demo how many of you use Spring Framework excellent writing web",
    "start": "1971350",
    "end": "1977920"
  },
  {
    "text": "applications so that's something that Java ecosystem is known for it's writing",
    "start": "1977920",
    "end": "1985210"
  },
  {
    "text": "spring applications so let's look at this let me just show you I have a spring application here let me see if I",
    "start": "1985210",
    "end": "1994630"
  },
  {
    "text": "can make it larger it's a normal spring application right so it's Springwood application and it has some",
    "start": "1994630",
    "end": "2001200"
  },
  {
    "text": "beans it has some request mappings so with the web application what is unusual about this is that I would like you to",
    "start": "2001200",
    "end": "2008880"
  },
  {
    "text": "show the interoperability between spring and are so our is language for known for",
    "start": "2008880",
    "end": "2016320"
  },
  {
    "text": "being excellent at Statistics data visualization and data processing and",
    "start": "2016320",
    "end": "2021990"
  },
  {
    "text": "also visualization of data graphs and everything so if you would like to",
    "start": "2021990",
    "end": "2028679"
  },
  {
    "text": "enrich your existing Java applications with a module from another language this is what you potentially can do and this",
    "start": "2028679",
    "end": "2035520"
  },
  {
    "text": "is how the inter up between different languages works so what you need to do you need to create an context in which",
    "start": "2035520",
    "end": "2041370"
  },
  {
    "text": "you will evaluate scripts in different in different language and here in my",
    "start": "2041370",
    "end": "2046490"
  },
  {
    "text": "spring application I do this in a very straightforward way so I just say I will",
    "start": "2046490",
    "end": "2052740"
  },
  {
    "text": "use a context and this is the API from the gravy M jar files so I will create a",
    "start": "2052740",
    "end": "2060388"
  },
  {
    "text": "context and I will say that just build that so now my context is a spring bean",
    "start": "2060389",
    "end": "2065550"
  },
  {
    "text": "normally and spring will initiate that and in do the life cycle things and now",
    "start": "2065550",
    "end": "2071460"
  },
  {
    "text": "after that I can say that I would like to use that context my bean here autumn",
    "start": "2071460",
    "end": "2078658"
  },
  {
    "text": "art and I would like to evaluate a source file which is an art file and",
    "start": "2078659",
    "end": "2085290"
  },
  {
    "text": "here you can see it so this is what our code typically looks like what it does",
    "start": "2085290",
    "end": "2092398"
  },
  {
    "text": "here it just takes some data from a data holder which is this Java object and",
    "start": "2092399",
    "end": "2098660"
  },
  {
    "text": "what it does oops what it does it plots the data using the ggplot package which",
    "start": "2098660",
    "end": "2105270"
  },
  {
    "text": "is the normal our package and it loads that and it returns an SVG image so in",
    "start": "2105270",
    "end": "2112020"
  },
  {
    "text": "my java application what I do I evaluate that source and I say because I know that this would be a function this this",
    "start": "2112020",
    "end": "2118560"
  },
  {
    "text": "script just defines one function I just say I want a function back any auto wire",
    "start": "2118560",
    "end": "2123840"
  },
  {
    "text": "that function to my plot function bean so now this function and this is normal",
    "start": "2123840",
    "end": "2129180"
  },
  {
    "text": "Java interface right public interface function for the package java.util function so this",
    "start": "2129180",
    "end": "2135450"
  },
  {
    "text": "is a normal Java function but this is not just a normal Java function this is an art function so and I will use that",
    "start": "2135450",
    "end": "2142859"
  },
  {
    "text": "as a normal Java function I will just call apply and pass data normal Java objects there and then we'll run all",
    "start": "2142859",
    "end": "2149609"
  },
  {
    "text": "this thing how do I run this thing I will run this using spring application stop doing this it will take a moment to",
    "start": "2149609",
    "end": "2158099"
  },
  {
    "text": "start because it's a spring application and it needs to build it builds it",
    "start": "2158099",
    "end": "2165119"
  },
  {
    "text": "starts and it runs and you can see it's normal spring application so what it",
    "start": "2165119",
    "end": "2172619"
  },
  {
    "text": "does in the background it initializes the beans it initializes the context and an engine to evaluate other languages",
    "start": "2172619",
    "end": "2180329"
  },
  {
    "text": "for example here R and it goes and loads the script and it evaluates that our",
    "start": "2180329",
    "end": "2185460"
  },
  {
    "text": "code and it creates the our function and then we call that so if we go to the",
    "start": "2185460",
    "end": "2192240"
  },
  {
    "text": "browser and we do 8080 load and we have",
    "start": "2192240",
    "end": "2198900"
  },
  {
    "text": "10 minutes so we're gonna go faster what you can see hopefully nothing breaks you",
    "start": "2198900",
    "end": "2205289"
  },
  {
    "text": "see that there is an SVG image which is rendered by the our function which is",
    "start": "2205289",
    "end": "2210569"
  },
  {
    "text": "kind of mind-blowing in the same way you can interrupt with JavaScript code or Python code or ruby code if you want and",
    "start": "2210569",
    "end": "2217799"
  },
  {
    "text": "you can do that from like in any direction where if you have a native library you can just call it through the",
    "start": "2217799",
    "end": "2223049"
  },
  {
    "text": "LVM interpreter the best part is that this Interop api is unified right so you don't have to",
    "start": "2223049",
    "end": "2230009"
  },
  {
    "text": "figure out oh is this a native function interface or foreign function interface you have your java objects which",
    "start": "2230009",
    "end": "2236099"
  },
  {
    "text": "represent classes and values and functions from different languages and you can use them normally so now the",
    "start": "2236099",
    "end": "2244500"
  },
  {
    "text": "load goes down but we will stop this really fast because I don't need this anymore and will go faster forward so what else",
    "start": "2244500",
    "end": "2252630"
  },
  {
    "text": "it can do javascript in java 11 nice",
    "start": "2252630",
    "end": "2258569"
  },
  {
    "text": "current which was the engine for running JavaScript ontology mmm was deprecated",
    "start": "2258569",
    "end": "2264470"
  },
  {
    "text": "at the same time and this is a coincidence because Java group decided",
    "start": "2264470",
    "end": "2271340"
  },
  {
    "text": "that they don't want to support nasara anymore grav yam provides an engine for",
    "start": "2271340",
    "end": "2276500"
  },
  {
    "text": "JavaScript running JavaScript so it's equi script compatible so it supports",
    "start": "2276500",
    "end": "2282890"
  },
  {
    "text": "normal JavaScript functions and no more normal JavaScript language features and it's reasonably fast we run a number of",
    "start": "2282890",
    "end": "2291980"
  },
  {
    "text": "benchmarks so if you look at the composite this pink line is the Community Edition and the red line is",
    "start": "2291980",
    "end": "2298310"
  },
  {
    "text": "the Enterprise Edition is approximately four and six times faster on those benchmarks composite score than mass",
    "start": "2298310",
    "end": "2305000"
  },
  {
    "text": "born which is which which is great and also it's easier for us to support new",
    "start": "2305000",
    "end": "2310430"
  },
  {
    "text": "language features because we just need to add them to the interpreter we don't need to manually figure out how to",
    "start": "2310430",
    "end": "2316100"
  },
  {
    "text": "generate the efficient bytecode from that so supporting other language is much easier on rel VM that otherwise if",
    "start": "2316100",
    "end": "2325010"
  },
  {
    "text": "you want to experiment with with ljs or javascript you can do that on stock jdk",
    "start": "2325010",
    "end": "2330320"
  },
  {
    "text": "so there are a bunch of maven dependencies that you can include that will give you the the engine for growl",
    "start": "2330320",
    "end": "2337970"
  },
  {
    "text": "GS the api to use all that and you can check out the demo and you can run that",
    "start": "2337970",
    "end": "2342980"
  },
  {
    "text": "and you can run growl GS on stock jdk if you if you use this correct compiler",
    "start": "2342980",
    "end": "2348890"
  },
  {
    "text": "here where's the compiler there is the race compiler so you can replace the",
    "start": "2348890",
    "end": "2356210"
  },
  {
    "text": "growl compiler in open JDK with the growl compiler coming up from a maven dependency so we will get the latest",
    "start": "2356210",
    "end": "2362660"
  },
  {
    "text": "version of the main income of the growl compiler and then it will be able to optimize the JavaScript interpreter way",
    "start": "2362660",
    "end": "2370370"
  },
  {
    "text": "better but you are welcome to try that Ruby is faster and if you're interested",
    "start": "2370370",
    "end": "2377450"
  },
  {
    "text": "in Ruby you can watch this session by benoît at through bakari's this year",
    "start": "2377450",
    "end": "2382990"
  },
  {
    "text": "where he talks about parallelism and how to run Ruby and Ravi ham our our",
    "start": "2382990",
    "end": "2388580"
  },
  {
    "text": "implementation is reasonably faster than you are and you're welcome to check out",
    "start": "2388580",
    "end": "2396620"
  },
  {
    "text": "that book host the one of the most impressive bits about that is that our users in this",
    "start": "2396620",
    "end": "2403490"
  },
  {
    "text": "example uses a Fortran code - for optimizing and critical paths so if we rewrite that in our then more advanced",
    "start": "2403490",
    "end": "2411230"
  },
  {
    "text": "compiler in growl VM is able to optimize that code better and its result is actually faster than ignore calling",
    "start": "2411230",
    "end": "2419120"
  },
  {
    "text": "Fortran so if you want fast code you don't have to write native code for that",
    "start": "2419120",
    "end": "2425020"
  },
  {
    "text": "you just need to use a better compiler for Python we're currently its youngest",
    "start": "2425020",
    "end": "2430040"
  },
  {
    "text": "implementation of the engine for Brawl vm so why currently focusing on being compatible with non-price i5 workloads",
    "start": "2430040",
    "end": "2437410"
  },
  {
    "text": "you're welcome to try code snippets and language programs work but the compatibility with the echo system is",
    "start": "2437410",
    "end": "2443870"
  },
  {
    "text": "not yet on the level where you just run and there are no exceptions so be aware on top of that being this central piece",
    "start": "2443870",
    "end": "2452270"
  },
  {
    "text": "between the languages and platform allows us to use this as the integration",
    "start": "2452270",
    "end": "2457550"
  },
  {
    "text": "point for all the tools so you can use an one debugger for all those languages you can use one heap viewer to",
    "start": "2457550",
    "end": "2466160"
  },
  {
    "text": "understand what happens with memory on your with your application so this is the virtual virtual VM you can use the",
    "start": "2466160",
    "end": "2473630"
  },
  {
    "text": "profiler for all that code so if you're writing tools or you are using tools for",
    "start": "2473630",
    "end": "2479750"
  },
  {
    "text": "your writing language then you get those tools for free if you implement your language on top of the growl yeah which",
    "start": "2479750",
    "end": "2486410"
  },
  {
    "text": "is great and then have five minutes more right excellent six minutes spring back to",
    "start": "2486410",
    "end": "2493520"
  },
  {
    "text": "spring people use spring and we're gonna talk about alt compilation for just a",
    "start": "2493520",
    "end": "2498680"
  },
  {
    "text": "couple of more minutes so we know that spring applications on Java maybe not the fastest to start up so I have here a",
    "start": "2498680",
    "end": "2505910"
  },
  {
    "text": "spring application and I will run that I pre-compile that of course and we'll run that and we can all count how many how",
    "start": "2505910",
    "end": "2514280"
  },
  {
    "text": "much time it will take to start a spring application so let's count on my three we'll start counting one two three so",
    "start": "2514280",
    "end": "2520220"
  },
  {
    "text": "one two three one let's do it let's do it again one two three done so this",
    "start": "2520220",
    "end": "2530030"
  },
  {
    "text": "spring application started in 24 milliseconds",
    "start": "2530030",
    "end": "2535680"
  },
  {
    "text": "yeah that is not now it didn't break it",
    "start": "2535680",
    "end": "2540940"
  },
  {
    "text": "still works oh maybe it broke because the previous one is binding this import no this",
    "start": "2540940",
    "end": "2546640"
  },
  {
    "text": "stopped let's see localhost:8080 yeah yay growl of a native images what",
    "start": "2546640",
    "end": "2554440"
  },
  {
    "text": "you saw here it was the spring application specifically crafted so it's not yet fully supporting the whole",
    "start": "2554440",
    "end": "2561430"
  },
  {
    "text": "spring application ecosystem I specifically crafted string application which was compiled ahead of time to a",
    "start": "2561430",
    "end": "2567219"
  },
  {
    "text": "native image to standalone executable that you can run and as you can see that",
    "start": "2567219",
    "end": "2573819"
  },
  {
    "text": "executable doesn't require a virtual machine the JVM the java virtual machine so it just starts really fast in 24",
    "start": "2573819",
    "end": "2582789"
  },
  {
    "text": "milliseconds so if you are running your workloads in the deployments where the startup is really important like you're",
    "start": "2582789",
    "end": "2589420"
  },
  {
    "text": "using functional service environment where you just need a short bit of computation happening and you don't want",
    "start": "2589420",
    "end": "2595719"
  },
  {
    "text": "to pay for the start-up costs maybe something like this would would be interesting for you so let let's go back",
    "start": "2595719",
    "end": "2603489"
  },
  {
    "text": "to the slides and talk about why not everyone is using this yep so what happens on the background it's a full",
    "start": "2603489",
    "end": "2610329"
  },
  {
    "text": "alt compilation to the machine code so normally you run on the hotspot which is a pre compiled and then Java code is",
    "start": "2610329",
    "end": "2615940"
  },
  {
    "text": "dynamically executed so what we do we pre compile all that and we provide a small virtual machine which would do the",
    "start": "2615940",
    "end": "2623559"
  },
  {
    "text": "garbage collection for you and the thread shuttling everything that I told you the components VM needs to provide",
    "start": "2623559",
    "end": "2629319"
  },
  {
    "text": "for the runtime so your program still runs with a garbage collection giving you illusion of the infinite memory and",
    "start": "2629319",
    "end": "2636599"
  },
  {
    "text": "you can still run dynamic languages on top of that but currently you cannot dynamically add Java classes so there",
    "start": "2636599",
    "end": "2643749"
  },
  {
    "text": "will be no dynamic class loading currently possible with that which is one of the limitations there are other",
    "start": "2643749",
    "end": "2649059"
  },
  {
    "text": "limitations as well which are thoroughly documented on get up and you're welcome to follow that but essentially what",
    "start": "2649059",
    "end": "2655479"
  },
  {
    "text": "happens is that we take all the classes Java classes and we analyze them statically and we see what reaches and",
    "start": "2655479",
    "end": "2661809"
  },
  {
    "text": "calls what and then we produce the machine code using growl compiler as in the head of time compiler so we just give the",
    "start": "2661809",
    "end": "2667750"
  },
  {
    "text": "bytecode to brow and grant gives us machine code and we put the machine code into a single binary and then wrap it",
    "start": "2667750",
    "end": "2673900"
  },
  {
    "text": "with the executable bits to be able to run that the startup of that thing is",
    "start": "2673900",
    "end": "2680140"
  },
  {
    "text": "really really impressive the memory overhead of that thing is really impressive compared to the normal JVM",
    "start": "2680140",
    "end": "2685780"
  },
  {
    "text": "because we don't need the machinery to add additional and load additional classes we don't need the meta",
    "start": "2685780",
    "end": "2691480"
  },
  {
    "text": "information about classes so so we don't need that much memory so it wouldn't be like the most important thing for all",
    "start": "2691480",
    "end": "2698380"
  },
  {
    "text": "applications so if you're running long running applications normal servers then probably JIT compiler is your best",
    "start": "2698380",
    "end": "2704980"
  },
  {
    "text": "friend anyway but if you are really looking forward to startup this is the thing that you might look into for",
    "start": "2704980",
    "end": "2711460"
  },
  {
    "text": "example if you run in Scala you can compile Scala C to native image and then it starts really really fast way faster",
    "start": "2711460",
    "end": "2719950"
  },
  {
    "text": "than normally which is great because once again Scala is not known",
    "start": "2719950",
    "end": "2725680"
  },
  {
    "text": "for having the fastest compiler or the fastest starting compiler so we are welcome to try that there are a couple",
    "start": "2725680",
    "end": "2731980"
  },
  {
    "text": "of common lines apps which have been converted and we are looking forward to increasing the support to the ecosystems",
    "start": "2731980",
    "end": "2737950"
  },
  {
    "text": "if you are looking specifically for spring currently out of the box spring gaps and spring boot apps will not work",
    "start": "2737950",
    "end": "2744400"
  },
  {
    "text": "with that spring team and rally em team we're working on that to bring this compatibility together you can follow",
    "start": "2744400",
    "end": "2751090"
  },
  {
    "text": "that issue I think this one is closed currently but it links to all other important issues and you can see the",
    "start": "2751090",
    "end": "2757120"
  },
  {
    "text": "progress there and for the native images currently Linux Mac OS Java 8 so we are",
    "start": "2757120",
    "end": "2763900"
  },
  {
    "text": "working on bringing Windows support there and we are working to enabling that on Java 11 so you can expect that",
    "start": "2763900",
    "end": "2771400"
  },
  {
    "text": "in the future no time estimates currently from me but we will bring it",
    "start": "2771400",
    "end": "2776440"
  },
  {
    "text": "there so and then we'll have the full ecosystem of operating systems but currently for most production use cases",
    "start": "2776440",
    "end": "2783570"
  },
  {
    "text": "everyone run the runs Linux mostly everyone runs Linux so which is great because that is supported so high",
    "start": "2783570",
    "end": "2791650"
  },
  {
    "text": "performance polyglot language level ritualization embeddable across the stack at this point of time I would show",
    "start": "2791650",
    "end": "2797830"
  },
  {
    "text": "you demo how you can run gravy em JavaScript engine inside an Oracle database so you",
    "start": "2797830",
    "end": "2804010"
  },
  {
    "text": "can write write your stored procedures as in JavaScript instead of Kiel sequel so if you're not a fan of pills if you",
    "start": "2804010",
    "end": "2811150"
  },
  {
    "text": "know PL sequel you are good you can write your procedures and user-defined functions in feel simple but if not",
    "start": "2811150",
    "end": "2817800"
  },
  {
    "text": "maybe JavaScript is a better choice for you I have that demo you can you can download and play with the experimental",
    "start": "2817800",
    "end": "2825340"
  },
  {
    "text": "builds of that it is possible to try that you are welcome to find that in the",
    "start": "2825340",
    "end": "2832590"
  },
  {
    "text": "Internet recently they announced an apex which is a how you can build the full",
    "start": "2832590",
    "end": "2838150"
  },
  {
    "text": "application inside the virtual inside database so there you can run JavaScript and Python through valve am inside the",
    "start": "2838150",
    "end": "2845380"
  },
  {
    "text": "database and and and use that for the full applications there are plenty of people working on the ground main",
    "start": "2845380",
    "end": "2851410"
  },
  {
    "text": "project inside that were collapse there are more external contributors we're working with Red Hat to bring the arch",
    "start": "2851410",
    "end": "2858750"
  },
  {
    "text": "64 support as the infrastructure other people are contribute thinking it's so",
    "start": "2858750",
    "end": "2864730"
  },
  {
    "text": "if you are if you want to do that building a virtual machine is a",
    "start": "2864730",
    "end": "2870280"
  },
  {
    "text": "community effort so would be great if you could download and try gravimon your",
    "start": "2870280",
    "end": "2876340"
  },
  {
    "text": "applications if you connect with us if you tell us what's not working what's",
    "start": "2876340",
    "end": "2881530"
  },
  {
    "text": "working well where we can improve you can find us on get up you can find us in mailing lists you can tweet at us and we",
    "start": "2881530",
    "end": "2888280"
  },
  {
    "text": "will come back to you we really want to be a really good open source project but for that we need the",
    "start": "2888280",
    "end": "2895030"
  },
  {
    "text": "help of the community thank you",
    "start": "2895030",
    "end": "2899220"
  }
]