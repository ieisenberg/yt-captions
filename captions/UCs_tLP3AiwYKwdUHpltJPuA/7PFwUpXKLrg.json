[
  {
    "start": "0",
    "end": "50000"
  },
  {
    "text": "[Music]",
    "start": "5160",
    "end": "12320"
  },
  {
    "text": "okay hello everybody um thank you so much for the introduction Michelle um it's been a while for many people I",
    "start": "12320",
    "end": "18920"
  },
  {
    "text": "think uh it's one of those things that you kind of know is deep down hiding away under the layers of software that",
    "start": "18920",
    "end": "25720"
  },
  {
    "text": "have been written some some by yourself and some by the people that came before you but down there somewhere is an a CPU",
    "start": "25720",
    "end": "33200"
  },
  {
    "text": "that's not running Java or C or JavaScript it's running assembly uh well",
    "start": "33200",
    "end": "38280"
  },
  {
    "text": "machine code really specifically and I'm going to talk to you about uh kind of learning just enough to be able to",
    "start": "38280",
    "end": "43640"
  },
  {
    "text": "appreciate what those piles and layers of code are doing for you every day so",
    "start": "43640",
    "end": "50320"
  },
  {
    "start": "50000",
    "end": "244000"
  },
  {
    "text": "first of all hello I've already had a great intro so there's not really much more I need to say here um other than",
    "start": "50320",
    "end": "57320"
  },
  {
    "text": "this is how I started programming um I think many of my kind of age um who who",
    "start": "57320",
    "end": "63719"
  },
  {
    "text": "started programming in maybe the 80s this was their first introduction to programming it was going into a",
    "start": "63719",
    "end": "69600"
  },
  {
    "text": "department store um talking your way past the clerk who was in front of the array of of computers and then typing",
    "start": "69600",
    "end": "76759"
  },
  {
    "text": "something like this out and hitting uh run typing run and watching your name scroll up and down on the screen um this",
    "start": "76759",
    "end": "83280"
  },
  {
    "text": "is as Michelle alluded to this is one of my hobbies is emulating these old computer systems so this is actually a screenshot from that but this is how I",
    "start": "83280",
    "end": "90560"
  },
  {
    "text": "learn to program and I think a lot of people um of my generation anyway learned to program this way and the",
    "start": "90560",
    "end": "97040"
  },
  {
    "text": "first thing you'll realize is that you have uh only Global variables you have",
    "start": "97040",
    "end": "102759"
  },
  {
    "text": "only go-to statements so this is not really a great way of setting yourself up for success as languages have evolved",
    "start": "102759",
    "end": "109360"
  },
  {
    "text": "away from those Concepts you'll also notice that it's a pretty primitive way of uh writing code and if you were",
    "start": "109360",
    "end": "116920"
  },
  {
    "text": "anything like me what you really wanted to do was write video Gam games and you could try and write video games using",
    "start": "116920",
    "end": "123000"
  },
  {
    "text": "basic which is what this language is but it would be too slow and so you would probably start thinking how do I make",
    "start": "123000",
    "end": "130119"
  },
  {
    "text": "this go faster and the only languages available to you really were writing straight out machine code in assembly so",
    "start": "130119",
    "end": "137400"
  },
  {
    "text": "I learn assembly first and foremost to write video games uh in the late 80s",
    "start": "137400",
    "end": "142599"
  },
  {
    "text": "which um kind of helped my career in the long run but um I want to kind of like",
    "start": "142599",
    "end": "147920"
  },
  {
    "text": "express to you how this path can lead you to write decent programming languages but still be",
    "start": "147920",
    "end": "154560"
  },
  {
    "text": "sympathetic to what's going on at the bottom of the pile so my journey started",
    "start": "154560",
    "end": "159959"
  },
  {
    "text": "on the BBC micro which is what you just saw and um writing video games for uh as",
    "start": "159959",
    "end": "165000"
  },
  {
    "text": "a teenager uh I got a job in the games industry and spent n on a decade um on",
    "start": "165000",
    "end": "170920"
  },
  {
    "text": "PlayStations and uh Xboxes and Dreamcast I think I don't know if it's in camera shot up here but I've got like some very",
    "start": "170920",
    "end": "177400"
  },
  {
    "text": "ancient old video game Hardware up there there um some great times and of course",
    "start": "177400",
    "end": "182480"
  },
  {
    "text": "back in those days you were very very close to the metal that is there wasn't very much insulating between what you",
    "start": "182480",
    "end": "188400"
  },
  {
    "text": "were writing as a programmer in C often uh and what the hardware was doing and so you were kind of abundantly aware",
    "start": "188400",
    "end": "195120"
  },
  {
    "text": "that there were assembly instructions that were being executed um and in fact you needed to",
    "start": "195120",
    "end": "200360"
  },
  {
    "text": "know some of those things in order to get the most out of the hardware if you wanted more explosions on screen then you had to write faster code that meant",
    "start": "200360",
    "end": "206879"
  },
  {
    "text": "that often you were having to second guess the compiler or doing away with the compiler Al together I then spent a",
    "start": "206879",
    "end": "212640"
  },
  {
    "text": "few years with my own company doing sort of consultancy stuff I had a great time at Google and then for the last 10 years",
    "start": "212640",
    "end": "218280"
  },
  {
    "text": "or so I've been working in finance where sort of surprisingly I've discovered the skills I picked up as a teenage boy",
    "start": "218280",
    "end": "224439"
  },
  {
    "text": "making video games um are just as useful in the finance world trying to make things go faster in terms of responding",
    "start": "224439",
    "end": "231159"
  },
  {
    "text": "to changing market conditions just a slightly different budget from uh A1",
    "start": "231159",
    "end": "236680"
  },
  {
    "text": "pound down the uh the corner shop to buy games to you know thousands of dollars worth of server Hardware so I'm going to",
    "start": "236680",
    "end": "245799"
  },
  {
    "start": "244000",
    "end": "370000"
  },
  {
    "text": "explain to you the website that is my hobby that Michelle said earlier uh this",
    "start": "245799",
    "end": "251079"
  },
  {
    "text": "is hopefully going to tie everything together and we'll get to some assembly in a second um compiler explorer was an idea",
    "start": "251079",
    "end": "257919"
  },
  {
    "text": "that came I came up with while I was working in the trading industry and uh just to sort of frame what the site is",
    "start": "257919",
    "end": "265000"
  },
  {
    "text": "and why it might be useful and we're going to see some examples of it as I go through explaining um about assembly um",
    "start": "265000",
    "end": "272000"
  },
  {
    "text": "this is what it looks like um this will hopefully give you some idea about where we're going so what compiler Explorer",
    "start": "272000",
    "end": "278080"
  },
  {
    "text": "allows you to do is type in code in a compiled language here I've shown C++",
    "start": "278080",
    "end": "283440"
  },
  {
    "text": "and I'm going to be showing sort of c and C++ examples mainly because that's what I spend most of my time writing um",
    "start": "283440",
    "end": "289960"
  },
  {
    "text": "but similarly you can put in rust or go or other compiled languages um we have",
    "start": "289960",
    "end": "295840"
  },
  {
    "text": "python in there as well but that's not really that compiled language um I've been asked to put in Java and some",
    "start": "295840",
    "end": "301639"
  },
  {
    "text": "other things which will be coming but essentially all compiled languages share some common behaviors and what compiler",
    "start": "301639",
    "end": "308199"
  },
  {
    "text": "Explorer allows you to do is put your code on the left hand side and then interactively see the results of the",
    "start": "308199",
    "end": "314199"
  },
  {
    "text": "compiler down at the assembly level and moreover it color codes and excuse my",
    "start": "314199",
    "end": "320240"
  },
  {
    "text": "drawing here um it color codes the lines that the compiler has tagged um as being",
    "start": "320240",
    "end": "327360"
  },
  {
    "text": "these instructions correspond to this Source input so in for example this",
    "start": "327360",
    "end": "332880"
  },
  {
    "text": "strange example I've got here even without knowing anything about what it's doing and indeed you don't need to do I",
    "start": "332880",
    "end": "337919"
  },
  {
    "text": "can see that there's a divide happening over here I don't know if my mouse pointer is visible but if it is I'm pointing at the Divide on line 10 on the",
    "start": "337919",
    "end": "343960"
  },
  {
    "text": "left hand side and it corresponds to with this light blue this V div with a",
    "start": "343960",
    "end": "349720"
  },
  {
    "text": "load of junk um knowing nothing about assembly I can see there's a word di in the middle of that so it kind of makes",
    "start": "349720",
    "end": "355520"
  },
  {
    "text": "some level of sense and so compil Explorer can be a tool for helping you learn assembly by typing in familiar",
    "start": "355520",
    "end": "362440"
  },
  {
    "text": "code in a language that you understand and seeing how it maps to the assembly that ultimately your computer is going",
    "start": "362440",
    "end": "367960"
  },
  {
    "text": "to be running so there's a backstory as to why I created compiler Explorer and",
    "start": "367960",
    "end": "373840"
  },
  {
    "start": "370000",
    "end": "628000"
  },
  {
    "text": "specifically why um it was while I was in the finance industry so we have a ton",
    "start": "373840",
    "end": "379560"
  },
  {
    "text": "of code as you can probably imagine and from time to time new versions of the compiler come out new versions of the",
    "start": "379560",
    "end": "386319"
  },
  {
    "text": "language come out and at the time it was my job to make sure that it was safe to",
    "start": "386319",
    "end": "392120"
  },
  {
    "text": "start using these cool new features that were coming out in C++ this was C++ 11",
    "start": "392120",
    "end": "397919"
  },
  {
    "text": "so a little while ago um and now if you don't read C++ that's fine I'm going to try and",
    "start": "397919",
    "end": "403599"
  },
  {
    "text": "explain enough of it for it to make sense and as I said before most of these things make sense in other languages um",
    "start": "403599",
    "end": "410120"
  },
  {
    "text": "maybe some of the names are different but this function here is a function it's just representative of the kind of",
    "start": "410120",
    "end": "416400"
  },
  {
    "text": "thing that we were doing it's a function which takes a variable length array a",
    "start": "416400",
    "end": "421599"
  },
  {
    "text": "vector of ins and it sums them all up and Returns the sum of all the elements",
    "start": "421599",
    "end": "426840"
  },
  {
    "text": "in that array pretty standard stuff and this is the old school way of writing it where I'm essentially initializing a",
    "start": "426840",
    "end": "433160"
  },
  {
    "text": "value to zero and then I'm just counting over the array starting at index zero",
    "start": "433160",
    "end": "438520"
  },
  {
    "text": "and looping incrementing the index until it gets to the size of that Vector that",
    "start": "438520",
    "end": "445000"
  },
  {
    "text": "variable length array and then for each element I'm getting the I element out",
    "start": "445000",
    "end": "450039"
  },
  {
    "text": "and I'm adding it to my result so far so good the new way of doing this was to",
    "start": "450039",
    "end": "457160"
  },
  {
    "text": "use a range for so the C++ 11 brought in the concept of range fors which is a",
    "start": "457160",
    "end": "462560"
  },
  {
    "text": "very common thing to do in other languages C++ is always a little bit late to some the party uh and this means",
    "start": "462560",
    "end": "468759"
  },
  {
    "text": "I could write the same code by saying for INT X colon V this just means I",
    "start": "468759",
    "end": "474400"
  },
  {
    "text": "don't need to know as a programmer exactly what the best way to iterate over a v is whatever a v is just give me",
    "start": "474400",
    "end": "481840"
  },
  {
    "text": "all the things in v and I'm going to add them all up so that's pretty cool that's great on me as a programmer but if",
    "start": "481840",
    "end": "490159"
  },
  {
    "text": "you're writing a very performance sensitive trading system and you you're suggesting that we blanket adopt a new",
    "start": "490159",
    "end": "496639"
  },
  {
    "text": "way of doing something then you better be sure that you're not about to lose your bus a bunch of money so I wanted to",
    "start": "496639",
    "end": "502879"
  },
  {
    "text": "check and moreover we'd actually been burnt by this before some other trading systems that we had had had been written",
    "start": "502879",
    "end": "508520"
  },
  {
    "text": "in Java and what we hadn't registered at the time is that doing this kind of operation was creating more garbage than",
    "start": "508520",
    "end": "515399"
  },
  {
    "text": "we were expecting as iterators were being created behind the scenes and so we were a little bit wary you know once",
    "start": "515399",
    "end": "520599"
  },
  {
    "text": "bit and twice shy so is one better than the other well for me as the programmer",
    "start": "520599",
    "end": "526160"
  },
  {
    "text": "the second one's much better but if I have to explain to my boss that they we're losing money um then it's not",
    "start": "526160",
    "end": "532320"
  },
  {
    "text": "better so how can we tell well we're going to look at some assembly code as you might have guessed and we're going",
    "start": "532320",
    "end": "538279"
  },
  {
    "text": "to walk through it and um I'm going to explain exactly what's going on so hopefully you can put into practice some",
    "start": "538279",
    "end": "544480"
  },
  {
    "text": "uh of the uh Concepts I'm about to explain so I'm getting all out of order here but a bit of a disclaimer before we",
    "start": "544480",
    "end": "550640"
  },
  {
    "text": "move on and that is that reading the assembly alone even when you understand it pretty well can be super misleading",
    "start": "550640",
    "end": "558680"
  },
  {
    "text": "like I spend quite a lot of my day staring at assembly and even I very often but even I I very often",
    "start": "558680",
    "end": "565920"
  },
  {
    "text": "misjudge how fast slow or otherwise the out is you always need to measure as",
    "start": "565920",
    "end": "572279"
  },
  {
    "text": "well now benchmarking is itself a black art it's very difficult to get it right",
    "start": "572279",
    "end": "578000"
  },
  {
    "text": "it's very hard to measure the things you you should be measuring and it's hard to know what the compiler is taking",
    "start": "578000",
    "end": "583720"
  },
  {
    "text": "advantage of by knowing that you're benchmarking um but it's always worth giving it a go and almost every language",
    "start": "583720",
    "end": "589120"
  },
  {
    "text": "has some kind of benchmarking best practices and libraries and Suites and harnesses and I encourage you to test as",
    "start": "589120",
    "end": "594839"
  },
  {
    "text": "well so you definitely need to test what looking at the assembly can do is help you develop intuition about what kinds",
    "start": "594839",
    "end": "601680"
  },
  {
    "text": "of Tricks the compiler can do for you and then you can look at comparable um pieces of code and make some",
    "start": "601680",
    "end": "607839"
  },
  {
    "text": "determination about not just the is it faster but why it might be faster to do something one way versus another all",
    "start": "607839",
    "end": "614839"
  },
  {
    "text": "right and I realized I have lost the slack okay there we are excellent",
    "start": "614839",
    "end": "620880"
  },
  {
    "text": "okay excellent all right so I'm just making sure I can I can deal with any uh live comments um so far",
    "start": "620880",
    "end": "627720"
  },
  {
    "text": "brilliant so now so sort of the meat the reason that you're all here and I'm hoping that if you're watching this",
    "start": "627720",
    "end": "633040"
  },
  {
    "start": "628000",
    "end": "976000"
  },
  {
    "text": "video if you're joining us live then you're already interested enough in assembly that you haven't been put off",
    "start": "633040",
    "end": "639200"
  },
  {
    "text": "by everything so far but when I speak to people who are coming into the industry when I speak to new grads sometimes",
    "start": "639200",
    "end": "644800"
  },
  {
    "text": "they've had some bad experiences and when you tell them that they're going to be looking at assembly this is what",
    "start": "644800",
    "end": "650560"
  },
  {
    "text": "they're expecting to see they're expecting to see some kind of dreadful heinous language of of evil and maybe",
    "start": "650560",
    "end": "657519"
  },
  {
    "text": "they've been burnt by reading myips uh at University or the only time that you've ever looked at assembly before is",
    "start": "657519",
    "end": "663480"
  },
  {
    "text": "when you are like in the debugging the most hellish bug that you've ever seen and you've had to as a last resort crack",
    "start": "663480",
    "end": "670560"
  },
  {
    "text": "out GDB and stare at something going why am I here and you know wondering about your life choices well I'm hoping to",
    "start": "670560",
    "end": "677000"
  },
  {
    "text": "turn that around today and I'm hoping that you can um as I do look at assembly as a thing of beauty and particularly",
    "start": "677000",
    "end": "685440"
  },
  {
    "text": "the output from an optimizing compiler to me is like poetry bit of a tough cell I give you that it's",
    "start": "685440",
    "end": "693040"
  },
  {
    "text": "sort of like Shakespearean poetry you know the stuff that you had read at school where you know it didn't really",
    "start": "693040",
    "end": "699079"
  },
  {
    "text": "make all that much sense it's super hard to write um to get it rhyming in the",
    "start": "699079",
    "end": "705440"
  },
  {
    "text": "right way and to get the right number of syllables and frankly most of the time if you're honest with yourself you read",
    "start": "705440",
    "end": "710760"
  },
  {
    "text": "it and you let it kind of wash over and you understand every third word or so but you get the gist of it and so you can appreciate it and that's all I want",
    "start": "710760",
    "end": "717480"
  },
  {
    "text": "you to go away with from today okay the first slide with actual",
    "start": "717480",
    "end": "723440"
  },
  {
    "text": "assembly code on it is so the general form of assembly is you have an",
    "start": "723440",
    "end": "729160"
  },
  {
    "text": "instruction which is like the operation that's going to take place and then you have some number of operands which are",
    "start": "729160",
    "end": "734800"
  },
  {
    "text": "like the arguments to the function if you want to think of the instruction as a function that changes state then you",
    "start": "734800",
    "end": "739920"
  },
  {
    "text": "have a certain number of of arguments to that function they're usually very small there are very few numbers of arguments",
    "start": "739920",
    "end": "746399"
  },
  {
    "text": "so commonly there's one or two or even none so the general form and this is to",
    "start": "746399",
    "end": "752279"
  },
  {
    "text": "be missing out things I should have said earlier we're going to be talking about 64-bit x86",
    "start": "752279",
    "end": "758079"
  },
  {
    "text": "assembly that's because I know it best um obviously it's pretty dominant in the server space at the moment and mostly if",
    "start": "758079",
    "end": "766399"
  },
  {
    "text": "you're developing on PCS then that's also what you're probably uh writing for obviously most mobile phones use the arm",
    "start": "766399",
    "end": "773160"
  },
  {
    "text": "instruction set so that's very different but although I'm going to be talking about some very specific to x86 things",
    "start": "773160",
    "end": "779279"
  },
  {
    "text": "are definitely analogs and you can squint your eyes a bit and see how the two things fit together and certainly",
    "start": "779279",
    "end": "786399"
  },
  {
    "text": "where excuse me where the two architectures are very different I'll try and point out some s pointers but",
    "start": "786399",
    "end": "792720"
  },
  {
    "text": "this is mostly about x86 so let's take a look at some of instructions that first one is an oper",
    "start": "792720",
    "end": "798959"
  },
  {
    "text": "uh an instruction which takes no operands and that is simply a return instruction it says I'm done doing what",
    "start": "798959",
    "end": "805680"
  },
  {
    "text": "I'm doing you asked me to do go back to whoever called me so um you're probably familiar with the idea of functions uh a",
    "start": "805680",
    "end": "812560"
  },
  {
    "text": "call instruction is the opposite of return that says go away and do something else for a bit transfers",
    "start": "812560",
    "end": "817680"
  },
  {
    "text": "control to another part of the program and then when that part of the program has finished doing its work it will",
    "start": "817680",
    "end": "822800"
  },
  {
    "text": "return back to the caller so that's a no argument or no operand instruction this increment racks",
    "start": "822800",
    "end": "831759"
  },
  {
    "text": "uh is a single argument and one of the things you'll notice pretty quickly on with x86 is that the first operation",
    "start": "831759",
    "end": "838279"
  },
  {
    "text": "sorry the first operand is usually both a source and a destination so most",
    "start": "838279",
    "end": "845079"
  },
  {
    "text": "instructions have uh a changing effects on their first parameter so in this",
    "start": "845079",
    "end": "850279"
  },
  {
    "text": "inance for racks increments racks now racks is a register and we'll go and talk about those in a second but think",
    "start": "850279",
    "end": "855839"
  },
  {
    "text": "of it as a variable so this is just doing rxs",
    "start": "855839",
    "end": "861360"
  },
  {
    "text": "Plus+ excuse me of course after drinking half a a gallon of",
    "start": "861360",
    "end": "866519"
  },
  {
    "text": "water still not quite enough to get rid of a ticklish cough another uh instruction would be the move",
    "start": "866519",
    "end": "873759"
  },
  {
    "text": "instruction which if you've done any assembly before you've probably seen these move instructions and they are the most confusingly named instruction of",
    "start": "873759",
    "end": "880320"
  },
  {
    "text": "all because they move nothing they copy this is copying a value from one place",
    "start": "880320",
    "end": "887000"
  },
  {
    "text": "to another so in this instance what we're saying is we're moving or copying the value 1 two 3 4 just the literal",
    "start": "887000",
    "end": "893800"
  },
  {
    "text": "number 1 two 3 4 and putting it into whatever edx is so this is just like edx",
    "start": "893800",
    "end": "899759"
  },
  {
    "text": "equals 1 2 3 4 so that's we've seen two different types of operand now we've seen a",
    "start": "899759",
    "end": "905680"
  },
  {
    "text": "register which is the RX edx is also a register and then 1 two 3 4 that's a constant",
    "start": "905680",
    "end": "911800"
  },
  {
    "text": "value uh similarly we could have a s of arithmetic instruction here and this is now also a two operand instruction and",
    "start": "911800",
    "end": "919959"
  },
  {
    "text": "in this case we're using two registers and here also we're seeing that the leftmost the first operand is both a",
    "start": "919959",
    "end": "926920"
  },
  {
    "text": "source and a destination most most of the x86 instructions are of this form so",
    "start": "926920",
    "end": "932040"
  },
  {
    "text": "instead of having uh like an RSI equals a plus b I have to do a plus equals type",
    "start": "932040",
    "end": "939560"
  },
  {
    "text": "operation so the only thing I can do in this instruction here is RSI plus equals RDI so that takes whatever RDI is and",
    "start": "939560",
    "end": "946639"
  },
  {
    "text": "adds it to RSI leaving the result in RSI some of the new funky instructions",
    "start": "946639",
    "end": "952880"
  },
  {
    "text": "that have come out in recent times actually do have three operands which gets over some of these restrictions so",
    "start": "952880",
    "end": "958199"
  },
  {
    "text": "this VP um which we if we have time end if we have time at the end I'll talk about is",
    "start": "958199",
    "end": "965120"
  },
  {
    "text": "a three Opera and this is a more traditional um kind of looking thing where we were saying ym1 is equal to ym2",
    "start": "965120",
    "end": "972680"
  },
  {
    "text": "plus ymm 0 so there are thousands literally",
    "start": "972680",
    "end": "979160"
  },
  {
    "start": "976000",
    "end": "1221000"
  },
  {
    "text": "thousands of instructions in Intel Intel is not known for its um small",
    "start": "979160",
    "end": "985000"
  },
  {
    "text": "instruction set there are many many operations but I'm glad to say the top 20 and not top 20 as in the most",
    "start": "985000",
    "end": "991399"
  },
  {
    "text": "exciting or interesting the top 20 as in I randomly sampled my computer for half an hour and saw what instructions it was",
    "start": "991399",
    "end": "997600"
  },
  {
    "text": "running uh comes up with these instructions so this pretty much will get you everywhere and so there are",
    "start": "997600",
    "end": "1003279"
  },
  {
    "text": "groups of instructions here the first group I'll draw your attention to are these kind of move operations which",
    "start": "1003279",
    "end": "1009360"
  },
  {
    "text": "again are really copy operations so most instructions boil down to moving things around I think you can probably",
    "start": "1009360",
    "end": "1015279"
  },
  {
    "text": "understand that we're shuffling data around so Mau Mo ZX and sxd are all different ways of of copying values the",
    "start": "1015279",
    "end": "1022279"
  },
  {
    "text": "ZX and the SX are s extension and zero extension versions for when we're taking a small value like a 16bit value and",
    "start": "1022279",
    "end": "1028760"
  },
  {
    "text": "then writing it into a 64-bit destination Lea is a funny one it is",
    "start": "1028760",
    "end": "1034880"
  },
  {
    "text": "kind of a move instruction but it kind of isn't we'll go into that in a bit we already talked a little bit about",
    "start": "1034880",
    "end": "1040438"
  },
  {
    "text": "how functions worked so call goes off to a function R comes back from a function jump is just an unconditional movement",
    "start": "1040439",
    "end": "1047319"
  },
  {
    "text": "to another place in the in the code push and pop manage the stack so we have a hardware stack and we can put values",
    "start": "1047319",
    "end": "1053520"
  },
  {
    "text": "onto the stack and we can pull them back off of the stack compare and test are different ways of basically checking to",
    "start": "1053520",
    "end": "1059520"
  },
  {
    "text": "see whether values are the same or different they compare and test very specifically or just slightly different",
    "start": "1059520",
    "end": "1065240"
  },
  {
    "text": "ways of doing the same thing and then they set flags and those flags are",
    "start": "1065240",
    "end": "1070600"
  },
  {
    "text": "essentially another register that just keeps track of the last comparison or the last arithmetic operation and allows",
    "start": "1070600",
    "end": "1077000"
  },
  {
    "text": "us to jump or do other other things based on whether or not certain things were true so for example a comparison",
    "start": "1077000",
    "end": "1083000"
  },
  {
    "text": "leaves the uh a flag set that allows us to jump if equal which is what a je is",
    "start": "1083000",
    "end": "1088200"
  },
  {
    "text": "or a jump if not equal so this is the kind of thing you'll see if you are doing um loops and comparisons and uh",
    "start": "1088200",
    "end": "1095600"
  },
  {
    "text": "you'll see that you'll compare like loop loop counters with the number of",
    "start": "1095600",
    "end": "1100640"
  },
  {
    "text": "iterations and then jumping back to the beginning of the loop if you're not equal to that and you'll notice that to",
    "start": "1100640",
    "end": "1106120"
  },
  {
    "text": "a first approximation all the jumps that happen most common a jump if equal and jump if not equal uh there are of course",
    "start": "1106120",
    "end": "1112400"
  },
  {
    "text": "jump if greater jump if less than jum all the other combinations and permutations of comparisons you could",
    "start": "1112400",
    "end": "1118159"
  },
  {
    "text": "possibly imagine including overflow and stuff but they're very rare compared to the jump of equal and jump of not equal",
    "start": "1118159",
    "end": "1124320"
  },
  {
    "text": "so all of those instructions we've done so far are kind of housekeeping instructions they're not really doing very much the things that are actually",
    "start": "1124320",
    "end": "1131039"
  },
  {
    "text": "doing anything are arithmetic operations so and exclusive or add subtract shift",
    "start": "1131039",
    "end": "1137080"
  },
  {
    "text": "left shift right and shift arithmetic so those are just shifting things around and adding and subtracting you'll notice",
    "start": "1137080",
    "end": "1142679"
  },
  {
    "text": "that in the top 20 there are no multiplies there are no divides there are no square roots there are no nothing so instructions for these things do",
    "start": "1142679",
    "end": "1149559"
  },
  {
    "text": "exist but most of the time you're not going to see them it may be surprising to you that exclusive or is on this list",
    "start": "1149559",
    "end": "1157280"
  },
  {
    "text": "because I don't know about you it's very rare that I use the little carrot thing um to to exclusive or things together I",
    "start": "1157280",
    "end": "1163760"
  },
  {
    "text": "mean very occasionally if I'm writing a hash function then maybe I'll I'll I'll use it but it turn turns out there's a",
    "start": "1163760",
    "end": "1169200"
  },
  {
    "text": "trick that the compiler is using that we'll see along the way as to why exclusive or is so useful and and is",
    "start": "1169200",
    "end": "1174919"
  },
  {
    "text": "useful again it's kind of a way of reducing the size of a 64-bit integer",
    "start": "1174919",
    "end": "1180559"
  },
  {
    "text": "down to 16it without moving using a move for zero extension and sign sign extending so uh and shifting left and",
    "start": "1180559",
    "end": "1187360"
  },
  {
    "text": "shifting right if you remember from um like a binary shift is essentially multiplying by or dividing by powers of",
    "start": "1187360",
    "end": "1194880"
  },
  {
    "text": "two so anything that needs kind of multiply by four or eight 16 something like that you'll see the compiler will",
    "start": "1194880",
    "end": "1200880"
  },
  {
    "text": "be able to use a shift instruction instead so that's why those are so common so the thing to to take home from",
    "start": "1200880",
    "end": "1207159"
  },
  {
    "text": "this is sort of mapping all of this back to my childhood 10 print Mattis call is that the jump and jump of equal jump of",
    "start": "1207159",
    "end": "1213880"
  },
  {
    "text": "not equal they go to instructions right it's go to I'm I'm still doing the same thing I was doing in in Dixons in",
    "start": "1213880",
    "end": "1220320"
  },
  {
    "text": "84 finally we're going to talk a little bit about what those registers are so I kind of waved my hands and came up with",
    "start": "1220320",
    "end": "1225760"
  },
  {
    "start": "1221000",
    "end": "1407000"
  },
  {
    "text": "these funny names for things uh the registers have strange names for the first eight registers RX RBX rcx RDX RSP",
    "start": "1225760",
    "end": "1234799"
  },
  {
    "text": "RBP and so on and then they ran out of funny names um around when they extended the register set and so that the second",
    "start": "1234799",
    "end": "1242600"
  },
  {
    "text": "eight uh sorry the eight through 15 registers of the 16 that we have available are just called R8 through R15",
    "start": "1242600",
    "end": "1250320"
  },
  {
    "text": "those are all 64bit wide integer registers we also have some extended",
    "start": "1250320",
    "end": "1257240"
  },
  {
    "text": "multimedia register that are much wider and can do multiple operations at once",
    "start": "1257240",
    "end": "1263600"
  },
  {
    "text": "those are called uh xmm0 through xmm 15 and depending on the revision of the chip that you're on sometimes you can",
    "start": "1263600",
    "end": "1269799"
  },
  {
    "text": "call those ymm or zmm those get wider with each revision so um if you've seen",
    "start": "1269799",
    "end": "1275080"
  },
  {
    "text": "things like AVX 512 that's been in the news recently excuse me those are using zmm",
    "start": "1275080",
    "end": "1281960"
  },
  {
    "text": "sorry zmm you can tell I've been in America too long uh zmm instruction register names they're essentially the",
    "start": "1281960",
    "end": "1288159"
  },
  {
    "text": "same thing they're not different registers they're just different widths of the same multimedia constructions we'll talk about them a little bit but",
    "start": "1288159",
    "end": "1294440"
  },
  {
    "text": "you don't need to worry about them too much those are also used for floating point so if you have a floating point operand or a floating Point result",
    "start": "1294440",
    "end": "1300720"
  },
  {
    "text": "they'll go into one of those multimedia instruction multimedia registers I'm sorry so the really important thing to",
    "start": "1300720",
    "end": "1307039"
  },
  {
    "text": "remember and pretty much the only thing you need to remember out of this is that the way that functions cooperate with",
    "start": "1307039",
    "end": "1314559"
  },
  {
    "text": "each other is that there is a kind of implied well there's an explicit contract called the ABI and this tells a",
    "start": "1314559",
    "end": "1321679"
  },
  {
    "text": "function where it should expect to receive its parameters which registers",
    "start": "1321679",
    "end": "1327159"
  },
  {
    "text": "it can use as scratch space and which ones it has to preserve and which register it needs to put its result in",
    "start": "1327159",
    "end": "1333360"
  },
  {
    "text": "when it's finished executing so if you're calling a function that takes a single argument that single argument should go in the RDI",
    "start": "1333360",
    "end": "1340919"
  },
  {
    "text": "register and if you've got two arguments the second one goes in RSI and then the third one in RDX and then so on and so",
    "start": "1340919",
    "end": "1346799"
  },
  {
    "text": "forth now this actually varies uh not architecture by architecture but operating system by operating system my",
    "start": "1346799",
    "end": "1354720"
  },
  {
    "text": "experiences are all with Linux so this is the Linux or system five I think it's called ABI um if you're on Windows there",
    "start": "1354720",
    "end": "1362200"
  },
  {
    "text": "are different registers but the principles are the same there's a certain set place where you should go to look for the parameter for um a",
    "start": "1362200",
    "end": "1369279"
  },
  {
    "text": "particular uh argument if you're a function and then when you're finished as a function if you've going to return an integer you should put that result in",
    "start": "1369279",
    "end": "1375840"
  },
  {
    "text": "racks and then the caller will know that that's where they should look for the result of whatever you",
    "start": "1375840",
    "end": "1382159"
  },
  {
    "text": "did so the registers in this instance are Global variables right they're shared between functions imagine if you",
    "start": "1382159",
    "end": "1388559"
  },
  {
    "text": "had to actually write code where in order to pass arguments to a function you had to set some globals and then",
    "start": "1388559",
    "end": "1394840"
  },
  {
    "text": "call the function and then in order to look at the result you have to look at another Global variable I'm sure we've all written code like that somewhere",
    "start": "1394840",
    "end": "1400279"
  },
  {
    "text": "along our lives but we all know that that's horrible so just be thankful that your compiler is doing all of this management behind the scenes for",
    "start": "1400279",
    "end": "1407440"
  },
  {
    "start": "1407000",
    "end": "1511000"
  },
  {
    "text": "you so I kind of lied a little bit about registers I said there were 64-bit and they are but very sort of specifically",
    "start": "1407440",
    "end": "1415279"
  },
  {
    "text": "in x86 land the registers have different names so this is the same physical",
    "start": "1415279",
    "end": "1420720"
  },
  {
    "text": "register the same a register the accumulator register back in old the old days if I say RX I'm talking about all",
    "start": "1420720",
    "end": "1428120"
  },
  {
    "text": "64 bits of that register if I say eax I'm talking about the bottom 32 bits",
    "start": "1428120",
    "end": "1435279"
  },
  {
    "text": "of that register if I say ax I mean the bottom 16 bits and if I say Al I just mean the bottom 8 Bits there's ah as",
    "start": "1435279",
    "end": "1441600"
  },
  {
    "text": "well but so you can see that I can refer to the same register in multiple ways and this is kind of like going back in",
    "start": "1441600",
    "end": "1448320"
  },
  {
    "text": "time through the time machine or the strata of deposits of the years since",
    "start": "1448320",
    "end": "1454159"
  },
  {
    "text": "19703 whenever it was that the 80 uh 88 came out when it was originally just a",
    "start": "1454159",
    "end": "1459720"
  },
  {
    "text": "16bit machine they only had the uh a register and then it got extended then",
    "start": "1459720",
    "end": "1464840"
  },
  {
    "text": "it got extended again then it got extended again and so we we've got these names that changed every time they made the the machine go from 16 bit to 32-bit",
    "start": "1464840",
    "end": "1472640"
  },
  {
    "text": "and then 32-bit to 64bit they had to come up with a new name for the same register but wider and keep the old",
    "start": "1472640",
    "end": "1479159"
  },
  {
    "text": "names so you can kind of see the history here there are some other funny things to do with zeroing and not zeroing I don't think it's too important for you",
    "start": "1479159",
    "end": "1485120"
  },
  {
    "text": "to think about really most of the time you'll see eax and rxs those are the most common things you'll",
    "start": "1485120",
    "end": "1490880"
  },
  {
    "text": "see it's also worth noting that this is true for all of those registers so RDI",
    "start": "1490880",
    "end": "1496679"
  },
  {
    "text": "would also have edx and DX as names again to specify different sizes different flavors of",
    "start": "1496679",
    "end": "1503600"
  },
  {
    "text": "that register different widths of the register all the registers have these names associated with",
    "start": "1503600",
    "end": "1510679"
  },
  {
    "text": "them all right so now we know what a register is and we know what an instruction is doing there's one other",
    "start": "1510679",
    "end": "1517080"
  },
  {
    "start": "1511000",
    "end": "1827000"
  },
  {
    "text": "type of operand that we haven't covered yet so the instructions can take these operands an operand can be a register",
    "start": "1517080",
    "end": "1523760"
  },
  {
    "text": "we've seen that an operand can be a constant we've also seen that and now now this is very much into a kind of",
    "start": "1523760",
    "end": "1531080"
  },
  {
    "text": "specific x86 thing uniquely I think to the x86 almost",
    "start": "1531080",
    "end": "1537520"
  },
  {
    "text": "any operand can be a reference to memory so on many architectures that are",
    "start": "1537520",
    "end": "1545360"
  },
  {
    "text": "simpler than x86 so like arm machines and whatever there are explicit instructions whose only job it is is to",
    "start": "1545360",
    "end": "1551440"
  },
  {
    "text": "read and write from memory you'll see like a load instruction and a store instruction and those are very separate from the rest so if you need to do",
    "start": "1551440",
    "end": "1557840"
  },
  {
    "text": "arithmetic on anything then you have to load the number add to it and then store it back out again that's the kind of",
    "start": "1557840",
    "end": "1563919"
  },
  {
    "text": "float on a non x86 machine on an x86 machine we can make one of those operands of the instruction a memory",
    "start": "1563919",
    "end": "1572000"
  },
  {
    "text": "reference and a memory reference has a size this is how big the value is that we're about to read from memory and it",
    "start": "1572000",
    "end": "1578720"
  },
  {
    "text": "has an address and the address can be just a regular address like an actual number a constant address it can be a",
    "start": "1578720",
    "end": "1584960"
  },
  {
    "text": "register that would mean that we have a register who is holding the address of the object that we're trying to read",
    "start": "1584960",
    "end": "1590360"
  },
  {
    "text": "from that's think of it like a pointer in in C terms we can have a pointer plus",
    "start": "1590360",
    "end": "1597520"
  },
  {
    "text": "a constant offset so this would be a literal constant offset which is this second one down",
    "start": "1597520",
    "end": "1603880"
  },
  {
    "text": "here and then even more complicated we can have a sized reference to a base",
    "start": "1603880",
    "end": "1609960"
  },
  {
    "text": "pointer plus a constant offset plus another register multiplied by 1 2 4 or",
    "start": "1609960",
    "end": "1616880"
  },
  {
    "text": "eight what this is allows us to do is to mean that one of our operands can be the",
    "start": "1616880",
    "end": "1622840"
  },
  {
    "text": "address can be reading from the an a particular element of an array held",
    "start": "1622840",
    "end": "1629360"
  },
  {
    "text": "inside a structure so if we have RDI pointing to the beginning of a structure and that 12",
    "start": "1629360",
    "end": "1635720"
  },
  {
    "text": "we know that 12 bytes into that structure there is a variable length array of say integers then we can read",
    "start": "1635720",
    "end": "1643320"
  },
  {
    "text": "out the RS I it's not the word RS I so element r",
    "start": "1643320",
    "end": "1648960"
  },
  {
    "text": "SI um in a single reference like this where we're taking the base pointer to",
    "start": "1648960",
    "end": "1655080"
  },
  {
    "text": "the structure we're adding 12 because that's where the the the my mythical",
    "start": "1655080",
    "end": "1660720"
  },
  {
    "text": "example where the the array starts and then we're we're getting the RSI times four times four is important because",
    "start": "1660720",
    "end": "1666799"
  },
  {
    "text": "each integer is of course four byes long and then we're reading it into eax and that's pretty",
    "start": "1666799",
    "end": "1672279"
  },
  {
    "text": "powerful but because like I said you can actually put these operands anywhere we",
    "start": "1672279",
    "end": "1677720"
  },
  {
    "text": "could do something more exciting than than a move we could actually add so this second example here is the",
    "start": "1677720",
    "end": "1684480"
  },
  {
    "text": "equivalent to this line of c and that's a single instruction that's pretty impressive right there's a reason why",
    "start": "1684480",
    "end": "1691399"
  },
  {
    "text": "x86 is a s known as a cisk or complicated instruction set machine this is really complicated uh we're doing all",
    "start": "1691399",
    "end": "1698080"
  },
  {
    "text": "this operations and a in a single instruction which really ought to be the most Atomic and you know indivisible",
    "start": "1698080",
    "end": "1703360"
  },
  {
    "text": "unit of work that the computer can do now I have a whole other talk about why that isn't actually true um if you're",
    "start": "1703360",
    "end": "1710080"
  },
  {
    "text": "interested in that I think there's some things on YouTube about it but there is micro operations it's a lot of fun you can chase this Rabbit Hole down a long",
    "start": "1710080",
    "end": "1716760"
  },
  {
    "text": "way but we're today we're just talking about the assembly now it it turns out that the um",
    "start": "1716760",
    "end": "1723000"
  },
  {
    "text": "this calculation that's clearly being done here you think inside the the CPU something is taking RDI adding 12 taking",
    "start": "1723000",
    "end": "1730080"
  },
  {
    "text": "RSI multiplying by four and adding it to that to get an address to hand to like the memory system to go and read from",
    "start": "1730080",
    "end": "1737519"
  },
  {
    "text": "that bit is so useful that we can actually just do the address calculation so this Lea instruction",
    "start": "1737519",
    "end": "1745000"
  },
  {
    "text": "which I pointed out earlier in the block of memory instructions this Lea is a load effective address and this looks",
    "start": "1745000",
    "end": "1752399"
  },
  {
    "text": "like it's reading from memory you'll see it's got the same looking syntax with these square brackets and a reference",
    "start": "1752399",
    "end": "1759799"
  },
  {
    "text": "inside um but instead of reading from this address it just Returns the actual",
    "start": "1759799",
    "end": "1765200"
  },
  {
    "text": "address that was calculated so this is like taking the address of the RSI element in the array pointed to by RDI +",
    "start": "1765200",
    "end": "1773640"
  },
  {
    "text": "12 that turns out to be super useful but not for the reason you might think okay let's do a quick summary",
    "start": "1773640",
    "end": "1781919"
  },
  {
    "text": "registers have funny names often starting with r so RX RBX rcx and the",
    "start": "1781919",
    "end": "1787279"
  },
  {
    "text": "smaller versions are eax ebx ECX parameters on Linux at least come in the",
    "start": "1787279",
    "end": "1792600"
  },
  {
    "text": "first parameter in RDI the second one in RSI and then you look at the big list on Wikipedia to remember where the other",
    "start": "1792600",
    "end": "1798679"
  },
  {
    "text": "ones are the result for integer uh operations if you're returning an integer value needs to go in racks if",
    "start": "1798679",
    "end": "1805200"
  },
  {
    "text": "it's a floating Point you'll put it in xmm zero operations typically have the destination which is itself usually a",
    "start": "1805200",
    "end": "1812240"
  },
  {
    "text": "source as the first operand and the Destin surus operand may be registers or",
    "start": "1812240",
    "end": "1818399"
  },
  {
    "text": "memory or indeed constants all right that's an awful lot of information I'm just looking now at",
    "start": "1818399",
    "end": "1823600"
  },
  {
    "text": "the time to make sure I haven't completely gone too far but promised you",
    "start": "1823600",
    "end": "1828679"
  },
  {
    "start": "1827000",
    "end": "2037000"
  },
  {
    "text": "we're going to put it into practice and hopefully it'll make a lot more sense um in context so if you rewind the clock",
    "start": "1828679",
    "end": "1835559"
  },
  {
    "text": "back I was trying to explain where the uh the inspiration from compiler explorer came and it was from looking at",
    "start": "1835559",
    "end": "1842159"
  },
  {
    "text": "this little snippet of code and we were saying can we just use that uh do we sorry the old code looks like that and",
    "start": "1842159",
    "end": "1849360"
  },
  {
    "text": "we would love to change it to this but can we is that something we can do so",
    "start": "1849360",
    "end": "1854519"
  },
  {
    "text": "which is better will we go to compiler Explorer and we see so I'm going to now throw caution to the wind and go into",
    "start": "1854519",
    "end": "1859960"
  },
  {
    "text": "live demo mode where I'm taking this snippet and control clicking and hoping yay that it opens up and all is well",
    "start": "1859960",
    "end": "1866960"
  },
  {
    "text": "excellent so here we're going to see compiler Explorer kind of live on the",
    "start": "1866960",
    "end": "1872240"
  },
  {
    "text": "left hand side we've got the code and on the right hand side we've got the assembly as I described earlier um",
    "start": "1872240",
    "end": "1877559"
  },
  {
    "text": "you'll also see that something that you couldn't see before was that as I Mouse over these things the corresponding area",
    "start": "1877559",
    "end": "1883600"
  },
  {
    "text": "is also highlighting so as well as being color coded and I apologize if you have issues with if you're color blind this",
    "start": "1883600",
    "end": "1889080"
  },
  {
    "text": "doesn't is not as easy to see we have got some other modes that I can flip into that are more um sensitive to those",
    "start": "1889080",
    "end": "1895120"
  },
  {
    "text": "but you can at least see as I Mouse over these areas it the corresponding Source or corresponding assembly is highlighted",
    "start": "1895120",
    "end": "1903360"
  },
  {
    "text": "and so we can see that 18 lines of assembly are generated uh from this",
    "start": "1903360",
    "end": "1909240"
  },
  {
    "text": "example here and I'm using a particular set of settings which I'm just familiar with um this not a most contemporary C++",
    "start": "1909240",
    "end": "1915200"
  },
  {
    "text": "compiler but what we really want to do is take this code on the left hand side comment out that and then replace it",
    "start": "1915200",
    "end": "1922880"
  },
  {
    "text": "with for auto that's another thing that was new that I didn't show for the value",
    "start": "1922880",
    "end": "1928480"
  },
  {
    "text": "all the values X in V result plus equals X and we let compiler catch up with us",
    "start": "1928480",
    "end": "1935240"
  },
  {
    "text": "and indeed we can see that 14 lines of assembly were produced so 18 is less",
    "start": "1935240",
    "end": "1942480"
  },
  {
    "text": "than 14 right so QED right we're done this is clearly better to use the new",
    "start": "1942480",
    "end": "1947559"
  },
  {
    "text": "way than it is the old way because fewer instructions were generated well again the caveat of you must always measure",
    "start": "1947559",
    "end": "1953440"
  },
  {
    "text": "these things and sometimes you'll be very very surprised about which things are actually faster but spoiler alert it",
    "start": "1953440",
    "end": "1959679"
  },
  {
    "text": "is actually faster with the new fangled way than it is the old fangled way if you can fangle away um anyone who's",
    "start": "1959679",
    "end": "1967399"
  },
  {
    "text": "actually uses C++ in Anger knows that there's also some functional um ways of doing this where I can actually use an",
    "start": "1967399",
    "end": "1974720"
  },
  {
    "text": "algorithm to accumulate which is what this is and I can say v. begin V do v.",
    "start": "1974720",
    "end": "1981159"
  },
  {
    "text": "end zero it's the starting value and if I can actually type under the gun and",
    "start": "1981159",
    "end": "1986360"
  },
  {
    "text": "get rid of all this this is like the the very C+ plusy way to do things and this code is",
    "start": "1986360",
    "end": "1993559"
  },
  {
    "text": "actually identical to the range 4 version that I used there are some even newer things coming down the line but",
    "start": "1993559",
    "end": "1999559"
  },
  {
    "text": "this compiler isn't new enough to show it um I've also got the optimizer turned onto level two and not level three I'll",
    "start": "1999559",
    "end": "2005399"
  },
  {
    "text": "show you why put it on level three it goes crazy in a good way uh loads and",
    "start": "2005399",
    "end": "2011120"
  },
  {
    "text": "loads and loads of cool looking instructions get generated and if we do have time I will go into what that's doing at the end because it is super",
    "start": "2011120",
    "end": "2017480"
  },
  {
    "text": "clever but right now what I'd like to do is walk you through the two different versions of that code to show you how to",
    "start": "2017480",
    "end": "2025840"
  },
  {
    "text": "interpret the assembly code that was generated and moreover that we can develop a pretty strong intuition that",
    "start": "2025840",
    "end": "2031559"
  },
  {
    "text": "the new way is actually better than the old way or at least no worse",
    "start": "2031559",
    "end": "2038799"
  },
  {
    "text": "the first two lines of that um assembly function were identical in both cases",
    "start": "2040200",
    "end": "2045600"
  },
  {
    "text": "they were these Mau RDX and Ma rcx comma qword putter RDI and RDI Plus 8 What's",
    "start": "2045600",
    "end": "2053200"
  },
  {
    "text": "Happening Here is that we are reading the first eight bytes of whatever RDI is pointing at and then the second eight",
    "start": "2053200",
    "end": "2060358"
  },
  {
    "text": "bytes of whatever RDI is pointing out now if you're unfamiliar with C++ or indeed if you haven't stopped to think",
    "start": "2060359",
    "end": "2066158"
  },
  {
    "text": "about this kind of stuff before you might be forgiven for thinking that RDI",
    "start": "2066159",
    "end": "2071440"
  },
  {
    "text": "being the first op uh first argument remember RDI is the where the first argument goes RDI is this V and",
    "start": "2071440",
    "end": "2079878"
  },
  {
    "text": "therefore this should be pointing at a whole bunch of integers seems pretty reasonable right but that's not actually",
    "start": "2079879",
    "end": "2086919"
  },
  {
    "text": "What's Happening Here uh this Ampersand here is a reference it's essentially a pointer behind the scenes so we've got a",
    "start": "2086919",
    "end": "2092800"
  },
  {
    "text": "pointer to the vector of V but the vector of V is not the integers the vector V is something which looks like",
    "start": "2092800",
    "end": "2099359"
  },
  {
    "text": "this it's a small structure which itself contains the pointer to the first",
    "start": "2099359",
    "end": "2104480"
  },
  {
    "text": "element the pointed to the last element and then some housekeeping stuff about how big the ram chunk that this variable",
    "start": "2104480",
    "end": "2110920"
  },
  {
    "text": "length array is in is so what we're doing in these first",
    "start": "2110920",
    "end": "2116800"
  },
  {
    "text": "two instructions here is reading this m start and M finish which is the beginning and the end of the array of",
    "start": "2116800",
    "end": "2126280"
  },
  {
    "text": "integers I've got a picture I was very pleased when I worked out how to do pictures um this is what it looks like",
    "start": "2126280",
    "end": "2133079"
  },
  {
    "text": "we have RDI which is a register it has an address in memory that memory at offset zero are pointed to the beginning",
    "start": "2133079",
    "end": "2140560"
  },
  {
    "text": "that then points on to the first integer and our array references each integer is four byes so you know first in second in",
    "start": "2140560",
    "end": "2147400"
  },
  {
    "text": "third in fourth in blah blah blah so on until you get to the last integer there is a point of which points just beyond",
    "start": "2147400",
    "end": "2152720"
  },
  {
    "text": "the end of the last integer in that array so that's where we know we should stop if we if we start from the first",
    "start": "2152720",
    "end": "2158599"
  },
  {
    "text": "end we keep going until we hit the end and then there's some housekeeping like I said this is usually allocated in a",
    "start": "2158599",
    "end": "2164480"
  },
  {
    "text": "big chunk so that if I want to put another integer in there's no reallocation that needs to happen it can just use this unused capacity right up",
    "start": "2164480",
    "end": "2171520"
  },
  {
    "text": "until it hits the end of the storage but we're not going to talk about that today we're only interested in this first and second pointers here so we're already",
    "start": "2171520",
    "end": "2177640"
  },
  {
    "text": "sort of hopping twice in memory so going back to the the code so",
    "start": "2177640",
    "end": "2184480"
  },
  {
    "start": "2181000",
    "end": "2497000"
  },
  {
    "text": "we've remembered we've got end and begin in rcx and RDX in the traditional side",
    "start": "2184480",
    "end": "2190920"
  },
  {
    "text": "and traditional is like the old Loop based version where I'm counting from zero to size this is the code and then",
    "start": "2190920",
    "end": "2197680"
  },
  {
    "text": "the range based thing the four with the colon the the code looks smaller this is the this is the main source of the",
    "start": "2197680",
    "end": "2204040"
  },
  {
    "text": "differences to again spoiler alert a plenty so let's walk through what's happening on the left hand side so the",
    "start": "2204040",
    "end": "2211160"
  },
  {
    "text": "first thing we're doing here is we're subtracting we're doing rcx minus equals",
    "start": "2211160",
    "end": "2217280"
  },
  {
    "text": "r R DX that is to say that rcx will be the end minus the beginning so if you",
    "start": "2217280",
    "end": "2223480"
  },
  {
    "text": "take the end of something and subtract the beginning of it what you've got is how big how many bites there are between",
    "start": "2223480",
    "end": "2229839"
  },
  {
    "text": "the begin and the end there's a bit of housekeeping just to keep registers clean and then we shift it right by two",
    "start": "2229839",
    "end": "2237760"
  },
  {
    "text": "and so what we've calculated in here on line three is the end minus the",
    "start": "2237760",
    "end": "2243119"
  },
  {
    "text": "beginning divided by four does this sound familiar what might might be happening here oh if I oh sorry I forgot",
    "start": "2243119",
    "end": "2249359"
  },
  {
    "text": "that I've got highlights here darn it um some other things we'll come back to",
    "start": "2249359",
    "end": "2254560"
  },
  {
    "text": "that what we what we've done here is that we've now F found the V do size remember we're counting up to the size",
    "start": "2254560",
    "end": "2261359"
  },
  {
    "text": "of the array in the uh traditional way now if you remember back the picture of",
    "start": "2261359",
    "end": "2266640"
  },
  {
    "text": "the what a vector looks like there was no explicit size stored in the vector we only had a pointed to the beginning and",
    "start": "2266640",
    "end": "2272000"
  },
  {
    "text": "app pointed to the end so every time we're calling size we're asking the compiler to compute finish minus start",
    "start": "2272000",
    "end": "2279880"
  },
  {
    "text": "and in C++ or C even if you're subtracting two pointers the result is",
    "start": "2279880",
    "end": "2285000"
  },
  {
    "text": "in units of how many objects there are between the beginning and the end so we",
    "start": "2285000",
    "end": "2290480"
  },
  {
    "text": "have to divide by the size of an object and the object in this case is an integer so this is what we're doing over here we're calculating what is the",
    "start": "2290480",
    "end": "2298200"
  },
  {
    "text": "size as a result of calculating the size we get to find out whether or not it was equal to zero that's just the side",
    "start": "2298200",
    "end": "2303880"
  },
  {
    "text": "effect of the arithmetic instruction and so on line four we're saying if the size was Zero we're going to jump to L4 L4 is",
    "start": "2303880",
    "end": "2310920"
  },
  {
    "text": "a loop sorry is a label it's at the bottom it's just a return it just says we're done now we finished there's",
    "start": "2310920",
    "end": "2316119"
  },
  {
    "text": "nothing to do otherwise we reconstitute the end pointer by adding the size back",
    "start": "2316119",
    "end": "2323599"
  },
  {
    "text": "to it rather curiously and then we finally we set a result equals to zero",
    "start": "2323599",
    "end": "2328680"
  },
  {
    "text": "so earlier I said um that the zor instruction was very common surprisingly",
    "start": "2328680",
    "end": "2333880"
  },
  {
    "text": "so here we see why if you exclusive order something with itself you always",
    "start": "2333880",
    "end": "2340040"
  },
  {
    "text": "get zero and so the compiler uses zor register with itself as a cute trick",
    "start": "2340040",
    "end": "2347119"
  },
  {
    "text": "that's faster takes up less space there's a whole bunch of reasons why it's better um a way of setting it to",
    "start": "2347119",
    "end": "2353040"
  },
  {
    "text": "zero so you'll see zor eax eax or zor register register as a way of meaning register equals",
    "start": "2353040",
    "end": "2359480"
  },
  {
    "text": "zero so here we've we set up the the the result that we're going to be accumulating into and we've",
    "start": "2359480",
    "end": "2365480"
  },
  {
    "text": "reconstituted the end pointer interesting put a pin in that over on the Range side what we've",
    "start": "2365480",
    "end": "2374680"
  },
  {
    "text": "done is that we've set the result to zero or what will be the result and we've just compared the beginning and",
    "start": "2374680",
    "end": "2380960"
  },
  {
    "text": "the end we haven't done any calculation of the size there's been no determination there been no divide no subtract nothing but if the if the",
    "start": "2380960",
    "end": "2388560"
  },
  {
    "text": "beginning is equal to the end then we go to this L4 Loop sorry I keep saying Loop",
    "start": "2388560",
    "end": "2394359"
  },
  {
    "text": "L4 label sorry L is label not Loop that means that we to check to see if",
    "start": "2394359",
    "end": "2400839"
  },
  {
    "text": "there is no work to do is just a compare and a jump and that's because the way that the",
    "start": "2400839",
    "end": "2407040"
  },
  {
    "text": "Range four was actually defined in the C++ standard is to essentially replace this four in X colon V with a bit of",
    "start": "2407040",
    "end": "2415599"
  },
  {
    "text": "boilerplate code which essentially looks exactly like the assembly code we're writing here we get the beginning we get",
    "start": "2415599",
    "end": "2421560"
  },
  {
    "text": "the end and then we start a for Loop that starts at the beginning and Loops until the loop hits the end",
    "start": "2421560",
    "end": "2427880"
  },
  {
    "text": "and if they're obviously if they're equal to each other there's no iterations of the loop we need to stop and you'll find that compilers typically",
    "start": "2427880",
    "end": "2433200"
  },
  {
    "text": "do this they always put a quick check at the beginning of the loop so that they can skip the loop entirely if there are no iterations that need to be done",
    "start": "2433200",
    "end": "2438960"
  },
  {
    "text": "otherwise it falls into a typical um um sort of dwh looking",
    "start": "2438960",
    "end": "2444800"
  },
  {
    "text": "thing now the interesting thing is that these two approaches are about to converge even though the traditional",
    "start": "2444800",
    "end": "2451440"
  },
  {
    "text": "side has this funny size check it doesn't actually use the size again this",
    "start": "2451440",
    "end": "2457319"
  },
  {
    "text": "Rax register which is another way of saying remember eax but just wider is",
    "start": "2457319",
    "end": "2462520"
  },
  {
    "text": "immediately set to zero so we know that the result is never used again the um the compiler has been able",
    "start": "2462520",
    "end": "2470560"
  },
  {
    "text": "to um it's been sorry the compiler has been unable to get rid of this aspect",
    "start": "2470560",
    "end": "2476079"
  },
  {
    "text": "the size calculation but it has been able to to replace a loop that was",
    "start": "2476079",
    "end": "2481560"
  },
  {
    "text": "counting over the I element where I is incrementing and instead of doing the",
    "start": "2481560",
    "end": "2486599"
  },
  {
    "text": "increment of it's now turned it into a pointer walk such as we're doing in the range case so",
    "start": "2486599",
    "end": "2491640"
  },
  {
    "text": "the compiler has done some clever things in the traditional case but it's not as clever as doing it in the range case",
    "start": "2491640",
    "end": "2497400"
  },
  {
    "text": "hopefully this next step will will make that a little clearer here so by the time we get to this point we have RDX",
    "start": "2497400",
    "end": "2504280"
  },
  {
    "text": "pointing to the first integer we have rcx pointing at one past the last",
    "start": "2504280",
    "end": "2510000"
  },
  {
    "text": "integer we know that rcx and RDX are not the same so we know that there's at least one piece of work to do and we",
    "start": "2510000",
    "end": "2516960"
  },
  {
    "text": "know that eax is has been set to zero and eax if you remember is where the return value is going to go so eax is",
    "start": "2516960",
    "end": "2524560"
  },
  {
    "text": "the perfect place for us to use as our temporary to accumulate into so the first thing our Loop does is",
    "start": "2524560",
    "end": "2532599"
  },
  {
    "text": "it adds into that eax it does eax result plus equals whatever integer RDX is",
    "start": "2532599",
    "end": "2540520"
  },
  {
    "text": "pointing at brilliant and we've done the memory operation and we've done the ad in a single",
    "start": "2540520",
    "end": "2545720"
  },
  {
    "text": "instruction we now need to move RDX forward four byes because we want to look at the next bite next time the next",
    "start": "2545720",
    "end": "2553480"
  },
  {
    "text": "integer next time and then we say is RDX equal to rcx have we reached the end or",
    "start": "2553480",
    "end": "2561119"
  },
  {
    "text": "the element past the end and if we haven't go back to L3 and so our Loop is",
    "start": "2561119",
    "end": "2567480"
  },
  {
    "text": "Tiny it's just an ad of eax with a memory operand it's an add of the loop",
    "start": "2567480",
    "end": "2572760"
  },
  {
    "text": "counter a comparison and a jump and here is where we get the real intuition about what's happened we know",
    "start": "2572760",
    "end": "2579920"
  },
  {
    "text": "that the two versions the one that's walks the uh traditional counting from",
    "start": "2579920",
    "end": "2585640"
  },
  {
    "text": "zero up to size and getting the I element at each time has been transformed into a point of walk it's",
    "start": "2585640",
    "end": "2592720"
  },
  {
    "text": "bite forbite equivalent to what happened to our range for so we now know that the",
    "start": "2592720",
    "end": "2599160"
  },
  {
    "text": "inner loop where we're going to spend all of the time presumably is identical",
    "start": "2599160",
    "end": "2604440"
  },
  {
    "text": "that means that we can be pretty confident in saying that they are at least as as good as each other and then we can kind of look back and say well",
    "start": "2604440",
    "end": "2611359"
  },
  {
    "text": "the setup code for the traditional version was slightly inferior to the",
    "start": "2611359",
    "end": "2616720"
  },
  {
    "text": "setup code of the range for probably doesn't matter in the grand scheme of things the main thing that I was able to",
    "start": "2616720",
    "end": "2622359"
  },
  {
    "text": "do with this information is to go to to the rest of the team and say it actually doesn't matter which way you phrase the",
    "start": "2622359",
    "end": "2628559"
  },
  {
    "text": "code the inner loop will look exactly the same instruction for instruction and we could obviously go and measure it we",
    "start": "2628559",
    "end": "2633760"
  },
  {
    "text": "did but this was the the real intuition that came out of it so yeah we Loop Round And of course then we return when",
    "start": "2633760",
    "end": "2639119"
  },
  {
    "text": "we' finished and we know that the result is already in eax and whoever called us with that would expect to look for the",
    "start": "2639119",
    "end": "2645079"
  },
  {
    "text": "cumulated result in eax all right gosh I'm looking at the time so which approach is best um I",
    "start": "2645079",
    "end": "2652000"
  },
  {
    "text": "think for my money the range for is is considerably better there's an argument that says the stood accumulate version",
    "start": "2652000",
    "end": "2657559"
  },
  {
    "text": "is better still and there's some ranges things coming down the pipelines that'll be even nicer but the main thing is that we've learned how to read enough",
    "start": "2657559",
    "end": "2663960"
  },
  {
    "text": "assembly to be able to make judgments for this kind of Highly specialist",
    "start": "2663960",
    "end": "2669520"
  },
  {
    "text": "um situation now I'd like to share some of",
    "start": "2669520",
    "end": "2674599"
  },
  {
    "text": "the more interesting things that compilers can do that I've learned along the years of of maintaining the site and dealing with uh code Snippets and trying",
    "start": "2674599",
    "end": "2681920"
  },
  {
    "text": "to work out what's going on because if you take away nothing from this talk uh",
    "start": "2681920",
    "end": "2687680"
  },
  {
    "text": "only one thing from this talk is that assembly isn't that scary I hope you found that and if you take away two things it's that you should be a to",
    "start": "2687680",
    "end": "2693920"
  },
  {
    "text": "write code for humans and your teammates and yourself tomorrow that's easy to understand easy to maintain easy to test",
    "start": "2693920",
    "end": "2700800"
  },
  {
    "text": "and rely heavily on the compiler almost always doing the right thing but now you",
    "start": "2700800",
    "end": "2706520"
  },
  {
    "text": "have uh the tools uh to to go and verify that that is actually the case or you can start to develop the tools that to",
    "start": "2706520",
    "end": "2713319"
  },
  {
    "text": "to to verify that that's the case um so multiplication this is my",
    "start": "2713319",
    "end": "2719200"
  },
  {
    "text": "first example uh I'm G check the time okay right yes we are running over so I I",
    "start": "2719200",
    "end": "2726640"
  },
  {
    "text": "will um Michelle you can stop me I'm G at least do one of these and then we can we can go from there just as a thing is",
    "start": "2726640",
    "end": "2732400"
  },
  {
    "text": "that good yes I'm looking at you brilliant golly you see I told you I normally talk fast but I decided that I would slow down so to to make my point",
    "start": "2732400",
    "end": "2739240"
  },
  {
    "text": "and now so multiplication is something we do all the time um this is what it looks like if you just write and multip",
    "start": "2739240",
    "end": "2746040"
  },
  {
    "text": "multiply with two um operands it makes sense right we know that the EDI",
    "start": "2746040",
    "end": "2751319"
  },
  {
    "text": "register will have X and the ESI register will have y there's some shuffling around because we need to get the result in to eax and then we just",
    "start": "2751319",
    "end": "2760319"
  },
  {
    "text": "use this imile instruction and you think well what more could a compiler do and I'm going to give you the super quickest",
    "start": "2760319",
    "end": "2766359"
  },
  {
    "start": "2765000",
    "end": "3187000"
  },
  {
    "text": "version of how multiplication Works inside the chip this is not really how it works but just to give you an appreciation if you've ever sat down and",
    "start": "2766359",
    "end": "2773440"
  },
  {
    "text": "done long multiplication and it's probably been a while since many of you have done doing it in binary is even easier but more long-winded and this is",
    "start": "2773440",
    "end": "2780559"
  },
  {
    "text": "effectively what a multiply instruction has to do so this is a four bit multiply 13 by 5 we take the the left hand um",
    "start": "2780559",
    "end": "2788920"
  },
  {
    "text": "digit of the five and we multiply it it's a one we multiply it by 11 101 we",
    "start": "2788920",
    "end": "2794440"
  },
  {
    "text": "get 13 right because one times anything is 13 brilliant ob one times anything is the anything and we keep walking through",
    "start": "2794440",
    "end": "2800400"
  },
  {
    "text": "each time adding and doing whatever and then we have to totalize all of those subtotals to get the final answer of 65",
    "start": "2800400",
    "end": "2806839"
  },
  {
    "text": "so for a four-bit number we had to do a whole bunch of shifts and ands and then",
    "start": "2806839",
    "end": "2812520"
  },
  {
    "text": "there four ads at the end you know one or three ads this add with this added",
    "start": "2812520",
    "end": "2817800"
  },
  {
    "text": "with this added with this okay to get our answer so you can imagine what a 64-bit multiply looks like something",
    "start": "2817800",
    "end": "2824160"
  },
  {
    "text": "very similar to that but there are 63 ads going on in between so that gives",
    "start": "2824160",
    "end": "2829319"
  },
  {
    "text": "you an idea about why an ad might be considerably slower sorry a multiply might be considerably slower than an",
    "start": "2829319",
    "end": "2836760"
  },
  {
    "text": "ad uh yes and it's a miracle frankly that the Haswell which is a relatively old architecture Now can do a 32-bit",
    "start": "2836760",
    "end": "2843880"
  },
  {
    "text": "multiply in four Cycles it's amazing what they can do divides are even worse",
    "start": "2843880",
    "end": "2849319"
  },
  {
    "text": "if you remember how bad it is to do divides in on long hand the poor poor CPU has to do that too so the compiler",
    "start": "2849319",
    "end": "2855880"
  },
  {
    "text": "is very good at avoiding these things so to do a turbo version of this um If I",
    "start": "2855880",
    "end": "2863559"
  },
  {
    "text": "multiply by two you'll notice there's no multiply on the right hand side if the compiler can Intuit it or infer or is",
    "start": "2863559",
    "end": "2870000"
  },
  {
    "text": "just told that the thing it's multiplying by is a constant then it will go out of its way to reduce the",
    "start": "2870000",
    "end": "2875839"
  },
  {
    "text": "number of M in instructions here it's using an Lea which if you remember is an addressing instruction but the cool",
    "start": "2875839",
    "end": "2882800"
  },
  {
    "text": "thing about Lea is it's essentially just an ad with a few benefits these values",
    "start": "2882800",
    "end": "2888640"
  },
  {
    "text": "here RDI don't have to be Memory locations because we're never going to read from them although the instruction",
    "start": "2888640",
    "end": "2894480"
  },
  {
    "text": "was designed to take addresses of things it's just an adding so RDI plus RDI is",
    "start": "2894480",
    "end": "2900119"
  },
  {
    "text": "me saying is the base pointer of RDI plus oh the offset of RDI and I want to get the address of that please it's not",
    "start": "2900119",
    "end": "2906319"
  },
  {
    "text": "an address but it's an ad so I get an ad of myself which gives me two times what",
    "start": "2906319",
    "end": "2911599"
  },
  {
    "text": "I what I came in with and the result goes into eax which is exactly where it needs to be Hooray and if I play around",
    "start": "2911599",
    "end": "2917960"
  },
  {
    "text": "with powers of two you can see it's starting to use them the thing which allows it to use",
    "start": "2917960",
    "end": "2923960"
  },
  {
    "text": "the multiply by one two four or eight which is clever so it's able to to build",
    "start": "2923960",
    "end": "2930000"
  },
  {
    "text": "um multiplies by quite complicated things so multiply by nine for example is is RDI plus RDI * 8 aray that's you",
    "start": "2930000",
    "end": "2937319"
  },
  {
    "text": "know 1 plus myself X Plus x * 8 is 9x um but it starts to break down a",
    "start": "2937319",
    "end": "2944359"
  },
  {
    "text": "little bit if I use 16 we see it starts to have to use shift instructions because we can't multiply by 16 using",
    "start": "2944359",
    "end": "2949839"
  },
  {
    "text": "leas and if I do something as complicated as 65599 it gives up completely and just says okay I all I'm",
    "start": "2949839",
    "end": "2956559"
  },
  {
    "text": "GNA just use a multip there go back go back um however you can try and trick it",
    "start": "2956559",
    "end": "2965079"
  },
  {
    "text": "and say well I know how to build a multiply myself using shifts and ads um if you do this kind of thing first of",
    "start": "2965079",
    "end": "2970680"
  },
  {
    "text": "all don't this is the kind of thing you'll find in the Doom source code not in your everyday um work but luckily the",
    "start": "2970680",
    "end": "2977920"
  },
  {
    "text": "compiler will save you from yourself because even though I wrote this junk on the left hand side the compiler still",
    "start": "2977920",
    "end": "2983400"
  },
  {
    "text": "knows that what I'm really doing is multiplying by 65599 and that it's faster to use the multiply instruction than it is to all",
    "start": "2983400",
    "end": "2989720"
  },
  {
    "text": "these shifts and ads so I was wrong there was a time if I wind back the uh the targeting here if I tell it to",
    "start": "2989720",
    "end": "2996000"
  },
  {
    "text": "Target like a 86 then it is actually faster to do the shifts and ads but it tells turns out the compiler is still",
    "start": "2996000",
    "end": "3001480"
  },
  {
    "text": "better than me writing the shifts and ads so I should just write time 65599 and be done with",
    "start": "3001480",
    "end": "3007599"
  },
  {
    "text": "it so compilers can do great things with multiplication they can do amazing things if you ever need to know how many",
    "start": "3007599",
    "end": "3013000"
  },
  {
    "text": "set bits there are in um a number which is something that is actually useful to do I'll go straight to the end on this",
    "start": "3013000",
    "end": "3019400"
  },
  {
    "text": "one but um essentially uh modern compilers this is not a modern compiler",
    "start": "3019400",
    "end": "3024880"
  },
  {
    "text": "a modern compiler can take this entire thing which is counting the number of bits that are set in the unsigned integer a and if I actually make it a",
    "start": "3024880",
    "end": "3032000"
  },
  {
    "text": "modern compiler and not the ancient compiler it's on there is a an x86 instruction whose only job it is is to",
    "start": "3032000",
    "end": "3038240"
  },
  {
    "text": "count the number of set bits because in some cases that's really really important to be fast and it's super easy to do in Hardware this is what you do so",
    "start": "3038240",
    "end": "3045799"
  },
  {
    "text": "just think what's going on here I've written an expressive relatively expressive piece of code here which I don't have time to go over and the the",
    "start": "3045799",
    "end": "3052839"
  },
  {
    "text": "compiler has been able to pattern match that whole thing against an instruction which just does that the loop is gone",
    "start": "3052839",
    "end": "3058880"
  },
  {
    "text": "the counters have gone the internal registers have gone it's just done a pop count that's just an amazing thing to",
    "start": "3058880",
    "end": "3064160"
  },
  {
    "text": "have happen uh some clever things happen with multiple ifs if you've got cascading ifs",
    "start": "3064160",
    "end": "3070839"
  },
  {
    "text": "the compiler can turn it into a one bit lookup table one bit per entry lookup",
    "start": "3070839",
    "end": "3076559"
  },
  {
    "text": "table which is super clever I would have never have thought of doing this and the fact that the compiler has got my back and will do this for me and I don't have",
    "start": "3076559",
    "end": "3082200"
  },
  {
    "text": "to think about it means that I can write expressive code and rely on the compiler",
    "start": "3082200",
    "end": "3087319"
  },
  {
    "text": "um and I haven't got time to go through those things um the thing I hinted at at the beginning I'm really not going to have time to go through in any depth at",
    "start": "3087319",
    "end": "3093720"
  },
  {
    "text": "the end here perhaps if there's time for questions at the end or if people have got further questions um we can go into",
    "start": "3093720",
    "end": "3098880"
  },
  {
    "text": "it but effectively if I allow the compiler to run at the full Pelt that it's it really wants to run at it can",
    "start": "3098880",
    "end": "3106040"
  },
  {
    "text": "turn that sum that I started with into the most incredible thing which is",
    "start": "3106040",
    "end": "3111280"
  },
  {
    "text": "summing up eight values per iteration of the loop and it takes one and a half",
    "start": "3111280",
    "end": "3117240"
  },
  {
    "text": "clock cycles for each iteration and I have a cool diagram that shows how that all fits together but it's essentially",
    "start": "3117240",
    "end": "3122440"
  },
  {
    "text": "Rewritten my code to be parallel um not thread parallel but CPU singlethread",
    "start": "3122440",
    "end": "3130000"
  },
  {
    "text": "multi-way simd parallel and it's just amazing that it can do these kinds of things so sorry for taking too long on",
    "start": "3130000",
    "end": "3137160"
  },
  {
    "text": "the the assembly bit I actually cut out some other bits of here as well but um as you can tell this really gets me",
    "start": "3137160",
    "end": "3142799"
  },
  {
    "text": "excited the real thing I want you to go away is that your compiler is super super super smart you should trust it",
    "start": "3142799",
    "end": "3148480"
  },
  {
    "text": "write code for yourself write it to be testable write it to be maintainable write it to be understandable by your",
    "start": "3148480",
    "end": "3154760"
  },
  {
    "text": "teammates by you know future you um let the compiler write those go-tos and",
    "start": "3154760",
    "end": "3159880"
  },
  {
    "text": "those globals for you don't dally in that World um trust it but learn how to",
    "start": "3159880",
    "end": "3165559"
  },
  {
    "text": "verify it and using tools like compiler Explorer there are other things like it that you can go and look at um that's",
    "start": "3165559",
    "end": "3172920"
  },
  {
    "text": "that's all I've got for you and I think that's probably about uh about time so",
    "start": "3172920",
    "end": "3178520"
  },
  {
    "text": "thank you all for having me [Music]",
    "start": "3178520",
    "end": "3188269"
  }
]