[
  {
    "start": "0",
    "end": "209000"
  },
  {
    "text": "thanks thanks very much for the warm welcome",
    "start": "13920",
    "end": "19439"
  },
  {
    "text": "and uh applause to the degree of people who are in the reclined position yeah trying not to let you fall asleep yeah",
    "start": "19439",
    "end": "25439"
  },
  {
    "text": "please feel free you have our permission to move into the recline position if half the audience are not asleep by the",
    "start": "25439",
    "end": "31599"
  },
  {
    "text": "end of the talk we will have failed okay so yeah so uh our talk is a type of script fans",
    "start": "31599",
    "end": "38559"
  },
  {
    "text": "kotlin js adventures so uh my name is evan boyle i'm one half",
    "start": "38559",
    "end": "44079"
  },
  {
    "text": "of the jewel i'm a coach mentor and dev at a small company in belfast called install",
    "start": "44079",
    "end": "50239"
  },
  {
    "text": "this is my boss yes my name is garth gilmore i was a full-time software developer for six or",
    "start": "50239",
    "end": "56239"
  },
  {
    "text": "seven years and i've been a full-time trainer consultant educator anything that keeps my kids fed uh for the past",
    "start": "56239",
    "end": "63280"
  },
  {
    "text": "15 years so uh you know me and garth have very similar tastes",
    "start": "63280",
    "end": "69439"
  },
  {
    "text": "we both really love typescript and the reason why we love typescript is because it solves a problem",
    "start": "69439",
    "end": "76560"
  },
  {
    "text": "typescript is a superset of javascript it brings types and safety and nice id",
    "start": "76560",
    "end": "82000"
  },
  {
    "text": "experience to what is a very popular language and platform javascript",
    "start": "82000",
    "end": "88240"
  },
  {
    "text": "and to our mind it's good engineering it didn't throw the baby out with the bath water",
    "start": "88240",
    "end": "94000"
  },
  {
    "text": "it leverages everything that's there on the javascript platform all of those libraries all of that documentation that",
    "start": "94000",
    "end": "99280"
  },
  {
    "text": "you know over 25 years of work it doesn't throw that away it just augments",
    "start": "99280",
    "end": "104399"
  },
  {
    "text": "it and improves it by adding static types so for us typescript is a good thing",
    "start": "104399",
    "end": "111280"
  },
  {
    "text": "we also love kotlin for a lot of the same reasons there is a problem on the jvm as far as",
    "start": "111280",
    "end": "117520"
  },
  {
    "text": "i'm concerned it's java it's the java part of the jvm and kotlin solves that problem and",
    "start": "117520",
    "end": "124560"
  },
  {
    "text": "it brings modern language features it has null safety it brings us these",
    "start": "124560",
    "end": "130000"
  },
  {
    "text": "dsls we have awesome support of co-routines but again it's really good engineering",
    "start": "130000",
    "end": "136959"
  },
  {
    "text": "it doesn't throw away all of that hard-fought frameworks knowledge documentations",
    "start": "136959",
    "end": "142640"
  },
  {
    "text": "tools the interop with java is a primary design goal in the",
    "start": "142640",
    "end": "147840"
  },
  {
    "text": "same way as interop with javascript was a primary design goal for typescript so as far as we're concerned typescript is",
    "start": "147840",
    "end": "154720"
  },
  {
    "text": "just a better version of javascript kotlin is a better version of java and",
    "start": "154720",
    "end": "160080"
  },
  {
    "text": "when we're on these platforms you know the these are the choices we make we don't",
    "start": "160080",
    "end": "165280"
  },
  {
    "text": "we don't choose to develop in javascript we don't choose to develop in java we always pick the right hand side here",
    "start": "165280",
    "end": "172480"
  },
  {
    "text": "but kotlin is an interesting product because we've now got multi-platform column we can use kotlin for",
    "start": "172480",
    "end": "180080"
  },
  {
    "text": "jvm where it started out it's the de facto choice when we're doing android development um but we now",
    "start": "180080",
    "end": "187280"
  },
  {
    "text": "have these other two platforms we have kotlin native and kotlin js but again in",
    "start": "187280",
    "end": "192879"
  },
  {
    "text": "the jsps we have typescript we love typescript so what we wanted to do was find out you",
    "start": "192879",
    "end": "198000"
  },
  {
    "text": "know is kotlin js worth it is kotlin js something that we would choose to do our",
    "start": "198000",
    "end": "203040"
  },
  {
    "text": "next projects in so how did we decide to do that um we wanted to go a little bit further",
    "start": "203040",
    "end": "209599"
  },
  {
    "start": "209000",
    "end": "612000"
  },
  {
    "text": "than the hello world we wanted to build an app and we wanted to implement the exact same app in typescript on kotlin and",
    "start": "209599",
    "end": "216959"
  },
  {
    "text": "just see what the experience was like and again we're coming from a like a typescript fanboy uh position",
    "start": "216959",
    "end": "224319"
  },
  {
    "text": "so we wanted to build this application compare them bring in common js libraries",
    "start": "224319",
    "end": "230239"
  },
  {
    "text": "you know and and take the build a slightly larger example to see what it was like and we like to keep things fun",
    "start": "230239",
    "end": "236959"
  },
  {
    "text": "uh so we had to sort of do something that was just a little bit different now around the time that we were doing this",
    "start": "236959",
    "end": "242799"
  },
  {
    "text": "we had done a kotlin native workshop and as part of that we had a breakout",
    "start": "242799",
    "end": "247920"
  },
  {
    "text": "clone so we decided to just do another breakout clone this time using webgl and the browser-based system",
    "start": "247920",
    "end": "255040"
  },
  {
    "text": "because this is just a little bit more complex and allows us to sort of exercise collin.js a little bit",
    "start": "255040",
    "end": "260320"
  },
  {
    "text": "uh this is my son playing the game this is a while ago now but this is him",
    "start": "260320",
    "end": "265600"
  },
  {
    "text": "actually playing it and he keeps sort of asking me to throw it up so it's super addictive definitely much better than",
    "start": "265600",
    "end": "272160"
  },
  {
    "text": "minecraft and roblox uh for sure so what do we build it with well again",
    "start": "272160",
    "end": "278880"
  },
  {
    "text": "if you're going to build front end some front end thing in a javascript space react is probably the place to go",
    "start": "278880",
    "end": "285840"
  },
  {
    "text": "like everything in javascript we have tons and tons of options this is one of the bad things about the platform is there's too many options but react is a",
    "start": "285840",
    "end": "292880"
  },
  {
    "text": "pretty sensible choice in terms of state management redux is up there as well although it's popularity",
    "start": "292880",
    "end": "298800"
  },
  {
    "text": "has weaned probably in the last few years but it's still a pretty sensible choice if you're doing complex state on",
    "start": "298800",
    "end": "304479"
  },
  {
    "text": "the client and then we pulled in this other library this react3 fiber and it's",
    "start": "304479",
    "end": "309520"
  },
  {
    "text": "a really interesting library because it allows us to write gl scenes",
    "start": "309520",
    "end": "315039"
  },
  {
    "text": "so webgl scenes using declarative react type syntax so we basically just render",
    "start": "315039",
    "end": "320800"
  },
  {
    "text": "components as we would with anything in react we uh declared a really binding state and",
    "start": "320800",
    "end": "326479"
  },
  {
    "text": "when the state changes the 3d view updates because we're not game developers we're not like",
    "start": "326479",
    "end": "331919"
  },
  {
    "text": "3d experts or anything like that as you can tell from the the very rectal linear",
    "start": "331919",
    "end": "337520"
  },
  {
    "text": "graphics so this sort of platform allows us to quickly get something up and running but also gives us something we're going to",
    "start": "337520",
    "end": "343280"
  },
  {
    "text": "have to import into kotlin.js which is going to be a little bit more complex so how do we get going very good so um",
    "start": "343280",
    "end": "350720"
  },
  {
    "text": "you won't be surprised to hear that support for kotlin js inside intellij is very good indeed so uh we can break it",
    "start": "350720",
    "end": "358160"
  },
  {
    "text": "down three ways so first of all how to kick off the project you know how to get the basic project started uh then how to",
    "start": "358160",
    "end": "365039"
  },
  {
    "text": "manage the project uh using gradle and then how to import the dependencies both",
    "start": "365039",
    "end": "370400"
  },
  {
    "text": "regular ones and through npm so for the first bit here uh this is the wizard that you'll get in intellij of",
    "start": "370400",
    "end": "377520"
  },
  {
    "text": "course we've picked kotlin on the left hand side and then on the right hand side all you need to do is say i'd like",
    "start": "377520",
    "end": "384000"
  },
  {
    "text": "a new react application please note that you've got two other targets there so you could have a a regular",
    "start": "384000",
    "end": "391360"
  },
  {
    "text": "kotlin js application running inside the browser just using the document object",
    "start": "391360",
    "end": "396639"
  },
  {
    "text": "and the window object and so on or you could be doing something server-side you might want to build on top of node.js",
    "start": "396639",
    "end": "403600"
  },
  {
    "text": "you know so those would be the options that you would have there and whatever way you choose to do it",
    "start": "403600",
    "end": "408880"
  },
  {
    "text": "well the configuration is going to be done through a uh a gradle build file and it's going to be using the more uh",
    "start": "408880",
    "end": "415919"
  },
  {
    "text": "the more modern kotlin dsl as opposed to the older groovy one but if you're you",
    "start": "415919",
    "end": "421199"
  },
  {
    "text": "know if you're familiar with the jvm this is going to be very reassuring kotlin is going to be your language",
    "start": "421199",
    "end": "427440"
  },
  {
    "text": "gradle is going to be your build file you know that's uh that's all very familiar to you",
    "start": "427440",
    "end": "432880"
  },
  {
    "text": "and while you're doing any of those you can take advantage of kotlin multi-platform and what this lets us do",
    "start": "432880",
    "end": "439520"
  },
  {
    "text": "is take some common code so for example some entity classes some business logic",
    "start": "439520",
    "end": "444560"
  },
  {
    "text": "something like that and we can compile it for any of the supported platforms so uh let's say we've got some business",
    "start": "444560",
    "end": "450800"
  },
  {
    "text": "logic and we can compile it using the regular jvm compiler to get a jar file",
    "start": "450800",
    "end": "456240"
  },
  {
    "text": "we can compile it through kotlin js to get a bundle uh we can compile it through kotlin native uh to get some",
    "start": "456240",
    "end": "462720"
  },
  {
    "text": "kind of native artifact that we could use on the mac or somewhere else",
    "start": "462720",
    "end": "468160"
  },
  {
    "text": "so this is what it'll look like in your gradle build file so we have the kotlin section there and we're configuring the",
    "start": "468160",
    "end": "474639"
  },
  {
    "text": "kotlin js compiler and you have two options there's the legacy compiler and",
    "start": "474639",
    "end": "479680"
  },
  {
    "text": "then there's the more modern one which compiles to their universal back end ir",
    "start": "479680",
    "end": "484960"
  },
  {
    "text": "as they call it and that's currently in beta last i checked but they're very",
    "start": "484960",
    "end": "490240"
  },
  {
    "text": "serious about making that the the official version you know so if you were starting from scratch you'd say i start",
    "start": "490240",
    "end": "496240"
  },
  {
    "text": "with the uh the new compiler by default and then these are some of the targets",
    "start": "496240",
    "end": "501360"
  },
  {
    "text": "that you'll get through the build file the most important one if you're messing around is browser development run so",
    "start": "501360",
    "end": "507440"
  },
  {
    "text": "whenever you you execute that target it's the same as doing normal react development uh your ui will launch in",
    "start": "507440",
    "end": "514159"
  },
  {
    "text": "the browser uh you make a change you save it and then that change will get reflected in the browser so you're in a",
    "start": "514159",
    "end": "520399"
  },
  {
    "text": "you're in a fast feedback loop you can rapidly build out the the ui",
    "start": "520399",
    "end": "525839"
  },
  {
    "text": "um and then this here is how you can bring in your dependencies so in the standard way just with the the",
    "start": "525839",
    "end": "531600"
  },
  {
    "text": "implementation function there you can build in kotlin js wrappers to existing",
    "start": "531600",
    "end": "537120"
  },
  {
    "text": "libraries like the dom ones there you can bring in multi-platform libraries we're bringing in the the ktor",
    "start": "537120",
    "end": "543600"
  },
  {
    "text": "client there and you can see down the bottom if we have regular javascript libraries that we want to bring in",
    "start": "543600",
    "end": "549680"
  },
  {
    "text": "through npm uh like ludash or or something like that then it's really straightforward to do it you know so it",
    "start": "549680",
    "end": "557040"
  },
  {
    "text": "it is very very easy to uh to get started and then this is the kickoff pretty much",
    "start": "557040",
    "end": "562720"
  },
  {
    "text": "what you do in a normal react application so you can see there we've got easy access to the standard browser",
    "start": "562720",
    "end": "569040"
  },
  {
    "text": "apis although they did change the package name okay so there's a a little tweak there to uh to watch out for but",
    "start": "569040",
    "end": "576480"
  },
  {
    "text": "otherwise we've got the the document object there we can just say get element by id to get the bit of the page where",
    "start": "576480",
    "end": "582720"
  },
  {
    "text": "we want to insert our react ui and then here we're using the browser router",
    "start": "582720",
    "end": "588560"
  },
  {
    "text": "which is just a very thin kotlin layer around the standard react router",
    "start": "588560",
    "end": "593920"
  },
  {
    "text": "and then if you look all of this up in the dock in the built-in documentation well the documentation is very clear",
    "start": "593920",
    "end": "600880"
  },
  {
    "text": "about pointing out which functions and which types and so on are available in which variant of kotlin so you've got",
    "start": "600880",
    "end": "607279"
  },
  {
    "text": "the wii uh breadcrumbs there for uh for common js and native",
    "start": "607279",
    "end": "612800"
  },
  {
    "start": "612000",
    "end": "861000"
  },
  {
    "text": "cool yep so um you know we're doing this as an experiment to",
    "start": "612800",
    "end": "618240"
  },
  {
    "text": "compare the two so we've got a couple of different comparison categories that we're going to look at the first one is community um",
    "start": "618240",
    "end": "625519"
  },
  {
    "text": "so kotlin popularity has continued to grow over the years um there's lots of different",
    "start": "625519",
    "end": "631839"
  },
  {
    "text": "metrics for measuring a language's popularity you have to take them all with a with a pinch of salt they're not",
    "start": "631839",
    "end": "637440"
  },
  {
    "text": "true science but they're they give us some sort of they give us some sort of measurement of a language's popularity",
    "start": "637440",
    "end": "643040"
  },
  {
    "text": "so this is the red monk um from this year and it has kotlin at number 18 and",
    "start": "643040",
    "end": "648320"
  },
  {
    "text": "as i say you know it's a very young language but it is sort of popularity has grown very very quickly um if we",
    "start": "648320",
    "end": "654079"
  },
  {
    "text": "look at another uh measurement this is the stack overflow and this is the most used language and",
    "start": "654079",
    "end": "659839"
  },
  {
    "text": "we can see that kotlin's number 13 there and so you know it is a super popular language um",
    "start": "659839",
    "end": "666320"
  },
  {
    "text": "the reason why we might need kotlin js is because javascript's number one javascript on a lot of language metrics",
    "start": "666320",
    "end": "673120"
  },
  {
    "text": "is the most popular language and the most utilized over 13 million developers i think something like that using",
    "start": "673120",
    "end": "679360"
  },
  {
    "text": "javascript and it you know it is a very popular language by any measurement um",
    "start": "679360",
    "end": "685680"
  },
  {
    "text": "interestingly in here we also have typescript so typescript has also gained in popularity over the",
    "start": "685680",
    "end": "691760"
  },
  {
    "text": "years and we see it getting used more and more and certainly in our business we're seeing more and more clients want",
    "start": "691760",
    "end": "698240"
  },
  {
    "text": "typescript for everything from cdk to serverless functions to just building react apps and other kinds of",
    "start": "698240",
    "end": "704880"
  },
  {
    "text": "systems if we look at the the most loved language so these are languages that people use",
    "start": "704880",
    "end": "711040"
  },
  {
    "text": "and they just they think oh this is awesome colin does much better here it's at number four and this is not really",
    "start": "711040",
    "end": "716560"
  },
  {
    "text": "surprising to to me because again i'm not a java fan and to me kotlin just",
    "start": "716560",
    "end": "722800"
  },
  {
    "text": "really solves a problem so if you're if you're used to java and you landed kotlin you're like oh my god this is",
    "start": "722800",
    "end": "727920"
  },
  {
    "text": "heaven this is so good so of course it people are going to be passionate about it um javascript not so much a lot of",
    "start": "727920",
    "end": "734959"
  },
  {
    "text": "people end up writing javascript because they have to um if you're going to be doing something",
    "start": "734959",
    "end": "740639"
  },
  {
    "text": "for the browser you may have to do it if you're doing serverless applications you may have to do it you may be coming to a company",
    "start": "740639",
    "end": "746959"
  },
  {
    "text": "where you know because it is so popular javascript is their language but you might necessarily like it if like me and",
    "start": "746959",
    "end": "753040"
  },
  {
    "text": "garth you're coming from a statically type background and you like that error check and the static analysis the ide experience",
    "start": "753040",
    "end": "759600"
  },
  {
    "text": "but typescript is also beloved and again like kotlin the reason why you might",
    "start": "759600",
    "end": "765839"
  },
  {
    "text": "like it is because you're coming from java and you find oh kotlin frees me up to be to write much nicer code the same",
    "start": "765839",
    "end": "771760"
  },
  {
    "text": "thing with typescript coming from javascript so typescript is actually uh super popular as well interestingly",
    "start": "771760",
    "end": "778000"
  },
  {
    "text": "number one is rust not this talk that's a that's a different topic but once again xslt",
    "start": "778000",
    "end": "783920"
  },
  {
    "text": "cruelly neglected but that does not make me happy yes um we're not doing that talk",
    "start": "783920",
    "end": "791200"
  },
  {
    "text": "uh and typescript you know when people try it it's not i don't think that it's a flash in the pan um",
    "start": "791200",
    "end": "797680"
  },
  {
    "text": "people who try typescript they really love it they would definitely use it again and so once you get that sort of",
    "start": "797680",
    "end": "803040"
  },
  {
    "text": "bug and you stick with it which is the same with kotlin to be fair but if we think about the community",
    "start": "803040",
    "end": "809120"
  },
  {
    "text": "typescript probably has to win this one over over kotlin and it's more popular",
    "start": "809120",
    "end": "815279"
  },
  {
    "text": "because it's a superset of javascript all of that knowledge from javascript is",
    "start": "815279",
    "end": "821199"
  },
  {
    "text": "readily consumable readily uh usable um you go on stack overflow you find an",
    "start": "821199",
    "end": "826720"
  },
  {
    "text": "answer in javascript that's also the answer for typescript so although this is tight because kotlin is",
    "start": "826720",
    "end": "833839"
  },
  {
    "text": "is also very loved and also very popular typescript has to win this one and at",
    "start": "833839",
    "end": "839199"
  },
  {
    "text": "this stage it's very established very stable there's lots of wrappers for",
    "start": "839199",
    "end": "844240"
  },
  {
    "text": "most of the standard javascript libraries that you would do a lot of the language features have",
    "start": "844240",
    "end": "849600"
  },
  {
    "text": "evolved to support the kinds of things that we do in javascript as we'll see later on so yeah typescript probably",
    "start": "849600",
    "end": "856000"
  },
  {
    "text": "runs wins this round but kotlin's doing doing a good show uh what's the interop like with",
    "start": "856000",
    "end": "862480"
  },
  {
    "start": "861000",
    "end": "1066000"
  },
  {
    "text": "javascript so as garth showed earlier we have these gradle files so it's very very easy to import them we just add",
    "start": "862480",
    "end": "868480"
  },
  {
    "text": "lines very similar to what we would do in our package.json so super easy to bring in any npm package but that just",
    "start": "868480",
    "end": "875279"
  },
  {
    "text": "brings it into the build system how do we actually consume it from kotlin also incredibly easy and because kotlin",
    "start": "875279",
    "end": "881680"
  },
  {
    "text": "is multi-platform we have these external declarations that we can do so we can have any functions that we want and we",
    "start": "881680",
    "end": "887760"
  },
  {
    "text": "can say this exists somewhere else so we can like a declaration file and typescript we can have a type cf wrapper",
    "start": "887760",
    "end": "893600"
  },
  {
    "text": "around some existing code so it's super easy to bring in anything from the javascript system",
    "start": "893600",
    "end": "899519"
  },
  {
    "text": "there's also an automatic generation tool called ducat",
    "start": "899519",
    "end": "904399"
  },
  {
    "text": "it has some limitations it's on hold as they're stabilizing the the ir compiler that garth mentioned",
    "start": "904720",
    "end": "911920"
  },
  {
    "text": "so it does have limitations but this tool can get you some of the way there by automatically taking typescript",
    "start": "911920",
    "end": "917600"
  },
  {
    "text": "declaration files and converting them to our kotlin declaration files so we can",
    "start": "917600",
    "end": "923120"
  },
  {
    "text": "install it just through npm but once we point it at a typescript declaration file so something like this then it",
    "start": "923120",
    "end": "929440"
  },
  {
    "text": "spits out the the kotlin variant of it so it gives us a helping hand but you",
    "start": "929440",
    "end": "935120"
  },
  {
    "text": "know once we start using it and we start having a bit more complex apis we start to see gaps in what it does so here we",
    "start": "935120",
    "end": "942399"
  },
  {
    "text": "have something that is read-only in typescript but whenever it comes into kotlin it's marked as var so there are",
    "start": "942399",
    "end": "949440"
  },
  {
    "text": "going to be some differences there's going to be some limitations which we'll look at um in detail a bit later on and",
    "start": "949440",
    "end": "955600"
  },
  {
    "text": "you know it just it it gets us part of the way there but we're going to end up writing things manually ourselves but as",
    "start": "955600",
    "end": "962720"
  },
  {
    "text": "i said the the external declaration files are very easy to write there's some addition to the language as well",
    "start": "962720",
    "end": "968399"
  },
  {
    "text": "to support the kinds of things we do in javascript so we have a dynamic type that we can use to patch over things so",
    "start": "968399",
    "end": "975680"
  },
  {
    "text": "if we don't want to strongly type something but we just want to get it into the system and get it working we can use the the dynamic type here and",
    "start": "975680",
    "end": "982720"
  },
  {
    "text": "that's it's very similar to the any type in typescript in that it drops us down to no type checking drops us down into",
    "start": "982720",
    "end": "989199"
  },
  {
    "text": "something very akin to javascript um so very similar to the any type and",
    "start": "989199",
    "end": "994839"
  },
  {
    "text": "typescript we also can create objects which is this is the kind of thing that we do when we're writing typescript and",
    "start": "994839",
    "end": "1000000"
  },
  {
    "text": "writing javascript so we can create objects but again this will all be uh strongly and statically typed it will",
    "start": "1000000",
    "end": "1006079"
  },
  {
    "text": "infer the type that's required and so this is sort of quite a nice construct and if we really need to we can drop",
    "start": "1006079",
    "end": "1012959"
  },
  {
    "text": "down and actually embed some javascript but this is like this is a last resort that we can do here uh so if we have",
    "start": "1012959",
    "end": "1020000"
  },
  {
    "text": "some constant strings we can actually embed some javascript but we're going to try and stay in kotlin land as much as",
    "start": "1020000",
    "end": "1026000"
  },
  {
    "text": "we can yep so if we think about the interop you know i",
    "start": "1026000",
    "end": "1031360"
  },
  {
    "text": "didn't really cover anything in typescript because typescript is a superset of javascript you can take the",
    "start": "1031360",
    "end": "1037038"
  },
  {
    "text": "typescript compiler and you can throw it at pure javascript and you know it's just a good static analysis engine so",
    "start": "1037039",
    "end": "1044000"
  },
  {
    "text": "typescript sort of has to win this one it you know it is javascript so the interrupt is pretty good",
    "start": "1044000",
    "end": "1050559"
  },
  {
    "text": "it's also well established as we talked about but kotlin's giving a good show here we've got the dynamic we've got js",
    "start": "1050559",
    "end": "1056400"
  },
  {
    "text": "object we've got js we've got ducat to help us get those external files started",
    "start": "1056400",
    "end": "1061760"
  },
  {
    "text": "it's putting up a good fight but typescript's got an unfair advantage i would say at this stage yeah",
    "start": "1061760",
    "end": "1067760"
  },
  {
    "start": "1066000",
    "end": "1774000"
  },
  {
    "text": "cool so uh if we just think now about how we'd create the user interface itself so",
    "start": "1067760",
    "end": "1073919"
  },
  {
    "text": "uh in react you've got jsx so jsx lets you take html markup and embed it",
    "start": "1073919",
    "end": "1080400"
  },
  {
    "text": "directly inside your javascript and vice versa and that's really easy to use so if you've done react you'll know",
    "start": "1080400",
    "end": "1086640"
  },
  {
    "text": "especially if you're doing functional components you can get a component up and running in a few lines of code just",
    "start": "1086640",
    "end": "1092320"
  },
  {
    "text": "with a simple function declaration or an arrow declaration uh with some jsx",
    "start": "1092320",
    "end": "1097760"
  },
  {
    "text": "inside it it's very very easy to do um what you have in kotlin js instead is",
    "start": "1097760",
    "end": "1103679"
  },
  {
    "text": "you have a kotlin dsl so this is an example here and just from looking at it",
    "start": "1103679",
    "end": "1108880"
  },
  {
    "text": "you know you can immediately see what's going on uh you can see which html elements are being created there are a",
    "start": "1108880",
    "end": "1115360"
  },
  {
    "text": "few things that are a little bit strange but you know after a couple of hours of playing with it uh you can find your way",
    "start": "1115360",
    "end": "1121039"
  },
  {
    "text": "through you know it's very straightforward and you have to give credit to kotlin kotlin was designed to",
    "start": "1121039",
    "end": "1126880"
  },
  {
    "text": "be a language that was easy to create dsls in there's a dsl for everything and",
    "start": "1126880",
    "end": "1132000"
  },
  {
    "text": "even if you're not creating a dsl um if you've done one or two it kind of moves",
    "start": "1132000",
    "end": "1137360"
  },
  {
    "text": "your coding style to a more fluent uh declarative way of doing things you know",
    "start": "1137360",
    "end": "1142880"
  },
  {
    "text": "so the the kotlin support for dsls definitely a huge plus one in its favor",
    "start": "1142880",
    "end": "1149679"
  },
  {
    "text": "so this is kind of how it works here uh what we've got is an extension function so we've got the type r builder and",
    "start": "1149679",
    "end": "1155919"
  },
  {
    "text": "we're going to add an extension function for creating divs you know logically enough called div yeah and the the first",
    "start": "1155919",
    "end": "1163360"
  },
  {
    "text": "parameter there is going to be a string and that that's going to be the names of the css classes that we wish to",
    "start": "1163360",
    "end": "1170000"
  },
  {
    "text": "associate with the div but we're going to make that optional you know we're going to give it a a default value of no",
    "start": "1170000",
    "end": "1176640"
  },
  {
    "text": "and then it's the second parameter here where all the fun is so uh this is a kind of right of passage whenever you",
    "start": "1176640",
    "end": "1183440"
  },
  {
    "text": "learn kotlin you know every new programming language has one strange thing in it you know and once you've",
    "start": "1183440",
    "end": "1189520"
  },
  {
    "text": "learned that strange thing we can stamp trained in your forehead you know you're you're not a kotlin developer or a scala",
    "start": "1189520",
    "end": "1195600"
  },
  {
    "text": "developer or a c developer or whatever you know scott scala has 10 strange things though that you have",
    "start": "1195600",
    "end": "1201120"
  },
  {
    "text": "yeah it's not that talk so yeah so uh in kotlin uh what you've",
    "start": "1201120",
    "end": "1208240"
  },
  {
    "text": "got is a uh a lambda with receiver okay so what we're saying here is that this thing called block yeah it's a a",
    "start": "1208240",
    "end": "1215919"
  },
  {
    "text": "reference to a function or lambda that takes nothing and returns nothing but inside that lambda if you use this",
    "start": "1215919",
    "end": "1223679"
  },
  {
    "text": "uh this will refer to an r dom builder of div okay so having declared this",
    "start": "1223679",
    "end": "1229200"
  },
  {
    "text": "function up at the top uh we could call it down here at the bottom so we would just say div brace brace and the brace",
    "start": "1229200",
    "end": "1236159"
  },
  {
    "text": "brace bit is the lambda and inside there this will refer to an r dome builder so",
    "start": "1236159",
    "end": "1241919"
  },
  {
    "text": "that's the uh that's the receiver bet that makes it a lambda with receiver and uh that's the uh the secret sauce that",
    "start": "1241919",
    "end": "1248799"
  },
  {
    "text": "makes it really easy to create dsls in kotlin so uh you know uh dsl support in kotlin",
    "start": "1248799",
    "end": "1256159"
  },
  {
    "text": "very very good uh the uh the dsl that's the equivalent of jsx very impressive",
    "start": "1256159",
    "end": "1262559"
  },
  {
    "text": "however you know uh the dsl mechanism is a general purpose mechanism you know it",
    "start": "1262559",
    "end": "1268480"
  },
  {
    "text": "can go only so far so certain bits are cumbersome so let's uh let's look at this again and let's nitpick you know",
    "start": "1268480",
    "end": "1275200"
  },
  {
    "text": "let's uh point out the awkward things okay so awkward things number one uh you",
    "start": "1275200",
    "end": "1280640"
  },
  {
    "text": "say atters bracebrace and then inside there that's where all the uh the html",
    "start": "1280640",
    "end": "1286320"
  },
  {
    "text": "attributes would go so that just ends up being a big bucket you know for your attribute values i i'm not a fan of that",
    "start": "1286320",
    "end": "1293760"
  },
  {
    "text": "i can't think of a better way to do it but i i still find it awkward to use uh and then whenever we want to say that",
    "start": "1293760",
    "end": "1300720"
  },
  {
    "text": "some text is the content of an element well we have to use plus okay so uh we",
    "start": "1300720",
    "end": "1306559"
  },
  {
    "text": "say h2 brace brace to create a level two header but we can't just put text inside",
    "start": "1306559",
    "end": "1311919"
  },
  {
    "text": "there we have to put a plus in front of the text and what we're doing there is we're overloading the unary plus",
    "start": "1311919",
    "end": "1318640"
  },
  {
    "text": "operator yeah so that's a that's a hint inside the dsl to tell it that this is the text for the h2 so if if we left out",
    "start": "1318640",
    "end": "1326559"
  },
  {
    "text": "that plus you would get an empty h2 you know so that's a another common mistake that people make",
    "start": "1326559",
    "end": "1332640"
  },
  {
    "text": "uh you have to remember to write extension functions yeah so for your your own markup your your own types and",
    "start": "1332640",
    "end": "1338400"
  },
  {
    "text": "so on uh you have to write those extension functions and again that's just a a little bit of a pain yeah",
    "start": "1338400",
    "end": "1344559"
  },
  {
    "text": "and then uh whenever you're giving attribute values they have to be given as strings okay so uh you can't give it",
    "start": "1344559",
    "end": "1351360"
  },
  {
    "text": "as a number or a string yeah and that's because at kotlin at present uh lacks",
    "start": "1351360",
    "end": "1357360"
  },
  {
    "text": "something which is my favorite feature of typescript which uh eamonn will talk about yep",
    "start": "1357360",
    "end": "1362720"
  },
  {
    "text": "so one of the things that typescript does as well as bring sort of simple static types to javascript it also goes",
    "start": "1362720",
    "end": "1369200"
  },
  {
    "text": "further and has some quite advanced features on its type system one of them being the union types very quickly when",
    "start": "1369200",
    "end": "1374799"
  },
  {
    "text": "you get in the typescript you're going to encounter union types so here we can see that min",
    "start": "1374799",
    "end": "1380720"
  },
  {
    "text": "and max have the type number or string this is not a unique feature to type",
    "start": "1380720",
    "end": "1386480"
  },
  {
    "text": "script um but certainly it's it's probably the language that's bringing this to",
    "start": "1386480",
    "end": "1392480"
  },
  {
    "text": "you know a very popular uh platform um and really typescript had to do this because",
    "start": "1392480",
    "end": "1398559"
  },
  {
    "text": "typescript is living in a world of javascript and in javascript developers aren't seeing and we have",
    "start": "1398559",
    "end": "1405840"
  },
  {
    "text": "you know functions and properties that behave differently depending on the flow so we could have a property which might",
    "start": "1405840",
    "end": "1412000"
  },
  {
    "text": "be a number in one scenario but then it also might be a string we might have a function which returns one type but then",
    "start": "1412000",
    "end": "1418159"
  },
  {
    "text": "in a different world it also returns a different type so typescript has to really if it wants",
    "start": "1418159",
    "end": "1424000"
  },
  {
    "text": "to bring static types to this world it has to have a way of representing it and it's copied this from other sort of ml",
    "start": "1424000",
    "end": "1430080"
  },
  {
    "text": "style languages and you can see that the the value type there is string or number or a read-only array of string so",
    "start": "1430080",
    "end": "1437760"
  },
  {
    "text": "typescript has this advanced type capability that is not directly translatable to column okay it",
    "start": "1437760",
    "end": "1445200"
  },
  {
    "text": "has other things such as type intersections this is where we're creating a new type which is the merger",
    "start": "1445200",
    "end": "1450799"
  },
  {
    "text": "of two types so this type here is the type p and an optional for an optional",
    "start": "1450799",
    "end": "1456960"
  },
  {
    "text": "property again here we have a type where you have optional fields why because that sort of stuff happens in",
    "start": "1456960",
    "end": "1462720"
  },
  {
    "text": "javascript api so we we need a way to represent it but once you get used to these features you actually then start",
    "start": "1462720",
    "end": "1468159"
  },
  {
    "text": "to miss them when you go to other languages so if we take a look at what the cat would do in these scenarios we start to",
    "start": "1468159",
    "end": "1474000"
  },
  {
    "text": "see some limitations of the tool and limitations in terms of direct translation so here we've got a union",
    "start": "1474000",
    "end": "1479679"
  },
  {
    "text": "type which is a first or second and we have a function which takes one of these",
    "start": "1479679",
    "end": "1485840"
  },
  {
    "text": "as an input and a function which returns one of these so for the input it's actually the story is pretty good we can",
    "start": "1485840",
    "end": "1492320"
  },
  {
    "text": "just create overloads so if we're saying that the type is first or second well let's just create",
    "start": "1492320",
    "end": "1498159"
  },
  {
    "text": "two functions one that takes first and one to take second and the tool will do this if you have multiple parameters",
    "start": "1498159",
    "end": "1503279"
  },
  {
    "text": "with larger unions and it will basically spit out every permutation every uh",
    "start": "1503279",
    "end": "1508320"
  },
  {
    "text": "overload permutation so that story's not too bad the return is not quite as good here it",
    "start": "1508320",
    "end": "1515200"
  },
  {
    "text": "just gives up and it returns dynamic so because we can return multiple types with no common uh abstraction",
    "start": "1515200",
    "end": "1522880"
  },
  {
    "text": "then we simply say this dynamic and it's up to the caller to uh to do a cast to convert the type that we want so this is",
    "start": "1522880",
    "end": "1530080"
  },
  {
    "text": "sort of a starting to see the limitations here um with the intersection which is the merger of two",
    "start": "1530080",
    "end": "1535840"
  },
  {
    "text": "types um the story is then a little bit worse here because here we've got our function that takes this merge type as",
    "start": "1535840",
    "end": "1542240"
  },
  {
    "text": "an input and as return and what it does is it just gives up and it just picks the first type so in the",
    "start": "1542240",
    "end": "1548400"
  },
  {
    "text": "kotlin generated versions we just have first instead of first and second so we're losing the type definition of that",
    "start": "1548400",
    "end": "1555200"
  },
  {
    "text": "second interface so yeah this is starting to uh starting to see holes and i'm not even going to",
    "start": "1555200",
    "end": "1561360"
  },
  {
    "text": "show you examples where we do more complicated things that we can do in typescript and typescript we can create",
    "start": "1561360",
    "end": "1566559"
  },
  {
    "text": "things called map types where we are creating types where we iterate over the fields we define the shape of the object",
    "start": "1566559",
    "end": "1573679"
  },
  {
    "text": "programmatically we can create types from other types and we can have conditional types where we basically can",
    "start": "1573679",
    "end": "1580320"
  },
  {
    "text": "choose between types based on some type checking information this is all happening at compile time we can do type",
    "start": "1580320",
    "end": "1586640"
  },
  {
    "text": "inference with generics this stuff looks really really complicated these will be the hardest",
    "start": "1586640",
    "end": "1591760"
  },
  {
    "text": "three lines of code that you'll write but it cuts out so much redundancy in your code and if you put these in your",
    "start": "1591760",
    "end": "1597840"
  },
  {
    "text": "apis your apis be safe so even if you don't write this stuff yourself when you're using typescript when you're consuming apis that are written like",
    "start": "1597840",
    "end": "1604080"
  },
  {
    "text": "this you don't have to do any of the types but you still have all of the error checking you still have you know really",
    "start": "1604080",
    "end": "1609600"
  },
  {
    "text": "good ide experience so this stuff is really powerful and quite addictive once you once you've had it you're sort of",
    "start": "1609600",
    "end": "1615039"
  },
  {
    "text": "spoiled and you want it in all the languages so you know it's it's not really the cat's",
    "start": "1615039",
    "end": "1620640"
  },
  {
    "text": "fault it's not really kotlin's fault it's just that the language are slightly incompatible in some areas and they both",
    "start": "1620640",
    "end": "1627360"
  },
  {
    "text": "can be used again it's not that you wouldn't be able to solve the same problems",
    "start": "1627360",
    "end": "1632799"
  },
  {
    "text": "you would be able to solve the same problems but you might just do it in a slightly different way so you might have to write your own manual wrapper so here",
    "start": "1632799",
    "end": "1639440"
  },
  {
    "text": "for example this is in the standard react library so this is the use effect the use effect function",
    "start": "1639440",
    "end": "1645600"
  },
  {
    "text": "in typescript can take as a parameter a function which either returns nothing so is void",
    "start": "1645600",
    "end": "1652000"
  },
  {
    "text": "or returns another function to do the clean up of the use effect the way that",
    "start": "1652000",
    "end": "1657039"
  },
  {
    "text": "this is wrapped up is we have two functions so you have use effect which takes a function which returns nothing",
    "start": "1657039",
    "end": "1664240"
  },
  {
    "text": "and use effect with cleanup which takes a function which returns your cleanup function so",
    "start": "1664240",
    "end": "1669360"
  },
  {
    "text": "you know there'll always be you know people are still being productive in kotlin people are still being productive in in c you know these languages have",
    "start": "1669360",
    "end": "1676000"
  },
  {
    "text": "different capabilities you'll still be able to solve the same problems but you might just go around and do it a different way okay but it does mean that",
    "start": "1676000",
    "end": "1682640"
  },
  {
    "text": "if you are coming from a language which requires these capabilities like say for example javascript something that's",
    "start": "1682640",
    "end": "1688159"
  },
  {
    "text": "dynamic and you want to use the declaration files from say something like typescript then this just creates a",
    "start": "1688159",
    "end": "1693279"
  },
  {
    "text": "little bit of friction when you're doing this so if we're sort of comparing jsx",
    "start": "1693279",
    "end": "1698960"
  },
  {
    "text": "versus the the dsl for react and we're really just thinking about react specifically here the jsx i think has to",
    "start": "1698960",
    "end": "1705200"
  },
  {
    "text": "win jsx is a for for html development it's a",
    "start": "1705200",
    "end": "1711039"
  },
  {
    "text": "purpose-built dsl it's perfect for for doing it's not perfect but it's it's pretty good for doing html we can take",
    "start": "1711039",
    "end": "1718159"
  },
  {
    "text": "html assets from designers and we can largely cut and paste and we can find",
    "start": "1718159",
    "end": "1723360"
  },
  {
    "text": "things online about how to render things in standard html and we can reuse that knowledge when we're building up our",
    "start": "1723360",
    "end": "1729440"
  },
  {
    "text": "ui's it's very succinct for describing the attributes it's just it's just a really good tool",
    "start": "1729440",
    "end": "1735200"
  },
  {
    "text": "for building up these ui's the kotlin dsl has some cumbersome points in it but",
    "start": "1735200",
    "end": "1740480"
  },
  {
    "text": "then on the flip side jsx is just for building these ui's kotlin's dsls you",
    "start": "1740480",
    "end": "1745760"
  },
  {
    "text": "can use for creating anything including our gradle file and our build system and it's very easy as garage showed an",
    "start": "1745760",
    "end": "1751520"
  },
  {
    "text": "example it's very easy to create your own dsls and start to create things that are really very very fluent i mean that",
    "start": "1751520",
    "end": "1756960"
  },
  {
    "text": "div syntax looks like a keyword of the language the braces and the single keyword it just",
    "start": "1756960",
    "end": "1762559"
  },
  {
    "text": "flows very nicely you'd think it was a custom language that's sort of what we're building this to me in specific language so kotlin wins in general but",
    "start": "1762559",
    "end": "1770240"
  },
  {
    "text": "typescript for this example probably has the has the upper hand yeah",
    "start": "1770240",
    "end": "1775279"
  },
  {
    "start": "1774000",
    "end": "1922000"
  },
  {
    "text": "very good so uh round four so uh if you're writing",
    "start": "1775279",
    "end": "1780559"
  },
  {
    "text": "a react ui you're going to be sending a lot of requests to servers you're going to be getting data back you want to",
    "start": "1780559",
    "end": "1786399"
  },
  {
    "text": "process that data asynchronously and so on so let's uh let's compare the two approaches so in javascript of course",
    "start": "1786399",
    "end": "1793679"
  },
  {
    "text": "you've got uh async and await which is succinct it works very well it's great",
    "start": "1793679",
    "end": "1798720"
  },
  {
    "text": "you know so you might assume that the the award here would go to javascript but not so fast yeah because uh in",
    "start": "1798720",
    "end": "1805440"
  },
  {
    "text": "kotlin uh we've got suspending functions and suspending functions are great so uh a suspending function is a function",
    "start": "1805440",
    "end": "1811919"
  },
  {
    "text": "which can be paused yeah and then resumed at some arbitrary point in the future so uh this is interoperable with",
    "start": "1811919",
    "end": "1818640"
  },
  {
    "text": "promises so you see there i can declare a suspending function and then i can say",
    "start": "1818640",
    "end": "1823880"
  },
  {
    "text": "window.fetch.await okay so they are the two approaches can be made to work together but even better if we were",
    "start": "1823880",
    "end": "1830399"
  },
  {
    "text": "using something like the uh the ktor client you see here we've got one suspending function which is calling",
    "start": "1830399",
    "end": "1836960"
  },
  {
    "text": "another suspending function and it's going out and uh sending an asynchronous request to the server but you see it",
    "start": "1836960",
    "end": "1843279"
  },
  {
    "text": "just looks like regular code yeah so we've got the little icon in the left hand side to show us that we're one",
    "start": "1843279",
    "end": "1849600"
  },
  {
    "text": "suspending function is calling another so the current function may pause at this point until the other is um ready",
    "start": "1849600",
    "end": "1855919"
  },
  {
    "text": "to return and so on but it all just happens in the background you know there's less syntax and it's easier to",
    "start": "1855919",
    "end": "1862080"
  },
  {
    "text": "work with um and even more so suspending functions are a general purpose programming",
    "start": "1862080",
    "end": "1868960"
  },
  {
    "text": "construct so um you can use suspending functions with co-routines yeah but um",
    "start": "1868960",
    "end": "1875519"
  },
  {
    "text": "you can use them for many other things as well so you get academics for example using suspending functions to implement",
    "start": "1875519",
    "end": "1882399"
  },
  {
    "text": "state machines there's arrow which is the library which adds advanced functional types and",
    "start": "1882399",
    "end": "1888000"
  },
  {
    "text": "optics and effects and so on on top of kotlin and they use our suspending",
    "start": "1888000",
    "end": "1893519"
  },
  {
    "text": "functions to great advantage there as well and there's all kinds of patterns that you can use with suspending",
    "start": "1893519",
    "end": "1899840"
  },
  {
    "text": "functions and co-routines so here's a nice simple one where we're just going out and generating a sequence of numbers",
    "start": "1899840",
    "end": "1906240"
  },
  {
    "text": "which can be as long as we like yeah so um suspending functions plus co routines do",
    "start": "1906240",
    "end": "1912799"
  },
  {
    "text": "everything async and a weight do but they also do an awful lot more besides you know so they uh the advantage goes",
    "start": "1912799",
    "end": "1919760"
  },
  {
    "text": "to kotlin there yeah coroutine is probably my favorite feature of kotlin i would say",
    "start": "1919760",
    "end": "1927039"
  },
  {
    "start": "1922000",
    "end": "2062000"
  },
  {
    "text": "they're awesome so if we then sort of just pick like a final round where we look at general",
    "start": "1927039",
    "end": "1932399"
  },
  {
    "text": "syntax and general usage um kotlin probably has an advantage here",
    "start": "1932399",
    "end": "1937760"
  },
  {
    "text": "it's a modern language they're able to start with a clean slate um they're able to look at all the other languages that",
    "start": "1937760",
    "end": "1943440"
  },
  {
    "text": "are out today and pick and choose the best features so generally speaking the syntax in kotlin i would say is nicer we",
    "start": "1943440",
    "end": "1951200"
  },
  {
    "text": "have you know when statements we have pattern matching everything is an expression so our ifs and our when's our",
    "start": "1951200",
    "end": "1957440"
  },
  {
    "text": "expressions so we can use those uh to compute values we can use those with expression-bodied functions and",
    "start": "1957440",
    "end": "1964880"
  },
  {
    "text": "so generally speaking this is just going to create more symmetric more more elegant code here is a little embedded",
    "start": "1964880",
    "end": "1971440"
  },
  {
    "text": "ternary expression and again this is sort of quite specific to something like react where we have to embed expressions",
    "start": "1971440",
    "end": "1979440"
  },
  {
    "text": "directly in our view so to try and get something akin to a switch statement or or something like",
    "start": "1979440",
    "end": "1985840"
  },
  {
    "text": "pattern matching we've got these nested ternaries and it's not too bad you know with judicious white space it",
    "start": "1985840",
    "end": "1992320"
  },
  {
    "text": "doesn't look too bad but something like the queen statement is is just more elegant it's just a nicer solution",
    "start": "1992320",
    "end": "1999279"
  },
  {
    "text": "so destructuring is maybe one where kotlin has the feature but i think",
    "start": "1999279",
    "end": "2004640"
  },
  {
    "text": "javascript and typescript do destructuring or deconstructing or unpacking or whatever you want to call",
    "start": "2004640",
    "end": "2009679"
  },
  {
    "text": "it whatever your language happens to call this feature i think typescript and javascript do this better than most",
    "start": "2009679",
    "end": "2015440"
  },
  {
    "text": "other languages that i've used um kotlin you have to do it in the order that",
    "start": "2015440",
    "end": "2020559"
  },
  {
    "text": "they're defined you define special functions component one component two and that's the order that you get the",
    "start": "2020559",
    "end": "2025600"
  },
  {
    "text": "data out um with javascript and typescript you just name things you just arbitrarily choose whatever kind of",
    "start": "2025600",
    "end": "2031679"
  },
  {
    "text": "information that you want the order doesn't matter you can have this destructory nested in",
    "start": "2031679",
    "end": "2037360"
  },
  {
    "text": "function signatures and arrow signatures really really powerful stuff",
    "start": "2037360",
    "end": "2042559"
  },
  {
    "text": "and we can use it with arrays and tuples as well and then we can do you know uh we can do the spread operator here as",
    "start": "2042559",
    "end": "2048638"
  },
  {
    "text": "well to get the remainder of arrays and things like that so destructuring and in typescript i always miss it when i go to",
    "start": "2048639",
    "end": "2056079"
  },
  {
    "text": "other languages that that either don't have it or don't have it with the same level of capability",
    "start": "2056079",
    "end": "2062158"
  },
  {
    "start": "2062000",
    "end": "2177000"
  },
  {
    "text": "so what's what's the conclusion to all of this well what's our conclusion i mean some of this is his opinion um a",
    "start": "2062159",
    "end": "2068079"
  },
  {
    "text": "lot of it is opinion um they're both great languages um you know in our",
    "start": "2068079",
    "end": "2073520"
  },
  {
    "text": "company we'll continue to use both typescript and kotlin um certainly if we're doing stuff on the",
    "start": "2073520",
    "end": "2080480"
  },
  {
    "text": "the back you know the back end we're doing server stuff um kotlin is our is our go-to language um",
    "start": "2080480",
    "end": "2087280"
  },
  {
    "text": "if we're doing some serverless stuff we're tending to go more towards typescript if we're doing front-end things we're tending to go towards",
    "start": "2087280",
    "end": "2093440"
  },
  {
    "text": "typescript when i'm using these languages when i'm in one i miss features of the",
    "start": "2093440",
    "end": "2099200"
  },
  {
    "text": "other i miss the standard library from kotlin when i'm in typescript i miss extension methods when i'm in typescript",
    "start": "2099200",
    "end": "2106000"
  },
  {
    "text": "i miss lambdas with receivers in the dsl building syntax that's awesome in kotlin",
    "start": "2106000",
    "end": "2111680"
  },
  {
    "text": "so when i'm in typescript i miss some of those features when i'm in kotlin there's stuff from typescript that i",
    "start": "2111680",
    "end": "2117040"
  },
  {
    "text": "really miss um i miss the ternary uh i i miss uh the type programming and",
    "start": "2117040",
    "end": "2123920"
  },
  {
    "text": "removing the redundancy and when i'm building react applications the jsx even",
    "start": "2123920",
    "end": "2128960"
  },
  {
    "text": "though it is bespoke and specific you know it is it is it is more useful",
    "start": "2128960",
    "end": "2134079"
  },
  {
    "text": "and the interrupt with javascript is more useful there as well so you know as you can see here from this",
    "start": "2134079",
    "end": "2140320"
  },
  {
    "text": "list it's uh it's it's a hard-fought battle and you're gonna you're gonna there's pros and cons on either side",
    "start": "2140320",
    "end": "2146560"
  },
  {
    "text": "talking of um hard-fought battles we hope you like that slide this was two hours uh arguing on a zoom call about",
    "start": "2146560",
    "end": "2153280"
  },
  {
    "text": "how things should be laid out and move those to the left now move those to the right now align them that way you know",
    "start": "2153280",
    "end": "2158720"
  },
  {
    "text": "the important stuff yeah exactly yeah yeah so yes so um that's how things stand at",
    "start": "2158720",
    "end": "2165200"
  },
  {
    "text": "present and uh as eamonn was saying you know whenever i'm writing kotlin there are type script features i miss whenever",
    "start": "2165200",
    "end": "2171520"
  },
  {
    "text": "i'm writing typescript i miss kotlin and so on but there are a few game changers that definitely should be mentioned so",
    "start": "2171520",
    "end": "2178880"
  },
  {
    "start": "2177000",
    "end": "2251000"
  },
  {
    "text": "um recently the the jet brains folks they put out a pool they put a poll in the field and they said okay which of",
    "start": "2178880",
    "end": "2185920"
  },
  {
    "text": "these proposed features would you be interested in okay so they're not committing themselves to anything at",
    "start": "2185920",
    "end": "2191440"
  },
  {
    "text": "this stage there's no guarantee that any of these will come to pass but these are proposed language features that they're",
    "start": "2191440",
    "end": "2198320"
  },
  {
    "text": "considering and there are some very very nice ones there and as you can see from what we've discussed uh there are things",
    "start": "2198320",
    "end": "2205280"
  },
  {
    "text": "that are present in typescript yeah so name-based destructuring that would be really nice you know i'd really like",
    "start": "2205280",
    "end": "2211440"
  },
  {
    "text": "that union types that would be great as well uh collection and structure literals",
    "start": "2211440",
    "end": "2216800"
  },
  {
    "text": "really really good you know so that would um that would add to kotlin a lot of the goodness that i really enjoy when",
    "start": "2216800",
    "end": "2223520"
  },
  {
    "text": "i'm doing typescript and from the point of view of people doing kotlin js that would really you know bring the two",
    "start": "2223520",
    "end": "2229680"
  },
  {
    "text": "languages closer together so uh whenever it came to doing tools like ducat or",
    "start": "2229680",
    "end": "2234960"
  },
  {
    "text": "even just taking something off stack overflow and you know translating it into your head into a kotlin js it would",
    "start": "2234960",
    "end": "2241920"
  },
  {
    "text": "make it an awful lot easier you know so um it would absolutely be a game changer",
    "start": "2241920",
    "end": "2247040"
  },
  {
    "text": "if most or even some of those ended up being implemented in the language uh the other thing just to go back to",
    "start": "2247040",
    "end": "2253280"
  },
  {
    "start": "2251000",
    "end": "2315000"
  },
  {
    "text": "our discussion of uh jsx a real game changer is jetpack compose you know so",
    "start": "2253280",
    "end": "2259119"
  },
  {
    "text": "i'm sure you've heard of jetpack compose uh this is the dsl that you would use inside an android app now to do your",
    "start": "2259119",
    "end": "2265920"
  },
  {
    "text": "layout well it's not just for android there's also compose for desktop and",
    "start": "2265920",
    "end": "2271040"
  },
  {
    "text": "there's also compose for web so the idea is that you have one dsl you know one",
    "start": "2271040",
    "end": "2277119"
  },
  {
    "text": "layout language that you can use for structuring a ui whether it's going to run inside your phone or it's going to",
    "start": "2277119",
    "end": "2284079"
  },
  {
    "text": "run on the desktop or it's going to run in the browser you know so this is available right now you can go away and",
    "start": "2284079",
    "end": "2289760"
  },
  {
    "text": "play with it so uh that could definitely be a game changer and of course because",
    "start": "2289760",
    "end": "2294800"
  },
  {
    "text": "it's kotlin first you're not going to have any interop issues or anything like that you know so whenever we were",
    "start": "2294800",
    "end": "2301440"
  },
  {
    "text": "talking about ui development uh jsx versus the dsl we had to give the award",
    "start": "2301440",
    "end": "2306880"
  },
  {
    "text": "to jsx but this could absolutely swing it the other way you know uh if it does",
    "start": "2306880",
    "end": "2311920"
  },
  {
    "text": "become uh mad popular yeah cool that's us",
    "start": "2311920",
    "end": "2317760"
  },
  {
    "start": "2315000",
    "end": "2329000"
  },
  {
    "text": "thank you for listening",
    "start": "2317760",
    "end": "2321240"
  },
  {
    "text": "you",
    "start": "2328640",
    "end": "2330720"
  }
]