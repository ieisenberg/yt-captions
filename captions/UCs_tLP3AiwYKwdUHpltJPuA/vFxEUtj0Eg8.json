[
  {
    "text": "[Applause] so I'm a software developer I'm a",
    "start": "8200",
    "end": "14160"
  },
  {
    "text": "consultant I do a number of different things but one thing I really want to clarify in the very beginning I am actually not a rust expert I remember",
    "start": "14160",
    "end": "20640"
  },
  {
    "text": "when Dave asked me a while ago whether I could do an introductory talk to rust I thought okay I'm not an expert",
    "start": "20640",
    "end": "26439"
  },
  {
    "text": "but maybe that's not even a bad thing because I'm going to run you through a journey of how I approached rust as somebody who has done programming in a",
    "start": "26439",
    "end": "33280"
  },
  {
    "text": "fair number of languages probably 10 languages commercially so this is a bit of an introduction of my personal Journey how I learned it and I hope I'll",
    "start": "33280",
    "end": "39399"
  },
  {
    "text": "show you a fair amount of code and give you an introduction the other part that scared me slightly more was rust is a",
    "start": "39399",
    "end": "46280"
  },
  {
    "text": "big language with a steep learning curve and I thought how much can I do in 45 minutes that gives you at least an",
    "start": "46280",
    "end": "52000"
  },
  {
    "text": "overview a flavor of the language and how much and that is my goal how much",
    "start": "52000",
    "end": "57359"
  },
  {
    "text": "can I inspire you that when you leave the conf tonight that on the weekend you are going to do some Rust programming",
    "start": "57359",
    "end": "63199"
  },
  {
    "text": "yourself so that is my goal for this talk let's start with the why you",
    "start": "63199",
    "end": "68320"
  },
  {
    "text": "probably read the text which is why all of you arrived in the room in the introduction when I wrote it I said it",
    "start": "68320",
    "end": "74280"
  },
  {
    "text": "won the most love programming award three years in a row now the new stack Overflow survey has come out and has won",
    "start": "74280",
    "end": "81040"
  },
  {
    "text": "again so four years in a row now the most loved programming language and I noticed that there is a",
    "start": "81040",
    "end": "87560"
  },
  {
    "text": "lot of good Community around the language I wrote a blog post a while ago about my first impressions and the",
    "start": "87560",
    "end": "92920"
  },
  {
    "text": "community was extremely helpful they corrected some of my mistakes in a very nice way they give",
    "start": "92920",
    "end": "100040"
  },
  {
    "text": "really good hints and I can see that there's a fantastic Community what is interesting though is also how popular",
    "start": "100040",
    "end": "107119"
  },
  {
    "text": "is it and I'll spare you the searching it's a good bit further down so it is really quite down",
    "start": "107119",
    "end": "113719"
  },
  {
    "text": "there I think this might be changing in the next year or two at the same time",
    "start": "113719",
    "end": "118960"
  },
  {
    "text": "though please bear this mind rust is a large language it brings a lot of modern Concepts that I hope I can highlight to",
    "start": "118960",
    "end": "124880"
  },
  {
    "text": "you but it does have a steep learning curve and that I guess is what we're seeing here a lot of people see the",
    "start": "124880",
    "end": "130000"
  },
  {
    "text": "learning curve they turn away they use different languages but the ones who go over it they really see the power and",
    "start": "130000",
    "end": "136239"
  },
  {
    "text": "they see what you can do with rust and they love it accordingly why are many companies",
    "start": "136239",
    "end": "142959"
  },
  {
    "text": "interested in different programming languages I mean what do these three companies have in common",
    "start": "142959",
    "end": "149959"
  },
  {
    "text": "they all don't like C and C++ very much anymore to the point where they all came",
    "start": "149959",
    "end": "155160"
  },
  {
    "text": "up with their own programming languages I'm not going to talk about the other two I'm going to focus on Rust",
    "start": "155160",
    "end": "160959"
  },
  {
    "text": "obviously but I do want to give an example from Apple to start with and this is when I wrote some of the slides",
    "start": "160959",
    "end": "166920"
  },
  {
    "text": "in the summer this is from the then current the knowledge based article that accompanies",
    "start": "166920",
    "end": "172599"
  },
  {
    "text": "a security update to mechos and they are alphabetically sorted you see that starts with apple Graphics control there",
    "start": "172599",
    "end": "179040"
  },
  {
    "text": "I'm going to skip two Bluetooth vulnerabilities but the rest is really right from the document and what we're",
    "start": "179040",
    "end": "184760"
  },
  {
    "text": "seeing here is three of those ones have to do with memory related problems next page I'm not skipping anything the next",
    "start": "184760",
    "end": "192480"
  },
  {
    "text": "three four actually also memory related we're on page three now I'm just",
    "start": "192480",
    "end": "197560"
  },
  {
    "text": "scrolling through memory related problems so what we're seeing here is apple has a company that writes an",
    "start": "197560",
    "end": "202840"
  },
  {
    "text": "operating system and as you can see here many of the tools in CN C++ I would say you can say the vast",
    "start": "202840",
    "end": "209799"
  },
  {
    "text": "majority of the problems are caused by memory related issues and that of course",
    "start": "209799",
    "end": "214879"
  },
  {
    "text": "is a big problem for a company that has software out in the wild in the numbers",
    "start": "214879",
    "end": "220239"
  },
  {
    "text": "then you might say okay we've talked about a couple of the Silicon Valley companies we talked apple as one of the big operating system providers what",
    "start": "220239",
    "end": "227400"
  },
  {
    "text": "about the company from Seattle and that is what they are doing this is an article from the summer from",
    "start": "227400",
    "end": "233920"
  },
  {
    "text": "the obviously Visual Studio magazine and they are saying they're eyeing rust now because they have so many",
    "start": "233920",
    "end": "240519"
  },
  {
    "text": "bugs this is actually based on some research and I'll give you a quote to",
    "start": "240519",
    "end": "246200"
  },
  {
    "text": "read the QR code is to the article it is actually worthwhile reading or if you download the slides of course you get",
    "start": "251720",
    "end": "257239"
  },
  {
    "text": "the URL but again what they are saying is the vast majority in the article it is very clear it's about 70% of the",
    "start": "257239",
    "end": "263040"
  },
  {
    "text": "problems are caused by memory corruption issues personally I got interested for a",
    "start": "263040",
    "end": "268280"
  },
  {
    "text": "different reason I I I work in Germany we have a lot of manufacturing Automotive companies we're seeing in all",
    "start": "268280",
    "end": "273759"
  },
  {
    "text": "sorts of areas much more powerful embedded devices where the software the hardware is not the product where it's",
    "start": "273759",
    "end": "279160"
  },
  {
    "text": "embedded in something else and again here what we're seeing is there's a big need for having a system that is more",
    "start": "279160",
    "end": "285000"
  },
  {
    "text": "secure that provides more safety than C and C++ but at the same time doesn't",
    "start": "285000",
    "end": "290600"
  },
  {
    "text": "come with a garbage collector sorry doesn't come with a garbage collector and is very close in performance to see",
    "start": "290600",
    "end": "297039"
  },
  {
    "text": "and at the maximum performance you get out of the hardware you have",
    "start": "297039",
    "end": "301639"
  },
  {
    "text": "with that said again my goal is to inspire you to get started so I want to show you at is",
    "start": "302400",
    "end": "307720"
  },
  {
    "text": "actually very simple the first step you do is you're downloading something called rust up you download that either",
    "start": "307720",
    "end": "313880"
  },
  {
    "text": "directly or with a curl command and I understand the security implications but once you have rust up on your machine it",
    "start": "313880",
    "end": "320240"
  },
  {
    "text": "installs the entire compiler tool chain and all the tools you need and it can be installed in your home directory you",
    "start": "320240",
    "end": "325520"
  },
  {
    "text": "don't even have to have it on your system and what you can see here on that screenshot you you can see how the rust",
    "start": "325520",
    "end": "330919"
  },
  {
    "text": "up command can be used to update the entire tool chain on your machine it is actually quite frictionless I mean it is",
    "start": "330919",
    "end": "337800"
  },
  {
    "text": "exactly what you expect from a modern programming language but it is good to see that you're getting that very",
    "start": "337800",
    "end": "344199"
  },
  {
    "text": "similar it comes with a tool called cargo that is the dependency manager and general build tool you'll use that for",
    "start": "344199",
    "end": "350759"
  },
  {
    "text": "almost everything when you work on the command line if you're working an IDE that will probably call Cargo under the",
    "start": "350759",
    "end": "356039"
  },
  {
    "text": "hood what we're seeing here is standard stuff that we are expecting today for modern programming languages simple",
    "start": "356039",
    "end": "361680"
  },
  {
    "text": "scaffolding I'm saying cargo new create me a new application that is called hello",
    "start": "361680",
    "end": "367039"
  },
  {
    "text": "rust and it creates only two files again it's very very simple it's a main file that will compile directly into a binary",
    "start": "367039",
    "end": "373960"
  },
  {
    "text": "so what you know from cc++ but also what you know from languages like go it will create one executable file the only",
    "start": "373960",
    "end": "381560"
  },
  {
    "text": "other file we're seeing here is a cargo. toml file think about package.json think",
    "start": "381560",
    "end": "386800"
  },
  {
    "text": "about gem files this will declare some major attributes of your project and",
    "start": "386800",
    "end": "392039"
  },
  {
    "text": "most importantly the dependencies I will not remember I said",
    "start": "392039",
    "end": "397400"
  },
  {
    "text": "like I I thought about how can I get a whirlwind two of rust into 45 minutes I will not do hello world what I'm",
    "start": "397400",
    "end": "403840"
  },
  {
    "text": "actually doing is I'm using an example that I use to learn rust if you were in the keynote last night about genetic",
    "start": "403840",
    "end": "410199"
  },
  {
    "text": "programming this is actually it doesn't matter for the purpose of this talk but what I wrote is a simulator of genetic",
    "start": "410199",
    "end": "416199"
  },
  {
    "text": "programming in artificial life this is reasonably interesting code because you can focus mostly on the algorithms and",
    "start": "416199",
    "end": "422000"
  },
  {
    "text": "not so much on websites and user interfaces or database access and I'm using examples from this code base all",
    "start": "422000",
    "end": "428720"
  },
  {
    "text": "you need to know is this is basically a simulation of creatures that are running around in the world they have a program",
    "start": "428720",
    "end": "434360"
  },
  {
    "text": "that encodes their strategy and they can interact with each other and they can eat food that is roughly the idea so",
    "start": "434360",
    "end": "440000"
  },
  {
    "text": "agents creatures running around in a world what is interesting to see here",
    "start": "440000",
    "end": "445080"
  },
  {
    "text": "are a couple of things it is not immediately obviously but in that section a bit further down in the the dependency sections you see a dependency",
    "start": "445080",
    "end": "451919"
  },
  {
    "text": "on Chrono Chrono is the date and time Library so rust went down the path of",
    "start": "451919",
    "end": "457639"
  },
  {
    "text": "saying we want to have a small language and we do not come with a large standard library that is an approach that we know",
    "start": "457639",
    "end": "463360"
  },
  {
    "text": "from C but also from JavaScript so even date time doesn't come standard you can",
    "start": "463360",
    "end": "468639"
  },
  {
    "text": "use Chrono you can use another Library too sometimes there is a bit of a mixed blessing remember when I first did this",
    "start": "468639",
    "end": "474599"
  },
  {
    "text": "I was like where's the date class couldn't find it and then I had to go through a Reddit thread to figure out",
    "start": "474599",
    "end": "479759"
  },
  {
    "text": "which ones is the current one to use or which one had which advantages but again it does help you similarly in line 11",
    "start": "479759",
    "end": "487280"
  },
  {
    "text": "you can see something called third you'll see that quite often it stands for serializer and deserializer so even",
    "start": "487280",
    "end": "493159"
  },
  {
    "text": "the serialization deserialization is not part of the language you can choose that one and what you see further down in the",
    "start": "493159",
    "end": "499800"
  },
  {
    "text": "dependencies is this desire to make rust very modular so you can see in the next line I'm declaring a dependency on CT",
    "start": "499800",
    "end": "507319"
  },
  {
    "text": "Json so the Json binding I don't have to do if I don't want to do Json and again that comes back to building small",
    "start": "507319",
    "end": "513279"
  },
  {
    "text": "binaries building binaries that have a small attack surface also right me you could say never mind will include Json",
    "start": "513279",
    "end": "520240"
  },
  {
    "text": "and grpc and all sorts of other serialization formats in the binary the",
    "start": "520240",
    "end": "525320"
  },
  {
    "text": "bites on dis don't cost that much but at the same time the more code you include the more potential security problems",
    "start": "525320",
    "end": "531560"
  },
  {
    "text": "you're also including so this is something that is really at the heart of rust that they're trying to make small libraries that are composable you can",
    "start": "531560",
    "end": "539000"
  },
  {
    "text": "take it as step further and you can see this in line 14 down there I'm declaring a dependency on uu ID a generator for uu",
    "start": "539000",
    "end": "545440"
  },
  {
    "text": "IDs and that one even has a feature for S so I they know sometimes the libraries",
    "start": "545440",
    "end": "550839"
  },
  {
    "text": "know about each other and I'm saying I want the uuid library and yes please I do want to serialize and deserialize uu",
    "start": "550839",
    "end": "557120"
  },
  {
    "text": "IDs this might sound a little bit extreme to you but if you are doing systems programming if you're trying to write small binaries or if you're",
    "start": "557120",
    "end": "563240"
  },
  {
    "text": "extremely concerned about safety say in the automotive industry that is really a very very positive trade because you are",
    "start": "563240",
    "end": "570640"
  },
  {
    "text": "really reducing the attack surface one thing that is also worth highlighting on this one here is in line",
    "start": "570640",
    "end": "577200"
  },
  {
    "text": "five it specifies an addition so this is rust 2018 Edition rust like many other",
    "start": "577200",
    "end": "583200"
  },
  {
    "text": "modern programming languages was released before it was it was released in an early version let's put it that",
    "start": "583200",
    "end": "588320"
  },
  {
    "text": "way and has improved over the years what I really like about rust is that it can specify the Edition I can use today's",
    "start": "588320",
    "end": "595079"
  },
  {
    "text": "tools to compile Old Source Code or I say I want the 2018 Edition and then I get to use the new features that is in",
    "start": "595079",
    "end": "601839"
  },
  {
    "text": "my personal experience in Star contrast to something like Swift where you sometimes have to go back to older idees",
    "start": "601839",
    "end": "607920"
  },
  {
    "text": "or even older operating systems to actually compile the code that he wrote only 3 years ago so again they have a",
    "start": "607920",
    "end": "614079"
  },
  {
    "text": "relatively good approach to evolving a language over time with explicit additions the last thing I guess I don't",
    "start": "614079",
    "end": "622240"
  },
  {
    "text": "know whether you noticed that whether it was an accident or not but I'm showing this in intellig I'm actually using intellig to write rust code my normal",
    "start": "622240",
    "end": "629360"
  },
  {
    "text": "go-to IDE is Visual Studio code these days but I have found through experimentation that the current versions of intellig support rust even",
    "start": "629360",
    "end": "636240"
  },
  {
    "text": "better than Visual Studio code so it is worthwhile looking around there's a lot of refactoring that actually already works there are some refactorings like",
    "start": "636240",
    "end": "642920"
  },
  {
    "text": "inlining that still don't work but I'm pretty sure the lovely Folks at jet brains will get there so that is good to",
    "start": "642920",
    "end": "650880"
  },
  {
    "text": "know how does it start here I'm building this application it's a few thousand lines of code it's not big at all and",
    "start": "650880",
    "end": "656760"
  },
  {
    "text": "you can see while I'm talking it does take some time so it is like a c based language the compiler needs to take time",
    "start": "656760",
    "end": "662720"
  },
  {
    "text": "you're pulling in the dependencies we're compiling them and you can see that after what 20 seconds it's done the good",
    "start": "662720",
    "end": "669200"
  },
  {
    "text": "news obviously is like any modern system it has an incremental system so once you repeat that build it's going to be much",
    "start": "669200",
    "end": "675040"
  },
  {
    "text": "faster it will only have to recompile the files that you have changed it is worth noting though it is",
    "start": "675040",
    "end": "682240"
  },
  {
    "text": "the debug build so this is instrumented and not optimized so that compiles faster at some point and I'll come back",
    "start": "682240",
    "end": "687639"
  },
  {
    "text": "to that very end of the talk at some point you want to make a release build with lots of optimizations it's totally",
    "start": "687639",
    "end": "693480"
  },
  {
    "text": "worth it as you will see it but that takes a little bit longer the good news though is the testing that is built in",
    "start": "693480",
    "end": "699720"
  },
  {
    "text": "you can see how it needs to compile a few of the tests but then you see a first Glimpse at the execution speeds",
    "start": "699720",
    "end": "705320"
  },
  {
    "text": "the tests are really running through faster than the terminal can scroll and in my personal experience the",
    "start": "705320",
    "end": "710880"
  },
  {
    "text": "incremental compiler combined with the really fast execution of the unit test never really got me out of the flow of",
    "start": "710880",
    "end": "717079"
  },
  {
    "text": "developing I'm very sensitive to this I don't like to have an idea I do test driven development I'm not going to show",
    "start": "717079",
    "end": "722800"
  },
  {
    "text": "you anything about tdd in Russ today by the way I love test driven development and I have this red green refactor cycle",
    "start": "722800",
    "end": "728519"
  },
  {
    "text": "and I did not feel that the compil speed really did hinder me most of the time obviously I would not compile this on",
    "start": "728519",
    "end": "735000"
  },
  {
    "text": "the command line but would use the IDE to do that for me",
    "start": "735000",
    "end": "742000"
  },
  {
    "text": "okay let's get started with some real rust code this here is the structure for the",
    "start": "742000",
    "end": "748199"
  },
  {
    "text": "world I mentioned in the simulation we have a world which is inhabited by creatures the first thing you will",
    "start": "748199",
    "end": "753600"
  },
  {
    "text": "notice I guess is the brevity rust really likes short keywords in line 15",
    "start": "753600",
    "end": "759240"
  },
  {
    "text": "at the very top you can see Pub it's not public it's Pub bit further down you see",
    "start": "759240",
    "end": "764360"
  },
  {
    "text": "imple it's not implementation FN not function and so on so there's this brevity that goes throughout all of the",
    "start": "764360",
    "end": "771959"
  },
  {
    "text": "rust um keywords and I think also into the libraries and that also affected me",
    "start": "771959",
    "end": "777720"
  },
  {
    "text": "I'll come back to that in a minute what you see first is that we have a struct which is a structure that can",
    "start": "777720",
    "end": "783800"
  },
  {
    "text": "stand alone for those of you oh by the way how many of you have programmed in C ah okay that makes it easier but I",
    "start": "783800",
    "end": "791240"
  },
  {
    "text": "don't want to rush it too much because there were a good few hands that didn't go up so I need to find the balance of course not boring the people who know",
    "start": "791240",
    "end": "797000"
  },
  {
    "text": "see but also not like speeding too much but anyway so a struct is just the data structure it's not really an",
    "start": "797000",
    "end": "802240"
  },
  {
    "text": "objectoriented approach and then further down in line 24 we see the implementation of the",
    "start": "802240",
    "end": "808360"
  },
  {
    "text": "world I can attach an implementation to the structure but I don't have to if I don't want to so it is kind of an",
    "start": "808360",
    "end": "814639"
  },
  {
    "text": "objectoriented language with some quirks that I'll show you in a minute what is interesting here though we see the name",
    "start": "814639",
    "end": "822240"
  },
  {
    "text": "of the world is an option of string so rust is one of those languages has a proper option",
    "start": "822240",
    "end": "827920"
  },
  {
    "text": "type and thus avoids a lot of the awkward null handling that we see in many cases so name can either be none",
    "start": "827920",
    "end": "835440"
  },
  {
    "text": "which would be null pointer main languages or it can be some of my world and has a lot of syntax built into rust",
    "start": "835440",
    "end": "841519"
  },
  {
    "text": "and a lot of the libraries us it in a very clever way way to avoid this constant null pointer checking and so on",
    "start": "841519",
    "end": "848279"
  },
  {
    "text": "so it is just much more embedded in the language what we also see here in line",
    "start": "848279",
    "end": "856079"
  },
  {
    "text": "25 even the constructors are kind of a convention so most classes or when you",
    "start": "856079",
    "end": "861639"
  },
  {
    "text": "are attaching like implementations to a structure you create something called new and here we also see for those of",
    "start": "861639",
    "end": "867800"
  },
  {
    "text": "you have never seen rust the first function declaration so we're saying we're declaring a function here a public",
    "start": "867800",
    "end": "873720"
  },
  {
    "text": "function with a name new the first parameter is called name the type of",
    "start": "873720",
    "end": "878959"
  },
  {
    "text": "that parameter is some kind of string I can't go into the depths of all the string handling just take it my word for",
    "start": "878959",
    "end": "884519"
  },
  {
    "text": "it it's some word type of string the next one is called params and you see",
    "start": "884519",
    "end": "889839"
  },
  {
    "text": "how I'm impacted by the brevity I didn't call it parameters I called it params and that is of type params which is",
    "start": "889839",
    "end": "896199"
  },
  {
    "text": "another structure that I find elsewhere in the source code and the return type is a world it's another structure so",
    "start": "896199",
    "end": "903560"
  },
  {
    "text": "this is how we declare functions in Rust the actual creation of a struct has its",
    "start": "903560",
    "end": "908880"
  },
  {
    "text": "own special syntax and you can see this here in the highlighted area we can just write the name of the structure and then",
    "start": "908880",
    "end": "915120"
  },
  {
    "text": "in curly braces we can actually initialize that this is also the return value of that",
    "start": "915120",
    "end": "921360"
  },
  {
    "text": "function in Rust there's no return keyword you don't generally write return",
    "start": "921360",
    "end": "926480"
  },
  {
    "text": "the result of the last expression a block is the return value so we don't",
    "start": "926480",
    "end": "932079"
  },
  {
    "text": "say return and then the construction of this world structure we just say world and that is being returned things to",
    "start": "932079",
    "end": "938880"
  },
  {
    "text": "highlight here is we can see that in random and log we see that I'm also using this convention for Constructors",
    "start": "938880",
    "end": "945680"
  },
  {
    "text": "so the random number generator I'm calling new on and the log file or the log that the world keeps is also just",
    "start": "945680",
    "end": "951600"
  },
  {
    "text": "initialized like that and then that is worth highlighting rust is a language that if in doubt looks at developer",
    "start": "951600",
    "end": "959040"
  },
  {
    "text": "productivity even when it increases the learning curve at least in my experience so there are number of shortcuts that",
    "start": "959040",
    "end": "965120"
  },
  {
    "text": "you don't have to put in the language and that make it harder for a novice that first reads rust code but in the",
    "start": "965120",
    "end": "971480"
  },
  {
    "text": "long run makes it easier to write rust code so what's happening here in those two lines that are marked up with the",
    "start": "971480",
    "end": "976880"
  },
  {
    "text": "arrow this is a shortcut the field as you can see further up is called terrain",
    "start": "976880",
    "end": "983199"
  },
  {
    "text": "the value I'm initializing with it is also called terrain you can see that in line 26 I'm I'm declaring this variable",
    "start": "983199",
    "end": "990000"
  },
  {
    "text": "I'm saying let terrain and I create a new one there when that is the case when",
    "start": "990000",
    "end": "995120"
  },
  {
    "text": "both the field and the parameter are the same I can just write them in a contracted way and I'm just saying",
    "start": "995120",
    "end": "1000800"
  },
  {
    "text": "terrain and params as here I'm highlighting this not because it's super important to know but it gives you an",
    "start": "1000800",
    "end": "1006360"
  },
  {
    "text": "idea that the designers of rust really went for the long term they went for the long game making it easy for people",
    "start": "1006360",
    "end": "1013040"
  },
  {
    "text": "write large amounts of code even when it comes at the expense of maybe making a little bit more diff ult or",
    "start": "1013040",
    "end": "1020839"
  },
  {
    "text": "unintuitive for people who are new to the language a bit further down in the world",
    "start": "1020839",
    "end": "1028678"
  },
  {
    "text": "um implementation we see this function here called do cycles and it runs a",
    "start": "1028679",
    "end": "1033880"
  },
  {
    "text": "number of cycles of the simulation namely num Cycles you can see that there",
    "start": "1033880",
    "end": "1039678"
  },
  {
    "text": "oh sorry you can see that further there there's num which is an unsigned 64-bit",
    "start": "1039679",
    "end": "1044880"
  },
  {
    "text": "integer again the brevity and I'll tell you you will get to know all the different integer types there's 32bit",
    "start": "1044880",
    "end": "1050720"
  },
  {
    "text": "there's signed there's unsigned you cannot multiply them because of safety concerns we often have to cast them or",
    "start": "1050720",
    "end": "1056679"
  },
  {
    "text": "do other explicit ways of doing it you will get to know them quite well what is worth highlighting here is the first",
    "start": "1056679",
    "end": "1062840"
  },
  {
    "text": "parameter we are passing in self some programming languages do this python for",
    "start": "1062840",
    "end": "1068039"
  },
  {
    "text": "example also has a visible first argument of the object on on any method",
    "start": "1068039",
    "end": "1073679"
  },
  {
    "text": "basically so what we're seeing here is this is a method and it's a method not a function because passing self or this in",
    "start": "1073679",
    "end": "1080600"
  },
  {
    "text": "Java speak the object itself in as the first parameter gloss over the ENT mutable",
    "start": "1080600",
    "end": "1087640"
  },
  {
    "text": "we'll explain that at a later stage you also see the trimmings of many other modern programming languages we see",
    "start": "1087640",
    "end": "1093880"
  },
  {
    "text": "ranges there for example not do do num so ranges are first class objects we also see the underscore in the for Loop",
    "start": "1093880",
    "end": "1100960"
  },
  {
    "text": "there which is like you know it it would be a variable but I don't need the variable the compiler would warn saying",
    "start": "1100960",
    "end": "1107120"
  },
  {
    "text": "you have created an unused variable aable so I can say underscore again there's syntax in there that is really",
    "start": "1107120",
    "end": "1113440"
  },
  {
    "text": "very useful when you know the syntax to write better code but it is syntax it's baggage if you will that you first have",
    "start": "1113440",
    "end": "1119840"
  },
  {
    "text": "to learn you have to know that you can say underscore and you don't put I in and then forever upset about the",
    "start": "1119840",
    "end": "1125440"
  },
  {
    "text": "compiler warning you that you're not using I and then what we're doing here is",
    "start": "1125440",
    "end": "1130720"
  },
  {
    "text": "we're saying self which is the reference to the structure and we're calling another method on it called do one",
    "start": "1130720",
    "end": "1137080"
  },
  {
    "text": "cycle so I mean you see that that function is actually or that method is actually very trivial but it's a good",
    "start": "1137080",
    "end": "1143960"
  },
  {
    "text": "introduction this was in many ways a bit of an objectoriented view on Rust as a",
    "start": "1146120",
    "end": "1151520"
  },
  {
    "text": "programming language on the next slide I'm trying to show you a more functional approach which rust also can do quite well so",
    "start": "1151520",
    "end": "1159880"
  },
  {
    "text": "here we have a method in some helper class called cycle count these little creatures that are running around have a",
    "start": "1159880",
    "end": "1166280"
  },
  {
    "text": "set of instructions that defines their strategy like move and eat and turn left turn right and so on and each of the",
    "start": "1166280",
    "end": "1173200"
  },
  {
    "text": "instructions have a number of processing cycles that they can take so what this function is trying to do it is tries to",
    "start": "1173200",
    "end": "1180240"
  },
  {
    "text": "calculate how long it would take to run the entire program somewhere else in the system is this table here and it says",
    "start": "1180240",
    "end": "1186880"
  },
  {
    "text": "the E command takes 10 Cycles move takes five cycles and so on what is super interesting about this",
    "start": "1186880",
    "end": "1193880"
  },
  {
    "text": "one is rust does not have literal arrays or literal maps in the syntax",
    "start": "1193880",
    "end": "1199600"
  },
  {
    "text": "rust does have a powerful macro system so you didn't see that because I didn't highlight it in the dependencies there's",
    "start": "1199600",
    "end": "1206159"
  },
  {
    "text": "something called map lit map literals so I'm call I'm having declaring a dependency on that and I can even change",
    "start": "1206159",
    "end": "1212720"
  },
  {
    "text": "the syntax of my source code I can write hashmap exclamation mark and then the macro creates new syntax that allows me",
    "start": "1212720",
    "end": "1219039"
  },
  {
    "text": "to have a literal dictionary in my source code I think that's going to be",
    "start": "1219039",
    "end": "1224440"
  },
  {
    "text": "quite fun for the IDE designers and you can al already see that intellig for example has issues with this syntax",
    "start": "1224440",
    "end": "1230559"
  },
  {
    "text": "because it is not the original rust syntax it is created by a macro but again it's a powerful mechanism and this",
    "start": "1230559",
    "end": "1236159"
  },
  {
    "text": "is like a mini DSL if you will and I can see in large systems that these kinds of dsls are super helpful anyway back to",
    "start": "1236159",
    "end": "1243600"
  },
  {
    "text": "that function we are trying to get a list of these instructions and we try to sum up the instruction count the Cycles",
    "start": "1243600",
    "end": "1249679"
  },
  {
    "text": "it takes how do we do that we do it in a very modern functional way so first we",
    "start": "1249679",
    "end": "1255559"
  },
  {
    "text": "get an iterator from the program program is just an array you can see this declared in the previous line after that",
    "start": "1255559",
    "end": "1262400"
  },
  {
    "text": "we do for those of you who know functional programming a simple left fold so we will go over the array and we",
    "start": "1262400",
    "end": "1268320"
  },
  {
    "text": "start with an accumulator of value zero that is highlighted there and then for each element in the array this Anonymous",
    "start": "1268320",
    "end": "1275840"
  },
  {
    "text": "inner function will be called you can see the two parameters called accumulator and instruction they're",
    "start": "1275840",
    "end": "1281120"
  },
  {
    "text": "being passed in separated by the pipe symbols and after that we see the body of the anonymous function which",
    "start": "1281120",
    "end": "1287559"
  },
  {
    "text": "basically takes the ACC ulator and then adds the instruction of that sorry the",
    "start": "1287559",
    "end": "1293080"
  },
  {
    "text": "um the cycle count of that instruction and it returns it again of course no return statement this is I think so",
    "start": "1293080",
    "end": "1299679"
  },
  {
    "text": "obvious this is even in languages like Java much like that luckily unlike Java you don't have to collect things at the",
    "start": "1299679",
    "end": "1305480"
  },
  {
    "text": "end it just becomes a regular object at the end again rust is building on The",
    "start": "1305480",
    "end": "1311799"
  },
  {
    "text": "Primitives and are creating higher order abstractions so this is how you would actually write it so it you would get",
    "start": "1311799",
    "end": "1318919"
  },
  {
    "text": "again the iterator but in the end you would have a map function and that of course simplifies the anonymous function",
    "start": "1318919",
    "end": "1325440"
  },
  {
    "text": "that you have in there so rather than having the accumulator and doing the addition yourself you're just saying I want to map from the instruction to the",
    "start": "1325440",
    "end": "1331640"
  },
  {
    "text": "cycle count which is what the highlighted area does and then at the end you have the sum which will take a",
    "start": "1331640",
    "end": "1337120"
  },
  {
    "text": "stream of data and will just sum up all the values I guess that's pretty much par for the cause in in modern programming",
    "start": "1337120",
    "end": "1344360"
  },
  {
    "text": "language design but it is good to know that rust has both these flavors you can write relatively objectoriented code but",
    "start": "1344360",
    "end": "1350240"
  },
  {
    "text": "it really also very well supports more a more functional style of programming and I guess the value really lies in being",
    "start": "1350240",
    "end": "1356880"
  },
  {
    "text": "able to pick both of them as you need them right now the more difficult part",
    "start": "1356880",
    "end": "1365400"
  },
  {
    "text": "about rust but one of its absolute key features is memory management",
    "start": "1365400",
    "end": "1370480"
  },
  {
    "text": "so in most programming languages that we see today even newly created ones like go for example we find garbage",
    "start": "1370480",
    "end": "1377400"
  },
  {
    "text": "collectors they have a number of huge advantages but they also have the disadvantage of being a garbage",
    "start": "1377400",
    "end": "1383320"
  },
  {
    "text": "collector they may pause the ex they may pause the execution time they may cause other issues so rust went with an",
    "start": "1383320",
    "end": "1390240"
  },
  {
    "text": "approach that doesn't do garbage collection the standard approach in that case is either nothing like leave it up",
    "start": "1390240",
    "end": "1396039"
  },
  {
    "text": "to the developer like in C and we know the results from all the security problems another approach can be",
    "start": "1396039",
    "end": "1402000"
  },
  {
    "text": "reference counting that is what we see in Objective C for example we see in Swift to a certain extent that's a bit",
    "start": "1402000",
    "end": "1407039"
  },
  {
    "text": "more complicated they didn't do that either they were the first ones to came",
    "start": "1407039",
    "end": "1412159"
  },
  {
    "text": "to Market or were able to take A New Concept called borrowing that had been around in Academia for a while but",
    "start": "1412159",
    "end": "1418279"
  },
  {
    "text": "create an implementation with small enough overhead that it becomes practical to use and I'll explain to you",
    "start": "1418279",
    "end": "1423880"
  },
  {
    "text": "how that works this year these slides with a white background are copied straight",
    "start": "1423880",
    "end": "1430000"
  },
  {
    "text": "from the Rust book the Rust book is a website you can also buy it printed they theyve explained this really well so why",
    "start": "1430000",
    "end": "1436279"
  },
  {
    "text": "would I create new examples what we seeing here is a block and we're creating a variable called s and as long",
    "start": "1436279",
    "end": "1443000"
  },
  {
    "text": "as s is around the memory to hold the string hello is in is kept in memory the",
    "start": "1443000",
    "end": "1449799"
  },
  {
    "text": "moment s goes out of scope the memory is released so I don't have to say I want",
    "start": "1449799",
    "end": "1455200"
  },
  {
    "text": "to retain you or I have multiple references it is really just as long as the variable that",
    "start": "1455200",
    "end": "1460799"
  },
  {
    "text": "owns the value is in scope the memory is kept the moment the variable goes out of",
    "start": "1460799",
    "end": "1466640"
  },
  {
    "text": "scope the memory goes away you can easily immediately think how the hell is this going to work so what",
    "start": "1466640",
    "end": "1473320"
  },
  {
    "text": "happens here is I've S1 which I'm creating with the string and now I'm saying S2 equals S1 as in I'm assigning",
    "start": "1473320",
    "end": "1480760"
  },
  {
    "text": "it and now you're like okay who owns this thing now in most languages this would be unclear automatic reference",
    "start": "1480760",
    "end": "1486360"
  },
  {
    "text": "counting would probably have now two references not so in Rust rust has a clear ownership model and only one",
    "start": "1486360",
    "end": "1492760"
  },
  {
    "text": "variable owns the value and when that variable goes goes out of scope the",
    "start": "1492760",
    "end": "1498360"
  },
  {
    "text": "memory disappears this has the um the little um question mark and the cation here on the",
    "start": "1498360",
    "end": "1504880"
  },
  {
    "text": "side to say this is actually incorrect code it will not even compile what will happen is in that line at the very",
    "start": "1504880",
    "end": "1510320"
  },
  {
    "text": "bottom when I'm trying to use S1 the compiler will say You must not use S1 anymore you don't own this anymore S1",
    "start": "1510320",
    "end": "1517640"
  },
  {
    "text": "has become unusable you have transferred the ownership of that string into S2 and",
    "start": "1517640",
    "end": "1523120"
  },
  {
    "text": "after that S1 cannot be used so it is very clear there's always one owner of a given",
    "start": "1523120",
    "end": "1530320"
  },
  {
    "text": "value now you might think that's really super awkward if I want to call a method right if I have a method like this here",
    "start": "1530320",
    "end": "1536960"
  },
  {
    "text": "to or function to calculate the length of a string if I'm passing it in I'm I'm",
    "start": "1536960",
    "end": "1542159"
  },
  {
    "text": "giving up ownership and then I can't do anything with s one anymore that really sucks I don't want that so what they",
    "start": "1542159",
    "end": "1548600"
  },
  {
    "text": "have come up and this is the concept I mentioned earlier the idea of borrowing if you have done C this is basically",
    "start": "1548600",
    "end": "1554960"
  },
  {
    "text": "creating a pointer I'll explain that on the next slide in a bit more detail for those of you you don't know C basically",
    "start": "1554960",
    "end": "1560080"
  },
  {
    "text": "here and it uses the same syntax as in C I'm doing m% S1 I'm borrowing the value",
    "start": "1560080",
    "end": "1566679"
  },
  {
    "text": "for a moment being I'm not taking ownership S1 is lending me the reference",
    "start": "1566679",
    "end": "1572200"
  },
  {
    "text": "so I can work with it for a while and when I'm going out of scope S1 can be",
    "start": "1572200",
    "end": "1577840"
  },
  {
    "text": "used again because it owns the value and this is exactly what happens here so calculate length only gets the reference",
    "start": "1577840",
    "end": "1585159"
  },
  {
    "text": "it gets the borrowed value I can do something with it and s goes out of scope and now I don't have a reference",
    "start": "1585159",
    "end": "1591960"
  },
  {
    "text": "anymore and S1 of course is or has always been the owner so far so good for those of you",
    "start": "1591960",
    "end": "1598000"
  },
  {
    "text": "who don't know C I'm going to give you a very very brief explanation into how those pointers work it is illustrative",
    "start": "1598000",
    "end": "1605720"
  },
  {
    "text": "only this is not how rust or C or Intel actually really works but the idea is",
    "start": "1605720",
    "end": "1612120"
  },
  {
    "text": "the same so what you have is when I declare a variable like this let message be get message and I own this that",
    "start": "1612120",
    "end": "1619000"
  },
  {
    "text": "variable owns the block of memory you can see in the memory dump here it is like the hex values and on the right",
    "start": "1619000",
    "end": "1624440"
  },
  {
    "text": "hand side you can actually see the SQ values and you can see the message there so this is what happens when message",
    "start": "1624440",
    "end": "1630880"
  },
  {
    "text": "goes out of scope then that block of memory that is um circled in blue here that will be reused by the operating",
    "start": "1630880",
    "end": "1637440"
  },
  {
    "text": "system or the runtime for something else what does this do though because I",
    "start": "1637440",
    "end": "1643640"
  },
  {
    "text": "mean I'm I'm very aware that in Java you always think about you just like kind of point to something and it's there for",
    "start": "1643640",
    "end": "1649279"
  },
  {
    "text": "you but here the message really owns that block of memory but what is the pointer that message",
    "start": "1649279",
    "end": "1655159"
  },
  {
    "text": "reference The Borrowed thing what that is is something like this it is just an address in memory it is a pointer to the",
    "start": "1655159",
    "end": "1662360"
  },
  {
    "text": "actual block and you can see this here this 06 9674 is the address you can see in the",
    "start": "1662360",
    "end": "1668720"
  },
  {
    "text": "memory dump on the left hand side at the corner of the blue thing so when message ref goes out of scope that little bit",
    "start": "1668720",
    "end": "1676240"
  },
  {
    "text": "those few bites that was the value they get reused they wouldn't be on the Heap",
    "start": "1676240",
    "end": "1681360"
  },
  {
    "text": "like I'm showing here they would be on the stack but you get the idea when the reference goes out of scope it is only",
    "start": "1681360",
    "end": "1686440"
  },
  {
    "text": "the pointer itself when the value itself goes out of scope the whole data structure behind it",
    "start": "1686440",
    "end": "1693518"
  },
  {
    "text": "disappears there's a second very important concept and it has to do with mutability that also is one of the",
    "start": "1697559",
    "end": "1703360"
  },
  {
    "text": "factors together with the memory model that really increases the safety of rust programs",
    "start": "1703360",
    "end": "1709200"
  },
  {
    "text": "so I'm creating a string here s and I'm passing it to a function called change",
    "start": "1709200",
    "end": "1714519"
  },
  {
    "text": "I'm creating a reference the function borrows the value I'm still the owner and the change function tries to do",
    "start": "1714519",
    "end": "1720919"
  },
  {
    "text": "something they borrowed the value for me in good faith but they're trying to change the value and that will not work the",
    "start": "1720919",
    "end": "1727919"
  },
  {
    "text": "compiler will not let you change the value it has a deep understanding in the language of what is mutable and what is",
    "start": "1727919",
    "end": "1734279"
  },
  {
    "text": "immutable it will this will just give you a compile time error on the line that says some string push push string",
    "start": "1734279",
    "end": "1740080"
  },
  {
    "text": "is known to mutate the value and says you don't you just got borrowed a reference you cannot mutate this to fix",
    "start": "1740080",
    "end": "1746440"
  },
  {
    "text": "that or if I wanted to show you how it actually works you would do it like this you have to create the string as mutable",
    "start": "1746440",
    "end": "1752640"
  },
  {
    "text": "in the first place so the value needs to be mutable and then not only that I still",
    "start": "1752640",
    "end": "1758880"
  },
  {
    "text": "in addition need to create a reference that is also a mutable reference you can see that when I'm calling that change",
    "start": "1758880",
    "end": "1765480"
  },
  {
    "text": "function I'm saying not only EMP presentent to get reference I'm saying ENT mute I'm create a reference that",
    "start": "1765480",
    "end": "1771240"
  },
  {
    "text": "will allow the person or the sorry person the function that gets the reference to actually mutate the object",
    "start": "1771240",
    "end": "1777120"
  },
  {
    "text": "and this code then compiles and now I think okay what the hell if I can create a mutable reference",
    "start": "1777120",
    "end": "1783159"
  },
  {
    "text": "why aren't all reference is mutable they have thought about this and",
    "start": "1783159",
    "end": "1788600"
  },
  {
    "text": "this for example does not compile so I'm creating an R1 I'm creating a mutable reference to S and I'm trying to create",
    "start": "1788600",
    "end": "1795120"
  },
  {
    "text": "a second mutable reference the compiler will not let let me do this it will only allow me to create one and only one",
    "start": "1795120",
    "end": "1801760"
  },
  {
    "text": "mutual reference and if You' have done programming where you really had to push data between multiple threads I guess",
    "start": "1801760",
    "end": "1808200"
  },
  {
    "text": "you immediately understand why that is a super beneficial feature because a lot of the problems occur and I don't know",
    "start": "1808200",
    "end": "1814120"
  },
  {
    "text": "where they were in the TLA plus talk a lot of the problems occur when multiple threats are working on the same data",
    "start": "1814120",
    "end": "1819320"
  },
  {
    "text": "because the sequence is unclear you don't really know what is what anymore so the mutable references you can only",
    "start": "1819320",
    "end": "1825360"
  },
  {
    "text": "have one and only one of the compiler will simply let not let you do this you can have multiple immutable",
    "start": "1825360",
    "end": "1832640"
  },
  {
    "text": "references so R1 and R2 in this case are totally fine you can't create a mutable",
    "start": "1832640",
    "end": "1838600"
  },
  {
    "text": "reference when you still have immutable references around because again you can't predict the behavior anymore in",
    "start": "1838600",
    "end": "1844519"
  },
  {
    "text": "this case I'm giving R1 to one threat R2 to another threat and R3 I'm doing",
    "start": "1844519",
    "end": "1849640"
  },
  {
    "text": "something with at no point do I really know what the value is that R1 and R2 will be so you can have either one",
    "start": "1849640",
    "end": "1857159"
  },
  {
    "text": "mutable reference one and only one or and that's a real strict or many immutable references",
    "start": "1857159",
    "end": "1865080"
  },
  {
    "text": "nothing else is allowed many immutable ones or one mutable one and the last thing I want to show",
    "start": "1865080",
    "end": "1871080"
  },
  {
    "text": "you where they really went quite far with the analysis they can do at compile time dangling references so if you look",
    "start": "1871080",
    "end": "1878159"
  },
  {
    "text": "at that method down there the dangle method I'm creating a string s actually owns the memory as we discussed in the",
    "start": "1878159",
    "end": "1884960"
  },
  {
    "text": "previous slides it tries to return a refence refence to S but I guess you now",
    "start": "1884960",
    "end": "1890600"
  },
  {
    "text": "know what happens right when that curly brace closes s goes out of scope the memory is released whoever gets the",
    "start": "1890600",
    "end": "1898320"
  },
  {
    "text": "reference back would now have a dangling pointer they would have a reference to basically nothing or random thing in",
    "start": "1898320",
    "end": "1904000"
  },
  {
    "text": "memory this doesn't compile in Rust the rust compiler understands the lifetimes",
    "start": "1904000",
    "end": "1909279"
  },
  {
    "text": "there's a lot there's a whole talk you can do about lifetimes in Rust but on the basic level it understands the lifetimes like this and says the",
    "start": "1909279",
    "end": "1915799"
  },
  {
    "text": "lifetime of s is shorter than the lifetime of the reference you're trying to create and therefore I will not allow",
    "start": "1915799",
    "end": "1921320"
  },
  {
    "text": "you to create a reference the the lifetime of a reference must be shorter than the lifetime of the thing you're",
    "start": "1921320",
    "end": "1927360"
  },
  {
    "text": "referring to did that make sense good it sounds",
    "start": "1927360",
    "end": "1934720"
  },
  {
    "text": "relatively simple I'm going to show you some real code now and you'll probably feel like I did and many people that I",
    "start": "1934720",
    "end": "1939799"
  },
  {
    "text": "talk to will learn rust something that is a simple and positive I mean I don't think anybody would disagree with this",
    "start": "1939799",
    "end": "1945279"
  },
  {
    "text": "right it makes total sense but when you start programming with it it really does",
    "start": "1945279",
    "end": "1950320"
  },
  {
    "text": "take a while to get used to it shall I say so let's get back to the um the creature um",
    "start": "1950320",
    "end": "1957399"
  },
  {
    "text": "example we have a function here called do with creatures mute ignore the mute for now so basically I can tell the",
    "start": "1957399",
    "end": "1963960"
  },
  {
    "text": "terrain I will pass you a function and please call this function with every",
    "start": "1963960",
    "end": "1969159"
  },
  {
    "text": "creature that is in the terrain at the moment so that function called FC Funk",
    "start": "1969159",
    "end": "1975320"
  },
  {
    "text": "that I'm passing in here that will be called by the implementation of the method we're seeing here for each of the",
    "start": "1975320",
    "end": "1981960"
  },
  {
    "text": "creatures that currently lives in the world the terrain knows it not the world that's design you can see it's clearly a",
    "start": "1981960",
    "end": "1988399"
  },
  {
    "text": "method because we're passing in and then you might wonder if you've",
    "start": "1988399",
    "end": "1993960"
  },
  {
    "text": "done programming you see like this generic syntax right the greater and lesser than and F and you're like okay",
    "start": "1993960",
    "end": "1999159"
  },
  {
    "text": "rust is totally typed but the function is only F what is f what are the constraints on F and it would look",
    "start": "1999159",
    "end": "2007480"
  },
  {
    "text": "really awful in many cases to try to squeeze the Declaration of the function into the Declaration of this method so",
    "start": "2007480",
    "end": "2014600"
  },
  {
    "text": "what you can do like in languages I've seen it in C for example you can spill it out onto a next line into a different",
    "start": "2014600",
    "end": "2020159"
  },
  {
    "text": "phrase so basically what I'm saying here is that function that you're passing into this method the function that will",
    "start": "2020159",
    "end": "2026600"
  },
  {
    "text": "be called later that function has to take a Terrain it has to take a creature",
    "start": "2026600",
    "end": "2033919"
  },
  {
    "text": "it has to take a tuple that's also a nice thing in Rust you can have tupal you can see the brackets two unsigned 32",
    "start": "2033919",
    "end": "2039840"
  },
  {
    "text": "integers in there and it returns an option of a tuper so here I'm now in a",
    "start": "2039840",
    "end": "2045760"
  },
  {
    "text": "completely separate space declaring the constraints of the functions that need to be passed in",
    "start": "2045760",
    "end": "2052320"
  },
  {
    "text": "there again you can see like a lot of the things that you saw before like options for example they can be combined",
    "start": "2052320",
    "end": "2057760"
  },
  {
    "text": "with everything else all these concepts are generally orthogonal what this function generally does is it processes",
    "start": "2057760",
    "end": "2063599"
  },
  {
    "text": "the creature a little bit and the um the Tuple is the coordinates where where is the creature in the world so it can find",
    "start": "2063599",
    "end": "2069358"
  },
  {
    "text": "its neighbors and the return value is an option if it's none the creature has died if it's some that is the new place",
    "start": "2069359",
    "end": "2075480"
  },
  {
    "text": "where the creature wants to be in the world now flicking over to the world and",
    "start": "2075480",
    "end": "2081240"
  },
  {
    "text": "this is now where it's getting interesting with the memory model this is how this function is being used so",
    "start": "2081240",
    "end": "2086440"
  },
  {
    "text": "there's this um function in the in the world class to process all the creatures",
    "start": "2086440",
    "end": "2091760"
  },
  {
    "text": "and it says self terrain that is unsurprising I guess do with creatures that's the method signature we looked at",
    "start": "2091760",
    "end": "2098960"
  },
  {
    "text": "and then it passes in this Anonymous function and it does take the three parameters we saw on the previous slide",
    "start": "2098960",
    "end": "2104400"
  },
  {
    "text": "terrain creature and position this is a closure common in many modern programming languages and like in many other",
    "start": "2104400",
    "end": "2111520"
  },
  {
    "text": "programming languages if you look at a little bit further down in that if statement I'm saying if the creature's age is greater",
    "start": "2111520",
    "end": "2119760"
  },
  {
    "text": "than the creature max age that is defined in the world parameters then I'm returning none the creature dies after",
    "start": "2119760",
    "end": "2126160"
  },
  {
    "text": "an maximum number of Cycles and what I'm doing here I guess you see this I'm using self right I'm using self",
    "start": "2126160",
    "end": "2133119"
  },
  {
    "text": "params that's a variable a field that is in the world structure so I need to capture that in the closure to be able",
    "start": "2133119",
    "end": "2139119"
  },
  {
    "text": "to use it if you think about safety though I have no idea what the function",
    "start": "2139119",
    "end": "2144359"
  },
  {
    "text": "that I'm calling the do to do with creatures does it could capture this it could keep it around forever it could",
    "start": "2144359",
    "end": "2149800"
  },
  {
    "text": "pass it to a separate thread so they clearly need to be some rules what happens with the capture and at least to my surprise this",
    "start": "2149800",
    "end": "2157680"
  },
  {
    "text": "didn't even compile it gave me this error message and this is actually a genuine rust",
    "start": "2157680",
    "end": "2164079"
  },
  {
    "text": "compiler error message they are very long they're very they're designed to explain very well what happens to the",
    "start": "2164079",
    "end": "2170040"
  },
  {
    "text": "point of using ES art as you can see there and trust me it it looks a bit odd",
    "start": "2170040",
    "end": "2176280"
  },
  {
    "text": "but it really is helpful it's actually on a number of other places further up there it says error 0501 it's underlined",
    "start": "2176280",
    "end": "2184200"
  },
  {
    "text": "that actually is a hyperlink in most Ides you can click on it and you go to a website um from the rust Community where",
    "start": "2184200",
    "end": "2191400"
  },
  {
    "text": "they explain the compiler warning or at the very bottom you can see this it says I could even call the rust compiler on",
    "start": "2191400",
    "end": "2197720"
  },
  {
    "text": "the command line and say explain this error in more detail than this error message what I find what I find slightly",
    "start": "2197720",
    "end": "2205160"
  },
  {
    "text": "amusing is a lot of the documentation uses Game of Thrones references I'm not sure how they feel about it now or",
    "start": "2205160",
    "end": "2211960"
  },
  {
    "text": "they're going to refactor it but it's clearly in there so coming back to this so we have",
    "start": "2211960",
    "end": "2218480"
  },
  {
    "text": "this closure what is the problem what was the compiler trying to show us with this s art it is this bit here as I",
    "start": "2218480",
    "end": "2224839"
  },
  {
    "text": "mentioned before in the closure I'm using self which captures self from inside the closure but I'm also using",
    "start": "2224839",
    "end": "2232880"
  },
  {
    "text": "self the terrain to just get access to my own field outside the closure and that is what one of the error messages",
    "start": "2232880",
    "end": "2239079"
  },
  {
    "text": "was about it says the closure requires unique access to self but it can't have",
    "start": "2239079",
    "end": "2244400"
  },
  {
    "text": "it because it's borrowed already remember what I said you can't have multiple you can't have mutable and immutable borrows at the same time this",
    "start": "2244400",
    "end": "2250760"
  },
  {
    "text": "is what it says in the examples I showed you from the Rust book it was very obvious I think here it takes really",
    "start": "2250760",
    "end": "2256920"
  },
  {
    "text": "quite a while to understand what is really going on so what I'm trying to say is there's some profound impact on",
    "start": "2256920",
    "end": "2262520"
  },
  {
    "text": "the way you write code and the way you design code that is caused by the memory uh by the memory model the good news is",
    "start": "2262520",
    "end": "2270480"
  },
  {
    "text": "it forces you to think about what you're really trying to do and the solution to this is the following I I am assigning",
    "start": "2270480",
    "end": "2279160"
  },
  {
    "text": "the values from the structures that I own the cycle count that is in my own structure the parameters I can assign",
    "start": "2279160",
    "end": "2285640"
  },
  {
    "text": "them to Local variables now the closure can capture the local",
    "start": "2285640",
    "end": "2291839"
  },
  {
    "text": "variables and if it keeps this around forever it doesn't matter all it has done is that captured the local",
    "start": "2291839",
    "end": "2297440"
  },
  {
    "text": "variables from here the world structure itself can be used in a number of different places and have very clear",
    "start": "2297440",
    "end": "2303640"
  },
  {
    "text": "ownership this is something that a number of languages didn't get right and I think go has some issues in that space",
    "start": "2303640",
    "end": "2309319"
  },
  {
    "text": "too that you can create references captured enclosures and there is the potential of actually overwriting values",
    "start": "2309319",
    "end": "2315119"
  },
  {
    "text": "because the ownership is not clear rust totally forces you to make absolutely explicit what the ownership of the",
    "start": "2315119",
    "end": "2322800"
  },
  {
    "text": "values",
    "start": "2322800",
    "end": "2325240"
  },
  {
    "text": "is parallelism is then almost a given it becomes so easy because you have made",
    "start": "2329680",
    "end": "2335040"
  },
  {
    "text": "sure that no nothing bad can happen and here I'm showing you one function from a different part in this simulation most",
    "start": "2335040",
    "end": "2341119"
  },
  {
    "text": "of the time in these simulations you want to run multiple at the same time so this thing is called Multiverse so it",
    "start": "2341119",
    "end": "2346839"
  },
  {
    "text": "runs multiple Worlds at the same time and I'm trying to figure out how many to run and how many threads I want to use",
    "start": "2346839",
    "end": "2353800"
  },
  {
    "text": "the computer I did this on has eight cores so I generally want to run seven simulations so it doesn't crawl to a complete hold and what you can see here",
    "start": "2353800",
    "end": "2361680"
  },
  {
    "text": "is again functions are first class Citizen and here it's very simple right I don't have to do I showed you the",
    "start": "2361680",
    "end": "2368480"
  },
  {
    "text": "function and it says where f equals all of that if you have simple functions you can just declare them like this right",
    "start": "2368480",
    "end": "2373880"
  },
  {
    "text": "I'm passing in this world function it takes no parameter and it returns a world it's basically a generator for new",
    "start": "2373880",
    "end": "2379880"
  },
  {
    "text": "worlds to be simulated you can do it like that too what is really interesting",
    "start": "2379880",
    "end": "2385160"
  },
  {
    "text": "though is this bit here this is all you need to do for multi-threading you're basically saying thread. spawn the two",
    "start": "2385160",
    "end": "2392000"
  },
  {
    "text": "bars are basically an empty list I'm not passing anything in I'm cheating a little bit I'm I'm kept ing tum the",
    "start": "2392000",
    "end": "2398400"
  },
  {
    "text": "number of threads from the outside that works but I'm using the move keyword and what that says you can see that there",
    "start": "2398400",
    "end": "2404680"
  },
  {
    "text": "right at the beginning of the green box the move keyword says move the ownership of everything the closure has or tries",
    "start": "2404680",
    "end": "2411319"
  },
  {
    "text": "to capture into the other thread in the case of this number that I'm using it will copy it over so again I can't have",
    "start": "2411319",
    "end": "2418040"
  },
  {
    "text": "this accidental thing where this threat is now changing tum and some other threat that also got it makes a change",
    "start": "2418040",
    "end": "2423760"
  },
  {
    "text": "and I can't reason about my system anymore I'm very explicit when when I want to capture something that I'm passing into a new thread I can only",
    "start": "2423760",
    "end": "2431359"
  },
  {
    "text": "move the ownership the last thing I want to show you because it's a nice summary of how",
    "start": "2431359",
    "end": "2438560"
  },
  {
    "text": "all those features come together thread spawn returns a handle that's the handle of the thread of the thread that is",
    "start": "2438560",
    "end": "2444640"
  },
  {
    "text": "spawning the other ones you can see that there and I'm pushing that onto an array it's basically an array but it has some",
    "start": "2444640",
    "end": "2450480"
  },
  {
    "text": "nice convenience methods like push and pop at some point of course I want to collect all those threads back together",
    "start": "2450480",
    "end": "2456960"
  },
  {
    "text": "before I finish the application right how do I do this you can see there handles. popop I can just pull it out",
    "start": "2456960",
    "end": "2464520"
  },
  {
    "text": "what is the pop interface in most programming languages because at some point the stack is empty right how do",
    "start": "2464520",
    "end": "2470200"
  },
  {
    "text": "you signal the stack is empty most of the time by returning null rust doesn't really want to use",
    "start": "2470200",
    "end": "2476520"
  },
  {
    "text": "null it wants to use options and what is really cool to see here is first the D structuring I can say let sum of H equal",
    "start": "2476520",
    "end": "2485560"
  },
  {
    "text": "handles. pop if handles. pop returns none this thing doesn't happen at all if",
    "start": "2485560",
    "end": "2492680"
  },
  {
    "text": "it does happen if it returns something because of the restructuring that you may know from JavaScript H now is the",
    "start": "2492680",
    "end": "2499079"
  },
  {
    "text": "handle again I don't have to say h equals handles. pop and then I have to say pull out the real value or in Swift",
    "start": "2499079",
    "end": "2506319"
  },
  {
    "text": "you would put exclamation marks to unwrap it or call unwrap explicitly I can use destructuring here and even",
    "start": "2506319",
    "end": "2512240"
  },
  {
    "text": "cooler like many other languages nowadays it can do this not only in if statements but like in the functional",
    "start": "2512240",
    "end": "2517920"
  },
  {
    "text": "tradition of closure and list it can actually do it in a wild statement and I can assign a new name to it so the while",
    "start": "2517920",
    "end": "2523760"
  },
  {
    "text": "loop actually keeps running as long as there's something on the stack and as long as that the case it matches the sum",
    "start": "2523760",
    "end": "2530400"
  },
  {
    "text": "and gives me the handle which I can just um close and if it's over it's a none",
    "start": "2530400",
    "end": "2535920"
  },
  {
    "text": "the whole let thing doesn't happen the Y Loop gets a a false or I'm done with you and can continue",
    "start": "2535920",
    "end": "2543480"
  },
  {
    "text": "running that is all I guess time allows as a set as a brief overview of rust as",
    "start": "2544000",
    "end": "2550440"
  },
  {
    "text": "a programming language but I do want to end with a small section oh I highlighted there with a small section",
    "start": "2550440",
    "end": "2556920"
  },
  {
    "text": "on performance what did that do interestingly I mentioned earlier on this simulation I had written beforehand",
    "start": "2556920",
    "end": "2562680"
  },
  {
    "text": "when I wanted to learn rust I had existing code enclosure this by the way is a visualization of one of the runs I",
    "start": "2562680",
    "end": "2569760"
  },
  {
    "text": "mean normally it runs much faster you wouldn't want to see it like that but it's nice to see and I written that inclosure I would say I'm a reasonably",
    "start": "2569760",
    "end": "2575880"
  },
  {
    "text": "competent closure programmer other closure Pro programmers look over the code it is idiomatic the simulation",
    "start": "2575880",
    "end": "2581880"
  },
  {
    "text": "there ran at about 110,000 cycles per second of each of the",
    "start": "2581880",
    "end": "2587880"
  },
  {
    "text": "creatures I reimplemented this really exactly in Rust I literally took the",
    "start": "2587880",
    "end": "2593280"
  },
  {
    "text": "acceptance tests of the closure version copied them into a rust file changed it until it compiled and then implemented",
    "start": "2593280",
    "end": "2599880"
  },
  {
    "text": "the functionality so I'm very very sure that the implementation is the implementation of exactly the same",
    "start": "2599880",
    "end": "2606119"
  },
  {
    "text": "problem when I first R this in Rust I got to this 3 and a half or 3.5 million Cycles that's almost like 30 times as",
    "start": "2606119",
    "end": "2613200"
  },
  {
    "text": "fast that was what I was hoping for to be honest I thought okay that I I mean I've done enough C program myself I know",
    "start": "2613200",
    "end": "2619359"
  },
  {
    "text": "the speed up I know that the Java VM is fantastic but some of these things because especially inclosure you have to",
    "start": "2619359",
    "end": "2624800"
  },
  {
    "text": "copy all the dictionaries and so on I like okay that's probably not unlikely what was interesting though I was",
    "start": "2624800",
    "end": "2630599"
  },
  {
    "text": "running this from the IDE all the time I was was programming and at some point I remembered yeah it's running a debug",
    "start": "2630599",
    "end": "2636800"
  },
  {
    "text": "Bild what would happen if I do a release build of this with all the bounce checks",
    "start": "2636800",
    "end": "2642640"
  },
  {
    "text": "and the removed and the compiler actually being really optimized and ended up there so 25 million so it's a",
    "start": "2642640",
    "end": "2649800"
  },
  {
    "text": "massive speed up again over the debug build at that point I will say though I",
    "start": "2649800",
    "end": "2656000"
  },
  {
    "text": "noticed in the profiler which I really struggled with there wasn't it's not like in Java where you have like five profilers to choose from and they're all",
    "start": "2656000",
    "end": "2662040"
  },
  {
    "text": "nice and graphical it's a bit more Bare Bones at this stage but I did man manage to get some profiling done and it turned",
    "start": "2662040",
    "end": "2668440"
  },
  {
    "text": "out that about half the time was spent running in the random number generator Russ tries to be safe so the",
    "start": "2668440",
    "end": "2674559"
  },
  {
    "text": "normal random number generator is cryptography safe so it is a really good random number generator for these",
    "start": "2674559",
    "end": "2680480"
  },
  {
    "text": "creatures to decide whether they want to eat or sleep or turn left it didn't have to be safe from a cryptography",
    "start": "2680480",
    "end": "2685559"
  },
  {
    "text": "perspective so I went for a very simple xor shift random number generator and that gave a lot of the speed up that may",
    "start": "2685559",
    "end": "2691960"
  },
  {
    "text": "have had I done this in hindsight might have speed up the closure version a little bit too I don't know I never profiled this this I will be honest",
    "start": "2691960",
    "end": "2697760"
  },
  {
    "text": "about that I don't have scientific data again probably would be another talk but I do",
    "start": "2697760",
    "end": "2703040"
  },
  {
    "text": "want to leave you with at least the view that I wasn't the only one to see this there's Brian canil the author of dra",
    "start": "2703040",
    "end": "2708319"
  },
  {
    "text": "trce I don't know whether you know it it's a tracing tool for for understanding Linux and other Unix based",
    "start": "2708319",
    "end": "2713400"
  },
  {
    "text": "operating systems and he had written an analysis tool and he was in a similar state in I he was wanted to learn rust",
    "start": "2713400",
    "end": "2719359"
  },
  {
    "text": "and he took what he knew and implemented it and that's what his experience was also again a very experienced C",
    "start": "2719359",
    "end": "2725640"
  },
  {
    "text": "programmer",
    "start": "2725640",
    "end": "2728640"
  },
  {
    "text": "so a little bit like myself I like yeah as long as the compiler doesn't spit out these Page Long errors and my unit tester passing is probably going to be",
    "start": "2732200",
    "end": "2738319"
  },
  {
    "text": "all right and he was in a similar situation he knew the problem domain he had the code and he just just basically",
    "start": "2738319",
    "end": "2743520"
  },
  {
    "text": "translating into Russ and that's what he left with interestingly is the findings also from that blog article so this is",
    "start": "2743520",
    "end": "2749319"
  },
  {
    "text": "um a 229 megabyte file about 4 million State transitions in there the first",
    "start": "2749319",
    "end": "2755119"
  },
  {
    "text": "implementation he had was purely in Javas scpt and I can't resist making that joke again whenever somebody says nodejs is",
    "start": "2755119",
    "end": "2763240"
  },
  {
    "text": "blazingly fast they've probably never seen anything but noj and that is also what Brian of",
    "start": "2763240",
    "end": "2770040"
  },
  {
    "text": "course knew so what he did is that was unacceptable to him 83 seconds was just like that can't be right so what he did",
    "start": "2770040",
    "end": "2775520"
  },
  {
    "text": "is he rewrote the core processing Loop in that nodejs in C and the most of the",
    "start": "2775520",
    "end": "2780760"
  },
  {
    "text": "Java Script code was just calling the core c function that gave him this result so 99% of the runtime he is now",
    "start": "2780760",
    "end": "2789280"
  },
  {
    "text": "in C the node the JavaScript part is just the wrapper around it and remember now what he said was he just tried to",
    "start": "2789280",
    "end": "2795720"
  },
  {
    "text": "get the rust version working somehow without the optimizations or anything else and that's what ended up being the",
    "start": "2795720",
    "end": "2801800"
  },
  {
    "text": "case he spent much more time than I apparently looking into what the compiler does interestingly I didn't",
    "start": "2801800",
    "end": "2807160"
  },
  {
    "text": "mention this rust also uses the llvm the lowlevel virtual machine that is also C",
    "start": "2807160",
    "end": "2813160"
  },
  {
    "text": "and Swift so it has the same back end and yet of often times it actually comes out faster than C code even and he had",
    "start": "2813160",
    "end": "2820599"
  },
  {
    "text": "some theories around why or how the CPU was used how certain parts of the CPU",
    "start": "2820599",
    "end": "2825680"
  },
  {
    "text": "were utilized to actually get a better execution profile than even more or less native C",
    "start": "2825680",
    "end": "2830960"
  },
  {
    "text": "code and that is all I had for you but I do have time I think for some questions thank you",
    "start": "2830960",
    "end": "2836810"
  },
  {
    "text": "[Applause] [Music] [Applause]",
    "start": "2836810",
    "end": "2845530"
  }
]