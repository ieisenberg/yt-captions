[
  {
    "start": "0",
    "end": "90000"
  },
  {
    "text": "Hi, my name is Dave Farley. I'm \na software developer, and author,   and a big fan of test-driven development.  ",
    "start": "12000",
    "end": "19680"
  },
  {
    "text": "I'm here today talking to Saleem Siddiqui, who's \nwritten \"Learning Test-Driven Development,\"  ",
    "start": "20560",
    "end": "26480"
  },
  {
    "text": "which is a smashing book, which I've got here. If \nyou're beginning out with test-driven development,  ",
    "start": "27040",
    "end": "34240"
  },
  {
    "text": "it's a great book. If you've tried it, and \nyou're not quite sure, it's a great book.  ",
    "start": "34240",
    "end": "39280"
  },
  {
    "text": "And so, we're going to be talking about that here \ntoday. Saleem, welcome to the GOTO Book Club.",
    "start": "41680",
    "end": "48720"
  },
  {
    "text": "Thanks, Dave, for the kind words. I'm going \nto co-opt, frankly, shamelessly steal some   of your introduction. I'm also a practitioner, \nand if it wasn't a dead giveaway by the book,  ",
    "start": "48720",
    "end": "59440"
  },
  {
    "text": "I've written also an avid practitioner and \na firm proponent of test-driven development.  ",
    "start": "59440",
    "end": "64239"
  },
  {
    "text": "Dave and I share, I guess, some part of \nour history together, having worked for   ThoughtWorks in both of our pasts, where \nwe learned, I hope, some of the skills and  ",
    "start": "65440",
    "end": "74399"
  },
  {
    "text": "philosophies that bind us together. I was really \nhappy when this opportunity to talk to you, Dave,  ",
    "start": "75200",
    "end": "80560"
  },
  {
    "text": "came kind of to my doorstep, and of course, in \nthe context of something we're both passionate   about. So, I look forward to talking to \nour audience, and with you on the subject.",
    "start": "82720",
    "end": "89280"
  },
  {
    "text": "So, one of the interesting things...well, there \nare many interesting things about your book, but   one of the interesting things about your book \nis that you chose to write it in three different  ",
    "start": "89280",
    "end": "97920"
  },
  {
    "start": "90000",
    "end": "712000"
  },
  {
    "text": "languages. So, who's the audience? Why did \nyou do that, and who are you aiming this at? ",
    "start": "97920",
    "end": "106320"
  },
  {
    "text": "Yeah, so good question. One of the things that I \nhave heard, and it's a fair criticism or at least  ",
    "start": "106320",
    "end": "113840"
  },
  {
    "text": "a complaint against adopting TDD in practice, \nis oh, it doesn't work in my stack, it doesn't  ",
    "start": "115280",
    "end": "121520"
  },
  {
    "text": "work in my language. I understand that. I have \na bit of empathy for that. And the reason being  ",
    "start": "121520",
    "end": "126399"
  },
  {
    "text": "Kent Beck, who with all deference, calls himself \nthe rediscoverer of test-driven development,   not the inventor, he didn't just rediscover \ntest-driven development or write the seminal  ",
    "start": "127360",
    "end": "138160"
  },
  {
    "text": "book on it, he also created JUnit. And of course, \nthat has had its history, its popularity, but  ",
    "start": "138160",
    "end": "144400"
  },
  {
    "text": "it's also given people, developers, well-meaning \ndevelopers but mistaken ones, I would say,  ",
    "start": "144400",
    "end": "149840"
  },
  {
    "text": "the ability to use that as an excuse. Oh, \nit only works in those kinds of languages,   or in the JVM, at most, it doesn't work in my \nworld. I want to take that head-on by saying,  ",
    "start": "149840",
    "end": "159920"
  },
  {
    "text": "look, there are three different languages. Of \ncourse, you could argue that JavaScript and  ",
    "start": "159920",
    "end": "164319"
  },
  {
    "text": "Python have some similarities, \nbut Go is better and frankly,   by its own admission, is not really TDD. \nSo, there is a contrast between the three  ",
    "start": "165120",
    "end": "177600"
  },
  {
    "text": "languages which I do address directly in the \npreface as well. So, that was one reason. And to your question, who is it targeted at, \nit's targeted at people like myself, frankly,  ",
    "start": "177600",
    "end": "186480"
  },
  {
    "text": "developers, people I work with. As I mentioned \nin the preface, a really large impetus towards  ",
    "start": "186480",
    "end": "192800"
  },
  {
    "text": "writing this was my own personal experience \nover the last several years, seeing developers   across the spectrum of their experience \nstruggling with adopting TDD in practice,  ",
    "start": "192800",
    "end": "202480"
  },
  {
    "text": "developers who are otherwise, frankly, more \ncapable than I am, but really couldn't apply TDD  ",
    "start": "202480",
    "end": "207200"
  },
  {
    "text": "proverbially \"out of a paper bag.\" \nAnd I felt that this was not only a  ",
    "start": "209600",
    "end": "214720"
  },
  {
    "text": "sad state of affairs, frankly, for the industry \nbut also something of a learning gap that they   could overcome. So, I wrote it for all of those \npeople. If anybody finds something of value,  ",
    "start": "215360",
    "end": "222799"
  },
  {
    "text": "I think the effort would not have gone in vain.\nThat's an interesting thing. I often get a  ",
    "start": "222800",
    "end": "227840"
  },
  {
    "text": "similar kind of pushback when helping people \nto adopt my preferred approach to software  ",
    "start": "228640",
    "end": "234400"
  },
  {
    "text": "development, which is continuous delivery, which \nincludes test-driven development, of course. But   I often get the pushback, oh, it couldn't work \nin my circumstances with this technology, or  ",
    "start": "234400",
    "end": "244160"
  },
  {
    "text": "whatever else. I've yet to find a technology or a \ncircumstance where either one is not applicable,  ",
    "start": "244160",
    "end": "252480"
  },
  {
    "text": "as a fair bit of TDD with stuff built writing \nfirmware devices for various kinds of hardware,  ",
    "start": "252480",
    "end": "261120"
  },
  {
    "text": "one way or another. One of my colleagues wrote \na unit version for Unix shell scripts, which we  ",
    "start": "261120",
    "end": "275280"
  },
  {
    "text": "were doing infrastructure as code, and we were \ntesting the infrastructure as code scripts using  ",
    "start": "275280",
    "end": "280240"
  },
  {
    "text": "those. We were even mocking out some of the \ninfrastructures as code pieces during the   TDD. So, I think it's interesting. One of the \nthings that I always also found interesting was  ",
    "start": "281280",
    "end": "288960"
  },
  {
    "text": "just comparing and contrasting the differences in \napproach through the three different languages,  ",
    "start": "288960",
    "end": "295039"
  },
  {
    "text": "as I was looking through the book.\nIt's great that you mentioned that,   about having done it in different contexts. I make \na passing reference to having used COBOL unit in  ",
    "start": "295920",
    "end": "304560"
  },
  {
    "text": "my own past. I would not normally associate COBOL \nas a language that TDD could work in, but it does.  ",
    "start": "304560",
    "end": "311760"
  },
  {
    "text": "I used it, I demonstrated it. And I would invite \npeople to go back to Ken Beck's book's preface,  ",
    "start": "311760",
    "end": "317840"
  },
  {
    "text": "where he talks about having learned test-driven \ndevelopment from punchcard developers of yore. So,  ",
    "start": "318400",
    "end": "324560"
  },
  {
    "text": "if punchcard developers in, I don't know, \nsome bygone decade were using it, then I   have some empathy, but I would say not a lot of \nempathy or understanding for the excuse or the  ",
    "start": "324560",
    "end": "337120"
  },
  {
    "text": "argument that it doesn't work in my stack. If \nit works in a punchcard, it will work for you.  Yes. So for my book, \"Modern Software \nEngineering,\" I did some research on the  ",
    "start": "337120",
    "end": "346800"
  },
  {
    "text": "history of software development and software \nengineering, and one of the seminal things in   software engineering was a conference that \nwas held in 1968, which was hosted by NATO,  ",
    "start": "346800",
    "end": "358160"
  },
  {
    "text": "to for the first time, to try and define what \nengineering for software meant. In the proceeds,  ",
    "start": "358160",
    "end": "366000"
  },
  {
    "text": "one of the things that I read was a treaty by Alan \nPerlis, a famous computer scientist of the day,  ",
    "start": "366000",
    "end": "372480"
  },
  {
    "text": "absolutely describing test-driven development. \nIn languages like ALGOL and COBOL, and you know,  ",
    "start": "373760",
    "end": "380480"
  },
  {
    "text": "Fortran and those sorts of things, \nand, on punchcard systems. 1968.  ",
    "start": "382160",
    "end": "387360"
  },
  {
    "text": "So, I think Kent is right, that that's where it \ncomes from. Kent is modest when he talks about,  ",
    "start": "387360",
    "end": "395520"
  },
  {
    "text": "reinventing it, but it's partly true. \nCertainly, the ideas were around before  ",
    "start": "397760",
    "end": "402800"
  },
  {
    "text": "then. I think Kent Beck wrote JUnit \non an airplane ride, I read somewhere.  It's interesting, some of these stories \nof genesis. It;'s great, I mean, actually,  ",
    "start": "402800",
    "end": "412960"
  },
  {
    "text": "not that we want to take opposite sides on \nthis to people who practice it or not, but   if it was to be a debate or a confrontation, \nI would say the traditionalist position is  ",
    "start": "413680",
    "end": "422320"
  },
  {
    "text": "it is traditional. Like, if you're not doing \nthis, you're kind of bucking the trend. I mean,  ",
    "start": "422320",
    "end": "427760"
  },
  {
    "text": "there's nothing that's more traditional than NATO \nand DARPA and all of those things. If you want to   think of big government agencies saying this \nis the way software should be developed, then  ",
    "start": "427760",
    "end": "437360"
  },
  {
    "text": "I guess that's pretty much the mainstream.\nSo, I also read some sort of stuff recently   about the flight control systems for the Mercury \nprogram, which predated the Apollo missions,  ",
    "start": "437360",
    "end": "448080"
  },
  {
    "text": "were written using test-driven development in \nNASA. Until NASA got all bureaucratic about  ",
    "start": "449680",
    "end": "454720"
  },
  {
    "text": "their software sometime later, which people like \nMargaret Hamilton were kind of railing against.  ",
    "start": "454720",
    "end": "460400"
  },
  {
    "text": "So, interesting stuff during, you know, \nthe birth of our discipline, I think.  I have a theory, and I want to hear your feedback \non why...or your thoughts on why it might have,  ",
    "start": "460400",
    "end": "469760"
  },
  {
    "text": "in a sense, might have become less mainstream or \nless popular, this whole discipline of test-driven   development over the decades. It's all about fast \nfeedback, right? So when we were doing punchcard  ",
    "start": "469760",
    "end": "479199"
  },
  {
    "text": "development, feedback was measured automatically \nin hours, if not days. If you were lined up behind  ",
    "start": "479200",
    "end": "484320"
  },
  {
    "text": "somebody else's stack of punchcards, you could \nbe told, come back tomorrow for your results,  ",
    "start": "484320",
    "end": "489440"
  },
  {
    "text": "so you wanted fast feedback, so there was this \nnatural tendency of how can I make my programs  ",
    "start": "489440",
    "end": "494720"
  },
  {
    "text": "run faster? Of course, that's what it's all about.\nI think when computers obviously got orders  ",
    "start": "494720",
    "end": "500720"
  },
  {
    "text": "of magnitude faster, some of that emphasis that \nnobody waits, hopefully, days for their feedback,  ",
    "start": "500720",
    "end": "506400"
  },
  {
    "text": "so now the question is between what we would \nprefer in the test-driven development realm on   the order of a few seconds, at the speed of the \ndeveloper's inner loop, versus anything longer,  ",
    "start": "506400",
    "end": "516640"
  },
  {
    "text": "right? Minutes, we try to shy away from \nminutes, but if you were coming from...or   comparing yourself for, well, those people had \nto target feedback not getting to them until the  ",
    "start": "516640",
    "end": "526560"
  },
  {
    "text": "next day, so we are not waiting 'til the next \nday, so maybe this discipline of test-driven   development isn't all that relevant today. Versus \nwe would argue, or certainly implore that you  ",
    "start": "526560",
    "end": "536240"
  },
  {
    "text": "could always work at a pace where feedback is as \nfast and as ready as when you want it. If it's  ",
    "start": "536240",
    "end": "541760"
  },
  {
    "text": "really in the order of seconds, if that's how \nfast you're developing in that inner loop, then   you should demand it. And your process is just as \nimportant, and you should argue for, labor for,  ",
    "start": "541760",
    "end": "551440"
  },
  {
    "text": "lobby for those kinds of architectural mechanisms \nand practices that give you that fast feed, right? ",
    "start": "551440",
    "end": "557280"
  },
  {
    "text": "I think some of that dilution of emphasis \nprobably has come from computers that have   gotten awfully faster, and developers are, \nin some sense, inclined to be less demanding  ",
    "start": "557280",
    "end": "570480"
  },
  {
    "text": "about how fast feedback could be in the modern \nworld. I wonder if you see things in this light?  To some degree, certainly. I think that \npart of the change is probably to do with  ",
    "start": "570480",
    "end": "583200"
  },
  {
    "text": "the increasing sophistication of our software \nand our computer systems. In the early days  ",
    "start": "583200",
    "end": "589840"
  },
  {
    "text": "of computing, predating me, and I've been doing \nit for a while, but in the early days, everybody  ",
    "start": "590640",
    "end": "600000"
  },
  {
    "text": "realized that this was incredibly difficult. The \npeople that were engaged in writing software,  ",
    "start": "600000",
    "end": "606720"
  },
  {
    "text": "were, PhD geniuses, dedicated. This was an \ninsanely difficult thing for human beings to do.  ",
    "start": "606720",
    "end": "615759"
  },
  {
    "text": "What we've done, by making computers and software \nmore accessible, and improving the quality of  ",
    "start": "616480",
    "end": "624720"
  },
  {
    "text": "technology is we've kind of lowered \nthe bar. You don't need to be a genius  ",
    "start": "625360",
    "end": "631040"
  },
  {
    "text": "to write software anymore. And I'm not \nbelittling people. That's a good thing. But  ",
    "start": "631040",
    "end": "637040"
  },
  {
    "text": "one of the things that I think with software \nis we're usually a step or two away from some  ",
    "start": "639200",
    "end": "646000"
  },
  {
    "text": "incredibly deep, complex, difficult problems, \nyou know? As soon as you take a branch, you  ",
    "start": "646000",
    "end": "651360"
  },
  {
    "text": "are immediately into a world of concurrency and \ncomplexity of having information in two different  ",
    "start": "651360",
    "end": "656560"
  },
  {
    "text": "places, and how you manage that, and all that kind \nof thing. So, as soon as you launch a new thread,   you're into the same game. Our equivalent \nof quantum physics is, you know, is that.",
    "start": "656560",
    "end": "667360"
  },
  {
    "text": "We don't think, because of the \nease with which we can begin,   the ease with which we can get started with \nthe tools and technologies at our fingertips,  ",
    "start": "670640",
    "end": "678480"
  },
  {
    "text": "I don't think we often think about that, and \nso I don't think we're quite afraid enough  ",
    "start": "678480",
    "end": "682959"
  },
  {
    "text": "of the software systems that we build. So in \nthe olden days, people were more afraid of the  ",
    "start": "683840",
    "end": "689520"
  },
  {
    "text": "systems that they were building because they knew \nhow little they knew how they were going to work. ",
    "start": "689520",
    "end": "694000"
  },
  {
    "text": "This feeling of always teetering on the edge of \nthe precipice of some kind of failure ought to  ",
    "start": "695360",
    "end": "700240"
  },
  {
    "text": "drive us towards discipline like TDD, and of \ncourse CD, continuous delivery and deployment,  ",
    "start": "701600",
    "end": "706959"
  },
  {
    "text": "but it doesn't. At least not as \noften as you and I would wish.",
    "start": "706960",
    "end": "709920"
  },
  {
    "start": "712000",
    "end": "1598000"
  },
  {
    "text": "We're all prone to that. At the \nmoment at which you're typing,   it feels faster not to write a test. The trouble \nis, is that you're going to write buggier code,  ",
    "start": "712400",
    "end": "723040"
  },
  {
    "text": "you're going to spend more time debugging it \nlater. We know that there's a dramatic improvement  ",
    "start": "723040",
    "end": "728480"
  },
  {
    "text": "in productivity when you write the tests, but you \nget that gain back later on, not at the moment  ",
    "start": "728480",
    "end": "734560"
  },
  {
    "text": "when you're typing. Actually, you're getting me \nto answer the question I was going to ask you,  ",
    "start": "734560",
    "end": "740160"
  },
  {
    "text": "which is, in your preface, you say \nTDD is often adopted grudgingly  ",
    "start": "741360",
    "end": "748240"
  },
  {
    "text": "and abandoned readily. So, why is it \nadopted grudgingly, and abandoned readily? ",
    "start": "748240",
    "end": "753760"
  },
  {
    "text": "It's a bit of that, right? I mean, thanks for \ndoing that fill-in. It's just that feeling of   discipline, right? I mean, so many \nanalogies are drawn with whether you're  ",
    "start": "755040",
    "end": "763360"
  },
  {
    "text": "trying to become a healthier individual, right? \nBecoming a healthier individual is seldom an   enjoyable process, whether you're giving up \nyour favorite foods, or going to the gym,  ",
    "start": "763920",
    "end": "772079"
  },
  {
    "text": "or whatever it is, you're trying to do that, at \nthat moment it isn't very enjoyable, let's face   it, right? The act of living, becoming better in \nwhatever aspect of your life that you look at,  ",
    "start": "772080",
    "end": "781040"
  },
  {
    "text": "we were, before the recording started, we were \ntalking about music, and how hard it is to create   music. The act of creating music, I'm tone-deaf, \nbut I would imagine, having watched musicians,  ",
    "start": "781840",
    "end": "791280"
  },
  {
    "text": "in itself, there might be some \nmeasure of immediate gratification,   but it's also a frustrating aspect, right? The act \nof creating something of value is in itself labor. ",
    "start": "791920",
    "end": "803120"
  },
  {
    "text": "If people were asking me, hey, how \nwas writing a book, and I'm like,   it's a labor of love, and I'm still not sure \nwhich part is greater, the labor or the love.  ",
    "start": "803120",
    "end": "809759"
  },
  {
    "text": "I think that applies to anything worthwhile, the \nact of creating is effortful. You're spot on that  ",
    "start": "812560",
    "end": "820400"
  },
  {
    "text": "effort at that moment can lead to frustration \nfor some people, to the extent that they say  ",
    "start": "820400",
    "end": "825920"
  },
  {
    "text": "just chuck it. I don't want to do this, right? I \ndon't want to write this failing test right now.   I can just visualize the code I'm going to write, \nand I've got this, whatever, real or imaginary  ",
    "start": "825920",
    "end": "834000"
  },
  {
    "text": "manager breathing down my neck, wanting to have \nthis feature finished. I absolutely agree that  ",
    "start": "834000",
    "end": "842160"
  },
  {
    "text": "I have empathy for that feeling of frustration \nand the external pressure that many developers  ",
    "start": "842160",
    "end": "847279"
  },
  {
    "text": "and people in the software business field.\nI actually lean back to other things. I just  ",
    "start": "847280",
    "end": "853280"
  },
  {
    "text": "mentioned music, and I like lean \nback on more traditional, I guess  ",
    "start": "853280",
    "end": "857680"
  },
  {
    "text": "less cutting-edge things. This is an example I \nuse when people say, oh, I don't have time, or  ",
    "start": "858800",
    "end": "864240"
  },
  {
    "text": "my manager won't like it if I spend time writing \ntests first, I use the example of restaurants. So,  ",
    "start": "864240",
    "end": "870000"
  },
  {
    "text": "I can go into any restaurant, and let's say I \ncan order a dish, let's say I order linguini.  ",
    "start": "870000",
    "end": "874160"
  },
  {
    "text": "As a customer, as somebody who's paying for it, \nthere's no ambiguity there, who's paying for this,   it's me, I can order it...if I'm having linguini, \nI can order it al dente, or I can order it soft,  ",
    "start": "875600",
    "end": "885040"
  },
  {
    "text": "if I'm allergic to butter, I can tell them, \nhey, hold the butter, whatever, I have some   control over it. What I don't get to do in any \nrestaurant in the world, any food truck, any place  ",
    "start": "885040",
    "end": "894480"
  },
  {
    "text": "that delivers food is say, look, I'm going to go \nbackstage into your kitchen, and I'm going to look   over your chef, and I'm going to see how many \ntimes, or how much time he or she takes to boil  ",
    "start": "894480",
    "end": "905040"
  },
  {
    "text": "the linguini, and I'm going to basically tell them \nto do it faster, cut some corners. By the way,  ",
    "start": "905040",
    "end": "910320"
  },
  {
    "text": "I don't get to tell the waiter, I'm not going to \npay for this nice china and cutlery you're going   to put it on, just slap it on some old newspaper, \nand cut me $10 off the menu price. I don't get to  ",
    "start": "911360",
    "end": "921440"
  },
  {
    "text": "do that, right? There are some parts of the \nprocess of cooking food that are inextricably  ",
    "start": "921440",
    "end": "926880"
  },
  {
    "text": "tied to the safe, healthy, and tasteful \nproduction of food. No chef nor restaurant,  ",
    "start": "926880",
    "end": "932320"
  },
  {
    "text": "no matter how high end or how pedestrian it \nis would tolerate such a paying customer. Yet in the software world, we are very ready, if \nsomebody tells us, hey, just don't do unit tests,  ",
    "start": "932320",
    "end": "941600"
  },
  {
    "text": "they're not necessary. Some of it is upon our \nown...how much we value our craft. We have to  ",
    "start": "941600",
    "end": "948720"
  },
  {
    "text": "be like any chef or any food manufacturer who \nsays, look, I can't make food like that, so  ",
    "start": "948720",
    "end": "955519"
  },
  {
    "text": "we should say I can't make software like this. It \ncomes pre-baked this way. The only question there  ",
    "start": "955520",
    "end": "961200"
  },
  {
    "text": "is do you want to do it, or do you not, right? So, \nI try to use analogies like that when I confront  ",
    "start": "961200",
    "end": "966320"
  },
  {
    "text": "that question, as I'm sure you do as well, that \nhey, this is frustrating, and I'm going to be   asked to not do it anyways, we should, frankly, \ntake a little bit more pride in our own craft. ",
    "start": "966320",
    "end": "975200"
  },
  {
    "text": "We're in danger of too violently agreeing \nwith each other through the course of this   conversation. For people that don't \nknow me, I run a YouTube channel, and  ",
    "start": "975200",
    "end": "986880"
  },
  {
    "text": "I did a video on almost exactly this topic a \nlittle while ago, and one of the things that I  ",
    "start": "988480",
    "end": "994320"
  },
  {
    "text": "said is when somebody asks me to estimate some \ncode, I don't say, well, last week I typed  ",
    "start": "994320",
    "end": "1001280"
  },
  {
    "text": "3,000 letter Es, how many Es would you like me \nto type next week? But software developers all  ",
    "start": "1002560",
    "end": "1009680"
  },
  {
    "text": "of the time say, well, I can do it for this if I \ndon't do any tests, or I can do it for this if I  ",
    "start": "1009680",
    "end": "1014720"
  },
  {
    "text": "cut corners and don't do any good design, or I \ncan do it for this if I don't do any refactoring.   So, why do we do that? You know, we are complicit. \nI get pushback all of the time from the teams  ",
    "start": "1014720",
    "end": "1025839"
  },
  {
    "text": "that I work with, oh, we'd really like to do \nthese things, Dave, but our product owner or   our business or whoever is telling us that we've \ngot to deliver all these features. The answer to  ",
    "start": "1025840",
    "end": "1036079"
  },
  {
    "text": "that is that the data in the \"Accelerate\" book \nby Nicole Forsgren, Gene Kim and Jen Humble  ",
    "start": "1036080",
    "end": "1042399"
  },
  {
    "text": "says definitively that teams that work the \nway that we're talking about, you know,  ",
    "start": "1043040",
    "end": "1048960"
  },
  {
    "text": "spend 44% more time on new features than \nteams that don't. So, if your boss is saying  ",
    "start": "1049600",
    "end": "1058080"
  },
  {
    "text": "build more features, the answer is yes, that \nmeans I need to do more testing, I need to do  ",
    "start": "1058800",
    "end": "1064160"
  },
  {
    "text": "more good design, I need to focus on the \nquality of my output more, and not cut corners. ",
    "start": "1064160",
    "end": "1071760"
  },
  {
    "text": "I agree 100% with what you said, we have to \ntake on the professional duty of care, the  ",
    "start": "1071760",
    "end": "1076880"
  },
  {
    "text": "responsibility that that's our job, that's what we \ndo. You don't hire a chef and say, you know, we're  ",
    "start": "1076880",
    "end": "1082800"
  },
  {
    "text": "going to hire you, but you're not allowed to wash \nthe dishes as you go, you know? We don't do that. ",
    "start": "1082800",
    "end": "1087440"
  },
  {
    "text": "Then the next question, obviously, might \nbe, so, why don't we collectively, right,   the collective we, the developer community kind \nof toughen up our spines or say that? And this is  ",
    "start": "1089600",
    "end": "1098400"
  },
  {
    "text": "sensitive, and apologies to those developer \nfriends of mine who take umbrage at this,   I include myself in that. The other aspect that \nmakes test-driven development, in my opinion,  ",
    "start": "1099040",
    "end": "1106799"
  },
  {
    "text": "harder to adopt and easy to abandon, as I \nsay, is it requires you to be very vulnerable.  ",
    "start": "1106800",
    "end": "1111760"
  },
  {
    "text": "It is that process of I don't know \nhow this thing is going to turn out. I  ",
    "start": "1112800",
    "end": "1118640"
  },
  {
    "text": "probably have a good first step in my mind, I \ncan visualize the first red-green refactor cycle,  ",
    "start": "1119760",
    "end": "1125120"
  },
  {
    "text": "but I'm not sure about the second one, and I \nfrankly don't have a clue about what comes after.   If you're a senior developer, let's say you're \npair programming, and you and I know some of these  ",
    "start": "1125120",
    "end": "1132640"
  },
  {
    "text": "practices also reinforce each other, right, \nyou are encouraged to do pair programming,   or to utilize test-driven development alongside \npair programming, I can imagine how hard it is  ",
    "start": "1132640",
    "end": "1142400"
  },
  {
    "text": "for a seasoned programmer to admit to \na junior colleague, I don't know how   this is going to turn out. So, there's that \nquestion of being highly vulnerable, right? ",
    "start": "1142400",
    "end": "1149440"
  },
  {
    "text": "I think there's a lot of healthy growth \nin being vulnerable, and emphasizing the  ",
    "start": "1149440",
    "end": "1155200"
  },
  {
    "text": "iterative nature of all of software development, \nand how test-driven development scaffolds you,   ratchets you up that ladder. There's nothing wrong \nwith that. But it does take you to kind of take a  ",
    "start": "1155200",
    "end": "1164800"
  },
  {
    "text": "big gulp of your own kind of ego at first and say, \nI don't have the whole algorithm fully formed in  ",
    "start": "1164800",
    "end": "1172000"
  },
  {
    "text": "my head, which is just going to come out of \nmy fingertips. There is nothing like that.   At some level, I think...and I hope I'm \nnot kind of making a strawman argument,  ",
    "start": "1172000",
    "end": "1179440"
  },
  {
    "text": "at some level, I think there's the expectation, \nespecially of senior software developers,   that they don't make, can't or won't make \nmistakes. I think that we should just kind of  ",
    "start": "1179440",
    "end": "1188240"
  },
  {
    "text": "publicly and vociferously say the whole business, \nand I thought other people have done that,   the thing about software development is we never \ncreate literally the same thing twice, right?  ",
    "start": "1188880",
    "end": "1197680"
  },
  {
    "text": "That's where it differs from widgets, I think. \nNothing wrong with widget making. The industry   and engineering have had hundreds of years to \nkind of hone their skills, but we don't ever  ",
    "start": "1197680",
    "end": "1206960"
  },
  {
    "text": "make the same thing twice. It's not like making \nan automobile or a hammer. We create new systems   all the time. We're solving unsolved problems\nAnother point on which I violently agree is,  ",
    "start": "1206960",
    "end": "1214559"
  },
  {
    "text": "I think one of the profound mistakes that we've \nmade in our industry is to think of our problem  ",
    "start": "1215760",
    "end": "1222320"
  },
  {
    "text": "as a production problem. And it's not, for exactly \nthe reason you say. Software is unique, really,  ",
    "start": "1222320",
    "end": "1227679"
  },
  {
    "text": "in the fact that the cost of production is free, \nor as close to free as making...it doesn't matter.  ",
    "start": "1227680",
    "end": "1233840"
  },
  {
    "text": "We just copy the bytes, a million times if \nnecessary, it doesn't matter. But it's the act of  ",
    "start": "1234400",
    "end": "1241760"
  },
  {
    "text": "creation. And I don't think we think about it, we \ndon't think about it that way. I talk a lot about  ",
    "start": "1241760",
    "end": "1247520"
  },
  {
    "text": "software engineering these days because that's the \nbee in my bonnet, but I think... I mean, a lot of  ",
    "start": "1247520",
    "end": "1255120"
  },
  {
    "text": "people, when you use the term engineering, \nthey imagine some big bureaucratic process.   But actually, it's fundamentally a creative \nact, at least, certainly, for software. I  ",
    "start": "1255120",
    "end": "1265840"
  },
  {
    "text": "would argue for other types of engineering, too, \nbut certainly, for software, our discipline is a  ",
    "start": "1265840",
    "end": "1271360"
  },
  {
    "text": "hugely creative discipline, and primarily a \ncreative discipline. That gets back to what  ",
    "start": "1271360",
    "end": "1276480"
  },
  {
    "text": "you were saying earlier about, thinking about \nthe way that musicians create things and bounce  ",
    "start": "1276480",
    "end": "1281679"
  },
  {
    "text": "ideas off each other, it's one of the reasons \nthat I value pair programming quite so much is  ",
    "start": "1281680",
    "end": "1286880"
  },
  {
    "text": "that little bounce of ideas back and forth, the \nconversation that you have, and you get better  ",
    "start": "1286880",
    "end": "1291920"
  },
  {
    "text": "ideas. The sum of you and I working together is \nprobably going to produce something better than  ",
    "start": "1291920",
    "end": "1297360"
  },
  {
    "text": "either one of us would produce alone \nbecause we get to bounce those ideas around.",
    "start": "1297360",
    "end": "1303120"
  },
  {
    "text": "There's a deeper kind of the point, and I \nhope we're not kind of exploiting music for   our software interests, but somebody reminded \nme that the best years that the Beatles had  ",
    "start": "1303120",
    "end": "1311600"
  },
  {
    "text": "were when they were together. \nThen, of course, many of them had   careers after that, more so Paul McCartney \nthan the others, but certainly it could be  ",
    "start": "1312160",
    "end": "1319360"
  },
  {
    "text": "argued based on numbers and sales and popularity, \nnot as successful as when they were together,   right? So, I don't know, maybe...and I'll \nadmit it's a stretch of an analogy, but  ",
    "start": "1319360",
    "end": "1327759"
  },
  {
    "text": "if we try to tie ourselves to the fact that \nall software is a creative exercise, and that   prima facie is true, right, it's not about copying \nthe bytes over. I mean, cloning a repository is  ",
    "start": "1329280",
    "end": "1338559"
  },
  {
    "text": "more or less zero cost. That's not what we're \ntalking about, it's creating the code in that   repository in the first place. If you accept that \nthat's a creative act, then the act of creating  ",
    "start": "1338560",
    "end": "1346800"
  },
  {
    "text": "is always by fits and starts. And I think \nthat would apply, I would even argue,  ",
    "start": "1346800",
    "end": "1352000"
  },
  {
    "text": "and you are as well, to all aspects of creation \nis just so that in software, the fact that we are  ",
    "start": "1352000",
    "end": "1357040"
  },
  {
    "text": "primarily, in fact exclusively worried about \nthe act of creating software, right? Copying of   software is really a solved problem if there ever \nwas any. So, therefore, we should invest in those  ",
    "start": "1357840",
    "end": "1367360"
  },
  {
    "text": "tools, those techniques, those practices, and \nhabits that refine this creative aspect, right,  ",
    "start": "1367360",
    "end": "1372640"
  },
  {
    "text": "and not worry about the production semantics.\nI think the word engineer, because of the   connotations with another traditional engineering, \ndoes create a false mental picture. It certainly  ",
    "start": "1372640",
    "end": "1381600"
  },
  {
    "text": "creates a production model in our head, which \nthat's not even software's problem, right?  ",
    "start": "1381600",
    "end": "1385600"
  },
  {
    "text": "Copying bytes has never been the problem.\nWe could certainly debate engineering,   but then we'd be talking about my book, not yours. \nBut I think this idea of, the exploratory nature  ",
    "start": "1386720",
    "end": "1398320"
  },
  {
    "text": "with which we grow our understanding of a problem, \nand evolve our solutions to meet our understanding  ",
    "start": "1398320",
    "end": "1405600"
  },
  {
    "text": "of the problem over time is a cornerstone of \nwhy I would argue test-driven development is  ",
    "start": "1405600",
    "end": "1412640"
  },
  {
    "text": "so important. Because it gives us that ability, \nthat kind of backplane to bounce our ideas off,  ",
    "start": "1412640",
    "end": "1418720"
  },
  {
    "text": "and make change more safely, and, and proceed.\nI would agree. And if you're always teetering  ",
    "start": "1419360",
    "end": "1427120"
  },
  {
    "text": "between the...or on some precipice, it's good to \nhave some scaffolding in place. Even if you're  ",
    "start": "1427120",
    "end": "1432160"
  },
  {
    "text": "exploring this unexplored territory, whatever \nproblem space you're solving with software,   it's good to have the design kind of unfold in \nfront of us incrementally as opposed to taking  ",
    "start": "1432160",
    "end": "1443040"
  },
  {
    "text": "broad leaps of imagination, untested broad \nleaps of imagination, and say this will work.  ",
    "start": "1443040",
    "end": "1447600"
  },
  {
    "text": "And of course the feedback. I think that's the \nmost mechanical part of it, right?  I have yet to  ",
    "start": "1448720",
    "end": "1454880"
  },
  {
    "text": "hear a good argument against it. Like if you had a \nshorter feedback loop, why wouldn't you go for it?   Like, isn't fast feedback an awesome thing? \nI came up with a lovely analogy...sorry,  ",
    "start": "1454880",
    "end": "1464400"
  },
  {
    "text": "I'm talking about my book again. But if \nyou're tasked with balancing a broom,  ",
    "start": "1466720",
    "end": "1471840"
  },
  {
    "text": "you could work out, you could calculate the center \nof mass of the broom, could figure out the dome on  ",
    "start": "1473040",
    "end": "1481840"
  },
  {
    "text": "the handle of the broom, and figure out where \nthe center of mass passes through that points   of contact precisely. You could, with great skill, \nmaneuver the broom so there was no impulse, and it  ",
    "start": "1482400",
    "end": "1492320"
  },
  {
    "text": "was perfectly balanced. There's one solution to \nthat problem. But if you were really tasked with  ",
    "start": "1492320",
    "end": "1497679"
  },
  {
    "text": "balancing a broom, you'd put the broom on your \nhand, and then you'd wobble your hand around.   And that's feedback. That's the power of \nfeedback. That's how rockets balance on  ",
    "start": "1497680",
    "end": "1507120"
  },
  {
    "text": "the thrust of their motors. This is a profoundly \nmore stable, more effective strategy, there are  ",
    "start": "1507120",
    "end": "1513840"
  },
  {
    "text": "an infinite number of solutions to that problem. \nThe slower the feedback, the greater the move that  ",
    "start": "1515840",
    "end": "1521679"
  },
  {
    "text": "I've got to know to cope with it. But you know, \nif I get really fast, short feedback cycles like  ",
    "start": "1521680",
    "end": "1526880"
  },
  {
    "text": "we're talking about, I can make tiny little moves, \nand keep everything apparently, perfectly stable. ",
    "start": "1526880",
    "end": "1533360"
  },
  {
    "text": "I think it's that realization that we're always \nexploring uncharted territory whenever we're   creating any code beyond Hello World, right? \nOr I would argue even if you're learning  ",
    "start": "1533360",
    "end": "1542720"
  },
  {
    "text": "Hello World in a new language, that's] because \nthere are infinitely many ways to get it wrong.  ",
    "start": "1542720",
    "end": "1548640"
  },
  {
    "text": "I wouldn't say necessarily one way to get it \nright, but relatively a much more finite and small   set of ways to get it right. You're better off \nhaving your feedback that as soon as you go wrong,  ",
    "start": "1550000",
    "end": "1559280"
  },
  {
    "text": "you have a failing test, or some manner \nof completely unmistakable, in your face  ",
    "start": "1559280",
    "end": "1565040"
  },
  {
    "text": "thing, with enough detail telling you how and \nwhere you went wrong, that you should actually   lobby and kind of make sure that is the case. Make \nsure all of your learning, and as we just said,  ",
    "start": "1565600",
    "end": "1575679"
  },
  {
    "text": "all of the creation of software is really \nlearning, is supported by that, right? So,  ",
    "start": "1575680",
    "end": "1580080"
  },
  {
    "text": "I would encourage my software developers to \nalways lobby for it. Whenever they're told,   or they feel that they are being dictated to, \nthat's not important, they should just say no,  ",
    "start": "1581040",
    "end": "1588720"
  },
  {
    "text": "this is the only way we're going to explore this \nproblem space that you have put in front of us. Yes and we're the experts in software \ndevelopment, that's our part of the problem.  ",
    "start": "1588720",
    "end": "1595920"
  },
  {
    "text": "So, getting back to your book, rather \nthan philosophizing in general about   test-driven development. One of the \nthings that I liked about it was that  ",
    "start": "1597520",
    "end": "1604960"
  },
  {
    "start": "1598000",
    "end": "1967000"
  },
  {
    "text": "you kind of really reinforced the idea of \nred-green-refactor throughout the book.  ",
    "start": "1606000",
    "end": "1609840"
  },
  {
    "text": "Could you just talk a little bit about \nthe red-green-refactor, its importance,   and why you saw that as kind of the \ncornerstone of your book, I suppose? ",
    "start": "1611520",
    "end": "1619120"
  },
  {
    "text": "Just real quick, I actually love that we're \nphilosophizing about it because the book   absolutely does not, I hope, doesn't philosophize \nat all, or not much. There is one section in the  ",
    "start": "1619120",
    "end": "1627600"
  },
  {
    "text": "preface that says why I believe in it, and \nwhy people smarter than I believe in it,   but then it says in that section, and so the \nrest of the book is really about the RGR,  ",
    "start": "1627600",
    "end": "1635679"
  },
  {
    "text": "as you mentioned. But the reason I wanted to focus \non RGR is, I mean, to use, I guess, market speech,  ",
    "start": "1635680",
    "end": "1643200"
  },
  {
    "text": "operationalizing the act of test-driven \ndevelopment, right? So it's fine,   we can talk about it, and again, I do love talking \nabout the whys and wherefores of the test-driven  ",
    "start": "1643200",
    "end": "1651679"
  },
  {
    "text": "development, but I suspect most of my colleagues \nwho want to learn are interested in the how, like,  ",
    "start": "1651680",
    "end": "1657600"
  },
  {
    "text": "how do I do it? And the how is very much rooted in \nRGR. And so, frankly, every chapter, starting from  ",
    "start": "1657600",
    "end": "1665360"
  },
  {
    "text": "chapter one, is focused on RGR. I make those \ncycles at the beginning very explicit. Like,  ",
    "start": "1665360",
    "end": "1671440"
  },
  {
    "text": "each section, in the beginning, there's a section \nfor getting a red test, getting it to green, and   then getting it to refactor. Of course, the book \npicks up pace in later chapters to kind of do that  ",
    "start": "1671440",
    "end": "1680480"
  },
  {
    "text": "in sequence always, so the sequence \nis never broken, but they do speed up.  The reason I wanted to dwell on it is just to, \nas I said, operationalize it. After you kind of  ",
    "start": "1681040",
    "end": "1691120"
  },
  {
    "text": "get over the inner restraints or skepticism that \ndevelopers have towards or against test-driven  ",
    "start": "1691120",
    "end": "1697920"
  },
  {
    "text": "development, then when they overcome that, then \nthey're like, okay, well, how do I do it? Teach   me how to do it, right? I mean, and I say that \nat the beginning, like every skill in the world,  ",
    "start": "1697920",
    "end": "1706240"
  },
  {
    "text": "you have to learn it. Nobody's born with it, \nthis is not an innate skill. Everybody learns it,  ",
    "start": "1706240",
    "end": "1711360"
  },
  {
    "text": "so we can learn, you can learn, all of \nus can learn. So, I think the RGR cycle,   and then slowing things down when you need to, \nand knowing that you can speed up when you need to  ",
    "start": "1711360",
    "end": "1719679"
  },
  {
    "text": "is fundamental to learning test-driven \ndevelopment as a practice. As opposed to  ",
    "start": "1719680",
    "end": "1723840"
  },
  {
    "text": "kind of this overarching thing that \nwe believe, at least I believe,   and you and I are of one mind on this, that it's \nreally one of the better ways to solve a problem,  ",
    "start": "1724720",
    "end": "1734480"
  },
  {
    "text": "set that aside for a minute, how do I learn \nit? I think getting better at the RGR cycle,   that triad is, I think, the best \nlearning mechanism that I know of to  ",
    "start": "1735280",
    "end": "1744560"
  },
  {
    "text": "learn test-driven development as a practice. \nSo, I focus the bulk of the book on that. Even when, in chapter six, we write a very small \nJavaScript test harness, I kind of borrowed that,  ",
    "start": "1744560",
    "end": "1756799"
  },
  {
    "text": "paid homage Kent Beck's book where he builds, \nessentially, another JUnit at the end of his book,   I didn't build it for all three languages, but I \ndid build it for JavaScript, and there are some  ",
    "start": "1759440",
    "end": "1767760"
  },
  {
    "text": "reasons given in the book. Primarily because \nit was worth doing, and JavaScript, of course,  ",
    "start": "1767760",
    "end": "1772960"
  },
  {
    "text": "with the node ecosystem has so many testing \nframeworks that I didn't want to pick one,   and then, again, open myself to the argument \nthat, oh, it only works in this test framework,  ",
    "start": "1772960",
    "end": "1781360"
  },
  {
    "text": "and not in my framework of choice. So, we \nbuild our own test framework in chapter six.   There we see a slightly different incarnation \nof the RGR cycle. So, I use that not just  ",
    "start": "1781360",
    "end": "1791600"
  },
  {
    "text": "as a metaphor for this fast feedback thing, but \nas, frankly, as a literal kind of three-step  ",
    "start": "1793200",
    "end": "1799600"
  },
  {
    "text": "scaffold, if you will, to kind of always be \nbuilding new things in a couple of different   settings. One is, of course, building the \ntest example, but in chapter six, there's also  ",
    "start": "1800640",
    "end": "1809360"
  },
  {
    "text": "a small test harness that is built using \nthe RGR cycle. So I found it useful,   and hopefully, my readers do as well.\nI liked at one point in the book where you  ",
    "start": "1809360",
    "end": "1816480"
  },
  {
    "text": "use the accidental miss...wrong implementation \nof your tests so that the tests weren't running  ",
    "start": "1820320",
    "end": "1829919"
  },
  {
    "text": "to demonstrate the importance of running them and \nseeing them fail. I thought that was a nice take. ",
    "start": "1829920",
    "end": "1836800"
  },
  {
    "text": "Yes, that was important to me, Dave, \nbecause again, as I said at the beginning,   this book didn't come out fully formed from \nmy head, either, lest somebody out there is  ",
    "start": "1836800",
    "end": "1846480"
  },
  {
    "text": "under that mistaken assumption. So obviously, the \ncreation of the book, of course, a book that is so   heavy with code is itself an iterative process. \nSo, I had reached that point, and there was this  ",
    "start": "1846480",
    "end": "1856559"
  },
  {
    "text": "opportunity to improve the code, and of course, \nbecause we had those tests, we could do that.  ",
    "start": "1856560",
    "end": "1860880"
  },
  {
    "text": "I would say, I would admit, frankly, and without \nany shame that when I reached that point in the  ",
    "start": "1861840",
    "end": "1867679"
  },
  {
    "text": "manuscript of the book, the opportunity to \nkind of teach that lesson presented itself,   and I took it. But I didn't know it when I was \nwriting chapter zero or one. For any kind of  ",
    "start": "1867680",
    "end": "1877520"
  },
  {
    "text": "aspiring authors out there, hey, test-driven \ndevelopment is also good for writing books. ",
    "start": "1877520",
    "end": "1880800"
  },
  {
    "text": "When Jez Humble and I wrote \"Continuous Delivery,\" \nwe ran continuous integration on the book as well. ",
    "start": "1883760",
    "end": "1890280"
  },
  {
    "text": "We do literally eat our own dogwood, \ndon't we? I mean, this is not...  We do.\n...this is not just a way of,   without the kind of making it sound too \nencompassing, this is a little bit of way  ",
    "start": "1891440",
    "end": "1899600"
  },
  {
    "text": "of life as far as the creative process goes. \nAnd of course, I have to thank my publishers,   O'Reilly, of course, they have, obviously, all \nthe tooling in place so when you're writing  ",
    "start": "1899600",
    "end": "1908320"
  },
  {
    "text": "the book that you're writing, incremental \nmanuscripts of the book, you can generate   the PDFs and the pubs and all of that, you can see \nhow that's looking, so all of that is incremental,  ",
    "start": "1908320",
    "end": "1917440"
  },
  {
    "text": "right? I mean, this is not like we live in \nthis realm when we are kind of in public,   and then we go do our kind of snarky little things \non the side. No, this is literally, when we talk  ",
    "start": "1917440",
    "end": "1926480"
  },
  {
    "text": "about fast feedback, it does encompass all aspects \nof our creativity...those parts of our life that  ",
    "start": "1926480",
    "end": "1932400"
  },
  {
    "text": "are concerned with creating stuff. \nI would say, very kind of overtly,  ",
    "start": "1932400",
    "end": "1938400"
  },
  {
    "text": "that creating this book was in itself an \nincremental process, and I was really happy.   There's no unit test that I wrote for the book, \nbut it is very much an act of fast feedback,  ",
    "start": "1938400",
    "end": "1948240"
  },
  {
    "text": "which sometimes means soliciting feedback \nfrom human peers, from my reviewers,   but very much so also in the realm of software. \nThere are analogs for how test-driven development  ",
    "start": "1948960",
    "end": "1962160"
  },
  {
    "text": "relates to creating software versus \nother creative aspects, such as prose. I also liked the way that you kind of \ndemonstrate practically and in a fine-grained way  ",
    "start": "1962160",
    "end": "1975440"
  },
  {
    "start": "1967000",
    "end": "2143000"
  },
  {
    "text": "the importance of refactoring. My experience \nin teaching test-driven development is people   often miss the refactoring step, and they tried \nto immediately jump to the perfect solution  ",
    "start": "1975440",
    "end": "1984880"
  },
  {
    "text": "to try and get the test passing, and spend too \nmuch time doing that. I liked the fact you said  ",
    "start": "1984880",
    "end": "1990960"
  },
  {
    "text": "the early chapters go quite slowly, and you're \nhard coding return values, and then show the   refactoring steps that get you to it. So, I think \none of the observations that I make of people that  ",
    "start": "1990960",
    "end": "2001520"
  },
  {
    "text": "become comfortable with test-driven development \nis the way...how small the steps that they take,  ",
    "start": "2001520",
    "end": "2009280"
  },
  {
    "text": "you know, shrink to you. I'm sure that you and I, \nif we were working together, would both be making  ",
    "start": "2009840",
    "end": "2016799"
  },
  {
    "text": "tiny little steps, one at a time, and getting that \nlittle validation to kick all of the time as we   were working. It's certainly the way that I work, \nand I'm certain it's, from your book and talking  ",
    "start": "2016800",
    "end": "2025440"
  },
  {
    "text": "to you, that it's the way that you work, too.\nYes. And it's important, right, because as we have  ",
    "start": "2025440",
    "end": "2030480"
  },
  {
    "text": "said, there are so many ways to go wrong, right? \nSo, just kind of pretending when you're in the  ",
    "start": "2030480",
    "end": "2035919"
  },
  {
    "text": "G state green that you also can do refactoring. I \nmean, sometimes, and I say if you...more power to  ",
    "start": "2036480",
    "end": "2043600"
  },
  {
    "text": "you if you can visualize doing that, and then of \ncourse, if you're pair programming, you can run it   by your pair, or you can, maybe when you write \nyour next test, whether you're refactoring was  ",
    "start": "2043600",
    "end": "2051119"
  },
  {
    "text": "done hastily or not will become more apparent. \nBut it's always, I think, helpful, and has been  ",
    "start": "2051120",
    "end": "2056159"
  },
  {
    "text": "helpful to me to focus on the green when I'm in \nthe green part of the RGR trial, knowing full well  ",
    "start": "2056160",
    "end": "2062000"
  },
  {
    "text": "that I have the refactoring part coming up right \nafter that, so I'll have an opportunity to kind   of mend back all the corners that I cut during \nmy green state. So, it's just knowing that there  ",
    "start": "2062000",
    "end": "2073227"
  },
  {
    "text": "is a place for everything helps. Go ahead.\nI talk about the three mindsets of the red-green  ",
    "start": "2073227",
    "end": "2078639"
  },
  {
    "text": "refactor cycle. We're kind of doing, essentially, \noutside in API design in red, we're doing,  ",
    "start": "2078640",
    "end": "2087039"
  },
  {
    "text": "minimum changes to get back to safety in green, \nand then we're doing beautifying and generalizing  ",
    "start": "2090000",
    "end": "2097040"
  },
  {
    "text": "our design, and making it perfect in refactor.I \nwant that cycle to be really fast and tight, and  ",
    "start": "2097040",
    "end": "2104000"
  },
  {
    "text": "you know, move really quickly.\nI feel a lot of liberation once   I get to green, to refactor, because I have \nthose green tests, I have almost a license to  ",
    "start": "2104640",
    "end": "2113680"
  },
  {
    "text": "prettify my code, or if there's, of course, \nsub-optimalities, be they hardcoded values or an  ",
    "start": "2115520",
    "end": "2121360"
  },
  {
    "text": "extra loop or nested loop, that I can now unroll \ninto one, I have those tests. If I make a mistake,   I can always revert, and go back to the previous \nstate of green, right? So, not speeding up through  ",
    "start": "2121360",
    "end": "2130319"
  },
  {
    "text": "those two phases too much is actually an act \nof liberation, right? Once I get to the green,   I then have the license to do as much necessary \nrefactoring as I want. So, it's coming,  ",
    "start": "2130320",
    "end": "2138720"
  },
  {
    "text": "like, it just requires a little bit \nof discipline to get to green first. I also liked that in the book, throughout the \nbook, you also keep reminding us to, to involve  ",
    "start": "2138720",
    "end": "2151520"
  },
  {
    "start": "2143000",
    "end": "2280000"
  },
  {
    "text": "continuous integration, committing your things to \nversion control as well, so that you've got that  ",
    "start": "2151520",
    "end": "2157280"
  },
  {
    "text": "step back, you know? If you do screw up, you can \njust revert your changes, and it's a small step. ",
    "start": "2157280",
    "end": "2163360"
  },
  {
    "text": "Thanks for spotting that, obviously. So \nchapter 13, the penultimate chapter is all   about continuous integration, and hopefully, we \ncan talk about that for a few minutes as well.  ",
    "start": "2165040",
    "end": "2172240"
  },
  {
    "text": "But one of the things I wanted to mention is \nthat when Kent Beck wrote his book continuous  ",
    "start": "2172240",
    "end": "2177920"
  },
  {
    "text": "integration wasn't as big a thing 20 years \nago, literally now, when his book came out.   Certainly, continuous development wasn't a thing \nuntil you and Jez talked about it, or continuous  ",
    "start": "2177920",
    "end": "2187360"
  },
  {
    "text": "deployment and delivery. So certainly, there \nwas an opportunity for me to utilize that.  ",
    "start": "2187360",
    "end": "2192160"
  },
  {
    "text": "Again, it's not about TDD, I understand chapter \n13 is its own thing, but those two things go so   much in harmony, and it would have been, I think, \na colossal waste. I knew this when I was starting  ",
    "start": "2192880",
    "end": "2202880"
  },
  {
    "text": "the book, that I wanted to talk about continuous \nintegration in the book. In a book about testing   and test-driven development, it would be a \nlittle bit of a shame, in the latter part  ",
    "start": "2202880",
    "end": "2212560"
  },
  {
    "text": "of this decade, that I didn't talk about CI.\nI knew I was going to do that. But the act   of actually committing everything to get in each \nchapter came a little bit later, I think. When I  ",
    "start": "2212560",
    "end": "2221600"
  },
  {
    "text": "got to about writing chapter seven, I'm like, this \nis going to become too much in the CI chapter,   if we commit all of the code at once, and then add \nCI on top of it. How about we incrementally commit  ",
    "start": "2221600",
    "end": "2231280"
  },
  {
    "text": "everything to Git, and then introduce GitHub \nand GitHub actions in chapter 11. So, that   was a bit of an epiphany for me as I got \nlater into the book. But I'm really glad,  ",
    "start": "2231280",
    "end": "2240160"
  },
  {
    "text": "the way it turned out, and feedback tells me so. \nAnd certainly, I'm very happy, and hopefully,  ",
    "start": "2240160",
    "end": "2245200"
  },
  {
    "text": "people find that useful, that it is not just \nthat in the act of creating or crafting your  ",
    "start": "2245200",
    "end": "2250560"
  },
  {
    "text": "software that the test-driven approach helps \nbecause software is always changing, right? It's   always malleable on those tests, and of course, \nyou want to run them continuously, or go CI.  ",
    "start": "2250560",
    "end": "2260319"
  },
  {
    "text": "I hope that people find that added benefit \nthat comes in chapter 13 to their liking,  ",
    "start": "2261200",
    "end": "2266240"
  },
  {
    "text": "and it reifies the whole concept of \ntest-driven development for them as well.",
    "start": "2266240",
    "end": "2269520"
  },
  {
    "text": "I was already sold, but yes, I \nthought that was a nice take that you  ",
    "start": "2272320",
    "end": "2277360"
  },
  {
    "text": "had that in place. Sorry, there was something \non the screen that just distracted me. Sorry.  So I think one of the pushbacks that I see \nfrom time to time is people saying that  ",
    "start": "2277920",
    "end": "2284560"
  },
  {
    "start": "2280000",
    "end": "2883000"
  },
  {
    "text": "they would do test-driven development \nif only they knew the solution better.  ",
    "start": "2286480",
    "end": "2292160"
  },
  {
    "text": "I think this kind of completely misses the point \nin terms of what we're doing. I certainly believe  ",
    "start": "2292880",
    "end": "2300559"
  },
  {
    "text": "that test-driven development is much more a design \ntool than it is a testing tool, and I know that  ",
    "start": "2300560",
    "end": "2306320"
  },
  {
    "text": "you do too, from reading your book. So how do \nyou think that test-driven development drives  ",
    "start": "2306320",
    "end": "2312720"
  },
  {
    "text": "the design process? And how would you respond to \nthose people that say, \"Oh, I can't do test-driven  ",
    "start": "2312720",
    "end": "2317760"
  },
  {
    "text": "development because I don't know the answer yet\"?\nMy first response to that... Again, this is rooted   in vulnerability. I would say, \"I don't know \nit either.\" And I would go further and say,  ",
    "start": "2317760",
    "end": "2326240"
  },
  {
    "text": "\"I doubt anybody does.\" I mean, if it's an act \nof creation if you think there's some sage,  ",
    "start": "2326240",
    "end": "2332080"
  },
  {
    "text": "some mystique who knows this fully formed solution \nout there. If there is, let's go up that mountain   and ask that person, right? I mean, they can \njust give me...give us a solution. Finally,  ",
    "start": "2332080",
    "end": "2340240"
  },
  {
    "text": "we can rid ourselves of all of this tedium \nand then go on and do something else,   right? But, of course, that's a little bit of \na tongue-in-cheek answer, but it's rooted in  ",
    "start": "2340240",
    "end": "2347440"
  },
  {
    "text": "all seriousness. If somebody says, \"I don't know \nthe solution,\" I would say, \"I don't either.\"  I'd make a stronger statement, \"Nobody does.\" So \nwhile we are in the act of creating a solution  ",
    "start": "2347440",
    "end": "2356080"
  },
  {
    "text": "that does not exist, we are better off using \nprocesses that give us rapid, fast feedback,  ",
    "start": "2356080",
    "end": "2361360"
  },
  {
    "text": "and that we craft in a way that \nthe solution is more emergent than   this false notion of some fully \nformed solution out there that we are  ",
    "start": "2361360",
    "end": "2369520"
  },
  {
    "text": "kind of getting access to, right? There's this \nmetaphoric disconnect there. There is no fully  ",
    "start": "2369520",
    "end": "2375520"
  },
  {
    "text": "formed solution out there. We're crafting it \nas we go along, all of us, collectively. So,   we have better server processes that \nhelp as opposed to processes that hinder. ",
    "start": "2375520",
    "end": "2384080"
  },
  {
    "text": "The second thing I would say to your point, \nabout encouraging those people or kind of  ",
    "start": "2384080",
    "end": "2389840"
  },
  {
    "text": "countering this argument, would be to say \nthat \"Look, it's...\" Even if you could  ",
    "start": "2390720",
    "end": "2398400"
  },
  {
    "text": "accept for a second that there is a solution \nout there, a point solution out there,  ",
    "start": "2398400",
    "end": "2403440"
  },
  {
    "text": "as unlikely as that is, complex problems don't \nhave a single-point solution out there, as you   said earlier in your example as well, wouldn't it \nbe better to approach that solution with assured  ",
    "start": "2403440",
    "end": "2414880"
  },
  {
    "text": "small steps, knowing that we're working towards \nit as opposed to away from it, or diverting away   from it, right? Even if there's a point solution \nout there, we want to make sure that we're making  ",
    "start": "2414880",
    "end": "2423280"
  },
  {
    "text": "progress towards it and not going on a tangent. \nSo I would use those kinds of counterpoints. ",
    "start": "2423280",
    "end": "2428880"
  },
  {
    "text": "I would, again, start by saying that I don't \nbelieve there is a point solution. I certainly   don't believe anybody has that solution \nfully formed in their head. We're all,  ",
    "start": "2429440",
    "end": "2436400"
  },
  {
    "text": "in a very fair sense, stumbling towards that. \nWhat we wanna do is take small steps...enough  ",
    "start": "2437440",
    "end": "2443680"
  },
  {
    "text": "steps that our stumbles are less catastrophic, \nright? If you're always, always stumbling towards  ",
    "start": "2443680",
    "end": "2448160"
  },
  {
    "text": "a solution, not the solution, then it's better to \ntake small steps, so when you stumble, you're not   falling headfirst into something, and that you're \nable to course correct. I know I mixed a lot of  ",
    "start": "2449120",
    "end": "2458799"
  },
  {
    "text": "metaphors there, but that's the approach or \nresponse I would say is, \"Look, we are always  ",
    "start": "2458800",
    "end": "2463520"
  },
  {
    "text": "in the act of creating light out of the \ndarkness. And it's better done in the  ",
    "start": "2464080",
    "end": "2470400"
  },
  {
    "text": "small incremental steps of fast feedback rather \nthan whatever else might be the alternative. ",
    "start": "2470400",
    "end": "2475200"
  },
  {
    "text": "There's another aspect that \nI think, too, which is,  ",
    "start": "2475760",
    "end": "2480480"
  },
  {
    "text": "I think it's the testing word. And I think part of \nthe problem of test-driven development is called   test-driven development, and people start thinking \nabout it from the point of view of testing. Often,  ",
    "start": "2483920",
    "end": "2497440"
  },
  {
    "text": "people will think about testing after \nthe fact, you know, as a result of that  ",
    "start": "2497440",
    "end": "2501680"
  },
  {
    "text": "because that's a natural thing to think about \nwhen you're talking in terms of testing.   And so, what that means is that they're looking \nto, \"Oh, well, I've got to have the solution  ",
    "start": "2502640",
    "end": "2511520"
  },
  {
    "text": "in mind in order to be able to imagine what it \nis that I need to test.\" And when you do that,  ",
    "start": "2511520",
    "end": "2517120"
  },
  {
    "text": "you get much worse tests. Even if you'd \nwrite them first, you get much worse tests. ",
    "start": "2517120",
    "end": "2521840"
  },
  {
    "text": "I think that one of the ideas that it seems \nto me really drives the design, which I think  ",
    "start": "2522400",
    "end": "2530319"
  },
  {
    "text": "that you've got nice, just implicitly in the \nexamples in your book. But one of the ideas   that really drives the design is you want your \ntest to specify the outcomes from your code,  ",
    "start": "2530320",
    "end": "2541280"
  },
  {
    "text": "not the implementation. So you want to focus them \non what's the desirable outcome from this piece of  ",
    "start": "2542320",
    "end": "2548560"
  },
  {
    "text": "code, even at a fine-grained level, and not care \nabout how it works. That's a much more durable  ",
    "start": "2548560",
    "end": "2555040"
  },
  {
    "text": "form of specification, even at this fine-grained \nlevel, of what we want our code to do. That starts  ",
    "start": "2555040",
    "end": "2563760"
  },
  {
    "text": "to drive certain design techniques and things \nthat are really important. So things that you  ",
    "start": "2563760",
    "end": "2569520"
  },
  {
    "text": "talk about in the book like dependency injection.\nCorrect. Sorry, I was gonna say, that's the   point that you, in one of your recent videos, \nbrought out very well, which I think you were  ",
    "start": "2569520",
    "end": "2575040"
  },
  {
    "text": "testing something like a web server, which \nshouldn't return localhost when it's run  ",
    "start": "2575040",
    "end": "2579360"
  },
  {
    "text": "in a localhost fashion.\nYes.  Even that test, the outside in test that you \nshowed, clearly it was written after the fact  ",
    "start": "2581200",
    "end": "2587840"
  },
  {
    "text": "because there was so much scaffolding, so \nmuch setup that needed to happen that it   really couldn't have been written in TDD. This \nis an example. Partly I think, and I will admit,  ",
    "start": "2587840",
    "end": "2595920"
  },
  {
    "text": "somewhat facetiously, that I wish it wasn't called \ntest-driven development, and somewhat test-driven  ",
    "start": "2595920",
    "end": "2601200"
  },
  {
    "text": "design would be a better thing. Whatever it still \nwould be the same acronym. But the act that it's   focused on design and testing is really a \nmeans to an end, which is something that I  ",
    "start": "2601200",
    "end": "2608400"
  },
  {
    "text": "cover both in the beginning and \nat the end of the book in Chapter   14, coding can be direct. In a very literal \nsense, we are tasked with and frankly,  ",
    "start": "2609120",
    "end": "2617520"
  },
  {
    "text": "paid for writing better quality production code. \nTesting is a means towards an end. Nobody mistakes   that it's an end unto itself, it's a means to an \nend, but it's a pretty darn good means to an end.",
    "start": "2617520",
    "end": "2626080"
  },
  {
    "text": "Then the whole notion of design is central, front, \nand central in test-driven development because, as  ",
    "start": "2626080",
    "end": "2632640"
  },
  {
    "text": "you said, it is very outcome-based, even at that \nsmall level of granularity when people think, \"Oh,  ",
    "start": "2632640",
    "end": "2637680"
  },
  {
    "text": "TDD is about writing unit tests first.\" Unit tests \nare by definition small. So how much outcome-based   tests can you write?\" It becomes an implementation \nmatter. And then you say, \"No, it doesn't have to  ",
    "start": "2637680",
    "end": "2646320"
  },
  {
    "text": "be. In fact, it shouldn't be well-written TDD.\" \nUnit tests are very outcome-focused. That frees  ",
    "start": "2646320",
    "end": "2652640"
  },
  {
    "text": "you into finding an incremental, simpler, the \nsimplest thing that works, kind of, designed to  ",
    "start": "2652640",
    "end": "2657839"
  },
  {
    "text": "fulfill that outcome. When you kind of do that \nmind shift, adopt that \"aha\" moment, then you  ",
    "start": "2657840",
    "end": "2664400"
  },
  {
    "text": "do decouple, even at that level of granularity, \nthe unit tests from the implementation of the   code. Of course, that comes very starkly in your \nface, in the refactoring phase, where you have  ",
    "start": "2664400",
    "end": "2673599"
  },
  {
    "text": "full license to change the implementation \nof, frankly, either side, the unit tests   or the production code, as long as your tests \nagree. As long as you don't change the behavior. ",
    "start": "2673600",
    "end": "2682640"
  },
  {
    "text": "So that does separate, as you say, the \noutcome-based style, the unit tests, and   test-driven tests. Really, it should be written, \nversus the implementations. You have to write some  ",
    "start": "2682640",
    "end": "2691360"
  },
  {
    "text": "implementation at the end of the day, or at \nthe end of the unit test to pass it. But it's   a couple. The tests shouldn't suppose that the \ncode has a loop or calls recursion, or whatever  ",
    "start": "2691360",
    "end": "2701600"
  },
  {
    "text": "have you. That's up to you to decide in the latter \npart of the RGs. But if you're writing the test,   the test should test the outcomes.\nDave Farley:  Absolutely.  ",
    "start": "2701600",
    "end": "2709920"
  },
  {
    "text": "I think that's one of the superpowers that \nadvanced practitioners of this start to perceive,  ",
    "start": "2712560",
    "end": "2722320"
  },
  {
    "text": "is that when you really buy into that kind of idea \nand start doing that, it has a profound impact  ",
    "start": "2723200",
    "end": "2730079"
  },
  {
    "text": "on the design of the code that we produce. I'm a \nlongtime practitioner of test-driven development,  ",
    "start": "2730080",
    "end": "2737920"
  },
  {
    "text": "but my code looks different since I've been doing \nthat. But after, I had a funny experience when I  ",
    "start": "2739280",
    "end": "2747920"
  },
  {
    "text": "was writing my book, where I tried to write \nsome bad code to demonstrate, poor cohesion,  ",
    "start": "2747920",
    "end": "2754079"
  },
  {
    "text": "bad separation, and concerns, all of that \nkind of thing. I started writing it using TDD,  ",
    "start": "2754080",
    "end": "2759760"
  },
  {
    "text": "and I couldn't. It wasn't possible for me to write \ncode that was bad enough to demonstrate the points  ",
    "start": "2759760",
    "end": "2765600"
  },
  {
    "text": "that I was trying to. Test-driven development just \nprevented me from writing code that was that bad.  ",
    "start": "2765600",
    "end": "2770240"
  },
  {
    "text": "And there's not much else that's like that.\nThere are good reasons for that, David. And   when people say, \"Well, how does it work? \nWhere's the secret sauce?\" And I say, \"Well,  ",
    "start": "2771120",
    "end": "2778080"
  },
  {
    "text": "there's really no secret sauce to it.\" Or if there \nis... And I think you talked about it in one of   your YouTube videos as well if you were gonna \ndisplay it in your head, right? If you're gonna  ",
    "start": "2778080",
    "end": "2786800"
  },
  {
    "text": "end up with spaghetti production code, and you \nwere gonna arrive at it with TDD, what would you   have written first? A test. And how do you think \nthat test would look? Worst spaghetti, right? ",
    "start": "2786800",
    "end": "2795520"
  },
  {
    "text": "Yes.\nAnd who in their mind   would write a really bad spaghetti test, unit test \ncode for TDD? Nobody would do that. Nobody would  ",
    "start": "2795520",
    "end": "2802160"
  },
  {
    "text": "subject themselves to that kind of torture.\nYes.  So, you just wouldn't. Therefore, you don't end up \nwith spaghetti code on the production side because  ",
    "start": "2802160",
    "end": "2810720"
  },
  {
    "text": "way before you ever were done with that \nfailing test, you would have stopped and said,   \"Wait a minute, this test shouldn't have \n17 lines of setup, or five or seven\"  ",
    "start": "2810720",
    "end": "2817920"
  },
  {
    "text": "You wouldn't do that, right? So therein lies the \nsecret sauce, that you would write a test that  ",
    "start": "2819200",
    "end": "2824640"
  },
  {
    "text": "was readable, manageable by you, comprehensible \nto you and your peer programmer, and therefore,  ",
    "start": "2824640",
    "end": "2830079"
  },
  {
    "text": "when you're about to make that test go green, \nyou wouldn't have the need to write spaghetti   code. Really, that forcing function, that is it, \nit's essentially a forcing function. By forcing  ",
    "start": "2830080",
    "end": "2840000"
  },
  {
    "text": "you to write tests first, it prevents you from \nhaving a spaghetti code on the production side   because you would have had way before then, the \nspaghetti code on the test side, which you just  ",
    "start": "2840000",
    "end": "2847359"
  },
  {
    "text": "wouldn't tolerate as a self-respecting developer.\nYes, absolutely. It plays to my laziness. I don't  ",
    "start": "2847360",
    "end": "2852960"
  },
  {
    "text": "wanna type that much stuff when \nI'm writing a test. Absolutely.  It really turns that laziness into something \nproductive, right? No developer would write  ",
    "start": "2852960",
    "end": "2861040"
  },
  {
    "text": "hundreds of lines of unit tests before turning \ntheir attention to production code. They just   wouldn't do that. If for no other reason, the \nfeedback would have already have become longer,  ",
    "start": "2861040",
    "end": "2868319"
  },
  {
    "text": "right? So there are those built-in mechanisms that \nshy you away from the bad code. So when you try  ",
    "start": "2868320",
    "end": "2873840"
  },
  {
    "text": "to use TDD to write bad code intentionally, as you \ndid for your book, you find it's pretty darn hard,   right? The discipline made into their \npractice just prevents you from doing that.",
    "start": "2873840",
    "end": "2883039"
  },
  {
    "start": "2883000",
    "end": "3228000"
  },
  {
    "text": "Well, I think we're probably coming to the end \nof our time, and I've had a great time talking   to you. I got one more question that we can kind \nof refund for a little while. So what do you think  ",
    "start": "2883040",
    "end": "2893520"
  },
  {
    "text": "are the most important ideas that you \nhope your readers are gonna pick up?  So number one, I hope they give \ntest-driven development a decent  ",
    "start": "2893520",
    "end": "2901280"
  },
  {
    "text": "shot. I hope they can rise above some of their own \nreluctance and adopt some of that vulnerability  ",
    "start": "2901280",
    "end": "2907280"
  },
  {
    "text": "within themselves and amongst their teams \nto adopt it. I would love if people could   create book clubs after a fashion, after that. \nThat would be kind of the holy grail for me.  ",
    "start": "2908400",
    "end": "2918240"
  },
  {
    "text": "I would be really honored and elated if somebody \nsaid, \"Hey, my whole team is exercising your book  ",
    "start": "2918240",
    "end": "2924160"
  },
  {
    "text": "or following your book,\" as I call it. \"Which \nmeans reading it and writing the code this week,   and then we'll give you feedback.\" That would \nbe my first wish because I think trying it out  ",
    "start": "2924160",
    "end": "2930880"
  },
  {
    "text": "is the best way to learn it. Like any skill, you \nhave to learn it by doing it. Nobody can preach  ",
    "start": "2930880",
    "end": "2936160"
  },
  {
    "text": "it to you. You can't imbibe it. You can't put \nheadphones on in bed and wake up in the morning   a TDD expert. It just doesn't work like that. So \nthat's my first hope that people give it a shot. ",
    "start": "2936160",
    "end": "2944160"
  },
  {
    "text": "The second thing that I do hope, that engineering \nmanagers and managers of all ilk, for developers,  ",
    "start": "2944160",
    "end": "2950000"
  },
  {
    "text": "which I think they should also encourage their \nteams to practice TDD, and hopefully, through this  ",
    "start": "2950560",
    "end": "2955600"
  },
  {
    "text": "book, is seeing this as an integral and, frankly, \ninseparable part of the act of creating software.  ",
    "start": "2955600",
    "end": "2961840"
  },
  {
    "text": "So this is a non-negotiable thing, right? And \nof course, I talk about that a little bit in  ",
    "start": "2961840",
    "end": "2966960"
  },
  {
    "text": "the book, but elsewhere as well in other talks \nthat I've given, that with the ubiquitous nature  ",
    "start": "2966960",
    "end": "2972320"
  },
  {
    "text": "of the cloud, not just of course, as a deployment \nplatform, but now with no sequel, no code,  ",
    "start": "2972320",
    "end": "2977760"
  },
  {
    "text": "and low code, coding environments, is \nanother danger, right? That person will,  ",
    "start": "2977760",
    "end": "2983760"
  },
  {
    "text": "even those who might have practiced TDD in more \ntraditional settings, would kind of veer away from   that. When you're writing lambdas or serverless \ncode, that TDD would even get further diluted.  ",
    "start": "2983760",
    "end": "2996160"
  },
  {
    "text": "So I hope that engineering managers and senior \ndevelopers, and people at that level of seniority,  ",
    "start": "2996160",
    "end": "3002319"
  },
  {
    "text": "keep encouraging their teammates, \nespecially the junior teammates,   to keep learning test-driven development in \nthese new programming realms that we're facing. ",
    "start": "3002320",
    "end": "3010480"
  },
  {
    "text": "So how do you unit test and test drive your \nlambda? Like, that's a question we should ask. I  ",
    "start": "3010480",
    "end": "3017840"
  },
  {
    "text": "had this right before we started. This is directly \nfrom AWS documentation, the step function,  ",
    "start": "3017840",
    "end": "3023120"
  },
  {
    "text": "it says, \"You should ensure your state machine \nlogic is idempotent, and should not be affected   adversely by multiple concurrent executions of the \nsame input.\" My question is, how many developers  ",
    "start": "3023120",
    "end": "3033360"
  },
  {
    "text": "are test driving their state machines, who are \nwriting step-functions out there? This statement   from Amazon directly, it's almost a direct... \nIt's imploring developers to test their code,  ",
    "start": "3033360",
    "end": "3043760"
  },
  {
    "text": "but I wonder how many of them are out there \ndoing it? I hope a lot of them, but I suspect   I might be wrong. Like, this whole adoption \nof a serverless time-based architecture is,  ",
    "start": "3043760",
    "end": "3053839"
  },
  {
    "text": "wrongly in my opinion, diverting people away from \ntest-driven development. So I hope the people in   places of influence and power read my book \nand then reinforce the principles in these  ",
    "start": "3054400",
    "end": "3062799"
  },
  {
    "text": "new development paradigms that are upon us.\nYes, that's a very good point, is   that I think that one of the ways in which we \nas an industry are not great at learning really  ",
    "start": "3062800",
    "end": "3074000"
  },
  {
    "text": "is we keep forgetting some of the principles \nthat matter. Whatever software you're writing,  ",
    "start": "3074640",
    "end": "3082160"
  },
  {
    "text": "for whatever purpose, you need to verify that it \ndoes what you think it does, because all of us,  ",
    "start": "3082160",
    "end": "3088960"
  },
  {
    "text": "if we've written any software, ever, have had the \nexperience of writing something and thinking, \"Oh,   I know how that works.\" Then it doesn't, it \ndoes something else. So we wanna verify that.  ",
    "start": "3088960",
    "end": "3098880"
  },
  {
    "text": "Now, all we're talking about is how you do that \nefficiently, and test-driven development is the   most efficient way of testing these sorts \nof things, whatever the technology. And so,  ",
    "start": "3098880",
    "end": "3107279"
  },
  {
    "text": "as we've already alluded to, you know, even \nin technologies where there wasn't an easy   way of doing it, I've tried to struggle \nto get to achieve a way of doing it.",
    "start": "3108560",
    "end": "3117360"
  },
  {
    "text": "I did some stuff relatively early on with \nJavaScript when there weren't any frameworks  ",
    "start": "3119040",
    "end": "3126640"
  },
  {
    "text": "that really supported TDD and JavaScript in a \nbrowser at the time, and we ended up abstracting  ",
    "start": "3126640",
    "end": "3134079"
  },
  {
    "text": "away the browser in order for...We gave a facade \non top of the DOM so that we could test the code.  ",
    "start": "3134080",
    "end": "3140560"
  },
  {
    "text": "If you believe in this sort of stuff, then you're \ngoing find a way and it's really important. So,  ",
    "start": "3142240",
    "end": "3148240"
  },
  {
    "text": "it's similar to continuous delivery. I was \ntalking to people using packaged software  ",
    "start": "3148240",
    "end": "3154080"
  },
  {
    "text": "and applying some of those ideas. We learn \nlessons in software development, and they are  ",
    "start": "3155920",
    "end": "3162640"
  },
  {
    "text": "often, maybe even frequently, more generally \napplicable than we think they are. They're rarely  ",
    "start": "3163200",
    "end": "3169280"
  },
  {
    "text": "tied to a single technology...\nI agree.  ...or a family of technologies.\nYes. As I said, the subtitle of the book, it's   about decluttering your code. Software is forever \nentropy. This is a fact of life in physics, and  ",
    "start": "3169280",
    "end": "3179680"
  },
  {
    "text": "not just in physics and software. Unless we change \nthe complexity, code does get cluttered, and it's   upon us to adopt. It's upon us as practitioners \nto adopt all the measures we can. I think I say  ",
    "start": "3179680",
    "end": "3190880"
  },
  {
    "text": "something akin to that in the book. It's not \na religious belief for me. If something better   than test-driven development comes up, I would be \nhappy to adopt it. It's just that I haven't seen  ",
    "start": "3190880",
    "end": "3198880"
  },
  {
    "text": "anything as good and the need hasn't gone away. \nThe need for fast feedback, the need for making   sure that software, to your point, is fit for \npurpose, and does the right thing, and not because  ",
    "start": "3198880",
    "end": "3208080"
  },
  {
    "text": "I suspect it does the right thing, but wholly does \nthe right thing. Those needs haven't gone away.   And to my knowledge and to the knowledge \nof many people, test-driven development is  ",
    "start": "3208080",
    "end": "3215440"
  },
  {
    "text": "the most effective technique to crafting software. \nSo, therefore, we adopt it. It's a means to an   end. If a better means shows up, we'll adopt it. \nBut until then, let's learn it and practice it. ",
    "start": "3216240",
    "end": "3224480"
  },
  {
    "text": "But we don't have one yet?\nWe don't have one yet.  Well, that's probably a great place to finish up.  ",
    "start": "3224480",
    "end": "3231840"
  },
  {
    "start": "3228000",
    "end": "3295000"
  },
  {
    "text": "I'd like to thank you for chatting with me about \nyour book today. I'm recommending to folks,  ",
    "start": "3231840",
    "end": "3238880"
  },
  {
    "text": "if you're interested in the stuff that we've \nbeen talking about, check out the book and  ",
    "start": "3238880",
    "end": "3242160"
  },
  {
    "text": "practice some of the exercises.\nThanks, David, and thanks,   GOTO for facilitating this.\nIt's a pleasure. And thank you  ",
    "start": "3244880",
    "end": "3251120"
  },
  {
    "text": "for writing the book, and it's been \nfun talking to you about it today. ",
    "start": "3251120",
    "end": "3253600"
  },
  {
    "text": "Likewise, the pleasure is mutual. Thank you.\nThanks. Bye-bye.",
    "start": "3263360",
    "end": "3294480"
  }
]