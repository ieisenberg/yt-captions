[
  {
    "start": "0",
    "end": "67000"
  },
  {
    "text": "hey everybody it's awesome to be here at servus days um uh Advent of an architectures day Eda day I've already",
    "start": "11639",
    "end": "18080"
  },
  {
    "text": "got my um events mixed up and it's only like first sentence I've been talking about so Eda day hopefully everybody's",
    "start": "18080",
    "end": "24400"
  },
  {
    "text": "right after lunch Eric talked about the carb coma um I won't point you out if you're going to be snoring um but if",
    "start": "24400",
    "end": "30160"
  },
  {
    "text": "it's going to be really loud just you know nudge the person next to you and then um we can wake everybody up so today I'm going to be talking about",
    "start": "30160",
    "end": "36200"
  },
  {
    "text": "serverless compute and we've been talking a lot about Aventure architectures today and I'm going to try and bring some of the sub aspect of the",
    "start": "36200",
    "end": "42879"
  },
  {
    "text": "compute part of it because obviously we've got code that's going to run we've got something that needs to run to be able to um do your business logic and as",
    "start": "42879",
    "end": "50280"
  },
  {
    "text": "Eric says I'm a developer advocate so I work within the serverless product team sort of two parts of the role one is cool is talking at places like this and",
    "start": "50280",
    "end": "57199"
  },
  {
    "text": "meeting developers and seeing how they develop applications and then also working very closely with the service teams internally to make sure that we're",
    "start": "57199",
    "end": "63600"
  },
  {
    "text": "building the right applications and right abstractions that you're going to need so I'm going to do a bit of a sort",
    "start": "63600",
    "end": "68880"
  },
  {
    "start": "67000",
    "end": "467000"
  },
  {
    "text": "of quick sort of overview of what is serus and what is sort of event an architectures and how some of the AWS bits and pieces fit",
    "start": "68880",
    "end": "75560"
  },
  {
    "text": "together so serus obviously we know if we he and if we understand it's all about giving your development team time",
    "start": "75560",
    "end": "82400"
  },
  {
    "text": "focus focus away from all the infrastructure Focus away from all the uh undifferentiated heavy um lifting all",
    "start": "82400",
    "end": "89360"
  },
  {
    "text": "the Cru that you need to build and being able to focus on your business and to be able to focus on what your applications",
    "start": "89360",
    "end": "94880"
  },
  {
    "text": "actually need and if you heard Dave Anderson's talk earlier you know he's written a whole book about that kind of focus how you can get your um",
    "start": "94880",
    "end": "101200"
  },
  {
    "text": "organizations to think about taking advantage of the cloud being able to do as little as possible to get the most",
    "start": "101200",
    "end": "106360"
  },
  {
    "text": "bang for your buck and a surus approach really helps with that and at AWS we've got a whole bunch of servess services",
    "start": "106360",
    "end": "112799"
  },
  {
    "text": "people think of Lambda is sort of the start of servus but actually we've been building you know in a way servus Services since the very beginning if you",
    "start": "112799",
    "end": "119280"
  },
  {
    "text": "think of things like S3 and sqs you know foundational services at AWS served us from the very beginning and yeah you can",
    "start": "119280",
    "end": "125399"
  },
  {
    "text": "see here you know a whole bunch of compute things I'm going to be talking about some of those but obviously we've got storage and we've got different integration services and you know",
    "start": "125399",
    "end": "131680"
  },
  {
    "text": "database and analytics and the whole idea is that you can just consume these Services uh pay when you're not using",
    "start": "131680",
    "end": "136920"
  },
  {
    "text": "them get good value from them be able to scale up as big as your business goes and be able to let your developers um",
    "start": "136920",
    "end": "142680"
  },
  {
    "text": "iterate and have the agility to build new applications as fast as possible and of course this all happens at sort of",
    "start": "142680",
    "end": "148560"
  },
  {
    "text": "ridiculous scale and just I just picked three of the stats that we've got internally and you know Lambda processes tens of a trillions of requests every",
    "start": "148560",
    "end": "155560"
  },
  {
    "text": "single month it's absolutely huge this is all over the world and eventbridge we've had a lot of talk about eventbridge today and that's you know",
    "start": "155560",
    "end": "161519"
  },
  {
    "text": "two trillion vents per month going through as well and I'm going to be talking about serverless Compu and part of that is actually the container story",
    "start": "161519",
    "end": "167720"
  },
  {
    "text": "and so ECS elastic container service you know also multiple billions of um tasks that are going to be launched every",
    "start": "167720",
    "end": "173239"
  },
  {
    "text": "single week so these are Big services that run all over the world and hopefully can support any of your applications and you know the the sort",
    "start": "173239",
    "end": "180159"
  },
  {
    "text": "of value proposition I speak to people about serus is you know why goes serus we've got technology and we've got",
    "start": "180159",
    "end": "185720"
  },
  {
    "text": "compute databases analytics and sort of don't forget about all of that but put that to the side for the moment the whole idea is to be able to do things",
    "start": "185720",
    "end": "192040"
  },
  {
    "text": "quicker you've got an idea in your business you want to you know try something else you want to experiments you want to do kind of things and a",
    "start": "192040",
    "end": "197680"
  },
  {
    "text": "servess approach means because there's so much less stuff you need to do you can take this idea which I often say",
    "start": "197680",
    "end": "203040"
  },
  {
    "text": "from prototype to production really quickly and sort of have this flywheel that can speed up your organization",
    "start": "203040",
    "end": "209879"
  },
  {
    "text": "so today event of an architectures day it's all about communicating via events and so you know we've got producers and",
    "start": "209879",
    "end": "215280"
  },
  {
    "text": "consumers and a lot of the talks have been talking all about that and sort of an event broker in the middle that is going to be the kind of traffic cop that",
    "start": "215280",
    "end": "221200"
  },
  {
    "text": "is going to say the events are going to come in off you go over there and do various kind of things and you know Amazon event bridge is our sort of key",
    "start": "221200",
    "end": "227720"
  },
  {
    "text": "event router our key event bus and of course it's you know RAR serverless and it's got these sort of three uh input",
    "start": "227720",
    "end": "233519"
  },
  {
    "text": "things which are Super useful and one is AWS services so behind the scenes all AWS Services when they're doing a whole",
    "start": "233519",
    "end": "239239"
  },
  {
    "text": "bunch of things is just going to put a message on that event bus we're going to see in a demo later how that is just really easy to set up and this gives",
    "start": "239239",
    "end": "246120"
  },
  {
    "text": "amazing capabilities and powers that anything that you anything that happens in AWS you're going to be able to react",
    "start": "246120",
    "end": "251760"
  },
  {
    "text": "to that you can build applications obviously you can build your own applications you can generate your own events uh you know lots of talks um",
    "start": "251760",
    "end": "258479"
  },
  {
    "text": "talks all about the aut Management Service and the Fulfillment service today and in many other talks this is the same kind of thing you can generate",
    "start": "258479",
    "end": "264280"
  },
  {
    "text": "and consume events on your own applications and also the cool thing is SAS providers so a number of SAS",
    "start": "264280",
    "end": "269479"
  },
  {
    "text": "providers providers uh which we have from zenes to ped Duty uh yeah just I've",
    "start": "269479",
    "end": "274840"
  },
  {
    "text": "even forgotten the number I think they're 30 40 50 different SS providers and they just when an event happens on their side um an event just appears in",
    "start": "274840",
    "end": "281560"
  },
  {
    "text": "your event bus and you can build an application based on that no web hooks no apis you need to run it's just really",
    "start": "281560",
    "end": "287240"
  },
  {
    "text": "easy to be able to consume uh consume with that and the other part of the story we've been hearing a bit about",
    "start": "287240",
    "end": "293440"
  },
  {
    "text": "today as well is Step functions and step functions is a slightly different part of it and this is all about workflows it's all about orchestration",
    "start": "293440",
    "end": "300240"
  },
  {
    "text": "and that means things that are more tightly controlled so if you've got a transaction think of maybe uh an airline",
    "start": "300240",
    "end": "306120"
  },
  {
    "text": "booking if you book a ticket and then somebody decides to cancel the flight well you need to release a seat and you",
    "start": "306120",
    "end": "311240"
  },
  {
    "text": "also then need to uh release the loyalty points that were aced for that there's a whole step-by-step process that is very",
    "start": "311240",
    "end": "316479"
  },
  {
    "text": "tightly bound together that needs to do things in a particular order and step functions is a great workflow",
    "start": "316479",
    "end": "322160"
  },
  {
    "text": "orchestration to be able to do that um other people are using Apache airflow you know that's more of a python based",
    "start": "322160",
    "end": "327319"
  },
  {
    "text": "thing but step functions is the really sort of servess approach to do it within AWS and in Step functions there's sort",
    "start": "327319",
    "end": "333840"
  },
  {
    "text": "of three different ways that it can run and uh the request response is think of this as an API so what um what step",
    "start": "333840",
    "end": "341479"
  },
  {
    "text": "functions is going to do is it's going to um call out to some call out to something and maybe behind an API or one",
    "start": "341479",
    "end": "347000"
  },
  {
    "text": "of these Services over here and it's going to wait for the actual response to come back so this is when you need to use the response uh further on in your",
    "start": "347000",
    "end": "353800"
  },
  {
    "text": "workflow then you've got this which I always think is slightly strangely named because it's got It's called a run a run",
    "start": "353800",
    "end": "360240"
  },
  {
    "text": "a job but it's called synchronous and people get sort of mixed up I think synchronous should be that request response but what actually happens with",
    "start": "360240",
    "end": "366240"
  },
  {
    "text": "this is uh step functions is going to pause so it's going to do something asynchronously an ECS task what examples",
    "start": "366240",
    "end": "372520"
  },
  {
    "text": "we've got Athena we've got a stage maker all kind of things it's going to get that task to run and just wait until it finishes and then carry on running it's",
    "start": "372520",
    "end": "379120"
  },
  {
    "text": "not actually waiting for the result of the task that it's that it's getting back into its workflow it's just waiting for that external task to finish before",
    "start": "379120",
    "end": "385440"
  },
  {
    "text": "it carries on and then a really cool thing with step functions is the sort of wait for callback and that's sort of commonly called this human in the loop",
    "start": "385440",
    "end": "391639"
  },
  {
    "text": "so if you have some kind of workflow and you need a a business process person to sign something on or a pallet needs to",
    "start": "391639",
    "end": "397720"
  },
  {
    "text": "go onto a truck or a medical diagnosis needs to happen all kind of things you can inject these into your step",
    "start": "397720",
    "end": "403199"
  },
  {
    "text": "functions workflows and they can last for up to year so uh with these workflows you can wait for a huge amount",
    "start": "403199",
    "end": "408599"
  },
  {
    "text": "of time and basically it's just a little bit of text that you pass back to step functions and say I've done my little piece off you go and carry on but this",
    "start": "408599",
    "end": "415400"
  },
  {
    "text": "makes it super useful to be able to link these different things together and of course uh orchestration and choreography",
    "start": "415400",
    "end": "420800"
  },
  {
    "text": "work really well together so on the orchestration side we're often talking about these tightly coupled applications",
    "start": "420800",
    "end": "426440"
  },
  {
    "text": "and often that's sort of genely within a microservice so if you've got a you know as I was talking about the airline",
    "start": "426440",
    "end": "431520"
  },
  {
    "text": "example often you would have that kind of thing within a microservice that needs to do a few kind of things of course it's then going to maybe talk to",
    "start": "431520",
    "end": "437759"
  },
  {
    "text": "other kind of microservices but that sort of bounded context if you like is within a single um context or maybe",
    "start": "437759",
    "end": "443960"
  },
  {
    "text": "within one or a few different services and then event Bridge sort of expands that out and this is really about",
    "start": "443960",
    "end": "449120"
  },
  {
    "text": "communicating ating between different Services now of course some of those Services can be within a single microservice we're not going to limit",
    "start": "449120",
    "end": "454840"
  },
  {
    "text": "that but eventbridge is all about communicating with AWS with other parts of your applications with your SAS",
    "start": "454840",
    "end": "460520"
  },
  {
    "text": "Partners uh between different parts of your organization and the cool thing is is these work really well",
    "start": "460520",
    "end": "466280"
  },
  {
    "text": "together but today we talking about seress comput so what are our sort of options in AWS to be able to talk about",
    "start": "466280",
    "end": "472840"
  },
  {
    "start": "467000",
    "end": "793000"
  },
  {
    "text": "how we can actually process your custom code because whether you're running step functions or you are running um event",
    "start": "472840",
    "end": "478520"
  },
  {
    "text": "Bridge ultim you want to react to that business logic you've got something coming from a sess partner or you need to release a loyalty",
    "start": "478520",
    "end": "484919"
  },
  {
    "text": "point you've got a database to write to read from do some kind of thing or you need to do some analytics there's often",
    "start": "484919",
    "end": "490400"
  },
  {
    "text": "some computer that's going to be involved and in AWS we've sort of got the serverless landscape we like to talk",
    "start": "490400",
    "end": "496440"
  },
  {
    "text": "about where on the on the y- axis we've got sort of what you manage going from very little to um much more uh and",
    "start": "496440",
    "end": "503080"
  },
  {
    "text": "you've also got this opinionated going from less opinionated to more opinionated so Amazon ec2 you know",
    "start": "503080",
    "end": "508120"
  },
  {
    "text": "renting VMS in the cloud super scalable uh super uh you know s lots of different",
    "start": "508120",
    "end": "513919"
  },
  {
    "text": "options lots of different t-shirt sizes that you can do and but there's obviously more that you're going to manage you're going to manage the",
    "start": "513919",
    "end": "519120"
  },
  {
    "text": "networking you're going to manage the operating system the patching you've got armies you've got all these kind of things that you need to look after and",
    "start": "519120",
    "end": "525240"
  },
  {
    "text": "then obviously it's less opinionated because you can run anything on it and as you sort of go up this sort of",
    "start": "525240",
    "end": "530480"
  },
  {
    "text": "evolution landscape you've then got ECS on fireade so ECS is the container of service we're going to talk about that",
    "start": "530480",
    "end": "536000"
  },
  {
    "text": "and fargate is the container serverless comput uh service and in a way well uh you know it's",
    "start": "536000",
    "end": "541519"
  },
  {
    "text": "obviously less to manage than ec2 you're not thinking of instance sizes and all those t-shirt sizes um and it's a little",
    "start": "541519",
    "end": "548399"
  },
  {
    "text": "bit more opinionated because you can't run every single workload as you would on ec2 and then Lambda at the sort of",
    "start": "548399",
    "end": "554839"
  },
  {
    "text": "top right well you know this is way more opinionated you've only got a certain number of languages that are managed run times um you can run your own language",
    "start": "554839",
    "end": "561880"
  },
  {
    "text": "as well um and then obviously there's an event object and Lambda sort of works in a slightly different way and it's just a",
    "start": "561880",
    "end": "567720"
  },
  {
    "text": "bit more opinionated that you can do but the cool thing is is you've got way less to manage there's nothing to patch there's nothing to look after you don't",
    "start": "567720",
    "end": "573800"
  },
  {
    "text": "need to think as much about scaling you don't need to think about as much as Integrations and you've sort of got this kind of evolution and that's part of",
    "start": "573800",
    "end": "581000"
  },
  {
    "text": "what your business is thinking as well is do we need more of that control do we need to do things more on ec2 because we",
    "start": "581000",
    "end": "586480"
  },
  {
    "text": "know Keen for the bare metal we've got you know maybe that's for good reasons maybe you've got ridiculously high throughput applications and you need the",
    "start": "586480",
    "end": "592560"
  },
  {
    "text": "power of ec2 or you're doing various machine models on gpus and you need uh you know various combinations of memory",
    "start": "592560",
    "end": "598279"
  },
  {
    "text": "and hardware and that kind of thing or do you just want to I want to worry about my business logic I want to worry about my code please AWS just handle",
    "start": "598279",
    "end": "605240"
  },
  {
    "text": "that all for me I know it's going to scale it's going to be really cool and you go along Lambda and then there's part in the Middle where you can use",
    "start": "605240",
    "end": "610839"
  },
  {
    "text": "containers with ETS and fargate and so the first service I am going to talk about is Lambda and you",
    "start": "610839",
    "end": "616079"
  },
  {
    "text": "know when you talk about containers versus serverless well Lambda is about serverless functions and just hands up",
    "start": "616079",
    "end": "622000"
  },
  {
    "text": "in the room has anybody used Lambda cool most of the room that's good otherwise we we'd be starting from",
    "start": "622000",
    "end": "627440"
  },
  {
    "text": "scratch so um and an in the front over here says no and he's like I think you're a hero aren't you D got to worry",
    "start": "627440",
    "end": "633240"
  },
  {
    "text": "about that um and so Lambda Works in this simplistic but cool simplistic way",
    "start": "633240",
    "end": "639120"
  },
  {
    "text": "that you've got an event source which is going to Kickstart a Lambda function and this event Source can be a whole bunch of kind of things it can be hitting an",
    "start": "639120",
    "end": "645440"
  },
  {
    "text": "HTTP endpoint so something behind an API it can be changing uh it can be reacting to a database notification so uh Dynamo",
    "start": "645440",
    "end": "653200"
  },
  {
    "text": "DB for example a record updates and changes Lambda function starts immediately it can be uh uploading",
    "start": "653200",
    "end": "658560"
  },
  {
    "text": "something to S3 you upload a file to S3 and a Lambda function runs and there are so many Integrations I can't even",
    "start": "658560",
    "end": "663839"
  },
  {
    "text": "remember how many they are which will automatically kick off a Lambda function very little configuration code you need to do that it's just going to do that",
    "start": "663839",
    "end": "670200"
  },
  {
    "text": "your Lambda function is going to then run and it's going to be run in any of these manage run times uh you know even",
    "start": "670200",
    "end": "675360"
  },
  {
    "text": "from Ruby node python Java all the popular ones and also you've got you bring your own which is a sort of operating system runtime we have called",
    "start": "675360",
    "end": "682200"
  },
  {
    "text": "a custom runtime and so you can literally run any code I mean Cobalt llang the whole thing you know PHP",
    "start": "682200",
    "end": "687639"
  },
  {
    "text": "Powershell anything you know any language you can run on Lambda and then obviously your code is going to do its business logic and then what's it going",
    "start": "687639",
    "end": "693720"
  },
  {
    "text": "to do it's maybe going to write something to an API it's going to do something in a database maybe it's some machine learning inference that's going",
    "start": "693720",
    "end": "699480"
  },
  {
    "text": "to do any kind of thing that your normal code would do um that's going to run in your Lambda function and it's going to then maybe talk to another",
    "start": "699480",
    "end": "705959"
  },
  {
    "text": "service and there three ways at Lambda you can invoke a Lambda function one is synchronous so think of this is behind",
    "start": "705959",
    "end": "712120"
  },
  {
    "text": "an API you do a request response so you know do something behind an API Lambda function runs maybe it's going to grab",
    "start": "712120",
    "end": "718040"
  },
  {
    "text": "something from a database maybe it's is going to pull something from an API connect something together and return you the response uh second one is",
    "start": "718040",
    "end": "725000"
  },
  {
    "text": "asynchronous so this is you know obviously very popular in event of an architecture space where maybe something like event bridge is going to put a",
    "start": "725000",
    "end": "731519"
  },
  {
    "text": "message on the event bus and that's going to trigger off a Lambda function and off you go the Lambda function is going to do something the difference",
    "start": "731519",
    "end": "737600"
  },
  {
    "text": "between that is that the the thing that is initiating the Lambda function um",
    "start": "737600",
    "end": "742680"
  },
  {
    "text": "request doesn't expect an immediate reply it's sort of set it set it and forget it I've got an event Bridge notification I'm going to send it to my",
    "start": "742680",
    "end": "749240"
  },
  {
    "text": "Lambda function send it to the Lambda service and lambda's going to I've received your request trust me I'm going to handle this um and then it's going to",
    "start": "749240",
    "end": "755720"
  },
  {
    "text": "carry on asynchronicity and do the process the benefit is is your whatever the caller service is going to just be",
    "start": "755720",
    "end": "761000"
  },
  {
    "text": "able to carry on regardless it doesn't have to wait for that asynchronous process to finish and then there's",
    "start": "761000",
    "end": "766320"
  },
  {
    "text": "another family of Lambda that that works where Lambda runs some polers on your behalf so if you're using cathco if",
    "start": "766320",
    "end": "771639"
  },
  {
    "text": "you're using sqs or Ms or dynb streams or Kinesis or these kind of things Lambda runs a polar it's going to pull",
    "start": "771639",
    "end": "777720"
  },
  {
    "text": "the records pull the messages from from the queue you're going to be able to iterate it iterate over it within your",
    "start": "777720",
    "end": "783040"
  },
  {
    "text": "Lambda function maybe write the data to a database or do some analytics or some queries and then you're going to um and",
    "start": "783040",
    "end": "789079"
  },
  {
    "text": "that polar is just managed for you the scaling and everything manages for you really easily and so actually what I'm",
    "start": "789079",
    "end": "794399"
  },
  {
    "start": "793000",
    "end": "1082000"
  },
  {
    "text": "going to do is I'm just going to show you a bit of Lambda scaling and I'll just going to kick something off and then I'm going to come back so basically",
    "start": "794399",
    "end": "800480"
  },
  {
    "text": "I want to show how Lambda scales and I've got a command here that I'm going to run and it's called Hey and it's going to run 10,000 sustained requests",
    "start": "800480",
    "end": "808120"
  },
  {
    "text": "uh every single second for 5 minutes to this particular API so it's just an API Gateway endpoint connected to Lambda",
    "start": "808120",
    "end": "813800"
  },
  {
    "text": "function so I'm going to get that to run and then I'm going to talk about Lambda scaling and we can actually see that going in action so one of the reasons",
    "start": "813800",
    "end": "820680"
  },
  {
    "text": "people are really Keen about using Lambda other than all the managed run times and not the and not the P patching that you need to do and all the stuff",
    "start": "820680",
    "end": "826959"
  },
  {
    "text": "that gets looked after is all about Lambda scaling and this is really cool because Lambda just scales from the get-go you don't need to preset up",
    "start": "826959",
    "end": "833360"
  },
  {
    "text": "anything and off it's going to go and lambda's going to initially is able to SC scale up to a, concurrent requests",
    "start": "833360",
    "end": "839720"
  },
  {
    "text": "every 10 seconds so uh when I was talking about that um event trigger to a Lambda function when it's going to do",
    "start": "839720",
    "end": "845880"
  },
  {
    "text": "something that is one request so a Lambda function runs for a single request every single time so without",
    "start": "845880",
    "end": "852079"
  },
  {
    "text": "having to do anything a single Lambda function can just run a thousand of those at the same time you don't even need to do anything and then every",
    "start": "852079",
    "end": "858680"
  },
  {
    "text": "single 10 seconds you're allowed to add another thousand to that so you can imagine how this can build up really quickly and this is a new scaling",
    "start": "858680",
    "end": "864920"
  },
  {
    "text": "mechanism I'll show you what it was before just to compare and of course this is super useful if you've got varying traffic patterns if you don't",
    "start": "864920",
    "end": "870959"
  },
  {
    "text": "know how much traffic you're going to have you can't pre-plan you can't predict um this is really great because",
    "start": "870959",
    "end": "876600"
  },
  {
    "text": "you just let lamb Lambda figure it out that's not going to be a going to be a problem and the cool thing is lambda's going to manage us automatically uh",
    "start": "876600",
    "end": "883120"
  },
  {
    "text": "without having to do the complexity you don't have to manage the scaling you don't have to add stuff you don't have to remove stuff as it goes",
    "start": "883120",
    "end": "888839"
  },
  {
    "text": "along and so uh just before reinvent last year which is in November there was",
    "start": "888839",
    "end": "894040"
  },
  {
    "text": "uh our scaling worked in a slightly different way and there was a sort of concept of burst where you had an sort of",
    "start": "894040",
    "end": "899600"
  },
  {
    "text": "initial burst of concurrency burst of scalability and then the sort of stepping stone that would allow you to",
    "start": "899600",
    "end": "904639"
  },
  {
    "text": "add more concurrency uh per minute and this was cool I mean super high still super high throughput but of course we",
    "start": "904639",
    "end": "910800"
  },
  {
    "text": "thought this is AWS this is Lambda we can do a little bit more so if you look at this example if you wanted to have",
    "start": "910800",
    "end": "916120"
  },
  {
    "text": "say 10,000 sustained requests that were happening all the time it would literally take 12 minutes to get up to",
    "start": "916120",
    "end": "921600"
  },
  {
    "text": "that I mean not the end of the world this is obviously starting completely from scratch if you were running a production application that was always",
    "start": "921600",
    "end": "927759"
  },
  {
    "text": "getting 10,000 requests well that first 12 minutes happened you know 7 hours ago and your Lambda",
    "start": "927759",
    "end": "933240"
  },
  {
    "text": "function is going to you know be able to have way more requests and it's just going to scale automatically from that point so this is literally from a standing start as if you doing sort of",
    "start": "933240",
    "end": "939680"
  },
  {
    "text": "the 100 meters um everything is stopped uh it would take you 12 minutes to get to 10,000 sustained requests well n we",
    "start": "939680",
    "end": "946160"
  },
  {
    "text": "can improve that so why don't we do it instead of having that sort of sort of slowest stagged approach we'll just do",
    "start": "946160",
    "end": "952480"
  },
  {
    "text": "have 10,000 every single 10 seconds so this means today you actually are able to get 10,000 sustained requests in 90",
    "start": "952480",
    "end": "959600"
  },
  {
    "text": "seconds and this is literally one of the fastest ways you can get a whole bunch of compute capacity in the cloud now",
    "start": "959600",
    "end": "965800"
  },
  {
    "text": "also remember that the previous uh scaling quots were all to do with all Lambda functions within an account",
    "start": "965800",
    "end": "971279"
  },
  {
    "text": "within a region now this is per function so if you have 100 functions if you got a thousand functions within your",
    "start": "971279",
    "end": "976959"
  },
  {
    "text": "accounts within a region this is the same scaling Behavior so dramatically Lambda can dramatically scale on an",
    "start": "976959",
    "end": "982519"
  },
  {
    "text": "individual function basis um yeah super powerful so um let me just go back to",
    "start": "982519",
    "end": "987639"
  },
  {
    "text": "the demo and see how this has actually been working so this has been running I've probably been jabbering on for more than a minute and a half and we will see",
    "start": "987639",
    "end": "995040"
  },
  {
    "text": "my Lambda concurrency of course is doing absolutely nothing let's just refresh",
    "start": "995040",
    "end": "1000199"
  },
  {
    "text": "that ah there we go so we can see here let me take a look at the lines and we can see that the concurrent executions",
    "start": "1000199",
    "end": "1006040"
  },
  {
    "text": "is blue and the number of throttles is going to be um orange so we can see here",
    "start": "1006040",
    "end": "1011720"
  },
  {
    "text": "that hey command was going to immediately go to uh lambra VI API Gateway and say I'm want to do 10,000",
    "start": "1011720",
    "end": "1017759"
  },
  {
    "text": "requests and you can see initially there was a bit of a throttle I was like hang on hang on hang on I can only do a th000 every 10 seconds just hold your horses",
    "start": "1017759",
    "end": "1024678"
  },
  {
    "text": "I'll get I'll get you in a minute and a half and you can see how the scaling sort of graph went up and we could see",
    "start": "1024679",
    "end": "1030120"
  },
  {
    "text": "uh what's this 1250 and it started at 12 12:30 yeah so about 90 seconds we're now",
    "start": "1030120",
    "end": "1036360"
  },
  {
    "text": "able to have um 10,000 sustained requests and you can see this was the throttle originally it had to throttle",
    "start": "1036360",
    "end": "1041880"
  },
  {
    "text": "and you know that throttle drastically goes down so in a minute minute and a half I had a you know got a massive sale",
    "start": "1041880",
    "end": "1048438"
  },
  {
    "text": "at 9 in the morning I've got a you know hit TV show that's happening um I've got a book that's being released you know",
    "start": "1048439",
    "end": "1054440"
  },
  {
    "text": "selling concert tickets at whatever totally unexpected didn't think about that and within 90 seconds I can handle",
    "start": "1054440",
    "end": "1060360"
  },
  {
    "text": "10,000 s uh 10,000 sustained requests without having to even do or think about anything and there even other um and",
    "start": "1060360",
    "end": "1067360"
  },
  {
    "text": "there even other ways you can you can use Lambda where you can actually pre-provision it's called provision concurrency where you can say I know at",
    "start": "1067360",
    "end": "1072760"
  },
  {
    "text": "9:00 I'm going to have a 10,000 request so you know set that up 90 minutes before 9:00 and I'll be able to scale",
    "start": "1072760",
    "end": "1078240"
  },
  {
    "text": "that that up really quickly so that's just a quick way to show how quickly Lambda can scale uh We've also improved",
    "start": "1078240",
    "end": "1084159"
  },
  {
    "start": "1082000",
    "end": "1233000"
  },
  {
    "text": "Lambda scaling for some of the events's mappings so this I was talking about earlier if you um getting messages from",
    "start": "1084159",
    "end": "1089320"
  },
  {
    "text": "cfco or sqs or um Dynam EB streams and this has also been improved so I wasn't",
    "start": "1089320",
    "end": "1094679"
  },
  {
    "text": "going to just show another demo because I think the graph just explains it this is a sqsq and I think there 200,000 or",
    "start": "1094679",
    "end": "1101320"
  },
  {
    "text": "something 200,000 messages within this que and you can see lambda's going to see the 200,000 messages in the queue",
    "start": "1101320",
    "end": "1107039"
  },
  {
    "text": "and eventually it's going to go okay there's still more message in the que I'm going addm Lambda functions ad Lambda functions and this blue line is",
    "start": "1107039",
    "end": "1112240"
  },
  {
    "text": "going to show that scaling up until eventually processes the whole q and of course we decided surely we can improve",
    "start": "1112240",
    "end": "1117960"
  },
  {
    "text": "that and so we came out with some sqs scaling Which is far more aggressive in being able to tackle that q and you can",
    "start": "1117960",
    "end": "1123960"
  },
  {
    "text": "see how sort of far more vertical that blue line is it's going to see that the 2 million messages in the uh was it 2",
    "start": "1123960",
    "end": "1129120"
  },
  {
    "text": "million 200,000 messages in the sqsq and far more aggressively be able to scale up Lambda functions in parallel to be",
    "start": "1129120",
    "end": "1134960"
  },
  {
    "text": "able to handle that and here you can see actually I think it's 1250 Lambda functions that brand for this particular sqsq and that's the maximum that can",
    "start": "1134960",
    "end": "1142280"
  },
  {
    "text": "that can come up and this is even more powerful because even though I mentioned earlier about a single invoke for a",
    "start": "1142280",
    "end": "1147559"
  },
  {
    "text": "single Lambda function when you're using these polling architectures you can also batch things together and you can have up to 10,000 items in a batch so you can",
    "start": "1147559",
    "end": "1154400"
  },
  {
    "text": "imagine the amount of scaling you can have for Lambda if you had you know 1,50 invokes and the you know 10,000 items in",
    "start": "1154400",
    "end": "1161520"
  },
  {
    "text": "that batch you know that is a huge amount of computing power you can get and some of the controls where you can",
    "start": "1161520",
    "end": "1167200"
  },
  {
    "text": "set set things because one of the cool things about Lambda is this crazy scale but one of the bad things about Lambda is oh my word I've got a database I've",
    "start": "1167200",
    "end": "1173120"
  },
  {
    "text": "got an API at the other other end of it that's just going to completely kill my third party SAS integration is just",
    "start": "1173120",
    "end": "1178559"
  },
  {
    "text": "going to completely make my database fall over and so there's some settings you can do to control this concurrency",
    "start": "1178559",
    "end": "1184480"
  },
  {
    "text": "so on the Event Source mapping for example you can uh tell sqs that you know what I've got a downstream service",
    "start": "1184480",
    "end": "1189960"
  },
  {
    "text": "that can only handle 50 concurrent requests Max that out at 50 it doesn't matter how many messages arrive in sqs",
    "start": "1189960",
    "end": "1195520"
  },
  {
    "text": "I'll protect their Downstream resource and then also on the Lambda function side um which is not quite as applicable",
    "start": "1195520",
    "end": "1201120"
  },
  {
    "text": "for the Event Source mappings but maybe you've got an API Gateway or you've got an asynchronous thing you can also set a",
    "start": "1201120",
    "end": "1207000"
  },
  {
    "text": "reserve concurrency on the Lambda function does two things uh protects that Lambda function concurrency to say",
    "start": "1207000",
    "end": "1213200"
  },
  {
    "text": "regardless of anything that happens anywhere nothing is shared I can always ensure that that that Lambda function",
    "start": "1213200",
    "end": "1218480"
  },
  {
    "text": "has for example 50 and can never go beyond 50 and always has 50 available for it so just some configuration things",
    "start": "1218480",
    "end": "1224200"
  },
  {
    "text": "that you can have a bit more control uh we also improved catha scaling so you know very um CF is all about high high",
    "start": "1224200",
    "end": "1231039"
  },
  {
    "text": "scale um um event architectures and processing and we've also you know look at that vertical scale very annoyingly",
    "start": "1231039",
    "end": "1236919"
  },
  {
    "start": "1233000",
    "end": "1396000"
  },
  {
    "text": "the colors Inver inverted on this one so the Orange is the Lambda concurrency you can see how that shoots up really",
    "start": "1236919",
    "end": "1242760"
  },
  {
    "text": "quickly so let's start sort of switching over and talking a bit about um ECS on fargate and you know we've talked about",
    "start": "1242760",
    "end": "1248600"
  },
  {
    "text": "all the Lambda function side and that's on the sort of serous functions let's talk a bit about seress",
    "start": "1248600",
    "end": "1253960"
  },
  {
    "text": "containers so Amazon ECS is a serverless container orchestrator so so what does",
    "start": "1253960",
    "end": "1259120"
  },
  {
    "text": "that mean few words in the sentence well it is serous because the Amazon ECS by itself and I'm conscious that I'm",
    "start": "1259120",
    "end": "1265640"
  },
  {
    "text": "standing in front of the slides of sort of realiz sorry about that um the concept of the of the serous side is",
    "start": "1265640",
    "end": "1271480"
  },
  {
    "text": "that actually ECS itself is entirely serous and no cluster versions to manage nothing to think about there's no data",
    "start": "1271480",
    "end": "1277520"
  },
  {
    "text": "store that you need to manage or maintain there's nothing on ECS you need to worry about for some infrastructure",
    "start": "1277520",
    "end": "1282600"
  },
  {
    "text": "to ensure that that's going to scale and the cool thing is it's actually entirely free to use it's a manag service where",
    "start": "1282600",
    "end": "1288200"
  },
  {
    "text": "it orchestrates containers we're going to get into that and if you're using E2 or fargate we're going to get more into",
    "start": "1288200",
    "end": "1293360"
  },
  {
    "text": "that it's just a service that you can use and uh it's an orchestrator because uh it doesn't run containers itself it",
    "start": "1293360",
    "end": "1299720"
  },
  {
    "text": "sort of places containers where they're going to run and handles the starting and the stopping of them and it works with these different compute types and",
    "start": "1299720",
    "end": "1305960"
  },
  {
    "text": "the main two compute types is it can use ec2 so that's obviously not very seress at all um but uh you know ECS is a",
    "start": "1305960",
    "end": "1312200"
  },
  {
    "text": "serous um uh container orchestrator can work with ec2 but can also work with fargate and AD fargate is the serverless",
    "start": "1312200",
    "end": "1319559"
  },
  {
    "text": "compute option we're going to get more into that so fargate is this compute engine for um containers so instead of",
    "start": "1319559",
    "end": "1326640"
  },
  {
    "text": "being the orchestrator this is the engine for containers again managed by AWS no no armies that you need to manage",
    "start": "1326640",
    "end": "1332400"
  },
  {
    "text": "nothing that you need to uh provision or any instances um and it just scales as you need it via VIA AWS and so fargate",
    "start": "1332400",
    "end": "1340320"
  },
  {
    "text": "is this sort of kind of weird service is lots of people say I'm using fargate but you actually don't interact with it there's no fargate isn't a service that",
    "start": "1340320",
    "end": "1347000"
  },
  {
    "text": "you find into the console you don't really see fargate you don't interact with fargate at all it's just ECS as a",
    "start": "1347000",
    "end": "1353440"
  },
  {
    "text": "control plane is allows you to run your containers in fargate without you having to think about capacity and where those",
    "start": "1353440",
    "end": "1360080"
  },
  {
    "text": "containers are going to run um and so yeah you don't have to integrate it with it directly because we're going to do that on your",
    "start": "1360080",
    "end": "1365960"
  },
  {
    "text": "behalf and so hopefully you can sort of um do the mental picture of ECS is this control plane and fargate is the data",
    "start": "1365960",
    "end": "1372640"
  },
  {
    "text": "plane so the control plane if you're unaware is where things are going to be controlled where things are going to start when things are going to stop when",
    "start": "1372640",
    "end": "1377880"
  },
  {
    "text": "things are going to be configured uh permission constructs and a whole bunch of those things are going to sit at the control plane level and the data plane",
    "start": "1377880",
    "end": "1383919"
  },
  {
    "text": "is where the data is going to move that's the sort of where your contain is actually going to run and it's going to take inputs and it's going to do outputs",
    "start": "1383919",
    "end": "1389400"
  },
  {
    "text": "and all those kind of things so that's how you can sort of think of how ECS and fargate um uh work together so on ECS so",
    "start": "1389400",
    "end": "1397360"
  },
  {
    "start": "1396000",
    "end": "1649000"
  },
  {
    "text": "ECS also like aot lot of other Ser Services is deeply integrated with other AWS services and so um on the sort of",
    "start": "1397360",
    "end": "1404520"
  },
  {
    "text": "left hand side you've got some of the build kind of things so you've got a container registry this is Amazon's equivalent of Docker Hub and we've got",
    "start": "1404520",
    "end": "1410679"
  },
  {
    "text": "you know different code code services and cloud formation that you can obviously use to define your applications and then on the Run side",
    "start": "1410679",
    "end": "1417440"
  },
  {
    "text": "you know containers is slightly different from the Lambda perspective Lambda you have that one event that comes in your Lambda function does",
    "start": "1417440",
    "end": "1422720"
  },
  {
    "text": "something well containers do a lot more and containers OB often run a port that can be run so a sort of more port and",
    "start": "1422720",
    "end": "1428360"
  },
  {
    "text": "socket uh model which means there's obviously a lot more networking involved and that you know the power of the different kind of networking is what you",
    "start": "1428360",
    "end": "1434440"
  },
  {
    "text": "can use with um with these seress services and ECS is sort of some cool plan Integrations like the secrets",
    "start": "1434440",
    "end": "1439760"
  },
  {
    "text": "manager so we can just populate an environment variable with a secret parameter that you can use for an API key or to you do whatever you're going",
    "start": "1439760",
    "end": "1447080"
  },
  {
    "text": "to do whatever you're going to do and then of course in in the container world uh lots of third party tooling lots of",
    "start": "1447080",
    "end": "1453159"
  },
  {
    "text": "Open Source tooling so you know flu Prometheus and grafer on this slide as long as the AWS option of of cloudwatch",
    "start": "1453159",
    "end": "1458640"
  },
  {
    "text": "just to be able to do your monitoring just to be able to do your observability so lots of Integrations that ECS is able to",
    "start": "1458640",
    "end": "1463720"
  },
  {
    "text": "handle let's just look at some of the sort of course constructs of how ECS is put together so an ECS task is one or",
    "start": "1463720",
    "end": "1470440"
  },
  {
    "text": "more containers so this is the sort of building block of of things you're going to have uh you build a Docker file it's",
    "start": "1470440",
    "end": "1476399"
  },
  {
    "text": "a standard Docker file it's a container and you're going to store that in elastic container registry and you're going to be able to just Define what",
    "start": "1476399",
    "end": "1482360"
  },
  {
    "text": "your application is going to do and that container task is going to specify your Docker file and also you see comput so",
    "start": "1482360",
    "end": "1488440"
  },
  {
    "text": "how much CPU how much memory Network and configuration security and all the other configuration about an individual task",
    "start": "1488440",
    "end": "1494559"
  },
  {
    "text": "and then those tasks um may run in isolation but they also may run as services and this is cool because you have",
    "start": "1494559",
    "end": "1500039"
  },
  {
    "text": "identical tasks think of it if you are running a low balance website you may have 10 containers that need to spin up",
    "start": "1500039",
    "end": "1505720"
  },
  {
    "text": "to handle a front end for your website well you're going to um run a service that is going to do that and the service",
    "start": "1505720",
    "end": "1511399"
  },
  {
    "text": "is going to be clever because if a container is going to die what does it need to do it needs to spawn up another container and it's just going to manage",
    "start": "1511399",
    "end": "1516919"
  },
  {
    "text": "those individual tasks but at a sort of bigger service level and then also the last uh last little bit is then a",
    "start": "1516919",
    "end": "1523000"
  },
  {
    "text": "cluster and this is sort of a grouping of services and task so you think you can think of your cluster as sort of",
    "start": "1523000",
    "end": "1528320"
  },
  {
    "text": "part of your application construct um and this is uh then uses underneath the capacity providers in a region and that",
    "start": "1528320",
    "end": "1534399"
  },
  {
    "text": "is then using ec2 or fargate and so you are using the you know the server full compute part of it or using the server",
    "start": "1534399",
    "end": "1541039"
  },
  {
    "text": "list part of it with fargate and both of them actually have spot options so it's going to be able to save you money you're going to be able to you know if",
    "start": "1541039",
    "end": "1546919"
  },
  {
    "text": "when there's available capacity you're going to be able to get cheap compute at a quick price with the caveat the data Bas is going to say no no no in 2",
    "start": "1546919",
    "end": "1552520"
  },
  {
    "text": "minutes I need to take that back please somebody else needs it and you're going to obviously be able to have to handle that within your containers to take",
    "start": "1552520",
    "end": "1557679"
  },
  {
    "text": "advantage of pricing something died um so as we were",
    "start": "1557679",
    "end": "1564159"
  },
  {
    "text": "talking about tasks and services what is sort of the kind of difference and the task is on demand workloads so this uses",
    "start": "1564159",
    "end": "1569919"
  },
  {
    "text": "the task schedular and you can think of this as a one-off job so you need to run a batch job or you need to do something",
    "start": "1569919",
    "end": "1575840"
  },
  {
    "text": "you know very much in the adventure of an architecture's World asynchronously um you're just going to run a single task but obviously for long running",
    "start": "1575840",
    "end": "1582600"
  },
  {
    "text": "applications or things that need a bit of orchestration to be able to make sure they're up and running uh those are going to be the servic and those are the",
    "start": "1582600",
    "end": "1588799"
  },
  {
    "text": "long running apps so and that then uses the ECS serice shedul and it's got this Health Management component built in and",
    "start": "1588799",
    "end": "1595039"
  },
  {
    "text": "that's going to do the scale up it's going to be able to look at different metrics it's going to be able to um you",
    "start": "1595039",
    "end": "1600080"
  },
  {
    "text": "can use custom metrics or you can use cloudwatch or you know anything to be able to say when I get to this adal containers when it drops below this",
    "start": "1600080",
    "end": "1606200"
  },
  {
    "text": "remove any other containers so it's just a nice way to be able to manage those all together and you can do a aware um",
    "start": "1606200",
    "end": "1612039"
  },
  {
    "text": "deployments so that means you can you know spread your website across multiple availability zones so you're not caught out if something happens and um",
    "start": "1612039",
    "end": "1619000"
  },
  {
    "text": "you can group containers together and this is more the concept of you know often containers don't work in isolation but you maybe have got a side car",
    "start": "1619000",
    "end": "1624720"
  },
  {
    "text": "container or you've got another container with an observability tool this is just the way that you can um bring those all together so a task",
    "start": "1624720",
    "end": "1631200"
  },
  {
    "text": "definition uh this is just from Json an example here it's got 128 Mega memory it's you know it's exposing Port 80",
    "start": "1631200",
    "end": "1637440"
  },
  {
    "text": "using TCP it's got engine X running that's just a name um uh you know n network config the memory the CPU",
    "start": "1637440",
    "end": "1644120"
  },
  {
    "text": "configuration and it's going to use fargate under the hood so this is just a task definition and that you can",
    "start": "1644120",
    "end": "1649799"
  },
  {
    "start": "1649000",
    "end": "1842000"
  },
  {
    "text": "specify so the task definition is set in ECS and then obviously under the hood we've got fargate and so fargate is",
    "start": "1649799",
    "end": "1655679"
  },
  {
    "text": "going to be this compute engine that is just going to run your container tasks and basically fargate behind the scenes",
    "start": "1655679",
    "end": "1661840"
  },
  {
    "text": "is going to dynamically provision an instance and so this is going to be uh you know equivalent of an ec2 instance",
    "start": "1661840",
    "end": "1667559"
  },
  {
    "text": "it is entirely isolated to your container entirely isolated uh to this task so it's not sharing any",
    "start": "1667559",
    "end": "1672919"
  },
  {
    "text": "infrastructure with any uh other accounts or services or let Alan um um",
    "start": "1672919",
    "end": "1678480"
  },
  {
    "text": "anything else so you know really secure Al together and you basically configure a a virtual CPU in a ram and that's then",
    "start": "1678480",
    "end": "1684320"
  },
  {
    "text": "sort of the shared pool between all of the containers in the task if you had those sidecar patterns so in terms of patching well",
    "start": "1684320",
    "end": "1691320"
  },
  {
    "text": "who looks after what who looks after what so AWS is going to manage the underlying host in the infrastructure so",
    "start": "1691320",
    "end": "1696360"
  },
  {
    "text": "I mentioned that there may be some ec2 involved you don't know you don't care AWS is going to manage it's going to",
    "start": "1696360",
    "end": "1701399"
  },
  {
    "text": "have a whole sort of pool of resources across all of our regions that we're going to manage to make sure they're available so when you do want to run a",
    "start": "1701399",
    "end": "1707080"
  },
  {
    "text": "task there is some computer available for you to run and then of course you",
    "start": "1707080",
    "end": "1712159"
  },
  {
    "text": "know slightly differently from Lambda you now are take on the patching of all the code so if you are running enginex",
    "start": "1712159",
    "end": "1717279"
  },
  {
    "text": "if you are running node.js or python or you know literally any language in that container everything within that",
    "start": "1717279",
    "end": "1723000"
  },
  {
    "text": "container is up to you to do some patching so we look after the infrastructure the hosts and the servers and all that uh networking and storage",
    "start": "1723000",
    "end": "1729600"
  },
  {
    "text": "to look after that but anything inside your application container that's up to you um in terms of load balancing and",
    "start": "1729600",
    "end": "1736399"
  },
  {
    "text": "Ingress with with ECS and kind of model this is sort of you know as you go you manage this because you want the",
    "start": "1736399",
    "end": "1742080"
  },
  {
    "text": "flexibility obviously client code you're going to be looking after that as well um and then the load balancing an",
    "start": "1742080",
    "end": "1747279"
  },
  {
    "text": "Ingress you're going to use a network load balancer or you know some other kind of service to be able to get your application um to be able to talk to",
    "start": "1747279",
    "end": "1754080"
  },
  {
    "text": "your containers could be behind API gate which is going to be servess as well but whatever it is you're going to be able to manage that there there isn't this",
    "start": "1754080",
    "end": "1760240"
  },
  {
    "text": "concept of an event just magically arrives in your containers you have to manage your Ingress with you and of",
    "start": "1760240",
    "end": "1765360"
  },
  {
    "text": "course you know AWS manages the instances uh but you're going to then that traffic to your application code and something within your application",
    "start": "1765360",
    "end": "1771120"
  },
  {
    "text": "code is then going to need to receive that uh request and do something with it so in that container example something",
    "start": "1771120",
    "end": "1776320"
  },
  {
    "text": "like enginex is going to be able to receive that VI report and socket model and do something with",
    "start": "1776320",
    "end": "1781360"
  },
  {
    "text": "it uh in terms of the scaling well um AWS is going to handle the actual scaling of the infrastructure so as I",
    "start": "1781360",
    "end": "1787039"
  },
  {
    "text": "mentioned before uh you know hopefully we're not going to run out of ec2 instances in some in regions but AWS is",
    "start": "1787039",
    "end": "1792519"
  },
  {
    "text": "just going to manage that and make sure that uh we've got um that containers on demand are always available for you but",
    "start": "1792519",
    "end": "1798640"
  },
  {
    "text": "obviously you then manage and you decide how many containers you're going to do and you can set up your um scaling for",
    "start": "1798640",
    "end": "1803919"
  },
  {
    "text": "those containers and there are a huge amount of different ways you can do this you can use AWS autoscaling you can use",
    "start": "1803919",
    "end": "1809320"
  },
  {
    "text": "cloudwatch logs and met or cloudwatch metrics to be able to feed those autoscaling decisions there are a whole bunch of third party tools you can use",
    "start": "1809320",
    "end": "1815480"
  },
  {
    "text": "open source tools but basically you talk to ECS and you say when this happens add some more containers when this happens",
    "start": "1815480",
    "end": "1821600"
  },
  {
    "text": "remove containers and you have manage that um scaling uh scaling yourself",
    "start": "1821600",
    "end": "1826640"
  },
  {
    "text": "contrast that to Lambda before where I didn't do anything and it just scaled up to those 10,000 sustained requests uh in",
    "start": "1826640",
    "end": "1832799"
  },
  {
    "text": "a certain period of time if I was doing the equivalent with fargate I would need to have a rule say cloudwatch for",
    "start": "1832799",
    "end": "1837919"
  },
  {
    "text": "example as it went up it would say add another task add another task and then remove it when it was finished so let's have a look at some of",
    "start": "1837919",
    "end": "1845039"
  },
  {
    "start": "1842000",
    "end": "2127000"
  },
  {
    "text": "the event an architecture patterns that you can actually do with seress containers so we were talking about the",
    "start": "1845039",
    "end": "1850480"
  },
  {
    "text": "difference between tasks and services here is an example you can see this is a very much an event driven uh application",
    "start": "1850480",
    "end": "1856919"
  },
  {
    "text": "uh an event trigger happens and it is going to create an ephemeral ECS task which is going to process a single event",
    "start": "1856919",
    "end": "1862799"
  },
  {
    "text": "sounds a bit like Lambda doesn't it interestingly so in this example we've got Amazon S3 you upload something to Amazon S3 it's going to do a",
    "start": "1862799",
    "end": "1869080"
  },
  {
    "text": "notification to eventbridge um and eventbridge is then going to be able to kick off a fargate task and maybe your",
    "start": "1869080",
    "end": "1875600"
  },
  {
    "text": "code is then going to write something into another um um bucket and you can",
    "start": "1875600",
    "end": "1880799"
  },
  {
    "text": "see here in order to do the event of an architector stuff you do need a vent Bridge of Step functions to actually invoke the task there's no there's no",
    "start": "1880799",
    "end": "1887279"
  },
  {
    "text": "built-in sort of task organizing thing in like you would in Lambda which is just going to automatically kick off that function and you know this is going",
    "start": "1887279",
    "end": "1894080"
  },
  {
    "text": "to be then for Less frequent events you know you're not you're not running a service where you need to manage a whole bunch of different containers that work",
    "start": "1894080",
    "end": "1899679"
  },
  {
    "text": "in tandem um and so they're going to be less frequency events you can have a lot of them so I don't necessarily think",
    "start": "1899679",
    "end": "1905279"
  },
  {
    "text": "they are less frequent they can be at sort of high scale and also longer duration one of the big things and not sure if I mentioned Lambda can only run",
    "start": "1905279",
    "end": "1911480"
  },
  {
    "text": "for up to 15 minutes so anything that you need longer than 15 minutes you've got two choices you either break it down",
    "start": "1911480",
    "end": "1916880"
  },
  {
    "text": "into smaller tasks that fit within the 15 minutes or you consider something like ECS and fargate where you can run",
    "start": "1916880",
    "end": "1922519"
  },
  {
    "text": "long running tasks that can basically run uh run forever so on the services kind of side",
    "start": "1922519",
    "end": "1928480"
  },
  {
    "text": "you can see this is an example over here so I have an sqsq maybe it's going to be a you know super high scale sqsq and I",
    "start": "1928480",
    "end": "1935120"
  },
  {
    "text": "have a whole bunch of tasks that are polling for messages from that sqsq so I'm not using a manage integration the",
    "start": "1935120",
    "end": "1940440"
  },
  {
    "text": "reason I'm going to be using fargate is maybe each message is going to take longer than 15 minutes to process or I just have ridiculously high frequency",
    "start": "1940440",
    "end": "1947360"
  },
  {
    "text": "and uh you know that's not going to be best suited for Lambda so uh ETS is then going to manage those deployments so in",
    "start": "1947360",
    "end": "1953639"
  },
  {
    "text": "this example I'm going to look at the sqsq I am going to then monitor the Q depth for example if the Q depth is not",
    "start": "1953639",
    "end": "1959639"
  },
  {
    "text": "going to be reducing I'm going to add more containers to drain that Q if the Q depth does drop down I can then reduce",
    "start": "1959639",
    "end": "1965559"
  },
  {
    "text": "the number of tasks so just a way that you can manage uh an effective service now one of the cool things with",
    "start": "1965559",
    "end": "1972039"
  },
  {
    "text": "the whole um ECS world is actually the cdk so that's a cloud development kit where you can Define your infrastructure",
    "start": "1972039",
    "end": "1977519"
  },
  {
    "text": "in your your favorite programming languages and there are these cdk level three constructs which are actually very",
    "start": "1977519",
    "end": "1982960"
  },
  {
    "text": "well defined for ECS so you can see here I have an ECS pattern I appreciate the the text is a little small it's not sort",
    "start": "1982960",
    "end": "1989039"
  },
  {
    "text": "of that important to see it but this is defining my infrastructure so you know it's a gigar ram it's you know a CPU",
    "start": "1989039",
    "end": "1995240"
  },
  {
    "text": "configuration telling me the containers you know what container I'm going to do and some environment variables that's going to be set and then using the cdk",
    "start": "1995240",
    "end": "2002799"
  },
  {
    "text": "code I can just set this like approximate number of messages visible so this is this uh you know how much is",
    "start": "2002799",
    "end": "2008159"
  },
  {
    "text": "slend the que and there's a direct integration with sqs to be able to pull that and then decide what you're going",
    "start": "2008159",
    "end": "2013600"
  },
  {
    "text": "to do so what I'm going to do for this example is well actually if I have um um",
    "start": "2013600",
    "end": "2019080"
  },
  {
    "text": "I've got a weight for example uh a waiting I can choose to use fargate spot or normal fargate and this is just a way",
    "start": "2019080",
    "end": "2024639"
  },
  {
    "text": "I can Define in infrastructure's code how I'm going to uh what my container is going to do uh what its scaling",
    "start": "2024639",
    "end": "2029880"
  },
  {
    "text": "mechanism is and you know how I'm going to distribute that compute load so another use case uh for example",
    "start": "2029880",
    "end": "2036679"
  },
  {
    "text": "could be something like code scanning so uh code commit is you know a service is going to automatically generate an event",
    "start": "2036679",
    "end": "2042039"
  },
  {
    "text": "to event Bridge that's going to be really easy to set up and that event Bridge again is going to um kick off a fargate task and that fargate task is",
    "start": "2042039",
    "end": "2048839"
  },
  {
    "text": "going to do scanning now this example would probably be longer than 15 minutes maybe it's some deepal vulnerability",
    "start": "2048839",
    "end": "2054040"
  },
  {
    "text": "scanning or it's a huge code base or this kind of thing but the point here is the native integration with AWS code",
    "start": "2054040",
    "end": "2060040"
  },
  {
    "text": "commit uh generates an event Bridge alert fargate is going to kick off and do something in this case it's going to",
    "start": "2060040",
    "end": "2065158"
  },
  {
    "text": "then send a notification to SNS to say yep my my code scanning is uh is complete so it's about building these",
    "start": "2065159",
    "end": "2071000"
  },
  {
    "text": "event driven pipelines where we're very comfortable with doing it with Lambda and understanding AWS fargate as another",
    "start": "2071000",
    "end": "2076638"
  },
  {
    "text": "compute option um to expand your possibilities so I'm going to demo a",
    "start": "2076639",
    "end": "2081800"
  },
  {
    "text": "sort of slightly different one of this uh shortly with file processing where an S you load something into an S3 uh",
    "start": "2081800",
    "end": "2087720"
  },
  {
    "text": "object automatically kick on vent Bridge Rule and this is then going to go to step functions and step functions is",
    "start": "2087720",
    "end": "2093158"
  },
  {
    "text": "actually going to make a choice it's going to say should I use Lambda for this compute or should I use fargate for this compute and ultimately it's going",
    "start": "2093159",
    "end": "2099560"
  },
  {
    "text": "to uh put the message in the bucket now in in another bucket now uh in this example on the screen here what it's",
    "start": "2099560",
    "end": "2104920"
  },
  {
    "text": "actually going to do is say is this a video if it's a video I'm going to use fargate and if it's a um if it's an",
    "start": "2104920",
    "end": "2110599"
  },
  {
    "text": "image I'm going to use Lambda because why a a video is going to be far longer it's going to take probably longer than",
    "start": "2110599",
    "end": "2116400"
  },
  {
    "text": "15 minutes and I'm going to use uh going to be able to use fargate for that and maybe it's not just a Time perspective",
    "start": "2116400",
    "end": "2122079"
  },
  {
    "text": "but um you know fargate can have a lot more computing power so maybe you're going to be able to need that so why",
    "start": "2122079",
    "end": "2127440"
  },
  {
    "start": "2127000",
    "end": "2570000"
  },
  {
    "text": "don't let's do this and make it happen in action so I have oh that was a previous demo So currently um in fact",
    "start": "2127440",
    "end": "2135280"
  },
  {
    "text": "I'm going to go to my code first and we can have a little Look So currently I've have yeah it's on the screen so I've",
    "start": "2135280",
    "end": "2141560"
  },
  {
    "text": "actually set this up uh in infrastructures code I have a cloud formation template which is just setting",
    "start": "2141560",
    "end": "2147280"
  },
  {
    "text": "up a bunch of things I just want to show you how some of the event driven stuff is actually quite easy to set up so for",
    "start": "2147280",
    "end": "2152480"
  },
  {
    "text": "example I'm going to Define an S3 bucket which I called Source bucket and I'm just going to say here um",
    "start": "2152480",
    "end": "2158680"
  },
  {
    "text": "create an event Bridge rule to notify me when things appear in the bucket that's three lines of cloud information I don't",
    "start": "2158680",
    "end": "2164319"
  },
  {
    "text": "have to specify anything else this is just automatically going to say for this particular bucket anything changes on that bucket let event Bridge know that",
    "start": "2164319",
    "end": "2170440"
  },
  {
    "text": "is pretty cool I've then got a St function State machine in here I've got some Lambda functions I've got some ECS",
    "start": "2170440",
    "end": "2175720"
  },
  {
    "text": "tasks never mind all that but the cool thing over here is I can kick off step functions to",
    "start": "2175720",
    "end": "2181280"
  },
  {
    "text": "say um I'm setting up an eventage rule from S3 whenever an object is created uh",
    "start": "2181280",
    "end": "2187160"
  },
  {
    "text": "from the Source bucket um I want to then kick off this state machine step function that's the second part in the",
    "start": "2187160",
    "end": "2192839"
  },
  {
    "text": "chain that's very easy to read um you're not creating any polling logic you're not doing anything that's a sort of",
    "start": "2192839",
    "end": "2198319"
  },
  {
    "text": "direct integration to be able to connect um S3 to fargate for example uh there",
    "start": "2198319",
    "end": "2203440"
  },
  {
    "text": "are sort of some examples I've got a Docker file over here for my ECS task and basically I've got a step functions",
    "start": "2203440",
    "end": "2208640"
  },
  {
    "text": "workflow that is basically going to check the image size and it's going to tell me um uh in fact is this one is a",
    "start": "2208640",
    "end": "2216119"
  },
  {
    "text": "video so this is going to say if the video is bigger than a certain size use ECS to run the task or I'm going to use",
    "start": "2216119",
    "end": "2222480"
  },
  {
    "text": "Lambda to run the task and then it's going to finish and when it's finished event architectures either pathway it's going to go down put something on a",
    "start": "2222480",
    "end": "2228599"
  },
  {
    "text": "vbridge to finish so um uh looking at the step function State machine I'm",
    "start": "2228599",
    "end": "2234480"
  },
  {
    "text": "going to show what that looks like a bit nicer than the code but basically it's just a choice State over here and this is going to do a choosing and saying the",
    "start": "2234480",
    "end": "2241560"
  },
  {
    "text": "object that arrives from S3 if the size is greater than that run ECS otherwise",
    "start": "2241560",
    "end": "2246920"
  },
  {
    "text": "by default run Lambda that's going to be really easy so I actually have a um S3",
    "start": "2246920",
    "end": "2253119"
  },
  {
    "text": "object which I'm just copying from one bucket to another I didn't want to copy it from my local laptop up to S3 because",
    "start": "2253119",
    "end": "2258400"
  },
  {
    "text": "conference Wi-Fi is always going to be awesome and mess it up for you and so what's actually happened over here is",
    "start": "2258400",
    "end": "2263880"
  },
  {
    "text": "currently I have no tasks running so this uh ECS Services cost me absolutely zero because ECS doesn't cost me when",
    "start": "2263880",
    "end": "2270119"
  },
  {
    "text": "I'm when I'm not doing anything um but now what I've done is I'm going to be able to kick off a Tas I literally refreshed this and ha demo gods are not",
    "start": "2270119",
    "end": "2278760"
  },
  {
    "text": "behaving that should have copied ah because I'm looking at services not tasks so promise you I wasn't lying",
    "start": "2278760",
    "end": "2285520"
  },
  {
    "text": "there wasn't any service over here that was running before that uh it was entirely free uh nothing was happening",
    "start": "2285520",
    "end": "2291040"
  },
  {
    "text": "I've just set up this task to run as soon as i' as soon as I've Done That What's happened is um files landed up in",
    "start": "2291040",
    "end": "2297680"
  },
  {
    "text": "S3 it's gone to event Bridge event bridge is told step function step functions says what's the size what's",
    "start": "2297680",
    "end": "2303000"
  },
  {
    "text": "the size uh this is going to be bigger than I wanted to do to Lambda and then has kicked off this task and so this",
    "start": "2303000",
    "end": "2308280"
  },
  {
    "text": "task has started uh you know 10 seconds ago if I look at the task I can see you know all the configuration and this is four virtual",
    "start": "2308280",
    "end": "2314880"
  },
  {
    "text": "CPUs and 30 gig of memory so a Lambda function can only be 10 gig of memory so I'm already using fargate because I've",
    "start": "2314880",
    "end": "2320520"
  },
  {
    "text": "got more computing power and so off this uh is going so this is going to run it's",
    "start": "2320520",
    "end": "2326720"
  },
  {
    "text": "going to do some image processing on this this would be um you know one of the world's boring demos if we waited for 20 minutes just watching an EC ECS",
    "start": "2326720",
    "end": "2333280"
  },
  {
    "text": "task happen but I thought I'd just switch over to Step functions so we looked actually in the code that this",
    "start": "2333280",
    "end": "2338839"
  },
  {
    "text": "was the step function State machine and the cool thing about step functions is the step functions has actually got an",
    "start": "2338839",
    "end": "2344960"
  },
  {
    "text": "invocation that he's running if I select on that I've got this awesome picture which shows me exactly what's currently",
    "start": "2344960",
    "end": "2350440"
  },
  {
    "text": "happening so on my image size I can look at the input and you can see really",
    "start": "2350440",
    "end": "2356040"
  },
  {
    "text": "simply this came from S3 and it will have a S3 bucket name and it has got a",
    "start": "2356040",
    "end": "2361400"
  },
  {
    "text": "video file and there is the size that is the size that step functions was doing that Choice DAT on and uh uh that's the",
    "start": "2361400",
    "end": "2369920"
  },
  {
    "text": "uh output of the state so the output of the State uh the choice St was go to ECS run task and that is basically going to",
    "start": "2369920",
    "end": "2376240"
  },
  {
    "text": "give that ECS task the S3 uh details and so also it is sending on there's the",
    "start": "2376240",
    "end": "2381520"
  },
  {
    "text": "bucket name and it's got the the key file and So within my ECS task I'm just downloading that file from S3 doing",
    "start": "2381520",
    "end": "2387960"
  },
  {
    "text": "whatever processing I need to do it and then I've got a sort of another step which hasn't run here which is going to",
    "start": "2387960",
    "end": "2393119"
  },
  {
    "text": "run but how cool is this that I can have a workflow that I can see visually and I can see exactly what is happening and",
    "start": "2393119",
    "end": "2399520"
  },
  {
    "text": "that's obviously all on the happy path um I'm not going to wait but if I show a successful one uh you can see that you",
    "start": "2399520",
    "end": "2405560"
  },
  {
    "text": "know that did the image size ECS task ran I can look at don't select on that I looked at the inputs I looked at the",
    "start": "2405560",
    "end": "2411520"
  },
  {
    "text": "outputs and the output over here will you know give a I think I I've populated a time that was going to happen and that",
    "start": "2411520",
    "end": "2417359"
  },
  {
    "text": "then sends it over to you know another thing in the workflow I can do anything and then ultimately whichever step it's",
    "start": "2417359",
    "end": "2423119"
  },
  {
    "text": "going to do uh it's uh this process is going to do in event put events now now this cool thing is on the event Bridge",
    "start": "2423119",
    "end": "2429200"
  },
  {
    "text": "put events I will show you over here if I actually look at the state machine is we've obviously got custom code that is",
    "start": "2429200",
    "end": "2435000"
  },
  {
    "text": "running here in ECS and Lambda but this event Bridge put events is once this is",
    "start": "2435000",
    "end": "2440359"
  },
  {
    "text": "finished I'm just going to say send something to vbridge I don't have to write any code for this this is what uh",
    "start": "2440359",
    "end": "2446319"
  },
  {
    "text": "step functions has as a direct SDK integration and all it's saying is here",
    "start": "2446319",
    "end": "2451680"
  },
  {
    "text": "it is uh tell me my this video details uh we've got the sending some information got a source and it's",
    "start": "2451680",
    "end": "2458359"
  },
  {
    "text": "telling me put it on the event bus I've got a source of serverless video and it's just going to say that this recording is ready so I could have a",
    "start": "2458359",
    "end": "2464480"
  },
  {
    "text": "downstream service that is then going to take this information and is going to be able to react in an event of an architecture way but I'm not writing any",
    "start": "2464480",
    "end": "2471359"
  },
  {
    "text": "codee from the ECS task to put something on a vent bridge I'm just allowing step functions to do that Advantage is first",
    "start": "2471359",
    "end": "2478000"
  },
  {
    "text": "of all I got a visual workflow I can see exactly what's happening I have no code to maintain I mean all the work that's",
    "start": "2478000",
    "end": "2484000"
  },
  {
    "text": "all the configuration that is in here is to make that work is literally over here I've probably even got more information in here than I actually need so a really",
    "start": "2484000",
    "end": "2490319"
  },
  {
    "text": "easy way in a sort of low code approach this configuration is never going to go out of date there's no patching there's no optimization there's no node or",
    "start": "2490319",
    "end": "2497160"
  },
  {
    "text": "python or you know Java code that I'm running to do that so super helpful um Step functions has the native SD K",
    "start": "2497160",
    "end": "2503319"
  },
  {
    "text": "Integrations anything well most anything you can do in SDK you can do directly in Step functions and I think that's over",
    "start": "2503319",
    "end": "2509880"
  },
  {
    "text": "11 or 12,000 SDK things so if you think of you know reading from Dynam DB writing to Dynam DB starting a you know",
    "start": "2509880",
    "end": "2517200"
  },
  {
    "text": "insert of data into Aurora um you know batch glue Lambda literally anything you",
    "start": "2517200",
    "end": "2522599"
  },
  {
    "text": "can use the fdk call so yeah super powerful really nice way you can build event architectures you can see here in",
    "start": "2522599",
    "end": "2528560"
  },
  {
    "text": "a way this is a mini microservice so I was talking about the difference between step functions and event Bridge we are showing here an example of that uh that",
    "start": "2528560",
    "end": "2535480"
  },
  {
    "text": "start thing is actually something that's happening in a vent Bridge think of it as another microservice comes in here does my choice state does my video",
    "start": "2535480",
    "end": "2541680"
  },
  {
    "text": "processing puts an event back on the event bus I've then got another another micros service that kicks off and handles that um and then uh carries that",
    "start": "2541680",
    "end": "2549319"
  },
  {
    "text": "on and I can have multiple microservices um handing this video so for example the video has now been processed uh it's",
    "start": "2549319",
    "end": "2554920"
  },
  {
    "text": "been analyze I could use machine learning I could use you know gen to create some subtitles or you know some",
    "start": "2554920",
    "end": "2561640"
  },
  {
    "text": "other machine learning thing to do a transcript I could do anything build these impressive invent architectures um combining the two",
    "start": "2561640",
    "end": "2568200"
  },
  {
    "text": "together so the question you're thinking of hopefully is well which compute",
    "start": "2568200",
    "end": "2574400"
  },
  {
    "start": "2570000",
    "end": "3050000"
  },
  {
    "text": "option should I actually use which is right for my application so let's go through some of the considerations so there's some",
    "start": "2574400",
    "end": "2580920"
  },
  {
    "text": "architectural considerations which I think hopefully you picked up here today and some of them on the lamb decide is well you know those triggers are managed",
    "start": "2580920",
    "end": "2587720"
  },
  {
    "text": "the the run times are managed we're going to patch node for you we're going to patch um python for you um we're",
    "start": "2587720",
    "end": "2592839"
  },
  {
    "text": "going to manage the triggers so when something from API Gateway or something from event Bridge comes in you don't",
    "start": "2592839",
    "end": "2597960"
  },
  {
    "text": "have to manage all of that Lamb's going to do that do that for you and of course any of the security and the scaling is",
    "start": "2597960",
    "end": "2603760"
  },
  {
    "text": "managed by AWS uh it's not all of the security so for instance in your Lambda function code we may look after the node",
    "start": "2603760",
    "end": "2610599"
  },
  {
    "text": "as the runtime but if you've got dependencies or you've got uh modules or things that you're important into your code you know you need you still need to",
    "start": "2610599",
    "end": "2617040"
  },
  {
    "text": "do uh look after that and you know the scaling is managed by a WS we saw saw the demo earlier at sharp scaling you",
    "start": "2617040",
    "end": "2622800"
  },
  {
    "text": "didn't need to configure anything and do that on the container side well you know it's your custom code your services it",
    "start": "2622800",
    "end": "2629040"
  },
  {
    "text": "gives you a lot more flexibility that you can use a lot more a lot of different Services any code you can run in a container you're going to be able",
    "start": "2629040",
    "end": "2634880"
  },
  {
    "text": "to just run run that you know respond to things R an API you're going to be run run these services or running these",
    "start": "2634880",
    "end": "2640280"
  },
  {
    "text": "tasks but you know the caveat with that is well there's a bit more management and orchestration that you need to do uh you need to do for",
    "start": "2640280",
    "end": "2646440"
  },
  {
    "text": "yourself then in terms of resource considerations we touched on this a little bit earlier a Lambda function can run from 128 Meg Ram all up all the way",
    "start": "2646440",
    "end": "2653680"
  },
  {
    "text": "up to 10 gig and basically you only configure the memory then that's proportional CPU and then proportional",
    "start": "2653680",
    "end": "2659520"
  },
  {
    "text": "Network which is going to be configured and you've got one performance lever which is really easy just to configure the memory it can run for maximum of 15",
    "start": "2659520",
    "end": "2666440"
  },
  {
    "text": "minutes that's just one of the ways that Lambda works as I said before you need to do something longer you use another",
    "start": "2666440",
    "end": "2671839"
  },
  {
    "text": "service or you break down your job into things that can run out of 15 minutes and I spoke about that sort of single",
    "start": "2671839",
    "end": "2676960"
  },
  {
    "text": "concurrency so one event comes at a time uh to run that Lambda function and that means that you know that scaling that",
    "start": "2676960",
    "end": "2682640"
  },
  {
    "text": "concurrency uh happens as part of a single concurrency model and the cool thing about that is that's sort of",
    "start": "2682640",
    "end": "2688200"
  },
  {
    "text": "really e really easy to reason about once you sort of wrap your head around it you know that you upload one S3 object or one HTTP hitch on your website",
    "start": "2688200",
    "end": "2695520"
  },
  {
    "text": "invoke a single Lambda function and you just sort of understand how that works and it's actually quite conceptually hopefully conceptually easily on the",
    "start": "2695520",
    "end": "2702559"
  },
  {
    "text": "container side well you've got way more variety which is super useful so you know a quarter of a CPU all the way up to 160 virtual CPUs up to 120 g 120 g",
    "start": "2702559",
    "end": "2710800"
  },
  {
    "text": "Ram I think that that may even be a little bit higher now but yeah lots more um gigabytes of memory that you can add",
    "start": "2710800",
    "end": "2716079"
  },
  {
    "text": "to your task loads of different networking modes anybody use in the container world when it's more a port",
    "start": "2716079",
    "end": "2721319"
  },
  {
    "text": "socket model rather than just the the event based mode me you know means there's lots of different networking",
    "start": "2721319",
    "end": "2726960"
  },
  {
    "text": "structs that you can uh that you can use to connect all things together and you know no 15 minutes unlimited running",
    "start": "2726960",
    "end": "2732359"
  },
  {
    "text": "time uh these can go for long as you like and then also there's multic concurrency so if you have a you know a",
    "start": "2732359",
    "end": "2738079"
  },
  {
    "text": "flask app or you've got something like that um that's going to be running a website you can obviously take multiple",
    "start": "2738079",
    "end": "2743400"
  },
  {
    "text": "requests it's going to then come in Via a load balancer and you know this is a a way that you can really get you know hu",
    "start": "2743400",
    "end": "2749079"
  },
  {
    "text": "huge amount of compute power and use the sort of power of containers with a multic concurrency to process the same thing at the same time if anybody's",
    "start": "2749079",
    "end": "2756079"
  },
  {
    "text": "using node.js for example you think of the event Loop you know this is the kind of efficiency that node allows that you the event Loop can just keep processing",
    "start": "2756079",
    "end": "2762680"
  },
  {
    "text": "multiple things at the same time which it doesn't do with Lambda so in terms of the pricing well",
    "start": "2762680",
    "end": "2768319"
  },
  {
    "text": "sort of the headline thing to think about is fargate is you pay for what your provision and Lambda you pay for what you use so fargate a task spins up",
    "start": "2768319",
    "end": "2776160"
  },
  {
    "text": "you pay until it shuts down whatever happens in that time you're going to pay for it but you can do as much as you can",
    "start": "2776160",
    "end": "2781680"
  },
  {
    "text": "in that time so for example here we've got multiple tasks running multiple requests are coming in we've got high",
    "start": "2781680",
    "end": "2786720"
  },
  {
    "text": "through it we've got high concurrency um and this is just uh you know an awesome way to have a whole bunch of compute",
    "start": "2786720",
    "end": "2792079"
  },
  {
    "text": "power and so in terms of pricing you're going to pay uh per container instance per second and that's based on the CPU",
    "start": "2792079",
    "end": "2798800"
  },
  {
    "text": "and the memory that you can going to configure it for it and there is a minimum of a one one minute charge that's just how it works and it's a",
    "start": "2798800",
    "end": "2805040"
  },
  {
    "text": "constant constant price uh regardless of what's going on inside that container obviously if nothing's going inside your",
    "start": "2805040",
    "end": "2811200"
  },
  {
    "text": "nothing's going on inside your container uh you're either wasting money or you just you know you're scaling up a bit of",
    "start": "2811200",
    "end": "2816359"
  },
  {
    "text": "Headroom so uh this is certainly going to be the lowest per request cost when the",
    "start": "2816359",
    "end": "2821440"
  },
  {
    "text": "concurrent traffic is high and your code is also efficient on the Lambda side remember we've got one request at a time",
    "start": "2821440",
    "end": "2828440"
  },
  {
    "text": "so you pay for what you use not pay for what you provision so when a Lambda function doesn't invoke and it finishes",
    "start": "2828440",
    "end": "2834200"
  },
  {
    "text": "lambda's just going to say oh hang on I'm going to pause and there's going to be no charge and that's directly going to scale to zero then as soon as another",
    "start": "2834200",
    "end": "2841000"
  },
  {
    "text": "request comes in uh your Lambda function is just going to spin up run its work and then go back down so you're going to",
    "start": "2841000",
    "end": "2846599"
  },
  {
    "text": "pay uh per you know per millisecond there's no minimum billing nothing like that this is you know a really efficient",
    "start": "2846599",
    "end": "2851800"
  },
  {
    "text": "granular way that you can do your costing where you're able to charge per per invoke and the the pricing model is",
    "start": "2851800",
    "end": "2857599"
  },
  {
    "text": "on the duration per invoke and on the memory size of the function so obviously this is going to be really cost",
    "start": "2857599",
    "end": "2863000"
  },
  {
    "text": "effective when there are gaps in the work to do you haven't got multi multi concurrency you've got single concurrency obviously they can scale up",
    "start": "2863000",
    "end": "2869400"
  },
  {
    "text": "individually to super high scale um but yeah if you have a whole bunch of work that's going to happen within one single",
    "start": "2869400",
    "end": "2875599"
  },
  {
    "text": "container um that's going to be more cost efficient but this is going to be EAS certainly easier to manage um and a",
    "start": "2875599",
    "end": "2880880"
  },
  {
    "text": "different way of thinking about it so some ideas on selecting between the two uh you know you can use serverless",
    "start": "2880880",
    "end": "2886520"
  },
  {
    "text": "containers it's going to have a lower startup latency than ec2 Auto scaling for example there's not a whole you know",
    "start": "2886520",
    "end": "2891640"
  },
  {
    "text": "VM that needs to come up and take a whole bunch of time uh anything that you need a long running compute job longer than 15 minutes obviously you you you",
    "start": "2891640",
    "end": "2899280"
  },
  {
    "text": "prevent it from running Lambda if you've got predictable high traffic usage uh maybe you've also got some data",
    "start": "2899280",
    "end": "2904359"
  },
  {
    "text": "persistence that's another thing so if you've got um EBS volumes can can be attached to ECS tasks so if you do have",
    "start": "2904359",
    "end": "2910240"
  },
  {
    "text": "some data in an EBS volume you're not you're not able to leverage that within Lambda that's another consideration and",
    "start": "2910240",
    "end": "2916200"
  },
  {
    "text": "of course you know when you do want some more control of your compute environment you want to choose some different instances may you know even if you are",
    "start": "2916200",
    "end": "2922280"
  },
  {
    "text": "going ec2 you've got a lot more Choice over there that's why you would pick that's not the serverless containers that's sort of server full containers uh",
    "start": "2922280",
    "end": "2928640"
  },
  {
    "text": "but that's another consideration point you may have and also with a tooling consistency uh you know huge amounts of",
    "start": "2928640",
    "end": "2933960"
  },
  {
    "text": "container tooling out there uh this is just a container it's going run in your laptop it's going to run in the cloud you've got maybe cicd pipelines you've",
    "start": "2933960",
    "end": "2940319"
  },
  {
    "text": "got observability tools all those kind of things are just really easy going to nicely wrap in with the",
    "start": "2940319",
    "end": "2946200"
  },
  {
    "text": "containers um there was another slide which said",
    "start": "2946200",
    "end": "2951520"
  },
  {
    "text": "serverless function so I will just ah must have hidden that slide anyway what I'll say is um you'll pick",
    "start": "2951520",
    "end": "2958559"
  },
  {
    "text": "serverless functions if you do want to sort of Outsource any of that management and maintenance to AWS you want us to",
    "start": "2958559",
    "end": "2964040"
  },
  {
    "text": "handle the skating for you you want us to handle the patching for you you most of the patching of the runtime um you",
    "start": "2964040",
    "end": "2969359"
  },
  {
    "text": "just want to be um multi-az by default you don't want to worry about things um you know spitting across azs or that",
    "start": "2969359",
    "end": "2974799"
  },
  {
    "text": "kind of thing that's where you're going to use uh that's where you're going to use Lambda and that's when you actually deliberately want less control you want",
    "start": "2974799",
    "end": "2980040"
  },
  {
    "text": "to focus on your business value you don't want to be uh you know messing around with compute instances and doing all that kind of thing L is a great",
    "start": "2980040",
    "end": "2985760"
  },
  {
    "text": "choice going to be doing that and so there's sort of this sweet spot you can think about it AWS fargate is going to",
    "start": "2985760",
    "end": "2990960"
  },
  {
    "text": "be really good if you've got thousands of concurrent requests a lot of requests and it's stable and predictable on on",
    "start": "2990960",
    "end": "2996400"
  },
  {
    "text": "the on the different axis and you can think of this as a sort of uh intensity scale you know how much concurrency you",
    "start": "2996400",
    "end": "3001760"
  },
  {
    "text": "want and the stability scale you know how predictable is it then lambda's going to be really good if you've only you know youve got a few requests at a",
    "start": "3001760",
    "end": "3008040"
  },
  {
    "text": "time as we saw with the 10,000 request scaling that is still still pretty high so don't think that Lambda is sort of",
    "start": "3008040",
    "end": "3013559"
  },
  {
    "text": "only for sort of really small applications but that's the way it's going to work and of course if it's got spiky workloads off hours you know off",
    "start": "3013559",
    "end": "3020000"
  },
  {
    "text": "in the evening off during the day weekends this kind of thing again you don't have to think about it lambda's just going to scale up and down uh as",
    "start": "3020000",
    "end": "3026119"
  },
  {
    "text": "needed simpler please simpler please you give me too much information already so",
    "start": "3026119",
    "end": "3031760"
  },
  {
    "text": "ETS fargate is great you've got long running these are stable tasks high volume and high resource event sources",
    "start": "3031760",
    "end": "3038079"
  },
  {
    "text": "then that's a you know really great way to use ECS fargate and then for the rest you want the Simplicity option you want",
    "start": "3038079",
    "end": "3043200"
  },
  {
    "text": "the event of an option you want the manag uh the manage run times all that kind of thing uh lambda's going to be",
    "start": "3043200",
    "end": "3048640"
  },
  {
    "text": "the the happy one for you and of course nothing changes everything you know everything uh moves all the time so",
    "start": "3048640",
    "end": "3054640"
  },
  {
    "start": "3050000",
    "end": "3074000"
  },
  {
    "text": "we're going to be building more well architected fundamentals these seress Services means best practices are built",
    "start": "3054640",
    "end": "3060040"
  },
  {
    "text": "into the cloud we will do that for you good developer experience you know we can improve the controls and we're going to you know more and more Integrations",
    "start": "3060040",
    "end": "3066160"
  },
  {
    "text": "are going to happen over the time so if you bet on serverless things are just going to improve all the time as you saw with some of the scaling improvements",
    "start": "3066160",
    "end": "3072319"
  },
  {
    "text": "before serus has got you back it's going to improve what you're to do thank you hopefully you've got some information",
    "start": "3072319",
    "end": "3078079"
  },
  {
    "start": "3074000",
    "end": "3101000"
  },
  {
    "text": "today about choosing some serus compute between your for your Venture and architectures uh I'll be around for",
    "start": "3078079",
    "end": "3083119"
  },
  {
    "text": "questions as well so thanks so much for joining",
    "start": "3083119",
    "end": "3087799"
  }
]