[
  {
    "start": "0",
    "end": "54000"
  },
  {
    "text": "all right this is simple functional effects with tag unions I'm Richard Feldman so back in the day the only way",
    "start": "5520",
    "end": "10800"
  },
  {
    "text": "to do effects were side effects is sort of the only game in town and later on we got managed effects which are sort of ways to organize your effects like uh",
    "start": "10800",
    "end": "17520"
  },
  {
    "text": "promises tasks Futures things like that and then nowadays we also have effect systems which are ways to sort of do",
    "start": "17520",
    "end": "23279"
  },
  {
    "text": "more than just organize your effects it's ways to sort of transform them or uh make them able to be tested more",
    "start": "23279",
    "end": "29340"
  },
  {
    "text": "easily things like that so today I'm going to talk about one particular effect system and I'm going to start with the motivation behind this effect",
    "start": "29340",
    "end": "35160"
  },
  {
    "text": "system uh some of the examples of things that I'm trying to solve with it I'm talking about tag unions which are the",
    "start": "35160",
    "end": "40500"
  },
  {
    "text": "language feature that sort of underlie the the characteristics of this effect system talk about the system itself and then finally do some comparisons to",
    "start": "40500",
    "end": "46860"
  },
  {
    "text": "other effect systems so let's start with motivation I want to break this down to three parts one is testing another is handling errors and",
    "start": "46860",
    "end": "53160"
  },
  {
    "text": "another is logging um so to give us concrete example here I'm going to talk about this package downloader so something that I've",
    "start": "53160",
    "end": "59579"
  },
  {
    "start": "54000",
    "end": "117000"
  },
  {
    "text": "actually been working on recently I've been building this programming language called Rock which I'll talk about more a little bit later",
    "start": "59579",
    "end": "64799"
  },
  {
    "text": "um and one of the features in rock is that you can download packages uh so there's sort of a couple of different steps that this will go through so one",
    "start": "64799",
    "end": "71040"
  },
  {
    "text": "is you specify the URL of the package that you want to download as a dependency so example.com and then",
    "start": "71040",
    "end": "76979"
  },
  {
    "text": "there's a little hash there before the file extension and basically what happens is it downloads this compressed",
    "start": "76979",
    "end": "82680"
  },
  {
    "text": "tarball from the URL so this tar.gz um before it decompresses it onto your file system it's actually going to",
    "start": "82680",
    "end": "88380"
  },
  {
    "text": "verify the contents against the hash in the URL so this is sort of a security feature it's a way to say okay I'm",
    "start": "88380",
    "end": "94740"
  },
  {
    "text": "actually getting the thing that I expected and this way if the domain gets compromised or you know taken over later after it expires by somebody else you",
    "start": "94740",
    "end": "101880"
  },
  {
    "text": "don't have to worry about us this URL suddenly giving you something malicious because if the you know the attacker",
    "start": "101880",
    "end": "107100"
  },
  {
    "text": "wanted to do that they would have to change the hash which in turn would change the url and then finally you know once it's been verified we can actually",
    "start": "107100",
    "end": "113159"
  },
  {
    "text": "decompress it into a local directory and now you've got this dependency downloaded so here's an example of how I could",
    "start": "113159",
    "end": "120060"
  },
  {
    "start": "117000",
    "end": "365000"
  },
  {
    "text": "write this function this is kind of a simplified version of the real thing but it performs the same basic steps this is",
    "start": "120060",
    "end": "125100"
  },
  {
    "text": "going to be in Rust because the compiler for rock is written in Rust but it could be you know work in any number of different languages",
    "start": "125100",
    "end": "130800"
  },
  {
    "text": "so it's a function called download tarball it takes a URL as an argument and then that URL is going to be a",
    "start": "130800",
    "end": "135900"
  },
  {
    "text": "string it's going to return a result of either a hash or an i o error so if",
    "start": "135900",
    "end": "141300"
  },
  {
    "text": "you're not familiar with rust this is basically a way of saying either this function is going to return a hash if",
    "start": "141300",
    "end": "147180"
  },
  {
    "text": "it's successful so this hash would be like the actual uh you know shot 256 or whatever else hash of the contents of",
    "start": "147180",
    "end": "153300"
  },
  {
    "text": "the tarball otherwise if if the operation is unsuccessful then it's going to return an i o error instead so",
    "start": "153300",
    "end": "159120"
  },
  {
    "text": "this would be like if the network was down or you were trying to write unpack it into a file directory that's you",
    "start": "159120",
    "end": "165000"
  },
  {
    "text": "don't have right permissions to something like that any number of things that could go wrong there okay the body of the function again this",
    "start": "165000",
    "end": "171120"
  },
  {
    "text": "is going to be an oversimplified version we're going to say let response equals and then do an https colon colon get on",
    "start": "171120",
    "end": "176819"
  },
  {
    "text": "that URL so this is pretend we have a library called https we're going to just go get the contents this URL and it's",
    "start": "176819",
    "end": "182340"
  },
  {
    "text": "going to give us back the response we're going to do some stuff in between but then at the very end the last thing we're going to do is we're going to return the the hash of this response so",
    "start": "182340",
    "end": "189599"
  },
  {
    "text": "the the hash of the body so basically that's this this function's job is to download it and then it's actually going",
    "start": "189599",
    "end": "194819"
  },
  {
    "text": "to unpack it in the middle here and then return the hash at the end so let's say we wanted to you know",
    "start": "194819",
    "end": "200519"
  },
  {
    "text": "decompress it in order to decompress it we need to First figure out what is you know how is it compressed so I gave that",
    "start": "200519",
    "end": "205860"
  },
  {
    "text": "dot tar.gz example earlier there's actually a couple of different ways that we could specify what the uh encoding is",
    "start": "205860",
    "end": "211680"
  },
  {
    "text": "so one is looking at the file extension in the URL so dot tar.gz but also it's entirely possible that we'll get a",
    "start": "211680",
    "end": "217739"
  },
  {
    "text": "Content encoding header back on the response and maybe we want to use that instead so there's a couple different ways we could infer what what this",
    "start": "217739",
    "end": "224099"
  },
  {
    "text": "thing's encoded as which is important because we need to be able to figure out how we want to decompress it and then finally we're going to actually call",
    "start": "224099",
    "end": "230040"
  },
  {
    "text": "extract tarball which will decompress it using the encoding that we got from this get encoding thing that infers it and",
    "start": "230040",
    "end": "236040"
  },
  {
    "text": "then finally the the response that has the actual bytes that we're going to decompress and extract onto the file system",
    "start": "236040",
    "end": "241140"
  },
  {
    "text": "okay so a couple of different steps to this function um so one of the things that I love to",
    "start": "241140",
    "end": "246180"
  },
  {
    "text": "do in Rust and this is a very popular strategy is to add this little question mark right here um so what does that question mark do",
    "start": "246180",
    "end": "252060"
  },
  {
    "text": "basically this says okay https get returns a result and this result that",
    "start": "252060",
    "end": "257760"
  },
  {
    "text": "this thing is going to return is going to be a little bit different than the one that we were returning from this function instead of returning a hash on",
    "start": "257760",
    "end": "263400"
  },
  {
    "text": "success this one's going to return a response on success but it's still going to return an i o error if something goes",
    "start": "263400",
    "end": "268740"
  },
  {
    "text": "wrong so what this question mark says is okay given that I am calling this function",
    "start": "268740",
    "end": "273840"
  },
  {
    "text": "and getting back a result and that result has the same error type as the error type of my function as a whole you",
    "start": "273840",
    "end": "280740"
  },
  {
    "text": "know what I'm going to do is if I get back an error I'm just going to early return from this function and just go right to the end and return one of these",
    "start": "280740",
    "end": "287040"
  },
  {
    "text": "errors so basically it's sort of like a a really really concise syntax sugar for an early return on error if this thing",
    "start": "287040",
    "end": "294360"
  },
  {
    "text": "returns an error so I can do that again down here basically with this extract tarball say like okay if this operation",
    "start": "294360",
    "end": "301560"
  },
  {
    "text": "again you know this could have an i o error on the file system uh like you know again the directory is missing or I",
    "start": "301560",
    "end": "306720"
  },
  {
    "text": "don't have right permissions to it um this question mark will once again early return before we even like run",
    "start": "306720",
    "end": "312240"
  },
  {
    "text": "this last line with that error cool so again very happy with the question mark",
    "start": "312240",
    "end": "317280"
  },
  {
    "text": "operator use it all the time in Rust um but let's suppose that this get encoding operation this thing can also",
    "start": "317280",
    "end": "322860"
  },
  {
    "text": "fail like what if that can fail in the particular way that the encoding just can't be inferred like maybe there's no",
    "start": "322860",
    "end": "328560"
  },
  {
    "text": "header that would tell me what the encoding is and there's also the URL doesn't include a file extension or maybe it includes one but it's something",
    "start": "328560",
    "end": "334800"
  },
  {
    "text": "that we don't support it's some encoding that we're not familiar with we don't know how to decode that how to decompress it",
    "start": "334800",
    "end": "340680"
  },
  {
    "text": "well um these two you know no problem I can use the question mark operator because they're both returning i o",
    "start": "340680",
    "end": "346020"
  },
  {
    "text": "errors and that's what this whole function is so the early return will just work no problem but if I try to put a question mark here and this thing's",
    "start": "346020",
    "end": "352440"
  },
  {
    "text": "not returning an i o error it's returning uh I didn't know what kind of encoding this was error um this isn't going to work so I can't",
    "start": "352440",
    "end": "358500"
  },
  {
    "text": "just use this question mark operator here uh in Rust so what can I do instead because this",
    "start": "358500",
    "end": "364440"
  },
  {
    "text": "doesn't return an i o error so basically um this is the way that I've specified that function's return value I have this",
    "start": "364440",
    "end": "370740"
  },
  {
    "start": "365000",
    "end": "456000"
  },
  {
    "text": "content encoding enum and basically content encoding is I'm saying it's one of these three things it's either gzip",
    "start": "370740",
    "end": "376199"
  },
  {
    "text": "or brought layer uncompressed those are like the the three different content encodings that we support in this system and this is an enum which basically",
    "start": "376199",
    "end": "382919"
  },
  {
    "text": "means like these are just you know they represent unique values it's an enumeration but it's uh like they're backed by a number but that doesn't",
    "start": "382919",
    "end": "389400"
  },
  {
    "text": "really matter and I can do things like pattern matching on them and whatnot um so what I can do in order to solve my",
    "start": "389400",
    "end": "396600"
  },
  {
    "text": "problem of not being able to use my question mark operator like I want to is I can make another enum called problem and this one is actually not just an",
    "start": "396600",
    "end": "403620"
  },
  {
    "text": "enumeration it's basically an enumeration but some of the values can have payloads associated with them so",
    "start": "403620",
    "end": "409139"
  },
  {
    "text": "this is a sum type and uh different languages call these different things Russ calls them enums Haskell calls them",
    "start": "409139",
    "end": "415259"
  },
  {
    "text": "algebraic data types Elm calls them custom types I think this other languages call them variance F-sharp",
    "start": "415259",
    "end": "421259"
  },
  {
    "text": "calls them discriminated unions a lot of different names for these things but basically they're they all fall into the umbrella of some type as opposed to like",
    "start": "421259",
    "end": "427979"
  },
  {
    "text": "a product type which would be like a struct or a record or something like that so this sum type basically says I have two different variants here one is",
    "start": "427979",
    "end": "434520"
  },
  {
    "text": "I have the i o variant and the other is I have the encoding variant and basically the i o variant says okay if",
    "start": "434520",
    "end": "439800"
  },
  {
    "text": "we have a i o problem then we're going to store an i o error inside of that as the payload and if we have an encoding",
    "start": "439800",
    "end": "445500"
  },
  {
    "text": "problem that I'm going to encode some sort of encoding error which would say you know it wasn't one of these three",
    "start": "445500",
    "end": "450780"
  },
  {
    "text": "content encodings that we support so this problem enum this problem some type that we've got here this lets us",
    "start": "450780",
    "end": "456960"
  },
  {
    "start": "456000",
    "end": "502000"
  },
  {
    "text": "solve the problem of these sort of two conflicting question marks and basically what I can do is I can say okay this one",
    "start": "456960",
    "end": "463259"
  },
  {
    "text": "returns a result of a response and I O error and this one returns a result of encoding an encoding error",
    "start": "463259",
    "end": "469259"
  },
  {
    "text": "um I can use this enum to turn them into the same thing using this map error method that the rust supports so map",
    "start": "469259",
    "end": "475440"
  },
  {
    "text": "error of i o basically says okay this is going to give me back an i o error I'm going to wrap that up in one of these this gives me back an encoding error I'm",
    "start": "475440",
    "end": "482340"
  },
  {
    "text": "going to wrap that up in one of these and now both of these things are returning a problem and therefore I can use question mark on them because",
    "start": "482340",
    "end": "488340"
  },
  {
    "text": "they're both going to do an early return of the same type now of course if I'm doing that then I do need to actually you know go back and change my overall",
    "start": "488340",
    "end": "494880"
  },
  {
    "text": "function to no longer take an I have return an i o error but rather to return a problem so this works",
    "start": "494880",
    "end": "501060"
  },
  {
    "text": "Okay cool so what I like about this system that I have in Rust is number one errors are always visible in the type",
    "start": "501060",
    "end": "507419"
  },
  {
    "start": "502000",
    "end": "565000"
  },
  {
    "text": "like I can always see at a glance any operation like how can it possibly fail that's really important to me really",
    "start": "507419",
    "end": "512700"
  },
  {
    "text": "valuable to me um also I can't accidentally forget to handle errors like there are some languages where it's pretty easy to",
    "start": "512700",
    "end": "518339"
  },
  {
    "text": "accidentally just like swallow an error and not uh you know and not handle it at all and then it just results in a crash",
    "start": "518339",
    "end": "523860"
  },
  {
    "text": "for the user no problem here um map error also lets me tag errors with my own information so here I was",
    "start": "523860",
    "end": "529680"
  },
  {
    "text": "using it as sort of a workaround for the fact that I wanted to use question mark on two different error types but another thing I can do with it is let's say I",
    "start": "529680",
    "end": "535920"
  },
  {
    "text": "had a couple of different HTTP errors and I wanted to be able to distinguish between them because I wanted to show the user like different error messages",
    "start": "535920",
    "end": "541440"
  },
  {
    "text": "depending on which one failed that's another use of map errors I can sort of use that to tag things and say like oh",
    "start": "541440",
    "end": "546899"
  },
  {
    "text": "yes uh this one was you know this particular error at this stage in the",
    "start": "546899",
    "end": "552060"
  },
  {
    "text": "pipeline and this one was this other one um I like all those things I also like of course that the question mark operator lets me short circuit easily if",
    "start": "552060",
    "end": "558779"
  },
  {
    "text": "I have some error I can you know very easily short circuit to the end of the function without having to you know write a bunch of conditionals everywhere",
    "start": "558779",
    "end": "565200"
  },
  {
    "text": "um but there are some things that I dislike about this system so number one is as soon as I introduce the second error type I have to do map error on",
    "start": "565200",
    "end": "571200"
  },
  {
    "text": "every single one of the errors like I did here with with problem now granted there are in Rust like other ways that",
    "start": "571200",
    "end": "576240"
  },
  {
    "text": "you can do this but this is kind of the the one that comes out the box otherwise you have to sort of go to like a third party Library",
    "start": "576240",
    "end": "581940"
  },
  {
    "text": "um so I also don't like having to go to a third party library for error handling um so this is a little bit unorganomic",
    "start": "581940",
    "end": "588120"
  },
  {
    "text": "from my perspective um it also promotes these sort of over broad errors so uh like this I O error",
    "start": "588120",
    "end": "593279"
  },
  {
    "text": "you notice it was the same error type for file handling as well as for HTTP this is a pretty common thing in Rust is",
    "start": "593279",
    "end": "598860"
  },
  {
    "text": "that you see i o errors being used for a lot of things which means that you can get like you know in your file uh",
    "start": "598860",
    "end": "603959"
  },
  {
    "text": "handling example like file i o like reading profile writing to a file can potentially come back at you and say hey",
    "start": "603959",
    "end": "610019"
  },
  {
    "text": "there was an address and use error which doesn't make any sense like you know that's that's not something that happens on the file system really",
    "start": "610019",
    "end": "616019"
  },
  {
    "text": "um that's that's more of a network thing but it can happen because there is it's this sort of over broad type and so",
    "start": "616019",
    "end": "621120"
  },
  {
    "text": "there's this this sort of tension between you want to use like a broad error type so that your question mark",
    "start": "621120",
    "end": "626519"
  },
  {
    "text": "just works everywhere you don't have to create one of these wrapper problem types but on the other hand as soon as you do that you start to get these",
    "start": "626519",
    "end": "631980"
  },
  {
    "text": "errors that you know can't really happen in practice but which are still coming through the system anyway",
    "start": "631980",
    "end": "637500"
  },
  {
    "text": "um and then finally it is kind of easy to miss this you know the question mark operator being an early return I've definitely had it happen in Rust where I",
    "start": "637500",
    "end": "643680"
  },
  {
    "text": "had some logic at the beginning of my function that was using a question mark and I just usually didn't didn't notice it and I was trying to figure out why my",
    "start": "643680",
    "end": "648839"
  },
  {
    "text": "function was not getting as far as I thought it was going to be and it was because I had a question mark that I I didn't notice",
    "start": "648839",
    "end": "655140"
  },
  {
    "start": "654000",
    "end": "679000"
  },
  {
    "text": "um now the testing story for this uh really kind of varies based on what we're doing so when I'm doing this get",
    "start": "655140",
    "end": "660360"
  },
  {
    "text": "encoding function which you know takes the URL and the header and then returns this content encoding you know based on looking at the URL and the header",
    "start": "660360",
    "end": "667260"
  },
  {
    "text": "um this is a pure function so testing it is super easy I just call it and I check the return value",
    "start": "667260",
    "end": "672300"
  },
  {
    "text": "um it's not depending on any external State it's not you know writing to any external State uh it's just no problem",
    "start": "672300",
    "end": "677880"
  },
  {
    "text": "at all to test it um now in contact in contrast this sort of download tarball function that's",
    "start": "677880",
    "end": "683040"
  },
  {
    "text": "doing the HTTP effects and the uh and the i o effects to write to the file system all these side effects make it a",
    "start": "683040",
    "end": "689700"
  },
  {
    "text": "lot harder to test um you know because calling it actually runs the effects I have all these new",
    "start": "689700",
    "end": "694860"
  },
  {
    "text": "things to consider like for example do I want to spin up a local server to make sure that what I'm downloading from is",
    "start": "694860",
    "end": "700380"
  },
  {
    "text": "actually going to be available so that my tests don't fail or maybe timeout or flake in other ways because this remote",
    "start": "700380",
    "end": "706140"
  },
  {
    "text": "URL that I'm using for testing might happen to be down if I am spinning up local servers I have to make sure that",
    "start": "706140",
    "end": "711720"
  },
  {
    "text": "they're not on the same port if I want to run my tests in parallel because otherwise it are going to get conflicts and some of my tests are going to fail",
    "start": "711720",
    "end": "717740"
  },
  {
    "text": "I'm writing to the file system now I need to potentially be able to write to a temp directory and so I need to you",
    "start": "717740",
    "end": "723660"
  },
  {
    "text": "know maybe add another argument to this function for like what director I want to put it in so that I'm not writing to my actual real long-term durable file",
    "start": "723660",
    "end": "730320"
  },
  {
    "text": "system just because I'm running tests so there's all these additional considerations that come in and really uh you know the testing stuff that has",
    "start": "730320",
    "end": "737339"
  },
  {
    "text": "effects in Rust is a kind of a whole different ball game from testing pure functions um and finally we have this uh logging",
    "start": "737339",
    "end": "744600"
  },
  {
    "start": "741000",
    "end": "820000"
  },
  {
    "text": "use case now granted this is more something that I want for like web servers but I'll use this downloader example because it's you know a pretty",
    "start": "744600",
    "end": "751079"
  },
  {
    "text": "straightforward example um basically if I you know pretend that this is on a web server um I would want to be logging pretty",
    "start": "751079",
    "end": "757260"
  },
  {
    "text": "much any kind of i o operation that's happening um because oftentimes I will come back after the fact some bug happened and I'm",
    "start": "757260",
    "end": "763380"
  },
  {
    "text": "trying to figure out like what happened what was actually going on on the system uh or maybe I want to do diagnostics on",
    "start": "763380",
    "end": "768839"
  },
  {
    "text": "like how long are things taking and kind of the easiest way to do this is to just log all of your effects as a matter of",
    "start": "768839",
    "end": "774300"
  },
  {
    "text": "course and just write down like what database query was happening what network requests are happening how long did they take to to come back",
    "start": "774300",
    "end": "780660"
  },
  {
    "text": "um one way I could do this is I could write wrappers around you know all these functions and just have sort of just use",
    "start": "780660",
    "end": "786480"
  },
  {
    "text": "discipline to say every single time I'm going to do an https get don't use this Library directly but rather uh you know",
    "start": "786480",
    "end": "792779"
  },
  {
    "text": "make sure that I'm calling our wrapper and just have a policy of doing that but you know it's kind of easy to accidentally forget to do that sometimes",
    "start": "792779",
    "end": "799980"
  },
  {
    "text": "um or just otherwise to have uh you know mistakes can happen when you're doing something like that",
    "start": "799980",
    "end": "805740"
  },
  {
    "text": "um like relying on using a wrapper everywhere so that can work but really what I would kind of ideally like is",
    "start": "805740",
    "end": "811019"
  },
  {
    "text": "some centralized way that's sort of guaranteed to say every single effect that is happening going through the system on my web server is definitely",
    "start": "811019",
    "end": "817620"
  },
  {
    "text": "going to be logged and I know that nothing is getting missed um so this is sort of what I'd really",
    "start": "817620",
    "end": "822660"
  },
  {
    "text": "like is like different errors accumulate automatically so I don't have to do this like problem wrapper just because I I",
    "start": "822660",
    "end": "828600"
  },
  {
    "text": "mix and match two different error types um I would love to have testing be as easy as testing pure functions like not",
    "start": "828600",
    "end": "834480"
  },
  {
    "text": "having to spin up these local servers or you know create tempters on my file system I would love to be able to just",
    "start": "834480",
    "end": "840120"
  },
  {
    "text": "say you know hey run my tests and and also ideally you know not have to like mock a bunch of things either",
    "start": "840120",
    "end": "846240"
  },
  {
    "text": "um I'd also love to have like automatic centralized logging of all my i o operations uh so my web server I don't",
    "start": "846240",
    "end": "851940"
  },
  {
    "text": "have to worry that I you know missed a wrapper here or there I can just say yep no every single one of my i o things is running through the centralized logging",
    "start": "851940",
    "end": "858660"
  },
  {
    "text": "logic and just I'm guaranteed that everything is getting logged um okay so let's start talking about",
    "start": "858660",
    "end": "864240"
  },
  {
    "start": "862000",
    "end": "875000"
  },
  {
    "text": "like how to solve some of these motivating problems um so I'm going to start by talking about tag unions just sort of explaining what the feature is",
    "start": "864240",
    "end": "869639"
  },
  {
    "text": "uh they're Anonymous sum types that allow accumulating and also pattern matching with exhaustiveness checking",
    "start": "869639",
    "end": "876779"
  },
  {
    "text": "um tell unions are a feature of the rock programming language which is definitely a work in progress so I'm going to talk about stuff that you know you can go try",
    "start": "876779",
    "end": "883860"
  },
  {
    "text": "out today if you want to go visit rockland.org and try them out um but uh fair warning this is not something that I recommend you know",
    "start": "883860",
    "end": "889620"
  },
  {
    "text": "doing in production um having said that the techniques that I'm going to talk about here with tag unions this is the way that I'm most",
    "start": "889620",
    "end": "895620"
  },
  {
    "text": "familiar with doing it because I've been doing it in rock but this can be done in other languages like oh camel has",
    "start": "895620",
    "end": "900899"
  },
  {
    "text": "polymorphic variants which let you do this um also like uh languages that have um uh Union types it's like typescript or",
    "start": "900899",
    "end": "908399"
  },
  {
    "text": "like sorbet for Ruby that's also a way that you can you can do something similar um so everything I'm going to say here",
    "start": "908399",
    "end": "914160"
  },
  {
    "text": "is going to be Rock specific but it's not confined to rocket from a technique perspective",
    "start": "914160",
    "end": "919620"
  },
  {
    "text": "um okay so rock is a purely functional programming language it compiles to machine code or to webassembly it has a really heavy emphasis on performance",
    "start": "919620",
    "end": "926639"
  },
  {
    "text": "um runtime performance as well as compile time performance and the type system includes tag unions which we're",
    "start": "926639",
    "end": "931860"
  },
  {
    "text": "going to talk about now okay so the first thing to know about tag unions are tags so here are some",
    "start": "931860",
    "end": "937740"
  },
  {
    "start": "934000",
    "end": "1173000"
  },
  {
    "text": "examples of tags I can say color equals green I've just made a tag called Green I don't need to Define anything up front",
    "start": "937740",
    "end": "943019"
  },
  {
    "text": "I'm just saying color equals green and because green is capitalized that means it's a tag so anything that's capitalized in rock is going to be a tag",
    "start": "943019",
    "end": "950639"
  },
  {
    "text": "I can also say color equals red I can also say color equals gold Now by default each of these are just sort of Standalone tags but if I want I",
    "start": "950639",
    "end": "957660"
  },
  {
    "text": "can add a type annotation that says these tags are actually part of a tag Union so here's what that would look",
    "start": "957660",
    "end": "963180"
  },
  {
    "text": "like so basically I'm now saying each of these different definitions of color uh and these would not be coexisting right",
    "start": "963180",
    "end": "968880"
  },
  {
    "text": "these would be like in different files maybe or something like that these are part of a tag Union of the red tag the",
    "start": "968880",
    "end": "974880"
  },
  {
    "text": "green tag and the gold tag and basically this tag Union is another subtype like rust enums that we saw earlier where I'm",
    "start": "974880",
    "end": "980940"
  },
  {
    "text": "saying okay these are the three different Alternatives that you can have here you can have red green you can have gold and that's it now again these are",
    "start": "980940",
    "end": "988500"
  },
  {
    "text": "Anonymous so if I wanted to I don't have to have those type annotations I could just have these as Standalone that would totally work but also optionally you can",
    "start": "988500",
    "end": "995459"
  },
  {
    "text": "add type annotations if you want Rock has a 100 type inference so you never",
    "start": "995459",
    "end": "1000500"
  },
  {
    "text": "have to put type annotations if you don't want to but this is something that you can do if you want to sort of like",
    "start": "1000500",
    "end": "1006019"
  },
  {
    "text": "add a restriction or just add some documentation um now if I were to say color has to be",
    "start": "1006019",
    "end": "1011779"
  },
  {
    "text": "either red green or gold and then I put Blue in here this would not work this would give me a tight mismatch saying that no you've annotated this saying",
    "start": "1011779",
    "end": "1017480"
  },
  {
    "text": "it's got to be one of these three and it wasn't therefore uh you're gonna get a tight mismatch",
    "start": "1017480",
    "end": "1022579"
  },
  {
    "text": "um now one of the important features of tag unions is that when you use them in conditionals they accumulate so here I",
    "start": "1022579",
    "end": "1028220"
  },
  {
    "text": "can say color equals then if x is greater than zero then green else gold so the compiler will actually infer a",
    "start": "1028220",
    "end": "1033798"
  },
  {
    "text": "type of this as that color is the tag Union green comma gold meaning that this can be either green or gold which is",
    "start": "1033799",
    "end": "1039620"
  },
  {
    "text": "true because depending on which branch of the conditional it takes it could be one of either of these um similarly you can kind of go the",
    "start": "1039620",
    "end": "1045798"
  },
  {
    "text": "other way around and do pattern matching on these and then so here we have a two string which is this is a rock function",
    "start": "1045799",
    "end": "1050900"
  },
  {
    "text": "syntax does give me a color as my argument and then I will do when color is that's our pattern matching syntax uh",
    "start": "1050900",
    "end": "1057080"
  },
  {
    "text": "and then we say red arrow red so this basically means like if the color is the tag red then return the string red if",
    "start": "1057080",
    "end": "1063440"
  },
  {
    "text": "it's green return the string green gold Etc and the compiler will infer the type of this function to be red comma green",
    "start": "1063440",
    "end": "1069620"
  },
  {
    "text": "comma gold and then it'll return a string so this is basically saying okay not because you actually instantiated",
    "start": "1069620",
    "end": "1076039"
  },
  {
    "text": "one of these color values but rather because of how you are pattern matching on these I can infer that these are the",
    "start": "1076039",
    "end": "1081799"
  },
  {
    "text": "only three options that are possible here um now if I wrote this type annotation and I left off one of these options like",
    "start": "1081799",
    "end": "1088400"
  },
  {
    "text": "I said okay this could be red or green or gold but I'm only going to list these two possibilities I would actually get a",
    "start": "1088400",
    "end": "1094220"
  },
  {
    "text": "compile time error um it would look like this it would say unsafe pattern this is like the actual compile error if you're",
    "start": "1094220",
    "end": "1099260"
  },
  {
    "text": "a fan of the elm programming language this might look familiar to you because uh rock is a direct definitive Elm and one of the things that Elm is really",
    "start": "1099260",
    "end": "1105440"
  },
  {
    "text": "great at is having really nicely displayed error messages and we like to try and do that too and try to live up",
    "start": "1105440",
    "end": "1111320"
  },
  {
    "text": "to that standard of like really high quality error messages so unsafe pattern this one does not cover all the",
    "start": "1111320",
    "end": "1116419"
  },
  {
    "text": "possibilities other possibilities include gold I would have to crash if I saw one of those so add branches for them",
    "start": "1116419",
    "end": "1122179"
  },
  {
    "text": "um so basically uh you know that that's that's uh exhaustiveness checking as they say uh making sure that all the",
    "start": "1122179",
    "end": "1128059"
  },
  {
    "text": "patterns are covered um another thing you can do is you can add uh payloads to tags um so here we",
    "start": "1128059",
    "end": "1133640"
  },
  {
    "text": "have an example of I could say red green and then also other and then uh you know if other contains a particular string",
    "start": "1133640",
    "end": "1139100"
  },
  {
    "text": "then I would return other and then this is our string interpolation syntax uh then just put that string inside of",
    "start": "1139100",
    "end": "1144140"
  },
  {
    "text": "there okay um and then you write the inferred type for this would be red green and then other which is which has a payload of a",
    "start": "1144140",
    "end": "1150799"
  },
  {
    "text": "string so this is kind of similar to you remember with rust we saw like problem had a payload this is an example of",
    "start": "1150799",
    "end": "1155960"
  },
  {
    "text": "other having a payload the other tag but red and green do not have payloads only other has a payload in this example so",
    "start": "1155960",
    "end": "1161059"
  },
  {
    "text": "it's kind of a bread and butter feature of some types okay um oh yeah then uh this is how I would",
    "start": "1161059",
    "end": "1166640"
  },
  {
    "text": "uh if I wanted to call two string uh passing an actual other tag this is how I would actually like instantiate one of these and put the payload inside of it",
    "start": "1166640",
    "end": "1173539"
  },
  {
    "text": "all right so to summarize uh tag unions are Anonymous sum types um they can have payloads uh they can do exhaustive",
    "start": "1173539",
    "end": "1179480"
  },
  {
    "text": "pattern matching and also tags accumulate across conditional branches so this might so far seem like okay well",
    "start": "1179480",
    "end": "1185960"
  },
  {
    "text": "yeah that's that's a that's a neat feature but what does that have to do with effects I mean how do you build an effect system on top of this so let's",
    "start": "1185960",
    "end": "1192440"
  },
  {
    "text": "talk about that so I'm going to start off with just an example of some some i o using this system in rock code I'm",
    "start": "1192440",
    "end": "1198140"
  },
  {
    "text": "talking about error handling and then finally the internal representation and some of the performance characteristics",
    "start": "1198140",
    "end": "1203299"
  },
  {
    "text": "okay so uh for this i o example I want to start with just three different functions that we're going to use inside",
    "start": "1203299",
    "end": "1208700"
  },
  {
    "text": "of it and I want to show you what the types of these functions are in this effect system so this is the http.getbytes so HTTP is the name of the",
    "start": "1208700",
    "end": "1215240"
  },
  {
    "text": "module it takes the URL and it returns a task which has two different type parameters one is bytes and the other is",
    "start": "1215240",
    "end": "1221840"
  },
  {
    "text": "HTTP error so task in rock is similar to result in Rust now in result uh sorry in",
    "start": "1221840",
    "end": "1227840"
  },
  {
    "text": "Rust result is basically saying this operation could return one of these two things but it's not really saying",
    "start": "1227840",
    "end": "1233720"
  },
  {
    "text": "anything about whether this operation does any side effects and Russ just anything can do side effects in rock",
    "start": "1233720",
    "end": "1239120"
  },
  {
    "text": "that's not true so rock actually does have a result type but in rock that's kind of only used for Pure functions",
    "start": "1239120",
    "end": "1244220"
  },
  {
    "text": "like if there's a result that does not tell you anything about whether it's doing any effects but task does task",
    "start": "1244220",
    "end": "1250100"
  },
  {
    "text": "says this is doing an effect so if you see a result that's not doing an effect task is saying this is actually going to",
    "start": "1250100",
    "end": "1256400"
  },
  {
    "text": "perform an effect so task like result has two different type parameters one is what happens if it succeeds just like in",
    "start": "1256400",
    "end": "1263120"
  },
  {
    "text": "Rust so if it succeeds this task is going to give us some bites if the task fails it's going to give us an HTTP",
    "start": "1263120",
    "end": "1268280"
  },
  {
    "text": "error okay oh the HTTP error by the way is going to be represented by a tag Union then we",
    "start": "1268280",
    "end": "1274820"
  },
  {
    "text": "also have the file.exists function so this is in the file module instead of the HTTP module this is going to take a",
    "start": "1274820",
    "end": "1280820"
  },
  {
    "text": "path and then return a task this task produces a Boolean on success and then otherwise it gives us a file metadata",
    "start": "1280820",
    "end": "1286280"
  },
  {
    "text": "error so in other words like we're trying to read the metadata of the file to see if it exists it wasn't there so we got a metadata error and then finally",
    "start": "1286280",
    "end": "1292780"
  },
  {
    "text": "file.writebytes which takes a path and some bytes and then returns a task this task doesn't produce anything so we have",
    "start": "1292780",
    "end": "1298820"
  },
  {
    "text": "just an empty record in there so it's like hey I don't produce anything nothing useful and then this gives us a",
    "start": "1298820",
    "end": "1304940"
  },
  {
    "text": "file right error if it errors out so notice by the way that in Rust we had we would have had i o error for all three",
    "start": "1304940",
    "end": "1310760"
  },
  {
    "text": "of these but in rock we actually can have these more precise errors HTTP error metadata error and write error now",
    "start": "1310760",
    "end": "1316400"
  },
  {
    "text": "on rest that would be inconvenient because it would mean that I couldn't use sort of my question mark short circuiting for all three of these I",
    "start": "1316400",
    "end": "1322340"
  },
  {
    "text": "would have to wrap them all up in problem every time that would be pretty annoying so it would be nice that I would get these more precise errors and",
    "start": "1322340",
    "end": "1328280"
  },
  {
    "text": "I wouldn't see like address and use for my a data error or like you know can't write to file in my metadata error but",
    "start": "1328280",
    "end": "1335120"
  },
  {
    "text": "uh but it would mean that I was a sort of in tension with you know the convenience of the question mark operator short circuiting",
    "start": "1335120",
    "end": "1341419"
  },
  {
    "text": "okay so here's our Rock code uh that we're actually using let me just walk you through what this is doing so basically this is a function called",
    "start": "1341419",
    "end": "1347299"
  },
  {
    "text": "download and I'm starting by checking to see if this file name exists on the file system and basically what we're doing",
    "start": "1347299",
    "end": "1353240"
  },
  {
    "text": "here is we're saying okay if you've already downloaded this thing in the past and we've already got it downloaded let's not bother downloading it again",
    "start": "1353240",
    "end": "1358880"
  },
  {
    "text": "we've already got it cached so don't need to don't need to do that work so we're saying exists Arrow I'm not",
    "start": "1358880",
    "end": "1365240"
  },
  {
    "text": "going to go into exactly what the arrow syntax does or what this pipe syntax does uh don't have time to throw like a",
    "start": "1365240",
    "end": "1370280"
  },
  {
    "text": "full Rock syntax tutorial but basically what this line of code is doing is saying okay if the file name exists",
    "start": "1370280",
    "end": "1375500"
  },
  {
    "text": "we're going to uh return like the Boolean is going to become this exists variable and then we're piping United",
    "start": "1375500",
    "end": "1382520"
  },
  {
    "text": "task.weight and this kind of works like you would expect an async await where it's going to you know wait for this",
    "start": "1382520",
    "end": "1388039"
  },
  {
    "text": "thing to to this i o operation to finish and this can be used in an async context of course",
    "start": "1388039",
    "end": "1393559"
  },
  {
    "text": "um as you might guess from the name um once you've got this exists variable we're going to do if exists then so in",
    "start": "1393559",
    "end": "1400100"
  },
  {
    "text": "other words if the if the the file did exist then we're just going to say test.succeed with empty record basically",
    "start": "1400100",
    "end": "1405500"
  },
  {
    "text": "meaning like okay we're done we succeeded uh no nothing else to report no other information um otherwise we're going to do an",
    "start": "1405500",
    "end": "1412539"
  },
  {
    "text": "http.getbytes on this given URL to download and extract the the whole thing let's pretend that we were actually you",
    "start": "1412539",
    "end": "1418940"
  },
  {
    "text": "know calling the the whole like extract functional that we showed earlier in Rust uh but basically you know in this example we're just gonna just pretend we",
    "start": "1418940",
    "end": "1425299"
  },
  {
    "text": "just download it without any that decompression stuff um and then once we've got the tarball we're going to say file.write bytes file",
    "start": "1425299",
    "end": "1431539"
  },
  {
    "text": "name and tarball to actually write the bytes that we downloaded into this particular file name since it didn't",
    "start": "1431539",
    "end": "1436760"
  },
  {
    "text": "already exist cool um one thing to note about this is that this task.08 stuff this is actually",
    "start": "1436760",
    "end": "1442760"
  },
  {
    "text": "short circuiting on error just like rust's question mark operator so if this thing fails it's going to short circuit",
    "start": "1442760",
    "end": "1448880"
  },
  {
    "text": "and early return this entire function uh you know with that error but a difference between this and rust's",
    "start": "1448880",
    "end": "1454700"
  },
  {
    "text": "question mark operator is that you might notice that again we have these mixing and matching right file.exists returns a",
    "start": "1454700",
    "end": "1460700"
  },
  {
    "text": "metadata error if it doesn't succeed get bytes returns an HTTP error write bytes returns a right error so if tests out of",
    "start": "1460700",
    "end": "1467840"
  },
  {
    "text": "weight uh short circuits on error like and we have these three different error types here how is this possible that",
    "start": "1467840",
    "end": "1473059"
  },
  {
    "text": "we're able to do that when in Rust as in lots of other languages you need to have a consistent type there well this comes",
    "start": "1473059",
    "end": "1479659"
  },
  {
    "text": "back to tag unions and how tag unions can accumulate if you get multiple of them in like a conditional and spoiler",
    "start": "1479659",
    "end": "1485299"
  },
  {
    "text": "alert test out of weight is actually using um a conditional under the hood so it's able to just sort of combine these and",
    "start": "1485299",
    "end": "1491539"
  },
  {
    "text": "Union them together so the result of all this means that uh when we're doing this you can do this",
    "start": "1491539",
    "end": "1497059"
  },
  {
    "text": "task dot attempt which basically turns your task into a result and then you can basically say like okay when the result",
    "start": "1497059",
    "end": "1502220"
  },
  {
    "text": "is and let's pretend we already checked to make sure that it's okay and uh rather this is an error um if we know that this is already an",
    "start": "1502220",
    "end": "1508880"
  },
  {
    "text": "error then we can just basically do one of these exhaustive pattern matches and say oh well okay if it's an HTTP error then here's our URL and here's our",
    "start": "1508880",
    "end": "1515120"
  },
  {
    "text": "problem let's handle that it's a file rate error handle that if it's a file metadata or handle that and if I did one",
    "start": "1515120",
    "end": "1520820"
  },
  {
    "text": "more type of i o back up in my uh you know earlier code where I you know let's say we wanted to do a file read then",
    "start": "1520820",
    "end": "1526520"
  },
  {
    "text": "file read error would just appear in here if I wanted to uh you know tag them to say I wanted to have you know",
    "start": "1526520",
    "end": "1531740"
  },
  {
    "text": "multiple HTTP errors um uh you know from for for different HTTP operations I could do map error",
    "start": "1531740",
    "end": "1537500"
  },
  {
    "text": "just like I can in Rust and that tag would just appear in here also again this has exhaustiveness checking so if",
    "start": "1537500",
    "end": "1542960"
  },
  {
    "text": "there were an error type that was potentially could happen up above and I didn't include it in this match I would",
    "start": "1542960",
    "end": "1548240"
  },
  {
    "text": "get an exhaustiveness error I would get like the compiler would say hey you didn't handle let's say HTTP error you handled file right error and file",
    "start": "1548240",
    "end": "1554539"
  },
  {
    "text": "metadata error but HTTP error could happen here and you didn't handle it so I really love how this this works",
    "start": "1554539",
    "end": "1560240"
  },
  {
    "text": "because it means that you know not only do I not need a question mark operator but um I I don't have to worry about",
    "start": "1560240",
    "end": "1565279"
  },
  {
    "text": "like mixing and matching things and sort of like creating these wrapper types I can just use whatever effects that I",
    "start": "1565279",
    "end": "1570919"
  },
  {
    "text": "have they can have whatever errors they have and yet I still get to sort of concisely handle them all in one place",
    "start": "1570919",
    "end": "1576140"
  },
  {
    "text": "uh with short circuiting so I'm a big fan of like how the sort of exhaustiveness checking here and the",
    "start": "1576140",
    "end": "1581539"
  },
  {
    "text": "short circuiting all sort of plays together in this effect system um Okay cool so um something else to",
    "start": "1581539",
    "end": "1588380"
  },
  {
    "text": "note is uh let's say that I wanted to uh I'm going to rewrite this to be a little bit more vertical here so this is the same code I've just made it like more",
    "start": "1588380",
    "end": "1594799"
  },
  {
    "text": "more vertically styled um so let's say that I wanted to uh to to make one of these HTTP errors like",
    "start": "1594799",
    "end": "1601400"
  },
  {
    "text": "tagged this is what that would look like so I add just a little pipe to test.map error and then again because these are",
    "start": "1601400",
    "end": "1607760"
  },
  {
    "text": "Anonymous I don't need to declare anything up front I can just make up this name for a tag download tarball and",
    "start": "1607760",
    "end": "1613220"
  },
  {
    "text": "because I did that now when I do my pattern match I just basically have exactly what I have before except I put",
    "start": "1613220",
    "end": "1618679"
  },
  {
    "text": "download tarball in front and that's it and then the rest of it HTTP error URL problem is all the same",
    "start": "1618679",
    "end": "1624080"
  },
  {
    "text": "um so again this this is really concise to like tag these things uh so I don't even need to declare you know anything",
    "start": "1624080",
    "end": "1629360"
  },
  {
    "text": "up front I can just sort of write my code and everything just sort of uh works out nicely",
    "start": "1629360",
    "end": "1634940"
  },
  {
    "text": "um great uh and so again this you know if I were doing something like I O error um I",
    "start": "1634940",
    "end": "1641240"
  },
  {
    "text": "would have one of two things would be true either I would have all of these things if I wanted to like tag one of",
    "start": "1641240",
    "end": "1646400"
  },
  {
    "text": "these I would have to wrap all of them in some sort of new problem uh and or I would need to potentially you know just",
    "start": "1646400",
    "end": "1651860"
  },
  {
    "text": "at a baseline have all of these different use cases be like just one giant blob of all the possible I O",
    "start": "1651860",
    "end": "1657860"
  },
  {
    "text": "errors instead of having them be a lot more specific and precise like this so I'm only having to handle the particular problems that actually could come up for",
    "start": "1657860",
    "end": "1664820"
  },
  {
    "text": "each of these different scenarios okay um for this next part of how the system",
    "start": "1664820",
    "end": "1670039"
  },
  {
    "start": "1666000",
    "end": "1706000"
  },
  {
    "text": "works I need to give a quick shout out to William Brandon uh exists underscore for all on Twitter um you can find him on GitHub and other",
    "start": "1670039",
    "end": "1676100"
  },
  {
    "text": "places uh he's a researcher at MIT um I did not actually know about the technique I'm about to talk to you about",
    "start": "1676100",
    "end": "1681799"
  },
  {
    "text": "uh but he just clued me into this very recently and um at least as of this recording I have not uh implemented it",
    "start": "1681799",
    "end": "1687679"
  },
  {
    "text": "completely so I I am basically uh sort of done a proof of concept that you know the types work out but I haven't actually like implemented this for real",
    "start": "1687679",
    "end": "1694400"
  },
  {
    "text": "um but I'm very very excited too because of what it means especially for performance um so thank you so much William for uh",
    "start": "1694400",
    "end": "1699980"
  },
  {
    "text": "for cluing me into this um okay so we talked about uh like HTTP get bytes uh file.exists and",
    "start": "1699980",
    "end": "1706400"
  },
  {
    "start": "1706000",
    "end": "1904000"
  },
  {
    "text": "file.rightbytes um here's how we're going to represent these things under the hood and I say",
    "start": "1706400",
    "end": "1711679"
  },
  {
    "text": "going to because this is a future tense thing haven't done this yet but um this is a way that you can do this",
    "start": "1711679",
    "end": "1716779"
  },
  {
    "text": "that makes for a very very powerful implementation so we're gonna find this new tag Union",
    "start": "1716779",
    "end": "1722000"
  },
  {
    "text": "called operation and again this is just going to be the same same thing as before this whole talks it's all tag units",
    "start": "1722000",
    "end": "1727520"
  },
  {
    "text": "um and it's going to be the square brackets meaning that everything in between here is just going to be some tag unions uh sorry some tags",
    "start": "1727520",
    "end": "1734240"
  },
  {
    "text": "um this is the union okay so I'm gonna just just as a reference I'm gonna put this comment of like here's what the get bytes type was so you can remember this",
    "start": "1734240",
    "end": "1740480"
  },
  {
    "text": "is like what we're sort of building up to um but this operation thing is basically going to represent here is the concept",
    "start": "1740480",
    "end": "1746840"
  },
  {
    "text": "of doing one of these get bytes it's not actually a function it's just a representation of let's say that you the",
    "start": "1746840",
    "end": "1752840"
  },
  {
    "text": "user represented this this is what we can actually put inside that task to represent that that's what they asked for",
    "start": "1752840",
    "end": "1758179"
  },
  {
    "text": "so we're going to start by saying okay this is an HTTP get bytes uh tag it's got a URL that the user passed in as one",
    "start": "1758179",
    "end": "1763820"
  },
  {
    "text": "of its payloads but it's actually got another payload which we'll come back to in a second which is this function and",
    "start": "1763820",
    "end": "1768860"
  },
  {
    "text": "this function is going to be a tag of either OK or error this is actually called results in rock just like it is in Rust but I figured I'd just show that",
    "start": "1768860",
    "end": "1775520"
  },
  {
    "text": "results in rock is just another tag Union so again it's it's all tag unions all the way",
    "start": "1775520",
    "end": "1780559"
  },
  {
    "text": "um so basically uh if it's okay then we get some bytes and if it's an error we have an HTTP error just like we talked",
    "start": "1780559",
    "end": "1786140"
  },
  {
    "text": "about earlier now this is actually a function which takes one of these and then returns another operation so",
    "start": "1786140",
    "end": "1792320"
  },
  {
    "text": "basically what this represents is okay let's say we're uh we're going through and we're iterating through one of these",
    "start": "1792320",
    "end": "1797480"
  },
  {
    "text": "things we encounter one of these and we say I want to run an actual HTTP request to get the bytes from this URL once that",
    "start": "1797480",
    "end": "1803419"
  },
  {
    "text": "comes back I'm going to say okay I'm going to call this function given those bytes that I got back or this error that I got back",
    "start": "1803419",
    "end": "1809899"
  },
  {
    "text": "and then based on what this thing gives me back I'm going to uh you know have a new operation to get so this is actually",
    "start": "1809899",
    "end": "1816140"
  },
  {
    "text": "what we're building up to here is a state machine and that's the transition between them so I'm going to give another example of file.exist so here we",
    "start": "1816140",
    "end": "1822140"
  },
  {
    "text": "would say file exists says the tag um path uh being the path of user passed in and then once again we have this sort",
    "start": "1822140",
    "end": "1829039"
  },
  {
    "text": "of result if it's okay then we're going to give the Boolean of that the file existed or not otherwise we could have",
    "start": "1829039",
    "end": "1834919"
  },
  {
    "text": "an error file.m metadata error and then again this is going to return a new operation so you can imagine if we were",
    "start": "1834919",
    "end": "1840320"
  },
  {
    "text": "running a loop of these things you know and just dot dot we have all the different operations listed that are possible in this effect system I can",
    "start": "1840320",
    "end": "1847880"
  },
  {
    "text": "just Loop over these and say okay well I've encountered one of these great I'm going to actually go and do that and",
    "start": "1847880",
    "end": "1853159"
  },
  {
    "text": "this is very async friendly because you could just go and do this you know the background thread or something like that or using IOU ring on Linux whatever and",
    "start": "1853159",
    "end": "1859880"
  },
  {
    "text": "then once I get the response back I can say oh cool I have this this callback function sort of hanging around for what",
    "start": "1859880",
    "end": "1865159"
  },
  {
    "text": "to do next and I can just call it passing the result of what actually happened for that I O operation and it's",
    "start": "1865159",
    "end": "1870320"
  },
  {
    "text": "going to give you back another operation so then I loop back and I just do the whole thing over again look at look at what operation I got oh this time it was",
    "start": "1870320",
    "end": "1875899"
  },
  {
    "text": "a file exists great I'll just go ahead and do that so basically inside each of these tasks is one of these operation",
    "start": "1875899",
    "end": "1882140"
  },
  {
    "text": "things which both contains what to do and then what to do next after that operation completes",
    "start": "1882140",
    "end": "1887659"
  },
  {
    "text": "and so essentially the way that the implementation of this uh this effect system is able to work is by basically",
    "start": "1887659",
    "end": "1893840"
  },
  {
    "text": "taking saying take the task unwrap the operation from within the task um run it and then run the continuation",
    "start": "1893840",
    "end": "1900320"
  },
  {
    "text": "to figure out like what what step to do next um cool okay I'm going to very briefly show uh",
    "start": "1900320",
    "end": "1907580"
  },
  {
    "start": "1904000",
    "end": "2043000"
  },
  {
    "text": "an example of uh oh yeah sorry so an important characteristic of this is that this is simulatable because not only can",
    "start": "1907580",
    "end": "1913520"
  },
  {
    "text": "I do this like for purposes of actually implementing the the real effects but of course if I want to in user space I can",
    "start": "1913520",
    "end": "1920000"
  },
  {
    "text": "write a simulation test that says hey just like let me walk through these operations and without actually doing",
    "start": "1920000",
    "end": "1925880"
  },
  {
    "text": "any real effects just say like okay well first I expect that this thing will do an HTTP get bytes and I can just",
    "start": "1925880",
    "end": "1932360"
  },
  {
    "text": "simulate it by saying I'm going to given the URL I'm going to tell you what that result was I'm going to tell you that it",
    "start": "1932360",
    "end": "1938840"
  },
  {
    "text": "got these bytes back magically no server to spin up uh nothing like that and then when I get to like file write bytes I",
    "start": "1938840",
    "end": "1945080"
  },
  {
    "text": "can say oh well you've said that you wrote this in the file system great I'm going to make a little fake in-memory file system that doesn't even have to",
    "start": "1945080",
    "end": "1951799"
  },
  {
    "text": "use a tempter and then when you try to do a read from it later I'll say oh yes yes you got these bytes back so it's",
    "start": "1951799",
    "end": "1957080"
  },
  {
    "text": "sort of like a way of uh mocking but in a very minimalistic way where you're really just simulating the bare minimum",
    "start": "1957080",
    "end": "1963440"
  },
  {
    "text": "of what happens that each step you don't actually need to like mock the entire world just in case something gets called",
    "start": "1963440",
    "end": "1968840"
  },
  {
    "text": "you know exactly what God called because you have it in this very straightforward data structure that you can just sort of",
    "start": "1968840",
    "end": "1974600"
  },
  {
    "text": "iterate over you can also put like various different apis on top of this I have some ideas but haven't actually",
    "start": "1974600",
    "end": "1980419"
  },
  {
    "text": "tried them out yet for how to make like a really nice simulation API um another thing about this is that it's",
    "start": "1980419",
    "end": "1985520"
  },
  {
    "text": "loggable again you know when you're just traversing this data structure uh you're able to just say hey you know what not",
    "start": "1985520",
    "end": "1991460"
  },
  {
    "text": "only am I going to do the http.getbytes that you requested but also behind the scenes I'm going to go ahead and uh log",
    "start": "1991460",
    "end": "1997039"
  },
  {
    "text": "that you did that oh I see that you did a file exist operation great behind the scenes I'm going to go and not only do",
    "start": "1997039",
    "end": "2002919"
  },
  {
    "text": "that but also like record that you you did one of those Etc et cetera et cetera and again with exhaustiveness checking I",
    "start": "2002919",
    "end": "2008380"
  },
  {
    "text": "can make sure that every single possible operation that that is supported by this system is going to include that logging",
    "start": "2008380",
    "end": "2015580"
  },
  {
    "text": "in addition to performing the effect that it wants also you can have complete control of the interaction between these",
    "start": "2015580",
    "end": "2020799"
  },
  {
    "text": "two during your simulation tests maybe you don't want to bother simulating all the logging you want to just say hey just ignore all those logging things",
    "start": "2020799",
    "end": "2026440"
  },
  {
    "text": "totally no problem you can do that too um this is a really powerful thing a lot of effect systems have this I'm by no",
    "start": "2026440",
    "end": "2032860"
  },
  {
    "text": "means saying that uh that this is like unique to the effects system we're talking about here but what's cool about it is that it's really simple it's",
    "start": "2032860",
    "end": "2039340"
  },
  {
    "text": "really simple it's really ergonomic and yet it still gets you all this power um very briefly I'm going to show you uh",
    "start": "2039340",
    "end": "2046000"
  },
  {
    "start": "2043000",
    "end": "2269000"
  },
  {
    "text": "how the task wrapper works for this we're not going to dwell on this because honestly this kind of like is mind-bending to me",
    "start": "2046000",
    "end": "2052179"
  },
  {
    "text": "um but in case you're wondering uh this is sort of like how how it translates from uh that operation base sort of",
    "start": "2052179",
    "end": "2058300"
  },
  {
    "text": "under the hood API to the actual task-based API that um that the end user actually interacts with so basically you",
    "start": "2058300",
    "end": "2064358"
  },
  {
    "text": "have this task type it's got an okay type and an error type uh and this is essentially a function which takes",
    "start": "2064359",
    "end": "2070780"
  },
  {
    "text": "another function and that other function takes a result so okay an error and returns an operation and then that whole",
    "start": "2070780",
    "end": "2077440"
  },
  {
    "text": "function that takes one of these functions as an argument returns an operation this broke my brain I don't know if you look at that you're like oh",
    "start": "2077440",
    "end": "2082898"
  },
  {
    "text": "yes that's very intuitive I understand exactly how that you know how that works um more power to you I didn't get it",
    "start": "2082899",
    "end": "2088300"
  },
  {
    "text": "when I first saw it I had to like stare at it a bunch and then like uh even still I I'm still very shocked that this",
    "start": "2088300",
    "end": "2093940"
  },
  {
    "text": "actually works out um here's how succeed is implemented I had to ask William how to do this because I was like I how would you even",
    "start": "2093940",
    "end": "2099040"
  },
  {
    "text": "Implement that in this in this world um here's the type of a weight so it is is a little bit magical I have to admit",
    "start": "2099040",
    "end": "2104980"
  },
  {
    "text": "this part I I don't think is simple um but the nice part is that end users of this effect system don't have to be",
    "start": "2104980",
    "end": "2111040"
  },
  {
    "text": "confronted with this they just see oh it's a task you know it's very simple the stuff that I showed earlier all you",
    "start": "2111040",
    "end": "2116380"
  },
  {
    "text": "know is the external stuff that's like going on here and you can wrap this up in an opaque type and rock so that like users don't even see that the internals",
    "start": "2116380",
    "end": "2122680"
  },
  {
    "text": "of the guts and then also on the other side when you're actually implementing the you know the state machine the",
    "start": "2122680",
    "end": "2128500"
  },
  {
    "text": "operation type is also very simple so the intermediate glue is not but fortunately that's you know not",
    "start": "2128500",
    "end": "2133960"
  },
  {
    "text": "something that everybody needs to engage with um and again all this is still simulatable unlockable because you can",
    "start": "2133960",
    "end": "2139839"
  },
  {
    "text": "go from a task to an operation that's kind of the whole point cool okay one other thing I want to note",
    "start": "2139839",
    "end": "2144940"
  },
  {
    "text": "about this system um and this is something where I don't want to claim that this is a good idea but I will claim that this is something you can do",
    "start": "2144940",
    "end": "2150400"
  },
  {
    "text": "so let's say I have my like http.getbytes uh file.exists file.rightbytes uh here we have task",
    "start": "2150400",
    "end": "2156760"
  },
  {
    "text": "that has one uh type parameter um sorry uh two type parameters so one type parameter for the uh the success",
    "start": "2156760",
    "end": "2163300"
  },
  {
    "text": "type and the one for the error type something you can do if you want is you can add a third type which describes",
    "start": "2163300",
    "end": "2169060"
  },
  {
    "text": "this is what type of effect this thing does so you could say for example this does a network effect this does a file",
    "start": "2169060",
    "end": "2175359"
  },
  {
    "text": "read effect this does a file write effect and in exactly the same way as how these errors accumulate if you just",
    "start": "2175359",
    "end": "2181599"
  },
  {
    "text": "take the exact same code that we did earlier uh and and you know where we were just uh you know writing this",
    "start": "2181599",
    "end": "2187060"
  },
  {
    "text": "operation that used all three of these things and they just automatically accumulated their errors these will accumulate as well and so what you'll",
    "start": "2187060",
    "end": "2193359"
  },
  {
    "text": "get out of that is you'll get not only uh you know this this operation you know does these errors but even after you've",
    "start": "2193359",
    "end": "2198640"
  },
  {
    "text": "handled the errors this will say this task this like combined task that's made from composing",
    "start": "2198640",
    "end": "2204280"
  },
  {
    "text": "together these these other subtasks with task data weight it has Network effects",
    "start": "2204280",
    "end": "2209859"
  },
  {
    "text": "it has file read effects and has file write effects so we'll just sort of tell you in the type here are exactly all the",
    "start": "2209859",
    "end": "2215320"
  },
  {
    "text": "different types of effects that this operation does which means that you know as your program gets bigger and bigger you can look at a given type signature",
    "start": "2215320",
    "end": "2221380"
  },
  {
    "text": "and say oh I see this thing does a task and more specifically I can see that this does Network tasks and file read",
    "start": "2221380",
    "end": "2227440"
  },
  {
    "text": "tasks but not file right tasks because those don't appear in the type and that that will be sort of completely enforced",
    "start": "2227440",
    "end": "2232540"
  },
  {
    "text": "by the type system you can never forget one of these or else you'll get a tight mismatch it'll say hey this you know did",
    "start": "2232540",
    "end": "2237820"
  },
  {
    "text": "one of these Network things but I didn't see network listen there so you need to add that to your type and it's also",
    "start": "2237820",
    "end": "2243040"
  },
  {
    "text": "completely inferred so if you don't want to you could just uh you know leave an underscore there which underscore type basically means hey you know I don't",
    "start": "2243040",
    "end": "2249280"
  },
  {
    "text": "want to feel like annotating this type right now but you know the type system is still tracking it it's not like in any type it's just like hey you know I",
    "start": "2249280",
    "end": "2255760"
  },
  {
    "text": "don't care about this right now um like I said I'm not sure that this is actually a good idea it might not be worth like the extra verbosity and",
    "start": "2255760",
    "end": "2262119"
  },
  {
    "text": "complexity and tracking but I wanted to note that this is something that you can do with tag unions and when you're",
    "start": "2262119",
    "end": "2267520"
  },
  {
    "text": "making a check system like this okay finally want to talk very briefly about the runtime representation of this",
    "start": "2267520",
    "end": "2273940"
  },
  {
    "start": "2269000",
    "end": "2401000"
  },
  {
    "text": "um so I mentioned that like you know that you have this operation type it lists it's a tag Union that lists like all the different operations that are",
    "start": "2273940",
    "end": "2279579"
  },
  {
    "text": "possible each one of them crucially ends in a function that says uh here's how we go um from this to the next operation uh",
    "start": "2279579",
    "end": "2286720"
  },
  {
    "text": "you know sort of the next step in the state machine um how is this actually represented at runtime",
    "start": "2286720",
    "end": "2292420"
  },
  {
    "text": "um and so basically uh you know this this sort of uh uh oh yeah and then you have the task wrapper around that which",
    "start": "2292420",
    "end": "2297820"
  },
  {
    "text": "ultimately just gets translated to an operation um essentially it's just how unions and",
    "start": "2297820",
    "end": "2302859"
  },
  {
    "text": "functions so the the question of like how does this get represented at runtime really comes down to how do you represent tag unions or or you know some",
    "start": "2302859",
    "end": "2309339"
  },
  {
    "text": "types in whatever language you're using um and and functions and in the case of rock fortunately the answer is um very",
    "start": "2309339",
    "end": "2315460"
  },
  {
    "text": "very efficiently is how these are represented so uh actually like rust and C plus plus Rock does represent these",
    "start": "2315460",
    "end": "2321520"
  },
  {
    "text": "things uh using sort of monomorphized Stack allocated data structures that are about as efficient as they possibly could be",
    "start": "2321520",
    "end": "2327579"
  },
  {
    "text": "um so for tag unions these get uh monomorphized all the way down to basically C structs and unions",
    "start": "2327579",
    "end": "2333460"
  },
  {
    "text": "um and then uh for functions we actually stack allocate our closures too so we monomorphize them all the way down such",
    "start": "2333460",
    "end": "2338800"
  },
  {
    "text": "that they don't even have a heap allocation which is to say in layman's terms basically the rock runtime",
    "start": "2338800",
    "end": "2345220"
  },
  {
    "text": "representation of this is like the same as the rust runtime representation it's almost exactly as efficient",
    "start": "2345220",
    "end": "2351339"
  },
  {
    "text": "um which is pretty cool because this is actually how rust does its async state machines like when you use the async",
    "start": "2351339",
    "end": "2357099"
  },
  {
    "text": "keyword in Rust it basically compiles all the way down to essentially this uh this exact data structure",
    "start": "2357099",
    "end": "2363820"
  },
  {
    "text": "um and you know this is kind of assuming that all this tasks like this function wrapping will get inlined away which since I haven't actually implemented",
    "start": "2363820",
    "end": "2369700"
  },
  {
    "text": "this yet I don't know if that'll get inlined away but even if it does their stack allocated functions the overhead should be pretty minimal so we're kind",
    "start": "2369700",
    "end": "2375579"
  },
  {
    "text": "of expecting that the overall overhead of this effect system is going to be basically equivalent to the overall",
    "start": "2375579",
    "end": "2381220"
  },
  {
    "text": "overhead of async rust which is to say about as minimal as possible because their goal in designing async Russ was",
    "start": "2381220",
    "end": "2386920"
  },
  {
    "text": "quote you couldn't do better if you wrote it by hand in like assembly um so very excited to be able to",
    "start": "2386920",
    "end": "2392740"
  },
  {
    "text": "actually Benchmark this but like I said it doesn't quite the implementation doesn't exist yet so take everything I'm saying with a grain of salt this",
    "start": "2392740",
    "end": "2398500"
  },
  {
    "text": "definitely works from a tight perspective but that's all I can say so far um cool um so yeah so since Rock tag use",
    "start": "2398500",
    "end": "2405640"
  },
  {
    "start": "2401000",
    "end": "2418000"
  },
  {
    "text": "or C tag unions no Heap allocations by default enclosures basically implemented as tag unions on the hood so also uh no",
    "start": "2405640",
    "end": "2412660"
  },
  {
    "text": "no Heap allocations um basically we end up with something that's essentially like rust's async State machine",
    "start": "2412660",
    "end": "2418420"
  },
  {
    "start": "2418000",
    "end": "2752000"
  },
  {
    "text": "okay and finally I want to very briefly talk about some comparisons to other languages um there are a lot of different effect",
    "start": "2418420",
    "end": "2423760"
  },
  {
    "text": "systems out there uh so there's like ones in the standard libraries third-party effects systems algebraic effects in some languages now",
    "start": "2423760",
    "end": "2430960"
  },
  {
    "text": "um unfortunately don't have time to compare to all those so basically I'm just gonna real quick run through sort of a summary of the capabilities of what",
    "start": "2430960",
    "end": "2436660"
  },
  {
    "text": "this effect system gets you um so does get you simulation testing which is one of our main goals errors",
    "start": "2436660",
    "end": "2442240"
  },
  {
    "text": "accumulated automatically also one of the motivations um can't forget to handle errors also important uh can track which affects the",
    "start": "2442240",
    "end": "2449200"
  },
  {
    "text": "tasks May perform again not sure exactly if this is a good idea or not may not be worth the complexity but it's something that it is capable of doing if you want",
    "start": "2449200",
    "end": "2455380"
  },
  {
    "text": "to and finally of course you can use map error to tag custom error types non-capabilities so some other effect",
    "start": "2455380",
    "end": "2461800"
  },
  {
    "text": "systems do have this like they have ways to sort of compose like tasks like errors with non-task effects like this",
    "start": "2461800",
    "end": "2467619"
  },
  {
    "text": "is something I believe you can do in algebraic effects not something that supports everything's just it's just tasks within tasks",
    "start": "2467619",
    "end": "2474280"
  },
  {
    "text": "um calling effects effectual functions with the same syntax as calling non-effectful functions again again not something you can do you saw we had that",
    "start": "2474280",
    "end": "2480460"
  },
  {
    "text": "little like left Arrow syntax uh for for uh composing the other effects that's that's uh something that you have to do",
    "start": "2480460",
    "end": "2486820"
  },
  {
    "text": "you don't have the ability to just say like oh yes x equals and then like run this task that's not something this this",
    "start": "2486820",
    "end": "2492099"
  },
  {
    "text": "could gets you um it also doesn't give you quote unquote colorless effectual functions uh so in other words there is a type change",
    "start": "2492099",
    "end": "2498640"
  },
  {
    "text": "when you want to do effects like you are you do have to say this returns a task rather than a result um so these are you know there's a",
    "start": "2498640",
    "end": "2504640"
  },
  {
    "text": "trade-off there which is to say um you know you do get to know just by looking at the type whether or not effects are involved so this is one of",
    "start": "2504640",
    "end": "2510760"
  },
  {
    "text": "the things that I like about this system but admittedly a downside is that if you do want to change something that's like",
    "start": "2510760",
    "end": "2515920"
  },
  {
    "text": "very deeply nested into uh something that you know is going to perform effects you do have to do some work to",
    "start": "2515920",
    "end": "2521260"
  },
  {
    "text": "go change all the colors to to return tasks instead of results or whatever the case may be",
    "start": "2521260",
    "end": "2526480"
  },
  {
    "text": "um in terms of ergonomics uh you know I think this is a very simple you know very gentle learning curve uh compared",
    "start": "2526480",
    "end": "2531940"
  },
  {
    "text": "to some of the other effects systems that I've seen out there um and has a similar verbosity to async await so you do have to you know do that",
    "start": "2531940",
    "end": "2537820"
  },
  {
    "text": "like pipe to cast out await uh like in Rust you would just say dot await so that's like slightly less verbose but",
    "start": "2537820",
    "end": "2543940"
  },
  {
    "text": "you know basically pretty similar like every time you're going to do one of these you're gonna need to say like you know await it essentially",
    "start": "2543940",
    "end": "2550359"
  },
  {
    "text": "um which I consider to be pretty reasonable ergonomics um it also especially you know the the thing that I really love",
    "start": "2550359",
    "end": "2556300"
  },
  {
    "text": "about this is that the air accumulation just works like you don't have to wrap things in problem and yet you get all",
    "start": "2556300",
    "end": "2561640"
  },
  {
    "text": "the benefits of the rest of uh rust's like um error handling system",
    "start": "2561640",
    "end": "2566800"
  },
  {
    "text": "um performance when it comes to tag unions basically it's like the performance of any other some type in your language so depending on what",
    "start": "2566800",
    "end": "2572560"
  },
  {
    "text": "language you're implementing the system in um you know it really kind of comes down to like how are your Anonymous sometimes implemented like polymorphic",
    "start": "2572560",
    "end": "2578619"
  },
  {
    "text": "variants no camel um probably have a different actually I know they have a different runtime representation than Rock because though Campbell doesn't",
    "start": "2578619",
    "end": "2584020"
  },
  {
    "text": "monomorphize um so in Rock's case this is basically the same performance as rustenoms it's like literally the that we compile the",
    "start": "2584020",
    "end": "2590260"
  },
  {
    "text": "same stuff give or take some optimizations that uh rust has um and of course this could be done with like Union types and other languages",
    "start": "2590260",
    "end": "2596319"
  },
  {
    "text": "like in typescript or Ruby with sorbet stuff like that um as far as the state machine performance goes again depends on how",
    "start": "2596319",
    "end": "2602200"
  },
  {
    "text": "the language represents closures um so rocks are not Heap allocated very unusual for a high level language with automatic memory management in fact uh",
    "start": "2602200",
    "end": "2608740"
  },
  {
    "text": "the only other one that I know of that does this is Milton um but uh yeah uh unusual but uh but",
    "start": "2608740",
    "end": "2614319"
  },
  {
    "text": "normally uh you would have to sort of pay for at least one uh Heap allocation per state in the state machine",
    "start": "2614319",
    "end": "2619540"
  },
  {
    "text": "um and then of course uh this task wrapper performance like I mentioned earlier does kind of depend on how much inlining we're doing and we'll find out",
    "start": "2619540",
    "end": "2625420"
  },
  {
    "text": "in practice when we actually implement this uh how much it uh how much it actually gets to inline hopefully all of it",
    "start": "2625420",
    "end": "2630880"
  },
  {
    "text": "um and finally the performance of the effects themselves um effects in rock can be written low level system languages uh this gets into rock sort of",
    "start": "2630880",
    "end": "2637839"
  },
  {
    "text": "platforms and applications design which is outside the scope of this talk but it means that basically when you get to like you know file read like IO like uh",
    "start": "2637839",
    "end": "2645099"
  },
  {
    "text": "operations like that you're probably going to be looking at you know C or rust levels of overhead so very very minimal",
    "start": "2645099",
    "end": "2650800"
  },
  {
    "text": "um languages with cffi could do the same thing if they wanted to so you could basically have like cffi to just",
    "start": "2650800",
    "end": "2656079"
  },
  {
    "text": "interpret that state machine if you wanted to um but uh you know that that really is kind of up to you how you want to",
    "start": "2656079",
    "end": "2661300"
  },
  {
    "text": "implement the low level stuff if you want you could just use like you know normal standard Library i o stuff okay",
    "start": "2661300",
    "end": "2666579"
  },
  {
    "text": "so summarize everything we talked about um started with talking about motivation so we wanted to have a better story around testing and handling errors and",
    "start": "2666579",
    "end": "2673780"
  },
  {
    "text": "logging um basically talked about tag unions are Anonymous subtypes uh you know but any language with Anonymous subtypes you can",
    "start": "2673780",
    "end": "2680079"
  },
  {
    "text": "presumably do the same thing uh this as this uh effect system um tasks can have payloads that's very",
    "start": "2680079",
    "end": "2685780"
  },
  {
    "text": "important uh they have exhaustive pattern matching also important and they accumulate across conditional branches which is how we get the really nice",
    "start": "2685780",
    "end": "2691720"
  },
  {
    "text": "error accumulation behavior and if you want to the accumulating the effect type as well we gave this example of like",
    "start": "2691720",
    "end": "2698200"
  },
  {
    "text": "sort of a mixing and matching different different types of effect errors and then seeing how we were able to still do",
    "start": "2698200",
    "end": "2704200"
  },
  {
    "text": "exhaustive powder matching at the end to cover all the error cases you know without having to do this like wrapper or problem type we talked about how the",
    "start": "2704200",
    "end": "2711339"
  },
  {
    "text": "exhaustiveness matching gives us like an error if we forget to cover something and there's kind of like no way around",
    "start": "2711339",
    "end": "2716440"
  },
  {
    "text": "that as long as we're you know using this the system um and then finally we talked about uh",
    "start": "2716440",
    "end": "2721960"
  },
  {
    "text": "sort of the uh the actual implementation under the hood of where we're pattern matching on this operator to make this state machine which is very nice in that",
    "start": "2721960",
    "end": "2728920"
  },
  {
    "text": "it's simulatable we can write simulation tests that don't actually do the real effect quite easily and it's also",
    "start": "2728920",
    "end": "2734319"
  },
  {
    "text": "loggable we can make sure that again using exhaustiveness checking that we don't forget to cover any possible",
    "start": "2734319",
    "end": "2739359"
  },
  {
    "text": "effect and make sure that you're on our web server for example we're always logging every single effect that that comes through the system",
    "start": "2739359",
    "end": "2746319"
  },
  {
    "text": "um okay and so this has been simple functional effects with tag units thanks very much",
    "start": "2746319",
    "end": "2752940"
  }
]