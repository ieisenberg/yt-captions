[
  {
    "start": "0",
    "end": "23000"
  },
  {
    "text": "i want to talk to you today about um building scalable back-ends using the actor model and um akka.net more",
    "start": "14320",
    "end": "21920"
  },
  {
    "text": "specifically so what's on the agenda for today wait i'm quickly going to move a window here that's in my way",
    "start": "21920",
    "end": "28000"
  },
  {
    "start": "23000",
    "end": "55000"
  },
  {
    "text": "uh okay so what's on the agenda i'm gonna dive in a little bit of history",
    "start": "28000",
    "end": "33120"
  },
  {
    "text": "i'll give you a brief introduction into what akka.net really is um",
    "start": "33120",
    "end": "38559"
  },
  {
    "text": "i'll explain a problem domain that we tried uh to solve with it and then we'll",
    "start": "38559",
    "end": "43680"
  },
  {
    "text": "dive into how we made that work i'll probably have more content than we",
    "start": "43680",
    "end": "49520"
  },
  {
    "text": "can fit into an hour but you can always hit me up in the hallway",
    "start": "49520",
    "end": "54640"
  },
  {
    "text": "afterwards so why do we even have frameworks like",
    "start": "54640",
    "end": "59840"
  },
  {
    "start": "55000",
    "end": "480000"
  },
  {
    "text": "aka.net well in the 70s people did research and like",
    "start": "59840",
    "end": "65198"
  },
  {
    "text": "a lot of the things that we are using today um it was invented back then i think it was probably because they were",
    "start": "65199",
    "end": "71040"
  },
  {
    "text": "less distracted by by social media and smartphones and they probably had better drugs",
    "start": "71040",
    "end": "76799"
  },
  {
    "text": "um but it was invented in the 70s and the ideas were refined throughout the 70s and into the early 80s",
    "start": "76799",
    "end": "84840"
  },
  {
    "text": "um yet we've only seen it in practice only over the last decade or so",
    "start": "84840",
    "end": "90960"
  },
  {
    "text": "well it's not entirely true um the first real application of the actor model um",
    "start": "90960",
    "end": "96640"
  },
  {
    "text": "was done by ericsson um because they're running they were running the telco world back then",
    "start": "96640",
    "end": "104880"
  },
  {
    "text": "and the way it worked back then because now you all have these uh phone plans where your voice calls are basically",
    "start": "104880",
    "end": "110560"
  },
  {
    "text": "free but they were charging by the connection and by the minute so it meant that downtime was costing money so",
    "start": "110560",
    "end": "116079"
  },
  {
    "text": "uptime was everything so they wrote a programming language because there wasn't a language that",
    "start": "116079",
    "end": "122320"
  },
  {
    "text": "could do this they actually made the erection language hence the name erlang that had an actual model built into it",
    "start": "122320",
    "end": "130319"
  },
  {
    "text": "because they figured if they could use this and its self-healing capabilities",
    "start": "130319",
    "end": "135520"
  },
  {
    "text": "and they could build a telco system that had like the craziest of up times",
    "start": "135520",
    "end": "141040"
  },
  {
    "text": "so they wrote software that was about two million lines of code and they achieved nine nines of uptime",
    "start": "141040",
    "end": "149040"
  },
  {
    "text": "and to put that into perspective that is 31 milliseconds a year of downtime",
    "start": "149040",
    "end": "155519"
  },
  {
    "text": "i don't know who has an application that has this kind of uptime yeah none of us right",
    "start": "155519",
    "end": "161760"
  },
  {
    "text": "so that's interesting i found that really triggering that's why i dove into this and then",
    "start": "161760",
    "end": "168080"
  },
  {
    "text": "since the 80s there were a couple of implementations of the actor model um like akka on the jvm has been around a",
    "start": "168080",
    "end": "174400"
  },
  {
    "text": "little bit longer since 2010 but in in.net we got three of them over",
    "start": "174400",
    "end": "180319"
  },
  {
    "text": "the course of a few months we got microsoft orleans and the actor model they built to build the back end",
    "start": "180319",
    "end": "187440"
  },
  {
    "text": "of halo 4. we got that released to the public in february",
    "start": "187440",
    "end": "192480"
  },
  {
    "text": "then we had akka.net echo.net's first production release in the same period",
    "start": "192480",
    "end": "198879"
  },
  {
    "text": "and then we also got it's not a real actor model but we got service fabric reliable actors",
    "start": "198879",
    "end": "205120"
  },
  {
    "text": "um so it makes you wonder like why 2015",
    "start": "205120",
    "end": "211280"
  },
  {
    "text": "because this has been around since the 70s but we've gotten three of them in 2015",
    "start": "211280",
    "end": "217280"
  },
  {
    "text": "in the net ecosystem and on even other ecosystems they've only like really the last decade or so",
    "start": "217280",
    "end": "225040"
  },
  {
    "text": "so why i mean classic scaling had come under stress we ran applications like",
    "start": "225040",
    "end": "230400"
  },
  {
    "text": "this for decades before we actually moved into the the cloud stuff",
    "start": "230400",
    "end": "235519"
  },
  {
    "text": "so you might have a load balancer and then a couple of production servers be behind it and a database cluster and",
    "start": "235519",
    "end": "241599"
  },
  {
    "text": "maybe like a caching cluster if that wasn't sufficient and a lot of the scaling came from",
    "start": "241599",
    "end": "249360"
  },
  {
    "text": "free it came for free because they would release a faster processor every year",
    "start": "249360",
    "end": "254400"
  },
  {
    "text": "and a faster processor meant you could just upgrade the machine you could handle more workload and because a lot",
    "start": "254400",
    "end": "259600"
  },
  {
    "text": "of these applications were running inside enterprises the the potential for like a huge peak",
    "start": "259600",
    "end": "265280"
  },
  {
    "text": "increase in usage wasn't that big but then we had the web and we had",
    "start": "265280",
    "end": "270720"
  },
  {
    "text": "smartphones and we had the internet of things and you can now have an app",
    "start": "270720",
    "end": "276639"
  },
  {
    "text": "and it might get featured on the app store and you might go from 2000 users to 2 million users over the course of a",
    "start": "276639",
    "end": "283280"
  },
  {
    "text": "day and your back-end has to be able to deal with that that's a whole different set of problems",
    "start": "283280",
    "end": "290000"
  },
  {
    "text": "and there is something that's really working against us this is like the processor",
    "start": "290000",
    "end": "295440"
  },
  {
    "text": "data over the course of four decades",
    "start": "295440",
    "end": "300320"
  },
  {
    "text": "and what we see here is not really a cause for optimism",
    "start": "301520",
    "end": "306880"
  },
  {
    "text": "because single threat performance is flattening out clock frequency has stabilized for more",
    "start": "306880",
    "end": "313520"
  },
  {
    "text": "than a decade so we had pentium force that we could overclock",
    "start": "313520",
    "end": "319120"
  },
  {
    "text": "with liquid nitrogen two to five gigahertz we can't really get that much for further today",
    "start": "319120",
    "end": "325759"
  },
  {
    "text": "um and there's only one of the metrics here that is actually cost for hope and that is the number of cores",
    "start": "325759",
    "end": "333199"
  },
  {
    "text": "when i started out as a programmer it was very typical that your desktop had like a single core like pentium 3 or",
    "start": "333199",
    "end": "338880"
  },
  {
    "text": "pentium 4 or whatever now you probably have 6 or 8 or even 12",
    "start": "338880",
    "end": "344400"
  },
  {
    "text": "cores in in your pocket on your phone so that's an evolution that we would like to take advantage of",
    "start": "344400",
    "end": "350960"
  },
  {
    "text": "but taking advantage of multiple cores means that we have to parallelize our code",
    "start": "350960",
    "end": "356720"
  },
  {
    "text": "and there's always problems because if you start parallelizing code in multiple threads",
    "start": "356720",
    "end": "363039"
  },
  {
    "text": "it means that any shared state is going to cause you a headache because if you're accessing",
    "start": "363039",
    "end": "369360"
  },
  {
    "text": "shared state you might run into race conditions which means that if you have one to avoid that you're going to have",
    "start": "369360",
    "end": "374880"
  },
  {
    "text": "to invent some kind of locking mechanism and that might cause deadlocks but that's also cause for a little bit of",
    "start": "374880",
    "end": "380720"
  },
  {
    "text": "your code that cannot be parallelized and that serialized code is what is",
    "start": "380720",
    "end": "386080"
  },
  {
    "text": "actually hurting you the most because amdahl's law says",
    "start": "386080",
    "end": "391120"
  },
  {
    "text": "that we can only speed up a system by so much and the percentage of serializable",
    "start": "391120",
    "end": "396639"
  },
  {
    "text": "code is like the metric that will hurt you the most if you can parallelize 95 of",
    "start": "396639",
    "end": "403199"
  },
  {
    "text": "your code which is already a pretty good number if you can parallelize 95 of it it",
    "start": "403199",
    "end": "408479"
  },
  {
    "text": "doesn't matter that you throw 30 000 50 000 cpus at it you can never increase",
    "start": "408479",
    "end": "413919"
  },
  {
    "text": "the workload by more than times 20 because that five percent of the code always has to run in series",
    "start": "413919",
    "end": "421680"
  },
  {
    "text": "so with this we're going to need like way higher parallelization if we want to",
    "start": "421680",
    "end": "427759"
  },
  {
    "text": "have something that scales across multiple cores multiple machines and so on we want to parallelize workloads as",
    "start": "427759",
    "end": "433840"
  },
  {
    "text": "much as we can and that's a promise that these actor models are giving us",
    "start": "433840",
    "end": "439360"
  },
  {
    "text": "they promise us a crazy degree of parallelization",
    "start": "439360",
    "end": "444400"
  },
  {
    "text": "also for stateful systems because a stateless system is very very easy to to parallelize",
    "start": "444400",
    "end": "450400"
  },
  {
    "text": "but as soon as you're dealing with state that's when it becomes tricky and that is where the actor model brings",
    "start": "450400",
    "end": "456000"
  },
  {
    "text": "us a couple of solutions to that problem they do so by using reactive patterns",
    "start": "456000",
    "end": "463440"
  },
  {
    "text": "and the fault tolerance as we discussed in the erickson slide a couple of slides ago is built in you can make it",
    "start": "463440",
    "end": "469759"
  },
  {
    "text": "extremely resilient i'll get to how they do that in a couple of minutes um",
    "start": "469759",
    "end": "475599"
  },
  {
    "text": "but these are the promises that we get right everybody with me so let's dive into how that works",
    "start": "475599",
    "end": "482960"
  },
  {
    "start": "480000",
    "end": "1159000"
  },
  {
    "text": "in code the basic building block of an actor system is",
    "start": "482960",
    "end": "488720"
  },
  {
    "text": "an actor and an actor is just a simple instance of a class",
    "start": "488720",
    "end": "494319"
  },
  {
    "text": "and it has an inbox you can send messages to the inbox of an actor and they will get processed one by one in",
    "start": "494319",
    "end": "501520"
  },
  {
    "text": "order on a single thread but the cool thing is that there's",
    "start": "501520",
    "end": "506720"
  },
  {
    "text": "always only going to be a single message being processed on that instance so inside of your actor you don't have to",
    "start": "506720",
    "end": "513518"
  },
  {
    "text": "care about other threats or race conditions or so on because you know that you're the only",
    "start": "513519",
    "end": "519599"
  },
  {
    "text": "threat who is manipulating the state at that moment so all of the behavior and the state",
    "start": "519599",
    "end": "525440"
  },
  {
    "text": "that the actor needs has to be internal to the actor and other actors can only access it by",
    "start": "525440",
    "end": "532480"
  },
  {
    "text": "sending a message to the actor and getting a reply back and that we way we make sure that this",
    "start": "532480",
    "end": "538640"
  },
  {
    "text": "there's only a single thread running on this this is a really really powerful con concept",
    "start": "538640",
    "end": "544880"
  },
  {
    "text": "and that is what makes it easy to do now writing an actor in code",
    "start": "544880",
    "end": "550320"
  },
  {
    "text": "is really easy you just inherit from the untyped actor class damn this is really the biggest screen",
    "start": "550320",
    "end": "556399"
  },
  {
    "text": "i've ever been in front in front you have the untyped actor",
    "start": "556399",
    "end": "561440"
  },
  {
    "text": "this is like the simplest one you have in acco.net there's plenty more we'll see a couple of them in a minute and you implement",
    "start": "561440",
    "end": "567760"
  },
  {
    "text": "implement the on receive and then messages come in and yeah you'll you'll just receive all the",
    "start": "567760",
    "end": "574160"
  },
  {
    "text": "messages that have been sent to this actor and you can do something with them like this is it",
    "start": "574160",
    "end": "579760"
  },
  {
    "text": "you just have to check what type of message you're getting and then do something with it now these messages",
    "start": "579760",
    "end": "586399"
  },
  {
    "text": "they're also very very simple objects i mean in nothing enforces you to do anything they",
    "start": "586399",
    "end": "592320"
  },
  {
    "text": "just have to be a.net object",
    "start": "592320",
    "end": "597200"
  },
  {
    "text": "now the thing is the net runtime doesn't force your messages to be immutable but it's a very very bad",
    "start": "597680",
    "end": "605120"
  },
  {
    "text": "idea to make them mutable anyway because they might cross a machine boundary",
    "start": "605120",
    "end": "610800"
  },
  {
    "text": "and then they get serialized and deserialized which means that whatever you were trying to do by still",
    "start": "610800",
    "end": "615920"
  },
  {
    "text": "manipulating the message will no longer work so they claim that you can get",
    "start": "615920",
    "end": "622640"
  },
  {
    "text": "50 million messengers a second on a single machine they're talking about the server i can reliably get like 2 million",
    "start": "622640",
    "end": "629440"
  },
  {
    "text": "on my 4 euro 4 year old laptop so i think that claim is probably pretty",
    "start": "629440",
    "end": "635519"
  },
  {
    "text": "true um now in.net you might want to design your",
    "start": "635519",
    "end": "642160"
  },
  {
    "text": "messages to be fully fully immutable by making all the",
    "start": "642160",
    "end": "648320"
  },
  {
    "text": "properties only settable in the constructor but when you deal with collections it's a very good idea to use",
    "start": "648320",
    "end": "654800"
  },
  {
    "text": "the immutable collections so that you cannot change the content of the collection object after the message",
    "start": "654800",
    "end": "661839"
  },
  {
    "text": "has been instantiated and then you're sure that everything that goes in there is immutable can cross across a machine",
    "start": "661839",
    "end": "668160"
  },
  {
    "text": "boundary if it has to without causing you a headache now the thing that ties all of this",
    "start": "668160",
    "end": "675760"
  },
  {
    "text": "together is the actor system and luckily that's the work that we don't have to do the actor system is basically what keeps",
    "start": "675760",
    "end": "682560"
  },
  {
    "text": "all your actors in the air it will instantiate your actors based on",
    "start": "682560",
    "end": "688640"
  },
  {
    "text": "a sort of constructor pointer it will construct them for you it will",
    "start": "688640",
    "end": "694640"
  },
  {
    "text": "destruct them for you it will handle all those inboxes and all the messages",
    "start": "694640",
    "end": "700880"
  },
  {
    "text": "and it will do the threat scheduling for you and that's the part that we would hate doing because it's very complicated",
    "start": "700880",
    "end": "705920"
  },
  {
    "text": "and we can hand that over to the people who made the system there's also a published subscribe event bus not gonna",
    "start": "705920",
    "end": "711760"
  },
  {
    "text": "dive into that today but it's there so it does a lot of awesome things it's basically the puppet master of your",
    "start": "711760",
    "end": "717839"
  },
  {
    "text": "software system and this is like the first metallica album i bought when it came out",
    "start": "717839",
    "end": "723440"
  },
  {
    "text": "uh a while ago now creating an actor system in code is",
    "start": "723440",
    "end": "729519"
  },
  {
    "text": "really really easy you do actor system.create and you give it a name and that's pretty much",
    "start": "729519",
    "end": "736800"
  },
  {
    "text": "all of it if you want to start spawning actors inside your actors system you're going",
    "start": "736800",
    "end": "741920"
  },
  {
    "text": "to have to use props and the easiest way to think about props is a constructor",
    "start": "741920",
    "end": "747920"
  },
  {
    "text": "pointer it will tell you how to construct your actor and now i'm using the default",
    "start": "747920",
    "end": "754079"
  },
  {
    "text": "constructor because i'm not passing any parameter parameters but any",
    "start": "754079",
    "end": "760000"
  },
  {
    "text": "constructor parameters that you want to pass to that actor you can pass in the props",
    "start": "760000",
    "end": "765760"
  },
  {
    "text": "and what you get when you do actor off on your actor system which creates a top",
    "start": "765760",
    "end": "771440"
  },
  {
    "text": "level actor with the props that we just made you get an actor ref back",
    "start": "771440",
    "end": "779120"
  },
  {
    "text": "you don't get the actual actor you just have a reference object that",
    "start": "779120",
    "end": "784560"
  },
  {
    "text": "allows you to talk to the actor and that allows you to send messages to it or to communicate with it but you can",
    "start": "784560",
    "end": "790800"
  },
  {
    "text": "never access the actual actor and that is something that forces you to do the right thing",
    "start": "790800",
    "end": "797040"
  },
  {
    "text": "and then you can use that reference to send a message to the actor in question",
    "start": "797040",
    "end": "804079"
  },
  {
    "text": "now actors live in a hierarchy hierarchy i just explained you how we created a top level actor",
    "start": "804079",
    "end": "810560"
  },
  {
    "text": "but your place in the hierarchy is defined by your position in it actors can have child actors and so on",
    "start": "810560",
    "end": "818399"
  },
  {
    "text": "and so on and grandchildren and everything that you make falls under the user actor this is a",
    "start": "818399",
    "end": "824160"
  },
  {
    "text": "user space where all the actors that you create are going to be there's three default actors that are",
    "start": "824160",
    "end": "830560"
  },
  {
    "text": "always there it's the root the user and the system actor under the system actor all the thread schedulers and so on they",
    "start": "830560",
    "end": "836560"
  },
  {
    "text": "are running under the user run we have actually the functional ones that we build ourselves",
    "start": "836560",
    "end": "842560"
  },
  {
    "text": "now this address is important we'll see in a few slides why that is",
    "start": "842560",
    "end": "848160"
  },
  {
    "text": "but there is a concept called supervision in this hierarchy and supervision is basically how we do fault",
    "start": "848160",
    "end": "854480"
  },
  {
    "text": "tolerance now i have three kids and if i take them to the supermarket",
    "start": "854480",
    "end": "859600"
  },
  {
    "text": "ultimately i'm responsible as a parent if they run their cart into some lady's",
    "start": "859600",
    "end": "865120"
  },
  {
    "text": "ankles i have to make sure that they apologize if they knock something over over i'm gonna help clean it up i mean",
    "start": "865120",
    "end": "871360"
  },
  {
    "text": "if they misbehave i'm responsible that's how it works as a parent and with actors it is no different",
    "start": "871360",
    "end": "877519"
  },
  {
    "text": "um as a parent actor you are responsible for your children if an uncaught exception occurs in one",
    "start": "877519",
    "end": "885199"
  },
  {
    "text": "of your actors it is escalated to the parent through a supervision strategy",
    "start": "885199",
    "end": "892000"
  },
  {
    "text": "to respond to that failure and if we respond to that failure the",
    "start": "892000",
    "end": "897920"
  },
  {
    "text": "parent can decide to do a number of things the parent can decide to kill off the child don't do that with",
    "start": "897920",
    "end": "904000"
  },
  {
    "text": "your own children it could basically also tell the actor like okay this exception is not that bad",
    "start": "904000",
    "end": "910800"
  },
  {
    "text": "that bad just ignore it and pick up the next message or you can basically tell it like okay",
    "start": "910800",
    "end": "916320"
  },
  {
    "text": "we're gonna restart you so you basically destroy the actor recreate it with the same props but it",
    "start": "916320",
    "end": "921839"
  },
  {
    "text": "preserves the entire inbox and it will retry the message on the new instance",
    "start": "921839",
    "end": "927199"
  },
  {
    "text": "and that last one is basically the default behavior and you can either apply the strategy to",
    "start": "927199",
    "end": "933279"
  },
  {
    "text": "one of your children or all of them it depends on what kind of workload you're running if you cut like a big task into",
    "start": "933279",
    "end": "939839"
  },
  {
    "text": "multiple small pieces and delegated them all to little child actors",
    "start": "939839",
    "end": "945120"
  },
  {
    "text": "it might be that a single exception invalidates the whole workload so there's no point in letting all the",
    "start": "945120",
    "end": "950720"
  },
  {
    "text": "other children run so you kill them off all that's a possibility i mean you can do this and you implement this strategy",
    "start": "950720",
    "end": "959040"
  },
  {
    "text": "the failure of an actor has to be handled in the parent and that is that is one of the things that you have to",
    "start": "959040",
    "end": "964720"
  },
  {
    "text": "reason about now as you can already feel you're going to have to reason about your code a",
    "start": "964720",
    "end": "969920"
  },
  {
    "text": "little bit differently and there's a couple of design ideas like the basic principles that make it a",
    "start": "969920",
    "end": "975440"
  },
  {
    "text": "lot easier to build actors correctly first of all split",
    "start": "975440",
    "end": "981360"
  },
  {
    "text": "any workload into small chunks and then into smaller chunks and you create",
    "start": "981360",
    "end": "986560"
  },
  {
    "text": "actors for every every small task make them very specific single responsibility also translates to actors",
    "start": "986560",
    "end": "995759"
  },
  {
    "text": "but the other thing is you put high risk operations anything that goes out of your actor system could be high risk",
    "start": "995759",
    "end": "1002720"
  },
  {
    "text": "going to disk going over the network going to a database whatever it's all tricky",
    "start": "1002720",
    "end": "1008079"
  },
  {
    "text": "you push that risk as far to the bottom as possible so that you have an actor that you can restart",
    "start": "1008079",
    "end": "1015120"
  },
  {
    "text": "without hurting all the main actors that have important data in them um so that's like puts push pushing the",
    "start": "1015120",
    "end": "1022000"
  },
  {
    "text": "risk further down make sure that you can actually realize that uptime that you really want",
    "start": "1022000",
    "end": "1027520"
  },
  {
    "text": "and then you have to keep in mind that every actor is basically single threaded",
    "start": "1027520",
    "end": "1034000"
  },
  {
    "text": "it might run different messages on different threads but there's never two threads running on a single actor which",
    "start": "1034000",
    "end": "1039360"
  },
  {
    "text": "means if you overload an actor with so many messages that you cannot realistically process all of them on a",
    "start": "1039360",
    "end": "1045038"
  },
  {
    "text": "single core this actor will become a bottleneck the inbox will overflow you'll start",
    "start": "1045039",
    "end": "1050160"
  },
  {
    "text": "having problems like don't do that design to communicate with the",
    "start": "1050160",
    "end": "1055679"
  },
  {
    "text": "correct actors in the correct way so avoid these bottlenecks in your",
    "start": "1055679",
    "end": "1061120"
  },
  {
    "text": "design now there's a whole bunch of design patterns that you can use petabridge the people who actually are",
    "start": "1061120",
    "end": "1068000"
  },
  {
    "text": "behind aka.net and who provide a lot of training they have a whole course about it",
    "start": "1068000",
    "end": "1074240"
  },
  {
    "text": "basically how you design fan out workloads one of the ideas that you always talk",
    "start": "1074559",
    "end": "1080240"
  },
  {
    "text": "through your parent to your siblings um like consensus patterns um and",
    "start": "1080240",
    "end": "1086240"
  },
  {
    "text": "there's like a single one that i want to highlight because i find it so funny it's the character actor are there any",
    "start": "1086240",
    "end": "1091679"
  },
  {
    "text": "star trek fans here okay so when a celebrity plays along in one of the one of the shows",
    "start": "1091679",
    "end": "1098559"
  },
  {
    "text": "what do they do with them they are the character actors like they they come in",
    "start": "1098559",
    "end": "1103840"
  },
  {
    "text": "they play a role in one or two episodes they arrive at a new planet and they send that guy down",
    "start": "1103840",
    "end": "1109760"
  },
  {
    "text": "because he's not part of main cast so they can afford to lose him he's the character he's in there it's like you",
    "start": "1109760",
    "end": "1116000"
  },
  {
    "text": "send him down do the risky thing oh you died oh sorry all of us are still alive good um",
    "start": "1116000",
    "end": "1121600"
  },
  {
    "text": "so that's what they do in star trek and that's what you should also be doing with your actors if you are going to do",
    "start": "1121600",
    "end": "1126720"
  },
  {
    "text": "something that you find potentially dangerous oh i thought i had like highlighted",
    "start": "1126720",
    "end": "1132960"
  },
  {
    "text": "stuff in there you create a child actor to do that task for you this is your character actor",
    "start": "1132960",
    "end": "1138880"
  },
  {
    "text": "and whether he fails or succeeds doesn't really matter because you can deal with that in the parent without losing your",
    "start": "1138880",
    "end": "1145520"
  },
  {
    "text": "important state so character actors are really together with these supervision",
    "start": "1145520",
    "end": "1151039"
  },
  {
    "text": "strategies or the way that you make your system very resilient",
    "start": "1151039",
    "end": "1156080"
  },
  {
    "text": "now enough chit chat about the whole actor model let me explain to you what",
    "start": "1156320",
    "end": "1161760"
  },
  {
    "start": "1159000",
    "end": "1359000"
  },
  {
    "text": "the problem was that we were solving when we we built this thing now this is what this is what they look",
    "start": "1161760",
    "end": "1168000"
  },
  {
    "text": "like in belgium but i'm pretty sure in denmark they look pretty similar it's my my own electricity gas and water meter",
    "start": "1168000",
    "end": "1174640"
  },
  {
    "text": "in my house what do these devices tell you they give you a number",
    "start": "1174640",
    "end": "1180240"
  },
  {
    "text": "a number the amount of consumption that has been measured on this device",
    "start": "1180240",
    "end": "1188000"
  },
  {
    "text": "since it was product produced at the factory most of the time that matches with",
    "start": "1188000",
    "end": "1194720"
  },
  {
    "text": "the amount of electricity that was measured since it was installed in your house but not even that is always true",
    "start": "1194720",
    "end": "1200640"
  },
  {
    "text": "because these companies they reuse meters and if there have been previous owners i",
    "start": "1200640",
    "end": "1206320"
  },
  {
    "text": "mean what does what does really say what we care about is how much that number changes",
    "start": "1206320",
    "end": "1212400"
  },
  {
    "text": "because that's what we get built for that's the the stuff so we were at an iot company that made",
    "start": "1212400",
    "end": "1218720"
  },
  {
    "text": "devices that connect to these we could read them optically there's also digital versions of all of them then you can",
    "start": "1218720",
    "end": "1224480"
  },
  {
    "text": "just plug a serial device into it that was always really fun as well",
    "start": "1224480",
    "end": "1229679"
  },
  {
    "text": "and what we wanted to do is connect our iot device to these meters and then send the data over the internet to our back",
    "start": "1229679",
    "end": "1236480"
  },
  {
    "text": "end to be processed to be analyzed and to provide insights to the users of our platform",
    "start": "1236480",
    "end": "1244880"
  },
  {
    "text": "so basically what do we want is we want to have",
    "start": "1244880",
    "end": "1250159"
  },
  {
    "text": "the historic user a usage for as long as the device had been connected to the meter",
    "start": "1250159",
    "end": "1256400"
  },
  {
    "text": "we wanted to store that somewhere build some graphs on it put some alerting on it um",
    "start": "1256400",
    "end": "1262960"
  },
  {
    "text": "both momentary thresholds that were exceeded in the consumption as well as like over a longer period of time",
    "start": "1262960",
    "end": "1269520"
  },
  {
    "text": "if you are constantly using a little bit of water it means you have a leak somewhere that's the kind of situations that we were trying to detect",
    "start": "1269520",
    "end": "1277840"
  },
  {
    "text": "now the first thing you have to worry about is readings versus consumption and the reading is the number on the meter but",
    "start": "1278480",
    "end": "1285440"
  },
  {
    "text": "as long as that doesn't change you're not being built so what you really care about is like how much has",
    "start": "1285440",
    "end": "1291120"
  },
  {
    "text": "this number changed over the last five minutes or the last day or so that's the real",
    "start": "1291120",
    "end": "1297120"
  },
  {
    "text": "value that's what you'll you'll get a bill for so from the blue line we have to go to",
    "start": "1297120",
    "end": "1302480"
  },
  {
    "text": "the orange bars we get a certain meter reading but we actually only care about the differences",
    "start": "1302480",
    "end": "1309760"
  },
  {
    "text": "now since the meters don't output that that's one of the things that we had to compute in our backhand",
    "start": "1309760",
    "end": "1315200"
  },
  {
    "text": "because that's the data you actually want to present to the users and thresholds are fun as well because",
    "start": "1315200",
    "end": "1320960"
  },
  {
    "text": "you can have a momentary threshold and everybody agrees with me that at 10 30 we went over the red line and we should",
    "start": "1320960",
    "end": "1327600"
  },
  {
    "text": "raise an alert to the user now if we are talking about a 10 20 minute threshold things get trickier",
    "start": "1327600",
    "end": "1334480"
  },
  {
    "text": "already because the red line is a clear cut case we've been over the consumption for five",
    "start": "1334480",
    "end": "1341200"
  },
  {
    "text": "four blocks in a row we've hit that threshold for the green line it's something else because we haven't been over it for four",
    "start": "1341200",
    "end": "1347760"
  },
  {
    "text": "blocks in a row but we have been over it on average it's not a problem that i can solve for you but that's the kind of business",
    "start": "1347760",
    "end": "1354080"
  },
  {
    "text": "questions that you're gonna get now we tried to build all this kind of stuff but how does akka.net fit into",
    "start": "1354080",
    "end": "1360799"
  },
  {
    "start": "1359000",
    "end": "1580000"
  },
  {
    "text": "this if you look at your typical iot stack and this is like all the azure examples that you will get with it but",
    "start": "1360799",
    "end": "1367120"
  },
  {
    "text": "you can get very similar stuff on other cloud vendors as well you'll basically have three parts um",
    "start": "1367120",
    "end": "1374640"
  },
  {
    "text": "on one side you will have the communication to your devices we built our own because this didn't",
    "start": "1374640",
    "end": "1380240"
  },
  {
    "text": "exist yet um i would recommend that you don't do that like the value you get from iot hub you",
    "start": "1380240",
    "end": "1387360"
  },
  {
    "text": "cannot build that in a better way the things you're going to want to look for in the communication to your devices",
    "start": "1387360",
    "end": "1393120"
  },
  {
    "text": "is presence detection is the device online or not you want to get",
    "start": "1393120",
    "end": "1398480"
  },
  {
    "text": "events from the device to your back end but you also want to send control from your back end to the device",
    "start": "1398480",
    "end": "1405279"
  },
  {
    "text": "and basically all those things are uh authenticating devices stuff like that is in like ready-made solutions it's a",
    "start": "1405600",
    "end": "1411760"
  },
  {
    "text": "solved it's a solved problem you have libraries even for the smallest of micro processors to talk to these backends",
    "start": "1411760",
    "end": "1418960"
  },
  {
    "text": "and then you're going to shape and process the data because everything that comes in is raw you need to do stuff to",
    "start": "1418960",
    "end": "1424240"
  },
  {
    "text": "it so you're going to need some kind of compute power whether it be a kubernetes cluster or service fabric or whatever i",
    "start": "1424240",
    "end": "1430400"
  },
  {
    "text": "mean you're gonna you can do so many things um like process it and store it but you're still not providing",
    "start": "1430400",
    "end": "1436799"
  },
  {
    "text": "value so you're gonna have to send notifications to the user and build dashboards on top of it and stuff like",
    "start": "1436799",
    "end": "1441919"
  },
  {
    "text": "that now what part of it can we use net for is basically everything that we",
    "start": "1441919",
    "end": "1448480"
  },
  {
    "text": "we shape the data and analyze it and and like generate the content of the alerts that is the part that packet.net can do",
    "start": "1448480",
    "end": "1455520"
  },
  {
    "text": "and can help us with it's an alternative to these technologies in this use case right",
    "start": "1455520",
    "end": "1462400"
  },
  {
    "text": "so what did our high-level back-end look like",
    "start": "1462400",
    "end": "1468000"
  },
  {
    "text": "we had an akka.net cluster and from our version of the iot hub we",
    "start": "1468000",
    "end": "1474720"
  },
  {
    "text": "just plug messages off the event stream through a very very simple app service",
    "start": "1474720",
    "end": "1479840"
  },
  {
    "text": "application that relate them to our cluster and basically that application was something we could turn",
    "start": "1479840",
    "end": "1486000"
  },
  {
    "text": "off when we were redeploying the cluster made it a lot easier to handle all that",
    "start": "1486000",
    "end": "1491440"
  },
  {
    "text": "and on top of the cluster we actually had our web portals and our alerting and",
    "start": "1491440",
    "end": "1496480"
  },
  {
    "text": "so on and that all talked to the cluster directly so the cluster was also the",
    "start": "1496480",
    "end": "1502000"
  },
  {
    "text": "gateway to the storage if you wanted to go to the storage you went through the cluster",
    "start": "1502000",
    "end": "1507600"
  },
  {
    "text": "i'm not necessarily sure that i would make that design decision again but it was what we did",
    "start": "1507600",
    "end": "1514240"
  },
  {
    "text": "now if you start thinking about using this it's really funny because in the other room there's a",
    "start": "1514240",
    "end": "1519760"
  },
  {
    "text": "the guard gilmore and eamonn even boyle they're having a talk about",
    "start": "1519760",
    "end": "1525360"
  },
  {
    "text": "what's wrong with our industry and they had a slide about magpie development in there and i had this one in my attack",
    "start": "1525360",
    "end": "1531760"
  },
  {
    "text": "um being a magpie is the bird you have this in denmark as well right it's like the",
    "start": "1531760",
    "end": "1538159"
  },
  {
    "text": "bird that steals the shiny things is not really true but it's the myth",
    "start": "1538159",
    "end": "1544320"
  },
  {
    "text": "that is uh attached to this bird it's like what we developers often do is like oh",
    "start": "1544320",
    "end": "1550880"
  },
  {
    "text": "this shiny new thing i want to use it in my next project whether it is a fit or not so think about if the problem you're",
    "start": "1550880",
    "end": "1557200"
  },
  {
    "text": "you're actually solving benefits from using an actual model and everything that is high throughput",
    "start": "1557200",
    "end": "1563520"
  },
  {
    "text": "stateful systems will benefit from it like gaming backends",
    "start": "1563520",
    "end": "1568720"
  },
  {
    "text": "stock trading systems iot applications um all that type of thing works really well",
    "start": "1568720",
    "end": "1576559"
  },
  {
    "text": "but it'll never be your whole solution you're always going to need things around it",
    "start": "1576559",
    "end": "1582159"
  },
  {
    "start": "1580000",
    "end": "1620000"
  },
  {
    "text": "now i want to show you a couple of uh technical parts of our implementation so",
    "start": "1582159",
    "end": "1588559"
  },
  {
    "text": "that you have a feel for the code and and how you solve certain problems i have four of them i might get through",
    "start": "1588559",
    "end": "1594880"
  },
  {
    "text": "all of them so um what i'm going to talk about is four problems that we had to solve and how we",
    "start": "1594880",
    "end": "1600799"
  },
  {
    "text": "did that inside the actor model and the first is normalizing normalizing our measurements",
    "start": "1600799",
    "end": "1606960"
  },
  {
    "text": "and getting messages to our actor system is a problem that we had to solve how we dealt with persisting data and how we",
    "start": "1606960",
    "end": "1613679"
  },
  {
    "text": "dealt with restarting the applications",
    "start": "1613679",
    "end": "1618799"
  },
  {
    "text": "now normalizing measurements and these meters they are the weirdest",
    "start": "1618799",
    "end": "1626320"
  },
  {
    "start": "1620000",
    "end": "2027000"
  },
  {
    "text": "things and as i told you some of them we read optically so we had a small camera that would actually",
    "start": "1626320",
    "end": "1632799"
  },
  {
    "text": "if you know the last digit of your meter it always has like a reflective dot on it so you can basically glue something",
    "start": "1632799",
    "end": "1639200"
  },
  {
    "text": "on the display and whenever the reflective dot passes you know that it made one iteration",
    "start": "1639200",
    "end": "1645200"
  },
  {
    "text": "so you can use that to guesstimate a little bit how how often the meter",
    "start": "1645200",
    "end": "1650960"
  },
  {
    "text": "spans through but it's it's not completely consistent also the serial ones they didn't have error",
    "start": "1650960",
    "end": "1656399"
  },
  {
    "text": "correction in the serial protocol so sometimes you would get like a flipped bit in there somewhere and you",
    "start": "1656399",
    "end": "1662320"
  },
  {
    "text": "get a huge spike in your measurements and a huge drop and then it would like continue as normal",
    "start": "1662320",
    "end": "1667360"
  },
  {
    "text": "so that's the stuff that we had to deal with only after we had those problems in production of course",
    "start": "1667360",
    "end": "1673919"
  },
  {
    "text": "and so we figured that we needed to normalize data in some way because it's so much easier in all of",
    "start": "1673919",
    "end": "1681120"
  },
  {
    "text": "your business logic code in our problem domain if you know that buckets are exactly",
    "start": "1681120",
    "end": "1687520"
  },
  {
    "text": "every five minutes and they are all exactly on the five minute mark timestamp",
    "start": "1687520",
    "end": "1695120"
  },
  {
    "text": "and if we have missing data because internet connections do go down users do unplug their devices i mean you",
    "start": "1695120",
    "end": "1702640"
  },
  {
    "text": "miss data from time to time um if you have missing data we're gonna",
    "start": "1702640",
    "end": "1707919"
  },
  {
    "text": "fill in the gaps so that you have a continuous stream of measurement data in any downstream actor where we're",
    "start": "1707919",
    "end": "1714960"
  },
  {
    "text": "actually writing business logic and we could do this in every actor but it would be so much easier if we could",
    "start": "1714960",
    "end": "1721760"
  },
  {
    "text": "do that in one place because then we can have like a single algorithm that does all of the normalization for us have",
    "start": "1721760",
    "end": "1728240"
  },
  {
    "text": "that in one place and then not worry about it anymore in the rest of our business logic",
    "start": "1728240",
    "end": "1733919"
  },
  {
    "text": "so if you have raw data i mean there's some of these devices had like a two",
    "start": "1733919",
    "end": "1739440"
  },
  {
    "text": "kilobytes uh like two kilobytes of ram i'm not saying two megabytes i'm saying",
    "start": "1739440",
    "end": "1745760"
  },
  {
    "text": "like two kilobytes so constructing an http request on these devices was",
    "start": "1745760",
    "end": "1751039"
  },
  {
    "text": "already ready complex so a real-time clock just not present",
    "start": "1751039",
    "end": "1757600"
  },
  {
    "text": "so what you'll get is clock drift every couple of hours you go one second off",
    "start": "1757600",
    "end": "1763840"
  },
  {
    "text": "and that that multiplies through time so you need like timestamp correction",
    "start": "1763840",
    "end": "1769919"
  },
  {
    "text": "you need to try and get to these buckets on the right and you need to interpolate values it's not complex i mean this is",
    "start": "1769919",
    "end": "1776640"
  },
  {
    "text": "very very simple interpolation but you have to get from this kind of data to like nice round timestamps and",
    "start": "1776640",
    "end": "1785520"
  },
  {
    "text": "nice round readings we also calculated based on the meter",
    "start": "1785520",
    "end": "1791440"
  },
  {
    "text": "readings we calculated the consumption in that place as well then we had the values that we cared about the",
    "start": "1791440",
    "end": "1796799"
  },
  {
    "text": "consumption and not the readings now once we were doing that",
    "start": "1796799",
    "end": "1802960"
  },
  {
    "text": "how many animations are in the slide okay another problem that once we had",
    "start": "1802960",
    "end": "1809520"
  },
  {
    "text": "those we had the problem of gaps because sometimes you have a certain amount of time that you don't get a",
    "start": "1809520",
    "end": "1815520"
  },
  {
    "text": "reading back and if it's a digital meter it means you can get the accurate reading again",
    "start": "1815520",
    "end": "1822559"
  },
  {
    "text": "as soon as the device comes online again if it's one of those reflective dot things it might have actually like",
    "start": "1822559",
    "end": "1829120"
  },
  {
    "text": "looped through a couple of times while you had the power unplug so you have like a physical disconnect between the readings that are sending and the actual",
    "start": "1829120",
    "end": "1835760"
  },
  {
    "text": "meter that's a worse problem and you cannot solve that in software",
    "start": "1835760",
    "end": "1840639"
  },
  {
    "text": "but at some point you're going to have to fill it in and you have to worry what you're going to do about it and it's very easy it's like okay we",
    "start": "1841360",
    "end": "1848080"
  },
  {
    "text": "have the amount of consumption that we know happened in that period and we have the amount of time",
    "start": "1848080",
    "end": "1854000"
  },
  {
    "text": "that was spent so we can do a number of things to it we can either not fill it at all because",
    "start": "1854000",
    "end": "1860159"
  },
  {
    "text": "we don't know what the correct distribution is so let's like not do it this is probably like the best one",
    "start": "1860159",
    "end": "1866720"
  },
  {
    "text": "but yeah users want to see graphs so and the the the total sum",
    "start": "1866720",
    "end": "1872320"
  },
  {
    "text": "of the consumption has to add up so you can put it in as a peak like a",
    "start": "1872320",
    "end": "1877519"
  },
  {
    "text": "single reading you can put it at the middle or at the start or at the end it doesn't really matter",
    "start": "1877519",
    "end": "1882960"
  },
  {
    "text": "or you can evenly split it into three parts works really well looks really  if you miss a day of data because",
    "start": "1882960",
    "end": "1888640"
  },
  {
    "text": "then you have a day where your consumption is like a flat line that is almost never the reality",
    "start": "1888640",
    "end": "1894559"
  },
  {
    "text": "or you could try and follow a trend line and we did something similar to this what we did was actually more complex",
    "start": "1894559",
    "end": "1900320"
  },
  {
    "text": "than what i can show on this slide we looked at the same time frame of the week before",
    "start": "1900320",
    "end": "1906480"
  },
  {
    "text": "and looked what the trend line looked like in this period and then we adjusted the height of all",
    "start": "1906480",
    "end": "1912000"
  },
  {
    "text": "the bars for the total consumption that we actually knew had happened in our period so that we would have something",
    "start": "1912000",
    "end": "1918240"
  },
  {
    "text": "that looked like last week's consumption during that period which is",
    "start": "1918240",
    "end": "1924640"
  },
  {
    "text": "a good guesstimate it's still wrong all of these are wrong there is no right way to fill it in",
    "start": "1924640",
    "end": "1930240"
  },
  {
    "text": "you have to decide to pick something that works for your problem domain something that you find acceptable",
    "start": "1930240",
    "end": "1936000"
  },
  {
    "text": "something that you can work with it might be important for instance to let your downstream business",
    "start": "1936000",
    "end": "1943360"
  },
  {
    "text": "logic know that this data has been gap-filled because if you know that it has been",
    "start": "1943360",
    "end": "1948559"
  },
  {
    "text": "gap-filled you can make the decision to maybe not raise alerts on it because you know that it's not accurate",
    "start": "1948559",
    "end": "1954240"
  },
  {
    "text": "you might not want to trigger alerts on this system something that can can be done now how we do that in actors",
    "start": "1954240",
    "end": "1961600"
  },
  {
    "text": "is actually not that hard you spawn a child actor that does just this",
    "start": "1961600",
    "end": "1967039"
  },
  {
    "text": "all the measurements from the device from the iot hub they come in and you relay you relay them to this one",
    "start": "1967039",
    "end": "1974559"
  },
  {
    "text": "actor that holds a little bit of state it remembers the last message it remembers the one that the one that",
    "start": "1974559",
    "end": "1980240"
  },
  {
    "text": "comes it gets the one that comes in right now it makes the diff it creates normalized readings if there is a gap",
    "start": "1980240",
    "end": "1987600"
  },
  {
    "text": "of more than five minutes between uh those two then you generate a new one it might be a date and you need to capital",
    "start": "1987600",
    "end": "1994159"
  },
  {
    "text": "you do all of that in this actor and it's children and then what it sends back to its",
    "start": "1994159",
    "end": "2000159"
  },
  {
    "text": "parent actor because that's a very common communication pro pattern that you see in actors is",
    "start": "2000159",
    "end": "2006960"
  },
  {
    "text": "communicate through your parent actor it's like you report back to your parents like this is what i've done here",
    "start": "2006960",
    "end": "2012480"
  },
  {
    "text": "are the normalized values and the normalized values are what the device actor will send on to all of its",
    "start": "2012480",
    "end": "2019039"
  },
  {
    "text": "downstream actors and oh yeah this had high lighting then okay great",
    "start": "2019039",
    "end": "2024240"
  },
  {
    "text": "um but yeah i explained all that so this normalization you do it in one",
    "start": "2024240",
    "end": "2030240"
  },
  {
    "start": "2027000",
    "end": "2373000"
  },
  {
    "text": "place and then it makes writing the rest of your application so much easier so if you work with any kind of data that",
    "start": "2030240",
    "end": "2036880"
  },
  {
    "text": "needs to be cleaned where you know that there are inconsistencies do that it's a pattern that you'll love",
    "start": "2036880",
    "end": "2043279"
  },
  {
    "text": "using now the next problem that we have to solve is like we can build a very nice",
    "start": "2043279",
    "end": "2048638"
  },
  {
    "text": "cluster um an academic cluster but we have to send messages to it because our",
    "start": "2048639",
    "end": "2054480"
  },
  {
    "text": "actors live in there but from the outside we have to get messages to it and i told you earlier that the address",
    "start": "2054480",
    "end": "2060960"
  },
  {
    "text": "that you have in your actor system is important and it's also important because of",
    "start": "2060960",
    "end": "2066919"
  },
  {
    "text": "account.remote account remote is an actor system a way to talk to an actor system from",
    "start": "2066919",
    "end": "2072720"
  },
  {
    "text": "another actor system so what you do as a ch as a client",
    "start": "2072720",
    "end": "2077760"
  },
  {
    "text": "application is you spon you spawn your own uh local actor system",
    "start": "2077760",
    "end": "2083118"
  },
  {
    "text": "where you generate the top level actors and then you have the references and you can talk to your own actors and those will",
    "start": "2083119",
    "end": "2089760"
  },
  {
    "text": "actually use the aka remote package to talk to the other actor system at the other end of the line",
    "start": "2089760",
    "end": "2096079"
  },
  {
    "text": "and the cool thing about this addressing is this is basically the same way that we construct urls in a whole bunch of",
    "start": "2096079",
    "end": "2103359"
  },
  {
    "text": "problems so you have a protocol you have a name of an actor system you have a location",
    "start": "2103359",
    "end": "2109760"
  },
  {
    "text": "where it lists like an ip address with a port and you have the path of the actor you're trying to talk to",
    "start": "2109760",
    "end": "2116560"
  },
  {
    "text": "now this actor path is something that we can use inside an actor",
    "start": "2116560",
    "end": "2122320"
  },
  {
    "text": "reference we can create an actual reference with this and the cool thing about actor references is they have",
    "start": "2122320",
    "end": "2127599"
  },
  {
    "text": "something called location transparency so if you send an actor reference along",
    "start": "2127599",
    "end": "2133280"
  },
  {
    "text": "in a message to another actor even if it lives in another node of your cluster or in a",
    "start": "2133280",
    "end": "2139440"
  },
  {
    "text": "remote actor system the actor reference still works for talking to that actor",
    "start": "2139440",
    "end": "2145040"
  },
  {
    "text": "so you can pass this around inside your cluster and have a reference to talk to the actor and you don't have to know",
    "start": "2145040",
    "end": "2150480"
  },
  {
    "text": "where it lives you just have the actual reference that you can talk to this so this remoting is important but how do",
    "start": "2150480",
    "end": "2157280"
  },
  {
    "text": "we implement that if we want to build a bigger system now the first thing as i said we do is",
    "start": "2157280",
    "end": "2163280"
  },
  {
    "text": "we create a small client actor system where we will have our proxies",
    "start": "2163280",
    "end": "2168320"
  },
  {
    "text": "and if we get a message for a new device we just create a new proxy for it and that proxy will be responsible to talk",
    "start": "2168320",
    "end": "2175200"
  },
  {
    "text": "to our main actor system our remote actor system",
    "start": "2175200",
    "end": "2180240"
  },
  {
    "text": "so that proxy upon startup will send a message to the other side and ask like",
    "start": "2180240",
    "end": "2186160"
  },
  {
    "text": "hey do you have a device actor for this device id that i just got",
    "start": "2186160",
    "end": "2191599"
  },
  {
    "text": "and either it will get created or the device orchestrator will already have one",
    "start": "2191599",
    "end": "2197280"
  },
  {
    "text": "and it will send a quick reply back like okay here is the actor reference to talk to that device actor that i either just",
    "start": "2197280",
    "end": "2204400"
  },
  {
    "text": "created or that was already there right and from then on this proxy can just",
    "start": "2204400",
    "end": "2210240"
  },
  {
    "text": "talk to that actor directly to the specific device actor it",
    "start": "2210240",
    "end": "2215280"
  },
  {
    "text": "doesn't have to go through the device manager remember that i told you about these bottleneck actors this is how you",
    "start": "2215280",
    "end": "2220720"
  },
  {
    "text": "avoid them and everything that gets relayed of the stream uh can just be sent through",
    "start": "2220720",
    "end": "2228320"
  },
  {
    "text": "through the proxy directly to the device actor and we can do that",
    "start": "2228320",
    "end": "2233839"
  },
  {
    "text": "there is there's a bit of code and there's a couple of bits that i want to show you in here is first of all",
    "start": "2233839",
    "end": "2239599"
  },
  {
    "text": "we have something called pre-start and that is code that is handled in the actor before it actually accepts its",
    "start": "2239599",
    "end": "2244960"
  },
  {
    "text": "first message of the inbox so if your actor needs to do stuff before it actually does anything else",
    "start": "2244960",
    "end": "2251520"
  },
  {
    "text": "you can use things like pre-start and if you want to create uh talk to an actor based on um",
    "start": "2251520",
    "end": "2260320"
  },
  {
    "text": "based on something else um i lost something here",
    "start": "2260640",
    "end": "2266560"
  },
  {
    "text": "oh yeah if you want to do an and selection based on an address and you don't have the actor reference yeah you",
    "start": "2266560",
    "end": "2271920"
  },
  {
    "text": "can do an actor selection for a certain path and it will give you a selection back that you can actually also tell",
    "start": "2271920",
    "end": "2280240"
  },
  {
    "text": "um and then if we get the connected confirmation back from the other side we",
    "start": "2280240",
    "end": "2285680"
  },
  {
    "text": "just store the device reference from the other side in a rector and we can continue with that",
    "start": "2285680",
    "end": "2292400"
  },
  {
    "text": "now you might have noticed that we are using the receive actor now and this is a much more",
    "start": "2292400",
    "end": "2297760"
  },
  {
    "text": "convenient way to build actors because they are strongly typed regarding of the messages that come in",
    "start": "2297760",
    "end": "2303280"
  },
  {
    "text": "and you map them in the constructor by uh or any other method by imp calling on the receive",
    "start": "2303280",
    "end": "2311040"
  },
  {
    "text": "and then that function will get called if a message from that type comes in it makes much cleaner actors",
    "start": "2311040",
    "end": "2316800"
  },
  {
    "text": "and a trick i always use because i remember remember that i told you that the props",
    "start": "2316800",
    "end": "2323920"
  },
  {
    "text": "are basically a constructor pointer the tricky thing is if you create props",
    "start": "2323920",
    "end": "2329599"
  },
  {
    "text": "you have to like pass the right parameters of the right type to your create props method",
    "start": "2329599",
    "end": "2336320"
  },
  {
    "text": "what i always do is i create a static method for every actor that has the same parameters as the constructor of that",
    "start": "2336320",
    "end": "2342480"
  },
  {
    "text": "actor and every time i use it in another place in my code to spawn an instance of that",
    "start": "2342480",
    "end": "2348640"
  },
  {
    "text": "actor i use that createprops method that way if i'm refactoring and i add a",
    "start": "2348640",
    "end": "2355119"
  },
  {
    "text": "parameter to the constructor all of the code breaks actorprops.create will not break because",
    "start": "2355119",
    "end": "2360880"
  },
  {
    "text": "it just takes a params array of objects and yeah i mean so that's something i always do",
    "start": "2360880",
    "end": "2368560"
  },
  {
    "text": "this is like the devices actor the device manager it will just create it i'm going to skip over this real quick",
    "start": "2368560",
    "end": "2376079"
  },
  {
    "start": "2373000",
    "end": "2820000"
  },
  {
    "text": "now are we on time we're good we're good",
    "start": "2376079",
    "end": "2381200"
  },
  {
    "text": "persisting data because up to now we've been speaking about actors that live in memory that have their own state that do",
    "start": "2381200",
    "end": "2387280"
  },
  {
    "text": "all these um cool things um but what do we do if we recycle the process",
    "start": "2387280",
    "end": "2393119"
  },
  {
    "text": "there's always data that you don't want to don't want to lose stuff that needs to get persisted",
    "start": "2393119",
    "end": "2400320"
  },
  {
    "text": "now aka.net has a built-in persistent model that is basically event sourced",
    "start": "2400320",
    "end": "2407520"
  },
  {
    "text": "so you're not storing the state as such you're basically storing the messages that's safe that",
    "start": "2407520",
    "end": "2414079"
  },
  {
    "text": "mutate your state and it's not really that complex to do",
    "start": "2414079",
    "end": "2420800"
  },
  {
    "text": "all you have to remember is that in the storage technology that you choose to use there will always be an id that",
    "start": "2420800",
    "end": "2427119"
  },
  {
    "text": "identifies your specific actor and that needs to be unique and if events come in you can just",
    "start": "2427119",
    "end": "2433680"
  },
  {
    "text": "persist them and they will get replayed when the actor starts up again so if you",
    "start": "2433680",
    "end": "2440000"
  },
  {
    "text": "create an actor that inherits from the persistent actor it will actually query the underlying",
    "start": "2440000",
    "end": "2447359"
  },
  {
    "text": "event stored database to get all the messages that should be played back on the actor before it actually starts",
    "start": "2447359",
    "end": "2453599"
  },
  {
    "text": "accepting stuff on the on the mbx in the in on the inbox sorry",
    "start": "2453599",
    "end": "2459599"
  },
  {
    "text": "so what does that look like you can do the receive persistent actor and you have a persistence id that's the easy",
    "start": "2459599",
    "end": "2466000"
  },
  {
    "text": "part what i also always do is i group all my state",
    "start": "2466000",
    "end": "2471280"
  },
  {
    "text": "into a state objects so that i can basically mutate the state",
    "start": "2471280",
    "end": "2476800"
  },
  {
    "text": "by calling methods on that state it makes snapshotting so much easier because if you also have a snapshot",
    "start": "2476800",
    "end": "2483599"
  },
  {
    "text": "mechanism where you can persist the entire state to your snapshot store so",
    "start": "2483599",
    "end": "2488960"
  },
  {
    "text": "that when you recover after a reboot you can just get your snapshot and then replay the messages",
    "start": "2488960",
    "end": "2494560"
  },
  {
    "text": "since the snapshot makes it much easier to do that as well",
    "start": "2494560",
    "end": "2500318"
  },
  {
    "text": "now instead of receive we now have things like command and recover commands are things that are coming from the",
    "start": "2500720",
    "end": "2506319"
  },
  {
    "text": "inbox and recover our messages that come from the underlying event store so these",
    "start": "2506319",
    "end": "2511359"
  },
  {
    "text": "are messages that you stored in the past that were replayed on the previous instance of this actor and that are now",
    "start": "2511359",
    "end": "2517599"
  },
  {
    "text": "being replayed to recreate and you can map them to different methods the reason that that is important is you don't want",
    "start": "2517599",
    "end": "2524319"
  },
  {
    "text": "to call persist on a recover message if it's already coming from your",
    "start": "2524319",
    "end": "2529760"
  },
  {
    "text": "persistent event store you don't want to persist it again because that will create loops every time you you restart",
    "start": "2529760",
    "end": "2535280"
  },
  {
    "text": "your rectors so in the command you will persist it",
    "start": "2535280",
    "end": "2540400"
  },
  {
    "text": "and then it will call the underlying method the internal one that actually mutates the state",
    "start": "2540400",
    "end": "2546640"
  },
  {
    "text": "but under recover you're only gonna call the state mutation and not persist it again",
    "start": "2546640",
    "end": "2552880"
  },
  {
    "text": "and you can snapshot every 100 messages or whatever mechanism you choose you're in full control there",
    "start": "2552880",
    "end": "2560960"
  },
  {
    "text": "now if you have if you do all this you can make very very quick",
    "start": "2560960",
    "end": "2566720"
  },
  {
    "text": "decisions about which messages need to be persisted in your",
    "start": "2566720",
    "end": "2572160"
  },
  {
    "text": "in your store and basically it's all the ones that will change your state",
    "start": "2572160",
    "end": "2577599"
  },
  {
    "text": "you often have message types that don't change your state like every query",
    "start": "2577599",
    "end": "2582640"
  },
  {
    "text": "to an actor about its state is often something that doesn't need to be persisted",
    "start": "2582640",
    "end": "2587839"
  },
  {
    "text": "and that's why they give you full control you can persist ones that really matter",
    "start": "2587839",
    "end": "2593520"
  },
  {
    "text": "now the snapshots that's the first thing you get back you get a snapshot offer back",
    "start": "2593520",
    "end": "2599359"
  },
  {
    "text": "and your state object is in there so as i said if you group everything into a state object it's very easy you will",
    "start": "2599359",
    "end": "2606319"
  },
  {
    "text": "never forget any fields that you need to persist so that's how i always deal with",
    "start": "2606319",
    "end": "2611359"
  },
  {
    "text": "persistent actors you can deal because saving a snapshot is",
    "start": "2611359",
    "end": "2617359"
  },
  {
    "text": "something that happens asynchronously so you can deal with the success or the failure of your snapshot",
    "start": "2617359",
    "end": "2623119"
  },
  {
    "text": "as well now how do we apply this in in the bigger scheme of things because",
    "start": "2623119",
    "end": "2628560"
  },
  {
    "text": "persisting actors is a very good idea it's like we're going to safe our state what you cannot",
    "start": "2628560",
    "end": "2634560"
  },
  {
    "text": "do is persist all your actors because that will make your system terribly slow because everything has to go to storage",
    "start": "2634560",
    "end": "2642800"
  },
  {
    "text": "so what i always do is try and figure like what is the route of the stuff that",
    "start": "2642800",
    "end": "2648880"
  },
  {
    "text": "i'm persisting here and i have one persistent actor in that hierarchy and for us it was for a",
    "start": "2648880",
    "end": "2654240"
  },
  {
    "text": "single device a single meter we wanted to persist the message stream and all the other actors that needed",
    "start": "2654240",
    "end": "2663838"
  },
  {
    "text": "data from it would actually use that one now there's two types of data that you have",
    "start": "2664160",
    "end": "2670560"
  },
  {
    "text": "to think about there is operational data like the data that you need to actually keep your system running for us it was",
    "start": "2670560",
    "end": "2676720"
  },
  {
    "text": "the window that we wanted to look at for our alerting typically like a day or maybe a week",
    "start": "2676720",
    "end": "2682960"
  },
  {
    "text": "worth of data you don't want to keep all data for all eternity in memory it doesn't really",
    "start": "2682960",
    "end": "2688079"
  },
  {
    "text": "make sense it's not the graph that the user usually looks at they want to see like how is my",
    "start": "2688079",
    "end": "2693359"
  },
  {
    "text": "consumption today and occasionally they will swipe back and look at yesterday's or like last weeks or last",
    "start": "2693359",
    "end": "2700480"
  },
  {
    "text": "months or less years but there's no reason to keep all that in hot storage you want to put that in cold storage",
    "start": "2700480",
    "end": "2706640"
  },
  {
    "text": "so you'll basically have two act uh two ways of dealing with that data you have one actor that basically persists your",
    "start": "2706640",
    "end": "2714720"
  },
  {
    "text": "code data to some kind of storage outside of your actor system typically a database or or whatever",
    "start": "2714720",
    "end": "2721359"
  },
  {
    "text": "and then you have one and then you use the built-in aka persistence to keep a trimmed down version of the",
    "start": "2721359",
    "end": "2728480"
  },
  {
    "text": "state that you actually need to run your data like your hot data and that will actually get recovered",
    "start": "2728480",
    "end": "2734480"
  },
  {
    "text": "when you restart the actor system but all the cold storage is just gonna live in the database until it's queried",
    "start": "2734480",
    "end": "2740640"
  },
  {
    "text": "and that's a trade-off because all of these actors they do live in ram so if you",
    "start": "2740640",
    "end": "2746480"
  },
  {
    "text": "this truncation of of your operational data is something you really need to worry about as soon as you go to",
    "start": "2746480",
    "end": "2751599"
  },
  {
    "text": "millions of devices because that's every kilobyte that you have for every devices is going to hurt you and going",
    "start": "2751599",
    "end": "2757040"
  },
  {
    "text": "to cost a lot of money cloud vendors ram is typically like the most expensive storage that you can get",
    "start": "2757040",
    "end": "2764960"
  },
  {
    "text": "so when these normalized meter readings come in on our device actor um",
    "start": "2764960",
    "end": "2770319"
  },
  {
    "text": "we forward them to the value storage and the value storage is typically a",
    "start": "2770319",
    "end": "2775520"
  },
  {
    "text": "persistent actor this is our hot data right so it will persist the message",
    "start": "2775520",
    "end": "2781119"
  },
  {
    "text": "and do a periodic snapshot it will also truncate its own state based on the",
    "start": "2781119",
    "end": "2786240"
  },
  {
    "text": "window that we defined right but what it will also do is it will offload anything that hasn't been",
    "start": "2786240",
    "end": "2792160"
  },
  {
    "text": "persisted to cold storage periodically to a child or actor again where it can be stored in the historic",
    "start": "2792160",
    "end": "2800400"
  },
  {
    "text": "yeah measurement database so we can allow users to keep their data for all eternity it will just cost us a lot less",
    "start": "2800400",
    "end": "2807440"
  },
  {
    "text": "than ram um and because these all live in the hierarchy we can just query that data",
    "start": "2807440",
    "end": "2814640"
  },
  {
    "text": "through that actor if we want to it's just not going to live in memory",
    "start": "2814640",
    "end": "2821119"
  },
  {
    "start": "2820000",
    "end": "2963000"
  },
  {
    "text": "now we have one actor that stores everything but as you can imagine",
    "start": "2821839",
    "end": "2827440"
  },
  {
    "text": "you're going to have actors that are calculating and generating alerts they need data so if the system gets",
    "start": "2827440",
    "end": "2834319"
  },
  {
    "text": "restarted they might wanna re-query their own window of operation right if we're defining an alert",
    "start": "2834319",
    "end": "2842079"
  },
  {
    "text": "that needs like an hour of measurements to trigger in a large condition yeah we're gonna have to get that data to that",
    "start": "2842079",
    "end": "2848640"
  },
  {
    "text": "actor and if we make all of them persistent as i just said that's not a good idea",
    "start": "2848640",
    "end": "2854800"
  },
  {
    "text": "so what we want to do is when our system restarts we want to create",
    "start": "2854800",
    "end": "2862720"
  },
  {
    "text": "um actors for all of our devices that we know about and like re rebuild",
    "start": "2862720",
    "end": "2869200"
  },
  {
    "text": "our cache of memory for all of them so it's ideal to have like one",
    "start": "2869200",
    "end": "2874400"
  },
  {
    "text": "persistent actor but we're gonna need so many other actors that are actually doing stuff with that data so on startup they",
    "start": "2874400",
    "end": "2881280"
  },
  {
    "text": "will all query the persisted actor through the parent and they will query that data and as",
    "start": "2881280",
    "end": "2887760"
  },
  {
    "text": "soon as the persisted actor has actually restored its state because that's how they work they do",
    "start": "2887760",
    "end": "2893680"
  },
  {
    "text": "that first they can start accepting inbox messages and they can reply with the data that the other actor needs to",
    "start": "2893680",
    "end": "2899680"
  },
  {
    "text": "start doing its job and since that are because the the actors and your own children by default",
    "start": "2899680",
    "end": "2906640"
  },
  {
    "text": "they spawn on the same note so you'll be on the same machine they'll be bloody fast to query that data and pass it",
    "start": "2906640",
    "end": "2912160"
  },
  {
    "text": "around between the actors there's only a single one that actually reads from your storage your underlying storage",
    "start": "2912160",
    "end": "2918960"
  },
  {
    "text": "technology so it will create its children and the storage actor will actually",
    "start": "2918960",
    "end": "2925440"
  },
  {
    "text": "query the underlying store and all the other ones will just request it and the storage actor will reply and",
    "start": "2925440",
    "end": "2932559"
  },
  {
    "text": "that's how you build a new a system after a reboot or a crash or whatever",
    "start": "2932559",
    "end": "2938640"
  },
  {
    "text": "usually it never crashed it was always on a redeploy that we were facing this scenario",
    "start": "2938640",
    "end": "2945200"
  },
  {
    "text": "already out of time i thought it was one hour no oh",
    "start": "2947280",
    "end": "2952800"
  },
  {
    "text": "i'm sorry so i'm standing between you and lunch i'm so sorry about that",
    "start": "2952800",
    "end": "2958720"
  },
  {
    "text": "okay i have like two minutes to wrap up yes okay so i'm gonna",
    "start": "2958720",
    "end": "2965200"
  },
  {
    "start": "2963000",
    "end": "3052000"
  },
  {
    "text": "so there's a lot of things that we didn't talk about today um configuration management um how you set up your",
    "start": "2965200",
    "end": "2971599"
  },
  {
    "text": "cluster how you deal with logging and all of that and dependency injection although it's",
    "start": "2971599",
    "end": "2977200"
  },
  {
    "text": "an andy pattern is something you can also do there are so many things that you need to do when you bring a system",
    "start": "2977200",
    "end": "2982880"
  },
  {
    "text": "like this to production i have a whole workshop about that if you want there's also great information out there",
    "start": "2982880",
    "end": "2989599"
  },
  {
    "text": "i mean the people at petabridge have an amazing blog and a free a free boot camp that you can take on",
    "start": "2989599",
    "end": "2996400"
  },
  {
    "text": "github there are some courses on pluralsight they blog about everything that they",
    "start": "2996400",
    "end": "3002240"
  },
  {
    "text": "make every new feature so a lot of the info is just ready and out there if you're willing to look for it",
    "start": "3002240",
    "end": "3009359"
  },
  {
    "text": "if you're still stuck or your team wants to start doing this they offer paid training as well and it is really good",
    "start": "3009680",
    "end": "3015040"
  },
  {
    "text": "because you will get trained by the people who actually built the thing so that's that's amazing",
    "start": "3015040",
    "end": "3020240"
  },
  {
    "text": "and deployment is also something you need to worry about because at the moment that you redeploy your cluster",
    "start": "3020240",
    "end": "3026720"
  },
  {
    "text": "because of a new release or whatever all your actors will get torn down will",
    "start": "3026720",
    "end": "3032240"
  },
  {
    "text": "get recreated and that's something you have to plan for so usually you will stop your message",
    "start": "3032240",
    "end": "3037359"
  },
  {
    "text": "stream redeploy and restart the message stream after everything uh has been",
    "start": "3037359",
    "end": "3042400"
  },
  {
    "text": "created automate that like don't leave that to chance with manual steps because the",
    "start": "3042400",
    "end": "3048000"
  },
  {
    "text": "junior will always forget to do one of them um i think that's it like my conclusion is",
    "start": "3048000",
    "end": "3055040"
  },
  {
    "start": "3052000",
    "end": "3077000"
  },
  {
    "text": "very easy it's like first check if your problem domain is fit for actors and decide what part of the solution you're",
    "start": "3055040",
    "end": "3060480"
  },
  {
    "text": "going to use it for design your hierarchy in a way that you don't have bottlenecks and with the the",
    "start": "3060480",
    "end": "3066079"
  },
  {
    "text": "right communication patterns and normalizing your data will help you a lot if you're building a system like",
    "start": "3066079",
    "end": "3072079"
  },
  {
    "text": "this think about your deployment think about how it will handle recycle my name is honest i work for a company called",
    "start": "3072079",
    "end": "3078400"
  },
  {
    "start": "3077000",
    "end": "3106000"
  },
  {
    "text": "access in belgium this is my twitter handle and my icq number make icq great again",
    "start": "3078400",
    "end": "3084559"
  },
  {
    "text": "you can find the code samples on github um i'm gonna clear out but if you have",
    "start": "3084559",
    "end": "3090559"
  },
  {
    "text": "questions you're more than welcome to come and talk to me [Applause]",
    "start": "3090559",
    "end": "3100110"
  }
]