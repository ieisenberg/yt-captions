[
  {
    "text": "(enlightening music)",
    "start": "418",
    "end": "3501"
  },
  {
    "text": "(audience claps) - Thank you. Can you hear me? Okay, yeah.",
    "start": "9411",
    "end": "14839"
  },
  {
    "text": "Welcome everybody, thank\nyou for joining me today. First of all, remember\nto join the conversation",
    "start": "14839",
    "end": "21186"
  },
  {
    "text": "in Twitter, #gotocph. Remember to engage so you can rate",
    "start": "21186",
    "end": "26689"
  },
  {
    "text": "my actual session and ask questions. My name is Israel Ferrer Camacho.",
    "start": "26689",
    "end": "31727"
  },
  {
    "text": "I'm an Android developer at Twitter. You can follow me on Twitter too, and ask me questions there too.",
    "start": "31727",
    "end": "37665"
  },
  {
    "text": "I work on the Moments teams which is a nice experience, fullscreen experience",
    "start": "37665",
    "end": "43875"
  },
  {
    "text": "horizontal scrolling where you can add a list of tweets, and it's a story.",
    "start": "43875",
    "end": "49253"
  },
  {
    "text": "It doesn't have to be following\na chronological order there. For those who are not an\nEnglish native speaker as me,",
    "start": "51185",
    "end": "60235"
  },
  {
    "text": "smoke and mirrors is an expression used to describe something that is obscuring or embellishing the truth.",
    "start": "62070",
    "end": "68657"
  },
  {
    "text": "It's usually used for\nmagicians because they do magic which is simply not real.",
    "start": "69877",
    "end": "75571"
  },
  {
    "text": "It's just a trick, just so you know. Sorry if I spoil you guys.",
    "start": "75571",
    "end": "79284"
  },
  {
    "text": "The reason for this title was in the last Google I/O\nduring the RecyclerView talk,",
    "start": "81741",
    "end": "87900"
  },
  {
    "text": "where Adam Powell and Yigit Boyar, by Adam Power and Yigit Boyar. Adam Powell actually\nstarted the talk by saying",
    "start": "87900",
    "end": "96508"
  },
  {
    "text": "UI developers, we have a\nlot of things in common",
    "start": "96508",
    "end": "100508"
  },
  {
    "text": "with magicians, and that is actually true. If you think about some of\nthe animations that we do,",
    "start": "101869",
    "end": "108411"
  },
  {
    "text": "and some of the components\nthat we use in the framework, and that's the idea of this talk. I'm gonna be showing some\nexamples in the Android framework",
    "start": "108412",
    "end": "116217"
  },
  {
    "text": "or where we are using\nthis smoke and mirrors to make an application just\ngreat, flawless, and smooth.",
    "start": "116218",
    "end": "122505"
  },
  {
    "text": "After that I will start\ntalking about one of my favorite apps in Android,\nand how that experience",
    "start": "124567",
    "end": "130707"
  },
  {
    "text": "is actually built, and I\nwill do a demo with that. So let's just start with\nthe Android framework.",
    "start": "130707",
    "end": "139030"
  },
  {
    "text": "So these are Timeline. Hopefully you know what is Twitter. So theoretically, anytime\nlike you have infinite tweets,",
    "start": "139030",
    "end": "147648"
  },
  {
    "text": "as you can see we're\nscrolling really fast, performance's really good by the way, so it is a problem right?",
    "start": "149527",
    "end": "155831"
  },
  {
    "text": "The problem is we have\ninfinite amount of views that we wanna show but we have limitation.",
    "start": "158557",
    "end": "165183"
  },
  {
    "text": "We cannot just instantiate\nthousands of views at the same time. Actually, what we have really do is",
    "start": "165183",
    "end": "171702"
  },
  {
    "text": "which is need to do this. We are showing one, two, three,\nfour views in the screen. We don't need to actually show any",
    "start": "174695",
    "end": "182076"
  },
  {
    "text": "or instantiate any order view. Just five at the same\ntime, seven, eight tops",
    "start": "182076",
    "end": "187247"
  },
  {
    "text": "if the tweets are really small but Jake likes to talk a\nlot so they're just big.",
    "start": "187247",
    "end": "192964"
  },
  {
    "text": "So, anyway how we do that? We use this component called RecyclerView, the name will give you a hint of",
    "start": "192964",
    "end": "199621"
  },
  {
    "text": "what it's actually doing,\nwhich is recycling. I wanna talk about it,\nhow internally works",
    "start": "199621",
    "end": "204762"
  },
  {
    "text": "because I think it's interesting. Internally, it has the\nlinear LayoutManager, which actually recycles,",
    "start": "204762",
    "end": "211204"
  },
  {
    "text": "which actually is\nresponsible for measuring and positioning the item views, and as well as determining\nwhen to recycle those views",
    "start": "212120",
    "end": "219958"
  },
  {
    "text": "that are not shown anymore. So when you try to actually\nshow the next position,",
    "start": "219958",
    "end": "225806"
  },
  {
    "text": "the LayoutManager is gonna\ngo to the RecyclerView, and invoke the method getViewForPosition.",
    "start": "225806",
    "end": "231731"
  },
  {
    "text": "When that's called, RecyclerView\nwill go to the Adapter, and will ask for the type of that view",
    "start": "231731",
    "end": "239728"
  },
  {
    "text": "because you can have many types of views in your RecyclerView so example if you want to have\ndifferent headers or you want",
    "start": "239729",
    "end": "246321"
  },
  {
    "text": "to have a cutout so for\nshowing ads for example, okay. So yeah, we get the type\nthe RecyclerView is gonna",
    "start": "246321",
    "end": "252947"
  },
  {
    "text": "go to the RecyclePool,\nwhich is where all the views",
    "start": "252947",
    "end": "257114"
  },
  {
    "text": "that ViewHolders that we can recycle. It will get a ViewHolder for that type. If there is none, it\nwill go the the Adapter",
    "start": "258081",
    "end": "265398"
  },
  {
    "text": "and then create one. But if there is one, it would just send it back to the Adapter and say hey,",
    "start": "265398",
    "end": "270939"
  },
  {
    "text": "can you find this\nViewHolder with a new data, with a data for that new\nposition that we wanna show,",
    "start": "270939",
    "end": "277206"
  },
  {
    "text": "the one that was showing on the animation. Once it holds the information,\nit just return it back",
    "start": "277206",
    "end": "284065"
  },
  {
    "text": "to the RecyclerView, and\nthen the LayoutManager will actually lay it out in\nthe screen, that item.",
    "start": "284065",
    "end": "289353"
  },
  {
    "text": "This is a really simple\nexplanation of how the RecyclerView actually recycles views,\nand you can learn a lot more",
    "start": "289353",
    "end": "297039"
  },
  {
    "text": "in the Google I/O talk\nthat I was talking about, the one that inspired this talk. It's called RecyclerView Ins and Outs,",
    "start": "300466",
    "end": "307537"
  },
  {
    "text": "and they talk a lot more\nabout how to animate items, and do transitions in between the states.",
    "start": "307537",
    "end": "315552"
  },
  {
    "text": "Another example on the\nAndroid framework is this one that I'm showing in the Twitter app.",
    "start": "315552",
    "end": "321177"
  },
  {
    "text": "As you can see, there is a list of images, and when you click one with\ntransition to fullscreen.",
    "start": "322155",
    "end": "327383"
  },
  {
    "text": "Those are called Shared\nElement Transitions. Shared Element Transitions,\nthey have smoke and mirrors too",
    "start": "327383",
    "end": "333594"
  },
  {
    "text": "but first let's dig in on how it works. The way it works is the activity\nhas an activity transition",
    "start": "333594",
    "end": "340916"
  },
  {
    "text": "a state which persists a\nstate of that transition, and it has like the most\nimportant part is the shared views",
    "start": "340916",
    "end": "349612"
  },
  {
    "text": "that are gonna be transitioning\nfrom one screen to another. When activity life cycle\nis invoked, for example",
    "start": "349612",
    "end": "357860"
  },
  {
    "text": "it goes through onDestroy, or\nonPause so it's disappearing,",
    "start": "357860",
    "end": "362026"
  },
  {
    "text": "and then we are gonna\nstart a new activity, it will call the activity\ntransition state to start",
    "start": "364589",
    "end": "372814"
  },
  {
    "text": "a new transition which\nwill actually call to the activity transition coordinator. The ActivityTransitionCoordinator\nis a base class.",
    "start": "372814",
    "end": "381238"
  },
  {
    "text": "There are actually two. There is entering and exiting coordinator, so one handles the enter transition,",
    "start": "383205",
    "end": "390020"
  },
  {
    "text": "and one the exit transition, and that has a transition manager,",
    "start": "390020",
    "end": "395938"
  },
  {
    "text": "and it will begin the transition. So by the default the\ntransition is a translation",
    "start": "395938",
    "end": "402151"
  },
  {
    "text": "but you can change that on your theme, and you can actually customize your own transitions between activities.",
    "start": "404271",
    "end": "410132"
  },
  {
    "text": "But you must be thinking,\nyou're talking a lot about how this works but what is\nthe actual smoke and mirrors",
    "start": "410132",
    "end": "415488"
  },
  {
    "text": "in transition in the shared elements. Well, think about it. When an activity is being, going to hide",
    "start": "415488",
    "end": "422837"
  },
  {
    "text": "or to the background, and\nanother one comes in the top, how they are actually\nre-enabled to do that transition",
    "start": "424030",
    "end": "431125"
  },
  {
    "text": "from one to another. Well what they do is they\nhide the target activity,",
    "start": "431125",
    "end": "437053"
  },
  {
    "text": "and they have a list of the\nviews that are transitioning from what position they are transitioned",
    "start": "437053",
    "end": "442664"
  },
  {
    "text": "so they pretty much in any\nactivity do that transition, that's what they are doing. How they do that, well,\nthey use ViewOverlay,",
    "start": "442664",
    "end": "451273"
  },
  {
    "text": "which is used by the default\ntransition in the framework. ViewOverlay provides a transparent layer",
    "start": "452343",
    "end": "459114"
  },
  {
    "text": "on the top of a view, to which you can add any\ntype of visual content,",
    "start": "459114",
    "end": "464533"
  },
  {
    "text": "(mumbles), and that doesn't affect the layer hidden (mumbles)\non the top so that means",
    "start": "464533",
    "end": "469687"
  },
  {
    "text": "that you can pretty much animate anything, and it just works and doesn't mess with",
    "start": "469687",
    "end": "474765"
  },
  {
    "text": "the layer hierarchy, it's great. It's gonna be your best friend\nforever in animations, okay. Think about that, that\nword of what I said.",
    "start": "474765",
    "end": "482419"
  },
  {
    "text": "So let's imagine this, you\ncan see there is two layers. There is the LinearLayout\nwhich has a nice image view",
    "start": "482419",
    "end": "489628"
  },
  {
    "text": "with a Saturn illustration, and then this is the ViewOverlay.",
    "start": "489628",
    "end": "494932"
  },
  {
    "text": "In order to make an animation, I'm gonna add that to the ViewOverlay. How do I do that? Well LinearLayout, any view has that,",
    "start": "494932",
    "end": "501750"
  },
  {
    "text": "LinearLayout, getOverlay, and\nthen you add to that overlay. What is gonna happen is\nthat suddenly that ImageView",
    "start": "501750",
    "end": "510289"
  },
  {
    "text": "is not gonna be part of\nthe LinearLayout anymore. It's gonna be in this\ntemporary ViewOverlay",
    "start": "510289",
    "end": "515969"
  },
  {
    "text": "that we're gonna use for animations. When you do that, the\nrect of that ImageView is",
    "start": "515969",
    "end": "521895"
  },
  {
    "text": "invalidated in the parent\nso that force a re-layout so you have to be careful\nif you depend on that view.",
    "start": "522756",
    "end": "528669"
  },
  {
    "text": "Otherwise you will mess\nthe whole hierarchy. But the good thing is, any\ntype of touch or animation,",
    "start": "528669",
    "end": "535096"
  },
  {
    "text": "touch depend on animation,\nit gets delegated to that ViewOverlay with that ImageView. So if you are actually,\nimagine you have a reference",
    "start": "535096",
    "end": "541761"
  },
  {
    "text": "to this ImageView, and\nyou try to do animation, it will animate even if it's not part of the LinearLayout anymore,\nwhich in this case",
    "start": "541761",
    "end": "548222"
  },
  {
    "text": "is part of the ViewOverlay.",
    "start": "548222",
    "end": "550472"
  },
  {
    "text": "So unfortunately, shared element\ntransitions are real nice but there are limitations.",
    "start": "554175",
    "end": "560956"
  },
  {
    "text": "The first one is that\nthe user can't control the transition with a touch. It just an simple animation\nfrom one place to another",
    "start": "560956",
    "end": "569677"
  },
  {
    "text": "so the eye of the user gets caught, and doesn't lose the\ncontext between the screens but it doesn't allow the user for example",
    "start": "569677",
    "end": "576659"
  },
  {
    "text": "to pinch and zoom, and\ncontrol the transition with a pinch and zoom, right. So that's a limitation.",
    "start": "576659",
    "end": "582683"
  },
  {
    "text": "Another limitation is that one, actually when I was doing\nthe code, I saw that here.",
    "start": "582683",
    "end": "588806"
  },
  {
    "text": "The transition doesn't\ntrack the target destination so if you don't eat all the touch events",
    "start": "588806",
    "end": "595048"
  },
  {
    "text": "while the transition is\nrunning, it looks terrible and it's just a limitation.",
    "start": "595048",
    "end": "601035"
  },
  {
    "text": "I mean, we can simply fix that by using this TransitionListener.",
    "start": "601035",
    "end": "608440"
  },
  {
    "text": "Thankfully, we can hear\nall the life cycle events of the transition so what we\ncan do is onTransitionStart,",
    "start": "608440",
    "end": "615130"
  },
  {
    "text": "we are just gonna eat all the\ntouch events, pretty much. Then when the transition\nfinishes, we'll just set the",
    "start": "615130",
    "end": "624110"
  },
  {
    "text": "touch listener again to the right place. Easier right? Okay, so before entering\ninto the interesting part",
    "start": "624110",
    "end": "633136"
  },
  {
    "text": "of the talk, which is the demo, let's talk about two important\nattributes for an image.",
    "start": "633136",
    "end": "640189"
  },
  {
    "text": "Consistently these are the\nattributes that are actually might as well be thought type of",
    "start": "640189",
    "end": "645404"
  },
  {
    "text": "rendering outside the parent. So first of all is the ClipChildren.",
    "start": "645404",
    "end": "652011"
  },
  {
    "text": "The ClipChildren attribute\nis an attribute of a ViewGroup and by default is set to true, which makes sense because\nit clips the children",
    "start": "652012",
    "end": "659576"
  },
  {
    "text": "to the bounds of the parent ViewGroup, and that's exactly what we want right. By default, we want that to happen.",
    "start": "659576",
    "end": "665206"
  },
  {
    "text": "So it looks like this. Right, you're not allowed.",
    "start": "665206",
    "end": "671018"
  },
  {
    "text": "That's me actually, that's my avatar so I'm not allowed, my\nImageView is not allowed to draw outside the parent view",
    "start": "671018",
    "end": "678339"
  },
  {
    "text": "unless I set ClipChildren to false. In that case, I'm gonna be able to draw",
    "start": "678339",
    "end": "684283"
  },
  {
    "text": "outside the first parent\nbut not the second, not the following parent. So what I have to do is, spoiler alert,",
    "start": "684283",
    "end": "690874"
  },
  {
    "text": "I have to set that to\nfalse in all the parents, which is kind of like,\nbut that's how it works.",
    "start": "690874",
    "end": "697605"
  },
  {
    "text": "So, yeah okay, really bad\nanimation that I got there.",
    "start": "697605",
    "end": "701772"
  },
  {
    "text": "It just shows the point. Okay, so ClipPadding, so\nClipPadding is the same. So if you have the ClipChildren false",
    "start": "702695",
    "end": "709143"
  },
  {
    "text": "but you have a padding, the view is still gonna clip to that\npadding, yes, that happens,",
    "start": "709143",
    "end": "714359"
  },
  {
    "text": "especially with\nRecyclerViews, happens a lot. So just remember if suddenly\na view of yours gets cut,",
    "start": "714359",
    "end": "721446"
  },
  {
    "text": "in a RecyclerView, maybe it's\nbecause there is a padding and you didn't set that to false. So this is what it looks like.",
    "start": "721447",
    "end": "728303"
  },
  {
    "text": "It gets clipped to the padding, and pretty much already at some point,",
    "start": "729933",
    "end": "734988"
  },
  {
    "text": "I think a long time ago, was creating this type of utility, which allows me to go through\nall the parents of the view,",
    "start": "736281",
    "end": "741641"
  },
  {
    "text": "and just set everything to false, which is not super difficult.",
    "start": "741641",
    "end": "747389"
  },
  {
    "text": "Anyway, let's talk about\none of my favorite apps, yeah this is Google Photos. Have you think about it?",
    "start": "749928",
    "end": "756481"
  },
  {
    "text": "Do you have it? Do you like it? I think before I never had such a great UI experience in a gallery.",
    "start": "756481",
    "end": "763194"
  },
  {
    "text": "I was actually, it's just top-notch, it's really well thought\nand for a long time, I was thinking, how\ndid they pull that off?",
    "start": "766040",
    "end": "771836"
  },
  {
    "text": "It looks so good, but let's check it out\nhow it works actually. So there is one layer, two\nlayers and then fullscreen,",
    "start": "771836",
    "end": "779482"
  },
  {
    "text": "and really what I've,\nfullest, I pinch this so much, you can see that, I'm not really accurate, but anyway so that's how it works.",
    "start": "779482",
    "end": "785816"
  },
  {
    "text": "It's just like super smooth,\nit has three levels of zoom, and then it goes to a fullscreen. As you can see, they're able,\nthe user is able to control",
    "start": "785817",
    "end": "795007"
  },
  {
    "text": "the transition to fullscreen,\nwhich we were saying that Shared Element Transition can't do.",
    "start": "795007",
    "end": "800683"
  },
  {
    "text": "It's a limitation. So the way you figure out how\nsomething works in the UI,",
    "start": "801665",
    "end": "807582"
  },
  {
    "text": "pretty much these developer options. You make them 10 times\nslower, which is too slow,",
    "start": "807582",
    "end": "813552"
  },
  {
    "text": "maybe five times is fine, and you make the animation 10 times.",
    "start": "813552",
    "end": "818417"
  },
  {
    "text": "The duration and the animation\nis scaled 10 times slower. Then when you do that, so\nthis is what it looks like.",
    "start": "819765",
    "end": "827924"
  },
  {
    "text": "Yeah, the other is just (mumbles). So with that you are able\nto see what is going on because one, you will understand\nwhy that's really important",
    "start": "827924",
    "end": "836291"
  },
  {
    "text": "soon but for now and other\ndeveloper option that you want enable these flames, yes I like flames.",
    "start": "836291",
    "end": "844208"
  },
  {
    "text": "So show layout boundaries, and you should enable it all the time. It's such a beautiful UI right now.",
    "start": "844208",
    "end": "850105"
  },
  {
    "text": "It's wonderful for your eyes. No, but really, this is\nreally useful for developers.",
    "start": "850105",
    "end": "855326"
  },
  {
    "text": "That is the blue line\nwhich are the clip-out, the clip bounds, whereas\nthere is the red line, which is the optical\nbound, which is something",
    "start": "855326",
    "end": "861175"
  },
  {
    "text": "into a zoom 4.3 that I\nactually didn't have. Never to use but maybe you\nneed it, so check it out.",
    "start": "861175",
    "end": "866526"
  },
  {
    "text": "And the pink area, which are the margins. These not only helps to see the alignment when you hold the screen\nbut it will help us",
    "start": "866526",
    "end": "872381"
  },
  {
    "text": "to feel that, I did\nultimately but I wanna show if we were doing together\nso you see what is",
    "start": "872381",
    "end": "878226"
  },
  {
    "text": "the trick of that will\nwork for us, application. So now this application looks like that.",
    "start": "878226",
    "end": "883907"
  },
  {
    "text": "It's pretty much the same but with some layout boundaries, right. Yeah this is Google I/O, we had such a great time by the way.",
    "start": "883907",
    "end": "891555"
  },
  {
    "text": "Anyway so now, just pay\nattention to the video. I'm not gonna say anything,\njust think yourself",
    "start": "891555",
    "end": "896911"
  },
  {
    "text": "how this is happening,\nand then I will go deeper into what is really happening.",
    "start": "896911",
    "end": "902696"
  },
  {
    "text": "Okay, so I pinch and zoom, this is my, that was the concert, anyway. So three levels, zoom\nscrolling, going back.",
    "start": "902697",
    "end": "911102"
  },
  {
    "text": "Are you seeing what is happening? You see, we don't see that before",
    "start": "911102",
    "end": "916295"
  },
  {
    "text": "because it was fast enough right? And now yeah, picture\nzoom is more difficult once you put it at scale 10x.",
    "start": "916295",
    "end": "922438"
  },
  {
    "text": "It's super difficult actually. You have to do it like it\nreally, huge span in order",
    "start": "922439",
    "end": "927759"
  },
  {
    "text": "to go to fullscreen. So what happened? Did you noticed what happened?",
    "start": "927759",
    "end": "934424"
  },
  {
    "text": "Okay, let's cut to the real part, which is, okay this part of the zoom in.",
    "start": "934424",
    "end": "941023"
  },
  {
    "text": "Let's get closer. Did you see that?",
    "start": "942055",
    "end": "947693"
  },
  {
    "text": "Can you see the two\ndifferent RecyclerViews. There is another invisible\nRecyclerView with",
    "start": "948786",
    "end": "954231"
  },
  {
    "text": "a destination size, with a bigger size, and not only that but\nthey're actually cross-fading",
    "start": "954231",
    "end": "962105"
  },
  {
    "text": "between one and another. It's all smoke and mirrors. They're just tricking us but you know,",
    "start": "962105",
    "end": "968779"
  },
  {
    "text": "that's magic guys. That's what we do, we do magic. So the lesson here is,",
    "start": "968779",
    "end": "975285"
  },
  {
    "text": "sorry let's put it back, it's really good. Magic, magic, okay, yeah.",
    "start": "976168",
    "end": "981315"
  },
  {
    "text": "So the lesson is anything fast\nenough will look good enough,",
    "start": "981315",
    "end": "985482"
  },
  {
    "text": "and that's true for everything. When you just try 24 hours\nto make all your animations",
    "start": "986525",
    "end": "993523"
  },
  {
    "text": "10 times slower, and you are\ngonna see how the application suddenly doesn't make any sense any more because they all actually use that.",
    "start": "993523",
    "end": "1001750"
  },
  {
    "text": "It's fast transition, fast\nanimation that hides all the problems in implementation, right.",
    "start": "1001750",
    "end": "1007579"
  },
  {
    "text": "There is one more thing that I wasn't able to get on that video but in this video, you will figure out. When you try to zoom in to the fullscreen.",
    "start": "1007579",
    "end": "1015983"
  },
  {
    "text": "Uh-oh, here we go, what is going on? It's the same image.",
    "start": "1018128",
    "end": "1023562"
  },
  {
    "text": "Right so, they are kind of faking it. They're copying the same drawable maybe,",
    "start": "1023562",
    "end": "1029777"
  },
  {
    "text": "and they're using it in\norder to do the transition to the fullscreen.",
    "start": "1029778",
    "end": "1036047"
  },
  {
    "text": "So that's another trick but\nif you do it fast enough, and the scale is not\nenough, 10 times slower,",
    "start": "1037626",
    "end": "1044053"
  },
  {
    "text": "then it just works. So that again, more magic. These Google Photos\nguys are just magicians.",
    "start": "1044054",
    "end": "1051070"
  },
  {
    "text": "So fake it until you make it. Pretty much, fake it until you make it. That's what we just do all\nthe time in the development.",
    "start": "1051070",
    "end": "1058929"
  },
  {
    "text": "So I showed you how it works\nbut now I tried to be sure that I wasn't doing it wrong.",
    "start": "1058929",
    "end": "1065109"
  },
  {
    "text": "That my assumption wasn't\nwrong so I actually create a demo, well I created a demo,\nwhich is a simplification",
    "start": "1065109",
    "end": "1072702"
  },
  {
    "text": "of Google Photos but it's pretty much it. It's like two zoom levels, and then the last one\nis, goes to fullscreen.",
    "start": "1072702",
    "end": "1080503"
  },
  {
    "text": "So you can see all\nthese smoke and mirrors, and you can actually see the code. It's gonna be in the GitHub\nrepo so you can check the code,",
    "start": "1080504",
    "end": "1087551"
  },
  {
    "text": "and you can actually\napply all those tricks to your applications. So let's go for the demo,\nyes fireworks, so good.",
    "start": "1087551",
    "end": "1095160"
  },
  {
    "text": "Again, fireworks. So this is the application. This is some nice drawings, by my wife,",
    "start": "1095160",
    "end": "1101738"
  },
  {
    "text": "this illustration, is an illustrator. So zoom in, zoom out, okay,",
    "start": "1101738",
    "end": "1107823"
  },
  {
    "text": "and then fullscreen,\nfullscreen, fullscreen. So how did I implemented that?",
    "start": "1107823",
    "end": "1114914"
  },
  {
    "text": "So these are the layers. I have a container, a medium RecyclerView,",
    "start": "1116994",
    "end": "1122428"
  },
  {
    "text": "a small RecyclerView, and\na fullscreen container. So the container is gonna be the root of the whole hierarchy layout,",
    "start": "1122428",
    "end": "1129730"
  },
  {
    "text": "and of course it's a FrameLayout. It's an obvious choice\nbecause we need to stack all those layers on the top of each other,",
    "start": "1129730",
    "end": "1135535"
  },
  {
    "text": "and they are gonna take fullscreen. Why do I need to put a fullscreen\ncontainer on that screen",
    "start": "1135535",
    "end": "1143369"
  },
  {
    "text": "is because, as I said\nbefore, the transition, the shared element transition\ndoesn't allow the user",
    "start": "1143369",
    "end": "1148655"
  },
  {
    "text": "to control the transition to fullscreen but I wanna do it because\nthat's the nice experience.",
    "start": "1148655",
    "end": "1154349"
  },
  {
    "text": "So I put everything here,\nand you can just do that by creating your own NavigationManager,",
    "start": "1154349",
    "end": "1160070"
  },
  {
    "text": "and depending on the\nstate, you have a stack, and depending on the stack,\nyou can just inflate the,",
    "start": "1160070",
    "end": "1168050"
  },
  {
    "text": "sorry, instantiate the\npresenters and the view delegates that you need for each of the layers. But let's talk about the\nimportant part which is",
    "start": "1168050",
    "end": "1175312"
  },
  {
    "text": "the medium RecyclerView\nand the small RecyclerView. From now on, I'm gonna\ncall the small images,",
    "start": "1175312",
    "end": "1181467"
  },
  {
    "text": "the small RecyclerView, and the medium, which is a terrible word, I\ndidn't know how to say bigger than a small, which medium is fine,",
    "start": "1181467",
    "end": "1187557"
  },
  {
    "text": "because it's not too\nbig so medium is fine. So medium and small\nRecyclerView will be the",
    "start": "1187557",
    "end": "1192660"
  },
  {
    "text": "higher level of zoom before\ngoing into fullscreen. So we are using two RecyclerViews\nbecause that's the trick",
    "start": "1192660",
    "end": "1199084"
  },
  {
    "text": "that allow us to do that nice\nzoom in effect on the gallery",
    "start": "1199084",
    "end": "1203251"
  },
  {
    "text": "but before doing that, we\nhave to talk about some thing. Really when I pronouncing this word,",
    "start": "1204874",
    "end": "1212184"
  },
  {
    "text": "nobody actually understand me so it's pivot or something like that.",
    "start": "1212184",
    "end": "1217757"
  },
  {
    "text": "Otherwise you have this\nnice meme from my favorite episode of Friends, which\nwas the pivot, pivot, pivot.",
    "start": "1217757",
    "end": "1225169"
  },
  {
    "text": "If you don't know it, you maybe too young so you should watch it\nbecause it's really fun. It's still fun, incredible, still fun.",
    "start": "1225169",
    "end": "1231027"
  },
  {
    "text": "So yeah, let's talk about pivot. So the pivot by default, it\nsit in the center of the view.",
    "start": "1231027",
    "end": "1236570"
  },
  {
    "text": "So what happen is when you try\nto actually scale something it scales from center, and\nit goes in all directions",
    "start": "1237757",
    "end": "1244414"
  },
  {
    "text": "so it looks, that's not\nwhat we want, right? What we want is to actually\nto scale right down.",
    "start": "1244414",
    "end": "1251412"
  },
  {
    "text": "So the first thing that we have to do is said the pivot, the pivot, to (mumbles)",
    "start": "1252280",
    "end": "1258205"
  },
  {
    "text": "to that top left point of the view, which is the RecyclerView because it's the one that we are scaling.",
    "start": "1258205",
    "end": "1264891"
  },
  {
    "text": "That's important for\nscaling and rotating too. So then it looks like this,\nwhich is actually what we want.",
    "start": "1264891",
    "end": "1274473"
  },
  {
    "text": "We want that type of scale. Okay, so we have two RecyclerViews,",
    "start": "1274473",
    "end": "1279847"
  },
  {
    "text": "and my approach is to use two Adapters bind with the same\ncollection back in the map.",
    "start": "1280969",
    "end": "1288446"
  },
  {
    "text": "Because really they are\nactually using the same data. They're just the same image. They just have different size, right.",
    "start": "1288446",
    "end": "1295618"
  },
  {
    "text": "It's important to set on the setup the medium one to invisible\nbecause we only want to show one",
    "start": "1295618",
    "end": "1302536"
  },
  {
    "text": "first which is the small one,\nwhich is the one that is gonna be zooming in the first time.",
    "start": "1302536",
    "end": "1308233"
  },
  {
    "text": "Then let's talk about touch events.",
    "start": "1308233",
    "end": "1311150"
  },
  {
    "text": "There is different approaches\nbut the approach that I like it, was to create\nthis eat and touch dispatcher",
    "start": "1314144",
    "end": "1321236"
  },
  {
    "text": "which is a class that\ngets all the touch events, and depending on the state of that view,",
    "start": "1321236",
    "end": "1328020"
  },
  {
    "text": "we go to do, we delegate that\ntouch to one or another class.",
    "start": "1328020",
    "end": "1332187"
  },
  {
    "text": "So pretty much what I did\nwas create this class, and then add that class to both Adapters.",
    "start": "1334580",
    "end": "1340689"
  },
  {
    "text": "So how does it look like? Well, it looks like this.",
    "start": "1342062",
    "end": "1345523"
  },
  {
    "text": "It has more stuff but the\ntouch event is probably the most important part. So since both the RecyclerViews\nare using the same",
    "start": "1352663",
    "end": "1360230"
  },
  {
    "text": "we can get the ideal RecyclerView. So in all the Moment we know what is a RecyclerView\ngetting the touch been.",
    "start": "1360230",
    "end": "1367824"
  },
  {
    "text": "For that, what we do\nis we have this gallery",
    "start": "1369128",
    "end": "1372795"
  },
  {
    "text": "adjusts the texture which\nI will talk about it later. It's the scale adjust to the texture that we will use for\nscaling the RecyclerViews.",
    "start": "1374988",
    "end": "1383200"
  },
  {
    "text": "What I do is in case\nthe small RecyclerView is getting touched, it\nmeans there is only one way,",
    "start": "1385310",
    "end": "1391368"
  },
  {
    "text": "which is it can only go\nthe medium RecyclerView, it can only zoom in, right? So that's what it's doing.",
    "start": "1391368",
    "end": "1397216"
  },
  {
    "text": "It's pretty much delegate\nthat to the gallery adjust to the texture, which will know and will do that zooming.",
    "start": "1397216",
    "end": "1404219"
  },
  {
    "text": "Then in case of the medium RecyclerView we have the same.",
    "start": "1405401",
    "end": "1412661"
  },
  {
    "text": "The gallery adjust to\nthe texture will know, will know how to do it.",
    "start": "1412661",
    "end": "1418732"
  },
  {
    "text": "It has both logics. The important part here though is that we have zoom out, which goes\nfrom the medium to the small",
    "start": "1418732",
    "end": "1426938"
  },
  {
    "text": "but we have zoom in or in this,\nactually I was kind of lazy, and I just did click but when you click,",
    "start": "1426938",
    "end": "1433518"
  },
  {
    "text": "you go to the fullscreen. Then how we do that?",
    "start": "1433518",
    "end": "1438656"
  },
  {
    "text": "Well we use the span. The span is the, it's\nactually not the correct span, it's the delta between the\nlast span and the current span.",
    "start": "1438656",
    "end": "1445548"
  },
  {
    "text": "A span is the distance\nbetween your fingers so with that if it's (mumbles) I know that it's now pinch and\nzoom in, it's just clicking.",
    "start": "1445548",
    "end": "1454426"
  },
  {
    "text": "With that, I ask the\nRecyclerView, which in this case we know is the medium RecyclerView,",
    "start": "1454426",
    "end": "1460950"
  },
  {
    "text": "give me the view on that coordinates, and then I just perform a click.",
    "start": "1460951",
    "end": "1466328"
  },
  {
    "text": "So that's how the zoom\nin, zoom out between this medium RecyclerView and\nthe small RecyclerView works.",
    "start": "1468474",
    "end": "1474594"
  },
  {
    "text": "Now how do we scale them? So this is what we're missing, right?",
    "start": "1474594",
    "end": "1481591"
  },
  {
    "text": "We weren't scaling, we were\njust sending the touch events. We're not a scaler, right. For that, we have convenient\ncontract in the platform",
    "start": "1482804",
    "end": "1491664"
  },
  {
    "text": "OnScaleGestureListener, and it has onScaleBegin and onScaleEnd.",
    "start": "1491665",
    "end": "1497568"
  },
  {
    "text": "The names are pretty self-document but onScaleBegin, you\njust set up everything,",
    "start": "1498513",
    "end": "1506224"
  },
  {
    "text": "first starting the scaling. On a scale, it's a constant\nstream of the scale gesture.",
    "start": "1506224",
    "end": "1511874"
  },
  {
    "text": "And onScaleEnd is pretty\nmuch the user just stopped touching the screen so it\njust reset the position",
    "start": "1514232",
    "end": "1519387"
  },
  {
    "text": "to the state that you want. So onScaleBegin, what\nwe wanna do is show both",
    "start": "1519387",
    "end": "1527819"
  },
  {
    "text": "small and medium RecyclerViews\nbecause what we wanna do as you saw in the video\nis add the middle of that",
    "start": "1527819",
    "end": "1536449"
  },
  {
    "text": "zoom in or zoom out, we are\ngonna do a fade in, fade out in between both RecyclerViews, right.",
    "start": "1536449",
    "end": "1542747"
  },
  {
    "text": "So both have to be visual. You can do it different\nbut this approach works because the smoke and mirrors,",
    "start": "1542748",
    "end": "1549668"
  },
  {
    "text": "it comes out the end onScaleEnd. But on the onScale is\npretty much all the maths",
    "start": "1549668",
    "end": "1555356"
  },
  {
    "text": "of the talk which is, while\nthere's a gestureTolerance which applies a low plus\nfilter to avoid the flakiness",
    "start": "1555357",
    "end": "1561565"
  },
  {
    "text": "because our fingers are not that accurate so even if you think you're\nnot moving your fingers,",
    "start": "1561565",
    "end": "1567856"
  },
  {
    "text": "the screen is getting\nsome events so there's a constant signal that can\nprelude a small increments",
    "start": "1567856",
    "end": "1574356"
  },
  {
    "text": "and decrements on the scale. So we want to apply a low plus filter so we know that a minimum span was met,",
    "start": "1574357",
    "end": "1581349"
  },
  {
    "text": "and it's a span on that same duration that will work scaling before. So that's the gestureTolerance.",
    "start": "1581349",
    "end": "1587984"
  },
  {
    "text": "As I was saying, this\ncode is all on the repo so you can actually\nread that method later.",
    "start": "1589187",
    "end": "1594957"
  },
  {
    "text": "Then we have the scaleFactor\nand scaleFactorMedium, which are the scaleFactor.",
    "start": "1596331",
    "end": "1601755"
  },
  {
    "text": "As you can see, on a scale\ngive us are the texture that the texture give us a scaleFactor,",
    "start": "1601755",
    "end": "1607170"
  },
  {
    "text": "and we use that as scaleFactor\nwith a clamp function to limit the minimum and the maximum",
    "start": "1607170",
    "end": "1612929"
  },
  {
    "text": "scale of both RecyclerViews. Of course, one is the\ninverse of the other, and the minimum and\nmaximum, they have to match.",
    "start": "1612929",
    "end": "1619193"
  },
  {
    "text": "Otherwise in the middle of the transition, they would not have the same size, and then the fade in, fade\nout will look terrible, right,",
    "start": "1619193",
    "end": "1625644"
  },
  {
    "text": "because it will not match. So the numbers are whatever\nI like but you can actually",
    "start": "1625644",
    "end": "1631147"
  },
  {
    "text": "modify that and make it\nas complex as you want. Then the outfit's the same,\nwe want that outfit to be",
    "start": "1631147",
    "end": "1638440"
  },
  {
    "text": "in the middle of the transition, half or both of the RecyclerViews, and then at the beginning,\na small RecyclerView want,",
    "start": "1638440",
    "end": "1645974"
  },
  {
    "text": "and the medium to see to, and at the end the other way around.",
    "start": "1645974",
    "end": "1651548"
  },
  {
    "text": "So that's how the onScale works but what happen if suddenly the user stops",
    "start": "1651548",
    "end": "1658754"
  },
  {
    "text": "touching in the middle of the transition? If we don't do anything else,\nif we leave it as it is,",
    "start": "1658754",
    "end": "1664403"
  },
  {
    "text": "it's just gonna look\nlike two RecyclerViews",
    "start": "1664403",
    "end": "1667986"
  },
  {
    "text": "and half half of both of them, or you don't know, it depends right? But it will look weird, we're just getting a weirdest state.",
    "start": "1670467",
    "end": "1677061"
  },
  {
    "text": "So onScaleEnd, what I wanna do\nto hide this implementation,",
    "start": "1677062",
    "end": "1681229"
  },
  {
    "text": "this smoke and mirrors,\nwhat I want to do is just finish the transition\nautomatically to one of the states.",
    "start": "1682483",
    "end": "1689783"
  },
  {
    "text": "For that, I just use a TRANSITION_BOUNDARY",
    "start": "1689783",
    "end": "1693283"
  },
  {
    "text": "which transition one that is\njust like I calculate a delta, and so I know how much is\nmissing for the transition",
    "start": "1694886",
    "end": "1702111"
  },
  {
    "text": "so if it's below 20 or\n30%, and you can change it for whatever you want, I\nwill assume that the user",
    "start": "1702111",
    "end": "1708471"
  },
  {
    "text": "didn't wanna go fullscreen\nand he actually wanna go back to this small, right, that's what I do.",
    "start": "1708472",
    "end": "1713802"
  },
  {
    "text": "Otherwise, it fits that both\nthat TRANSITION_BOUNDARY, it means, okay, he wanna go to fullscreen but he was just, doing\nreally quick the move.",
    "start": "1715005",
    "end": "1723281"
  },
  {
    "text": "If you don't do that, what happens is like everything just gets stuck in one place.",
    "start": "1723281",
    "end": "1728928"
  },
  {
    "text": "We don't want that because that will show the trick to the user. So with that, we have the container,",
    "start": "1732087",
    "end": "1738208"
  },
  {
    "text": "the medium RecyclerView,\nand the small RecyclerView.",
    "start": "1738208",
    "end": "1742375"
  },
  {
    "text": "But then let's talk about the\nfullscreen image container. The fullscreen is a black,\nit's a friendly art,",
    "start": "1743328",
    "end": "1750917"
  },
  {
    "text": "which are black background, and that shows in a full with\nthe image, so exactly this.",
    "start": "1751772",
    "end": "1757655"
  },
  {
    "text": "So to do that, there is this\nrequirement by a RecyclerView.",
    "start": "1761989",
    "end": "1766156"
  },
  {
    "text": "When you add an item to the RecyclerView, the following, so you add one\nitem and then another item.",
    "start": "1772254",
    "end": "1779465"
  },
  {
    "text": "The second item is gonna be in a higher level base from the first one so if you try to actually\nscale that first item,",
    "start": "1779465",
    "end": "1787022"
  },
  {
    "text": "it's gonna be drawing\nbelow the second item so it would just not look right. That's each item has an\nelevation in a RecyclerView.",
    "start": "1787022",
    "end": "1796137"
  },
  {
    "text": "So there are different approach. This is probably the most\ndifficult which is just create",
    "start": "1796137",
    "end": "1801329"
  },
  {
    "text": "a custom LayoutManager that knows when we're clicking that item. When we're clicking one single item,",
    "start": "1801329",
    "end": "1806752"
  },
  {
    "text": "we want that item to be\non the top of everything, and be able to draw above\nall the other items,",
    "start": "1806752",
    "end": "1812467"
  },
  {
    "text": "which I will not do because\nthat's too much work when you can fake it, exactly,\nI like to fake things.",
    "start": "1812467",
    "end": "1819320"
  },
  {
    "text": "So yeah, then you can use this one. This is middle ground which is\nyou see, is just a callback, and then what you're gonna do\nis when you get that callback,",
    "start": "1819320",
    "end": "1826488"
  },
  {
    "text": "you set the elevations\nto the rest of the items so they're in that we wanna scale,",
    "start": "1826489",
    "end": "1833219"
  },
  {
    "text": "is gonna be on the top of all of them. But remember we talked\nabout it five minutes, no, not five, 10, 12, I don't even know.",
    "start": "1833219",
    "end": "1841070"
  },
  {
    "text": "At the beginning of the talk,\nwe talked about your best friend forever in animation\nfrom now on, ViewOverlay.",
    "start": "1841071",
    "end": "1848466"
  },
  {
    "text": "That's what we can use. We can just use the ViewOverlay\non top of the RecyclerView for the transition for the\npinch to zoom to fullscreen.",
    "start": "1848466",
    "end": "1854559"
  },
  {
    "text": "Then we just add that item,\nthat view to the frame layout,",
    "start": "1854560",
    "end": "1858727"
  },
  {
    "text": "which is the fullScreenContainer. Why you wanna make it more complicated when you can do it easily, right? That's it, it's like five lines.",
    "start": "1859947",
    "end": "1867271"
  },
  {
    "text": "So how does our, it's\nmore than five lines. There are some methods there\nand some instruction but okay.",
    "start": "1870966",
    "end": "1878474"
  },
  {
    "text": "You get the overlay from\nthe fullScreenContainer. You're gonna clear the\nstate of that overlay because you don't know if previously",
    "start": "1880256",
    "end": "1886456"
  },
  {
    "text": "maybe another item that was zoomed in.",
    "start": "1886456",
    "end": "1889623"
  },
  {
    "text": "Then you're gonna add a new item. As you can see this was in onClick.",
    "start": "1891673",
    "end": "1896716"
  },
  {
    "text": "That's the perform click\nthat we were doing before on the itemTouchDispatcher,\nitemTouchListenerDispatcher.",
    "start": "1897711",
    "end": "1904143"
  },
  {
    "text": "Yes, that one. What we're gonna do is,\nwe animate that itemView,",
    "start": "1906728",
    "end": "1913302"
  },
  {
    "text": "and then animate to fullscreen, and what we have to do is withEndAction,",
    "start": "1913302",
    "end": "1919913"
  },
  {
    "text": "which is gonna be setting\nthe click listener so we can go back to the gallery,",
    "start": "1919913",
    "end": "1925564"
  },
  {
    "text": "to the medium RecyclerView. Let's take a look at that method.",
    "start": "1925564",
    "end": "1931958"
  },
  {
    "text": "So that method is actually\npretty trivial too, and as you can see, of\ncourse that is more things going on like setting\nthe background to BLACK,",
    "start": "1931958",
    "end": "1939330"
  },
  {
    "text": "setting the background to TRANSPARENT or setting the visibility to GONE but pretty much the idea is you are just using the overlay\nto do your transitions,",
    "start": "1939330",
    "end": "1947960"
  },
  {
    "text": "and then at the end of the state, when the transition is\ndone, you add that view",
    "start": "1947960",
    "end": "1953169"
  },
  {
    "text": "to the real parent where\nwe will actually add all the logic to do, if\nyou wanna did that image",
    "start": "1953170",
    "end": "1960307"
  },
  {
    "text": "or you wanna change the name of the image of whatever gallery application\ndoes on a fullscreen image.",
    "start": "1960307",
    "end": "1965885"
  },
  {
    "text": "So what we are gonna do\nwhen somebody clicks on that item on that fullscreen image again,",
    "start": "1968529",
    "end": "1974827"
  },
  {
    "text": "we just have to transition\nback to the medium RecyclerView so we add that item again on the overlay.",
    "start": "1975971",
    "end": "1983118"
  },
  {
    "text": "Then we're just gonna animate it, we're just gonna set the originX, originY",
    "start": "1983118",
    "end": "1988783"
  },
  {
    "text": "and then scale it to one, which is the original size for that image.",
    "start": "1989985",
    "end": "1995189"
  },
  {
    "text": "Finally, don't forget to\nremove the item from overlay. Otherwise it will just still\nbe there until somebody,",
    "start": "1998835",
    "end": "2005606"
  },
  {
    "text": "something on the framework\ndecides to recycle that. That's it, that's how easy\nyou can allow the user to",
    "start": "2005606",
    "end": "2013635"
  },
  {
    "text": "interact on the transition\nwithout using the shared element transition.",
    "start": "2013635",
    "end": "2019471"
  },
  {
    "text": "Just by creating layers,\nlayers on the top of it, and just one activity. Then you get this, you\nget zoom in, zoom out,",
    "start": "2019472",
    "end": "2027746"
  },
  {
    "text": "click listener fullscreen. Not bad for a 20 minutes\nor 30 minutes of talk.",
    "start": "2027746",
    "end": "2034434"
  },
  {
    "text": "Again, magic guys, this is all magic. That's what we do, we do,\nyou're development, we do magic.",
    "start": "2034435",
    "end": "2042411"
  },
  {
    "text": "Magician is your new job role from now on. So let's recap, let's recap.",
    "start": "2042411",
    "end": "2048404"
  },
  {
    "text": "Magic tricks that you\ncan use for animations. ClipPadding, ClipChildren to\ndraw over parents and paddings.",
    "start": "2048404",
    "end": "2056616"
  },
  {
    "text": "That's important one. If you see something\nis cutting your views, it's probably one of those\nare not set to false.",
    "start": "2056616",
    "end": "2063575"
  },
  {
    "text": "The ViewOverlay, best friend\nforever for animations, really. It allows you to draw over\nthe whole layer hierarchy,",
    "start": "2063575",
    "end": "2070956"
  },
  {
    "text": "and to do any type of things\nwithout messing with it. Shared element transition\nhas, it doesn't allow the user",
    "start": "2070956",
    "end": "2078969"
  },
  {
    "text": "to control the transition without events. So you can actually\nallow the user to do that",
    "start": "2080366",
    "end": "2086888"
  },
  {
    "text": "by just creating a single activity, and then creating your own navigation, which is not, it doesn't\nhave to be super complex.",
    "start": "2086888",
    "end": "2093772"
  },
  {
    "text": "We don't need to have\n300 life cycle events or anything like that. It should be just show, hide,\nand maybe something like",
    "start": "2093772",
    "end": "2100970"
  },
  {
    "text": "animate to next, or\nenter, or exit the screen. That's whole idea for another talk.",
    "start": "2100970",
    "end": "2108531"
  },
  {
    "text": "Then finally, fast animations hide any problem with implementation.",
    "start": "2109878",
    "end": "2116966"
  },
  {
    "text": "If you do it fast enough,\nas we saw during the talk, it's just gonna look right,\nand nice, and smooth,",
    "start": "2116966",
    "end": "2123365"
  },
  {
    "text": "and good anyway. So remember that, make it\nfast enough so the eyes are not able to see the trick,",
    "start": "2123365",
    "end": "2130427"
  },
  {
    "text": "which is pretty much what magicians do. With all that, thank you.",
    "start": "2130427",
    "end": "2136157"
  },
  {
    "text": "Here is the repo. You can check the code right now. You can ask me questions there too,",
    "start": "2136157",
    "end": "2143240"
  },
  {
    "text": "and if you want more examples\nof smoke and mirrors, these great applications\nby Nick Butcher's Plaid",
    "start": "2143240",
    "end": "2148460"
  },
  {
    "text": "has many more examples. So remember to rate my session, thank you.",
    "start": "2148460",
    "end": "2153927"
  },
  {
    "text": "(audience claps)",
    "start": "2153927",
    "end": "2156677"
  }
]