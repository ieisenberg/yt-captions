[
  {
    "start": "0",
    "end": "79000"
  },
  {
    "text": "[Music]",
    "start": "970",
    "end": "7838"
  },
  {
    "text": "all right so this is next generation",
    "start": "14160",
    "end": "15599"
  },
  {
    "text": "programming rust and elm",
    "start": "15599",
    "end": "17199"
  },
  {
    "text": "i'm richard feldman um so let me start",
    "start": "17199",
    "end": "20640"
  },
  {
    "text": "by uh",
    "start": "20640",
    "end": "21279"
  },
  {
    "text": "talking about what i mean by sort of the",
    "start": "21279",
    "end": "22720"
  },
  {
    "text": "next generation um so why aren't these",
    "start": "22720",
    "end": "24800"
  },
  {
    "text": "the current generation and why do i",
    "start": "24800",
    "end": "26400"
  },
  {
    "text": "think they're going to be representative",
    "start": "26400",
    "end": "28080"
  },
  {
    "text": "of the next generation of programming",
    "start": "28080",
    "end": "30320"
  },
  {
    "text": "languages",
    "start": "30320",
    "end": "31199"
  },
  {
    "text": "um so these are modern languages they're",
    "start": "31199",
    "end": "33360"
  },
  {
    "text": "in wide use today but not",
    "start": "33360",
    "end": "35200"
  },
  {
    "text": "nearly as much as some of the more",
    "start": "35200",
    "end": "37040"
  },
  {
    "text": "popular languages like you might be",
    "start": "37040",
    "end": "38719"
  },
  {
    "text": "familiar with",
    "start": "38719",
    "end": "39600"
  },
  {
    "text": "javascript python java things like that",
    "start": "39600",
    "end": "42960"
  },
  {
    "text": "they're modern but they're not really",
    "start": "42960",
    "end": "44480"
  },
  {
    "text": "mainstream uh they're sort of uh",
    "start": "44480",
    "end": "47039"
  },
  {
    "text": "more used in sort of niche settings by",
    "start": "47039",
    "end": "49520"
  },
  {
    "text": "smaller organizations or smaller teams",
    "start": "49520",
    "end": "52480"
  },
  {
    "text": "but they are sort of pushing the",
    "start": "52480",
    "end": "53520"
  },
  {
    "text": "boundaries of what programming languages",
    "start": "53520",
    "end": "55120"
  },
  {
    "text": "can do and how much they can help us",
    "start": "55120",
    "end": "57199"
  },
  {
    "text": "um and they're significantly different",
    "start": "57199",
    "end": "59039"
  },
  {
    "text": "from what you find in sort of mainstream",
    "start": "59039",
    "end": "60960"
  },
  {
    "text": "languages today",
    "start": "60960",
    "end": "61920"
  },
  {
    "text": "so it's not just that they're trying new",
    "start": "61920",
    "end": "63280"
  },
  {
    "text": "things but they're trying sort of",
    "start": "63280",
    "end": "64478"
  },
  {
    "text": "radically different things",
    "start": "64479",
    "end": "66000"
  },
  {
    "text": "so i think putting all these things",
    "start": "66000",
    "end": "67360"
  },
  {
    "text": "together maybe these aren't the most",
    "start": "67360",
    "end": "69200"
  },
  {
    "text": "popular languages today but i think",
    "start": "69200",
    "end": "70560"
  },
  {
    "text": "they're representative of what the next",
    "start": "70560",
    "end": "72000"
  },
  {
    "text": "generation of languages are going to",
    "start": "72000",
    "end": "73119"
  },
  {
    "text": "look like and over the course of this",
    "start": "73119",
    "end": "74640"
  },
  {
    "text": "talk we're going to go over",
    "start": "74640",
    "end": "75759"
  },
  {
    "text": "sort of what makes them different and",
    "start": "75759",
    "end": "77280"
  },
  {
    "text": "why you might be interested in them",
    "start": "77280",
    "end": "79360"
  },
  {
    "start": "79000",
    "end": "181000"
  },
  {
    "text": "so let's start with rust so this is from",
    "start": "79360",
    "end": "81040"
  },
  {
    "text": "the rust webpage it's a language",
    "start": "81040",
    "end": "82880"
  },
  {
    "text": "empowering everyone",
    "start": "82880",
    "end": "84080"
  },
  {
    "text": "to build reliable and efficient software",
    "start": "84080",
    "end": "86960"
  },
  {
    "text": "here's the elm homepage",
    "start": "86960",
    "end": "88479"
  },
  {
    "text": "a delightful language for reliable web",
    "start": "88479",
    "end": "90560"
  },
  {
    "text": "apps",
    "start": "90560",
    "end": "91920"
  },
  {
    "text": "so elm is an alternative to javascript",
    "start": "91920",
    "end": "94000"
  },
  {
    "text": "you use it to make browser-based uis",
    "start": "94000",
    "end": "96560"
  },
  {
    "text": "rus is an alternative to c plus so you",
    "start": "96560",
    "end": "99040"
  },
  {
    "text": "can use it for",
    "start": "99040",
    "end": "100159"
  },
  {
    "text": "just about anything uh anything you",
    "start": "100159",
    "end": "101680"
  },
  {
    "text": "could use c plus plus four",
    "start": "101680",
    "end": "103360"
  },
  {
    "text": "um that includes by the way making",
    "start": "103360",
    "end": "105360"
  },
  {
    "text": "applications in the browser because now",
    "start": "105360",
    "end": "107280"
  },
  {
    "text": "with webassembly that's something you",
    "start": "107280",
    "end": "108479"
  },
  {
    "text": "can do too we'll talk a little bit about",
    "start": "108479",
    "end": "110000"
  },
  {
    "text": "rust and webassembly later",
    "start": "110000",
    "end": "112000"
  },
  {
    "text": "um so comparing these two home pages one",
    "start": "112000",
    "end": "115040"
  },
  {
    "text": "word you might notice they have in",
    "start": "115040",
    "end": "116240"
  },
  {
    "text": "common is reliable this is the goal of",
    "start": "116240",
    "end": "118000"
  },
  {
    "text": "both of the languages",
    "start": "118000",
    "end": "118960"
  },
  {
    "text": "is to help people make reliable software",
    "start": "118960",
    "end": "121040"
  },
  {
    "text": "we'll talk more about the specifics of",
    "start": "121040",
    "end": "122320"
  },
  {
    "text": "how each of them does that in a bit",
    "start": "122320",
    "end": "124560"
  },
  {
    "text": "um they do have two other descriptors",
    "start": "124560",
    "end": "126880"
  },
  {
    "text": "though rust",
    "start": "126880",
    "end": "127600"
  },
  {
    "text": "self-describes as being efficient that's",
    "start": "127600",
    "end": "129280"
  },
  {
    "text": "one of the goals of russ um being an",
    "start": "129280",
    "end": "131200"
  },
  {
    "text": "alternative to c",
    "start": "131200",
    "end": "131920"
  },
  {
    "text": "plus plus uh runtime performance is very",
    "start": "131920",
    "end": "134480"
  },
  {
    "text": "very important to rust",
    "start": "134480",
    "end": "135760"
  },
  {
    "text": "and we'll see some benchmarks later that",
    "start": "135760",
    "end": "137280"
  },
  {
    "text": "sort of demonstrate that",
    "start": "137280",
    "end": "139440"
  },
  {
    "text": "elm on the other hand doesn't say",
    "start": "139440",
    "end": "140640"
  },
  {
    "text": "efficient elm self describes as being",
    "start": "140640",
    "end": "142239"
  },
  {
    "text": "delightful",
    "start": "142239",
    "end": "143200"
  },
  {
    "text": "so elm is a lot more interested in sort",
    "start": "143200",
    "end": "145040"
  },
  {
    "text": "of developer experience and ergonomics",
    "start": "145040",
    "end": "146959"
  },
  {
    "text": "and",
    "start": "146959",
    "end": "147520"
  },
  {
    "text": "helping people have a really good time",
    "start": "147520",
    "end": "149440"
  },
  {
    "text": "when they're building their software",
    "start": "149440",
    "end": "150720"
  },
  {
    "text": "even if that means sacrificing some",
    "start": "150720",
    "end": "152319"
  },
  {
    "text": "efficiency so you can see some",
    "start": "152319",
    "end": "153920"
  },
  {
    "text": "similarities and some differences",
    "start": "153920",
    "end": "155599"
  },
  {
    "text": "in what the two languages do but by far",
    "start": "155599",
    "end": "158000"
  },
  {
    "text": "the biggest difference between them is",
    "start": "158000",
    "end": "159280"
  },
  {
    "text": "their scope",
    "start": "159280",
    "end": "160319"
  },
  {
    "text": "elm is focused on building browser-based",
    "start": "160319",
    "end": "162720"
  },
  {
    "text": "uis that's what it means by web apps",
    "start": "162720",
    "end": "164560"
  },
  {
    "text": "whereas rust is much broader it's",
    "start": "164560",
    "end": "166319"
  },
  {
    "text": "targeting a much wider swath of possible",
    "start": "166319",
    "end": "168560"
  },
  {
    "text": "applications and each of those sort of",
    "start": "168560",
    "end": "170720"
  },
  {
    "text": "has their own trade-offs um the narrower",
    "start": "170720",
    "end": "172480"
  },
  {
    "text": "focus the easier it is to do one thing",
    "start": "172480",
    "end": "174080"
  },
  {
    "text": "well",
    "start": "174080",
    "end": "174560"
  },
  {
    "text": "and the broader the focus the more",
    "start": "174560",
    "end": "176000"
  },
  {
    "text": "things you can use it for but sort of",
    "start": "176000",
    "end": "177599"
  },
  {
    "text": "the larger and more complexity",
    "start": "177599",
    "end": "179200"
  },
  {
    "text": "uh language so let's focus in a little",
    "start": "179200",
    "end": "182239"
  },
  {
    "start": "181000",
    "end": "280000"
  },
  {
    "text": "bit more on rust first",
    "start": "182239",
    "end": "184239"
  },
  {
    "text": "so rust compiles to binaries like",
    "start": "184239",
    "end": "186400"
  },
  {
    "text": "machine code",
    "start": "186400",
    "end": "187840"
  },
  {
    "text": "that's not running on a virtual machine",
    "start": "187840",
    "end": "189599"
  },
  {
    "text": "it doesn't have a garbage collector",
    "start": "189599",
    "end": "191120"
  },
  {
    "text": "just like c plus plus you compile your",
    "start": "191120",
    "end": "193120"
  },
  {
    "text": "rust program and you get a",
    "start": "193120",
    "end": "194480"
  },
  {
    "text": "static or dynamically linked binary out",
    "start": "194480",
    "end": "196640"
  },
  {
    "text": "of it",
    "start": "196640",
    "end": "197840"
  },
  {
    "text": "russ does have c interop so if you want",
    "start": "197840",
    "end": "200000"
  },
  {
    "text": "you can have your rust code talk to c",
    "start": "200000",
    "end": "201920"
  },
  {
    "text": "libraries",
    "start": "201920",
    "end": "202720"
  },
  {
    "text": "or if you've got an existing c or c plus",
    "start": "202720",
    "end": "204560"
  },
  {
    "text": "plus project you could incrementally",
    "start": "204560",
    "end": "206480"
  },
  {
    "text": "bring in some rust code to that",
    "start": "206480",
    "end": "209280"
  },
  {
    "text": "it's got all the modern conveniences",
    "start": "209280",
    "end": "211040"
  },
  {
    "text": "you'd expect from programming languages",
    "start": "211040",
    "end": "212560"
  },
  {
    "text": "it's got a package ecosystem",
    "start": "212560",
    "end": "214159"
  },
  {
    "text": "there are editor plugins learning",
    "start": "214159",
    "end": "216000"
  },
  {
    "text": "materials all the types of things that",
    "start": "216000",
    "end": "217680"
  },
  {
    "text": "you would expect from any modern",
    "start": "217680",
    "end": "218959"
  },
  {
    "text": "language",
    "start": "218959",
    "end": "220239"
  },
  {
    "text": "um russ is often compared to go in",
    "start": "220239",
    "end": "223200"
  },
  {
    "text": "addition to c",
    "start": "223200",
    "end": "223840"
  },
  {
    "text": "plus plus and to be honest i don't",
    "start": "223840",
    "end": "226000"
  },
  {
    "text": "personally think that's a great",
    "start": "226000",
    "end": "227120"
  },
  {
    "text": "comparison",
    "start": "227120",
    "end": "228319"
  },
  {
    "text": "go is a programming language it's a very",
    "start": "228319",
    "end": "229920"
  },
  {
    "text": "simple language it's very quick to learn",
    "start": "229920",
    "end": "231680"
  },
  {
    "text": "that's one of its design goals",
    "start": "231680",
    "end": "233519"
  },
  {
    "text": "and it's intentionally simple and has a",
    "start": "233519",
    "end": "235200"
  },
  {
    "text": "very fast compiler all of these things",
    "start": "235200",
    "end": "237040"
  },
  {
    "text": "were design goals from day one of go and",
    "start": "237040",
    "end": "239040"
  },
  {
    "text": "they were really reflected in the",
    "start": "239040",
    "end": "240319"
  },
  {
    "text": "language that go is",
    "start": "240319",
    "end": "242159"
  },
  {
    "text": "russ on the other hand is a very complex",
    "start": "242159",
    "end": "243680"
  },
  {
    "text": "language there's a lot to learn",
    "start": "243680",
    "end": "245200"
  },
  {
    "text": "and compared to a lot of other modern",
    "start": "245200",
    "end": "247040"
  },
  {
    "text": "programming languages in particular go",
    "start": "247040",
    "end": "248879"
  },
  {
    "text": "and elm",
    "start": "248879",
    "end": "250560"
  },
  {
    "text": "the compiler's not very fast maybe if",
    "start": "250560",
    "end": "252239"
  },
  {
    "text": "you compare it to like c plus plus or",
    "start": "252239",
    "end": "253680"
  },
  {
    "text": "scala compiler maybe it's more",
    "start": "253680",
    "end": "255200"
  },
  {
    "text": "reasonable but",
    "start": "255200",
    "end": "256400"
  },
  {
    "text": "um fundamentally if you like go i don't",
    "start": "256400",
    "end": "259280"
  },
  {
    "text": "know that there's necessarily good",
    "start": "259280",
    "end": "260639"
  },
  {
    "text": "evidence that you're going to like rust",
    "start": "260639",
    "end": "262079"
  },
  {
    "text": "because it's",
    "start": "262079",
    "end": "262639"
  },
  {
    "text": "it's pretty much doing a lot of",
    "start": "262639",
    "end": "263919"
  },
  {
    "text": "different things um",
    "start": "263919",
    "end": "266240"
  },
  {
    "text": "having said that as we'll see later uh",
    "start": "266240",
    "end": "267840"
  },
  {
    "text": "also the gap between how fast",
    "start": "267840",
    "end": "269840"
  },
  {
    "text": "go is and how fast rust can be is also",
    "start": "269840",
    "end": "272320"
  },
  {
    "text": "pretty substantial so if you need a lot",
    "start": "272320",
    "end": "274160"
  },
  {
    "text": "of high performance stuff",
    "start": "274160",
    "end": "275440"
  },
  {
    "text": "um and go is not an option rust might be",
    "start": "275440",
    "end": "277919"
  },
  {
    "text": "an option for you",
    "start": "277919",
    "end": "279759"
  },
  {
    "text": "um okay turning to elm so elm a",
    "start": "279759",
    "end": "282320"
  },
  {
    "start": "280000",
    "end": "385000"
  },
  {
    "text": "delightful language for reliable web",
    "start": "282320",
    "end": "283840"
  },
  {
    "text": "apps",
    "start": "283840",
    "end": "284320"
  },
  {
    "text": "um elm really focuses on having a really",
    "start": "284320",
    "end": "287120"
  },
  {
    "text": "fast really friendly compiler with",
    "start": "287120",
    "end": "288800"
  },
  {
    "text": "really great error messages",
    "start": "288800",
    "end": "290560"
  },
  {
    "text": "more similar to go elm is also a",
    "start": "290560",
    "end": "292160"
  },
  {
    "text": "language that prides itself on being",
    "start": "292160",
    "end": "293759"
  },
  {
    "text": "small and simple",
    "start": "293759",
    "end": "295199"
  },
  {
    "text": "um elm does have javascript interop so",
    "start": "295199",
    "end": "297520"
  },
  {
    "text": "javascript uh",
    "start": "297520",
    "end": "298560"
  },
  {
    "text": "you know being sort of the lingua franca",
    "start": "298560",
    "end": "300400"
  },
  {
    "text": "of uh web uis",
    "start": "300400",
    "end": "302240"
  },
  {
    "text": "so lm applications can talk to",
    "start": "302240",
    "end": "303759"
  },
  {
    "text": "javascript applications if there's some",
    "start": "303759",
    "end": "305280"
  },
  {
    "text": "javascript library that you really need",
    "start": "305280",
    "end": "307360"
  },
  {
    "text": "or vice versa if you've got a big",
    "start": "307360",
    "end": "309440"
  },
  {
    "text": "javascript or typescript codebase",
    "start": "309440",
    "end": "311520"
  },
  {
    "text": "introducing elm incrementally through",
    "start": "311520",
    "end": "313280"
  },
  {
    "text": "its javascript interop is actually the",
    "start": "313280",
    "end": "315039"
  },
  {
    "text": "most popular most common way that people",
    "start": "315039",
    "end": "316960"
  },
  {
    "text": "introduce elm to their existing",
    "start": "316960",
    "end": "318560"
  },
  {
    "text": "stacks and again similar to rust it's",
    "start": "318560",
    "end": "321600"
  },
  {
    "text": "got packages its own package ecosystem",
    "start": "321600",
    "end": "323759"
  },
  {
    "text": "editor plugins learning materials all",
    "start": "323759",
    "end": "325440"
  },
  {
    "text": "the things you'd expect from a modern",
    "start": "325440",
    "end": "326800"
  },
  {
    "text": "programming language",
    "start": "326800",
    "end": "329280"
  },
  {
    "text": "so ilm is often compared to javascript",
    "start": "329280",
    "end": "331360"
  },
  {
    "text": "frameworks like react and",
    "start": "331360",
    "end": "333039"
  },
  {
    "text": "angular and vue and so forth which is in",
    "start": "333039",
    "end": "336080"
  },
  {
    "text": "some",
    "start": "336080",
    "end": "336800"
  },
  {
    "text": "senses understandable but like the go",
    "start": "336800",
    "end": "339120"
  },
  {
    "text": "and rust comparison it's not completely",
    "start": "339120",
    "end": "340800"
  },
  {
    "text": "apt",
    "start": "340800",
    "end": "341440"
  },
  {
    "text": "um the biggest difference is that",
    "start": "341440",
    "end": "342960"
  },
  {
    "text": "frameworks you're actually writing",
    "start": "342960",
    "end": "344880"
  },
  {
    "text": "javascript or typescript day to day",
    "start": "344880",
    "end": "346720"
  },
  {
    "text": "i mean if you're using react view",
    "start": "346720",
    "end": "348639"
  },
  {
    "text": "angular any of those things",
    "start": "348639",
    "end": "350000"
  },
  {
    "text": "that's the programming language you're",
    "start": "350000",
    "end": "351280"
  },
  {
    "text": "using whereas with elm",
    "start": "351280",
    "end": "353120"
  },
  {
    "text": "you're actually using a different",
    "start": "353120",
    "end": "354080"
  },
  {
    "text": "programming language altogether you're",
    "start": "354080",
    "end": "355360"
  },
  {
    "text": "not writing javascript you're writing l",
    "start": "355360",
    "end": "356960"
  },
  {
    "text": "and they're very different programming",
    "start": "356960",
    "end": "358319"
  },
  {
    "text": "languages the reason that this",
    "start": "358319",
    "end": "360000"
  },
  {
    "text": "comparison so often gets made",
    "start": "360000",
    "end": "361600"
  },
  {
    "text": "is that elm actually ships with enough",
    "start": "361600",
    "end": "363600"
  },
  {
    "text": "batteries included that you don't need a",
    "start": "363600",
    "end": "365360"
  },
  {
    "text": "framework to do",
    "start": "365360",
    "end": "366639"
  },
  {
    "text": "web development with it in fact there",
    "start": "366639",
    "end": "368720"
  },
  {
    "text": "really aren't any notable",
    "start": "368720",
    "end": "370080"
  },
  {
    "text": "elm frameworks some people don't really",
    "start": "370080",
    "end": "371759"
  },
  {
    "text": "use them so that's why people often say",
    "start": "371759",
    "end": "373919"
  },
  {
    "text": "well are you using elm or are you using",
    "start": "373919",
    "end": "375759"
  },
  {
    "text": "react or are using element or are you",
    "start": "375759",
    "end": "377680"
  },
  {
    "text": "using angular it's because well if",
    "start": "377680",
    "end": "378960"
  },
  {
    "text": "you're using elm you don't need a",
    "start": "378960",
    "end": "380240"
  },
  {
    "text": "reactor an angular or some equivalent",
    "start": "380240",
    "end": "381840"
  },
  {
    "text": "like that",
    "start": "381840",
    "end": "382400"
  },
  {
    "text": "in practice they're not really used",
    "start": "382400",
    "end": "385440"
  },
  {
    "start": "385000",
    "end": "650000"
  },
  {
    "text": "um so one of the things that that rust",
    "start": "385440",
    "end": "387360"
  },
  {
    "text": "and elm have in common is that they're",
    "start": "387360",
    "end": "388880"
  },
  {
    "text": "very",
    "start": "388880",
    "end": "389280"
  },
  {
    "text": "battle tested um before we move on to",
    "start": "389280",
    "end": "391360"
  },
  {
    "text": "that though let me pause and ask if",
    "start": "391360",
    "end": "392720"
  },
  {
    "text": "anyone had any questions about",
    "start": "392720",
    "end": "394160"
  },
  {
    "text": "any of the rust and elm things we've",
    "start": "394160",
    "end": "396319"
  },
  {
    "text": "talked about so far any of the high",
    "start": "396319",
    "end": "397680"
  },
  {
    "text": "level big picture stuff",
    "start": "397680",
    "end": "399600"
  },
  {
    "text": "so one of the things they have in common",
    "start": "399600",
    "end": "400800"
  },
  {
    "text": "is that they're both at this point quite",
    "start": "400800",
    "end": "402319"
  },
  {
    "text": "battle tested languages",
    "start": "402319",
    "end": "403840"
  },
  {
    "text": "so rust has been around for about a",
    "start": "403840",
    "end": "405120"
  },
  {
    "text": "decade back in 2010 when its first",
    "start": "405120",
    "end": "407840"
  },
  {
    "text": "release happened it was one single",
    "start": "407840",
    "end": "409440"
  },
  {
    "text": "developer working on it",
    "start": "409440",
    "end": "410880"
  },
  {
    "text": "and now about a decade later uh it's",
    "start": "410880",
    "end": "413039"
  },
  {
    "text": "evolved to have a",
    "start": "413039",
    "end": "414319"
  },
  {
    "text": "significant uh list of contributors and",
    "start": "414319",
    "end": "417199"
  },
  {
    "text": "a large team of people working on it",
    "start": "417199",
    "end": "418960"
  },
  {
    "text": "um and they like to develop the language",
    "start": "418960",
    "end": "421120"
  },
  {
    "text": "using what they call radical openness",
    "start": "421120",
    "end": "423520"
  },
  {
    "text": "this is a keynote from ruskoff 2018",
    "start": "423520",
    "end": "425520"
  },
  {
    "text": "where they talk about their conception",
    "start": "425520",
    "end": "427120"
  },
  {
    "text": "of radical openness and what that means",
    "start": "427120",
    "end": "429039"
  },
  {
    "text": "sort of a design process where they try",
    "start": "429039",
    "end": "430479"
  },
  {
    "text": "to include as many voices as possible",
    "start": "430479",
    "end": "432240"
  },
  {
    "text": "and get everyone",
    "start": "432240",
    "end": "433199"
  },
  {
    "text": "into the table and just just be",
    "start": "433199",
    "end": "435440"
  },
  {
    "text": "completely open and transparent about",
    "start": "435440",
    "end": "437039"
  },
  {
    "text": "absolutely everything they do",
    "start": "437039",
    "end": "438800"
  },
  {
    "text": "um this does have its downsides which",
    "start": "438800",
    "end": "441039"
  },
  {
    "text": "one of the core contributors talked",
    "start": "441039",
    "end": "442319"
  },
  {
    "text": "about in a blog post called",
    "start": "442319",
    "end": "443599"
  },
  {
    "text": "organizational debt",
    "start": "443599",
    "end": "444880"
  },
  {
    "text": "um and the author wrote about something",
    "start": "444880",
    "end": "447120"
  },
  {
    "text": "uh basically a small language feature",
    "start": "447120",
    "end": "449520"
  },
  {
    "text": "that they were working on",
    "start": "449520",
    "end": "450639"
  },
  {
    "text": "where it had like 800 comments that they",
    "start": "450639",
    "end": "452880"
  },
  {
    "text": "had to parse through and they found it",
    "start": "452880",
    "end": "454160"
  },
  {
    "text": "essentially",
    "start": "454160",
    "end": "454960"
  },
  {
    "text": "overwhelming to participate in the",
    "start": "454960",
    "end": "456400"
  },
  {
    "text": "design process like that when this the",
    "start": "456400",
    "end": "458400"
  },
  {
    "text": "volume of uh participants is so high",
    "start": "458400",
    "end": "461120"
  },
  {
    "text": "it becomes difficult to keep up and",
    "start": "461120",
    "end": "463039"
  },
  {
    "text": "there was a line in that blog post",
    "start": "463039",
    "end": "464479"
  },
  {
    "text": "something like",
    "start": "464479",
    "end": "465280"
  },
  {
    "text": "rust is my full-time job and i find it",
    "start": "465280",
    "end": "467360"
  },
  {
    "text": "impossible to keep up",
    "start": "467360",
    "end": "468879"
  },
  {
    "text": "um so there are pros and cons to this",
    "start": "468879",
    "end": "470879"
  },
  {
    "text": "this approach of radical openness but",
    "start": "470879",
    "end": "472479"
  },
  {
    "text": "it's it's there are pros and cons that",
    "start": "472479",
    "end": "474000"
  },
  {
    "text": "the rust team sort of embraces",
    "start": "474000",
    "end": "476560"
  },
  {
    "text": "um rust is a pretty well-funded",
    "start": "476560",
    "end": "479039"
  },
  {
    "text": "operation um",
    "start": "479039",
    "end": "480000"
  },
  {
    "text": "they have multiple full-time paid",
    "start": "480000",
    "end": "481599"
  },
  {
    "text": "developers uh mozilla is the",
    "start": "481599",
    "end": "483520"
  },
  {
    "text": "the company that's sort of the biggest",
    "start": "483520",
    "end": "485199"
  },
  {
    "text": "backer of rust um they even have",
    "start": "485199",
    "end": "487599"
  },
  {
    "text": "uh full-time paid community engineers",
    "start": "487599",
    "end": "490000"
  },
  {
    "text": "and people whose job it is just to",
    "start": "490000",
    "end": "491599"
  },
  {
    "text": "engage",
    "start": "491599",
    "end": "492000"
  },
  {
    "text": "with the community um and help make uh",
    "start": "492000",
    "end": "495680"
  },
  {
    "text": "various non-programming things happen um",
    "start": "495680",
    "end": "499360"
  },
  {
    "text": "and uh this sort of is maybe necessary",
    "start": "499360",
    "end": "502240"
  },
  {
    "text": "maybe not but uh",
    "start": "502240",
    "end": "503360"
  },
  {
    "text": "the reality is that rust is a very large",
    "start": "503360",
    "end": "505120"
  },
  {
    "text": "very complex language",
    "start": "505120",
    "end": "506960"
  },
  {
    "text": "and they do have very frequent compiler",
    "start": "506960",
    "end": "508879"
  },
  {
    "text": "releases so all the people that are",
    "start": "508879",
    "end": "510560"
  },
  {
    "text": "working on it",
    "start": "510560",
    "end": "511199"
  },
  {
    "text": "are constantly adding things um russ has",
    "start": "511199",
    "end": "513680"
  },
  {
    "text": "very strong backwards compatibility",
    "start": "513680",
    "end": "515120"
  },
  {
    "text": "guarantees so they're really never",
    "start": "515120",
    "end": "516399"
  },
  {
    "text": "removing things",
    "start": "516399",
    "end": "517599"
  },
  {
    "text": "um and they're i think it's every six",
    "start": "517599",
    "end": "519760"
  },
  {
    "text": "weeks the the there's a new compiler",
    "start": "519760",
    "end": "521440"
  },
  {
    "text": "release as a result of this",
    "start": "521440",
    "end": "523680"
  },
  {
    "text": "um so contrast this with elm elm's been",
    "start": "523680",
    "end": "525760"
  },
  {
    "text": "around for a similar period of time um",
    "start": "525760",
    "end": "527519"
  },
  {
    "text": "2012 was its first release so it's been",
    "start": "527519",
    "end": "529040"
  },
  {
    "text": "around for about eight years um",
    "start": "529040",
    "end": "530880"
  },
  {
    "text": "initially it was one single developer",
    "start": "530880",
    "end": "532640"
  },
  {
    "text": "evan and uh and now it's grown into sort",
    "start": "532640",
    "end": "535680"
  },
  {
    "text": "of a core team but evan is still sort of",
    "start": "535680",
    "end": "537839"
  },
  {
    "text": "in charge of l uh he's the the",
    "start": "537839",
    "end": "539680"
  },
  {
    "text": "benevolent dictator for life as they say",
    "start": "539680",
    "end": "541279"
  },
  {
    "text": "in the python community the bdfl",
    "start": "541279",
    "end": "543600"
  },
  {
    "text": "um evan wrote about sort of like his",
    "start": "543600",
    "end": "546080"
  },
  {
    "text": "approach",
    "start": "546080",
    "end": "546640"
  },
  {
    "text": "and why uh he you know how he sees elm",
    "start": "546640",
    "end": "550160"
  },
  {
    "text": "uh and and like why he does things the",
    "start": "550160",
    "end": "552000"
  },
  {
    "text": "way he does in this keynote called what",
    "start": "552000",
    "end": "554320"
  },
  {
    "text": "is success",
    "start": "554320",
    "end": "555279"
  },
  {
    "text": "um and he also wrote about some of the",
    "start": "555279",
    "end": "556880"
  },
  {
    "text": "downsides and some of the hard things",
    "start": "556880",
    "end": "558320"
  },
  {
    "text": "about",
    "start": "558320",
    "end": "558720"
  },
  {
    "text": "um you know this approach in the hard",
    "start": "558720",
    "end": "560880"
  },
  {
    "text": "parts of open source",
    "start": "560880",
    "end": "562320"
  },
  {
    "text": "so uh you can sort of contrast this with",
    "start": "562320",
    "end": "564720"
  },
  {
    "text": "uh with how things are run and rust",
    "start": "564720",
    "end": "566720"
  },
  {
    "text": "um so elm is a much smaller operation in",
    "start": "566720",
    "end": "569120"
  },
  {
    "text": "a much smaller language uh",
    "start": "569120",
    "end": "570399"
  },
  {
    "text": "it's one full-time paid developer namely",
    "start": "570399",
    "end": "572320"
  },
  {
    "text": "evan he works at no red ink which is",
    "start": "572320",
    "end": "574080"
  },
  {
    "text": "where i work",
    "start": "574080",
    "end": "574959"
  },
  {
    "text": "and everybody else who contributes is an",
    "start": "574959",
    "end": "576720"
  },
  {
    "text": "unpaid volunteer",
    "start": "576720",
    "end": "578880"
  },
  {
    "text": "so in contrast to russ which is a large",
    "start": "578880",
    "end": "580800"
  },
  {
    "text": "complex language with frequent compiler",
    "start": "580800",
    "end": "582399"
  },
  {
    "text": "releases elm is a small simple language",
    "start": "582399",
    "end": "584800"
  },
  {
    "text": "again intentionally not because of",
    "start": "584800",
    "end": "586320"
  },
  {
    "text": "necessarily resource constraints it's",
    "start": "586320",
    "end": "587760"
  },
  {
    "text": "just that elm wants to be a small simple",
    "start": "587760",
    "end": "589600"
  },
  {
    "text": "language",
    "start": "589600",
    "end": "590480"
  },
  {
    "text": "um that's you know narrowly focused on",
    "start": "590480",
    "end": "592240"
  },
  {
    "text": "one domain um",
    "start": "592240",
    "end": "594000"
  },
  {
    "text": "and it has relatively infrequent",
    "start": "594000",
    "end": "595360"
  },
  {
    "text": "compiler releases so there's not a lot",
    "start": "595360",
    "end": "596880"
  },
  {
    "text": "of churn",
    "start": "596880",
    "end": "597519"
  },
  {
    "text": "uh you know the like breaking changes to",
    "start": "597519",
    "end": "600480"
  },
  {
    "text": "the compiler",
    "start": "600480",
    "end": "601279"
  },
  {
    "text": "really only happen on a scale of years",
    "start": "601279",
    "end": "603360"
  },
  {
    "text": "rather than a scale of months or weeks",
    "start": "603360",
    "end": "605920"
  },
  {
    "text": "um both of them have had a lot of",
    "start": "605920",
    "end": "608880"
  },
  {
    "text": "conferences",
    "start": "608880",
    "end": "609760"
  },
  {
    "text": "so russ has had five different",
    "start": "609760",
    "end": "611120"
  },
  {
    "text": "conferences since like 2016",
    "start": "611120",
    "end": "613120"
  },
  {
    "text": "20 2019 etc elm has had",
    "start": "613120",
    "end": "616959"
  },
  {
    "text": "uh would have had five this year except",
    "start": "616959",
    "end": "618959"
  },
  {
    "text": "that elm japan which was announced for",
    "start": "618959",
    "end": "620480"
  },
  {
    "text": "the first time this year",
    "start": "620480",
    "end": "621519"
  },
  {
    "text": "ended up getting canceled like so many",
    "start": "621519",
    "end": "623200"
  },
  {
    "text": "conferences due to covet 19.",
    "start": "623200",
    "end": "625120"
  },
  {
    "text": "um but both of them have pretty large um",
    "start": "625120",
    "end": "628000"
  },
  {
    "text": "like healthy communities even if those",
    "start": "628000",
    "end": "629760"
  },
  {
    "text": "communities still",
    "start": "629760",
    "end": "630800"
  },
  {
    "text": "pale in comparison to like in rust's",
    "start": "630800",
    "end": "632959"
  },
  {
    "text": "case the c plus plus community which is",
    "start": "632959",
    "end": "634560"
  },
  {
    "text": "much much larger",
    "start": "634560",
    "end": "635680"
  },
  {
    "text": "um and in elm case you know the",
    "start": "635680",
    "end": "637279"
  },
  {
    "text": "javascript community is probably the",
    "start": "637279",
    "end": "639040"
  },
  {
    "text": "largest community of programmers in the",
    "start": "639040",
    "end": "640399"
  },
  {
    "text": "world",
    "start": "640399",
    "end": "641120"
  },
  {
    "text": "um so they're both sort of like large",
    "start": "641120",
    "end": "643600"
  },
  {
    "text": "enough to be self-sustaining and have",
    "start": "643600",
    "end": "644959"
  },
  {
    "text": "healthy communities and healthy",
    "start": "644959",
    "end": "646160"
  },
  {
    "text": "ecosystems",
    "start": "646160",
    "end": "647279"
  },
  {
    "text": "but not so large that they're considered",
    "start": "647279",
    "end": "649120"
  },
  {
    "text": "sort of like mainstream languages yet",
    "start": "649120",
    "end": "651120"
  },
  {
    "start": "650000",
    "end": "1103000"
  },
  {
    "text": "uh we talked about earlier one of the",
    "start": "651120",
    "end": "652640"
  },
  {
    "text": "things that russ and elm have in common",
    "start": "652640",
    "end": "654160"
  },
  {
    "text": "as a sort of shared goal is reliability",
    "start": "654160",
    "end": "656399"
  },
  {
    "text": "that's uh",
    "start": "656399",
    "end": "656880"
  },
  {
    "text": "that word is in both of their sort of uh",
    "start": "656880",
    "end": "658720"
  },
  {
    "text": "one sentence self-description",
    "start": "658720",
    "end": "660079"
  },
  {
    "text": "so let's get a little bit more specific",
    "start": "660079",
    "end": "661440"
  },
  {
    "text": "about what that means",
    "start": "661440",
    "end": "663279"
  },
  {
    "text": "uh so here are some things that are true",
    "start": "663279",
    "end": "664959"
  },
  {
    "text": "of both rust and l",
    "start": "664959",
    "end": "666880"
  },
  {
    "text": "they're both statically type checked",
    "start": "666880",
    "end": "668240"
  },
  {
    "text": "languages they both have sound type",
    "start": "668240",
    "end": "670720"
  },
  {
    "text": "systems so",
    "start": "670720",
    "end": "671519"
  },
  {
    "text": "some languages like notably typescript",
    "start": "671519",
    "end": "673440"
  },
  {
    "text": "which is often considered a",
    "start": "673440",
    "end": "674959"
  },
  {
    "text": "you know a competitor to elm um there",
    "start": "674959",
    "end": "677519"
  },
  {
    "text": "the type system is",
    "start": "677519",
    "end": "678640"
  },
  {
    "text": "uh unsaid unsound which means that even",
    "start": "678640",
    "end": "681519"
  },
  {
    "text": "if the type checker says hey all of your",
    "start": "681519",
    "end": "683360"
  },
  {
    "text": "types look good",
    "start": "683360",
    "end": "684160"
  },
  {
    "text": "you might actually still get runtime",
    "start": "684160",
    "end": "686079"
  },
  {
    "text": "type mismatches because the sometimes",
    "start": "686079",
    "end": "688240"
  },
  {
    "text": "the compiler is incorrect",
    "start": "688240",
    "end": "689760"
  },
  {
    "text": "it thinks it's got the types right but",
    "start": "689760",
    "end": "691120"
  },
  {
    "text": "actually it's it's not right um",
    "start": "691120",
    "end": "693040"
  },
  {
    "text": "both of these languages have sound type",
    "start": "693040",
    "end": "694640"
  },
  {
    "text": "systems where if the compiler says these",
    "start": "694640",
    "end": "696320"
  },
  {
    "text": "are the types those actually are the",
    "start": "696320",
    "end": "697680"
  },
  {
    "text": "types at runtime",
    "start": "697680",
    "end": "699120"
  },
  {
    "text": "worth noting that there are sort of",
    "start": "699120",
    "end": "700560"
  },
  {
    "text": "exceptions to that in the case of",
    "start": "700560",
    "end": "702079"
  },
  {
    "text": "interop so if rust is doing some like",
    "start": "702079",
    "end": "704320"
  },
  {
    "text": "unsafe stuff with c it's possible that c",
    "start": "704320",
    "end": "706800"
  },
  {
    "text": "could mutate some memory and make the",
    "start": "706800",
    "end": "708480"
  },
  {
    "text": "types be wrong at runtime",
    "start": "708480",
    "end": "710240"
  },
  {
    "text": "um l does have javascript interop and uh",
    "start": "710240",
    "end": "713040"
  },
  {
    "text": "it has",
    "start": "713040",
    "end": "713440"
  },
  {
    "text": "stricter guarantees than rust but",
    "start": "713440",
    "end": "715760"
  },
  {
    "text": "certainly if you're using javascript",
    "start": "715760",
    "end": "717040"
  },
  {
    "text": "interop",
    "start": "717040",
    "end": "717760"
  },
  {
    "text": "any of that javascript code you write",
    "start": "717760",
    "end": "719200"
  },
  {
    "text": "plays by javascript's rules rather than",
    "start": "719200",
    "end": "720959"
  },
  {
    "text": "ellen's rules",
    "start": "720959",
    "end": "721839"
  },
  {
    "text": "so all of your own code you can rely on",
    "start": "721839",
    "end": "723440"
  },
  {
    "text": "if the compiler says it's this type",
    "start": "723440",
    "end": "725040"
  },
  {
    "text": "that's actually going to be the type at",
    "start": "725040",
    "end": "726240"
  },
  {
    "text": "runtime you'll never get a runtime type",
    "start": "726240",
    "end": "728160"
  },
  {
    "text": "mismatch from your elm code",
    "start": "728160",
    "end": "729680"
  },
  {
    "text": "but if you're doing javascript interop",
    "start": "729680",
    "end": "731040"
  },
  {
    "text": "you might get some there",
    "start": "731040",
    "end": "732959"
  },
  {
    "text": "neither language has an any type which",
    "start": "732959",
    "end": "734880"
  },
  {
    "text": "is something you also find in",
    "start": "734880",
    "end": "736399"
  },
  {
    "text": "in languages like typescript this is",
    "start": "736399",
    "end": "738800"
  },
  {
    "text": "sort of like an escape patch that says",
    "start": "738800",
    "end": "740160"
  },
  {
    "text": "hey",
    "start": "740160",
    "end": "740560"
  },
  {
    "text": "compiler you know i know that it looks",
    "start": "740560",
    "end": "742480"
  },
  {
    "text": "like it this is one particular type but",
    "start": "742480",
    "end": "744480"
  },
  {
    "text": "actually trust me i think it's going to",
    "start": "744480",
    "end": "745680"
  },
  {
    "text": "be another type",
    "start": "745680",
    "end": "746880"
  },
  {
    "text": "we're in cnc plus plus you can have",
    "start": "746880",
    "end": "748399"
  },
  {
    "text": "unsafe casts um",
    "start": "748399",
    "end": "750720"
  },
  {
    "text": "both of these languages don't have a",
    "start": "750720",
    "end": "752000"
  },
  {
    "text": "first class concept of this which again",
    "start": "752000",
    "end": "753440"
  },
  {
    "text": "means that you can sort of trust the",
    "start": "753440",
    "end": "754720"
  },
  {
    "text": "types a lot more",
    "start": "754720",
    "end": "756720"
  },
  {
    "text": "neither of them has what's known as the",
    "start": "756720",
    "end": "758639"
  },
  {
    "text": "billion dollar mistake",
    "start": "758639",
    "end": "759920"
  },
  {
    "text": "so this is uh that term is coined by sir",
    "start": "759920",
    "end": "762240"
  },
  {
    "text": "tony horror who introduced the uh the",
    "start": "762240",
    "end": "764079"
  },
  {
    "text": "concept of the null reference",
    "start": "764079",
    "end": "765680"
  },
  {
    "text": "um which has led to things like null",
    "start": "765680",
    "end": "767519"
  },
  {
    "text": "pointer exception undefined is not a",
    "start": "767519",
    "end": "769200"
  },
  {
    "text": "function",
    "start": "769200",
    "end": "769920"
  },
  {
    "text": "uh all of those fun things uh nil error",
    "start": "769920",
    "end": "772959"
  },
  {
    "text": "um and he said that he considered this",
    "start": "772959",
    "end": "774800"
  },
  {
    "text": "his billion dollar mistake because he",
    "start": "774800",
    "end": "776720"
  },
  {
    "text": "believes that since he introduced it",
    "start": "776720",
    "end": "778480"
  },
  {
    "text": "decades ago and and like the year 2000",
    "start": "778480",
    "end": "780959"
  },
  {
    "text": "he thinks that it's caused more than a",
    "start": "780959",
    "end": "782320"
  },
  {
    "text": "billion dollars in economic damage and",
    "start": "782320",
    "end": "784000"
  },
  {
    "text": "he regrets having",
    "start": "784000",
    "end": "785279"
  },
  {
    "text": "introduced that to the world um so",
    "start": "785279",
    "end": "787360"
  },
  {
    "text": "neither rust nor elm",
    "start": "787360",
    "end": "788560"
  },
  {
    "text": "have that you know null or nil or",
    "start": "788560",
    "end": "790399"
  },
  {
    "text": "undefined or anything like that",
    "start": "790399",
    "end": "791839"
  },
  {
    "text": "um they handle those those types of",
    "start": "791839",
    "end": "793760"
  },
  {
    "text": "scenarios where a value might or might",
    "start": "793760",
    "end": "795519"
  },
  {
    "text": "not be present",
    "start": "795519",
    "end": "796480"
  },
  {
    "text": "uh using tagged unions other techniques",
    "start": "796480",
    "end": "798959"
  },
  {
    "text": "like that",
    "start": "798959",
    "end": "801360"
  },
  {
    "text": "and finally both of them are immutable",
    "start": "801360",
    "end": "802959"
  },
  {
    "text": "by default and this is where they both",
    "start": "802959",
    "end": "804639"
  },
  {
    "text": "diverge a little bit",
    "start": "804639",
    "end": "806000"
  },
  {
    "text": "by default rust is all rust values are",
    "start": "806000",
    "end": "809040"
  },
  {
    "text": "immutable",
    "start": "809040",
    "end": "809920"
  },
  {
    "text": "but rust has sort of opt-in mutation you",
    "start": "809920",
    "end": "811920"
  },
  {
    "text": "can tag something as saying this is a",
    "start": "811920",
    "end": "813600"
  },
  {
    "text": "mutable",
    "start": "813600",
    "end": "814079"
  },
  {
    "text": "value and i can mutate it but it has",
    "start": "814079",
    "end": "816399"
  },
  {
    "text": "additional restrictions on how that",
    "start": "816399",
    "end": "817760"
  },
  {
    "text": "works",
    "start": "817760",
    "end": "818399"
  },
  {
    "text": "um whereas elm goes in the other",
    "start": "818399",
    "end": "819839"
  },
  {
    "text": "direction and says not only is",
    "start": "819839",
    "end": "821199"
  },
  {
    "text": "everything immutable by default",
    "start": "821199",
    "end": "822959"
  },
  {
    "text": "everything's immutable always and in",
    "start": "822959",
    "end": "824560"
  },
  {
    "text": "fact elm takes it a step further and",
    "start": "824560",
    "end": "826000"
  },
  {
    "text": "says all",
    "start": "826000",
    "end": "826560"
  },
  {
    "text": "l functions are pure like they can't",
    "start": "826560",
    "end": "828079"
  },
  {
    "text": "have any side effects",
    "start": "828079",
    "end": "829600"
  },
  {
    "text": "um so l is a pure functional language",
    "start": "829600",
    "end": "831600"
  },
  {
    "text": "rust is an imperative language",
    "start": "831600",
    "end": "833120"
  },
  {
    "text": "but both of them agree on sort of",
    "start": "833120",
    "end": "834560"
  },
  {
    "text": "immutability being the correct default",
    "start": "834560",
    "end": "836800"
  },
  {
    "text": "and uh and only if you sort of um",
    "start": "836800",
    "end": "839839"
  },
  {
    "text": "are opting into mutation in rust can you",
    "start": "839839",
    "end": "842639"
  },
  {
    "text": "actually get that",
    "start": "842639",
    "end": "844480"
  },
  {
    "text": "um some of rust's uh sort of like banner",
    "start": "844480",
    "end": "847440"
  },
  {
    "text": "reliability features are",
    "start": "847440",
    "end": "848959"
  },
  {
    "text": "memory safety and and lack of data races",
    "start": "848959",
    "end": "851600"
  },
  {
    "text": "uh so data races refers to",
    "start": "851600",
    "end": "853760"
  },
  {
    "text": "in concurrency when you have like let's",
    "start": "853760",
    "end": "855600"
  },
  {
    "text": "say two threads that are trying to",
    "start": "855600",
    "end": "857040"
  },
  {
    "text": "access",
    "start": "857040",
    "end": "857600"
  },
  {
    "text": "uh the same value there's a pretty big",
    "start": "857600",
    "end": "860000"
  },
  {
    "text": "difference between whether they can both",
    "start": "860000",
    "end": "861440"
  },
  {
    "text": "read from that value",
    "start": "861440",
    "end": "862720"
  },
  {
    "text": "or whether one or both of them can write",
    "start": "862720",
    "end": "865040"
  },
  {
    "text": "to that value at the same time",
    "start": "865040",
    "end": "867040"
  },
  {
    "text": "if there are potentially multiple",
    "start": "867040",
    "end": "868880"
  },
  {
    "text": "threads able to write to the same value",
    "start": "868880",
    "end": "870720"
  },
  {
    "text": "at the same time",
    "start": "870720",
    "end": "872000"
  },
  {
    "text": "that is to mutate them at the same time",
    "start": "872000",
    "end": "873760"
  },
  {
    "text": "you can get what's known as data races",
    "start": "873760",
    "end": "875199"
  },
  {
    "text": "which can cause all sorts of problems",
    "start": "875199",
    "end": "877120"
  },
  {
    "text": "so rust's opt-in mutation comes with a",
    "start": "877120",
    "end": "879440"
  },
  {
    "text": "lot of compiler guarantees to make sure",
    "start": "879440",
    "end": "881279"
  },
  {
    "text": "that",
    "start": "881279",
    "end": "881680"
  },
  {
    "text": "you can only have one thing mutating a",
    "start": "881680",
    "end": "884079"
  },
  {
    "text": "particular value that's being shared by",
    "start": "884079",
    "end": "885680"
  },
  {
    "text": "multiple threads",
    "start": "885680",
    "end": "886639"
  },
  {
    "text": "at the same time so they're able to rule",
    "start": "886639",
    "end": "888240"
  },
  {
    "text": "out data races as an entire category of",
    "start": "888240",
    "end": "890240"
  },
  {
    "text": "errors",
    "start": "890240",
    "end": "891279"
  },
  {
    "text": "the other one that's part of rust's sort",
    "start": "891279",
    "end": "892959"
  },
  {
    "text": "of tagline of reliability is memory",
    "start": "892959",
    "end": "894880"
  },
  {
    "text": "safety",
    "start": "894880",
    "end": "895680"
  },
  {
    "text": "and when they talk about memory safety",
    "start": "895680",
    "end": "897040"
  },
  {
    "text": "what they mean are the types of bugs",
    "start": "897040",
    "end": "898880"
  },
  {
    "text": "that you get in c",
    "start": "898880",
    "end": "899839"
  },
  {
    "text": "and c plus from being able to write to",
    "start": "899839",
    "end": "902880"
  },
  {
    "text": "parts of memory that you should not be",
    "start": "902880",
    "end": "904399"
  },
  {
    "text": "able to write to and those can cause not",
    "start": "904399",
    "end": "906399"
  },
  {
    "text": "only bugs but also",
    "start": "906399",
    "end": "907600"
  },
  {
    "text": "critical security vulnerabilities so",
    "start": "907600",
    "end": "909839"
  },
  {
    "text": "this is a graph",
    "start": "909839",
    "end": "910639"
  },
  {
    "text": "of a report that came out from microsoft",
    "start": "910639",
    "end": "913199"
  },
  {
    "text": "about",
    "start": "913199",
    "end": "913680"
  },
  {
    "text": "sort of cves that is like really",
    "start": "913680",
    "end": "915279"
  },
  {
    "text": "critical security vulnerabilities",
    "start": "915279",
    "end": "917199"
  },
  {
    "text": "um that have been uh published by year",
    "start": "917199",
    "end": "920399"
  },
  {
    "text": "and they broke these down in terms of",
    "start": "920399",
    "end": "922240"
  },
  {
    "text": "which ones were caused by memory safety",
    "start": "922240",
    "end": "924160"
  },
  {
    "text": "problems versus non-memory safety",
    "start": "924160",
    "end": "925920"
  },
  {
    "text": "problems",
    "start": "925920",
    "end": "926639"
  },
  {
    "text": "so the dark part of the graph those are",
    "start": "926639",
    "end": "928480"
  },
  {
    "text": "the ones that were caused by memory",
    "start": "928480",
    "end": "930000"
  },
  {
    "text": "safety and this is going all the way",
    "start": "930000",
    "end": "931360"
  },
  {
    "text": "back to 2006 so more than a decade of",
    "start": "931360",
    "end": "933440"
  },
  {
    "text": "data",
    "start": "933440",
    "end": "934399"
  },
  {
    "text": "and as you can see about 70 percent of",
    "start": "934399",
    "end": "936480"
  },
  {
    "text": "the the memory of the um",
    "start": "936480",
    "end": "939040"
  },
  {
    "text": "the critical vulnerabilities were caused",
    "start": "939040",
    "end": "941519"
  },
  {
    "text": "by memory safety problems",
    "start": "941519",
    "end": "943759"
  },
  {
    "text": "so the fact that safe rust is able to",
    "start": "943759",
    "end": "945600"
  },
  {
    "text": "rule these out with the compiler and",
    "start": "945600",
    "end": "947600"
  },
  {
    "text": "make it so that you don't have to worry",
    "start": "947600",
    "end": "948880"
  },
  {
    "text": "about these anymore",
    "start": "948880",
    "end": "949920"
  },
  {
    "text": "um is a really big deal now again that's",
    "start": "949920",
    "end": "951920"
  },
  {
    "text": "that's only true if you're writing just",
    "start": "951920",
    "end": "953519"
  },
  {
    "text": "save rust you can still potentially have",
    "start": "953519",
    "end": "955680"
  },
  {
    "text": "those problems if you're doing",
    "start": "955680",
    "end": "956880"
  },
  {
    "text": "c ffi or things like that um but you can",
    "start": "956880",
    "end": "959600"
  },
  {
    "text": "imagine that if",
    "start": "959600",
    "end": "960639"
  },
  {
    "text": "uh all of the code that we're currently",
    "start": "960639",
    "end": "962320"
  },
  {
    "text": "written in c plus plus were somehow",
    "start": "962320",
    "end": "963920"
  },
  {
    "text": "magically",
    "start": "963920",
    "end": "964639"
  },
  {
    "text": "written in rust instead this number",
    "start": "964639",
    "end": "966560"
  },
  {
    "text": "would be so much lower that that a lot",
    "start": "966560",
    "end": "968240"
  },
  {
    "text": "of these",
    "start": "968240",
    "end": "968800"
  },
  {
    "text": "critical vulnerabilities would just go",
    "start": "968800",
    "end": "971040"
  },
  {
    "text": "away",
    "start": "971040",
    "end": "972000"
  },
  {
    "text": "um so this is a really important part of",
    "start": "972000",
    "end": "973920"
  },
  {
    "text": "sort of rust's identity as a language",
    "start": "973920",
    "end": "975440"
  },
  {
    "text": "that's",
    "start": "975440",
    "end": "975920"
  },
  {
    "text": "fast enough to compete with c and c plus",
    "start": "975920",
    "end": "977839"
  },
  {
    "text": "plus but",
    "start": "977839",
    "end": "979360"
  },
  {
    "text": "much much much safer and and much less",
    "start": "979360",
    "end": "981519"
  },
  {
    "text": "error-prone so this is what they mean by",
    "start": "981519",
    "end": "983040"
  },
  {
    "text": "reliability",
    "start": "983040",
    "end": "985120"
  },
  {
    "text": "elm goes a little bit further and has a",
    "start": "985120",
    "end": "986720"
  },
  {
    "text": "tagline of no runtime exceptions at all",
    "start": "986720",
    "end": "989040"
  },
  {
    "text": "like no crashing",
    "start": "989040",
    "end": "990079"
  },
  {
    "text": "so not only do you have memory safety",
    "start": "990079",
    "end": "992320"
  },
  {
    "text": "and not only do you",
    "start": "992320",
    "end": "993360"
  },
  {
    "text": "not have data races but you also don't",
    "start": "993360",
    "end": "995360"
  },
  {
    "text": "even have uh runtime exceptions so elm",
    "start": "995360",
    "end": "997600"
  },
  {
    "text": "literally does not have try catch",
    "start": "997600",
    "end": "999199"
  },
  {
    "text": "because",
    "start": "999199",
    "end": "999839"
  },
  {
    "text": "all of the ways that it has with dealing",
    "start": "999839",
    "end": "1001360"
  },
  {
    "text": "with runtime issues like that",
    "start": "1001360",
    "end": "1002959"
  },
  {
    "text": "um are are dealt with in other ways that",
    "start": "1002959",
    "end": "1005600"
  },
  {
    "text": "don't crash",
    "start": "1005600",
    "end": "1006399"
  },
  {
    "text": "uh now it's not that's not to say that",
    "start": "1006399",
    "end": "1008880"
  },
  {
    "text": "it's impossible to crash an elm program",
    "start": "1008880",
    "end": "1010880"
  },
  {
    "text": "um obviously like you can get a stack",
    "start": "1010880",
    "end": "1012720"
  },
  {
    "text": "overflow uh if",
    "start": "1012720",
    "end": "1014079"
  },
  {
    "text": "you run out of stack space there are",
    "start": "1014079",
    "end": "1015680"
  },
  {
    "text": "various ways that you you can crash an",
    "start": "1015680",
    "end": "1017440"
  },
  {
    "text": "elm program",
    "start": "1017440",
    "end": "1018240"
  },
  {
    "text": "but in practice it's so rare to see an",
    "start": "1018240",
    "end": "1021199"
  },
  {
    "text": "elm program actually crash",
    "start": "1021199",
    "end": "1022880"
  },
  {
    "text": "that people who use it have generally",
    "start": "1022880",
    "end": "1024558"
  },
  {
    "text": "sort of stopped thinking about it and",
    "start": "1024559",
    "end": "1026319"
  },
  {
    "text": "don't really remember that runtime",
    "start": "1026319",
    "end": "1027520"
  },
  {
    "text": "exceptions are a thing until they maybe",
    "start": "1027520",
    "end": "1029120"
  },
  {
    "text": "do some javascript interop or something",
    "start": "1029120",
    "end": "1030558"
  },
  {
    "text": "like that",
    "start": "1030559",
    "end": "1032079"
  },
  {
    "text": "to be more concrete about this um this",
    "start": "1032079",
    "end": "1033760"
  },
  {
    "text": "is a graph of the company where i work",
    "start": "1033760",
    "end": "1035280"
  },
  {
    "text": "no red ink",
    "start": "1035280",
    "end": "1036160"
  },
  {
    "text": "um and this is going back to 2015 uh",
    "start": "1036160",
    "end": "1039038"
  },
  {
    "text": "which is when we started using elm",
    "start": "1039039",
    "end": "1040798"
  },
  {
    "text": "um and uh these are our production",
    "start": "1040799",
    "end": "1042880"
  },
  {
    "text": "runtime exceptions we have like a",
    "start": "1042880",
    "end": "1044640"
  },
  {
    "text": "logging service that detects whenever",
    "start": "1044640",
    "end": "1046160"
  },
  {
    "text": "there's a runtime exception thrown in",
    "start": "1046160",
    "end": "1047678"
  },
  {
    "text": "the browser",
    "start": "1047679",
    "end": "1048720"
  },
  {
    "text": "and you can see there have been like",
    "start": "1048720",
    "end": "1050000"
  },
  {
    "text": "tens of thousands from our legacy",
    "start": "1050000",
    "end": "1051520"
  },
  {
    "text": "javascript",
    "start": "1051520",
    "end": "1052000"
  },
  {
    "text": "code um our own code it's not zero it's",
    "start": "1052000",
    "end": "1054720"
  },
  {
    "text": "not literally zero runtime exceptions",
    "start": "1054720",
    "end": "1056559"
  },
  {
    "text": "but",
    "start": "1056559",
    "end": "1056880"
  },
  {
    "text": "it's zero pixels on the graph because",
    "start": "1056880",
    "end": "1058559"
  },
  {
    "text": "the number of times that it's happened",
    "start": "1058559",
    "end": "1060160"
  },
  {
    "text": "in the last five years is so low that",
    "start": "1060160",
    "end": "1062559"
  },
  {
    "text": "it's it's not even visible on a graph",
    "start": "1062559",
    "end": "1064160"
  },
  {
    "text": "like this",
    "start": "1064160",
    "end": "1064960"
  },
  {
    "text": "so it's not literally zero but the point",
    "start": "1064960",
    "end": "1067280"
  },
  {
    "text": "is that it's negligible like we don't",
    "start": "1067280",
    "end": "1068880"
  },
  {
    "text": "think about",
    "start": "1068880",
    "end": "1069840"
  },
  {
    "text": "our elm code crashing at runtime or you",
    "start": "1069840",
    "end": "1071760"
  },
  {
    "text": "know in the browser",
    "start": "1071760",
    "end": "1072880"
  },
  {
    "text": "um ever really i mean it's just not",
    "start": "1072880",
    "end": "1075280"
  },
  {
    "text": "something that we worry about anymore",
    "start": "1075280",
    "end": "1076720"
  },
  {
    "text": "um and it hasn't been for years now that",
    "start": "1076720",
    "end": "1078400"
  },
  {
    "text": "our whole front end essentially",
    "start": "1078400",
    "end": "1080000"
  },
  {
    "text": "has become uh elm plus a tiny bit of",
    "start": "1080000",
    "end": "1082320"
  },
  {
    "text": "legacy javascript",
    "start": "1082320",
    "end": "1083919"
  },
  {
    "text": "so this is a much stronger guarantee but",
    "start": "1083919",
    "end": "1085520"
  },
  {
    "text": "again worth noting that",
    "start": "1085520",
    "end": "1087120"
  },
  {
    "text": "elm is in part able to do this because",
    "start": "1087120",
    "end": "1089360"
  },
  {
    "text": "it has that narrower focus than rust",
    "start": "1089360",
    "end": "1091360"
  },
  {
    "text": "it's it's just about browser-based uis",
    "start": "1091360",
    "end": "1093760"
  },
  {
    "text": "as a garbage collector um it's a lot",
    "start": "1093760",
    "end": "1096000"
  },
  {
    "text": "easier to",
    "start": "1096000",
    "end": "1096880"
  },
  {
    "text": "try and aim for something uh this high",
    "start": "1096880",
    "end": "1100160"
  },
  {
    "text": "uh when you're you have that narrower",
    "start": "1100160",
    "end": "1101840"
  },
  {
    "text": "focus",
    "start": "1101840",
    "end": "1103600"
  },
  {
    "start": "1103000",
    "end": "1401000"
  },
  {
    "text": "so this is the uh the computer language",
    "start": "1103600",
    "end": "1105520"
  },
  {
    "text": "benchmarks game uh this is a a benchmark",
    "start": "1105520",
    "end": "1108320"
  },
  {
    "text": "that compares a whole bunch of different",
    "start": "1108320",
    "end": "1109520"
  },
  {
    "text": "programming languages",
    "start": "1109520",
    "end": "1110640"
  },
  {
    "text": "um in terms of uh like how they perform",
    "start": "1110640",
    "end": "1113360"
  },
  {
    "text": "on",
    "start": "1113360",
    "end": "1113679"
  },
  {
    "text": "various like a whole suite of benchmarks",
    "start": "1113679",
    "end": "1116080"
  },
  {
    "text": "um worth noting that they they do do a",
    "start": "1116080",
    "end": "1118160"
  },
  {
    "text": "good job saying this is a game",
    "start": "1118160",
    "end": "1119760"
  },
  {
    "text": "you know these are uh like performance",
    "start": "1119760",
    "end": "1121919"
  },
  {
    "text": "uh measurements that are not scientific",
    "start": "1121919",
    "end": "1124080"
  },
  {
    "text": "they're based on like how did the people",
    "start": "1124080",
    "end": "1125919"
  },
  {
    "text": "who implemented the particular language",
    "start": "1125919",
    "end": "1127600"
  },
  {
    "text": "specific implementations of these",
    "start": "1127600",
    "end": "1129440"
  },
  {
    "text": "um do them like maybe if they use",
    "start": "1129440",
    "end": "1131600"
  },
  {
    "text": "different libraries they'll get better",
    "start": "1131600",
    "end": "1132960"
  },
  {
    "text": "performance",
    "start": "1132960",
    "end": "1133679"
  },
  {
    "text": "maybe if they spent more time on them",
    "start": "1133679",
    "end": "1135120"
  },
  {
    "text": "they'll get better performance but",
    "start": "1135120",
    "end": "1136640"
  },
  {
    "text": "overall it's one of the best comparisons",
    "start": "1136640",
    "end": "1138480"
  },
  {
    "text": "we have to give us at least kind of a",
    "start": "1138480",
    "end": "1139840"
  },
  {
    "text": "ballpark",
    "start": "1139840",
    "end": "1140480"
  },
  {
    "text": "idea of of how these languages compare",
    "start": "1140480",
    "end": "1144320"
  },
  {
    "text": "so perhaps unsurprisingly the top of the",
    "start": "1144320",
    "end": "1146000"
  },
  {
    "text": "heap or c and c plus plus",
    "start": "1146000",
    "end": "1148240"
  },
  {
    "text": "middle of the pact is is java swift is",
    "start": "1148240",
    "end": "1150799"
  },
  {
    "text": "actually right here right next to go",
    "start": "1150799",
    "end": "1152480"
  },
  {
    "text": "so uh very very similar there in terms",
    "start": "1152480",
    "end": "1154720"
  },
  {
    "text": "of how they do on these particular",
    "start": "1154720",
    "end": "1155919"
  },
  {
    "text": "benchmarks",
    "start": "1155919",
    "end": "1156799"
  },
  {
    "text": "um then you have javascript python and",
    "start": "1156799",
    "end": "1158799"
  },
  {
    "text": "ruby rounding out some of",
    "start": "1158799",
    "end": "1160320"
  },
  {
    "text": "the most popular languages um rust is",
    "start": "1160320",
    "end": "1163280"
  },
  {
    "text": "right there next to c and c",
    "start": "1163280",
    "end": "1164480"
  },
  {
    "text": "plus plus it's not quite as fast at",
    "start": "1164480",
    "end": "1166640"
  },
  {
    "text": "least on these benchmarks as c and c",
    "start": "1166640",
    "end": "1168160"
  },
  {
    "text": "plus plus",
    "start": "1168160",
    "end": "1168960"
  },
  {
    "text": "which probably makes sense because some",
    "start": "1168960",
    "end": "1170480"
  },
  {
    "text": "of the ways that rust achieves some of",
    "start": "1170480",
    "end": "1171919"
  },
  {
    "text": "its guarantees are by inserting things",
    "start": "1171919",
    "end": "1173600"
  },
  {
    "text": "like mandatory",
    "start": "1173600",
    "end": "1174960"
  },
  {
    "text": "array bounds checks and things like that",
    "start": "1174960",
    "end": "1176640"
  },
  {
    "text": "which which do have some",
    "start": "1176640",
    "end": "1178320"
  },
  {
    "text": "runtime overhead um but overall you can",
    "start": "1178320",
    "end": "1181120"
  },
  {
    "text": "see it's it's incredibly incredibly fast",
    "start": "1181120",
    "end": "1183120"
  },
  {
    "text": "this is not a language that's sort of",
    "start": "1183120",
    "end": "1184559"
  },
  {
    "text": "competing with javascript on performance",
    "start": "1184559",
    "end": "1186480"
  },
  {
    "text": "it really is competing with c and c",
    "start": "1186480",
    "end": "1188000"
  },
  {
    "text": "plus plus and and really doing quite",
    "start": "1188000",
    "end": "1189919"
  },
  {
    "text": "well um",
    "start": "1189919",
    "end": "1191280"
  },
  {
    "text": "so this is part of the reason that you",
    "start": "1191280",
    "end": "1192880"
  },
  {
    "text": "know i think it's maybe not the right",
    "start": "1192880",
    "end": "1194960"
  },
  {
    "text": "comparison to say oh",
    "start": "1194960",
    "end": "1196240"
  },
  {
    "text": "should i use roster should i use go",
    "start": "1196240",
    "end": "1198400"
  },
  {
    "text": "there's a very large gap between the two",
    "start": "1198400",
    "end": "1200240"
  },
  {
    "text": "in terms of performance",
    "start": "1200240",
    "end": "1201440"
  },
  {
    "text": "but also a very large gap between the",
    "start": "1201440",
    "end": "1202960"
  },
  {
    "text": "two in terms of compile time in terms of",
    "start": "1202960",
    "end": "1204840"
  },
  {
    "text": "simplicity",
    "start": "1204840",
    "end": "1206000"
  },
  {
    "text": "in terms of like how long it takes you",
    "start": "1206000",
    "end": "1208720"
  },
  {
    "text": "to ship a particular feature",
    "start": "1208720",
    "end": "1210559"
  },
  {
    "text": "one of the things we talked about is is",
    "start": "1210559",
    "end": "1212080"
  },
  {
    "text": "russ has these additional checks for",
    "start": "1212080",
    "end": "1213520"
  },
  {
    "text": "concurrency to prevent data races",
    "start": "1213520",
    "end": "1215120"
  },
  {
    "text": "at compile time and the result is what's",
    "start": "1215120",
    "end": "1217440"
  },
  {
    "text": "called the borrow checker",
    "start": "1217440",
    "end": "1218640"
  },
  {
    "text": "and one of the things that's true about",
    "start": "1218640",
    "end": "1220400"
  },
  {
    "text": "the borrow checker and rust is that",
    "start": "1220400",
    "end": "1222240"
  },
  {
    "text": "it's a new category of errors that you",
    "start": "1222240",
    "end": "1224559"
  },
  {
    "text": "can get at compile time that you just",
    "start": "1224559",
    "end": "1225760"
  },
  {
    "text": "cannot get in any of these languages",
    "start": "1225760",
    "end": "1227520"
  },
  {
    "text": "so you have your type checker and then",
    "start": "1227520",
    "end": "1228640"
  },
  {
    "text": "you have a totally separate checking",
    "start": "1228640",
    "end": "1230240"
  },
  {
    "text": "step",
    "start": "1230240",
    "end": "1230559"
  },
  {
    "text": "on top of that which is just something",
    "start": "1230559",
    "end": "1231919"
  },
  {
    "text": "that you have to sort of step through",
    "start": "1231919",
    "end": "1233919"
  },
  {
    "text": "and",
    "start": "1233919",
    "end": "1234320"
  },
  {
    "text": "deal with that sort of reduces your",
    "start": "1234320",
    "end": "1236400"
  },
  {
    "text": "iteration time to build a particular",
    "start": "1236400",
    "end": "1237840"
  },
  {
    "text": "feature",
    "start": "1237840",
    "end": "1238559"
  },
  {
    "text": "but again if you need this level of",
    "start": "1238559",
    "end": "1240080"
  },
  {
    "text": "performance that can very easily be",
    "start": "1240080",
    "end": "1242240"
  },
  {
    "text": "worth it",
    "start": "1242240",
    "end": "1244000"
  },
  {
    "text": "um looking at elm in the browser uh this",
    "start": "1244000",
    "end": "1246240"
  },
  {
    "text": "is a lighthouse performance comparing",
    "start": "1246240",
    "end": "1248400"
  },
  {
    "text": "a lot of different javascript frameworks",
    "start": "1248400",
    "end": "1250559"
  },
  {
    "text": "so again l is often compared to",
    "start": "1250559",
    "end": "1251919"
  },
  {
    "text": "frameworks and this is",
    "start": "1251919",
    "end": "1253120"
  },
  {
    "text": "no exception so here in the middle you",
    "start": "1253120",
    "end": "1255120"
  },
  {
    "text": "can see um the most popular ones react",
    "start": "1255120",
    "end": "1257600"
  },
  {
    "text": "angular and view and they're sort of",
    "start": "1257600",
    "end": "1259360"
  },
  {
    "text": "middle of the pack in terms of their",
    "start": "1259360",
    "end": "1260720"
  },
  {
    "text": "lighthouse scores for this application",
    "start": "1260720",
    "end": "1262720"
  },
  {
    "text": "this is a similar to the computer",
    "start": "1262720",
    "end": "1264400"
  },
  {
    "text": "language benchmarks game this is what's",
    "start": "1264400",
    "end": "1265840"
  },
  {
    "text": "called the real world app it's basically",
    "start": "1265840",
    "end": "1267280"
  },
  {
    "text": "an application where",
    "start": "1267280",
    "end": "1268640"
  },
  {
    "text": "all of these languages or all these um",
    "start": "1268640",
    "end": "1270640"
  },
  {
    "text": "frameworks and and elm were also",
    "start": "1270640",
    "end": "1272640"
  },
  {
    "text": "uh used to to build the same application",
    "start": "1272640",
    "end": "1275039"
  },
  {
    "text": "to the same specification",
    "start": "1275039",
    "end": "1276640"
  },
  {
    "text": "and then they're run through this series",
    "start": "1276640",
    "end": "1277840"
  },
  {
    "text": "of benchmarks um",
    "start": "1277840",
    "end": "1279679"
  },
  {
    "text": "uh russ running on webassembly actually",
    "start": "1279679",
    "end": "1281919"
  },
  {
    "text": "did better than all the leading",
    "start": "1281919",
    "end": "1283200"
  },
  {
    "text": "javascript frameworks",
    "start": "1283200",
    "end": "1284240"
  },
  {
    "text": "uh it's this is you know again due to",
    "start": "1284240",
    "end": "1287039"
  },
  {
    "text": "the fact that",
    "start": "1287039",
    "end": "1287840"
  },
  {
    "text": "russ is able to compile a very very",
    "start": "1287840",
    "end": "1289679"
  },
  {
    "text": "runtime efficient code",
    "start": "1289679",
    "end": "1291600"
  },
  {
    "text": "running on webassembly it was able to do",
    "start": "1291600",
    "end": "1293120"
  },
  {
    "text": "a really good job",
    "start": "1293120",
    "end": "1294880"
  },
  {
    "text": "interestingly it still was not doing as",
    "start": "1294880",
    "end": "1296559"
  },
  {
    "text": "well as elm which was tied for first",
    "start": "1296559",
    "end": "1298799"
  },
  {
    "text": "place all three of the things that got",
    "start": "1298799",
    "end": "1301280"
  },
  {
    "text": "a score of 99 on the lighthouse",
    "start": "1301280",
    "end": "1303520"
  },
  {
    "text": "performance",
    "start": "1303520",
    "end": "1304320"
  },
  {
    "text": "almost one of them uh you know even",
    "start": "1304320",
    "end": "1306799"
  },
  {
    "text": "though elm was compiling the javascript",
    "start": "1306799",
    "end": "1308320"
  },
  {
    "text": "and again this speaks to elm's focus elm",
    "start": "1308320",
    "end": "1310480"
  },
  {
    "text": "is able to because it's a programming",
    "start": "1310480",
    "end": "1311919"
  },
  {
    "text": "language designed to be",
    "start": "1311919",
    "end": "1313440"
  },
  {
    "text": "used for browser-based uis it's able to",
    "start": "1313440",
    "end": "1315840"
  },
  {
    "text": "do a really good job",
    "start": "1315840",
    "end": "1316960"
  },
  {
    "text": "like excelling in that domain another of",
    "start": "1316960",
    "end": "1320000"
  },
  {
    "text": "elm's goals is not just to have really",
    "start": "1320000",
    "end": "1321520"
  },
  {
    "text": "good runtime performance but another",
    "start": "1321520",
    "end": "1322880"
  },
  {
    "text": "thing that's very important for",
    "start": "1322880",
    "end": "1324080"
  },
  {
    "text": "browser-based apps is compiled asset",
    "start": "1324080",
    "end": "1326320"
  },
  {
    "text": "size in other words how long",
    "start": "1326320",
    "end": "1327679"
  },
  {
    "text": "people take to download and execute your",
    "start": "1327679",
    "end": "1329760"
  },
  {
    "text": "application especially on mobile devices",
    "start": "1329760",
    "end": "1332400"
  },
  {
    "text": "um so this is the same application but",
    "start": "1332400",
    "end": "1334320"
  },
  {
    "text": "now looking at the compiled bundle size",
    "start": "1334320",
    "end": "1336240"
  },
  {
    "text": "of this",
    "start": "1336240",
    "end": "1336799"
  },
  {
    "text": "application um so here we can see uh",
    "start": "1336799",
    "end": "1339840"
  },
  {
    "text": "view react and angular a little bit more",
    "start": "1339840",
    "end": "1341520"
  },
  {
    "text": "of a split there",
    "start": "1341520",
    "end": "1342480"
  },
  {
    "text": "so view isn't like 70 kilobytes for this",
    "start": "1342480",
    "end": "1344400"
  },
  {
    "text": "application reacts at 97. angular is at",
    "start": "1344400",
    "end": "1346559"
  },
  {
    "text": "141.",
    "start": "1346559",
    "end": "1348000"
  },
  {
    "text": "so angular is about double the size of",
    "start": "1348000",
    "end": "1350080"
  },
  {
    "text": "the the view application for this",
    "start": "1350080",
    "end": "1352000"
  },
  {
    "text": "app um and the l1 uh is actually about",
    "start": "1352000",
    "end": "1354960"
  },
  {
    "text": "half the size of the view one",
    "start": "1354960",
    "end": "1356480"
  },
  {
    "text": "so even though they're sort of similar",
    "start": "1356480",
    "end": "1357840"
  },
  {
    "text": "on the chart there's a really",
    "start": "1357840",
    "end": "1359200"
  },
  {
    "text": "substantial gap",
    "start": "1359200",
    "end": "1360000"
  },
  {
    "text": "in terms of compiled asset size here um",
    "start": "1360000",
    "end": "1363039"
  },
  {
    "text": "rust which is not at all optimized for",
    "start": "1363039",
    "end": "1364880"
  },
  {
    "text": "compiled bundle size",
    "start": "1364880",
    "end": "1366240"
  },
  {
    "text": "although it runs quite fast at runtime",
    "start": "1366240",
    "end": "1368480"
  },
  {
    "text": "the compiled web assembly for all this",
    "start": "1368480",
    "end": "1370000"
  },
  {
    "text": "stuff is absolutely enormous",
    "start": "1370000",
    "end": "1371840"
  },
  {
    "text": "i mean angular is 140 kilobytes the rust",
    "start": "1371840",
    "end": "1373919"
  },
  {
    "text": "one is close to 300 kilobytes almost",
    "start": "1373919",
    "end": "1375919"
  },
  {
    "text": "double the size of",
    "start": "1375919",
    "end": "1377280"
  },
  {
    "text": "angular um so we can see that again elm",
    "start": "1377280",
    "end": "1380960"
  },
  {
    "text": "is",
    "start": "1380960",
    "end": "1381200"
  },
  {
    "text": "is in this case it's not the absolute",
    "start": "1381200",
    "end": "1383120"
  },
  {
    "text": "top of the heap uh",
    "start": "1383120",
    "end": "1384320"
  },
  {
    "text": "svelte is the number one uh like",
    "start": "1384320",
    "end": "1386559"
  },
  {
    "text": "smallest bundle size which one would",
    "start": "1386559",
    "end": "1387919"
  },
  {
    "text": "expect because the entire point is felt",
    "start": "1387919",
    "end": "1389600"
  },
  {
    "text": "its sort of",
    "start": "1389600",
    "end": "1390640"
  },
  {
    "text": "goal is to make the smallest possible",
    "start": "1390640",
    "end": "1392480"
  },
  {
    "text": "bundles um",
    "start": "1392480",
    "end": "1393760"
  },
  {
    "text": "but elm is doing very very well compared",
    "start": "1393760",
    "end": "1395840"
  },
  {
    "text": "to these other uh",
    "start": "1395840",
    "end": "1397440"
  },
  {
    "text": "more popular frameworks which uh it also",
    "start": "1397440",
    "end": "1400159"
  },
  {
    "text": "runs faster than",
    "start": "1400159",
    "end": "1401360"
  },
  {
    "start": "1401000",
    "end": "1620000"
  },
  {
    "text": "um so the last thing that that elm and",
    "start": "1401360",
    "end": "1402880"
  },
  {
    "text": "rust uh have in common here",
    "start": "1402880",
    "end": "1404720"
  },
  {
    "text": "is they both have intentionally helpful",
    "start": "1404720",
    "end": "1406640"
  },
  {
    "text": "compilers and",
    "start": "1406640",
    "end": "1407840"
  },
  {
    "text": "the sort of the experience with",
    "start": "1407840",
    "end": "1409360"
  },
  {
    "text": "interacting with their compilers is a",
    "start": "1409360",
    "end": "1410960"
  },
  {
    "text": "big part of what",
    "start": "1410960",
    "end": "1412159"
  },
  {
    "text": "is involved in using them as languages",
    "start": "1412159",
    "end": "1415200"
  },
  {
    "text": "just an example of one of elm's error",
    "start": "1415200",
    "end": "1416880"
  },
  {
    "text": "messages uh so",
    "start": "1416880",
    "end": "1418400"
  },
  {
    "text": "this user record does not have a phone",
    "start": "1418400",
    "end": "1420400"
  },
  {
    "text": "number field so you can imagine if i was",
    "start": "1420400",
    "end": "1422000"
  },
  {
    "text": "writing user dot",
    "start": "1422000",
    "end": "1422880"
  },
  {
    "text": "phone number but i misspelled it i would",
    "start": "1422880",
    "end": "1425120"
  },
  {
    "text": "get this error message",
    "start": "1425120",
    "end": "1426400"
  },
  {
    "text": "and i would say this is usually a typo",
    "start": "1426400",
    "end": "1428080"
  },
  {
    "text": "here are the user fields that are most",
    "start": "1428080",
    "end": "1429440"
  },
  {
    "text": "similar it lists the different fields",
    "start": "1429440",
    "end": "1430880"
  },
  {
    "text": "that were on that record",
    "start": "1430880",
    "end": "1432080"
  },
  {
    "text": "one of which is phone number and even go",
    "start": "1432080",
    "end": "1434000"
  },
  {
    "text": "as far as to suggest hey so maybe",
    "start": "1434000",
    "end": "1435760"
  },
  {
    "text": "phone number should be phone number so i",
    "start": "1435760",
    "end": "1438640"
  },
  {
    "text": "picked this example kind of at random",
    "start": "1438640",
    "end": "1440080"
  },
  {
    "text": "but i think this is a really good",
    "start": "1440080",
    "end": "1441360"
  },
  {
    "text": "example of",
    "start": "1441360",
    "end": "1442640"
  },
  {
    "text": "what it's like to see get an error",
    "start": "1442640",
    "end": "1444159"
  },
  {
    "text": "message from elm's compiler in general",
    "start": "1444159",
    "end": "1445840"
  },
  {
    "text": "like whatever went wrong the compiler",
    "start": "1445840",
    "end": "1447440"
  },
  {
    "text": "generally tends to give you",
    "start": "1447440",
    "end": "1448880"
  },
  {
    "text": "about as much help as it possibly can um",
    "start": "1448880",
    "end": "1451440"
  },
  {
    "text": "including suggestions about what",
    "start": "1451440",
    "end": "1453200"
  },
  {
    "text": "what might be a potential fix um among",
    "start": "1453200",
    "end": "1456480"
  },
  {
    "text": "people i know who have used elm",
    "start": "1456480",
    "end": "1458240"
  },
  {
    "text": "like seriously like built an actual",
    "start": "1458240",
    "end": "1459679"
  },
  {
    "text": "application with it i don't know a",
    "start": "1459679",
    "end": "1461360"
  },
  {
    "text": "single person who does not think that",
    "start": "1461360",
    "end": "1463279"
  },
  {
    "text": "elm has",
    "start": "1463279",
    "end": "1464000"
  },
  {
    "text": "the most helpful the best compiler error",
    "start": "1464000",
    "end": "1466559"
  },
  {
    "text": "messages of any programming language in",
    "start": "1466559",
    "end": "1468320"
  },
  {
    "text": "the world",
    "start": "1468320",
    "end": "1469120"
  },
  {
    "text": "um it's just considered the gold",
    "start": "1469120",
    "end": "1470559"
  },
  {
    "text": "standard and this is a",
    "start": "1470559",
    "end": "1472320"
  },
  {
    "text": "really one of the most delightful parts",
    "start": "1472320",
    "end": "1473679"
  },
  {
    "text": "about using the language and sort of",
    "start": "1473679",
    "end": "1475200"
  },
  {
    "text": "speaks to that",
    "start": "1475200",
    "end": "1476080"
  },
  {
    "text": "like elm successfully achieving its goal",
    "start": "1476080",
    "end": "1478320"
  },
  {
    "text": "of aspiring to be a delightful",
    "start": "1478320",
    "end": "1480159"
  },
  {
    "text": "programming language",
    "start": "1480159",
    "end": "1481360"
  },
  {
    "text": "um that's not to say that that rust is",
    "start": "1481360",
    "end": "1483120"
  },
  {
    "text": "bad um russ does a quite a good job with",
    "start": "1483120",
    "end": "1485120"
  },
  {
    "text": "this too",
    "start": "1485120",
    "end": "1486159"
  },
  {
    "text": "i would say not as good as elm but it",
    "start": "1486159",
    "end": "1488320"
  },
  {
    "text": "does have",
    "start": "1488320",
    "end": "1489360"
  },
  {
    "text": "uh relatively helpful error messages",
    "start": "1489360",
    "end": "1491120"
  },
  {
    "text": "compared to a lot of other languages",
    "start": "1491120",
    "end": "1492400"
  },
  {
    "text": "that i've used",
    "start": "1492400",
    "end": "1493440"
  },
  {
    "text": "so this is an example of one of those",
    "start": "1493440",
    "end": "1494960"
  },
  {
    "text": "borrow checker errors",
    "start": "1494960",
    "end": "1496720"
  },
  {
    "text": "cannot borrow fu.bar as immutable more",
    "start": "1496720",
    "end": "1498960"
  },
  {
    "text": "than once um",
    "start": "1498960",
    "end": "1500240"
  },
  {
    "text": "and you can see it's got similar kind of",
    "start": "1500240",
    "end": "1502159"
  },
  {
    "text": "like underlining of like which parts of",
    "start": "1502159",
    "end": "1504320"
  },
  {
    "text": "the text uh went wrong you can see the",
    "start": "1504320",
    "end": "1505919"
  },
  {
    "text": "line numbers in the margin",
    "start": "1505919",
    "end": "1507360"
  },
  {
    "text": "um and it's got a good bit of context on",
    "start": "1507360",
    "end": "1509679"
  },
  {
    "text": "what's going on here",
    "start": "1509679",
    "end": "1511120"
  },
  {
    "text": "it doesn't quite have as much detail as",
    "start": "1511120",
    "end": "1512960"
  },
  {
    "text": "as the l message does or any hints",
    "start": "1512960",
    "end": "1515600"
  },
  {
    "text": "but you can add a dash dash explain flag",
    "start": "1515600",
    "end": "1518480"
  },
  {
    "text": "and sort of copy paste in the error",
    "start": "1518480",
    "end": "1520159"
  },
  {
    "text": "number that you got from the",
    "start": "1520159",
    "end": "1521679"
  },
  {
    "text": "the compiler to get a little bit more",
    "start": "1521679",
    "end": "1523039"
  },
  {
    "text": "detail so it's not really inline it's",
    "start": "1523039",
    "end": "1524720"
  },
  {
    "text": "not as contextual",
    "start": "1524720",
    "end": "1525840"
  },
  {
    "text": "as the l mirror but you can still get",
    "start": "1525840",
    "end": "1527919"
  },
  {
    "text": "more detail if you want it",
    "start": "1527919",
    "end": "1529679"
  },
  {
    "text": "this does unfortunately highlight one of",
    "start": "1529679",
    "end": "1531360"
  },
  {
    "text": "the downsides of rust which is",
    "start": "1531360",
    "end": "1533039"
  },
  {
    "text": "you do have this entire extra category",
    "start": "1533039",
    "end": "1535120"
  },
  {
    "text": "of errors that come from the borrow",
    "start": "1535120",
    "end": "1536480"
  },
  {
    "text": "checker",
    "start": "1536480",
    "end": "1537120"
  },
  {
    "text": "and borrow checker errors are sort of",
    "start": "1537120",
    "end": "1538799"
  },
  {
    "text": "notorious for being something that",
    "start": "1538799",
    "end": "1540159"
  },
  {
    "text": "especially beginners to rust",
    "start": "1540159",
    "end": "1541679"
  },
  {
    "text": "spend a lot of time dealing with and",
    "start": "1541679",
    "end": "1543360"
  },
  {
    "text": "being frustrated by",
    "start": "1543360",
    "end": "1544720"
  },
  {
    "text": "the phrase uh fighting the borrow",
    "start": "1544720",
    "end": "1546320"
  },
  {
    "text": "checker is something that is a",
    "start": "1546320",
    "end": "1547760"
  },
  {
    "text": "pretty normal thing for people to",
    "start": "1547760",
    "end": "1549200"
  },
  {
    "text": "express when they're first learning rust",
    "start": "1549200",
    "end": "1551120"
  },
  {
    "text": "and i can say i've been doing rust for a",
    "start": "1551120",
    "end": "1552559"
  },
  {
    "text": "couple years now it's something that",
    "start": "1552559",
    "end": "1554400"
  },
  {
    "text": "i've gotten much much better at but i",
    "start": "1554400",
    "end": "1556000"
  },
  {
    "text": "still spend more time dealing with",
    "start": "1556000",
    "end": "1557360"
  },
  {
    "text": "borrow checker errors than with",
    "start": "1557360",
    "end": "1558720"
  },
  {
    "text": "pretty much every other type of error",
    "start": "1558720",
    "end": "1560000"
  },
  {
    "text": "that i get compile time put together",
    "start": "1560000",
    "end": "1562480"
  },
  {
    "text": "so it's definitely one of the downsides",
    "start": "1562480",
    "end": "1564480"
  },
  {
    "text": "that comes with",
    "start": "1564480",
    "end": "1565520"
  },
  {
    "text": "the many upsides that we've we've come",
    "start": "1565520",
    "end": "1567039"
  },
  {
    "text": "with talked about over the course of",
    "start": "1567039",
    "end": "1569120"
  },
  {
    "text": "discussing these two languages and worth",
    "start": "1569120",
    "end": "1570799"
  },
  {
    "text": "hearing that i still very much like russ",
    "start": "1570799",
    "end": "1572320"
  },
  {
    "text": "as a language and i'm happy to use it",
    "start": "1572320",
    "end": "1573919"
  },
  {
    "text": "um but uh this is sort of like one of",
    "start": "1573919",
    "end": "1576559"
  },
  {
    "text": "the areas where i think",
    "start": "1576559",
    "end": "1577679"
  },
  {
    "text": "elm it really really shines and russ",
    "start": "1577679",
    "end": "1580000"
  },
  {
    "text": "does a good job but",
    "start": "1580000",
    "end": "1581039"
  },
  {
    "text": "but uh not quite as good a job um",
    "start": "1581039",
    "end": "1584640"
  },
  {
    "text": "putting these two together though i mean",
    "start": "1584640",
    "end": "1585919"
  },
  {
    "text": "one of the things that the people",
    "start": "1585919",
    "end": "1587200"
  },
  {
    "text": "commonly say when using either of these",
    "start": "1587200",
    "end": "1588720"
  },
  {
    "text": "languages",
    "start": "1588720",
    "end": "1589279"
  },
  {
    "text": "is if it compiles it usually works um",
    "start": "1589279",
    "end": "1591760"
  },
  {
    "text": "that's been very true for me in",
    "start": "1591760",
    "end": "1593679"
  },
  {
    "text": "my experience of elm less true with russ",
    "start": "1593679",
    "end": "1595679"
  },
  {
    "text": "but still often",
    "start": "1595679",
    "end": "1597279"
  },
  {
    "text": "often true this is especially true with",
    "start": "1597279",
    "end": "1599440"
  },
  {
    "text": "three factors uh if if i refactor my elm",
    "start": "1599440",
    "end": "1601919"
  },
  {
    "text": "code really no matter how big of a",
    "start": "1601919",
    "end": "1603279"
  },
  {
    "text": "change i'm making",
    "start": "1603279",
    "end": "1604240"
  },
  {
    "text": "if it compiles again when it's done i",
    "start": "1604240",
    "end": "1605919"
  },
  {
    "text": "expect it to work uh",
    "start": "1605919",
    "end": "1607600"
  },
  {
    "text": "less true with rust but still quite",
    "start": "1607600",
    "end": "1609279"
  },
  {
    "text": "often true and this is one of the things",
    "start": "1609279",
    "end": "1611279"
  },
  {
    "text": "that i think the next generation of",
    "start": "1611279",
    "end": "1612640"
  },
  {
    "text": "programming languages",
    "start": "1612640",
    "end": "1613600"
  },
  {
    "text": "are are going to become sort of like",
    "start": "1613600",
    "end": "1615039"
  },
  {
    "text": "table stakes for um it's really hard to",
    "start": "1615039",
    "end": "1616880"
  },
  {
    "text": "go back after you've had this experience",
    "start": "1616880",
    "end": "1619440"
  },
  {
    "text": "um if you want to learn more about",
    "start": "1619440",
    "end": "1620799"
  },
  {
    "start": "1620000",
    "end": "1649000"
  },
  {
    "text": "either language here are some relevant",
    "start": "1620799",
    "end": "1622559"
  },
  {
    "text": "links",
    "start": "1622559",
    "end": "1623200"
  },
  {
    "text": "so rustling.org or elmlang.org their",
    "start": "1623200",
    "end": "1625520"
  },
  {
    "text": "homepages",
    "start": "1625520",
    "end": "1626320"
  },
  {
    "text": "uh they both have um free books that you",
    "start": "1626320",
    "end": "1628320"
  },
  {
    "text": "can use to learn the language from",
    "start": "1628320",
    "end": "1629840"
  },
  {
    "text": "scratch uh rust has doc.wrestling.org",
    "start": "1629840",
    "end": "1632400"
  },
  {
    "text": "book elm has guide.lmlang.org and they",
    "start": "1632400",
    "end": "1635120"
  },
  {
    "text": "both have",
    "start": "1635120",
    "end": "1635760"
  },
  {
    "text": "forums where you can jump on ask",
    "start": "1635760",
    "end": "1636960"
  },
  {
    "text": "beginner questions so that's",
    "start": "1636960",
    "end": "1638840"
  },
  {
    "text": "users.wrestling.org or",
    "start": "1638840",
    "end": "1640279"
  },
  {
    "text": "discourse.online.org",
    "start": "1640279",
    "end": "1642399"
  },
  {
    "text": "thanks very much",
    "start": "1642399",
    "end": "1650320"
  }
]