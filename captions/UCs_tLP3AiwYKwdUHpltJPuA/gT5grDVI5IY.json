[
  {
    "text": "[Applause] uh thank you all thank you for having me here uh I'm now I'm a developer Advocate",
    "start": "3570",
    "end": "10519"
  },
  {
    "text": "at jet brains uh I started as a developer in a cing compiler but now I",
    "start": "10519",
    "end": "16358"
  },
  {
    "text": "do not write the Cod because I mostly do talks and write text and write the book and basically the reason was like they I",
    "start": "16359",
    "end": "23840"
  },
  {
    "text": "I was uh when we started the project everyone came and asked who wants to do the talk about cotland and it was always",
    "start": "23840",
    "end": "30400"
  },
  {
    "text": "me who answered yes I want so at some point they asked me why won't you do that as a main job so now let's start it",
    "start": "30400",
    "end": "38960"
  },
  {
    "text": "with cotlin and uh we will talk about cotlin in general what uh what it gives us as",
    "start": "38960",
    "end": "46680"
  },
  {
    "text": "developers what how it can improve our lives and uh I want to to um divide my",
    "start": "46680",
    "end": "53520"
  },
  {
    "text": "talk into three parts into uh into an attempt to explain why actually this",
    "start": "53520",
    "end": "59600"
  },
  {
    "text": "scar announcement happen happened why cotland gives us a value and which value",
    "start": "59600",
    "end": "65478"
  },
  {
    "text": "it provides us so I want to emphasiz that cotland is uh modern and pragmatic",
    "start": "65479",
    "end": "72080"
  },
  {
    "text": "language uh and uh it happened to be Android friendly so let's",
    "start": "72080",
    "end": "78520"
  },
  {
    "text": "start uh yeah so now it's officially supported on Android we're very happy to",
    "start": "78520",
    "end": "83880"
  },
  {
    "text": "uh uh to be here to to be at that stage and I can say that we were surprised at",
    "start": "83880",
    "end": "90479"
  },
  {
    "text": "De price so we didn't expected it and uh every all the times people ask me like",
    "start": "90479",
    "end": "97119"
  },
  {
    "text": "when Google will announc this support like ask Google not me I I have no idea",
    "start": "97119",
    "end": "102200"
  },
  {
    "text": "so we were we uh we knew a little bit in advance like a three weeks in advance",
    "start": "102200",
    "end": "107880"
  },
  {
    "text": "and we were really really happy and surprised uh but now we have a difficult",
    "start": "107880",
    "end": "113079"
  },
  {
    "text": "task because cotland is actually it is not designed specially for Android we",
    "start": "113079",
    "end": "118200"
  },
  {
    "text": "didn't have this goal like to write the language for Android uh our goal was to",
    "start": "118200",
    "end": "124360"
  },
  {
    "text": "uh write a language would which uh will have the uh the goal of like be a better",
    "start": "124360",
    "end": "130119"
  },
  {
    "text": "Java so several years ago when we started the project uh main language for",
    "start": "130119",
    "end": "136120"
  },
  {
    "text": "majority of the project projects inide Brands was Java and at that time it was only Java 6 Java 7 wasn't yet and Java",
    "start": "136120",
    "end": "142680"
  },
  {
    "text": "eight was uh far ago and uh there was a wish to uh fix some something in the",
    "start": "142680",
    "end": "150360"
  },
  {
    "text": "language to add some new stuffff to to change some Stuff Etc and there was no",
    "start": "150360",
    "end": "156920"
  },
  {
    "text": "the language that satisfied the needs so in jet brains they decided to create",
    "start": "156920",
    "end": "162200"
  },
  {
    "text": "their uh to create their uh their own language and uh it so it happened so",
    "start": "162200",
    "end": "169760"
  },
  {
    "text": "that it fits nicely for Android and now we have really difficult task to to",
    "start": "169760",
    "end": "174959"
  },
  {
    "text": "emphasize that it's not only about Android so we focus on Java uh and also",
    "start": "174959",
    "end": "180280"
  },
  {
    "text": "we have uh compiler to JavaScript and uh the uh one more thing we now have the",
    "start": "180280",
    "end": "187920"
  },
  {
    "text": "compilation to Native bite code to lvm it's now the work in progress but uh",
    "start": "187920",
    "end": "193080"
  },
  {
    "text": "probably in the future we uh no promises yet for sure but uh our goal is to be",
    "start": "193080",
    "end": "199440"
  },
  {
    "text": "able to write a code that can be compiled to both Android and iOS uh I",
    "start": "199440",
    "end": "205440"
  },
  {
    "text": "don't mean for for sure uh the UI code but prob some common logic common",
    "start": "205440",
    "end": "211840"
  },
  {
    "text": "business logic but it's it's the work in progress now so there's something we work on now but we have some prototypes",
    "start": "211840",
    "end": "219959"
  },
  {
    "text": "you can check them but it's not ready yet yeah so let's discuss this modern",
    "start": "219959",
    "end": "226959"
  },
  {
    "text": "and pragmatic words and let's start with pragmatic uh I would uh emphasize on two",
    "start": "226959",
    "end": "232560"
  },
  {
    "text": "things at first uh like when we are talking about programmatic language what we understand by that",
    "start": "232560",
    "end": "240319"
  },
  {
    "text": "we are the company uh uh like the dead brains company it's creator of ideas for",
    "start": "240319",
    "end": "246040"
  },
  {
    "text": "developers and in dead brains uh we think that uh nowadays uh every language",
    "start": "246040",
    "end": "254239"
  },
  {
    "text": "goes with its tooling so tooling is as important as the language itself uh you can't expect this attitude",
    "start": "254239",
    "end": "261720"
  },
  {
    "text": "from Jad bra I suppose so uh the goal was to create a",
    "start": "261720",
    "end": "266960"
  },
  {
    "text": "language with a good tooling support and another thing that is important is",
    "start": "266960",
    "end": "273360"
  },
  {
    "text": "interoperability with Java so yeah it's from jet brains has good tooling and so",
    "start": "273360",
    "end": "278639"
  },
  {
    "text": "it provides you all the things that you used to have in Java uh so if you have",
    "start": "278639",
    "end": "284039"
  },
  {
    "text": "like your favorite intentions inspections refactorings you can try them and they will work for coton for",
    "start": "284039",
    "end": "290280"
  },
  {
    "text": "now uh by at the moment another important thing that",
    "start": "290280",
    "end": "296520"
  },
  {
    "text": "actually uh probably explains why we have now official support for Android",
    "start": "296520",
    "end": "302880"
  },
  {
    "text": "why cotlin not some other JM language is that it can be easily interoperate with",
    "start": "302880",
    "end": "309000"
  },
  {
    "text": "Java so you can mix them in one project as every ofm language coding compile to",
    "start": "309000",
    "end": "314840"
  },
  {
    "text": "Java to Java bite code and then you can uh has uh then you",
    "start": "314840",
    "end": "320919"
  },
  {
    "text": "can run it on Android as well so again it's not special for Android is just compiled to jav B code but the thing is",
    "start": "320919",
    "end": "327560"
  },
  {
    "text": "that uh it's not only possible to call Java code from coton this works for",
    "start": "327560",
    "end": "332800"
  },
  {
    "text": "every JM language so the if the language is compiled to Javas to Java bite code that works you can call Java code from",
    "start": "332800",
    "end": "339080"
  },
  {
    "text": "it but for cotlin it works the other way as well so you can add cotlin code to",
    "start": "339080",
    "end": "346319"
  },
  {
    "text": "your big Legacy Java application or just existing Android application written in",
    "start": "346319",
    "end": "353080"
  },
  {
    "text": "Java you can add cod in there and you can uh add tiny parts written in cotlin",
    "start": "353080",
    "end": "360919"
  },
  {
    "text": "to the existing application and you can invoke new code from your code base",
    "start": "360919",
    "end": "366000"
  },
  {
    "text": "that's that's crucial that's why it's different from other languages and that's why now we have so big adoption",
    "start": "366000",
    "end": "373759"
  },
  {
    "text": "so you really can add a little bit of cotlin into your existing applications",
    "start": "373759",
    "end": "378919"
  },
  {
    "text": "so that's that's an important thing and we will return to during the talk while",
    "start": "378919",
    "end": "384240"
  },
  {
    "text": "we we will look at some or other C features so it happened to be Android",
    "start": "384240",
    "end": "389960"
  },
  {
    "text": "friendly at first I would say without it would never happen so Android Studio is based on intelligy so Google have some",
    "start": "389960",
    "end": "397039"
  },
  {
    "text": "experience of interoperability of communicating with the dead brains folks",
    "start": "397039",
    "end": "402240"
  },
  {
    "text": "we have some like uh channels uh established some Communications of uh",
    "start": "402240",
    "end": "407759"
  },
  {
    "text": "what should be done and how it works so without it uh we we would never have cotl and uh having Android Studio based",
    "start": "407759",
    "end": "415479"
  },
  {
    "text": "on intelligy cotland plugin is written for intelly but it just works f Droid Studio as well so and uh uh now you will",
    "start": "415479",
    "end": "423520"
  },
  {
    "text": "have uh the cot ship with Android studio also another thing why codlin is um",
    "start": "423520",
    "end": "432199"
  },
  {
    "text": "works well for Android is that when you add codling to your application it",
    "start": "432199",
    "end": "437639"
  },
  {
    "text": "doesn't require you to add a lot of uh uh a lot of me to a lot of classes so it",
    "start": "437639",
    "end": "445479"
  },
  {
    "text": "can be compared to just adding another library to your application",
    "start": "445479",
    "end": "451520"
  },
  {
    "text": "why we in coton we do not have such thing as coton SDK we do not have our",
    "start": "451520",
    "end": "458879"
  },
  {
    "text": "standard Library we use Java standard Library by default we just provide a bunch of",
    "start": "458879",
    "end": "465960"
  },
  {
    "text": "extensions to that so do not having uh the big library to add we have small on",
    "start": "465960",
    "end": "473240"
  },
  {
    "text": "time J that you that you are actually adding to your application that's why that why it works and also",
    "start": "473240",
    "end": "480199"
  },
  {
    "text": "uh this thing as not having this designed decision of not having our own Library brings us uh easy job",
    "start": "480199",
    "end": "487599"
  },
  {
    "text": "interoperability so it's not only choice because other Javan languages for instance color they have their nice new",
    "start": "487599",
    "end": "494639"
  },
  {
    "text": "shiny library that is m in some s senses that that is much better than Java library but it's hard to interoperate it",
    "start": "494639",
    "end": "502000"
  },
  {
    "text": "to mix scalar and Java in this sense so this was like our design choices when",
    "start": "502000",
    "end": "508919"
  },
  {
    "text": "when we did hland why how we want to achieve this good interoperability with",
    "start": "508919",
    "end": "516120"
  },
  {
    "text": "Java so now let's look at some code real code uh and discuss why cotland is a",
    "start": "516120",
    "end": "524120"
  },
  {
    "text": "modern language and I want to say here that yeah so uh we will have like my the",
    "start": "524120",
    "end": "530720"
  },
  {
    "text": "rest of my talk will consist of three parts that more for me means concise safe and expressive and I want to",
    "start": "530720",
    "end": "537959"
  },
  {
    "text": "emphasize here that this this modern language this works not only with cotlin",
    "start": "537959",
    "end": "543480"
  },
  {
    "text": "so the same issues work for example with Swift and if you're an O developer you",
    "start": "543480",
    "end": "548880"
  },
  {
    "text": "will understand that what what I'm going to talk about very easily because yes it's it has the similar Concepts they",
    "start": "548880",
    "end": "556079"
  },
  {
    "text": "have a lot in common so it's not just about we have written something but uh",
    "start": "556079",
    "end": "562959"
  },
  {
    "text": "it's how in general we see what a modern language should look like and you will",
    "start": "562959",
    "end": "570959"
  },
  {
    "text": "in really you will find a lot in common uh in between Swift and cotlin so when",
    "start": "570959",
    "end": "577519"
  },
  {
    "text": "they release Swift we was like yeah it looks very similar yeah it looks very similar and it's not what who have",
    "start": "577519",
    "end": "583640"
  },
  {
    "text": "stolen which features no it's more about how we in general now consider a modern",
    "start": "583640",
    "end": "590560"
  },
  {
    "text": "language what what it should be probably it will so not probably but I'm sure it",
    "start": "590560",
    "end": "595600"
  },
  {
    "text": "will change in 10 years but we we'll have more expertise will have more experience but that's what we have for",
    "start": "595600",
    "end": "603000"
  },
  {
    "text": "now so let's continue uh about conciseness uh this is a very typical",
    "start": "603000",
    "end": "611079"
  },
  {
    "text": "slide that I'm like every JM language shows as an introduction to it and cot",
    "start": "611079",
    "end": "616839"
  },
  {
    "text": "is no exception here so this is a Java code this is a regular Java class and uh",
    "start": "616839",
    "end": "623880"
  },
  {
    "text": "uh the thing is that now we can do better so now we know know how to",
    "start": "623880",
    "end": "630079"
  },
  {
    "text": "express the same concept in a more concise way and here I want to uh also",
    "start": "630079",
    "end": "636040"
  },
  {
    "text": "uh illustrate the tool that helps a lot when you start to adop cotlin into",
    "start": "636040",
    "end": "641279"
  },
  {
    "text": "existing Java project we have automatic uh Java to cotlin converter so if you",
    "start": "641279",
    "end": "646720"
  },
  {
    "text": "start using cotlin you and you're probably not uh already familiar with it",
    "start": "646720",
    "end": "652680"
  },
  {
    "text": "you can just write the code in Java convert it and see how the same code looks in cotlin",
    "start": "652680",
    "end": "660040"
  },
  {
    "text": "and uh the conversion produces this the following result for the Java code it's",
    "start": "660040",
    "end": "665120"
  },
  {
    "text": "a a little bit shorter a little bit more concise and that and again that it works",
    "start": "665120",
    "end": "670320"
  },
  {
    "text": "not only with cotton so in other modern uh languages JM languages or Swift they",
    "start": "670320",
    "end": "675600"
  },
  {
    "text": "have the similar concept so now we know that we want to express it in Easy fashion uh and also in Cotton",
    "start": "675600",
    "end": "684440"
  },
  {
    "text": "you can add data modifier that will generate a bunch of useful methods for",
    "start": "684440",
    "end": "689560"
  },
  {
    "text": "the class like equals has C and some others but at this point you can ask me",
    "start": "689560",
    "end": "696000"
  },
  {
    "text": "but what about interoperability so I've told you Java can be easily mixed with quot so okay I write this class in Java",
    "start": "696000",
    "end": "702560"
  },
  {
    "text": "so how would I mix this uh so sorry I'm I'm writing this class in COD how would I mix this with Java code and my answer",
    "start": "702560",
    "end": "709160"
  },
  {
    "text": "is easily because if I if uh okay so this uh this situation when I write the",
    "start": "709160",
    "end": "715399"
  },
  {
    "text": "code in Java and I call it from java it looks like calling a get this I write this code in codin and I call it in",
    "start": "715399",
    "end": "721680"
  },
  {
    "text": "codon this look it looks like col property but I can write this code in",
    "start": "721680",
    "end": "727800"
  },
  {
    "text": "cotland and call it in Java as a regular G so under the hood this class is",
    "start": "727800",
    "end": "733519"
  },
  {
    "text": "generated to the similar bite code that we have for Java so it just produces the same Constructor and GS so from java we",
    "start": "733519",
    "end": "741160"
  },
  {
    "text": "will call this geter the same as Java but it works in the other direction as well so basically if you have your Java",
    "start": "741160",
    "end": "748839"
  },
  {
    "text": "class and this Java class declares gets you can call them from uh cotland as",
    "start": "748839",
    "end": "756160"
  },
  {
    "text": "propes and it works with all existing Java libraries so your code in COD that",
    "start": "756160",
    "end": "761639"
  },
  {
    "text": "uses existing Java libraries looks like more cling code than jav",
    "start": "761639",
    "end": "767360"
  },
  {
    "text": "code another example of the converter in action uh example which shows that",
    "start": "767360",
    "end": "774480"
  },
  {
    "text": "converter not uh every time produces the best result so sometimes you use the",
    "start": "774480",
    "end": "781000"
  },
  {
    "text": "converter it gives you the code which is very similar to Java code but you have",
    "start": "781000",
    "end": "788240"
  },
  {
    "text": "to improve it somehow you can improve it often so let's look at an example so we",
    "start": "788240",
    "end": "794279"
  },
  {
    "text": "have like upd weather function that has uh to initialize just two variables",
    "start": "794279",
    "end": "799720"
  },
  {
    "text": "description and color we have an AM of two colors and uh we have some code that",
    "start": "799720",
    "end": "804760"
  },
  {
    "text": "initializes it depending on the weather I'm not sure it goes for St I don't know what's called for you I'm",
    "start": "804760",
    "end": "812199"
  },
  {
    "text": "from Russia so for me it was like minus minus 10 probably it's called I'm not sure you have this weather",
    "start": "812199",
    "end": "819839"
  },
  {
    "text": "here so again I can use the converter and I can also copy the Java code and",
    "start": "819839",
    "end": "826040"
  },
  {
    "text": "paste it in my Cod file it will suggest to convert it and you see that converted code looks very similar to to Java",
    "start": "826040",
    "end": "833600"
  },
  {
    "text": "version yes they they are very much the same so yes we have different keywords we have file we have Val we have types",
    "start": "833600",
    "end": "839959"
  },
  {
    "text": "under the variable declaration but otherwise the code is very familiar so if your colleague start to write cotland",
    "start": "839959",
    "end": "846839"
  },
  {
    "text": "probably you will uh then you will understand what's going on because it's",
    "start": "846839",
    "end": "852399"
  },
  {
    "text": "not that different what we can do better uh first thing we can notice is we have to repeat",
    "start": "852399",
    "end": "860399"
  },
  {
    "text": "this variable name so let's instead just declare two",
    "start": "860399",
    "end": "866519"
  },
  {
    "text": "that just initialize two variables at one and you see that in C if returns a value",
    "start": "866519",
    "end": "872480"
  },
  {
    "text": "so if returns a result that you can assign to two variables but that's not all we see that",
    "start": "872480",
    "end": "880360"
  },
  {
    "text": "we have these these types that are actually in this case they are clear from the context so cotland is a",
    "start": "880360",
    "end": "886639"
  },
  {
    "text": "statically type language it's like Java every expression has a type every function declares its return type the",
    "start": "886639",
    "end": "894320"
  },
  {
    "text": "type of the parameters however in codlin the compiler can infer this type types for you if they are clear from the",
    "start": "894320",
    "end": "900480"
  },
  {
    "text": "context so in this case we can just admit the types and the compiler understands that yes the first one is",
    "start": "900480",
    "end": "906600"
  },
  {
    "text": "string the second one is color one more Improvement in C we have",
    "start": "906600",
    "end": "912480"
  },
  {
    "text": "the one expression that is very similar to switch expression in Java but it's",
    "start": "912480",
    "end": "917600"
  },
  {
    "text": "much more powerful and it happens that we can often use it instead of if else",
    "start": "917600",
    "end": "924079"
  },
  {
    "text": "if else if else so in this case we replace if with when and we have this",
    "start": "924079",
    "end": "929759"
  },
  {
    "text": "this code one last Improvement uh instead of creating a pair we can use",
    "start": "929759",
    "end": "935279"
  },
  {
    "text": "the toe function in C so this was our replacement and that",
    "start": "935279",
    "end": "944240"
  },
  {
    "text": "shows that this example this small example demonstrates basically how your code",
    "start": "944240",
    "end": "949959"
  },
  {
    "text": "changes when you switch from java to cin so it's the often case that your file",
    "start": "949959",
    "end": "957319"
  },
  {
    "text": "decreases in size like probably two times it's not a radical change but the code looks much nicer and much easier to",
    "start": "957319",
    "end": "964800"
  },
  {
    "text": "read and uh uh and it also demonstrates that converter not always produces the",
    "start": "964800",
    "end": "970800"
  },
  {
    "text": "best result but uh it it gives some time to get accustoms to new language to start writing the cot in more cish style",
    "start": "970800",
    "end": "978920"
  },
  {
    "text": "but at first when you switch you can just you can just start using the converter and produce very similar to",
    "start": "978920",
    "end": "985279"
  },
  {
    "text": "Java result and then learn slowly uh slowly move to New language slowly add",
    "start": "985279",
    "end": "991240"
  },
  {
    "text": "it to to your system and slowly learn how it works that that's",
    "start": "991240",
    "end": "996839"
  },
  {
    "text": "possible another aspect of being a modern language again it's not only for",
    "start": "996839",
    "end": "1002319"
  },
  {
    "text": "about coton it's about our world in general how we how we can do things it about",
    "start": "1002319",
    "end": "1008120"
  },
  {
    "text": "safety and uh this one I want to illustrate by this common thing",
    "start": "1008120",
    "end": "1013639"
  },
  {
    "text": "so-called billion dollar mistake so s hor who once invented this null reference told uh that it we it's hard",
    "start": "1013639",
    "end": "1022639"
  },
  {
    "text": "to estimate how much money we spent at the whole on fixing these n pointer",
    "start": "1022639",
    "end": "1028400"
  },
  {
    "text": "exceptions so the problem is that you have n pointer exception some problem occurred and you have no information",
    "start": "1028400",
    "end": "1034640"
  },
  {
    "text": "where it comes from and we want to fix it and the modern approach again is not",
    "start": "1034640",
    "end": "1040558"
  },
  {
    "text": "only about cotton it's in general Works in general from many languages is to make null poter exception a compil time",
    "start": "1040559",
    "end": "1047280"
  },
  {
    "text": "error not a rtime exception so instead of having these exceptions at run time we want to prevent them while",
    "start": "1047280",
    "end": "1055400"
  },
  {
    "text": "writing this this code again it's not only about cotton so Java 8 have another solution for this which which",
    "start": "1055400",
    "end": "1062760"
  },
  {
    "text": "one what is the solution of java 8 it's again it's yes optional just optional",
    "start": "1062760",
    "end": "1068559"
  },
  {
    "text": "and uh in codlin by the way it's very similar to Swift they have the similar concept to Swift We have so-called",
    "start": "1068559",
    "end": "1075320"
  },
  {
    "text": "nullable types so in common we distinguish a regular type that can",
    "start": "1075320",
    "end": "1081520"
  },
  {
    "text": "contain uh that cannot contain n reference with a nullable type that can",
    "start": "1081520",
    "end": "1086880"
  },
  {
    "text": "so if you try to St null in a regular type the cotlin compiler complains and",
    "start": "1086880",
    "end": "1092280"
  },
  {
    "text": "says no you cannot do that but if you want but if you want to store n",
    "start": "1092280",
    "end": "1097400"
  },
  {
    "text": "reference in anable type that works and when you try to reference the",
    "start": "1097400",
    "end": "1102919"
  },
  {
    "text": "reference of nonble type it works fine uh if you try to do the same with nullable types it doesn't",
    "start": "1102919",
    "end": "1110760"
  },
  {
    "text": "and cotl provides a several ways to fix this to work with nullable types so how",
    "start": "1110880",
    "end": "1117400"
  },
  {
    "text": "to reference them you can check explicitly but you can do better you can even the intelligy suggests how to fix",
    "start": "1117400",
    "end": "1125039"
  },
  {
    "text": "this you can replace this with safe call expression uh probably in SW they have the same",
    "start": "1125039",
    "end": "1130960"
  },
  {
    "text": "synex who is developer there yes so you know it always something that you",
    "start": "1130960",
    "end": "1136840"
  },
  {
    "text": "already know great and uh uh this is uh when we designed coton at",
    "start": "1136840",
    "end": "1143120"
  },
  {
    "text": "first it was uh I can say stolen from groovy but they once told me to to to",
    "start": "1143120",
    "end": "1148679"
  },
  {
    "text": "say borrowed not stolen but it we never know it's like the languages develop and they all look",
    "start": "1148679",
    "end": "1156000"
  },
  {
    "text": "at what what H what is happening in other languages just to uh keep in P so",
    "start": "1156000",
    "end": "1163120"
  },
  {
    "text": "yes uh there are several operators to work with it and uh if you want to",
    "start": "1163120",
    "end": "1168280"
  },
  {
    "text": "return now as a result you can you can change this if with SE ex expression so",
    "start": "1168280",
    "end": "1174919"
  },
  {
    "text": "it returns null if the variable was null you can provide the default value the cing compiler is quite smart",
    "start": "1174919",
    "end": "1182159"
  },
  {
    "text": "so if you check for being null and return of fail it will understand that",
    "start": "1182159",
    "end": "1187919"
  },
  {
    "text": "yes here the reference is not null and you can reference it and uh there is the part that is",
    "start": "1187919",
    "end": "1195240"
  },
  {
    "text": "different from Swift I know because in Swift they have one exclamation mark and Accord we have two that means please not",
    "start": "1195240",
    "end": "1202640"
  },
  {
    "text": "use it uh so the thing is that if you want to throw now Point exception explicitly",
    "start": "1202640",
    "end": "1208919"
  },
  {
    "text": "you can do that by putting two exclamation marks important think how we how these",
    "start": "1208919",
    "end": "1217919"
  },
  {
    "text": "nullable types are implemented under the hoot and actually they adjust",
    "start": "1217919",
    "end": "1223159"
  },
  {
    "text": "annotations that's probably one more thing that is different from Swift they adjust annotation they are not rappers",
    "start": "1223159",
    "end": "1230000"
  },
  {
    "text": "so there is no performance overhead so these nullable types exist only when we",
    "start": "1230000",
    "end": "1235840"
  },
  {
    "text": "compile code and on function signatures but not at run time so at run time they",
    "start": "1235840",
    "end": "1242039"
  },
  {
    "text": "are just regular Java objects you can ask now what about ja",
    "start": "1242039",
    "end": "1249679"
  },
  {
    "text": "inter interoperability so how would you use how do these nullable types work when you mix cotl and Java in one",
    "start": "1249679",
    "end": "1257320"
  },
  {
    "text": "project and the answer will be try to annotate your code so uh basically when",
    "start": "1257320",
    "end": "1264840"
  },
  {
    "text": "you use cod Java type regular Java type from cotland it behaves like regular",
    "start": "1264840",
    "end": "1270960"
  },
  {
    "text": "Java type that means that when you mix when you call Java code from cotlin you",
    "start": "1270960",
    "end": "1276720"
  },
  {
    "text": "we you will still you still can have now pointer Exceptions there was a long story why we did this because at first",
    "start": "1276720",
    "end": "1284120"
  },
  {
    "text": "we tried another solution they didn't work they work not very nice so at last",
    "start": "1284120",
    "end": "1289720"
  },
  {
    "text": "we we have chosen uh this approach to provide you easy interoperability so um uh we decided not",
    "start": "1289720",
    "end": "1298919"
  },
  {
    "text": "to go with default nullable types to have to to be able to easily use cod",
    "start": "1298919",
    "end": "1305840"
  },
  {
    "text": "Java code from cot so yes you will still have n po exceptions if you just use Java code however if you unate your Java",
    "start": "1305840",
    "end": "1313360"
  },
  {
    "text": "code uh these uh annotated types will be converted directly to nullable on non",
    "start": "1313360",
    "end": "1320120"
  },
  {
    "text": "null types in cotton and actually I'm talking about something new now so these annotations will be introduced in the",
    "start": "1320120",
    "end": "1327559"
  },
  {
    "text": "next coton release so uh just so it's not there yet but it will be there soon",
    "start": "1327559",
    "end": "1334200"
  },
  {
    "text": "and uh with so you can basic so this one works from the beginning so if you annotate your Java types as nullable and",
    "start": "1334200",
    "end": "1341120"
  },
  {
    "text": "With nullable Or Not N anotations they will be converted to nullable and not n types in coton and now you can also say",
    "start": "1341120",
    "end": "1348240"
  },
  {
    "text": "that okay I want no null by default and uh we now support uh",
    "start": "1348240",
    "end": "1355279"
  },
  {
    "text": "supported just our the5 if everyone knows uh if someone knows and now and",
    "start": "1355279",
    "end": "1361559"
  },
  {
    "text": "you can say okay my code so I want to provide only n anotations and everything",
    "start": "1361559",
    "end": "1367360"
  },
  {
    "text": "and everything else is not n defa so basically the solution is the following",
    "start": "1367360",
    "end": "1372720"
  },
  {
    "text": "you can interoperate interoperate with Java if you do not think it works like regular Java but if you want to improve",
    "start": "1372720",
    "end": "1379400"
  },
  {
    "text": "you can just add some annotations to Java to your existing Java code base and",
    "start": "1379400",
    "end": "1384559"
  },
  {
    "text": "it will feel much better from cin point of view so you can work with this or you",
    "start": "1384559",
    "end": "1390279"
  },
  {
    "text": "can little bit try to improve your existing code base both both options",
    "start": "1390279",
    "end": "1396200"
  },
  {
    "text": "work another thing uh some sometimes there is this misconception nullable",
    "start": "1396200",
    "end": "1402159"
  },
  {
    "text": "times it's not the same as optional optional is a wrapper that stores uh",
    "start": "1402159",
    "end": "1408120"
  },
  {
    "text": "whether there is a variable or uh no value beneath and nullable types are",
    "start": "1408120",
    "end": "1414039"
  },
  {
    "text": "just annotations so sometimes this misconception happens okay let's continue then and uh",
    "start": "1414039",
    "end": "1423919"
  },
  {
    "text": "discuss the last point of like this being mod being in modern languages",
    "start": "1423919",
    "end": "1429520"
  },
  {
    "text": "being mod language expressiveness it's a hard term so I would say this basically is about uh",
    "start": "1429520",
    "end": "1437320"
  },
  {
    "text": "ability to extract the partitive code into libraries to create expressive API",
    "start": "1437320",
    "end": "1444919"
  },
  {
    "text": "or to create API that looks and feels like something specific to your",
    "start": "1444919",
    "end": "1452200"
  },
  {
    "text": "task and uh I want to uh cover some cotlin features again three features to",
    "start": "1452200",
    "end": "1459520"
  },
  {
    "text": "demonstrate how cotlin can be an expressive language first I will talk about",
    "start": "1459520",
    "end": "1466120"
  },
  {
    "text": "extensions extension functions uh it is feature that is already present in some",
    "start": "1466120",
    "end": "1471760"
  },
  {
    "text": "other languages like CP so again we haven't invented it uh we just borrowed",
    "start": "1471760",
    "end": "1477600"
  },
  {
    "text": "it so let's look what what is it uh so in cotlin you can declare a function uh",
    "start": "1477600",
    "end": "1485960"
  },
  {
    "text": "ex uh you can extend a class with a function that lives not not inside the",
    "start": "1485960",
    "end": "1491880"
  },
  {
    "text": "class but somewhere else like in this example we use uh Java string and C I've",
    "start": "1491880",
    "end": "1497159"
  },
  {
    "text": "told you that we don't not have Library we use just Java regular strings but we want to improve them so I would say that",
    "start": "1497159",
    "end": "1504880"
  },
  {
    "text": "uh yeah Java string liks some useful methods and a lot of libraries just try",
    "start": "1504880",
    "end": "1510080"
  },
  {
    "text": "to provide their own bunch of extensions to them functions that work with strings",
    "start": "1510080",
    "end": "1515919"
  },
  {
    "text": "and try to improve improve them and cotland is no exceptions here is no exception here but you can uh declare",
    "start": "1515919",
    "end": "1523640"
  },
  {
    "text": "such functions in coton as extensions uh so here string is reer parameter and you",
    "start": "1523640",
    "end": "1529600"
  },
  {
    "text": "can refer to it using this inside the function body and as usual for this it can be",
    "start": "1529600",
    "end": "1537240"
  },
  {
    "text": "emitted so you can just declare this function like this why would we need it uh extension",
    "start": "1537240",
    "end": "1546000"
  },
  {
    "text": "functions can be called from cotlin as member as members as regular members and",
    "start": "1546000",
    "end": "1552039"
  },
  {
    "text": "also they can be found in completion so how do we write qu like what can be called on this item on this",
    "start": "1552039",
    "end": "1558840"
  },
  {
    "text": "some some type that comes from the library and you just look through the completion list and here all these",
    "start": "1558840",
    "end": "1565799"
  },
  {
    "text": "extensions are visible and completion so they can be easily found from from",
    "start": "1565799",
    "end": "1572200"
  },
  {
    "text": "there uh in coton you have to import them explicitly so if you want to use uh",
    "start": "1572200",
    "end": "1578919"
  },
  {
    "text": "extension somewhere you have to import it uh and uh you can ask me okay but",
    "start": "1578919",
    "end": "1584840"
  },
  {
    "text": "what about Java so how would you call these extensions from java ja I've told you that yeah you can easily call every",
    "start": "1584840",
    "end": "1591840"
  },
  {
    "text": "new coton code from java what do you think do you have any ideas who knows C",
    "start": "1591840",
    "end": "1602240"
  },
  {
    "text": "it so actually it works like this so how would you declare such function in ja in",
    "start": "1602799",
    "end": "1610760"
  },
  {
    "text": "in Java in regular Java so you have last last Char functions where would you put it static yes yes static would utilities",
    "start": "1610760",
    "end": "1618880"
  },
  {
    "text": "yes that's exactly how it's implemented under the hood so actually it is",
    "start": "1618880",
    "end": "1624159"
  },
  {
    "text": "compiled a static utility that takes string as a first parameter that's exactly the case that that's exactly how",
    "start": "1624159",
    "end": "1631159"
  },
  {
    "text": "would you do that in Java so calling extensions from java looks like regular Java nothing nothing",
    "start": "1631159",
    "end": "1639480"
  },
  {
    "text": "changes and you can all you can import it statically in Java and it looks like again it looks like regular",
    "start": "1640080",
    "end": "1646240"
  },
  {
    "text": "Java another difficult question for you to wake up at the beginning of the",
    "start": "1646240",
    "end": "1653279"
  },
  {
    "text": "conference is it possible to call a private method from of string from this",
    "start": "1653279",
    "end": "1659200"
  },
  {
    "text": "extension function what do you think no of course not because it's just a regular static method under the hood so",
    "start": "1659200",
    "end": "1667120"
  },
  {
    "text": "you see you start to know qu it you can declare n uh nice extension",
    "start": "1667120",
    "end": "1675640"
  },
  {
    "text": "functions for Android like this one why is possible because you just uh here",
    "start": "1675640",
    "end": "1681919"
  },
  {
    "text": "you see that there is we pass this as an activity but you can declare extension",
    "start": "1681919",
    "end": "1687240"
  },
  {
    "text": "function on activity and pass is on this reference and so it looks much more",
    "start": "1687240",
    "end": "1693080"
  },
  {
    "text": "nicer in a at code the same works with starting a new activity you again",
    "start": "1693080",
    "end": "1698679"
  },
  {
    "text": "declare a function on an activity that does exactly this code so nothing more",
    "start": "1698679",
    "end": "1704720"
  },
  {
    "text": "uh complicated and you can improve the ability of your Android applications in",
    "start": "1704720",
    "end": "1710679"
  },
  {
    "text": "this manner okay there is this two function you remember I had it in the my in my",
    "start": "1710679",
    "end": "1718880"
  },
  {
    "text": "first example when I told you how to convert the WEA the weather example so",
    "start": "1718880",
    "end": "1724480"
  },
  {
    "text": "what is two two is another extension function declared in the library actually it's infix function so",
    "start": "1724480",
    "end": "1731440"
  },
  {
    "text": "you can either call it in a regular syntax or any more in in fixed syntax",
    "start": "1731440",
    "end": "1737200"
  },
  {
    "text": "and there is an nice way to create maps and uh this part actually uh is quite",
    "start": "1737200",
    "end": "1743679"
  },
  {
    "text": "often in cotland something that looks like a buil-in language construct in",
    "start": "1743679",
    "end": "1749880"
  },
  {
    "text": "fact is a library function so at the first glance two looks like something",
    "start": "1749880",
    "end": "1754919"
  },
  {
    "text": "special but actually it's just a regular function defined in the",
    "start": "1754919",
    "end": "1760799"
  },
  {
    "text": "library one more topic to cover I expect that you are all familiar with this so",
    "start": "1761080",
    "end": "1768200"
  },
  {
    "text": "so I won't uh tell you something new so we won't uh go deep into what the Lambda",
    "start": "1768200",
    "end": "1774640"
  },
  {
    "text": "is but actually it's again about what do we have in our modern languages so now",
    "start": "1774640",
    "end": "1780960"
  },
  {
    "text": "it happens that the functional so lambas goes from the functional programming from the functional approach and now it",
    "start": "1780960",
    "end": "1786960"
  },
  {
    "text": "happens that in modern languages we can uh like we can do better when we have",
    "start": "1786960",
    "end": "1793240"
  },
  {
    "text": "the support of functional programming in a uh in some sense in one way or the other",
    "start": "1793240",
    "end": "1798799"
  },
  {
    "text": "so in cotlin you can use lambdas you can use lambas uh instead of anonymous class",
    "start": "1798799",
    "end": "1806480"
  },
  {
    "text": "in Java like uh whenever you want to provide a listener that has only one method you can provide a Lambda instead",
    "start": "1806480",
    "end": "1812440"
  },
  {
    "text": "that should be uh quite familiar also cotlin provides the way to",
    "start": "1812440",
    "end": "1819240"
  },
  {
    "text": "walk with collections with Java Collections under the hood in a functional style so we can say like what's uh you",
    "start": "1819240",
    "end": "1827799"
  },
  {
    "text": "can filter collection you can map collection it's it's not again it's not a c invention it's known in many",
    "start": "1827799",
    "end": "1834159"
  },
  {
    "text": "different languages it it Now supported uh like a Java 8 uh it first was it",
    "start": "1834159",
    "end": "1840840"
  },
  {
    "text": "first appeared in Scala and uh then uh it turned out to be quite useful for",
    "start": "1840840",
    "end": "1846760"
  },
  {
    "text": "real development not only for not only in academic and uh uh",
    "start": "1846760",
    "end": "1853200"
  },
  {
    "text": "here uh it refers to a parameter of the Lambda and uh uh like of the type ofl and what",
    "start": "1853200",
    "end": "1861480"
  },
  {
    "text": "I wanted to emphasize here that uh we have we provide all this uh functions",
    "start": "1861480",
    "end": "1867320"
  },
  {
    "text": "that allow you to work with collections in functional style as extensions functions defined in the",
    "start": "1867320",
    "end": "1873840"
  },
  {
    "text": "library so you you may see the the the whole picture so we do not provide our",
    "start": "1873840",
    "end": "1879240"
  },
  {
    "text": "own library or collections libraries we use Java collection libraries we have extensions so our library is just a",
    "start": "1879240",
    "end": "1885279"
  },
  {
    "text": "bunch of extensions method on this collection library that improves your",
    "start": "1885279",
    "end": "1890840"
  },
  {
    "text": "experience with them and uh it not only extensions so C standard libraries is",
    "start": "1890840",
    "end": "1896480"
  },
  {
    "text": "extens is consist of extensions on collections but if we're talking about Android then C provides ankle Library as",
    "start": "1896480",
    "end": "1904919"
  },
  {
    "text": "a collection of extensions specifically for Android and uh if you use some framework",
    "start": "1904919",
    "end": "1912200"
  },
  {
    "text": "jav framework or Java library from cotland again you can just use it as this or it you can extend it with some",
    "start": "1912200",
    "end": "1919080"
  },
  {
    "text": "bunch of extensions to just improve your experience another important issue uh",
    "start": "1919080",
    "end": "1926600"
  },
  {
    "text": "again it's about why it happened to be so useful in Android lambas can be",
    "start": "1926600",
    "end": "1933039"
  },
  {
    "text": "inlined so there is no performance overhead uh you know for instance uh if",
    "start": "1933039",
    "end": "1938240"
  },
  {
    "text": "you use AR Java from Android uh for every Lambda uh if so if you target",
    "start": "1938240",
    "end": "1944799"
  },
  {
    "text": "obviously you do not Target Java 8 yet so if you target six uh for every Lambda",
    "start": "1944799",
    "end": "1950600"
  },
  {
    "text": "Anonymous class is generated so you have a bunch of extra classes and uh with",
    "start": "1950600",
    "end": "1956360"
  },
  {
    "text": "cotlin there is no an issue because lambas can be in lined and you have you",
    "start": "1956360",
    "end": "1963320"
  },
  {
    "text": "we do not have to create these Anonymous classes so we just in line the function",
    "start": "1963320",
    "end": "1969200"
  },
  {
    "text": "body and with Lambda body so there is no performance over head okay now the last feature I want to",
    "start": "1969200",
    "end": "1977240"
  },
  {
    "text": "cover the one that uh wasn't so explicitly stolen from someone else",
    "start": "1977240",
    "end": "1984320"
  },
  {
    "text": "something new and it uh actually somehow unites these two ideas extens extension",
    "start": "1984320",
    "end": "1992639"
  },
  {
    "text": "functions and lambdas so if you think about it uh EXT uh extension function",
    "start": "1992639",
    "end": "1999519"
  },
  {
    "text": "can be considered as function with the receiver so you you saw this there's function body and string as a receiver",
    "start": "1999519",
    "end": "2006440"
  },
  {
    "text": "and um uh so there are regular functions and functions with receiver and so the same idea applies to lambdas we have",
    "start": "2006440",
    "end": "2012960"
  },
  {
    "text": "regular lambdas and lambdas with receiver everything is clear",
    "start": "2012960",
    "end": "2018919"
  },
  {
    "text": "yeah you just unite to concept okay let's discuss let's look at",
    "start": "2018919",
    "end": "2025320"
  },
  {
    "text": "it and let's start with the example uh there is a very simple code",
    "start": "2025320",
    "end": "2030960"
  },
  {
    "text": "so just you create a string Builder you append something some text then you append it in a loop and then you return",
    "start": "2030960",
    "end": "2037279"
  },
  {
    "text": "the result uh in slides I use SB as a variable name",
    "start": "2037279",
    "end": "2042840"
  },
  {
    "text": "but I'm uh supposed that in real life you will call it string Builder and you will have to repeat the string Builder",
    "start": "2042840",
    "end": "2049358"
  },
  {
    "text": "into several lines and if you initialize if you walk with another variable you will have to repeat it name H so in to",
    "start": "2049359",
    "end": "2056679"
  },
  {
    "text": "better and you can use with string Builder and instead of",
    "start": "2056679",
    "end": "2062560"
  },
  {
    "text": "repeating this name you use it once and then you call all its meod in this block",
    "start": "2062560",
    "end": "2068118"
  },
  {
    "text": "just that's without a specific annotation so that's clear with is",
    "start": "2068119",
    "end": "2073240"
  },
  {
    "text": "present in different languages like python as a language construct and the most interesting thing in this slide is",
    "start": "2073240",
    "end": "2079878"
  },
  {
    "text": "its name it's called the WID function so you see the same pattern",
    "start": "2079879",
    "end": "2085919"
  },
  {
    "text": "follows something that looks like buil in construct and language actually is a function defined in the standard",
    "start": "2085919",
    "end": "2093560"
  },
  {
    "text": "Library so somehow we are able to Define this as a",
    "start": "2093560",
    "end": "2099400"
  },
  {
    "text": "function let's investigate so okay we now we did a function actually this block of code is",
    "start": "2099400",
    "end": "2107320"
  },
  {
    "text": "Lambda which is the second argument of the WID function in coton we have the following convention we can say that if",
    "start": "2107320",
    "end": "2114560"
  },
  {
    "text": "your Lambda is the last argument you can move it out of the parenthesis so you can put the parenthesis",
    "start": "2114560",
    "end": "2123040"
  },
  {
    "text": "first uh and then the Lambda another way to express the same would be write it",
    "start": "2123040",
    "end": "2128920"
  },
  {
    "text": "explicitly first argument second argument however it's not that readable now it doesn't look like a built-in",
    "start": "2128920",
    "end": "2134599"
  },
  {
    "text": "language construct so this syntactic convention works great for",
    "start": "2134599",
    "end": "2140400"
  },
  {
    "text": "us and this is an implicit receiver in this Lambda so actually Lambda with",
    "start": "2140920",
    "end": "2147560"
  },
  {
    "text": "receiver is Lambda that uh has this as an extra extra",
    "start": "2147560",
    "end": "2154880"
  },
  {
    "text": "argument and as usual for this reference as we know we can Adit it and now it",
    "start": "2154880",
    "end": "2161040"
  },
  {
    "text": "looks like a something builtin something special something that has special",
    "start": "2161040",
    "end": "2168440"
  },
  {
    "text": "support uh if you're interested you can uh investigate how it's declared so the",
    "start": "2168440",
    "end": "2173960"
  },
  {
    "text": "Declaration is quite simple it's just one line so we basically just call the",
    "start": "2173960",
    "end": "2179040"
  },
  {
    "text": "block on the receiver and conf standard Library declares several such oneline",
    "start": "2179040",
    "end": "2184319"
  },
  {
    "text": "functions that are very useful when you write coach that are so uh if you start",
    "start": "2184319",
    "end": "2189480"
  },
  {
    "text": "working with Android with cotlin it's very easy to start using functions like",
    "start": "2189480",
    "end": "2194560"
  },
  {
    "text": "with apply and also and in fact they are declared in the standard library and what's more you",
    "start": "2194560",
    "end": "2201720"
  },
  {
    "text": "can declare so yeah there's re this implicit",
    "start": "2201720",
    "end": "2206920"
  },
  {
    "text": "this you can declare you can use the same pattern not only for these uh",
    "start": "2206920",
    "end": "2215079"
  },
  {
    "text": "lambdas for these oneel functions but also I want to demonstrate this example uh we support uh something like",
    "start": "2215079",
    "end": "2222760"
  },
  {
    "text": "Builder PN uh there is an example with HTML basically because everyone knows",
    "start": "2222760",
    "end": "2228560"
  },
  {
    "text": "HTML and everyone understands what's going on here but it can be uh it can",
    "start": "2228560",
    "end": "2233640"
  },
  {
    "text": "work for every XML structure for every xmls that you have in your project so",
    "start": "2233640",
    "end": "2240640"
  },
  {
    "text": "what's here we have this HTML builders that looks like it looks like HTML with",
    "start": "2240640",
    "end": "2245720"
  },
  {
    "text": "with different uh with color braces uh and actually these all are",
    "start": "2245720",
    "end": "2253480"
  },
  {
    "text": "just functions you see that we're mixing here the regular code and HTML synex and",
    "start": "2253480",
    "end": "2260359"
  },
  {
    "text": "under the hood this all are lambas with receiver you can investigate it later",
    "start": "2260359",
    "end": "2267319"
  },
  {
    "text": "how it how how it how it can be declared and work but the idea is that you can use the same pattern for different",
    "start": "2267319",
    "end": "2274359"
  },
  {
    "text": "applications for different XML structures in your code and um it all works with d wither and uh",
    "start": "2274359",
    "end": "2281760"
  },
  {
    "text": "uh also now uh probably you know that Gradle uh support uh support now support",
    "start": "2281760",
    "end": "2290520"
  },
  {
    "text": "supports they haven't released yet but now they want to support to be able to write builds scripts in cotland and they",
    "start": "2290520",
    "end": "2299280"
  },
  {
    "text": "the same the same strategy work so they use the slam with receivers a lot it's",
    "start": "2299280",
    "end": "2305160"
  },
  {
    "text": "it's a very powerful feature that allows you to cells and grle is just one one of",
    "start": "2305160",
    "end": "2310240"
  },
  {
    "text": "the example one of the real examples probably won't write HTML but I suppose",
    "start": "2310240",
    "end": "2315599"
  },
  {
    "text": "more like build script yeah and uh you can also use uh this",
    "start": "2315599",
    "end": "2322960"
  },
  {
    "text": "type of fun of functionality this feature uh in your own code basis if you",
    "start": "2322960",
    "end": "2329079"
  },
  {
    "text": "have some repetitive pattern uh something uh that is specific",
    "start": "2329079",
    "end": "2335520"
  },
  {
    "text": "for your application uh and and uh with just uh the uh a small piece of cod that",
    "start": "2335520",
    "end": "2342599"
  },
  {
    "text": "changes from time to time so instead of copying it uh from meod to Method you",
    "start": "2342599",
    "end": "2347839"
  },
  {
    "text": "can actually extract it into our function with using clamas with the",
    "start": "2347839",
    "end": "2353839"
  },
  {
    "text": "support of in line you can extract it and it looks much more concise and much more readable and now instead of copying",
    "start": "2353839",
    "end": "2360079"
  },
  {
    "text": "this uh full code you just copy this method and you just call it and for",
    "start": "2360079",
    "end": "2367440"
  },
  {
    "text": "inance you have if you have to uh uh catch your specific exceptions in",
    "start": "2367440",
    "end": "2373960"
  },
  {
    "text": "this pattern you can easily do that you you have to change it one time one time",
    "start": "2373960",
    "end": "2379599"
  },
  {
    "text": "in the in the library that's how the Cod use Works actually so codlin gives you",
    "start": "2379599",
    "end": "2385880"
  },
  {
    "text": "more power for this codra use and again uh lambdas can be in",
    "start": "2385880",
    "end": "2393440"
  },
  {
    "text": "lined and uh when you declare such function you can declare as in line function and the generated bite Cod will",
    "start": "2393440",
    "end": "2400400"
  },
  {
    "text": "be similar to what you would dite by hand so you don't have to create",
    "start": "2400400",
    "end": "2406319"
  },
  {
    "text": "Anonymous Lambda for anonymous class for each Lambda you can extract it and align it and it works like uh you would write",
    "start": "2406319",
    "end": "2413839"
  },
  {
    "text": "it by hand but actually it's uh it looks more concise and",
    "start": "2413839",
    "end": "2421400"
  },
  {
    "text": "readable uh another application of the same uh Builder pattern",
    "start": "2421400",
    "end": "2428280"
  },
  {
    "text": "is uh we have domain specific language for dynamic layouts uh actually there we",
    "start": "2428280",
    "end": "2434880"
  },
  {
    "text": "have ankor library for working extensions for Android and we have part Anor Dell it's not that clear what",
    "start": "2434880",
    "end": "2443319"
  },
  {
    "text": "future expects it now when Google have the support for cotlin because probably they will have some official",
    "start": "2443319",
    "end": "2450280"
  },
  {
    "text": "recommendations what to use but still it's it demonstrates the",
    "start": "2450280",
    "end": "2455400"
  },
  {
    "text": "core idea what can be done with cotland for Android and what can be done is that",
    "start": "2455400",
    "end": "2460680"
  },
  {
    "text": "you can express the some like similar layouts using just regular cotlin code",
    "start": "2460680",
    "end": "2468560"
  },
  {
    "text": "and if you compare it's very clear what's going on here so alert uh like",
    "start": "2468560",
    "end": "2475200"
  },
  {
    "text": "you see there is title message and two buttons and actually alert is a function",
    "start": "2475200",
    "end": "2481119"
  },
  {
    "text": "that takes three arguments the last one is Lambda with receiver again and",
    "start": "2481119",
    "end": "2486400"
  },
  {
    "text": "positive button negative button can be called on explicit this in this Lambda",
    "start": "2486400",
    "end": "2491680"
  },
  {
    "text": "so the same button again it's it's quite powerful you can create very readable",
    "start": "2491680",
    "end": "2498040"
  },
  {
    "text": "constructs with it uh the same works for more specific layouts custom layouts you can uh you",
    "start": "2498040",
    "end": "2506560"
  },
  {
    "text": "can express it like this so again it's a powerful feature",
    "start": "2506560",
    "end": "2512880"
  },
  {
    "text": "but we'll see what what ways it with the gole apart so I think I'm",
    "start": "2512880",
    "end": "2519760"
  },
  {
    "text": "already there uh at last uh some references so we have uh the cotton side",
    "start": "2519760",
    "end": "2529040"
  },
  {
    "text": "uh as I already mentioned Gradle supports uh cotlin so you will soon be",
    "start": "2529040",
    "end": "2534640"
  },
  {
    "text": "able to write Bill scripts in cotlin and uh some features that supports uh the",
    "start": "2534640",
    "end": "2541359"
  },
  {
    "text": "sell help us here something like lambra receiver as well as we saw uh if you",
    "start": "2541359",
    "end": "2546839"
  },
  {
    "text": "want to learn cotlin one of the ways would be to try cotlin Co we have them available in the browser as well as a",
    "start": "2546839",
    "end": "2554800"
  },
  {
    "text": "standalone project for intelligy uh so there is just 42 tasks",
    "start": "2554800",
    "end": "2561880"
  },
  {
    "text": "uh to complete small tasks and actually they have answers and keys so you can check check it if you",
    "start": "2561880",
    "end": "2568440"
  },
  {
    "text": "want uh you can tweet about them afterwards and also we have a book",
    "start": "2568440",
    "end": "2574440"
  },
  {
    "text": "written about cotlin is all there it uh doesn't cover",
    "start": "2574440",
    "end": "2579760"
  },
  {
    "text": "our uh latest feature of cortines but probably it",
    "start": "2579760",
    "end": "2585599"
  },
  {
    "text": "would covered in the future so thank you all and have a nice Scotland",
    "start": "2585599",
    "end": "2592760"
  }
]