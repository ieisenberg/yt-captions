[
  {
    "text": "[Music]",
    "start": "4740",
    "end": "7828"
  },
  {
    "text": "one of my most successful videos on this",
    "start": "13880",
    "end": "16400"
  },
  {
    "text": "channel so far Compares functional and",
    "start": "16400",
    "end": "19240"
  },
  {
    "text": "objectoriented programming this is an",
    "start": "19240",
    "end": "21920"
  },
  {
    "text": "interesting topic and clearly not just",
    "start": "21920",
    "end": "23760"
  },
  {
    "text": "to me but there's more to this debate",
    "start": "23760",
    "end": "26800"
  },
  {
    "text": "than we discussed in that episode this",
    "start": "26800",
    "end": "28920"
  },
  {
    "text": "is one of those debates that to be",
    "start": "28920",
    "end": "30720"
  },
  {
    "text": "honest seems a little weird to me my",
    "start": "30720",
    "end": "33360"
  },
  {
    "text": "stance is not that I hate functional",
    "start": "33360",
    "end": "35440"
  },
  {
    "text": "programming in love o or vice versa but",
    "start": "35440",
    "end": "38719"
  },
  {
    "text": "rather that I think of each of these",
    "start": "38719",
    "end": "40760"
  },
  {
    "text": "approaches as tools rather than things",
    "start": "40760",
    "end": "43280"
  },
  {
    "text": "to go to war about so what are the",
    "start": "43280",
    "end": "46079"
  },
  {
    "text": "arguments for and against o and",
    "start": "46079",
    "end": "50360"
  },
  {
    "text": "[Music]",
    "start": "53320",
    "end": "57359"
  },
  {
    "text": "FP hi I'm Da Farley of continuous to",
    "start": "57359",
    "end": "60600"
  },
  {
    "text": "welcome to my channel and if you haven't",
    "start": "60600",
    "end": "62600"
  },
  {
    "text": "been here before please do hit subscribe",
    "start": "62600",
    "end": "65080"
  },
  {
    "text": "and if you enjoy the content today hit",
    "start": "65080",
    "end": "66960"
  },
  {
    "text": "like as well there is no o is best or FP",
    "start": "66960",
    "end": "71439"
  },
  {
    "text": "is best for me there are times when",
    "start": "71439",
    "end": "73720"
  },
  {
    "text": "functional programming is the best",
    "start": "73720",
    "end": "75280"
  },
  {
    "text": "choice for some things and times when",
    "start": "75280",
    "end": "77840"
  },
  {
    "text": "object orientation is best for others",
    "start": "77840",
    "end": "81040"
  },
  {
    "text": "most of the systems that I can remember",
    "start": "81040",
    "end": "83000"
  },
  {
    "text": "building had some as aspects of both",
    "start": "83000",
    "end": "86079"
  },
  {
    "text": "approaches despite the fact that I",
    "start": "86079",
    "end": "88439"
  },
  {
    "text": "mostly still think of my myself as",
    "start": "88439",
    "end": "90560"
  },
  {
    "text": "primarily an oo programmer this is not",
    "start": "90560",
    "end": "93600"
  },
  {
    "text": "because of language support but because",
    "start": "93600",
    "end": "95840"
  },
  {
    "text": "oo ideas or functional ideas made most",
    "start": "95840",
    "end": "98320"
  },
  {
    "text": "sense in the context of the code that we",
    "start": "98320",
    "end": "100040"
  },
  {
    "text": "were writing at that time I was an oo",
    "start": "100040",
    "end": "103320"
  },
  {
    "text": "programmer in C for a long time and some",
    "start": "103320",
    "end": "106799"
  },
  {
    "text": "of my C code was passing around pointers",
    "start": "106799",
    "end": "109119"
  },
  {
    "text": "to functions that I could call",
    "start": "109119",
    "end": "111560"
  },
  {
    "text": "polymorphically um and using immutable",
    "start": "111560",
    "end": "114759"
  },
  {
    "text": "data structure so my C code was both o",
    "start": "114759",
    "end": "117799"
  },
  {
    "text": "and functional the difference between o",
    "start": "117799",
    "end": "120960"
  },
  {
    "text": "and FP is one of those debates though",
    "start": "120960",
    "end": "123159"
  },
  {
    "text": "that seems to polarize people we can end",
    "start": "123159",
    "end": "126039"
  },
  {
    "text": "up trying to score points in an argument",
    "start": "126039",
    "end": "129360"
  },
  {
    "text": "rather than just shedding much light if",
    "start": "129360",
    "end": "131120"
  },
  {
    "text": "we're not careful the first thing to say",
    "start": "131120",
    "end": "134360"
  },
  {
    "text": "may be obvious but general purpose",
    "start": "134360",
    "end": "136760"
  },
  {
    "text": "programming languages are general",
    "start": "136760",
    "end": "139680"
  },
  {
    "text": "purpose in that you can write any system",
    "start": "139680",
    "end": "142840"
  },
  {
    "text": "in any",
    "start": "142840",
    "end": "144040"
  },
  {
    "text": "language there is nothing that you can",
    "start": "144040",
    "end": "146640"
  },
  {
    "text": "do in an oo language that you can't do",
    "start": "146640",
    "end": "149200"
  },
  {
    "text": "in a functional language and vice versa",
    "start": "149200",
    "end": "151640"
  },
  {
    "text": "that's really what general and in",
    "start": "151640",
    "end": "153160"
  },
  {
    "text": "general purpose",
    "start": "153160",
    "end": "154840"
  },
  {
    "text": "means there's a difference between a",
    "start": "154840",
    "end": "157959"
  },
  {
    "text": "general purpose language and a domain",
    "start": "157959",
    "end": "160080"
  },
  {
    "text": "specific language domain specific",
    "start": "160080",
    "end": "162680"
  },
  {
    "text": "languages have by design a narrower",
    "start": "162680",
    "end": "165200"
  },
  {
    "text": "focus on whatever it is that their",
    "start": "165200",
    "end": "167080"
  },
  {
    "text": "domain is for example SQL is a good",
    "start": "167080",
    "end": "170879"
  },
  {
    "text": "example of a DSL and it's great at",
    "start": "170879",
    "end": "174040"
  },
  {
    "text": "finding a collection of Records in a set",
    "start": "174040",
    "end": "176480"
  },
  {
    "text": "but it' be a rather poor choice for",
    "start": "176480",
    "end": "178159"
  },
  {
    "text": "writing Space Invaders",
    "start": "178159",
    "end": "180560"
  },
  {
    "text": "this doesn't mean that every general",
    "start": "180560",
    "end": "182519"
  },
  {
    "text": "purpose language is always an equally",
    "start": "182519",
    "end": "184480"
  },
  {
    "text": "good choice for any problem but it does",
    "start": "184480",
    "end": "187480"
  },
  {
    "text": "mean that any general purpose language",
    "start": "187480",
    "end": "190680"
  },
  {
    "text": "could be used to solve any problem in",
    "start": "190680",
    "end": "194680"
  },
  {
    "text": "computer science this is the idea of",
    "start": "194680",
    "end": "196400"
  },
  {
    "text": "curing completeness which describes the",
    "start": "196400",
    "end": "198879"
  },
  {
    "text": "universality of computation it may be a",
    "start": "198879",
    "end": "202239"
  },
  {
    "text": "bad idea to write an operating system in",
    "start": "202239",
    "end": "204599"
  },
  {
    "text": "Python but we could so while it may be",
    "start": "204599",
    "end": "207799"
  },
  {
    "text": "easier to write immutable code past",
    "start": "207799",
    "end": "210159"
  },
  {
    "text": "functions as arguments in hasore we can",
    "start": "210159",
    "end": "212720"
  },
  {
    "text": "write code that has the same effect in C",
    "start": "212720",
    "end": "215239"
  },
  {
    "text": "Java or any other general purpose",
    "start": "215239",
    "end": "217400"
  },
  {
    "text": "language",
    "start": "217400",
    "end": "218360"
  },
  {
    "text": "too while it may be more difficult to",
    "start": "218360",
    "end": "221159"
  },
  {
    "text": "write code with side effects in closure",
    "start": "221159",
    "end": "223280"
  },
  {
    "text": "or hcll we can still do that if we try",
    "start": "223280",
    "end": "226080"
  },
  {
    "text": "hard enough so the real difference",
    "start": "226080",
    "end": "228799"
  },
  {
    "text": "between these different paradigms is not",
    "start": "228799",
    "end": "231360"
  },
  {
    "text": "that they what they allow us to do but",
    "start": "231360",
    "end": "233959"
  },
  {
    "text": "how easy they make it to do the things",
    "start": "233959",
    "end": "236120"
  },
  {
    "text": "that we want to do this is about syntax",
    "start": "236120",
    "end": "238879"
  },
  {
    "text": "more than capability",
    "start": "238879",
    "end": "240920"
  },
  {
    "text": "but syntax matters it can change how we",
    "start": "240920",
    "end": "243480"
  },
  {
    "text": "think about the problem that we're",
    "start": "243480",
    "end": "244799"
  },
  {
    "text": "trying to solve different languages in",
    "start": "244799",
    "end": "248000"
  },
  {
    "text": "and different paradigms make some ideas",
    "start": "248000",
    "end": "250040"
  },
  {
    "text": "easier to express that's it really let's",
    "start": "250040",
    "end": "253640"
  },
  {
    "text": "look at a really simple example a",
    "start": "253640",
    "end": "256880"
  },
  {
    "text": "popular idea from functional programming",
    "start": "256880",
    "end": "258919"
  },
  {
    "text": "is the idea of mapping as in map and",
    "start": "258919",
    "end": "261120"
  },
  {
    "text": "reduce in this context a map is a higher",
    "start": "261120",
    "end": "264560"
  },
  {
    "text": "order function that means apply some",
    "start": "264560",
    "end": "267759"
  },
  {
    "text": "function to each element in a collection",
    "start": "267759",
    "end": "270919"
  },
  {
    "text": "this is often seen as one of the",
    "start": "270919",
    "end": "272680"
  },
  {
    "text": "preferred ways to process lists one way",
    "start": "272680",
    "end": "275639"
  },
  {
    "text": "in which map is deemed to be better is",
    "start": "275639",
    "end": "278560"
  },
  {
    "text": "in terms of performance now the real",
    "start": "278560",
    "end": "281280"
  },
  {
    "text": "answer to whether Maps process lists",
    "start": "281280",
    "end": "283520"
  },
  {
    "text": "faster than Loops is it",
    "start": "283520",
    "end": "286680"
  },
  {
    "text": "depends and it depends on a lot of",
    "start": "286680",
    "end": "289600"
  },
  {
    "text": "things one of the common advantages",
    "start": "289600",
    "end": "292160"
  },
  {
    "text": "cited for functional programming is that",
    "start": "292160",
    "end": "294280"
  },
  {
    "text": "it makes concurrency easier this is true",
    "start": "294280",
    "end": "297280"
  },
  {
    "text": "writing immutable pure functions me",
    "start": "297280",
    "end": "299720"
  },
  {
    "text": "means that we can automatically",
    "start": "299720",
    "end": "301199"
  },
  {
    "text": "parallelize them but why is that a good",
    "start": "301199",
    "end": "304320"
  },
  {
    "text": "idea the naive assumption is that",
    "start": "304320",
    "end": "307039"
  },
  {
    "text": "parallelizing like this means that we'll",
    "start": "307039",
    "end": "309160"
  },
  {
    "text": "get the results faster but this is",
    "start": "309160",
    "end": "311639"
  },
  {
    "text": "almost never the case if you measure it",
    "start": "311639",
    "end": "314479"
  },
  {
    "text": "the problem here is that concurrency is",
    "start": "314479",
    "end": "316880"
  },
  {
    "text": "fine but it only improves performance",
    "start": "316880",
    "end": "320280"
  },
  {
    "text": "when we don't need to join the results",
    "start": "320280",
    "end": "321840"
  },
  {
    "text": "back together again as soon as we need",
    "start": "321840",
    "end": "324600"
  },
  {
    "text": "to rejoin the results the costs of locks",
    "start": "324600",
    "end": "328199"
  },
  {
    "text": "semaphor cash missing is and even the",
    "start": "328199",
    "end": "330800"
  },
  {
    "text": "most efficient mechanism of all to",
    "start": "330800",
    "end": "332560"
  },
  {
    "text": "manage that kind of concurrent join",
    "start": "332560",
    "end": "334600"
  },
  {
    "text": "compare and swap operations dominates",
    "start": "334600",
    "end": "337720"
  },
  {
    "text": "performance compare and swap is often",
    "start": "337720",
    "end": "340039"
  },
  {
    "text": "hundreds of times slower than a single",
    "start": "340039",
    "end": "342280"
  },
  {
    "text": "thread for example so you need a 100",
    "start": "342280",
    "end": "345000"
  },
  {
    "text": "threads to get the same performance as a",
    "start": "345000",
    "end": "349680"
  },
  {
    "text": "single thread and then your concurrency",
    "start": "349680",
    "end": "351720"
  },
  {
    "text": "problems would be worse so map can be",
    "start": "351720",
    "end": "354319"
  },
  {
    "text": "great for splitting problems into",
    "start": "354319",
    "end": "356120"
  },
  {
    "text": "parallel processes but will always be",
    "start": "356120",
    "end": "358000"
  },
  {
    "text": "much slower if you need to rejoin the",
    "start": "358000",
    "end": "359840"
  },
  {
    "text": "data again to look at it so if you don't",
    "start": "359840",
    "end": "362759"
  },
  {
    "text": "gain in performance what are the other",
    "start": "362759",
    "end": "365520"
  },
  {
    "text": "benefits is the solution simpler or",
    "start": "365520",
    "end": "368160"
  },
  {
    "text": "easier to read I think this is a matter",
    "start": "368160",
    "end": "370720"
  },
  {
    "text": "of taste but I confess I don't really",
    "start": "370720",
    "end": "373759"
  },
  {
    "text": "care very much I see no real advantage",
    "start": "373759",
    "end": "377000"
  },
  {
    "text": "in either representation here as an old",
    "start": "377000",
    "end": "379960"
  },
  {
    "text": "school programmer I'd probably prefer",
    "start": "379960",
    "end": "382360"
  },
  {
    "text": "the explicit nature of the loops a",
    "start": "382360",
    "end": "384240"
  },
  {
    "text": "little bit but it really doesn't really",
    "start": "384240",
    "end": "386280"
  },
  {
    "text": "make that much difference to me the",
    "start": "386280",
    "end": "388560"
  },
  {
    "text": "verbos nature of java in this example",
    "start": "388560",
    "end": "391440"
  },
  {
    "text": "certainly doesn't show the map in its",
    "start": "391440",
    "end": "393160"
  },
  {
    "text": "best light here as a result of that I",
    "start": "393160",
    "end": "396199"
  },
  {
    "text": "thought I'd write it in Python instead",
    "start": "396199",
    "end": "398840"
  },
  {
    "text": "and I have to show you this little Quirk",
    "start": "398840",
    "end": "401240"
  },
  {
    "text": "because it's funny you can't call print",
    "start": "401240",
    "end": "403759"
  },
  {
    "text": "from a Lambda in Pyon so you end up",
    "start": "403759",
    "end": "406280"
  },
  {
    "text": "doing this instead which is certainly",
    "start": "406280",
    "end": "408680"
  },
  {
    "text": "worse than the loop more technically",
    "start": "408680",
    "end": "411199"
  },
  {
    "text": "though functional programmers and O prog",
    "start": "411199",
    "end": "413560"
  },
  {
    "text": "programmers talk about the value of",
    "start": "413560",
    "end": "415240"
  },
  {
    "text": "different ideas each picked to show off",
    "start": "415240",
    "end": "417479"
  },
  {
    "text": "the advantages of their preferred",
    "start": "417479",
    "end": "419160"
  },
  {
    "text": "approach usually o programmers talk",
    "start": "419160",
    "end": "421919"
  },
  {
    "text": "about the value of modeling the problem",
    "start": "421919",
    "end": "424440"
  },
  {
    "text": "I value the high level navigability of",
    "start": "424440",
    "end": "426560"
  },
  {
    "text": "the problem that I get from oo that's",
    "start": "426560",
    "end": "428919"
  },
  {
    "text": "true but this modeling isn't only the",
    "start": "428919",
    "end": "430960"
  },
  {
    "text": "province of object",
    "start": "430960",
    "end": "432599"
  },
  {
    "text": "orientation there's a good presentation",
    "start": "432599",
    "end": "435000"
  },
  {
    "text": "from Marco emrich about a functional",
    "start": "435000",
    "end": "438080"
  },
  {
    "text": "approach to domain driven design that I",
    "start": "438080",
    "end": "439960"
  },
  {
    "text": "particularly enjoyed I liked Marco's",
    "start": "439960",
    "end": "442520"
  },
  {
    "text": "idea that the core domain of the system",
    "start": "442520",
    "end": "445000"
  },
  {
    "text": "is functional and the iio at the edges",
    "start": "445000",
    "end": "447639"
  },
  {
    "text": "is always not because it has side",
    "start": "447639",
    "end": "450520"
  },
  {
    "text": "effects after I've stored something in a",
    "start": "450520",
    "end": "453160"
  },
  {
    "text": "file or a database which is shared",
    "start": "453160",
    "end": "455160"
  },
  {
    "text": "mutable State I really want the state to",
    "start": "455160",
    "end": "457680"
  },
  {
    "text": "have changed this is an interesting",
    "start": "457680",
    "end": "460120"
  },
  {
    "text": "insight and certainly Bears some",
    "start": "460120",
    "end": "461800"
  },
  {
    "text": "relationship to how I usually Design",
    "start": "461800",
    "end": "464120"
  },
  {
    "text": "Systems even though as I've said before",
    "start": "464120",
    "end": "467199"
  },
  {
    "text": "I think of my Approach as more",
    "start": "467199",
    "end": "468840"
  },
  {
    "text": "objectoriented than functional",
    "start": "468840",
    "end": "471440"
  },
  {
    "text": "definitions of oo usually include",
    "start": "471440",
    "end": "473800"
  },
  {
    "text": "abstraction which allows us to hide",
    "start": "473800",
    "end": "476000"
  },
  {
    "text": "unnecessary details inheritance defining",
    "start": "476000",
    "end": "479000"
  },
  {
    "text": "one type type of thing in terms of",
    "start": "479000",
    "end": "480560"
  },
  {
    "text": "another polymorphism being able to",
    "start": "480560",
    "end": "483560"
  },
  {
    "text": "access things of different types through",
    "start": "483560",
    "end": "486080"
  },
  {
    "text": "the same interface and encapsulation",
    "start": "486080",
    "end": "488400"
  },
  {
    "text": "which allows us to hide on interesting",
    "start": "488400",
    "end": "490639"
  },
  {
    "text": "detail I think that most functional",
    "start": "490639",
    "end": "493039"
  },
  {
    "text": "programmers would agree that all of",
    "start": "493039",
    "end": "494680"
  },
  {
    "text": "these are good things perhaps with the",
    "start": "494680",
    "end": "497000"
  },
  {
    "text": "exception of inheritance in fact all of",
    "start": "497000",
    "end": "499960"
  },
  {
    "text": "these are principles that also underpin",
    "start": "499960",
    "end": "502960"
  },
  {
    "text": "functional programming it's just that we",
    "start": "502960",
    "end": "505680"
  },
  {
    "text": "describe those things in somewhat",
    "start": "505680",
    "end": "507720"
  },
  {
    "text": "different terms fun programmers talk",
    "start": "507720",
    "end": "510639"
  },
  {
    "text": "about declarative programming which is",
    "start": "510639",
    "end": "512719"
  },
  {
    "text": "really a form of abstraction and",
    "start": "512719",
    "end": "514518"
  },
  {
    "text": "information hiding and the use of types",
    "start": "514519",
    "end": "516959"
  },
  {
    "text": "which is based on the idea of",
    "start": "516959",
    "end": "518640"
  },
  {
    "text": "polymorphism inheritance though is",
    "start": "518640",
    "end": "521039"
  },
  {
    "text": "tricky because while it is clearly true",
    "start": "521039",
    "end": "524200"
  },
  {
    "text": "that it has some strong benefits it's",
    "start": "524200",
    "end": "526080"
  },
  {
    "text": "also often been misused and can have",
    "start": "526080",
    "end": "528640"
  },
  {
    "text": "some serious drawbacks if you create a",
    "start": "528640",
    "end": "531480"
  },
  {
    "text": "new window or button on your display",
    "start": "531480",
    "end": "534760"
  },
  {
    "text": "it's through inheritance that you can",
    "start": "534760",
    "end": "536360"
  },
  {
    "text": "resize or click it object orientation",
    "start": "536360",
    "end": "539440"
  },
  {
    "text": "was the technical step that really",
    "start": "539440",
    "end": "541480"
  },
  {
    "text": "liberated code sharing and it's no",
    "start": "541480",
    "end": "544760"
  },
  {
    "text": "surprise that o and the GUI came from",
    "start": "544760",
    "end": "548040"
  },
  {
    "text": "the same place Xerox Park the GUI is",
    "start": "548040",
    "end": "551720"
  },
  {
    "text": "deeply an object-oriented inspired",
    "start": "551720",
    "end": "554560"
  },
  {
    "text": "idea when non oo programmers poke fun at",
    "start": "554560",
    "end": "557920"
  },
  {
    "text": "oo though they're often poking fun",
    "start": "557920",
    "end": "560360"
  },
  {
    "text": "primarily inheritance that's because you",
    "start": "560360",
    "end": "562920"
  },
  {
    "text": "can make horrible messes with",
    "start": "562920",
    "end": "564920"
  },
  {
    "text": "inheritance to the extent that people",
    "start": "564920",
    "end": "567320"
  },
  {
    "text": "who prefer simple binary answers to",
    "start": "567320",
    "end": "569440"
  },
  {
    "text": "things will'll often say inheritance is",
    "start": "569440",
    "end": "571279"
  },
  {
    "text": "bad of course inheritance isn't bad but",
    "start": "571279",
    "end": "574680"
  },
  {
    "text": "bad inheritance is certainly bad the big",
    "start": "574680",
    "end": "577360"
  },
  {
    "text": "mistake in inheritance and I'd probably",
    "start": "577360",
    "end": "579519"
  },
  {
    "text": "say programming in general is not to",
    "start": "579519",
    "end": "581760"
  },
  {
    "text": "model the problem that you're trying to",
    "start": "581760",
    "end": "583680"
  },
  {
    "text": "solve well enough tactical programming",
    "start": "583680",
    "end": "586760"
  },
  {
    "text": "is often at risk of being tactical crap",
    "start": "586760",
    "end": "590120"
  },
  {
    "text": "for example in Java a set inherits from",
    "start": "590120",
    "end": "593600"
  },
  {
    "text": "a vector and properties inherit from",
    "start": "593600",
    "end": "596320"
  },
  {
    "text": "hash tables this is tactical crap as set",
    "start": "596320",
    "end": "599640"
  },
  {
    "text": "isn't a vector properties are not hash",
    "start": "599640",
    "end": "602600"
  },
  {
    "text": "tables this was a lazy choice because it",
    "start": "602600",
    "end": "605240"
  },
  {
    "text": "made implementing sets and properties",
    "start": "605240",
    "end": "607640"
  },
  {
    "text": "easier but it is nonsense really a set",
    "start": "607640",
    "end": "611600"
  },
  {
    "text": "is not a vector and results in all sorts",
    "start": "611600",
    "end": "614279"
  },
  {
    "text": "of features of sets in Java that make no",
    "start": "614279",
    "end": "617720"
  },
  {
    "text": "sense at all what does index of an entry",
    "start": "617720",
    "end": "622200"
  },
  {
    "text": "mean for a set or why would I ever wish",
    "start": "622200",
    "end": "625519"
  },
  {
    "text": "to rehash my",
    "start": "625519",
    "end": "627399"
  },
  {
    "text": "properties this isn't the fault of",
    "start": "627399",
    "end": "629600"
  },
  {
    "text": "inheritance per se this is just poor",
    "start": "629600",
    "end": "632120"
  },
  {
    "text": "tactical design choice and we can",
    "start": "632120",
    "end": "634839"
  },
  {
    "text": "certainly make poor design choices in",
    "start": "634839",
    "end": "636880"
  },
  {
    "text": "any language even functional",
    "start": "636880",
    "end": "638920"
  },
  {
    "text": "languages I think that the key decisions",
    "start": "638920",
    "end": "641480"
  },
  {
    "text": "in software are outside the technical",
    "start": "641480",
    "end": "644279"
  },
  {
    "text": "detail of individual languages largely",
    "start": "644279",
    "end": "646959"
  },
  {
    "text": "or programming language paradigms for",
    "start": "646959",
    "end": "648839"
  },
  {
    "text": "that matter if you'd like to see what I",
    "start": "648839",
    "end": "650760"
  },
  {
    "text": "mean take a look at my training course",
    "start": "650760",
    "end": "653279"
  },
  {
    "text": "better software faster it describes what",
    "start": "653279",
    "end": "655639"
  },
  {
    "text": "it takes to build high quality software",
    "start": "655639",
    "end": "657800"
  },
  {
    "text": "and why that matters there's a link in",
    "start": "657800",
    "end": "660200"
  },
  {
    "text": "the description",
    "start": "660200",
    "end": "662079"
  },
  {
    "text": "below in Marco's presentation he quotes",
    "start": "662079",
    "end": "665200"
  },
  {
    "text": "functional programmers saying functional",
    "start": "665200",
    "end": "667560"
  },
  {
    "text": "programming is great because it has",
    "start": "667560",
    "end": "669040"
  },
  {
    "text": "immutable data structures a stateless",
    "start": "669040",
    "end": "671720"
  },
  {
    "text": "programming model pure functions and no",
    "start": "671720",
    "end": "674680"
  },
  {
    "text": "Loops these thing make it easier to",
    "start": "674680",
    "end": "676959"
  },
  {
    "text": "reason about your code they say well in",
    "start": "676959",
    "end": "680000"
  },
  {
    "text": "most oo languages I can easily make",
    "start": "680000",
    "end": "683279"
  },
  {
    "text": "immutable data structures program",
    "start": "683279",
    "end": "685519"
  },
  {
    "text": "stateless code create pure functions and",
    "start": "685519",
    "end": "688399"
  },
  {
    "text": "avoid loops if I choose to even before",
    "start": "688399",
    "end": "692240"
  },
  {
    "text": "choosing to use the functional features",
    "start": "692240",
    "end": "694040"
  },
  {
    "text": "that have been added to most modern oo",
    "start": "694040",
    "end": "696760"
  },
  {
    "text": "languages these days the real value in a",
    "start": "696760",
    "end": "700320"
  },
  {
    "text": "more functional approach to programming",
    "start": "700320",
    "end": "702680"
  },
  {
    "text": "as I perceive it is really in three",
    "start": "702680",
    "end": "704839"
  },
  {
    "text": "areas treating functions as variables",
    "start": "704839",
    "end": "708399"
  },
  {
    "text": "immutability and declarative programming",
    "start": "708399",
    "end": "711560"
  },
  {
    "text": "functions as variables is a significant",
    "start": "711560",
    "end": "714079"
  },
  {
    "text": "step once again you don't need a",
    "start": "714079",
    "end": "716040"
  },
  {
    "text": "functional language to do this though I",
    "start": "716040",
    "end": "718200"
  },
  {
    "text": "used to do versions of this in assembler",
    "start": "718200",
    "end": "720360"
  },
  {
    "text": "C C++ Java and python but having direct",
    "start": "720360",
    "end": "724240"
  },
  {
    "text": "language support certainly makes it",
    "start": "724240",
    "end": "725760"
  },
  {
    "text": "nicer to use this allows us to pass one",
    "start": "725760",
    "end": "728880"
  },
  {
    "text": "function as an argument to another which",
    "start": "728880",
    "end": "731160"
  },
  {
    "text": "can then call that",
    "start": "731160",
    "end": "732920"
  },
  {
    "text": "function if you have ever come across",
    "start": "732920",
    "end": "735360"
  },
  {
    "text": "two very similar bits of code but that",
    "start": "735360",
    "end": "737760"
  },
  {
    "text": "are just slightly different like this",
    "start": "737760",
    "end": "740519"
  },
  {
    "text": "then this ability to pass a function as",
    "start": "740519",
    "end": "742639"
  },
  {
    "text": "an argument is a really nice tool to use",
    "start": "742639",
    "end": "745199"
  },
  {
    "text": "to simplify and generalize the code this",
    "start": "745199",
    "end": "747760"
  },
  {
    "text": "is also the idea behind things like",
    "start": "747760",
    "end": "750120"
  },
  {
    "text": "event handlers oh hang on isn't that an",
    "start": "750120",
    "end": "753079"
  },
  {
    "text": "no idea immutability is an important",
    "start": "753079",
    "end": "756399"
  },
  {
    "text": "tool but it's never the only tool at",
    "start": "756399",
    "end": "759680"
  },
  {
    "text": "some point you want to change things",
    "start": "759680",
    "end": "761920"
  },
  {
    "text": "because otherwise what's the point of",
    "start": "761920",
    "end": "763920"
  },
  {
    "text": "your code this is one reason why I liked",
    "start": "763920",
    "end": "767199"
  },
  {
    "text": "Marco's point that IO at the edges of",
    "start": "767199",
    "end": "769800"
  },
  {
    "text": "your system always has side effects",
    "start": "769800",
    "end": "772279"
  },
  {
    "text": "because if it didn't your code isn't",
    "start": "772279",
    "end": "773959"
  },
  {
    "text": "doing anything I agree that minimizing",
    "start": "773959",
    "end": "776720"
  },
  {
    "text": "side effects in code can make things",
    "start": "776720",
    "end": "778399"
  },
  {
    "text": "easier to re about but it's also never",
    "start": "778399",
    "end": "781160"
  },
  {
    "text": "the whole answer at least in the purest",
    "start": "781160",
    "end": "784000"
  },
  {
    "text": "sense of no mutable State at the level",
    "start": "784000",
    "end": "787240"
  },
  {
    "text": "of whole systems there are very few",
    "start": "787240",
    "end": "790000"
  },
  {
    "text": "Corner cases where genuinely stateless",
    "start": "790000",
    "end": "792320"
  },
  {
    "text": "systems make any sense and then only in",
    "start": "792320",
    "end": "795920"
  },
  {
    "text": "very narrow contexts where code is",
    "start": "795920",
    "end": "798399"
  },
  {
    "text": "acting as some kind of pipe that changes",
    "start": "798399",
    "end": "800320"
  },
  {
    "text": "the data in some way this idea is",
    "start": "800320",
    "end": "802720"
  },
  {
    "text": "extremely valuable as part of a system a",
    "start": "802720",
    "end": "805680"
  },
  {
    "text": "simplifying step but in whole systems",
    "start": "805680",
    "end": "808800"
  },
  {
    "text": "there's always State changing somewhere",
    "start": "808800",
    "end": "812240"
  },
  {
    "text": "so the idea of stateless systems is",
    "start": "812240",
    "end": "814160"
  },
  {
    "text": "never an absolute it is much more about",
    "start": "814160",
    "end": "817320"
  },
  {
    "text": "where you deal with the state changes",
    "start": "817320",
    "end": "819120"
  },
  {
    "text": "rather than eliminating them all",
    "start": "819120",
    "end": "820560"
  },
  {
    "text": "together minimizing side effects is",
    "start": "820560",
    "end": "823279"
  },
  {
    "text": "great in the right place and has been",
    "start": "823279",
    "end": "825959"
  },
  {
    "text": "with hindsight an important aspect of my",
    "start": "825959",
    "end": "828399"
  },
  {
    "text": "own approach to object-oriented design",
    "start": "828399",
    "end": "830199"
  },
  {
    "text": "for a very long time as Michael feathers",
    "start": "830199",
    "end": "832720"
  },
  {
    "text": "said to me in our chat a few months ago",
    "start": "832720",
    "end": "836240"
  },
  {
    "text": "object-oriented programming looks a lot",
    "start": "836240",
    "end": "838120"
  },
  {
    "text": "like functional program when it's done",
    "start": "838120",
    "end": "839959"
  },
  {
    "text": "right but whether you are developing in",
    "start": "839959",
    "end": "842839"
  },
  {
    "text": "objectoriented fashion or functional",
    "start": "842839",
    "end": "845800"
  },
  {
    "text": "there are times when you want side",
    "start": "845800",
    "end": "848160"
  },
  {
    "text": "effects we've already talked about the",
    "start": "848160",
    "end": "850600"
  },
  {
    "text": "obvious times when you're doing IO of",
    "start": "850600",
    "end": "852560"
  },
  {
    "text": "some kind if you want to write it to a",
    "start": "852560",
    "end": "854600"
  },
  {
    "text": "file the state that the file is in",
    "start": "854600",
    "end": "857600"
  },
  {
    "text": "matters sure you can clone an immutable",
    "start": "857600",
    "end": "860519"
  },
  {
    "text": "snapshot of a picture of that file but",
    "start": "860519",
    "end": "863480"
  },
  {
    "text": "immediately you do that it is at least",
    "start": "863480",
    "end": "866440"
  },
  {
    "text": "potentially out of date because the real",
    "start": "866440",
    "end": "869240"
  },
  {
    "text": "file on the dis is",
    "start": "869240",
    "end": "870639"
  },
  {
    "text": "shared maybe someone else changed the",
    "start": "870639",
    "end": "873480"
  },
  {
    "text": "file or the operating system deleted it",
    "start": "873480",
    "end": "875639"
  },
  {
    "text": "while you were in the process of dealing",
    "start": "875639",
    "end": "877959"
  },
  {
    "text": "with your copy now your immutable",
    "start": "877959",
    "end": "880560"
  },
  {
    "text": "snapshot copy of the file is wrong the",
    "start": "880560",
    "end": "883480"
  },
  {
    "text": "change in the file or in the database is",
    "start": "883480",
    "end": "885680"
  },
  {
    "text": "always a side effect for another reason",
    "start": "885680",
    "end": "887480"
  },
  {
    "text": "too it's a side effect of working with",
    "start": "887480",
    "end": "890040"
  },
  {
    "text": "computers that forget things when we",
    "start": "890040",
    "end": "891880"
  },
  {
    "text": "turn them off if I change the balance in",
    "start": "891880",
    "end": "895120"
  },
  {
    "text": "my account the fact that I need to store",
    "start": "895120",
    "end": "897839"
  },
  {
    "text": "that change somewhere isn't my goal the",
    "start": "897839",
    "end": "900720"
  },
  {
    "text": "change in the balance is my goal so the",
    "start": "900720",
    "end": "903079"
  },
  {
    "text": "storage is just a side effect functional",
    "start": "903079",
    "end": "906519"
  },
  {
    "text": "programming languages of course support",
    "start": "906519",
    "end": "909360"
  },
  {
    "text": "this kind of thing and some support",
    "start": "909360",
    "end": "911560"
  },
  {
    "text": "ideas like monads that allow us to break",
    "start": "911560",
    "end": "914440"
  },
  {
    "text": "the pure functions rule in of functional",
    "start": "914440",
    "end": "917360"
  },
  {
    "text": "programming by adding side effects but",
    "start": "917360",
    "end": "919920"
  },
  {
    "text": "I'd argue that this is only a special",
    "start": "919920",
    "end": "922120"
  },
  {
    "text": "case of a more general idea one of my",
    "start": "922120",
    "end": "925320"
  },
  {
    "text": "favorite architectural approaches is to",
    "start": "925320",
    "end": "927360"
  },
  {
    "text": "build message-based reactive systems",
    "start": "927360",
    "end": "929880"
  },
  {
    "text": "these things are like state for actors",
    "start": "929880",
    "end": "932680"
  },
  {
    "text": "communicating only via asynchronous",
    "start": "932680",
    "end": "935199"
  },
  {
    "text": "messages one reason that I like these",
    "start": "935199",
    "end": "937639"
  },
  {
    "text": "systems quite so much is that they allow",
    "start": "937639",
    "end": "940279"
  },
  {
    "text": "me to separate The Accidental complexity",
    "start": "940279",
    "end": "942800"
  },
  {
    "text": "and the essential complexity in my",
    "start": "942800",
    "end": "944759"
  },
  {
    "text": "system let's imagine I have a bank",
    "start": "944759",
    "end": "947720"
  },
  {
    "text": "account of some kind and I want to",
    "start": "947720",
    "end": "949480"
  },
  {
    "text": "credit it if in my favorite actor-based",
    "start": "949480",
    "end": "952600"
  },
  {
    "text": "approach I may send a credit message",
    "start": "952600",
    "end": "955319"
  },
  {
    "text": "with the value that I want to add my",
    "start": "955319",
    "end": "958000"
  },
  {
    "text": "infrastructure will manage the io it",
    "start": "958000",
    "end": "960199"
  },
  {
    "text": "will save the message on its way to my",
    "start": "960199",
    "end": "962160"
  },
  {
    "text": "service and only if the message is",
    "start": "962160",
    "end": "964160"
  },
  {
    "text": "safely stored or clustered or whatever",
    "start": "964160",
    "end": "966440"
  },
  {
    "text": "else will it forward it then to my",
    "start": "966440",
    "end": "969319"
  },
  {
    "text": "service at this point my service will",
    "start": "969319",
    "end": "972279"
  },
  {
    "text": "update the value of the account that it",
    "start": "972279",
    "end": "975120"
  },
  {
    "text": "holds to its to to create a new total",
    "start": "975120",
    "end": "978680"
  },
  {
    "text": "balance is this mutable state or not is",
    "start": "978680",
    "end": "982440"
  },
  {
    "text": "this o or not I'd say that this is a",
    "start": "982440",
    "end": "985959"
  },
  {
    "text": "very oo way of thinking and working my",
    "start": "985959",
    "end": "988920"
  },
  {
    "text": "my actors embody which state for domain",
    "start": "988920",
    "end": "991199"
  },
  {
    "text": "models of the problem I'm solving but",
    "start": "991199",
    "end": "995040"
  },
  {
    "text": "here my side effects the storage are",
    "start": "995040",
    "end": "997639"
  },
  {
    "text": "isolated more isolated perhaps than in",
    "start": "997639",
    "end": "1000319"
  },
  {
    "text": "some functional systems and the change",
    "start": "1000319",
    "end": "1002959"
  },
  {
    "text": "in state an important one that must be",
    "start": "1002959",
    "end": "1005639"
  },
  {
    "text": "represented somewhere is clearly",
    "start": "1005639",
    "end": "1008160"
  },
  {
    "text": "expressed and easy to understand and",
    "start": "1008160",
    "end": "1011319"
  },
  {
    "text": "can't happen without the side effects",
    "start": "1011319",
    "end": "1013279"
  },
  {
    "text": "that matter having taken place after all",
    "start": "1013279",
    "end": "1017040"
  },
  {
    "text": "I don't want my1 EUR to appear and I",
    "start": "1017040",
    "end": "1019759"
  },
  {
    "text": "want to know that my total is even after",
    "start": "1019759",
    "end": "1022079"
  },
  {
    "text": "a crash or a",
    "start": "1022079",
    "end": "1023720"
  },
  {
    "text": "restart if I want to know what the",
    "start": "1023720",
    "end": "1025959"
  },
  {
    "text": "balance is for my account I can query",
    "start": "1025959",
    "end": "1027880"
  },
  {
    "text": "this state for copy but I can also",
    "start": "1027880",
    "end": "1030400"
  },
  {
    "text": "discard this copy and recreate it into",
    "start": "1030400",
    "end": "1032520"
  },
  {
    "text": "exactly the same state as before by",
    "start": "1032520",
    "end": "1034600"
  },
  {
    "text": "repaying the message messages that I",
    "start": "1034600",
    "end": "1038000"
  },
  {
    "text": "stored but I can also discard this copy",
    "start": "1038000",
    "end": "1040918"
  },
  {
    "text": "and recreate it in exactly the same",
    "start": "1040919",
    "end": "1042678"
  },
  {
    "text": "state as before by replaying the message",
    "start": "1042679",
    "end": "1044760"
  },
  {
    "text": "that I stored earlier so once again is",
    "start": "1044760",
    "end": "1048240"
  },
  {
    "text": "this state here mutable or not actually",
    "start": "1048240",
    "end": "1052039"
  },
  {
    "text": "I think it's kind of both my point here",
    "start": "1052039",
    "end": "1054679"
  },
  {
    "text": "is not to sing the Praises of reactive",
    "start": "1054679",
    "end": "1057080"
  },
  {
    "text": "systems well maybe just a bit but to",
    "start": "1057080",
    "end": "1060039"
  },
  {
    "text": "point out that the line between object",
    "start": "1060039",
    "end": "1062960"
  },
  {
    "text": "orientation and functional programming",
    "start": "1062960",
    "end": "1065320"
  },
  {
    "text": "and maybe even actors is all a bit more",
    "start": "1065320",
    "end": "1067799"
  },
  {
    "text": "blurry than the culture wars would",
    "start": "1067799",
    "end": "1070720"
  },
  {
    "text": "sometimes suggest yes it is sensible to",
    "start": "1070720",
    "end": "1074320"
  },
  {
    "text": "minimize side effects in your code",
    "start": "1074320",
    "end": "1076200"
  },
  {
    "text": "whatever the nature of your code but is",
    "start": "1076200",
    "end": "1078440"
  },
  {
    "text": "there really really a big difference",
    "start": "1078440",
    "end": "1080640"
  },
  {
    "text": "between having a function that takes two",
    "start": "1080640",
    "end": "1083360"
  },
  {
    "text": "arguments one of them supplied by",
    "start": "1083360",
    "end": "1085480"
  },
  {
    "text": "another function that defines its value",
    "start": "1085480",
    "end": "1087799"
  },
  {
    "text": "and an object with a private member",
    "start": "1087799",
    "end": "1090200"
  },
  {
    "text": "variable that is used instead of the",
    "start": "1090200",
    "end": "1093320"
  },
  {
    "text": "function supplied variable sure the oo",
    "start": "1093320",
    "end": "1097080"
  },
  {
    "text": "code here is more verbose but that's a",
    "start": "1097080",
    "end": "1099799"
  },
  {
    "text": "different question really all that's",
    "start": "1099799",
    "end": "1102640"
  },
  {
    "text": "really going on here is how we decide to",
    "start": "1102640",
    "end": "1105559"
  },
  {
    "text": "represent the sequencing of the function",
    "start": "1105559",
    "end": "1107480"
  },
  {
    "text": "calls",
    "start": "1107480",
    "end": "1109000"
  },
  {
    "text": "we could debate which one's easier to",
    "start": "1109000",
    "end": "1111240"
  },
  {
    "text": "read and there are arguments on both",
    "start": "1111240",
    "end": "1113159"
  },
  {
    "text": "sides but I do believe that if we're",
    "start": "1113159",
    "end": "1115919"
  },
  {
    "text": "optimizing only to minimize typing we're",
    "start": "1115919",
    "end": "1119240"
  },
  {
    "text": "already looking in the wrong place there",
    "start": "1119240",
    "end": "1121799"
  },
  {
    "text": "isn't an awful lot of typing in",
    "start": "1121799",
    "end": "1123159"
  },
  {
    "text": "assembler programs after",
    "start": "1123159",
    "end": "1125000"
  },
  {
    "text": "all optimizing for thinking is much more",
    "start": "1125000",
    "end": "1128520"
  },
  {
    "text": "important my point here is not to",
    "start": "1128520",
    "end": "1131000"
  },
  {
    "text": "rubbish functional programming my point",
    "start": "1131000",
    "end": "1134039"
  },
  {
    "text": "is that I think that the debate should",
    "start": "1134039",
    "end": "1136440"
  },
  {
    "text": "be a lot more nuanced than oh bad",
    "start": "1136440",
    "end": "1139400"
  },
  {
    "text": "functional programming good or vice",
    "start": "1139400",
    "end": "1141480"
  },
  {
    "text": "versa there are certainly times when",
    "start": "1141480",
    "end": "1143960"
  },
  {
    "text": "functional programming is more tur and",
    "start": "1143960",
    "end": "1146000"
  },
  {
    "text": "tur can be good but it can also be bad",
    "start": "1146000",
    "end": "1149640"
  },
  {
    "text": "ultimately depending on how easy the",
    "start": "1149640",
    "end": "1151480"
  },
  {
    "text": "code is to read and understand the last",
    "start": "1151480",
    "end": "1154120"
  },
  {
    "text": "of the ideas that functional programmers",
    "start": "1154120",
    "end": "1156039"
  },
  {
    "text": "often site as the real value of",
    "start": "1156039",
    "end": "1158679"
  },
  {
    "text": "functional programming is the advantage",
    "start": "1158679",
    "end": "1160960"
  },
  {
    "text": "of declarative over imperative",
    "start": "1160960",
    "end": "1163000"
  },
  {
    "text": "programming I've spoken about this",
    "start": "1163000",
    "end": "1165480"
  },
  {
    "text": "before there are certainly significant",
    "start": "1165480",
    "end": "1167840"
  },
  {
    "text": "advantages to EXP expressing some ideas",
    "start": "1167840",
    "end": "1170360"
  },
  {
    "text": "declaratively my approach to test driven",
    "start": "1170360",
    "end": "1172840"
  },
  {
    "text": "development is all is to always aim to",
    "start": "1172840",
    "end": "1175360"
  },
  {
    "text": "declare in my test what I want the",
    "start": "1175360",
    "end": "1177799"
  },
  {
    "text": "system to do without attempting to test",
    "start": "1177799",
    "end": "1180679"
  },
  {
    "text": "how it does it or say how it does it",
    "start": "1180679",
    "end": "1183799"
  },
  {
    "text": "this means that my tests are a lot more",
    "start": "1183799",
    "end": "1185600"
  },
  {
    "text": "durable to change than tests that",
    "start": "1185600",
    "end": "1187559"
  },
  {
    "text": "attempt to assert the implementation",
    "start": "1187559",
    "end": "1189159"
  },
  {
    "text": "detail in the code this is the same idea",
    "start": "1189159",
    "end": "1192159"
  },
  {
    "text": "as declarative",
    "start": "1192159",
    "end": "1193880"
  },
  {
    "text": "programming if we can clearly Express",
    "start": "1193880",
    "end": "1196280"
  },
  {
    "text": "the outcome that we'd like to achieve we",
    "start": "1196280",
    "end": "1198720"
  },
  {
    "text": "without worrying about how the outcome",
    "start": "1198720",
    "end": "1200679"
  },
  {
    "text": "is achieved then great I see lots of",
    "start": "1200679",
    "end": "1203919"
  },
  {
    "text": "example of this in examples of",
    "start": "1203919",
    "end": "1205960"
  },
  {
    "text": "functional code but to be honest it's",
    "start": "1205960",
    "end": "1208760"
  },
  {
    "text": "less obvious in people's real code as",
    "start": "1208760",
    "end": "1211440"
  },
  {
    "text": "far as I can see to be fair my exposure",
    "start": "1211440",
    "end": "1214600"
  },
  {
    "text": "to reading other people's functional",
    "start": "1214600",
    "end": "1216440"
  },
  {
    "text": "code is somewhat limited I don't read",
    "start": "1216440",
    "end": "1218320"
  },
  {
    "text": "lots of it so this may be down to the",
    "start": "1218320",
    "end": "1220640"
  },
  {
    "text": "limits of my experience but if this is",
    "start": "1220640",
    "end": "1224039"
  },
  {
    "text": "the case if the levels of abstraction",
    "start": "1224039",
    "end": "1226080"
  },
  {
    "text": "that functional languages give to us are",
    "start": "1226080",
    "end": "1228720"
  },
  {
    "text": "are genuinely as advantageous as",
    "start": "1228720",
    "end": "1231000"
  },
  {
    "text": "functional programmers tell us that they",
    "start": "1231000",
    "end": "1232640"
  },
  {
    "text": "are then shouldn't functional Pro",
    "start": "1232640",
    "end": "1235280"
  },
  {
    "text": "projects prove to be a lot faster to",
    "start": "1235280",
    "end": "1237520"
  },
  {
    "text": "develop and produce fewer bugs than",
    "start": "1237520",
    "end": "1240280"
  },
  {
    "text": "nonfunctional this is the claim that",
    "start": "1240280",
    "end": "1242760"
  },
  {
    "text": "functional programmers sometimes make",
    "start": "1242760",
    "end": "1245520"
  },
  {
    "text": "but I have looked and I don't find much",
    "start": "1245520",
    "end": "1247799"
  },
  {
    "text": "evidence to support this claim",
    "start": "1247799",
    "end": "1250039"
  },
  {
    "text": "functional programming does appear to",
    "start": "1250039",
    "end": "1252200"
  },
  {
    "text": "produce fewer bugs but the research that",
    "start": "1252200",
    "end": "1255200"
  },
  {
    "text": "I've read says that this is at or close",
    "start": "1255200",
    "end": "1259159"
  },
  {
    "text": "to the level of statistical noise",
    "start": "1259159",
    "end": "1261640"
  },
  {
    "text": "resulting in about a 1% fewer bug fix",
    "start": "1261640",
    "end": "1264760"
  },
  {
    "text": "commits than imperative languages when",
    "start": "1264760",
    "end": "1268039"
  },
  {
    "text": "measured by comparing the ratio of",
    "start": "1268039",
    "end": "1270360"
  },
  {
    "text": "commits that that are for new things",
    "start": "1270360",
    "end": "1273200"
  },
  {
    "text": "versus commits that are intended to fix",
    "start": "1273200",
    "end": "1275159"
  },
  {
    "text": "bugs to put this into context the data",
    "start": "1275159",
    "end": "1278600"
  },
  {
    "text": "for unit testing says that you get",
    "start": "1278600",
    "end": "1280960"
  },
  {
    "text": "somewhere around 58% reduction in",
    "start": "1280960",
    "end": "1283400"
  },
  {
    "text": "production defects overall though",
    "start": "1283400",
    "end": "1285760"
  },
  {
    "text": "measured in a completely different way",
    "start": "1285760",
    "end": "1287720"
  },
  {
    "text": "so it may not be fair of me to make this",
    "start": "1287720",
    "end": "1289679"
  },
  {
    "text": "comparison but the difference if any in",
    "start": "1289679",
    "end": "1292600"
  },
  {
    "text": "the quality of the code produced by",
    "start": "1292600",
    "end": "1294080"
  },
  {
    "text": "functional programming versus",
    "start": "1294080",
    "end": "1295440"
  },
  {
    "text": "object-oriented programming languages",
    "start": "1295440",
    "end": "1297159"
  },
  {
    "text": "seems to be",
    "start": "1297159",
    "end": "1298679"
  },
  {
    "text": "tiny I think that both functional",
    "start": "1298679",
    "end": "1300919"
  },
  {
    "text": "programming and object orientation are",
    "start": "1300919",
    "end": "1303679"
  },
  {
    "text": "valuable tools but I also think that",
    "start": "1303679",
    "end": "1306360"
  },
  {
    "text": "there are some extravagant claims made",
    "start": "1306360",
    "end": "1308320"
  },
  {
    "text": "for functional programming in particular",
    "start": "1308320",
    "end": "1310720"
  },
  {
    "text": "that to me at least don't seem to stand",
    "start": "1310720",
    "end": "1312960"
  },
  {
    "text": "up to",
    "start": "1312960",
    "end": "1313960"
  },
  {
    "text": "scrutiny my conclusion is that it pays",
    "start": "1313960",
    "end": "1317039"
  },
  {
    "text": "to understand both function programming",
    "start": "1317039",
    "end": "1319480"
  },
  {
    "text": "and objectoriented programming the idea",
    "start": "1319480",
    "end": "1322159"
  },
  {
    "text": "that functional programming is a Step",
    "start": "1322159",
    "end": "1323760"
  },
  {
    "text": "Beyond object orientation in the",
    "start": "1323760",
    "end": "1326080"
  },
  {
    "text": "evolution of programming languages seems",
    "start": "1326080",
    "end": "1328960"
  },
  {
    "text": "just a complete",
    "start": "1328960",
    "end": "1330480"
  },
  {
    "text": "misinterpretation of the history and of",
    "start": "1330480",
    "end": "1333360"
  },
  {
    "text": "what's going on in reality o and FP are",
    "start": "1333360",
    "end": "1336559"
  },
  {
    "text": "both valuable tools for building complex",
    "start": "1336559",
    "end": "1338520"
  },
  {
    "text": "systems use them in the right context",
    "start": "1338520",
    "end": "1341440"
  },
  {
    "text": "and each will help you to build better",
    "start": "1341440",
    "end": "1344159"
  },
  {
    "text": "systems but neither is the deciding",
    "start": "1344159",
    "end": "1347360"
  },
  {
    "text": "factor than thank you very much for",
    "start": "1347360",
    "end": "1349240"
  },
  {
    "text": "watching",
    "start": "1349240",
    "end": "1352240"
  },
  {
    "text": "[Music]",
    "start": "1352570",
    "end": "1355710"
  }
]