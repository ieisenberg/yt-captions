[
  {
    "start": "0",
    "end": "30000"
  },
  {
    "text": "hello and welcome to the goto book club i'm Peter i'm a freelance lowlevel front",
    "start": "4080",
    "end": "9519"
  },
  {
    "text": "end web tech person and with me I have my friend and podcasting buddy Stefan Bombgardner good morning Peter hi hi uh",
    "start": "9519",
    "end": "17279"
  },
  {
    "text": "welcome to the show um so I guess you did it again right you wrote another",
    "start": "17279",
    "end": "23760"
  },
  {
    "text": "book on Typescript yeah yeah so um that's that's right um after I wrote",
    "start": "23760",
    "end": "29840"
  },
  {
    "text": "TypeScript in 50 lessons um in 2020 I I wrote another one the",
    "start": "29840",
    "end": "34960"
  },
  {
    "start": "30000",
    "end": "822000"
  },
  {
    "text": "TypeScript oh cool you have it fantastic i have here I have here the follow-up",
    "start": "34960",
    "end": "40559"
  },
  {
    "text": "the TypeScript the TypeScript cookbook um exactly which is um sort of a a",
    "start": "40559",
    "end": "47440"
  },
  {
    "text": "sequel companion to the first book uh and yeah I wouldn't have thought that I",
    "start": "47440",
    "end": "53199"
  },
  {
    "text": "would write another one but here we are yeah this was uh um of course going to be my first question why another one i",
    "start": "53199",
    "end": "60480"
  },
  {
    "text": "mean you said that it is kind of like a sequel as in builts on top of the first",
    "start": "60480",
    "end": "65640"
  },
  {
    "text": "one yeah in in a sense so you can you can consume both books totally",
    "start": "65640",
    "end": "72080"
  },
  {
    "text": "independently from each other um but I guess it was a sequel in terms of",
    "start": "72080",
    "end": "78320"
  },
  {
    "text": "what where I was and what I needed to write to continue with with Typescript um the first book TypeScript in 50",
    "start": "78320",
    "end": "84560"
  },
  {
    "text": "lessons I always intended to have it as a um timeless if you will introduction",
    "start": "84560",
    "end": "90960"
  },
  {
    "text": "to the TypeScript type system so with TypeScript in 50 lessons if you read it you understand the basics of the type",
    "start": "90960",
    "end": "97280"
  },
  {
    "text": "system you can go out write TypeScript in real world projects and know how to",
    "start": "97280",
    "end": "102880"
  },
  {
    "text": "navigate your way around um and it turns out that um once you do it lots of questions come",
    "start": "102880",
    "end": "111200"
  },
  {
    "text": "up because while the type system follows certain rules um there are situations",
    "start": "111200",
    "end": "119840"
  },
  {
    "text": "where it's a little bit off to to say the least where where the",
    "start": "120040",
    "end": "126719"
  },
  {
    "text": "TypeScript team is cutting some corners to make things that exist in the real world work",
    "start": "126719",
    "end": "133040"
  },
  {
    "text": "um and this is what I'm dealing with with the TypeScript cookbook so the TypeScript cookbook is full of real",
    "start": "133040",
    "end": "139200"
  },
  {
    "text": "world scenario stuff that you are going to experience once you're writing TypeScript code um with lots of little",
    "start": "139200",
    "end": "148319"
  },
  {
    "text": "solutions that help you solving those issues or solving those problems so",
    "start": "148319",
    "end": "154400"
  },
  {
    "text": "while the first one is SK case scenario the second one is",
    "start": "154400",
    "end": "161440"
  },
  {
    "text": "real world scenario um and yeah and it turns out",
    "start": "161440",
    "end": "167360"
  },
  {
    "text": "that while I had 50 lessons in the first book I had about 100 lessons in the second book so the style is is very",
    "start": "167360",
    "end": "173319"
  },
  {
    "text": "similar um which yeah so apparently real world TypeScript programming is a",
    "start": "173319",
    "end": "179040"
  },
  {
    "text": "totally different beast yeah and uh the opposite of a best case scenario is a real world scenario",
    "start": "179040",
    "end": "186000"
  },
  {
    "text": "that's also telling that's saying something isn't it yeah so the funny thing is it I really",
    "start": "186000",
    "end": "192800"
  },
  {
    "text": "wasn't going to write another TypeScript book so it um um I What's wrong with writing a book no it's it's great i love",
    "start": "192800",
    "end": "200080"
  },
  {
    "text": "writing a book but I thought the typescript chapter is over but then um O'Reilly approached me they they liked",
    "start": "200080",
    "end": "206400"
  },
  {
    "text": "the first book and they said \"Well we we want to produce a cookbook.\" So the title was was already already set and",
    "start": "206400",
    "end": "213599"
  },
  {
    "text": "they asked me if if I would be interested in if I had content for this book and I was very hesitant at first so",
    "start": "213599",
    "end": "220319"
  },
  {
    "text": "I I really thought well I've already written the TypeScript book do I have enough content in me to to make up for",
    "start": "220319",
    "end": "227599"
  },
  {
    "text": "for a second one and usually when you are in the negotiating phase of a of a",
    "start": "227599",
    "end": "232640"
  },
  {
    "text": "book you um you write a proposal and in this proposal you are supposed to have",
    "start": "232640",
    "end": "238959"
  },
  {
    "text": "um a table of contents of some sort not not necessarily a real one or a full one",
    "start": "238959",
    "end": "244319"
  },
  {
    "text": "but at least some to understand the direction the book is taking um I only spent three",
    "start": "244319",
    "end": "252080"
  },
  {
    "text": "hours with that proposal and I had about 100 items done within those three hours",
    "start": "252080",
    "end": "257680"
  },
  {
    "text": "and this was the moment where I said okay there is enough content in me to",
    "start": "257680",
    "end": "263120"
  },
  {
    "text": "produce a proper TypeScript book um that's valuable that I think it's val is",
    "start": "263120",
    "end": "268400"
  },
  {
    "text": "valuable uh and that can follow up the first book in a sense so yeah it's I",
    "start": "268400",
    "end": "276880"
  },
  {
    "text": "would say it's about 95% of new content there are a couple of things that overlap obviously because some of the",
    "start": "276880",
    "end": "283440"
  },
  {
    "text": "basics you need to reiterate especially if you um if you write the book with a",
    "start": "283440",
    "end": "289120"
  },
  {
    "text": "new publisher that should be independent from the first one so uh but but 95% of those 100 lessons are completely new and",
    "start": "289120",
    "end": "297440"
  },
  {
    "text": "not in any way in the first book mhm i think the only real similarity is the",
    "start": "297440",
    "end": "304320"
  },
  {
    "text": "general table of contents like all the stuff that you need to check off like",
    "start": "304320",
    "end": "309600"
  },
  {
    "text": "generics and conditional types yeah yeah the broadstrokes um are are very similar",
    "start": "309600",
    "end": "317080"
  },
  {
    "text": "so what's the type system um what are generics what are conditional types what",
    "start": "317080",
    "end": "322800"
  },
  {
    "text": "are string template literal types what are variatic tpple types um but I guess",
    "start": "322800",
    "end": "328240"
  },
  {
    "text": "if I'm not mistaken I had just seven chapters in the first book",
    "start": "328240",
    "end": "333520"
  },
  {
    "text": "and I have about 11 or 12 in the second one i need to check um so I I go a little bit beyond that",
    "start": "333520",
    "end": "342520"
  },
  {
    "text": "i I have a chapter in there about um Typescript and React because it's very",
    "start": "342520",
    "end": "348240"
  },
  {
    "text": "popular and there are lots of nuances if you want to combine those",
    "start": "348240",
    "end": "353280"
  },
  {
    "text": "two um given given along the um the origin of of the TypeScript types or the",
    "start": "353280",
    "end": "361440"
  },
  {
    "text": "React types for TypeScript um knowing that the original is not written in TypeScript and the community tries to",
    "start": "361440",
    "end": "368720"
  },
  {
    "text": "create types around the library that should work in a way uh there's there's lots of yeah lots of real world",
    "start": "368720",
    "end": "376319"
  },
  {
    "text": "scenarios again that you need to deal with um so I I spent a chapter on that",
    "start": "376319",
    "end": "381680"
  },
  {
    "text": "but I also dug for example into into classes um and and object-oriented features of Typescript which I left out",
    "start": "381680",
    "end": "388639"
  },
  {
    "text": "completely in in the first book so Mhm i noticed that you wrote an entire chapter about classes we are going to to get to",
    "start": "388639",
    "end": "395440"
  },
  {
    "text": "that and obviously also some things like type development strategies so if if you are",
    "start": "395440",
    "end": "401520"
  },
  {
    "text": "in a project where you need to create types from scratch or need to um somehow",
    "start": "401520",
    "end": "406639"
  },
  {
    "text": "model your domain um you have different techniques in Typescript that are in a",
    "start": "406639",
    "end": "412000"
  },
  {
    "text": "way different from what you know from other programming languages especially since Typescript is just this you know",
    "start": "412000",
    "end": "417360"
  },
  {
    "text": "thin layer around JavaScript there's this duality between you are writing JavaScript but you're modeling it with",
    "start": "417360",
    "end": "423800"
  },
  {
    "text": "TypeScript um which is which is interesting in my experience um it's I I",
    "start": "423800",
    "end": "429680"
  },
  {
    "text": "don't know any other programming language that that has such a duality in and it itself because it works on two",
    "start": "429680",
    "end": "436720"
  },
  {
    "text": "totally different levels and we talk a lot about those two different levels in this book so we are developing types",
    "start": "436720",
    "end": "443199"
  },
  {
    "text": "then we see how well do they match with the code we rewrite that actually is being executed and in in one chapter we",
    "start": "443199",
    "end": "449280"
  },
  {
    "text": "also circling back again so we learn a lot about conditional types and make",
    "start": "449280",
    "end": "454680"
  },
  {
    "text": "even more advanced conditional types like in the last item and they get more advanced and more advanced and more",
    "start": "454680",
    "end": "460240"
  },
  {
    "text": "advanced and then we reach a point where we say okay is it worth it to have great type safety for a conditional",
    "start": "460240",
    "end": "468160"
  },
  {
    "text": "type that is hard to maintain hard to read and where you need to work your way around with JavaScript or should we just",
    "start": "468160",
    "end": "474160"
  },
  {
    "text": "take one or two steps back and say this type is good enough for 99% of our",
    "start": "474160",
    "end": "481400"
  },
  {
    "text": "situations but you don't get yourself in your way when writing them the real",
    "start": "481400",
    "end": "487599"
  },
  {
    "text": "world JavaScript code and yeah this is where the book gets philosoph philosophically in a sense but that's",
    "start": "487599",
    "end": "494160"
  },
  {
    "text": "that's what you can expect from from when I'm writing stuff i mean you can expect this from any good cookbook if",
    "start": "494160",
    "end": "500400"
  },
  {
    "text": "you ask me okay um software not",
    "start": "500400",
    "end": "505919"
  },
  {
    "text": "true true specifically not software but um and another thing I noticed um in",
    "start": "505919",
    "end": "511199"
  },
  {
    "text": "comparison to the first book is that you spent an entire chapter on project setup",
    "start": "511199",
    "end": "516560"
  },
  {
    "text": "and talking about different stacks i mean React got its own chapter but there's also the um general approach",
    "start": "516560",
    "end": "522719"
  },
  {
    "text": "with uh introducing types to an existing project and this entire basically setup",
    "start": "522719",
    "end": "529200"
  },
  {
    "text": "pro procedure that you can go through that you can take to different extremes",
    "start": "529200",
    "end": "534399"
  },
  {
    "text": "um I mean if you write a book if you have something that actually gets printed on paper and you talk about",
    "start": "534399",
    "end": "541519"
  },
  {
    "text": "essentially dependencies in a JavaScript uh project I mean you run the risk that before the ink is dried that all the",
    "start": "541519",
    "end": "548800"
  },
  {
    "text": "dependencies have turned over and nothing that you ever not nothing that you write wrote matches anymore all the",
    "start": "548800",
    "end": "554320"
  },
  {
    "text": "screenshots are outdated how do you deal with this if you write a book for the modern age of app development this is a",
    "start": "554320",
    "end": "561279"
  },
  {
    "text": "this is an excellent question honestly because I struggle a lot with the chapter to",
    "start": "561279",
    "end": "567160"
  },
  {
    "text": "um to even convince myself that we need it but um so the reality unfortunately",
    "start": "567160",
    "end": "573440"
  },
  {
    "text": "is that that even if you know the TypeScript system TypeScript type system very very well you might struggle in",
    "start": "573440",
    "end": "581680"
  },
  {
    "text": "wiring everything up into a project setup that actually does what what you",
    "start": "581680",
    "end": "587120"
  },
  {
    "text": "intended to do um and um I I I was very fortunate that after the first book that",
    "start": "587120",
    "end": "593360"
  },
  {
    "text": "people invited me into the company so I consulted them on on on TypeScript in a sense and I figured out that everything",
    "start": "593360",
    "end": "599920"
  },
  {
    "text": "that you can learn about the type system is basically done really really",
    "start": "599920",
    "end": "606040"
  },
  {
    "text": "quick but getting there is the hard part and this is what the first chapter deals",
    "start": "606040",
    "end": "612080"
  },
  {
    "text": "with so yeah we are talking about dependencies we're talking about different JavaScript runtimes",
    "start": "612080",
    "end": "617800"
  },
  {
    "text": "um varying up in in node projects which is quite interesting because nodes just released TypeScript support um within",
    "start": "617800",
    "end": "625360"
  },
  {
    "text": "Node and um not not everything from Typescript but but a great deal from it um so my",
    "start": "625360",
    "end": "634320"
  },
  {
    "text": "main focus with that chapter was not only to fire up all the dependencies",
    "start": "634320",
    "end": "641399"
  },
  {
    "text": "that that could exist at the point of time where I've written it but",
    "start": "641399",
    "end": "649760"
  },
  {
    "text": "rather learn or teach the reader to learn about the TS config items uh TS",
    "start": "650040",
    "end": "660399"
  },
  {
    "text": "config compiler flags that make the entire thing work so yeah",
    "start": "660399",
    "end": "666640"
  },
  {
    "text": "I have I guess I have an item that tells you how to deal with ECMAScript imports um where you where",
    "start": "666640",
    "end": "673680"
  },
  {
    "text": "you load a dependency via URL but what you actually learn is path mapping how",
    "start": "673680",
    "end": "679760"
  },
  {
    "text": "can you have this string identifier and map it to some types somewhere um and",
    "start": "679760",
    "end": "684880"
  },
  {
    "text": "those config flexs they they exist for a long long time they existed even before Eggmascript modules were supported in",
    "start": "684880",
    "end": "690959"
  },
  {
    "text": "Typescript um and can now be used in this context so the goal of the book in this",
    "start": "690959",
    "end": "696560"
  },
  {
    "text": "particular chapter is learn as much as you can about TS config so you understand how those properties work",
    "start": "696560",
    "end": "702079"
  },
  {
    "text": "together how do type reboots work together how does the the the file include um mechanism work or exclude",
    "start": "702079",
    "end": "710399"
  },
  {
    "text": "mechanism work and how do you add um a particular set of types to a particular",
    "start": "710399",
    "end": "718399"
  },
  {
    "text": "scope of your project especially if you have a a front end backend um um project",
    "start": "718399",
    "end": "723920"
  },
  {
    "text": "where you write note on one side and react on the other side you don't want to have node types in your react code",
    "start": "723920",
    "end": "729200"
  },
  {
    "text": "and vice versa so how do you deal with that um and this is basically just configuration of the TS config json um",
    "start": "729200",
    "end": "736160"
  },
  {
    "text": "and this is what you get in this chapter so yeah um um it was a fine line that I had to walk there um but actually it's",
    "start": "736160",
    "end": "743120"
  },
  {
    "text": "one of my most favorite chapters because it it opens up the idea of this cookbook really really well you you need a recipe",
    "start": "743120",
    "end": "749839"
  },
  {
    "text": "to solve this one issue or to to cook this one dish if you will",
    "start": "749839",
    "end": "755800"
  },
  {
    "text": "and and after you use it you not learn just how exactly to solve this one",
    "start": "755800",
    "end": "761519"
  },
  {
    "text": "particular problem but also get more skill that work for from a multitude of",
    "start": "761519",
    "end": "769360"
  },
  {
    "text": "projects basically yeah i mean you can take your TS config JSON and just copy it to the next project once you have it",
    "start": "769360",
    "end": "775440"
  },
  {
    "text": "working for one exactly m or you understand which parts to exclude or extract from it for the next project i",
    "start": "775440",
    "end": "781200"
  },
  {
    "text": "guess this is even more important um it's it's so funny because there are some properties within",
    "start": "781200",
    "end": "789120"
  },
  {
    "text": "this config chasing that conflict with each other and",
    "start": "789120",
    "end": "794720"
  },
  {
    "text": "and this is the stuff that you realize the hard way when you think everything that you've done should work but it",
    "start": "794720",
    "end": "801440"
  },
  {
    "text": "doesn't but then you need to go into some base TS config JSON where you inherit all the properties that you that",
    "start": "801440",
    "end": "808240"
  },
  {
    "text": "you want to spread across your entire project and need to delete this one particular line to make it work and this",
    "start": "808240",
    "end": "815040"
  },
  {
    "text": "is where things get nasty but this is those are the things that that are being tackled on in this book",
    "start": "815040",
    "end": "821240"
  },
  {
    "text": "mhm now if you were to start a green field um project with TypeScript today",
    "start": "821240",
    "end": "827920"
  },
  {
    "start": "822000",
    "end": "1214000"
  },
  {
    "text": "no strings attached no dependencies no stack um chosen for you what would you",
    "start": "827920",
    "end": "832959"
  },
  {
    "text": "pick in terms of build system compiler and a few TS conflict flex that are",
    "start": "832959",
    "end": "838480"
  },
  {
    "text": "simply musthaves in your opinion okay no dependency at all so I'm not forcing you",
    "start": "838480",
    "end": "844000"
  },
  {
    "text": "can choose Angular you can write a node project React what have you okay oh this is this is a tough question",
    "start": "844000",
    "end": "851279"
  },
  {
    "text": "um so I I mean for for the stuff that I write I write very bare bones JavaScript",
    "start": "851279",
    "end": "858720"
  },
  {
    "text": "and TypeScript that work most work mostly on the back end and it's it's a",
    "start": "858720",
    "end": "863839"
  },
  {
    "text": "joy working on the back end because if you write deno or node um you don't need to do anything with deno if you want to",
    "start": "863839",
    "end": "870800"
  },
  {
    "text": "have a couple of overrides then all you need is a tsconfig json and that's it um you can even write um jsx in deno and",
    "start": "870800",
    "end": "879760"
  },
  {
    "text": "produce html output with it through a couple of libraries so that the fresh UI library is really really good at that um",
    "start": "879760",
    "end": "886800"
  },
  {
    "text": "and they love that node is going into a very very similar direction so um if still to this day I've been writing node",
    "start": "886800",
    "end": "893680"
  },
  {
    "text": "for I don't know how many years a decade now setting up an express server to to",
    "start": "893680",
    "end": "899519"
  },
  {
    "text": "handle a simple backend API is a joy and now you have types with it without",
    "start": "899519",
    "end": "905760"
  },
  {
    "text": "needing to have an extra transpile step so all you need to do is install the necessary type definitions from",
    "start": "905760",
    "end": "911600"
  },
  {
    "text": "definitely typed have a very small TS config JSON that just tells you please use those types and and that's it so",
    "start": "911600",
    "end": "919440"
  },
  {
    "text": "that's that's all you need for for um for the back end part of things um if",
    "start": "919440",
    "end": "927519"
  },
  {
    "text": "I would go with with front end code I think if I had to choose a build system",
    "start": "927519",
    "end": "933199"
  },
  {
    "text": "it would be W um which is really one of those those battery included build systems that is",
    "start": "933199",
    "end": "940320"
  },
  {
    "text": "very very flexible in terms of which runtime do you want to work with which framework do you want to work with it's",
    "start": "940320",
    "end": "945920"
  },
  {
    "text": "very ECMAScript forward which means that um yes there's a build system at the end but first and foremost we are a",
    "start": "945920",
    "end": "952160"
  },
  {
    "text": "development server that um that transpiles whatever whatever meta language that",
    "start": "952160",
    "end": "959440"
  },
  {
    "text": "you're writing if it's TypeScript or or few file or JSX file or whatever into",
    "start": "959440",
    "end": "964639"
  },
  {
    "text": "some actual JavaScript code but we leave the module system intact so there's no no module voodoo happening um underneath",
    "start": "964639",
    "end": "973560"
  },
  {
    "text": "and and they go into the right direction",
    "start": "973560",
    "end": "978959"
  },
  {
    "text": "with a lot of their ideas um and especially in that stuff that's coming up um which is very important to me you",
    "start": "978959",
    "end": "985399"
  },
  {
    "text": "can switch run the execution runtimes of your tests of your backend code of",
    "start": "985399",
    "end": "992880"
  },
  {
    "text": "whatever you like um and and have seamless APIs for that so I would go for",
    "start": "992880",
    "end": "998560"
  },
  {
    "text": "that and I would um also choose their TS config recommendations especially if you",
    "start": "998560",
    "end": "1005199"
  },
  {
    "text": "so with Deno you almost don't need it with note you have five lines config",
    "start": "1005199",
    "end": "1011680"
  },
  {
    "text": "that um that is up on the official documentation uh and the vfox also have",
    "start": "1011680",
    "end": "1016880"
  },
  {
    "text": "everything already set up for you and you can override it in the parts where you actually need to override it so this",
    "start": "1016880",
    "end": "1023559"
  },
  {
    "text": "is very bare bones not a lot of moving parts which is always good um and um",
    "start": "1023559",
    "end": "1031520"
  },
  {
    "text": "very open very extensible it's not that you need to download a gigabyte of mpm dependencies to get hello world running",
    "start": "1031520",
    "end": "1038480"
  },
  {
    "text": "it's small it's about 20 megs it it does what it should do there's there's not a lot to it",
    "start": "1038480",
    "end": "1043798"
  },
  {
    "text": "so that's what I like huh that's interesting the man who wrote an entire book about TypeScript wants to have the",
    "start": "1043799",
    "end": "1051200"
  },
  {
    "text": "most basic setup of all yeah sure sure a list is more in a lot of things",
    "start": "1051200",
    "end": "1056480"
  },
  {
    "text": "especially i mean this dove tails uh nicely into um the first point you make in your chapter about basic types which",
    "start": "1056480",
    "end": "1063120"
  },
  {
    "text": "is essentially don't write any types if you can avoid it at any point exactly",
    "start": "1063120",
    "end": "1068559"
  },
  {
    "text": "infer types when you can it's it's great type so Typescript",
    "start": "1068559",
    "end": "1074480"
  },
  {
    "text": "has has a very interesting point in in in JavaScript uh because it needs to",
    "start": "1074760",
    "end": "1081559"
  },
  {
    "text": "somehow model everything that can happen in JavaScript and JavaScript can do everything uh and and people do",
    "start": "1081559",
    "end": "1088080"
  },
  {
    "text": "everything with it um and the TypeScript team is constantly chasing after folks",
    "start": "1088080",
    "end": "1093840"
  },
  {
    "text": "who do some really really weird stuff with it and try to formalize it try to",
    "start": "1093840",
    "end": "1098880"
  },
  {
    "text": "create static typing for it and this is this is a challenge eb absolutely so I I",
    "start": "1098880",
    "end": "1105039"
  },
  {
    "text": "um applaud the Typescript team for being able to do um so much for the entire",
    "start": "1105039",
    "end": "1112000"
  },
  {
    "text": "JavaScript system which can be really really tough at",
    "start": "1112000",
    "end": "1117520"
  },
  {
    "text": "times the best JavaScript code that I've written is still worse than the code that I write with TypeScript as my as my",
    "start": "1117520",
    "end": "1124400"
  },
  {
    "text": "co-pilot if you will um and yeah and and with that Typescript",
    "start": "1124400",
    "end": "1130960"
  },
  {
    "text": "offers the the kitchen sink of of JavaScript expressiveness if you will",
    "start": "1130960",
    "end": "1137200"
  },
  {
    "text": "which also means it understands a lot about JavaScript um and you can you can take any JavaScript file write a TS",
    "start": "1137200",
    "end": "1144160"
  },
  {
    "text": "check at the beginning and a comment and TypeScript will try to pick up what's wrong in your code and this already I",
    "start": "1144160",
    "end": "1150880"
  },
  {
    "text": "tell you it it goes 70% of the way um you find 70% of the of the nasty bugs",
    "start": "1150880",
    "end": "1157840"
  },
  {
    "text": "that you wouldn't catch if you just look at that code um and the other 30% is you",
    "start": "1157840",
    "end": "1163600"
  },
  {
    "text": "actively working with TypeScript on a on a very low level you just need a couple of features to actually get it going um",
    "start": "1163600",
    "end": "1171720"
  },
  {
    "text": "and I would say if you if you are not in in a couple of",
    "start": "1171720",
    "end": "1177679"
  },
  {
    "text": "very interesting scenarios or in scenarios where you need to work with dependencies that are either not written",
    "start": "1177679",
    "end": "1183280"
  },
  {
    "text": "in Typescript or have very interesting APIs you come a",
    "start": "1183280",
    "end": "1189120"
  },
  {
    "text": "long way with couple of type annotations a good understanding of the basics of",
    "start": "1189120",
    "end": "1194320"
  },
  {
    "text": "the type system um and and the simple check and erase of types",
    "start": "1194320",
    "end": "1201919"
  },
  {
    "text": "mhm so it's kind of kind of as you as usual um types in 20% of the places get",
    "start": "1202440",
    "end": "1208640"
  },
  {
    "text": "80% of the work done yeah the par principle isn't it mhm right so um one question I have uh with",
    "start": "1208640",
    "end": "1216240"
  },
  {
    "start": "1214000",
    "end": "1544000"
  },
  {
    "text": "regards to this this is um when you go consulting and you come",
    "start": "1216240",
    "end": "1221600"
  },
  {
    "text": "into a company where they are starting to roll out TypeScript or they are thinking about TypeScript one thing that",
    "start": "1221600",
    "end": "1227760"
  },
  {
    "text": "I get the feeling that many people like is explicitness which is actually",
    "start": "1227760",
    "end": "1233679"
  },
  {
    "text": "writing the types at all the variables um basically doing the opposite of the first point that you're making so how",
    "start": "1233679",
    "end": "1240320"
  },
  {
    "text": "how do you reconcile this i mean people working with JavaScript which can be quite chaotic are looking for some sort",
    "start": "1240320",
    "end": "1246880"
  },
  {
    "text": "of um fundamentals that tie them to the ground that give structure to their",
    "start": "1246880",
    "end": "1252080"
  },
  {
    "text": "programs and you essentially say no JavaScript is fine as it is just add a",
    "start": "1252080",
    "end": "1257280"
  },
  {
    "text": "few types to add a few guard rails but kind of don't overdo it um how do how do",
    "start": "1257280",
    "end": "1265200"
  },
  {
    "text": "you sell this um this is a fantastic question and the answer to that is very",
    "start": "1265200",
    "end": "1270559"
  },
  {
    "text": "very simple because I think both approaches can be very dogmatic so if if someone says oh I'm going to annotate",
    "start": "1270559",
    "end": "1277039"
  },
  {
    "text": "everything because I'm I'm used to do that from let's say Java 20 years ago where you have an integer I that is a",
    "start": "1277039",
    "end": "1284559"
  },
  {
    "text": "new integer of whatever where you basically tell the type three times in one line",
    "start": "1284559",
    "end": "1290200"
  },
  {
    "text": "um people are used to that and people like to do that um on the other hand you have the JavaScript folks who just go",
    "start": "1290200",
    "end": "1296159"
  },
  {
    "text": "willy-nilly and yeah let's figure everything out in the end um and as with everything there's lots of nuance in",
    "start": "1296159",
    "end": "1302320"
  },
  {
    "text": "that and I tell people when they go consulting and I also tell it in the",
    "start": "1302320",
    "end": "1307360"
  },
  {
    "text": "book that if you do a type annotation you need to understand what this type annotation does it's effectively a type",
    "start": "1307360",
    "end": "1314559"
  },
  {
    "text": "check it's the the part in your code where you tell the compiler please make",
    "start": "1314559",
    "end": "1320960"
  },
  {
    "text": "sure that the types align that what you get on one side is compatible with what",
    "start": "1320960",
    "end": "1327360"
  },
  {
    "text": "you have on the other side um and then you start thinking so if you just if you just assign um a variable to a number or",
    "start": "1327360",
    "end": "1334559"
  },
  {
    "text": "to a string or whatever do I really need to type check that because I just care",
    "start": "1334559",
    "end": "1339840"
  },
  {
    "text": "about the value but once I put that into a function or in a method call or",
    "start": "1339840",
    "end": "1346360"
  },
  {
    "text": "wherever then I want to make sure that the value that I have on one side is",
    "start": "1346360",
    "end": "1351679"
  },
  {
    "text": "compatible with what I have on the other side and you can do that in multiple ways you can do that in function",
    "start": "1351679",
    "end": "1357280"
  },
  {
    "text": "signatures you can do that in return types from function signatures there has been a huge discussion on the internet a",
    "start": "1357280",
    "end": "1362640"
  },
  {
    "text": "couple of years ago where I guess everybody was bored and they were producing videos on whether you should",
    "start": "1362640",
    "end": "1368640"
  },
  {
    "text": "need to annotate your return types or not stupid very stupid discussion but",
    "start": "1368640",
    "end": "1375360"
  },
  {
    "text": "ultimately it boils down to do you want to check the return type or not there",
    "start": "1375360",
    "end": "1380559"
  },
  {
    "text": "might be situations where you don't want that maybe you just want to invate because you are still in the process of",
    "start": "1380559",
    "end": "1386880"
  },
  {
    "text": "figuring out what the return type should be then it's okay to not write it but let things evolve and also if you if you",
    "start": "1386880",
    "end": "1394480"
  },
  {
    "text": "declare a variable or a constant if you put a type in there note that this is a type check you",
    "start": "1394480",
    "end": "1400159"
  },
  {
    "text": "can put any complex JavaScript object after after that but it",
    "start": "1400159",
    "end": "1406039"
  },
  {
    "text": "will be handled as this one type that you annotate it with and this can work",
    "start": "1406039",
    "end": "1412000"
  },
  {
    "text": "in a lot of scenarios really really well in other scenarios you have those",
    "start": "1412000",
    "end": "1417799"
  },
  {
    "text": "huge kitchen sink config objects that you want to use in various",
    "start": "1417799",
    "end": "1423200"
  },
  {
    "text": "scenarios for various APIs maybe you don't want to annotate the type there because you might lose information um",
    "start": "1423200",
    "end": "1429679"
  },
  {
    "text": "and this is basically anything that the colon type type annotation does it does a type check and from that point on it",
    "start": "1429679",
    "end": "1437840"
  },
  {
    "text": "has this type and all the other information is gone the only information that is",
    "start": "1437840",
    "end": "1443919"
  },
  {
    "text": "important is that this type exists and you can go down the rabbit hole with performance optimizations because",
    "start": "1443919",
    "end": "1450159"
  },
  {
    "text": "basically if you do a type check early on then TypeScript just needs to compare labels throughout throughout the rest of",
    "start": "1450159",
    "end": "1456720"
  },
  {
    "text": "the um of the type checking process so if it's a colon config or colon person",
    "start": "1456720",
    "end": "1464480"
  },
  {
    "text": "the moment you assign the variable it will always be this person and every person check will be handled just",
    "start": "1464480",
    "end": "1470760"
  },
  {
    "text": "fine u if you don't do that this type check has to happen more often but it's",
    "start": "1470760",
    "end": "1478159"
  },
  {
    "text": "honestly an optimization in the microsconds part it's really about what you want to express with the type",
    "start": "1478159",
    "end": "1484880"
  },
  {
    "text": "annotation do you want it to be a person at that particular point in time or are you good with it being this god object",
    "start": "1484880",
    "end": "1492240"
  },
  {
    "text": "that's getting refined later on and this if if you understand what the compiler does at this point it takes out all the",
    "start": "1492240",
    "end": "1499279"
  },
  {
    "text": "domatic advice that you get or that you that you follow um it really makes you",
    "start": "1499279",
    "end": "1504720"
  },
  {
    "text": "think that well at this particular point in time I want to have that and suddenly",
    "start": "1504720",
    "end": "1511039"
  },
  {
    "text": "suddenly all Typescript code gets much much better yeah i mean you're moving checkpoints",
    "start": "1511039",
    "end": "1516559"
  },
  {
    "text": "around basically okay so uh that's something to note",
    "start": "1516559",
    "end": "1523440"
  },
  {
    "text": "first things uh don't write annotations if you don't need to and another thing that I picked up is uh don't use enums",
    "start": "1523440",
    "end": "1531360"
  },
  {
    "text": "if you don't uh have to i mean if if I if I talk to re real developers who do",
    "start": "1531360",
    "end": "1537679"
  },
  {
    "text": "backend code Java C what have you they always like their types their classes and their enums beautiful yeah now we've",
    "start": "1537679",
    "end": "1545360"
  },
  {
    "start": "1544000",
    "end": "2172000"
  },
  {
    "text": "talked about maybe don't write too many type annotations we've already teased that you maybe aren't the greatest fan",
    "start": "1545360",
    "end": "1550960"
  },
  {
    "text": "of classes we are going to get to that and now you're telling me that we can't even use enums",
    "start": "1550960",
    "end": "1556760"
  },
  {
    "text": "um again as with everything in this book I'm I'm not telling somebody to not use",
    "start": "1556760",
    "end": "1563039"
  },
  {
    "text": "enums i just tell people to be aware of what enums do especially string enums um",
    "start": "1563039",
    "end": "1569520"
  },
  {
    "text": "and to an extent number enums and this this really depends on which version that you're on so number enums were were",
    "start": "1569520",
    "end": "1576440"
  },
  {
    "text": "funny prior to I guess 56 5.5 5.6 ICS um the problem with enams",
    "start": "1576440",
    "end": "1585440"
  },
  {
    "text": "is that they work on a different level than the rest of the type system the type system is a structural type system",
    "start": "1585440",
    "end": "1590880"
  },
  {
    "text": "which is clear if you think about the roots of TypeScript which is JavaScript you you don't want to have a nominal",
    "start": "1590880",
    "end": "1597520"
  },
  {
    "text": "type system where you need to have the exact name the exact label for a type check when um all you do is",
    "start": "1597520",
    "end": "1605240"
  },
  {
    "text": "writing object literal that have basically no type um you want to have a",
    "start": "1605240",
    "end": "1610320"
  },
  {
    "text": "structural check because you can compare those objects with some um some",
    "start": "1610320",
    "end": "1616640"
  },
  {
    "text": "formalization of them um so this is why TypeScript mostly follows a structural type system except with enums string",
    "start": "1616640",
    "end": "1625840"
  },
  {
    "text": "enums and number enums work in a nominal space but also not",
    "start": "1625840",
    "end": "1631480"
  },
  {
    "text": "entirely and this is where things get nasty so with the number enum we have your direction enum enum direction up",
    "start": "1631480",
    "end": "1638640"
  },
  {
    "text": "down left right they get assigned a number each each item gets assigned a number starting with zero 1 2 3 um and",
    "start": "1638640",
    "end": "1646240"
  },
  {
    "text": "if you expect this particular enum at the function signature or whatever you",
    "start": "1646240",
    "end": "1652080"
  },
  {
    "text": "can write of course direction up direction down that's that's what people are wanting to use this is what they",
    "start": "1652080",
    "end": "1660880"
  },
  {
    "text": "they look for when you have an enom you have an named identifier for some arbitrary number but in some Typescript",
    "start": "1660880",
    "end": "1667679"
  },
  {
    "text": "versions TypeScript allows any number you could put 1,00 in there you",
    "start": "1667679",
    "end": "1673760"
  },
  {
    "text": "could be pi in there you could can put any number in there number enums",
    "start": "1673760",
    "end": "1679720"
  },
  {
    "text": "don't don't type check except on numbers because there might",
    "start": "1679720",
    "end": "1685000"
  },
  {
    "text": "be areas where you do a bit mask with those enums like you have um exor",
    "start": "1685000",
    "end": "1692640"
  },
  {
    "text": "combination of two two roles and this can be a number that is not defined within the enum and this is why",
    "start": "1692640",
    "end": "1699360"
  },
  {
    "text": "typescript says okay at least it should be an enum nothing else so you don't get",
    "start": "1699360",
    "end": "1705360"
  },
  {
    "text": "type checks with number enums not in the way you want it uh rest with",
    "start": "1705360",
    "end": "1710559"
  },
  {
    "text": "stringing enums on the other hand um you have an enum that um I don't know are",
    "start": "1710559",
    "end": "1718000"
  },
  {
    "text": "administrator roles um enam ro administrator equals string administrator moderator equals string",
    "start": "1718000",
    "end": "1725679"
  },
  {
    "text": "moderator so so the actual literal string um when you have something like",
    "start": "1725679",
    "end": "1730799"
  },
  {
    "text": "that you can't use any other string in there also not from other enums so you",
    "start": "1730799",
    "end": "1738000"
  },
  {
    "text": "might think that you want that but there are situations where this particular enum",
    "start": "1738000",
    "end": "1745279"
  },
  {
    "text": "could restrict you too much where you're not able to get to the actual value even though this is the one thing that ends",
    "start": "1745279",
    "end": "1751600"
  },
  {
    "text": "up being done uh um in the output code",
    "start": "1751600",
    "end": "1757559"
  },
  {
    "text": "also enums can bloat up your output code tremendously um I was consulting a",
    "start": "1757559",
    "end": "1764799"
  },
  {
    "text": "project where they had an autogenerated string enum um about 2,000 lines of",
    "start": "1764799",
    "end": "1771559"
  },
  {
    "text": "code that stuff can't be removed this bloats up in a huge closure with um a",
    "start": "1771559",
    "end": "1778880"
  },
  {
    "text": "very complex object inside um with all those 2,00",
    "start": "1778880",
    "end": "1784200"
  },
  {
    "text": "elements um and yeah all all they needed would have been a string union type where you",
    "start": "1784200",
    "end": "1790880"
  },
  {
    "text": "put just every value into a union you get the same type safety but you can use",
    "start": "1790880",
    "end": "1796159"
  },
  {
    "text": "you get the same type safety you get the same um you get the same uh intellisense",
    "start": "1796159",
    "end": "1801679"
  },
  {
    "text": "from your editor the same autocomplete features everything stays the same um but you just get something that can be",
    "start": "1801679",
    "end": "1808320"
  },
  {
    "text": "erased afterwards and something that is compatible with with the rest of your type system so no matter where you get",
    "start": "1808320",
    "end": "1814799"
  },
  {
    "text": "this particular string from it's compatible with your function signature",
    "start": "1814799",
    "end": "1819919"
  },
  {
    "text": "um which means that you don't need to box it into an enum or to type annotations for the enum you you can",
    "start": "1819919",
    "end": "1825919"
  },
  {
    "text": "just use the string and it will work with that one particular um one particular function signature and",
    "start": "1825919",
    "end": "1832559"
  },
  {
    "text": "there's even a way to if you really like the development style of the denom to recreate it with a plain JavaScript",
    "start": "1832559",
    "end": "1839600"
  },
  {
    "text": "object and a simple TypeScript type you get the same developer experience but it will be better for your bundlers it will",
    "start": "1839600",
    "end": "1846159"
  },
  {
    "text": "be better for your interfaces to other parts of your project uh you don't create code that you don't understand or",
    "start": "1846159",
    "end": "1852000"
  },
  {
    "text": "that you don't expect to be created and you can work with things at the",
    "start": "1852000",
    "end": "1857840"
  },
  {
    "text": "boundaries of your application where you take in values from the outside and use",
    "start": "1857840",
    "end": "1864240"
  },
  {
    "text": "it with the type system that you have on the inside mhm so this is the uh part in",
    "start": "1864240",
    "end": "1869600"
  },
  {
    "text": "the book where you um essentially have the recipe that turns an object into a",
    "start": "1869600",
    "end": "1875120"
  },
  {
    "text": "plain type yep right the other way around object like again the the ROS",
    "start": "1875120",
    "end": "1881840"
  },
  {
    "text": "object where you have properties on the left side and string values on the other side and you can with const lock it down",
    "start": "1881840",
    "end": "1888960"
  },
  {
    "text": "to that literal value and then you have a type where you just extract the values from it and since Typescript and",
    "start": "1888960",
    "end": "1895520"
  },
  {
    "text": "JavaScript work on two different um levels um you have the the type level and the value level so you can define",
    "start": "1895520",
    "end": "1902960"
  },
  {
    "text": "the same name uh in the type system and in JavaScript so if I have a const roles",
    "start": "1902960",
    "end": "1909600"
  },
  {
    "text": "in JavaScript I can have a type roles in TypeScript and they don't clash and with that you get the same type and the same",
    "start": "1909600",
    "end": "1917880"
  },
  {
    "text": "behavior um but it's clear which part stays in the type system which part stays in JavaScript code and for that",
    "start": "1917880",
    "end": "1925840"
  },
  {
    "text": "stuff that in JavaScript code you get much much better compatibility with everything else in your software hm and",
    "start": "1925840",
    "end": "1932399"
  },
  {
    "text": "in this specific case where you essentially I mean you're essentially taking a runtime object and getting a",
    "start": "1932399",
    "end": "1939120"
  },
  {
    "text": "type from the object instead of the other way around which is probably more what people are more used to yeah but",
    "start": "1939120",
    "end": "1945840"
  },
  {
    "text": "this is you know if you think about TypeScript being this one thin layer around JavaScript it totally makes sense you can pull stuff from JavaScript into",
    "start": "1945840",
    "end": "1953360"
  },
  {
    "text": "TypeScript but not the other way around yeah i mean is it a layer or is it another programming language onto itself",
    "start": "1953360",
    "end": "1959519"
  },
  {
    "text": "i mean we have uh stuff like deriving types from runtime object we have conditionals if you have generic types",
    "start": "1959519",
    "end": "1966240"
  },
  {
    "text": "they kind of look like functions with a freaky syntax i mean is this even just a layer",
    "start": "1966240",
    "end": "1972399"
  },
  {
    "text": "and a type system or is there something else so somebody figured out that the type system in TypeScript is touring",
    "start": "1972399",
    "end": "1978159"
  },
  {
    "text": "complete so where where does where does a meta",
    "start": "1978159",
    "end": "1984000"
  },
  {
    "text": "programming stop and real programming start this gets very philosophical so",
    "start": "1984000",
    "end": "1989720"
  },
  {
    "text": "um yeah you you can do you can do especially with conditional types and",
    "start": "1989720",
    "end": "1994919"
  },
  {
    "text": "generics you you always have have a functional programming like experience",
    "start": "1994919",
    "end": "2000880"
  },
  {
    "text": "um when you basically work on a huge set of possible values and you narrow it down",
    "start": "2000880",
    "end": "2006279"
  },
  {
    "text": "through certain conditions in your code and you generate new types from that um",
    "start": "2006279",
    "end": "2012320"
  },
  {
    "text": "and this is immensely powerful no questions asked and you can do a lot of things with that um so yeah that makes",
    "start": "2012320",
    "end": "2020799"
  },
  {
    "text": "Typescript or the type system in in itself its own programming language",
    "start": "2020799",
    "end": "2027720"
  },
  {
    "text": "but I think you don't always have to go that route it's totally fine to have",
    "start": "2027720",
    "end": "2033200"
  },
  {
    "text": "just types it's really really good because that's what it was made for i",
    "start": "2033200",
    "end": "2038240"
  },
  {
    "text": "mean there are folks it's it's amazing um who created the type that can read an",
    "start": "2038240",
    "end": "2043440"
  },
  {
    "text": "SQL statement and based on what you write in that SQL statement creates an object for you with the right properties",
    "start": "2043440",
    "end": "2050079"
  },
  {
    "text": "and the right types of that property which is incredible folks use string types to",
    "start": "2050079",
    "end": "2058398"
  },
  {
    "text": "create a dictionary so you basically add a word to to this type any string and it",
    "start": "2058399",
    "end": "2065679"
  },
  {
    "text": "will check in a list of of strings if there's an overlap with that or not and if there's an",
    "start": "2065679",
    "end": "2071398"
  },
  {
    "text": "overlap the type will be okay if there isn't an overlap you get red squiggly line so you can have actual spell",
    "start": "2071399",
    "end": "2078079"
  },
  {
    "text": "checking within the type system it's that's amazing it's great that you can do that",
    "start": "2078079",
    "end": "2086158"
  },
  {
    "text": "but do you really need it in your day-to-day JavaScript projects i mean I guess it kind of depends on the",
    "start": "2086159",
    "end": "2092878"
  },
  {
    "text": "project right if you're writing something that kind of takes SQL and maybe wants to be sort of",
    "start": "2092879",
    "end": "2100079"
  },
  {
    "text": "an OM i mean it's not inconceivable that you might want to use something like",
    "start": "2100079",
    "end": "2105280"
  },
  {
    "text": "this i guess I I I mean it really depends on on the depth of of how far you want",
    "start": "2105280",
    "end": "2113200"
  },
  {
    "text": "to go but there are a couple of things that are also in this book where we take for example um an express route which is",
    "start": "2113200",
    "end": "2121040"
  },
  {
    "text": "a string deconstruct the string and figure out if there are any placeholders for variable names in it um and if we",
    "start": "2121040",
    "end": "2128079"
  },
  {
    "text": "find those placeholders we are creating an object where you can access those placeholders in your callback function",
    "start": "2128079",
    "end": "2133520"
  },
  {
    "text": "this is five lines of TypeScript code nothing more but the type safety that",
    "start": "2133520",
    "end": "2140240"
  },
  {
    "text": "you get for this little investment is amazing because you're not picking any",
    "start": "2140240",
    "end": "2146160"
  },
  {
    "text": "typos anymore you're not just guessing uh the variable names and this is where",
    "start": "2146160",
    "end": "2152480"
  },
  {
    "text": "Typescript can be really really helpful so and where those advanced features are coming from actually but you know it's",
    "start": "2152480",
    "end": "2159359"
  },
  {
    "text": "it's with everything if you give people a certain tool um they are going to do",
    "start": "2159359",
    "end": "2164800"
  },
  {
    "text": "stuff with it stuff that you don't expect them doing with it so it's I enjoyed that i enjoyed it a lot",
    "start": "2164800",
    "end": "2172079"
  },
  {
    "start": "2172000",
    "end": "2564000"
  },
  {
    "text": "speaking of things that you enjoy um I mean we now have to talk about it chapter",
    "start": "2172079",
    "end": "2177480"
  },
  {
    "text": "11 it for some reason it's chapter 11 i I don't know if there's anything in in",
    "start": "2177480",
    "end": "2184480"
  },
  {
    "text": "this particular choice but you um basically cave in and talk about classes",
    "start": "2184480",
    "end": "2189760"
  },
  {
    "text": "for an entire chapter now from our podcasting sessions I know that classes in Typescript specifically specifically",
    "start": "2189760",
    "end": "2196400"
  },
  {
    "text": "in your day-to-day job in the back end are kind of not your favorite language feature",
    "start": "2196400",
    "end": "2204119"
  },
  {
    "text": "yeah it's tough um as with everything there's nuance to it isn't it so um I",
    "start": "2205320",
    "end": "2212160"
  },
  {
    "text": "have seen people when when consulting and and um in other projects who",
    "start": "2212160",
    "end": "2219160"
  },
  {
    "text": "um try to use classes as an excuse for",
    "start": "2219160",
    "end": "2224440"
  },
  {
    "text": "using every objectoriented design pattern they",
    "start": "2224440",
    "end": "2230079"
  },
  {
    "text": "can find on um and this you can do that type",
    "start": "2230079",
    "end": "2236079"
  },
  {
    "text": "TypeScript and JavaScript are expressive enough to to allow you to model your code like that",
    "start": "2236079",
    "end": "2243480"
  },
  {
    "text": "um but they are not always the right choice for it so for example I've I've",
    "start": "2243480",
    "end": "2250000"
  },
  {
    "text": "seen folks who who create um a class that works with the",
    "start": "2250000",
    "end": "2257040"
  },
  {
    "text": "environment variables of your of your project uh they can come from the",
    "start": "2257040",
    "end": "2262240"
  },
  {
    "text": "environment themselves or they can come from I don't know from some configuration file and they provide",
    "start": "2262240",
    "end": "2268960"
  },
  {
    "text": "accesses for it or modificators for that and it's basically a JavaScript module",
    "start": "2268960",
    "end": "2274960"
  },
  {
    "text": "with a class in it with static methods in that that take the config take an",
    "start": "2274960",
    "end": "2280960"
  },
  {
    "text": "operation and you can work with that um",
    "start": "2280960",
    "end": "2286000"
  },
  {
    "text": "and you can do that of course but But it's definitely the wrong choice of technology of what you want to achieve",
    "start": "2286599",
    "end": "2293440"
  },
  {
    "text": "you want to have encapsulation for a set of features that are connected to a particular domain",
    "start": "2293440",
    "end": "2300200"
  },
  {
    "text": "okay this is already the module if you have an ECMAScript module and you write functions in there that's all you need",
    "start": "2300200",
    "end": "2306160"
  },
  {
    "text": "you have the encapsulation you have everything of that particular domain in that particular file and the API doesn't",
    "start": "2306160",
    "end": "2312560"
  },
  {
    "text": "change if you add this class layerly on top of it and write just static methods or static",
    "start": "2312560",
    "end": "2318520"
  },
  {
    "text": "functions what you end up with is the similar output but a file that is not",
    "start": "2318520",
    "end": "2325040"
  },
  {
    "text": "compatible with three shakers so you you carry along the entire stuff that you've",
    "start": "2325040",
    "end": "2330480"
  },
  {
    "text": "written whether you use it or not um and this this is okay maybe for free",
    "start": "2330480",
    "end": "2335920"
  },
  {
    "text": "functions or free methods or whatever but I have seen people doing that over and over and over again 100 classes with",
    "start": "2335920",
    "end": "2342160"
  },
  {
    "text": "10 functions each uh and they just use a couple of them because it's an external library and they carry along the whole",
    "start": "2342160",
    "end": "2348560"
  },
  {
    "text": "library because no bundler can work with that if it's a class you take along the",
    "start": "2348560",
    "end": "2353760"
  },
  {
    "text": "whole class and this is what I discussed also in the book so this is why I'm not a huge fan of classes because there are",
    "start": "2353760",
    "end": "2361119"
  },
  {
    "text": "at times better ways to do things in JavaScript there's also a valid reason for classes and and I I don't want to",
    "start": "2361119",
    "end": "2367839"
  },
  {
    "text": "discuss it if you want to have lots of instances of the same thing where you need to operate on and you want to have",
    "start": "2367839",
    "end": "2374640"
  },
  {
    "text": "the operation connected to the data fine then use classes that's totally good but",
    "start": "2374640",
    "end": "2380640"
  },
  {
    "text": "for many many situations a module and a couple of functions is just the thing to",
    "start": "2380640",
    "end": "2387119"
  },
  {
    "text": "go and this is what I discuss here but next to that I also discuss",
    "start": "2387119",
    "end": "2392359"
  },
  {
    "text": "um which which flavor of classes to use because Classes have been a key feature",
    "start": "2392359",
    "end": "2399200"
  },
  {
    "text": "in Typescript since the beginning and there are lots of features from Typescript for classes in the language",
    "start": "2399200",
    "end": "2407119"
  },
  {
    "text": "that are not compatible or that are different to what eggmascript classes offer you and um visibility modifiers",
    "start": "2407119",
    "end": "2414960"
  },
  {
    "text": "for example you have uh two or three visibility modifiers in Typescript you have just one visibility modifier in",
    "start": "2414960",
    "end": "2421680"
  },
  {
    "text": "JavaScript and they work slightly different so what's the difference what's the nuance on that which one",
    "start": "2421680",
    "end": "2426720"
  },
  {
    "text": "should you use um and the point is down to well use whatever you like but understand that one is actually actually",
    "start": "2426720",
    "end": "2433440"
  },
  {
    "text": "also being rendered in JavaScript while the other one will disappear once you",
    "start": "2433440",
    "end": "2438520"
  },
  {
    "text": "transpile um and this is the stuff about classes so in classes I",
    "start": "2438520",
    "end": "2444119"
  },
  {
    "text": "discuss which flavor should you use should you use a class in that",
    "start": "2444119",
    "end": "2449160"
  },
  {
    "text": "particular scenario um how do you work with decorators especially compared to",
    "start": "2449160",
    "end": "2456480"
  },
  {
    "text": "the old decorators the typescript invented um opposed to the new ones that are in the acmascript standard uh and",
    "start": "2456480",
    "end": "2463200"
  },
  {
    "text": "this is also I thought a chapon that is necessary there",
    "start": "2463200",
    "end": "2469880"
  },
  {
    "text": "are so many programming styles and so many different variations of classes in",
    "start": "2469880",
    "end": "2476480"
  },
  {
    "text": "both JavaScript and TypeScript that you really need to",
    "start": "2476480",
    "end": "2481920"
  },
  {
    "text": "understand what is there what are the implications of it and which one should",
    "start": "2482119",
    "end": "2488560"
  },
  {
    "text": "you ultimately use for the problem that you have or should you use one to begin",
    "start": "2488560",
    "end": "2493839"
  },
  {
    "text": "with yeah I guess uh that's what the cookbook's for right",
    "start": "2493839",
    "end": "2501039"
  },
  {
    "text": "so the the very last recipe in your entire cookbook is entitled Knowing When to Stop um I think this is something",
    "start": "2501200",
    "end": "2510480"
  },
  {
    "text": "that we um can also apply to this discussion but I have one final question uh in my experience every time I I try",
    "start": "2510480",
    "end": "2517280"
  },
  {
    "text": "to explain anything to anyone I always learn something that I",
    "start": "2517280",
    "end": "2522800"
  },
  {
    "text": "didn't know before is there anything in Typescript that you learned that you didn't know when you",
    "start": "2522800",
    "end": "2528000"
  },
  {
    "text": "wrote this first proposal back in the day there is something it's not what I",
    "start": "2528000",
    "end": "2533200"
  },
  {
    "text": "would have expected um it's actually the the features of the TypeScript playground um they are phenomenal you",
    "start": "2533200",
    "end": "2540480"
  },
  {
    "text": "can have entire projects you can have entire courses within the TypeScript playground you can load dependencies",
    "start": "2540480",
    "end": "2546720"
  },
  {
    "text": "from npm you can define external types with it um there's a a",
    "start": "2546720",
    "end": "2553560"
  },
  {
    "text": "huge development environment hidden in what's basically a simple type checker and I have an entire entry on that",
    "start": "2553560",
    "end": "2560160"
  },
  {
    "text": "because it's amazing so this is this was my biggest surprise",
    "start": "2560160",
    "end": "2565359"
  },
  {
    "start": "2564000",
    "end": "2626000"
  },
  {
    "text": "okay great then um I think we should uh close out with you know knowing when to",
    "start": "2565359",
    "end": "2570640"
  },
  {
    "text": "stop i I I think we've given a great overview um on your book and I I look",
    "start": "2570640",
    "end": "2576880"
  },
  {
    "text": "forward to your third TypeScript book which oh boy which is certainly coming right I don't",
    "start": "2576880",
    "end": "2583599"
  },
  {
    "text": "want to spoil anything but",
    "start": "2583599",
    "end": "2587640"
  },
  {
    "text": "yeah thank you well let's stay tuned for for this very fun talking to you subscribe to the goto YouTube channel",
    "start": "2589440",
    "end": "2596240"
  },
  {
    "text": "now and join the experts in person or online at any upcoming Goto conference",
    "start": "2596240",
    "end": "2601680"
  },
  {
    "text": "using the promo code book club visit gotopia.te to learn more",
    "start": "2601680",
    "end": "2608759"
  }
]