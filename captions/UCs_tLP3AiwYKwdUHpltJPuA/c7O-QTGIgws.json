[
  {
    "start": "0",
    "end": "104000"
  },
  {
    "text": "so first of all who is the Java developer here okay that's at least good who is",
    "start": "12400",
    "end": "19439"
  },
  {
    "text": "familiar with AWS uh cloud provider okay about a half who has tried like just",
    "start": "19439",
    "end": "25199"
  },
  {
    "text": "writing Java Lambda functions okay several people",
    "start": "25199",
    "end": "30720"
  },
  {
    "text": "less and less so let's see there are reasons for that why there are so few",
    "start": "30720",
    "end": "36520"
  },
  {
    "text": "people doing this but this is one of my jobs just trying to change it as I was",
    "start": "36520",
    "end": "41640"
  },
  {
    "text": "introduced my name is Vadim and I have these two passions Java and serverless I'm one of the Coe organizers of java",
    "start": "41640",
    "end": "47320"
  },
  {
    "text": "User Group born where I live and I'm also AWS Community builder in serverless category talking about serverless in",
    "start": "47320",
    "end": "53719"
  },
  {
    "text": "general but specially about Java development you can get in touch with me",
    "start": "53719",
    "end": "58800"
  },
  {
    "text": "via yeah different channels and I block quite a lot exactly about this point",
    "start": "58800",
    "end": "64478"
  },
  {
    "text": "this topic just trying to find the ways yeah basically I'm working since 18",
    "start": "64479",
    "end": "72119"
  },
  {
    "text": "years for the same company called IBS where we are writing software for design purchasing the pH photo products I",
    "start": "72119",
    "end": "78600"
  },
  {
    "text": "started as a Java developer there I develop Java since the end of the last century basically we did the move to AWS",
    "start": "78600",
    "end": "85280"
  },
  {
    "text": "cloud and uh in the last years I'm basically deal with cloud",
    "start": "85280",
    "end": "90720"
  },
  {
    "text": "and uh we are not doing too much Java on the cloud but this is kind of my private",
    "start": "90720",
    "end": "96399"
  },
  {
    "text": "topic the research how to to put Java kind of back into this especially AWS",
    "start": "96399",
    "end": "101799"
  },
  {
    "text": "serverless stuff so let's just paint the picture and just look into the Java at",
    "start": "101799",
    "end": "107200"
  },
  {
    "start": "104000",
    "end": "137000"
  },
  {
    "text": "least the popularity of the Java as a programming language and just doesn't matter what resource you will take and",
    "start": "107200",
    "end": "113640"
  },
  {
    "text": "there are so many different different uh yeah algorith how you can measure it",
    "start": "113640",
    "end": "119079"
  },
  {
    "text": "number of reposit is at GitHub number of job postings related to Java but in the end of the day you will find out that",
    "start": "119079",
    "end": "125759"
  },
  {
    "text": "Java belongs to the top three popular programming languages anyway yeah it's just mainly about these three JavaScript",
    "start": "125759",
    "end": "133160"
  },
  {
    "text": "derivates of it Python and Java now let's look into the life of",
    "start": "133160",
    "end": "139519"
  },
  {
    "start": "137000",
    "end": "310000"
  },
  {
    "text": "AWS developer SES developer and the thing is now it's it's it's really cool",
    "start": "139519",
    "end": "147319"
  },
  {
    "text": "to be honest because for example AWS has its own distribution Amazon",
    "start": "147319",
    "end": "152959"
  },
  {
    "text": "Corto there they patch uh the stuff and they support this long-term versions a",
    "start": "152959",
    "end": "158280"
  },
  {
    "text": "bit longer than for example Oracle does so this is Amazon coretto and now we",
    "start": "158280",
    "end": "163640"
  },
  {
    "text": "have this last long-term version 21 uh which is supported since November last",
    "start": "163640",
    "end": "169480"
  },
  {
    "text": "year which came two months after it has been released we needed to wait quite a long",
    "start": "169480",
    "end": "175640"
  },
  {
    "text": "for Java 17 if it would look like it has been supported only since April 2023 so",
    "start": "175640",
    "end": "181120"
  },
  {
    "text": "one and a half years waiting time it was really not a nice space and we're asking how how serious AWS is taking this but",
    "start": "181120",
    "end": "188000"
  },
  {
    "text": "they improved and now the last long-term version was supported quite quite after",
    "start": "188000",
    "end": "193239"
  },
  {
    "text": "it and now Java increased this the pace so that the long-term version will be released each two years and not three",
    "start": "193239",
    "end": "199239"
  },
  {
    "text": "years so this is the expectation for AWS and if you look to the people behind",
    "start": "199239",
    "end": "205519"
  },
  {
    "text": "this Amazon coretto you will see Amazon is taking job are really serious yeah",
    "start": "205519",
    "end": "210879"
  },
  {
    "text": "James Gosling no no introduction needed Alexa ship worked for Redhead for",
    "start": "210879",
    "end": "216400"
  },
  {
    "text": "garbage collector so so many things there are two Germans I live in Germany FAS simonis and Roman Ken so the people",
    "start": "216400",
    "end": "222959"
  },
  {
    "text": "working compiler making things quicker yeah so this is something where I see",
    "start": "222959",
    "end": "228360"
  },
  {
    "text": "and Alex ship I think came even last year so this are quite a good signs and The",
    "start": "228360",
    "end": "234959"
  },
  {
    "text": "Innovation provided by AWS shows me that uh yeah we expect",
    "start": "234959",
    "end": "240239"
  },
  {
    "text": "more but basically Java is a very fast and mature programming language but sess adoption of it looks like this here on",
    "start": "240239",
    "end": "247799"
  },
  {
    "text": "the left and right side the basically you can see what programming languages I used to write Lambda functions yeah the",
    "start": "247799",
    "end": "255000"
  },
  {
    "text": "the same report of data doc but one from three years ago and last the the the",
    "start": "255000",
    "end": "260639"
  },
  {
    "text": "second one from the last year and you see Java is number three which corresponds but you see the Gap yeah it",
    "start": "260639",
    "end": "267560"
  },
  {
    "text": "has been maybe 4% of Lambda function written in in in in Java 3 years ago now",
    "start": "267560",
    "end": "273680"
  },
  {
    "text": "it's 10% and it's it does doesn't correspond the popularity so we see that Java kind of struggles on this",
    "start": "273680",
    "end": "280440"
  },
  {
    "text": "serverless space yeah just there are reasons for that why all these pythons or nodejs typescript JavaScript they are",
    "start": "280440",
    "end": "288880"
  },
  {
    "text": "much more popular so basically developers we are really happy I just",
    "start": "288880",
    "end": "294080"
  },
  {
    "text": "Java is wonderful programming language wonderful community so many open source projects spring quarkus not or whatever",
    "start": "294080",
    "end": "300680"
  },
  {
    "text": "you want and we are relying on that it's that's really increased productivity but",
    "start": "300680",
    "end": "306360"
  },
  {
    "text": "uh why we are struggling so basically the struggles come that Java was",
    "start": "306360",
    "end": "312080"
  },
  {
    "start": "310000",
    "end": "355000"
  },
  {
    "text": "designed more or less the programming language for long LIF applications yeah just like web containers that take",
    "start": "312080",
    "end": "317919"
  },
  {
    "text": "several seconds to start and then leave for weeks maybe microservices world that",
    "start": "317919",
    "end": "322960"
  },
  {
    "text": "has changed you need now to just that more containers come and go but basically the designs principle behind",
    "start": "322960",
    "end": "329800"
  },
  {
    "text": "all this all Java uh how it's designed especially applications like spring who",
    "start": "329800",
    "end": "336120"
  },
  {
    "text": "initially relies on annotations and reflection dependency injection it takes",
    "start": "336120",
    "end": "341440"
  },
  {
    "text": "time to initialize and then you are quick but basically that's exactly the problem with that c starts that the",
    "start": "341440",
    "end": "347479"
  },
  {
    "text": "serus changes the game drastically about this there are some things also about",
    "start": "347479",
    "end": "352840"
  },
  {
    "text": "memory foood prun footprint but let's talk about cold starts I always hear we will be talking what is that that it's",
    "start": "352840",
    "end": "358919"
  },
  {
    "start": "355000",
    "end": "785000"
  },
  {
    "text": "the pro solved problem yeah yeah many applications are now asynchronously",
    "start": "358919",
    "end": "364759"
  },
  {
    "text": "maybe it is but there are request that needs to be answered quickly in the real time like if you log in yeah just it's",
    "start": "364759",
    "end": "372000"
  },
  {
    "text": "nothing that can be done asynchronously maybe register can be done asynchronously that you verify your email but login it needs to be done",
    "start": "372000",
    "end": "378479"
  },
  {
    "text": "faster in real time and there are other stuff in the ordering process that you cannot say I can wait 5 seconds or",
    "start": "378479",
    "end": "384039"
  },
  {
    "text": "something like this yeah so basically because it's not a Java AWS conference several words what's about call start um",
    "start": "384039",
    "end": "392919"
  },
  {
    "text": "basically it's about Lambda is a function as a service so the one request",
    "start": "392919",
    "end": "398160"
  },
  {
    "text": "can be executed only by one container and then the container is put back to the pool of containers similar to The",
    "start": "398160",
    "end": "404639"
  },
  {
    "text": "Connection in the data source pool yeah so this is kind of the there should be enough containers to execute otherwise",
    "start": "404639",
    "end": "411080"
  },
  {
    "text": "there is a need for a new container and the new container the the starting of",
    "start": "411080",
    "end": "416400"
  },
  {
    "text": "the new containerization has its costs yeah it's work needs to be done first of",
    "start": "416400",
    "end": "422039"
  },
  {
    "text": "all on AWS the containers run on this firecracker VM which manages the",
    "start": "422039",
    "end": "427440"
  },
  {
    "text": "container it's not a kubernetes solution but from the basic that's the same yeah just managing the container find the",
    "start": "427440",
    "end": "433800"
  },
  {
    "text": "container or execution environment to initialize in the case of of java um",
    "start": "433800",
    "end": "439000"
  },
  {
    "text": "Java run time needs to be started on this yeah we selected Java Java needs to be started and then Java runs loads all",
    "start": "439000",
    "end": "446520"
  },
  {
    "text": "this function code from this the cloud loading key kicks in static initializer block of the Lambda function needs to be",
    "start": "446520",
    "end": "453919"
  },
  {
    "text": "executed and all that stuff just in time compiler kicks in all that normal stuff",
    "start": "453919",
    "end": "459160"
  },
  {
    "text": "needs to be done and all this pH all the steps all this three one",
    "start": "459160",
    "end": "464800"
  },
  {
    "text": "are called cold starts and only in the end this execution warm start the",
    "start": "464800",
    "end": "470199"
  },
  {
    "text": "execution of the function itself is the last Point yeah this is where the Lambda",
    "start": "470199",
    "end": "475319"
  },
  {
    "text": "invols the handlight it's only Point number four and if the the res a container then uh only the warm start",
    "start": "475319",
    "end": "482360"
  },
  {
    "text": "will happen if there is no warm no container available to serve our request we need to go through all these steps um",
    "start": "482360",
    "end": "490080"
  },
  {
    "text": "what is it important uh important is that if you for all programing language is",
    "start": "490080",
    "end": "496080"
  },
  {
    "text": "basically Lambda function you can only set the amount of memory to the function the CPU is based on this memory so for",
    "start": "496080",
    "end": "504319"
  },
  {
    "text": "example you will get the full CPU cycle by 1.8 GB of memory selected so if you select",
    "start": "504319",
    "end": "510000"
  },
  {
    "text": "half of the gigabyte memory you will get quarter of the CPU cycle and it's important because in this initializer",
    "start": "510000",
    "end": "516640"
  },
  {
    "text": "phase and the cold start Lambda gives you the whole CPU access for free for 10 seconds so it's generally more than you",
    "start": "516640",
    "end": "524000"
  },
  {
    "text": "will have in the Lambda function it gives us some optimization opportunity so maybe once again coming back here",
    "start": "524000",
    "end": "531440"
  },
  {
    "text": "when this container needs to be initialize so the one example is you deploy the function for the first time",
    "start": "531440",
    "end": "537959"
  },
  {
    "text": "the other is no container execute it just needs to download the code this is the one example or you change the",
    "start": "537959",
    "end": "543240"
  },
  {
    "text": "function it's the same the old containers needs to be destroyed because you have a new code yeah another",
    "start": "543240",
    "end": "550440"
  },
  {
    "text": "situation is for example you have five warm containers in the pool but you now have six parallel requests so five",
    "start": "550440",
    "end": "557760"
  },
  {
    "text": "containers can sve five requests you need the sixth one and then then this the sixth container needs to be",
    "start": "557760",
    "end": "564160"
  },
  {
    "text": "started and there is also other situation AWS recycles the container from time execution environment from",
    "start": "564160",
    "end": "570760"
  },
  {
    "text": "time to time for security purposes they need to patch the stuff they don't publish how often it happens but",
    "start": "570760",
    "end": "576480"
  },
  {
    "text": "generally my um investigations showed that basically after several hours even",
    "start": "576480",
    "end": "583920"
  },
  {
    "text": "if if you have the steady traffic the container will be recycled and then then there is a need for the new one so they",
    "start": "583920",
    "end": "589720"
  },
  {
    "text": "don't stay for a long time they patch it and they also try to decrease the",
    "start": "589720",
    "end": "594839"
  },
  {
    "text": "surface of attack so the one container will will not be live forever so these are the situation so now okay",
    "start": "594839",
    "end": "602760"
  },
  {
    "text": "we have cold start time but what is the impact so I will show you some demo application of basically we have",
    "start": "602760",
    "end": "608240"
  },
  {
    "text": "something in our job something similar this is the small software for creating the photo products we in the photo",
    "start": "608240",
    "end": "613800"
  },
  {
    "text": "product so create photo product delete product update product you have in front of the API Gateway bunch of Lambda",
    "start": "613800",
    "end": "620600"
  },
  {
    "text": "functions and we store it first of all in Dynamo DB I will be talking also about other possibilities later so I as",
    "start": "620600",
    "end": "627560"
  },
  {
    "text": "a start of the investigation we will use use 1 GB of memory that's kind of a good practice we will use the default HTP",
    "start": "627560",
    "end": "634279"
  },
  {
    "text": "client so if you talk to the Dynamo DB this is the HTTP invocation so that's",
    "start": "634279",
    "end": "640440"
  },
  {
    "text": "how you talk to Dynamo DB if you don't change anything the default is a patche yeah you don't even need to do something",
    "start": "640440",
    "end": "646839"
  },
  {
    "text": "it's by default there this artifact has 15 megabytes of size this kind of application and we will start with the",
    "start": "646839",
    "end": "653839"
  },
  {
    "text": "Java compilation options stop at T T at one I will be talking about this as was",
    "start": "653839",
    "end": "659399"
  },
  {
    "text": "at least the best practice so this was kind of the experiment for one hour where I just called this kind of get",
    "start": "659399",
    "end": "666240"
  },
  {
    "text": "product by ID function one hour and I produced kind of 100 cold cold request",
    "start": "666240",
    "end": "672320"
  },
  {
    "text": "and one 100,000 warm request during this time so you see basically cold start",
    "start": "672320",
    "end": "677560"
  },
  {
    "text": "happens maybe 1% of the execution yeah it's roughly it can be different yeah",
    "start": "677560",
    "end": "683480"
  },
  {
    "text": "the the important thing is that I will be explaining why this have been first 100 call start so after the deployment",
    "start": "683480",
    "end": "689920"
  },
  {
    "text": "of the function yeah not simply somewhere I started this so I redeployed the version so that the the new",
    "start": "689920",
    "end": "696160"
  },
  {
    "text": "containers needs to be started and all that stuff so you will be seeing this kind of images for the cold starts and W",
    "start": "696160",
    "end": "701519"
  },
  {
    "text": "starts warm starts I will show you the Magics so let's start and see at least",
    "start": "701519",
    "end": "706639"
  },
  {
    "text": "what we have now you see the the call start values there is no optimization there simply is that no grow VM first",
    "start": "706639",
    "end": "714079"
  },
  {
    "text": "you see this percentiles everybody should know what is that and you see see that the cold",
    "start": "714079",
    "end": "720519"
  },
  {
    "text": "start starts with 3 seconds yeah it's only cold start and you need to add warm start to this because then it's",
    "start": "720519",
    "end": "726839"
  },
  {
    "text": "execution of the function comes also and of course that's one of the reasons",
    "start": "726839",
    "end": "732440"
  },
  {
    "text": "because even if cold start happens only one in 1% the cases not everybody will",
    "start": "732440",
    "end": "737560"
  },
  {
    "text": "wait three three and a half seconds for the response so there are studies that",
    "start": "737560",
    "end": "742920"
  },
  {
    "text": "that shows that there can be drop offs if the user wait one or two seconds so there is a chance that you will lose",
    "start": "742920",
    "end": "750160"
  },
  {
    "text": "users you will lose money without any changes I would say yeah so this is kind of it's it's it's a",
    "start": "750160",
    "end": "757399"
  },
  {
    "text": "problem we will also look into this max value of the warm start which is also a",
    "start": "757399",
    "end": "763560"
  },
  {
    "text": "big one yeah so when it happens but generally let's start",
    "start": "763560",
    "end": "768920"
  },
  {
    "text": "with now with we said the Baseline and let's start about about talking about",
    "start": "768920",
    "end": "774160"
  },
  {
    "text": "optimizations like there will be some general best practices but we will be also talking about AWS own technology",
    "start": "774160",
    "end": "779760"
  },
  {
    "text": "snapart gra native image if we will have time then about other stuff so basically",
    "start": "779760",
    "end": "786240"
  },
  {
    "start": "785000",
    "end": "1148000"
  },
  {
    "text": "it's I think it General recommendations it belongs to each best practice in Java",
    "start": "786240",
    "end": "791600"
  },
  {
    "text": "if you can do something in the static initializer block do it yeah because you are doing it once for the life cycle of",
    "start": "791600",
    "end": "797360"
  },
  {
    "text": "the of the Java class basically yeah and there are things that really needs to be done like if you are talking to Dynamo",
    "start": "797360",
    "end": "804040"
  },
  {
    "text": "DB it's initialization of Dynamo DB client there is no sense to initialize it in the in the function itself because",
    "start": "804040",
    "end": "809959"
  },
  {
    "text": "it will be initialized each time yeah so this is something logical and once again",
    "start": "809959",
    "end": "815240"
  },
  {
    "text": "in static initializer block you will have one CPU cycle yeah so it and then",
    "start": "815240",
    "end": "821240"
  },
  {
    "text": "the things will be kind of quicker so other stuff is sometimes you can",
    "start": "821240",
    "end": "827199"
  },
  {
    "text": "initialize each client sqs SNS Dynamo DB with default values but there are some",
    "start": "827199",
    "end": "832959"
  },
  {
    "text": "values that requires a bit work on AWS side for example in what region do you deploy generally you know for example",
    "start": "832959",
    "end": "839680"
  },
  {
    "text": "yeah you know where you host us east1 or something like this you can set it with",
    "start": "839680",
    "end": "844720"
  },
  {
    "text": "regions directly otherwise AWS can figure it out of course when you deploy but it can take several hundred",
    "start": "844720",
    "end": "851279"
  },
  {
    "text": "milliseconds for them to set it to you and all the stuff so this is one of the easiest tricks uh that can be done",
    "start": "851279",
    "end": "859600"
  },
  {
    "text": "another one is really ugly but we will benefit a lot later from this this technique is called priming and the",
    "start": "859600",
    "end": "866120"
  },
  {
    "text": "priming is something that you would like to Prime something you can say it pre-initialized",
    "start": "866120",
    "end": "872839"
  },
  {
    "text": "preor and especially it requires some knowledge for example especially when",
    "start": "872839",
    "end": "878800"
  },
  {
    "text": "Dynamo DB makes this if you make the first invocation to the Dynamo DB then",
    "start": "878800",
    "end": "886000"
  },
  {
    "text": "behind the scenes you would like to take something there is a Json Marshall active which transforms your Java object",
    "start": "886000",
    "end": "893480"
  },
  {
    "text": "to Json stored in Dynamo debut then backwards and this Json initial ier",
    "start": "893480",
    "end": "899440"
  },
  {
    "text": "needs time to initi to be initialized it's the same it's more or less developed kind of there is a caching",
    "start": "899440",
    "end": "905759"
  },
  {
    "text": "mechanism all that stuff it takes some time to be initialized so it's also sometimes wise",
    "start": "905759",
    "end": "912680"
  },
  {
    "text": "to put this logic some fake invocation first fake invocation to Dynamo Deb static initializer block to preform this",
    "start": "912680",
    "end": "919720"
  },
  {
    "text": "Json marshala with the full CPU it's an ugly quote because you simply don't",
    "start": "919720",
    "end": "925199"
  },
  {
    "text": "don't know for example the ID to to get from Dynamo DB because it comes with the request but you can fake it by",
    "start": "925199",
    "end": "931120"
  },
  {
    "text": "invocation like get I did zero you not interested in the result you're interested in the preforming of Json",
    "start": "931120",
    "end": "936399"
  },
  {
    "text": "Marshall in this case yeah so if you put the synthetic initializer block it can give you some benefits this technique is",
    "start": "936399",
    "end": "942720"
  },
  {
    "text": "called priming and we will be seeing how to apply it with the AWS snapart but it makes the code a bit ugly yeah just",
    "start": "942720",
    "end": "949160"
  },
  {
    "text": "doing what some fake invocation just to preform things and I know I also don't",
    "start": "949160",
    "end": "954920"
  },
  {
    "text": "don't like it personally yeah but if it's about milliseconds it then can help you it give you the choice you can",
    "start": "954920",
    "end": "961800"
  },
  {
    "text": "see so basically I will show you a lots of other measurements but word of caution preasure it yourself for your",
    "start": "961800",
    "end": "968639"
  },
  {
    "text": "use case I will explain in the end when I introduced everything what are the factors why you can do the same",
    "start": "968639",
    "end": "974759"
  },
  {
    "text": "measurements you can go to my GitHub account check it out and have slightly at least slightly different",
    "start": "974759",
    "end": "980160"
  },
  {
    "text": "results so first of all now it becomes clear for example why",
    "start": "980160",
    "end": "986319"
  },
  {
    "text": "is that value so high for warm uh execution I did not do any priming during my invocation so I did not Prime",
    "start": "986319",
    "end": "993639"
  },
  {
    "text": "and during the first invocation Jason Marshall and needed to be initialized and classes need needed to be loaded",
    "start": "993639",
    "end": "1000720"
  },
  {
    "text": "additionally so not everything was initialized in the static initializer block and this is something that also",
    "start": "1000720",
    "end": "1006360"
  },
  {
    "text": "influenced the coldstar time so basically for the coldstar time you need to add one of those values with that max",
    "start": "1006360",
    "end": "1013720"
  },
  {
    "text": "value yeah because it will happen during the call start that the Json Marshall will need to be initialized because it",
    "start": "1013720",
    "end": "1019720"
  },
  {
    "text": "hasn't been it's the first invocation during the cold start and then you are now nearly 5 Seconds of the execution",
    "start": "1019720",
    "end": "1025918"
  },
  {
    "text": "time of the function for the in case the cold start is happening and it's just of",
    "start": "1025919",
    "end": "1031438"
  },
  {
    "text": "course it's yeah something so in case priming is possible but you are not",
    "start": "1031439",
    "end": "1036798"
  },
  {
    "text": "doing it then the warm execution or the warm start of the execution of the lamba function may take longer yeah this is",
    "start": "1036799",
    "end": "1043280"
  },
  {
    "text": "something that's important to know you can get rid of it but you will see that",
    "start": "1043280",
    "end": "1048600"
  },
  {
    "text": "in in the in the performance so basically the best practices are quite known for sess",
    "start": "1048600",
    "end": "1054679"
  },
  {
    "text": "Computing this is something reflection Righttime bite code generation Dynamic class loading they are not good for good",
    "start": "1054679",
    "end": "1061559"
  },
  {
    "text": "fit for sorrowless architectures and of course if you have the classical spring boot juice then yeah for example I tried",
    "start": "1061559",
    "end": "1068880"
  },
  {
    "text": "my first spring boot application five or six years ago to deploy it on Java and I had call start of 10 seconds yeah and",
    "start": "1068880",
    "end": "1076080"
  },
  {
    "text": "then that's what people try out and they see and they say oh no no I cannot use it and it was true that there were no",
    "start": "1076080",
    "end": "1082880"
  },
  {
    "text": "not too many solutions back then uh but we will be talking about this stuff so",
    "start": "1082880",
    "end": "1088480"
  },
  {
    "text": "let's start with the AWS snapart basically I now with the article number",
    "start": "1088480",
    "end": "1094840"
  },
  {
    "text": "23 about this topic because you can do it forever measure for Java 17 basically",
    "start": "1094840",
    "end": "1099919"
  },
  {
    "text": "I write on Def to if you follow me a lot about the stuff and measure and explain",
    "start": "1099919",
    "end": "1105840"
  },
  {
    "text": "how you can reduce it but um what is the what's the promise of AWS",
    "start": "1105840",
    "end": "1111840"
  },
  {
    "text": "snapart it's AWS own technology so it's not applicable to something else but",
    "start": "1111840",
    "end": "1118240"
  },
  {
    "text": "what they are doing is they are dividing the the this life cycle of Lambda",
    "start": "1118240",
    "end": "1125320"
  },
  {
    "text": "function quite in two blocks deployment during the deployment phase when you deploy the function and then",
    "start": "1125320",
    "end": "1131559"
  },
  {
    "text": "invocation and what they offer you and it's your choice you can turn it on you",
    "start": "1131559",
    "end": "1136880"
  },
  {
    "text": "will see on the on the per Lambda function they implemented snapart is basically firecracker microv VM the whole",
    "start": "1136880",
    "end": "1144240"
  },
  {
    "text": "execution environment snapshot creation and restore so the whole snapshot will",
    "start": "1144240",
    "end": "1149679"
  },
  {
    "start": "1148000",
    "end": "1602000"
  },
  {
    "text": "be restored the whole VM where jvm is only part of it but the whole VM with the with the uh with the operating",
    "start": "1149679",
    "end": "1156960"
  },
  {
    "text": "system is Resto is is snapshotted in the deployment phase",
    "start": "1156960",
    "end": "1162320"
  },
  {
    "text": "so it doesn't impact the invocations of the function but it impacts the duration of the deployment we will be talking",
    "start": "1162320",
    "end": "1167760"
  },
  {
    "text": "about this and then during the invocation phase there will be the restore phase of this yeah uh if you",
    "start": "1167760",
    "end": "1173840"
  },
  {
    "text": "enable this we have here also hooks we will be talking about this what what",
    "start": "1173840",
    "end": "1179039"
  },
  {
    "text": "they bring this hooks optional hooks but basically what's the promise yeah why it",
    "start": "1179039",
    "end": "1184480"
  },
  {
    "text": "should reduce cold start the promise is or at least what it should solve is that the",
    "start": "1184480",
    "end": "1191240"
  },
  {
    "text": "restore phase of the whole microw will be quicker than the cold start otherwise it",
    "start": "1191240",
    "end": "1197360"
  },
  {
    "text": "just doesn't make any sense to activate yeah so this is what AWS was experimenting they released it in",
    "start": "1197360",
    "end": "1203559"
  },
  {
    "text": "December two years ago so one and a half years ago basically and this is kind of",
    "start": "1203559",
    "end": "1208799"
  },
  {
    "text": "they try it out and just to figure out will it be quicker than these 3 seconds that we",
    "start": "1208799",
    "end": "1213919"
  },
  {
    "text": "see and we will see uh will it be quicker or not so basically it's your decision you simply go into the function",
    "start": "1213919",
    "end": "1220679"
  },
  {
    "text": "configuration and and say here snapart yes that's basically it yeah and then",
    "start": "1220679",
    "end": "1226640"
  },
  {
    "text": "everything will happen you will see when you deploy will look into the locks you will see what will happen but basically",
    "start": "1226640",
    "end": "1232280"
  },
  {
    "text": "what happens around the corner then this this this um firecracker snapshot is taking it will",
    "start": "1232280",
    "end": "1239240"
  },
  {
    "text": "be stored encrypted and stored in Low T cach it's important I will talking about",
    "start": "1239240",
    "end": "1244880"
  },
  {
    "text": "this in the kind of in multi- Regional fashion like AWS does it it just in case",
    "start": "1244880",
    "end": "1251159"
  },
  {
    "text": "one region is going down you have the cach in not region availability zone is",
    "start": "1251159",
    "end": "1256480"
  },
  {
    "text": "down and you have it on the other that's why it's also a be taking time but basically this it and then you you doing",
    "start": "1256480",
    "end": "1263120"
  },
  {
    "text": "request then it's resume operation so the the the the snapshot will be restored who have you heard about Creo",
    "start": "1263120",
    "end": "1271080"
  },
  {
    "text": "and crack in the Java world are there any people so at least yeah we do not",
    "start": "1271080",
    "end": "1277559"
  },
  {
    "text": "need to Interchange the stuff this are similar things but basically just to give you an overview Creo is basically",
    "start": "1277559",
    "end": "1284320"
  },
  {
    "text": "to move containers from one system to another in in the Linux space since 12 years this is technologies that has its",
    "start": "1284320",
    "end": "1291159"
  },
  {
    "text": "own challenges with open fights network connection time best caches and all that stuff so how uh how it relates to fire",
    "start": "1291159",
    "end": "1300880"
  },
  {
    "text": "corre M micro snapshot snap start so there are differences so fire coner",
    "start": "1300880",
    "end": "1307480"
  },
  {
    "text": "snapshots uh kind of the whole running operating system while cre is",
    "start": "1307480",
    "end": "1313960"
  },
  {
    "text": "snapshotting only one process yeah that's the difference so firecracker does a difference it has advantages",
    "start": "1313960",
    "end": "1320039"
  },
  {
    "text": "because you in case of snapart you are not caring about um file handles that",
    "start": "1320039",
    "end": "1325799"
  },
  {
    "text": "are open and all that stuff but it has its drawbacks also in in in in sense",
    "start": "1325799",
    "end": "1331279"
  },
  {
    "text": "that you need to receip time and and S the system clock in both situations time",
    "start": "1331279",
    "end": "1336799"
  },
  {
    "text": "based cashes cannot be used for example if you store something for 10 hours for 10 hours and then they resume going 11",
    "start": "1336799",
    "end": "1344880"
  },
  {
    "text": "hours later then you don't have a value so you need to think what's what's not usable so time based Cates probably is",
    "start": "1344880",
    "end": "1352200"
  },
  {
    "text": "one of the things so once again if you activate this you will be seeing the",
    "start": "1352200",
    "end": "1357880"
  },
  {
    "text": "following in case you are doing deployment of the function whatever it is cloud formation Sam you will be see",
    "start": "1357880",
    "end": "1364520"
  },
  {
    "text": "here in need start this is the the snapshot basically takes place and you will see here some values how long did",
    "start": "1364520",
    "end": "1370720"
  },
  {
    "text": "it take and in case you have snapart enabled and you execute the function",
    "start": "1370720",
    "end": "1376640"
  },
  {
    "text": "Lambda function you will be seeing something like restore ort this is the sign that the snapshot has been restored",
    "start": "1376640",
    "end": "1383480"
  },
  {
    "text": "and you are using snapart basically otherwise you will you will not see something like this you will also see",
    "start": "1383480",
    "end": "1388600"
  },
  {
    "text": "restore duration values and all that stuff we will be looking into there so now another concept some people raise",
    "start": "1388600",
    "end": "1395640"
  },
  {
    "text": "their hands about crack so it's important to know so first of all crack",
    "start": "1395640",
    "end": "1402360"
  },
  {
    "text": "is something similar but on the Java space so coordinated restore so how to",
    "start": "1402360",
    "end": "1407720"
  },
  {
    "text": "snapshot the gvm itself yeah based on the Creo yeah this is done by that's a",
    "start": "1407720",
    "end": "1415000"
  },
  {
    "text": "now also very popular technique to do outside of AWS spring supports it",
    "start": "1415000",
    "end": "1420080"
  },
  {
    "text": "natively but you need a crack gvm for example normal Oracle is is not you need",
    "start": "1420080",
    "end": "1426679"
  },
  {
    "text": "other companies produce this gvms but basically snapstar doesn't use crack",
    "start": "1426679",
    "end": "1432320"
  },
  {
    "text": "what snap does it use cracks apis for this optional snapshots before",
    "start": "1432320",
    "end": "1439440"
  },
  {
    "text": "snapshot is created there is a hook and after snapshot is restored there is an optional hook they use only the apis why",
    "start": "1439440",
    "end": "1446400"
  },
  {
    "text": "I don't know because the people then interchange but it's simply API we will be looking into this yeah this was also",
    "start": "1446400",
    "end": "1452919"
  },
  {
    "text": "the promise of crack is the similar so the the the time for the first operation is quick because GN can be restored",
    "start": "1452919",
    "end": "1459440"
  },
  {
    "text": "quickly but AWS snapart is just restoring the whole uh operating system",
    "start": "1459440",
    "end": "1465840"
  },
  {
    "text": "including then jvm so now just let's see what we can do with this especially with",
    "start": "1465840",
    "end": "1472440"
  },
  {
    "text": "this optional um hooks yeah they implement the crack API so you need to import this",
    "start": "1472440",
    "end": "1478240"
  },
  {
    "text": "or crack and then you need to implement the resource interface yeah then you need to register this is the Lambda",
    "start": "1478240",
    "end": "1484399"
  },
  {
    "text": "function get product byid you need to register this Lambda function as a crack resource that's basically the same line",
    "start": "1484399",
    "end": "1489799"
  },
  {
    "text": "in the Constructor register this as a class and then you have this hooks before checkpoint before the snapshot is",
    "start": "1489799",
    "end": "1496480"
  },
  {
    "text": "taken and after restore basically don't do anything in the after restore but",
    "start": "1496480",
    "end": "1501960"
  },
  {
    "text": "before checkpoint is a very good place if you know something to Prime like din would be in vacation with with priming",
    "start": "1501960",
    "end": "1510840"
  },
  {
    "text": "HTTP yeah stuff and all this um Jackson",
    "start": "1510840",
    "end": "1516000"
  },
  {
    "text": "marshala then it's a good place to prime it why because priming before checkpoint",
    "start": "1516000",
    "end": "1522080"
  },
  {
    "text": "is called during the deployment phase before the snapshot is taken so the user is even not impacted it impacts maybe",
    "start": "1522080",
    "end": "1528200"
  },
  {
    "text": "the the duration of the how long it takes to take the snapshot but it doesn't impact then the restore and all",
    "start": "1528200",
    "end": "1534360"
  },
  {
    "text": "that pH so this priming becomes even more it's still the ugly Cod you need to do something product get product by d0o",
    "start": "1534360",
    "end": "1540760"
  },
  {
    "text": "and I'm not interested in the result I'm interested in the Performing the marshala loading the classes down the",
    "start": "1540760",
    "end": "1546760"
  },
  {
    "text": "chain so that the snapshot contains more and more useful things and this is very",
    "start": "1546760",
    "end": "1551960"
  },
  {
    "text": "important stuff so basically AWS now",
    "start": "1551960",
    "end": "1557120"
  },
  {
    "text": "published the snapart guide so you can look into what how to do it more or less",
    "start": "1557120",
    "end": "1564080"
  },
  {
    "text": "on the efficient way there are other things not only Dynamo DB which is known so you can read through how to do it",
    "start": "1564080",
    "end": "1571399"
  },
  {
    "text": "with less effort I personally hope that there will be libraries that are doing it behind the scenes because it's always",
    "start": "1571399",
    "end": "1577200"
  },
  {
    "text": "the same in the situation what you are doing and it's just repetitive code but we are not quite there I also recommend",
    "start": "1577200",
    "end": "1584320"
  },
  {
    "text": "you the talk AWS Lambda under the hood from the AWS principal engineer mark",
    "start": "1584320",
    "end": "1589399"
  },
  {
    "text": "danilov on the qon who is going much deeper into the deta details how snapart",
    "start": "1589399",
    "end": "1594600"
  },
  {
    "text": "Works itself it's just I have lack of time but he explains how this T caching works and all that stuff really",
    "start": "1594600",
    "end": "1600440"
  },
  {
    "text": "interesting so snapart has its limitations it's AWS advertises it for",
    "start": "1600440",
    "end": "1605799"
  },
  {
    "start": "1602000",
    "end": "2020000"
  },
  {
    "text": "each it's they don't say AWS s start for Java but currently only supports Java",
    "start": "1605799",
    "end": "1611000"
  },
  {
    "text": "which is good we are talking about Java but generally the net Will C they will have the same problems and maybe it",
    "start": "1611000",
    "end": "1617039"
  },
  {
    "text": "could be the for them also yeah so deployment of the snapart in case you enable snapart the",
    "start": "1617039",
    "end": "1623039"
  },
  {
    "text": "deployment of the one Lambda function takes two and between two and 2 and a half minutes yeah because this taking of",
    "start": "1623039",
    "end": "1630559"
  },
  {
    "text": "the snapshot snapshot and then storing it in individual zones it takes time so this",
    "start": "1630559",
    "end": "1637679"
  },
  {
    "text": "impacts the experience yeah it takes two and a half minutes to deploy one function if",
    "start": "1637679",
    "end": "1643640"
  },
  {
    "text": "you deploy in one package many function then it's it's it's it's happening in parallel for the fun function so it's",
    "start": "1643640",
    "end": "1649000"
  },
  {
    "text": "you have 10 of them you will have the same duration basically um so there are",
    "start": "1649000",
    "end": "1654520"
  },
  {
    "text": "some cits so for example this snapshot will be deleted if your function isn't invoked for two weeks so think of what",
    "start": "1654520",
    "end": "1662120"
  },
  {
    "text": "function is it especially if you're on the staging environment don't do anything there and you activate a snap",
    "start": "1662120",
    "end": "1668080"
  },
  {
    "text": "start the cache will be deleted and the first invocation will lead to the aror or not the first one uh the first one",
    "start": "1668080",
    "end": "1673799"
  },
  {
    "text": "will kick in the snapshot creation and until it's not created it's will be an error yeah not a pleasant Behavior yeah",
    "start": "1673799",
    "end": "1681600"
  },
  {
    "text": "just I reported this there are other stuff to do but basically if you have hot Lambda function you are not",
    "start": "1681600",
    "end": "1688519"
  },
  {
    "text": "impacted and snapstar doesn't currently support provision concurrency arm architecture in case you're using",
    "start": "1688519",
    "end": "1694559"
  },
  {
    "text": "elastic file system it's also not supported but we are basically storing things on S3 so there are things that I",
    "start": "1694559",
    "end": "1700880"
  },
  {
    "text": "also recommended AWS like a feedback that in case the",
    "start": "1700880",
    "end": "1707159"
  },
  {
    "text": "snapshot is not f found yeah that they don't throw the error but have the regular call start instead and then the",
    "start": "1707159",
    "end": "1713880"
  },
  {
    "text": "snapshot is created then uh then they can switch to snapart back without me",
    "start": "1713880",
    "end": "1720039"
  },
  {
    "text": "because uh I totally understand that they delete this the the um the cash because cash costs money if you don't",
    "start": "1720039",
    "end": "1726000"
  },
  {
    "text": "call invoke the function then why they should keep it forever yeah they they help you as long as you are benefiting",
    "start": "1726000",
    "end": "1731799"
  },
  {
    "text": "from this so let's see I'm working quite tightly with developer ad",
    "start": "1731799",
    "end": "1738640"
  },
  {
    "text": "doing that stuff giving the feedback so basically we talk about this we would like to see numbers uh what does this",
    "start": "1738640",
    "end": "1746120"
  },
  {
    "text": "snapart improves so now you see the same thing gigabyte memory HTTP P HTTP client",
    "start": "1746120",
    "end": "1753320"
  },
  {
    "text": "is tiered compilation we'll be talking these are the values that I gave you uh",
    "start": "1753320",
    "end": "1759240"
  },
  {
    "text": "basically uh last time without snap start now this is the snapart but",
    "start": "1759240",
    "end": "1764279"
  },
  {
    "text": "without priming I didn't do priming and you see it it holds its promise it reduces the cold",
    "start": "1764279",
    "end": "1770880"
  },
  {
    "text": "start time now you see basically I always like this yellow one because it's P90 it's something that gives you",
    "start": "1770880",
    "end": "1777600"
  },
  {
    "text": "orientation now you have here 3 and a half seconds now you have here 2 seconds only by enabling snap start and",
    "start": "1777600",
    "end": "1784799"
  },
  {
    "text": "doing nothing yeah if you have priming and in case of Dynamo GB no it works and",
    "start": "1784799",
    "end": "1790760"
  },
  {
    "text": "you implement this hooks with before checkpoint and do what what I showed you you can for P90 you can go one and a",
    "start": "1790760",
    "end": "1798240"
  },
  {
    "text": "half seconds or 1.3 seconds so it's from 3.5 to 1.3 and it's it's it's a huge",
    "start": "1798240",
    "end": "1805840"
  },
  {
    "text": "Improvement to be honest yeah it's really huge improvement from think you just bringing it 60% 70% down yeah and",
    "start": "1805840",
    "end": "1813880"
  },
  {
    "text": "for p50 you will have even better values and it will be caching Behavior we will be talking about also now looking to the",
    "start": "1813880",
    "end": "1821159"
  },
  {
    "text": "worm start times not really a big difference so the um the snap start",
    "start": "1821159",
    "end": "1827440"
  },
  {
    "text": "priming just the technique to reduce the cold start time so there is not no impact on the warm start it's just uh",
    "start": "1827440",
    "end": "1834960"
  },
  {
    "text": "but basically also measured everything is working this are P99 and Max values",
    "start": "1834960",
    "end": "1840440"
  },
  {
    "text": "everything's fine so now let's we started like this",
    "start": "1840440",
    "end": "1845760"
  },
  {
    "text": "let's now bit move forward and then see what what we can change and how it",
    "start": "1845760",
    "end": "1851799"
  },
  {
    "text": "impacts the cold and warm sometimes so I simply did the measurements with",
    "start": "1851799",
    "end": "1857120"
  },
  {
    "text": "different memory settings just to see what it will bring yeah you can give Lambda something between 128 until 10 GB",
    "start": "1857120",
    "end": "1864760"
  },
  {
    "text": "but it's also cost Factor so this is the me the the measurements without snapart",
    "start": "1864760",
    "end": "1871360"
  },
  {
    "text": "for this use case first without snapart and you see you have somewhere here Sweet Spot 1 gab is kind of very good",
    "start": "1871360",
    "end": "1879279"
  },
  {
    "text": "memory setting anyway yeah so basically doesn't make any sense to in increase",
    "start": "1879279",
    "end": "1885919"
  },
  {
    "text": "memory because you will pay more and the cold start remains more or less the same and the same you will be seeing here uh",
    "start": "1885919",
    "end": "1893279"
  },
  {
    "text": "also for the warm start time it's basically the same so with 1 Gigabyte you're also good to go without snapart",
    "start": "1893279",
    "end": "1900080"
  },
  {
    "text": "and similarly also with snapart without priming so not a big so after this 1",
    "start": "1900080",
    "end": "1906320"
  },
  {
    "text": "Gigabyte you don't see um an increase and basically it's the same for warm",
    "start": "1906320",
    "end": "1912519"
  },
  {
    "text": "start time so snap start without priming so all my um investigations least for",
    "start": "1912519",
    "end": "1917600"
  },
  {
    "text": "this use case showed that somewhere around 1 GB it's a very good uh setting",
    "start": "1917600",
    "end": "1922960"
  },
  {
    "text": "interesting it's more interesting and more interesting result if you have snap start and priming you see that even",
    "start": "1922960",
    "end": "1928360"
  },
  {
    "text": "having 600 768 megabytes the results will become closer yeah so snap starts",
    "start": "1928360",
    "end": "1934639"
  },
  {
    "text": "enable with snapart and priming you can think of maybe giving bit less memory",
    "start": "1934639",
    "end": "1940679"
  },
  {
    "text": "which is a course factor and have also the good results also the warm start times yeah they are comparable so if you",
    "start": "1940679",
    "end": "1949120"
  },
  {
    "text": "have snap start and priming you have much tired result you don't have this Max values going so high because uh",
    "start": "1949120",
    "end": "1957720"
  },
  {
    "text": "everything is preformed with snapart and priming in the cache so you don't have this huge Max values as well that's a",
    "start": "1957720",
    "end": "1964200"
  },
  {
    "text": "huge benefit so basically check it out try for you for your use case I also try to",
    "start": "1964200",
    "end": "1971120"
  },
  {
    "text": "figure out does the deployment Size Matters in case especially snapart is enabled it's known that if normal case",
    "start": "1971120",
    "end": "1979399"
  },
  {
    "text": "of course the bigger the the package size is the longer the cold start because this whole thing needs to be",
    "start": "1979399",
    "end": "1984960"
  },
  {
    "text": "downloaded initialized more code and all this stuff but I thought if I activate snap start will it matter yeah because",
    "start": "1984960",
    "end": "1993039"
  },
  {
    "text": "yeah the the restore phase how it depends on on the size and it still",
    "start": "1993039",
    "end": "1998960"
  },
  {
    "text": "depends so I just tested something hello world nobody is writing but it's several kilobytes 15 megabytes and 50 megabytes",
    "start": "1998960",
    "end": "2006760"
  },
  {
    "text": "of Lambda functions and also what you see is that the bigger packages have",
    "start": "2006760",
    "end": "2012120"
  },
  {
    "text": "bigger call starts also with snapart and also with priming so it's still true uh",
    "start": "2012120",
    "end": "2018399"
  },
  {
    "text": "that you need to think what you are packaging yeah so don't try package only",
    "start": "2018399",
    "end": "2023440"
  },
  {
    "start": "2020000",
    "end": "2346000"
  },
  {
    "text": "what you are using don't package any junit test in the live application so it still matters sometimes if you have",
    "start": "2023440",
    "end": "2028960"
  },
  {
    "text": "tomat long leave application we package so many things we don't even ask it just",
    "start": "2028960",
    "end": "2034200"
  },
  {
    "text": "don't bother us it just starts and it works but with Lambda just each kilobyte",
    "start": "2034200",
    "end": "2040240"
  },
  {
    "text": "matter yeah so this is the still true this have been the last things I I I",
    "start": "2040240",
    "end": "2045760"
  },
  {
    "text": "this the first time I present this there is another possibility to package using Lambda layers with Lambda layers if you",
    "start": "2045760",
    "end": "2051520"
  },
  {
    "text": "have all all your lambdas have the same dependencies and in my case they are all this the same yeah I have this Java core",
    "start": "2051520",
    "end": "2057839"
  },
  {
    "text": "events Jackson logging crack and all that stuff there is a possibility to",
    "start": "2057839",
    "end": "2063760"
  },
  {
    "text": "release this as a package in the Lambda layer and then simply use this Lambda layer it reduces",
    "start": "2063760",
    "end": "2070800"
  },
  {
    "text": "the package the the size of the Lambda function that I deploy so I deploy only the layer and then I reference the layer",
    "start": "2070800",
    "end": "2076320"
  },
  {
    "text": "that you see in the Lambda function I published this layer with that dependencies and I wanted just to figure out will it will it be the difference",
    "start": "2076320",
    "end": "2084280"
  },
  {
    "text": "using L Lambda layer and not using Lambda layer I need to dig deeper but for example I only publish here P90 yeah",
    "start": "2084280",
    "end": "2092358"
  },
  {
    "text": "for the use case in cold start you see using Lambda layer at least in inreased",
    "start": "2092359",
    "end": "2098079"
  },
  {
    "text": "a bit cold start in case I had priming the difference was wasn't big because",
    "start": "2098079",
    "end": "2104119"
  },
  {
    "text": "everything was in there snapshot yeah it was initialized but this seems to be",
    "start": "2104119",
    "end": "2109599"
  },
  {
    "text": "mattering and this is the warm start for P90 uh also so very interesting",
    "start": "2109599",
    "end": "2116520"
  },
  {
    "text": "situation so I probably will jump over java compilation uh but basically you can use",
    "start": "2116520",
    "end": "2122960"
  },
  {
    "text": "tiered compilation or this stop at level one uh that produced the better result result you can then look into the slides",
    "start": "2122960",
    "end": "2129440"
  },
  {
    "text": "I would like now to talk about just selecting for example other HTTP client",
    "start": "2129440",
    "end": "2135680"
  },
  {
    "text": "we said that the default one is a pat you don't need to do anything but generally if you build a client all",
    "start": "2135680",
    "end": "2141160"
  },
  {
    "text": "clients SKS SNS just doesn't matter you all nearly always have the possibility",
    "start": "2141160",
    "end": "2146720"
  },
  {
    "text": "to set HTTP client and for example if we are programming synchronously you have",
    "start": "2146720",
    "end": "2152160"
  },
  {
    "text": "two other options URL connection HTP client and the AWS owns a AWS CRT HTTP",
    "start": "2152160",
    "end": "2160079"
  },
  {
    "text": "client of course you need then just to to add this as a",
    "start": "2160079",
    "end": "2165359"
  },
  {
    "text": "dependency and this is HTP AWS um HTTP client was released because this Apache",
    "start": "2165359",
    "end": "2172680"
  },
  {
    "text": "thing is is working like for long living environments it initializes caches and all that stuff it's not designed to work",
    "start": "2172680",
    "end": "2178599"
  },
  {
    "text": "with seress environments and it takes time uh the same as URL connection so basically what you can see here this AWS",
    "start": "2178599",
    "end": "2186119"
  },
  {
    "text": "CRT http client produces the lower call start starts here you see without snap",
    "start": "2186119",
    "end": "2192200"
  },
  {
    "text": "start with SNAP start without priming and with priming uh so",
    "start": "2192200",
    "end": "2198200"
  },
  {
    "text": "it's yeah it really uses the stuff especially if you have priming then you",
    "start": "2198200",
    "end": "2203560"
  },
  {
    "text": "it's the same stuff because we initialize the client during the priming and it's in the snapshot you will not",
    "start": "2203560",
    "end": "2209599"
  },
  {
    "text": "see the results but especially if you don't have something to Prime yeah you don't see anything that you can improve",
    "start": "2209599",
    "end": "2215560"
  },
  {
    "text": "the this AWS CRT is is a good choice and it's once again one of this example that AWS is actively contributing with",
    "start": "2215560",
    "end": "2222280"
  },
  {
    "text": "snapart with this HTTP client which is designed for S application basically the",
    "start": "2222280",
    "end": "2227800"
  },
  {
    "text": "same you will be having for the worm start times it produces quite the the best results",
    "start": "2227800",
    "end": "2234640"
  },
  {
    "text": "possible um you have the possibility to program",
    "start": "2234640",
    "end": "2240000"
  },
  {
    "text": "asynchronously it's the whole other topic would you want to do it or not but there is a possibility for example to",
    "start": "2240000",
    "end": "2245880"
  },
  {
    "text": "design uh to to to create an asynchronous Dynamo DB client and then you have to pass asynchronous HTTP",
    "start": "2245880",
    "end": "2253440"
  },
  {
    "text": "client the default one if you're not doing anything is n new it's just simply there but this AWS CR techline is has",
    "start": "2253440",
    "end": "2260760"
  },
  {
    "text": "also asynchronous possibilities so you can use it for synchronous and asynchronous programming the same stuff",
    "start": "2260760",
    "end": "2266800"
  },
  {
    "text": "of course then if you asking just get the item from Dynamo debut doing anything else you will not receive the",
    "start": "2266800",
    "end": "2272680"
  },
  {
    "text": "result but completable future asynchronous style yeah and then you need to think would you like to join in",
    "start": "2272680",
    "end": "2278960"
  },
  {
    "text": "Lambda function or stream it to the front end uh other sort of things of",
    "start": "2278960",
    "end": "2284560"
  },
  {
    "text": "course you need to edit as a dependency but once again this green one as at AWS",
    "start": "2284560",
    "end": "2289960"
  },
  {
    "text": "cr3 asynchronous client outperforms na Neo by far especially in both situation",
    "start": "2289960",
    "end": "2296319"
  },
  {
    "text": "without priming and without snapart enabled and with enabled and priming once again close result if you have",
    "start": "2296319",
    "end": "2303560"
  },
  {
    "text": "priming because everything is primed in the in the snapshot and the same is even for the warm start",
    "start": "2303560",
    "end": "2310319"
  },
  {
    "text": "yeah it outperforms but of course it's the the choice of AWS of of HTTP client",
    "start": "2310319",
    "end": "2317520"
  },
  {
    "text": "is is much bigger because for example Apache gives you much more possibilities to deals with connections with caching I",
    "start": "2317520",
    "end": "2324119"
  },
  {
    "text": "only tried default ones without setting anything so AWS released more or less even kind of mind map how you can",
    "start": "2324119",
    "end": "2330359"
  },
  {
    "text": "navigate and choose uh what's the best one is and of course the programming",
    "start": "2330359",
    "end": "2336119"
  },
  {
    "text": "asynchronously is something completely different yeah you may not want to do it because it introduces whole lot of other",
    "start": "2336119",
    "end": "2343920"
  },
  {
    "text": "challenges so uh I talked about this stuff Low T cach that the things are",
    "start": "2343920",
    "end": "2350800"
  },
  {
    "start": "2346000",
    "end": "2493000"
  },
  {
    "text": "stored in low in this low latency cache and the thing is that um I told",
    "start": "2350800",
    "end": "2359800"
  },
  {
    "text": "you I measured the first 100 call starts so so the cash was empty basically it's",
    "start": "2359800",
    "end": "2365880"
  },
  {
    "text": "the the first invocation and of course there is no cash but what I saw and AWS",
    "start": "2365880",
    "end": "2371040"
  },
  {
    "text": "describes that with each inv call start the results are getting better",
    "start": "2371040",
    "end": "2376440"
  },
  {
    "text": "with more invocations because the cach is filling and only parts will be replaced the C is empty then you have",
    "start": "2376440",
    "end": "2383119"
  },
  {
    "text": "the worst results and this is exactly it so uh I tested here a bit this is the",
    "start": "2383119",
    "end": "2393319"
  },
  {
    "text": "the result for the first 100 invocations and this is the result and I only took",
    "start": "2393319",
    "end": "2401440"
  },
  {
    "text": "the last 50 of them so the first 50 I omitted so I just already",
    "start": "2401440",
    "end": "2407079"
  },
  {
    "text": "had 500 50 cold starts and from then on I started to measure it so you see here",
    "start": "2407079",
    "end": "2415280"
  },
  {
    "text": "snap without priming and here snap start without priming last 50 so you see that",
    "start": "2415280",
    "end": "2422599"
  },
  {
    "text": "it's going down so basically and the same Is Here Yeah if you have priming",
    "start": "2422599",
    "end": "2427800"
  },
  {
    "text": "the first 100 and here this is kind of the last 5 50 from the this first 100 so",
    "start": "2427800",
    "end": "2434480"
  },
  {
    "text": "you see that you are getting better results and that's important because in the beginning you can say okay this are",
    "start": "2434480",
    "end": "2440520"
  },
  {
    "text": "quite High values that you are still showing but in the end after several slow in slower invocations even with AWS",
    "start": "2440520",
    "end": "2448119"
  },
  {
    "text": "snapart you are getting better results so the last 50 you are seeing that P90 is is below 1 second with priming yeah",
    "start": "2448119",
    "end": "2456640"
  },
  {
    "text": "and here um it's still a bit lower than 2 seconds so if you have priming then you can go",
    "start": "2456640",
    "end": "2463119"
  },
  {
    "text": "down below 100 milliseconds so my investigation showed that um you will",
    "start": "2463119",
    "end": "2468800"
  },
  {
    "text": "have the consistent best performance more or less after 15 50 call starts then the cach is more or",
    "start": "2468800",
    "end": "2474240"
  },
  {
    "text": "less there and I also tested them the next day to see what parts of the cach",
    "start": "2474240",
    "end": "2479520"
  },
  {
    "text": "can be removed I had still very good results so don't be discouraged if you measure something with snapart and see",
    "start": "2479520",
    "end": "2485560"
  },
  {
    "text": "bigger results continue measuring you will see this Improvement of this of of",
    "start": "2485560",
    "end": "2491200"
  },
  {
    "text": "uh of this cach so we have eight minutes of time I just wanted only to briefly",
    "start": "2491200",
    "end": "2496560"
  },
  {
    "start": "2493000",
    "end": "2690000"
  },
  {
    "text": "talk about graalvm Native image I think everybody should know what it is and the most important thing is this",
    "start": "2496560",
    "end": "2502680"
  },
  {
    "text": "grvm compiler yeah this is a head of time compiler what we are interested in because with a head of time compiler you",
    "start": "2502680",
    "end": "2509680"
  },
  {
    "text": "pre-compile everything together yeah so what you are requiring reachable methods fields and classes and then you provide",
    "start": "2509680",
    "end": "2517079"
  },
  {
    "text": "the the meshing uh yeah the binary of operating system and grm supports all",
    "start": "2517079",
    "end": "2523640"
  },
  {
    "text": "operating system it gives you the choice iot or just in time compiler but it's known that the head of time compilation",
    "start": "2523640",
    "end": "2529680"
  },
  {
    "text": "is optimized for start speed low memory footprint and small packaging which are the the properties of the serverless",
    "start": "2529680",
    "end": "2536480"
  },
  {
    "text": "yeah so it's worth exploring and of course it can reduce the cold start time",
    "start": "2536480",
    "end": "2541559"
  },
  {
    "text": "because it's only there what's required and the second thing it reduces memory footprint because it's pre-compiled for",
    "start": "2541559",
    "end": "2546960"
  },
  {
    "text": "your native use case the situation is AWS doesn't provide any gral manage native image so",
    "start": "2546960",
    "end": "2554240"
  },
  {
    "text": "there is nothing to choose but what they do they provide custom runtime as a deployment option of the Lambda function",
    "start": "2554240",
    "end": "2561200"
  },
  {
    "text": "and with that what you can do is to package the zip that you need to provide with a file basically named bootstrap",
    "start": "2561200",
    "end": "2568720"
  },
  {
    "text": "and if you produce the grm native image and name it to bootstrap you can deploy",
    "start": "2568720",
    "end": "2574160"
  },
  {
    "text": "it and then the grm native image becomes more or less now we see that gvm release changed so",
    "start": "2574160",
    "end": "2581760"
  },
  {
    "text": "previously they supported long-term releases but now they support each release so if you see openg GDK release",
    "start": "2581760",
    "end": "2586800"
  },
  {
    "text": "they release as well and they contributed now to the community so there is no Enterprise addition so",
    "start": "2586800",
    "end": "2593480"
  },
  {
    "text": "basically uh grvm cycle is mered to open GDK cycle",
    "start": "2593480",
    "end": "2600359"
  },
  {
    "text": "so now let's see what graalvm gives us the graalvm native image for the cold start this is the what I added Gra",
    "start": "2600359",
    "end": "2607280"
  },
  {
    "text": "native image performance yeah you see half of the second by far the best",
    "start": "2607280",
    "end": "2613240"
  },
  {
    "text": "results but please remember here the caching also will take place so you will have here lower results after the 15",
    "start": "2613240",
    "end": "2621040"
  },
  {
    "text": "vacation but basically the if it's only about the lowering call start as much as",
    "start": "2621040",
    "end": "2627079"
  },
  {
    "text": "possible gr native image produces the best result and um here is the warm",
    "start": "2627079",
    "end": "2634440"
  },
  {
    "text": "starts with gr gram native image also sometimes lower so but they are",
    "start": "2634440",
    "end": "2640079"
  },
  {
    "text": "comparable we are talking about milliseconds here but the maximal values",
    "start": "2640079",
    "end": "2645319"
  },
  {
    "text": "here this P99 and Max are also very low with grow VM so you don't have these outliers that are",
    "start": "2645319",
    "end": "2652119"
  },
  {
    "text": "huge I also tested one more thing with grwm just giving different memory settings",
    "start": "2652119",
    "end": "2659920"
  },
  {
    "text": "and it's only that call start for grow and just you see first of all tested",
    "start": "2659920",
    "end": "2665079"
  },
  {
    "text": "with 1 gab but you see you have compar results with lower memory and it's the cost Factor so you can go with gra",
    "start": "2665079",
    "end": "2671800"
  },
  {
    "text": "netive image with lower memory and save cost so this is this are the worm starts",
    "start": "2671800",
    "end": "2678319"
  },
  {
    "text": "also very comparable for lower memory uh and this is also the max values of the",
    "start": "2678319",
    "end": "2684040"
  },
  {
    "text": "MP 99.9 max value so you can go with that as well basically yeah this more or",
    "start": "2684040",
    "end": "2691640"
  },
  {
    "start": "2690000",
    "end": "2931000"
  },
  {
    "text": "less my conclusion grm is really powerful yeah it's for free in terms of doesn't cost you simply just can use",
    "start": "2691640",
    "end": "2698520"
  },
  {
    "text": "grow VM uh but it has challenges for example AWS Lambda runtime requires only",
    "start": "2698520",
    "end": "2704599"
  },
  {
    "text": "Linux executables yeah grm supports Mac and windows but if you to in order to",
    "start": "2704599",
    "end": "2710040"
  },
  {
    "text": "deploy it an AWS you need to produce Linux executables or the people having Windows and Mac uh cannot do it on the",
    "start": "2710040",
    "end": "2717640"
  },
  {
    "text": "local machines and of course the whole it's about you will probably have",
    "start": "2717640",
    "end": "2723440"
  },
  {
    "text": "heavy load on your cicd yeah stuff because requires 6 to 10 GB of memory to",
    "start": "2723440",
    "end": "2730760"
  },
  {
    "text": "to to build native image and you have sometimes many functions in parallel",
    "start": "2730760",
    "end": "2735880"
  },
  {
    "text": "that needs to be built as a native image so it's then about how to scale cicd you",
    "start": "2735880",
    "end": "2741400"
  },
  {
    "text": "can use manage service and then it will be scale for you but it will be factor of cost to build that snap start is for",
    "start": "2741400",
    "end": "2747520"
  },
  {
    "text": "you for free you just simply activate an AWS creates the snapshots on your own it's the managed thing here it's up to",
    "start": "2747520",
    "end": "2754160"
  },
  {
    "text": "you how to do this build time is a factor I had the same 2 and a half minutes for building um uh Native image",
    "start": "2754160",
    "end": "2762640"
  },
  {
    "text": "for the same application so they are comparable to deployment time of the snap startart which contains the",
    "start": "2762640",
    "end": "2768240"
  },
  {
    "text": "creating the snapshot so taking the image takes uh more or less the same",
    "start": "2768240",
    "end": "2773319"
  },
  {
    "text": "yeah also you will need to pay for a need phase it's for free for manage Java and AWS Lambda custom runtime isn't but",
    "start": "2773319",
    "end": "2780680"
  },
  {
    "text": "it's not a huge uh price that you will pay of course you need to pay attention to reflection with GR because it's ahead",
    "start": "2780680",
    "end": "2787760"
  },
  {
    "text": "of time compilation you need to put everything that it's required otherwise if there and this needs to the leads to",
    "start": "2787760",
    "end": "2794760"
  },
  {
    "text": "the error in run time if you don't put things together but especially using lambdas there is a lot of reflection",
    "start": "2794760",
    "end": "2800920"
  },
  {
    "text": "happening for example the Lambda function itself will be initialized by reflection",
    "start": "2800920",
    "end": "2806040"
  },
  {
    "text": "and your entities like here the product also so you basically need to generate this Json file and put everything there",
    "start": "2806040",
    "end": "2813480"
  },
  {
    "text": "yeah it's mainly repetitive operation there maybe small but uh things but that's an additional job",
    "start": "2813480",
    "end": "2820640"
  },
  {
    "text": "especially first time if you do it to figure out what you need to put yeah a bit mental load and of course you need",
    "start": "2820640",
    "end": "2826520"
  },
  {
    "text": "to to to look your application should be the whole grm native capable and",
    "start": "2826520",
    "end": "2831839"
  },
  {
    "text": "sometimes we we use other Frameworks like spring and all that stuff and there is this page that the um grvm people",
    "start": "2831839",
    "end": "2840480"
  },
  {
    "text": "publish what is has been tested that there are no reflection or other effects so basically four major Frameworks are",
    "start": "2840480",
    "end": "2848079"
  },
  {
    "text": "safe they are betterle tested yeah with all dependencies but sometimes you use some other open source dependencies on",
    "start": "2848079",
    "end": "2854440"
  },
  {
    "text": "your own and there is no guarantee you don't control it in that version it may work and then in other version they add",
    "start": "2854440",
    "end": "2860040"
  },
  {
    "text": "some reflection and then grm stops working you don't you need them to think what to put and all that stuff so they",
    "start": "2860040",
    "end": "2866400"
  },
  {
    "text": "have the version but it's kind of you need to to test you need to test it that you don't run into the runtime issues",
    "start": "2866400",
    "end": "2872559"
  },
  {
    "text": "it's it's not for free as well yeah so basically this is we can maybe jump over this um this is",
    "start": "2872559",
    "end": "2880720"
  },
  {
    "text": "basically what I wanted to tell you I currently now writing another article series about there are five or six ways",
    "start": "2880720",
    "end": "2888000"
  },
  {
    "text": "how you can deploy spring boot 3 application in AWS Lambda so that the cold STS won't bite you and currently",
    "start": "2888000",
    "end": "2894079"
  },
  {
    "text": "the I think the seventh uh part of this and it will continue probably for",
    "start": "2894079",
    "end": "2899760"
  },
  {
    "text": "several more so this is another way and then I will do the same for micron notic quarkus because they increase the",
    "start": "2899760",
    "end": "2905839"
  },
  {
    "text": "productivity so this is uh this is exactly spring boot series there is also another series about using data API in",
    "start": "2905839",
    "end": "2913720"
  },
  {
    "text": "case you don't use dynamodb but you use for example Aurora serverless so relational serverless database uh you",
    "start": "2913720",
    "end": "2920800"
  },
  {
    "text": "can talk now with data API to it but you have the same issues the call start and",
    "start": "2920800",
    "end": "2926480"
  },
  {
    "text": "so on so these are basically two articles that I'm publishing so maybe why once again I you need to",
    "start": "2926480",
    "end": "2934480"
  },
  {
    "start": "2931000",
    "end": "3072000"
  },
  {
    "text": "remeasure it for example I tested that's a man Java version Java 21 I",
    "start": "2934480",
    "end": "2940720"
  },
  {
    "text": "tested this in the course of the several months but the minor versions changes AWS patches that so there can be some",
    "start": "2940720",
    "end": "2946640"
  },
  {
    "text": "changes on the Java ecosystem and you have a bit different results so just if you will now measure it will be another",
    "start": "2946640",
    "end": "2953160"
  },
  {
    "text": "minor version snap uh snapshot create and restore can also have improvements",
    "start": "2953160",
    "end": "2958480"
  },
  {
    "text": "Yeahs improves us behind the scenes we can have better CST start times because the restore is quite quicker there can",
    "start": "2958480",
    "end": "2964680"
  },
  {
    "text": "be firecracker VM improvements grvm also improvements I tested with graalvm 21",
    "start": "2964680",
    "end": "2970520"
  },
  {
    "text": "there is now gral vm22 because there is a Java 22 so there are things that can be there are still servers behind Lambda",
    "start": "2970520",
    "end": "2977680"
  },
  {
    "text": "yeah so there can be some outliers and there is also Java memory model impact L caches RAM and all this stuff so there",
    "start": "2977680",
    "end": "2984040"
  },
  {
    "text": "can be some changes if you will retest and see some different results I don't expect them to be huge but uh there may",
    "start": "2984040",
    "end": "2992520"
  },
  {
    "text": "be improvements also there but I I wanted to give you some some direction",
    "start": "2992520",
    "end": "2997760"
  },
  {
    "text": "what what are the the the influence factors so I personally if you would like now to compare snap and grvm I",
    "start": "2997760",
    "end": "3004880"
  },
  {
    "text": "personally prefer the easiest possible solution that it's snapart in case I can prime yeah because it's checkbox I don't",
    "start": "3004880",
    "end": "3012160"
  },
  {
    "text": "need to think of reflection cicd stuff but if it's and I can take into account",
    "start": "3012160",
    "end": "3018040"
  },
  {
    "text": "200 milliseconds more of the cold start I'm willing to have that for the Simplicity in case it's about",
    "start": "3018040",
    "end": "3024400"
  },
  {
    "text": "milliseconds for you it's and it's very important then of course check check out gram native image is an amazing piece of",
    "start": "3024400",
    "end": "3030960"
  },
  {
    "text": "technology nothing against it but I'm really huge fan of of of kind of manag",
    "start": "3030960",
    "end": "3036040"
  },
  {
    "text": "stuff just to offload this complexity but everything improves on both sides",
    "start": "3036040",
    "end": "3041119"
  },
  {
    "text": "and it's good to have a choice and that's that's basically it so you see you can now have this normal cold start",
    "start": "3041119",
    "end": "3047319"
  },
  {
    "text": "time something Beyond one second and it happens only 1% of the cases so I think",
    "start": "3047319",
    "end": "3052480"
  },
  {
    "text": "it's it's it's worth doing now yeah and Java has a bright future and there are also changes on the Java platform itself",
    "start": "3052480",
    "end": "3059359"
  },
  {
    "text": "project Laden they that the Java itself how the things are going underneath should be a bit adopted towards sores",
    "start": "3059359",
    "end": "3066760"
  },
  {
    "text": "but it will take years I think yeah but we will see improvements in all possible areas thank you very much",
    "start": "3066760",
    "end": "3076000"
  }
]