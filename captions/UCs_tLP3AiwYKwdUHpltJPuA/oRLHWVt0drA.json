[
  {
    "start": "0",
    "end": "65000"
  },
  {
    "text": "thank you very much good morning let's get this show on the road and talk about spring framework 6 I and ask questions through the app um",
    "start": "12639",
    "end": "20800"
  },
  {
    "text": "just a disclaimer basically um if we don't Implement something like I said everyone to you can't hold us accountable but we're doing our best so",
    "start": "20800",
    "end": "27439"
  },
  {
    "text": "my name is Sam Brandon um I'm American as you probably told my accent uh I live in Europe there I live in Switzerland",
    "start": "27439",
    "end": "32719"
  },
  {
    "text": "been here for over 20 years um I'm a Staff software engineer at VMware and I've been developing Java for 25 years",
    "start": "32719",
    "end": "39440"
  },
  {
    "text": "which is maybe older than some people have been on the planet here um I'm a core committer for the spring framework",
    "start": "39440",
    "end": "46039"
  },
  {
    "text": "started back in 2007 when I took over all of the testing work and I've been um active since then um partially um as an",
    "start": "46039",
    "end": "52800"
  },
  {
    "text": "external contributor but again now in the last couple years as a core contributor working for VMware and I've",
    "start": "52800",
    "end": "58399"
  },
  {
    "text": "been a core committer for um J 5 um my know Janie Jupiter program model since",
    "start": "58399",
    "end": "64439"
  },
  {
    "text": "2015 So today we're here to talk about spring framework 6 which is the the Next",
    "start": "64439",
    "end": "69479"
  },
  {
    "start": "65000",
    "end": "94000"
  },
  {
    "text": "Generation right of spring uh we're going to talk about the Baseline upgrades a little bit about declarative",
    "start": "69479",
    "end": "74640"
  },
  {
    "text": "HP clients and then we'll talk a bit more about spring aot grum native images",
    "start": "74640",
    "end": "79680"
  },
  {
    "text": "and then we'll look towards the future of what's coming in Spring vber 6.1 um with topics like uh project lien on the",
    "start": "79680",
    "end": "85799"
  },
  {
    "text": "horizon virtual threads coming in jd21 and jbm checkpoint",
    "start": "85799",
    "end": "92560"
  },
  {
    "text": "restore so first up um some of the the bigger themes changes to the Java",
    "start": "92560",
    "end": "97680"
  },
  {
    "start": "94000",
    "end": "340000"
  },
  {
    "text": "Baseline in Jakarta so for um the Baseline um Java um Java 8 was the",
    "start": "97680",
    "end": "102840"
  },
  {
    "text": "Baseline for spring five now we jumped up to jdk 17 which is an LTS release um",
    "start": "102840",
    "end": "108520"
  },
  {
    "text": "so with the language we get lots of new features text box switch Expressions uh instance of pattern matching and we",
    "start": "108520",
    "end": "114320"
  },
  {
    "text": "actually use all of these within spring as well and we're happy to be able to use those and happy that you're able to use them as well um for the core",
    "start": "114320",
    "end": "120799"
  },
  {
    "text": "libraries you have new stuff like collection factories uh you can now use records and sealed classes so basically",
    "start": "120799",
    "end": "126560"
  },
  {
    "text": "um we're confident this is a really good Baseline for any mod modern day job application and any modern spring",
    "start": "126560",
    "end": "133560"
  },
  {
    "text": "application next up on the horizon you probably know later this year right jdk 21 is going to come out be the next LTS",
    "start": "133560",
    "end": "139519"
  },
  {
    "text": "release and we're going to get more language features with that so pattern matching for switch record patterns",
    "start": "139519",
    "end": "145000"
  },
  {
    "text": "sequence collections things like that um but of course we're going to get support for virtual threads um in addition some",
    "start": "145000",
    "end": "150840"
  },
  {
    "text": "um performance enhancements with the garbage collection so all of this is already fully supported um and our",
    "start": "150840",
    "end": "156599"
  },
  {
    "text": "snapshots for spring framework 6.1 and you can go ahead and try that stuff out",
    "start": "156599",
    "end": "161879"
  },
  {
    "text": "has anyone tried out jdk 21 curiosity few people all right who's",
    "start": "161879",
    "end": "168440"
  },
  {
    "text": "on Java 8 let's see that no who's on Java 17 most people all right that sounds",
    "start": "168440",
    "end": "175040"
  },
  {
    "text": "good who's actually already using um spring framewor 6 few people",
    "start": "175040",
    "end": "180519"
  },
  {
    "text": "okay so spring be three all right so Jakarta um yeah that's kind of",
    "start": "180519",
    "end": "187239"
  },
  {
    "text": "a a big topic as well um basically means you have to change a lot of your or run some scripts and change your packages so",
    "start": "187239",
    "end": "193959"
  },
  {
    "text": "the Baseline is Jakarta E9 and if you read the last note here says basically it's the same API we had before with",
    "start": "193959",
    "end": "200159"
  },
  {
    "text": "Java E8 but we have a new Nam space so everything was Java X before is now",
    "start": "200159",
    "end": "205480"
  },
  {
    "text": "Jakarta so for Serpa 5 you're going to have Jakarta serlet jpa 3. you're going to have Jakarta persistence be",
    "start": "205480",
    "end": "211879"
  },
  {
    "text": "validation three you're going to have Jakarta validation and you have to keep in mind some other things have changed as well like um the uh add inject",
    "start": "211879",
    "end": "218519"
  },
  {
    "text": "annotations postc construct pre- destroy these other kind of annotations they're also now in the Jakarta Nam space",
    "start": "218519",
    "end": "224280"
  },
  {
    "text": "however for a few of the things um we do actually support um Java X and Jakarta side by side for example with the post",
    "start": "224280",
    "end": "230959"
  },
  {
    "text": "construct annotations we do that but for core things like serlet jpa beam validation you have to make the jump to",
    "start": "230959",
    "end": "238720"
  },
  {
    "text": "Jakarta now that was the Baseline um we actually recommend that you go with Jakari E10 if",
    "start": "238720",
    "end": "245239"
  },
  {
    "text": "you're starting off now with um spring six and the coming upcoming spring 61 um basically that means Ser API 6.0 so",
    "start": "245239",
    "end": "252000"
  },
  {
    "text": "Tomcat 10.1 or or Jetty 12 um but one thing to note about that so we build the framework based on um serot 60 so",
    "start": "252000",
    "end": "259479"
  },
  {
    "text": "everything's based on that but we still have serl 5 compatibility at runtime so if you have some existing code um that's",
    "start": "259479",
    "end": "265639"
  },
  {
    "text": "deploying to a Ser 5 container that should still work um but then another thing to note is in the tests if you're",
    "start": "265639",
    "end": "271000"
  },
  {
    "text": "using mock MVC or any of the the mock requests Ser requests and stuff like that those are based on Ser 60 so you",
    "start": "271000",
    "end": "278000"
  },
  {
    "text": "will have to have that in your class path to compile the test and run the test even if you deploy to a certifi",
    "start": "278000",
    "end": "284000"
  },
  {
    "text": "container next up jpa 31 uh you can use that with hibernate um orm 6.2 and for",
    "start": "284000",
    "end": "289840"
  },
  {
    "text": "bean validation you can use hibernate validator 8.0 so this is actually the default API level for Jakarta e in a",
    "start": "289840",
    "end": "297680"
  },
  {
    "text": "spring boot uh 3 application on the horizon however um Jakarta E11 is",
    "start": "297680",
    "end": "304639"
  },
  {
    "text": "coming up and um somewhat maybe surprisingly uh they hope to have the official minimum requirement of jdk 21",
    "start": "304639",
    "end": "311520"
  },
  {
    "text": "so that'll um May force people to actually use uh jdk 21 even though spring six is based on on um jdk 17 um",
    "start": "311520",
    "end": "319600"
  },
  {
    "text": "but some nice benefits for that right so for Ser API 61 that would mean they can Embrace resal threads there and then you",
    "start": "319600",
    "end": "325759"
  },
  {
    "text": "could also expect that Tomcat 11 would also require um jdk 21 at runtime as well then for for spring um of course",
    "start": "325759",
    "end": "333639"
  },
  {
    "text": "Spring boot there might be an optional upgrade for Tomcat 11 we'll have to see how that plays",
    "start": "333639",
    "end": "340120"
  },
  {
    "start": "340000",
    "end": "396000"
  },
  {
    "text": "out few odds and ends regarding to um class path scanning so in in sixa we did",
    "start": "340120",
    "end": "346120"
  },
  {
    "text": "have um two two major changes kind of behind the scenes you might not notice um but if you've been using um module",
    "start": "346120",
    "end": "351240"
  },
  {
    "text": "path scanning before if you're using Maven Surefire with with tests and have patched modules um it wasn't always",
    "start": "351240",
    "end": "357199"
  },
  {
    "text": "possible to find everything with class B scanning and we've we' added in module path scanning support alongside our",
    "start": "357199",
    "end": "362479"
  },
  {
    "text": "traditional class path scanning support if you're using the class path star star refix colon refix and for file systems",
    "start": "362479",
    "end": "371000"
  },
  {
    "text": "um now we also have custom support for um scanning a custom file system um where that might come into play as if",
    "start": "371000",
    "end": "377199"
  },
  {
    "text": "you're using aot and uh graum Native image if you have some resources in the image and that needs to be scanned we",
    "start": "377199",
    "end": "383360"
  },
  {
    "text": "can also now um scan out of the box uh the native image FES from grm so any",
    "start": "383360",
    "end": "388759"
  },
  {
    "text": "kind of resources that have been stored in the native image itself that aren't in the underlying operating system file",
    "start": "388759",
    "end": "396280"
  },
  {
    "start": "396000",
    "end": "619000"
  },
  {
    "text": "system declarative HTTP clients has anyone ever heard of or used Fain or open Fame few people out there so all",
    "start": "397440",
    "end": "405199"
  },
  {
    "text": "right so basically the idea is that um what you want to have is you don't want to have to write all the code yourself",
    "start": "405199",
    "end": "410800"
  },
  {
    "text": "set up the rest template or set up the the web client and make all the calls yourself you want to just have a declare way and say I have an interface these",
    "start": "410800",
    "end": "417919"
  },
  {
    "text": "are the methods I want to call and please spring when I invoke this method make the call for me on some remote server and take care of all the",
    "start": "417919",
    "end": "424400"
  },
  {
    "text": "marshalling and unmarshaling and all that kind of stuff so this is analogous to um existing projects out there Fain",
    "start": "424400",
    "end": "430280"
  },
  {
    "text": "and and open Fain but without related issues such as um lack of non-blocking support or dependency on third parties",
    "start": "430280",
    "end": "437000"
  },
  {
    "text": "and difficulty to to upgrade and all that kind of stuff um so basically right now we have the infrastructure and",
    "start": "437000",
    "end": "443160"
  },
  {
    "text": "annotations living in cor spring and in Spring web so that you can use it in your spring applications and that's",
    "start": "443160",
    "end": "448759"
  },
  {
    "text": "other parts of port pfolio spring portfolio can also build on that as well the annotations here we see a list",
    "start": "448759",
    "end": "455879"
  },
  {
    "text": "of um basically the core is HTP exchange um because it's basically like a web client exchange as you want to think",
    "start": "455879",
    "end": "462360"
  },
  {
    "text": "about it like you're contacting the other um server but you're writing the actual client and then we have um",
    "start": "462360",
    "end": "468520"
  },
  {
    "text": "specializations of that so we have Post Exchange get exchange delete exchange Etc and these are analogous to what we",
    "start": "468520",
    "end": "474520"
  },
  {
    "text": "have in uh spring MVC right so we have request mapping and post mapping but we don't use those because those are",
    "start": "474520",
    "end": "479560"
  },
  {
    "text": "specific to the server and these new annotations are specific to writing um a client",
    "start": "479560",
    "end": "485680"
  },
  {
    "text": "API in terms of the um arguments uh they can accept uh you can also use a lot of",
    "start": "485680",
    "end": "491560"
  },
  {
    "text": "the annotations we already have for spring MVC that you might be familiar with things like request header um path variable request body um cookie value",
    "start": "491560",
    "end": "498960"
  },
  {
    "text": "and things like that so there's some similarity but it's focused on on writing the client API to an external",
    "start": "498960",
    "end": "505159"
  },
  {
    "text": "HTP service and then in the end pulling that all together there's an H P service",
    "start": "505159",
    "end": "510240"
  },
  {
    "text": "proxy Factory that's going to actually create the proxies for you implements your interface and um make all the",
    "start": "510240",
    "end": "516560"
  },
  {
    "text": "connections for you we'll see an example of how that works so here we have an interface",
    "start": "516560",
    "end": "522919"
  },
  {
    "text": "straightforward right not extending anything else uh public interface verification service it defines the",
    "start": "522919",
    "end": "528120"
  },
  {
    "text": "method verify when we invoke this verify method and pass it a customer application we want spring to",
    "start": "528120",
    "end": "534320"
  },
  {
    "text": "automatically um convert that into maybe Json or XML send that as a post request",
    "start": "534320",
    "end": "539880"
  },
  {
    "text": "to verify on the server we've configured and then when response comes back we want that to be um converted the",
    "start": "539880",
    "end": "545959"
  },
  {
    "text": "response body converted back into a customer verification result and then hand that back to us in this example we",
    "start": "545959",
    "end": "551600"
  },
  {
    "text": "see that it's a a blocking call um we can convert that to a reactive call by using mono here from Project",
    "start": "551600",
    "end": "558480"
  },
  {
    "text": "reactor and in addition if we need to um interact with the the response status headers and body and things like that we",
    "start": "558480",
    "end": "564600"
  },
  {
    "text": "could wrap that in in a response entity now putting it all together um",
    "start": "564600",
    "end": "569920"
  },
  {
    "text": "here we see at the bottom we have a bean HP service proxy Factory we're using the web client creating it based on some",
    "start": "569920",
    "end": "576120"
  },
  {
    "text": "base URL we've connect uh configured for our remote service we're going to use the web client adapter and pass that",
    "start": "576120",
    "end": "582160"
  },
  {
    "text": "into the HP service proxy Factory and return that and then anytime we want an actual Bean one of these one of these",
    "start": "582160",
    "end": "589279"
  },
  {
    "text": "clients um we can use that factory to create the client passing in the interface and it will then process all",
    "start": "589279",
    "end": "594320"
  },
  {
    "text": "the annotations and everything there and create the um the proxy force and all the on infrastructure behind that um and",
    "start": "594320",
    "end": "601160"
  },
  {
    "text": "you could of course just return this as a bean right this verification service that could be another at Bean",
    "start": "601160",
    "end": "607320"
  },
  {
    "text": "method that's about it bit of magic but it really simplifies your code and keeps",
    "start": "607320",
    "end": "613800"
  },
  {
    "text": "you from having to write all of the uh web client adaptation code",
    "start": "613800",
    "end": "619200"
  },
  {
    "start": "619000",
    "end": "1014000"
  },
  {
    "text": "yourself so ahead of time who has ever use um graum Native image deployments",
    "start": "619200",
    "end": "626880"
  },
  {
    "text": "few people who's ever heard of ahead of time spring a few people all right so we'll dive in a bit more so when we talk",
    "start": "626880",
    "end": "632720"
  },
  {
    "text": "about ahead of time what we mean is anything you do before runtime so basically during the build some kind of",
    "start": "632720",
    "end": "638760"
  },
  {
    "text": "processing we can do um with spring what we do is we analyze um your application so we get it up to a point right before",
    "start": "638760",
    "end": "646000"
  },
  {
    "text": "we create all the beans so we have all of the metadata for all of the beans in your application the configuration um",
    "start": "646000",
    "end": "651760"
  },
  {
    "text": "profiles and stuff like that and then we're going to uh basically generate",
    "start": "651760",
    "end": "656839"
  },
  {
    "text": "code on the scene uh behind the scenes on the fly so we use Java PO for that and we basically take all of your",
    "start": "656839",
    "end": "663040"
  },
  {
    "text": "annotation based configuration or XML based configuration if you still have that and we put it um we convert it into",
    "start": "663040",
    "end": "668760"
  },
  {
    "text": "like basically a functional version of that and you can actually view the code uh we generate that code during the",
    "start": "668760",
    "end": "674000"
  },
  {
    "text": "build process and then compile that and then later on when you start up running an aot mode either on the jvm or in a",
    "start": "674000",
    "end": "680079"
  },
  {
    "text": "native image instead of going through all your your conation classes and find your bean methods it just invokes this",
    "start": "680079",
    "end": "685600"
  },
  {
    "text": "this functional code that creates your beans for you that's the the basis behind it so in Spring uh the goal",
    "start": "685600",
    "end": "693120"
  },
  {
    "text": "really is to reduce uh startup time and the memory footprint and in production and for Native support um in addition to",
    "start": "693120",
    "end": "700279"
  },
  {
    "text": "creating all of that uh that code for your your your beans and the metadon and all that we also generate runtime hints",
    "start": "700279",
    "end": "706880"
  },
  {
    "text": "um that's necessary for grum native image in order to be able to use things like reflection uh resources like class",
    "start": "706880",
    "end": "712760"
  },
  {
    "text": "path resources sterilization to generate proxies and stuff like that uh we generate that if we don't generate it",
    "start": "712760",
    "end": "719240"
  },
  {
    "text": "for you we have ways for you to generate that yourself and you can check out the documentation on that um in general uh",
    "start": "719240",
    "end": "725440"
  },
  {
    "text": "you could do this as I mentioned for optipy uh jvm deployment using spring aot for a little faster startup but it's",
    "start": "725440",
    "end": "731360"
  },
  {
    "text": "a precondition for running within a grvm native executable so all the core",
    "start": "731360",
    "end": "737120"
  },
  {
    "text": "infrastructure is is baked into spring framework six and it's depended on by the rest of the portfolio and then in",
    "start": "737120",
    "end": "743920"
  },
  {
    "text": "Spring boot uh three you have the build Tools in there as well that know how to run the aot processing uh during your",
    "start": "743920",
    "end": "750519"
  },
  {
    "text": "build phase and also how to build the native images for grvm in addition last but not least you",
    "start": "750519",
    "end": "757360"
  },
  {
    "text": "can of course test that's uh something I focus on as a junit committer and a COR",
    "start": "757360",
    "end": "763079"
  },
  {
    "text": "spring uh testing committer so you can test within a native image we have um a nice collaboration with the um uh",
    "start": "763079",
    "end": "770440"
  },
  {
    "text": "Micronaut team and the Oracle Labs team and the spring team uh building on Native build tools that's an open source",
    "start": "770440",
    "end": "776560"
  },
  {
    "text": "set of tools for uh Maven and and Gradle and we use that and then also we have support in there for running all your",
    "start": "776560",
    "end": "783079"
  },
  {
    "text": "tests in a native image so what it'll do you have your jet tests like J 4 or J and Jupiter and it's going to actually",
    "start": "783079",
    "end": "789800"
  },
  {
    "text": "uh run them once figure out everything you wanted to run on the jvm then it's going to uh compile a native image with",
    "start": "789800",
    "end": "795760"
  },
  {
    "text": "all your tests in there and with junit platform in there and it's going to run all your tests inside the native image",
    "start": "795760",
    "end": "801800"
  },
  {
    "text": "that gives you at least some some um a good feeling about whether or not your code is going to work when you deploy it",
    "start": "801800",
    "end": "807519"
  },
  {
    "text": "so it's really nice to be able to do that um but a note on that the the build for Native image can take quite a long",
    "start": "807519",
    "end": "813480"
  },
  {
    "text": "time the same for the tests uh once you actually have compiled into native image the tests run fast but it takes a while",
    "start": "813480",
    "end": "819760"
  },
  {
    "text": "to build those image so see this note here at the bottom that aot um is a trade-off um it's an extra build step",
    "start": "819760",
    "end": "826040"
  },
  {
    "text": "and you have less flexibility at runtime so again everything's going to be pre-computed um based on when you when",
    "start": "826040",
    "end": "832000"
  },
  {
    "text": "you built your application and a bit less Dynamic than a normal spring application would be grow vum native image that's the",
    "start": "832000",
    "end": "839199"
  },
  {
    "text": "facto standard in the Java Community right now for creating a native executable so targeted for a particular",
    "start": "839199",
    "end": "845680"
  },
  {
    "text": "architecture um it has a very strong what we call a closed World assumption that means that once it's built it's",
    "start": "845680",
    "end": "852120"
  },
  {
    "text": "built you can't dynamically load classes you can't um dynamically compile things and stuff like that you don't have any",
    "start": "852120",
    "end": "858560"
  },
  {
    "text": "kind of runtime adaptations it's really an executable like anything else like someone gives an execut this one runs on",
    "start": "858560",
    "end": "863759"
  },
  {
    "text": "Windows this runs on Linux this runs on Mac OS things like that so the aot stuff",
    "start": "863759",
    "end": "869360"
  },
  {
    "text": "that's all processed that serves as input into the native executable and again you will have very long build",
    "start": "869360",
    "end": "876320"
  },
  {
    "text": "times um compared to what you're used to so normally if your build might take like uh 20 seconds and Java it might",
    "start": "876320",
    "end": "882199"
  },
  {
    "text": "take 3 minutes 5 minutes 10 minutes to build a na native image depending on how complex it is how many dependencies you",
    "start": "882199",
    "end": "888880"
  },
  {
    "text": "have Etc so that's one they when to keep in mind um typically with a native image stuff you might do it sometimes uh build",
    "start": "888880",
    "end": "895440"
  },
  {
    "text": "it sometimes locally on your machine um but you're probably going to have that in a CI pipeline so that you're not waiting on that and dealing with that on",
    "start": "895440",
    "end": "902399"
  },
  {
    "text": "a constant basis and it's definitely not something that you're going to have in your um your daily workflow you're not going to be building a native image and",
    "start": "902399",
    "end": "908959"
  },
  {
    "text": "testing it repeatedly right you're still going to write your code in jvm Java run your test in jvm and your IDE local",
    "start": "908959",
    "end": "915240"
  },
  {
    "text": "build in jvm and then every now and then uh build for for native in testin Native so it's a very different mode of",
    "start": "915240",
    "end": "922360"
  },
  {
    "text": "deployment but it also has very strong benefits as well as some limitations so",
    "start": "922360",
    "end": "927560"
  },
  {
    "text": "with Native image you're going to have smaller Footprints super fast startup time it's really great for uh cloud",
    "start": "927560",
    "end": "933040"
  },
  {
    "text": "deployments and things like that project Leiden who's heard of that",
    "start": "933040",
    "end": "939920"
  },
  {
    "text": "anyone no okay interesting um here's a link to the to the project page basically this is um a movement that's",
    "start": "939920",
    "end": "946639"
  },
  {
    "text": "been um pushed within the open jdk to uh introduce what they want to call",
    "start": "946639",
    "end": "951759"
  },
  {
    "text": "well-defined static images and it's inspired by the popularity of of grvm in",
    "start": "951759",
    "end": "957040"
  },
  {
    "text": "recent years um but they want to take a more gradual approach so what they want to do is they want to start off with",
    "start": "957040",
    "end": "962920"
  },
  {
    "text": "some weaker constraints limiting what can be done like maybe limiting the reflection maybe limiting Dynamic class",
    "start": "962920",
    "end": "968880"
  },
  {
    "text": "loading things like that um and then they want to have more runtime flexibility to start and then in the end",
    "start": "968880",
    "end": "975160"
  },
  {
    "text": "they want to basically see if they can get as far as something like like grow VM native images but it's going to be a",
    "start": "975160",
    "end": "980279"
  },
  {
    "text": "gradual process over many years um allowing you to have some of the benefits of a native image style static",
    "start": "980279",
    "end": "986920"
  },
  {
    "text": "image deployment um within the JV itself within a normal JM deployment and for spring that works out nicely for us",
    "start": "986920",
    "end": "993480"
  },
  {
    "text": "because our aot strategy aligns nicely with lien's jvm strategy so as I",
    "start": "993480",
    "end": "998720"
  },
  {
    "text": "mentioned you can use spring OT in a native image but you can also use on the jvm and this will probably work out",
    "start": "998720",
    "end": "1003880"
  },
  {
    "text": "nicely with Liden and uh we'll keep up with Li and see where they're going see if we have to make any changes in spring",
    "start": "1003880",
    "end": "1009240"
  },
  {
    "text": "in order to make the best of that as well virtual threads has anyone played",
    "start": "1009240",
    "end": "1017399"
  },
  {
    "start": "1014000",
    "end": "1382000"
  },
  {
    "text": "with virtual threads yeah anyone else interested or thinking",
    "start": "1017399",
    "end": "1022440"
  },
  {
    "text": "about it okay a lot of people is anyone using um reactive programming currently spring web flux or anything like that",
    "start": "1022440",
    "end": "1028918"
  },
  {
    "text": "few people okay so projects Loom right um virtual",
    "start": "1028919",
    "end": "1034400"
  },
  {
    "text": "threads were um previewed in in jdk9 u the goal is to have a lightweight threading model within the jvm itself um",
    "start": "1034400",
    "end": "1040918"
  },
  {
    "text": "designed as a virtual variant of the existing uh Java length thread so they won't have to change too much of our",
    "start": "1040919",
    "end": "1046120"
  },
  {
    "text": "code and the main goal is really to give us uh better scalability in an imperative programming model instead of",
    "start": "1046120",
    "end": "1052000"
  },
  {
    "text": "having to switch to a reactive programming model so um basically you",
    "start": "1052000",
    "end": "1057760"
  },
  {
    "text": "don't want to be blocking any operating system threads when we're doing IO operations now jdk 21 again that's",
    "start": "1057760",
    "end": "1064679"
  },
  {
    "text": "coming out later this year that brings virtual threads out of preview is going to be a core feature um in the jvm even",
    "start": "1064679",
    "end": "1071679"
  },
  {
    "text": "part of an LTS release so that's good news for all of us um now there's a new Builder API on on jav thread in order to",
    "start": "1071679",
    "end": "1077799"
  },
  {
    "text": "get a virtual thread and there's also some new executor service um variants as well basically this should give us",
    "start": "1077799",
    "end": "1083840"
  },
  {
    "text": "ideally seamless operability interoperability with our existing code um and we basically avoid",
    "start": "1083840",
    "end": "1089840"
  },
  {
    "text": "synchronization around any IO operations now in terms of spring um we had the",
    "start": "1089840",
    "end": "1095840"
  },
  {
    "text": "simple async task executor for a long time now it has a new flag you can say",
    "start": "1095840",
    "end": "1100919"
  },
  {
    "text": "set virtual threads true and that will switch it to using virtual threads behind the scenes so if you already have",
    "start": "1100919",
    "end": "1106159"
  },
  {
    "text": "that configured in use you can just turn on Virtual thread are EAS like that um however we do have a new variant um of",
    "start": "1106159",
    "end": "1113000"
  },
  {
    "text": "task executor that's specific to Virtual threads and you can use that one if you want as well so one of the nice things",
    "start": "1113000",
    "end": "1119159"
  },
  {
    "text": "about spring um a lot of places you just have to specify a task executor and it's your choice which kind you configure so",
    "start": "1119159",
    "end": "1125360"
  },
  {
    "text": "in the past or currently you might be using the simple async one um but now you can just switch to a virtual one",
    "start": "1125360",
    "end": "1130840"
  },
  {
    "text": "basically in your configuration without changing any of your other code and the virtual threads should just be used transparently behind the",
    "start": "1130840",
    "end": "1137720"
  },
  {
    "text": "scenes and you can configure things differently right you can configure um a task executor for for messaging one for",
    "start": "1137720",
    "end": "1143600"
  },
  {
    "text": "scheduling you can decide which ones use Virtual threads which ones don't",
    "start": "1143600",
    "end": "1149120"
  },
  {
    "text": "Etc terms of spring MVC applications um so for Tom Cat and Jetty you have to set",
    "start": "1149120",
    "end": "1154880"
  },
  {
    "text": "up the executor for virtual threads um there's some blogs out there on how to do that and um those projects will be",
    "start": "1154880",
    "end": "1161120"
  },
  {
    "text": "making it easier as they move on to or integrate official support for um for",
    "start": "1161120",
    "end": "1166880"
  },
  {
    "text": "virtual threads but in the instrum we have a Blog on the a post on the spring blog about how to do that for for Tomcat",
    "start": "1166880",
    "end": "1173000"
  },
  {
    "text": "if you're interested in seeing how to do that with a spring application uh spring beot application now for um database",
    "start": "1173000",
    "end": "1178880"
  },
  {
    "text": "drivers you going have to make sure um you have the latest and greatest that support uh virtual threads and in Spring",
    "start": "1178880",
    "end": "1185960"
  },
  {
    "text": "boot 3.2 there should hopefully be some um first class uh support for turning on",
    "start": "1185960",
    "end": "1191679"
  },
  {
    "text": "Virtual threads where spring Bo can take care of it in in the places that you need it but that's still on the horizon",
    "start": "1191679",
    "end": "1197880"
  },
  {
    "text": "for for the next couple of months this year so ideally right we shouldn't have to make any um changes in our actual",
    "start": "1197880",
    "end": "1204600"
  },
  {
    "text": "code base right so we just change how our service set up how spring set up for scheduling and things like that and we",
    "start": "1204600",
    "end": "1211039"
  },
  {
    "text": "can basally switch from uh standard threads to to Virtual threads terms of spring web flug that's",
    "start": "1211039",
    "end": "1218039"
  },
  {
    "text": "the reactive support in web in Spring um basically you have scalability through reactive programming model with stream",
    "start": "1218039",
    "end": "1224840"
  },
  {
    "text": "based access um with back press back pressure enabled drivers so this is going to be very um efficient",
    "start": "1224840",
    "end": "1231000"
  },
  {
    "text": "in general right if you want um non-blocking support but you can also potentially um have some block and user",
    "start": "1231000",
    "end": "1237840"
  },
  {
    "text": "tasks that are running on Virtual threads so you can actually combine reactive programming with um some some",
    "start": "1237840",
    "end": "1244559"
  },
  {
    "text": "tasks that run on Virtual threads at the same time for MVC on reactive programming",
    "start": "1244559",
    "end": "1252200"
  },
  {
    "text": "that's actually um been there for a while some people have um not realized that so spring EVC actually understands",
    "start": "1252200",
    "end": "1258720"
  },
  {
    "text": "reactive turn types as in addition to the standard return types so for example um you could have reactive data store",
    "start": "1258720",
    "end": "1265320"
  },
  {
    "text": "access only for specific web in points and sping will look at um the presence",
    "start": "1265320",
    "end": "1270600"
  },
  {
    "text": "of a reactor on the class path to see if it's there and see if it can handle any reactive um web in points based on the",
    "start": "1270600",
    "end": "1276679"
  },
  {
    "text": "return types getting like a mono or flux back so basically that means that um this is a nice combination right with",
    "start": "1276679",
    "end": "1283480"
  },
  {
    "text": "the virtual thread power and the reactive options at the same time with Spin and spring EVC so you have the",
    "start": "1283480",
    "end": "1289000"
  },
  {
    "text": "option to use reactive types in Shing web flux and also have support for viral threads and in Spring VC you can have",
    "start": "1289000",
    "end": "1295840"
  },
  {
    "text": "the Standard Spring MC model with reactive programming or combine that with virtual thread support as",
    "start": "1295840",
    "end": "1302480"
  },
  {
    "text": "well so in general the benefits uh we hope right we get higher scalability for",
    "start": "1302480",
    "end": "1307679"
  },
  {
    "text": "our existing applications just by turning on these switches um however it might not be the case it ends up better but uh maybe we get the same scalability",
    "start": "1307679",
    "end": "1315120"
  },
  {
    "text": "but um smaller footprint so that's still a benefit for that and then we're of course going to have um benefits for our",
    "start": "1315120",
    "end": "1321559"
  },
  {
    "text": "jdbc JD uh jpa database interactions and also um anyone still use a rest",
    "start": "1321559",
    "end": "1330279"
  },
  {
    "text": "template few people anyone use web client not so much all right so rest",
    "start": "1330279",
    "end": "1336200"
  },
  {
    "text": "template has has been around for many years right and web client is the reactive kind of um brother or sister to",
    "start": "1336200",
    "end": "1342400"
  },
  {
    "text": "that sibling and um when we talk about virtual threads it's also a good good fit for HTP interaction",
    "start": "1342400",
    "end": "1349039"
  },
  {
    "text": "with the rest template if you're still using that so you can um basically switch to Virtual threads and get some",
    "start": "1349039",
    "end": "1354120"
  },
  {
    "text": "higher higher throughput for rest template usage for your clients so we recommend and I hope and",
    "start": "1354120",
    "end": "1361039"
  },
  {
    "text": "encourage that you'll um check it out take it for a spin um 6.1 uh mous outs",
    "start": "1361039",
    "end": "1367520"
  },
  {
    "text": "uh milon for uh spring and then try that with your web apps let us know if you switch to Virtual threads if you're",
    "start": "1367520",
    "end": "1373919"
  },
  {
    "text": "seeing improvements or if you run into any issues please let us know and report them and we will see how we can address",
    "start": "1373919",
    "end": "1381399"
  },
  {
    "text": "those jvm checkpoint restore who has heard of Project Crack anyone a few",
    "start": "1381799",
    "end": "1388960"
  },
  {
    "start": "1382000",
    "end": "1683000"
  },
  {
    "text": "people okay so this is something a new",
    "start": "1388960",
    "end": "1394679"
  },
  {
    "text": "development in the community in um recent years some research on that basically",
    "start": "1394679",
    "end": "1401760"
  },
  {
    "text": "there's this new um project called Project Crack crack stands for coordinated resore at a checkpoint so",
    "start": "1401760",
    "end": "1408039"
  },
  {
    "text": "it's basically you take like a snapshot of your application on the jvm you save that out to an image and then later on",
    "start": "1408039",
    "end": "1414400"
  },
  {
    "text": "you can start it up right where it left off so basically ideas yeah",
    "start": "1414400",
    "end": "1419640"
  },
  {
    "text": "bootstrapping from a warmed up hotspot jvm image um this thing was originally developed by aul for um open jdk on on",
    "start": "1419640",
    "end": "1427559"
  },
  {
    "text": "Linux and then adopted by Amazon you might have heard of um Amazon AWS Lambda",
    "start": "1427559",
    "end": "1432640"
  },
  {
    "text": "snapshot similar approach there and that's something we're also looking into",
    "start": "1432640",
    "end": "1437840"
  },
  {
    "text": "for uh 6.1 now the requirements what happens is",
    "start": "1437840",
    "end": "1442960"
  },
  {
    "text": "at this checkpoint one point you have to basically pause the application you have to make sure you don't have any open",
    "start": "1442960",
    "end": "1448120"
  },
  {
    "text": "network connections no open file handles um you have to make sure your spring be spring beans are are stopped basically",
    "start": "1448120",
    "end": "1454559"
  },
  {
    "text": "not trying to process something and then at restore time you want to reestablish all those connections those listeners",
    "start": "1454559",
    "end": "1461480"
  },
  {
    "text": "restart those those beans Etc now in Spring we actually already",
    "start": "1461480",
    "end": "1466640"
  },
  {
    "text": "have support in uh the milestone for springf 6.1 M1 you can already check it",
    "start": "1466640",
    "end": "1472000"
  },
  {
    "text": "out we also have some document documentation online you can read up more on that how to how to configure it",
    "start": "1472000",
    "end": "1477760"
  },
  {
    "text": "um when to start or when to take the checkpoint um so basically there's going to support for a",
    "start": "1477760",
    "end": "1483880"
  },
  {
    "text": "custom checkpoint after the application has started up so after your spring application has started after the",
    "start": "1483880",
    "end": "1489640"
  },
  {
    "text": "application application Contex has started all the beans are are running you can say take a snapshot right",
    "start": "1489640",
    "end": "1497080"
  },
  {
    "text": "then and then the application Contex will get these uh checkpoint restore",
    "start": "1497080",
    "end": "1502640"
  },
  {
    "text": "notifications and then it will propagate those uh either the stop signal or the restart signal to all of the",
    "start": "1502640",
    "end": "1508440"
  },
  {
    "text": "participating beans it turns out it works out very nicely in spring we've had this life cycle um interface for for",
    "start": "1508440",
    "end": "1515039"
  },
  {
    "text": "many years so if you have any beans of your own that Implement a life cycle they will be told to stop at the right",
    "start": "1515039",
    "end": "1520640"
  },
  {
    "text": "point and told to start at the same point but that also holds true for um lots of the beans in Spring itself like",
    "start": "1520640",
    "end": "1527120"
  },
  {
    "text": "the the message list message listener containers and things like that that already participate in the life cycle",
    "start": "1527120",
    "end": "1534640"
  },
  {
    "text": "management yes for example the first one here so what happens when life cycle.",
    "start": "1534640",
    "end": "1540720"
  },
  {
    "text": "stop is invoked you should stop all of your asynchronous processing make sure you close your your connections uh",
    "start": "1540720",
    "end": "1547000"
  },
  {
    "text": "closing file handles and things like that but you want to keep your state intact in terms of like the the state of",
    "start": "1547000",
    "end": "1553120"
  },
  {
    "text": "your components like any kind of fields they have and things like that because they're really just going to get paused",
    "start": "1553120",
    "end": "1558360"
  },
  {
    "text": "and then there's going to be a snapshot they're going to be stored to an image and they're going to be brought back to life so to speak so when we talk about",
    "start": "1558360",
    "end": "1564679"
  },
  {
    "text": "this um stop is not equal to the destroy call because the destroy call means get",
    "start": "1564679",
    "end": "1569840"
  },
  {
    "text": "rid of it and clean up everything as if the object is going to go away and the application is going to stop completely",
    "start": "1569840",
    "end": "1575320"
  },
  {
    "text": "right this is different we're just going to pause in the middle then uh you need yeah you need to be able to restart one",
    "start": "1575320",
    "end": "1581760"
  },
  {
    "text": "slide cycle start is invoked and then the other point is um when you do have a destroy call that follows the stop call",
    "start": "1581760",
    "end": "1589080"
  },
  {
    "text": "then you should actually uh shut down",
    "start": "1589080",
    "end": "1593158"
  },
  {
    "text": "completely so some common spring UPS um working out of the box um standard life",
    "start": "1596559",
    "end": "1603039"
  },
  {
    "text": "cycle coordination uh through the framework itself um embedded tomcat and Jetty in a spring boot application those",
    "start": "1603039",
    "end": "1609919"
  },
  {
    "text": "can participate in the the Stop and restart um callbacks from from the crack support there and spring boot 3.2 um",
    "start": "1609919",
    "end": "1617240"
  },
  {
    "text": "will hopefully be able to support some common checkpoint choices so um for example one could be uh right after uh",
    "start": "1617240",
    "end": "1624360"
  },
  {
    "text": "start up the application before any requests of coming or something like that um another idea would be to have",
    "start": "1624360",
    "end": "1629480"
  },
  {
    "text": "custom checkpoints where you say after after some timeout um some period of time maybe after five minutes take a",
    "start": "1629480",
    "end": "1635399"
  },
  {
    "text": "snapshot then or maybe there'll be some some way um I'm just thinking out of the box they might have some kind of um",
    "start": "1635399",
    "end": "1642000"
  },
  {
    "text": "management endpoint we could say take the snapshot now um so after a certain point you can decide that for yourself",
    "start": "1642000",
    "end": "1647520"
  },
  {
    "text": "the image will be stored uh you tell it to where it's going to be stored and then you could restart it later so",
    "start": "1647520",
    "end": "1652840"
  },
  {
    "text": "ideally um similar to with virtual threads uh we hopefully shouldn't have to make any changes to our own um",
    "start": "1652840",
    "end": "1658960"
  },
  {
    "text": "application codebase unless you have something that's dealing with resources um handling files and connections stuff",
    "start": "1658960",
    "end": "1665440"
  },
  {
    "text": "like that you either might need to uh start implementing life cycle to make sure you're getting the Stop and restart",
    "start": "1665440",
    "end": "1670720"
  },
  {
    "text": "callbacks or if you already Implement life cycle you might need to make sure um that you're not actually losing State",
    "start": "1670720",
    "end": "1677320"
  },
  {
    "text": "between the the snapshot and when it gets",
    "start": "1677320",
    "end": "1681720"
  },
  {
    "start": "1683000",
    "end": "1733000"
  },
  {
    "text": "restored so for the road map spring framework 6.1 uh we're",
    "start": "1683559",
    "end": "1690760"
  },
  {
    "text": "already working on on that spring boot uh 3.2 already work on that as well so spring framework 601 we already had the",
    "start": "1690760",
    "end": "1697440"
  },
  {
    "text": "the first Milestone one uh released a few weeks ago we're working on M2 now and hoping to release that in mid July",
    "start": "1697440",
    "end": "1703840"
  },
  {
    "text": "spring boot 3.2 should also come out in mid July and then later on the this year we'll have the release candidates in",
    "start": "1703840",
    "end": "1709640"
  },
  {
    "text": "October and hopefully the G releases should be out in November so please give our Milestones a try and let us know",
    "start": "1709640",
    "end": "1716399"
  },
  {
    "text": "what you think so I have some time for um questions and I also um could show a",
    "start": "1716399",
    "end": "1722760"
  },
  {
    "text": "demo a small demo of um aot and a native image I kind of leave it up to people in",
    "start": "1722760",
    "end": "1729159"
  },
  {
    "text": "the in the crowd should I show a small small demo",
    "start": "1729159",
    "end": "1734320"
  },
  {
    "start": "1733000",
    "end": "2064000"
  },
  {
    "text": "yes okay all right",
    "start": "1734320",
    "end": "1740039"
  },
  {
    "text": "so I did this one for spring iio I'm sorry it doesn't say go to you just have to assume it says go to so this is a",
    "start": "1740080",
    "end": "1747240"
  },
  {
    "text": "very um simple application simple boot application really nothing special here just waited from start. spring.io um I",
    "start": "1747240",
    "end": "1754720"
  },
  {
    "text": "have a service in there that has an implementation that was more for testing purposes basically it's just going to",
    "start": "1754720",
    "end": "1760640"
  },
  {
    "text": "say uh hello spring.io and on the webs side we have a controller so just a",
    "start": "1760640",
    "end": "1766240"
  },
  {
    "text": "standard spring MC controller that's um going to return uh the message from the",
    "start": "1766240",
    "end": "1771440"
  },
  {
    "text": "the service when we have a request a get request to slash hello so if I go",
    "start": "1771440",
    "end": "1779398"
  },
  {
    "text": "to if I run it who wants to wait a minute to see it compiled I could just show you how fast it runs um do you want",
    "start": "1779640",
    "end": "1786720"
  },
  {
    "text": "to wait a minute to see it compile this application takes takes a minute I have um spared you the pain so",
    "start": "1786720",
    "end": "1793760"
  },
  {
    "text": "if I if I run the the maven command to generate the native image and pilot we see that it took actually a minute which",
    "start": "1793760",
    "end": "1800640"
  },
  {
    "text": "seems quite quite a long time right for a standard application or this simple it has one service and and One controller",
    "start": "1800640",
    "end": "1807840"
  },
  {
    "text": "and that's because it's creating the the entire native image and if we go look at that um it's the this one here and it's",
    "start": "1807840",
    "end": "1817880"
  },
  {
    "text": "67.9 megabytes so the whole thing is in there right all spring all of your application all of java that's one",
    "start": "1817880",
    "end": "1825000"
  },
  {
    "text": "standard or one executable that's been built for for my MacBook Pro it only runs on uh architecture that's",
    "start": "1825000",
    "end": "1831799"
  },
  {
    "text": "compatible with my MacBook Pro so if I wanted to actually run that um I could run that spring iio it started up in 46",
    "start": "1831799",
    "end": "1840799"
  },
  {
    "text": "milliseconds so that's pretty fast startup time right and otherwise it looks like a normal spring VI",
    "start": "1840799",
    "end": "1846200"
  },
  {
    "text": "application that's running and just to prove that it works hopefully if I hit return yes it runs and if I put in",
    "start": "1846200",
    "end": "1854080"
  },
  {
    "text": "something else not that I'm faking it Hells it'll yeah it's not running so that pages in there just the hello page",
    "start": "1854080",
    "end": "1859639"
  },
  {
    "text": "is there but that you see that it works in that sense um the tests as well so if",
    "start": "1859639",
    "end": "1865039"
  },
  {
    "text": "I were to to run the test let me go ahead and um kill that out when I ran the the tests from the",
    "start": "1865039",
    "end": "1873159"
  },
  {
    "text": "the the maven build it also took about a minute we see that it ran all of the the",
    "start": "1873159",
    "end": "1879240"
  },
  {
    "text": "three tests they were in there and took a minute but that's then compiled into a native image we see that's here as well",
    "start": "1879240",
    "end": "1885159"
  },
  {
    "text": "native test and that's a little bit larger than the normal one because it has junit and some other stuff in there",
    "start": "1885159",
    "end": "1890559"
  },
  {
    "text": "so that's about 75 megabytes and if you wanted to see those tests run it's",
    "start": "1890559",
    "end": "1897480"
  },
  {
    "text": "uh the native tests that also ran very fast I guess I could time it right well",
    "start": "1897480",
    "end": "1904120"
  },
  {
    "text": "48 milliseconds for the actual tests in J unit but for the whole process yeah",
    "start": "1904120",
    "end": "1909200"
  },
  {
    "text": "like 86 milliseconds so that's actually starting up the native image J units running it's running all of our tests it",
    "start": "1909200",
    "end": "1915559"
  },
  {
    "text": "runs your entire Tire test suite for your current project so we see there those those are the",
    "start": "1915559",
    "end": "1921600"
  },
  {
    "text": "benefits um normally you're going to not build it for your your MacBook you're probably going to deploy to something",
    "start": "1921600",
    "end": "1926760"
  },
  {
    "text": "like Linux so you're going to need some kind of container um there are many tools out there for build packs Pico and",
    "start": "1926760",
    "end": "1932799"
  },
  {
    "text": "other things like that that allow you to on your computer or in your CI to build",
    "start": "1932799",
    "end": "1938039"
  },
  {
    "text": "for particular um Target uh architecture for Linux for what you're going toloy into in the cloud and things like",
    "start": "1938039",
    "end": "1945399"
  },
  {
    "text": "that so but otherwise that application looks just like a normal application uh",
    "start": "1946159",
    "end": "1951399"
  },
  {
    "text": "the tests are in there like I said before you would normally just run the tests in your IDE they should work as",
    "start": "1951399",
    "end": "1957320"
  },
  {
    "text": "well and this is the exact same test that that ran um within the native image and this code here is the same one thing",
    "start": "1957320",
    "end": "1964080"
  },
  {
    "text": "that's different is this stuff is uh all generated so I do have generated code in here um I",
    "start": "1964080",
    "end": "1972279"
  },
  {
    "text": "imported that so you see here um Target uh spring aot this is a maven build um",
    "start": "1972279",
    "end": "1977440"
  },
  {
    "text": "these are the test sources I could also look at the main sources as well but in general you see there's a lot of stuff",
    "start": "1977440",
    "end": "1983760"
  },
  {
    "text": "that's generated in here um you see stuff for for boot stuff for spring test",
    "start": "1983760",
    "end": "1989200"
  },
  {
    "text": "contacts so the generated um classes that were there all these initializers",
    "start": "1989200",
    "end": "1994360"
  },
  {
    "text": "we could probably go look at one and we can see that it's uh has its own bean factory registration and it's",
    "start": "1994360",
    "end": "1999559"
  },
  {
    "text": "registering the beans this is what I was talking about this is all the code that we had in annotations or maybe in XML or",
    "start": "1999559",
    "end": "2005080"
  },
  {
    "text": "some other custom metadata format this all gets converted into uh straight up functional code so all the code is in",
    "start": "2005080",
    "end": "2012159"
  },
  {
    "text": "here register bean from the bean factory this instance and you have all the all of the beans in there for the actual",
    "start": "2012159",
    "end": "2019559"
  },
  {
    "text": "application this was my um for the spring iio application the",
    "start": "2019559",
    "end": "2024600"
  },
  {
    "text": "spring boot it has this set instance supplier here the root Bean definition and that's how it's creating all these",
    "start": "2024600",
    "end": "2030760"
  },
  {
    "text": "things and if you wanted to look at the um let's see oops Target spring aot uh",
    "start": "2030760",
    "end": "2039279"
  },
  {
    "text": "just a test because I cleared it out I don't know if we want to to go back and build the other stuff but basically for",
    "start": "2039279",
    "end": "2045200"
  },
  {
    "text": "the production code it it does that as well so it's going to go through all of your configuation classes well through all of the beans that registered in the",
    "start": "2045200",
    "end": "2051200"
  },
  {
    "text": "The Bean Factory and generate code for that and this is all generated with with Java poet um even with with",
    "start": "2051200",
    "end": "2057919"
  },
  {
    "text": "documentation we're nerds but we thought people might look at it and read it so we we have documentation in the generated code as",
    "start": "2057919",
    "end": "2065480"
  },
  {
    "start": "2064000",
    "end": "2079000"
  },
  {
    "text": "well",
    "start": "2066720",
    "end": "2069720"
  }
]