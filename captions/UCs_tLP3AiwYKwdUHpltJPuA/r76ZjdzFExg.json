[
  {
    "text": "my name is rich Slav friends called me Slava",
    "start": "9590",
    "end": "14790"
  },
  {
    "text": "all people are my friends unless they write JavaScript no anyway so I'm here",
    "start": "14790",
    "end": "20009"
  },
  {
    "text": "to talk about JavaScript performance and this talk is a little bit different I looked at the schedule and all talks are",
    "start": "20009",
    "end": "25980"
  },
  {
    "text": "mostly about using javascript and so they're targeted to JavaScript programmers but my talk is a little bit",
    "start": "25980",
    "end": "33390"
  },
  {
    "text": "from the other side from the inside the trenches it conveys my perspective on",
    "start": "33390",
    "end": "39000"
  },
  {
    "text": "JavaScript performance based on my experience working on the v8 I worked on",
    "start": "39000",
    "end": "45300"
  },
  {
    "text": "all kinds of different virtual machines in my life starting from Java VM and I",
    "start": "45300",
    "end": "51469"
  },
  {
    "text": "also worked on things like v8 which is a JavaScript engine inside chrome and dart",
    "start": "51469",
    "end": "57090"
  },
  {
    "text": "VM and the lower GT even but this talk is concentrating on my experience on v8",
    "start": "57090",
    "end": "63410"
  },
  {
    "text": "so and why is it important to know how v8 works well that's because all the MS",
    "start": "63410",
    "end": "71760"
  },
  {
    "text": "are very complex and to understand the performance you really need to understand how VMs work so for example",
    "start": "71760",
    "end": "78869"
  },
  {
    "text": "this is a stack overflow question from today I edit it right in the morning so",
    "start": "78869",
    "end": "84930"
  },
  {
    "text": "somebody is very curious why on the node chair so how many people use nodejs okay",
    "start": "84930",
    "end": "90360"
  },
  {
    "text": "a lot of you my condolences so why are no js' let based for loop is slower than",
    "start": "90360",
    "end": "100470"
  },
  {
    "text": "there are based for loop by a considerable amount maybe four times",
    "start": "100470",
    "end": "105840"
  },
  {
    "text": "it's an empty loop so why empty loop is slower so the overhead of loop in itself is considerably higher and usually you",
    "start": "105840",
    "end": "115740"
  },
  {
    "text": "have no choice but to ask a question on Stack Overflow if you encounter the problem like that but in reality if you",
    "start": "115740",
    "end": "121829"
  },
  {
    "text": "are prepared at least a little bit then you can have a choice you can go try to",
    "start": "121829",
    "end": "127590"
  },
  {
    "text": "profile what virtual machine does so you can at least try to read the code that",
    "start": "127590",
    "end": "132930"
  },
  {
    "text": "it produces so maybe the code the virtual machine itself if you can cope with C++ and don't in the bucket for",
    "start": "132930",
    "end": "138690"
  },
  {
    "text": "that and not many people can cope so for example",
    "start": "138690",
    "end": "143959"
  },
  {
    "text": "the wheat has this optimizing compiler called crankshaft and if you want to",
    "start": "143959",
    "end": "149299"
  },
  {
    "text": "deal with crankshaft you can use a small tool that I wrote that allows you to read the code that it generates and",
    "start": "149299",
    "end": "156610"
  },
  {
    "text": "using this tool you can look at what happens with that for loop and it",
    "start": "156610",
    "end": "163549"
  },
  {
    "text": "probably is a little bit hard to see but this is the code of the benchmark in the",
    "start": "163549",
    "end": "168560"
  },
  {
    "text": "form of the control flow graph that is used by the optimizing compiler and it",
    "start": "168560",
    "end": "174349"
  },
  {
    "text": "doesn't really what matter what really actually happens but you can see some suspicious things are happening because you have the loop with four wire up",
    "start": "174349",
    "end": "181940"
  },
  {
    "text": "there and and somehow there is a very big loop down there which is",
    "start": "181940",
    "end": "187519"
  },
  {
    "text": "considerably bigger and what's most auspicious is that there is a loop inside the loop if you use the let",
    "start": "187519",
    "end": "194299"
  },
  {
    "text": "binding in the for loop this is really strange and actually the led bindings were added",
    "start": "194299",
    "end": "201829"
  },
  {
    "text": "after I already departed from v8 so I was curious myself what's actually happening and the way I was trying to",
    "start": "201829",
    "end": "207590"
  },
  {
    "text": "resolve this I didn't know actually what is happening so I got the source of the",
    "start": "207590",
    "end": "213919"
  },
  {
    "text": "v8 there are instructions how to get it and I'm built a debug version of v8",
    "start": "213919",
    "end": "222099"
  },
  {
    "text": "which is very easy to do one make for example a linux little bit hard on Windows but development on Windows is",
    "start": "222099",
    "end": "227720"
  },
  {
    "text": "hard anyway you cry all the time and then I run this version pass the test",
    "start": "227720",
    "end": "233209"
  },
  {
    "text": "file to it and I asked it to print the abstract syntax tree that it builds for this code and it looks very kind of",
    "start": "233209",
    "end": "241639"
  },
  {
    "text": "scary it doesn't matter what actually happening I will I will say it doesn't matter what actually happening a lot in",
    "start": "241639",
    "end": "246650"
  },
  {
    "text": "this talk because you really need to concentrate on some points in the code",
    "start": "246650",
    "end": "253069"
  },
  {
    "text": "and not pay complete attention to what is happening and if you just start reading through it then immediately what",
    "start": "253069",
    "end": "259280"
  },
  {
    "text": "jumps is that there is your normal loop variable I and then there is this",
    "start": "259280",
    "end": "264770"
  },
  {
    "text": "strange temporary and unfortunately it doesn't fit into the screen but it says",
    "start": "264770",
    "end": "270169"
  },
  {
    "text": "dot for so obviously your original code did not",
    "start": "270169",
    "end": "275890"
  },
  {
    "text": "contain any variable called dot four you can't even create a variable called dot four in JavaScript so this is",
    "start": "275890",
    "end": "282310"
  },
  {
    "text": "immediately really strange so you go and oh yeah here is a smaller version so you",
    "start": "282310",
    "end": "287560"
  },
  {
    "text": "go and you just grab the sources of v8 for these dot four thing and you find it",
    "start": "287560",
    "end": "292900"
  },
  {
    "text": "somewhere in a strange header file called SD value factory and there is",
    "start": "292900",
    "end": "298150"
  },
  {
    "text": "this thing called dot underscore four and you say okay maybe I should grab for that now and you grab for that and you find the",
    "start": "298150",
    "end": "304630"
  },
  {
    "text": "code in the parse and it doesn't really matter what the code is it's just enough to know that it's in the parser then you",
    "start": "304630",
    "end": "309700"
  },
  {
    "text": "go read start reading the code around this places where it mentions dot for the dot underscore four and you",
    "start": "309700",
    "end": "318490"
  },
  {
    "text": "immediately find a helpful comment so the v8 sources are relatively well commented so you can find this comment",
    "start": "318490",
    "end": "324760"
  },
  {
    "text": "there which says okay we have this for loop with the letter cons binding and we rewrite it as follows and what follows",
    "start": "324760",
    "end": "331750"
  },
  {
    "text": "is a huge rewriting rule for this and so in the comment and immediately you can",
    "start": "331750",
    "end": "337840"
  },
  {
    "text": "see where the loop inside the loop comes from there is a there is a loop inside the loop here there is this loop and",
    "start": "337840",
    "end": "343930"
  },
  {
    "text": "then there is this loop and I can't really give you insight into v8",
    "start": "343930",
    "end": "349230"
  },
  {
    "text": "implementers brain why they decided to implement it this way but I guess that",
    "start": "349230",
    "end": "354430"
  },
  {
    "text": "was because they wanted to shoehorn the led bindings into the like old esteem",
    "start": "354430",
    "end": "359770"
  },
  {
    "text": "and as a result they got somewhat inefficient implementation of that for the for loops so hopefully they will fix",
    "start": "359770",
    "end": "365770"
  },
  {
    "text": "it and things like JavaScript core or like Firefox as far as they know don't",
    "start": "365770",
    "end": "371830"
  },
  {
    "text": "have this the SpiderMonkey they don't have these issues so eventually v8 people probably fix it",
    "start": "371830",
    "end": "378600"
  },
  {
    "text": "so there are two points of view here is that internals are important and you",
    "start": "378600",
    "end": "386230"
  },
  {
    "text": "really need to know them but there is also a point of view that internals are completely irrelevant and you don't really need to know them and both of",
    "start": "386230",
    "end": "392410"
  },
  {
    "text": "these are valid so I don't want to try to persuade you that you need to know",
    "start": "392410",
    "end": "398740"
  },
  {
    "text": "everything that happens within those many many many many many many many many many many lines of",
    "start": "398740",
    "end": "406900"
  },
  {
    "text": "class code but you need to have the understanding on a very high level",
    "start": "406900",
    "end": "412800"
  },
  {
    "text": "because when it actually matters it matters a lot so for example here's a",
    "start": "412800",
    "end": "419340"
  },
  {
    "text": "chunk of code from some Russian like",
    "start": "419340",
    "end": "425500"
  },
  {
    "text": "social site where people talk about programming somebody tried to measure something and",
    "start": "425500",
    "end": "433169"
  },
  {
    "text": "they wrote this code and everybody here can read JavaScript code so I'm not",
    "start": "433169",
    "end": "438880"
  },
  {
    "text": "going to go through that and explain what it does and they run it they call",
    "start": "438880",
    "end": "444100"
  },
  {
    "text": "this fine function many many many times and they discovered that you can do it",
    "start": "444100",
    "end": "449350"
  },
  {
    "text": "on v8 own note like five thousand times per millisecond and that sounds pretty",
    "start": "449350",
    "end": "456490"
  },
  {
    "text": "cool and then they try to do this they said okay what about if we catch this array outside of the find function oh",
    "start": "456490",
    "end": "463479"
  },
  {
    "text": "actually outside of the index and outside of the find function and how much does it improve performance and it",
    "start": "463479",
    "end": "469539"
  },
  {
    "text": "does improve performance now you can call it 14,000 times per millisecond which kind of makes sense you don't",
    "start": "469539",
    "end": "476349"
  },
  {
    "text": "allocate array every time you call the index or find and then they wrote in the",
    "start": "476349",
    "end": "484840"
  },
  {
    "text": "this post they wrote that oh that means a reallocation is expensive and and I",
    "start": "484840",
    "end": "491500"
  },
  {
    "text": "came into the comments I like coming into the comments and telling people that they're wrong and I said what about",
    "start": "491500",
    "end": "498580"
  },
  {
    "text": "if I make a function that makes an array and instead of moving the array",
    "start": "498580",
    "end": "504070"
  },
  {
    "text": "allocation out I kind of move the function that creates this array out and I will start calling this function in so",
    "start": "504070",
    "end": "510520"
  },
  {
    "text": "logically speaking it should again drop the performance down all the way down to like four five thousand operations per",
    "start": "510520",
    "end": "516039"
  },
  {
    "text": "millisecond right but actually doesn't it it actually is almost as fast and this is what people",
    "start": "516039",
    "end": "525190"
  },
  {
    "text": "do when they see this they are very surprised and here the choice is to",
    "start": "525190",
    "end": "532480"
  },
  {
    "text": "profile like you can use on Linux for example there is a very helpful tool",
    "start": "532480",
    "end": "537610"
  },
  {
    "text": "called perf which is a think that can hook into the cpu",
    "start": "537610",
    "end": "542629"
  },
  {
    "text": "performance counters and aggregate the statistics for you and v8 has certain",
    "start": "542629",
    "end": "549439"
  },
  {
    "text": "levels of integration with this tool so with the with the newest kernels you can even get the annotations like per",
    "start": "549439",
    "end": "556670"
  },
  {
    "text": "assembly line essentially per machine code instruction but with an older kernel you at least get the per function",
    "start": "556670",
    "end": "564199"
  },
  {
    "text": "statistics and what does performance counters show here that there are a lot",
    "start": "564199",
    "end": "570699"
  },
  {
    "text": "the names of functions in c++ they're very long right they don't fit on the slide but you can see that there is a",
    "start": "570699",
    "end": "576949"
  },
  {
    "text": "lot of stuff related to creating new functions here it's a lot of C++ code responsible for that because it says new",
    "start": "576949",
    "end": "583459"
  },
  {
    "text": "function you function you function new closure so on so forth and if you profile the version where the array is",
    "start": "583459",
    "end": "589790"
  },
  {
    "text": "allocated in this small helper function you discover that there is no such thing happening there but there is instead a",
    "start": "589790",
    "end": "597110"
  },
  {
    "text": "thing called fast new closure stop and what happens here is very kind of",
    "start": "597110",
    "end": "603019"
  },
  {
    "text": "bizarre is in v8 there is this thing and written in assembly essentially that can allocate",
    "start": "603019",
    "end": "610490"
  },
  {
    "text": "closures fast but it does not support or did not support allocation of closures a",
    "start": "610490",
    "end": "616189"
  },
  {
    "text": "fast allocation of closures if the closure contained an array literal inside so what actually happened let's",
    "start": "616189",
    "end": "621529"
  },
  {
    "text": "go to the code back to the code when you had an array inside of the index function the allocation of an index",
    "start": "621529",
    "end": "627290"
  },
  {
    "text": "function itself which happens every time that you call fine function was very expensive it had to go to the runtime",
    "start": "627290",
    "end": "633290"
  },
  {
    "text": "and do all the stuff in the runtime and as soon as I moved the array allocation out then the allocation of the index",
    "start": "633290",
    "end": "640100"
  },
  {
    "text": "functions was sped up considerably and even though that you're allocate boss a function and and the array every time",
    "start": "640100",
    "end": "646549"
  },
  {
    "text": "that you call this the allocation itself is not that expensive because it happens in the new space it's just a bump of the",
    "start": "646549",
    "end": "652040"
  },
  {
    "text": "pointer it's very very fast ok so if you",
    "start": "652040",
    "end": "657290"
  },
  {
    "text": "run this code on the newer v8 and people the v8 people actually taught this handwritten piece of assembly how to",
    "start": "657290",
    "end": "664309"
  },
  {
    "text": "allocate closures with literals inside so now both cases are equally fast ok",
    "start": "664309",
    "end": "671089"
  },
  {
    "text": "here's another very interesting example from stack overflow somebody wrote cha-cha 20 cipher in",
    "start": "671089",
    "end": "678120"
  },
  {
    "text": "JavaScript and it does not matter what your 20s it's just some number crunching stuff II yeah that's essentially it it's",
    "start": "678120",
    "end": "687180"
  },
  {
    "text": "it's the main part of the chat warning and there is a helper method called quote around here which is called a lot",
    "start": "687180",
    "end": "693720"
  },
  {
    "text": "of times in the loop and the person who asked the stack overflow question he was actually curious what happens if he",
    "start": "693720",
    "end": "699540"
  },
  {
    "text": "takes the implementation of this quote around and in lines it into this function that calls it so he measured",
    "start": "699540",
    "end": "706620"
  },
  {
    "text": "the the version without inlining and it was like 20 megabytes per second I don't know whether it's fast whether it's slow",
    "start": "706620",
    "end": "713010"
  },
  {
    "text": "for a cypher it doesn't matter for the purposes of this talk then he takes this",
    "start": "713010",
    "end": "718200"
  },
  {
    "text": "implementation of this function what around and just puts the the code into this loop manually completely inlining",
    "start": "718200",
    "end": "727560"
  },
  {
    "text": "the entering this loop into a huge mess of the arithmetic and he runs it and of",
    "start": "727560",
    "end": "733649"
  },
  {
    "text": "course the expectation is that it runs faster well it actually runs ten times slower so he makes the face like that I",
    "start": "733649",
    "end": "740970"
  },
  {
    "text": "guess and it's not very happy and he says I heard somewhere that inlining",
    "start": "740970",
    "end": "747029"
  },
  {
    "text": "must improve performance why does it not happen and I looked at this example and",
    "start": "747029",
    "end": "752970"
  },
  {
    "text": "I said well you have this function there which does certain things to the numbers",
    "start": "752970",
    "end": "760050"
  },
  {
    "text": "and what if you apply the awesome GS to",
    "start": "760050",
    "end": "766140"
  },
  {
    "text": "it and awesome GS is this interesting standard way you put the user as meditation into your code and then",
    "start": "766140",
    "end": "771270"
  },
  {
    "text": "suddenly everything looks very runs very fast so as I said put the annotation use",
    "start": "771270",
    "end": "776579"
  },
  {
    "text": "the Osman your code like that and the VM will speed it up and lo and behold they",
    "start": "776579",
    "end": "782970"
  },
  {
    "text": "did speed everything up back to the basically the same performance that was there before and of course you need to",
    "start": "782970",
    "end": "791070"
  },
  {
    "text": "put an additional comment there which says that to the people who don't understand anything about performance or",
    "start": "791070",
    "end": "796500"
  },
  {
    "text": "virtual machines otherwise they will remove this so and that's that's why I",
    "start": "796500",
    "end": "802260"
  },
  {
    "text": "really need to know things usually when we say performance we used to mean",
    "start": "802260",
    "end": "808649"
  },
  {
    "text": "used to mean that you go to GS perv dot-com and you write some micro",
    "start": "808649",
    "end": "814139"
  },
  {
    "text": "benchmark and you know everything there is to know about the JavaScript performance but you are a Jesper kind of",
    "start": "814139",
    "end": "819930"
  },
  {
    "text": "diet it's now in this perpetual state of rewrite and you can no longer use it so",
    "start": "819930",
    "end": "826679"
  },
  {
    "text": "do you work for those of you who don't know it like how many people ever used Jesper from their lives here not that",
    "start": "826679",
    "end": "833550"
  },
  {
    "text": "many oh that's good that's good actually you're not spoiled you're not your minds are not corrupted by this thing so it",
    "start": "833550",
    "end": "840929"
  },
  {
    "text": "was this site where you could write some code and then you press the button run",
    "start": "840929",
    "end": "846420"
  },
  {
    "text": "test and you get like operations per millisecond for those tests that you wrote and other people could also run",
    "start": "846420",
    "end": "853319"
  },
  {
    "text": "those tests and then the data was aggregated and you could see in different browsers different OSS some",
    "start": "853319",
    "end": "858869"
  },
  {
    "text": "average performance numbers but the problem is that people write very strange benchmarks and they don't",
    "start": "858869",
    "end": "864689"
  },
  {
    "text": "understand how to use it correctly so if you base your decisions on this you get really strange decisions for example",
    "start": "864689",
    "end": "870019"
  },
  {
    "text": "somebody tried to write this test which tries to measure what's the fastest way to count letters e in the text and they",
    "start": "870019",
    "end": "880920"
  },
  {
    "text": "discovered some very fast ways on firefox you can see so this is operations per millisecond or per second",
    "start": "880920",
    "end": "886740"
  },
  {
    "text": "so the higher the better and firefox so there is this purple line that like is",
    "start": "886740",
    "end": "893279"
  },
  {
    "text": "huge like it's faster than anything that you saw before in your life it's like tesla of javascript and it's",
    "start": "893279",
    "end": "902610"
  },
  {
    "text": "this split thing up there so the fastest way in firefox apparently to count",
    "start": "902610",
    "end": "907800"
  },
  {
    "text": "letters e in the text is to split it by letter e and then take the length of the array and subtract 1 it returns the",
    "start": "907800",
    "end": "914639"
  },
  {
    "text": "right result kind of but it's kind of mmm what what actually happened here and",
    "start": "914639",
    "end": "920100"
  },
  {
    "text": "the other one that is also fast in in in all the browsers not as fast as the first one of course but still very fast",
    "start": "920100",
    "end": "926490"
  },
  {
    "text": "is to iterate over this string but for iteration you don't use the normal like",
    "start": "926490",
    "end": "932879"
  },
  {
    "text": "for I from zero to length of the string you start slicing the string with a slice and this is kind of again strange",
    "start": "932879",
    "end": "939720"
  },
  {
    "text": "because what I would expect slice to be slow so it's really strange results and if",
    "start": "939720",
    "end": "946110"
  },
  {
    "text": "you take it like for the face value you will make strange decisions based on that and you shouldn't do that so you",
    "start": "946110",
    "end": "951750"
  },
  {
    "text": "should instead doubt everything like literally everything you should doubt if you're if you're going home we should",
    "start": "951750",
    "end": "957480"
  },
  {
    "text": "doubt whether you took the right bus and of course you should doubt the micro benchmarks so the micro benchmarks is",
    "start": "957480",
    "end": "962910"
  },
  {
    "text": "this like think that you try to use when",
    "start": "962910",
    "end": "969060"
  },
  {
    "text": "you want to measure what's the cost of a single operation and how do you do that",
    "start": "969060",
    "end": "975000"
  },
  {
    "text": "well of course you write the code like this you take the current date then you perform the operation then you subtract",
    "start": "975000",
    "end": "981840"
  },
  {
    "text": "the current date you subtract the previous current date from the current current date right and you get kind of",
    "start": "981840",
    "end": "987360"
  },
  {
    "text": "the length okay simple enough but what if the operation is faster than the",
    "start": "987360",
    "end": "994080"
  },
  {
    "text": "clock usually would expect that the assignment to a variable for example does not take a millisecond even right",
    "start": "994080",
    "end": "1002140"
  },
  {
    "text": "well maybe it used to take a millisecond back in the 90s but not now so the easy",
    "start": "1002140",
    "end": "1008780"
  },
  {
    "text": "answer is just to repeat the operation multiple times and then divide the time",
    "start": "1008780",
    "end": "1013820"
  },
  {
    "text": "by the amount of iterations that you took or divide the amount of iteration by the time depends on what you want to",
    "start": "1013820",
    "end": "1019370"
  },
  {
    "text": "get as a result so this is the arithmetic from the school but maybe not",
    "start": "1019370",
    "end": "1024410"
  },
  {
    "text": "everybody went to a school so I will repeat a little bit so you want to find the cost of the operation marked C so",
    "start": "1024410",
    "end": "1030920"
  },
  {
    "text": "you if you repeat it 10 times and then you write it by n then and goes away and you kind of get the cost right",
    "start": "1030920",
    "end": "1037069"
  },
  {
    "text": "arithmetic 101 so if you will look at the example with a slicing of a string",
    "start": "1037070",
    "end": "1042680"
  },
  {
    "text": "one by one then what happens with this example what makes it so fast is that",
    "start": "1042680",
    "end": "1049010"
  },
  {
    "text": "the GS per for the benchmark GS which is this library underneath the GS perv it generates the JavaScript code wrapping",
    "start": "1049010",
    "end": "1055580"
  },
  {
    "text": "this into the loop and maybe if we spend an hour just staring into this JavaScript code we'll figure out what",
    "start": "1055580",
    "end": "1062090"
  },
  {
    "text": "the back is the back is that you arrive with an empty string on the second iteration of the outer loop right you",
    "start": "1062090",
    "end": "1068660"
  },
  {
    "text": "slice the string slice slice slice it ends when the string is empty and then string is never initialized you just",
    "start": "1068660",
    "end": "1074660"
  },
  {
    "text": "repeat with the with empty string all your operations so",
    "start": "1074660",
    "end": "1079880"
  },
  {
    "text": "repetition starts with a string equals to the empty string and we wanted to get",
    "start": "1079880",
    "end": "1085550"
  },
  {
    "text": "mass like that but we actually got the mass like that so we repeated an operation once and then we repeat it",
    "start": "1085550",
    "end": "1091400"
  },
  {
    "text": "nothing n minus 1 times and then we divided by n and you got the cost of",
    "start": "1091400",
    "end": "1096890"
  },
  {
    "text": "operation divided by N and the cost of operation is very small number and amount of repetitions is very high so",
    "start": "1096890",
    "end": "1103310"
  },
  {
    "text": "it's approximately it costs nothing right so very simple math this is a very",
    "start": "1103310",
    "end": "1108350"
  },
  {
    "text": "common example of benchmark Jaso jesper misuse when people don't take into account that operation should take the",
    "start": "1108350",
    "end": "1114560"
  },
  {
    "text": "same amount of time every time you run it and but it's actually not very easy",
    "start": "1114560",
    "end": "1121010"
  },
  {
    "text": "to achieve that in the modern world so for example here another case from the GS birth where somebody tried to measure",
    "start": "1121010",
    "end": "1128810"
  },
  {
    "text": "what's the fastest way to convert a string to a number and it turns out again on the firefox the fastest way to",
    "start": "1128810",
    "end": "1134600"
  },
  {
    "text": "turn string to a number is a double tilde so if you know the intricacies of",
    "start": "1134600",
    "end": "1140390"
  },
  {
    "text": "the JavaScript semantics the tilde is a bitwise negation right and the double",
    "start": "1140390",
    "end": "1147110"
  },
  {
    "text": "bitwise negation is not a negation at all right it's just identity so when you",
    "start": "1147110",
    "end": "1153350"
  },
  {
    "text": "declare ok double tilde for the win let's convert all parse int to the double till them they're considerably",
    "start": "1153350",
    "end": "1159290"
  },
  {
    "text": "faster of course the answer is nope javascript compilers the just-in-time",
    "start": "1159290",
    "end": "1166910"
  },
  {
    "text": "compilers they're relatively clever like dogs they're not smartest people but at least they can do move to your code and",
    "start": "1166910",
    "end": "1174760"
  },
  {
    "text": "then you can observe how the program is running and they can optimize while it is running so your math from the first",
    "start": "1174760",
    "end": "1182540"
  },
  {
    "text": "grade no longer applies really you get at least an optimized version and",
    "start": "1182540",
    "end": "1188080"
  },
  {
    "text": "non-optimized unoptimized version optimized versions together and then you repeat to several time the unoptimized",
    "start": "1188080",
    "end": "1194870"
  },
  {
    "text": "version then JIT comes and optimizes it so it gets a little bit complicated but it actually is even more complicated",
    "start": "1194870",
    "end": "1202040"
  },
  {
    "text": "because there can be multiple optimized versions like Safari for example it has several optimising cheats and it tears",
    "start": "1202040",
    "end": "1209090"
  },
  {
    "text": "up as your code runs and becomes hotter and hotter and if you factor in all kinds of",
    "start": "1209090",
    "end": "1215540"
  },
  {
    "text": "costs like GC and compilation cost and the math really becomes messy and you",
    "start": "1215540",
    "end": "1221450"
  },
  {
    "text": "can no longer use a simple math you need to go to the University and take some analysis so so you need to outsmart the",
    "start": "1221450",
    "end": "1231140"
  },
  {
    "text": "just-in-time compiler to measure anything really and if you program languages like Java for example then you",
    "start": "1231140",
    "end": "1236810"
  },
  {
    "text": "already have tools to do that for example the Java has the Java micro benchmarking harness gmh and it it had a",
    "start": "1236810",
    "end": "1246020"
  },
  {
    "text": "lot of engineering put into it to outsmart the hotspot but in JavaScript",
    "start": "1246020",
    "end": "1252470"
  },
  {
    "text": "you don't really have these tools and benchmark J's does not do much to outsmart the JIT I will show you some",
    "start": "1252470",
    "end": "1258920"
  },
  {
    "text": "examples of optimizations now on the slides but you should really understand that I am going to show you them on the",
    "start": "1258920",
    "end": "1264410"
  },
  {
    "text": "source level but it's not how they happen in reality so they happened on the more complicated",
    "start": "1264410",
    "end": "1270380"
  },
  {
    "text": "intermediate representations but for the purposes of the talk I'm ignoring all the compiler theory and I'm just doing",
    "start": "1270380",
    "end": "1276200"
  },
  {
    "text": "what I want to do so what happens with this benchmark with double tilde is that the dog the dog JIT which is smart",
    "start": "1276200",
    "end": "1284240"
  },
  {
    "text": "enough it sees that I never changes in the loop it's a constant really the eye",
    "start": "1284240",
    "end": "1290390"
  },
  {
    "text": "is assigned some constant string and you just put it in there and then it says oh",
    "start": "1290390",
    "end": "1295940"
  },
  {
    "text": "but I know how to apply the bitwise negation to the string full of numbers and it does it and it does it again and",
    "start": "1295940",
    "end": "1304900"
  },
  {
    "text": "you end up with just assignment of the constant to a variable which is not that",
    "start": "1304900",
    "end": "1309920"
  },
  {
    "text": "expensive it's essentially zero and this is optimizations called constant",
    "start": "1309920",
    "end": "1315110"
  },
  {
    "text": "propagation and most of the cheats all of the cheats these days and they do it",
    "start": "1315110",
    "end": "1320500"
  },
  {
    "text": "so you can say okay I can trick the compiler I can trick the constant propagation what about if I make the I",
    "start": "1320500",
    "end": "1327560"
  },
  {
    "text": "non constant just generate some string based on the current time for example",
    "start": "1327560",
    "end": "1332840"
  },
  {
    "text": "and of course the JIT will be all panicking and run away but no this is",
    "start": "1332840",
    "end": "1338870"
  },
  {
    "text": "the wrong answer McFly this is not going to trick the compiler so the compiler will observe that while",
    "start": "1338870",
    "end": "1344710"
  },
  {
    "text": "it is not a constant it actually is a loop invariant so there is no reason to perform this operation again and again",
    "start": "1344710",
    "end": "1350380"
  },
  {
    "text": "in the loop you can just move it out and perform it outside of the loop and you again measuring nothing you are",
    "start": "1350380",
    "end": "1357520"
  },
  {
    "text": "measuring an assignment of some pre computed value to a variable of course the computation is now happening in the code but it happened in kind of outside",
    "start": "1357520",
    "end": "1364390"
  },
  {
    "text": "of like what you are measuring this is called loop invariant code motion again",
    "start": "1364390",
    "end": "1369790"
  },
  {
    "text": "most kids do that they can go further forward and then",
    "start": "1369790",
    "end": "1375520"
  },
  {
    "text": "they can observe that nobody is actually using J variable and if nobody is using",
    "start": "1375520",
    "end": "1381220"
  },
  {
    "text": "J variable then J zero is not used either and if nobody is using Chi zero",
    "start": "1381220",
    "end": "1387220"
  },
  {
    "text": "then maybe I is not needed anymore either and there is no side effects from computing the two string of the date now",
    "start": "1387220",
    "end": "1394900"
  },
  {
    "text": "so it is all completely dead so your end",
    "start": "1394900",
    "end": "1400030"
  },
  {
    "text": "up with an empty loop and of course then you can even ask if you are like if",
    "start": "1400030",
    "end": "1406480"
  },
  {
    "text": "you're very smart kind of dog you can ask why then there is a loop right",
    "start": "1406480",
    "end": "1411880"
  },
  {
    "text": "and then the loop also goes away and this is called dead code elimination and the bet is in the sense that it does not",
    "start": "1411880",
    "end": "1418809"
  },
  {
    "text": "do anything observable anything useful anything used by the subsequent code and",
    "start": "1418809",
    "end": "1425650"
  },
  {
    "text": "the example from before with a split of a string Firefox is actually smart",
    "start": "1425650",
    "end": "1431620"
  },
  {
    "text": "enough to understand that splitting is constant string by the variable by the",
    "start": "1431620",
    "end": "1436780"
  },
  {
    "text": "sum call other constant string and taking the lengths of the resulting array it doesn't actually do anything",
    "start": "1436780",
    "end": "1442470"
  },
  {
    "text": "observable from the outside so this is all completely removed and eliminated if",
    "start": "1442470",
    "end": "1448660"
  },
  {
    "text": "you assign this value to the two somewhere then it's a different situation so what you should have",
    "start": "1448660",
    "end": "1456160"
  },
  {
    "text": "figured out from this small intro is that optimizers they eat micro benchmarks for breakfast and for lunch",
    "start": "1456160",
    "end": "1463030"
  },
  {
    "text": "and dinner and in the night they also wake up and eat them and some people",
    "start": "1463030",
    "end": "1468850"
  },
  {
    "text": "really want to create a to proof micro benchmarks that the optimizer scanted my",
    "start": "1468850",
    "end": "1474730"
  },
  {
    "text": "recommendation is usually to not that at all like just find something more useful to do fix some bugs in your",
    "start": "1474730",
    "end": "1480519"
  },
  {
    "text": "code but if you really want to at least try then you should follow some very",
    "start": "1480519",
    "end": "1487059"
  },
  {
    "text": "simple requirements you should try to avoid this very common optimization so wait constants and loop invariants in",
    "start": "1487059",
    "end": "1493269"
  },
  {
    "text": "the dead code and for the love of God verify the results of the benchmark that you are doing because many people just",
    "start": "1493269",
    "end": "1498909"
  },
  {
    "text": "write some benchmark but actually not doing what they expect to do at all because they don't check the results and checking the results also combats dead",
    "start": "1498909",
    "end": "1506590"
  },
  {
    "text": "code stuff because you're now using your computed values so we can try to fix",
    "start": "1506590",
    "end": "1514119"
  },
  {
    "text": "this benchmark by doing by applying these rules we create two non constant",
    "start": "1514119",
    "end": "1519429"
  },
  {
    "text": "values and we start swapping them in the loop to confuse the compiler so that the",
    "start": "1519429",
    "end": "1524590"
  },
  {
    "text": "variable we apply the double till the two is no longer loop invariant and then",
    "start": "1524590",
    "end": "1531460"
  },
  {
    "text": "then we check that everything is kind of good to use the result of the double tilden operation and this is not bad",
    "start": "1531460",
    "end": "1540190"
  },
  {
    "text": "usually should be enough to actually measure something but if you have a really smart compiler and our hope is",
    "start": "1540190",
    "end": "1547029"
  },
  {
    "text": "that in the future all the compilers will be very smart then it's potentially still not enough",
    "start": "1547029",
    "end": "1552990"
  },
  {
    "text": "because they what compilers can do is that they can take this loop and say hey what about if I do twice as less",
    "start": "1552990",
    "end": "1560799"
  },
  {
    "text": "iterations but I repeat the body inside twice so some compiler C++ compilers do",
    "start": "1560799",
    "end": "1565899"
  },
  {
    "text": "that all the time to small loops and what happens now is that you swap and then you swap again and that's as if you",
    "start": "1565899",
    "end": "1572860"
  },
  {
    "text": "never swapped anything so the values again become loop invariant for this loop and because they loop invariant you",
    "start": "1572860",
    "end": "1579940"
  },
  {
    "text": "end up with some dead code and some invariant code and again not measuring anything so this optimization is called",
    "start": "1579940",
    "end": "1586090"
  },
  {
    "text": "loop unrolling v8 doesn't do it this light is actually like from 2012 I have",
    "start": "1586090",
    "end": "1593259"
  },
  {
    "text": "been giving this talking variance variance since 2012 and it still doesn't do it but I want to induce paranoids in",
    "start": "1593259",
    "end": "1600429"
  },
  {
    "text": "2012 in two people the fear of God the way you should approach the codes like",
    "start": "1600429",
    "end": "1607059"
  },
  {
    "text": "you saw that VMs are relatively good in optimizing things so you should approach your javascript",
    "start": "1607059",
    "end": "1612130"
  },
  {
    "text": "code with the presumption of performance so the presumption of performance is that if you write reasonable code it",
    "start": "1612130",
    "end": "1617260"
  },
  {
    "text": "should be reasonable fast and if it's not reasonably fast then the VM is at fault not you but people also have the",
    "start": "1617260",
    "end": "1625809"
  },
  {
    "text": "thing called confirmation bias which is they think that something is slow and",
    "start": "1625809",
    "end": "1631960"
  },
  {
    "text": "they write some benchmark and the benchmark service and the their code is reasonable but but their performance of",
    "start": "1631960",
    "end": "1638380"
  },
  {
    "text": "this code is bad and they say okay I know this feature of the language is slow so I will not go and I will not",
    "start": "1638380",
    "end": "1644320"
  },
  {
    "text": "tell anybody that this is slow I will write a blog post that will warn everybody else from using this language",
    "start": "1644320",
    "end": "1649720"
  },
  {
    "text": "feature for example there is this presumption that prototype chains are",
    "start": "1649720",
    "end": "1655090"
  },
  {
    "text": "slow and people write benchmarks like that they say okay I create a deeply",
    "start": "1655090",
    "end": "1661929"
  },
  {
    "text": "nested prototype chain how many people know what object.create does I'm just checking that nobody's sleeping there",
    "start": "1661929",
    "end": "1667750"
  },
  {
    "text": "how many how many people know what object what how many of you write JavaScript actually okay so not that",
    "start": "1667750",
    "end": "1674590"
  },
  {
    "text": "many I see I see so object.create creates the object with a given prototype and then if you nest that you get a deeply nested prototype",
    "start": "1674590",
    "end": "1681100"
  },
  {
    "text": "chain there is a least tributon on this slide as well so how many people know at",
    "start": "1681100",
    "end": "1687850"
  },
  {
    "text": "least at least yeah okay okay yeah hooray for lease so and then they write",
    "start": "1687850",
    "end": "1693220"
  },
  {
    "text": "this triply nested loop for whatever reason it's triply nested I don't know and then they access this property on",
    "start": "1693220",
    "end": "1698410"
  },
  {
    "text": "the prototype of a prototype of a prototype of a prototype and they measure how much it takes outside of",
    "start": "1698410",
    "end": "1705130"
  },
  {
    "text": "this function call and then they write another function that cashes the value of this property outside of this loop",
    "start": "1705130",
    "end": "1711730"
  },
  {
    "text": "and you just use the variable inside and then the state-of-art benchmark driver",
    "start": "1711730",
    "end": "1717070"
  },
  {
    "text": "is in the game as well which calls this function the measures how long it takes and you measure it and you discover that",
    "start": "1717070",
    "end": "1726130"
  },
  {
    "text": "indeed if you look up the property on the prototype many many many times it's",
    "start": "1726130",
    "end": "1732040"
  },
  {
    "text": "eight times slower than just looking it up once and caching the result and you",
    "start": "1732040",
    "end": "1739630"
  },
  {
    "text": "write a blog post this is literally taken from a blog post which says don't use prototype they are slow with a big stamp on it",
    "start": "1739630",
    "end": "1750180"
  },
  {
    "text": "then of course I come and I say ok how about I make it harder what if instead",
    "start": "1750180",
    "end": "1755740"
  },
  {
    "text": "of putting a normal property on the deeply nested prototype I put the getter on the prototype and of course everybody",
    "start": "1755740",
    "end": "1761890"
  },
  {
    "text": "heard that getters are slower than normal properties and then there is a prototypes in the thing so it should be",
    "start": "1761890",
    "end": "1767410"
  },
  {
    "text": "many millions billions times slower right turns out it is actually faster to",
    "start": "1767410",
    "end": "1775210"
  },
  {
    "text": "make it a getter and people are really flabbergasted by this and they say you",
    "start": "1775210",
    "end": "1781540"
  },
  {
    "text": "are a dark wizard or some sort but you can look in the generated code so this",
    "start": "1781540",
    "end": "1786850"
  },
  {
    "text": "is the screenshot of my tool called our Hydra which shows you what code is kind of generated this is an intermediate",
    "start": "1786850",
    "end": "1792070"
  },
  {
    "text": "representation used by the compiler and you can see that if you make it a getter then suddenly it's inline into the loop",
    "start": "1792070",
    "end": "1799080"
  },
  {
    "text": "it says enter in line leaving line and there is nothing in between those so the because it was just returning a constant",
    "start": "1799080",
    "end": "1805870"
  },
  {
    "text": "right and then that constant is just added to this counter thing again and",
    "start": "1805870",
    "end": "1810970"
  },
  {
    "text": "again so somehow once we made it a getter it got in line and the same",
    "start": "1810970",
    "end": "1819100"
  },
  {
    "text": "wasn't happening with the normal property it was doing this it was",
    "start": "1819100",
    "end": "1824290"
  },
  {
    "text": "calling this very scary thing called load named generic and looking it up every time again and again in the loop",
    "start": "1824290",
    "end": "1831360"
  },
  {
    "text": "so it turns out that the blog post was based on the very very very old v8 which",
    "start": "1831360",
    "end": "1837640"
  },
  {
    "text": "could not handle the properties defined on the prototypes as well as they could",
    "start": "1837640",
    "end": "1843370"
  },
  {
    "text": "kind it could handle the getters defined on the prototypes so gathers it could inline and everything was very good but",
    "start": "1843370",
    "end": "1849220"
  },
  {
    "text": "the property it would look up through this very slow process again and again if you try the newer v8 then everything",
    "start": "1849220",
    "end": "1857980"
  },
  {
    "text": "is actually kind of good and the performance is the same because the newer v8 can handle that well and when I",
    "start": "1857980",
    "end": "1865840"
  },
  {
    "text": "say you were it's from 2013 maybe somebody was using note ole dot 4 dot",
    "start": "1865840",
    "end": "1872620"
  },
  {
    "text": "something which used the nation to eat ok everything is good everybody",
    "start": "1872620",
    "end": "1878350"
  },
  {
    "text": "rejoicing and the the thing that you should observe here is that the prototype chain traversal code that goes",
    "start": "1878350",
    "end": "1885340"
  },
  {
    "text": "up the prototype and finds where the properties good loop invariant code moved somewhere out of the loop and",
    "start": "1885340",
    "end": "1890470"
  },
  {
    "text": "you're not measuring anything again I essentially so okay let's do something",
    "start": "1890470",
    "end": "1896289"
  },
  {
    "text": "completely different well actually the same so what if I run the same benchmark twice like I measured",
    "start": "1896289",
    "end": "1901960"
  },
  {
    "text": "the same function twice for the first benchmark and for the second benchmark as well expectation is that nothing",
    "start": "1901960",
    "end": "1908620"
  },
  {
    "text": "changes maybe it becomes a little bit faster because there is no cost of optimization anymore turns out no it's actually become slower",
    "start": "1908620",
    "end": "1915390"
  },
  {
    "text": "for some strange reason and I was showing you before that compilers are so",
    "start": "1915390",
    "end": "1922630"
  },
  {
    "text": "smart and everything is good and you can dance and be happy and write whatever code you want but actually compiler is",
    "start": "1922630",
    "end": "1927909"
  },
  {
    "text": "also very complex so they have bugs of all sorts inside and that's what I am trying to show you that they're full of",
    "start": "1927909",
    "end": "1933909"
  },
  {
    "text": "bugs and you should be ready to face those bugs so what happened so we can",
    "start": "1933909",
    "end": "1941440"
  },
  {
    "text": "again use the error Hydra and we can see that there are many versions of the same function produced by the optimizing",
    "start": "1941440",
    "end": "1946929"
  },
  {
    "text": "compiler and the red color means it the optimized and I need you optimized again and then there is a purple color which",
    "start": "1946929",
    "end": "1953679"
  },
  {
    "text": "also means you optimize but a different sort of the optimization and then it produced a version that is that was used",
    "start": "1953679",
    "end": "1961330"
  },
  {
    "text": "after that and did not be optimized again so it's a the optimizations reached a stable point but when we look",
    "start": "1961330",
    "end": "1967630"
  },
  {
    "text": "at what kind of stable point it reached we find that it's a very strange stable",
    "start": "1967630",
    "end": "1974770"
  },
  {
    "text": "point so the counter variable which accumulates the the some of our optional prop access it is now boxed so you load",
    "start": "1974770",
    "end": "1983860"
  },
  {
    "text": "it from the thing you add it and then you box the counter again and again and",
    "start": "1983860",
    "end": "1988900"
  },
  {
    "text": "the boxing so v8 uses this representation of numbers of doubles that is boxed so you store them in a",
    "start": "1988900",
    "end": "1995470"
  },
  {
    "text": "heap object allocated on the heap and you store it in there and you allocate a new one every loop iteration of course",
    "start": "1995470",
    "end": "2001049"
  },
  {
    "text": "that is expensive you produce a lot of garbage and that's why it stabilized on a much lower version so you can dig",
    "start": "2001049",
    "end": "2009030"
  },
  {
    "text": "through the bead bug tracker and find the back and what was happening is that the the there is there was at the very end of",
    "start": "2009030",
    "end": "2015630"
  },
  {
    "text": "the benchmark the the line that was printing the counter and it turns out this line was causing all kinds of",
    "start": "2015630",
    "end": "2022530"
  },
  {
    "text": "shenanigans happenin in the v-8 internals and there was a workaround for",
    "start": "2022530",
    "end": "2030870"
  },
  {
    "text": "it you just need to hide the fact that you are aiding this variable to something for example you could have",
    "start": "2030870",
    "end": "2035910"
  },
  {
    "text": "forced converted it to string with a method call and then this inference that tries to figure out how to represent",
    "start": "2035910",
    "end": "2041790"
  },
  {
    "text": "variables in the code like which ones to put on the machine registers as a unboxed doubles for example it would no",
    "start": "2041790",
    "end": "2048990"
  },
  {
    "text": "longer be confused and then everything would run just again just fast this back",
    "start": "2048990",
    "end": "2054600"
  },
  {
    "text": "was fixed so don't put two string anywhere so most of the box that I'm",
    "start": "2054600",
    "end": "2060540"
  },
  {
    "text": "showing you they're fixed so you don't have to use any work around here is for",
    "start": "2060540",
    "end": "2066510"
  },
  {
    "text": "something unfixed kind of so I can stack overflow question somebody tries to measure what is like how much it costs",
    "start": "2066510",
    "end": "2076530"
  },
  {
    "text": "to use getters and setters on the object and they write this benchmark and I will",
    "start": "2076530",
    "end": "2082440"
  },
  {
    "text": "accelerate a little bit to make it on time and on the newer v8 it's three",
    "start": "2082440",
    "end": "2088158"
  },
  {
    "text": "whatever three I know is it million I can't read numbers million right yes",
    "start": "2088159",
    "end": "2094110"
  },
  {
    "text": "three million operations per second and on an older v8 it is considerably faster",
    "start": "2094110",
    "end": "2100460"
  },
  {
    "text": "like it's eight hundred million right and of course you are again very",
    "start": "2100460",
    "end": "2107340"
  },
  {
    "text": "surprised what's happening here because pendo v8 people work work work and make",
    "start": "2107340",
    "end": "2112470"
  },
  {
    "text": "everything slower right maybe it's time to retire so if you take this and write",
    "start": "2112470",
    "end": "2119850"
  },
  {
    "text": "it like remove the benchmark J's from the picture and you just write this function that that's what the benchmark",
    "start": "2119850",
    "end": "2125490"
  },
  {
    "text": "does define some getter setters and try it in a loop again and again and you run",
    "start": "2125490",
    "end": "2130950"
  },
  {
    "text": "it once this function and you run it twice and it slows down by a factor of 100 on v8 so yeah again our helpful",
    "start": "2130950",
    "end": "2138570"
  },
  {
    "text": "guide that is very surprised there there is a thing called the fast representation of objects in v8 and",
    "start": "2138570",
    "end": "2144870"
  },
  {
    "text": "there is a to check whether your object has a fast representation is to use these internal functions you need to build v8 and run",
    "start": "2144870",
    "end": "2150329"
  },
  {
    "text": "through the special flag but you can check it and if you run it with a",
    "start": "2150329",
    "end": "2155700"
  },
  {
    "text": "special FAQ and use that percent as fast proper testing you discover that when you call this function the second time",
    "start": "2155700",
    "end": "2161220"
  },
  {
    "text": "the object that is created is doesn't have a fast or property representation and that's why it slows down so much",
    "start": "2161220",
    "end": "2168289"
  },
  {
    "text": "there is a complicated thing happening here I don't want to go into the theory details but how you could work around it",
    "start": "2168289",
    "end": "2175920"
  },
  {
    "text": "is to call object or create on this object so there is some internal machinery that",
    "start": "2175920",
    "end": "2181500"
  },
  {
    "text": "says if you put an object as a prototype to another object here when we are not even using there is out of object dot",
    "start": "2181500",
    "end": "2187619"
  },
  {
    "text": "create then the v8 force converts it to the fast representation again so you can",
    "start": "2187619",
    "end": "2194730"
  },
  {
    "text": "call it once call it twice does not slow down anymore call three four times does",
    "start": "2194730",
    "end": "2199799"
  },
  {
    "text": "install then slows down so because there is some polymorphous limit reached and",
    "start": "2199799",
    "end": "2205519"
  },
  {
    "text": "polymorphisms limit reached in the generated code okay you can say okay I",
    "start": "2205519",
    "end": "2211829"
  },
  {
    "text": "will go to the old-school methods of creating getters and setters I will just write it manually like the our ancestors",
    "start": "2211829",
    "end": "2219059"
  },
  {
    "text": "did in 1900 so it turns out that's okay",
    "start": "2219059",
    "end": "2224460"
  },
  {
    "text": "but it's still not as fast as the the fastest possible case right but at least",
    "start": "2224460",
    "end": "2229980"
  },
  {
    "text": "it does not have these strange drops it's kind of predictable so you can then",
    "start": "2229980",
    "end": "2235980"
  },
  {
    "text": "turn to an object-oriented approach if you were ever a Java programmer then you can say okay object orientation is the",
    "start": "2235980",
    "end": "2241710"
  },
  {
    "text": "answer to everything if if one class is not enough make two classes in the factory and here I create a box which",
    "start": "2241710",
    "end": "2249359"
  },
  {
    "text": "boxes our value and then I have getter and setter on this and then I create this box oh that there is a yeah that's",
    "start": "2249359",
    "end": "2257009"
  },
  {
    "text": "how it is so it's it's almost equivalent to our previous code and that's actually",
    "start": "2257009",
    "end": "2262680"
  },
  {
    "text": "the fastest way to do it in v8 v8 is really optimized for this style of object-oriented programming where you",
    "start": "2262680",
    "end": "2268470"
  },
  {
    "text": "have some classes and you have some methods on the prototypes and stuff like that so I don't know you're happy I'm",
    "start": "2268470",
    "end": "2275430"
  },
  {
    "text": "kind of happy but I know depends on your programming style maybe you have taught that so that's why it's important to know",
    "start": "2275430",
    "end": "2281640"
  },
  {
    "text": "fundamentals and you can look into other VMs as well so this talk is about to be 8 mostly and about to be 8 bucks but it",
    "start": "2281640",
    "end": "2288270"
  },
  {
    "text": "doesn't matter that you cannot do the same for the other VMs so javascript core you can build javascriptcore on the",
    "start": "2288270",
    "end": "2294270"
  },
  {
    "text": "Mac easily just check out some source and build it and it also has this drop-off when you call the first version",
    "start": "2294270",
    "end": "2300660"
  },
  {
    "text": "of function it's very fast very fast then a little bit slower and that's",
    "start": "2300660",
    "end": "2306450"
  },
  {
    "text": "because you can again you can ask it to print you the intermediate representations that the compiler uses in all kinds of stuff",
    "start": "2306450",
    "end": "2312359"
  },
  {
    "text": "and look at it and like if you know how to read the v8 disassembly and stuff",
    "start": "2312359",
    "end": "2319349"
  },
  {
    "text": "like that it's easy to read the JavaScript core stuff as well so there are a lot of code I don't want you to",
    "start": "2319349",
    "end": "2325589"
  },
  {
    "text": "read it all I will remove all the stuff that it doesn't matter but you can see",
    "start": "2325589",
    "end": "2330630"
  },
  {
    "text": "that in the first version it's just check some preconditions and then it's in lines the set called and Inter lines",
    "start": "2330630",
    "end": "2338700"
  },
  {
    "text": "the get call as well and it says known kohli so everything is good but after the third call in the third call that",
    "start": "2338700",
    "end": "2345480"
  },
  {
    "text": "says ok I will no longer do any inlining I will just start calling through the generic call method and then that's why",
    "start": "2345480",
    "end": "2351240"
  },
  {
    "text": "it slows down because there are some counters like polymorphism limit reached",
    "start": "2351240",
    "end": "2357440"
  },
  {
    "text": "that's why it's slower ok the short time we have a little bit of time I will I",
    "start": "2357440",
    "end": "2363480"
  },
  {
    "text": "will I will be fast so somebody tried to measure whether the function call is the faster than the method call or the other",
    "start": "2363480",
    "end": "2369000"
  },
  {
    "text": "way around so they created a function that does some hashing of some strings doesn't matter what it does and then",
    "start": "2369000",
    "end": "2375030"
  },
  {
    "text": "they put this function on the prototype of some object in the Java Java style",
    "start": "2375030",
    "end": "2380579"
  },
  {
    "text": "again so you have an object with a method an object doesn't contain anything just this method and then you",
    "start": "2380579",
    "end": "2387270"
  },
  {
    "text": "compare you run this function on some strings and then you run this method which is just the same function on some strings and it turns out that the",
    "start": "2387270",
    "end": "2394440"
  },
  {
    "text": "function is considerably slower and the method is faster so object-oriented programming wins again Oh to to the",
    "start": "2394440",
    "end": "2403319"
  },
  {
    "text": "object-oriented programming so we can ask this question and please don't show",
    "start": "2403319",
    "end": "2409920"
  },
  {
    "text": "anybody what I'm going to show you now it's it's us go to attendees so if you take this",
    "start": "2409920",
    "end": "2416880"
  },
  {
    "text": "benchmark prototype setup function which was setting up our benchmark and you just add these strings inside there like",
    "start": "2416880",
    "end": "2422969"
  },
  {
    "text": "this video JavaScript with this one weird trick and then you run it again",
    "start": "2422969",
    "end": "2428119"
  },
  {
    "text": "then it's the same performance between function in the method so obviously something is not really right here again",
    "start": "2428119",
    "end": "2436109"
  },
  {
    "text": "our helpful phase so if we look in the IR hider what was happening is that",
    "start": "2436109",
    "end": "2441589"
  },
  {
    "text": "function benchmark was actually never optimized at all so it was running in the unoptimized version which is",
    "start": "2441589",
    "end": "2447450"
  },
  {
    "text": "considerably slowed and optimized version and that's why it was slower and there's an explanation but I all",
    "start": "2447450",
    "end": "2453119"
  },
  {
    "text": "summarized it for you as yada-yada yada-yada so the the the thing is that function",
    "start": "2453119",
    "end": "2459569"
  },
  {
    "text": "call and the method call were done differently in the v8 and the optimisation just was not triggering it",
    "start": "2459569",
    "end": "2464789"
  },
  {
    "text": "was not counting the right thing to count and adding the adding the stuff",
    "start": "2464789",
    "end": "2470880"
  },
  {
    "text": "that I added just cause it to be optimized because it started counting the right things this is kind of fixed",
    "start": "2470880",
    "end": "2477630"
  },
  {
    "text": "so shouldn't be a problem anymore again and but the thing is that we again",
    "start": "2477630",
    "end": "2483089"
  },
  {
    "text": "measuring the empty loop because if we look in the ire Hydra what's happening the whole hashing code was moved out because the strings that we were hashing",
    "start": "2483089",
    "end": "2489859"
  },
  {
    "text": "were constants so all the XS is that the constant indices like lengths is a",
    "start": "2489859",
    "end": "2495630"
  },
  {
    "text": "constant of if it's a constant string and stuff like that everything was moved out some of it were computed and fold it",
    "start": "2495630",
    "end": "2501709"
  },
  {
    "text": "so can it be the other way around so this is the last kind of slides because",
    "start": "2501709",
    "end": "2507599"
  },
  {
    "text": "I'm running out of time so I work on dark now and I work on the dart VM but",
    "start": "2507599",
    "end": "2515459"
  },
  {
    "text": "the people who do the compiler from dart to JavaScript they come to me and ask questions sometimes because I used to work on v8 and they they were compiling",
    "start": "2515459",
    "end": "2521999"
  },
  {
    "text": "the for foreign loop into JavaScript and they were producing this code and there",
    "start": "2521999",
    "end": "2528269"
  },
  {
    "text": "is this helpful check in there which is checking that you are not modifying the array because that's that's the the job",
    "start": "2528269",
    "end": "2534539"
  },
  {
    "text": "this dart semantics and you want to throw an exception when you modify right",
    "start": "2534539",
    "end": "2540239"
  },
  {
    "text": "here in the iteration and they said there is a check and it of",
    "start": "2540239",
    "end": "2546570"
  },
  {
    "text": "cost something so if we comment it out its 18% faster and can you help us and",
    "start": "2546570",
    "end": "2555690"
  },
  {
    "text": "make it somehow 18% faster without commenting it out and I said well no",
    "start": "2555690",
    "end": "2560940"
  },
  {
    "text": "problem you take your code and then you write it like that so you replace the method call with",
    "start": "2560940",
    "end": "2567480"
  },
  {
    "text": "something strange here so if you know just keep semantics and the coma operator returns the the last evaluated",
    "start": "2567480",
    "end": "2575400"
  },
  {
    "text": "expression which is this function to call and then you call it and this code is never executed because this is just",
    "start": "2575400",
    "end": "2581040"
  },
  {
    "text": "an exception that never gets flying out gets to fly out of this code because you never modified the array and somehow it",
    "start": "2581040",
    "end": "2588000"
  },
  {
    "text": "makes it faster like I measured it and it really makes it faster and just to",
    "start": "2588000",
    "end": "2595710"
  },
  {
    "text": "summarize so somehow we speed up the code by 18% by replacing the method call with some strange stuff that looks like",
    "start": "2595710",
    "end": "2601650"
  },
  {
    "text": "a person who's one I was like something else strange happened to it and and in",
    "start": "2601650",
    "end": "2608580"
  },
  {
    "text": "the code that never execute and we sped up everything so what is happening there",
    "start": "2608580",
    "end": "2615210"
  },
  {
    "text": "is that we does not know what so this code was never executed and we it really relies on the information collected by",
    "start": "2615210",
    "end": "2622950"
  },
  {
    "text": "the executed code to optimize it and because it was never executed it doesn't know what's happening there and the",
    "start": "2622950",
    "end": "2630210"
  },
  {
    "text": "method non executed method calls and non executed property accesses were treated differently in the v8 so I replaced the",
    "start": "2630210",
    "end": "2636720"
  },
  {
    "text": "non executed method call and within non executed property taxes and it just helped to optimize it it helped it to",
    "start": "2636720",
    "end": "2642030"
  },
  {
    "text": "understand that that was never executed and helped it to understand that the",
    "start": "2642030",
    "end": "2647550"
  },
  {
    "text": "lengths never changes because like v8 can see that there is only array access and no functions calls and in the in the",
    "start": "2647550",
    "end": "2652920"
  },
  {
    "text": "code so it can just assume that this is all that code and make it that and yeah",
    "start": "2652920",
    "end": "2659070"
  },
  {
    "text": "so this is explanation doesn't matter so I really recommend to take a look on",
    "start": "2659070",
    "end": "2664530"
  },
  {
    "text": "your algorithms first and then start micro benchmarking and wait a second so",
    "start": "2664530",
    "end": "2670880"
  },
  {
    "text": "there was a first example with this and a strange use awesome directive again we",
    "start": "2670880",
    "end": "2676350"
  },
  {
    "text": "can look at it in the our high drain discover that the v8 was continuously optimizing the",
    "start": "2676350",
    "end": "2681990"
  },
  {
    "text": "function where we inlined all the stuff inside and there was the up market in a strange place saying strange things and",
    "start": "2681990",
    "end": "2688920"
  },
  {
    "text": "if you see the code like that if you see the situation like that where your functions continuously being the",
    "start": "2688920",
    "end": "2694200"
  },
  {
    "text": "optimized and optimizations never stabilize then you should just go and file a v8 back really because it's a v8 back not your back and there is a gain",
    "start": "2694200",
    "end": "2704190"
  },
  {
    "text": "explanation doesn't matter there is a more sane walk around and put in this huge comment so the reason why the huge",
    "start": "2704190",
    "end": "2709770"
  },
  {
    "text": "comment worked is that because we ate in relies on the size of the source code to make inlining decisions due to some",
    "start": "2709770",
    "end": "2716369"
  },
  {
    "text": "historical artifacts which would be eventually fixed I suspect there is a",
    "start": "2716369",
    "end": "2722340"
  },
  {
    "text": "much sane work around instead of disabling inlining is to just add some truncation to this load from the array",
    "start": "2722340",
    "end": "2730640"
  },
  {
    "text": "so please never assume that language feature has to be slow do go and demand",
    "start": "2730640",
    "end": "2736560"
  },
  {
    "text": "from your like closest senators or whatever and people in the parliament to",
    "start": "2736560",
    "end": "2741750"
  },
  {
    "text": "make jaws good features fast right the bugs in the v8 bug tracker and VM people",
    "start": "2741750",
    "end": "2747210"
  },
  {
    "text": "are really your friends I am your friend even though I'm not a v8 person anymore",
    "start": "2747210",
    "end": "2752280"
  },
  {
    "text": "so remember to rate this session whatever thank you very much for your attention",
    "start": "2752280",
    "end": "2757640"
  },
  {
    "text": "you",
    "start": "2759269",
    "end": "2761329"
  }
]