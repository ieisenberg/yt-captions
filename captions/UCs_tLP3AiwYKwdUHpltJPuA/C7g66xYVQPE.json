[
  {
    "start": "0",
    "end": "323000"
  },
  {
    "text": "[Music]",
    "start": "2540",
    "end": "9920"
  },
  {
    "text": "this is so I'm Dean wer I work for light Bend which is the company behind SC and",
    "start": "9920",
    "end": "15559"
  },
  {
    "text": "I actually do big data for Scola at light Ben because it turns out that",
    "start": "15559",
    "end": "21039"
  },
  {
    "text": "Scola kind of suddenly found its maybe best niche in the Big Data World almost",
    "start": "21039",
    "end": "27599"
  },
  {
    "text": "by accident because a lot of the big Source projects like spark and Kaa",
    "start": "27599",
    "end": "33079"
  },
  {
    "text": "written in Scala and then it turns out you know let's say a subset certainly not the majority but there's a certain",
    "start": "33079",
    "end": "39600"
  },
  {
    "text": "core of people who actually really like Scola for data science so typically Big Data environments break up into let's",
    "start": "39600",
    "end": "46360"
  },
  {
    "text": "call them three groups there's always the operations people who keep things running can't forget about those guys Al",
    "start": "46360",
    "end": "54320"
  },
  {
    "text": "um then there's like the engineers who design the plumbing who know how to make kco work we know how to bug stack traces",
    "start": "54320",
    "end": "61199"
  },
  {
    "text": "and Spark which is actually a core confidency things like that and then they're the data scientists are the ones",
    "start": "61199",
    "end": "66880"
  },
  {
    "text": "who do like the machine learning models the statistics and all that and it's more common even in spark to work in",
    "start": "66880",
    "end": "73799"
  },
  {
    "text": "Python and R languages like that for data science that's what they're used to",
    "start": "73799",
    "end": "79000"
  },
  {
    "text": "but um you know developers are going to stick with typical jbm languages like bit or more jbm Centric like Java and",
    "start": "79000",
    "end": "86360"
  },
  {
    "text": "Scola and we've seen at light bend that The Spar in particular because it's so",
    "start": "86360",
    "end": "92000"
  },
  {
    "text": "hot right now it's been driving adoption of schola but this is really a talk about why well it's kind of a mix talk",
    "start": "92000",
    "end": "99360"
  },
  {
    "text": "in a way it's it's why is Scola really nice for Big Data but also in general",
    "start": "99360",
    "end": "104880"
  },
  {
    "text": "what are some of the advantages it has over otheres so there a little bit of something for everyone this one only",
    "start": "104880",
    "end": "111040"
  },
  {
    "text": "three slides and then I'm going to do just demos the whole time uh the first one is the usual reminder to you know",
    "start": "111040",
    "end": "117520"
  },
  {
    "text": "rate the session um post questions to the speaker thing I'll quickly grab it",
    "start": "117520",
    "end": "123439"
  },
  {
    "text": "when we're done or we can just do it the old fashion way uh and any feedback",
    "start": "123439",
    "end": "129160"
  },
  {
    "text": "you'll put it in there as well let to see it uh and when you get the slides U the",
    "start": "129160",
    "end": "135280"
  },
  {
    "text": "the thing I'm going to demonstrate will all be at this G repo scholar for data",
    "start": "135280",
    "end": "140640"
  },
  {
    "text": "science in my GI account and that's it for the slides maybe I'll put that back",
    "start": "140640",
    "end": "146680"
  },
  {
    "text": "up at the end but uh what we're going to do actually is using a notebook metaphor",
    "start": "146680",
    "end": "151879"
  },
  {
    "text": "for the demonstration so this is something that's not too familiar to most developers but data scientists love",
    "start": "151879",
    "end": "157800"
  },
  {
    "text": "these things it's really an electronic version of what scientists have been doing forever which is you know keeping",
    "start": "157800",
    "end": "164159"
  },
  {
    "text": "lab notes and notebooks you guys probably did this in like chemistry and physics classes the nice thing about",
    "start": "164159",
    "end": "171239"
  },
  {
    "text": "them is you can do stuff like you know inter leave commentary if I go to the",
    "start": "171239",
    "end": "176640"
  },
  {
    "text": "top of this this is all marked down you I can add usual markdown way that I can embed code and run that intermix that",
    "start": "176640",
    "end": "185120"
  },
  {
    "text": "and even do graphs you know plot data and so forth so as you can imagine if you're a data scientist especially like",
    "start": "185120",
    "end": "191200"
  },
  {
    "text": "the plotting part can be really great but any language that supports a reppel you know an interpreter it's really nice",
    "start": "191200",
    "end": "197959"
  },
  {
    "text": "to I think to work in this way if you've ever spent a lot of time working in in in a you know interpreter for any of the",
    "start": "197959",
    "end": "204799"
  },
  {
    "text": "languages except Java like python Scola closure Ruby after a while it gets",
    "start": "204799",
    "end": "210519"
  },
  {
    "text": "really tedious it's great for messing around a little bit but you know what if I want to edit something and rerun it it",
    "start": "210519",
    "end": "216120"
  },
  {
    "text": "gets to be difficult notebooks actually take you a lot farther I can easily go back and you know edit a line rerun that",
    "start": "216120",
    "end": "223360"
  },
  {
    "text": "cell as they're called in this particular notebook uh re-evaluate everything if I want to and so forth so that's why I",
    "start": "223360",
    "end": "230120"
  },
  {
    "text": "decided to do this particular demo because it's partly aimed at that's um",
    "start": "230120",
    "end": "235200"
  },
  {
    "text": "maybe people who aren't used to using these to sort of evangelize the idea but also to um show how useful they are so",
    "start": "235200",
    "end": "242799"
  },
  {
    "text": "I've actually got a couple here this particular notebook happens to be for a a spark exercise that I wrote for some",
    "start": "242799",
    "end": "250879"
  },
  {
    "text": "training like like Ben did you know Shameless plug if you want to buy training from us we can sell you that",
    "start": "250879",
    "end": "256040"
  },
  {
    "text": "too um but actually the reason I brought this up is uh really to show you sort of what a real notebook actually looks like",
    "start": "256040",
    "end": "263040"
  },
  {
    "text": "I'm using a particular notebook environment called spark notebook that's sort of scol centric you may have heard",
    "start": "263040",
    "end": "268720"
  },
  {
    "text": "of Zeppelin which is much more popular actually in big data and you ever even",
    "start": "268720",
    "end": "273919"
  },
  {
    "text": "talk to a python person you probably heard of Jupiter or what do they call it",
    "start": "273919",
    "end": "279000"
  },
  {
    "text": "now oh was I python now they call it juper so but it's the same idea edit",
    "start": "279000",
    "end": "284120"
  },
  {
    "text": "cells evaluate them mixed documentation SQL queries anything like that together",
    "start": "284120",
    "end": "289600"
  },
  {
    "text": "to get the whole experience this particular notebook uh basically riffs",
    "start": "289600",
    "end": "294639"
  },
  {
    "text": "on on sort of the hello world of big data which is word count I've got a whole bunch of documents I'm going to",
    "start": "294639",
    "end": "299800"
  },
  {
    "text": "suck them in tokenize into words and then count all occurrences of the words you in the in the thing so it would be",
    "start": "299800",
    "end": "307120"
  },
  {
    "text": "like the very first thing you would write if you're building you know Google kill or some sort of search index like",
    "start": "307120",
    "end": "312880"
  },
  {
    "text": "that um actually no that would you wouldn't use word count you use the next thing which is called inverted index",
    "start": "312880",
    "end": "318560"
  },
  {
    "text": "because the problem with word count is you forget where you found stuff all you care about is counts the reason I",
    "start": "318560",
    "end": "324000"
  },
  {
    "start": "323000",
    "end": "455000"
  },
  {
    "text": "brought this up though is that um I had people in this exercise go through and",
    "start": "324000",
    "end": "329800"
  },
  {
    "text": "and uh tweak this algorithm a little bit to do uh additional things in this particular case they would count Words",
    "start": "329800",
    "end": "338080"
  },
  {
    "text": "uh get the counts and then they would group over the counts and what that means is how many words appear twice how",
    "start": "338080",
    "end": "344520"
  },
  {
    "text": "many appear three times how many peer 10,000 times that kind of stuff and what's interesting about this exercise",
    "start": "344520",
    "end": "351080"
  },
  {
    "text": "for data scientists is that it kind of gets to the the natural behavior of",
    "start": "351080",
    "end": "356960"
  },
  {
    "text": "language like some kinds of words appear all the time I hear a lot other words are much more rare but maybe more",
    "start": "356960",
    "end": "363440"
  },
  {
    "text": "interesting because they're more unique words and so here's just what a typical scholar program scholar spark looks like",
    "start": "363440",
    "end": "371800"
  },
  {
    "text": "there's some setup I did up front here but I'm basically loading some data that I had with this exercise tokenizing it",
    "start": "371800",
    "end": "378639"
  },
  {
    "text": "by words is what this is doing creating tles Word you know uh in this case",
    "start": "378639",
    "end": "385000"
  },
  {
    "text": "taking each word and making a tle out of it where the word is the key and then there's a seed count one reduced by key",
    "start": "385000",
    "end": "392000"
  },
  {
    "text": "is an optimized Group by that just grits all the words together because they're in the key position and sums up all",
    "start": "392000",
    "end": "398199"
  },
  {
    "text": "those counts so now I have my words and my counts and then the rest of the logic",
    "start": "398199",
    "end": "403479"
  },
  {
    "text": "for the next few lines is all right no I don't actually want to sort by words anymore now I want to sort by counts or",
    "start": "403479",
    "end": "409199"
  },
  {
    "text": "in this case Group by counts so this is this group by statement actually I make this a little bigger might be a little",
    "start": "409199",
    "end": "415319"
  },
  {
    "text": "hard to see in the back yeah that's a little better R by",
    "start": "415319",
    "end": "422080"
  },
  {
    "text": "key in this case because I've already said used the count as the key in the previous line now I'm going to get all",
    "start": "422080",
    "end": "427960"
  },
  {
    "text": "the groups of words together that appear twice or whatever sort them you know by",
    "start": "427960",
    "end": "433919"
  },
  {
    "text": "by this count uh in this case I'm sorting descending that's what the false means and then there's some final output",
    "start": "433919",
    "end": "439919"
  },
  {
    "text": "that I do and caching is an optimization what's interesting though about this data is that uh then you get down and I",
    "start": "439919",
    "end": "447720"
  },
  {
    "text": "write it out to files which is you know not that interesting uh if you'll let me get this",
    "start": "447720",
    "end": "455520"
  },
  {
    "start": "455000",
    "end": "667000"
  },
  {
    "text": "to scroll a little better go and if you actually plot this what",
    "start": "455520",
    "end": "461240"
  },
  {
    "text": "you find is that way down here it looks something",
    "start": "461240",
    "end": "467039"
  },
  {
    "text": "like this where you have some words that just appear an enormous number of times and then it quickly falls off so you get",
    "start": "467039",
    "end": "473479"
  },
  {
    "text": "something that looks useless I don't like I to interpret this but notice I'm graphing this data as I'm looking at and",
    "start": "473479",
    "end": "479800"
  },
  {
    "text": "I'm thinking how can I get something more meaningful out of this well the first thing that a typical data sciency",
    "start": "479800",
    "end": "486159"
  },
  {
    "text": "person scientist too would do is say you know maybe if I plot logs then that this",
    "start": "486159",
    "end": "491759"
  },
  {
    "text": "sort of extremity would disappear and this first one we're plotting um I think",
    "start": "491759",
    "end": "497919"
  },
  {
    "text": "it's just logs on one axis but the interesting one notice like an even embed latch this is the usual lch stuff",
    "start": "497919",
    "end": "504120"
  },
  {
    "text": "for those of you that like me wrote dissertation in latch any",
    "start": "504120",
    "end": "510199"
  },
  {
    "text": "um so I can ED formulas let me evaluate that cell again so you can see the formatting just disappear there it is so",
    "start": "510199",
    "end": "515839"
  },
  {
    "text": "it looks like you know regular map but if I actually dra log log it gets gives",
    "start": "515839",
    "end": "521000"
  },
  {
    "text": "me a straight line more or less except for a lot of noise that actually turns out to be a power LW distribution which",
    "start": "521000",
    "end": "529000"
  },
  {
    "text": "is the idea that some things really occur a lot and then other things tailor",
    "start": "529000",
    "end": "534279"
  },
  {
    "text": "off really fast and they tend to form a line and you know if you remember your",
    "start": "534279",
    "end": "539959"
  },
  {
    "text": "this was High School uh math you can calculate the slope of the line because",
    "start": "539959",
    "end": "545040"
  },
  {
    "text": "you took a log you can get the exponential Factor know is it really like going up as a factor the square or",
    "start": "545040",
    "end": "550760"
  },
  {
    "text": "whatever and then if you actually looked at this data in detail you'd notice that these things that appear a lot are words",
    "start": "550760",
    "end": "556839"
  },
  {
    "text": "like the he and you all the so-called stop words that nobody cares about because they don't tell you",
    "start": "556839",
    "end": "562839"
  },
  {
    "text": "anything this is this is actually the play of Shakespeare and if you go down here and look at these words which the",
    "start": "562839",
    "end": "569440"
  },
  {
    "text": "data the words are actually lost at this point you'd see that it's you know like hamlets and ofilia and U you know Henry",
    "start": "569440",
    "end": "577079"
  },
  {
    "text": "and those kind of more specific words anyway I just wanted to show you this to",
    "start": "577079",
    "end": "582200"
  },
  {
    "text": "point out why this these notebooks are attractive as a tool um but then it",
    "start": "582200",
    "end": "587560"
  },
  {
    "text": "raises the question well what's the best language here I use Scala but most people would use python or or maybe the",
    "start": "587560",
    "end": "594079"
  },
  {
    "text": "r language so instead I wrote another notebook that actually walks through of",
    "start": "594079",
    "end": "599680"
  },
  {
    "text": "these advantages of Scala over other languages the four that Sparks of fors",
    "start": "599680",
    "end": "606399"
  },
  {
    "text": "are Scala which it's written in Java Python and R and Java 8 is not so bad",
    "start": "606399",
    "end": "613200"
  },
  {
    "text": "because it has lambdas now if you didn't have lambas that that block of code where I was like grouping things",
    "start": "613200",
    "end": "619000"
  },
  {
    "text": "reducing that would have been like several hundred lines in Pre Java 8 and Java 8 would be maybe three times as",
    "start": "619000",
    "end": "625880"
  },
  {
    "text": "much but there's a bunch of things that just make it so fast to write these kind of data applications with really",
    "start": "625880",
    "end": "633160"
  },
  {
    "text": "relatively little amounts of code and Scola has a unique set of capabilities",
    "start": "633160",
    "end": "638680"
  },
  {
    "text": "that Ena that but then some of the other languages do too to a degree so this is really sort of an an essay if you will",
    "start": "638680",
    "end": "645279"
  },
  {
    "text": "and in the strengths and weaknesses of scholar I'll very specifically finish with weaknesses too because it's not",
    "start": "645279",
    "end": "652760"
  },
  {
    "text": "perfect well the first point is that it's Scola is kind of a nice uh",
    "start": "652760",
    "end": "658200"
  },
  {
    "text": "compromise or let's call it um let me make this full screen to get just a little more real estate",
    "start": "658200",
    "end": "665959"
  },
  {
    "text": "here screen there we go can see a little better now um people debate this in the",
    "start": "666800",
    "end": "673680"
  },
  {
    "start": "667000",
    "end": "1055000"
  },
  {
    "text": "functional programming world but it is kind of a nice pragmatic balancing of object-oriented and functional",
    "start": "673680",
    "end": "679600"
  },
  {
    "text": "programming it turns out that in my opinion um big data is really kind of the killer",
    "start": "679600",
    "end": "687120"
  },
  {
    "text": "app for functional programming you know 10 years ago when everyone was talking about it what they were obsessing over",
    "start": "687120",
    "end": "692839"
  },
  {
    "text": "was the end of Mor's law and suddenly we had to get better at concurrency and you",
    "start": "692839",
    "end": "697880"
  },
  {
    "text": "know people who were thinking about this problem realized you know actually sort of the functional style is better for concurrency because it emphasizes things",
    "start": "697880",
    "end": "705160"
  },
  {
    "text": "like functions that don't have side effects that only modify what you pass in or not not even modify but work with",
    "start": "705160",
    "end": "711600"
  },
  {
    "text": "what you pass in then return something new but don't change State um immutable",
    "start": "711600",
    "end": "716920"
  },
  {
    "text": "values where if I create an object in a state I'm never going to mutate it and risk having somebody mutate it",
    "start": "716920",
    "end": "722519"
  },
  {
    "text": "simultaneously leading to inconsistencies referential transparency is the idea that you know if if I call a",
    "start": "722519",
    "end": "730240"
  },
  {
    "text": "function with a value and it always gives me the same answer for that input then I can actually substitute a cached",
    "start": "730240",
    "end": "736600"
  },
  {
    "text": "answer in subsequent invocations and it also has implications for not only can I",
    "start": "736600",
    "end": "742800"
  },
  {
    "text": "do caching very nicely but I can even move that function around because it doesn't have much connection to the rest",
    "start": "742800",
    "end": "748320"
  },
  {
    "text": "of the world I call it anywhere once I know it's working higher order functions are the idea that you know if I can if",
    "start": "748320",
    "end": "755000"
  },
  {
    "text": "I'm doing a map over a list I pass a function to map the function is a value",
    "start": "755000",
    "end": "760120"
  },
  {
    "text": "it's called higher order because it's a function rather than a regular value and of course map applies that function to",
    "start": "760120",
    "end": "766399"
  },
  {
    "text": "each value in my list we'll see all examples of all of these if any of them aren't clear and then the really",
    "start": "766399",
    "end": "773360"
  },
  {
    "text": "interesting idea that's here I am I I do this all the time I double click things to highlight them and then it goes into",
    "start": "773360",
    "end": "779199"
  },
  {
    "text": "editor mode so I'll keep doing this with the so here's here's more markdown shut my mark down but the different idea from",
    "start": "779199",
    "end": "787040"
  },
  {
    "text": "aor programming that it's great to actually separate operations from structure so I can have like lists or",
    "start": "787040",
    "end": "794519"
  },
  {
    "text": "trees or maps and I can have iterators and you know map routines and flat",
    "start": "794519",
    "end": "799720"
  },
  {
    "text": "mappers and reducers and stuff and just uniformly apply them which turns out to",
    "start": "799720",
    "end": "804920"
  },
  {
    "text": "be fantastic for posing the kind of stuff that we build with data",
    "start": "804920",
    "end": "810959"
  },
  {
    "text": "but it turns out that pure functional programms tend to be weak on facilities for modularization you how do I actually",
    "start": "810959",
    "end": "817720"
  },
  {
    "text": "build up big applications and have nice boundaries so that I it's not just everything you know",
    "start": "817720",
    "end": "823160"
  },
  {
    "text": "Global and and the decision Scola and some other languages have made is to use to continue to use objects as a",
    "start": "823160",
    "end": "829720"
  },
  {
    "text": "modularity mechanism in in the case of java versus say F sharp or o",
    "start": "829720",
    "end": "835639"
  },
  {
    "text": "camel Martini who created scholar said all right we'll just basically let you do everything you can do in Java we",
    "start": "835639",
    "end": "841759"
  },
  {
    "text": "won't try to say only use objects in a certain way we'll give you full facility with objects but we'd really like to",
    "start": "841759",
    "end": "848399"
  },
  {
    "text": "encourage you to use functional programming whenever you can and use objects as your modularity tool and it",
    "start": "848399",
    "end": "854920"
  },
  {
    "text": "generally works pretty well if you kind of follow good practices that way uh a few of these cells here's",
    "start": "854920",
    "end": "861759"
  },
  {
    "text": "another cell actually you know Compares this to some of the other languages and most of what I just said is more or less",
    "start": "861759",
    "end": "868759"
  },
  {
    "text": "true of python you can do you know a nice balance of functional and object or",
    "start": "868759",
    "end": "873959"
  },
  {
    "text": "programming there if you want to Java is starting to catch up with now that they has lambas and now that they have",
    "start": "873959",
    "end": "880320"
  },
  {
    "text": "streams they give you more of a functional style collection interface if",
    "start": "880320",
    "end": "885360"
  },
  {
    "text": "you will the r language is written by statisticians so it doesn't really fit the usual paradigms of objectoriented",
    "start": "885360",
    "end": "891680"
  },
  {
    "text": "functional per se it's more of a statistics language kind of a specialized language in the way that mat",
    "start": "891680",
    "end": "897360"
  },
  {
    "text": "lab is kind of specialized for matrices and stuff like that but there are some hooks that you can do sort of a version",
    "start": "897360",
    "end": "903839"
  },
  {
    "text": "of object oriented and and standard functional programming if you",
    "start": "903839",
    "end": "909040"
  },
  {
    "text": "want now a subtopic of this functional versus um objector a tradeoff is an",
    "start": "909040",
    "end": "915000"
  },
  {
    "text": "interesting idea called traits that are sort of the uh replacement for interfaces in Scala now before Java a so",
    "start": "915000",
    "end": "923040"
  },
  {
    "text": "another thing Java 8 added is you can now Define default methods for the interfaces that you define",
    "start": "923040",
    "end": "929720"
  },
  {
    "text": "in in your interfaces or you declare so let me said it more precisely used to",
    "start": "929720",
    "end": "934880"
  },
  {
    "text": "use this terminology a lot in C and C+ plus where you had a declaration in a header file and then a definition you",
    "start": "934880",
    "end": "941480"
  },
  {
    "text": "know in the C code same is true here in Java it used to be that interfaces could",
    "start": "941480",
    "end": "947120"
  },
  {
    "text": "not actually Define the function they could only declare it and that became a problem because if I wanted to have a",
    "start": "947120",
    "end": "953680"
  },
  {
    "text": "common instraction for logging let's say a lot of times it's just obvious what I want to mix in as the implementation but",
    "start": "953680",
    "end": "960800"
  },
  {
    "text": "there was no mechanism in the language to do this I always had to do some sort of hack to implement the logging",
    "start": "960800",
    "end": "966360"
  },
  {
    "text": "interface but then delegate to some you know helper method or helper class or something but Scola and now Java 8 lets",
    "start": "966360",
    "end": "973399"
  },
  {
    "text": "you actually attach definitions to these de declared functions and that enables a",
    "start": "973399",
    "end": "979360"
  },
  {
    "text": "mix in architecture where I can mix in behaviors like logging or persistence or",
    "start": "979360",
    "end": "985160"
  },
  {
    "text": "whatever more more seamlessly Implement them separately and and do do composition rather than",
    "start": "985160",
    "end": "991120"
  },
  {
    "text": "inheritance uh there is actually some other things that traits give you beyond interfaces like you can have fields and",
    "start": "991120",
    "end": "998240"
  },
  {
    "text": "traits so I can I can carry a long State like you know here's the logger I'm going to use whereas in Java 8 you still",
    "start": "998240",
    "end": "1004639"
  },
  {
    "text": "can't have fields in these interfaces just methes but there are ways to get around that",
    "start": "1004639",
    "end": "1010470"
  },
  {
    "text": "[Music] limitation uh this one this point. 1B is something that a friend of mine",
    "start": "1010470",
    "end": "1016199"
  },
  {
    "text": "mentioned who's been doing a lot of java stream program I mean so this is like a new thing they added to the collections",
    "start": "1016199",
    "end": "1022079"
  },
  {
    "text": "API where you can take a regular job of collection and turn it into essentially a lazy stream where you'll just pull off",
    "start": "1022079",
    "end": "1028918"
  },
  {
    "text": "values as if you know just a stream of data coming in and then you can do the sort of functional kind of of processing",
    "start": "1028919",
    "end": "1035600"
  },
  {
    "text": "like map over the stream flat map and filter and so forth and he found it to be somewhat awkward to go back and forth",
    "start": "1035600",
    "end": "1042079"
  },
  {
    "text": "between these metaphor whereas languages that were designed more with functional programming in mind like Scola tend to",
    "start": "1042079",
    "end": "1048919"
  },
  {
    "text": "make that more of a first class and this is the only way you do it is you operate with these",
    "start": "1048919",
    "end": "1055399"
  },
  {
    "start": "1055000",
    "end": "1107000"
  },
  {
    "text": "operators um and here's an let's let's actually look at some examples so let's talk about function functional style",
    "start": "1055520",
    "end": "1062480"
  },
  {
    "text": "collections so I've got a little method here I stillo from Wikipedia to determine if an integer is prime it's",
    "start": "1062480",
    "end": "1068000"
  },
  {
    "text": "actually not a very good method it's kind of cre does the job um and if I",
    "start": "1068000",
    "end": "1073480"
  },
  {
    "text": "want to make sure this compiles in this case I can just do shift return or I can click this arrow button here and just to",
    "start": "1073480",
    "end": "1080960"
  },
  {
    "text": "verify that it's working so it compiled successfully tells me how long it took and so forth but it's just a scholar",
    "start": "1080960",
    "end": "1086880"
  },
  {
    "text": "method uh it does some of the things that we said are good for functional programming there's no side effects I",
    "start": "1086880",
    "end": "1092880"
  },
  {
    "text": "use encapsulation of a second method inside here so I don't have that function leaking through the abstraction",
    "start": "1092880",
    "end": "1099080"
  },
  {
    "text": "there's a bunch of things that are nice about it in the functional way but for the most part it's just you know sort of",
    "start": "1099080",
    "end": "1104600"
  },
  {
    "text": "a standard method that you might write in any of these languages so remember what I said about you know",
    "start": "1104600",
    "end": "1110559"
  },
  {
    "start": "1107000",
    "end": "1224000"
  },
  {
    "text": "having higher order functions here I'm passing a function to map that's going to take each of these integers that I'm",
    "start": "1110559",
    "end": "1117360"
  },
  {
    "text": "generating from one to 100 inclusive I'm going to map over those and for each of",
    "start": "1117360",
    "end": "1122440"
  },
  {
    "text": "those integers I'm going to call this function that Returns the tle and this is one of the things I'll get to later",
    "start": "1122440",
    "end": "1128159"
  },
  {
    "text": "but this is really nice in Scola that you have this literal syntax if I put stuff in parentheses it automatically",
    "start": "1128159",
    "end": "1134240"
  },
  {
    "text": "creates an instance of a tle for me in this case the iner that I P",
    "start": "1134240",
    "end": "1139280"
  },
  {
    "text": "and whether or not it's it's a prime uh so it'll be you know integer bu and will",
    "start": "1139280",
    "end": "1145039"
  },
  {
    "text": "be the type notice the periods at the end this is really one big expression and then I'm going to group",
    "start": "1145039",
    "end": "1150840"
  },
  {
    "text": "over uh whether or not it's Prime so I'll get two big records you one with all the nonprime numbers and one with",
    "start": "1150840",
    "end": "1157159"
  },
  {
    "text": "the primes and then the last thing I I'll do is map over that tupple and I can get no actually saw that here here's",
    "start": "1157159",
    "end": "1163840"
  },
  {
    "text": "how you get the second element of the tle underscore 2 here's the first and so forth and they count from one that's",
    "start": "1163840",
    "end": "1169000"
  },
  {
    "text": "just sort of a historical thing as opposed to zero and the last thing though I'm doing with this map statement",
    "start": "1169000",
    "end": "1175520"
  },
  {
    "text": "is I just want to see true false and and the first thing is going to be the true",
    "start": "1175520",
    "end": "1180960"
  },
  {
    "text": "false because that was what I used as a key in the group Vibe and then how many of them do I have and ironically enough",
    "start": "1180960",
    "end": "1188320"
  },
  {
    "text": "it look at the number it comes out that 75 are not Prime and 25 are prime so it's exactly 3:1 from 1 to 100 which I",
    "start": "1188320",
    "end": "1196159"
  },
  {
    "text": "thought was kind of an interesting result it just out uh what um this notebook and some of",
    "start": "1196159",
    "end": "1204080"
  },
  {
    "text": "the others will try to do is when you return in this case a map it will try to show it in a table for you automatically",
    "start": "1204080",
    "end": "1210919"
  },
  {
    "text": "and that's what it's done here not terribly exciting in this case but pretty useful if I just want to see a a",
    "start": "1210919",
    "end": "1217520"
  },
  {
    "text": "representation of the data excuse",
    "start": "1217520",
    "end": "1222000"
  },
  {
    "text": "me okay let's let's look at the same thing in spark so here's U so spark was basically",
    "start": "1222840",
    "end": "1230880"
  },
  {
    "start": "1224000",
    "end": "1384000"
  },
  {
    "text": "inspired by The Scholar collections notice these three lines map Group by and then map again with some setup to",
    "start": "1230880",
    "end": "1237600"
  },
  {
    "text": "actually create my collection and in spark it's basically the same code there's some setup on the first line and",
    "start": "1237600",
    "end": "1244440"
  },
  {
    "text": "then the exact same three methods and then uh app find a line I'll explain in a",
    "start": "1244440",
    "end": "1250280"
  },
  {
    "text": "second I could uh spark context is the entry point into my cluster or in this",
    "start": "1250280",
    "end": "1256799"
  },
  {
    "text": "case my local machine parallelize is sort of the analog of just Computing a range and turning it into Spark's own",
    "start": "1256799",
    "end": "1263880"
  },
  {
    "text": "internal data structure called a it's called an rdd and you can actually see the type here it that stands for",
    "start": "1263880",
    "end": "1270640"
  },
  {
    "text": "resilient distributed data set resilient in the sense that there if if you lose a node it can recover reconstruct what was",
    "start": "1270640",
    "end": "1278400"
  },
  {
    "text": "lost and distribute it because I have the illusion of one big collection of memory but it's actually partitioned",
    "start": "1278400",
    "end": "1284120"
  },
  {
    "text": "over a cluster but once I set that up then I have exactly the same Methods at my disposal so I could have even put",
    "start": "1284120",
    "end": "1291440"
  },
  {
    "text": "this code in a library well the typing is actually a little different it wouldn't quite work to go from scholar",
    "start": "1291440",
    "end": "1297760"
  },
  {
    "text": "collections to spark but because of type inference I don't care I just copy and paste and it actually works uh the",
    "start": "1297760",
    "end": "1305240"
  },
  {
    "text": "reason this is here after I've constructed this rdd what collect does is it turns my big rdd into a local",
    "start": "1305240",
    "end": "1313120"
  },
  {
    "text": "scolar collection one major difference between these rdd operations and the",
    "start": "1313120",
    "end": "1318760"
  },
  {
    "text": "Scola collections is the rdd operations are lazy they don't do anything until I",
    "start": "1318760",
    "end": "1324000"
  },
  {
    "text": "say give me results and that's what collect does uh whereas scholet collections are eager so they would have",
    "start": "1324000",
    "end": "1330559"
  },
  {
    "text": "ran right away so I did have to do a little uh cleanup at the end if you will but otherwise you know once I have these",
    "start": "1330559",
    "end": "1337240"
  },
  {
    "text": "metaphors of you know mapping and flat mapping and all that you know it just transfers beautifully over to my big",
    "start": "1337240",
    "end": "1344279"
  },
  {
    "text": "data environment and we get the same results thank God it's not a probabilistic in",
    "start": "1344279",
    "end": "1350760"
  },
  {
    "text": "this case Okay so that's kind of cool uh that that inspiration uh you know looking at",
    "start": "1350760",
    "end": "1357159"
  },
  {
    "text": "the scholar collections the guys who created spark said you know these work for the kind of problems we're trying to",
    "start": "1357159",
    "end": "1363440"
  },
  {
    "text": "solve manipulating data in sort of a it's not really a stream model yet but",
    "start": "1363440",
    "end": "1368760"
  },
  {
    "text": "it is the idea of I'm going to decompose this I need to get from here to here I'm going to decompose it into steps and I",
    "start": "1368760",
    "end": "1375679"
  },
  {
    "text": "can have all these operations at my disposal to do that decomposition so they they basically copied the scholet",
    "start": "1375679",
    "end": "1383640"
  },
  {
    "text": "API and uh you know Python and rode would look kind of very similar no real",
    "start": "1383640",
    "end": "1389080"
  },
  {
    "text": "winners there but Java until they added lambas and the stream API it was not at",
    "start": "1389080",
    "end": "1394880"
  },
  {
    "text": "all elegant to do this in um in Java the spark API did give you these kind of",
    "start": "1394880",
    "end": "1401240"
  },
  {
    "text": "methods in their Java API but you it was just a lot more noise trying to create",
    "start": "1401240",
    "end": "1406520"
  },
  {
    "text": "Anonymous center classes for all of the little simple methods but now that's at least gone",
    "start": "1406520",
    "end": "1412760"
  },
  {
    "start": "1412000",
    "end": "1454000"
  },
  {
    "text": "away one of the powerful things though that Java still doesn't have although",
    "start": "1412760",
    "end": "1417919"
  },
  {
    "text": "there's rumors I guess that they may add this in Java 9 or Java 10 is an actual interpreter so that instead of just",
    "start": "1417919",
    "end": "1424320"
  },
  {
    "text": "writing unit test and running an eclipse or whatever to see what you've got you can actually just fire up something like",
    "start": "1424320",
    "end": "1430640"
  },
  {
    "text": "this environment which is actually running The Interpreter or use the scolar command and then interactively",
    "start": "1430640",
    "end": "1436880"
  },
  {
    "text": "work with your data experiment with your apis and so forth so I didn't even show an example because all the things you've",
    "start": "1436880",
    "end": "1443120"
  },
  {
    "text": "seen so far I've actually been using the Scola interpreter to do it you know behind the",
    "start": "1443120",
    "end": "1448760"
  },
  {
    "text": "scenes uh and everything that Java has this capability so that's not really too",
    "start": "1448760",
    "end": "1454000"
  },
  {
    "start": "1454000",
    "end": "1480000"
  },
  {
    "text": "new I mentioned this one already though the nice convenient Tuple syntax because",
    "start": "1454000",
    "end": "1459240"
  },
  {
    "text": "it's really nice to think of records as being like tles of data and even some",
    "start": "1459240",
    "end": "1465799"
  },
  {
    "text": "you know sort of database Theory you'll see that that kind of description and Scola makes it really easy to just put",
    "start": "1465799",
    "end": "1472000"
  },
  {
    "text": "stuff in parentheses and bang you've got to tough it and it sort of L ceremony so that's what I've used a lot",
    "start": "1472000",
    "end": "1479600"
  },
  {
    "text": "here uh and it turns out python is almost as As Nice not quite as flexible",
    "start": "1479600",
    "end": "1485039"
  },
  {
    "start": "1480000",
    "end": "1525000"
  },
  {
    "text": "as Scala R has some tle types as well but it's the syntax is a little less",
    "start": "1485039",
    "end": "1490600"
  },
  {
    "text": "convenient and Java doesn't have anything at all a Java really could easily add tle types to the library I'm",
    "start": "1490600",
    "end": "1496480"
  },
  {
    "text": "not entirely sure why they haven't so spark added one for the the most common tupple which is a two element tupple",
    "start": "1496480",
    "end": "1503480"
  },
  {
    "text": "representing key value Pairs and I wrote this in schola but basically this is what you would do in in Java in spark to",
    "start": "1503480",
    "end": "1511840"
  },
  {
    "text": "instantiate a tle but you know this is really noisy right I don't want to have to do new mutable pair get the types",
    "start": "1511840",
    "end": "1518840"
  },
  {
    "text": "right passing arguments I just want to write stuff like this",
    "start": "1518840",
    "end": "1525840"
  },
  {
    "start": "1525000",
    "end": "1547000"
  },
  {
    "text": "I one of the most powerful ideas in functional programming and you saw that if you were in stow's talk about Airline",
    "start": "1525840",
    "end": "1533000"
  },
  {
    "text": "a minute ago is pattern matching which lets us not only figure out what we've got when I pass you something but we can",
    "start": "1533000",
    "end": "1539200"
  },
  {
    "text": "tear it apart into its constituent Parts really easily um rather than using like",
    "start": "1539200",
    "end": "1545080"
  },
  {
    "text": "Getters and so forth like that so here I've Rewritten the last spark example to",
    "start": "1545080",
    "end": "1551240"
  },
  {
    "start": "1547000",
    "end": "1622000"
  },
  {
    "text": "use the pattern matching facility for tles so instead of saying uh group bu",
    "start": "1551240",
    "end": "1557240"
  },
  {
    "text": "and then here's your grab the second element of the tle I can use this case keyword and also I have use curly braces",
    "start": "1557240",
    "end": "1564240"
  },
  {
    "text": "in terms out I'm going to say I want I expect and in this case I know I'm going to always get a two element tupple I'm",
    "start": "1564240",
    "end": "1571720"
  },
  {
    "text": "going to ignore the first field so I use underscore to say I don't care about it and but notice I I can apply a nice name",
    "start": "1571720",
    "end": "1578799"
  },
  {
    "text": "which in this case is it prime or not and then that the the value that was pulled out of that tupple will be a sign",
    "start": "1578799",
    "end": "1585120"
  },
  {
    "text": "to primality and in this case I'm just going to return that and that's how I know whether I'm going to group by trues and falses I do it again here matched by",
    "start": "1585120",
    "end": "1593760"
  },
  {
    "text": "primality and and values again these are variable names arbitrary choices but uh",
    "start": "1593760",
    "end": "1599440"
  },
  {
    "text": "I can read this code and know what these fields mean which is pretty nice and then I just return what I want is the",
    "start": "1599440",
    "end": "1605039"
  },
  {
    "text": "final result so it's a it's an elegant way of tearing things apart but it also lets",
    "start": "1605039",
    "end": "1611559"
  },
  {
    "text": "you do things like use useful names for things uh that are automatically assigned to the pieces",
    "start": "1611559",
    "end": "1618240"
  },
  {
    "text": "[Music] uh let's see scroll scroll scroll D you seem to have lost the prime number there",
    "start": "1618240",
    "end": "1623919"
  },
  {
    "start": "1622000",
    "end": "1646000"
  },
  {
    "text": "if you scroll up you only got 74 oh yeah you know why it's I thought i' fix this actually it's because I went up to but",
    "start": "1623919",
    "end": "1630600"
  },
  {
    "text": "not including okay so I'll change right now ho right yeah good catch thank you",
    "start": "1630600",
    "end": "1636000"
  },
  {
    "text": "for that it's proving we're awake so yeah you always have to have somebody in the audience that's awake at 6",
    "start": "1636000",
    "end": "1641840"
  },
  {
    "text": "o' so there we go are are you happy now I'm very happy thank you all right just",
    "start": "1641840",
    "end": "1648320"
  },
  {
    "start": "1646000",
    "end": "1698000"
  },
  {
    "text": "to show that this is pretty flexible actually in Airline every assignment is actually a patter match expression you",
    "start": "1648320",
    "end": "1653640"
  },
  {
    "text": "can do that in Scala too here I can try to deeply nested tupple and then just did an assignment on the left hand side",
    "start": "1653640",
    "end": "1660159"
  },
  {
    "text": "where I just you know named variables that happen to match the structure and it just",
    "start": "1660159",
    "end": "1665919"
  },
  {
    "text": "automatically run that again automatically extracted all the pieces in a nice way pretty cool I I use this a",
    "start": "1665919",
    "end": "1672159"
  },
  {
    "text": "lot the only catch is I have to know exactly that I have the right number of elements and the right nesting otherwise",
    "start": "1672159",
    "end": "1678279"
  },
  {
    "text": "get an exception but if I know exactly what I've got this is really handy for like having multi- return values from a",
    "start": "1678279",
    "end": "1685120"
  },
  {
    "text": "function and just pulling it apart as it comes back",
    "start": "1685120",
    "end": "1690960"
  },
  {
    "text": "um this is something I don't think you can do in any of the other languages I don't think python can do nested tles if",
    "start": "1690960",
    "end": "1696840"
  },
  {
    "text": "I'm not mistaken but by the way whole requests are welcome for this I'm not really an expert in python or R so if",
    "start": "1696840",
    "end": "1703440"
  },
  {
    "start": "1698000",
    "end": "1707000"
  },
  {
    "text": "I've made any mistakes you're welcome to correct me um case classes are a really",
    "start": "1703440",
    "end": "1709640"
  },
  {
    "start": "1707000",
    "end": "1775000"
  },
  {
    "text": "useful feature in Scola that also proved to be very useful they're often used to represent records in spark the idea is",
    "start": "1709640",
    "end": "1717799"
  },
  {
    "text": "this case keyword says not only am I just defining a regular class but I want you to automatically take all these",
    "start": "1717799",
    "end": "1724360"
  },
  {
    "text": "arguments and make them Fields I want you to build you add in two string",
    "start": "1724360",
    "end": "1729559"
  },
  {
    "text": "equals hash code you know do it the right way not the hacky way that most of us end up doing and I also want you to",
    "start": "1729559",
    "end": "1736120"
  },
  {
    "text": "build uh the uh there's something called a companion object basically some static",
    "start": "1736120",
    "end": "1741480"
  },
  {
    "text": "methods that are used to do this pattern matching so I'll be able to do pattern matching on this person type in just a",
    "start": "1741480",
    "end": "1747480"
  },
  {
    "text": "minute just because I put the case keyword there and also there's some other things they throw in that are",
    "start": "1747480",
    "end": "1752519"
  },
  {
    "text": "pretty nice it's a really useful way of just building these little structural classes that that hold State and they're",
    "start": "1752519",
    "end": "1759600"
  },
  {
    "text": "IM mutable by default and I would have to put in a a sorry a VAR keyword if I wanted to say first name to be mutable",
    "start": "1759600",
    "end": "1766480"
  },
  {
    "text": "but I could do that if I wanted to it's another example of scholar letting you do stuff that you might want to do but",
    "start": "1766480",
    "end": "1772120"
  },
  {
    "text": "discouraging you from doing it by default so here I list a few of the things you get but here let's see let's",
    "start": "1772120",
    "end": "1778720"
  },
  {
    "start": "1775000",
    "end": "1859000"
  },
  {
    "text": "do some pattern matching with this and I'll um I'll actually do it in spark although I could have done this in just",
    "start": "1778720",
    "end": "1783880"
  },
  {
    "text": "regular uh schola so I'll take my spark context I'll turn this uh I made up two",
    "start": "1783880",
    "end": "1790440"
  },
  {
    "text": "people here uh me and a completely bogus age uh and a friend of mine who actually",
    "start": "1790440",
    "end": "1797559"
  },
  {
    "text": "co-wrote this talk Andy patella he's actually the guy that created spark notebook uh so we've got two people",
    "start": "1797559",
    "end": "1803559"
  },
  {
    "text": "we're going to turn them into a rdd by parallelizing this collection over our big cluster and then I'm going going to",
    "start": "1803559",
    "end": "1810600"
  },
  {
    "text": "um oh yeah here it is map over this collection and pattern match on the person instances and then extract the",
    "start": "1810600",
    "end": "1817559"
  },
  {
    "text": "first last and age in this case I just do something stupid and return a toule",
    "start": "1817559",
    "end": "1822640"
  },
  {
    "text": "but when I do that you know I get what you would expect you know two tou instead of two",
    "start": "1822640",
    "end": "1829440"
  },
  {
    "text": "persons so that's really and that's really why the case keyword is used both in pattern matching and up here is",
    "start": "1829440",
    "end": "1836760"
  },
  {
    "text": "really because it gives you this duality of construction and deconstruction which is just fantastic",
    "start": "1836760",
    "end": "1843279"
  },
  {
    "text": "for getting work done quickly and like I say uh case classes are often used in",
    "start": "1843279",
    "end": "1848640"
  },
  {
    "text": "spark to represent the schema of your records",
    "start": "1848640",
    "end": "1854960"
  },
  {
    "text": "okay your time all right",
    "start": "1854960",
    "end": "1859919"
  },
  {
    "start": "1859000",
    "end": "1880000"
  },
  {
    "text": "uh yeah and some of the other really none of the other three languages actually support anything like this at",
    "start": "1860240",
    "end": "1865399"
  },
  {
    "text": "all um they support things like regular expression parsing of strings which is their own standby but not this sort of",
    "start": "1865399",
    "end": "1871880"
  },
  {
    "text": "structural decomposition you'd have to go something like H or ml or airline to do",
    "start": "1871880",
    "end": "1876960"
  },
  {
    "text": "it or our closure now has this facility um so one of the big arguments",
    "start": "1876960",
    "end": "1882760"
  },
  {
    "start": "1880000",
    "end": "1894000"
  },
  {
    "text": "of course in our industry is whether you should be statically typed or not um I I don't want want to get into that",
    "start": "1882760",
    "end": "1888440"
  },
  {
    "text": "argument here but uh what what I will say is for it does have some convenient properties in this case first of all",
    "start": "1888440",
    "end": "1895240"
  },
  {
    "text": "schola will interpret infer types in in in a lot of situations not all hasal can",
    "start": "1895240",
    "end": "1901720"
  },
  {
    "text": "actually do it in almost all situations but here I didn't say anything about the types but it just inferred that I was",
    "start": "1901720",
    "end": "1907960"
  },
  {
    "text": "working with integers you kind of a trivial thing and if we look at you know one of our examples from before there's nothing",
    "start": "1907960",
    "end": "1915159"
  },
  {
    "start": "1910000",
    "end": "1969000"
  },
  {
    "text": "in here at all about types in this um uh you know grouping by primality example",
    "start": "1915159",
    "end": "1920720"
  },
  {
    "text": "and yet it infers correctly and conveniently that I have an rdd when I'm",
    "start": "1920720",
    "end": "1926480"
  },
  {
    "text": "finished and this notice that you can actually use the tupple S you know quote",
    "start": "1926480",
    "end": "1932919"
  },
  {
    "text": "things or rather parentheses things in the type of signature as well so this is",
    "start": "1932919",
    "end": "1938320"
  },
  {
    "text": "actually a tle two is the record type and rdd is like a collection of",
    "start": "1938320",
    "end": "1943639"
  },
  {
    "text": "T so I this so I actually did some stuff with the python API not long ago and it",
    "start": "1943639",
    "end": "1949200"
  },
  {
    "text": "actually was really kind of frustrating that when I would do something like this which is you know",
    "start": "1949200",
    "end": "1954279"
  },
  {
    "text": "the syntax is very similar I wouldn't quite know what I had when I was done and I always ended up like printing the",
    "start": "1954279",
    "end": "1959639"
  },
  {
    "text": "first five or something just to see what I ended up with whereas at least here I know what the structure",
    "start": "1959639",
    "end": "1966519"
  },
  {
    "text": "is EXC yeah so here I described that a",
    "start": "1966519",
    "end": "1971919"
  },
  {
    "text": "little bit more detail you could also write that signature like this if I evaluate this so you can see a little",
    "start": "1971919",
    "end": "1977200"
  },
  {
    "text": "better it still there there it is uh yeah so I could have written a type signature like",
    "start": "1977200",
    "end": "1983360"
  },
  {
    "start": "1978000",
    "end": "2005000"
  },
  {
    "text": "this but it also lets me write the same sort of special syntax uh like I use for",
    "start": "1983360",
    "end": "1990399"
  },
  {
    "text": "values as opposed to types so for me this is a nice balance of inferring",
    "start": "1990399",
    "end": "1995600"
  },
  {
    "text": "types to keep that stuff out of my way most of the time but also catching a lot of errors and telling me what I need to",
    "start": "1995600",
    "end": "2002600"
  },
  {
    "text": "know when I need to [Music] know um yeah and like I mention is it",
    "start": "2002600",
    "end": "2008200"
  },
  {
    "start": "2005000",
    "end": "2022000"
  },
  {
    "text": "was kind of a hassle not having this in Python in Java of course you can statically type but you have to be more",
    "start": "2008200",
    "end": "2014000"
  },
  {
    "text": "explicit about typing most things except for like lambdas and stuff and R is also a lot like python it's dynamically",
    "start": "2014000",
    "end": "2022600"
  },
  {
    "start": "2022000",
    "end": "2131000"
  },
  {
    "text": "typed um one of the interesting things you run into when you do Java this is kind of a technical point for Java",
    "start": "2022600",
    "end": "2029000"
  },
  {
    "text": "versus Scola is Scala actually gives you the illusion that all The Primitives are regular object types reference types you",
    "start": "2029000",
    "end": "2036480"
  },
  {
    "text": "write like an do you know two or parse or what's a good example you do it like",
    "start": "2036480",
    "end": "2042960"
  },
  {
    "text": "in. two float or something if you want to convert an integer to a float whereas in Java it's very clear that you're",
    "start": "2042960",
    "end": "2049158"
  },
  {
    "text": "working with something that's entirely different from the the type hierarchy uh but there are cases where",
    "start": "2049159",
    "end": "2055079"
  },
  {
    "text": "you have to do these um boxing conversions to go from Like A Primitive int to a integer when you put it in a",
    "start": "2055079",
    "end": "2062599"
  },
  {
    "text": "collection and that kind of Duality doesn't exist in Scola you can just have you know list of strings or a list of",
    "start": "2062599",
    "end": "2069760"
  },
  {
    "text": "ins and it just works now what it's actually doing though it's not completely perfect it is actually",
    "start": "2069760",
    "end": "2075679"
  },
  {
    "text": "wrapping these integers which is really bad in big data when you've got billions",
    "start": "2075679",
    "end": "2080800"
  },
  {
    "text": "and billions of integers so it's not a perfect solution it's a convenience for us there is an annotation called",
    "start": "2080800",
    "end": "2087280"
  },
  {
    "text": "specialized here I'm clicking things again let me just point at it right",
    "start": "2087280",
    "end": "2092638"
  },
  {
    "text": "there that um we'll say all right actually I want you to generate customized implementations for a and C",
    "start": "2092639",
    "end": "2100000"
  },
  {
    "text": "like integer float integer double and long or typical that won't do the boxing",
    "start": "2100000",
    "end": "2105280"
  },
  {
    "text": "but it's it also is not a perfect solution but nevertheless it's nice that I can just uniformly treat Primitives",
    "start": "2105280",
    "end": "2112040"
  },
  {
    "text": "and reference types identically every method actually always returns something even when you would",
    "start": "2112040",
    "end": "2118280"
  },
  {
    "text": "normally return void in Java you can return unit and Scala which is a type",
    "start": "2118280",
    "end": "2123480"
  },
  {
    "text": "that basically functions the same way but it gives you a uniform syntax which Mak makes your thinking more",
    "start": "2123480",
    "end": "2130560"
  },
  {
    "text": "uniform and we also get really elegant surprisingly elegant tools for creating domain specific languages this is one of",
    "start": "2132079",
    "end": "2138720"
  },
  {
    "text": "the things that Ruby's famous for that you can kind of make Lang little languages that are embedded in your Ruby",
    "start": "2138720",
    "end": "2144400"
  },
  {
    "text": "code that look like something that a domain expert would write if test tools are a great example of this if you've",
    "start": "2144400",
    "end": "2150599"
  },
  {
    "text": "ever looked at rpec and Ruby or I forget what some of the other tools are called",
    "start": "2150599",
    "end": "2156359"
  },
  {
    "text": "um better than python even uh but for some reason scull happens to have a number of facilities that even though",
    "start": "2156359",
    "end": "2162359"
  },
  {
    "text": "it's statically typed it's actually really nice for writing these little domain specific languages an example I",
    "start": "2162359",
    "end": "2168599"
  },
  {
    "start": "2167000",
    "end": "2196000"
  },
  {
    "text": "have here is actually one that was it's basically an implementation and Scala of a python API that's was basically copied",
    "start": "2168599",
    "end": "2176880"
  },
  {
    "text": "from the our language and it's called the data frame API it's basically the way to do cql queries in",
    "start": "2176880",
    "end": "2183400"
  },
  {
    "text": "spark so you start by doing some imports that aren't really that important for us to go into but the one thing that is",
    "start": "2183400",
    "end": "2189880"
  },
  {
    "text": "important is the the uh let's call it the entree to this API is something called the SQL",
    "start": "2189880",
    "end": "2195599"
  },
  {
    "text": "context once you have that created I'll go ahead and do that again actually I think I won't do that",
    "start": "2195599",
    "end": "2203359"
  },
  {
    "start": "2196000",
    "end": "2269000"
  },
  {
    "text": "probably haven't evaluated all the cells in front you can see this output that you're seeing is because I just ran the",
    "start": "2203359",
    "end": "2208800"
  },
  {
    "text": "whole thing a little bit a little while ago uh I'm going to use the SQL context to read some Json data so I need to",
    "start": "2208800",
    "end": "2215640"
  },
  {
    "text": "figure out where it is and I set up an environment variable in advance to tell me where it's located so I'm just this",
    "start": "2215640",
    "end": "2221440"
  },
  {
    "text": "is like the typical Java system environment called to get an environment variable you can see it's pointed to",
    "start": "2221440",
    "end": "2227240"
  },
  {
    "text": "this directory here nothing too fancy but the SQL context gives me the ability",
    "start": "2227240",
    "end": "2232800"
  },
  {
    "text": "to get a reader and then I can say all right I want to read Json and here is the Json file that represents airport",
    "start": "2232800",
    "end": "2238960"
  },
  {
    "text": "data for commercial airports in the",
    "start": "2238960",
    "end": "2242720"
  },
  {
    "text": "US the nice thing about this is that actually in first a schema from the Json",
    "start": "2244079",
    "end": "2249319"
  },
  {
    "text": "files so here's the schema it came up with based on that data so the airport",
    "start": "2249319",
    "end": "2254520"
  },
  {
    "text": "is like you know the names we're used to like oare City Country uh latitude",
    "start": "2254520",
    "end": "2260160"
  },
  {
    "text": "longitude iata is the codes you see on your tickets like o for oare and ATL for",
    "start": "2260160",
    "end": "2265560"
  },
  {
    "text": "Atlanta and things like that and so forth uh we can actually ask it for some",
    "start": "2265560",
    "end": "2271839"
  },
  {
    "start": "2269000",
    "end": "2417000"
  },
  {
    "text": "of the records so if you do airport show it starts printing out things that you're used to seeing if you've ever worked with like one of these database",
    "start": "2271839",
    "end": "2278880"
  },
  {
    "text": "interactive tools you know just prints out the first 20 records and caching is something this is where the abstraction",
    "start": "2278880",
    "end": "2284920"
  },
  {
    "text": "leads you have to tell sport look I'm going to work with this data over and over again don't keep rereading it every time I do a query just cach it in",
    "start": "2284920",
    "end": "2292880"
  },
  {
    "text": "memory so here's our you know the first 20 records for this airport data and we",
    "start": "2292880",
    "end": "2297920"
  },
  {
    "text": "can actually write typical SQL queries you can just do SQL and then a string",
    "start": "2297920",
    "end": "2303119"
  },
  {
    "text": "that's you're regular SQL query that's that's a method available on this airport data frame",
    "start": "2303119",
    "end": "2308319"
  },
  {
    "text": "or we can use this idiomatic API and this is really kind of the point I was getting up to this API is very similar",
    "start": "2308319",
    "end": "2315119"
  },
  {
    "text": "to the way you would write it in Python which is an entirely different language where they have this sort of dollar",
    "start": "2315119",
    "end": "2320200"
  },
  {
    "text": "idiom for saying I want a group by the state account country and then I want to",
    "start": "2320200",
    "end": "2325440"
  },
  {
    "text": "count count the size of those groups and then I want to order by the count Des sending so it's a sort of an idiomatic",
    "start": "2325440",
    "end": "2331720"
  },
  {
    "text": "way of writing SQL a little bit more type safe than just embedding a string that you won't know until runtime you",
    "start": "2331720",
    "end": "2337720"
  },
  {
    "text": "got it right uh and when you do this if you run that query print the schema you",
    "start": "2337720",
    "end": "2343240"
  },
  {
    "text": "know nice little tools for seeing what you ended up with so State and country were my keys for grouping and then the",
    "start": "2343240",
    "end": "2349440"
  },
  {
    "text": "count and then here's the descending count of the results where it it turns out Alaska has the most airports they're",
    "start": "2349440",
    "end": "2356319"
  },
  {
    "text": "mostly like these little Bush airports out in the middle of like you know K Denali National Park I about to say Karo",
    "start": "2356319",
    "end": "2364000"
  },
  {
    "text": "but a little off there and Texas is up there californ then so here's here's the",
    "start": "2364000",
    "end": "2369520"
  },
  {
    "text": "way I guess actually 88 okay but the thing is I could have",
    "start": "2369520",
    "end": "2375040"
  },
  {
    "text": "also written this as a SQL query uh and it would have been parsed to SQL and it would have gone into the same runtime",
    "start": "2375040",
    "end": "2381680"
  },
  {
    "text": "but um they've used this I guess technically you could say this is more of a fluent DSL or fluent API than an",
    "start": "2381680",
    "end": "2388760"
  },
  {
    "text": "actual DSL you know there's some debate about those terms but the point is that when you need to do something that",
    "start": "2388760",
    "end": "2395160"
  },
  {
    "text": "hopefully will be familiar to people coming from another language community and you want to or even a domain where",
    "start": "2395160",
    "end": "2401240"
  },
  {
    "text": "they think in terms of some sort of like rules or tax law or something the",
    "start": "2401240",
    "end": "2406599"
  },
  {
    "text": "language supports being able to build that kind of stuff really nicely but to be fair you could have done this in Java",
    "start": "2406599",
    "end": "2412040"
  },
  {
    "text": "too so it's kind of a lame argument but it's the best thing to come up with um anyway so it was actually Bor",
    "start": "2412040",
    "end": "2419560"
  },
  {
    "start": "2417000",
    "end": "2428000"
  },
  {
    "text": "this API was inspired by a python API called Data frames which is actually",
    "start": "2419560",
    "end": "2424599"
  },
  {
    "text": "inspired by our API with the same name okay uh let's see how we doing for time",
    "start": "2424599",
    "end": "2430720"
  },
  {
    "start": "2428000",
    "end": "2458000"
  },
  {
    "text": "I want to make sure we have plenty of time all right we're actually nearly done so uh I broke this into two halves",
    "start": "2430720",
    "end": "2436000"
  },
  {
    "text": "and I'm not going to go through the second half because we're almost out of time uh the reason I call this a few other things is the stuff that's after",
    "start": "2436000",
    "end": "2442920"
  },
  {
    "text": "this is really valuable for regular like Java versus scholar developers but",
    "start": "2442920",
    "end": "2448599"
  },
  {
    "text": "actually less useful for Big Data people or data scientist like for example uh",
    "start": "2448599",
    "end": "2454319"
  },
  {
    "text": "where do it go here well sometimes to scroll I'm not sure I can find it",
    "start": "2454319",
    "end": "2459920"
  },
  {
    "start": "2458000",
    "end": "2498000"
  },
  {
    "text": "quickly but uh well the things I was going to mention are like recursion so Scola does loop by Rolling of tail calls",
    "start": "2459920",
    "end": "2467240"
  },
  {
    "text": "automatically for you that's not really something you ever use in Big Data because usually your your system is",
    "start": "2467240",
    "end": "2474000"
  },
  {
    "text": "doing any sort of iteration not you yourself things like that are here it is",
    "start": "2474000",
    "end": "2479119"
  },
  {
    "text": "tail recursion optimization actually very useful if you're a regular developer not so",
    "start": "2479119",
    "end": "2484200"
  },
  {
    "text": "important if you're a data scientist uh so what this actual section turned into",
    "start": "2484200",
    "end": "2490000"
  },
  {
    "text": "is just a laundry list of all the things where I think schol is better than Java so um just personal preference I guess",
    "start": "2490000",
    "end": "2498040"
  },
  {
    "text": "but I think there's some interesting things to consider here for design rigor like sealed class hierarchies or really",
    "start": "2498040",
    "end": "2503800"
  },
  {
    "text": "the idea of what if I declare an abstraction and I only want to be able to declare subclasses and never let",
    "start": "2503800",
    "end": "2510800"
  },
  {
    "text": "anybody else declar something else as a subass because there can only be the ones that I'm declaring a good good",
    "start": "2510800",
    "end": "2517400"
  },
  {
    "text": "example is uh something called the option type which is an alternative to nulls where I either have something and",
    "start": "2517400",
    "end": "2524760"
  },
  {
    "text": "that's going to be inide of some or an s or I have nothing and that will be",
    "start": "2524760",
    "end": "2530240"
  },
  {
    "text": "inside of none and there's no there's no middle ground we're not worried about the law of the excluded middle if you",
    "start": "2530240",
    "end": "2535920"
  },
  {
    "text": "know what that is we're going to assume it can only be in those two states so I'd like to be able to define the",
    "start": "2535920",
    "end": "2541440"
  },
  {
    "text": "distraction that captures of that but never let anybody else possibly add a",
    "start": "2541440",
    "end": "2546559"
  },
  {
    "text": "third sub type and and sculla has a nice facility for this they're called some",
    "start": "2546559",
    "end": "2551800"
  },
  {
    "text": "types to be technical um anyway let me go to the bottom which is uh the few",
    "start": "2551800",
    "end": "2557880"
  },
  {
    "text": "things where Scola isn't so great and um just to prove that I'm not a",
    "start": "2557880",
    "end": "2563359"
  },
  {
    "text": "complete Kool-Aid Drinker uh and some of these actually if you're",
    "start": "2563359",
    "end": "2569280"
  },
  {
    "text": "really interested in them especially if you're doing Spar I did a talk at Str San Jose and here's some links for those",
    "start": "2569280",
    "end": "2575880"
  },
  {
    "text": "slides if you want to see those where I go into a lot more detail than I can talk about now well one one thing very practical is",
    "start": "2575880",
    "end": "2583480"
  },
  {
    "start": "2580000",
    "end": "2598000"
  },
  {
    "text": "that R and python have much richer data libraries than Scola and Java do so",
    "start": "2583480",
    "end": "2588520"
  },
  {
    "text": "there's a lot of stuff you just don't have with the with the Scola and job",
    "start": "2588520",
    "end": "2593599"
  },
  {
    "text": "like really good charting libraries it's hard it's hard to argue against that but",
    "start": "2593599",
    "end": "2599079"
  },
  {
    "text": "the jbm itself has some issues it turns out that the fact that arrays are indexed by integers is a huge pain in",
    "start": "2599079",
    "end": "2605359"
  },
  {
    "text": "the ass because if you think about it that means you can never have more than two billion of anything in Array because",
    "start": "2605359",
    "end": "2611079"
  },
  {
    "text": "we also don't have unsell types and if you have like an a bite array like you're serializing some big object into",
    "start": "2611079",
    "end": "2617400"
  },
  {
    "text": "a bite array you're stuck with 2 gabes is how big it can be and yet Amazon just rolled out two terabyte you know",
    "start": "2617400",
    "end": "2624559"
  },
  {
    "text": "instances in in AWS right so we've we're back to kind of the problem we had with Doss boy I'm really dating myself here",
    "start": "2624559",
    "end": "2631720"
  },
  {
    "text": "you know it used to be with do you why would anyone need more than 640 kiloby of memory well we pretty much figured",
    "start": "2631720",
    "end": "2637680"
  },
  {
    "text": "that out quickly that no we actually need a lot more so they came up with all these crazy schemes to layer indirect",
    "start": "2637680",
    "end": "2643480"
  },
  {
    "text": "addressing of memory segments and that's kind of what we're stuck with you can't just allocate like a you know a 40 gab",
    "start": "2643480",
    "end": "2650880"
  },
  {
    "text": "array anymore you have to break it up so this is actually a real problem that we don't have long",
    "start": "2650880",
    "end": "2656400"
  },
  {
    "start": "2656000",
    "end": "2715000"
  },
  {
    "text": "indexing it turns out that the jbm memory model it's garbage collection the way it LS out objects is really flexible",
    "start": "2656400",
    "end": "2663359"
  },
  {
    "text": "really powerful that service really well but it completely sucks for big data and the problem is when you have a you know",
    "start": "2663359",
    "end": "2670119"
  },
  {
    "text": "billions of the exact same thing you don't want to use the uh the regular model so just as an example here's a a",
    "start": "2670119",
    "end": "2676800"
  },
  {
    "text": "diagram of you what a person type might look like in memory or I have some",
    "start": "2676800",
    "end": "2682520"
  },
  {
    "text": "reference to a person instance maybe the person has a name that's a string that's",
    "start": "2682520",
    "end": "2687720"
  },
  {
    "text": "another reference off in memory somewhere else the their age is an integer I can inline that or the",
    "start": "2687720",
    "end": "2694920"
  },
  {
    "text": "compiler well but you know if I have a pointer to their address well that's a reference to yet another object that has",
    "start": "2694920",
    "end": "2700800"
  },
  {
    "text": "its own stuff like other strings it turns out every single errow here is a cash Miss and I'm doing this billions of",
    "start": "2700800",
    "end": "2708480"
  },
  {
    "text": "times to process these people and all this stuff is little bits of garbage that just torturing the garbage colle so",
    "start": "2708480",
    "end": "2715720"
  },
  {
    "start": "2715000",
    "end": "2779000"
  },
  {
    "text": "what we really want is something like this where we encode objects in like a single array of bites that hopefully fit",
    "start": "2715720",
    "end": "2723200"
  },
  {
    "text": "in a cach line in the CPU and this is actually What spark is done in the data frame API where instead of allocating",
    "start": "2723200",
    "end": "2730960"
  },
  {
    "text": "stuff that looks like this they allocate a lot fewer little bits of stuff and it allit in a cach line like so and and",
    "start": "2730960",
    "end": "2737760"
  },
  {
    "text": "just quickly what this how this is structured some Fields could be null and so they have a bit field for that so if",
    "start": "2737760",
    "end": "2744119"
  },
  {
    "text": "a bit if a field happens to be dull there won't be anything representing that field in the rest of the record and",
    "start": "2744119",
    "end": "2750599"
  },
  {
    "text": "then they have 8 bytes per field for what's left if it's a primitive like a long that fits an 8 bytes they'll just",
    "start": "2750599",
    "end": "2756520"
  },
  {
    "text": "inline and otherwise that the value in that 8 by field will be an offset into",
    "start": "2756520",
    "end": "2762359"
  },
  {
    "text": "this variable length section for things like strings and stuff so this is not only far better for",
    "start": "2762359",
    "end": "2768839"
  },
  {
    "text": "cash performance it reduces the amount of garbage uh and just makes the thing",
    "start": "2768839",
    "end": "2773880"
  },
  {
    "text": "they're getting like factors of 100 Improvement in performance just by doing these kind of optimizations and the",
    "start": "2773880",
    "end": "2780079"
  },
  {
    "start": "2779000",
    "end": "2801000"
  },
  {
    "text": "version of spark that's coming out the summer spark 2 is going to add another 10x or more performance by doing things",
    "start": "2780079",
    "end": "2787520"
  },
  {
    "text": "like those little queries that I showed you they're just going to generate bite code for those they're not even going to compile them to like you know method",
    "start": "2787520",
    "end": "2794200"
  },
  {
    "text": "calls and stuff they're just going to generate B code for those kind of queries to get it down to you know this",
    "start": "2794200",
    "end": "2799920"
  },
  {
    "text": "absolute barass so lots of cool stuff you can do when you had good abstractions and then you layer",
    "start": "2799920",
    "end": "2805960"
  },
  {
    "start": "2801000",
    "end": "2809000"
  },
  {
    "text": "underneath it you know lots of room for optimization there's also some weird problems with the way the reppel works",
    "start": "2805960",
    "end": "2812599"
  },
  {
    "start": "2809000",
    "end": "2845000"
  },
  {
    "text": "The Interpreter that is really causing a lot of pain for one of my big Banks and are uh we may have to actually",
    "start": "2812599",
    "end": "2818800"
  },
  {
    "text": "re-engineer The Reel um to work better for for really big data sets anyway uh",
    "start": "2818800",
    "end": "2824000"
  },
  {
    "text": "probably out of time here but um so this is basically my argument for why Scala is is actually a really good language",
    "start": "2824000",
    "end": "2829839"
  },
  {
    "text": "not just for engineers but for even data scientists but like I say it's not perfect so thank you very much",
    "start": "2829839",
    "end": "2838430"
  },
  {
    "text": "[Applause]",
    "start": "2838430",
    "end": "2844190"
  }
]