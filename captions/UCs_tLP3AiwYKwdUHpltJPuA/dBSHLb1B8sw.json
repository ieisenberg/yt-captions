[
  {
    "text": "[Music]",
    "start": "5910",
    "end": "10160"
  },
  {
    "text": "again my name is Edward Thompson uh and today I'm going to take you through a deep dive into git git of course being",
    "start": "11599",
    "end": "17720"
  },
  {
    "text": "the very popular Git Version Control System how many people are using git right now at their day job at in an",
    "start": "17720",
    "end": "25000"
  },
  {
    "text": "open- source project okay let's make that easier how many people aren't using git yet",
    "start": "25000",
    "end": "30599"
  },
  {
    "text": "okay um so I'm going to try to uh keep",
    "start": "30599",
    "end": "35640"
  },
  {
    "text": "this at a level where if you've never used git before you can still kind of jump in but I'm not gonna we're not",
    "start": "35640",
    "end": "41440"
  },
  {
    "text": "going to you know have a getting started with Git session I'm not going to tell you how to clone a repository I'm not",
    "start": "41440",
    "end": "47120"
  },
  {
    "text": "gonna we're actually going to crack open a repository and look at what's inside um I think that if you use git you'll",
    "start": "47120",
    "end": "53039"
  },
  {
    "text": "get a lot of value out of this I think that if you don't then we're talking about the internals of a version control",
    "start": "53039",
    "end": "59280"
  },
  {
    "text": "system so there's a lot of great tracks here at the conference so if this is really boring feel free to get up and leave",
    "start": "59280",
    "end": "65518"
  },
  {
    "text": "don't don't stay bored at this conference it's a great conference",
    "start": "65519",
    "end": "70759"
  },
  {
    "text": "um uh real quickly about myself uh like lar said I'm a software engineer at Microsoft who on Earth would have",
    "start": "70759",
    "end": "77720"
  },
  {
    "text": "thought when I started at Microsoft a couple years ago that um I would be talking about get um it like L said it's",
    "start": "77720",
    "end": "86640"
  },
  {
    "text": "been an interesting uh way to get here I hope to see you later this week and I'll",
    "start": "86640",
    "end": "91799"
  },
  {
    "text": "tell you all about it um at code uh I work on the the visual studio",
    "start": "91799",
    "end": "98399"
  },
  {
    "text": "and visual studio online sort of the git integration into that and I do that I kind of work at the lowlevel twiddling",
    "start": "98399",
    "end": "104240"
  },
  {
    "text": "bits inside the repository I work on a project called ligit 2 which is a reimplementation of git in C um and",
    "start": "104240",
    "end": "113360"
  },
  {
    "text": "then why do we reimplement git um git is a really great set of commands and it",
    "start": "113360",
    "end": "119159"
  },
  {
    "text": "does things like Malik Malik Malik exit if you want to put that into Visual Studio you get Malik Malik Malik don't",
    "start": "119159",
    "end": "125520"
  },
  {
    "text": "exit and all of a sudden Visual Studio is taking up all your RAM and crashing so ligit 2 is made uh to not do that to",
    "start": "125520",
    "end": "133440"
  },
  {
    "text": "be a nice library that you can call from any application uh and then there's front ends for it for different languages like",
    "start": "133440",
    "end": "139000"
  },
  {
    "text": "C like Ruby Java so you get a nice idiomatic way so that if you if you want to like pythonic way to call git you can",
    "start": "139000",
    "end": "146160"
  },
  {
    "text": "use pyit and that talks to ligit too um we're really happy about livg 2 I've got stickers if you want to put g into your",
    "start": "146160",
    "end": "153160"
  },
  {
    "text": "application come get a livg 2 sticker I've got some afterwards um and uh I talk about git I",
    "start": "153160",
    "end": "161239"
  },
  {
    "text": "write about git and I'm branching out into some video training about git um if",
    "start": "161239",
    "end": "166599"
  },
  {
    "text": "you're using git in Visual Studio this is a more this is more beginner approach maybe and maybe not as nuts and bolts as",
    "start": "166599",
    "end": "171760"
  },
  {
    "text": "what you're about to see um but if your team is thinking about ramping up on git and your Visual Studio users I check it",
    "start": "171760",
    "end": "177720"
  },
  {
    "text": "out um git forv visual studio.com you can sign up to be alerted when it's",
    "start": "177720",
    "end": "183360"
  },
  {
    "text": "finished but like I said we're not talking about how to use G in Visual Studio we're going to talk about how git",
    "start": "183360",
    "end": "188640"
  },
  {
    "text": "actually works under the covers um why should we care about that you know I've been doing Version Control for a long",
    "start": "188640",
    "end": "194920"
  },
  {
    "text": "time nobody ever wanted to talk to me about the relative merits of Berkeley DB inside subversion or how the TFS table",
    "start": "194920",
    "end": "202560"
  },
  {
    "text": "layout Works um but everybody wants to know how git works why is that well so",
    "start": "202560",
    "end": "209799"
  },
  {
    "text": "if you rewind a little bit to how git was created git was created about 10 years ago by a guy named lonus tals if",
    "start": "209799",
    "end": "216120"
  },
  {
    "text": "that name sounds familiar it's because he wrote the lenux kernel and he wrote git to help him write the Linux kernel",
    "start": "216120",
    "end": "221200"
  },
  {
    "text": "he was tired of the Version Control Systems that he had been using and if you go back to sort of the goals that",
    "start": "221200",
    "end": "227599"
  },
  {
    "text": "lus set when he started creating git he wanted to be fast he wanted it to be",
    "start": "227599",
    "end": "233239"
  },
  {
    "text": "distributed he wanted it to have some sort of semblance of stability in the",
    "start": "233239",
    "end": "238640"
  },
  {
    "text": "face of or at least he would know if there was corruption what's not on this list is",
    "start": "238640",
    "end": "245879"
  },
  {
    "text": "making it easy to use and in fact he one of his other points was take",
    "start": "245879",
    "end": "253280"
  },
  {
    "text": "any design decision that the CVS project made and do the opposite and that's you know there",
    "start": "253280",
    "end": "260600"
  },
  {
    "text": "there's there's some humor in that but he was really serious when he did that and for all of its weaknesses one thing",
    "start": "260600",
    "end": "265960"
  },
  {
    "text": "that the CVS team did was that they really cared about an internally consistent and at least understandable",
    "start": "265960",
    "end": "272960"
  },
  {
    "text": "system that they were building git on the other hand it has some strange",
    "start": "272960",
    "end": "278479"
  },
  {
    "text": "commands these last four are my favorite checkout does four different things depending on what kind of arguments you",
    "start": "278479",
    "end": "284479"
  },
  {
    "text": "feed it and if you get them wrong well it can give you some strange error",
    "start": "284479",
    "end": "290919"
  },
  {
    "text": "messages and if you want to try to avoid this and read the Man pages read the",
    "start": "291199",
    "end": "297440"
  },
  {
    "text": "documentation it's not necessarily help I I work on git like I I deal with the",
    "start": "297440",
    "end": "304600"
  },
  {
    "text": "bits in the git repository on a daily basis I don't know what the first one means if you told me that a command was going to forward Port local commits to",
    "start": "304600",
    "end": "310639"
  },
  {
    "text": "the updated Upstream head I would look at you like you'd grown another head",
    "start": "310639",
    "end": "316400"
  },
  {
    "text": "that makes no sense to me and I know exactly what that command does that's the rebase command by the way",
    "start": "316400",
    "end": "323039"
  },
  {
    "text": "um so I think Honesty with you is important I don't want to get up here and lie to",
    "start": "323039",
    "end": "328360"
  },
  {
    "text": "you too much but uh I'm gonna lie to you twice in this presentation and this is one of them one",
    "start": "328360",
    "end": "333400"
  },
  {
    "text": "of these messages is not a real not a real thing from the git documentation the git documentation is so bad that",
    "start": "333400",
    "end": "340840"
  },
  {
    "text": "somebody has actually taken all of the documentation fed it into a markof chain and put a website up that F makes fake",
    "start": "340840",
    "end": "347120"
  },
  {
    "text": "git Man pages and they're almost you almost can't tell that they're fake if you haven't seen it go",
    "start": "347120",
    "end": "353880"
  },
  {
    "text": "check it out um if you're curious It's the uh it's the reveal all Downstream",
    "start": "353880",
    "end": "361000"
  },
  {
    "text": "commits below the scent Upstream paths it's the fake one I I yeah it's it's kind of hard to",
    "start": "361000",
    "end": "366639"
  },
  {
    "text": "tell the last one's particularly onerous because update remote refs along with Associated objects it should have just been upload",
    "start": "366639",
    "end": "373800"
  },
  {
    "text": "your changes right so I love git GS a a great tool um but it can be hard to use",
    "start": "373800",
    "end": "383000"
  },
  {
    "text": "fundamentally when lonus built git and when junio junio Hino is the current maintainer of git great guy very smart",
    "start": "383000",
    "end": "389960"
  },
  {
    "text": "junio and lonus are both way smarter than I am which is one of the problems I have when I use git because the git",
    "start": "389960",
    "end": "396840"
  },
  {
    "text": "commands are really just a leaky abstraction on top of the data model so understanding how the data model Works",
    "start": "396840",
    "end": "402919"
  },
  {
    "text": "can be really important to to using get okay so how does it work let's let's",
    "start": "402919",
    "end": "410720"
  },
  {
    "text": "back up to the very beginning get is a distributed version control system that was one of linus' goals what does it mean to be a distributed Version Control",
    "start": "410720",
    "end": "418000"
  },
  {
    "text": "System distributed verion Control Systems became popular in the open source world because you know if I go",
    "start": "418000",
    "end": "424560"
  },
  {
    "text": "into my day job I'm sitting in an office next to all of my co-workers we're talking to a central server down the",
    "start": "424560",
    "end": "430840"
  },
  {
    "text": "hall um which is good because in centralized Version Control you have to be offline sorry you have to be online",
    "start": "430840",
    "end": "437160"
  },
  {
    "text": "connected to the network available talking to the server to do everything if you want to look at history you ask",
    "start": "437160",
    "end": "442520"
  },
  {
    "text": "the um you ask the server for the history the server sends it down and you the UI client um you just draw it on the",
    "start": "442520",
    "end": "449599"
  },
  {
    "text": "screen for the user it was a lot easier to write Version Control clients back in those days with a distributed Version",
    "start": "449599",
    "end": "455560"
  },
  {
    "text": "Control System everything is local all of my commits all of my history everything is local if I want to if I",
    "start": "455560",
    "end": "462240"
  },
  {
    "text": "want to look at history I just open up the the repository on my hard drive um",
    "start": "462240",
    "end": "467479"
  },
  {
    "text": "if I want to check out another Branch all those branches all the files throughout history are on my local hard",
    "start": "467479",
    "end": "476159"
  },
  {
    "text": "drive um I can also commit locally which is uh which is sort of sort of",
    "start": "476159",
    "end": "483199"
  },
  {
    "text": "fascinating um that allows me to uh to work independently of one of my",
    "start": "483199",
    "end": "488720"
  },
  {
    "text": "co-workers because I can commit locally it actually allows me to do that",
    "start": "488720",
    "end": "494400"
  },
  {
    "text": "independently of my co-workers so I get a nice parallel model for development so",
    "start": "494400",
    "end": "499639"
  },
  {
    "text": "if I'm working and my cooworker Alice is working we can both commit changes to our local repositories and then we sync those up",
    "start": "499639",
    "end": "507479"
  },
  {
    "text": "um later down the road whenever we want when ever we're connected to the network we can send those changes and we can uh",
    "start": "507479",
    "end": "513440"
  },
  {
    "text": "we can merge our changes together that's actually a really uh really powerful",
    "start": "513440",
    "end": "518839"
  },
  {
    "text": "part of git is this this sort of model and it's the git repository the actual file formats that really enable this to",
    "start": "518839",
    "end": "526800"
  },
  {
    "text": "work so what does the G repository look like how does it enable this this parallel",
    "start": "526800",
    "end": "533480"
  },
  {
    "text": "workflow this this um this independent distributed workflow",
    "start": "533480",
    "end": "539880"
  },
  {
    "text": "so this is just an example let's say I've got up at the top this is my repository I've checked out something",
    "start": "541240",
    "end": "548320"
  },
  {
    "text": "from the server and it's got three commits on it so I've got commit one two three on my server Alice has done the",
    "start": "548320",
    "end": "554240"
  },
  {
    "text": "same thing on her hard drive she's got commits one commit two commit three okay",
    "start": "554240",
    "end": "560839"
  },
  {
    "text": "now if we both want to start making changes I can make a change and commit it to my local repository it's built on",
    "start": "560839",
    "end": "567120"
  },
  {
    "text": "top of those last ones Alice does the same at the same time now when I want Alice's changes I",
    "start": "567120",
    "end": "575079"
  },
  {
    "text": "want to bring those into my repository so I'll fetch them from the server where she's put them and I'll bring them into",
    "start": "575079",
    "end": "581720"
  },
  {
    "text": "my repository unlike a centralized Version Control System where at this point the server would figure out our",
    "start": "581720",
    "end": "588279"
  },
  {
    "text": "changes and merge them together for us and then give us back um some sort of amalgamation of the two that it's",
    "start": "588279",
    "end": "594120"
  },
  {
    "text": "figured out git doesn't do that right I download Alice's commit and it's",
    "start": "594120",
    "end": "599760"
  },
  {
    "text": "built on top of commit three still it's not it has nothing to do with my commit",
    "start": "599760",
    "end": "605240"
  },
  {
    "text": "they're not in any way intertwined until I actually explicitly merge them and I get a commit that's the",
    "start": "605240",
    "end": "612920"
  },
  {
    "text": "that's the combination of those two changes and this is kind of key to how history is modeled and",
    "start": "612920",
    "end": "620480"
  },
  {
    "text": "get let's see if I can figure out how to do this excellent so here I've got that Repository that I've been showing you",
    "start": "623600",
    "end": "630480"
  },
  {
    "text": "and I'm going to use if I just look at the git log it",
    "start": "630480",
    "end": "635880"
  },
  {
    "text": "just looks like this is what you see if you just run the git log command which is how you look at history this is what you see on GitHub this is what you see",
    "start": "635880",
    "end": "642040"
  },
  {
    "text": "on Visual Studio online this is what you see on these websites and it's just a flat list of commits and it doesn't",
    "start": "642040",
    "end": "647440"
  },
  {
    "text": "really elucidate that sort of sort of flow that I I was showing you so instead",
    "start": "647440",
    "end": "652839"
  },
  {
    "text": "if you use this command git log D- graph-- one line",
    "start": "652839",
    "end": "660440"
  },
  {
    "text": "you actually can see um how how history sort of branches off and I make my",
    "start": "660440",
    "end": "666800"
  },
  {
    "text": "change Alice makes her change they're both they both point to that original commit that they that they both started",
    "start": "666800",
    "end": "673560"
  },
  {
    "text": "from and then they come back together in that that merged commit that includes both of our",
    "start": "673560",
    "end": "679120"
  },
  {
    "text": "changes okay you can use other tools um you know there's get K there's g x which",
    "start": "679120",
    "end": "685560"
  },
  {
    "text": "opened up way behind here um and pardon",
    "start": "685560",
    "end": "692839"
  },
  {
    "text": "me didn't realize I had audio um and they'll also show you this graph so it's it's really just uh you know the",
    "start": "693120",
    "end": "700040"
  },
  {
    "text": "websites and and the default git log that tries to show you this this linear list of history that that's helpful I",
    "start": "700040",
    "end": "706320"
  },
  {
    "text": "like looking at the graph so because I think it really illustrates what G is actually doing",
    "start": "706320",
    "end": "714399"
  },
  {
    "text": "okay",
    "start": "714399",
    "end": "717399"
  },
  {
    "text": "there we go so so get actually you know we we've",
    "start": "721399",
    "end": "726720"
  },
  {
    "text": "we've seen this graph we've talked about this graph git actually stores its data in this graph it's called a directed ayylic graph uh I failed graph Theory so",
    "start": "726720",
    "end": "734720"
  },
  {
    "text": "I'm going to try to walk you through what that means it's directed um an undirected graph nodes are just",
    "start": "734720",
    "end": "740320"
  },
  {
    "text": "connected to each other in a directed graph one node uh actually points to the",
    "start": "740320",
    "end": "746240"
  },
  {
    "text": "next and so that's so git actually has Direction in its graph and it's acyclic",
    "start": "746240",
    "end": "751760"
  },
  {
    "text": "if it had a cycle a node could be pointing back to itself you know then you have a cycle from one to two to three back to one you",
    "start": "751760",
    "end": "759000"
  },
  {
    "text": "can't do that so these are actually building off each other pointing to their parents commit two Builds on",
    "start": "759000",
    "end": "765160"
  },
  {
    "text": "Commit one commit three Builds on Commit two you can't have Commit one building back on the",
    "start": "765160",
    "end": "770760"
  },
  {
    "text": "future um which makes sense you know time we at least perceive it as linear so this this jives with our our",
    "start": "770760",
    "end": "778360"
  },
  {
    "text": "understanding of time this is the second lie I think this is",
    "start": "778360",
    "end": "783480"
  },
  {
    "text": "the last lie I'm going to tell you I hope so uh if so the rest are unintentional um we've talked about",
    "start": "783480",
    "end": "788959"
  },
  {
    "text": "these commit IDs as being one two three and when when I made a change I got",
    "start": "788959",
    "end": "794079"
  },
  {
    "text": "commit four when Alice made a change she got number five how did we know who got four and who got five",
    "start": "794079",
    "end": "799880"
  },
  {
    "text": "well you know in a centralized server it would just you know determine who gets",
    "start": "799880",
    "end": "805079"
  },
  {
    "text": "the next commit ID and in GID it's not so easy because there is no Central server so you can't just do 1 2 3 4 five",
    "start": "805079",
    "end": "812680"
  },
  {
    "text": "um we need a better strategy in git we could use a random number we could use a guid um what git actually does is really",
    "start": "812680",
    "end": "820399"
  },
  {
    "text": "clever it actually takes a sha one hash of the contents of the commit and that",
    "start": "820399",
    "end": "827760"
  },
  {
    "text": "becomes the commit ID um sha one is a 160 bit hash so that's 20 bytes so when",
    "start": "827760",
    "end": "835720"
  },
  {
    "text": "you turn that into a hexadecimal string um so that it's nice easy to work with so that you're not talking binary uh",
    "start": "835720",
    "end": "841959"
  },
  {
    "text": "it's actually 40 characters long so 40 characters of heximal um they get a little unwieldly",
    "start": "841959",
    "end": "848360"
  },
  {
    "text": "um instead we usually talk about just the first seven characters we talk about just enough to uniquely identify that",
    "start": "848360",
    "end": "854399"
  },
  {
    "text": "commit in our history um and that's a little better we're still talking about A50",
    "start": "854399",
    "end": "862240"
  },
  {
    "text": "abcf which is not which is kind of a mouthful but it's not that much worse my TFS server has a million change sets on",
    "start": "862240",
    "end": "867839"
  },
  {
    "text": "it so it's not that much worse than a seven-digit number",
    "start": "867839",
    "end": "873040"
  },
  {
    "text": "really um what do I mean when I say that we",
    "start": "873040",
    "end": "878240"
  },
  {
    "text": "hash the contents of the commit um what does that mean a commit is a snapshot of the entire",
    "start": "878240",
    "end": "885320"
  },
  {
    "text": "repository if you've worked with Git a lot of times if you run git show on your on your commit or if you upload it to",
    "start": "885320",
    "end": "892079"
  },
  {
    "text": "GitHub you see a diff so it's very easy to think of G as",
    "start": "892079",
    "end": "897759"
  },
  {
    "text": "storing Patches from one revision to another that's not actually how git stores its data git stores a commit a",
    "start": "897759",
    "end": "903800"
  },
  {
    "text": "snapshot of the entire repository at every point in time um and especially if",
    "start": "903800",
    "end": "909320"
  },
  {
    "text": "you've got every file and every commit it sounds like that gets very expensive very quickly um it doesn't um and here's",
    "start": "909320",
    "end": "918120"
  },
  {
    "text": "how here's how git gets around that expense when git builds a commit it builds this",
    "start": "918120",
    "end": "924399"
  },
  {
    "text": "snapshot it points to what it calls tree objects and blob objects",
    "start": "924399",
    "end": "929560"
  },
  {
    "text": "trees are files blob I'm sorry trees are directories blobs are",
    "start": "929560",
    "end": "935560"
  },
  {
    "text": "files if I have just my first commit my first commit in history I'm adding one file file one. text I have a commit and",
    "start": "935560",
    "end": "943319"
  },
  {
    "text": "it points to a tree that's my root directory for my repository inside that directory I have",
    "start": "943319",
    "end": "948959"
  },
  {
    "text": "just one blob one file called file one. text and you'll notice like commits have",
    "start": "948959",
    "end": "954800"
  },
  {
    "text": "IDs the other objects blobs and trees also have IDs",
    "start": "954800",
    "end": "959880"
  },
  {
    "text": "so when we build this when we build our repository when we build our first commit we're adding file one. text we",
    "start": "959880",
    "end": "966399"
  },
  {
    "text": "take file one. text and we hash it with Shaw one same same mechanism that we use",
    "start": "966399",
    "end": "971920"
  },
  {
    "text": "for commits and we get its ID and that becomes its blob",
    "start": "971920",
    "end": "977240"
  },
  {
    "text": "ID and then we build a tree that points to that blob by its ID and its file name",
    "start": "977240",
    "end": "982279"
  },
  {
    "text": "and we hash that that becomes the tree ID and then we put that into a commit",
    "start": "982279",
    "end": "989160"
  },
  {
    "text": "and we hash it and that becomes our commit ID when we add another file so",
    "start": "989160",
    "end": "995079"
  },
  {
    "text": "we're taking snapshots when we add another file our next commit let's say we add file 2.",
    "start": "995079",
    "end": "1001399"
  },
  {
    "text": "text and commit it we hash file 2. text and create a",
    "start": "1001399",
    "end": "1007000"
  },
  {
    "text": "blob out of that file one didn't change its blob ID stays the same so we don't",
    "start": "1007000",
    "end": "1012600"
  },
  {
    "text": "have a new object for file 1. text so ultimately we're only storing the",
    "start": "1012600",
    "end": "1018480"
  },
  {
    "text": "changes is even though we get a snapshot of the full tree when we actually look at the commit",
    "start": "1018480",
    "end": "1024839"
  },
  {
    "text": "when we look at the tree and of course our tree ID changed because the uh it now lists a second file from",
    "start": "1024839",
    "end": "1032558"
  },
  {
    "text": "before okay let's take a uh let's take a look at that let's look at just this",
    "start": "1032559",
    "end": "1038000"
  },
  {
    "text": "second commit um which is 69 a46 F see",
    "start": "1038000",
    "end": "1044000"
  },
  {
    "text": "it is a little unwieldy to talk about them um",
    "start": "1044000",
    "end": "1049440"
  },
  {
    "text": "pardon me there we go so um if",
    "start": "1049440",
    "end": "1059400"
  },
  {
    "text": "we if we look at this is what you typically work with in a g repository this is our working directory right I've",
    "start": "1059400",
    "end": "1064960"
  },
  {
    "text": "just got it checked out I've got a couple of files file 1. text file two. text I've kept adding a few",
    "start": "1064960",
    "end": "1070960"
  },
  {
    "text": "more and then there's a dogit folder if you're on Windows this is hidden by default it's got the hidden attribute so",
    "start": "1070960",
    "end": "1076960"
  },
  {
    "text": "you can't see it unless you uh show hidden files um I I always unhide these",
    "start": "1076960",
    "end": "1082360"
  },
  {
    "text": "because I love actually getting inside the git directory um I mean you know maybe don't make changes in there",
    "start": "1082360",
    "end": "1087760"
  },
  {
    "text": "without knowing what you're doing but you know let's let's poke around right so inside the dogit",
    "start": "1087760",
    "end": "1094000"
  },
  {
    "text": "directory I have a bunch of other directories this is actually my repository this is the database this is",
    "start": "1094000",
    "end": "1099120"
  },
  {
    "text": "how my repository uh works and one of these directories is the objects",
    "start": "1099120",
    "end": "1105720"
  },
  {
    "text": "directory and inside there I've got a bunch of two character directory names",
    "start": "1106159",
    "end": "1112320"
  },
  {
    "text": "um I said I was looking at object uh 69 something so the first two characters",
    "start": "1112320",
    "end": "1118679"
  },
  {
    "text": "correspond to the first two characters of the object ID that's stored there so my objects are actually just",
    "start": "1118679",
    "end": "1125360"
  },
  {
    "text": "stored on disk object 6984 6f is just in a file called object",
    "start": "1125360",
    "end": "1132320"
  },
  {
    "text": "69a 846 F we can't really look at that directly",
    "start": "1132320",
    "end": "1140720"
  },
  {
    "text": "uh if I just open the file up it's a binary file um it's actually just a compressed file so instead I'm going to",
    "start": "1141480",
    "end": "1148080"
  },
  {
    "text": "use a git command called cat file git cat file",
    "start": "1148080",
    "end": "1154840"
  },
  {
    "text": "will actually just extract this file and just dump it to the screen so I can see exactly what git is storing for a",
    "start": "1154840",
    "end": "1162679"
  },
  {
    "text": "commit and I only again I only have to give it the first couple characters just enough of the commit ID just enough to",
    "start": "1163000",
    "end": "1168919"
  },
  {
    "text": "uh to be able to uniquely find it in the repository and this is actually our",
    "start": "1168919",
    "end": "1174360"
  },
  {
    "text": "commit again it points to a tree that actually has all the changes uh it",
    "start": "1174360",
    "end": "1180120"
  },
  {
    "text": "points to its parent that's how it builds the directed a cyclic graph a commit stores a pointer",
    "start": "1180120",
    "end": "1185799"
  },
  {
    "text": "to its parent um there's some metadata and then a commit message you know who created the commit and when",
    "start": "1185799",
    "end": "1193240"
  },
  {
    "text": "um if I want to look at the tree that this commit points to uh I can use cat file tree",
    "start": "1193240",
    "end": "1199320"
  },
  {
    "text": "and I'll be really disappointed if I do it turns out the tree is one of the very few formats uh in the git repository",
    "start": "1199320",
    "end": "1206720"
  },
  {
    "text": "that's binary um just for a little bit of uh of speed up in parsing it uh I can",
    "start": "1206720",
    "end": "1213080"
  },
  {
    "text": "use a different command called LST tree and again I just give it the",
    "start": "1213080",
    "end": "1220960"
  },
  {
    "text": "ID and really all it does is store the hierarchy of the file system uh I've got",
    "start": "1220960",
    "end": "1226760"
  },
  {
    "text": "two files in here file one. text file 2. text and I can go back to cat file to",
    "start": "1226760",
    "end": "1232080"
  },
  {
    "text": "look at blob since nothing binary about them um and if I run cat file blob I",
    "start": "1232080",
    "end": "1237520"
  },
  {
    "text": "just get the contents uh of the file so there are these very very simple file",
    "start": "1237520",
    "end": "1243200"
  },
  {
    "text": "formats that are combined to make a very powerful uh",
    "start": "1243200",
    "end": "1249200"
  },
  {
    "text": "system again if I want to uh the all these file formats these commits um",
    "start": "1250320",
    "end": "1256000"
  },
  {
    "text": "these you know text files basically um actually build the structure of our",
    "start": "1256000",
    "end": "1261440"
  },
  {
    "text": "repository if I want to if I look at my most recent uh commit",
    "start": "1261440",
    "end": "1269320"
  },
  {
    "text": "it's a merge commit it's got two parents so it actually when you walk when you display the git graph it just starts at",
    "start": "1269320",
    "end": "1275840"
  },
  {
    "text": "the tip you know your most recent commit uh finds the parents and keeps drawing",
    "start": "1275840",
    "end": "1280960"
  },
  {
    "text": "them that's actually how it draws the graph okay",
    "start": "1280960",
    "end": "1287279"
  },
  {
    "text": "great commits are great um but it turns out that uh being able to commit an a",
    "start": "1292919",
    "end": "1298440"
  },
  {
    "text": "verion control system is not really so helpful unless you can also Branch if you only have one branch if you will um",
    "start": "1298440",
    "end": "1307080"
  },
  {
    "text": "everything's going into master and if you're checking in while you're working on a feature and Bob needs to ship some",
    "start": "1307080",
    "end": "1313159"
  },
  {
    "text": "really important bug fix your feature is getting shipped to production too um and",
    "start": "1313159",
    "end": "1318880"
  },
  {
    "text": "that's not good so we have branches so that I can work on my feature Bob can work on his super critical bug fix and",
    "start": "1318880",
    "end": "1324320"
  },
  {
    "text": "he can ship that Branch to production while I still keep working and I don't have to you know live under the tyranny",
    "start": "1324320",
    "end": "1331240"
  },
  {
    "text": "of Bob's bugfix um branches and git are really clever branches their entire goal is to",
    "start": "1331240",
    "end": "1338320"
  },
  {
    "text": "support parallel development we've seen that git supports parallel development and it does that um in the repository",
    "start": "1338320",
    "end": "1345559"
  },
  {
    "text": "structure right that I can make a change and Alice can can make a change independently is parallel",
    "start": "1345559",
    "end": "1351600"
  },
  {
    "text": "development so git takes advantage of that in its branching structure git branches they exist at the repository",
    "start": "1351600",
    "end": "1357480"
  },
  {
    "text": "level so unlike some centralized Version Control Systems like TFS or SVN where you've got like a trunk folder and then",
    "start": "1357480",
    "end": "1363200"
  },
  {
    "text": "you create a branch next to it another folder um git branches exist at the",
    "start": "1363200",
    "end": "1369000"
  },
  {
    "text": "repository level and they exist just as pointers within this graph that we've been creating so they're exceptionally",
    "start": "1369000",
    "end": "1375880"
  },
  {
    "text": "lightweight they're very easy to work with that encourages you to Branch often",
    "start": "1375880",
    "end": "1381159"
  },
  {
    "text": "and get you know in team Foundation server you have to be an administrator to create a branch which is terrible um",
    "start": "1381159",
    "end": "1388080"
  },
  {
    "text": "but you know in git you can create a branch it only exists on your local file system nobody else has to see it if you",
    "start": "1388080",
    "end": "1394520"
  },
  {
    "text": "don't want you know the experiment that you've done in that Branch you can just throw it away okay they're really just a",
    "start": "1394520",
    "end": "1401760"
  },
  {
    "text": "pointer in the graph so if we extend this uh this this repository we've been",
    "start": "1401760",
    "end": "1406840"
  },
  {
    "text": "looking at um when I merged Alice's changes which were on her Branch into",
    "start": "1406840",
    "end": "1413679"
  },
  {
    "text": "mine um they they moved into my Branch",
    "start": "1413679",
    "end": "1419679"
  },
  {
    "text": "okay to see just how lightweight they really are um here in my dogit",
    "start": "1419679",
    "end": "1428559"
  },
  {
    "text": "folder there we go here in my dogit folder um next to the objects directory",
    "start": "1432320",
    "end": "1438760"
  },
  {
    "text": "which is where all our objects are stored is a directory called refs um and refs is kind of a terrible name um but",
    "start": "1438760",
    "end": "1447360"
  },
  {
    "text": "there are two directories inside that heads and tags tags are for tags which makes sense",
    "start": "1447360",
    "end": "1453960"
  },
  {
    "text": "heads are for branches which doesn't um but if you can put the the bad name aside if we go into our heads directory",
    "start": "1453960",
    "end": "1460440"
  },
  {
    "text": "and look at what's inside we've got a file called Alice and a file called mine and these actually correspond to the",
    "start": "1460440",
    "end": "1467080"
  },
  {
    "text": "branches in my repository right now and if I get my trusty get log back",
    "start": "1467080",
    "end": "1473159"
  },
  {
    "text": "out and I run get log D- graph D- one line D-",
    "start": "1473159",
    "end": "1480480"
  },
  {
    "text": "decorate and if you get really tired of typing this this is my favorite get log command this is my favorite way to look",
    "start": "1480480",
    "end": "1485640"
  },
  {
    "text": "at history is D- graph-- one line-- decorate if you get really tired of typing this make an alias I've Alias git",
    "start": "1485640",
    "end": "1493520"
  },
  {
    "text": "LOL this is what a lot of people do makes me smile every time I run it so I can run get LOL um and so this is what",
    "start": "1493520",
    "end": "1500799"
  },
  {
    "text": "we saw before except we were now decorating the branches um and we so you can see Alice",
    "start": "1500799",
    "end": "1506799"
  },
  {
    "text": "points to that commit my Branch points to to that commit and if we look at",
    "start": "1506799",
    "end": "1512360"
  },
  {
    "text": "these two files that are in this ref heads directory we can see how that works the Alice file just contains a",
    "start": "1512360",
    "end": "1519880"
  },
  {
    "text": "commit ID the mine file also just contains a",
    "start": "1519880",
    "end": "1525279"
  },
  {
    "text": "commit ID these are really just pointers into the graph when I create a new",
    "start": "1525279",
    "end": "1532320"
  },
  {
    "text": "commit that that number will advance so it moves me forward if I go back into my working",
    "start": "1532320",
    "end": "1538159"
  },
  {
    "text": "directory and let's edit file 3. text let's get excited about file 3. text",
    "start": "1538159",
    "end": "1543720"
  },
  {
    "text": "let's change that period into an exclamation point so when I do that if we zoom",
    "start": "1543720",
    "end": "1553480"
  },
  {
    "text": "in it tells us that on the mind Branch we we've updated commit number 23 F9",
    "start": "1555799",
    "end": "1564480"
  },
  {
    "text": "d06 and if we actually look inside our ref's heads",
    "start": "1564480",
    "end": "1571720"
  },
  {
    "text": "mine it points now to 23f whatever so it's actually advancing",
    "start": "1571720",
    "end": "1577919"
  },
  {
    "text": "that pointer every time we do a commit",
    "start": "1577919",
    "end": "1585360"
  },
  {
    "text": "okay there's another special sort of meta Branch pointer in git which is called head that's what keeps track of",
    "start": "1586120",
    "end": "1593520"
  },
  {
    "text": "what branch you're on um and that's also just a text file",
    "start": "1593520",
    "end": "1600399"
  },
  {
    "text": "inside the git",
    "start": "1600399",
    "end": "1602960"
  },
  {
    "text": "repository so if I look at this file. Geth head it's so important that it",
    "start": "1605960",
    "end": "1611399"
  },
  {
    "text": "doesn't even um it doesn't even go into a a directory a subdirectory inside do",
    "start": "1611399",
    "end": "1618279"
  },
  {
    "text": "get um and actually that's true this is the only file that has to exist for you to be a git repository if git sees a",
    "start": "1618279",
    "end": "1624799"
  },
  {
    "text": "file called head and all caps you're a get repository if it doesn't you are not I don't know what you are it doesn't",
    "start": "1624799",
    "end": "1629960"
  },
  {
    "text": "matter if you have an objects directory and a ref directory you can have all that other stuff if you don't have a head you are not a get",
    "start": "1629960",
    "end": "1636600"
  },
  {
    "text": "repository head is just also a pointer um and it just encodes the name of the",
    "start": "1636600",
    "end": "1641840"
  },
  {
    "text": "repository sorry the name of the branch that you're on in this case I'm on the the M Branch if I switch branch",
    "start": "1641840",
    "end": "1649360"
  },
  {
    "text": "can use the get checkout command to check out Alice's Branch switch to the Alice Branch now if I look at head points to",
    "start": "1649360",
    "end": "1656760"
  },
  {
    "text": "Alice so get switches branches just by updating that file and then checking out the differences it's very very",
    "start": "1656760",
    "end": "1663760"
  },
  {
    "text": "efficient I'm going to switch back to mine",
    "start": "1663760",
    "end": "1669679"
  },
  {
    "text": "okay what happens if I if I create a new commit let's",
    "start": "1669679",
    "end": "1676200"
  },
  {
    "text": "say Advanced VI I can't even I Chang that exclamation point back to a",
    "start": "1676200",
    "end": "1682679"
  },
  {
    "text": "period so again mine the pointer to my branch is",
    "start": "1683399",
    "end": "1691279"
  },
  {
    "text": "updated to point to the new commit head still stays pointing to mine so the",
    "start": "1691279",
    "end": "1698679"
  },
  {
    "text": "only time head changes is when you check out a new branch and if I look at my my git log",
    "start": "1698679",
    "end": "1705240"
  },
  {
    "text": "you can see that head has advanced forward mine has advanced forward",
    "start": "1705240",
    "end": "1710120"
  },
  {
    "text": "okay so that's that's a a the quickest uh uh introduction I can give you to get",
    "start": "1715760",
    "end": "1722080"
  },
  {
    "text": "branches and how they're stored uh locally and branches are great but",
    "start": "1722080",
    "end": "1727360"
  },
  {
    "text": "branches don't really do anything for you unless you can merge them right otherwise we're just working in separate",
    "start": "1727360",
    "end": "1733000"
  },
  {
    "text": "repositories really um and Alice and my changes will never coexist",
    "start": "1733000",
    "end": "1738919"
  },
  {
    "text": "so uh that's where merging comes in we've seen merging we've actually you",
    "start": "1738919",
    "end": "1744880"
  },
  {
    "text": "know sort of Illustrated merging between Alice and and myself already but we didn't talk about what happens to the branch pointers when we do",
    "start": "1744880",
    "end": "1752640"
  },
  {
    "text": "that when we want to merge Alice's changes into ours we",
    "start": "1752640",
    "end": "1759159"
  },
  {
    "text": "actually create a new commit and update the pointer to that and we so get merge uh is basically a a",
    "start": "1759159",
    "end": "1767000"
  },
  {
    "text": "three-way merge algorithm much like what you're used to seeing um it finds all the",
    "start": "1767000",
    "end": "1772399"
  },
  {
    "text": "files uh well sorry first it finds the common ancestor so if I'm merging my",
    "start": "1772399",
    "end": "1778159"
  },
  {
    "text": "Branch into let's go back if we're merging my Branch into Alice's Branch we find our common ancestor super easy in",
    "start": "1778159",
    "end": "1785279"
  },
  {
    "text": "git um in team Foundation server in subversion you've got to keep track of which branches have been merged when in",
    "start": "1785279",
    "end": "1791960"
  },
  {
    "text": "git you just look in the graph this this information is encoded within the graph",
    "start": "1791960",
    "end": "1797760"
  },
  {
    "text": "the last point at which these two branches were merged or the last point or the the point at which they first",
    "start": "1797760",
    "end": "1803320"
  },
  {
    "text": "diverged is your common ancestor and you can use this for all three-way merge",
    "start": "1803320",
    "end": "1808480"
  },
  {
    "text": "calculations so to do a three-way merge you look at the files that are different in my Branch versus Al versus the common",
    "start": "1808480",
    "end": "1815760"
  },
  {
    "text": "ancestor and the files that are different between Alice's branch and the common ancestor and then you have to automerge",
    "start": "1815760",
    "end": "1823120"
  },
  {
    "text": "those so you look at the lines that are different and you you just kind of go step by step um finding the",
    "start": "1823120",
    "end": "1828640"
  },
  {
    "text": "differences that gives you a new commit and we update the pointers to",
    "start": "1828640",
    "end": "1834320"
  },
  {
    "text": "match okay what does that actually look like in the",
    "start": "1834320",
    "end": "1839519"
  },
  {
    "text": "repository great so I'm going to uh right now we've we've we've",
    "start": "1841360",
    "end": "1848960"
  },
  {
    "text": "already done this merge I'm going to reset my S to the point at which my",
    "start": "1848960",
    "end": "1855000"
  },
  {
    "text": "Branch existed and Alice's branch existed and we had not yet merged them",
    "start": "1855000",
    "end": "1860679"
  },
  {
    "text": "um one another great thing about git I can just run git reset um and that will set my Branch pointer back to any point",
    "start": "1860679",
    "end": "1867279"
  },
  {
    "text": "in time if I run get log now you can see I don't have Alice's",
    "start": "1867279",
    "end": "1872399"
  },
  {
    "text": "change right this only has my change I've got a nice linear history I've I've had the",
    "start": "1872399",
    "end": "1879120"
  },
  {
    "text": "first three commits that we had in common then I've created a new commit on top of that",
    "start": "1879120",
    "end": "1885679"
  },
  {
    "text": "when I run get merge Alice I'm prompted for a merge",
    "start": "1888039",
    "end": "1893320"
  },
  {
    "text": "message I'll write",
    "start": "1893320",
    "end": "1896799"
  },
  {
    "text": "one sorry accidentally typed the wrong thing",
    "start": "1898480",
    "end": "1903880"
  },
  {
    "text": "uh I'm going to create a merge message and when I do I get that new updated",
    "start": "1903880",
    "end": "1910480"
  },
  {
    "text": "branch and again it creates this nice graphical history for",
    "start": "1910480",
    "end": "1915799"
  },
  {
    "text": "me okay",
    "start": "1915799",
    "end": "1919799"
  },
  {
    "text": "so there's a special kind of merge in git and that's called a fastforward merge and this is something that can",
    "start": "1927240",
    "end": "1933080"
  },
  {
    "text": "really only exist in a distributed version control system that uses a a graph to underly its data store um what",
    "start": "1933080",
    "end": "1942039"
  },
  {
    "text": "if I hadn't made any changes so what if I checked out a branch",
    "start": "1942039",
    "end": "1948600"
  },
  {
    "text": "and Alice had checked out a branch and she'd made some change on it right there had been some change going into my future",
    "start": "1948600",
    "end": "1954519"
  },
  {
    "text": "Branch um and I wanted to merge these two branches it looks really trivial when you look at it like this right um",
    "start": "1954519",
    "end": "1961679"
  },
  {
    "text": "there's there's not a lot to do here and so what get does is it just moves the branch pointer",
    "start": "1961679",
    "end": "1966840"
  },
  {
    "text": "forward right I don't uh I don't have to do the the three-way merge algorithm",
    "start": "1966840",
    "end": "1972480"
  },
  {
    "text": "because there's no three ways right there's a common ancestor and there's my commit they're",
    "start": "1972480",
    "end": "1978960"
  },
  {
    "text": "the same thing so instead of trying to do some calculation about which files have changed in which branch get knows",
    "start": "1978960",
    "end": "1986279"
  },
  {
    "text": "nothing's changed in our Branch so it can just move those pointers forward and that's what it does so if you've ever",
    "start": "1986279",
    "end": "1991799"
  },
  {
    "text": "seen that message um a fastforward merge has occurred uh you'll see that a lot when you do a PLL um if you have the",
    "start": "1991799",
    "end": "1999159"
  },
  {
    "text": "workflow where you have let's say a master Branch um is usually your your main Branch's name",
    "start": "1999159",
    "end": "2005960"
  },
  {
    "text": "let's say you have a master branch and you keep that exactly up to date with the server and you only create feature",
    "start": "2005960",
    "end": "2011360"
  },
  {
    "text": "branches you only work in feature branches you never do any work for yourself in master you'll often want to",
    "start": "2011360",
    "end": "2017000"
  },
  {
    "text": "up you know uh get yourself up to date with the server you'll do a pull from your master from the server's Master",
    "start": "2017000",
    "end": "2023399"
  },
  {
    "text": "into your master and it'll tell you it's done a fastforward merge that's what it's doing um when it does",
    "start": "2023399",
    "end": "2031600"
  },
  {
    "text": "that okay so if I actually go back",
    "start": "2031600",
    "end": "2039720"
  },
  {
    "text": "if I go back to our common ancestor this is commit number three that we've been looking at and I want to merge Alice's",
    "start": "2041120",
    "end": "2047279"
  },
  {
    "text": "Branch into ours if I run get merge",
    "start": "2047279",
    "end": "2053638"
  },
  {
    "text": "Alice it tells us that it did a fast forward okay all it did was update the",
    "start": "2053639",
    "end": "2060118"
  },
  {
    "text": "branch pointers so now um where B3 f009 was Alice before",
    "start": "2060119",
    "end": "2068158"
  },
  {
    "text": "now it points mine to that as well okay um it hasn't created a new commit it",
    "start": "2068159",
    "end": "2073358"
  },
  {
    "text": "hasn't it hasn't actually created a merge in in your graph history um but it's done the same thing",
    "start": "2073359",
    "end": "2080440"
  },
  {
    "text": "um effectively uh in terms of what's in your working directory it's brought Alice's changes into ours if you really",
    "start": "2080440",
    "end": "2087480"
  },
  {
    "text": "don't want to do that you can avoid it and sometimes you don't right sometimes you actually want to see how uh changes",
    "start": "2087480",
    "end": "2093599"
  },
  {
    "text": "were made um if we uh if we reset back to that you can",
    "start": "2093599",
    "end": "2100320"
  },
  {
    "text": "say-- no FF when you do a merge and that will force git uh to actually",
    "start": "2100320",
    "end": "2108000"
  },
  {
    "text": "create a merge commit you can see it says merge done by the recursive strategy um if I look at my git log it",
    "start": "2108000",
    "end": "2115960"
  },
  {
    "text": "actually uh it actually does make a new commit for that okay there's some value",
    "start": "2115960",
    "end": "2123359"
  },
  {
    "text": "in being able to see how your commits um uh have been made how your merges have",
    "start": "2123359",
    "end": "2128520"
  },
  {
    "text": "been made and the actual practice of what's happened in your repository as opposed to just using fast forward",
    "start": "2128520",
    "end": "2134960"
  },
  {
    "text": "commits I would only do this on Integrations personally you know if I'm doing a PLL you you don't want to create",
    "start": "2134960",
    "end": "2140440"
  },
  {
    "text": "a merge commit every time you do a PLL into Master probably um but this is this can be useful if you're trying to merge",
    "start": "2140440",
    "end": "2146400"
  },
  {
    "text": "a feature Branch into master and you've maybe rebased",
    "start": "2146400",
    "end": "2151520"
  },
  {
    "text": "it um that's a that's a scary word for a lot of people rebase um",
    "start": "2151520",
    "end": "2158359"
  },
  {
    "text": "it shouldn't be um what does rebasing actually do well there there's actually a couple",
    "start": "2158359",
    "end": "2164200"
  },
  {
    "text": "forms of rebase um there's rebase interactive and then there's just regular old rebase um rebase interactive",
    "start": "2164200",
    "end": "2171800"
  },
  {
    "text": "is a special kind of uh Beast um but regular old rebase is actually really",
    "start": "2171800",
    "end": "2178560"
  },
  {
    "text": "straightforward um rebase unfortunately rebas is one of those commands that I used uh in the",
    "start": "2178560",
    "end": "2185280"
  },
  {
    "text": "example of bad get documentation commands Where It Forward ports local commits onto I forget what it I I I",
    "start": "2185280",
    "end": "2192880"
  },
  {
    "text": "totally forget the mechanism behind rebase is actually really simple um here we've got",
    "start": "2192880",
    "end": "2199440"
  },
  {
    "text": "the same repository we've been looking at where I have a change Alice has a change we could merge these commits and",
    "start": "2199440",
    "end": "2207319"
  },
  {
    "text": "doing so we would get that nice you know graphical history but if we didn't want that if we actually wanted our commits",
    "start": "2207319",
    "end": "2214079"
  },
  {
    "text": "to look more like a centralized Version Control System where our commits in a straight line that might be easier to follow um",
    "start": "2214079",
    "end": "2222280"
  },
  {
    "text": "it might sort of be easier to understand when you're looking at history obviously in this um you know five six commits",
    "start": "2222280",
    "end": "2229800"
  },
  {
    "text": "everything's easy to follow um but in a a real workflow where you've got a lot of people working independently side by",
    "start": "2229800",
    "end": "2236440"
  },
  {
    "text": "side your graph can get really gnarly um and so rebasing excuse me rebasing is a",
    "start": "2236440",
    "end": "2243119"
  },
  {
    "text": "way to keep good hygiene for your graph um if you will and so what you can do is",
    "start": "2243119",
    "end": "2248839"
  },
  {
    "text": "you can actually take this commit and instead of you know this this Divergence in history you can just pluck it right",
    "start": "2248839",
    "end": "2258280"
  },
  {
    "text": "there um how does that actually work what git does in this case is it looks",
    "start": "2258280",
    "end": "2263880"
  },
  {
    "text": "at the changes between your commit or commits you can",
    "start": "2263880",
    "end": "2269400"
  },
  {
    "text": "you can rebase several commits uh and the common ancestor and it creates patch files for",
    "start": "2269400",
    "end": "2275960"
  },
  {
    "text": "each one of them so it creates a patch P to get to this commit from the common ancestor then it checks out Alice's",
    "start": "2275960",
    "end": "2282599"
  },
  {
    "text": "change and applies that patch file with you know get apply",
    "start": "2282599",
    "end": "2288400"
  },
  {
    "text": "patch um this is a sort of strange way to do things uh but it's actually really",
    "start": "2288400",
    "end": "2294000"
  },
  {
    "text": "effective um and what it does is creating that patch isolated only the changes that you had made in your",
    "start": "2294000",
    "end": "2301440"
  },
  {
    "text": "branch and then checking out Alice's Branch you can apply those changes and if they apply cleanly",
    "start": "2301440",
    "end": "2308200"
  },
  {
    "text": "great you've got those changes now on Alice's Branch um if they don't you have",
    "start": "2308200",
    "end": "2313560"
  },
  {
    "text": "conflicts and you have to go resolve them uh and resolving rebase conflicts is particularly terrible because like I",
    "start": "2313560",
    "end": "2319160"
  },
  {
    "text": "said you can rebase multiple commits at a time and so you can have to resolve the same conflicts over and over and",
    "start": "2319160",
    "end": "2326160"
  },
  {
    "text": "over again um so rebasing is not without some amount of uh pain from time to",
    "start": "2326160",
    "end": "2333160"
  },
  {
    "text": "time um let's take a look at what actually happens um so I",
    "start": "2333160",
    "end": "2339960"
  },
  {
    "text": "can so at this point I'm still just on the mine",
    "start": "2339960",
    "end": "2345160"
  },
  {
    "text": "branch and if I want to take my commit just this one commit that I've made independently of Alice's and kind of",
    "start": "2345160",
    "end": "2352280"
  },
  {
    "text": "bring it to Alice's on top of Alice's Branch I can run get rebase Alice",
    "start": "2352280",
    "end": "2360200"
  },
  {
    "text": "and can I do no commit here I cannot alas um that's too bad",
    "start": "2360200",
    "end": "2367960"
  },
  {
    "text": "uh let's actually let's force a conflict shall we",
    "start": "2367960",
    "end": "2373119"
  },
  {
    "text": "pardon",
    "start": "2373119",
    "end": "2375400"
  },
  {
    "text": "me so I'm G to add the same file that Alice has added this is guaranteed to conflict when I try to",
    "start": "2378520",
    "end": "2385720"
  },
  {
    "text": "rebase if I run get rebase Alice what it's going to do it says that",
    "start": "2386720",
    "end": "2394160"
  },
  {
    "text": "it wow it gave a lot of output uh it says the first thing it says is rewinding head to replay your work on",
    "start": "2394160",
    "end": "2400480"
  },
  {
    "text": "top of it which is one of those messages in get where it's like I don't understand what that means so what it's actually done there is it's created a",
    "start": "2400480",
    "end": "2406560"
  },
  {
    "text": "patch file of uh of all of the the the",
    "start": "2406560",
    "end": "2411839"
  },
  {
    "text": "the commits in my branch that it wants to apply onto Alice's then it's rewound the head meaning it's checked out",
    "start": "2411839",
    "end": "2417920"
  },
  {
    "text": "Alice's um uh Branch it then tries to apply one of the",
    "start": "2417920",
    "end": "2425319"
  },
  {
    "text": "first patch it made which was my first commit and that succeeded it had tried to apply the second patch which we knew",
    "start": "2425319",
    "end": "2430800"
  },
  {
    "text": "would conflict because we created the same file at the same time and um now",
    "start": "2430800",
    "end": "2436240"
  },
  {
    "text": "we're in Conflict okay if we actually look I'm",
    "start": "2436240",
    "end": "2441920"
  },
  {
    "text": "I'm serious let's take a look at inside the git directory there's this rebase apply directory and inside there there's",
    "start": "2441920",
    "end": "2447960"
  },
  {
    "text": "a bunch of stuff and one of those lest you think I'm joking is a",
    "start": "2447960",
    "end": "2453440"
  },
  {
    "text": "patch file that actually this is an old school Unix patch file that describes how to get um from uh from my first",
    "start": "2453440",
    "end": "2460800"
  },
  {
    "text": "commit to my second commit and it tries to apply that now on top of what's on Alice's",
    "start": "2460800",
    "end": "2466880"
  },
  {
    "text": "Branch um and of course I can uh fix up my commits if I'm old school and Unix",
    "start": "2466880",
    "end": "2473560"
  },
  {
    "text": "see I just get a file with a bunch of arrows in it and I pick which one I want um I can of course invoke a real",
    "start": "2473560",
    "end": "2481280"
  },
  {
    "text": "three-way merge tool if I am not so Unix um but you know I work at micros soft",
    "start": "2481280",
    "end": "2487560"
  },
  {
    "text": "I'm very Unix sorry rebase continue",
    "start": "2487560",
    "end": "2496359"
  },
  {
    "text": "and and I did a commit in the middle of my rebase which H puts me in a terrible terrible state and instead of talking",
    "start": "2496359",
    "end": "2502599"
  },
  {
    "text": "too much about that I'm gonna reset my way right out of it hey oh my God I didn't reset my way",
    "start": "2502599",
    "end": "2509520"
  },
  {
    "text": "out of it okay I'll rebas a boort um hey there we go we'll just hand",
    "start": "2509520",
    "end": "2517240"
  },
  {
    "text": "wave and pretend that didn't happen I ended up accidentally putting myself in a detached head state which it in like",
    "start": "2517240",
    "end": "2523760"
  },
  {
    "text": "all good get things is is a terrible thing",
    "start": "2523760",
    "end": "2529200"
  },
  {
    "text": "um actually you know what I usually don't don't dwell too much on detached heads what does it mean to has anybody",
    "start": "2529200",
    "end": "2534560"
  },
  {
    "text": "seen this message you're in a detached head state did you did any keep your hand up if you knew what it meant there's a couple people all right",
    "start": "2534560",
    "end": "2542040"
  },
  {
    "text": "so what does it mean to be in a detached head State generally speaking",
    "start": "2542040",
    "end": "2548800"
  },
  {
    "text": "we've we've looked at this head file before right this is the pointer to our your current Branch if you if you detach your head so",
    "start": "2548800",
    "end": "2557280"
  },
  {
    "text": "to speak oh jeeez get um there's a bunch of",
    "start": "2557280",
    "end": "2562599"
  },
  {
    "text": "ways you can do it the easiest way the most common way that happens is when you accidentally screw up in the middle of a",
    "start": "2562599",
    "end": "2567839"
  },
  {
    "text": "rebase because when git does that rewinding head it actually detaches your head oh my God I I'm sorry I can't even",
    "start": "2567839",
    "end": "2575680"
  },
  {
    "text": "believe I'm saying these words out loud they don't make sense to me um but what it's done is it's actually",
    "start": "2575680",
    "end": "2581800"
  },
  {
    "text": "checked out just a commit it doesn't check out a branch it checks out a commit and that's something you can do",
    "start": "2581800",
    "end": "2587240"
  },
  {
    "text": "in git if you just run git checkout with a commit ID it'll give you this huge warning about how you're in a detached",
    "start": "2587240",
    "end": "2593520"
  },
  {
    "text": "head State and what actually happens is your head file instead of containing a",
    "start": "2593520",
    "end": "2600839"
  },
  {
    "text": "branch it's now it now looks like a normal uh Branch where it points to a ID",
    "start": "2600839",
    "end": "2608800"
  },
  {
    "text": "instead and so the same thing happens if I were to you know edit a file and commit",
    "start": "2608800",
    "end": "2615160"
  },
  {
    "text": "it my head pointer still moves forward right I still created a commit on top of",
    "start": "2617960",
    "end": "2623000"
  },
  {
    "text": "the old one my Branch pointer my head pointer still moves forward but now it's still just pointing to that next commit",
    "start": "2623000",
    "end": "2630720"
  },
  {
    "text": "which is really unsatisfying so I'm not really on a branch and it's really easy to lose changes this way because there's",
    "start": "2630720",
    "end": "2636559"
  },
  {
    "text": "no branch pointer pointing to it so if I check out mine it gives me this big",
    "start": "2636559",
    "end": "2641960"
  },
  {
    "text": "warning that I'm losing my changes because they were made on a detached head so don't don't get into a detached",
    "start": "2641960",
    "end": "2648880"
  },
  {
    "text": "head state if you do it's easy to get out of without losing your changes so right",
    "start": "2648880",
    "end": "2654720"
  },
  {
    "text": "now I'm in a detached head um only head is pointing to my",
    "start": "2654720",
    "end": "2660000"
  },
  {
    "text": "commit I don't have a branch pointer pointing to it a real Branch pointer I can totally create an easy bran uh a",
    "start": "2660000",
    "end": "2665680"
  },
  {
    "text": "branch okay so now I'm recovered from my",
    "start": "2665680",
    "end": "2673040"
  },
  {
    "text": "detached head State I haven't lost anything",
    "start": "2673040",
    "end": "2678440"
  },
  {
    "text": "okay so that's rebasing real quick we've talked about",
    "start": "2678440",
    "end": "2684640"
  },
  {
    "text": "how the repository Works under the hood real quickly let's talk about the working",
    "start": "2684640",
    "end": "2690040"
  },
  {
    "text": "directory um and importantly the index um the",
    "start": "2690040",
    "end": "2695280"
  },
  {
    "text": "index contains a list of all of your files and I can use another fun get built",
    "start": "2695280",
    "end": "2702559"
  },
  {
    "text": "in",
    "start": "2703720",
    "end": "2706720"
  },
  {
    "text": "boy pardon me let's see how I can get out of this one there we go uh I can use another fun",
    "start": "2714319",
    "end": "2721599"
  },
  {
    "text": "built-in called LS files and so this is my index when you",
    "start": "2721599",
    "end": "2727079"
  },
  {
    "text": "run git ad when you run git RM it manipulates this file the index is unique to get and it's",
    "start": "2727079",
    "end": "2733720"
  },
  {
    "text": "actually one of the most powerful things this is what actually gets turned into my next commit so if I edit some",
    "start": "2733720",
    "end": "2743240"
  },
  {
    "text": "file and I run get status it tells me that this file is now",
    "start": "2743240",
    "end": "2749040"
  },
  {
    "text": "untracked if I run get LS files-- stage this is probably not something you want",
    "start": "2749040",
    "end": "2755240"
  },
  {
    "text": "to do on a regular basis but if you like playing with the index that's fine um and you can look at you can see that",
    "start": "2755240",
    "end": "2761960"
  },
  {
    "text": "I've still got file one file two file three if I run get",
    "start": "2761960",
    "end": "2767319"
  },
  {
    "text": "add it adds file 4. text to the index so it actually hashes file 4. text",
    "start": "2768960",
    "end": "2776160"
  },
  {
    "text": "so when I run get add it puts the object into my object database it hashes it it goes into dogit",
    "start": "2776160",
    "end": "2783480"
  },
  {
    "text": "objects 25 7c blah blah blah and it puts that in",
    "start": "2783480",
    "end": "2789480"
  },
  {
    "text": "the index now when I run get status it tells me it's about to be committed so what's actually going on",
    "start": "2789480",
    "end": "2798160"
  },
  {
    "text": "here is when git shows you status it's showing",
    "start": "2798359",
    "end": "2803800"
  },
  {
    "text": "you the the unstaged changes which is actually just running the diff between what's in your working directory and",
    "start": "2803800",
    "end": "2810079"
  },
  {
    "text": "what's in your index so when we created file 4 on disk it was in our working directory not in our index it was an",
    "start": "2810079",
    "end": "2816119"
  },
  {
    "text": "unstaged chain when we add it to the index it becomes a stage change and it computes that by",
    "start": "2816119",
    "end": "2821920"
  },
  {
    "text": "calculating the difference between the index and what's in your head okay um that's the index in a total",
    "start": "2821920",
    "end": "2831200"
  },
  {
    "text": "nutshell um it turns out get uses the index for a lot of other things but like when you merge all that goes into the",
    "start": "2831200",
    "end": "2838280"
  },
  {
    "text": "index we're going to gloss over that for now um sadly uh we're running out of",
    "start": "2838280",
    "end": "2843760"
  },
  {
    "text": "time um if there are any questions uh I",
    "start": "2843760",
    "end": "2848920"
  },
  {
    "text": "will be hanging around after um I apologize I didn't get to him here um",
    "start": "2848920",
    "end": "2855319"
  },
  {
    "text": "probably outside because I want to give the next speaker plenty of time to set up um but I hope that um you know by",
    "start": "2855319",
    "end": "2861480"
  },
  {
    "text": "cracking open the G repository we've seen kind of what's inside and it's not",
    "start": "2861480",
    "end": "2866720"
  },
  {
    "text": "not such a scary place really um and using git using the git commands is really just a veneer over manipulating",
    "start": "2866720",
    "end": "2873160"
  },
  {
    "text": "these objects so by seeing how some of this works uh I hope that you've seen",
    "start": "2873160",
    "end": "2878280"
  },
  {
    "text": "maybe how get Works a little bit better for you um please do rate this session",
    "start": "2878280",
    "end": "2884920"
  },
  {
    "text": "if you didn't like it let me know why um I actually give this talk a lot so I'd love to know um you know if you don't",
    "start": "2884920",
    "end": "2891520"
  },
  {
    "text": "like it um but thank you um uh thanks for making this your first uh you know",
    "start": "2891520",
    "end": "2898319"
  },
  {
    "text": "session here uh at go to I hope you have a great uh rest of the week so thanks",
    "start": "2898319",
    "end": "2906480"
  }
]