[
  {
    "start": "0",
    "end": "98000"
  },
  {
    "text": "foreign thanks um yeah so the Genesis of this talk was",
    "start": "5460",
    "end": "12179"
  },
  {
    "text": "uh again I've been doing this for a long time um when I started in the industry I still had hair",
    "start": "12179",
    "end": "18420"
  },
  {
    "text": "um so uh the Genesis of this talk was my realizing that every time I made some aspect of some architecture uh more",
    "start": "18420",
    "end": "25680"
  },
  {
    "text": "scalable what we were really doing was making it simpler and we were making it simpler on at least one of many",
    "start": "25680",
    "end": "31320"
  },
  {
    "text": "dimensions and so what I want to talk about is the unreasonable effectiveness of like making simple changes making the",
    "start": "31320",
    "end": "39000"
  },
  {
    "text": "systems uh individual components of the system simpler and then the complexity of the system is around composing those",
    "start": "39000",
    "end": "45660"
  },
  {
    "text": "small individual simple components together and interesting and complicated ways",
    "start": "45660",
    "end": "51780"
  },
  {
    "text": "um so yeah so uh actually most recently I was VP of engineering and Chief Architect at eBay I left a couple of",
    "start": "51780",
    "end": "58079"
  },
  {
    "text": "months ago but that was my last uh last thing that and when I'll talk about a",
    "start": "58079",
    "end": "63239"
  },
  {
    "text": "bunch of stuff from eBay here today I also spend a bunch of time at eBay earlier in my career as well as an end of digital contributor I spent some time",
    "start": "63239",
    "end": "70740"
  },
  {
    "text": "at Google running engineering for Google app engine so that's Google's platform as a service like Heroku or engine yard",
    "start": "70740",
    "end": "77520"
  },
  {
    "text": "or Cloud Foundry something like that I led engineering at Stitch fix which is a clothing retailer in the United States",
    "start": "77520",
    "end": "83700"
  },
  {
    "text": "with a ton of data science and machine learning up to and through Stitch fix's",
    "start": "83700",
    "end": "88860"
  },
  {
    "text": "IPO and then after that I also worked for several years at wework up to it's",
    "start": "88860",
    "end": "94140"
  },
  {
    "text": "not IPO okay so I want to tell two architecture",
    "start": "94140",
    "end": "100740"
  },
  {
    "start": "98000",
    "end": "235000"
  },
  {
    "text": "stories and apologies to people who saw these yesterday but I love these stories so much I'm going to tell them again",
    "start": "100740",
    "end": "106100"
  },
  {
    "text": "so eBay depending on how you count is on its fifth complete rewrite of its",
    "start": "106100",
    "end": "111240"
  },
  {
    "text": "infrastructure so it started famously 27 years ago in 1995 with the founder",
    "start": "111240",
    "end": "116520"
  },
  {
    "text": "Pierre midyar in a three-day Labor Day weekend was playing around with this new cool thing called the web and he built",
    "start": "116520",
    "end": "123060"
  },
  {
    "text": "the first thing that ultimately you know later became eBay and it was a monolithic application all written in",
    "start": "123060",
    "end": "129780"
  },
  {
    "text": "Pearl every item was a file that like lived on I like to imagine is like 386 tower that you know sat under his desk",
    "start": "129780",
    "end": "137340"
  },
  {
    "text": "in Redwood City California um and uh it didn't scale but of course it wasn't meant to the next iteration of",
    "start": "137340",
    "end": "145020"
  },
  {
    "text": "eBay which they cleverly called V2 was a monolithic C plus plus isappy dll so it",
    "start": "145020",
    "end": "151800"
  },
  {
    "text": "was a dll that plugged into Microsoft Internet information server and uh written in C plus plus like I",
    "start": "151800",
    "end": "158280"
  },
  {
    "text": "mentioned it grew at its worst to be 3.4 million lines of code in that single dll",
    "start": "158280",
    "end": "164540"
  },
  {
    "text": "the team was hitting compiler limits on the number of methods per class",
    "start": "164540",
    "end": "169800"
  },
  {
    "text": "which I'm I'm I'm embarrassed to tell you that like I remember what it was it",
    "start": "169800",
    "end": "175019"
  },
  {
    "text": "was you know that's the Microsoft compiler at the time was 60 16k methods",
    "start": "175019",
    "end": "180120"
  },
  {
    "text": "per class they were hitting that limit you can imagine what a horrible uh situation that was to work in",
    "start": "180120",
    "end": "186599"
  },
  {
    "text": "um they weren't all they weren't just all in the same repo they were and they weren't just all in the same file they",
    "start": "186599",
    "end": "191700"
  },
  {
    "text": "were actually all in the same class so you can imagine all the developers stepping on each other's toes in there",
    "start": "191700",
    "end": "197280"
  },
  {
    "text": "the next iteration was cleverly called V3 and that wasn't yet microservices but",
    "start": "197280",
    "end": "202800"
  },
  {
    "text": "that was sort of Javi Java mini applications so for each part of the site there'd be an application that",
    "start": "202800",
    "end": "208560"
  },
  {
    "text": "would serve you know the search part of the site this the selling part of the site the buying part of the site the payments part of the site Etc times",
    "start": "208560",
    "end": "214860"
  },
  {
    "text": "about 220 different different of those applications the sum total of which was was eBay",
    "start": "214860",
    "end": "221040"
  },
  {
    "text": "um and then there was a subsequent iteration uh leveraging spring and then a subsequent iteration leveraging spring",
    "start": "221040",
    "end": "227580"
  },
  {
    "text": "Boot and now I think it's fair to characterize eBay as a polyglot set of microservices mostly written in Java but",
    "start": "227580",
    "end": "232980"
  },
  {
    "text": "a bunch in node.js Amazon has gone through a similar Evolution so it started almost exactly",
    "start": "232980",
    "end": "238080"
  },
  {
    "start": "235000",
    "end": "360000"
  },
  {
    "text": "the same time as eBay and around 1994 1995 timeline um its original monolith was codenamed",
    "start": "238080",
    "end": "244319"
  },
  {
    "text": "obedos and it was a monolithic Pearl and Mason front end over a c back end and it",
    "start": "244319",
    "end": "251159"
  },
  {
    "text": "was a it was a four gigabyte application in a four gigabyte address space so it",
    "start": "251159",
    "end": "256680"
  },
  {
    "text": "was pretty uh it was pretty pretty memory constrained you can imagine like even just swapping memory in and out to",
    "start": "256680",
    "end": "262860"
  },
  {
    "text": "get the app to keep the application in memory they were regularly breaking the gnu Linker uh trying to just build this",
    "start": "262860",
    "end": "268919"
  },
  {
    "text": "application all at once and it was so we'll say effective at leaking memory",
    "start": "268919",
    "end": "274620"
  },
  {
    "text": "um that they ended up having to restart the server every 100 to 200 requests because of because of the memory leaks",
    "start": "274620",
    "end": "281460"
  },
  {
    "text": "um and and you know as a consequence of again everybody being in the same monolith Amazon was releasing about once a quarter so this was pretty bad",
    "start": "281460",
    "end": "288840"
  },
  {
    "text": "um and so uh the the Brilliance uh and the kind of investment that Amazon made after that was in fully migrating from",
    "start": "288840",
    "end": "296880"
  },
  {
    "text": "that monolith into what we would Now call microservices what they were then calling just a service oriented architecture and those Services were",
    "start": "296880",
    "end": "303000"
  },
  {
    "text": "written in the more modern languages of the time so C plus and Java and there was absolutely no sharing of data you",
    "start": "303000",
    "end": "309060"
  },
  {
    "text": "know between those um between those applications and then again in case anybody thinks that like",
    "start": "309060",
    "end": "315060"
  },
  {
    "text": "you know architecture doesn't matter or these things you know don't have impact um you can you know just a year after",
    "start": "315060",
    "end": "321360"
  },
  {
    "text": "they finished that service migration was you know AWS starts launching with its",
    "start": "321360",
    "end": "326460"
  },
  {
    "text": "first set of services um and uh Amazon starts its you know inexorable takeover of the World's",
    "start": "326460",
    "end": "332460"
  },
  {
    "text": "Online retail so architecture really matters and in particular the service oriented architecture really enabled",
    "start": "332460",
    "end": "338759"
  },
  {
    "text": "Amazon to um to hockey stick their growth so what we can learn from these",
    "start": "338759",
    "end": "344220"
  },
  {
    "text": "is that no one starts with microservices but past a certain scale almost everybody ends up with microservices so",
    "start": "344220",
    "end": "350699"
  },
  {
    "text": "uh let's talk about what it means to be to be in a microservice environment like at really large scale at the eBay or",
    "start": "350699",
    "end": "356699"
  },
  {
    "text": "Amazon or Google or Netflix scale and I want to talk about four different elements uh here today all aspects of",
    "start": "356699",
    "end": "363419"
  },
  {
    "start": "360000",
    "end": "403000"
  },
  {
    "text": "simplicity so first I want to talk about some architectural kind of building blocks that we use at Large Scale so I",
    "start": "363419",
    "end": "370620"
  },
  {
    "text": "want to talk about simple components and then I want to talk about simple interactions between those components",
    "start": "370620",
    "end": "375660"
  },
  {
    "text": "then we'll take a little bit of a step to the side or expand the idea here and talk about development practices that",
    "start": "375660",
    "end": "381360"
  },
  {
    "text": "allow allow large-scale systems to like make really simple changes and do them safely and repeatably and reliably and",
    "start": "381360",
    "end": "387840"
  },
  {
    "text": "then I want to put everything all together put those architectural building blocks together and build some interesting things and and talk about",
    "start": "387840",
    "end": "395280"
  },
  {
    "text": "and show some some particular case studies that are that are interesting and illustrate some of the points okay",
    "start": "395280",
    "end": "402240"
  },
  {
    "text": "so let's talk start with simple components so the first of those the first of those components is is modular",
    "start": "402240",
    "end": "408960"
  },
  {
    "start": "403000",
    "end": "852000"
  },
  {
    "text": "Services right so um again both of these the examples that I gave are service oriented",
    "start": "408960",
    "end": "414180"
  },
  {
    "text": "architectures and those service boundaries that bound you know the services around selling from the",
    "start": "414180",
    "end": "419280"
  },
  {
    "text": "services around search etc those are matching the problem domain and each one of those Services you know is kind of",
    "start": "419280",
    "end": "425220"
  },
  {
    "text": "directly uh implementing some part of the business logic that's associated with that problem domain and those",
    "start": "425220",
    "end": "431039"
  },
  {
    "text": "service boundaries are encapsulating both business logic and data so all the interactions that we want are are",
    "start": "431039",
    "end": "437160"
  },
  {
    "text": "through that published service interface and the interface is hiding the internal implementation details and there aren't",
    "start": "437160",
    "end": "443039"
  },
  {
    "text": "any backdoor ways to get in and out of uh the data storage so everything is coming through the front door through",
    "start": "443039",
    "end": "448800"
  },
  {
    "text": "that published service interface and those survey these service boundaries are kind of encapsulating what I'll call",
    "start": "448800",
    "end": "454440"
  },
  {
    "text": "architecture illegs right so these service boundaries are uh encapsulate fault isolation think they are they're a",
    "start": "454440",
    "end": "461940"
  },
  {
    "text": "performance optimization boundary like it allows us to do a caching and performance improvements kind of within",
    "start": "461940",
    "end": "467099"
  },
  {
    "text": "the service boundary and also super critical in the modern world is that they're also a security and a compliance",
    "start": "467099",
    "end": "472800"
  },
  {
    "text": "boundary as well So within those Services we we also want",
    "start": "472800",
    "end": "477900"
  },
  {
    "text": "to make sure that the domain logic is nice and orthogonal from the non-domain concerns uh in there so uh in the best",
    "start": "477900",
    "end": "485280"
  },
  {
    "text": "services that I've worked on and worked with um The Domain that it's the domain",
    "start": "485280",
    "end": "490620"
  },
  {
    "text": "Logics implemented in a stateless way so ideally it's a stateless pure function that just takes a bunch of inputs does a",
    "start": "490620",
    "end": "496620"
  },
  {
    "text": "bunch of processing and produces some outputs at the end if we do it if we build domain logic In This Very",
    "start": "496620",
    "end": "502440"
  },
  {
    "text": "stateless way it ends up it ends up giving us this ability to match the domain problem very directly like",
    "start": "502440",
    "end": "508800"
  },
  {
    "text": "there's no non-domain stuff in that stateless pure function it also as we'll",
    "start": "508800",
    "end": "515339"
  },
  {
    "text": "talk about a little bit later it also uh that if we can develop it that way it also makes it deterministic and makes",
    "start": "515339",
    "end": "521279"
  },
  {
    "text": "makes that logic testable in isolation and a lot more easily testable because again that domain logic is separated",
    "start": "521279",
    "end": "527700"
  },
  {
    "text": "from the other concerns and then also because it's because that domain logic is written like very clearly and very",
    "start": "527700",
    "end": "533880"
  },
  {
    "text": "cleanly it ends up being more robust to change over time like it turns out that the domains change a lot less than the",
    "start": "533880",
    "end": "540540"
  },
  {
    "text": "technology and the Frameworks that we use and the way I like to think about the implementation of one of these",
    "start": "540540",
    "end": "546240"
  },
  {
    "text": "things is that it's we implement the domain logic in a very straight line way so very straightforward very synchronous",
    "start": "546240",
    "end": "552600"
  },
  {
    "text": "internally and with minimal minimal branching and again this is uh this allows it to be very straightforward but",
    "start": "552600",
    "end": "558480"
  },
  {
    "text": "it allows also us to leverage um you know uh modern chip modern chip",
    "start": "558480",
    "end": "564959"
  },
  {
    "text": "sets and cash hierarchies and so on and so the critical idea here is to separate the domain logic from the other",
    "start": "564959",
    "end": "571740"
  },
  {
    "text": "aspects so from the i o aspects right so people are probably familiar with hexagonal architecture or maybe people",
    "start": "571740",
    "end": "577860"
  },
  {
    "text": "have heard of the ports and adapters pattern like that's that's what we're talking about here where again the domain logic is this is this uh one uh",
    "start": "577860",
    "end": "586100"
  },
  {
    "text": "kind of orthogonal part and then everything else all the side effects are kind of around that",
    "start": "586100",
    "end": "592200"
  },
  {
    "text": "um and you know the other way to think about it is it's the this is functional core with an imperative shell",
    "start": "592200",
    "end": "598080"
  },
  {
    "text": "um the next thing I want to talk about here is sharding so you know um uh Services allow us to kind of",
    "start": "598080",
    "end": "603959"
  },
  {
    "text": "vertically you know chop up our overall problem space and sharding allows us to kind of chop it up in the z-axis or in",
    "start": "603959",
    "end": "610620"
  },
  {
    "text": "the depth Direction so charts shards are about partitioning the services what I'll call data space so they're a unit",
    "start": "610620",
    "end": "616920"
  },
  {
    "text": "for um they're a unit of distribution their unit of replication they're a unit of processing and a unit of storage and",
    "start": "616920",
    "end": "624000"
  },
  {
    "text": "usually in the modern world these are hidden as an implementation detail but they're definitely there at large scale and these shards are also encapsulating",
    "start": "624000",
    "end": "631320"
  },
  {
    "text": "different architecturalities right so they're they encapsulate a resource isolation they're also a fault isolation",
    "start": "631320",
    "end": "637620"
  },
  {
    "text": "boundary they encapsulate availability concerns and also performance concerns",
    "start": "637620",
    "end": "643140"
  },
  {
    "text": "and then also again in the modern world those shards are typically Auto scaled right so we're going to divide or scale",
    "start": "643140",
    "end": "649260"
  },
  {
    "text": "out those shards as we need more and more processing or we have more and more data to process and you know some",
    "start": "649260",
    "end": "654779"
  },
  {
    "text": "examples here from you know dynamodb and Aura and bigtable are all examples of you know how large-scale systems are",
    "start": "654779",
    "end": "661200"
  },
  {
    "text": "built on a uh on these individual shards so the next thing I want to talk about",
    "start": "661200",
    "end": "667500"
  },
  {
    "text": "is how service is that services are are layered so uh so we'll start with the",
    "start": "667500",
    "end": "673440"
  },
  {
    "text": "kind of like customer facing services at the top and then we'll have common services that provide and Abstract out",
    "start": "673440",
    "end": "678899"
  },
  {
    "text": "you know widely used capabilities that are that are leveraged by a bunch of different customer facing Services",
    "start": "678899",
    "end": "684779"
  },
  {
    "text": "um and then at Large Scale these Services represent actually an ecosystem where you know Services call other",
    "start": "684779",
    "end": "690540"
  },
  {
    "text": "services which in turn call other services and it's really more of a computational graph than a layer but I",
    "start": "690540",
    "end": "696240"
  },
  {
    "text": "like the term layering I think it makes sense there and these services are going to grow and evolve over time right so",
    "start": "696240",
    "end": "703019"
  },
  {
    "text": "over time we're going to factor out common libraries and common Services as we find we need them",
    "start": "703019",
    "end": "708120"
  },
  {
    "text": "um and we're and actually what I've what I've noticed in these service ecosystems is that teams and services actually end",
    "start": "708120",
    "end": "713640"
  },
  {
    "text": "up splitting kind of like cellular mitosis right so you know you start with one cell or one service or one team and",
    "start": "713640",
    "end": "720300"
  },
  {
    "text": "it splits into two daughter teams or services and that splits and that splits and so on kind of like biological uh uh",
    "start": "720300",
    "end": "727500"
  },
  {
    "text": "like kind of like biology uh and then the other the other thing I want to talk about here is that is is",
    "start": "727500",
    "end": "733500"
  },
  {
    "text": "leveraging a common platform so again at Large Scale uh almost all the the effective places are are building this",
    "start": "733500",
    "end": "741120"
  },
  {
    "text": "common platform and giving a kind of a paved road to the developers to on which to build their services and that common",
    "start": "741120",
    "end": "747300"
  },
  {
    "text": "platform is going to you know encapsulate shared infrastructure it's going to provide standard development Frameworks it's going to provide",
    "start": "747300",
    "end": "753779"
  },
  {
    "text": "standard aspects of the developer experience like you know Version Control and CI CD pipelines and build and test",
    "start": "753779",
    "end": "760620"
  },
  {
    "text": "and deploy and all that kind of stuff and then Netflix and Google are really good examples of of this the other thing",
    "start": "760620",
    "end": "766200"
  },
  {
    "text": "and what this allowed what the common platform allows is a separation of concerns from uh the individual service",
    "start": "766200",
    "end": "772139"
  },
  {
    "text": "service teams to be able to build and maintain their domain level service and it reduces their their cognitive load",
    "start": "772139",
    "end": "778620"
  },
  {
    "text": "and allows them to kind of bound the decisions that they're that they're needing to make through enabling",
    "start": "778620",
    "end": "783779"
  },
  {
    "text": "constraints that come from the platform so interestingly at these large-scale organizations",
    "start": "783779",
    "end": "790200"
  },
  {
    "text": "um because there's so much Roi in terms of these Investments large scale organ a lot of these large-scale organizations",
    "start": "790200",
    "end": "795660"
  },
  {
    "text": "invest more than 50 percent of their engineering effort in these platform capabilities and if you're one if you're",
    "start": "795660",
    "end": "800760"
  },
  {
    "text": "a smaller company and you're leveraging cloud services you might like look at your overall engineering and uh you know",
    "start": "800760",
    "end": "806399"
  },
  {
    "text": "operational expense and you're probably spending 50 as well um and then these Services evolve over",
    "start": "806399",
    "end": "812639"
  },
  {
    "text": "time and so you know when I was at Google um what we found is that there was a lot of variation sort of again like uh like",
    "start": "812639",
    "end": "818880"
  },
  {
    "text": "biology like variation in natural selection so we were constantly creating and extracting new Services as we found",
    "start": "818880",
    "end": "824399"
  },
  {
    "text": "those needs uh Services would justify their continued existence by continuing to be used and then we would deprecate",
    "start": "824399",
    "end": "831480"
  },
  {
    "text": "Services when they were no longer being used by anybody and again as we mentioned domains are going to grow and",
    "start": "831480",
    "end": "836760"
  },
  {
    "text": "divide over time and so there was enough uh I'll call it churn in the in the Google ecosystem that we always had this",
    "start": "836760",
    "end": "843480"
  },
  {
    "text": "fun thing we'd like to say that it always felt like every service at Google was either deprecated or not ready yet",
    "start": "843480",
    "end": "850320"
  },
  {
    "text": "okay uh so that was talking about simple components now I want to talk about simple interactions between the",
    "start": "850320",
    "end": "856740"
  },
  {
    "start": "852000",
    "end": "1230000"
  },
  {
    "text": "components and the first one of those interactions I want to I want to talk about is in is an event driven model so",
    "start": "856740",
    "end": "863160"
  },
  {
    "text": "in this in in this situation rather than synchronously communicating we want to communicate State changes between you",
    "start": "863160",
    "end": "869160"
  },
  {
    "text": "know service a and service b as a stream of events and so an event is a you know a statement that something interesting",
    "start": "869160",
    "end": "875100"
  },
  {
    "text": "has occurred ideally it represents something that's semantic part of part of our domain and the reason why we do",
    "start": "875100",
    "end": "881100"
  },
  {
    "text": "these event driven things at Large Scale is because it helps us to decouple domains and teams from each other it",
    "start": "881100",
    "end": "886440"
  },
  {
    "text": "allows them to be abstracted away separate you know through the well-defined interface of the event and it allows them to be asynchronous from",
    "start": "886440",
    "end": "892920"
  },
  {
    "text": "each other and also interestingly if our mental model is Iris we receive an event",
    "start": "892920",
    "end": "898079"
  },
  {
    "text": "and we do some processing and then we produce an event that's actually a really simple component Model A simple",
    "start": "898079",
    "end": "904740"
  },
  {
    "text": "implementation model and it actually simplifies in a lot of ways that component implementation that we have to do as a service team",
    "start": "904740",
    "end": "911519"
  },
  {
    "text": "and events are so important that the way I like to think about it is that they're actually a first class part of the",
    "start": "911519",
    "end": "916680"
  },
  {
    "text": "service interface so you know the service a service interface in my view uh includes not just the kind of obvious",
    "start": "916680",
    "end": "923880"
  },
  {
    "text": "synchronous request response through the front door you know whether through rest or Json or or grpc or something like",
    "start": "923880",
    "end": "930300"
  },
  {
    "text": "that but it also includes all the events that the service produces it includes all the events that the service consumes",
    "start": "930300",
    "end": "936660"
  },
  {
    "text": "and also we won't talk about this but it also includes any other you know kind of bulk reads and writes that we might do",
    "start": "936660",
    "end": "942420"
  },
  {
    "text": "into or out of an analytic system and so the way I like to think about it is an event interface includes any mechanism",
    "start": "942420",
    "end": "949139"
  },
  {
    "text": "that covers any mechanism that gets data into or out of the service",
    "start": "949139",
    "end": "954480"
  },
  {
    "text": "so the other ASP the other thing that I want the next thing I want to talk about here is is storing uh storing our data",
    "start": "954480",
    "end": "960720"
  },
  {
    "text": "inside our service as an immutable log so uh this has a this has a lot of advantages if we store State as an",
    "start": "960720",
    "end": "967019"
  },
  {
    "text": "immutable log of events that we've um uh that we've accumulated and often as we'll talk about in just a moment",
    "start": "967019",
    "end": "973019"
  },
  {
    "text": "actually this way of thinking about uh think uh thinking about the the capabilities of the service actually",
    "start": "973019",
    "end": "979380"
  },
  {
    "text": "very directly matches the problem domain um and uh the reason why we do this is",
    "start": "979380",
    "end": "984600"
  },
  {
    "text": "again the log encapsulates a bunch of architecturalities that we care about right so the log represents the",
    "start": "984600",
    "end": "989880"
  },
  {
    "text": "durability of the data that we're storing uh it allows it to allows the changes that we've made to be traceable",
    "start": "989880",
    "end": "996120"
  },
  {
    "text": "and auditable it also allows us if we need to to replay events from from before and and also from a debugging",
    "start": "996120",
    "end": "1003500"
  },
  {
    "text": "perspective as a as a developer it makes it really you know to have a you know kind of log of events that we've uh that",
    "start": "1003500",
    "end": "1009920"
  },
  {
    "text": "we've consumed it makes it very explicit and very comprehensible what's actually happened and so being able to like",
    "start": "1009920",
    "end": "1016279"
  },
  {
    "text": "reconstruct what happened to get us to maybe this weird state is a lot easier in a situation where we've where we've",
    "start": "1016279",
    "end": "1021320"
  },
  {
    "text": "stored things as an immutable log of events um and then you know as you imagine as you can imagine like if you're",
    "start": "1021320",
    "end": "1026959"
  },
  {
    "text": "continuing if you just continue to you know uh build a log up you know forever like",
    "start": "1026959",
    "end": "1032959"
  },
  {
    "text": "that's that's not going to work um and so you know a standard technique is that we're gonna we we um we complete",
    "start": "1032959",
    "end": "1038240"
  },
  {
    "text": "we compact the log every so often for efficiency and um so we can continue to kind of keep",
    "start": "1038240",
    "end": "1043938"
  },
  {
    "text": "the keep the size of the log constant uh over time uh even though we're adding more and more",
    "start": "1043939",
    "end": "1049160"
  },
  {
    "text": "um uh more and more data over time and so you know the quick example um of how an immutable log can like very",
    "start": "1049160",
    "end": "1055700"
  },
  {
    "text": "directly match a domain uh comes from Stitch fix so Stitch fix as I mentioned is a clothing retailer in the United",
    "start": "1055700",
    "end": "1061880"
  },
  {
    "text": "States and so a thing we would do or like the main thing we would do is we would send boxes of clothes to our",
    "start": "1061880",
    "end": "1067760"
  },
  {
    "text": "clients and so um the details here aren't super important but the way that we modeled the order processing and the package",
    "start": "1067760",
    "end": "1075200"
  },
  {
    "text": "processing and the delivery processing was as a series of these you know immutable events and we would just",
    "start": "1075200",
    "end": "1080299"
  },
  {
    "text": "continue to you know append new events to this log so somebody's requests an order and then we assign that order to a",
    "start": "1080299",
    "end": "1087559"
  },
  {
    "text": "warehouse and then it gets what we call styled we're somebody would decide what clothes would go into that into that",
    "start": "1087559",
    "end": "1092960"
  },
  {
    "text": "order we'd pick we'd walk through the warehouse and pick those items we'd pack",
    "start": "1092960",
    "end": "1098000"
  },
  {
    "text": "the items we would ship them they would you know travel over snail mail to the customer then the customer would receive",
    "start": "1098000",
    "end": "1104179"
  },
  {
    "text": "them anyway so this whole you know modeling this uh this domain as a series",
    "start": "1104179",
    "end": "1109580"
  },
  {
    "text": "of immutable events was really very natural and really um made a lot of gave us a lot of advantage",
    "start": "1109580",
    "end": "1118240"
  },
  {
    "text": "the other thing of course is to is to embrace the asynchrony between those uh between the um the services right so if",
    "start": "1118240",
    "end": "1125720"
  },
  {
    "text": "we have an event driven connection between the services we should be able to leverage asynchrony there and what",
    "start": "1125720",
    "end": "1131120"
  },
  {
    "text": "that allows us to do is decouple the operations that happen in service a from the operations and service B in time so",
    "start": "1131120",
    "end": "1137600"
  },
  {
    "text": "it allows us to decouple the availability of the service like a can be up when B is down B can be up when a",
    "start": "1137600",
    "end": "1142760"
  },
  {
    "text": "is down everything still works correctly we can independently scale Service A and B",
    "start": "1142760",
    "end": "1148520"
  },
  {
    "text": "um uh from each other it allows the services that could that consume the",
    "start": "1148520",
    "end": "1154039"
  },
  {
    "text": "events to to do potentially longer running processing more complex processing more expensive processing",
    "start": "1154039",
    "end": "1159559"
  },
  {
    "text": "than we'd be willing to do while the customer is like waiting for us to get back to them on the web page and then",
    "start": "1159559",
    "end": "1165260"
  },
  {
    "text": "also because there's the separation in time and in space it's safer to make independent changes to the particular to",
    "start": "1165260",
    "end": "1171860"
  },
  {
    "text": "the separate services from each other and again just like just like I've been driven in general it it also this model",
    "start": "1171860",
    "end": "1177980"
  },
  {
    "text": "actually also simplifies the component implementation in a lot of ways and so one of the things that you know",
    "start": "1177980",
    "end": "1184340"
  },
  {
    "text": "we'll talk about later on when we go through some of the case studies is a is now as now we have this really powerful",
    "start": "1184340",
    "end": "1189860"
  },
  {
    "text": "ability to potentially invert a synchronous call graph into an asynchronous data flow so like you can",
    "start": "1189860",
    "end": "1196580"
  },
  {
    "text": "imagine that you could start with something and I'll give this example later uh where you know a is calling B is calling C is calling D and when we do",
    "start": "1196580",
    "end": "1204500"
  },
  {
    "text": "that synchronously there's a lot of uh anything that goes wrong is going to you know impact the customer experience",
    "start": "1204500",
    "end": "1209780"
  },
  {
    "text": "whereas if we can invert that and we have deep produce events that are then consumed by C which produces events that",
    "start": "1209780",
    "end": "1216200"
  },
  {
    "text": "are consumed by a b which are which produces events that are consumed by a that actually is a lot more robust to",
    "start": "1216200",
    "end": "1222380"
  },
  {
    "text": "change over time and a lot more resilient to uh to potential failures and so we'll give some examples later",
    "start": "1222380",
    "end": "1228380"
  },
  {
    "text": "that are pretty interesting okay so we talked about simple components and we talked about simple",
    "start": "1228380",
    "end": "1234020"
  },
  {
    "start": "1230000",
    "end": "1804000"
  },
  {
    "text": "interactions now I want to kind of take a take a sidebar and talk about simple changes",
    "start": "1234020",
    "end": "1239780"
  },
  {
    "text": "um so uh the first thing the first idea here at Large Scale is that we want to make sure that every change we make is",
    "start": "1239780",
    "end": "1245840"
  },
  {
    "text": "as small as it possibly can be so this is the Simplicity aspect of changes so every large change that we want to make",
    "start": "1245840",
    "end": "1252500"
  },
  {
    "text": "we want to decompose into small incremental steps that are uh that are",
    "start": "1252500",
    "end": "1257799"
  },
  {
    "text": "much more manageable we want to make sure that each one of those steps is maintaining both backward and forward",
    "start": "1257799",
    "end": "1263539"
  },
  {
    "text": "compatibility of data and interfaces because as we make these individual changes we don't want to break anybody else who's relying on our service",
    "start": "1263539",
    "end": "1270140"
  },
  {
    "text": "interface to to do their work um and then as a consequence at Large",
    "start": "1270140",
    "end": "1275480"
  },
  {
    "text": "Scale um multiple service multiple versions of a single service are actually commonly",
    "start": "1275480",
    "end": "1280820"
  },
  {
    "text": "coexisting in production so almost every change that we're making is a rolling upgrade from you know version 17 to",
    "start": "1280820",
    "end": "1287419"
  },
  {
    "text": "version 18 something like that and it's much more common at these large scales to have transitional States uh be the",
    "start": "1287419",
    "end": "1295039"
  },
  {
    "text": "norm rather than the exception so it's way way more common to have to look out over the system and see for any",
    "start": "1295039",
    "end": "1301100"
  },
  {
    "text": "individual service multiple versions rather than you know the more common thinking that it's more common that",
    "start": "1301100",
    "end": "1306440"
  },
  {
    "text": "there would be just one so if I can expand slightly the idea of",
    "start": "1306440",
    "end": "1313039"
  },
  {
    "text": "architecture I want to talk a little bit about development practices that are important at large scale and then we'll",
    "start": "1313039",
    "end": "1318380"
  },
  {
    "text": "uh then we'll get back to the main architecture stuff so to me what's one of the most important aspects of an architecture and a software system at",
    "start": "1318380",
    "end": "1324860"
  },
  {
    "text": "Large Scale is that is that we get feedback and that we get feedback really uh really rapidly and really high",
    "start": "1324860",
    "end": "1330799"
  },
  {
    "text": "quality and so and it the investment that we make in um in automated testing",
    "start": "1330799",
    "end": "1336500"
  },
  {
    "text": "is critical and as as large and as we get larger in scale that investment is",
    "start": "1336500",
    "end": "1342020"
  },
  {
    "text": "even more uh more important um uh than a large small scale and why",
    "start": "1342020",
    "end": "1347360"
  },
  {
    "text": "do we do this it's not to slow ourselves down it's because tests actually allow us to go faster tests are the solid",
    "start": "1347360",
    "end": "1352760"
  },
  {
    "text": "ground that allow us to move uh really really quickly and tests are the safety net that allow us to catch ourselves",
    "start": "1352760",
    "end": "1358580"
  },
  {
    "text": "when something goes wrong tests help us to make better code because it gives us the confidence to",
    "start": "1358580",
    "end": "1364640"
  },
  {
    "text": "potentially break things and refactor in a merciless way and tests also help us",
    "start": "1364640",
    "end": "1370760"
  },
  {
    "text": "to make better systems because it allows us to catch bugs earlier and fail faster",
    "start": "1370760",
    "end": "1375919"
  },
  {
    "text": "it also it also improves developer productivity so in 2006 at Microsoft they did a study about what do",
    "start": "1375919",
    "end": "1382220"
  },
  {
    "text": "developers actually do all day and uh it turns out that it's not what we expect it turns out that developers spend 75",
    "start": "1382220",
    "end": "1389299"
  },
  {
    "text": "percent of their time reading existing code 20 of their time modifying that existing code and actually only about",
    "start": "1389299",
    "end": "1395240"
  },
  {
    "text": "five percent of the time writing new code your mileage may vary but like this this seems pretty accurate to me",
    "start": "1395240",
    "end": "1400940"
  },
  {
    "text": "actually when I actually observe what I do it turns out that you know a major",
    "start": "1400940",
    "end": "1406159"
  },
  {
    "text": "investment in tests help improve the vast majority of the stuff that developers are doing every day right so",
    "start": "1406159",
    "end": "1412520"
  },
  {
    "text": "how does it improve reading existing code well tests are like executable documentation that tell us how the",
    "start": "1412520",
    "end": "1418340"
  },
  {
    "text": "system works and so that really helps us to kind of read and understand the existing code obviously the existing",
    "start": "1418340",
    "end": "1424159"
  },
  {
    "text": "tests help us to modify the existing code that's one of the reasons why we wrote that wrote it and it turns out",
    "start": "1424159",
    "end": "1429559"
  },
  {
    "text": "actually also that tests help us to write new code because tests help us to make better designs as we make as we",
    "start": "1429559",
    "end": "1435620"
  },
  {
    "text": "make our code more testable it turns out that that what is more testable mean it",
    "start": "1435620",
    "end": "1440720"
  },
  {
    "text": "means it's more modular it means it has better separation of concerns it means it has more abstraction back to um all",
    "start": "1440720",
    "end": "1447140"
  },
  {
    "text": "those things back to Dave Farley's keynote um that opened up the conference yesterday so it turns out that as we",
    "start": "1447140",
    "end": "1453020"
  },
  {
    "text": "invest in testing and we make our uh we we then force ourselves to make our code more testable it actually makes it makes",
    "start": "1453020",
    "end": "1459500"
  },
  {
    "text": "our designs a lot better and produces produces better better results but don't believe me believe Michael",
    "start": "1459500",
    "end": "1465380"
  },
  {
    "text": "feathers who's the author of working effectively with Legacy code uh one of the best books that of software software",
    "start": "1465380",
    "end": "1471860"
  },
  {
    "text": "development and actually the only book that was required reading uh when you joined Google",
    "start": "1471860",
    "end": "1477620"
  },
  {
    "text": "um so as Michael feather says there's a deep Synergy between testability and good design and all the pain that we",
    "start": "1477620",
    "end": "1483440"
  },
  {
    "text": "feel when we write unit tests are pointing at underlying design problems so the the uh the in my experience the",
    "start": "1483440",
    "end": "1491539"
  },
  {
    "text": "uh the best place that um the place that sort of epitomized the the value of test driven development was when I worked at",
    "start": "1491539",
    "end": "1498140"
  },
  {
    "text": "this company Stitch fix and uh they had been doing test driven development for quite a long time and as",
    "start": "1498140",
    "end": "1504679"
  },
  {
    "text": "a consequence there basically was no bug tracking system I mean we would produce bugs we were just as good at producing",
    "start": "1504679",
    "end": "1511220"
  },
  {
    "text": "bugs as anybody else on the planet but we basically were able to have an in a kind of inbox zero model for bugs we",
    "start": "1511220",
    "end": "1519559"
  },
  {
    "text": "every time we saw it we saw a bug in production we would write a test to ver to validate the bug and we would that",
    "start": "1519559",
    "end": "1525740"
  },
  {
    "text": "test would verify the fix that we made um and then as a consequence we would just like always be fixed you know when",
    "start": "1525740",
    "end": "1531559"
  },
  {
    "text": "a new production bug came up we would just fix that bug and unlike every other place that I've worked in my long career",
    "start": "1531559",
    "end": "1538539"
  },
  {
    "text": "in the software development we did not have a big long list of you know big",
    "start": "1538539",
    "end": "1543559"
  },
  {
    "text": "backlog of like hundreds or thousands of bugs that we found and uh we're never going to fix that we were always able to",
    "start": "1543559",
    "end": "1548960"
  },
  {
    "text": "kind of stay in Buck zero so like this is what this is the kind of Advantage you can get by investing in test driven",
    "start": "1548960",
    "end": "1554419"
  },
  {
    "text": "development so the other obvious thing that we need at Large Scale is Canary deployments so",
    "start": "1554419",
    "end": "1560059"
  },
  {
    "text": "the idea is that we're not going to deploy in one big chunk to the entire fleet of Fleet of machines instead we're",
    "start": "1560059",
    "end": "1566779"
  },
  {
    "text": "going to go slowly at first we're going to monitor the metrics both business and operational and we're going to then go",
    "start": "1566779",
    "end": "1573799"
  },
  {
    "text": "faster and faster as we gain confidence so a canary deployment capability allows us to automatically so again we're",
    "start": "1573799",
    "end": "1580100"
  },
  {
    "text": "monitor automatically monitoring changes to metrics if those metrics are good we're going to be able to continue moving forward if the metrics are bad",
    "start": "1580100",
    "end": "1587000"
  },
  {
    "text": "bad then we'll automatically roll back and and the the goal here is to make deployments routine and absolutely",
    "start": "1587000",
    "end": "1592820"
  },
  {
    "text": "boring the other technique here is feature Flags so again that's a configuration",
    "start": "1592820",
    "end": "1598580"
  },
  {
    "text": "flag to enable or disable a feature for a particular set of users just like with Canary deployments and these other",
    "start": "1598580",
    "end": "1604279"
  },
  {
    "text": "techniques this allows us to build and maintain much more solid systems because it helps us decouple feature releases",
    "start": "1604279",
    "end": "1611539"
  },
  {
    "text": "from code releases it allows us to rapidly turn things on and off uh without any anything else involved and",
    "start": "1611539",
    "end": "1620000"
  },
  {
    "text": "it gives us the capability to kind of develop and build and test and verify our our software in production",
    "start": "1620000",
    "end": "1626360"
  },
  {
    "text": "so if we sum all these things up we have continuous delivery and so we want so each of those individual services at",
    "start": "1626360",
    "end": "1632120"
  },
  {
    "text": "Large Scale we want to you know be deploying or at least have the ability to deploy multiple times a day so we",
    "start": "1632120",
    "end": "1637159"
  },
  {
    "text": "have this robust build test and deploy pipeline at these large-scale companies we're monitoring our service level",
    "start": "1637159",
    "end": "1642559"
  },
  {
    "text": "objectives to make sure that everything is going well and then again this allows us to build much more solid systems",
    "start": "1642559",
    "end": "1649279"
  },
  {
    "text": "because we release smaller simpler units of work again the changes are simpler we're getting fast feedback from uh from",
    "start": "1649279",
    "end": "1656600"
  },
  {
    "text": "the testing and from the build and deployment pipelines and from the from the canary deployments it allows us it's",
    "start": "1656600",
    "end": "1663380"
  },
  {
    "text": "faster to repair issues that we that we find it's easier to understand those potential uh changes that we're making",
    "start": "1663380",
    "end": "1671059"
  },
  {
    "text": "and that allows us to increase the rate of change to our system while at the same time reducing the risk of that",
    "start": "1671059",
    "end": "1676820"
  },
  {
    "text": "change so very briefly uh what I came back to eBay to do about two and a half years",
    "start": "1676820",
    "end": "1682640"
  },
  {
    "text": "ago was introduce uh this kind of continuous delivery capabilities to the company again eBay's been around for a",
    "start": "1682640",
    "end": "1689000"
  },
  {
    "text": "long time um and so I led this uh Crosscut company velocity we called it a velocity",
    "start": "1689000",
    "end": "1694580"
  },
  {
    "text": "initiative to improve software delivery and our idea was to again think big start small but learn fast so we",
    "start": "1694580",
    "end": "1701900"
  },
  {
    "text": "iteratively identified a whole bunch of bottlenecks and issues that teams were running into in terms of building and uh",
    "start": "1701900",
    "end": "1708799"
  },
  {
    "text": "testing and deploying and we would ask the teams you know what would it take for you to deploy your application every",
    "start": "1708799",
    "end": "1714080"
  },
  {
    "text": "day we would get a big long list of things from them and and because I also led the platform team I could say great",
    "start": "1714080",
    "end": "1720260"
  },
  {
    "text": "you just gave us our backlog uh the the results I'm pretty proud of",
    "start": "1720260",
    "end": "1725360"
  },
  {
    "text": "so we actually were able to double the engineering productivity of the teams that we worked on we definitely moved uh",
    "start": "1725360",
    "end": "1731240"
  },
  {
    "text": "the deployment frequency and lead time metrics from uh from the accelerate book uh pretty substantially and even though",
    "start": "1731240",
    "end": "1737600"
  },
  {
    "text": "we weren't focused on the failure metrics we also substantially improved the failure metrics as well",
    "start": "1737600",
    "end": "1743299"
  },
  {
    "text": "um and uh one of the reasons I bring this up because we you know I wanted we",
    "start": "1743299",
    "end": "1748460"
  },
  {
    "text": "wanted to make a lot of large large-scale architecture changes to eBay um but the prerequisite for making those",
    "start": "1748460",
    "end": "1753919"
  },
  {
    "text": "large-scale architecture changes and one of again one of the indicators of a really good architecture is being able to make small changes uh rapidly and",
    "start": "1753919",
    "end": "1761419"
  },
  {
    "text": "safely and repeatably and so was it worth it for us to invest in these in these things in order to be able to do",
    "start": "1761419",
    "end": "1768200"
  },
  {
    "text": "um uh make our large-scale architecture changes um and because I can't help myself uh I",
    "start": "1768200",
    "end": "1774679"
  },
  {
    "text": "I will uh refer to one of my favorite books the accelerate book here so this talks that this summarizes the state of",
    "start": "1774679",
    "end": "1781039"
  },
  {
    "text": "devops research from you know now nine years and if you die in the large-scale",
    "start": "1781039",
    "end": "1786380"
  },
  {
    "text": "companies that have adopted these uh these capabilities uh spend 44 more of",
    "start": "1786380",
    "end": "1791419"
  },
  {
    "text": "their time on features versus maintenance and they actually are two and a half more times more likely to",
    "start": "1791419",
    "end": "1796760"
  },
  {
    "text": "exceed their goals business goals around profitability and market share and productivity so this stuff really matters",
    "start": "1796760",
    "end": "1802640"
  },
  {
    "text": "okay so now we talk we talked about simple simple components we talked about simple uh interactions between those",
    "start": "1802640",
    "end": "1808820"
  },
  {
    "start": "1804000",
    "end": "2694000"
  },
  {
    "text": "components and then we took a sidebar to talk about kind of the development practices around being able to make simple changes to the system so now",
    "start": "1808820",
    "end": "1814940"
  },
  {
    "text": "let's put things all together um so at at Large Scale",
    "start": "1814940",
    "end": "1820159"
  },
  {
    "text": "um the uh one of the critical aspects in the service infrastructure is that we only have one system of record for any",
    "start": "1820159",
    "end": "1825919"
  },
  {
    "text": "particular piece of data right so any particular piece of data is owned by one and only one service even though we have",
    "start": "1825919",
    "end": "1832100"
  },
  {
    "text": "maybe hundreds or thousands of them and that Services the system of record every other copy of that data is a read-only",
    "start": "1832100",
    "end": "1839020"
  },
  {
    "text": "non-authoritative cache and all those words matter right so it's read only if I update you know the customer record in",
    "start": "1839020",
    "end": "1845779"
  },
  {
    "text": "some other place it doesn't you know correctly it doesn't flow back to the customer service it's non-authoritative",
    "start": "1845779",
    "end": "1851480"
  },
  {
    "text": "so I might ask uh you know uh somebody else about what the state of the customer is but that could potentially",
    "start": "1851480",
    "end": "1858080"
  },
  {
    "text": "be stale um so I want to talk about in uh give some generic examples of how we would",
    "start": "1858080",
    "end": "1865279"
  },
  {
    "text": "solve some of these problems and with services and these common problems with services and events and then I'll give",
    "start": "1865279",
    "end": "1870500"
  },
  {
    "text": "some uh case studies we can have some questions um so how do we deal with shared data in",
    "start": "1870500",
    "end": "1876260"
  },
  {
    "text": "uh in one of these large uh large infrastructure large ecosystems so uh",
    "start": "1876260",
    "end": "1881960"
  },
  {
    "text": "one way of getting data is just simply calling synchronously calling the service right so you know in this",
    "start": "1881960",
    "end": "1887059"
  },
  {
    "text": "example maybe we want to ship a package to somebody the Fulfillment service needs to know their address so they call",
    "start": "1887059",
    "end": "1892520"
  },
  {
    "text": "the customer service to get the customer's address this works um but there might be operational",
    "start": "1892520",
    "end": "1898100"
  },
  {
    "text": "reasons why you know this might overload the customer service or we might want to be able to send packages even when the",
    "start": "1898100",
    "end": "1904340"
  },
  {
    "text": "customer service is down and so leveraging services and events we can have we can build a more reliable uh",
    "start": "1904340",
    "end": "1910640"
  },
  {
    "text": "overall capability so here I'll call this asynchronous event and local cache so in this example the customer service",
    "start": "1910640",
    "end": "1918260"
  },
  {
    "text": "is anytime somebody's address changes it produces an event which is then consumed by the Fulfillment service and then the",
    "start": "1918260",
    "end": "1925039"
  },
  {
    "text": "Fulfillment service is caching that the current customer address and so anytime we need to send a new um uh send a",
    "start": "1925039",
    "end": "1933260"
  },
  {
    "text": "package to somebody the Fulfillment service can you know use its local local copy",
    "start": "1933260",
    "end": "1939140"
  },
  {
    "text": "how do we deal with joins in uh in large in large-scale uh service ecosystems so",
    "start": "1939140",
    "end": "1945559"
  },
  {
    "text": "one uh the the first example the simple one is just simply joining in whatever the client is right so in this example",
    "start": "1945559",
    "end": "1952760"
  },
  {
    "text": "we want to build some order history and we want to get some data from the customer service and we want to get some data from the order service and so we",
    "start": "1952760",
    "end": "1959600"
  },
  {
    "text": "could simply have the order history service you know call the customer service on the one hand and call the order service on the other hand this",
    "start": "1959600",
    "end": "1965779"
  },
  {
    "text": "this works perfectly legitimately but sometimes that join is too expensive to",
    "start": "1965779",
    "end": "1971360"
  },
  {
    "text": "do in real time or again there might be other operational reasons why we want to be able to show the order history without the customer service or the",
    "start": "1971360",
    "end": "1978140"
  },
  {
    "text": "order order service being up be more resilient to to potential failures and so the uh the way that we can do that",
    "start": "1978140",
    "end": "1984980"
  },
  {
    "text": "with services and services and events is having a service that materializes the view right so there's a service here",
    "start": "1984980",
    "end": "1991700"
  },
  {
    "text": "that's listening to events from you know service a and service B and maintaining in local storage the join between a and",
    "start": "1991700",
    "end": "1999019"
  },
  {
    "text": "b it maintains that in a denormalized way and so then that that materialized view can be available to be queried",
    "start": "1999019",
    "end": "2005380"
  },
  {
    "text": "directly as opposed to joining joining the two individual sides of it",
    "start": "2005380",
    "end": "2011440"
  },
  {
    "text": "okay so uh the last of these uh these tools uh these kind of combined tools I",
    "start": "2011440",
    "end": "2016840"
  },
  {
    "text": "want to talk about is transactions um so if we had a monolithic database which we absolutely do not at Google and",
    "start": "2016840",
    "end": "2022840"
  },
  {
    "text": "eBay and Amazon and Netflix scale but if we did transactions are really easy we would just write a transaction in our",
    "start": "2022840",
    "end": "2028600"
  },
  {
    "text": "single database we would join uh or we would uh transact over the tables you",
    "start": "2028600",
    "end": "2034539"
  },
  {
    "text": "know two different disparate tables and uh everything would work but once we've split the data out into Services which",
    "start": "2034539",
    "end": "2040840"
  },
  {
    "text": "we've done again done for scale and for Simplicity it makes transactions challenging and so I love this quote",
    "start": "2040840",
    "end": "2047320"
  },
  {
    "text": "from Pat Helen who wrote this amazing paper back in 2007 around called life after distributed transactions so in",
    "start": "2047320",
    "end": "2054398"
  },
  {
    "text": "General application developers at large scale do not Implement large-scale applications assuming distributed",
    "start": "2054399",
    "end": "2059440"
  },
  {
    "text": "transactions or um he's very funny and likes to say things very quickly",
    "start": "2059440",
    "end": "2065260"
  },
  {
    "text": "grown-ups don't use distributed transactions okay well what do they use um the way to think about it the way to",
    "start": "2065260",
    "end": "2072040"
  },
  {
    "text": "think about building these kind of capabilities at Large Scale is actually through a workflow or what we'll call a",
    "start": "2072040",
    "end": "2077500"
  },
  {
    "text": "saga so instead of thinking about as a as a transaction of several different entities that all happen atomically",
    "start": "2077500",
    "end": "2083740"
  },
  {
    "text": "think about modeling that transaction as a state machine of successive Atomic",
    "start": "2083740",
    "end": "2089260"
  },
  {
    "text": "events so we're going to re-implement this thing as a workflow or a state machine so instead of doing A and B and",
    "start": "2089260",
    "end": "2095618"
  },
  {
    "text": "C transactionally which we can't if they're all stored in separate Services instead we we make the change to a that",
    "start": "2095619",
    "end": "2102520"
  },
  {
    "text": "produces some set of events which are consumed by b b makes the chain B makes its local set of changes it produces one",
    "start": "2102520",
    "end": "2109480"
  },
  {
    "text": "or more events and that's consumed by C which again makes makes local changes",
    "start": "2109480",
    "end": "2114660"
  },
  {
    "text": "and uh if anything goes wrong along that along that path the way that we deal",
    "start": "2114660",
    "end": "2120460"
  },
  {
    "text": "with it is we actually produce compensating transactions or compensating operations in the reverse",
    "start": "2120460",
    "end": "2126220"
  },
  {
    "text": "Direction so we sort of undo or um uh revert the uh the change to C that",
    "start": "2126220",
    "end": "2134680"
  },
  {
    "text": "in turn uh causes the some reversion in B which in turn causes some reversion in in a",
    "start": "2134680",
    "end": "2140680"
  },
  {
    "text": "so one of the other things you you um and many Real World Systems sorry uh work like this so Payment Processing uh",
    "start": "2140680",
    "end": "2147040"
  },
  {
    "text": "works like this right so I would love it if somebody could pay me in an electronic way and then the money would",
    "start": "2147040",
    "end": "2152740"
  },
  {
    "text": "show up in my account immediately that's actually not what happens there's no distributed transaction between my bank",
    "start": "2152740",
    "end": "2157960"
  },
  {
    "text": "and my collaborators Bank instead it's a workflow that uh that with a bunch of",
    "start": "2157960",
    "end": "2164140"
  },
  {
    "text": "different Atomic steps um again through this through a state machine like this expense approvals work in a similar way",
    "start": "2164140",
    "end": "2170560"
  },
  {
    "text": "so a bunch of us who you know traveled here would go go home to our companies and like get approval for particular",
    "start": "2170560",
    "end": "2176380"
  },
  {
    "text": "expenses again that does not happen atomically and immediately there's a",
    "start": "2176380",
    "end": "2181480"
  },
  {
    "text": "whole there's a whole workflow and process associated with those things um the end end of which is probably",
    "start": "2181480",
    "end": "2187660"
  },
  {
    "text": "going to generate a payment processing workflow and then the software development process itself so I'm sure",
    "start": "2187660",
    "end": "2194020"
  },
  {
    "text": "there are a bunch of you know fans of continuous delivery in the audience but like raise your hand if every time you",
    "start": "2194020",
    "end": "2199720"
  },
  {
    "text": "hit return in your IDE uh your everything is immediately anatomically shipped to production",
    "start": "2199720",
    "end": "2206619"
  },
  {
    "text": "let the record show that no hands went up and there were some Chuckles um so uh so again the software",
    "start": "2206619",
    "end": "2213820"
  },
  {
    "text": "development process the thing that we do as our day-to-day job is also one of these workflows",
    "start": "2213820",
    "end": "2219339"
  },
  {
    "text": "um and uh and so uh what we can when we Implement these things as sagas uh what",
    "start": "2219339",
    "end": "2225820"
  },
  {
    "text": "we see is that we're actually exposing we actually see and intermediate these intermediate States and the way I like",
    "start": "2225820",
    "end": "2231460"
  },
  {
    "text": "to think about it is we should expose those intermediate states in the interface that we offer to our customers",
    "start": "2231460",
    "end": "2236560"
  },
  {
    "text": "so we should we should let them know that okay the payment is you know in the started state in the pending state in",
    "start": "2236560",
    "end": "2242500"
  },
  {
    "text": "the complete State and expenses may be submitted then approved then paid and a",
    "start": "2242500",
    "end": "2248380"
  },
  {
    "text": "feature if we wanted to model have some kind of you know feature Service uh it's developed it's reviewed it's deployed",
    "start": "2248380",
    "end": "2255040"
  },
  {
    "text": "it's released okay so now that we have a bunch of these so now that we've put a bunch of",
    "start": "2255040",
    "end": "2260500"
  },
  {
    "text": "these like service and event um uh architectural tools together um now let's talk about some real world",
    "start": "2260500",
    "end": "2266380"
  },
  {
    "text": "examples and then we can and then we can go from go to questions um so I want to talk about three of them",
    "start": "2266380",
    "end": "2271660"
  },
  {
    "text": "and the first one actually following along the transaction example is pretty interesting so Amazon Aurora is a",
    "start": "2271660",
    "end": "2277839"
  },
  {
    "text": "distributed database obviously offered offered by Amazon web services and it's a distributed database and uh but it",
    "start": "2277839",
    "end": "2285040"
  },
  {
    "text": "does not use distributed it does not use distributed transactions internally instead it does the things that we were",
    "start": "2285040",
    "end": "2291460"
  },
  {
    "text": "talking about earlier it uses asynchrony it uses events it uses immutable logs and so uh if you're familiar with the",
    "start": "2291460",
    "end": "2299260"
  },
  {
    "text": "internals of databases the redo log is essentially the transactional stuff that's happened in the database so like",
    "start": "2299260",
    "end": "2305079"
  },
  {
    "text": "that's critical to get right and critical to be uh to be consistent and but instead of like writing to its redo",
    "start": "2305079",
    "end": "2312400"
  },
  {
    "text": "log in a transactional way across the different uh the different distributed nodes in an aurora cluster instead those",
    "start": "2312400",
    "end": "2320020"
  },
  {
    "text": "redo log rights are distributed asynchronously to those uh to those storage nodes they're acknowledged",
    "start": "2320020",
    "end": "2326380"
  },
  {
    "text": "asynchronously and there's no distributed consensus there's no distributed transaction happening there",
    "start": "2326380",
    "end": "2331680"
  },
  {
    "text": "instead those those event exchange that's happening is item potent it's uh",
    "start": "2331680",
    "end": "2337960"
  },
  {
    "text": "everything is stored immutably and um it's uh the events move for the States move forward in a monotonic way and so",
    "start": "2337960",
    "end": "2345099"
  },
  {
    "text": "the so instead of having these you know a consensus round instead they do Quorum acknowledgments so when a quorum of the",
    "start": "2345099",
    "end": "2351940"
  },
  {
    "text": "storage nodes respond back and said hey I've seen the redo log right only then",
    "start": "2351940",
    "end": "2357099"
  },
  {
    "text": "is the is the redo log progressed further progressed forward",
    "start": "2357099",
    "end": "2363220"
  },
  {
    "text": "um and the only time that they run any kind of consistency around here is actually when when they have a crash and",
    "start": "2363220",
    "end": "2369339"
  },
  {
    "text": "they need to kind of bring all the storage nodes up and kind of figure out what happens so this is a pretty interesting that we're like a",
    "start": "2369339",
    "end": "2375400"
  },
  {
    "text": "distributed database itself isn't using distributed transactions um the uh the second case study that I",
    "start": "2375400",
    "end": "2381880"
  },
  {
    "text": "want to talk about is a is a relatively recent one from Netflix so uh the example here is Netflix viewing history",
    "start": "2381880",
    "end": "2388480"
  },
  {
    "text": "so the the use case here is they're getting about a million requests per",
    "start": "2388480",
    "end": "2393640"
  },
  {
    "text": "second from all of us who are watching you know Netflix and um uh they they want to process that",
    "start": "2393640",
    "end": "2399640"
  },
  {
    "text": "those viewing events and they use it for showing us our viewing history they use",
    "start": "2399640",
    "end": "2405160"
  },
  {
    "text": "it for personalization for recommendation for analytics for a bunch of different things and originally there was a synchronous",
    "start": "2405160",
    "end": "2412420"
  },
  {
    "text": "architecture where directly from your device it would go synchronously all the way to the storage",
    "start": "2412420",
    "end": "2418180"
  },
  {
    "text": "um but as you can imagine like if there was any issue or blip and blip any anywhere along the line they would have",
    "start": "2418180",
    "end": "2424060"
  },
  {
    "text": "availability issues and potentially data loss of this data you know at high load and so they",
    "start": "2424060",
    "end": "2431079"
  },
  {
    "text": "re-implemented it in an asynchronous way again from that synchronous call graph to an asynchronous mechanism that I was",
    "start": "2431079",
    "end": "2437920"
  },
  {
    "text": "talking about earlier so instead when the when the log event comes in it gets",
    "start": "2437920",
    "end": "2444160"
  },
  {
    "text": "written to a durable queue then there's an asynchronous pipeline that processes that queue of events enriches it process",
    "start": "2444160",
    "end": "2450940"
  },
  {
    "text": "it stores it serves it up later and then they use the materialized view technique",
    "start": "2450940",
    "end": "2456460"
  },
  {
    "text": "that I was talking about earlier to serve the read so the reason so the way that you you see your viewing history",
    "start": "2456460",
    "end": "2461920"
  },
  {
    "text": "now is through one of those materialized views that we were talking about okay the last and maybe most interesting",
    "start": "2461920",
    "end": "2469119"
  },
  {
    "text": "case study here is uh a couple of years ago uh where Walmart rebuilt its item",
    "start": "2469119",
    "end": "2475119"
  },
  {
    "text": "availability uh capability so what is item availability so when you go to the",
    "start": "2475119",
    "end": "2480339"
  },
  {
    "text": "Walmart site um uh this is answering the question is this item this particular item available",
    "start": "2480339",
    "end": "2486940"
  },
  {
    "text": "to ship to this person within a reasonable time um and you know because it's online",
    "start": "2486940",
    "end": "2492400"
  },
  {
    "text": "retail the SLO that they were targeting for getting that response back to the to the customer was 99.98 uptime with uh",
    "start": "2492400",
    "end": "2502240"
  },
  {
    "text": "and a response within 300 milliseconds and as you might imagine if you know anything about retail or even if you",
    "start": "2502240",
    "end": "2508060"
  },
  {
    "text": "don't there was a huge amount of complex logic that was associated with trying to figure out whether well what warehouses",
    "start": "2508060",
    "end": "2514060"
  },
  {
    "text": "is it in is it on the floor uh how far are those warehouses away are there back",
    "start": "2514060",
    "end": "2519460"
  },
  {
    "text": "orders on this thing are there reservations for it there's you know is it eligible for this thing or that thing",
    "start": "2519460",
    "end": "2524980"
  },
  {
    "text": "so there were tons and tons of different aspects of complex logic that were involved in",
    "start": "2524980",
    "end": "2530380"
  },
  {
    "text": "making this item availability decision and the original synchronous architecture which I'll show you on the next slide was a graph of 23 nested",
    "start": "2530380",
    "end": "2539140"
  },
  {
    "text": "synchronous service calls all of which needed to needed to succeed in order to get that item availability answer any",
    "start": "2539140",
    "end": "2546520"
  },
  {
    "text": "any failure on any one of those things would invalidate the results and if you do the kind of availability",
    "start": "2546520",
    "end": "2552820"
  },
  {
    "text": "math in order to get that 99.98 uptime in 300 milliseconds each one of those 23",
    "start": "2552820",
    "end": "2560020"
  },
  {
    "text": "service Services needed to have five nines of reliability and up to 50",
    "start": "2560020",
    "end": "2565240"
  },
  {
    "text": "percent or 50 milliseconds marginal latency so it was an extremely expensive system to build an extremely expensive",
    "start": "2565240",
    "end": "2572020"
  },
  {
    "text": "system to maintain and this is what the architect the kind of architecture diagram looked like it's not really",
    "start": "2572020",
    "end": "2578800"
  },
  {
    "text": "meant to be looked at or perceived you know uh interpreted by humans and it's it's not",
    "start": "2578800",
    "end": "2587260"
  },
  {
    "text": "you know the details aren't important except there's just a lot of red lines that's what you should take away and those red lines are the hot path so",
    "start": "2587260",
    "end": "2593380"
  },
  {
    "text": "those are the 23 things all all that have to happen in order for that one answer of item availability to to be",
    "start": "2593380",
    "end": "2600099"
  },
  {
    "text": "returned so instead what they did is they they did that asynchronous aversion inversion",
    "start": "2600099",
    "end": "2605440"
  },
  {
    "text": "that I was talking about so they inverted each service to leverage asynchronous events rather than those synchronous calls so that it was an",
    "start": "2605440",
    "end": "2612099"
  },
  {
    "text": "event-driven data flow that that um flowed up rather than sort of down",
    "start": "2612099",
    "end": "2617260"
  },
  {
    "text": "um each one of those Services was item potently processing uh the events that came in each one stored those events and",
    "start": "2617260",
    "end": "2624400"
  },
  {
    "text": "its own data in an Event Source immutable log each one of them was maintaining a materialized view of the",
    "start": "2624400",
    "end": "2629680"
  },
  {
    "text": "data that it had joined together with the data that it was getting from the kind of Upstream its upstream",
    "start": "2629680",
    "end": "2635380"
  },
  {
    "text": "dependencies and with that asynchronous re-architecture there were only two",
    "start": "2635380",
    "end": "2640720"
  },
  {
    "text": "services in that synchronous hot path and the asynchronous services were able to have a much more relaxed uh service",
    "start": "2640720",
    "end": "2647319"
  },
  {
    "text": "level objective um because you know the the updates to these the physical part of the physical",
    "start": "2647319",
    "end": "2653500"
  },
  {
    "text": "updates to things moving in and out of the warehouses you know happened on seconds or minutes rather than on milliseconds the overall system was much",
    "start": "2653500",
    "end": "2661780"
  },
  {
    "text": "more resilient to delays and out and it was orders of magnitude Millions upon millions of dollars",
    "start": "2661780",
    "end": "2667500"
  },
  {
    "text": "orders of magnitude simpler to build and operate and cheaper and so the the architecture diagram",
    "start": "2667500",
    "end": "2674380"
  },
  {
    "text": "there looked like this and again the interesting thing is just these two uh these two uh",
    "start": "2674380",
    "end": "2680200"
  },
  {
    "text": "uh parts of the synchronous call graph so a substantial you know orders of",
    "start": "2680200",
    "end": "2685300"
  },
  {
    "text": "magnitude Improvement in Simplicity and resilience by re-implementing this thing in an asynchronous way",
    "start": "2685300",
    "end": "2691660"
  },
  {
    "text": "okay we made it uh so we talked about uh simple components we talked about simple",
    "start": "2691660",
    "end": "2697720"
  },
  {
    "start": "2694000",
    "end": "2735000"
  },
  {
    "text": "interactions between those components we talked about simple changes and we put them all together with some uh combined",
    "start": "2697720",
    "end": "2704619"
  },
  {
    "text": "architecture tools and some case studies I do appreciate that I'm between you and beer so I want to thank you very much",
    "start": "2704619",
    "end": "2711180"
  },
  {
    "text": "and thanks very much I hope you had a great conference [Applause]",
    "start": "2711180",
    "end": "2721119"
  },
  {
    "text": "so while uh the beer is waiting out there we do have time for maybe two",
    "start": "2721119",
    "end": "2727000"
  },
  {
    "text": "questions so I'm on my way",
    "start": "2727000",
    "end": "2732838"
  },
  {
    "start": "2735000",
    "end": "2922000"
  },
  {
    "text": "um thanks so much for that um you briefly touched today and also mentioned yesterday about using um",
    "start": "2738880",
    "end": "2745000"
  },
  {
    "text": "sort of an ETL pattern for a lot of the reporting out of this yeah",
    "start": "2745000",
    "end": "2750099"
  },
  {
    "text": "um have you had any success with using an event stream to build reporting as well like having a service that",
    "start": "2750099",
    "end": "2755560"
  },
  {
    "text": "subscribes to all the events oh absolutely building a report model from that or is it is it is it a nice in",
    "start": "2755560",
    "end": "2761020"
  },
  {
    "text": "concept but fails in practice kind of thing oh no it's uh it's totally legitimate in in concept yeah um I've",
    "start": "2761020",
    "end": "2767619"
  },
  {
    "text": "the the question yesterday was about reporting um uh but uh but yeah so there are lots",
    "start": "2767619",
    "end": "2774940"
  },
  {
    "text": "of different ways of like getting data out of operational systems into analytic systems and an event-driven way where",
    "start": "2774940",
    "end": "2780400"
  },
  {
    "text": "you're just where if you have the stream of events it can be consumed by operational systems to be consumed by",
    "start": "2780400",
    "end": "2785680"
  },
  {
    "text": "analytic systems that works fantastically um uh or uh you know you also have the",
    "start": "2785680",
    "end": "2791859"
  },
  {
    "text": "kind of standard more kind of bulk ETL pattern yeah awesome thank you yeah sure",
    "start": "2791859",
    "end": "2798420"
  },
  {
    "text": "one more",
    "start": "2799000",
    "end": "2801780"
  },
  {
    "text": "uh hi you um touched on the important the importance of testing uh your system",
    "start": "2807160",
    "end": "2812980"
  },
  {
    "text": "but in a complex event-driven system how do you do anything more than a unit test",
    "start": "2812980",
    "end": "2818680"
  },
  {
    "text": "do you have some experience testing effect that depend on an event being received by another system that received",
    "start": "2818680",
    "end": "2825700"
  },
  {
    "text": "that event from another system it's very difficult to test those cross-system effects in an integration",
    "start": "2825700",
    "end": "2832960"
  },
  {
    "text": "sort of level yeah I see I I definitely see why you say that um actually I found uh asynchronous",
    "start": "2832960",
    "end": "2840700"
  },
  {
    "text": "event-driven systems easier to test exactly because um uh you can I wouldn't call it a unit",
    "start": "2840700",
    "end": "2847540"
  },
  {
    "text": "test but I would call it a test at a component or a service level and you say it really well which is what happened",
    "start": "2847540",
    "end": "2853420"
  },
  {
    "text": "what happens at in my service when I receive this event do I produce the events and the and the data changes that",
    "start": "2853420",
    "end": "2860680"
  },
  {
    "text": "I expect um and uh and the ability to you know having systems that are asynchronous",
    "start": "2860680",
    "end": "2867880"
  },
  {
    "text": "actually I think it makes it easier to test those those individual components of the service in isolation you can",
    "start": "2867880",
    "end": "2874060"
  },
  {
    "text": "always uh there's always the you know like you say doing kind of end-to-end or integration tests and that's always a",
    "start": "2874060",
    "end": "2879880"
  },
  {
    "text": "tool that we have in our testing toolbox but um uh but but that gets harder and",
    "start": "2879880",
    "end": "2885579"
  },
  {
    "text": "harder at large scale like you can't simulate all of Google for example",
    "start": "2885579",
    "end": "2890859"
  },
  {
    "text": "um and uh yeah so actually um my experience has been uh that in an",
    "start": "2890859",
    "end": "2896200"
  },
  {
    "text": "event driven model that it's actually easier it's actually easier and more effective to test the components independent of each other because they",
    "start": "2896200",
    "end": "2902440"
  },
  {
    "text": "are more independent of each other if that makes sense",
    "start": "2902440",
    "end": "2906359"
  },
  {
    "text": "all right I think it's time for the farewell reception so uh if you have any more questions for Randy then you can",
    "start": "2908260",
    "end": "2914740"
  },
  {
    "text": "talk to him outside uh once again can we thank Randy thank",
    "start": "2914740",
    "end": "2920020"
  },
  {
    "text": "you [Applause]",
    "start": "2920020",
    "end": "2923328"
  }
]