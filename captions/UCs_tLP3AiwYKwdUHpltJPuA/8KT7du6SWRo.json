[
  {
    "text": "all right um everyone",
    "start": "640",
    "end": "6399"
  },
  {
    "text": "um welcome thank you for H uh for being here it was uh you know is been today we",
    "start": "6399",
    "end": "14639"
  },
  {
    "text": "have a very great presentation one of my my my favorite people there you know if you don't know Charles ner you know him",
    "start": "14639",
    "end": "20680"
  },
  {
    "text": "after today and you understand why he's one of my favorite people but um takes very something very complex and make it",
    "start": "20680",
    "end": "25880"
  },
  {
    "text": "very easy to understand and then it's like magic but um I wanted to just to go over a little bit you know we had a",
    "start": "25880",
    "end": "32480"
  },
  {
    "text": "great year you know we're we're winding down our our essential meetings for for",
    "start": "32480",
    "end": "38120"
  },
  {
    "text": "the year uh it's been fun we actually have you know almost 1,200 people sign up which is great we want to see more of",
    "start": "38120",
    "end": "45800"
  },
  {
    "text": "that so oh you're right um but uh but so one thing is like you",
    "start": "45800",
    "end": "52320"
  },
  {
    "text": "know if you're new to this Meetup you know let people know you know the we",
    "start": "52320",
    "end": "57399"
  },
  {
    "text": "want the Java user script to grow I want know the the easiest way for us to grow is if you bring people in and and that",
    "start": "57399",
    "end": "63680"
  },
  {
    "text": "allow us to get you know great speakers allow us to find great Partners um so please do that you know we actually have",
    "start": "63680",
    "end": "69439"
  },
  {
    "text": "28 meetups uh we've been busy uh one of the things that is uh pride and joy we",
    "start": "69439",
    "end": "75479"
  },
  {
    "text": "are actually the first User Group to adopt the jsr you know Bob has been sending emails about it and I'll let him",
    "start": "75479",
    "end": "81600"
  },
  {
    "text": "um talking a little bit about like what it means for us you know we have the mentors program",
    "start": "81600",
    "end": "87479"
  },
  {
    "text": "we still available you know if you have questions about you know uh Java or or you have a problem or you're like saying",
    "start": "87479",
    "end": "93759"
  },
  {
    "text": "I don't know this technology or this technology you know should I use no SQL just regular SQL then you know reach out",
    "start": "93759",
    "end": "99240"
  },
  {
    "text": "to us we'll help out we within all the leadership we have we cover a lot of from from embedded to you know high",
    "start": "99240",
    "end": "106479"
  },
  {
    "text": "frequency trading type deals to Frameworks and web and andcc just does everything so that's fine too um we",
    "start": "106479",
    "end": "114159"
  },
  {
    "text": "presented with the women's death group so that's another thing that we're trying to outreach more groups you know um we actually we have something coming",
    "start": "114159",
    "end": "120600"
  },
  {
    "text": "up with a couple other uh user groups uh and one of the things that we are proud of this year is we are actually like",
    "start": "120600",
    "end": "127320"
  },
  {
    "text": "trying to get you guys to know the different companies that are here sometimes we don't know who is in",
    "start": "127320",
    "end": "133280"
  },
  {
    "text": "Chicago you know like grouin is in Chicago orbit is in Chicago you know cm is in Chicago and and uh one of the",
    "start": "133280",
    "end": "138760"
  },
  {
    "text": "things that we're proud of is that we're trying to let you know hey these are the companies that are that take Chicago as their home and and we want you to reach",
    "start": "138760",
    "end": "145920"
  },
  {
    "text": "out to them and know them uh and uh for this here we actually started with a little bit of a maker track and that is",
    "start": "145920",
    "end": "152720"
  },
  {
    "text": "for those that are really Geeks and thinks and that's fun because you just get to play with toys and we're going to",
    "start": "152720",
    "end": "159080"
  },
  {
    "text": "keep doing that as as we um as we go along for next year for next year we actually have big surprises but I'm not",
    "start": "159080",
    "end": "165319"
  },
  {
    "text": "going to spoil that you have to come to the first meeting of the next year to figure out what we're doing um for today",
    "start": "165319",
    "end": "171159"
  },
  {
    "text": "we're very very grateful to uh to uh both uh goto and Groupon um the go-to",
    "start": "171159",
    "end": "177720"
  },
  {
    "text": "conference you know essentially it's Tri workk and uh they have allow us to have Charles nter here so um I'm going to let",
    "start": "177720",
    "end": "185040"
  },
  {
    "text": "you Alex speak um go back to which one oh the",
    "start": "185040",
    "end": "193360"
  },
  {
    "text": "um yes it is possible all right well anyways um I'm",
    "start": "193360",
    "end": "198680"
  },
  {
    "text": "Alex I'm with tri Fork um myself and Nee are two of the organizers for goto Chicago 2015 and we are excited to have",
    "start": "198680",
    "end": "206560"
  },
  {
    "text": "our third annual year here in Chicago this year we'll be doing it on May 11th",
    "start": "206560",
    "end": "212319"
  },
  {
    "text": "through the 14th at the Weston River North and it's a brand new venue for us so we're really excited um in the heart",
    "start": "212319",
    "end": "218720"
  },
  {
    "text": "of downtown Chicago um this year we also have a great selection of java uh Java",
    "start": "218720",
    "end": "225400"
  },
  {
    "text": "speakers um Chad Fowler Jill teen uh Cameron pry Josh long and Tom Stewart um",
    "start": "225400",
    "end": "232159"
  },
  {
    "text": "and we also have a great selection of keynote speakers um Anita senuta who is",
    "start": "232159",
    "end": "237560"
  },
  {
    "text": "from NASA um we have have uh Chad Fowler we have Kyle Kingsbury we have Martin",
    "start": "237560",
    "end": "245239"
  },
  {
    "text": "Thompson and Todd Montgomery um and we wanted to thank",
    "start": "245239",
    "end": "250319"
  },
  {
    "text": "Groupon and Aaron Vedra in uh particular for allowing us to host here tonight and",
    "start": "250319",
    "end": "256519"
  },
  {
    "text": "C for partnering with us and helping us Host this great event and last but not",
    "start": "256519",
    "end": "262040"
  },
  {
    "text": "least um Charles Nutter for coming all the way uh from Minneapolis to be here so thank you guys all the way all the",
    "start": "262040",
    "end": "269160"
  },
  {
    "text": "way from Apolis such a long flight oh and yeah there's we also are",
    "start": "269160",
    "end": "275320"
  },
  {
    "text": "offering a um a special promo code for everyone here until the end of December um and it's $100 off our early bird uh",
    "start": "275320",
    "end": "283160"
  },
  {
    "text": "pricing which is um it's 950 but it will be 850 for registrations for go to",
    "start": "283160",
    "end": "289560"
  },
  {
    "text": "Chicago 2015 for you guys so um that will be yeah the promo code is Nutter",
    "start": "289560",
    "end": "296560"
  },
  {
    "text": "yeah and there's there's an interview with Charles for this yeah and yes we oh",
    "start": "296560",
    "end": "303639"
  },
  {
    "text": "great that's really fast um it's on gastic and um Mike Hall and Charles did",
    "start": "303639",
    "end": "310039"
  },
  {
    "text": "an interview before this talk and uh we're really excited to be able to use Mike um for those interviews so thanks",
    "start": "310039",
    "end": "318600"
  },
  {
    "text": "Mike all right no and and I mean I attended the conference last here and",
    "start": "318600",
    "end": "324280"
  },
  {
    "text": "and actually the roster that they have it's it's if you never heard these names don't worry about it they're like A+ so",
    "start": "324280",
    "end": "331919"
  },
  {
    "text": "um so uh so that's yeah if you if you can you know go please go because it is",
    "start": "331919",
    "end": "337520"
  },
  {
    "text": "a good conference I've been there you know Charles H was there and uh John was there John benovic which is the IBM guy",
    "start": "337520",
    "end": "344440"
  },
  {
    "text": "um so yeah give it a sh um I'm going to let it a little bit to Bob he is on the",
    "start": "344440",
    "end": "350440"
  },
  {
    "text": "back uh just an update on a thought jsr and what we're doing and why are we special yep so um I'll be brief um what",
    "start": "350440",
    "end": "358680"
  },
  {
    "text": "what we've done this year year is we've adopted a jsr 366 and for those that don't follow the",
    "start": "358680",
    "end": "363800"
  },
  {
    "text": "numbers that is the umbrella jsr for Java E8 so everything that ends up going",
    "start": "363800",
    "end": "369080"
  },
  {
    "text": "into Java e compliant application servers um you know whether that's you",
    "start": "369080",
    "end": "374400"
  },
  {
    "text": "know the JSP spec the serlet spec all of those things that are part of those application servers are part of that",
    "start": "374400",
    "end": "380440"
  },
  {
    "text": "specification we picked it because it's a broad one and we just want to kind of figure out what people in Chicago are",
    "start": "380440",
    "end": "386280"
  },
  {
    "text": "interested in and this gives us an opportunity to kind of dabble in a bunch of different things um so I know people",
    "start": "386280",
    "end": "392960"
  },
  {
    "text": "are very opinionate about J Jaa e app servers maybe there's too much stuff in them maybe there's features that are not",
    "start": "392960",
    "end": "398960"
  },
  {
    "text": "in them this is our chance to have a voice in that and that voice goes directly to Oracle so what we're going",
    "start": "398960",
    "end": "405080"
  },
  {
    "text": "to be doing is we're going to be organizing a bunch of maker tracks and talks throughout the year on certain",
    "start": "405080",
    "end": "410759"
  },
  {
    "text": "things that are part of the Jaa e specification and we're going to be looking for you guys to provide feedback",
    "start": "410759",
    "end": "417599"
  },
  {
    "text": "that we can encap that we can put in into packages and delivered to Oracle to try to to try to move this thing along",
    "start": "417599",
    "end": "423560"
  },
  {
    "text": "to get the change that we want to see um there's no reason we shouldn't be doing this and have a voice in Chicago and",
    "start": "423560",
    "end": "429840"
  },
  {
    "text": "we're going to be putting together events that are that are going to highlight that we got you had about E7 and you want to fix it this is how we",
    "start": "429840",
    "end": "436479"
  },
  {
    "text": "can we got a Google group set up um we've got an event on the 15th we've only got six spots left we're going to",
    "start": "436479",
    "end": "441840"
  },
  {
    "text": "be covering a JSF with Josh Juno who is on the expert committee so you love JSF",
    "start": "441840",
    "end": "447919"
  },
  {
    "text": "you hate JSF come anyways it's a good chance to offer feedback and see change in those products and those",
    "start": "447919",
    "end": "453360"
  },
  {
    "text": "specifications so um that's all I got thanks and last thing is there's if you",
    "start": "453360",
    "end": "459479"
  },
  {
    "text": "being on the Java users group you know that there's a party coming up is next Tuesday um you know it's uh essentially",
    "start": "459479",
    "end": "466400"
  },
  {
    "text": "just like last year it's just get together have fun be a geek and talk shop so so we are we are doing this with",
    "start": "466400",
    "end": "474080"
  },
  {
    "text": "the net users group and I say don't start any brawls we know who we wion we always win uh but but the idea is just",
    "start": "474080",
    "end": "481400"
  },
  {
    "text": "to come up be merried and have a good time so please come in you know um it's",
    "start": "481400",
    "end": "486599"
  },
  {
    "text": "free you know and there's uh you know free beer and free drink uh free food",
    "start": "486599",
    "end": "492039"
  },
  {
    "text": "too so you know come and have a good time so last but not",
    "start": "492039",
    "end": "498240"
  },
  {
    "text": "least um there's a couple of things yeah the first one is if you want to be part of like helping us run the organization",
    "start": "498240",
    "end": "504680"
  },
  {
    "text": "and be part of The Advisory Board uh just you know like uh every other meeting we we we always have a signup",
    "start": "504680",
    "end": "510280"
  },
  {
    "text": "sheet next to the uh the pxas just write your name down and your email and then we keeping track of this for people that",
    "start": "510280",
    "end": "516440"
  },
  {
    "text": "want to actually participate and help us out you know in you know stearing the direction now if you want to volunteer",
    "start": "516440",
    "end": "522800"
  },
  {
    "text": "just come talk to me you don't have to sign anything just come talk to me but if you want to be part of the advisory",
    "start": "522800",
    "end": "528240"
  },
  {
    "text": "like formally and stuff then yeah let do that um last but not least we're going to introduce Charles Nutter and I have a",
    "start": "528240",
    "end": "535399"
  },
  {
    "text": "funny story about him um actually this was on the tri Fork the last year's go to conference I was I was um having",
    "start": "535399",
    "end": "542440"
  },
  {
    "text": "dinner with uh Gil tenner and and John danovich which are if you don't know",
    "start": "542440",
    "end": "547680"
  },
  {
    "text": "their names essentially uh Gil is the one that does aposto is garbage colector you know he creates his own Java version",
    "start": "547680",
    "end": "553720"
  },
  {
    "text": "with aposto garbage colector you know John anovich essentially leads the IBM jbm I mean these are guys that",
    "start": "553720",
    "end": "560800"
  },
  {
    "text": "essentially solve empty heart problems at breakfast you know for breakfast and like seriously they're they're now we're",
    "start": "560800",
    "end": "567079"
  },
  {
    "text": "talking about how great the Java e consist is how great the jbm is and then suddenly we're talking about yeah Scout",
    "start": "567079",
    "end": "572640"
  },
  {
    "text": "runs great on our stuff you know what do we think about Scout how is it going to evolve and then I post the question you",
    "start": "572640",
    "end": "578920"
  },
  {
    "text": "know what do you guys think about Jay Ruby and Charles daughter and then everybody without batting an eye both",
    "start": "578920",
    "end": "584760"
  },
  {
    "text": "look at me he's crazy and there's a reason for that I mean Charles Nutter is the real reason",
    "start": "584760",
    "end": "592600"
  },
  {
    "text": "why a lot of like the jvm like languages can proliferate he's the one who has been pushing the of everyone saying this",
    "start": "592600",
    "end": "600279"
  },
  {
    "text": "is wrong we need to fix this we need to find a way to make this better and and they were just they were always so",
    "start": "600279",
    "end": "607720"
  },
  {
    "text": "amazed at how he can not just keep up with the Ruby language itself but actually make it better no offense",
    "start": "607720",
    "end": "614640"
  },
  {
    "text": "right he's already ignoring me uh he's the leader of the Ruby us uh but but the",
    "start": "614640",
    "end": "621640"
  },
  {
    "text": "the the real reason is is yeah I mean Charles nter he's he's a force a tour to force and we're so excited I've been",
    "start": "621640",
    "end": "627560"
  },
  {
    "text": "looking for bringing him here for longest time and that's when triper said you know we can help you guys out and then you I think it'll be a great meter",
    "start": "627560",
    "end": "634160"
  },
  {
    "text": "of the mind to have them here so with that I leave this stage for you all right great all right it work works for",
    "start": "634160",
    "end": "641480"
  },
  {
    "text": "the first time that's great hi everybody it's good to see you",
    "start": "641480",
    "end": "646519"
  },
  {
    "text": "all I'm glad we got a good Full House tonight I hope everybody's enjoying this wonderful local micro brew you guys have",
    "start": "646519",
    "end": "653200"
  },
  {
    "text": "lots of good beard on here which is why I came really but",
    "start": "653200",
    "end": "659920"
  },
  {
    "text": "doing a talk with a beer in hand is the best way to do a talk um so I'm going to do a talk a little bit about uh a few",
    "start": "659920",
    "end": "665680"
  },
  {
    "text": "different projects some of which I have a direct hand in some of which I'm just supporting that are kind of pushing the",
    "start": "665680",
    "end": "670920"
  },
  {
    "text": "edges of the jvm solving problems that uh were at least hard we knew they were hard to solve but potentially impossible",
    "start": "670920",
    "end": "677519"
  },
  {
    "text": "to solve in some cases we're actually making these things happen on the jbm so we'll we'll we'll have some fun with",
    "start": "677519",
    "end": "682600"
  },
  {
    "text": "this and hopefully you'll have uh some projects you'll be willing to look into and maybe contribute to in the future so",
    "start": "682600",
    "end": "688079"
  },
  {
    "text": "a little background just to to set the stage here we we're kind of doing this as a uh uh a play in three Acts or so or",
    "start": "688079",
    "end": "695800"
  },
  {
    "text": "four acts where I'm going to talk about what the state of the jvm is where we've been what sort of things we've had to",
    "start": "695800",
    "end": "702279"
  },
  {
    "text": "deal with working on J Ruby and then some of those projects that are making the the future of the jvm as a language",
    "start": "702279",
    "end": "708440"
  },
  {
    "text": "VM as a high performance VM a little bit more interesting to us so Java uh most",
    "start": "708440",
    "end": "714800"
  },
  {
    "text": "folks know these numbers released 1995 how how many folks have been developing since Java a one there's there's quite a",
    "start": "714800",
    "end": "721639"
  },
  {
    "text": "few quite a few uh I did applets I did applets as a university student working",
    "start": "721639",
    "end": "727120"
  },
  {
    "text": "in the web team uh in 1996 I think it was uh and it was it was",
    "start": "727120",
    "end": "732560"
  },
  {
    "text": "horrendous back then but it's improved a lot over the time uh 1998 we had 1.2",
    "start": "732560",
    "end": "739079"
  },
  {
    "text": "which we obviously had some collection libraries in 1 one but swing came along uh tons of other libraries came along",
    "start": "739079",
    "end": "745440"
  },
  {
    "text": "thank goodness we got things like corba in there really important used to have in Java um so lots of stuff was added at",
    "start": "745440",
    "end": "752600"
  },
  {
    "text": "that point and unfortunately nothing's been removed yet until maybe Java 9 will be peeling some stuff out uh in 2000",
    "start": "752600",
    "end": "759880"
  },
  {
    "text": "though was when Java really started to become a real Force within the development world that was when the",
    "start": "759880",
    "end": "765720"
  },
  {
    "text": "hotspot jit compiler landed and was the standard runtime for Java you could turn",
    "start": "765720",
    "end": "771120"
  },
  {
    "text": "it on in one later versions of one2 but 1.3 actually brought near native performance for Java",
    "start": "771120",
    "end": "777839"
  },
  {
    "text": "applications and then things continued on that way the jit compiler continued to prove over time uh the Java language",
    "start": "777839",
    "end": "783600"
  },
  {
    "text": "Incorporated additional features generics better libraries uh around around 1.2 was when we had the first e",
    "start": "783600",
    "end": "790600"
  },
  {
    "text": "release 1999 was the first Java e uh so things have continued to move they moved very well uh until about Java 1.6 2006",
    "start": "790600",
    "end": "799920"
  },
  {
    "text": "things really stalled at that point uh the jbm wasn't moving forward very quickly the language was certainly",
    "start": "799920",
    "end": "805480"
  },
  {
    "text": "stalled completely stalled at that point uh so what happened here well the problem is that Apache really wanted to",
    "start": "805480",
    "end": "811440"
  },
  {
    "text": "do their own open- source job they wanted to work on Harmony they had their own jbm they had their own class",
    "start": "811440",
    "end": "817079"
  },
  {
    "text": "libraries uh and they wanted to be able to test it and certify that it was Java",
    "start": "817079",
    "end": "822480"
  },
  {
    "text": "compliant but they're Apache they're very open source Centric they wanted an open source test kit that they could use",
    "start": "822480",
    "end": "828240"
  },
  {
    "text": "to test Java now the problem was that sun had had basically been pulling in",
    "start": "828240",
    "end": "833480"
  },
  {
    "text": "all of these tests from hundreds maybe thousands of different customers over the years",
    "start": "833480",
    "end": "839399"
  },
  {
    "text": "vetting all of that code to be released as open source was way more of an effort than open sourcing Java itself you can",
    "start": "839399",
    "end": "846040"
  },
  {
    "text": "imagine all of those different companies that would have to agree that their test case that was specific to their application and their secret proprietary",
    "start": "846040",
    "end": "853199"
  },
  {
    "text": "Concepts very difficult for them to release and so Sun just said no we can't do that we just can't open source this",
    "start": "853199",
    "end": "858519"
  },
  {
    "text": "stuff and so Apache refused to go forward voting for Java 7 and they were a primary member of the JCP at that",
    "start": "858519",
    "end": "865120"
  },
  {
    "text": "point uh and Sun could not release the tck it was a dead block and so we sat",
    "start": "865120",
    "end": "870240"
  },
  {
    "text": "there for 5 years basically until we got anything beyond Java 1.6 and really it",
    "start": "870240",
    "end": "875480"
  },
  {
    "text": "was about 4 years so double the normal release time before we even got jav in s",
    "start": "875480",
    "end": "880600"
  },
  {
    "text": "moving again uh and you know as as worried as people were about the Oracle takeover this is one thing that they got",
    "start": "880600",
    "end": "887360"
  },
  {
    "text": "moving again they came in and they said that we can't have Java 6 be the only Java that's out there we can't be",
    "start": "887360",
    "end": "893600"
  },
  {
    "text": "completely beholden to to uh retaliatory votes of no from for certain companies",
    "start": "893600",
    "end": "899959"
  },
  {
    "text": "that don't like our policies we need to push forward with Java if we're going to keep it alive just to save the platform",
    "start": "899959",
    "end": "905240"
  },
  {
    "text": "the platform was going to die if we didn't do this so they push through Java 7 and okay everyone's like yes we knew",
    "start": "905240",
    "end": "911320"
  },
  {
    "text": "Oracle was going to be bad for the platform we knew they were evil they're even kicking community members out and not even listening to them but over the",
    "start": "911320",
    "end": "919040"
  },
  {
    "text": "intervening years it's actually looked pretty good Oracle has contributed far",
    "start": "919040",
    "end": "924360"
  },
  {
    "text": "more resources internally uh monetary resources Manpower resources over the years uh they've continued to do",
    "start": "924360",
    "end": "931199"
  },
  {
    "text": "releases they're back to a 2-year cycle they're continuing to do security releases on a much more aggressive cycle",
    "start": "931199",
    "end": "936680"
  },
  {
    "text": "than Sun ever did fixing stuff that sun just brushed under the carpet over years uh so I'm still I'm still optimistic",
    "start": "936680",
    "end": "943880"
  },
  {
    "text": "about Oracle and their management of open jdk at this point so if we look uh",
    "start": "943880",
    "end": "949040"
  },
  {
    "text": "just some concrete numbers this is open jdk commits maybe a little hard to see on the screen but you can kind of get it",
    "start": "949040",
    "end": "954240"
  },
  {
    "text": "uh this is open jdk commits from the time that it was open sourced and so trackable in the open source Community",
    "start": "954240",
    "end": "960519"
  },
  {
    "text": "uh and you can see in 2008 2009 2010ish it's pretty flat there's not a whole lot",
    "start": "960519",
    "end": "966160"
  },
  {
    "text": "going on that was when we were essentially stuck at Java 1.6 had no idea where seven was going to go uh a",
    "start": "966160",
    "end": "972880"
  },
  {
    "text": "lot of work in late 2010 in early 2011 leading up to the Java 7 release but",
    "start": "972880",
    "end": "978839"
  },
  {
    "text": "what I find really interesting after the lull that happens immediately after a release as any any of us knows that we",
    "start": "978839",
    "end": "985360"
  },
  {
    "text": "take a break after a big release uh it didn't might go back down to the same level the next versions as we got up to",
    "start": "985360",
    "end": "991880"
  },
  {
    "text": "Java 8 and we're doing hard development on Java 8 trying to get that release out higher than the Java 7 numbers and when",
    "start": "991880",
    "end": "998000"
  },
  {
    "text": "it dropped off it dropped off to a higher level again and this has continued over time more and more work",
    "start": "998000",
    "end": "1004000"
  },
  {
    "text": "being done on open jdk not just by Oracle but by external contributors too",
    "start": "1004000",
    "end": "1010079"
  },
  {
    "text": "we look at the community that we have for open jdk uh there's literally dozens of companies a lot of lot of companies",
    "start": "1010079",
    "end": "1016120"
  },
  {
    "text": "that you wouldn't even expect to be uh contributing to the open jdk like Twitter are part of the open jdk",
    "start": "1016120",
    "end": "1021480"
  },
  {
    "text": "Community hundreds of users and individuals that are doing contributions and making commits to open jdk",
    "start": "1021480",
    "end": "1028079"
  },
  {
    "text": "repositories uh pretty much all the jbms that you're going to run other than the non jvm on Android is open jdk base and",
    "start": "1028079",
    "end": "1036079"
  },
  {
    "text": "uh it's it's really this this it's a it's a really good open source Love Fest that actually is working as an open",
    "start": "1036079",
    "end": "1042120"
  },
  {
    "text": "source project even under Oracle a company that everybody was afraid was not going to be a very good open source",
    "start": "1042120",
    "end": "1048079"
  },
  {
    "text": "company I I always figured because because we were at Sun right up until Oracle I knew all the guys at Sun that",
    "start": "1048079",
    "end": "1054000"
  },
  {
    "text": "worked on Java and they had open source so in their blood that there was no way",
    "start": "1054000",
    "end": "1059720"
  },
  {
    "text": "this match was going to be made without some of that infecting the rest of Oracle and I think they've really done a",
    "start": "1059720",
    "end": "1065360"
  },
  {
    "text": "good job of letting the job organization continue to manage it in an open source way and an open process and all that so",
    "start": "1065360",
    "end": "1071679"
  },
  {
    "text": "it's looking good um again the same sort of numbers as far as contributors and commits continuing to go up over time",
    "start": "1071679",
    "end": "1078480"
  },
  {
    "text": "and this is not Oracle adding twice as many developers to open jdk Al they've added a lot but they haven't added twice",
    "start": "1078480",
    "end": "1084919"
  },
  {
    "text": "as many most of this is coming from outside and it's it's people who used to compete with open jdk used to compete",
    "start": "1084919",
    "end": "1091720"
  },
  {
    "text": "with Suns Java it's it's platforms that Oracle doesn't support directly all sorts of folks that are actually making",
    "start": "1091720",
    "end": "1097520"
  },
  {
    "text": "this thing work and anyone here as you're doing with jsr process uh you can contribute you can help this stuff and",
    "start": "1097520",
    "end": "1104400"
  },
  {
    "text": "you can get patches in even the smallest one will make a big difference so then moving on from there uh we",
    "start": "1104400",
    "end": "1110960"
  },
  {
    "text": "joined sun to work on J Ruby officially in 2006 hard to believe it's actually",
    "start": "1110960",
    "end": "1116440"
  },
  {
    "text": "eight years of working full-time on J Ruby at various companies uh but you know for those who haven't aren't",
    "start": "1116440",
    "end": "1122600"
  },
  {
    "text": "familiar with it J Ruby is obviously Ruby on top of the jvm we try not to say Java when we're at Ruby conferences we",
    "start": "1122600",
    "end": "1129000"
  },
  {
    "text": "just say jvm and they're like oh wow it's magic um but it's Ruby plus plus",
    "start": "1129000",
    "end": "1134520"
  },
  {
    "text": "the Java virtual machine taking advantage of everything we have on that platform uh and basically because we're",
    "start": "1134520",
    "end": "1139799"
  },
  {
    "text": "all Java guys we've done Java for years we know what the jvm can do we know it's it is the best managed runtime out there",
    "start": "1139799",
    "end": "1146799"
  },
  {
    "text": "s any.net folks that are here jbm is by far the best managed runtime as far as",
    "start": "1146799",
    "end": "1151880"
  },
  {
    "text": "performance scaling threading everything it does some so much better than most runtimes we like the jvm uh we don't",
    "start": "1151880",
    "end": "1159400"
  },
  {
    "text": "have to do Platform specific compilation J Ruby on Windows works exactly the same as it works with J Ruby on Linux or vsd",
    "start": "1159400",
    "end": "1166799"
  },
  {
    "text": "very difficult for this to be native implementation of Ruby to do that and keep it consistent uh no native Library",
    "start": "1166799",
    "end": "1172400"
  },
  {
    "text": "dependencies one of the reasons people can't run Ruby on Windows is because the Ruby world has all these C libraries",
    "start": "1172400",
    "end": "1178280"
  },
  {
    "text": "that have to compile and install so how many windows users do you know that have C compilers installed if they're going",
    "start": "1178280",
    "end": "1184320"
  },
  {
    "text": "to do Ruby development not to not not generally or Java development you have to pay for that kind of stuff or you",
    "start": "1184320",
    "end": "1190320"
  },
  {
    "text": "have to go and struggle with stitching together mingw32 or whatever it's it's a big problem for folks trying to run Ruby",
    "start": "1190320",
    "end": "1196280"
  },
  {
    "text": "on Windows they don't have to deal with that with j J Ruby uh of course we get the advantage of hotspot itself J Ruby",
    "start": "1196280",
    "end": "1203400"
  },
  {
    "text": "is the fastest like standard production ready Ruby implementation there's experimental ones that can push it a",
    "start": "1203400",
    "end": "1209640"
  },
  {
    "text": "little farther but if you're going to run Ruby in a real application you run it on J Ruby because it's just faster",
    "start": "1209640",
    "end": "1215159"
  },
  {
    "text": "and it scales and threads Bri like you'd expect it to and and really the jvm kind of ends up being sort of a magical black",
    "start": "1215159",
    "end": "1221760"
  },
  {
    "text": "box that just makes our code work makes Ruby run fast uh we love being able to",
    "start": "1221760",
    "end": "1227120"
  },
  {
    "text": "just throw stuff at it know it's going to work know it's going to run consistently across platforms so there's",
    "start": "1227120",
    "end": "1232400"
  },
  {
    "text": "lots of things to like about the jbm which makes these are obvious reasons why this would be a better approach to",
    "start": "1232400",
    "end": "1237840"
  },
  {
    "text": "building a language runtime than starting from scratch and building your own garbage collector and your own jit right but there are issues there have",
    "start": "1237840",
    "end": "1245880"
  },
  {
    "text": "been challenges along the way to get Ruby to run well on top of the jbm uh",
    "start": "1245880",
    "end": "1251240"
  },
  {
    "text": "it's very much tailored towards Java it's mostly had to host Java and that's where Sun's Focus was even Oracle still",
    "start": "1251240",
    "end": "1257240"
  },
  {
    "text": "largely focuses on Java so other languages have challenges uh when you do need to call out to native code it's",
    "start": "1257240",
    "end": "1264080"
  },
  {
    "text": "nearly impossible on a standard jvm there are libraries that can help but they're not standard it's something",
    "start": "1264080",
    "end": "1269480"
  },
  {
    "text": "anybody somebody else has to ship potentially build additional code for and this black box that we love so much",
    "start": "1269480",
    "end": "1276480"
  },
  {
    "text": "we have to guess we have to throw code at it we have to tweak flags from outside inlining things and and hotspot",
    "start": "1276480",
    "end": "1283400"
  },
  {
    "text": "and GC tuning and whatnot but other than that we can't really see what's happening behind the scenes and we",
    "start": "1283400",
    "end": "1289559"
  },
  {
    "text": "certainly can't influence what's happening behind the scenes we can't tell the jbm how to optimize Ruby the",
    "start": "1289559",
    "end": "1294880"
  },
  {
    "text": "way we want Ruby optimized and so all these areas are things that we've been exploring over the years starting to",
    "start": "1294880",
    "end": "1299919"
  },
  {
    "text": "come up with solutions for because we want to do Ruby on the jbm we want this to work uh let's look at a few of the",
    "start": "1299919",
    "end": "1306240"
  },
  {
    "text": "projects that are actually making this happen that in the future may make the jvm even better maybe maybe make it the",
    "start": "1306240",
    "end": "1313080"
  },
  {
    "text": "best runtime for any language rather than just the best runtime for for Java",
    "start": "1313080",
    "end": "1318760"
  },
  {
    "text": "uh the first I like to talk about is invoke Dynamic how many folks have played with invoke Dynamic at all all",
    "start": "1318760",
    "end": "1324080"
  },
  {
    "text": "right that's about what I thought like two or three people it's a very obscure feature that came in Java 7 but had no",
    "start": "1324080",
    "end": "1330279"
  },
  {
    "text": "exposure to Java the language in general so most folks don't know what it is but it's it's the underpinnings of",
    "start": "1330279",
    "end": "1336760"
  },
  {
    "text": "everything that you're going to see in the jbm for the next 10 years and so it's really important to understand what",
    "start": "1336760",
    "end": "1341880"
  },
  {
    "text": "it actually can do and how you and how the Java language Des designers are going to be using it all right so again",
    "start": "1341880",
    "end": "1349320"
  },
  {
    "text": "a little bit of History uh the jbm authors did mention non-java languages in the original jvm specification uh",
    "start": "1349320",
    "end": "1356159"
  },
  {
    "text": "they talked about having targeted targeted extensions to the jvm at some point that maybe were just for Lang",
    "start": "1356159",
    "end": "1363039"
  },
  {
    "text": "other languages than Java they knew that this was going to be a good generalized platform to build stuff on but it was",
    "start": "1363039",
    "end": "1369159"
  },
  {
    "text": "not really focusing on other languages than Java at the beginning uh and over the years hundreds of authors have targeted the jbm there's there's an",
    "start": "1369159",
    "end": "1375600"
  },
  {
    "text": "implementation of pretty much every language out there that runs on the jbm of various qualities uh sometimes",
    "start": "1375600",
    "end": "1380919"
  },
  {
    "text": "there's two or three of them uh at one point I think there were three or four different Ruby implementations uh that",
    "start": "1380919",
    "end": "1387039"
  },
  {
    "text": "ran on the jvm and J Ruby was obviously the most complete so we've kind of taken that over uh the problem though is that",
    "start": "1387039",
    "end": "1393679"
  },
  {
    "text": "the jbm was a mismatch for a lot of these languages Dynamic dispatch is one of the obvious cases uh the jbm mostly",
    "start": "1393679",
    "end": "1400000"
  },
  {
    "text": "wants statically typed dispatch it's got to be compilable to that call uh so we",
    "start": "1400000",
    "end": "1405240"
  },
  {
    "text": "had to do tricks to get around that and do our own optimiz ations uh there's also features that the",
    "start": "1405240",
    "end": "1410400"
  },
  {
    "text": "jbm could not provide like co- routines generators threadlets whatever you call them in your language uh still not",
    "start": "1410400",
    "end": "1417679"
  },
  {
    "text": "supported on the jvm we've had to find other solutions to to make those work uh so if we look at what the jvm",
    "start": "1417679",
    "end": "1424320"
  },
  {
    "text": "itself is as far as a specification it really is just a set of operations a set of op codes that have particular",
    "start": "1424320",
    "end": "1430320"
  },
  {
    "text": "behavior and then a little bit of of logic about how it's going to run at runtime uh so we've got invocation we've",
    "start": "1430320",
    "end": "1435720"
  },
  {
    "text": "got field access arrays kind of the end points this is where data flows through the system flows into a call or goes",
    "start": "1435720",
    "end": "1442240"
  },
  {
    "text": "into a field or an array somewhere uh and then there's a bunch of other miscellane sort of things stack control",
    "start": "1442240",
    "end": "1448559"
  },
  {
    "text": "flow control math stuff things that don't have direct side effects outside the VM but are necessary for the the",
    "start": "1448559",
    "end": "1454679"
  },
  {
    "text": "flow of the program to work properly and so traditionally if you wanted to build a language on top of the jvm this is",
    "start": "1454679",
    "end": "1461000"
  },
  {
    "text": "what you had to work with and if you had to if you had needed an operation that was not supported here you had to",
    "start": "1461000",
    "end": "1467120"
  },
  {
    "text": "aggregate them together you had to build libraries around it you had to do neat tricks at the bite code level to try and",
    "start": "1467120",
    "end": "1472480"
  },
  {
    "text": "get things to work uh but for the most part you had to kind of stay inside this little bubble of what features were",
    "start": "1472480",
    "end": "1478320"
  },
  {
    "text": "available on the jbm to implement a language or a library so this is the the quote I",
    "start": "1478320",
    "end": "1485080"
  },
  {
    "text": "mentioned earlier in the future we'll consider bounded extensions to the Java virtual machine to provide better support for other languages not for Java",
    "start": "1485080",
    "end": "1492799"
  },
  {
    "text": "and for the first time in Java 7 that actually happened with invoke Dynamic it was a bite code added to the VM that",
    "start": "1492799",
    "end": "1499919"
  },
  {
    "text": "Java did not use in any way it was only for other languages and then potentially",
    "start": "1499919",
    "end": "1505240"
  },
  {
    "text": "because of the ability the power of the feature for features uh in Java the language in the future but but added to",
    "start": "1505240",
    "end": "1511520"
  },
  {
    "text": "added to the jbm without any Java support of any kind so this is jsr 292 um for those of",
    "start": "1511520",
    "end": "1517880"
  },
  {
    "text": "you following along invoke Dynamic jsr it's essentially a user definable bite",
    "start": "1517880",
    "end": "1523039"
  },
  {
    "text": "code it's a bite code that you can put it into a piece of code and then rather than exec some arbitrary sequence of",
    "start": "1523039",
    "end": "1529360"
  },
  {
    "text": "operations the jvm calls back to you at runtime and says what am I supposed to do here and then inserts that into the",
    "start": "1529360",
    "end": "1535720"
  },
  {
    "text": "code at that point optimizes it as if it was written the static code so you can do your Dynamic lookup of methods you",
    "start": "1535720",
    "end": "1542399"
  },
  {
    "text": "can lazily allocate constants and cache them in place and they they all they they they optimize as if they were there",
    "start": "1542399",
    "end": "1548880"
  },
  {
    "text": "at compile time uh lots of stuff that you can do basically all of the VM Behavior you want you can plug into this",
    "start": "1548880",
    "end": "1555120"
  },
  {
    "text": "userdefined B code uh it also comes along with an API you might have seen Java Lang invoke uh the method handle",
    "start": "1555120",
    "end": "1562080"
  },
  {
    "text": "API intended to be essentially fast function pointers faster than reflection",
    "start": "1562080",
    "end": "1568600"
  },
  {
    "text": "uh with a bunch of adaptations you can do if you want a function pointer that also rescues or catches exceptions and",
    "start": "1568600",
    "end": "1575840"
  },
  {
    "text": "has different Behavior have it in one object without having to write any code for it it's a programmatic way to build",
    "start": "1575840",
    "end": "1581360"
  },
  {
    "text": "up essentially a function object um caching and validation all sorts of VM level things like caching methods inv",
    "start": "1581360",
    "end": "1588360"
  },
  {
    "text": "validating when classes change so on uh so let's look at what this actually looks like in in practice so here's the",
    "start": "1588360",
    "end": "1594200"
  },
  {
    "text": "invoke side and this is what we've had traditionally on uh Java 6 and lower VMS",
    "start": "1594200",
    "end": "1600159"
  },
  {
    "text": "we have our static invocations or system current time miles and so on we have",
    "start": "1600159",
    "end": "1605240"
  },
  {
    "text": "virtual dispatch which is dispatch against a concrete type we have interface dispatch where something has",
    "start": "1605240",
    "end": "1611919"
  },
  {
    "text": "been casted to list or collection or comparable and we make a call against that additional Plumbing with within the",
    "start": "1611919",
    "end": "1617880"
  },
  {
    "text": "jvm to find the right interface method and make the call uh and then we have what's called special invocation",
    "start": "1617880",
    "end": "1624440"
  },
  {
    "text": "Constructors and super uh stuff that goes through visibility only works within C certain contexts and so on and",
    "start": "1624440",
    "end": "1632039"
  },
  {
    "text": "so if you look at these uh at the bite code level we have invoke static invoke virtual invoke interface and invoke",
    "start": "1632039",
    "end": "1637600"
  },
  {
    "text": "special and this is pretty much the only ways that you can invoke or or cause uh external code external sub routine to be",
    "start": "1637600",
    "end": "1644559"
  },
  {
    "text": "executed on the jbm prior to Javas set uh now if we actually boil these down to",
    "start": "1644559",
    "end": "1651039"
  },
  {
    "text": "their actual VM level operations the things they do at the VM level what you'll notice here is that with a few",
    "start": "1651039",
    "end": "1658320"
  },
  {
    "text": "differences this is largely the same set of operations for every single one of them you pretty much just take an object",
    "start": "1658320",
    "end": "1664440"
  },
  {
    "text": "in hand or a class you find a method on it you cache it somewhere so you don't",
    "start": "1664440",
    "end": "1669519"
  },
  {
    "text": "have to do that look up again and then you invoke it and then ideally you just keep going back to some cache and",
    "start": "1669519",
    "end": "1674720"
  },
  {
    "text": "calling the method directly uh if you have more more complicated lookup logic you can't get that out of this you've",
    "start": "1674720",
    "end": "1680559"
  },
  {
    "text": "got to wire it yourself if you have different semantics for how you invalidate that the method is is still",
    "start": "1680559",
    "end": "1686360"
  },
  {
    "text": "the right one uh as in Ruby where you can rewrite classes modify Methods at",
    "start": "1686360",
    "end": "1691399"
  },
  {
    "text": "runtime nothing that we can do as part of these and that's where invoke Dynamic came in invoke Dynamic basically says",
    "start": "1691399",
    "end": "1698360"
  },
  {
    "text": "we've got all of these little primitive VM operations that we can use for method lookup method dispatch caching and so on",
    "start": "1698360",
    "end": "1705559"
  },
  {
    "text": "let's let you decide how to assemble together and we'll just give you an entry point in the code you stick an",
    "start": "1705559",
    "end": "1712360"
  },
  {
    "text": "invoke Dynamic bite code in the code you tell it how to do all the dispatch how to do all the caching and the jvm",
    "start": "1712360",
    "end": "1718000"
  },
  {
    "text": "pretends it's one of these other built-in operations optimizes it if it was always there very powerful much more",
    "start": "1718000",
    "end": "1725159"
  },
  {
    "text": "than just Dynamic indication much more than Dynamic typing you can do almost anything with this and it's really",
    "start": "1725159",
    "end": "1730880"
  },
  {
    "text": "interesting to see the evolution of the Java language now starting to use some of these features so to go a little bit",
    "start": "1730880",
    "end": "1736760"
  },
  {
    "text": "more graphically on this uh on on the left here we have our our code",
    "start": "1736760",
    "end": "1742559"
  },
  {
    "text": "essentially our router for the system and and and the jvm is on the other side figuring out which methods we want to",
    "start": "1742559",
    "end": "1748279"
  },
  {
    "text": "call uh as these different endpoints for our switchboard so we've got some invoked Dynamic bite code that comes in",
    "start": "1748279",
    "end": "1753720"
  },
  {
    "text": "we want to make a call basically we don't know where it is it's it's some arbitrary object we just want to call",
    "start": "1753720",
    "end": "1759480"
  },
  {
    "text": "this method maybe it has these types make the invocation and make it work so the invoke Dynamic bite code the first",
    "start": "1759480",
    "end": "1765440"
  },
  {
    "text": "thing that jbm does is call back to us to a normal piece of java code called the bootstrap method the bootstrap",
    "start": "1765440",
    "end": "1771840"
  },
  {
    "text": "method says all right I'm going to go get a function pointer I'm going to reargue reorder the arguments a little",
    "start": "1771840",
    "end": "1778080"
  },
  {
    "text": "bit I'm going to do some type checking here uh and then I'll I'll put some caching around it to make sure it's",
    "start": "1778080",
    "end": "1783480"
  },
  {
    "text": "still the right right method every time once we've got the bootstrap method we've got it all set we know exactly how",
    "start": "1783480",
    "end": "1789480"
  },
  {
    "text": "we want this invocation to work what sort of method we're going to be calling that goes into the method",
    "start": "1789480",
    "end": "1794640"
  },
  {
    "text": "handles that's where we actually Stitch this stuff together so we've got our handles that we give back to the jbm the",
    "start": "1794640",
    "end": "1800320"
  },
  {
    "text": "method handles go back to some Target method they actually do the invocation of whatever the target is with with some",
    "start": "1800320",
    "end": "1806240"
  },
  {
    "text": "adaptations with some caching uh and then from then on the jbm is basically able to make that call directly it's",
    "start": "1806240",
    "end": "1812960"
  },
  {
    "text": "gone around this whole process where we're now the jvm we're making the decisions about how this call is going",
    "start": "1812960",
    "end": "1818640"
  },
  {
    "text": "to proceed and all the rest of this can basically just fade away maybe it'll invalidate maybe we go back through this",
    "start": "1818640",
    "end": "1824679"
  },
  {
    "text": "cycle if we have additional types maybe a class is reopened and the method changes but generally this is going to",
    "start": "1824679",
    "end": "1830640"
  },
  {
    "text": "go straight through and you can see this at the lowest levels at the assembly level the call from an invoke Dynamic to",
    "start": "1830640",
    "end": "1836960"
  },
  {
    "text": "all of that extra logic that I wrote optimizes as if it was just plain Java bite code it's amazing the way it works",
    "start": "1836960",
    "end": "1844480"
  },
  {
    "text": "so what can we do with this it's very abstract I want to try and get into more concrete examples um so obviously the",
    "start": "1844480",
    "end": "1850519"
  },
  {
    "text": "the languages that are built on top of invoke Dynamic like J Ruby uh are getting great great benefits from this",
    "start": "1850519",
    "end": "1856320"
  },
  {
    "text": "rather than building all of our own Plumbing to optimize Dynamic calls to optimize in Ruby constant lookup isn't",
    "start": "1856320",
    "end": "1862480"
  },
  {
    "text": "really constant it's sort of a lazy constant uh this is the sort of stuff that we can get out of invoke Dynamic we",
    "start": "1862480",
    "end": "1868080"
  },
  {
    "text": "can do invoke Dynamic to make calls fast to make this other stuff work well uh JB is at the Forefront of this groovy is",
    "start": "1868080",
    "end": "1874799"
  },
  {
    "text": "now starting to look at it jython uh some of the small type limitations and of course NZ horn and DJs NZ horn being",
    "start": "1874799",
    "end": "1881519"
  },
  {
    "text": "oracle's new JavaScript implementation DJs is Red Hats cuz we have to balance",
    "start": "1881519",
    "end": "1886799"
  },
  {
    "text": "everything all the time um I work at Red Hat by the way just as a preliminary",
    "start": "1886799",
    "end": "1892120"
  },
  {
    "text": "there uh but yes lots of languages using this and lots of languages getting benefit uh let's see what it actually does in J Ruby so in J Ruby I mentioned",
    "start": "1892120",
    "end": "1898639"
  },
  {
    "text": "method dispatch so our invoke Dynamic when we have a call to a dynamic Ruby method uh we go to our hierarchy of Ruby",
    "start": "1898639",
    "end": "1906200"
  },
  {
    "text": "classes which are essentially just hashes uh we look up the method get it in hand we cache it in place we wrap",
    "start": "1906200",
    "end": "1914799"
  },
  {
    "text": "some invalidation around it so that if that class hierarchy changes at all we dump it and then the next time you do",
    "start": "1914799",
    "end": "1920440"
  },
  {
    "text": "that call it'll go and look up again make sure it's got the right method uh and it works very well for method",
    "start": "1920440",
    "end": "1925679"
  },
  {
    "text": "dispatch I mentioned constant lookup is also kind of lazy a lazy constant so we retrieve the constant we cach it and",
    "start": "1925679",
    "end": "1932760"
  },
  {
    "text": "then if we ever see this constant re redefined we invalidate it put it back in place but the jbm can see through",
    "start": "1932760",
    "end": "1939039"
  },
  {
    "text": "that optimize it for the fast path normally it's not going to be invalidated it'll optimize as if it was",
    "start": "1939039",
    "end": "1944159"
  },
  {
    "text": "just a regular literal constant in Java code um performance- wise so this is J Ruby",
    "start": "1944159",
    "end": "1950559"
  },
  {
    "text": "performance versus Ruby 193 uh these are the numbers for J Ruby on Java 6 not",
    "start": "1950559",
    "end": "1956799"
  },
  {
    "text": "using any invoke Dynamic features using our on plumbing and of course we're we're faster than C Ruby is they don't",
    "start": "1956799",
    "end": "1962840"
  },
  {
    "text": "have a jit they don't have the GC that we do but not as good as we'd like to see um and these are actually older",
    "start": "1962840",
    "end": "1968480"
  },
  {
    "text": "numbers I need to rerun these on more recent J rubies but with invoke Dynamic we at least two times faster than",
    "start": "1968480",
    "end": "1975679"
  },
  {
    "text": "running with standard J rubies uh sometimes two to five times faster than regular J Ruby for the cases that",
    "start": "1975679",
    "end": "1981200"
  },
  {
    "text": "really optimize well so it is helping us a lot uh perhaps more concrete here this",
    "start": "1981200",
    "end": "1987720"
  },
  {
    "text": "is actually an implementation of uh red black tree so this is the pure Ruby version running in C Ruby uh Ruby 2.0",
    "start": "1987720",
    "end": "1996000"
  },
  {
    "text": "we're on 2.1 now but the performance is about the same uh so 2 and 1 half seconds to run this bench mark which",
    "start": "1996000",
    "end": "2001600"
  },
  {
    "text": "does ADS deletes traversals surges and whatnot uh there is a extension to",
    "start": "2001600",
    "end": "2007559"
  },
  {
    "text": "improve the speed of that and you can see here why the Ruby Community has such a problem with C extensions the Ruby",
    "start": "2007559",
    "end": "2013880"
  },
  {
    "text": "implementation is not fast enough for you to write cast code in Ruby so",
    "start": "2013880",
    "end": "2019080"
  },
  {
    "text": "there's this this plague of C extensions we've had to deal with like the red black tree like other libraries uh it",
    "start": "2019080",
    "end": "2025480"
  },
  {
    "text": "does give a good performance Improvement here brings it down to about half a second for this particular Benchmark uh",
    "start": "2025480",
    "end": "2030720"
  },
  {
    "text": "but this is the interesting one J Ruby with the pure ruby red black tree running on invoke Dynamic almost twice",
    "start": "2030720",
    "end": "2036760"
  },
  {
    "text": "as fast as C Ruby with the c implementation of red black tree and now",
    "start": "2036760",
    "end": "2042279"
  },
  {
    "text": "some of this of course the the the benchmark's going to optimize better just because it's running on the jvm uh there's better GC that we have",
    "start": "2042279",
    "end": "2050118"
  },
  {
    "text": "that improves performance a little bit but this is still incredibly impressive this means that we if we were running on",
    "start": "2050119",
    "end": "2055800"
  },
  {
    "text": "J Ruby in the first place using invoke Dynamic we wouldn't have to go to C for this to get that level of performance",
    "start": "2055800",
    "end": "2061800"
  },
  {
    "text": "maybe we'd want the 0.1 second that we get out of the the native J J Ruby Java",
    "start": "2061800",
    "end": "2067240"
  },
  {
    "text": "extension maybe we don't maybe this is what we looked for and so that's where invoke Dynamics making it possible to",
    "start": "2067240",
    "end": "2072919"
  },
  {
    "text": "build better languages faster languages on top of the jvm uh now this is why I I alluded to",
    "start": "2072919",
    "end": "2079560"
  },
  {
    "text": "this a little bit but in Java 7 nothing used invoke Dynamic none of these features were actually touched as far as",
    "start": "2079560",
    "end": "2084800"
  },
  {
    "text": "the Java language uh but definitely in Java 8 and N this going to be used heavily uh so the first one the most",
    "start": "2084800",
    "end": "2091440"
  },
  {
    "text": "visible one is the Lambda expression in Java 8 the closures that we've always wanted in Java",
    "start": "2091440",
    "end": "2097839"
  },
  {
    "text": "uh rather than just doing this like inner classes where every closure would spit out a nasty little class file to go",
    "start": "2097839",
    "end": "2104280"
  },
  {
    "text": "along with it with dollar signs and numbers and stuff all over it uh they actually use invoke Dynamic to lazily",
    "start": "2104280",
    "end": "2110200"
  },
  {
    "text": "generate that little function class cach it in place so that they don't reconstruct that interclass every time a",
    "start": "2110200",
    "end": "2117440"
  },
  {
    "text": "serious problem with with Anonymous inter classes for example you got to spin that object every single time uh",
    "start": "2117440",
    "end": "2123520"
  },
  {
    "text": "and all of the shared State all the local variables that it references are passed in on the call stack so the jvm",
    "start": "2123520",
    "end": "2129880"
  },
  {
    "text": "can optimize straight through with no allocation no extra class files in the",
    "start": "2129880",
    "end": "2135079"
  },
  {
    "text": "jar or on the disc it's all just invoke Dynamic figures out what this function object is sticks it in place and then",
    "start": "2135079",
    "end": "2141560"
  },
  {
    "text": "passes it along to the rest of the system huge improvement over what we had as far as in classes go um at the yes in",
    "start": "2141560",
    "end": "2148640"
  },
  {
    "text": "front sorry I have a question um um so I built a um a framework similar to act",
    "start": "2148640",
    "end": "2157040"
  },
  {
    "text": "active record in Java and um in order to for it to have really elegant",
    "start": "2157040",
    "end": "2164079"
  },
  {
    "text": "API um I had to do some code manipulation bite code manipulation post compile in other words there's a",
    "start": "2164079",
    "end": "2170920"
  },
  {
    "text": "step of um um bite code instrumentation where it actually grabs some code from",
    "start": "2170920",
    "end": "2177280"
  },
  {
    "text": "the super class and sticks it into a subass sure um so it's been working like",
    "start": "2177280",
    "end": "2182480"
  },
  {
    "text": "a charm for the past 5 years until we hit the lumus M um so the bite code",
    "start": "2182480",
    "end": "2188359"
  },
  {
    "text": "instrumentation has two capabilities you can do static uh bite code instrumentation that",
    "start": "2188359",
    "end": "2195359"
  },
  {
    "text": "is after compile you generate a class right and then it works with lambdas perfectly mhm but it also has damic",
    "start": "2195359",
    "end": "2203160"
  },
  {
    "text": "where uh we actually have our own uh Dynamic class loader which looks you know and that falls apart completely uh",
    "start": "2203160",
    "end": "2211560"
  },
  {
    "text": "if the instrumented code is used inside lambas sure so I was wondering if there is a a way to do static Lambda",
    "start": "2211560",
    "end": "2218400"
  },
  {
    "text": "generation instead of static uh to statically generate the lambdas I'm not",
    "start": "2218400",
    "end": "2224480"
  },
  {
    "text": "sure um the the recommendation I'd make to you would be that maybe invoke",
    "start": "2224480",
    "end": "2230200"
  },
  {
    "text": "Dynamic would actually be a way to solve your Dynamic class problem you can basically have an invoke Dynamic that",
    "start": "2230200",
    "end": "2236520"
  },
  {
    "text": "then does that generation uh the jbm will inline it as if it was just regular code and then it is part of the original",
    "start": "2236520",
    "end": "2242720"
  },
  {
    "text": "body of code itself um I don't know if if there's a way to D to eagerly",
    "start": "2242720",
    "end": "2248480"
  },
  {
    "text": "generate all the Lambda stuff it's one of the things they wanted to avoid everyone hated the fact that there were all these little class files that were",
    "start": "2248480",
    "end": "2254640"
  },
  {
    "text": "spit out for Anonymous classes and whatnot they're good package but you know it's a it's probably something that",
    "start": "2254640",
    "end": "2262119"
  },
  {
    "text": "you could look at as far as the the co the generation you're doing and um I've actually wanted to work on some tools that that go back and rewrite static",
    "start": "2262119",
    "end": "2269520"
  },
  {
    "text": "Java code to do Dynamic things using invoke Dynamic be very easy to just plug the bite code in and have it do anything",
    "start": "2269520",
    "end": "2275960"
  },
  {
    "text": "we want so something to look at thank you so much sure so this is an example of a fairly normal fairly boring uh use",
    "start": "2275960",
    "end": "2283880"
  },
  {
    "text": "of a lamba in Java 8 uh we've got collections. sort input is a list of string and we're just sorting them based",
    "start": "2283880",
    "end": "2291079"
  },
  {
    "text": "on their length so the closure here uh the Lambda basically takes those two strings uh gets their links and does a",
    "start": "2291079",
    "end": "2297839"
  },
  {
    "text": "integer compare so that we got the uh the right ordering uh the code on the top 0 through n there uh that's the the",
    "start": "2297839",
    "end": "2305520"
  },
  {
    "text": "code you see above and that's all the code you see it loads the the list the input uh",
    "start": "2305520",
    "end": "2312839"
  },
  {
    "text": "list of strings uh the invoke Dynamic goes out and generates that Lambda that",
    "start": "2312839",
    "end": "2317880"
  },
  {
    "text": "closure object and then invoke static is the comparator call uh this would be much more code if you were going to use",
    "start": "2317880",
    "end": "2324040"
  },
  {
    "text": "in classes it would have to construct that class it would have to pass in all of the local state that it's going to need uh not not quite as clean as this",
    "start": "2324040",
    "end": "2331119"
  },
  {
    "text": "the code on the bottom is what's actually in the body of the Lambda actually in the body of the closure",
    "start": "2331119",
    "end": "2337079"
  },
  {
    "text": "uh so it's going to load the first argument the first string get the length load the second argument get the length",
    "start": "2337079",
    "end": "2344000"
  },
  {
    "text": "do the comparison and then return the actual integer value and that's all magically done behind the scenes the the",
    "start": "2344000",
    "end": "2350280"
  },
  {
    "text": "little pseudo method that's created here gets stuck in the same class as a little hidden method invoke Dynamic goes out",
    "start": "2350280",
    "end": "2356760"
  },
  {
    "text": "and generates a little comparator wrapper around it at runtime and that's what's actually passed to the sort",
    "start": "2356760",
    "end": "2362760"
  },
  {
    "text": "method so you don't have any extra classes on the disc it passes all the all the state through is arguments no",
    "start": "2362760",
    "end": "2368760"
  },
  {
    "text": "allocation much better as far as performance allocation and other stuff um one that's coming up in nine",
    "start": "2368760",
    "end": "2376119"
  },
  {
    "text": "that I'm really excited about an interest another interesting use of invoke Dynamic I never thought of uh",
    "start": "2376119",
    "end": "2381640"
  },
  {
    "text": "doing primitive specialization of generic collections something that people have wanted for a long time of",
    "start": "2381640",
    "end": "2387319"
  },
  {
    "text": "course with generics and Java all of those types we put in our code and spend its time cultivating are all erased they",
    "start": "2387319",
    "end": "2393520"
  },
  {
    "text": "mean nothing at runtime which means that they all have to be object so there's no way you can do an array list of int or a",
    "start": "2393520",
    "end": "2400800"
  },
  {
    "text": "hash map of ins to ins uh without it being essentially boxed integer objects and you've got all that memory and",
    "start": "2400800",
    "end": "2406880"
  },
  {
    "text": "allocation overhead to go with it while in Java 9 they actually have prototypes now of full-on primitive specialization",
    "start": "2406880",
    "end": "2414319"
  },
  {
    "text": "of Collections and the way it does is again through invoke Dynamics if you want to instantiate a collection uh that",
    "start": "2414319",
    "end": "2421280"
  },
  {
    "text": "is normally generified to object but you want to instantiate it with one of the Primitive types then that becomes a an",
    "start": "2421280",
    "end": "2427599"
  },
  {
    "text": "invoke Dynamic the invoke Dynamic goes out and says okay I don't know what an array list of in yet is yet I'll",
    "start": "2427599",
    "end": "2433359"
  },
  {
    "text": "generate that class at runtime so I have an array list of int that's actually an in Array that actually has int arguments",
    "start": "2433359",
    "end": "2440119"
  },
  {
    "text": "and that's what you get back it fulfills the contract of all the code you want it to run with you can do int operations",
    "start": "2440119",
    "end": "2446480"
  },
  {
    "text": "without any allocation but it's all generated behind the scenes when invoke Dynamic hits it really cool",
    "start": "2446480",
    "end": "2453480"
  },
  {
    "text": "stuff um so where else are we going with this uh we're working to kind of pre- optimize more of our code above invoke",
    "start": "2453480",
    "end": "2459640"
  },
  {
    "text": "Dynamic rather than leaning on it for everything uh use it for the important parts of jruby uh invoke Dynamic does",
    "start": "2459640",
    "end": "2466079"
  },
  {
    "text": "have a bit of a dynamic cost as you might expect it's not statically optimized so it has to run code before",
    "start": "2466079",
    "end": "2471880"
  },
  {
    "text": "it can run code there's a bootstrap time there's startup time issues that you have to deal with uh so we want to use",
    "start": "2471880",
    "end": "2477280"
  },
  {
    "text": "it um where it's really useful and where it's really important the jbm folks are working on the startup issues and",
    "start": "2477280",
    "end": "2482920"
  },
  {
    "text": "complexity issues behind the scenes try to figure out how to optimize this share more of the the method handles share",
    "start": "2482920",
    "end": "2489359"
  },
  {
    "text": "more of the functions behind the scenes uh but there's also this opening question about what about languages not",
    "start": "2489359",
    "end": "2495560"
  },
  {
    "text": "on the jvm uh there are crypto libraries there are message cues and databases out",
    "start": "2495560",
    "end": "2501000"
  },
  {
    "text": "there uh that we don't necessarily want to wait for someone to write a full job implementation of that library or of of",
    "start": "2501000",
    "end": "2506880"
  },
  {
    "text": "the clients we want to be able to use the same reddis client or the same zeromq client that the rest of the folks",
    "start": "2506880",
    "end": "2513280"
  },
  {
    "text": "in the organization writing Ruby or python are using um so that's the second area I want to talk about and this is",
    "start": "2513280",
    "end": "2518800"
  },
  {
    "text": "one I've been working on directly and trying to push forward native interop is a is a more first class concept at the",
    "start": "2518800",
    "end": "2525079"
  },
  {
    "text": "jvm level uh so if we look at the world we live in here the bubble again of the jvm",
    "start": "2525079",
    "end": "2531720"
  },
  {
    "text": "that we live in we've got our jvm up here we've got all this cool native stuff that we'd like to be able to use",
    "start": "2531720",
    "end": "2537319"
  },
  {
    "text": "and some of it's not even that cool it's like Sim links we didn't have SIM links for years um we still are have sort of",
    "start": "2537319",
    "end": "2543559"
  },
  {
    "text": "limited file system metadata um every time a new operating system version comes out there's operating system level",
    "start": "2543559",
    "end": "2549640"
  },
  {
    "text": "features that we just can't do we just can't do them we have to write some J Andi code or something to do it uh we",
    "start": "2549640",
    "end": "2556119"
  },
  {
    "text": "want a better bridge between these two worlds so that as the platforms we run on evolve and the libraries that people",
    "start": "2556119",
    "end": "2562280"
  },
  {
    "text": "use and the databases people use evolve we can use them immediately in the jbm world so there's something missing here",
    "start": "2562280",
    "end": "2568640"
  },
  {
    "text": "in the middle uh this is a quote from John Rose he is the uh jvm architect now at Oracle",
    "start": "2568640",
    "end": "2575359"
  },
  {
    "text": "uh pushing it forward and deciding on the new features and he's really excited about inter and making this seamless on",
    "start": "2575359",
    "end": "2581680"
  },
  {
    "text": "the jbm and I like this quote I think it's absolutely true and and this is",
    "start": "2581680",
    "end": "2587079"
  },
  {
    "text": "this is something that we have uh we put blinders on we've hidden we you know put our head in the sand when these",
    "start": "2587079",
    "end": "2593040"
  },
  {
    "text": "libraries came up and these cool things in the native world we wanted to be able to use or just other language run times",
    "start": "2593040",
    "end": "2598520"
  },
  {
    "text": "that we wanted to be able to call out to couldn't do it very easily we just ignored it for so many years uh we'll",
    "start": "2598520",
    "end": "2605079"
  },
  {
    "text": "boil us down to something very simple what if we're just want to manage the process and get the process ID from",
    "start": "2605079",
    "end": "2610880"
  },
  {
    "text": "within the process so an application a server starts up it dumps a process ID out to a file and we've got God or",
    "start": "2610880",
    "end": "2617599"
  },
  {
    "text": "monitor or something that can then look at that file and know what processes we have available do some system level management you can't do this on the JDM",
    "start": "2617599",
    "end": "2625880"
  },
  {
    "text": "it's not possible to get your own process ID and actually if you if you if you go and look on stack Overflow or",
    "start": "2625880",
    "end": "2631680"
  },
  {
    "text": "anywhere else the recommended solutions for this are to go into like some internal jvm API and there's a string",
    "start": "2631680",
    "end": "2638720"
  },
  {
    "text": "that happens to have the PID in it and if you parse that string and chop the pieces off you can get the PID of the",
    "start": "2638720",
    "end": "2644720"
  },
  {
    "text": "current process until they change the format of that string or whatever else it's nonsense that we can't this is this",
    "start": "2644720",
    "end": "2650400"
  },
  {
    "text": "is a trivial call it returns an INT it takes no arguments and we can't do that so that's that there's an obvious Gap",
    "start": "2650400",
    "end": "2656720"
  },
  {
    "text": "here for just basic things um here here's the the function prototype for this a PID T is generally",
    "start": "2656720",
    "end": "2662559"
  },
  {
    "text": "just an unsigned integer on pretty much every platform this should be easy to do we should be able to say I want to call",
    "start": "2662559",
    "end": "2668640"
  },
  {
    "text": "a simple function that gives me an INT do it and not have any of the nonsense so let's see how we actually do this in",
    "start": "2668640",
    "end": "2674960"
  },
  {
    "text": "traditional Java has anybody done jni before I think it's the same hands for the inv pretty close uh about the same",
    "start": "2674960",
    "end": "2681839"
  },
  {
    "text": "number of hands don't it's horrible you really don't want to do it ask one of",
    "start": "2681839",
    "end": "2687240"
  },
  {
    "text": "these guys to do it if you have to do it let's look at what it looks like in J Andi so in J and I we've got our user",
    "start": "2687240",
    "end": "2692960"
  },
  {
    "text": "code at the top that needs to make some get bid call uh we have the actual get PID endpoint function prototype on the",
    "start": "2692960",
    "end": "2701359"
  },
  {
    "text": "Java side there's some C implementation on the other side that represents the C code that makes the the get pit call for",
    "start": "2701359",
    "end": "2707960"
  },
  {
    "text": "us and then the target Library which we didn't correct Li C or whatever uh and this is deceptively easy",
    "start": "2707960",
    "end": "2714440"
  },
  {
    "text": "to begin with you look at this and you're like okay get pit stick native on it sweet it's done right I can call it",
    "start": "2714440",
    "end": "2720920"
  },
  {
    "text": "get pit now well it's not quite that simple um we also need to generate the header file that goes along with it and",
    "start": "2720920",
    "end": "2727280"
  },
  {
    "text": "obviously for get PID this is this is about as simple as it's going to get as far as the header file and it just gets",
    "start": "2727280",
    "end": "2733280"
  },
  {
    "text": "crazier from here uh not to mention all of the jni apis and having you know all their nuances uh all the different ways",
    "start": "2733280",
    "end": "2739839"
  },
  {
    "text": "of invoking back and forth between jni and C pretty heinous stuff uh the",
    "start": "2739839",
    "end": "2744920"
  },
  {
    "text": "implementation isn't particularly bad except for the incredibly Long Function prototype here uh that has to match",
    "start": "2744920",
    "end": "2751480"
  },
  {
    "text": "exactly the symbol has to match the the the package name I you know this this is all most of this is generated but you",
    "start": "2751480",
    "end": "2757720"
  },
  {
    "text": "have to make sure these match up as you evolve your code over time if you move code and refactor it on the Java side",
    "start": "2757720",
    "end": "2763119"
  },
  {
    "text": "this all breaks again it's just a nightmare so assume that you've got all this in place and you've managed to get",
    "start": "2763119",
    "end": "2768720"
  },
  {
    "text": "your jni library to compile and it works uh well somebody else is going to have to compile this library and they're",
    "start": "2768720",
    "end": "2774200"
  },
  {
    "text": "going to have to figure out all these flags and it took me like you know 20 minutes to to look up and figure out all the different libraries on o 10 I needed",
    "start": "2774200",
    "end": "2781920"
  },
  {
    "text": "uh which headers were were where try to get this stuff to compile right and and then I have no idea like what what it's",
    "start": "2781920",
    "end": "2787400"
  },
  {
    "text": "going to be on open vsd or something if somebody going to run the same thing elsewhere you have to do this for every",
    "start": "2787400",
    "end": "2792800"
  },
  {
    "text": "platform and build it yourself and ship binaries or you need to have a build process that your users go through to",
    "start": "2792800",
    "end": "2799480"
  },
  {
    "text": "build this Library it's silly it makes no sense we should be living within this managed world and just send them a jar",
    "start": "2799480",
    "end": "2805640"
  },
  {
    "text": "and they're done right so there must be a better way and there is a better way",
    "start": "2805640",
    "end": "2811160"
  },
  {
    "text": "uh the problem here is that we're writing on both sides of this line that's the real issue we have to write",
    "start": "2811160",
    "end": "2816640"
  },
  {
    "text": "all the Java code that goes with it but we're not done there we actually have to do even more heavy lifting and no C and",
    "start": "2816640",
    "end": "2822359"
  },
  {
    "text": "like really no C if you've ever for the folks that have done J and I you really have to know how C works and how these",
    "start": "2822359",
    "end": "2828040"
  },
  {
    "text": "references and pointers are being passed around this is not just I'm going to write a couple lines of code like I did in the University this is hard stuff and",
    "start": "2828040",
    "end": "2835400"
  },
  {
    "text": "so nobody does this nobody wants to do this and they kind of knew that when they came up with J Andi that no one's going to want to do it they kept it from",
    "start": "2835400",
    "end": "2841079"
  },
  {
    "text": "being uh like like C Ruby with all the extensions right uh but we want to do better",
    "start": "2841079",
    "end": "2846440"
  },
  {
    "text": "so ideally what we want is just to write our user code we say we want to make a",
    "start": "2846440",
    "end": "2851720"
  },
  {
    "text": "native call and it makes it it does it for us everything from there down should",
    "start": "2851720",
    "end": "2856800"
  },
  {
    "text": "either be generated or already exist uh and that's what we get out of J&R the Java native runtime so Java native",
    "start": "2856800",
    "end": "2864400"
  },
  {
    "text": "runtime is just a Java API uh for calling native functions native libraries and N allocating native memory",
    "start": "2864400",
    "end": "2870520"
  },
  {
    "text": "and so on uh it has a bunch of runtime libraries that support it uh for uh",
    "start": "2870520",
    "end": "2876599"
  },
  {
    "text": "pre-bound libraries we're doing specific types of libraries uh some of you may have used jna before you may be using",
    "start": "2876599",
    "end": "2883000"
  },
  {
    "text": "jna now same basic thing at the core Library level uh but we've made a lot of",
    "start": "2883000",
    "end": "2888119"
  },
  {
    "text": "improvements over time uh and you'll you'll see this term ffi a lot uh",
    "start": "2888119",
    "end": "2893240"
  },
  {
    "text": "foreign function interface uh this is essentially what we're talking about being able to call out to foreign functions functions that are not part of",
    "start": "2893240",
    "end": "2899680"
  },
  {
    "text": "the rest of the jbm they live in some Library some language that is outside the platform uh the the J&R organization",
    "start": "2899680",
    "end": "2907880"
  },
  {
    "text": "on GitHub has all the projects that I'll show you here so in jnr this is our entire get",
    "start": "2907880",
    "end": "2914960"
  },
  {
    "text": "PID implementation there's no C code there's no header files to generate there's nothing to build across",
    "start": "2914960",
    "end": "2920119"
  },
  {
    "text": "platforms even we get all of this for free um and all we have to do essentially is say we",
    "start": "2920119",
    "end": "2926079"
  },
  {
    "text": "want the get PID call which we know takes is going to return a an unsigned integer we represent that as a Java long",
    "start": "2926079",
    "end": "2932480"
  },
  {
    "text": "so we have the full 32-bit unsigned integer range uh and then we get a library loader we create a new instance",
    "start": "2932480",
    "end": "2939319"
  },
  {
    "text": "of that loader for our get pit interface and then say what the library is we want to load it'll prefix lib or whatever on",
    "start": "2939319",
    "end": "2946040"
  },
  {
    "text": "it so this is lib C that's where we get get PID from and then we can call it and that's all there is to it we don't have",
    "start": "2946040",
    "end": "2951240"
  },
  {
    "text": "to write the J and I code this is much better right this is what we want out of a native interface um so I mentioned",
    "start": "2951240",
    "end": "2957400"
  },
  {
    "text": "there's a native runtime uh lots of different libraries that I'm going to cover some of these in brief",
    "start": "2957400",
    "end": "2962960"
  },
  {
    "text": "here uh first of all I mentioned that we don't have to rec compile there's no build time that you have to do to",
    "start": "2962960",
    "end": "2968240"
  },
  {
    "text": "support these native calls on different platforms and that's because we have done that that nasty work of",
    "start": "2968240",
    "end": "2973720"
  },
  {
    "text": "pre-building this stuff uh J&R the the core libraryies ji at the very bottom",
    "start": "2973720",
    "end": "2980040"
  },
  {
    "text": "that's the the the last library that actually lives within the JDM uh and that that ships with binary support for",
    "start": "2980040",
    "end": "2986160"
  },
  {
    "text": "all of these platforms here any platforms that aren't on here that someone's using any I got a really weird",
    "start": "2986160",
    "end": "2992960"
  },
  {
    "text": "one that I haven't done yet I I think I think we have open open vmn open VMS and",
    "start": "2992960",
    "end": "2998920"
  },
  {
    "text": "as400 bills which is pretty impressive that we actually Dragon flly DD Dragon BSD I don't have a build for",
    "start": "2998920",
    "end": "3004760"
  },
  {
    "text": "that but that but any of the bsds would probably be pretty easy to support um we don't have arm 64 on here but that's",
    "start": "3004760",
    "end": "3011200"
  },
  {
    "text": "pretty much because nobody has an arm 64 they can build it on right now um but",
    "start": "3011200",
    "end": "3016480"
  },
  {
    "text": "like arm support for Linux should work with Android so we got we got pretty much every platform that you want to run",
    "start": "3016480",
    "end": "3021880"
  },
  {
    "text": "on and several that you really don't want to run on are covered here and you don't have to write your own native code",
    "start": "3021880",
    "end": "3028119"
  },
  {
    "text": "just use our library this is in Maven like you can put this as a maven dependency it pulls pulls down the",
    "start": "3028119",
    "end": "3033200"
  },
  {
    "text": "native jar unpacks the library to where it needs to and you're good to go so and",
    "start": "3033200",
    "end": "3038480"
  },
  {
    "text": "if there something that's missing let me know we can add it to this really easy uh so you're not going to use that low-l",
    "start": "3038480",
    "end": "3043680"
  },
  {
    "text": "Library that's just like invokes some raw function pointer with some raw function memory you know um so you're",
    "start": "3043680",
    "end": "3049200"
  },
  {
    "text": "not going to deal with that jnr ffi though is the user facing API this is kind of the basic one that you might be",
    "start": "3049200",
    "end": "3055200"
  },
  {
    "text": "uh us in the future uh this is roughly equivalent to what you get in jna where you say I've got a function here's its",
    "start": "3055200",
    "end": "3061640"
  },
  {
    "text": "parameters here's how they look and see and here's the library it comes from bind it all for me and let me call it uh",
    "start": "3061640",
    "end": "3068119"
  },
  {
    "text": "and of course I mentioned structures you can do structure layouts here's my structure but these many bits are this type those many bits are that type and",
    "start": "3068119",
    "end": "3074760"
  },
  {
    "text": "it Maps them into Java and back and forth um and then just raw native memory access being able to do a Mal and a free",
    "start": "3074760",
    "end": "3081119"
  },
  {
    "text": "from java code there are lots of cases where you actually need to be able to do that so I won't go into the details of",
    "start": "3081119",
    "end": "3086960"
  },
  {
    "text": "jnr ffi you can kind of imagine what it would look like if you writing basically C client code in Java that's essentially",
    "start": "3086960",
    "end": "3094040"
  },
  {
    "text": "what it does uh J&R posix we recognized that there were a ton of functions that",
    "start": "3094040",
    "end": "3099240"
  },
  {
    "text": "everybody was going to bind um essentially all of posix somebody's going to need one of those things at some point Sim links or uh um exac or",
    "start": "3099240",
    "end": "3108000"
  },
  {
    "text": "get PID or whatever uh so we've we've been slowly adding to a corpus of functions pre-bound versions of POS",
    "start": "3108000",
    "end": "3115520"
  },
  {
    "text": "libraries posic functions across several different platforms mostly the the the primary platform supported BSD Linux",
    "start": "3115520",
    "end": "3122079"
  },
  {
    "text": "Solaris and then the ones that work on windows are also in there uh and it's largely been driven by what J Ruby and",
    "start": "3122079",
    "end": "3128000"
  },
  {
    "text": "jython have needed so a lot of people use Ruby for system level scripting so we've got a lot of file system apis that",
    "start": "3128000",
    "end": "3134079"
  },
  {
    "text": "are bound um now J Ruby is using uh a lot of native file descriptors native",
    "start": "3134079",
    "end": "3139720"
  },
  {
    "text": "Native uh IO channels uh so we've got a lot of things for opening raw sockets and opening raw channels and soell on",
    "start": "3139720",
    "end": "3146119"
  },
  {
    "text": "within this Library the goal is to basically have 100% of posix bound to this Library so",
    "start": "3146119",
    "end": "3152079"
  },
  {
    "text": "you can just load it up and essentially have lib C from java like just like that done and and most of what you're going",
    "start": "3152079",
    "end": "3157920"
  },
  {
    "text": "to need is probably already there uh this is a small subset of what",
    "start": "3157920",
    "end": "3163119"
  },
  {
    "text": "we have uh again a little small on these screens but some interesting ones uh so",
    "start": "3163119",
    "end": "3168319"
  },
  {
    "text": "get pit is up here exec at the top CH mod CH own stuff that you still can't do",
    "start": "3168319",
    "end": "3174599"
  },
  {
    "text": "100% of with blessed Java API actually modifying the uh environment of the",
    "start": "3174599",
    "end": "3181359"
  },
  {
    "text": "process so the child processes will see that environment uh down at the B posic spawn that gives you an actually a good",
    "start": "3181359",
    "end": "3189119"
  },
  {
    "text": "version of process Builder rather than the hacky uh broken one that we have to deal with these days uh lots of stuff",
    "start": "3189119",
    "end": "3195480"
  },
  {
    "text": "here and again I say this is this is a lot of there only a subset I think Fork is bound at the top and really really",
    "start": "3195480",
    "end": "3203480"
  },
  {
    "text": "crashes the VM impressively that is not one that you want to use for for anything uh the the jbm has way too",
    "start": "3203480",
    "end": "3210040"
  },
  {
    "text": "many threads way too many signals going on Fork is is up like just stabbing it",
    "start": "3210040",
    "end": "3215559"
  },
  {
    "text": "in the eye it just dies very impressively um this is all you need to do you you pull the library in as a",
    "start": "3215559",
    "end": "3221559"
  },
  {
    "text": "maven artifact or as however however you do your dependencies and then run this uh my posix Handler just has a few",
    "start": "3221559",
    "end": "3227920"
  },
  {
    "text": "functions do I have that no my posx Handler basically says uh when I get an error like a negative one response at",
    "start": "3227920",
    "end": "3234640"
  },
  {
    "text": "the ca level do you want me to just return that response so you can look it up or do you want an exception call",
    "start": "3234640",
    "end": "3240319"
  },
  {
    "text": "backs for that sort of thing how do you want errors handled um there also is a a concept of a the current working",
    "start": "3240319",
    "end": "3247880"
  },
  {
    "text": "directory a lot of C functions will want to well at least a few C functions will want to change the directory of the",
    "start": "3247880",
    "end": "3253520"
  },
  {
    "text": "whole process obviously not a good thing to do if you're running in a multi-tenant environment uh so there's a",
    "start": "3253520",
    "end": "3259240"
  },
  {
    "text": "simulated current working directory that's part of J&R posits um so on top of some of this",
    "start": "3259240",
    "end": "3265200"
  },
  {
    "text": "we've built other libraries obviously once we have the core underpinnings of posix and lib C there's more cool stuff",
    "start": "3265200",
    "end": "3271040"
  },
  {
    "text": "that we can do uh an En xio is the next one Java extended native crossplatform",
    "start": "3271040",
    "end": "3277079"
  },
  {
    "text": "IO uh it's a very long and complicated name it basically just means ni channels",
    "start": "3277079",
    "end": "3283200"
  },
  {
    "text": "that wrap a raw file descriptor so any file descriptor you can get from any any place out there standard IO Unix sockets",
    "start": "3283200",
    "end": "3290680"
  },
  {
    "text": "weird weird socket types uh you can wrap it in a standard n Channel select on it",
    "start": "3290680",
    "end": "3296599"
  },
  {
    "text": "do all the things you're used to doing with regular n but it's it's those raw channels um here's an example of the uh",
    "start": "3296599",
    "end": "3304960"
  },
  {
    "text": "Native socket channel for if you're doing a like a raw socket a socket type that the jbm doesn't support like a Unix",
    "start": "3304960",
    "end": "3311040"
  },
  {
    "text": "socket for example uh you get that file the scriptor probably through a a socket call at the uh libc level pass it in",
    "start": "3311040",
    "end": "3318720"
  },
  {
    "text": "here and then from then on it's just the channel it's selectable it's interruptable it's got all the features you expect out of nio but it can be any",
    "start": "3318720",
    "end": "3325720"
  },
  {
    "text": "native descriptor and then of course on top of that I mentioned Unix sockets a VI time we do have J&R Unix socket as a library",
    "start": "3325720",
    "end": "3332680"
  },
  {
    "text": "that you can pull in um if you have an environment where you want to keep your postgress or MySQL local to that system",
    "start": "3332680",
    "end": "3340200"
  },
  {
    "text": "you don't want to open up TCP ports for various reasons uh you can actually do Unix sockets locally and have it be",
    "start": "3340200",
    "end": "3346760"
  },
  {
    "text": "totally secure and potentially a little bit faster because it's not doing all the TCP protocol overhead stuff like",
    "start": "3346760",
    "end": "3352640"
  },
  {
    "text": "that very easy to build on top of these libraries so what are other things we can do with this uh well obviously with Native IO",
    "start": "3352640",
    "end": "3359440"
  },
  {
    "text": "Sim links we've got all of the stuff that was in added in nio2 and more um",
    "start": "3359440",
    "end": "3364520"
  },
  {
    "text": "file system walking file system event apis uh just managing unmanaged memory",
    "start": "3364520",
    "end": "3370680"
  },
  {
    "text": "so you not taking up a lot of garbage collector Heap space um selectable standard IO and subprocess IO you can't",
    "start": "3370680",
    "end": "3377319"
  },
  {
    "text": "do that on the jbm right now you can't grab system.in and wait for input on it",
    "start": "3377319",
    "end": "3384319"
  },
  {
    "text": "you can spit and hope that somebody will eventually put input but you can't do like a native",
    "start": "3384319",
    "end": "3389400"
  },
  {
    "text": "system level select on a a standard in which really sucks it even sucks more when you're trying to manage a",
    "start": "3389400",
    "end": "3395200"
  },
  {
    "text": "subprocess and you're feeding it some data and waiting for some data to come back you got to spin up a thread that",
    "start": "3395200",
    "end": "3400559"
  },
  {
    "text": "essentially blocks on that API it's gross all the stuff you can do with en",
    "start": "3400559",
    "end": "3405839"
  },
  {
    "text": "xio and it's much cleaner um I mentioned different un so or different socket types that we can't have access to",
    "start": "3405839",
    "end": "3411400"
  },
  {
    "text": "normally uh and then new apis graphics apis crypto apis operating system",
    "start": "3411400",
    "end": "3416880"
  },
  {
    "text": "features stuff that we'd have to wait for the jbm gods to eventually add as a",
    "start": "3416880",
    "end": "3422160"
  },
  {
    "text": "feature to the jdk we can just go and do anytime we want so that's pretty",
    "start": "3422160",
    "end": "3427640"
  },
  {
    "text": "cool um I got to talk a little bit about performance because this is one of the big things that we enhanced above and",
    "start": "3427640",
    "end": "3432680"
  },
  {
    "text": "beyond jna uh so for per performance we've done a lot of work to make jnr as fast as",
    "start": "3432680",
    "end": "3438359"
  },
  {
    "text": "possible uh all the code leading up to the actual native side is generated so",
    "start": "3438359",
    "end": "3443640"
  },
  {
    "text": "that it's at least like one hop one or two hops at most uh",
    "start": "3443640",
    "end": "3449359"
  },
  {
    "text": "on the jni side we actually generate the assembly code that goes from the jvm to your target function only doing the",
    "start": "3449359",
    "end": "3455960"
  },
  {
    "text": "overhead only doing the uh object management GC calls and whatnot that are",
    "start": "3455960",
    "end": "3461160"
  },
  {
    "text": "necessary for this particular implication uh and then the two sides come",
    "start": "3461160",
    "end": "3466559"
  },
  {
    "text": "together actually about as fast as you can get without removing jni from the equation altogether we still do have to",
    "start": "3466559",
    "end": "3472280"
  },
  {
    "text": "call through jni because that's the standard interface uh to do Native calls uh and I got to show some numbers",
    "start": "3472280",
    "end": "3478280"
  },
  {
    "text": "of course so this is jna versus J&R who has used jna before the Java native",
    "start": "3478280",
    "end": "3483400"
  },
  {
    "text": "access Library okay there's a few folks a lot of folks ended up turning away from it early on because the performance",
    "start": "3483400",
    "end": "3488640"
  },
  {
    "text": "was so bad uh and you'll notice this is a log 10 scale here so J&R is roughly 10",
    "start": "3488640",
    "end": "3494880"
  },
  {
    "text": "times faster than jna at calling down to a trivial C function uh we can even make",
    "start": "3494880",
    "end": "3500359"
  },
  {
    "text": "it a little bit better if you don't care about the AO the C Level error the comes out of a function you can tell jna or",
    "start": "3500359",
    "end": "3507200"
  },
  {
    "text": "J&R don't save that don't capture that for me it stores it in the thread local so that you can retrieve it later uh",
    "start": "3507200",
    "end": "3514039"
  },
  {
    "text": "just throw that away and then you get like another 20 25% Improvement on top of",
    "start": "3514039",
    "end": "3519440"
  },
  {
    "text": "that uh and then comparing this with the rest of the world out there here's our two J&R numbers uh the jni numbers are",
    "start": "3519440",
    "end": "3527240"
  },
  {
    "text": "actually the circles here we're doing better than writing this jni by hand and",
    "start": "3527240",
    "end": "3532920"
  },
  {
    "text": "I ran these numbers over and over over again and couldn't figure out why since we're actually doing J Andi calls how",
    "start": "3532920",
    "end": "3539359"
  },
  {
    "text": "could we possibly be faster the only thing I think is that the assembly that we're generating on the jni side",
    "start": "3539359",
    "end": "3545039"
  },
  {
    "text": "actually cuts out some of the call stack call protocol overhead that You' normally have with plain C code uh and",
    "start": "3545039",
    "end": "3552039"
  },
  {
    "text": "is able to make that direct call much more quickly but so it's it's safe to say we're at least on par with jni as",
    "start": "3552039",
    "end": "3559079"
  },
  {
    "text": "far as doing native calls uh from java code uh now of course the X's along the bottom that is GCC doing the same call",
    "start": "3559079",
    "end": "3565880"
  },
  {
    "text": "to get pin in some cases this may completely optimize a way it seems to be doing some work here uh so there's more",
    "start": "3565880",
    "end": "3572079"
  },
  {
    "text": "work to be done and this is where jbm Futures come in uh so project Panama is",
    "start": "3572079",
    "end": "3577359"
  },
  {
    "text": "a project I'm involved with this is my jet that I propose Jeep is a jdk",
    "start": "3577359",
    "end": "3582559"
  },
  {
    "text": "enhancement proposal that's for internal apis or internal changes to open jdk",
    "start": "3582559",
    "end": "3588079"
  },
  {
    "text": "that may or may not have a public API at some point uh so jet 191 is essentially",
    "start": "3588079",
    "end": "3593160"
  },
  {
    "text": "adding ffi at the jvm level and that means in the bones of the jvm the jit",
    "start": "3593160",
    "end": "3599400"
  },
  {
    "text": "knows about this and can optimize it down to direct calls uh the class libraries will know about it uh we'll",
    "start": "3599400",
    "end": "3604799"
  },
  {
    "text": "start to implement things like nio on top of this ffi support rather than having this Big Blob of C++ code to deal",
    "start": "3604799",
    "end": "3611960"
  },
  {
    "text": "with all the time we can just write it in Java and use these libraries uh so",
    "start": "3611960",
    "end": "3617559"
  },
  {
    "text": "it's moving along uh some of the newer features that have been proposed is having a native function pointer method",
    "start": "3617559",
    "end": "3623280"
  },
  {
    "text": "handle like from in Dynamic you'll have a method handle that essentially represents a c call and then you can put",
    "start": "3623280",
    "end": "3629119"
  },
  {
    "text": "that anywhere you can stick it into a call site you can pass it to someone else but it is just a c function pointer that you call from java so all the same",
    "start": "3629119",
    "end": "3636240"
  },
  {
    "text": "Freedom we have with Java Reflection in Native calls and then native memory",
    "start": "3636240",
    "end": "3641359"
  },
  {
    "text": "layout manipulation all these things dovetail together we've got uh the need",
    "start": "3641359",
    "end": "3646400"
  },
  {
    "text": "to be able to layout structs in a specific memory orientation to call out to see functions and at the same time",
    "start": "3646400",
    "end": "3652640"
  },
  {
    "text": "all the people that are worried about concurrency and C locality uh want to be able to lay out uh vectors and lay out",
    "start": "3652640",
    "end": "3659280"
  },
  {
    "text": "uh heterogeneous arrays so that they're not doing multiple hops in memory all",
    "start": "3659280",
    "end": "3664599"
  },
  {
    "text": "this stuff kind of plays together as having a better native story integrating with the platform better and so hopefully Panama will bring us a lot",
    "start": "3664599",
    "end": "3671039"
  },
  {
    "text": "closer to having that uh now the third area the final area I want to talk about is is the most",
    "start": "3671039",
    "end": "3677480"
  },
  {
    "text": "wild and experimental area that's happening on the jvm right now uh it's the the projects out of Oracle Labs uh",
    "start": "3677480",
    "end": "3683839"
  },
  {
    "text": "grow and truffle so if we look at traditional jvm and what we have here we've got our our",
    "start": "3683839",
    "end": "3689799"
  },
  {
    "text": "jvm language that we've it's maybe it's just Java or maybe we're running Ruby or closure but it's it's we're we control",
    "start": "3689799",
    "end": "3696039"
  },
  {
    "text": "that we can decide how it's optimized and what the language features at that level are uh that probably is going to",
    "start": "3696039",
    "end": "3702319"
  },
  {
    "text": "emit jbm bite code at some point because that's the way we're going to get the best performance out of the jbm we feed",
    "start": "3702319",
    "end": "3707599"
  },
  {
    "text": "it bite code the jit takes spins on it and gives us something good but after that we can't really control anything",
    "start": "3707599",
    "end": "3715240"
  },
  {
    "text": "and that's that's our black box over here this is all that C++ that's hidden under the covers of the VM stuff that we",
    "start": "3715240",
    "end": "3722559"
  },
  {
    "text": "can't we can tweak it through Flags but we can't directly say okay this is this is a ruby Dynamic call it's it's okay",
    "start": "3722559",
    "end": "3728559"
  },
  {
    "text": "for you to optimize this check away or that check away we can't be explicit about it or this Ruby string is only",
    "start": "3728559",
    "end": "3734559"
  },
  {
    "text": "going to be used for this method call uh just use the string data just don't",
    "start": "3734559",
    "end": "3739839"
  },
  {
    "text": "don't actually allocate the object allocate It On The Stack optimize it like you would if you were going to write it right in C for example we can't",
    "start": "3739839",
    "end": "3746160"
  },
  {
    "text": "do any of that with current jbms and that's been a challenge for us we've found various tricks but it's still it's",
    "start": "3746160",
    "end": "3753079"
  },
  {
    "text": "like writing our code to hotspot trying to figure out how to structure our code",
    "start": "3753079",
    "end": "3758240"
  },
  {
    "text": "so that it fits directly into that slot that's going to optimize well it's too hard and it's",
    "start": "3758240",
    "end": "3763480"
  },
  {
    "text": "fragile so what if the jit itself and the bik code and all that stuff that",
    "start": "3763480",
    "end": "3768559"
  },
  {
    "text": "happens in that C++ part was also just written in Java and it was just an API we could call out to and we could tweak",
    "start": "3768559",
    "end": "3775119"
  },
  {
    "text": "it and we could change some of the language semantics we could uh tell it how to do better memory layout or avoid",
    "start": "3775119",
    "end": "3781200"
  },
  {
    "text": "object allocations all together in certain cases uh we could make Native calls directly when we compile this when",
    "start": "3781200",
    "end": "3787440"
  },
  {
    "text": "it jits down to assembly code we'd actually be able to do a direct call into C rather than having all the jni",
    "start": "3787440",
    "end": "3793160"
  },
  {
    "text": "overhead on top of it so what if we could do this well that's essentially what growl is grow is a 100% Java based",
    "start": "3793160",
    "end": "3801599"
  },
  {
    "text": "jit it runs on top of the jbm it can native code for various platforms the",
    "start": "3801599",
    "end": "3806839"
  },
  {
    "text": "assembler that it uses is also written in pure Java so 100% Java jit all the way down to assembly um if anybody's",
    "start": "3806839",
    "end": "3813880"
  },
  {
    "text": "ever looked at other pure Java VMS like Maxine uh Maxine was the",
    "start": "3813880",
    "end": "3820640"
  },
  {
    "text": "the uh incubator for several projects includ including Gro the jit framework",
    "start": "3820640",
    "end": "3826760"
  },
  {
    "text": "that came out of it um I mentioned it emits assembly it can also emit the intermediate",
    "start": "3826760",
    "end": "3832240"
  },
  {
    "text": "representation that hotspot itself uses so if Hotpot is maybe better at allocating the right number of registers",
    "start": "3832240",
    "end": "3839440"
  },
  {
    "text": "deciding on memory layouts or deciding on how to allocate objects growl can emit hotspot IR essentially hotspot",
    "start": "3839440",
    "end": "3846599"
  },
  {
    "text": "assembly and then it continues on with the rest of the optimization pipeline uh but the important thing is that you can",
    "start": "3846599",
    "end": "3851760"
  },
  {
    "text": "Route Around jvm bite code which is kind of cumbersome at times if you want to optimize stuff and you can directly",
    "start": "3851760",
    "end": "3857520"
  },
  {
    "text": "control how all that code is generated you can essentially say I want a memory move from here to here I want to put",
    "start": "3857520",
    "end": "3863960"
  },
  {
    "text": "this object in a register and leave it there uh all these things that we can't do at the jbm bite code level we can do",
    "start": "3863960",
    "end": "3870200"
  },
  {
    "text": "with gr IR uh looking at this more graphically we've got our jbm language and we've",
    "start": "3870200",
    "end": "3875480"
  },
  {
    "text": "written that we control that we have our we emit grow immediate intermediate",
    "start": "3875480",
    "end": "3881079"
  },
  {
    "text": "representation rather than jvm bite code rather than go down to what the jvm knows we use this other form that's a",
    "start": "3881079",
    "end": "3886839"
  },
  {
    "text": "little bit more Rich uh and has platform specifics platform details memory locations and registers and so",
    "start": "3886839",
    "end": "3892839"
  },
  {
    "text": "on that over to the growl Optimizer again this is still all just Java code Java apis that we're",
    "start": "3892839",
    "end": "3899200"
  },
  {
    "text": "using uh and then our optimizations can plug into this whole process we can tell Gro how we want to optimize this",
    "start": "3899200",
    "end": "3905559"
  },
  {
    "text": "language if we want to change it from the usual semantics and then Gro will eventually emit that native code but we",
    "start": "3905559",
    "end": "3911319"
  },
  {
    "text": "control so much more of the process when we run on top of this library and on top of this platform uh that it's very",
    "start": "3911319",
    "end": "3918599"
  },
  {
    "text": "promising for languages uh now the problem here even though we control all this stuff is that the grow IR is pretty",
    "start": "3918599",
    "end": "3926400"
  },
  {
    "text": "dense if anyone's ever taken a compiler's course that has like a like three address form or an SSA form uh",
    "start": "3926400",
    "end": "3934200"
  },
  {
    "text": "this is this is complicated stuff to write and you need to be a compiler author to be able to emit this IR you",
    "start": "3934200",
    "end": "3940200"
  },
  {
    "text": "can do amazing stuff with it but you need to be a compiler compiler writer and a platform expert to know how you're",
    "start": "3940200",
    "end": "3945599"
  },
  {
    "text": "using the registers and memory in x86 so we don't want to have to do this for all of our stuff uh right so it's a lowlevel",
    "start": "3945599",
    "end": "3953079"
  },
  {
    "text": "very non-trivial you need send jbm internals as well when you need to call back up to the jbm to do gc's how it's",
    "start": "3953079",
    "end": "3959000"
  },
  {
    "text": "going to be moving objects around um pointer translation as the GC juggles stuff around it's too much for us to do",
    "start": "3959000",
    "end": "3965839"
  },
  {
    "text": "powerful Tool uh but maybe a little too powerful so the dream if we get back to",
    "start": "3965839",
    "end": "3970880"
  },
  {
    "text": "what we actually want here is that we design our language up at the top and then somehow we get we we just throw it",
    "start": "3970880",
    "end": "3977480"
  },
  {
    "text": "out there and it makes things work and it's fast and it's profitable and everyone wants to run it and it's the next greatest thing uh so the",
    "start": "3977480",
    "end": "3984240"
  },
  {
    "text": "intermediate steps here ideally this is all we should have to do write the",
    "start": "3984240",
    "end": "3989520"
  },
  {
    "text": "language semantics into a simple interpreter and we're done because everybody can do this everybody's",
    "start": "3989520",
    "end": "3995319"
  },
  {
    "text": "written an interpreter for even a small language at some point uh just you know something that walks through a very",
    "start": "3995319",
    "end": "4000680"
  },
  {
    "text": "trivial graph and and does something based on that graph you've written an interpreter now what if that could actually optimize and have its own jit",
    "start": "4000680",
    "end": "4007760"
  },
  {
    "text": "and be as fast as writing a native runtime for it uh and that's where truffle comes in so truffle is the the",
    "start": "4007760",
    "end": "4014119"
  },
  {
    "text": "other big project that's coming out of Oracle Labs right now it's a language framework built on top of growl so it",
    "start": "4014119",
    "end": "4019520"
  },
  {
    "text": "uses growl as its intermediate format as its back end rather than the jbm uh but this is truly designed to fulfill this",
    "start": "4019520",
    "end": "4027000"
  },
  {
    "text": "dream of getting a language to profit fast uh you implement your interpreter",
    "start": "4027000",
    "end": "4032400"
  },
  {
    "text": "you tag that interpreter with some annotations that say here's a fast integer path here's a fast 64-bit long",
    "start": "4032400",
    "end": "4038880"
  },
  {
    "text": "path um here's how you promote a long to a my numeric type and so on and then",
    "start": "4038880",
    "end": "4044960"
  },
  {
    "text": "truffle feeds that runs through that code a few times figures out how the actual application flows and then dumps",
    "start": "4044960",
    "end": "4051599"
  },
  {
    "text": "that to growl and it knows how to do all the growl stuff for you so you all you do is write an interpreter it traces",
    "start": "4051599",
    "end": "4058599"
  },
  {
    "text": "through it and figures out how to optimize it and you get a jit for free has anybody ever played with piie or",
    "start": "4058599",
    "end": "4063799"
  },
  {
    "text": "looked into piie again same sort of concept there the idea that you write an interpreter but the act of writing that",
    "start": "4063799",
    "end": "4070359"
  },
  {
    "text": "interpreter gives it enough information to write a jit too that's what we get with truffle and this is actually working",
    "start": "4070359",
    "end": "4076880"
  },
  {
    "text": "today so truffle all we need is over here on the left jbm language goes down to some a uh we've got some truffle",
    "start": "4076880",
    "end": "4084240"
  },
  {
    "text": "super classes we've got some truffle annotations to say how the application flows where the data flows through that",
    "start": "4084240",
    "end": "4089799"
  },
  {
    "text": "language what the semantics are and then it does all the rest of this for us turns it into growl intermediate growl",
    "start": "4089799",
    "end": "4096400"
  },
  {
    "text": "optimizes that turns it into native code and it's really impressive how well it works um so impressive that they're",
    "start": "4096400",
    "end": "4104440"
  },
  {
    "text": "actually doing Ruby implementation for us right now in J Ruby uh this is Chris seon he was uh brought in as an intern a",
    "start": "4104440",
    "end": "4113199"
  },
  {
    "text": "year and a half ago or so into Oracle Labs uh essentially just to work on a",
    "start": "4113199",
    "end": "4118359"
  },
  {
    "text": "prototype of a ruby implementation on top of trule to see what we could do see if we could solve the hard challenges of",
    "start": "4118359",
    "end": "4124838"
  },
  {
    "text": "implementing Ruby on top of this framework um and here are some of the early results that he has uh I I want to",
    "start": "4124839",
    "end": "4132159"
  },
  {
    "text": "say this is all this is research level Oracle Labs should be an indication that this is research um if I was at Oracle",
    "start": "4132159",
    "end": "4138520"
  },
  {
    "text": "I'd have a big disclaimer slide in front of it too uh but I'm not and of course this is the future so it's awesome and",
    "start": "4138520",
    "end": "4144318"
  },
  {
    "text": "buy this stuff it's great um but these are the numbers uh the Bottom's a little hard to see on the far left here we have",
    "start": "4144319",
    "end": "4151318"
  },
  {
    "text": "uh J Ruby 1.7 something running on invoke Dynamic so generally our best",
    "start": "4151319",
    "end": "4157080"
  },
  {
    "text": "performance that we can get generally the best performance that the Ruby Community can get right now as far as running applications uh the middle one",
    "start": "4157080",
    "end": "4165238"
  },
  {
    "text": "not as interesting this is Ruby on top of truffle without growl being in play so it's just The Interpreter just doing",
    "start": "4165239",
    "end": "4171520"
  },
  {
    "text": "all of its jvm level optimizations uh and they can get close to what we can do with Indie in some cases but they're",
    "start": "4171520",
    "end": "4177520"
  },
  {
    "text": "mostly slower the interesting one though is when truffle and Ruby run on top of growl we get 5 10 20% or 20 times",
    "start": "4177520",
    "end": "4186600"
  },
  {
    "text": "Improvement on performance on especially on things like numerics where truffle is very good at saying okay I don't",
    "start": "4186600",
    "end": "4193318"
  },
  {
    "text": "actually need a fully box number object here let's just pass the long through let's pass the int through the kind of",
    "start": "4193319",
    "end": "4200080"
  },
  {
    "text": "stuff that's forced languages like groovy enclosure to add primitive types integer and long and whatnot into their",
    "start": "4200080",
    "end": "4206040"
  },
  {
    "text": "function declarations we don't have to do because truffle can see through that yeah I'm not clear what do the numbers",
    "start": "4206040",
    "end": "4211920"
  },
  {
    "text": "mean on this the numbers here are number of times faster uh J Ruby with an invoke Dynamic is uh Baseline",
    "start": "4211920",
    "end": "4219080"
  },
  {
    "text": "one and so we're talking 20 times faster on the handle BR Benchmark which is all",
    "start": "4219080",
    "end": "4226600"
  },
  {
    "text": "uh 64-bit decimal we have to turn those into objects there's a crapload of them",
    "start": "4226600",
    "end": "4231880"
  },
  {
    "text": "being spun at runtime and the and the jvm just doesn't see through that well enough truffle actually can truffle will",
    "start": "4231880",
    "end": "4238800"
  },
  {
    "text": "see that all you're ever doing is plain old 64-bit double operations here let's",
    "start": "4238800",
    "end": "4244000"
  },
  {
    "text": "not allocate the object let's just use the raw B raw bits and they're able to get this kind of performance Improvement",
    "start": "4244000",
    "end": "4249600"
  },
  {
    "text": "out of it very cool stuff um so I mentioned that Ruby",
    "start": "4249600",
    "end": "4254760"
  },
  {
    "text": "truffle is now part of J Ruby we saw this presented in 2013 at the jvm language Summit and we were really",
    "start": "4254760",
    "end": "4261080"
  },
  {
    "text": "excited about this uh Unfortunately they were doing it as closed source and it was all researched and they were like I",
    "start": "4261080",
    "end": "4266719"
  },
  {
    "text": "don't know we'll we'll see what we can do with it uh but we lobbied Oracle we worked with them wrote a bunch of emails",
    "start": "4266719",
    "end": "4272440"
  },
  {
    "text": "complained a lot uh and they actually gave it to us they they rolled it into jby proper under our licenses Chris is",
    "start": "4272440",
    "end": "4278880"
  },
  {
    "text": "continuing to work on it um they're funding at least two other full-time develop ERS to work on Ruby truffle as",
    "start": "4278880",
    "end": "4285600"
  },
  {
    "text": "part of J Ruby uh I mentioned there other languages they have a jav JavaScript implementation that is still",
    "start": "4285600",
    "end": "4291679"
  },
  {
    "text": "it's not open source currently um may or may not be in the future you never know what Oracle is going to do but it is as",
    "start": "4291679",
    "end": "4298320"
  },
  {
    "text": "fast or faster than va8 as far as running javascripts once it gets warmed up uh they haven't they've kind of",
    "start": "4298320",
    "end": "4303800"
  },
  {
    "text": "brushed startup time under the carpet at this point but it is impressively fast once it actually warms up and runs um",
    "start": "4303800",
    "end": "4310320"
  },
  {
    "text": "they're also starting to use this for jvm Java features uh project Sumatra does uh is the work",
    "start": "4310320",
    "end": "4317320"
  },
  {
    "text": "on doing uh GPU utilization at the jbm level so if you do a massively parallel",
    "start": "4317320",
    "end": "4322560"
  },
  {
    "text": "op parallelized operation over an array of numbers it'll automatically turn it into GPU calls and do it all in parallel",
    "start": "4322560",
    "end": "4329719"
  },
  {
    "text": "that the early work has actually been built on top of Gro so this is something that probably will get into a future JV",
    "start": "4329719",
    "end": "4335400"
  },
  {
    "text": "jbm release at some point these numbers are also forcing the hotspot folks to deal with some of these optimization",
    "start": "4335400",
    "end": "4341520"
  },
  {
    "text": "issues that they haven't in the past uh things like eliminating objects escapee analysis uh eliminating all these",
    "start": "4341520",
    "end": "4347520"
  },
  {
    "text": "integer boxes um in even in regular Java eliminating uh VAR ARS array boxing when",
    "start": "4347520",
    "end": "4353679"
  },
  {
    "text": "you don't need it if you're only passing one argument in why do you create an array for it well the jvm forces you to",
    "start": "4353679",
    "end": "4358800"
  },
  {
    "text": "that's the kind of stuff that the hotspot folks are going to start fixing because truffle and growl are able to do such a good job",
    "start": "4358800",
    "end": "4364920"
  },
  {
    "text": "of all right so that's most of what I have I want to just summarize here what",
    "start": "4364920",
    "end": "4370960"
  },
  {
    "text": "hopefully what we've learned or what what you're thinking about with all these projects that are out there uh there are problems on the jbm like",
    "start": "4370960",
    "end": "4378400"
  },
  {
    "text": "different languages new features uh getting code to optimize down to something the processor wants uh there",
    "start": "4378400",
    "end": "4384960"
  },
  {
    "text": "are problems but we can fix them we've got tools like J&R we've got tools like invoke Dynamic and growl and truffle",
    "start": "4384960",
    "end": "4391199"
  },
  {
    "text": "that are coming along um these are all open- Source projects with the exception of the the jav JavaScript implementation",
    "start": "4391199",
    "end": "4397760"
  },
  {
    "text": "that Oracle has this is all open source um and the Truffle and growl stuff is just part of jdk so it's under the same",
    "start": "4397760",
    "end": "4405000"
  },
  {
    "text": "GPL terms as everything else in open jdk and you can go look at it you can look at the Ruby truffle implementation J",
    "start": "4405000",
    "end": "4411159"
  },
  {
    "text": "Ruby um they have some toy languages uh this is stuff you can use today and play around with right",
    "start": "4411159",
    "end": "4416760"
  },
  {
    "text": "now and I don't think anything is really impossible we can get tail calls still",
    "start": "4416760",
    "end": "4422440"
  },
  {
    "text": "people talking about that playing with tail calls on the jbm uh getting co- routines proper Co routines built into",
    "start": "4422440",
    "end": "4428320"
  },
  {
    "text": "the jvm there's prototypes of that stuff uh you can get involved and make all these things happen if there's something",
    "start": "4428320",
    "end": "4434280"
  },
  {
    "text": "that you you wish you had on the jbm well we can do it cuz it's all open source and it's all available there so",
    "start": "4434280",
    "end": "4441679"
  },
  {
    "text": "that's all I have today uh thanks very much I hope we have some time for questions and hanging out",
    "start": "4441679",
    "end": "4449638"
  },
  {
    "text": "afterwards all right so yeah in the back just a question not even a technical one",
    "start": "4455440",
    "end": "4460560"
  },
  {
    "text": "so what's it like uh working with the jbm or on the jbm and being outside of",
    "start": "4460560",
    "end": "4465760"
  },
  {
    "text": "Oracle um can you talk about that process a little bit so what's it like working working on",
    "start": "4465760",
    "end": "4471840"
  },
  {
    "text": "the jbm trying to push the jbm forward and being on the outside uh honestly all",
    "start": "4471840",
    "end": "4477239"
  },
  {
    "text": "the jbm folks that I deal with at Oracle with with very few exceptions are the same guys that were at Sun that were",
    "start": "4477239",
    "end": "4483520"
  },
  {
    "text": "totally on board with open source just trying to get people involved they're absolutely thrilled when someone comes",
    "start": "4483520",
    "end": "4488800"
  },
  {
    "text": "in and says hey I want to try and help out even if it's just I've got this this weird case and it doesn't seem to",
    "start": "4488800",
    "end": "4495320"
  },
  {
    "text": "optimize well they jump on that stuff they love to see that uh getting changes",
    "start": "4495320",
    "end": "4500480"
  },
  {
    "text": "into the platform is it's not so much an oracle blocker as it is just a very",
    "start": "4500480",
    "end": "4506080"
  },
  {
    "text": "cumbersome process but Oracle has been doing incredible job of of making that process easier uh the new version of JCP",
    "start": "4506080",
    "end": "4514080"
  },
  {
    "text": "and then also the Jeet stuff if there's something at the VM level that doesn't have to go through an approval process",
    "start": "4514080",
    "end": "4519800"
  },
  {
    "text": "uh it's much easier to get something into open jdk uh than just get it into as a jsr so it's been it's been pretty",
    "start": "4519800",
    "end": "4526080"
  },
  {
    "text": "good working with them it's mostly trying to get through the inertia of the past um it's it's becoming more and more",
    "start": "4526080",
    "end": "4531800"
  },
  {
    "text": "of an open platform as Oracle evolves it I've been pretty impressed other questions yeah over here",
    "start": "4531800",
    "end": "4539360"
  },
  {
    "text": "what J Ruby Ops would you use depending on the environment due to how they they affect things like in in a test or",
    "start": "4539360",
    "end": "4546960"
  },
  {
    "text": "development or production there used to be nail done I never got that working but there's like a Das Das server things",
    "start": "4546960",
    "end": "4553280"
  },
  {
    "text": "like that right right so uh for J Ruby we have one of our big challenges has",
    "start": "4553280",
    "end": "4559280"
  },
  {
    "text": "been that you can pass as many options as you really want to the jbm uh and tune it in a whole bunch of different",
    "start": "4559280",
    "end": "4564760"
  },
  {
    "text": "ways we've tried to find the happy medium of options uh so normally J Ruby",
    "start": "4564760",
    "end": "4571280"
  },
  {
    "text": "will not run with invoked Dynamic support mostly because although it gets",
    "start": "4571280",
    "end": "4576360"
  },
  {
    "text": "us the best straight line performance uh memory consumption is is fairly high",
    "start": "4576360",
    "end": "4581440"
  },
  {
    "text": "it's much it's it's maybe 50% higher than normal because of all the extra code generation and startup time is",
    "start": "4581440",
    "end": "4586920"
  },
  {
    "text": "considerably worse uh startup and warm-up time are a lot longer so normally Jr run without those things on",
    "start": "4586920",
    "end": "4593120"
  },
  {
    "text": "um startup time wise we even turn off our compiler and several jbm features uh",
    "start": "4593120",
    "end": "4599120"
  },
  {
    "text": "with the D- Dev flag uh that usually will give you about 50% Improvement on",
    "start": "4599120",
    "end": "4604239"
  },
  {
    "text": "Startup on pretty much any platform and then there's other ways you can tweak it from there I I have extra slides here",
    "start": "4604239",
    "end": "4609440"
  },
  {
    "text": "for for that for anybody wants to see them um for tuning for production",
    "start": "4609440",
    "end": "4614600"
  },
  {
    "text": "um if memory wise and warm-up wise things look good in a test or QA",
    "start": "4614600",
    "end": "4620639"
  },
  {
    "text": "environment uh with invoke Dynamic we recommend that most of the time uh it",
    "start": "4620639",
    "end": "4626040"
  },
  {
    "text": "will get the best performance eventually it's just the jvm takes a little bit longer to get there start up and and",
    "start": "4626040",
    "end": "4631639"
  },
  {
    "text": "warm up and so on um other flags I mean it's it just comes down to standard jbm",
    "start": "4631639",
    "end": "4637040"
  },
  {
    "text": "tuning at that point with the thought in mind that Ruby is extremely object heavy",
    "start": "4637040",
    "end": "4642600"
  },
  {
    "text": "uh and arrays and hashes being created and thrown away like mad so tuning the garbage collector for that and then",
    "start": "4642600",
    "end": "4649159"
  },
  {
    "text": "hopefully the the jbm guys will get better Escape analysis and whatnot so but yeah I mean it's all that",
    "start": "4649159",
    "end": "4655880"
  },
  {
    "text": "tuning is a an ongoing discussion it really kind of depends on the application but we're we're we're willing to talk with you more about",
    "start": "4655880",
    "end": "4662560"
  },
  {
    "text": "it yeah that things like project raw and Tru effect uh debugging so like when",
    "start": "4662560",
    "end": "4670280"
  },
  {
    "text": "something goes wrong you know if you're an intell clip you know are you getting are you getting help from the tools or",
    "start": "4670280",
    "end": "4675360"
  },
  {
    "text": "is it just Z fa buddy good luck right right well so so uh the questions about",
    "start": "4675360",
    "end": "4680840"
  },
  {
    "text": "uh how does truffle and growl and and those lower level items uh affect debugging well for the native calls",
    "start": "4680840",
    "end": "4687800"
  },
  {
    "text": "you're you're on your own I mean unless you're doing all of your Java debugging in GDB or something um you're probably",
    "start": "4687800",
    "end": "4694120"
  },
  {
    "text": "going to be stuck at that point as far as making a native call you're calling out of the safe Zone uh but truffling",
    "start": "4694120",
    "end": "4700120"
  },
  {
    "text": "growl uh I I'm sure you could get growl to emit bad code that would crash the",
    "start": "4700120",
    "end": "4705800"
  },
  {
    "text": "jbm or something uh but in general it still has to obey all of the semantics of the jbm memory protections and",
    "start": "4705800",
    "end": "4712320"
  },
  {
    "text": "whatnot uh debugging wise the Truffle folks have started to look into that",
    "start": "4712320",
    "end": "4719080"
  },
  {
    "text": "more seriously uh they actually have very extensive debugging capabilities that can be on all the time because they",
    "start": "4719080",
    "end": "4725159"
  },
  {
    "text": "can just de optimize anytime they want and say okay well now um you're stepping into this Frame I'll show you all the",
    "start": "4725159",
    "end": "4731040"
  },
  {
    "text": "frames that have called it I'll show you all the possible callers all the types I've seen here they have a lot more of",
    "start": "4731040",
    "end": "4736159"
  },
  {
    "text": "that that information available at runtime because it's all running above the jbm level so they have that",
    "start": "4736159",
    "end": "4742360"
  },
  {
    "text": "information uh that said it is still a research project um it will crash it",
    "start": "4742360",
    "end": "4748880"
  },
  {
    "text": "will have missing features that uh if they were just JDM based you would you",
    "start": "4748880",
    "end": "4754120"
  },
  {
    "text": "would get for free they're not there in in truffle and gr right now but they are focusing on largely language performance",
    "start": "4754120",
    "end": "4761639"
  },
  {
    "text": "what's the best case for building a language on top of this and then building some of those features after the",
    "start": "4761639",
    "end": "4768080"
  },
  {
    "text": "fact other questions yeah for um users of J Ruby do",
    "start": "4768080",
    "end": "4776320"
  },
  {
    "text": "you have um for the for the various versions 1.7 and the upcoming 9,000 um do you have a general",
    "start": "4776320",
    "end": "4782760"
  },
  {
    "text": "recommendation about versions of java to pair with your J Ruby Java 7 versus Java",
    "start": "4782760",
    "end": "4787880"
  },
  {
    "text": "8 Java 9 I we always just recommend whatever the latest is I mean they there",
    "start": "4787880",
    "end": "4793280"
  },
  {
    "text": "there have been some rocky times where like early Java 7 releases on o 10 were",
    "start": "4793280",
    "end": "4798920"
  },
  {
    "text": "a little flaky and so on early releases that came out on BSD weren't so great um",
    "start": "4798920",
    "end": "4804120"
  },
  {
    "text": "but in general like going from java 7 to Java 8 is like even now it's like free",
    "start": "4804120",
    "end": "4809719"
  },
  {
    "text": "10 to 20% performance just magically out of somewhere um and those those changes",
    "start": "4809719",
    "end": "4815199"
  },
  {
    "text": "eventually trickle back down to the older jbm versions but yeah we recommend people to use the newest stuff uh",
    "start": "4815199",
    "end": "4820560"
  },
  {
    "text": "there's also the the issues of security fixes come out first for the newest jvm versions and as we know now the jvm is",
    "start": "4820560",
    "end": "4827760"
  },
  {
    "text": "not a perfectly secure platform so it's probably a good idea to stay on the latest one anyway and there's really no",
    "start": "4827760",
    "end": "4833560"
  },
  {
    "text": "reason not to we've only run into a handful of minor things that have broken as forward",
    "start": "4833560",
    "end": "4840600"
  },
  {
    "text": "releases uh do you have any comments on the Scola and Scola apas uh comment on Scola and what it's",
    "start": "4840920",
    "end": "4847719"
  },
  {
    "text": "apas like STM Futures well I I love all the languages",
    "start": "4847719",
    "end": "4853360"
  },
  {
    "text": "and what they're doing with with the jbm I would like uh you mentioned STM specifically I'd love to see if there's",
    "start": "4853360",
    "end": "4860159"
  },
  {
    "text": "anything the jbm can help with there to make it faster um there's possibilities of being being able to use invoke",
    "start": "4860159",
    "end": "4866280"
  },
  {
    "text": "Dynamic for things like that um especially for if you've got a ref that's always the same except for that",
    "start": "4866280",
    "end": "4872840"
  },
  {
    "text": "one time well we would just totally avoid the traversal of that ref in between um invoke Dynamic can optimize",
    "start": "4872840",
    "end": "4879719"
  },
  {
    "text": "that away and make it a VM level bailout when you actually have a transaction that needs to to cancel or something",
    "start": "4879719",
    "end": "4885440"
  },
  {
    "text": "yeah so on that um 292 had at one point",
    "start": "4885440",
    "end": "4891440"
  },
  {
    "text": "uh a call out for safe point and the whole semantics around that being exposed which would have made this whole thing a lot faster right because we had",
    "start": "4891440",
    "end": "4898280"
  },
  {
    "text": "a direct point to swap when necessary do you know what happened there like why why it got taken out it's still there",
    "start": "4898280",
    "end": "4905199"
  },
  {
    "text": "but it really is it really only optimizes well if you emit it into bite code you can call the it's the switch",
    "start": "4905199",
    "end": "4912440"
  },
  {
    "text": "point API in method in Java Lang invoke and it is still there switch point is essentially uh uh an if if then else",
    "start": "4912440",
    "end": "4921679"
  },
  {
    "text": "that you can only turn off it's got it follows the then path for for as long as it will and you can turn it off once",
    "start": "4921679",
    "end": "4928600"
  },
  {
    "text": "that corresponds to Something in the jbm called a safe point where it says okay if you reach this point in the code and",
    "start": "4928600",
    "end": "4935040"
  },
  {
    "text": "an assertion has failed bail out completely throw that code away and never come back to it again that's where it branches back into the interpreter",
    "start": "4935040",
    "end": "4941159"
  },
  {
    "text": "and starts reoptimizing but that's a a Java level Concept in invoke Dynamic",
    "start": "4941159",
    "end": "4946239"
  },
  {
    "text": "that you can have a safe Point as a normal object um it is still there but in order for invoke Dynamic to optimize",
    "start": "4946239",
    "end": "4953440"
  },
  {
    "text": "switch points and handles and whatnot you kind of need an invoke dynamic entry point the bite code for it so the",
    "start": "4953440",
    "end": "4959280"
  },
  {
    "text": "compiler could admit okay an invoke Dynamic that's going to go into a ref that probably hasn't changed here's the",
    "start": "4959280",
    "end": "4965400"
  },
  {
    "text": "switch point that checks whether it's changed and then until until until it actually does change and there's something different at that ref it would",
    "start": "4965400",
    "end": "4972280"
  },
  {
    "text": "be almost a noop to Traverse it rather than what we have now with refs which is much",
    "start": "4972280",
    "end": "4977600"
  },
  {
    "text": "heavier so yeah there's a lot of those features we could do better on is there a particular language that you feel",
    "start": "4977600",
    "end": "4983679"
  },
  {
    "text": "would not be a good fit to run on the jbm as far as syntax or functionality",
    "start": "4983679",
    "end": "4989040"
  },
  {
    "text": "basic basic could be awesome on the jbm well usually usually the problems of",
    "start": "4989040",
    "end": "4994800"
  },
  {
    "text": "bringing a language to the jbm are either native access uh which was one of the things that we worked hard to solve",
    "start": "4994800",
    "end": "5000239"
  },
  {
    "text": "in Ruby or uh just call Flow call protocols and whatnot uh",
    "start": "5000239",
    "end": "5007080"
  },
  {
    "text": "most of the lisy like functional languages really wanting tail calls to work uh languages like Ruby or python",
    "start": "5007080",
    "end": "5014400"
  },
  {
    "text": "having a generator co- routine concept that we just don't have on the jbm lightweight threadlets uh green threads",
    "start": "5014400",
    "end": "5021280"
  },
  {
    "text": "essentially um those are the things that are a little bit of a challenge those are slowly starting to come along but uh",
    "start": "5021280",
    "end": "5027199"
  },
  {
    "text": "for example go is one that would be very difficult to implement on the jvm right now you need VM level understanding not",
    "start": "5027199",
    "end": "5034159"
  },
  {
    "text": "only of all the io channels you're dealing with but of the flow of code and how to Interplex those together and",
    "start": "5034159",
    "end": "5040320"
  },
  {
    "text": "maybe have five threads that run 5,000 co- routines at the same time um that's",
    "start": "5040320",
    "end": "5046000"
  },
  {
    "text": "the kind of stuff that's currently still difficult on the jbm and it's next are is to push uh ju someone else have no go",
    "start": "5046000",
    "end": "5053800"
  },
  {
    "text": "ahead um to piggyback off of that like is are there any plans for interrupt with the good language as kind of like a",
    "start": "5053800",
    "end": "5059560"
  },
  {
    "text": "native finding similar to what you were describing no no no plans that I know of",
    "start": "5059560",
    "end": "5064719"
  },
  {
    "text": "um I don't even know what what Ms as far as like a shared Library sort of thing uh if it if it emits something",
    "start": "5064719",
    "end": "5071000"
  },
  {
    "text": "that looks like a c entry point we can use our native stuff to call into it um",
    "start": "5071000",
    "end": "5076040"
  },
  {
    "text": "but otherwise uh yeah I don't know of any plans specifically to integrate with go at this",
    "start": "5076040",
    "end": "5083080"
  },
  {
    "text": "point yeah I recall um you saying once that you the J Ruby actually has a a",
    "start": "5083080",
    "end": "5089880"
  },
  {
    "text": "ruby VM that you wrote that the Ruby runs on top of so you're actually implementing a VM to run on top of a VM",
    "start": "5089880",
    "end": "5097239"
  },
  {
    "text": "I was wondering if you had anything that you wanted to share about that if that's something that other jbm authors need to",
    "start": "5097239",
    "end": "5103639"
  },
  {
    "text": "do or consider well there's a reason why I've been forced to learn about how the jvm works it's because we've essentially",
    "start": "5103639",
    "end": "5110560"
  },
  {
    "text": "implemented a little mini VM on top of the jvm uh J Ruby is one of the only jvm languages that has an interpreter and a",
    "start": "5110560",
    "end": "5118080"
  },
  {
    "text": "a compiler uh J Ruby code Ruby code that runs on J Ruby will run in our standard",
    "start": "5118080",
    "end": "5124080"
  },
  {
    "text": "interpreter for a little while and then as it gets hot like the jvm does uh we will turn it into jvm bite code and then",
    "start": "5124080",
    "end": "5130760"
  },
  {
    "text": "the jvm B code will run that for a while and then turn that into native code uh but it's enabled us to be able to have",
    "start": "5130760",
    "end": "5136199"
  },
  {
    "text": "much faster startup than languages that are all compiled they don't have to load all of that bite goat at the same time",
    "start": "5136199",
    "end": "5141840"
  },
  {
    "text": "uh and it allows us to do our own optimizations at runtime we can actually do some of the same profile",
    "start": "5141840",
    "end": "5147320"
  },
  {
    "text": "optimizations the jbm does above the jvm uh the NZ horn guys are considering",
    "start": "5147320",
    "end": "5154199"
  },
  {
    "text": "this because they're purely bite code generation and it's a major hit for them to try and boot all that bite code up at",
    "start": "5154199",
    "end": "5160719"
  },
  {
    "text": "runtime uh it's there are challenges like getting a proper back Trace out of",
    "start": "5160719",
    "end": "5165840"
  },
  {
    "text": "that when we have just interpreter frames on the jvm stack we have to re restructure it uh but you know it's been",
    "start": "5165840",
    "end": "5172159"
  },
  {
    "text": "an interesting thought experiment and I think it's paid off in the long run as far as J Ruby go uh we're the only jbm",
    "start": "5172159",
    "end": "5178159"
  },
  {
    "text": "language that has anything like that you got like two more questions two",
    "start": "5178159",
    "end": "5183440"
  },
  {
    "text": "more questions all right um yeah farb uh how do you feel about the the future of",
    "start": "5183440",
    "end": "5188800"
  },
  {
    "text": "Ruby's I guess Mainline C implementation given all this work that's been going into J Ruby and the alternate",
    "start": "5188800",
    "end": "5194080"
  },
  {
    "text": "implementations like rubinus so I would say um as far as the other Ruby implementations they they all definitely",
    "start": "5194080",
    "end": "5200520"
  },
  {
    "text": "still have their areas where they're better choices than J Ruby uh MRI the standard C implementation is still it's",
    "start": "5200520",
    "end": "5207800"
  },
  {
    "text": "blindingly fast to start up like when what takes us 2 seconds to do it takes",
    "start": "5207800",
    "end": "5212960"
  },
  {
    "text": "them you know a hundredth of a second to do they just start up immediately uh so",
    "start": "5212960",
    "end": "5218199"
  },
  {
    "text": "anything that you're doing that's like a low-level Unix scripting sort of thing system level scripting for sure you want",
    "start": "5218199",
    "end": "5223800"
  },
  {
    "text": "to use C Ruby that's it's just a better choice for that uh rubinius if you want",
    "start": "5223800",
    "end": "5229320"
  },
  {
    "text": "essentially like the the full set of posix capabilities and you have a lot of C libraries native libraries from the",
    "start": "5229320",
    "end": "5235880"
  },
  {
    "text": "Ruby world that you need to use and you can't get away from that well it gives you some of the VM features of the jvm",
    "start": "5235880",
    "end": "5241880"
  },
  {
    "text": "with without abandoning your entire code base most applications will drop in without a lot of modification um you",
    "start": "5241880",
    "end": "5248040"
  },
  {
    "text": "don't get all the benefits of being on the jvm but you get a lot of the benefits of a managed VM with a real GC",
    "start": "5248040",
    "end": "5253080"
  },
  {
    "text": "and so on um I think all these implementations still have strong use",
    "start": "5253080",
    "end": "5258199"
  },
  {
    "text": "cases they're they're they're very important for the community and CR Ruby in particular it's not a particularly",
    "start": "5258199",
    "end": "5264560"
  },
  {
    "text": "complicated implementation it's easier for people to contribute to that implementation or to contribute to",
    "start": "5264560",
    "end": "5270119"
  },
  {
    "text": "reinius because it's largely Ruby for for the core stuff um they'll they'll continue to live on for a long time um",
    "start": "5270119",
    "end": "5276880"
  },
  {
    "text": "as a viable deployment platform for a server application I think it's going to be more and more difficult to justify C",
    "start": "5276880",
    "end": "5283400"
  },
  {
    "text": "Ruby if they don't get things like real parallel threads if they don't get things like a like a full-on",
    "start": "5283400",
    "end": "5289000"
  },
  {
    "text": "generational garbage collector uh but for certain types of applications both rivinius and MRI are still the best",
    "start": "5289000",
    "end": "5295199"
  },
  {
    "text": "choices and then right in front of them yeah uh we've tried to use uh J for uh",
    "start": "5295199",
    "end": "5302639"
  },
  {
    "text": "certain highly concurrent uh web applications and run into issues where",
    "start": "5302639",
    "end": "5307800"
  },
  {
    "text": "uh even when the underlying uh database and heart and CPU are running pretty cool uh we see",
    "start": "5307800",
    "end": "5314679"
  },
  {
    "text": "transaction times escalate pretty high pretty high as concurrency increases and it seems to",
    "start": "5314679",
    "end": "5320360"
  },
  {
    "text": "be related to lot contention have you heard any or heard that from anywhere else or looked into that at allog report",
    "start": "5320360",
    "end": "5326480"
  },
  {
    "text": "to me we' we've had various folks that essentially they just look at where",
    "start": "5326480",
    "end": "5332080"
  },
  {
    "text": "spending a lot of time on a low C if it's low CPU and it seems to be blocking forever it's pretty easy to get a thread",
    "start": "5332080",
    "end": "5338080"
  },
  {
    "text": "dump and see what it's sitting on what lock it's waiting on what locks are in play there's lots of tools to find that",
    "start": "5338080",
    "end": "5343159"
  },
  {
    "text": "stuff um and for one user after just a few rounds of him submitting bugs and US",
    "start": "5343159",
    "end": "5349000"
  },
  {
    "text": "patching stuff we increased his throughput like 10 times or something cuz it were just dumb things that we had",
    "start": "5349000",
    "end": "5355199"
  },
  {
    "text": "Legacy code that was with J Rel um you should unless you're totally saturating",
    "start": "5355199",
    "end": "5360719"
  },
  {
    "text": "the memory pipeline like you got so much allocation that you can't even push any more data through the memory pipeline",
    "start": "5360719",
    "end": "5366199"
  },
  {
    "text": "you should be able to saturate all the cores with a JB application and if you're not it's either something wrong",
    "start": "5366199",
    "end": "5371639"
  },
  {
    "text": "contention wise on your side or something that we can improve what's the information that",
    "start": "5371639",
    "end": "5377040"
  },
  {
    "text": "you'd like to have when if like that sub um stacked dumps uh even like sampled",
    "start": "5377040",
    "end": "5382520"
  },
  {
    "text": "profiles doesn't have to be fully instrumented profiles sampled profiles that show we've got a lock acquired here",
    "start": "5382520",
    "end": "5388520"
  },
  {
    "text": "and these other threads are all sitting waiting on that lock it's not too hard to find and there there there's additional tools there's visual VM tools",
    "start": "5388520",
    "end": "5394880"
  },
  {
    "text": "for tracking lock contention and stuff um anything that you'd use to figure that out at the jvm level should work",
    "start": "5394880",
    "end": "5401000"
  },
  {
    "text": "fine for J Ruby to J stack J stack yeah that that that'd be the basic thing give",
    "start": "5401000",
    "end": "5406400"
  },
  {
    "text": "us a stack that shows some contention uh that's it thanks very",
    "start": "5406400",
    "end": "5412198"
  },
  {
    "text": "much all right now here comes for dep part of you to um get to give away one",
    "start": "5418840",
    "end": "5424600"
  },
  {
    "text": "free ticket right yeah so we need a random number generator so that's Charles uh and it's 1 through 47 through",
    "start": "5424600",
    "end": "5432639"
  },
  {
    "text": "47 oh okay have a beer so",
    "start": "5432639",
    "end": "5437560"
  },
  {
    "text": "yes well let's just go with 42 because that seems like the right oh that's awesome right 42 is Jerry catel see here",
    "start": "5438320",
    "end": "5447000"
  },
  {
    "text": "all right that's awesome",
    "start": "5447000",
    "end": "5453840"
  },
  {
    "text": "yeah yeah I I didn't want I didn't look want to look around too much someone was going to",
    "start": "5454920",
    "end": "5461118"
  },
  {
    "text": "like",
    "start": "5471719",
    "end": "5474719"
  }
]