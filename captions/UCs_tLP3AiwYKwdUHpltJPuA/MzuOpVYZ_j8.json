[
  {
    "start": "0",
    "end": "215000"
  },
  {
    "text": "uh so this session is about uh Dynamic languages making them perform",
    "start": "3080",
    "end": "8280"
  },
  {
    "text": "implementing them so they can run on the jvm and making them perform and uh this is from the perspective of the nazor",
    "start": "8280",
    "end": "14920"
  },
  {
    "text": "project which is the JavaScript engine written in pure Java that comes with",
    "start": "14920",
    "end": "20279"
  },
  {
    "text": "jdk8 and um this started out as a a war stories talk for Java language Summit this summer uh with like 80 people like",
    "start": "20279",
    "end": "28080"
  },
  {
    "text": "me uh in in in the room the only 80 people like me in the world so I hope that I adapted a little bit I still",
    "start": "28080",
    "end": "34000"
  },
  {
    "text": "won't I mean still won't need the seat belts I won't crash into anything but I'll I'll do my best to keep it on a",
    "start": "34000",
    "end": "39879"
  },
  {
    "text": "good level but it's going to be pretty technical but again goto is a pretty technical conference so I'm sure if",
    "start": "39879",
    "end": "46160"
  },
  {
    "text": "you're here you'll do fine uh my colleague Rickard suggested um when I did this talk that it should have an",
    "start": "46160",
    "end": "51920"
  },
  {
    "text": "alternative title U which would be enough because uh JavaScript man it's um",
    "start": "51920",
    "end": "58600"
  },
  {
    "text": "it's not the best most ideal language I've ever had to implement and I've implemented a few languages in my time",
    "start": "58600",
    "end": "65920"
  },
  {
    "text": "so um I work for Oracle tell slide there legal um my name is Marcus lerr you can",
    "start": "65920",
    "end": "74280"
  },
  {
    "text": "follow me follow me on Twitter logger gr and uh I am originally one of the",
    "start": "74280",
    "end": "79960"
  },
  {
    "text": "jrocket guys who was the co- generator architect for the jrocket machine for a long time and uh after Adventures back",
    "start": "79960",
    "end": "86560"
  },
  {
    "text": "and forth I ended up in the Java language team at Oracle in 2011 where I've been working on Dynamic languages",
    "start": "86560",
    "end": "93000"
  },
  {
    "text": "ever since um and it's a pleasure to be here because goto is is one of my more",
    "start": "93000",
    "end": "98960"
  },
  {
    "text": "favorite conferences when I look at the program but I never never make it here for various reasons the last time was",
    "start": "98960",
    "end": "104719"
  },
  {
    "text": "here was in 2001 and also I think that Denmark can be a little bit",
    "start": "104719",
    "end": "111240"
  },
  {
    "text": "scary sometimes more than a little bit scary actually um but I mean swedes have",
    "start": "111399",
    "end": "118360"
  },
  {
    "text": "successfully gone to Denmark before uh and and participated in the",
    "start": "118360",
    "end": "124640"
  },
  {
    "text": "cultural exchange so um so so I'm feeling pretty confident anyway um I'm",
    "start": "124640",
    "end": "131879"
  },
  {
    "text": "here to talk about what we suffered through so far uh when we implemented the dynamic language on the jvm um which",
    "start": "131879",
    "end": "139879"
  },
  {
    "text": "is a nazor project and that is still a hippo Dam I forgot to change it for this presentation at least I think it's a",
    "start": "139879",
    "end": "146400"
  },
  {
    "text": "hippo it's a nice graffiti picture and for entertainment purposes uh beside the",
    "start": "146400",
    "end": "152120"
  },
  {
    "text": "technical stuff I will also parade you some JavaScript Horrors that I always do",
    "start": "152120",
    "end": "157360"
  },
  {
    "text": "in the order to vaccinate the world against what is taking over the IT industry for obscure",
    "start": "157360",
    "end": "162599"
  },
  {
    "text": "reasons so agenda what is nazor and why",
    "start": "162599",
    "end": "168120"
  },
  {
    "text": "um the problem of representing something as bite code that didn't use to be Java",
    "start": "168120",
    "end": "174440"
  },
  {
    "text": "I call this an alien language to the Java virtual machine and Java bite code is called Java bite code code with Java",
    "start": "174440",
    "end": "180680"
  },
  {
    "text": "so that's why we got this whole alien thing going uh it involves types which",
    "start": "180680",
    "end": "185840"
  },
  {
    "text": "we don't have in Dynamic languages typically and that the bite code does have it involves doing optimistic",
    "start": "185840",
    "end": "191640"
  },
  {
    "text": "assumptions so that you can get some speed because you can't represent everything as Java Lang objects and preserve the uh speed of your",
    "start": "191640",
    "end": "198319"
  },
  {
    "text": "implementation and then uh what is the jvm doing with invok Dynamic what are IT issues and how can it be",
    "start": "198319",
    "end": "205040"
  },
  {
    "text": "faster so this is not a presentation about nazor in depth why but I introduce",
    "start": "205040",
    "end": "211000"
  },
  {
    "text": "it a little bit for those of you who has haven't heard about it um it's a 100%",
    "start": "211000",
    "end": "216480"
  },
  {
    "start": "215000",
    "end": "320000"
  },
  {
    "text": "pure Java runtime for JavaScript just like Rhino used to be or like Rhino is",
    "start": "216480",
    "end": "221959"
  },
  {
    "text": "and uh we Implement JavaScript by generating bite codes for the uh virtual",
    "start": "221959",
    "end": "227040"
  },
  {
    "text": "machine but the difference between us and Rhino is that we use invoke Dynamics everywhere for Getters and Setters and",
    "start": "227040",
    "end": "233560"
  },
  {
    "text": "calls and everything that basically can change in a dynamic language runtime the way it was intended and um nazor",
    "start": "233560",
    "end": "241680"
  },
  {
    "text": "currently performs Somewhere on the order of well it's like pulling some figures out of the air here two to time two to 10 times better than Ryo and any",
    "start": "241680",
    "end": "248319"
  },
  {
    "text": "arbitrary work any arbitrary job it's in um jdk8 it is also fully ecma script",
    "start": "248319",
    "end": "255000"
  },
  {
    "text": "compliant which means that we were on the 11 something thousand test tests from ecma that U makes sure we can call",
    "start": "255000",
    "end": "261120"
  },
  {
    "text": "ourselves JavaScript we were actually the first JavaScript implementation in the world to do that I mean V8 had 98%",
    "start": "261120",
    "end": "267960"
  },
  {
    "text": "and we had 100 or something but I don't think we are anymore not that it matters overly much but we had to make sure we",
    "start": "267960",
    "end": "273160"
  },
  {
    "text": "were compliant before we started tweaking performance dials and we have a well thought through security model",
    "start": "273160",
    "end": "279720"
  },
  {
    "text": "that's the reason we haven't gotten as far uh in performance work as as we U wanted because for some reason I mean",
    "start": "279720",
    "end": "286039"
  },
  {
    "text": "you might have heard of it but there have been some security issues with Java I couldn't possibly comment but there's been some",
    "start": "286039",
    "end": "291520"
  },
  {
    "text": "resources taken up uh by that so nasar started out in 2010 late 2010 I think as",
    "start": "291520",
    "end": "299160"
  },
  {
    "text": "a proof of concept for invoke Dynamic uh Brian was talking about um in his last",
    "start": "299160",
    "end": "305560"
  },
  {
    "text": "session can we use invoke Dynamic to efficiently Implement a dynamic language",
    "start": "305560",
    "end": "311600"
  },
  {
    "text": "on the jvm and in order to do that we sort of had to try so it one thing led to another and there was a lot of stuff",
    "start": "311600",
    "end": "317639"
  },
  {
    "text": "going on and we picked JavaScript because Rhino is still alive after 18",
    "start": "317639",
    "end": "323479"
  },
  {
    "start": "320000",
    "end": "427000"
  },
  {
    "text": "years and and one might one might think that is strange because it was written",
    "start": "323479",
    "end": "329319"
  },
  {
    "text": "in 19 1995 in Java and it's patched patched over again it's an old slow quite ugly beast but the reason people",
    "start": "329319",
    "end": "336000"
  },
  {
    "text": "use Rhino is that they can use the jsr223 uh Java FX Java X scripting API",
    "start": "336000",
    "end": "342039"
  },
  {
    "text": "to communicate with the jdk you got access to Java and the underlying platform from the JavaScript program so",
    "start": "342039",
    "end": "348160"
  },
  {
    "text": "you can do hybrid programming so people actually use Rhino new projects today and we wanted to provide a modern",
    "start": "348160",
    "end": "354039"
  },
  {
    "text": "alternative so nazor is now mature and if this is Rhino this is is what we're",
    "start": "354039",
    "end": "360080"
  },
  {
    "text": "replacing it with something for the a clean room implementation for the modern world of a robotic",
    "start": "360080",
    "end": "365960"
  },
  {
    "text": "rhinoceros I'm actually going to show you a performance slide now you shouldn't take too much heed to it",
    "start": "365960",
    "end": "371039"
  },
  {
    "text": "because it's Nazar normalized against rhino and high is good on on on the octane benchmarks from part of the V8",
    "start": "371039",
    "end": "378080"
  },
  {
    "text": "Suite uh and there're sort of the spcm 98 of the JavaScript world you can't read too much into them you can write",
    "start": "378080",
    "end": "385160"
  },
  {
    "text": "perfectly functional killer web apps with nasorn and uh use it as part of a",
    "start": "385160",
    "end": "391199"
  },
  {
    "text": "node like um semantics in the Avatar JS project that was announced last week at Java 1 so um this is just a beginning it",
    "start": "391199",
    "end": "399639"
  },
  {
    "text": "might be interesting to notice that some of these bars I don't have any like native runtime figures to compare with here but uh some things like display",
    "start": "399639",
    "end": "406880"
  },
  {
    "text": "benchmarks we are already faster than V8 which is a native implementation mainly due to us being able to utilize some",
    "start": "406880",
    "end": "413400"
  },
  {
    "text": "really good garbage collectors in the U in the J jvm so so this is just a beginning and uh going to spend a",
    "start": "413400",
    "end": "420039"
  },
  {
    "text": "significant uh amount of time this presentation and um talking about how we're going to get",
    "start": "420039",
    "end": "425120"
  },
  {
    "text": "further so nazor is already uh available in the open jdk builds you can download it today in the bin directory next to",
    "start": "425120",
    "end": "432199"
  },
  {
    "start": "427000",
    "end": "672000"
  },
  {
    "text": "Java you got the JDS reple which you can start and gives you the uh JavaScript U",
    "start": "432199",
    "end": "438479"
  },
  {
    "text": "um interpreter where you can just try out what naason does it's the default JavaScript script engine so try it out",
    "start": "438479",
    "end": "445360"
  },
  {
    "text": "today so um I did a a rather in depth thing on nazor or like people other",
    "start": "445360",
    "end": "452000"
  },
  {
    "text": "people in the media night as well the Java one last week so as long as video comes up should be pretty soon I",
    "start": "452000",
    "end": "457720"
  },
  {
    "text": "encourage you to check those out if you want to know more about the actual product because that was pretty cool",
    "start": "457720",
    "end": "462919"
  },
  {
    "text": "including the little twitter-based game that we implemented quickly in the JavaScript script Bowl where you tweet",
    "start": "462919",
    "end": "469039"
  },
  {
    "text": "it up and down to your rhinoceri that moved across the screen as a typical example of things you can do quickly",
    "start": "469039",
    "end": "474520"
  },
  {
    "text": "with a hybridized programming in Java and JavaScript anyway that's not what",
    "start": "474520",
    "end": "479720"
  },
  {
    "text": "we're here today for today we're here for the Technologies involved in compiling an alien language to Java bite",
    "start": "479720",
    "end": "487000"
  },
  {
    "text": "code and um as Brian said there's an abstraction layer there layer of indirection which invoke Dynamic gives",
    "start": "487000",
    "end": "493400"
  },
  {
    "text": "us bite code itself is a layer of indirection um it usually looks like",
    "start": "493400",
    "end": "499560"
  },
  {
    "text": "this when you try to get something that's not Java to work on the virtual machine I mean you can usually do it",
    "start": "499560",
    "end": "505159"
  },
  {
    "text": "it's t incomplete but it's really hard to like get the exact semantics right",
    "start": "505159",
    "end": "510479"
  },
  {
    "text": "um JavaScript doesn't fit extremely well into the M Java bite code Scala fits",
    "start": "510479",
    "end": "517000"
  },
  {
    "text": "better into the like turning it into Java bite code but it's not painfree um",
    "start": "517000",
    "end": "523399"
  },
  {
    "text": "there are things like hard tail C optimizations uh interface injections traits Etc that don't exist in the",
    "start": "523399",
    "end": "529800"
  },
  {
    "text": "virtual machine and also Java language Summit the summer uh I saw a Scala talk",
    "start": "529800",
    "end": "535080"
  },
  {
    "text": "about the actual internals they have to do to get like squeeze the type system into uh",
    "start": "535080",
    "end": "540160"
  },
  {
    "text": "uh in into Java bite code and that made me gave me some mental scars that I still have but uh",
    "start": "540160",
    "end": "546720"
  },
  {
    "text": "Scala uh is a fairly good fit compared to more Dynamic languages like",
    "start": "546720",
    "end": "551920"
  },
  {
    "text": "JavaScript and Ruby that we can certainly say because in Java JavaScript in Ruby we don't have any types any",
    "start": "551920",
    "end": "557640"
  },
  {
    "text": "explicit types things change at runtime a lot in Ruby you can just like add an instance feeli to to the class you're",
    "start": "557640",
    "end": "563880"
  },
  {
    "text": "working with right now uh with the um at operator um you can uh replace a",
    "start": "563880",
    "end": "571040"
  },
  {
    "text": "function with another well you can you can pretty much replace built-ins in JavaScript replace math sign with",
    "start": "571040",
    "end": "576200"
  },
  {
    "text": "something that returns 17 so so there's a lot of pain like handle this which",
    "start": "576200",
    "end": "581360"
  },
  {
    "text": "brings more overhead to what you're doing and invoke Dynamic is certainly alleviates a lot of the pain because if",
    "start": "581360",
    "end": "587560"
  },
  {
    "text": "you have a PO call site that goes from A to B and someone says that it should not go to C that's exactly what invoke",
    "start": "587560",
    "end": "593920"
  },
  {
    "text": "Dynamic is for it behaves like a function pointer boom new Target problem solved so that kind of thing uh it it",
    "start": "593920",
    "end": "600880"
  },
  {
    "text": "alleviates a lot and it also helps you with the combinators not having to generate explicit bite code we're going",
    "start": "600880",
    "end": "606440"
  },
  {
    "text": "to look at that a little bit but plenty of stuff remains to be solved so looking at JavaScript as my",
    "start": "606440",
    "end": "614200"
  },
  {
    "text": "example it was obviously deliber deliberately designed to make every efficient representation of everything",
    "start": "614200",
    "end": "620680"
  },
  {
    "text": "you ever do uh useless um if you say that prototypes for",
    "start": "620680",
    "end": "627839"
  },
  {
    "text": "instance if you're going to JavaScript the array prototype and say that array prototype of one is 17 that means that",
    "start": "627839",
    "end": "634320"
  },
  {
    "text": "the second element of every array in in JavaScript forever more until you change",
    "start": "634320",
    "end": "640480"
  },
  {
    "text": "it will be 17 so the obvious uh the",
    "start": "640480",
    "end": "645760"
  },
  {
    "text": "obvious representation if you go on a bite code to represent a JavaScript array is just a Java array that's",
    "start": "645760",
    "end": "651480"
  },
  {
    "text": "obviously not going to work same thing with a sparse array you can have an array with billions of element not",
    "start": "651480",
    "end": "656720"
  },
  {
    "text": "really but you can have an index of a billion you can have something that looks like an array and then suddenly you say well this with the key string",
    "start": "656720",
    "end": "663120"
  },
  {
    "text": "something is blah blah and then suddenly it turns into a map so there's a lot of stuff like this in JavaScript you have",
    "start": "663120",
    "end": "668480"
  },
  {
    "text": "to think carefully about when you have an underlying implementation numbers is one of the",
    "start": "668480",
    "end": "674279"
  },
  {
    "start": "672000",
    "end": "817000"
  },
  {
    "text": "harder problems if you're trying to do this as bite code uh because of strongly typed bite code and Loosely typed",
    "start": "674279",
    "end": "679880"
  },
  {
    "text": "JavaScript a number in JavaScript has no fixed range it's insh or it's dublish",
    "start": "679880",
    "end": "685760"
  },
  {
    "text": "it's X number of bits it's really just a number is what you can talk about you can't say it's a 32-bit Java in or a",
    "start": "685760",
    "end": "692480"
  },
  {
    "text": "64-bit Java double uh and this is not very nice because strongly typed bite code expects exactly this from you so",
    "start": "692480",
    "end": "700360"
  },
  {
    "text": "overflows must be handled if you have two very large positive integers and add them together in Java you get a negative",
    "start": "700360",
    "end": "706720"
  },
  {
    "text": "integer because you get an overflow and that's how Java is defined to work in in JavaScript you get a larg number that",
    "start": "706720",
    "end": "712680"
  },
  {
    "text": "takes more than 32 bits to represent so just using inop codes and hope that we",
    "start": "712680",
    "end": "717920"
  },
  {
    "text": "don't overflow I mean you can't do that because sometimes you overflow uh",
    "start": "717920",
    "end": "723000"
  },
  {
    "text": "conservatively and I'm going to do this presentation going from like how can we conservatively represent JavaScript at",
    "start": "723000",
    "end": "728880"
  },
  {
    "text": "least it's correct as bite code and then okay optimistically performance how should we do our guesses I'll start",
    "start": "728880",
    "end": "735360"
  },
  {
    "text": "conservatively by saying that at least the number in JavaScript uh tend to fit in a Java double no matter what number",
    "start": "735360",
    "end": "742279"
  },
  {
    "text": "it is sometimes this is not true but I'm not going to not going to go into that",
    "start": "742279",
    "end": "748160"
  },
  {
    "text": "particular can of worm let's say that doubles are good enough for numbers in JavaScript because it's",
    "start": "748160",
    "end": "754240"
  },
  {
    "text": "mostly the case and of course double arithmetic if you look on Modern Hardware is slower than integer",
    "start": "754240",
    "end": "760279"
  },
  {
    "text": "arithmetic like Can it can be no other way um but interestingly enough and",
    "start": "760279",
    "end": "766880"
  },
  {
    "text": "irritatingly enough uh is that double arithmetic sometimes is faster than inter arithmetic if you have to add an",
    "start": "766880",
    "end": "773720"
  },
  {
    "text": "overflow check say that you add two large integers together and want to see",
    "start": "773720",
    "end": "778760"
  },
  {
    "text": "okay did just overflow just doing the check without I'm not sure what we were taught in uh at University but I think",
    "start": "778760",
    "end": "785160"
  },
  {
    "text": "it's like two exors and an and uh and maybe a sub to implement an overflow",
    "start": "785160",
    "end": "790920"
  },
  {
    "text": "check for in it's a couple of extra instructions and I would think that at",
    "start": "790920",
    "end": "795959"
  },
  {
    "text": "least it's still going to be faster than double but double arithmetic is pretty fast on on Modern architectures Way",
    "start": "795959",
    "end": "801560"
  },
  {
    "text": "slower than pint without the Overflow check though so getting back to that it",
    "start": "801560",
    "end": "806800"
  },
  {
    "text": "seems um seems scary that I can't do integer arithmetic with JavaScript semantics uh implementing that in a good",
    "start": "806800",
    "end": "814560"
  },
  {
    "text": "way um so types and numbers again hotspot",
    "start": "814560",
    "end": "819839"
  },
  {
    "start": "817000",
    "end": "941000"
  },
  {
    "text": "the virtual machine was originally of course tested and developed with bite code that came from java that's what all",
    "start": "819839",
    "end": "825199"
  },
  {
    "text": "the optimizations originally were based on um so when you presented with stuff",
    "start": "825199",
    "end": "831360"
  },
  {
    "text": "that wasn't Java the pattern mattress might not be nearly as good but we got did people working on that uh the other",
    "start": "831360",
    "end": "838480"
  },
  {
    "text": "approach you can have to this am I an in or a double how do I handle overflows and I mean you can add something you can",
    "start": "838480",
    "end": "845000"
  },
  {
    "text": "add a string to an INT in JavaScript and get a string uh so maybe you have to represent everything as objects which is",
    "start": "845000",
    "end": "851360"
  },
  {
    "text": "the most conservative case at all uh to get the bite code performance to be as type agnostic as you need to be able to",
    "start": "851360",
    "end": "858000"
  },
  {
    "text": "implement JavaScript or Ruby but that's that's nowhere near viable performance",
    "start": "858000",
    "end": "863360"
  },
  {
    "text": "wise uh even if hotspot were good at removing boxing which is is not uh uh it",
    "start": "863360",
    "end": "870000"
  },
  {
    "text": "it would not be fast so the key to Performance is to try to use primitive operations as bite code whenever",
    "start": "870000",
    "end": "876480"
  },
  {
    "text": "possible um I feel a bit constrained about the bite code format as my uh",
    "start": "876480",
    "end": "881639"
  },
  {
    "text": "compil time Target being an old compiler writer that has have various native assembly dialects as my compile time",
    "start": "881639",
    "end": "887680"
  },
  {
    "text": "Target but uh that's the way it is in this high level project uh but at least",
    "start": "887680",
    "end": "893079"
  },
  {
    "text": "we can work with the jvm to make it faster so for bite code performance we",
    "start": "893079",
    "end": "899040"
  },
  {
    "text": "we should at least use whatever static types we can prove which nazron does I",
    "start": "899040",
    "end": "904079"
  },
  {
    "text": "mean if you see a multiplication in JavaScript you know that it has to work on numbers because that's the way",
    "start": "904079",
    "end": "909240"
  },
  {
    "text": "JavaScript specification is done and then um that doesn't take you all the",
    "start": "909240",
    "end": "914839"
  },
  {
    "text": "way towards performance so you optimistically have to assume a lot of stuff about types as well say that this",
    "start": "914839",
    "end": "921279"
  },
  {
    "text": "is probably an INT and uh take a penalty if I'm wrong if it suddenly turns into something else and and like figure out",
    "start": "921279",
    "end": "927560"
  },
  {
    "text": "what the state was and and used another representation and uh we're on that and",
    "start": "927560",
    "end": "933440"
  },
  {
    "text": "it seems to be working really well so far um so JavaScript let's start with",
    "start": "933440",
    "end": "940880"
  },
  {
    "text": "the static type info um this is my first compiler R to",
    "start": "940880",
    "end": "946040"
  },
  {
    "start": "941000",
    "end": "1235000"
  },
  {
    "text": "compiler since I was 17 or something but this is my first compiler for a dynamic typeless",
    "start": "946040",
    "end": "951240"
  },
  {
    "text": "language uh and um you can still infer some static types by looking at",
    "start": "951240",
    "end": "956920"
  },
  {
    "text": "JavaScript something like that you know if you have like bitwise operations like not and bitwise and then or an exor uh",
    "start": "956920",
    "end": "963440"
  },
  {
    "text": "the JavaScript specification tells you that this has to whatever you put in as operators must be queer to ins before",
    "start": "963440",
    "end": "970880"
  },
  {
    "text": "you run the operation so there we have some static information even if if you don't know what the operators are you",
    "start": "970880",
    "end": "976240"
  },
  {
    "text": "still know that before the operation takes place they have to be turned into inss and um for other arithmetic",
    "start": "976240",
    "end": "983519"
  },
  {
    "text": "operations except for ad you can turn them into a JavaScript number according to the same kind of rules it's only the",
    "start": "983519",
    "end": "990079"
  },
  {
    "text": "add operator the plus that can add strings and arbitrary things together uh",
    "start": "990079",
    "end": "995839"
  },
  {
    "text": "that is um pretty much the hardest one to do statically uh any static",
    "start": "995839",
    "end": "1001319"
  },
  {
    "text": "assumptions about um and this shows why it's a really bad idea to overload",
    "start": "1001319",
    "end": "1008920"
  },
  {
    "text": "operators so in the static type info case how do we deal with parameters here",
    "start": "1008920",
    "end": "1015759"
  },
  {
    "text": "is a Java method called Square its sole purpose is to take an integer X and return the square of X you can see int",
    "start": "1015759",
    "end": "1022759"
  },
  {
    "text": "twice here in Java which is a nice strongly typed language um below you see",
    "start": "1022759",
    "end": "1027959"
  },
  {
    "text": "the bite code that results from compiling this method it's actually probably not what Java C writes this is",
    "start": "1027959",
    "end": "1033600"
  },
  {
    "text": "bite code that my brain wrote but it will be semantically equivalent for Java basically load the uh zero parameter",
    "start": "1033600",
    "end": "1040640"
  },
  {
    "text": "duplicate what's on the bite code stack do a multiplication and do a return and these are all instructions that begin",
    "start": "1040640",
    "end": "1046839"
  },
  {
    "text": "with i which mean they handle JavaScript sorry they handle Java inss Java ins",
    "start": "1046839",
    "end": "1051919"
  },
  {
    "text": "only and if you were trying to force a double into the square method by engineering bite code for it you get a",
    "start": "1051919",
    "end": "1057200"
  },
  {
    "text": "verify error because that's the Java sandbox model of it types right but in",
    "start": "1057200",
    "end": "1062320"
  },
  {
    "text": "JavaScript the equivalent function just says function Square X return x * X so",
    "start": "1062320",
    "end": "1068240"
  },
  {
    "text": "Square two is 4 Square 2.1 is 441 4.41 and square of a is a well- defined Nan",
    "start": "1068240",
    "end": "1075159"
  },
  {
    "text": "all all of this is valid JavaScript if you apply the uh um multiplication operator to to the three different types",
    "start": "1075159",
    "end": "1081520"
  },
  {
    "text": "involved here so it's not as simple as I showed you in the last slide we can't just like have an INT method that works",
    "start": "1081520",
    "end": "1087919"
  },
  {
    "text": "an INT uh we have to we have to still conservatively to make this work we have",
    "start": "1087919",
    "end": "1094440"
  },
  {
    "text": "to make sure it takes an object so I change the descriptor from taking an object from taking in to taking an",
    "start": "1094440",
    "end": "1100520"
  },
  {
    "text": "object I load the object with an a prefixed bite code instruction which deals with objects not inss um",
    "start": "1100520",
    "end": "1108240"
  },
  {
    "text": "JavaScript spec says that before I do a multiplication at Le I can trust the multiplication to be on number number",
    "start": "1108240",
    "end": "1115280"
  },
  {
    "text": "operands anyway but before I do the multiplication I have to quer these operant to uh to numbers which I",
    "start": "1115280",
    "end": "1121559"
  },
  {
    "text": "represent as doubles in bite code so I have some queries to double which hopefully just takes a Java Lang integer",
    "start": "1121559",
    "end": "1127360"
  },
  {
    "text": "or a Java Lang double that you sent in as this object and unboxes it it would still be pretty fast it's not the string",
    "start": "1127360",
    "end": "1133440"
  },
  {
    "text": "case here I duplicate whatever I have I do a double multiplication because that's allowed the Position will be",
    "start": "1133440",
    "end": "1139440"
  },
  {
    "text": "enough conservative to JavaScript and I return a double I've changed the return uh called C type to double because",
    "start": "1139440",
    "end": "1145440"
  },
  {
    "text": "that's the widest the multiplication can ever be in JavaScript but I mean it's still starting to look slow and guess",
    "start": "1145440",
    "end": "1151720"
  },
  {
    "text": "again we can do this in JavaScript we can say that whatever we send in is an object whose value of property I've",
    "start": "1151720",
    "end": "1157919"
  },
  {
    "text": "overridden with a function that modifies a global state so they can throw an",
    "start": "1157919",
    "end": "1163000"
  },
  {
    "text": "exception it can do anything when I do the quer to double for the multiplication I have to the queres X",
    "start": "1163000",
    "end": "1170080"
  },
  {
    "text": "Twice first parameter second parameter so this um conservative thing where I just",
    "start": "1170080",
    "end": "1176360"
  },
  {
    "text": "dup the coercion result has to turn into this I basically have to load it twice quer it twice if it modifies a global",
    "start": "1176360",
    "end": "1182799"
  },
  {
    "text": "state do the multiplication and return so you can see we still starting to get significantly slower than what we think",
    "start": "1182799",
    "end": "1188720"
  },
  {
    "text": "of is normal Java bite code already uh there's a lot of magic in in in the number Creation in",
    "start": "1188720",
    "end": "1194919"
  },
  {
    "text": "JavaScript uh you can create an object you can set its value of key to format",
    "start": "1194919",
    "end": "1200200"
  },
  {
    "text": "hard drive function and then much later when you do like plus plus for this object the equation semantics will force",
    "start": "1200200",
    "end": "1206679"
  },
  {
    "text": "format hard drive function to be called so this is um it's a pretty sick language to work with but at least you",
    "start": "1206679",
    "end": "1211919"
  },
  {
    "text": "can glean some some uh information from the uh uh from from The",
    "start": "1211919",
    "end": "1217799"
  },
  {
    "text": "Operators um this turns into the string 10 of course uh in JavaScript due to the",
    "start": "1217799",
    "end": "1223840"
  },
  {
    "text": "quation rules because the empty array when you do un plus it converts it into number which is zero and so on inner",
    "start": "1223840",
    "end": "1231400"
  },
  {
    "text": "arrays and Etc uh this is a Fibonacci calculator",
    "start": "1231400",
    "end": "1237200"
  },
  {
    "start": "1235000",
    "end": "1258000"
  },
  {
    "text": "written in JavaScript that relies on the type collection rules to U calculate",
    "start": "1237200",
    "end": "1242240"
  },
  {
    "text": "Fibonacci sequences you add the underscore variable there is the nth number you",
    "start": "1242240",
    "end": "1248240"
  },
  {
    "text": "want um so what we can do to help with the square function that turned into a",
    "start": "1248240",
    "end": "1253320"
  },
  {
    "text": "very uh very much an object heavy method that always takes an object is to specialize and call all SES because",
    "start": "1253320",
    "end": "1259960"
  },
  {
    "start": "1258000",
    "end": "1462000"
  },
  {
    "text": "perhaps still conservatively conservatively we see something like V",
    "start": "1259960",
    "end": "1265159"
  },
  {
    "text": "AAL B * square of 17.0 and even if someone overwrites",
    "start": "1265159",
    "end": "1271080"
  },
  {
    "text": "square with something else we know at this call site in the program at least that the result of square is always used",
    "start": "1271080",
    "end": "1276360"
  },
  {
    "text": "in the multiplication and the parameter to square is always a double so no matter",
    "start": "1276360",
    "end": "1282600"
  },
  {
    "text": "what square is we know that we can quer the return value to a double in our bite code representation and the parameters",
    "start": "1282600",
    "end": "1290200"
  },
  {
    "text": "so um Let's ignore in overflows for a bit um we can just generate a square",
    "start": "1290200",
    "end": "1296159"
  },
  {
    "text": "that works exclusively on doubles without quation rules for this call site uh using double",
    "start": "1296159",
    "end": "1302720"
  },
  {
    "text": "instructions and um",
    "start": "1302720",
    "end": "1309240"
  },
  {
    "text": "when sorry where am I tricker is weird Okay so",
    "start": "1309760",
    "end": "1318760"
  },
  {
    "text": "what happens though cold site specialization is that I think my slides are a bit in",
    "start": "1318760",
    "end": "1324080"
  },
  {
    "text": "disrepair okay here we go uh say now that someone say says that square is now a new function that takes an argument",
    "start": "1324080",
    "end": "1331000"
  },
  {
    "text": "and returns uh the argument plus a string it suddenly changed from a square function to a string concatenator but",
    "start": "1331000",
    "end": "1337200"
  },
  {
    "text": "the call site Remains the Same so the new version of square is probably conservative and bite code and generated",
    "start": "1337200",
    "end": "1343080"
  },
  {
    "text": "something like this takes an object loads a string does whatever the real uh",
    "start": "1343080",
    "end": "1348159"
  },
  {
    "text": "ads semantic of JavaScript is which is like 200 byte codes probably checking if like different types of different",
    "start": "1348159",
    "end": "1354000"
  },
  {
    "text": "objects doing figuring out the string concatenation we're working with and returning something that's Java lag",
    "start": "1354000",
    "end": "1359480"
  },
  {
    "text": "string in my bite code um but we can fix this because we",
    "start": "1359480",
    "end": "1364559"
  },
  {
    "text": "know that the call site still took the number 17 and used the return uh return value in a multiplication so we can do",
    "start": "1364559",
    "end": "1371640"
  },
  {
    "text": "something like bite code that looks like this a reverse stb with the same semantics takes double returns a double",
    "start": "1371640",
    "end": "1378080"
  },
  {
    "text": "does equs uh to make sure that whatever we sent in are doubles queres return value",
    "start": "1378080",
    "end": "1384640"
  },
  {
    "text": "to double and return and the best thing with method handles and Method handle Frameworks is that this bite code this",
    "start": "1384640",
    "end": "1389720"
  },
  {
    "text": "doesn't exist at all this is just me applying method handle filters to the call site I say put a filter on the",
    "start": "1389720",
    "end": "1395720"
  },
  {
    "text": "zeroth argument and do the like double equation thing put a filter to the return value that was an object and do",
    "start": "1395720",
    "end": "1401120"
  },
  {
    "text": "the double equation thing so just by doing a few method handle operations using the Java Lang invoke package and",
    "start": "1401120",
    "end": "1406760"
  },
  {
    "text": "the new framework that we had around since Java 7 I can actually solve this situation pretty pretty good pretty well",
    "start": "1406760",
    "end": "1412679"
  },
  {
    "text": "for that call site no one's ever going to overwrite string and hopefully the compiler will take care of the like inlining the filters and everything like",
    "start": "1412679",
    "end": "1419520"
  },
  {
    "text": "that so it won't be too much overhead to use the fast version which it turns out not to",
    "start": "1419520",
    "end": "1424600"
  },
  {
    "text": "be but static types we had doubles there they bring us performance but looking at",
    "start": "1424600",
    "end": "1431640"
  },
  {
    "text": "JavaScript source code which is a dynamic language with no type declarations uh it's any way too rare",
    "start": "1431640",
    "end": "1437440"
  },
  {
    "text": "with static types to take take us all the way performance- wise I'm going to show you part one of the octane",
    "start": "1437440",
    "end": "1442880"
  },
  {
    "text": "benchmarks which is like the uh inner function the Hotpot of the crypto Benchmark and we can look at this",
    "start": "1442880",
    "end": "1449720"
  },
  {
    "text": "JavaScript code uh statically with our compiler and infer a lot of stuff from it you don't need to know exactly what",
    "start": "1449720",
    "end": "1455760"
  },
  {
    "text": "this does it's just a lot of bit operations in math but the stuff that's bold here we can tell that these things",
    "start": "1455760",
    "end": "1462840"
  },
  {
    "start": "1462000",
    "end": "1489000"
  },
  {
    "text": "are inss 32-bit inss they can be represented as Java 32-bit in because they're the of a bitwise and with",
    "start": "1462840",
    "end": "1469720"
  },
  {
    "text": "something that's less than 32 bit the result of a bitwise shift and things like that so all these basically if you",
    "start": "1469720",
    "end": "1476799"
  },
  {
    "text": "don't do anything else with them can be represented as Java Java Script Java int",
    "start": "1476799",
    "end": "1482200"
  },
  {
    "text": "for this JavaScript program you look at some of the other arithmetic even if you can't infer inss",
    "start": "1482200",
    "end": "1488600"
  },
  {
    "text": "you can say that well the red stuff here they can surely be represented as double because the minus minus operator and the",
    "start": "1488600",
    "end": "1494320"
  },
  {
    "start": "1489000",
    "end": "1503000"
  },
  {
    "text": "multiplication operator they can work on nothing else the numbers in JavaScript and these are num operations you can even add a pinch of",
    "start": "1494320",
    "end": "1501440"
  },
  {
    "text": "static range analysis and say that well you know XL up there the",
    "start": "1501440",
    "end": "1507360"
  },
  {
    "start": "1503000",
    "end": "1624000"
  },
  {
    "text": "assignment um 32 is wrong it can't be more than 18 bits and the other one is even",
    "start": "1507360",
    "end": "1515520"
  },
  {
    "text": "smaller um you can see the bit size is because you you do a lot of bit operations with constants so that it's",
    "start": "1515520",
    "end": "1521919"
  },
  {
    "text": "12 bits and 18 bits and 12 bits and then you know that this multiplication that multiplies things uh it can never",
    "start": "1521919",
    "end": "1528559"
  },
  {
    "text": "overflow because you're not near 32 bits which would cause it to overflow and and and have to represent it as something",
    "start": "1528559",
    "end": "1534279"
  },
  {
    "text": "else so you can say well that's an INT multiplication because I'm guaranteed from looking at this statically that uh",
    "start": "1534279",
    "end": "1540279"
  },
  {
    "text": "that these will be enough to represent as in but as you see this still some stuff we don't know anything about we",
    "start": "1540279",
    "end": "1546080"
  },
  {
    "text": "got six parameters to this this um this call site to or to this method and we from different call site that can be",
    "start": "1546080",
    "end": "1552279"
  },
  {
    "text": "different things sometimes they can be strings they cause us trouble so we we",
    "start": "1552279",
    "end": "1557679"
  },
  {
    "text": "got somewhere static analysis and and and like doing ins here instead of objects is probably a factor two or",
    "start": "1557679",
    "end": "1563200"
  },
  {
    "text": "three faster than than it would have been just like conservatively use objects in aite code for this JavaScript",
    "start": "1563200",
    "end": "1568559"
  },
  {
    "text": "method but in order to know everything about this method we need to know the parameters as well and we don't we just",
    "start": "1568559",
    "end": "1574039"
  },
  {
    "text": "see the call so I mean do I have to start writing my own inliner as well in my JavaScript runtime in Java shouldn't",
    "start": "1574039",
    "end": "1580559"
  },
  {
    "text": "the jvm be doing that I mean um we can look at call sites and and and see that",
    "start": "1580559",
    "end": "1586279"
  },
  {
    "text": "well you use a constant here and the primitive number there for the first and third parameter um but you can't always",
    "start": "1586279",
    "end": "1593080"
  },
  {
    "text": "see that you can only see that well this is called with X here and and and that's an object as far as as me the static",
    "start": "1593080",
    "end": "1598760"
  },
  {
    "text": "compiler is conserved so the runtime call site to this method if it were correct is actually this is the",
    "start": "1598760",
    "end": "1604640"
  },
  {
    "text": "signature in Java it takes two objects and the rest are ends we knew this but the static compiler cannot prove this",
    "start": "1604640",
    "end": "1611240"
  },
  {
    "text": "ever so I'm trying to make the point here that conservatively compiling something for JavaScript with",
    "start": "1611240",
    "end": "1617000"
  },
  {
    "text": "conservative type guesses it's never going to be enough so I mean we can",
    "start": "1617000",
    "end": "1622440"
  },
  {
    "text": "ignore all primitive types and use boxing everywhere and and and object instructions and say like we're conservative um the jvm is way too slow",
    "start": "1622440",
    "end": "1629880"
  },
  {
    "start": "1624000",
    "end": "1687000"
  },
  {
    "text": "for that there was nowhere near being able to cope with that amount of boxing and probably never will um what what can",
    "start": "1629880",
    "end": "1636880"
  },
  {
    "text": "we do M static analysis well we can do as I said we can use the Primitives that we have and and that definitely gives us",
    "start": "1636880",
    "end": "1643320"
  },
  {
    "text": "performance better than objects anyway depending on the amount of statically provable Primitives",
    "start": "1643320",
    "end": "1648679"
  },
  {
    "text": "which usually is quite low can add some range checking in this case I showed you that another 30% or so but it wasn't",
    "start": "1648679",
    "end": "1654679"
  },
  {
    "text": "World beating uh we can add like ustf chain to the U uh control flow graph that we're",
    "start": "1654679",
    "end": "1660519"
  },
  {
    "text": "building from our JavaScript as to try to establish param types better but I mean this is sort of a lost battle um",
    "start": "1660519",
    "end": "1667880"
  },
  {
    "text": "this is turning into we're going to build our own native JavaScript runtime and and and people already do that so so",
    "start": "1667880",
    "end": "1673320"
  },
  {
    "text": "static analysis is not just the way to go if you want to implement this bite code",
    "start": "1673320",
    "end": "1679320"
  },
  {
    "text": "so we need to become adaptive Dynamic and optimistic like any adaptive runtime needs to be um these days looking at the",
    "start": "1679320",
    "end": "1686880"
  },
  {
    "text": "am3 method and the benchmarks this is what our compiler could prove about the parameter types in the seven different",
    "start": "1686880",
    "end": "1692840"
  },
  {
    "start": "1687000",
    "end": "1769000"
  },
  {
    "text": "call sites this is what we could prove when in fact all of them looked like this with ins but there's no way for us",
    "start": "1692840",
    "end": "1699200"
  },
  {
    "text": "knowing it by just looking at the code we know this of course while linking the program at",
    "start": "1699200",
    "end": "1704640"
  },
  {
    "text": "runtime um so every time we we link a call site the",
    "start": "1704640",
    "end": "1710080"
  },
  {
    "text": "first time we call it we can see what the arguments are so we can generate an optimistic version of of the am3 method",
    "start": "1710080",
    "end": "1716600"
  },
  {
    "text": "that I showed you using these parameters but just because someone calls the method with an INT right now doesn't",
    "start": "1716600",
    "end": "1722000"
  },
  {
    "text": "mean someone will call it with an INT later typical typical example is that someone has a large in of lists with a u",
    "start": "1722000",
    "end": "1728840"
  },
  {
    "text": "an end of list list of inss with an end of list marker which is an undefined",
    "start": "1728840",
    "end": "1733960"
  },
  {
    "text": "which is is is an object in JavaScript so you can be WR a million times but doesn't happen if you doesn't help if",
    "start": "1733960",
    "end": "1739799"
  },
  {
    "text": "you're wrong the a million a once so you can add add guards to this call site using the methal handle framework again",
    "start": "1739799",
    "end": "1745760"
  },
  {
    "text": "add a type check to see that this this optimistic method the optimistic assumption I made about the int is that",
    "start": "1745760",
    "end": "1751360"
  },
  {
    "text": "always true and that's actually quite good because that gets us like two times more the performance again and and now",
    "start": "1751360",
    "end": "1758559"
  },
  {
    "text": "we starting like to get one foot into the dynamic optimistic territory uh but we still nowhere near a native VM like",
    "start": "1758559",
    "end": "1765279"
  },
  {
    "text": "like V8 would be anything like this so really want to use ins wherever we can",
    "start": "1765279",
    "end": "1771279"
  },
  {
    "start": "1769000",
    "end": "1898000"
  },
  {
    "text": "uh doubles is slower than ins was my was my case before um but a simple thing",
    "start": "1771279",
    "end": "1778519"
  },
  {
    "text": "like x++ has to pessimistically be a double operation if we're in the static world because if we can't prove anything",
    "start": "1778519",
    "end": "1784399"
  },
  {
    "text": "else that's the only like the narrowest type guarantee to work um so in this",
    "start": "1784399",
    "end": "1790159"
  },
  {
    "text": "little simple JavaScript program we have a loop with a loop counter X and we see",
    "start": "1790159",
    "end": "1795240"
  },
  {
    "text": "x++ and we can conservatively compile this to some something where we represent X as a bite code double that",
    "start": "1795240",
    "end": "1800279"
  },
  {
    "text": "will always work adding 1.0 every lap of the loop U which of course is a stupid",
    "start": "1800279",
    "end": "1805600"
  },
  {
    "text": "thing to do but it's all we can see as the bite code um U to make the bite code conservative enough for JavaScript um if",
    "start": "1805600",
    "end": "1813200"
  },
  {
    "text": "we change this double to an INT this this function speeds up by a factor of 50 I Benchmark and this is because",
    "start": "1813200",
    "end": "1819519"
  },
  {
    "text": "suddenly hotspot starts doing optimization to it it recognizes the Plus+ as a loop counter as a loop",
    "start": "1819519",
    "end": "1826120"
  },
  {
    "text": "Strider one it unrolls the loop it does a lot of fancy code optimizations that you couldn't do before because of that",
    "start": "1826120",
    "end": "1831960"
  },
  {
    "text": "double was in the way so obviously we really need to use ins whenever we can",
    "start": "1831960",
    "end": "1838000"
  },
  {
    "text": "and um as all non- bitwise arithmetic in JavaScript can potentially overflow the",
    "start": "1838000",
    "end": "1843240"
  },
  {
    "text": "32-bit nice Java inss won't be enough suddenly U and and the plus operator as",
    "start": "1843240",
    "end": "1849240"
  },
  {
    "text": "I said it can it's the worst it can take an object or a string or anything uh we need",
    "start": "1849240",
    "end": "1855480"
  },
  {
    "text": "to how to implement this we need to handle the overflows in some way if we decide to go with int as much as we",
    "start": "1855480",
    "end": "1862080"
  },
  {
    "text": "can so as an experiment I'm not going to say I implemented a typescript front end to nazor but I implemented something",
    "start": "1862080",
    "end": "1868240"
  },
  {
    "text": "that looks like a very slim down version of a typescript front end uh which is basically for those of you don't who",
    "start": "1868240",
    "end": "1873760"
  },
  {
    "text": "don't know a JavaScript extension that you can handle things like classes and types and I declared things like inss",
    "start": "1873760",
    "end": "1880320"
  },
  {
    "text": "here inss there and nazor immediately generates bite code that has a lot more",
    "start": "1880320",
    "end": "1886360"
  },
  {
    "text": "performance it performs really well with primitive int types uh if if we can prove them which",
    "start": "1886360",
    "end": "1893000"
  },
  {
    "text": "has been the problem all this uh talk that we can't so um first problem as I said is",
    "start": "1893000",
    "end": "1899240"
  },
  {
    "start": "1898000",
    "end": "1949000"
  },
  {
    "text": "the Overflow check overhead uh at the top of the screen there is is a function called add exact which adds to Java",
    "start": "1899240",
    "end": "1906039"
  },
  {
    "text": "integers the 32bit long and U checks that the result did not overflow which",
    "start": "1906039",
    "end": "1911519"
  },
  {
    "text": "involves two exors and an and and and and a comparison with zero which is maybe six or seven assemblies",
    "start": "1911519",
    "end": "1917880"
  },
  {
    "text": "instructions if you just naively compile it and I can generate a JavaScript version like up that optimistically",
    "start": "1917880",
    "end": "1924279"
  },
  {
    "text": "assumes X is an end and uses the ad exact as my ad function and let's handle",
    "start": "1924279",
    "end": "1929639"
  },
  {
    "text": "the case that we overflow later but this is potentially I mean this would hope",
    "start": "1929639",
    "end": "1935480"
  },
  {
    "text": "would be fast because it's inter arithmetic but the Overflow check turns out that it makes it as pretty pretty much as slow as the case when we had a",
    "start": "1935480",
    "end": "1941559"
  },
  {
    "text": "double instruction so this was uh was depressing to discover but um it could",
    "start": "1941559",
    "end": "1948159"
  },
  {
    "text": "be solved because this ad exact function is copied verbatim from the Java class libraries Java l math has them in eight",
    "start": "1948159",
    "end": "1955240"
  },
  {
    "start": "1949000",
    "end": "2309000"
  },
  {
    "text": "has has um operations for adding subtracting and multiplying things with overflow checks and if it overflows It",
    "start": "1955240",
    "end": "1961240"
  },
  {
    "text": "cast an arithmetic exception so we could intrin ify them because basically ad exact if you look at like how the",
    "start": "1961240",
    "end": "1967080"
  },
  {
    "text": "optimal assembly for ad exact would be it's just an x86 and add instruction jump an overflow to a failure place that",
    "start": "1967080",
    "end": "1973600"
  },
  {
    "text": "throws the exception and um return whatever the sum was otherwise and it's never going to overflow because if",
    "start": "1973600",
    "end": "1979399"
  },
  {
    "text": "people use in it tends to be in in JavaScript it's very rare it's anything else so this is pretty good because it's",
    "start": "1979399",
    "end": "1985519"
  },
  {
    "text": "just about 10% slower than just using an I add just using the ad without any overflow check when it doesn't fall",
    "start": "1985519",
    "end": "1991440"
  },
  {
    "text": "doesn't fault and it's twice the speed of the non- intrinsi version with the xsource uh this is only slightly faster",
    "start": "1991440",
    "end": "1997840"
  },
  {
    "text": "than the dad but it enables everything because the return value here is usually an INT and that will Ripple down to",
    "start": "1997840",
    "end": "2004519"
  },
  {
    "text": "other people other functions other applications that can also used this int and then if we switch to an INT",
    "start": "2004519",
    "end": "2010679"
  },
  {
    "text": "arithmetic world I can guarantee you it's faster than anything else so I wanted some more um um intrinsics for",
    "start": "2010679",
    "end": "2018639"
  },
  {
    "text": "common math operations in in jdk8 and um I actually forgot to take out this slide",
    "start": "2018639",
    "end": "2023840"
  },
  {
    "text": "because the excellent guys in the cor Libs team implemented this for me so now I have all the uh um Java arithmetic or",
    "start": "2023840",
    "end": "2030120"
  },
  {
    "text": "JavaScript arithmetic is Java math operations in Java 8 so is great so looking at the bite code for my",
    "start": "2030120",
    "end": "2039320"
  },
  {
    "text": "add exact thingy here um which has been intrinsi in the assembly code this is",
    "start": "2039320",
    "end": "2044760"
  },
  {
    "text": "almost native fast this is almost as fast as V8 does it if you run the same JavaScript program on",
    "start": "2044760",
    "end": "2050398"
  },
  {
    "text": "V8 um which is pretty cool so the key to the whole concept here was like this is",
    "start": "2050399",
    "end": "2057079"
  },
  {
    "text": "looks a lot more like Java would do with ins and U would use integer instructions",
    "start": "2057079",
    "end": "2062118"
  },
  {
    "text": "on the assembly level and be pretty slim um one more optimization that we",
    "start": "2062119",
    "end": "2068158"
  },
  {
    "text": "need to do is when you look at the Loop invariant X less than y y might as you",
    "start": "2068159",
    "end": "2074638"
  },
  {
    "text": "see it's an invoked Dynamic getter because we have no idea what it is it can be something that has Global side effects if someone's overridden value",
    "start": "2074639",
    "end": "2081480"
  },
  {
    "text": "all I don't know but this is fairly simple static analysis we can put like",
    "start": "2081480",
    "end": "2086960"
  },
  {
    "text": "the Primitive check out of the loop again if turns out not to be a primitive",
    "start": "2086960",
    "end": "2092079"
  },
  {
    "text": "for our comparison um something horrible will happen that I'm getting to but it's not going to be that because compar an",
    "start": "2092079",
    "end": "2098119"
  },
  {
    "text": "INT with something in JavaScript I mean that gamble holds but you have to handle the case that it doesn't so if we just",
    "start": "2098119",
    "end": "2103480"
  },
  {
    "text": "put the check out and bail if if it turns out to be wrong um and just keep it in a local variable like this this is",
    "start": "2103480",
    "end": "2110160"
  },
  {
    "text": "native fast this is as fast as V8 does it with from bite code so this this is pretty",
    "start": "2110160",
    "end": "2116079"
  },
  {
    "text": "cool um because hotspot can't like it sees that in the uh instruction there",
    "start": "2116079",
    "end": "2121520"
  },
  {
    "text": "get Y and it can't really tell if it has side effects or anything even if it inlines it uh it's not something you",
    "start": "2121520",
    "end": "2127079"
  },
  {
    "text": "want to do every lap in the loop if you can avoid it so here's our native fast code all",
    "start": "2127079",
    "end": "2133160"
  },
  {
    "text": "generated from bite code by using some static analysis and some optimism",
    "start": "2133160",
    "end": "2139960"
  },
  {
    "text": "so another very common instance of the same problem is that you have a function in JavaScript like function f there I",
    "start": "2139960",
    "end": "2146240"
  },
  {
    "text": "hope the font isn't too small I should have bumped it up a bit that takes number 17 and adds an array element",
    "start": "2146240",
    "end": "2152440"
  },
  {
    "text": "array of three to it and um the bite code the conservative bite code that you",
    "start": "2152440",
    "end": "2158400"
  },
  {
    "text": "generate we don't know anything about array it's something in our scope so well there's an element getter and in",
    "start": "2158400",
    "end": "2163880"
  },
  {
    "text": "order to make that make sure that works with whatever comes after we return an object from the array even if it was an",
    "start": "2163880",
    "end": "2169359"
  },
  {
    "text": "in Array which is most likely the case it's going to be a boxed int for for types to work and well we can do an ad",
    "start": "2169359",
    "end": "2175400"
  },
  {
    "text": "operation which is slightly less better slightly better than the generic JavaScript ad we know that 17 is an INT",
    "start": "2175400",
    "end": "2181880"
  },
  {
    "text": "at least so we can have like an INT constant and then it could be anything because we can't prove what the object is and this is really common and really",
    "start": "2181880",
    "end": "2188960"
  },
  {
    "text": "horribly slow in my static World here so what I want to do is to get this instead",
    "start": "2188960",
    "end": "2196160"
  },
  {
    "text": "I want to switch out my conservative object array getter and my conservative",
    "start": "2196160",
    "end": "2202200"
  },
  {
    "text": "Adder to something that returns an INT I want to gamble that it really an array",
    "start": "2202200",
    "end": "2208000"
  },
  {
    "text": "full of ins which is going to be and do the invoke static math exact which we proven to be fast but of course it might",
    "start": "2208000",
    "end": "2216680"
  },
  {
    "text": "not be inst in the so what do we do I mean if if if the array returns an object we stand there with bite code",
    "start": "2216680",
    "end": "2221880"
  },
  {
    "text": "that assumes an INT and everything depends on that so we'll have verify errors so it seems like a hard problem",
    "start": "2221880",
    "end": "2228079"
  },
  {
    "text": "to solve um what happens if we have an arithmetic operation that overflows or",
    "start": "2228079",
    "end": "2233480"
  },
  {
    "text": "if we miss an assumption if it really turned out to be an array full of strings and you wanted to concatenate all the strings with 17 and we just",
    "start": "2233480",
    "end": "2240160"
  },
  {
    "text": "assume that we got ins back so bite code is strongly typed I can't just like go in there and replace I add instructions",
    "start": "2240160",
    "end": "2247599"
  },
  {
    "text": "with d add instructions so we can't reuse the same code so we have to throw errors or add guards to version the code",
    "start": "2247599",
    "end": "2254880"
  },
  {
    "text": "whenever we deal with a return value that's uncertain I might have to Branch this code into the case am I dealing",
    "start": "2254880",
    "end": "2260200"
  },
  {
    "text": "with an object from the array or am I dealing with an INT from the array or a",
    "start": "2260200",
    "end": "2265359"
  },
  {
    "text": "double or a long uh it's going to bloat horribly for very branchy code it's",
    "start": "2265359",
    "end": "2270440"
  },
  {
    "text": "going to be completely unmanageable um so I can't version code",
    "start": "2270440",
    "end": "2275599"
  },
  {
    "text": "based on return types copy code everywhere so the only mechanism we have in bite code that can help us here for",
    "start": "2275599",
    "end": "2282960"
  },
  {
    "text": "asynchronous error is the catch so what we basically do is to have to add a catch block around every optimistic",
    "start": "2282960",
    "end": "2289560"
  },
  {
    "text": "assumption we have take a continuation of the state when the catch happens and",
    "start": "2289560",
    "end": "2295000"
  },
  {
    "text": "jump to a less specialized version of the code just continue from that continuation and now he's like uh oh he",
    "start": "2295000",
    "end": "2300760"
  },
  {
    "text": "said continuation this is I mean this is what's how how are we going to get out of this but it turns out that that we",
    "start": "2300760",
    "end": "2308640"
  },
  {
    "text": "can actually get out of this uh if we have bite code that looks like this",
    "start": "2308640",
    "end": "2314280"
  },
  {
    "start": "2309000",
    "end": "2661000"
  },
  {
    "text": "again my font is small but we load the array uh we load an index um and we have an optimistic",
    "start": "2314280",
    "end": "2322520"
  },
  {
    "text": "getter that assumes that whatever is on this index is returns an INT and then",
    "start": "2322520",
    "end": "2327920"
  },
  {
    "text": "continue with int arithmetic on it and like pretend everything is INS everything is fine um what we can do with this uh",
    "start": "2327920",
    "end": "2337520"
  },
  {
    "text": "Dynamic getter it's an invoked Dynamic so we can put a lot of stuff available at compile time in it we can use the",
    "start": "2337520",
    "end": "2343480"
  },
  {
    "text": "constant pool from the Java class file to put say flags on this invoke Dynamic",
    "start": "2343480",
    "end": "2348599"
  },
  {
    "text": "instruction at compile time saying that this I call this an optimistic call site and I call this place where it's calling",
    "start": "2348599",
    "end": "2354880"
  },
  {
    "text": "from program Point 17 or whatever program point you mean it's probably it's trivial problem you can just",
    "start": "2354880",
    "end": "2360480"
  },
  {
    "text": "enumerate all invoke Dynamics from the first 0 1 2 3 so you can uniquely identify them as program points in the",
    "start": "2360480",
    "end": "2366920"
  },
  {
    "text": "program and then you add a return value",
    "start": "2366920",
    "end": "2372920"
  },
  {
    "text": "filter um throwing exception we call this an unwarranted optimism exception in nasorn because there's a lot of",
    "start": "2372920",
    "end": "2379359"
  },
  {
    "text": "unwarranted optimism in JavaScript U that contains things like where did these this assumption go wrong",
    "start": "2379359",
    "end": "2385920"
  },
  {
    "text": "give me the program Point ID and give me the return value as an object because",
    "start": "2385920",
    "end": "2391040"
  },
  {
    "text": "obviously this wasn't an in so it was a Java Lang double or it was a string or whatever keep this in the exception",
    "start": "2391040",
    "end": "2397680"
  },
  {
    "text": "take bite code take the bite code and Surround it",
    "start": "2397680",
    "end": "2402920"
  },
  {
    "text": "with something like this a TR catch block for the N warranted optimism exception um if this happens um there's",
    "start": "2402920",
    "end": "2411800"
  },
  {
    "text": "another Quirk here we have to make sure that the bite code stack is written to when we execute an optimistic assumption",
    "start": "2411800",
    "end": "2417640"
  },
  {
    "text": "because uh exceptions in JavaScript they break the bite code stack they don't break the local variables however so",
    "start": "2417640",
    "end": "2424079"
  },
  {
    "text": "it's a little bit tricky but we own the compiler the bite code compilers we can make sure that all the state is in local",
    "start": "2424079",
    "end": "2429319"
  },
  {
    "text": "Bode variables so we catch this exception um and create a new exception with the",
    "start": "2429319",
    "end": "2436040"
  },
  {
    "text": "program Point ID return value and the state the continuation state of the locals this is not a full continuation",
    "start": "2436040",
    "end": "2442200"
  },
  {
    "text": "this is just like one frame we need is to tell the Linker to relink the",
    "start": "2442200",
    "end": "2447520"
  },
  {
    "text": "method generate the rest of the method after this program Point more pessimistically like ready run through",
    "start": "2447520",
    "end": "2454400"
  },
  {
    "text": "generate a less optimistic version of the prog program or the or the method and jump to it so we just need it to",
    "start": "2454400",
    "end": "2460319"
  },
  {
    "text": "unwind one stack frame this is basically what you see here unstack replacement in",
    "start": "2460319",
    "end": "2465440"
  },
  {
    "text": "bite code which I don't think anyone has ever done before but when you work with bite code performance you get desperate",
    "start": "2465440",
    "end": "2470640"
  },
  {
    "text": "after a while turns out that it actually works really well so we know when we're",
    "start": "2470640",
    "end": "2476200"
  },
  {
    "text": "relinking a rewritable method we just do like a method handle combinator again to the call site they're always invoked",
    "start": "2476200",
    "end": "2482359"
  },
  {
    "text": "with an invoke Dynamic put an invoke Dynamic catch exception in there which will trigger a Rec potion with a failed",
    "start": "2482359",
    "end": "2489119"
  },
  {
    "text": "call site made more pessimistic and in order to get there we have to unwind the state from where we threw the exception",
    "start": "2489119",
    "end": "2495640"
  },
  {
    "text": "which means generating the rest of the method more conservatively just like",
    "start": "2495640",
    "end": "2500760"
  },
  {
    "text": "really slowly running through one lap get the pessimistic return value and then the next time this call is made we",
    "start": "2500760",
    "end": "2507640"
  },
  {
    "text": "call a less optimistic version of the method and there is of course some warm-up problems to this but it seems to",
    "start": "2507640",
    "end": "2513040"
  },
  {
    "text": "work really well it gets us the performance we need for everything thing is mostly into arithmetic even if you",
    "start": "2513040",
    "end": "2519040"
  },
  {
    "text": "don't have if you can't prove it so I'm going to finish off talking a little bit about the jvm",
    "start": "2519040",
    "end": "2525480"
  },
  {
    "text": "situation um Java 7 was the first jvm implementation where we had invoked Dynamic and not many people in here had",
    "start": "2525480",
    "end": "2532839"
  },
  {
    "text": "worked with it but people like me and Char notter who did and everyone on the mailing list were quite aware of the",
    "start": "2532839",
    "end": "2538000"
  },
  {
    "text": "famous or the infamous no class that found arror bug which basically through a new class they found errors um after a",
    "start": "2538000",
    "end": "2545559"
  },
  {
    "text": "while if you manipulated too many method handles and this could be circumvented only by running with everything",
    "start": "2545559",
    "end": "2550640"
  },
  {
    "text": "completely insecure in the boot class path um so for Java 8 a lot of C++ that",
    "start": "2550640",
    "end": "2557079"
  },
  {
    "text": "was the original uh method handle implementation were Rewritten in Java and reimplemented something called",
    "start": "2557079",
    "end": "2562720"
  },
  {
    "text": "Lambda forms which is the inner workings of a method handle that are Java classes in the Java Lang invoke package",
    "start": "2562720",
    "end": "2568400"
  },
  {
    "text": "internally and not specified and initially when we started to try this releases we got down to 10% of whatever",
    "start": "2568400",
    "end": "2575720"
  },
  {
    "text": "performance we have in Java 7 there's been a lot of Despair throughout this project and some of you may have gone to",
    "start": "2575720",
    "end": "2581559"
  },
  {
    "text": "Charlie n's presentation at other ven news and um then you know that an invoke Dynamic stack tracing Java 8 in this",
    "start": "2581559",
    "end": "2587720"
  },
  {
    "text": "case for just calling math round looks for some reason like this so that's a",
    "start": "2587720",
    "end": "2594400"
  },
  {
    "text": "big WTF right there from the main function down to the math round implementation we have Lambda form",
    "start": "2594400",
    "end": "2599559"
  },
  {
    "text": "Lambda form Lambda form Lambda form these generate their own bite code they weave their own bite code which in turn",
    "start": "2599559",
    "end": "2605720"
  },
  {
    "text": "is implemented which is turn which in turn is compiled uh and and inlined into",
    "start": "2605720",
    "end": "2612400"
  },
  {
    "text": "uh into the IR for the original method in hotspot and I think the design had to",
    "start": "2612400",
    "end": "2617599"
  },
  {
    "text": "do with um portability because you got a lot of Java for all platforms and that",
    "start": "2617599",
    "end": "2622960"
  },
  {
    "text": "the C2 compiler in hotspot really sucks with ir you can't just take ir and splice it in in any any way that makes",
    "start": "2622960",
    "end": "2629480"
  },
  {
    "text": "sense so this is the way it ended up so obviously it needs to be some optimization efforts here the guys",
    "start": "2629480",
    "end": "2635359"
  },
  {
    "text": "originally in the compiler team were like yeah I will just fix the inliner and everything will be fine but of course the world is not that simple this",
    "start": "2635359",
    "end": "2642119"
  },
  {
    "text": "is a slide I borrowed from Charlie he wants me to evangelize it whenever I see it it's from fosm 2013 when he says like",
    "start": "2642119",
    "end": "2648559"
  },
  {
    "text": "his first java8 Lambda form experience is Fu calling bar calling baz calling sleep so the first question that we had",
    "start": "2648559",
    "end": "2656480"
  },
  {
    "text": "to ask hot spot when it came to dynamic dynamic holes and invoke Dynamic is why you know inline we had this mindset for",
    "start": "2656480",
    "end": "2663880"
  },
  {
    "start": "2661000",
    "end": "2892000"
  },
  {
    "text": "almost a year while the coding guys and US helped each other are trying to sort out the inlining problems",
    "start": "2663880",
    "end": "2671000"
  },
  {
    "text": "but even for normal Java code there's inlining problems at least if you use hot spot or traditionally uh Hot Spot",
    "start": "2671000",
    "end": "2678040"
  },
  {
    "text": "since last year because I mean you probably notice this in Java programs you add one line of code in some",
    "start": "2678040",
    "end": "2683280"
  },
  {
    "text": "function and suddenly 50% of your performance disappears from your program at least I've noticed that and that's",
    "start": "2683280",
    "end": "2688559"
  },
  {
    "text": "because I've seen that from time to time with hotspots and this is relevant and are quick code paths in the nazor and Java code as well and this because",
    "start": "2688559",
    "end": "2694960"
  },
  {
    "text": "hotspot had like a sharp upper inl limit where suddenly it stopped inlining uh",
    "start": "2694960",
    "end": "2700000"
  },
  {
    "text": "jrocket never did it that way we had incremental inlining so basically as long as we have time left and can shrink",
    "start": "2700000",
    "end": "2705280"
  },
  {
    "text": "the code mass and bring more code in we will which is something that hotspot had to implement uh with uh uh these Lambda",
    "start": "2705280",
    "end": "2713040"
  },
  {
    "text": "form stack traces being the driving case uh so Lambda forms and Method handles they put tremendous pressure on the",
    "start": "2713040",
    "end": "2719319"
  },
  {
    "text": "inlining um and also on the meta space The Meta data in the machine used to be in the perm G but it's the meta space",
    "start": "2719319",
    "end": "2725079"
  },
  {
    "text": "I'm getting there and we also discovered a few very old bugs in the C2 inliner for example that dead nodes counted its",
    "start": "2725079",
    "end": "2731280"
  },
  {
    "text": "size that had been there for 10 years and no one had known about uh so Roland",
    "start": "2731280",
    "end": "2736559"
  },
  {
    "text": "on the compiler team pushed incremental inlining last Christmas and that doubled pretty much old invoke Dynamic",
    "start": "2736559",
    "end": "2741839"
  },
  {
    "text": "performance it was immediately so that was quite a heroic Little Feat uh of course there some other things left like",
    "start": "2741839",
    "end": "2748280"
  },
  {
    "text": "warmup and scalability and meta space which repl permgen uh because Lambda forms that are parts of the method",
    "start": "2748280",
    "end": "2754960"
  },
  {
    "text": "handle they compile a lot of code and generate lot of stress on the metadata in the system um so if we have to have Lambda",
    "start": "2754960",
    "end": "2763079"
  },
  {
    "text": "forms I'm not sure I is currently the jury is out on this I'm not sure they can remain in bite code land because",
    "start": "2763079",
    "end": "2769720"
  },
  {
    "text": "basically we added a whole new jet compiler even if an invoke Dynamic call cost us zero CPU Cycles all the meta",
    "start": "2769720",
    "end": "2776440"
  },
  {
    "text": "data around it having to generate the Lambda form its classes compiling the bite code takes us time so it's not the",
    "start": "2776440",
    "end": "2783640"
  },
  {
    "text": "most efficient way of implementing evoke Dynamic that that that is sure um and",
    "start": "2783640",
    "end": "2789640"
  },
  {
    "text": "inlining despite tweaking has a lot of problems that remain to be solved like type profiling and stuff you can share",
    "start": "2789640",
    "end": "2795800"
  },
  {
    "text": "Lambda forms like now now hotspot compiles the same Lambda form for two identical but different call sites and",
    "start": "2795800",
    "end": "2801920"
  },
  {
    "text": "you can share that but that opens up a can of worms with profiling data that you don't have and so",
    "start": "2801920",
    "end": "2807119"
  },
  {
    "text": "on and then it's boxing removal because there's a lot of implicit boxing going on in the method handle apis it says",
    "start": "2807119",
    "end": "2813960"
  },
  {
    "text": "object but it's really a javalang double A javal Lang int and hotspot only does global Escape analysis",
    "start": "2813960",
    "end": "2820319"
  },
  {
    "text": "which is sort of the facilitator for boxing and uh it's really hard to get rid of all the boxing that we need to",
    "start": "2820319",
    "end": "2826520"
  },
  {
    "text": "get rid of and and we have a really good guy working on this but it's it's again uh hotspot uses a transform domain where",
    "start": "2826520",
    "end": "2833400"
  },
  {
    "text": "it's really hard to get certain things working and this is one of them very simple to get other things working but very hard to get things like this",
    "start": "2833400",
    "end": "2839880"
  },
  {
    "text": "working we have the method handle invoker I'm just going to skip past this I'm running out of time when you invoke",
    "start": "2839880",
    "end": "2845520"
  },
  {
    "text": "something uh from java with method handle the reflection equivalent is pretty slow your typical JavaScript apply is done",
    "start": "2845520",
    "end": "2852400"
  },
  {
    "text": "like to slow um small code to look at but basically",
    "start": "2852400",
    "end": "2857520"
  },
  {
    "text": "jrocket could turn this into return 140 and hotspot isn't there yet but that's that I think the changes were pushed",
    "start": "2857520",
    "end": "2863920"
  },
  {
    "text": "that actually made some really great improvements for uh uh method handling voke last week and we have to do stuff",
    "start": "2863920",
    "end": "2871119"
  },
  {
    "text": "like this in our Java code still to get around the inlining and boxing stuff like don't read it don't bother to read",
    "start": "2871119",
    "end": "2876480"
  },
  {
    "text": "this code but here's three methods and uh they look fairly similar to you don't they we just have to have these three",
    "start": "2876480",
    "end": "2882079"
  },
  {
    "text": "copies to get rid of the boxing that otherwise would actually add 15% performance overhead or so so even as a",
    "start": "2882079",
    "end": "2888359"
  },
  {
    "text": "Java program we have to care about what the jit does which is a bit sad uh so warmup invoke Dynamic needs",
    "start": "2888359",
    "end": "2896480"
  },
  {
    "start": "2892000",
    "end": "2923000"
  },
  {
    "text": "bootstrapping as Brian said every call site contributes to warm up the first time it's call we have to set it up",
    "start": "2896480",
    "end": "2902040"
  },
  {
    "text": "Lambda forms as you see contribute to code generation and warmup tiered compilation which which is a technique",
    "start": "2902040",
    "end": "2907520"
  },
  {
    "text": "that hotspot uses to either run the fast compiler C1 that produces worse code",
    "start": "2907520",
    "end": "2912920"
  },
  {
    "text": "than the slow compiler C2 which is the second step added even more standard deviation so it's been really hard to",
    "start": "2912920",
    "end": "2918520"
  },
  {
    "text": "measure this thing what's fast and what's not fast we have the meta space some people might cheer including me to",
    "start": "2918520",
    "end": "2925079"
  },
  {
    "start": "2923000",
    "end": "3064000"
  },
  {
    "text": "know that permgen is a thing of the past for Java 7 no more permgen errors we will use native off Heap memory that",
    "start": "2925079",
    "end": "2931799"
  },
  {
    "text": "will uh grow in order to U accommodate metadata not uh the perm gen on Heap",
    "start": "2931799",
    "end": "2937880"
  },
  {
    "text": "thing that you could never be sure how much you needed uh but during the development it turns out the runtime",
    "start": "2937880",
    "end": "2943079"
  },
  {
    "text": "didn't know about some of the intricate details of Lambda form implementation called Anonymous classes not the",
    "start": "2943079",
    "end": "2948319"
  },
  {
    "text": "Anonymous classes that you're used to but something internally in the VMS we had like 15 broken bills there for a",
    "start": "2948319",
    "end": "2954079"
  },
  {
    "text": "while which stressed us out mightily we had problems with compass compressed class pointers which gave us a fixed",
    "start": "2954079",
    "end": "2959440"
  },
  {
    "text": "slight chunks of memory that we ran out though and like being the world's bleeding edge invoke Dynamic consumer",
    "start": "2959440",
    "end": "2965000"
  },
  {
    "text": "with the VM not having seen this kind of patterns before was was really uh not a fun ride we had a lot of metas space",
    "start": "2965000",
    "end": "2971839"
  },
  {
    "text": "fragmentation but the good thing is that we were able to help the memory team with reproducers and help them fix all",
    "start": "2971839",
    "end": "2977280"
  },
  {
    "text": "these kinds of things so so I think all of them are fixed or in the process of being fixed right",
    "start": "2977280",
    "end": "2983520"
  },
  {
    "text": "now so what we have to do for nasorn currently nazor if take down a jdk8 bill doesn't do this optimistic fast uh type",
    "start": "2983520",
    "end": "2991280"
  },
  {
    "text": "guessing thing um it currently lives in a sandbox that will go in there hopefully before Java 8 first release",
    "start": "2991280",
    "end": "2998720"
  },
  {
    "text": "otherwise it'll be an update release uh forward-looking statements you saw the legal slide I can think might might not",
    "start": "2998720",
    "end": "3004920"
  },
  {
    "text": "as well happen but we hope that's the plan uh we want to add some static analysis uh some better representation",
    "start": "3004920",
    "end": "3011480"
  },
  {
    "text": "so we can make even better type guesses uh we want to play more with the jvm internals so we can do something like uh",
    "start": "3011480",
    "end": "3018280"
  },
  {
    "text": "tagged objects much like native JavaScript run times do so that you have",
    "start": "3018280",
    "end": "3023960"
  },
  {
    "text": "a a structure that the garbage collector is aware of for an object or a field",
    "start": "3023960",
    "end": "3029000"
  },
  {
    "text": "that you can check is this um an object or is this an in or long or a double but",
    "start": "3029000",
    "end": "3034839"
  },
  {
    "text": "it just looks like an object field or an object array so we had a discussion on the multilanguage mailing list which is",
    "start": "3034839",
    "end": "3041520"
  },
  {
    "text": "in the open jdk as well about something we call Sun Miss tag array and and Ricker is in the audience here somewhere",
    "start": "3041520",
    "end": "3047319"
  },
  {
    "text": "hacked up a prototype parallelism is also nice um there's plenty of parallel Frameworks",
    "start": "3047319",
    "end": "3053319"
  },
  {
    "text": "like web workers and stuff that try to present parallelism in an implicit way in JavaScript so uh to the user for want",
    "start": "3053319",
    "end": "3060160"
  },
  {
    "text": "to do something like that um boxing removal in the jvm",
    "start": "3060160",
    "end": "3065799"
  },
  {
    "start": "3064000",
    "end": "3102000"
  },
  {
    "text": "intrinsics Lambda form caching I talked about all these things that need to be improved in the jvm maybe even bite code",
    "start": "3065799",
    "end": "3072040"
  },
  {
    "text": "is not the correct format to do this in if I like Wax poetically and look into the future what would we like how would",
    "start": "3072040",
    "end": "3077520"
  },
  {
    "text": "it work maybe we should have pluggable front ends for the jvm for different languages there's research going on into",
    "start": "3077520",
    "end": "3083240"
  },
  {
    "text": "that but we're talking Java 10 Java 11 uh it would be fun if I could talk to my",
    "start": "3083240",
    "end": "3088440"
  },
  {
    "text": "compiler in this case being the jit or my jit could talk back to me and said basically here are your types you were",
    "start": "3088440",
    "end": "3093520"
  },
  {
    "text": "just you were just optimized so I I just conclude with like showing how how how good this optimistic",
    "start": "3093520",
    "end": "3099520"
  },
  {
    "text": "type approach uh worked after about two and a half weeks of work we took the A3 method that I showed you before and and",
    "start": "3099520",
    "end": "3106280"
  },
  {
    "start": "3102000",
    "end": "3128000"
  },
  {
    "text": "ran it and turn into micro Benchmark and ran it so the old Rhino that's no problem beating the old Rhino who did",
    "start": "3106280",
    "end": "3112240"
  },
  {
    "text": "this in 34 seconds nazor in Java 8 did it in 10 11 seconds V8 did it in 1.3",
    "start": "3112240",
    "end": "3117960"
  },
  {
    "text": "seconds which is certainly a very discouraging thing uh data to look at with Native run times compared to Java",
    "start": "3117960",
    "end": "3123640"
  },
  {
    "text": "run times um so we added optimistic types 5.8 seconds uh Rick had intrinsi",
    "start": "3123640",
    "end": "3131200"
  },
  {
    "start": "3128000",
    "end": "3134000"
  },
  {
    "text": "the math methods the way I explained them 4.4 seconds we added some type profiling to the inliner 2.5 seconds so",
    "start": "3131200",
    "end": "3139839"
  },
  {
    "start": "3138000",
    "end": "3312000"
  },
  {
    "text": "it's really not that hard if you get the optimistic framework up and running and and it's definitely comparable to Native",
    "start": "3139839",
    "end": "3145119"
  },
  {
    "text": "speeds so that is why uh HR will send a Stern note",
    "start": "3145119",
    "end": "3150280"
  },
  {
    "text": "to my boss saying that Marcus doesn't take his vacation days which they they they seriously they",
    "start": "3150280",
    "end": "3155880"
  },
  {
    "text": "do that so if you want to know more if you want to know more info you can talk to the team that's been like the",
    "start": "3155880",
    "end": "3162559"
  },
  {
    "text": "multilanguage team where on Twitter uh there is a nazor Blog where we post news and you if you have some cool project",
    "start": "3162559",
    "end": "3168680"
  },
  {
    "text": "there we would invite you to guest blog if you send us information about it if you use Nas for hybrid",
    "start": "3168680",
    "end": "3174799"
  },
  {
    "text": "operations uh this guy in Australia done some really cool Java FX things using like a Java FX canvas it's a JavaScript",
    "start": "3174799",
    "end": "3181960"
  },
  {
    "text": "canvas and got a frame rate that was was better than Chrome because Java FX apparently kicks ass I didn't know that",
    "start": "3181960",
    "end": "3187839"
  },
  {
    "text": "there's two mailing lists Nas or Dev mlbm Dev on the open Java of jdk uh list",
    "start": "3187839",
    "end": "3193680"
  },
  {
    "text": "that you can follow and ask questions on um that's basically all I had sorry",
    "start": "3193680",
    "end": "3199280"
  },
  {
    "text": "if I had ran a little bit over time but George said I should take it slowly and in fact um I was just going to address",
    "start": "3199280",
    "end": "3206000"
  },
  {
    "text": "that because as you all know it's lunch directly after this um however I know is",
    "start": "3206000",
    "end": "3211520"
  },
  {
    "text": "so smart that she said we're going to time things so that no one has to wait in in line a really long time so of",
    "start": "3211520",
    "end": "3218680"
  },
  {
    "text": "course you would much rather be here asking questions about noorn uh than standing in a boring line waiting for",
    "start": "3218680",
    "end": "3224960"
  },
  {
    "text": "lunch um and we do have a few questions um I don't dare to update this because I've heard horror stories so I'm going",
    "start": "3224960",
    "end": "3231400"
  },
  {
    "text": "to take the questions that are here um and I know some people had problems posting also",
    "start": "3231400",
    "end": "3237280"
  },
  {
    "text": "um so if if you have a question and and uh it's not on here you can just raise",
    "start": "3237280",
    "end": "3243760"
  },
  {
    "text": "your hand and I'll come with mik um but let's go ahead and start here I'll give you of course it times",
    "start": "3243760",
    "end": "3251040"
  },
  {
    "text": "out okay I will let you uh Mach and I I think there are a couple of those that",
    "start": "3252880",
    "end": "3258079"
  },
  {
    "text": "are essentially the same question yes some of them are the same how does n performance compared to NAS performance compared to the native JavaScript",
    "start": "3258079",
    "end": "3263480"
  },
  {
    "text": "implementation well you saw that we're getting there we're working on it um with regard to int overflow check-in",
    "start": "3263480",
    "end": "3271559"
  },
  {
    "text": "could the jvm jit be taught to optimize that into just checking the Overflow flag yes I think that's what we did",
    "start": "3271559",
    "end": "3277799"
  },
  {
    "text": "right how big is my bite code program going to be after compiling some js program well that depends it certainly",
    "start": "3277799",
    "end": "3284680"
  },
  {
    "text": "can produce bigger bite code than Java Java has a limit of U 64k bite code per",
    "start": "3284680",
    "end": "3290480"
  },
  {
    "text": "method uh but we won't crash we'll split it into several smaller method though which of course is a little bit harmful",
    "start": "3290480",
    "end": "3296480"
  },
  {
    "text": "on performance but uh as far as we've been able to notice for normal script size hasn't really been an issue how",
    "start": "3296480",
    "end": "3303359"
  },
  {
    "text": "does nazor in hotspot compared to V8 I think I covered that do you think you achieve V8 performance well unless we do",
    "start": "3303359",
    "end": "3310119"
  },
  {
    "text": "things like um tagged values I was talking about in the end I don't think for Pure number crunching like crypto",
    "start": "3310119",
    "end": "3315280"
  },
  {
    "start": "3312000",
    "end": "3372000"
  },
  {
    "text": "that will ever achieve V V8 performance but I think we can get pretty damn close close and for things like Avatar JS",
    "start": "3315280",
    "end": "3321920"
  },
  {
    "text": "which is a no like implementation running HTTP server stuff there we already in the same ballpark so we",
    "start": "3321920",
    "end": "3329119"
  },
  {
    "text": "shouldn't stare ourselves blind too much as like cycle counting benchmarks but some of them are already as fast as V8",
    "start": "3329119",
    "end": "3335839"
  },
  {
    "text": "such justplay so apples and oranges a little bit but I don't think I mean I was really I really didn't think we get",
    "start": "3335839",
    "end": "3342880"
  },
  {
    "text": "this far with regard to to like approaching native performance when this project started but uh when we started",
    "start": "3342880",
    "end": "3349039"
  },
  {
    "text": "doing the optimistic infrstructure described here um I I actually started to realize that um maybe it can be done",
    "start": "3349039",
    "end": "3355440"
  },
  {
    "text": "after all i' would like to ask are you going to supply a Dom implementation as",
    "start": "3355440",
    "end": "3360520"
  },
  {
    "text": "well a what a Dom and a Dom implementation a web browser implementation as well in the jdk",
    "start": "3360520",
    "end": "3367400"
  },
  {
    "text": "currently there are no plans for that but please contribute I don't think it's a simple",
    "start": "3367400",
    "end": "3373799"
  },
  {
    "start": "3372000",
    "end": "3435000"
  },
  {
    "text": "no it's not simple we'll we'll see what projects the future will bring I can say I can only say that we're not working on",
    "start": "3373799",
    "end": "3379079"
  },
  {
    "text": "it right now so what about asm.js do you have any plans for that and do you think that will be performance I think asm.js",
    "start": "3379079",
    "end": "3386359"
  },
  {
    "text": "is a rather uh rather bad compromise uh when it comes to getting performance I would what I'd like to do was actually",
    "start": "3386359",
    "end": "3392440"
  },
  {
    "text": "talked about for the road maps is like at R to do some kind of statically typed front end instead it might or might not",
    "start": "3392440",
    "end": "3398240"
  },
  {
    "text": "be a typescript front end but uh if we can get type info nazon is fast and if",
    "start": "3398240",
    "end": "3404160"
  },
  {
    "text": "we can get like conservatively static compile time known type info naason is fast so anyone who wants to be a thes",
    "start": "3404160",
    "end": "3410520"
  },
  {
    "text": "student in Stockholm for six months or knows anyone who wants to be so come come on over and I'll put you to work so",
    "start": "3410520",
    "end": "3417200"
  },
  {
    "text": "I think you scared them all off with the slides in the beginning about that okay any further",
    "start": "3417200",
    "end": "3422960"
  },
  {
    "text": "questions okay thank you everyone and please remember to rate the session thank you",
    "start": "3422960",
    "end": "3430279"
  }
]