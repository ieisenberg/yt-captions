[
  {
    "text": "okay long coffee break we're gonna get started with that Newman is gonna be",
    "start": "6140",
    "end": "12900"
  },
  {
    "text": "talking about fibers which is a way of dealing with asynchronous code in JavaScript Ben works at meteor which is",
    "start": "12900",
    "end": "19050"
  },
  {
    "text": "based in San Francisco but he lives in New York so he's all good",
    "start": "19050",
    "end": "24080"
  },
  {
    "text": "all right you hear me great thanks for coming I'm Ben I work",
    "start": "24080",
    "end": "35399"
  },
  {
    "text": "at meteor development group and I'm representing them here today as you might imagine just in case you've never",
    "start": "35399",
    "end": "41399"
  },
  {
    "text": "heard of it meteor is a JavaScript application platform that makes it easy to write",
    "start": "41399",
    "end": "47390"
  },
  {
    "text": "live updating highly interactive rich client web and mobile applications and",
    "start": "47390",
    "end": "53640"
  },
  {
    "text": "it's also entirely open-source so I'm not here to sell you anything you can use it if after this talk you think it",
    "start": "53640",
    "end": "60239"
  },
  {
    "text": "might be a good idea or not and I'd be happy to talk to you about its merits I've only been at meteor for the last",
    "start": "60239",
    "end": "68450"
  },
  {
    "text": "seven or so months since last summer before that I was at Facebook on their JavaScript infrastructure team where I",
    "start": "68450",
    "end": "75930"
  },
  {
    "text": "worked on some things like react and regenerator but one of my favorite parts about working at Facebook was that I got",
    "start": "75930",
    "end": "83009"
  },
  {
    "text": "to be one of their delegates to the tc39 JavaScript Standards Committee meetings which is the body that is formalizing",
    "start": "83009",
    "end": "90840"
  },
  {
    "text": "the next version of JavaScript and so one of my conditions for accepting the job at meteor was that they also become",
    "start": "90840",
    "end": "96990"
  },
  {
    "text": "a member of that organization so that I could keep going and keep being involved in that although with a very slightly",
    "start": "96990",
    "end": "102810"
  },
  {
    "text": "different agenda so that's my background I've been doing this web development",
    "start": "102810",
    "end": "108479"
  },
  {
    "text": "thing and especially JavaScript stuff for a while and throughout that time",
    "start": "108479",
    "end": "113729"
  },
  {
    "text": "I've struggled in a way that maybe some of you have struggled to explain what is",
    "start": "113729",
    "end": "119369"
  },
  {
    "text": "exciting about my line of work in particular to non-technical people of",
    "start": "119369",
    "end": "124530"
  },
  {
    "text": "which there are quite a few in my life so I'm going to share one version of that story in case it helps you tell the",
    "start": "124530",
    "end": "130709"
  },
  {
    "text": "same story I'm Benjamin without the ion most forms",
    "start": "130709",
    "end": "136090"
  },
  {
    "text": "of social media and there are slides for this talk I'm lyin at that URL at the bottom benjamin decada hub that io",
    "start": "136090",
    "end": "143490"
  },
  {
    "text": "slash go to 2015 - talk so the way I",
    "start": "143490",
    "end": "149550"
  },
  {
    "text": "come at what is interesting about JavaScript and programming in general is",
    "start": "149550",
    "end": "155490"
  },
  {
    "text": "by saying that I'm interested in the ways languages change over time and in",
    "start": "155490",
    "end": "161110"
  },
  {
    "text": "particular how programming languages change although of course sociolinguistics and etymology of",
    "start": "161110",
    "end": "166180"
  },
  {
    "text": "natural languages are also fascinating I'm just not really qualified to talk about that and this talk is going to be",
    "start": "166180",
    "end": "173020"
  },
  {
    "text": "about how JavaScript might be able to change and javascript suffers from the",
    "start": "173020",
    "end": "179710"
  },
  {
    "text": "the reasons that it is difficult to change programming languages almost more so than any other language there has",
    "start": "179710",
    "end": "186040"
  },
  {
    "text": "ever been I think the the great value of a programming language is that everyone",
    "start": "186040",
    "end": "193600"
  },
  {
    "text": "agrees the people who write code in that programming language agree people who run code written in that programming",
    "start": "193600",
    "end": "200470"
  },
  {
    "text": "language sort of implicitly participate in a consensus about exactly precisely",
    "start": "200470",
    "end": "205810"
  },
  {
    "text": "what that programming language means and in particular what a computer should do if you run a program written in that",
    "start": "205810",
    "end": "211690"
  },
  {
    "text": "language on the computer and that precision is of course why computers are able to do their work so quickly and",
    "start": "211690",
    "end": "218290"
  },
  {
    "text": "reliably it's why if you figure out how to tell the computer how to do something new you can give your code to somebody",
    "start": "218290",
    "end": "224410"
  },
  {
    "text": "else and without even understanding how it works they can see that it does work by running it because to a close",
    "start": "224410",
    "end": "230350"
  },
  {
    "text": "approximation it runs exactly the same on their computer and of course then if",
    "start": "230350",
    "end": "235810"
  },
  {
    "text": "they want to understand how it works they can dig into it and at every level it sort of makes sense and that's a cool",
    "start": "235810",
    "end": "240880"
  },
  {
    "text": "property that natural languages certainly do not have you know we all have our different understandings of",
    "start": "240880",
    "end": "246340"
  },
  {
    "text": "meanings of words and syntactic structures and if you hear somebody say something and you don't understand what",
    "start": "246340",
    "end": "251470"
  },
  {
    "text": "it means you have to fall back on context clues and asking questions and that ambiguity is why most of our",
    "start": "251470",
    "end": "259450"
  },
  {
    "text": "efforts at natural language processing still fall squarely in the realm of artificial intelligence rather than",
    "start": "259450",
    "end": "265390"
  },
  {
    "text": "simple algorithms like used for pricing and evaluating programming languages but the downside",
    "start": "265390",
    "end": "271060"
  },
  {
    "text": "the downside to having convinced so many people to agree on how a programming language works is that if you ever want",
    "start": "271060",
    "end": "277270"
  },
  {
    "text": "it to change you've got to convince all those people all over again and it would be one thing if they all cared right but",
    "start": "277270",
    "end": "285040"
  },
  {
    "text": "especially in JavaScript case everyone with a web browser has a particular version of JavaScript installed and they",
    "start": "285040",
    "end": "292090"
  },
  {
    "text": "may not even realize that they're making an implicit choice about what version of the language they're using may not even recognize JavaScript as a pair of words",
    "start": "292090",
    "end": "299950"
  },
  {
    "text": "stuck together and so convincing them that it's a good idea to upgrade has to",
    "start": "299950",
    "end": "305410"
  },
  {
    "text": "either be a really good argument or really easy and the like insurmountable 'ti of this task used to be the most",
    "start": "305410",
    "end": "312340"
  },
  {
    "text": "depressing thing about javascript people thought that it would never change that it was stuck in its 1995 ways because it",
    "start": "312340",
    "end": "319000"
  },
  {
    "text": "was just too much effort to get it to change and while it is still definitely true as Brendan Eich has said that the",
    "start": "319000",
    "end": "325780"
  },
  {
    "text": "web is a brutal shortest path versus better evolving system I think we can finally say that that evolution is",
    "start": "325780",
    "end": "333280"
  },
  {
    "text": "proceeding more quickly than it used to javascript is finally becoming the language that we want and many new",
    "start": "333280",
    "end": "339100"
  },
  {
    "text": "features that are proposed in Ethne script 6 or even ACMA Script 7 can be simulated without any changes to the",
    "start": "339100",
    "end": "346150"
  },
  {
    "text": "language which is cool this is what babel Jas and Tracy are are all about and they account for most of the new",
    "start": "346150",
    "end": "352600"
  },
  {
    "text": "features in the language which is awesome so we get to have the future now here's a simple example of an es6 arrow",
    "start": "352600",
    "end": "359770"
  },
  {
    "text": "function that is being passed as a callback to this sort method and it can",
    "start": "359770",
    "end": "364780"
  },
  {
    "text": "be pretty trivially transformed into an es5 function expression and this just runs in all browsers today so this is",
    "start": "364780",
    "end": "371350"
  },
  {
    "text": "sort of like if you went to the effort of like rewording your you know fancy new lingo in something that people who",
    "start": "371350",
    "end": "380320"
  },
  {
    "text": "understood an older version of english understood and it's great that it",
    "start": "380320",
    "end": "385480"
  },
  {
    "text": "requires not as much effort so that's a great story and it's really exciting to",
    "start": "385480",
    "end": "390910"
  },
  {
    "text": "have things like generators and modules and classes today rather than five years from now but not everything",
    "start": "390910",
    "end": "397390"
  },
  {
    "text": "unfortunately that has been proposed or es6 like proxies and symbols can be",
    "start": "397390",
    "end": "403040"
  },
  {
    "text": "translated or it can be simulated with any fidelity and today I want to talk",
    "start": "403040",
    "end": "408620"
  },
  {
    "text": "about a powerful feature that could be part of Java scripts that isn't now that cannot be simulated in any reasonable",
    "start": "408620",
    "end": "415100"
  },
  {
    "text": "way this is not a riddle I'm going to tell you in a second what it is but I want to be perfectly clear what I mean",
    "start": "415100",
    "end": "420680"
  },
  {
    "text": "by reasonable here so a reasonable translation needs to take futuristic code and turn it into you know maybe",
    "start": "420680",
    "end": "427580"
  },
  {
    "text": "more convoluted harder to read current day code but that current day code still",
    "start": "427580",
    "end": "432980"
  },
  {
    "text": "needs to be readable and debuggable and recognizable as JavaScript rather than",
    "start": "432980",
    "end": "438080"
  },
  {
    "text": "say if you just like generated bytecode from LLVM and ran that on a virtual machine that was implemented in",
    "start": "438080",
    "end": "443150"
  },
  {
    "text": "JavaScript like that's always a backup option but we'd have to throw out a lot of our relatively mature tools like the",
    "start": "443150",
    "end": "450740"
  },
  {
    "text": "the Chrome and Firefox and Safari dev tools and web inspectors and all of that",
    "start": "450740",
    "end": "458720"
  },
  {
    "text": "tooling so we'd be sort of throwing the baby out with the bathwater I don't know if that's the right metaphor but the",
    "start": "458720",
    "end": "465050"
  },
  {
    "text": "other problem with it is that we'd sort of be abandoning the progress of javascript giving up on letting our",
    "start": "465050",
    "end": "470290"
  },
  {
    "text": "experimentation with these new features actually inform the progress of the language because you know we just be",
    "start": "470290",
    "end": "476300"
  },
  {
    "text": "sort of doing our own thing so that's less good in my mind but if it comes to that you know we'll do what we have to",
    "start": "476300",
    "end": "482650"
  },
  {
    "text": "so this feature that I'm about to tell you about is actually available in meteor today so without further ado it",
    "start": "482650",
    "end": "490210"
  },
  {
    "text": "goes by a couple of different names one of them is co-routines the other is fibers co-routines is the sort of",
    "start": "490210",
    "end": "497180"
  },
  {
    "text": "computer science erosion that Don Knuth originally used when he first talked about them so what is a fiber or a",
    "start": "497180",
    "end": "504050"
  },
  {
    "text": "co-routine well JavaScript as you know it has a strict run to completion",
    "start": "504050",
    "end": "509900"
  },
  {
    "text": "execution model which means you know if if you're executing some code you can rely on it finishing either like",
    "start": "509900",
    "end": "516740"
  },
  {
    "text": "throwing an exception and bailing out or all of your functions returning and unwinding the stack and once the stack",
    "start": "516740",
    "end": "522740"
  },
  {
    "text": "is empty again after all your functions have returned or been aborted then other",
    "start": "522740",
    "end": "528230"
  },
  {
    "text": "events can be run in the event loop so in other words the current the call",
    "start": "528230",
    "end": "534040"
  },
  {
    "text": "stack must unwind completely before any other events can can take place so if you've ever wished that you could simply",
    "start": "534040",
    "end": "540130"
  },
  {
    "text": "pause what you're doing right now in handling a request or an event and then let some other events run in the",
    "start": "540130",
    "end": "546520"
  },
  {
    "text": "meantime and then later resume where you left off that's exactly what Co routines are for sort of a cooperative task",
    "start": "546520",
    "end": "554589"
  },
  {
    "text": "switching paradigm and it's important to note that it's not multi-threading you",
    "start": "554589",
    "end": "559720"
  },
  {
    "text": "know things aren't happening at the same time they're just taking turns more rapidly than they normally do alright so",
    "start": "559720",
    "end": "568950"
  },
  {
    "text": "here's a simple example of the way the fibers API works in order to be able to",
    "start": "568950",
    "end": "577480"
  },
  {
    "text": "suspend the call stack you need to establish a fiber and then the function",
    "start": "577480",
    "end": "584290"
  },
  {
    "text": "that you pass through that fiber can call other functions like this sleep function and those functions no matter",
    "start": "584290",
    "end": "591610"
  },
  {
    "text": "how deeply nested they are can call fiber yield to suspend the whole fiber so this will console that log before and",
    "start": "591610",
    "end": "598959"
  },
  {
    "text": "then wait a second and console dot log after and if you think about how you",
    "start": "598959",
    "end": "605020"
  },
  {
    "text": "might implement that sleep function without fibers it'd be very difficult you're just sitting a while true loop and like check you know new date give",
    "start": "605020",
    "end": "611890"
  },
  {
    "text": "time periodically but that wouldn't let anything else happen so the fact that we can make this sleep function look",
    "start": "611890",
    "end": "619180"
  },
  {
    "text": "synchronous in the way that we call it is pretty magical and the way we do that is that we grab the current fiber this",
    "start": "619180",
    "end": "626170"
  },
  {
    "text": "won't work if we're not in a fiber then we set a timeout for the specified number of milliseconds and we yield so",
    "start": "626170",
    "end": "632050"
  },
  {
    "text": "when fiber run finally gets called that fiber dot yield from the perspective of",
    "start": "632050",
    "end": "637870"
  },
  {
    "text": "this fiber that statement will return a sleep statement will return the stack",
    "start": "637870",
    "end": "642880"
  },
  {
    "text": "will unwind so this is the simplest example I can find but it's still I",
    "start": "642880",
    "end": "649480"
  },
  {
    "text": "don't know if you've never seen fibers before and you come across some code like not only is this doing something surprising it's like not the world's",
    "start": "649480",
    "end": "656380"
  },
  {
    "text": "best API so one of the things I want to talk about in this talk is how we can make that API look a little more",
    "start": "656380",
    "end": "662970"
  },
  {
    "text": "familiar now although I'm coming from",
    "start": "662970",
    "end": "668189"
  },
  {
    "text": "the perspective of sort of the the minority opinion that this is a good",
    "start": "668189",
    "end": "674519"
  },
  {
    "text": "feature at least for JavaScript it's worth noting that this is not like I don't know continuations which are only",
    "start": "674519",
    "end": "680279"
  },
  {
    "text": "really supported in scheme and some lisps many other languages support co-routines",
    "start": "680279",
    "end": "685589"
  },
  {
    "text": "in fact bolding the ones that like I've written where then I'll line up here so these are you know real languages for",
    "start": "685589",
    "end": "692220"
  },
  {
    "text": "sure and so this is something that works some of these are maybe a little",
    "start": "692220",
    "end": "698220"
  },
  {
    "text": "disingenuous like it's not built into Python in fact Python uses a very similar native module to the one that we",
    "start": "698220",
    "end": "705540"
  },
  {
    "text": "use at meteor to have this feature to JavaScript so but these are all languages in which you can and people do",
    "start": "705540",
    "end": "711269"
  },
  {
    "text": "successfully use co-routines so why not javascript well Dave Herman who is one",
    "start": "711269",
    "end": "719670"
  },
  {
    "text": "of the people I respect most in the world who works at Mozilla and is another member of the tc39 committee a",
    "start": "719670",
    "end": "725810"
  },
  {
    "text": "few years ago wrote this blog post why co-routines won't work on the web and",
    "start": "725810",
    "end": "730860"
  },
  {
    "text": "it's a great blog post I'm not going to try to go through and refute each of the arguments he makes in fact I'm going to",
    "start": "730860",
    "end": "738870"
  },
  {
    "text": "bring them up as problems that you should know about but I have some ideas about how we can mitigate them and I",
    "start": "738870",
    "end": "745410"
  },
  {
    "text": "guess the the point I'm making here is that someone well regarded on the committee that controls the future of",
    "start": "745410",
    "end": "751290"
  },
  {
    "text": "JavaScript is very much against them and against co-routines that is and so it's",
    "start": "751290",
    "end": "756990"
  },
  {
    "text": "going to be an uphill battle though this is among the things that would be in my current company's interest to push for",
    "start": "756990",
    "end": "763920"
  },
  {
    "text": "in the future it's definitely the case this is almost a cliche that programming",
    "start": "763920",
    "end": "770879"
  },
  {
    "text": "language design is as much about saying no to tempting features as it is about saying yes you just can't you can't have",
    "start": "770879",
    "end": "777569"
  },
  {
    "text": "everything not everything works together and it is absolutely the job of a standards committee to put together a",
    "start": "777569",
    "end": "783420"
  },
  {
    "text": "coherent language you know even if it doesn't have some nice to have features but gonna make an argument that we could",
    "start": "783420",
    "end": "791100"
  },
  {
    "text": "have a coherent JavaScript that supported co-routines so if we can agree that making",
    "start": "791100",
    "end": "797069"
  },
  {
    "text": "asynchronous programming easier is important for the future of JavaScript and it sure is and tc39 is not",
    "start": "797069",
    "end": "805440"
  },
  {
    "text": "interested in co-routines and what are the remedy do they have in mind hope they've got something planned",
    "start": "805440",
    "end": "811399"
  },
  {
    "text": "you may have heard of async and a wait now this is a future that has been proposed for atmosphere of 7/4",
    "start": "811399",
    "end": "818670"
  },
  {
    "text": "background echo syrup 6 is the version of the language that has just been finalized and so these aren't making it",
    "start": "818670",
    "end": "825300"
  },
  {
    "text": "into that but the next version there's a lot of momentum behind them it's a it's a feature that was borrowed from c-sharp",
    "start": "825300",
    "end": "830819"
  },
  {
    "text": "and the c-sharp people love it so I think it's safe to say this will",
    "start": "830819",
    "end": "836129"
  },
  {
    "text": "definitely become part of the language so how does this work well you can take",
    "start": "836129",
    "end": "842250"
  },
  {
    "text": "a function and add the async keyword in front of the function keyword and that",
    "start": "842250",
    "end": "847740"
  },
  {
    "text": "means a couple of things the function will now always return a promise which",
    "start": "847740",
    "end": "853290"
  },
  {
    "text": "is like a deferred value encapsulating its eventual result but also if there",
    "start": "853290",
    "end": "860550"
  },
  {
    "text": "are other things you need to wait on in the course of evaluating that function you can pass them as arguments to the",
    "start": "860550",
    "end": "868620"
  },
  {
    "text": "awake keyword which is syntactically sort of like throw or return or yield takes an argument if that argument is a",
    "start": "868620",
    "end": "876209"
  },
  {
    "text": "promise then it suspends the the current function and when the promise is finally",
    "start": "876209",
    "end": "882480"
  },
  {
    "text": "fulfilled it evaluates to the result of the promise and if the promise is rejected then the await expression",
    "start": "882480",
    "end": "890730"
  },
  {
    "text": "throws an exception so you could actually use a try-catch block here you know like one thing that we've sort of been getting away from with callbacks",
    "start": "890730",
    "end": "896459"
  },
  {
    "text": "and promises is that you know you you don't get to use these things that are built into JavaScript like return",
    "start": "896459",
    "end": "901769"
  },
  {
    "text": "statements and try catch blocks but this is sort of bringing that back so we're",
    "start": "901769",
    "end": "906959"
  },
  {
    "text": "doing two awaits in that function this composes really nicely so you can have other async functions that also await",
    "start": "906959",
    "end": "912689"
  },
  {
    "text": "the result of in this case create user so we've got like you know the the version of the function that always",
    "start": "912689",
    "end": "917850"
  },
  {
    "text": "creates the user and the one that checks see if that's already a user with that name and then only creates it if they don't",
    "start": "917850",
    "end": "924059"
  },
  {
    "text": "exist yet now at some point you're going to need to call an async function that is from from a call site that's not also",
    "start": "924059",
    "end": "932339"
  },
  {
    "text": "in an async function and remember that it returns the promise so now you're back to just attaching callbacks to the",
    "start": "932339",
    "end": "938459"
  },
  {
    "text": "promise to get at the value that's pretty familiar in today's JavaScript",
    "start": "938459",
    "end": "945209"
  },
  {
    "text": "and this feature is planned for es 7 as I mentioned but it's actually available",
    "start": "945209",
    "end": "950399"
  },
  {
    "text": "today with a pretty good simulation via regenerator which also transpires",
    "start": "950399",
    "end": "956699"
  },
  {
    "text": "generator functions and if you happen to be in an environment where you already have generator functions implemented",
    "start": "956699",
    "end": "962639"
  },
  {
    "text": "Navin natively or maybe you're handling them some other way you can transpile async functions to generators using",
    "start": "962639",
    "end": "970290"
  },
  {
    "text": "another module I wrote both of these modules so I mean I I stand behind them but there could be",
    "start": "970290",
    "end": "976529"
  },
  {
    "text": "other possibilities like tracer so let's try that with pure promises actually I'm",
    "start": "976529",
    "end": "983100"
  },
  {
    "text": "gonna skip over this cuz this isn't all that interesting it gets like a little worse the lines are a little longer but",
    "start": "983100",
    "end": "990299"
  },
  {
    "text": "if you understand promises it's like not that huge of a savings of boilerplate to",
    "start": "990299",
    "end": "995369"
  },
  {
    "text": "use async functions though I will say if you had a weight inside of a loop that",
    "start": "995369",
    "end": "1000709"
  },
  {
    "text": "would look pretty nice in the async function context but with promises you'd have to like chain them together iteration to iteration and that gets",
    "start": "1000709",
    "end": "1007129"
  },
  {
    "text": "messy but what about callbacks well let's try that so this is our promise",
    "start": "1007129",
    "end": "1014480"
  },
  {
    "text": "version and the real rub here is that",
    "start": "1014480",
    "end": "1019730"
  },
  {
    "text": "you've got to handle all the error cases so you know in case the first asynchronous operation comes back with",
    "start": "1019730",
    "end": "1025788"
  },
  {
    "text": "an error you have to handle that if the second one comes back with an error I have to handle that and you can't just",
    "start": "1025789",
    "end": "1031880"
  },
  {
    "text": "like pass callback as a callback to the venn function because it has this kind",
    "start": "1031880",
    "end": "1037339"
  },
  {
    "text": "of funky nodi API where you pass the error or null first and then the result",
    "start": "1037339",
    "end": "1042949"
  },
  {
    "text": "second and likewise with get or create user it just becomes like not as",
    "start": "1042949",
    "end": "1048230"
  },
  {
    "text": "terribly nested as pure callbacks because we're using promises here but the like number of lines of code",
    "start": "1048230",
    "end": "1053330"
  },
  {
    "text": "increases dramatically so unless you're familiar with this style of programming this is is pretty",
    "start": "1053330",
    "end": "1059129"
  },
  {
    "text": "obscure it's hard to see what's going on until you've like really parsed it and run it in your head so I think it's fair",
    "start": "1059129",
    "end": "1067289"
  },
  {
    "text": "to say we've come a long way but we're in the business of perfecting this",
    "start": "1067289",
    "end": "1072870"
  },
  {
    "text": "language and there's no reason we shouldn't be asking if we can do even better than async functions I will be",
    "start": "1072870",
    "end": "1078269"
  },
  {
    "text": "excited to have a version of JavaScript that supports a saint can await but I would be even more excited if it worked",
    "start": "1078269",
    "end": "1084720"
  },
  {
    "text": "in the way that I'm about to describe so I claim if JavaScript had co-routines",
    "start": "1084720",
    "end": "1090899"
  },
  {
    "text": "then we could implement these async and await keywords without any new syntax",
    "start": "1090899",
    "end": "1096240"
  },
  {
    "text": "because there are keywords that in itself is new syntax but what do I mean here well we could turn async into a",
    "start": "1096240",
    "end": "1103259"
  },
  {
    "text": "wrapper function sort of like a decorator in Python where we pass the",
    "start": "1103259",
    "end": "1109889"
  },
  {
    "text": "the original function to async and it returns a wrapper which we bind to the create user variable this is since these",
    "start": "1109889",
    "end": "1118620"
  },
  {
    "text": "are function declarations you know they should be hoisted so this isn't a perfect translation if you really like",
    "start": "1118620",
    "end": "1124590"
  },
  {
    "text": "into the details of that but you can see that this would be a pretty easy compilation target if you were trying to",
    "start": "1124590",
    "end": "1130669"
  },
  {
    "text": "go from es7 a single way to yes five and similarly with a wait I'm just gonna",
    "start": "1130669",
    "end": "1137190"
  },
  {
    "text": "turn it into a function by having some parentheses here is it really easy and now if you didn't know that these",
    "start": "1137190",
    "end": "1142559"
  },
  {
    "text": "functions were doing anything magical this would look just like JavaScript of today you know I'm accepted Alette",
    "start": "1142559",
    "end": "1149159"
  },
  {
    "text": "I guess because that's es6 these are just function calls so how might these magical functions be implemented well",
    "start": "1149159",
    "end": "1157200"
  },
  {
    "text": "here's a wait and this is a fully functional implementation a wait is going to take an argument which might be",
    "start": "1157200",
    "end": "1163139"
  },
  {
    "text": "a promise it's okay if it's not it'll just evaluate to that argument itself if it's not a promise grab the",
    "start": "1163139",
    "end": "1170100"
  },
  {
    "text": "current fiber because it's a important that we are in a fiber so that we have something to suspend and resume later",
    "start": "1170100",
    "end": "1176210"
  },
  {
    "text": "I'm going to go ahead and take up four lines with this assertion that just guarantees that later we're going to",
    "start": "1176210",
    "end": "1183929"
  },
  {
    "text": "yield return something whatever is returned by fiber yield and since argument might not",
    "start": "1183929",
    "end": "1190980"
  },
  {
    "text": "be a promise we call promised at resolve to course it to a promise if it is a promise a promise don't resolve just",
    "start": "1190980",
    "end": "1196710"
  },
  {
    "text": "returns the argument itself so this is lightweight and attach some callbacks to it in a success case they call fiber dot",
    "start": "1196710",
    "end": "1203460"
  },
  {
    "text": "run if you're familiar with generators this is kind of like calling generator that next and in the error case we call",
    "start": "1203460",
    "end": "1210900"
  },
  {
    "text": "fiber dot throw into and that's actually all we have to do so the argument that",
    "start": "1210900",
    "end": "1217050"
  },
  {
    "text": "you pass to fiber dot run becomes the result of the fiber yield call when it",
    "start": "1217050",
    "end": "1222180"
  },
  {
    "text": "finally returns and if you throw an error into it then that fiber dot you'll call throws an exception so if you like",
    "start": "1222180",
    "end": "1228270"
  },
  {
    "text": "wrap that in a try-catch block you could catch the error later although you want to do that here all right so not so",
    "start": "1228270",
    "end": "1236970"
  },
  {
    "text": "magical after all here's async which is coincidentally the same number of lines",
    "start": "1236970",
    "end": "1242000"
  },
  {
    "text": "it's going to return a wrapper function and that wrapper function needs to",
    "start": "1242000",
    "end": "1247800"
  },
  {
    "text": "always return a promise because that's the contract with async functions and inside the promise we establish a new",
    "start": "1247800",
    "end": "1254070"
  },
  {
    "text": "fiber a new call stack that we can suspend and resume so you could have like two async functions running sort of",
    "start": "1254070",
    "end": "1260490"
  },
  {
    "text": "in parallel because they both have their own fibers and somewhere in there we",
    "start": "1260490",
    "end": "1265740"
  },
  {
    "text": "want to call the original function with the same value of this and arguments and if that is successful of course you can",
    "start": "1265740",
    "end": "1272700"
  },
  {
    "text": "imagine we want to pass it to the promise resolve function my apologies if the promise API is not familiar it is a",
    "start": "1272700",
    "end": "1279510"
  },
  {
    "text": "little weird that like there's this function you pass to the constructor and then it takes arguments that are",
    "start": "1279510",
    "end": "1284790"
  },
  {
    "text": "callback functions you're supposed to call but the slides are online and it it does actually work okay so f in dot",
    "start": "1284790",
    "end": "1293670"
  },
  {
    "text": "apply will throw an exception if there's any problem even if it happens like in a",
    "start": "1293670",
    "end": "1298710"
  },
  {
    "text": "later stage of the fibers execution the fiber itself can like yield multiple times so in case there was an error",
    "start": "1298710",
    "end": "1307020"
  },
  {
    "text": "thrown and we want to use that as the rejection reason for the promise and the only thing that's left to do is to kick",
    "start": "1307020",
    "end": "1312420"
  },
  {
    "text": "off this fiber by calling its run method all right so those are a sink and a",
    "start": "1312420",
    "end": "1317790"
  },
  {
    "text": "weight and if you've got something like fibers or some other implementation of",
    "start": "1317790",
    "end": "1322950"
  },
  {
    "text": "co-routines then you can like speed ahead to the distant future of JavaScript and have your s7 a sink and a",
    "start": "1322950",
    "end": "1329700"
  },
  {
    "text": "weight already so once we have these two functions in our tool chain this is sort",
    "start": "1329700",
    "end": "1337170"
  },
  {
    "text": "of an aspirational statement for meteor this is a direction I would like to see us go in but I have to be honest that we",
    "start": "1337170",
    "end": "1343500"
  },
  {
    "text": "are not fully there yet we can actually just forget that these two functions",
    "start": "1343500",
    "end": "1348510"
  },
  {
    "text": "were implemented using fibers it becomes an implementation detail that we don't have to worry about anymore just as I typically don't remember that",
    "start": "1348510",
    "end": "1356910"
  },
  {
    "text": "node fibers is implemented on top of Lib Kuro which is this C library that swaps",
    "start": "1356910",
    "end": "1362130"
  },
  {
    "text": "out stacked pointers and thread data pointers to make co-routines work with",
    "start": "1362130",
    "end": "1367860"
  },
  {
    "text": "literally no changes to v8 which is insane",
    "start": "1367860",
    "end": "1373290"
  },
  {
    "text": "but these two functions I hope I've just convinced you that they're at least as powerful as async and await they're actually more powerful than that which",
    "start": "1373290",
    "end": "1380610"
  },
  {
    "text": "is both good and bad so here they are the natural question to ask since it was",
    "start": "1380610",
    "end": "1388260"
  },
  {
    "text": "definitely the case that we needed all the await and async keywords in the original example do we need all of these",
    "start": "1388260",
    "end": "1393300"
  },
  {
    "text": "async and a weight function calls here well sort of a leading question the answer is no let's try removing some so",
    "start": "1393300",
    "end": "1401940"
  },
  {
    "text": "the first one we're going to remove is the call to async around create user because if we're willing to say that",
    "start": "1401940",
    "end": "1407460"
  },
  {
    "text": "create user is only called from other functions that are async or you know with some async function somewhere above",
    "start": "1407460",
    "end": "1414330"
  },
  {
    "text": "it on the call stack then those weight instructions expressions inside of create user will be legal there's",
    "start": "1414330",
    "end": "1420420"
  },
  {
    "text": "nothing wrong with them they don't have to be directly inside the body of an async function and because create user",
    "start": "1420420",
    "end": "1428640"
  },
  {
    "text": "is now just returning a simple value it's no longer an async function it doesn't return a promise we actually don't have to await its result in get or",
    "start": "1428640",
    "end": "1436260"
  },
  {
    "text": "create user so that can go away we could it would be harmless but we don't have",
    "start": "1436260",
    "end": "1441990"
  },
  {
    "text": "to and in fact if we're willing to adopt the practice of running most all of our code in a fiber then we can get",
    "start": "1441990",
    "end": "1450750"
  },
  {
    "text": "the async wrapper for good or create user - so all we're left with our weight expressions and so in this coding style",
    "start": "1450750",
    "end": "1460770"
  },
  {
    "text": "the weight function sort of becomes a tool for evaluating promises synchronously if you happen to think that that is more convenient in certain",
    "start": "1460770",
    "end": "1467400"
  },
  {
    "text": "cases and I don't want to make this seem like like broad recommendation because",
    "start": "1467400",
    "end": "1473640"
  },
  {
    "text": "it can actually still be valuable to mark functions as a sink so that they can run in parallel it's good for the",
    "start": "1473640",
    "end": "1480150"
  },
  {
    "text": "like learnability of meteor for new developers new meteor developers you may",
    "start": "1480150",
    "end": "1486900"
  },
  {
    "text": "just be like new web developers full stop to not have to think about async",
    "start": "1486900",
    "end": "1493080"
  },
  {
    "text": "and weight and promises on there like first day of learning meteor so that's one reason that hiding this from users",
    "start": "1493080",
    "end": "1498810"
  },
  {
    "text": "can be a good idea but even for sophisticated users who want to paralyze these operations so",
    "start": "1498810",
    "end": "1504750"
  },
  {
    "text": "that they're not blocking on each other it's important to give them the ability to say that get or create user is in",
    "start": "1504750",
    "end": "1510990"
  },
  {
    "text": "fact a sink so that it can return immediately and start creating both of these users simultaneously and then you",
    "start": "1510990",
    "end": "1516930"
  },
  {
    "text": "know if you know what you're doing if you've heard of promise dot all before you can sort of join on all their",
    "start": "1516930",
    "end": "1522870"
  },
  {
    "text": "results and it won't be the sum of the times they took but some like combination of of the times so it might",
    "start": "1522870",
    "end": "1530430"
  },
  {
    "text": "still be a good idea to leave get or create user async so that it returns a promise so that Marley doesn't have to",
    "start": "1530430",
    "end": "1535470"
  },
  {
    "text": "wait on bin so if you if you know meteor",
    "start": "1535470",
    "end": "1540600"
  },
  {
    "text": "you may be wondering how if this is only available in the server how meteor",
    "start": "1540600",
    "end": "1545790"
  },
  {
    "text": "allows database access on the client because that's one of the niceties of meteor that you get to sort of write the",
    "start": "1545790",
    "end": "1551610"
  },
  {
    "text": "same database access code on both client and server and that currently is sort of",
    "start": "1551610",
    "end": "1558180"
  },
  {
    "text": "a bit of trickery I mean that in the best way mini is our client-side",
    "start": "1558180",
    "end": "1563460"
  },
  {
    "text": "implementation of the API and it's essentially a sophisticated cache that",
    "start": "1563460",
    "end": "1569880"
  },
  {
    "text": "we pre-populate be based on publication data on the server it supports a subset",
    "start": "1569880",
    "end": "1575160"
  },
  {
    "text": "of the Collection API like you know fine find one insert update remove and those methods have to return",
    "start": "1575160",
    "end": "1582360"
  },
  {
    "text": "immediately like they they don't get to return promises you don't like pass a callback and wait for",
    "start": "1582360",
    "end": "1589120"
  },
  {
    "text": "the result and that certainly doesn't go to the server and ask for the new data so if they have to return immediately",
    "start": "1589120",
    "end": "1595980"
  },
  {
    "text": "you might get into situations where you you call a function like fine then you don't get any results back even though",
    "start": "1595980",
    "end": "1602020"
  },
  {
    "text": "there actually are results that are pending from the server and the way we",
    "start": "1602020",
    "end": "1608380"
  },
  {
    "text": "get around this is through leveraging other strengths of meteor this is acceptable because meteor automatically",
    "start": "1608380",
    "end": "1614590"
  },
  {
    "text": "rear Enders the UI whenever different data become available so if you render your UI in a way that is that works both",
    "start": "1614590",
    "end": "1622059"
  },
  {
    "text": "when there's no data and when there is data then on the initial page load you'll get the version with no data and",
    "start": "1622059",
    "end": "1627700"
  },
  {
    "text": "as soon as the data is available you'll your UI will just automatically update right so it's sort of like waiting on a",
    "start": "1627700",
    "end": "1636070"
  },
  {
    "text": "promise except that you have the opportunity to see something before the",
    "start": "1636070",
    "end": "1641710"
  },
  {
    "text": "data is actually available which is kind of cool but it's just very different from what happens on the server and I want to make that clear so how should",
    "start": "1641710",
    "end": "1648610"
  },
  {
    "text": "meteor allow database access on the client this is an open question but if we wanted the database access API on the",
    "start": "1648610",
    "end": "1655090"
  },
  {
    "text": "client to look exactly like the one on the server and have the same semantics we could rewrite both of them to return",
    "start": "1655090",
    "end": "1661059"
  },
  {
    "text": "promise objects that's like a pretty standard JavaScript thing to do these days now that promises are baked into es6 I think most asynchronous API is are",
    "start": "1661059",
    "end": "1668740"
  },
  {
    "text": "going to be written in that style going forward so you could think if we did",
    "start": "1668740",
    "end": "1673960"
  },
  {
    "text": "this of a weight as just a convenience that happens to be available on the server and it would be a pretty sweet",
    "start": "1673960",
    "end": "1679350"
  },
  {
    "text": "sugar to have in that context but you know depending on your your feelings",
    "start": "1679350",
    "end": "1686200"
  },
  {
    "text": "about running exactly the same code on client and server you might be",
    "start": "1686200",
    "end": "1691270"
  },
  {
    "text": "interested in that or you might be interested in just using promises in both places okay so this isn't the end",
    "start": "1691270",
    "end": "1700000"
  },
  {
    "text": "of the talk but if you understand these next couple of slides then you're in",
    "start": "1700000",
    "end": "1705340"
  },
  {
    "text": "great shape you can think of co-routines as sort of a relaxation of es7 async and",
    "start": "1705340",
    "end": "1712899"
  },
  {
    "text": "await syntax in which the await keyword is allowed to appear in the body of any",
    "start": "1712899",
    "end": "1719520"
  },
  {
    "text": "function that happens to be called within a fiber and if it's not a fiber it'll just throw instead of the as in",
    "start": "1719520",
    "end": "1726600"
  },
  {
    "text": "es7 being restricted to the bodies of functions that are explicitly marked as async right so you know and in the way",
    "start": "1726600",
    "end": "1735390"
  },
  {
    "text": "that you can throw an exception from a deeply nested function and it bubbles up the the call stack the the version of a",
    "start": "1735390",
    "end": "1743310"
  },
  {
    "text": "sink and a weight that I'm proposing allows you to bury a weight in some deeply nested function call and have",
    "start": "1743310",
    "end": "1750090"
  },
  {
    "text": "that suspend a fiber that may have started many function frames up the call stack okay so here's our original async",
    "start": "1750090",
    "end": "1758310"
  },
  {
    "text": "and a weight what we're doing here is saying that some of those awaits are actually not necessary and depending on",
    "start": "1758310",
    "end": "1765840"
  },
  {
    "text": "you know what kind of API are trying to expose some of those a sinks are not actually necessary you know so is this",
    "start": "1765840",
    "end": "1774720"
  },
  {
    "text": "better code well this is sort of a contrived example and so it's not you",
    "start": "1774720",
    "end": "1780000"
  },
  {
    "text": "know it's it's clearly shorter there are a few fewer letters in it and this future this future is possible although",
    "start": "1780000",
    "end": "1786600"
  },
  {
    "text": "it is not currently on the roadmap for yes seven or beyond but this is",
    "start": "1786600",
    "end": "1792390"
  },
  {
    "text": "particularly great news for a framework like meteor because what we can do if we don't have to make every function that",
    "start": "1792390",
    "end": "1799350"
  },
  {
    "text": "contains a weight be an async function is wrap our top-level request and event",
    "start": "1799350",
    "end": "1806100"
  },
  {
    "text": "handlers in fibers which is code that you know we control you know it's it's open source you can definitely see it",
    "start": "1806100",
    "end": "1812100"
  },
  {
    "text": "see how it works but you don't have to think about it that just means that most of the code that you encounter when",
    "start": "1812100",
    "end": "1817890"
  },
  {
    "text": "you're using meteor will be in a fiber at some level and you can you know create your own fibers if you want to",
    "start": "1817890",
    "end": "1823650"
  },
  {
    "text": "like control the parallelism but for the most part you don't have to worry about that and then where do we put the awaits",
    "start": "1823650",
    "end": "1830040"
  },
  {
    "text": "well we can use those to implement some asynchronous library operations down in our core packages and all the code in",
    "start": "1830040",
    "end": "1837990"
  },
  {
    "text": "between doesn't have to know about co-routines at all you know this isn't like a magic trick it's not like we're",
    "start": "1837990",
    "end": "1846090"
  },
  {
    "text": "trying to hide it but you know if you're if you're not at the point where you need to think about",
    "start": "1846090",
    "end": "1851640"
  },
  {
    "text": "those semantics then this is not something that's forced on you when you first start using meteor best of all and",
    "start": "1851640",
    "end": "1860429"
  },
  {
    "text": "this is sort of something I came to realize while I was preparing this talk last week so I hope it seems novel and",
    "start": "1860429",
    "end": "1867630"
  },
  {
    "text": "interesting to other people too if es7 adopts async and a way as they've",
    "start": "1867630",
    "end": "1873539"
  },
  {
    "text": "currently been proposed that's actually great news it's not a parallel history",
    "start": "1873539",
    "end": "1879059"
  },
  {
    "text": "like an offshoot that you know meteor is going to be diverging from if we keep using fibers it actually means that",
    "start": "1879059",
    "end": "1885120"
  },
  {
    "text": "we've got all the syntax we need and tc39 is not going to have to invent any",
    "start": "1885120",
    "end": "1890460"
  },
  {
    "text": "new syntax if we ever decide to adopt co-routines it'll literally just be a matter of relaxing the syntax because",
    "start": "1890460",
    "end": "1898529"
  },
  {
    "text": "anything you might want to do with co-routines can be expressed in terms of a sink and a weight just with that",
    "start": "1898529",
    "end": "1903720"
  },
  {
    "text": "slightly relaxed set of rules about where a weight can legally appear so I'm really excited about a sink and a weight",
    "start": "1903720",
    "end": "1910490"
  },
  {
    "text": "and about having this conversation with tc39 about whether we might consider",
    "start": "1910490",
    "end": "1916250"
  },
  {
    "text": "relaxing the syntax because the the benefits would be pretty sweet especially for meteor so there has to be",
    "start": "1916250",
    "end": "1923309"
  },
  {
    "text": "a catch I've you know portrayed this idea that Dave Herman is arguing in that blog post is not so great as a really",
    "start": "1923309",
    "end": "1929940"
  },
  {
    "text": "good idea so far in this talk and I would be irresponsible not to mention",
    "start": "1929940",
    "end": "1935130"
  },
  {
    "text": "that there are in my mind three big problems we have fibers the first",
    "start": "1935130",
    "end": "1940640"
  },
  {
    "text": "simulating fibers in the browser is difficult difficult to impossible I'm",
    "start": "1940640",
    "end": "1947730"
  },
  {
    "text": "not actually going to say impossible but let me show you what that would involve and meteor is a framework that tries to",
    "start": "1947730",
    "end": "1953820"
  },
  {
    "text": "let you write the same code on client and server so this is kind of an unfortunate inconsistency you might",
    "start": "1953820",
    "end": "1959429"
  },
  {
    "text": "though think we could implement fibers using the s7 a sink and a weight because they're sort of you know similar",
    "start": "1959429",
    "end": "1964980"
  },
  {
    "text": "features just like maybe you'd have to insert some extra a sinks and weights well yeah to say the least technically",
    "start": "1964980",
    "end": "1971820"
  },
  {
    "text": "it is possible though it would require waiting any expression in your code any expression at all every last identifier",
    "start": "1971820",
    "end": "1978299"
  },
  {
    "text": "that might possibly evaluate to promised objects and then of course",
    "start": "1978299",
    "end": "1983770"
  },
  {
    "text": "you'd be adding a bunch of awaits throughout your code any function containing one of those awaits would have to become an async function because",
    "start": "1983770",
    "end": "1990670"
  },
  {
    "text": "of the syntactic restriction and then all of those new async functions would return promises so there call sites",
    "start": "1990670",
    "end": "1997240"
  },
  {
    "text": "would have to await the promises and so on and so forth so you can see that unless you had like a strong type",
    "start": "1997240",
    "end": "2003960"
  },
  {
    "text": "inference system that allowed you and c-sharp has a type system so it benefits from this kind of thing it knows what",
    "start": "2003960",
    "end": "2010650"
  },
  {
    "text": "expressions or promises and what expressions are not unless you had that kind of type system then I think nearly",
    "start": "2010650",
    "end": "2017670"
  },
  {
    "text": "every function in your code base would become async which you know if you're just playing around with your code that",
    "start": "2017670",
    "end": "2023340"
  },
  {
    "text": "might be a nice academic exercise but it gets pretty hairy so these are our es7",
    "start": "2023340",
    "end": "2030660"
  },
  {
    "text": "async and weight functions the current I think best way of transpiling them into",
    "start": "2030660",
    "end": "2037050"
  },
  {
    "text": "es5 is to run them through a generator or babel j/s which uses for january there and they they just get a little",
    "start": "2037050",
    "end": "2043230"
  },
  {
    "text": "bit longer and harder to read and debug especially if you've never encountered this kind of soup before and these are",
    "start": "2043230",
    "end": "2051300"
  },
  {
    "text": "bear in mind the the versions of those functions that you would actually write by hand in yes seven and what would",
    "start": "2051300",
    "end": "2059398"
  },
  {
    "text": "actually happen in practice is that in order to reliably transpile this into es",
    "start": "2059399",
    "end": "2065520"
  },
  {
    "text": "seven you'd have to take every single expression and await it so now we're",
    "start": "2065520",
    "end": "2070560"
  },
  {
    "text": "awaiting the users object before calling the insert method where a waiting name because who knows what that is you know",
    "start": "2070560",
    "end": "2077158"
  },
  {
    "text": "we're a waiting response ID in case that property happens to be a promise you know we just don't know any better and so this turns out to be even longer I",
    "start": "2077159",
    "end": "2085050"
  },
  {
    "text": "mean maybe I'm over selling this because this is not like pages and pages of code you know this is a this is an okay like",
    "start": "2085050",
    "end": "2093628"
  },
  {
    "text": "nuclear backup option but I don't particularly want to stop start the meme that meteor just like eviscerates your",
    "start": "2093629",
    "end": "2100800"
  },
  {
    "text": "client-side code you know you open up the debugger and you're like what is this I didn't write this so this is just",
    "start": "2100800",
    "end": "2105870"
  },
  {
    "text": "a bit too much to swallow if we can avoid it the second catch",
    "start": "2105870",
    "end": "2112109"
  },
  {
    "text": "is that mutating shared global state is tricky with fibers just as it is tricky",
    "start": "2112109",
    "end": "2117359"
  },
  {
    "text": "with multi-threading the section in Dave",
    "start": "2117359",
    "end": "2123749"
  },
  {
    "text": "Herman's blog posts titled fibers are almost as or co-routines are almost as pre-emptive as threads is",
    "start": "2123749",
    "end": "2130200"
  },
  {
    "text": "basically about this topic of course you know we all know that minimizing the use",
    "start": "2130200",
    "end": "2135480"
  },
  {
    "text": "of mutable shared global state is a good idea if you can but one place you're",
    "start": "2135480",
    "end": "2140519"
  },
  {
    "text": "probably not going to be able to get away from that is the omnipresent file system it's this you know global system",
    "start": "2140519",
    "end": "2146309"
  },
  {
    "text": "resource that is definitely mutable and if you have two fibers that are like interleaving operations and one is",
    "start": "2146309",
    "end": "2152029"
  },
  {
    "text": "trying to list the contents of a directory and the other is removing or adding files to the directory you know",
    "start": "2152029",
    "end": "2157499"
  },
  {
    "text": "you very well might get back a list of directory contents that never actually correspond it to the file system and",
    "start": "2157499",
    "end": "2164039"
  },
  {
    "text": "that's that could to say the least so it's unfortunate that you can't just",
    "start": "2164039",
    "end": "2171569"
  },
  {
    "text": "like live in the dream world of having no shared global state if you could this would not be such a catch so how do we",
    "start": "2171569",
    "end": "2178079"
  },
  {
    "text": "write say file system code with fibers at meteor I want to preface this by saying I don't think this solution is",
    "start": "2178079",
    "end": "2184559"
  },
  {
    "text": "perfect but we have this helper called no yields allowed and you pass a callback function",
    "start": "2184559",
    "end": "2190470"
  },
  {
    "text": "to it and then in the context of that function fiber dot yield becomes illegal it throws an exception and you know you",
    "start": "2190470",
    "end": "2198029"
  },
  {
    "text": "find out about that at development time so you can fix it you know you have a bug it's kind of heavy-handed I think this could be",
    "start": "2198029",
    "end": "2205049"
  },
  {
    "text": "recruit improved if if you restricted",
    "start": "2205049",
    "end": "2210269"
  },
  {
    "text": "what kind of events what other kind of events can run while your fiber is yielding like if you're both accessing",
    "start": "2210269",
    "end": "2216630"
  },
  {
    "text": "the file system if you could say you know don't schedule any other events that are planning on accessing the file",
    "start": "2216630",
    "end": "2221999"
  },
  {
    "text": "system then that would be a lot more precise than just preventing the current",
    "start": "2221999",
    "end": "2227249"
  },
  {
    "text": "fiber from yielding at all because yielding can still be useful and safe so",
    "start": "2227249",
    "end": "2233099"
  },
  {
    "text": "if you have any ideas about how to implement that how to like exercise",
    "start": "2233099",
    "end": "2238109"
  },
  {
    "text": "control over what gets executed in the event loop in JavaScript then I'd like to talk about it",
    "start": "2238109",
    "end": "2243260"
  },
  {
    "text": "we also do this thing where we wrap the functions in nodes filesystem module so",
    "start": "2243260",
    "end": "2249080"
  },
  {
    "text": "that they can behave asynchronously when fiber current is defined when we run a fiber and we just use the synchronous",
    "start": "2249080",
    "end": "2255500"
  },
  {
    "text": "versions of your outside of a fiber so that's kind of a unique benefit of the filesystem module that it has both",
    "start": "2255500",
    "end": "2262040"
  },
  {
    "text": "synchronous and asynchronous versions of all those methods it allows us to provide the same API no matter where you",
    "start": "2262040",
    "end": "2268040"
  },
  {
    "text": "are which is cool but not the most generalizable thing okay so the third",
    "start": "2268040",
    "end": "2273980"
  },
  {
    "text": "catch the last one is that it's kind of a pain to ensure compatibility with fibers other native modules that we're",
    "start": "2273980",
    "end": "2281420"
  },
  {
    "text": "using might not work well with fibers if they're doing crazy things the node fibers module is mature enough that",
    "start": "2281420",
    "end": "2288350"
  },
  {
    "text": "normal old JavaScript code is probably not going to interfere with fibers that much but you know who knows what a",
    "start": "2288350",
    "end": "2293780"
  },
  {
    "text": "native module is doing using its own threads manipulating the call stack on its own all those things are potential",
    "start": "2293780",
    "end": "2300740"
  },
  {
    "text": "compatibility hazards for for fibers so we just have to be really careful when we're releasing a new version of meteor",
    "start": "2300740",
    "end": "2309020"
  },
  {
    "text": "and our long term ability to keep up to date with the latest node is definitely",
    "start": "2309020",
    "end": "2314420"
  },
  {
    "text": "impacted by you know the fact that it might change its native module API and we'd have to adapt the node fibers",
    "start": "2314420",
    "end": "2320630"
  },
  {
    "text": "native module to go along with that and who knows one day that might be just too difficult and we'd have to come up with",
    "start": "2320630",
    "end": "2326090"
  },
  {
    "text": "something completely different but fortunately we have plenty of winning we're still shipping node 0.10",
    "start": "2326090",
    "end": "2332240"
  },
  {
    "text": "and people are ok with that although I'd love to upgrade and we also have the",
    "start": "2332240",
    "end": "2338240"
  },
  {
    "text": "luxury since it's sort of like a all-in-one package of shipping a specific version of node and specific",
    "start": "2338240",
    "end": "2344270"
  },
  {
    "text": "versions of all of our packages so it's not just like you install whatever the",
    "start": "2344270",
    "end": "2349580"
  },
  {
    "text": "latest minor version of your NPM packages are available in the day you decide to start using meteor it's a",
    "start": "2349580",
    "end": "2355730"
  },
  {
    "text": "little more conservative than that and that's how we can sleep at night",
    "start": "2355730",
    "end": "2361150"
  },
  {
    "text": "so for meteor the benefits still outweigh those three negatives the first",
    "start": "2361150",
    "end": "2368630"
  },
  {
    "text": "of three main benefits is learnability for new users of meteor maintainability",
    "start": "2368630",
    "end": "2376010"
  },
  {
    "text": "you know the less code that you leaked your abstractions into the less you have",
    "start": "2376010",
    "end": "2381410"
  },
  {
    "text": "to update when you decide to refactor things all the code in between request",
    "start": "2381410",
    "end": "2387620"
  },
  {
    "text": "handlers and library functions that yield need not change or you know you",
    "start": "2387620",
    "end": "2396110"
  },
  {
    "text": "not changed much when you change the way that you are doing asynchronous stuff",
    "start": "2396110",
    "end": "2401470"
  },
  {
    "text": "and flexibility so not only is this good for first-time developers it's also good",
    "start": "2401470",
    "end": "2406940"
  },
  {
    "text": "for sophisticated developers who know about promises and want to unwrap that",
    "start": "2406940",
    "end": "2412760"
  },
  {
    "text": "abstraction and write code that is faster because it is more parallelizable so those three things are why we're",
    "start": "2412760",
    "end": "2420110"
  },
  {
    "text": "going to keep shipping fibers with meteor and in our sort of you know",
    "start": "2420110",
    "end": "2426710"
  },
  {
    "text": "easygoing way suggesting to the community that this feature deserves another look so thanks",
    "start": "2426710",
    "end": "2436750"
  }
]