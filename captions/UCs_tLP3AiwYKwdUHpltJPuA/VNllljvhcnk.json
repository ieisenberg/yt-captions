[
  {
    "text": "[Music]",
    "start": "990",
    "end": "7859"
  },
  {
    "text": "okay how's everyone doing today you don't have to answer a rhetorical",
    "start": "12440",
    "end": "17490"
  },
  {
    "text": "question my name is Josh Humphries I work in platform engineering at full story if you don't know who full story",
    "start": "17490",
    "end": "25410"
  },
  {
    "text": "is I don't have a lot of time to tell you about us but check us out in booth number seven in the vendor hole today",
    "start": "25410",
    "end": "31980"
  },
  {
    "text": "I'm going to be talking about get focused in the right place adopting GRP",
    "start": "31980",
    "end": "38010"
  },
  {
    "text": "see what kind of hurdles you can expect if you're doing so we're the we can talk",
    "start": "38010",
    "end": "43980"
  },
  {
    "text": "a little bit about what maybe five six minutes just you know kind of for anyone not entirely familiar with what G or PC is all about and then talk a bit about",
    "start": "43980",
    "end": "51120"
  },
  {
    "text": "the benefits like why would we even be talking about adopting G RPC after that",
    "start": "51120",
    "end": "57030"
  },
  {
    "text": "we'll also talk about the development flow kind of how it works and in both of those two sections will see some trade-offs and hurdles like",
    "start": "57030",
    "end": "62640"
  },
  {
    "text": "what are the obstacles to using or adopting G RPC and the last couple sections is actually the the first one",
    "start": "62640",
    "end": "67890"
  },
  {
    "text": "the best practice is kind of where a lot of the meat of the talk is and then we'll talk about a couple of tools that",
    "start": "67890",
    "end": "73290"
  },
  {
    "text": "full story has provided there are open source tools that make working with G RPC systems easier and they're kind of",
    "start": "73290",
    "end": "79590"
  },
  {
    "text": "part of how to overcome these hurdles excuse me all right let's get on to the",
    "start": "79590",
    "end": "85500"
  },
  {
    "text": "what 10,000 foot view is the G RPC I'm just I'll go in detail on all three of these in a second but it's a speck right",
    "start": "85500",
    "end": "92700"
  },
  {
    "text": "for our pcs our pcs is kind of meant for glueing systems together so it's for",
    "start": "92700",
    "end": "98100"
  },
  {
    "text": "solving problems where in distributed systems or micro services where you need one program to talk to another over the network that's where you'd use an RPC",
    "start": "98100",
    "end": "104640"
  },
  {
    "text": "framework like G RPC it's code generation tools use the technology called protocol buffers and then it's",
    "start": "104640",
    "end": "110310"
  },
  {
    "text": "also a collection of runtime libraries the official G RPC libraries support 10 different languages they're open source",
    "start": "110310",
    "end": "116430"
  },
  {
    "text": "kind of contributions to support a lot of others so I mention protocol buffers I think I was not already familiar with",
    "start": "116430",
    "end": "122520"
  },
  {
    "text": "the Hecker protocol buffers so first it's a language it's a declarative language an IDL it's just for describing",
    "start": "122520",
    "end": "129869"
  },
  {
    "text": "data and the interface so you can't put any imperative code no business logic in it just describing",
    "start": "129869",
    "end": "135650"
  },
  {
    "text": "data it's also cogeneration tools so the primary tool is a command line program",
    "start": "135650",
    "end": "141500"
  },
  {
    "text": "called proto C and this is a compiler that will take proto sources and then it will generate the programming language",
    "start": "141500",
    "end": "148070"
  },
  {
    "text": "of your choice like I said out-of-the-box that supports ten different languages and there are plugins to support many others in",
    "start": "148070",
    "end": "155090"
  },
  {
    "text": "addition to an IDL like a way of describing data is also a serialization format so it's an efficient way of",
    "start": "155090",
    "end": "161300"
  },
  {
    "text": "encoding that data on the wire so the runtime libraries are available in all the various programming languages they",
    "start": "161300",
    "end": "167900"
  },
  {
    "text": "provide the support the implementation of serialization both to this efficient binary format also interrupts with JSON",
    "start": "167900",
    "end": "175220"
  },
  {
    "text": "and other kind of human readable text formats later in the talk I'll probably just say proto's or protobufs a",
    "start": "175220",
    "end": "182060"
  },
  {
    "text": "shorthand for protocol buffers so I mentioned it G RPC is a spec for our pcs",
    "start": "182060",
    "end": "188840"
  },
  {
    "text": "excuse me it's quite dry so language",
    "start": "188840",
    "end": "197060"
  },
  {
    "text": "agnostic semantics what that means is that the spec describes you know how do our pcs work with G RPC and that's like",
    "start": "197060",
    "end": "202580"
  },
  {
    "text": "what is the sequence of operations with the responsibility of the client what's the responsibility of the cinder what",
    "start": "202580",
    "end": "209480"
  },
  {
    "text": "does it actually look like as far as in addition to passing data for example you can pass metadata you can also",
    "start": "209480",
    "end": "216519"
  },
  {
    "text": "explicitly cancel outstanding operations you can propagate deadlines and there's",
    "start": "216519",
    "end": "222140"
  },
  {
    "text": "also a canonical set of error codes the GRP see also defines I think it's 17 different codes to describe if the",
    "start": "222140",
    "end": "229550"
  },
  {
    "text": "operation was successful or encountered some kind of error and even though it's",
    "start": "229550",
    "end": "234680"
  },
  {
    "text": "based on HTTP these error codes are not HTTP status codes they're bespoke to G RPC but they're similar in that they're",
    "start": "234680",
    "end": "241880"
  },
  {
    "text": "kind of wide categories of errors the specification not only describes like you know what are the behaviors but it's",
    "start": "241880",
    "end": "248090"
  },
  {
    "text": "also what does it actually look like on the wire you know so if you wanted to implement a gr PC client or server what",
    "start": "248090",
    "end": "253489"
  },
  {
    "text": "do you actually have to write on the network connection to make it happen and this is really just mapping these RPC",
    "start": "253489",
    "end": "258739"
  },
  {
    "text": "semantics on to the HTTP 2 protocol",
    "start": "258739",
    "end": "263380"
  },
  {
    "text": "code generation tools 4G RPC I mentioned that proto see the compiler will generate code in a variety of languages",
    "start": "263750",
    "end": "270150"
  },
  {
    "text": "but the proto C tool itself doesn't actually know anything about G RPC it generates data structures just data and",
    "start": "270150",
    "end": "276870"
  },
  {
    "text": "then the GOP C project provides plug-ins for proto C prota C has a pretty clever plug-in framework where you can write",
    "start": "276870",
    "end": "284040"
  },
  {
    "text": "your own code that accept descriptions of these protocols and it's up to the plug-in to then generate source code so",
    "start": "284040",
    "end": "291360"
  },
  {
    "text": "G RPC includes plugins that generate the server interfaces and the client stubs for G RPC and then the last piece of G",
    "start": "291360",
    "end": "299940"
  },
  {
    "text": "RPC is the runtime libraries again these are available in all 10 languages and this is what actually implements the",
    "start": "299940",
    "end": "305070"
  },
  {
    "text": "wire protocol that provides the server support so that if in your code you implement this generated server",
    "start": "305070",
    "end": "310980"
  },
  {
    "text": "interface you can then bind it to a port that is you know listening talking the G",
    "start": "310980",
    "end": "316350"
  },
  {
    "text": "RPC protocol using the service support and there's also machinery for the client which is a little more",
    "start": "316350",
    "end": "321420"
  },
  {
    "text": "sophisticated and has to do service discovery and load balancing there at least most of the runtimes have a way to",
    "start": "321420",
    "end": "326880"
  },
  {
    "text": "plug-in custom service discovery and custom load balancing and that's what",
    "start": "326880",
    "end": "333030"
  },
  {
    "text": "the generated stubs the generate stubs kind of call into the runtime library to actually send stuff on the wire if fewer",
    "start": "333030",
    "end": "339600"
  },
  {
    "text": "that was pretty fast intro if you're curious for more there's actually quite a lot of content on G RPC to i/o the",
    "start": "339600",
    "end": "345540"
  },
  {
    "text": "actual main developer page in Docs page protocol buffers as I mentioned is a pretty key component and it's got pretty",
    "start": "345540",
    "end": "350610"
  },
  {
    "text": "good documentation as well and then there's also an e-book you can check out called practical G RPC and full",
    "start": "350610",
    "end": "357000"
  },
  {
    "text": "disclosure I'm one of the contributors to that book so next we're going to talk",
    "start": "357000",
    "end": "362910"
  },
  {
    "text": "about now we know a little bit about what G RPC is why would we consider adopting it you know a big benefit is",
    "start": "362910",
    "end": "369600"
  },
  {
    "text": "just developer productivity this is true of other RPC frameworks as well the way that the kind of the network details",
    "start": "369600",
    "end": "375570"
  },
  {
    "text": "that the TCP protocol connection management any other that sophisticated stuff can be abstracted away so that",
    "start": "375570",
    "end": "381780"
  },
  {
    "text": "software developers can focus on just writing business logic and they don't have to worry about the connectivity details it's also very familiar",
    "start": "381780",
    "end": "389160"
  },
  {
    "text": "programming model right you're just invoking methods on an object so it's every programmers from with how to do that unlike typical",
    "start": "389160",
    "end": "396870"
  },
  {
    "text": "restful interfaces which tend to be resource centric where you might have a fixed set of verbs and then you know a",
    "start": "396870",
    "end": "402540"
  },
  {
    "text": "way to address data which is also somewhat sequel like RPC says be more action centric more like object-oriented",
    "start": "402540",
    "end": "408780"
  },
  {
    "text": "programming where you've defined the actions of the commands that the service exposes second benefit is strong typing",
    "start": "408780",
    "end": "417320"
  },
  {
    "text": "so protobufs emits code that it put about the sources themselves are a",
    "start": "417320",
    "end": "422910"
  },
  {
    "text": "contract of what the server will expect or require as the allowed fields for your request and it also describes as a",
    "start": "422910",
    "end": "429570"
  },
  {
    "text": "client what you can expect in the server's response and then if you're using a compiled language like Java Go",
    "start": "429570",
    "end": "434850"
  },
  {
    "text": "C++ with a variety of them you also get compile time type checking that it will emit code then the Java compiler or go",
    "start": "434850",
    "end": "441000"
  },
  {
    "text": "compiler can do type checking for you so and it also generates object orientated",
    "start": "441000",
    "end": "447810"
  },
  {
    "text": "I have seen where service service communication uses lots of you know dictionaries or hashes but this",
    "start": "447810",
    "end": "453090"
  },
  {
    "text": "generates API is that a compiler can type check and that I des can provide you know assistance that's one you know",
    "start": "453090",
    "end": "459540"
  },
  {
    "text": "kind of also ties back to the first benefit of developer productivity but it also type safety the trade-off about",
    "start": "459540",
    "end": "465720"
  },
  {
    "text": "flexibility is just that you are limited to the type system of protocol buffers so it's it's it's own declarative",
    "start": "465720",
    "end": "471570"
  },
  {
    "text": "language it has a set of types that it supports and that's kind of what you work with and what you're limited to it's also very efficient it's based on",
    "start": "471570",
    "end": "478770"
  },
  {
    "text": "HTTP 2 which provides header compression and also provides the ability to multiplex many requests over the same",
    "start": "478770",
    "end": "485340"
  },
  {
    "text": "socket that's particularly good if there are mobile clients you get much better battery life protocol buffers is a",
    "start": "485340",
    "end": "491940"
  },
  {
    "text": "compact binary format so that's also less on the wire which is also good for",
    "start": "491940",
    "end": "497790"
  },
  {
    "text": "mobile battery life but even more important for even if it's not mobile even if it's within a data center it's",
    "start": "497790",
    "end": "502950"
  },
  {
    "text": "much more efficient to encode and decode than JSON however what you give up is",
    "start": "502950",
    "end": "508380"
  },
  {
    "text": "the human readability it's a binary format and HTTP 2 is also a binary format it's you can't just kind of TCP",
    "start": "508380",
    "end": "516270"
  },
  {
    "text": "dump and HTTP 2 connection and see everything that's going on if it's G RPC another trade off is browser support",
    "start": "516270",
    "end": "522990"
  },
  {
    "text": "even though browsers modern brothers will support HTTP 2g RPC",
    "start": "522990",
    "end": "528010"
  },
  {
    "text": "relies on features of a CB - that are not yet exposed the browser API is like",
    "start": "528010",
    "end": "533770"
  },
  {
    "text": "the xhr language agnostic you can see there's the long list of 10 languages",
    "start": "533770",
    "end": "539770"
  },
  {
    "text": "that are officially supported I'll show a little bit later that there's actually a pretty active ecosystem of open source",
    "start": "539770",
    "end": "546100"
  },
  {
    "text": "development that has implemented benefits or human GRP C in many other",
    "start": "546100",
    "end": "551440"
  },
  {
    "text": "languages and so yeah because it's first off a specification you can be",
    "start": "551440",
    "end": "557980"
  },
  {
    "text": "guaranteed a venerable interoperability regardless of if you're talking to a server written in Java or",
    "start": "557980",
    "end": "563050"
  },
  {
    "text": "C++ etc so that allows also interactions across service boundaries no you know",
    "start": "563050",
    "end": "569260"
  },
  {
    "text": "web service hell let's see I'm not going to go through all these these are a lot of features in G RPC the one thing I",
    "start": "569260",
    "end": "576880"
  },
  {
    "text": "wanted to call out is the second one it's not just normal RPC where you you send inputs and you get back outputs you",
    "start": "576880",
    "end": "584050"
  },
  {
    "text": "can actually do full bi-directional streaming and it's also full duplex that",
    "start": "584050",
    "end": "589180"
  },
  {
    "text": "also means that it can take a place of where you might otherwise use a WebSocket or a custom TCP protocol and",
    "start": "589180",
    "end": "597160"
  },
  {
    "text": "then the last three are some we'll talk particularly about interceptors middleware later but those last three features are things that I don't think",
    "start": "597160",
    "end": "603910"
  },
  {
    "text": "you are yet implemented in all 10 languages but the mission is that they will so its opinionated how is this a",
    "start": "603910",
    "end": "612550"
  },
  {
    "text": "benefit in a lot of ways it just kind of takes decisions off the plate you don't have to worry about if you want to model",
    "start": "612550",
    "end": "619780"
  },
  {
    "text": "your data just using you know Java pojos or Avro or thrift or or proto or",
    "start": "619780",
    "end": "625060"
  },
  {
    "text": "whatever or you know schema lists hashes and dictionaries which hopefully no",
    "start": "625060",
    "end": "630700"
  },
  {
    "text": "one's doing that it happens in the real and in the world also even the transport",
    "start": "630700",
    "end": "636760"
  },
  {
    "text": "layer the encoding all that stuff those are not decisions that you need to make you can just worry about business logic",
    "start": "636760",
    "end": "642610"
  },
  {
    "text": "now of course the trade-off there is that you kind of have to you know buy in on those decisions and make sure that you can work with all those constraints",
    "start": "642610",
    "end": "649630"
  },
  {
    "text": "the decisions are pre-made for you there Astra the asterisk and that's the trade-off sorry",
    "start": "649630",
    "end": "655790"
  },
  {
    "text": "is it the GRP libraries actually are layered and then the top layer is what",
    "start": "655790",
    "end": "661520"
  },
  {
    "text": "is protobuf it's called the stub layer you can think of it kind of like the presentation layer and OSI and that",
    "start": "661520",
    "end": "666890"
  },
  {
    "text": "actually can be swapped out however if you were to you know roll your own stub",
    "start": "666890",
    "end": "672140"
  },
  {
    "text": "layer you lose a lot of the interrupts benefit because kind of the standard is protocol buffers the last benefit is",
    "start": "672140",
    "end": "679720"
  },
  {
    "text": "just like I mentioned before there's a vibrant ecosystem I can kind of show this is a pretty cool webpage and github",
    "start": "679720",
    "end": "686330"
  },
  {
    "text": "it's called we just start to get up for awesome GRP see this is pretty small like hmm nope my hotkey for maximizing",
    "start": "686330",
    "end": "698920"
  },
  {
    "text": "there you go it has as you can see a lot of languages other than the ten I",
    "start": "698920",
    "end": "704300"
  },
  {
    "text": "mentioned this is like a curated list of open-source libraries that either provide your PC support for other",
    "start": "704300",
    "end": "710120"
  },
  {
    "text": "languages there's tools resources like tutorials and videos and then there's all sorts of other interesting libraries",
    "start": "710120",
    "end": "717200"
  },
  {
    "text": "and tools and I'll call in particular attention to two of them so oh come on",
    "start": "717200",
    "end": "729910"
  },
  {
    "text": "Soji RPC gateway allows you to expose your G RPC services to clients that",
    "start": "731550",
    "end": "736990"
  },
  {
    "text": "don't speak G RPC so if you wanted to have a mix or if you have kind of legacy clients or if you interrupt with restful",
    "start": "736990",
    "end": "742750"
  },
  {
    "text": "clients it's a way to annotate your proto source file and under the hood it will generate a rest gateway that you",
    "start": "742750",
    "end": "750310"
  },
  {
    "text": "can control everything you'd expect as far as like query string parameters and the URI paths and the method to use and",
    "start": "750310",
    "end": "755890"
  },
  {
    "text": "under the hood the your PC gateway will translate all those in the GRP see requests and another project is the web",
    "start": "755890",
    "end": "762280"
  },
  {
    "text": "clients this is not nearly the same as G RPC gateway even though obviously a web",
    "start": "762280",
    "end": "767800"
  },
  {
    "text": "client could interact with a normal restful service this this project is actually just tweaks to the G RPC",
    "start": "767800",
    "end": "772990"
  },
  {
    "text": "protocol that allow browsers to work with it and it there both of them are proxies that kind of sit in front of",
    "start": "772990",
    "end": "779680"
  },
  {
    "text": "your G RPC server they can accept these HTTP 101 requests and then proxies into your G OPC server okay so that's",
    "start": "779680",
    "end": "786820"
  },
  {
    "text": "hopefully a good list of compelling reasons of why one might want to adopt GRP see the how so a minute before a lot",
    "start": "786820",
    "end": "793720"
  },
  {
    "text": "of code generation tools with protocol buffers the flow just you know you you write proto files you run proto c and",
    "start": "793720",
    "end": "802110"
  },
  {
    "text": "how you get whatever you tell us so there's arguments you give the proto C to tell it I want to generate Java files",
    "start": "802110",
    "end": "808180"
  },
  {
    "text": "or a ruby or go etc in this case you know if it was Java we'd end up with a class named foo because that's what this",
    "start": "808180",
    "end": "814630"
  },
  {
    "text": "message is defined as and similarly and go it'll create a struct called foo so",
    "start": "814630",
    "end": "820840"
  },
  {
    "text": "how do we actually use that to build services so the typical flow you'll define business you're sorry you're your",
    "start": "820840",
    "end": "827620"
  },
  {
    "text": "domain model like business entities all the things you care about for your API then you can define the contract what",
    "start": "827620",
    "end": "834430"
  },
  {
    "text": "are the different operations that you can perform on those entities or in that domain and I even though this is",
    "start": "834430",
    "end": "842500"
  },
  {
    "text": "referencing things like query request query response and we haven't even talked about requests and responses I find conceptually it's easier to like",
    "start": "842500",
    "end": "848860"
  },
  {
    "text": "kind of define the contract and then flush out all the inputs so then you can start defining the actual request and",
    "start": "848860",
    "end": "855250"
  },
  {
    "text": "response types that's where you define what are the inputs to each of these operations and one of the results and",
    "start": "855250",
    "end": "861100"
  },
  {
    "text": "once you've gotten all your proto sources written that's when you can actually generate code when you have a server interface",
    "start": "861100",
    "end": "866940"
  },
  {
    "text": "generated by proto see you didn't just write code to implement the interface and it's very trivial to stand up a",
    "start": "866940",
    "end": "872440"
  },
  {
    "text": "service similarly you know when there's a Kelantan is a service already stood up you can do the same for generating code",
    "start": "872440",
    "end": "878680"
  },
  {
    "text": "you write an application that uses these client stubs you first will usually use",
    "start": "878680",
    "end": "884380"
  },
  {
    "text": "a call that looks like you know dialing a network connection to the server and then from there all the calls use this",
    "start": "884380",
    "end": "889930"
  },
  {
    "text": "stub interaction to invoke procedures so pretty pretty standard RPC stuff so one",
    "start": "889930",
    "end": "895720"
  },
  {
    "text": "thing you can also do if you don't want to do it in this order as long as you're in service interfaces well specified you",
    "start": "895720",
    "end": "903070"
  },
  {
    "text": "can implement both at the same time and you can just test your client using mocks so that seems pretty",
    "start": "903070",
    "end": "908650"
  },
  {
    "text": "straightforward so that flow is pretty straight for but there's actually a lot of questions that we haven't really answered or talked about that really",
    "start": "908650",
    "end": "915190"
  },
  {
    "text": "come up with you're trying to adopt your PC you don't have any infrastructure for using protocol buffers a lot of",
    "start": "915190",
    "end": "920980"
  },
  {
    "text": "questions that come up that GRP see in protocol buffers are not opinionated about things these are kind of unanswered questions and some of them",
    "start": "920980",
    "end": "927490"
  },
  {
    "text": "are around just what are best practices around organizing you know how do you",
    "start": "927490",
    "end": "932560"
  },
  {
    "text": "share like publish two protos how do you even test and explore api is this is not",
    "start": "932560",
    "end": "940150"
  },
  {
    "text": "something that's easy to do with existing tools etc other obstacles I",
    "start": "940150",
    "end": "945400"
  },
  {
    "text": "mentioned about using familiar tools Wireshark and curl there are plugins",
    "start": "945400",
    "end": "950790"
  },
  {
    "text": "yeah excuse me those will support HTTP too they will not be able to make sense of the payloads because they're all",
    "start": "950790",
    "end": "957100"
  },
  {
    "text": "binary encoded proto's so that's one you know big obstacle to using familiar tools for kind of poking around at an",
    "start": "957100",
    "end": "963310"
  },
  {
    "text": "API server obviously it's a new tool chain new technologies there's a learning curve there's no way to get rid",
    "start": "963310",
    "end": "969280"
  },
  {
    "text": "of that you can't potentially however amortize those costs by just using it in",
    "start": "969280",
    "end": "975220"
  },
  {
    "text": "more places like if you adopt geography and protocol buffers you might find yourself wanting to use protocol buffers",
    "start": "975220",
    "end": "980770"
  },
  {
    "text": "for data at rest using G RPC like I said even for REST API s and using G RPC",
    "start": "980770",
    "end": "986200"
  },
  {
    "text": "gateway in front of it so those at least you know help get a little bit extra return on the investment for learning",
    "start": "986200",
    "end": "991960"
  },
  {
    "text": "all this stuff writing tools is also a challenge that because it's binary encoded and it's not",
    "start": "991960",
    "end": "998350"
  },
  {
    "text": "a self-describing format it's not that easy to write tools that generically operate with stuff and if you wanted to",
    "start": "998350",
    "end": "1004440"
  },
  {
    "text": "learn more about how when we would write tools I'm not gonna go into that in this talk I gave a talk it go for calling",
    "start": "1004440",
    "end": "1009930"
  },
  {
    "text": "last August about this tool called GRP curl I'll show it at the end of the session I kind of how it works how it's",
    "start": "1009930",
    "end": "1015930"
  },
  {
    "text": "based what are the concepts on protocol buffer descriptors and reflection and dynamic D RPC so that's you can you",
    "start": "1015930",
    "end": "1024120"
  },
  {
    "text": "search for it on YouTube and you'll find the talk okay so now we talked about how",
    "start": "1024120",
    "end": "1029130"
  },
  {
    "text": "do we overcome some of these obstacles how do we answer some of these questions not all these are very prescriptive",
    "start": "1029130",
    "end": "1035069"
  },
  {
    "text": "because there are 10 languages that are supported in each language has kind of its own typical bespoke tool chains and",
    "start": "1035070",
    "end": "1041400"
  },
  {
    "text": "build tools and idiomatic ways of developing code so this will be just to",
    "start": "1041400",
    "end": "1047250"
  },
  {
    "text": "kind of numeration of things to consider and things that you can do to make adopting geography successful a G RPC",
    "start": "1047250",
    "end": "1055020"
  },
  {
    "text": "skeleton is the first thing we'll talk about so you can kind of think of a program that is a G RPC server or that",
    "start": "1055020",
    "end": "1061740"
  },
  {
    "text": "is a G R BC client as you build up in layers there's the runtime library for G RPC I",
    "start": "1061740",
    "end": "1069500"
  },
  {
    "text": "kind of like to think of this as like the nervous system or a circulatory system for all the data passing around",
    "start": "1069500",
    "end": "1076460"
  },
  {
    "text": "then we have the structure right we have to have some scaffolding some structure",
    "start": "1076460",
    "end": "1081720"
  },
  {
    "text": "to the system and that's where we can instrument cross-cutting concerns and that's the the skeleton and then of",
    "start": "1081720",
    "end": "1088320"
  },
  {
    "text": "course the business logic all your application code that's the meat of a service that's what you know developers actually want to focus on they don't",
    "start": "1088320",
    "end": "1095760"
  },
  {
    "text": "have to deal with cross-cutting concerns like putting in you know authentication and authorization or whatnot metrics",
    "start": "1095760",
    "end": "1101400"
  },
  {
    "text": "instrumentation in all of their all of their service code all their about business code so G RPC skeleton is",
    "start": "1101400",
    "end": "1108360"
  },
  {
    "text": "basically just a wrapper you take the GRP C library for whatever programming language you're using and provide a",
    "start": "1108360",
    "end": "1114300"
  },
  {
    "text": "wrapper around it that kind of auto configures certain things so there's a lot of configuration options that are",
    "start": "1114300",
    "end": "1120180"
  },
  {
    "text": "possible so some of these are kind of control how much load the server can take or how much memory can use like the",
    "start": "1120180",
    "end": "1126630"
  },
  {
    "text": "buffer sizes and max message sizes and so some of those are just you can kind of tweak based on you",
    "start": "1126630",
    "end": "1134220"
  },
  {
    "text": "know operational characteristics of your systems but the ones I put in bold I consider the most important the the",
    "start": "1134220",
    "end": "1140670"
  },
  {
    "text": "highest leverage that is having a standard interceptor that takes care of a lot of cross-cutting concerns and then",
    "start": "1140670",
    "end": "1146610"
  },
  {
    "text": "providing default services or at least one and I'll talk about that in a second so this is an example of a client",
    "start": "1146610",
    "end": "1153960"
  },
  {
    "text": "interceptor it's written in go this is the what the signature looks like so if",
    "start": "1153960",
    "end": "1159270"
  },
  {
    "text": "you don't know go I'll walk through it obviously the blue part is just the function signature this grayed out part",
    "start": "1159270",
    "end": "1165600"
  },
  {
    "text": "is a defer function so it's think of is like a finally it runs at the end so this is basically it's getting a timestamp and then when this whole",
    "start": "1165600",
    "end": "1172200"
  },
  {
    "text": "function is finished it computes how long it was running and this case we're",
    "start": "1172200",
    "end": "1177299"
  },
  {
    "text": "just updating some metrics that might be scraped by something like Prometheus or some other metrics collection tool the",
    "start": "1177299",
    "end": "1182970"
  },
  {
    "text": "important part is we're measuring what is the latency of all the our pcs in this case we want to get data that's",
    "start": "1182970",
    "end": "1188790"
  },
  {
    "text": "kind of segmented by method so I can distinguish maybe one of the methods is slower than others so I want to make",
    "start": "1188790",
    "end": "1194429"
  },
  {
    "text": "sure that's part of the data and even response codes so you can tell if certain response codes are either both",
    "start": "1194429",
    "end": "1201690"
  },
  {
    "text": "for frequency like you want to know the QPS of certain types of errors but then also latency you can get all of that by",
    "start": "1201690",
    "end": "1209070"
  },
  {
    "text": "just using a histogram where you're at using those two things as labels the method name and the status code kind of",
    "start": "1209070",
    "end": "1216240"
  },
  {
    "text": "interesting things or maybe possibly interesting is if you just want to see the total throughput and bytes in and",
    "start": "1216240",
    "end": "1221970"
  },
  {
    "text": "out different G RPC runtimes expose different things I think Java might actually provide a way where",
    "start": "1221970",
    "end": "1228450"
  },
  {
    "text": "you can see more into the actual packets that were on the on the connection and",
    "start": "1228450",
    "end": "1235110"
  },
  {
    "text": "go there's not that level of visibility so this code is just measuring it using the protobuf library saying okay this",
    "start": "1235110",
    "end": "1241620"
  },
  {
    "text": "these requests in response or protobufs tell me how big the serialize size of these things is other things you want to",
    "start": "1241620",
    "end": "1249000"
  },
  {
    "text": "do in an interceptor if you do distributed tracing another key thing for observability for authentication if",
    "start": "1249000",
    "end": "1255240"
  },
  {
    "text": "you're using TLS and client certs you probably may be nothing to do here because",
    "start": "1255240",
    "end": "1260280"
  },
  {
    "text": "handshake provides authentication but if you're doing something more Oh author bearer token like macaroons then you can",
    "start": "1260280",
    "end": "1267570"
  },
  {
    "text": "have code that pulls the information out of your current context that's a go ISM if you're using something like another",
    "start": "1267570",
    "end": "1273809"
  },
  {
    "text": "other technologies might use like thread locals to figure out what is my current execution context get credentials out of",
    "start": "1273809",
    "end": "1279809"
  },
  {
    "text": "that and then add it as essentially request headers metadata and G RPC you serve the same purpose as headers if",
    "start": "1279809",
    "end": "1287640"
  },
  {
    "text": "it's in there with the circuit breaker pattern that can also be implemented in an interceptor and the last thing it",
    "start": "1287640",
    "end": "1292890"
  },
  {
    "text": "does is actually you know put the request on the wire when it then delegates to this invoker that was one",
    "start": "1292890",
    "end": "1299130"
  },
  {
    "text": "of the arguments to the function that's the last step okay look at the other",
    "start": "1299130",
    "end": "1305309"
  },
  {
    "text": "side this is a server also note that these are both these interceptors that I'm showing are for unary calls that is",
    "start": "1305309",
    "end": "1312809"
  },
  {
    "text": "single request single response some streaming calls the signature looks a",
    "start": "1312809",
    "end": "1318299"
  },
  {
    "text": "little bit different and we're to intercept streams and different runtimes the signature will be different so this",
    "start": "1318299",
    "end": "1325260"
  },
  {
    "text": "is just a simple example that can be extrapolated to those other cases",
    "start": "1325260",
    "end": "1330559"
  },
  {
    "text": "servers very similar if you're doing structured logging then you probably want to generate a unique request ID",
    "start": "1330559",
    "end": "1336750"
  },
  {
    "text": "that way you can easily correlate all of the log messages for givens requests",
    "start": "1336750",
    "end": "1342740"
  },
  {
    "text": "again we're instrumenting the same metrics on the server side side wise it's useful to know both how long the",
    "start": "1342740",
    "end": "1348630"
  },
  {
    "text": "server thought it took and what the server thinks it's rate of requests and error rates are and it's also you know",
    "start": "1348630",
    "end": "1354659"
  },
  {
    "text": "valuable to have that on the client side as well so we record effectively the same metrics one main difference here is",
    "start": "1354659",
    "end": "1360750"
  },
  {
    "text": "logging this one at the very end on a server side most of the GOP runtimes maybe maybe all of them I don't think",
    "start": "1360750",
    "end": "1367590"
  },
  {
    "text": "they Purdue logging out of the box so if you want something like a web server access kind of log like a log",
    "start": "1367590",
    "end": "1373289"
  },
  {
    "text": "line for every request you would put it in an interceptor again you can do",
    "start": "1373289",
    "end": "1378539"
  },
  {
    "text": "tracing you can you know decorate a trace with a span saying the server's handling this authentication is a little",
    "start": "1378539",
    "end": "1385860"
  },
  {
    "text": "bit different again if you're using mutual TLS you wouldn't necessarily need to look for a token and metadata you",
    "start": "1385860",
    "end": "1392790"
  },
  {
    "text": "instead just used the appear the TCP socket Pires unlike the client identity",
    "start": "1392790",
    "end": "1399720"
  },
  {
    "text": "that the handshake had from that you can then use a policy to decide if the method is allowed or if you are doing",
    "start": "1399720",
    "end": "1407040"
  },
  {
    "text": "something bare token lie or macaroon like the Interceptor can just read it out of request metadata validate it and",
    "start": "1407040",
    "end": "1412860"
  },
  {
    "text": "as you can see you don't have to even invoke the server handler your Interceptor can you know fail early",
    "start": "1412860",
    "end": "1418380"
  },
  {
    "text": "right here where it's deciding to not even allow the method to be called and it exits early with an error code and",
    "start": "1418380",
    "end": "1425910"
  },
  {
    "text": "then another thing on the server side another concern that's useful to put in an interceptor is traffic control so if",
    "start": "1425910",
    "end": "1431070"
  },
  {
    "text": "you're doing any quota enforcement or rate limiting you would put that in the Interceptor and then lastly once it",
    "start": "1431070",
    "end": "1437760"
  },
  {
    "text": "makes us do all the checks again we're just delegating to the handler and that will actually invoke your service",
    "start": "1437760",
    "end": "1443610"
  },
  {
    "text": "interface implementation run your business logic and return the response",
    "start": "1443610",
    "end": "1449179"
  },
  {
    "text": "so I also mention or one of the bolded bullets earlier on the other slide was default services I would say the most",
    "start": "1449930",
    "end": "1456540"
  },
  {
    "text": "important to consider is service reflection because this is what makes a lot of tools much more useful this is a",
    "start": "1456540",
    "end": "1463140"
  },
  {
    "text": "documentation page on the G RPC github site the describe server reflection as",
    "start": "1463140",
    "end": "1470580"
  },
  {
    "text": "you can see it's not implemented in all ten languages but it's very easy to add what it does so I look at what this is",
    "start": "1470580",
    "end": "1476610"
  },
  {
    "text": "doing the actual G RPC project provides this proto reflection service it is a gr",
    "start": "1476610",
    "end": "1483360"
  },
  {
    "text": "PC service and you can just register it you can add it to an existing G RPC server and what that's going to do is",
    "start": "1483360",
    "end": "1489240"
  },
  {
    "text": "provide methods that your service exposes that allow clients to actually ask it about the the method like",
    "start": "1489240",
    "end": "1496560"
  },
  {
    "text": "metadata about the service like what methods do you support what do the requests and responses actually look",
    "start": "1496560",
    "end": "1501570"
  },
  {
    "text": "like to get like the schema of your RPC server and this actually is like a secret - powering most of the dynamic",
    "start": "1501570",
    "end": "1507990"
  },
  {
    "text": "tools if you want to point then tools at your server if it speaks the server",
    "start": "1507990",
    "end": "1514200"
  },
  {
    "text": "reflection most the tools work a lot better [Music]",
    "start": "1514200",
    "end": "1521900"
  },
  {
    "text": "I said it okay so other possible default services you might consider if you are",
    "start": "1525750",
    "end": "1532050"
  },
  {
    "text": "doing anything like client-side load balancing then you might consider having a health checking like every single",
    "start": "1532050",
    "end": "1537720"
  },
  {
    "text": "service exposing a health check in point there's also kind of all kinds of things that if you just have any other",
    "start": "1537720",
    "end": "1543150"
  },
  {
    "text": "cross-cutting like internally use stuff like you want to be able to use gr PC",
    "start": "1543150",
    "end": "1548460"
  },
  {
    "text": "tools to dig into the server's internal state for you know internal leader election stuff or other statistics those",
    "start": "1548460",
    "end": "1556080"
  },
  {
    "text": "can be provided as just G RPC services that your gr PC skeleton kind of Auto",
    "start": "1556080",
    "end": "1562080"
  },
  {
    "text": "registers so every service has it and again a lot of value is just uniformity",
    "start": "1562080",
    "end": "1567510"
  },
  {
    "text": "having everything configured the same makes all of your gr PC server is kind of behave predictably so that's what a",
    "start": "1567510",
    "end": "1574320"
  },
  {
    "text": "skeleton is now we're gonna talk a little bit about organizing proto sources this is the least prescriptive",
    "start": "1574320",
    "end": "1580890"
  },
  {
    "text": "part of the talk just because there's so many different ways that organizations manage their source control as far as",
    "start": "1580890",
    "end": "1587340"
  },
  {
    "text": "like organizing code and different repos etc and there's also some of those are influenced by the language you're using",
    "start": "1587340",
    "end": "1592590"
  },
  {
    "text": "and what is idiomatic well I'll go through a couple of different cases and hopefully you'll find some value here",
    "start": "1592590",
    "end": "1597900"
  },
  {
    "text": "and this may not be the most common way that companies develop code but it's",
    "start": "1597900",
    "end": "1603720"
  },
  {
    "text": "certainly the sip the simplest when it comes to managing geo PCM proto's is if everything's in one repo so I've worked",
    "start": "1603720",
    "end": "1611010"
  },
  {
    "text": "at a few companies that have a mono repo so I know it's not super rare but maybe it's not that common either but this is",
    "start": "1611010",
    "end": "1616350"
  },
  {
    "text": "a case where basically all the libraries all your service implementations everything kind of gets put into a single repo it's great for the",
    "start": "1616350",
    "end": "1623130"
  },
  {
    "text": "productivity because you can you know easily depend on any other libraries written by anyone else in the company",
    "start": "1623130",
    "end": "1629000"
  },
  {
    "text": "downsides of course or you know it's kind of gonna be hard to manage your dependency hygiene if you have an",
    "start": "1629000",
    "end": "1635970"
  },
  {
    "text": "environment like this then it's really simple efficient if it's a single language like if you're just using Java services and you're just using G RPC to",
    "start": "1635970",
    "end": "1643170"
  },
  {
    "text": "connect micro services written in Java or it go then you can basically organize your proto's you can kind of put them in",
    "start": "1643170",
    "end": "1649260"
  },
  {
    "text": "the same place as a generated output that has a very very convenient that if you're an IDE looking at generated code",
    "start": "1649260",
    "end": "1655230"
  },
  {
    "text": "it's very easy to find the source from which it came if that's not the case if you have lots",
    "start": "1655230",
    "end": "1660280"
  },
  {
    "text": "of languages in that case you just set them aside another higher level folder this is an example in go where as you",
    "start": "1660280",
    "end": "1669309"
  },
  {
    "text": "can see we have a proto and this service is off client package and it actually",
    "start": "1669309",
    "end": "1674440"
  },
  {
    "text": "generates go code into that very same package so it's very simple to find the",
    "start": "1674440",
    "end": "1679990"
  },
  {
    "text": "source of the generated code if we're using Java you might be using a maven",
    "start": "1679990",
    "end": "1685059"
  },
  {
    "text": "style layout which looks a lot different than this it's not just flat excuse me you have e for each module like the",
    "start": "1685059",
    "end": "1691299"
  },
  {
    "text": "services off client module you have a source main and where you put all your Java code there are plugins for maven",
    "start": "1691299",
    "end": "1697840"
  },
  {
    "text": "and for several other build tools to support proto's and these typically would have you just create another",
    "start": "1697840",
    "end": "1703049"
  },
  {
    "text": "directory at that level to store all the proto's for that module and the other",
    "start": "1703049",
    "end": "1710049"
  },
  {
    "text": "one is if it's not oh yeah I already talked about that so the the proto and the same module we",
    "start": "1710049",
    "end": "1715450"
  },
  {
    "text": "kind of see there with the package where the journey code would go and in a polyglot environment where you're doing",
    "start": "1715450",
    "end": "1721030"
  },
  {
    "text": "multiple languages here's an example it's got go Java JavaScript and Python in this case you just gonna have a",
    "start": "1721030",
    "end": "1726520"
  },
  {
    "text": "directory for your proto's and then organize them kind of independently",
    "start": "1726520",
    "end": "1732030"
  },
  {
    "text": "already so another thing that I've seen and have heard described at other",
    "start": "1732510",
    "end": "1738520"
  },
  {
    "text": "organizations is where there's just several large repos does not super fine grain source control repos but it's also",
    "start": "1738520",
    "end": "1745240"
  },
  {
    "text": "not a mono repo a couple of easy cases here that if the repos are fairly",
    "start": "1745240",
    "end": "1751720"
  },
  {
    "text": "isolated like it's one group developing services that don't ever communicate with another that makes it easy there's",
    "start": "1751720",
    "end": "1757570"
  },
  {
    "text": "no need to share proto's across the repos you just use the strategies that just mentioned I've also observed where",
    "start": "1757570",
    "end": "1764320"
  },
  {
    "text": "you have a Java repo with all the Java code and a go repo with all the go code",
    "start": "1764320",
    "end": "1769360"
  },
  {
    "text": "so if you have something split by language one option there is two he just create a prototype Oh with all the",
    "start": "1769360",
    "end": "1774460"
  },
  {
    "text": "proto's and then you can actually use git sub-modules to kind of put a view of all the proto's into your java repo or",
    "start": "1774460",
    "end": "1780520"
  },
  {
    "text": "your go repo and that way your build tools for building Java and go code can find the proto's and run proto c",
    "start": "1780520",
    "end": "1787760"
  },
  {
    "text": "if you have any other kind of split where it's more complicated where you might have one repo needing some proto's",
    "start": "1787760",
    "end": "1793820"
  },
  {
    "text": "from another repo that's that's that's the more complicated strategy that's and what I also suspect to be a common case",
    "start": "1793820",
    "end": "1801170"
  },
  {
    "text": "and it's harder to be prescriptive this is when you have just multiple repos like some that on the extreme end is",
    "start": "1801170",
    "end": "1806690"
  },
  {
    "text": "every library or every package is its own repo more common is probably by team",
    "start": "1806690",
    "end": "1811700"
  },
  {
    "text": "boundaries like a team that operates a service might have its own repo where they put a service and its related",
    "start": "1811700",
    "end": "1817490"
  },
  {
    "text": "services kind of like a satellite the services in a single repo in this case we have the need potentially to share",
    "start": "1817490",
    "end": "1823370"
  },
  {
    "text": "proto's across lots of repos like I have the service and all of the clients interact with that need to be able to",
    "start": "1823370",
    "end": "1828680"
  },
  {
    "text": "import those proto's so I can generate the client stubs so for those there are",
    "start": "1828680",
    "end": "1834410"
  },
  {
    "text": "some build tools like pants and basil have first-class support for building proto's I'm actually not sure how good",
    "start": "1834410",
    "end": "1841220"
  },
  {
    "text": "their support is for cross repo dependencies with proto's also things",
    "start": "1841220",
    "end": "1846650"
  },
  {
    "text": "like maven and Gradle have plugins for proto's and they also plug-in models where you can write custom plugins if",
    "start": "1846650",
    "end": "1853490"
  },
  {
    "text": "you're not up for writing custom plugins which I imagine most organizations are not then you might find get sub modules",
    "start": "1853490",
    "end": "1860090"
  },
  {
    "text": "to be your friend like that's a kind of a common way if you're using git to do dependencies is that you could sub",
    "start": "1860090",
    "end": "1865640"
  },
  {
    "text": "module in your dependencies into folders into your main repo and then that gives you your repo access to the proto's you",
    "start": "1865640",
    "end": "1871520"
  },
  {
    "text": "can run code gin generate your client stubs etc one other kind of if if you're",
    "start": "1871520",
    "end": "1878450"
  },
  {
    "text": "trying to figure out how to organize repos and where to put proto's I would highly recommend putting proto's alongside the service implementation",
    "start": "1878450",
    "end": "1885110"
  },
  {
    "text": "just because as a service owner and a service developer it's very frustrating if you're making changes to have to",
    "start": "1885110",
    "end": "1890990"
  },
  {
    "text": "interact with two different repos they have to first change your proto's and then go and change implementation and if",
    "start": "1890990",
    "end": "1897140"
  },
  {
    "text": "you find a problem then it's much slower iteration time now that is slightly",
    "start": "1897140",
    "end": "1903290"
  },
  {
    "text": "counterintuitive from a dependency management point of view in which case you might want to embed the proto's in",
    "start": "1903290",
    "end": "1909500"
  },
  {
    "text": "like the client library but like I said so that will be more clean as far as",
    "start": "1909500",
    "end": "1915980"
  },
  {
    "text": "dependency management but it will be more friction for service owners to actually develop and iterate this",
    "start": "1915980",
    "end": "1921389"
  },
  {
    "text": "services so if you do have just a proto's folder sorry if you have a",
    "start": "1921389",
    "end": "1932129"
  },
  {
    "text": "proto's fault or you're not able to put the the proto's you know directly or next to the the code where the output",
    "start": "1932129",
    "end": "1937799"
  },
  {
    "text": "gets generated at that point you can take advantage of the fact that proto's themselves have packages we can see an",
    "start": "1937799",
    "end": "1944219"
  },
  {
    "text": "example of food bar so they kind of look like java packages or c++ namespaces so",
    "start": "1944219",
    "end": "1951329"
  },
  {
    "text": "in that case you you know define organization automatically the same way you know organize all the rest of your",
    "start": "1951329",
    "end": "1957029"
  },
  {
    "text": "code and then just to make proto's easier to find this is not enforced by",
    "start": "1957029",
    "end": "1962309"
  },
  {
    "text": "the proto by proto c but i would recommend keeping them in a folder that is named after the package structure so",
    "start": "1962309",
    "end": "1968579"
  },
  {
    "text": "that makes things easier to find so that's kind of all I can say about where",
    "start": "1968579",
    "end": "1975719"
  },
  {
    "text": "to put your produce so now we're gonna talk a little bit about how to change your services so if you're using G RPC",
    "start": "1975719",
    "end": "1981179"
  },
  {
    "text": "what can we do to evolve our API s so",
    "start": "1981179",
    "end": "1986509"
  },
  {
    "text": "the binary format for protocol buffers actually provides a lot of backwards",
    "start": "1986509",
    "end": "1992009"
  },
  {
    "text": "compatibility there's a lot you can do there's a lot changes you can make that our backwards compatible however if",
    "start": "1992009",
    "end": "1998489"
  },
  {
    "text": "you're using JSON representation like the G RPC gateway you'll lose some of",
    "start": "1998489",
    "end": "2003829"
  },
  {
    "text": "that flexibility and then obviously if you have to support if you're exposing external api's and you have to support",
    "start": "2003829",
    "end": "2008869"
  },
  {
    "text": "external clients where you don't have control over them that makes you know the changes you can make much much less",
    "start": "2008869",
    "end": "2015889"
  },
  {
    "text": "flexible and in fact if you if you're doing mobile devices and you're using G RPC from mobile devices I mean that",
    "start": "2015889",
    "end": "2022339"
  },
  {
    "text": "usually counts because you don't actually have control over when people update their software so you might have old clients in the field so there's a",
    "start": "2022339",
    "end": "2030889"
  },
  {
    "text": "lot of things you can do the protocol buffers documentation page also has kind of a full list of what",
    "start": "2030889",
    "end": "2036049"
  },
  {
    "text": "happens if you change a field type or you change it from repeated to optional or what you know how do old and new",
    "start": "2036049",
    "end": "2042169"
  },
  {
    "text": "clients you know interpret that data but this kind of describes what is more or less kind of safe changes with caveats",
    "start": "2042169",
    "end": "2049368"
  },
  {
    "text": "in particular the double asterisk is actually if you're using JSON the JSON",
    "start": "2049369",
    "end": "2054799"
  },
  {
    "text": "representation means that you can't really change types of fields I really just other than like and in 32",
    "start": "2054799",
    "end": "2060809"
  },
  {
    "text": "264 at the very bottom one things you explicitly can't do is rename services",
    "start": "2060809",
    "end": "2066779"
  },
  {
    "text": "and methods because they're their fully qualified name is in the protocol in the",
    "start": "2066779",
    "end": "2071878"
  },
  {
    "text": "wire format so we talked a little bit about just you know strategies for making backwards incompatible changes",
    "start": "2071879",
    "end": "2078179"
  },
  {
    "text": "hopefully everyone's kind of familiar with semantic versioning with api's with protocol buffers I'd recommend just",
    "start": "2078179",
    "end": "2084059"
  },
  {
    "text": "making it the last package element that way you have you know the service interface as well as you know domain out",
    "start": "2084059",
    "end": "2089940"
  },
  {
    "text": "the business entities your domain model request responses kind of all wrapped together of course in this case this is",
    "start": "2089940",
    "end": "2097799"
  },
  {
    "text": "mainly for external clients that you don't have control over and in this case you're going to have to continue supporting old versions until all the",
    "start": "2097799",
    "end": "2103920"
  },
  {
    "text": "clients are turned down if you need to be more agile which is often the case that we're using this just to connect a micro service oriented architecture and",
    "start": "2103920",
    "end": "2110490"
  },
  {
    "text": "you have control over all the clients and servers then you can take what would normally be an Enka battable change and",
    "start": "2110490",
    "end": "2116250"
  },
  {
    "text": "break it into steps where each individual step is not incompatible and the very last thing is like removing",
    "start": "2116250",
    "end": "2122160"
  },
  {
    "text": "something just a simple example we have kind of an old protocol and this is not",
    "start": "2122160",
    "end": "2128849"
  },
  {
    "text": "just your PC specific by the way just anything if you're doing software as a service you're changing api's this is a cadence to kind of understand and",
    "start": "2128849",
    "end": "2135660"
  },
  {
    "text": "respect is that you kind of roll out new versions of the protocol and you have",
    "start": "2135660",
    "end": "2141869"
  },
  {
    "text": "the clients are still sending old requests and servers are accepting a request that looks like either old or new servers are also sending back a",
    "start": "2141869",
    "end": "2148680"
  },
  {
    "text": "payload that has both old and new representations in it and that way you can then update your clients once all",
    "start": "2148680",
    "end": "2154259"
  },
  {
    "text": "the servers are updated and deployed clients can then safely send the new requests and the servers will understand",
    "start": "2154259",
    "end": "2159480"
  },
  {
    "text": "it they can also expect the new response because the servers will be sending it and the final step is just removing the",
    "start": "2159480",
    "end": "2164789"
  },
  {
    "text": "old stuff and then lastly I'm going to spend a few minutes demonstrating a",
    "start": "2164789",
    "end": "2170670"
  },
  {
    "text": "couple of full story tools I'm getting low on time so demonstration time first",
    "start": "2170670",
    "end": "2178470"
  },
  {
    "text": "I'm going to show you this tool called GRP curl is a command-line tool that's meant to be oh boy",
    "start": "2178470",
    "end": "2183900"
  },
  {
    "text": "more or less like more or less like curl for GR PC one of",
    "start": "2183900",
    "end": "2192860"
  },
  {
    "text": "the things you can do you can use it to poke at a server what I mean by that is just I'm going to ask this server I",
    "start": "2192860",
    "end": "2199970"
  },
  {
    "text": "asked so it's at API G RPC dummy this is actually a little playground that anyone can access if you want to play around",
    "start": "2199970",
    "end": "2205550"
  },
  {
    "text": "with stuff to list what it supports as you can see it supports the server reflection which is actually why this",
    "start": "2205550",
    "end": "2212930"
  },
  {
    "text": "program was even able to know what all the other services were basically used the server reflection service to ask hey",
    "start": "2212930",
    "end": "2219170"
  },
  {
    "text": "what services do you support I'm going to give kudos to a service this podcast search service called listen notes and",
    "start": "2219170",
    "end": "2225560"
  },
  {
    "text": "listen notes com this playground is this podcast services cover wrapper around that API just as a demonstration other",
    "start": "2225560",
    "end": "2234590"
  },
  {
    "text": "things you can do with GRP curl in addition to like listing we can also list the methods in a given service so",
    "start": "2234590",
    "end": "2241430"
  },
  {
    "text": "this case I asked like what are the end points in this podcast service and I get a list of methods and also has a way to",
    "start": "2241430",
    "end": "2247750"
  },
  {
    "text": "describe things so I can ask the server what does this search method look like",
    "start": "2247750",
    "end": "2255640"
  },
  {
    "text": "and this is looks like kind of protobuf source of like what it might might look like in a proto source file of the",
    "start": "2255640",
    "end": "2262310"
  },
  {
    "text": "search RPC and these are the message like request and response types it accepts I'm going to go ahead and oops",
    "start": "2262310",
    "end": "2270400"
  },
  {
    "text": "now asked to describe the request type for that for the search now here I've",
    "start": "2270400",
    "end": "2277160"
  },
  {
    "text": "added this - message template and what that means is that at the end not only is it describing a message showing me",
    "start": "2277160",
    "end": "2283970"
  },
  {
    "text": "what the fields what feels it has and in this case it has an embedded Inu it also gives me a template of a",
    "start": "2283970",
    "end": "2290210"
  },
  {
    "text": "potential JSON message so if I wanted to construct a JSON message of this message type",
    "start": "2290210",
    "end": "2295520"
  },
  {
    "text": "here's placeholders with default values for all the different fields that I can use and now I'm going to the way you",
    "start": "2295520",
    "end": "2301850"
  },
  {
    "text": "actually invoke something with TRP curl is instead of telling it to list or",
    "start": "2301850",
    "end": "2307040"
  },
  {
    "text": "describe instead of Lister described I just put the name of a method in this case",
    "start": "2307040",
    "end": "2313130"
  },
  {
    "text": "if I let me scroll back up I didn't mean to enter here you can just like in curl",
    "start": "2313130",
    "end": "2320660"
  },
  {
    "text": "you can put the data payload with a dash D argument and if you don't provide a",
    "start": "2320660",
    "end": "2326570"
  },
  {
    "text": "dash D argument it will I could just send an empty request which is not always valid depending on method you're",
    "start": "2326570",
    "end": "2331580"
  },
  {
    "text": "trying to invoke but anyways in this case I've searched for all the podcast with the word kitchen in the title and",
    "start": "2331580",
    "end": "2337190"
  },
  {
    "text": "got back a list so that's kind of GRP curl like I said it's easy to it's easy to use in this demo because my server",
    "start": "2337190",
    "end": "2342980"
  },
  {
    "text": "supports service reflection the other tool is called GRP I call it g RP Kui",
    "start": "2342980",
    "end": "2347990"
  },
  {
    "text": "just because it sounds fun but the JIRA PC web UI it's a command line tool",
    "start": "2347990",
    "end": "2353360"
  },
  {
    "text": "I can run it like GRP curl and it will just start listening it'll start up a server listening on a port this is a",
    "start": "2353360",
    "end": "2359690"
  },
  {
    "text": "case this uig RPC dummy is also out in this playground of that command line program just running in a container and",
    "start": "2359690",
    "end": "2366230"
  },
  {
    "text": "accepting requests over the Internet behind a the its own domain and TLS cert",
    "start": "2366230",
    "end": "2372640"
  },
  {
    "text": "so in this case it does the same thing this is powered by the service reflection that I can actually list all",
    "start": "2372640",
    "end": "2379730"
  },
  {
    "text": "the different services and supports I can do a search I can do the same search I did before I'm going to tell it to",
    "start": "2379730",
    "end": "2385460"
  },
  {
    "text": "include a field for the query for kitchen the check box are just enabling",
    "start": "2385460",
    "end": "2391250"
  },
  {
    "text": "if it's disabled and it'll just send these default values when I run it I get back kind of the same thing in a web",
    "start": "2391250",
    "end": "2397190"
  },
  {
    "text": "form view and then I can also add notice anything is that this is the JSON that",
    "start": "2397190",
    "end": "2402320"
  },
  {
    "text": "was built up from this request form so this can be useful to capture you can put it in a script if you're invoking",
    "start": "2402320",
    "end": "2407600"
  },
  {
    "text": "GRP curl programmatically you can also hint directly edit or paste in JSON here and then one other thing I",
    "start": "2407600",
    "end": "2413630"
  },
  {
    "text": "was going to mention the last thing is about how streaming works with GRP curl they can read input from standard in and",
    "start": "2413630",
    "end": "2419780"
  },
  {
    "text": "write to standard out so you can actually just paste in a JSON document and they'll pull that and write it in a request stream and as it gets data from",
    "start": "2419780",
    "end": "2426560"
  },
  {
    "text": "the server it'll write a standard out as a response stream where the web UI doesn't really support it batches",
    "start": "2426560",
    "end": "2432020"
  },
  {
    "text": "everything so if I do not have an example of a client like a upload stream in that case it would let me define",
    "start": "2432020",
    "end": "2438590"
  },
  {
    "text": "multiple messages I just have to construct the entire stream at once but I can do an example of a response dream",
    "start": "2438590",
    "end": "2446329"
  },
  {
    "text": "so just just so you can see that it's batching I'm gonna put three here what",
    "start": "2446329",
    "end": "2451880"
  },
  {
    "text": "this method does is it basically sends back a message waits a second since back a message waits a second until it's sent",
    "start": "2451880",
    "end": "2458089"
  },
  {
    "text": "this mini so in this case you'll see it's going to take a about three seconds because it's waiting to collect all of",
    "start": "2458089",
    "end": "2465170"
  },
  {
    "text": "the messages in the stream and you can see the three messages in the stream anyway so this is kind of makes poking",
    "start": "2465170",
    "end": "2471439"
  },
  {
    "text": "around it with your PC services easier and I guess with that I think I'm done",
    "start": "2471439",
    "end": "2477739"
  },
  {
    "text": "that's all I had to talk about so don't forget to rate the session [Applause]",
    "start": "2477739",
    "end": "2487899"
  }
]