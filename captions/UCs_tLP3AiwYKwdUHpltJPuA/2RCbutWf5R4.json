[
  {
    "start": "0",
    "end": "37000"
  },
  {
    "text": "hi I'm George Wilson I work at a cool",
    "start": "4580",
    "end": "7319"
  },
  {
    "text": "place called efox and I'm here with my",
    "start": "7319",
    "end": "9540"
  },
  {
    "text": "talk today trade-offs in algebra",
    "start": "9540",
    "end": "13200"
  },
  {
    "text": "I'm going to be talking about algebraic",
    "start": "13200",
    "end": "15719"
  },
  {
    "text": "structures that we can use and think",
    "start": "15719",
    "end": "18000"
  },
  {
    "text": "about when we're writing our functional",
    "start": "18000",
    "end": "19320"
  },
  {
    "text": "programs",
    "start": "19320",
    "end": "20460"
  },
  {
    "text": "and sort of discuss some of the",
    "start": "20460",
    "end": "22199"
  },
  {
    "text": "trade-offs between them and some of the",
    "start": "22199",
    "end": "23640"
  },
  {
    "text": "ways that we can move between these",
    "start": "23640",
    "end": "25500"
  },
  {
    "text": "structures or pick the right one for the",
    "start": "25500",
    "end": "27060"
  },
  {
    "text": "job",
    "start": "27060",
    "end": "28099"
  },
  {
    "text": "I'll start with one that I think most of",
    "start": "28099",
    "end": "31199"
  },
  {
    "text": "you are probably familiar with",
    "start": "31199",
    "end": "33719"
  },
  {
    "text": "the venerable monoid",
    "start": "33719",
    "end": "37260"
  },
  {
    "start": "37000",
    "end": "88000"
  },
  {
    "text": "so here's the type class for monoid as",
    "start": "37260",
    "end": "39719"
  },
  {
    "text": "it appears in Haskell today we have Emma",
    "start": "39719",
    "end": "41940"
  },
  {
    "text": "penned which takes two ways and gives",
    "start": "41940",
    "end": "43320"
  },
  {
    "text": "you an A and M empty which is an A and",
    "start": "43320",
    "end": "46260"
  },
  {
    "text": "we Define this in fix like less than",
    "start": "46260",
    "end": "48000"
  },
  {
    "text": "greater than guy here because typing",
    "start": "48000",
    "end": "50219"
  },
  {
    "text": "Emma pen sucks so",
    "start": "50219",
    "end": "52500"
  },
  {
    "text": "um and you might say well George why",
    "start": "52500",
    "end": "54180"
  },
  {
    "text": "would I care about this thing",
    "start": "54180",
    "end": "55920"
  },
  {
    "text": "and there's zero reason on this slide to",
    "start": "55920",
    "end": "58500"
  },
  {
    "text": "care about this thing",
    "start": "58500",
    "end": "61280"
  },
  {
    "text": "but now there is",
    "start": "61500",
    "end": "63539"
  },
  {
    "text": "monoids have laws yeah we like things",
    "start": "63539",
    "end": "66479"
  },
  {
    "text": "with laws they're good what are the laws",
    "start": "66479",
    "end": "69119"
  },
  {
    "text": "of monoids we have associativity meaning",
    "start": "69119",
    "end": "71760"
  },
  {
    "text": "that I can parenthesize and",
    "start": "71760",
    "end": "73080"
  },
  {
    "text": "de-parenthesize and play games there",
    "start": "73080",
    "end": "75299"
  },
  {
    "text": "uh without changing the result and I",
    "start": "75299",
    "end": "78420"
  },
  {
    "text": "have an identity law which says that MMD",
    "start": "78420",
    "end": "80280"
  },
  {
    "text": "combined with anything else uh is just",
    "start": "80280",
    "end": "82979"
  },
  {
    "text": "the same as that anything else on either",
    "start": "82979",
    "end": "84360"
  },
  {
    "text": "side",
    "start": "84360",
    "end": "86659"
  },
  {
    "text": "okay",
    "start": "86759",
    "end": "87960"
  },
  {
    "text": "there are lots of these lying around",
    "start": "87960",
    "end": "89340"
  },
  {
    "start": "88000",
    "end": "127000"
  },
  {
    "text": "everywhere we can add things together we",
    "start": "89340",
    "end": "92340"
  },
  {
    "text": "have a thing's associative",
    "start": "92340",
    "end": "94320"
  },
  {
    "text": "uh you know zero is the empty element",
    "start": "94320",
    "end": "96420"
  },
  {
    "text": "for addition",
    "start": "96420",
    "end": "98400"
  },
  {
    "text": "uh lists of things we can append them",
    "start": "98400",
    "end": "101100"
  },
  {
    "text": "and we can just reassociate the appends",
    "start": "101100",
    "end": "103380"
  },
  {
    "text": "if we'd like and won't change the result",
    "start": "103380",
    "end": "105479"
  },
  {
    "text": "might change the performance right we",
    "start": "105479",
    "end": "108000"
  },
  {
    "text": "can use our we can use our associativity",
    "start": "108000",
    "end": "109979"
  },
  {
    "text": "and say aha well I'll what I'll do is",
    "start": "109979",
    "end": "112079"
  },
  {
    "text": "I'll associate these things all to the",
    "start": "112079",
    "end": "113520"
  },
  {
    "text": "right and then because the left left",
    "start": "113520",
    "end": "116520"
  },
  {
    "text": "associating list depends is is really",
    "start": "116520",
    "end": "118979"
  },
  {
    "text": "bad and it takes a long time",
    "start": "118979",
    "end": "121020"
  },
  {
    "text": "and of course we have the empty list",
    "start": "121020",
    "end": "122280"
  },
  {
    "text": "which we can append to any other list",
    "start": "122280",
    "end": "124320"
  },
  {
    "text": "and not alter that list",
    "start": "124320",
    "end": "127500"
  },
  {
    "start": "127000",
    "end": "192000"
  },
  {
    "text": "we also have endomorphisms here so a",
    "start": "127500",
    "end": "130500"
  },
  {
    "text": "function from a to a this thing forms a",
    "start": "130500",
    "end": "133319"
  },
  {
    "text": "monoid where we can compose the",
    "start": "133319",
    "end": "134520"
  },
  {
    "text": "functions together and function",
    "start": "134520",
    "end": "135660"
  },
  {
    "text": "composition is associative and we have",
    "start": "135660",
    "end": "138300"
  },
  {
    "text": "the identity element is the identity",
    "start": "138300",
    "end": "141060"
  },
  {
    "text": "function",
    "start": "141060",
    "end": "143160"
  },
  {
    "text": "okay and you might say well that's great",
    "start": "143160",
    "end": "145500"
  },
  {
    "text": "you know we have monoid it's got laws",
    "start": "145500",
    "end": "147420"
  },
  {
    "text": "whatever there's a whole bunch of them",
    "start": "147420",
    "end": "148620"
  },
  {
    "text": "lying around how are we going to",
    "start": "148620",
    "end": "149819"
  },
  {
    "text": "actually use them right what's the point",
    "start": "149819",
    "end": "152940"
  },
  {
    "text": "one popular way to use them is with a",
    "start": "152940",
    "end": "155760"
  },
  {
    "text": "type class called foldable",
    "start": "155760",
    "end": "157560"
  },
  {
    "text": "and uh",
    "start": "157560",
    "end": "159660"
  },
  {
    "text": "you know an F of kind starter star is",
    "start": "159660",
    "end": "162060"
  },
  {
    "text": "foldable if I can define fold map which",
    "start": "162060",
    "end": "164220"
  },
  {
    "text": "says if you give me a function from a to",
    "start": "164220",
    "end": "166379"
  },
  {
    "text": "some monoid M and you have an F full of",
    "start": "166379",
    "end": "169140"
  },
  {
    "text": "A's what I can do is this I can run that",
    "start": "169140",
    "end": "171900"
  },
  {
    "text": "function over every a in the F to",
    "start": "171900",
    "end": "174180"
  },
  {
    "text": "produce a bunch of these monoidal values",
    "start": "174180",
    "end": "175860"
  },
  {
    "text": "and then use the monoid operation to",
    "start": "175860",
    "end": "177900"
  },
  {
    "text": "squish them all together",
    "start": "177900",
    "end": "179519"
  },
  {
    "text": "okay into one one thing",
    "start": "179519",
    "end": "182400"
  },
  {
    "text": "right and uh and the structure might be",
    "start": "182400",
    "end": "185040"
  },
  {
    "text": "empty and that's cool because we've got",
    "start": "185040",
    "end": "186540"
  },
  {
    "text": "the identity element from the monoid",
    "start": "186540",
    "end": "189000"
  },
  {
    "text": "okay",
    "start": "189000",
    "end": "191480"
  },
  {
    "text": "lists are foldable",
    "start": "191519",
    "end": "193560"
  },
  {
    "start": "192000",
    "end": "198000"
  },
  {
    "text": "um you know we can define fold map in",
    "start": "193560",
    "end": "195420"
  },
  {
    "text": "this way it does what I said",
    "start": "195420",
    "end": "197760"
  },
  {
    "text": "maybe is foldable so it gives us this",
    "start": "197760",
    "end": "200760"
  },
  {
    "start": "198000",
    "end": "211000"
  },
  {
    "text": "this nice function here or if the if the",
    "start": "200760",
    "end": "203040"
  },
  {
    "text": "maybe is adjust then we get an X that we",
    "start": "203040",
    "end": "205620"
  },
  {
    "text": "can run our function on and we're happy",
    "start": "205620",
    "end": "206879"
  },
  {
    "text": "and if the maybe is empty we just use",
    "start": "206879",
    "end": "208560"
  },
  {
    "text": "the identity from the model here",
    "start": "208560",
    "end": "210720"
  },
  {
    "text": "okay",
    "start": "210720",
    "end": "211860"
  },
  {
    "start": "211000",
    "end": "278000"
  },
  {
    "text": "and we can also as I've sort of hinted",
    "start": "211860",
    "end": "215099"
  },
  {
    "text": "at we can also use the associativity law",
    "start": "215099",
    "end": "218940"
  },
  {
    "text": "right to to Great Advantage so if we",
    "start": "218940",
    "end": "221940"
  },
  {
    "text": "have some great big expression like this",
    "start": "221940",
    "end": "223860"
  },
  {
    "text": "uh imagine we have some kind of a monoid",
    "start": "223860",
    "end": "226739"
  },
  {
    "text": "where the monoid operation is really",
    "start": "226739",
    "end": "228239"
  },
  {
    "text": "really expensive",
    "start": "228239",
    "end": "229620"
  },
  {
    "text": "right",
    "start": "229620",
    "end": "230819"
  },
  {
    "text": "maybe these are really long lists or",
    "start": "230819",
    "end": "232620"
  },
  {
    "text": "that's a bad example but pretend that",
    "start": "232620",
    "end": "234540"
  },
  {
    "text": "was a better example so what we can do",
    "start": "234540",
    "end": "237959"
  },
  {
    "text": "is this we can use associativity to",
    "start": "237959",
    "end": "240299"
  },
  {
    "text": "parenthesize these things and then run",
    "start": "240299",
    "end": "242400"
  },
  {
    "text": "these four chunks on four different",
    "start": "242400",
    "end": "243900"
  },
  {
    "text": "chords right we can parallelize our way",
    "start": "243900",
    "end": "246659"
  },
  {
    "text": "to Victory and the reason the only",
    "start": "246659",
    "end": "248819"
  },
  {
    "text": "reason that we're allowed to chunk these",
    "start": "248819",
    "end": "250620"
  },
  {
    "text": "up in this way is because associativity",
    "start": "250620",
    "end": "252900"
  },
  {
    "text": "tells us that we're not going to affect",
    "start": "252900",
    "end": "254879"
  },
  {
    "text": "the outcome",
    "start": "254879",
    "end": "257419"
  },
  {
    "text": "so",
    "start": "259260",
    "end": "260820"
  },
  {
    "text": "monoids are really cool as I hope you",
    "start": "260820",
    "end": "262979"
  },
  {
    "text": "now believe",
    "start": "262979",
    "end": "264000"
  },
  {
    "text": "but not everything can be a monoid you",
    "start": "264000",
    "end": "266460"
  },
  {
    "text": "know there's lots of structures out",
    "start": "266460",
    "end": "267840"
  },
  {
    "text": "there that are sort of nearly monoids",
    "start": "267840",
    "end": "270540"
  },
  {
    "text": "but they don't quite they don't quite",
    "start": "270540",
    "end": "272040"
  },
  {
    "text": "make it a cut and uh and those",
    "start": "272040",
    "end": "274500"
  },
  {
    "text": "structures are useful too I want to talk",
    "start": "274500",
    "end": "276600"
  },
  {
    "text": "about those",
    "start": "276600",
    "end": "278340"
  },
  {
    "start": "278000",
    "end": "351000"
  },
  {
    "text": "so one such example",
    "start": "278340",
    "end": "280620"
  },
  {
    "text": "is a non-empty list and I'm really",
    "start": "280620",
    "end": "283199"
  },
  {
    "text": "excited about this type this is great",
    "start": "283199",
    "end": "284940"
  },
  {
    "text": "look it's a list but it can't be empty",
    "start": "284940",
    "end": "288840"
  },
  {
    "text": "revolutionary",
    "start": "288840",
    "end": "291840"
  },
  {
    "text": "these things are great they're so good",
    "start": "292259",
    "end": "294000"
  },
  {
    "text": "half the time when you're using a list",
    "start": "294000",
    "end": "295979"
  },
  {
    "text": "you should like stop and think and be",
    "start": "295979",
    "end": "297900"
  },
  {
    "text": "like hang on would it make sense for",
    "start": "297900",
    "end": "299699"
  },
  {
    "text": "this to even be empty because the answer",
    "start": "299699",
    "end": "301680"
  },
  {
    "text": "is no more often than you might think so",
    "start": "301680",
    "end": "304080"
  },
  {
    "text": "I encourage you to go and go and use",
    "start": "304080",
    "end": "306540"
  },
  {
    "text": "non-empty lists all over the place",
    "start": "306540",
    "end": "308040"
  },
  {
    "text": "they're great",
    "start": "308040",
    "end": "309479"
  },
  {
    "text": "we can append them right with a list of",
    "start": "309479",
    "end": "312720"
  },
  {
    "text": "punctuation here right we can just have",
    "start": "312720",
    "end": "314639"
  },
  {
    "text": "a big this is just punctuation but trust",
    "start": "314639",
    "end": "316979"
  },
  {
    "text": "me it depends on empty list together",
    "start": "316979",
    "end": "319560"
  },
  {
    "text": "um",
    "start": "319560",
    "end": "321060"
  },
  {
    "text": "and this thing turns out to be",
    "start": "321060",
    "end": "322740"
  },
  {
    "text": "associative like like a pending",
    "start": "322740",
    "end": "325380"
  },
  {
    "text": "potentially empty lists",
    "start": "325380",
    "end": "328020"
  },
  {
    "text": "but there's no unit for this for this",
    "start": "328020",
    "end": "330720"
  },
  {
    "text": "operation",
    "start": "330720",
    "end": "331680"
  },
  {
    "text": "right the because we have to have an A",
    "start": "331680",
    "end": "334680"
  },
  {
    "text": "to construct a non-empty list of A's we",
    "start": "334680",
    "end": "338220"
  },
  {
    "text": "can't produce a non-empty list out of",
    "start": "338220",
    "end": "341520"
  },
  {
    "text": "nothing",
    "start": "341520",
    "end": "342419"
  },
  {
    "text": "right we can't there's no identity",
    "start": "342419",
    "end": "344639"
  },
  {
    "text": "element but we do have an associative",
    "start": "344639",
    "end": "347220"
  },
  {
    "text": "binary operation",
    "start": "347220",
    "end": "350300"
  },
  {
    "start": "351000",
    "end": "389000"
  },
  {
    "text": "uh here's another example",
    "start": "351180",
    "end": "353639"
  },
  {
    "text": "positive integers right with addition",
    "start": "353639",
    "end": "357060"
  },
  {
    "text": "so here in an incredibly inefficient",
    "start": "357060",
    "end": "359280"
  },
  {
    "text": "implementation we've got positive",
    "start": "359280",
    "end": "361320"
  },
  {
    "text": "integers are either one or the successor",
    "start": "361320",
    "end": "363780"
  },
  {
    "text": "of a positive integer we can add these",
    "start": "363780",
    "end": "366120"
  },
  {
    "text": "things together where we sort of walk",
    "start": "366120",
    "end": "368220"
  },
  {
    "text": "down through the left one and and build",
    "start": "368220",
    "end": "370320"
  },
  {
    "text": "the right one up",
    "start": "370320",
    "end": "371639"
  },
  {
    "text": "but this this again is an example of an",
    "start": "371639",
    "end": "375000"
  },
  {
    "text": "operation that is associative but",
    "start": "375000",
    "end": "377100"
  },
  {
    "text": "there's no unit",
    "start": "377100",
    "end": "378720"
  },
  {
    "text": "right there's no there's no zero right",
    "start": "378720",
    "end": "381600"
  },
  {
    "text": "because I've contrived this example to",
    "start": "381600",
    "end": "383580"
  },
  {
    "text": "not have one",
    "start": "383580",
    "end": "386120"
  },
  {
    "text": "so there's a name for these structures",
    "start": "387000",
    "end": "389699"
  },
  {
    "start": "389000",
    "end": "418000"
  },
  {
    "text": "it's called semi-group",
    "start": "389699",
    "end": "391620"
  },
  {
    "text": "and a semi group is a bit less than a",
    "start": "391620",
    "end": "394020"
  },
  {
    "text": "monoid right it's a monoid it might not",
    "start": "394020",
    "end": "396300"
  },
  {
    "text": "have identity that might not have",
    "start": "396300",
    "end": "397860"
  },
  {
    "text": "identities we do have a binary",
    "start": "397860",
    "end": "399840"
  },
  {
    "text": "associative operation here in this case",
    "start": "399840",
    "end": "402419"
  },
  {
    "text": "we're using less than greater than as",
    "start": "402419",
    "end": "404520"
  },
  {
    "text": "the class member",
    "start": "404520",
    "end": "406259"
  },
  {
    "text": "and um and so from now on for the rest",
    "start": "406259",
    "end": "409139"
  },
  {
    "text": "of the talk when you're running type",
    "start": "409139",
    "end": "410819"
  },
  {
    "text": "inference in your head I want you to",
    "start": "410819",
    "end": "412800"
  },
  {
    "text": "infer semi-group when you see less than",
    "start": "412800",
    "end": "414479"
  },
  {
    "text": "greater than",
    "start": "414479",
    "end": "415500"
  },
  {
    "text": "rather than monoid",
    "start": "415500",
    "end": "418580"
  },
  {
    "start": "418000",
    "end": "428000"
  },
  {
    "text": "and we can happily make semi-group",
    "start": "418919",
    "end": "420660"
  },
  {
    "text": "instances for those two types that I",
    "start": "420660",
    "end": "422460"
  },
  {
    "text": "showed you before hooray right well what",
    "start": "422460",
    "end": "425400"
  },
  {
    "text": "else can we make a semi-group instance",
    "start": "425400",
    "end": "426840"
  },
  {
    "text": "for",
    "start": "426840",
    "end": "427740"
  },
  {
    "text": "every monoid",
    "start": "427740",
    "end": "430819"
  },
  {
    "start": "428000",
    "end": "503000"
  },
  {
    "text": "so we can using new type magic we can we",
    "start": "430919",
    "end": "434940"
  },
  {
    "text": "can make a semi-group instance for every",
    "start": "434940",
    "end": "437100"
  },
  {
    "text": "monoid so long as we wrap it up nicely",
    "start": "437100",
    "end": "439500"
  },
  {
    "text": "and um",
    "start": "439500",
    "end": "441120"
  },
  {
    "text": "and the laws from the semi group give us",
    "start": "441120",
    "end": "442800"
  },
  {
    "text": "the the loss from the model would give",
    "start": "442800",
    "end": "444960"
  },
  {
    "text": "us the laws we're looking for in the",
    "start": "444960",
    "end": "446099"
  },
  {
    "text": "semi-group and we're happy so there are",
    "start": "446099",
    "end": "448860"
  },
  {
    "text": "more semi groups than there are monoids",
    "start": "448860",
    "end": "451199"
  },
  {
    "text": "right because they're weaker",
    "start": "451199",
    "end": "454520"
  },
  {
    "text": "uh so monoids sort of defined a bit",
    "start": "456240",
    "end": "459960"
  },
  {
    "text": "weirdly in Haskell at the moment because",
    "start": "459960",
    "end": "461639"
  },
  {
    "text": "of History",
    "start": "461639",
    "end": "464220"
  },
  {
    "text": "um but hopefully one day it'll look like",
    "start": "464220",
    "end": "466319"
  },
  {
    "text": "this right where we have a must be a",
    "start": "466319",
    "end": "469380"
  },
  {
    "text": "semi group and then it can be a monoid",
    "start": "469380",
    "end": "471419"
  },
  {
    "text": "and then the monoi type class only has",
    "start": "471419",
    "end": "473160"
  },
  {
    "text": "one member which is M empty",
    "start": "473160",
    "end": "476400"
  },
  {
    "text": "right I hope that one day we get here",
    "start": "476400",
    "end": "479460"
  },
  {
    "text": "pardon me",
    "start": "479460",
    "end": "481199"
  },
  {
    "text": "yeah uh magmas are magmas aren't very",
    "start": "481199",
    "end": "485039"
  },
  {
    "text": "useful",
    "start": "485039",
    "end": "487319"
  },
  {
    "text": "um so we've got semi group and like",
    "start": "487319",
    "end": "489720"
  },
  {
    "text": "how are we going to use it right",
    "start": "489720",
    "end": "491940"
  },
  {
    "text": "well before when we were thinking like",
    "start": "491940",
    "end": "493680"
  },
  {
    "text": "how am I going to use all these monoids",
    "start": "493680",
    "end": "495180"
  },
  {
    "text": "lying around we were talking about",
    "start": "495180",
    "end": "496139"
  },
  {
    "text": "foldable could we use foldable with semi",
    "start": "496139",
    "end": "498960"
  },
  {
    "text": "group",
    "start": "498960",
    "end": "500460"
  },
  {
    "text": "and the answer in general is no",
    "start": "500460",
    "end": "503039"
  },
  {
    "start": "503000",
    "end": "537000"
  },
  {
    "text": "because most of our favorite foldable",
    "start": "503039",
    "end": "505440"
  },
  {
    "text": "structures most of our bread and butter",
    "start": "505440",
    "end": "507060"
  },
  {
    "text": "sort of foldable things",
    "start": "507060",
    "end": "509879"
  },
  {
    "text": "like the ones I reach for as examples",
    "start": "509879",
    "end": "511620"
  },
  {
    "text": "list and maybe have some kind of",
    "start": "511620",
    "end": "513959"
  },
  {
    "text": "emptiness associated with them like the",
    "start": "513959",
    "end": "516539"
  },
  {
    "text": "empty list or nothing or in the case of",
    "start": "516539",
    "end": "518820"
  },
  {
    "text": "the um the foldable on either anything",
    "start": "518820",
    "end": "521520"
  },
  {
    "text": "that's left is sort of is empty from the",
    "start": "521520",
    "end": "524640"
  },
  {
    "text": "perspective of the foldable",
    "start": "524640",
    "end": "526560"
  },
  {
    "text": "and this emptiness is precisely what",
    "start": "526560",
    "end": "529080"
  },
  {
    "text": "semi group can't handle so in general we",
    "start": "529080",
    "end": "532440"
  },
  {
    "text": "won't be able to use semi groups without",
    "start": "532440",
    "end": "534120"
  },
  {
    "text": "all of our foldable things",
    "start": "534120",
    "end": "537480"
  },
  {
    "start": "537000",
    "end": "678000"
  },
  {
    "text": "but some foldable containers don't have",
    "start": "537480",
    "end": "540120"
  },
  {
    "text": "an empty case like non-empty list",
    "start": "540120",
    "end": "544160"
  },
  {
    "text": "hooray non-empty list it's so good",
    "start": "545279",
    "end": "547920"
  },
  {
    "text": "here's a here's an instance for foldable",
    "start": "547920",
    "end": "550080"
  },
  {
    "text": "non-empty list",
    "start": "550080",
    "end": "551580"
  },
  {
    "text": "where I'm not using the monoid structure",
    "start": "551580",
    "end": "553620"
  },
  {
    "text": "at all",
    "start": "553620",
    "end": "554700"
  },
  {
    "text": "all I'm using is the uh",
    "start": "554700",
    "end": "558000"
  },
  {
    "text": "the append which",
    "start": "558000",
    "end": "560519"
  },
  {
    "text": "from before I told you to infer in your",
    "start": "560519",
    "end": "562380"
  },
  {
    "text": "head semi-group",
    "start": "562380",
    "end": "564000"
  },
  {
    "text": "so",
    "start": "564000",
    "end": "565140"
  },
  {
    "text": "so we could we could make a subclass for",
    "start": "565140",
    "end": "567779"
  },
  {
    "text": "foldable things that can't be empty and",
    "start": "567779",
    "end": "569940"
  },
  {
    "text": "then we can have something like fold map",
    "start": "569940",
    "end": "571500"
  },
  {
    "text": "but only requiring a semi group",
    "start": "571500",
    "end": "574560"
  },
  {
    "text": "and it's called foldable one",
    "start": "574560",
    "end": "577019"
  },
  {
    "text": "yeah look at foldable one isn't it cool",
    "start": "577019",
    "end": "579180"
  },
  {
    "text": "and now now we can only now we only",
    "start": "579180",
    "end": "582120"
  },
  {
    "text": "require a semi-group",
    "start": "582120",
    "end": "584160"
  },
  {
    "text": "we can make that foldable instance a",
    "start": "584160",
    "end": "586260"
  },
  {
    "text": "foldable one instance for non-empty list",
    "start": "586260",
    "end": "587880"
  },
  {
    "text": "instead",
    "start": "587880",
    "end": "589140"
  },
  {
    "text": "and this foldable one thing is stronger",
    "start": "589140",
    "end": "591000"
  },
  {
    "text": "right because it's foldable and then",
    "start": "591000",
    "end": "592620"
  },
  {
    "text": "some extra operations",
    "start": "592620",
    "end": "595760"
  },
  {
    "text": "you might say well hang on a bit",
    "start": "596339",
    "end": "598920"
  },
  {
    "text": "we",
    "start": "598920",
    "end": "600360"
  },
  {
    "text": "you know when we weakened our monoi down",
    "start": "600360",
    "end": "602519"
  },
  {
    "text": "to a semi-group",
    "start": "602519",
    "end": "604260"
  },
  {
    "text": "all of a sudden we had to boost up the",
    "start": "604260",
    "end": "606899"
  },
  {
    "text": "power of the foldable right we had to",
    "start": "606899",
    "end": "609600"
  },
  {
    "text": "Once We Were weakened down to semi-group",
    "start": "609600",
    "end": "611580"
  },
  {
    "text": "we had to sort of look for some extra",
    "start": "611580",
    "end": "613380"
  },
  {
    "text": "structure in our foldable thing",
    "start": "613380",
    "end": "615839"
  },
  {
    "text": "and I think that's a really interesting",
    "start": "615839",
    "end": "617580"
  },
  {
    "text": "trade-off there possibly the most",
    "start": "617580",
    "end": "619860"
  },
  {
    "text": "interesting one on the talk you can",
    "start": "619860",
    "end": "621420"
  },
  {
    "text": "leave now but please don't",
    "start": "621420",
    "end": "624959"
  },
  {
    "text": "they've sealed the doors anyway",
    "start": "624959",
    "end": "627360"
  },
  {
    "text": "um",
    "start": "627360",
    "end": "629220"
  },
  {
    "text": "so you know if you have your semi group",
    "start": "629220",
    "end": "631620"
  },
  {
    "text": "and your foldable one you're going to be",
    "start": "631620",
    "end": "633000"
  },
  {
    "text": "A-Okay you're going to have a good day",
    "start": "633000",
    "end": "634740"
  },
  {
    "text": "things are going to be good and if you",
    "start": "634740",
    "end": "636720"
  },
  {
    "text": "have a monoid and a foldable again",
    "start": "636720",
    "end": "638700"
  },
  {
    "text": "you're going to have a good day don't",
    "start": "638700",
    "end": "640380"
  },
  {
    "text": "worry it's going to be good things are",
    "start": "640380",
    "end": "642120"
  },
  {
    "text": "good",
    "start": "642120",
    "end": "642899"
  },
  {
    "text": "and if you have like a monoid and a",
    "start": "642899",
    "end": "644760"
  },
  {
    "text": "foldable one you've you've won the",
    "start": "644760",
    "end": "647040"
  },
  {
    "text": "lottery like go ahead do whatever you",
    "start": "647040",
    "end": "649079"
  },
  {
    "text": "want like",
    "start": "649079",
    "end": "651000"
  },
  {
    "text": "hooray wait you did a good thing but",
    "start": "651000",
    "end": "653940"
  },
  {
    "text": "like what if I've only got a semi-group",
    "start": "653940",
    "end": "656339"
  },
  {
    "text": "I really honestly only have a semi group",
    "start": "656339",
    "end": "658380"
  },
  {
    "text": "and I really honestly only have a",
    "start": "658380",
    "end": "660480"
  },
  {
    "text": "foldable what am I going to do about it",
    "start": "660480",
    "end": "662640"
  },
  {
    "text": "I can't use like I don't have the",
    "start": "662640",
    "end": "665640"
  },
  {
    "text": "emptiness in the in the structure to be",
    "start": "665640",
    "end": "667560"
  },
  {
    "text": "able to deal with the empty container I",
    "start": "667560",
    "end": "669300"
  },
  {
    "text": "have a container that might be in me",
    "start": "669300",
    "end": "670860"
  },
  {
    "text": "like what do I do here",
    "start": "670860",
    "end": "672839"
  },
  {
    "text": "and the answer is you cheat",
    "start": "672839",
    "end": "676100"
  },
  {
    "text": "so if you wrap a semi group in maybe",
    "start": "677100",
    "end": "678899"
  },
  {
    "start": "678000",
    "end": "849000"
  },
  {
    "text": "then you can give it a monoid instance",
    "start": "678899",
    "end": "680880"
  },
  {
    "text": "where nothing is the identity element",
    "start": "680880",
    "end": "683640"
  },
  {
    "text": "foreign",
    "start": "683640",
    "end": "686640"
  },
  {
    "text": "[Laughter]",
    "start": "688000",
    "end": "692370"
  },
  {
    "text": "[Laughter]",
    "start": "696700",
    "end": "700560"
  },
  {
    "text": "moving on then",
    "start": "714720",
    "end": "717500"
  },
  {
    "text": "I got in trouble for talking about semi",
    "start": "720060",
    "end": "721920"
  },
  {
    "text": "group so let's not do those anymore",
    "start": "721920",
    "end": "723060"
  },
  {
    "text": "let's talk about something else",
    "start": "723060",
    "end": "726320"
  },
  {
    "text": "we've seen monoids and we've weakened",
    "start": "726540",
    "end": "728820"
  },
  {
    "text": "them down to semi-group what about",
    "start": "728820",
    "end": "730620"
  },
  {
    "text": "something that is incomparable to monoid",
    "start": "730620",
    "end": "732600"
  },
  {
    "text": "is neither strictly stronger nor",
    "start": "732600",
    "end": "734579"
  },
  {
    "text": "strictly weaker",
    "start": "734579",
    "end": "736440"
  },
  {
    "text": "enter the join semiladas",
    "start": "736440",
    "end": "739800"
  },
  {
    "text": "a joint semiladas",
    "start": "739800",
    "end": "741959"
  },
  {
    "text": "is a semi-group with some extra",
    "start": "741959",
    "end": "743519"
  },
  {
    "text": "structure",
    "start": "743519",
    "end": "745200"
  },
  {
    "text": "it has two additional laws item potents",
    "start": "745200",
    "end": "748079"
  },
  {
    "text": "and commutativity",
    "start": "748079",
    "end": "750600"
  },
  {
    "text": "the law of commutativity you may have",
    "start": "750600",
    "end": "752339"
  },
  {
    "text": "come come across before",
    "start": "752339",
    "end": "754200"
  },
  {
    "text": "it means that if I uh flip around the",
    "start": "754200",
    "end": "756480"
  },
  {
    "text": "parameters",
    "start": "756480",
    "end": "757500"
  },
  {
    "text": "I won't change the result",
    "start": "757500",
    "end": "759959"
  },
  {
    "text": "item potents is uh is perhaps less",
    "start": "759959",
    "end": "763980"
  },
  {
    "text": "common in typical things that people",
    "start": "763980",
    "end": "766079"
  },
  {
    "text": "work with it means that if I use my",
    "start": "766079",
    "end": "768240"
  },
  {
    "text": "operation to combine the same thing with",
    "start": "768240",
    "end": "770820"
  },
  {
    "text": "itself I get back that same thing as the",
    "start": "770820",
    "end": "773399"
  },
  {
    "text": "result",
    "start": "773399",
    "end": "774779"
  },
  {
    "text": "and we we Define an alias here of this",
    "start": "774779",
    "end": "777779"
  },
  {
    "text": "uh this disjunction V thing",
    "start": "777779",
    "end": "780680"
  },
  {
    "text": "uh to to be yell to be an alias for our",
    "start": "780680",
    "end": "784620"
  },
  {
    "text": "operation here",
    "start": "784620",
    "end": "786120"
  },
  {
    "text": "uh for two reasons",
    "start": "786120",
    "end": "788160"
  },
  {
    "text": "one reason is because people who deal",
    "start": "788160",
    "end": "790320"
  },
  {
    "text": "with joint semi-lattices every day are",
    "start": "790320",
    "end": "792420"
  },
  {
    "text": "used to that symbol",
    "start": "792420",
    "end": "793920"
  },
  {
    "text": "and it's sort of nicer when you see it",
    "start": "793920",
    "end": "796320"
  },
  {
    "text": "but the other reason is more subtle and",
    "start": "796320",
    "end": "798540"
  },
  {
    "text": "perhaps more important",
    "start": "798540",
    "end": "800760"
  },
  {
    "text": "if I didn't have an alias here right at",
    "start": "800760",
    "end": "804240"
  },
  {
    "text": "the time at the type class constraint",
    "start": "804240",
    "end": "806100"
  },
  {
    "text": "join semilatus",
    "start": "806100",
    "end": "808260"
  },
  {
    "text": "right imagine I'm writing an expression",
    "start": "808260",
    "end": "811620"
  },
  {
    "text": "and I really depend on item potents to",
    "start": "811620",
    "end": "813959"
  },
  {
    "text": "hold",
    "start": "813959",
    "end": "815339"
  },
  {
    "text": "if I just used this guy",
    "start": "815339",
    "end": "818820"
  },
  {
    "text": "you know so long as I have a joint semi",
    "start": "818820",
    "end": "820920"
  },
  {
    "text": "lattice that's okay",
    "start": "820920",
    "end": "822959"
  },
  {
    "text": "but the type inference will infer",
    "start": "822959",
    "end": "825120"
  },
  {
    "text": "semi-group right the type inference is",
    "start": "825120",
    "end": "828000"
  },
  {
    "text": "sort of working against me",
    "start": "828000",
    "end": "830040"
  },
  {
    "text": "so if I use this Alias then the type",
    "start": "830040",
    "end": "832620"
  },
  {
    "text": "inference will demand a joint similar to",
    "start": "832620",
    "end": "835440"
  },
  {
    "text": "type class constraint on that type and",
    "start": "835440",
    "end": "838260"
  },
  {
    "text": "things will be good so that's why we",
    "start": "838260",
    "end": "839760"
  },
  {
    "text": "Define an alias is to make the type",
    "start": "839760",
    "end": "841620"
  },
  {
    "text": "inference work for us",
    "start": "841620",
    "end": "844560"
  },
  {
    "text": "what's an example of a joined semi",
    "start": "844560",
    "end": "846480"
  },
  {
    "text": "lattice",
    "start": "846480",
    "end": "847320"
  },
  {
    "text": "taking the maximum of things",
    "start": "847320",
    "end": "850079"
  },
  {
    "start": "849000",
    "end": "888000"
  },
  {
    "text": "so if we uh if we knew type things up",
    "start": "850079",
    "end": "852120"
  },
  {
    "text": "again as we always do or as we often do",
    "start": "852120",
    "end": "854519"
  },
  {
    "text": "then we can we can Define our semi-group",
    "start": "854519",
    "end": "857700"
  },
  {
    "text": "operation here to be taking the max of",
    "start": "857700",
    "end": "859380"
  },
  {
    "text": "them and that thing is a joint semi",
    "start": "859380",
    "end": "861300"
  },
  {
    "text": "lattice",
    "start": "861300",
    "end": "863100"
  },
  {
    "text": "why is it a join semilarious well we",
    "start": "863100",
    "end": "865980"
  },
  {
    "text": "have associativity",
    "start": "865980",
    "end": "867600"
  },
  {
    "text": "we have commutativity so we can you know",
    "start": "867600",
    "end": "870060"
  },
  {
    "text": "if the max of three and four is the same",
    "start": "870060",
    "end": "872639"
  },
  {
    "text": "as the max of four and three doesn't",
    "start": "872639",
    "end": "874019"
  },
  {
    "text": "matter and we have item potent right so",
    "start": "874019",
    "end": "876839"
  },
  {
    "text": "the the max of anything in itself say",
    "start": "876839",
    "end": "879300"
  },
  {
    "text": "you know the max of seven and seven is",
    "start": "879300",
    "end": "881399"
  },
  {
    "text": "just going to be seven",
    "start": "881399",
    "end": "883139"
  },
  {
    "text": "right so we have all the laws that we",
    "start": "883139",
    "end": "884760"
  },
  {
    "text": "need to be a joined semilatus",
    "start": "884760",
    "end": "888180"
  },
  {
    "start": "888000",
    "end": "934000"
  },
  {
    "text": "what do I do with this join semiladas",
    "start": "888180",
    "end": "890279"
  },
  {
    "text": "well they're very useful in concurrent",
    "start": "890279",
    "end": "893160"
  },
  {
    "text": "and distributed systems in the",
    "start": "893160",
    "end": "895500"
  },
  {
    "text": "distributed systems world we have crdts",
    "start": "895500",
    "end": "898019"
  },
  {
    "text": "which I'll come back to in a moment and",
    "start": "898019",
    "end": "900480"
  },
  {
    "text": "in the concurrency world we have elvars",
    "start": "900480",
    "end": "903300"
  },
  {
    "text": "which are being worked on by Lindsey",
    "start": "903300",
    "end": "904560"
  },
  {
    "text": "Cooper and propagators which are being",
    "start": "904560",
    "end": "907320"
  },
  {
    "text": "worked on frantically as we speak by",
    "start": "907320",
    "end": "909660"
  },
  {
    "text": "Edward commit",
    "start": "909660",
    "end": "912060"
  },
  {
    "text": "and uh if Ed's obsessed with something",
    "start": "912060",
    "end": "914699"
  },
  {
    "text": "it's probably good",
    "start": "914699",
    "end": "917660"
  },
  {
    "text": "so what is it about the joint semilider",
    "start": "919560",
    "end": "922500"
  },
  {
    "text": "structure that makes it really useful in",
    "start": "922500",
    "end": "924120"
  },
  {
    "text": "this concurrent or distributed",
    "start": "924120",
    "end": "925320"
  },
  {
    "text": "environment",
    "start": "925320",
    "end": "927060"
  },
  {
    "text": "well it's the same thing that makes",
    "start": "927060",
    "end": "928500"
  },
  {
    "text": "anything useful ever",
    "start": "928500",
    "end": "930360"
  },
  {
    "text": "it's laws",
    "start": "930360",
    "end": "933500"
  },
  {
    "start": "934000",
    "end": "970000"
  },
  {
    "text": "it's you they're useful because they",
    "start": "934199",
    "end": "936480"
  },
  {
    "text": "have laws associativity means that we",
    "start": "936480",
    "end": "938760"
  },
  {
    "text": "can chunk things up as we've seen and do",
    "start": "938760",
    "end": "940860"
  },
  {
    "text": "them in parallel right item potents",
    "start": "940860",
    "end": "943800"
  },
  {
    "text": "means that we can use at least once",
    "start": "943800",
    "end": "945779"
  },
  {
    "text": "messaging right it doesn't matter if we",
    "start": "945779",
    "end": "947579"
  },
  {
    "text": "get the same data again so long as we're",
    "start": "947579",
    "end": "949560"
  },
  {
    "text": "using an item potent operation right",
    "start": "949560",
    "end": "952800"
  },
  {
    "text": "because we've got item potents it",
    "start": "952800",
    "end": "955500"
  },
  {
    "text": "doesn't matter if the same thing comes",
    "start": "955500",
    "end": "956639"
  },
  {
    "text": "again it'll be the same result and",
    "start": "956639",
    "end": "958260"
  },
  {
    "text": "commutativity means we don't need to",
    "start": "958260",
    "end": "959820"
  },
  {
    "text": "care about the ordering of events so so",
    "start": "959820",
    "end": "962339"
  },
  {
    "text": "long as you have a joined semiladas you",
    "start": "962339",
    "end": "964500"
  },
  {
    "text": "have these really really useful",
    "start": "964500",
    "end": "966060"
  },
  {
    "text": "properties for this kind of a system",
    "start": "966060",
    "end": "969740"
  },
  {
    "start": "970000",
    "end": "998000"
  },
  {
    "text": "um just a quick sort of aside on item",
    "start": "972000",
    "end": "974699"
  },
  {
    "text": "potent",
    "start": "974699",
    "end": "975899"
  },
  {
    "text": "um item potent's sort of",
    "start": "975899",
    "end": "978420"
  },
  {
    "text": "precludes a lot of our favorite",
    "start": "978420",
    "end": "980040"
  },
  {
    "text": "commutative monoids like salmon product",
    "start": "980040",
    "end": "981899"
  },
  {
    "text": "like you can't add numbers together",
    "start": "981899",
    "end": "984120"
  },
  {
    "text": "like item potently because",
    "start": "984120",
    "end": "986600"
  },
  {
    "text": "three plus three is not three so that's",
    "start": "986600",
    "end": "990420"
  },
  {
    "text": "kind of that's kind of a bummer",
    "start": "990420",
    "end": "993120"
  },
  {
    "text": "um and the distributed systems people",
    "start": "993120",
    "end": "995459"
  },
  {
    "text": "have sort of noticed this",
    "start": "995459",
    "end": "997860"
  },
  {
    "text": "and so in the crdt world",
    "start": "997860",
    "end": "1000500"
  },
  {
    "start": "998000",
    "end": "1093000"
  },
  {
    "text": "they have two different kinds of crdts",
    "start": "1000500",
    "end": "1002600"
  },
  {
    "text": "convergent replicated data types and",
    "start": "1002600",
    "end": "1004639"
  },
  {
    "text": "commutative replicated data types which",
    "start": "1004639",
    "end": "1006560"
  },
  {
    "text": "I think is a bad name because they're",
    "start": "1006560",
    "end": "1007759"
  },
  {
    "text": "both commutative but the difference is",
    "start": "1007759",
    "end": "1010220"
  },
  {
    "text": "item potents all right by uh by not",
    "start": "1010220",
    "end": "1014899"
  },
  {
    "text": "having item potents in the commutative",
    "start": "1014899",
    "end": "1017240"
  },
  {
    "text": "replicated data type right we can use",
    "start": "1017240",
    "end": "1020120"
  },
  {
    "text": "more of our favorite commutative monoids",
    "start": "1020120",
    "end": "1022100"
  },
  {
    "text": "like adding things together",
    "start": "1022100",
    "end": "1024380"
  },
  {
    "text": "and uh",
    "start": "1024380",
    "end": "1025819"
  },
  {
    "text": "and so do we have some more freedom",
    "start": "1025819",
    "end": "1028220"
  },
  {
    "text": "there but we have to pay for it right",
    "start": "1028220",
    "end": "1030140"
  },
  {
    "text": "this is another example of where we can",
    "start": "1030140",
    "end": "1033199"
  },
  {
    "text": "weaken our algebraic structure but then",
    "start": "1033199",
    "end": "1035839"
  },
  {
    "text": "we're going to have to pay for it",
    "start": "1035839",
    "end": "1037220"
  },
  {
    "text": "somewhere else and in this case we have",
    "start": "1037220",
    "end": "1039558"
  },
  {
    "text": "to pay for it by ensuring unique",
    "start": "1039559",
    "end": "1041660"
  },
  {
    "text": "delivery of messages not at least once",
    "start": "1041660",
    "end": "1044058"
  },
  {
    "text": "delivery",
    "start": "1044059",
    "end": "1045199"
  },
  {
    "text": "okay so it's another interesting",
    "start": "1045199",
    "end": "1047360"
  },
  {
    "text": "trade-off of that form",
    "start": "1047360",
    "end": "1049460"
  },
  {
    "text": "and you say well George that's all well",
    "start": "1049460",
    "end": "1051260"
  },
  {
    "text": "and good you know you've fixed all my",
    "start": "1051260",
    "end": "1053540"
  },
  {
    "text": "distributed systems problems and now I",
    "start": "1053540",
    "end": "1055220"
  },
  {
    "text": "earn bucket loads of money but all I",
    "start": "1055220",
    "end": "1057080"
  },
  {
    "text": "wanted to do was call fold math",
    "start": "1057080",
    "end": "1060519"
  },
  {
    "text": "I can't do it",
    "start": "1062299",
    "end": "1063860"
  },
  {
    "text": "because I've joined semiladas is only a",
    "start": "1063860",
    "end": "1065900"
  },
  {
    "text": "semi-group-like thing",
    "start": "1065900",
    "end": "1068480"
  },
  {
    "text": "and I could I guess I could use a",
    "start": "1068480",
    "end": "1070039"
  },
  {
    "text": "foldable one but like there aren't that",
    "start": "1070039",
    "end": "1072020"
  },
  {
    "text": "many of them there's an on empty list",
    "start": "1072020",
    "end": "1073520"
  },
  {
    "text": "and Tuple and like a few others but",
    "start": "1073520",
    "end": "1076640"
  },
  {
    "text": "they're not as common as foldable we've",
    "start": "1076640",
    "end": "1078140"
  },
  {
    "text": "got heaps of foldables",
    "start": "1078140",
    "end": "1081140"
  },
  {
    "text": "so you might say well",
    "start": "1081140",
    "end": "1083120"
  },
  {
    "text": "what is what's the thing that's a joint",
    "start": "1083120",
    "end": "1085520"
  },
  {
    "text": "semi lattice that's also a monoid",
    "start": "1085520",
    "end": "1087980"
  },
  {
    "text": "it's called a bounded joint semulatus",
    "start": "1087980",
    "end": "1092440"
  },
  {
    "start": "1093000",
    "end": "1124000"
  },
  {
    "text": "and it looks like this",
    "start": "1093140",
    "end": "1095539"
  },
  {
    "text": "if a is a joint semi lattice and a",
    "start": "1095539",
    "end": "1098059"
  },
  {
    "text": "monoid it's a bound to join semulatus",
    "start": "1098059",
    "end": "1100039"
  },
  {
    "text": "where we Define another alias called",
    "start": "1100039",
    "end": "1102200"
  },
  {
    "text": "bottom which is what the semi-latters",
    "start": "1102200",
    "end": "1104780"
  },
  {
    "text": "people would would like to call that",
    "start": "1104780",
    "end": "1107120"
  },
  {
    "text": "thing",
    "start": "1107120",
    "end": "1107960"
  },
  {
    "text": "and uh it's an alias for M empty again",
    "start": "1107960",
    "end": "1110179"
  },
  {
    "text": "we're doing an alias for the same reason",
    "start": "1110179",
    "end": "1112419"
  },
  {
    "text": "the type inference will will work for us",
    "start": "1112419",
    "end": "1117220"
  },
  {
    "text": "and a great example of a bounded join",
    "start": "1117320",
    "end": "1120020"
  },
  {
    "text": "semilatus is taking the union of sets",
    "start": "1120020",
    "end": "1124280"
  },
  {
    "start": "1124000",
    "end": "1227000"
  },
  {
    "text": "it has all these laws look at them all",
    "start": "1124280",
    "end": "1127460"
  },
  {
    "text": "aren't they beautiful right we've got",
    "start": "1127460",
    "end": "1128799"
  },
  {
    "text": "associativity we can put in parentheses",
    "start": "1128799",
    "end": "1131120"
  },
  {
    "text": "wherever we want",
    "start": "1131120",
    "end": "1132320"
  },
  {
    "text": "we've got commutativity we can flip",
    "start": "1132320",
    "end": "1134299"
  },
  {
    "text": "things around however we want we've got",
    "start": "1134299",
    "end": "1136520"
  },
  {
    "text": "item potents because the union of a set",
    "start": "1136520",
    "end": "1138320"
  },
  {
    "text": "with itself is that same set",
    "start": "1138320",
    "end": "1140419"
  },
  {
    "text": "and we've got identity in the form of",
    "start": "1140419",
    "end": "1142100"
  },
  {
    "text": "the empty set",
    "start": "1142100",
    "end": "1143720"
  },
  {
    "text": "Isn't that cool look at all those laws",
    "start": "1143720",
    "end": "1146179"
  },
  {
    "text": "we have",
    "start": "1146179",
    "end": "1148039"
  },
  {
    "text": "and here we can do them as instances in",
    "start": "1148039",
    "end": "1149960"
  },
  {
    "text": "Haskell and it's fairly boring",
    "start": "1149960",
    "end": "1153640"
  },
  {
    "text": "and uh yeah bound to join semi lattices",
    "start": "1153679",
    "end": "1156740"
  },
  {
    "text": "now I can fix all my distributed systems",
    "start": "1156740",
    "end": "1158960"
  },
  {
    "text": "and call fold map mission accomplished",
    "start": "1158960",
    "end": "1163299"
  },
  {
    "text": "um",
    "start": "1164120",
    "end": "1165380"
  },
  {
    "text": "so",
    "start": "1165380",
    "end": "1167980"
  },
  {
    "text": "there are lots of these things out there",
    "start": "1168440",
    "end": "1170780"
  },
  {
    "text": "and",
    "start": "1170780",
    "end": "1172340"
  },
  {
    "text": "I only have so much time in the talk",
    "start": "1172340",
    "end": "1175520"
  },
  {
    "text": "um",
    "start": "1175520",
    "end": "1177080"
  },
  {
    "text": "so we've seen monoids we've looked at",
    "start": "1177080",
    "end": "1179360"
  },
  {
    "text": "something a bit weaker a bit stronger",
    "start": "1179360",
    "end": "1181160"
  },
  {
    "text": "and something that is incomparable to",
    "start": "1181160",
    "end": "1183200"
  },
  {
    "text": "monoids",
    "start": "1183200",
    "end": "1184460"
  },
  {
    "text": "but there's all these other ones",
    "start": "1184460",
    "end": "1187340"
  },
  {
    "text": "you should go and learn about all these",
    "start": "1187340",
    "end": "1189020"
  },
  {
    "text": "things right and then tell me about half",
    "start": "1189020",
    "end": "1190640"
  },
  {
    "text": "of them",
    "start": "1190640",
    "end": "1193000"
  },
  {
    "text": "so I think there's lots of really",
    "start": "1194660",
    "end": "1196160"
  },
  {
    "text": "interesting really useful things we can",
    "start": "1196160",
    "end": "1198080"
  },
  {
    "text": "find if we go and and read up on",
    "start": "1198080",
    "end": "1200000"
  },
  {
    "text": "abstract algebra that we can then bring",
    "start": "1200000",
    "end": "1201740"
  },
  {
    "text": "back Kicking and Screaming into our",
    "start": "1201740",
    "end": "1203780"
  },
  {
    "text": "programming",
    "start": "1203780",
    "end": "1204799"
  },
  {
    "text": "and we can find interesting trade-offs",
    "start": "1204799",
    "end": "1206780"
  },
  {
    "text": "where we can we can sort of if we really",
    "start": "1206780",
    "end": "1209720"
  },
  {
    "text": "really only have this structure but we",
    "start": "1209720",
    "end": "1211340"
  },
  {
    "text": "need this other one sometimes we can",
    "start": "1211340",
    "end": "1212720"
  },
  {
    "text": "sort of we can sort of cheat a little",
    "start": "1212720",
    "end": "1214700"
  },
  {
    "text": "bit and and make Conor upset or we can",
    "start": "1214700",
    "end": "1219340"
  },
  {
    "text": "or we can do other cool things you know",
    "start": "1219919",
    "end": "1221600"
  },
  {
    "text": "we can",
    "start": "1221600",
    "end": "1223400"
  },
  {
    "text": "we can work around some of these things",
    "start": "1223400",
    "end": "1224960"
  },
  {
    "text": "if we don't quite have the structure",
    "start": "1224960",
    "end": "1226220"
  },
  {
    "text": "that we want",
    "start": "1226220",
    "end": "1227720"
  },
  {
    "start": "1227000",
    "end": "1237000"
  },
  {
    "text": "that's what I just said",
    "start": "1227720",
    "end": "1229520"
  },
  {
    "text": "and that's the end of the talk",
    "start": "1229520",
    "end": "1232580"
  },
  {
    "text": "thank you",
    "start": "1232580",
    "end": "1234700"
  }
]