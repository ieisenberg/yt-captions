[
  {
    "text": "[Music]",
    "start": "3510",
    "end": "7529"
  },
  {
    "text": "all right so hi welcome to my talk thank you for coming I'm gonna I'm gonna say",
    "start": "12559",
    "end": "21029"
  },
  {
    "text": "up front something this slide says async and Rus 2018 and the the talk description might say something about",
    "start": "21029",
    "end": "28560"
  },
  {
    "text": "features and async async' features and 2018 rust but this talk really is the",
    "start": "28560",
    "end": "36450"
  },
  {
    "text": "history of how it's rust 2019 so be",
    "start": "36450",
    "end": "41550"
  },
  {
    "text": "warned right before I get started Who am I my name is Katerina Fey I'm",
    "start": "41550",
    "end": "48030"
  },
  {
    "text": "from Berlin I'm a software engineer I have a background in systems programming drivers and that sort of stuff I go by",
    "start": "48030",
    "end": "55680"
  },
  {
    "text": "that handled I'm on most social media and github whatever I develop a lot of",
    "start": "55680",
    "end": "62280"
  },
  {
    "text": "open source software I'm involved with a few different projects with different priorities and so I sort of visit a lot",
    "start": "62280",
    "end": "71159"
  },
  {
    "text": "of communities sometimes only ephemerally and pick up concepts and",
    "start": "71159",
    "end": "77190"
  },
  {
    "text": "ideas that are sort of only locally being thought about in different communities I drink a lot of tea and",
    "start": "77190",
    "end": "83280"
  },
  {
    "text": "sometimes I hack around with hardware although not as much as I used to I make",
    "start": "83280",
    "end": "88620"
  },
  {
    "text": "some really atrocious puns and I say this to sort of warn you about the slide deck that you're about to see I am sorry",
    "start": "88620",
    "end": "96450"
  },
  {
    "text": "I have a bad sense of humor and I can't help myself so this is a rusted talk so one would",
    "start": "96450",
    "end": "104250"
  },
  {
    "text": "think that I do some rust things I am a contributor to the the CLI working group which is a group of people that sort of",
    "start": "104250",
    "end": "112830"
  },
  {
    "text": "exists close to the core team that deals with developing CLI libraries and making",
    "start": "112830",
    "end": "120630"
  },
  {
    "text": "the development of CLI applications nicer I am a member of the community",
    "start": "120630",
    "end": "125880"
  },
  {
    "text": "team and Berlin RS which is sort of a local community group in Berlin we",
    "start": "125880",
    "end": "131069"
  },
  {
    "text": "organize events and workshops I've been I've given rust bridge which is a one",
    "start": "131069",
    "end": "136620"
  },
  {
    "text": "day workshop organized by or around Mozilla events to teach trust to people",
    "start": "136620",
    "end": "142870"
  },
  {
    "text": "underrepresented in technology twice now once in Paris and once in Portland and I",
    "start": "142870",
    "end": "148090"
  },
  {
    "text": "maintain a bunch of libraries so if you're writing CLI is chances are that you're using my code and if you're not",
    "start": "148090",
    "end": "154330"
  },
  {
    "text": "then you probably won't have to so I want to start this talk with a hopefully",
    "start": "154330",
    "end": "161410"
  },
  {
    "text": "very uncontroversial statement which is that concurrency is really hard it's the",
    "start": "161410",
    "end": "166720"
  },
  {
    "text": "kind of hard that makes you find 99% of bugs really easy and then that last",
    "start": "166720",
    "end": "174640"
  },
  {
    "text": "percent costs you your sanity and then you want to quit computers forever because they're always sad we there's",
    "start": "174640",
    "end": "183100"
  },
  {
    "text": "two different types of concurrency problems that you usually encounter the ones is the cars jumping over each other",
    "start": "183100",
    "end": "189430"
  },
  {
    "text": "and the other one is not enough cars going over the same road now not enough",
    "start": "189430",
    "end": "195099"
  },
  {
    "text": "cars so inefficient scaling usually isn't a big problem except that you're wasting you know hardware resources but",
    "start": "195099",
    "end": "202870"
  },
  {
    "text": "they don't generally cause any bugs what is the problem or race conditions as you",
    "start": "202870",
    "end": "209079"
  },
  {
    "text": "saw in a literal race so race conditions",
    "start": "209079",
    "end": "214799"
  },
  {
    "text": "I'm gonna give a little bit of a primer on a few concurrency issues race",
    "start": "214799",
    "end": "220390"
  },
  {
    "text": "conditions ultimately come down to the problem of what thread owns a piece of data so if you have two threads that",
    "start": "220390",
    "end": "227680"
  },
  {
    "text": "both want to change your value and say read the value incremented by one and",
    "start": "227680",
    "end": "233200"
  },
  {
    "text": "write it back if you're not careful depending on the timing on how your threads are going to be executed by your",
    "start": "233200",
    "end": "239920"
  },
  {
    "text": "scheduler either if the value is going to be one or it's going to be two and only one of those is the correct answer",
    "start": "239920",
    "end": "246519"
  },
  {
    "text": "the other one is a data race that makes you lose data and this is exactly where",
    "start": "246519",
    "end": "254079"
  },
  {
    "text": "we're rust comes in so I normally speak more at a trust conferences where I can",
    "start": "254079",
    "end": "260799"
  },
  {
    "text": "assume that people generally understand what the language is about so I'm gonna give a bit of a high-level overview and",
    "start": "260799",
    "end": "267010"
  },
  {
    "text": "we're going to dip down into a few more specific concepts throughout the talk when they become relevant so rust is a",
    "start": "267010",
    "end": "275240"
  },
  {
    "text": "systems programming language that runs blazingly fast prevents seg faults and",
    "start": "275240",
    "end": "280310"
  },
  {
    "text": "guarantees thread safety that is the marketing pitch on the website and I think the correct response to that is to",
    "start": "280310",
    "end": "287389"
  },
  {
    "text": "be a little confused because while if",
    "start": "287389",
    "end": "292550"
  },
  {
    "text": "you're in the systems programming world already and you might be familiar with a lot of these concepts there is a lot of",
    "start": "292550",
    "end": "300590"
  },
  {
    "text": "jargon there and so to break down word rust is really about there is one word",
    "start": "300590",
    "end": "306560"
  },
  {
    "text": "that summarizes certain which is safety that's safety in two different domains",
    "start": "306560",
    "end": "313120"
  },
  {
    "text": "memory safety for one rust was developed as a replacement for C++ and Firefox and",
    "start": "313120",
    "end": "320690"
  },
  {
    "text": "there is a few other design decisions that come from that for example very easy interoperability with C code which",
    "start": "320690",
    "end": "327800"
  },
  {
    "text": "can can be quite fun and the second thing is thread safety so a lot of",
    "start": "327800",
    "end": "335240"
  },
  {
    "text": "concurrency issues revolve around what thread owns data and well rust makes",
    "start": "335240",
    "end": "342110"
  },
  {
    "text": "this very explicit with ownership so in rust all data has an owner and all data",
    "start": "342110",
    "end": "350960"
  },
  {
    "text": "is always owned even if this owner is the static binary which is then the",
    "start": "350960",
    "end": "356479"
  },
  {
    "text": "owner and static data that you own can be borrowed with specific rules and",
    "start": "356479",
    "end": "364069"
  },
  {
    "text": "there's in fact very strict rules about how you can own and borrow data and in",
    "start": "364069",
    "end": "370039"
  },
  {
    "text": "what contexts this is allowed and there's a few small examples following",
    "start": "370039",
    "end": "375909"
  },
  {
    "text": "so let's take this piece of code and I again I don't know how many people here",
    "start": "375909",
    "end": "383060"
  },
  {
    "text": "actually I would like to see how many people have programmed rust in this room before okay that's about five percent maybe",
    "start": "383060",
    "end": "391099"
  },
  {
    "text": "okay so the syntax should be fairly straightforward two things I will",
    "start": "391099",
    "end": "396560"
  },
  {
    "text": "mention is this question mark is a way to gracefully propagate errors upwards",
    "start": "396560",
    "end": "402710"
  },
  {
    "text": "so F in this case will either be of by all or the function will be exited",
    "start": "402710",
    "end": "408200"
  },
  {
    "text": "early with an error it's the let something error and if",
    "start": "408200",
    "end": "414830"
  },
  {
    "text": "error return era from go I don't write much go ever but like I've seen this",
    "start": "414830",
    "end": "421370"
  },
  {
    "text": "pattern and like a lot of people know that pattern there's no exceptions and Russ so this is how you deal with errors",
    "start": "421370",
    "end": "426500"
  },
  {
    "text": "you can just sort of say ok this is now a file and if the file opening failed then the function will return an error",
    "start": "426500",
    "end": "433570"
  },
  {
    "text": "the second thing that you might be a little confused by whoops ok calm the move with the pipes so the",
    "start": "433570",
    "end": "440480"
  },
  {
    "text": "pipes open a closure with curly break versus being the actual function move in",
    "start": "440480",
    "end": "446330"
  },
  {
    "text": "this context means that the environment of the closure is captured in a mutable",
    "start": "446330",
    "end": "452150"
  },
  {
    "text": "sort of way which is important if you want to then change anything about it and so if you look at this code this is",
    "start": "452150",
    "end": "459680"
  },
  {
    "text": "not correct this will not work and in any other language this would cause a runtime issue whereas in rust",
    "start": "459680",
    "end": "466760"
  },
  {
    "text": "it just doesn't compile it doesn't compile because of ownership because the",
    "start": "466760",
    "end": "474080"
  },
  {
    "text": "first time this thread is invoked it takes ownership of the value F and then",
    "start": "474080",
    "end": "481070"
  },
  {
    "text": "F is dropped which is the equivalent of closing a file but so the next time you",
    "start": "481070",
    "end": "488270"
  },
  {
    "text": "would want to do anything which is literally the loop and the compiler understands that the thread is being",
    "start": "488270",
    "end": "493610"
  },
  {
    "text": "spawned in a loop it the the ownership has already been moved into the first",
    "start": "493610",
    "end": "499400"
  },
  {
    "text": "thread so you can't do that and it won't compile and to simplify this this",
    "start": "499400",
    "end": "504770"
  },
  {
    "text": "example a little bit this would also not compile so we have a we have some",
    "start": "504770",
    "end": "510590"
  },
  {
    "text": "function read from file which just takes a file and it does whatever and then if",
    "start": "510590",
    "end": "516110"
  },
  {
    "text": "you want to open a file and read from it twice or call this function twice this",
    "start": "516110",
    "end": "522409"
  },
  {
    "text": "would also not compile for the same reason the reason being that you try to",
    "start": "522410",
    "end": "527960"
  },
  {
    "text": "move ownership instead of borrowing the data now I could talk for a very great",
    "start": "527960",
    "end": "533630"
  },
  {
    "text": "length about borrowing and it's there's a component in the in the",
    "start": "533630",
    "end": "539829"
  },
  {
    "text": "rust compiler called the burrow checker which is the source of frequent frustration for people who are new to",
    "start": "539829",
    "end": "545709"
  },
  {
    "text": "the language realistically it's it's something you need to learn to understand and the borrow checker and",
    "start": "545709",
    "end": "552970"
  },
  {
    "text": "the borrow dynamics in rust forced you to think about data in a different way that prevents a lot of concurrency",
    "start": "552970",
    "end": "559420"
  },
  {
    "text": "issues from ever happening people like to put programming languages on some",
    "start": "559420",
    "end": "566410"
  },
  {
    "text": "imaginary spectrum I don't know exactly what the spectrum would be but you know",
    "start": "566410",
    "end": "573069"
  },
  {
    "text": "everything is PowerPoint apparently and and rust makes makes being put into a",
    "start": "573069",
    "end": "579639"
  },
  {
    "text": "spectrum like this very difficult because it has memory safety without having a garbage collector it is thread",
    "start": "579639",
    "end": "585819"
  },
  {
    "text": "safe despite being a very low-level language and not requiring a runtime or",
    "start": "585819",
    "end": "591189"
  },
  {
    "text": "a virtual environment or anything like that and I think if I had to summarize rust",
    "start": "591189",
    "end": "598420"
  },
  {
    "text": "as a language I would use this quote from the foreword of the rust book which says that rust is about empowering",
    "start": "598420",
    "end": "605679"
  },
  {
    "text": "developers to have confidence in what they develop and to be able to expand",
    "start": "605679",
    "end": "611049"
  },
  {
    "text": "their usage domains of a language further than they program before and",
    "start": "611049",
    "end": "616720"
  },
  {
    "text": "we've seen this a lot of people are programming and rust in systems programming even though they have you",
    "start": "616720",
    "end": "622299"
  },
  {
    "text": "know a Java Script or a Python background and they did mostly scripting or whatever or the other way around so",
    "start": "622299",
    "end": "629970"
  },
  {
    "text": "so with that out the way I hope you you have a bit of a picture about what rust",
    "start": "629970",
    "end": "636519"
  },
  {
    "text": "is and why it's interesting let's talk about async what is that what does it know it doesn't know anything and let's",
    "start": "636519",
    "end": "643389"
  },
  {
    "text": "find out so async programming for people who",
    "start": "643389",
    "end": "649419"
  },
  {
    "text": "don't do async programming can be a little confusing because it boils down to this sentence please do this thing",
    "start": "649419",
    "end": "657069"
  },
  {
    "text": "but don't make me wait it's about non-blocking i/o but it's",
    "start": "657069",
    "end": "662529"
  },
  {
    "text": "about non-blocking i/o in a way that it just doesn't doesn't just spawn new",
    "start": "662529",
    "end": "667689"
  },
  {
    "text": "threads and the way that this works is kind of",
    "start": "667689",
    "end": "673499"
  },
  {
    "text": "interesting and it usually results in two component or it requires two",
    "start": "673499",
    "end": "679259"
  },
  {
    "text": "components one of them is futures and we're gonna look at what not those types",
    "start": "679259",
    "end": "686160"
  },
  {
    "text": "of futures but futures are calculations that haven't happened yet",
    "start": "686160",
    "end": "692850"
  },
  {
    "text": "so when with async programming non-blocking i/o or non-blocking",
    "start": "692850",
    "end": "698100"
  },
  {
    "text": "operations generally become speculating about what will be in the future and in",
    "start": "698100",
    "end": "703709"
  },
  {
    "text": "most languages this is called literally a future although javascript Koston promises it means that something is",
    "start": "703709",
    "end": "710790"
  },
  {
    "text": "probably going to happen at some point and you just should keep asking it and",
    "start": "710790",
    "end": "716309"
  },
  {
    "text": "the interesting thing here is whenever I talk to people who don't don't have a",
    "start": "716309",
    "end": "722850"
  },
  {
    "text": "familiarity with async programming and I tell them this they asked me well is",
    "start": "722850",
    "end": "728009"
  },
  {
    "text": "that not just a thread and a joint handle and I mean in a way I like spawning a thread and then waiting for",
    "start": "728009",
    "end": "734879"
  },
  {
    "text": "that thread to terminate and do something and give you something back has similarities to that but the big",
    "start": "734879",
    "end": "740160"
  },
  {
    "text": "difference is the event loop so futures run inside an event loop which means",
    "start": "740160",
    "end": "747089"
  },
  {
    "text": "that it's a it's a scheduler that runs your features it is responsible for",
    "start": "747089",
    "end": "753389"
  },
  {
    "text": "pulling the futures for readiness and then calling whatever code that you want",
    "start": "753389",
    "end": "758879"
  },
  {
    "text": "it to call call when a future becomes ready this is this can be seen as a user",
    "start": "758879",
    "end": "764730"
  },
  {
    "text": "space scheduler for well futures now",
    "start": "764730",
    "end": "769769"
  },
  {
    "text": "event loops can be multi-threaded but they don't have to be by definition they",
    "start": "769769",
    "end": "774870"
  },
  {
    "text": "can be single threaded nodejs for example is a single threaded event loop and what it means is that it takes all",
    "start": "774870",
    "end": "782610"
  },
  {
    "text": "of the responsibility of scheduling your application and takes it from the developer of the actual application and",
    "start": "782610",
    "end": "788790"
  },
  {
    "text": "puts it on to the developer of the event loop so why would you want to do this it",
    "start": "788790",
    "end": "796350"
  },
  {
    "text": "boils down to complexity of context switching so when you spot a new thread that's a",
    "start": "796350",
    "end": "803700"
  },
  {
    "text": "lot of work it there's a lot of overhead involved you have to allocate memory you have to copy registers around your",
    "start": "803700",
    "end": "811020"
  },
  {
    "text": "kernel needs to do a lot of legwork and there's a syscall involved so you know all of this requires a bit of dedication",
    "start": "811020",
    "end": "820710"
  },
  {
    "text": "if you spawned a thread for literally every call that you do your application would be a lot slower because you have",
    "start": "820710",
    "end": "827640"
  },
  {
    "text": "so much overhead that you never see the returns or you have diminishing returns",
    "start": "827640",
    "end": "833010"
  },
  {
    "text": "from spotting threads there's this picture and I think it's a few years old",
    "start": "833010",
    "end": "838050"
  },
  {
    "text": "and I don't think I like I think this should be taken with a bit of salt",
    "start": "838050",
    "end": "843090"
  },
  {
    "text": "because obviously Apache and nginx are not comparable in many domains but",
    "start": "843090",
    "end": "849870"
  },
  {
    "text": "fundamentally Apache spawns is much more eager to spawn new threads when dealing",
    "start": "849870",
    "end": "855540"
  },
  {
    "text": "with connections than nginx nginx usually allocates a pool of workers and",
    "start": "855540",
    "end": "861810"
  },
  {
    "text": "it can you know it can grow that if it needs to but it uses async programming paradigms to use the threads that it",
    "start": "861810",
    "end": "870510"
  },
  {
    "text": "already has in the workers that it already has with more efficiency and well you can see this in the memory",
    "start": "870510",
    "end": "877970"
  },
  {
    "text": "usage this is for example also the reason why nginx is basically immune to",
    "start": "877970",
    "end": "884820"
  },
  {
    "text": "the slow lorry a dose or DDoS attack where you open connections to a web",
    "start": "884820",
    "end": "890040"
  },
  {
    "text": "server and then just let them time out in order to like make the servers for",
    "start": "890040",
    "end": "895350"
  },
  {
    "text": "lots of workers and where nginx does just in care right so I hope that you",
    "start": "895350",
    "end": "903000"
  },
  {
    "text": "have a even if you weren't familiar with async programming before I hope you understand what it's about and with the",
    "start": "903000",
    "end": "910710"
  },
  {
    "text": "the history of rust in mind or a little bit of context about rust in mind I'm here to show you some code and talk",
    "start": "910710",
    "end": "916950"
  },
  {
    "text": "about history and I was gonna say I'm all out of code but then I added some code so I'm mostly out of code and we",
    "start": "916950",
    "end": "923580"
  },
  {
    "text": "need to travel back in time to the year late 2013 to understand where a rust was",
    "start": "923580",
    "end": "932400"
  },
  {
    "text": "coming from and where it is going and why that is interesting in the context of the",
    "start": "932400",
    "end": "938620"
  },
  {
    "text": "development that has happened in the last year or in the last few years so in",
    "start": "938620",
    "end": "949120"
  },
  {
    "text": "late 2013 rust was still unstable the language became stable in May of I want",
    "start": "949120",
    "end": "955540"
  },
  {
    "text": "to say May or March of 2015 so in 2013 there were a lot of changes that were",
    "start": "955540",
    "end": "962560"
  },
  {
    "text": "still happening to the language if you a program to Neda would be very frequent that you would download the new light",
    "start": "962560",
    "end": "969250"
  },
  {
    "text": "nightly version of the compiler and your code wouldn't compile anymore because the keywords you were using disappeared",
    "start": "969250",
    "end": "974490"
  },
  {
    "text": "around this time there was a library called Lib green and green threading is",
    "start": "974490",
    "end": "980890"
  },
  {
    "text": "a different name for this concept of spawning micro processes that don't necessarily correspond to the number of",
    "start": "980890",
    "end": "988000"
  },
  {
    "text": "system threads that you have Lib Green was introduced into the the rust",
    "start": "988000",
    "end": "994030"
  },
  {
    "text": "standard library at December 26 2013 for the development efforts before that",
    "start": "994030",
    "end": "999790"
  },
  {
    "text": "we're obviously already and in place and so there were two threading directives",
    "start": "999790",
    "end": "1006390"
  },
  {
    "text": "and and schedule schedule schedule errs essentially for further adds one that",
    "start": "1006390",
    "end": "1012300"
  },
  {
    "text": "used sort of these asynchronous non-blocking micro threads and the other one that actually bounds like a one to",
    "start": "1012300",
    "end": "1017700"
  },
  {
    "text": "one system thread this enabled the the rust standard library to do non-blocking",
    "start": "1017700",
    "end": "1025199"
  },
  {
    "text": "i/o and do a lot of asynchronous programming very early on the problem is",
    "start": "1025200",
    "end": "1031110"
  },
  {
    "text": "or the problem was that that required the standard library to actually include",
    "start": "1031110",
    "end": "1036449"
  },
  {
    "text": "a run time or a run time for an event loop for these features or for",
    "start": "1036450",
    "end": "1042150"
  },
  {
    "text": "asynchronous there wasn't a futurist abstraction yet it was just generally asynchronous calls and this came with a",
    "start": "1042150",
    "end": "1048510"
  },
  {
    "text": "lot of problems and like a lot of them are specific to how the rust compiler was implemented and how the rest of the",
    "start": "1048510",
    "end": "1054960"
  },
  {
    "text": "standard library was implemented but ultimately",
    "start": "1054960",
    "end": "1061630"
  },
  {
    "text": "the decision to remove this again was because rust wanted to go into a different direction",
    "start": "1061630",
    "end": "1067059"
  },
  {
    "text": "rust didn't want to have to rely on a runtime and wanted to be more low-level",
    "start": "1067059",
    "end": "1072100"
  },
  {
    "text": "and bare metal so just a year later in late 2014 November 21st 2014 lip green",
    "start": "1072100",
    "end": "1081700"
  },
  {
    "text": "was removed and so it was dead and very",
    "start": "1081700",
    "end": "1087610"
  },
  {
    "text": "soon after people wanted to have a sink",
    "start": "1087610",
    "end": "1093160"
  },
  {
    "text": "i/o again and so this project me ors started which stands for metal i/o and",
    "start": "1093160",
    "end": "1100200"
  },
  {
    "text": "what mio or me ORS allows you to do is it allows you to do non-blocking i/o in",
    "start": "1100200",
    "end": "1109030"
  },
  {
    "text": "a slightly different way than lib green used to do it because lib green was integrated in the standard library and",
    "start": "1109030",
    "end": "1114429"
  },
  {
    "text": "it sort of had to coexist with a native threading model with a common abstraction that over both of them so it",
    "start": "1114429",
    "end": "1123100"
  },
  {
    "text": "was a little awkward to use whereas mio is really only a very slim abstraction",
    "start": "1123100",
    "end": "1129130"
  },
  {
    "text": "over platform-specific asynchronous primitives and at this point it has",
    "start": "1129130",
    "end": "1136000"
  },
  {
    "text": "grown an ecosystem around it there is plugins essentially for me oh",
    "start": "1136000",
    "end": "1141190"
  },
  {
    "text": "so that you can have asynchronous i/o on all sorts of different well not just",
    "start": "1141190",
    "end": "1146919"
  },
  {
    "text": "platforms but devices realistically and so yeah this is something that the",
    "start": "1146919",
    "end": "1153549"
  },
  {
    "text": "community kept developing it it just maintained by a few people in the core team so it's not just like the community",
    "start": "1153549",
    "end": "1159490"
  },
  {
    "text": "but Missoula is putting its weight behind it so yeah before we go any further there",
    "start": "1159490",
    "end": "1166419"
  },
  {
    "text": "is a second concept or a technically third I guess if we count borrowing and ownership is two different concepts that",
    "start": "1166419",
    "end": "1173620"
  },
  {
    "text": "I need to explain to you and this is really where a lot of magic comes from",
    "start": "1173620",
    "end": "1178770"
  },
  {
    "text": "which is zero costs abstractions so I would show the travolta gif again and",
    "start": "1178770",
    "end": "1184299"
  },
  {
    "text": "because it's one of those marketing terms again that a lot of people throw around and it confuses people who aren't",
    "start": "1184299",
    "end": "1192220"
  },
  {
    "text": "in the Rust space one way that I've heard it be explained",
    "start": "1192220",
    "end": "1197240"
  },
  {
    "text": "is that a zero cost abstraction has no discernable runtime overhead and that",
    "start": "1197240",
    "end": "1205360"
  },
  {
    "text": "sounds interesting but then it makes me ask the question in comparison to what",
    "start": "1205360",
    "end": "1211700"
  },
  {
    "text": "run time so like if you compare some",
    "start": "1211700",
    "end": "1216710"
  },
  {
    "text": "rust code that is zero abstraction zero cost abstraction to the Java JVM and",
    "start": "1216710",
    "end": "1223010"
  },
  {
    "text": "well of course you know your costs are going to be different than your runtime caustic not gonna be comparable so a",
    "start": "1223010",
    "end": "1229460"
  },
  {
    "text": "much better way to look about it look at it is that it is code that you can't",
    "start": "1229460",
    "end": "1236660"
  },
  {
    "text": "have written better by hand even if you tried and there's gonna be I'm gonna",
    "start": "1236660",
    "end": "1242330"
  },
  {
    "text": "talk about an example in a second so basically what a zero cost abstraction is is an abstraction that disappears at",
    "start": "1242330",
    "end": "1249650"
  },
  {
    "text": "compile time it is a concept a type that the compiler knows about in the first",
    "start": "1249650",
    "end": "1255350"
  },
  {
    "text": "few steps of you know compilation that the borrowed checker knows about that the type system knows about the do you",
    "start": "1255350",
    "end": "1261350"
  },
  {
    "text": "as a developer can use but when it actually comes to code generation there is nothing left of it and this is",
    "start": "1261350",
    "end": "1267730"
  },
  {
    "text": "especially beautiful in embedded development where you can use a lot of",
    "start": "1267730",
    "end": "1273620"
  },
  {
    "text": "type type information and cleverness about nesting types and sort of",
    "start": "1273620",
    "end": "1280220"
  },
  {
    "text": "attaching metadata to the type information so that the compiler can verify certain things while your final",
    "start": "1280220",
    "end": "1286190"
  },
  {
    "text": "binary will still fit into like 4k of memory on some microcontroller that you need to target oh and so for example I",
    "start": "1286190",
    "end": "1296600"
  },
  {
    "text": "forgot the example I thought that was code here the example of this that a lot",
    "start": "1296600",
    "end": "1301610"
  },
  {
    "text": "of people like to consider is iterators so in rust iterator the iterator API is",
    "start": "1301610",
    "end": "1307130"
  },
  {
    "text": "a zero cost abstraction which means that if you spawn an iterator over a collection and then you do some like",
    "start": "1307130",
    "end": "1313220"
  },
  {
    "text": "fold map like a filter map and a fault or something and you go nuts with combinators and then you collect that",
    "start": "1313220",
    "end": "1320030"
  },
  {
    "text": "into a non allocating collection say an array on the stack then that will generate code that in the",
    "start": "1320030",
    "end": "1329210"
  },
  {
    "text": "final binary if you were to reverse engineer it and you apply all the optimizations of release mode which is",
    "start": "1329210",
    "end": "1335390"
  },
  {
    "text": "important you would not be able to tell if you had used the iterator API or",
    "start": "1335390",
    "end": "1341420"
  },
  {
    "text": "written a for loop yourself in fact sometimes because type information can be traced through certain parts of the",
    "start": "1341420",
    "end": "1347870"
  },
  {
    "text": "compile steps sometimes the iterator API is actually faster than writing a for",
    "start": "1347870",
    "end": "1352910"
  },
  {
    "text": "loop because the compiler can do things like cache locality that you know you",
    "start": "1352910",
    "end": "1358430"
  },
  {
    "text": "could otherwise not assume because you have a greater scope so which brings us",
    "start": "1358430",
    "end": "1364760"
  },
  {
    "text": "to May 2016 this point rust had been stable for about a year and a library",
    "start": "1364760",
    "end": "1372590"
  },
  {
    "text": "emerged that would change asynchronous programming forever which is futures RS",
    "start": "1372590",
    "end": "1378580"
  },
  {
    "text": "you can see a theme and the memes and the slides so futures RS is a zero cost",
    "start": "1378580",
    "end": "1385850"
  },
  {
    "text": "abstraction for futures so the same thing that you can do for iterators and a for loop if you use this futures",
    "start": "1385850",
    "end": "1393710"
  },
  {
    "text": "library and you build these these future these async tape machines essentially",
    "start": "1393710",
    "end": "1400540"
  },
  {
    "text": "you can be guaranteed that the code that ends up in your binary has no allocation",
    "start": "1400540",
    "end": "1408650"
  },
  {
    "text": "overhead and no runtime overhead in comparison to if you had written it all",
    "start": "1408650",
    "end": "1414350"
  },
  {
    "text": "yourself and you were hand optimizing this exact scenario that you know you've you've",
    "start": "1414350",
    "end": "1420590"
  },
  {
    "text": "programmed into your computer and like you're doing all of it yourself I don't",
    "start": "1420590",
    "end": "1426770"
  },
  {
    "text": "want to go as far as say hand written assembly because I do like the LLVM but",
    "start": "1426770",
    "end": "1431780"
  },
  {
    "text": "I don't have faith in its optimizations that much but you can be you can be",
    "start": "1431780",
    "end": "1437210"
  },
  {
    "text": "guaranteed that you could not write non assembly code yourself any better if you",
    "start": "1437210",
    "end": "1442940"
  },
  {
    "text": "use a this abstraction which is brilliant and it allowed a second project",
    "start": "1442940",
    "end": "1448460"
  },
  {
    "text": "Tokio core at this point it's just called Tokyo but back then it was called Tokyo core to combine two libraries that",
    "start": "1448460",
    "end": "1456290"
  },
  {
    "text": "existed in the rusty Coast which were mio the asynchronous generally threading and scheduling",
    "start": "1456290",
    "end": "1463410"
  },
  {
    "text": "models and futures as a as a futures abstraction and add an event reactor to",
    "start": "1463410",
    "end": "1469830"
  },
  {
    "text": "it and this has been the situation since roughly 2016 until the beginning of this",
    "start": "1469830",
    "end": "1479340"
  },
  {
    "text": "year at least so this technology stack is generally has been generally stable",
    "start": "1479340",
    "end": "1487140"
  },
  {
    "text": "since 2016 it's not in a 1.0 so you know",
    "start": "1487140",
    "end": "1492299"
  },
  {
    "text": "the reserve the right to bump the minor version which hasn't happened yet so the",
    "start": "1492299",
    "end": "1497340"
  },
  {
    "text": "API has remained stable for this time and people have been wondering how to go",
    "start": "1497340",
    "end": "1502350"
  },
  {
    "text": "from here building asynchronous code in rusts",
    "start": "1502350",
    "end": "1507710"
  },
  {
    "text": "until now and still now looks a little bit like this so I offered to do some",
    "start": "1507710",
    "end": "1516030"
  },
  {
    "text": "some buffer reading because it's simple and we had a fire earlier so there's",
    "start": "1516030",
    "end": "1521340"
  },
  {
    "text": "variety so we defined standard in and standard out outside the code I didn't",
    "start": "1521340",
    "end": "1527130"
  },
  {
    "text": "want the code block to be too big we we define a reader and we've defined a buffer the the reader is a buffered",
    "start": "1527130",
    "end": "1532679"
  },
  {
    "text": "reader over standard N and the buffer is a vector a vector in rust is a heap",
    "start": "1532679",
    "end": "1538409"
  },
  {
    "text": "allocated data structure which grows with different sizes so if you add",
    "start": "1538409",
    "end": "1544049"
  },
  {
    "text": "things to it it will grow and if you remove them again it will shrink depending on what it feels is",
    "start": "1544049",
    "end": "1551340"
  },
  {
    "text": "appropriate but under the hood it's implemented as an array not a linked list so to build a future with the",
    "start": "1551340",
    "end": "1558299"
  },
  {
    "text": "futures library you can for example say well let's read until some thing so we",
    "start": "1558299",
    "end": "1567090"
  },
  {
    "text": "read until we hit a new line the B just says that it's a binary string and we'd read it into buffer and when this",
    "start": "1567090",
    "end": "1573480"
  },
  {
    "text": "happens and now you're building a future or you're attaching some piece of information to the future that should",
    "start": "1573480",
    "end": "1579600"
  },
  {
    "text": "execute when it is ready which it's readiness is defined by edge reading in",
    "start": "1579600",
    "end": "1585299"
  },
  {
    "text": "your line and then we call this code here give it standard in as you know",
    "start": "1585299",
    "end": "1592419"
  },
  {
    "text": "maybe you want to read more and the buffer but what we do is we ignore standardin",
    "start": "1592419",
    "end": "1597580"
  },
  {
    "text": "and we write two standard out the contents of the entire buffer map error",
    "start": "1597580",
    "end": "1603520"
  },
  {
    "text": "by the way in this case just like math error you panic means that if there is any kind of error",
    "start": "1603520",
    "end": "1610390"
  },
  {
    "text": "we don't want to gracefully handle it we want to panic and run out the room with an error message and the same applies",
    "start": "1610390",
    "end": "1616900"
  },
  {
    "text": "down here I am NOT doing well with selecting things today this map error here is essentially the",
    "start": "1616900",
    "end": "1625120"
  },
  {
    "text": "alternative to if the reading process hits any sort of problem your pipe goes",
    "start": "1625120",
    "end": "1630520"
  },
  {
    "text": "away or whatever then it'll also panic okay so we defined a future but the",
    "start": "1630520",
    "end": "1636669"
  },
  {
    "text": "interesting thing here is that this is just some type information this is a collection of data types again which",
    "start": "1636669",
    "end": "1645340"
  },
  {
    "text": "will disappear in a minute and this is actually where this gets wrong Tokyo is",
    "start": "1645340",
    "end": "1651700"
  },
  {
    "text": "the event loop of our choice here and we give Tokyo this future and Tokyo will",
    "start": "1651700",
    "end": "1658210"
  },
  {
    "text": "now make sure to keep reading from standardin and call our future chain",
    "start": "1658210",
    "end": "1663400"
  },
  {
    "text": "whenever it is ready and that's basically like this is the basics and",
    "start": "1663400",
    "end": "1668620"
  },
  {
    "text": "you can expand this really easily you could do TCP like you could read from",
    "start": "1668620",
    "end": "1674140"
  },
  {
    "text": "from a TCP socket instead of like standard in the api's are the same you",
    "start": "1674140",
    "end": "1680260"
  },
  {
    "text": "could read from a serial port if you wanted which is kind of cool if you're embedded so like this is the these are",
    "start": "1680260",
    "end": "1688299"
  },
  {
    "text": "the basic building blocks of of building building async applications and really",
    "start": "1688299",
    "end": "1694059"
  },
  {
    "text": "the thing to to remind yourself of here is that all of this type complexity all",
    "start": "1694059",
    "end": "1701530"
  },
  {
    "text": "of the combinators and you know you have a closure and you jump into some code",
    "start": "1701530",
    "end": "1706900"
  },
  {
    "text": "and like you you do whatever this just that disappears at compile time and what",
    "start": "1706900",
    "end": "1714070"
  },
  {
    "text": "you're left with is very bare metal code that is highly optimized",
    "start": "1714070",
    "end": "1719460"
  },
  {
    "text": "another thing I mentioned ownership earlier and I showed you how ownership",
    "start": "1719960",
    "end": "1727470"
  },
  {
    "text": "sort of prevents you from doing a few things like closing a file too many times or calling a function with the",
    "start": "1727470",
    "end": "1733440"
  },
  {
    "text": "same value twice without borrowing it the interesting thing about the",
    "start": "1733440",
    "end": "1738750"
  },
  {
    "text": "ownership model here is that we access reader and buffer and both reader or",
    "start": "1738750",
    "end": "1744299"
  },
  {
    "text": "reader I guess is only accessed by the first step part but buffer is then",
    "start": "1744299",
    "end": "1749400"
  },
  {
    "text": "passed on to the next Combinator both of these values are handed over to the to",
    "start": "1749400",
    "end": "1755280"
  },
  {
    "text": "the beginning of the future chain and so this future now owns the the data which",
    "start": "1755280",
    "end": "1762150"
  },
  {
    "text": "means that when we pass this entire future to Tokyo Tokyo owns this data",
    "start": "1762150",
    "end": "1767780"
  },
  {
    "text": "what that means is that if you if your",
    "start": "1767780",
    "end": "1773429"
  },
  {
    "text": "code gets run you can be sure that you're the only like because of the way",
    "start": "1773429",
    "end": "1779010"
  },
  {
    "text": "that ownership works you can be sure that you're the only function in your application that accesses buffer at the",
    "start": "1779010",
    "end": "1785669"
  },
  {
    "text": "same time if you were to put this into a loop or sorry if you were to run Tokyo",
    "start": "1785669",
    "end": "1793140"
  },
  {
    "text": "in on multiple threads then this wouldn't work anymore because it would tell you the exact same",
    "start": "1793140",
    "end": "1798240"
  },
  {
    "text": "error message that we got with the thread saying hey you just moved ownership into this one thread and",
    "start": "1798240",
    "end": "1804539"
  },
  {
    "text": "you're trying to spawn seven more that this doesn't work and at that point you need to make like you need to explicitly",
    "start": "1804539",
    "end": "1811710"
  },
  {
    "text": "make sure that the data structure says you use our thread safe I haven't gone",
    "start": "1811710",
    "end": "1816809"
  },
  {
    "text": "into that at all because that's a whole can of worms or it's a very complicated",
    "start": "1816809",
    "end": "1822720"
  },
  {
    "text": "issue and it's it's something that when you learn rust is something you have to",
    "start": "1822720",
    "end": "1827970"
  },
  {
    "text": "get used to but the point is concurrency issues here are being made explicit you can accidentally have a race condition",
    "start": "1827970",
    "end": "1835020"
  },
  {
    "text": "because the compiler will check and like the compiler will not let your code compile if there is any ambiguity about",
    "start": "1835020",
    "end": "1840929"
  },
  {
    "text": "it being thread safe so hmm so far so good this talk was",
    "start": "1840929",
    "end": "1849230"
  },
  {
    "text": "entitled rust 20 18 and not rust 2013 to 2016 something that has happened this",
    "start": "1849230",
    "end": "1856850"
  },
  {
    "text": "year as part of rust 2018 as async/await so rust 2018 is a marketing release it's",
    "start": "1856850",
    "end": "1866990"
  },
  {
    "text": "actual version number if I remember correctly it's gonna be one point 31",
    "start": "1866990",
    "end": "1872600"
  },
  {
    "text": "because I think one point thirty is currently out so it's still backwards compatible with all the rest code that",
    "start": "1872600",
    "end": "1878120"
  },
  {
    "text": "you've written and seen and whatever the way that features and new features are",
    "start": "1878120",
    "end": "1884179"
  },
  {
    "text": "being enabled and features are being liked even a few breaking features are enabled with an on an opt-in basis so",
    "start": "1884179",
    "end": "1892070"
  },
  {
    "text": "you can declare your project as being a rust 20 18 project and then a rust 2015",
    "start": "1892070",
    "end": "1897649"
  },
  {
    "text": "compiler would no longer understand these features as part of that and",
    "start": "1897649",
    "end": "1904659"
  },
  {
    "text": "pretty interesting actually how you can combine rust 2015 and 2018 libraries",
    "start": "1904659",
    "end": "1911389"
  },
  {
    "text": "into the same project the compiler can on-the-fly switch between whichever it needs to so it has like different run",
    "start": "1911389",
    "end": "1917389"
  },
  {
    "text": "modes so there's not going to be a dependency chaos where your dependencies can't be used because you're using the",
    "start": "1917389",
    "end": "1923779"
  },
  {
    "text": "new version and they're using the old version that still works as part of this development effort there were a few",
    "start": "1923779",
    "end": "1931639"
  },
  {
    "text": "working groups that were created and a few pushes for stabilizations and features were made and async/await",
    "start": "1931639",
    "end": "1938830"
  },
  {
    "text": "was one of them so the idea behind it is basically the same as there's a few",
    "start": "1938830",
    "end": "1946610"
  },
  {
    "text": "other languages that do it this way write code that looks like synchronous",
    "start": "1946610",
    "end": "1952850"
  },
  {
    "text": "normal blocking code but which really isn't which uses an event loop in the background which you have to set up",
    "start": "1952850",
    "end": "1959809"
  },
  {
    "text": "before because rust still doesn't have an implicit runtime you need to explicitly choose a runtime that you",
    "start": "1959809",
    "end": "1964909"
  },
  {
    "text": "want but then instead of having to you know define the future type and thinking",
    "start": "1964909",
    "end": "1971330"
  },
  {
    "text": "about what type of return value you have and the nesting like the type signatures are gonna be really gnarly and so",
    "start": "1971330",
    "end": "1978249"
  },
  {
    "text": "instead you just mark a function as async that that's the idea",
    "start": "1978249",
    "end": "1983350"
  },
  {
    "text": "and this async in front of the function declaration here well mean that this function first of all is kind of",
    "start": "1983350",
    "end": "1989889"
  },
  {
    "text": "pointless because the trigger doesn't return anything but it would return a future of nothing instead which is",
    "start": "1989889",
    "end": "1995110"
  },
  {
    "text": "interesting and then instead of having",
    "start": "1995110",
    "end": "2000840"
  },
  {
    "text": "to pass this function or this function chain I guess whichever it ends up being",
    "start": "2000840",
    "end": "2007139"
  },
  {
    "text": "to an event loop there is this a weight macro which you call which then interacts implicitly with the runtime",
    "start": "2007139",
    "end": "2013710"
  },
  {
    "text": "that you previously set up explicitly and that way you can write code that is",
    "start": "2013710",
    "end": "2019590"
  },
  {
    "text": "basically a weight this thing awaits this thing do these things like asynchronously and then await all three",
    "start": "2019590",
    "end": "2024840"
  },
  {
    "text": "of them or something a lot of things become possible this way and it it",
    "start": "2024840",
    "end": "2030960"
  },
  {
    "text": "generally cleans up the code that you write because you don't end up having",
    "start": "2030960",
    "end": "2036239"
  },
  {
    "text": "these huge state machines because yeah they can be really cute but sometimes",
    "start": "2036239",
    "end": "2043499"
  },
  {
    "text": "they'd become a little large and they become unmaintainable and this way you can avoid this so how does this work",
    "start": "2043499",
    "end": "2052368"
  },
  {
    "text": "it's kind of complicated and clever people are working on it",
    "start": "2052369",
    "end": "2058408"
  },
  {
    "text": "in groups you might even call them working groups which is the networking",
    "start": "2058409",
    "end": "2063868"
  },
  {
    "text": "working group so this is a bunch of people either from the rust core teams",
    "start": "2063869",
    "end": "2069868"
  },
  {
    "text": "themselves or peripherals so like I am in the CLI working group and I'm not on the core team who is people who",
    "start": "2069869",
    "end": "2078898"
  },
  {
    "text": "implement these features in the compiler and provide a library ecosystem the way that this works is that this futures",
    "start": "2078899",
    "end": "2085858"
  },
  {
    "text": "abstraction that I showed you earlier has moved into the standard lab at Lib",
    "start": "2085859",
    "end": "2090990"
  },
  {
    "text": "core or parts of it have moved into Lib core of the language which means that you can use all of these features to",
    "start": "2090990",
    "end": "2099119"
  },
  {
    "text": "some extent even on embedded microcontrollers where you don't have",
    "start": "2099119",
    "end": "2104190"
  },
  {
    "text": "access to the standard lab because it's too big for it and then there's their certain API is",
    "start": "2104190",
    "end": "2111210"
  },
  {
    "text": "that run times and like event loops can use to make themselves compatible to",
    "start": "2111210",
    "end": "2117570"
  },
  {
    "text": "this to the syntax so that you actually have a have a choice which runtime you want to use you can use Tokyo if you",
    "start": "2117570",
    "end": "2124920"
  },
  {
    "text": "know it's a general-purpose good runtime if you were running on some quirky embedded device you can either use an",
    "start": "2124920",
    "end": "2133349"
  },
  {
    "text": "embedded runtime of one exists or if you're a company and you need to like specifically target one device you can",
    "start": "2133349",
    "end": "2139260"
  },
  {
    "text": "write your own and you can still be compatible with all of the other future stuff which means that you can take you",
    "start": "2139260",
    "end": "2145440"
  },
  {
    "text": "can take advantage of all the work that other people are putting into the futures ecosystem so well yeah can you",
    "start": "2145440",
    "end": "2152970"
  },
  {
    "text": "use this and the answer is kind of so the async/await syntax itself is a",
    "start": "2152970",
    "end": "2160170"
  },
  {
    "text": "stable or stable-ish in the nightly compiler it requires a feature flag its",
    "start": "2160170",
    "end": "2166050"
  },
  {
    "text": "usage hasn't changed in the last few months and as preparation to this talk",
    "start": "2166050",
    "end": "2171690"
  },
  {
    "text": "I've interviewed a few people who are working on it and they don't expect it to change very much so you know chances",
    "start": "2171690",
    "end": "2177750"
  },
  {
    "text": "are that if you start writing some code using this it's not gonna break but you",
    "start": "2177750",
    "end": "2183150"
  },
  {
    "text": "know you're still living a little dangerously with the nightly the problem is the library ecosystem namely that",
    "start": "2183150",
    "end": "2189830"
  },
  {
    "text": "event loops are missing that useless or their usability isn't perfect yet I",
    "start": "2189830",
    "end": "2196140"
  },
  {
    "text": "guess and realistically the first few months like January February March",
    "start": "2196140",
    "end": "2203190"
  },
  {
    "text": "something like that in 2019 is supposed to be when this becomes stable there",
    "start": "2203190",
    "end": "2209280"
  },
  {
    "text": "were a few delays throughout the year when it came to a few other blocking issues on the compiler which is why this",
    "start": "2209280",
    "end": "2216030"
  },
  {
    "text": "is all a little late which means that it's not officially in this umbrella term of frost 2018 all right um and",
    "start": "2216030",
    "end": "2224700"
  },
  {
    "text": "that's it I thought my talk slot would be a lot shorter than it had actually",
    "start": "2224700",
    "end": "2230010"
  },
  {
    "text": "ended up being you can so I don't want",
    "start": "2230010",
    "end": "2235020"
  },
  {
    "text": "to answer your question on question or questions on stage but I'm gonna be around if you want to talk to me",
    "start": "2235020",
    "end": "2240470"
  },
  {
    "text": "follow me on twitter if you want to have terrible puns on technology and your feed if you're watching this remotely or",
    "start": "2240470",
    "end": "2246950"
  },
  {
    "text": "you're shy and you don't want to come up to me you can send me an email or my DMS on Twitter are always open and I want to",
    "start": "2246950",
    "end": "2253339"
  },
  {
    "text": "thank my employers so I do Rustom bed at work at first systems",
    "start": "2253339",
    "end": "2258440"
  },
  {
    "text": "which is why I I'm really excited about some of the future stuff when it comes to embedded especially embedded",
    "start": "2258440",
    "end": "2264349"
  },
  {
    "text": "networking with like low overhead TCP handling for example on a",
    "start": "2264349",
    "end": "2270769"
  },
  {
    "text": "microcontroller and I also do distributed systems set up architecture and sort of like operations at a scarer",
    "start": "2270769",
    "end": "2278089"
  },
  {
    "text": "which is a second company from Berlin so yeah thank you",
    "start": "2278089",
    "end": "2283480"
  },
  {
    "text": "[Applause]",
    "start": "2283790",
    "end": "2290389"
  }
]