[
  {
    "text": "(soothing music)",
    "start": "98",
    "end": "3772"
  },
  {
    "text": "Today we are going\nto talk about emerging best practices in Swift. Before we get started I\nwant to start with a story.",
    "start": "11277",
    "end": "17651"
  },
  {
    "text": "Last summer Swift was\nannounced and then released and I was excited,\nbecause I did not like",
    "start": "17651",
    "end": "24372"
  },
  {
    "text": "Objective-C. I went around giving talks\nabout Swift, and specifically",
    "start": "24372",
    "end": "29528"
  },
  {
    "text": "about solving familiar\nproblems in new ways because we have this whole new language.",
    "start": "30636",
    "end": "35756"
  },
  {
    "text": "It would be a shame\nnot to take advantage of the new things that Swift can do.",
    "start": "35756",
    "end": "39717"
  },
  {
    "text": "I was telling everyone to not\ntreat Swift like Objective-C and that is because I was\nterrified that we were just",
    "start": "41812",
    "end": "48917"
  },
  {
    "text": "going to solve problems in the\nsame way that we have always solved them with Objective-C,\nbut using Swift syntax.",
    "start": "48917",
    "end": "56305"
  },
  {
    "text": "That did not sit\nwell with me because I was so excited about Swift\nthat the idea of not taking",
    "start": "56305",
    "end": "63283"
  },
  {
    "text": "full advantage of the cool\nnew things Swift can do just gives me shivers.",
    "start": "63283",
    "end": "68862"
  },
  {
    "text": "But, it turned out everything was fine. The community and Apple have\nexceeded my expectations",
    "start": "68862",
    "end": "75897"
  },
  {
    "text": "in terms of what I had hoped for. We have embraced Swift and\nused it capabilities to",
    "start": "75897",
    "end": "81854"
  },
  {
    "text": "explore the new ways that\nwe can solve the familiar problems that we are all used to.",
    "start": "81854",
    "end": "86916"
  },
  {
    "text": "Problems that exist on iOS\nregardless of the language you use. We have actually taken a\nlook and found new ways",
    "start": "86916",
    "end": "93196"
  },
  {
    "text": "that we had no idea. No one\nknew how to do this before and we figured it out. Those have become best practices.",
    "start": "93196",
    "end": "99611"
  },
  {
    "text": "How do we talk about\nbest practices in Swift? This is not\na listicle of a talk.",
    "start": "101339",
    "end": "108250"
  },
  {
    "text": "I am not going to be giving\nyou the 13 best practices in Swift, number four will blow your mind.",
    "start": "109022",
    "end": "114752"
  },
  {
    "text": "That is not\nwhat I am here to do. I am here for two reasons:",
    "start": "114752",
    "end": "119906"
  },
  {
    "text": "1) What do best practices look like? 2) How do we find new ones? I think those are\ninteresting questions",
    "start": "119906",
    "end": "125392"
  },
  {
    "text": "I am going to\nmention some technical topics and there is going to be\nsome code on the slides,",
    "start": "125392",
    "end": "130397"
  },
  {
    "text": "but mainly this is a talk\nto try and prime all of us to look out for interesting ways",
    "start": "130398",
    "end": "137851"
  },
  {
    "text": "to solve familiar problems. More important than a\nlist is the process",
    "start": "137851",
    "end": "144073"
  },
  {
    "text": "of how we get there. To discover that\nprocess and to discuss it we are going discuss five things.",
    "start": "144073",
    "end": "151711"
  },
  {
    "text": "1) Take a look at the history of the iOS community. We have been in a similar situation",
    "start": "151711",
    "end": "158839"
  },
  {
    "text": "before. I know this is the\nfirst time Swift's ever been out but we have seen\nchanges like Swift come before.",
    "start": "158839",
    "end": "165435"
  },
  {
    "text": "2) Talk about learning\n(and how you should do it always, not just when\nXcode is in a beta period).",
    "start": "166427",
    "end": "172673"
  },
  {
    "text": "3) Never throw ideas away (they are very precious). 4) Force yourself to think",
    "start": "174282",
    "end": "181003"
  },
  {
    "text": "(which is how you come up\nwith new best practices). 5) Abstraction.",
    "start": "181003",
    "end": "186250"
  },
  {
    "text": "(I am excited. This looks familiar).",
    "start": "186250",
    "end": "191500"
  },
  {
    "text": "We have been in a similar\nsituation to Swift before. (Before I get into exactly\nwhat that was I need to dispel",
    "start": "192689",
    "end": "199651"
  },
  {
    "text": "a common misconception). (You have probably heard\nthis expression before:",
    "start": "199651",
    "end": "205637"
  },
  {
    "text": "\"Those who do not study history\nare doomed to repeat it,\") (right?) (This has been said by many\npeople, I tried to find",
    "start": "205637",
    "end": "211964"
  },
  {
    "text": "an original citation for this\nto find out who said it first, could not do it). (It has been said for at least 300 years,",
    "start": "211964",
    "end": "218640"
  },
  {
    "text": "probably longer than that; it is depressing). Think about it, \"Those\nwho do not study the past",
    "start": "218640",
    "end": "225304"
  },
  {
    "text": "\"are doomed to repeat it.\" Those who do not know history\nare doomed to repeat it: that is sad.",
    "start": "225304",
    "end": "231444"
  },
  {
    "text": "That implies that\nhistory only has mistakes and that repeating history\nis necessarily a bad thing.",
    "start": "231444",
    "end": "238648"
  },
  {
    "text": "That is not true. We can think about\nthings in recent history or even longer ago that were\ngood ideas, ideas that we",
    "start": "239339",
    "end": "246310"
  },
  {
    "text": "want to keep doing or ideas\nthat we would like to repeat. It is not fair to say\nthat those who do not know",
    "start": "246311",
    "end": "253878"
  },
  {
    "text": "history are doomed to repeat\nit, because repeating it is not  necessarily a bad thing.",
    "start": "253878",
    "end": "258555"
  },
  {
    "text": "A more accurate statement\nin my opinion would be, \"Those who do not understand\nthe past cannot make",
    "start": "259592",
    "end": "265139"
  },
  {
    "text": "\"informed decisions about the present.\" (History).",
    "start": "265140",
    "end": "272624"
  },
  {
    "text": "(Can I see a show of hands of\neveryone who developed for iOS 5 or earlier?)",
    "start": "273778",
    "end": "278381"
  },
  {
    "text": "(cool). What I am about to show\nyou may stir some memories",
    "start": "279873",
    "end": "286157"
  },
  {
    "text": "that you would rather not remember. For everyone else in the\nroom the following slide",
    "start": "286157",
    "end": "291855"
  },
  {
    "text": "may look shocking.\nBefore iOS 5 we did not have object literals; this\nis how we created arrays,",
    "start": "291855",
    "end": "300193"
  },
  {
    "text": "dictionaries, and NSNumbers.",
    "start": "301127",
    "end": "306577"
  },
  {
    "text": "(Terrible) Arrays have this arrayWithObjects,",
    "start": "307802",
    "end": "313708"
  },
  {
    "text": "this is the short-hand syntax by the way. You have this nil\nterminated list of things,",
    "start": "313708",
    "end": "319287"
  },
  {
    "text": "dictionaryWithObjectsAndKeys and numberWithInt,\nnumberwithBool, numberWithFloat,",
    "start": "319287",
    "end": "324929"
  },
  {
    "text": "numberWithLong. It was tedious and if you were",
    "start": "324929",
    "end": "331008"
  },
  {
    "text": "doing this before ARC it is even worse. Some of you may have\nnoticed but there is actually",
    "start": "331008",
    "end": "337109"
  },
  {
    "text": "a mistake on this slide because\ndictionaryWithObjectsAndKeys the objects come first;\nthe Key is \"Not Me\"",
    "start": "337109",
    "end": "345294"
  },
  {
    "text": "and the value is \"Who would\ndo this?\", which is backwards. I have done this mistake a few times.",
    "start": "345294",
    "end": "352667"
  },
  {
    "text": "(sighs) I am so glad we do not\nhave to do that anymore. (Now, we do this).",
    "start": "353518",
    "end": "359211"
  },
  {
    "text": "We have object literals,\narrays are created with an @ and then square brackets,",
    "start": "359211",
    "end": "366530"
  },
  {
    "text": "dictionaries @ curly braces, NSNumbers are created\nusing",
    "start": "366530",
    "end": "372487"
  },
  {
    "text": "boxed expressions (put an\n@ the expression that comes after it is evaluated as a number).",
    "start": "372487",
    "end": "377797"
  },
  {
    "text": "That is a huge improvement. They are better.",
    "start": "378431",
    "end": "385014"
  },
  {
    "text": "Universally better. There is not a reason why you would not want to use object literals.\n(I have not",
    "start": "386133",
    "end": "392223"
  },
  {
    "text": "been able to think of one). They have been adopted by the\ncommunity almost immediately everyone switched to these\nbecause there was no reason",
    "start": "392223",
    "end": "398979"
  },
  {
    "text": "not to and Xcode had a built in feature where it would do it for you. Using object literals\nbecame what you might call",
    "start": "398979",
    "end": "406407"
  },
  {
    "text": "a best practice. What else came out",
    "start": "406407",
    "end": "412759"
  },
  {
    "text": "a year before object literals? (Anyone have a guess of\nwhat I am about to say?)",
    "start": "412759",
    "end": "418490"
  },
  {
    "text": "Blocks. Blocks came out in 2010 for iOS 4.",
    "start": "419436",
    "end": "423218"
  },
  {
    "text": "Blocks were great, I was\nexcited about blocks. Introduced in iOS 4, adopted\nslowly but surely.",
    "start": "425034",
    "end": "431928"
  },
  {
    "text": "Blocks are exciting\nbecause they require a new way to think. Before you had executable\ncode that could be referred to",
    "start": "432885",
    "end": "439650"
  },
  {
    "text": "as data, you could not solve\nproblems in certain ways.",
    "start": "439650",
    "end": "444184"
  },
  {
    "text": "You were restricted by the language. When blocks came out,\nthey had a weird syntax and were hard too adopt,",
    "start": "445171",
    "end": "452260"
  },
  {
    "text": "but also iOS developers\nwere used to solving problems without them.",
    "start": "452260",
    "end": "457189"
  },
  {
    "text": "We were used to solving\nproblems with protocols, and delegation, or target\naction, or any number of ways.",
    "start": "457832",
    "end": "464197"
  },
  {
    "text": "Did using blocks become a best practice? Is using",
    "start": "465855",
    "end": "473538"
  },
  {
    "text": "an if statement a best practice? Blocks are just syntax. They enable other best practices.",
    "start": "473538",
    "end": "480204"
  },
  {
    "text": "The key here is using blocks and saying, \"Oh, use a\nblock because it is better",
    "start": "480812",
    "end": "487511"
  },
  {
    "text": "than a delegation or a\ntarget action,\" (not the point). The point is with blocks we\ncan do cool things.",
    "start": "487511",
    "end": "494990"
  },
  {
    "text": "We can do functional reactor programming, or we can execute a block\nof code in a context,",
    "start": "495565",
    "end": "502047"
  },
  {
    "text": "for example, an animation. Before, if you wanted to\nanimate something you would",
    "start": "502047",
    "end": "507363"
  },
  {
    "text": "call a method that says, \"I\nam beginning the animation,\" and then you would change\nthings, and then you had",
    "start": "507364",
    "end": "512959"
  },
  {
    "text": "better call a method at the end that says, \"And now the animation is over.\" (That is weird).",
    "start": "512960",
    "end": "518901"
  },
  {
    "text": "If you needed to be\nnotified of when that animation was complete, that is a lot of work.",
    "start": "518902",
    "end": "524501"
  },
  {
    "text": "We could also do call backs when an asynchronous network\nresponse has been delivered.",
    "start": "525251",
    "end": "532089"
  },
  {
    "text": "Collection operations,\nwe can now enumerate over a collection (e.g. an array\nof things), or we could map it",
    "start": "532089",
    "end": "537905"
  },
  {
    "text": "into an array of something else. New ideas at the time.",
    "start": "537905",
    "end": "543360"
  },
  {
    "text": "Even some of them are\nstill kind of new to iOS. But they are only enabled by blocks.",
    "start": "543361",
    "end": "551414"
  },
  {
    "text": "These might be best practices.\nBut blocks? No. My point is: we embraced change.",
    "start": "551414",
    "end": "558364"
  },
  {
    "text": "We have the blocks and we are like, \"Let's do something with them.\" It has taken five years\nto get to where we are now,",
    "start": "558364",
    "end": "566096"
  },
  {
    "text": "but I am  proud and excited that we have accomplished as\na community in that time.",
    "start": "566096",
    "end": "571408"
  },
  {
    "text": "We have a history of\ntaking the new technology that Apple has provided\nfor iOS development",
    "start": "573341",
    "end": "579782"
  },
  {
    "text": "and doing amazing things with it. That brings us to Swift 2.",
    "start": "579783",
    "end": "585234"
  },
  {
    "text": "Swift 2 is the second version\nof Apple's programming language, first announced\nand released last year.",
    "start": "586041",
    "end": "591445"
  },
  {
    "text": "(Exciting stuff, I\nwas thrilled with Swift). (The more I use Swift\n2 the more I like it).",
    "start": "592123",
    "end": "599130"
  },
  {
    "text": "Swift 2 includes new syntax. New syntax lets us do new\nthings (like the new block",
    "start": "600470",
    "end": "608535"
  },
  {
    "text": "syntax let us do new things with blocks).",
    "start": "608536",
    "end": "611984"
  },
  {
    "text": "But, syntax is only a tool. Like blocks, the new syntax in\nSwift is not something",
    "start": "613997",
    "end": "620128"
  },
  {
    "text": "you can classify as a best\npractice (because it does not make sense). Things like guards statements,\nor defer statements,",
    "start": "620128",
    "end": "627389"
  },
  {
    "text": "or throwing with new air handling. (yelling in background)",
    "start": "628300",
    "end": "635114"
  },
  {
    "text": "(laughs) These are syntax, but there is not",
    "start": "635114",
    "end": "641413"
  },
  {
    "text": "a best practice of throwing something (e.g. using defer is not a best practice).",
    "start": "642764",
    "end": "649303"
  },
  {
    "text": "A question that you might\nask is, \"Should I use guard?\" (But, that is not quite the\nright question, is it?)",
    "start": "649304",
    "end": "654911"
  },
  {
    "text": "The right question is,\n\"What can I do with guard?\" Now that I have this new\ncapability and this new syntax",
    "start": "655951",
    "end": "664449"
  },
  {
    "text": "what can I do with it? (a much more interesting question). Let's take a look at a few examples.",
    "start": "664449",
    "end": "670223"
  },
  {
    "text": "First of all, we have the Pyramid of Doom. (named because it has\nthis triangle or pyramid",
    "start": "670223",
    "end": "675470"
  },
  {
    "text": "coming in from the left,\ncreeping towards the right). I am sure you have all written\ncode like this (I have for sure).",
    "start": "675470",
    "end": "681286"
  },
  {
    "text": "Writing code like this is\neasy (but writing code is always easy).",
    "start": "681286",
    "end": "686521"
  },
  {
    "text": "The hard part is reading it. This code (particularly\nwith the Pyramid of Doom)",
    "start": "686521",
    "end": "692171"
  },
  {
    "text": "makes it even more\ndifficult than it has to be. Swift 2 intorduced\ncompound if/let statements",
    "start": "692171",
    "end": "699369"
  },
  {
    "text": "and where clauses. We have something like this now. This is semantically identical\ncode, we are binding two",
    "start": "699369",
    "end": "706452"
  },
  {
    "text": "variables, two optional variable\nand we have a where clause that obviates the need for\none of the if statements.",
    "start": "706452",
    "end": "713486"
  },
  {
    "text": "Let's take a look at another example. Mutability, this is very Objective-C code (this was what I was afraid\nof when Swift came out).",
    "start": "714454",
    "end": "721962"
  },
  {
    "text": "I was afraid that people\nwe are going to write this Swift. This is Obective-C in Swift\nsyntax and it looks terrible.",
    "start": "721962",
    "end": "727600"
  },
  {
    "text": "(I am not even going to go over what it does, because it does not matter. it is terrible). What we want to write instead\nis something like this.",
    "start": "727600",
    "end": "735543"
  },
  {
    "text": "This is the same function,\nit takes an array of strings, and it takes a prefix and\nit returns you any of those",
    "start": "737285",
    "end": "743738"
  },
  {
    "text": "strings that you gave it\nthat start with the prefix (that is all it does). Less typing, more expressive.",
    "start": "743739",
    "end": "750805"
  },
  {
    "text": "It maybe easy to write, but it is more easy to read.",
    "start": "750805",
    "end": "756373"
  },
  {
    "text": "It is more expressive. Another thing I want to\ntalk about is currying. (This is one of those weird\nwords that you may have heard",
    "start": "756373",
    "end": "763791"
  },
  {
    "text": "and you may have avoided it\nbecause some of these like functional programming\ngurus are jerks and they use it a lot).",
    "start": "763791",
    "end": "769661"
  },
  {
    "text": "It is actually a useful tool; not as complicated as you might think.",
    "start": "769661",
    "end": "775472"
  },
  {
    "text": "Currying is useful\nwhen you have a function, and another function,... and they\ndo almost the same thing.",
    "start": "776175",
    "end": "782310"
  },
  {
    "text": "(useful for providing customization to a function). Let's take a look at an example.",
    "start": "784278",
    "end": "789739"
  },
  {
    "text": "I have a function\ncalled containsAtSign. It takes a string, returns a\nboolean and it returns true",
    "start": "790548",
    "end": "797258"
  },
  {
    "text": "if that string contains an at\nsign (fairly straight forward). Now, you have, say an array\nof strings called input,",
    "start": "797258",
    "end": "804664"
  },
  {
    "text": "you cna filter them based on\nwhich ones contain an at sign. Because we have a function\n(functions are identical",
    "start": "804664",
    "end": "811303"
  },
  {
    "text": "semantically to closures\nand the filter function takes a closure that goes\nfrom whatever is in the array",
    "start": "811303",
    "end": "817138"
  },
  {
    "text": "to a boolean), we can pass in\na reference to the function directly into the filter closure.",
    "start": "817138",
    "end": "822149"
  },
  {
    "text": "(This is good, this is great,\nbut it can be even better).",
    "start": "822149",
    "end": "826556"
  },
  {
    "text": "Let's take a look at currying. Now, instead of a\ncontainsAtSign function we have a contains function.",
    "start": "827826",
    "end": "833792"
  },
  {
    "text": "It takes a substring and\nit returns a closure. That closure goes\nfrom a string to a boolean.",
    "start": "834605",
    "end": "841938"
  },
  {
    "text": "You can see the\nclosure that we are returning inside the function takes\na thing called a string",
    "start": "842710",
    "end": "847830"
  },
  {
    "text": "returns a boolean and does\nthe exact same thing, except now instead of an at sign\nliteral we are using the substring",
    "start": "847830",
    "end": "854122"
  },
  {
    "text": "parameter passed into the\noriginal function. We can can call it like this.",
    "start": "854122",
    "end": "858458"
  },
  {
    "text": "Instead of having a\nfunction for containsAtSign, a function for\ncontainsPercentSign, a function",
    "start": "859741",
    "end": "866009"
  },
  {
    "text": "for containsDollarSign we just\nhave one contains function, we give it the little bit of\ncustomization that it needs",
    "start": "866009",
    "end": "873620"
  },
  {
    "text": "and it does the rest for us. This is powerful, and\nit is so important to the Swift developers at Apple. I do not\nmean, \"I am a Swift",
    "start": "873620",
    "end": "880668"
  },
  {
    "text": "\"developer,\"  the\npeople who develop Swift, that they introduced a\nsyntactic sugar for it.",
    "start": "880668",
    "end": "886537"
  },
  {
    "text": "This is a semantically\nidentical expression. It goes from a substring\nand returns you a closure",
    "start": "886538",
    "end": "893719"
  },
  {
    "text": "that goes from string to\nbool (it looks funny at first, but I am telling you\nlike the first or second time",
    "start": "893719",
    "end": "899194"
  },
  {
    "text": "you do this you get used\nto it quickly and it is so much fun).",
    "start": "899194",
    "end": "903132"
  },
  {
    "text": "Another interesting\nthing that Swift let us do, Swift 1 even, associated values on enums.",
    "start": "905446",
    "end": "911785"
  },
  {
    "text": "You create a enum you attach\nan associated value to it and you extract that value\nthrough a case statement.",
    "start": "911785",
    "end": "917219"
  },
  {
    "text": "In Swift 1 case statements\nwere only available inside of a switch block. You would write code like this.",
    "start": "917219",
    "end": "922728"
  },
  {
    "text": "You have an enum at the top,\nit has a success and a failure. If it failed we'd like to know why. We have an associated value, a reason.",
    "start": "924242",
    "end": "931797"
  },
  {
    "text": "It is a string that we\ncan present to the user about why something did not work. Say, there is a function\ncalled doThing, it returns",
    "start": "931797",
    "end": "939099"
  },
  {
    "text": "one of these results if it is\na success then we print",
    "start": "939099",
    "end": "943582"
  },
  {
    "text": "(party time); if\nit is not then we can extract the reason from the case\nand print it out, too.",
    "start": "944285",
    "end": "951894"
  },
  {
    "text": "This was great but Swift\n2 got even better because it let us take case statements\noutside of switches.",
    "start": "953201",
    "end": "959069"
  },
  {
    "text": "If we do not care about the\nsuccess case, if we only care if something went wrong we\ncan write code like this.",
    "start": "959781",
    "end": "965686"
  },
  {
    "text": "We can say if it is a failure\nthen extract the reason. Again, it is\nunfamiliar syntax, but it is not",
    "start": "966539",
    "end": "972912"
  },
  {
    "text": "complicated syntax. This is something that we\ncan adopt easily.",
    "start": "972913",
    "end": "976964"
  },
  {
    "text": "Is this a best practice? No, just syntax. What does it matter\nthat we can use case statements",
    "start": "978292",
    "end": "986101"
  },
  {
    "text": "outside of switch statements? it is easier to do (which is nice). It might enable us to do\nthings more easily or quickly.",
    "start": "986101",
    "end": "993020"
  },
  {
    "text": "What matters are the ideas. Swift 2 introduces a ot of\nnew syntax that lets us do",
    "start": "993020",
    "end": "999447"
  },
  {
    "text": "new things, and\nwe need to look for the new things that it lets us do. For example, I am sure many\nof you have heard of this",
    "start": "999447",
    "end": "1007001"
  },
  {
    "text": "buzzword going around\n\"protocol-oriented programming\". What does that mean?",
    "start": "1007001",
    "end": "1012659"
  },
  {
    "text": "it is a interesting idea\nthat Apple has come up with around using protocols\ninstead of class hierarchies",
    "start": "1014569",
    "end": "1021327"
  },
  {
    "text": "to contain information (interesting). Will it become best practice?",
    "start": "1021327",
    "end": "1025602"
  },
  {
    "text": "Maybe. I think it looks is cool. Unfortunately, I do not have\ntime to go into right now,",
    "start": "1026350",
    "end": "1032810"
  },
  {
    "text": "I just encourage you to all\ngo watch the WWDC video.",
    "start": "1032810",
    "end": "1036067"
  },
  {
    "text": "Apple has cool ideas\nabout what a best practice in Swift might look like.",
    "start": "1038156",
    "end": "1042389"
  },
  {
    "text": "I bet other people have\nideas, too. Let's go ask them. There are other communities\nout there besides iOS,",
    "start": "1043334",
    "end": "1050865"
  },
  {
    "text": "besides Objective-C and Swift. Apple has clearly taken\nques from other programming",
    "start": "1050865",
    "end": "1057204"
  },
  {
    "text": "languages (Ruby, and\nJavaScript, and Scala). There are tons\nof communities out there",
    "start": "1057204",
    "end": "1063240"
  },
  {
    "text": "who have similar syntax and\nsimilar capabilities to Swift.",
    "start": "1063240",
    "end": "1067108"
  },
  {
    "text": "I wonder what solutions\nand what best practices work for them, and why?",
    "start": "1068333",
    "end": "1073923"
  },
  {
    "text": "Are the solutions they use\nsomething that we could use? Are the solutions that\nthey choose not to use",
    "start": "1074578",
    "end": "1080418"
  },
  {
    "text": "something that are appropriate for us? We should go and ask them,\nor better yet we should",
    "start": "1080418",
    "end": "1085836"
  },
  {
    "text": "go out and learn Python over a weekend, it is been on my to-do\nlist for like a year, just to see what they do and\nsee if some of those ideas",
    "start": "1085837",
    "end": "1093695"
  },
  {
    "text": "can be brought over to Swift. How do you tell if something\nis just a piece of syntax",
    "start": "1093695",
    "end": "1099231"
  },
  {
    "text": "or if it is an idea that\ncan become a best practice. You cannot. I have been lying to you,\nit is a very false dicotomy.",
    "start": "1099232",
    "end": "1106739"
  },
  {
    "text": "there is no like right or wrong,\nthere is nothing that says This is syntax, but this is an idea.",
    "start": "1106739",
    "end": "1112924"
  },
  {
    "text": "it is the if/else statement\nI mentioned earlier. Is using an if statement a\nbest practice or is it syntax?",
    "start": "1112925",
    "end": "1119044"
  },
  {
    "text": "It is both. How would you do\nthings without if statements? What I am trying to say is:\nwe have",
    "start": "1119045",
    "end": "1126615"
  },
  {
    "text": "to go try stuff. You have to try things and\nsee, maybe they will work maybe they will not, but we\nwill not know until we try.",
    "start": "1126615",
    "end": "1132933"
  },
  {
    "text": "Which brings us to\n\"Never throw away ideas.\"",
    "start": "1133704",
    "end": "1136728"
  },
  {
    "text": "Swift was released and I treated it like object literals instead of blocks.",
    "start": "1140379",
    "end": "1147008"
  },
  {
    "text": "I treated it as something that\nwe should use all the time because it is universally\nbetter and I threw away",
    "start": "1147967",
    "end": "1154469"
  },
  {
    "text": "the ideas that Objective-C had. Some of those ideas are worth\nkeeping, for example, Swift",
    "start": "1155090",
    "end": "1160348"
  },
  {
    "text": "still does not have a replacement\nfor key value observation. That is something we still need to use the Objective-C runtime for.",
    "start": "1160348",
    "end": "1166497"
  },
  {
    "text": "Older ideas have merit, too. Even if a community, maybe\nthere is something interesting",
    "start": "1167605",
    "end": "1174361"
  },
  {
    "text": "in Cobalt that would be\ncool to implement in Swift. I do not know, because I\nhave not learned Cobalt, I am not going to, but you\nknow it is something worth",
    "start": "1174361",
    "end": "1182099"
  },
  {
    "text": "exploring and worth thinking about. The tragedy is that iOS\ndevelopers throw things away",
    "start": "1182099",
    "end": "1189911"
  },
  {
    "text": "all the time. In general, developers\ndo, but iOS developers",
    "start": "1189911",
    "end": "1195808"
  },
  {
    "text": "do it a lot. Why? We will get to that\neventually, but I want to take you",
    "start": "1195808",
    "end": "1201914"
  },
  {
    "text": "through a pattern\nthat I have noticed in my own career (and maybe you have\nnoticed it in yours",
    "start": "1201914",
    "end": "1207266"
  },
  {
    "text": "or others as well). We have a beginner, they have\nnever programmed before and they are learning iOS.",
    "start": "1207266",
    "end": "1213239"
  },
  {
    "text": "They learn something (e.g. Objective-C) and they are bad at it\n(because they are a beginner)",
    "start": "1214010",
    "end": "1219490"
  },
  {
    "text": "and a beginners are bad\nat things (that is how we learn: to be\nbad, and improve).",
    "start": "1219490",
    "end": "1224948"
  },
  {
    "text": "They blame their frustration on the thing, they assume that\nbecause they are frustrated",
    "start": "1225625",
    "end": "1232266"
  },
  {
    "text": "with it and they are bad at\nit, that it must be bad. But, they get more experience.\nThey learn Objective-C",
    "start": "1232266",
    "end": "1239972"
  },
  {
    "text": "and iOS, and then Swift comes out. Learning the new thing is easier",
    "start": "1239972",
    "end": "1247169"
  },
  {
    "text": "than learning the old thing. They assume it is because\nthe new thing is better, but in reality it is also because they have",
    "start": "1248161",
    "end": "1257283"
  },
  {
    "text": "more experience, and it is\neasier to learn things. They have mixed these two\nideas up (they have crossed wires",
    "start": "1257283",
    "end": "1265131"
  },
  {
    "text": "in their brain, they had\nan old thing that was hard to learn because they were\na beginner, they have a new thing that is easy to learn\npartially because they have",
    "start": "1265131",
    "end": "1272162"
  },
  {
    "text": "more experience). This is why new ideas are appealing. This is why the new and shiny\nAPIs that come out every year",
    "start": "1272162",
    "end": "1279727"
  },
  {
    "text": "are exciting while the\nold ones are so terrifying and gross. We blame the older version of iOS.",
    "start": "1279727",
    "end": "1287203"
  },
  {
    "text": "It is a running joke in our community: we cannot wait to drop iOS 9 support, cannot wait for iOS X.",
    "start": "1287203",
    "end": "1295092"
  },
  {
    "text": "iOS is constantly changing;\nApple is always providing us with brand new APIs. That\nmeans that there is a constant",
    "start": "1297709",
    "end": "1305429"
  },
  {
    "text": "supply of old APIs for us to be angry at and for us to blame. I do not think they are\ndoing this on purpose;",
    "start": "1305429",
    "end": "1311470"
  },
  {
    "text": "I think Apple is doing\ntheir best to give us APIs that enable us to build cool applications,",
    "start": "1311470",
    "end": "1317990"
  },
  {
    "text": "because that will make them money. This is a side effect, not something",
    "start": "1317990",
    "end": "1323412"
  },
  {
    "text": "we need to be ashamed; it is something it\nwould be nice to acknowledge and realize that,",
    "start": "1323412",
    "end": "1331416"
  },
  {
    "text": "if we see ourself doing this maybe step back and think about iOS 8",
    "start": "1331416",
    "end": "1338153"
  },
  {
    "text": "or 7, is not so bad. (I want to take a side track.",
    "start": "1338153",
    "end": "1344080"
  },
  {
    "text": "This is something that has been\non my mind for a long time). I want to talk about refactoring. (This is a term that I hear all\nthe time, people tweet about",
    "start": "1344081",
    "end": "1351937"
  },
  {
    "text": "refactoring the view controller\nor refactoring an object into some smaller objects,\nmaybe they talk about",
    "start": "1351937",
    "end": "1358541"
  },
  {
    "text": "refactoring an entire\nproject over the weekend). (Keep using that word, I do not\nthink you know what it means,",
    "start": "1358541",
    "end": "1365445"
  },
  {
    "text": "\"I do not think it means\nwhat you think it means.\") What is not a refactor?",
    "start": "1365445",
    "end": "1372835"
  },
  {
    "text": "If you are adding new functionality that is not a refactor.",
    "start": "1373444",
    "end": "1378078"
  },
  {
    "text": "If you are changing the public\ninterface for your type, that is not a refactor.",
    "start": "1379012",
    "end": "1383604"
  },
  {
    "text": "A refactor does not\nchange a type's behavior. If it used to do something\nand it does not anymore,",
    "start": "1384793",
    "end": "1390523"
  },
  {
    "text": "or if it did not and now it\ndoes that is not a refactor. that is a re-write. This is a very simple test.",
    "start": "1390524",
    "end": "1397815"
  },
  {
    "text": "Do you have to change a unit test. If you do, then that is\na re-write, if you do not",
    "start": "1397816",
    "end": "1403349"
  },
  {
    "text": "then you are actually\nrefactoring something. Why does this matter? Because re-writes are\nbad and this is not me",
    "start": "1403349",
    "end": "1411389"
  },
  {
    "text": "(here at the front of\nthe room, who cares what I think). Someone much smarter than me said this. I read this article earlier\nin my career and it had",
    "start": "1411390",
    "end": "1419396"
  },
  {
    "text": "a big impact on me. Joel Spolsky wrote this:\nThings You Should Never Do,",
    "start": "1419396",
    "end": "1424934"
  },
  {
    "text": "Part 1: dedicated\nto rewriting software. Never re-write software.",
    "start": "1424934",
    "end": "1431286"
  },
  {
    "text": "Now, granted this blog post was discussing",
    "start": "1431286",
    "end": "1435153"
  },
  {
    "text": "Netscape (an entire application, not a view controller).",
    "start": "1436469",
    "end": "1441653"
  },
  {
    "text": "The idea that you should never re-write a view controller does not hold water.",
    "start": "1442344",
    "end": "1449212"
  },
  {
    "text": "But, what is an\napplication but just a collection of view controllers? If you should never\nre-write applications,",
    "start": "1449890",
    "end": "1457070"
  },
  {
    "text": "maybe we should be more\ncareful about re-writing our view controllers. We should favor incremental change.",
    "start": "1457070",
    "end": "1463404"
  },
  {
    "text": "I do not think that code\nis necessarily valuable. I think that code is\npretty worthless, and",
    "start": "1465548",
    "end": "1472962"
  },
  {
    "text": "the code I write now is not going to have any value in a year or ten years even.",
    "start": "1472962",
    "end": "1477612"
  },
  {
    "text": "Throwing code away and\nreplacing it with something brand new is dangerous, because\nyou lack the context for",
    "start": "1478779",
    "end": "1485058"
  },
  {
    "text": "how that code interacts\nwith the rest of the code. That is why re-writing is\nterrible, because it will always take longer than you think and\nyou will always make mistakes",
    "start": "1485058",
    "end": "1491757"
  },
  {
    "text": "that you do not anticipate. If we should not\nthrow away ideas or code, the two things we should",
    "start": "1491757",
    "end": "1498741"
  },
  {
    "text": "never throw away are code and ideas. Maybe there is something\ninteresting in Obejctive-C that I still do not know, but\nI should learn about in order",
    "start": "1498741",
    "end": "1506160"
  },
  {
    "text": "to do it in Swift, or bring\nthat idea over to Swift. Maybe my project that is\nin Objective-C can stay in",
    "start": "1506160",
    "end": "1512969"
  },
  {
    "text": "Objective-C and any new\nclasses I add can be written in Swift. I do not have to throw away\neverything just to embrace",
    "start": "1512969",
    "end": "1520620"
  },
  {
    "text": "the new thing.",
    "start": "1520620",
    "end": "1522195"
  },
  {
    "text": "(That is rant number one). Let's talk about unit testing.",
    "start": "1525764",
    "end": "1529935"
  },
  {
    "text": "Unit testing is going to help\nyou change your code better. These incremental changes\nthat I am asking you to do",
    "start": "1531265",
    "end": "1537647"
  },
  {
    "text": "you do this with unit tests. I want to talk\nabout what that means. Unit testing, controversial topic",
    "start": "1537647",
    "end": "1546588"
  },
  {
    "text": "in iOS, not so controversial\nliterally anywhere else.",
    "start": "1546588",
    "end": "1551193"
  },
  {
    "text": "We are the only\npeople who have a big problem with unit testing. Individual developers\nknow that communities",
    "start": "1552266",
    "end": "1558205"
  },
  {
    "text": "do not like it, but as\niOS is allergic to it, at least that is how we act.",
    "start": "1558206",
    "end": "1563795"
  },
  {
    "text": "We will get into that later. First, I want to make a\npresumption that unit testing is a good idea.",
    "start": "1564486",
    "end": "1569783"
  },
  {
    "text": "If you do not agree with\nthat just park that belief and assume that I am right\njust for this slide,",
    "start": "1570738",
    "end": "1576422"
  },
  {
    "text": "and the one after that,\nand the one after that. I do not  care that\nmuch about the tests.",
    "start": "1577172",
    "end": "1582841"
  },
  {
    "text": "There is this idea\n\"I have never caught \"a bug because of a unit\ntest - unit testing",
    "start": "1582842",
    "end": "1589495"
  },
  {
    "text": "\"must not be that valuable\" If the only value you see",
    "start": "1589495",
    "end": "1595143"
  },
  {
    "text": "in unit tests are the actual\ntests, then you are missing the point. I care more about writing\nthe test because of the way",
    "start": "1595143",
    "end": "1604073"
  },
  {
    "text": "that writing tests changes\nhow I write the code. Writing tests forces me to\nthink about what I am doing,",
    "start": "1604073",
    "end": "1612154"
  },
  {
    "text": "which is kind of important,\nespecially in the context of how to find new best practices. We cannot find new best\npractices unless we are thinking",
    "start": "1612154",
    "end": "1619258"
  },
  {
    "text": "about them. (makes sense, right?) Testing forces us to\nthink so maybe unit testing",
    "start": "1619259",
    "end": "1626154"
  },
  {
    "text": "will help us discover the best practices. One of the biggest\nadvantages to unit testing",
    "start": "1626154",
    "end": "1631877"
  },
  {
    "text": "is that it limits the scope of your object because you need to think about it.",
    "start": "1631877",
    "end": "1636777"
  },
  {
    "text": "If you have an object\nthat is complex and does many things that is\nvery difficult to test",
    "start": "1638083",
    "end": "1643619"
  },
  {
    "text": "and you are more likely to\nmake several smaller objects that each do one thing\nindividually, but do them well.",
    "start": "1643619",
    "end": "1649485"
  },
  {
    "text": "That is better because now you\nhave more cohesive objects that do only one thing and\nyou do not have behavior",
    "start": "1650850",
    "end": "1657850"
  },
  {
    "text": "that is coupled to each other. Part of the object\ndepends on this other part but also depends on this.\nIt depends",
    "start": "1657850",
    "end": "1664652"
  },
  {
    "text": "on the way it used to be.\nYou do not have that because everything is separated\ninto individual components.",
    "start": "1664652",
    "end": "1670823"
  },
  {
    "text": "How do you limit the scope? The best way is to control\nyour public interface",
    "start": "1671931",
    "end": "1678057"
  },
  {
    "text": "and you do that in conjunction\nwith something called dependency injection\nwhich is the scariest word",
    "start": "1678057",
    "end": "1684904"
  },
  {
    "text": "in software development. Dependency injection?",
    "start": "1684905",
    "end": "1689506"
  },
  {
    "text": "(I do not want to do it, I\ndid not even want to look up what it meant). I looked it up, I went on Wikipedia and it is complicated.",
    "start": "1690462",
    "end": "1696002"
  },
  {
    "text": "(it is not, trust me, Wikipedia\nis just like, if you did not know what a\ncomputer was and you went",
    "start": "1696845",
    "end": "1702730"
  },
  {
    "text": "to WIkipedia and it told you\nthat a computer is a machine of formal logic that processes\ninput and blah, blah,",
    "start": "1702730",
    "end": "1708401"
  },
  {
    "text": "blah, blah, blah. It would be  confusing, right?) Same with dependency injection,\nit is not that complicated of a topic.",
    "start": "1708401",
    "end": "1713306"
  },
  {
    "text": "Dependency injection is a five euro word for a five cent idea.",
    "start": "1715365",
    "end": "1719638"
  },
  {
    "text": "(Ward is laughing because he\nuses this expression a lot).",
    "start": "1720952",
    "end": "1723745"
  },
  {
    "text": "The idea of dependency injection, your thing should not\ncreate the things it needs.",
    "start": "1726374",
    "end": "1732331"
  },
  {
    "text": "That is it. Let me repeat that:\nthe thing you are making should not itself create the\nother things that it needs",
    "start": "1732918",
    "end": "1741328"
  },
  {
    "text": "to do it is job. Let's look at some examples. This is what I would say a pretty standard",
    "start": "1741328",
    "end": "1748549"
  },
  {
    "text": "iOs view controller. It has a networking\ncontroller and if you did load it fetches stuff from the network.",
    "start": "1748549",
    "end": "1755190"
  },
  {
    "text": "Once that is done, a completion block is invoked and it shows that stuff.",
    "start": "1755190",
    "end": "1759596"
  },
  {
    "text": "Very straight forward,\nthere is nothing wrong with this view controller. I have written this view\ncontroller many times.",
    "start": "1760251",
    "end": "1766252"
  },
  {
    "text": "I imagine most of you have too. How does it look different\nwith dependency injection?",
    "start": "1766252",
    "end": "1772979"
  },
  {
    "text": "Look at the slides carefully; see if you can tell the difference.",
    "start": "1772979",
    "end": "1776932"
  },
  {
    "text": "(anybody miss it?) (it is right there). We are no longer creating\nthe network controller.",
    "start": "1778052",
    "end": "1784988"
  },
  {
    "text": "Instead, we have a network controller, it is variable because we need to set it",
    "start": "1784989",
    "end": "1790562"
  },
  {
    "text": "to something later on. It is an optional network\ncontroller and now when viewDidLoad is called we\nask our network controller",
    "start": "1790562",
    "end": "1797608"
  },
  {
    "text": "to fetch stuff.\nWhen it is done it invokes our completion block\nand we show that stuff. That is exactly the same,\nnothing in the rest",
    "start": "1797608",
    "end": "1803675"
  },
  {
    "text": "of our class has changed. The only thing that is changed\nis the line that defines the network controller.",
    "start": "1803675",
    "end": "1810042"
  },
  {
    "text": "We are relying on someone\nelse to create the network controller for us and give it to us.",
    "start": "1811579",
    "end": "1817821"
  },
  {
    "text": "It could be another part of\nour app, maybe in prepare for Segue.",
    "start": "1818928",
    "end": "1823520"
  },
  {
    "text": "The view controller before\nus created a network controller for us, or maybe\nit passed in a reference to the one it had.",
    "start": "1824292",
    "end": "1829998"
  },
  {
    "text": "Maybe it is a unit test. (This is the exciting\npart, and we will get to what that means later).",
    "start": "1831315",
    "end": "1835949"
  },
  {
    "text": "Dependency injection is not that hard.",
    "start": "1837080",
    "end": "1841762"
  },
  {
    "text": "Protocols work well for this. Let's take a look at a\nhypothetical network controller",
    "start": "1842637",
    "end": "1847919"
  },
  {
    "text": "protocol. It has a function, fetchStuff. It accepts a completion\nblock that it calls",
    "start": "1847920",
    "end": "1853912"
  },
  {
    "text": "when it does the fetching. Let's take a look at an\nAPI network controller.",
    "start": "1853912",
    "end": "1859142"
  },
  {
    "text": "This is a specific class\nthat conforms to the protcol. It has the fetchStuff function.",
    "start": "1859142",
    "end": "1864857"
  },
  {
    "text": "(I have not implemented\nit yet, but you can get the idea of what I am going to do). I am going to go to the network, fetchStuff,",
    "start": "1865745",
    "end": "1871068"
  },
  {
    "text": "and then invoke the completion block. (In my unit test I would\nhave something like this.)",
    "start": "1871068",
    "end": "1876682"
  },
  {
    "text": "A test network controller\nconforms to the same protocol. Instead of fetching from the network",
    "start": "1877557",
    "end": "1884181"
  },
  {
    "text": "it uses stubbed data\nthat I know ahead of time and it immediately invokes\nthe completion block.",
    "start": "1884181",
    "end": "1890606"
  },
  {
    "text": "Now, I can configure the\ntest controller, pass it into the view controller, and\nask the view controller",
    "start": "1891483",
    "end": "1899283"
  },
  {
    "text": "to do something and test it is behavior. I have a protocol (and",
    "start": "1899284",
    "end": "1905339"
  },
  {
    "text": "does whatever), I do not care about that for the purposes of unit tests. I will test that independently later.",
    "start": "1905339",
    "end": "1909950"
  },
  {
    "text": "I have a protocol and I\nconform to that protocol in my mock, this test network controller.",
    "start": "1910861",
    "end": "1916957"
  },
  {
    "text": "I do something that I\nknow what it is going to do ahead of time and I know\nhow I expect the view",
    "start": "1917949",
    "end": "1923730"
  },
  {
    "text": "controller to react. Then, I test to\nmake sure that reaction is what I expect.",
    "start": "1923730",
    "end": "1928577"
  },
  {
    "text": "(That is all dependency injection is). The use of protocols helps you limit scope",
    "start": "1929222",
    "end": "1936303"
  },
  {
    "text": "(because you have a\nclearly defined contract about what your individual\nobject is supposed to do).",
    "start": "1936303",
    "end": "1941865"
  },
  {
    "text": "Adding a method to your\nprotocol now becomes a decision. You do not have access to the\nentire class list of functions,",
    "start": "1943031",
    "end": "1951089"
  },
  {
    "text": "even the internal ones that\nshould not know about. If it is not in the\nprotocol you cannot call it",
    "start": "1951919",
    "end": "1957007"
  },
  {
    "text": "(deal). If you want to call it you\nhave to make the decision to add it to the protocol (that is fine,",
    "start": "1957007",
    "end": "1963194"
  },
  {
    "text": "sometimes it makes sense to). Dependency injection is\nmore useful than just that.",
    "start": "1963194",
    "end": "1968824"
  },
  {
    "text": "Let's talk about shared\nstate and singletons.  (I do not know what Sal's reaction",
    "start": "1968824",
    "end": "1976068"
  },
  {
    "text": "is going to be). Singletons are not that bad, if you use dependency injection.",
    "start": "1976068",
    "end": "1981438"
  },
  {
    "text": "Let's say we have this\nfunction called loadAppSetup. (something you call\nwhen your app launches).",
    "start": "1982743",
    "end": "1989286"
  },
  {
    "text": "It is responsibility is to check and see, \"Have I launched before? \"If I have not launched before then show",
    "start": "1989286",
    "end": "1996025"
  },
  {
    "text": "\"the user something,\"\nmaybe a login in screen (who cares?) It grabs something out of NSUserDefaults",
    "start": "1996025",
    "end": "2002017"
  },
  {
    "text": "standardUserDefaults;\nif it has not happened yet then it calls some function.",
    "start": "2002017",
    "end": "2006556"
  },
  {
    "text": "How would you test that? I have no idea. You are going to clear\nout the standardUserDefault",
    "start": "2007247",
    "end": "2013367"
  },
  {
    "text": "and then set them up\nfor your specific test. Then, make sure to clear them out",
    "start": "2013367",
    "end": "2018428"
  },
  {
    "text": "afterwards (so it does not\npollute the next test you run). (it sounds a lot of work).",
    "start": "2018428",
    "end": "2023405"
  },
  {
    "text": "Dependency injection\nwould have us inject the defaults into the function (that is it).",
    "start": "2024536",
    "end": "2030835"
  },
  {
    "text": "This is now a dependency\ninjection friendly function. Do not be an ideologue.",
    "start": "2030835",
    "end": "2037923"
  },
  {
    "text": "It does not always make sense to do things. Sometimes you need to break\nthe rules and sometimes you need to cheat.",
    "start": "2037923",
    "end": "2043542"
  },
  {
    "text": "Sometimes you need to bend the rules, and sometimes you need to\nignore them altogether. This is how I would\ncheat with that function.",
    "start": "2043542",
    "end": "2049853"
  },
  {
    "text": "I would say, \"same\nthing but I am going to provide \"a default parameter value\nof the standardUnitDefaults.\"",
    "start": "2050880",
    "end": "2058693"
  },
  {
    "text": "Now, if I do not specify a\nparameter it is going to fall back to the standardUserDefaults. (That is great for my application",
    "start": "2060730",
    "end": "2067044"
  },
  {
    "text": "because it is less typing for me). In my unit tests I\ncan create my own user defaults",
    "start": "2067045",
    "end": "2073196"
  },
  {
    "text": "that are not the standard\nones (not shared with anybody else). I can inject them in. This is what it looks like,\nloadAppSetup. Nothing has",
    "start": "2073196",
    "end": "2081011"
  },
  {
    "text": "changed from the rest of the\napplication's perspective, but in the unit tests\nnow we can inject that in",
    "start": "2081011",
    "end": "2087393"
  },
  {
    "text": "and our tests become\nsimpler and they become isolated (which is what you want in tests).",
    "start": "2087393",
    "end": "2093865"
  },
  {
    "text": "Let's go back to our\nview controller example. Using the same cheat I might\nhave the network controller",
    "start": "2095599",
    "end": "2102808"
  },
  {
    "text": "property set to the\nAPI network controller, but critically important\nhere is the fact that I am",
    "start": "2102808",
    "end": "2109502"
  },
  {
    "text": "specifying that it\nconforms to the protocol. The view controller\nstill does not have access",
    "start": "2109502",
    "end": "2115376"
  },
  {
    "text": "to the actual API network controller. It only has access to the protocol (exactly what we want).",
    "start": "2115376",
    "end": "2120800"
  },
  {
    "text": "Nothing else in the view\ncontroller has changed.",
    "start": "2121629",
    "end": "2123515"
  },
  {
    "text": "You could test this now by creating the view\ncontroller, creating a stubbed",
    "start": "2126923",
    "end": "2132449"
  },
  {
    "text": "or mocked version of the\nnetwork controller protocol and injecting it in. As long as you inject it\nbefore the view is loaded",
    "start": "2132449",
    "end": "2140110"
  },
  {
    "text": "then you can test your\ncontroller (easy). There is this amazing\nquote by Mackenzie King,",
    "start": "2140110",
    "end": "2148481"
  },
  {
    "text": "prime minister of Canada in the 40s. He said, \"TDD if necessary,\nbut not necessarily TDD.\"",
    "start": "2148481",
    "end": "2156299"
  },
  {
    "text": "People have compared him to\nWinston Churchill of Canada (which I quite like because\nhis management style",
    "start": "2157199",
    "end": "2163731"
  },
  {
    "text": "was saying things that were so inscrutable that you could not disagree with him). (Obviously, that is what I am\ntrying to do right now).",
    "start": "2163731",
    "end": "2171121"
  },
  {
    "text": "Let's review unit testing. Do not test private\nfunctions, also start marking",
    "start": "2173344",
    "end": "2181121"
  },
  {
    "text": "your functions as private.\nBy default they are internal, which\nmeans you can call them and you should not be calling them.",
    "start": "2181122",
    "end": "2186875"
  },
  {
    "text": "Avoid re-writing wherever possible, and do not test your implementation. Remember the goal of unit\ntesting is to test the behavior",
    "start": "2188481",
    "end": "2195152"
  },
  {
    "text": "of the public interface. In an ideal world every\nobject would only have one",
    "start": "2195153",
    "end": "2200348"
  },
  {
    "text": "public function. (We do not live in an\nideal world, but just imagine.)",
    "start": "2201179",
    "end": "2205600"
  },
  {
    "text": "Last week Justin Sirls had\nthis amazing post about using partial mocks.",
    "start": "2206628",
    "end": "2212079"
  },
  {
    "text": "A partial mock is something real, but also fake.",
    "start": "2212989",
    "end": "2218481"
  },
  {
    "text": "In our example we could not do\nit because we used protocols; say intead of protocols\nwe used subclassing, but we only overwrote some of the methods,",
    "start": "2218481",
    "end": "2226959"
  },
  {
    "text": "some of the functions. Some of the behavior is\nreal and some of it is fake. (He compares it to testing cars.",
    "start": "2226959",
    "end": "2236141"
  },
  {
    "text": "Unit testing is just\nlike testing car safety. A mock would be a",
    "start": "2236142",
    "end": "2241915"
  },
  {
    "text": "crash test dummy, whatever you call it. Those like people\nwith little like yellow and black circles, and you\nknow, they measure the force",
    "start": "2244417",
    "end": "2252641"
  },
  {
    "text": "that they experience when\na car crashes. That is our double,\nthose are useful).",
    "start": "2252642",
    "end": "2258130"
  },
  {
    "text": "(A partial mock is someone\nwearing a Halloween costume that looks like a test crash dummy.",
    "start": "2258960",
    "end": "2266009"
  },
  {
    "text": "How is that useful in testing\nthe safety of the car?) (You probably do not want to\ncrash them into a wall",
    "start": "2270712",
    "end": "2276005"
  },
  {
    "text": "and see if they survive). (It would be much better to use a full,",
    "start": "2276006",
    "end": "2282778"
  },
  {
    "text": "actual test crash dummy). Why do not iOS developers like testing?",
    "start": "2283833",
    "end": "2290664"
  },
  {
    "text": "I think it comes down to this: it is unfamiliar and no\none forces us to do it",
    "start": "2290664",
    "end": "2295078"
  },
  {
    "text": "(a silly reason not to do something). (Going to the doctor is unfamiliar",
    "start": "2295998",
    "end": "2301903"
  },
  {
    "text": "and I do not like to do it\nand my mom has not forced me to go to the doctor in 10 years. Maybe I should go to the doctor",
    "start": "2301903",
    "end": "2310742"
  },
  {
    "text": "if I am feeling sick even\nthough I do not like to. that is the same thing with unit testing). It is good for us, even though it feels",
    "start": "2310742",
    "end": "2316424"
  },
  {
    "text": " weird at first. (I could not come up with a\nbetter metaphor, I am sorry). (laughs)",
    "start": "2316424",
    "end": "2322375"
  },
  {
    "text": "Testing has made me a better developer (I think it will make\nyou a better developer too",
    "start": "2322375",
    "end": "2328539"
  },
  {
    "text": "if you try it). I want to make code that is easy to maintain, that is easy\nto expand upon later,",
    "start": "2328539",
    "end": "2335015"
  },
  {
    "text": "and that I am proud of. Unit testing helps\nme do those three things. Last section\nof the talk, abstraction.",
    "start": "2335016",
    "end": "2342121"
  },
  {
    "text": "(\"this has already\nbeen an abstract talk, \"and now he is going to talk\nabout abstraction\").",
    "start": "2342121",
    "end": "2346416"
  },
  {
    "text": "I worked at a company who said this, \"If you are repeating two\nor more lines of code,",
    "start": "2347652",
    "end": "2353011"
  },
  {
    "text": "\"then you are doing it\nwrong, you need to find \"an abstraction and do it a better way.\"",
    "start": "2353011",
    "end": "2357265"
  },
  {
    "text": "(What?) Creating a label and\nthen adding it to my view that is two lines of code. \"Abstract it.\"",
    "start": "2359520",
    "end": "2365496"
  },
  {
    "text": " (At first it was difficult to do",
    "start": "2365496",
    "end": "2374191"
  },
  {
    "text": "but after a day or two I liked it). (After a few weeks I\nwent back to my old project",
    "start": "2374191",
    "end": "2379473"
  },
  {
    "text": "and I thought it was bananas,\nlook at all this duplicated code, I am adding\na label here, and here,",
    "start": "2379473",
    "end": "2385173"
  },
  {
    "text": "and here, and here). (It was terrible, I  did not like it. And now, I try and take this to heart.",
    "start": "2385173",
    "end": "2391264"
  },
  {
    "text": "I do not always do it, but it is something I am always looking for). You are already learning\nnew syntax with Swift 2.",
    "start": "2391264",
    "end": "2397542"
  },
  {
    "text": "Let's look for new\nabstractions along the way. Let's try new things. Not all the ideas are\ngoing to work out, in fact,",
    "start": "2398837",
    "end": "2404194"
  },
  {
    "text": "most of them will not, but that is\nyou should still do it. Experimentation has personal",
    "start": "2404195",
    "end": "2409397"
  },
  {
    "text": "and professional benefits. It is satisfying to play\naround with a new thing.",
    "start": "2409397",
    "end": "2414435"
  },
  {
    "text": "This is why we\nall download the betas of Xcode and try and\nbuild things with them. (it is fun to try new things).",
    "start": "2414435",
    "end": "2421354"
  },
  {
    "text": "Let's do that with abstractions, too. It is also professional development: if we find something\nnew that works,",
    "start": "2421354",
    "end": "2428631"
  },
  {
    "text": "we can build better code that is better for our employers. That is the case you\nshould make to your boss when he is, \"Why are you\ndownloading the Xcode beta?\"",
    "start": "2428632",
    "end": "2436078"
  },
  {
    "text": "(that is how you do it. A good idea).",
    "start": "2437188",
    "end": "2443313"
  },
  {
    "text": "(I had another point, but I forgot it. Even if you try\nsomething and it does not work,",
    "start": "2443313",
    "end": "2450286"
  },
  {
    "text": "this is the point, I remembered). Even if you try something\nand it does not work you still understand that solution.",
    "start": "2450286",
    "end": "2456098"
  },
  {
    "text": "(You try technique and\nit blows up in your face). Now you know that you\nshould not use that technique,",
    "start": "2456098",
    "end": "2461937"
  },
  {
    "text": "but maybe that technique would be valuable in another scenario, another\nsolution, another problem",
    "start": "2461937",
    "end": "2468056"
  },
  {
    "text": "somewhere else. When you try\nsomething maybe it does not work but you still learn something.",
    "start": "2468056",
    "end": "2473090"
  },
  {
    "text": "In my opinion, that is\nthe case for the idea that there is no such thing\nas a failed experiment.",
    "start": "2473090",
    "end": "2478358"
  },
  {
    "text": "If you try something and it does not work, if you have an idea and\nit turns out you are wrong, you still learned something.",
    "start": "2478358",
    "end": "2484086"
  },
  {
    "text": "In that way it is a success.",
    "start": "2484086",
    "end": "2486043"
  },
  {
    "text": "Some people say that\nthere is not always time to experiment. You have crunch time, you have",
    "start": "2490133",
    "end": "2495458"
  },
  {
    "text": "put out code in a\nvery small amount of time. (that happens, but it is\nimportant to try to experiment",
    "start": "2495458",
    "end": "2501868"
  },
  {
    "text": "when you can). When you cannot anymore\nthen you will fall back down",
    "start": "2501868",
    "end": "2507178"
  },
  {
    "text": "to a different level of abstraction.",
    "start": "2507178",
    "end": "2510802"
  },
  {
    "text": "(that is a better level of abstraction than when you started). (I made a graph. Laser pointer).",
    "start": "2512585",
    "end": "2519108"
  },
  {
    "text": "You can see the\nbeginning at this talk right now. I am encouraging you to\nexperiment and try new things.",
    "start": "2519109",
    "end": "2527809"
  },
  {
    "text": "You are going to write unit tests along the way. (You are getting so much better),",
    "start": "2527809",
    "end": "2534090"
  },
  {
    "text": "You are working at\nhigh level of abstraction (that is great9. It is crunch time,\nyou have got a deadline,",
    "start": "2534090",
    "end": "2539359"
  },
  {
    "text": "you have to ship to the App Store. You do not have time\nto write unit tests, you do not have time to\nexplore, you do not have time to try new things.",
    "start": "2539360",
    "end": "2545268"
  },
  {
    "text": "(Oh look! you are there, higher than where you were when you started).",
    "start": "2545269",
    "end": "2550192"
  },
  {
    "text": "You can fall back to a position later. You do not have to always write units test. You do not have to always\ntest, you do not have to",
    "start": "2551405",
    "end": "2557497"
  },
  {
    "text": "always experiment. But, when you are used to experimenting and you are used to testing it gets easier",
    "start": "2557497",
    "end": "2563984"
  },
  {
    "text": "so that you can do it, you can experiment and continue to experiment\nand test when you do not",
    "start": "2563985",
    "end": "2569941"
  },
  {
    "text": "have as much time. When you are done the crunch time you can go back and do it some more.",
    "start": "2569941",
    "end": "2576212"
  },
  {
    "text": "There is always\nan opportunity to learn. We should take advantage\nof those opportunities.",
    "start": "2577344",
    "end": "2581436"
  },
  {
    "text": "Let's wrap up. We have a history, as a\ncommunity and as an industry,",
    "start": "2583426",
    "end": "2590159"
  },
  {
    "text": "iOS community has a history of exploring new technologies: taking\nsomething that is cool and new",
    "start": "2590159",
    "end": "2596278"
  },
  {
    "text": "and building amazing things with it. We have done it with\nObjective-C,",
    "start": "2596278",
    "end": "2601455"
  },
  {
    "text": "with Swift (I think we are\ngoing to continue to do it). Now is not the time to stop\nlooking for cool, new solutions.",
    "start": "2601455",
    "end": "2608515"
  },
  {
    "text": "Learning is not just\nfor when Xcode is in beta. (Just because Xcode 7\nis out, Swift 2 is stable...)",
    "start": "2611272",
    "end": "2618830"
  },
  {
    "text": "(laughs) (finshed, finished). Just because Swift 2 is\nfinished, does not mean that you",
    "start": "2618830",
    "end": "2625369"
  },
  {
    "text": "should no longer look for cool new things you can do with it. Ideas are more valuable\nthan code, but neither one",
    "start": "2625369",
    "end": "2631718"
  },
  {
    "text": "of them should be thrown\naway (throwing away code is dangerous).",
    "start": "2631718",
    "end": "2636264"
  },
  {
    "text": "Effective unit tests makes\nyour code easier to change incrementally. Finally, if you can\noperate at the highest level",
    "start": "2637616",
    "end": "2645753"
  },
  {
    "text": "of abstraction you can at any given time then when you cannot\noperate at that high level",
    "start": "2645753",
    "end": "2650793"
  },
  {
    "text": "you can fall back to\nsomething that is still better than where you were.",
    "start": "2650793",
    "end": "2654867"
  },
  {
    "text": "(this has been a\nfun talk for me to research and think.",
    "start": "2656370",
    "end": "2663371"
  },
  {
    "text": "Thinking back over my own career and some\nof the decisions I made. I made mistakes,\nand things that I would do",
    "start": "2663371",
    "end": "2670586"
  },
  {
    "text": "differently now in\nhindsight, but I do not regret any of the mistakes that I\nmade because each one of them",
    "start": "2670586",
    "end": "2676139"
  },
  {
    "text": "has helped me learn. As long as I think about\nthe mistake afterward and learn from it, then\nit is not a negative thing).",
    "start": "2676139",
    "end": "2682826"
  },
  {
    "text": "Our goal as software\ndevelopers should not be to never make a mistake. Our goal as software\ndevelopers should be to try",
    "start": "2684191",
    "end": "2690808"
  },
  {
    "text": "and make better mistakes tomorrow. Thank you very much. (applause)",
    "start": "2690808",
    "end": "2698766"
  },
  {
    "text": "- [Voiceover] A couple of\nquestions from the audience, start at the bottom I think. In MVVM, should view\ncontrollers communicate",
    "start": "2698766",
    "end": "2706933"
  },
  {
    "text": "with view models through\na protocol, or know",
    "start": "2706934",
    "end": "2711934"
  },
  {
    "text": "the concrete type they are dealing with? - I love how I have this\nreputation as the MVVM guy,",
    "start": "2712211",
    "end": "2717338"
  },
  {
    "text": "that like I do not mention them at all, yeah, and it is like, \"Oh\na question about MVVMs.\"",
    "start": "2717338",
    "end": "2722779"
  },
  {
    "text": "MVVMs, I recently converted a\nlarge part of our code base, that is Swift code base\nto Model View ViewModel",
    "start": "2722779",
    "end": "2730092"
  },
  {
    "text": "and I found protocols to be way better, because it helped me avoid\nthe partial mock situation.",
    "start": "2730092",
    "end": "2735595"
  },
  {
    "text": "If the test stub, like the\nsubclass that you would have, cannot choose to not\noverride something because,",
    "start": "2736668",
    "end": "2744324"
  },
  {
    "text": " there is nothing to\noverride then that is better. You cannot accidentally fall\nback to actually performing",
    "start": "2744324",
    "end": "2751463"
  },
  {
    "text": "a network request in your unit tests.  protocols definitely, all the way.",
    "start": "2751463",
    "end": "2755672"
  },
  {
    "text": "- [Voiceover] Right, and if\nwe cannot pass in objects how would you pass an object\nto the view controller's",
    "start": "2756510",
    "end": "2762650"
  },
  {
    "text": "viewmodel? - Right, so this is a\ncommon question of like",
    "start": "2762650",
    "end": "2768054"
  },
  {
    "text": "who creates the viewmodel?  is it the view controller? Is it the view controller\nthat presented this one?",
    "start": "2768054",
    "end": "2774660"
  },
  {
    "text": "It is  tricky\nand it comes down to personal preference.",
    "start": "2774660",
    "end": "2779466"
  },
  {
    "text": "I am still kind of figuring this out, too. In my opinion, I like\nthe viewmodel that is created",
    "start": "2781017",
    "end": "2788685"
  },
  {
    "text": "by the view controller\nin a lazy closure block. And then, if a test is being\nrun then it can override",
    "start": "2788685",
    "end": "2795913"
  },
  {
    "text": "that property so that the real\nviewmodel is never created, so that the view controller\nonly ever uses test",
    "start": "2795914",
    "end": "2802048"
  },
  {
    "text": "view models in unit tests. The viewmodel itself\nto be created",
    "start": "2802048",
    "end": "2807504"
  },
  {
    "text": "you can have it created\nby a different view model, or you can have it created\nby the view controller that is presenting this one.",
    "start": "2807504",
    "end": "2813448"
  },
  {
    "text": "It does not  matter; I\nencourage you to experiment and see what you like best.",
    "start": "2813448",
    "end": "2817472"
  },
  {
    "text": "- [Voiceover]  if you\nwould start a new iOS project tomorrow would you write\nit in Swift of Objective-C?",
    "start": "2819263",
    "end": "2824833"
  },
  {
    "text": "The only reason I can think\nof for choosing Objective-C would be having a team of\ndevelopers with no Swift",
    "start": "2824833",
    "end": "2829866"
  },
  {
    "text": "experience and a tight deadline. Can you think of other reasons? - That'd be a big one, ,",
    "start": "2829866",
    "end": "2835437"
  },
  {
    "text": "I would write it in Swift,\nfirst of all, even if I had a tight deadline, but I\ndid that mistake last year and it did not work out well.",
    "start": "2837724",
    "end": "2843717"
  },
  {
    "text": " maybe do not listen to me. Talk it over with your team, figure out",
    "start": "2845068",
    "end": "2853589"
  },
  {
    "text": "how familiar they are\nwith Swift and how excited they are to learn Swift. Make a decision together.",
    "start": "2853590",
    "end": "2860609"
  },
  {
    "text": "I cannot tell you what\nto do because I do not know what is best for your team. I do not know the different\npriorities that you have,",
    "start": "2860609",
    "end": "2866630"
  },
  {
    "text": "and I do not know the different constraints that you are working in.  if you communicate with\neach other and figure out what'll work best for all of you as a team",
    "start": "2866631",
    "end": "2874226"
  },
  {
    "text": "that is the best solution. - [Voiceover] what did square brackets do to offend you so much?",
    "start": "2874227",
    "end": "2879231"
  },
  {
    "text": "- Square brackets did not\ndo anything to offend me. I am pretty sure I know\nwho asked that question.",
    "start": "2880479",
    "end": "2884829"
  },
  {
    "text": "(laughs)\nExactly. I do not hate square brackets. I do not hate semicolons, I\ndo not  hate anybody,",
    "start": "2885926",
    "end": "2893264"
  },
  {
    "text": "or anything. I try to be easygoing now. I used to be  angry.",
    "start": "2893264",
    "end": "2899013"
  },
  {
    "text": "Square brackets they make certain types of programming,",
    "start": "2900423",
    "end": "2907396"
  },
  {
    "text": "like functional reactive programming more verbose than they need to be, that is what I would say is the\ncase against square brackets.",
    "start": "2907396",
    "end": "2914300"
  },
  {
    "text": "- [Voiceover] Right, and\nof course these are anonymous when is Canada\ngoing to land on Mars?",
    "start": "2915141",
    "end": "2921983"
  },
  {
    "text": "- Land on Mars? We invented the space arm,",
    "start": "2922861",
    "end": "2928444"
  },
  {
    "text": "the Canadarm. That is actually what\nit is called, by the way.",
    "start": "2928445",
    "end": "2933107"
  },
  {
    "text": "It was  popular in\nthe space shuttle days and it was this like\nmulti-articulated arm that could like",
    "start": "2934943",
    "end": "2940968"
  },
  {
    "text": "rotate and grab like space\ntelescopes and things and like do stuff with it.",
    "start": "2940968",
    "end": "2945931"
  },
  {
    "text": "Thank you for verifying that. I do not know when\nwe are landing on Mars,",
    "start": "2946645",
    "end": "2951858"
  },
  {
    "text": "but I know if we do it it\nwill be for the benefit of all humanity, like our\nkeynote speaker this morning discussed, and not for just\nthe benefit of one nation.",
    "start": "2951858",
    "end": "2960564"
  },
  {
    "text": "(laughs) - [Voiceover] Other\nquestions from the audience?",
    "start": "2960564",
    "end": "2964111"
  },
  {
    "text": "- [Voiceover] I have one\nbecause you talked about doing a lot experiments,\nand some of them, of course,",
    "start": "2965684",
    "end": "2971127"
  },
  {
    "text": "being bad--\n- No bad experiments. - [Voiceover] end of\nproduction and somebody has to maintain them for a\nvery long time afterwards.",
    "start": "2971127",
    "end": "2978688"
  },
  {
    "text": "If everybody's experimenting all the time then you will have a fun\ntime producing code I think.",
    "start": "2979424",
    "end": "2985514"
  },
  {
    "text": "- that is true. I guess I should have\nstipulated that if an experiment does not work out the way\nyou think than you should",
    "start": "2986147",
    "end": "2992323"
  },
  {
    "text": "throw it away, or at least\nnot merge it into master.",
    "start": "2992323",
    "end": "2996485"
  },
  {
    "text": "The ideas is-- - [Voiceover] we are talking\nabout, I suspect, feature frames experiments, not\nlike let's do weird stuff",
    "start": "2998197",
    "end": "3005059"
  },
  {
    "text": "and see what happens. - Exactly I am like the\nspaghetti against the wall approach, or anything like that.",
    "start": "3005059",
    "end": "3011359"
  },
  {
    "text": "Ideally, you would be\nworking on experiments in a playground, not in a\nproduction application.",
    "start": "3011359",
    "end": "3017372"
  },
  {
    "text": "That is where I do it, so.",
    "start": "3017374",
    "end": "3019088"
  },
  {
    "text": "- [Voiceover] Ash.\n- How is it going? - [Voiceover] Good, how\nwas your talk for you? - Little tired.\n(laughs)",
    "start": "3022657",
    "end": "3029180"
  },
  {
    "text": "- [Voiceover]  just an easy one then.  there was a\nexciting slide where you said, \" because of dependency injection",
    "start": "3029180",
    "end": "3036960"
  },
  {
    "text": "\"I am able to write tests for\nmy code, I also write my code in a better way.\"",
    "start": "3038365",
    "end": "3044320"
  },
  {
    "text": "I am not  sure that is\nsaying it word for word, but the--\n- that is the general gist. - [Voiceover] And then, like\nyou cheated and just actually",
    "start": "3045010",
    "end": "3051265"
  },
  {
    "text": "did not change your actual code at all.  I was  bit let\ndown, so can you comment?",
    "start": "3051265",
    "end": "3058575"
  },
  {
    "text": "- Sure, yeah so I did not\nchange the code at all because the whole class was\nlike eight lines and there is",
    "start": "3058575",
    "end": "3064089"
  },
  {
    "text": "not a lot to change. I was trying to\nshow how simple it was",
    "start": "3064090",
    "end": "3068138"
  },
  {
    "text": "to do a dependency injection\nand this is kind of a cheat, but I was\nfocusing on the pedagogical",
    "start": "3069165",
    "end": "3077744"
  },
  {
    "text": "example of teaching you how\nto do dependency injection and not at the time how\nto write better code",
    "start": "3077744",
    "end": "3082910"
  },
  {
    "text": "with unit tests. In that specific instance\nit would not  be the view controller necessarily\nthat would have been changed.",
    "start": "3082910",
    "end": "3090296"
  },
  {
    "text": "it is the network controller,\nthe thing that does the networking request. If the view controller\ncan only access it through",
    "start": "3090296",
    "end": "3096937"
  },
  {
    "text": "the clearly definied protocol,\nthen it is less likely to call the internal functions\nthat it  should not",
    "start": "3096937",
    "end": "3102183"
  },
  {
    "text": "be aware of, and that way\nyou have very loose coupling. The view controller and\nthe network controller",
    "start": "3102183",
    "end": "3108558"
  },
  {
    "text": "do not know about each other,\nexcept through explicitly defined and limited ways.",
    "start": "3108558",
    "end": "3113202"
  },
  {
    "text": "They do not do things\nlike the network controller is not able to like add a subview.",
    "start": "3114670",
    "end": "3120068"
  },
  {
    "text": "The view controller\nis not able to parse JSON. Those are two\ndifferent separate concerns",
    "start": "3120069",
    "end": "3126884"
  },
  {
    "text": "and they should be in separate classes and their communication\nto each other should be very constricted.",
    "start": "3126884",
    "end": "3132440"
  },
  {
    "text": "I think maybe in a\nfuture version of this talk maybe one that is instead\nof calling it like,",
    "start": "3133490",
    "end": "3139748"
  },
  {
    "text": "\"Merging Best Practices,\"\nwhat if I actually have a talk on unit testing, maybe I would go\ninto more detail about that.",
    "start": "3139748",
    "end": "3145813"
  },
  {
    "text": "Thank you. I am supposed to remind\nyou to rate this session. Thanks again everyone,\nyou have been a great audience.",
    "start": "3147409",
    "end": "3153695"
  },
  {
    "text": "(applause)",
    "start": "3153695",
    "end": "3157184"
  }
]