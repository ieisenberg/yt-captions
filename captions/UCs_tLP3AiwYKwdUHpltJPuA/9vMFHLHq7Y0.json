[
  {
    "text": "so thanks for coming",
    "start": "359",
    "end": "2220"
  },
  {
    "text": "um this session uh is a continuation of",
    "start": "2220",
    "end": "6540"
  },
  {
    "text": "uh some points I brought up in the",
    "start": "6540",
    "end": "7740"
  },
  {
    "text": "Keynote",
    "start": "7740",
    "end": "9660"
  },
  {
    "text": "and in particular I I gave you uh",
    "start": "9660",
    "end": "12000"
  },
  {
    "text": "something that was very close to the",
    "start": "12000",
    "end": "13080"
  },
  {
    "text": "original specification of FRP and then",
    "start": "13080",
    "end": "15540"
  },
  {
    "text": "hinted at that there's there's a much",
    "start": "15540",
    "end": "17160"
  },
  {
    "text": "more elegant specification and and I",
    "start": "17160",
    "end": "19619"
  },
  {
    "text": "want to talk to you about this more",
    "start": "19619",
    "end": "21840"
  },
  {
    "text": "elegant version",
    "start": "21840",
    "end": "23160"
  },
  {
    "text": "for two reasons one is because uh it's",
    "start": "23160",
    "end": "25740"
  },
  {
    "text": "for the sake of FRP in itself is to show",
    "start": "25740",
    "end": "27720"
  },
  {
    "text": "you that you know it could just be",
    "start": "27720",
    "end": "28619"
  },
  {
    "text": "described more simply and more elegantly",
    "start": "28619",
    "end": "30060"
  },
  {
    "text": "but much more importantly because it's",
    "start": "30060",
    "end": "31439"
  },
  {
    "text": "an example of a general",
    "start": "31439",
    "end": "33180"
  },
  {
    "text": "a general technique for specifying for",
    "start": "33180",
    "end": "36600"
  },
  {
    "text": "Designing and specifying software",
    "start": "36600",
    "end": "38880"
  },
  {
    "text": "libraries",
    "start": "38880",
    "end": "40739"
  },
  {
    "text": "and and my 130 I think the afternoon two",
    "start": "40739",
    "end": "45420"
  },
  {
    "text": "and a half hour Workshop is is going to",
    "start": "45420",
    "end": "47040"
  },
  {
    "text": "go in much more explicitly I must have",
    "start": "47040",
    "end": "49200"
  },
  {
    "text": "more examples so this is kind of a",
    "start": "49200",
    "end": "51120"
  },
  {
    "text": "bridge between the two talks so",
    "start": "51120",
    "end": "54120"
  },
  {
    "text": "kind of super quickly hopefully under a",
    "start": "54120",
    "end": "56520"
  },
  {
    "text": "minute a recap of The Story So Far So",
    "start": "56520",
    "end": "59820"
  },
  {
    "text": "function reactive programming it really",
    "start": "59820",
    "end": "61140"
  },
  {
    "text": "is based on two key ideas it's the",
    "start": "61140",
    "end": "63480"
  },
  {
    "text": "domain Independent Idea and a domain",
    "start": "63480",
    "end": "65400"
  },
  {
    "text": "specific idea so the domain independent",
    "start": "65400",
    "end": "67260"
  },
  {
    "text": "one is is to base the entire development",
    "start": "67260",
    "end": "71400"
  },
  {
    "text": "of the uh the API you know it's formal",
    "start": "71400",
    "end": "74700"
  },
  {
    "text": "specification it's documentation and its",
    "start": "74700",
    "end": "76920"
  },
  {
    "text": "implementation on on a precise",
    "start": "76920",
    "end": "79880"
  },
  {
    "text": "specification in the form that I call",
    "start": "79880",
    "end": "82020"
  },
  {
    "text": "denotational",
    "start": "82020",
    "end": "84000"
  },
  {
    "text": "as well as a price precise simple",
    "start": "84000",
    "end": "86100"
  },
  {
    "text": "denotation",
    "start": "86100",
    "end": "87240"
  },
  {
    "text": "and then the second principle is to uh",
    "start": "87240",
    "end": "90479"
  },
  {
    "text": "it is continuous time and that was",
    "start": "90479",
    "end": "91979"
  },
  {
    "text": "really being kind of the key",
    "start": "91979",
    "end": "93780"
  },
  {
    "text": "idea that opens the germ that gave rise",
    "start": "93780",
    "end": "96299"
  },
  {
    "text": "to functional reactive programming",
    "start": "96299",
    "end": "98280"
  },
  {
    "text": "okay so",
    "start": "98280",
    "end": "100439"
  },
  {
    "text": "um you can think of it as in a sense as",
    "start": "100439",
    "end": "102600"
  },
  {
    "text": "being a",
    "start": "102600",
    "end": "103700"
  },
  {
    "text": "deterministic continuous concurrency now",
    "start": "103700",
    "end": "106259"
  },
  {
    "text": "I put concurrency in quotes because",
    "start": "106259",
    "end": "107820"
  },
  {
    "text": "concurrency is usually an operational",
    "start": "107820",
    "end": "109200"
  },
  {
    "text": "notion and this is really denotational",
    "start": "109200",
    "end": "111000"
  },
  {
    "text": "there's no operation here",
    "start": "111000",
    "end": "112640"
  },
  {
    "text": "okay",
    "start": "112640",
    "end": "114299"
  },
  {
    "text": "so",
    "start": "114299",
    "end": "115560"
  },
  {
    "text": "as I mentioned before there kind of been",
    "start": "115560",
    "end": "117600"
  },
  {
    "text": "a lot of ideas floating around about",
    "start": "117600",
    "end": "119100"
  },
  {
    "text": "what FRP is in the last few years and",
    "start": "119100",
    "end": "121740"
  },
  {
    "text": "most of them are really completely",
    "start": "121740",
    "end": "123240"
  },
  {
    "text": "beside the point of",
    "start": "123240",
    "end": "125280"
  },
  {
    "text": "to me about what FRP was and and to me",
    "start": "125280",
    "end": "127920"
  },
  {
    "text": "still is so FRP is not about graphs",
    "start": "127920",
    "end": "132500"
  },
  {
    "text": "oh thank you thanks yeah if I do that",
    "start": "133560",
    "end": "135300"
  },
  {
    "text": "again please please let me know again",
    "start": "135300",
    "end": "138300"
  },
  {
    "text": "um",
    "start": "138300",
    "end": "139920"
  },
  {
    "text": "I also want to say please interrupt",
    "start": "139920",
    "end": "141420"
  },
  {
    "text": "anytime with questions uh if you have a",
    "start": "141420",
    "end": "143819"
  },
  {
    "text": "dumb question somebody else is even more",
    "start": "143819",
    "end": "145739"
  },
  {
    "text": "confused about what you're confused",
    "start": "145739",
    "end": "146819"
  },
  {
    "text": "about so uh please don't be shy about",
    "start": "146819",
    "end": "149700"
  },
  {
    "text": "that I enjoy interactive presentations",
    "start": "149700",
    "end": "151620"
  },
  {
    "text": "more than uh more than a monologue",
    "start": "151620",
    "end": "153959"
  },
  {
    "text": "so there are a bunch of kind of very",
    "start": "153959",
    "end": "155940"
  },
  {
    "text": "operational Notions ideas about what",
    "start": "155940",
    "end": "158459"
  },
  {
    "text": "some program is doing and updating what",
    "start": "158459",
    "end": "160260"
  },
  {
    "text": "state and that kind of thing none of",
    "start": "160260",
    "end": "161400"
  },
  {
    "text": "that has anything to do with functional",
    "start": "161400",
    "end": "162420"
  },
  {
    "text": "reactive programming those are all ideas",
    "start": "162420",
    "end": "164340"
  },
  {
    "text": "about some ways that you might Implement",
    "start": "164340",
    "end": "166860"
  },
  {
    "text": "parts of functional record programming",
    "start": "166860",
    "end": "168360"
  },
  {
    "text": "and many of them are really unfortunate",
    "start": "168360",
    "end": "169680"
  },
  {
    "text": "choices so it's particularly harmful to",
    "start": "169680",
    "end": "172319"
  },
  {
    "text": "get confused between these operational",
    "start": "172319",
    "end": "174420"
  },
  {
    "text": "Notions and what FRP is",
    "start": "174420",
    "end": "176700"
  },
  {
    "text": "okay so it's not going to do with graphs",
    "start": "176700",
    "end": "178440"
  },
  {
    "text": "it's nothing to do with updates",
    "start": "178440",
    "end": "179400"
  },
  {
    "text": "propagation that kind of thing certainly",
    "start": "179400",
    "end": "181080"
  },
  {
    "text": "has nothing to do with streams in the",
    "start": "181080",
    "end": "182459"
  },
  {
    "text": "sense of uh the common use of the word",
    "start": "182459",
    "end": "185220"
  },
  {
    "text": "streams to mean discrete sequences",
    "start": "185220",
    "end": "187500"
  },
  {
    "text": "and and when I say it's not about doing",
    "start": "187500",
    "end": "189000"
  },
  {
    "text": "I mean it's not about any operational",
    "start": "189000",
    "end": "190440"
  },
  {
    "text": "model at all some implementations might",
    "start": "190440",
    "end": "193200"
  },
  {
    "text": "be but FRP itself is not",
    "start": "193200",
    "end": "195780"
  },
  {
    "text": "so",
    "start": "195780",
    "end": "196980"
  },
  {
    "text": "the uh the central data type in FRP is",
    "start": "196980",
    "end": "200099"
  },
  {
    "text": "something I call the behavior",
    "start": "200099",
    "end": "201780"
  },
  {
    "text": "which you can think of as a Time varying",
    "start": "201780",
    "end": "203580"
  },
  {
    "text": "value that was that was what I wanted",
    "start": "203580",
    "end": "205500"
  },
  {
    "text": "was that originally came out of uh doing",
    "start": "205500",
    "end": "207720"
  },
  {
    "text": "a 3D animation and uh 2D animation other",
    "start": "207720",
    "end": "210959"
  },
  {
    "text": "kinds of things and I realized that uh",
    "start": "210959",
    "end": "213060"
  },
  {
    "text": "if I wanted to build up These Things",
    "start": "213060",
    "end": "214739"
  },
  {
    "text": "That Vary over time",
    "start": "214739",
    "end": "217260"
  },
  {
    "text": "these things that are not static even",
    "start": "217260",
    "end": "218879"
  },
  {
    "text": "think of dynamic is another way to say",
    "start": "218879",
    "end": "220319"
  },
  {
    "text": "it I want to do in a compositional way",
    "start": "220319",
    "end": "221940"
  },
  {
    "text": "then I want to at every level at the",
    "start": "221940",
    "end": "223920"
  },
  {
    "text": "very from the very finest like a Boolean",
    "start": "223920",
    "end": "226319"
  },
  {
    "text": "or a number up to the largest thing you",
    "start": "226319",
    "end": "229019"
  },
  {
    "text": "know an entire three-dimensional",
    "start": "229019",
    "end": "230580"
  },
  {
    "text": "interactive scene I wanted to build up",
    "start": "230580",
    "end": "232560"
  },
  {
    "text": "compositionally every bit of it uh as",
    "start": "232560",
    "end": "235680"
  },
  {
    "text": "time drawing values as first class",
    "start": "235680",
    "end": "237540"
  },
  {
    "text": "values okay",
    "start": "237540",
    "end": "240120"
  },
  {
    "text": "so I have this mental model it's a not",
    "start": "240120",
    "end": "242640"
  },
  {
    "text": "just a mental mod it's a formal model",
    "start": "242640",
    "end": "243840"
  },
  {
    "text": "the meaning of a behavior is a function",
    "start": "243840",
    "end": "245940"
  },
  {
    "text": "from time to Alpha it's critically",
    "start": "245940",
    "end": "248519"
  },
  {
    "text": "important that time is reals and not",
    "start": "248519",
    "end": "250500"
  },
  {
    "text": "something discreet like integers",
    "start": "250500",
    "end": "253260"
  },
  {
    "text": "okay and then I mentioned that from this",
    "start": "253260",
    "end": "256739"
  },
  {
    "text": "one choice here most of FRP can follow",
    "start": "256739",
    "end": "261479"
  },
  {
    "text": "okay so almost everything that's",
    "start": "261479",
    "end": "263520"
  },
  {
    "text": "important is in this one small statement",
    "start": "263520",
    "end": "265919"
  },
  {
    "text": "right here the meaning of a behavior is",
    "start": "265919",
    "end": "268020"
  },
  {
    "text": "a function from time to Alpha",
    "start": "268020",
    "end": "270180"
  },
  {
    "text": "okay and so purpose of this short talk",
    "start": "270180",
    "end": "272880"
  },
  {
    "text": "is to show you how that works",
    "start": "272880",
    "end": "275940"
  },
  {
    "text": "so this was a description of more or",
    "start": "275940",
    "end": "278580"
  },
  {
    "text": "less the original API I showed yesterday",
    "start": "278580",
    "end": "280380"
  },
  {
    "text": "I won't go into it detail just a little",
    "start": "280380",
    "end": "282780"
  },
  {
    "text": "reminder",
    "start": "282780",
    "end": "284280"
  },
  {
    "text": "um so this is the precise meaning of",
    "start": "284280",
    "end": "286680"
  },
  {
    "text": "each of the constructs in the API so",
    "start": "286680",
    "end": "288900"
  },
  {
    "text": "that's the idea we Define an API",
    "start": "288900",
    "end": "291600"
  },
  {
    "text": "and we and the API is going to be it's",
    "start": "291600",
    "end": "293699"
  },
  {
    "text": "going to be typed",
    "start": "293699",
    "end": "295560"
  },
  {
    "text": "that is back here so the API is going to",
    "start": "295560",
    "end": "297660"
  },
  {
    "text": "be typed and then we wanted to find",
    "start": "297660",
    "end": "299040"
  },
  {
    "text": "meaning compositionally which means the",
    "start": "299040",
    "end": "301259"
  },
  {
    "text": "meaning of well the meaning of say Lift",
    "start": "301259",
    "end": "304440"
  },
  {
    "text": "two of its three arguments is going to",
    "start": "304440",
    "end": "307380"
  },
  {
    "text": "be a function of the meanings of those",
    "start": "307380",
    "end": "309360"
  },
  {
    "text": "arguments okay that's what we meant",
    "start": "309360",
    "end": "311220"
  },
  {
    "text": "composition will sort of recursively",
    "start": "311220",
    "end": "312720"
  },
  {
    "text": "defined",
    "start": "312720",
    "end": "313800"
  },
  {
    "text": "on the structure of the API",
    "start": "313800",
    "end": "316080"
  },
  {
    "text": "and so here here's a precise definition",
    "start": "316080",
    "end": "317880"
  },
  {
    "text": "you can see it's pretty simple",
    "start": "317880",
    "end": "320340"
  },
  {
    "text": "so the meaning of behaviors is going to",
    "start": "320340",
    "end": "322560"
  },
  {
    "text": "be a function and I'm writing those",
    "start": "322560",
    "end": "323639"
  },
  {
    "text": "functions as Lambda expressions",
    "start": "323639",
    "end": "325860"
  },
  {
    "text": "over here so and then we can just do a",
    "start": "325860",
    "end": "329759"
  },
  {
    "text": "little bit of refactoring to use some",
    "start": "329759",
    "end": "331500"
  },
  {
    "text": "some idioms to make these right hand",
    "start": "331500",
    "end": "333539"
  },
  {
    "text": "sides just a little prettier",
    "start": "333539",
    "end": "335940"
  },
  {
    "text": "okay not quite so low level in terms of",
    "start": "335940",
    "end": "338280"
  },
  {
    "text": "the explicit Lambda abstractions instead",
    "start": "338280",
    "end": "340800"
  },
  {
    "text": "we Define them in terms of higher level",
    "start": "340800",
    "end": "342300"
  },
  {
    "text": "building blocks like composition and",
    "start": "342300",
    "end": "344280"
  },
  {
    "text": "constant identity",
    "start": "344280",
    "end": "345840"
  },
  {
    "text": "I think now to me that like that makes",
    "start": "345840",
    "end": "348300"
  },
  {
    "text": "it sort of higher level I'm no longer",
    "start": "348300",
    "end": "349800"
  },
  {
    "text": "talking about the mechanics of what",
    "start": "349800",
    "end": "351060"
  },
  {
    "text": "happened and given a time this is how",
    "start": "351060",
    "end": "352560"
  },
  {
    "text": "you compute now we're talking about",
    "start": "352560",
    "end": "354300"
  },
  {
    "text": "composing functions",
    "start": "354300",
    "end": "357060"
  },
  {
    "text": "directly",
    "start": "357060",
    "end": "358740"
  },
  {
    "text": "and then we have this uh secondary type",
    "start": "358740",
    "end": "360660"
  },
  {
    "text": "of events events punctuate behaviors so",
    "start": "360660",
    "end": "363919"
  },
  {
    "text": "if you think of continuous so behaviors",
    "start": "363919",
    "end": "367259"
  },
  {
    "text": "are anything that varies with time it's",
    "start": "367259",
    "end": "368820"
  },
  {
    "text": "if you're interested in a value even if",
    "start": "368820",
    "end": "370560"
  },
  {
    "text": "it doesn't change continuously so I",
    "start": "370560",
    "end": "372960"
  },
  {
    "text": "might slip and accidentally say",
    "start": "372960",
    "end": "374100"
  },
  {
    "text": "continuous function but I really mean",
    "start": "374100",
    "end": "375419"
  },
  {
    "text": "functions of continuous time so the",
    "start": "375419",
    "end": "377520"
  },
  {
    "text": "functions can have discontinuities in",
    "start": "377520",
    "end": "379080"
  },
  {
    "text": "them right but what's important is that",
    "start": "379080",
    "end": "382500"
  },
  {
    "text": "they're defined at every moment in the",
    "start": "382500",
    "end": "384180"
  },
  {
    "text": "temporal continuum",
    "start": "384180",
    "end": "386699"
  },
  {
    "text": "okay and what I mean by Continuum and",
    "start": "386699",
    "end": "388860"
  },
  {
    "text": "are continuous is that if you take any",
    "start": "388860",
    "end": "390240"
  },
  {
    "text": "two distinct times there are times in",
    "start": "390240",
    "end": "392280"
  },
  {
    "text": "between them",
    "start": "392280",
    "end": "393419"
  },
  {
    "text": "okay so there's no kind of finite",
    "start": "393419",
    "end": "395039"
  },
  {
    "text": "granularity",
    "start": "395039",
    "end": "396539"
  },
  {
    "text": "there's no finite resolution there",
    "start": "396539",
    "end": "399919"
  },
  {
    "text": "um so a behavior is anything that has a",
    "start": "400860",
    "end": "402539"
  },
  {
    "text": "value over time so for instance uh I'm",
    "start": "402539",
    "end": "405120"
  },
  {
    "text": "waving this around is a is a behavior so",
    "start": "405120",
    "end": "407639"
  },
  {
    "text": "it's a function from time to a spatial",
    "start": "407639",
    "end": "409560"
  },
  {
    "text": "location it may be an orientation that",
    "start": "409560",
    "end": "411000"
  },
  {
    "text": "kind of thing if I Advance the slide I",
    "start": "411000",
    "end": "414300"
  },
  {
    "text": "go back or forward I'm going to click a",
    "start": "414300",
    "end": "415800"
  },
  {
    "text": "button that's an event so it's a",
    "start": "415800",
    "end": "417660"
  },
  {
    "text": "discreet moment in time something",
    "start": "417660",
    "end": "418740"
  },
  {
    "text": "happens so it doesn't carry a value",
    "start": "418740",
    "end": "420600"
  },
  {
    "text": "through time it's that at",
    "start": "420600",
    "end": "422940"
  },
  {
    "text": "times discrete times we have we have",
    "start": "422940",
    "end": "427440"
  },
  {
    "text": "values to show up and then reactivity",
    "start": "427440",
    "end": "429539"
  },
  {
    "text": "comes from the interplay between these",
    "start": "429539",
    "end": "431100"
  },
  {
    "text": "two",
    "start": "431100",
    "end": "432419"
  },
  {
    "text": "if you have any questions about that",
    "start": "432419",
    "end": "435419"
  },
  {
    "text": "okay so that's the story so far that was",
    "start": "435419",
    "end": "438180"
  },
  {
    "text": "a little more than a minute I'm afraid",
    "start": "438180",
    "end": "440699"
  },
  {
    "text": "10 40. great",
    "start": "440699",
    "end": "442440"
  },
  {
    "text": "so now I want to show you a a more",
    "start": "442440",
    "end": "445259"
  },
  {
    "text": "elegant way to approach API design in in",
    "start": "445259",
    "end": "448139"
  },
  {
    "text": "this context of a functional right to",
    "start": "448139",
    "end": "450539"
  },
  {
    "text": "programming",
    "start": "450539",
    "end": "451620"
  },
  {
    "text": "so many of the operations that were in",
    "start": "451620",
    "end": "454500"
  },
  {
    "text": "the original API",
    "start": "454500",
    "end": "456060"
  },
  {
    "text": "look like more General operations so",
    "start": "456060",
    "end": "459300"
  },
  {
    "text": "there was a mapping kind of a thing if I",
    "start": "459300",
    "end": "460860"
  },
  {
    "text": "had a behavior and I had to function",
    "start": "460860",
    "end": "462960"
  },
  {
    "text": "that then I could I could map that that",
    "start": "462960",
    "end": "465060"
  },
  {
    "text": "function over the behavior so it gets",
    "start": "465060",
    "end": "466740"
  },
  {
    "text": "applied at every moment in time",
    "start": "466740",
    "end": "468900"
  },
  {
    "text": "okay uncountably many moments you know",
    "start": "468900",
    "end": "470940"
  },
  {
    "text": "the whole continuum",
    "start": "470940",
    "end": "473340"
  },
  {
    "text": "uh or if I have two behaviors then and I",
    "start": "473340",
    "end": "476340"
  },
  {
    "text": "have a function of two arguments I can I",
    "start": "476340",
    "end": "478020"
  },
  {
    "text": "can just imagine those two behaviors in",
    "start": "478020",
    "end": "480780"
  },
  {
    "text": "parallel like continuously that's what I",
    "start": "480780",
    "end": "483000"
  },
  {
    "text": "mean by by continuous concurrency so to",
    "start": "483000",
    "end": "485759"
  },
  {
    "text": "speak and then that that function of two",
    "start": "485759",
    "end": "487620"
  },
  {
    "text": "arguments gets applied so at every",
    "start": "487620",
    "end": "489960"
  },
  {
    "text": "moment in time that function program",
    "start": "489960",
    "end": "491580"
  },
  {
    "text": "gets applied to the values of the",
    "start": "491580",
    "end": "493259"
  },
  {
    "text": "behavior okay and that happens across",
    "start": "493259",
    "end": "495240"
  },
  {
    "text": "time",
    "start": "495240",
    "end": "496199"
  },
  {
    "text": "so that pattern looks like applicative",
    "start": "496199",
    "end": "499259"
  },
  {
    "text": "that's the kind of thing that",
    "start": "499259",
    "end": "500280"
  },
  {
    "text": "applicative does and then there was the",
    "start": "500280",
    "end": "501900"
  },
  {
    "text": "thing I called lift zero the constant",
    "start": "501900",
    "end": "503819"
  },
  {
    "text": "Behavior that's also comes from",
    "start": "503819",
    "end": "505740"
  },
  {
    "text": "applicative to something called Pure",
    "start": "505740",
    "end": "508259"
  },
  {
    "text": "there uh it's also the case in",
    "start": "508259",
    "end": "511199"
  },
  {
    "text": "particular that if I have two behaviors",
    "start": "511199",
    "end": "513060"
  },
  {
    "text": "uh and I have some kind of monoid a",
    "start": "513060",
    "end": "516000"
  },
  {
    "text": "monoid is just uh it's just algebraic",
    "start": "516000",
    "end": "518039"
  },
  {
    "text": "pattern where I have an identity",
    "start": "518039",
    "end": "519120"
  },
  {
    "text": "operation and I have an associative",
    "start": "519120",
    "end": "520760"
  },
  {
    "text": "identity value in an associative",
    "start": "520760",
    "end": "522779"
  },
  {
    "text": "operation identity is the identity for",
    "start": "522779",
    "end": "524820"
  },
  {
    "text": "that associative operation",
    "start": "524820",
    "end": "526440"
  },
  {
    "text": "so so as one kind of special case uh if",
    "start": "526440",
    "end": "529920"
  },
  {
    "text": "I have a if I have a monoidal value and",
    "start": "529920",
    "end": "531779"
  },
  {
    "text": "it's bearing over time if I have two of",
    "start": "531779",
    "end": "533279"
  },
  {
    "text": "them then I can combine them and it just",
    "start": "533279",
    "end": "535140"
  },
  {
    "text": "means apply the monoidal combination",
    "start": "535140",
    "end": "537480"
  },
  {
    "text": "or this uh the empty which also comes",
    "start": "537480",
    "end": "540120"
  },
  {
    "text": "from monoid is the constant empty okay",
    "start": "540120",
    "end": "542880"
  },
  {
    "text": "and similarly events now so events",
    "start": "542880",
    "end": "545459"
  },
  {
    "text": "happen discreetly so at every moment if",
    "start": "545459",
    "end": "547800"
  },
  {
    "text": "I if I have an event and I have a",
    "start": "547800",
    "end": "549120"
  },
  {
    "text": "function then whenever that event occurs",
    "start": "549120",
    "end": "550620"
  },
  {
    "text": "I can apply the function to the value",
    "start": "550620",
    "end": "551940"
  },
  {
    "text": "that the event yields",
    "start": "551940",
    "end": "554220"
  },
  {
    "text": "that gives me a new event now similarly",
    "start": "554220",
    "end": "556560"
  },
  {
    "text": "there's another monoidal operation did",
    "start": "556560",
    "end": "559019"
  },
  {
    "text": "something happen with the Sounders at my",
    "start": "559019",
    "end": "560580"
  },
  {
    "text": "imagination are you okay okay great",
    "start": "560580",
    "end": "563580"
  },
  {
    "text": "so if I'm gonna I can combine two events",
    "start": "563580",
    "end": "566640"
  },
  {
    "text": "uh uh in such a way that the new event",
    "start": "566640",
    "end": "570360"
  },
  {
    "text": "occurs whenever either of the two occur",
    "start": "570360",
    "end": "573660"
  },
  {
    "text": "and it also has uh an identity and it's",
    "start": "573660",
    "end": "576600"
  },
  {
    "text": "associative",
    "start": "576600",
    "end": "577740"
  },
  {
    "text": "okay",
    "start": "577740",
    "end": "578660"
  },
  {
    "text": "why does this matter okay it it it it it",
    "start": "578660",
    "end": "582180"
  },
  {
    "text": "it may matter just for Aesthetics but it",
    "start": "582180",
    "end": "584580"
  },
  {
    "text": "also has quite practical implications it",
    "start": "584580",
    "end": "586440"
  },
  {
    "text": "means that there's a lot less that we",
    "start": "586440",
    "end": "588300"
  },
  {
    "text": "need to learn because we can Leverage",
    "start": "588300",
    "end": "589620"
  },
  {
    "text": "What You've Already learned once you",
    "start": "589620",
    "end": "590820"
  },
  {
    "text": "learn these abstractions it's a huge",
    "start": "590820",
    "end": "592140"
  },
  {
    "text": "payoff because they come up over and",
    "start": "592140",
    "end": "593640"
  },
  {
    "text": "over and that's why",
    "start": "593640",
    "end": "595560"
  },
  {
    "text": "uh we have them because they came up",
    "start": "595560",
    "end": "597360"
  },
  {
    "text": "over and over in the last several",
    "start": "597360",
    "end": "598860"
  },
  {
    "text": "hundred years in mathematics",
    "start": "598860",
    "end": "602040"
  },
  {
    "text": "and then as I'll show you we get",
    "start": "602040",
    "end": "603420"
  },
  {
    "text": "specifications for free and to me that's",
    "start": "603420",
    "end": "605339"
  },
  {
    "text": "a huge payoff and their law abiding",
    "start": "605339",
    "end": "607620"
  },
  {
    "text": "necessarily",
    "start": "607620",
    "end": "609320"
  },
  {
    "text": "so the first observation is is to notice",
    "start": "609320",
    "end": "612120"
  },
  {
    "text": "that that the meaning some in this",
    "start": "612120",
    "end": "614040"
  },
  {
    "text": "example the meaning of a behavior is a",
    "start": "614040",
    "end": "615720"
  },
  {
    "text": "function from time so behavior of a its",
    "start": "615720",
    "end": "618660"
  },
  {
    "text": "meaning is function from time to a so a",
    "start": "618660",
    "end": "621480"
  },
  {
    "text": "a is a type parameter here",
    "start": "621480",
    "end": "624000"
  },
  {
    "text": "now if we look at the meaning instead of",
    "start": "624000",
    "end": "626040"
  },
  {
    "text": "the behavior so behavior is this kind of",
    "start": "626040",
    "end": "628080"
  },
  {
    "text": "new mysterious thing that we're we're in",
    "start": "628080",
    "end": "630240"
  },
  {
    "text": "the process of Designing",
    "start": "630240",
    "end": "632300"
  },
  {
    "text": "once we know its meaning then we can ask",
    "start": "632300",
    "end": "634500"
  },
  {
    "text": "questions about it instead and then we",
    "start": "634500",
    "end": "636420"
  },
  {
    "text": "can transfer what we've what we",
    "start": "636420",
    "end": "637980"
  },
  {
    "text": "understand about its meaning back to the",
    "start": "637980",
    "end": "640019"
  },
  {
    "text": "uh the type we're defining",
    "start": "640019",
    "end": "642720"
  },
  {
    "text": "so this may look funny it even looks",
    "start": "642720",
    "end": "645540"
  },
  {
    "text": "funny to me and I've been programming",
    "start": "645540",
    "end": "646560"
  },
  {
    "text": "Haskell for a long time but if a",
    "start": "646560",
    "end": "649500"
  },
  {
    "text": "function from uh let's say from Z to A",
    "start": "649500",
    "end": "653820"
  },
  {
    "text": "so the domain is z the range is a so",
    "start": "653820",
    "end": "655920"
  },
  {
    "text": "function from Z to A uh if you take off",
    "start": "655920",
    "end": "659279"
  },
  {
    "text": "the A and just have function from Z",
    "start": "659279",
    "end": "661620"
  },
  {
    "text": "it's missing a type so in other words",
    "start": "661620",
    "end": "663660"
  },
  {
    "text": "it's a parameterized type so function",
    "start": "663660",
    "end": "666060"
  },
  {
    "text": "from Z",
    "start": "666060",
    "end": "667200"
  },
  {
    "text": "is the kind of thing the kind of thing",
    "start": "667200",
    "end": "670200"
  },
  {
    "text": "that might be a functor applicative",
    "start": "670200",
    "end": "673079"
  },
  {
    "text": "monad foldable traversable",
    "start": "673079",
    "end": "675600"
  },
  {
    "text": "okay",
    "start": "675600",
    "end": "677160"
  },
  {
    "text": "it's and so we can ask the question is",
    "start": "677160",
    "end": "679560"
  },
  {
    "text": "function from z a functor",
    "start": "679560",
    "end": "681839"
  },
  {
    "text": "and the answer is yes and I'll show you",
    "start": "681839",
    "end": "683640"
  },
  {
    "text": "another slide or two what the instances",
    "start": "683640",
    "end": "685860"
  },
  {
    "text": "are and similarly whoops similarly",
    "start": "685860",
    "end": "690180"
  },
  {
    "text": "happen",
    "start": "690180",
    "end": "691320"
  },
  {
    "text": "uh it's also an applicative",
    "start": "691320",
    "end": "694440"
  },
  {
    "text": "and then oh I keep hitting the wrong",
    "start": "694440",
    "end": "696480"
  },
  {
    "text": "button here back",
    "start": "696480",
    "end": "698519"
  },
  {
    "text": "okay uh and then similarly we can ask",
    "start": "698519",
    "end": "701519"
  },
  {
    "text": "the question about what is it a monoid",
    "start": "701519",
    "end": "702899"
  },
  {
    "text": "function from Z to A so here monoi just",
    "start": "702899",
    "end": "705420"
  },
  {
    "text": "wants an actual type not not a",
    "start": "705420",
    "end": "706980"
  },
  {
    "text": "parameterized type not a type function",
    "start": "706980",
    "end": "709440"
  },
  {
    "text": "so is this guy a monoid well yes it is",
    "start": "709440",
    "end": "711360"
  },
  {
    "text": "if a is a monoid is this guy a number",
    "start": "711360",
    "end": "715440"
  },
  {
    "text": "functions from Z to A a number and the",
    "start": "715440",
    "end": "718560"
  },
  {
    "text": "answer is yes if a is a number now that",
    "start": "718560",
    "end": "721260"
  },
  {
    "text": "may surprise you but it's quite useful",
    "start": "721260",
    "end": "724980"
  },
  {
    "text": "so this information which we didn't",
    "start": "724980",
    "end": "728399"
  },
  {
    "text": "invent okay I want to point out so we're",
    "start": "728399",
    "end": "731760"
  },
  {
    "text": "inventing the idea of behavior and",
    "start": "731760",
    "end": "733260"
  },
  {
    "text": "prevent the idea of events but we didn't",
    "start": "733260",
    "end": "735600"
  },
  {
    "text": "admit the idea of notion of functions",
    "start": "735600",
    "end": "738060"
  },
  {
    "text": "that notion has been around for quite a",
    "start": "738060",
    "end": "739500"
  },
  {
    "text": "long time and there's a lot we know",
    "start": "739500",
    "end": "740640"
  },
  {
    "text": "about it why because it's so useful it's",
    "start": "740640",
    "end": "742980"
  },
  {
    "text": "been applied to so many places there's",
    "start": "742980",
    "end": "744360"
  },
  {
    "text": "been a lot of exploration",
    "start": "744360",
    "end": "746100"
  },
  {
    "text": "so this I did it again",
    "start": "746100",
    "end": "749040"
  },
  {
    "text": "okay",
    "start": "749040",
    "end": "751639"
  },
  {
    "text": "yeah yeah there's something that's uh",
    "start": "753779",
    "end": "755579"
  },
  {
    "text": "crosswired in my brain about these",
    "start": "755579",
    "end": "757260"
  },
  {
    "text": "buttons here there we go",
    "start": "757260",
    "end": "759720"
  },
  {
    "text": "okay so we didn't have to invent we got",
    "start": "759720",
    "end": "762899"
  },
  {
    "text": "this information for free and and what I",
    "start": "762899",
    "end": "765480"
  },
  {
    "text": "mean by for free is the community",
    "start": "765480",
    "end": "766560"
  },
  {
    "text": "provided it for us they paid for it",
    "start": "766560",
    "end": "769320"
  },
  {
    "text": "all right so now",
    "start": "769320",
    "end": "772019"
  },
  {
    "text": "what do we do with this information",
    "start": "772019",
    "end": "774480"
  },
  {
    "text": "and what I'm saying up here is is that",
    "start": "774480",
    "end": "777360"
  },
  {
    "text": "what we know about functions in other",
    "start": "777360",
    "end": "780180"
  },
  {
    "text": "words the denotation the semantics will",
    "start": "780180",
    "end": "782579"
  },
  {
    "text": "tell us that it translates directly into",
    "start": "782579",
    "end": "785339"
  },
  {
    "text": "into information about the thing that",
    "start": "785339",
    "end": "787260"
  },
  {
    "text": "we're in the process of inventing about",
    "start": "787260",
    "end": "788639"
  },
  {
    "text": "behaviors",
    "start": "788639",
    "end": "790200"
  },
  {
    "text": "and it no I don't think I did that but I",
    "start": "790200",
    "end": "793680"
  },
  {
    "text": "suppose",
    "start": "793680",
    "end": "794339"
  },
  {
    "text": "I suppose maybe I did",
    "start": "794339",
    "end": "796320"
  },
  {
    "text": "okay I'll just be careful how long I",
    "start": "796320",
    "end": "798480"
  },
  {
    "text": "hold the buttons okay so",
    "start": "798480",
    "end": "801120"
  },
  {
    "text": "um so the the",
    "start": "801120",
    "end": "803760"
  },
  {
    "text": "um what we're trying to describe what",
    "start": "803760",
    "end": "805800"
  },
  {
    "text": "what what's sort of coming out of this",
    "start": "805800",
    "end": "807180"
  },
  {
    "text": "uh design process follows from the",
    "start": "807180",
    "end": "810420"
  },
  {
    "text": "semantics in what I'm going to call",
    "start": "810420",
    "end": "811680"
  },
  {
    "text": "precise analogy and I'll make that",
    "start": "811680",
    "end": "813959"
  },
  {
    "text": "notion more precise there we go and",
    "start": "813959",
    "end": "816420"
  },
  {
    "text": "something called homomorphisms and this",
    "start": "816420",
    "end": "818279"
  },
  {
    "text": "is hopefully the only scary word I'll",
    "start": "818279",
    "end": "819600"
  },
  {
    "text": "use in this talk",
    "start": "819600",
    "end": "821100"
  },
  {
    "text": "and homomorphism is something that's",
    "start": "821100",
    "end": "822540"
  },
  {
    "text": "come up over and over in algebra is",
    "start": "822540",
    "end": "824160"
  },
  {
    "text": "trying to be very value very a powerful",
    "start": "824160",
    "end": "826440"
  },
  {
    "text": "notion and I'm going to show you exactly",
    "start": "826440",
    "end": "828779"
  },
  {
    "text": "what it means it means that it's kind of",
    "start": "828779",
    "end": "830519"
  },
  {
    "text": "structure preserving that's what",
    "start": "830519",
    "end": "831839"
  },
  {
    "text": "homomorphism means it means the same",
    "start": "831839",
    "end": "833700"
  },
  {
    "text": "shape",
    "start": "833700",
    "end": "834779"
  },
  {
    "text": "what the word means and uh and there are",
    "start": "834779",
    "end": "837839"
  },
  {
    "text": "several examples of it and this is the",
    "start": "837839",
    "end": "839579"
  },
  {
    "text": "one for monoid so monoid has two",
    "start": "839579",
    "end": "841380"
  },
  {
    "text": "operations it has the empty and it has",
    "start": "841380",
    "end": "843060"
  },
  {
    "text": "the combine",
    "start": "843060",
    "end": "844740"
  },
  {
    "text": "and so what so a function H is a monoid",
    "start": "844740",
    "end": "847920"
  },
  {
    "text": "homomorphism",
    "start": "847920",
    "end": "849660"
  },
  {
    "text": "if and only if these two properties hold",
    "start": "849660",
    "end": "852120"
  },
  {
    "text": "and one of them says that uh is that H",
    "start": "852120",
    "end": "854579"
  },
  {
    "text": "maps The Empty value to the empty value",
    "start": "854579",
    "end": "856800"
  },
  {
    "text": "and H Maps the combination to the",
    "start": "856800",
    "end": "859620"
  },
  {
    "text": "combination of the H's so h of the",
    "start": "859620",
    "end": "861480"
  },
  {
    "text": "combination is a combination of the H's",
    "start": "861480",
    "end": "864480"
  },
  {
    "text": "that's exactly what it means to be for H",
    "start": "864480",
    "end": "866880"
  },
  {
    "text": "to be a mono homomorphism",
    "start": "866880",
    "end": "869459"
  },
  {
    "text": "now here are some examples",
    "start": "869459",
    "end": "872519"
  },
  {
    "text": "if you have two lists",
    "start": "872519",
    "end": "874860"
  },
  {
    "text": "uh if you have a if you have a list you",
    "start": "874860",
    "end": "877440"
  },
  {
    "text": "want to be able to take the length of it",
    "start": "877440",
    "end": "878880"
  },
  {
    "text": "okay so we've got lists and we have a",
    "start": "878880",
    "end": "880199"
  },
  {
    "text": "function length now",
    "start": "880199",
    "end": "882959"
  },
  {
    "text": "um there's an interesting property about",
    "start": "882959",
    "end": "884699"
  },
  {
    "text": "the length function which is that if you",
    "start": "884699",
    "end": "886920"
  },
  {
    "text": "if you take the length of two lists okay",
    "start": "886920",
    "end": "889800"
  },
  {
    "text": "so you've got two lists you take each of",
    "start": "889800",
    "end": "891300"
  },
  {
    "text": "their length and you add them up",
    "start": "891300",
    "end": "893579"
  },
  {
    "text": "you get the same result as if you had",
    "start": "893579",
    "end": "895139"
  },
  {
    "text": "concatenated the list and then taken the",
    "start": "895139",
    "end": "897000"
  },
  {
    "text": "link",
    "start": "897000",
    "end": "899120"
  },
  {
    "text": "so the length link function Maps lists",
    "start": "901920",
    "end": "904980"
  },
  {
    "text": "to integers and integers form a monoid",
    "start": "904980",
    "end": "908579"
  },
  {
    "text": "well in more than one way one of those",
    "start": "908579",
    "end": "911220"
  },
  {
    "text": "ways is addition",
    "start": "911220",
    "end": "913620"
  },
  {
    "text": "so and and lists are a monoid or the",
    "start": "913620",
    "end": "916800"
  },
  {
    "text": "combining operation is append so another",
    "start": "916800",
    "end": "919019"
  },
  {
    "text": "way to say that this the length of an",
    "start": "919019",
    "end": "922019"
  },
  {
    "text": "append is the sum of the lengths",
    "start": "922019",
    "end": "925019"
  },
  {
    "text": "is to say that the length of the monoid",
    "start": "925019",
    "end": "929339"
  },
  {
    "text": "combination is the mono combination of",
    "start": "929339",
    "end": "931620"
  },
  {
    "text": "the lengths okay it's two different",
    "start": "931620",
    "end": "933660"
  },
  {
    "text": "monoid operations but it's the same",
    "start": "933660",
    "end": "935579"
  },
  {
    "text": "abstraction and that's what's going to",
    "start": "935579",
    "end": "937079"
  },
  {
    "text": "happen over and over that's the pattern",
    "start": "937079",
    "end": "939480"
  },
  {
    "text": "here now the technical thing which is uh",
    "start": "939480",
    "end": "943440"
  },
  {
    "text": "and this is a Haskell thing not a math",
    "start": "943440",
    "end": "945060"
  },
  {
    "text": "thing that we only have one kind of",
    "start": "945060",
    "end": "947339"
  },
  {
    "text": "class instance per type we can't have",
    "start": "947339",
    "end": "949500"
  },
  {
    "text": "two different integer monoids so there's",
    "start": "949500",
    "end": "952680"
  },
  {
    "text": "just a little new type wrapper called",
    "start": "952680",
    "end": "954180"
  },
  {
    "text": "sum that says there's actually no",
    "start": "954180",
    "end": "956220"
  },
  {
    "text": "representation at runtime it just is a",
    "start": "956220",
    "end": "958699"
  },
  {
    "text": "statically in the type system we know",
    "start": "958699",
    "end": "960660"
  },
  {
    "text": "which of the monoids we're talking about",
    "start": "960660",
    "end": "963540"
  },
  {
    "text": "so another example is that the log of a",
    "start": "963540",
    "end": "966420"
  },
  {
    "text": "product is the sum of the logs okay it's",
    "start": "966420",
    "end": "969000"
  },
  {
    "text": "a logarithm that's the property that's",
    "start": "969000",
    "end": "970920"
  },
  {
    "text": "another homomorphism property",
    "start": "970920",
    "end": "973680"
  },
  {
    "text": "and I've get so I've given you two",
    "start": "973680",
    "end": "975300"
  },
  {
    "text": "examples of the of this homomorphism",
    "start": "975300",
    "end": "977699"
  },
  {
    "text": "property but there's also this one which",
    "start": "977699",
    "end": "979800"
  },
  {
    "text": "is the length of the empty list is zero",
    "start": "979800",
    "end": "982560"
  },
  {
    "text": "okay and the log of one",
    "start": "982560",
    "end": "984600"
  },
  {
    "text": "is zero",
    "start": "984600",
    "end": "986940"
  },
  {
    "text": "so those are the examples of monody of",
    "start": "986940",
    "end": "990120"
  },
  {
    "text": "monoid homomorphisms",
    "start": "990120",
    "end": "991740"
  },
  {
    "text": "but everything",
    "start": "991740",
    "end": "993540"
  },
  {
    "text": "algebraic abstraction or house we call",
    "start": "993540",
    "end": "995639"
  },
  {
    "text": "them type classes every one of these",
    "start": "995639",
    "end": "997019"
  },
  {
    "text": "abstractions come with its own",
    "start": "997019",
    "end": "998899"
  },
  {
    "text": "homomorphism property",
    "start": "998899",
    "end": "1001759"
  },
  {
    "text": "so for functor the operation the functor",
    "start": "1001759",
    "end": "1004579"
  },
  {
    "text": "gives you is fmap and to say something's",
    "start": "1004579",
    "end": "1006860"
  },
  {
    "text": "a functor homomorphism or I'll just say",
    "start": "1006860",
    "end": "1009139"
  },
  {
    "text": "a phantomorphism sometimes is that H so",
    "start": "1009139",
    "end": "1012079"
  },
  {
    "text": "H is a functomorphism if and only if h",
    "start": "1012079",
    "end": "1014959"
  },
  {
    "text": "of f map is f map of H",
    "start": "1014959",
    "end": "1019000"
  },
  {
    "text": "so I can I can take fmap and apply it",
    "start": "1019100",
    "end": "1021560"
  },
  {
    "text": "before or after H and I get exactly the",
    "start": "1021560",
    "end": "1023360"
  },
  {
    "text": "same result",
    "start": "1023360",
    "end": "1024319"
  },
  {
    "text": "so that's what it means to be a functor",
    "start": "1024319",
    "end": "1025640"
  },
  {
    "text": "homomorphism so you can see what's",
    "start": "1025640",
    "end": "1026900"
  },
  {
    "text": "happening is H is getting kind of pushed",
    "start": "1026900",
    "end": "1028938"
  },
  {
    "text": "down into the internal structure one",
    "start": "1028939",
    "end": "1030678"
  },
  {
    "text": "step at a time the internals the the",
    "start": "1030679",
    "end": "1032540"
  },
  {
    "text": "then the structure kind of comes in the",
    "start": "1032540",
    "end": "1034040"
  },
  {
    "text": "outside",
    "start": "1034040",
    "end": "1034760"
  },
  {
    "text": "so I know the way it says it's like a",
    "start": "1034760",
    "end": "1036380"
  },
  {
    "text": "distributive property",
    "start": "1036380",
    "end": "1038058"
  },
  {
    "text": "and for applicative we have two",
    "start": "1038059",
    "end": "1039558"
  },
  {
    "text": "operations so we have two homomorphism",
    "start": "1039559",
    "end": "1041360"
  },
  {
    "text": "properties I want to say h of pure of a",
    "start": "1041360",
    "end": "1043880"
  },
  {
    "text": "is pure of a",
    "start": "1043880",
    "end": "1045620"
  },
  {
    "text": "so I've distributed the H into all the",
    "start": "1045620",
    "end": "1047600"
  },
  {
    "text": "internal structure of which there is",
    "start": "1047600",
    "end": "1048919"
  },
  {
    "text": "none that's why the H disappeared here",
    "start": "1048919",
    "end": "1051919"
  },
  {
    "text": "okay here uh fmap right has one argument",
    "start": "1051919",
    "end": "1056900"
  },
  {
    "text": "that's of the same structure f-map of a",
    "start": "1056900",
    "end": "1059660"
  },
  {
    "text": "you know function over a list gives you",
    "start": "1059660",
    "end": "1061400"
  },
  {
    "text": "a list so it's got like one list where",
    "start": "1061400",
    "end": "1063200"
  },
  {
    "text": "I've mapped over behaviors of behavior",
    "start": "1063200",
    "end": "1065000"
  },
  {
    "text": "Aaron",
    "start": "1065000",
    "end": "1067720"
  },
  {
    "text": "uh no h um okay so the question is",
    "start": "1073820",
    "end": "1078940"
  },
  {
    "text": "what I'm saying is you give me any H",
    "start": "1079460",
    "end": "1081740"
  },
  {
    "text": "that has the right type okay it's got to",
    "start": "1081740",
    "end": "1083720"
  },
  {
    "text": "be a function",
    "start": "1083720",
    "end": "1086140"
  },
  {
    "text": "and I'm telling you what it means to be",
    "start": "1086539",
    "end": "1088580"
  },
  {
    "text": "a homomorphism or not if this property",
    "start": "1088580",
    "end": "1090799"
  },
  {
    "text": "holds",
    "start": "1090799",
    "end": "1092059"
  },
  {
    "text": "for all F and X's then H is a",
    "start": "1092059",
    "end": "1095179"
  },
  {
    "text": "homomorphism",
    "start": "1095179",
    "end": "1096440"
  },
  {
    "text": "okay thanks",
    "start": "1096440",
    "end": "1098660"
  },
  {
    "text": "and so applicator has two operations so",
    "start": "1098660",
    "end": "1100400"
  },
  {
    "text": "it has two laws one says that H goes",
    "start": "1100400",
    "end": "1102919"
  },
  {
    "text": "into the into all none right of of the",
    "start": "1102919",
    "end": "1106820"
  },
  {
    "text": "uh of the kind of sub-objects whereas",
    "start": "1106820",
    "end": "1109340"
  },
  {
    "text": "the applicative combining operation this",
    "start": "1109340",
    "end": "1111679"
  },
  {
    "text": "takes like If This Were listed would be",
    "start": "1111679",
    "end": "1113120"
  },
  {
    "text": "a list of function and a list of",
    "start": "1113120",
    "end": "1114140"
  },
  {
    "text": "arguments",
    "start": "1114140",
    "end": "1115820"
  },
  {
    "text": "okay or tree a function a tree of",
    "start": "1115820",
    "end": "1117559"
  },
  {
    "text": "arguments or a behavior of functions and",
    "start": "1117559",
    "end": "1119480"
  },
  {
    "text": "a behavior of arguments or an event to",
    "start": "1119480",
    "end": "1121340"
  },
  {
    "text": "functions in an event of arguments okay",
    "start": "1121340",
    "end": "1123280"
  },
  {
    "text": "so this says that what it means to be an",
    "start": "1123280",
    "end": "1125600"
  },
  {
    "text": "applicative morphism is that H",
    "start": "1125600",
    "end": "1127640"
  },
  {
    "text": "distributes over the applicative",
    "start": "1127640",
    "end": "1129080"
  },
  {
    "text": "structure so",
    "start": "1129080",
    "end": "1130520"
  },
  {
    "text": "so the combination so h of the",
    "start": "1130520",
    "end": "1132620"
  },
  {
    "text": "combination is the combination of the",
    "start": "1132620",
    "end": "1134000"
  },
  {
    "text": "H's",
    "start": "1134000",
    "end": "1136100"
  },
  {
    "text": "and then the monad homomorphism law well",
    "start": "1136100",
    "end": "1138559"
  },
  {
    "text": "this one for return which is the same as",
    "start": "1138559",
    "end": "1140000"
  },
  {
    "text": "pure because they're the same thing uh",
    "start": "1140000",
    "end": "1142280"
  },
  {
    "text": "and then and then the the Monet",
    "start": "1142280",
    "end": "1143660"
  },
  {
    "text": "homologism properties it's a little more",
    "start": "1143660",
    "end": "1145280"
  },
  {
    "text": "complicated because of the uh just",
    "start": "1145280",
    "end": "1146900"
  },
  {
    "text": "because of the types in here in here if",
    "start": "1146900",
    "end": "1148880"
  },
  {
    "text": "you look at the types nothing but this",
    "start": "1148880",
    "end": "1151580"
  },
  {
    "text": "law would type check I mean it's so you",
    "start": "1151580",
    "end": "1153799"
  },
  {
    "text": "could figure out what these laws are",
    "start": "1153799",
    "end": "1155000"
  },
  {
    "text": "going to have to be just by looking at",
    "start": "1155000",
    "end": "1156200"
  },
  {
    "text": "the types",
    "start": "1156200",
    "end": "1157940"
  },
  {
    "text": "so it's a very regular there's another",
    "start": "1157940",
    "end": "1159500"
  },
  {
    "text": "form if you like join instead of a bind",
    "start": "1159500",
    "end": "1161840"
  },
  {
    "text": "which I do",
    "start": "1161840",
    "end": "1163640"
  },
  {
    "text": "um you can also figure out what that has",
    "start": "1163640",
    "end": "1165080"
  },
  {
    "text": "to be from the types",
    "start": "1165080",
    "end": "1166880"
  },
  {
    "text": "okay so 10 52. alrighty so now I want to",
    "start": "1166880",
    "end": "1172400"
  },
  {
    "text": "give you this this this is the key",
    "start": "1172400",
    "end": "1174200"
  },
  {
    "text": "principle okay of of what I call",
    "start": "1174200",
    "end": "1176780"
  },
  {
    "text": "denotational design",
    "start": "1176780",
    "end": "1179000"
  },
  {
    "text": "which is",
    "start": "1179000",
    "end": "1180320"
  },
  {
    "text": "um our full our specification so",
    "start": "1180320",
    "end": "1182539"
  },
  {
    "text": "remember designing a library and the",
    "start": "1182539",
    "end": "1184460"
  },
  {
    "text": "most important thing in the library is",
    "start": "1184460",
    "end": "1185840"
  },
  {
    "text": "what do the types mean okay that that's",
    "start": "1185840",
    "end": "1187940"
  },
  {
    "text": "the most important statement to me what",
    "start": "1187940",
    "end": "1190039"
  },
  {
    "text": "does the type mean",
    "start": "1190039",
    "end": "1191360"
  },
  {
    "text": "in other words what's a simple precise",
    "start": "1191360",
    "end": "1192860"
  },
  {
    "text": "mathematical model",
    "start": "1192860",
    "end": "1194240"
  },
  {
    "text": "and then the next step is for each of",
    "start": "1194240",
    "end": "1196400"
  },
  {
    "text": "the Primitives in the API what does it",
    "start": "1196400",
    "end": "1198860"
  },
  {
    "text": "mean in terms of the meaning of the type",
    "start": "1198860",
    "end": "1201320"
  },
  {
    "text": "okay some story about that and so so",
    "start": "1201320",
    "end": "1204799"
  },
  {
    "text": "originally I get I came up with here's",
    "start": "1204799",
    "end": "1206720"
  },
  {
    "text": "the API and I thought about each one",
    "start": "1206720",
    "end": "1208039"
  },
  {
    "text": "individual and I said well here this is",
    "start": "1208039",
    "end": "1209480"
  },
  {
    "text": "the meaning of the operation",
    "start": "1209480",
    "end": "1211280"
  },
  {
    "text": "now I want to say is you can throw all",
    "start": "1211280",
    "end": "1212720"
  },
  {
    "text": "of that out",
    "start": "1212720",
    "end": "1214280"
  },
  {
    "text": "for every operation that comes from a",
    "start": "1214280",
    "end": "1216679"
  },
  {
    "text": "standard abstraction I don't need to",
    "start": "1216679",
    "end": "1218240"
  },
  {
    "text": "specify it because there's one General",
    "start": "1218240",
    "end": "1219919"
  },
  {
    "text": "way to specify them and that's to say",
    "start": "1219919",
    "end": "1222440"
  },
  {
    "text": "that the meaning functions of",
    "start": "1222440",
    "end": "1223820"
  },
  {
    "text": "homomorphism",
    "start": "1223820",
    "end": "1225679"
  },
  {
    "text": "okay for every type class that my type",
    "start": "1225679",
    "end": "1229700"
  },
  {
    "text": "inhabits so Behavior has what is it",
    "start": "1229700",
    "end": "1233299"
  },
  {
    "text": "functor applicative",
    "start": "1233299",
    "end": "1235520"
  },
  {
    "text": "it can have monad it's got numeric stuff",
    "start": "1235520",
    "end": "1239120"
  },
  {
    "text": "and it's got monoid for every one of",
    "start": "1239120",
    "end": "1241220"
  },
  {
    "text": "those I'm saying the meaning function is",
    "start": "1241220",
    "end": "1243020"
  },
  {
    "text": "a ma is a homomorphism for that",
    "start": "1243020",
    "end": "1246200"
  },
  {
    "text": "for that class",
    "start": "1246200",
    "end": "1248539"
  },
  {
    "text": "okay that's the only specification we",
    "start": "1248539",
    "end": "1250280"
  },
  {
    "text": "need and that to me is like the ideal",
    "start": "1250280",
    "end": "1252260"
  },
  {
    "text": "specification because when I say to you",
    "start": "1252260",
    "end": "1254960"
  },
  {
    "text": "think of a behavior as a function from",
    "start": "1254960",
    "end": "1256520"
  },
  {
    "text": "time",
    "start": "1256520",
    "end": "1257780"
  },
  {
    "text": "this is what I mean",
    "start": "1257780",
    "end": "1259580"
  },
  {
    "text": "if this is ever not true then I've hurt",
    "start": "1259580",
    "end": "1262160"
  },
  {
    "text": "you I've told you something I've given",
    "start": "1262160",
    "end": "1264260"
  },
  {
    "text": "you and understanding that you can",
    "start": "1264260",
    "end": "1265280"
  },
  {
    "text": "injure yourself with if you believe it",
    "start": "1265280",
    "end": "1268160"
  },
  {
    "text": "okay but if these homomorphism",
    "start": "1268160",
    "end": "1270020"
  },
  {
    "text": "properties are true it's saying exactly",
    "start": "1270020",
    "end": "1271820"
  },
  {
    "text": "that when I tell you think of it as a",
    "start": "1271820",
    "end": "1273320"
  },
  {
    "text": "function of time and if you use the",
    "start": "1273320",
    "end": "1275179"
  },
  {
    "text": "interface that's common between",
    "start": "1275179",
    "end": "1276620"
  },
  {
    "text": "functions of time",
    "start": "1276620",
    "end": "1278780"
  },
  {
    "text": "and my type",
    "start": "1278780",
    "end": "1280700"
  },
  {
    "text": "they behave equivalently someone said",
    "start": "1280700",
    "end": "1283400"
  },
  {
    "text": "think of it like it behaves like a",
    "start": "1283400",
    "end": "1285440"
  },
  {
    "text": "precise way of saying that is it's a",
    "start": "1285440",
    "end": "1286880"
  },
  {
    "text": "homomorphism",
    "start": "1286880",
    "end": "1289419"
  },
  {
    "text": "so if ever this principle fails I'm",
    "start": "1289880",
    "end": "1293299"
  },
  {
    "text": "doing a design I'm saying oh I see what",
    "start": "1293299",
    "end": "1295400"
  },
  {
    "text": "it's meaning is and it's a applicative",
    "start": "1295400",
    "end": "1297440"
  },
  {
    "text": "and I see what and then I want to say my",
    "start": "1297440",
    "end": "1299419"
  },
  {
    "text": "things in applicative and the",
    "start": "1299419",
    "end": "1300860"
  },
  {
    "text": "homomorphism doesn't hold that's a",
    "start": "1300860",
    "end": "1303320"
  },
  {
    "text": "design bug",
    "start": "1303320",
    "end": "1304940"
  },
  {
    "text": "that means I I uh I'm unclear I have to",
    "start": "1304940",
    "end": "1308780"
  },
  {
    "text": "figure out a better model",
    "start": "1308780",
    "end": "1310760"
  },
  {
    "text": "and when and getting alerted that very",
    "start": "1310760",
    "end": "1312740"
  },
  {
    "text": "early super helpful because it steers me",
    "start": "1312740",
    "end": "1315200"
  },
  {
    "text": "toward an elegant",
    "start": "1315200",
    "end": "1316820"
  },
  {
    "text": "uh predictable well-founded simple",
    "start": "1316820",
    "end": "1319159"
  },
  {
    "text": "precise design",
    "start": "1319159",
    "end": "1321880"
  },
  {
    "text": "so this is what it means so I'm saying",
    "start": "1322340",
    "end": "1325340"
  },
  {
    "text": "specification is that mu is a",
    "start": "1325340",
    "end": "1327799"
  },
  {
    "text": "homomorphism",
    "start": "1327799",
    "end": "1328940"
  },
  {
    "text": "so I'm really so this is more than one",
    "start": "1328940",
    "end": "1330799"
  },
  {
    "text": "statement it's a functor homomorphous",
    "start": "1330799",
    "end": "1332360"
  },
  {
    "text": "applicative morphism it's a mon",
    "start": "1332360",
    "end": "1333919"
  },
  {
    "text": "amorphism it's a monomorphism it's a",
    "start": "1333919",
    "end": "1336020"
  },
  {
    "text": "numborphism and so on so for example",
    "start": "1336020",
    "end": "1338720"
  },
  {
    "text": "this is I'm just repeating what I said",
    "start": "1338720",
    "end": "1341000"
  },
  {
    "text": "before but more specifically so now",
    "start": "1341000",
    "end": "1343100"
  },
  {
    "text": "we're talking about mu being a",
    "start": "1343100",
    "end": "1345200"
  },
  {
    "text": "morphism",
    "start": "1345200",
    "end": "1346700"
  },
  {
    "text": "we will go that way",
    "start": "1346700",
    "end": "1348919"
  },
  {
    "text": "okay so I just want to meet the meaning",
    "start": "1348919",
    "end": "1350900"
  },
  {
    "text": "of fmap is f map of the meanings all I",
    "start": "1350900",
    "end": "1353600"
  },
  {
    "text": "did was take the general definition of",
    "start": "1353600",
    "end": "1354799"
  },
  {
    "text": "morphism where I said H now I'm saying",
    "start": "1354799",
    "end": "1356360"
  },
  {
    "text": "it specifically for meanings so this is",
    "start": "1356360",
    "end": "1358940"
  },
  {
    "text": "the specification",
    "start": "1358940",
    "end": "1360559"
  },
  {
    "text": "now",
    "start": "1360559",
    "end": "1362000"
  },
  {
    "text": "how does that play out",
    "start": "1362000",
    "end": "1364280"
  },
  {
    "text": "I I remarked yesterday that",
    "start": "1364280",
    "end": "1367520"
  },
  {
    "text": "um that the original denotation I gave",
    "start": "1367520",
    "end": "1369320"
  },
  {
    "text": "the original specifications for FRP is",
    "start": "1369320",
    "end": "1371360"
  },
  {
    "text": "exactly equivalent to this I didn't know",
    "start": "1371360",
    "end": "1373520"
  },
  {
    "text": "it at the time",
    "start": "1373520",
    "end": "1374659"
  },
  {
    "text": "so I came up I thought about it what",
    "start": "1374659",
    "end": "1376520"
  },
  {
    "text": "should it mean I came up with these",
    "start": "1376520",
    "end": "1377720"
  },
  {
    "text": "definitions what I didn't know was those",
    "start": "1377720",
    "end": "1379159"
  },
  {
    "text": "definitions fall out for free from this",
    "start": "1379159",
    "end": "1381620"
  },
  {
    "text": "General pattern so it helps to know and",
    "start": "1381620",
    "end": "1384260"
  },
  {
    "text": "this is how this is exactly how I",
    "start": "1384260",
    "end": "1385520"
  },
  {
    "text": "discovered this principle is in the",
    "start": "1385520",
    "end": "1387620"
  },
  {
    "text": "intervening time between uh when I",
    "start": "1387620",
    "end": "1389600"
  },
  {
    "text": "invented FRP and when I wrote a kind of",
    "start": "1389600",
    "end": "1392659"
  },
  {
    "text": "modern version of it uh a paper in 2009",
    "start": "1392659",
    "end": "1396640"
  },
  {
    "text": "I gained quite a lot of familiarity with",
    "start": "1396640",
    "end": "1399919"
  },
  {
    "text": "the standard type classes and the",
    "start": "1399919",
    "end": "1401539"
  },
  {
    "text": "instances of those type classes for",
    "start": "1401539",
    "end": "1403700"
  },
  {
    "text": "common types pairs sums functions",
    "start": "1403700",
    "end": "1408620"
  },
  {
    "text": "that sort of thing",
    "start": "1408620",
    "end": "1410480"
  },
  {
    "text": "okay so I know that this is the monoid",
    "start": "1410480",
    "end": "1414620"
  },
  {
    "text": "instance for functions",
    "start": "1414620",
    "end": "1416299"
  },
  {
    "text": "the empty function is it's the function",
    "start": "1416299",
    "end": "1418700"
  },
  {
    "text": "of from Z to the empty value",
    "start": "1418700",
    "end": "1422480"
  },
  {
    "text": "so these empties on the left and right",
    "start": "1422480",
    "end": "1424159"
  },
  {
    "text": "are different empties the one on the",
    "start": "1424159",
    "end": "1425780"
  },
  {
    "text": "left is for functions is for function",
    "start": "1425780",
    "end": "1427820"
  },
  {
    "text": "from Z to A the one on the right is hey",
    "start": "1427820",
    "end": "1429740"
  },
  {
    "text": "is uh is for a",
    "start": "1429740",
    "end": "1432620"
  },
  {
    "text": "okay so the empty function is the",
    "start": "1432620",
    "end": "1435860"
  },
  {
    "text": "function that always gives you empty",
    "start": "1435860",
    "end": "1438200"
  },
  {
    "text": "the monoidal combination of two",
    "start": "1438200",
    "end": "1440120"
  },
  {
    "text": "functions is the function you give it Z",
    "start": "1440120",
    "end": "1441860"
  },
  {
    "text": "and you apply f and g both to Z and",
    "start": "1441860",
    "end": "1444200"
  },
  {
    "text": "combine them",
    "start": "1444200",
    "end": "1446740"
  },
  {
    "text": "so if you see on the right hand side",
    "start": "1446960",
    "end": "1448520"
  },
  {
    "text": "we're using Epsilon here we're using",
    "start": "1448520",
    "end": "1450919"
  },
  {
    "text": "empty and combine which are and on the",
    "start": "1450919",
    "end": "1452900"
  },
  {
    "text": "right left so the right hand side we're",
    "start": "1452900",
    "end": "1454280"
  },
  {
    "text": "using empty and combine for a the left",
    "start": "1454280",
    "end": "1456679"
  },
  {
    "text": "hand side we're defining empty and",
    "start": "1456679",
    "end": "1458360"
  },
  {
    "text": "combined for Z to A",
    "start": "1458360",
    "end": "1460880"
  },
  {
    "text": "this is a very common pattern we'll see",
    "start": "1460880",
    "end": "1463460"
  },
  {
    "text": "and then what does it mean to map a",
    "start": "1463460",
    "end": "1465500"
  },
  {
    "text": "function over another function does that",
    "start": "1465500",
    "end": "1467240"
  },
  {
    "text": "make any sense at all to map a function",
    "start": "1467240",
    "end": "1469700"
  },
  {
    "text": "over a function well if you write out",
    "start": "1469700",
    "end": "1471380"
  },
  {
    "text": "the types you'll see they can only be",
    "start": "1471380",
    "end": "1472940"
  },
  {
    "text": "one thing in its composition",
    "start": "1472940",
    "end": "1475580"
  },
  {
    "text": "so if you look in the standard Library",
    "start": "1475580",
    "end": "1476840"
  },
  {
    "text": "poke around the source code uh Haskell's",
    "start": "1476840",
    "end": "1479059"
  },
  {
    "text": "Prelude you'll see this definition",
    "start": "1479059",
    "end": "1482000"
  },
  {
    "text": "and then there's also definition for",
    "start": "1482000",
    "end": "1483559"
  },
  {
    "text": "applicative if I have two functions okay",
    "start": "1483559",
    "end": "1486679"
  },
  {
    "text": "well let me start simply pure a",
    "start": "1486679",
    "end": "1489919"
  },
  {
    "text": "what function is it going to be from Z",
    "start": "1489919",
    "end": "1492620"
  },
  {
    "text": "to A well there's really only one thing",
    "start": "1492620",
    "end": "1494659"
  },
  {
    "text": "it can be which is the constant function",
    "start": "1494659",
    "end": "1498580"
  },
  {
    "text": "and similarly if I have a function",
    "start": "1498980",
    "end": "1502640"
  },
  {
    "text": "from Z to a function from A to B",
    "start": "1502640",
    "end": "1506299"
  },
  {
    "text": "and if I have a function from Z to A",
    "start": "1506299",
    "end": "1509900"
  },
  {
    "text": "okay",
    "start": "1509900",
    "end": "1511400"
  },
  {
    "text": "I combine those into a function from Z",
    "start": "1511400",
    "end": "1513200"
  },
  {
    "text": "to B",
    "start": "1513200",
    "end": "1514340"
  },
  {
    "text": "and you play with the types there's only",
    "start": "1514340",
    "end": "1515780"
  },
  {
    "text": "one thing that's going to type check and",
    "start": "1515780",
    "end": "1517580"
  },
  {
    "text": "it's the right thing",
    "start": "1517580",
    "end": "1519919"
  },
  {
    "text": "and this is what it is",
    "start": "1519919",
    "end": "1521900"
  },
  {
    "text": "okay",
    "start": "1521900",
    "end": "1523960"
  },
  {
    "text": "so I don't know if you've heard them",
    "start": "1524059",
    "end": "1525980"
  },
  {
    "text": "before but a long time ago in the 40s",
    "start": "1525980",
    "end": "1529000"
  },
  {
    "text": "I think it was Haskell Curry developed",
    "start": "1529000",
    "end": "1531620"
  },
  {
    "text": "something called uh combinatorial",
    "start": "1531620",
    "end": "1534460"
  },
  {
    "text": "algebra what he called it it was another",
    "start": "1534460",
    "end": "1537320"
  },
  {
    "text": "approach to functional programming so",
    "start": "1537320",
    "end": "1539179"
  },
  {
    "text": "Church came with Lambda calculus and",
    "start": "1539179",
    "end": "1541340"
  },
  {
    "text": "some other folks including Haskell Curry",
    "start": "1541340",
    "end": "1543380"
  },
  {
    "text": "came up with a kind of a algebraic",
    "start": "1543380",
    "end": "1546020"
  },
  {
    "text": "building blocky way of defining",
    "start": "1546020",
    "end": "1548120"
  },
  {
    "text": "functions and one of them was called s",
    "start": "1548120",
    "end": "1551360"
  },
  {
    "text": "and that's exactly this guy and one was",
    "start": "1551360",
    "end": "1553159"
  },
  {
    "text": "called K and that's exactly that guy",
    "start": "1553159",
    "end": "1555980"
  },
  {
    "text": "so this is kind of lovely that it occurs",
    "start": "1555980",
    "end": "1558260"
  },
  {
    "text": "again",
    "start": "1558260",
    "end": "1559760"
  },
  {
    "text": "so now now we can put these two pieces",
    "start": "1559760",
    "end": "1562279"
  },
  {
    "text": "together if we know so um so we know",
    "start": "1562279",
    "end": "1565880"
  },
  {
    "text": "what we want the meaning of pure is pure",
    "start": "1565880",
    "end": "1567740"
  },
  {
    "text": "that's the homomorphism property and we",
    "start": "1567740",
    "end": "1569480"
  },
  {
    "text": "know pure is for functions",
    "start": "1569480",
    "end": "1571880"
  },
  {
    "text": "okay so this is behaviors this is",
    "start": "1571880",
    "end": "1574279"
  },
  {
    "text": "functions",
    "start": "1574279",
    "end": "1576020"
  },
  {
    "text": "and we know what this means for",
    "start": "1576020",
    "end": "1577400"
  },
  {
    "text": "functions it means Lambda ta so we've",
    "start": "1577400",
    "end": "1579260"
  },
  {
    "text": "just deduced it the meaning of puree has",
    "start": "1579260",
    "end": "1581000"
  },
  {
    "text": "to be Lambda ta",
    "start": "1581000",
    "end": "1583640"
  },
  {
    "text": "similarly for this is the other",
    "start": "1583640",
    "end": "1585440"
  },
  {
    "text": "applicative operation so this is the",
    "start": "1585440",
    "end": "1587779"
  },
  {
    "text": "homomorphism property which is our",
    "start": "1587779",
    "end": "1589220"
  },
  {
    "text": "specification and then but we know what",
    "start": "1589220",
    "end": "1591020"
  },
  {
    "text": "this is because we know it we know what",
    "start": "1591020",
    "end": "1592880"
  },
  {
    "text": "the applicative instance for functions",
    "start": "1592880",
    "end": "1594200"
  },
  {
    "text": "is it's this",
    "start": "1594200",
    "end": "1595700"
  },
  {
    "text": "okay and this is exactly what the the",
    "start": "1595700",
    "end": "1598760"
  },
  {
    "text": "denotation for the applicative instance",
    "start": "1598760",
    "end": "1600620"
  },
  {
    "text": "must be for behaviors so I didn't have",
    "start": "1600620",
    "end": "1603620"
  },
  {
    "text": "to invent it and that's very important",
    "start": "1603620",
    "end": "1605059"
  },
  {
    "text": "it's very important not to invent things",
    "start": "1605059",
    "end": "1607640"
  },
  {
    "text": "because",
    "start": "1607640",
    "end": "1608980"
  },
  {
    "text": "uh because I might be deluded I might",
    "start": "1608980",
    "end": "1612559"
  },
  {
    "text": "have you know some kind of special Focus",
    "start": "1612559",
    "end": "1613820"
  },
  {
    "text": "I might have a personal bias okay but if",
    "start": "1613820",
    "end": "1617539"
  },
  {
    "text": "mathematics if the universe is kind of",
    "start": "1617539",
    "end": "1619700"
  },
  {
    "text": "inevitably is telling me what it has to",
    "start": "1619700",
    "end": "1621320"
  },
  {
    "text": "be",
    "start": "1621320",
    "end": "1622039"
  },
  {
    "text": "then I know that's going to be a solid",
    "start": "1622039",
    "end": "1623480"
  },
  {
    "text": "design",
    "start": "1623480",
    "end": "1625658"
  },
  {
    "text": "and then it turns out and looks like",
    "start": "1626720",
    "end": "1628279"
  },
  {
    "text": "I've I didn't balance my time very well",
    "start": "1628279",
    "end": "1630679"
  },
  {
    "text": "here but we get laws for free",
    "start": "1630679",
    "end": "1633799"
  },
  {
    "text": "okay and what I mean is that if we have",
    "start": "1633799",
    "end": "1636320"
  },
  {
    "text": "the homomorphism properties over here",
    "start": "1636320",
    "end": "1639020"
  },
  {
    "text": "and if equality",
    "start": "1639020",
    "end": "1641480"
  },
  {
    "text": "on on my data type that I'm inventing is",
    "start": "1641480",
    "end": "1643760"
  },
  {
    "text": "semantic okay by which I mean things are",
    "start": "1643760",
    "end": "1646580"
  },
  {
    "text": "equal if and only if their meanings are",
    "start": "1646580",
    "end": "1647960"
  },
  {
    "text": "equal",
    "start": "1647960",
    "end": "1649159"
  },
  {
    "text": "if those two properties hold then the",
    "start": "1649159",
    "end": "1651380"
  },
  {
    "text": "laws must hold",
    "start": "1651380",
    "end": "1654159"
  },
  {
    "text": "and there's a simple proof it's just a",
    "start": "1654260",
    "end": "1655880"
  },
  {
    "text": "structural proof you just kind of push",
    "start": "1655880",
    "end": "1658039"
  },
  {
    "text": "so what I want to prove is this is for",
    "start": "1658039",
    "end": "1660380"
  },
  {
    "text": "instance I'm trying to prove this",
    "start": "1660380",
    "end": "1661340"
  },
  {
    "text": "identity property",
    "start": "1661340",
    "end": "1662720"
  },
  {
    "text": "and I want to prove that and semantics",
    "start": "1662720",
    "end": "1664700"
  },
  {
    "text": "is equal so I mean the meaning of the",
    "start": "1664700",
    "end": "1666320"
  },
  {
    "text": "left is the meaning of the right if I",
    "start": "1666320",
    "end": "1668360"
  },
  {
    "text": "just start use the homomorphism",
    "start": "1668360",
    "end": "1670039"
  },
  {
    "text": "properties to push the meanings into the",
    "start": "1670039",
    "end": "1672380"
  },
  {
    "text": "structure because that's what they're",
    "start": "1672380",
    "end": "1673340"
  },
  {
    "text": "about it turns out that I can then use",
    "start": "1673340",
    "end": "1675440"
  },
  {
    "text": "the uh the law for the meaning",
    "start": "1675440",
    "end": "1679340"
  },
  {
    "text": "so the the fact that the laws hold for",
    "start": "1679340",
    "end": "1681980"
  },
  {
    "text": "my meanings",
    "start": "1681980",
    "end": "1683419"
  },
  {
    "text": "combined with I'm using a a homomorphic",
    "start": "1683419",
    "end": "1687140"
  },
  {
    "text": "meaning function",
    "start": "1687140",
    "end": "1688340"
  },
  {
    "text": "and with semantic equality those three",
    "start": "1688340",
    "end": "1690380"
  },
  {
    "text": "properties and they're all really",
    "start": "1690380",
    "end": "1691520"
  },
  {
    "text": "important properties in themselves they",
    "start": "1691520",
    "end": "1694039"
  },
  {
    "text": "imply that my laws have to hold",
    "start": "1694039",
    "end": "1696260"
  },
  {
    "text": "yes that's also a very good sign",
    "start": "1696260",
    "end": "1698659"
  },
  {
    "text": "okay and then there's a story for events",
    "start": "1698659",
    "end": "1700640"
  },
  {
    "text": "which I'll skip over here",
    "start": "1700640",
    "end": "1702559"
  },
  {
    "text": "all right so here's the conclusion",
    "start": "1702559",
    "end": "1704620"
  },
  {
    "text": "as I mention FRP is really about two",
    "start": "1704620",
    "end": "1707120"
  },
  {
    "text": "things",
    "start": "1707120",
    "end": "1708080"
  },
  {
    "text": "having a precise simple denotation which",
    "start": "1708080",
    "end": "1710299"
  },
  {
    "text": "I encourage you to do every time you do",
    "start": "1710299",
    "end": "1712100"
  },
  {
    "text": "library design",
    "start": "1712100",
    "end": "1713240"
  },
  {
    "text": "and then in particular a continuous time",
    "start": "1713240",
    "end": "1715760"
  },
  {
    "text": "as the germ idea",
    "start": "1715760",
    "end": "1717440"
  },
  {
    "text": "and then I've talked about uh briefly",
    "start": "1717440",
    "end": "1719360"
  },
  {
    "text": "here is that it's this idea of using",
    "start": "1719360",
    "end": "1721340"
  },
  {
    "text": "semantic homomorphisms as a",
    "start": "1721340",
    "end": "1723140"
  },
  {
    "text": "specification that just means that the",
    "start": "1723140",
    "end": "1724760"
  },
  {
    "text": "the meaning function uh distributes over",
    "start": "1724760",
    "end": "1727520"
  },
  {
    "text": "the kind of uh the API structure of",
    "start": "1727520",
    "end": "1730220"
  },
  {
    "text": "these abstractions so",
    "start": "1730220",
    "end": "1732679"
  },
  {
    "text": "and you get very nice properties the",
    "start": "1732679",
    "end": "1734900"
  },
  {
    "text": "semantics invents the API or it suggests",
    "start": "1734900",
    "end": "1737299"
  },
  {
    "text": "one for me",
    "start": "1737299",
    "end": "1738500"
  },
  {
    "text": "okay it tells me exactly what the API",
    "start": "1738500",
    "end": "1740659"
  },
  {
    "text": "has to mean so I don't get to choose",
    "start": "1740659",
    "end": "1742700"
  },
  {
    "text": "that which is a good thing",
    "start": "1742700",
    "end": "1744260"
  },
  {
    "text": "and the laws hold for free they hold",
    "start": "1744260",
    "end": "1746600"
  },
  {
    "text": "inevitably you can go prove them if you",
    "start": "1746600",
    "end": "1748400"
  },
  {
    "text": "like for fun but they'll always hold",
    "start": "1748400",
    "end": "1751279"
  },
  {
    "text": "and then I want to make this this sort",
    "start": "1751279",
    "end": "1752840"
  },
  {
    "text": "of strong claim that this this",
    "start": "1752840",
    "end": "1754820"
  },
  {
    "text": "methodology guarantees you will not have",
    "start": "1754820",
    "end": "1757100"
  },
  {
    "text": "abstraction leaks",
    "start": "1757100",
    "end": "1759940"
  },
  {
    "text": "if we apply it successfully",
    "start": "1760039",
    "end": "1762380"
  },
  {
    "text": "but it's also very helpful if you",
    "start": "1762380",
    "end": "1763760"
  },
  {
    "text": "applied unsuccessfully if I apply it and",
    "start": "1763760",
    "end": "1766100"
  },
  {
    "text": "find out that the homomorphic properties",
    "start": "1766100",
    "end": "1767480"
  },
  {
    "text": "don't hold then it means I have an",
    "start": "1767480",
    "end": "1768799"
  },
  {
    "text": "abstraction leak and I want to redesign",
    "start": "1768799",
    "end": "1770899"
  },
  {
    "text": "okay so that's it",
    "start": "1770899",
    "end": "1773600"
  },
  {
    "text": "oh and then uh my longer Workshop this",
    "start": "1773600",
    "end": "1777500"
  },
  {
    "text": "afternoon is going to go into several",
    "start": "1777500",
    "end": "1778760"
  },
  {
    "text": "more examples at a more leisurely pace",
    "start": "1778760",
    "end": "1781100"
  },
  {
    "text": "so if this was a bit fast for you but",
    "start": "1781100",
    "end": "1783080"
  },
  {
    "text": "you're intrigued I invite you back",
    "start": "1783080",
    "end": "1785480"
  },
  {
    "text": "go at a slower pace and have much more",
    "start": "1785480",
    "end": "1787340"
  },
  {
    "text": "time for interaction",
    "start": "1787340",
    "end": "1790059"
  },
  {
    "text": "thank you",
    "start": "1790159",
    "end": "1792760"
  }
]