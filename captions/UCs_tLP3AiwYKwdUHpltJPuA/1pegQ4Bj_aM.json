[
  {
    "start": "0",
    "end": "67000"
  },
  {
    "text": "[Music] welcome to this talk on spring security",
    "start": "6990",
    "end": "13490"
  },
  {
    "text": "actually it was the the go to conference who decided that on this unhackable track they really wanted to have a talk",
    "start": "13490",
    "end": "21300"
  },
  {
    "text": "on spring security and they asked me to deliver it so when they did obviously I",
    "start": "21300",
    "end": "27119"
  },
  {
    "text": "said yes because I'm a sucker for these sort of things but I was also wondering",
    "start": "27119",
    "end": "32279"
  },
  {
    "text": "this is this is not a Java conference right this is a general-purpose developer conference let alone a spring",
    "start": "32279",
    "end": "38910"
  },
  {
    "text": "conference so what what can I do to actually create a presentation or a talk",
    "start": "38910",
    "end": "44550"
  },
  {
    "text": "on spring security I will be interesting for more than just people already in that ecosystem in that space so then I",
    "start": "44550",
    "end": "51180"
  },
  {
    "text": "thought I I know it I'm gonna make videos of myself half-naked jumping off of cliffs I'm gonna present that but",
    "start": "51180",
    "end": "58379"
  },
  {
    "text": "then I realize no I'm not in the agile track I cannot actually do that you can only do that if you're speaking on that job so what I decided to do instead is",
    "start": "58379",
    "end": "66390"
  },
  {
    "text": "I'm gonna focus on applying this one framework spring security to build",
    "start": "66390",
    "end": "72570"
  },
  {
    "text": "layers of defense in your application and hopefully even if you're here and you don't really have a Java or spring",
    "start": "72570",
    "end": "78930"
  },
  {
    "text": "background you will be able to still take away several important things and",
    "start": "78930",
    "end": "84330"
  },
  {
    "text": "lessons learned in the things that you should consider when actually securing your application however if you are in",
    "start": "84330",
    "end": "91439"
  },
  {
    "text": "fact working in this space of doing Java spring then obviously you should be able to learn a thing or two as well so my",
    "start": "91439",
    "end": "98520"
  },
  {
    "start": "97000",
    "end": "125000"
  },
  {
    "text": "name is your sky brush you can tweet using this handle I work to try for usually as a hands-on architect I'm also",
    "start": "98520",
    "end": "104759"
  },
  {
    "text": "doing some spring trainings here and there and especially in security talk right it's it's important to establish a",
    "start": "104759",
    "end": "112229"
  },
  {
    "text": "sense of authority so that you can all trust Who I am so why am I actually the guy that should be speaking on spring",
    "start": "112229",
    "end": "119430"
  },
  {
    "text": "security it turns out actually have an author tag in one of the related code bases so you can trust me so the",
    "start": "119430",
    "end": "127350"
  },
  {
    "start": "125000",
    "end": "195000"
  },
  {
    "text": "interesting thing about this conference and this track is unhackable track is that security is such a broad topic",
    "start": "127350",
    "end": "133740"
  },
  {
    "text": "and if you have attended any of the talks in this track already or even if",
    "start": "133740",
    "end": "139320"
  },
  {
    "text": "you have just visited the keynote that should be quite obvious what you see there is that there is the actual",
    "start": "139320",
    "end": "145230"
  },
  {
    "text": "physical security right preventing people from accessing actually messing around with your hardware and accessing",
    "start": "145230",
    "end": "150330"
  },
  {
    "text": "it there is a network stack making sure that things are properly secured there",
    "start": "150330",
    "end": "155880"
  },
  {
    "text": "that you have firewalls in place etc etc there is the operating system level and nowadays it isn't even clear really what",
    "start": "155880",
    "end": "162330"
  },
  {
    "text": "the operating system level is right because that could mean a hypervisor it could mean a minimal host for your",
    "start": "162330",
    "end": "168690"
  },
  {
    "text": "docker it could be your daughter containers themselves so a room you are actually did a talk which was mostly",
    "start": "168690",
    "end": "175350"
  },
  {
    "text": "concerned with that level today already it's the middleware it's the applications and again it's not even",
    "start": "175350",
    "end": "181620"
  },
  {
    "text": "clear anymore nowadays what is middleware and what are applications because all of those things are fluid and merging into one and of course there",
    "start": "181620",
    "end": "188190"
  },
  {
    "text": "is the whole idea of making sure that you have policies governing certain changes and allowing for security in",
    "start": "188190",
    "end": "194610"
  },
  {
    "text": "that way so I want to make it very clear that this talk will focus on how to apply security just at the application",
    "start": "194610",
    "end": "202710"
  },
  {
    "start": "195000",
    "end": "217000"
  },
  {
    "text": "level which i think is a nice follow up on what we've seen so far basically what we're doing is we're going up is stack",
    "start": "202710",
    "end": "208080"
  },
  {
    "text": "from from hardware to middleware to secure coding practices in in Kathleen's",
    "start": "208080",
    "end": "213720"
  },
  {
    "text": "talk to actually applying security to your applications here because if you are thinking about like a typical web",
    "start": "213720",
    "end": "220080"
  },
  {
    "start": "217000",
    "end": "303000"
  },
  {
    "text": "application is actually quite a lot of different layers in your application so to speak that needs some form of",
    "start": "220080",
    "end": "226860"
  },
  {
    "text": "protection there is the browser to begin with which if you think about what Kevin",
    "start": "226860",
    "end": "233250"
  },
  {
    "text": "I just said in terms of post alles Lal I can be a liberal in what you in what you accept well the browser is an excellent",
    "start": "233250",
    "end": "240120"
  },
  {
    "text": "example of how that can lead to all sort of known security issues so you probably",
    "start": "240120",
    "end": "245250"
  },
  {
    "text": "need some protection in that space then there is the the application itself right you might want to secure things at",
    "start": "245250",
    "end": "251520"
  },
  {
    "text": "a URL level saying certain sup URLs can only be accessed by a certain type of people you might have multi-tenancy",
    "start": "251520",
    "end": "258150"
  },
  {
    "text": "requirements you might have secured a security requirements at the method level you might have security access",
    "start": "258150",
    "end": "263810"
  },
  {
    "text": "requirements at the data level right so there's many different layers to you need to provide protection for",
    "start": "263810",
    "end": "269450"
  },
  {
    "text": "sometimes these things are really not directly related right how I actually",
    "start": "269450",
    "end": "274740"
  },
  {
    "text": "tell my browser that would really prefer this application to only use HTTPS and",
    "start": "274740",
    "end": "280500"
  },
  {
    "text": "not be embedded in like a frame of some other application it's very different than what I'm actually going to do to",
    "start": "280500",
    "end": "286770"
  },
  {
    "text": "secure someone from calling a method in my application if it doesn't have the right role but in many cases a lot of",
    "start": "286770",
    "end": "294660"
  },
  {
    "text": "those concerns and a lot of those policies that you will implement are actually edited they will reinforce each",
    "start": "294660",
    "end": "302250"
  },
  {
    "text": "other and that's important because the idea that you're having multiple things",
    "start": "302250",
    "end": "307470"
  },
  {
    "start": "303000",
    "end": "381000"
  },
  {
    "text": "adding on top of each other also implies that there might be actually some redundancy in there and typically when",
    "start": "307470",
    "end": "312900"
  },
  {
    "text": "we think about coding we think that's a bad thing because we've all learned that we need",
    "start": "312900",
    "end": "317940"
  },
  {
    "text": "to be dry we didn't repeat ourselves and things should be in a single place and we're all applying clean coding it turns",
    "start": "317940",
    "end": "323970"
  },
  {
    "text": "out that actually and when it comes to applying security to your application it's a good thing to have some",
    "start": "323970",
    "end": "330060"
  },
  {
    "text": "redundancy in there you don't want to rely on just a single level of defense",
    "start": "330060",
    "end": "335300"
  },
  {
    "text": "because there might be obviously an error in that level of defense and then if a perpetrator and the attacker",
    "start": "335300",
    "end": "341430"
  },
  {
    "text": "actually manages to go through that or even worse I mean that's what typically happens find a way to simply bypass that",
    "start": "341430",
    "end": "348660"
  },
  {
    "text": "completely well then you're out in the open right so you want to have multiple layers of defense now this is a concept",
    "start": "348660",
    "end": "354510"
  },
  {
    "text": "this defense-in-depth there's actually quite broadly applicable it comes out of out of the defense actually mostly the",
    "start": "354510",
    "end": "362300"
  },
  {
    "text": "military defense but it's broadly applicable to to software and to systems",
    "start": "362300",
    "end": "368070"
  },
  {
    "text": "as a whole right so defense in depth is something that applies to the things I",
    "start": "368070",
    "end": "373710"
  },
  {
    "text": "mentioned earlier on like your actual operating system level your network level but even within an application it",
    "start": "373710",
    "end": "379680"
  },
  {
    "text": "applies to multiple layers there as well so that's actually what I'm going to address I'm going to address this by",
    "start": "379680",
    "end": "385890"
  },
  {
    "start": "381000",
    "end": "437000"
  },
  {
    "text": "explaining how to apply something like that using an open source framework which is called spring security this",
    "start": "385890",
    "end": "393030"
  },
  {
    "text": "comes out the spring portfolio of open source projects it's a project that you",
    "start": "393030",
    "end": "398460"
  },
  {
    "text": "can use to add security at the applique lair level in in a number of different",
    "start": "398460",
    "end": "404400"
  },
  {
    "text": "ways it supports common standards things like basic or digest authentication form",
    "start": "404400",
    "end": "409800"
  },
  {
    "text": "based authentication it can integrate with all that it can integrate with single sign-on solutions it has support",
    "start": "409800",
    "end": "416220"
  },
  {
    "text": "for things like Olaf or auth - etc etc so there's all of these standard things and it's basically written in a way that",
    "start": "416220",
    "end": "422820"
  },
  {
    "text": "you can use it within any java web application it doesn't actually have to be a spring application let alone",
    "start": "422820",
    "end": "428400"
  },
  {
    "text": "something like a spring MVC application spring security is actually quite general-purpose and if you have",
    "start": "428400",
    "end": "433920"
  },
  {
    "text": "something that's the servlet based java web application you can plug it in and one of the nice things about spring",
    "start": "433920",
    "end": "439530"
  },
  {
    "start": "437000",
    "end": "577000"
  },
  {
    "text": "Security's it works completely at the application level so what does that mean it means it doesn't rely on something",
    "start": "439530",
    "end": "445410"
  },
  {
    "text": "like an outside container to actually provide you with security functionality that you then somehow need to integrate",
    "start": "445410",
    "end": "451740"
  },
  {
    "text": "with because that's the standard model that you get in a circle based Java web application you can define that a user",
    "start": "451740",
    "end": "459270"
  },
  {
    "text": "needs to be authenticated and have a certain role but you cannot actually define how that happens it's completely",
    "start": "459270",
    "end": "465600"
  },
  {
    "text": "up to the application server to support your authentication mechanism or authentication mechanisms because",
    "start": "465600",
    "end": "471930"
  },
  {
    "text": "nowadays it's actually quite common for application to have multiple there and it's gonna be really hard to take that",
    "start": "471930",
    "end": "477120"
  },
  {
    "text": "same application and deploy it onto something else because you will need to start all over again and figuring out how to actually get that stuff up and",
    "start": "477120",
    "end": "483930"
  },
  {
    "text": "running in there it becomes even worse if you need something custom my experiences as an application architect",
    "start": "483930",
    "end": "489930"
  },
  {
    "text": "it's actually quite common that people have some weird legacy back-end system that they use as their source of",
    "start": "489930",
    "end": "495750"
  },
  {
    "text": "authentication for example if you need to hook up your application to that then good luck getting a plug-in deployed to",
    "start": "495750",
    "end": "503040"
  },
  {
    "text": "the company WebSphere cluster in order to facilitate that right so whispering security all of this is actually handled",
    "start": "503040",
    "end": "509490"
  },
  {
    "text": "at the application level and it's up to your application to handle its own security requirements that means first",
    "start": "509490",
    "end": "514560"
  },
  {
    "text": "of all that the application becomes completely portable because it's not actually relying on any outside functionality provided by some container",
    "start": "514560",
    "end": "521370"
  },
  {
    "text": "but it also means you are in full control so it becomes actually quite",
    "start": "521370",
    "end": "526620"
  },
  {
    "text": "easy to extend and adapt your application to custom authentication scenarios customer authorization",
    "start": "526620",
    "end": "532920"
  },
  {
    "text": "scenarios etc etc right one thing that is important to realize is that spring",
    "start": "532920",
    "end": "539019"
  },
  {
    "text": "security is a framework that assumes that your code itself can actually be trusted right this is not a framework",
    "start": "539019",
    "end": "544540"
  },
  {
    "text": "that will prevent you from using an old Apache Commons collection library that",
    "start": "544540",
    "end": "550060"
  },
  {
    "text": "has known issues with deserialization that allows an attacker to do certain things it has no protection against all",
    "start": "550060",
    "end": "556029"
  },
  {
    "text": "of the bad coding practices that Kathleen actually was just talking about them and how to actually clean up your code so that the code itself actually",
    "start": "556029",
    "end": "562029"
  },
  {
    "text": "becomes secure this is not that type of framework this is a framework that actually builds on top of that and says",
    "start": "562029",
    "end": "568360"
  },
  {
    "text": "we need to functionally add security requirements to your application and allow basically users to be",
    "start": "568360",
    "end": "574450"
  },
  {
    "text": "authenticated and then do authorization so that's what this thing is and when it comes to those two things separating",
    "start": "574450",
    "end": "581350"
  },
  {
    "text": "authentication and authorization is one of the strong points here you want to be able to say I don't really care if a",
    "start": "581350",
    "end": "587170"
  },
  {
    "text": "user was authenticated by entering a username password and then we look that up in our own user database and we have",
    "start": "587170",
    "end": "592959"
  },
  {
    "text": "some hashed passwords in there or be authenticated against an external LDAP server or maybe we were actually already",
    "start": "592959",
    "end": "599829"
  },
  {
    "text": "authenticated using some single sign-on system and we just want to hook into that we don't really care how that",
    "start": "599829",
    "end": "605320"
  },
  {
    "text": "happens if we then want to define ok users that have that in that role can",
    "start": "605320",
    "end": "611079"
  },
  {
    "text": "can call a certain URL or users that then belong to a certain organization a",
    "start": "611079",
    "end": "616660"
  },
  {
    "text": "certain tenant in our application that can only access the data that belongs to that same tenant right those are",
    "start": "616660",
    "end": "622000"
  },
  {
    "text": "completely different requirements and spring security make sure that they are in fact completely different so you can",
    "start": "622000",
    "end": "627940"
  },
  {
    "text": "change one without affecting the other one it's basically all Interceptor based because that is what application level",
    "start": "627940",
    "end": "633880"
  },
  {
    "text": "security is basically about someone is about to do something and we want to secure that so we want to prevent that",
    "start": "633880",
    "end": "641170"
  },
  {
    "text": "from happening automatically and we want to check are there any security constraints defined for what this user",
    "start": "641170",
    "end": "646180"
  },
  {
    "text": "is trying to do and if so is the user actually meeting those requirements if",
    "start": "646180",
    "end": "651790"
  },
  {
    "text": "so ok will allow him to execute his action or allow him to access the data that he wants to to see or that he wants",
    "start": "651790",
    "end": "658779"
  },
  {
    "text": "to change if not that we're going to prevent the user from doing that so how this basically works is that everything",
    "start": "658779",
    "end": "664300"
  },
  {
    "text": "that happens up in the web tier will just use standard ah filters because they are a built-in interceptor mechanism that is provided",
    "start": "664300",
    "end": "670900"
  },
  {
    "text": "by the servlet spec everything that happens below that is based on the custom aspects basically which is just",
    "start": "670900",
    "end": "676990"
  },
  {
    "text": "another form of doing interception for code if you think about it this whole thing is configured using a fluent Java",
    "start": "676990",
    "end": "683530"
  },
  {
    "text": "API for those of you who have not been using spring for a while or have just been reading on it a couple of years ago",
    "start": "683530",
    "end": "689490"
  },
  {
    "text": "yes there used to be a lot of XML configuration if you're really happy about XML you can still use XML",
    "start": "689490",
    "end": "696010"
  },
  {
    "text": "configuration it's actually quite okay because there is a well-developed namespace for that but in this",
    "start": "696010",
    "end": "701230"
  },
  {
    "text": "presentation I'm just going to show you the newer Java based configuration to yourself for this so what does it",
    "start": "701230",
    "end": "706900"
  },
  {
    "start": "706000",
    "end": "760000"
  },
  {
    "text": "actually take to get started with this framework well basically you need to add it as a dependency you need to get some some filter set up I'm not actually",
    "start": "706900",
    "end": "712900"
  },
  {
    "text": "going to bother showing you that if you're using a framework like spring but it will actually happen automatically for you and then you do a number of",
    "start": "712900",
    "end": "719020"
  },
  {
    "text": "things you're going to explain the framework well where are my users are going to come from what how am I going",
    "start": "719020",
    "end": "725620"
  },
  {
    "text": "to perform authentication it's gonna be user name/password form based authentication with my own database or",
    "start": "725620",
    "end": "732130"
  },
  {
    "text": "is it going to be something using client-side certificates maybe because we're doing a b2b integration whatever",
    "start": "732130",
    "end": "737200"
  },
  {
    "text": "you have then we're going to configure some centralized authorization constraints so we can say only these",
    "start": "737200",
    "end": "744520"
  },
  {
    "text": "type of users are allowed to enter these type of sub-q or elles in our application and these methods can only",
    "start": "744520",
    "end": "750400"
  },
  {
    "text": "call by well whatever I'm gonna show you in a moment and then you might also have",
    "start": "750400",
    "end": "756190"
  },
  {
    "text": "some decentralized authorization that you put directly in your codes in the appropriate places and that's basically",
    "start": "756190",
    "end": "761380"
  },
  {
    "text": "it so this is a typical way that you would set this up so we have a configuration class here it's extending",
    "start": "761380",
    "end": "768100"
  },
  {
    "text": "some helper class and this helper will give you a number of builders basically to configure the whole thing now I'm not",
    "start": "768100",
    "end": "774190"
  },
  {
    "text": "going to explain everything here but the first thing that you see here is this authentication manager builder as the",
    "start": "774190",
    "end": "780010"
  },
  {
    "start": "776000",
    "end": "830000"
  },
  {
    "text": "name suggests it allows you to configure something called an authentication manager and I'm not going to talk much about authentication in this",
    "start": "780010",
    "end": "786040"
  },
  {
    "text": "presentation I'm going to focus on authorization but the authentication manager basically allows you to",
    "start": "786040",
    "end": "792010"
  },
  {
    "text": "configure how do I authenticate users am I going to support my own custom",
    "start": "792010",
    "end": "797560"
  },
  {
    "text": "database I'm going to integrate with an owl a porn actor I'm gonna use Kerberos whatever you have if you are storing your own users which",
    "start": "797560",
    "end": "804960"
  },
  {
    "text": "is actually quite common in many applications you're probably gonna end up configuring something called a user",
    "start": "804960",
    "end": "810060"
  },
  {
    "text": "details service which is a really simple thing you just give it a user name when someone tries to log in and the user",
    "start": "810060",
    "end": "816300"
  },
  {
    "text": "details service will return a user with the actual hashed password for that user and the framework and then check if",
    "start": "816300",
    "end": "823290"
  },
  {
    "text": "someone is successfully logging in because password matches or if it isn't there are tons of other ways to do this",
    "start": "823290",
    "end": "829800"
  },
  {
    "text": "but like I said I'm not gonna focus on the authentication part I'm gonna focus on the authorization part and one of the",
    "start": "829800",
    "end": "834900"
  },
  {
    "start": "830000",
    "end": "860000"
  },
  {
    "text": "first things you should probably do is you want to make sure that certain things are simply not secured because if",
    "start": "834900",
    "end": "839940"
  },
  {
    "text": "someone is trying to access a static resource like downloading JavaScript downloading pictures that only CSS in",
    "start": "839940",
    "end": "845730"
  },
  {
    "text": "many cases you want that to be accessible for everyone right it shouldn't have to be a logging user for that so you can use this thing called",
    "start": "845730",
    "end": "852120"
  },
  {
    "text": "the web security class to say there are certain URLs that I just want ignore we're just using some end like wildcard",
    "start": "852120",
    "end": "858900"
  },
  {
    "text": "patterns here right very straightforward and then we get to the actual meet of the authorization configuration which",
    "start": "858900",
    "end": "865020"
  },
  {
    "start": "860000",
    "end": "888000"
  },
  {
    "text": "says well for example there are certain URLs that I want to restrict access to so I'm going to say everything on their",
    "start": "865020",
    "end": "870600"
  },
  {
    "text": "admin have to be an admin user for some other things that having to do with projects and if you want to do a post to",
    "start": "870600",
    "end": "875610"
  },
  {
    "text": "that so you're making a change you probably have to be a project manager for everything else just have to be logged in we don't really care about the",
    "start": "875610",
    "end": "881279"
  },
  {
    "text": "rest now I'll explain this in more detail in a moment but this gives you an idea of a really basic configuration for",
    "start": "881279",
    "end": "887430"
  },
  {
    "text": "spring security and the interesting thing is that with this without doing anything else there will be a whole lot",
    "start": "887430",
    "end": "893040"
  },
  {
    "start": "888000",
    "end": "917000"
  },
  {
    "text": "of default setup for you you will get all sorts of custom response headers",
    "start": "893040",
    "end": "898050"
  },
  {
    "text": "added to your HTTP responses for example that will instruct your browser to operate in a more secure manner also",
    "start": "898050",
    "end": "905010"
  },
  {
    "text": "you're going to get built in support for cross-site request forgery which I will explain in a moment in more detail and",
    "start": "905010",
    "end": "911520"
  },
  {
    "text": "you're also going to get a default login page because we didn't actually specify one ourselves but you typically do so",
    "start": "911520",
    "end": "917570"
  },
  {
    "start": "917000",
    "end": "945000"
  },
  {
    "text": "before going into doing custom configuration on the authorization I'd",
    "start": "917570",
    "end": "923910"
  },
  {
    "text": "like to explain what these defaults are first of all because it's important to realize what this framework is doing for",
    "start": "923910",
    "end": "929370"
  },
  {
    "text": "you when you're not actually configuring all of those things and second of all simply because",
    "start": "929370",
    "end": "934440"
  },
  {
    "text": "I've noticed that a lot of application developers not really aware of what they can actually do in terms of headers to",
    "start": "934440",
    "end": "941280"
  },
  {
    "text": "instruct browsers to act in a more secure manner right so one of the things",
    "start": "941280",
    "end": "947040"
  },
  {
    "start": "945000",
    "end": "991000"
  },
  {
    "text": "that spring security will do for you is that every request that you make that is not explicitly ignored we will tell the",
    "start": "947040",
    "end": "954000"
  },
  {
    "text": "browser and not to cache the response because that could leads to a situation where someone goes to a computer logs",
    "start": "954000",
    "end": "961200"
  },
  {
    "text": "into a site does some work involving seeing interesting data that should not",
    "start": "961200",
    "end": "966750"
  },
  {
    "text": "be visible to anyone then explicitly logging out going away and then someone",
    "start": "966750",
    "end": "972690"
  },
  {
    "text": "else comes in goes through the browser click the back button and it can actually see off the old pages because",
    "start": "972690",
    "end": "978600"
  },
  {
    "text": "the browser had client-side caching that's a security risk but in general if you're building a web application",
    "start": "978600",
    "end": "983670"
  },
  {
    "text": "another website and all of your content is going to be dynamic the whole browser caching thing is just going to get in",
    "start": "983670",
    "end": "989640"
  },
  {
    "text": "the way anyways so what spring security is going to do by default for every URL that you have not told it to ignore",
    "start": "989640",
    "end": "996560"
  },
  {
    "start": "991000",
    "end": "1037000"
  },
  {
    "text": "because obviously for static content you do want browser caching as much as possible it's going to add these browser",
    "start": "996560",
    "end": "1002810"
  },
  {
    "text": "headers which is basically all of the different ways that you can tell a modern browser to say please please stop",
    "start": "1002810",
    "end": "1009710"
  },
  {
    "text": "caching all of this content and a couple of years ago if you were using HTTPS for a secured website this wasn't even that",
    "start": "1009710",
    "end": "1016580"
  },
  {
    "text": "important because most browser would choose not to cache content surfed over HTTPS but nowadays everyone using HTTPS",
    "start": "1016580",
    "end": "1023870"
  },
  {
    "text": "for everything which is actually a really good thing but that also means that browsers will now adlib by default",
    "start": "1023870",
    "end": "1030260"
  },
  {
    "text": "mostly cache all of the content certs over HTTPS so you actually need this in",
    "start": "1030260",
    "end": "1035780"
  },
  {
    "text": "order for them to not do that something else is content sniffing so again this",
    "start": "1035780",
    "end": "1041390"
  },
  {
    "start": "1037000",
    "end": "1143000"
  },
  {
    "text": "is a great example of post sales law gone bad what browsers typically expect",
    "start": "1041390",
    "end": "1046910"
  },
  {
    "text": "from a response is a header that tells the browser you know the stuff that I'm actually sending you is going to be HTML",
    "start": "1046910",
    "end": "1052220"
  },
  {
    "text": "or it's going to be JavaScript or it's going to be a binary file and it's going to contain the PDF or its kind of",
    "start": "1052220",
    "end": "1058280"
  },
  {
    "text": "contain an excel file or whatever it is that the browser knows how to handle but",
    "start": "1058280",
    "end": "1063380"
  },
  {
    "text": "if that's missing then there's a feature in the browser that your browser says yeah I know what I'm just gonna guess I'm just gonna look",
    "start": "1063380",
    "end": "1069769"
  },
  {
    "text": "at what's coming in hmm it looks like JavaScript it must be JavaScript and you can abuse",
    "start": "1069769",
    "end": "1075230"
  },
  {
    "text": "this in a number of ways so for example there's the idea of a polyglot file this",
    "start": "1075230",
    "end": "1081110"
  },
  {
    "text": "is a file that is valid as different file types so for example you can construct a file that is a valid",
    "start": "1081110",
    "end": "1086899"
  },
  {
    "text": "PostScript or PDF form but it could also pass as an actual JavaScript file and an",
    "start": "1086899",
    "end": "1092779"
  },
  {
    "text": "attacker might be able to upload this file to your system and that have another user downloaded and if your",
    "start": "1092779",
    "end": "1097789"
  },
  {
    "text": "system is not going to explicitly say this is going to be a file with this and",
    "start": "1097789",
    "end": "1103250"
  },
  {
    "text": "this content type your browser may start to guess it may guess wrong because that",
    "start": "1103250",
    "end": "1108649"
  },
  {
    "text": "file might actually be a valid JavaScript file it will execute the JavaScript this is something that you",
    "start": "1108649",
    "end": "1114769"
  },
  {
    "text": "can tell the browser not to do it does require obviously that your application should have the right content type in",
    "start": "1114769",
    "end": "1121220"
  },
  {
    "text": "your response headers and this is just good practice right as a developer you should know how HTTP works and you",
    "start": "1121220",
    "end": "1127309"
  },
  {
    "text": "should always make sure that this is the case and if it is spring security is automatically going to add this header telling the browser I do not want you to",
    "start": "1127309",
    "end": "1134299"
  },
  {
    "text": "start content sniffing is that it's cool to guess what the file type is I'm gonna tell you what it is and you're gonna",
    "start": "1134299",
    "end": "1139700"
  },
  {
    "text": "believe me and you're not gonna try to figure it out for yourself another interesting one related to the HTTP",
    "start": "1139700",
    "end": "1146659"
  },
  {
    "start": "1143000",
    "end": "1421000"
  },
  {
    "text": "transport I was just talking about is something called HTTP strict Transport Security or HSTs so there is an attack",
    "start": "1146659",
    "end": "1155059"
  },
  {
    "text": "vector where you could have a website that is HTTP only like your bank for",
    "start": "1155059",
    "end": "1160340"
  },
  {
    "text": "example and if you access it over HTTP what that server will typically do is",
    "start": "1160340",
    "end": "1165590"
  },
  {
    "text": "just send you a redirect back to tell your browser you're not going to connect over plain HTTP you're going to connect over HTTP",
    "start": "1165590",
    "end": "1171649"
  },
  {
    "text": "and from there on out all of your communication is going to be encrypted but that first HTTP request that led to",
    "start": "1171649",
    "end": "1178730"
  },
  {
    "text": "the redirect that's actually vulnerable to a man-in-the-middle attack there might be some one especially if you're",
    "start": "1178730",
    "end": "1184490"
  },
  {
    "text": "on an untrusted Wi-Fi network someone like something like that that can actually sit between your browser and",
    "start": "1184490",
    "end": "1190250"
  },
  {
    "text": "the server intercepting that request and then redirecting you to something else that they control and you think you're",
    "start": "1190250",
    "end": "1195529"
  },
  {
    "text": "going to the right website but you're not so what you can do is you can actually send the",
    "start": "1195529",
    "end": "1201700"
  },
  {
    "text": "header after your browser makes an HTTP request to tell the browser next time",
    "start": "1201700",
    "end": "1207070"
  },
  {
    "text": "you're going to try to access this application domain make sure you do it over HTTP directly so even if the user",
    "start": "1207070",
    "end": "1213550"
  },
  {
    "text": "would bookmark a banking website using plain HTTP the schema your browser gonna",
    "start": "1213550",
    "end": "1220060"
  },
  {
    "text": "say ah I'm not even gonna make that request I'm just gonna do a secure request from the get-go which prevents",
    "start": "1220060",
    "end": "1225160"
  },
  {
    "text": "you against that man in the middle attack you can do this just for the domain you can also do this for all subdomains right if you if you are",
    "start": "1225160",
    "end": "1232030"
  },
  {
    "text": "connecting to something and this is the way that this is enabled there is a strict Transport Security header you can",
    "start": "1232030",
    "end": "1238480"
  },
  {
    "text": "set some options there and this is what spraying security will do buddy fault because spring security tries to be as",
    "start": "1238480",
    "end": "1244390"
  },
  {
    "text": "secure as possible out of the box so you don't have to configure anything to get this that's",
    "start": "1244390",
    "end": "1250390"
  },
  {
    "text": "actually interesting because this can go very wrong I've worked for a media",
    "start": "1250390",
    "end": "1258190"
  },
  {
    "text": "company in Amsterdam where we had built our system and we secured it with spring security and after that it was in",
    "start": "1258190",
    "end": "1265600"
  },
  {
    "text": "production running already a while did great but they wanted to have some additional authentication options and",
    "start": "1265600",
    "end": "1270850"
  },
  {
    "text": "specifically they wanted to have federated authentication using sam'l so we added that and then the sam'l library",
    "start": "1270850",
    "end": "1277390"
  },
  {
    "text": "said well the user is now trying to come in with a plain HTTP request rather than with an HTTP request I'm gonna deny it",
    "start": "1277390",
    "end": "1283680"
  },
  {
    "text": "but they weren't they were coming in through HTTPS and it turned out that the load balancer was terminating the SSL",
    "start": "1283680",
    "end": "1290410"
  },
  {
    "text": "connection and it was not adding the right header to the request to tell the application you know this request was",
    "start": "1290410",
    "end": "1296770"
  },
  {
    "text": "originally done over HTTPS now we were only using HTTPS at the time to allow",
    "start": "1296770",
    "end": "1302800"
  },
  {
    "text": "the user to log in with a username password the reason for that was simply that the rest of their application",
    "start": "1302800",
    "end": "1309010"
  },
  {
    "text": "didn't support full HTTP only at the time because they had some ad network",
    "start": "1309010",
    "end": "1314110"
  },
  {
    "text": "that could only serve up ads over plain HTTP what we did when we found out that",
    "start": "1314110",
    "end": "1320710"
  },
  {
    "text": "our sam'l library was tell us telling us it doesn't work you're not doing a secure request we went over to the",
    "start": "1320710",
    "end": "1326320"
  },
  {
    "text": "networking maintenance guys and we said you know can you add this header for us whenever there is a nice TPS request",
    "start": "1326320",
    "end": "1332020"
  },
  {
    "text": "because then the application will be able to they tell that we're making a request over HTTPS sure we do that we tested it",
    "start": "1332020",
    "end": "1338440"
  },
  {
    "text": "worked great I left there I came back a week later and it turned out that by asking those",
    "start": "1338440",
    "end": "1344169"
  },
  {
    "text": "Network guys to do that in production because after we tested on acceptance we said yeah just go ahead and do it in",
    "start": "1344169",
    "end": "1349329"
  },
  {
    "text": "production as well for when we deploy the federated login we broke their entire website and not actually just",
    "start": "1349329",
    "end": "1355869"
  },
  {
    "text": "their website everything running on their domain because turned out that as soon as someone would log in over HTTPS",
    "start": "1355869",
    "end": "1363399"
  },
  {
    "text": "now automatically that header will be sent to the browser and the browser would say okay if you tell me then I'll",
    "start": "1363399",
    "end": "1369429"
  },
  {
    "text": "just continue to make all requests over HTTPS now including all of the requests to serve up the ads and all of the other",
    "start": "1369429",
    "end": "1375849"
  },
  {
    "text": "content that could not actually be loaded over HTTPS right so think about",
    "start": "1375849",
    "end": "1381459"
  },
  {
    "text": "it if you are going to add something like spring security or something else that will have this default to your",
    "start": "1381459",
    "end": "1386679"
  },
  {
    "text": "application your web application itself may not support HTTPS only but hopefully",
    "start": "1386679",
    "end": "1392079"
  },
  {
    "text": "it will because that should really be the default in 2017 but also that same",
    "start": "1392079",
    "end": "1397450"
  },
  {
    "text": "application domain might host other applications that are not under your control that may not in fact support",
    "start": "1397450",
    "end": "1403329"
  },
  {
    "text": "HTTPS only right so if you want to do something actually I think this is not a",
    "start": "1403329",
    "end": "1408459"
  },
  {
    "text": "great default this is probably something that you should just configure at the web server or the load balancer level to",
    "start": "1408459",
    "end": "1413979"
  },
  {
    "text": "add that header because there you have made an informed decision that it's actually okay for your entire domain to",
    "start": "1413979",
    "end": "1419919"
  },
  {
    "text": "do this right so keep that in mind some other things that spring security will do is it will prevent clickjacking",
    "start": "1419919",
    "end": "1425529"
  },
  {
    "start": "1421000",
    "end": "1447000"
  },
  {
    "text": "attacks what this is is a way that your site will actually be projected over",
    "start": "1425529",
    "end": "1430749"
  },
  {
    "text": "some other websites in an invisible frame so the user doesn't really see your application see something else",
    "start": "1430749",
    "end": "1436359"
  },
  {
    "text": "with when he thinks he's clicking on a button he might actually be clicking on something in your website where he's",
    "start": "1436359",
    "end": "1442029"
  },
  {
    "text": "already logged in and doing something that he did not intend to do that's called a clickjacking attack and there's",
    "start": "1442029",
    "end": "1448959"
  },
  {
    "start": "1447000",
    "end": "1468000"
  },
  {
    "text": "an easy way to prevent this by simply telling the browser you know this side can never be embedded inside of a frame that's what stream security will do by",
    "start": "1448959",
    "end": "1455469"
  },
  {
    "text": "default using the X frame options here you can tune that obviously you can say well it cannot be embedded in a frame if",
    "start": "1455469",
    "end": "1462309"
  },
  {
    "text": "it's running on a different domain but it's actually okay in my own because I trust that one you have some options there but you can you can look",
    "start": "1462309",
    "end": "1468030"
  },
  {
    "start": "1468000",
    "end": "1536000"
  },
  {
    "text": "em up this is an interesting one not everyone may be familiar with what this",
    "start": "1468030",
    "end": "1473490"
  },
  {
    "text": "is this is called a reflected cross-site scripting attack where basically the",
    "start": "1473490",
    "end": "1478799"
  },
  {
    "text": "server is just sending back whatever the user passed in it's as simple as that but that means that if the user is",
    "start": "1478799",
    "end": "1485580"
  },
  {
    "text": "tricked into clicking on some URL that might contain some malicious JavaScript that JavaScript could actually get",
    "start": "1485580",
    "end": "1492330"
  },
  {
    "text": "executed by the server sending back exactly that same thing now browsers by default",
    "start": "1492330",
    "end": "1497940"
  },
  {
    "text": "typically prevent you already from this but what browsers will do again in a typical post style or fashion is they'll",
    "start": "1497940",
    "end": "1504720"
  },
  {
    "text": "try to be as nice as possible because they really want stuff to just work and not break so what browsers will do by",
    "start": "1504720",
    "end": "1510179"
  },
  {
    "text": "the fault is they will try to fix the content that gets sent back this way and that's another attack factor and it",
    "start": "1510179",
    "end": "1517049"
  },
  {
    "text": "turns out that there are actually attacks that make use of a feature of the browser that will detect an attempt",
    "start": "1517049",
    "end": "1523470"
  },
  {
    "text": "at a reflective cross-site scripting and then tries to fix it but fails to and you're still screwed so basically what",
    "start": "1523470",
    "end": "1529530"
  },
  {
    "text": "spring security will do is it will tell your browser just don't even try just block all of the content that looks like this malicious type of request so",
    "start": "1529530",
    "end": "1537570"
  },
  {
    "start": "1536000",
    "end": "1596000"
  },
  {
    "text": "there's other stuff you can do but that's not enabled by default for example you can prevent something called well actually you can enable something",
    "start": "1537570",
    "end": "1544650"
  },
  {
    "text": "called public key pinning what this is doing is that your application is actually telling the browser this domain",
    "start": "1544650",
    "end": "1550260"
  },
  {
    "text": "will always use this particular SSL certificate and if you try to go to this",
    "start": "1550260",
    "end": "1555780"
  },
  {
    "text": "domain the next time and you find a valid certificate but it's not actually that certificate Oh watch out something",
    "start": "1555780",
    "end": "1562440"
  },
  {
    "text": "is wrong now this is not something that I would typically recommend you to enable by default but there are definitely good use cases for this maybe",
    "start": "1562440",
    "end": "1568799"
  },
  {
    "text": "you remember a couple of years ago there were a lot of problems with Lenovo laptops for example in the in the",
    "start": "1568799",
    "end": "1575570"
  },
  {
    "text": "consumer range that were actually shipping with software that was injecting ads into the browser and it",
    "start": "1575570",
    "end": "1582390"
  },
  {
    "text": "was doing that by actually man in the middle in you with its own custom certificate then that certificate was",
    "start": "1582390",
    "end": "1587850"
  },
  {
    "text": "leaked and basically attackers could make any websites look legit to everyone owning such a laptop what this would",
    "start": "1587850",
    "end": "1594240"
  },
  {
    "text": "actually prevent that attack from happening there are some other stuff but this is basically the idea of headers right this is just a browser part we haven't",
    "start": "1594240",
    "end": "1600910"
  },
  {
    "start": "1596000",
    "end": "1618000"
  },
  {
    "text": "even made it through the server yet this is just telling the browser to behave in a more secure manner but something else",
    "start": "1600910",
    "end": "1606100"
  },
  {
    "text": "that will be enabled by default is CS ref protection cross side scripting request forgery also known as session",
    "start": "1606100",
    "end": "1613210"
  },
  {
    "text": "writing which i think is a much better term because session writing describes exactly what this is it's a way for an",
    "start": "1613210",
    "end": "1620440"
  },
  {
    "start": "1618000",
    "end": "1677000"
  },
  {
    "text": "attacker to just ride along with a valid session that you have already so you as",
    "start": "1620440",
    "end": "1625690"
  },
  {
    "text": "a logged in user will be tricked to go to on through some malicious website and",
    "start": "1625690",
    "end": "1630910"
  },
  {
    "text": "that website will actually make a request to the website that you are already logged in somehow it will trick",
    "start": "1630910",
    "end": "1637750"
  },
  {
    "text": "you into doing that like showing you this really big button that says win free money now when you're actually",
    "start": "1637750",
    "end": "1643050"
  },
  {
    "text": "clicking on that now don't do that but if you do what will happen this your browser will make that request and",
    "start": "1643050",
    "end": "1648550"
  },
  {
    "text": "because it makes that request to that domain it sends well I have a valid session cookie already for that domain so I'm",
    "start": "1648550",
    "end": "1653560"
  },
  {
    "text": "just going to send off the session cookie and as far as the server can tell you really initiate this request",
    "start": "1653560",
    "end": "1659050"
  },
  {
    "text": "everything looks ok so it will just execute your request right you just got tricked into doing this and this is",
    "start": "1659050",
    "end": "1664660"
  },
  {
    "text": "actually quite a common attack factor which is why spring security prevents you against this type of attack by",
    "start": "1664660",
    "end": "1670930"
  },
  {
    "text": "default but you need to do something here this is not just a matter of setting a browser header because your",
    "start": "1670930",
    "end": "1676420"
  },
  {
    "text": "browser cannot know this so the way to typically do this is to add a custom token to every webpage that your",
    "start": "1676420",
    "end": "1684190"
  },
  {
    "start": "1677000",
    "end": "1721000"
  },
  {
    "text": "application renders that contains something like a form that the user can then submit and then when the user",
    "start": "1684190",
    "end": "1689410"
  },
  {
    "text": "submits that form what you're going to do is you're going to make sure that you explicitly sent that token with the rest",
    "start": "1689410",
    "end": "1696130"
  },
  {
    "text": "of the form and then the user kind of the server can check and it says yeah that token is there it's actually your",
    "start": "1696130",
    "end": "1702100"
  },
  {
    "text": "token looks legit but if an attacker tries to do the same thing they will never be able to create a fake site or a",
    "start": "1702100",
    "end": "1710620"
  },
  {
    "text": "fake page that will also send that same token header because they don't know that token header because they cannot",
    "start": "1710620",
    "end": "1716710"
  },
  {
    "text": "actually get that from the server you have to be logged in in order to get the token then you have to send it back that's basically how this works now",
    "start": "1716710",
    "end": "1723880"
  },
  {
    "start": "1721000",
    "end": "1771000"
  },
  {
    "text": "one thing that's important here is that if you're using this you should only be using this for state changing operations",
    "start": "1723880",
    "end": "1729970"
  },
  {
    "text": "so you should be doing this for posts for put four deletes you should not be using it forgets first of all it gets you be safe",
    "start": "1729970",
    "end": "1735960"
  },
  {
    "text": "in general that's how HTTP is designed to work a get request should not actually change the state on the server",
    "start": "1735960",
    "end": "1741660"
  },
  {
    "text": "so tricking you into making a get request that I as an attacker cannot actually see the result of should be",
    "start": "1741660",
    "end": "1747450"
  },
  {
    "text": "fine more importantly if you would include the token in a get request it would have",
    "start": "1747450",
    "end": "1752670"
  },
  {
    "text": "to be part of the URL because you cannot put it in like a form and coded body",
    "start": "1752670",
    "end": "1757830"
  },
  {
    "text": "because that's not how get requests work so that allows token optionally to leak and then you're back to square one",
    "start": "1757830",
    "end": "1765270"
  },
  {
    "text": "because well then an attacker might actually be able to obtain your token as well and he can again trick you into forging a request so basically how",
    "start": "1765270",
    "end": "1772980"
  },
  {
    "start": "1771000",
    "end": "1822000"
  },
  {
    "text": "spring security does this is that when you log in next to your session your session cookie you will also get the",
    "start": "1772980",
    "end": "1779340"
  },
  {
    "text": "session scope token and you as a developer are responsible for including that in all of your web pages where you",
    "start": "1779340",
    "end": "1786210"
  },
  {
    "text": "are including a form that will be posted or put or used leet basically right if it's plain HTML it's going to be post",
    "start": "1786210",
    "end": "1792690"
  },
  {
    "text": "but if it's gonna be JavaScript you have to think about these other verbs as well this is the typical way to do that",
    "start": "1792690",
    "end": "1798360"
  },
  {
    "text": "basically those the token value and the name of the token will be made available as a request attributes you can just",
    "start": "1798360",
    "end": "1803940"
  },
  {
    "text": "include them there will be libraries doing port this for you right if you're using like the tag library from spring",
    "start": "1803940",
    "end": "1809580"
  },
  {
    "text": "reusing something like I'm leaf it will all do this for you automatically you don't even notice it but the token will be there there will",
    "start": "1809580",
    "end": "1815820"
  },
  {
    "text": "be a hidden request parameter in the form now this is nice if you're building an application that the server-side HTML",
    "start": "1815820",
    "end": "1822210"
  },
  {
    "start": "1822000",
    "end": "1837000"
  },
  {
    "text": "rendering nowadays a lot of people are actually just building single page applications that just post JSON in the",
    "start": "1822210",
    "end": "1829440"
  },
  {
    "text": "body of the request they don't actually post form and coded parameters so that means that you cannot add another form and coded hidden",
    "start": "1829440",
    "end": "1836430"
  },
  {
    "text": "request parameter so there is a solution for this obviously and by default the way that this works in security being",
    "start": "1836430",
    "end": "1843300"
  },
  {
    "start": "1837000",
    "end": "1930000"
  },
  {
    "text": "security at least if you can figure something called a cookie CSRs token repository what that does is instead of",
    "start": "1843300",
    "end": "1850020"
  },
  {
    "text": "creating a token and storing it in server in the session it's just gonna be another cookie that it sends to the",
    "start": "1850020",
    "end": "1856410"
  },
  {
    "text": "client however when the client makes a request we're not going to check the",
    "start": "1856410",
    "end": "1861840"
  },
  {
    "text": "cookie value because well that's going to be sent automatically so that's not to be trusted we're just going to make sure that the",
    "start": "1861840",
    "end": "1868910"
  },
  {
    "text": "JavaScript running in the single page application will take the value from that cookie and then puts it in the",
    "start": "1868910",
    "end": "1875910"
  },
  {
    "text": "request as a header we can take the value from that request header we can compare it to the value that was also",
    "start": "1875910",
    "end": "1882450"
  },
  {
    "text": "sent by the browser in the cookie so we don't actually have to remember anything on the server here we're just comparing",
    "start": "1882450",
    "end": "1887820"
  },
  {
    "text": "two values that the browser sent to us and we're going to check if they're the same thing the interesting thing here is",
    "start": "1887820",
    "end": "1892860"
  },
  {
    "text": "an attacker cannot force your your browser to actually read the value of",
    "start": "1892860",
    "end": "1899280"
  },
  {
    "text": "that session CSRF token and from the cookie and then send it as a request",
    "start": "1899280",
    "end": "1905340"
  },
  {
    "text": "header because cookies are restricted to be read only by a JavaScript that was",
    "start": "1905340",
    "end": "1912150"
  },
  {
    "text": "served from the same domain right so this gives you still a pretty good protection against the srf if you're a",
    "start": "1912150",
    "end": "1919740"
  },
  {
    "text": "security expert you might actually argue that it's slightly less secure in most cases you won't actually care because",
    "start": "1919740",
    "end": "1925320"
  },
  {
    "text": "this is going to provide sufficient protection against the common type of CSRF attack so that's that that is",
    "start": "1925320",
    "end": "1934530"
  },
  {
    "text": "basically covering the whole thing from browser to server right so now we actually get onto the server and someone",
    "start": "1934530",
    "end": "1940800"
  },
  {
    "text": "is actually trying to make a request we've decided that this is probably a legit request is not an attacker who is",
    "start": "1940800",
    "end": "1946620"
  },
  {
    "text": "trying to force you use me to do something so how we're going to secure that and a very common way is to say",
    "start": "1946620",
    "end": "1952470"
  },
  {
    "text": "we're gonna have rules that are going to match certain URLs in our application so we're gonna map our URL structure onto",
    "start": "1952470",
    "end": "1959220"
  },
  {
    "text": "some authorities those authorities are typically roles that you may assign to a user and then that will check if you",
    "start": "1959220",
    "end": "1966690"
  },
  {
    "text": "have access or not so what that look like in spring security is that inside",
    "start": "1966690",
    "end": "1973380"
  },
  {
    "start": "1968000",
    "end": "2025000"
  },
  {
    "text": "of this method that gives you this HTTP security object there is a method called",
    "start": "1973380",
    "end": "1978690"
  },
  {
    "text": "authorize requests that gives you a builder to configure all of this URL based security so in this example what",
    "start": "1978690",
    "end": "1984630"
  },
  {
    "text": "we see is that first of all we say everything starting with slash admin that should only be accessible for admin",
    "start": "1984630",
    "end": "1990420"
  },
  {
    "text": "users so this is easy to do if you actually model your URLs based on these",
    "start": "1990420",
    "end": "1997170"
  },
  {
    "text": "security rules that you have because then this is a straight or one-to-one mapping also we're going",
    "start": "1997170",
    "end": "2002400"
  },
  {
    "text": "to say if you're going to have a user that makes a post so that is supposedly an unsafe state changing operation to",
    "start": "2002400",
    "end": "2009570"
  },
  {
    "text": "anything under slash projects well he has to have the role of project manager in this case because I wanted to fit",
    "start": "2009570",
    "end": "2015750"
  },
  {
    "text": "this on a single slide we're gonna say for everything else yeah you just have to be an authenticated user you have to be logged in you cannot be anonymous you",
    "start": "2015750",
    "end": "2022559"
  },
  {
    "text": "cannot be a guest user but we don't really care about the rest now there are",
    "start": "2022559",
    "end": "2027570"
  },
  {
    "start": "2025000",
    "end": "2058000"
  },
  {
    "text": "some limitations and some tricky things and using this approach and especially in using this approach exclusively so",
    "start": "2027570",
    "end": "2034049"
  },
  {
    "text": "first of all this might become bloated very quickly especially if your URL structure doesn't actually mirror your",
    "start": "2034049",
    "end": "2040710"
  },
  {
    "text": "authority or your role structure but you're using some other way of mapping out URLs very quickly your code will",
    "start": "2040710",
    "end": "2048419"
  },
  {
    "text": "look like this and this is like one third of the overall configuration of an actual project I'm working on so this",
    "start": "2048419",
    "end": "2054810"
  },
  {
    "text": "can this can become very tedious to do maintenance on very quickly also it can",
    "start": "2054810",
    "end": "2060240"
  },
  {
    "start": "2058000",
    "end": "2112000"
  },
  {
    "text": "be tricky to get right because there are some Salty's here ordering of rules actually matters most important one",
    "start": "2060240",
    "end": "2066868"
  },
  {
    "text": "should go first the metrics might actually be slightly different in behavior than what you're thinking and",
    "start": "2066869",
    "end": "2072118"
  },
  {
    "text": "I'll talk a bit more about it on the next slide and really important is you need to have a catch-all in place here",
    "start": "2072119",
    "end": "2078060"
  },
  {
    "text": "right that's a common security principle if you haven't explicitly stated how",
    "start": "2078060",
    "end": "2083250"
  },
  {
    "text": "something should be secured that's probably just should be inaccessible rather than being unsecured by default",
    "start": "2083250",
    "end": "2090330"
  },
  {
    "text": "so on the next on the previous slide I showed you the any request all authenticated as the last line that says",
    "start": "2090330",
    "end": "2097138"
  },
  {
    "text": "that at least the catch holes as well you should at least be logged in in order to do something if I haven't",
    "start": "2097139",
    "end": "2103350"
  },
  {
    "text": "explicitly allowed you to do it before as an anonymous user then at least are required to be authenticated if you're",
    "start": "2103350",
    "end": "2109950"
  },
  {
    "text": "actually strict about security well maybe it should be be paranoid right say",
    "start": "2109950",
    "end": "2115290"
  },
  {
    "start": "2112000",
    "end": "2134000"
  },
  {
    "text": "okay my catch-all is actually going to be I'm just going to deny all access so that means that you have to explicitly",
    "start": "2115290",
    "end": "2121530"
  },
  {
    "text": "state your security requirement for every URL if that is a workable approach or not very much depends on your",
    "start": "2121530",
    "end": "2128100"
  },
  {
    "text": "application so I'm not going to try to pretend to have an absolute truth here but this is definitely",
    "start": "2128100",
    "end": "2133110"
  },
  {
    "text": "something to consider so what are the gut shots that I was talking about well here you see an example where first",
    "start": "2133110",
    "end": "2138840"
  },
  {
    "start": "2134000",
    "end": "2242000"
  },
  {
    "text": "we're saying if someone tries to go to the product inventory sub-domain in our application every URL starting with that",
    "start": "2138840",
    "end": "2145680"
  },
  {
    "text": "they have to be in that min but for everything else under slash products they either have to be an admin but",
    "start": "2145680",
    "end": "2152100"
  },
  {
    "text": "regular user rise also suffice now if someone would actually reverse these two lines all of a sudden you have a big",
    "start": "2152100",
    "end": "2159300"
  },
  {
    "text": "problem because now if someone actually comes in on slash products less inventory slash delete the entire",
    "start": "2159300",
    "end": "2166890"
  },
  {
    "text": "inventory dot HTML it would simply match this last project slash star star rule",
    "start": "2166890",
    "end": "2173070"
  },
  {
    "text": "and regular users would be allowed to do this now if you literally exchanged these two lines you would probably know",
    "start": "2173070",
    "end": "2178500"
  },
  {
    "text": "this simply by reviewing the configuration if you're actually if your configuration looks like this and one",
    "start": "2178500",
    "end": "2184590"
  },
  {
    "text": "line is over there and the other one is over there you're probably not going to notice this so be careful about this",
    "start": "2184590",
    "end": "2189660"
  },
  {
    "text": "make sure that your more precise rules go first another thing is this one and",
    "start": "2189660",
    "end": "2195750"
  },
  {
    "text": "this is a particularly nasty one because I've seen people trip up over this if you're not using wildcards and you're",
    "start": "2195750",
    "end": "2202050"
  },
  {
    "text": "saying okay slash product / delete that's only accessible to admin users that will be an exact match so if",
    "start": "2202050",
    "end": "2208620"
  },
  {
    "text": "someone literally goes to that URL okay it will work but many web frameworks say",
    "start": "2208620",
    "end": "2214200"
  },
  {
    "text": "well you know slash sporadic slash delete I'll consider that to be exactly the same resource as slash products /",
    "start": "2214200",
    "end": "2221490"
  },
  {
    "text": "delete slash let's bring security doesn't bring security says yeah if you have a trailing slash and I'm using an",
    "start": "2221490",
    "end": "2227550"
  },
  {
    "text": "admin sir that's a different URL so that is not secured if someone is someone that tecar simply adds a trailing slash",
    "start": "2227550",
    "end": "2233550"
  },
  {
    "text": "and tries to do this who knows what will happen it's certainly not going to be this rule that will match so hopefully",
    "start": "2233550",
    "end": "2239940"
  },
  {
    "text": "you have a good casual somewhere else but not in URL matching so there is an easy fix for this and that is to not use",
    "start": "2239940",
    "end": "2245610"
  },
  {
    "text": "the end matcher it's use something called an MVC matcher because the rules of that matcher exactly match the way that spring MVC",
    "start": "2245610",
    "end": "2251730"
  },
  {
    "text": "handles request mapping but if you're not using spring MVC if you're using something else make sure to understand",
    "start": "2251730",
    "end": "2257550"
  },
  {
    "text": "those rules and make sure that you encode them properly and test this right so one thing that this illustrates is",
    "start": "2257550",
    "end": "2263730"
  },
  {
    "text": "that just relying on a single layer of security just relying on your ell level mapping is actually quite tricky so in many",
    "start": "2263730",
    "end": "2270740"
  },
  {
    "text": "cases what you want to do is in addition to this and not instead of this with in addition to this you want to use method",
    "start": "2270740",
    "end": "2276320"
  },
  {
    "text": "level security as well so this is something that you need to enable explicitly and just show it here for",
    "start": "2276320",
    "end": "2282619"
  },
  {
    "start": "2278000",
    "end": "2292000"
  },
  {
    "text": "those of you who actually care about spring security so there is a net enabled well with method security annotation you can say I want to enable",
    "start": "2282619",
    "end": "2288410"
  },
  {
    "text": "these pre post annotations and if you enable this what this will allow you to do is you can put an annotation on a",
    "start": "2288410",
    "end": "2295640"
  },
  {
    "start": "2292000",
    "end": "2385000"
  },
  {
    "text": "method for those of you not doing Java that's just a little piece of metadata and that at pre-authorized can be used",
    "start": "2295640",
    "end": "2302390"
  },
  {
    "text": "to specify a security expression so in this case we're going to say in order to call this method there must be a logged",
    "start": "2302390",
    "end": "2308570"
  },
  {
    "text": "in user and logged in user must have to roll a product manager and if that is not the case so either there is no",
    "start": "2308570",
    "end": "2314570"
  },
  {
    "text": "logged in user or there is but he doesn't have to require role this method will not be called but instead security",
    "start": "2314570",
    "end": "2321980"
  },
  {
    "text": "related exception will be thrown and you can handle that by showing either an access denied page if user was already",
    "start": "2321980",
    "end": "2328430"
  },
  {
    "text": "logged in or by showing a login page if the user wasn't even logged in to begin with and you can just start the whole",
    "start": "2328430",
    "end": "2333740"
  },
  {
    "text": "authentication process there and there's much more that you can do with this particularly interesting feature I think",
    "start": "2333740",
    "end": "2339980"
  },
  {
    "text": "is that this will allow you to access method parameters in your security",
    "start": "2339980",
    "end": "2345740"
  },
  {
    "text": "constraints so in this example what I'm saying is well not alone do you have to have a particular role in order to call",
    "start": "2345740",
    "end": "2352940"
  },
  {
    "text": "update products also the actual product that you're trying to update here should",
    "start": "2352940",
    "end": "2358490"
  },
  {
    "text": "have a company ID and the company would be some type of tenants in this particular system that matches the idea",
    "start": "2358490",
    "end": "2365060"
  },
  {
    "text": "of the current users company so that means I can only update product that belonged to my company if I'm trying to",
    "start": "2365060",
    "end": "2370880"
  },
  {
    "text": "update some other tenants products maybe to just lower their price so much that",
    "start": "2370880",
    "end": "2376130"
  },
  {
    "text": "they will go bankrupt or actually do it the opposite way so they won't be selling anything I won't be allowed to do that because I will only be able to",
    "start": "2376130",
    "end": "2383300"
  },
  {
    "text": "update products that belong to my own company now similarly to pre authorizers also post authorize so this happens",
    "start": "2383300",
    "end": "2389180"
  },
  {
    "start": "2385000",
    "end": "2440000"
  },
  {
    "text": "after the method executes and you can do some check on what it returns so very similarly if we say we're going to look",
    "start": "2389180",
    "end": "2394609"
  },
  {
    "text": "up a project by ID that ID itself depending on how we implement our multi-tenancy",
    "start": "2394609",
    "end": "2400190"
  },
  {
    "text": "may not actually indicate if this is a product that belongs to the current company or not so similar to the",
    "start": "2400190",
    "end": "2406280"
  },
  {
    "text": "previous light what we can do here is you can say in the post authorize well the object that was being returned which",
    "start": "2406280",
    "end": "2411680"
  },
  {
    "text": "is conveniently accessible under the name return object must belong again to",
    "start": "2411680",
    "end": "2416900"
  },
  {
    "text": "the same company as the current user right so that's what these things allow you to do and this is still pretty",
    "start": "2416900",
    "end": "2423289"
  },
  {
    "text": "declarative we just put an annotation on code I can write an integration test that doesn't do anything with security",
    "start": "2423289",
    "end": "2429500"
  },
  {
    "text": "and these things will simply not be handled so I don't have to worry about setting up fake users everywhere for example for testing purposes but on the",
    "start": "2429500",
    "end": "2437539"
  },
  {
    "text": "other hand they are actually expressive enough that I can do all sorts of things so there's a lot of built-in functions",
    "start": "2437539",
    "end": "2443900"
  },
  {
    "start": "2440000",
    "end": "2469000"
  },
  {
    "text": "for this so I showed you has role you can check for multiple roles you can check the anonymous you can check if someone is simply a login user or not",
    "start": "2443900",
    "end": "2450049"
  },
  {
    "text": "but obviously you're gonna end up having some custom constraints here typically now you could actually tell spraying",
    "start": "2450049",
    "end": "2456500"
  },
  {
    "text": "security I want to add my own expressions directly so you could have I don't know has whitelisted IP address as",
    "start": "2456500",
    "end": "2464059"
  },
  {
    "text": "a function it turns out that even though it's possible it's not particularly easy fortunately there is a really easy way",
    "start": "2464059",
    "end": "2471319"
  },
  {
    "start": "2469000",
    "end": "2511000"
  },
  {
    "text": "to get exactly the same effect because from one of those expressions you can actually call a method simply on one of",
    "start": "2471319",
    "end": "2476930"
  },
  {
    "text": "your spring - objects so if we have a service called authorization checks in this case we're all checks to make it",
    "start": "2476930",
    "end": "2483470"
  },
  {
    "text": "fit on the slide we can say pre-authorized and then say ok in order",
    "start": "2483470",
    "end": "2488539"
  },
  {
    "text": "to add a report to the patient that I'm passing in here I want to check if the",
    "start": "2488539",
    "end": "2494359"
  },
  {
    "text": "current user actually has an active treatment relationship with this particular patient so this would be in",
    "start": "2494359",
    "end": "2500000"
  },
  {
    "text": "the domain of some medical record system for example and this makes it really easy to have custom security integrated",
    "start": "2500000",
    "end": "2508789"
  },
  {
    "text": "in a declarative fashion in your application so that's method level security now if",
    "start": "2508789",
    "end": "2513859"
  },
  {
    "start": "2511000",
    "end": "2549000"
  },
  {
    "text": "you really only care about roles and you also really care about standards well because standards you can use the net",
    "start": "2513859",
    "end": "2520400"
  },
  {
    "text": "roles allowed annotation which is a standard Java annotation it's fully supported by spring security although you have to add support for it",
    "start": "2520400",
    "end": "2527270"
  },
  {
    "text": "explicitly we're saying jsr 250 enabled is true because that's the name of the specification",
    "start": "2527270",
    "end": "2533100"
  },
  {
    "text": "that includes this annotation but this will only allow you to say user should",
    "start": "2533100",
    "end": "2538380"
  },
  {
    "text": "have a certain role on nothing else so in general I just forgot this completely and I would advise you to just use the",
    "start": "2538380",
    "end": "2544680"
  },
  {
    "text": "pre-imposed authorized for everything because you can do roll wise with that but also so much more right so that's declarative",
    "start": "2544680",
    "end": "2552210"
  },
  {
    "start": "2549000",
    "end": "2607000"
  },
  {
    "text": "method level security now in many cases as you're working with this you will find that you also want to do things",
    "start": "2552210",
    "end": "2557670"
  },
  {
    "text": "programmatically probably not directly in your business logic mix with security",
    "start": "2557670",
    "end": "2562860"
  },
  {
    "text": "codes but in some other environments you do need to be able to write code that",
    "start": "2562860",
    "end": "2568080"
  },
  {
    "text": "accesses the current user and that's actually really easy to do because you can always access the current user by",
    "start": "2568080",
    "end": "2573390"
  },
  {
    "text": "looking it up there's a method for that and the way that this works for those of you actually know a little bit about",
    "start": "2573390",
    "end": "2578880"
  },
  {
    "text": "java is that the current user is always stored in a thread local variable called the security context so what we can do",
    "start": "2578880",
    "end": "2585630"
  },
  {
    "text": "is we can look up this authentication object from there and then in the authentication we'll find a user which",
    "start": "2585630",
    "end": "2591750"
  },
  {
    "text": "could be any type of object that you have defined as being a user in your system bringing security is pretty",
    "start": "2591750",
    "end": "2597240"
  },
  {
    "text": "flexible in that and you can find some other things as well like the name and the actual authorities that were",
    "start": "2597240",
    "end": "2602730"
  },
  {
    "text": "assigned to this particular user and you can do all sorts of things with this so just some quick examples of why you might want to use this obviously for",
    "start": "2602730",
    "end": "2610230"
  },
  {
    "start": "2607000",
    "end": "2661000"
  },
  {
    "text": "custom or authorization right maybe you have some custom security check and you cannot implement it easily with",
    "start": "2610230",
    "end": "2615840"
  },
  {
    "text": "something I showed you already well just implement it yourself and write the code that hooks in to all of the places where",
    "start": "2615840",
    "end": "2621270"
  },
  {
    "text": "you need to have that check but another one is to say well I want to make sure that as soon as I have a logged in user",
    "start": "2621270",
    "end": "2626280"
  },
  {
    "text": "I will be able to put that in the output of my logging so that I can always see",
    "start": "2626280",
    "end": "2631710"
  },
  {
    "text": "what user are on behalf of what user we were trying to do something when we issue a log statements that's a really",
    "start": "2631710",
    "end": "2638760"
  },
  {
    "text": "common thing to do also if you are in a multi-tenant system so you have multiple",
    "start": "2638760",
    "end": "2643800"
  },
  {
    "text": "organizations with their own users and their own data it's actually really convenient if you can always access the",
    "start": "2643800",
    "end": "2649650"
  },
  {
    "text": "current tenants so you might want to extract that from the current user and make it available to your application",
    "start": "2649650",
    "end": "2655140"
  },
  {
    "text": "somehow you could auto populate things like database columns right actually using other spring frameworks you will",
    "start": "2655140",
    "end": "2661860"
  },
  {
    "text": "be able to do this automatically but this will allow you to see whenever change was being made to a certain piece",
    "start": "2661860",
    "end": "2667630"
  },
  {
    "text": "of data not only when it happened but also by whom it was done you could make",
    "start": "2667630",
    "end": "2673000"
  },
  {
    "text": "sure that because by default this thing is stored in a thread if you're actually gonna have worker threads doing others",
    "start": "2673000",
    "end": "2679089"
  },
  {
    "text": "things asynchronously but you still want to know on behalf of what user that happens that you can actually propagate",
    "start": "2679089",
    "end": "2684460"
  },
  {
    "text": "the security contractors tons and tons of reasons for doing programmatic access so use it where appropriate just make",
    "start": "2684460",
    "end": "2691750"
  },
  {
    "text": "sure that you don't start mixing security code with all of your regular business logic code because the whole",
    "start": "2691750",
    "end": "2697059"
  },
  {
    "text": "point of the framework is to actually prevent you from from having to do that in the first place so let's quickly see",
    "start": "2697059",
    "end": "2702609"
  },
  {
    "text": "how we're doing on time here okay and I'm gonna skip this one there is support",
    "start": "2702609",
    "end": "2708039"
  },
  {
    "text": "for something called access control lists now I'll show you the first slide for this the idea behind an access",
    "start": "2708039",
    "end": "2713500"
  },
  {
    "start": "2710000",
    "end": "2753000"
  },
  {
    "text": "control list is that you're going to have security constraints that are completely defined directly on a item",
    "start": "2713500",
    "end": "2720849"
  },
  {
    "text": "that you want to secure so they're going to be completely outside of your regular application logic file systems are a",
    "start": "2720849",
    "end": "2726400"
  },
  {
    "text": "good a good example of this where per file I can actually say what users have what type of permissions on this",
    "start": "2726400",
    "end": "2732910"
  },
  {
    "text": "particular file right and they might actually inherit that from a directory etc etc that's an example of an access",
    "start": "2732910",
    "end": "2738519"
  },
  {
    "text": "control which you can do this with sprang security thing is this is not needed in my experience for most",
    "start": "2738519",
    "end": "2743980"
  },
  {
    "text": "applications as I said in the beginning you can trust me so if I say it's not actually needed well that we don't",
    "start": "2743980",
    "end": "2750460"
  },
  {
    "text": "actually have to cover the support for this so some other concerns you can also",
    "start": "2750460",
    "end": "2755529"
  },
  {
    "start": "2753000",
    "end": "2815000"
  },
  {
    "text": "tell sprang security oh whenever a request comes in and some plates a plain HTTP you enforce the secure HTTP",
    "start": "2755529",
    "end": "2762569"
  },
  {
    "text": "redirect so that's called a secure channel support an HTTPS is important",
    "start": "2762569",
    "end": "2768119"
  },
  {
    "text": "even if you don't actually care about the data in your application you might have something like a public site you",
    "start": "2768119",
    "end": "2773769"
  },
  {
    "text": "don't actually have anything you need to protect so you feel that it's okay to do it over plain HTTP it's probably not",
    "start": "2773769",
    "end": "2779680"
  },
  {
    "text": "because that's still a plain HTTP still gives you the possibility that an",
    "start": "2779680",
    "end": "2785200"
  },
  {
    "text": "attacker might actually be able to intercept things and responses for example and serve up malicious content",
    "start": "2785200",
    "end": "2790299"
  },
  {
    "text": "like maybe malicious version of jQuery that we're going to serve up as",
    "start": "2790299",
    "end": "2795670"
  },
  {
    "text": "JavaScript so HTTPS Everywhere is in fact a good idea even if your data itself is not the",
    "start": "2795670",
    "end": "2801700"
  },
  {
    "text": "thing that you're trying to protect on the other hand again just like with the HD HSTs header this is something that",
    "start": "2801700",
    "end": "2808270"
  },
  {
    "text": "you may consider putting in your web server or load balancer or instead of doing it in your application",
    "start": "2808270",
    "end": "2815290"
  },
  {
    "start": "2815000",
    "end": "2837000"
  },
  {
    "text": "level there is support for limiting coverage sessions seeing how often a user can actually log in in parallel",
    "start": "2815290",
    "end": "2821200"
  },
  {
    "text": "with the same account which is especially interesting if you're charging for your content and have a paywall",
    "start": "2821200",
    "end": "2826600"
  },
  {
    "text": "right you don't really want your subscription that the user buys to be shared with the whole friend and family",
    "start": "2826600",
    "end": "2832030"
  },
  {
    "text": "and neighborhood there is built-in support for limiting the amount of concurrent logins you can even do it in",
    "start": "2832030",
    "end": "2837760"
  },
  {
    "text": "a cluster as well and finally one thing I wanted to check is how many of you are actually storing users in your own",
    "start": "2837760",
    "end": "2844510"
  },
  {
    "text": "application database with their hashed passwords that's a considerable number",
    "start": "2844510",
    "end": "2849910"
  },
  {
    "text": "of people that's also my experience is actually quite common to do this now you probably know already that in order to",
    "start": "2849910",
    "end": "2854980"
  },
  {
    "start": "2852000",
    "end": "2900000"
  },
  {
    "text": "do this you shouldn't store plaintext passwords you should use hashes what I still see however a lot is that people",
    "start": "2854980",
    "end": "2861850"
  },
  {
    "text": "will just copy like ten year old blogs that advise you to use something like md5 or sha-1 ah'd intended for storing",
    "start": "2861850",
    "end": "2870490"
  },
  {
    "text": "passwords maybe to make them more secure you're adding a salt well I can tell you",
    "start": "2870490",
    "end": "2875950"
  },
  {
    "text": "one thing if you're actually storing your passwords using md5 with the salt you might as well just stored in plain",
    "start": "2875950",
    "end": "2881290"
  },
  {
    "text": "text right people with GPU based hardware they can actually do a brute force on this trying millions and",
    "start": "2881290",
    "end": "2887050"
  },
  {
    "text": "millions of password per second and they will be able to crack most of your passwords really in no time so make sure",
    "start": "2887050",
    "end": "2892390"
  },
  {
    "text": "that you're using an algorithm that was actually intended for hashing passwords and spring security has support for that",
    "start": "2892390",
    "end": "2898480"
  },
  {
    "text": "out of the box I'll skip this one so to concludes",
    "start": "2898480",
    "end": "2904360"
  },
  {
    "start": "2900000",
    "end": "2952000"
  },
  {
    "text": "basically what you're seeing is that with a framework like spring security you can handle security at many",
    "start": "2904360",
    "end": "2909790"
  },
  {
    "text": "different layers in your application and it's actually important to think about all of those different layers right security is not something that you",
    "start": "2909790",
    "end": "2915610"
  },
  {
    "text": "implement in one place and you're done you need to think about these things so in order to to do that when you actually",
    "start": "2915610",
    "end": "2922120"
  },
  {
    "text": "do that you will find that you get much more of a defense in-depth approach now this is just defense in depth at the",
    "start": "2922120",
    "end": "2927880"
  },
  {
    "text": "application level but if you're actually attending the track today fully at the end of the day you will",
    "start": "2927880",
    "end": "2933000"
  },
  {
    "text": "have also a bit more of an idea of what it means to have defense in depth at all of the layers right including things",
    "start": "2933000",
    "end": "2938970"
  },
  {
    "text": "like operating system network and your Dockers and such but I find that oftentimes people forget to actually",
    "start": "2938970",
    "end": "2944250"
  },
  {
    "text": "think about the application itself so it's really important that if you're using any security framework that you",
    "start": "2944250",
    "end": "2950640"
  },
  {
    "text": "know what it does for you how it works but also what it does by default as I explained there are some actual",
    "start": "2950640",
    "end": "2956220"
  },
  {
    "start": "2952000",
    "end": "2963000"
  },
  {
    "text": "dangerous defaults that might prevent your application or other applications running in the same domain from working",
    "start": "2956220",
    "end": "2962460"
  },
  {
    "text": "correctly so make sure that you read up on this and that at least one person on your team actually knows a little bit about what you're doing and then maybe",
    "start": "2962460",
    "end": "2969660"
  },
  {
    "text": "well you could become unhackable or at least you can blame someone else up in",
    "start": "2969660",
    "end": "2975240"
  },
  {
    "text": "that whole security stack for screwing up and it won't be you as an application you deliver right so with that thanks",
    "start": "2975240",
    "end": "2981600"
  },
  {
    "text": "for attending and do we have time for questions okay",
    "start": "2981600",
    "end": "2987170"
  }
]