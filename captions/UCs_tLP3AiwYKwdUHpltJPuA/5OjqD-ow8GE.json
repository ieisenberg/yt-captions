[
  {
    "start": "0",
    "end": "155000"
  },
  {
    "text": "[Music]",
    "start": "3510",
    "end": "7529"
  },
  {
    "text": "get off me can we hear me okay yes so welcome",
    "start": "12790",
    "end": "18620"
  },
  {
    "text": "this talk is not cool or hyped or fashionable at all it's about modular monoliths some background says talk",
    "start": "18620",
    "end": "27980"
  },
  {
    "text": "right so I'm on Twitter and a number of years ago I said this you know if you can't build decent monoliths don't",
    "start": "27980",
    "end": "35120"
  },
  {
    "text": "bother in microservices because I saw a lot of people jumping on mics overseas and they were just bound to fail and I",
    "start": "35120",
    "end": "41899"
  },
  {
    "text": "thought that was lots of wisdom and so did 305 other people",
    "start": "41899",
    "end": "49358"
  },
  {
    "text": "exactly however hold your applause I got",
    "start": "51789",
    "end": "57829"
  },
  {
    "text": "completely outclassed by the architect cliffie I see you have a poly structure monolith would you like me to convert it",
    "start": "57829",
    "end": "63829"
  },
  {
    "text": "into a poly structure set of microservices 4,000 so I can magnitude",
    "start": "63829",
    "end": "68840"
  },
  {
    "text": "more the other way to look at this is that and that's essentially what this",
    "start": "68840",
    "end": "76190"
  },
  {
    "text": "talks all about for those you who don't know me my name's Simon Brown I am an independent consultant specializing in",
    "start": "76190",
    "end": "82190"
  },
  {
    "text": "software architecture I'm the author of a couple of software architecture books that you can find on lean pub comm I",
    "start": "82190",
    "end": "88310"
  },
  {
    "text": "also wrote a chapter in Uncle Bob Martin's clean architecture book recently the chapter is called the",
    "start": "88310",
    "end": "94820"
  },
  {
    "text": "missing chapter it is there because I do have a copy and all of the stuff in the",
    "start": "94820",
    "end": "101000"
  },
  {
    "text": "missing chapters essentially what this talk is about as well in addition to all",
    "start": "101000",
    "end": "106010"
  },
  {
    "text": "of this stuff I am the creator of the c4 model which I'll explain in a second but in a nutshell it's a hierarchical set of",
    "start": "106010",
    "end": "112550"
  },
  {
    "text": "architecture diagrams to describe software architecture systems and I am the founder / chief code monkey /",
    "start": "112550",
    "end": "119420"
  },
  {
    "text": "everything else of a company called structure Iser which is a set of tooling to create octave diagrams why do I bring",
    "start": "119420",
    "end": "126530"
  },
  {
    "text": "these two things up first of all is the structure Iser stuff the server side is",
    "start": "126530",
    "end": "132700"
  },
  {
    "text": "basically to Java spring and we see web applications - modular monoliths running",
    "start": "132700",
    "end": "138890"
  },
  {
    "text": "on pivotal Web Services cloud foundry platform so all of the stuff I'm talking about in this talk I'm actually using",
    "start": "138890",
    "end": "144200"
  },
  {
    "text": "myself we often call this dog fooding which is a horrible but there we go I'm not using docker or",
    "start": "144200",
    "end": "150360"
  },
  {
    "text": "communities or microsomes or anything like that so again this is all old-fashioned stuff and furthermore if",
    "start": "150360",
    "end": "156510"
  },
  {
    "start": "155000",
    "end": "283000"
  },
  {
    "text": "you have a good code structure it's easy to visualize it so that's kind of where",
    "start": "156510",
    "end": "162090"
  },
  {
    "text": "I'm more interested in this module monolith stuff from c4 c4 is my",
    "start": "162090",
    "end": "169500"
  },
  {
    "text": "diagramming technique its context containers components in code and you can find more information about that at c4 model comm to give you a quick",
    "start": "169500",
    "end": "177000"
  },
  {
    "text": "introduction so this is a system context diagram for a system I built once upon a time basically",
    "start": "177000",
    "end": "182880"
  },
  {
    "text": "I built this thing here as different types of users and different system connections we zoom into that system and",
    "start": "182880",
    "end": "190620"
  },
  {
    "text": "we show the containers inside it by container I mean application or datastore so here we can see that",
    "start": "190620",
    "end": "196440"
  },
  {
    "text": "there's a web application another java application and a bunch of data store things we zoom into this content update",
    "start": "196440",
    "end": "203370"
  },
  {
    "text": "at this java application and we get to see the components inside that java application again it's nice and easy",
    "start": "203370",
    "end": "210330"
  },
  {
    "text": "it's all nice and hierarchical you'll notice in the top right corner there is a tweet component now the tweets",
    "start": "210330",
    "end": "218730"
  },
  {
    "text": "component in this case it is just responsible for putting tweets into a  data store and getting tweets out",
    "start": "218730",
    "end": "224850"
  },
  {
    "text": "again so this is level 3 of my C for diagrams so we zoom in to this single",
    "start": "224850",
    "end": "231990"
  },
  {
    "text": "box the tweet component and we get to see the code that implements it now what",
    "start": "231990",
    "end": "240690"
  },
  {
    "text": "have you noticed well on the previous diagram there was one box called tweet",
    "start": "240690",
    "end": "246720"
  },
  {
    "text": "component and now I've shown you the code there is not one box called tweet component it's gone tweet component does",
    "start": "246720",
    "end": "255840"
  },
  {
    "text": "not actually exist where is it gone the tweet component is actually a bunch of",
    "start": "255840",
    "end": "262170"
  },
  {
    "text": "Java interfaces in this case and Java classes across a layered architecture so",
    "start": "262170",
    "end": "268980"
  },
  {
    "text": "we had this really nice simple story unfolding and then we've got to this final code level the story stopped",
    "start": "268980",
    "end": "277200"
  },
  {
    "text": "working and it's at this point where people say well this doesn't actually because you know that tweet component",
    "start": "277200",
    "end": "284390"
  },
  {
    "start": "283000",
    "end": "297000"
  },
  {
    "text": "exists conceptually yes I guess so I",
    "start": "284390",
    "end": "290000"
  },
  {
    "text": "mean it's a conceptual grouping of a bunch of Java interfaces and classes but",
    "start": "290000",
    "end": "295250"
  },
  {
    "text": "that's not the point here the point here is that any abstractions we use to describe our software should reflect the",
    "start": "295250",
    "end": "303020"
  },
  {
    "start": "297000",
    "end": "437000"
  },
  {
    "text": "code and vice versa and that's essentially what this talk is all about",
    "start": "303020",
    "end": "308030"
  },
  {
    "text": "there's a great book about software architecture I'll I'll refer to called just enough software architecture by",
    "start": "308030",
    "end": "313310"
  },
  {
    "text": "George Fairbanks in this book George talks about what he calls the model code gap so pick to the",
    "start": "313310",
    "end": "320780"
  },
  {
    "text": "scene you are at work you're having an architecture discussion with your friends and colleagues and during this",
    "start": "320780",
    "end": "327320"
  },
  {
    "text": "discussion you're going to be using words like module component service",
    "start": "327320",
    "end": "333460"
  },
  {
    "text": "subsystem layer who's a Java developer",
    "start": "333460",
    "end": "339260"
  },
  {
    "text": "you a good chunky excellent so in Java we often talk about building layered",
    "start": "339260",
    "end": "346370"
  },
  {
    "text": "applications yeah does Java have a layer keyword Oh does Java have a component",
    "start": "346370",
    "end": "356210"
  },
  {
    "text": "keyword not really and that's the problem the languages that we use and",
    "start": "356210",
    "end": "362450"
  },
  {
    "text": "this applies to most other languages as well the languages we use do not have these architectural constructs as",
    "start": "362450",
    "end": "369100"
  },
  {
    "text": "first-class citizens as first-class keywords then this is the model code gap",
    "start": "369100",
    "end": "375350"
  },
  {
    "text": "so we talked about a module or a service or a layer and if you can't map these concepts into the code base there's a",
    "start": "375350",
    "end": "382460"
  },
  {
    "text": "mismatch isn't there a mismatch between these two ways of thinking bottom-up versus top-down this is the model code",
    "start": "382460",
    "end": "388040"
  },
  {
    "text": "gap the other way to think about this is imagine I asked you to draw me an",
    "start": "388040",
    "end": "395420"
  },
  {
    "text": "architecture diagram of your software you will probably draw me a quite high level picture modules components layer",
    "start": "395420",
    "end": "402110"
  },
  {
    "text": "services etc and how they interact her runtime if I were to find some tooling",
    "start": "402110",
    "end": "407300"
  },
  {
    "text": "to reverse engineer a diagram from your actual code base I'm not going to get",
    "start": "407300",
    "end": "413840"
  },
  {
    "text": "the same diagram am I I'm going to get a very low level very precise diagram showing me classes",
    "start": "413840",
    "end": "420740"
  },
  {
    "text": "interfaces folders files namespaces package hierarchies and so on again this",
    "start": "420740",
    "end": "426050"
  },
  {
    "text": "is potentially the moral code gap the model for that the model code gap",
    "start": "426050",
    "end": "432680"
  },
  {
    "text": "manifests itself in a number of different ways one of these is very simply this you go",
    "start": "432680",
    "end": "440090"
  },
  {
    "start": "437000",
    "end": "476000"
  },
  {
    "text": "and ask organizations show me your architecture diagrams and then they have these wonderful looking very colorful",
    "start": "440090",
    "end": "445310"
  },
  {
    "text": "architecture diagrams sometimes and then they ask the development team do these make sense and they don't know because they don't match our code then this",
    "start": "445310",
    "end": "452630"
  },
  {
    "text": "happens a lot and that's the thing I want to try and fix here as well in the",
    "start": "452630",
    "end": "461330"
  },
  {
    "text": "book george fairbanks says one of the ways we can address this model code gap",
    "start": "461330",
    "end": "466940"
  },
  {
    "text": "is to adopt an architectural e evident coding style now this sounds very grand",
    "start": "466940",
    "end": "474350"
  },
  {
    "text": "but basically it's just saying that the code structure should reflect the",
    "start": "474350",
    "end": "479810"
  },
  {
    "start": "476000",
    "end": "513000"
  },
  {
    "text": "architectural intent so there's a nice clean mapping between how we think about",
    "start": "479810",
    "end": "485750"
  },
  {
    "text": "our system from a kind of top-down perspective and what the code ends up looking like and being structured so",
    "start": "485750",
    "end": "493640"
  },
  {
    "text": "this brings me on to how to restructure code and of course there are lots of different ways to do this so I'm going",
    "start": "493640",
    "end": "500030"
  },
  {
    "text": "to walk through a bunch of the more common ways to organize in this case Java code but a lot of like what I'm",
    "start": "500030",
    "end": "505580"
  },
  {
    "text": "going to talk about applies to many other languages as well the first of these is called packaged by layer and",
    "start": "505580",
    "end": "513560"
  },
  {
    "start": "513000",
    "end": "521000"
  },
  {
    "text": "what we're trying to do here is we're trying to organize code base to form what it does from a technical perspective so hopefully if you seen",
    "start": "513560",
    "end": "519979"
  },
  {
    "text": "this a million times before this is a typically a horizontal style of slicing",
    "start": "519979",
    "end": "525560"
  },
  {
    "start": "521000",
    "end": "551000"
  },
  {
    "text": "of packaging of layering and you end up with code bases looking like this so",
    "start": "525560",
    "end": "530750"
  },
  {
    "text": "imagine we are building a web application doing something with orders you might have some sort of web layer up",
    "start": "530750",
    "end": "537440"
  },
  {
    "text": "here and orders controller doing webby stuff you might have some business service thing here like an order service",
    "start": "537440",
    "end": "543350"
  },
  {
    "text": "and they might have some data stuff at the bottom all familiar with this good you got different types of layered",
    "start": "543350",
    "end": "550750"
  },
  {
    "text": "architectures you've got the relaxed versus strict approaches to layering the difference is essentially how many",
    "start": "550750",
    "end": "556690"
  },
  {
    "start": "551000",
    "end": "713000"
  },
  {
    "text": "levels how many layers down can you call do you call just that directly just the layers directly beneath you or can you",
    "start": "556690",
    "end": "563260"
  },
  {
    "text": "skip around layers this is the difference between straight and relaxed",
    "start": "563260",
    "end": "567930"
  },
  {
    "text": "why do we do this why have we done this and the answer is everybody tells us to",
    "start": "568800",
    "end": "577080"
  },
  {
    "text": "so you go and read a book on spring in this case and it says yeah organize your code like this and it's a bunch of",
    "start": "577080",
    "end": "582640"
  },
  {
    "text": "layers you turn the page over it tells you why separation concerns testability etc etc additionally sample",
    "start": "582640",
    "end": "592660"
  },
  {
    "text": "code bases every time you download a sample code base for some new framework they typically are structured in a nice",
    "start": "592660",
    "end": "598540"
  },
  {
    "text": "easy way to understand typically layered rock textures any demos you see at",
    "start": "598540",
    "end": "604780"
  },
  {
    "text": "conferences are typically layered architectures as well and so on and so forth there's something called cargo",
    "start": "604780",
    "end": "611200"
  },
  {
    "text": "cult programming which you may have come across before amazing this is doing stuff because you think you should be",
    "start": "611200",
    "end": "619210"
  },
  {
    "text": "don't really why and I think layered architectures and structuring our code as a set of layers",
    "start": "619210",
    "end": "624550"
  },
  {
    "text": "falls into this category a number of times and we often don't think very",
    "start": "624550",
    "end": "630010"
  },
  {
    "text": "carefully about why we're doing is we just kind of do it because we think we should because that's how everybody else",
    "start": "630010",
    "end": "635530"
  },
  {
    "text": "does this uncle bob martin a number of years ago i wrote this great blog post",
    "start": "635530",
    "end": "642190"
  },
  {
    "text": "called screaming architecture and he basically said if you look at most",
    "start": "642190",
    "end": "647620"
  },
  {
    "text": "enterprise code bases they all look the same web stuff business stuff data stuff",
    "start": "647620",
    "end": "655360"
  },
  {
    "text": "and that's typically reflected in the top-level structure of the folders and packages and namespaces and the co",
    "start": "655360",
    "end": "661540"
  },
  {
    "text": "elements and he says this is not the way that the building world works so if you look at the set of blueprints for a",
    "start": "661540",
    "end": "668650"
  },
  {
    "text": "library or a house or museum you can tell it's a library or a house or in resume just by looking at the blueprints",
    "start": "668650",
    "end": "674940"
  },
  {
    "text": "and so this leads us on to something else",
    "start": "674940",
    "end": "681120"
  },
  {
    "text": "Martin Fowler said a similar thing as well he said this layered architecture this layered code structuring is a good",
    "start": "681490",
    "end": "688700"
  },
  {
    "text": "way to start it's nice and easy it's easy to explain to people however once",
    "start": "688700",
    "end": "695150"
  },
  {
    "text": "you get to scale your product to scale your project you now have to start",
    "start": "695150",
    "end": "700520"
  },
  {
    "text": "thinking about modularity inside the layers so rather than chopping your cut",
    "start": "700520",
    "end": "707390"
  },
  {
    "text": "out like this maybe you need to chop it up in a different manner the other thing",
    "start": "707390",
    "end": "715490"
  },
  {
    "start": "713000",
    "end": "762000"
  },
  {
    "text": "to bear in mind here is if you do have a layered architecture like you're building a web application and you want",
    "start": "715490",
    "end": "721070"
  },
  {
    "text": "to add a field to our webpage you end up changing stuff in the web page and then",
    "start": "721070",
    "end": "726830"
  },
  {
    "text": "a web controller stuff and then the base in the business or service layer and also in the data layer so many changes",
    "start": "726830",
    "end": "733640"
  },
  {
    "text": "that we make to our software systems actually go across all layers anyway so a layered architecture is not a",
    "start": "733640",
    "end": "739520"
  },
  {
    "text": "particularly good or efficient way to structure code as well from those perspectives alternative approaches",
    "start": "739520",
    "end": "748060"
  },
  {
    "text": "number two package by feature so this is basically flipping the whole thing 90",
    "start": "748060",
    "end": "754310"
  },
  {
    "text": "degrees and rather than organizing our code and grouping our code by technical",
    "start": "754310",
    "end": "759440"
  },
  {
    "text": "thing we're now doing it by functional thing feature set aggregate routes there",
    "start": "759440",
    "end": "767450"
  },
  {
    "start": "762000",
    "end": "776000"
  },
  {
    "text": "are a number of ways we can slice our codebase up vertically if you want to say that how you do this is of course",
    "start": "767450",
    "end": "774920"
  },
  {
    "text": "entirely up to you but it is that vertical slicing so we're grouping together things related to a certain",
    "start": "774920",
    "end": "781370"
  },
  {
    "start": "776000",
    "end": "811000"
  },
  {
    "text": "feature set or I could go route for example this is what it might look like",
    "start": "781370",
    "end": "787390"
  },
  {
    "text": "so rather than having our orders functionality split across web packages",
    "start": "787390",
    "end": "792500"
  },
  {
    "text": "business packages data packages we throw it all together in a single orders package is this better than packaged by",
    "start": "792500",
    "end": "805310"
  },
  {
    "text": "layer debatable it's just different one of the cited benefits includes it's",
    "start": "805310",
    "end": "813530"
  },
  {
    "start": "811000",
    "end": "904000"
  },
  {
    "text": "being it's easy to find code related to orders I guess I",
    "start": "813530",
    "end": "819120"
  },
  {
    "text": "because there's a wall in one place however with modern ideas you can use searching so a lot of these arguments",
    "start": "819120",
    "end": "825690"
  },
  {
    "text": "not that great to be honest you do get higher cohesion because all of your",
    "start": "825690",
    "end": "831210"
  },
  {
    "text": "order stuff is in one place now one of the big problems with this way to structure code is that if you have",
    "start": "831210",
    "end": "838560"
  },
  {
    "text": "orders and customers and you need to have a link between the two where do you make that link so there are some",
    "start": "838560",
    "end": "846650"
  },
  {
    "text": "interesting side effects and caveats to package by feature for example sometimes",
    "start": "846650",
    "end": "853500"
  },
  {
    "text": "when I apology ensues and I say you know who does package by layer and nobody says anything and I say who does package",
    "start": "853500",
    "end": "859350"
  },
  {
    "text": "by feature in a few more hands go up and then you asked who does ports adapters and many more hands go up and this seems",
    "start": "859350",
    "end": "865380"
  },
  {
    "text": "to be a much more common approach to structuring monolithic applications these days supply ports and actors",
    "start": "865380",
    "end": "873200"
  },
  {
    "text": "essentially what you're trying to do here is you're trying to keep your domain related business code separate",
    "start": "873200",
    "end": "879600"
  },
  {
    "text": "from your technical or infrastructure related code and the way this works is",
    "start": "879600",
    "end": "885270"
  },
  {
    "text": "that there's an inside and an outside and there are a number of different approaches and themes on basically this",
    "start": "885270",
    "end": "891000"
  },
  {
    "text": "core central idea some of them you may have heard of for hexagonal architectures clean architectures and in architectures and some one so forth so",
    "start": "891000",
    "end": "898980"
  },
  {
    "text": "you have an outside which is about your technology and your interfaces with the outside world and you have an inside",
    "start": "898980",
    "end": "904740"
  },
  {
    "start": "904000",
    "end": "1209000"
  },
  {
    "text": "which is about your business domain so the inside is technology agnostic those",
    "start": "904740",
    "end": "910560"
  },
  {
    "text": "of you familiar with the main different design you're typically expressing the concepts on the inside in terms of that",
    "start": "910560",
    "end": "915570"
  },
  {
    "text": "ddd ubiquitous language so customer's orders products etc and the outside is",
    "start": "915570",
    "end": "921750"
  },
  {
    "text": "the text specific stuff so when you're writing interfaces and adapters to databases and external parties and api",
    "start": "921750",
    "end": "928650"
  },
  {
    "text": "is that's where that code lives and there's one rule here essentially the",
    "start": "928650",
    "end": "935400"
  },
  {
    "text": "outside depends on the inside never the other way around so it looks like this",
    "start": "935400",
    "end": "941209"
  },
  {
    "text": "you have two domain stuff in the middle your infrastructure stuff on the outside",
    "start": "941209",
    "end": "946950"
  },
  {
    "text": "and all the defense the arrows point inwards and this is what it might look like from",
    "start": "946950",
    "end": "952959"
  },
  {
    "text": "a kind of class diagram perspective in Java just this package here represents the",
    "start": "952959",
    "end": "958240"
  },
  {
    "text": "domain stuff on the inside and the arrows again point inwards I suspect",
    "start": "958240",
    "end": "971410"
  },
  {
    "text": "that this approach to structuring code is also cargo coltd a lot and one of the",
    "start": "971410",
    "end": "981250"
  },
  {
    "text": "reasons I say this is because not all frameworks are created equal and what I",
    "start": "981250",
    "end": "986620"
  },
  {
    "text": "mean by this is it's easier to wrap up some frameworks and some interactions",
    "start": "986620",
    "end": "991870"
  },
  {
    "text": "with the outside world than others so imagine you are building a web application and your web application has",
    "start": "991870",
    "end": "997990"
  },
  {
    "text": "100 different pages that you display to the user you have to basically create",
    "start": "997990",
    "end": "1003360"
  },
  {
    "text": "100 adapters and wrappers one per page essentially if all of your 100 pages end",
    "start": "1003360",
    "end": "1011370"
  },
  {
    "text": "up talking to three or four tables in a database it's easier to wrap up three or",
    "start": "1011370",
    "end": "1016380"
  },
  {
    "text": "four tables on a database then provide wrappers and adapters into 100 web pages so you have to be careful about taking",
    "start": "1016380",
    "end": "1024750"
  },
  {
    "text": "ports and adapters of face value because you might end up writing lots of adapter code and abstraction code that's not",
    "start": "1024750",
    "end": "1030808"
  },
  {
    "text": "really necessary I have seen people for example wrap up frameworks like spring MVC so spring MVC kind of sits in this",
    "start": "1030809",
    "end": "1038040"
  },
  {
    "text": "outside and then they add additional abstractions on top of spring MVC to make sure that their domain code is not",
    "start": "1038040",
    "end": "1044839"
  },
  {
    "text": "dependent upon spring MVC and if you're thinking that's nuts it is because",
    "start": "1044839",
    "end": "1050280"
  },
  {
    "text": "spring MVC already provides a nice simple abstraction over HTTP so you're kind of wrapping up the wrapping up the",
    "start": "1050280",
    "end": "1056070"
  },
  {
    "text": "wrapping up so just basically carefully this is what I'm saying having said all",
    "start": "1056070",
    "end": "1062790"
  },
  {
    "text": "of this right so let's go back to our simple latex I led example so we have",
    "start": "1062790",
    "end": "1069270"
  },
  {
    "text": "this code we have web stuff business stuff data stuff and you have a nice big",
    "start": "1069270",
    "end": "1075240"
  },
  {
    "text": "system thousands of lines of codes all working great somebody new joins your team and you say",
    "start": "1075240",
    "end": "1082640"
  },
  {
    "text": "ah hello I've got a great feature nice introductory feature it's not too",
    "start": "1082640",
    "end": "1087830"
  },
  {
    "text": "tricky I'd like you to add it to the codebase the new person comes on they download a copy the source code they",
    "start": "1087830",
    "end": "1095990"
  },
  {
    "text": "have a look through the source code they try to figure out what's going on and they say yeah I think I know how to add this feature and they take this and they",
    "start": "1095990",
    "end": "1104720"
  },
  {
    "text": "do that yeah this might be the best way",
    "start": "1104720",
    "end": "1113510"
  },
  {
    "text": "to implement that feature or it might not and maybe you had a principal on",
    "start": "1113510",
    "end": "1119630"
  },
  {
    "text": "your team that says make sure we have a strict layered approach and we don't cut start by passing layers but if you",
    "start": "1119630",
    "end": "1125659"
  },
  {
    "text": "didn't tell that to you new new joiner they might do that because they think it's a more efficient and if left",
    "start": "1125659",
    "end": "1132620"
  },
  {
    "text": "unchecked you get that happen one of the",
    "start": "1132620",
    "end": "1138350"
  },
  {
    "text": "problems with languages like Java is that what people typically do is you know this might be a Java package and",
    "start": "1138350",
    "end": "1144130"
  },
  {
    "text": "this might be a separate Java package in order for this thing to talk to this",
    "start": "1144130",
    "end": "1149480"
  },
  {
    "text": "thing in a separate package this thing has to be public once this thing is public it can be called from here but",
    "start": "1149480",
    "end": "1156440"
  },
  {
    "text": "also it can also be called from anywhere else in your codebase you see the same with c-sharp and the internal key work",
    "start": "1156440",
    "end": "1163210"
  },
  {
    "text": "for example so again you do have to be a",
    "start": "1163210",
    "end": "1168740"
  },
  {
    "text": "bit careful here and this is what we typically get to the big ball of mud",
    "start": "1168740",
    "end": "1179139"
  },
  {
    "text": "it's a haphazardly structured system and I love this bit dictated more by",
    "start": "1180370",
    "end": "1187490"
  },
  {
    "text": "expediency so we knew in a hurry to add stuff to your codebase yeah we'll do the things that quickest way we possibly can",
    "start": "1187490",
    "end": "1193510"
  },
  {
    "text": "and maybe that's not good for the long term structure of your codebase the",
    "start": "1193510",
    "end": "1199490"
  },
  {
    "text": "longevity of your codebase so it's at this point somebody says we'll hang on a",
    "start": "1199490",
    "end": "1205490"
  },
  {
    "text": "second we don't really do this in the real world because what we have on our team is a set of architectural",
    "start": "1205490",
    "end": "1210559"
  },
  {
    "start": "1209000",
    "end": "1227000"
  },
  {
    "text": "principles and these architectural allow us to introduce constraints and",
    "start": "1210559",
    "end": "1216430"
  },
  {
    "text": "guidelines and boundaries and through these architectural principles people",
    "start": "1216430",
    "end": "1222440"
  },
  {
    "text": "won't make those shortcuts and these architectural principles typically say stuff like that so web controllers",
    "start": "1222440",
    "end": "1229670"
  },
  {
    "start": "1227000",
    "end": "1371000"
  },
  {
    "text": "should never talk to data access repositories directly this will almost",
    "start": "1229670",
    "end": "1234800"
  },
  {
    "text": "go through these services layer maybe seen these sorts principles in use yeah",
    "start": "1234800",
    "end": "1242260"
  },
  {
    "text": "and then you ask people how do you enforce this and their faces go blank",
    "start": "1242260",
    "end": "1249940"
  },
  {
    "text": "and they go oh I know how to answer this question we trust our developers because",
    "start": "1249940",
    "end": "1258350"
  },
  {
    "text": "we're agile yes and how does that work",
    "start": "1258350",
    "end": "1264380"
  },
  {
    "text": "out for you and in some cases this works beautifully right don't get me wrong there are definitely teams I've worked",
    "start": "1264380",
    "end": "1269570"
  },
  {
    "text": "with who can do this and they're fantastic for the rest of us yeah",
    "start": "1269570",
    "end": "1277900"
  },
  {
    "text": "we're all human and if we need to move fast we might start taking some shortcuts and",
    "start": "1277900",
    "end": "1286880"
  },
  {
    "text": "if we were on the scrum train and we tried to sprint sprint sprint deliver deliver deliver we might take more",
    "start": "1286880",
    "end": "1292220"
  },
  {
    "text": "shortcuts and we've apps really should do and then we get a few weeks in and we go we need a refactoring spring because",
    "start": "1292220",
    "end": "1297950"
  },
  {
    "text": "our code base is a bit of a mess now sorry so this is the stuff you have to watch out for",
    "start": "1297950",
    "end": "1304090"
  },
  {
    "text": "it is however 2018 and given it is 2018",
    "start": "1304090",
    "end": "1310490"
  },
  {
    "text": "and we have all this machine learning and AI stuff we should be able to build some tooling that helps us build",
    "start": "1310490",
    "end": "1316250"
  },
  {
    "text": "well-structured code bases in other words we should be able to use tools that help us create nicely structured",
    "start": "1316250",
    "end": "1323330"
  },
  {
    "text": "code bases does it redo this it's like",
    "start": "1323330",
    "end": "1330560"
  },
  {
    "text": "one personally this is not a common thing there's a book that was released",
    "start": "1330560",
    "end": "1336530"
  },
  {
    "text": "recently called building evolutionary architectures and in that book they talk about Fitness functions and fitness",
    "start": "1336530",
    "end": "1342680"
  },
  {
    "text": "functions are the quite broad in nature and you can use them for in quality attributes scalability",
    "start": "1342680",
    "end": "1349279"
  },
  {
    "text": "performance security that sort of things part of your build process you can also use Fitness functions as a way to assert",
    "start": "1349279",
    "end": "1356570"
  },
  {
    "text": "something about the fitness of your code base so cyclomatic complexity coupling",
    "start": "1356570",
    "end": "1362960"
  },
  {
    "text": "and so on and so forth and one of the ways to do this of course is to use",
    "start": "1362960",
    "end": "1368419"
  },
  {
    "text": "tooling and there are a number of tools out there that can help you create some fitness functions that run a surgeon's",
    "start": "1368419",
    "end": "1375080"
  },
  {
    "start": "1371000",
    "end": "1398000"
  },
  {
    "text": "on how good or bad objectively your code is static analysis tools and you have a",
    "start": "1375080",
    "end": "1384110"
  },
  {
    "text": "bunch of architecture violation checking tools so I'm thinking about things like JQ assistant",
    "start": "1384110",
    "end": "1389539"
  },
  {
    "text": "they can write rules with arcs Java arc unit and so on and so forth and what you",
    "start": "1389539",
    "end": "1395779"
  },
  {
    "text": "can do with these tools is you can start to define rules that look a bit like this so it's the same thing as the",
    "start": "1395779",
    "end": "1401000"
  },
  {
    "start": "1398000",
    "end": "1435000"
  },
  {
    "text": "architectural principles you know types in star saw slash web our web package should not have access to star star",
    "start": "1401000",
    "end": "1408080"
  },
  {
    "text": "slash data stuff in our data access package and you integrate these things with your build process and hopefully",
    "start": "1408080",
    "end": "1413899"
  },
  {
    "text": "somebody does something silly you'll put breaks and then you turn this rule off because it's annoying but that's a",
    "start": "1413899",
    "end": "1419840"
  },
  {
    "text": "different story yeah we all do that right adding your tests I do kind of like this idea",
    "start": "1419840",
    "end": "1428840"
  },
  {
    "text": "because this this gets us a bit better than where we are today however it feels",
    "start": "1428840",
    "end": "1435379"
  },
  {
    "start": "1435000",
    "end": "1478000"
  },
  {
    "text": "like a horrible hack so we have to write a bunch of external tooling to verify",
    "start": "1435379",
    "end": "1440960"
  },
  {
    "text": "the actual tooling we're building is of a decent quality and that just doesn't really sit well with me because we can",
    "start": "1440960",
    "end": "1448730"
  },
  {
    "text": "turn it off so what's the answer and the",
    "start": "1448730",
    "end": "1455779"
  },
  {
    "text": "answer is maybe we need to get better at using the tools we have available to us",
    "start": "1455779",
    "end": "1461200"
  },
  {
    "text": "today like the compiler and it's at this",
    "start": "1461200",
    "end": "1468320"
  },
  {
    "text": "point people will ultimately say well hang on a second if you're talking about you know Java and using the compiler and",
    "start": "1468320",
    "end": "1474700"
  },
  {
    "text": "access modifiers Java's flawed",
    "start": "1474700",
    "end": "1479980"
  },
  {
    "start": "1478000",
    "end": "1550000"
  },
  {
    "text": "they say why is Java flawed and they'll give you all of the reasons why Java is for my kind of access modifier",
    "start": "1480330",
    "end": "1485680"
  },
  {
    "text": "perspective you know we don't have so if you if you have a package there's no kind of sub package thing in Java and",
    "start": "1485680",
    "end": "1493570"
  },
  {
    "text": "she you very quickly get to explore the different flaws of the Java packaging system and access modifiers and things",
    "start": "1493570",
    "end": "1500770"
  },
  {
    "text": "like this and that's fair to an extent however that's what we have and unless",
    "start": "1500770",
    "end": "1509320"
  },
  {
    "text": "you want to go and writes new languages that have first-class keywords like layer and service and components then",
    "start": "1509320",
    "end": "1515140"
  },
  {
    "text": "maybe we should just try and figure out how to use we've got now so with this in mind I have another option for you and",
    "start": "1515140",
    "end": "1523120"
  },
  {
    "text": "this option is what I call package by component and it's really a kind of",
    "start": "1523120",
    "end": "1530440"
  },
  {
    "text": "hybrid approach to package by layer and package by feature and what I'm really",
    "start": "1530440",
    "end": "1536230"
  },
  {
    "text": "trying to do here is I'm trying to bundle together all of the code that belongs to our component in the same",
    "start": "1536230",
    "end": "1544600"
  },
  {
    "text": "place what I mean by components because",
    "start": "1544600",
    "end": "1550390"
  },
  {
    "start": "1550000",
    "end": "1628000"
  },
  {
    "text": "this is a horribly hugely overloaded term what I mean by component is essentially this it's a grouping of",
    "start": "1550390",
    "end": "1555850"
  },
  {
    "text": "related functionality hopefully behind a nice clean simple interface and this",
    "start": "1555850",
    "end": "1560890"
  },
  {
    "text": "component runs inside something like an application if you're wondering where",
    "start": "1560890",
    "end": "1566920"
  },
  {
    "text": "this came from it comes from the abstractions behind my c4 diagram overall so a software system is made up",
    "start": "1566920",
    "end": "1573520"
  },
  {
    "text": "of containers not docker about applications and data source authorities containers contain components components",
    "start": "1573520",
    "end": "1580180"
  },
  {
    "text": "are built from code elements so what I'm trying to do essentially is get the architecture view of the world to marry",
    "start": "1580180",
    "end": "1586150"
  },
  {
    "text": "up with the code structure and the code view of the world and package by component basically looks like this so",
    "start": "1586150",
    "end": "1594580"
  },
  {
    "text": "my personal preference here and there are different ways to do this but my personal preference is always to keep the kind of UI related stuff whether",
    "start": "1594580",
    "end": "1601540"
  },
  {
    "text": "that's web UI eyes or ap is separate from the non visual stuff so if I'm",
    "start": "1601540",
    "end": "1607060"
  },
  {
    "text": "building some orders from County there's an orders controller doing orders web stuff and there's a whole bunch of",
    "start": "1607060",
    "end": "1613480"
  },
  {
    "text": "non-visual orders related functionality so business service stuff business logic",
    "start": "1613480",
    "end": "1618549"
  },
  {
    "text": "and data access so this whole thing I'm going to call an order component what",
    "start": "1618549",
    "end": "1630070"
  },
  {
    "start": "1628000",
    "end": "1648000"
  },
  {
    "text": "I'm trying to do here is essentially apply component based thinking to",
    "start": "1630070",
    "end": "1637120"
  },
  {
    "text": "monolithic code base so this is good old-fashioned component based thinking component based design applied to",
    "start": "1637120",
    "end": "1643570"
  },
  {
    "text": "monolithic code bases and what I'm trying to do here essentially is apply",
    "start": "1643570",
    "end": "1649570"
  },
  {
    "start": "1648000",
    "end": "1674000"
  },
  {
    "text": "modularity as a guiding principle to a lot of the architectural and therefore",
    "start": "1649570",
    "end": "1654640"
  },
  {
    "text": "code structured decisions I end up making so I'm always thinking what are",
    "start": "1654640",
    "end": "1662530"
  },
  {
    "text": "the big coarse-grained things that I would like my system to be made out of what are the high-level structural",
    "start": "1662530",
    "end": "1669460"
  },
  {
    "text": "building blocks essentially of maimana monolithic application the other way to",
    "start": "1669460",
    "end": "1674559"
  },
  {
    "start": "1674000",
    "end": "1692000"
  },
  {
    "text": "look at this is basically I'm separating interface from implementation this is another good old-fashioned design technique interestingly this is exactly",
    "start": "1674559",
    "end": "1687820"
  },
  {
    "text": "what we see with micro-services isn't it so with package by component I'm going",
    "start": "1687820",
    "end": "1695799"
  },
  {
    "start": "1692000",
    "end": "1761000"
  },
  {
    "text": "to have some sort of interface some sort of public Java interface and a whole",
    "start": "1695799",
    "end": "1701020"
  },
  {
    "text": "bunch of package protected implementation code with the",
    "start": "1701020",
    "end": "1706600"
  },
  {
    "text": "microservice I'm going to have again some sort of public interface Jason over",
    "start": "1706600",
    "end": "1713110"
  },
  {
    "text": "HTTP messaging whatever some sort of networked public API and a whole bunch",
    "start": "1713110",
    "end": "1719169"
  },
  {
    "text": "of private implementation code the you can't see inside of so if I have an orders micro service you can't call my",
    "start": "1719169",
    "end": "1726309"
  },
  {
    "text": "data layer inside the orders Micra so it's hidden behind the public API the same thing is true of what I'm trying to",
    "start": "1726309",
    "end": "1731410"
  },
  {
    "text": "do with package by component so I might have a bunch of classes and interfaces sight inside my java components but you",
    "start": "1731410",
    "end": "1737740"
  },
  {
    "text": "can't get access to this because I'm going to use Javas package protection mechanism and hide it from the outside world so this is one component per java",
    "start": "1737740",
    "end": "1745299"
  },
  {
    "text": "package it's about putting some boundaries some impermeable Rize round my code so this",
    "start": "1745299",
    "end": "1754210"
  },
  {
    "text": "is all very easy to do all right but the",
    "start": "1754210",
    "end": "1760480"
  },
  {
    "text": "devil is in the implementation details so you can come all the way through this",
    "start": "1760480",
    "end": "1767230"
  },
  {
    "start": "1761000",
    "end": "1815000"
  },
  {
    "text": "story and have a bunch of really nice ideas about how you want to structure your code base and then it all falls",
    "start": "1767230",
    "end": "1773770"
  },
  {
    "text": "down that last hurdle and you end up with the big ball of mud and you don't really know how that happened and the",
    "start": "1773770",
    "end": "1779530"
  },
  {
    "text": "reason often happens is because of our friends the public key word the number",
    "start": "1779530",
    "end": "1787450"
  },
  {
    "text": "of times even even literally late last week I went through some of my own code and I was reading I was like this thing",
    "start": "1787450",
    "end": "1793809"
  },
  {
    "text": "does not need to be public delete we just type public by default and I don't",
    "start": "1793809",
    "end": "1799090"
  },
  {
    "text": "know why it's muscle memory a lot of the tooling we use you know IDs you go",
    "start": "1799090",
    "end": "1804340"
  },
  {
    "text": "through wizards and they create you a bunch of public classes like stop doing that just stop using the public key when it's not necessary half the time what's",
    "start": "1804340",
    "end": "1813520"
  },
  {
    "text": "the problem the public key word there's a big difference between organizing code",
    "start": "1813520",
    "end": "1819520"
  },
  {
    "start": "1815000",
    "end": "2089000"
  },
  {
    "text": "and encapsulating code and the problem we're using the public key word is you're really missing out on many of the",
    "start": "1819520",
    "end": "1825880"
  },
  {
    "text": "benefits related to encapsulation well these two concepts are very very different I've given you four examples",
    "start": "1825880",
    "end": "1835690"
  },
  {
    "text": "of some orders related functionality number one package by layer number two",
    "start": "1835690",
    "end": "1843520"
  },
  {
    "text": "package by feature number three ports and adapters number for my package by a component approach if we take these four",
    "start": "1843520",
    "end": "1852309"
  },
  {
    "text": "simple examples and we assume that all of those interfaces and classes are made",
    "start": "1852309",
    "end": "1859420"
  },
  {
    "text": "public so again this is has a java slot but you can apply this to other languages if we if we make the",
    "start": "1859420",
    "end": "1865300"
  },
  {
    "text": "assumption all of these types in the examples are public you get four",
    "start": "1865300",
    "end": "1870460"
  },
  {
    "text": "versions of the same thing that are very conceptually different so they're conceptually different architectural",
    "start": "1870460",
    "end": "1876010"
  },
  {
    "text": "styles and structures but they're actually syntactic identical so here are the four examples",
    "start": "1876010",
    "end": "1885730"
  },
  {
    "text": "laid out side by side packs bilayer",
    "start": "1885730",
    "end": "1891080"
  },
  {
    "text": "picks my future ports and adapters package by component if we make this assumption to all of these types in",
    "start": "1891080",
    "end": "1897080"
  },
  {
    "text": "these packages of public all we are using these packages for is organization",
    "start": "1897080",
    "end": "1902929"
  },
  {
    "text": "their like folders we have no encapsulation going on here whatsoever so if we remove these packages from",
    "start": "1902929",
    "end": "1914000"
  },
  {
    "text": "these class diagrams you get that",
    "start": "1914000",
    "end": "1919780"
  },
  {
    "text": "they're all the same it's a neat trick isn't it this goes a",
    "start": "1921010",
    "end": "1929330"
  },
  {
    "text": "long way to explaining how sometimes when I look at say a ports and adapters",
    "start": "1929330",
    "end": "1934490"
  },
  {
    "text": "code base it looks like a layered architecture and often it is because let",
    "start": "1934490",
    "end": "1939799"
  },
  {
    "text": "all the arrows match up you're just dumping public classes in different packages but there's no encapsulation",
    "start": "1939799",
    "end": "1945380"
  },
  {
    "text": "there so you have to be super careful with the use of the public key word we",
    "start": "1945380",
    "end": "1953570"
  },
  {
    "text": "have access modifiers though in Java and other languages so if we use the access modifiers appropriately we can start to",
    "start": "1953570",
    "end": "1961970"
  },
  {
    "text": "draw some very different pictures so I'm going to bring back the packages onto this diagram and I'm going to fade out",
    "start": "1961970",
    "end": "1967970"
  },
  {
    "text": "I'm going to grayed out the implementation types that could",
    "start": "1967970",
    "end": "1973130"
  },
  {
    "text": "potentially be made Java package protected and therefore hidden outside that package you kind of have to work",
    "start": "1973130",
    "end": "1982070"
  },
  {
    "text": "this through in your head so in the layered architecture example this orders",
    "start": "1982070",
    "end": "1987409"
  },
  {
    "text": "controller needs access to this order service so this service interface needs to be public the implementation class",
    "start": "1987409",
    "end": "1993740"
  },
  {
    "text": "can actually be packaged protected if you're wondering how do you instantiate a package protected class ask Spring",
    "start": "1993740",
    "end": "1999860"
  },
  {
    "text": "you'll do it for you in all over this service implementation class to use this orders repository the interface needs to",
    "start": "1999860",
    "end": "2006789"
  },
  {
    "text": "be public implementation cost can again be package protected with package by feature you need some",
    "start": "2006789",
    "end": "2013880"
  },
  {
    "text": "sort of public entry point into that package and everything else can be hidden from the outside world assuming",
    "start": "2013880",
    "end": "2020179"
  },
  {
    "text": "no other slice needs access to stuff in this orders package with the ports and",
    "start": "2020179",
    "end": "2025850"
  },
  {
    "text": "adapters architecture that thing again needs to be made public because it's",
    "start": "2025850",
    "end": "2031190"
  },
  {
    "text": "accessible by the outside world this interface needs to be made public the implementation class can be packaged",
    "start": "2031190",
    "end": "2038420"
  },
  {
    "text": "protected and this interface needs to be public because it's it's dependent upon by this potentially package protected in",
    "start": "2038420",
    "end": "2045410"
  },
  {
    "text": "relation costs sitting outside in port in my package my component again that",
    "start": "2045410",
    "end": "2051888"
  },
  {
    "text": "thing is just public and we have a public interface here and a bunch of package protected implementation code so",
    "start": "2051889",
    "end": "2060830"
  },
  {
    "text": "now you can see they're actually layered architectures and ports adapters are not that different depending on how you look",
    "start": "2060830",
    "end": "2066290"
  },
  {
    "text": "at them whereas these other two versions are quite different and that's the thing",
    "start": "2066290",
    "end": "2073570"
  },
  {
    "text": "it's always worth having some extra thinking time and making sure that the",
    "start": "2073570",
    "end": "2079220"
  },
  {
    "text": "way you actually implement in structural code matches back to how you intend you're arctor to look from a top-down",
    "start": "2079220",
    "end": "2085850"
  },
  {
    "text": "perspective and one of the things I think you should do here is use encapsulation and really use",
    "start": "2085850",
    "end": "2092000"
  },
  {
    "start": "2089000",
    "end": "2138000"
  },
  {
    "text": "encapsulation to minimize the number of potential dependencies if you have a",
    "start": "2092000",
    "end": "2097580"
  },
  {
    "text": "code base and everything is public everything can be called from everything else and you get lots of potential",
    "start": "2097580",
    "end": "2102710"
  },
  {
    "text": "dependencies once you start hiding code and using information hiding in a capsulation you can only have",
    "start": "2102710",
    "end": "2108650"
  },
  {
    "text": "dependencies on public things the fewer public things you have the fewer",
    "start": "2108650",
    "end": "2114260"
  },
  {
    "text": "potential dependencies you can have and the other way to look at it is this the surface area of any internal public API",
    "start": "2114260",
    "end": "2120350"
  },
  {
    "text": "should match your architectural intent so if you have an active diagram that as a set of components or modules and",
    "start": "2120350",
    "end": "2126770"
  },
  {
    "text": "layers make sure your code reflects that then that people can't bypass what you considered to be a module or component",
    "start": "2126770",
    "end": "2133580"
  },
  {
    "text": "and start accessing internals directly so base what I'm saying here is if you",
    "start": "2133580",
    "end": "2140060"
  },
  {
    "start": "2138000",
    "end": "2161000"
  },
  {
    "text": "are building one ethic application you do have some options here to use the compiler to enforce some of your architectural",
    "start": "2140060",
    "end": "2147510"
  },
  {
    "text": "boundaries and your architectural ideas in the tent this is like the simple",
    "start": "2147510",
    "end": "2154470"
  },
  {
    "text": "version of the whole story because once you kind of take these ideas you can go you can go a number of steps further and",
    "start": "2154470",
    "end": "2160730"
  },
  {
    "text": "there are other ways to diiie couple code elements for example you can use a module framework like the the new / old",
    "start": "2160730",
    "end": "2169860"
  },
  {
    "start": "2161000",
    "end": "2348000"
  },
  {
    "text": "Java 9 module framework that people are not using it the Java module framework allows you to distinguish public types",
    "start": "2169860",
    "end": "2177780"
  },
  {
    "text": "from published types so you can write your entire code base as a bunch of public types and when you create your",
    "start": "2177780",
    "end": "2184470"
  },
  {
    "text": "module manifest you only export and publish specific subsets of those types if anybody tries to use your public",
    "start": "2184470",
    "end": "2191070"
  },
  {
    "text": "types that are not published they can't do that so there are module frameworks out there that allow you to again create",
    "start": "2191070",
    "end": "2197280"
  },
  {
    "text": "this distinction this 2d couple interface from implementation you could",
    "start": "2197280",
    "end": "2202950"
  },
  {
    "text": "also go further and split your source tree into multiple parts so multiple maven modules great great Draven",
    "start": "2202950",
    "end": "2210960"
  },
  {
    "text": "obviously graving a grade on modules and so on and so forth so you have one source code tree per thing per module",
    "start": "2210960",
    "end": "2218400"
  },
  {
    "text": "per layer whatever you do have to careful with this if you are doing ports",
    "start": "2218400",
    "end": "2223770"
  },
  {
    "text": "and adapters you know having separate source trees is I think a recommended",
    "start": "2223770",
    "end": "2228990"
  },
  {
    "text": "approach because one of the anti patents I see with ports and adapters style architectures is you have two code bases",
    "start": "2228990",
    "end": "2235470"
  },
  {
    "text": "one for the stuff in the middle and one for everything else around the outside so you have like a domain source tree",
    "start": "2235470",
    "end": "2242220"
  },
  {
    "text": "and an infrastructure source tree and the problem with doing this is if you",
    "start": "2242220",
    "end": "2247920"
  },
  {
    "text": "have one source tree with all of your infrastructure code it's very easy for",
    "start": "2247920",
    "end": "2253080"
  },
  {
    "text": "infrastructure code to talk to each other so again if you slice your ports",
    "start": "2253080",
    "end": "2258720"
  },
  {
    "text": "and adapters code straight into multiple code trees you can stop this thing happening at compile time for example",
    "start": "2258720",
    "end": "2265190"
  },
  {
    "text": "the problem of doing this is there lots of trade-offs because the more source",
    "start": "2265190",
    "end": "2270420"
  },
  {
    "text": "trees you have slower and more complicated your build process gets so",
    "start": "2270420",
    "end": "2275460"
  },
  {
    "text": "there's probably some sweet spot depending what it is you building in the sizing of let's see of the thing you're building more generally",
    "start": "2275460",
    "end": "2282810"
  },
  {
    "text": "of course every decoupling mode has different trade-offs and this is where",
    "start": "2282810",
    "end": "2288330"
  },
  {
    "text": "we actually get back to Microsoft in because micro-services is if you like the ultimate decoupling mode isn't it",
    "start": "2288330",
    "end": "2294980"
  },
  {
    "text": "rather than having a bunch of code kind of sitting in the same process with some boundaries around it you've got separate",
    "start": "2294980",
    "end": "2301140"
  },
  {
    "text": "processes with essentially networks in the way so that's the ultimate decoupling mode but there are a bunch of",
    "start": "2301140",
    "end": "2308220"
  },
  {
    "text": "trade-offs associated with doing that and this raises a rather tricky question",
    "start": "2308220",
    "end": "2313770"
  },
  {
    "text": "how do you know what style of architecture suits you do you go from monolith or do you go from my trousseau versus and",
    "start": "2313770",
    "end": "2320930"
  },
  {
    "text": "unfortunately I see lots of people jumping on micros for reasons around fashion and hype and",
    "start": "2320930",
    "end": "2329390"
  },
  {
    "text": "they're failing this is what George Fairbanks again in his book called",
    "start": "2329390",
    "end": "2334920"
  },
  {
    "text": "architecture in different designs so choosing an architecture choosing the soil just because why not and not really",
    "start": "2334920",
    "end": "2341130"
  },
  {
    "text": "thinking through the trade-offs and the caveats about about that particular",
    "start": "2341130",
    "end": "2346260"
  },
  {
    "text": "architectural choice one of the things I recommend people do is use agility as a quality attribute so quality attributes",
    "start": "2346260",
    "end": "2353280"
  },
  {
    "start": "2348000",
    "end": "2385000"
  },
  {
    "text": "are things like performance the scaling and availability and so on what about agility so how fast you need to move as",
    "start": "2353280",
    "end": "2359609"
  },
  {
    "text": "a team and which parts of your code base which parts of your system need to move fast which parts of your code base are",
    "start": "2359609",
    "end": "2365640"
  },
  {
    "text": "potentially more volatile than others and maybe you use this information as a way to make a much more informed",
    "start": "2365640",
    "end": "2371660"
  },
  {
    "text": "decision so maybe you have the bulk of your code in a monolith and a bunch of",
    "start": "2371660",
    "end": "2377430"
  },
  {
    "text": "smaller services around the edge that need that volatility or that needs to be",
    "start": "2377430",
    "end": "2382710"
  },
  {
    "text": "able to change with that volatility rather and in all all of this a good architecture gives you a deity and again",
    "start": "2382710",
    "end": "2391770"
  },
  {
    "start": "2385000",
    "end": "2758000"
  },
  {
    "text": "this kind of makes sense doesn't it if you ever seen those big horrible code bases the big balls of mud the spaghetti",
    "start": "2391770",
    "end": "2397859"
  },
  {
    "text": "code systems when you change something here a whole bunch of stuff here breaks and you don't know why and it slows you",
    "start": "2397859",
    "end": "2403080"
  },
  {
    "text": "down a good architecture gives you a Jill T what I mean by a good architecture this is somewhat subjective",
    "start": "2403080",
    "end": "2409410"
  },
  {
    "text": "but what I mean by a good architect is something with I'm modularity it's something that has a good well-defined structure and one the",
    "start": "2409410",
    "end": "2419039"
  },
  {
    "text": "promise here is you don't get that for free so you have to put some upfront thinking let's call it upfront design to",
    "start": "2419039",
    "end": "2426900"
  },
  {
    "text": "come to a nice well-defined structure and this is one of the reasons why",
    "start": "2426900",
    "end": "2433049"
  },
  {
    "text": "people jump on mike rizzo verses because microservices gives you a strategy for",
    "start": "2433049",
    "end": "2439019"
  },
  {
    "text": "decomposition and modularity it's a bunch of separate processes running around on your network so people use",
    "start": "2439019",
    "end": "2446189"
  },
  {
    "text": "micro services architectures to enforce code boundaries and in many of the",
    "start": "2446189",
    "end": "2452519"
  },
  {
    "text": "conference talk certainly over the past few years you always find people comparing this thing to these things",
    "start": "2452519",
    "end": "2457739"
  },
  {
    "text": "down here these horrible monolithic big balls of mud and that's really unfair I mean historically monolithic",
    "start": "2457739",
    "end": "2463679"
  },
  {
    "text": "applications have looked like this I would definitely grant you that but this is a really unfair comparison because",
    "start": "2463679",
    "end": "2468749"
  },
  {
    "text": "what I see a lot of people do is they say we have one of these and we've been building one of these for 10 or 15 years",
    "start": "2468749",
    "end": "2474689"
  },
  {
    "text": "and it is a mess and we can't change it's just too slow to add features now",
    "start": "2474689",
    "end": "2481009"
  },
  {
    "text": "so what we're going to do is rewrite it from scratch in that style I can see",
    "start": "2481009",
    "end": "2490499"
  },
  {
    "text": "people going no really yeah I've had a number of organizations I've spoken to this year who basically told me these this exact story and what then 14 end up",
    "start": "2490499",
    "end": "2499019"
  },
  {
    "text": "doing is they end up taking their approach to building that and they stick",
    "start": "2499019",
    "end": "2504199"
  },
  {
    "text": "typically synchronous HTTP calls between the things in the monolith and they end",
    "start": "2504199",
    "end": "2510689"
  },
  {
    "text": "up with that and furthermore all of this has to be lockstep deployed but hey we",
    "start": "2510689",
    "end": "2519359"
  },
  {
    "text": "do micro services on door kubernetes CV",
    "start": "2519359",
    "end": "2524549"
  },
  {
    "text": "driven design so you know basically they end up with a distributed version well there before which is really poorly",
    "start": "2524549",
    "end": "2530099"
  },
  {
    "text": "performing and so on and so forth now this is a much fairer comparison I would",
    "start": "2530099",
    "end": "2535769"
  },
  {
    "text": "like people to maybe just do this first so as I've described you during this talk it is possible to create modular",
    "start": "2535769",
    "end": "2542009"
  },
  {
    "text": "monoliths you have to a bit of thinking into this you have to make that your code structure reflects to",
    "start": "2542009",
    "end": "2547540"
  },
  {
    "text": "architectural ideas in the tenth and again you use agility as a quality attribute maybe have most of your features in that",
    "start": "2547540",
    "end": "2554440"
  },
  {
    "text": "thing and you have a bunch of services floating around the edge where that makes sense there's a slightly harder",
    "start": "2554440",
    "end": "2563920"
  },
  {
    "text": "part of all of this I'm going to skip over and that is actually doing design and people say well how do you design",
    "start": "2563920",
    "end": "2571120"
  },
  {
    "text": "software I'm like we've done this before go look at Wikipedia and you show them the page about decomposition like oh",
    "start": "2571120",
    "end": "2577210"
  },
  {
    "text": "that's interesting yes and you tell them there are",
    "start": "2577210",
    "end": "2582820"
  },
  {
    "text": "different ways to decompose a thing into smaller things I didn't know that either and it appears that we've lost the",
    "start": "2582820",
    "end": "2590260"
  },
  {
    "text": "ability to describe how we actually do design why people just do design but they can't tell you the underlying principles about how they do design you",
    "start": "2590260",
    "end": "2597040"
  },
  {
    "text": "know but it's functional decomposition or volatility based decomposition and so on and so forth and then whenever you go",
    "start": "2597040",
    "end": "2602530"
  },
  {
    "text": "to microservices talk these days people end up talking about partners and they end up showing a screenshot of this paper and they they cross out the word",
    "start": "2602530",
    "end": "2608680"
  },
  {
    "text": "modulo and and yes throw service or micro service in there and there's a whole bunch of stuff that we've learnt",
    "start": "2608680",
    "end": "2614020"
  },
  {
    "text": "in the past this is from the 70s really interesting papers you definitely read it and there's a whole bunch of",
    "start": "2614020",
    "end": "2619360"
  },
  {
    "text": "interesting stuff in the past about good design and high cohesion and low",
    "start": "2619360",
    "end": "2624970"
  },
  {
    "text": "coupling and responsibilities and volatility and we've just forgotten it all and all of this stuff applies to",
    "start": "2624970",
    "end": "2632200"
  },
  {
    "text": "every sort of a software system we should ever be building a good architecture gives you agility a good",
    "start": "2632200",
    "end": "2640690"
  },
  {
    "text": "structure gives you agility and then people ask you well how do we even get to a set of things and you say again",
    "start": "2640690",
    "end": "2647740"
  },
  {
    "text": "there's more techniques out there go learn them it says something called CRC it's an old workshop high tech used to",
    "start": "2647740",
    "end": "2655030"
  },
  {
    "text": "be quite well used around the kind of Rupp era Rush unified process fell out",
    "start": "2655030",
    "end": "2661030"
  },
  {
    "text": "fashion it has class in the name classes responsibilities collaborators it's a",
    "start": "2661030",
    "end": "2667060"
  },
  {
    "text": "work shopping technique for doing class tower design we don't do class level design in in meetings anymore but you",
    "start": "2667060",
    "end": "2673720"
  },
  {
    "text": "take this approach and you scrub out this first word and you make it component",
    "start": "2673720",
    "end": "2679450"
  },
  {
    "text": "or module or micro service and you get the same approach you get the same collaborative design approach applied at",
    "start": "2679450",
    "end": "2685660"
  },
  {
    "text": "a high level of abstraction so you get good at design you get good at design",
    "start": "2685660",
    "end": "2692790"
  },
  {
    "text": "you throw stuff into a monolith first once you're happy with your design and your decomposition approach in the",
    "start": "2692790",
    "end": "2698320"
  },
  {
    "text": "monolith then you take stuff out into micro services world if you need to",
    "start": "2698320",
    "end": "2703650"
  },
  {
    "text": "write so Mike services architect just do provide a bunch of benefits agility",
    "start": "2703650",
    "end": "2709510"
  },
  {
    "text": "scalability resilience and so on and so on so on but this is way harder to deal with more moving parts automatic",
    "start": "2709510",
    "end": "2717400"
  },
  {
    "text": "provisioning monitoring log aggregation you also pay more as well so one of the",
    "start": "2717400",
    "end": "2722440"
  },
  {
    "text": "reasons I brought up structure Iser right the starts because it's a start up as a single person startup I want to",
    "start": "2722440",
    "end": "2728740"
  },
  {
    "text": "deliver stuff quick I don't want to be spending months messing around with docker kubernetes log aggregation",
    "start": "2728740",
    "end": "2733810"
  },
  {
    "text": "frameworks and all this stuff I just want to throw stuff on the web and get people using it so structure is too",
    "start": "2733810",
    "end": "2740530"
  },
  {
    "text": "modular monoliths I don't have to deal with all of this stuff yet but I could do if I wanted to so ya choose Mike",
    "start": "2740530",
    "end": "2748240"
  },
  {
    "text": "services if they give you benefits not because your codebase is a mess now",
    "start": "2748240",
    "end": "2754050"
  },
  {
    "text": "because that's not going to fix any problems of course whatever approach you",
    "start": "2754050",
    "end": "2760450"
  },
  {
    "start": "2758000",
    "end": "2773000"
  },
  {
    "text": "do go for whether it is a monitor monolith or what's that on micro services don't forget about the implementation details so definitely be",
    "start": "2760450",
    "end": "2768040"
  },
  {
    "text": "aware of this overuse of the public key word for example when you're building monolithic applications and definitely",
    "start": "2768040",
    "end": "2774130"
  },
  {
    "start": "2773000",
    "end": "2792000"
  },
  {
    "text": "be aware of the model code gap so if you ever want to market it to diagrams and make sure they match your code and that",
    "start": "2774130",
    "end": "2781330"
  },
  {
    "text": "is basically that thank you very much [Applause]",
    "start": "2781330",
    "end": "2793469"
  }
]