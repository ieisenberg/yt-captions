[
  {
    "start": "5000",
    "end": "31000"
  },
  {
    "text": "uh so we've replaced the the very sort of uh concrete Notions that is specific to functions with generalizable Notions",
    "start": "6140",
    "end": "14460"
  },
  {
    "text": "and now the question is what happens if instead of using the function instance",
    "start": "14460",
    "end": "20699"
  },
  {
    "text": "okay that is the ones we're used to for identity composition for curry and Curry and we try some other kind of a",
    "start": "20699",
    "end": "27900"
  },
  {
    "text": "function-like thing so that's the game here and here's the first example",
    "start": "27900",
    "end": "34140"
  },
  {
    "start": "31000",
    "end": "163000"
  },
  {
    "text": "so up here is the uh at the top is the Haskell code that we write magnitude squared is the uh was it the sum of the",
    "start": "34140",
    "end": "40920"
  },
  {
    "text": "squares of its uh its argument and this is the um uh what Lambda eliminated form so",
    "start": "40920",
    "end": "48120"
  },
  {
    "text": "this is the CCC form I'll call it this for Cartesian closed category and we see here's a picture of the computation it",
    "start": "48120",
    "end": "54059"
  },
  {
    "text": "shows us what's happening so uh information comes in on the left and flows to the right we take a pair of",
    "start": "54059",
    "end": "60120"
  },
  {
    "text": "arguments multiply the first one by itself multiply the second one itself add them and that's the value we're getting out",
    "start": "60120",
    "end": "66720"
  },
  {
    "text": "so this is a picture that illustrates this computation but this picture itself",
    "start": "66720",
    "end": "72600"
  },
  {
    "text": "is an alternative interpretation of the Lambda expression okay",
    "start": "72600",
    "end": "77880"
  },
  {
    "text": "so what's behind this picture is another category which is the category of graphs",
    "start": "77880",
    "end": "83100"
  },
  {
    "text": "a graph generator that's what I've done is taken the original code put it into this more",
    "start": "83100",
    "end": "89280"
  },
  {
    "text": "generalized form and then interpret it in a different setting in the setting of the category of graphs",
    "start": "89280",
    "end": "95579"
  },
  {
    "text": "that's what's going on here this is the first example of an alternative interpretation",
    "start": "95579",
    "end": "101579"
  },
  {
    "text": "here's our another example is the the uh what the cosine and sine of a product so we get the original Haskell code the",
    "start": "101640",
    "end": "108540"
  },
  {
    "text": "algebraic form and the graph interpretation of that form",
    "start": "108540",
    "end": "114200"
  },
  {
    "text": "all right now let's go back to our very original example from the from the beginning of the talk",
    "start": "114720",
    "end": "120600"
  },
  {
    "text": "so here we have uh we have a curried function so Curry and Curry itself the curry operation is going to show up in",
    "start": "120600",
    "end": "127020"
  },
  {
    "text": "its uh generalized algebraic form and in the category of graphs this is uh",
    "start": "127020",
    "end": "134340"
  },
  {
    "text": "this is a rendering of the result okay so what's going on here is this is our",
    "start": "134340",
    "end": "139620"
  },
  {
    "text": "function that's X here that's y here okay so it's going to be a function of X okay and it returns a function that's",
    "start": "139620",
    "end": "146879"
  },
  {
    "text": "what this we have here and that's where outputting and what's in that function well this is that Lambda y three times",
    "start": "146879",
    "end": "154379"
  },
  {
    "text": "yeah Lambda y 3 times y plus the X that's coming in okay",
    "start": "154379",
    "end": "161000"
  },
  {
    "text": "so that's this is a higher order graph now what does one of these alternative",
    "start": "161099",
    "end": "166680"
  },
  {
    "start": "163000",
    "end": "348000"
  },
  {
    "text": "interpretations look like okay one we know quite well the standard interpretation of functions and that's",
    "start": "166680",
    "end": "172140"
  },
  {
    "text": "what I showed you on the earlier slide this is what Curry is for functions the identity is for functions and so on but",
    "start": "172140",
    "end": "177420"
  },
  {
    "text": "we have another an alternative to functions what does a implementation look like and I'm giving you this is a",
    "start": "177420",
    "end": "182700"
  },
  {
    "text": "snapshot it's not the complete thing but it's it's most of the essence of it",
    "start": "182700",
    "end": "187980"
  },
  {
    "text": "we wanted to find a new interpretation you simply Define a new data type a new representation and then give instances",
    "start": "187980",
    "end": "193800"
  },
  {
    "text": "so that's what's going here this is the new interpretation this is I mean the new data type right here so graph is the",
    "start": "193800",
    "end": "199920"
  },
  {
    "text": "category it's a a graph that describes a function from A to B",
    "start": "199920",
    "end": "205920"
  },
  {
    "text": "and it's a very simple this is this is just um a simple State moan ad here I'm",
    "start": "205920",
    "end": "212340"
  },
  {
    "text": "not going to go into some detail I just want to impress on you the Simplicity of doing this we've got a simple State monad here that keeps a supply of port",
    "start": "212340",
    "end": "219959"
  },
  {
    "text": "numbers it generates a list of components okay and then all we're doing",
    "start": "219959",
    "end": "225299"
  },
  {
    "text": "is is this is going to be a generator if we take some description of inputs of type A we're going to effectfully",
    "start": "225299",
    "end": "231299"
  },
  {
    "text": "generate a description uh of information of type B and the effect is simply you",
    "start": "231299",
    "end": "236819"
  },
  {
    "text": "know generating these components and keeping a counter and all that counter is is about is just identifying nodes in the graph",
    "start": "236819",
    "end": "245720"
  },
  {
    "text": "and so then it's quite simple to define a category instance the identity function is going to be this is quite",
    "start": "246480",
    "end": "252540"
  },
  {
    "text": "typical is just return that's maybe this type here it return is",
    "start": "252540",
    "end": "259199"
  },
  {
    "text": "going to take this description of information of type A it's not going to have any effects not going to join any",
    "start": "259199",
    "end": "264540"
  },
  {
    "text": "components at all just immediately return that same description okay and for composition this is uh this",
    "start": "264540",
    "end": "272580"
  },
  {
    "text": "is what we call a monadic composition or closely composition so this is just defined easily in terms",
    "start": "272580",
    "end": "278280"
  },
  {
    "text": "of the usual bind operation and then we have a variety of of these",
    "start": "278280",
    "end": "284100"
  },
  {
    "text": "very specific operations these are how The Primitives not and or and so on",
    "start": "284100",
    "end": "290580"
  },
  {
    "text": "so this is most of an implantation right here and I just really want to impress on you",
    "start": "290580",
    "end": "295740"
  },
  {
    "text": "it's quite easy to uh to give new very different interpretations",
    "start": "295740",
    "end": "301080"
  },
  {
    "text": "what do we get just some more examples here this is a fold over a tree of depth four of integers",
    "start": "301080",
    "end": "307860"
  },
  {
    "text": "uh and and this is this is actually the standard Haskell sum function so I'm not",
    "start": "307860",
    "end": "313080"
  },
  {
    "text": "none there's nothing fancy or there's no kind of hidden definitions at all uh to find this tree type it's a simple g80t",
    "start": "313080",
    "end": "320940"
  },
  {
    "text": "is indexed by its depth uh you find the kind of inevitable definition of fold",
    "start": "320940",
    "end": "326400"
  },
  {
    "text": "fold map and so on and then the standard Haskell sum function um so uh what standard sum is a function",
    "start": "326400",
    "end": "333539"
  },
  {
    "text": "as this type we give it uh the alternative interpretation of graphs let me get this graph",
    "start": "333539",
    "end": "339900"
  },
  {
    "text": "okay here's another is a scan which is a it's a sort of like a a fold but we keep all the intermediate arguments",
    "start": "339900",
    "end": "348020"
  },
  {
    "start": "348000",
    "end": "421000"
  },
  {
    "text": "now given a graph representation I've rendered it into a picture and that's",
    "start": "350039",
    "end": "355080"
  },
  {
    "text": "what we've seen so far so there's an internal data structure with the graph and a simple rendering into a picture",
    "start": "355080",
    "end": "360419"
  },
  {
    "text": "but we can render into things other than pictures and this is an example this is verilog",
    "start": "360419",
    "end": "365759"
  },
  {
    "text": "code the my original motivation for this whole uh Avenue that I've been exploring",
    "start": "365759",
    "end": "373199"
  },
  {
    "text": "this last two years was how to compile Haskell programs into Hardware I don't mean a domain specific language",
    "start": "373199",
    "end": "379979"
  },
  {
    "text": "for Hardware I mean Haskell program so you're talking about what you want to talk about in",
    "start": "379979",
    "end": "385199"
  },
  {
    "text": "Haskell and then we generate a massively parallel implementation as a as a",
    "start": "385199",
    "end": "390240"
  },
  {
    "text": "circuit okay so this this is exactly that implementation",
    "start": "390240",
    "end": "395639"
  },
  {
    "text": "and uh this you know generous verilog code and from there you can synthesize a circuit or more likely a fpga",
    "start": "395639",
    "end": "401520"
  },
  {
    "text": "configuration all right here's another example we can take the same graph representation and",
    "start": "401520",
    "end": "408120"
  },
  {
    "text": "rather than generating verilog we can generate a GPU code nowadays we program gpus mainly in in",
    "start": "408120",
    "end": "414900"
  },
  {
    "text": "let's include in opencl more old school and also in your web browser run",
    "start": "414900",
    "end": "420180"
  },
  {
    "text": "something called glso so here we go a long time ago I guess it was around 2000 I think I did a system",
    "start": "420180",
    "end": "426600"
  },
  {
    "start": "421000",
    "end": "739000"
  },
  {
    "text": "called Pam that was um it was an optimized uh what's nowadays called deeply embedded",
    "start": "426600",
    "end": "432479"
  },
  {
    "text": "domain-specific language for for graphics really for image synthesis and the notion was that images are infinite",
    "start": "432479",
    "end": "439259"
  },
  {
    "text": "and continuous and it gives wonderful modularity Simplicity as John pointed out laws",
    "start": "439259",
    "end": "444599"
  },
  {
    "text": "and those laws you know give feedback that is a good design so recently I re-implemented this system on top of uh",
    "start": "444599",
    "end": "452280"
  },
  {
    "text": "this approach to giving alternative interpretations so here's a very simple notion region",
    "start": "452280",
    "end": "457740"
  },
  {
    "text": "this is exactly the same region type in another uh one of the papers that John shared um that uh Paul Hudak and Mark Jones",
    "start": "457740",
    "end": "464940"
  },
  {
    "text": "wrote so region is simply a function that takes a pair of reels and gives a bull that's our notion of real so here's a",
    "start": "464940",
    "end": "472020"
  },
  {
    "text": "definition of a disc that takes a radius also is exactly in that paper now that I think of it so as a function that takes",
    "start": "472020",
    "end": "478319"
  },
  {
    "text": "a radius and gives this the region uh which which is the inside of the disk and its definition simply is that so",
    "start": "478319",
    "end": "485940"
  },
  {
    "text": "it's going to be a region a region is a function okay it's a function from a point P which is a pair",
    "start": "485940",
    "end": "491759"
  },
  {
    "text": "so a point is in the disk exactly if the distance from the point to zero is less",
    "start": "491759",
    "end": "497160"
  },
  {
    "text": "than or equal to the given radius a little bit more computationally efficient way to say that is if the",
    "start": "497160",
    "end": "502379"
  },
  {
    "text": "square of the distance is less than or equal to square of the radius why because it's cheaper to compute the square of the distance and the distance",
    "start": "502379",
    "end": "508020"
  },
  {
    "text": "itself okay so this is a simple definition of a disc and now I I'm going to define a Time",
    "start": "508020",
    "end": "514800"
  },
  {
    "text": "varying woobly disk and this is just a disk all right so it takes a an argument",
    "start": "514800",
    "end": "519959"
  },
  {
    "text": "T which I'm going to think of as time and it gives a disk whose radius is a function of T and what is it it's simply",
    "start": "519959",
    "end": "525660"
  },
  {
    "text": "uh it's going to start it'll be three quarters plus or minus a quarter all right this can be varying with time so",
    "start": "525660",
    "end": "531300"
  },
  {
    "text": "that's a kind of sinusoidally displaced radius and put this through the compiler",
    "start": "531300",
    "end": "537180"
  },
  {
    "text": "and we get this graph okay now we can interpret that graph so",
    "start": "537180",
    "end": "542220"
  },
  {
    "text": "I've drawn a picture of it that's one rendering of it another is it could render it into a circuit if we wanted but in others we can render it into",
    "start": "542220",
    "end": "548339"
  },
  {
    "text": "graphics processor code it's a glsl okay and this runs let's see here",
    "start": "548339",
    "end": "555980"
  },
  {
    "text": "uh Safari I think I have it",
    "start": "555980",
    "end": "560300"
  },
  {
    "text": "there we go so this is running in Hardware you know on the uh the hardware accelerated",
    "start": "562140",
    "end": "567959"
  },
  {
    "text": "inside this machine this is a I don't know four or four and a half year old machine here",
    "start": "567959",
    "end": "573320"
  },
  {
    "text": "it's quite fast I think the browser itself is limiting it to 60 frames a second",
    "start": "573360",
    "end": "578839"
  },
  {
    "text": "okay there we go all right",
    "start": "578940",
    "end": "585839"
  },
  {
    "text": "so far I've shown you one uh uh one new category there's one new interpretation",
    "start": "585839",
    "end": "591120"
  },
  {
    "text": "of the Lambda calculus which is graphs and then I give in three different renderings into pictures into circuits",
    "start": "591120",
    "end": "597240"
  },
  {
    "text": "as verilog and into a web friendly glsl code now I'm going to give you a second",
    "start": "597240",
    "end": "602480"
  },
  {
    "text": "category which is that a differentiable functions so you can Define functions very nicely in Haskell it's a great",
    "start": "602480",
    "end": "608880"
  },
  {
    "text": "notation or you know any of the language we're talking about here of course and now if we want to differentiate them",
    "start": "608880",
    "end": "614339"
  },
  {
    "text": "well you can write various approximation methods John again everything I'm talking about is from your talk John",
    "start": "614339",
    "end": "622940"
  },
  {
    "text": "so there are a variety of uh of um what simple and then quite clever",
    "start": "622940",
    "end": "628920"
  },
  {
    "text": "methods for doing numeric approximations and we can get as close as we want with a you know lovely well-factored limit",
    "start": "628920",
    "end": "636000"
  },
  {
    "text": "um there are other approaches there there's a something known as symbolic differentiation which is you know",
    "start": "636000",
    "end": "641760"
  },
  {
    "text": "looking at symbolic expression doing a bunch of work on that that's probably what you learned in high school say and then there's this third method it's",
    "start": "641760",
    "end": "647700"
  },
  {
    "text": "called Uh automatic differentiation native automatic differentiation is",
    "start": "647700",
    "end": "653760"
  },
  {
    "text": "the literature says there are these three ways to do derivatives that are all completely different things the automatic differentiation literature",
    "start": "653760",
    "end": "659519"
  },
  {
    "text": "says there's uh numeric approximation symbolic and then the good thing automatic differentiation which is",
    "start": "659519",
    "end": "664980"
  },
  {
    "text": "nothing like the others I don't think that's true I think uh automatic differentiation is exactly symbolic differentiation done by the compiler",
    "start": "664980",
    "end": "671040"
  },
  {
    "text": "itself I think that's that's what I think that's a minority perspective but that's my perspective",
    "start": "671040",
    "end": "677100"
  },
  {
    "text": "so how can we do um how can we generate use our Lambda notation to to describe",
    "start": "677100",
    "end": "683640"
  },
  {
    "text": "differentiable functions in other words generate implementations that know how to compute the derivatives efficiently and exactly",
    "start": "683640",
    "end": "691920"
  },
  {
    "text": "well it's impossible given just a black box Haskell function you can't compute its derivative exactly construct its",
    "start": "691920",
    "end": "698399"
  },
  {
    "text": "derivative however we can turn the impossible into the trivial by not using functions as a",
    "start": "698399",
    "end": "704459"
  },
  {
    "text": "representation using functions that Supply a result and a derivative of that",
    "start": "704459",
    "end": "711240"
  },
  {
    "text": "result in other words just put the answer right into the representation that makes the impossible trivial",
    "start": "711240",
    "end": "716940"
  },
  {
    "text": "of course we just shifted all of the burden to whoever it is who's going to construct these things and if that's you and me then we're not going to be very",
    "start": "716940",
    "end": "722579"
  },
  {
    "text": "happy if we have to construct all of our differentiable functions explicitly you know from the ground up",
    "start": "722579",
    "end": "728100"
  },
  {
    "text": "but that's where the alternative interpretation comes in so instead of you doing it we're going to define a",
    "start": "728100",
    "end": "734880"
  },
  {
    "text": "category and then reinterpret your programs to do it automatically now what's this funny symbol here I'm saying this is the result and that's the",
    "start": "734880",
    "end": "740279"
  },
  {
    "start": "739000",
    "end": "1100000"
  },
  {
    "text": "derivative well derivatives you may have been taught the derivative of function as some number like three",
    "start": "740279",
    "end": "747000"
  },
  {
    "text": "all right or some vector or some covector or a matrix or something really",
    "start": "747000",
    "end": "752579"
  },
  {
    "text": "a derivative is a linear map all of the other Notions are just representations of derivatives",
    "start": "752579",
    "end": "757800"
  },
  {
    "text": "okay so why is it a linear map it's because derivatives are about linear approximations or more technically",
    "start": "757800",
    "end": "763440"
  },
  {
    "text": "affine approximations so this is the zeroth uh it's kind of the zeroth order approximation just the value itself and",
    "start": "763440",
    "end": "770220"
  },
  {
    "text": "then and then its derivative is it's it's going to be this kind of linear thing it may be just a slope if it's one",
    "start": "770220",
    "end": "775320"
  },
  {
    "text": "dimensional or it may be you know a tangent plane or something like that so this is a function with its value and",
    "start": "775320",
    "end": "781320"
  },
  {
    "text": "it's a local linear approximation that's what derivatives are all about all right so this is base this is the",
    "start": "781320",
    "end": "788700"
  },
  {
    "text": "implementation of the uh the definition of the category of differentiable",
    "start": "788700",
    "end": "794820"
  },
  {
    "text": "functions it's quite simple okay what we have here is is a little utility function and that's is uh",
    "start": "794820",
    "end": "801899"
  },
  {
    "text": "there's a steep Insight It's a Wonderful book it's by Michael spivik it's called Uh calculus and manifold this is where I",
    "start": "801899",
    "end": "807300"
  },
  {
    "text": "learned this approach uh when I was an undergraduate beautiful beautiful notion one of the things he points out is that",
    "start": "807300",
    "end": "813660"
  },
  {
    "text": "is that the derivative of every linear function is itself okay",
    "start": "813660",
    "end": "820339"
  },
  {
    "text": "so what is what I mean by it is itself it really is just simply saying that every linear function is its own perfect",
    "start": "820560",
    "end": "826139"
  },
  {
    "text": "linear approximation all right that's not actually very deep think about that way",
    "start": "826139",
    "end": "831660"
  },
  {
    "text": "so the identity function itself in this category of differentiable functions is well it's just going to be this lint",
    "start": "831660",
    "end": "837360"
  },
  {
    "text": "identity is linear so the derivative uh so the value of ID",
    "start": "837360",
    "end": "842820"
  },
  {
    "text": "at X is X okay and the derivative of ID at X is ID",
    "start": "842820",
    "end": "848880"
  },
  {
    "text": "okay so we can usually say the derivative of the identity function is one all right but one isn't mean one one",
    "start": "848880",
    "end": "856860"
  },
  {
    "text": "means one times going to say the derivative of function and a value is three we mean it's three times we mean it's scaling by three",
    "start": "856860",
    "end": "865100"
  },
  {
    "text": "so one times is also called ID that's why the derivative of ID is itself",
    "start": "865260",
    "end": "870540"
  },
  {
    "text": "everywhere now what is the Der what about we take two differentiable functions and we want to compose them",
    "start": "870540",
    "end": "876540"
  },
  {
    "text": "what do we get that's exactly what the chain rule is so chain rule",
    "start": "876540",
    "end": "883079"
  },
  {
    "text": "if you learned it the way I learned it the chain that says the derivative of a composition of G and F so the derivative of G of f of x with respect to X is",
    "start": "883079",
    "end": "890880"
  },
  {
    "text": "going to be the derivative of g at f of x times the derivative of F at X okay that's not true",
    "start": "890880",
    "end": "899000"
  },
  {
    "text": "this isn't so when you kind of first year calculus uh second year maybe say",
    "start": "901320",
    "end": "906360"
  },
  {
    "text": "well now we're going to have non-scalar functions functions of a non-scalar domain or range uh domain or code domain",
    "start": "906360",
    "end": "912779"
  },
  {
    "text": "and then and then we talk about oh well now we've talked about partial derivatives and we're gonna and we're going to have",
    "start": "912779",
    "end": "917880"
  },
  {
    "text": "some sort of uh what is it sum of products of partial derivatives",
    "start": "917880",
    "end": "923600"
  },
  {
    "text": "when we get into higher uh talking about different derivatives of functions from R N to RM and say oh now derivatives are",
    "start": "924300",
    "end": "930600"
  },
  {
    "text": "matrices and then we have a new chain Rule and in this new chain rule our",
    "start": "930600",
    "end": "935699"
  },
  {
    "text": "matrices our matrices of uh partial derivatives and the chain rule talks",
    "start": "935699",
    "end": "941220"
  },
  {
    "text": "about matrix multiplication okay not true really the truth is that the derivative",
    "start": "941220",
    "end": "947699"
  },
  {
    "text": "of the composition of functions is the composition of the derivatives of the functions",
    "start": "947699",
    "end": "954000"
  },
  {
    "text": "multiplication of scalars means composition of uh composition of linear",
    "start": "954000",
    "end": "960000"
  },
  {
    "text": "maps on scalars every linear map on a one-dimensional argument is a multiplication by a constant that's what",
    "start": "960000",
    "end": "966180"
  },
  {
    "text": "three means there it doesn't mean 3 it means three times and a matrix of partial derivatives is there to",
    "start": "966180",
    "end": "972060"
  },
  {
    "text": "represent a linear map so a derivative is simply a linear map and the composition of two functions",
    "start": "972060",
    "end": "979139"
  },
  {
    "text": "involves the composition of their derivatives okay so that's what's going on here is",
    "start": "979139",
    "end": "985459"
  },
  {
    "text": "when we want to compose these two functions well we're going to get so evaluate F at a so that's going to be",
    "start": "985459",
    "end": "992820"
  },
  {
    "text": "the domain of F and the domain of the composition by the way F at a we're going to get B the value out and the",
    "start": "992820",
    "end": "998399"
  },
  {
    "text": "derivative at that point okay now we're going to evaluate G at",
    "start": "998399",
    "end": "1003740"
  },
  {
    "text": "that result B that came out of f okay and we're going to get a value C and its derivative",
    "start": "1003740",
    "end": "1009259"
  },
  {
    "text": "C is the result so that's G of f of a and the derivative is the composition of",
    "start": "1009259",
    "end": "1015139"
  },
  {
    "text": "those two linear Maps so it's quite beautiful here the derivative of the composition is the composition of the derivatives similarly when we look at",
    "start": "1015139",
    "end": "1022279"
  },
  {
    "text": "the Cartesian the product well the projection functions uh we call first and second and Haskell calling uh",
    "start": "1022279",
    "end": "1028938"
  },
  {
    "text": "extracted left and right they're linear so their derivatives are themselves that's trivial the derivative of of this",
    "start": "1028939",
    "end": "1035120"
  },
  {
    "text": "Fork operation is very like this essentially a second chain rule it's a it's a it's a less dependent Channel",
    "start": "1035120",
    "end": "1041120"
  },
  {
    "text": "because this is about sequential composition this is about parallel composition so here we evaluate F at a and g at a",
    "start": "1041120",
    "end": "1047000"
  },
  {
    "text": "now these are independent okay the result is the pair a b and the derivative is the fork of the",
    "start": "1047000",
    "end": "1053840"
  },
  {
    "text": "derivatives okay so the derivative of the fork is the fork of the derivatives the derivative of the composition is the",
    "start": "1053840",
    "end": "1059780"
  },
  {
    "text": "composition of the derivatives so it's a very lovely very simple and this is this is the code this is the",
    "start": "1059780",
    "end": "1064880"
  },
  {
    "text": "implementation okay and now we have these Primitives well negation is linear addition is",
    "start": "1064880",
    "end": "1070520"
  },
  {
    "text": "linear multiplication is not linear so we explicitly give it all right so",
    "start": "1070520",
    "end": "1076280"
  },
  {
    "text": "multiplication for differentiable functions well the the part that computes the value is just multiplication and the other part is",
    "start": "1076280",
    "end": "1082120"
  },
  {
    "text": "this is this leibniz rule that we saw in Sean's talk",
    "start": "1082120",
    "end": "1087640"
  },
  {
    "text": "yesterday all right so again quite simple and this",
    "start": "1087740",
    "end": "1093679"
  },
  {
    "text": "is now we have automatic differentiation that is usable in Haskell code with no effort whatsoever with a programmer",
    "start": "1093679",
    "end": "1100580"
  },
  {
    "start": "1100000",
    "end": "1359000"
  },
  {
    "text": "all right so now we have two categories I could show you a third category which",
    "start": "1100580",
    "end": "1105740"
  },
  {
    "text": "I will but that third category I'm going to show you is the composition of the first",
    "start": "1105740",
    "end": "1111620"
  },
  {
    "text": "two categories so so back at our magnitude squared Function One interpretation is a graph another is a",
    "start": "1111620",
    "end": "1118039"
  },
  {
    "text": "is a differentiable function another one is the graph of the differentiable function",
    "start": "1118039",
    "end": "1123919"
  },
  {
    "text": "so that's what we get here so the derivative of the magnitude squared function uh when interpreted as",
    "start": "1123919",
    "end": "1131419"
  },
  {
    "text": "a graph if you just interpret it as a Haskell code you can just run it it works you know it's exactly correct and",
    "start": "1131419",
    "end": "1137240"
  },
  {
    "text": "it's efficient but let's first interpret it as a graph from there of course we can go to a third we can go to what's",
    "start": "1137240",
    "end": "1142760"
  },
  {
    "text": "not a third category but it's a third use I guess of this graph which is a verilog code or GLS cell code",
    "start": "1142760",
    "end": "1150980"
  },
  {
    "text": "all right so what do we have here just another example cosine and sine of a product",
    "start": "1150980",
    "end": "1157100"
  },
  {
    "text": "so this is a just written the code I showed you the simple Haskell code give",
    "start": "1157100",
    "end": "1162440"
  },
  {
    "text": "it the alternative interpretation of differentiable function and to get the result of that the alternative interpretation of a graph",
    "start": "1162440",
    "end": "1170179"
  },
  {
    "text": "so there's an efficient computation if you see there's a lot there's this reuse here so sine is getting used twice here",
    "start": "1170179",
    "end": "1175760"
  },
  {
    "text": "cosine is getting used twice here and this sharing is all really just",
    "start": "1175760",
    "end": "1181160"
  },
  {
    "text": "evident in the definitions right here when people say symbolic differentiation",
    "start": "1181160",
    "end": "1188660"
  },
  {
    "text": "is a bad thing they really mean simple you know grossly inefficient they really mean if you're not careful not to",
    "start": "1188660",
    "end": "1195080"
  },
  {
    "text": "duplicate work you end up doing you know exponential amount of work at runtime or a whole lot of work to avoid doing",
    "start": "1195080",
    "end": "1200299"
  },
  {
    "text": "Expedition when I work at runtime all right another interpretation is",
    "start": "1200299",
    "end": "1205940"
  },
  {
    "text": "interval analysis interval analysis the idea is it's very lovely and it has all kinds of wonderful",
    "start": "1205940",
    "end": "1212179"
  },
  {
    "text": "uses so you write um you write a function in your favorite functional programming",
    "start": "1212179",
    "end": "1218360"
  },
  {
    "text": "language it takes say a real to a real or double to a double if you want to think of it that way",
    "start": "1218360",
    "end": "1224900"
  },
  {
    "text": "I might have a bunch of arguments so I can map my function over it however",
    "start": "1224900",
    "end": "1230120"
  },
  {
    "text": "suppose my bunch of arguments is every value in an interval say from zero to",
    "start": "1230120",
    "end": "1235460"
  },
  {
    "text": "one all right if we're thinking in high level terms there's uncountably many values in that",
    "start": "1235460",
    "end": "1242299"
  },
  {
    "text": "interval right even if you want to you know think of as doubles there's still an awful lot of them and it'll be quite",
    "start": "1242299",
    "end": "1247760"
  },
  {
    "text": "inefficient to map that function so there's a much more efficient technique which is this idea of interval analysis which is if I have my function and I",
    "start": "1247760",
    "end": "1255200"
  },
  {
    "text": "have some clever way of interpreting it then I can fairly efficiently compute",
    "start": "1255200",
    "end": "1260559"
  },
  {
    "text": "the image of that interval via the function in other words I can give an",
    "start": "1260559",
    "end": "1267200"
  },
  {
    "text": "interval of functions in say 0 1 and get an sorry my interval functions interval of values in domain values and get an",
    "start": "1267200",
    "end": "1273080"
  },
  {
    "text": "interval of cotomain values out and the promise is that for any argument",
    "start": "1273080",
    "end": "1278120"
  },
  {
    "text": "in the uh in the original interval F your function f of that value has to",
    "start": "1278120",
    "end": "1284480"
  },
  {
    "text": "be in the result interval so it's a way of bounding what the function can possibly be over a whole interval it's",
    "start": "1284480",
    "end": "1289580"
  },
  {
    "text": "very powerful and has an extremely simple implementation in this framework",
    "start": "1289580",
    "end": "1297039"
  },
  {
    "text": "well so here's here's the kind of smart",
    "start": "1297320",
    "end": "1302799"
  },
  {
    "text": "addition we have the lower and upper bounds so that's the idea here is uh an",
    "start": "1302799",
    "end": "1308240"
  },
  {
    "text": "interval function is going to be represented simply by a function on intervals okay what are intervals well for scalars",
    "start": "1308240",
    "end": "1313940"
  },
  {
    "text": "an interval is as of just a parallel or an upper bound for products it's going to be a pair of",
    "start": "1313940",
    "end": "1318980"
  },
  {
    "text": "intervals this would be so like a two Dimensions we're going to have a box so we get a like a lower left than an upper right for instance",
    "start": "1318980",
    "end": "1325400"
  },
  {
    "text": "for functions that turned out to be variety of ways to think about this this one turned out to be quite convenient and then the instances are entirely",
    "start": "1325400",
    "end": "1332360"
  },
  {
    "text": "trivial this is the simplest possible thing the kind of more this is all of the glue",
    "start": "1332360",
    "end": "1338860"
  },
  {
    "text": "and then the operations addition is quite simple you add the lower bounds and the upper bounds multiplication you",
    "start": "1338860",
    "end": "1344539"
  },
  {
    "text": "can't do that multiplication is trickier so instead we look at uh we look at all all four products uh you know the lowers",
    "start": "1344539",
    "end": "1352159"
  },
  {
    "text": "and upper bounds and we take the minimum of all those products and the maximum and that's going to be the uh that's",
    "start": "1352159",
    "end": "1357740"
  },
  {
    "text": "going to be the bound okay so this is our original example well it's not quite uncurried it for for",
    "start": "1357740",
    "end": "1364520"
  },
  {
    "start": "1359000",
    "end": "1382000"
  },
  {
    "text": "this case put it through the interval analysis interpretation put the result of that",
    "start": "1364520",
    "end": "1371539"
  },
  {
    "text": "through the graph interpretation and we get this what are these ifs and less than or equal to those come exactly from the Min",
    "start": "1371539",
    "end": "1377120"
  },
  {
    "text": "and Max all right almost done here",
    "start": "1377120",
    "end": "1385159"
  },
  {
    "start": "1382000",
    "end": "1659000"
  },
  {
    "text": "um this is an example that delighted me I started working with a fellow named John",
    "start": "1385159",
    "end": "1392659"
  },
  {
    "text": "Wigley he's working on a project we talked about a little bit a few weeks ago uh he was going to use free arrows",
    "start": "1392659",
    "end": "1399140"
  },
  {
    "text": "for something and I said yeah I have a hunch that uh this this combining",
    "start": "1399140",
    "end": "1404600"
  },
  {
    "text": "compiling to categories technique will work out more nicely which reminds me of something you said",
    "start": "1404600",
    "end": "1409940"
  },
  {
    "text": "to me in 1999 about function reactive programming I think you said I have 100 FRP would work out more nicely in terms",
    "start": "1409940",
    "end": "1415820"
  },
  {
    "text": "of arrows this might have been Pisa I think I'm not sure yeah",
    "start": "1415820",
    "end": "1422120"
  },
  {
    "text": "so so I said this to John and John was very intrigued went away and thought about it we had several conversations",
    "start": "1422120",
    "end": "1428419"
  },
  {
    "text": "and and he made some progress but he also got this wonderful idea which is uh",
    "start": "1428419",
    "end": "1433520"
  },
  {
    "text": "I don't know if you know about satisfiability modular theories smt solvers the very powerful technique it's it's extension of the technique of sat",
    "start": "1433520",
    "end": "1440240"
  },
  {
    "text": "solvers and satisfability solvers these are NP hard problems I believe um",
    "start": "1440240",
    "end": "1446299"
  },
  {
    "text": "uh for which there are very good tools these days and they can solve a wide variety of",
    "start": "1446299",
    "end": "1451460"
  },
  {
    "text": "problems now there are some libraries in particular um there's this Library Z3",
    "start": "1451460",
    "end": "1456500"
  },
  {
    "text": "for doing for solving these problems this is some library and I don't know C or something Implement and C but there's",
    "start": "1456500",
    "end": "1461780"
  },
  {
    "text": "a Haskell Library which wraps it it's a Haskell library that wraps the Z3 solver",
    "start": "1461780",
    "end": "1467240"
  },
  {
    "text": "it's a domain specific embedded language you have to write in a special vocabulary it's made to look kind of",
    "start": "1467240",
    "end": "1475100"
  },
  {
    "text": "um as elegant as graceful as possible but it is a DSL and you don't write just",
    "start": "1475100",
    "end": "1481460"
  },
  {
    "text": "regular old Haskell Expressions you have to write things that are kind of like them that are suggestive that construct graphs in some in the Z3 representation",
    "start": "1481460",
    "end": "1489919"
  },
  {
    "text": "via the foreign function API I think uh and then invokes a solver and you get",
    "start": "1489919",
    "end": "1495679"
  },
  {
    "text": "some result and you do you know variety of calls to get information out of the solver well",
    "start": "1495679",
    "end": "1501158"
  },
  {
    "text": "um I've done these kinds of uh deep embedding kind of systems myself or you know um interfaces to",
    "start": "1501260",
    "end": "1508280"
  },
  {
    "text": "external systems uh but now I think it's really kind of a fundamental mistake in",
    "start": "1508280",
    "end": "1513559"
  },
  {
    "text": "retrospect to do to introduce a new vocabulary merely to give a different operational uh access so it's not that",
    "start": "1513559",
    "end": "1521600"
  },
  {
    "text": "we're changing the meaning of our Boolean Expressions that represent constraints it's that we want to change the operation of them",
    "start": "1521600",
    "end": "1527840"
  },
  {
    "text": "so Opera so uh implementations are about operation compilers interpreters about",
    "start": "1527840",
    "end": "1532940"
  },
  {
    "text": "operation languages are about expression I don't want to change the language so John had this idea why don't we wrap",
    "start": "1532940",
    "end": "1539360"
  },
  {
    "text": "up Z3 as a category and run it through the compiler it was lovely it came out very very simply",
    "start": "1539360",
    "end": "1545900"
  },
  {
    "text": "and this is this is the heart of it here there's gonna there's this is the Z3 monad this is the the wrapper in a",
    "start": "1545900",
    "end": "1552740"
  },
  {
    "text": "library that's on uh package and we simply wrap it up in this closely",
    "start": "1552740",
    "end": "1560840"
  },
  {
    "text": "category this is just a simple wrapper you can do on all monads and then we need to describe the argument types this",
    "start": "1560840",
    "end": "1567559"
  },
  {
    "text": "is a little uh generalized algebraic data type for talking about uh Expressions that's where the E is in",
    "start": "1567559",
    "end": "1574460"
  },
  {
    "text": "this they call them Expressions as you can think of those trees or graphs or you know abstract syntax trees here",
    "start": "1574460",
    "end": "1581480"
  },
  {
    "text": "and depending on the type of information you know we may have a single uh kind of trivial um",
    "start": "1581480",
    "end": "1587779"
  },
  {
    "text": "we have a single expression or a pair of Expressions that's what this is so this is a little generalized algebraic data",
    "start": "1587779",
    "end": "1594260"
  },
  {
    "text": "type plug it into this simple monadic style category and then we give",
    "start": "1594260",
    "end": "1601880"
  },
  {
    "text": "these definitions they're always I mean there's they're not always so simple but they're often this simple",
    "start": "1601880",
    "end": "1608360"
  },
  {
    "text": "so this is the implementation I just pulled this out of the code here and now we write regular old Haskell",
    "start": "1608360",
    "end": "1614900"
  },
  {
    "text": "code so here's my predicate it's going to be a function that goes from a cross a to Bool here we go so let's just say I've got a",
    "start": "1614900",
    "end": "1621919"
  },
  {
    "text": "variety of conditions they have to hold as X has to be less than y y less than 100 this linear constraint here and this",
    "start": "1621919",
    "end": "1629419"
  },
  {
    "text": "disjunction so these are conjunctions is a disjunction so we take this this is just written in",
    "start": "1629419",
    "end": "1634760"
  },
  {
    "text": "Haskell code crank it through the compiler get it into this algebraic vocabulary reinterpret it in",
    "start": "1634760",
    "end": "1642559"
  },
  {
    "text": "this category rather than the category of the usual one of functions and we get a solution",
    "start": "1642559",
    "end": "1648880"
  },
  {
    "text": "this is a much nicer way to to access smt solvers because there's no new",
    "start": "1649279",
    "end": "1656419"
  },
  {
    "text": "interface so no need vocabulary here all right a bunch of other possible",
    "start": "1656419",
    "end": "1661640"
  },
  {
    "start": "1659000",
    "end": "1871000"
  },
  {
    "text": "examples I want to talk about derivatives as linear Maps linear Maps form a category why because identity is",
    "start": "1661640",
    "end": "1669080"
  },
  {
    "text": "linear in composition of linear functions or linear Maps is linear it's also a Cartesian category it has",
    "start": "1669080",
    "end": "1675860"
  },
  {
    "text": "projections which are linear and it has this Fork operation and joins two joints two functions that if you apply it to",
    "start": "1675860",
    "end": "1682100"
  },
  {
    "text": "linear functions you get a linear function okay polynomials is another one polynomial functions so",
    "start": "1682100",
    "end": "1689320"
  },
  {
    "text": "semantically you can think of they are functions that happen to satisfy a certain property polynomiality I just",
    "start": "1689320",
    "end": "1694940"
  },
  {
    "text": "made up that word um another is is probabilistic computation or non-determined as a",
    "start": "1694940",
    "end": "1701059"
  },
  {
    "text": "computation or any monetic notion of computation gives rise in a completely regular way to a category to a Cartesian",
    "start": "1701059",
    "end": "1708140"
  },
  {
    "text": "category to a closed Cartesian category which means you can crank it through this compiler",
    "start": "1708140",
    "end": "1713240"
  },
  {
    "text": "so monads give us a lot of flexibility in reinterpreting computation but at at",
    "start": "1713240",
    "end": "1720620"
  },
  {
    "text": "a cost in our expression we have to use a kind of monadic interface which is often pretty clunky",
    "start": "1720620",
    "end": "1727159"
  },
  {
    "text": "here's a non-monetic uh a style of programming which is just the regular",
    "start": "1727159",
    "end": "1732440"
  },
  {
    "text": "vanilla that still allows us to have this kind of flexibility Okay so",
    "start": "1732440",
    "end": "1738260"
  },
  {
    "text": "sum up um as I mentioned at the beginning Peter Landon's paper that John shared with us",
    "start": "1738260",
    "end": "1745159"
  },
  {
    "text": "yesterday is about this notion of let's not invent new programming languages unless we really have to which we almost",
    "start": "1745159",
    "end": "1752000"
  },
  {
    "text": "never do must instead invent new vocabularies since that paper we've been exploring a",
    "start": "1752000",
    "end": "1758659"
  },
  {
    "text": "couple of different ways to do so one is often called shallow enables called Deep embeddings so a shallow embedding is",
    "start": "1758659",
    "end": "1765500"
  },
  {
    "text": "just a library and I think that's really what Peter Landon had in mind now just a library well that would be a bad idea in",
    "start": "1765500",
    "end": "1771799"
  },
  {
    "text": "a language like C or Pearl or C sharp or Java",
    "start": "1771799",
    "end": "1777559"
  },
  {
    "text": "because the host is really not friendly to to this sort of expressiveness but in",
    "start": "1777559",
    "end": "1782659"
  },
  {
    "text": "a lovely kind of type Lambda calculus setting the host is is just right so a shallow embedding it's a great fit with",
    "start": "1782659",
    "end": "1788000"
  },
  {
    "text": "host language it's a very easy to implement it's very hard to optimize and that optimization is really the",
    "start": "1788000",
    "end": "1794360"
  },
  {
    "text": "motivation for this this more difficult Direction okay so shallow embeddings are great for expressing ideas",
    "start": "1794360",
    "end": "1800720"
  },
  {
    "text": "deep embeddings involves syntactic representation some kind of manipulable",
    "start": "1800720",
    "end": "1806620"
  },
  {
    "text": "intentional representation and that gives us enough leverage to do much more optimization but it comes at a great",
    "start": "1806620",
    "end": "1812720"
  },
  {
    "text": "cost in implementation and in use it's always a more Awkward syntax and there's",
    "start": "1812720",
    "end": "1818360"
  },
  {
    "text": "a good choice for efficient implementation the approach that I talked to you about today I think really gives the best of",
    "start": "1818360",
    "end": "1824360"
  },
  {
    "text": "both worlds we get the most natural notation the most familiar natural notation which which is just our uh our",
    "start": "1824360",
    "end": "1830659"
  },
  {
    "text": "language but we get access to a great deal of freedom for optimization for alternative operational uh angles on it",
    "start": "1830659",
    "end": "1838279"
  },
  {
    "text": "so it's quite easy to implement uh it's quite easy to analyze we get a great deal of semantic guidance so we're",
    "start": "1838279",
    "end": "1844039"
  },
  {
    "text": "not doing kind of making arbitrary choices okay if you're interested in more",
    "start": "1844039",
    "end": "1849140"
  },
  {
    "text": "details these slides will be available these are links here I have a paper uh it just was accepted icfp and all this",
    "start": "1849140",
    "end": "1856159"
  },
  {
    "text": "uh project is open source okay that's that I'm sorry",
    "start": "1856159",
    "end": "1862150"
  },
  {
    "text": "[Applause] [Music]",
    "start": "1862150",
    "end": "1865309"
  }
]