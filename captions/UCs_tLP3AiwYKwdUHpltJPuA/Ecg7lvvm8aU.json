[
  {
    "start": "0",
    "end": "104000"
  },
  {
    "text": "[Music]",
    "start": "980",
    "end": "7849"
  },
  {
    "text": "welcome to my talk about event based architectures with Kafka and etem my",
    "start": "12370",
    "end": "19310"
  },
  {
    "text": "name is David wolf I'm with a new cue we are doing software projects mostly I do more consulting and training",
    "start": "19310",
    "end": "26240"
  },
  {
    "text": "please remember to ask questions and write the session through the app I did",
    "start": "26240",
    "end": "31489"
  },
  {
    "text": "write a few books so there is a book about continuous delivery I've wrote it's very practical book that shows",
    "start": "31489",
    "end": "36800"
  },
  {
    "text": "technologies how to do continuous delivery also I wrote a book about micro",
    "start": "36800",
    "end": "41989"
  },
  {
    "text": "service architectures and there is a free version of that which is more like",
    "start": "41989",
    "end": "48019"
  },
  {
    "text": "40 pages or so that talks about micro services architectures and you're welcome to download them and have a look",
    "start": "48019",
    "end": "54679"
  },
  {
    "text": "and my latest book which is also sort of one of the things that I'm going to talk",
    "start": "54679",
    "end": "61339"
  },
  {
    "text": "about is the practical guide to micro services which talks about technologies and again there is a free version a",
    "start": "61339",
    "end": "69680"
  },
  {
    "text": "booklet that gives a rough overview all the demos that I did our own github so",
    "start": "69680",
    "end": "75260"
  },
  {
    "text": "feel free to take a look at the books and also at the demo code when I talk",
    "start": "75260",
    "end": "80750"
  },
  {
    "text": "about micro services the first problem is that micro services is not really a well-defined term so I need to answer",
    "start": "80750",
    "end": "88400"
  },
  {
    "text": "the question what are actually micro services and one way to think about them is the Independent Systems architecture",
    "start": "88400",
    "end": "95750"
  },
  {
    "text": "there is website about that and it basically includes a few best practices that we came up with so the way that I",
    "start": "95750",
    "end": "103010"
  },
  {
    "text": "think about micro services is first of all they are modules so if we have a system we usually decompose that system",
    "start": "103010",
    "end": "111680"
  },
  {
    "start": "104000",
    "end": "104000"
  },
  {
    "text": "into modules and we usually do that using programming language features or",
    "start": "111680",
    "end": "117410"
  },
  {
    "text": "we could do it using micro services if we do it with micro services the modules",
    "start": "117410",
    "end": "123260"
  },
  {
    "text": "will be containers that we deploy on kubernetes or dock or whatever so it's just a different way of doing modules",
    "start": "123260",
    "end": "129590"
  },
  {
    "text": "which we have been doing for ages basically because we do modules differently there are some different",
    "start": "129590",
    "end": "136489"
  },
  {
    "text": "challenges and different ways of doing the architecture so first of all there is the macro and the micro architecture",
    "start": "136489",
    "end": "143420"
  },
  {
    "text": "in a diploma monolith for example the decision concerning the program meaning",
    "start": "143420",
    "end": "148670"
  },
  {
    "text": "which is clear the system has one programming language that's it",
    "start": "148670",
    "end": "154010"
  },
  {
    "text": "in case of microservices well it doesn't matter in which programming language you're going to write your software that",
    "start": "154010",
    "end": "160400"
  },
  {
    "text": "runs inside the container so you can either decide that on the global level which is a macro textual decision or on",
    "start": "160400",
    "end": "168080"
  },
  {
    "text": "the microarchitecture level and each micro service will decide for its own programming language so this is why",
    "start": "168080",
    "end": "175790"
  },
  {
    "text": "there are two different types of architecture or and one of the important",
    "start": "175790",
    "end": "182540"
  },
  {
    "text": "parts of the micro architecture is to decide about integration communication how do those macro those micro services",
    "start": "182540",
    "end": "189019"
  },
  {
    "text": "actually talk to one another that's going to be a very fundamental decision that is going it's going to be hard to",
    "start": "189019",
    "end": "194870"
  },
  {
    "text": "change and this is why the communication mechanism like Kafka Adam is so very",
    "start": "194870",
    "end": "200690"
  },
  {
    "text": "important also you need to think about authentication metadata for tracing or",
    "start": "200690",
    "end": "208030"
  },
  {
    "text": "other purposes so that is something that you need to define on the mccoys sector level you should have independent",
    "start": "208030",
    "end": "214790"
  },
  {
    "text": "continuous delivery pipelines because really what micro services add is independent connie live independent",
    "start": "214790",
    "end": "222019"
  },
  {
    "text": "deployment but if you don't have independent continuous delivery pipe lines you can't really deploy them so if",
    "start": "222019",
    "end": "228260"
  },
  {
    "text": "you have one stage where you put in all the micro services and test them in some staging and you wait until all the micro",
    "start": "228260",
    "end": "234709"
  },
  {
    "text": "services are there and then you put all the micro services from staging in production that is not a true micro",
    "start": "234709",
    "end": "241430"
  },
  {
    "text": "services architecture I would argue because the continuous delivery pipelines are not independent and they",
    "start": "241430",
    "end": "248390"
  },
  {
    "text": "should be you can or you should standard as operations so you should have you",
    "start": "248390",
    "end": "255140"
  },
  {
    "text": "know the same foundations to deploy micro services to monitor them and so on and those then it should be on the",
    "start": "255140",
    "end": "260539"
  },
  {
    "text": "interface level only so you should say ok this is how you should provide monitoring information but you shouldn't",
    "start": "260539",
    "end": "268460"
  },
  {
    "text": "stand at us on the library because then your technology stake is fixed and you",
    "start": "268460",
    "end": "273530"
  },
  {
    "text": "can't really support other programming languages so the standard should be on interface level only how do you provide",
    "start": "273530",
    "end": "279919"
  },
  {
    "text": "monitoring information how do you provide locking information but it shouldn't be about a specific library",
    "start": "279919",
    "end": "285169"
  },
  {
    "text": "that you're using and finally there's resilience if you build a micro-services system and one well there are a lot of",
    "start": "285169",
    "end": "292699"
  },
  {
    "text": "servers a lot of network so if that fails your system should still survive",
    "start": "292699",
    "end": "298729"
  },
  {
    "text": "and that is why micro services should be resilient they should deal with failures",
    "start": "298729",
    "end": "304009"
  },
  {
    "text": "of some of those air systems and in total of what I would say is that micro",
    "start": "304009",
    "end": "310399"
  },
  {
    "text": "service is actually extremely decoupled modules if we have traditional modules the way that they are decoupled is that",
    "start": "310399",
    "end": "317089"
  },
  {
    "text": "I change a module and the interface stays the same and other people don't really care with micro services I can",
    "start": "317089",
    "end": "324919"
  },
  {
    "text": "even deploy it and they don't care the others don't care so we are decoupled",
    "start": "324919",
    "end": "330379"
  },
  {
    "text": "concerning deployment because I can just bring a new version into production if my micro service fails that doesn't",
    "start": "330379",
    "end": "335959"
  },
  {
    "text": "really matter because the other micro services well they won't at least they won't crash so they still run they still",
    "start": "335959",
    "end": "341569"
  },
  {
    "text": "need to compensate but in a diploma monolith if I write a memory leak in my module the whole diploma monolith would",
    "start": "341569",
    "end": "348739"
  },
  {
    "text": "fail with micro services it's just my micro service so it's decoupled concerning availability its leak about",
    "start": "348739",
    "end": "355699"
  },
  {
    "text": "concerning deployment so it's much more decoupled than traditional modules and the most important part for micro",
    "start": "355699",
    "end": "363439"
  },
  {
    "text": "services is actually to get the split right to have the right split of the",
    "start": "363439",
    "end": "368449"
  },
  {
    "text": "domain logic into those modules and this is where the main driven design comes in and the fundamental idea is that you",
    "start": "368449",
    "end": "376099"
  },
  {
    "text": "should have a specialized domain model for each use case and we call that a",
    "start": "376099",
    "end": "381110"
  },
  {
    "text": "bounded context and I believe if you have a micro service that implements bounded context that implements a a",
    "start": "381110",
    "end": "386389"
  },
  {
    "text": "unique specialized domain model for some use cases that is how you get truly",
    "start": "386389",
    "end": "391669"
  },
  {
    "text": "independent and decoupled systems so let's assume that we have a system that",
    "start": "391669",
    "end": "397759"
  },
  {
    "text": "is responsible for the handling and you know we have items in there that can be ordered we have a customer and then we",
    "start": "397759",
    "end": "404299"
  },
  {
    "text": "have a system that talks about invoices and the credit card information is only in here because we",
    "start": "404299",
    "end": "410540"
  },
  {
    "text": "they care about the credit card if we want to do an invoice and the same is true for Texas so we only care about the",
    "start": "410540",
    "end": "417740"
  },
  {
    "text": "Tex rates if we do the invoice and the same as and then we have delivery and in",
    "start": "417740",
    "end": "423440"
  },
  {
    "text": "delay in the delivery bundle context we care about the parcel service and how we",
    "start": "423440",
    "end": "430310"
  },
  {
    "text": "handle returns if something comes back from the customer and those are three specialized two main models that have a",
    "start": "430310",
    "end": "437150"
  },
  {
    "text": "lot of classes in air and independent clay and in the dependencies between those classes but they are very",
    "start": "437150",
    "end": "443750"
  },
  {
    "text": "different and specific information such as the credit card would just be in one",
    "start": "443750",
    "end": "448760"
  },
  {
    "text": "of these systems obviously there is a relation between these because an order should ideally create an invoice and a",
    "start": "448760",
    "end": "455750"
  },
  {
    "text": "delivery to make the customer happy and the company happy but at least there are",
    "start": "455750",
    "end": "461600"
  },
  {
    "text": "three different two main models and the question is how do you do the integration that is as I said one of the",
    "start": "461600",
    "end": "469220"
  },
  {
    "text": "most important parts concerning the microarchitecture you should define one",
    "start": "469220",
    "end": "474860"
  },
  {
    "text": "way of doing integration and communication and well we are here",
    "start": "474860",
    "end": "480170"
  },
  {
    "text": "because we want to talk about events and I think events actually great because they are also part of the manger of",
    "start": "480170",
    "end": "487070"
  },
  {
    "start": "481000",
    "end": "481000"
  },
  {
    "text": "design and they are one way of doing communication between bar no context there is a reason for that because also",
    "start": "487070",
    "end": "495050"
  },
  {
    "text": "in the business domain there are obviously events such as the order has been accepted the invoice has been",
    "start": "495050",
    "end": "501500"
  },
  {
    "text": "printed these kinds of things events are usually in past tense so something has",
    "start": "501500",
    "end": "508250"
  },
  {
    "text": "happened and they are immutable because well we can't change the past",
    "start": "508250",
    "end": "514490"
  },
  {
    "text": "can we so obviously something has happened and that is it that's effect",
    "start": "514490",
    "end": "519830"
  },
  {
    "text": "and we need to deal with that the reason why I believe events are so great for micro services because they enable",
    "start": "519830",
    "end": "526750"
  },
  {
    "text": "decoupling again this is sort of the Union Air the the selling proposition",
    "start": "526750",
    "end": "532760"
  },
  {
    "text": "and that is why events and micro services they both focus on decoupling",
    "start": "532760",
    "end": "538280"
  },
  {
    "text": "and you could argue that this is a match made in heaven because it's all about",
    "start": "538280",
    "end": "544280"
  },
  {
    "text": "decoupling so what is it that make events decoupled or that allow decoupling using events",
    "start": "544280",
    "end": "550679"
  },
  {
    "start": "548000",
    "end": "548000"
  },
  {
    "text": "first of all there is the time point so if I have an event it's not clear when I",
    "start": "550679",
    "end": "557790"
  },
  {
    "text": "handle it so there is decoupling concerning timing so if an order has been accepted I can",
    "start": "557790",
    "end": "563999"
  },
  {
    "text": "print an invoice now or I can print it later on I don't really care probably I do care at one point because it's about",
    "start": "563999",
    "end": "570839"
  },
  {
    "text": "revenue but yeah from a technology standpoint they're decoupled and also",
    "start": "570839",
    "end": "576720"
  },
  {
    "text": "concerning availability resilience which I said it's very important events help",
    "start": "576720",
    "end": "581879"
  },
  {
    "text": "us because well if the system that does the invoicing is down at the moment it can just handle that event later so",
    "start": "581879",
    "end": "589470"
  },
  {
    "text": "there is not really a problem but what about the main point for decoupling the",
    "start": "589470",
    "end": "596759"
  },
  {
    "text": "change so I do a change to order what about invoice and delivery I do a change",
    "start": "596759",
    "end": "602939"
  },
  {
    "text": "in the my end in the data format and the stuff that is transferred how would that",
    "start": "602939",
    "end": "608129"
  },
  {
    "text": "propagate is it really truly independent and if you have ever seen like a sales",
    "start": "608129",
    "end": "613889"
  },
  {
    "text": "pitch for an Enterprise Service bus or message oriented middleware what they will tell you as well there is a not",
    "start": "613889",
    "end": "619529"
  },
  {
    "text": "accepted event and there is some kind of a synchronous communication and that as",
    "start": "619529",
    "end": "625139"
  },
  {
    "text": "an Chronos communication will forward the event to the invoicing system enter the delivery system and if you have",
    "start": "625139",
    "end": "631949"
  },
  {
    "text": "another system well it can just accept that event as well so it's easily",
    "start": "631949",
    "end": "637350"
  },
  {
    "text": "extendable if we have a completely new system it just needs to handle that event so it's not such a big deal we had",
    "start": "637350",
    "end": "644639"
  },
  {
    "text": "decoupled concerning changes to and I",
    "start": "644639",
    "end": "649860"
  },
  {
    "text": "wish this was true but in fact I think this is not really true because what is really important is what is in the event",
    "start": "649860",
    "end": "657209"
  },
  {
    "text": "which data is in the event so let's take a look at that here is my order accepted",
    "start": "657209",
    "end": "662249"
  },
  {
    "text": "event and in my order accepted event there are the prices of the items that I ordered",
    "start": "662249",
    "end": "667829"
  },
  {
    "text": "there is the billing address to send out the invoice there are the sizes how large are those items are we talking",
    "start": "667829",
    "end": "676439"
  },
  {
    "text": "about small or are we talking about a huge PC or",
    "start": "676439",
    "end": "682540"
  },
  {
    "text": "whatever how much do they weigh and where should they be sent to and the",
    "start": "682540",
    "end": "688540"
  },
  {
    "text": "first part is all about invoicing so that is data that is specific for invoicing the second part is about",
    "start": "688540",
    "end": "693759"
  },
  {
    "text": "delivery and well there is the problem that there might be stuff that we don't",
    "start": "693759",
    "end": "698860"
  },
  {
    "text": "know about yet and that other systems are interested so as soon as we add some system to the equation we might need to",
    "start": "698860",
    "end": "706600"
  },
  {
    "text": "add new data and we need to change that event if we do it this way there is lots",
    "start": "706600",
    "end": "714430"
  },
  {
    "text": "of data in this event and the question is if you if we have a large complex",
    "start": "714430",
    "end": "721269"
  },
  {
    "text": "system which bounded context uses what in this example it's quite obvious there ISM was in delivery and we know who",
    "start": "721269",
    "end": "727209"
  },
  {
    "text": "would uses what but in a non-trivial example this can easily get very complicated and if we do a change that",
    "start": "727209",
    "end": "734439"
  },
  {
    "text": "could potentially impact all the modules in particular if I remove some",
    "start": "734439",
    "end": "739509"
  },
  {
    "text": "information about the order we never know who would use that information and",
    "start": "739509",
    "end": "745029"
  },
  {
    "text": "we might be unlucky and you know some system might crash because we are not providing that information anymore if we",
    "start": "745029",
    "end": "752019"
  },
  {
    "text": "don't have a good way of removing information from the event well it will grow over time so there is no way to get",
    "start": "752019",
    "end": "759100"
  },
  {
    "text": "stuff out of it so it will grow over time this is in domains of design what we call a published language so",
    "start": "759100",
    "end": "765279"
  },
  {
    "text": "published language is some kind of data structure that we all agreed on so in",
    "start": "765279",
    "end": "770350"
  },
  {
    "text": "our case it would be order delivery invoice and the system we don't know about yet so it's for parties that are",
    "start": "770350",
    "end": "777220"
  },
  {
    "text": "concerned with this published language and both these events and it's sort of weird because the basic says there is",
    "start": "777220",
    "end": "783939"
  },
  {
    "text": "the order model that everyone agrees on even though if we think about boundary",
    "start": "783939",
    "end": "789009"
  },
  {
    "text": "context there should be multiple model more air models for different purposes",
    "start": "789009",
    "end": "794620"
  },
  {
    "text": "so it's sort of I wouldn't call it a contradiction because boundary context",
    "start": "794620",
    "end": "799839"
  },
  {
    "text": "and publish language are both part of the manner of design so there is they can easily be integrated but it is",
    "start": "799839",
    "end": "806529"
  },
  {
    "text": "somewhat unfortunate or weird that we are now talking about the domain model",
    "start": "806529",
    "end": "811689"
  },
  {
    "text": "so what's well the alternative is to say okay here is a specific event for invoice and we",
    "start": "811689",
    "end": "818629"
  },
  {
    "text": "already have the information for invoice in this event and we have another event that is specific for delivery and we",
    "start": "818629",
    "end": "825170"
  },
  {
    "text": "have the third event which is specific to that new system that we don't really know about yet and those are specialized",
    "start": "825170",
    "end": "832129"
  },
  {
    "text": "event in this specific case I would argue this is probably the better way of doing it because the information that",
    "start": "832129",
    "end": "840319"
  },
  {
    "text": "those two systems are interested in delivery and invoice is very different",
    "start": "840319",
    "end": "845709"
  },
  {
    "text": "and the nice thing about this is that we can now evolve them independently so if",
    "start": "845709",
    "end": "852379"
  },
  {
    "text": "I remove stuff from the invoice order accepted event it's just a problem for",
    "start": "852379",
    "end": "858559"
  },
  {
    "text": "invoice so we I know exactly who to talk to and how to evolve it and also if in",
    "start": "858559",
    "end": "865309"
  },
  {
    "text": "was needs more data there is this one structure that we need to take to think about and it's just going to be",
    "start": "865309",
    "end": "871009"
  },
  {
    "text": "something between the other team and the embossing team so it's easier to figure out who uses what if I have a completely",
    "start": "871009",
    "end": "878929"
  },
  {
    "text": "new system I would need to create a new event which is sort of bad and one",
    "start": "878929",
    "end": "884899"
  },
  {
    "text": "pattern from the domain driven design in a world that would could cover this is customer supplier so invoice would tell",
    "start": "884899",
    "end": "892999"
  },
  {
    "text": "the order team which information they need invoice would be the customer of",
    "start": "892999",
    "end": "898939"
  },
  {
    "text": "the supplier order team the customer tells the supplier what they need and",
    "start": "898939",
    "end": "904490"
  },
  {
    "text": "this is how we are going to evolve that system and the nice thing about this is it's just going to do to be two parties",
    "start": "904490",
    "end": "911300"
  },
  {
    "text": "talking about that or you could have a very simple event that just includes an",
    "start": "911300",
    "end": "916730"
  },
  {
    "text": "ID and you would provide specific additional specialized api's for the",
    "start": "916730",
    "end": "924709"
  },
  {
    "text": "information that is specific to invoice or to delivery this is again a",
    "start": "924709",
    "end": "932149"
  },
  {
    "text": "compromise between extensibility and specialized events so there is at least a generic event but this really includes",
    "start": "932149",
    "end": "938029"
  },
  {
    "text": "the ID so by itself it's not really that useful so",
    "start": "938029",
    "end": "943510"
  },
  {
    "start": "941000",
    "end": "941000"
  },
  {
    "text": "the events per see are not something that provides us unlimited decoupling in",
    "start": "943510",
    "end": "950380"
  },
  {
    "text": "particular concerning changes they do concerning time they do concerning",
    "start": "950380",
    "end": "956589"
  },
  {
    "text": "availability but that's it and the question is what data should be included and I would argue that you should",
    "start": "956589",
    "end": "965350"
  },
  {
    "text": "probably think about specialized events or just IDs because the Genet the events that everyone agrees on that is what I",
    "start": "965350",
    "end": "972370"
  },
  {
    "text": "see in a lot of projects so I believe they are overused and as I said before the evolution of these events is",
    "start": "972370",
    "end": "980019"
  },
  {
    "text": "somewhat harder so that's the point I'm trying to make you still they are the",
    "start": "980019",
    "end": "985630"
  },
  {
    "text": "best option for communication between bar context they are an official DDD pattern and they are also a great fit",
    "start": "985630",
    "end": "993970"
  },
  {
    "text": "for the ubiquitous language so the ubiquitous language is what everybody agrees on the developers the business",
    "start": "993970",
    "end": "1001199"
  },
  {
    "text": "analysts the customers and they are probably talking about these events but",
    "start": "1001199",
    "end": "1006529"
  },
  {
    "text": "the problem that we now have is that there is sort of an implicit replication",
    "start": "1006529",
    "end": "1011880"
  },
  {
    "text": "going on here so I have some information about the order I send it over to delivery and invoice they will store",
    "start": "1011880",
    "end": "1018899"
  },
  {
    "text": "information about that in their own domain driven in their own Berner context so obviously there might be",
    "start": "1018899",
    "end": "1026150"
  },
  {
    "text": "different data in each of the responding contexts and this is a problem inconsistencies are something that we",
    "start": "1026150",
    "end": "1032250"
  },
  {
    "text": "are pretty afraid of and well basically the end is near so we did a major",
    "start": "1032250",
    "end": "1037918"
  },
  {
    "start": "1033000",
    "end": "1033000"
  },
  {
    "text": "mistake concerning architecture I would argue that this is actually not true because the kind of inconsistencies that",
    "start": "1037919",
    "end": "1045418"
  },
  {
    "text": "we are talking about is we have one system for voices when what we have one system for delivery we have one system",
    "start": "1045419",
    "end": "1051990"
  },
  {
    "text": "for orders so we have one source of truth for each of these so if I want to",
    "start": "1051990",
    "end": "1057390"
  },
  {
    "text": "know something about an invoice there is one system that I go to there is no such",
    "start": "1057390",
    "end": "1062850"
  },
  {
    "text": "thing as well I'm not sure whether there's an invoice or not there is one system that I go to it's the events between those systems",
    "start": "1062850",
    "end": "1069929"
  },
  {
    "text": "that I'm talking about and what we will end up with is either delivery without",
    "start": "1069929",
    "end": "1075870"
  },
  {
    "start": "1071000",
    "end": "1071000"
  },
  {
    "text": "an invoice or an invoice without a delivery because that event has been published to one of",
    "start": "1075870",
    "end": "1083070"
  },
  {
    "text": "those bounder contexts and it should eventually be solved because the event",
    "start": "1083070",
    "end": "1089220"
  },
  {
    "text": "will be propagated the most of the spawn context at one point or another I would",
    "start": "1089220",
    "end": "1095100"
  },
  {
    "text": "argue this is not unheard of you know an order where we already have the delivery",
    "start": "1095100",
    "end": "1100500"
  },
  {
    "text": "but not the invoice yet or the other way around I think that's not very weird and",
    "start": "1100500",
    "end": "1106560"
  },
  {
    "text": "the question is what is the alternative is it a large centralized complex database that has seen so many customers",
    "start": "1106560",
    "end": "1113130"
  },
  {
    "text": "that they can't really change and I would argue this is actually a bad idea",
    "start": "1113130",
    "end": "1118530"
  },
  {
    "text": "and the best kind of visualization that I found is on Twitter where we see two",
    "start": "1118530",
    "end": "1123780"
  },
  {
    "text": "micro services and they're shared a their shared database and the point here is that because they share the database",
    "start": "1123780",
    "end": "1130850"
  },
  {
    "text": "they are so tightly coupled well that they can't really do anything by",
    "start": "1130850",
    "end": "1137340"
  },
  {
    "text": "themselves they are basically just slaves of the gravity of the death of the star and this is the question that I",
    "start": "1137340",
    "end": "1146700"
  },
  {
    "text": "would ask in this scenario so what is it if the invoice what happens if the invoice is there after one point 0.1",
    "start": "1146700",
    "end": "1155190"
  },
  {
    "text": "seconds after one hour after one day to figure out whether I can live with these inconsistencies and if the answer is",
    "start": "1155190",
    "end": "1162540"
  },
  {
    "text": "well the invoice has to be there in less than one minute because otherwise it's going to be the end of the world I think",
    "start": "1162540",
    "end": "1169080"
  },
  {
    "text": "you have to really understand the domain because as as someone from the outside",
    "start": "1169080",
    "end": "1174390"
  },
  {
    "text": "I'm actually pretty surprised about that statement so this is it about concerning",
    "start": "1174390",
    "end": "1180600"
  },
  {
    "text": "events and inconsistencies and these kinds of things the other thing is event sourcing so event sourcing says that we",
    "start": "1180600",
    "end": "1187410"
  },
  {
    "text": "store the events that lead to a specific state that's basically the idea and we",
    "start": "1187410",
    "end": "1193740"
  },
  {
    "text": "can also store the state and if we have such a system that does event sourcing",
    "start": "1193740",
    "end": "1202490"
  },
  {
    "text": "there is an example here there is a micro service and it receives calls and",
    "start": "1202490",
    "end": "1207750"
  },
  {
    "text": "messages that go to the interface and it has an event store in which it",
    "start": "1207750",
    "end": "1213060"
  },
  {
    "text": "stores the events like order has been accepted and it has states so it now",
    "start": "1213060",
    "end": "1218880"
  },
  {
    "text": "learns about order 42 and order has been accepted another order has been accepted",
    "start": "1218880",
    "end": "1224370"
  },
  {
    "text": "and then some what has been cancelled so it removes that order and finally that",
    "start": "1224370",
    "end": "1230940"
  },
  {
    "text": "order has been delivered so it notices that this order has been delivered this is one way of doing event sourcing and",
    "start": "1230940",
    "end": "1236940"
  },
  {
    "text": "systems like these that have not just",
    "start": "1236940",
    "end": "1242040"
  },
  {
    "text": "state but also events or maybe state and events and star both of them these two",
    "start": "1242040",
    "end": "1248970"
  },
  {
    "text": "on the left those are the ones that actually do event sourcing this is the",
    "start": "1248970",
    "end": "1253980"
  },
  {
    "text": "idea so I would argue that event sourcing is actually just a pattern for",
    "start": "1253980",
    "end": "1262890"
  },
  {
    "text": "persistence it's the way that we store the information about the order we start",
    "start": "1262890",
    "end": "1268080"
  },
  {
    "text": "either as events or a state or as a combination if we start as events then",
    "start": "1268080",
    "end": "1274890"
  },
  {
    "text": "we have event sourcing and that is the idea and elaborating on that the",
    "start": "1274890",
    "end": "1283290"
  },
  {
    "start": "1281000",
    "end": "1281000"
  },
  {
    "text": "persistence is the responsibility of the micro services and it can be changed if",
    "start": "1283290",
    "end": "1289980"
  },
  {
    "text": "I have a micro service the internal working of that micro service should be changed it should be changeable that's",
    "start": "1289980",
    "end": "1295200"
  },
  {
    "text": "the whole idea it's about decoupling it might be different for each micro service so each micro service might use",
    "start": "1295200",
    "end": "1300540"
  },
  {
    "text": "event sourcing or not depending on the case I would argue for these orders it's probably not such a bad idea to just",
    "start": "1300540",
    "end": "1306570"
  },
  {
    "text": "store the events because you can calculate the status of the order on the",
    "start": "1306570",
    "end": "1312090"
  },
  {
    "text": "fly right because there are just a few events like excepted cancered delivered",
    "start": "1312090",
    "end": "1317790"
  },
  {
    "text": "so that shouldn't be too hard to calculate the state on the fly and it",
    "start": "1317790",
    "end": "1323010"
  },
  {
    "text": "should be a local decision of course it makes it easier to fix inconsistencies",
    "start": "1323010",
    "end": "1329340"
  },
  {
    "text": "so if I have an order if I have just the event order canceled and I never have",
    "start": "1329340",
    "end": "1336000"
  },
  {
    "text": "received the order the event order accepted I do have an inconsistency and I'm not",
    "start": "1336000",
    "end": "1341640"
  },
  {
    "text": "short handle it if I just have event sourcing I can just store the event order canceled for",
    "start": "1341640",
    "end": "1347210"
  },
  {
    "text": "the time being and it's inconsistent and once the order accepted event appears I",
    "start": "1347210",
    "end": "1353480"
  },
  {
    "text": "can just start to and now I have a consistent view of you that makes sense that order has been accepted and then",
    "start": "1353480",
    "end": "1359870"
  },
  {
    "text": "canceled while before it was just an order that has been cancelled and never been accepted which cannot really happen",
    "start": "1359870",
    "end": "1366280"
  },
  {
    "text": "and the point that I'm trying to make here is okay so we have a shared",
    "start": "1366280",
    "end": "1372140"
  },
  {
    "text": "database and that's a bad idea I would argue the same is true for shared event sourcing so if I have a shared event",
    "start": "1372140",
    "end": "1378620"
  },
  {
    "text": "story in which I store all the events it's actually part of my persistence that I'm well externalizing to another",
    "start": "1378620",
    "end": "1385130"
  },
  {
    "text": "system and I end up in a very similar situation and I have the same issues and",
    "start": "1385130",
    "end": "1390410"
  },
  {
    "text": "you know if I have a ubiquitous language as in the events if I if I have all the",
    "start": "1390410",
    "end": "1395750"
  },
  {
    "text": "data in there I'm not sure who uses what and in this case it's even worse because it's the internal workings of the micro",
    "start": "1395750",
    "end": "1403520"
  },
  {
    "text": "services that I'm cover or that I'm touching so this is the basic issues concerning events why did I tell you",
    "start": "1403520",
    "end": "1410360"
  },
  {
    "text": "about this because I think if you think in particular about this slide that it's",
    "start": "1410360",
    "end": "1416210"
  },
  {
    "text": "nice to get all the old events but if you want to do events sourcing you probably want to store your events",
    "start": "1416210",
    "end": "1422540"
  },
  {
    "text": "locally in your own system so having access to all the old events is probably",
    "start": "1422540",
    "end": "1428330"
  },
  {
    "text": "not as useful as you might think okay so how am I going to implement an",
    "start": "1428330",
    "end": "1433760"
  },
  {
    "text": "event system one option is Kafka that is one of the systems that has been quite popular in",
    "start": "1433760",
    "end": "1440540"
  },
  {
    "text": "the last few month years whatever and the way that this system works is it has",
    "start": "1440540",
    "end": "1446810"
  },
  {
    "text": "records they contain a key they contain the value and the timestamp so here is",
    "start": "1446810",
    "end": "1452990"
  },
  {
    "text": "such a record and they can also contain some headers and they can be stored",
    "start": "1452990",
    "end": "1458060"
  },
  {
    "text": "forever so depending on how you how you configure Kafka so this is different",
    "start": "1458060",
    "end": "1463940"
  },
  {
    "text": "from your usual a message oriented system which usually which usually takes",
    "start": "1463940",
    "end": "1469400"
  },
  {
    "text": "that thing that event forwards it to all the other services and then it's",
    "start": "1469400",
    "end": "1476600"
  },
  {
    "text": "done with that event and gets rid of that event Kafka stores those events",
    "start": "1476600",
    "end": "1483680"
  },
  {
    "text": "basically can store them forever so that's a huge different in this regard",
    "start": "1483680",
    "end": "1489610"
  },
  {
    "start": "1487000",
    "end": "1487000"
  },
  {
    "text": "records are organizing topics topics have a name and they do have partitions",
    "start": "1489610",
    "end": "1495260"
  },
  {
    "text": "so I would talk about that in the next slide so here is a petition and her",
    "start": "1495260",
    "end": "1501640"
  },
  {
    "text": "petition the orders guaranteed if I have one sender so problem like order",
    "start": "1501640",
    "end": "1507110"
  },
  {
    "text": "accepted order canceled is somewhat more unlikely to happen because if order",
    "start": "1507110",
    "end": "1512810"
  },
  {
    "text": "accepted an order canceled appear in the same petition the orders guaranteed so",
    "start": "1512810",
    "end": "1519620"
  },
  {
    "text": "there is one problem less and this is of course a benefit consumer commits the",
    "start": "1519620",
    "end": "1530170"
  },
  {
    "text": "mess the records per using an offset so",
    "start": "1530170",
    "end": "1536990"
  },
  {
    "text": "they don't say okay I process this record I process this record they say I",
    "start": "1536990",
    "end": "1542270"
  },
  {
    "text": "process all the records and tear up tube record 23 and then they can say I",
    "start": "1542270",
    "end": "1548180"
  },
  {
    "text": "processed all the records up to the record 42 that's a difference and you",
    "start": "1548180",
    "end": "1555050"
  },
  {
    "text": "can have consumer groups so consumer groups allow you to have one consumer per petition that's nice for printing",
    "start": "1555050",
    "end": "1563180"
  },
  {
    "text": "invoices and doing deliveries if I have a lot of services that could do invoices",
    "start": "1563180",
    "end": "1568550"
  },
  {
    "text": "or deliveries if I make that a consumer",
    "start": "1568550",
    "end": "1574490"
  },
  {
    "text": "group if I have a consumer group of invoice microservices then it's just one",
    "start": "1574490",
    "end": "1580340"
  },
  {
    "text": "micro service that will get that event because there is just they will for each",
    "start": "1580340",
    "end": "1585950"
  },
  {
    "text": "petition there will be one micro service so I sent some event to some petition",
    "start": "1585950",
    "end": "1591500"
  },
  {
    "text": "and that petition will be handled by one micro service and that's it so there is",
    "start": "1591500",
    "end": "1596930"
  },
  {
    "text": "no way that multiple micro services will try to do the same delivery or the same",
    "start": "1596930",
    "end": "1602720"
  },
  {
    "text": "invoice because they are organized in a consumer group even if there are multiple instances of the",
    "start": "1602720",
    "end": "1610070"
  },
  {
    "text": "services so this is actually quite useful so here is another visualization",
    "start": "1610070",
    "end": "1615770"
  },
  {
    "text": "here is the topic there is a record here it goes to a consumer and there is an",
    "start": "1615770",
    "end": "1621740"
  },
  {
    "text": "offset here and the offset is committed per consumer so if I have some more",
    "start": "1621740",
    "end": "1626990"
  },
  {
    "text": "records I can basically say okay I have handled all these different records and",
    "start": "1626990",
    "end": "1633530"
  },
  {
    "text": "here is another one this is one petition and I might have some other petitions",
    "start": "1633530",
    "end": "1638930"
  },
  {
    "text": "with some other offsets and then I might have another consumer so here's a consumer group with two consumers and",
    "start": "1638930",
    "end": "1646160"
  },
  {
    "text": "each petition has just one consumer so as the source of events I will send an",
    "start": "1646160",
    "end": "1653480"
  },
  {
    "text": "event to one of those petitions and it will be handled by just exactly one consumer so just one invoice or one",
    "start": "1653480",
    "end": "1659450"
  },
  {
    "text": "delivery will be done that's basically the idea so here's the producer and",
    "start": "1659450",
    "end": "1665690"
  },
  {
    "text": "here's the consumable you can do replication that is also quite nice so you can have each petition replicated",
    "start": "1665690",
    "end": "1674180"
  },
  {
    "start": "1669000",
    "end": "1669000"
  },
  {
    "text": "and there that can be interrupted cos so you can configure how many replicas",
    "start": "1674180",
    "end": "1681230"
  },
  {
    "text": "should be written to until the message is or the record is considered to be",
    "start": "1681230",
    "end": "1686750"
  },
  {
    "text": "successfully delivered to kafka why is this interesting because it means that our system is horizontally scalable",
    "start": "1686750",
    "end": "1694300"
  },
  {
    "text": "traditionally that has been a problem if you have a messaging system there is a limit to the horizontal scalability here",
    "start": "1694300",
    "end": "1702620"
  },
  {
    "text": "it's more like a no sequel database where you can basically do a lot of scaling because there are petitions that",
    "start": "1702620",
    "end": "1709010"
  },
  {
    "text": "can be distributed across the service and you can have replicas so even if one",
    "start": "1709010",
    "end": "1714830"
  },
  {
    "text": "of the systems fails you still have surviving replicas and you can continue to operate and this is I think one of",
    "start": "1714830",
    "end": "1721310"
  },
  {
    "text": "the reasons why Kafka is nice and it's very interesting and not just because it",
    "start": "1721310",
    "end": "1729080"
  },
  {
    "text": "can store the records forever but also because it can scale differently and behave differently so here is again our",
    "start": "1729080",
    "end": "1738410"
  },
  {
    "text": "example order invoice and delivery and I've created a very simple version",
    "start": "1738410",
    "end": "1744740"
  },
  {
    "text": "of this example that you can find on github and play around with it takes you",
    "start": "1744740",
    "end": "1750620"
  },
  {
    "text": "about I guess three commands to run it so you would need to run a maven build you would need to create the docker",
    "start": "1750620",
    "end": "1757190"
  },
  {
    "text": "containers and you will need to run them and there is a very extensive documentation about that around that so",
    "start": "1757190",
    "end": "1762890"
  },
  {
    "text": "this is something that you can play around with and the docker containers that are being created are basically an",
    "start": "1762890",
    "end": "1770510"
  },
  {
    "text": "HTTP load balancer that gives centralized access to all the systems then there is order shipping and",
    "start": "1770510",
    "end": "1776809"
  },
  {
    "text": "invoicing they have web interfaces so you can look at all the invoices all the shipments and all the orders and you can",
    "start": "1776809",
    "end": "1782690"
  },
  {
    "text": "create an order that would send a message to the kafka running in a",
    "start": "1782690",
    "end": "1788630"
  },
  {
    "text": "different docker container there is zookeeper for the to store configuration",
    "start": "1788630",
    "end": "1794690"
  },
  {
    "text": "information and then Kafka would send that information to shipping and invoicing and each of these systems has",
    "start": "1794690",
    "end": "1802149"
  },
  {
    "text": "well a connection to the database so how does that actually work or why is that",
    "start": "1802149",
    "end": "1808190"
  },
  {
    "text": "not such a bad idea because each of these systems has a different schema inside the database so it's fine it's",
    "start": "1808190",
    "end": "1814580"
  },
  {
    "text": "not one gigantic death far like schema that everyone writes to and reads from",
    "start": "1814580",
    "end": "1820010"
  },
  {
    "text": "but it's three different schemas so using a centralized database is fine and I could have used three different",
    "start": "1820010",
    "end": "1826370"
  },
  {
    "text": "databases but that would be just be would just be a waste of resources the",
    "start": "1826370",
    "end": "1834679"
  },
  {
    "text": "events contain all the information so it's a publish language it contains all the information that invoice and",
    "start": "1834679",
    "end": "1841340"
  },
  {
    "text": "delivery might be interested in I could have used specific events which would have provided me more independence so",
    "start": "1841340",
    "end": "1847940"
  },
  {
    "text": "more customer-supplier style or I could just have have had one ID in the event",
    "start": "1847940",
    "end": "1854140"
  },
  {
    "text": "and services for detailed information but I have stuck to that one decision",
    "start": "1854140",
    "end": "1861640"
  },
  {
    "start": "1860000",
    "end": "1860000"
  },
  {
    "text": "the data in the event is copied over to invoice and delivery so this is all that",
    "start": "1861640",
    "end": "1869510"
  },
  {
    "text": "inconsistency stuff that I was afraid of and it's denormalized",
    "start": "1869510",
    "end": "1874930"
  },
  {
    "text": "I take the information from the delivery there is the delivery address and the",
    "start": "1874930",
    "end": "1880930"
  },
  {
    "text": "way and the size of the items and the price and so on and I copied that over so if I have another order I take that",
    "start": "1880930",
    "end": "1888370"
  },
  {
    "text": "information from the next order and copy it also over so if the price changes well that information is copied over to",
    "start": "1888370",
    "end": "1898420"
  },
  {
    "text": "the invoice and the delivery which is exactly what you want if the price of some item changes you don't want to have",
    "start": "1898420",
    "end": "1905740"
  },
  {
    "text": "each invoice change so that is one of",
    "start": "1905740",
    "end": "1911170"
  },
  {
    "text": "the points I think this is an indication that it's a good idea to have a bond of context here and I don't need to have",
    "start": "1911170",
    "end": "1918490"
  },
  {
    "text": "any kind of complex history ization about the pricing because I just copy over the information and that's it so if",
    "start": "1918490",
    "end": "1924400"
  },
  {
    "text": "I have price change I just do that price change in the order system and the historize data the historic price would",
    "start": "1924400",
    "end": "1933040"
  },
  {
    "text": "be stored in each invoice very really matters so Kafka does provide access to",
    "start": "1933040",
    "end": "1940090"
  },
  {
    "start": "1936000",
    "end": "1936000"
  },
  {
    "text": "old events you could use that for event sourcing but yet then you end up with",
    "start": "1940090",
    "end": "1945400"
  },
  {
    "text": "that event sourcing death stall so I wouldn't do that there is a guaranteed order that's great because it means that",
    "start": "1945400",
    "end": "1952059"
  },
  {
    "text": "we can deal more easily with or inconsistencies our less likely there is",
    "start": "1952059",
    "end": "1960100"
  },
  {
    "text": "a way to send some event out and make sure that just one instance of a micro",
    "start": "1960100",
    "end": "1966910"
  },
  {
    "text": "service receives that event to make sure that there's just one way in was printed",
    "start": "1966910",
    "end": "1971950"
  },
  {
    "text": "or one delivery made however it is additional infrastructure I tend to be a",
    "start": "1971950",
    "end": "1979120"
  },
  {
    "text": "fan of of message oriented middleware so I think it's a great technology I like",
    "start": "1979120",
    "end": "1984610"
  },
  {
    "text": "it because it's as an coronis it allows me to do to build reliable systems but I",
    "start": "1984610",
    "end": "1989890"
  },
  {
    "text": "need to have that in production in case of Kafka that means I need to have some",
    "start": "1989890",
    "end": "1995500"
  },
  {
    "text": "kind of well cluster and probably I need to have some kind of stable storage STM",
    "start": "1995500",
    "end": "2002929"
  },
  {
    "text": "like SSDs or spinning disks to save all that information I need to have",
    "start": "2002929",
    "end": "2009659"
  },
  {
    "text": "some kind of backup in place and you know and all these kinds of things you get the idea so this is actually one of",
    "start": "2009659",
    "end": "2016140"
  },
  {
    "text": "the problems that you might have and because it's complex infrastructure",
    "start": "2016140",
    "end": "2021210"
  },
  {
    "text": "might also be hard to tune it to make it really performant and fast so is there any alternative I would argue there is",
    "start": "2021210",
    "end": "2027630"
  },
  {
    "text": "and the alternative would be to use rests and Adam and Adam is the format",
    "start": "2027630",
    "end": "2036210"
  },
  {
    "text": "that is used is basically just the data format it's based on XML this is what we",
    "start": "2036210",
    "end": "2041820"
  },
  {
    "text": "have been using before Jason and it is originally used for feeds blocks and",
    "start": "2041820",
    "end": "2048658"
  },
  {
    "text": "podcasts and these kinds of things so it's basically just one XML document that contains information about all the",
    "start": "2048659",
    "end": "2055378"
  },
  {
    "text": "separate issues of my block or a podcast or whatever it's accessed through HTTP",
    "start": "2055379",
    "end": "2061290"
  },
  {
    "text": "so I will just go to that URL and get that Adam document which is an XML",
    "start": "2061290",
    "end": "2067230"
  },
  {
    "text": "document and I'm done and the idea here is to use this technology that is very well-established",
    "start": "2067230",
    "end": "2073710"
  },
  {
    "text": "and use it to provide a feed of events or orders in my case shouldn't be too",
    "start": "2073710",
    "end": "2081599"
  },
  {
    "text": "hard such an XML document provides some",
    "start": "2081599",
    "end": "2088470"
  },
  {
    "text": "information that only really makes sense if you're talking about a blog or a podcast such as an author a summary a",
    "start": "2088470",
    "end": "2095339"
  },
  {
    "text": "title that doesn't really make a lot of sense for an order does it write in order it really doesn't have an author",
    "start": "2095339",
    "end": "2100410"
  },
  {
    "text": "so this is something that you have to well deal with because otherwise you end up with invalid item documents and then",
    "start": "2100410",
    "end": "2107760"
  },
  {
    "text": "it's basically not Adam and then in the XML structure there's a link to details",
    "start": "2107760",
    "end": "2113730"
  },
  {
    "text": "so you can basically say okay this there is an order its order 42 here is the link to more details and there are also",
    "start": "2113730",
    "end": "2121710"
  },
  {
    "text": "timestamps so you can learn about when that order was accepted for example or",
    "start": "2121710",
    "end": "2126750"
  },
  {
    "text": "that event happened and then you can use content negotiation to get different",
    "start": "2126750",
    "end": "2132480"
  },
  {
    "text": "data formats or details condom negotiation is a part of the HTTP protocol it's implemented in the accept",
    "start": "2132480",
    "end": "2138569"
  },
  {
    "text": "header so usually if you do some age request to get some website there is an",
    "start": "2138569",
    "end": "2144540"
  },
  {
    "text": "exception that says yeah I'm a browser I accept HTML PDF gif and what have you",
    "start": "2144540",
    "end": "2150600"
  },
  {
    "text": "ping and you can use this to define what",
    "start": "2150600",
    "end": "2155880"
  },
  {
    "text": "kind of data structure you accept you you want to have in such a system so you",
    "start": "2155880",
    "end": "2161460"
  },
  {
    "text": "can basically say yeah I'm an order system if I'm an invoice system I need",
    "start": "2161460",
    "end": "2166620"
  },
  {
    "text": "information that suits an invoice I'm a delivery system I need information that",
    "start": "2166620",
    "end": "2171750"
  },
  {
    "text": "suits a delivery or more precisely delivery in version 1.0 so this is quite",
    "start": "2171750",
    "end": "2178530"
  },
  {
    "text": "nice because it means the delivery and in bars can both consume the same item feet but they can still use different",
    "start": "2178530",
    "end": "2185040"
  },
  {
    "text": "data formats for the details but we need to send out the information so I need to",
    "start": "2185040",
    "end": "2191010"
  },
  {
    "text": "subscribe to the feed so how am I going to do that well I'm just gonna be doing",
    "start": "2191010",
    "end": "2196680"
  },
  {
    "text": "an HD if you get this is somewhat bad",
    "start": "2196680",
    "end": "2202800"
  },
  {
    "text": "because polling means well I have to Paul and I think it's not really elegant",
    "start": "2202800",
    "end": "2208230"
  },
  {
    "text": "but on the other hand it means that the client can decide when to process new events it's not pushed to it the client",
    "start": "2208230",
    "end": "2215520"
  },
  {
    "text": "instead of actively Paul's for new events so if the client is very busy I",
    "start": "2215520",
    "end": "2220950"
  },
  {
    "text": "can just say at the moment I'm not gonna process any new events so that's quite",
    "start": "2220950",
    "end": "2225960"
  },
  {
    "text": "nice but it's a very inefficient it doesn't make a lot of sense to say yeah I want to have a list of all the orders",
    "start": "2225960",
    "end": "2231870"
  },
  {
    "text": "oh look at that no new orders so let me get a new list Oh still no new orders",
    "start": "2231870",
    "end": "2237990"
  },
  {
    "text": "that doesn't make a lot of sense because we have a lot of unchanged data luckily again we can rely on the",
    "start": "2237990",
    "end": "2245070"
  },
  {
    "text": "features of the HTTP protocol because there is quite a lot of support for caching in there so what I can do is I",
    "start": "2245070",
    "end": "2252330"
  },
  {
    "text": "can just say give me all the orders and in return I get that atom XML document",
    "start": "2252330",
    "end": "2259010"
  },
  {
    "text": "probably I would do some kind of paging like just give me a hundred or ten or",
    "start": "2259010",
    "end": "2264060"
  },
  {
    "text": "whatever and I can receive a last modified header by the server and the next time I access that feed I send in",
    "start": "2264060",
    "end": "2272880"
  },
  {
    "text": "get request and if modified since header and then the system can respond with either three or",
    "start": "2272880",
    "end": "2279660"
  },
  {
    "text": "four which basically says not modified and won't send anybody any information so that's very efficient or it would",
    "start": "2279660",
    "end": "2287790"
  },
  {
    "text": "send over no new data so the polling can actually be very efficient because of",
    "start": "2287790",
    "end": "2294330"
  },
  {
    "text": "HTTP caching and the way that HTTP does it again there is a demo if you're",
    "start": "2294330",
    "end": "2300660"
  },
  {
    "text": "interested in that and there is some code that has to do the handling around",
    "start": "2300660",
    "end": "2306080"
  },
  {
    "text": "the HTTP caching and these kinds of things and it's not entirely trivial but",
    "start": "2306080",
    "end": "2311550"
  },
  {
    "text": "well it is at least something that you can refer to and look at and if you look",
    "start": "2311550",
    "end": "2317010"
  },
  {
    "text": "at it from the docker container perspective what is going on there well it's basically the same there is an",
    "start": "2317010",
    "end": "2323430"
  },
  {
    "text": "httpd server that forwards requests so you have websites by each of these micro",
    "start": "2323430",
    "end": "2329580"
  },
  {
    "text": "services and there is that one database with separated schemas and then there is",
    "start": "2329580",
    "end": "2337800"
  },
  {
    "text": "HTTP an atom between these three systems as instead of Kafka one of the questions",
    "start": "2337800",
    "end": "2345030"
  },
  {
    "text": "is do you actually need atom for this and no you don't because the alternative",
    "start": "2345030",
    "end": "2354150"
  },
  {
    "start": "2353000",
    "end": "2353000"
  },
  {
    "text": "is to have your own format that just contains that information that you need",
    "start": "2354150",
    "end": "2359880"
  },
  {
    "text": "for orders or events and no information has no information that is relevant for blocks so no more although what have you",
    "start": "2359880",
    "end": "2366030"
  },
  {
    "text": "and you would still provide links and you would still use content negotiation",
    "start": "2366030",
    "end": "2371430"
  },
  {
    "text": "to get the details the only problem is that you cannot impress other people by",
    "start": "2371430",
    "end": "2377520"
  },
  {
    "text": "using that URL for your atom feed and put it in some atom reader but I think that's probably fine and a good",
    "start": "2377520",
    "end": "2384330"
  },
  {
    "text": "trade-off so the point that I'm trying to make here is that risk can be a synchronous in the sense that it can can",
    "start": "2384330",
    "end": "2392310"
  },
  {
    "text": "transfer events and it's also resilient because if one of the system fails well",
    "start": "2392310",
    "end": "2398790"
  },
  {
    "text": "it will just not power for quite for some time and eventually it will handle",
    "start": "2398790",
    "end": "2404460"
  },
  {
    "text": "all those events that have piled up so again you can provide access to old",
    "start": "2404460",
    "end": "2410400"
  },
  {
    "start": "2406000",
    "end": "2406000"
  },
  {
    "text": "events if they are snot anyway so chances are that all your orders are in the order system anyway so you could",
    "start": "2410400",
    "end": "2416940"
  },
  {
    "text": "provide or you could provide access to the orders it from from the dawn of time",
    "start": "2416940",
    "end": "2423540"
  },
  {
    "text": "if you want to s in Kafka if you have if you want to send out some",
    "start": "2423540",
    "end": "2432390"
  },
  {
    "text": "information to just one system there is actually not too easy right because",
    "start": "2432390",
    "end": "2438330"
  },
  {
    "text": "there would be one system that Paltz and then the other system would Paul and you",
    "start": "2438330",
    "end": "2443700"
  },
  {
    "text": "know you end up by one of these systems polling that feet and getting the information about the new the new order",
    "start": "2443700",
    "end": "2451530"
  },
  {
    "text": "and then that system would do the invoice and how does the other system",
    "start": "2451530",
    "end": "2456990"
  },
  {
    "text": "know that it's not supposed to do another invoice for the very same order one way of solving that is by providing",
    "start": "2456990",
    "end": "2463490"
  },
  {
    "text": "idempotency which means even if a system gets the same information twice the end",
    "start": "2463490",
    "end": "2472680"
  },
  {
    "text": "result is the same so even if I get the same information twice I should just have printed one invoice how does that",
    "start": "2472680",
    "end": "2480480"
  },
  {
    "text": "work well I take a new information from the from the feet I look at it I look at",
    "start": "2480480",
    "end": "2487770"
  },
  {
    "text": "my database and figure out whether I already created an invoice for that specific order and if that has happened",
    "start": "2487770",
    "end": "2494940"
  },
  {
    "text": "then I ignore that message and that means that one of the systems the first",
    "start": "2494940",
    "end": "2500040"
  },
  {
    "text": "one the winner would take that item from the feet and figure out that no invoice has been printed and would print an",
    "start": "2500040",
    "end": "2505950"
  },
  {
    "text": "invoice and the second one would take that item from the feet look at it and realized that someone already created an",
    "start": "2505950",
    "end": "2513720"
  },
  {
    "text": "invoice and were just ignore it you need to do that probably anyway because also",
    "start": "2513720",
    "end": "2518849"
  },
  {
    "text": "in Kafka there might be duplicates and in pretty much any message oriented middleware there might be duplicates but",
    "start": "2518849",
    "end": "2526230"
  },
  {
    "text": "in this case we are using that also to make sure that only one message has been",
    "start": "2526230",
    "end": "2531320"
  },
  {
    "text": "or that only one system has created an invoice and it's not just inelegant but",
    "start": "2531320",
    "end": "2537570"
  },
  {
    "text": "it's also inefficient right because you in synchronizing on the database so that's",
    "start": "2537570",
    "end": "2544380"
  },
  {
    "text": "the challenge but you don't have any additional infrastructure so that is",
    "start": "2544380",
    "end": "2551940"
  },
  {
    "text": "quite nice and some people actually argue that this is what micro services",
    "start": "2551940",
    "end": "2557490"
  },
  {
    "text": "are truly about that you shouldn't also have any kind of infrastructure but I",
    "start": "2557490",
    "end": "2563900"
  },
  {
    "text": "don't know I mean at the end of the day there has to be some kind of integration and communication so I believe this",
    "start": "2563900",
    "end": "2571500"
  },
  {
    "text": "should be fine so conclusion I would",
    "start": "2571500",
    "end": "2577500"
  },
  {
    "start": "2576000",
    "end": "2576000"
  },
  {
    "text": "argue that it's most important if you look at a micro services system to get this bit right and this is all about",
    "start": "2577500",
    "end": "2582780"
  },
  {
    "text": "bonding context and those bonham context will probably communicate why a business events and I think that's perfect",
    "start": "2582780",
    "end": "2590550"
  },
  {
    "text": "the inconsistencies that you get in that case are not as hard and problematic as",
    "start": "2590550",
    "end": "2595950"
  },
  {
    "text": "they are in generic distributed systems I would argue that an order that doesn't",
    "start": "2595950",
    "end": "2602280"
  },
  {
    "text": "really have an invoice yet and doesn't really have a delivery yet it's something that just happens and that is",
    "start": "2602280",
    "end": "2609050"
  },
  {
    "text": "acceptable because we did a good spill it into micro services this is very",
    "start": "2609050",
    "end": "2614400"
  },
  {
    "text": "important what data is in the event that gives you an idea about the decoupling",
    "start": "2614400",
    "end": "2619650"
  },
  {
    "text": "from an architectural perspective I wouldn't share the events that you're",
    "start": "2619650",
    "end": "2624780"
  },
  {
    "text": "using for event sourcing because it's part of your persistence and it's to me",
    "start": "2624780",
    "end": "2630240"
  },
  {
    "text": "similar to sharing a database so I wouldn't do that",
    "start": "2630240",
    "end": "2635400"
  },
  {
    "text": "I wouldn't overuse it and I would argue that Kafka is actually a very nice",
    "start": "2635400",
    "end": "2640740"
  },
  {
    "text": "solution for messaging not just because of the message history but also because of horizontal scalability it's very",
    "start": "2640740",
    "end": "2647069"
  },
  {
    "text": "reliable it's a very very simple system there is not a lot of if you look at add",
    "start": "2647069",
    "end": "2652260"
  },
  {
    "text": "more complex my message oriented systems they have transactions and two-phase commits and all these kinds of things",
    "start": "2652260",
    "end": "2658319"
  },
  {
    "text": "that are really complex and how to get to get right and to make perform and to make reliable and any",
    "start": "2658319",
    "end": "2666089"
  },
  {
    "text": "conditions and Kafka is very different it's basically just a file where you attach you",
    "start": "2666089",
    "end": "2671430"
  },
  {
    "text": "new records and you read records and I like that because it's such a simple",
    "start": "2671430",
    "end": "2677040"
  },
  {
    "text": "technology but rest might be just enough and as I said before there are people",
    "start": "2677040",
    "end": "2683400"
  },
  {
    "text": "who basic claim well this is the way to go because I want to have an S minimal infrastructure as possible if you liked",
    "start": "2683400",
    "end": "2690030"
  },
  {
    "text": "the presentation previous an email address and if you send an email to that email address you get the slides plus",
    "start": "2690030",
    "end": "2697800"
  },
  {
    "text": "all the free books purses samples from my other books this is actually powered by a small emerson lamda script so you",
    "start": "2697800",
    "end": "2704520"
  },
  {
    "text": "could argue that you're talking to a micro service in fact concerning data",
    "start": "2704520",
    "end": "2709650"
  },
  {
    "text": "privacy so there is a log file and your",
    "start": "2709650",
    "end": "2714720"
  },
  {
    "text": "email address is locked for I believe somewhat like 14 days and then it's",
    "start": "2714720",
    "end": "2719849"
  },
  {
    "text": "deleted if you are not able to send an image of the correct address it actually",
    "start": "2719849",
    "end": "2726180"
  },
  {
    "text": "makes it to my inbox so in that case I would make a manual effort to send you the information thanks a lot thanks a",
    "start": "2726180",
    "end": "2733410"
  },
  {
    "text": "lot for listening I'm happy to answer questions or",
    "start": "2733410",
    "end": "2739818"
  },
  {
    "text": "you",
    "start": "2743880",
    "end": "2745940"
  }
]