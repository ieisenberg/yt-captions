[
  {
    "start": "0",
    "end": "77000"
  },
  {
    "text": "[Music]",
    "start": "2540",
    "end": "10559"
  },
  {
    "text": "hello everyone good morning I hear myself Amplified so it means we're ready to go I see my title see higher order",
    "start": "10559",
    "end": "17880"
  },
  {
    "text": "infrastructure microservices on the docker swarm how much more buzzwords could I fit in a title I think I did a",
    "start": "17880",
    "end": "25640"
  },
  {
    "text": "good job apart from that so briefly about myself my name is Nico pauchi I'm",
    "start": "25640",
    "end": "31000"
  },
  {
    "text": "a developer Advocate at atlassian we make Confluence jir hipchat hbet I wanted to see if you guys",
    "start": "31000",
    "end": "38879"
  },
  {
    "text": "were ready with it uh but uh today I'm here as an Enthusiast of you know containers and Docker have been an",
    "start": "38879",
    "end": "45360"
  },
  {
    "text": "Enthusiast uh passionate experiment and adopter since the very beginning and so and it has been a theme",
    "start": "45360",
    "end": "53000"
  },
  {
    "text": "of this of this conference we've been hearing about microservices and containers for a little bit so I'll give",
    "start": "53000",
    "end": "59039"
  },
  {
    "text": "you my take and a path of exploration slightly different than the ones you've already seen but before we go",
    "start": "59039",
    "end": "66759"
  },
  {
    "text": "there I want to just do very briefly also because yesterday I saw some hands so people not very familiar with with",
    "start": "66759",
    "end": "73640"
  },
  {
    "text": "things instead of 12 12 slides on what Docker is I just want to tell you what happened three years ago so Docker has",
    "start": "73640",
    "end": "80560"
  },
  {
    "start": "77000",
    "end": "193000"
  },
  {
    "text": "recently passed three years um of age Mark which is impressive that uh for",
    "start": "80560",
    "end": "86759"
  },
  {
    "text": "such a young technology to have changed the way we think about you know deploying to the cloud and uh so even",
    "start": "86759",
    "end": "93880"
  },
  {
    "text": "though the Technologies underline Docker were there for many years and know we heard how Google were using containers",
    "start": "93880",
    "end": "100000"
  },
  {
    "text": "for 12 years already when Docker came along uh what Docker did was bringing",
    "start": "100000",
    "end": "105759"
  },
  {
    "text": "these technology and making it approachable to the average software team and so we they managed to form a",
    "start": "105759",
    "end": "112960"
  },
  {
    "text": "community that agreed on a way to uh package an application a way to define",
    "start": "112960",
    "end": "118159"
  },
  {
    "text": "interfaces into a running application uh a way to cach the building blocks of",
    "start": "118159",
    "end": "124680"
  },
  {
    "text": "your applications and a way to store these deliverables that you want to move so this was incredibly successful",
    "start": "124680",
    "end": "131120"
  },
  {
    "text": "because the sort of Technology was a little bit esoteric in the past and and uh with the usability of Docker this",
    "start": "131120",
    "end": "137680"
  },
  {
    "text": "became um yeah caught us by by storm and the entire industry has been seeming to",
    "start": "137680",
    "end": "143280"
  },
  {
    "text": "um adopted with with great enthus enthusiasm over the past three",
    "start": "143280",
    "end": "148840"
  },
  {
    "text": "years now the next step on this is what we've been obviously talking across this",
    "start": "148840",
    "end": "154040"
  },
  {
    "text": "entire uh conference which is the move from packaging a single application to",
    "start": "154040",
    "end": "161239"
  },
  {
    "text": "um uh say working at a slightly higher level of of abstraction so what we've",
    "start": "161239",
    "end": "167920"
  },
  {
    "text": "been talking about as orchestration so the developer doesn't think or doesn't worry too much anymore about the",
    "start": "167920",
    "end": "174360"
  },
  {
    "text": "physical infrastructure underlying um the the the the application that you need to write but",
    "start": "174360",
    "end": "181480"
  },
  {
    "text": "just about the relationships between the pieces and the components and the services of um of the the application",
    "start": "181480",
    "end": "188760"
  },
  {
    "text": "stack they need to write and so this has brought obviously uh this is a very brief and just just a random sampling of",
    "start": "188760",
    "end": "197040"
  },
  {
    "start": "193000",
    "end": "445000"
  },
  {
    "text": "of reasons why this has been helping us developers of all in all sizes and of",
    "start": "197040",
    "end": "202640"
  },
  {
    "text": "all kinds of teams to uh move to Containers move to orchestration uh isolating uh you know",
    "start": "202640",
    "end": "210080"
  },
  {
    "text": "your your application into tinier services and in moving to immutable infrastructure where you don't really",
    "start": "210080",
    "end": "217080"
  },
  {
    "text": "care where a certain piece of code is deployed as long as it's it's it's up and running and it exposes the parts",
    "start": "217080",
    "end": "223200"
  },
  {
    "text": "that they need to exposes exposes it makx it easier to upgrade",
    "start": "223200",
    "end": "228680"
  },
  {
    "text": "easier to to um to roll out uh it it",
    "start": "228680",
    "end": "233760"
  },
  {
    "text": "it's also because as we will see uh you'll be able to describe at the high level how the various services are",
    "start": "233760",
    "end": "241360"
  },
  {
    "text": "connected to each other H it makes easier to reason about having an overview of how your application is is",
    "start": "241360",
    "end": "248319"
  },
  {
    "text": "um linked uh and obviously all these orchestration Frameworks we've seen yesterday's mesos we've seen um",
    "start": "248319",
    "end": "255560"
  },
  {
    "text": "kubernetes and today in this talk we'll see a little bit of Docker swarm they're",
    "start": "255560",
    "end": "261160"
  },
  {
    "text": "built to for with resilience and scaling in mind and so obviously nothing comes",
    "start": "261160",
    "end": "267160"
  },
  {
    "text": "for free but those those frame works really help thinking big and scaling",
    "start": "267160",
    "end": "272680"
  },
  {
    "text": "your application um to uh a big big tra to handle big traffic big",
    "start": "272680",
    "end": "278600"
  },
  {
    "text": "loads so having said that what I want to do with you today is to actually work on",
    "start": "278600",
    "end": "284759"
  },
  {
    "text": "a polyglot application built on Tiny services and we're going to do it from",
    "start": "284759",
    "end": "289919"
  },
  {
    "text": "scratch together using Docker swarm now I see in the audience your level of enthusiasm for this or your level your",
    "start": "289919",
    "end": "296520"
  },
  {
    "text": "level of appetite some of you are like this some of you are like this tell me",
    "start": "296520",
    "end": "304759"
  },
  {
    "text": "screaming so I hope you all are in this category eagerly anticipating seeing the",
    "start": "304759",
    "end": "310680"
  },
  {
    "text": "docker SW things but first before I do I just want to give a brief disclaimer brief demo with as we all demos there",
    "start": "310680",
    "end": "317000"
  },
  {
    "text": "was a few Corners that I needed to cut to fit into the 30 minutes some of the building of the machines will be sped up",
    "start": "317000",
    "end": "323720"
  },
  {
    "text": "some of the you know distributed login setups maybe we skip it for this time so",
    "start": "323720",
    "end": "328840"
  },
  {
    "text": "I bear with me me with this because I just want to give you a sense of what's",
    "start": "328840",
    "end": "333880"
  },
  {
    "text": "possible H otherwise this would take you know a few more few more hours to set this up the other thing I want to show",
    "start": "333880",
    "end": "340919"
  },
  {
    "text": "so what what are we are we going to work through uh it's a simple application you",
    "start": "340919",
    "end": "346039"
  },
  {
    "text": "might have already seen this it comes up sometimes in the docker compos demos but we're going to take it and actually",
    "start": "346039",
    "end": "352240"
  },
  {
    "text": "deploy it onto a Docker swarm and we are make going to make sure that uh there's a reverse proxy in front of it and it's",
    "start": "352240",
    "end": "358720"
  },
  {
    "text": "a fully fledged tiny microservices application so it's a voting service",
    "start": "358720",
    "end": "364160"
  },
  {
    "text": "there's a there's a certain domain to vote to cast votes there's a certain domain to um see the results from a",
    "start": "364160",
    "end": "371960"
  },
  {
    "text": "point of view of the of a demo it seems relatively simple maybe you could do this with a very simple monolithic",
    "start": "371960",
    "end": "378479"
  },
  {
    "text": "database driven application but we're going to do it the new way the trendy way with microservices this is the",
    "start": "378479",
    "end": "384919"
  },
  {
    "text": "architecture that we want to build we want to uh reverse proxy at the front of",
    "start": "384919",
    "end": "390000"
  },
  {
    "text": "application that the load balancer that distributes CL traffic to the proper uh",
    "start": "390000",
    "end": "395319"
  },
  {
    "text": "services and we will have uh so polyglot microservice application so we'll have a",
    "start": "395319",
    "end": "400800"
  },
  {
    "text": "python application that receives the votes and instead of storing them directly into the database because we",
    "start": "400800",
    "end": "406360"
  },
  {
    "text": "have to handle such realtime traffic we're going to store the votes into a key Value Store using redis uh the votes",
    "start": "406360",
    "end": "413880"
  },
  {
    "text": "are then stored in a more permanent database using a worker which is written in Java",
    "start": "413880",
    "end": "420360"
  },
  {
    "text": "and to to get the results actually there's a results application which a different team has written in node.js",
    "start": "420360",
    "end": "425639"
  },
  {
    "text": "and that's going to read the results from the postour database so it's a",
    "start": "425639",
    "end": "431759"
  },
  {
    "text": "simple application but it's non-trivial and it can give you a sense for",
    "start": "431759",
    "end": "437319"
  },
  {
    "text": "how uh to do this so want to give you a sense of how to you would do this if you wanted to use docker's own uh",
    "start": "437319",
    "end": "443560"
  },
  {
    "text": "orchestration tools so what pieces do we need to make this happen we need a way",
    "start": "443560",
    "end": "449120"
  },
  {
    "start": "445000",
    "end": "791000"
  },
  {
    "text": "to create create uh machines that have Docker configured tell the machines that are part of a cluster uh all in the",
    "start": "449120",
    "end": "455680"
  },
  {
    "text": "simplest possible way we need um a higher level configuration that to to",
    "start": "455680",
    "end": "461720"
  },
  {
    "text": "describe how the services should be related and connected to each other how the web applications should talk to the",
    "start": "461720",
    "end": "466960"
  },
  {
    "text": "data sources uh how the reverse proxy should you know pick up when a new instance of of our applications are uh",
    "start": "466960",
    "end": "473919"
  },
  {
    "text": "spawn up and down and we need a a cluster manager something that actually",
    "start": "473919",
    "end": "479039"
  },
  {
    "text": "knows what physical infrastructure we have available and can deploy applications onto the various machines",
    "start": "479039",
    "end": "484960"
  },
  {
    "text": "using some business rules that we will decide and then there are some side concerns like obviously the nodes in",
    "start": "484960",
    "end": "492479"
  },
  {
    "text": "your diverse cluster need to be able to know each others IP addresses and names so we need something to manage overlay",
    "start": "492479",
    "end": "499199"
  },
  {
    "text": "networks we need a way to manage logs Mount volumes and so on so for all of those Docker docker's own uh tools uh do",
    "start": "499199",
    "end": "508879"
  },
  {
    "text": "there's a tool that does each of these things so Docker machine is is able to provision uh hosts on the fly on a on a",
    "start": "508879",
    "end": "516159"
  },
  {
    "text": "number of interfaces as service providers Docker compose is a is a is a",
    "start": "516159",
    "end": "521680"
  },
  {
    "text": "utility command that allows you to describe at a high level your your services and then deploys them for you",
    "start": "521680",
    "end": "528160"
  },
  {
    "text": "on on the Swarm Docker swarm is the cluster manager uh created by by docker's own",
    "start": "528160",
    "end": "535000"
  },
  {
    "text": "open source team and then there's nowadays embedded inside the docker commands there a way to create the N",
    "start": "535000",
    "end": "540800"
  },
  {
    "text": "overlay networks it's a it's a pluggable architecture so you can plug in the netor network driver that you're more",
    "start": "540800",
    "end": "547079"
  },
  {
    "text": "familiar with and also volumes nowadays are first class citizens of the docker commands and and so on there's other",
    "start": "547079",
    "end": "554800"
  },
  {
    "text": "concerns that we need to take care of uh some we will do some we will you know uh",
    "start": "554800",
    "end": "560040"
  },
  {
    "text": "elegantly uh gloss over uh for one thing that for sure we want we will need and I",
    "start": "560040",
    "end": "565560"
  },
  {
    "text": "want to show it to you is how to make sure you have a a dynamic reverse proxy in front of your application uh we need",
    "start": "565560",
    "end": "572120"
  },
  {
    "text": "we will need a discovery service that keeps track of which machines are part of uh of the cluster and uh there's",
    "start": "572120",
    "end": "580079"
  },
  {
    "text": "other other concerns that when you build these sorts of architectures you will need though most likely we not covered",
    "start": "580079",
    "end": "586920"
  },
  {
    "text": "them today so from the point of view of physical machines we will need uh we",
    "start": "586920",
    "end": "592519"
  },
  {
    "text": "will this is how I imagined and will Design our tiny cluster we need the um a",
    "start": "592519",
    "end": "598600"
  },
  {
    "text": "cluster manager where we run Docker swarm that we will you will use a",
    "start": "598600",
    "end": "603640"
  },
  {
    "text": "discovery service I'll tell you more about that in a bit we want uh you know",
    "start": "603640",
    "end": "608839"
  },
  {
    "text": "a front facing uh machine that's going to host a reverse proxy and and hopefully will will be hit with a lot of",
    "start": "608839",
    "end": "615120"
  },
  {
    "text": "traffic then we'll have one or more machines that will handle all our services the web applications the",
    "start": "615120",
    "end": "620640"
  },
  {
    "text": "workers and we'll have a slightly different kind of machine to handle database loads uh where we store",
    "start": "620640",
    "end": "627160"
  },
  {
    "text": "probably poster SQL and maybe radies so that's that's what uh what it's our",
    "start": "627160",
    "end": "633200"
  },
  {
    "text": "plan I want to give you a brief word about Docker swarm so that you can compare it it's a similar",
    "start": "633200",
    "end": "640760"
  },
  {
    "text": "solution it's a similar tool than what we've seen kubernetes is capable of doing mesos is capable of doing what",
    "start": "640760",
    "end": "648399"
  },
  {
    "text": "what Docker swarm does it allows you to run Docker commands that instead of running on your on a single host run",
    "start": "648399",
    "end": "655320"
  },
  {
    "text": "across an entire cluster to so this is a very high level uh briefly drawn",
    "start": "655320",
    "end": "661399"
  },
  {
    "text": "architecture of Docker swarm there's a master which can be redundant there a discovery service and Docker swarm",
    "start": "661399",
    "end": "667120"
  },
  {
    "text": "supports uh quite a few of them it CD console uh uh you can CH you can pick",
    "start": "667120",
    "end": "673240"
  },
  {
    "text": "and choose and the docker swarm obviously is is able to deploy and run",
    "start": "673240",
    "end": "678440"
  },
  {
    "text": "containers on all the uh machines that are available in the Swarm themselves so",
    "start": "678440",
    "end": "683600"
  },
  {
    "text": "to do accomplish that uh Docker runs swarm agents on each of those uh you",
    "start": "683600",
    "end": "689720"
  },
  {
    "text": "know Docker enabled machines and uh to be able to accomplish this we need a",
    "start": "689720",
    "end": "696600"
  },
  {
    "text": "discovery service so what Docker swarm does is delegates which machines are part of the swarm uh to a discovery",
    "start": "696600",
    "end": "703160"
  },
  {
    "text": "service in this case we'll use uh console from hashicorp you've seen uh",
    "start": "703160",
    "end": "708440"
  },
  {
    "text": "hashicorp present yesterday and so the first step in this process is let's start from actual basic",
    "start": "708440",
    "end": "715240"
  },
  {
    "text": "is to uh create the physical infrastructure that we need so to to do that Docker has a very powerful command",
    "start": "715240",
    "end": "722440"
  },
  {
    "text": "called Docker machine that allows you to provision a host on a number of interface uh as a service",
    "start": "722440",
    "end": "730000"
  },
  {
    "text": "providers and it's quite powerful and supports a wide range of providers and",
    "start": "730000",
    "end": "735360"
  },
  {
    "text": "even though the docker create commands can become relatively lengthy the structure is very simple you say Docker",
    "start": "735360",
    "end": "742360"
  },
  {
    "text": "machine create you specify the driver which in the in this case is the service",
    "start": "742360",
    "end": "747560"
  },
  {
    "text": "provider that you want to use for this example you see on screen I picked digital ocean so in that case I need to",
    "start": "747560",
    "end": "753680"
  },
  {
    "text": "provide my digital ocean authentication key it's an environment variable so that you cannot steal my password my key and",
    "start": "753680",
    "end": "760240"
  },
  {
    "text": "deploy Machines of my hosts and uh then you spe might want to specify a region you want might want to specify the size",
    "start": "760240",
    "end": "766920"
  },
  {
    "text": "of a drive uh the kind of drive you want there's there's quite a many flags for",
    "start": "766920",
    "end": "773120"
  },
  {
    "text": "each provider that you choose and then you give it a name so in this case out to screen you see creating the console",
    "start": "773120",
    "end": "780040"
  },
  {
    "text": "machine where we'll hosted our Discovery service but uh we are talking about creating a swarm so we want to create a",
    "start": "780040",
    "end": "786560"
  },
  {
    "text": "swarm we need to pass a few more Flags to Docker machine so don't get scared",
    "start": "786560",
    "end": "792800"
  },
  {
    "start": "791000",
    "end": "1015000"
  },
  {
    "text": "this this can be all obviously scripted out when you want to create a provision a host with the docker swarm enabled you",
    "start": "792800",
    "end": "800360"
  },
  {
    "text": "need to add a few Flags like swarm hey the laser doesn't work okay so do you",
    "start": "800360",
    "end": "805480"
  },
  {
    "text": "see there Dash Das swarm it means I want to create provision a machine that's actually part of a swarm in this case",
    "start": "805480",
    "end": "812160"
  },
  {
    "text": "we're we're creating the Swarm master so we add dash dash swarm master and if you",
    "start": "812160",
    "end": "817880"
  },
  {
    "text": "remember the architectural diagram uh from before you you you remember that",
    "start": "817880",
    "end": "824480"
  },
  {
    "text": "the Swarm requires a discovery service so each machine we to each machine that",
    "start": "824480",
    "end": "829680"
  },
  {
    "text": "we create and provision as part of a swarm we want to make sure that the machine knows where to advertise when",
    "start": "829680",
    "end": "835000"
  },
  {
    "text": "the machine is up when the machine is down and what swarm it's part of that those are the the the flags you see like",
    "start": "835000",
    "end": "842680"
  },
  {
    "text": "swarm Discovery uh option the and and the cluster store means like where we",
    "start": "842680",
    "end": "848480"
  },
  {
    "text": "will store information about the cluster so this how it look if we would do this",
    "start": "848480",
    "end": "854040"
  },
  {
    "text": "now I have sped it up a little bit so I created a script that contains uh a",
    "start": "854040",
    "end": "860560"
  },
  {
    "text": "whole host of Docker create uh commands this is the one that creates the console",
    "start": "860560",
    "end": "865759"
  },
  {
    "text": "machine then uh this is just the command to run console on that instance and then",
    "start": "865759",
    "end": "872880"
  },
  {
    "text": "I have quite a few of these can you guys see or is it a bit dark okay I think you see you can uh",
    "start": "872880",
    "end": "880120"
  },
  {
    "text": "so you can see it there sorry cool and uh so there's there's quite a few commands the important thing to see here",
    "start": "880120",
    "end": "886399"
  },
  {
    "text": "is at the time of creation I can annotate with labels the hosts so this",
    "start": "886399",
    "end": "892120"
  },
  {
    "text": "is what we will use instead of using IP addresses or uh storing by hand the configuration files of the of domain",
    "start": "892120",
    "end": "899759"
  },
  {
    "text": "names we can annotate all the machines with labels and then we will be able to use those labels to uh deploy workloads",
    "start": "899759",
    "end": "908480"
  },
  {
    "text": "based on those uh tags we we have created so I've uh now we actually going",
    "start": "908480",
    "end": "914560"
  },
  {
    "text": "to create this I have sped up a little bit this process because depending on the service provider that you use this",
    "start": "914560",
    "end": "921560"
  },
  {
    "text": "might take uh a few more minutes and then we would lose too much time just looking at this uh dark screen so I this",
    "start": "921560",
    "end": "929199"
  },
  {
    "text": "script is going to go out and create the five machines we need so I'm going to speed it up for you a little",
    "start": "929199",
    "end": "937079"
  },
  {
    "text": "bit as you can see it's created the proxy has created the services machine is it a little bit cut and now if I do a",
    "start": "937600",
    "end": "945680"
  },
  {
    "text": "Docker machine LS and pardon me for grapping because I have quite a few machines that I was",
    "start": "945680",
    "end": "951680"
  },
  {
    "text": "been experimenting on you can see that I have uh uh five machines created only",
    "start": "951680",
    "end": "956920"
  },
  {
    "text": "one is not part of the cluster which is the console instance which is a discovery service and then I have a",
    "start": "956920",
    "end": "963000"
  },
  {
    "text": "cluster swarm manager a database a reverse proxy and a machine for the services and if I want to see uh I want",
    "start": "963000",
    "end": "970600"
  },
  {
    "text": "to switch my Docker command to actually affect the entire cluster I need to",
    "start": "970600",
    "end": "975639"
  },
  {
    "text": "evaluate some environment variable especially specifically the one from the uh Docker uh from the machine code",
    "start": "975639",
    "end": "982519"
  },
  {
    "text": "cluster and now I can do type Docker info and T and see that we have four",
    "start": "982519",
    "end": "989160"
  },
  {
    "text": "nodes available and I can see all the information all the tags related to that",
    "start": "989160",
    "end": "994839"
  },
  {
    "text": "uh to those machines um don't get too CAU up looking at this uh just want to",
    "start": "994839",
    "end": "999880"
  },
  {
    "text": "provide you a brief summary at the end which is here go back here so this is",
    "start": "999880",
    "end": "1005279"
  },
  {
    "text": "what we did we created some a few Docker machine statements and those are the",
    "start": "1005279",
    "end": "1010440"
  },
  {
    "text": "five machines we created uh just with those commands programmatically if you",
    "start": "1010440",
    "end": "1015759"
  },
  {
    "start": "1015000",
    "end": "1046000"
  },
  {
    "text": "go if you go and check in the digital ocean in the instance you'll see all those are the five machines and I've",
    "start": "1015759",
    "end": "1021440"
  },
  {
    "text": "been you know uh I'm going to be built by the second for the up time of these machines so we have",
    "start": "1021440",
    "end": "1028720"
  },
  {
    "text": "created this by using Docker machine and basically five Docker machine create commands now the beauty of uh Docker",
    "start": "1028720",
    "end": "1036720"
  },
  {
    "text": "swarm is that as as other orchestration platforms that we've seen uh in the in",
    "start": "1036720",
    "end": "1042038"
  },
  {
    "text": "the past day um that's where the beauty of of abstraction comes in because",
    "start": "1042039",
    "end": "1049480"
  },
  {
    "start": "1046000",
    "end": "1205000"
  },
  {
    "text": "Docker swarm comes with strategies and filters and so it allows you to define a",
    "start": "1049480",
    "end": "1055559"
  },
  {
    "text": "very in a very a fine grained but still high level way how you want your",
    "start": "1055559",
    "end": "1060840"
  },
  {
    "text": "workloads and your application to be deployed so strategies are for example a",
    "start": "1060840",
    "end": "1066440"
  },
  {
    "text": "spread strategy we try to uh deploy your applications or your containers on as",
    "start": "1066440",
    "end": "1071559"
  },
  {
    "text": "many machines as you have available to spread out the load and bean packing strategy which we heard yesterday while",
    "start": "1071559",
    "end": "1078000"
  },
  {
    "text": "talking about Meesa um is about saving resources so packing as much containers as much resources as",
    "start": "1078000",
    "end": "1084720"
  },
  {
    "text": "possible on an as little uh number of machines as possible and the filters are are the the the tool that allows us to",
    "start": "1084720",
    "end": "1091600"
  },
  {
    "text": "decide where gives the business rules or where Services should reside so you can say uh I want to run this only where X",
    "start": "1091600",
    "end": "1100720"
  },
  {
    "text": "amount of gigs of RAM is available or I want to run uh we we can create Affinity filters so you can run a login service",
    "start": "1100720",
    "end": "1108039"
  },
  {
    "text": "and you always want the login service to run together with the application that it needs to log so all those allow you",
    "start": "1108039",
    "end": "1114039"
  },
  {
    "text": "to fine grainy decide uh where to deploy",
    "start": "1114039",
    "end": "1119080"
  },
  {
    "text": "your resources across your cluster so what we want the docker swarm to do uh we wanted to uh deploy you know",
    "start": "1119080",
    "end": "1127320"
  },
  {
    "text": "the reverse proxy on the reverse proxy machine configur it properly whenever something comes up like the results",
    "start": "1127320",
    "end": "1134240"
  },
  {
    "text": "application which needs to be Deploy on Services box and needs to uh the reverse proxy needs to pick it up and direct",
    "start": "1134240",
    "end": "1141039"
  },
  {
    "text": "traffic to it and the same goes for the voting application and the workers and we want Docker swarm to deploy also",
    "start": "1141039",
    "end": "1147520"
  },
  {
    "text": "obviously the database onto onto database capable machine and correctly",
    "start": "1147520",
    "end": "1152640"
  },
  {
    "text": "link the applications to the data sources now all this linking maybe we",
    "start": "1152640",
    "end": "1158799"
  },
  {
    "text": "think we need some configuration to make this happen right so we do need we need",
    "start": "1158799",
    "end": "1164320"
  },
  {
    "text": "a way to link our components and to do this the docker ecosystem has created uh tool called the docker compose Docker",
    "start": "1164320",
    "end": "1171280"
  },
  {
    "text": "compose is a command line tool that comes with a configuration file which is",
    "start": "1171280",
    "end": "1176720"
  },
  {
    "text": "written in yml and it's a a relatively readable way to define your",
    "start": "1176720",
    "end": "1182799"
  },
  {
    "text": "services now don't ask me how I came up with this image when I was designing I thought",
    "start": "1182799",
    "end": "1189799"
  },
  {
    "text": "maybe you were all like giggling and eager uh excited to see how to configure",
    "start": "1189799",
    "end": "1195480"
  },
  {
    "text": "uh Docker compos to make this application this demo appli happen I see you all giggling so this is working cool",
    "start": "1195480",
    "end": "1203480"
  },
  {
    "text": "uh so the the docker compos format is very readable H it's jaml file and you",
    "start": "1203480",
    "end": "1212120"
  },
  {
    "start": "1205000",
    "end": "1380000"
  },
  {
    "text": "describe at a very high level where do you get the you know release version of",
    "start": "1212120",
    "end": "1217280"
  },
  {
    "text": "your application and that is in the in the in the image in the image section uh",
    "start": "1217280",
    "end": "1223679"
  },
  {
    "text": "if you are building the images at the beginning you can even pass you know the the folder where the application is",
    "start": "1223679",
    "end": "1230440"
  },
  {
    "text": "running and that is in the build uh build uh flag over there you specify",
    "start": "1230440",
    "end": "1235600"
  },
  {
    "text": "which Port is exposed by the application and this is fairly recent you can now",
    "start": "1235600",
    "end": "1241480"
  },
  {
    "text": "specify uh on which images these service depends upon so you can you can specify",
    "start": "1241480",
    "end": "1247520"
  },
  {
    "text": "for example for the voting application we depend upon radi to be uh up and running now the interesting part of all",
    "start": "1247520",
    "end": "1253880"
  },
  {
    "text": "this piece is the environment variables part which is how we communicate to Docker swarm the constraints that we",
    "start": "1253880",
    "end": "1261320"
  },
  {
    "text": "want to impose onto this machine in this case we want to make sure that this uh service is started uh on an instance",
    "start": "1261320",
    "end": "1268840"
  },
  {
    "text": "that we tagged for services this will make sure that we will be deployed on the services machine one of or more of",
    "start": "1268840",
    "end": "1274559"
  },
  {
    "text": "the services machine and to make sure that the reverse proxy picks it up and as and serves it when somebody Types on",
    "start": "1274559",
    "end": "1281880"
  },
  {
    "text": "the on the host name vote. cluster. looc which I have you know uh temporarily set",
    "start": "1281880",
    "end": "1287320"
  },
  {
    "text": "up as as a fixed IP address we add an environment variable virtual host which will be picked up by our um um reverse",
    "start": "1287320",
    "end": "1296240"
  },
  {
    "text": "proxy I'll show you how that works in a bit so just to go through it the result application is exactly the same the only",
    "start": "1296240",
    "end": "1302440"
  },
  {
    "text": "thing it change that changes there is that instead of depending on radies it depends on the permanent database DB and",
    "start": "1302440",
    "end": "1309919"
  },
  {
    "text": "if we go through the the next the worker which is remember is written in Java also as just an image that they",
    "start": "1309919",
    "end": "1316520"
  },
  {
    "text": "published somewhere on a private Reg registry and I want to make sure also that it runs on on an instance labeled",
    "start": "1316520",
    "end": "1323279"
  },
  {
    "text": "for for services and uh I just used very plain",
    "start": "1323279",
    "end": "1329240"
  },
  {
    "text": "vanilla configurations for the data sources obviously more complex setups will require slightly more detail the",
    "start": "1329240",
    "end": "1336000"
  },
  {
    "text": "only thing I did here was to specify explicitly the node where I want the database to be so instead of using a",
    "start": "1336000",
    "end": "1343279"
  },
  {
    "text": "label constraint in this case I use the node constraint so I say deploy this on the machine machine that I called TB and",
    "start": "1343279",
    "end": "1352279"
  },
  {
    "text": "uh I specify the ports where RS need to run some volumes that that uh uh",
    "start": "1352279",
    "end": "1358679"
  },
  {
    "text": "postgress needs now there's one final bit of all this configuration which is",
    "start": "1358679",
    "end": "1363799"
  },
  {
    "text": "configuring the reverse proxy that dynamically will need to redirect traffic as the containers come up and",
    "start": "1363799",
    "end": "1370320"
  },
  {
    "text": "down and are spread out across multiple machines so to do this we use U I used a",
    "start": "1370320",
    "end": "1376039"
  },
  {
    "text": "open source um project called engine X proxy and the engine X proxy Works in a",
    "start": "1376039",
    "end": "1382520"
  },
  {
    "start": "1380000",
    "end": "1868000"
  },
  {
    "text": "very clever way it inspects uh so first it connects to the docker swarm",
    "start": "1382520",
    "end": "1387799"
  },
  {
    "text": "intercepting all events into the into the Swarm so it can can see whenever a",
    "start": "1387799",
    "end": "1393320"
  },
  {
    "text": "container is started and stopped and then uh when whichever container has an",
    "start": "1393320",
    "end": "1398520"
  },
  {
    "text": "environment variable called virtual host it will then refresh the engine X configuration with that information and",
    "start": "1398520",
    "end": "1405120"
  },
  {
    "text": "start serving traffic to it now the trick the problem with the docker compose configuration in this case is",
    "start": "1405120",
    "end": "1411919"
  },
  {
    "text": "that you cannot run commands inside the docker compose configuration file so you cannot at run time when you run Docker",
    "start": "1411919",
    "end": "1418919"
  },
  {
    "text": "compose uh have uh dynamically fill it the IP address of the docker swarm so",
    "start": "1418919",
    "end": "1424200"
  },
  {
    "text": "for that you can actually use a trick which is to load up the proxy M environment variables which is like a",
    "start": "1424200",
    "end": "1430360"
  },
  {
    "text": "file on the file system and that you can generate with a with a small script I had a uh a uh the demo of that but it's",
    "start": "1430360",
    "end": "1437679"
  },
  {
    "text": "not that interesting the result is that environment variable uh file contains",
    "start": "1437679",
    "end": "1443480"
  },
  {
    "text": "basically the IP address of the docker swarm once you have all of this set up and by the way we've gone through it",
    "start": "1443480",
    "end": "1450039"
  },
  {
    "text": "like section by section but it's just a single file with just a handful of lines I know what you guys are thinking this",
    "start": "1450039",
    "end": "1456000"
  },
  {
    "text": "has been a lot of talking where is the demo leoski I want",
    "start": "1456000",
    "end": "1461360"
  },
  {
    "text": "to you to all to see this it's like okay well okay I've embarrassed myself enough",
    "start": "1461360",
    "end": "1467960"
  },
  {
    "text": "now maybe something cool will happen after all this okay so let's see if all",
    "start": "1467960",
    "end": "1474399"
  },
  {
    "text": "this setup after all this setup and explanations uh what do I need to do to bring up my my cluster I I just need to",
    "start": "1474399",
    "end": "1483039"
  },
  {
    "text": "type Docker compose app send it in the background and this will is uh will pull I also sped it up a little bit will pull",
    "start": "1483039",
    "end": "1489880"
  },
  {
    "text": "all the images needed uh on the machines that we want to run them and it will be",
    "start": "1489880",
    "end": "1495159"
  },
  {
    "text": "a little bit animatic because um yeah were done so it the the system is up and",
    "start": "1495159",
    "end": "1500399"
  },
  {
    "text": "running I can do Docker compose BS and I'll see that uh all the uh tiny",
    "start": "1500399",
    "end": "1506960"
  },
  {
    "text": "services that I defined are actually up and running but I'm more so now let me",
    "start": "1506960",
    "end": "1512320"
  },
  {
    "text": "actually show it to you so I have uh added to my hosts the IP address of uh",
    "start": "1512320",
    "end": "1518640"
  },
  {
    "text": "the reverse proxy and now I can so I have a vote. cluster. local and I can",
    "start": "1518640",
    "end": "1524679"
  },
  {
    "text": "you know vote if I like more cats or dogs very creative and I if I do Docker compos logs minus F",
    "start": "1524679",
    "end": "1532360"
  },
  {
    "text": "you can see that all the applications the aggregated logs of all the applications are showing and I know",
    "start": "1532360",
    "end": "1538679"
  },
  {
    "text": "registered that I voted then I have another subdomain that is the results",
    "start": "1538679",
    "end": "1543760"
  },
  {
    "text": "application which uh will show that I actually voted dogs I was a bit scared for a second that it would show the",
    "start": "1543760",
    "end": "1549880"
  },
  {
    "text": "wrong result but that didn't happen now to prove that you know the system works I'm just going to",
    "start": "1549880",
    "end": "1555919"
  },
  {
    "text": "do uh an anonymous session and vote the other and you should results should",
    "start": "1555919",
    "end": "1563600"
  },
  {
    "text": "equalize oh by the way you see all those pinks coming from the result application because uh just to be fancy that's a",
    "start": "1563600",
    "end": "1569880"
  },
  {
    "text": "node nodejs application using socket IO so it's going to it's pinging it's",
    "start": "1569880",
    "end": "1575399"
  },
  {
    "text": "pinging the back end to know if there's new results so that it can update",
    "start": "1575399",
    "end": "1580679"
  },
  {
    "text": "dynamically uh so the next the most important bit of it is actually to show you where thank you uh is to show you",
    "start": "1580679",
    "end": "1588399"
  },
  {
    "text": "where the applications are running and if we go and check with the docker PS",
    "start": "1588399",
    "end": "1593520"
  },
  {
    "text": "you can see that actually the uh nodejs application has been deployed on the",
    "start": "1593520",
    "end": "1598840"
  },
  {
    "text": "services machine see there's Services there means it used the Box uh that we",
    "start": "1598840",
    "end": "1604960"
  },
  {
    "text": "named services and if we look at the uh what",
    "start": "1604960",
    "end": "1610799"
  },
  {
    "text": "was the other one the the database is running on the database so everything is running where we have specified in in",
    "start": "1610799",
    "end": "1617440"
  },
  {
    "text": "the labels that uh that we had defined so the engine X proxy is what is running on the reverse proxy machine",
    "start": "1617440",
    "end": "1625200"
  },
  {
    "text": "now what uh so yeah magic uh",
    "start": "1625200",
    "end": "1631600"
  },
  {
    "text": "so what about scaling so the the obviously this is very",
    "start": "1631600",
    "end": "1637120"
  },
  {
    "text": "nice it it works but at one point our microservices this voting application",
    "start": "1637120",
    "end": "1643120"
  },
  {
    "text": "becomes incredibly popular and we need to increase the scale well this this is",
    "start": "1643120",
    "end": "1648440"
  },
  {
    "text": "the beauty one of the beauties of and also very very simple approach to scale application using Docker compose H once",
    "start": "1648440",
    "end": "1655840"
  },
  {
    "text": "you have your services properly set up and properly tagged and let's see what",
    "start": "1655840",
    "end": "1661080"
  },
  {
    "text": "we would do if we we realize that the services machine because it's running quite a few Services is becoming a bit",
    "start": "1661080",
    "end": "1667360"
  },
  {
    "text": "busy and we need to provision a new one and make sure that everything works uh and scale it up to there",
    "start": "1667360",
    "end": "1674880"
  },
  {
    "text": "so uh we start by creating a new machine so so let me see so uh I've typed out",
    "start": "1674880",
    "end": "1681760"
  },
  {
    "text": "one of the docker machine statements let's just very quickly briefly review together I specify a base image that I",
    "start": "1681760",
    "end": "1688600"
  },
  {
    "text": "want to use Debian 8 works very well with the docker swarm and the requirements for the kernel versions",
    "start": "1688600",
    "end": "1694600"
  },
  {
    "text": "that you need to use to use overlay networks uh we specify region we specify that that machine is going to be part of",
    "start": "1694600",
    "end": "1700480"
  },
  {
    "text": "a swarm we link it to the proper Discovery service and we're going to call it services to ah by the way we",
    "start": "1700480",
    "end": "1707880"
  },
  {
    "text": "have to label this machine as an instance to handle services so you see read there engine label instance equal",
    "start": "1707880",
    "end": "1714760"
  },
  {
    "text": "service that's the queue that would that then uh Docker compose and Docker swarm",
    "start": "1714760",
    "end": "1720120"
  },
  {
    "text": "will use to deploy new Services onto the onto this new machine so if I do",
    "start": "1720120",
    "end": "1727679"
  },
  {
    "text": "that so this also is a little bit sped up this might take just a few minutes more than what we have for this talk",
    "start": "1728159",
    "end": "1738360"
  },
  {
    "text": "and uh after we're done then the thing we want to do is",
    "start": "1738840",
    "end": "1744080"
  },
  {
    "text": "scale right so imagine that the result application is being hit because it hit Hacker News and we need to make sure we",
    "start": "1744080",
    "end": "1751039"
  },
  {
    "text": "can handle extra traffic so the way we do it is we so this is just to show you",
    "start": "1751039",
    "end": "1757120"
  },
  {
    "text": "that I have actually created an extra machine you see that the the uh IP address is different also it's a tiny",
    "start": "1757120",
    "end": "1764240"
  },
  {
    "text": "minor new version of Docker because I've done this a bit later",
    "start": "1764240",
    "end": "1770039"
  },
  {
    "text": "and if I want to scale it up just go",
    "start": "1770039",
    "end": "1777600"
  },
  {
    "text": "faster so I want to scale up I can just type darker scale there's a type of",
    "start": "1778000",
    "end": "1783720"
  },
  {
    "text": "there me fix it uh I want to scale the result application to actually run into",
    "start": "1783720",
    "end": "1789000"
  },
  {
    "text": "four more containers four more instances and",
    "start": "1789000",
    "end": "1794440"
  },
  {
    "text": "uh this is actually not sped up it's this is actually the speed that it took to start them up and now if I go and",
    "start": "1794440",
    "end": "1800840"
  },
  {
    "text": "check you'll see that uh we have actually sped up on the new Services machine the result uh the result um",
    "start": "1800840",
    "end": "1808720"
  },
  {
    "text": "application now to prove that I'm not lying I'm just going to pick one of",
    "start": "1808720",
    "end": "1814039"
  },
  {
    "text": "these IP addresses and because I haven't been explicit I've just picked they",
    "start": "1814039",
    "end": "1819159"
  },
  {
    "text": "they've picked and running on exposing a random Port but um the reverse uh proxy",
    "start": "1819159",
    "end": "1826399"
  },
  {
    "text": "is going to pick it up because it is so as you can see the actual instance itself is running at that new IP address",
    "start": "1826399",
    "end": "1833039"
  },
  {
    "text": "which is a completely new machine just provisioned and uh the reverse",
    "start": "1833039",
    "end": "1839279"
  },
  {
    "text": "proxy uh will pick up Will in inter check interject that this",
    "start": "1839279",
    "end": "1844880"
  },
  {
    "text": "new container has been started up refresh the engine X and the traffic will be uh you know distributed also to",
    "start": "1844880",
    "end": "1851399"
  },
  {
    "text": "this machine I don't have a demo to show you this because I thought I'd run out of time which in fact I am I only have a",
    "start": "1851399",
    "end": "1857480"
  },
  {
    "text": "few minutes left so I just want to briefly conclude with um telling you",
    "start": "1857480",
    "end": "1862600"
  },
  {
    "text": "that okay so Docker swarm has been catching up to the other orchestration platforms that have come about and they",
    "start": "1862600",
    "end": "1869720"
  },
  {
    "start": "1868000",
    "end": "2147000"
  },
  {
    "text": "had a a lead start but they are quickly closing the Gap so uh dark compose has",
    "start": "1869720",
    "end": "1876080"
  },
  {
    "text": "uh um uh has been improving really well uh the support for overlay networks so",
    "start": "1876080",
    "end": "1881960"
  },
  {
    "text": "all this becomes possible and transparent and and very transparent to the to the developer",
    "start": "1881960",
    "end": "1888480"
  },
  {
    "text": "and there they recently changed the configuration so that volumes and networks are first class citizen of the",
    "start": "1888480",
    "end": "1896159"
  },
  {
    "text": "configuration uh there's a very uh often requested feature of the docker swarm",
    "start": "1896159",
    "end": "1901760"
  },
  {
    "text": "that right now is now part of Docker swarm which is like rescheduling containers on failure on node failure",
    "start": "1901760",
    "end": "1907760"
  },
  {
    "text": "which is something that was missing previously but now it's out of the experimental phase and and makes the",
    "start": "1907760",
    "end": "1913760"
  },
  {
    "text": "docker swarm U compelling again and uh you know more recent news that Docker is",
    "start": "1913760",
    "end": "1920080"
  },
  {
    "text": "now using the native components of the op container initiative so there is",
    "start": "1920080",
    "end": "1925320"
  },
  {
    "text": "interoperability with other choices that you might make and choosing component so this with three minutes left just want",
    "start": "1925320",
    "end": "1932000"
  },
  {
    "text": "to thank you for your attention and laughing my silly jokes and uh maybe there's time for one question or two so",
    "start": "1932000",
    "end": "1938080"
  },
  {
    "text": "thank you very much thank you oh and you can follow me on Twitter",
    "start": "1938080",
    "end": "1945000"
  },
  {
    "text": "if you if you think it's time for a question of two yes okay um so",
    "start": "1945000",
    "end": "1953679"
  },
  {
    "text": "um question one here is that do does Docker swarm support any kind of um",
    "start": "1953679",
    "end": "1960760"
  },
  {
    "text": "custom SK uh scheduling yes you can plug in your own",
    "start": "1960760",
    "end": "1966120"
  },
  {
    "text": "scheduler okay so how do you do that do you write uh Cod so so everything so",
    "start": "1966120",
    "end": "1972880"
  },
  {
    "text": "Docker form is written in go so the general way to go about it is to um you",
    "start": "1972880",
    "end": "1978000"
  },
  {
    "text": "need to do it in go so if you want to provide so if you want to provide your own scheduler you need to probably",
    "start": "1978000",
    "end": "1984200"
  },
  {
    "text": "implement a go interface and Implement is that then for the entire cluster or is it for individual applications or how",
    "start": "1984200",
    "end": "1990159"
  },
  {
    "text": "does that work yeah actually honestly I don't know sorry that's okay what about Auto scaling uh we saw that you could",
    "start": "1990159",
    "end": "1996799"
  },
  {
    "text": "scale manually by typing four instances but what about based on load yeah so these is not part of the core",
    "start": "1996799",
    "end": "2003200"
  },
  {
    "text": "functionality yet of uh of Docker swarm and the docker compos those are like so you you might need some monitoring",
    "start": "2003200",
    "end": "2010960"
  },
  {
    "text": "process it's on you basically it's on you to to to set up those sort of uh you",
    "start": "2010960",
    "end": "2016440"
  },
  {
    "text": "know reacting to monitors reacting to the environment but there's nothing stopping you from even running that",
    "start": "2016440",
    "end": "2022240"
  },
  {
    "text": "inside of Docker SW yeah EXA that would then scale it exactly exactly okay so uh",
    "start": "2022240",
    "end": "2027919"
  },
  {
    "text": "what about availability zones is is that kind of thing built in or would you have to do that by label and so yeah so I I I",
    "start": "2027919",
    "end": "2035840"
  },
  {
    "text": "think it's not uh it's not baked but what is what is bed in is a you know as we've seen um labeling so you can do",
    "start": "2035840",
    "end": "2043600"
  },
  {
    "text": "that with labeling with clever and a custom schedule of then exactly okay okay",
    "start": "2043600",
    "end": "2049240"
  },
  {
    "text": "um so why would I pick Docker swarm compared to kubernetes compared to mesos",
    "start": "2049240",
    "end": "2057919"
  },
  {
    "text": "which are so my answer to that is a is an answer of because it's it's it's an answer of uh you know fanboyism and that",
    "start": "2057919",
    "end": "2065839"
  },
  {
    "text": "is uh so yeah so so the docker project has been",
    "start": "2065839",
    "end": "2072599"
  },
  {
    "text": "um expanding the reach of the tools that there that they're building in the open with a massive community and uh so if",
    "start": "2072599",
    "end": "2080240"
  },
  {
    "text": "you like to stay close to that that ecosystem Docker swarm is is a",
    "start": "2080240",
    "end": "2085599"
  },
  {
    "text": "production ready solution for it it is true that kubernetes has been you know in the works and also mimicking Google",
    "start": "2085599",
    "end": "2091839"
  },
  {
    "text": "in own internal infrastructure for a long while so that is a perfectly fine uh you know production solution do swarm",
    "start": "2091839",
    "end": "2098760"
  },
  {
    "text": "keeps you closer to the you know Docker uh so it feels more familiar maybe if",
    "start": "2098760",
    "end": "2104520"
  },
  {
    "text": "you're already used to working a lot with Docker compos so on okay uh is",
    "start": "2104520",
    "end": "2109839"
  },
  {
    "text": "there a good integration with the ec2 container uh they to container reg so",
    "start": "2109839",
    "end": "2116599"
  },
  {
    "text": "one of the providers for uh Docker machine is actually Amazon is a very popular one so um I don't know actually",
    "start": "2116599",
    "end": "2123359"
  },
  {
    "text": "yet if this ECS is completely integrated in Docker swarm yet I have I might have miss it but I don't think so but uh for",
    "start": "2123359",
    "end": "2130560"
  },
  {
    "text": "sure you can deploy all the stuff i' I've showed you automatically to to AWS",
    "start": "2130560",
    "end": "2135960"
  },
  {
    "text": "with Docker machine okay that's all the questions thank you thank you everyone thank",
    "start": "2135960",
    "end": "2142078"
  },
  {
    "text": "you so uh next up",
    "start": "2142440",
    "end": "2147280"
  }
]