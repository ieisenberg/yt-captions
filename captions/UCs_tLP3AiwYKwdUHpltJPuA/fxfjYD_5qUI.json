[
  {
    "start": "0",
    "end": "65000"
  },
  {
    "text": "hello everybody well after the keynote this is the first talk of the day so hopefully this is a good start to your go-to experience I love um being part of",
    "start": "13120",
    "end": "20600"
  },
  {
    "text": "the go-to family so hopefully you're going to have a really good conference today and uh talk about what we're going to be talking about today so picture",
    "start": "20600",
    "end": "28160"
  },
  {
    "text": "world if you can run your code and other applications seamlessly in the cloud without having to worry as much",
    "start": "28160",
    "end": "34520"
  },
  {
    "text": "about scale scale things just scale up and scale down as you need them without you having to lift a finger some of you",
    "start": "34520",
    "end": "41399"
  },
  {
    "text": "may be thinking that's crazy Julian that's only things you can do in the future but actually today this is what you can do when you build with",
    "start": "41399",
    "end": "47239"
  },
  {
    "text": "serverless applications on AWS now obviously I work for AWS so we're going to be talking about AWS uh services",
    "start": "47239",
    "end": "53960"
  },
  {
    "text": "today but servus is a bit of a bigger industry term and a lot of the things you hopefully going to learn today can",
    "start": "53960",
    "end": "60160"
  },
  {
    "text": "be applicable to other architectures or other places that you're going to be running your code um so what is servus and sort of",
    "start": "60160",
    "end": "67159"
  },
  {
    "start": "65000",
    "end": "370000"
  },
  {
    "text": "how does it linked with event of an architectures because we are talking about Eda today and the two match very well together well the idea of servus is",
    "start": "67159",
    "end": "75159"
  },
  {
    "text": "actually all about Focus it's about getting your developer teams to focus on running your applications and your uh",
    "start": "75159",
    "end": "81360"
  },
  {
    "text": "code rather than thinking about infastructure and scaling and clusters",
    "start": "81360",
    "end": "86439"
  },
  {
    "text": "and instances and all these kind of things so you can see the sort of the diag the things that AWS would look",
    "start": "86439",
    "end": "92040"
  },
  {
    "text": "after or a cloud provider would look after or a serverless provider would look after is a whole bunch of things",
    "start": "92040",
    "end": "97159"
  },
  {
    "text": "that you don't then have to look after it and you can focus on your business logic maybe your apis maybe your",
    "start": "97159",
    "end": "102799"
  },
  {
    "text": "Integrations maybe your data the things at the top of the stack and you don't have to worry about all the infrastructure underneath the servers",
    "start": "102799",
    "end": "109119"
  },
  {
    "text": "the networking the storage all the things I come from an infrastructure background and I've plugged enough",
    "start": "109119",
    "end": "114159"
  },
  {
    "text": "cables in racks and I've got enough blood on my fingers from um all the cage nuts and everything that I used to work",
    "start": "114159",
    "end": "119600"
  },
  {
    "text": "with and those days luckily at least when you're in the cloud are gone but also when you're looking after the new",
    "start": "119600",
    "end": "125799"
  },
  {
    "text": "abstractions of storage and networking when you use serus you can let a cloud provider look after that on your",
    "start": "125799",
    "end": "132080"
  },
  {
    "text": "behalf now I mentioned before there are a lot of different seress services this is just a few of them um pre previously",
    "start": "132080",
    "end": "138360"
  },
  {
    "text": "when we talked about servus it was often just about compute which we are going to cover a lot about today but there are lots of different servus services from",
    "start": "138360",
    "end": "144560"
  },
  {
    "text": "storage and workflows and analytics and uh various databases and the idea is that you can just connect to all of",
    "start": "144560",
    "end": "150560"
  },
  {
    "text": "these Services you can use them uh as they run on AWS and they've got a whole bunch of sort of cool properties that",
    "start": "150560",
    "end": "156599"
  },
  {
    "text": "you as I've mentioned before don't have to worry about the infrastructure to manage or the uh operating systems or a",
    "start": "156599",
    "end": "162400"
  },
  {
    "text": "lot of the patching all these kind of things and you get to focus on on small kind of things and as industry is moving",
    "start": "162400",
    "end": "167959"
  },
  {
    "text": "uh with AWS and uh other Cloud providers and other kind of services is things are becoming more serverless so more",
    "start": "167959",
    "end": "174440"
  },
  {
    "text": "applications that are coming out more services that you can run that you can just consume in a servess way and so",
    "start": "174440",
    "end": "179840"
  },
  {
    "text": "servus has been uh you know running for a number of years it's not a new industry term and so when people",
    "start": "179840",
    "end": "185000"
  },
  {
    "text": "sometimes think that servus is a fad or is it kind of the future um it it is really the way that many applications",
    "start": "185000",
    "end": "190720"
  },
  {
    "text": "are just um built by default and this may be applications that you run or there may be applications that you consume that are running on the cloud",
    "start": "190720",
    "end": "197200"
  },
  {
    "text": "that somebody else is also running in a servess way maybe as a SAS model and one of the cool things about",
    "start": "197200",
    "end": "202760"
  },
  {
    "text": "servess is the way that utilization works and if you're thinking if you're running something uh traditional or on",
    "start": "202760",
    "end": "208159"
  },
  {
    "text": "premises you've got the sort of scaling way that you need to provision uh the capacity that you've got and sometimes",
    "start": "208159",
    "end": "215480"
  },
  {
    "text": "if you going to have over capacity if you're using traditional on premises where something's not happening on a weekend or an evening but you have to",
    "start": "215480",
    "end": "221920"
  },
  {
    "text": "have provision that capacity in case it comes sometime in the future then when you're moving to the clouds or you're",
    "start": "221920",
    "end": "227159"
  },
  {
    "text": "having some virtual virtualization technology which allows you to more in a more agile way spin up um virtual",
    "start": "227159",
    "end": "233000"
  },
  {
    "text": "machine instances or even container instances on demand or some kind of scaling thing yes you do have a better",
    "start": "233000",
    "end": "238720"
  },
  {
    "text": "way that you can handle this capacity but you can see this sort of red Peak something's going to catch you out you're going to have some unexpected",
    "start": "238720",
    "end": "245079"
  },
  {
    "text": "load something is going to trip you up maybe a you know a sale that happens or some business process that happens",
    "start": "245079",
    "end": "250920"
  },
  {
    "text": "that's unexpected and you're going to be disturbing your customers by not being able to handle that and when using surus",
    "start": "250920",
    "end": "257239"
  },
  {
    "text": "technologies that problem becomes our problem becomes aws's problem that we can handle that scale for you and so you",
    "start": "257239",
    "end": "263120"
  },
  {
    "text": "can see the sort of nice graph that perfectly matches your uh your use and um for most scenarios you really don't",
    "start": "263120",
    "end": "269720"
  },
  {
    "text": "don't have to manage that we're just going to do that on your behalf and you don't get caught out having a little horrible ugly red line where you",
    "start": "269720",
    "end": "275280"
  },
  {
    "text": "couldn't serve your customers and some people think well certainly servus must only be a hobby",
    "start": "275280",
    "end": "281320"
  },
  {
    "text": "toy not at all servus is you know at at massive scale now obviously as a big cloud provider on aws's behalf you know",
    "start": "281320",
    "end": "288440"
  },
  {
    "text": "uh Lambda functions which we're going to be talking about uh just running your code you know we process tens of trillions of these requests every single",
    "start": "288440",
    "end": "294800"
  },
  {
    "text": "month um amaz an event bridge is an event broker you know trillions of those as well and ECS is our one of our",
    "start": "294800",
    "end": "300360"
  },
  {
    "text": "container services and you know billions and billions of tasks that are being done so you know these are massive",
    "start": "300360",
    "end": "305720"
  },
  {
    "text": "massive huge services at AWS which you can take advantage of and um you know you don't have to worry about the scale",
    "start": "305720",
    "end": "311759"
  },
  {
    "text": "underneath and so one of the sort of big things of why to go servus is sure there's no infrastructure to manage and",
    "start": "311759",
    "end": "318199"
  },
  {
    "text": "maybe you don't care thinking well I don't look after infrastructure anyway so the bigger picture is well why do do",
    "start": "318199",
    "end": "323400"
  },
  {
    "text": "you want to go servess and from an organizational perspective and a team perspective and as a developer if you're developer sitting in the room the quick",
    "start": "323400",
    "end": "329919"
  },
  {
    "text": "thing is you want to faster time to Market you want to try things out quickly you want to iterate quickly you want to maybe doing uh you know working",
    "start": "329919",
    "end": "337319"
  },
  {
    "text": "in an agile kind of way and if you can take go from prototype to production really quickly that's going to be better",
    "start": "337319",
    "end": "342759"
  },
  {
    "text": "for your business you've got an idea on a Monday morning you or you've come to go to you've seen some great talks come up with a great idea and to be able to",
    "start": "342759",
    "end": "349560"
  },
  {
    "text": "actually Implement Implement that in your organization if you're going to have to request resources and fill in",
    "start": "349560",
    "end": "354680"
  },
  {
    "text": "tickets and do all that kind of thing can take a long time while if you're using a servess approach and AWS is",
    "start": "354680",
    "end": "359800"
  },
  {
    "text": "looking after a whole bunch of things and you can concentrate in your code the sort of flywheel can happen much quicker",
    "start": "359800",
    "end": "364840"
  },
  {
    "text": "and that's what people love about it if you're a developer you just want to get things done a little bit quicker So today we're going to talk",
    "start": "364840",
    "end": "371120"
  },
  {
    "start": "370000",
    "end": "933000"
  },
  {
    "text": "about serverless compute there were a lot of uh other seress services with storage and Integrations and workflows",
    "start": "371120",
    "end": "376280"
  },
  {
    "text": "and kind of things but today it's all about compute because I know we've got you know lots of developers in the room and you've got code to write you're",
    "start": "376280",
    "end": "381919"
  },
  {
    "text": "excited about what you can bring with your Innovative code and a way to think about Computing uh and serverless is",
    "start": "381919",
    "end": "388440"
  },
  {
    "text": "there is the sort of spectrum and as we've been speaking about what you manage and what you don't manage um",
    "start": "388440",
    "end": "394319"
  },
  {
    "text": "is on the on the Y AIS and Amazon ec2 are our sort of virtual machine instances that you can then rent from",
    "start": "394319",
    "end": "400319"
  },
  {
    "text": "the cloud and then you can install anything on that so you know any traditional application um from you know",
    "start": "400319",
    "end": "406520"
  },
  {
    "text": "databases to messaging services to Kafka to Rabbit mq to a web service to",
    "start": "406520",
    "end": "412919"
  },
  {
    "text": "anything your custom applications that's what you can run on a on an ec2 instance and of course um that that's not very",
    "start": "412919",
    "end": "419120"
  },
  {
    "text": "opinion because you can run anything on that it's really easy but obviously you've got to manage a lot more you've got to operate update the operating",
    "start": "419120",
    "end": "425840"
  },
  {
    "text": "system maybe you've got some Frameworks installed on there that you need to update that maybe you've got a web server on that you you need to keep up",
    "start": "425840",
    "end": "432080"
  },
  {
    "text": "to date so you take on more of the operational tasks but it does give you a lot more flexibility and as you head up",
    "start": "432080",
    "end": "438120"
  },
  {
    "text": "you've got some more seress services that you introduce so ECS on fargate is a way of doing seress containers we're",
    "start": "438120",
    "end": "444039"
  },
  {
    "text": "going to go into that and that means well you've got a little bit less to manage you don't actually need to manage the physical instances or the virtual",
    "start": "444039",
    "end": "450520"
  },
  {
    "text": "instances the virtual machines just containers that we will run at what whatever scale it is slightly more",
    "start": "450520",
    "end": "455800"
  },
  {
    "text": "opinionated because you can't have all the breadth of all the uh virtual machine instances but surely that's",
    "start": "455800",
    "end": "461319"
  },
  {
    "text": "going to help you if it's going to be able to fit into that and you're going to be able to do some cool stuff then sort of top on the right is Lambda well",
    "start": "461319",
    "end": "468000"
  },
  {
    "text": "Lambda you've got way less to manage there's no the the Frameworks we look after for you the the way that uh events",
    "start": "468000",
    "end": "473759"
  },
  {
    "text": "get into your function we look after you uh you can poll from CF for example or rabbit mq we handle all that for you so",
    "start": "473759",
    "end": "480680"
  },
  {
    "text": "AWS is going to handle a lot more for you and it does mean it's going to be a little bit more opinionated in terms of",
    "start": "480680",
    "end": "486280"
  },
  {
    "text": "how the service is actually going to run we're going to go into some of those opinionated things which are some actually cool constraints which you can",
    "start": "486280",
    "end": "492479"
  },
  {
    "text": "work in but it's something to bear in mind so um you sort of have a decision tree what service you're going to be",
    "start": "492479",
    "end": "497560"
  },
  {
    "text": "able to take advantage of um and you're going to be able to hand over more responsibility that we can do all the",
    "start": "497560",
    "end": "502800"
  },
  {
    "text": "distributed computing stuff and you focus on your code with Lambda all the way down to picking your individual compute instances with something like e",
    "start": "502800",
    "end": "510199"
  },
  {
    "text": "2 so when we talking about serverless functions we are talking about AWS Lambda which is a service that we run",
    "start": "510199",
    "end": "517159"
  },
  {
    "text": "service which you can use to run code in the cloud and it's sort of a a simple",
    "start": "517159",
    "end": "522279"
  },
  {
    "text": "sort of pathway that how Lambda functions run you got a Lambda function in the middle which can be run which you can use any language we've got some",
    "start": "522279",
    "end": "528519"
  },
  {
    "text": "manage run times for things like node python Java C and things like that and we actually maintain and keep that",
    "start": "528519",
    "end": "534399"
  },
  {
    "text": "runtime up to date so there's no patching node there's no um you know um doing anything in Python for example or",
    "start": "534399",
    "end": "540760"
  },
  {
    "text": "Java they just get upgraded automatically and off you go they don't get upgraded between the major versions so of using what say python 311 and",
    "start": "540760",
    "end": "547959"
  },
  {
    "text": "python 312 we're not just going to upgrade that for you because that's going to freak out all the developers in the room going you must be crazy you",
    "start": "547959",
    "end": "553839"
  },
  {
    "text": "know a python or a node version jump is going to be uh crazy but within python 312 or or you know node 20 for example",
    "start": "553839",
    "end": "560519"
  },
  {
    "text": "we will do the updating on your behalf we'll also update things like the a SDK so again some uh something else you",
    "start": "560519",
    "end": "567120"
  },
  {
    "text": "don't have to look after and so that's your fun code that is all going to run we look after the framework you then",
    "start": "567120",
    "end": "572600"
  },
  {
    "text": "look after your application code and you can just package that up but then how does a Lambda function actually run well",
    "start": "572600",
    "end": "578040"
  },
  {
    "text": "it runs based on what's called a a a trigger and the trigger is an event which causes a Lambda function to fire",
    "start": "578040",
    "end": "584279"
  },
  {
    "text": "off and this can be a data State change so it could be an update to a database which could do a CDC update for a for a",
    "start": "584279",
    "end": "590200"
  },
  {
    "text": "record you could um run your function behind an API endpoint I'll show that shortly and so you just hit the API",
    "start": "590200",
    "end": "596360"
  },
  {
    "text": "endpoint it's going to kick off your Lambda function or maybe you're going to process something from a que it could be Rabbid mq it could be Kafka it could be",
    "start": "596360",
    "end": "603839"
  },
  {
    "text": "you know a whole bunch of different streaming Technologies and that those events or batches of events are just going to go into your Lambda function",
    "start": "603839",
    "end": "609959"
  },
  {
    "text": "it's going to run your custom code and then what you do within your custom code as you with would do with any normal",
    "start": "609959",
    "end": "615279"
  },
  {
    "text": "application maybe you're going to read and write from an external API or you're going to put it into a database or",
    "start": "615279",
    "end": "620320"
  },
  {
    "text": "you're going to send it to some other messaging service or transfer it somewhere else you know literally up to you the the sort of imagination you have",
    "start": "620320",
    "end": "626240"
  },
  {
    "text": "to run your code in the cloud um you can just do that with Lambda it's just normal function it's just normal programming code that you're going to",
    "start": "626240",
    "end": "632360"
  },
  {
    "text": "run on the platform three different ways you can invoke Lambda functions synchronous asynchronous and pole based so a",
    "start": "632360",
    "end": "638639"
  },
  {
    "text": "synchronous one think of it behind an API so you've got an API Gateway for example or something behind a load",
    "start": "638639",
    "end": "645000"
  },
  {
    "text": "balancer you can stream uh you can stream responses out of that as well simple request response um if people",
    "start": "645000",
    "end": "651839"
  },
  {
    "text": "have been building web applications for ages uh asynchronous is super powerful particularly with Lambda where you can",
    "start": "651839",
    "end": "657519"
  },
  {
    "text": "run asynchronous background tasks and this could be consuming something from a a queue as I've said before or polling",
    "start": "657519",
    "end": "663440"
  },
  {
    "text": "something else from a database or a you know CDC change whatever it is and basically the difference between the two",
    "start": "663440",
    "end": "669079"
  },
  {
    "text": "is Lambda runs an internal Q dumps those events on the internal q and Lambda handles sending that to your function",
    "start": "669079",
    "end": "674639"
  },
  {
    "text": "code and then the pole based is actually that sort of um polling from the databases and actually we manage a polar",
    "start": "674639",
    "end": "680639"
  },
  {
    "text": "on your behalf it's entirely free so if you getting something from a kesa stream which is a streaming platform we have or",
    "start": "680639",
    "end": "686560"
  },
  {
    "text": "you're using uh Kafka or rabbit mq or something like that we will actually run the polar on your behalf you don't have",
    "start": "686560",
    "end": "692760"
  },
  {
    "text": "to have an ec2 instance or a container doing the polling it's all free you can filter and do a whole bunch of things with that and then send your code onto",
    "start": "692760",
    "end": "699320"
  },
  {
    "text": "your Lambda function to do what it is Lambda functions all really secure um",
    "start": "699320",
    "end": "704480"
  },
  {
    "text": "each invocation of that Lambda function runs in a secure microv VM so it's it's not quite a container it's actually I",
    "start": "704480",
    "end": "710360"
  },
  {
    "text": "think more secure and more isolated than a container but you can think of it as a it's got the fast startup time of a",
    "start": "710360",
    "end": "715880"
  },
  {
    "text": "container um but with even more security uh involved and your function is not shared between any other function in",
    "start": "715880",
    "end": "721399"
  },
  {
    "text": "your account let alone other customers or anything else so you can be really confident that this is a really secure",
    "start": "721399",
    "end": "726480"
  },
  {
    "text": "way to run your code you can actually package your Lambda functions in two different ways and one is as a zip",
    "start": "726480",
    "end": "732240"
  },
  {
    "text": "archive you literally just grab all the files and your node.js or python application or Java application you zip",
    "start": "732240",
    "end": "738199"
  },
  {
    "text": "them up uh upload them onto into the cloud and you can run your Lambda function but also what you can do is",
    "start": "738199",
    "end": "743360"
  },
  {
    "text": "that you can actually um package your Lambda function as a container image so you can have a normal Docker file and",
    "start": "743360",
    "end": "748959"
  },
  {
    "text": "you just decide I need to uh install some software with your normal Docker file things we've got some base images",
    "start": "748959",
    "end": "755240"
  },
  {
    "text": "that you can use so if you've got node python or or whatever you need to use that you just use our base image which includes all the functionality to make",
    "start": "755240",
    "end": "762160"
  },
  {
    "text": "Lambda work and then you build up your Docker file as you would with any other application and you just um Lambda",
    "start": "762160",
    "end": "767279"
  },
  {
    "text": "function can then be generated from that Docker image so that's pretty cool if you can you can then use the same",
    "start": "767279",
    "end": "773279"
  },
  {
    "text": "tooling or the same build processes you know CCD pipelines just a really flexible way to um be able to sort of",
    "start": "773279",
    "end": "779320"
  },
  {
    "text": "combine the container world and the functions world in the same packaging",
    "start": "779320",
    "end": "784800"
  },
  {
    "text": "format oh there's actually a container image so you can see um I'm just pulling the node.js um version 20 from um our um",
    "start": "784800",
    "end": "792959"
  },
  {
    "text": "ECR which is our elastic container registry it's like Docker Hub just our AWS version I'm going to copy the app.js",
    "start": "792959",
    "end": "799160"
  },
  {
    "text": "and the the the package files I'm going to do an mpm install and then the CMD file just says well when you do run this",
    "start": "799160",
    "end": "805160"
  },
  {
    "text": "function go into the app file and the the the module called the Lambda Handler so that's a simple Docker file to run",
    "start": "805160",
    "end": "811000"
  },
  {
    "text": "your um nodejs application on Lambda one of the cool things about Lambda is how it scales and as we showed",
    "start": "811000",
    "end": "819199"
  },
  {
    "text": "the graph earlier it scales as per usage so if you have no usage you don't pay anything doesn't need to scale as",
    "start": "819199",
    "end": "825920"
  },
  {
    "text": "requests come in hopefully you've built a really cool application that people actually want to use uh the scale is going to the scale is going to ramp up",
    "start": "825920",
    "end": "831959"
  },
  {
    "text": "and lambda's going to be able to take advantage of that and you can see here a sort of timeline goes from left to right",
    "start": "831959",
    "end": "837360"
  },
  {
    "text": "uh when a request comes in for your Lambda function maybe this is going to be behind an API it's going to run some initialization code and this is a code",
    "start": "837360",
    "end": "844600"
  },
  {
    "text": "that you're going to write maybe it's going to be getting an API key or a secret from somewhere or set setting up",
    "start": "844600",
    "end": "850160"
  },
  {
    "text": "some kind of connection and then it's going to then run your invocation of your function which is going to be maybe",
    "start": "850160",
    "end": "855560"
  },
  {
    "text": "um taking that event object or something behind the API writing something to a database or you know gathering",
    "start": "855560",
    "end": "861240"
  },
  {
    "text": "information from a third party API whatever your code would normally do and then because that initialization code is",
    "start": "861240",
    "end": "866720"
  },
  {
    "text": "already run uh we don't need to grab those Secret again or grab that API key we can just reuse that in subsequent",
    "start": "866720",
    "end": "872199"
  },
  {
    "text": "invocations and your your invokes can uh come back in if you do then have another",
    "start": "872199",
    "end": "877800"
  },
  {
    "text": "request that comes in for your Lambda function at the same time so you can see request number three comes in well that first uh what's called uh invocation or",
    "start": "877800",
    "end": "885000"
  },
  {
    "text": "execution environment is actually in use and so it actually spins up another execution environment and the process happens again and this can go um up to",
    "start": "885000",
    "end": "892240"
  },
  {
    "text": "actually quite ridiculous scale so Lambda functions can scale up scale down to zero if there no request coming in uh",
    "start": "892240",
    "end": "898800"
  },
  {
    "text": "you can you can see there's a a shutdown process that happens automatically at the end your code's not running you",
    "start": "898800",
    "end": "903959"
  },
  {
    "text": "don't pay for anything um is really efficient Lambda functions can run for up to 15 minutes and uh so that's a",
    "start": "903959",
    "end": "910399"
  },
  {
    "text": "architectural decision to uh to think of but it's super useful for you know re request you think how short of many re",
    "start": "910399",
    "end": "916880"
  },
  {
    "text": "requests or if you're batching things up and you're doing some processing 15 minutes is actually a pretty decent",
    "start": "916880",
    "end": "922079"
  },
  {
    "text": "amount of time a Lambda function can have up to 10 gig of memory and six virtual CPUs that's quite a bit bit of",
    "start": "922079",
    "end": "927920"
  },
  {
    "text": "compute time you can you can take advantage of and then um let's have a look should",
    "start": "927920",
    "end": "933000"
  },
  {
    "start": "933000",
    "end": "1125000"
  },
  {
    "text": "we should we build a Lambda function we can see how that actually works so let's see why don't we just create a Lambda",
    "start": "933000",
    "end": "939519"
  },
  {
    "text": "function um anyone want to pick a programming language node python Java anything",
    "start": "939519",
    "end": "946079"
  },
  {
    "text": "no there we go I heard a node did I hear I heard a node and a and a Java we'll pick node on on over here but you can",
    "start": "946079",
    "end": "953360"
  },
  {
    "text": "see we got a whole bunch of different languages I can use C and this is just languages that we maintain and uh uh",
    "start": "953360",
    "end": "959480"
  },
  {
    "text": "keep everything going so I'm literally going to create a function please correct the arrows above I need to give it a main name that would help hello go",
    "start": "959480",
    "end": "966600"
  },
  {
    "text": "to I'll call that and we will create a Lambda function so this Lambda function",
    "start": "966600",
    "end": "971639"
  },
  {
    "text": "takes a few seconds to create and it is going to just um send me some do some code which is",
    "start": "971639",
    "end": "978959"
  },
  {
    "text": "literally what's the code going to do literally code is just going to say hello from Lambda so I'm going to say hello from Lambda via go to",
    "start": "978959",
    "end": "987560"
  },
  {
    "text": "Amsterdam so I'm I'm going to deploy that and that code is now deployed as part of a Lambda function I haven't",
    "start": "987560",
    "end": "994360"
  },
  {
    "text": "needed to install any software I haven't needed to do anything no is just over there I can actually test this Lambda",
    "start": "994360",
    "end": "1000120"
  },
  {
    "text": "function so um I could send an a send it an event Json or just nothing I can need",
    "start": "1000120",
    "end": "1006000"
  },
  {
    "text": "leave that over there save by test event and I'm going to test my Lambda function and there we go hello from Lambda via go",
    "start": "1006000",
    "end": "1011759"
  },
  {
    "text": "to Amsterdam now what I can also do is why don't I just connect this to an API so I'm going to um use API Gateway which",
    "start": "1011759",
    "end": "1020759"
  },
  {
    "text": "is one of our API services and I'm going to do an HTTP API I don't need any authentication I could use a JWT token",
    "start": "1020759",
    "end": "1028480"
  },
  {
    "text": "off I go I'm just going to now connect this to an API there we go I now have an API so I can view this API endpoint and",
    "start": "1028480",
    "end": "1035720"
  },
  {
    "text": "there we go um I can just zoom in a bit hello via Lambda via go to Amsterdam now I know you think that these are always",
    "start": "1035720",
    "end": "1041558"
  },
  {
    "text": "can demos so what I'm going to actually do is I'm going to you can even try it out yourself so I am just pasting this",
    "start": "1041559",
    "end": "1048438"
  },
  {
    "text": "API into a URL shortener and what I'm going to do is um where's my QR code sorry I'm",
    "start": "1048439",
    "end": "1057760"
  },
  {
    "text": "flicking between some slides because so if you actually go to this uh URL",
    "start": "1057760",
    "end": "1063120"
  },
  {
    "text": "hopefully I have pasted in the correct information and you should be able to see",
    "start": "1063120",
    "end": "1068520"
  },
  {
    "text": "that can you confirm you're going hello from Lambda go to Amsterdam good okay so now you are",
    "start": "1068520",
    "end": "1074919"
  },
  {
    "text": "scaling Lambda up I didn't install anything I didn't tell how many people were going to be in the room room over here I didn't do anything you just",
    "start": "1074919",
    "end": "1080799"
  },
  {
    "text": "scanning the QR code via your um via your phone and a Lambda function is going to scale up to handle whatever",
    "start": "1080799",
    "end": "1086400"
  },
  {
    "text": "request it's going to be so that is the start but now I actually want to talk about Lambda function scaling but I'm",
    "start": "1086400",
    "end": "1092080"
  },
  {
    "text": "just going to kick off a demo that's going to happen in the background um so that actual URL",
    "start": "1092080",
    "end": "1098240"
  },
  {
    "text": "endpoint I've got a slightly different one but anyway it works in the same way um there's this cool little tool called",
    "start": "1098240",
    "end": "1103559"
  },
  {
    "text": "hey which is going to hit uh like crazy this API endpoint I'm going to hit it",
    "start": "1103559",
    "end": "1108880"
  },
  {
    "text": "with 10,000 requests uh every second for 5 minutes and I'm just going to hit that off so",
    "start": "1108880",
    "end": "1115480"
  },
  {
    "text": "that is going that is doing the same kind of thing I think it's hitting another Lambda function i' pre-created",
    "start": "1115480",
    "end": "1120760"
  },
  {
    "text": "um just in case the demo Gods weren't behaving with me today but we're going to show how Lambda really scales so we've got I don't know you",
    "start": "1120760",
    "end": "1128520"
  },
  {
    "start": "1125000",
    "end": "1267000"
  },
  {
    "text": "know certain number of people in the room you've scanned the QR code and you've brought up a Lambda function but Lambda functions can actually scale uh",
    "start": "1128520",
    "end": "1134480"
  },
  {
    "text": "you know R into huge amounts and what what happens is if you started off with",
    "start": "1134480",
    "end": "1140960"
  },
  {
    "text": "a Lambda function now if we had a thousand people in this room and they all hit that uh that um URL endpoint it",
    "start": "1140960",
    "end": "1146240"
  },
  {
    "text": "would just work automatically and then Lambda allows you to scale up to 10 uh up to another thousand every single 10",
    "start": "1146240",
    "end": "1152720"
  },
  {
    "text": "seconds so you can imagine if you're starting from complete scratch you can just uh you know hit a thousand Lambda",
    "start": "1152720",
    "end": "1157880"
  },
  {
    "text": "functions can run off and then you can get another another thousand requests in 10 seconds um and obviously this is",
    "start": "1157880",
    "end": "1163840"
  },
  {
    "text": "super useful you've got varing traffic patterns you don't know who's going to be coming to visit your website uh of they can go and they can just take",
    "start": "1163840",
    "end": "1170039"
  },
  {
    "text": "advantage of the scale it's all going to scale automatically now that thousand uh concurrent uh executions every 10",
    "start": "1170039",
    "end": "1176480"
  },
  {
    "text": "seconds may seem a bit limiting to you you can increase that as well um you can increase it in uh in one way there's a",
    "start": "1176480",
    "end": "1183200"
  },
  {
    "text": "service a feature of Lambda called provision concurrency where you can say well actually at 9:00 tomorrow morning I",
    "start": "1183200",
    "end": "1188919"
  },
  {
    "text": "have a sale coming in I'm going to have you know 100,000 requests that are going to come in and you can pre-provision Lambda to be able to handle that load so",
    "start": "1188919",
    "end": "1196159"
  },
  {
    "text": "those those 10 seconds of built up before the 9:00 so it's a way you can configure your your scaling now",
    "start": "1196159",
    "end": "1202400"
  },
  {
    "text": "previously before the scaling um uh it actually took a lot longer so used to have this concept called burst",
    "start": "1202400",
    "end": "1208080"
  },
  {
    "text": "concurrency and you could then scale sort of 500 Lambda functions every minute per the accounts and sort of it took a bit of while took a bit of while",
    "start": "1208080",
    "end": "1214919"
  },
  {
    "text": "so that test I'm doing when i'm doing 10,000 requests for a Lambda function would take about 12 minutes to",
    "start": "1214919",
    "end": "1220799"
  },
  {
    "text": "eventually get up to there you know not the end of the world if you've got 10,000 sustained requests hitting your",
    "start": "1220799",
    "end": "1226080"
  },
  {
    "text": "um web application that's a pretty busy website you know most most websites are probably running you know I don't know",
    "start": "1226080",
    "end": "1231760"
  },
  {
    "text": "100 200 300 even if they're busy every second this is up to 10,000 so but that would take 12 minutes so we think we",
    "start": "1231760",
    "end": "1238280"
  },
  {
    "text": "could certainly do better so what we did actually is we sort of changed that whole scaling Arc and instead of having",
    "start": "1238280",
    "end": "1243559"
  },
  {
    "text": "this stepped graduation of 500 every uh every minute we just have done this now th every 10 seconds and that means",
    "start": "1243559",
    "end": "1250159"
  },
  {
    "text": "instead of taking 12 minutes to get up to that scale it's 90 seconds so literally within 90 seconds you can have",
    "start": "1250159",
    "end": "1255880"
  },
  {
    "text": "10,000 sustained requests this is you know an amazing quick way to get a huge bunch of computer capacity in the",
    "start": "1255880",
    "end": "1262240"
  },
  {
    "text": "cloud so that demo is still working let's go back let's see what's been",
    "start": "1262240",
    "end": "1268799"
  },
  {
    "start": "1267000",
    "end": "1393000"
  },
  {
    "text": "happening with this so this application is scaling like crazy um I have some",
    "start": "1268799",
    "end": "1274840"
  },
  {
    "text": "metrics that are running over here which is not showing anything which is unhelpful oh there we go so we have",
    "start": "1274840",
    "end": "1281600"
  },
  {
    "text": "sort of two lines over here the blue line is showing my current execution so we can see when I started that demo I",
    "start": "1281600",
    "end": "1289080"
  },
  {
    "text": "well I've got 2,000 running so obviously it just caught up with over there and you can see as this is scaling up 4,000",
    "start": "1289080",
    "end": "1296000"
  },
  {
    "text": "and we should be handing up to 8,871 we'll get up to 10,000 pretty shortly",
    "start": "1296000",
    "end": "1301320"
  },
  {
    "text": "it's within a minute and a half and this is literally a live function scaling up to handle those 10,000 concurrent",
    "start": "1301320",
    "end": "1307320"
  },
  {
    "text": "requests now when we did start obviously um we were sending 10,000 requests so",
    "start": "1307320",
    "end": "1312400"
  },
  {
    "text": "there were going to be some initial throttle so for the first 90 seconds we're expecting to see some throttling this is that uh this is that uh orange",
    "start": "1312400",
    "end": "1319320"
  },
  {
    "text": "line and you can see here you know now we now hit up to 10,000 requests and the throttles are seven okay so it's going",
    "start": "1319320",
    "end": "1325640"
  },
  {
    "text": "but that's going to go down to zero So within 90 seconds we've been able to you know hit 10,000 sustained requests to to",
    "start": "1325640",
    "end": "1332120"
  },
  {
    "text": "this website and I could keep this going literally an infin item you know it would never shut down it would just handle 10,000 requests all the time and",
    "start": "1332120",
    "end": "1339440"
  },
  {
    "text": "that was going from the standing start if I decided that I was going to uh I needed 10,000 requests to happen in 5",
    "start": "1339440",
    "end": "1344880"
  },
  {
    "text": "minutes I could just configure that little toggle and say you know in 5 minutes make sure you're ready and Lambda would do the trick so a really",
    "start": "1344880",
    "end": "1351279"
  },
  {
    "text": "easy way to I didn't as you saw the Lambda function I created I didn't configure any scaling I didn't need to",
    "start": "1351279",
    "end": "1356799"
  },
  {
    "text": "install anything I didn't need to scale this out across you know availability zones for availability didn't need need",
    "start": "1356799",
    "end": "1362039"
  },
  {
    "text": "to do anything I just threw the code at Lambda and off it went and scaled up as high as I as high as we needed it to",
    "start": "1362039",
    "end": "1369120"
  },
  {
    "text": "do so that's on the Lambda side so Lambda um scaling per use really convenient way that you can run code in",
    "start": "1369120",
    "end": "1376200"
  },
  {
    "text": "the cloud um we have all the the um things that are just installed really easy way the other way to do it is with",
    "start": "1376200",
    "end": "1382960"
  },
  {
    "text": "serverless containers and serverless containers is a different way to run",
    "start": "1382960",
    "end": "1388200"
  },
  {
    "text": "containers in the cloud and previously people think of serverless and containers that's a strange sort of way to think together but actually it works",
    "start": "1388200",
    "end": "1395320"
  },
  {
    "start": "1393000",
    "end": "1750000"
  },
  {
    "text": "really well and we've got two services that work interaction with each other one is Amazon ECS and one is AWS fargate",
    "start": "1395320",
    "end": "1401799"
  },
  {
    "text": "now Amazon ECS is the control plane so this is the way that you're going to um",
    "start": "1401799",
    "end": "1407000"
  },
  {
    "text": "configure to run your containers in the cloud it's absolutely free to use so this is a you know free um container",
    "start": "1407000",
    "end": "1412559"
  },
  {
    "text": "orchestrator in the cloud uh there no cluster versions to manage there's no data store there's no uh you know",
    "start": "1412559",
    "end": "1417960"
  },
  {
    "text": "anything you need to uh handle in terms of replication or anything it's just a service you run in the cloud to um",
    "start": "1417960",
    "end": "1423559"
  },
  {
    "text": "handle your containers and it's going to decide where they're going to run and where they actually run is the data",
    "start": "1423559",
    "end": "1428840"
  },
  {
    "text": "plane and this is a service called AWS fargate and this is just a managed serverless data plane there no uh",
    "start": "1428840",
    "end": "1434799"
  },
  {
    "text": "instances to manage there no nothing you need to scale or anything and you just pay for what you need and so a sort of",
    "start": "1434799",
    "end": "1440799"
  },
  {
    "text": "nice servess option that you don't need to worry as much about the infrastructure we'll handle that for you",
    "start": "1440799",
    "end": "1446120"
  },
  {
    "text": "so for ECS on the cont orchestration side uh ECS as with a lot of other AWS Services is deeply connected with AWS a",
    "start": "1446120",
    "end": "1452960"
  },
  {
    "text": "lot of different services and third party things so if you're using uh you know on the observability space",
    "start": "1452960",
    "end": "1458159"
  },
  {
    "text": "particularly if you're using you know flu input Prometheus grafana all these kind of things for all your other container workloads bring them along",
    "start": "1458159",
    "end": "1464200"
  },
  {
    "text": "we'd love to uh you know use that with ECS and with with fargate as well so lots of Integrations with other AWS",
    "start": "1464200",
    "end": "1471240"
  },
  {
    "text": "services and just the way ECS is put together uh you basically have tasks and these are one or more containers which",
    "start": "1471240",
    "end": "1477600"
  },
  {
    "text": "you specify some computer capacity and a task is going to run your container a container as with all other things is",
    "start": "1477600",
    "end": "1483600"
  },
  {
    "text": "just a normal oci Docker file um obviously you're not using Lambda at this stage so you may need to install",
    "start": "1483600",
    "end": "1489600"
  },
  {
    "text": "node or enginex or you may need to install some more um Services because you're going to running in a container",
    "start": "1489600",
    "end": "1495159"
  },
  {
    "text": "construct rather than a service function and then a service is made up of multiple tasks um so identical tasks so",
    "start": "1495159",
    "end": "1501520"
  },
  {
    "text": "you can this would be your front by your front um your front end of your application maybe uh which is load",
    "start": "1501520",
    "end": "1506919"
  },
  {
    "text": "balanced and you're just going to run these containers and uh then you can also cluster them together for a whole",
    "start": "1506919",
    "end": "1512559"
  },
  {
    "text": "kind of grouping and under the hood you can actually use various compute options so you can use any ec2 option you can",
    "start": "1512559",
    "end": "1518279"
  },
  {
    "text": "use ec2 spot so ec2 spot uh instances are ones where you could just borrow from AWS for a short time it costs way",
    "start": "1518279",
    "end": "1524840"
  },
  {
    "text": "less uh but the thing is if we need them back we will we will give you a minute or two is warning to say we'll have them",
    "start": "1524840",
    "end": "1529919"
  },
  {
    "text": "back but you can save a lot of money using E2 spot and fargate spot as well so it's a quick way to rent cheap",
    "start": "1529919",
    "end": "1535120"
  },
  {
    "text": "compute capacity in an ephemeral way so the difference between ECS and tasks and",
    "start": "1535120",
    "end": "1540240"
  },
  {
    "text": "services well task is sort of on demand workloads so we're talking about aent an architectures today I'll be showing a",
    "start": "1540240",
    "end": "1545520"
  },
  {
    "text": "demo shortly and this is one of tasks so there's a task schedular component and you say um excuse me ECS I need to run",
    "start": "1545520",
    "end": "1552840"
  },
  {
    "text": "this container here's a container I need to run off you go and you're going to go and run it you can use it for batching",
    "start": "1552840",
    "end": "1558600"
  },
  {
    "text": "you know just a way to run it and then services are sort of for long running applications so maybe this is going to be a front end or you've got a polar or",
    "start": "1558600",
    "end": "1565799"
  },
  {
    "text": "you've got some kind of service that needs to have a whole bunch of containers up and running and so you're going to run a service that needs a bit",
    "start": "1565799",
    "end": "1571200"
  },
  {
    "text": "more of sort of that the service is going to run that if a container dies it's going to bring it up again it's going to handle it across multiple",
    "start": "1571200",
    "end": "1577320"
  },
  {
    "text": "availability zones and so service is for a long running service and a task is for an individual task Tas definition has",
    "start": "1577320",
    "end": "1584240"
  },
  {
    "text": "got information over here you can see you know it's got networking information about where you to put the logs what port you're going to um expose it on and",
    "start": "1584240",
    "end": "1591360"
  },
  {
    "text": "some memory configurations but task definition is just some Json so that's on the ECS side for sort of controlling",
    "start": "1591360",
    "end": "1597559"
  },
  {
    "text": "it and then on the fargate side well this is actually the sort of servess containers under the under the hood and",
    "start": "1597559",
    "end": "1603440"
  },
  {
    "text": "actually at AWS we manage this on your behalf so we actually dynamically provision an instance so it is actually an ec2 instance behind the scenes you",
    "start": "1603440",
    "end": "1610399"
  },
  {
    "text": "don't never see it you don't even know what it's called or what it looks like we will look we will look um after that",
    "start": "1610399",
    "end": "1616159"
  },
  {
    "text": "for you and you just uh Define the resources being the CPU in the ram so you tell us what CPU your RAM you need",
    "start": "1616159",
    "end": "1622799"
  },
  {
    "text": "and it's going to share that and manage all the containers in the task for running that in terms of patching well",
    "start": "1622799",
    "end": "1628520"
  },
  {
    "text": "this is where some of the differences between something like Lambda comes up uh where with uh with fargate uh AWS is",
    "start": "1628520",
    "end": "1635039"
  },
  {
    "text": "going to manage all the hosts and the infrastructure but any of the code that's going to be running in your container you're going to handle that so",
    "start": "1635039",
    "end": "1640840"
  },
  {
    "text": "that is going to be the runtime or the libraries or the sdks or anything with inside your application container you",
    "start": "1640840",
    "end": "1646760"
  },
  {
    "text": "are going to look after terms of low balancing and Ingress another difference when Lambda you saw",
    "start": "1646760",
    "end": "1652760"
  },
  {
    "text": "when I added that HTTP endpoint I didn't have to configure or handle any of that it was just another service I connected",
    "start": "1652760",
    "end": "1658960"
  },
  {
    "text": "when you're using um containers and you're using uh fargate you need to manage some more of the network infrastructure and so you will run a",
    "start": "1658960",
    "end": "1665559"
  },
  {
    "text": "load balancer in front and it's a sort of port and socket mode so you're going to on that load balancer you're going to say you know Port 443 or Port 80 or",
    "start": "1665559",
    "end": "1672679"
  },
  {
    "text": "whatever port's going to be coming in and I'm going to then distribute that between my different applications uh for a service for example example that's",
    "start": "1672679",
    "end": "1678640"
  },
  {
    "text": "going to run on my different computer instances so again it's not as servess as Lambda you are when lambda's handling",
    "start": "1678640",
    "end": "1684640"
  },
  {
    "text": "all of that Ingress for you you going to do this a little bit on your behalf but people want to do this on their behalf",
    "start": "1684640",
    "end": "1689760"
  },
  {
    "text": "because they have you know very specific needs that Lambda maybe doesn't satisfy and so this is a way that you can sort",
    "start": "1689760",
    "end": "1695120"
  },
  {
    "text": "of have the best of both worlds in terms of the scaling well uh far doesn't scale in the same way as Lambda these are for",
    "start": "1695120",
    "end": "1702159"
  },
  {
    "text": "services that you want to have a bit more intentionality of how things are going to scale so um fargate under the",
    "start": "1702159",
    "end": "1707799"
  },
  {
    "text": "hood is going to manage the ec2 instances we will make sure they always ec2 instances uh available for you but",
    "start": "1707799",
    "end": "1713240"
  },
  {
    "text": "then you decide how many containers you're going to need and you can do that for a number of ways you can use autoscaling to scale them up and down",
    "start": "1713240",
    "end": "1720039"
  },
  {
    "text": "it's not going to be as fast as Lambda but it's certainly going to be as responsive as you can spin up a container but you can use cloudwatch you",
    "start": "1720039",
    "end": "1725919"
  },
  {
    "text": "can use you know Prometheus you can use literally any metric that you have in your business to say you know what I",
    "start": "1725919",
    "end": "1731200"
  },
  {
    "text": "need another container spin up or I need a container to spin down and you handle the the scaling of that and you just",
    "start": "1731200",
    "end": "1737200"
  },
  {
    "text": "basically go to that service and say I need 20 containers to uh you know in an hour I'm going to need 20 40 and you",
    "start": "1737200",
    "end": "1743679"
  },
  {
    "text": "know night time comes and I only need two to keep it up and running so you handle the scaling uh as part of that so",
    "start": "1743679",
    "end": "1750240"
  },
  {
    "start": "1750000",
    "end": "2179000"
  },
  {
    "text": "we're talking about event an architectures over here and generally I think people understand event of an architectur is really well with Lambda",
    "start": "1750240",
    "end": "1756159"
  },
  {
    "text": "because they know that an event comes in uh could be an HTTP or a database change or a file change or something it's going",
    "start": "1756159",
    "end": "1761880"
  },
  {
    "text": "to kick off a Lambda function to do something that a sort of event driven pattern is very applicable but people often don't think about what how can you",
    "start": "1761880",
    "end": "1768559"
  },
  {
    "text": "do venten architectures using containers and I think event Ren architectures is a really powerful way to build",
    "start": "1768559",
    "end": "1773880"
  },
  {
    "text": "applications because it allows you to decouple different parts of your applications you can then manage scale",
    "start": "1773880",
    "end": "1779039"
  },
  {
    "text": "differently you can use the best service for the job you can uh you can run the best container for the job instead of",
    "start": "1779039",
    "end": "1785600"
  },
  {
    "text": "having you know one huge container that's got your all your application artifacts and everything in one container you can split them out maybe",
    "start": "1785600",
    "end": "1791600"
  },
  {
    "text": "into some different sort of microservices and the microservices need to communicate by different ways and",
    "start": "1791600",
    "end": "1796960"
  },
  {
    "text": "using an event of an architect is a very effective way to do that I know Sam Newman is here you know he's literally written a book on microservices and um",
    "start": "1796960",
    "end": "1804559"
  },
  {
    "text": "you know he talks a lot about asynchronous applications and that's a way that you can use Avent",
    "start": "1804559",
    "end": "1809919"
  },
  {
    "text": "architectures so um two ways you can use Avent architectures in the container world and one is having a a task that",
    "start": "1809919",
    "end": "1817440"
  },
  {
    "text": "fires off when an event happens so um for example over here there's a S3",
    "start": "1817440",
    "end": "1822840"
  },
  {
    "text": "bucket which is our object storage so someone puts a message on an S3 bucket and that's going to basically trigger an",
    "start": "1822840",
    "end": "1828600"
  },
  {
    "text": "event rule which is then going to kick off a an ECS on fargate task to do some processing and your code is then put",
    "start": "1828600",
    "end": "1834000"
  },
  {
    "text": "something on another another Amazon hisory bucket now the reason you would do this in a container as opposed to a",
    "start": "1834000",
    "end": "1840559"
  },
  {
    "text": "Lambda function because a lot of this functionality is built in with Lambda is you've got more flexibility so maybe",
    "start": "1840559",
    "end": "1846159"
  },
  {
    "text": "it's going to be a cost concern maybe you have a workload that's going to run longer than 15 minutes maybe you need a",
    "start": "1846159",
    "end": "1851960"
  },
  {
    "text": "GPU instance so you're going to do some machine learning inference or some maybe some cool generative AI uh you're going",
    "start": "1851960",
    "end": "1857159"
  },
  {
    "text": "to be able to run that in a container but still use the event driven model that um as soon as a file is uploaded",
    "start": "1857159",
    "end": "1862840"
  },
  {
    "text": "you're going to be able to then process that file so maybe you're going to do you know uh have a huge uh video file",
    "start": "1862840",
    "end": "1868559"
  },
  {
    "text": "for example and it's going to take it longer than 15 minutes needs a GPU instance to do something on it well this is a great way you can do it on in the",
    "start": "1868559",
    "end": "1874720"
  },
  {
    "text": "container world as well so that's on the task for the individual tasks you can also use event processing um in",
    "start": "1874720",
    "end": "1881159"
  },
  {
    "text": "containers so in this example we have an ECS service which has a number of containers and they're going to be draining an sqsq so sqs is is one of our",
    "start": "1881159",
    "end": "1888399"
  },
  {
    "text": "queuing services this could be rabbit mq this could be um U you know managed mq",
    "start": "1888399",
    "end": "1893600"
  },
  {
    "text": "any kind of queuing service and you can manage this as a as a service multiple containers very high throughput to be",
    "start": "1893600",
    "end": "1899320"
  },
  {
    "text": "able to drain in sqsq um yeah and for high frequency events so I've actually do have a demo",
    "start": "1899320",
    "end": "1906080"
  },
  {
    "text": "to show how we can do some file processing um uh with serverless compute and how you can actually use both in the",
    "start": "1906080",
    "end": "1911720"
  },
  {
    "text": "same application CU When I spoke about earlier when there sometimes was this oh do I use serverless containers do I use",
    "start": "1911720",
    "end": "1917480"
  },
  {
    "text": "seress functions surely they at odds with each other well the the reason is seress functions are rarely useful",
    "start": "1917480",
    "end": "1922840"
  },
  {
    "text": "seress containers are rely useful and you can actually use them together in the same application so I have an",
    "start": "1922840",
    "end": "1928240"
  },
  {
    "text": "example over here of a um sort of file processing pipeline where people can upload videos and they can also upload",
    "start": "1928240",
    "end": "1935320"
  },
  {
    "text": "images now the images are going to be really quick to process because they're just an image but a video you can",
    "start": "1935320",
    "end": "1941000"
  },
  {
    "text": "imagine video takes a lot more processing to happen so what we're going to do is we're going to that uh up well",
    "start": "1941000",
    "end": "1947919"
  },
  {
    "text": "a customer or you know some business process is going to then upload one of those uh videos and that's going to land",
    "start": "1947919",
    "end": "1953159"
  },
  {
    "text": "in our S3 bucket which is our object storage that is automatically going to kick off an event Bridge Rule and I'm",
    "start": "1953159",
    "end": "1958960"
  },
  {
    "text": "going to cover quickly what event Bridge Is But ultimately it's just going to say oh this this file has happened I'm going",
    "start": "1958960",
    "end": "1964279"
  },
  {
    "text": "to grab the information about what that file name is and then I'm going to send it to a a workflow automation service",
    "start": "1964279",
    "end": "1969960"
  },
  {
    "text": "I'll cover that shortly but the the step functions is just going to handle the workflow and what that actually is going to be used is to say when this file",
    "start": "1969960",
    "end": "1976679"
  },
  {
    "text": "comes in what is the file is this file an image or is this file a a movie so if",
    "start": "1976679",
    "end": "1982440"
  },
  {
    "text": "it's a video so if it is an image I'm going to use Lambda because I know it's going to be the most efficient way to run that and if it's going to be a um",
    "start": "1982440",
    "end": "1989559"
  },
  {
    "text": "video I'm going to use fargate because I want to use a container because it's going to run longer than 15 minutes and",
    "start": "1989559",
    "end": "1994679"
  },
  {
    "text": "then ultimately the code's going to be very similar and I'm going to send that on to an S3 bucket so let's have a look",
    "start": "1994679",
    "end": "2000200"
  },
  {
    "text": "at oh before we have a look what that looks like I just want to just let you know two of the services so Amazon event",
    "start": "2000200",
    "end": "2006840"
  },
  {
    "text": "bridge is an rout that runs in the cloud also ridiculous scale it's very serverless there's nothing you need to",
    "start": "2006840",
    "end": "2012760"
  },
  {
    "text": "run nothing you need to manage and nothing you need to patch and this is a great way to build event Ren architectures and a great way for",
    "start": "2012760",
    "end": "2019360"
  },
  {
    "text": "microservices to communicate with each other uh a service will put an event on the event bus and other services can",
    "start": "2019360",
    "end": "2025760"
  },
  {
    "text": "react to that the way they react to that is just pattern matching on anything that happens in that event so you can",
    "start": "2025760",
    "end": "2031360"
  },
  {
    "text": "look at the metadata you could say um uh for example is this from this particular",
    "start": "2031360",
    "end": "2037399"
  },
  {
    "text": "micros service do something is this uh value greater than something is it less than something is this value and this",
    "start": "2037399",
    "end": "2044159"
  },
  {
    "text": "value and this value all come together in a whole sort of U Matrix of different capabilities will then root it to that",
    "start": "2044159",
    "end": "2050560"
  },
  {
    "text": "service and then you can root it to a Lambda function you can root it to a container task you can root it to or",
    "start": "2050560",
    "end": "2056240"
  },
  {
    "text": "send it to an API endpoint on the internet literally there are so many different uh Integrations you can do and",
    "start": "2056240",
    "end": "2061638"
  },
  {
    "text": "it's a really powerful way to um connect applications together in terms of what can put things on event bus sort of",
    "start": "2061639",
    "end": "2068040"
  },
  {
    "text": "three different buckets your own custom applications create an event put it on the event bus super powerful all AWS um",
    "start": "2068040",
    "end": "2075200"
  },
  {
    "text": "operations automatically put events on an event bus as well so this is super powerful if you want to react to when an",
    "start": "2075200",
    "end": "2081280"
  },
  {
    "text": "ec2 instance was created or you're doing something in any AWS service that's going to generate an event and you can",
    "start": "2081280",
    "end": "2087320"
  },
  {
    "text": "react to that and then the other sort of third part of event bridge is there are native Integrations with SAS Partners so",
    "start": "2087320",
    "end": "2093320"
  },
  {
    "text": "if you are using zenes or you're using data dog or you're using",
    "start": "2093320",
    "end": "2098640"
  },
  {
    "text": "uh yeah there I think there sort of 30 or 40 different partners and they will automatically put events on your event",
    "start": "2098640",
    "end": "2104000"
  },
  {
    "text": "busz so you're using a ticketing system say with zendesk uh if a customer puts in a a service request that service",
    "start": "2104000",
    "end": "2110720"
  },
  {
    "text": "request ID is literally going to appear on your event Bridge event bus and you can build an inventor of an architecture to handle that you don't need to manage",
    "start": "2110720",
    "end": "2117079"
  },
  {
    "text": "that connection you don't need to run a web hook you don't need to poll Zen desk you don't need to do anything it just happens sort of automatically which is",
    "start": "2117079",
    "end": "2123800"
  },
  {
    "text": "cool and then step functions is the other other part and this is a workflow orchestration so this is where you",
    "start": "2123800",
    "end": "2129839"
  },
  {
    "text": "compose um infrastructure as part of State machines and it's all going to run within a microservice and this is um a",
    "start": "2129839",
    "end": "2135920"
  },
  {
    "text": "really cool thing if you're going to use you know Saga patterns or transactions or these kind of things where things need to happen in a particular order so",
    "start": "2135920",
    "end": "2142560"
  },
  {
    "text": "you've got you know think of a bank example uh you want to transfer money into a bank and it needs to be taken from one account to put into another",
    "start": "2142560",
    "end": "2149000"
  },
  {
    "text": "account you want to make sure that doesn't happen twice um you need to be able to recover from that all that kind of things Airline bookings you need to",
    "start": "2149000",
    "end": "2155680"
  },
  {
    "text": "book a seat do a loyalty card all these kind of transactions that need to happen in a particular order step functions is",
    "start": "2155680",
    "end": "2160880"
  },
  {
    "text": "a great way that that you can do that and we're going to use that in this demo shortly so and these two Services work",
    "start": "2160880",
    "end": "2166520"
  },
  {
    "text": "really well together so orchestration often within a microservice tightly bound uh workflows that need to happen",
    "start": "2166520",
    "end": "2172800"
  },
  {
    "text": "uh together you're can to use step functions and then event bridge to uh sort of choreograph between the two where you've got microservices",
    "start": "2172800",
    "end": "2178480"
  },
  {
    "text": "connecting so let's look quickly at the serverless containers in action so often",
    "start": "2178480",
    "end": "2184280"
  },
  {
    "start": "2179000",
    "end": "2403000"
  },
  {
    "text": "people think with containers well I have to pay for things all the time because I need to have the containers up and",
    "start": "2184280",
    "end": "2189319"
  },
  {
    "text": "running but in a vent driven way we don't want to pay for things that don't aren't happening so at the moment here we can see I have no tasks that are",
    "start": "2189319",
    "end": "2195680"
  },
  {
    "text": "running I have no Services I have no tasks um for this application so literally all I'm going to do is I'm",
    "start": "2195680",
    "end": "2201520"
  },
  {
    "text": "going to copy a file so I'm just copying a file from one S3 bucket to another S3",
    "start": "2201520",
    "end": "2206920"
  },
  {
    "text": "bucket and that is going to kick off this workflow so you can see automatically over here and I all of a",
    "start": "2206920",
    "end": "2213040"
  },
  {
    "text": "sudden have an ECS task so I didn't do anything I didn't pre-provision this I didn't create anything just the event uh",
    "start": "2213040",
    "end": "2220359"
  },
  {
    "text": "the event of an architecture part of the side has just kicked off this ECS tasks but what has kicked that off is the step",
    "start": "2220359",
    "end": "2227680"
  },
  {
    "text": "function State machine so if I you can see I have a step function State machine that's kicking off here and you can see",
    "start": "2227680",
    "end": "2234440"
  },
  {
    "text": "step functions has this really cool um uh visual workflow that you can go through and it came over here and the",
    "start": "2234440",
    "end": "2241359"
  },
  {
    "text": "first step of this workflow was to check the image size so this image if an image is particular big it's actually an",
    "start": "2241359",
    "end": "2247599"
  },
  {
    "text": "incorrect label there should actually be whether it's going to be that image or it's going to be the the video and uh",
    "start": "2247599",
    "end": "2252720"
  },
  {
    "text": "that choice state within step functions is configuration uh is set up as part of the configuration to say well because",
    "start": "2252720",
    "end": "2259200"
  },
  {
    "text": "this is going to be a um uh a video file I'm actually going to use ECS to run it",
    "start": "2259200",
    "end": "2264760"
  },
  {
    "text": "because I know it's going to be longer than 15 minutes if it was a video I would have just used Lambda So within the same application I'm using",
    "start": "2264760",
    "end": "2271560"
  },
  {
    "text": "containers and I'm going to use serverless and I can dynamically pick just based B just basically based on a",
    "start": "2271560",
    "end": "2276640"
  },
  {
    "text": "file extension I just say you know is itm or is JPEG and do and do that and so",
    "start": "2276640",
    "end": "2281920"
  },
  {
    "text": "this a this serverless uh container is going to spin up I think I've even got the code where's my code yes so I mean",
    "start": "2281920",
    "end": "2289280"
  },
  {
    "text": "this is just code that's running for the seress side you can see this is a a Docker container for the container I",
    "start": "2289280",
    "end": "2295440"
  },
  {
    "text": "happen to be using Alpine I need to install FFM Peg because that's going to do kind of stuff and I've got some application code and this is I think the",
    "start": "2295440",
    "end": "2302760"
  },
  {
    "text": "application code that runs in the container and you can see it's going to grab stuff from the input bucket it's it's going to run FFM Peg and it's",
    "start": "2302760",
    "end": "2309200"
  },
  {
    "text": "basically going to do the whatever I need to do on um within this movie file and then upload the the file to S3 and",
    "start": "2309200",
    "end": "2316560"
  },
  {
    "text": "actually I think this is the Lambda function very similar code um I am just running this uh this main function just",
    "start": "2316560",
    "end": "2324160"
  },
  {
    "text": "G just basically to show you that the code that's going to be running in your container and the code that's going to be running in your Lambda function can",
    "start": "2324160",
    "end": "2329880"
  },
  {
    "text": "be really similar so I'm not going to bore you to Tears by watching the uh end of this task running for more than 15",
    "start": "2329880",
    "end": "2335240"
  },
  {
    "text": "minutes as it's not going to do anything but yeah really useful capabilities to be able to use step functions and event",
    "start": "2335240",
    "end": "2340680"
  },
  {
    "text": "bridge in an event driven architecture way uh in fact I'll show you quickly what the state machine looks like and",
    "start": "2340680",
    "end": "2346319"
  },
  {
    "text": "you can see how we can uh create the state machine so you can see really nice",
    "start": "2346319",
    "end": "2351359"
  },
  {
    "text": "and visual uh really great way to build a workflow if you're working with business people how cool is this instead",
    "start": "2351359",
    "end": "2356720"
  },
  {
    "text": "of having to you know show them lines of python or lines of java and say you know does this uh does this workflow um or",
    "start": "2356720",
    "end": "2364000"
  },
  {
    "text": "does this business process match what you were expecting and I know the business people I've looked like uh I don't know I'm not a coder show them",
    "start": "2364000",
    "end": "2370119"
  },
  {
    "text": "this um uh uh this visual representation of it and it's a really easy way that you can understand what's going on I've",
    "start": "2370119",
    "end": "2376119"
  },
  {
    "text": "got a choice State you know check what's going to happen uh decide between running the container or running the",
    "start": "2376119",
    "end": "2381400"
  },
  {
    "text": "Lambda function and then at the end of it I'm going to also you know um send the message onto the event Bridge event",
    "start": "2381400",
    "end": "2386560"
  },
  {
    "text": "bus because maybe a downstream service is then going to react to this and it's going to maybe you know upload a to website or it's going to use some AI",
    "start": "2386560",
    "end": "2393640"
  },
  {
    "text": "tool to um generate text to speech or you know various kind of things you can do with integrating with other AWS",
    "start": "2393640",
    "end": "2401640"
  },
  {
    "text": "services so you may be thinking Julian you've been B Boozled me with enough there lots of options I appreciate that",
    "start": "2401640",
    "end": "2407760"
  },
  {
    "start": "2403000",
    "end": "2990000"
  },
  {
    "text": "well how do you then choose which compute option you're actually going to uh which is the right one for your application and so there are some",
    "start": "2407760",
    "end": "2414240"
  },
  {
    "text": "architectural differences between the two different approaches uh Lambda we talked about when you've got these managed triggers so the thing that is",
    "start": "2414240",
    "end": "2421000"
  },
  {
    "text": "going to cause the Lambda function to run that is going to be managed and Lambda AWS is just going to manage that",
    "start": "2421000",
    "end": "2426359"
  },
  {
    "text": "on your behalf really easy to do and also the run times are going to be updated patched they're going to be looked after by you you don't need to do",
    "start": "2426359",
    "end": "2433119"
  },
  {
    "text": "anything for you containers you have the flexibility you can run your own custom code you can run your own web services",
    "start": "2433119",
    "end": "2438800"
  },
  {
    "text": "your own polling logic your own uh database instances you know anything you need in a container you can run that for",
    "start": "2438800",
    "end": "2444920"
  },
  {
    "text": "for yourself so you got the flexibility but obviously there's a tradeoff for that that it does require some more maintenance and S you know",
    "start": "2444920",
    "end": "2451440"
  },
  {
    "text": "management and orchestration to run that but if that's what you need uh perfect in terms of the resource",
    "start": "2451440",
    "end": "2457280"
  },
  {
    "text": "considerations well I mentioned before Lambda functions can run up to 10 G memory so the cool thing is you can have",
    "start": "2457280",
    "end": "2462920"
  },
  {
    "text": "a really small function so lots of people if they're running web requests they don't need a lot of compute power",
    "start": "2462920",
    "end": "2468040"
  },
  {
    "text": "so you can run from you know 128 Mega memory all the way up to 10 G Ram that's all you need to configure it by default",
    "start": "2468040",
    "end": "2475000"
  },
  {
    "text": "it's going to proportionally allocate you CPU resources and network resources and so yeah just something else you",
    "start": "2475000",
    "end": "2480920"
  },
  {
    "text": "don't need to consider Lambda functions can run for a maximum of 15 minutes uh so with that",
    "start": "2480920",
    "end": "2486240"
  },
  {
    "text": "computing power um that's only a single Lambda function as you saw with the scaleout you saw um you know we had",
    "start": "2486240",
    "end": "2492079"
  },
  {
    "text": "10,000 requests even when you know the people in the room were hitting that QR code they were adding multiple Lambda",
    "start": "2492079",
    "end": "2497760"
  },
  {
    "text": "functions so each Lambda function that's going to run can run for 15 minutes each Lambda function up to 10 gig so you know",
    "start": "2497760",
    "end": "2504640"
  },
  {
    "text": "lambda's big Power is all that scaleout I ran 10,000 requests you know that's a lot of computing power you can use but",
    "start": "2504640",
    "end": "2511280"
  },
  {
    "text": "it also has that single concurrency uh with containers you've got you know more memory up to 128 gig memory you can use",
    "start": "2511280",
    "end": "2517720"
  },
  {
    "text": "various different networking modes so it's not the same not the same kind of way but if you need the flexibility of the networking the serverless containers",
    "start": "2517720",
    "end": "2523920"
  },
  {
    "text": "is going to be useful for you and unlimited running uh running time so uh",
    "start": "2523920",
    "end": "2529400"
  },
  {
    "text": "you're going to run these stateful services that are going to be running your web web requests or uh draining",
    "start": "2529400",
    "end": "2534560"
  },
  {
    "text": "some kind of queue or running some kind of database unlimited running time is going to be useful for you and multic",
    "start": "2534560",
    "end": "2540079"
  },
  {
    "text": "concurrency so you can be able to root multiple requests into a container which is going to be better for your throughput if you want to want to have",
    "start": "2540079",
    "end": "2546640"
  },
  {
    "text": "that so in terms of the costing models these are the sort of two different ways to think about it fargate is you pay for",
    "start": "2546640",
    "end": "2552760"
  },
  {
    "text": "what you provision this is a container you say I want this container provisioned and you're going to pay for that uh regardless of how many requests",
    "start": "2552760",
    "end": "2559440"
  },
  {
    "text": "are going to come in until you stop that container and so you can if you can be a",
    "start": "2559440",
    "end": "2564559"
  },
  {
    "text": "bit Dynamic you can use fargate spot I mentioned earlier you can when we've got unused capacity we can make that",
    "start": "2564559",
    "end": "2570319"
  },
  {
    "text": "available for a period of time and we will notify you to say um your fargate",
    "start": "2570319",
    "end": "2575440"
  },
  {
    "text": "spot instance I'm sorry we need that back or a minute or two but if you've got an auto balanced uh you know website",
    "start": "2575440",
    "end": "2581160"
  },
  {
    "text": "or that kind of thing you can just move that over to another container and take advantage of that pricing obviously you wouldn't want to be using fargate spots",
    "start": "2581160",
    "end": "2587599"
  },
  {
    "text": "if you go one container running a database and uh you know we we said oh we need to take your database instance down in a minute or two probably won't",
    "start": "2587599",
    "end": "2594200"
  },
  {
    "text": "make you happy so again architectural choices so if you have high traffic your",
    "start": "2594200",
    "end": "2599559"
  },
  {
    "text": "code is efficient and you want the lowest per request cost then uh fargate is going to be the one for you Lambda is",
    "start": "2599559",
    "end": "2606599"
  },
  {
    "text": "pay for what you use use so literally you pay for per millisecond for the exact time that your function is going",
    "start": "2606599",
    "end": "2611640"
  },
  {
    "text": "to run uh you have a single request coming for a Lambda function if you don't have another request it just pauses there doesn't do anything doesn't",
    "start": "2611640",
    "end": "2618160"
  },
  {
    "text": "charge you anything really simple next request comes in and then you start getting charged so you literally uh you",
    "start": "2618160",
    "end": "2624440"
  },
  {
    "text": "know when this gaps for the work to do it's really going to be cost uh cost efficient it's going to scale with that",
    "start": "2624440",
    "end": "2629680"
  },
  {
    "text": "uh with that graph really easily and so yeah a really easy way to for you to understand your costs for your for your",
    "start": "2629680",
    "end": "2635200"
  },
  {
    "text": "application um so when would you use containers uh",
    "start": "2635200",
    "end": "2640319"
  },
  {
    "text": "if you need you know lowish startup latency not as fast as Lambda but you're still going to be able to scale up your",
    "start": "2640319",
    "end": "2645640"
  },
  {
    "text": "containers anything that needs more than 15 minutes if you've got you know predictable high traffic usage you're wanning a you're running a very uh High",
    "start": "2645640",
    "end": "2652720"
  },
  {
    "text": "performing website that's going to be it uh data pance as well um if you're going to be able to create a block volume or",
    "start": "2652720",
    "end": "2659720"
  },
  {
    "text": "something uh that you can map it to your container instance that's going to be a consideration as well and yeah when you",
    "start": "2659720",
    "end": "2666160"
  },
  {
    "text": "actually need control over your Compu environment if you want to you know pick different instance sizes you want to mix and match them you want to have more",
    "start": "2666160",
    "end": "2672040"
  },
  {
    "text": "control over that and all also your tooling consistency these are Docker containers that you can run on your",
    "start": "2672040",
    "end": "2677599"
  },
  {
    "text": "laptop you can run anywhere else you can you know run it from a a Raspberry Pi to multiple Cloud providers this is going",
    "start": "2677599",
    "end": "2683280"
  },
  {
    "text": "to give you that flexibility to use exactly the same kind of tooling lambra on the other side we saw the scaling you",
    "start": "2683280",
    "end": "2689160"
  },
  {
    "text": "know when you really need immediate startup time you want to you know trigger your function to run based on an",
    "start": "2689160",
    "end": "2695200"
  },
  {
    "text": "event you know varying utilization you can't really predict what's going to happen this is going to be the really good service for you uh you don't know",
    "start": "2695200",
    "end": "2701839"
  },
  {
    "text": "what your demand's going to be lambda's just going to figure that out for you and and and uh handle it for you again",
    "start": "2701839",
    "end": "2708040"
  },
  {
    "text": "you know from an architectural things when you want to just make fewer decisions you don't want to have to decide on uh you know various instance",
    "start": "2708040",
    "end": "2713920"
  },
  {
    "text": "sizes and how you're going to fit that all together doing your network egress and handling all your load balancing and",
    "start": "2713920",
    "end": "2719240"
  },
  {
    "text": "all that kind of thing if you're happy for AWS to look after that um that's going to make Lambda a really um really",
    "start": "2719240",
    "end": "2725119"
  },
  {
    "text": "attractive where you can hand over the operational complexity for us to look after and you can fun you can uh look",
    "start": "2725119",
    "end": "2730960"
  },
  {
    "text": "after your code so there's a sort of sweet spot where if you've got a lot of requests and you've got a sort of lot of",
    "start": "2730960",
    "end": "2738079"
  },
  {
    "text": "stable and predictable workloads and far farget is going to be the best for you uh but if you've got varying workloads",
    "start": "2738079",
    "end": "2744319"
  },
  {
    "text": "you're not quite sure spiky onoff hours you're not quite uh you don't want to have to manage that Lambda is going to",
    "start": "2744319",
    "end": "2749400"
  },
  {
    "text": "be really good and um Lambda is not going to be as uh resource and cost efficient if you're going to be handling",
    "start": "2749400",
    "end": "2755400"
  },
  {
    "text": "you know many many thousands of requests but otherwise it is still going to be able to scale up for you so again a lot",
    "start": "2755400",
    "end": "2760839"
  },
  {
    "text": "of words if it's simpler if you got something that's long running stable lots of high volume and high resource",
    "start": "2760839",
    "end": "2766200"
  },
  {
    "text": "vent sources ECS fargate is going to be super useful you and then you know for generally for most other workloads",
    "start": "2766200",
    "end": "2771960"
  },
  {
    "text": "certainly look at Lambda but this also brings up the bigger picture of like but I can't do",
    "start": "2771960",
    "end": "2777119"
  },
  {
    "text": "servus because there lots of other considerations that you can think about now I appreciate I work for AWS and you",
    "start": "2777119",
    "end": "2782319"
  },
  {
    "text": "think well of course he's going to be tell me all about the AWS things which I am but you know see these are some of",
    "start": "2782319",
    "end": "2787960"
  },
  {
    "text": "the common objections that people have for serers like well it's not for production usage you know sure my sort of little test and development accounts",
    "start": "2787960",
    "end": "2794599"
  },
  {
    "text": "and I've got a little bit of code um you know that that's fine well we've shown here whether you run a function in a",
    "start": "2794599",
    "end": "2800839"
  },
  {
    "text": "test environment or you run it in a production environment that scale is going to happen exactly the same way we scaled up to 10,000 requests you know if",
    "start": "2800839",
    "end": "2807920"
  },
  {
    "text": "you had a production application handling over that I just created a demo here it took me a couple of seconds",
    "start": "2807920",
    "end": "2813200"
  },
  {
    "text": "10,000 requests going to Lambda function you know that's pretty good for production workloads as well because AWS",
    "start": "2813200",
    "end": "2819359"
  },
  {
    "text": "is handling a lot of the work behind the scenes it means it is built for the most demanding production workloads um it's",
    "start": "2819359",
    "end": "2825760"
  },
  {
    "text": "different yes appreciate serus may be different there is a bit of a learning curve that you need to do but that's",
    "start": "2825760",
    "end": "2831160"
  },
  {
    "text": "that's with all things in technology if you building a new framework or using a new framework or a different Computing",
    "start": "2831160",
    "end": "2836359"
  },
  {
    "text": "service or a new database there is stuff to learn so you know I would take that as a bit of a challenge that it's a new",
    "start": "2836359",
    "end": "2841520"
  },
  {
    "text": "architectural thing to learn but it's certainly going to pay dividends because once you've learned these things once you're going to be they're going to be",
    "start": "2841520",
    "end": "2847119"
  },
  {
    "text": "more applicable I think the scaling we can knock that on the head because our Lambda functions can scale pretty high",
    "start": "2847119",
    "end": "2852200"
  },
  {
    "text": "up the containers uh Services can scale even higher up as well so uh you know",
    "start": "2852200",
    "end": "2857359"
  },
  {
    "text": "there aren't huge amount of workloads that happen in the world that don't run uh that don't run on servus because of a",
    "start": "2857359",
    "end": "2862839"
  },
  {
    "text": "scale cost certainly can be a concern people are very worried about the ways",
    "start": "2862839",
    "end": "2868200"
  },
  {
    "text": "that costs can scale beyond their usage because oh isn't it great that a Lambda function scales for my usage but what",
    "start": "2868200",
    "end": "2873440"
  },
  {
    "text": "happens if my usage goes off the charts what's going to go on so first of all that may be a good thing if your",
    "start": "2873440",
    "end": "2879160"
  },
  {
    "text": "application is super busy and you've got lots of customers hitting your website you want that scale and so you're happy to absorb that cost because they're",
    "start": "2879160",
    "end": "2885640"
  },
  {
    "text": "hopefully generating Revenue but you don't want it to run away so there are some cost controls there way there are",
    "start": "2885640",
    "end": "2891160"
  },
  {
    "text": "ways that you can limit your Lambda functions there are ways that you can um understand what's going down you can",
    "start": "2891160",
    "end": "2896760"
  },
  {
    "text": "sort of protect your resources and constrain those kind of those kind of costs which is of course um very",
    "start": "2896760",
    "end": "2902119"
  },
  {
    "text": "important we don't want to have runaround costs um another one is the lock in like oh you using AWS I'm all",
    "start": "2902119",
    "end": "2907880"
  },
  {
    "text": "going to be locked into using AWS you know how does that work well two takes",
    "start": "2907880",
    "end": "2912920"
  },
  {
    "text": "on that you're always going to be locked into someway whether if you decide to pick Java as a programming language or python as a programming language you",
    "start": "2912920",
    "end": "2919200"
  },
  {
    "text": "know you're not going to switch between the two very easily um also with lambdas and containers I think you've seen there",
    "start": "2919200",
    "end": "2925400"
  },
  {
    "text": "it is your code it's running in node Java python whatever it's your code that code is entirely portable to any any",
    "start": "2925400",
    "end": "2931839"
  },
  {
    "text": "other kind of service using our container services it is a container you can pick up that container and run it",
    "start": "2931839",
    "end": "2937240"
  },
  {
    "text": "anywhere else where the lockin does happen is we are going to run the infrastructure on your behalf behind the scenes but if you're going to pick up",
    "start": "2937240",
    "end": "2944000"
  },
  {
    "text": "your application and run it somewhere else um you're going to then have to build that infrastructure so you uh not",
    "start": "2944000",
    "end": "2951200"
  },
  {
    "text": "locked into your programming language of choice you can use that any language that uh it's just normal JavaScript code",
    "start": "2951200",
    "end": "2957000"
  },
  {
    "text": "for example can move it anywhere else where you are locked in is using our infrastructure and our um hardware and",
    "start": "2957000",
    "end": "2962359"
  },
  {
    "text": "all that kind of thing so you move it somewhere else and you're going to have to build with that but you know that's building more you're not having to sort",
    "start": "2962359",
    "end": "2968280"
  },
  {
    "text": "of reinvent the wheel for doing that kind of thing and the other kind of one is it is a slight different developer experience you're going to have to learn",
    "start": "2968280",
    "end": "2973720"
  },
  {
    "text": "event an architectures you may have some different tooling if you're going to package things up you know profiles",
    "start": "2973720",
    "end": "2979359"
  },
  {
    "text": "maybe need to be in a different location you got to understand a bit of load balancing but again as with uh it's different this is just a different way",
    "start": "2979359",
    "end": "2985640"
  },
  {
    "text": "of building applications and you know certainly the kind of thing is we when",
    "start": "2985640",
    "end": "2990760"
  },
  {
    "start": "2990000",
    "end": "3033000"
  },
  {
    "text": "you're building servess applications they're always improving under the hood so AWS behind the scenes is we going to build well architected fundamentals that",
    "start": "2990760",
    "end": "2997480"
  },
  {
    "text": "means best practices uh we build them securely we're going to always improving the developer experience we're going to",
    "start": "2997480",
    "end": "3003319"
  },
  {
    "text": "have more controls we're going to have more ways that you can do it higher scale uh you know hopefully cheaper costs better Integrations so once you",
    "start": "3003319",
    "end": "3009839"
  },
  {
    "text": "start building servess applications you will understand that behind the scenes some things just get better they get get",
    "start": "3009839",
    "end": "3015640"
  },
  {
    "text": "faster you get more Integrations and you don't have to do anything and that's the whole premise of servus so it's a bit of",
    "start": "3015640",
    "end": "3021400"
  },
  {
    "text": "a Whistle Stop tour through some of the architectural patterns about using serverless compute I'm going to be on",
    "start": "3021400",
    "end": "3027520"
  },
  {
    "text": "the AWS Booth all today you've got a demo application you can come and even get some free coffee happy to talk about",
    "start": "3027520",
    "end": "3032720"
  },
  {
    "text": "all the kind of things and thank you to go to and the other sponsors and the organizers for putting everything together today it's a lot of work and",
    "start": "3032720",
    "end": "3038240"
  },
  {
    "start": "3033000",
    "end": "3056000"
  },
  {
    "text": "thank you for coming most of important",
    "start": "3038240",
    "end": "3042359"
  }
]