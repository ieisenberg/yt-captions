[
  {
    "text": "[Music]",
    "start": "6990",
    "end": "10108"
  },
  {
    "text": "anyway welcome thank you everyone for being here uh this is a talk on cotlin it's uh it's a very introductory talk",
    "start": "12280",
    "end": "20000"
  },
  {
    "text": "how many of you here have heard of cotlin used",
    "start": "20000",
    "end": "25720"
  },
  {
    "text": "cotlin okay so hopefully when you leave everyone users cotland just go back and",
    "start": "25920",
    "end": "31920"
  },
  {
    "text": "say boss we're going to rewrite everything in cotland why cuz it's so awesome there you go that's the best",
    "start": "31920",
    "end": "38360"
  },
  {
    "text": "reason to rewrite something because it's awesome I'm joking by the way anyway uh",
    "start": "38360",
    "end": "44879"
  },
  {
    "text": "Carin give you some backgrounds uh it was started by us in 2010 us being jet brains um back then we used to well back",
    "start": "44879",
    "end": "52199"
  },
  {
    "text": "then we still if you've heard of jet brains we make developer tools and we've got two sides of the business one side",
    "start": "52199",
    "end": "58600"
  },
  {
    "text": "is mostly Java and all of the idees are built with Java and the other side is net and the Java stuff is all using Java",
    "start": "58600",
    "end": "65600"
  },
  {
    "text": "so we make tools for all different types of Technologies and languages Etc but we're still using mostly Java to write",
    "start": "65600",
    "end": "71000"
  },
  {
    "text": "it and we needed a language we need a language that was a little bit more concise than what we had we needed a",
    "start": "71000",
    "end": "76320"
  },
  {
    "text": "language that was a little bit more expressive um toolable and interoperable",
    "start": "76320",
    "end": "81600"
  },
  {
    "text": "with all of the source code that we had which back then was 10 years of source code right right now jet brains is 17",
    "start": "81600",
    "end": "87759"
  },
  {
    "text": "years old so we we have a lot of leg code and we wanted a language that was",
    "start": "87759",
    "end": "93040"
  },
  {
    "text": "pragmatic now at the time we looked at multiple languages uh we discarded them for different reasons some of the things",
    "start": "93040",
    "end": "99640"
  },
  {
    "text": "you'll see are probably very similar to Scala and you'll ask me why didn't you just go with Scala Scala is not a",
    "start": "99640",
    "end": "105600"
  },
  {
    "text": "language that is easily toolable we know because we created tools for it and it's not a language and at the time it wasn't",
    "start": "105600",
    "end": "112799"
  },
  {
    "text": "very fast now it's a little bit faster but it wasn't very fast then and also",
    "start": "112799",
    "end": "118600"
  },
  {
    "text": "schola is a very powerful language and that it allows you to do absolutely anything you want pretty much uh we",
    "start": "118600",
    "end": "124799"
  },
  {
    "text": "thought that that could backfire at some point so we eventually decided to create",
    "start": "124799",
    "end": "130239"
  },
  {
    "text": "our own language so first and foremost cotlin was born out of need pretty much like all of the tools at jet Brains it's",
    "start": "130239",
    "end": "136120"
  },
  {
    "text": "been developed under Apache 2 uh licens on GitHub ever since what is cotlin it's",
    "start": "136120",
    "end": "142120"
  },
  {
    "text": "a static language I always forget to mention that it targets the jvm JavaScript and we recently announced",
    "start": "142120",
    "end": "147800"
  },
  {
    "text": "also native um so native is already the first demo technology preview is already",
    "start": "147800",
    "end": "153680"
  },
  {
    "text": "available you can download it I got it running on a Raspberry Pi which is quite nice without any of the jvm or anything",
    "start": "153680",
    "end": "159519"
  },
  {
    "text": "and it works quite nicely current state it was released in February 15 2016 1.1",
    "start": "159519",
    "end": "165959"
  },
  {
    "text": "was released this year that was a 1.0 we have right now that slide is outdated in",
    "start": "165959",
    "end": "171319"
  },
  {
    "text": "fact this is this is called um go to is a very agile conference right there you",
    "start": "171319",
    "end": "178480"
  },
  {
    "text": "go so next time on I won't forget uh we've got 40 plus developers working on cotlin that makes it the second largest",
    "start": "178480",
    "end": "185360"
  },
  {
    "text": "team at jet brains right jet brains were around 700 plus people 40 38 35 or so are intelligy idea",
    "start": "185360",
    "end": "193760"
  },
  {
    "text": "cotlin well no intelligy core and then the other ones and cotlin is kind of like the second largest team right now",
    "start": "193760",
    "end": "199480"
  },
  {
    "text": "at Jeet brains right so we have a lot invested in in cotlin over 100 committers it's used in more than 10",
    "start": "199480",
    "end": "205959"
  },
  {
    "text": "products now at jet brains um any new product that we create essentially is using cotland even our new net IDE is",
    "start": "205959",
    "end": "212360"
  },
  {
    "text": "written in cotland Java andet who would have thought and I don't like name dropping unless it really benefits us so",
    "start": "212360",
    "end": "219480"
  },
  {
    "text": "I will um and so there's some external companies that are using cotlin as well such as Expedia NBC News digital Netflix",
    "start": "219480",
    "end": "225879"
  },
  {
    "text": "AMX and uh a few more okay those are just some of them right where can you use it so",
    "start": "225879",
    "end": "232640"
  },
  {
    "text": "anywhere essentially cotlin was you know we create desktop tools and servers so",
    "start": "232640",
    "end": "237720"
  },
  {
    "text": "we created cotlin to be able to create desktop tools tools and servers but you can use it on any platform Android it's",
    "start": "237720",
    "end": "243959"
  },
  {
    "text": "compatible with Java 6 so you can use it and it's had a lot of uptick in the Android platform because of some of the new language features that it brought",
    "start": "243959",
    "end": "250599"
  },
  {
    "text": "that Java 8 um has brought to the jvm but still struggling on some aspects to bring to Android given that it's very",
    "start": "250599",
    "end": "257759"
  },
  {
    "text": "similar to Java C JavaScript groovy and pretty much put every language out there",
    "start": "257759",
    "end": "263160"
  },
  {
    "text": "except um brain F whatever um it gives you a good ramp up time so the idea",
    "start": "263160",
    "end": "269400"
  },
  {
    "text": "wasn't to completely move away from what you know but kind of use some of the knowledge that you know to be familiar",
    "start": "269400",
    "end": "275080"
  },
  {
    "text": "with the language so I can promise you that if you know Java C JavaScript Scala groovy all of these you'll pick up",
    "start": "275080",
    "end": "281919"
  },
  {
    "text": "cotlin in no time but that's on purpose and interoperability a big thing for us",
    "start": "281919",
    "end": "288000"
  },
  {
    "text": "we wanted a language that was interoperable with all of the codebase because we just you know this isn't silicon valid that you can just shut",
    "start": "288000",
    "end": "293960"
  },
  {
    "text": "down for 6 months and rewriting JavaScript we needed to interrupt with all of the source code that we have so",
    "start": "293960",
    "end": "300560"
  },
  {
    "text": "we play a big part in terms of making sure that everything is interoperable how can you use it very",
    "start": "300560",
    "end": "307000"
  },
  {
    "text": "very open right we make developer tools um obviously we want you to use our tools but cotlin is extremely open you",
    "start": "307000",
    "end": "314039"
  },
  {
    "text": "can use it with anything you want you can use the command line you can use Maven Gradle Cobalt which is a new build",
    "start": "314039",
    "end": "319560"
  },
  {
    "text": "tool similar to Gradle inspired by Gradle built using cotlin ant intelligy",
    "start": "319560",
    "end": "325520"
  },
  {
    "text": "idea Android does anyone still use ant I mean do at jebin but I'm I thought we",
    "start": "325520",
    "end": "331280"
  },
  {
    "text": "were probably the only people in the world okay there's two of us and Android Studio Eclipse we make a plugin for",
    "start": "331280",
    "end": "337520"
  },
  {
    "text": "eclips and net beans we also make a plugin for net beats okay that's it let's see some code any",
    "start": "337520",
    "end": "344960"
  },
  {
    "text": "questions so far nothing I'm so good at explaining nobody",
    "start": "344960",
    "end": "353039"
  },
  {
    "text": "nobody even has any questions now oh God I'm sorry about that yes what what",
    "start": "353039",
    "end": "359000"
  },
  {
    "text": "platforms you uh what platforms are we targeting for Native right now it's got Raspberry Pi",
    "start": "359000",
    "end": "364720"
  },
  {
    "text": "iOS but we're going to Target iOS we're going to Target OSX um and windows yeah probably has",
    "start": "364720",
    "end": "372360"
  },
  {
    "text": "some issues Linux already some of it works so any it's going through the llvm so anything that um works on that um so",
    "start": "372360",
    "end": "379639"
  },
  {
    "text": "I don't know does the flicker really yeah that that's bad",
    "start": "379639",
    "end": "384800"
  },
  {
    "text": "right yeah it's bad um so um I wonder if it's the here let's try",
    "start": "385360",
    "end": "394520"
  },
  {
    "text": "this if I can do something about",
    "start": "396680",
    "end": "400880"
  },
  {
    "text": "it that's much worse right",
    "start": "403039",
    "end": "408319"
  },
  {
    "text": "oh is that better and we didn't even need a new",
    "start": "408319",
    "end": "415280"
  },
  {
    "text": "cable let's make that 30 okay",
    "start": "415280",
    "end": "420319"
  },
  {
    "text": "that's better right cool awesome so file new",
    "start": "420319",
    "end": "426000"
  },
  {
    "text": "project now I've done this talk a couple of times um which is an",
    "start": "426000",
    "end": "431599"
  },
  {
    "text": "understatement and um so there's various versions of it out on the web but I",
    "start": "431599",
    "end": "436800"
  },
  {
    "text": "always like to give my audience something new because then it's not fair it's not fair on you it's not fair on me",
    "start": "436800",
    "end": "443599"
  },
  {
    "text": "um so we're going to do something slightly different so let's do my app",
    "start": "443599",
    "end": "449000"
  },
  {
    "text": "for Chicago and Colin comes with a very small runtime very very small really",
    "start": "449000",
    "end": "456639"
  },
  {
    "text": "small it's like 700k or so",
    "start": "456639",
    "end": "461720"
  },
  {
    "text": "uh and a standard Library so here's",
    "start": "461720",
    "end": "467280"
  },
  {
    "text": "cotlin ignore all of those other files that was just in my source folder so I'll say um sample and I create a file",
    "start": "467280",
    "end": "476120"
  },
  {
    "text": "type main print line hello Chicago and that's about the only",
    "start": "476120",
    "end": "482520"
  },
  {
    "text": "different thing you're going to see in this presentation over all of the different ones that are out there the name Chicago that's it okay I mean come",
    "start": "482520",
    "end": "489639"
  },
  {
    "text": "on what did you expect me to no I'll I'll do some things in different orders and that way it'll be slightly different",
    "start": "489639",
    "end": "495080"
  },
  {
    "text": "okay so I'll run that and hopefully if that compiles we get hello Chicago there",
    "start": "495080",
    "end": "500560"
  },
  {
    "text": "you go fantastic right don't hold back your emotions either um and of course",
    "start": "500560",
    "end": "507319"
  },
  {
    "text": "you can debug as well and I can do things like you know introduce a variable here and say variable message",
    "start": "507319",
    "end": "515360"
  },
  {
    "text": "and then set a break point on that and debug this and get all of the stack traces and everything so essentially you",
    "start": "515360",
    "end": "521640"
  },
  {
    "text": "get all of the refactorings and all of that out of the box right you get all of that um with cotlin the tooling is",
    "start": "521640",
    "end": "527360"
  },
  {
    "text": "topnotch trust me I'm not biased but I know by the way I work for jet brains",
    "start": "527360",
    "end": "534519"
  },
  {
    "text": "okay so one of the things that you're going to notice immediately is that there is no um object there's nothing",
    "start": "534519",
    "end": "541560"
  },
  {
    "text": "right so this is kind of like a just a file with a main entry point so that is the equivalent of in Java you would have",
    "start": "541560",
    "end": "548959"
  },
  {
    "text": "a a class and then public static void main the entry point for cotlin is just a function called main that matches this",
    "start": "548959",
    "end": "556880"
  },
  {
    "text": "pattern okay so with Cartland that's the good thing that I don't need to have all",
    "start": "556880",
    "end": "561920"
  },
  {
    "text": "of these different functions as static methods of static objects I can just",
    "start": "561920",
    "end": "568320"
  },
  {
    "text": "have functions in a file kind of like JavaScript and you move away from this",
    "start": "568320",
    "end": "573760"
  },
  {
    "text": "idea of having like these utility classes and helper classes where you have a bunch of functions that you're",
    "start": "573760",
    "end": "580519"
  },
  {
    "text": "adding because you don't know where else to put them right that problem completely",
    "start": "580519",
    "end": "585839"
  },
  {
    "text": "disappears it well it doesn't disappear now it goes over to files now you've got all of these different files and you don't know where to put your functions",
    "start": "585839",
    "end": "592320"
  },
  {
    "text": "but hey we got rid of some characters in the process so I can have another function",
    "start": "592320",
    "end": "597440"
  },
  {
    "text": "that says print message and then say um message string and then print",
    "start": "597440",
    "end": "604839"
  },
  {
    "text": "line um message and I have string interpolation so message",
    "start": "604839",
    "end": "611720"
  },
  {
    "text": "is okay right so you know calling the",
    "start": "611720",
    "end": "617200"
  },
  {
    "text": "function is very straightforward just uh print message and hello now a couple of",
    "start": "617200",
    "end": "623440"
  },
  {
    "text": "things to notice is we're following the Pascal notation where you have the uh parameter name and then the type okay",
    "start": "623440",
    "end": "632120"
  },
  {
    "text": "and string interpolation as I told you you can do other things here for example do more complex things here like say",
    "start": "632120",
    "end": "637240"
  },
  {
    "text": "length and do operations you can do if else whatever inside of that as well yes",
    "start": "637240",
    "end": "642519"
  },
  {
    "text": "question is reason you chose that notation over youv uh I think there are reasons behind",
    "start": "642519",
    "end": "648720"
  },
  {
    "text": "it in terms of tooling and making it easier in certain aspects IDE question",
    "start": "648720",
    "end": "654760"
  },
  {
    "text": "is why did we choose that notation as opposed to the journal jav also we wanted to there was there was a um it",
    "start": "654760",
    "end": "661600"
  },
  {
    "text": "was actually an interesting Tweet someone said oh these new languages uh you know putting their uh types after",
    "start": "661600",
    "end": "667440"
  },
  {
    "text": "the names yeah except this was done like 40 years ago right it it's it kind of is in",
    "start": "667440",
    "end": "674680"
  },
  {
    "text": "line with those people from the JavaScript community that think functional programming is this brand new paradigm that's just been invented okay",
    "start": "674680",
    "end": "682360"
  },
  {
    "text": "anyway I'm not going to criticize JavaScript maybe I should no I shouldn't",
    "start": "682360",
    "end": "689040"
  },
  {
    "text": "right so let me show you a little comparison one of the things that we tried to do with cotlin is make it less uh more concise right more concise than",
    "start": "689040",
    "end": "696279"
  },
  {
    "text": "Java now that's not saying a lot I mean you know Java is quite verbos but to",
    "start": "696279",
    "end": "701639"
  },
  {
    "text": "give you an idea let me go ahead and create a customer class so I'm going to",
    "start": "701639",
    "end": "707360"
  },
  {
    "text": "create a customer class here and then I'm going to call it a cotlin and I'll say customer right and it's going to be",
    "start": "707360",
    "end": "713440"
  },
  {
    "text": "a class and I'm going to remove all of this I don't need that and I'll say Val",
    "start": "713440",
    "end": "718800"
  },
  {
    "text": "name string and let's go ahead and actually create a a Val ID int and VAR name",
    "start": "718800",
    "end": "727200"
  },
  {
    "text": "String and uh we can leave it at that right so this is essentially creating a class that has two properties in cotland",
    "start": "727200",
    "end": "733760"
  },
  {
    "text": "there's no such thing as a field as such right this has two properties it has a property which is called ID which is",
    "start": "733760",
    "end": "740279"
  },
  {
    "text": "readon because it's prefix with it's it's got a vowel in front and it's got a",
    "start": "740279",
    "end": "745519"
  },
  {
    "text": "property called name which is read write and this is also acting as a Constructor",
    "start": "745519",
    "end": "751279"
  },
  {
    "text": "right so I can express all of that in a single line now I'm going to go ahead and add a",
    "start": "751279",
    "end": "757160"
  },
  {
    "text": "something here a modifier called data right so that does a few things what",
    "start": "757160",
    "end": "762240"
  },
  {
    "text": "does that do well let's go ahead and create a Java class and we'll call it customer Java right and we'll do",
    "start": "762240",
    "end": "773240"
  },
  {
    "text": "um private int ID and this is going to be readon",
    "start": "773240",
    "end": "780399"
  },
  {
    "text": "it's not read only is it what is it",
    "start": "780399",
    "end": "784880"
  },
  {
    "text": "final initialize add Constructor parameter okay private string",
    "start": "785880",
    "end": "794839"
  },
  {
    "text": "name uh add Constructor parameter and then we're going to go ahead and create",
    "start": "794839",
    "end": "800199"
  },
  {
    "text": "gets and Setter for this for this one we're going to create a getter then",
    "start": "800199",
    "end": "805320"
  },
  {
    "text": "we're going to come here and create a equals in hash",
    "start": "805320",
    "end": "811880"
  },
  {
    "text": "code and then we're going to come here and create uh two string and then we're going to come here",
    "start": "813160",
    "end": "820360"
  },
  {
    "text": "and create uh uh what else can we create override methods um clone okay so that's",
    "start": "820360",
    "end": "831000"
  },
  {
    "text": "Java that's cotlin",
    "start": "837320",
    "end": "841040"
  },
  {
    "text": "okay so we tried to be a little bit more concise now of course you're going to say big deal intellig does that for you",
    "start": "842680",
    "end": "850279"
  },
  {
    "text": "yes it does so essentially we're putting ourselves out of business uh no the",
    "start": "850279",
    "end": "855480"
  },
  {
    "text": "point here though is that you don't know if this code is actually just the standard template default generated by",
    "start": "855480",
    "end": "861680"
  },
  {
    "text": "intell or your favorite IDE or if it's got something different or when you add a new field or a property you have to go",
    "start": "861680",
    "end": "868480"
  },
  {
    "text": "and update that right it's a whole lot of Boiler code that you don't need all",
    "start": "868480",
    "end": "873759"
  },
  {
    "text": "of that is just essentially there for you with this single line now I the",
    "start": "873759",
    "end": "879279"
  },
  {
    "text": "single the data is what's added the two string the equals the hash code and the",
    "start": "879279",
    "end": "885560"
  },
  {
    "text": "Clone otherwise it would just be a standard class with two properties okay",
    "start": "885560",
    "end": "891759"
  },
  {
    "text": "any",
    "start": "891759",
    "end": "894040"
  },
  {
    "text": "questions right now let's let's close this off okay so what else do we have so",
    "start": "897279",
    "end": "905920"
  },
  {
    "text": "functions functions are very simple as I said they're top level we have uh",
    "start": "906040",
    "end": "911279"
  },
  {
    "text": "parameters as you've seen you have default parameters so this is again about cutting down boiler plate code so",
    "start": "911279",
    "end": "917759"
  },
  {
    "text": "if I have uh two functions that take two different types of parameters one of them for instance is uh optional I don't",
    "start": "917759",
    "end": "923519"
  },
  {
    "text": "have to create overloads I could just pass in a default parameter so in this case I have a function with three",
    "start": "923519",
    "end": "929120"
  },
  {
    "text": "parameters the last one has a default value of Smith if I don't call it without passing that value in it's going",
    "start": "929120",
    "end": "934440"
  },
  {
    "text": "to default to Smith right given I have default parameters I also have naming of",
    "start": "934440",
    "end": "939920"
  },
  {
    "text": "parameters so I can now call parameters using a name as a prefix so here I say",
    "start": "939920",
    "end": "947519"
  },
  {
    "text": "that the default and optional parameters as you can see has three parameters and",
    "start": "947519",
    "end": "952560"
  },
  {
    "text": "I say that the second parameter is X and the first parameter is y so I can change the order of it as well one of the good",
    "start": "952560",
    "end": "958440"
  },
  {
    "text": "uses of naming parameters is if you have a code base where you have functions with a lot of parameters that you can't",
    "start": "958440",
    "end": "963480"
  },
  {
    "text": "refactor you have to call it because it's third party or whatever it gives you Insight in fact if you're using for",
    "start": "963480",
    "end": "969440"
  },
  {
    "text": "instance intellig with Java you might have noticed with the latest version it also gives you kind of like a hint",
    "start": "969440",
    "end": "975759"
  },
  {
    "text": "inside the IDE giving you information about the the parameter name",
    "start": "975759",
    "end": "981959"
  },
  {
    "text": "okay then again going to conciseness so notice that the default return type in",
    "start": "981959",
    "end": "989040"
  },
  {
    "text": "cotlin is actually unit which is similar to void except it's an object so I can query on it as well and we'll see what",
    "start": "989040",
    "end": "995399"
  },
  {
    "text": "an object is if I don't Supply the default if I don't say unit by default it assumes it's unit so that would be",
    "start": "995399",
    "end": "1002279"
  },
  {
    "text": "the equivalent of void in Java if I want to return a type then I",
    "start": "1002279",
    "end": "1007759"
  },
  {
    "text": "would just put the type here in this case I would be returning an INT one of the things big and call in again is type",
    "start": "1007759",
    "end": "1014199"
  },
  {
    "text": "inference as much as we can infer we'll try to infer so if I want to create a",
    "start": "1014199",
    "end": "1019639"
  },
  {
    "text": "parameter I don't have to say you know um I'll create a parameter called my int",
    "start": "1019639",
    "end": "1025319"
  },
  {
    "text": "which is of type int and it's equals zero I don't have to do that I can just say VAR my int equals zero I don't have",
    "start": "1025319",
    "end": "1033480"
  },
  {
    "text": "to be explicit about the type the compiler will infer it and we try and do the same everywhere so here for",
    "start": "1033480",
    "end": "1041640"
  },
  {
    "text": "instance I have a function that's on a single line essentially what I'm doing",
    "start": "1041640",
    "end": "1046678"
  },
  {
    "text": "there is just saying X = x * 2 so it knows what type X is and therefore it",
    "start": "1046679",
    "end": "1053720"
  },
  {
    "text": "will return a type integer I don't have to put the braces or do things",
    "start": "1053720",
    "end": "1059640"
  },
  {
    "text": "like return return return x * 2",
    "start": "1059640",
    "end": "1068480"
  },
  {
    "text": "and do that that would be the longer way to do it right if it's just a single expression that the function returns",
    "start": "1068480",
    "end": "1075440"
  },
  {
    "text": "which many functions can be then I can just do it on a single line in that sense",
    "start": "1075440",
    "end": "1080760"
  },
  {
    "text": "okay you can have functions with multiple parameters any number of parameters right and this gets quite",
    "start": "1080760",
    "end": "1087200"
  },
  {
    "text": "powerful when you start to talk about some higher order functions which we'll see in a minute as well so here I can pass in a a b AB c as many things as I",
    "start": "1087200",
    "end": "1095559"
  },
  {
    "text": "would like now one of the things that we tried to remove in Cartland is nulls right how",
    "start": "1095559",
    "end": "1102600"
  },
  {
    "text": "many of you love nulls it's like JavaScript there's",
    "start": "1102600",
    "end": "1108440"
  },
  {
    "text": "always someone in the room that loves JavaScript there's one person that loves nulls how many people love",
    "start": "1108440",
    "end": "1114080"
  },
  {
    "text": "JavaScript see now there's four okay same person that loves nulls loves javascripts as",
    "start": "1114080",
    "end": "1119960"
  },
  {
    "text": "well so in Callin We R we remove null by default to type cannot have the value",
    "start": "1119960",
    "end": "1126159"
  },
  {
    "text": "null so when I declare a string here for instance uh Val U my string well this is",
    "start": "1126159",
    "end": "1133760"
  },
  {
    "text": "C this is Java um maybe I should do this in cotlin so if I say VAR V VAR my",
    "start": "1133760",
    "end": "1140440"
  },
  {
    "text": "string equals blah blah right and I say VAR my string so I can",
    "start": "1140440",
    "end": "1147720"
  },
  {
    "text": "modify it equals null right it says to me you cannot",
    "start": "1147720",
    "end": "1153240"
  },
  {
    "text": "assign to a null null type right I can have null if I want but I",
    "start": "1153240",
    "end": "1160840"
  },
  {
    "text": "have to be ex tell it that this is can be nullable which is basically adding a",
    "start": "1160840",
    "end": "1165960"
  },
  {
    "text": "question mark at the end so that means that this type is nullable so now I could do my string equals null right now",
    "start": "1165960",
    "end": "1174799"
  },
  {
    "text": "when you're working with cotlin you usually try and avoid nulls because you know what's the point of null if",
    "start": "1174799",
    "end": "1181600"
  },
  {
    "text": "everything's going to end up being a if not null essentially but since we need to",
    "start": "1181600",
    "end": "1187000"
  },
  {
    "text": "interoperate with Java we have to work with the concept of nulls because a lot",
    "start": "1187000",
    "end": "1192559"
  },
  {
    "text": "of the code that you're consuming is Java and Java can return a customer and that customer can be nullable right so",
    "start": "1192559",
    "end": "1198760"
  },
  {
    "text": "so how do I work with nulls so here you can see that I have a typical Java code right if customer not null if customer",
    "start": "1198760",
    "end": "1205600"
  },
  {
    "text": "get first name is not null if customer get first name starts with a a um you know names with a are not allowed um in",
    "start": "1205600",
    "end": "1212120"
  },
  {
    "text": "the this is a security exception which is like the um password algorithms on",
    "start": "1212120",
    "end": "1217600"
  },
  {
    "text": "some websites so customer service in Java is like that now with cotlin I can",
    "start": "1217600",
    "end": "1226320"
  },
  {
    "text": "do something a little bit easier",
    "start": "1226320",
    "end": "1230639"
  },
  {
    "text": "so what I'm doing here is saying I'm using this customer in Java",
    "start": "1231919",
    "end": "1237039"
  },
  {
    "text": "but notice that there's no null checks because it's assuming that it's not null so I don't ever have to check for",
    "start": "1237039",
    "end": "1244080"
  },
  {
    "text": "nulls it's giving the developer the option of saying this type that you're",
    "start": "1244080",
    "end": "1249679"
  },
  {
    "text": "consuming from java isn't nullable or not right if it is nullable I can",
    "start": "1249679",
    "end": "1256200"
  },
  {
    "text": "actually say this type is nullable and now I have to check for nulls so you",
    "start": "1256200",
    "end": "1263159"
  },
  {
    "text": "see that here it's giving me an error right saying you can only do safe calls now instead of doing that if customer is",
    "start": "1263159",
    "end": "1270320"
  },
  {
    "text": "not null then customer. first name I can just add this question mark which is",
    "start": "1270320",
    "end": "1275360"
  },
  {
    "text": "like the Elvis operator and it just says if it's not null then call this if it is",
    "start": "1275360",
    "end": "1281039"
  },
  {
    "text": "null then don't call it right makes it more concise if I want to shoot myself",
    "start": "1281039",
    "end": "1287640"
  },
  {
    "text": "in the foot I can o do that and says I don't care that this is null call it",
    "start": "1287640",
    "end": "1293520"
  },
  {
    "text": "anyway but this is a very important thing because when we first initially did this we thought okay the idea is",
    "start": "1293520",
    "end": "1300600"
  },
  {
    "text": "that anything that I consume from java is nullable Right potentially nullable",
    "start": "1300600",
    "end": "1305760"
  },
  {
    "text": "so I will import everything as nullable what would happen we ended up with code bases of question marks everywhere so we",
    "start": "1305760",
    "end": "1313559"
  },
  {
    "text": "thought okay that doesn't work why don't they annotate code bases and say okay an annotation processor will run and see if",
    "start": "1313559",
    "end": "1319880"
  },
  {
    "text": "it's not nullable then it will Mark that this question mark is obsolete this check is Obsolete and therefore you don't need it makes it a little bit",
    "start": "1319880",
    "end": "1326080"
  },
  {
    "text": "cleaner it didn't work out in the end either so the last option was do whatever you want right you know best",
    "start": "1326080",
    "end": "1332880"
  },
  {
    "text": "whether the type that you're consuming is nullable or not if it is you add the question mark if it's not don't add the",
    "start": "1332880",
    "end": "1338640"
  },
  {
    "text": "question mark and you don't need any extra checks so working with cotlin you",
    "start": "1338640",
    "end": "1344039"
  },
  {
    "text": "usually try and avoid nulls but working with cotlin in interrupt scenario you do have to sometimes deal with",
    "start": "1344039",
    "end": "1352159"
  },
  {
    "text": "nulls some other things that we've tried to do to make it a little bit more uh",
    "start": "1353240",
    "end": "1359520"
  },
  {
    "text": "concise so casting here is a person now notice that",
    "start": "1359520",
    "end": "1365000"
  },
  {
    "text": "I have an Open Class here because by default classes in Cartland are final that means you cannot inherit from them",
    "start": "1365000",
    "end": "1371000"
  },
  {
    "text": "unless you explicitly mark them as open and I have a class employee which inherits from person and the employee",
    "start": "1371000",
    "end": "1377760"
  },
  {
    "text": "has a property vacation days I have a contractor that doesn't",
    "start": "1377760",
    "end": "1382840"
  },
  {
    "text": "have vacation because well we all know we don't get vacation or at least paid once here I have a function that takes a",
    "start": "1382840",
    "end": "1389520"
  },
  {
    "text": "person and it says if the person is employee person vacation days is less than 20 notice what's missing there the",
    "start": "1389520",
    "end": "1397640"
  },
  {
    "text": "casting right it's automatically casting that's why this is in green you probably can't see it but it shows up in green",
    "start": "1397640",
    "end": "1404600"
  },
  {
    "text": "right it's saying that it automatically cast this to a person an employee because you've already told",
    "start": "1404600",
    "end": "1410760"
  },
  {
    "text": "me you've already made the check and this is It's immutable so I know that it's not going to be modified by some",
    "start": "1410760",
    "end": "1416080"
  },
  {
    "text": "other thread therefore I can automatically cast this for you and it does the same thing often with nullable",
    "start": "1416080",
    "end": "1422080"
  },
  {
    "text": "types as well now in terms of con constructing a",
    "start": "1422080",
    "end": "1428480"
  },
  {
    "text": "lot of times when you create classes again we try and be concise here you have the Constructor in the actual same",
    "start": "1428480",
    "end": "1436039"
  },
  {
    "text": "line as the name of the class definition right but you also have secondary",
    "start": "1436039",
    "end": "1441159"
  },
  {
    "text": "Constructors so if I want multiple Constructors I can have them we just call them Constructor with a different",
    "start": "1441159",
    "end": "1446440"
  },
  {
    "text": "parameters and then call the base Constructor if you don't have secondary Constructors and you want to do some",
    "start": "1446440",
    "end": "1452360"
  },
  {
    "text": "initialization code you also have that option as well you create this block called init and inside in it you",
    "start": "1452360",
    "end": "1459679"
  },
  {
    "text": "initialize anything you want with the Constructor but again often you find that this isn't really necessary so",
    "start": "1459679",
    "end": "1466960"
  },
  {
    "text": "dependency injection how many of you know dependency injection right dependency injection one of the issues",
    "start": "1466960",
    "end": "1472200"
  },
  {
    "text": "with that is that when I'm initializing code I have to make sure that it's uh",
    "start": "1472200",
    "end": "1479039"
  },
  {
    "text": "you know it's going to be initialized at runtime so often when I declare a type that type has to be nullable when I",
    "start": "1479039",
    "end": "1485120"
  },
  {
    "text": "declare it because I can't initialize it with anything we have things for that for instance late in it which is a",
    "start": "1485120",
    "end": "1491159"
  },
  {
    "text": "modifier which I can say you know customer so V customer and uh and that",
    "start": "1491159",
    "end": "1498720"
  },
  {
    "text": "would just um instead of well the syntax doesn't matter but it's the point being is that you can just say this is a late",
    "start": "1498720",
    "end": "1506159"
  },
  {
    "text": "in it so I don't have to make this nullable I don't have to have explicit code to initialize this in the",
    "start": "1506159",
    "end": "1511520"
  },
  {
    "text": "Constructor and that goes to another level as well with delegation",
    "start": "1511520",
    "end": "1518960"
  },
  {
    "text": "so here is an example of Delegation now I'll show you two examples the other one we'll go back to interfaces typical",
    "start": "1519399",
    "end": "1526840"
  },
  {
    "text": "interfaces that you're all used to I have a repository and then I have of type a generic type record get by ID",
    "start": "1526840",
    "end": "1533679"
  },
  {
    "text": "that returns a t or get all that returns list of T the most incorrect ever",
    "start": "1533679",
    "end": "1539440"
  },
  {
    "text": "implementation of repositories but that's what we all see in the wild and then I have a customer a controller",
    "start": "1539440",
    "end": "1546480"
  },
  {
    "text": "class that takes a repository now normally what you would do here is this",
    "start": "1546480",
    "end": "1552440"
  },
  {
    "text": "would be declared here and then you would say you know repository V private",
    "start": "1552440",
    "end": "1559840"
  },
  {
    "text": "field uh equals repository right initialize that and I would have to put",
    "start": "1559840",
    "end": "1565679"
  },
  {
    "text": "that in some in it or whatever in cin we have first class",
    "start": "1565679",
    "end": "1571000"
  },
  {
    "text": "delegation so what we say is that this value is kind of mixed into this class and",
    "start": "1571000",
    "end": "1577159"
  },
  {
    "text": "delegated to whatever is passed in here as a parameter so notice that I have",
    "start": "1577159",
    "end": "1583520"
  },
  {
    "text": "this function get all and I have get by ID and I'm not",
    "start": "1583520",
    "end": "1588960"
  },
  {
    "text": "prefixing that with any field I'm not doing my private repository field. get",
    "start": "1588960",
    "end": "1596200"
  },
  {
    "text": "old my private reposer field. getet by ID because it's represented by this line",
    "start": "1596200",
    "end": "1602080"
  },
  {
    "text": "here it's saying those method calls are coming in from the parameter we're",
    "start": "1602080",
    "end": "1608480"
  },
  {
    "text": "passing in as a Constructor so it's kind of like a mix in if you're familiar with the mixins in Ruby it's mixing in that",
    "start": "1608480",
    "end": "1615440"
  },
  {
    "text": "functionality inside the class right now now the question that might arise here is what happens if I have four different",
    "start": "1615440",
    "end": "1622320"
  },
  {
    "text": "con dependencies being passed in where do I know what method belongs to what",
    "start": "1622320",
    "end": "1627559"
  },
  {
    "text": "get yourself a nice IDE kidding though if you have four normally that is another sign which is",
    "start": "1627559",
    "end": "1634200"
  },
  {
    "text": "that class is probably coordinating too much so you need to break that issue down in a different way right don't pass",
    "start": "1634200",
    "end": "1640320"
  },
  {
    "text": "in too many dependencies into your classes otherwise they still become God classes",
    "start": "1640320",
    "end": "1646080"
  },
  {
    "text": "right now we've talked about constructing what about deconstructing deconstructing again we have things to",
    "start": "1646080",
    "end": "1652840"
  },
  {
    "text": "try and make it more readable and more expressive so here for instance I have a",
    "start": "1652840",
    "end": "1658080"
  },
  {
    "text": "function that returns a pair initially we used to have tuples so you or topples so you have you know tles of three",
    "start": "1658080",
    "end": "1664559"
  },
  {
    "text": "values of four or five then we reduced it to two pairs and triples and anything",
    "start": "1664559",
    "end": "1670279"
  },
  {
    "text": "beyond that a data class because once you hit more than two or three parameters you lose the semantics of",
    "start": "1670279",
    "end": "1676399"
  },
  {
    "text": "what you're trying to do so if you need more than three values revert to a data",
    "start": "1676399",
    "end": "1681640"
  },
  {
    "text": "class which is very easy to Define but here I'm returning a pair how do I give that some semantic meaning so",
    "start": "1681640",
    "end": "1689640"
  },
  {
    "text": "I could do something like four element in elements print line element first and second that doesn't give me insight into",
    "start": "1689640",
    "end": "1696000"
  },
  {
    "text": "what that first and second element is but I can deconstruct and I can say for",
    "start": "1696000",
    "end": "1701440"
  },
  {
    "text": "City Country in elements then print country print City very similar to what you encounter in JavaScript okay",
    "start": "1701440",
    "end": "1708919"
  },
  {
    "text": "okay and you can do the same when you're creating a type or anything and now in fact cotlin also has throwaway variables",
    "start": "1708919",
    "end": "1716440"
  },
  {
    "text": "so if you've ever played with hll for instance you can actually deconstruct things and some of",
    "start": "1716440",
    "end": "1724440"
  },
  {
    "text": "the the values that you're getting you're not using instead of getting hints that this variable is not used by",
    "start": "1724440",
    "end": "1730960"
  },
  {
    "text": "the IDE I can just use the underscore saying I don't care about this value right",
    "start": "1730960",
    "end": "1739399"
  },
  {
    "text": "how many of you love the Singleton pattern how many of you know how to",
    "start": "1740799",
    "end": "1746600"
  },
  {
    "text": "implement the Singleton pattern how many of you have to look it up every time you implement the single pattern oh come on",
    "start": "1746600",
    "end": "1752679"
  },
  {
    "text": "be honest if you are if you know the Singleton pattern by heart then you are",
    "start": "1752679",
    "end": "1758399"
  },
  {
    "text": "misusing your memory you should use it for something else like Singleton patterns and regular expressions are not",
    "start": "1758399",
    "end": "1765120"
  },
  {
    "text": "something you want to keep in here there's much more valuable things in life I always say that I want to go to",
    "start": "1765120",
    "end": "1771039"
  },
  {
    "text": "my grave without learning regular Expressions so here's a Singleton",
    "start": "1771039",
    "end": "1777600"
  },
  {
    "text": "pattern in cotlin it's just an object because in cotlin we have the concept of",
    "start": "1777600",
    "end": "1783080"
  },
  {
    "text": "object as a first class citizen so you don't only you don't need to create a class and then make sure that the",
    "start": "1783080",
    "end": "1788279"
  },
  {
    "text": "Constructor can only be invoked once and it's a private Constructor blah blah blah you just declare an object now I'm",
    "start": "1788279",
    "end": "1794159"
  },
  {
    "text": "not saying that this means you should all go and create Singleton patterns they're not that great if they read only",
    "start": "1794159",
    "end": "1799320"
  },
  {
    "text": "they're fine if they mutate state they're not so good again but it goes down to trying",
    "start": "1799320",
    "end": "1805200"
  },
  {
    "text": "make things as concise as possible right okay now here's some things that",
    "start": "1805200",
    "end": "1810640"
  },
  {
    "text": "you probably haven't seen because a lot of these things you can see in multiple uh languages and as",
    "start": "1810640",
    "end": "1817679"
  },
  {
    "text": "I said at the very beginning cotlin is inspired by many things right but one",
    "start": "1817679",
    "end": "1824159"
  },
  {
    "text": "thing that we have is extensions",
    "start": "1824159",
    "end": "1828600"
  },
  {
    "text": "so what does this function do that function is hello can you see okay at",
    "start": "1832159",
    "end": "1838159"
  },
  {
    "text": "the back there it's a little bit late for me to ask you now but anyway wait I I'll ask you in 10 minutes",
    "start": "1838159",
    "end": "1845279"
  },
  {
    "text": "um what does that do that is a function hello except it's prefix with string.",
    "start": "1845279",
    "end": "1852919"
  },
  {
    "text": "DOT what does that mean well actually what it's doing is extending the string",
    "start": "1852919",
    "end": "1858120"
  },
  {
    "text": "class with a new function right so I can come and in my",
    "start": "1858120",
    "end": "1863559"
  },
  {
    "text": "main I can say this is me. hello now any string",
    "start": "1863559",
    "end": "1873039"
  },
  {
    "text": "class has that function this is me. hello well hello right the extension",
    "start": "1873039",
    "end": "1879159"
  },
  {
    "text": "function is similar if you know C it's the same concept to C they call the method extensions although in C you have",
    "start": "1879159",
    "end": "1885080"
  },
  {
    "text": "to create a class with a static class and a static method and then pass in this as the first parameter here you just prefix it with the name of the",
    "start": "1885080",
    "end": "1892279"
  },
  {
    "text": "class I can access the instance of the class I'm",
    "start": "1892279",
    "end": "1898000"
  },
  {
    "text": "extending I can pass in parameters to the class I'm extending",
    "start": "1898000",
    "end": "1903039"
  },
  {
    "text": "right now watch this this is",
    "start": "1903039",
    "end": "1908519"
  },
  {
    "text": "Joe this should equal this if we come here that's understandable because I'm",
    "start": "1908519",
    "end": "1914240"
  },
  {
    "text": "saying should equal takes a value and Compares it to the actual instance and",
    "start": "1914240",
    "end": "1920679"
  },
  {
    "text": "in fact this could be simplified like that right but it's got",
    "start": "1920679",
    "end": "1925960"
  },
  {
    "text": "this other little thing here called infix and that allows me to call it in this",
    "start": "1925960",
    "end": "1931880"
  },
  {
    "text": "way this should equal this right one of the key things we",
    "start": "1931880",
    "end": "1937639"
  },
  {
    "text": "wanted to accomplish with cotlin was the ability to create dsls easily dsls that you can create easily simply in your",
    "start": "1937639",
    "end": "1944639"
  },
  {
    "text": "subdomain and use them without having to understands or a whole bunch of language",
    "start": "1944639",
    "end": "1951279"
  },
  {
    "text": "um Theory and some of these things that you'll see now are what allow us to have",
    "start": "1951279",
    "end": "1958000"
  },
  {
    "text": "this ability okay so the extension functions allow me",
    "start": "1958000",
    "end": "1965080"
  },
  {
    "text": "to extend any class I can extend the Java class I can extend uh cink class with any",
    "start": "1965080",
    "end": "1971519"
  },
  {
    "text": "functionality that I want the infix allows me to create an a function that",
    "start": "1971519",
    "end": "1976720"
  },
  {
    "text": "can be called an infix notation as long as it's a function that uh is an",
    "start": "1976720",
    "end": "1982080"
  },
  {
    "text": "extension function or a member function that has a single",
    "start": "1982080",
    "end": "1987200"
  },
  {
    "text": "parameter now the standard Library comes with a whole bunch of things so here for",
    "start": "1988760",
    "end": "1994120"
  },
  {
    "text": "instance I create and again look at the inference in cotlin you know there there I don't have to be explicit I have a",
    "start": "1994120",
    "end": "1999240"
  },
  {
    "text": "list of albums list of tracks then I have multiple albums nothing around all",
    "start": "1999240",
    "end": "2004279"
  },
  {
    "text": "of this explicitness around types Etc if I want to declare a list I'm number numbers 1 to 30 if I want to declare a",
    "start": "2004279",
    "end": "2011559"
  },
  {
    "text": "an array of words array of and then all of the different typ words capitals list",
    "start": "2011559",
    "end": "2017480"
  },
  {
    "text": "of Madrid to Spain London to UK Berlin to Germany Washington DC to USA what is",
    "start": "2017480",
    "end": "2023799"
  },
  {
    "text": "this to can anybody tell me what is",
    "start": "2023799",
    "end": "2029679"
  },
  {
    "text": "it it's an infix function right where is this defined in",
    "start": "2029679",
    "end": "2035600"
  },
  {
    "text": "the standard Library so instead of me having to do this more",
    "start": "2035600",
    "end": "2041279"
  },
  {
    "text": "explicit Madrid Spain pair this actually creates a pair for me makes it more",
    "start": "2041279",
    "end": "2048638"
  },
  {
    "text": "expressive right and the standard Library comes",
    "start": "2048639",
    "end": "2054158"
  },
  {
    "text": "with a whole bunch of functions so filter filter you know on numbers we",
    "start": "2054159",
    "end": "2060000"
  },
  {
    "text": "follow the groovy Convention as well that if a Lambda expression consists of a single",
    "start": "2060000",
    "end": "2066079"
  },
  {
    "text": "parameter I can refer to that parameter using it instead of being explicit so I",
    "start": "2066079",
    "end": "2071280"
  },
  {
    "text": "could say you know um my even numbers equals numbers filter and then it would",
    "start": "2071280",
    "end": "2078358"
  },
  {
    "text": "be a function that um you know is divisible by two modulus 2 equal zero so",
    "start": "2078359",
    "end": "2084760"
  },
  {
    "text": "the pairs but first of all in cotlin each of these fun a Lambda expression this is a",
    "start": "2084760",
    "end": "2091679"
  },
  {
    "text": "Lambda expression right that's how you do a Lambda expression in cin it could be multi-line right",
    "start": "2091679",
    "end": "2099520"
  },
  {
    "text": "and if the first parameter is if it's a single parameter I can replace the",
    "start": "2100200",
    "end": "2105320"
  },
  {
    "text": "explicit definition of it explicit decoration of it with it so that's where",
    "start": "2105320",
    "end": "2110640"
  },
  {
    "text": "that comes from okay that's like groovy I have all of these functions",
    "start": "2110640",
    "end": "2117640"
  },
  {
    "text": "like map and if you look through the standard Library the majority of these are extension functions on generic types",
    "start": "2117640",
    "end": "2125240"
  },
  {
    "text": "so you get map filter flat map sorted sort bu group buy group all of these",
    "start": "2125240",
    "end": "2130720"
  },
  {
    "text": "different things on all of the different cor collections array list list whatever you want upper case lower case all of",
    "start": "2130720",
    "end": "2137119"
  },
  {
    "text": "these different things this comes all part of the standard",
    "start": "2137119",
    "end": "2141599"
  },
  {
    "text": "Library so the higher order of course I can create my own higher order functions as well so here I have a higher order",
    "start": "2143200",
    "end": "2149680"
  },
  {
    "text": "function a higher order function if you're not familiar with the term we've just used it with filter filter is a higher order function higher order",
    "start": "2149680",
    "end": "2155599"
  },
  {
    "text": "function is a function that takes a function or a function that returns a function right now you know functional",
    "start": "2155599",
    "end": "2160720"
  },
  {
    "text": "programming there you go a higher order function this is a function that takes an integer and an integer and returns an",
    "start": "2160720",
    "end": "2166520"
  },
  {
    "text": "integer right I invoke that I say print line Funk",
    "start": "2166520",
    "end": "2172440"
  },
  {
    "text": "23 how do I call that higher order my sum I can reference functions by name",
    "start": "2173400",
    "end": "2180400"
  },
  {
    "text": "similar to how you can do in Java now on a type so my sum is a function that takes two parameters of type in return",
    "start": "2180400",
    "end": "2187680"
  },
  {
    "text": "are in so matches the pattern that I'm expecting here",
    "start": "2187680",
    "end": "2193640"
  },
  {
    "text": "now one of the things that I showed you around being able to do multi-line with",
    "start": "2193640",
    "end": "2199040"
  },
  {
    "text": "the lambdas one of the benefits that that has is that we try it again not only with the DSL but try and make",
    "start": "2199040",
    "end": "2205160"
  },
  {
    "text": "cotlin extensible as much as possible and how many of you know the try with",
    "start": "2205160",
    "end": "2210280"
  },
  {
    "text": "resources in C there's this thing called using which basically is similar I take an object that is uh I disposal",
    "start": "2210280",
    "end": "2218440"
  },
  {
    "text": "and it automatically disposes it I say using this object open braces do whatever and automatically disposes kind",
    "start": "2218440",
    "end": "2225400"
  },
  {
    "text": "of similar to try with resources I don't have that in Java I don't have that in",
    "start": "2225400",
    "end": "2231119"
  },
  {
    "text": "uh cotlin but it's very easy to create I create a function called using that takes an object that's closable and a",
    "start": "2231119",
    "end": "2238079"
  },
  {
    "text": "body an action and I say try execute that action finally close it off right",
    "start": "2238079",
    "end": "2245800"
  },
  {
    "text": "so when I want to use this I can do something like",
    "start": "2245800",
    "end": "2251119"
  },
  {
    "text": "using my closable done right and it looks like it's a",
    "start": "2251119",
    "end": "2259079"
  },
  {
    "text": "keyword right it looks like it's part of the language it looks like it's a construct of the language but it",
    "start": "2259079",
    "end": "2264520"
  },
  {
    "text": "essentially isn't it's just a function and if you're familiar with a synchronous programming uh ARX Java the",
    "start": "2264520",
    "end": "2273040"
  },
  {
    "text": "keywords in C around the syn await we all of we have all of those in cin as well they're called co-routines it's",
    "start": "2273040",
    "end": "2280000"
  },
  {
    "text": "implemented in a generic way called co-routines and none of the solutions a Synco or any of these things that we",
    "start": "2280000",
    "end": "2287160"
  },
  {
    "text": "provide yield if you're familiar with the with the keyword yield they're not part of the language they're just",
    "start": "2287160",
    "end": "2293760"
  },
  {
    "text": "functions but because of the some of the conventions and the abilities that we have with cotlin it feels like it's part",
    "start": "2293760",
    "end": "2300240"
  },
  {
    "text": "of the",
    "start": "2300240",
    "end": "2302520"
  },
  {
    "text": "language so what else sequences a lot of the things that you",
    "start": "2305359",
    "end": "2311079"
  },
  {
    "text": "saw like when I take a list of numbers and I do a filter and then I do a map that's all eager evaluation that means",
    "start": "2311079",
    "end": "2316839"
  },
  {
    "text": "it's going to go through the entire list it's going to evaluate everything and then it's going to print out the results",
    "start": "2316839",
    "end": "2322079"
  },
  {
    "text": "a lot of times now we want to work with lazy evaluation which means basically process data until we find what we're",
    "start": "2322079",
    "end": "2327680"
  },
  {
    "text": "looking for and then discard the rest you can do that in Java with streams in cotland it used to be called streams and",
    "start": "2327680",
    "end": "2334040"
  },
  {
    "text": "then because of java coming out with streams we kind of changed it and we call it sequences so now I can take any",
    "start": "2334040",
    "end": "2341079"
  },
  {
    "text": "collection and say as sequence and as soon as I do that any operation after that becomes lazy so it's lazily",
    "start": "2341079",
    "end": "2349400"
  },
  {
    "text": "evaluated okay and last but not least in terms of coding algebraic data",
    "start": "2349400",
    "end": "2356760"
  },
  {
    "text": "types okay so if you're familiar with",
    "start": "2356760",
    "end": "2361800"
  },
  {
    "text": "this this is very common in s languages such as hasal for instance an algebraic",
    "start": "2364720",
    "end": "2370160"
  },
  {
    "text": "data type is essentially a type that could be of one type or another type Boolean for instance right here I have a",
    "start": "2370160",
    "end": "2376880"
  },
  {
    "text": "page result that can be a type success or a type error so you see that the",
    "start": "2376880",
    "end": "2382440"
  },
  {
    "text": "class success inherits from page results the class error inherits from page result if it's successful I want my",
    "start": "2382440",
    "end": "2389359"
  },
  {
    "text": "class to contain some property called s the URL if it's an error I want it to return have a code and a message now",
    "start": "2389359",
    "end": "2398319"
  },
  {
    "text": "forget this seal World sealed word here I'll tell you what that is so now when I",
    "start": "2398319",
    "end": "2403880"
  },
  {
    "text": "do like when I do calling page result",
    "start": "2403880",
    "end": "2410160"
  },
  {
    "text": "equals get page now when the result is Success Print line URL and again notice",
    "start": "2410160",
    "end": "2417440"
  },
  {
    "text": "that this has automatically casted to the return type when the result is error",
    "start": "2417440",
    "end": "2423240"
  },
  {
    "text": "print line message right it's a much nicer cleaner way to do right code",
    "start": "2423240",
    "end": "2429920"
  },
  {
    "text": "because I don't have to return an object that has everything whether it's a result successful or an error and then",
    "start": "2429920",
    "end": "2436319"
  },
  {
    "text": "say if error on that property then you know make use of these properties if not",
    "start": "2436319",
    "end": "2441480"
  },
  {
    "text": "make use of those other properties so this is just basically a subass of the type page result what's",
    "start": "2441480",
    "end": "2448240"
  },
  {
    "text": "the sealed keyword in here that's saying that this is it in a hierarchical way no",
    "start": "2448240",
    "end": "2453400"
  },
  {
    "text": "other class is ever going to be inherited from page results yes defa",
    "start": "2453400",
    "end": "2460079"
  },
  {
    "text": "no that's different that's open so open by default it's final right sealed means",
    "start": "2460079",
    "end": "2468560"
  },
  {
    "text": "that no other class outside of these two are going to be inheriting from page result so it's limiting this the the The",
    "start": "2468560",
    "end": "2476440"
  },
  {
    "text": "Inheritance scope right now up to cotlin 1.0 you had to Define it as part of the",
    "start": "2476440",
    "end": "2483480"
  },
  {
    "text": "the class so like a a child class but now you can actually put it inside the",
    "start": "2483480",
    "end": "2489400"
  },
  {
    "text": "same file as long as it's inside the same file it's okay and if you combine this all of the",
    "start": "2489400",
    "end": "2496800"
  },
  {
    "text": "condition all of the conditional statements like if when Etc they all return they can be used as Expressions",
    "start": "2496800",
    "end": "2502920"
  },
  {
    "text": "as well so if I say return right because it's not I mean I",
    "start": "2502920",
    "end": "2508119"
  },
  {
    "text": "have to um you see it says add else Branch or add remaining Branch because I well I I don't even",
    "start": "2508119",
    "end": "2515240"
  },
  {
    "text": "have a return type but if you use it as a um return value if you return a value from the when then it becomes an",
    "start": "2515240",
    "end": "2520760"
  },
  {
    "text": "exhaustive check because then it'll say you know you're not taking into account all of the different",
    "start": "2520760",
    "end": "2526400"
  },
  {
    "text": "instances okay so that's enough with code let's go back to slides a little bit and just finish off with some things",
    "start": "2526400",
    "end": "2532760"
  },
  {
    "text": "some other things that people are doing anco is if you're doing Android development that's kind of like an DSL",
    "start": "2532760",
    "end": "2538240"
  },
  {
    "text": "for creating views without having to deal with XML Android extensions makes",
    "start": "2538240",
    "end": "2543440"
  },
  {
    "text": "use of some other technology that we have in Cartland which is called the uh plug-in for the compiler so what it does",
    "start": "2543440",
    "end": "2549359"
  },
  {
    "text": "it actually gets information about your elements on your Android forms and",
    "start": "2549359",
    "end": "2556160"
  },
  {
    "text": "statically types them for you so you can refer to them by name without having to do a fine by ID with the string Etc",
    "start": "2556160",
    "end": "2562680"
  },
  {
    "text": "spring boot um spring is a very big advocate of cotlin now they're using it extensively and spring boot now supports",
    "start": "2562680",
    "end": "2569520"
  },
  {
    "text": "cotlin natively and you it has cotlin extensions it makes use of a lot of things Cobalt already mentioned this is",
    "start": "2569520",
    "end": "2576520"
  },
  {
    "text": "a DSL for uh writing build in cotland and of",
    "start": "2576520",
    "end": "2582200"
  },
  {
    "text": "course Gradle recently announced well recently no maybe a year ago announced that now they support cotlin so you can",
    "start": "2582200",
    "end": "2588960"
  },
  {
    "text": "write your gradal scripts in cotland it's called gradal cot Gradle script cotlin instead of using groovy and they",
    "start": "2588960",
    "end": "2596119"
  },
  {
    "text": "recommend cotlin for any new plugins as well coming in 1.1 all of those things",
    "start": "2596119",
    "end": "2602319"
  },
  {
    "text": "are there because 1.1 has already been released for you the next steps go to cotlin l.org TR cotlin l.org",
    "start": "2602319",
    "end": "2609200"
  },
  {
    "text": "and cotlin Coons you can download them offline play with them learn the",
    "start": "2609200",
    "end": "2615520"
  },
  {
    "text": "language books there's a whole bunch of books these are just two these are",
    "start": "2615520",
    "end": "2621000"
  },
  {
    "text": "already published if you're doing cotlin for Android recommend the book on the left cotlin in action I've got an",
    "start": "2621000",
    "end": "2628559"
  },
  {
    "text": "O'Reilly course if you're interested I also have a podcast now called talking cotland self publicity There community",
    "start": "2628559",
    "end": "2636640"
  },
  {
    "text": "is very very large very active very nice um we've got about I think close to",
    "start": "2636640",
    "end": "2642520"
  },
  {
    "text": "7,000 people now on our slack don't tell slack because they don't like open source projects um on the free tier",
    "start": "2642520",
    "end": "2650119"
  },
  {
    "text": "they'll love it on the paid tier of course um so but yeah very active on the slack channel right so you can join the",
    "start": "2650119",
    "end": "2655839"
  },
  {
    "text": "slack Channel and then die with a thousand deaths of slack channels inside slack",
    "start": "2655839",
    "end": "2661000"
  },
  {
    "text": "channels and also I wanted to mention with their permission Tri Fork because they're helping organize this we're",
    "start": "2661000",
    "end": "2667800"
  },
  {
    "text": "having a cotland conference in San Francisco so if you're interested in that that's going to be a two-day event",
    "start": "2667800",
    "end": "2674000"
  },
  {
    "text": "on November the 2nd and third very cheap beautiful it's going to be",
    "start": "2674000",
    "end": "2679519"
  },
  {
    "text": "big I promised I wouldn't do that anyway summary so I hope you get the essence of",
    "start": "2680520",
    "end": "2686599"
  },
  {
    "text": "this that this the goal with this was to be a pragmatic language a lot of the choices that we have made is to make it",
    "start": "2686599",
    "end": "2691640"
  },
  {
    "text": "easy to uh solve some of the problems that we face in Daily development very",
    "start": "2691640",
    "end": "2697040"
  },
  {
    "text": "very easy learning curve the interoperability allows lowrisk adoption because you can add it to your code base",
    "start": "2697040",
    "end": "2704520"
  },
  {
    "text": "gradually you don't need to start with tests you know any Java class can be called from cotlin and any cotlin class",
    "start": "2704520",
    "end": "2710040"
  },
  {
    "text": "can be called from java and this is obviously a very subjective thing but um",
    "start": "2710040",
    "end": "2715400"
  },
  {
    "text": "empirical evidence based on my biases has proven that it is extremely enjoyable by everyone that I ask",
    "start": "2715400",
    "end": "2723240"
  },
  {
    "text": "okay and cotlin is here to stay and this is a very big important an point because we have a lot invested in cotland and we",
    "start": "2723240",
    "end": "2730640"
  },
  {
    "text": "didn't make cotlin to sell Consulting around cotlin or sell programming around",
    "start": "2730640",
    "end": "2737599"
  },
  {
    "text": "cotlin we created cotlin for us for our tooling and our tooling is our main source of income and you know we're",
    "start": "2737599",
    "end": "2745480"
  },
  {
    "text": "going to continue to sell tools and cin has now become one of our tools except we use it ourselves and we give it away",
    "start": "2745480",
    "end": "2752280"
  },
  {
    "text": "free in the hope that you guys will all buy intelligy idea which eventually",
    "start": "2752280",
    "end": "2758880"
  },
  {
    "text": "hopefully and to sum up you know someone tweeted and with their permission I I'm showing it they said he researched",
    "start": "2758880",
    "end": "2765040"
  },
  {
    "text": "cotland last night and then spending the morning looking at mountains of boilerplate java in Android Studio I see why they did it pretty much that that's",
    "start": "2765040",
    "end": "2771960"
  },
  {
    "text": "that's that's a good Summary of why we did this thank",
    "start": "2771960",
    "end": "2776640"
  },
  {
    "text": "you and we have one minute for questions no questions great thank you very",
    "start": "2780000",
    "end": "2785079"
  },
  {
    "text": "M yes so the question is when I extend string where does that how does that",
    "start": "2785079",
    "end": "2791240"
  },
  {
    "text": "impact so essentially as long it's it's based on a package level scope so when",
    "start": "2791240",
    "end": "2796400"
  },
  {
    "text": "you define your package which by default is default package but you can explicitly Define a package in cotlin we",
    "start": "2796400",
    "end": "2802240"
  },
  {
    "text": "follow the same um conventions as Java you know the the death by a thousand",
    "start": "2802240",
    "end": "2807760"
  },
  {
    "text": "subfolders um except you don't need to have them in subfolders uh but it's basically on the",
    "start": "2807760",
    "end": "2813440"
  },
  {
    "text": "scope so when you're inside the IDE if you write like you know string. hello",
    "start": "2813440",
    "end": "2818640"
  },
  {
    "text": "the ID is going to pick it up and say oh there's a hello defined in this package and I'll show you the intellisense then",
    "start": "2818640",
    "end": "2825000"
  },
  {
    "text": "you hit enter and it'll import the package for you right class overrides member function",
    "start": "2825000",
    "end": "2831400"
  },
  {
    "text": "overrides the extension function as well yes a data so the question is static",
    "start": "2831400",
    "end": "2838000"
  },
  {
    "text": "versus instances everything I've done is essentially an a a class as you know it",
    "start": "2838000",
    "end": "2843559"
  },
  {
    "text": "in Java right a data class is a class in Java you have toate create an instance of it um yes I actually didn't show how",
    "start": "2843559",
    "end": "2849880"
  },
  {
    "text": "to create an instance of something Val Val customer equals customer there's no",
    "start": "2849880",
    "end": "2855040"
  },
  {
    "text": "new keyword okay that's how you create an instance right the only thing that's not an instance is object I mean sorry",
    "start": "2855040",
    "end": "2863119"
  },
  {
    "text": "the only thing that you don't create an instance of is object because that's already its own instance Singleton",
    "start": "2863119",
    "end": "2869480"
  },
  {
    "text": "okay yes yeah the question is when would you use Scola when would you use cotlin",
    "start": "2869480",
    "end": "2874599"
  },
  {
    "text": "General answer is if you're happy with Scola there's nothing for you in cotlin simple as that right if you're unhappy",
    "start": "2874599",
    "end": "2881760"
  },
  {
    "text": "with Scola take a look at cotlin Scola is very powerful uh it allows you many",
    "start": "2881760",
    "end": "2887359"
  },
  {
    "text": "things in cotlin we don't we don't allow you to override any um symol Define any",
    "start": "2887359",
    "end": "2893599"
  },
  {
    "text": "operator we limit you in what you can do we do that intentionally so that often",
    "start": "2893599",
    "end": "2900000"
  },
  {
    "text": "we don't end up with the complexity that we that we do so question is around Java",
    "start": "2900000",
    "end": "2905559"
  },
  {
    "text": "with scalar interrupt it's it's very very smooth and don't take our word for it ask on the internet ask on slack it's",
    "start": "2905559",
    "end": "2912240"
  },
  {
    "text": "very very smooth because remember we have when we started we had 10 Years of Legacy code we now have 17 years of java",
    "start": "2912240",
    "end": "2920480"
  },
  {
    "text": "Legacy code like we're dog fooding this every day so we emphasize a lot the",
    "start": "2920480",
    "end": "2927440"
  },
  {
    "text": "interoperability yeah so we're very the question is around the explicitness around the types for functions right",
    "start": "2927440",
    "end": "2933160"
  },
  {
    "text": "function parameters yeah explicit",
    "start": "2933160",
    "end": "2940400"
  },
  {
    "text": "yes yeah no we're explicit around that because that also helps in terms of optimizations and compiler speed",
    "start": "2940640",
    "end": "2947640"
  },
  {
    "text": "times I yeah go ahead last question because I think we got to go",
    "start": "2947640",
    "end": "2954359"
  },
  {
    "text": "yes you can the question is around testing you can use the existing testing Frameworks absolutely in fact there's",
    "start": "2954359",
    "end": "2960960"
  },
  {
    "text": "even more awesome Frameworks one of them is called um spec framework which if",
    "start": "2960960",
    "end": "2966400"
  },
  {
    "text": "you're familiar with Jasmine or um mcka uh is essentially that um and it it",
    "start": "2966400",
    "end": "2973799"
  },
  {
    "text": "allows you to do kind of like a very nice style of testing um it is really really nice why cuz I'm the author well",
    "start": "2973799",
    "end": "2981599"
  },
  {
    "text": "original and um one of the now there's three of us maintaining it so you can see that I can do for example describe a",
    "start": "2981599",
    "end": "2988559"
  },
  {
    "text": "calculator it should return it should return right but I'm going to be completely Fair there's also another one",
    "start": "2988559",
    "end": "2994079"
  },
  {
    "text": "called cotland test which is our competitor he's doing a great job as well the author and that is kind of like",
    "start": "2994079",
    "end": "3000920"
  },
  {
    "text": "an implementation of scholar test in cotlin so that also allow I did not pay",
    "start": "3000920",
    "end": "3007400"
  },
  {
    "text": "for keywords there so that when they do cotlin test spec shows up some some people actually do that um",
    "start": "3007400",
    "end": "3015640"
  },
  {
    "text": "so this is another one right and this this has its own kind of assertion",
    "start": "3015640",
    "end": "3020680"
  },
  {
    "text": "framework right spec doesn't we use ham Crest or a whole bunch of different things um but this does have its own",
    "start": "3020680",
    "end": "3026280"
  },
  {
    "text": "kind of expectations and things right so there's already a lot of stuff around that area one of the things that we're",
    "start": "3026280",
    "end": "3031880"
  },
  {
    "text": "going to do with spec though is we're going to try and decouple completely from junit so that essentially you're",
    "start": "3031880",
    "end": "3036960"
  },
  {
    "text": "going to be able to use spec when you target JavaScript native or jbm right that's it for time I'm here the three",
    "start": "3036960",
    "end": "3043319"
  },
  {
    "text": "days so if you want come around and I'll be happy to answer questions thank you",
    "start": "3043319",
    "end": "3049838"
  }
]