[
  {
    "text": "so originally this talk was titled wrangling the internet of things with hasell and after talking to some people",
    "start": "4520",
    "end": "11400"
  },
  {
    "text": "I got the impression that there were quite a few people who were surprised that we were even running Haskell in",
    "start": "11400",
    "end": "17160"
  },
  {
    "text": "production let alone sort of betting our business on it and talking about the",
    "start": "17160",
    "end": "22320"
  },
  {
    "text": "specific way that we were using Haskell in our vertical maybe it wasn't the best",
    "start": "22320",
    "end": "27480"
  },
  {
    "text": "the best approach so this talk is kind of a step back and showing some lessons",
    "start": "27480",
    "end": "32800"
  },
  {
    "text": "and techniques that we're using to run has in production in a more generic way",
    "start": "32800",
    "end": "38000"
  },
  {
    "text": "so that you can take a step back and see whether has is right for you and see that a lot of the production concerns",
    "start": "38000",
    "end": "45039"
  },
  {
    "text": "typically associated with running a backend or a web application are solved",
    "start": "45039",
    "end": "50079"
  },
  {
    "text": "by hascol now so this talk uh production hll is going to be about the",
    "start": "50079",
    "end": "56039"
  },
  {
    "text": "state-of-the-art today uh how many of you have used hll in the past and we're kind of scared off by the quality or the",
    "start": "56039",
    "end": "64478"
  },
  {
    "text": "immaturity of the tooling things like cabal for example so now the the tooling",
    "start": "64479",
    "end": "72159"
  },
  {
    "text": "required for running hasal and production is actually improved a lot and I want to show you some of the state-of-the-art uh specifically",
    "start": "72159",
    "end": "78520"
  },
  {
    "text": "everything is going to be through the lens of how we're using it at a company uh called helium so this is by no means",
    "start": "78520",
    "end": "84040"
  },
  {
    "text": "the only way to do these things but it shows a relatively uh simple example of things like building code deploying",
    "start": "84040",
    "end": "91439"
  },
  {
    "text": "testing and developing new hasal code so this is through the lens of how we've been running uh hll for a lot of",
    "start": "91439",
    "end": "98960"
  },
  {
    "text": "our backend code at a company called helium uh we've been running it in production for about 12 months and it's",
    "start": "98960",
    "end": "104680"
  },
  {
    "text": "been working really well so I wanted to come out here and share that with all of you uh a bit of anecdotal uh experience",
    "start": "104680",
    "end": "112600"
  },
  {
    "text": "to start the talk with of all of the projects I've worked on our hasal code base has had the lowest defect rate with",
    "start": "112600",
    "end": "119079"
  },
  {
    "text": "the same amount of eort of any project I've work on this is obviously just an anecdotal piece of evidence but it's",
    "start": "119079",
    "end": "125960"
  },
  {
    "text": "been really encouraging for me to see that with the same amount of uh of effort we're able to focus on new",
    "start": "125960",
    "end": "131959"
  },
  {
    "text": "features rather than worrying about breaking existing things it's also been the easiest to refactor of any language",
    "start": "131959",
    "end": "139879"
  },
  {
    "text": "I've used has typically has this reputation that you sort of think about a problem go off you know lock yourself",
    "start": "139879",
    "end": "146800"
  },
  {
    "text": "in a room for a month and then sort of come up with this perfect solution that you never have to change and we don't",
    "start": "146800",
    "end": "153319"
  },
  {
    "text": "really subscribe to that idea at all we change our hosal code all the time we're not afraid to come up with a simple",
    "start": "153319",
    "end": "160120"
  },
  {
    "text": "direct solution that gets us to Market really quickly and rely on the type system to allow us to safely refactor",
    "start": "160120",
    "end": "167560"
  },
  {
    "text": "and change our code over time this has been I think the single biggest surprise",
    "start": "167560",
    "end": "172640"
  },
  {
    "text": "and thing I've been the most excited about is how easy it is to change and evolve our high school code base um uh",
    "start": "172640",
    "end": "180760"
  },
  {
    "text": "it's been really enjoyable as well so going to work and writing hasal is a ton of fun I feel like I'm uh sort of",
    "start": "180760",
    "end": "187799"
  },
  {
    "text": "working with the type system rather than fighting it or wishing that I had something to help me with uh common",
    "start": "187799",
    "end": "193319"
  },
  {
    "text": "defects and somewhat surprisingly we found quality open source libraries for",
    "start": "193319",
    "end": "198680"
  },
  {
    "text": "just about everything we've needed to do for typical web application development deployment backend development so if",
    "start": "198680",
    "end": "205400"
  },
  {
    "text": "you've looked at hll in the past and it's been a while you should take a look again and see that the quality of Open",
    "start": "205400",
    "end": "210760"
  },
  {
    "text": "Source libraries and tooling has really improved a lot in the past three to five years uh specifically we're talking",
    "start": "210760",
    "end": "218239"
  },
  {
    "text": "about this through my perspective on this project which is about 20,000 lines of hasco code we have in production",
    "start": "218239",
    "end": "225040"
  },
  {
    "text": "there's about five of us who are working on our uh our set of applications at any given time and we've got about six",
    "start": "225040",
    "end": "232159"
  },
  {
    "text": "different services that we're running in production about 14 months ago we started working on a web application",
    "start": "232159",
    "end": "239159"
  },
  {
    "text": "that was our first hassle codee that we put into production and that was really successful got the team excited and so",
    "start": "239159",
    "end": "245720"
  },
  {
    "text": "we've been building up more and more of our services in hascol it's been working out really well so specifically we're going to look",
    "start": "245720",
    "end": "253120"
  },
  {
    "text": "at building code so the process necessary to get source code into some executable artifact we'll look at",
    "start": "253120",
    "end": "259840"
  },
  {
    "text": "deploying it so how do we get this hasco code onto our development staging and production uh servers so that uh users",
    "start": "259840",
    "end": "267800"
  },
  {
    "text": "and QA people can actually take a look at it how do we monitor this so it turns out that our monitoring story is very",
    "start": "267800",
    "end": "273960"
  },
  {
    "text": "similar to what you might expect from other languages making sure that we're not using too many resources or that",
    "start": "273960",
    "end": "280600"
  },
  {
    "text": "some userdefined metrics that we've created are within some certain bound we'll look at testing hle code some of",
    "start": "280600",
    "end": "287639"
  },
  {
    "text": "you won't be surprised to hear testing is really fun and uh powerful in Haso and then we'll look at how hll can",
    "start": "287639",
    "end": "294759"
  },
  {
    "text": "change the way we look at solving problems and uh common problems that",
    "start": "294759",
    "end": "299800"
  },
  {
    "text": "face web application developers that you might sort of figure there's no solution to often have really simple types safe",
    "start": "299800",
    "end": "305919"
  },
  {
    "text": "Solutions in hll so first up uh building code how many of you experienced or",
    "start": "305919",
    "end": "311919"
  },
  {
    "text": "heard of the term cabal hell before yeah so a lot of people have experienced this",
    "start": "311919",
    "end": "317280"
  },
  {
    "text": "uh cabal is the uh or at least was the most popular build tool in hasell and it",
    "start": "317280",
    "end": "323479"
  },
  {
    "text": "has a lot of issues and typically these issues arise from things like um having",
    "start": "323479",
    "end": "330319"
  },
  {
    "text": "packages have to be recompiled all the time or slow compile times not being able to get a set of dependencies that",
    "start": "330319",
    "end": "337479"
  },
  {
    "text": "all compiled cleanly together um and so for us in the past 5 months we've had no",
    "start": "337479",
    "end": "344000"
  },
  {
    "text": "cabal hell whatsoever that's cuz we're using a new open-source build tool that for us has completely replaced uh cabal",
    "start": "344000",
    "end": "351759"
  },
  {
    "text": "called stack so if you haven't taken a look at hasal since Stacks come out highly recommend uh taking a look at it",
    "start": "351759",
    "end": "359039"
  },
  {
    "text": "it's Sol basically all of our build issues in 24 hours after we switched to it so this has been a huge Boon for us",
    "start": "359039",
    "end": "366720"
  },
  {
    "text": "so this is an example of converting an existing project that was using cabal",
    "start": "366720",
    "end": "372000"
  },
  {
    "text": "before to stack so we still have a cabal file here which declaratively describes",
    "start": "372000",
    "end": "378199"
  },
  {
    "text": "our project the dependencies how it should be built and so we're going to type stack in it which is going to",
    "start": "378199",
    "end": "384560"
  },
  {
    "text": "create a new stack. emo file which describes how stack is going to build this project typically this just Builds",
    "start": "384560",
    "end": "390720"
  },
  {
    "text": "on the cabal file so we're not duplicating any information then after that we're going to type stack build and",
    "start": "390720",
    "end": "397919"
  },
  {
    "text": "then this will quickly build our project and in our experience our build times using stack compared to cabal are much",
    "start": "397919",
    "end": "404080"
  },
  {
    "text": "better part of the way that stack achieves this is that there's actually three layers of packages the first two",
    "start": "404080",
    "end": "410680"
  },
  {
    "text": "of which are completely immutable so we have our GHC packages that are um",
    "start": "410680",
    "end": "416840"
  },
  {
    "text": "specific to a version of GHC these are Library that ship with GHC and are",
    "start": "416840",
    "end": "422479"
  },
  {
    "text": "version specific so we'll have a directory for GHC 78 a directory for GHC",
    "start": "422479",
    "end": "428199"
  },
  {
    "text": "710 and these are going to be completely immutable and can be shared across all projects on a particular machine then we",
    "start": "428199",
    "end": "435800"
  },
  {
    "text": "have a snapshot directory and this is for libraries that are versioned together so stack allows you to opt in",
    "start": "435800",
    "end": "443919"
  },
  {
    "text": "uh into this set of curated packages called stackage there's about, 1300 packages that are sort of versioned as a",
    "start": "443919",
    "end": "451160"
  },
  {
    "text": "single Atomic unit and they're all known to build and pass tests together and as",
    "start": "451160",
    "end": "457120"
  },
  {
    "text": "it might happen these are 1300 of the most popular H libraries so with a single version number you can get all of",
    "start": "457120",
    "end": "464039"
  },
  {
    "text": "those libraries all building together and you still only have to depend on the ones that are in your cabal file but all",
    "start": "464039",
    "end": "470319"
  },
  {
    "text": "of these get shared across your projects so in a safe way you can reuse these",
    "start": "470319",
    "end": "476520"
  },
  {
    "text": "build artifacts across all of your projects and not have to worry about one project affecting another then there's",
    "start": "476520",
    "end": "483440"
  },
  {
    "text": "another layer which is your Project Specific dependencies so you might rely",
    "start": "483440",
    "end": "488479"
  },
  {
    "text": "on a particular version of the snapshot but if there are specific newer or older",
    "start": "488479",
    "end": "494159"
  },
  {
    "text": "versions of some of those libraries then you can still depend on them in your Project Specific uh directory and you",
    "start": "494159",
    "end": "501120"
  },
  {
    "text": "can also depend on private repositories that are in GitHub or R already in your",
    "start": "501120",
    "end": "507759"
  },
  {
    "text": "project and so this has been huge for us because it's allowed us to spread our project into a lot of smaller projects",
    "start": "507759",
    "end": "515320"
  },
  {
    "text": "and not have to worry about compile times from having to recompile the same dependencies over and over again so in",
    "start": "515320",
    "end": "522560"
  },
  {
    "text": "this example I'm going to show changing a snapshot version from uh 2.22 to 3.15",
    "start": "522560",
    "end": "530760"
  },
  {
    "text": "and this is actually going to not just change the version of all of the snapshot dependencies but also change",
    "start": "530760",
    "end": "536959"
  },
  {
    "text": "the version of the compiler from GHC 78 8 to 710 so we no longer have to",
    "start": "536959",
    "end": "542800"
  },
  {
    "text": "manually make sure that the correct version of GHC is in our path all we have to do is declaratively change the",
    "start": "542800",
    "end": "549480"
  },
  {
    "text": "snapshot uh version that we want and then stack is going to automatically use the appropriate version of GHC and since",
    "start": "549480",
    "end": "556480"
  },
  {
    "text": "we've already built the 3.15 snapshot from another project the compile time to",
    "start": "556480",
    "end": "562440"
  },
  {
    "text": "completely changing 1,300 of our dependencies that we have available using a new version of the compiler only",
    "start": "562440",
    "end": "568920"
  },
  {
    "text": "takes five or six seconds um now I'm going to show you an",
    "start": "568920",
    "end": "574279"
  },
  {
    "text": "example of how we're able to also iteratively develop code uh recompile",
    "start": "574279",
    "end": "579839"
  },
  {
    "text": "the code and interpret it uh for a large project really quickly so here's an",
    "start": "579839",
    "end": "585800"
  },
  {
    "text": "example of a little web app that previously said hello world and without",
    "start": "585800",
    "end": "591200"
  },
  {
    "text": "having to do anything uh this tool that we're using is automatically looking at",
    "start": "591200",
    "end": "596440"
  },
  {
    "text": "our source code noticing when we've made changes reinterpreting it so it's actually using",
    "start": "596440",
    "end": "601959"
  },
  {
    "text": "ghci which is a repple that's used to interpret code instead of compiling it down to machine code so this allows us",
    "start": "601959",
    "end": "609160"
  },
  {
    "text": "to recompile lots of code iteratively and see the result have our web",
    "start": "609160",
    "end": "615200"
  },
  {
    "text": "application automatically reload all really quickly this has been huge for avoiding those really slow edit",
    "start": "615200",
    "end": "624320"
  },
  {
    "text": "build uh investigate cycles that might have taken 3 or 4 minutes before that's",
    "start": "624320",
    "end": "629440"
  },
  {
    "text": "down to one or two seconds which is huge for productivity you know this gets us closer to uh you know a language like",
    "start": "629440",
    "end": "635680"
  },
  {
    "text": "Ruby where developers have been used to this for a long time um that demo uses a library that I",
    "start": "635680",
    "end": "642120"
  },
  {
    "text": "created called ordeal which is just a simple wrapper around ghci which allows",
    "start": "642120",
    "end": "647440"
  },
  {
    "text": "you to efficiently load interpreted code uh and only retype check the parts of",
    "start": "647440",
    "end": "653560"
  },
  {
    "text": "your project that have changed and monitor source code to see when it's changed and automatically reload your",
    "start": "653560",
    "end": "659480"
  },
  {
    "text": "web app or whatever it is your project is when we run stack build we get a",
    "start": "659480",
    "end": "666079"
  },
  {
    "text": "self-contained executable which is really nice for deployment because it means that we don't have to worry about",
    "start": "666079",
    "end": "672000"
  },
  {
    "text": "having any hascal build infrastructure on the machines that are actually going to run our production",
    "start": "672000",
    "end": "678440"
  },
  {
    "text": "environment so we'll look at deploying now so imagine we have an application",
    "start": "678440",
    "end": "684240"
  },
  {
    "text": "that looks something like this we've already compiled our code which has given us a self contained uh binary",
    "start": "684240",
    "end": "691160"
  },
  {
    "text": "called app so this is going to represent our web server or something like that we have some assets a favicon some",
    "start": "691160",
    "end": "697519"
  },
  {
    "text": "JavaScript stylesheet and all we have to do is create a tarball which has all",
    "start": "697519",
    "end": "702600"
  },
  {
    "text": "this information in it let's say that we're going to name this tarball out of uh after a short git Shaw and then on",
    "start": "702600",
    "end": "709959"
  },
  {
    "text": "the machines that we want to deploy to we're going to download this tarball untar it symlink this particular version",
    "start": "709959",
    "end": "717800"
  },
  {
    "text": "of the application into current which is just a pointer that represents the current version of the app we're running",
    "start": "717800",
    "end": "723519"
  },
  {
    "text": "in production and then we restart the app and since we don't actually mutate anything that was on the file system",
    "start": "723519",
    "end": "729839"
  },
  {
    "text": "other than changing a simbl link if there's a problem with this and we need to roll back rolling back only takes a",
    "start": "729839",
    "end": "735560"
  },
  {
    "text": "second we just take the previous version of the app that was running Sim link get",
    "start": "735560",
    "end": "740600"
  },
  {
    "text": "to current and then restart the app again so this allows us to easily deploy",
    "start": "740600",
    "end": "746120"
  },
  {
    "text": "code on machines that are not required to have any H build infrastructure and when we",
    "start": "746120",
    "end": "752279"
  },
  {
    "text": "do deployments we can quickly roll things back if it turns out that there's a problem we don't have to worry about a",
    "start": "752279",
    "end": "757839"
  },
  {
    "text": "deployment mutating existing code since we always leave the old version of the code on the",
    "start": "757839",
    "end": "763639"
  },
  {
    "text": "machine in production under moderate load we've seen our web apps use about 60 megabytes of ram which has been",
    "start": "763639",
    "end": "771279"
  },
  {
    "text": "pretty great for us has has also been great for multi-core scalability so when",
    "start": "771279",
    "end": "777519"
  },
  {
    "text": "you're running a web application each user's request is going to be in a single hascal thread since hcll has",
    "start": "777519",
    "end": "783560"
  },
  {
    "text": "green threads it's no big deal to have tens or hundreds of thousands of these threads and then the runtime is going to",
    "start": "783560",
    "end": "789880"
  },
  {
    "text": "distribute them evenly across all of the cores available on your machine if you want to do data parallelism hll also has",
    "start": "789880",
    "end": "797320"
  },
  {
    "text": "really great facilities for doing things like searching a tree in parallel so this has allowed us to take advantage of",
    "start": "797320",
    "end": "803360"
  },
  {
    "text": "all of the cores that we have available on our machines next we're going to look at",
    "start": "803360",
    "end": "808440"
  },
  {
    "text": "monitoring so we've built and deployed these systems now we want to make sure that both the Haso runtime and whatever",
    "start": "808440",
    "end": "815519"
  },
  {
    "text": "metrics that we've created are behaving as we expect and the story here looks",
    "start": "815519",
    "end": "821320"
  },
  {
    "text": "really similar to how it looks in other languages so there's an open source tool called EKG uh which is similar to Koda",
    "start": "821320",
    "end": "829240"
  },
  {
    "text": "halil's metrics Library if any of you have used Java before and so EKG is going to run a",
    "start": "829240",
    "end": "835959"
  },
  {
    "text": "separate internal only web server that allows you to get a visual representation of runtime statistics and",
    "start": "835959",
    "end": "843079"
  },
  {
    "text": "also allows you to hook up your own gauges and statistics that represent",
    "start": "843079",
    "end": "848920"
  },
  {
    "text": "your domain and expose them to you in a live web app like this there's also a",
    "start": "848920",
    "end": "854839"
  },
  {
    "text": "machine readable Json API so what we've done is we've hooked up all of these metrics to circonus which is the hosting",
    "start": "854839",
    "end": "861880"
  },
  {
    "text": "monitoring solution that we use and so we're able to get alerts if the hash",
    "start": "861880",
    "end": "867000"
  },
  {
    "text": "process uses more CPU or Ram than we expect if it's using less then maybe that means that we're not receiving",
    "start": "867000",
    "end": "873120"
  },
  {
    "text": "traffic U so this really looks the same as it would and you know just about any other language we expose some Json API",
    "start": "873120",
    "end": "880959"
  },
  {
    "text": "that allows our monitoring tools to get at the statistics that we're interested",
    "start": "880959",
    "end": "886199"
  },
  {
    "text": "in for logging this is very similar to other languages as well it's trivial to",
    "start": "886199",
    "end": "891279"
  },
  {
    "text": "log to standard out to a file or to CIS log so we have all of the capabilities",
    "start": "891279",
    "end": "896880"
  },
  {
    "text": "that you'd expect to log time stamp stamps log Source location log stack traces on exceptions uh so this allows",
    "start": "896880",
    "end": "904399"
  },
  {
    "text": "us to quickly get at log information when there's a problem in",
    "start": "904399",
    "end": "909639"
  },
  {
    "text": "production testing code is actually a lot of fun in Haso how many of you have",
    "start": "909639",
    "end": "915000"
  },
  {
    "text": "heard of or use Quick Check before all right so quick check is a property based",
    "start": "915000",
    "end": "921279"
  },
  {
    "text": "testing uh library and it's actually the first one so uh quick check in hasal is",
    "start": "921279",
    "end": "926880"
  },
  {
    "text": "the origin of property based testing and it allows you to instead of writing individual unit tests to talk about",
    "start": "926880",
    "end": "935120"
  },
  {
    "text": "properties of your code that should hold true for all input so imagine that we're trying to sort a reverse a list and we",
    "start": "935120",
    "end": "943279"
  },
  {
    "text": "want to test this instead of having to write 10 examples or if we're lazy one",
    "start": "943279",
    "end": "949040"
  },
  {
    "text": "or two then we can write properties that should hold true for all input to our",
    "start": "949040",
    "end": "954440"
  },
  {
    "text": "function so something like the reverse or the sort function are going to take a list as input and output a list so we",
    "start": "954440",
    "end": "961959"
  },
  {
    "text": "can write properties that should hold true for any input list we don't have to specify or hard code uh some input like",
    "start": "961959",
    "end": "969600"
  },
  {
    "text": "we would in a traditional unit testing way and then quick check is going to Generate random lists so the empty list",
    "start": "969600",
    "end": "976959"
  },
  {
    "text": "a list with one element a list with 100 elements a list with duplicate elements a list with only unique elements and",
    "start": "976959",
    "end": "983519"
  },
  {
    "text": "it's going to come up with all of these counter examples that we're typically too lazy or don't have the time to think",
    "start": "983519",
    "end": "989839"
  },
  {
    "text": "about or we're sort of biased by our human brain to forget to include negative numbers in the list it's going",
    "start": "989839",
    "end": "995920"
  },
  {
    "text": "to do this for us it's going to run however many examples we've asked for and if that property that we've talked",
    "start": "995920",
    "end": "1001959"
  },
  {
    "text": "about fails so a property might be something like sorting the list should preserve the count or if we sort the",
    "start": "1001959",
    "end": "1009800"
  },
  {
    "text": "list we can actually just bruteforce the correctness of that and ensure that each element is less than or equal to the",
    "start": "1009800",
    "end": "1016480"
  },
  {
    "text": "next element same with reversing a list if we reverse the list twice that should be equal to the original list or that's",
    "start": "1016480",
    "end": "1024319"
  },
  {
    "text": "also something that we can Brute Force testing that the first elements now become the last the second elements now",
    "start": "1024319",
    "end": "1030438"
  },
  {
    "text": "become the second to last so now I'm going to show you using this in a bit more of a real world example so let's",
    "start": "1030439",
    "end": "1038120"
  },
  {
    "text": "say that we have some event type which is a data structure that represents events that occur in our system and this",
    "start": "1038120",
    "end": "1045959"
  },
  {
    "text": "is something that we've created and so we're going to write a property that says for all events encoding that event",
    "start": "1045959",
    "end": "1053320"
  },
  {
    "text": "in Json and then decoding it should be the same as the initial event so we've",
    "start": "1053320",
    "end": "1058919"
  },
  {
    "text": "written some code that turns our event into Json and we've written some code that reads Json and spits back an event",
    "start": "1058919",
    "end": "1066640"
  },
  {
    "text": "if the event is valid so all we have to do to write this test is write a function that takes events because we",
    "start": "1066640",
    "end": "1072160"
  },
  {
    "text": "don't care what the specific event is this property should hold true for all events then it returns a Boolean true if",
    "start": "1072160",
    "end": "1078640"
  },
  {
    "text": "the test passes and false if it doesn't and the first time I ran this it",
    "start": "1078640",
    "end": "1084080"
  },
  {
    "text": "turned out that this property failed and the error ends up being here we have",
    "start": "1084080",
    "end": "1091480"
  },
  {
    "text": "some sampled value which is going to be a key in our Json that has a time",
    "start": "1091480",
    "end": "1097200"
  },
  {
    "text": "stamp and so if we look at this particular time stamp we see that it's",
    "start": "1097200",
    "end": "1102440"
  },
  {
    "text": "down to the uh micros uh resolution and if we encode this into Json we actually",
    "start": "1102440",
    "end": "1109440"
  },
  {
    "text": "lose a decimal place here so when we read this back we've actually lost some Precision so this is just some small",
    "start": "1109440",
    "end": "1116480"
  },
  {
    "text": "subcomponent of our larger event this is the kind of bug that had we written manual tests for encoding and decoding",
    "start": "1116480",
    "end": "1124640"
  },
  {
    "text": "this large thing it's very unlikely that we would have come up with this example so even for relatively highlevel tests",
    "start": "1124640",
    "end": "1132320"
  },
  {
    "text": "we're able to find bugs that are really subtle and subcomponents of our data structures and so this might let us know",
    "start": "1132320",
    "end": "1139240"
  },
  {
    "text": "that the particular library that we're using to encode dates into Json only",
    "start": "1139240",
    "end": "1144400"
  },
  {
    "text": "supports at the millisecond resolution or that maybe there's part of the Json",
    "start": "1144400",
    "end": "1149440"
  },
  {
    "text": "standard that we've misrepresented uh or misunderstood so this allows us with",
    "start": "1149440",
    "end": "1154760"
  },
  {
    "text": "really minimal effort I mean we saw the uh the test here is literally one line of code and we can sit here run this",
    "start": "1154760",
    "end": "1160919"
  },
  {
    "text": "overnight run a billion examples of this and find really interesting subtle",
    "start": "1160919",
    "end": "1167360"
  },
  {
    "text": "bugs next next we're going to look at how we can use hll and the type system",
    "start": "1167520",
    "end": "1173799"
  },
  {
    "text": "to solve interesting problems in a concise and elegant",
    "start": "1173799",
    "end": "1180640"
  },
  {
    "text": "way uh the example here is actually encapsulated in an open source library",
    "start": "1180640",
    "end": "1186679"
  },
  {
    "text": "that we have called poster SQL transactional which is available on our GitHub page so you can check that out",
    "start": "1186679",
    "end": "1192520"
  },
  {
    "text": "afterward and the problem we want to solve is that we want to be able to write reusable query and database",
    "start": "1192520",
    "end": "1199679"
  },
  {
    "text": "statements that we can compose together and as we compose those we want to be able to talk about how uh the",
    "start": "1199679",
    "end": "1206320"
  },
  {
    "text": "composition of these should be used within a transaction and then that should become a new component that we",
    "start": "1206320",
    "end": "1212159"
  },
  {
    "text": "can reuse and it turns out that the naive way of solving this actually has a",
    "start": "1212159",
    "end": "1217440"
  },
  {
    "text": "really interesting problem with transactions in typical relational databases like myy girl uh and",
    "start": "1217440",
    "end": "1225480"
  },
  {
    "text": "postgress so let's look at a really simple example first first we're going to write a function called lookup user",
    "start": "1225480",
    "end": "1231600"
  },
  {
    "text": "which is intended to be a reusable query that uh new parts of our application can",
    "start": "1231600",
    "end": "1237320"
  },
  {
    "text": "reuse and can be composed into larger queries so lookup user is going to take",
    "start": "1237320",
    "end": "1242919"
  },
  {
    "text": "an email address and then it's going to call this query first function which is going to execute the query and return",
    "start": "1242919",
    "end": "1250039"
  },
  {
    "text": "the first result it's going to pass in the email address to be substituted and then we've got some inline SQL code",
    "start": "1250039",
    "end": "1257039"
  },
  {
    "text": "which is going to select the appropriate columns from the user account table and",
    "start": "1257039",
    "end": "1262240"
  },
  {
    "text": "then have aware statement on the email address so we're only going to look up users with uh the email address that",
    "start": "1262240",
    "end": "1268600"
  },
  {
    "text": "we've passed in and so let's say that over time we start collecting these",
    "start": "1268600",
    "end": "1274240"
  },
  {
    "text": "reusable queries all is well and good then we want to create a new reusable",
    "start": "1274240",
    "end": "1280080"
  },
  {
    "text": "component that's going to call all three of these inside of a transaction so CZ",
    "start": "1280080",
    "end": "1286000"
  },
  {
    "text": "is going to be the composition of Fu bar and baz and its correctness depends on",
    "start": "1286000",
    "end": "1293080"
  },
  {
    "text": "Fu bar and baz all being run inside of a single transaction so this is great",
    "start": "1293080",
    "end": "1298559"
  },
  {
    "text": "everything is good then later we Implement a function called buzz and",
    "start": "1298559",
    "end": "1304320"
  },
  {
    "text": "things are still okay now we want to create a larger query which is going to",
    "start": "1304320",
    "end": "1310240"
  },
  {
    "text": "first call Cuz inside of a transaction and then inside of that same transaction",
    "start": "1310240",
    "end": "1316400"
  },
  {
    "text": "called Buzz so fizz should be a larger transaction that calls Foo bar baz Buzz",
    "start": "1316400",
    "end": "1324080"
  },
  {
    "text": "all inside of a single transaction and this whole thing uh its correctness is",
    "start": "1324080",
    "end": "1329279"
  },
  {
    "text": "uh dependent on atomically executing all four of these statements so we want to make sure that if any of these fail the",
    "start": "1329279",
    "end": "1336840"
  },
  {
    "text": "whole thing rolls back or if it succeeds the whole thing succeeds and it turns out that there's actually a serious",
    "start": "1336840",
    "end": "1343480"
  },
  {
    "text": "problem with representing the problem this way and that's that Rel ational",
    "start": "1343480",
    "end": "1348880"
  },
  {
    "text": "databases like MySQL and postgress don't support nested transactions like we've",
    "start": "1348880",
    "end": "1354400"
  },
  {
    "text": "generated so what happens if we sort of encode this the naive way is that we",
    "start": "1354400",
    "end": "1360200"
  },
  {
    "text": "generate two begin statements and then two commit statements so the database is going to",
    "start": "1360200",
    "end": "1366080"
  },
  {
    "text": "see the first begin statement which corresponds with the beginning of that outer transaction then it's going to see",
    "start": "1366080",
    "end": "1372279"
  },
  {
    "text": "a begin statement which corresponds with starting the inner transaction the database is going to say I'm already",
    "start": "1372279",
    "end": "1377880"
  },
  {
    "text": "running a trans action so I'm just going to ignore this other begin statement then it sees the commit statement from",
    "start": "1377880",
    "end": "1384320"
  },
  {
    "text": "the inner transaction it says hey I'm running a transaction I'm going to commit that transaction so now we've",
    "start": "1384320",
    "end": "1391120"
  },
  {
    "text": "created a transaction that was begun in the outer transaction and ended in the inner transaction and then we get the",
    "start": "1391120",
    "end": "1398279"
  },
  {
    "text": "commit statement from the outer transaction and the database says oh I'm",
    "start": "1398279",
    "end": "1403320"
  },
  {
    "text": "not running a transaction there's nothing I can commit and if you do this you actually get a warning back from the",
    "start": "1403320",
    "end": "1408720"
  },
  {
    "text": "database so that first begin statement that was ignored it says hey there's already a transaction in progress I'm",
    "start": "1408720",
    "end": "1414520"
  },
  {
    "text": "going to ignore this begin and then when we commit at the end we ignore that so",
    "start": "1414520",
    "end": "1420360"
  },
  {
    "text": "what happens is we actually end up creating a transaction that starts at the begin of the outer transaction and",
    "start": "1420360",
    "end": "1426679"
  },
  {
    "text": "ends at the commit of the inner transaction which means that this is",
    "start": "1426679",
    "end": "1432279"
  },
  {
    "text": "going to commit and then if there's an error Buzz might not be executed or",
    "start": "1432279",
    "end": "1437360"
  },
  {
    "text": "might be executed not atomically with the rest of this so it turns out that",
    "start": "1437360",
    "end": "1442760"
  },
  {
    "text": "this sort of naive uh formulation where each component talks about transactions",
    "start": "1442760",
    "end": "1448080"
  },
  {
    "text": "on its own doesn't actually have the semantics we want and if we're not careful we can accidentally write code",
    "start": "1448080",
    "end": "1453559"
  },
  {
    "text": "that does this and has really interesting and hard defined failure cases so we have two choices here we can",
    "start": "1453559",
    "end": "1462000"
  },
  {
    "text": "either not wrap cuz inside of a transaction and sort of say that hey I",
    "start": "1462000",
    "end": "1467520"
  },
  {
    "text": "really wish I could W this in a transaction but in order for you to be able to reuse it I shouldn't call it in",
    "start": "1467520",
    "end": "1472720"
  },
  {
    "text": "a transaction uh and so we just have to put a comment and sort of rely on social",
    "start": "1472720",
    "end": "1478840"
  },
  {
    "text": "convention to make sure that this is wrapped inside of a transaction or we can say that b uh CZ is this transaction",
    "start": "1478840",
    "end": "1487840"
  },
  {
    "text": "that sort of must be executed on its own and I'm sorry but it's not a reusable",
    "start": "1487840",
    "end": "1494080"
  },
  {
    "text": "component um and if we look at the types of this it starts to become clear what the problem is so if we add a type",
    "start": "1494200",
    "end": "1501520"
  },
  {
    "text": "signature to our lookup user function we're going to take some connection which represents a connection object to",
    "start": "1501520",
    "end": "1509679"
  },
  {
    "text": "the postgress or mySQL database text value representing the email then we're",
    "start": "1509679",
    "end": "1514720"
  },
  {
    "text": "going to return some IO action that optionally returns a user if a user was",
    "start": "1514720",
    "end": "1519919"
  },
  {
    "text": "found uh uh with that email address in the database then we start creating some",
    "start": "1519919",
    "end": "1526120"
  },
  {
    "text": "more of these so we have a function to create an organization which is going to take a connection in some organization",
    "start": "1526120",
    "end": "1533159"
  },
  {
    "text": "and then maybe a function to add a user to a particular",
    "start": "1533159",
    "end": "1538240"
  },
  {
    "text": "organization then when we compose these together we wrap this in a transaction so this is our sort of reusable query",
    "start": "1538240",
    "end": "1545760"
  },
  {
    "text": "that is made up of subqueries we're explicitly wrapping this in a",
    "start": "1545760",
    "end": "1553360"
  },
  {
    "text": "transaction um the other option that we have is to sort of put this comment and say you know you must wrap this in a",
    "start": "1553360",
    "end": "1559640"
  },
  {
    "text": "transaction because the correctness of this component is dependent on executing",
    "start": "1559640",
    "end": "1565279"
  },
  {
    "text": "these three statements inside of a transaction so this is sort of the uh the hasal code example of you know",
    "start": "1565279",
    "end": "1572399"
  },
  {
    "text": "relying on social convention to do this then when we reuse this somewhere else we wrap this whole thing inside of a",
    "start": "1572399",
    "end": "1578880"
  },
  {
    "text": "transaction and we say first create the user and organization then do something else and we're going to wrap this in a",
    "start": "1578880",
    "end": "1586799"
  },
  {
    "text": "transaction so it turn out that there's a really simple way that we can use types to completely avoid this problem",
    "start": "1586799",
    "end": "1593960"
  },
  {
    "text": "while also allowing us to reuse these components and make sure that they're",
    "start": "1593960",
    "end": "1599799"
  },
  {
    "text": "always run in exactly one transaction and the solution is to change the type of each of these queries",
    "start": "1599799",
    "end": "1606600"
  },
  {
    "text": "so before we took in a connection object some text value which represented the",
    "start": "1606600",
    "end": "1612320"
  },
  {
    "text": "emails and then we immediately return some IO action to be executed which is",
    "start": "1612320",
    "end": "1617399"
  },
  {
    "text": "going to you know in a side- affecting way go out and query the database and so",
    "start": "1617399",
    "end": "1623080"
  },
  {
    "text": "it turns out since we have a lot of functions that take in this connection object we can just alide that entirely",
    "start": "1623080",
    "end": "1629760"
  },
  {
    "text": "um and then instead of returning an IO action we're going to create some new type called PG transaction that doesn't",
    "start": "1629760",
    "end": "1636760"
  },
  {
    "text": "actually execute IO it's just the composition of some queries and so we can return this PG transaction",
    "start": "1636760",
    "end": "1644159"
  },
  {
    "text": "value and then the only way that we give ourselves toer turn a PG transaction",
    "start": "1644159",
    "end": "1649919"
  },
  {
    "text": "value into an IO action is through this one function so if you have some PG transaction just having it doesn't",
    "start": "1649919",
    "end": "1656559"
  },
  {
    "text": "actually do anything that's not going to execute an eio and so the only way that",
    "start": "1656559",
    "end": "1662000"
  },
  {
    "text": "we export to turn a PG transaction value into an IO action is through this run PG",
    "start": "1662000",
    "end": "1668200"
  },
  {
    "text": "transaction function which is going to always wrap the composed PG transaction",
    "start": "1668200",
    "end": "1674120"
  },
  {
    "text": "value in exactly one transaction so we've used types to make sure that we",
    "start": "1674120",
    "end": "1680159"
  },
  {
    "text": "can compose these queries up make sure that as we compose them they'll always be run in one transaction so our code",
    "start": "1680159",
    "end": "1687559"
  },
  {
    "text": "actually looks a lot simpler now we don't have to talk about this connection anymore um we don't have to talk about",
    "start": "1687559",
    "end": "1694679"
  },
  {
    "text": "transactions as we compose things because implicitly when we compose things together to create a new PG",
    "start": "1694679",
    "end": "1701399"
  },
  {
    "text": "transaction value we're always going to be inside of a transaction if we want to do things in two transactions we have to",
    "start": "1701399",
    "end": "1707840"
  },
  {
    "text": "compose compos something call run PG transaction compose another PG transaction value again and then uh call",
    "start": "1707840",
    "end": "1714720"
  },
  {
    "text": "run PG transaction there so if we want things to be in separate transactions we have to be explicit about it so here our",
    "start": "1714720",
    "end": "1722559"
  },
  {
    "text": "create user and organization function becomes a little bit simpler we don't have to talk about wrapping this in a",
    "start": "1722559",
    "end": "1729519"
  },
  {
    "text": "transaction we can safely reuse this set of queries inside of Fu compose that",
    "start": "1729519",
    "end": "1736760"
  },
  {
    "text": "with something else which is going to do another action and then call run PG transaction on this larger composed set",
    "start": "1736760",
    "end": "1743679"
  },
  {
    "text": "of queries and make sure that this entire set of database queries and",
    "start": "1743679",
    "end": "1748720"
  },
  {
    "text": "statements are done in exactly one transaction something else comes out of",
    "start": "1748720",
    "end": "1754600"
  },
  {
    "text": "this which is that if we want we can prevent ourselves from doing long running IO actions inside of a",
    "start": "1754600",
    "end": "1761159"
  },
  {
    "text": "transaction so when you make a transaction against a relational database like postgress or MySQL that",
    "start": "1761159",
    "end": "1767519"
  },
  {
    "text": "takes up resources on the database side and so typically speaking you want to keep your transactions as short as",
    "start": "1767519",
    "end": "1774120"
  },
  {
    "text": "possible you don't want to do things like make some HTTP request inside of a transaction or sleep for 5 minutes",
    "start": "1774120",
    "end": "1781880"
  },
  {
    "text": "accidentally and so if we try and compose a PG transaction value with",
    "start": "1781880",
    "end": "1787440"
  },
  {
    "text": "something that is some slow side effecting thing this actually just fails to type check because not allowed is",
    "start": "1787440",
    "end": "1795399"
  },
  {
    "text": "expected to be a PG transaction value and so we can't compose our create user",
    "start": "1795399",
    "end": "1801279"
  },
  {
    "text": "statement with this slow side effecting thing so if we want to prevent ourselves",
    "start": "1801279",
    "end": "1806559"
  },
  {
    "text": "from accidentally putting some slow side effect en code inside of a transaction",
    "start": "1806559",
    "end": "1812039"
  },
  {
    "text": "that we're intending to keep short we can actually lean on the type system to make sure that we're not accidentally",
    "start": "1812039",
    "end": "1817399"
  },
  {
    "text": "doing side affecting things inside of a transaction if we want to allow ourselves to do that then we can change",
    "start": "1817399",
    "end": "1823480"
  },
  {
    "text": "the types slightly to allow ourselves to do this but we're given the choice and we can actually",
    "start": "1823480",
    "end": "1828760"
  },
  {
    "text": "choose whether we want to be a little bit more expressive in this particular case or if we want to be a little bit",
    "start": "1828760",
    "end": "1834799"
  },
  {
    "text": "safer uh so that was poster SQL transactional uh this is available as an",
    "start": "1834799",
    "end": "1840519"
  },
  {
    "text": "open source Library uh the whole sort of core of the implementation of this is like five lines of code but it's a fun",
    "start": "1840519",
    "end": "1847600"
  },
  {
    "text": "example to throw up on GitHub uh so this is available on our GitHub",
    "start": "1847600",
    "end": "1853840"
  },
  {
    "text": "page so we've now seen how we can build hasle code into an executable statically",
    "start": "1853840",
    "end": "1861679"
  },
  {
    "text": "compiled binary from source code we've seen that modern hasle tooling like stack solves a lot of the problems that",
    "start": "1861679",
    "end": "1869000"
  },
  {
    "text": "we previously had with build tools like cabal we can in a declarative way talk",
    "start": "1869000",
    "end": "1874440"
  },
  {
    "text": "about the specific version of the compiler we want we don't have to muck with the path or deal with dependency",
    "start": "1874440",
    "end": "1880240"
  },
  {
    "text": "resolution hell it's easy to deploy our code since we're just producing statically compiled binaries like you",
    "start": "1880240",
    "end": "1887000"
  },
  {
    "text": "would with c year ago all we have to do is unpack a tar ball and then run the",
    "start": "1887000",
    "end": "1892399"
  },
  {
    "text": "executable on some machine with the same architecture we don't even have to have the hasco compiler or anything like that",
    "start": "1892399",
    "end": "1898760"
  },
  {
    "text": "on the machines that we're going to run so you could actually uh distribute an executable to all of your users and not",
    "start": "1898760",
    "end": "1905039"
  },
  {
    "text": "have to worry about them having anything related to hasal installed monitoring hasal code is much the same as with",
    "start": "1905039",
    "end": "1912559"
  },
  {
    "text": "other languages we have a tool called EKG which is an open source tool that allows us to get introspection both",
    "start": "1912559",
    "end": "1919440"
  },
  {
    "text": "human readable and Via ajon API into the hasal runtime and whatever custom",
    "start": "1919440",
    "end": "1925360"
  },
  {
    "text": "metrics we want testing is also fun and easy with quick check which allows us to",
    "start": "1925360",
    "end": "1931360"
  },
  {
    "text": "quickly write powerful tests that can be run for as long as we have the CPU time",
    "start": "1931360",
    "end": "1936679"
  },
  {
    "text": "and the patients to run we don't have to worry about manually coming up with unit tests that we want to test and specific",
    "start": "1936679",
    "end": "1943960"
  },
  {
    "text": "examples where we're sort of left to our own imagination to make sure that we remember to test with the empty list and",
    "start": "1943960",
    "end": "1951080"
  },
  {
    "text": "negative one or some particular Unicode character and then we've seen how we can",
    "start": "1951080",
    "end": "1956200"
  },
  {
    "text": "use the type system to take a simple problem that web application developers",
    "start": "1956200",
    "end": "1962240"
  },
  {
    "text": "May face whether they know it or not and encode a solution in a simple and",
    "start": "1962240",
    "end": "1968399"
  },
  {
    "text": "typesafe way that allows us to continue to compose queries the way we were",
    "start": "1968399",
    "end": "1973880"
  },
  {
    "text": "before while also having the transactional safety and semantics that we",
    "start": "1973880",
    "end": "1979519"
  },
  {
    "text": "intend uh so thank you uh all of the uh the open source libraries I talked about",
    "start": "1979519",
    "end": "1985639"
  },
  {
    "text": "here are on our uh GitHub page the slides for this are on the link below",
    "start": "1985639",
    "end": "1990840"
  },
  {
    "text": "and I think Yao is also going to be posting those up soon uh and I'll be happy to answer any questions thank you",
    "start": "1990840",
    "end": "2000000"
  }
]