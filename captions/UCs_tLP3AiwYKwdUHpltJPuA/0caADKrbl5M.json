[
  {
    "start": "0",
    "end": "68000"
  },
  {
    "text": "Hey. It's another GOTO Unscripted. Welcome. \nI'm Eric Johnson. I'm a Principal Developer  ",
    "start": "14160",
    "end": "19840"
  },
  {
    "text": "Advocate from AWS. Ben Smith, who are you?\nHello, I'm Ben Smith. I'm also a Principal  ",
    "start": "19840",
    "end": "25680"
  },
  {
    "text": "Developer Advocate at AWS.\nBen's a real Principal  ",
    "start": "25680",
    "end": "29960"
  },
  {
    "text": "Developer Advocate.. He knows his stuff. So,   how's your day going, Ben Smith?\nPretty good. Sunny here in England, 4 P.M.. ",
    "start": "32260",
    "end": "39440"
  },
  {
    "text": "Oh, that's kind of a rarity. Right? Okay. \nSo where are you? Tell them where you are?  I'm in Brighton on the south coast of \nEngland, about 50 miles south of London. ",
    "start": "39440",
    "end": "49560"
  },
  {
    "text": "Nice. So, now, you say Brighton, so there's \nno T there. But there's a T in the spelling. ",
    "start": "49560",
    "end": "54920"
  },
  {
    "text": "Yes. And if you're posh, you say,actually.\nI don't know if I'm posh enough for that.  ",
    "start": "54920",
    "end": "62280"
  },
  {
    "text": "I can go to Brighton. And that \nway, you know I'm an American.  Anyway, so we're gonna get started here. Today \nwe're going to be talking about... We're really  ",
    "start": "62280",
    "end": "70880"
  },
  {
    "start": "68000",
    "end": "674000"
  },
  {
    "text": "GOTO Unscripted, which goes anywhere. \nSo we talk about all kinds of things,   like where Ben Smith lives, and how to say \nBrighton the posh way. But we're also going  ",
    "start": "70880",
    "end": "78520"
  },
  {
    "text": "to be talking about Step Functions. Now, for \nfolks who have never heard of Step Functions,  ",
    "start": "78520",
    "end": "83880"
  },
  {
    "text": "they may also be called state machines. Ben, \ncan you kind of fill them in, what is it? ",
    "start": "83880",
    "end": "89159"
  },
  {
    "text": "Sure. I also like to refer to them as workflows, \nbecause I think it maps more easily to day-to-day  ",
    "start": "89160",
    "end": "96640"
  },
  {
    "text": "stuff. Step Functions... Sure. It's a service \non AWS that allows you to create workflows that  ",
    "start": "96640",
    "end": "106400"
  },
  {
    "text": "consist of different steps or different states, \nthat orchestrate pretty much all the other AWS  ",
    "start": "106400",
    "end": "112480"
  },
  {
    "text": "services and actions that are available. It's \nserverless. That's why we're talking about it,  ",
    "start": "112480",
    "end": "117800"
  },
  {
    "text": "right, because we're serverless. It's \nfully managed, it's pay per use, and  ",
    "start": "117800",
    "end": "123320"
  },
  {
    "text": "it's a really great way of building out serverless \napplications that orchestrate other AWS services. ",
    "start": "123320",
    "end": "130440"
  },
  {
    "text": "Okay, so let's kind of get into that for \na second. So this idea of orchestrating  ",
    "start": "130440",
    "end": "135640"
  },
  {
    "text": "any other service on AWS, how does that work?\nSo it works by using the SDK of that service. So  ",
    "start": "135640",
    "end": "144760"
  },
  {
    "text": "let's say you want to invoke a lambda function, \nright? There's an action or a state that you  ",
    "start": "144760",
    "end": "150000"
  },
  {
    "text": "can use to invoke a lambda function. Let's say \nyou want to get the result or the response of that  ",
    "start": "150000",
    "end": "155520"
  },
  {
    "text": "lambda function, and you want to persist that to \na DynamoDB table. Well, then you can use the put  ",
    "start": "155520",
    "end": "161880"
  },
  {
    "text": "object for the DynamoDB action. And you can add \ndecisions or logic. So you can create branches,  ",
    "start": "161880",
    "end": "169360"
  },
  {
    "text": "you can use parallel statements, so you can \nrun these different branches concurrently.  ",
    "start": "169360",
    "end": "175000"
  },
  {
    "text": "You can have dynamic map states. So maybe you \ndon't know how many inputs you're going to have  ",
    "start": "175000",
    "end": "180040"
  },
  {
    "text": "for a particular array, you can make that \ndynamic. So you can run things in parallel  ",
    "start": "180040",
    "end": "185640"
  },
  {
    "text": "dynamically. And you can add fail states, \nyou can catch errors, you can retry errors,  ",
    "start": "185640",
    "end": "191040"
  },
  {
    "text": "and you start to get really robust workflows \nfor building out your serverless applications. ",
    "start": "191040",
    "end": "197480"
  },
  {
    "text": "So what's really cool about workflow Step \nFunctions... And I do the same thing, I kind  ",
    "start": "197480",
    "end": "203519"
  },
  {
    "text": "of change what I'm talking about. What's really \ncool about this workflow... And you hit on a  ",
    "start": "203520",
    "end": "208560"
  },
  {
    "text": "lot of that. I think you call it spaghetti string \ncode. Spaghetti code, spaghetti string, spaghetti  ",
    "start": "208560",
    "end": "227480"
  },
  {
    "text": "code. And I totally see it because I've had code \nthat, you know, it's 30 lines long going, if it's  ",
    "start": "227480",
    "end": "233440"
  },
  {
    "text": "this then do this, if it's this then do this, \nif it's this then do this. And then when I get   it all working, then I have to go back and write \nall the error code. If it's this then do this,  ",
    "start": "233440",
    "end": "242200"
  },
  {
    "text": "but if it's not, or if it failed, or if this... \nAnd then my code just gets loaded, and long,  ",
    "start": "242200",
    "end": "247800"
  },
  {
    "text": "and...you know, like that. And Step Functions \nkind of takes that all out for us, right? ",
    "start": "247800",
    "end": "253360"
  },
  {
    "text": "What you've just described there is orchestration \nas code, right? You're building out a bunch of  ",
    "start": "255040",
    "end": "260959"
  },
  {
    "text": "select, or switch cases, or if else statements \nthat will do different things based on different  ",
    "start": "260960",
    "end": "267120"
  },
  {
    "text": "inputs and outputs. Imagine if you could \nvisualize that as you're building it,  ",
    "start": "267120",
    "end": "272560"
  },
  {
    "text": "right? Because what you're building really is \nan orchestration workflow. So why not use a   service that lets you understand that cognitive \nmodel visually. That's what Step Functions is. ",
    "start": "272560",
    "end": "284039"
  },
  {
    "text": "That's exactly right. It's interesting to \nme... I almost fell over there. So keep an   eye on me. I could fall over. It's interesting \nwhen we talk to folks, some pushback that I've  ",
    "start": "284040",
    "end": "293840"
  },
  {
    "text": "seen in Step Functions is like, I don't want to \ndo all that logic. It's like, but you already  ",
    "start": "293840",
    "end": "300280"
  },
  {
    "text": "are. You're already doing it, you know, in a \nway that... And it's making you do more than  ",
    "start": "300280",
    "end": "306120"
  },
  {
    "text": "that because you have to handle retries, you have \nto handle errors, you have to... Code is logic,   right? And so, people ask me, when should I use \nStep Functions? And we're going to get to that  ",
    "start": "306120",
    "end": "316840"
  },
  {
    "text": "because there's a pretty good answer on that, \nand it gets further along as we've added more  ",
    "start": "316840",
    "end": "321960"
  },
  {
    "text": "to Step Functions. But my answer is, if you find \na lot of the spaghetti code in your functions,  ",
    "start": "321960",
    "end": "329800"
  },
  {
    "text": "or in your lambda functions, if you find yourself \nwriting a lot of logic, I call it routing logic,  ",
    "start": "329800",
    "end": "335520"
  },
  {
    "text": "routing logic versus business logic.\nSo I wanna step back to something you  ",
    "start": "335520",
    "end": "343840"
  },
  {
    "text": "said earlier. So several years ago... And I \nremember that it's all kind of jumbled, it all  ",
    "start": "343840",
    "end": "350639"
  },
  {
    "text": "runs together. Several years ago, it used to be in \na state machine, you had about nine integrations,  ",
    "start": "350640",
    "end": "358440"
  },
  {
    "text": "right? We integrated with DynamoDB, things like \nthat. If you wanted to integrate with anything  ",
    "start": "358440",
    "end": "363760"
  },
  {
    "text": "else, then you had to use a lambda function. \nSo you would invoke a lambda function. It would   use the SDK to talk to something and get that \ninformation back, then kick it back into the  ",
    "start": "363760",
    "end": "372720"
  },
  {
    "text": "workflow. But we changed that. Kind of go \ninto the SDK. I know you talked about it a   little bit earlier. But how does that help?\nSure. So I think it's only been about three  ",
    "start": "373280",
    "end": "383120"
  },
  {
    "text": "years that we've had this feature, right? So \nbefore this feature, you would use something  ",
    "start": "383120",
    "end": "389840"
  },
  {
    "text": "called...we now call it optimized integration. \nSo this could work with things like S3, DynamoDB,  ",
    "start": "389840",
    "end": "396000"
  },
  {
    "text": "lambda, I forget which other ones there are. \nWhat this does is it kind of obfuscates a little  ",
    "start": "397080",
    "end": "403560"
  },
  {
    "text": "bit for you, the parameters that you need to set \nfor the action, right? It's sort of a more tidy,  ",
    "start": "403560",
    "end": "409120"
  },
  {
    "text": "neat way of doing it. But what we found is \nthat developers needed to do way more than  ",
    "start": "409120",
    "end": "414639"
  },
  {
    "text": "use these nine services. They needed to, I \ndon't know, send things to IoT Core, right,  ",
    "start": "414640",
    "end": "420680"
  },
  {
    "text": "spin up the ECS tasks. Pretty much anything that \nyou want to do on AWS, you need to be familiar  ",
    "start": "420680",
    "end": "427600"
  },
  {
    "text": "with the SDK. And so what we found is that \ndevelopers were creating a lambda function, and   in that lambda function, they would pull in the \nrequirement for the SDK, maybe as a layer or in a  ",
    "start": "427600",
    "end": "439200"
  },
  {
    "text": "package dependency, depending on your runtime.\nThey would pull in that SDK, they would write  ",
    "start": "439200",
    "end": "444400"
  },
  {
    "text": "their 10, 20 lines of code to run that SDK action, \nand handle the response. And they would send  ",
    "start": "444400",
    "end": "449560"
  },
  {
    "text": "that response back from their lambda function. \nThey would call that lambda function from Step   Functions, right? So what this means is a few \nthings. The first is that you're getting a cold  ",
    "start": "449560",
    "end": "459360"
  },
  {
    "text": "start if you're triggering that lambda function. \nYou're getting an invocation cost. And you have  ",
    "start": "459360",
    "end": "466719"
  },
  {
    "text": "to wait for that lambda function to return its \nresponse. And you have all this code, this extra  ",
    "start": "466720",
    "end": "472480"
  },
  {
    "text": "code to manage, which really, all you're doing is \ncalling an SDK on another service. You're using  ",
    "start": "472480",
    "end": "477720"
  },
  {
    "text": "the lambda function as a kind of glue code. You've \ngot to manage the security permissions for your   function to be able to do this thing. And you're \nadding complexity to your application. You're  ",
    "start": "477720",
    "end": "487680"
  },
  {
    "text": "adding latency, complexity, and cost, right? And \nthen you're orchestrating that inside a workflow. ",
    "start": "487680",
    "end": "493639"
  },
  {
    "text": "So what we did in the Step Functions team, \nis they made a way for you to call many,  ",
    "start": "493640",
    "end": "499760"
  },
  {
    "text": "many of these other actions and these services \ndirectly from within the Step Functions substrate.  ",
    "start": "499760",
    "end": "505920"
  },
  {
    "text": "So the Step Function service itself is responsible \nfor performing that SDK action. Whether it's  ",
    "start": "505920",
    "end": "512520"
  },
  {
    "text": "spinning up an ECS task or sending a message to an \nIoT Core topic, you still have to configure your  ",
    "start": "512520",
    "end": "520200"
  },
  {
    "text": "workflow with the action permissions required to \ndo that thing. So still nice and secure, but you  ",
    "start": "520200",
    "end": "525960"
  },
  {
    "text": "will eliminate the cold start times required \nfrom lambda, you will eliminate the invocation   costs that might be required from lambda. And \nyou eliminate all those lines of code that you  ",
    "start": "525960",
    "end": "535080"
  },
  {
    "text": "would need to run if you would manage that or \nhandle that using a lambda function. Right?",
    "start": "535080",
    "end": "539440"
  },
  {
    "text": "I remember sitting... I don't know if I've \ntold the story or not, but I was sitting with   Justin Callison, who's in charge of a lot of Step \nFunctions. And when they explained this to me...  ",
    "start": "540320",
    "end": "552480"
  },
  {
    "text": "my jaw physically dropped open. It was like, \nfirst of all, that's brilliant. Whoever went,  ",
    "start": "554680",
    "end": "562320"
  },
  {
    "text": "you know what, let's just use the existing SDK. I \nwas like, oh, my gosh, that's brilliant. Because  ",
    "start": "562320",
    "end": "569560"
  },
  {
    "text": "inside Amazon, when we add features, things like \nthat, the SDKs are automatically updated. One of   the first things updated, right? We have a lot of \nautomated processes wrapped around that. We have  ",
    "start": "569560",
    "end": "577360"
  },
  {
    "text": "Smithy, and we have, you know, things that are \ngoing on there. So that allows or enables Step  ",
    "start": "577360",
    "end": "583040"
  },
  {
    "text": "Functions to just automatically take that.\nAnd the interesting thing here is,   a lot of times we think we're just passing... \nLook, so when I use a transition, here's the  ",
    "start": "583040",
    "end": "591240"
  },
  {
    "text": "JSON. So that configuration you were talking \nabout, when you were talking about the state,   but also inside. You still have to tell \nit, hey, here's the DynamoDB table,  ",
    "start": "591240",
    "end": "599800"
  },
  {
    "text": "either some JSON you'll have to do, just like \nyou would do with a lambda function. But then  ",
    "start": "599800",
    "end": "605720"
  },
  {
    "text": "it handles the signed request to the service, it \nhandles all that, you know, behind the scenes. And  ",
    "start": "605720",
    "end": "612360"
  },
  {
    "text": "it was brilliant. I was like, oh, my gosh, this \nis incredible. I was so excited about it. And it's  ",
    "start": "613800",
    "end": "618920"
  },
  {
    "text": "good to see him do that. And so Step Functions \nwent from seven, nine direct connections to... And  ",
    "start": "618920",
    "end": "626519"
  },
  {
    "text": "you said the number before, what's the number now?\nI think it's 220 services plus, and I think that  ",
    "start": "626520",
    "end": "634640"
  },
  {
    "text": "gives us about 11,000 actions at this point.\nAnd so if you've never seen the workflow studio,  ",
    "start": "634640",
    "end": "642840"
  },
  {
    "text": "and hopefully we'll get a picture of that up, or \nwe'll get a link to it, it's inside of your AWS  ",
    "start": "643640",
    "end": "649920"
  },
  {
    "text": "account, or...and I'm just gonna throw this \nout here, because I've actually been using   quite a bit. If you use App Composer locally in \nyour IDE, you can open a workflow locally and  ",
    "start": "649920",
    "end": "659480"
  },
  {
    "text": "edit it locally. It's pretty cool. So I've \nbeen doing that quite a bit. So check that  ",
    "start": "659480",
    "end": "665160"
  },
  {
    "text": "out. So you could drag those in. And you could \njust search through all this. You could go, oh,   what am I trying to do? I'm trying to put an \nitem in DynamoDB., you know, and there it is.",
    "start": "665160",
    "end": "673560"
  },
  {
    "start": "674000",
    "end": "980000"
  },
  {
    "text": "Well, hang on, we just jumped over a bunch \nof stuff there, some big stuff. Right? Big   launches from back in November. So, going \nback a year, I would imagine there's many  ",
    "start": "674200",
    "end": "685480"
  },
  {
    "text": "people that are not using or don't know about \nthe capabilities of App Composer. It might be   worth explaining that a little bit.\nSo App Composer is... It's just that.  ",
    "start": "685480",
    "end": "695959"
  },
  {
    "text": "It's an Application Composer. And they're doing \nsome really cool stuff. It's going really fast.  ",
    "start": "695960",
    "end": "701160"
  },
  {
    "text": "So they came out... It's very limited. And \nwe knew that. Hey, we're gonna put it out,   see what people think. And what it was is, inside \nyour AWS console, you could open App Composer,  ",
    "start": "701160",
    "end": "710639"
  },
  {
    "text": "and you have this blank canvas. And you would \nhave a selection, mostly serverless selection of  ",
    "start": "710640",
    "end": "716160"
  },
  {
    "text": "services that you could drag and drop. And here's \nwhat's really cool is, when you would drag on...   Let's say I drag on an API gateway. And then I \ndrag on a lambda function. I want to invoke that  ",
    "start": "716160",
    "end": "726800"
  },
  {
    "text": "lambda function from the API gateway. One of the \nreally cool things is that the App Composer will  ",
    "start": "726800",
    "end": "732320"
  },
  {
    "text": "deal... The thing that Ben was just talking about. \nIt will deal with the creating the IAM roles,  ",
    "start": "732320",
    "end": "737720"
  },
  {
    "text": "it will deal with the lambda permissions too.\nBecause an API gateway cannot invoke a lambda  ",
    "start": "737720",
    "end": "743439"
  },
  {
    "text": "function out of the box. You have to give \nit permission, because everything's locked   down. We give privileges. So if you drag it \non there, the minute you connect them with a  ",
    "start": "743440",
    "end": "751600"
  },
  {
    "text": "little connector, I'm doing that if you see \nit, if you connect with a little connector,  ",
    "start": "751600",
    "end": "756839"
  },
  {
    "text": "App Composer creates the... It's very verbose, so \nyou can read it. It creates these connectors for  ",
    "start": "756840",
    "end": "762040"
  },
  {
    "text": "you, that gives you these privileges, hey, \nthey can invoke lambda functions. So they  ",
    "start": "762040",
    "end": "767240"
  },
  {
    "text": "handle that. It also sets up your logging. \nI mean, it does a lot behind the scenes. ",
    "start": "767240",
    "end": "773839"
  },
  {
    "text": "It's like a best practices way of connecting \none service to another. And all it's really  ",
    "start": "773840",
    "end": "780560"
  },
  {
    "text": "doing is building up the infrastructure as \ncode templates that you can copy off and,  ",
    "start": "780560",
    "end": "786040"
  },
  {
    "text": "you know, place into your Git repositories, \nright? And then deploy the application.   It's building up that template for you.\nRight. But now, you don't even have to copy  ",
    "start": "786040",
    "end": "795480"
  },
  {
    "text": "it. It connects locally to your hard drive from \nthe console. So it builds SAM. So if you're not  ",
    "start": "795480",
    "end": "802160"
  },
  {
    "text": "familiar... If you use CDK, we don't support \nthat at the moment. But, you know, keep your   ears open. But it builds a SAM template. And now, \nthis year, and tell me if I'm missing something,  ",
    "start": "802160",
    "end": "814760"
  },
  {
    "text": "but this year, we released a IDE plugin for VS \ncode. So in VS code, if you have the AWS toolbox,  ",
    "start": "814760",
    "end": "826640"
  },
  {
    "text": "and you have a SAM template, up in the top \nright corner, you'll see a little...it's a  ",
    "start": "826640",
    "end": "831840"
  },
  {
    "text": "little iconic, I can't even describe it. \nThere's a little icon at the top right,   that allows you to open that in App Composer. \nAnd then if you have a Step Function in there,  ",
    "start": "831840",
    "end": "841080"
  },
  {
    "text": "and this is what drove this whole point, if you \nhave a Step Function in there, you can say Edit   Step Function, and it brings the workflow studio \nto your desktop. I love it. It's really cool. ",
    "start": "841080",
    "end": "852680"
  },
  {
    "text": "I've not used this much yet. Only way, like, early \ntimes, just before it was launched. You know, we  ",
    "start": "852680",
    "end": "859480"
  },
  {
    "text": "get some early access to things sometimes. What \nthat allows you to do is to have workflow studio  ",
    "start": "859480",
    "end": "866800"
  },
  {
    "text": "in your IDE, with all the same actions that \nyou can search for and browse and drag in,  ",
    "start": "866800",
    "end": "872200"
  },
  {
    "text": "build out your workflow, right?\nThat's right. That's right. So   the interesting thing here is, they're not \nrecreating the workflow editor in the local,  ",
    "start": "872200",
    "end": "883399"
  },
  {
    "text": "they're actually pulling it down. So if \nit changes up here in the console, it gets   updated locally. So yes, it's an exact replica.\nYou know, you were saying how App Composer kind of  ",
    "start": "883400",
    "end": "894000"
  },
  {
    "text": "rearranges your file system for you in real time \nas you're dragging things in. This scared the heck  ",
    "start": "894000",
    "end": "900040"
  },
  {
    "text": "out of me the first time I used it. I opened up \na real project that was already in production and  ",
    "start": "900040",
    "end": "905800"
  },
  {
    "text": "thought, oh, I wonder what happens if I drag this \nover here? My entire template just transforms. ",
    "start": "905800",
    "end": "915519"
  },
  {
    "text": "There's a couple of things that go on... To be \nhonest, that we're working on. One, the other   thing it does, like you said, you drop a lambda \nfunction on what creates the function for you,  ",
    "start": "915520",
    "end": "924639"
  },
  {
    "text": "but it never deletes a function. So let's say, you \nknow what, I don't want that to be node, I want it   to be Python. It's going to create a new lambda \nfunction, change it to Python. Because we don't  ",
    "start": "924640",
    "end": "934000"
  },
  {
    "text": "want to destroy the work you've already done.\nLet's say I create a new node lambda function,  ",
    "start": "934000",
    "end": "941440"
  },
  {
    "text": "it creates an app.js file and the handler \nis ready for me to type into and all of  ",
    "start": "941440",
    "end": "946960"
  },
  {
    "text": "that stuff. That's pretty amazing. I \nneed to check back into, try that out. ",
    "start": "946960",
    "end": "952240"
  },
  {
    "text": "Even over the last...since re:Invent this \nyear, they've come a long way with it. And  ",
    "start": "953320",
    "end": "959080"
  },
  {
    "text": "I have constant conversations... Because I \nuse SAM all the time. I'm not smart enough   to use some of the other ones. But I use SAM \nall the time.They take feedback constantly. So  ",
    "start": "959080",
    "end": "969959"
  },
  {
    "text": "if you have feedback, or something's going on, \nlet me know. Because they automatically start   working on that stuff. So it's a good team, \nand they're working fast to take care of it. ",
    "start": "971200",
    "end": "979560"
  },
  {
    "text": "Let's get back to step functions for a minute. I'm \ngonna ask you a question here, do you think every  ",
    "start": "979560",
    "end": "995960"
  },
  {
    "start": "980000",
    "end": "1185000"
  },
  {
    "text": "single workload should start with step functions?\nI think you need to consider why you wouldn't  ",
    "start": "995960",
    "end": "1004200"
  },
  {
    "text": "start with step functions, right?\nOh, okay.  I always, when I approach a new project or a new \nbuild, I think what's a good reason not to use  ",
    "start": "1004200",
    "end": "1014160"
  },
  {
    "text": "step functions? And it's quite difficult to come \nup with that sometimes. Sometimes you're building   something so simple or something that really \ndoes require a lot of custom code. Maybe it  ",
    "start": "1014160",
    "end": "1024319"
  },
  {
    "text": "doesn't lean into this service-driven approach \nas heavily. That's a good reason perhaps not to  ",
    "start": "1024320",
    "end": "1030399"
  },
  {
    "text": "use step functions, but I think anything that \nis consisting of multiple AWS services that  ",
    "start": "1030400",
    "end": "1037120"
  },
  {
    "text": "need to pass data across each other, I would \nalmost always go with step functions first. ",
    "start": "1037120",
    "end": "1043680"
  },
  {
    "text": "Okay.\nHow about you?  Yeah. So, I used to have this conversation. \nThere's this guy who used to work and his  ",
    "start": "1043680",
    "end": "1049000"
  },
  {
    "text": "name Rob Sutter? Do you remember Rob?\nI know that guy..  Rob's a good guy. And he used to always say, \n\"You should...\" I'm making myself, there we  ",
    "start": "1049000",
    "end": "1058120"
  },
  {
    "text": "go. \"You should always, always use step functions \nregardless.\" And I pushed back on it because when  ",
    "start": "1058120",
    "end": "1064200"
  },
  {
    "text": "he was saying this, we'll kind of dig into some \nof the features of step functions, but when he  ",
    "start": "1064200",
    "end": "1070000"
  },
  {
    "text": "was saying the step functions, there were only \nstandard step functions or standard workflows,  ",
    "start": "1070000",
    "end": "1075760"
  },
  {
    "text": "and you could only invoke them asynchronously.\nSure. ",
    "start": "1075760",
    "end": "1081400"
  },
  {
    "text": "So, at that point, it didn't make sense \nto start with step functions all the time. ",
    "start": "1081400",
    "end": "1087360"
  },
  {
    "text": "Yep. That's a good pushback. But, as you know, \nthose two things, there's different options now,  ",
    "start": "1087360",
    "end": "1093920"
  },
  {
    "text": "right? So, you are talking about invoking \nasynchronously, which is the standard   workflow type, which makes sense why you \nwould invoke them only asynchronously,  ",
    "start": "1093920",
    "end": "1103600"
  },
  {
    "text": "because they can run for up to one year. \nSo, you don't want service blocking hanging   around for that response.\nNo. We'll...yeah. ",
    "start": "1103600",
    "end": "1110800"
  },
  {
    "text": "Exactly. But we've since introduced something \ncalled express workflows, right? Which transitions  ",
    "start": "1110800",
    "end": "1116160"
  },
  {
    "text": "through the stage far more quickly. They only \nrun for up to five minutes. They have a totally  ",
    "start": "1116160",
    "end": "1121760"
  },
  {
    "text": "different billing model, so you're billed based \non how long your workflow takes to complete at a  ",
    "start": "1121760",
    "end": "1127200"
  },
  {
    "text": "different memory allocation. Whereas.standard \nworkflows are about how long or how many  ",
    "start": "1127200",
    "end": "1132840"
  },
  {
    "text": "state transitions your workflow has. So, that's \ngood. So, if you have a workload that does take   years but doesn't have loads and loads of state \ntransitions, then that's a really effective cost  ",
    "start": "1132840",
    "end": "1142360"
  },
  {
    "text": "model. But back to express workflows, I think the \nmajority of step functions that I build are very  ",
    "start": "1142360",
    "end": "1150840"
  },
  {
    "text": "quick, very short duration workflows, right? That \njust transitions through a bunch of AWS services  ",
    "start": "1150840",
    "end": "1157200"
  },
  {
    "text": "really quickly. And so having a cost model that's \nbased on how long your workflow takes to complete  ",
    "start": "1157200",
    "end": "1162840"
  },
  {
    "text": "makes a lot of sense for that. And these are the \nworkflow types that you can invoke synchronously.   So, for example, you can trigger that from an \nAPI gateway call to an endpoint that can run  ",
    "start": "1162840",
    "end": "1173080"
  },
  {
    "text": "your workflow, hang around for 29 seconds, which \nis the API gateway timeout limit, and return  ",
    "start": "1173080",
    "end": "1179240"
  },
  {
    "text": "that response back to the thing that called API \ngateway, right? It's a really nice little pattern.",
    "start": "1179240",
    "end": "1185840"
  },
  {
    "start": "1185000",
    "end": "1448000"
  },
  {
    "text": "In fact, you have a pattern. If you're not \nfamiliar with servers, I know you are but for   those watching, if you're not familiar with \nServerless Land, we have all these patterns  ",
    "start": "1185840",
    "end": "1192560"
  },
  {
    "text": "and workflows out there. You have a pattern out \nthere. I think I do too, but you got it first,  ",
    "start": "1192560",
    "end": "1198320"
  },
  {
    "text": "and yours is better. You have a pattern on using \nan express workflow for a CRUD API, right? Yeah. ",
    "start": "1198320",
    "end": "1208320"
  },
  {
    "text": "I like this idea, right? So, it's a bit against \nsome principles that we speak about sometimes  ",
    "start": "1208320",
    "end": "1215679"
  },
  {
    "text": "because what you're doing with this concept is \nyou're routing any valid API call, so based on  ",
    "start": "1215680",
    "end": "1223320"
  },
  {
    "text": "the path and the domain and the authentication, \nanything that's valid, you route on  ",
    "start": "1223320",
    "end": "1229080"
  },
  {
    "text": "to your workflow. And then the first state \nin your workflow is a choice state that says,  ",
    "start": "1229080",
    "end": "1234480"
  },
  {
    "text": "\"Based on the inbound requests, based on the \nparameters or the body or the method, which one  ",
    "start": "1234480",
    "end": "1240240"
  },
  {
    "text": "of these branches should my workload take?\" And \nso what you're doing really is you're moving that  ",
    "start": "1240240",
    "end": "1246000"
  },
  {
    "text": "routing mechanism into step functions...\nWell done.  ...and taking it away from API gateway. I know \nyou don't like me saying the word routing. ",
    "start": "1246000",
    "end": "1253600"
  },
  {
    "text": "I don't mind it, but I make fun of you every \ntime, and I was ready, but you've...okay. What is  ",
    "start": "1253600",
    "end": "1260039"
  },
  {
    "text": "routing? What is beta? It's the same as beta. For \nyou Americans or for those here, it's routing and  ",
    "start": "1260040",
    "end": "1266200"
  },
  {
    "text": "beta and all those things, but yeah. I agree with \nwhat you're saying, but, again, this pattern of...  ",
    "start": "1266200",
    "end": "1275919"
  },
  {
    "text": "You know, I do API gateway a little bit, right? \nAnd I love API. This pattern of API gateway being  ",
    "start": "1275920",
    "end": "1281440"
  },
  {
    "text": "the front door, and it's gonna...your validations \nthere, all kinds of stuff is happening there, and   then you pass to this step function, and there's \nsome advantages here. It's kind of interesting,  ",
    "start": "1281440",
    "end": "1291039"
  },
  {
    "text": "is, one, there's no cold start with this \nexpress state machine. It's just there.  ",
    "start": "1291040",
    "end": "1296480"
  },
  {
    "text": "It's a running memory. It's fast. Two, you have \nthis drag-and-drop designer that we were talking  ",
    "start": "1296480",
    "end": "1303960"
  },
  {
    "text": "about earlier. And the cool thing is, you do need \na little VTL in API gateway to connect API gateway  ",
    "start": "1303960",
    "end": "1314200"
  },
  {
    "text": "to step functions in just a tiny bit. But both \nSAM and App Composer, because the App Composers  ",
    "start": "1314200",
    "end": "1322360"
  },
  {
    "text": "work on top of SAM, will do that for you.\nSo, you can actually drag API gateway on,   drag your step function in, set it to express, \ntell it and connect it, and off you go. So,  ",
    "start": "1322360",
    "end": "1332360"
  },
  {
    "text": "if you haven't checked that out, it's worth \nchecking out. But, yes, this idea of now that   you can do synchronous, because if you ever hear \nus talk, we're always saying asynchronous whenever  ",
    "start": "1332360",
    "end": "1343960"
  },
  {
    "text": "possible. I still believe that. We are big fans \nof running asynchronously. That gives you a lot  ",
    "start": "1343960",
    "end": "1349320"
  },
  {
    "text": "of grace when you're building an application. If \nsomething goes wrong, you can recover and then get  ",
    "start": "1349320",
    "end": "1354679"
  },
  {
    "text": "the customer back the answer. It saves a lot of \nthings. But there are times when you just have to  ",
    "start": "1354680",
    "end": "1360240"
  },
  {
    "text": "have a synchronous invocation. And so, when they \nopen that up, to me that was kind of like, \"Okay,  ",
    "start": "1360240",
    "end": "1367960"
  },
  {
    "text": "that seals the deal.\" I go to step functions first \nall the time as well. That's the first thing I do,   I open my app composer, I drag my step function \nin, and then how am I gonna invoke it? Well,  ",
    "start": "1367960",
    "end": "1377600"
  },
  {
    "text": "an EventBridge rule or an API gateway or \nsomething like that. And so, Rob Sutter,  ",
    "start": "1377600",
    "end": "1383720"
  },
  {
    "text": "you were ahead of your time. You were wrong then, \nyou're right now, sir. I hope he sees this. I'll   have to make sure he sees this.That's what I love \nabout, again, going directly to step functions. ",
    "start": "1383720",
    "end": "1397320"
  },
  {
    "text": "You mentioned the synchronous, asynchronous \npoint there when you invoke from API gateway,  ",
    "start": "1397320",
    "end": "1405159"
  },
  {
    "text": "and, like, often you'll have something that \nwill be triggered from a webhook, for example,  ",
    "start": "1405160",
    "end": "1410640"
  },
  {
    "text": "where you wanna do some stuff in your AWS account. \nAnd you might wanna use step functions for that,   but you wanna get the acknowledgement that your \nworkflow is running straight away, right? So,  ",
    "start": "1410640",
    "end": "1421720"
  },
  {
    "text": "maybe it's triggering something via Slack or \nsome other tool that you use day-to-day. You   can still do that, right? You can still \ngo API gateway to, I don't know, SQS or  ",
    "start": "1421720",
    "end": "1431640"
  },
  {
    "text": "API gateway direct to step function and return \nthat acknowledgement back to the caller. So,  ",
    "start": "1431640",
    "end": "1437000"
  },
  {
    "text": "I think it's worth pointing out you still have \nthat option as an express workflow as well,  ",
    "start": "1437000",
    "end": "1442840"
  },
  {
    "text": "it's just you get to pick now if you wanna \nrun that synchronously or asynchronously.",
    "start": "1442840",
    "end": "1447480"
  },
  {
    "start": "1448000",
    "end": "1971000"
  },
  {
    "text": "It sends the acknowledgement, all of our \nasynchronous services send it, and you can   do a step function, or, yeah, you could do. \nThat's a really good call out. All right. So,  ",
    "start": "1452000",
    "end": "1459200"
  },
  {
    "text": "Ben Smith, let me ask you this. What's the \ncoolest pattern you like in step functions?  ",
    "start": "1459200",
    "end": "1468360"
  },
  {
    "text": "I'm gonna tell you one in a minute \nthat you did that I love, but go ahead.  There's a couple...\nAnd you're probably gonna take it now. ",
    "start": "1470920",
    "end": "1477799"
  },
  {
    "text": "I think the most powerful one is this concept \nof...this is what I think the cloud is all about  ",
    "start": "1477800",
    "end": "1485280"
  },
  {
    "text": "and what Serverless is all about, is breaking down \nlarge workloads into smaller and smaller pieces  ",
    "start": "1485280",
    "end": "1491200"
  },
  {
    "text": "that you can run concurrently, right?\nYou can wrap your head around too..  So, AWS has the economies of scale and the \nresources to be able to process things in  ",
    "start": "1491200",
    "end": "1501160"
  },
  {
    "text": "parallel in a way that most businesses can't \non their own, right? And with step functions,  ",
    "start": "1501160",
    "end": "1507000"
  },
  {
    "text": "things like the dynamic map state, which allows \nyou to concurrently branch out to 10,000 other  ",
    "start": "1507000",
    "end": "1514040"
  },
  {
    "text": "workflows at the same time, right? That's out \nof the box. That's ready to go. So, if you can  ",
    "start": "1514040",
    "end": "1519360"
  },
  {
    "text": "break down a large task on a video processing, \nfile processing into multiple smaller tasks,  ",
    "start": "1519360",
    "end": "1526559"
  },
  {
    "text": "run them concurrently and then fan back in, so \nyou have the fan out, the parallel execution,  ",
    "start": "1526560",
    "end": "1532120"
  },
  {
    "text": "fan back in, I think this is the fundamental point \nof building applications using cloud services,  ",
    "start": "1532120",
    "end": "1538640"
  },
  {
    "text": "using AWS, and using Serverless. So, this is where \nI think step functions are really the key to the  ",
    "start": "1538640",
    "end": "1543920"
  },
  {
    "text": "whole thing, right? It's orchestrating all of \nthat in a workflow. That's my favorite pattern. ",
    "start": "1543920",
    "end": "1549120"
  },
  {
    "text": "No, and I agree with you. That's super powerful, \nthe distributed map. So, we have an internal  ",
    "start": "1549120",
    "end": "1555280"
  },
  {
    "text": "process that I run. It runs every six hours to do \nfeatures, things like that. And we track stuff,  ",
    "start": "1555280",
    "end": "1562240"
  },
  {
    "text": "and I have to go through probably, you know, not \na lot, really about 1,000 records each time. But  ",
    "start": "1562240",
    "end": "1568200"
  },
  {
    "text": "I can do it in just seconds because I don't go \none then do this, then do this. It's just... So,  ",
    "start": "1568200",
    "end": "1575000"
  },
  {
    "text": "with that...and I'm gonna tell you my favorite. \nI do wanna go back to this. One of the patterns   that I recommend...and I wanna see if \nyou agree, and it's okay if you don't,  ",
    "start": "1575680",
    "end": "1583360"
  },
  {
    "text": "it can be wrong. One of the patterns that I tell \nfolks, going back to the express and standard,  ",
    "start": "1583360",
    "end": "1589200"
  },
  {
    "text": "I always start with express, and I think you were \nkind of leaning for that. And then when I realize   I need standard, I swap it over to standard. \nBecause it's just literally just as easy as, say,  ",
    "start": "1589200",
    "end": "1597000"
  },
  {
    "text": "express type equals standard in ISC. But \none of the cool patterns that I like is  ",
    "start": "1598080",
    "end": "1603519"
  },
  {
    "text": "I'll use an express, and then I'll invoke \nstandards from that express as subs. Oh,  ",
    "start": "1603520",
    "end": "1612480"
  },
  {
    "text": "I'll invoke express ones as well, but this idea \nof kind of having...you're really getting crazy   in this, you have this master controller \nor main controller, and then you invoke  ",
    "start": "1612480",
    "end": "1622520"
  },
  {
    "text": "these little ones. And I think you do that on the \nplugins manager that we're doing with the video. ",
    "start": "1622520",
    "end": "1629800"
  },
  {
    "text": "That's interesting. It's usually the other way \naround that we see people doing it, is having,   like, a master standard workflow that can \nrun for one year, and then that calls out  ",
    "start": "1629800",
    "end": "1639080"
  },
  {
    "text": "to lots of synchronous express workflows. Maybe \nit wants to wait for them to return the response,  ",
    "start": "1639080",
    "end": "1644559"
  },
  {
    "text": "or maybe not. Maybe they're asynchronous. But I \nthink this is another really, really interesting  ",
    "start": "1644560",
    "end": "1650160"
  },
  {
    "text": "pattern, right? Where you are embedding workflows \nwithin workflows, so you're using the durability,  ",
    "start": "1650160",
    "end": "1656000"
  },
  {
    "text": "the state, length of processing for \nup to one year of standard workflows,  ",
    "start": "1656000",
    "end": "1662840"
  },
  {
    "text": "and then you're using the speed and the different \ncost model of the duration-based cost model of  ",
    "start": "1662840",
    "end": "1668240"
  },
  {
    "text": "express workflows. And you can really start \nto grind out a really cost-effective model  ",
    "start": "1668240",
    "end": "1674040"
  },
  {
    "text": "when you start using these two things together.\nThat's what I recommend, is start with express,  ",
    "start": "1674040",
    "end": "1680840"
  },
  {
    "text": "and then when you need standard...and sometimes \nthat standard, and especially if you're doing   an express, you know, asynchronously, that \nstandard...like, so one of the features that  ",
    "start": "1680840",
    "end": "1691480"
  },
  {
    "text": "are in standard but not express is the wait \nfor token, right? So, maybe I kick that off  ",
    "start": "1691480",
    "end": "1697120"
  },
  {
    "text": "asynchronously and move on, and it completes \nthat up. So, I only have one state, one or   two transitions in that standard, so I'm saving \nsome money there, and my express is moving on. ",
    "start": "1697120",
    "end": "1706400"
  },
  {
    "text": "That's my other favorite pattern, is this wait \nfor task token. So, what that allows you to do is  ",
    "start": "1708560",
    "end": "1714400"
  },
  {
    "text": "to get to a step, and that step will do whatever \nit needs to do. So, let's say that it's putting  ",
    "start": "1714400",
    "end": "1719560"
  },
  {
    "text": "something onto an event bus. Now, if you also \nchoose to use this wait for task token pattern,  ",
    "start": "1719560",
    "end": "1726320"
  },
  {
    "text": "then along with whatever payload it puts onto your \nevent bus, it will also generate a unique task  ",
    "start": "1726320",
    "end": "1732159"
  },
  {
    "text": "token, and what that means is that your workflow \nwill now pause at that state until it's told to  ",
    "start": "1732160",
    "end": "1739040"
  },
  {
    "text": "resume. And the way you resume it is whenever that \npayload is triggered, whatever it needs to trigger  ",
    "start": "1739040",
    "end": "1745680"
  },
  {
    "text": "and that thing is finished, you grab that task \ntoken that hopefully you've stored somewhere,  ",
    "start": "1745680",
    "end": "1750720"
  },
  {
    "text": "and you use an SDK to go back to the workflow and \nsay, \"Okay, you can move on to the next step,\" or  ",
    "start": "1750720",
    "end": "1756200"
  },
  {
    "text": "throw an error and move on to a different step, \nright? And so this way we're able to use human  ",
    "start": "1756200",
    "end": "1761600"
  },
  {
    "text": "approval steps, even multiple human approval \nsteps, right? Maybe you have a process with lots   of gates, with lots of different people who need \nto approve. Maybe one of them is a master approver  ",
    "start": "1761600",
    "end": "1770880"
  },
  {
    "text": "that supersedes the others, and you can build \nall of this in using this simple...I think it's   fairly simple to wait for a task token pattern.\nOnce you wrap your head around it, and when you  ",
    "start": "1770880",
    "end": "1781200"
  },
  {
    "text": "first look at it, it's like, \"Oh,\" but then \nwhen it clicks, it's like, \"That's the coolest   thing ever.\" I used it...we built something for \nreinvent for the video processing we're talking  ",
    "start": "1781200",
    "end": "1791399"
  },
  {
    "text": "about, and I built a plugin, and my plugin was \nusing AI through Adobe. It actually is calling  ",
    "start": "1791400",
    "end": "1797120"
  },
  {
    "text": "Adobe endpoint and doing some stuff, and so I \nhad to wait for it. And this is probably the  ",
    "start": "1797120",
    "end": "1803080"
  },
  {
    "text": "first time I'd ever actually used a task token \nin, like, a true...I use obviously conceptually,   and so it was just really cool. So I saved the \ntoken, and I saved the Adobe job in DynamoDB,  ",
    "start": "1803080",
    "end": "1812960"
  },
  {
    "text": "so when the job came back, then I could \nmap to the thing, and then I just kicked   it off again. It was pretty slick. I love it.\nSo, that thing you've built that was using  ",
    "start": "1813720",
    "end": "1824600"
  },
  {
    "text": "Adobe to generate thumbnails using all sorts of \ninteresting filters as a JSON file, right? So,  ",
    "start": "1824600",
    "end": "1832000"
  },
  {
    "text": "you were posting out to Adobe from your workflow, \nwaiting for that response. I think you gave them a  ",
    "start": "1832000",
    "end": "1837280"
  },
  {
    "text": "signed URL on S3 for them, right?\nI did.   So, that thumbnail gets uploaded to S3. The task \ntoken is then used to resume the workflow. I  ",
    "start": "1837280",
    "end": "1847240"
  },
  {
    "text": "think it's a really neat pattern and building...\nIt is. And it is super powerful for those pauses  ",
    "start": "1847240",
    "end": "1853080"
  },
  {
    "text": "or for the waiting, you know, to...especially, \nlike, the manual interruption like you mentioned   earlier. So, I'll tell you the one \nI like, and this is much simpler. ",
    "start": "1853080",
    "end": "1859799"
  },
  {
    "text": "Oh, it's none of them.\nOne of the things was... What's that?  It's none of them. We haven't \nsaid it yet, your fav.  I know. That's what I'm gonna tell you. This \nis it. My favorite one...and I saw Ben do this  ",
    "start": "1859800",
    "end": "1865400"
  },
  {
    "text": "once. I remember looking at it going, \"What's he \ndoing? I'll have to teach you how this works.\" And   then I realized what he was doing. I was like, \n\"Oh, my gosh, this is brilliant.\" Basically,  ",
    "start": "1865400",
    "end": "1874000"
  },
  {
    "text": "the idea is...so step functions, when you \ndo a state, you can add...you can make   the state...you know, you can add it to the \nstate, kind of gets bigger. You say, \"Okay,  ",
    "start": "1874000",
    "end": "1881159"
  },
  {
    "text": "I'm gonna get some results from a Lambda function. \nI'm gonna get some results from DynamoDB,\" and   then kind of putting all that together...\nYou add to the payload as it moves down. ",
    "start": "1881160",
    "end": "1889440"
  },
  {
    "text": "Right, you add to the payload. But sometimes \nyou get something that comes in right at the   beginning that you need right at the end. Now, \nyou can pass it down, and it's not that hard,  ",
    "start": "1889440",
    "end": "1897840"
  },
  {
    "text": "but it's a little cognitive load of, like, \nwhere, you know? Ben Smith does a parallel. So,   when something comes in, he does a parallel state, \nhe runs all...put this thing, see in the thing,  ",
    "start": "1897840",
    "end": "1907760"
  },
  {
    "text": "he runs everything he needs to do on one side, \nand the parameter is saved all the way to the end,   and then I just have an array with all my \nresults from this one and the parameter,  ",
    "start": "1907760",
    "end": "1915720"
  },
  {
    "text": "and I put that in. And, yes, that's \nthe simplest. It may be a lazy move,   but I think it's a brilliant move, and I use it. \nI always...first thing I do is I drop a parallel,  ",
    "start": "1915720",
    "end": "1924120"
  },
  {
    "text": "and every time I build a step function now.\nI like that too, because what you've done there is   you've got, like, a global variable almost, right?\nThat's right. That's right. ",
    "start": "1924120",
    "end": "1932600"
  },
  {
    "text": "And it's ready for everything until you exit that \nparallel state. So, you can use it at any point. ",
    "start": "1932600",
    "end": "1939220"
  },
  {
    "text": "Because more often than not, you get data on the \ninitial call that you need to send back somewhere,  ",
    "start": "1939220",
    "end": "1945000"
  },
  {
    "text": "right? You have a job ID much like with Adobe \nor something like that. And I've done it at   little spots where I've had to come together, \nand then I break it back out in the parallel  ",
    "start": "1945000",
    "end": "1954000"
  },
  {
    "text": "again to continue to save. So, it's really cool.\nWhat we really need is to get rid of that pattern,  ",
    "start": "1954000",
    "end": "1960440"
  },
  {
    "text": "and we need some sort of global \nvariable parameters concept,   right? This is something that customers are asking \nfor. AWS said they'll likely shoot it to us. ",
    "start": "1960440",
    "end": "1968032"
  },
  {
    "text": "We know the folks.\nSo let's hope that comes soon. Let's push for that. Anything you \nwanna throw out last minute before  ",
    "start": "1968032",
    "end": "1984720"
  },
  {
    "start": "1971000",
    "end": "2212000"
  },
  {
    "text": "we head out in the shameless plugs?\nWell, the only other thing I would say   is worth mentioning is the potential for step \nfunctions with AI, things like training models,  ",
    "start": "1984720",
    "end": "1995760"
  },
  {
    "text": "invoke models, and then chaining prompts and \nresponses together. I think there's so much  ",
    "start": "1995760",
    "end": "2002160"
  },
  {
    "text": "potential that you can use your workflows for kind \nof similar to what we were just talking about,   right? Saving some kind of global state \nof your conversation, either in DynamoDB  ",
    "start": "2002160",
    "end": "2011880"
  },
  {
    "text": "or in the workflow itself in the parallel state, \nand chaining together these responses, I think,  ",
    "start": "2012400",
    "end": "2019080"
  },
  {
    "text": "is a really interesting use case that I'm \nlooking forward to seeing more and more how   customers are doing that with step functions.\nSo, I've done some work around this, and I've  ",
    "start": "2019080",
    "end": "2028320"
  },
  {
    "text": "talked about this, and I was shocked because \nit could do LangChain. But replacing that with   step functions was fairly easy and just quick do \nyour drag, grab this context. And so, basically,  ",
    "start": "2028320",
    "end": "2040320"
  },
  {
    "text": "what it is, you know, the question comes in, let's \njust say a chat, but the question comes in, save   the question to DynamoDB. Actually, I would go \nahead and hit the LLM, build the prompt, so, like,  ",
    "start": "2040320",
    "end": "2049679"
  },
  {
    "text": "hit the LLM, and then I would save the question \nand the answer to DynamoDB. So the next time   it came through, you could say, \"Look, I asked \nthis, and here was your answer. Now, ask this.\" ",
    "start": "2049680",
    "end": "2059159"
  },
  {
    "text": "You can also use it to grab...like, do the RAG \nstuff. So you can call it, like, Kendra can do  ",
    "start": "2059160",
    "end": "2068159"
  },
  {
    "text": "indexes for you and embeddings and things like \nthat. And so I had Kendra go and index all of  ",
    "start": "2068160",
    "end": "2075039"
  },
  {
    "text": "Serverless Land, and now I can ask a question and \njust have Serverless Land be the scope of info.  ",
    "start": "2076800",
    "end": "2082800"
  },
  {
    "text": "So, all through step functions. The only time I \nrolled out, and this is interesting, the only time   I rolled out to Lambda function was to create the \nactual prompt. I could have done step functions,  ",
    "start": "2082800",
    "end": "2093320"
  },
  {
    "text": "but it would've just been a chain of passes to \nkind of get that to be all the right things, so it  ",
    "start": "2093320",
    "end": "2098760"
  },
  {
    "text": "was just easier. And I think this is an important \ncall out. It's common sense. People ask if I am  ",
    "start": "2098760",
    "end": "2105180"
  },
  {
    "text": "anti-Lambda. No, I'm not anti-Lambda. I just think \nyou use it for the right job, and that's one of   'em. So, it's common sense to orchestrate business \nlogic. There you go. So, really good call up, and  ",
    "start": "2105180",
    "end": "2115360"
  },
  {
    "text": "yeah, that gen AI, it's huge. So, anything else?\nI would say if anyone's interested in seeing more  ",
    "start": "2115360",
    "end": "2125280"
  },
  {
    "text": "things you can do with step functions, there's \nthis awesome website called serverlessland.com.   You can go there to serverlessland.com/workflows, \nand we've got about 160 different patterns all  ",
    "start": "2125280",
    "end": "2137800"
  },
  {
    "text": "built with step functions uploaded by customers \nand AWS experts. That's a great place to kind  ",
    "start": "2137800",
    "end": "2143640"
  },
  {
    "text": "of jump off from and try things out, right?\nThat's been Ben Smith's baby. Ben kind of  ",
    "start": "2143640",
    "end": "2149240"
  },
  {
    "text": "created that and has done a lot of those, \nand you've done a great job around that.   Super impressive. If you're looking, and I don't \nthink you have your Twitter or LinkedIn up there,  ",
    "start": "2149240",
    "end": "2158440"
  },
  {
    "text": "but look for Ben Smith on Twitter if you've got \nquestions. He's... Or me, I'm glad to help, but   Ben Smith is literally a genius in step functions, \nso he's kind of our resident expert. Also, if  ",
    "start": "2158440",
    "end": "2168200"
  },
  {
    "text": "you are in the London area, and you're seeing this \nbefore May 14th of 2024, we are having EDA day,  ",
    "start": "2168200",
    "end": "2174760"
  },
  {
    "text": "which is an event driven architecture day. And as \nwe've said quite a few times, step functions are  ",
    "start": "2174760",
    "end": "2181200"
  },
  {
    "text": "at the heart of EDA in orchestrating, you know, \nand so come check it out. We'll be talking quite  ",
    "start": "2181200",
    "end": "2187320"
  },
  {
    "text": "a bit about that. In fact, and I haven't even \nannounced it yet, so I'll just say it here,  ",
    "start": "2187320",
    "end": "2192840"
  },
  {
    "text": "we've got someone who will be doing what we just \ntalked about, talking about doing prompt chaining  ",
    "start": "2192840",
    "end": "2199000"
  },
  {
    "text": "and that kind of stuff using step functions. \nSo, it's really cool. I just read the abstract,  ",
    "start": "2199000",
    "end": "2205200"
  },
  {
    "text": "and today I was like, \"Yes.\" So, definitely one of \nour essays, Uma, will be talking about that. So,  ",
    "start": "2205200",
    "end": "2212720"
  },
  {
    "start": "2212000",
    "end": "2248000"
  },
  {
    "text": "with that, Ben, thanks so much for joining \nme for Unscripted here. I have my GOTO crew,  ",
    "start": "2212720",
    "end": "2217880"
  },
  {
    "text": "by the way, I don't know if you... I'm just \nsaying. I have like nine of these shirts,   but whatever.\nThanks, Eric.",
    "start": "2217880",
    "end": "2232000"
  }
]