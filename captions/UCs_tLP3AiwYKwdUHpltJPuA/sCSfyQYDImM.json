[
  {
    "text": "[Music]",
    "start": "3550",
    "end": "7840"
  },
  {
    "text": "thank you everyone so my talk is called",
    "start": "12549",
    "end": "18410"
  },
  {
    "text": "roast access all areas because one of the big movements for the language last last year was we actually finalized the",
    "start": "18410",
    "end": "25640"
  },
  {
    "text": "ability to deploy rust on basically any target theoretically talk about the",
    "start": "25640",
    "end": "30919"
  },
  {
    "text": "practice in a second but first of all I have a word about doing off strong who",
    "start": "30919",
    "end": "38149"
  },
  {
    "text": "was mentioned this morning because he has been very important for me I have",
    "start": "38149",
    "end": "44030"
  },
  {
    "text": "read program yelling in 2009 and what I really liked in the book is how he",
    "start": "44030",
    "end": "50089"
  },
  {
    "text": "insisted on how concepts strictly applied can solve problems in the case",
    "start": "50089",
    "end": "56239"
  },
  {
    "text": "of air lying it's shared-nothing and message passing and how strictly applying them makes a lot of problems",
    "start": "56239",
    "end": "61460"
  },
  {
    "text": "easier by relying on that the language always does this yeah that's kind of the",
    "start": "61460",
    "end": "67040"
  },
  {
    "text": "point sometimes you have to invent a language for that and Russ comes pretty much out of the same way that if we want",
    "start": "67040",
    "end": "73910"
  },
  {
    "text": "to solve a couple of fundamental problems we need to invent a new language for that instead of trying to",
    "start": "73910",
    "end": "79190"
  },
  {
    "text": "paper over in the languages that we have so who you're mine i'm florian you can",
    "start": "79190",
    "end": "85370"
  },
  {
    "text": "find me on twitter and on get up i have two companies one that runs infrastructure and another one that's",
    "start": "85370",
    "end": "90470"
  },
  {
    "text": "called ferry systems which is rust consultancy I am a rust programmer and",
    "start": "90470",
    "end": "95570"
  },
  {
    "text": "trainer you can find me on rust experts I'm also a mozillian sometimes people think because of my activity in the rust",
    "start": "95570",
    "end": "102230"
  },
  {
    "text": "project I am employed at Mozilla that's not the case but people who are closely aligned with Mozilla's mission I usually",
    "start": "102230",
    "end": "108860"
  },
  {
    "text": "called millions previously I did ten years of ruby community work so there was a point where people stopped",
    "start": "108860",
    "end": "114650"
  },
  {
    "text": "referring to me as the Ruby person in Berlin and then moved to hey that's rust florian I personally started learning",
    "start": "114650",
    "end": "121430"
  },
  {
    "text": "rust in 2013 mostly out of curiosity it was a new language it was still in research work and I co-founded the",
    "start": "121430",
    "end": "128899"
  },
  {
    "text": "Berlin user group I then started organizing two of the larger stress conferences rust fest and oxidized conf",
    "start": "128899",
    "end": "135590"
  },
  {
    "text": "witches and focused on embedded hardware and I'm a",
    "start": "135590",
    "end": "140740"
  },
  {
    "text": "project member since 2015 most of the time the community team recently I started leading the website team I'm now",
    "start": "140740",
    "end": "147280"
  },
  {
    "text": "in the core team as well and I've got a quick question to the room who here has been exposed to rust who has okay not so",
    "start": "147280",
    "end": "156280"
  },
  {
    "text": "many people because I'm going to give you a detail of an explanation of what it is also I have a couple of",
    "start": "156280",
    "end": "162100"
  },
  {
    "text": "endorsements I gave a talk about rust I'd go to 2017 and the best YouTube comment is I don't trust any programmer",
    "start": "162100",
    "end": "167709"
  },
  {
    "text": "that deliberately uses Ruby and Java I guess I still use Ruby and Java for great effect so please if you don't",
    "start": "167709",
    "end": "173680"
  },
  {
    "text": "immediately start using rust that's all fine there's tons of very good software out",
    "start": "173680",
    "end": "180060"
  },
  {
    "text": "just quickly about the rust project I'm presenting the work of 180 team members and over 5,000 contributors over the",
    "start": "180060",
    "end": "186489"
  },
  {
    "text": "last years and that's just the core repositories of the language culminating in a large release in December last year rust itself was",
    "start": "186489",
    "end": "193660"
  },
  {
    "text": "released in May 3rd 2015 so we're talking about a language that's roughly four years old and a little bit older so",
    "start": "193660",
    "end": "201280"
  },
  {
    "text": "what is rust our current claim is it's a language empowering everyone to build reliable and efficient software before",
    "start": "201280",
    "end": "210640"
  },
  {
    "text": "the 2018 release we said well these three things that are important about",
    "start": "210640",
    "end": "215769"
  },
  {
    "text": "rust first of all the language is safe second it's concurrent but it's fast the",
    "start": "215769",
    "end": "222940"
  },
  {
    "text": "problem with that is those are the language level concerns also what is safe is something that people can have",
    "start": "222940",
    "end": "228940"
  },
  {
    "text": "long twitter fights about and we changed that nowadays we say the three important",
    "start": "228940",
    "end": "236860"
  },
  {
    "text": "parts of rust are performance reliability and productivity all of",
    "start": "236860",
    "end": "242440"
  },
  {
    "text": "these three and a mission is to bring that to everyone it's literally in the",
    "start": "242440",
    "end": "247780"
  },
  {
    "text": "claim so we need a language that scales up and down so it should work on small",
    "start": "247780",
    "end": "253480"
  },
  {
    "text": "targets down to micro controllers up to server level targets big data",
    "start": "253480",
    "end": "260260"
  },
  {
    "text": "applications databases so it must provide high abstractions and low",
    "start": "260260",
    "end": "265930"
  },
  {
    "text": "abstractions also very cheap abstractions they must be useful but they must all to be picked through because if we want",
    "start": "265930",
    "end": "272319"
  },
  {
    "text": "to work close to the hardware we sometimes need to rip them open and work with what we have on the inside and they",
    "start": "272319",
    "end": "278800"
  },
  {
    "text": "should cost nothing the problem with the thing that's called zero cost abstraction is if you're",
    "start": "278800",
    "end": "284529"
  },
  {
    "text": "talking about a zero cost abstraction what we mean is you couldn't hand code it better yourself we built you an abstraction that does",
    "start": "284529",
    "end": "291009"
  },
  {
    "text": "the thing that is the most efficient if the abstraction does not do exactly what",
    "start": "291009",
    "end": "296289"
  },
  {
    "text": "you need in that case it might still cost you something so maybe another approach is better but also um economics",
    "start": "296289",
    "end": "304599"
  },
  {
    "text": "in care we have a unified tooling for all of those targets we have extense",
    "start": "304599",
    "end": "310590"
  },
  {
    "text": "extensible tooling so if you need something for a specific use case you can plug into the current tooling and",
    "start": "310590",
    "end": "317199"
  },
  {
    "text": "make it do what you want and we have a very strict backwards compatibility strategy so the program problems to",
    "start": "317199",
    "end": "324400"
  },
  {
    "text": "solve that I want to talk about is memory safety and the stock resource consumption resource handling",
    "start": "324400",
    "end": "330879"
  },
  {
    "text": "concurrency and parallelism dealing with external data resilience and integration into existing code let's get started the",
    "start": "330879",
    "end": "338889"
  },
  {
    "text": "talk has in the title rust 2018 access all areas so just quickly clear up what",
    "start": "338889",
    "end": "344050"
  },
  {
    "text": "rosters an ad is it's a new language profile to enable all of the above we",
    "start": "344050",
    "end": "349770"
  },
  {
    "text": "shipped it in December 2018 it was not a breaking change the rust compiler still",
    "start": "349770",
    "end": "354909"
  },
  {
    "text": "understands old rust and you can mix and match libraries just if you opt in to",
    "start": "354909",
    "end": "361509"
  },
  {
    "text": "the new profile the language is a little bit more agronomic rust in itself is a c",
    "start": "361509",
    "end": "367029"
  },
  {
    "text": "and c++ competitor as a language itself at lands somewhere in the middle that aesthetically memories safe and it has",
    "start": "367029",
    "end": "376050"
  },
  {
    "text": "features that also make it compatible competitive with higher-level languages like Scala Java or for example also go",
    "start": "376050",
    "end": "385139"
  },
  {
    "text": "from its model itself rust is a native programming language it's a values and function language much like C is and it",
    "start": "385139",
    "end": "392199"
  },
  {
    "text": "comes with no notable runtime so it has no active runtime it has no garbage collector everything that I present in",
    "start": "392199",
    "end": "398439"
  },
  {
    "text": "this talk is actually being resolved by the compiler at compile time and not during runtime still it is memory",
    "start": "398439",
    "end": "404800"
  },
  {
    "text": "safe so it looks a little bit like a garbage collector language it is a generic language I wouldn't introduce",
    "start": "404800",
    "end": "409810"
  },
  {
    "text": "that I assume everyone here was exposed to Java and I won't go into higher",
    "start": "409810",
    "end": "416229"
  },
  {
    "text": "detail and that we use the same syntax so it should be kind of natural it has detailed error handling at no catchable",
    "start": "416229",
    "end": "422770"
  },
  {
    "text": "exceptions it's a very very detailed language it's kind of like what if we had a language that's a nitpicker but in",
    "start": "422770",
    "end": "428830"
  },
  {
    "text": "a good way we usually call the compiler complainer we might also call it an Iron",
    "start": "428830",
    "end": "434710"
  },
  {
    "text": "Maiden so let's look at the code example quickly so he said rust is a structures",
    "start": "434710",
    "end": "444370"
  },
  {
    "text": "and functions language so we have a data structure here with two integers inside",
    "start": "444370",
    "end": "450699"
  },
  {
    "text": "exactly 32 bits so I know the size of it in memory so I can talk in rust about a directly about memory layout I can just",
    "start": "450699",
    "end": "459280"
  },
  {
    "text": "construct it I can allocate it on the heap that works in rust by a special type that's called",
    "start": "459280",
    "end": "465909"
  },
  {
    "text": "box with special types that heap allocate the rust is a language that differentiates between a stack and the",
    "start": "465909",
    "end": "471460"
  },
  {
    "text": "heap but there's nothing more than I need to do what happens here is the",
    "start": "471460",
    "end": "476500"
  },
  {
    "text": "moment this program ends it actually starts deallocating all of that memory and then quits the program and that",
    "start": "476500",
    "end": "482680"
  },
  {
    "text": "works through a system called ownership and a value introduced and harrassed program is exclusively owned and this",
    "start": "482680",
    "end": "489460"
  },
  {
    "text": "ownership can be moved so for example I can't capacit into a function but if for any reason this value runs out of scope",
    "start": "489460",
    "end": "496389"
  },
  {
    "text": "it is dropped and this moment is clearly defined the moment is exactly here because that's the end of the scope",
    "start": "496389",
    "end": "502479"
  },
  {
    "text": "that's the moment that the allocation happens so there's no garbage collection happening that might defer that it will",
    "start": "502479",
    "end": "508330"
  },
  {
    "text": "actually happen at that point and that can be used for great effect one of the",
    "start": "508330",
    "end": "513940"
  },
  {
    "text": "misunderstandings about ownership is that it's just for memory handling it is actually very very useful for any kind",
    "start": "513940",
    "end": "519969"
  },
  {
    "text": "of resource handling so all rust values have a trackable region memory where",
    "start": "519969",
    "end": "525430"
  },
  {
    "text": "they active and that means they can be used for resource management because I know when they become inactive and",
    "start": "525430",
    "end": "531660"
  },
  {
    "text": "ownership manages resources memory is always one of them but it doesn't have to be one example for that is",
    "start": "531660",
    "end": "538780"
  },
  {
    "text": "file so if I have a function that reads a file I just pass it as a path and I",
    "start": "538780",
    "end": "545980"
  },
  {
    "text": "get a string back which is the contents of the file I'm talking about that resulting in a second",
    "start": "545980",
    "end": "553210"
  },
  {
    "text": "I open the file and because I don't return the file I actually don't do anything after reading it the file will",
    "start": "553210",
    "end": "559990"
  },
  {
    "text": "automatically be closed and that's kind of this resource handling semantics",
    "start": "559990",
    "end": "565660"
  },
  {
    "text": "because I can attach to a file pointer oh if it runs out of scope also called closed on it the question mark here is",
    "start": "565660",
    "end": "574000"
  },
  {
    "text": "our error handling operator just quickly about that result rust has no exceptions",
    "start": "574000",
    "end": "581880"
  },
  {
    "text": "what we use is we use a result type that has in something that we call an enum it",
    "start": "581880",
    "end": "589990"
  },
  {
    "text": "has two so-called variants okay an error which signal the thing that you want to",
    "start": "589990",
    "end": "596080"
  },
  {
    "text": "do worked or it didn't and if it returned one of them from a function I actually asked the caller to before",
    "start": "596080",
    "end": "604420"
  },
  {
    "text": "actually handling the data checking hey was it okay or do you actually have to handle an error so results are plain",
    "start": "604420",
    "end": "612490"
  },
  {
    "text": "data like for example also in go or other languages what it dis allows me to",
    "start": "612490",
    "end": "617740"
  },
  {
    "text": "do if I have another function the implementation is pretty unimportant that's print file and close but the important thing is it takes a file reads",
    "start": "617740",
    "end": "625570"
  },
  {
    "text": "it fully and because it lets a drop out of scope it closes it so what happens if",
    "start": "625570",
    "end": "631810"
  },
  {
    "text": "I try to furcal this function twice on a file what happens is I get an error what",
    "start": "631810",
    "end": "639010"
  },
  {
    "text": "it tells me is oh you moved ownership you call the function on this piece of",
    "start": "639010",
    "end": "645430"
  },
  {
    "text": "data gave away ownership and then you're trying to call it again that doesn't work because you don't own it anymore",
    "start": "645430",
    "end": "651930"
  },
  {
    "text": "practically speaking what it just made sure is that the second time I call the",
    "start": "651930",
    "end": "657400"
  },
  {
    "text": "I call this function it actually gets a valid file pointer if I wouldn't do that",
    "start": "657400",
    "end": "662640"
  },
  {
    "text": "the first call to it would succeed because it can actually read from that file pointer close it in the end and the",
    "start": "662640",
    "end": "667690"
  },
  {
    "text": "second call would not succeed because the file pointer has been accidentally closed in the me",
    "start": "667690",
    "end": "674519"
  },
  {
    "text": "just as a comparison how that works in other languages I'm picking Ruby here because being an old term rubyist what",
    "start": "675610",
    "end": "682399"
  },
  {
    "text": "Ruby has Ruby has a file API that uses a closure to make sure that if you call",
    "start": "682399",
    "end": "688970"
  },
  {
    "text": "file open and you didn't then execute this closure it called closed in the end",
    "start": "688970",
    "end": "695259"
  },
  {
    "text": "so they don't forget closing files and having dangling fine boil five points",
    "start": "695259",
    "end": "700910"
  },
  {
    "text": "around that can be circumvented because what I can do is that can somehow",
    "start": "700910",
    "end": "708439"
  },
  {
    "text": "because Ruby is a garbage collected language so I can take any amount of references on any kind of data so what I",
    "start": "708439",
    "end": "715879"
  },
  {
    "text": "can do is I can do file open and intend say I want an iterator over each line of the file return that and oops that",
    "start": "715879",
    "end": "725079"
  },
  {
    "text": "doesn't work because the definition of that closure was once the closure ends",
    "start": "725079",
    "end": "730220"
  },
  {
    "text": "you close the file and then I'm trying to read from it bang this is obviously a simple example no one would write that",
    "start": "730220",
    "end": "736040"
  },
  {
    "text": "but slice only have so much space that's also the annoying part of it if you run",
    "start": "736040",
    "end": "741529"
  },
  {
    "text": "into such a bug it's usually a 1,000 line code base and then it's hard to figure out where you had accidentally closed it so what happened we're",
    "start": "741529",
    "end": "748699"
  },
  {
    "text": "referencing through the file through to the file through an iterator we moved the iterator out of scope the file was closed we try to iterate back let's try",
    "start": "748699",
    "end": "756110"
  },
  {
    "text": "that in rust we can have a look at the book and it says hello rust has",
    "start": "756110",
    "end": "762079"
  },
  {
    "text": "references and we can try to also get a similar situation where we set up a",
    "start": "762079",
    "end": "768370"
  },
  {
    "text": "reader that references the file this is the referencing operator ampersand moot",
    "start": "768370",
    "end": "775279"
  },
  {
    "text": "is a special kind of reference to which it can actually mutate the end I come to that and so you open that bufferedreader",
    "start": "775279",
    "end": "782509"
  },
  {
    "text": "and then I'm returning the reader this actually doesn't work the compiler will",
    "start": "782509",
    "end": "791389"
  },
  {
    "text": "tell me pretty clearly cannot return value referencing a local variable called file because with the rules that",
    "start": "791389",
    "end": "800569"
  },
  {
    "text": "I laid out file must be closed by the end of this function",
    "start": "800569",
    "end": "806558"
  },
  {
    "text": "so we're referencing the file through this reader kind of a similar pattern we're moving the read out of scope by",
    "start": "807220",
    "end": "813170"
  },
  {
    "text": "returning the files closed scope ends the compiler Texas as illegal references",
    "start": "813170",
    "end": "820130"
  },
  {
    "text": "in rust are subject to a system called borrowing references cannot outlive what",
    "start": "820130",
    "end": "826700"
  },
  {
    "text": "they borrowed from so I always have to reference valid memory and mutable and",
    "start": "826700",
    "end": "832910"
  },
  {
    "text": "immutable references cannot alia so I showed the m % loot there's also the ampersand reference which doesn't allow",
    "start": "832910",
    "end": "841400"
  },
  {
    "text": "me to mutate through it and the important thing is if you have a mutable reference in rust you can also be",
    "start": "841400",
    "end": "848270"
  },
  {
    "text": "guaranteed that it's the only one everywhere in the program so if you have a mutable reference there's no other",
    "start": "848270",
    "end": "854300"
  },
  {
    "text": "part of the program that can actually currently even read that memory",
    "start": "854300",
    "end": "860620"
  },
  {
    "text": "references are always valid much like in C++ and the interesting notion here is",
    "start": "860620",
    "end": "866570"
  },
  {
    "text": "mutable state and rust is allowed shared state in rust is also allowed but shape",
    "start": "866570",
    "end": "872690"
  },
  {
    "text": "mutable state is not allowed and that's the problem that we're usually running",
    "start": "872690",
    "end": "877820"
  },
  {
    "text": "into in parallelism and concurrency and we're also seeing a thing here talking",
    "start": "877820",
    "end": "884720"
  },
  {
    "text": "about illegal States files and rust are defined in such a way that they are always open if you have a file type it's",
    "start": "884720",
    "end": "890270"
  },
  {
    "text": "always open so rust gives you methods to make illegal states it representable",
    "start": "890270",
    "end": "895280"
  },
  {
    "text": "even if you want the file API that represents both open closed you have to use a different one that models these",
    "start": "895280",
    "end": "901640"
  },
  {
    "text": "states appropriately and gives appropriate API in contrast to that the",
    "start": "901640",
    "end": "908330"
  },
  {
    "text": "scope with closures approach that Ruby has and other languages have as well are just about not forgetting to call the",
    "start": "908330",
    "end": "914540"
  },
  {
    "text": "close call on a file but they still have closed file pointers which are often not",
    "start": "914540",
    "end": "920870"
  },
  {
    "text": "very useful so how do we get out of that",
    "start": "920870",
    "end": "926750"
  },
  {
    "text": "it's actually pretty simple we changed this it used to be a moot file here we",
    "start": "926750",
    "end": "933290"
  },
  {
    "text": "change this to file and don't reference the file what happens then the",
    "start": "933290",
    "end": "938480"
  },
  {
    "text": "bufferedreader takes ownership of the file reps it builds a buffer around it and then I can both",
    "start": "938480",
    "end": "944400"
  },
  {
    "text": "pass both back from it and then I can for example iterate over the lines print",
    "start": "944400",
    "end": "950760"
  },
  {
    "text": "them out with line numbers or whatever so pretty often in rust that's something",
    "start": "950760",
    "end": "955980"
  },
  {
    "text": "that people often run against if they can't make a reference valid properly",
    "start": "955980",
    "end": "961110"
  },
  {
    "text": "they shouldn't reference but instead pass values around that's what we're doing here we came back from trying to",
    "start": "961110",
    "end": "966390"
  },
  {
    "text": "pass out references to actually passing values around that's important here",
    "start": "966390",
    "end": "972900"
  },
  {
    "text": "bufferedreader now owns the file so it's also the unique owner of the file so it can also be sure that no one else is",
    "start": "972900",
    "end": "978480"
  },
  {
    "text": "currently referencing the file mutating it writing to it or whatever and that's",
    "start": "978480",
    "end": "984630"
  },
  {
    "text": "a thing that happens pretty often in rust there's a lot of API is that come in three things owned borrowed mutiply",
    "start": "984630",
    "end": "991920"
  },
  {
    "text": "borrowed these are the three things that you hear most about for example if you talk about iterators pretty simple",
    "start": "991920",
    "end": "998640"
  },
  {
    "text": "concept I have a collection in this case a vector 1 2 3 and I want to iterate",
    "start": "998640",
    "end": "1005360"
  },
  {
    "text": "over it and there's three ways of actually doing it which is first of all the owned iterator we're still which",
    "start": "1005360",
    "end": "1011540"
  },
  {
    "text": "again closes over the collection you completely forget what collection it was the only thing you get out is I can",
    "start": "1011540",
    "end": "1016940"
  },
  {
    "text": "iterate over it and then you iterate over it and once the iterator drops everything they all the data that it",
    "start": "1016940",
    "end": "1023480"
  },
  {
    "text": "closed over actually drops as well this is what it means to take ownership if it",
    "start": "1023480",
    "end": "1029780"
  },
  {
    "text": "just call eater I will get the immutable borrowing iterators so I can borrow",
    "start": "1029780",
    "end": "1035300"
  },
  {
    "text": "I can I can iterate over that lecture as much as I want I can actually get an infinite number of these iterators at",
    "start": "1035300",
    "end": "1040640"
  },
  {
    "text": "the same time because they can all be sure that the data is not being manipulated and keeps at the same length",
    "start": "1040640",
    "end": "1047270"
  },
  {
    "text": "and everything and I also have a mutable iterator or it can iterate over and a",
    "start": "1047270",
    "end": "1052730"
  },
  {
    "text": "plus 1 to each of those numbers or whatever and they're the guarantee applies that if I have this iterator I",
    "start": "1052730",
    "end": "1059120"
  },
  {
    "text": "know that I can mutate the collection but no one else can see it so there is no sharing of this mutable state at that",
    "start": "1059120",
    "end": "1065960"
  },
  {
    "text": "moment so before that if I had immutable references or immutable iterators active",
    "start": "1065960",
    "end": "1072140"
  },
  {
    "text": "I would have to remove them all before actually starting with us and this relates nicely to",
    "start": "1072140",
    "end": "1081080"
  },
  {
    "text": "parallel processing so we have quite a number of great frameworks for parallel",
    "start": "1081080",
    "end": "1087230"
  },
  {
    "text": "programming that also work on very very small devices they are mixable with",
    "start": "1087230",
    "end": "1092600"
  },
  {
    "text": "concurrent approaches so we do allow parallel and concurrent programming in the same language but all that is safe",
    "start": "1092600",
    "end": "1099530"
  },
  {
    "text": "from data races because data races happen in the moment where I can observe someone manipulating the memory",
    "start": "1099530",
    "end": "1106010"
  },
  {
    "text": "basically the problem is I have an immutable reference I read it someone manipulates it and then I read",
    "start": "1106010",
    "end": "1112370"
  },
  {
    "text": "it again and it's something different but I have an immutable reference what's that like",
    "start": "1112370",
    "end": "1117740"
  },
  {
    "text": "the guarantee of an immutable reference in rust is the value that you're that you're referencing will never change why",
    "start": "1117740",
    "end": "1124430"
  },
  {
    "text": "you have that reference and just to show",
    "start": "1124430",
    "end": "1130070"
  },
  {
    "text": "how this works this is again the iterator API I have another collection",
    "start": "1130070",
    "end": "1137660"
  },
  {
    "text": "of i-32 32-bit integers I just want to sum them all up I want to",
    "start": "1137660",
    "end": "1143660"
  },
  {
    "text": "square them and then sum them all up if I want to do this in parallel there's",
    "start": "1143660",
    "end": "1149600"
  },
  {
    "text": "actually a library that allows me to just say this iterator is now parallel put it on a thread pool start running it",
    "start": "1149600",
    "end": "1157090"
  },
  {
    "text": "it's kind of boring isn't it it also gives a couple of additional options like this is the convenience option with",
    "start": "1157090",
    "end": "1163640"
  },
  {
    "text": "a background thread pool where it will just be applied to you can also say I want a specific thread pool to be used",
    "start": "1163640",
    "end": "1169940"
  },
  {
    "text": "or whatever so you always got the option to move out of those defaults but other than that that's currently yet I get to",
    "start": "1169940",
    "end": "1177620"
  },
  {
    "text": "another detail of that in a second but currently if you want to parallelize",
    "start": "1177620",
    "end": "1183440"
  },
  {
    "text": "Rusco that's very easy api is to do that there's two large libraries for doing",
    "start": "1183440",
    "end": "1190550"
  },
  {
    "text": "that if you ever want to do but if that's the way you want to get started with rust-eze cross beam and raion cross",
    "start": "1190550",
    "end": "1196940"
  },
  {
    "text": "beam are all the base types that you want for for any kind of parallel processing several several methods for",
    "start": "1196940",
    "end": "1205190"
  },
  {
    "text": "mutex a offense and whatever wet pools rayon is the library that provides these parallel",
    "start": "1205190",
    "end": "1211420"
  },
  {
    "text": "iterators quickly and easily if you talk",
    "start": "1211420",
    "end": "1217780"
  },
  {
    "text": "about concurrent programming that is things like Erlang does it or for",
    "start": "1217780",
    "end": "1223300"
  },
  {
    "text": "example no GS so you have an event reactor potentially on a single thread or on multiple threads where you don't",
    "start": "1223300",
    "end": "1233470"
  },
  {
    "text": "have web-based scheduling but actually a cooperative scheduling between all the",
    "start": "1233470",
    "end": "1238630"
  },
  {
    "text": "units we have that as well also a mixable with parallel approaches the other way around works as well also safe",
    "start": "1238630",
    "end": "1245380"
  },
  {
    "text": "from data races what rust allows you to model is if you",
    "start": "1245380",
    "end": "1251560"
  },
  {
    "text": "have any kind of concurrent unit say thread a task on the event reactor or",
    "start": "1251560",
    "end": "1257560"
  },
  {
    "text": "whatever it allows you to model which part currently owns what data and that",
    "start": "1257560",
    "end": "1263980"
  },
  {
    "text": "works independent of the concurrency of probably parallelism implementation that",
    "start": "1263980",
    "end": "1271210"
  },
  {
    "text": "you're currently using I'll show how that works in a second currently",
    "start": "1271210",
    "end": "1276990"
  },
  {
    "text": "concurrent programming in rust looks like this because it's completely based on standard rust API and anyone here",
    "start": "1276990",
    "end": "1286210"
  },
  {
    "text": "doing JavaScript was promises yeah basically the same problem so we have we",
    "start": "1286210",
    "end": "1295120"
  },
  {
    "text": "have a futures type or a promises type but the only thing we currently have is",
    "start": "1295120",
    "end": "1300360"
  },
  {
    "text": "methods on it to combine them so actually each of these things in for",
    "start": "1300360",
    "end": "1306610"
  },
  {
    "text": "each be to end and also here are small",
    "start": "1306610",
    "end": "1312580"
  },
  {
    "text": "concurrent subunits and you need to know the actual names of what of these things",
    "start": "1312580",
    "end": "1319180"
  },
  {
    "text": "are concurrent actions to understand what they do also you need to use these",
    "start": "1319180",
    "end": "1324250"
  },
  {
    "text": "kind of combinators to combine them in the right way that works it's verbose and very error-prone which",
    "start": "1324250",
    "end": "1331960"
  },
  {
    "text": "is actually what we are removing that or we're moving towards an async of eight",
    "start": "1331960",
    "end": "1338410"
  },
  {
    "text": "syntax much like script hazard so you have a look at this",
    "start": "1338410",
    "end": "1345860"
  },
  {
    "text": "you have this for each Combinator that takes a function that has a specific",
    "start": "1345860",
    "end": "1351230"
  },
  {
    "text": "behavior how for each works this is",
    "start": "1351230",
    "end": "1356690"
  },
  {
    "text": "actually going to be replaced by a while loop that just waits on like this is a",
    "start": "1356690",
    "end": "1363919"
  },
  {
    "text": "small TCP server what it does is for every incoming connection or for the incoming connections always take the",
    "start": "1363919",
    "end": "1369830"
  },
  {
    "text": "next one and wait for the next one that's the operation that it's doing here and explicitly spawn of every",
    "start": "1369830",
    "end": "1378230"
  },
  {
    "text": "connection handling as a second task or as a as another task on our current",
    "start": "1378230",
    "end": "1383450"
  },
  {
    "text": "event reactor you don't need to understand the full density of it it's",
    "start": "1383450",
    "end": "1389210"
  },
  {
    "text": "just having a special syntax for this use case makes code much much easier to",
    "start": "1389210",
    "end": "1397610"
  },
  {
    "text": "read the interesting thing about the async/await syntax again is you can pick",
    "start": "1397610",
    "end": "1402710"
  },
  {
    "text": "the concurrency pattern that you're using and the nice thing about being able to pick the concurrency pattern and",
    "start": "1402710",
    "end": "1409250"
  },
  {
    "text": "especially implementation is that you can choose the one that's right for the device that you're currently working on an event reactor that's working on a",
    "start": "1409250",
    "end": "1417320"
  },
  {
    "text": "server can just waste a couple of megabytes of memory you don't care and",
    "start": "1417320",
    "end": "1422470"
  },
  {
    "text": "just for performance reasons something that needs to work on a small device",
    "start": "1422470",
    "end": "1427929"
  },
  {
    "text": "most obviously use an implementation that's much much simpler the async/await",
    "start": "1427929",
    "end": "1433700"
  },
  {
    "text": "syntax in itself comes with no actual cost the only thing that comes with the",
    "start": "1433700",
    "end": "1440210"
  },
  {
    "text": "cost is the actual reactor that you need that you need to use to drive it and that's pretty unique that we have a",
    "start": "1440210",
    "end": "1445610"
  },
  {
    "text": "syntax that's independent of the library implementation that you're using so you wouldn't need to replace the runtime",
    "start": "1445610",
    "end": "1453110"
  },
  {
    "text": "system or you wouldn't need to replace it have been the rust implementation that you're using what you replace is I",
    "start": "1453110",
    "end": "1458630"
  },
  {
    "text": "choose different library from our our library host and then just use that one",
    "start": "1458630",
    "end": "1464899"
  },
  {
    "text": "instead there's a couple of libraries ran this the most prolific one currently",
    "start": "1464899",
    "end": "1471889"
  },
  {
    "text": "being active and actives web act is an actor framework much like our lang is an activist web is a web framework",
    "start": "1471889",
    "end": "1478580"
  },
  {
    "text": "implemented in it these lower level ones there's two called Tokyo and Romeo which",
    "start": "1478580",
    "end": "1483620"
  },
  {
    "text": "are just the bear reactors with a little bit of a platform on top and a thing that we're currently producing within",
    "start": "1483620",
    "end": "1489770"
  },
  {
    "text": "the project rust async is our agent working group called runtime that actually puts a facade on top of on top",
    "start": "1489770",
    "end": "1495980"
  },
  {
    "text": "of all of that to give you a unified interface for the most basic",
    "start": "1495980",
    "end": "1501770"
  },
  {
    "text": "functionality there's a little bit of magic behind this every value in rust",
    "start": "1501770",
    "end": "1507380"
  },
  {
    "text": "has two additional properties and those are send and sync sin means the data can",
    "start": "1507380",
    "end": "1513230"
  },
  {
    "text": "be passed between concurrent units that's much like I could take a piece of data and can send it to another thread",
    "start": "1513230",
    "end": "1519260"
  },
  {
    "text": "the first thread will not have it anymore the other one have it and suit",
    "start": "1519260",
    "end": "1524720"
  },
  {
    "text": "means I can pass it between concurrent units and both properties are",
    "start": "1524720",
    "end": "1530390"
  },
  {
    "text": "independent of power or the parallelism and the concurrency library news this is",
    "start": "1530390",
    "end": "1535610"
  },
  {
    "text": "a motivating example for simplicity six I'm just going to use threads here but",
    "start": "1535610",
    "end": "1540920"
  },
  {
    "text": "this also works in any other kind of situation so I have a counter classic",
    "start": "1540920",
    "end": "1546770"
  },
  {
    "text": "counter problem I spawned three threads and I try to have a becau every of those count wants the problem is because",
    "start": "1546770",
    "end": "1557440"
  },
  {
    "text": "counting on a processor is I read the data I manipulate it and I've read it",
    "start": "1557440",
    "end": "1562850"
  },
  {
    "text": "again to memory there might be a race condition so programming is or multiplayer programming is one of the",
    "start": "1562850",
    "end": "1569330"
  },
  {
    "text": "only ways to actually make 1 + 1 + 1 B 2 and this is what happens here",
    "start": "1569330",
    "end": "1575180"
  },
  {
    "text": "luckily Roz compiler actually tells me that that doesn't work in this case in",
    "start": "1575180",
    "end": "1581660"
  },
  {
    "text": "the initial case tells me what the thread expects it actually wants to take",
    "start": "1581660",
    "end": "1587090"
  },
  {
    "text": "ownership of all the data now the problem is I can only pass on ownership once but I want to throw this boundary",
    "start": "1587090",
    "end": "1592880"
  },
  {
    "text": "that doesn't work it actually tells me",
    "start": "1592880",
    "end": "1598400"
  },
  {
    "text": "here value moved into closure here in previous iteration of the loop so it",
    "start": "1598400",
    "end": "1603920"
  },
  {
    "text": "understands that we iterate multiple times and it knows that the first time calling that's born the values already",
    "start": "1603920",
    "end": "1609700"
  },
  {
    "text": "gone so what I need is actually multiple ownership and Russ provides ways of",
    "start": "1609700",
    "end": "1615760"
  },
  {
    "text": "doing that through smart pointers much like in C++ or other languages and and a",
    "start": "1615760",
    "end": "1623620"
  },
  {
    "text": "standard smart pointer and Russ is the rev counter if I want ref counting I can have ref counting I can construct a ref",
    "start": "1623620",
    "end": "1633160"
  },
  {
    "text": "counted pointer around a piece of data this is the API how I get a new handle on that ref counter so I get a second",
    "start": "1633160",
    "end": "1640630"
  },
  {
    "text": "reference and then that's right also doesn't work why because the",
    "start": "1640630",
    "end": "1649120"
  },
  {
    "text": "standard ref Condor in rust is actually not synchronized so I might have the same problem just on the reference count",
    "start": "1649120",
    "end": "1656650"
  },
  {
    "text": "instead of the actual data that I'm pointing to but Russ detects that tells me it cannot be sent between threads",
    "start": "1656650",
    "end": "1663430"
  },
  {
    "text": "safely because it's not sent that's where that property comes from okay",
    "start": "1663430",
    "end": "1670570"
  },
  {
    "text": "let's stick a little bit more through the API and figure out if there's a sunt ref counter yes there's a sink ref",
    "start": "1670570",
    "end": "1676000"
  },
  {
    "text": "counter which is the AR see the atomic ref counter let's try that same API",
    "start": "1676000",
    "end": "1686400"
  },
  {
    "text": "doesn't work can it assign data to an m % reference",
    "start": "1686400",
    "end": "1692100"
  },
  {
    "text": "what's the problem the problem is I have multiple access points to that data",
    "start": "1692100",
    "end": "1698590"
  },
  {
    "text": "through the AR C and then the borrowing rule applies again you cannot get a",
    "start": "1698590",
    "end": "1705070"
  },
  {
    "text": "mutable reference out of that because there might be other people watching so",
    "start": "1705070",
    "end": "1710880"
  },
  {
    "text": "the last thing I need is mutex because",
    "start": "1710880",
    "end": "1716110"
  },
  {
    "text": "the mutex does exactly that that moderation it makes sure that there's always ever one part of the program",
    "start": "1716110",
    "end": "1722860"
  },
  {
    "text": "currently holding a mutable reference that works and interestingly if you lock",
    "start": "1722860",
    "end": "1730510"
  },
  {
    "text": "a mutex to get back is something called a mutex card which we presents hey you",
    "start": "1730510",
    "end": "1738880"
  },
  {
    "text": "have currently locked the mutex and that one again as no empathy R is",
    "start": "1738880",
    "end": "1745149"
  },
  {
    "text": "handled through ownership that means I don't actually have to think because it's a resource yeah your luck is a resource so I take a lock and I let it",
    "start": "1745149",
    "end": "1755110"
  },
  {
    "text": "run out of scope here and the moment I let it run out of scope it gets",
    "start": "1755110",
    "end": "1761289"
  },
  {
    "text": "immediately unlocked so I also kind of forget unlocking the mutex so the",
    "start": "1761289",
    "end": "1767500"
  },
  {
    "text": "compiler has just guided me through a refactoring that usually it's pretty dangerous I take a single threaded piece",
    "start": "1767500",
    "end": "1773230"
  },
  {
    "text": "of code and we write it as a multi-threaded piece of code I need to",
    "start": "1773230",
    "end": "1778539"
  },
  {
    "text": "make sure that all the data that I access to is properly synchronized and has never been if it vanishes out of",
    "start": "1778539",
    "end": "1784149"
  },
  {
    "text": "memory memory as long as people still needed classic parallel programming problem",
    "start": "1784149",
    "end": "1789940"
  },
  {
    "text": "the vanishing out of memory is not a problem if they were working in a garbage collected language the one",
    "start": "1789940",
    "end": "1795970"
  },
  {
    "text": "properly synchronizing is still a problem let's move on to a little more",
    "start": "1795970",
    "end": "1803710"
  },
  {
    "text": "practical examples so Russ is used for actually a lot of CLI programs anyone",
    "start": "1803710",
    "end": "1810220"
  },
  {
    "text": "here using BS code you ever use the search function you using a Russ program it's there's a certain sub community of",
    "start": "1810220",
    "end": "1819730"
  },
  {
    "text": "the Russ community that wants to make string processing as fast as possible and this a lot a lot of outcome coming",
    "start": "1819730",
    "end": "1826929"
  },
  {
    "text": "in these kind of areas so the nice thing about writing CLI programs in rust is",
    "start": "1826929",
    "end": "1832899"
  },
  {
    "text": "similar to for example if you write them and go there shippable without having people to install a runtime pison to",
    "start": "1832899",
    "end": "1840429"
  },
  {
    "text": "seven or whatever its memory conserving with a very a fast startup time because it doesn't come with a runtime um",
    "start": "1840429",
    "end": "1847059"
  },
  {
    "text": "these libraries for a fast and convenient part is pretty often CLI programs I used too much to CSV files",
    "start": "1847059",
    "end": "1854710"
  },
  {
    "text": "JSON files whatever and you have a free choice of concurrency patterns if you want to interact with a with an API in",
    "start": "1854710",
    "end": "1861370"
  },
  {
    "text": "the backend probably you want a single if you just want to churn through a lot",
    "start": "1861370",
    "end": "1867250"
  },
  {
    "text": "of data quickly you probably want a third Pole and ownership makes this it still resource management",
    "start": "1867250",
    "end": "1874450"
  },
  {
    "text": "hang around those files making sure that for example all your all your back-end",
    "start": "1874450",
    "end": "1880540"
  },
  {
    "text": "requests appropriately closed and whatever pretty easy but this also",
    "start": "1880540",
    "end": "1886990"
  },
  {
    "text": "convenience is the Russ program language provide you which is it has ways to",
    "start": "1886990",
    "end": "1893430"
  },
  {
    "text": "allow for structured cogeneration so for example this here is a struct but",
    "start": "1893430",
    "end": "1899650"
  },
  {
    "text": "through a library called struck top we turn it into the definition of our CLI",
    "start": "1899650",
    "end": "1905140"
  },
  {
    "text": "interface what the derive does it looks at the struct and says uh-huh there's a",
    "start": "1905140",
    "end": "1910180"
  },
  {
    "text": "command-line argument called pattern it has to be a string it has to be present because there's no null in rust so that",
    "start": "1910180",
    "end": "1917140"
  },
  {
    "text": "one has to be there this year is a past buff how do you get a past buff I can",
    "start": "1917140",
    "end": "1923680"
  },
  {
    "text": "tell it actually pause it using a standard library functionality the usage",
    "start": "1923680",
    "end": "1929260"
  },
  {
    "text": "is much like a previously described the same thing is used for serialization and",
    "start": "1929260",
    "end": "1935680"
  },
  {
    "text": "deserialization there's a serialization and deserialization from serialization framework called 30",
    "start": "1935680",
    "end": "1943140"
  },
  {
    "text": "which we can use in much the same way we can say we have a point XY we want to be abitt serializable and e serializable",
    "start": "1943140",
    "end": "1950410"
  },
  {
    "text": "and then we can actually choose the",
    "start": "1950410",
    "end": "1955510"
  },
  {
    "text": "format we want to see relies and deserialize at - that's independent of this machinery here and here we say we",
    "start": "1955510",
    "end": "1962140"
  },
  {
    "text": "want to see you lies it into jason and back the nice thing here is this can error like reading a json file that",
    "start": "1962140",
    "end": "1969370"
  },
  {
    "text": "might be incomplete might have additional fields might have less fields and so they it's there's always a result",
    "start": "1969370",
    "end": "1979330"
  },
  {
    "text": "coming back so you need to check if that was actually with other data so it uses the type system to understand",
    "start": "1979330",
    "end": "1984340"
  },
  {
    "text": "well did I even get a valid JSON file here all that can be configured just to",
    "start": "1984340",
    "end": "1992950"
  },
  {
    "text": "be clear so what do you do if ax isn't present in this case I choose choose the default which is null and I also say",
    "start": "1992950",
    "end": "2000720"
  },
  {
    "text": "please in my JSON format it's called point lower case so use that",
    "start": "2000720",
    "end": "2005929"
  },
  {
    "text": "which naturally brings me somewhat down the stack a lot of these programs nowadays are actually deployed on small",
    "start": "2007800",
    "end": "2014440"
  },
  {
    "text": "devices the first place to go to if I",
    "start": "2014440",
    "end": "2019930"
  },
  {
    "text": "want to go smaller is usually embedded Linux my router my IOT gateway and",
    "start": "2019930",
    "end": "2026110"
  },
  {
    "text": "Industry control system we have seen what's there it's people talking about putting it on cars and people",
    "start": "2026110",
    "end": "2032440"
  },
  {
    "text": "researching on that so embedded Linux is at all the places there's always the conversation if embedded Linux a lot of",
    "start": "2032440",
    "end": "2038980"
  },
  {
    "text": "people don't consider embedded Linux kind of embedded because it's a full-blown operating system still it has",
    "start": "2038980",
    "end": "2046510"
  },
  {
    "text": "a lot of the it brings you into a lot of the problems that start with smaller",
    "start": "2046510",
    "end": "2051940"
  },
  {
    "text": "devices the first one is cross compiling what's compiling isn't actually a",
    "start": "2051940",
    "end": "2057490"
  },
  {
    "text": "language concern it is the language concern in the sense that our standard lip is written in a way that we want to",
    "start": "2057490",
    "end": "2063429"
  },
  {
    "text": "make sure that we can support as many targets as possible and if the standard",
    "start": "2063429",
    "end": "2069280"
  },
  {
    "text": "lip can't support it you can at least slice it in pieces where you can for",
    "start": "2069280",
    "end": "2074649"
  },
  {
    "text": "example support parts of it so for example our memory allocation library is",
    "start": "2074650",
    "end": "2081060"
  },
  {
    "text": "also available as a single library but the process itself is easy um we give",
    "start": "2081060",
    "end": "2088780"
  },
  {
    "text": "you appropriate tooling and all tooling and rust is aware that something like",
    "start": "2088780",
    "end": "2094210"
  },
  {
    "text": "cross compiling happens Russ stop is a tool that we use to manage what's",
    "start": "2094210",
    "end": "2099430"
  },
  {
    "text": "compilers and choose the version that you want to have and but it's not just a version switcher it also for example",
    "start": "2099430",
    "end": "2106600"
  },
  {
    "text": "manages targets for you so if I want to compile for a Arch Linux with a muzzle",
    "start": "2106600",
    "end": "2113290"
  },
  {
    "text": "Lipsy I can just download that from actually our projects hosts and use",
    "start": "2113290",
    "end": "2119980"
  },
  {
    "text": "cargo which is a build tool to build whatever we have over to one of those",
    "start": "2119980",
    "end": "2125830"
  },
  {
    "text": "targets I need the platform linker and Lipsy available which is usually if I for",
    "start": "2125830",
    "end": "2132040"
  },
  {
    "text": "example compile to was wrt I need to have the open wrt SDK in my path and I",
    "start": "2132040",
    "end": "2137680"
  },
  {
    "text": "need to make sure that that is there still from our side the tooling is as complete",
    "start": "2137680",
    "end": "2143290"
  },
  {
    "text": "as possible and further down the stack",
    "start": "2143290",
    "end": "2149130"
  },
  {
    "text": "last year we finally unlocked running rust with all of those features that I",
    "start": "2149130",
    "end": "2154780"
  },
  {
    "text": "just shown on bare metal embedded so tiny devices in RF controllers and all",
    "start": "2154780",
    "end": "2161050"
  },
  {
    "text": "of these so that meant a lot of the stabilization of all lower level details replaceable error handlers how is the",
    "start": "2161050",
    "end": "2166869"
  },
  {
    "text": "main function called I used that main function all the time but what's around the main function what happens when the program quits most people don't care",
    "start": "2166869",
    "end": "2173320"
  },
  {
    "text": "people on bare metal devices actually care so it gives you great support for",
    "start": "2173320",
    "end": "2178750"
  },
  {
    "text": "all of these safe patterns on embedded devices it relies on the existing tooling it should be considered young",
    "start": "2178750",
    "end": "2185140"
  },
  {
    "text": "but solid like it is done we have backwards compatibility now so we can start writing libraries this is what it",
    "start": "2185140",
    "end": "2192670"
  },
  {
    "text": "looks like if you just want a simple program the important thing here is it is a no main program so it actually",
    "start": "2192670",
    "end": "2200140"
  },
  {
    "text": "doesn't have a main function we're gonna write that all ourselves it doesn't use the standard lead it uses an external",
    "start": "2200140",
    "end": "2206320"
  },
  {
    "text": "crate for in this case supporting cortex-m processors the RT is this is",
    "start": "2206320",
    "end": "2213310"
  },
  {
    "text": "the runtime for a cortex-m processor so we won't actually boot and finish the processor if you want to and it writes",
    "start": "2213310",
    "end": "2222970"
  },
  {
    "text": "at the main function and marks this as entry here we're using cogeneration again through this attribute to actually",
    "start": "2222970",
    "end": "2229810"
  },
  {
    "text": "set up do the set up off this is how you actually start the board and this is how",
    "start": "2229810",
    "end": "2235750"
  },
  {
    "text": "you shut down the board and everything will be generated for you and then it will be called into that main function this does it just loops just does",
    "start": "2235750",
    "end": "2241990"
  },
  {
    "text": "nothing so the machine works but it does nothing let's keep that um but we're",
    "start": "2241990",
    "end": "2252010"
  },
  {
    "text": "still using Rustom antics there and especially the embedded working group has come up with a lot of interesting",
    "start": "2252010",
    "end": "2257760"
  },
  {
    "text": "usages off for example mapping a device access to ownership because I have the",
    "start": "2257760",
    "end": "2262810"
  },
  {
    "text": "same problem again I don't want to the two parts of the program to use the same port at the same time that's an",
    "start": "2262810",
    "end": "2268150"
  },
  {
    "text": "ownership problem I want unique ownership it uses these metaprogramming facilities that we provide for",
    "start": "2268150",
    "end": "2273430"
  },
  {
    "text": "convenience like being able to mark and function as an entry point and then having all the",
    "start": "2273430",
    "end": "2278619"
  },
  {
    "text": "code around it be generated but have that pluggable if I ever want to replace that the resulting code just to be clear",
    "start": "2278619",
    "end": "2286180"
  },
  {
    "text": "is board specific in this case so this needs to run on an cortex-m your options",
    "start": "2286180",
    "end": "2292869"
  },
  {
    "text": "there you can directly use a board package so we have a list of supported boards in the rest embedded working",
    "start": "2292869",
    "end": "2298600"
  },
  {
    "text": "group you can use RTFM which is a small",
    "start": "2298600",
    "end": "2304660"
  },
  {
    "text": "real-time scheduler for small devices and a framework to build safe devices",
    "start": "2304660",
    "end": "2311890"
  },
  {
    "text": "there or you can use a full embedded operating system with built in rust which is Taco S or if you actually need",
    "start": "2311890",
    "end": "2320140"
  },
  {
    "text": "full support for the board and you can't fill the holes yourself currently but",
    "start": "2320140",
    "end": "2325510"
  },
  {
    "text": "you want to write in a trust you can just use a C based operating system and like riot and use that one",
    "start": "2325510",
    "end": "2333119"
  },
  {
    "text": "the final thing that's missing for that is rust can use can be used to interact",
    "start": "2333450",
    "end": "2341590"
  },
  {
    "text": "with C and C++ just if it were C so for example you can generate static and",
    "start": "2341590",
    "end": "2347800"
  },
  {
    "text": "dynamic libraries which provide you punctual speed-up of larger programs or if you have a device driver that's in C",
    "start": "2347800",
    "end": "2354190"
  },
  {
    "text": "that you don't want to rewrite in rust you can just call into that device driver and use that one it is also often",
    "start": "2354190",
    "end": "2362890"
  },
  {
    "text": "used for example in mobile use cases so if you want to deploy something on multiple smartphones and we're usually C",
    "start": "2362890",
    "end": "2370540"
  },
  {
    "text": "was used you can just use rust instead I'm not going to go into detail here",
    "start": "2370540",
    "end": "2376020"
  },
  {
    "text": "basically what it ends up with is we can generate libraries that externally look like they are C library and then you",
    "start": "2376020",
    "end": "2382600"
  },
  {
    "text": "reuse all the facilities that we have so for example this is a piece of Ruby code",
    "start": "2382600",
    "end": "2389050"
  },
  {
    "text": "that would use the previews library as the dynamic library just loaded and",
    "start": "2389050",
    "end": "2394920"
  },
  {
    "text": "allocate data allocate data through that library instead so we can use rust as a",
    "start": "2394920",
    "end": "2401740"
  },
  {
    "text": "memory safe C replacement so in the cases where you would usually",
    "start": "2401740",
    "end": "2408040"
  },
  {
    "text": "simple use the dynamic language then say well we would write rewrite it and see if it becomes slow but then you suddenly",
    "start": "2408040",
    "end": "2415060"
  },
  {
    "text": "through all the memories safety that I made emmaandemma clang which gives you out of the window if you use rust",
    "start": "2415060",
    "end": "2420250"
  },
  {
    "text": "instead that works as well this generators for that so if you don't want",
    "start": "2420250",
    "end": "2428140"
  },
  {
    "text": "to handwrite all of these you can use generators for going from rust program to C header from a C header to rust",
    "start": "2428140",
    "end": "2434470"
  },
  {
    "text": "bindings they specialized tools just for Python Ruby and node to make this conversation less rote and actually just",
    "start": "2434470",
    "end": "2441700"
  },
  {
    "text": "auto-generated can also use a rust program to for example composite of Awesome because of time are actually not",
    "start": "2441700",
    "end": "2448060"
  },
  {
    "text": "going to talk about was omits pretty much the same it's a shared library by a different name can talk to me about that",
    "start": "2448060",
    "end": "2455260"
  },
  {
    "text": "later what's missing especially when",
    "start": "2455260",
    "end": "2461050"
  },
  {
    "text": "we're talking about bare metal is safety critical use cases we have currently no certified compiler but we have recently",
    "start": "2461050",
    "end": "2467710"
  },
  {
    "text": "started a project called sealed rust that attempts to bring certification of rust on track the problem being the",
    "start": "2467710",
    "end": "2474310"
  },
  {
    "text": "language moves forward so we need to at some point decide okay we're going to take a little piece of that or going to",
    "start": "2474310",
    "end": "2480850"
  },
  {
    "text": "take the current version and try to get it certified and actually keep it stable and supported for users that actually",
    "start": "2480850",
    "end": "2486730"
  },
  {
    "text": "need that what we got that on track that's a multi yeah so let's go back to",
    "start": "2486730",
    "end": "2497950"
  },
  {
    "text": "these claims of performance and so we have a language that's as fast as C and",
    "start": "2497950",
    "end": "2503980"
  },
  {
    "text": "C++ with safety while doing the fasting and abstractions with almost no overhead",
    "start": "2503980",
    "end": "2510580"
  },
  {
    "text": "or no overhead but also a language that cares about reliability by letting you",
    "start": "2510580",
    "end": "2518680"
  },
  {
    "text": "express abstract concepts making making illegal states inexpressible and with",
    "start": "2518680",
    "end": "2526390"
  },
  {
    "text": "type level support for resource management and for productivity we have great tooling we check that",
    "start": "2526390",
    "end": "2532600"
  },
  {
    "text": "every year people user you give us four to five out of five stars we have a good documentation can find that on our",
    "start": "2532600",
    "end": "2539350"
  },
  {
    "text": "website rustling dork slash learn actually we have extensive docs we have",
    "start": "2539350",
    "end": "2544450"
  },
  {
    "text": "nine books written on all of these special use cases so there's an there's a book on the language there's a book embedded specifically and we actually",
    "start": "2544450",
    "end": "2554500"
  },
  {
    "text": "have a language it's hard to present that's well feasible for performance refactoring so you can just do things a",
    "start": "2554500",
    "end": "2561760"
  },
  {
    "text": "little wasteful and then after it works start refactoring to making to using more performant techniques so does that",
    "start": "2561760",
    "end": "2570070"
  },
  {
    "text": "work we're seeing rust used in many many ways and interestingly we got roughly",
    "start": "2570070",
    "end": "2576840"
  },
  {
    "text": "33% in flux so a third from functional language dynamic languages and systems",
    "start": "2576840",
    "end": "2582400"
  },
  {
    "text": "programming so people are coming from all like off the stack down the stack from all areas into the rest project",
    "start": "2582400",
    "end": "2588390"
  },
  {
    "text": "because they seeing that there's finally a language that they can kind of amend",
    "start": "2588390",
    "end": "2593440"
  },
  {
    "text": "to the use cases easily and it's well supported and they can get stuff committed to the tooling to actually",
    "start": "2593440",
    "end": "2598480"
  },
  {
    "text": "support that without working off the little language community also one thing",
    "start": "2598480",
    "end": "2605410"
  },
  {
    "text": "you should consider I'm actually not asking you to switch languages that's I",
    "start": "2605410",
    "end": "2610690"
  },
  {
    "text": "think there's a huge problem that if we bring new languages on the table many",
    "start": "2610690",
    "end": "2616060"
  },
  {
    "text": "people are like oh my god I need to get everyone retrained and all the stuff rewritten no that's actually not the case this is why we offer these things",
    "start": "2616060",
    "end": "2624010"
  },
  {
    "text": "like you can rewrite a small piece of it and then use rust as a shade library or you can integrate it bringing another",
    "start": "2624010",
    "end": "2632320"
  },
  {
    "text": "tool to the belts on an organization level it's much cheaper than actually like rooting for bringing the old stuff",
    "start": "2632320",
    "end": "2638380"
  },
  {
    "text": "out that's important to consider and rust is a tool that you can actually use everywhere so it's a very useful tool to",
    "start": "2638380",
    "end": "2643660"
  },
  {
    "text": "have might not be the thing that you use everywhere but for example with you if",
    "start": "2643660",
    "end": "2649120"
  },
  {
    "text": "you are working for example in the IOT sector it's one of the rare languages that can actually cover all of all of",
    "start": "2649120",
    "end": "2655960"
  },
  {
    "text": "the use cases that you have form small devices up to your service systems so",
    "start": "2655960",
    "end": "2661660"
  },
  {
    "text": "the conclusion is rust is the language of wealth shows and compiled some guarantees and simple runtime semantics that'll and this simplicity is important",
    "start": "2661660",
    "end": "2668890"
  },
  {
    "text": "because that allows you to use it in any area of your product because you can build on these simple semantics towards",
    "start": "2668890",
    "end": "2674770"
  },
  {
    "text": "the thing that you're actually instead of dragging all of those semantics in in the first place so thank",
    "start": "2674770",
    "end": "2680690"
  },
  {
    "text": "you [Applause]",
    "start": "2680690",
    "end": "2689940"
  }
]