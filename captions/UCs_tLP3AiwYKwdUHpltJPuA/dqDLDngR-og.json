[
  {
    "text": "thank you um so uh we are going to talk",
    "start": "10440",
    "end": "15360"
  },
  {
    "text": "about the C data processing um and it's",
    "start": "15360",
    "end": "18240"
  },
  {
    "text": "a library I am working on for about last",
    "start": "18240",
    "end": "22519"
  },
  {
    "text": "6 months um yeah so just a little bit",
    "start": "22519",
    "end": "27039"
  },
  {
    "text": "about me um about 5 years ago I was was",
    "start": "27039",
    "end": "30160"
  },
  {
    "text": "working in turkey at a startup called p",
    "start": "30160",
    "end": "32680"
  },
  {
    "text": "security where we were developing a",
    "start": "32680",
    "end": "34680"
  },
  {
    "text": "distributed H application um while",
    "start": "34680",
    "end": "37559"
  },
  {
    "text": "working there I learned how",
    "start": "37559",
    "end": "41160"
  },
  {
    "text": "to how to get multiple hll processes",
    "start": "41399",
    "end": "45000"
  },
  {
    "text": "talking with each other to achieve a",
    "start": "45000",
    "end": "47320"
  },
  {
    "text": "goal and then about 3 years ago I moved",
    "start": "47320",
    "end": "50320"
  },
  {
    "text": "to New Zealand to work on a company",
    "start": "50320",
    "end": "52320"
  },
  {
    "text": "called movio which is a",
    "start": "52320",
    "end": "57000"
  },
  {
    "text": "company company which process",
    "start": "58000",
    "end": "60440"
  },
  {
    "text": "large amount amounts of Cinema related",
    "start": "60440",
    "end": "63359"
  },
  {
    "text": "data to to get insights for movie gos so",
    "start": "63359",
    "end": "70040"
  },
  {
    "text": "it we have decent amount of data we have",
    "start": "70040",
    "end": "72000"
  },
  {
    "text": "billions of transactions and we have",
    "start": "72000",
    "end": "73920"
  },
  {
    "text": "millions of users performing those",
    "start": "73920",
    "end": "76479"
  },
  {
    "text": "transactions and working there Tau me",
    "start": "76479",
    "end": "79320"
  },
  {
    "text": "about large scale data processing",
    "start": "79320",
    "end": "82200"
  },
  {
    "text": "and and especially it taught me that the",
    "start": "82200",
    "end": "85479"
  },
  {
    "text": "techniques we use to do large scale data",
    "start": "85479",
    "end": "88240"
  },
  {
    "text": "analytics are the same months we are",
    "start": "88240",
    "end": "90320"
  },
  {
    "text": "using in functional programming right we",
    "start": "90320",
    "end": "92479"
  },
  {
    "text": "use higher order functions we use",
    "start": "92479",
    "end": "95240"
  },
  {
    "text": "laziness we use we use generics and",
    "start": "95240",
    "end": "99240"
  },
  {
    "text": "things like that so naturally uh I",
    "start": "99240",
    "end": "101720"
  },
  {
    "text": "thought has would be a great fit to do",
    "start": "101720",
    "end": "104000"
  },
  {
    "text": "large scale data analytics and but I",
    "start": "104000",
    "end": "107119"
  },
  {
    "text": "couldn't find any ready to use solution",
    "start": "107119",
    "end": "109280"
  },
  {
    "text": "so I tried to build",
    "start": "109280",
    "end": "111479"
  },
  {
    "text": "one um so let's start by thinking uh",
    "start": "111479",
    "end": "116079"
  },
  {
    "text": "when we should do distributed data",
    "start": "116079",
    "end": "118320"
  },
  {
    "text": "processing so it's a pretty big hammer",
    "start": "118320",
    "end": "120719"
  },
  {
    "text": "so you shouldn't um you shouldn't use it",
    "start": "120719",
    "end": "123520"
  },
  {
    "text": "for any problem every problem you have",
    "start": "123520",
    "end": "126600"
  },
  {
    "text": "you should only use it when you have a",
    "start": "126600",
    "end": "128720"
  },
  {
    "text": "really large amount of data so if your",
    "start": "128720",
    "end": "130959"
  },
  {
    "text": "data fits in a single computer or if",
    "start": "130959",
    "end": "133599"
  },
  {
    "text": "your data fits in a memory just write a",
    "start": "133599",
    "end": "135800"
  },
  {
    "text": "simple application to process it it will",
    "start": "135800",
    "end": "137519"
  },
  {
    "text": "be much nicer um or if your data is big",
    "start": "137519",
    "end": "142200"
  },
  {
    "text": "but you are only going to do some simple",
    "start": "142200",
    "end": "144640"
  },
  {
    "text": "queries or simple",
    "start": "144640",
    "end": "146319"
  },
  {
    "text": "Transformations it is much better if you",
    "start": "146319",
    "end": "148400"
  },
  {
    "text": "use a relational database and if you",
    "start": "148400",
    "end": "150400"
  },
  {
    "text": "create a few indexes it can give you",
    "start": "150400",
    "end": "152280"
  },
  {
    "text": "your give you your result in in in less",
    "start": "152280",
    "end": "155879"
  },
  {
    "text": "than a second so which will be perfect",
    "start": "155879",
    "end": "157400"
  },
  {
    "text": "for you however if you have very large",
    "start": "157400",
    "end": "160280"
  },
  {
    "text": "amount of very",
    "start": "160280",
    "end": "162080"
  },
  {
    "text": "very very large amount of data and you",
    "start": "162080",
    "end": "166000"
  },
  {
    "text": "want to perform really complex queries",
    "start": "166000",
    "end": "168680"
  },
  {
    "text": "and Transformations the C data",
    "start": "168680",
    "end": "171560"
  },
  {
    "text": "processing can work for you",
    "start": "171560",
    "end": "174120"
  },
  {
    "text": "so so you can use it",
    "start": "174120",
    "end": "177120"
  },
  {
    "text": "then um so the most uh most widely used",
    "start": "177120",
    "end": "182120"
  },
  {
    "text": "framework to do distributed data",
    "start": "182120",
    "end": "183840"
  },
  {
    "text": "processing is Apache spark and the core",
    "start": "183840",
    "end": "187200"
  },
  {
    "text": "data structure behind it is called a",
    "start": "187200",
    "end": "189599"
  },
  {
    "text": "resilient distributed data set a data",
    "start": "189599",
    "end": "192920"
  },
  {
    "text": "set is a collection of",
    "start": "192920",
    "end": "195640"
  },
  {
    "text": "rows and those rows does not have any",
    "start": "195640",
    "end": "200040"
  },
  {
    "text": "defined ordering so it's like a set but",
    "start": "200040",
    "end": "202680"
  },
  {
    "text": "it can contain duplicate so it's a multi",
    "start": "202680",
    "end": "205400"
  },
  {
    "text": "set",
    "start": "205400",
    "end": "208400"
  },
  {
    "text": "and but the trick is that instead of",
    "start": "208439",
    "end": "210879"
  },
  {
    "text": "storing this data set as a single entity",
    "start": "210879",
    "end": "213200"
  },
  {
    "text": "we store them as many separate",
    "start": "213200",
    "end": "215840"
  },
  {
    "text": "partitions that can be fetched in",
    "start": "215840",
    "end": "217680"
  },
  {
    "text": "dependently of each other this this",
    "start": "217680",
    "end": "220439"
  },
  {
    "text": "gives us the ability ability to process",
    "start": "220439",
    "end": "223680"
  },
  {
    "text": "those partition partitions in parallel",
    "start": "223680",
    "end": "226560"
  },
  {
    "text": "on many different machines that's and",
    "start": "226560",
    "end": "229319"
  },
  {
    "text": "those machines are called executors and",
    "start": "229319",
    "end": "231959"
  },
  {
    "text": "hence we have our speed up and since we",
    "start": "231959",
    "end": "235760"
  },
  {
    "text": "have those hundreds of machine machines",
    "start": "235760",
    "end": "238519"
  },
  {
    "text": "some something has to coordinate them so",
    "start": "238519",
    "end": "241400"
  },
  {
    "text": "we have another machine called driver",
    "start": "241400",
    "end": "243840"
  },
  {
    "text": "which actually knows about our code uh",
    "start": "243840",
    "end": "247040"
  },
  {
    "text": "and coordinates those executors to",
    "start": "247040",
    "end": "249560"
  },
  {
    "text": "process those",
    "start": "249560",
    "end": "250840"
  },
  {
    "text": "partitions however when you have a piece",
    "start": "250840",
    "end": "253239"
  },
  {
    "text": "of data you want to process you really",
    "start": "253239",
    "end": "256519"
  },
  {
    "text": "don't want to deal with all those",
    "start": "256519",
    "end": "258040"
  },
  {
    "text": "executors and partitions and concurrency",
    "start": "258040",
    "end": "261199"
  },
  {
    "text": "instead uh those Frameworks provide you",
    "start": "261199",
    "end": "264000"
  },
  {
    "text": "a set of P Primitives like not",
    "start": "264000",
    "end": "267600"
  },
  {
    "text": "Primitives set of high level commat s",
    "start": "267600",
    "end": "270120"
  },
  {
    "text": "that we know from functional programming",
    "start": "270120",
    "end": "272120"
  },
  {
    "text": "like maps and filters and group bu and",
    "start": "272120",
    "end": "275120"
  },
  {
    "text": "reduces reduce functions so that when",
    "start": "275120",
    "end": "279000"
  },
  {
    "text": "end user wants to transform a piece of",
    "start": "279000",
    "end": "281039"
  },
  {
    "text": "data he doesn't want he doesn't need to",
    "start": "281039",
    "end": "284800"
  },
  {
    "text": "know about the machinary behind it and",
    "start": "284800",
    "end": "287560"
  },
  {
    "text": "he can express he or she can express the",
    "start": "287560",
    "end": "289880"
  },
  {
    "text": "transformation using the high level",
    "start": "289880",
    "end": "293840"
  },
  {
    "text": "combinators um so distribute data set is",
    "start": "293840",
    "end": "296600"
  },
  {
    "text": "the name of the library I'm developing",
    "start": "296600",
    "end": "300800"
  },
  {
    "text": "and it's written in hll it borrows a lot",
    "start": "300800",
    "end": "306199"
  },
  {
    "text": "of ideas from opach Spark all the ideas",
    "start": "306199",
    "end": "308400"
  },
  {
    "text": "I I mentioned before",
    "start": "308400",
    "end": "311720"
  },
  {
    "text": "and and the API is pretty much like",
    "start": "312120",
    "end": "315360"
  },
  {
    "text": "apach spark uh but the underlying",
    "start": "315360",
    "end": "317520"
  },
  {
    "text": "implementation is quite different so I",
    "start": "317520",
    "end": "319720"
  },
  {
    "text": "uh the objective is not to be a clone of",
    "start": "319720",
    "end": "322319"
  },
  {
    "text": "aach spark but to be in the same space",
    "start": "322319",
    "end": "326840"
  },
  {
    "text": "um a few differences than apach Spark",
    "start": "326840",
    "end": "329800"
  },
  {
    "text": "first one is that I designed it to",
    "start": "329800",
    "end": "331600"
  },
  {
    "text": "compose nicely with the hill ecosystem",
    "start": "331600",
    "end": "334479"
  },
  {
    "text": "so this data set does not come batteries",
    "start": "334479",
    "end": "337319"
  },
  {
    "text": "included it doesn't support many",
    "start": "337319",
    "end": "339400"
  },
  {
    "text": "different data formats or it doesn't",
    "start": "339400",
    "end": "341400"
  },
  {
    "text": "support many different compression",
    "start": "341400",
    "end": "343520"
  },
  {
    "text": "algorithms but what it does is that if",
    "start": "343520",
    "end": "345800"
  },
  {
    "text": "you can find the library to do those in",
    "start": "345800",
    "end": "349800"
  },
  {
    "text": "hackage it only takes one or two lines",
    "start": "349800",
    "end": "352039"
  },
  {
    "text": "of code to addit to distribute data set",
    "start": "352039",
    "end": "354240"
  },
  {
    "text": "so um you can just put plug in the parts",
    "start": "354240",
    "end": "359280"
  },
  {
    "text": "you want from anywhere another uh",
    "start": "359280",
    "end": "363000"
  },
  {
    "text": "difference is that I designed the",
    "start": "363000",
    "end": "364520"
  },
  {
    "text": "library to play nicely on this new",
    "start": "364520",
    "end": "368280"
  },
  {
    "text": "function as a service or AKA serverless",
    "start": "368280",
    "end": "371720"
  },
  {
    "text": "offerings from various cloud services",
    "start": "371720",
    "end": "374560"
  },
  {
    "text": "and it provides a few nice benefits that",
    "start": "374560",
    "end": "377800"
  },
  {
    "text": "I'm going to talk about",
    "start": "377800",
    "end": "380039"
  },
  {
    "text": "later um so uh let's talk about how how",
    "start": "380039",
    "end": "383880"
  },
  {
    "text": "it is actually implemented so the first",
    "start": "383880",
    "end": "386720"
  },
  {
    "text": "obstacle I faced when implementing",
    "start": "386720",
    "end": "388960"
  },
  {
    "text": "implementing this was about sharing a",
    "start": "388960",
    "end": "391960"
  },
  {
    "text": "computation sharing a",
    "start": "391960",
    "end": "393880"
  },
  {
    "text": "hcle function across different",
    "start": "393880",
    "end": "397039"
  },
  {
    "text": "machines so if we were using an",
    "start": "397039",
    "end": "399880"
  },
  {
    "text": "interpreted language or if we were using",
    "start": "399880",
    "end": "402000"
  },
  {
    "text": "a language with a portable bite code",
    "start": "402000",
    "end": "403840"
  },
  {
    "text": "like erlank or Java it is relatively",
    "start": "403840",
    "end": "407560"
  },
  {
    "text": "easy to distribute a computation we can",
    "start": "407560",
    "end": "410120"
  },
  {
    "text": "distribute the portable bite code or we",
    "start": "410120",
    "end": "412080"
  },
  {
    "text": "can distribute the code itself and on",
    "start": "412080",
    "end": "414199"
  },
  {
    "text": "the remote machine we can eulate it uh",
    "start": "414199",
    "end": "417720"
  },
  {
    "text": "however in has it's not that easy when",
    "start": "417720",
    "end": "419919"
  },
  {
    "text": "you compile a hle execut executable",
    "start": "419919",
    "end": "422479"
  },
  {
    "text": "there is no way to convert a function to",
    "start": "422479",
    "end": "424759"
  },
  {
    "text": "a by string send it across the network",
    "start": "424759",
    "end": "427120"
  },
  {
    "text": "and convert it back to the",
    "start": "427120",
    "end": "429080"
  },
  {
    "text": "function however this problem is solved",
    "start": "429080",
    "end": "432039"
  },
  {
    "text": "by the cloud tle project where instead",
    "start": "432039",
    "end": "436680"
  },
  {
    "text": "of sending the functions themselves they",
    "start": "436680",
    "end": "439919"
  },
  {
    "text": "assign a unique ID to those functions",
    "start": "439919",
    "end": "442400"
  },
  {
    "text": "and communicate using those unique IDs",
    "start": "442400",
    "end": "444520"
  },
  {
    "text": "and the H compiler",
    "start": "444520",
    "end": "446680"
  },
  {
    "text": "GHC uh added added a support for it in",
    "start": "446680",
    "end": "451120"
  },
  {
    "text": "the name of static",
    "start": "451120",
    "end": "453160"
  },
  {
    "text": "pointers and using that if if you have",
    "start": "453160",
    "end": "456560"
  },
  {
    "text": "an expression if you use the static",
    "start": "456560",
    "end": "459160"
  },
  {
    "text": "keyword if you put a static if you put",
    "start": "459160",
    "end": "461479"
  },
  {
    "text": "the static keyword in front of that",
    "start": "461479",
    "end": "463919"
  },
  {
    "text": "expression uh GHC will add it to add",
    "start": "463919",
    "end": "467120"
  },
  {
    "text": "that expression to a table embedded in",
    "start": "467120",
    "end": "469520"
  },
  {
    "text": "your executable and return you a ID",
    "start": "469520",
    "end": "473240"
  },
  {
    "text": "called Static pointer that refers to",
    "start": "473240",
    "end": "475120"
  },
  {
    "text": "that and that ID can be sent across the",
    "start": "475120",
    "end": "477479"
  },
  {
    "text": "network and if you are using the same is",
    "start": "477479",
    "end": "480000"
  },
  {
    "text": "executable on remote machine you can get",
    "start": "480000",
    "end": "482159"
  },
  {
    "text": "back your original function so this is",
    "start": "482159",
    "end": "484840"
  },
  {
    "text": "exactly what I wanted except for one",
    "start": "484840",
    "end": "487720"
  },
  {
    "text": "thing where I wanted those static",
    "start": "487720",
    "end": "489919"
  },
  {
    "text": "pointers to compose with each other so",
    "start": "489919",
    "end": "492400"
  },
  {
    "text": "when you have multiple static pointers I",
    "start": "492400",
    "end": "494520"
  },
  {
    "text": "want to be able to uh combine them",
    "start": "494520",
    "end": "497919"
  },
  {
    "text": "together to get bigger and bigger",
    "start": "497919",
    "end": "499800"
  },
  {
    "text": "computations but static pointers by them",
    "start": "499800",
    "end": "502599"
  },
  {
    "text": "by itself does not provide disability",
    "start": "502599",
    "end": "505240"
  },
  {
    "text": "however however there's a library in",
    "start": "505240",
    "end": "507520"
  },
  {
    "text": "hackage called distributed closure",
    "start": "507520",
    "end": "510360"
  },
  {
    "text": "which provides you an algebraic data",
    "start": "510360",
    "end": "512760"
  },
  {
    "text": "type on top of static pointers and it",
    "start": "512760",
    "end": "515560"
  },
  {
    "text": "gives you the ability to uh combine",
    "start": "515560",
    "end": "519760"
  },
  {
    "text": "those compose those static pointers um",
    "start": "519760",
    "end": "523479"
  },
  {
    "text": "with with with other static pointers or",
    "start": "523480",
    "end": "527600"
  },
  {
    "text": "with runtime values if they are",
    "start": "527600",
    "end": "530279"
  },
  {
    "text": "serializable so uh when you have this",
    "start": "530279",
    "end": "533480"
  },
  {
    "text": "closure data type uh then you can",
    "start": "533480",
    "end": "535800"
  },
  {
    "text": "express any almost any computation you",
    "start": "535800",
    "end": "538440"
  },
  {
    "text": "want and you can send them across the",
    "start": "538440",
    "end": "541000"
  },
  {
    "text": "network um turns out once you have this",
    "start": "541000",
    "end": "545160"
  },
  {
    "text": "ability to have",
    "start": "545160",
    "end": "548120"
  },
  {
    "text": "composable uh serializable functions",
    "start": "548120",
    "end": "550600"
  },
  {
    "text": "building a data processing framework on",
    "start": "550600",
    "end": "552480"
  },
  {
    "text": "top is not that hard the uh first thing",
    "start": "552480",
    "end": "556240"
  },
  {
    "text": "you need is a definition of a partition",
    "start": "556240",
    "end": "560040"
  },
  {
    "text": "so in this framework a partition is just",
    "start": "560040",
    "end": "562760"
  },
  {
    "text": "a conduit which produces values of of",
    "start": "562760",
    "end": "566640"
  },
  {
    "text": "any type uh if you are not familiar",
    "start": "566640",
    "end": "569440"
  },
  {
    "text": "familiar year with the hle ecosystem a",
    "start": "569440",
    "end": "572000"
  },
  {
    "text": "part A a closure sorry a conduit is",
    "start": "572000",
    "end": "576040"
  },
  {
    "text": "something like a stream processor so",
    "start": "576040",
    "end": "578480"
  },
  {
    "text": "whenever you see conduit a it means that",
    "start": "578480",
    "end": "581040"
  },
  {
    "text": "it's a stream processor which can take",
    "start": "581040",
    "end": "583160"
  },
  {
    "text": "many A's and yield many",
    "start": "583160",
    "end": "585320"
  },
  {
    "text": "B's um so a partition is a just a stream",
    "start": "585320",
    "end": "588480"
  },
  {
    "text": "processor which produces A's and since",
    "start": "588480",
    "end": "592600"
  },
  {
    "text": "it's a closure it means that I can send",
    "start": "592600",
    "end": "595160"
  },
  {
    "text": "I can send it across the network and run",
    "start": "595160",
    "end": "597600"
  },
  {
    "text": "it on remote exec",
    "start": "597600",
    "end": "601320"
  },
  {
    "text": "so the uh a data set is",
    "start": "601320",
    "end": "605320"
  },
  {
    "text": "U um is a data have with multiple",
    "start": "605320",
    "end": "608360"
  },
  {
    "text": "Constructors and the first one is called",
    "start": "608360",
    "end": "610560"
  },
  {
    "text": "D external this D external is the only",
    "start": "610560",
    "end": "613880"
  },
  {
    "text": "way to create a data set from scratch",
    "start": "613880",
    "end": "615880"
  },
  {
    "text": "where you can provide a bunch of",
    "start": "615880",
    "end": "617120"
  },
  {
    "text": "partitions and it will give you back a",
    "start": "617120",
    "end": "618760"
  },
  {
    "text": "data set and this is how you integrate",
    "start": "618760",
    "end": "622160"
  },
  {
    "text": "your ex existing data to distributed",
    "start": "622160",
    "end": "624800"
  },
  {
    "text": "data set however one once you have a",
    "start": "624800",
    "end": "627959"
  },
  {
    "text": "data set and distribute data set gives",
    "start": "627959",
    "end": "630079"
  },
  {
    "text": "you the ability to transform those with",
    "start": "630079",
    "end": "632480"
  },
  {
    "text": "the with this combinator called",
    "start": "632480",
    "end": "635200"
  },
  {
    "text": "dpip um a d pipe tells you that if you",
    "start": "635200",
    "end": "639600"
  },
  {
    "text": "have a conduit from A to B then I can",
    "start": "639600",
    "end": "644279"
  },
  {
    "text": "convert a data set of a to a data set of",
    "start": "644279",
    "end": "646639"
  },
  {
    "text": "B and how it does that is that it sends",
    "start": "646639",
    "end": "649440"
  },
  {
    "text": "the conduit to to those hundreds of",
    "start": "649440",
    "end": "653600"
  },
  {
    "text": "executors passes every partition through",
    "start": "653600",
    "end": "656320"
  },
  {
    "text": "those conduits and calls the result",
    "start": "656320",
    "end": "658720"
  },
  {
    "text": "resulting set of partitions a new data",
    "start": "658720",
    "end": "661600"
  },
  {
    "text": "set so as you can imagine once you have",
    "start": "661600",
    "end": "664440"
  },
  {
    "text": "this combinator you can Implement things",
    "start": "664440",
    "end": "666160"
  },
  {
    "text": "like maps and filters quite easy by just",
    "start": "666160",
    "end": "668880"
  },
  {
    "text": "passing different",
    "start": "668880",
    "end": "670920"
  },
  {
    "text": "conduits um however there are some",
    "start": "670920",
    "end": "673720"
  },
  {
    "text": "Transformations you cannot express and",
    "start": "673720",
    "end": "678040"
  },
  {
    "text": "and those are the Transformations which",
    "start": "678040",
    "end": "680800"
  },
  {
    "text": "um uses information from multiple input",
    "start": "680800",
    "end": "684600"
  },
  {
    "text": "rows to give the output Row for example",
    "start": "684600",
    "end": "686680"
  },
  {
    "text": "let's say that you wanted to",
    "start": "686680",
    "end": "689360"
  },
  {
    "text": "Implement something which duplicates the",
    "start": "689360",
    "end": "691519"
  },
  {
    "text": "roles in a data set what we can do is",
    "start": "691519",
    "end": "694160"
  },
  {
    "text": "that we can use this dpip Constructor to",
    "start": "694160",
    "end": "697160"
  },
  {
    "text": "D duplicate rows within a partition",
    "start": "697160",
    "end": "700040"
  },
  {
    "text": "however that doesn't give us the result",
    "start": "700040",
    "end": "702200"
  },
  {
    "text": "we want because there can still be",
    "start": "702200",
    "end": "704079"
  },
  {
    "text": "duplicates across different partitions",
    "start": "704079",
    "end": "706720"
  },
  {
    "text": "so what we need to do is that somehow we",
    "start": "706720",
    "end": "708920"
  },
  {
    "text": "need to change the partition partition",
    "start": "708920",
    "end": "711480"
  },
  {
    "text": "structure so that the relevant roles are",
    "start": "711480",
    "end": "714040"
  },
  {
    "text": "in the same partition and the D",
    "start": "714040",
    "end": "716120"
  },
  {
    "text": "partition combinator does that what it",
    "start": "716120",
    "end": "718639"
  },
  {
    "text": "says is that that if you give me a key",
    "start": "718639",
    "end": "720639"
  },
  {
    "text": "function and a data set I can give you",
    "start": "720639",
    "end": "723639"
  },
  {
    "text": "another data set with the same type but",
    "start": "723639",
    "end": "726200"
  },
  {
    "text": "the difference is that the the returning",
    "start": "726200",
    "end": "729040"
  },
  {
    "text": "data set has this invariant that every",
    "start": "729040",
    "end": "732079"
  },
  {
    "text": "row sharing the same key according to",
    "start": "732079",
    "end": "734720"
  },
  {
    "text": "this key function will be on the same",
    "start": "734720",
    "end": "737199"
  },
  {
    "text": "partition in the",
    "start": "737199",
    "end": "738560"
  },
  {
    "text": "end so now with this combinator what I",
    "start": "738560",
    "end": "741800"
  },
  {
    "text": "can do is that I can first call the",
    "start": "741800",
    "end": "743639"
  },
  {
    "text": "partition to make sure that every row",
    "start": "743639",
    "end": "746360"
  },
  {
    "text": "with the same uh same value is to be on",
    "start": "746360",
    "end": "750160"
  },
  {
    "text": "the same partition and then I call my",
    "start": "750160",
    "end": "752440"
  },
  {
    "text": "dpip function to to duplicate to remove",
    "start": "752440",
    "end": "755320"
  },
  {
    "text": "the duplicates and after that I know",
    "start": "755320",
    "end": "757560"
  },
  {
    "text": "that there is no",
    "start": "757560",
    "end": "759000"
  },
  {
    "text": "duplicates so turns out just having",
    "start": "759000",
    "end": "761760"
  },
  {
    "text": "those functions is uh enough to express",
    "start": "761760",
    "end": "764800"
  },
  {
    "text": "everything apach spark can",
    "start": "764800",
    "end": "766839"
  },
  {
    "text": "express uh and there is just one more",
    "start": "766839",
    "end": "770000"
  },
  {
    "text": "type I added on top to make things a bit",
    "start": "770000",
    "end": "772079"
  },
  {
    "text": "nicer and it's called an aggregation so",
    "start": "772079",
    "end": "775880"
  },
  {
    "text": "turns out when you are dealing large",
    "start": "775880",
    "end": "777839"
  },
  {
    "text": "amount of data aggregated it is quite",
    "start": "777839",
    "end": "780120"
  },
  {
    "text": "useful because you want to make it",
    "start": "780120",
    "end": "782560"
  },
  {
    "text": "smaller so that you can understand",
    "start": "782560",
    "end": "783920"
  },
  {
    "text": "what's going on so an aggregation is",
    "start": "783920",
    "end": "786199"
  },
  {
    "text": "something which uh re which combines",
    "start": "786199",
    "end": "789480"
  },
  {
    "text": "many A's to a single B and it also runs",
    "start": "789480",
    "end": "793199"
  },
  {
    "text": "in in this massively parallel fashion so",
    "start": "793199",
    "end": "796680"
  },
  {
    "text": "how",
    "start": "796680",
    "end": "797440"
  },
  {
    "text": "it what it does is that it first",
    "start": "797440",
    "end": "799720"
  },
  {
    "text": "Aggregates every partition within itself",
    "start": "799720",
    "end": "802800"
  },
  {
    "text": "and repartition it and",
    "start": "802800",
    "end": "805639"
  },
  {
    "text": "then Aggregates those results and turns",
    "start": "805639",
    "end": "808880"
  },
  {
    "text": "out this concept is pretty familiar in",
    "start": "808880",
    "end": "813320"
  },
  {
    "text": "hll and represented as a monoid if you",
    "start": "813320",
    "end": "816600"
  },
  {
    "text": "if your R are monoids then you can",
    "start": "816600",
    "end": "819000"
  },
  {
    "text": "concatenate every partition and then",
    "start": "819000",
    "end": "821800"
  },
  {
    "text": "concatenate the results conc concatenate",
    "start": "821800",
    "end": "825120"
  },
  {
    "text": "their results and it is exactly the same",
    "start": "825120",
    "end": "828240"
  },
  {
    "text": "as concatenating every value",
    "start": "828240",
    "end": "830959"
  },
  {
    "text": "sequentially and the reason is that mon",
    "start": "830959",
    "end": "833160"
  },
  {
    "text": "are associative so it doesn't matter uh",
    "start": "833160",
    "end": "836680"
  },
  {
    "text": "in which order you do your combinations",
    "start": "836680",
    "end": "840040"
  },
  {
    "text": "um so this aggregate from monoid",
    "start": "840040",
    "end": "842040"
  },
  {
    "text": "function says that if you give me a",
    "start": "842040",
    "end": "844680"
  },
  {
    "text": "proof that something is a monoid then I",
    "start": "844680",
    "end": "846720"
  },
  {
    "text": "can return you an aggregation that does",
    "start": "846720",
    "end": "849000"
  },
  {
    "text": "the",
    "start": "849000",
    "end": "850279"
  },
  {
    "text": "concatenation",
    "start": "850279",
    "end": "852040"
  },
  {
    "text": "and so once you have an",
    "start": "852040",
    "end": "855120"
  },
  {
    "text": "aggregation what you can do is that you",
    "start": "855120",
    "end": "857160"
  },
  {
    "text": "can either uh apply it to to the whole",
    "start": "857160",
    "end": "861160"
  },
  {
    "text": "data set and get get a get a value back",
    "start": "861160",
    "end": "865000"
  },
  {
    "text": "or you can apply it to the rows sharing",
    "start": "865000",
    "end": "868800"
  },
  {
    "text": "the sharing a specific key so that you",
    "start": "868800",
    "end": "871000"
  },
  {
    "text": "can answer to queries",
    "start": "871000",
    "end": "873600"
  },
  {
    "text": "like um like what is my yearly income",
    "start": "873600",
    "end": "877079"
  },
  {
    "text": "for the last six years or things like",
    "start": "877079",
    "end": "878920"
  },
  {
    "text": "that and thing to mention is that those",
    "start": "878920",
    "end": "881560"
  },
  {
    "text": "aggregations are applicatives and pro",
    "start": "881560",
    "end": "883680"
  },
  {
    "text": "functors it means that you can combine",
    "start": "883680",
    "end": "886279"
  },
  {
    "text": "smaller aggregations together to create",
    "start": "886279",
    "end": "888320"
  },
  {
    "text": "bigger and bigger aggregations and you",
    "start": "888320",
    "end": "891639"
  },
  {
    "text": "can manipulate the input and output type",
    "start": "891639",
    "end": "893839"
  },
  {
    "text": "of an aggregation so that they can work",
    "start": "893839",
    "end": "895920"
  },
  {
    "text": "on different different inputs",
    "start": "895920",
    "end": "900279"
  },
  {
    "text": "um so um up until now we I talked about",
    "start": "900279",
    "end": "905160"
  },
  {
    "text": "how how the",
    "start": "905160",
    "end": "907199"
  },
  {
    "text": "Transformations are expressed but now",
    "start": "907199",
    "end": "910120"
  },
  {
    "text": "I'm going to talk about how they are",
    "start": "910120",
    "end": "911519"
  },
  {
    "text": "actually executed distributed data set",
    "start": "911519",
    "end": "914440"
  },
  {
    "text": "uses uh something called the backand to",
    "start": "914440",
    "end": "917279"
  },
  {
    "text": "actually run the",
    "start": "917279",
    "end": "920120"
  },
  {
    "text": "executors those backends are provided as",
    "start": "920720",
    "end": "924000"
  },
  {
    "text": "external Library so if you don't like",
    "start": "924000",
    "end": "926720"
  },
  {
    "text": "the ones provided by me you are free to",
    "start": "926720",
    "end": "930279"
  },
  {
    "text": "implement it as an external library and",
    "start": "930279",
    "end": "932279"
  },
  {
    "text": "this data set will work with it",
    "start": "932279",
    "end": "936720"
  },
  {
    "text": "um the first backend implemented is",
    "start": "936720",
    "end": "939519"
  },
  {
    "text": "called local process backend which uses",
    "start": "939519",
    "end": "941519"
  },
  {
    "text": "local processes to process the data and",
    "start": "941519",
    "end": "944440"
  },
  {
    "text": "use the local file system to exchange",
    "start": "944440",
    "end": "946959"
  },
  {
    "text": "information uh as you can imagine it's",
    "start": "946959",
    "end": "949240"
  },
  {
    "text": "not really useful because it doesn't",
    "start": "949240",
    "end": "950639"
  },
  {
    "text": "give you any speed up but it's really",
    "start": "950639",
    "end": "952040"
  },
  {
    "text": "useful when you are writing your unit",
    "start": "952040",
    "end": "953800"
  },
  {
    "text": "test or when you're are developing the",
    "start": "953800",
    "end": "956839"
  },
  {
    "text": "application but a more exciting back end",
    "start": "956839",
    "end": "959399"
  },
  {
    "text": "is called distributed data set AWS where",
    "start": "959399",
    "end": "962240"
  },
  {
    "text": "it uses AWS Lambda to run executors",
    "start": "962240",
    "end": "966040"
  },
  {
    "text": "which means that",
    "start": "966040",
    "end": "968480"
  },
  {
    "text": "um without requiring any infrastructure",
    "start": "968480",
    "end": "971880"
  },
  {
    "text": "you can run thousands of executors um in",
    "start": "971880",
    "end": "975440"
  },
  {
    "text": "seconds which is uh perfect for our use",
    "start": "975440",
    "end": "978759"
  },
  {
    "text": "case because that's what we want we want",
    "start": "978759",
    "end": "980399"
  },
  {
    "text": "to um use thousands of uh thousands of",
    "start": "980399",
    "end": "985800"
  },
  {
    "text": "containers in a really short time to get",
    "start": "985800",
    "end": "988519"
  },
  {
    "text": "our result results faster uh and another",
    "start": "988519",
    "end": "991759"
  },
  {
    "text": "thing is that as I said it doesn't",
    "start": "991759",
    "end": "993120"
  },
  {
    "text": "require any any infrastructure so if you",
    "start": "993120",
    "end": "995720"
  },
  {
    "text": "only have",
    "start": "995720",
    "end": "997680"
  },
  {
    "text": "your uh have your AWS credentials on an",
    "start": "997680",
    "end": "1001480"
  },
  {
    "text": "empty AWS account this backend will work",
    "start": "1001480",
    "end": "1005560"
  },
  {
    "text": "so since we have everything ready uh to",
    "start": "1005560",
    "end": "1009120"
  },
  {
    "text": "run",
    "start": "1009120",
    "end": "1010000"
  },
  {
    "text": "those to do the aggregations let's look",
    "start": "1010000",
    "end": "1012720"
  },
  {
    "text": "at an example so this example is uh the",
    "start": "1012720",
    "end": "1018000"
  },
  {
    "text": "objective of of this toy example is",
    "start": "1018000",
    "end": "1020880"
  },
  {
    "text": "finding the GitHub users who use the",
    "start": "1020880",
    "end": "1023799"
  },
  {
    "text": "word cabal in their commit messages the",
    "start": "1023799",
    "end": "1027160"
  },
  {
    "text": "most",
    "start": "1027160",
    "end": "1029000"
  },
  {
    "text": "um so first thing we are doing is that",
    "start": "1029000",
    "end": "1032160"
  },
  {
    "text": "um I'm using this GH arive function",
    "start": "1032160",
    "end": "1034959"
  },
  {
    "text": "which returns me a data set of events",
    "start": "1034959",
    "end": "1037319"
  },
  {
    "text": "from GitHub and I'm using it to fetch",
    "start": "1037319",
    "end": "1040240"
  },
  {
    "text": "every public GitHub GitHub event",
    "start": "1040240",
    "end": "1042520"
  },
  {
    "text": "happened on 2018 so it's like relatively",
    "start": "1042520",
    "end": "1045600"
  },
  {
    "text": "large amount of data first thing I do is",
    "start": "1045600",
    "end": "1048240"
  },
  {
    "text": "that I take this event I extract the",
    "start": "1048240",
    "end": "1051640"
  },
  {
    "text": "event",
    "start": "1051640",
    "end": "1052640"
  },
  {
    "text": "author um and then if that event is a",
    "start": "1052640",
    "end": "1056360"
  },
  {
    "text": "push event I get the commits and get the",
    "start": "1056360",
    "end": "1058919"
  },
  {
    "text": "commit messages and I create nice tles",
    "start": "1058919",
    "end": "1062520"
  },
  {
    "text": "at this point I have a data set of a tle",
    "start": "1062520",
    "end": "1065080"
  },
  {
    "text": "where the first element is a GitHub user",
    "start": "1065080",
    "end": "1066799"
  },
  {
    "text": "and second element is a commit message I",
    "start": "1066799",
    "end": "1069960"
  },
  {
    "text": "filter the commits if they contain the",
    "start": "1069960",
    "end": "1072720"
  },
  {
    "text": "word cabal and case",
    "start": "1072720",
    "end": "1076520"
  },
  {
    "text": "insensitively and next what I do is that",
    "start": "1076520",
    "end": "1079559"
  },
  {
    "text": "I use the group degreg function to group",
    "start": "1079559",
    "end": "1082440"
  },
  {
    "text": "them by GitHub users and count how many",
    "start": "1082440",
    "end": "1085960"
  },
  {
    "text": "commits they have and after this I have",
    "start": "1085960",
    "end": "1088880"
  },
  {
    "text": "a data set of a tle where the first",
    "start": "1088880",
    "end": "1090880"
  },
  {
    "text": "element is a GitHub user and the second",
    "start": "1090880",
    "end": "1092559"
  },
  {
    "text": "element is the number of times they use",
    "start": "1092559",
    "end": "1095679"
  },
  {
    "text": "the word cabal in their commit messages",
    "start": "1095679",
    "end": "1098520"
  },
  {
    "text": "and then I run one more aggregation",
    "start": "1098520",
    "end": "1102400"
  },
  {
    "text": "to um to get the top",
    "start": "1102400",
    "end": "1105360"
  },
  {
    "text": "20 uh this aggregation fetches the",
    "start": "1105360",
    "end": "1107760"
  },
  {
    "text": "results to the driver so that I can",
    "start": "1107760",
    "end": "1109640"
  },
  {
    "text": "print them print them to screen",
    "start": "1109640",
    "end": "1113280"
  },
  {
    "text": "um a few things I want to mention uh as",
    "start": "1113280",
    "end": "1117039"
  },
  {
    "text": "you can see all the Transformations we",
    "start": "1117039",
    "end": "1119360"
  },
  {
    "text": "defined is just ordinary hll functions",
    "start": "1119360",
    "end": "1122799"
  },
  {
    "text": "using ordinary hcll types and you can",
    "start": "1122799",
    "end": "1124880"
  },
  {
    "text": "use any hackage Library you want so I",
    "start": "1124880",
    "end": "1126640"
  },
  {
    "text": "use lenses and I use text Library um and",
    "start": "1126640",
    "end": "1131840"
  },
  {
    "text": "another thing is that this looks at",
    "start": "1131840",
    "end": "1133960"
  },
  {
    "text": "least to me this looks like that this",
    "start": "1133960",
    "end": "1136799"
  },
  {
    "text": "looks pretty natural it isn't like a",
    "start": "1136799",
    "end": "1139280"
  },
  {
    "text": "weird uh weird DSL with strange",
    "start": "1139280",
    "end": "1143320"
  },
  {
    "text": "operators um so when",
    "start": "1143320",
    "end": "1145840"
  },
  {
    "text": "you when you run this code it is going",
    "start": "1145840",
    "end": "1148600"
  },
  {
    "text": "to download 130 G about 130 gab of data",
    "start": "1148600",
    "end": "1153240"
  },
  {
    "text": "from GH archive uh it is going going to",
    "start": "1153240",
    "end": "1157000"
  },
  {
    "text": "decompress it and it will result in",
    "start": "1157000",
    "end": "1159480"
  },
  {
    "text": "almost a terabyte of",
    "start": "1159480",
    "end": "1161400"
  },
  {
    "text": "Json um it is going to use about 2,000",
    "start": "1161400",
    "end": "1164440"
  },
  {
    "text": "executors to process",
    "start": "1164440",
    "end": "1166520"
  },
  {
    "text": "those process this data in in parallel",
    "start": "1166520",
    "end": "1169400"
  },
  {
    "text": "like do the downloads and extraction and",
    "start": "1169400",
    "end": "1172480"
  },
  {
    "text": "all those",
    "start": "1172480",
    "end": "1173640"
  },
  {
    "text": "Transformations and the computation will",
    "start": "1173640",
    "end": "1175840"
  },
  {
    "text": "finish in less than 2 minutes including",
    "start": "1175840",
    "end": "1178039"
  },
  {
    "text": "the time to send our binary to cloud and",
    "start": "1178039",
    "end": "1181640"
  },
  {
    "text": "start all the containers and",
    "start": "1181640",
    "end": "1183679"
  },
  {
    "text": "Etc",
    "start": "1183679",
    "end": "1185799"
  },
  {
    "text": "um another thing to mention is that even",
    "start": "1185799",
    "end": "1188320"
  },
  {
    "text": "if we even even if we were to use a much",
    "start": "1188320",
    "end": "1191679"
  },
  {
    "text": "bigger data set like GitHub event for",
    "start": "1191679",
    "end": "1193760"
  },
  {
    "text": "the last 10 years or something like that",
    "start": "1193760",
    "end": "1196120"
  },
  {
    "text": "our execution time wouldn't increase",
    "start": "1196120",
    "end": "1198240"
  },
  {
    "text": "that much only thing that will that will",
    "start": "1198240",
    "end": "1200320"
  },
  {
    "text": "happen is that we are going to use more",
    "start": "1200320",
    "end": "1202480"
  },
  {
    "text": "executors and spend more money and",
    "start": "1202480",
    "end": "1205480"
  },
  {
    "text": "execution time will increase but not",
    "start": "1205480",
    "end": "1208679"
  },
  {
    "text": "linear to the data",
    "start": "1208679",
    "end": "1211919"
  },
  {
    "text": "size um so pretty much this is",
    "start": "1211919",
    "end": "1214880"
  },
  {
    "text": "everything distributed data set uh can",
    "start": "1214880",
    "end": "1219039"
  },
  {
    "text": "do um but um it is not the only library",
    "start": "1219039",
    "end": "1224080"
  },
  {
    "text": "in hackage to do those things uh the",
    "start": "1224080",
    "end": "1226600"
  },
  {
    "text": "first one and the most famous one is",
    "start": "1226600",
    "end": "1229200"
  },
  {
    "text": "Sparkle it's a library it is developed",
    "start": "1229200",
    "end": "1232679"
  },
  {
    "text": "by TW iio what it does is that it wraps",
    "start": "1232679",
    "end": "1235520"
  },
  {
    "text": "a spark and let you write the",
    "start": "1235520",
    "end": "1238240"
  },
  {
    "text": "transformations in let you write",
    "start": "1238240",
    "end": "1240440"
  },
  {
    "text": "transformations in hll but but in the",
    "start": "1240440",
    "end": "1243520"
  },
  {
    "text": "end runs them using the apach spark the",
    "start": "1243520",
    "end": "1246440"
  },
  {
    "text": "advantage is that U it supports",
    "start": "1246440",
    "end": "1248919"
  },
  {
    "text": "everything apach spark supports easily",
    "start": "1248919",
    "end": "1251760"
  },
  {
    "text": "the disadvantage is that it's a bit more",
    "start": "1251760",
    "end": "1253600"
  },
  {
    "text": "complex because now you have a hasle",
    "start": "1253600",
    "end": "1255840"
  },
  {
    "text": "executable embedded in a jar where",
    "start": "1255840",
    "end": "1258320"
  },
  {
    "text": "there's like jvm and hascol runtime",
    "start": "1258320",
    "end": "1260559"
  },
  {
    "text": "system and they communicate with each",
    "start": "1260559",
    "end": "1262000"
  },
  {
    "text": "other and you use those massive",
    "start": "1262000",
    "end": "1264080"
  },
  {
    "text": "softwares like Hadoop and Spark so it's",
    "start": "1264080",
    "end": "1267080"
  },
  {
    "text": "a bit more complex another one is called",
    "start": "1267080",
    "end": "1269919"
  },
  {
    "text": "hpark h spark is a port of apach spark",
    "start": "1269919",
    "end": "1274320"
  },
  {
    "text": "uh to haskill using distributed process",
    "start": "1274320",
    "end": "1276480"
  },
  {
    "text": "so it's pretty similar to what I'm doing",
    "start": "1276480",
    "end": "1278320"
  },
  {
    "text": "the main differences are um it is much",
    "start": "1278320",
    "end": "1281679"
  },
  {
    "text": "more faithful to what What spark is so",
    "start": "1281679",
    "end": "1284679"
  },
  {
    "text": "the the data types they are using and",
    "start": "1284679",
    "end": "1287159"
  },
  {
    "text": "the way it uses EXA UT are pretty",
    "start": "1287159",
    "end": "1289960"
  },
  {
    "text": "similar and also it doesn't have any",
    "start": "1289960",
    "end": "1292720"
  },
  {
    "text": "commits on the last four years I think",
    "start": "1292720",
    "end": "1295120"
  },
  {
    "text": "so it's not really",
    "start": "1295120",
    "end": "1296840"
  },
  {
    "text": "maintained so this is pretty much all I",
    "start": "1296840",
    "end": "1299520"
  },
  {
    "text": "wanted to talk about if you want to use",
    "start": "1299520",
    "end": "1302080"
  },
  {
    "text": "the library read the source code like",
    "start": "1302080",
    "end": "1304799"
  },
  {
    "text": "create issues and send PRS this is the",
    "start": "1304799",
    "end": "1307200"
  },
  {
    "text": "GitHub uh GitHub URL I really appreciate",
    "start": "1307200",
    "end": "1310880"
  },
  {
    "text": "if somebody uses it and actually",
    "start": "1310880",
    "end": "1313080"
  },
  {
    "text": "provides me some feedback because",
    "start": "1313080",
    "end": "1315480"
  },
  {
    "text": "currently I'm the only one uh who ever",
    "start": "1315480",
    "end": "1317919"
  },
  {
    "text": "use it",
    "start": "1317919",
    "end": "1319039"
  },
  {
    "text": "and here is my email address if you need",
    "start": "1319039",
    "end": "1321000"
  },
  {
    "text": "to ask anything or like if you have a",
    "start": "1321000",
    "end": "1325360"
  },
  {
    "text": "comment um yeah thank you very much for",
    "start": "1325360",
    "end": "1328440"
  },
  {
    "text": "listening and I hope you found you find",
    "start": "1328440",
    "end": "1331480"
  },
  {
    "text": "it",
    "start": "1331480",
    "end": "1332279"
  },
  {
    "text": "interesting awesome thank you very much",
    "start": "1332279",
    "end": "1336430"
  },
  {
    "text": "[Applause]",
    "start": "1336430",
    "end": "1339650"
  }
]