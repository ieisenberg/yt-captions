[
  {
    "start": "0",
    "end": "55000"
  },
  {
    "text": "[Music]",
    "start": "5870",
    "end": "10049"
  },
  {
    "text": "so the um so to give a background to this um this is something uh you're",
    "start": "12240",
    "end": "18119"
  },
  {
    "text": "going to hear a lot you probably have heard it's just a directed A a cyclic graph and um this was something was",
    "start": "18119",
    "end": "24960"
  },
  {
    "text": "brought up at uh git merge in Paris earlier this year Emma Jane hodin West",
    "start": "24960",
    "end": "30199"
  },
  {
    "text": "be uh is an educator she teaches people about how to use git not people who are",
    "start": "30199",
    "end": "35480"
  },
  {
    "text": "nerds people just trying to get their through a day and get the job done and telling them at an ayc graph is bugger",
    "start": "35480",
    "end": "41879"
  },
  {
    "text": "all use for anything what you really need to do is say okay this is how you get your job done it's task oriented let",
    "start": "41879",
    "end": "48840"
  },
  {
    "text": "them sort of work through themselves okay I want to do this let's try and use gits to get the job done but the reality",
    "start": "48840",
    "end": "56320"
  },
  {
    "start": "55000",
    "end": "141000"
  },
  {
    "text": "of the situation is that this is um not always going to get you through uh the",
    "start": "56320",
    "end": "63039"
  },
  {
    "text": "hard times the reality is that g is an a CYCC graph or it's a set of um objects",
    "start": "63039",
    "end": "69520"
  },
  {
    "text": "I'm never not going to use a cyclic graph again it's never made any bloody sense to me Bugg all Ed for teaching git",
    "start": "69520",
    "end": "75759"
  },
  {
    "text": "but when you hit these these tricky times you got multiple merges going on you've got rebases you got forced pushes",
    "start": "75759",
    "end": "83640"
  },
  {
    "text": "all these things things happening understanding what's happening underneath the hood is very very important without this intern mental",
    "start": "83640",
    "end": "90640"
  },
  {
    "text": "model of how git works it's going to become confusing because git's abstractions are very leaky they you",
    "start": "90640",
    "end": "98200"
  },
  {
    "text": "tend to discover how it works whether you like it or not um it's one of those things like driving a car you know you",
    "start": "98200",
    "end": "104880"
  },
  {
    "text": "don't have to know how an engine works to drive a car but if you know how an engine works you'll be be a better driver or at least be a little bit",
    "start": "104880",
    "end": "110759"
  },
  {
    "text": "easier on on the car this is one of those cases where a little bit of knowledge can go a long way so to follow",
    "start": "110759",
    "end": "119159"
  },
  {
    "text": "up on that we let's just jump straight in um we're going to take you through",
    "start": "119159",
    "end": "124880"
  },
  {
    "text": "the basics of git from the absolute bottom layer and all all the way up to",
    "start": "124880",
    "end": "130160"
  },
  {
    "text": "some of the higher level Concepts G is quite well layered in that sense is idea Concepts built on Concepts built on",
    "start": "130160",
    "end": "137160"
  },
  {
    "text": "Concepts but you go right to the bottom it's very very simple indeed so at its",
    "start": "137160",
    "end": "143200"
  },
  {
    "text": "core the basic OB the basic um building block of git is the blob now blobs can",
    "start": "143200",
    "end": "150599"
  },
  {
    "text": "be different types of things but um that's ultimately what it is if you're dealing with Git you're ultimately",
    "start": "150599",
    "end": "156080"
  },
  {
    "text": "shuffling blobs around and linking up to together and what do I mean by blobs well it's this what you're looking",
    "start": "156080",
    "end": "164440"
  },
  {
    "text": "at now is the entirety of the lowlevel git data model this is it it's that s",
    "start": "164440",
    "end": "173040"
  },
  {
    "text": "simple simple of course being extremely deceptive so what you have here is three",
    "start": "173040",
    "end": "180239"
  },
  {
    "text": "types of blobs one is content that is raw data that is a file you've committed an image you've committed just raw data",
    "start": "180239",
    "end": "188599"
  },
  {
    "text": "files um and they are hashed you what do what skit does it takes them it",
    "start": "188599",
    "end": "194480"
  },
  {
    "text": "compresses them using Z lip puts a header on them hashes the result and then from that point on that piece of",
    "start": "194480",
    "end": "201440"
  },
  {
    "text": "content of the file will always have the same hash now this applies to any",
    "start": "201440",
    "end": "206760"
  },
  {
    "text": "changes as well if you change a file and you add it to git it's a different hash",
    "start": "206760",
    "end": "212560"
  },
  {
    "text": "therefore is a different object and this is how it tracks it o over time every change is is different this is what they",
    "start": "212560",
    "end": "219120"
  },
  {
    "text": "mean by content addressable file system when you hear that phrase every piece of change every change is a a unique hash",
    "start": "219120",
    "end": "226640"
  },
  {
    "text": "in there but objects by themselves in not use you need to kind of tie them",
    "start": "226640",
    "end": "231840"
  },
  {
    "text": "together the next level up is the tree the tree is also a blob it's goes through the same process it's hashed",
    "start": "231840",
    "end": "237760"
  },
  {
    "text": "it's um it's Zed lied it's it's compressed it's hashed and then it's dropped in in in a directory um a tree",
    "start": "237760",
    "end": "243920"
  },
  {
    "text": "is very much like the Unix level file system really any file system it's just a file that lists a bunch of um files by",
    "start": "243920",
    "end": "252280"
  },
  {
    "text": "their hashes their file names some metadata like their um the the file mode",
    "start": "252280",
    "end": "257680"
  },
  {
    "text": "whether it's executable readable writable Etc um and it may also point to other trees so directories contain can",
    "start": "257680",
    "end": "265520"
  },
  {
    "text": "contain other directories trees can contain links to other trees they may also link to other trees eventually to a",
    "start": "265520",
    "end": "272280"
  },
  {
    "text": "file um at the higher level than that is the commit um this is what you're used to dealing with in G you don't have to",
    "start": "272280",
    "end": "278440"
  },
  {
    "text": "you can actually operate at a much lower um level than that if you prepared to go through that process but the commit is",
    "start": "278440",
    "end": "285440"
  },
  {
    "text": "the general unit you're you're working at um and it's how we think about um a",
    "start": "285440",
    "end": "292120"
  },
  {
    "text": "the history um G uh commits point to trees the point to files um and commits",
    "start": "292120",
    "end": "298600"
  },
  {
    "text": "can point to other commits they can have parents and importantly they can have more than one parent but this is all",
    "start": "298600",
    "end": "303919"
  },
  {
    "text": "Theory let's have a look at the actual practice this is like how you can Muck arounds by um yourself on your",
    "start": "303919",
    "end": "311080"
  },
  {
    "text": "computer so can everyone see this no can we possibly turn off these",
    "start": "311080",
    "end": "317360"
  },
  {
    "text": "uh the flood lights yeah here you go so get in it creates as you probably know creat a new",
    "start": "317360",
    "end": "323560"
  },
  {
    "text": "git repository um and inside that is all it is is a a DOT git directory and",
    "start": "323560",
    "end": "329319"
  },
  {
    "text": "inside there is all the metadata the git contains and it's complete as you probably know um so let's look inside",
    "start": "329319",
    "end": "335960"
  },
  {
    "text": "the git objects here there's nothing in there it's it's a new repository it's it's empty so there's nothing to track",
    "start": "335960",
    "end": "342720"
  },
  {
    "text": "let's add some uh something touch is just a unit command that will either update the the modified time or create a",
    "start": "342720",
    "end": "350880"
  },
  {
    "text": "file so we're just creating a purely empty file here and we do get ad as you probably know that doesn't actually",
    "start": "350880",
    "end": "356280"
  },
  {
    "text": "create a commit it doesn't give it history it just says I want you to be aware aare of this file from now on this is something I want you to track and",
    "start": "356280",
    "end": "363240"
  },
  {
    "text": "I'll tell you when to when it's changed so let's go back and look at that um that again the tree command by",
    "start": "363240",
    "end": "370639"
  },
  {
    "start": "366000",
    "end": "437000"
  },
  {
    "text": "the way is just just will just output a pretty printed version of the a directory structure so as you can see",
    "start": "370639",
    "end": "378039"
  },
  {
    "text": "here it creates a blob this is it this is the this is your basic unit that um",
    "start": "378039",
    "end": "384680"
  },
  {
    "text": "empty file has been added it's been compressed which in an empty file makes it actually larger um and then adds a",
    "start": "384680",
    "end": "392400"
  },
  {
    "text": "header onto it and then put it in a directory uh you may notice it's also",
    "start": "392400",
    "end": "397720"
  },
  {
    "text": "that E6 at the start what it does is it spread the load you're going to be creating tens of thousands of these over",
    "start": "397720",
    "end": "404840"
  },
  {
    "text": "the course of a project to spread them out rather than dumping in One Directory it uses the initial two digits to kind",
    "start": "404840",
    "end": "411000"
  },
  {
    "text": "of spread them out across different subdirectories and stop overloading the the iodes this is one of examples is",
    "start": "411000",
    "end": "417800"
  },
  {
    "text": "written by Linus to tals in the original uh um prototype um and it's he's a file",
    "start": "417800",
    "end": "423759"
  },
  {
    "text": "system um operating systems guy so he's thinking about you know how to spread",
    "start": "423759",
    "end": "429160"
  },
  {
    "text": "the load but this is it that you've added that file and now there's an object in in the",
    "start": "429160",
    "end": "434479"
  },
  {
    "text": "tree um so that's pretty much it now obviously just track just dumping",
    "start": "434479",
    "end": "440680"
  },
  {
    "start": "437000",
    "end": "497000"
  },
  {
    "text": "objects in there with no real way of tying them together is pretty much useless so we're just going to create a commit um very s very simple",
    "start": "440680",
    "end": "449759"
  },
  {
    "text": "and this is it that's the blob the original one we",
    "start": "449759",
    "end": "456080"
  },
  {
    "text": "looked at this is the tree this is the the this has a single entry in that tree",
    "start": "456080",
    "end": "461599"
  },
  {
    "text": "that points to that blob and we have the commit which points to the um the tree",
    "start": "461599",
    "end": "468120"
  },
  {
    "text": "so that is pretty much the anatomy of a a commit um now interesting thing I",
    "start": "468120",
    "end": "473479"
  },
  {
    "text": "should probably mention here this blob which contains an empty file has a hash",
    "start": "473479",
    "end": "478560"
  },
  {
    "text": "that hash is that any empty file in any repository anywhere in the world is",
    "start": "478560",
    "end": "484960"
  },
  {
    "text": "always going to have that same hash that's what we're talking about by content addressable file system what the",
    "start": "484960",
    "end": "490319"
  },
  {
    "text": "file contains defines what its identity is",
    "start": "490319",
    "end": "496479"
  },
  {
    "text": "but so this is what we we already got but this is not lot use by itself either",
    "start": "496479",
    "end": "501720"
  },
  {
    "start": "497000",
    "end": "555000"
  },
  {
    "text": "we want to change it's it's a Version Control System we want to add new ver versions to our project over time so",
    "start": "501720",
    "end": "509879"
  },
  {
    "text": "this is what we do each commit can point to a previous commit it has a parent",
    "start": "509879",
    "end": "515959"
  },
  {
    "text": "commit it can actually have more than one parent a concept we'll come back to in a bit but this is how you chain them",
    "start": "515959",
    "end": "522518"
  },
  {
    "text": "to together each um commit points to optionally one or more previous commits",
    "start": "522519",
    "end": "528959"
  },
  {
    "text": "and that is how you define time you start off at the end of your project and you can walk backwards right to the",
    "start": "528959",
    "end": "536160"
  },
  {
    "text": "beginning possibly via going via branches different little different size tracks But ultimately that is git at its",
    "start": "536160",
    "end": "543160"
  },
  {
    "text": "core right there very very s uh simple ideas um what this actually means for",
    "start": "543160",
    "end": "550120"
  },
  {
    "text": "you um and how you can use this we'll come to in a little bit we'll just um show you a little bit a few more little",
    "start": "550120",
    "end": "557640"
  },
  {
    "start": "555000",
    "end": "648000"
  },
  {
    "text": "uh key points one here um is let's create an actual commit for our",
    "start": "557640",
    "end": "564920"
  },
  {
    "text": "our dummy repository so we create it we add it and we notice we have anent highly new blob this is what I'm talking",
    "start": "564920",
    "end": "571279"
  },
  {
    "text": "about every addition of a change to a file creates a new blob every file",
    "start": "571279",
    "end": "578600"
  },
  {
    "text": "change you take an an image you put it into git you change one pixel and it is",
    "start": "578600",
    "end": "584399"
  },
  {
    "text": "now completely new file now that could be quite wasteful um um there are git does use some tricks under the hood to",
    "start": "584399",
    "end": "591720"
  },
  {
    "text": "remove that or optimize this a bit more but you don't need to worry about it too much git is has this idea that um we're",
    "start": "591720",
    "end": "599480"
  },
  {
    "text": "not going to try and Delta encode everything up front we're going to always try and store the true state of",
    "start": "599480",
    "end": "604880"
  },
  {
    "text": "things cuz Delta encoding can improve over time but the your files will should always remain the",
    "start": "604880",
    "end": "610360"
  },
  {
    "text": "same so that is the lowest level of git but once again all we've talked about so",
    "start": "610360",
    "end": "615680"
  },
  {
    "text": "far is hashes everything is a hash now that's not a lot of use in day-to-day use you want to talk about master you",
    "start": "615680",
    "end": "621480"
  },
  {
    "text": "want to talk about my feature Branch you want to talk about this particular version of a release um how G does that",
    "start": "621480",
    "end": "628440"
  },
  {
    "text": "is a slightly higher um level concept called refs um and on top of this it",
    "start": "628440",
    "end": "634440"
  },
  {
    "text": "builds branches and tags which you're probably Vaguely Familiar with um tags",
    "start": "634440",
    "end": "639680"
  },
  {
    "text": "not used quite as much ref branches quite a lot refs are generally not used themselves they're a low-level",
    "start": "639680",
    "end": "647600"
  },
  {
    "text": "concept so what is a ref a ref is just a pointer to an",
    "start": "647600",
    "end": "653680"
  },
  {
    "start": "648000",
    "end": "677000"
  },
  {
    "text": "object that that's it it is a way of saying attaching a name to an object to",
    "start": "653680",
    "end": "660240"
  },
  {
    "text": "a hash the entirety of it very much like a variable say the J jvm there is a an",
    "start": "660240",
    "end": "666800"
  },
  {
    "text": "add it has an address in memory you don't need to worry about that address in memory because you've given it a name",
    "start": "666800",
    "end": "671839"
  },
  {
    "text": "and you use that name from that point on so what is a",
    "start": "671839",
    "end": "677440"
  },
  {
    "start": "677000",
    "end": "731000"
  },
  {
    "text": "branch well a branch is just a a ref pointing to a Divergence from",
    "start": "677440",
    "end": "685760"
  },
  {
    "text": "the main tree so a object has a pair of commit has a parent but the it doesn't",
    "start": "685760",
    "end": "691959"
  },
  {
    "text": "have they don't all necessar have the same parent so I can say well at this point this commit I'm going to go off on",
    "start": "691959",
    "end": "697839"
  },
  {
    "text": "my own branch of control and we just give that um object the parent of that",
    "start": "697839",
    "end": "705160"
  },
  {
    "text": "point we want to diverge from and then we can just add a um a ref which we'll",
    "start": "705160",
    "end": "710279"
  },
  {
    "text": "call a branch from now on and that will be the uh we'll use that to track our",
    "start": "710279",
    "end": "716959"
  },
  {
    "text": "Branch that's pretty much it this is why branching and T and tagging and all these things are very very fast in git",
    "start": "716959",
    "end": "723800"
  },
  {
    "text": "because they are nothing more than moving around a couple of little pointers in files we'll actually show you what it actually looks like in a bit",
    "start": "723800",
    "end": "731839"
  },
  {
    "start": "731000",
    "end": "780000"
  },
  {
    "text": "um and what is a a tag um You probably use tags and most commonly used for",
    "start": "731839",
    "end": "737920"
  },
  {
    "text": "releases um to say this point is if you want to go back and find the this version of release check out this tag",
    "start": "737920",
    "end": "743920"
  },
  {
    "text": "and it will you'll get back to that point in time um and again it's really very simp simple the only real",
    "start": "743920",
    "end": "750320"
  },
  {
    "text": "difference between a branch and a tag is the tags by convention don't change",
    "start": "750320",
    "end": "755720"
  },
  {
    "text": "Branch branches do um as refs they move forward in time um tags uh remain static",
    "start": "755720",
    "end": "764560"
  },
  {
    "text": "over time you can sign tags if you want it to be super accurate um or super secure um but generally speaking we just",
    "start": "764560",
    "end": "771880"
  },
  {
    "text": "trust people to not mock around with tag tag there's no reason why you couldn't go into a git repository and overwrite a tag but you're just not going to make",
    "start": "771880",
    "end": "778160"
  },
  {
    "text": "any friends doing that so let's have a look at this again in Practical terms uh we're going to have a",
    "start": "778160",
    "end": "784000"
  },
  {
    "text": "look inside our git repository our simple git repository here so the First Command I'm doing up here is I'm going",
    "start": "784000",
    "end": "789680"
  },
  {
    "text": "to create a tag called a tag and we're going to give it a um a name we're going to give it a um a message to go with it",
    "start": "789680",
    "end": "796120"
  },
  {
    "text": "which is a normal way of doing things that's slightly different I'm skipping over something here a little bit um",
    "start": "796120",
    "end": "803600"
  },
  {
    "text": "but sorry at its heart it's still basically the same idea it's just a pointer in time what a tag do does with",
    "start": "803600",
    "end": "809399"
  },
  {
    "text": "a with with a a message we'll actually create a mini commit object but you don't have to add a message so you can",
    "start": "809399",
    "end": "814720"
  },
  {
    "text": "create a bare tag that can that is literally just a pointer to to an object a branch is definitely just a pointer to",
    "start": "814720",
    "end": "821560"
  },
  {
    "text": "an object and if we do a the tree this little useful tree command on the git refs sub tree you can see we have we've",
    "start": "821560",
    "end": "829399"
  },
  {
    "text": "created a bunch of files we created a a a file called a branch and we' called created a file under tags called a tag",
    "start": "829399",
    "end": "836720"
  },
  {
    "text": "and if I cat that file cat just blast it out just dumps it out onto the screen what the content of that file is that is",
    "start": "836720",
    "end": "842720"
  },
  {
    "text": "it that is the entirety of what a ref is is just a pointer to a hash this again",
    "start": "842720",
    "end": "850240"
  },
  {
    "text": "is why branching is so fast under Git it is literally writing I I think think",
    "start": "850240",
    "end": "856560"
  },
  {
    "text": "it's 128 letters to a um no it's less than that um whatever number of letters",
    "start": "856560",
    "end": "862079"
  },
  {
    "text": "that that is it's writing it to a file so it happens pretty much instantaneously um so that's basically",
    "start": "862079",
    "end": "869959"
  },
  {
    "text": "the next level up I'm going to talk about um how we manipulate this on a day-to-day basis how how many how many",
    "start": "869959",
    "end": "876360"
  },
  {
    "text": "people here have used reset in git yeah how many people screwed it up and blew",
    "start": "876360",
    "end": "882480"
  },
  {
    "text": "away chunk of yeah it's basically a right of passage um I'm going to show you how to get out of that",
    "start": "882480",
    "end": "888920"
  },
  {
    "text": "situation um reset hard it's great it's awesome um this is what reset is reset moves",
    "start": "888920",
    "end": "897000"
  },
  {
    "start": "894000",
    "end": "964000"
  },
  {
    "text": "refs around now you can literally do this this if yourself if you wanted to by just going into that git refs",
    "start": "897000",
    "end": "903199"
  },
  {
    "text": "directory and overwriting that file it's going having to dig around finding what an alternative hashes and just shove it",
    "start": "903199",
    "end": "908560"
  },
  {
    "text": "in there so that's all re reset is doing now I am glossing over something there",
    "start": "908560",
    "end": "913600"
  },
  {
    "text": "that um reset has different modes and it will also modify something like your staging area and your um your working",
    "start": "913600",
    "end": "921360"
  },
  {
    "text": "tree and hard is particularly aggressive it will blow away any changes that you have uncommitted things like that but at",
    "start": "921360",
    "end": "927639"
  },
  {
    "text": "its core again um it will just shift the re the the ref now so at this point as",
    "start": "927639",
    "end": "936399"
  },
  {
    "text": "you can see it doesn't it doesn't actually destroy any data that's actually inside your repository it just",
    "start": "936399",
    "end": "942720"
  },
  {
    "text": "kinds it you have to know the magic hash to get back there so I've reset it I've",
    "start": "942720",
    "end": "948279"
  },
  {
    "text": "reset I've screwed up how do I get back to that state well I don't know I have no idea what the um the previous hash",
    "start": "948279",
    "end": "955360"
  },
  {
    "text": "was and i' have to go digging around the repository with possibly 10 of thousands of objects in it to find out which one",
    "start": "955360",
    "end": "961279"
  },
  {
    "text": "was my magic object from the past or we could use ref",
    "start": "961279",
    "end": "966560"
  },
  {
    "start": "964000",
    "end": "1075000"
  },
  {
    "text": "log every time you modify via git not via man directly manipulating files or",
    "start": "966560",
    "end": "972319"
  },
  {
    "text": "anything but every time you do do a reset or other manipulation of references git keeps a record of it in a",
    "start": "972319",
    "end": "980160"
  },
  {
    "text": "history file that's called The Ref log so if you screw up anything you do a",
    "start": "980160",
    "end": "985440"
  },
  {
    "text": "rebase you do um a reset and you just decide I want to get back to that previous state that that state I was I",
    "start": "985440",
    "end": "993199"
  },
  {
    "text": "want to I want to an undo this is it if I I can look through here it's mildly",
    "start": "993199",
    "end": "999800"
  },
  {
    "text": "commented you got to kind know how to read it a little bit but it's fairly obvious if you know the history of your",
    "start": "999800",
    "end": "1005079"
  },
  {
    "text": "project itself but what we do is we uh can look up what the previous hash was",
    "start": "1005079",
    "end": "1011880"
  },
  {
    "text": "so we're back to hashes again so we we look up we go ah here's where we moved ahead we want to actually go back to the",
    "start": "1011880",
    "end": "1018600"
  },
  {
    "text": "pr previous version I shouldn't have done",
    "start": "1018600",
    "end": "1022759"
  },
  {
    "text": "that sorry yeah um we'll come back to that sorry how we fixed that I thought I was doing something else there um so ref",
    "start": "1026120",
    "end": "1033480"
  },
  {
    "text": "log is something that keeps a history but only keeps for 90 days by the way um now as you've seen um when you add",
    "start": "1033480",
    "end": "1042319"
  },
  {
    "text": "things to a git repository it creates objects and if you're doing add add add add add in multiple versions of of a of",
    "start": "1042319",
    "end": "1049760"
  },
  {
    "text": "of adding a file to a repository you're creating a whole bunch of objects which are never actually used and this builds",
    "start": "1049760",
    "end": "1055000"
  },
  {
    "text": "up over time so how does git manage this kind these kind of orphaned useless",
    "start": "1055000",
    "end": "1060200"
  },
  {
    "text": "intermediate objects really kind of spoil the the the",
    "start": "1060200",
    "end": "1065320"
  },
  {
    "text": "reveal here um so what we um what it",
    "start": "1065320",
    "end": "1071000"
  },
  {
    "text": "does it has something called um GC get if you're you think about it if",
    "start": "1071000",
    "end": "1077720"
  },
  {
    "start": "1075000",
    "end": "1155000"
  },
  {
    "text": "you ever worked with a jvm or really any kind of objectoriented Lang uh language or really any virtual machine system at",
    "start": "1077720",
    "end": "1084679"
  },
  {
    "text": "all it has the idea of garbage collection garbage collection is just",
    "start": "1084679",
    "end": "1090000"
  },
  {
    "text": "find all the objects which no longer have valid references to them and just reclaim them or in this case delete them",
    "start": "1090000",
    "end": "1096320"
  },
  {
    "text": "from the disk so what happens with GC is it runs around finding any that no",
    "start": "1096320",
    "end": "1103000"
  },
  {
    "text": "longer has valid references to it and will just delete them it'll find all",
    "start": "1103000",
    "end": "1108320"
  },
  {
    "text": "references walk back through them find out which ones are are dangling at the end of it and delete them now it's not",
    "start": "1108320",
    "end": "1114280"
  },
  {
    "text": "too aggressive about that in particular it doesn't delete anything until it's at least two weeks old however you can",
    "start": "1114280",
    "end": "1121159"
  },
  {
    "text": "override that you can set it longer you can set it shorter or in this case use prune equals all will blow away anything",
    "start": "1121159",
    "end": "1127039"
  },
  {
    "text": "so this is really why if you do that that reset don't go running around doing",
    "start": "1127039",
    "end": "1132520"
  },
  {
    "text": "G uh gc's aggressive G GCS afterwards cuz you're destroying some of your history you're destroying your ability",
    "start": "1132520",
    "end": "1138440"
  },
  {
    "text": "to recover uh that said you wouldn't normally do this G will generally do this for you the other thing that it",
    "start": "1138440",
    "end": "1145480"
  },
  {
    "text": "does and it we're down into I was always reticent to even talk about this because it's not really important but it's kind",
    "start": "1145480",
    "end": "1151799"
  },
  {
    "text": "of useful to know or or at least interesting to know is it doesn't",
    "start": "1151799",
    "end": "1157159"
  },
  {
    "start": "1155000",
    "end": "1328000"
  },
  {
    "text": "just prune objects out the tree it Rec compresses them so what it does is um",
    "start": "1157159",
    "end": "1164880"
  },
  {
    "text": "subversion originally or well in fact it always has always stored the differences between files over time that seemed",
    "start": "1164880",
    "end": "1172280"
  },
  {
    "text": "great at the time but it meant if you wanted to go back and actually modify anything in it it was virtually impossible because you had to basically",
    "start": "1172280",
    "end": "1178120"
  },
  {
    "text": "recreate the entire repository git didn't do that git keeps every object all the inter mediat so actually",
    "start": "1178120",
    "end": "1184679"
  },
  {
    "text": "modifying the history is very simple but it's also very wasteful so what um git",
    "start": "1184679",
    "end": "1190320"
  },
  {
    "text": "has is something called pack files when you do a GC it will temporarily encode all of these spread out objects find out",
    "start": "1190320",
    "end": "1199320"
  },
  {
    "text": "their history work it out and store it in what's essentially is a temporary arrangement of a pack file that is Delta",
    "start": "1199320",
    "end": "1205520"
  },
  {
    "text": "encoded and compressed and so on this is primarily to save this space but more importantly it's very useful for networking when they when you do over",
    "start": "1205520",
    "end": "1212120"
  },
  {
    "text": "the net over the network transfers you don't want to transfer massive objects you want to only transfer the a bare",
    "start": "1212120",
    "end": "1217919"
  },
  {
    "text": "minimum uh just to give you a quick look at this um this is what it looks like um",
    "start": "1217919",
    "end": "1224400"
  },
  {
    "text": "after we do a GC uh it all these objects no longer exist they've all been packed",
    "start": "1224400",
    "end": "1229520"
  },
  {
    "text": "down into three files one that references um the packs themselves one that is the actual data and an index",
    "start": "1229520",
    "end": "1237039"
  },
  {
    "text": "file this if you ever mucked around with on disk databases it looks an awful lot like this you have generally have an",
    "start": "1237039",
    "end": "1242280"
  },
  {
    "text": "index file and the and the raw uh data the index file is looked up and used to find the data inside the Big Blob file",
    "start": "1242280",
    "end": "1250520"
  },
  {
    "text": "um it looks B Berkeley DB or anything like that it looks a lot like this um if",
    "start": "1250520",
    "end": "1255720"
  },
  {
    "text": "you're really really interested in this kind of thing go go have a look in inside the git source that there's a",
    "start": "1255720",
    "end": "1261159"
  },
  {
    "text": "file um in the documentation that explains how the pack file works it is deep black magic it is optimized for",
    "start": "1261159",
    "end": "1267880"
  },
  {
    "text": "spinning discs to hit the the the the discs in the most optimal way possible",
    "start": "1267880",
    "end": "1273279"
  },
  {
    "text": "again this was written by a guy who does operating systems and file systems it is deep black magic um no one really knew",
    "start": "1273279",
    "end": "1280760"
  },
  {
    "text": "how it worked for a long time until somebody pinged him on the mail list and said how the hell does this work and he just dumped a bunch of information and",
    "start": "1280760",
    "end": "1286919"
  },
  {
    "text": "then he just copied it into a file and that's a doc mation under the G documentation tree um interesting stuff",
    "start": "1286919",
    "end": "1293520"
  },
  {
    "text": "if you're really into your hyper optimized database sort of things this is basically a mini",
    "start": "1293520",
    "end": "1300240"
  },
  {
    "text": "database but that's that that level we've talked about the low-level blobs we talked the higher level refs branches",
    "start": "1300240",
    "end": "1307919"
  },
  {
    "text": "and manipulating them and how to screw yourself up by manipulating them we're going to higher level now branching is",
    "start": "1307919",
    "end": "1313559"
  },
  {
    "text": "easy but branches are not a lot of use unless you can get them onto something else unless you're completely replacing",
    "start": "1313559",
    "end": "1319919"
  },
  {
    "text": "your entire repository you can do that but you generally want to um merge back",
    "start": "1319919",
    "end": "1325320"
  },
  {
    "text": "into the mainstream of development at some point so a mer so what is a",
    "start": "1325320",
    "end": "1332320"
  },
  {
    "start": "1328000",
    "end": "1402000"
  },
  {
    "text": "merge a merge of course is just we rejoining the um the history",
    "start": "1332320",
    "end": "1339559"
  },
  {
    "text": "we've gone off done our own thing we've decided it's time to get back on the mainstream and there's a there's a merge",
    "start": "1339559",
    "end": "1346400"
  },
  {
    "text": "occurs it's a bit more complex because some of these changes that have happened between the two branches might have",
    "start": "1346400",
    "end": "1352440"
  },
  {
    "text": "overlapped often they don't um but it it's possible um so let's again let's have a",
    "start": "1352440",
    "end": "1359360"
  },
  {
    "text": "look at a merge this merge commit that's created when we REM merge these two streams of development what does it look",
    "start": "1359360",
    "end": "1366600"
  },
  {
    "text": "like gain very very simple it is just a commit with two parents this is why you",
    "start": "1366600",
    "end": "1374400"
  },
  {
    "text": "can go around deleting BR branches inside git and and you'll still have the",
    "start": "1374400",
    "end": "1379520"
  },
  {
    "text": "history because you can always walk off you can as you walk back through the tree you can often go down that",
    "start": "1379520",
    "end": "1384919"
  },
  {
    "text": "alternative path look at what happen and then come back or you can just follow down the main branch you can sort of see",
    "start": "1384919",
    "end": "1390320"
  },
  {
    "text": "it as a sort of winding path that you can go um look back on of course getting there is not quite as as simple as that",
    "start": "1390320",
    "end": "1397320"
  },
  {
    "text": "as simple as just say saying that although sometimes it",
    "start": "1397320",
    "end": "1402520"
  },
  {
    "start": "1402000",
    "end": "1507000"
  },
  {
    "text": "is this is a fast forward merge if your two branches haven't really diverged if you taken you youve gone you know um",
    "start": "1402520",
    "end": "1410400"
  },
  {
    "text": "master master master I'm going to create a branch oh yeah I'm finished now done and no one's committed on to master",
    "start": "1410400",
    "end": "1416080"
  },
  {
    "text": "again why bother even making a merge commit all you've done is just there's",
    "start": "1416080",
    "end": "1421440"
  },
  {
    "text": "nothing to merge there's no there's no CH changes and G by default will do this it will do a fast forward merge the",
    "start": "1421440",
    "end": "1428640"
  },
  {
    "text": "problem there is you don't your um merge commit here doesn't have the two parents",
    "start": "1428640",
    "end": "1434279"
  },
  {
    "text": "so you're losing history you no longer have the the the awareness that the",
    "start": "1434279",
    "end": "1439360"
  },
  {
    "text": "branch ever occurred maybe that doesn't care may possibly you don't care um some people like a nice neat tree um",
    "start": "1439360",
    "end": "1446440"
  },
  {
    "text": "personally I like to keep context if you know they branched this off and maybe that Branch had a ticket name associated",
    "start": "1446440",
    "end": "1453159"
  },
  {
    "text": "with it an ID for a jir ticket or whatever and then you merge you may be",
    "start": "1453159",
    "end": "1459080"
  },
  {
    "text": "losing that information person you like to keep that around so there is a a merge com um uh command or a uh an",
    "start": "1459080",
    "end": "1467200"
  },
  {
    "text": "option called no FF no fast forward and it will always create a merge commit",
    "start": "1467200",
    "end": "1472600"
  },
  {
    "text": "even though it doesn't really need to um and that keep that's where K just adds us a dummy commit that contains the two",
    "start": "1472600",
    "end": "1479120"
  },
  {
    "text": "parents so that you know that the branch occurred um but generally speaking this",
    "start": "1479120",
    "end": "1485799"
  },
  {
    "text": "is not going to H going to happen if you're in a a busy team that's with a lot going on or a branch that lasts more",
    "start": "1485799",
    "end": "1491840"
  },
  {
    "text": "than a few minutes from in a in a non- trivial team then what's going to happen",
    "start": "1491840",
    "end": "1497240"
  },
  {
    "text": "is you're going to have some conflicts even if they're don't really conflicted files will have changed in both sides we",
    "start": "1497240",
    "end": "1503720"
  },
  {
    "text": "need to make sure that they're not going to cause new problems um there are a number of merge",
    "start": "1503720",
    "end": "1509880"
  },
  {
    "start": "1507000",
    "end": "1618000"
  },
  {
    "text": "strategies that git um uses this is an I'm going to skip forward skip over this",
    "start": "1509880",
    "end": "1517240"
  },
  {
    "text": "quite quickly um unfortunately it is a basically a talk to itself um suffice to",
    "start": "1517240",
    "end": "1523120"
  },
  {
    "text": "say um G uses a multiple merge strategies they're pluggable which is",
    "start": "1523120",
    "end": "1528720"
  },
  {
    "text": "nice so if you have some proprietary binary form format that you obviously can't merge binary form formats if you",
    "start": "1528720",
    "end": "1534559"
  },
  {
    "text": "don't know what they are but if you personally know that your binary format is really just a lot like a binary XML",
    "start": "1534559",
    "end": "1541440"
  },
  {
    "text": "and you could possibly merge two changes if they're non-conflicting then you can",
    "start": "1541440",
    "end": "1546600"
  },
  {
    "text": "write your own merge strategy for that but the one that git uses by default is",
    "start": "1546600",
    "end": "1551760"
  },
  {
    "text": "something called recursive recursive is interesting it's been extensively tested on a Linux kernel tree which is probably",
    "start": "1551760",
    "end": "1557600"
  },
  {
    "text": "about as busy tree as you're going to get um and it's very clever what it does he walks back through the tree and at",
    "start": "1557600",
    "end": "1563159"
  },
  {
    "text": "each branching point it creates a dummy intermediate commit and then recursively Works its way up the the set of CH",
    "start": "1563159",
    "end": "1569720"
  },
  {
    "text": "changes as I say um this is a fairly big subject in itself if you're interested to have a look at it um there are other",
    "start": "1569720",
    "end": "1577600"
  },
  {
    "text": "um types of uh merge that can occur there's something called hours where you can essentially just completely forget",
    "start": "1577600",
    "end": "1584720"
  },
  {
    "text": "the history of a master branch and replace it with the with a entirely different branch while keeping the the",
    "start": "1584720",
    "end": "1592720"
  },
  {
    "text": "context um not often used but is kind of Handy sometimes as I say um I'd like to",
    "start": "1592720",
    "end": "1598520"
  },
  {
    "text": "talk more about this but it is a a massive subject in and of itself U I recommend going and having a look around",
    "start": "1598520",
    "end": "1604720"
  },
  {
    "text": "um and some of the discussions of how it works inter internally but suffice to say the um the recursive merge system",
    "start": "1604720",
    "end": "1611120"
  },
  {
    "text": "has been extensively tested on the Linux kernel so we're going to come to one of our old friends how many people here",
    "start": "1611120",
    "end": "1616960"
  },
  {
    "text": "have used re Reb face at some point right how many people screwed it up yeah",
    "start": "1616960",
    "end": "1622880"
  },
  {
    "start": "1618000",
    "end": "1810000"
  },
  {
    "text": "about half yeah again right of passage um so now we know a little bit about the",
    "start": "1622880",
    "end": "1628159"
  },
  {
    "text": "object graph of um G how it all wires together hopefully rebase becomes a",
    "start": "1628159",
    "end": "1634799"
  },
  {
    "text": "little bit more obvious what's going on what rebase does is it takes the",
    "start": "1634799",
    "end": "1639840"
  },
  {
    "text": "branching point that occurred the um where we decide to move on a SE a",
    "start": "1639840",
    "end": "1645399"
  },
  {
    "text": "separate track and it just says I'm going to overwrite that I'm going to change that but because it's all hashed",
    "start": "1645399",
    "end": "1651240"
  },
  {
    "text": "we need to replay each commit on top of the new point where we're going to sort of rebind the",
    "start": "1651240",
    "end": "1658200"
  },
  {
    "text": "history this is ex um extremely powerful because if you want a clean tree this is",
    "start": "1658200",
    "end": "1663720"
  },
  {
    "text": "how you do it because from this point on you can now do a fast forward merge if you want to have a completely flat",
    "start": "1663720",
    "end": "1669399"
  },
  {
    "text": "history um it also is exceedingly powerful because at each one of those",
    "start": "1669399",
    "end": "1675000"
  },
  {
    "text": "replays you have the ability to go hang on I don't like that commit message I'm going to change that or I would like to",
    "start": "1675000",
    "end": "1681600"
  },
  {
    "text": "take these two commits and put them into one because we're replaying we get to replay we get to interject and change",
    "start": "1681600",
    "end": "1688480"
  },
  {
    "text": "history pretend we did something else we're going to cheat um but that is also quite powerful in itself for reasons",
    "start": "1688480",
    "end": "1695080"
  },
  {
    "text": "I'll I'll show you um rebase is one of those things it's uh pretty easy to",
    "start": "1695080",
    "end": "1700159"
  },
  {
    "text": "screw up um but you will also find is very very uh useful one of the most powerful things is the idea of an",
    "start": "1700159",
    "end": "1706360"
  },
  {
    "text": "Interactive rebase so you say I'm going to rebase I'm going to replay this before you do that show me what you're",
    "start": "1706360",
    "end": "1713240"
  },
  {
    "text": "going to do and then you can go in and say well actually these two commits should be one commit or these two commits should be one commit and have",
    "start": "1713240",
    "end": "1719240"
  },
  {
    "text": "this message or this message should be edited or I was going to squash the whole thing down into one big commit",
    "start": "1719240",
    "end": "1724720"
  },
  {
    "text": "which is which isn't is an option don't recommend it I personally like to keep history but some people like a clean",
    "start": "1724720",
    "end": "1730240"
  },
  {
    "text": "tree as I say um there's lots more I could talk about here but this is really the the core of git um",
    "start": "1730240",
    "end": "1738720"
  },
  {
    "text": "model you got your objects you got your refs which you can build branches and",
    "start": "1738720",
    "end": "1744240"
  },
  {
    "text": "tags and anything else you want on top of that and and then you have slightly higher than that you have the idea of a merge where you're going to have to",
    "start": "1744240",
    "end": "1751080"
  },
  {
    "text": "resolve changes between different branches at some point um and you want to keep the history so you can git has",
    "start": "1751080",
    "end": "1758000"
  },
  {
    "text": "metadata in the commit that allow you to store where a an objects came from where",
    "start": "1758000",
    "end": "1763360"
  },
  {
    "text": "a piece of History came from how you got there which is why mer merging works so much better and say subversion",
    "start": "1763360",
    "end": "1769320"
  },
  {
    "text": "subversion does not have its own history in its repository git does git knows where it got where it came from",
    "start": "1769320",
    "end": "1774880"
  },
  {
    "text": "therefore it knows how to get out of trouble talking of getting out of trouble and did you see this ad here",
    "start": "1774880",
    "end": "1781880"
  },
  {
    "text": "this this appear in the UK for the original um uh Prince of per Persia um",
    "start": "1781880",
    "end": "1788760"
  },
  {
    "text": "or the the new one the sanss of time uh it was an ad I think it was only in Australia no okay anyway you want to get",
    "start": "1788760",
    "end": "1796640"
  },
  {
    "text": "out of trouble everyone one has screwed up their git repository generally speaking as I say it's a right of",
    "start": "1796640",
    "end": "1801840"
  },
  {
    "text": "passage for new git people go like oh yeah I know what's going on here I'm going to reset or I'm going to rebase",
    "start": "1801840",
    "end": "1808000"
  },
  {
    "text": "and oh so here's our fa favorite one reset hard everybody's done it uh I",
    "start": "1808000",
    "end": "1815679"
  },
  {
    "start": "1810000",
    "end": "1897000"
  },
  {
    "text": "know about half people said no I didn't screw this up you were probably lying um we've all done it so it reset hard destroys pretty much",
    "start": "1815679",
    "end": "1825200"
  },
  {
    "text": "everything it moves the ref back to some point maybe somewhere completely else because you can essentially hyperspace",
    "start": "1825200",
    "end": "1831360"
  },
  {
    "text": "right through the tree to somewhere else um and it will they also blow away any",
    "start": "1831360",
    "end": "1837240"
  },
  {
    "text": "stage changes will blow away your working tree um it's very useful I use reset hard a lot when I've gone like",
    "start": "1837240",
    "end": "1843559"
  },
  {
    "text": "hack hack hack ha hacker I've got myself into a mess reset hard I just puts me straight back to you know the head in a",
    "start": "1843559",
    "end": "1850120"
  },
  {
    "text": "clean State um but youd be aware when you do it you will be blowing away a lot of potential data um now I can't help",
    "start": "1850120",
    "end": "1857360"
  },
  {
    "text": "you with the word work the actual working CH changes I can't help you with the any working anything that's in the working tree but hasn't been added to",
    "start": "1857360",
    "end": "1863679"
  },
  {
    "text": "git can't help you with that but anything that gets aware of we can get back to so anyone want to",
    "start": "1863679",
    "end": "1870480"
  },
  {
    "text": "take a guess at how we would get out of this situation knowing what we know",
    "start": "1870480",
    "end": "1876600"
  },
  {
    "text": "now no yeah you can use these new fangled IDE I don't know",
    "start": "1878639",
    "end": "1885159"
  },
  {
    "text": "you kids um well we talked about the ref log so when we did that reset there",
    "start": "1885159",
    "end": "1890519"
  },
  {
    "text": "would have been a record of that so we can find out where we were",
    "start": "1890519",
    "end": "1897039"
  },
  {
    "start": "1897000",
    "end": "1949000"
  },
  {
    "text": "beforehand so we go go to the ref log find out",
    "start": "1897039",
    "end": "1902279"
  },
  {
    "text": "where this particular ref was pointing previously and go well okay now we know",
    "start": "1902279",
    "end": "1907840"
  },
  {
    "text": "we want to go back to our commit not that this you know mo the mo moving of",
    "start": "1907840",
    "end": "1913039"
  },
  {
    "text": "it by the way these are little um up arrows uh there's a there's a whole little mini",
    "start": "1913039",
    "end": "1918360"
  },
  {
    "text": "uh language in G about how to reference um refs you can say like ref minus one",
    "start": "1918360",
    "end": "1924320"
  },
  {
    "text": "then meus two or jump two places back in the tree whatever it's fairly complex I don't really use it very much myself",
    "start": "1924320",
    "end": "1930120"
  },
  {
    "text": "it's just too much to remember most of the time um it's easy to look through the Lo the logs and find out uh you know",
    "start": "1930120",
    "end": "1936760"
  },
  {
    "text": "where where you want to get to but that head uptick means the previous to commit",
    "start": "1936760",
    "end": "1942480"
  },
  {
    "text": "to the one I'm currently looking at uh so we know the hash now so we can find it up here and we go okay fair enough",
    "start": "1942480",
    "end": "1949480"
  },
  {
    "start": "1949000",
    "end": "1961000"
  },
  {
    "text": "let's just use the same thing that got us into to trouble to get us out get",
    "start": "1949480",
    "end": "1954840"
  },
  {
    "text": "reset hard pushes it straight back on to where it was now you now you're out of trouble",
    "start": "1954840",
    "end": "1960120"
  },
  {
    "text": "again hopefully yeah great one uh I'm pretty sure um everyone who rebased has",
    "start": "1960120",
    "end": "1966279"
  },
  {
    "start": "1961000",
    "end": "2015000"
  },
  {
    "text": "probably seen this or Le non-trivial re rebase um you've done a re rebase and",
    "start": "1966279",
    "end": "1972679"
  },
  {
    "text": "you've broken the build and you don't quite know why somewhere along in tree",
    "start": "1972679",
    "end": "1978440"
  },
  {
    "text": "there was some sort of conflicting error um not not conflicting enough to cause a merge failure but conflicting enough to",
    "start": "1978440",
    "end": "1985519"
  },
  {
    "text": "be a logical failure much much worse than a merge failure merge failures are easy logical ones can we was weaks your",
    "start": "1985519",
    "end": "1992799"
  },
  {
    "text": "life so what do we do about this and this actually can apply to a couple of things including merges themselves uh",
    "start": "1992799",
    "end": "1999000"
  },
  {
    "text": "but rebat is a particularly good one I like this one because I had one point I had a long running branch and I was constantly rebasing and every time it",
    "start": "1999000",
    "end": "2004880"
  },
  {
    "text": "would break in some way shape or form and I had to and find out so um how can",
    "start": "2004880",
    "end": "2011080"
  },
  {
    "text": "we do this now I haven't quite covered this in in detail but I did mention that",
    "start": "2011080",
    "end": "2016840"
  },
  {
    "start": "2015000",
    "end": "2147000"
  },
  {
    "text": "when you do a re rebase and you replay you actually have the ability to interject at each point and change the",
    "start": "2016840",
    "end": "2024679"
  },
  {
    "text": "history or you could interject at that point not change history but for instance validate what's just happened",
    "start": "2024679",
    "end": "2032600"
  },
  {
    "text": "in some way shape or form like those complete 100% test coverages that you all have",
    "start": "2032600",
    "end": "2038840"
  },
  {
    "text": "naturally um I've certainly got 100% test coverage um assume I've test at all uh",
    "start": "2038840",
    "end": "2045960"
  },
  {
    "text": "so we have the ab ability to Mo to undo things so let's undo that the first",
    "start": "2045960",
    "end": "2052040"
  },
  {
    "text": "thing we're going to do um reset we use riff log to reset this now we can",
    "start": "2052040",
    "end": "2058158"
  },
  {
    "text": "actually put use something called rebase exec rebase exec at each step along the",
    "start": "2058159",
    "end": "2063638"
  },
  {
    "text": "re rebase will run a command for you in our case our totally aome 100% complete",
    "start": "2063639",
    "end": "2069000"
  },
  {
    "text": "test Suite can be run at each point that you of the re rebase and it will fail",
    "start": "2069000",
    "end": "2075280"
  },
  {
    "text": "the first time the test fail so you can find out very quickly why your rebase failed and you can either decide to fix",
    "start": "2075280",
    "end": "2082118"
  },
  {
    "text": "up at that point G will literally just stop at that point and go do you want to fix up do you want to abort this re",
    "start": "2082119",
    "end": "2088079"
  },
  {
    "text": "rebase it gives you a bunch of options you have the ability to go I'm going to decide how to fix this",
    "start": "2088079",
    "end": "2094800"
  },
  {
    "text": "up um so you can see it we stopped halfway through the re rebat here",
    "start": "2094800",
    "end": "2100240"
  },
  {
    "text": "because our tests failed because we did make make test now make test could be anything it can be mvn test it could be",
    "start": "2100240",
    "end": "2105920"
  },
  {
    "text": "mvn in test which is our particularly extreme tests which literally run up postgress and a full Tomcat server and",
    "start": "2105920",
    "end": "2113440"
  },
  {
    "text": "the whole works and throws tons of tests at it depends on how you know bad your your situation is but you have this",
    "start": "2113440",
    "end": "2120240"
  },
  {
    "text": "option you do the re rebase and you get to say let check each",
    "start": "2120240",
    "end": "2125440"
  },
  {
    "text": "step along the way very very useful tool that if you do get into this situation particularly your test are fast do this",
    "start": "2125440",
    "end": "2132079"
  },
  {
    "text": "every time it saves you a lot of of TR trouble down the line um however it's not always possible",
    "start": "2132079",
    "end": "2140560"
  },
  {
    "text": "to uh go back and change history sometimes you want to um fix in place",
    "start": "2140560",
    "end": "2147640"
  },
  {
    "start": "2147000",
    "end": "2286000"
  },
  {
    "text": "how many people here know about git bi bisect okay um handful now one of the",
    "start": "2147640",
    "end": "2154160"
  },
  {
    "text": "classic ways you would fix this problem because you we can get you can jump around in history the moment you realize that you go ah what I can is go back",
    "start": "2154160",
    "end": "2160760"
  },
  {
    "text": "through the tree and run the test each time and work out which one was wrong and then I can fix it up afterwards uh",
    "start": "2160760",
    "end": "2165839"
  },
  {
    "text": "it has be narrowed down at what point which commit broke and this this doesn't just apply to rebases it can apply to",
    "start": "2165839",
    "end": "2171839"
  },
  {
    "text": "merges it can apply to just a completely flat tree where you're making changes you realize later on weeks later that",
    "start": "2171839",
    "end": "2178560"
  },
  {
    "text": "you f that you had broken something somewhere but you don't quite know where",
    "start": "2178560",
    "end": "2183599"
  },
  {
    "text": "they use it a lot in the git uh in the Linux tree um but what it does it",
    "start": "2183599",
    "end": "2189079"
  },
  {
    "text": "basically goes I I tell git okay so we going to start a bi a bisect here we're",
    "start": "2189079",
    "end": "2194359"
  },
  {
    "text": "going to pick this point that I happen to know that's broken I'm going to pick this point which I happen to know was",
    "start": "2194359",
    "end": "2201000"
  },
  {
    "text": "working run back through that history running this command you can either do",
    "start": "2201000",
    "end": "2206319"
  },
  {
    "text": "it man do it manually you can jump through and do a bunch of of manual testing and then say that was Market as",
    "start": "2206319",
    "end": "2211480"
  },
  {
    "text": "good or bad or you can just get it to run a command and it'll run those tests",
    "start": "2211480",
    "end": "2216880"
  },
  {
    "text": "it will jump back what it does it does it the smart way it does the way you do if you you if you were thought this is going to take ages how can I make this",
    "start": "2216880",
    "end": "2222960"
  },
  {
    "text": "faster it'll pick a point somewhere in between the good and the bad do a test",
    "start": "2222960",
    "end": "2228560"
  },
  {
    "text": "if it's bad it'll go further back in time if it's good it'll jump forward in time and it will automate this process",
    "start": "2228560",
    "end": "2235520"
  },
  {
    "text": "of finding out what exactly happened um now I just",
    "start": "2235520",
    "end": "2242800"
  },
  {
    "text": "realized I think um I'm running severely overtime",
    "start": "2242800",
    "end": "2247920"
  },
  {
    "text": "um is that true um I think I've been talking for",
    "start": "2247920",
    "end": "2253400"
  },
  {
    "text": "almost an hour hour now so um nobody's coming sh shouted at me",
    "start": "2253400",
    "end": "2258920"
  },
  {
    "text": "um okay cool um but anyway I'm I I'm at",
    "start": "2258920",
    "end": "2263960"
  },
  {
    "text": "the end as you can tell it's a there a lot work we doing here there's lots and lots of examples you can give but hopefully I don't need to with this",
    "start": "2263960",
    "end": "2270960"
  },
  {
    "text": "basic knowledge you got um your objects and your commits and your trees you got",
    "start": "2270960",
    "end": "2276599"
  },
  {
    "text": "your refs you can move around and you can manipulate it directly um you if you're really excited you can jump low",
    "start": "2276599",
    "end": "2282119"
  },
  {
    "text": "lower down um and um and you can chain these commits",
    "start": "2282119",
    "end": "2289760"
  },
  {
    "text": "together and you have multiple P parents and you can remerge poting history split",
    "start": "2289760",
    "end": "2295800"
  },
  {
    "text": "at history but really it's just all just objects that are pointed to by trees that are pointed to by commits which are",
    "start": "2295800",
    "end": "2302920"
  },
  {
    "text": "pointed to by references um and once you know that you so many things going of",
    "start": "2302920",
    "end": "2308040"
  },
  {
    "text": "fall out once you understand that model everything else that's built on top of that all these complex ideas um are",
    "start": "2308040",
    "end": "2315680"
  },
  {
    "text": "really just layers on top of that and you can work from first principles and if you have a question you can go work",
    "start": "2315680",
    "end": "2321160"
  },
  {
    "text": "through it what H what happened well if I was writing re a reset if I was writing rebase how would I implement it",
    "start": "2321160",
    "end": "2328520"
  },
  {
    "text": "oh right well in that case I can probably do this a lot of things become obvious so now we have all this extra",
    "start": "2328520",
    "end": "2335280"
  },
  {
    "text": "knowledge now um hopefully you can work through the the from first principles",
    "start": "2335280",
    "end": "2340440"
  },
  {
    "text": "for any issues you have in git and hopefully you understand and use git in a uh in a different way um on the other",
    "start": "2340440",
    "end": "2348079"
  },
  {
    "text": "hand um if you're feeling really EXC excited there's lots of low-level commands to manipulate uh get trees",
    "start": "2348079",
    "end": "2355440"
  },
  {
    "text": "directly so one is go back to your production trees and just start hacking on your refs and maybe look at cat file",
    "start": "2355440",
    "end": "2361880"
  },
  {
    "text": "and hash objects and all these fun ways that you can directly manipulate a tree um if anyone's interested like really",
    "start": "2361880",
    "end": "2367720"
  },
  {
    "text": "fun story about how the Linux kernel completely blew up bit bucket one time um because of some dark magic that PE",
    "start": "2367720",
    "end": "2374720"
  },
  {
    "text": "people did with public Keys um but uh feel free to go off and do learn more",
    "start": "2374720",
    "end": "2381440"
  },
  {
    "text": "about it and understand it more but and use it in a more powerful way it's just",
    "start": "2381440",
    "end": "2386920"
  },
  {
    "text": "an a cyclic graph but it's also just a bunch of objects and you can manipulate them and any and any programmer can mess",
    "start": "2386920",
    "end": "2394280"
  },
  {
    "text": "with this um to you know make the workflow more powerful or if you're really EXC excited",
    "start": "2394280",
    "end": "2400960"
  },
  {
    "text": "go off and Implement Git You can actually implement the core of git in an afternoon now you can't do a lot of the",
    "start": "2400960",
    "end": "2406560"
  },
  {
    "text": "advanced stuff you can't do the pack files you can't necessar do network but you could basically write a program that will actually walk across the git tree",
    "start": "2406560",
    "end": "2413079"
  },
  {
    "text": "and tell you what's in it and you know report things very very simple very powerful if you know how it works so",
    "start": "2413079",
    "end": "2419119"
  },
  {
    "text": "hopefully this has been useful to to you um rate this um on on the app if you if",
    "start": "2419119",
    "end": "2424400"
  },
  {
    "text": "you would um and hopefully this will help you with your further git hacking",
    "start": "2424400",
    "end": "2430520"
  },
  {
    "start": "2430000",
    "end": "2512000"
  },
  {
    "text": "fastic question um so git seems to me like it it's it's good for sort of small",
    "start": "2430520",
    "end": "2438599"
  },
  {
    "text": "scale single software problems what if you've",
    "start": "2438599",
    "end": "2444079"
  },
  {
    "text": "got a very very highly modular system of say 900 modules and you want to manage",
    "start": "2444079",
    "end": "2451160"
  },
  {
    "text": "obviously the release of every single module independently I don't want to have a master branch that says this is",
    "start": "2451160",
    "end": "2456560"
  },
  {
    "text": "my Curr of 900 things I want to Branch everything how do I do that uh",
    "start": "2456560",
    "end": "2464200"
  },
  {
    "text": "there's a couple of options I mean uh first off the G it is not is definitely um capable of handling",
    "start": "2464200",
    "end": "2471440"
  },
  {
    "text": "massive massive projects I mean it built for and used by",
    "start": "2471440",
    "end": "2477480"
  },
  {
    "text": "G uh the Linux col the biggest most active software project in history uh so",
    "start": "2477480",
    "end": "2484200"
  },
  {
    "text": "there's more people doing that now you talk about modular systems um um that's really a software engineering problem",
    "start": "2484200",
    "end": "2489720"
  },
  {
    "text": "not a virtual control system we had a system our system for a while was very very modular what you find there is you",
    "start": "2489720",
    "end": "2497119"
  },
  {
    "text": "have to have good API separation ultimately either your two modules are",
    "start": "2497119",
    "end": "2503640"
  },
  {
    "text": "independent and it's will fire a stable API in which case they can be released",
    "start": "2503640",
    "end": "2509680"
  },
  {
    "text": "separately or either they're released separately",
    "start": "2509680",
    "end": "2515640"
  },
  {
    "start": "2512000",
    "end": "3022000"
  },
  {
    "text": "and they talk for a well defined API and it can be released separately and can operate",
    "start": "2515640",
    "end": "2521480"
  },
  {
    "text": "independently or they have implicit or explicit dependencies on each other on",
    "start": "2521480",
    "end": "2527560"
  },
  {
    "text": "their versions in which case they are not really separate pieces of software",
    "start": "2527560",
    "end": "2533880"
  },
  {
    "text": "um if I'm using Amazon web services um I do not require that Amazon to upgrade",
    "start": "2533880",
    "end": "2539760"
  },
  {
    "text": "their services at the same time that I upgrade my my system that talks to it",
    "start": "2539760",
    "end": "2545079"
  },
  {
    "text": "however um if I do then I really am part of Amazon web web services we've been",
    "start": "2545079",
    "end": "2551800"
  },
  {
    "text": "through this it's often one of those cycles of software where you separate things out and then you find they have implicit dependencies and you rejoin",
    "start": "2551800",
    "end": "2557920"
  },
  {
    "text": "them we end up rejoining a bunch of our stuff when we found out that their apis were not really as independent as we",
    "start": "2557920",
    "end": "2564520"
  },
  {
    "text": "thought they were or in some cases we had a bunch of modules but we really wanted to refactor them into a different",
    "start": "2564520",
    "end": "2570640"
  },
  {
    "text": "structure of modules in which case we would rejoin them all get all into the",
    "start": "2570640",
    "end": "2575760"
  },
  {
    "text": "same Repository a single piece of software on a s single ver version for",
    "start": "2575760",
    "end": "2581119"
  },
  {
    "text": "each release um and then only when they're fully API separated uh would you uh then",
    "start": "2581119",
    "end": "2588920"
  },
  {
    "text": "split them up again that said splitting up something when you put it into the same repository is exceedingly hard",
    "start": "2588920",
    "end": "2594559"
  },
  {
    "text": "because once the possibility of creating tight coupling occurs it will occur it's",
    "start": "2594559",
    "end": "2601160"
  },
  {
    "text": "just human nature if I know that that piece of softare software over there has a con a contact or customer object I'm",
    "start": "2601160",
    "end": "2608599"
  },
  {
    "text": "going to end up using that customer object rather than writing my own and having a bunch of um you know uh data",
    "start": "2608599",
    "end": "2614680"
  },
  {
    "text": "transfer objects I'm going to take shortcuts it's the it's the the reality so I you have very strong very separate",
    "start": "2614680",
    "end": "2621480"
  },
  {
    "text": "apis or you have the acknowledge that they are they're all part of the same",
    "start": "2621480",
    "end": "2627520"
  },
  {
    "text": "project and may need to be upgraded in lock step it's not straight it's it's not straightforward um one of the things",
    "start": "2627520",
    "end": "2634359"
  },
  {
    "text": "that Amazon did in particular one of the reasons why Amazon web service exist was because um f famously uh it came down",
    "start": "2634359",
    "end": "2641599"
  },
  {
    "text": "from the top everything will expose itself via rest API there will be no cross dependencies between our different",
    "start": "2641599",
    "end": "2649880"
  },
  {
    "text": "uh tools our storage system versus our e our Computing system um and they",
    "start": "2649880",
    "end": "2657200"
  },
  {
    "text": "enforced that very hard and from that they were able to turn it into a product because they were forced to operate as",
    "start": "2657200",
    "end": "2662920"
  },
  {
    "text": "customers for each other anywhere where you've got two people who can collude together you're going to get this kind",
    "start": "2662920",
    "end": "2669520"
  },
  {
    "text": "of bleeding of dep dependencies so they had to have strong separation um uh there was a funny quote by Peter",
    "start": "2669520",
    "end": "2677960"
  },
  {
    "text": "cyel on Twitter the other day uh he's uh a guy who did practical common list but",
    "start": "2677960",
    "end": "2683319"
  },
  {
    "text": "even if you're not into common list read the book it's one of the best technical introductions to a language I've ever",
    "start": "2683319",
    "end": "2688760"
  },
  {
    "text": "read but he said um the this is Conway's law for the 21st century for the cloud Century any geographically distributed",
    "start": "2688760",
    "end": "2696240"
  },
  {
    "text": "team will be talking to their software will talk via an an RPC interface so my",
    "start": "2696240",
    "end": "2702160"
  },
  {
    "text": "Cy to that was if you want to create RPC interfaces physically separate your team",
    "start": "2702160",
    "end": "2708200"
  },
  {
    "text": "if you want microservices make everyone work from home so uh that's pretty that's a long long",
    "start": "2708200",
    "end": "2715839"
  },
  {
    "text": "answer git is more than capable of dealing with massive structured projects it's it's it's used on the probably",
    "start": "2715839",
    "end": "2722599"
  },
  {
    "text": "largest software project in the world right now um the whether the split or um",
    "start": "2722599",
    "end": "2729480"
  },
  {
    "text": "merge different modules depends entirely on how strong you prepared to commit to a stable API o o over time and how much",
    "start": "2729480",
    "end": "2737359"
  },
  {
    "text": "you can stop people from assuming that they know what's going on under the hood of different modules even if you got",
    "start": "2737359",
    "end": "2743280"
  },
  {
    "text": "strong apis if you implicitly rep um depending on a certain Behavior then if",
    "start": "2743280",
    "end": "2748960"
  },
  {
    "text": "you change that behavior it will break even if the API Remains the Same Microsoft Windows is a famous example of",
    "start": "2748960",
    "end": "2755440"
  },
  {
    "text": "this they had to keep all the old bugs and quirks over time because any fixing",
    "start": "2755440",
    "end": "2761040"
  },
  {
    "text": "of a bug would break something for some for somebody for whom that was not a bug it was a feature so uh that's pretty",
    "start": "2761040",
    "end": "2769000"
  },
  {
    "text": "much so that's the long rambling answer to the question hope I hope that helps any other quick",
    "start": "2769000",
    "end": "2777400"
  },
  {
    "text": "questions rebase versus merch uh don't re use scenarios would",
    "start": "2777960",
    "end": "2785319"
  },
  {
    "text": "you use um re rebase um question is when would you use rebase versus merge sorry yes um",
    "start": "2785319",
    "end": "2793440"
  },
  {
    "text": "okay so Reb versus merge generally speaking merge um unless you have some",
    "start": "2793440",
    "end": "2798640"
  },
  {
    "text": "some pressing re reason now some places they would prefer a clean tree rebase",
    "start": "2798640",
    "end": "2804200"
  },
  {
    "text": "will give you a clean tree rebase is also the ab ability to fix up a a branch",
    "start": "2804200",
    "end": "2810040"
  },
  {
    "text": "um it gives you the ability to go look I've created a whole ton of Comm got commit a oh fix the commit a fix the",
    "start": "2810040",
    "end": "2816400"
  },
  {
    "text": "last commit oh oops I forgot this file blah blah and each one of those intermediate um commits is broken and",
    "start": "2816400",
    "end": "2823359"
  },
  {
    "text": "what ideally what you'd like is to have each commit be a complete self-contained change Atomic but",
    "start": "2823359",
    "end": "2830640"
  },
  {
    "text": "discreet um so rebas gives you the ability to do that as part of your re rebasing you can um modify that history",
    "start": "2830640",
    "end": "2839640"
  },
  {
    "text": "now one of thing interesting about re rebase is you don't actually have to give it a different hash you can",
    "start": "2839640",
    "end": "2845000"
  },
  {
    "text": "actually say I want to rebase onto the place I'm already pointing from but what",
    "start": "2845000",
    "end": "2851079"
  },
  {
    "text": "but in doing so please let me interject and change the history so this is one of",
    "start": "2851079",
    "end": "2856760"
  },
  {
    "text": "those weird tricks um rebates can rebat onto anything including onto itself so",
    "start": "2856760",
    "end": "2862520"
  },
  {
    "text": "you can actually go re rebase what rebase is really is should be really re replay would be a better name for it so",
    "start": "2862520",
    "end": "2869520"
  },
  {
    "text": "replay this history I want the history to start somewhere else or I want the history to carry on starting here but I",
    "start": "2869520",
    "end": "2874960"
  },
  {
    "text": "want to actually modify that history at each point so um generally",
    "start": "2874960",
    "end": "2881800"
  },
  {
    "text": "speaking we prefer merge no fast for forward rebase when you need to change",
    "start": "2881800",
    "end": "2887520"
  },
  {
    "text": "history or you've literally you've diverged so far that really the only way",
    "start": "2887520",
    "end": "2892559"
  },
  {
    "text": "to do it is to is to re re rebase that doesn't really happen very often and generally speaking you're going to have breakage at that point I've done that um",
    "start": "2892559",
    "end": "2899119"
  },
  {
    "text": "but you can also merge history back into your tree but that will often end up with quite a messy tree um if you want",
    "start": "2899119",
    "end": "2905520"
  },
  {
    "text": "to keep your tree fairly clean re rebase but don't overdo Do It um and also you",
    "start": "2905520",
    "end": "2911760"
  },
  {
    "text": "got to bear in mind if you're if you're rebasing a branch and then you push it up you're going to destroy the branch",
    "start": "2911760",
    "end": "2917559"
  },
  {
    "text": "for anyone else who's using it you're rewriting history when they pull it down it's going to kind of change their history that's why that's why you have",
    "start": "2917559",
    "end": "2924119"
  },
  {
    "text": "this idea of force pushes if you push something and it's completely changed the history the server will refuse it",
    "start": "2924119",
    "end": "2929720"
  },
  {
    "text": "unless you say Force um that's because your hashes the head has changed",
    "start": "2929720",
    "end": "2935079"
  },
  {
    "text": "completely now is now completely different sort of History if someone else was was using that history and they",
    "start": "2935079",
    "end": "2940240"
  },
  {
    "text": "go and pull the whole thing becomes chaos very very quickly indeed there is something called force with lease by the",
    "start": "2940240",
    "end": "2947040"
  },
  {
    "text": "way um I wrote an article about this uh a few months ago if you're interested force with lease when you push and you",
    "start": "2947040",
    "end": "2953480"
  },
  {
    "text": "do a force you can do a force with lease and what that does is checks if anyone else has been using that Branch as well",
    "start": "2953480",
    "end": "2959599"
  },
  {
    "text": "and and then it'll refuse to do the force even if you if you said Force",
    "start": "2959599",
    "end": "2964880"
  },
  {
    "text": "release it will then no longer um overwrite it because someone else has",
    "start": "2964880",
    "end": "2970160"
  },
  {
    "text": "has worked on that Branch as well um it's not perfect but it does help um but no the short answer is um by preference",
    "start": "2970160",
    "end": "2978240"
  },
  {
    "text": "merge merge and no fast forward re rebases for cleaning up only um unless",
    "start": "2978240",
    "end": "2983839"
  },
  {
    "text": "you really really are working very much independently and really want to fix things up uh the moment you're sharing a",
    "start": "2983839",
    "end": "2990760"
  },
  {
    "text": "branch you should never re rebase that's a golden rule on a ly's kernel for instance the moment you've done a rebase",
    "start": "2990760",
    "end": "2996400"
  },
  {
    "text": "or or or pushed any branch up some somewhere rebases cannot occur rebases",
    "start": "2996400",
    "end": "3001720"
  },
  {
    "text": "are local only operation you can treat them as an operation to push up to a tree but if you do so you potentially",
    "start": "3001720",
    "end": "3007720"
  },
  {
    "text": "stomping on some someone else's work so again that's a slightly long version of it fantastic thanks very much",
    "start": "3007720",
    "end": "3016798"
  }
]