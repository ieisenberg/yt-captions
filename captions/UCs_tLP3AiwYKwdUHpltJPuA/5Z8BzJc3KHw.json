[
  {
    "text": "right I am Shi and I have recently discovered that there is another Universe out there the universe has a",
    "start": "10960",
    "end": "16800"
  },
  {
    "text": "very different physics that we're not familiar with now consequently beings in",
    "start": "16800",
    "end": "21960"
  },
  {
    "text": "that Universe has a very different notion of computation when compared to us we will call that Universe Universe B",
    "start": "21960",
    "end": "28400"
  },
  {
    "text": "because ours is Universe a for obvious reasons now now in Universe B things are",
    "start": "28400",
    "end": "35600"
  },
  {
    "text": "made of particles much like ours but the difference is that these particles have some notion limited form of cognition",
    "start": "35600",
    "end": "42960"
  },
  {
    "text": "now I mentioned that these particles have limited forms of cognition because when many such particles come together",
    "start": "42960",
    "end": "49280"
  },
  {
    "text": "um the collective levels of cognition increases and so far there's no known limit as to how far uh how big can one",
    "start": "49280",
    "end": "56800"
  },
  {
    "text": "such conglomeration gets before the cognitive uh intelligence no no longer",
    "start": "56800",
    "end": "62760"
  },
  {
    "text": "increases so it's it's like space right so this conglomeration may move from one",
    "start": "62760",
    "end": "68000"
  },
  {
    "text": "space to another place and they may occasionally uh encounter another conglomeration so when this happens the",
    "start": "68000",
    "end": "74360"
  },
  {
    "text": "particles that make up a conglomeration they suddenly find the ability to duplicate themselves like this one does",
    "start": "74360",
    "end": "80920"
  },
  {
    "text": "um and it's these duplicated particles that interact with one another uh most",
    "start": "80920",
    "end": "86640"
  },
  {
    "text": "of the duplicated particles the individual duplicated particles will not survive the encounter leading to um",
    "start": "86640",
    "end": "93360"
  },
  {
    "text": "three um conglomerations at the end the original two and the smaller usually smaller uh third conglomeration",
    "start": "93360",
    "end": "100280"
  },
  {
    "text": "occasionally the third smaller conglomeration may not be able to move as as if it's stuck in place uh we'll",
    "start": "100280",
    "end": "107079"
  },
  {
    "text": "come back to that later so a conglomeration of starge particles according to their culture uh they make",
    "start": "107079",
    "end": "112520"
  },
  {
    "text": "a bleeding noise and and they call themselves Lambda right now there is an e e in this",
    "start": "112520",
    "end": "120680"
  },
  {
    "text": "universe uh the the thing is these lambdas don't know about The Ether their version of the Michaels and Moy",
    "start": "120680",
    "end": "126360"
  },
  {
    "text": "experiment showed that there is no ether but from our universe it's quite obvious that there is an ether this is because",
    "start": "126360",
    "end": "132120"
  },
  {
    "text": "when they move through space they leave a trail a gap that opens in The Ether and sort of eventually closes right and",
    "start": "132120",
    "end": "139280"
  },
  {
    "text": "this is how they end up being able to communicate with us they can simply Trace out through space um words that",
    "start": "139280",
    "end": "145319"
  },
  {
    "text": "are intelligible to us H the best way for me to describe this ether is like it's a it's a Jam like substance uh when",
    "start": "145319",
    "end": "151879"
  },
  {
    "text": "they move it's like something in moving in a jar of jam so here you've got a",
    "start": "151879",
    "end": "157000"
  },
  {
    "text": "universe full of lambas in a gem like ether a Lambda gem if you will and it's a very strange place to be you see there",
    "start": "157000",
    "end": "164519"
  },
  {
    "text": "is more than one notion of individuality and not much is known about their particles so I'm just going to use a",
    "start": "164519",
    "end": "171080"
  },
  {
    "text": "pronoun he for reasons so there's this individual we don't know whether he's a particle or conglomeration um he's a",
    "start": "171080",
    "end": "177760"
  },
  {
    "text": "scientist and he's traced out his own name bareno j church and he comes from a line of scientists who has discovered",
    "start": "177760",
    "end": "184120"
  },
  {
    "text": "that their movement through space is essentially computation and this guy uh",
    "start": "184120",
    "end": "189680"
  },
  {
    "text": "he basically discovered that computation requires The Ether Now by now it should be obvious",
    "start": "189680",
    "end": "197720"
  },
  {
    "text": "that I was not actually talking about an alien Universe I mean all those pictures right I was describing an embellished",
    "start": "197720",
    "end": "203920"
  },
  {
    "text": "version of our universe specifically I was actually describing ink on paper uh at the same time I was also",
    "start": "203920",
    "end": "210519"
  },
  {
    "text": "describing Lambda terms but at the same time I'm also describing computation",
    "start": "210519",
    "end": "215720"
  },
  {
    "text": "from a point of view of statistical mechanics you see a conglomeration that does not move when I said that is what",
    "start": "215720",
    "end": "221720"
  },
  {
    "text": "you call a steady state in statistical mechanics and the ether is simply a description of a context that holds the",
    "start": "221720",
    "end": "228680"
  },
  {
    "text": "steady state another word for this is memory if you're familiar with markof",
    "start": "228680",
    "end": "234280"
  },
  {
    "text": "chains we say that Markov chains do not have a me memory list so from a physics",
    "start": "234280",
    "end": "239360"
  },
  {
    "text": "point of view a computation is simply a modification of these steady States uh these steady States we say are held in a",
    "start": "239360",
    "end": "245560"
  },
  {
    "text": "medium which we can call a substrate and there can be many many different kinds of substrates my personal interest comes",
    "start": "245560",
    "end": "252000"
  },
  {
    "text": "from artificial neuron networks you see I noticed that you can't really describe Lambda calculus in artificial neuron",
    "start": "252000",
    "end": "257959"
  },
  {
    "text": "networks you can build neurot tearing machines you can't build neural Lambda calculus why is that well realizability",
    "start": "257959",
    "end": "265880"
  },
  {
    "text": "Theory says that Lambda calculus is less realizable than tearing machines uh and Lambda calculus cannot realize",
    "start": "265880",
    "end": "272479"
  },
  {
    "text": "itself but we're at Lambda gam and we're not at a constructive mathematics conference so I'm going to take a",
    "start": "272479",
    "end": "277880"
  },
  {
    "text": "slightly softer stance and I'm I'm mainly saying this because I don't want you to P me with eggs right so to answer",
    "start": "277880",
    "end": "283680"
  },
  {
    "text": "that question again we need to look at how we model computation we have many ways of modeling computation and an an",
    "start": "283680",
    "end": "290600"
  },
  {
    "text": "informal way of thinking about a comp computational model is that the models describe the computation that they're",
    "start": "290600",
    "end": "296280"
  },
  {
    "text": "doing listed on screen is um a list of sequential linear models of",
    "start": "296280",
    "end": "301759"
  },
  {
    "text": "computation all right side note there of course a universe see where everything happens concurrently we not talk about",
    "start": "301759",
    "end": "308120"
  },
  {
    "text": "them but there is a particular model of concurrent um computation that I'm actually quite excited about propagators",
    "start": "308120",
    "end": "313199"
  },
  {
    "text": "which at K is going to give a talk about today go see talk now we say that a",
    "start": "313199",
    "end": "319880"
  },
  {
    "text": "model of computation is good if you can use it and describe computation without having to rely on a description of its",
    "start": "319880",
    "end": "326560"
  },
  {
    "text": "substrate for example we can describe uh using um T the language of teing machines to",
    "start": "326560",
    "end": "333160"
  },
  {
    "text": "describe computation that happens in a bucket of water or artificial neuron networks so I think people in this room",
    "start": "333160",
    "end": "339400"
  },
  {
    "text": "might find it surprising that I list Lambda calculus to be a bit less substrate independent than you you would",
    "start": "339400",
    "end": "344560"
  },
  {
    "text": "expect and what I mean by this is that we tend to take the substrate that we're doing a computation on for granted let",
    "start": "344560",
    "end": "352319"
  },
  {
    "text": "me explain so in Lambda calculus in pure Lambda calculus uh when you're doing a",
    "start": "352319",
    "end": "358680"
  },
  {
    "text": "computation it it's done by means of term rewriting this term um this application reduces to Lambda y. a we",
    "start": "358680",
    "end": "366479"
  },
  {
    "text": "say here that a computation has been done and the rules of Lambda calculus plus together with the terms of Lambda",
    "start": "366479",
    "end": "373319"
  },
  {
    "text": "calculus describes the computation guess following excellent now we will of",
    "start": "373319",
    "end": "379599"
  },
  {
    "text": "course be uh term rewriting is a very very human thing to do um it relies on the fact that we have taken for granted",
    "start": "379599",
    "end": "386199"
  },
  {
    "text": "we can see on paper on the screens our computational substrate which X to replace in one look we will of course",
    "start": "386199",
    "end": "392440"
  },
  {
    "text": "have to be more careful when we're reasoning around bound variables but more or less we re we humans rewrite",
    "start": "392440",
    "end": "399160"
  },
  {
    "text": "terms by just looking right and B mind that pure Lambda calculus was invented",
    "start": "399160",
    "end": "404919"
  },
  {
    "text": "when there were no physical computers um so computers cannot do term rewriting in the same way that we do so we need to",
    "start": "404919",
    "end": "412000"
  },
  {
    "text": "instill some discipline in ourselves to see how a computer May reduce such a term um let's go through this step by",
    "start": "412000",
    "end": "418680"
  },
  {
    "text": "step first the computer checks if this term is a redex if it's a redex it goes",
    "start": "418680",
    "end": "423800"
  },
  {
    "text": "on and it reduces good then it checks if there's a name Clash if there's a name Clash an alpha conversion needs to be",
    "start": "423800",
    "end": "430400"
  },
  {
    "text": "done otherwise go on there is no name Clash here so we move on so now the",
    "start": "430400",
    "end": "436919"
  },
  {
    "text": "computer becomes ready to replace all values of X with a and so what it does",
    "start": "436919",
    "end": "442479"
  },
  {
    "text": "is it takes out Lambda y.x from the original per per the beta Rule and then",
    "start": "442479",
    "end": "447720"
  },
  {
    "text": "does a substitution of x now we have the answer the gorilla moment is now who",
    "start": "447720",
    "end": "454599"
  },
  {
    "text": "here notice that all the heavy lifting was done outside of the boxes all right",
    "start": "454599",
    "end": "461520"
  },
  {
    "text": "see right so that is the notion that a computation has to be done outside the computation that we have uh we have",
    "start": "461520",
    "end": "468319"
  },
  {
    "text": "defined here so that's what I mean in this sense that Lambda calculus requires a notion of substrate it is not free",
    "start": "468319",
    "end": "475960"
  },
  {
    "text": "from The Meta theory that you need Alpha renaming blah blah blah and at this point it it may be a bit you know",
    "start": "475960",
    "end": "482199"
  },
  {
    "text": "nitpicky for me to say oops sorry it may be a bit I'm I'm a bit nitpicky and say",
    "start": "482199",
    "end": "488039"
  },
  {
    "text": "what that's that's what a computer is supposed to do a computational substrate is supposed to keep track of the context",
    "start": "488039",
    "end": "493199"
  },
  {
    "text": "of execution well that seems to be a fact of life when you're trying to implement um Lambda calculus based functional",
    "start": "493199",
    "end": "499680"
  },
  {
    "text": "programming languages which brings me to the next point no computation can be done free of context computation is",
    "start": "499680",
    "end": "507199"
  },
  {
    "text": "always done in context let me show you an example here it's a very simple uh",
    "start": "507199",
    "end": "513159"
  },
  {
    "text": "program on the left We call we call this a program on the right we call it a user input and when you run this program with",
    "start": "513159",
    "end": "520120"
  },
  {
    "text": "the input you get a but what is a well a is a free variable in the original",
    "start": "520120",
    "end": "526440"
  },
  {
    "text": "program so it can represent any value without a further context we cannot",
    "start": "526440",
    "end": "531519"
  },
  {
    "text": "understand what this program does it's simply a program that returns something what's something I don't know it's",
    "start": "531519",
    "end": "536640"
  },
  {
    "text": "undefined we have not defined it the context of of course is provided by us at The Meta",
    "start": "536640",
    "end": "542399"
  },
  {
    "text": "level so the usual the usual examples of talking about um context and pure Lambda",
    "start": "542399",
    "end": "547920"
  },
  {
    "text": "calculus always talks about uh variable capture you know that I did not go down through that path that's because this",
    "start": "547920",
    "end": "553480"
  },
  {
    "text": "simple program is very uh instructive of the bigger picture of what I mean when I say computation requires context B we",
    "start": "553480",
    "end": "562200"
  },
  {
    "text": "note it's a free variable in in this term right from the outside context we",
    "start": "562200",
    "end": "567360"
  },
  {
    "text": "have mentioned earlier that b is a user input so we can see that uh we can infer",
    "start": "567360",
    "end": "572680"
  },
  {
    "text": "from this is a is some some somehow a user input as well and it eventually bubbles up to the user to provide the",
    "start": "572680",
    "end": "578640"
  },
  {
    "text": "final context follow so when we think about it this way we can say that a free",
    "start": "578640",
    "end": "584399"
  },
  {
    "text": "variable is a degree of Freedom that requires the meta components of context there are other examples of free",
    "start": "584399",
    "end": "590959"
  },
  {
    "text": "variable um the computational variable which is the the kind of variable that c programmers are used to the python",
    "start": "590959",
    "end": "596519"
  },
  {
    "text": "programmers are used to um or if you're into quantum Computing a Quantum observable is a degree of",
    "start": "596519",
    "end": "602680"
  },
  {
    "text": "Freedom now I've already hinted how we may resolve this degrees of freedom",
    "start": "602680",
    "end": "607720"
  },
  {
    "text": "thing degrees of freedom are resolved by Simply Having a context to do your computation in remember the story I told",
    "start": "607720",
    "end": "614920"
  },
  {
    "text": "you earlier the computation requires The Ether well the ether is of course an analogy for the context I think I've",
    "start": "614920",
    "end": "621560"
  },
  {
    "text": "actually mentioned that ooh spoilers now compiler writers are",
    "start": "621560",
    "end": "626959"
  },
  {
    "text": "actually very very clear on this notion of having a context we solve the first problem by saying Lambda x. a is not",
    "start": "626959",
    "end": "634320"
  },
  {
    "text": "allowed to be written we will cause a compiler error furthermore when you're compiling functional languages like",
    "start": "634320",
    "end": "639519"
  },
  {
    "text": "Haskell or OK camel you have to eventually do a closure conversion step which which translates everything into a",
    "start": "639519",
    "end": "645560"
  },
  {
    "text": "closure so that the environment may be held in the Heap and then at run time we just fill up the he the holes in the",
    "start": "645560",
    "end": "650760"
  },
  {
    "text": "Heap follow so far cool now this is of course a perfect segue for me to introduce closure",
    "start": "650760",
    "end": "657480"
  },
  {
    "text": "calculus closure calculus is a Lambda calculus that was introduced by Barry J last year and it's quite a beautiful",
    "start": "657480",
    "end": "663560"
  },
  {
    "text": "piece of uh calculus that has everything that makes pure Lambda calculus such an",
    "start": "663560",
    "end": "669040"
  },
  {
    "text": "attractive uh calculus for for describing computation it's a confluent theory of functions much like pure",
    "start": "669040",
    "end": "674839"
  },
  {
    "text": "Lambda calculus and therefore it allows us to replace equals with equals equational reasoning and it's teing",
    "start": "674839",
    "end": "681120"
  },
  {
    "text": "complete in that there is a proof that uh progress and preservation happens",
    "start": "681120",
    "end": "686360"
  },
  {
    "text": "which of course was done in after Phil's later a workshop later I will try",
    "start": "686360",
    "end": "691519"
  },
  {
    "text": "a version of this in ecta but the best thing about closure calculus when compared with the other kinds of Lambda",
    "start": "691519",
    "end": "697600"
  },
  {
    "text": "calcul out there is that you can now describe computation without having to",
    "start": "697600",
    "end": "702680"
  },
  {
    "text": "rely on the underlying computational substrate or in Barry's words no meta",
    "start": "702680",
    "end": "709240"
  },
  {
    "text": "Theory now the forms of the terms are very simple very similar to that of pure Lambda calculus X is as usual a variable",
    "start": "709240",
    "end": "716519"
  },
  {
    "text": "symbol uh then you've got your applications but then you've got this weirder looking stuff like the the at symbol which we call a tagged",
    "start": "716519",
    "end": "723040"
  },
  {
    "text": "application I will explain more on that later and then you've got the identity operator and the last thing at the bit",
    "start": "723040",
    "end": "728519"
  },
  {
    "text": "uh at the bottom is the extension syntax which serves dual purposes as both the environment and an explicit substitution",
    "start": "728519",
    "end": "735680"
  },
  {
    "text": "uh we won't be delving too deeply into that because there are some very interesting implications on that but what I want to point out is that there",
    "start": "735680",
    "end": "741839"
  },
  {
    "text": "there is only one form of extraction that's available and that's the closure uh so now we can we can we can",
    "start": "741839",
    "end": "749160"
  },
  {
    "text": "compare this with the notion of an abstraction in pure Lambda calculus right so this is how we write an",
    "start": "749160",
    "end": "755480"
  },
  {
    "text": "abstraction in pure Lambda calculus and when I was younger I used to be quite annoyed at people when people say this",
    "start": "755480",
    "end": "760519"
  },
  {
    "text": "is a function no no no this is not a function a Lambda the bit highlighted in",
    "start": "760519",
    "end": "765680"
  },
  {
    "text": "gold is something that produces a function that binds the variable x to the body T that's a big difference so in",
    "start": "765680",
    "end": "773600"
  },
  {
    "text": "the story I told earlier I mentioned that when two conglomerations um interact with each other they duplicate",
    "start": "773600",
    "end": "779279"
  },
  {
    "text": "their inner particles and the inner particles are the ones that actually interact this is how I think of Lambda",
    "start": "779279",
    "end": "785160"
  },
  {
    "text": "terms so inclosure calculus it creates the Lambda creates a closure which is a",
    "start": "785160",
    "end": "791160"
  },
  {
    "text": "function and an environment we write the environment in Sigma and boxes and so far everything we've seen here is an",
    "start": "791160",
    "end": "796800"
  },
  {
    "text": "abstract syntax let's look at a concrete version of this uh closure abstraction",
    "start": "796800",
    "end": "802920"
  },
  {
    "text": "this is the identity function and its Lambda pure Lambda calculus equivalent is this now I want to be careful here",
    "start": "802920",
    "end": "811279"
  },
  {
    "text": "when I say it's equivalent I don't mean that I mean it in an informal sense right uh this notion of this informal",
    "start": "811279",
    "end": "817440"
  },
  {
    "text": "notion of equivalence will get tested in a bit and I'm also using this symbol here not because that there is a natural",
    "start": "817440",
    "end": "822920"
  },
  {
    "text": "transform no it's because PowerPoint is a POS of symbols that that's available to you now the i in the um in the box is",
    "start": "822920",
    "end": "831199"
  },
  {
    "text": "an identity operator and the identity operator helps with the reduction of terms which we'll briefly cover later",
    "start": "831199",
    "end": "837759"
  },
  {
    "text": "but what happens when you have more than one name being bound in an environment we write it like this Y is mapped to",
    "start": "837759",
    "end": "843600"
  },
  {
    "text": "one note that the rough equivalence then the the the informal notion of equivalent still has not changed because",
    "start": "843600",
    "end": "849720"
  },
  {
    "text": "the function is still the same the closure simply captures more names following so far excellent so this is a",
    "start": "849720",
    "end": "857360"
  },
  {
    "text": "basic overview of the terms of closure calculus the next slide showing the reduction rules is a bit",
    "start": "857360",
    "end": "863800"
  },
  {
    "text": "scary yeah um so pure Lambda calculus has between one and three reduction rules whether or not you believe uh EA",
    "start": "863800",
    "end": "870240"
  },
  {
    "text": "expansion should be considered as part of the the set of rules all right who",
    "start": "870240",
    "end": "875480"
  },
  {
    "text": "are we kiding we we all believe that functions everything is made of function so we have to acknowledge the EA um",
    "start": "875480",
    "end": "881240"
  },
  {
    "text": "reduction rule so three rules Lambda calculus pure Lambda calculus has three rules this version of closure calculus",
    "start": "881240",
    "end": "887160"
  },
  {
    "text": "has 10 reduction rules and out of the 10 two of them has meta Theory uh which is",
    "start": "887160",
    "end": "892519"
  },
  {
    "text": "to do variable symbol checking right there is another version of closure calculus with 11 rules and zero meta",
    "start": "892519",
    "end": "899320"
  },
  {
    "text": "theory of course that version is not amenable to the visual analysis that we have been doing here so far but the",
    "start": "899320",
    "end": "905920"
  },
  {
    "text": "result is now we have a Lambda calculus whose names stay stable throughout the",
    "start": "905920",
    "end": "911360"
  },
  {
    "text": "reduction this fact is something the the fact that you can trust names has a",
    "start": "911360",
    "end": "916480"
  },
  {
    "text": "number of um implications but first why does closure calculus matter I offer you",
    "start": "916480",
    "end": "923000"
  },
  {
    "text": "two reasons simpler and faster recall once again that a",
    "start": "923000",
    "end": "928240"
  },
  {
    "text": "computation is never done without a context a closure calculus removes all the meta operation all the metha theory",
    "start": "928240",
    "end": "933680"
  },
  {
    "text": "so now a computation that is described by closure calculus is truly free from any dependence of substrate in Practical",
    "start": "933680",
    "end": "940959"
  },
  {
    "text": "terms what this means is we can now mechanize this calculus much easier than we can mechanize uh pure Lambda calculus",
    "start": "940959",
    "end": "949000"
  },
  {
    "text": "I'm the kind of the guy who likes to beat Dead Horse so once again let's use free variables as an example free",
    "start": "949000",
    "end": "954759"
  },
  {
    "text": "variables in closure calculus is truly free everywhere what do I mean by this",
    "start": "954759",
    "end": "960399"
  },
  {
    "text": "well consider these two terms the one on top is written in closure calculus the one in bottom is written pure Lambda",
    "start": "960399",
    "end": "965639"
  },
  {
    "text": "calculus where we we're interested in the highlighted variable x uh so now my question is this is X",
    "start": "965639",
    "end": "972560"
  },
  {
    "text": "free well in the pure Lambda calculus it is context sensitive right X is free in",
    "start": "972560",
    "end": "978800"
  },
  {
    "text": "the inner context yeah it's not free here of course this makes figuring",
    "start": "978800",
    "end": "983839"
  },
  {
    "text": "things out like capture avoidance a bit more complicated because now you need a stack when you tra Trav reverse your",
    "start": "983839",
    "end": "989279"
  },
  {
    "text": "term you need to keep track of which names have been bound uh and captured by the external context and in really",
    "start": "989279",
    "end": "995839"
  },
  {
    "text": "really big terms it's not actually easy to see whether a variable has been captured or not in by contrast enclosure calculus X",
    "start": "995839",
    "end": "1003639"
  },
  {
    "text": "is free here x is also free here now the presence of free variables as we have",
    "start": "1003639",
    "end": "1009880"
  },
  {
    "text": "already mentioned makes reductions a bit funny makes things that don't make sense",
    "start": "1009880",
    "end": "1015079"
  },
  {
    "text": "right so we should not expect our reductions to make sense either from this point of view yeah it's a it's a",
    "start": "1015079",
    "end": "1022440"
  },
  {
    "text": "very strange thing right but we can of course remedy this um by simply adding a",
    "start": "1022440",
    "end": "1027640"
  },
  {
    "text": "mapping of a variable to itself like this now the reduction happens and works",
    "start": "1027640",
    "end": "1033798"
  },
  {
    "text": "correctly if you're a compiler writer uh who works in functional languages you might go that looks familiar because the",
    "start": "1033799",
    "end": "1040720"
  },
  {
    "text": "mapping of x to itself is some a very familiar thing that compilers do for example this is stg's uh notion of it um",
    "start": "1040720",
    "end": "1048480"
  },
  {
    "text": "SG creates a new L um I forgot what this is called but",
    "start": "1048480",
    "end": "1054280"
  },
  {
    "text": "basically the list of three variables oh yeah f is is a is a closure I forgot f",
    "start": "1054280",
    "end": "1060640"
  },
  {
    "text": "is a closure in the Heap and the body is appointed to code in the Heap and each free variable in this list is appointed",
    "start": "1060640",
    "end": "1068080"
  },
  {
    "text": "to a memory location that holds a value in short it is an environment note that this X in the",
    "start": "1068080",
    "end": "1075120"
  },
  {
    "text": "environment the mapping of x to itself is a free variable it's a degree of freedom and how do we Implement degrees",
    "start": "1075120",
    "end": "1080919"
  },
  {
    "text": "of freedoms computational variables well we we implement it by putting it as a memory a poter to some memory location",
    "start": "1080919",
    "end": "1088559"
  },
  {
    "text": "it's exactly the same thing so what of the free variable now that we've added a mapping to itself how are we to",
    "start": "1088559",
    "end": "1094640"
  },
  {
    "text": "interpret this well we one one way we can interpret this is that this is free",
    "start": "1094640",
    "end": "1100440"
  },
  {
    "text": "in the in the function but it's bound in the closure right but remember the only",
    "start": "1100440",
    "end": "1106280"
  },
  {
    "text": "form of abstraction that you get in closure calculus is the closure so the notion of having",
    "start": "1106280",
    "end": "1111559"
  },
  {
    "text": "free in in function does not really matter that much and this makes mechanizing closure calculus a lot",
    "start": "1111559",
    "end": "1118039"
  },
  {
    "text": "simpler because now the terms are self-contained they they know everything about their environment they know",
    "start": "1118039",
    "end": "1123280"
  },
  {
    "text": "everything about the function so there are simpler simply fewer things to worry about and there's also another fact",
    "start": "1123280",
    "end": "1130080"
  },
  {
    "text": "about closure calculus that leads itself quite well to compilation in the sense that closure",
    "start": "1130080",
    "end": "1135360"
  },
  {
    "text": "calculus allows for recursive programs to be written in normal form now I see a few raised eyebrows yes and",
    "start": "1135360",
    "end": "1142760"
  },
  {
    "text": "by normal form I mean the OG definition of normal form I don't mean normal forms like wickhead normal forms I mean",
    "start": "1142760",
    "end": "1149080"
  },
  {
    "text": "literally forms that cannot be reduced further by the rules of the calculus at this point I want to make a slight",
    "start": "1149080",
    "end": "1155280"
  },
  {
    "text": "detour um that has not been really explored in functional programming um Phil did mention a bit about it but I'm",
    "start": "1155280",
    "end": "1162400"
  },
  {
    "text": "talking about inverse Phil talks about animation I'm talking about free freezing all Lambda",
    "start": "1162400",
    "end": "1169320"
  },
  {
    "text": "have Frozen forms agree a frozen form is simply what we write down either on pen",
    "start": "1169320",
    "end": "1174520"
  },
  {
    "text": "or paper or we represent them in bits in machine memory right Frozen forms are",
    "start": "1174520",
    "end": "1179919"
  },
  {
    "text": "not necessarily normal form forms so why am I bringing up this notion of a frozen",
    "start": "1179919",
    "end": "1185320"
  },
  {
    "text": "form see functional programming languages traditionally do not have a notion of compiled versus interpreted",
    "start": "1185320",
    "end": "1191799"
  },
  {
    "text": "programs reduction is reduction is reduction many people consider it a shame that you have to do a compilation",
    "start": "1191799",
    "end": "1197919"
  },
  {
    "text": "step but guess what we live in a universe where the vment metaphor is the de facto so we have to take that into",
    "start": "1197919",
    "end": "1204360"
  },
  {
    "text": "account right so when we look at the reduction now we can think of reductions happening in two phases both are",
    "start": "1204360",
    "end": "1211400"
  },
  {
    "text": "reductions but we separate the phases at the compile time we want to reduce as much as possible and we can also do some",
    "start": "1211400",
    "end": "1217039"
  },
  {
    "text": "meta programming like type inference type checking that sort of thing and and it's various rewrites that come with it",
    "start": "1217039",
    "end": "1223400"
  },
  {
    "text": "we we do all this so that at runtime we can do as little work as possible this this clear good so in between uh in",
    "start": "1223400",
    "end": "1232640"
  },
  {
    "text": "between compilation and runtime we freeze we write it down as a binary and put it in the hard",
    "start": "1232640",
    "end": "1239400"
  },
  {
    "text": "drive right that and that's it so recall from earlier that the forms of closure",
    "start": "1239400",
    "end": "1245799"
  },
  {
    "text": "calculus is As on screen the normal forms is simply this exact thing SS the",
    "start": "1245799",
    "end": "1250960"
  },
  {
    "text": "standard application now having introduced normal forms let's see what happens when you",
    "start": "1250960",
    "end": "1256960"
  },
  {
    "text": "put a term that is not in normal form through an aggressively normalized inclosure calculus",
    "start": "1256960",
    "end": "1262280"
  },
  {
    "text": "interpreter when this program puts gets put through my interpreter it will do the naughty thing and try to reduce",
    "start": "1262280",
    "end": "1268360"
  },
  {
    "text": "under the Lambda which results in a normal form which is the identity function yeah and having the ability to",
    "start": "1268360",
    "end": "1276760"
  },
  {
    "text": "write programs in normal forms is very important we can say to the programmer",
    "start": "1276760",
    "end": "1281840"
  },
  {
    "text": "okay the tagged application the at symbol is how you stop reductions at compile time so at this point I want to",
    "start": "1281840",
    "end": "1289039"
  },
  {
    "text": "also point out that the the tagged application has no bearing on how the final program is evaluated these two",
    "start": "1289039",
    "end": "1295120"
  },
  {
    "text": "programs evaluate to a at runtime but if we say okay now we've got two phases of",
    "start": "1295120",
    "end": "1300159"
  },
  {
    "text": "reduction when at compil time let's look at and see what the compiled versions of these programs look like well one is",
    "start": "1300159",
    "end": "1307320"
  },
  {
    "text": "simpler and one is not right and this only works because the only way to remove a frozen term an",
    "start": "1307320",
    "end": "1315360"
  },
  {
    "text": "uh tagged application is to apply a substitution and the only way to get a substitution is by the equivalent of a",
    "start": "1315360",
    "end": "1322520"
  },
  {
    "text": "beta reduction now I want to be very careful with what I said here I I mentioned",
    "start": "1322520",
    "end": "1328640"
  },
  {
    "text": "multiple times aggressively normalizing this is not the same as strongly normalizing if you write this uh program",
    "start": "1328640",
    "end": "1336120"
  },
  {
    "text": "and put it through a compiler of closure calculus it will never terminate you will never get a binary out we can of course stop the uh",
    "start": "1336120",
    "end": "1344679"
  },
  {
    "text": "compiler from going into Crazy recursiveness by adding an ad here but now this is a useless term because we",
    "start": "1344679",
    "end": "1350799"
  },
  {
    "text": "cannot remove the the tag so what can we do to get recursive programs in normal",
    "start": "1350799",
    "end": "1356039"
  },
  {
    "text": "form Well turns out Mr touring has the solution for us you can actually rewrite",
    "start": "1356039",
    "end": "1362279"
  },
  {
    "text": "the the touring's Y combinator as a CL as as a term that stops at compile time",
    "start": "1362279",
    "end": "1368159"
  },
  {
    "text": "and this y combinator touring Y combinator is actually quite useful to us even if it's a toy to play around",
    "start": "1368159",
    "end": "1373640"
  },
  {
    "text": "with you know recursion so to reiterate this this is",
    "start": "1373640",
    "end": "1379039"
  },
  {
    "text": "why we bother with programs in normal form okay we don't have to figure out when to freeze the program we don't have",
    "start": "1379039",
    "end": "1385720"
  },
  {
    "text": "to figure out we had normal forms that solve things we don't have to figure out an evaluation strategy we can say",
    "start": "1385720",
    "end": "1391440"
  },
  {
    "text": "aggressively normalize everything right and this causes programs to be faster at run time so now you might say Okay shy",
    "start": "1391440",
    "end": "1398679"
  },
  {
    "text": "you you're just posturing this is this is you know this is all theoretical stuff all stuff in your head well the",
    "start": "1398679",
    "end": "1403919"
  },
  {
    "text": "good news is I actually have some results I've previously mentioned or through social contact that my my",
    "start": "1403919",
    "end": "1410360"
  },
  {
    "text": "motivation in life is to build an AGI therefore understanding computation that is free from substrate is key it also",
    "start": "1410360",
    "end": "1418480"
  },
  {
    "text": "may not surprise you that I have my own deep learning library um and the next few versions of the companion Library",
    "start": "1418480",
    "end": "1425360"
  },
  {
    "text": "will be built on top of Notions from closure cist now I'm not here to plug my",
    "start": "1425360",
    "end": "1430640"
  },
  {
    "text": "own software Library most of you probably do not like go something something",
    "start": "1430640",
    "end": "1435840"
  },
  {
    "text": "generics but I also took the time to implement a closure calculus interpreter in three different languages go hll and",
    "start": "1435840",
    "end": "1441919"
  },
  {
    "text": "camel um the results that you will see here will be from the Go version because of sheer controllability and what I mean",
    "start": "1441919",
    "end": "1449039"
  },
  {
    "text": "by controllability is that I want to play Lassa demon I want to know where every bit of memory is when the program",
    "start": "1449039",
    "end": "1455120"
  },
  {
    "text": "is running right and and I want to do it in such a way that I Implement everything from scratch without any",
    "start": "1455120",
    "end": "1461440"
  },
  {
    "text": "Reliance on buil-in Library the idea for this is I want to see how easy it is to build a Lambda calculus interpreter",
    "start": "1461440",
    "end": "1468039"
  },
  {
    "text": "versus a Lambda calcul a closure calculus interpreter how does it look",
    "start": "1468039",
    "end": "1473480"
  },
  {
    "text": "well closure calculus is both simpler to implement and it is simpler yeah closure calculus is also",
    "start": "1473480",
    "end": "1481960"
  },
  {
    "text": "faster I Benchmark closure calculus interpretors with the pure various versions of PDA interpreter using the",
    "start": "1481960",
    "end": "1489000"
  },
  {
    "text": "Fibonacci program and as well as other programs from the no Benchmark from Hol",
    "start": "1489000",
    "end": "1495080"
  },
  {
    "text": "and all the interpreters were augmented with Delta rules uh for for natural numbers and if then",
    "start": "1495080",
    "end": "1501279"
  },
  {
    "text": "else the results are stunning closure calculus is five times faster than pure",
    "start": "1501279",
    "end": "1507320"
  },
  {
    "text": "Lambda calculus now I did some digging in and figuring out why and mainly it's because I did not memorize um Alpha",
    "start": "1507320",
    "end": "1514840"
  },
  {
    "text": "conversion I did not figure out the alpha normalization trick um and a lot",
    "start": "1514840",
    "end": "1520520"
  },
  {
    "text": "of time is spent in The Meta theory of Lambda calculus now you may say okay",
    "start": "1520520",
    "end": "1526000"
  },
  {
    "text": "that's cheating you're you're not doing the standard thing but bear in mind that this native naive",
    "start": "1526000",
    "end": "1531960"
  },
  {
    "text": "version of uh the P Lambda calculus interpreters is already takes more lines of code to implement compared to The",
    "start": "1531960",
    "end": "1539080"
  },
  {
    "text": "Interpreter for closure Calculus if you want to add all these things to make Lambda calculus fast pure Lambda calculus faster well you're just going",
    "start": "1539080",
    "end": "1545640"
  },
  {
    "text": "to make it more complicated right and also for the share fun of it I also benchmarked um closure calculus",
    "start": "1545640",
    "end": "1552159"
  },
  {
    "text": "interpreters with hases um it's about 30% the speed of a compiled language",
    "start": "1552159",
    "end": "1558080"
  },
  {
    "text": "which is not too shabby so why did I Benchmark against hcll well because of",
    "start": "1558080",
    "end": "1564000"
  },
  {
    "text": "the way the benchmarks were originally designed they were originally the the first interpreter was written in hll but because I suck at writing programs in",
    "start": "1564000",
    "end": "1570440"
  },
  {
    "text": "hll I uh Criterion did gave me very very inconsistent results and so there",
    "start": "1570440",
    "end": "1576399"
  },
  {
    "text": "eventually turns out there are too many knobs to play around with runtime uh so yeah that's my fault but deterministic",
    "start": "1576399",
    "end": "1583840"
  },
  {
    "text": "benchmarking is difficult anyways all the benchmarks start their lives as hasco programs they then translated into",
    "start": "1583840",
    "end": "1590360"
  },
  {
    "text": "pure Lambda calculus um an example is this this is a hasco fib it gets",
    "start": "1590360",
    "end": "1595960"
  },
  {
    "text": "translat into pure Lambda calculus where you need to rewrite it in terms of the Y combinator and from this you can",
    "start": "1595960",
    "end": "1601080"
  },
  {
    "text": "reasonably retrieve the pure Lambda terms and then it's translated into",
    "start": "1601080",
    "end": "1606840"
  },
  {
    "text": "closure calculus where the Y2 combinator is used and that's that's the reason why",
    "start": "1606840",
    "end": "1611919"
  },
  {
    "text": "it's decided to Benchmark against hasle now as a bit of a trivia there's a",
    "start": "1611919",
    "end": "1616960"
  },
  {
    "text": "there's a primes function on the has homepage that shows how nice and simple has is obviously you need to Benchmark",
    "start": "1616960",
    "end": "1622679"
  },
  {
    "text": "this what ended up on on on the on the table earlier is the Delta rules version",
    "start": "1622679",
    "end": "1628200"
  },
  {
    "text": "but the original version I did was the Scot encoding of pure Lambda calculus numbers and I will tell you that it is",
    "start": "1628200",
    "end": "1634520"
  },
  {
    "text": "fun it's about 700 lines of Haso not fun and if you are up for a challenge you",
    "start": "1634520",
    "end": "1640200"
  },
  {
    "text": "can always also invoke no implicit Prelude it makes your life a lot harder but you know what the default prude is kind of crappy now as we come to end I",
    "start": "1640200",
    "end": "1649159"
  },
  {
    "text": "would like to recap what this talk has been all about I started a story about an alien Universe The Twist of course is",
    "start": "1649159",
    "end": "1656320"
  },
  {
    "text": "that the alien universe is ours and I was actually describing ink on paper a computational substrate right we also",
    "start": "1656320",
    "end": "1662039"
  },
  {
    "text": "learned from this Parable and various examples that computation cannot happen without a context then I mentioned that",
    "start": "1662039",
    "end": "1668039"
  },
  {
    "text": "pure Lambda calculus does not adequately capture a notion of computation that is free from its substrate and this",
    "start": "1668039",
    "end": "1674600"
  },
  {
    "text": "manifests itself when we try to simulate Lambda calculus on teing machines by needing meta Theory so what is the ask",
    "start": "1674600",
    "end": "1683600"
  },
  {
    "text": "well the ask is simple closure calculus is better there is no meta Theory it",
    "start": "1683600",
    "end": "1690399"
  },
  {
    "text": "it's a simpler compil that that results in simpler compilers that produces faster programs right um that's because",
    "start": "1690399",
    "end": "1698120"
  },
  {
    "text": "we can we can say Okay aggressively normalize all things so the ask is simple we should all be using variance",
    "start": "1698120",
    "end": "1703919"
  },
  {
    "text": "of closure calculus as the basis of our functional programming languages now some of you might say that um the only",
    "start": "1703919",
    "end": "1711240"
  },
  {
    "text": "good calculus is a typ types calculus well we got you fam the future is coming we've got a",
    "start": "1711240",
    "end": "1718559"
  },
  {
    "text": "type for Lambda and for now thank",
    "start": "1718559",
    "end": "1723200"
  },
  {
    "text": "you fantastic we've got one minute for a question which I know someone has we go",
    "start": "1725320",
    "end": "1731880"
  },
  {
    "text": "oh wow um so in your system if if I wrote",
    "start": "1731880",
    "end": "1738720"
  },
  {
    "text": "Omega uh without a tagged application would the compiler just hang uh it",
    "start": "1738720",
    "end": "1744080"
  },
  {
    "text": "depends on the way you wrote the tag um yeah it depends on where you wrote the",
    "start": "1744080",
    "end": "1749799"
  },
  {
    "text": "program I actually have if I wrote the naive Omega but without a tagged application to set it to a normal form",
    "start": "1749799",
    "end": "1755360"
  },
  {
    "text": "like the aggressive normalization would just keep running forever yes that's correct yeah okay",
    "start": "1755360",
    "end": "1762000"
  },
  {
    "text": "cool one more",
    "start": "1762000",
    "end": "1766559"
  },
  {
    "text": "no hi awesome talk um so I believe some of",
    "start": "1767039",
    "end": "1772880"
  },
  {
    "text": "these issues around uh context Independence and naming led to the development of combinated calculi like",
    "start": "1772880",
    "end": "1778240"
  },
  {
    "text": "SK yes how do you feel that compares to closure closure calculus so over here I say via abstraction",
    "start": "1778240",
    "end": "1784960"
  },
  {
    "text": "calculus cool so yeah there there is a way um Barry's all about abstract like",
    "start": "1784960",
    "end": "1792240"
  },
  {
    "text": "the abstraction calculus right closure calculus is like a sight trck",
    "start": "1792240",
    "end": "1800039"
  }
]