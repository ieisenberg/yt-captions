[
  {
    "start": "0",
    "end": "31000"
  },
  {
    "text": "(relaxed music)",
    "start": "769",
    "end": "3436"
  },
  {
    "text": "- So we're gonna be talking\nabout memory layout in Swift. As I'm sure you know,\nSwift is Apple's brand new,",
    "start": "10976",
    "end": "16228"
  },
  {
    "text": "magical, fancy programming language and I'm gonna go dive into it a little bit",
    "start": "16228",
    "end": "21441"
  },
  {
    "text": "and talk about the bits and bytes and how it's all put together and what stuff looks like in memory",
    "start": "21441",
    "end": "26940"
  },
  {
    "text": "when you actually run\nthe code on a computer. Real brief about me, I'm\nonline at mikeash.com,",
    "start": "26940",
    "end": "34544"
  },
  {
    "start": "31000",
    "end": "379000"
  },
  {
    "text": "I have a blog where I do\nall sorts of crazy stuff like this, I like to take things apart and see how they tick and I've got a bunch",
    "start": "34544",
    "end": "41994"
  },
  {
    "text": "of crazy Github projects which you should probably never use for anything, but are lots of fun to play with.",
    "start": "41994",
    "end": "47895"
  },
  {
    "text": "I'm on Twitter if you\nfeel like following me. There's a picture of my\ncat because, you know, the internet is all about cats",
    "start": "48746",
    "end": "54710"
  },
  {
    "text": "and we're fundamentally all\nabout the internet these days. I fly gliders, just point of information,",
    "start": "54710",
    "end": "60891"
  },
  {
    "text": "it's a lot of fun. And the arrow is kinda pointing over here",
    "start": "60891",
    "end": "66367"
  },
  {
    "text": "so that's me, you know,\nI always put a photo of myself on these slides\nand then afterwards I'm like, people can just look at me.",
    "start": "66367",
    "end": "72334"
  },
  {
    "text": "So I decided I'd stop doing that. So here's the plan;\nfirst I just wanna give",
    "start": "72334",
    "end": "78774"
  },
  {
    "text": "a quick overview of what memory is. I'm sure you all know what memory is, but it can help to get a\nlittle bit of perspective",
    "start": "78774",
    "end": "84998"
  },
  {
    "text": "and just tear it down, you\nknow, go to the foundations, revisit the fundamental stuff. Then I wrote a program that basically",
    "start": "84998",
    "end": "92099"
  },
  {
    "text": "is where I generated all this information, it actually goes through,\ncrawls, the program starting from a particular value",
    "start": "92099",
    "end": "98243"
  },
  {
    "text": "and dumps everything out that\nare in those values in memory. And then finally I'm\ngonna actually dive into",
    "start": "98243",
    "end": "104670"
  },
  {
    "text": "how Swift lays out stuff in memory, what that program actually produces and some contrast with how C\ndoes it and how C++ does it.",
    "start": "104670",
    "end": "112581"
  },
  {
    "text": "So what is memory? And fundamentally memory is\nwhat stops this from happening.",
    "start": "115630",
    "end": "122658"
  },
  {
    "text": "So you gotta keep track of\nwhere you are essentially. You've got a computational process and you are at some state within\nthat process at all times.",
    "start": "125235",
    "end": "133232"
  },
  {
    "text": "And if you can't keep track of that then you will just never get anywhere. So we don't wanna just endlessly repeat,",
    "start": "133232",
    "end": "141176"
  },
  {
    "text": "we wanna actually make progress and that's what this is all about. So figuring out how to\nactually build hardware",
    "start": "141176",
    "end": "148231"
  },
  {
    "text": "which can remember things\nand store information and dig it out later is\nkinda one of the fundamental",
    "start": "148231",
    "end": "153402"
  },
  {
    "text": "problems in computing and there's lots of technologies along the way. Started out with vacuum tubes.",
    "start": "153402",
    "end": "158455"
  },
  {
    "text": "You can imagine these\nthings are like this big and they're essentially like\nan incandescent light bulb and each one holds one bit.",
    "start": "158455",
    "end": "165168"
  },
  {
    "text": "So if you wanna actually\nstore some reasonable amount of data you're talking about a room full of incredibly hot equipment.",
    "start": "165168",
    "end": "172917"
  },
  {
    "text": "Later on there were mercury delay lines, this is kind of a cool\ntechnology of a pipe, you basically fill it with mercury,",
    "start": "172917",
    "end": "179146"
  },
  {
    "text": "you have a speaker or\nsomething like that on one end and something like a\nmicrophone on the other end and you pulse your data through it.",
    "start": "179146",
    "end": "185361"
  },
  {
    "text": "And it takes time to\ntravel and because of that you can fit stuff in and store\nyour information that way.",
    "start": "185361",
    "end": "191206"
  },
  {
    "text": "And there was a fun little proposal, somebody decided that gin would\nmake a good medium for this, had all the right chemical\nproperties and whatever.",
    "start": "191206",
    "end": "198597"
  },
  {
    "text": "As far as I can tell\nnobody ever built that, but fun little aside.",
    "start": "198598",
    "end": "202911"
  },
  {
    "text": "Magnetic core memory was an\nadvancement of this stuff, it was a very neat technology,\nyou got little rings",
    "start": "203891",
    "end": "209366"
  },
  {
    "text": "of iron and you run wires through them and depending on the electrical current",
    "start": "209366",
    "end": "215009"
  },
  {
    "text": "you send through them you can store data or retrieve data by storing it in the magnetic field in those rings.",
    "start": "215009",
    "end": "220808"
  },
  {
    "text": "And so that was one ring per bit. And the state of the art\nof this in the 60s or 70s",
    "start": "220809",
    "end": "226109"
  },
  {
    "text": "was basically a cube about this big could hold 32,000 bits of information",
    "start": "226109",
    "end": "231897"
  },
  {
    "text": "and then you can imagine\nthis thing I've got in my hand can hold many gigabytes memory,",
    "start": "231897",
    "end": "238207"
  },
  {
    "text": "billions of bits. And so things have\nadvanced a lot since then.",
    "start": "238207",
    "end": "243382"
  },
  {
    "text": "So DRAM, dynamic RAM,\nbasically silicon chips is the state of the art today.",
    "start": "243382",
    "end": "249802"
  },
  {
    "text": "Which we should all be\nincredibly thankful for because it really makes\nour lives a lot easier. That fact that we can have these,",
    "start": "249802",
    "end": "257508"
  },
  {
    "text": "this allows us to store\nbillion and billions of bits of information all at once.",
    "start": "258358",
    "end": "263861"
  },
  {
    "text": "And my phone is misbehaving, if you can pardon me for just a\nmoment here, there we go.",
    "start": "263861",
    "end": "270129"
  },
  {
    "text": "Alright, so that's the\nhardware view of things, we don't really care\ntoo much about hardware most of the time if we're programming",
    "start": "271386",
    "end": "277276"
  },
  {
    "text": "because that all just works, we ignore it. So how does it look for a programmer? So we've got the fundamental\nunit of information",
    "start": "277276",
    "end": "284015"
  },
  {
    "text": "is the bit, that's a one or a zero. Traditionally we organize\nbits in groups of eight,",
    "start": "284015",
    "end": "289103"
  },
  {
    "text": "those are bytes, and memory is essentially",
    "start": "289103",
    "end": "292603"
  },
  {
    "text": "just a long sequence of\nbytes one after the other just heading off into the mist.",
    "start": "295581",
    "end": "301066"
  },
  {
    "text": "And they're arranged in a certain order,",
    "start": "302681",
    "end": "306014"
  },
  {
    "text": "every byte gets a number,\nthat's called it's address. So we start at zero and\nthen one and then two and then three and then an\n8,000,000,000 byte system",
    "start": "308005",
    "end": "314574"
  },
  {
    "text": "we've got billions off in the distance.",
    "start": "314574",
    "end": "317824"
  },
  {
    "text": "It can be, you can view these things in different directions, often we view it like this, organized by\nword instead of by byte.",
    "start": "321014",
    "end": "327346"
  },
  {
    "text": "So a word is a vague term of the art in computer science, but usually it means",
    "start": "327346",
    "end": "333099"
  },
  {
    "text": "a unit that's the size of a pointer. So on modern devices it's\n64 bits or eight bytes.",
    "start": "333099",
    "end": "338849"
  },
  {
    "text": "And it just heads off into infinity. So here I've got the\nbytes addressed by eight.",
    "start": "338849",
    "end": "345504"
  },
  {
    "text": "And we like hexadecimal. Hexadecimal is where you've\ngot base 16 addressing",
    "start": "348442",
    "end": "355452"
  },
  {
    "text": "instead of base eight. So zero through nine then A through F, that's a nice multiple\nof two so everything",
    "start": "355452",
    "end": "360825"
  },
  {
    "text": "fits together nicely, it's kind of the native language of computing. So it's the natural language to use here.",
    "start": "360825",
    "end": "366921"
  },
  {
    "text": "And so I've got the addresses done in hexadecimal instead,\nzero, eight, 16 is 10,",
    "start": "366921",
    "end": "372378"
  },
  {
    "text": "24 and all that.",
    "start": "372378",
    "end": "373711"
  },
  {
    "text": "And this is just the big picture of what this whole thing looks like. If you zoomed out this is\na Mac running on x86-64,",
    "start": "378263",
    "end": "386328"
  },
  {
    "start": "379000",
    "end": "587000"
  },
  {
    "text": "everything's a little bit different and it's all very platform specific, but essentially you've got a gap of stuff",
    "start": "387286",
    "end": "394424"
  },
  {
    "text": "that doesn't exist, the first\nfour gigabytes of memory is not mapped, this doesn't\ntake up any physical space",
    "start": "394424",
    "end": "401283"
  },
  {
    "text": "it's just an addressing trick. Then you've got the user,\nyour program essentially,",
    "start": "401283",
    "end": "406948"
  },
  {
    "text": "your memory is the green stuff. So you get a chunk that's for you and then you've got a nice,\nbig, empty space after that",
    "start": "406948",
    "end": "413806"
  },
  {
    "text": "and then finally the kernel\nis down at the bottom. So you've got this two\nto the 64th power bytes which get sliced up and\norganized like this.",
    "start": "413806",
    "end": "422043"
  },
  {
    "text": "And this is essentially how it looks if you zoom in a little\nbit, so this is the same",
    "start": "424091",
    "end": "430024"
  },
  {
    "text": "picture as before except\nit's more realistic because instead of starting at zero we're starting at 4,000,000,000.",
    "start": "430024",
    "end": "436335"
  },
  {
    "text": "We've got pointers in memory,\nI'm sure you're all familiar with the term pointer, references.",
    "start": "436335",
    "end": "441386"
  },
  {
    "text": "A pointer at this level is just a number. And it's a number that\njust happens to correspond to the address of\nsomething else in memory.",
    "start": "441386",
    "end": "448825"
  },
  {
    "text": "So here we've got this thing up there, that stores the address\nof this bit down there",
    "start": "448825",
    "end": "456137"
  },
  {
    "text": "and I just indicate that with an arrow. The arrow doesn't exist in reality, it's just a number that we\ntreat as if it were an arrow.",
    "start": "456137",
    "end": "463669"
  },
  {
    "text": "And one more detail on all of this, whoops, went too far, we\nin the most modern systems",
    "start": "464590",
    "end": "471449"
  },
  {
    "text": "store things in little-endian order which is essentially the\nleast significant part of the number comes first.",
    "start": "471450",
    "end": "477960"
  },
  {
    "text": "So it's as if you wrote 234 as 432, everything's backwards,\njust one of those things",
    "start": "477960",
    "end": "484425"
  },
  {
    "text": "you just kinda have to\nlearn to live with it and read it that way, so.",
    "start": "484425",
    "end": "488512"
  },
  {
    "text": "Memory is organized into,\nas far as we see it, is organized into three fundamental parts.",
    "start": "491389",
    "end": "497857"
  },
  {
    "text": "We've got at the hardware level it's just a big list of stuff. But the way we actually treat it,",
    "start": "497857",
    "end": "505197"
  },
  {
    "text": "parts of it have more specific purposes. So we've got the stack which is where",
    "start": "505197",
    "end": "510703"
  },
  {
    "text": "all your local variables go when you write variables that you're\nusing in your computations",
    "start": "510703",
    "end": "516072"
  },
  {
    "text": "in a function, that goes on the stack and it's called a stack because every time you make a function call\nit adds that function's",
    "start": "516072",
    "end": "523216"
  },
  {
    "text": "local variables to it. And when you make another call it goes up and another call it goes\nup and then when you return from a function it goes back down,",
    "start": "523217",
    "end": "528977"
  },
  {
    "text": "back down, back down. So it's like a stack of things. You've also got global\ndata in your program.",
    "start": "528977",
    "end": "535240"
  },
  {
    "text": "Those are essentially\nthings that came along as part of the program when you loaded it.",
    "start": "535241",
    "end": "540450"
  },
  {
    "text": "So your global variables are part of that, your string constants, your type metadata in Swift, in other\nlanguages, just gets loaded",
    "start": "540450",
    "end": "549136"
  },
  {
    "text": "as part of that. And then you've got the heap,\nand the heap is dynamically allocated stuff, when\nyou create a new object,",
    "start": "549136",
    "end": "555862"
  },
  {
    "text": "that allocates some\nmemory that's on the heap. And these are things where basically they don't live permanently,\nthey've got some lifetime",
    "start": "555862",
    "end": "562876"
  },
  {
    "text": "but they're not tied to\na function, they're not tied to your program, they come to life and go away kind of arbitrarily.",
    "start": "562876",
    "end": "570774"
  },
  {
    "text": "And that's essentially everything else. When you create a new object,\nwhen you allocate memory manually, when you\nconcatenate strings, whatever,",
    "start": "570774",
    "end": "577079"
  },
  {
    "text": "that's all on the heap. So that's kinda the overview,\nremind you what memory is,",
    "start": "577079",
    "end": "584550"
  },
  {
    "text": "what the whole deal is that\nwe're talking about here. Let's get into dumping memory. Actually diving in and\ninspecting the contents,",
    "start": "584550",
    "end": "592097"
  },
  {
    "start": "587000",
    "end": "890000"
  },
  {
    "text": "seeing what's actually in there. So I'm gonna explore this\nprogram that I wrote, how it works, that actually goes in",
    "start": "592097",
    "end": "599141"
  },
  {
    "text": "and traces all this stuff out. If anyone wants to take a look at it I've got it up on Github,\nthe Github address",
    "start": "600208",
    "end": "606474"
  },
  {
    "text": "is there, or there's a tiny URL below, or if anyone likes\nreally huge URLs you can",
    "start": "606474",
    "end": "612355"
  },
  {
    "text": "use that one at the bottom, but I'm not gonna wait for you to type it out.",
    "start": "612356",
    "end": "617957"
  },
  {
    "text": "Just real quick, this\nuses Xcode 8 and Swift 3. If anyone's doing\nanything with Swift so far you know that there have\nbeen a lot of versions",
    "start": "617957",
    "end": "625960"
  },
  {
    "text": "of it and they like to\nbreak compatibility. So last year was Swift 2,\nstarting a couple of weeks ago",
    "start": "625960",
    "end": "632021"
  },
  {
    "text": "we've got Swift 3 now\nand that's different. So if you wanna use\nthat code you need this.",
    "start": "632021",
    "end": "638133"
  },
  {
    "text": "So back to this. The kind of fundamental\nunit of this program is a function that looks like this.",
    "start": "641397",
    "end": "648456"
  },
  {
    "text": "And this is a function that\nworks on an arbitrary type, it takes a value and it's\ngonna return an array",
    "start": "648456",
    "end": "654039"
  },
  {
    "text": "of unsigned eight bit integers, or bytes. And we'll just use it\nas in the demo above,",
    "start": "654039",
    "end": "660895"
  },
  {
    "text": "you create a variable\ncontaining something, any arbitrary thing, and\nthen you just call this and it'll hand you back\nthe bytes that make it up.",
    "start": "662192",
    "end": "669034"
  },
  {
    "text": "And that's going to\nserve as the foundation for this whole program. And the question is, how do we write this in Swift specifically?",
    "start": "669034",
    "end": "676914"
  },
  {
    "text": "This is a real quick overview\nof one possible implementation which is not what the\nprogram actually uses,",
    "start": "676914",
    "end": "682662"
  },
  {
    "text": "but it kinda gets the ball rolling as far as how this works. So the idea is you get the value,",
    "start": "682662",
    "end": "689855"
  },
  {
    "text": "you get it's size and because\nwe know the type of the value, this is a generic function in Swift",
    "start": "689855",
    "end": "695399"
  },
  {
    "text": "so it works on any type, but it knows what type it's being called\nwith at any given time. This memory layout type allows us",
    "start": "695400",
    "end": "702298"
  },
  {
    "text": "to get the actual size, so that tells us how many bytes it is, so we\nknow how long it is in memory.",
    "start": "702298",
    "end": "707548"
  },
  {
    "text": "And then there's this\nbuilt-in function in Swift called with unsafe pointer.",
    "start": "707548",
    "end": "713688"
  },
  {
    "text": "So you call that, you give it a variable and it comes back and gives\nyou a pointer to that variable. And once we have a\npointer we can do things",
    "start": "713688",
    "end": "721750"
  },
  {
    "text": "like look at that pointer as if it were a pointer of a different type. So imagine you have a pointer to an int",
    "start": "721750",
    "end": "728305"
  },
  {
    "text": "and we do this with\nmemory rebound call here which says, okay, pretend that this is not",
    "start": "728305",
    "end": "736161"
  },
  {
    "text": "a pointer to an integer,\npretend this is a pointer to bytes, and just work with me on this,",
    "start": "736161",
    "end": "741595"
  },
  {
    "text": "it's the same thing but\nit's a different type. Now go through and read it.",
    "start": "741596",
    "end": "747285"
  },
  {
    "text": "So what this does, this takes a pointer to whatever arbitrary thing you've got and says, alright, just\npretend it's raw bytes,",
    "start": "748571",
    "end": "754920"
  },
  {
    "text": "interpret it that way. And then once we have\nthat we can go through and just read one by one and that's",
    "start": "754920",
    "end": "761884"
  },
  {
    "text": "a bit of a shortcut here,\nI just tell the system to read it for me, there's no\nloop or anything like that.",
    "start": "761884",
    "end": "767559"
  },
  {
    "text": "Unsafe buffer pointer\nbasically lets me say it's a container and then I\ncan create an array from that",
    "start": "767559",
    "end": "773099"
  },
  {
    "text": "and it all just kind of happens. Swift let's you write\nshort stuff like that. So real quick demo of what this produces.",
    "start": "773099",
    "end": "780023"
  },
  {
    "text": "I created a variable that contains one, two, three, four,\nfive, six, seven, eight",
    "start": "780023",
    "end": "786648"
  },
  {
    "text": "and then I just dumped out 42,\nand if I print these things then I get these results here.",
    "start": "786648",
    "end": "792787"
  },
  {
    "text": "So you can see the first one prints out exactly what we saw except it's backwards because remember modern systems\ntend to do things backwards.",
    "start": "792787",
    "end": "799469"
  },
  {
    "text": "So it prints out eight,\nseven, six, five, four, three, two, one, zero\nand then 42 comes out as 42 with a bunch of zeros after it",
    "start": "799469",
    "end": "805887"
  },
  {
    "text": "because it's a 64 bit integer.",
    "start": "805887",
    "end": "808387"
  },
  {
    "text": "And just real quick, you don't\nneed to actually follow this, this is just some code I wrote",
    "start": "811074",
    "end": "817037"
  },
  {
    "text": "that I wanted to put up real quick. Hexadecimal is again the natural language of low level computing.",
    "start": "817037",
    "end": "822904"
  },
  {
    "text": "So this just takes an array of bytes and dumps it out as a hexadecimal string instead of as a sequence of decimal",
    "start": "822904",
    "end": "829634"
  },
  {
    "text": "integers like we saw before. So if we use that then\nwe get this instead. Same basic thing except\ninstead of printing",
    "start": "829634",
    "end": "837585"
  },
  {
    "text": "decimal we get hex. So one, two, three, four,\nfive, six, seven, eight comes out just as it did before and then 42 comes out as\n2a, since that's what 42",
    "start": "838626",
    "end": "847284"
  },
  {
    "text": "is in hexadecimal, followed\nby a bunch of zeros. So this let's us dump this stuff out in a form that we can understand,",
    "start": "847284",
    "end": "854173"
  },
  {
    "text": "but that's still close\nto what the computer has.",
    "start": "854173",
    "end": "858173"
  },
  {
    "text": "Alright, so if you got this\nwhere we can take a value and see what's in it, but real programs",
    "start": "859353",
    "end": "864691"
  },
  {
    "text": "are more complicated than\nsingle values, right, they've got a lot more going on. Real programs look more like this.",
    "start": "864691",
    "end": "870445"
  },
  {
    "text": "Okay, you've got a value which\ncontains a bunch of bytes and some of those bytes\nare actually pointers",
    "start": "870445",
    "end": "875933"
  },
  {
    "text": "which point to other stuff and those point to other things and you get\nthis whole tree thing going on.",
    "start": "875933",
    "end": "881768"
  },
  {
    "text": "So we want to be able to actually\nchase all this stuff down in an automated fashion. The program needs to be able to actually",
    "start": "881768",
    "end": "888320"
  },
  {
    "text": "find all of this stuff. So how do we do that? We start off with the\nknowledge that pointers",
    "start": "888320",
    "end": "894674"
  },
  {
    "start": "890000",
    "end": "1011000"
  },
  {
    "text": "are just integers, alright, a pointer is just an address, it's just a number",
    "start": "894674",
    "end": "900006"
  },
  {
    "text": "which we interpret as\nanother location in memory. So I wrote a quick struct\nwhich gets used in the program,",
    "start": "900007",
    "end": "906523"
  },
  {
    "text": "all it is is it just contains an address which is an unsigned integer,\npointer sized integer. And wrapping it in a struct\nhelps me keep things apart",
    "start": "906523",
    "end": "914932"
  },
  {
    "text": "so you don't confuse which parameters are actually integers and which parameters",
    "start": "914932",
    "end": "920855"
  },
  {
    "text": "are integers which we are\ntreating as pointers, right. Just make a new type\nso that the type system helps us write program correctly.",
    "start": "920856",
    "end": "928054"
  },
  {
    "text": "And then this bit of code essentially takes an array of bytes,\nwhich we already know",
    "start": "929452",
    "end": "934457"
  },
  {
    "text": "how to obtain, we just\nwrote that function, and it takes that array of bytes and tries to scan for pointers in it.",
    "start": "934457",
    "end": "940626"
  },
  {
    "text": "So again, a pointer is just an integer that you happen to treat as an address. And we can't know how\nstuff is being treated",
    "start": "940626",
    "end": "947613"
  },
  {
    "text": "at this level because we just get a bunch of bytes and we\ndon't know what they mean. So we're just gonna kind of\noptimistically go through",
    "start": "947613",
    "end": "953617"
  },
  {
    "text": "and slice it up into chunks of eight bytes and pull them all out and pretend, say,",
    "start": "953617",
    "end": "959264"
  },
  {
    "text": "what if these were pointers,\nwhat would that mean? So that's what this does,\nwe take this array of bytes",
    "start": "959264",
    "end": "966300"
  },
  {
    "text": "and we say, instead of treating it as an array of bytes gives me a pointer",
    "start": "966300",
    "end": "971714"
  },
  {
    "text": "to it's contents and treat it as a pointer to pointers, okay, which means that we can",
    "start": "971715",
    "end": "977688"
  },
  {
    "text": "essentially go through and\nsay, read the first pointer size chunk, read the\nsecond pointer size chunk, read the third pointer size chunk.",
    "start": "977688",
    "end": "984589"
  },
  {
    "text": "And then we take all of that\nand return it as an array. So this code essentially\nwill just go through",
    "start": "984589",
    "end": "991693"
  },
  {
    "text": "this big array of bytes that\nwe get from the thing before and divide it up, which, like this.",
    "start": "991693",
    "end": "998000"
  },
  {
    "text": "So this is a visual indication of what's going on with that code. So we give it a value, it returns",
    "start": "998000",
    "end": "1004648"
  },
  {
    "text": "a bunch of bytes then we go through, slice it up and get the individual pieces.",
    "start": "1004648",
    "end": "1009939"
  },
  {
    "text": "And then we can start chasing those down. So we can read a value,\ngrab all of it's bytes,",
    "start": "1009939",
    "end": "1017880"
  },
  {
    "start": "1011000",
    "end": "1183000"
  },
  {
    "text": "then we can grab all of the pointers that those bytes might indicate. And then we can take those pointers",
    "start": "1017880",
    "end": "1023889"
  },
  {
    "text": "and repeat the process and essentially that gives you the tree, you can in a loop keep going through as long\nas you've got pointers",
    "start": "1023889",
    "end": "1029848"
  },
  {
    "text": "to explore, you read their contents and then you spit them out. The problem with this approach,",
    "start": "1029848",
    "end": "1035548"
  },
  {
    "text": "we don't know which pointers\nare actually pointers and which pointers are just integers, it might be the player's high score,",
    "start": "1035548",
    "end": "1041132"
  },
  {
    "text": "it might be the number\nof people who dislike you or something like that and\nwe don't know what they mean. And normally in a program when you try",
    "start": "1041133",
    "end": "1048837"
  },
  {
    "text": "to read from a pointer that's\nnot actually a pointer, it just is some illegal piece of memory, then your program crashes which is good",
    "start": "1048837",
    "end": "1056182"
  },
  {
    "text": "in normal code because you don't want to proceed when your\nprogram is that confused,",
    "start": "1056182",
    "end": "1061481"
  },
  {
    "text": "you want it to just stop\nand produce a crash log or something like that. But in this code we want to be able",
    "start": "1061481",
    "end": "1067589"
  },
  {
    "text": "to keep going so we\ncan explore this stuff. So we wanna be able to read from pointers without crashing if they're bad.",
    "start": "1067589",
    "end": "1074725"
  },
  {
    "text": "So on the Mac and on\niOS we've got this nice low level function, Apple platforms use",
    "start": "1076516",
    "end": "1082613"
  },
  {
    "text": "a mach kernel highly modified\nand added onto stuff, but the low level mach\ncalls are still there",
    "start": "1082613",
    "end": "1088167"
  },
  {
    "text": "and there's a mach call\ncalled mach vm read overwrite.",
    "start": "1088167",
    "end": "1092334"
  },
  {
    "text": "And essentially it's a system call where you give it two pointers and you say, I wanna copy this many bytes",
    "start": "1093268",
    "end": "1099365"
  },
  {
    "text": "from that pointer to this pointer. If you're familiar with\nthe memcpy function from the C standard library,\nit's exactly like that",
    "start": "1099365",
    "end": "1105885"
  },
  {
    "text": "except that if you give\nmemcpy a bad pointer your program crashes and if you give mach vm read overwrite\na bad pointer it's okay,",
    "start": "1105885",
    "end": "1113189"
  },
  {
    "text": "it returns an error\nbecause it's a system call, it happens at the kernel level, the kernel level can do\nall this checking safely",
    "start": "1113189",
    "end": "1119702"
  },
  {
    "text": "and so it can come back and say, I couldn't do that because\nthat is not a real pointer,",
    "start": "1119702",
    "end": "1125387"
  },
  {
    "text": "that was just a bunch of junk and the address there doesn't exist. And so based on that we can go through",
    "start": "1125387",
    "end": "1133084"
  },
  {
    "text": "and reliably follow this\ntree without crashing because we can essentially\noptimistically try",
    "start": "1135598",
    "end": "1142356"
  },
  {
    "text": "every pointer, pass it to this function and then if it comes back\nand says there was an error, that's fine, we just say,\nokay, couldn't follow that,",
    "start": "1142356",
    "end": "1148917"
  },
  {
    "text": "keep on going. This is a real quick, this\nis just a function prototype what looks like it takes a task,",
    "start": "1148917",
    "end": "1154871"
  },
  {
    "text": "which is like a process, if\nyou've got the right permissions on the Mac you can actually\nread from other processes",
    "start": "1154871",
    "end": "1160283"
  },
  {
    "text": "not your own which is\nsort of the foundations of how you can build a debugger. It takes an address, it takes a length,",
    "start": "1160284",
    "end": "1166553"
  },
  {
    "text": "it takes a destination address and it takes a pointer to something where it will tell you how\nmany bytes it actually read.",
    "start": "1166553",
    "end": "1174670"
  },
  {
    "text": "So back at the beginning I showed a function that would read from a pointer, but it would crash if you\ngave it a bad pointer,",
    "start": "1174670",
    "end": "1181217"
  },
  {
    "text": "this will read from a pointer safely. So essentially it's just a\nwrapper around that mach call.",
    "start": "1181217",
    "end": "1188188"
  },
  {
    "start": "1183000",
    "end": "1217000"
  },
  {
    "text": "It takes the pointer you give it, it does a little bit of casting to get it into the form\nthat the system wants",
    "start": "1188188",
    "end": "1193273"
  },
  {
    "text": "and then it just makes that call. If it succeeds it returns and says, hey, we did it, and if it doesn't",
    "start": "1193274",
    "end": "1199247"
  },
  {
    "text": "then it returns false, the caller can know that it didn't work.",
    "start": "1199247",
    "end": "1204743"
  },
  {
    "text": "And so that way based on this we can build this whole recursive scanning system.",
    "start": "1204744",
    "end": "1209718"
  },
  {
    "text": "Let's see, there we go, alright. So we can read this stuff safely,",
    "start": "1213169",
    "end": "1219940"
  },
  {
    "start": "1217000",
    "end": "1343000"
  },
  {
    "text": "but we need to know how much to read. The first value we read we\ncan get the size of the type",
    "start": "1219940",
    "end": "1226426"
  },
  {
    "text": "because we know the type it compile time, it's a generic function,\nwe get that metadata from the compiler, but after\nwe start chasing pointers",
    "start": "1226426",
    "end": "1234461"
  },
  {
    "text": "we can't do that anymore\nbecause we're dealing with arbitrary bags of\nbytes, we don't know what this stuff is so we need to know,",
    "start": "1234461",
    "end": "1240804"
  },
  {
    "text": "we need to be able to at least guess how many bytes to read at any given time,",
    "start": "1240804",
    "end": "1245927"
  },
  {
    "text": "when you chase these pointers through. For stuff that's on the heap, there's the malloc size function,\nat least on the Mac",
    "start": "1245927",
    "end": "1253061"
  },
  {
    "text": "and on iOS, where you give it a pointer and it comes back and\nsays, there were actually 32 bytes allocated on the heap here.",
    "start": "1253061",
    "end": "1260830"
  },
  {
    "text": "So we can call that and it comes back and tells us exactly how much we can read.",
    "start": "1260831",
    "end": "1265877"
  },
  {
    "text": "Which is great. And even better, this function is tolerant of bad data,\nso if you give it something",
    "start": "1265878",
    "end": "1271015"
  },
  {
    "text": "that's not a pointer or you give it a pointer to something that's legitimate, but not allocated on the heap,",
    "start": "1271015",
    "end": "1276931"
  },
  {
    "text": "or you give it a pointer to something in the middle of something else, whatever, it doesn't care,\nit'll give you back zero. So it doesn't crash,\nwhich is really convenient",
    "start": "1276931",
    "end": "1283700"
  },
  {
    "text": "for our purposes. And finally, we've got global variables,",
    "start": "1283700",
    "end": "1288904"
  },
  {
    "text": "code, things like that. Those are symbols in your app,\nthere's the dladder function",
    "start": "1288904",
    "end": "1295291"
  },
  {
    "text": "where you give it an\naddress and it comes back and tells you what symbol is nearby.",
    "start": "1295291",
    "end": "1300619"
  },
  {
    "text": "And so we can use that to check to see if something is actually a symbol and we can also use it to kind of extract",
    "start": "1300619",
    "end": "1307762"
  },
  {
    "text": "the size by essentially scanning. It gives you the symbol that comes immediately before the\npointer you give it.",
    "start": "1307762",
    "end": "1314732"
  },
  {
    "text": "So you start from here and you say, give me the symbol information and if it comes back and says, yes,",
    "start": "1314732",
    "end": "1320283"
  },
  {
    "text": "I have symbol information,\nthen advance it by one byte and say, how 'bout here, how 'bout here, how 'bout here, and just keep doing that",
    "start": "1320283",
    "end": "1326458"
  },
  {
    "text": "until it gives you a different answer and then you know exactly\nhow long that thing was. And as a bonus, it also\ngives you the names.",
    "start": "1326458",
    "end": "1332686"
  },
  {
    "text": "So your function names,\nyour global variable names, things like that, those all pop out",
    "start": "1332686",
    "end": "1338560"
  },
  {
    "text": "of this API, and so we can use them to annotate our scan and help\nus understand what's going on.",
    "start": "1338560",
    "end": "1344244"
  },
  {
    "start": "1343000",
    "end": "1428000"
  },
  {
    "text": "Those names in Swift\nand also in C++ tend to come up mangled because the compiler",
    "start": "1344244",
    "end": "1349705"
  },
  {
    "text": "tries to embed information\nabout what the type is besides just the name. So in C for example,\nif you have a function",
    "start": "1349706",
    "end": "1356090"
  },
  {
    "text": "called summon, the symbol\nname that it spits out",
    "start": "1356090",
    "end": "1360090"
  },
  {
    "text": "just says summon, and in Swift if you have a function called summon the symbol name comes out more like this",
    "start": "1362239",
    "end": "1367849"
  },
  {
    "text": "where you've got a bunch\nof extra stuff on it because it will not\nonly include that name, but it will also include the fact that it takes two integers\nand returns a string",
    "start": "1367849",
    "end": "1374674"
  },
  {
    "text": "or whatever it actually is. So in order to help with that there's the Swift demangle\ncommand that comes with Xcode.",
    "start": "1374675",
    "end": "1382200"
  },
  {
    "text": "I imagine it's available in the Swift open source tools as well. You give it a mangled\nsymbol and it comes back",
    "start": "1382200",
    "end": "1389173"
  },
  {
    "text": "with something like this\nwhich is more readable. So in my code I just dump\neverything through that. Swift demangle is a very nice program",
    "start": "1389173",
    "end": "1395878"
  },
  {
    "text": "because if you give it\nsomething it doesn't understand it just gives it back to you unmodified. So I could just feed everything through it",
    "start": "1395878",
    "end": "1401123"
  },
  {
    "text": "without having to fear\nthat it would explode or crash or something like that on data that wasn't actually\nmangles Swift symbols.",
    "start": "1401124",
    "end": "1408303"
  },
  {
    "text": "And then C++ has the same thing, there's a tool called C++filt which does the same job for C++ names",
    "start": "1408303",
    "end": "1415160"
  },
  {
    "text": "and it has the same semantics where if you give it something\nit doesn't understand",
    "start": "1415160",
    "end": "1420744"
  },
  {
    "text": "it gives it back to you\nwithout changing it. So I could just pass every name that I came across to these two tools.",
    "start": "1420744",
    "end": "1427436"
  },
  {
    "start": "1428000",
    "end": "1529000"
  },
  {
    "text": "A lot of the data that\nwe come across in memory is actually strings,\nalright, textual information like method names, like user input,",
    "start": "1429989",
    "end": "1437923"
  },
  {
    "text": "and it's useful to be able to find these. And the trouble is again, we're working with these bags of bytes, we\ndon't know what's going on",
    "start": "1437923",
    "end": "1445366"
  },
  {
    "text": "with them, they're just a sequence of data and we want to be able to at least guess",
    "start": "1445366",
    "end": "1450421"
  },
  {
    "text": "at which sequences of data actually represent text and which don't.",
    "start": "1450421",
    "end": "1456351"
  },
  {
    "text": "And there's no way to do this reliably, but a decent heuristic is\nto look for ASCII characters and look for printable ASCII characters,",
    "start": "1456351",
    "end": "1463798"
  },
  {
    "text": "so zero through 31 in ASCII\nare control characters which we don't expect to find",
    "start": "1463798",
    "end": "1468897"
  },
  {
    "text": "as part of text in a program, at least not the text that we're interested in.",
    "start": "1471724",
    "end": "1477057"
  },
  {
    "text": "And then stuff beyond 126 is\neither the delete character in ASCII, or it's non-ASCII characters.",
    "start": "1477057",
    "end": "1483987"
  },
  {
    "text": "So we look for printable ASCII characters and we look for sequences\nof at least four.",
    "start": "1483987",
    "end": "1489200"
  },
  {
    "text": "So the idea is that if you just have one or two or three then it's likely",
    "start": "1489200",
    "end": "1494665"
  },
  {
    "text": "that's just some other data that just coincidentally happened to look like text. And once you get up to four\nthere's a decent chance",
    "start": "1494665",
    "end": "1501489"
  },
  {
    "text": "that it's something textually interesting, and it's not a guarantee,\nbut it's a decent",
    "start": "1501489",
    "end": "1506656"
  },
  {
    "text": "heuristic, it gives you good results. And this is code that just goes through and implements that heuristic here.",
    "start": "1506656",
    "end": "1512256"
  },
  {
    "text": "You give it an array of bytes and it goes through, it splits that array into chunks of continuous\nprintable ASCII characters",
    "start": "1512256",
    "end": "1520542"
  },
  {
    "text": "and then filters out all the short ones and gives you back the long ones. So we can run this on the byte arrays",
    "start": "1520542",
    "end": "1526740"
  },
  {
    "text": "that we get out of the scanner to see what's going on in them. Alright, so those are the\nfoundations of the program,",
    "start": "1526740",
    "end": "1534882"
  },
  {
    "start": "1529000",
    "end": "1565000"
  },
  {
    "text": "there's a bunch of\nbookkeeping that goes on in it if you're interested in that part look it up on Github, but\nthose are the fundamental",
    "start": "1534882",
    "end": "1543658"
  },
  {
    "text": "pieces and we now know\nhow to build all of that. And so we can read all of this stuff,",
    "start": "1543658",
    "end": "1549207"
  },
  {
    "text": "but we wanna be able to actually output it in some form that's nice\nfor the human to look at. So we could just dump it all in text form",
    "start": "1549207",
    "end": "1556529"
  },
  {
    "text": "or something like that,\nbut it's gonna take a lot of work to interpret. Ideally we want something more like this.",
    "start": "1556530",
    "end": "1562283"
  },
  {
    "text": "And as an intermediate step\nI produce something like this which is not very readable at all.",
    "start": "1562283",
    "end": "1568502"
  },
  {
    "start": "1565000",
    "end": "1643000"
  },
  {
    "text": "But this is an open source\nprogram called Graphviz and essentially you\ngive it a list of nodes",
    "start": "1568502",
    "end": "1575517"
  },
  {
    "text": "and you give it a list of connections and you say this node has this label and it's connected to these nodes",
    "start": "1575517",
    "end": "1580982"
  },
  {
    "text": "and this node has this\nlabel and it's connected to these nodes. And when you hand it over to that program",
    "start": "1580982",
    "end": "1586943"
  },
  {
    "text": "it hands you back stuff like this which is really cool and readable and you can go through and look.",
    "start": "1586943",
    "end": "1592455"
  },
  {
    "text": "This is, I wrote a simple C program that creates a little structure in memory and then hands it off to my dumper program",
    "start": "1592456",
    "end": "1598911"
  },
  {
    "text": "and that generates the Graphviz stuff and then Graphviz turns it into a PDF which looks like this.",
    "start": "1598911",
    "end": "1604798"
  },
  {
    "text": "So we can go through, we can read, we can see we started off\nwith a pointer up at the top, that pointer points to some malloc memory",
    "start": "1604798",
    "end": "1610726"
  },
  {
    "text": "which contains this\nand those point to more malloc memory which point\nto more malloc memory and we've got a couple\nof strings at the bottom",
    "start": "1610726",
    "end": "1616619"
  },
  {
    "text": "and we can go through and you can just see this whole structure\nvisually, which is cool, so that helps us figure\nout what's going on.",
    "start": "1616619",
    "end": "1624057"
  },
  {
    "text": "So that's the theory of how\nwe're looking at these things.",
    "start": "1624057",
    "end": "1628224"
  },
  {
    "text": "So let's actually go\nthrough and look at them and see what's going on with this stuff.",
    "start": "1629476",
    "end": "1634894"
  },
  {
    "text": "How does Swift represent things in memory? How does C represent things in memory? How does C++ represent things?",
    "start": "1634894",
    "end": "1641194"
  },
  {
    "text": "So quick notes, this is all\nvery architecture specific, I did this stuff on Mac on x86-64,",
    "start": "1641194",
    "end": "1647708"
  },
  {
    "start": "1643000",
    "end": "1699000"
  },
  {
    "text": "iOS 64 bit is likely to be very similar, Swift on Linux 64 bit\nis likely to be similar,",
    "start": "1647708",
    "end": "1655656"
  },
  {
    "text": "but this is stuff that's very useful for debugging, it's very\nuseful for understanding how the system works,\nit is not a good idea",
    "start": "1655656",
    "end": "1662250"
  },
  {
    "text": "to write any code that\nrelies on this stuff unless it's kind of a hobby project or an experimental thing.",
    "start": "1662250",
    "end": "1668645"
  },
  {
    "text": "You don't wanna write any production code that relies on this stuff because offsets, sizes, the meaning of various fields",
    "start": "1668645",
    "end": "1675797"
  },
  {
    "text": "is all subject to change\nfrom one release to the next. So it's really useful stuff, but you don't",
    "start": "1675797",
    "end": "1683034"
  },
  {
    "text": "want to incorporate this into that library",
    "start": "1683034",
    "end": "1686534"
  },
  {
    "text": "that you're writing for work\nthat's gonna ship to users.",
    "start": "1688502",
    "end": "1692669"
  },
  {
    "text": "Oh, my phone is not\ncooperating with me today. There we go. Alright, let's take a\nlook at some C structs.",
    "start": "1696809",
    "end": "1701939"
  },
  {
    "start": "1699000",
    "end": "1817000"
  },
  {
    "text": "C is very simple in how it\nlays things out in memory, that's kind of it's appeal.",
    "start": "1701939",
    "end": "1707430"
  },
  {
    "text": "And we'll take a look at this real quick, I made a C struct which just\ncontains three long fields,",
    "start": "1707430",
    "end": "1713645"
  },
  {
    "text": "x, y and z, I wrote a little bit of code that fills them with one, two and three and then I dumped out that memory",
    "start": "1713645",
    "end": "1719570"
  },
  {
    "text": "using my nice graphical dumper and that's what we get\nup here in the bubble.",
    "start": "1719571",
    "end": "1724739"
  },
  {
    "text": "And you can see that it essentially just lays them out sequentially. We've got one followed\nby two followed by three",
    "start": "1724739",
    "end": "1730107"
  },
  {
    "text": "and there's a bunch of empty space because long is an eight byte value and these are small numbers, so they have",
    "start": "1730108",
    "end": "1735109"
  },
  {
    "text": "a lot of leading zeroes and\njust puts them out one by one. It gets more interesting\nwhen you get different sizes.",
    "start": "1735109",
    "end": "1742803"
  },
  {
    "text": "So this is a struct that\nhas a bunch of fields of different sizes, a through\nh, some of them are one byte,",
    "start": "1742803",
    "end": "1748902"
  },
  {
    "text": "that's a character, some\nof them are two bytes, those are short, some of them\nare four, that's integers,",
    "start": "1748902",
    "end": "1754350"
  },
  {
    "text": "and some of them are\neight bytes, that's long. And again, the compiler just\nlays them out one by one, you can see one, two, three, four,",
    "start": "1754350",
    "end": "1760660"
  },
  {
    "text": "five, six, seven, eight,\nbut if you look closely you'll see that some of\nthem take up more space than they maybe ought to.",
    "start": "1760660",
    "end": "1767554"
  },
  {
    "text": "Number three for example,\nthree is one byte, corresponds to c, that's a one byte field,",
    "start": "1767554",
    "end": "1773361"
  },
  {
    "text": "but if you look here you've\ngot three followed by zero followed by four, so there's\nextra space in there. The reason for that is that\nstruct fields get padded.",
    "start": "1773361",
    "end": "1781662"
  },
  {
    "text": "The idea is that it's more\nefficient to access data when it's on a memory\naddress which is divisible",
    "start": "1782542",
    "end": "1787966"
  },
  {
    "text": "by it's size, or at\nleast which is divisible by whatever the hardware\narchitecture likes for it to have.",
    "start": "1787966",
    "end": "1793377"
  },
  {
    "text": "Typically it's its size. So a two byte value wants to be on an even numbered address, four byte value wants",
    "start": "1793377",
    "end": "1799924"
  },
  {
    "text": "to be on an address divisible by four. And what the compiler does,\nthis essentially wastes memory,",
    "start": "1799924",
    "end": "1805093"
  },
  {
    "text": "but it trades off memory against time by expanding these fields a little bit,",
    "start": "1805093",
    "end": "1810982"
  },
  {
    "text": "adding some space between\nthem when necessary to make sure they all line up nicely so that they're fast to access.",
    "start": "1810982",
    "end": "1817228"
  },
  {
    "start": "1817000",
    "end": "2163000"
  },
  {
    "text": "And that's really it for C. C kinda has structs and that's about it and it just lays things out sequentially",
    "start": "1818977",
    "end": "1825450"
  },
  {
    "text": "and there's no metadata, there's no implicit pointers or anything like that. C, what you see is what you get.",
    "start": "1825450",
    "end": "1832298"
  },
  {
    "text": "C++ gets more interesting though, here's a simple C++ class, I've got three virtual methods on it.",
    "start": "1832298",
    "end": "1838330"
  },
  {
    "text": "It's got one field, I\ncreate one and initialize it and dump it out, and this is what I get.",
    "start": "1839453",
    "end": "1846399"
  },
  {
    "text": "So we can see now it's\nnot just one bubble, it's got a bunch of different stuff. And I'll zoom it in so we can actually see",
    "start": "1848036",
    "end": "1854381"
  },
  {
    "text": "what's going on here. Up at the top is the actual object and that's the thing I\ncreated which contains,",
    "start": "1854381",
    "end": "1862209"
  },
  {
    "text": "in it's single field it\ncontains the value one. And we can see that\nit's got more than that. So it just had one field, but here",
    "start": "1862209",
    "end": "1868561"
  },
  {
    "text": "we've got more stuff at the top. And the program explored this and found that that thing\nat the top is a pointer",
    "start": "1868561",
    "end": "1875987"
  },
  {
    "text": "which points here, and then\nthat points to more stuff. And so that thing at the\ntop is a vtable pointer.",
    "start": "1875987",
    "end": "1882031"
  },
  {
    "text": "So in C++ the way you do\nvirtual method dispatch is the first pointer\nsized chunk of an object",
    "start": "1882031",
    "end": "1889068"
  },
  {
    "text": "is a pointer to a vtable, which is a table of function pointers. So when you call through to something like",
    "start": "1890020",
    "end": "1897133"
  },
  {
    "text": "object.x, what it actually does is it uses that table to look up",
    "start": "1897133",
    "end": "1903190"
  },
  {
    "text": "the implementation of x for that object. And that's how inheritance is implemented. If you subclass something and override,",
    "start": "1903190",
    "end": "1909245"
  },
  {
    "text": "then that generates a new table and that new table contains new entries",
    "start": "1909245",
    "end": "1914849"
  },
  {
    "text": "for those method implementations so that the code knows\nwhat it needs to call.",
    "start": "1916354",
    "end": "1921432"
  },
  {
    "text": "So here's an example of that. Quick C++ subclass, it\ninherits from the previous one, it adds a new field, it adds\na couple of new methods.",
    "start": "1921432",
    "end": "1929869"
  },
  {
    "text": "And when you dump that out\nyou get a little more stuff. And again, I'll zoom in.",
    "start": "1929869",
    "end": "1935552"
  },
  {
    "text": "So here we've got the object at the top, like before you've got this vtable pointer and then you've got the fields.",
    "start": "1935552",
    "end": "1941896"
  },
  {
    "text": "And if you'll remember, field number one was from the super class, field number two is from the subclass, it\njust puts them sequentially.",
    "start": "1941896",
    "end": "1948538"
  },
  {
    "text": "So the idea is that when the\nsuper class is doing stuff it can look at it and\nit sees what it thinks",
    "start": "1948538",
    "end": "1954117"
  },
  {
    "text": "is itself and then the subclass data gets laid out afterwards so\nthere's no conflict there,",
    "start": "1954117",
    "end": "1959153"
  },
  {
    "text": "but they're just efficiently packed in memory just the same. And then the vtable for\nthe subclass gets longer",
    "start": "1959153",
    "end": "1965783"
  },
  {
    "text": "because there were five methods now, we had three from the super\nclass, two from the subclass and then it just lists them sequentially.",
    "start": "1965784",
    "end": "1972954"
  },
  {
    "text": "So every method just gets\nan index in this table. And the subclasses get the same table",
    "start": "1972954",
    "end": "1978584"
  },
  {
    "text": "as their super class, except they can be potentially longer if there\nare more methods added and entries get replaced\nto indicate overriding.",
    "start": "1978584",
    "end": "1985987"
  },
  {
    "text": "Let's take a look at multiple inheritance, this is where things get interesting. C++ allows a class to subclass",
    "start": "1985987",
    "end": "1992329"
  },
  {
    "text": "multiple classes simultaneously. So here's a second super class to go",
    "start": "1992329",
    "end": "1997423"
  },
  {
    "text": "along with our original. And here is a subclass of both. So each super class some methods,",
    "start": "1997423",
    "end": "2004428"
  },
  {
    "text": "each super class has a\nfield, subclass has a field, create it, fill it out with some data",
    "start": "2004428",
    "end": "2009724"
  },
  {
    "text": "and this is what we get. It's a little bit more complicated.",
    "start": "2009724",
    "end": "2015318"
  },
  {
    "text": "The good news is that most of that is runtime type information stuff that we can kind of not look at too hard.",
    "start": "2015318",
    "end": "2023174"
  },
  {
    "text": "Let's zoom in and see what's going on. So again, object is at the top and we can see that it starts out similar.",
    "start": "2023174",
    "end": "2030305"
  },
  {
    "text": "So it's got a vtable pointer followed by that first field, which is one, but then something interesting happens.",
    "start": "2030306",
    "end": "2035935"
  },
  {
    "text": "Instead of doing just one, two, three, laying out all the fields sequentially, we get another vtable pointer",
    "start": "2035936",
    "end": "2041440"
  },
  {
    "text": "right in the middle of the object. And so this is how C implements\nmultiple inheritance. We've got one vtable pointer at the top,",
    "start": "2041441",
    "end": "2048170"
  },
  {
    "text": "we've got another one over there. And the idea is that it's kind of like two objects glued together.",
    "start": "2048171",
    "end": "2054429"
  },
  {
    "text": "So if you take this first one here, that's the vtable that indicates",
    "start": "2054429",
    "end": "2060055"
  },
  {
    "text": "it's an instance of\nthat first super class, and then the second super\nclass gets laid out below it.",
    "start": "2060056",
    "end": "2066398"
  },
  {
    "text": "And what happens normally in\nC and with simple C++ classes",
    "start": "2066398",
    "end": "2070565"
  },
  {
    "text": "if you cast between types\nit's got an instance of a subclass, you say,\ntreat this as if it",
    "start": "2073029",
    "end": "2078044"
  },
  {
    "text": "were an instance of its super class. This is just like some\nbookkeeping trickery, right, you've got the exact same pointer",
    "start": "2078044",
    "end": "2083644"
  },
  {
    "text": "and you just say, okay, pretend\nthis means something else. But when you get multiple\ninheritance involved",
    "start": "2083644",
    "end": "2089268"
  },
  {
    "text": "suddenly things get a\nlittle more complicated. And if you say, take this pointer and interpret it as a\npointer to its super class,",
    "start": "2089268",
    "end": "2095529"
  },
  {
    "text": "what it will actually do is it will move that pointer a little bit. So in this case it's going\nto add 16 to that address",
    "start": "2095529",
    "end": "2100722"
  },
  {
    "text": "and give you a pointer into\nthe middle of this object. And because that vtable is right there, it all just kinda works out.",
    "start": "2100722",
    "end": "2106982"
  },
  {
    "text": "And it's a bit of a crazy system, but it gets the job done.",
    "start": "2106982",
    "end": "2112084"
  },
  {
    "text": "And so you can see the effect here where you've got essentially the vtable for the subclass and\neach part of this object,",
    "start": "2112084",
    "end": "2120576"
  },
  {
    "text": "you've got two vtables in the object, each one points to a\ndifferent part of this vtable and everything just kinda lines up",
    "start": "2122369",
    "end": "2128307"
  },
  {
    "text": "with these multiple super classes so it all just works out. Lots of compiled time trickery and then the end effect is at runtime",
    "start": "2128307",
    "end": "2135879"
  },
  {
    "text": "everything is nicely laid\nout, friendly, and quick. Friendly for the computer, not for us,",
    "start": "2135879",
    "end": "2141439"
  },
  {
    "text": "but that's usually okay. So that's C++, you get\ncrazy stuff with multiple inheritance, but it's\nusually straightforward.",
    "start": "2143027",
    "end": "2150510"
  },
  {
    "text": "Again, you get that vtable at the top which tells you what kind of object it is and then all the fields are just laid out.",
    "start": "2150510",
    "end": "2157017"
  },
  {
    "text": "Sometimes you get padding\ndepending on their sizes, but it's just one after\nthe other, after the other. Just in line.",
    "start": "2157017",
    "end": "2162216"
  },
  {
    "start": "2163000",
    "end": "2546000"
  },
  {
    "text": "So let's move on the Swift now. And Swift starts out very\nsimple like C and like C++.",
    "start": "2163231",
    "end": "2169082"
  },
  {
    "text": "So just to get the ball rolling I created an empty struct\nand you'll never guess what it looks like, an empty\nstruct contains nothing at all,",
    "start": "2169082",
    "end": "2176786"
  },
  {
    "text": "it's a zero size object. Interesting feature of this,\nit does still have an address",
    "start": "2176786",
    "end": "2181865"
  },
  {
    "text": "in memory even though it\ndoesn't contain anything. The compiler still gives it an address which I thought was kinda funny.",
    "start": "2181865",
    "end": "2188199"
  },
  {
    "text": "It probably doesn't make\na whole lot of sense for the compiler to optimize\nfor zero size structs",
    "start": "2188199",
    "end": "2193318"
  },
  {
    "text": "since we don't use those very much. Move on to a more realistic example,",
    "start": "2193319",
    "end": "2200024"
  },
  {
    "text": "more useful example, here's\na struct with three fields. This is essentially the Swift equivalent",
    "start": "2200024",
    "end": "2205195"
  },
  {
    "text": "of that C example I\ndid with the beginning. Three fields, one, two and three,",
    "start": "2205195",
    "end": "2210396"
  },
  {
    "text": "and it looks, this is\nthe result, the output, the way it's laid out in memory",
    "start": "2210396",
    "end": "2216997"
  },
  {
    "text": "looks a lot like the way it\nwas laid out in memory in C. And in fact it doesn't just look like it, it is exactly the same.",
    "start": "2216997",
    "end": "2223256"
  },
  {
    "text": "These two are laid out\nin exactly the same way. So Swift is just laying\nit out one, two, three",
    "start": "2223256",
    "end": "2229319"
  },
  {
    "text": "in a row like that. There's no fancy metadata going on, there's no extra stuff,\nit's just your fields.",
    "start": "2229320",
    "end": "2236706"
  },
  {
    "text": "And then I did the same\nthing that I did before with the multiple sizes.",
    "start": "2236707",
    "end": "2243594"
  },
  {
    "text": "And again, we get the exact same result. So this is a complicated struct with different fields of different sizes",
    "start": "2243594",
    "end": "2248895"
  },
  {
    "text": "and the output is exactly\nthe same as it was in C. With one exception, you'll\nnotice that after three,",
    "start": "2248895",
    "end": "2255624"
  },
  {
    "text": "you get one, two, three and then there's this five f thing before\nfour, that's just because",
    "start": "2255624",
    "end": "2261270"
  },
  {
    "text": "the padding that gets inserted does not have to contain\nany particular value because it doesn't mean anything.",
    "start": "2261270",
    "end": "2267528"
  },
  {
    "text": "The padding is ignored. So before when I ran the thing on C it just happened to contain zero",
    "start": "2267528",
    "end": "2272586"
  },
  {
    "text": "and when I ran it on this it just happened to contain five f. So this is kinda like the\njunk DNA inside your program.",
    "start": "2272586",
    "end": "2279907"
  },
  {
    "text": "But again, it's just laid out exactly the same way C is,\nso there's no overhead, it's very straightforward.",
    "start": "2279907",
    "end": "2285981"
  },
  {
    "text": "Let's look at a little\nmore complicated thing, let's see how a Swift class looks. So simple thing, complicated result.",
    "start": "2288068",
    "end": "2295144"
  },
  {
    "text": "It's not as bad as it looks. Essentially what you're getting in there is that Swift has this\nwhole hierarchy of stuff",
    "start": "2297346",
    "end": "2304395"
  },
  {
    "text": "and it knows what types mean at runtime.",
    "start": "2304395",
    "end": "2307728"
  },
  {
    "text": "And I wanna zoom in a little\nbit so we can see the object, but what all this other stuff is going on",
    "start": "2310157",
    "end": "2316460"
  },
  {
    "text": "is essentially it's saying that your class is actually a subclass of this heap in the Swift object class and then that class",
    "start": "2316460",
    "end": "2322899"
  },
  {
    "text": "has a metaclass and all that stuff. So there's all this\nmetadata that's going on that you can use to inspect objects",
    "start": "2322899",
    "end": "2328875"
  },
  {
    "text": "and things like that. But we can mostly ignore it. So if we ignore all that other stuff and kind of zoom in,\nwe look at the instance",
    "start": "2328875",
    "end": "2336152"
  },
  {
    "text": "of the object here and we can see the data laid out in memory, one, two, three, and there's a header\nabove it which is similar",
    "start": "2336152",
    "end": "2343159"
  },
  {
    "text": "to the way C++ was. In C++ we had a vtable and\nthen there were the fields, and in Swift we have an isa pointer,",
    "start": "2343159",
    "end": "2350753"
  },
  {
    "text": "which is essentially the Swift equivallent of a vtable, it points\nto the object's class, then we've got some other stuff",
    "start": "2350753",
    "end": "2357673"
  },
  {
    "text": "which I'll talk about in a moment and then you've got the fields. So you've got the same\narrangement of a header followed by the fields\njust packed in memory.",
    "start": "2357673",
    "end": "2363849"
  },
  {
    "text": "Nice, linear, fast, hardware friendly.",
    "start": "2363849",
    "end": "2367016"
  },
  {
    "text": "And let's take a look at a little bit more complicated class, this\nis the class equivalent",
    "start": "2369324",
    "end": "2374609"
  },
  {
    "text": "of that struct that I showed. And it ends up being the exact same thing with that sort of header put at the top.",
    "start": "2374609",
    "end": "2381301"
  },
  {
    "text": "So you've got that isa pointer, you've got this other\nstuff which I'll get to. And then all the fields are just laid out",
    "start": "2381301",
    "end": "2386983"
  },
  {
    "text": "the exact same way they\nwould be in a struct. Sequentially with some padding to make everything line up nicely.",
    "start": "2386983",
    "end": "2393582"
  },
  {
    "text": "So this is sort of the\nvisual representation, the abstract representation\n'cause those hexadecimal",
    "start": "2393582",
    "end": "2398607"
  },
  {
    "text": "things get painful to read after awhile. So this is what they mean if you actually go in and interpret it.",
    "start": "2398607",
    "end": "2404923"
  },
  {
    "text": "You've got the isa pointer,\nthat other header field that I didn't mention yet,\nthose are retain counts, you may or may not know Swift operates",
    "start": "2404923",
    "end": "2411485"
  },
  {
    "text": "using automatic reference counting. So it needs to count\nthe number of references to each object and in Swift\nthose counts are stored",
    "start": "2411485",
    "end": "2417820"
  },
  {
    "text": "in the object itself as\nthat second header field. And then your stored\nproperties just get laid out",
    "start": "2417820",
    "end": "2423877"
  },
  {
    "text": "after that, the compiler\njust puts them one by one. And I did say retain counts, plural,",
    "start": "2423877",
    "end": "2430929"
  },
  {
    "text": "so there are actually two\ncounts in a Swift object, this is in interesting little feature of the way the system works. There's the strong count\nand the weak count.",
    "start": "2431830",
    "end": "2440052"
  },
  {
    "text": "So when you make a normal\nreference to a Swift object that increments the strong count and then if you make a weak reference",
    "start": "2440052",
    "end": "2446461"
  },
  {
    "text": "to an object that\nincrements the weak count. And the idea is that when the strong count goes to zero, if the\nweak count is non-zero",
    "start": "2446461",
    "end": "2453429"
  },
  {
    "text": "then the object is destroyed,\nbut it's not deallocated and that could be a talk by itself.",
    "start": "2453429",
    "end": "2459958"
  },
  {
    "text": "I got a blog article about it if anyone cares about exactly how that works. But that's essentially\nwhat we're seeing there. So there are two separate counts",
    "start": "2461984",
    "end": "2468836"
  },
  {
    "text": "packed into the same field. Each one I think is like 31\nbits or something like that.",
    "start": "2468836",
    "end": "2474324"
  },
  {
    "text": "And then let's look at that isa structure. So that isa structure in C++ the vtable",
    "start": "2474324",
    "end": "2479451"
  },
  {
    "text": "was just a list of method pointers. In Swift it's a little\nbit more complicated partly because of Objective-C interopp.",
    "start": "2479451",
    "end": "2485967"
  },
  {
    "text": "Swift has to work with\nApple's Objective-C stuff and in fact all Swift classes in memory",
    "start": "2485968",
    "end": "2492438"
  },
  {
    "text": "are also Objective-C classes. This fact is hidden from us sometimes. If you explicitly subclass\nin Objective-C class",
    "start": "2492438",
    "end": "2499581"
  },
  {
    "text": "then you can see it,\nif you use the at obj C annotation you can see it.",
    "start": "2499581",
    "end": "2505054"
  },
  {
    "text": "But even if you do none of that and you do what looks like a pure Swift class, it's actually an Objective-C\nclass just the same.",
    "start": "2505054",
    "end": "2513174"
  },
  {
    "text": "And just to be a little bit more accurate, the first part of an\nobject is not necessarily the isa pointer, sometimes\nit's the isa pointer",
    "start": "2513174",
    "end": "2520441"
  },
  {
    "text": "along with some other junk. This is just a way to\nsort of efficiently pack",
    "start": "2520441",
    "end": "2525832"
  },
  {
    "text": "some metadata in there. Apple does this on iOS 64 bit, I don't believe they do\nthis on the Mac currently.",
    "start": "2525832",
    "end": "2532032"
  },
  {
    "text": "This is all subject to change, but basically they can put little extra bits of information in there like whether this object has ever had",
    "start": "2532032",
    "end": "2539408"
  },
  {
    "text": "any associated objects with it that need to be cleaned\nup when its deallocated and things like that.",
    "start": "2539408",
    "end": "2545464"
  },
  {
    "text": "Just real quick detail there. So what do these class\nstructures look like?",
    "start": "2545464",
    "end": "2550813"
  },
  {
    "start": "2546000",
    "end": "2610000"
  },
  {
    "text": "Since every Swift class is\nalso an Objective-C class, that means that we can look at Objective-C",
    "start": "2550813",
    "end": "2556610"
  },
  {
    "text": "class definitions to see what's going on. And Objective-C class definitions are part of the Objective-C runtime",
    "start": "2556610",
    "end": "2562879"
  },
  {
    "text": "which is open source, that's convenient. So we can just look in runtime.h",
    "start": "2562879",
    "end": "2567951"
  },
  {
    "text": "in the open source dump there. And if we look there and\nwe see what's going on,",
    "start": "2567951",
    "end": "2573587"
  },
  {
    "text": "this is what we get. So every class is also a\nvalid object in memory. So if you remember an object starts",
    "start": "2573587",
    "end": "2580681"
  },
  {
    "text": "with an isa pointer, so\nthat means every class starts with an isa pointer as well. So every class is also an object,",
    "start": "2580681",
    "end": "2585932"
  },
  {
    "text": "a class has a class,\nthat's called the metaclass and you can follow that rabbit hole all the way down until\nyou get very confused.",
    "start": "2585932",
    "end": "2591566"
  },
  {
    "text": "The class also stores super class. So that allows you to follow the chain up",
    "start": "2591566",
    "end": "2598034"
  },
  {
    "text": "and essentially explore\nthe class hierarchy. Class stores its name, it\nstores a bunch of other stuff, it stores how big it's objects are,",
    "start": "2598034",
    "end": "2604442"
  },
  {
    "text": "it stores a list of instance variables and methods and it's got a cache which speeds up methods dispatch.",
    "start": "2604442",
    "end": "2612174"
  },
  {
    "start": "2610000",
    "end": "2651000"
  },
  {
    "text": "And then Swift classes take all of that and they add more stuff because Swift has more stuff going on.",
    "start": "2612174",
    "end": "2617311"
  },
  {
    "text": "So if you look in the Swift open source to see what's involved there,",
    "start": "2617311",
    "end": "2622725"
  },
  {
    "text": "we've got some flags,\nwe've got this offsets, a lot of bizarre stuff. But essentially a Swift class\nis the Objective-C class",
    "start": "2622725",
    "end": "2631265"
  },
  {
    "text": "with more stuff on the end. And then, this is an interesting part,",
    "start": "2631265",
    "end": "2636814"
  },
  {
    "text": "after all of those fields\nit's a list of methods again,",
    "start": "2636814",
    "end": "2640981"
  },
  {
    "text": "an array of method implementation. So essentially it's the\nC++ vtable approach again",
    "start": "2642591",
    "end": "2648206"
  },
  {
    "text": "with some extra stuff at\nthe top that we can ignore. And so what that means is that when you do",
    "start": "2648206",
    "end": "2653976"
  },
  {
    "start": "2651000",
    "end": "2682000"
  },
  {
    "text": "a method call in Swift it translates into essentially an array lookup. So you write obj.method up here",
    "start": "2653976",
    "end": "2661863"
  },
  {
    "text": "and that translates into\ncode like this down here. So essentially you take to object,",
    "start": "2661863",
    "end": "2667794"
  },
  {
    "text": "you get that isa field out of it and then you just index into it to get the method pointer\nand then you jump to it.",
    "start": "2667794",
    "end": "2674288"
  },
  {
    "text": "You essentially make a\nfunction call based on that. And so it's quick, it's\nefficient at runtime.",
    "start": "2674288",
    "end": "2680228"
  },
  {
    "start": "2682000",
    "end": "2714000"
  },
  {
    "text": "Let's take a look at what an object looks like when you\nsubclass a bunch of stuff. So I made a class, a subclass,",
    "start": "2683684",
    "end": "2690125"
  },
  {
    "text": "a subclass of that and so\nforth four levels deep. And it looks exactly the same.",
    "start": "2690125",
    "end": "2695712"
  },
  {
    "text": "So you've got that isa pointer at that top which tells you what it is, you've got the retain counts below\nthat and then the field",
    "start": "2695712",
    "end": "2702155"
  },
  {
    "text": "of all those classes just\ngets laid out sequentially. Just like in C++ we saw before.",
    "start": "2702155",
    "end": "2708539"
  },
  {
    "text": "So at runtime it's very simple. Even though the class\nhierarchy we looked at was kind of long and complex.",
    "start": "2708539",
    "end": "2715427"
  },
  {
    "start": "2714000",
    "end": "2775000"
  },
  {
    "text": "Let's take a look at arrays in Swift. Arrays in Swift are value types",
    "start": "2715427",
    "end": "2721778"
  },
  {
    "text": "which means that they act\nlike primitives essentially when you assign x equals y\nthat conceptually creates",
    "start": "2721778",
    "end": "2728977"
  },
  {
    "text": "a new array which is codally\nseparate from the original, this dump reveals that's\nessentially a lie, they are, in fact, reference\ntypes under the hood",
    "start": "2728977",
    "end": "2736626"
  },
  {
    "text": "the way they're implemented. So this array, one,\ntwo, three, four, five, if you actually look at it\nit's just a single pointer.",
    "start": "2736626",
    "end": "2744609"
  },
  {
    "text": "And that points to one, two, three, four and then five after that\nwhich ran off the end",
    "start": "2744609",
    "end": "2750317"
  },
  {
    "text": "so it got truncated. And so what's going on\nwith that is every array that you work with is actually a pointer",
    "start": "2750318",
    "end": "2756572"
  },
  {
    "text": "to the storage and when\nyou make a new array you just get a new pointer to the storage, nothing really happens and it's only",
    "start": "2756572",
    "end": "2762997"
  },
  {
    "text": "when you actually modify it, it will go in and it will see, oh, someone\nelse references this, I will create a copy and\nthen modify that copy.",
    "start": "2762997",
    "end": "2769938"
  },
  {
    "text": "So it still references under the hood, you just don't see it until you run a program like this, then you see it.",
    "start": "2769938",
    "end": "2777155"
  },
  {
    "start": "2775000",
    "end": "2978000"
  },
  {
    "text": "Let's take a look at protocol types, this is an interesting aspect of Swift. So here's a Swift protocol,\nit's got three methods in it.",
    "start": "2777155",
    "end": "2783370"
  },
  {
    "text": "Here is a struct, which\nholds three instances of that protocol, right, you can use a protocol as a type\nitself and that can hold",
    "start": "2783371",
    "end": "2790982"
  },
  {
    "text": "an instance of anything that\nimplements that protocol.",
    "start": "2790982",
    "end": "2795149"
  },
  {
    "text": "Here is a struct which implements it, it's just got empty implementations\nof those three methods.",
    "start": "2798595",
    "end": "2805202"
  },
  {
    "text": "It's also got a field\nwhich is just an integer containing the strange hex value, that hex value will spell\nout the word small in ASCII,",
    "start": "2805202",
    "end": "2814079"
  },
  {
    "text": "basically that's there so\nthat when I do the dump we can identify it because it will search for that string, it will\nshow it in the printing.",
    "start": "2814079",
    "end": "2822595"
  },
  {
    "text": "Here's another struct,\nthis is a larger one, it's got four fields. The first one spells out large",
    "start": "2822595",
    "end": "2828236"
  },
  {
    "text": "and the other ones just\ncontain one, two, and three repeated just so that they show up nicely.",
    "start": "2828237",
    "end": "2833246"
  },
  {
    "text": "And finally, here is a class,\nif this wants to advance,",
    "start": "2833247",
    "end": "2837414"
  },
  {
    "text": "yeah, my wifi is not cooperating.",
    "start": "2843178",
    "end": "2845928"
  },
  {
    "text": "There's a class which, same\nas the struct essentially except it spells out class instead.",
    "start": "2851160",
    "end": "2858775"
  },
  {
    "text": "And so we wanna see how\nthese get represented. So here we create an instance\nof that protocol holder",
    "start": "2858775",
    "end": "2864559"
  },
  {
    "text": "containing one instance\nof the small struct, one instance of the large struct and one instance of that class.",
    "start": "2864559",
    "end": "2871240"
  },
  {
    "text": "And if we dump it out here's what we get. The larger view of this\nis very complicated,",
    "start": "2871240",
    "end": "2876647"
  },
  {
    "text": "but we can see that struct\nin the list of strings",
    "start": "2876647",
    "end": "2880730"
  },
  {
    "text": "that it found, it found small. So we can tell from this\nthat that small struct actually gets stored\ninline, that protocol,",
    "start": "2881854",
    "end": "2888157"
  },
  {
    "text": "that field of protocol\ntype is able to store that struct inline, but the large struct",
    "start": "2888157",
    "end": "2893201"
  },
  {
    "text": "does not get stored inline and of course the class doesn't because\nthe class is a reference.",
    "start": "2893201",
    "end": "2899050"
  },
  {
    "text": "And where did that large struct go? Because structs normally\nget stored inline,",
    "start": "2899050",
    "end": "2905902"
  },
  {
    "text": "but this one was large,\nit ends up getting stored off on the side here if you\nchase the arrows around. And essentially what happens\nis it's too big to fit.",
    "start": "2905903",
    "end": "2915157"
  },
  {
    "text": "The compiler can't know how big these things are gonna be so it places an arbitrary size limit and\nwhen you go over that limit",
    "start": "2915157",
    "end": "2921303"
  },
  {
    "text": "then the compiler behind\nyour back boxes it up, allocates something dynamically\nand stores it over here.",
    "start": "2921303",
    "end": "2926510"
  },
  {
    "text": "So here large gets stored\noff in the weeds somewhere.",
    "start": "2926510",
    "end": "2930677"
  },
  {
    "text": "If you chase it down you actually look at how these things are implemented. A value of protocol\ntype holds five fields.",
    "start": "2932173",
    "end": "2939176"
  },
  {
    "text": "It holds three arbitrary data fields and then it holds some type metadata which essentially tells you what it is",
    "start": "2939176",
    "end": "2945181"
  },
  {
    "text": "and then it holds a witness table which is like a vtable for the protocol. And those three data fields are given over",
    "start": "2945181",
    "end": "2951604"
  },
  {
    "text": "to whatever the type needs them for. So if you've got a struct which holds that much stuff or less\nit gets stored inline",
    "start": "2951604",
    "end": "2957332"
  },
  {
    "text": "very efficiently and everything is quick and as soon as you go over that limit, suddenly it has to get broken out,",
    "start": "2957332",
    "end": "2963158"
  },
  {
    "text": "it gets boxed up, it gets\nallocated dynamically and you loose a lot of efficiency. And this is all hidden from you,",
    "start": "2963158",
    "end": "2968665"
  },
  {
    "text": "you don't notice it util\nyour code gets slow. So the witness table\nis basically a vtable, it's just an array of implementations",
    "start": "2968665",
    "end": "2975986"
  },
  {
    "text": "just like the C++ vtable. And so that means that\nwhen you make a method call",
    "start": "2975987",
    "end": "2982422"
  },
  {
    "start": "2978000",
    "end": "3041000"
  },
  {
    "text": "on a protocol type it looks a lot like a method call on an\nobject 'cause you've got",
    "start": "2982423",
    "end": "2988104"
  },
  {
    "text": "this special table just for the protocol. So when you make a call you get a protocol",
    "start": "2988104",
    "end": "2994907"
  },
  {
    "text": "type like that, you do p.g, make a call, it translates into something like this.",
    "start": "2994907",
    "end": "2999984"
  },
  {
    "text": "You just take that, you look up the table by looking up the fourth\nword in the protocol",
    "start": "2999984",
    "end": "3006416"
  },
  {
    "text": "and then you use the offset in the table that you know about because the compiler just knows that it's that method",
    "start": "3006416",
    "end": "3012347"
  },
  {
    "text": "and then you just make the call based on the function pointer. And then if you have a\nstruct that's too big",
    "start": "3012347",
    "end": "3018607"
  },
  {
    "text": "it ends up looking like\nthis, instead of having data fields, that first data field is actually a pointer to the real data.",
    "start": "3018607",
    "end": "3024660"
  },
  {
    "text": "So everything gets stored off over here, you've got the table over there. And then the methods here know",
    "start": "3024660",
    "end": "3030287"
  },
  {
    "text": "that when they need to do their stuff they have to go up and chase that pointer and it's all just\nhandled behind your back.",
    "start": "3030287",
    "end": "3036829"
  },
  {
    "text": "And this is not cooperating\nagain, indeed, there we go.",
    "start": "3036829",
    "end": "3040996"
  },
  {
    "start": "3041000",
    "end": "3208000"
  },
  {
    "text": "Enums are a very\ninteresting case in Swift. So Swift has these high\nlevel enumeration types where you can have\nassociated data and all that",
    "start": "3042601",
    "end": "3051514"
  },
  {
    "text": "or they can just be very simple things. Here is a simple case, just five cases,",
    "start": "3051514",
    "end": "3056588"
  },
  {
    "text": "nothing associated with\nthem, just A, B, C, D, and E. Here's a struct which will hold those.",
    "start": "3056588",
    "end": "3063062"
  },
  {
    "text": "And the result is those get\nlaid out very succinctly, zero, one, two, three, four, each one",
    "start": "3063062",
    "end": "3069615"
  },
  {
    "text": "gets a different number,\nthey're one byte long because we don't need more than one byte to represent five values and it's all",
    "start": "3069615",
    "end": "3074902"
  },
  {
    "text": "very nice and compact. Here is a version with a raw value",
    "start": "3074902",
    "end": "3079250"
  },
  {
    "text": "so you can actually go\nthrough and tell Swift, I want my cases to correspond\nto specific values.",
    "start": "3081035",
    "end": "3086132"
  },
  {
    "text": "So what this does is it\nsays A is one, B is two, C is three, D is four, E is five.",
    "start": "3086132",
    "end": "3091872"
  },
  {
    "text": "And let's see what that looks like. And an interesting thing,\nit does not change. It doesn't go one, two, three, four, five,",
    "start": "3091873",
    "end": "3098308"
  },
  {
    "text": "it still goes zero, one, two, three, four. Alright, running out of time here.",
    "start": "3098309",
    "end": "3104092"
  },
  {
    "text": "Real quick, if we just go through (clicks)",
    "start": "3104093",
    "end": "3108260"
  },
  {
    "text": "for a string, you can\ndo string raw values. So A is whatever and then B, C, D, and E",
    "start": "3110364",
    "end": "3115989"
  },
  {
    "text": "get defaults, those are\njust B, C, D, and E. And those still are zero,\none, two, three, four.",
    "start": "3115989",
    "end": "3122203"
  },
  {
    "text": "And essentially what's going on here is the raw value can be stored off in a separate table somewhere,",
    "start": "3122203",
    "end": "3128300"
  },
  {
    "text": "the compiler knows about\nit, there's no per instance raw value of any kind, so it can just be",
    "start": "3128300",
    "end": "3133880"
  },
  {
    "text": "zero, one, two, three,\nfour and somewhere else there's a table that\nsays zero is whatever, one is B, two is C, and so forth.",
    "start": "3133881",
    "end": "3140540"
  },
  {
    "text": "Alright, let's look at\nassociated objects real quick. This is just an enum, the first case",
    "start": "3142288",
    "end": "3147413"
  },
  {
    "text": "has an object associated with\nit and the others do not. And if we dump that out we\nfind that it has expanded",
    "start": "3147413",
    "end": "3154441"
  },
  {
    "text": "because it needs to be able\nto store that object pointer, but it has expanded intelligently. So the first thing is\njust a raw object pointer",
    "start": "3154441",
    "end": "3161805"
  },
  {
    "text": "and then the other ones\nare just small integers. And the compiler's able to pack these so that it knows zero, two, four, and six",
    "start": "3161805",
    "end": "3169356"
  },
  {
    "text": "can never be a valid pointer. So it's able to use that to\ndistinguish between those. And then if we make it\nlarger we have an enum",
    "start": "3169356",
    "end": "3177135"
  },
  {
    "text": "with A, B, C, D, and E where they all have objects associated with them and suddenly everything gets bigger.",
    "start": "3178441",
    "end": "3184828"
  },
  {
    "text": "Every entry is a pointer\nfollowed by an integer. So object pointer zero,\nobject pointer one, object pointer two, object pointer three.",
    "start": "3184828",
    "end": "3192147"
  },
  {
    "text": "So the number that gets\nassigned to each enum case and the associated value\nessentially get laid out",
    "start": "3192147",
    "end": "3198608"
  },
  {
    "text": "next to each other. The compiler's able to pack them compactly",
    "start": "3198608",
    "end": "3203614"
  },
  {
    "text": "for that one specific case,\nbut not in the general sense. Alright, so wrapping\nup, I'm just gonna kinda",
    "start": "3203614",
    "end": "3210179"
  },
  {
    "start": "3208000",
    "end": "3438000"
  },
  {
    "text": "skip through these real quick\nsince we're behind on time. We've got real physical memory,\nwe've got conceptual memory",
    "start": "3210179",
    "end": "3216563"
  },
  {
    "text": "and then we've got sort of the actual, the architecture of it all. C just lays things out\nnice and straightforward",
    "start": "3216563",
    "end": "3225081"
  },
  {
    "text": "with a little padding. C++ objects get a vtable at the top.",
    "start": "3225081",
    "end": "3230386"
  },
  {
    "text": "Swift objects get the same sort of thing, but with more stuff going on. Protocol values end up taking\nup five words of memory,",
    "start": "3230386",
    "end": "3238599"
  },
  {
    "text": "sometimes they can store data inline, but if you get too big they don't. And enums end up being\npacked in many different ways",
    "start": "3238599",
    "end": "3247011"
  },
  {
    "text": "depending on what's going on. There's our quick sum\nup which I just said.",
    "start": "3248515",
    "end": "3254612"
  },
  {
    "text": "And so you can learn a\nlot by poking around. It's a lot of fun and\nsometimes it's useful.",
    "start": "3254612",
    "end": "3262197"
  },
  {
    "text": "And as they asked me to remind you, and as I did before, remember to rate the session in the app and that's it.",
    "start": "3262197",
    "end": "3268799"
  },
  {
    "text": "So if there's questions we can, or if we have no time for\nquestions or (laughs),",
    "start": "3268799",
    "end": "3276539"
  },
  {
    "text": "okay, can you use Swift demangle with PO in Xcode when debugging? I don't think there's any\nbuilt in way to do that,",
    "start": "3278354",
    "end": "3285506"
  },
  {
    "text": "but what you can do is just copy, paste onto the command line,\nSwift demangle should be",
    "start": "3285507",
    "end": "3290727"
  },
  {
    "text": "available in the terminal. If you wanted to I'm sure you could build a little script, LLDB\nis scriptable through Python",
    "start": "3290727",
    "end": "3297862"
  },
  {
    "text": "so you could do that if that\nturned out to be useful. Yes.",
    "start": "3297862",
    "end": "3302103"
  },
  {
    "text": "Okay, so the question\nis, any versus any object in Swift three and\nwhether there are changes based on whether you import foundation?",
    "start": "3304924",
    "end": "3311141"
  },
  {
    "text": "I don't think there would\nbe changes in the layout based on what you import\nbecause there needs to be cross-compatibility between files",
    "start": "3311141",
    "end": "3317295"
  },
  {
    "text": "that import foundation\nto files that don't. So they would still need to be the same. But any, in Swift 3 Objective-C objects",
    "start": "3317295",
    "end": "3324462"
  },
  {
    "text": "as untyped objects now come in as any instead of any\nobject, so there's definitely",
    "start": "3326007",
    "end": "3331249"
  },
  {
    "text": "a change there, I believe that's just essentially a translation phase. Any I think looks like\none of the protocol types",
    "start": "3331249",
    "end": "3337948"
  },
  {
    "text": "where it's a five word\nthing, it's got three inline and whatever and it's essentially storing things that way.",
    "start": "3337948",
    "end": "3344048"
  },
  {
    "text": "And then there's just\na step where it takes that Objective-C pointer that comes in and just kind of puts it\nin one of those things.",
    "start": "3344048",
    "end": "3350605"
  },
  {
    "text": "The source code is online for my thing, it should run more or less out of the box, so if you wanna experiment and\nsee what it does feel free.",
    "start": "3350605",
    "end": "3358842"
  },
  {
    "text": "Anything else? No? Alright, oh, yes? (inaudible)",
    "start": "3358842",
    "end": "3364262"
  },
  {
    "text": "Sure. Yeah, so question is about the new memory debugging facilities in Xcode 8 and how it compares to my stuff.",
    "start": "3364262",
    "end": "3370851"
  },
  {
    "text": "So that new memory debugging stuff is really cool, you can go through and it will just essentially show you",
    "start": "3370852",
    "end": "3376389"
  },
  {
    "text": "kind of graphs like I showed here except they're live which is really neat. And I haven't played with it a ton,",
    "start": "3376389",
    "end": "3381999"
  },
  {
    "text": "but I'm sure it's gonna be really useful. It's a little bit more\nlimited from what little I have done with it, in that it tries to,",
    "start": "3381999",
    "end": "3389442"
  },
  {
    "text": "well it's gotta work at runtime, so it has to be kind of\nlimited in that respect. I believe it will not\ntrace like, C pointers",
    "start": "3389442",
    "end": "3396294"
  },
  {
    "text": "and things like that, at least not beyond a certain point. It's not gonna be tracing global symbols",
    "start": "3396294",
    "end": "3403495"
  },
  {
    "text": "and things like that. But as far as like, looking\nat plain Swift objects, it's really cool, it'll\nshow you the trees,",
    "start": "3403496",
    "end": "3408939"
  },
  {
    "text": "it'll show you this object\npoints to that object. And I think it's gonna skip over things like the pointers up to the classes, so it doesn't give you everything.",
    "start": "3408939",
    "end": "3415697"
  },
  {
    "text": "But for what you care about day to day, it looks really cool, really useful.",
    "start": "3415697",
    "end": "3420295"
  },
  {
    "text": "Alright, looks like that's it. Thank you very much for coming and enjoy the rest of the conference.",
    "start": "3421672",
    "end": "3428221"
  },
  {
    "text": "(applause)",
    "start": "3428221",
    "end": "3430471"
  }
]