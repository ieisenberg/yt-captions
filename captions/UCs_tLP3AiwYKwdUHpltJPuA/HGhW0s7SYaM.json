[
  {
    "text": "[Music] my name is an Curry and I am the CTO of",
    "start": "6990",
    "end": "12040"
  },
  {
    "text": "micros scaling systems and we produce tools to help manage containers in production and very specifically we",
    "start": "12040",
    "end": "18640"
  },
  {
    "text": "produce a tool called microb Badger which is uh for managing and Reporting",
    "start": "18640",
    "end": "24920"
  },
  {
    "text": "and and viewing the metadata associated with containers in production",
    "start": "24920",
    "end": "30720"
  },
  {
    "text": "um and uh that's and I do think that metadata in container is an incredibly uh metadata of containers is",
    "start": "30720",
    "end": "38399"
  },
  {
    "text": "is a very very interesting subject and that is what I'm going to be talking to you about today by a slightly roundabout",
    "start": "38399",
    "end": "43879"
  },
  {
    "text": "route um because generally as we all I think we all agree containers are an extremely",
    "start": "43879",
    "end": "50879"
  },
  {
    "text": "interesting piece of technology they're one of the most interesting pieces of technology that has have come up during",
    "start": "50879",
    "end": "56160"
  },
  {
    "text": "my entire career actually of 20 years in the industry um and I I think what's very interesting and very unusual about",
    "start": "56160",
    "end": "62399"
  },
  {
    "text": "them is that they have two quite distinct use cases um they are both",
    "start": "62399",
    "end": "69479"
  },
  {
    "text": "development technology and they are operations technology and by that I don't mean I'm not going to um to make",
    "start": "69479",
    "end": "77320"
  },
  {
    "text": "some trit conclusion that they are devops technology I that that's not",
    "start": "77320",
    "end": "82560"
  },
  {
    "text": "really what I'm saying that's not what I'm getting about that um what I'm saying is they are two definitely",
    "start": "82560",
    "end": "87799"
  },
  {
    "text": "distinct use cases um they are",
    "start": "87799",
    "end": "92880"
  },
  {
    "text": "um uh there is a use case for for containers which will strongly appeal to",
    "start": "92880",
    "end": "97960"
  },
  {
    "text": "developers and there is a use case that will definitely strongly appeal or should strongly appeal to operations",
    "start": "97960",
    "end": "104920"
  },
  {
    "text": "teams um so what do I mean by that well if we",
    "start": "104920",
    "end": "110759"
  },
  {
    "text": "step back and um so quite a few people coming in the back um if we step back",
    "start": "110759",
    "end": "116159"
  },
  {
    "text": "and think about the the dev use case well this is the use case that we are generally very familiar with uh the use",
    "start": "116159",
    "end": "122079"
  },
  {
    "text": "case of packaging um using Docker usually at this stage Docker to wrap",
    "start": "122079",
    "end": "129119"
  },
  {
    "text": "applications to wrap your processes to wrap your um libraries into a very um",
    "start": "129119",
    "end": "135319"
  },
  {
    "text": "easy to manipulate easy toool package um and it has been phenomenally useful and",
    "start": "135319",
    "end": "141760"
  },
  {
    "text": "it's really part of the kind of zeitgeist move towards continuous integration continuous delivery uh and",
    "start": "141760",
    "end": "147599"
  },
  {
    "text": "it's it's a very clever concept it's a very clever IDE idea the idea that you can um wrap and then provide apis around",
    "start": "147599",
    "end": "155760"
  },
  {
    "text": "a whole uh application package and then move it easily from Dev to test to production and there is no it's no",
    "start": "155760",
    "end": "162519"
  },
  {
    "text": "surprise that that has been phenomenally popular with developers and I would consider that to be a development use",
    "start": "162519",
    "end": "169120"
  },
  {
    "text": "case it appeals to developers now and it's not surprising that it appeals to developers um so what do I mean by the",
    "start": "169120",
    "end": "175840"
  },
  {
    "text": "Ops use case because that's Docker style development use case is not the only use",
    "start": "175840",
    "end": "182519"
  },
  {
    "text": "of containers and to my mind actually it's not the most revolutionary and the most interesting use of containers um",
    "start": "182519",
    "end": "191440"
  },
  {
    "text": "because the same concept of being able to wrap up applications and then move them easily around from machine to",
    "start": "191440",
    "end": "196920"
  },
  {
    "text": "machine and the same way that Docker and uh and the development use case for containers makes it easy to move",
    "start": "196920",
    "end": "202720"
  },
  {
    "text": "applications from Dev to test and production it also makes it easy to move applications around in inside your",
    "start": "202720",
    "end": "210280"
  },
  {
    "text": "production environment and by moving around I mean effectively stopping it in one place and starting it in another",
    "start": "210280",
    "end": "215959"
  },
  {
    "text": "place now the concept of moving things around in production is not new it's not",
    "start": "215959",
    "end": "221200"
  },
  {
    "text": "um unique to Containers you can orchestrate VMS but VMS you can start",
    "start": "221200",
    "end": "226640"
  },
  {
    "text": "and stop them much much more slowly because they're a lot more heavyweights a container is is the the container",
    "start": "226640",
    "end": "232840"
  },
  {
    "text": "concept is is within the kernel it's actually a very it's a very straightforward oddly deceptively simple",
    "start": "232840",
    "end": "238760"
  },
  {
    "text": "concept where you can assign um permissions um and uh resources to um",
    "start": "238760",
    "end": "246640"
  },
  {
    "text": "particular processes um using cgroups using um Nam spaces but it all happens",
    "start": "246640",
    "end": "253200"
  },
  {
    "text": "within the kernel which makes it very very fast compared to VMS it's much more lightweight and it's much faster so a VM",
    "start": "253200",
    "end": "260000"
  },
  {
    "text": "you might bring up and down in minutes but a container you can bring up and down in seconds or even potentially subc",
    "start": "260000",
    "end": "266280"
  },
  {
    "text": "and that makes orchestration a totally different ball game really really means",
    "start": "266280",
    "end": "272039"
  },
  {
    "text": "that you can do massively more interesting things and as if you saw um arman's talk earlier about Nomad all of",
    "start": "272039",
    "end": "279160"
  },
  {
    "text": "this the original use case containers were invented as operations technology",
    "start": "279160",
    "end": "284800"
  },
  {
    "text": "they were invented to help people like Google and uh and then ultimately uh",
    "start": "284800",
    "end": "291000"
  },
  {
    "text": "folks like Netflix and Twitter to automate their data centers make them one hell of a lot more resource",
    "start": "291000",
    "end": "296639"
  },
  {
    "text": "efficient because as we've just heard physical data centers are very resource",
    "start": "296639",
    "end": "302280"
  },
  {
    "text": "inefficient um and also uh by Google by Netflix to",
    "start": "302280",
    "end": "308160"
  },
  {
    "text": "make their data centers a lot more resilient to introduce automated fault tolerance and this kind of clever",
    "start": "308160",
    "end": "317160"
  },
  {
    "text": "automated self-acting self-driving data center is is the operational use case",
    "start": "317160",
    "end": "324160"
  },
  {
    "text": "for um containers and I think it's actually the more interesting one it's the more world changing one because if",
    "start": "324160",
    "end": "330240"
  },
  {
    "text": "you look at something like Nomad so I mean the orchestrators are out there Nomad um kubernetes maos ECS swarm uh",
    "start": "330240",
    "end": "339560"
  },
  {
    "text": "from Docker themselves they will all let you achieve stuff that you cannot achieve you just physically cannot",
    "start": "339560",
    "end": "346199"
  },
  {
    "text": "achieve without an orchestrated and a and a containerized orchestrated environment so um Google are achieving",
    "start": "346199",
    "end": "352199"
  },
  {
    "text": "60 70% resource utilization within their data centers uh Netflix are getting about 50% um you're not going to get",
    "start": "352199",
    "end": "359800"
  },
  {
    "text": "much above a 60% is a kind of high high Benchmark for doing that but it is achievable using an orchestrator like",
    "start": "359800",
    "end": "366599"
  },
  {
    "text": "like Nomad um but in ordinary data centers according to Gartner we tend to",
    "start": "366599",
    "end": "372360"
  },
  {
    "text": "achieve about 10 to 15% so you're looking at maybe four times better",
    "start": "372360",
    "end": "377960"
  },
  {
    "text": "resource efficiency which is not just cost saving it's actually ecologically",
    "start": "377960",
    "end": "383360"
  },
  {
    "text": "one hell of a lot safer for us all than than having massively massively underutilized but data centers with the",
    "start": "383360",
    "end": "390639"
  },
  {
    "text": "power still on uh and the energy still being used because we are hugely",
    "start": "390639",
    "end": "395759"
  },
  {
    "text": "expanding the rate at which we are using Data Center resources we cannot keep doing it in the way that we are in a",
    "start": "395759",
    "end": "401720"
  },
  {
    "text": "very in a very inefficient way so orchestrated containerized workloads",
    "start": "401720",
    "end": "407039"
  },
  {
    "text": "have the power to make a a really really positive difference to the world and I do think that they are the absolutely",
    "start": "407039",
    "end": "414080"
  },
  {
    "text": "most interesting use case for containers so so what do I mean by this um let me",
    "start": "414080",
    "end": "420360"
  },
  {
    "text": "show you this if you've ever seen me talk before you'll have seen me do this demo cuz I do it all the time I'm still in love with it because I really want to",
    "start": "420360",
    "end": "426319"
  },
  {
    "text": "see this world come about I really really want to see this orchestrated world happen these more intelligent data",
    "start": "426319",
    "end": "432000"
  },
  {
    "text": "centers so this is a kind of example of the kind of thing you can do with a more intelligent more automated Data Center",
    "start": "432000",
    "end": "438960"
  },
  {
    "text": "and this is not pie in the sky this is absolutely plausible to do this is uh if you saw arman's talk earlier this is",
    "start": "438960",
    "end": "445319"
  },
  {
    "text": "what he would have referred to as a custom scheduler um for nomad now this isn't running against Nomad this is just",
    "start": "445319",
    "end": "451400"
  },
  {
    "text": "running directly against Docker but it could be running against any of the orchestrators what we've done here is we",
    "start": "451400",
    "end": "456879"
  },
  {
    "text": "have written a little toy custom scheduler to show what you can do to",
    "start": "456879",
    "end": "462520"
  },
  {
    "text": "show what's possible with an orchestrator because so in this um orchestrated World you've got you've got",
    "start": "462520",
    "end": "468759"
  },
  {
    "text": "your applications containerized and able to move around from place to place particularly your stateless ones um",
    "start": "468759",
    "end": "474840"
  },
  {
    "text": "you've also got an orchestrator underneath which knows where they are and control control them and move them",
    "start": "474840",
    "end": "480000"
  },
  {
    "text": "within uh around within your defined data center all of the orchestrators whether that's Nomad or swarm or",
    "start": "480000",
    "end": "486280"
  },
  {
    "text": "kubernetes or ECS they all have very clear apis on top that allow you to",
    "start": "486280",
    "end": "492440"
  },
  {
    "text": "write schedulers to drive what the orchestrator does to um influence the",
    "start": "492440",
    "end": "497720"
  },
  {
    "text": "placement of the workloads within your um data centers so this this is written",
    "start": "497720",
    "end": "502800"
  },
  {
    "text": "as a very basic cedula and we wrote it in go it's a couple of hundred lines of go and um it's very very simp listic we",
    "start": "502800",
    "end": "510400"
  },
  {
    "text": "wanted to try out to see if what what in the in the most simplistic world you could do with a custom scheduler so what",
    "start": "510400",
    "end": "516240"
  },
  {
    "text": "we said is um let's imagine a very very simplified World in your data center",
    "start": "516240",
    "end": "522039"
  },
  {
    "text": "where you have two containerized applications one is high priority and that's the dark blue one is low priority",
    "start": "522039",
    "end": "528440"
  },
  {
    "text": "and that's the um lilac there and then we just faked up some randomized demand so this is just random randomly",
    "start": "528440",
    "end": "535120"
  },
  {
    "text": "generated demand in red and we gave the scheduler a task and we said said um you",
    "start": "535120",
    "end": "540800"
  },
  {
    "text": "will win if you can tell the orchestrator to make sure there are enough of the low of the high priority",
    "start": "540800",
    "end": "546920"
  },
  {
    "text": "containers running in the data centers to um meet the demand which you don't know because it's randomized um and you",
    "start": "546920",
    "end": "553240"
  },
  {
    "text": "fill up the rest of the resources that are available to you with the low priority container the Lilac one so",
    "start": "553240",
    "end": "558839"
  },
  {
    "text": "there we go you can see it's winning there it's not winning it's but there's a win there's a win um it's going away",
    "start": "558839",
    "end": "564560"
  },
  {
    "text": "from the win there we go there's a win again so this is very simplified but it",
    "start": "564560",
    "end": "570440"
  },
  {
    "text": "gives you the kind of idea about the kind of custom scheduler you could be writing obviously suited to your own",
    "start": "570440",
    "end": "577360"
  },
  {
    "text": "systems in if if say you were using Nomads so when Arman was talking earlier he talked about custom schedulers this",
    "start": "577360",
    "end": "583360"
  },
  {
    "text": "is the kind of thing that you could be writing um to make your data center considerably more intelligent",
    "start": "583360",
    "end": "590200"
  },
  {
    "text": "considerably more resource efficient and considerably more resilient because it could be using this to make sure that",
    "start": "590200",
    "end": "596120"
  },
  {
    "text": "things that um particular application war is running that was always in instances and most of the um",
    "start": "596120",
    "end": "602079"
  },
  {
    "text": "orchestrators already have built-in schedulers that will do that kind of fault tolerance for you so this is the",
    "start": "602079",
    "end": "607120"
  },
  {
    "text": "world that I want to see happen I think it's extremely cool um I think I be",
    "start": "607120",
    "end": "614200"
  },
  {
    "text": "absolutely excellent for this to happen oh no I'm going to have to step",
    "start": "614200",
    "end": "619959"
  },
  {
    "text": "forward this there we go I think it would be absolutely amazing and I think it will",
    "start": "619959",
    "end": "627360"
  },
  {
    "text": "happen well actually what I'm saying is I hope it will happen but things can",
    "start": "627360",
    "end": "632800"
  },
  {
    "text": "always go wrong so this what I'm talking about going to talk about today is one of the things that I think could go",
    "start": "632800",
    "end": "638560"
  },
  {
    "text": "wrong with this could hold it up could slow it down could mean that because the the future I want to see is that we get",
    "start": "638560",
    "end": "645480"
  },
  {
    "text": "all of that development use case of all the packaging uh and the continuous delivery and the continuous integration",
    "start": "645480",
    "end": "652000"
  },
  {
    "text": "for containers and then we get this operational use case as well so what I'm talking about today is what might go",
    "start": "652000",
    "end": "658399"
  },
  {
    "text": "wrong with that and what we can do to stop something going wrong with that and to to make this future happen because",
    "start": "658399",
    "end": "665920"
  },
  {
    "text": "actually oddly enough the thing that's going to that that is going to go wrong next is something that we all have the",
    "start": "665920",
    "end": "671800"
  },
  {
    "text": "power to solve it's not particularly complicated it's a psychological problem not a technological problem and that is",
    "start": "671800",
    "end": "679560"
  },
  {
    "text": "I mean once we started writing we started playing around with these things and we started writing these um custom schedulers we realized that they needed",
    "start": "679560",
    "end": "686680"
  },
  {
    "text": "a lot of information to do a good job in this much much more complicated much",
    "start": "686680",
    "end": "692880"
  },
  {
    "text": "clever orchestrated data center environment your orchestrator your",
    "start": "692880",
    "end": "698079"
  },
  {
    "text": "orchestration tools your schedulers needed to know an awful lot about the applications that you were running they",
    "start": "698079",
    "end": "703639"
  },
  {
    "text": "need needed to know things like is it high priority is it low priority at what time of the day is it high priority does",
    "start": "703639",
    "end": "710399"
  },
  {
    "text": "it have to run within a certain time can I stop it can I run it in Germany can I run it in the US can I run 10 copies of",
    "start": "710399",
    "end": "717440"
  },
  {
    "text": "it or am I then going to burst my um licensing limits there are loads and loads of bits of information that we're",
    "start": "717440",
    "end": "724399"
  },
  {
    "text": "going to need that Dev have in their heads that the orchestration tools are",
    "start": "724399",
    "end": "730079"
  },
  {
    "text": "going to need to know about if we're going to get this clever scheduled orchestrated world and we know that that",
    "start": "730079",
    "end": "737480"
  },
  {
    "text": "can be difficult we know that Communications between Ops and Dev can",
    "start": "737480",
    "end": "743519"
  },
  {
    "text": "sometimes be difficult particularly when we're talking about something potentially as dangerous as this because",
    "start": "743519",
    "end": "750560"
  },
  {
    "text": "and this is obviously a massive generalization but I think there is a grain a more than a grain of truth to",
    "start": "750560",
    "end": "755720"
  },
  {
    "text": "this as an operations person my main goal in life is to protect the systems",
    "start": "755720",
    "end": "761399"
  },
  {
    "text": "to protect the um uh the development environment to make sure that it stays",
    "start": "761399",
    "end": "766519"
  },
  {
    "text": "up that it meets the slas that we don't lose data and that we don't get hacked",
    "start": "766519",
    "end": "772079"
  },
  {
    "text": "that that is that is what keeps me awake at night that is my Prime goal in life that is my prime directive if we're",
    "start": "772079",
    "end": "778160"
  },
  {
    "text": "going to mix metor here um but as a developer I have slightly different",
    "start": "778160",
    "end": "784720"
  },
  {
    "text": "goals my job is usually to create new features to to get new functionality out",
    "start": "784720",
    "end": "790680"
  },
  {
    "text": "to to customers to to change what's happening on the production systems and if the production systems don't change",
    "start": "790680",
    "end": "797680"
  },
  {
    "text": "then that is a failure for me so my Prime goal as a developer is often to",
    "start": "797680",
    "end": "803959"
  },
  {
    "text": "encourage change to promote change to make change happen more quickly and",
    "start": "803959",
    "end": "809199"
  },
  {
    "text": "these goals are not opposing goals um they are but they can sometimes be",
    "start": "809199",
    "end": "815639"
  },
  {
    "text": "conflicting goals they some can sometimes be competing goals and we need to find a way to get both P sides of the",
    "start": "815639",
    "end": "823800"
  },
  {
    "text": "uh of these two both goals working together because oddly enough within a",
    "start": "823800",
    "end": "828920"
  },
  {
    "text": "business actually the overall goal of the business might change there'll be times in the life of a business where um",
    "start": "828920",
    "end": "835639"
  },
  {
    "text": "move fast and break things is actually the right thing to do they're less worried about protection than they are",
    "start": "835639",
    "end": "840800"
  },
  {
    "text": "about change um because actually if they don't get something out there they will fail and that's more important than",
    "start": "840800",
    "end": "846199"
  },
  {
    "text": "keeping the systems alive there'll be other times within the life cycle of a business where you'll want to make sure",
    "start": "846199",
    "end": "851639"
  },
  {
    "text": "that everything stays up and is protected so it's it's both of these are goals they both need to be met um but it",
    "start": "851639",
    "end": "860320"
  },
  {
    "text": "does potentially mean that there is a little bit of um bashing of heads between Dev and Ops uh because at any",
    "start": "860320",
    "end": "867680"
  },
  {
    "text": "one time they're probably promoting slightly motivated by different goals there um so we've talked about one way",
    "start": "867680",
    "end": "876759"
  },
  {
    "text": "of and I think the key way of getting to this orchestrated future and of of building up trust between Devon Ops and",
    "start": "876759",
    "end": "883800"
  },
  {
    "text": "this and and making this whole process as secure as possible is to provide more information about what an application",
    "start": "883800",
    "end": "890800"
  },
  {
    "text": "what a containerized application does now we could do that verbally um but uh",
    "start": "890800",
    "end": "898040"
  },
  {
    "text": "you know I love to talk but it's not necessarily the best way of moving around this kind of information",
    "start": "898040",
    "end": "904480"
  },
  {
    "text": "we know that we we we've moved away from just um um informing people verbally about this",
    "start": "904480",
    "end": "911800"
  },
  {
    "text": "kind of complicated information because we know it doesn't work very well um we can put in documents but again that's",
    "start": "911800",
    "end": "917079"
  },
  {
    "text": "not great we've moved towards a world of putting it in code and I think the equivalent in um a containerized world",
    "start": "917079",
    "end": "925160"
  },
  {
    "text": "is actually to bake it into the Container itself because if you do then uh you know that information will always",
    "start": "925160",
    "end": "932279"
  },
  {
    "text": "be collocated with the container it is in the container it's immutable like the container is so you don't have to worry",
    "start": "932279",
    "end": "938920"
  },
  {
    "text": "about it getting out of date or no longer applying to the container that you that you produced and it also I",
    "start": "938920",
    "end": "945560"
  },
  {
    "text": "think the most interesting thing about baking this kind of information into the Container is it can be read and acted",
    "start": "945560",
    "end": "951680"
  },
  {
    "text": "upon by the orchestration tools by the schedulers so you don't actually have to",
    "start": "951680",
    "end": "956839"
  },
  {
    "text": "tell Ops about it at all you're as a developer you're putting the information in and as an operational tool you're",
    "start": "956839",
    "end": "962560"
  },
  {
    "text": "using the information to make decisions about what goes on in the data center so metadata and this is really the metadata",
    "start": "962560",
    "end": "969519"
  },
  {
    "text": "that I'm talking about so what are the current means by which you can put this metadata into containers so um if you do",
    "start": "969519",
    "end": "977680"
  },
  {
    "text": "produce uh containers at the moment you're probably quite familiar with tags so tags are a free form text field uh",
    "start": "977680",
    "end": "984240"
  },
  {
    "text": "that you can associate with a container um they are quite well used they're",
    "start": "984240",
    "end": "989720"
  },
  {
    "text": "usually used for Virgin information uh they are a free form text fill so you know if you were if you were feeling um",
    "start": "989720",
    "end": "996680"
  },
  {
    "text": "like you wanted to make it ridiculously complicated you can put anything you liked in there and it could be as long as you liked but that I don't think that",
    "start": "996680",
    "end": "1001800"
  },
  {
    "text": "would be great practice in fact if you look on doer Hub there is very little consistency about how tags are used and",
    "start": "1001800",
    "end": "1008360"
  },
  {
    "text": "they're used for all kinds of information passing but um so it's it's not it's not enough and it's not used",
    "start": "1008360",
    "end": "1015160"
  },
  {
    "text": "consistently enough I'd say uh so maintainer another free form text field associated with uh that you can put in",
    "start": "1015160",
    "end": "1021560"
  },
  {
    "text": "your Docker file metadata associated with containers um it's usually but not",
    "start": "1021560",
    "end": "1027438"
  },
  {
    "text": "exclusively an email address um that email address is usually but not exclusively for somebody who has",
    "start": "1027439",
    "end": "1034400"
  },
  {
    "text": "anything to do with the container whatsoever it is fundamentally um a not very",
    "start": "1034400",
    "end": "1041038"
  },
  {
    "text": "well-maintained field and again it is not enough so tax and maintain is quite",
    "start": "1041039",
    "end": "1046480"
  },
  {
    "text": "commonly used but they're nowhere near enough to provide the kind of detailed information that containers do really need to have associated with",
    "start": "1046480",
    "end": "1053440"
  },
  {
    "text": "them what really but there is a mechanism uh that went into Docker 1.6",
    "start": "1053440",
    "end": "1059200"
  },
  {
    "text": "which is labels and labels are a free form key value pair that you can specify",
    "start": "1059200",
    "end": "1066039"
  },
  {
    "text": "as you can specify as many of them as you want in your Docker file and they are all that we need really to provide",
    "start": "1066039",
    "end": "1073640"
  },
  {
    "text": "this metadata they are uh vastly underutilized but they are actually the",
    "start": "1073640",
    "end": "1079120"
  },
  {
    "text": "correct solution for providing metadata that was is is within containers and uh exposing it to orchestrators but they",
    "start": "1079120",
    "end": "1086200"
  },
  {
    "text": "are vastly underutilized so um we did a scrape of Docker Hub public images and found about 4% 4% have accurate labels",
    "start": "1086200",
    "end": "1096559"
  },
  {
    "text": "associated with them uh which is pretty poor so um for the other",
    "start": "1096559",
    "end": "1102600"
  },
  {
    "text": "96% of containers that are in um Docker",
    "start": "1102600",
    "end": "1108000"
  },
  {
    "text": "hub public um the the public container images um what do we know if I was an",
    "start": "1108000",
    "end": "1114520"
  },
  {
    "text": "Ops person and a developer gave me one of those containers um that that are",
    "start": "1114520",
    "end": "1119679"
  },
  {
    "text": "available on dockerhub uh and it was one of the 96% that had no labels associated",
    "start": "1119679",
    "end": "1125159"
  },
  {
    "text": "with it they maybe had some inconsistent tags maybe had a maintainer but fundamentally it's really got no",
    "start": "1125159",
    "end": "1130440"
  },
  {
    "text": "metadata associated with it as an Ops person what could I tell myself about that container what could I find out",
    "start": "1130440",
    "end": "1136559"
  },
  {
    "text": "about it well I could tell how many layers are in it um that's not",
    "start": "1136559",
    "end": "1143720"
  },
  {
    "text": "useless um but it doesn't tell me a great deal I could guess at the base image but I would only be guessing",
    "start": "1143720",
    "end": "1150720"
  },
  {
    "text": "because if I don't have the docker file I don't actually know what the base image even that a container is built from other than that that's it I know",
    "start": "1150720",
    "end": "1158400"
  },
  {
    "text": "absolutely nothing about that container it is a black box it could contain",
    "start": "1158400",
    "end": "1164679"
  },
  {
    "text": "anything at all um so Ops are not really",
    "start": "1164679",
    "end": "1169880"
  },
  {
    "text": "being or wouldn't in my mind be being completely unreasonable in saying well",
    "start": "1169880",
    "end": "1176120"
  },
  {
    "text": "hang on a minute this is a bit dangerous I would like to know a little bit more before I started to put this into production or even more started to just",
    "start": "1176120",
    "end": "1183559"
  },
  {
    "text": "have orchestrators managing these uh containers in production without me even really knowing what's going on because",
    "start": "1183559",
    "end": "1189880"
  },
  {
    "text": "in a in a the dream world developers would be producing containers and they would be pass be being passed straight",
    "start": "1189880",
    "end": "1196120"
  },
  {
    "text": "through TPS and straight into into production and being orchestrated and that would be fantastic but I could see",
    "start": "1196120",
    "end": "1202159"
  },
  {
    "text": "why opst would object to that so because who knows what's in that container there's just really no information right",
    "start": "1202159",
    "end": "1208840"
  },
  {
    "text": "now judging by what's in Docker Hub we're not we're not in the habit of putting useful information metadata uh",
    "start": "1208840",
    "end": "1216280"
  },
  {
    "text": "against our containers so but what if maybe I'm just being overly fussy here",
    "start": "1216280",
    "end": "1221840"
  },
  {
    "text": "what if I completely trusted the developer I was an Ops person and I completely trusted the developer who was",
    "start": "1221840",
    "end": "1229400"
  },
  {
    "text": "producing the who produced this um container they knew absolutely everything they were doing they were um",
    "start": "1229400",
    "end": "1235520"
  },
  {
    "text": "they had saved my life in the war they were absolutely the most trusted person in my life and they' pro and they'd also",
    "start": "1235520",
    "end": "1241840"
  },
  {
    "text": "done a uh security scan of this container that they' produced um so it would be completely safe absolutely I",
    "start": "1241840",
    "end": "1248480"
  },
  {
    "text": "know it would be safe and it's immutable so let's face it I know it's completely safe and never have to worry about it I",
    "start": "1248480",
    "end": "1253679"
  },
  {
    "text": "don't have to worry but actually I do have to worry because immutability",
    "start": "1253679",
    "end": "1258919"
  },
  {
    "text": "is somewhat misleading it's it can lull you into a false sense of security",
    "start": "1258919",
    "end": "1265679"
  },
  {
    "text": "because although nothing will change in your container it won't nobody will be",
    "start": "1265679",
    "end": "1272840"
  },
  {
    "text": "putting provided you've actually you've got signing as well so so you're you're fairly sure that your your container is",
    "start": "1272840",
    "end": "1278640"
  },
  {
    "text": "the container that you originally put in there and nobody's patched it even then it's not safe because we",
    "start": "1278640",
    "end": "1286200"
  },
  {
    "text": "all know that exploits of found in Bas images all of the time um",
    "start": "1286200",
    "end": "1292440"
  },
  {
    "text": "in even if a base image um or any subsequent image went into your",
    "start": "1292440",
    "end": "1297840"
  },
  {
    "text": "container absolutely fine and the developer done a great job of security scanning it and making sure that it was all safe we can't guarantee that",
    "start": "1297840",
    "end": "1305840"
  },
  {
    "text": "subsequently a uh exploit has not been found in that container and as an Ops",
    "start": "1305840",
    "end": "1311120"
  },
  {
    "text": "person given one of the 96% of dockerhub containers that are not labeled in any way there'd be no way for me to tell",
    "start": "1311120",
    "end": "1318279"
  },
  {
    "text": "really that that had happened I wouldn't know when it was built I wouldn't know what code it was built from so there's",
    "start": "1318279",
    "end": "1324320"
  },
  {
    "text": "unless I mean I could rescan it but but that is a kind of that's quite a complicated uh way of going about things",
    "start": "1324320",
    "end": "1332240"
  },
  {
    "text": "and there is a very easy solution uh well yes so um so given that it's not",
    "start": "1332240",
    "end": "1339799"
  },
  {
    "text": "unreasonable for Ops to be pushing back some whatat on dev or taking these",
    "start": "1339799",
    "end": "1345960"
  },
  {
    "text": "unlabeled unknown Black Box containers and I can see a future in which that happens in which maybe we get all the",
    "start": "1345960",
    "end": "1353279"
  },
  {
    "text": "development um advantages of containers but it takes us a lot longer or for some",
    "start": "1353279",
    "end": "1359039"
  },
  {
    "text": "companies we never Achi achieve the operational advantages because of this gulf of fear uh and the lack of",
    "start": "1359039",
    "end": "1367080"
  },
  {
    "text": "information provided potentially by um developers which I'm seeing at the moment 96% of public images on Docker",
    "start": "1367080",
    "end": "1375039"
  },
  {
    "text": "Hub are totally unlabeled no metadata associated with them a complete Black Box if we continue with that Ops are not",
    "start": "1375039",
    "end": "1382720"
  },
  {
    "text": "necessarily wrong in pushing back so what can we do about it it's really all about information and",
    "start": "1382720",
    "end": "1391240"
  },
  {
    "text": "it's not hard to put the information in there um I think if we put if we really",
    "start": "1391240",
    "end": "1397000"
  },
  {
    "text": "as developers if we get into the habit of starting to label containers not only",
    "start": "1397000",
    "end": "1402279"
  },
  {
    "text": "will Ops feel more comfortable about putting those containers into production there will also be a huge number of",
    "start": "1402279",
    "end": "1408799"
  },
  {
    "text": "tools that will come out of uh that that that we'll actually be able to work on",
    "start": "1408799",
    "end": "1414120"
  },
  {
    "text": "and exploit the information that we're putting against containers like being able to flag up when things shouldn't be",
    "start": "1414120",
    "end": "1419880"
  },
  {
    "text": "in Germany or shouldn't be in the US or you've got too many of them deployed and you don't have enough licenses or um",
    "start": "1419880",
    "end": "1426720"
  },
  {
    "text": "exploits have been discovered in half of the containers you have in production all of those tools actually quite",
    "start": "1426720",
    "end": "1432320"
  },
  {
    "text": "straightforward to write if you have consistent metadata in your containers",
    "start": "1432320",
    "end": "1438200"
  },
  {
    "text": "so so um what so what are we doing about it well we're part of a um a community",
    "start": "1438200",
    "end": "1444320"
  },
  {
    "text": "project called label Das schema.org um and we're trying to define a set of a",
    "start": "1444320",
    "end": "1450600"
  },
  {
    "text": "document a set of conventions what are people doing that are is best practice",
    "start": "1450600",
    "end": "1456919"
  },
  {
    "text": "in the use of metadata at the moment so that we can encourage other people to just do that too uh and at the moment we",
    "start": "1456919",
    "end": "1462520"
  },
  {
    "text": "we're keeping it really really simple it's like 10 basic labels that we recommend that you put in all of your",
    "start": "1462520",
    "end": "1468960"
  },
  {
    "text": "um in your in your Docker files to put against all of your containers things like the name of the application a tiny",
    "start": "1468960",
    "end": "1476799"
  },
  {
    "text": "one- sentence description um what code it was built from if it's available",
    "start": "1476799",
    "end": "1481880"
  },
  {
    "text": "publicly even if it's not available publicly um Small Things um ideally",
    "start": "1481880",
    "end": "1488600"
  },
  {
    "text": "points to Docker file maybe license information although that actually is V2 that's more complicated just really",
    "start": "1488600",
    "end": "1493919"
  },
  {
    "text": "really basic stuff if we can get into the habit of that we can make that fully or frustrated Future come about and it's",
    "start": "1493919",
    "end": "1500679"
  },
  {
    "text": "very very easy to do um we also set up a tool called microbat",
    "start": "1500679",
    "end": "1506760"
  },
  {
    "text": "docomo with any Public Image um so that you can see what it is you can look at",
    "start": "1507200",
    "end": "1512600"
  },
  {
    "text": "your own images and see whether or not you have any metadata and also whether that metadata is correct because when I",
    "start": "1512600",
    "end": "1517840"
  },
  {
    "text": "said only 4% of um uh images on Docker",
    "start": "1517840",
    "end": "1523240"
  },
  {
    "text": "Hub have labels actually another 3% have labels it's just that those labels are wrong uh because they have been",
    "start": "1523240",
    "end": "1529559"
  },
  {
    "text": "inherited from a base image and not overwritten because you can inherit uh labels from your base images and",
    "start": "1529559",
    "end": "1535919"
  },
  {
    "text": "sometimes if you do that those labels are totally inappropriate to the final container so actually there are almost",
    "start": "1535919",
    "end": "1542399"
  },
  {
    "text": "as many mislabeled containers on Docker Hub as there are correctly labeled containers on Docker Hub um go crazy",
    "start": "1542399",
    "end": "1549760"
  },
  {
    "text": "defin a taging policy um I think you'd find that useful that would be quite good uh and really try to maintain an",
    "start": "1549760",
    "end": "1556159"
  },
  {
    "text": "actual maintainer that would be um that would definitely be useful and again incredibly incredibly easy to do so I",
    "start": "1556159",
    "end": "1563840"
  },
  {
    "text": "mean here's so here's an example of um so jet stack are just a um a small",
    "start": "1563840",
    "end": "1569880"
  },
  {
    "text": "startup in the UK um they put a very basic uh we just pulled up one of their images on um doah hub using microb",
    "start": "1569880",
    "end": "1578080"
  },
  {
    "text": "Badger you can see that they have um they've got no maintainer interestingly enough they've got a couple of tags",
    "start": "1578080",
    "end": "1584720"
  },
  {
    "text": "they've at least they've got they are one of the 4% they've got three labels in there and you can see that they've got six layers so nothing very",
    "start": "1584720",
    "end": "1591799"
  },
  {
    "text": "complicated all we're saying is put some labels in it's easy um in the future I would love to",
    "start": "1591799",
    "end": "1599240"
  },
  {
    "text": "come back and talk to you about what amazing tools we can build with more advanced metadata uh and and I'm not",
    "start": "1599240",
    "end": "1606200"
  },
  {
    "text": "even talking about crazily advanced metadata for that just things like what service is this part of for example um",
    "start": "1606200",
    "end": "1612159"
  },
  {
    "text": "but I'm not going to talk about that because what I really really want to do now is encourage folk to just use basic",
    "start": "1612159",
    "end": "1617840"
  },
  {
    "text": "label basic uh container metadata easy to do will have a huge impact on the",
    "start": "1617840",
    "end": "1624640"
  },
  {
    "text": "future um so yes metadata for peace this",
    "start": "1624640",
    "end": "1629799"
  },
  {
    "text": "is I think utterly key to this fully orchestrated future it's something for",
    "start": "1629799",
    "end": "1635760"
  },
  {
    "text": "all of us to do it's something any of us can do it's very very simple it's nowhere near as complicated as rising a",
    "start": "1635760",
    "end": "1641600"
  },
  {
    "text": "container engine or writing an orchestrator but it will mean that in the future other folk can write really",
    "start": "1641600",
    "end": "1647799"
  },
  {
    "text": "clever tools like massively intelligent custom schedulers that will be able to manage your systems and your um uh",
    "start": "1647799",
    "end": "1655000"
  },
  {
    "text": "containers for you automatically uh so there we go I have to finish on the final slide which is uh click to rate",
    "start": "1655000",
    "end": "1661519"
  },
  {
    "text": "session um and does anybody have any",
    "start": "1661519",
    "end": "1666720"
  },
  {
    "text": "questions ah",
    "start": "1667840",
    "end": "1671720"
  },
  {
    "text": "Louis so do any of the schedulers yet have the ability to say if it's not",
    "start": "1674720",
    "end": "1679840"
  },
  {
    "text": "labeled I won't run it do any of the schedulers yet have the ability to say",
    "start": "1679840",
    "end": "1685440"
  },
  {
    "text": "if this container is not labeled I'm not going to run it not yet no no no no no",
    "start": "1685440",
    "end": "1690919"
  },
  {
    "text": "um at the moment it's actually well there's there's so few applications actually running I mean uh the",
    "start": "1690919",
    "end": "1696799"
  },
  {
    "text": "orchestrators a lot of them do actually start to set their own runtime labels so what I'm talking about here is build",
    "start": "1696799",
    "end": "1702480"
  },
  {
    "text": "time labels a lot of the of the of the schedulers like kubernetes will set runtime labels as as well and they and",
    "start": "1702480",
    "end": "1708720"
  },
  {
    "text": "they Define those themselves and apply them themselves and they just apply to the lifetime of the of the container",
    "start": "1708720",
    "end": "1714000"
  },
  {
    "text": "whilst it's running but at the moment nobody is mandating build time containers uh it's too soon isn't it",
    "start": "1714000",
    "end": "1720480"
  },
  {
    "text": "because there's hardly anybody using them but uh we are working to get um",
    "start": "1720480",
    "end": "1726360"
  },
  {
    "text": "automated um labeling as into some of the new open source build container bu",
    "start": "1726360",
    "end": "1732240"
  },
  {
    "text": "tools so hopefully there will be zero effort in doing this in future but for the time being there is some small",
    "start": "1732240",
    "end": "1738720"
  },
  {
    "text": "amount of effort required to do it we have a question through the app can",
    "start": "1738720",
    "end": "1743840"
  },
  {
    "text": "micro bger run against images in private repost not yet no we've only got public",
    "start": "1743840",
    "end": "1749760"
  },
  {
    "text": "repost of for at the moment because that was easier",
    "start": "1749760",
    "end": "1757120"
  },
  {
    "text": "inevitably uh first thank you um but then second I guess my question is how do you think about sort of the level of",
    "start": "1760039",
    "end": "1767480"
  },
  {
    "text": "trust operators should place in developers to sort of correctly label",
    "start": "1767480",
    "end": "1772840"
  },
  {
    "text": "versus so I guess the the question is like for organizations going down this path is it better to invest in automated",
    "start": "1772840",
    "end": "1780919"
  },
  {
    "text": "tooling that lives in the cicd pipeline that is automatically tagging these things as it gets built and injecting",
    "start": "1780919",
    "end": "1786880"
  },
  {
    "text": "basically licenses and Shaws and G pads and things like that or do you go down the path of saying these are labels that",
    "start": "1786880",
    "end": "1793480"
  },
  {
    "text": "live in a in in the docker file that the developers sort of own and I guess sort of the question becomes how do you avoid",
    "start": "1793480",
    "end": "1799519"
  },
  {
    "text": "the cargo culting where it's like at some point every image has the same tags because they've just copy pasted it and",
    "start": "1799519",
    "end": "1804840"
  },
  {
    "text": "then nothing is actually accurate well yes because I say 4% of the uh images on",
    "start": "1804840",
    "end": "1811000"
  },
  {
    "text": "Docker Hub have correct um uh labels uh",
    "start": "1811000",
    "end": "1816080"
  },
  {
    "text": "3.9% are just the labels that they've inherited from Centos they've carg culted them in and they're completely",
    "start": "1816080",
    "end": "1822240"
  },
  {
    "text": "inappropriate to the final ba uh built container yes I think in the long run as",
    "start": "1822240",
    "end": "1827399"
  },
  {
    "text": "as I mentioned um the best solution here is to have labeling and tagging and",
    "start": "1827399",
    "end": "1833559"
  },
  {
    "text": "maintainers built into your build tools that is absolutely the right solution",
    "start": "1833559",
    "end": "1839440"
  },
  {
    "text": "but at the moment that's quite slow goinging I and I think that we need to be shouting for it as consumers if we're",
    "start": "1839440",
    "end": "1845600"
  },
  {
    "text": "saying look I would quite like this to be in my tools then we're more likely to get it yeah because in the long run I",
    "start": "1845600",
    "end": "1850840"
  },
  {
    "text": "don't really I don't really trust developers to do it either I would much rather it was in the build tools yes but",
    "start": "1850840",
    "end": "1856000"
  },
  {
    "text": "at the moment it's not in any build tools so if want to do it we have to do it ourselves and quite often these things you do it yourself and then",
    "start": "1856000",
    "end": "1862039"
  },
  {
    "text": "people realize that it's important and then they build it into build tools more",
    "start": "1862039",
    "end": "1869398"
  },
  {
    "text": "questions thank you very much thank you very much",
    "start": "1871559",
    "end": "1877960"
  }
]