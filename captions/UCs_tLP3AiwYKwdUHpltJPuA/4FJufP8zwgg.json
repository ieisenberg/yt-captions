[
  {
    "start": "0",
    "end": "24000"
  },
  {
    "text": "[Music]",
    "start": "2540",
    "end": "11280"
  },
  {
    "text": "good afternoon my name is Peter Lori and I'll be talking about microservices but",
    "start": "11280",
    "end": "17560"
  },
  {
    "text": "within the context of applications that are designed for high",
    "start": "17560",
    "end": "23480"
  },
  {
    "text": "performance I uh I'm a Java developer myself and I do Consulting and I've",
    "start": "23640",
    "end": "29720"
  },
  {
    "text": "worked with um hedge funds and investment banks for about eight years in the low latency space and about 23",
    "start": "29720",
    "end": "36680"
  },
  {
    "text": "years working in it I'm quite active on stack Overflow and in fact um someone",
    "start": "36680",
    "end": "43039"
  },
  {
    "text": "last night commented that uh I seem to uh be willing to answer just about any",
    "start": "43039",
    "end": "48120"
  },
  {
    "text": "question um although there was a question this morning which uh I didn't answer because it said uh how do I",
    "start": "48120",
    "end": "54079"
  },
  {
    "text": "multiply strings in Java and um even I was stumped uh",
    "start": "54079",
    "end": "61920"
  },
  {
    "text": "um I have a small software company um we've got three um full-time developers",
    "start": "63920",
    "end": "69520"
  },
  {
    "text": "apart from myself and um we usually engage a new client by starting with a",
    "start": "69520",
    "end": "74560"
  },
  {
    "text": "onewe workshop where we develop a new system trying to incorporate best practices um to within the constraints",
    "start": "74560",
    "end": "82040"
  },
  {
    "text": "of the sort of technological decisions your company has already made as",
    "start": "82040",
    "end": "88600"
  },
  {
    "text": "well moving on um my first computer was a thing called an NEC",
    "start": "88600",
    "end": "93720"
  },
  {
    "start": "89000",
    "end": "133000"
  },
  {
    "text": "apc1 uh and in fact it went at a true 5 mahz as opposed to the IBM PC which only",
    "start": "93720",
    "end": "100200"
  },
  {
    "text": "ran at 4.77 MHz and it had 128 kiloby of",
    "start": "100200",
    "end": "105520"
  },
  {
    "text": "RAM and I used it for many years as a teenager um uh first uh using machine",
    "start": "105520",
    "end": "112560"
  },
  {
    "text": "code for two years so that was my first language um which uh um if you've read",
    "start": "112560",
    "end": "117880"
  },
  {
    "text": "any of my Java code uh that probably makes sense to you and um later used",
    "start": "117880",
    "end": "123240"
  },
  {
    "text": "turbo Pascal and in all that time I never found a good use for all 128",
    "start": "123240",
    "end": "129599"
  },
  {
    "text": "kilobytes of ram so uh where do microsurfaces come",
    "start": "129599",
    "end": "136120"
  },
  {
    "start": "133000",
    "end": "194000"
  },
  {
    "text": "from um there a lot of the um principles of",
    "start": "136120",
    "end": "141680"
  },
  {
    "text": "microservices have been around for some time um some of them are more new um but largely it's a a collective term for",
    "start": "141680",
    "end": "150200"
  },
  {
    "text": "some best practices now um someone mentioned to me yesterday that they that",
    "start": "150200",
    "end": "155560"
  },
  {
    "text": "they'd heard that microservices come from uh actually in the finance area but",
    "start": "155560",
    "end": "161480"
  },
  {
    "text": "um from the research I did it was actually short for microweb services uh",
    "start": "161480",
    "end": "166680"
  },
  {
    "text": "originally was the original term so um I think in general most people when they",
    "start": "166680",
    "end": "171959"
  },
  {
    "text": "talk about microservice they think of web services and therefore they tend to think of the sort of um constraints and",
    "start": "171959",
    "end": "178800"
  },
  {
    "text": "technologies that web Services typically use however um a lot of these principles",
    "start": "178800",
    "end": "185280"
  },
  {
    "text": "are not specific to Any Given technology and you're not necessarily limited to those",
    "start": "185280",
    "end": "190799"
  },
  {
    "text": "Technologies um and it can still be useful now the reason why web services",
    "start": "190799",
    "end": "197560"
  },
  {
    "text": "the fact that it comes from web servic or a lot of people think of web services is important is that when it comes to uh",
    "start": "197560",
    "end": "203599"
  },
  {
    "text": "guei application um there's an inherent threshold of a performance requirement",
    "start": "203599",
    "end": "209239"
  },
  {
    "text": "which is how how fast can a human see an update because any update is which is",
    "start": "209239",
    "end": "214920"
  },
  {
    "text": "too fast for a human to see it doesn't really matter how fast it is and in fact",
    "start": "214920",
    "end": "221000"
  },
  {
    "text": "um uh most movies in fact um one of the first big films to uh switch from 24",
    "start": "221000",
    "end": "228280"
  },
  {
    "text": "frames a second to 48 frames a second was actually um uh Lord of the Rings so",
    "start": "228280",
    "end": "235599"
  },
  {
    "text": "it's relatively recent that they even switched uh major films from 24 to 48",
    "start": "235599",
    "end": "242640"
  },
  {
    "text": "but you'll agree that most films which have got a 24 frame rate that you've seen you don't see the flicker um in",
    "start": "242640",
    "end": "249959"
  },
  {
    "text": "fact there's actually mentioned in the Guinness book of records that there are people can see the flicker because they can see changes that quick they find",
    "start": "249959",
    "end": "256479"
  },
  {
    "text": "watching movies annoying but um 24 frames a second is actually 40",
    "start": "256479",
    "end": "261799"
  },
  {
    "text": "milliseconds so anything that's under 40 milliseconds probably doesn't matter because a human can't tell the",
    "start": "261799",
    "end": "268000"
  },
  {
    "text": "difference anyway this is like a threshold and say basically we don't care about delays that accumulate to",
    "start": "268000",
    "end": "274880"
  },
  {
    "text": "less than 40 milliseconds another thing about W app",
    "start": "274880",
    "end": "280320"
  },
  {
    "start": "279000",
    "end": "328000"
  },
  {
    "text": "applications is that as computers get more and more powerful there's a tendency to make them the web pages",
    "start": "280320",
    "end": "287600"
  },
  {
    "text": "richer and richer and put more detail more data more information so they tend to just grow to fit um the additional",
    "start": "287600",
    "end": "295639"
  },
  {
    "text": "processing power that your machines have and in fact um at according to one website the average size of a web page",
    "start": "295639",
    "end": "302759"
  },
  {
    "text": "is now the size of Doom the entire game Doom originally shipped as a 2.3",
    "start": "302759",
    "end": "308880"
  },
  {
    "text": "megabyte uh game that was the whole thing uh and in fact the average web",
    "start": "308880",
    "end": "314000"
  },
  {
    "text": "page is around that size as well so uh every time you're um uh watching a a",
    "start": "314000",
    "end": "319960"
  },
  {
    "text": "completely new web page you're actually downloading the entire of Doom or uh",
    "start": "319960",
    "end": "325360"
  },
  {
    "text": "something of that size now um I've talked about",
    "start": "325360",
    "end": "330880"
  },
  {
    "text": "microservices in a number of Banks and um we get a similar sort of reaction um",
    "start": "330880",
    "end": "337039"
  },
  {
    "text": "basically the first reaction is well microservices is a buzzword and at this",
    "start": "337039",
    "end": "342280"
  },
  {
    "text": "bank we don't do buzzwords which is fair enough uh there's good good reasons not to the reason that I find that a bit odd",
    "start": "342280",
    "end": "349600"
  },
  {
    "text": "is because what happens is that as they go into it a little bit more detail they actually start to realize wait a minute",
    "start": "349600",
    "end": "354759"
  },
  {
    "text": "this all sounds very familiar we do a lot of these things already so they've gone from we will never do this to",
    "start": "354759",
    "end": "361240"
  },
  {
    "text": "actually we do a lot of this already and then in fact they find that they are actually doing most of these techniques",
    "start": "361240",
    "end": "367000"
  },
  {
    "text": "already um and um a lot of what what I actually do with clients is actually",
    "start": "367000",
    "end": "372759"
  },
  {
    "text": "rebranding what they do already um so taking um some of the techniques that",
    "start": "372759",
    "end": "377840"
  },
  {
    "text": "they have and just relabeling them so it it is to some degree a marketing ter and",
    "start": "377840",
    "end": "384240"
  },
  {
    "text": "the thing about marketing is that it's very flexible you can actually rearrange what you have and and uh give it a new",
    "start": "384240",
    "end": "390880"
  },
  {
    "text": "name but the benefit of doing this is not completely empty changes is that",
    "start": "390880",
    "end": "397599"
  },
  {
    "text": "this can help bring into contrast what it is that you can easily change to",
    "start": "397599",
    "end": "403280"
  },
  {
    "text": "improve right so where are the quick winds and finally it can help give you a direction as to where you would like to",
    "start": "403280",
    "end": "409720"
  },
  {
    "text": "be in the medium term um with a minimum of risk that's something that's actually",
    "start": "409720",
    "end": "416639"
  },
  {
    "text": "achievable so this is a uh chart that I um did recently with a client um they",
    "start": "416639",
    "end": "424120"
  },
  {
    "start": "417000",
    "end": "535000"
  },
  {
    "text": "initially were thinking well microservice is not really for us um but",
    "start": "424120",
    "end": "429160"
  },
  {
    "text": "uh there's a lot of uh drive to push us in that direction or we need to come up with an answer for why we're not doing",
    "start": "429160",
    "end": "435800"
  },
  {
    "text": "microservices and then I started talking to them what are you doing and in fact in reality a lot in a lot of areas they",
    "start": "435800",
    "end": "442800"
  },
  {
    "text": "were already doing these things right so so to be able to relabel themselves as",
    "start": "442800",
    "end": "448280"
  },
  {
    "text": "microservices did didn't mean they had to change everything they were doing and in fact that that's not realistic anyway",
    "start": "448280",
    "end": "455120"
  },
  {
    "text": "you shouldn't be attempting to change everything you're doing and so we just came up with a simple star rating um and",
    "start": "455120",
    "end": "463479"
  },
  {
    "text": "we also then identified where we thought the quick wins were um so this was the initial draft in reality uh the last",
    "start": "463479",
    "end": "471319"
  },
  {
    "text": "three were the ones that they decided they would emphasize on in the short term um which is uh transparent",
    "start": "471319",
    "end": "477800"
  },
  {
    "text": "messaging um getting making uh changing the structure so that teams can work more independently and um uh Lambda",
    "start": "477800",
    "end": "487840"
  },
  {
    "text": "architecture so what are the benefits of introducing techniques from microservices into trading systems well",
    "start": "490319",
    "end": "497639"
  },
  {
    "text": "one of the thing one of the key drivers for trading systems is that time to Market is very important um the cost of",
    "start": "497639",
    "end": "504280"
  },
  {
    "text": "lost opportunity is actually can be very high so any technique that allow you to",
    "start": "504280",
    "end": "511280"
  },
  {
    "text": "um get your Solutions um out faster uh can not only save money but actually",
    "start": "511280",
    "end": "517159"
  },
  {
    "text": "help the company make more money um it can make them easier to maintain as long",
    "start": "517159",
    "end": "522279"
  },
  {
    "text": "as you're uh making some sensible choices and it can also simplify your programming models you don't H um it can",
    "start": "522279",
    "end": "529240"
  },
  {
    "text": "give you some structure and a Common Language to the techniques that you're",
    "start": "529240",
    "end": "534959"
  },
  {
    "text": "using where microservices is tends to struggle and in fact this is something",
    "start": "534959",
    "end": "540560"
  },
  {
    "start": "535000",
    "end": "597000"
  },
  {
    "text": "that trading systems have been doing for a long time is how do we deal with asynchronous messaging how do we test",
    "start": "540560",
    "end": "545959"
  },
  {
    "text": "them how do we uh profile and debug them and um in microservices there's uh tend",
    "start": "545959",
    "end": "553959"
  },
  {
    "text": "to be a lot of well let's base it on rest which is um synchronous typically",
    "start": "553959",
    "end": "559399"
  },
  {
    "text": "but um you can also use websockets it's sort of like oh and you can also do this",
    "start": "559399",
    "end": "564519"
  },
  {
    "text": "but really there's not a lot of good practices around asynchronous messaging whereas trading system systems have been",
    "start": "564519",
    "end": "569920"
  },
  {
    "text": "based on asynchronous messaging for a long time this is generally how they actually operate and in fact synchronous",
    "start": "569920",
    "end": "576240"
  },
  {
    "text": "messaging tends to be more the exception that's only really used for guies um also uh trading systems have uh",
    "start": "576240",
    "end": "584800"
  },
  {
    "text": "a lot of techniques around how do you build um deterministic and high highly",
    "start": "584800",
    "end": "590000"
  },
  {
    "text": "reproducible systems that you can test again and again and get the same results every",
    "start": "590000",
    "end": "596320"
  },
  {
    "start": "597000",
    "end": "686000"
  },
  {
    "text": "time now load latency is a term that comes up quite often but I think it's worth trying to put some definition",
    "start": "597360",
    "end": "603839"
  },
  {
    "text": "around it because it actually provides a bit of contrast with what most people think of when they think of web services",
    "start": "603839",
    "end": "610760"
  },
  {
    "text": "and that is that with low Laten the the first definition should really be the most broad definition is that you",
    "start": "610760",
    "end": "617320"
  },
  {
    "text": "actually have a view on how much your response time costs your",
    "start": "617320",
    "end": "622640"
  },
  {
    "text": "business now what that could be could be different but I've heard people talk about oh we need low latency and and",
    "start": "622640",
    "end": "629360"
  },
  {
    "text": "they say well how much would it cost you how much difference would you make they don't actually have a clear idea really",
    "start": "629360",
    "end": "634920"
  },
  {
    "text": "they're just sort of like well um uh users complain about latencies we would",
    "start": "634920",
    "end": "640160"
  },
  {
    "text": "like to users to complain less that's really the extent of the thinking whereas if you can have some clear riew",
    "start": "640160",
    "end": "648160"
  },
  {
    "text": "um you can you've actually qualified because it really is important to you to have certain thresholds under certain",
    "start": "648160",
    "end": "655040"
  },
  {
    "text": "you you have an SLA behind it now from for my my purposes low latency actually",
    "start": "655040",
    "end": "661880"
  },
  {
    "text": "means you care about latencies you can't see um and that makes a difference",
    "start": "661880",
    "end": "667519"
  },
  {
    "text": "because you need to have a tool set that will help you record those latencies because you cannot visually see that oh",
    "start": "667519",
    "end": "674279"
  },
  {
    "text": "well this is now going faster because in fact your your your um unacceptable",
    "start": "674279",
    "end": "680120"
  },
  {
    "text": "latencies might be still too fast for you to see so let me give you an example",
    "start": "680120",
    "end": "686839"
  },
  {
    "start": "686000",
    "end": "764000"
  },
  {
    "text": "we had recently had an investment Bank who actually they actually refused to",
    "start": "686839",
    "end": "692480"
  },
  {
    "text": "accept our product uh at one point because our five9 worst one in 100,000",
    "start": "692480",
    "end": "700639"
  },
  {
    "text": "latency was 450 micros that was too high for them now that is a latency you still",
    "start": "700639",
    "end": "706800"
  },
  {
    "text": "cannot see so it's a worst 100,000 but you can't see it now um it took us a few",
    "start": "706800",
    "end": "713279"
  },
  {
    "text": "days of Investigation to figure out what this was turned out it was related to paing date times using local date time",
    "start": "713279",
    "end": "721160"
  },
  {
    "text": "and um after we changed the code we managed to fix it and we were we were under their requirement which is 35",
    "start": "721160",
    "end": "728240"
  },
  {
    "text": "micros um so these are the sorts of this is a fairly extreme example most of our clients aren't pushing for these kind of",
    "start": "728240",
    "end": "735480"
  },
  {
    "text": "numbers but it is possible to really care about um latencies which um uh even",
    "start": "735480",
    "end": "744199"
  },
  {
    "text": "in extreme cases are still not um appreciable to a human so you need have",
    "start": "744199",
    "end": "749440"
  },
  {
    "text": "tools and in fact we ended up having to develop a tool just to solve this problem which is why it took us so long",
    "start": "749440",
    "end": "756199"
  },
  {
    "text": "um that might be a subject for another talk it's open source by the way so ask",
    "start": "756199",
    "end": "761639"
  },
  {
    "text": "me if you're interested okay so one of the the simplest ways to speed up a system is to",
    "start": "761639",
    "end": "769240"
  },
  {
    "start": "764000",
    "end": "890000"
  },
  {
    "text": "do less work if you take work out of your system then um it can run faster",
    "start": "769240",
    "end": "775320"
  },
  {
    "text": "and in particular going back to the private data model of a microservice um",
    "start": "775320",
    "end": "781240"
  },
  {
    "text": "you will get much better performance if your process will spend most of its time in its own local cache by staying in its",
    "start": "781240",
    "end": "787839"
  },
  {
    "text": "own local cache there's now less contention between um different threads",
    "start": "787839",
    "end": "792959"
  },
  {
    "text": "and uh you will get better scalability because each thread now runs completely",
    "start": "792959",
    "end": "799120"
  },
  {
    "text": "independently now these num the caches are actually quite small they're only 32 kilobytes for data in your L1 cache 256",
    "start": "799120",
    "end": "807320"
  },
  {
    "text": "kilobytes in your L2 cache this makes a really big difference to the performance of application because",
    "start": "807320",
    "end": "814279"
  },
  {
    "text": "if you access your L3 cache then you actually can take us 10 times longer and",
    "start": "814279",
    "end": "821160"
  },
  {
    "text": "that that factor of 10 is often more of a performance Improvement then you can achieve by just putting out lots and",
    "start": "821160",
    "end": "827560"
  },
  {
    "text": "lots of machines so writing small Services components single-threaded",
    "start": "827560",
    "end": "834279"
  },
  {
    "text": "units of work that will sit on one core and not access outside the core you can",
    "start": "834279",
    "end": "840000"
  },
  {
    "text": "get bigger improvements in performance than just throwing lots of machines at the problem and this tends to suit",
    "start": "840000",
    "end": "847120"
  },
  {
    "text": "trading systems much more than it does say for web applications with web applications the main problem is",
    "start": "847120",
    "end": "853560"
  },
  {
    "text": "throughput not latency so much as long as the latencies are too small for a human to see the next biggest problem is",
    "start": "853560",
    "end": "860320"
  },
  {
    "text": "throughput but for trading systems you need to minimize latency and throwing lots of boxes at the problem actually",
    "start": "860320",
    "end": "867120"
  },
  {
    "text": "just increases the latency it may increase the throughput but it also increases the latency so in reality you",
    "start": "867120",
    "end": "873279"
  },
  {
    "text": "want to have a minimum of boxes you want to get the most out of every one of those machines and a simple way of doing that",
    "start": "873279",
    "end": "880120"
  },
  {
    "text": "is to have uh services that or components that use a a small amount of",
    "start": "880120",
    "end": "886920"
  },
  {
    "text": "private data private to them so areas where microservices and",
    "start": "886920",
    "end": "894839"
  },
  {
    "start": "890000",
    "end": "1053000"
  },
  {
    "text": "Training Systems overlap uh that you want to have simple component based",
    "start": "894839",
    "end": "899920"
  },
  {
    "text": "design as I I said you can still have component based design in a monolith there's nothing stopping you having that",
    "start": "899920",
    "end": "907360"
  },
  {
    "text": "but essentially microservices will not work unless you've got clear separations",
    "start": "907360",
    "end": "912600"
  },
  {
    "text": "of responsibility between your components clear Les levels of abstraction in a monolith you're not",
    "start": "912600",
    "end": "918800"
  },
  {
    "text": "really required to do that and it's very often easy for people to put in small",
    "start": "918800",
    "end": "923959"
  },
  {
    "text": "Simple Solutions which actually end up causing a big web of dependencies between your components whereas in",
    "start": "923959",
    "end": "930720"
  },
  {
    "text": "microservices you just it just don't won't work if you do that um",
    "start": "930720",
    "end": "936839"
  },
  {
    "text": "uh uh in trading systems you do use asynchronous messaging a lot more um I",
    "start": "936839",
    "end": "943160"
  },
  {
    "text": "believe that it's considered uh best practice in terms of performance with u microservices although not everyone does",
    "start": "943160",
    "end": "949759"
  },
  {
    "text": "it um you want to have um automatic and auto Dynamic deployment of services you",
    "start": "949759",
    "end": "957639"
  },
  {
    "text": "for performance reasons not just for uh keeping responsibility simple you want",
    "start": "957639",
    "end": "962720"
  },
  {
    "text": "to have private data sets as much as possible uh now an important area is",
    "start": "962720",
    "end": "969079"
  },
  {
    "text": "what I believe is transparent messaging now this is where debugging a distributed system um is made so much",
    "start": "969079",
    "end": "976319"
  },
  {
    "text": "easier if you can actually see the messages you can actually check them yourself because that immediately makes",
    "start": "976319",
    "end": "982759"
  },
  {
    "text": "it easy to cut your problem in half is my system producing the message that's correct or is it producing it correctly",
    "start": "982759",
    "end": "990839"
  },
  {
    "text": "or is it just that the consumer is consuming it incorrectly and at that point you can immediately divide your",
    "start": "990839",
    "end": "997160"
  },
  {
    "text": "problem in half if you can read the messages um also from a performance",
    "start": "997160",
    "end": "1002199"
  },
  {
    "text": "point of view your system may be behaving uh working correctly but it may be generating far more messages than it",
    "start": "1002199",
    "end": "1009240"
  },
  {
    "text": "actually needs so for example it's quite common for consumers to ignore",
    "start": "1009240",
    "end": "1014680"
  },
  {
    "text": "duplicates but say your producer is sending everything three times right you run your unit test you run all your",
    "start": "1014680",
    "end": "1021000"
  },
  {
    "text": "testing everything still works because of ignoring all the duplicates but as soon as you look at the message you go",
    "start": "1021000",
    "end": "1027280"
  },
  {
    "text": "oh everything's coming out three times right so you can see immediately problems which may not show up in unit",
    "start": "1027280",
    "end": "1034240"
  },
  {
    "text": "tests is it sending far more data that it needs to is it sending fields that",
    "start": "1034240",
    "end": "1039480"
  },
  {
    "text": "never actually change but it's sending them again and again and again with every record you start to see",
    "start": "1039480",
    "end": "1044520"
  },
  {
    "text": "optimization opportunities if you can see your messages",
    "start": "1044520",
    "end": "1050840"
  },
  {
    "text": "um okay let's moving on to Lambda architecture so one of the models of Lambda architecture is that you have um",
    "start": "1052520",
    "end": "1059799"
  },
  {
    "start": "1053000",
    "end": "1111000"
  },
  {
    "text": "an Ever growing uh list of events as input to a function that is stateless",
    "start": "1059799",
    "end": "1066679"
  },
  {
    "text": "and then that has a uh set of outcomes for every input event now this is a very",
    "start": "1066679",
    "end": "1073160"
  },
  {
    "text": "simple model and in fact it doesn't actually work uh in all cases but where",
    "start": "1073160",
    "end": "1079000"
  },
  {
    "text": "it does work you want to use this as much as possible because these are very simple units of work very easy to",
    "start": "1079000",
    "end": "1086120"
  },
  {
    "text": "understand and I i' highly encourage people to take identify where in their",
    "start": "1086120",
    "end": "1091799"
  },
  {
    "text": "system they can use Lambda functions and extract that work out so then that reveals the components which have more",
    "start": "1091799",
    "end": "1098440"
  },
  {
    "text": "complex life cycles now as a sort of revision of",
    "start": "1098440",
    "end": "1104400"
  },
  {
    "text": "this um in this model each uh output is completely dependent on one message from",
    "start": "1104400",
    "end": "1110000"
  },
  {
    "text": "its input now there's a slight revision that I tend to take which is uh per for",
    "start": "1110000",
    "end": "1116440"
  },
  {
    "text": "performance reasons is that in this case the function is now a result of all the inputs it's ever received right so in",
    "start": "1116440",
    "end": "1124360"
  },
  {
    "text": "theory uh you could just replay every message to work out what it should do with one message or you can maintain a",
    "start": "1124360",
    "end": "1131600"
  },
  {
    "text": "state and that state needs to be able to be completely rebuilt from all the input then that just becomes an optimization",
    "start": "1131600",
    "end": "1138320"
  },
  {
    "text": "so you can have some state in a Lambda function I believe um provided it's",
    "start": "1138320",
    "end": "1143480"
  },
  {
    "text": "completely reproducible from all of its",
    "start": "1143480",
    "end": "1147440"
  },
  {
    "text": "inputs now how do we start putting these together well you might have say a fix",
    "start": "1148799",
    "end": "1154480"
  },
  {
    "start": "1149000",
    "end": "1228000"
  },
  {
    "text": "engine uh with data coming in Market data coming in and then you need to normalize this fixed data into an",
    "start": "1154480",
    "end": "1160720"
  },
  {
    "text": "internal format there some Fields you're not interested in they're being sent to you but you're not interested in you drop them some Fields need to be",
    "start": "1160720",
    "end": "1167120"
  },
  {
    "text": "translated maybe some data needs to be enriched and um you produce a normalized",
    "start": "1167120",
    "end": "1172600"
  },
  {
    "text": "format um so that might be your output ever growing messages then you'll have some sort of um stateful component that",
    "start": "1172600",
    "end": "1180480"
  },
  {
    "text": "now needs to make some decisions based on those inputs and it may produce orders for example and those orders then",
    "start": "1180480",
    "end": "1187280"
  },
  {
    "text": "go out to an order manager that takes your normalized order message and turns it into fix so then the the external",
    "start": "1187280",
    "end": "1194799"
  },
  {
    "text": "system the output at the other end is um just fixed now the problem with this is this is",
    "start": "1194799",
    "end": "1201400"
  },
  {
    "text": "your critical path and from a performance point of view you want your critical path to be as short as possible",
    "start": "1201400",
    "end": "1207440"
  },
  {
    "text": "in terms of latency you want it to be as quick as possible and uh that means offloading",
    "start": "1207440",
    "end": "1213960"
  },
  {
    "text": "work to other threads or other services you want to be able to take work out of this critical path anything it doesn't",
    "start": "1213960",
    "end": "1220400"
  },
  {
    "text": "need to be doing you get something else to do it so that your endtoend latency is as short as",
    "start": "1220400",
    "end": "1227640"
  },
  {
    "text": "possible and one way of doing that is to pass work off to an asynchronous uh task or another way of",
    "start": "1227640",
    "end": "1235799"
  },
  {
    "text": "putting it is to pass it off to another Lambda function that does that work in another thread takes the um results of",
    "start": "1235799",
    "end": "1243240"
  },
  {
    "text": "say your control system pass it off to a strategy or an external system or um",
    "start": "1243240",
    "end": "1249120"
  },
  {
    "text": "we've got one that uh one of the one of these components that actually access as a jdbc database jdbc can take a long",
    "start": "1249120",
    "end": "1257200"
  },
  {
    "text": "time so what you would do who send a message out of your control system saying I need this data it goes passed",
    "start": "1257200",
    "end": "1263440"
  },
  {
    "text": "off to an asynchronous Handler that Handler then takes the results and it becomes the input of your control",
    "start": "1263440",
    "end": "1270360"
  },
  {
    "text": "system now one of the benefits of using this model is that you can replay because everything that a system",
    "start": "1270360",
    "end": "1277880"
  },
  {
    "text": "does is dependent on its inputs you can replay all of those inputs and recreate the state of any of these components at",
    "start": "1277880",
    "end": "1284720"
  },
  {
    "text": "any point during the day uh and in particular even if you're dependent on external systems because",
    "start": "1284720",
    "end": "1291279"
  },
  {
    "text": "you're capturing the results and passing through them as input you don't actually need those external systems to be in",
    "start": "1291279",
    "end": "1297799"
  },
  {
    "text": "that state or even available anymore so say for example you did a jdbc query",
    "start": "1297799",
    "end": "1303000"
  },
  {
    "text": "it's passed off to a strategy and should be called Gateway or something um and it",
    "start": "1303000",
    "end": "1309600"
  },
  {
    "text": "asks the database for some results that get passed as an input you've now captured what result what you knew when",
    "start": "1309600",
    "end": "1316279"
  },
  {
    "text": "you knew it as a as an input so then just replaying the inbound messages is",
    "start": "1316279",
    "end": "1321520"
  },
  {
    "text": "all you need to do to recreate the state of that system at that point and you can",
    "start": "1321520",
    "end": "1326720"
  },
  {
    "text": "measure that you can debug and test your control system completely Standalone using real inputs even with real",
    "start": "1326720",
    "end": "1334600"
  },
  {
    "text": "timings if you wish so one of the um things that I do suggest people do is",
    "start": "1334600",
    "end": "1339880"
  },
  {
    "text": "they work out what timing is important to them say maybe it's 100 micros so if",
    "start": "1339880",
    "end": "1345799"
  },
  {
    "text": "there's two events that are less than 100 microseconds apart part you make it a realistic Gap if it's more than 100",
    "start": "1345799",
    "end": "1351960"
  },
  {
    "text": "micros then you only actually wait 100 micros so that way you can replay a days",
    "start": "1351960",
    "end": "1357720"
  },
  {
    "text": "worth of data with realistic timings but do it within a less than an hour",
    "start": "1357720",
    "end": "1362960"
  },
  {
    "text": "depending on your spacing because you don't want to actually wait a whole day to run a whole day's worth of data you",
    "start": "1362960",
    "end": "1369840"
  },
  {
    "text": "want you wanted to be able to get your feedback quicker than",
    "start": "1369840",
    "end": "1374919"
  },
  {
    "start": "1375000",
    "end": "1451000"
  },
  {
    "text": "that so what do we mean by a distributed system",
    "start": "1375200",
    "end": "1380240"
  },
  {
    "text": "um generally when people talk about distributed systems they're thinking about multiple machines but in reality",
    "start": "1380240",
    "end": "1387039"
  },
  {
    "text": "at the lowlevel um uh timings you actually have to think about each core",
    "start": "1387039",
    "end": "1393400"
  },
  {
    "text": "as an independent processor because you want them to run as independently as possible you want the time the delay",
    "start": "1393400",
    "end": "1399559"
  },
  {
    "text": "between data going from one core to another to be as efficient as possible",
    "start": "1399559",
    "end": "1404799"
  },
  {
    "text": "um and and in fact within a system you can also think of a distributed system",
    "start": "1404799",
    "end": "1410080"
  },
  {
    "text": "in particular if you've got numer regions this becomes very important even if you're not talking about the low latency space if you've got a jvm that",
    "start": "1410080",
    "end": "1417679"
  },
  {
    "text": "crosses numer regions you find your GC times just blow out fantastically",
    "start": "1417679",
    "end": "1422960"
  },
  {
    "text": "because it in reality when you got multiple numer regions you've got actually multiple machines connected via",
    "start": "1422960",
    "end": "1429960"
  },
  {
    "text": "a high-speed bus so even though it is a highspeed bus it's not as fast as direct memory um and uh in reality the o will",
    "start": "1429960",
    "end": "1438880"
  },
  {
    "text": "actually do quite a lot of work for you to make sure a process stays within one numer region but it certainly if you try",
    "start": "1438880",
    "end": "1445360"
  },
  {
    "text": "and create a jvm that goes across multiple new regions you will really see the",
    "start": "1445360",
    "end": "1451519"
  },
  {
    "start": "1451000",
    "end": "1474000"
  },
  {
    "text": "difference so as I mentioned um you want to actually model your application as um",
    "start": "1453960",
    "end": "1459279"
  },
  {
    "text": "a series of single core machine uh processes uh which have their own data",
    "start": "1459279",
    "end": "1466080"
  },
  {
    "text": "and can run as independently as possible and then they communicate via the L2 coherence",
    "start": "1466080",
    "end": "1472799"
  },
  {
    "text": "bus let's take an example um we've got in this case it's",
    "start": "1472799",
    "end": "1479279"
  },
  {
    "start": "1474000",
    "end": "1521000"
  },
  {
    "text": "similar to the previous example I've arranged I've contrived this Arrangement you'll see why but uh we've still got",
    "start": "1479279",
    "end": "1485919"
  },
  {
    "text": "this core routing system which is in green We've Got Dat Market data which is feeding data into your system the only",
    "start": "1485919",
    "end": "1492840"
  },
  {
    "text": "outputs really are um uh data that's come from uh the TCP um you've got an",
    "start": "1492840",
    "end": "1499159"
  },
  {
    "text": "auto management system going out and you've got a number of asynchronous processes that take a bit more time a",
    "start": "1499159",
    "end": "1505039"
  },
  {
    "text": "bit more CPU they're not as latency sensitive and each one of these um uh",
    "start": "1505039",
    "end": "1512320"
  },
  {
    "text": "threads or or core uh processes to each core have their own local data so how",
    "start": "1512320",
    "end": "1519320"
  },
  {
    "text": "does that uh compare to how a CPU is actually laid out now across the top",
    "start": "1519320",
    "end": "1525039"
  },
  {
    "start": "1521000",
    "end": "1548000"
  },
  {
    "text": "here we've got four cores and across the bottom we've got a another four cores in",
    "start": "1525039",
    "end": "1530279"
  },
  {
    "text": "between we've got the L3 cache which is quite a lot of silicon but just immediately above and immediately below",
    "start": "1530279",
    "end": "1537520"
  },
  {
    "text": "the L3 cache we've got our L2 caches I'm not sure exactly where the L1 cache is but it could be to the left um so how",
    "start": "1537520",
    "end": "1545919"
  },
  {
    "text": "does that map to our process well we actually can lay out um how our",
    "start": "1545919",
    "end": "1553720"
  },
  {
    "start": "1548000",
    "end": "1692000"
  },
  {
    "text": "program will run on Silicon so now we've got um",
    "start": "1553720",
    "end": "1558880"
  },
  {
    "text": "uh we know exactly which CES will be used for each of these individual purposes you can use thread Affinity to",
    "start": "1558880",
    "end": "1565919"
  },
  {
    "text": "bind a a process or a thread to an individual core and now they just need",
    "start": "1565919",
    "end": "1572120"
  },
  {
    "text": "to be able to communicate via shared memory or within the same process and um",
    "start": "1572120",
    "end": "1578159"
  },
  {
    "text": "the the delay between one um hop and the next is actually just the speed it t",
    "start": "1578159",
    "end": "1583799"
  },
  {
    "text": "long the delay it takes to pass data from one l32 cache to another L2 cache",
    "start": "1583799",
    "end": "1589720"
  },
  {
    "text": "uh which is around um 20 clock Cycles no 20",
    "start": "1589720",
    "end": "1596360"
  },
  {
    "text": "nond so you can get a very highspeed connection um now I haven't actually",
    "start": "1596360",
    "end": "1602760"
  },
  {
    "text": "said are these different threads or these different processes because in reality it doesn't matter it should be",
    "start": "1602760",
    "end": "1609120"
  },
  {
    "text": "entirely down to you to decide do I want to run these in different processes or",
    "start": "1609120",
    "end": "1614200"
  },
  {
    "text": "not and in reality what tends to happen is that uh the more stable components",
    "start": "1614200",
    "end": "1620799"
  },
  {
    "text": "it's actually easier to release them as a monolith once they become stable they're not changing very often I don't",
    "start": "1620799",
    "end": "1626520"
  },
  {
    "text": "want to be able to release them all independently it's just not it's just too much work but what will tend to",
    "start": "1626520",
    "end": "1633159"
  },
  {
    "text": "happen is like you might bring a new provider online a new market gateway that one is not so stable I want to be",
    "start": "1633159",
    "end": "1639360"
  },
  {
    "text": "able to restart that at any point if it dies uh I don't want it to bring down the whole system right I don't trust it",
    "start": "1639360",
    "end": "1646000"
  },
  {
    "text": "yet so I I make it that maybe just the second market gateway is restartable or",
    "start": "1646000",
    "end": "1651039"
  },
  {
    "text": "I make it that the strategies M TOS are restartable because he keeps that Trader keeps changing his mind as to what he",
    "start": "1651039",
    "end": "1657360"
  },
  {
    "text": "wants he's not too sure he wants to be able to restart that one so we make it restartable but everything else can be",
    "start": "1657360",
    "end": "1663679"
  },
  {
    "text": "deployed at once as a single jvm or at once as multiple jvms it really",
    "start": "1663679",
    "end": "1669720"
  },
  {
    "text": "shouldn't matter um you should be able to design a system where your choice of how many processes you use is what makes",
    "start": "1669720",
    "end": "1677200"
  },
  {
    "text": "sense for you it's not you shouldn't have to rewrite your code to make that",
    "start": "1677200",
    "end": "1683120"
  },
  {
    "text": "happen um that's largely repeating what I just said okay so one of the challenges uh microservices how do you",
    "start": "1688440",
    "end": "1695760"
  },
  {
    "start": "1692000",
    "end": "1706000"
  },
  {
    "text": "test and debug them because testing and debugging distributed systems is very hard and there isn't really very good",
    "start": "1695760",
    "end": "1702519"
  },
  {
    "text": "Tools in doing this so the approach that I take is to",
    "start": "1702519",
    "end": "1710440"
  },
  {
    "start": "1706000",
    "end": "1773000"
  },
  {
    "text": "see a microservice is actually a component a business component should really say business component with a",
    "start": "1710440",
    "end": "1717760"
  },
  {
    "text": "transport and that's what makes it a service but that transport should be",
    "start": "1717760",
    "end": "1723120"
  },
  {
    "text": "optional the transport shouldn't change the behavior of your component and so you should be able to test your",
    "start": "1723120",
    "end": "1728960"
  },
  {
    "text": "component Standalone and in fact you should be able to test two components talking to each other without actually",
    "start": "1728960",
    "end": "1735640"
  },
  {
    "text": "any transport at all and if by doing so you now have what is essentially for",
    "start": "1735640",
    "end": "1741159"
  },
  {
    "text": "testing purpos a monolith or a unit testing purposes a monolith or for",
    "start": "1741159",
    "end": "1746399"
  },
  {
    "text": "debugging purposes but then once your all your components work together and they behave correctly you can say right",
    "start": "1746399",
    "end": "1751760"
  },
  {
    "text": "now I want to deploy this to multiple threads multiple machines my components",
    "start": "1751760",
    "end": "1757279"
  },
  {
    "text": "still work the same way and so if there's any issues it becomes uh because",
    "start": "1757279",
    "end": "1762399"
  },
  {
    "text": "there's some sort of strange interaction between the fact that it's now asynchronous uh but the actual fun",
    "start": "1762399",
    "end": "1768200"
  },
  {
    "text": "functionality shouldn't have changed so let's try a simple",
    "start": "1768200",
    "end": "1773399"
  },
  {
    "start": "1773000",
    "end": "1807000"
  },
  {
    "text": "example uh say we've got a Lambda component which at the moment only has one event coming in which is a one-sided",
    "start": "1773399",
    "end": "1781080"
  },
  {
    "text": "price so some providers for Market data only give you the bids or the offers but not both at the same time we want to",
    "start": "1781080",
    "end": "1788039"
  },
  {
    "text": "write a component that normalizes this because internally most of our providers give as top a book we're not interested",
    "start": "1788039",
    "end": "1794279"
  },
  {
    "text": "in getting individual events that's what we want so we have a component that takes as an input uh sided prices and it",
    "start": "1794279",
    "end": "1802039"
  },
  {
    "text": "produces as an output top of Book prices which have",
    "start": "1802039",
    "end": "1807039"
  },
  {
    "start": "1807000",
    "end": "1869000"
  },
  {
    "text": "both so our data model might uh look like this um uh we have a class called",
    "start": "1807840",
    "end": "1815000"
  },
  {
    "text": "abstract marable which actually implements things like two string equals hash code all the serialization and",
    "start": "1815000",
    "end": "1821559"
  },
  {
    "text": "deserialization but this model Works regardless of whether you have that or not um so as an example for the",
    "start": "1821559",
    "end": "1829480"
  },
  {
    "text": "serialization the two string we actually serialize as yaml by default um the benefit of yaml over um",
    "start": "1829480",
    "end": "1837840"
  },
  {
    "text": "Json is that it is designed to be human readable and it supports types and another feature we use a lot is comments",
    "start": "1837840",
    "end": "1845320"
  },
  {
    "text": "we use we put a lot of comments to add Aid tracing and um one of the other benefits",
    "start": "1845320",
    "end": "1851360"
  },
  {
    "text": "is we can take something from a log or an output and actually demarshal it and recreate that exact object so recreating",
    "start": "1851360",
    "end": "1859120"
  },
  {
    "text": "objects that come out of production are very easy even if they're really complex",
    "start": "1859120",
    "end": "1864360"
  },
  {
    "text": "so we we know that no information has been lost if it can be",
    "start": "1864360",
    "end": "1869559"
  },
  {
    "start": "1869000",
    "end": "1890000"
  },
  {
    "text": "demarshal so let's have a look at this example we have a sided price and it goes and tries to find the relevant type",
    "start": "1870120",
    "end": "1876399"
  },
  {
    "text": "of book price that would need to be updated and then we say if something has changed then we trigger an events we",
    "start": "1876399",
    "end": "1882399"
  },
  {
    "text": "have a very simple component now that can take cided prices and turn them into events which have top of book",
    "start": "1882399",
    "end": "1889919"
  },
  {
    "start": "1890000",
    "end": "1903000"
  },
  {
    "text": "book how do we mock our component well actually that's really trivial because in fact",
    "start": "1890360",
    "end": "1897159"
  },
  {
    "text": "our component implements an interface we can just mock the",
    "start": "1897159",
    "end": "1902080"
  },
  {
    "start": "1903000",
    "end": "1999000"
  },
  {
    "text": "interface uh okay so how can we test our component well again we uh our outputs",
    "start": "1903960",
    "end": "1910320"
  },
  {
    "text": "are just an interface so we can mock um the outputs we say these are the outputs",
    "start": "1910320",
    "end": "1916399"
  },
  {
    "text": "we expect to get then we create our component we feed in the inputs and then",
    "start": "1916399",
    "end": "1922000"
  },
  {
    "text": "we verify we get all the results we expected so writing a simple unit test",
    "start": "1922000",
    "end": "1927080"
  },
  {
    "text": "for this is not very complicated where it gets even more interesting is where you have a series",
    "start": "1927080",
    "end": "1932399"
  },
  {
    "text": "of components so the output of one because we've used a Lambda architecture the",
    "start": "1932399",
    "end": "1937799"
  },
  {
    "text": "output of one is the input of another so in this case we're not only um calling",
    "start": "1937799",
    "end": "1943480"
  },
  {
    "text": "the combiner directly but we can also call the auto manager so we don't have to f need everything as input right from",
    "start": "1943480",
    "end": "1949919"
  },
  {
    "text": "the start we can take inputs to other components now the important thing is you can see that here that not only we",
    "start": "1949919",
    "end": "1956320"
  },
  {
    "text": "can write simple unit tests starts up and shuts down very quickly we can run lots of these tests we can do a lot of",
    "start": "1956320",
    "end": "1962559"
  },
  {
    "text": "data driven testing but um this is very easy to debug right so when I after I",
    "start": "1962559",
    "end": "1968559"
  },
  {
    "text": "wrote this test there were bugs and I used this to debug and all I had to do was um break point this line I step into",
    "start": "1968559",
    "end": "1976440"
  },
  {
    "text": "here and it steps into into this code it does something and then steps into that code um I just go up the stack and then",
    "start": "1976440",
    "end": "1983720"
  },
  {
    "text": "I can go down the stack and I can see all my variables and I'm just debugging it like it's a monolith but in reality these are",
    "start": "1983720",
    "end": "1991200"
  },
  {
    "text": "Standalone components I can put a transport between them and now I have a",
    "start": "1991200",
    "end": "1996240"
  },
  {
    "text": "micros service so adding transports now I had",
    "start": "1996240",
    "end": "2002440"
  },
  {
    "start": "1999000",
    "end": "2032000"
  },
  {
    "text": "intended to add um MPI to this list but there's a lot of different transports that you could use and in fact um I'm a",
    "start": "2002440",
    "end": "2009960"
  },
  {
    "text": "keen Advocate that you should be able to have no transport at all so in the previous example there's no transport",
    "start": "2009960",
    "end": "2015799"
  },
  {
    "text": "the behavior of the business logic should be the same regardless of whether it's a transport or not now um the one I know the most about",
    "start": "2015799",
    "end": "2023919"
  },
  {
    "text": "is Chronicle Q mostly because I wrote it so I will spend a little bit of time talking about it it is open source so",
    "start": "2023919",
    "end": "2030799"
  },
  {
    "text": "you can read the code and it's Apache too so there's no",
    "start": "2030799",
    "end": "2036440"
  },
  {
    "start": "2032000",
    "end": "2122000"
  },
  {
    "text": "license cost for you using it uh what Apache uh what chronical Q is is that",
    "start": "2036440",
    "end": "2042960"
  },
  {
    "text": "it's a bound um unbounded Q it's an unbounded persisted queue which means",
    "start": "2042960",
    "end": "2048720"
  },
  {
    "text": "that it's broker less it has very low latency um you can achieve uh less than",
    "start": "2048720",
    "end": "2053760"
  },
  {
    "text": "10 micros 99% of the time it's persisted so you can easily just copy the files",
    "start": "2053760",
    "end": "2059919"
  },
  {
    "text": "from production to test and replay a whole day's worth of data for any one of those Services you can just take uh the",
    "start": "2059919",
    "end": "2067358"
  },
  {
    "text": "input for that service and replay them um by recording absolutely every input",
    "start": "2067359",
    "end": "2073560"
  },
  {
    "text": "that's completely recreatable you don't need as much logging you only really need logging for really exceptional",
    "start": "2073560",
    "end": "2079839"
  },
  {
    "text": "things that you just don't expect to happen um we had one uh user try this um",
    "start": "2079839",
    "end": "2086480"
  },
  {
    "text": "initially they they'd implemented their trading system they were getting 35 microsc end to end uh typically and",
    "start": "2086480",
    "end": "2094919"
  },
  {
    "text": "after putting in chronicle Q they actually realized that they were doing some redundant work so after putting in",
    "start": "2094919",
    "end": "2101079"
  },
  {
    "text": "chronical q and removing the Redundant work the latencies went dropped to 23 micr seconds typically so one of the",
    "start": "2101079",
    "end": "2108440"
  },
  {
    "text": "things that people ask is well if you're persisting everything won't that slow you down but in fact our experience is",
    "start": "2108440",
    "end": "2114599"
  },
  {
    "text": "by having greater transparency and better testing you actually speed up your",
    "start": "2114599",
    "end": "2120319"
  },
  {
    "text": "application so what does it look like now this is something we've worked on quite a lot is to make it as transparent",
    "start": "2121520",
    "end": "2128320"
  },
  {
    "text": "as possible and in fact you can dump this out without any knowledge of the application because the messages can be",
    "start": "2128320",
    "end": "2134240"
  },
  {
    "text": "decoded into yaml so they're in a binary form for performance but that binary can",
    "start": "2134240",
    "end": "2140400"
  },
  {
    "text": "be converted to yaml for readability I've taken out a lot of formatting to fit it onto this slide but that's this",
    "start": "2140400",
    "end": "2146760"
  },
  {
    "text": "is all the messages that are produced by that previous example and you can see",
    "start": "2146760",
    "end": "2152040"
  },
  {
    "text": "the header which is sort of it's all metadata you don't really need to know but you can see that the on order idea",
    "start": "2152040",
    "end": "2159240"
  },
  {
    "text": "which was the message that was called earlier uh which is in the middle",
    "start": "2159240",
    "end": "2164440"
  },
  {
    "text": "here is called with these uh values and um in fact this is what you",
    "start": "2164440",
    "end": "2170800"
  },
  {
    "text": "get because it's a binary format the position of the message this is a bite offset of that message actually matters",
    "start": "2170800",
    "end": "2177000"
  },
  {
    "text": "and this is this is where the this is a comment that comes",
    "start": "2177000",
    "end": "2181838"
  },
  {
    "start": "2182000",
    "end": "2229000"
  },
  {
    "text": "in so how does it form um this is done with a um micros ser a jmh which is a",
    "start": "2182119",
    "end": "2189440"
  },
  {
    "text": "very good um tool for doing um micro benchmarks um one of the things it",
    "start": "2189440",
    "end": "2194680"
  },
  {
    "text": "doesn't do so well is the um uh asynchronous messaging which is why we",
    "start": "2194680",
    "end": "2199960"
  },
  {
    "text": "ended up writing our own called um Java latency harness Benchmark but um uh for",
    "start": "2199960",
    "end": "2207359"
  },
  {
    "text": "doing Simple tests it's very useful and as you can see our 49 is under 20 micros",
    "start": "2207359",
    "end": "2214480"
  },
  {
    "text": "the 59s is much higher but that was actually due to the OS um I really need to upgrade my kernel um it doesn't do",
    "start": "2214480",
    "end": "2221800"
  },
  {
    "text": "that on a much cleaner machine so one of the contentious things",
    "start": "2221800",
    "end": "2228160"
  },
  {
    "text": "that I think is actually quite important is that most messaging systems again",
    "start": "2228160",
    "end": "2233960"
  },
  {
    "start": "2229000",
    "end": "2329000"
  },
  {
    "text": "coming from the web space are all assuming you want flow control and flow control is very powerful and very useful",
    "start": "2233960",
    "end": "2240520"
  },
  {
    "text": "flow control stops your consumer by being from being overloaded by your producer and as as a GUI user that's a",
    "start": "2240520",
    "end": "2247520"
  },
  {
    "text": "the last thing you want because you can't be sending too much data to a guey user because they can't see it anyway",
    "start": "2247520",
    "end": "2253040"
  },
  {
    "text": "and it's just going to slow down their machine so it's completely pointless however there's lots of situations",
    "start": "2253040",
    "end": "2258400"
  },
  {
    "text": "particularly in trading systems and compliance systems where flow control is the last thing you want so for Market",
    "start": "2258400",
    "end": "2265000"
  },
  {
    "text": "data you cannot tell the exchange hey I'm having trouble keeping up can you slow down for me it's just not going to",
    "start": "2265000",
    "end": "2271079"
  },
  {
    "text": "happen um or in compliance systems it's usually something that other department",
    "start": "2271079",
    "end": "2277720"
  },
  {
    "text": "are told they have to have but they don't want to be slowed down by the compliance system itself so what uh",
    "start": "2277720",
    "end": "2284359"
  },
  {
    "text": "Chronicle Q does is it's implemented as like a massive buffer and then you don't need to have uh flow control so it never",
    "start": "2284359",
    "end": "2292720"
  },
  {
    "text": "pushes back on the producer to say I can't keep up it the consumer may get further and further behind but the",
    "start": "2292720",
    "end": "2299119"
  },
  {
    "text": "consumer doesn't even have to be running because the queue just just writes more and more to a file that grows and then",
    "start": "2299119",
    "end": "2305720"
  },
  {
    "text": "the consumer could be restart or continue from where it's up to and because it's all using off Heap memory",
    "start": "2305720",
    "end": "2312560"
  },
  {
    "text": "there's no problem with it running out of Heap space or even main memory space one of the things we test is what",
    "start": "2312560",
    "end": "2318560"
  },
  {
    "text": "happens when the consumer is further than main memory behind the producer we find that it actually does hurt",
    "start": "2318560",
    "end": "2324960"
  },
  {
    "text": "performance but it does continue to run so where can I try this um we have",
    "start": "2324960",
    "end": "2332960"
  },
  {
    "start": "2329000",
    "end": "2349000"
  },
  {
    "text": "some examples much Fuller examples of the code I just showed you um on on my",
    "start": "2332960",
    "end": "2338440"
  },
  {
    "text": "uh blog repo um the actual source code to uh Chronicle q and um some of the",
    "start": "2338440",
    "end": "2345480"
  },
  {
    "text": "other things I mentioned are on open hft and to give you a little idea as to",
    "start": "2345480",
    "end": "2351520"
  },
  {
    "start": "2349000",
    "end": "2378000"
  },
  {
    "text": "some of the products we have everything in green is open source uh the one that's most relevant to this talk is Q",
    "start": "2351520",
    "end": "2358400"
  },
  {
    "text": "which is a persist everything model um I'm B A Q wire is one that's turning out",
    "start": "2358400",
    "end": "2364040"
  },
  {
    "text": "to be more and more useful is allows it's a standard API that allows you to write to lots of different formats and",
    "start": "2364040",
    "end": "2370160"
  },
  {
    "text": "in particular it allows you to optimize the format for a particular use case without having to change your",
    "start": "2370160",
    "end": "2377480"
  },
  {
    "text": "code so in summary um microservice doesn't mean that you um have to do",
    "start": "2377480",
    "end": "2385680"
  },
  {
    "start": "2378000",
    "end": "2455000"
  },
  {
    "text": "everything differently so I'm much more in favor of evolution rather than Revolution it's a you can see it as a",
    "start": "2385680",
    "end": "2392640"
  },
  {
    "text": "goal you can you may decide that some of these best practices are for you some of them are not most likely the ones that",
    "start": "2392640",
    "end": "2399000"
  },
  {
    "text": "are most relevant to you are the things you're already doing but perhaps not as well as you could do so in fact if",
    "start": "2399000",
    "end": "2406280"
  },
  {
    "text": "you're not already a distributed system in some sense of the word then turning",
    "start": "2406280",
    "end": "2411680"
  },
  {
    "text": "your application into a Distributing system may not be the right decision but if you are already a distributor system",
    "start": "2411680",
    "end": "2417800"
  },
  {
    "text": "such as a lot of trading systems are they have to um pass work between multiple threads maybe there's some",
    "start": "2417800",
    "end": "2424200"
  },
  {
    "text": "things in microservices that can help you improve your practices",
    "start": "2424200",
    "end": "2429240"
  },
  {
    "text": "already and um yes I'm a big fan of Lambda architecture although I recognize",
    "start": "2429240",
    "end": "2434319"
  },
  {
    "text": "that a lot of real world applications do not fit well into it completely but you",
    "start": "2434319",
    "end": "2440480"
  },
  {
    "text": "can take work out and and turn them into a lamp to",
    "start": "2440480",
    "end": "2445400"
  },
  {
    "text": "[Applause]",
    "start": "2447380",
    "end": "2453369"
  },
  {
    "text": "architecture",
    "start": "2454200",
    "end": "2457200"
  }
]