[
  {
    "start": "0",
    "end": "96000"
  },
  {
    "text": "hey everybody Welcome nice to see you all um I'm here to tell you a little bit about live view we are going to talk",
    "start": "11599",
    "end": "17720"
  },
  {
    "text": "about how live view handles the hard Parts how it optimizes websocket",
    "start": "17720",
    "end": "23039"
  },
  {
    "text": "Communications with a new feature called live you streams um and before I tell you a little bit about myself and before",
    "start": "23039",
    "end": "29439"
  },
  {
    "text": "we dive in I'm just really curious show of hands who has worked with live VI",
    "start": "29439",
    "end": "35640"
  },
  {
    "text": "before so few people that's so cool so you're all just really curious about what this thing is why it's so great why",
    "start": "35640",
    "end": "42879"
  },
  {
    "text": "you definitely want to use it for web development um okay hi I'm Sophie um I'm",
    "start": "42879",
    "end": "49559"
  },
  {
    "text": "the co-author of programming Phoenix live view along with Bruce Tate which is out in beta right now from prag prag um",
    "start": "49559",
    "end": "55399"
  },
  {
    "text": "I'm not just here to shill for the book I promise but uh if you have questions about live Yar Broadley I am definitely",
    "start": "55399",
    "end": "61680"
  },
  {
    "text": "someone to talk to I'm also the co-host of the beam Radio podcast along with a group of really great people if you are",
    "start": "61680",
    "end": "68400"
  },
  {
    "text": "interested in beam programming more generally functional languages which I'm assuming you are because you are here",
    "start": "68400",
    "end": "74200"
  },
  {
    "text": "you should check out our podcast uh I'm a Staff engineer at GitHub I don't use live view or Elixir or any beam",
    "start": "74200",
    "end": "80119"
  },
  {
    "text": "languages at GitHub before you ask but if you want a shoulder to cry on about Azure event hubs uh come and talk to me",
    "start": "80119",
    "end": "86720"
  },
  {
    "text": "I also own a totally normal dog who can very often be found making this shape",
    "start": "86720",
    "end": "92600"
  },
  {
    "text": "which is very average for him to do cool all right so what am I going to cover we are going to talk about uh how live view",
    "start": "92600",
    "end": "99920"
  },
  {
    "start": "96000",
    "end": "144000"
  },
  {
    "text": "streams optimize client server communication over websockets I'm going to show you a little bit about how to work with streams and a little peek at",
    "start": "99920",
    "end": "106960"
  },
  {
    "text": "how they work under the hood this talk is primarily focused at people that are in fact new to live VI so we will look",
    "start": "106960",
    "end": "113040"
  },
  {
    "text": "at some code but we're going to keep it pretty high level you don't have to be a live view expert to walk away with a bit",
    "start": "113040",
    "end": "118360"
  },
  {
    "text": "of an understanding of how this works what's so great about it uh and I'm hoping an urge to learn even more you",
    "start": "118360",
    "end": "124640"
  },
  {
    "text": "will gain an appreciation for the very declarative nature of live view as a web development framework uh an",
    "start": "124640",
    "end": "130160"
  },
  {
    "text": "understanding of what streams are and how they fit into live view overall and the tools that you need to dive deeper",
    "start": "130160",
    "end": "135360"
  },
  {
    "text": "into live view including a discount for my book and even a chance to win a free",
    "start": "135360",
    "end": "140720"
  },
  {
    "text": "copy let's see is this working all right so what is it if you're not one of the two people that raised your hands you",
    "start": "140720",
    "end": "147400"
  },
  {
    "start": "144000",
    "end": "245000"
  },
  {
    "text": "may not know what live VI even is I'm to tell you it is a simple declarative and functional web development framework it",
    "start": "147400",
    "end": "154400"
  },
  {
    "text": "is part of the Phoenix webd framework which uh goes with the Elixir programming language can I do a show of",
    "start": "154400",
    "end": "159879"
  },
  {
    "text": "hands for Elixir programmers in the room the one person that raised their hand for working with live view cool um beam",
    "start": "159879",
    "end": "167200"
  },
  {
    "text": "more generally any earling folks anybody else working on the beam okay cool you guys just came to explore something",
    "start": "167200",
    "end": "173040"
  },
  {
    "text": "brand new which I absolutely love um all right so what's live view how does it work uh a live view is a process that's",
    "start": "173040",
    "end": "179239"
  },
  {
    "text": "pretty much it it receives events it maintains its own internal state so it updates that state when it does receive",
    "start": "179239",
    "end": "184959"
  },
  {
    "text": "events and then it renders the state in the UI for the user so if you've worked with processes at all on the beam or",
    "start": "184959",
    "end": "191360"
  },
  {
    "text": "otherwise if you're familiar with the actor model uh or a gen server an agent a task anything like that on the beam or",
    "start": "191360",
    "end": "197200"
  },
  {
    "text": "a similar functional language you pretty much know what live view is and how how it works because it's that",
    "start": "197200",
    "end": "202959"
  },
  {
    "text": "simple a live view state is maintained internally in an mutable Elixir data",
    "start": "202959",
    "end": "208840"
  },
  {
    "text": "structure called a socket so you'll hear me you'll hear me refer to socket and",
    "start": "208840",
    "end": "213920"
  },
  {
    "text": "socket assigns which is where a live view stores it State internally um so because of this because",
    "start": "213920",
    "end": "220799"
  },
  {
    "text": "it is a functional framework because it sits on top of the beam because a live",
    "start": "220799",
    "end": "226560"
  },
  {
    "text": "view is basically just a process it really simplifies client server Communications and makes it easy for you",
    "start": "226560",
    "end": "232680"
  },
  {
    "text": "to build single page web apps and anyone who's familiar with building single page web apps um might find that appealing",
    "start": "232680",
    "end": "239840"
  },
  {
    "text": "because very often it is not that simple second ago okay uh let's talk a",
    "start": "239840",
    "end": "245760"
  },
  {
    "start": "245000",
    "end": "477000"
  },
  {
    "text": "little bit about the live view life cycle I've told you what live view is very very broad Strokes how it works let's get a little bit further into the",
    "start": "245760",
    "end": "252760"
  },
  {
    "text": "details there are two phases to the live view life cycle in the first phase uh",
    "start": "252760",
    "end": "257880"
  },
  {
    "text": "your user may open the browser they might type in your amazing app.com into that URL address bar and hit enter this",
    "start": "257880",
    "end": "264520"
  },
  {
    "text": "is a regular old HTTP get request that gets sent to your server uh your app will rent render web page and response",
    "start": "264520",
    "end": "271400"
  },
  {
    "text": "just like normal and then phase two kicks in and this is where live view really begins the live view client side",
    "start": "271400",
    "end": "278680"
  },
  {
    "text": "code part of the library will send a websocket request once that initial page load occurs and this will open this",
    "start": "278680",
    "end": "285240"
  },
  {
    "text": "persistent bidirectional websocket connection and over this open channel of communication is where all of the magic",
    "start": "285240",
    "end": "291639"
  },
  {
    "text": "happens this is where we begin this persistent live view life cycle so live view process receives an event updates",
    "start": "291639",
    "end": "298919"
  },
  {
    "text": "date re renders the portion of the page that needs to change based on the change to that state basically it hangs out and",
    "start": "298919",
    "end": "305840"
  },
  {
    "text": "looks like this forever and ever until somebody's computer explodes or melts or they decide to uh you know stop working",
    "start": "305840",
    "end": "311880"
  },
  {
    "text": "for the day all right what's so great about this so many things um this makes",
    "start": "311880",
    "end": "317240"
  },
  {
    "text": "it pretty easy in my opinion to build these really fast interactive real time",
    "start": "317240",
    "end": "322919"
  },
  {
    "text": "uh single page application so if you're used to integrating maybe a front-end JavaScript framework with a backend",
    "start": "322919",
    "end": "328919"
  },
  {
    "text": "let's say API if you're used to having to manage sort of the complexity and the coordination that that requires live",
    "start": "328919",
    "end": "334639"
  },
  {
    "text": "view eliminates that need for you because you're writing all your code pretty much all your code all the code you need to write on the server side and",
    "start": "334639",
    "end": "341680"
  },
  {
    "text": "the framework handles all of the details for you um and on top of that this is built on top of the beam so you get all",
    "start": "341680",
    "end": "348240"
  },
  {
    "text": "of the benefits of OTP you get fault tolerance you get massive amounts of concurrency you get all the speed that",
    "start": "348240",
    "end": "354360"
  },
  {
    "text": "that entails without actually having to know how any of that works which is always nice um you also get pretty easy",
    "start": "354360",
    "end": "362039"
  },
  {
    "text": "levers to pull to integrate your own JavaScript should you need to so one of",
    "start": "362039",
    "end": "367160"
  },
  {
    "text": "the things that Elixir developers and Phoenix developers were really fond of saying when live VI first came on the",
    "start": "367160",
    "end": "372840"
  },
  {
    "text": "scene a couple of years ago was like hooray we don't have to write JavaScript anymore because a lot of Elixir",
    "start": "372840",
    "end": "378680"
  },
  {
    "text": "developers are backend developers and we sometimes kind of poo poo JavaScript um but what it really means what Li you",
    "start": "378680",
    "end": "385199"
  },
  {
    "text": "really gives you is not you don't have to write JavaScript anymore it's that you don't don't have to write the",
    "start": "385199",
    "end": "391360"
  },
  {
    "text": "burdensome and the toilsome parts of JavaScript because live view is very declarative you don't have to teach your",
    "start": "391360",
    "end": "397880"
  },
  {
    "text": "Live View application how to send a message to the server or teach the server how to respond to the client you",
    "start": "397880",
    "end": "404039"
  },
  {
    "text": "don't have to write the tedious JavaScript code to update the page in accordance with the changes described in",
    "start": "404039",
    "end": "410080"
  },
  {
    "text": "that message you just have to tell live VI what to do and you can focus on the details and the requirements of your",
    "start": "410080",
    "end": "417400"
  },
  {
    "text": "application for your organization your business and your users and that means that you can integrate all of the fancy",
    "start": "417400",
    "end": "423720"
  },
  {
    "text": "and sophisticated JS that you want um and then you just kind of get to focus on the fun Parts if you even need the",
    "start": "423720",
    "end": "429840"
  },
  {
    "text": "custom JavaScript because again live view bakes a lot of that in for you okay so this leaves you to focus like I said",
    "start": "429840",
    "end": "436360"
  },
  {
    "text": "on building that custom logic and interaction for your application you don't have to do that sort of boilerplate of client server",
    "start": "436360",
    "end": "443560"
  },
  {
    "text": "communication um you never have to tell live you how to do something you always only tell it what to do very declarative",
    "start": "443560",
    "end": "449720"
  },
  {
    "text": "like I said and one of the best examples of this aspect of the live view framework is the live streams",
    "start": "449720",
    "end": "456080"
  },
  {
    "text": "functionality which is actually new so even if you're super experienced in live view and you've been using it ever since",
    "start": "456080",
    "end": "461120"
  },
  {
    "text": "it first came out however many years ago I think three uh maybe you don't know anything about streams or maybe you just",
    "start": "461120",
    "end": "466759"
  },
  {
    "text": "know a little bit about it and that's about to change so before we dive in and I tell you what live VI streams are and",
    "start": "466759",
    "end": "472560"
  },
  {
    "text": "how they work I want to talk about the problem that they set out to solve so what is this problem live view",
    "start": "472560",
    "end": "480159"
  },
  {
    "start": "477000",
    "end": "623000"
  },
  {
    "text": "always aimed to optimize client server communication by minimizing the amount of data that is sent between the client",
    "start": "480159",
    "end": "486800"
  },
  {
    "text": "and the server in particular minimizing the amount of data that the server sends to the client to describe changes to the",
    "start": "486800",
    "end": "494240"
  },
  {
    "text": "page as a result of changes to the internal State stored server side in that socket that I told you about",
    "start": "494240",
    "end": "500960"
  },
  {
    "text": "earlier uh so live VI sends only the absolute smallest amount of data to",
    "start": "500960",
    "end": "506080"
  },
  {
    "text": "describe that page diff and then the live view JS client which is baked into your front end code you don't have to",
    "start": "506080",
    "end": "511720"
  },
  {
    "text": "write any of this code yourself will read that teeny tiny diff and it will change whatever needs to change on the",
    "start": "511720",
    "end": "517839"
  },
  {
    "text": "page that could be a button a div hiding a modal showing something and so on uh",
    "start": "517839",
    "end": "523200"
  },
  {
    "text": "here is an example of the payload that the server sends to the client to describe a page diff this is kind of",
    "start": "523200",
    "end": "529760"
  },
  {
    "text": "junk it's not really meant for human eyes which again is what's so nice about the declarative nature of live view you",
    "start": "529760",
    "end": "535320"
  },
  {
    "text": "would never have to introspect on this data structure which frankly looks terrible you would never have to write",
    "start": "535320",
    "end": "540800"
  },
  {
    "text": "any code that would have to pick things out of there and figure out what to change on the page uh as a result but",
    "start": "540800",
    "end": "546720"
  },
  {
    "text": "you can just get a sense here of like how small this packet of information that the server is sending down to the",
    "start": "546720",
    "end": "553200"
  },
  {
    "text": "client to tell live you what to do what to change in the UI um but even so this",
    "start": "553200",
    "end": "558279"
  },
  {
    "text": "is not always enough of an optimization what if you're dealing with a huge data set what if you have some sort of",
    "start": "558279",
    "end": "564279"
  },
  {
    "text": "Spotify type UI and you have like a bazillion technical term songs to to",
    "start": "564279",
    "end": "569519"
  },
  {
    "text": "show your user or allow them to browse even small page diffs um don't really hack it when you've got huge amounts of",
    "start": "569519",
    "end": "576600"
  },
  {
    "text": "data that you're trying to communicate between the client and the server um so before streams live you did have some",
    "start": "576600",
    "end": "583360"
  },
  {
    "text": "bits of functionality to deal with this problem uh you could store all that data",
    "start": "583360",
    "end": "588680"
  },
  {
    "text": "on the server which is you know not without its cost or you could have used a feature called Phoenix update equals",
    "start": "588680",
    "end": "594680"
  },
  {
    "text": "append um storing a lot of data on the server is still certainly not free and that a Penn feature could be a little",
    "start": "594680",
    "end": "601079"
  },
  {
    "text": "cumbersome to work from work with so this is a question that I would actually get the most frequently up until streams",
    "start": "601079",
    "end": "608000"
  },
  {
    "text": "were invented and now I have a really nice answer for it if I was giving a talk or teaching a workshop talking about the book whatever this was like",
    "start": "608000",
    "end": "614079"
  },
  {
    "text": "one of the top three questions that people would ask me live view seems great but what about when I have a massive amount of data what happens to",
    "start": "614079",
    "end": "621440"
  },
  {
    "text": "my single page app then well now I have an answer and it's called live you",
    "start": "621440",
    "end": "627279"
  },
  {
    "start": "623000",
    "end": "667000"
  },
  {
    "text": "streams so what are they uh live view streams let us manage these really large data sets efficiently because they are",
    "start": "627279",
    "end": "634480"
  },
  {
    "text": "detached from serers side storage in the socket and they're stored entirely client side and if you had to write any",
    "start": "634480",
    "end": "641720"
  },
  {
    "text": "of the code to do that yourself uh this would be a terrible solution I think but",
    "start": "641720",
    "end": "647360"
  },
  {
    "text": "you don't that's what's so great about the declarative nature of live view the framework handles all of that for you um",
    "start": "647360",
    "end": "653720"
  },
  {
    "text": "so what are we going to talk about next actually what we're going to do next is watch me take a sip of water because I'm thirsty",
    "start": "653720",
    "end": "659920"
  },
  {
    "text": "I'll leave you an",
    "start": "659920",
    "end": "662600"
  },
  {
    "text": "anticipation okay we're going to take a look at how to use streams first again I'm going to keep it pretty high level assuming correctly that not a lot of you",
    "start": "666680",
    "end": "673200"
  },
  {
    "start": "667000",
    "end": "893000"
  },
  {
    "text": "guys have worked with live view before uh and then we're going to take a peek under the hood at the streams implementation because I want to really",
    "start": "673200",
    "end": "679880"
  },
  {
    "text": "drive home this phrase that I keep using the declarative nature of live view I want to show you how it is that the",
    "start": "679880",
    "end": "685440"
  },
  {
    "text": "framework handles these details so that you don't ever have to worry about it yourself",
    "start": "685440",
    "end": "690680"
  },
  {
    "text": "what are we going to build a chat app it's so thrilling and unusual for a single page application um this is a",
    "start": "690680",
    "end": "697279"
  },
  {
    "text": "little slack clone that I built in preparation for this very talk I'm actually amazed that I got it to look",
    "start": "697279",
    "end": "702360"
  },
  {
    "text": "like that because traditionally I am terrible at anything frontend which is one of the benefits of live view it's",
    "start": "702360",
    "end": "707720"
  },
  {
    "text": "baked into the Phoenix web framework it has Tailwind styling uh Incorporated right into it so even if you're like me",
    "start": "707720",
    "end": "714160"
  },
  {
    "text": "and you have to Google like how to get two divs to be next to each other you can still make something that kind of",
    "start": "714160",
    "end": "719519"
  },
  {
    "text": "looks like a thing okay first step uh we're going to talk about inserting into",
    "start": "719519",
    "end": "725000"
  },
  {
    "text": "the stream how do we put some stream data onto the page so we're going to use streams to store and render the most",
    "start": "725000",
    "end": "731360"
  },
  {
    "text": "recent 10 messages in our chat room UI such that when the user navigates to a particular uh chat room on the page",
    "start": "731360",
    "end": "738720"
  },
  {
    "text": "they'll see the most recent 10 messages the first thing you want to do is put the stream data into socket assigns I",
    "start": "738720",
    "end": "744880"
  },
  {
    "text": "told you guys earlier that a live view is just a process that it stores its state in an immutable data structure",
    "start": "744880",
    "end": "751320"
  },
  {
    "text": "called a socket socket assigns is where that state is stored socket is a struct",
    "start": "751320",
    "end": "758160"
  },
  {
    "text": "you think of it as a map it's got a key called assigns and that contains all the data that represents the state of your",
    "start": "758160",
    "end": "763600"
  },
  {
    "text": "live view process uh so the handle prams function is a function that gets called when the",
    "start": "763600",
    "end": "769120"
  },
  {
    "text": "live view process starts up when the user navigates to the page in question you can see here that we are responding",
    "start": "769120",
    "end": "776120"
  },
  {
    "text": "with the required no reply tupal no reply the second element in our tupal is going to be the state of the socket that",
    "start": "776120",
    "end": "784199"
  },
  {
    "text": "we want to have represented on the page so we're putting some other stuff into socket I'm putting the room ID in there",
    "start": "784199",
    "end": "789600"
  },
  {
    "text": "not so important here what I want you guys to pay attention to is this stream 4 function we are inserting some data",
    "start": "789600",
    "end": "796360"
  },
  {
    "text": "into the stream under a key of messages we're going to put the last 10",
    "start": "796360",
    "end": "801440"
  },
  {
    "text": "messages after you add your stream data to socket assigns you're pretty much",
    "start": "801440",
    "end": "806600"
  },
  {
    "text": "ready to render it there's nothing else you have to do this is some markup that you would find in the template for that",
    "start": "806600",
    "end": "812079"
  },
  {
    "text": "UI that I just showed you guys um pretty simple it's a div there's another div in it we're iterating over the messages",
    "start": "812079",
    "end": "818600"
  },
  {
    "text": "that we put in the Stream and we're showing the content of each one nothing too fancy there but we are going to break this down a little bit further in",
    "start": "818600",
    "end": "824720"
  },
  {
    "text": "a moment okay that moment is right now so we have some required structure to",
    "start": "824720",
    "end": "830320"
  },
  {
    "text": "this markup the first thing that we need is an outer element that then contains the stream elements the outer element",
    "start": "830320",
    "end": "837440"
  },
  {
    "text": "has an attribute on it called phix update equals stream that is non-negotiable the live view JavaScript",
    "start": "837440",
    "end": "842839"
  },
  {
    "text": "code is looking for this thing if it can't find it it is not going to do a very good job of managing your stream",
    "start": "842839",
    "end": "848560"
  },
  {
    "text": "data on the client side for you so that's the first requirement second requirement is that we added this just a",
    "start": "848560",
    "end": "854040"
  },
  {
    "text": "plain old HTML ID but we are attaching what is called the Dom ID of the stream",
    "start": "854040",
    "end": "859880"
  },
  {
    "text": "element to each in this case div that is going to display that stream content",
    "start": "859880",
    "end": "865480"
  },
  {
    "text": "we're going to take a slightly closer look at the Dom ID later on but all I want you to understand for now is that",
    "start": "865480",
    "end": "870720"
  },
  {
    "text": "there are two requirements for displaying stream data on the page such that the live view JS code can manage",
    "start": "870720",
    "end": "876800"
  },
  {
    "text": "that stream data for you we don't really need to understand the details of how liveu uses these data points to do what",
    "start": "876800",
    "end": "883240"
  },
  {
    "text": "it needs to do all you have to do is say here's my stream data I'm rendering it now pretty much end of story um okay and",
    "start": "883240",
    "end": "890639"
  },
  {
    "text": "then it looks like this and it's pretty Tada all right under the hood how does it work so again I really want to",
    "start": "890639",
    "end": "897079"
  },
  {
    "start": "893000",
    "end": "1360000"
  },
  {
    "text": "emphasize that to get this UI working to manage what could be a very large volume of data very efficiently in live view",
    "start": "897079",
    "end": "904440"
  },
  {
    "text": "and to have live view manage it for you on the client exclusively I think we wrote like four lines of code let's",
    "start": "904440",
    "end": "911320"
  },
  {
    "text": "count one 2 3 four six six lines of code and",
    "start": "911320",
    "end": "917240"
  },
  {
    "text": "most of those was just HTML that's all that's all we had to do to get this looking so good okay taking",
    "start": "917240",
    "end": "923639"
  },
  {
    "text": "a look under the hood so once we call that stream four function in that call back that gets invoked when the live",
    "start": "923639",
    "end": "929800"
  },
  {
    "text": "view process starts up this is what socket assigns is going to look like um and again a lot of this is not for our",
    "start": "929800",
    "end": "936959"
  },
  {
    "text": "human eyes this is instructions for the live view framework but you can see that it's pretty much a map and there's some",
    "start": "936959",
    "end": "944120"
  },
  {
    "text": "information in this map that describes the stream data the live view client side code will use this information as a",
    "start": "944120",
    "end": "950959"
  },
  {
    "text": "set of instructions for displaying and managing the stream data on the page we're going to break this down a little",
    "start": "950959",
    "end": "956079"
  },
  {
    "text": "bit further um so we added a streams key to socket assigns which we just saw which in turn points to a map with",
    "start": "956079",
    "end": "963319"
  },
  {
    "text": "whatever key we decide we decided to call it messages um the messages key in",
    "start": "963319",
    "end": "968519"
  },
  {
    "text": "turn points to a struct it is a phoenix live view live stream struct if you're not familiar with Elixir structs it's a",
    "start": "968519",
    "end": "974759"
  },
  {
    "text": "map um and it holds all the information that live view needs to do what it needs to do to show that data to the user",
    "start": "974759",
    "end": "981680"
  },
  {
    "text": "however you decide to display it and later on to update it delete it manage it in whatever way you may instruct it",
    "start": "981680",
    "end": "987279"
  },
  {
    "text": "to do so we've we got that streams key that was added with our call to the stream 4 function and we've got this",
    "start": "987279",
    "end": "994480"
  },
  {
    "text": "messages key and it points to a live stream struct and we can also see in",
    "start": "994480",
    "end": "999720"
  },
  {
    "text": "there that there's an inserts key that contains a list of the messages that we're inserting into the stream it",
    "start": "999720",
    "end": "1005279"
  },
  {
    "text": "contains a deletes key that is me uh empty because we're not deleting anything right now and we're going to",
    "start": "1005279",
    "end": "1010800"
  },
  {
    "text": "see we saw earlier that in our template we access this via the assignment that's what it's called when you pull data out",
    "start": "1010800",
    "end": "1016880"
  },
  {
    "text": "of socket assigns to display it in the UI an assignment it's there in streams.",
    "start": "1016880",
    "end": "1022319"
  },
  {
    "text": "messages uh we can see the inserts key here it's a list of would be 10 messages",
    "start": "1022319",
    "end": "1027520"
  },
  {
    "text": "but I cut it off uh you can see that deletes is empty because we're not deleting anything so we're starting to",
    "start": "1027520",
    "end": "1033079"
  },
  {
    "text": "get a sense of the information that we're providing to live view so that it can manage this data for us and again if",
    "start": "1033079",
    "end": "1040199"
  },
  {
    "text": "you never looked at this ever that would be totally fine I'm showing you so you get a sense of how live view is working",
    "start": "1040199",
    "end": "1045760"
  },
  {
    "text": "under the hood all right what's so great about this it solves the problem of transferring",
    "start": "1045760",
    "end": "1051440"
  },
  {
    "text": "really large data sets between the client and the server for subsequent updates if a user wants to add a new",
    "start": "1051440",
    "end": "1056880"
  },
  {
    "text": "message because after all they are chatting if they want to edit a message delete a message they said something that they really wish they hadn't uh",
    "start": "1056880",
    "end": "1063720"
  },
  {
    "text": "live you can do all of that for us with just that bit of information that we've already provided and it does it",
    "start": "1063720",
    "end": "1070240"
  },
  {
    "text": "efficiently because after that initial render that data that we saw in socket assigns totally goes away and that list",
    "start": "1070240",
    "end": "1077600"
  },
  {
    "text": "of messages isor stored client side only and how it is stored on the client and",
    "start": "1077600",
    "end": "1082960"
  },
  {
    "text": "how to interact with that data is none of your business that's what's so great about live view so after the initial",
    "start": "1082960",
    "end": "1089440"
  },
  {
    "text": "render the list of messages will no longer be present in the socket under streams messages inserts if you were to",
    "start": "1089440",
    "end": "1095440"
  },
  {
    "text": "inspect it again um what I do I have a picture no we'll come back to it if you",
    "start": "1095440",
    "end": "1101480"
  },
  {
    "text": "were to inspect it again you would see that that list of inserts would also be",
    "start": "1101480",
    "end": "1108280"
  },
  {
    "text": "empty and that list of messages would be embedded in the HTML which is pretty cool let's go back",
    "start": "1108280",
    "end": "1115360"
  },
  {
    "text": "okay another nice thing about this um you don't have to tell live view how to render the data in streams so how does",
    "start": "1115360",
    "end": "1122240"
  },
  {
    "text": "it know how to do this so we've already seen that we call stream four when the live view is initialized and we just put",
    "start": "1122240",
    "end": "1129799"
  },
  {
    "text": "some data in in our case streams. messages and the messages key is totally my own invention you could call it",
    "start": "1129799",
    "end": "1135760"
  },
  {
    "text": "whatever you want messages was totally appropriate for this chat app you could call it songs if you're building a",
    "start": "1135760",
    "end": "1140840"
  },
  {
    "text": "Spotify clone and and so on uh then live view renders the template for you that's another thing that live view does for",
    "start": "1140840",
    "end": "1147240"
  },
  {
    "text": "you declaratively you don't have to tell it how to render a template in response to getting a message from the server you",
    "start": "1147240",
    "end": "1153559"
  },
  {
    "text": "just Define a template and it knows what to do um and in that template you may recall we called streams. messages we",
    "start": "1153559",
    "end": "1159440"
  },
  {
    "text": "iterated over it and live VI for us rendered the data that was in the socket",
    "start": "1159440",
    "end": "1165120"
  },
  {
    "text": "assigns streams messages. inserts we didn't have to do any of that this is",
    "start": "1165120",
    "end": "1171039"
  },
  {
    "text": "the declarative nature of live view it's going to do the same thing if we need to update any of the messages in the Stream",
    "start": "1171039",
    "end": "1177400"
  },
  {
    "text": "delete them add one add 20 get rid of 100 um we're never going to have to",
    "start": "1177400",
    "end": "1182720"
  },
  {
    "text": "write the code to actually perform those operations we're just going to have to provide a set of instructions to live",
    "start": "1182720",
    "end": "1188360"
  },
  {
    "text": "view please update this message please delete that one and so on and we're going to see some of that in action in a",
    "start": "1188360",
    "end": "1193799"
  },
  {
    "text": "few minutes um but before we do I want to take a slightly closer look at rendering because there something a",
    "start": "1193799",
    "end": "1199039"
  },
  {
    "text": "little bit odd here that you may have picked up on so the data we're rendering is stored in socket assigns streams",
    "start": "1199039",
    "end": "1207600"
  },
  {
    "text": "messages that's it this points to a single live view stream struct it's only",
    "start": "1207600",
    "end": "1215159"
  },
  {
    "text": "under messages. inserts that we have that list but uh in our UI we didn't",
    "start": "1215159",
    "end": "1222520"
  },
  {
    "text": "have to say socket assigns streams messages inserts and iterate over it all",
    "start": "1222520",
    "end": "1228679"
  },
  {
    "text": "we had to do is reference these streams. messages um much much better much more",
    "start": "1228679",
    "end": "1234880"
  },
  {
    "text": "ergonomic approach right than having to drill that far down into it that level of detail like I said earlier is none of",
    "start": "1234880",
    "end": "1240679"
  },
  {
    "text": "our business um but if streams. messages is a struct how is it that we can",
    "start": "1240679",
    "end": "1245720"
  },
  {
    "text": "declare this iteration uh well streams themselves are innumerable and this is implemented",
    "start": "1245720",
    "end": "1252520"
  },
  {
    "text": "within the live view streams module which implements the innumerable protocol for you we're going to take a",
    "start": "1252520",
    "end": "1258080"
  },
  {
    "text": "quick peek at it but this is just out of Interest this is exactly the kind of detail that you never have to concern yourself with when you're working with",
    "start": "1258080",
    "end": "1264320"
  },
  {
    "text": "live view is this what's happening oh I may",
    "start": "1264320",
    "end": "1271120"
  },
  {
    "text": "have okay cool uh so this is in the live view streams module it implements its",
    "start": "1271120",
    "end": "1277919"
  },
  {
    "text": "very own reduce function and here it is pattern matching out the content of the",
    "start": "1277919",
    "end": "1283279"
  },
  {
    "text": "inserts key which is where our list of messages happens to be and it's calling another function under the hood do",
    "start": "1283279",
    "end": "1289760"
  },
  {
    "text": "reduce with those with that list um and this is what it is going to return to us",
    "start": "1289760",
    "end": "1299080"
  },
  {
    "text": "the first element there is the Dom ID we have an index number that instructs live",
    "start": "1299080",
    "end": "1304200"
  },
  {
    "text": "view as to whether a message is being appended or prepended and then we have the message itself the stream item if",
    "start": "1304200",
    "end": "1310320"
  },
  {
    "text": "you will uh this is just a very simplified look at what do reduce does under the hood it's basically a",
    "start": "1310320",
    "end": "1317960"
  },
  {
    "text": "reduction it's taking the items out of the list of inserts and it is returning",
    "start": "1317960",
    "end": "1323840"
  },
  {
    "text": "two tupal with the Dom ID and the item and if we wanted to inspect that",
    "start": "1323840",
    "end": "1330240"
  },
  {
    "text": "list of tupal ourselves we could do so you could put this code in any server side function you could put it before",
    "start": "1330240",
    "end": "1336320"
  },
  {
    "text": "the render function runs for your live view process just so that we can get a sense of what actually lives in socket",
    "start": "1336320",
    "end": "1343400"
  },
  {
    "text": "assigned streams messages and this is what you would see Dom ID messages -5",
    "start": "1343400",
    "end": "1349159"
  },
  {
    "text": "uh five being the ID of this particular message and then the stream item itself how this was created we just saw a brief",
    "start": "1349159",
    "end": "1355760"
  },
  {
    "text": "look at but we didn't have to write any of that code and we never have to look at it if we don't want to um all right I",
    "start": "1355760",
    "end": "1361559"
  },
  {
    "start": "1360000",
    "end": "1471000"
  },
  {
    "text": "promise you that I would tell you a little bit more about stream ID uh Dom IDs rather and what they're used for in live view and I'm going to do that now",
    "start": "1361559",
    "end": "1368120"
  },
  {
    "text": "so live view uses each stream items Dom ID to track that item on the page so",
    "start": "1368120",
    "end": "1373400"
  },
  {
    "text": "that you can later provide the instructions to live view to update an existing item or delete an existing item",
    "start": "1373400",
    "end": "1380760"
  },
  {
    "text": "uh live view expects this Dom ID to be attached to the HTML element that",
    "start": "1380760",
    "end": "1385840"
  },
  {
    "text": "contains the stream item and that structure matters if you put that Dom ID like a level up or a level Below in your",
    "start": "1385840",
    "end": "1392400"
  },
  {
    "text": "markup live view is basically going to choke it's not going to manage your data very well for you so those are some caveats to keep in mind um so we attach",
    "start": "1392400",
    "end": "1399799"
  },
  {
    "text": "the Dom ID to the div produced by the iteration in our for directive we did it right here so we can see in our",
    "start": "1399799",
    "end": "1406159"
  },
  {
    "text": "iteration We Now understand why it is that we can iterate over streams.",
    "start": "1406159",
    "end": "1411279"
  },
  {
    "text": "messages even though the list itself of data is in stream messages inserts and",
    "start": "1411279",
    "end": "1417480"
  },
  {
    "text": "we can see where the two Tuple that is getting yielded for each step of the iteration actually came from because we",
    "start": "1417480",
    "end": "1423880"
  },
  {
    "text": "peaked under the hood at that reduce function so we're iterating over each message where each message is",
    "start": "1423880",
    "end": "1430320"
  },
  {
    "text": "represented by a tupal of Dom ID and the message itself and we're attaching the Dom ID as an HTML ID to the actual ual",
    "start": "1430320",
    "end": "1438760"
  },
  {
    "text": "item that's rendering the content okay so all the stream data is stored client side only as soon as this",
    "start": "1438760",
    "end": "1445919"
  },
  {
    "text": "page renders there is nothing in socket assigns messages inserts anymore it's now an empty list so live view has to be",
    "start": "1445919",
    "end": "1453000"
  },
  {
    "text": "able to derive all the information that it needs to manage this data from the content embedded in your HTML and that's",
    "start": "1453000",
    "end": "1460559"
  },
  {
    "text": "what the Dom ID is for it's going to use that as I said earlier to update or delete uh our stream items our messages",
    "start": "1460559",
    "end": "1466520"
  },
  {
    "text": "for us and that's all we need to do to render those stream items to recap what",
    "start": "1466520",
    "end": "1472000"
  },
  {
    "start": "1471000",
    "end": "1839000"
  },
  {
    "text": "we've done so far uh which actually is very little we stored the initial stream",
    "start": "1472000",
    "end": "1477279"
  },
  {
    "text": "data in socket assigns and we iterated over it to render it on the page that's",
    "start": "1477279",
    "end": "1482399"
  },
  {
    "text": "it that's all we had to do live VI takes care of all of the details for you everything is now managed client side",
    "start": "1482399",
    "end": "1488480"
  },
  {
    "text": "your server side code is nice and clean and it is very efficient to run because it's not storing 10 messages 100",
    "start": "1488480",
    "end": "1495640"
  },
  {
    "text": "messages a million messages and so on the page is going to render this list of",
    "start": "1495640",
    "end": "1501000"
  },
  {
    "text": "messages from the stream live view no longer holds it in state on the server side oh this is what I was looking at",
    "start": "1501000",
    "end": "1506679"
  },
  {
    "text": "earlier um once that initial page renders this is what socket assigned",
    "start": "1506679",
    "end": "1512080"
  },
  {
    "text": "streams look like there's nothing left in inserts um and there doesn't need to be anything there because you still have",
    "start": "1512080",
    "end": "1517480"
  },
  {
    "text": "what you need to tell live view to update delete bulk insert clear out",
    "start": "1517480",
    "end": "1522799"
  },
  {
    "text": "remove whatever any of the stream data and you're not going to interact with that data directly",
    "start": "1522799",
    "end": "1529080"
  },
  {
    "text": "all right I'll show you how we're going to update a message with the stream insert function we're actually going to",
    "start": "1529080",
    "end": "1535360"
  },
  {
    "text": "add a new message and then update an existing message so assume that we have a form for a new message you have saw",
    "start": "1535360",
    "end": "1541159"
  },
  {
    "text": "the UI you would type in at the bottom just like in slack um and we have a pubsub integration that will notify",
    "start": "1541159",
    "end": "1546840"
  },
  {
    "text": "every user's live view around the world when a new message is created it will broadcast it out so assume that we have",
    "start": "1546840",
    "end": "1553240"
  },
  {
    "text": "a um handle info function that's going to get all of those broadcasted messes",
    "start": "1553240",
    "end": "1558279"
  },
  {
    "text": "me so that if all of us were on the same slack chat room we would all get a message at the same time here is that",
    "start": "1558279",
    "end": "1564640"
  },
  {
    "text": "handle info function um we are broadcasting a message that contains the new message that some user just",
    "start": "1564640",
    "end": "1570480"
  },
  {
    "text": "submitted and all we have to do to get it added to the stream is call stream insert that is it it's barely a single",
    "start": "1570480",
    "end": "1577440"
  },
  {
    "text": "line of code um and this is what it does for us it updates socket assigns stream",
    "start": "1577440",
    "end": "1583679"
  },
  {
    "text": "inserts it puts the new message content into that list of inserts including",
    "start": "1583679",
    "end": "1589120"
  },
  {
    "text": "you'll see the Dom ID and an uh piece of information there an index negative one which actually tells it to append yes",
    "start": "1589120",
    "end": "1596760"
  },
  {
    "text": "append the message to the end of the stream and then the message itself and that's all you need to do to",
    "start": "1596760",
    "end": "1602600"
  },
  {
    "text": "tell live view to add a new item to the stream this would automatically appear at the bottom of the list of messages in",
    "start": "1602600",
    "end": "1608080"
  },
  {
    "text": "the chat room the only line of code we had to write to do that was this one",
    "start": "1608080",
    "end": "1613679"
  },
  {
    "text": "that's it super declarative",
    "start": "1613679",
    "end": "1617840"
  },
  {
    "text": "okay live view will rerender the template anytime anything changes in socket assigns the live view client will",
    "start": "1619159",
    "end": "1625159"
  },
  {
    "text": "follow the instructions that are now baked into streams messages inserts it'll append the new message to the end",
    "start": "1625159",
    "end": "1631240"
  },
  {
    "text": "of the view in the chat room if we want to update an existing message in place",
    "start": "1631240",
    "end": "1636559"
  },
  {
    "text": "it is just about exactly as easy as it was to add a new message do I have a video I do here's",
    "start": "1636559",
    "end": "1643120"
  },
  {
    "text": "the feature is it fuzzy no you can kind of see that's a little fuzzy",
    "start": "1643120",
    "end": "1650159"
  },
  {
    "text": "I'm not that excited yes I am I'm even happier than I thought there you go that's what we're going to",
    "start": "1650480",
    "end": "1656200"
  },
  {
    "text": "build unsurprisingly it's going to happen in about one line of code just",
    "start": "1656200",
    "end": "1661960"
  },
  {
    "text": "like with our addition of a new message same thing we've got a form for editing a message we've got a pub sub",
    "start": "1661960",
    "end": "1667679"
  },
  {
    "text": "integration that ought to broadcast out a message to everybody's live view so everyone has a handle info function that",
    "start": "1667679",
    "end": "1673679"
  },
  {
    "text": "will respond to that message broadcast um this looks almost exactly like",
    "start": "1673679",
    "end": "1679120"
  },
  {
    "text": "the function that we called earlier we're calling stream insert into the messages stream the message itself at1",
    "start": "1679120",
    "end": "1685600"
  },
  {
    "text": "so that's going to do a couple things for us um because the message with this Dom ID already exists on the page live",
    "start": "1685600",
    "end": "1692679"
  },
  {
    "text": "view will know that it's updating an existing Message In The Stream and because we provide the at negative one",
    "start": "1692679",
    "end": "1698559"
  },
  {
    "text": "option live view will know to update the message in its current position in the Stream but you could also give it a",
    "start": "1698559",
    "end": "1704360"
  },
  {
    "text": "different instruction to maybe take it out of its position add it to the end added to the beginning that just happens",
    "start": "1704360",
    "end": "1709760"
  },
  {
    "text": "not to be what we want here uh this is another example of the declarative nature of live view you",
    "start": "1709760",
    "end": "1716240"
  },
  {
    "text": "don't have to teach live view how to update a message in place we just had to tell it to do so all we needed was the instruction",
    "start": "1716240",
    "end": "1723720"
  },
  {
    "text": "regarding which message to update with the updated message struct itself there's one last thing that I",
    "start": "1723720",
    "end": "1731200"
  },
  {
    "text": "want to show you before we wrap up um with some time for questions let's talk about deleting a message um so I've got",
    "start": "1731200",
    "end": "1738679"
  },
  {
    "text": "this very Advanced little red x that I'm not even going to tell you how long it took me to get a little red X to show up",
    "start": "1738679",
    "end": "1745679"
  },
  {
    "text": "there it was not not great uh a user should be able to click that button and the message disappears just like in",
    "start": "1745679",
    "end": "1751880"
  },
  {
    "text": "slack um so we've got an event handler that's going to run when you would click that button that by the way involves uh",
    "start": "1751880",
    "end": "1759240"
  },
  {
    "text": "user clicking a button the JS code that runs on the client side that you never have to write or see or even think of",
    "start": "1759240",
    "end": "1764960"
  },
  {
    "text": "sends an event up over the websocket connection to the server all you need is this handy event handler and it's going",
    "start": "1764960",
    "end": "1770679"
  },
  {
    "text": "to respond to delete message it's going to find the message it's going to delete the message and then it's going to remove the message from the stream with",
    "start": "1770679",
    "end": "1777399"
  },
  {
    "text": "this single line stream delete uh and then what message do I want to delete",
    "start": "1777399",
    "end": "1783159"
  },
  {
    "text": "the call to stream delete returns a socket with an assigns that now look something like this you can probably guess that deletes is no longer empty um",
    "start": "1783159",
    "end": "1790679"
  },
  {
    "text": "it's just the Dom ID and that is the result of this one call I didn't have to",
    "start": "1790679",
    "end": "1796240"
  },
  {
    "text": "compute the Dom ID myself all I had to do was tell it the actual message to delete and this is the resulting socket",
    "start": "1796240",
    "end": "1803720"
  },
  {
    "text": "assigns this gets sent back down to the client uh which instructs live you to remove the item with that Dom ID from",
    "start": "1803720",
    "end": "1810880"
  },
  {
    "text": "the rendered list of the streams messages assignment and that's all you need to do",
    "start": "1810880",
    "end": "1816360"
  },
  {
    "text": "to delete a stream item like a quarter of a line of code which I think is very cool we tell live VI what to delete we",
    "start": "1816360",
    "end": "1823960"
  },
  {
    "text": "do not tell it how to delete it it's none of our business we don't care so so as always with live view the framework",
    "start": "1823960",
    "end": "1830000"
  },
  {
    "text": "handles the details of the how it handles the hard part it handles that sort of tedious",
    "start": "1830000",
    "end": "1835159"
  },
  {
    "text": "boilerplate communication between the client and the server um actually I did",
    "start": "1835159",
    "end": "1840279"
  },
  {
    "start": "1839000",
    "end": "2040000"
  },
  {
    "text": "lie there is one more thing I want to show you as a bonus before we wrap up that will uh illustrate something I told",
    "start": "1840279",
    "end": "1846120"
  },
  {
    "text": "you a little bit about earlier which is that live view doesn't mean no JavaScript it means you don't have to",
    "start": "1846120",
    "end": "1851440"
  },
  {
    "text": "write the boring JavaScript um but there are plenty of ways to incorporate JavaScript pretty easily so with a chat",
    "start": "1851440",
    "end": "1858960"
  },
  {
    "text": "app with slack for example you should be able to scroll up infinitely go back as far as your you know retention policy",
    "start": "1858960",
    "end": "1865279"
  },
  {
    "text": "allows this infinite scrollback I think can be kind of like notoriously painful",
    "start": "1865279",
    "end": "1870320"
  },
  {
    "text": "to implement in a lot of JavaScript Frameworks certainly with vanilla JS there's like a lot of code you have to",
    "start": "1870320",
    "end": "1875639"
  },
  {
    "text": "write to get that working even if it isn't terrifically complex um wouldn't it be great if you didn't have to well",
    "start": "1875639",
    "end": "1881679"
  },
  {
    "text": "you don't um it used to be fairly easy to do this in live view with a feature called JavaScript hook",
    "start": "1881679",
    "end": "1888600"
  },
  {
    "text": "which would allow you to hook into a moment in time on the page and execute some arbitrary bit of customjs not",
    "start": "1888600",
    "end": "1895440"
  },
  {
    "text": "terribly complex but now it is even easier to do this kind of thing in live view it's now baked into the framework",
    "start": "1895440",
    "end": "1900960"
  },
  {
    "text": "itself um we have this wonderful new uh Dom element binding that you can add to",
    "start": "1900960",
    "end": "1907120"
  },
  {
    "text": "any element on the page called The Phoenix viewport top element binding you",
    "start": "1907120",
    "end": "1912399"
  },
  {
    "text": "can probably guess what this does when the scroll reaches the top of the viewport of this particular element",
    "start": "1912399",
    "end": "1918480"
  },
  {
    "text": "live view will send the message that you specify and I in my case I called it load more it'll send that from the",
    "start": "1918480",
    "end": "1925360"
  },
  {
    "text": "client to the server all we need is an event handler for that load more event this will get invoked for us on the",
    "start": "1925360",
    "end": "1931880"
  },
  {
    "text": "server side if we Define it once that scroll top has been reached calling a helper method here called paginate",
    "start": "1931880",
    "end": "1938840"
  },
  {
    "text": "messages um that I wrote we're going to gloss over some of the details but basically the gist is um get the",
    "start": "1938840",
    "end": "1945480"
  },
  {
    "text": "previous 10 messages put them into the stream at zero means Preen them which is",
    "start": "1945480",
    "end": "1950639"
  },
  {
    "text": "what I want in my infinite scrollback um that's it calling stream 4 on an existing stream we'll do a bulk",
    "start": "1950639",
    "end": "1957480"
  },
  {
    "text": "insert for you um either at the beginning or the end depending on what option you provide it's going to leave",
    "start": "1957480",
    "end": "1963480"
  },
  {
    "text": "the existing items in place um that's it that is all you would have to do for infinite scrollback I'm going to",
    "start": "1963480",
    "end": "1969600"
  },
  {
    "text": "summarize that one more time because I think it is so amazing Phoenix viewport",
    "start": "1969600",
    "end": "1975399"
  },
  {
    "text": "top one single event handler infinite scroll back done you didn't have to write the JavaScript but it's there it's",
    "start": "1975399",
    "end": "1981440"
  },
  {
    "text": "running for you this is really just like some of the things that you can do with streams I've",
    "start": "1981440",
    "end": "1987679"
  },
  {
    "text": "just showed you the basics here uh what are a few of the other things that the API allows you to do that the API",
    "start": "1987679",
    "end": "1993399"
  },
  {
    "text": "supports you can reset a stream totally empty it out or completely override its content um this is pretty cool you can",
    "start": "1993399",
    "end": "1999880"
  },
  {
    "text": "limit a stream so that only a certain number of items are rendered at a time actually kind of essential if you're",
    "start": "1999880",
    "end": "2005039"
  },
  {
    "text": "doing an infinite scroll back or an infinite scroll down because you don't want to overwhelm the client and just",
    "start": "2005039",
    "end": "2010360"
  },
  {
    "text": "infinitely add 10 messages forever and ever you can say limit 50 and once",
    "start": "2010360",
    "end": "2015399"
  },
  {
    "text": "you've scrolled back enough times that you've hit 50 messages the live view client side code will start removing",
    "start": "2015399",
    "end": "2021840"
  },
  {
    "text": "from the bottom of the list but you could also Implement and Implement scroll forward so that you add them to",
    "start": "2021840",
    "end": "2027480"
  },
  {
    "text": "the bottom as well and your limit would ensure that things got removed from the top as the user Scrolls down only a",
    "start": "2027480",
    "end": "2033880"
  },
  {
    "text": "couple more lines of code to support um some pretty sophisticated functional",
    "start": "2033880",
    "end": "2039720"
  },
  {
    "start": "2040000",
    "end": "2096000"
  },
  {
    "text": "we're ready to wrap up so um like I said these are just some of the basic examples of how to use streams to manage",
    "start": "2040039",
    "end": "2046159"
  },
  {
    "text": "data in your live views we looked at some stream functionality under the hood just so that we could see how live view",
    "start": "2046159",
    "end": "2052158"
  },
  {
    "text": "handles the details so that you don't have to streams allow live you to handle really big data sets very efficiently",
    "start": "2052159",
    "end": "2059398"
  },
  {
    "text": "they're very declarative just like everything else in live you you don't have to worry about the details you don't have to worry about the boiler",
    "start": "2059399",
    "end": "2065158"
  },
  {
    "text": "plate you never have to tell live you how to do anything um you just have to tell it what to do",
    "start": "2065159",
    "end": "2070358"
  },
  {
    "text": "and it integrates really seamlessly with live us JavaScript offerings we got that infinite scroll back infinite scroll",
    "start": "2070359",
    "end": "2076520"
  },
  {
    "text": "forward with just a handful of lines of code um like I said you don't have to",
    "start": "2076520",
    "end": "2082480"
  },
  {
    "text": "teach live view how to operate you only ever tell it what to do add something to the stream update something remove it",
    "start": "2082480",
    "end": "2089679"
  },
  {
    "text": "overwrite it and so on the framework handles the hard",
    "start": "2089679",
    "end": "2094720"
  },
  {
    "text": "parts and that's it",
    "start": "2094720",
    "end": "2099078"
  }
]