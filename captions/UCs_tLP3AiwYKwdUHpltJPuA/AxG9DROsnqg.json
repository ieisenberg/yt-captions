[
  {
    "start": "0",
    "end": "309000"
  },
  {
    "text": "I just saw these no sequel search Road shows a lot of big names from nosql uh",
    "start": "40",
    "end": "5879"
  },
  {
    "text": "all throughout this year Munich Berlin San Francisco copenhagener cerdan London my former boss FAL little smart guy Jim",
    "start": "5879",
    "end": "13360"
  },
  {
    "text": "Weber from me for Jay among other luminaries speaking so I suggest you check that out um I'm Andy gross I'm",
    "start": "13360",
    "end": "22199"
  },
  {
    "text": "Chief Architect at Basho Technologies um you can get a copy of these slides that",
    "start": "22199",
    "end": "28720"
  },
  {
    "text": "link down there bitly so nosql arus it's actually hosted on riok so if you",
    "start": "28720",
    "end": "34079"
  },
  {
    "text": "download those slides you will be using ROK um uh my talk today is about uh the",
    "start": "34079",
    "end": "42039"
  },
  {
    "text": "Dynamo paper and what's happened in the years since it was published uh how many people are familiar with Amazon's Dynamo",
    "start": "42039",
    "end": "51239"
  },
  {
    "text": "paper all right um well no need and and this is",
    "start": "51440",
    "end": "57199"
  },
  {
    "text": "actually an interesting point because um every talk about Dynamo or any complex system for that matter um I've spent",
    "start": "57199",
    "end": "65478"
  },
  {
    "text": "I've spent the last five years giving talks about uh the database that my company produces which is inspired by",
    "start": "65479",
    "end": "70720"
  },
  {
    "text": "Amazon's Dynamo and it's always the same review over and over again and it's too information dense to um to really walk",
    "start": "70720",
    "end": "78400"
  },
  {
    "text": "away with too much uh Knowledge from it so I'll give a brief overview and and mainly talk about how how riok Works",
    "start": "78400",
    "end": "85240"
  },
  {
    "text": "which is our clone of this system but anyway back to Dynamo uh Dynamo was was",
    "start": "85240",
    "end": "90560"
  },
  {
    "text": "uh a paper published by Amazon in 2007 so it's a little over 5 years ago now um",
    "start": "90560",
    "end": "97720"
  },
  {
    "text": "and it describes a collection of techniques uh distributed systems techniques uh that Amazon used to create",
    "start": "97720",
    "end": "106280"
  },
  {
    "text": "a very high availability low latency key value storage system so by key value I",
    "start": "106280",
    "end": "112479"
  },
  {
    "text": "mean basically the API is that of a hash table you give it a key and you get uh",
    "start": "112479",
    "end": "117880"
  },
  {
    "text": "an Associated value back uh Dynamo didn't necessarily really introduce any new Concepts but rather it took a bunch",
    "start": "117880",
    "end": "124680"
  },
  {
    "text": "of techniques that had already been in the literature that had already been used in different areas of computing uh",
    "start": "124680",
    "end": "129959"
  },
  {
    "text": "and combine them together for the first time uh and if you haven't read the paper yet um it's one of the most",
    "start": "129959",
    "end": "136280"
  },
  {
    "text": "accessible sort of computer science papers that I've read it's really about um how they built this system it almost",
    "start": "136280",
    "end": "142599"
  },
  {
    "text": "reads like an implementor guide um it's not bogged down with with uh unnecessary",
    "start": "142599",
    "end": "148280"
  },
  {
    "text": "Theory um and I think that's why the paper was so influential because uh not",
    "start": "148280",
    "end": "153959"
  },
  {
    "text": "only is my company's database riok inspired by Dynamo but uh Apache",
    "start": "153959",
    "end": "159440"
  },
  {
    "text": "Cassandra uh Voldemort from LinkedIn uh and several other lesser known databases",
    "start": "159440",
    "end": "165800"
  },
  {
    "text": "uh are inspired by this paper along with a couple other papers that came out at",
    "start": "165800",
    "end": "171239"
  },
  {
    "text": "roughly the same time this is the the mid 2000s uh the Google big table paper",
    "start": "171239",
    "end": "177080"
  },
  {
    "text": "and the Google file system paper another two papers that sort of Spawn this um",
    "start": "177080",
    "end": "183200"
  },
  {
    "text": "nosql movement this this um you know sort of big collection explosion of uh",
    "start": "183200",
    "end": "189440"
  },
  {
    "text": "alternative databases that we've seen in the last five or six years uh one interesting fact that I",
    "start": "189440",
    "end": "195959"
  },
  {
    "text": "didn't know uh and if you're a fan of reading these research papers you'll notice Amazon doesn't publish a lot uh",
    "start": "195959",
    "end": "201760"
  },
  {
    "text": "that the authors nearly got fired uh for publishing this because it was giving away uh in the opinion of their CEO too",
    "start": "201760",
    "end": "208439"
  },
  {
    "text": "much of their secret sauce uh and I don't think they published a interesting paper",
    "start": "208439",
    "end": "214480"
  },
  {
    "text": "since um so how many have heard of RI all right so a little more um that's",
    "start": "214480",
    "end": "220760"
  },
  {
    "text": "cool actually usually it's the other way around more people have heard of Dynamo than RI um so riok uh is a Dynamo clone",
    "start": "220760",
    "end": "228519"
  },
  {
    "text": "there's this legend that I wrote it on the plane on the way to my job interview which is only half true I wrote something on the plane um and it didn't",
    "start": "228519",
    "end": "236400"
  },
  {
    "text": "work at my interview but uh I got I guess I got a for effort because they hired me anyway uh we call the code that",
    "start": "236400",
    "end": "242760"
  },
  {
    "text": "I write at bash show technical debt so I mostly talk nowadays um mostly llang any",
    "start": "242760",
    "end": "249680"
  },
  {
    "text": "erlang fans in the house that's fine uh but it's mostly",
    "start": "249680",
    "end": "255360"
  },
  {
    "text": "erlang and I'll get into some of the reasons why we chose ear Lang to write the database it's sort of an odd language Choice um but with a little bit",
    "start": "255360",
    "end": "262520"
  },
  {
    "text": "of c and C++ to uh uh interface with the very lowest levels the stuff that",
    "start": "262520",
    "end": "268639"
  },
  {
    "text": "touches the file system back in database drivers uh it's Apache 2 licensed uh",
    "start": "268639",
    "end": "274960"
  },
  {
    "text": "it's been around for a while as I said sort of first started on it in",
    "start": "274960",
    "end": "280639"
  },
  {
    "text": "2007 uh but we first released it in 2009 uh and we just released version",
    "start": "280639",
    "end": "286800"
  },
  {
    "text": "1.3 uh a few weeks ago um and nowadays it's had you know we",
    "start": "286800",
    "end": "293759"
  },
  {
    "text": "have a commercial entity around it and we have some pretty big customers about 10% of the fortune 5050 companies use it",
    "start": "293759",
    "end": "301720"
  },
  {
    "text": "chances are if you're active on the web or on your smartphone you're you're using it in some capacity without",
    "start": "301720",
    "end": "309720"
  },
  {
    "start": "309000",
    "end": "370000"
  },
  {
    "text": "KN um just a little bit about my company uh was founded late 2007 uh the original",
    "start": "309720",
    "end": "317280"
  },
  {
    "text": "people all worked at aamai the content delivery CDN company um and now we have",
    "start": "317280",
    "end": "322400"
  },
  {
    "text": "about 120 employees uh with offices all over the world um and the sponsors of the open",
    "start": "322400",
    "end": "328960"
  },
  {
    "text": "source theatri two license project uh and we also sell ROK Enterprise which is",
    "start": "328960",
    "end": "334840"
  },
  {
    "text": "riok open source plus the ability to replicate among many data centers not just two you need to do you have",
    "start": "334840",
    "end": "341039"
  },
  {
    "text": "customers that are replicating uh master master uh masterless rather uh among",
    "start": "341039",
    "end": "347680"
  },
  {
    "text": "five six data uh and we also sell uh clone of",
    "start": "347680",
    "end": "353080"
  },
  {
    "text": "Amazon S3 that's where the slides and that little bitly link are stored um but",
    "start": "353080",
    "end": "358440"
  },
  {
    "text": "you can uh buy it as a product running behind your own firewalls for cases where Amazon is too expensive or you",
    "start": "358440",
    "end": "364960"
  },
  {
    "text": "have security needs or latency needs that uh Amazon can't",
    "start": "364960",
    "end": "370680"
  },
  {
    "text": "satisfy so the principles in the Dynamo paper um",
    "start": "370759",
    "end": "376800"
  },
  {
    "text": "were to have a store that is uh a data store that's always writable um and this is sort of a business need that that",
    "start": "376800",
    "end": "383360"
  },
  {
    "text": "didn't exist for a lot of companies until the mid 2000s uh uh before before then their",
    "start": "383360",
    "end": "390120"
  },
  {
    "text": "needs were largely handled by relational databases um but leading up to Amazon publishing Dynamo or implementing Dynamo",
    "start": "390120",
    "end": "397599"
  },
  {
    "text": "there were a few very high-profile amazon.com outages in the holiday season that were all traceable back to some",
    "start": "397599",
    "end": "404680"
  },
  {
    "text": "failure of a relational database Oracle or MySQL or whatever um and the example",
    "start": "404680",
    "end": "411240"
  },
  {
    "text": "of what they were storing in Dynamo when they publish the paper was Amazon's shopping cart so when you think about it",
    "start": "411240",
    "end": "418520"
  },
  {
    "text": "um for a shopping cart it's much more important that um the database accept a",
    "start": "418520",
    "end": "425840"
  },
  {
    "text": "right than the database be consistent in other words um if you have",
    "start": "425840",
    "end": "431240"
  },
  {
    "text": "a cluster database and there's some sort of split brain syndrome going on and",
    "start": "431240",
    "end": "436759"
  },
  {
    "text": "databases can't necessarily agree when you're putting something into the database about what the correct value should be um it makes sense for Amazon",
    "start": "436759",
    "end": "445319"
  },
  {
    "text": "to accept that right and not drop whatever you trying to put in the shopping cart on the floor CU that would",
    "start": "445319",
    "end": "452199"
  },
  {
    "text": "be losing revenue for them right you always want to be able to write to this shopping cart even if you can't get the exact consistent state of it all the",
    "start": "452199",
    "end": "458639"
  },
  {
    "text": "time due to machines failing or network outages whatever um",
    "start": "458639",
    "end": "465879"
  },
  {
    "text": "so as long as the the shopping cart can always accept rights when you go to",
    "start": "465879",
    "end": "471240"
  },
  {
    "text": "check out then you use a more consistent mechanism where you get make sure all the machines agree on what's in the",
    "start": "471240",
    "end": "476400"
  },
  {
    "text": "shopping cart at the time of checkout but while a user shop you never want to say no I can't add",
    "start": "476400",
    "end": "481759"
  },
  {
    "text": "this to your shopping cart because one of the database servers is down that's a revenue loser for",
    "start": "481759",
    "end": "487759"
  },
  {
    "text": "Amazon uh and since then Amazon's not the first to have that problem but uh since then a lot of business on the web",
    "start": "487759",
    "end": "494560"
  },
  {
    "text": "is like this if you're in the business of displaying ads uh you don't want to",
    "start": "494560",
    "end": "499599"
  },
  {
    "text": "display an empty advertisement because of some problem in some remote machine",
    "start": "499599",
    "end": "505680"
  },
  {
    "text": "in your data center you always want to display something um so being able to always write to this",
    "start": "505680",
    "end": "512360"
  },
  {
    "text": "database even if half the nodes are down is one of the key sort of requirements from the",
    "start": "512360",
    "end": "518080"
  },
  {
    "text": "beginning um businesses on the web nowadays can get popular very quickly",
    "start": "518080",
    "end": "523839"
  },
  {
    "text": "virally as they say um and you don't necessarily uh want to lay out a bunch",
    "start": "523839",
    "end": "530160"
  },
  {
    "text": "of money for Hardware uh ahead of time you want to be able to incrementally scale as the",
    "start": "530160",
    "end": "536279"
  },
  {
    "text": "growth of your website scales so being able to add machine maches to the system",
    "start": "536279",
    "end": "541320"
  },
  {
    "text": "uh one at a time two at a time is very important um just to reemphasize this is",
    "start": "541320",
    "end": "547200"
  },
  {
    "text": "this is a fundamentally clustered database we don't sell RI uh in or people don't usually deploy riak in uh",
    "start": "547200",
    "end": "555000"
  },
  {
    "text": "node counts less than five so there's always five nodes here uh or more um",
    "start": "555000",
    "end": "561640"
  },
  {
    "text": "symmetrical decentralized heterogenous this means that all these",
    "start": "561640",
    "end": "566880"
  },
  {
    "text": "sort of uh at symmetrical and decentralized mean that that each node has the same task there's no master node",
    "start": "566880",
    "end": "574600"
  },
  {
    "text": "there's no slave node there's no special configuration node um every node is",
    "start": "574600",
    "end": "581120"
  },
  {
    "text": "exactly the same and if you've ever operated a business or a data center at scale uh this becomes very valuable",
    "start": "581120",
    "end": "588640"
  },
  {
    "text": "because when you got people messing around in a data center the chances that they spill their coffee on some machine",
    "start": "588640",
    "end": "595800"
  },
  {
    "text": "gets higher and higher over time uh or something bad happens to one machine and",
    "start": "595800",
    "end": "601279"
  },
  {
    "text": "if one of those if they spill their coffee on the master that's a big problem uh so why not just have no",
    "start": "601279",
    "end": "607720"
  },
  {
    "text": "master every machine in a cluster of riok machines or Dynamo machines if",
    "start": "607720",
    "end": "613600"
  },
  {
    "text": "we're talking about the paper um has the same exact role uh so that means you",
    "start": "613600",
    "end": "618839"
  },
  {
    "text": "don't have to monitor them in any sort of different way you don't have to be more concerned if one goes down and the",
    "start": "618839",
    "end": "623959"
  },
  {
    "text": "other uh from a client view of the of the uh database you can talk to any of",
    "start": "623959",
    "end": "629800"
  },
  {
    "text": "them as if they were the same uh it just makes things much simpler and cheaper to",
    "start": "629800",
    "end": "635279"
  },
  {
    "text": "operate um heterogenous meaning you know machines get more and more powerful",
    "start": "635279",
    "end": "640720"
  },
  {
    "text": "every year and if you start one year with you know a group of five machines and then you buy five more machines the",
    "start": "640720",
    "end": "646320"
  },
  {
    "text": "next year the database should be able to recognize and take advantage of the fact that these new machines are more",
    "start": "646320",
    "end": "652920"
  },
  {
    "text": "powerful and send more work to them or recognize that they have more resources",
    "start": "652920",
    "end": "658360"
  },
  {
    "text": "and and treat the recording L um and finally these kind of data stores are",
    "start": "658360",
    "end": "664480"
  },
  {
    "text": "typically the the things that sit at the bottom of a large sort of service oriented architecture stack when you go",
    "start": "664480",
    "end": "671920"
  },
  {
    "text": "to the front page of Amazon uh that page I think it's last I read 175 different",
    "start": "671920",
    "end": "679760"
  },
  {
    "text": "internal services that get called uh to render the front page of amazon.com all",
    "start": "679760",
    "end": "686120"
  },
  {
    "text": "of which have some persistent data store underneath them um so predictable",
    "start": "686120",
    "end": "693079"
  },
  {
    "text": "latency is very important if the latency of your database is all over the place it's not a suitable Foundation to build",
    "start": "693079",
    "end": "700079"
  },
  {
    "text": "a very large service oriented architecture um and this is accomplished",
    "start": "700079",
    "end": "709000"
  },
  {
    "text": "with several of these techniques all of which uh have appeared uh before in the",
    "start": "709000",
    "end": "714760"
  },
  {
    "text": "literature and to try to explain all of these in depth in the short amount of time I have would would uh would not",
    "start": "714760",
    "end": "720800"
  },
  {
    "text": "work so I'll cover them pretty briefly consistent hashing uh is one of them",
    "start": "720800",
    "end": "725880"
  },
  {
    "text": "that was a technique pioneered at aamai um and that's how they that's how uh aamai manages to",
    "start": "725880",
    "end": "734399"
  },
  {
    "text": "get the right data cached in the right places so everybody has a nice fast web experience without having to Cache",
    "start": "734399",
    "end": "741279"
  },
  {
    "text": "everything everywhere or without having to move tons of data around when new servers are added to the network uh aam",
    "start": "741279",
    "end": "749240"
  },
  {
    "text": "used it for web caching uh in ROK and in Dynamo uh we use it for uh figuring out",
    "start": "749240",
    "end": "756959"
  },
  {
    "text": "which machines a given object should live on one thing I should State up front is that in riok in addition you",
    "start": "756959",
    "end": "763240"
  },
  {
    "text": "know you're going to have at least five nodes uh every object is replicated three times by default um so it's a",
    "start": "763240",
    "end": "770880"
  },
  {
    "text": "database for critical data that that can't be lost Vector clocks are a way to",
    "start": "770880",
    "end": "777480"
  },
  {
    "text": "figure out uh how relate to each other uh since this database as I said before",
    "start": "777480",
    "end": "783560"
  },
  {
    "text": "will accept a write even if uh even if the network is partitioned or there are",
    "start": "783560",
    "end": "789079"
  },
  {
    "text": "machines down uh means that it favors availability over",
    "start": "789079",
    "end": "794680"
  },
  {
    "text": "consistency um favoring consistency is something that traditional databases do if you have a traditional clustered",
    "start": "794680",
    "end": "801240"
  },
  {
    "text": "Oracle system or myol system and you want to write something to it if the",
    "start": "801240",
    "end": "806920"
  },
  {
    "text": "database in that case can't guar guarantee that every member of its",
    "start": "806920",
    "end": "812560"
  },
  {
    "text": "cluster agrees on the same value uh then it will refuse the right because the",
    "start": "812560",
    "end": "817920"
  },
  {
    "text": "chance then it opens a chance that you know some node in that system that's",
    "start": "817920",
    "end": "823040"
  },
  {
    "text": "partitioned off will serve old data and traditional database systems uh value",
    "start": "823040",
    "end": "829560"
  },
  {
    "text": "consistency overs um Vector clocks since there can be Divergent copies of data in RAC uh",
    "start": "829560",
    "end": "837279"
  },
  {
    "text": "are basically just a way to figure out how objects are related if one is an ancestor of the other or one is",
    "start": "837279",
    "end": "844720"
  },
  {
    "text": "logically concurrent I guess a good analogy here is if you use git or",
    "start": "844720",
    "end": "850120"
  },
  {
    "text": "Mercurial uh and you try to merge a branch into your code that you've already merged in it knows that and it's",
    "start": "850120",
    "end": "856639"
  },
  {
    "text": "just a know up or if you try to merge a branch in sometimes it merges cleanly",
    "start": "856639",
    "end": "861920"
  },
  {
    "text": "because the changes don't conflict uh but sometimes two people have edited the same thing and you get a merge conflict",
    "start": "861920",
    "end": "868360"
  },
  {
    "text": "and you have to go in and fix it um Vector clocks provide the same sort of infrastructure and the same properties",
    "start": "868360",
    "end": "875639"
  },
  {
    "text": "for different copies of the same data in a distributed database like this uh re",
    "start": "875639",
    "end": "881839"
  },
  {
    "text": "repair anti-entropy hinted handoff gossip protocol uh I have um slides for",
    "start": "881839",
    "end": "888519"
  },
  {
    "text": "and I'll I won't explain them here because I want to respect the time limits",
    "start": "888519",
    "end": "894519"
  },
  {
    "start": "892000",
    "end": "1037000"
  },
  {
    "text": "so hinted handoff um",
    "start": "894519",
    "end": "900040"
  },
  {
    "text": "so we're dealing with a cluster database here we're dealing with many nodes um",
    "start": "900040",
    "end": "905560"
  },
  {
    "text": "this database is exposing a key value API um how do we decide where data uh",
    "start": "905560",
    "end": "914440"
  },
  {
    "text": "lives in this database um it's a technique called consistent hashing and what this ring",
    "start": "914440",
    "end": "921079"
  },
  {
    "text": "represents here um is say sha one hash function this is the",
    "start": "921079",
    "end": "929480"
  },
  {
    "text": "hash function we use in RAC uh the range of that function is from 0 to 2 to the",
    "start": "929480",
    "end": "935839"
  },
  {
    "text": "1608 which is a big enormous integer that's the range of numbers that that function can produce given whatever",
    "start": "935839",
    "end": "942319"
  },
  {
    "text": "arbitrary input the way we decide where data lives scoot over here for a second to",
    "start": "942319",
    "end": "948839"
  },
  {
    "text": "illustrate this is if we envision that space an integer range zero on this side",
    "start": "948839",
    "end": "955839"
  },
  {
    "text": "2 to the 1 160th over here um as a circle so zero is at the top as is",
    "start": "955839",
    "end": "962240"
  },
  {
    "text": "2 to the 160th so this is 2 160th over 4 2 1 16 over two Etc right so just",
    "start": "962240",
    "end": "970720"
  },
  {
    "text": "basically take an integer range and wrap it around like a circle um",
    "start": "970720",
    "end": "976759"
  },
  {
    "text": "then as you hash keys so just keys in a hash table they're going to end up",
    "start": "976759",
    "end": "982279"
  },
  {
    "text": "somewhere between that range because that's the range of the hash function and then you visualize where that is on",
    "start": "982279",
    "end": "987560"
  },
  {
    "text": "the circle so hashing of the key you know goto is some arbitrary large",
    "start": "987560",
    "end": "994920"
  },
  {
    "text": "integer and say it ends up here these colored slices here represent different",
    "start": "994920",
    "end": "1000199"
  },
  {
    "text": "nodes in the system so if it ends up here you say oh Pink's the primary node",
    "start": "1000199",
    "end": "1005600"
  },
  {
    "text": "for it and then we walk around clockwise and we get green and orange uh so that's",
    "start": "1005600",
    "end": "1012880"
  },
  {
    "text": "why it's consistent that's why they call it consistent is because you can add nodes in here uh and they just claim",
    "start": "1012880",
    "end": "1019560"
  },
  {
    "text": "different little pieces of this and that means that there's not going to be a complete rebalancing of data when you",
    "start": "1019560",
    "end": "1024918"
  },
  {
    "text": "add nodes but rather only little pieces where the new machines come in in claim",
    "start": "1024919",
    "end": "1030400"
  },
  {
    "text": "space it's a complicated uh concept but that's roughly how it",
    "start": "1030400",
    "end": "1037038"
  },
  {
    "start": "1037000",
    "end": "1109000"
  },
  {
    "text": "happens so say a node fails say the green node blows up",
    "start": "1037039",
    "end": "1042240"
  },
  {
    "text": "right and then you want to Hash this key blocks SL",
    "start": "1042240",
    "end": "1047918"
  },
  {
    "text": "this big uui well when you hash that the value lands here and again we replicate three times",
    "start": "1047919",
    "end": "1056280"
  },
  {
    "text": "so we're going uh the normal places this this data would live would be on this one this one and this one but this one's",
    "start": "1056280",
    "end": "1063400"
  },
  {
    "text": "down very simple no problem we just skip over it and pick the next one on the",
    "start": "1063400",
    "end": "1068760"
  },
  {
    "text": "ring normally the data wouldn't live here uh but any of these nodes can take",
    "start": "1068760",
    "end": "1074280"
  },
  {
    "text": "requests for any uh any of the other ones so they sort of",
    "start": "1074280",
    "end": "1079400"
  },
  {
    "text": "compensate for each other uh when things go down uh and then if you were going to read that data again the read request",
    "start": "1079400",
    "end": "1086480"
  },
  {
    "text": "would see that this guy's down and it would read it from here instead um this all works out uh you know sort of very",
    "start": "1086480",
    "end": "1094080"
  },
  {
    "text": "nicely in Failure scenarios nodes can go down other nodes pick up the rights for them it's sort of like when you go on",
    "start": "1094080",
    "end": "1100200"
  },
  {
    "text": "vacation your neighbor picks up your mail for you right so your mailbox doesn't fill up uh and then when you get",
    "start": "1100200",
    "end": "1106120"
  },
  {
    "text": "back he gives the mail back to you um this is exactly what happens in react so if the node comes",
    "start": "1106120",
    "end": "1112520"
  },
  {
    "start": "1109000",
    "end": "1120000"
  },
  {
    "text": "back this guy knows that he picked up the mail for this one and he hands it",
    "start": "1112520",
    "end": "1118080"
  },
  {
    "text": "off and then as requests come in the normal operations resume and it",
    "start": "1118080",
    "end": "1124799"
  },
  {
    "start": "1120000",
    "end": "1143000"
  },
  {
    "text": "goes back to the original replicas so this is a common theme data is always replicated many times uh nodes can fail",
    "start": "1124799",
    "end": "1132919"
  },
  {
    "text": "and we still maintain that three replica count um so you can lose two nodes uh",
    "start": "1132919",
    "end": "1141360"
  },
  {
    "text": "and still have a copy of your data left um very quickly the",
    "start": "1141360",
    "end": "1148640"
  },
  {
    "start": "1143000",
    "end": "1160000"
  },
  {
    "text": "uh this is how a request sort of plays out in ROK and this exposes some cool",
    "start": "1148640",
    "end": "1153799"
  },
  {
    "text": "things about the the Dynamo concept how we've implemented in ROK and um some",
    "start": "1153799",
    "end": "1159039"
  },
  {
    "text": "kind of cool things about the erline VM as well so riak has clients you can talk to",
    "start": "1159039",
    "end": "1166000"
  },
  {
    "start": "1160000",
    "end": "1204000"
  },
  {
    "text": "riak over HTTP you can talk to riak over over a protocol buffers interface we ship clients",
    "start": "1166000",
    "end": "1173240"
  },
  {
    "text": "inet uh Ruby Java Scola hasal",
    "start": "1173240",
    "end": "1178919"
  },
  {
    "text": "go and a bunch of you know pretty much any uh modern language you can find a",
    "start": "1178919",
    "end": "1185360"
  },
  {
    "text": "client or if you want to use the HTTP interface any language that can speak HTTP can be a client for",
    "start": "1185360",
    "end": "1193120"
  },
  {
    "text": "you so you he we're in the client's process space the client says and this",
    "start": "1193120",
    "end": "1198840"
  },
  {
    "text": "example it looks like we're storing blocks of some file or whatever uh the client issues the request to",
    "start": "1198840",
    "end": "1206240"
  },
  {
    "start": "1204000",
    "end": "1254000"
  },
  {
    "text": "riok uh the cool thing about erlang is that you can spawn many many processes",
    "start": "1206240",
    "end": "1213440"
  },
  {
    "text": "they call them processes in llang they behave like threads um but they're not as heavyweight as an operating system",
    "start": "1213440",
    "end": "1219760"
  },
  {
    "text": "thread so on my laptop there I could probably spawn a million erlang",
    "start": "1219760",
    "end": "1225039"
  },
  {
    "text": "processes in one VM Without The Machine breaking a sweat so so what we can do uh",
    "start": "1225039",
    "end": "1230120"
  },
  {
    "text": "because of that architecture is actually represent individual concurrent events",
    "start": "1230120",
    "end": "1235480"
  },
  {
    "text": "or processes as uh individual threads without the Need For Thread pools or",
    "start": "1235480",
    "end": "1241640"
  },
  {
    "text": "multiplexing different logical events across you know a a smaller pool of",
    "start": "1241640",
    "end": "1247000"
  },
  {
    "text": "threads it leads to a very clean programming model so the client requesting this key",
    "start": "1247000",
    "end": "1253960"
  },
  {
    "text": "we spawn a process to handle the request um and we do this hash lookup",
    "start": "1253960",
    "end": "1261280"
  },
  {
    "start": "1254000",
    "end": "1271000"
  },
  {
    "text": "where it finds out where on the ring uh the data lives and that results in the",
    "start": "1261280",
    "end": "1267000"
  },
  {
    "text": "10 11 and 12 just those are the the replicas all right so then you have the cluster here",
    "start": "1267000",
    "end": "1274559"
  },
  {
    "start": "1271000",
    "end": "1291000"
  },
  {
    "text": "and that's just sort of zoomed in on one part of that ring um and we have 10 11 and 12 these are the ones responsible",
    "start": "1274559",
    "end": "1280720"
  },
  {
    "text": "for it so this little request handling process broadcast out to all those three",
    "start": "1280720",
    "end": "1286559"
  },
  {
    "text": "replicas hey give me SL big U",
    "start": "1286559",
    "end": "1292360"
  },
  {
    "start": "1291000",
    "end": "1347000"
  },
  {
    "text": "ID um this is a feature of Dynamo and RAC that I won't get too far into um but",
    "start": "1292360",
    "end": "1299440"
  },
  {
    "text": "you can specify on a per request basis how many uh of these replicas you want",
    "start": "1299440",
    "end": "1305200"
  },
  {
    "text": "to respond before you consider the request successful um so by tweaking that you",
    "start": "1305200",
    "end": "1311679"
  },
  {
    "text": "can tolerate more machines going down if you were to say only ask for one it would respond with the first the first",
    "start": "1311679",
    "end": "1318200"
  },
  {
    "text": "replic that responded if you say two which is the default it'll wait for two",
    "start": "1318200",
    "end": "1323360"
  },
  {
    "text": "and do some reconciliation on the values in case they're Divergent uh to make sure you get a more consistent answer",
    "start": "1323360",
    "end": "1329960"
  },
  {
    "text": "and not a stale one the lower that value is the higher the chance that you're going to get a stale response basically",
    "start": "1329960",
    "end": "1336320"
  },
  {
    "text": "because we don't insist on everyone agreeing at right time so 10 responds with version",
    "start": "1336320",
    "end": "1344360"
  },
  {
    "text": "one 12 responds with version two um",
    "start": "1344360",
    "end": "1349600"
  },
  {
    "start": "1347000",
    "end": "1391000"
  },
  {
    "text": "I won't make Gary move the camera um when I was talking about Vector clocks",
    "start": "1349600",
    "end": "1354880"
  },
  {
    "text": "before um consider these I'll make I'll use the git branching analogy",
    "start": "1354880",
    "end": "1361240"
  },
  {
    "text": "um what these Vector clocks can tell this process is that V1 has already been",
    "start": "1361240",
    "end": "1368240"
  },
  {
    "text": "merged into V2 it's like if you tried to if you were doing a git merge and you merge the same Branch twice the second",
    "start": "1368240",
    "end": "1374320"
  },
  {
    "text": "one would be a noop and that's what the vector clock data stru rure lets us do",
    "start": "1374320",
    "end": "1380159"
  },
  {
    "text": "um so here we know that V2 is the upto-date version uh the other node had a stale",
    "start": "1380159",
    "end": "1387159"
  },
  {
    "text": "one because maybe it was down when it was last written and it's just come up and given us a stale answer back so we",
    "start": "1387159",
    "end": "1393440"
  },
  {
    "start": "1391000",
    "end": "1418000"
  },
  {
    "text": "know we choose the correct one the clients told us that it only wants to wait for two responses out of the three",
    "start": "1393440",
    "end": "1399880"
  },
  {
    "text": "that it uh that it could wait for if it asked for three then it couldn't tolerate any nodes being down",
    "start": "1399880",
    "end": "1405880"
  },
  {
    "text": "because we replicate three times and it's ask so now we reply with V2 to the client",
    "start": "1405880",
    "end": "1411880"
  },
  {
    "text": "and it goes on its merry way it's doing something with this result or it's you processing another request or",
    "start": "1411880",
    "end": "1418760"
  },
  {
    "start": "1418000",
    "end": "1536000"
  },
  {
    "text": "whatever but recall that we have this thing called read repair so remember",
    "start": "1418760",
    "end": "1426360"
  },
  {
    "text": "this 10 gave us version one it was out of date for whatever reason 12 gave us version",
    "start": "1426360",
    "end": "1432440"
  },
  {
    "text": "two this process even though it's returned to the client is still sticking around because it has work to do",
    "start": "1432440",
    "end": "1441200"
  },
  {
    "text": "um riak and Dynamo are eventually consistent databases not immediately",
    "start": "1441200",
    "end": "1446600"
  },
  {
    "text": "consistent or strictly consistent that's a scary word uh but eventual doesn't mean when we get around to it or we may",
    "start": "1446600",
    "end": "1452559"
  },
  {
    "text": "never get around to it it means that um as soon as it's possible to get around",
    "start": "1452559",
    "end": "1459200"
  },
  {
    "text": "to it we do it except we just don't stop the world if we can't do it at a certain",
    "start": "1459200",
    "end": "1465000"
  },
  {
    "text": "time we always favor giving you the latest value or accepting the right uh even if we know",
    "start": "1465000",
    "end": "1472840"
  },
  {
    "text": "not everybody's going to agree on it um so this is a very fun if you heard of the cap theorem this is a very this is",
    "start": "1472840",
    "end": "1479399"
  },
  {
    "text": "the essence of the cap theorem here is that you really have to choose between consistency you know being up to date",
    "start": "1479399",
    "end": "1486039"
  },
  {
    "text": "all the time and availability being able to accept requests all the time so we've",
    "start": "1486039",
    "end": "1491120"
  },
  {
    "text": "already returned to the client but we have work to do uh since we're eventually consistent we take every chance that we get to bring our database",
    "start": "1491120",
    "end": "1498480"
  },
  {
    "text": "towards consistency um we've replied with V2 and say the other guy and we always",
    "start": "1498480",
    "end": "1505960"
  },
  {
    "text": "wait for that third response so here even though two replicas were out of date we could use the vector clocks to",
    "start": "1505960",
    "end": "1511919"
  },
  {
    "text": "determine that this was the correct answer uh and then since we know that V1 was already",
    "start": "1511919",
    "end": "1519799"
  },
  {
    "text": "merged into our new object we opportunistically and asynchronously the",
    "start": "1519799",
    "end": "1526120"
  },
  {
    "text": "client's not waiting for any of this to happen we repair the stale replicas so now we're consistent um as a side effect",
    "start": "1526120",
    "end": "1534039"
  },
  {
    "text": "of doing a read of the data um just to go into the architecture",
    "start": "1534039",
    "end": "1540760"
  },
  {
    "start": "1536000",
    "end": "1553000"
  },
  {
    "text": "a little bit I know I'm going really fast this stuff um uh our website is",
    "start": "1540760",
    "end": "1546440"
  },
  {
    "text": "bachelor.com you can uh read all about this stuff there yes what if node 11 had",
    "start": "1546440",
    "end": "1552240"
  },
  {
    "text": "return version three instead you would have served the client version two but you're still having a version three uh",
    "start": "1552240",
    "end": "1558320"
  },
  {
    "start": "1553000",
    "end": "1639000"
  },
  {
    "text": "if the not yes yep and that's eventual consistency for you um but but then we",
    "start": "1558320",
    "end": "1564399"
  },
  {
    "text": "will update the two other to version three even though you have given the client version two we yeah we've given the client version two um but the next",
    "start": "1564399",
    "end": "1572320"
  },
  {
    "text": "client is going to read version three so uh let me give a analogy to that say you",
    "start": "1572320",
    "end": "1579520"
  },
  {
    "text": "update your avatar on some sort of uh social network site right and then it takes you back to your profile and you",
    "start": "1579520",
    "end": "1585880"
  },
  {
    "text": "still see the old Avatar um that's a normal that's within the realm of",
    "start": "1585880",
    "end": "1591799"
  },
  {
    "text": "acceptable user experiences or you add something to your Amazon shopping cart and it takes it back and you look at it",
    "start": "1591799",
    "end": "1598559"
  },
  {
    "text": "again and it's not there and you refresh the page you've seen this kind of thing happen on the web or you",
    "start": "1598559",
    "end": "1604120"
  },
  {
    "text": "change um you change a DNS entry and it takes a couple minutes to propagate",
    "start": "1604120",
    "end": "1610559"
  },
  {
    "text": "these are all examples of eventual consistency in the real world that we've",
    "start": "1610559",
    "end": "1616279"
  },
  {
    "text": "come to deal with it's not right for every sing scenario uh but in situations",
    "start": "1616279",
    "end": "1621399"
  },
  {
    "text": "where uh availability is important uh being able to tolerate failure is",
    "start": "1621399",
    "end": "1626960"
  },
  {
    "text": "important um there's there's ways to make it",
    "start": "1626960",
    "end": "1632679"
  },
  {
    "text": "work um so rea's written in llang uh there's two client uh apis hdp and",
    "start": "1632679",
    "end": "1640120"
  },
  {
    "text": "protocol buffers um theang VM is really cool because it allows us to spe to model",
    "start": "1640120",
    "end": "1647320"
  },
  {
    "text": "concurrent activ ities as actually concurrent processes uh if you're writing in Java you're probably not",
    "start": "1647320",
    "end": "1654679"
  },
  {
    "text": "going to you're not going to write a scalable web server by when the request comes in spawning a new thread for every",
    "start": "1654679",
    "end": "1661240"
  },
  {
    "text": "request you're going to probably have a thread pool and put request in some sort",
    "start": "1661240",
    "end": "1666960"
  },
  {
    "text": "of queue and the queue handles it and then you have another queue to get the response back Etc we can actually just",
    "start": "1666960",
    "end": "1672840"
  },
  {
    "text": "launch a thread for each one and not care too much about it um and there's a different kind of state Machine model as",
    "start": "1672840",
    "end": "1679880"
  },
  {
    "text": "a process for every different request type so it's a key Value Store the API is pretty simple there's get put and",
    "start": "1679880",
    "end": "1686320"
  },
  {
    "text": "delete just like you'd have in a hash table when your favorite language um but",
    "start": "1686320",
    "end": "1692279"
  },
  {
    "text": "we also have extras like M ruce um and some other ones that I'll get to later",
    "start": "1692279",
    "end": "1697559"
  },
  {
    "start": "1697000",
    "end": "1714000"
  },
  {
    "text": "on um the real cool thing though is that this is a clustered system there's uh we",
    "start": "1697559",
    "end": "1704919"
  },
  {
    "text": "have Rea clusters I mean you can make one as small has two nodes we have customers with react clusters that are",
    "start": "1704919",
    "end": "1712000"
  },
  {
    "text": "150 200 nodes large and all the complexity of handling that clustered",
    "start": "1712000",
    "end": "1717559"
  },
  {
    "start": "1714000",
    "end": "1777000"
  },
  {
    "text": "stuff and there's a lot of it um all that logic around taking responsibility",
    "start": "1717559",
    "end": "1723640"
  },
  {
    "text": "for other nodes data when they go down uh the whole notion of just membership",
    "start": "1723640",
    "end": "1729120"
  },
  {
    "text": "how do the nodes know about each other how do the nodes know how to route requests Etc uh is handled in this",
    "start": "1729120",
    "end": "1734960"
  },
  {
    "text": "Library called RAC core which is the whole Dynamo model this Loosely coupled",
    "start": "1734960",
    "end": "1741200"
  },
  {
    "text": "eventually consistent distributed system but this layer here has no idea that",
    "start": "1741200",
    "end": "1746440"
  },
  {
    "text": "it's participating in a database it just implements the sort of data structures and algorithms and stuff that um that",
    "start": "1746440",
    "end": "1754480"
  },
  {
    "text": "the Dynamo paper talks about but doesn't really uh insist on a use case around it",
    "start": "1754480",
    "end": "1760039"
  },
  {
    "text": "so the code up here on this side um doesn't really have to be written in a",
    "start": "1760039",
    "end": "1766720"
  },
  {
    "text": "complicated distributed system manner it it says Hey react core you know about the cluster and all these nodes here's a",
    "start": "1766720",
    "end": "1773320"
  },
  {
    "text": "request distribute it in the right way to the right nodes in the system Rea",
    "start": "1773320",
    "end": "1778880"
  },
  {
    "text": "core handles that um and then on the bottom it's an interesting way to use a library because",
    "start": "1778880",
    "end": "1784799"
  },
  {
    "text": "you sort of have to plug into it on the top and bottom um there's a process running for every",
    "start": "1784799",
    "end": "1792519"
  },
  {
    "text": "little piece of the pie in that ring and those carry out the actions locally on the the cluster so from the",
    "start": "1792519",
    "end": "1799240"
  },
  {
    "text": "top you say here cluster do something the cluster said the this where all the complexity is hidden says okay this has",
    "start": "1799240",
    "end": "1806720"
  },
  {
    "text": "to go to nodes A and C here nodes A and C here's some work and then nodes A and",
    "start": "1806720",
    "end": "1812600"
  },
  {
    "text": "C just carry out that work locally so neither part each part is sort of",
    "start": "1812600",
    "end": "1817679"
  },
  {
    "text": "ignorant of the fact that there's this complicated distributed systems going on the way we factored it um and there's a",
    "start": "1817679",
    "end": "1824559"
  },
  {
    "text": "JavaScript runtime in there because not everybody likes irang and you can write your map rce jobs and all the custom",
    "start": "1824559",
    "end": "1830279"
  },
  {
    "text": "stuff in in JavaScript as well um so riia core there's actually",
    "start": "1830279",
    "end": "1838159"
  },
  {
    "text": "um several companies most of them sort of adventurous earling shops that uh",
    "start": "1838159",
    "end": "1844279"
  },
  {
    "text": "have built custom non- database high performance reliable apps just using the ri core part of our",
    "start": "1844279",
    "end": "1851320"
  },
  {
    "start": "1848000",
    "end": "1866000"
  },
  {
    "text": "architecture um so this talk is really and I'm about 10 minutes I'm going to sort of blast through this stuff but",
    "start": "1851320",
    "end": "1857760"
  },
  {
    "text": "that sounds great but I saw people get visibly uncomfortable when I talked about some of the concepts here and you",
    "start": "1857760",
    "end": "1862960"
  },
  {
    "text": "weren't wrong to do that uh because um some of them are extremely uncomfortable",
    "start": "1862960",
    "end": "1870159"
  },
  {
    "start": "1866000",
    "end": "2029000"
  },
  {
    "text": "they're necessary compromises if you want that extremely high availability but sometimes it's worth giving up a",
    "start": "1870159",
    "end": "1876799"
  },
  {
    "text": "little bit of that just for some sanity in how you develop against this thing um eventual consistency can really",
    "start": "1876799",
    "end": "1884960"
  },
  {
    "text": "suck um what can happen with eventual consistency uh that example where we had version one",
    "start": "1884960",
    "end": "1891200"
  },
  {
    "text": "two and three or you suggested version three we had versions one and two was the easy one where we could pick a clear",
    "start": "1891200",
    "end": "1897600"
  },
  {
    "text": "winner we didn't cover the case where just going back to the git metaphor there was a merge conflict if that were",
    "start": "1897600",
    "end": "1904000"
  },
  {
    "text": "to happen you would ask for you know key K and you'd get two values",
    "start": "1904000",
    "end": "1910399"
  },
  {
    "text": "back like what if you want to do like select one row from a database you",
    "start": "1910399",
    "end": "1915760"
  },
  {
    "text": "normally get one row right um um what that indicates is that say half your",
    "start": "1915760",
    "end": "1921639"
  },
  {
    "text": "nodes were split from each other and you had somebody update say it was a grocery list the nodes were fine initially and",
    "start": "1921639",
    "end": "1929120"
  },
  {
    "text": "you added milk to the grocery list okay cool everybody agrees then a switch dies and half your nodes are on this side",
    "start": "1929120",
    "end": "1935120"
  },
  {
    "text": "half your nodes are on this side and but you have clients talking to both sides",
    "start": "1935120",
    "end": "1940320"
  },
  {
    "text": "uh and then someone on this side says add eggs so now this side has milk and eggs and someone on this side says add",
    "start": "1940320",
    "end": "1947919"
  },
  {
    "text": "cereal so this side has milk and cereal right if we insisted on consistency both",
    "start": "1947919",
    "end": "1955200"
  },
  {
    "text": "of these sides when you went to add either the eggs or the cereal would say nope I can't talk to the other guy who",
    "start": "1955200",
    "end": "1961320"
  },
  {
    "text": "has the rest of the list and this is going to lead to an inconsistent situation but instead we say no we",
    "start": "1961320",
    "end": "1967360"
  },
  {
    "text": "always want to be able to add to this grocery list both sides uh accept the",
    "start": "1967360",
    "end": "1972600"
  },
  {
    "text": "right uh so then the partition heals and you go to read the contents of your grocery list and what what you get is",
    "start": "1972600",
    "end": "1978360"
  },
  {
    "text": "two values one of them says milk and eggs one of them says milk and cereal uh this is actually a really easy",
    "start": "1978360",
    "end": "1985360"
  },
  {
    "text": "conflict resolution scenario because you can just Union those two sets together and get milk eggs and cereal um but",
    "start": "1985360",
    "end": "1992279"
  },
  {
    "text": "that's a simple case uh it very quickly gets difficult to model more complex",
    "start": "1992279",
    "end": "1998440"
  },
  {
    "text": "data structures than that using this uh and more importantly uh it takes all that",
    "start": "1998440",
    "end": "2004919"
  },
  {
    "text": "consistency responsibility and gives it to the client you have to resolve conflicts on on behalf of the",
    "start": "2004919",
    "end": "2010720"
  },
  {
    "text": "database uh and the key value model is limited in what you can model with it right there's if it doesn't look like a",
    "start": "2010720",
    "end": "2017440"
  },
  {
    "text": "hash table then you have to jump through two more Hoops to model it on a database who exposes the API of hash",
    "start": "2017440",
    "end": "2023559"
  },
  {
    "text": "table um I won't go through some of the other ones just uh out of time but",
    "start": "2023559",
    "end": "2030519"
  },
  {
    "start": "2029000",
    "end": "2112000"
  },
  {
    "text": "uh talking uh uh a little more about the just the limits of the data",
    "start": "2030519",
    "end": "2036399"
  },
  {
    "text": "model the the good part is you don't have to do that uh along with all that",
    "start": "2036399",
    "end": "2042159"
  },
  {
    "text": "nice Vector clock information we also record a regular old timestamp and the",
    "start": "2042159",
    "end": "2047799"
  },
  {
    "text": "default behavior is just to return the one that has the newest wall clock",
    "start": "2047799",
    "end": "2053320"
  },
  {
    "text": "timestamp so in that case if the person adding cereal didn't last according to",
    "start": "2053320",
    "end": "2059440"
  },
  {
    "text": "physical time the result would be eggs and cereal but the the milk or whatever",
    "start": "2059440",
    "end": "2066599"
  },
  {
    "text": "was written on the other side would gotten lost right and if you go through this in your head there's no way about",
    "start": "2066599",
    "end": "2072760"
  },
  {
    "text": "it we could have either denied the right with that Network partition going on or lost some data in the case of making it",
    "start": "2072760",
    "end": "2079638"
  },
  {
    "text": "a little easier or dealt with the conflicting persons",
    "start": "2079639",
    "end": "2085118"
  },
  {
    "text": "um it's even more of a pain if you're a shop that uses many languages because then you have to write this logic many",
    "start": "2085119",
    "end": "2091878"
  },
  {
    "text": "times um and there's several solutions that have been proposed to this uh bump",
    "start": "2091879",
    "end": "2098079"
  },
  {
    "text": "which is a iPhone contact sharing app they wrote a proxy that implements all",
    "start": "2098079",
    "end": "2103440"
  },
  {
    "text": "this logic and then all their clients talk to that proxy and uh you don't have to reimplement rewrite that conflict",
    "start": "2103440",
    "end": "2110240"
  },
  {
    "text": "resion logic all over um one great use for this kind of",
    "start": "2110240",
    "end": "2117440"
  },
  {
    "start": "2112000",
    "end": "2241000"
  },
  {
    "text": "system though is for immutable data in other words data that only gets written once and never gets changed again um Pat",
    "start": "2117440",
    "end": "2125359"
  },
  {
    "text": "Helen big distributed system sort of P says uh accountants don't use erasers",
    "start": "2125359",
    "end": "2132800"
  },
  {
    "text": "when people want to shoot down the notion of eventually consistent databases they always say well you",
    "start": "2132800",
    "end": "2138240"
  },
  {
    "text": "couldn't Implement a banking system with this and if you've worked with financial systems you know that's wrong because",
    "start": "2138240",
    "end": "2145560"
  },
  {
    "text": "when you debit money from an account it's not a destructive uh it's not like there's a",
    "start": "2145560",
    "end": "2151400"
  },
  {
    "text": "row in a database with balance and we forever just change it no you have",
    "start": "2151400",
    "end": "2156520"
  },
  {
    "text": "another event or another object that gets created that's a debit and then everything gets reconciled at some point",
    "start": "2156520",
    "end": "2162240"
  },
  {
    "text": "in the future accountants don't use erasers P Helen's quote to uh talk about this if your ATM machine can't talk to",
    "start": "2162240",
    "end": "2170680"
  },
  {
    "text": "uh its home base what it actually does a lot of times it says all right I'll give him 200 bucks or I'll you",
    "start": "2170680",
    "end": "2178079"
  },
  {
    "text": "know I I'll feel safe giving you some amount of money uh and uh debit it later",
    "start": "2178079",
    "end": "2185599"
  },
  {
    "text": "if uh you know if the financial world didn't use eventual consistency then it would be impossible to bounce a",
    "start": "2185599",
    "end": "2193480"
  },
  {
    "text": "check um but if the data that you're writing never changes uh then you don't have to worry",
    "start": "2193480",
    "end": "2199680"
  },
  {
    "text": "about those conflicts you're never going to get two values back because nobody's ever changing the data um and you don't need to wait",
    "start": "2199680",
    "end": "2207119"
  },
  {
    "text": "around like we did in that example for all the versions to come back because there's only ever going to be one version so one technique for dealing",
    "start": "2207119",
    "end": "2215960"
  },
  {
    "text": "with uh for using these eventually consistent stores is just don't change",
    "start": "2215960",
    "end": "2221079"
  },
  {
    "text": "data simply create a new copy and have a pointer to it right uh the problem then",
    "start": "2221079",
    "end": "2227280"
  },
  {
    "text": "becomes how do you get rid of the old pointers that point to data that's now stale uh but that's at least that's the",
    "start": "2227280",
    "end": "2234480"
  },
  {
    "text": "databases problem now n years you have to make a distributed garbage collector which is very hard but at least we've",
    "start": "2234480",
    "end": "2241000"
  },
  {
    "start": "2241000",
    "end": "2337000"
  },
  {
    "text": "taken that problem on the user hands um so in the several years since",
    "start": "2241000",
    "end": "2247319"
  },
  {
    "text": "these these kind of databases became popular people have recognized these pains and they've come up the research",
    "start": "2247319",
    "end": "2252440"
  },
  {
    "text": "Community has come up with some solutions uh one of them is crdts uh conflict free or commutative",
    "start": "2252440",
    "end": "2259000"
  },
  {
    "text": "depending on what paper you're reading replicated data types all that really means is on it's doing on the server",
    "start": "2259000",
    "end": "2266240"
  },
  {
    "text": "what you would normally have to do on the client to resolve these things and how this usually",
    "start": "2266240",
    "end": "2271839"
  },
  {
    "text": "looks is basically instead of treating a value as just a materialized value",
    "start": "2271839",
    "end": "2277960"
  },
  {
    "text": "you treat it as an operation log and you run if you're familiar with cqrs or event sourcing this is going to sound",
    "start": "2277960",
    "end": "2284480"
  },
  {
    "text": "familiar you basically to arrive at the value you start with some sort of cached",
    "start": "2284480",
    "end": "2289960"
  },
  {
    "text": "snapshot of it and then you apply the operations in the log and arrive at what",
    "start": "2289960",
    "end": "2295119"
  },
  {
    "text": "the newest value is and to change the value you don't just destructively change the value you add an entry to",
    "start": "2295119",
    "end": "2301079"
  },
  {
    "text": "this Operation Log um and then with some metadata about who you are and when you changed it um and then at points where",
    "start": "2301079",
    "end": "2309160"
  },
  {
    "text": "the system knows everything's um in sync you can sort of prune that log and",
    "start": "2309160",
    "end": "2314960"
  },
  {
    "text": "create a new snapshot and continue on um so this is coming to Rak um and that'll",
    "start": "2314960",
    "end": "2321599"
  },
  {
    "text": "give us things like counters and sets or instead of reading a value changing it writing it back and all this conflict",
    "start": "2321599",
    "end": "2328920"
  },
  {
    "text": "stuff going on you can just say hey increment the set or or increment the counter of this key or add this item to",
    "start": "2328920",
    "end": "2336000"
  },
  {
    "text": "this set this key Etc uh I'm going to skip by this uh skip",
    "start": "2336000",
    "end": "2342520"
  },
  {
    "start": "2337000",
    "end": "2447000"
  },
  {
    "text": "by that um so uh what we've come to know is that",
    "start": "2342520",
    "end": "2350200"
  },
  {
    "text": "eventual consistency is great for the stuff that can handle it the your avatar",
    "start": "2350200",
    "end": "2356079"
  },
  {
    "text": "in a social networking site right it's fine if it doesn't update right away when you change it um the like button on",
    "start": "2356079",
    "end": "2364240"
  },
  {
    "text": "Facebook right it doesn't have to be precise um lots of things in this in the web",
    "start": "2364240",
    "end": "2370880"
  },
  {
    "text": "world are are fine with eventual consistency um but usually for any one comprehensive use case there is maybe 50",
    "start": "2370880",
    "end": "2380800"
  },
  {
    "text": "to 80% of it that's fine with eventual consistency and another you know 20% or",
    "start": "2380800",
    "end": "2386520"
  },
  {
    "text": "so that actually needs either requires strong consistency or be a real pain to",
    "start": "2386520",
    "end": "2392640"
  },
  {
    "text": "write in that eventually consistent model um so coming up in a a soonish",
    "start": "2392640",
    "end": "2398640"
  },
  {
    "text": "version of RAC um there is going to be strong",
    "start": "2398640",
    "end": "2404359"
  },
  {
    "text": "consistency so that's what You' normally expect from a database where you write something to the database and that value",
    "start": "2404359",
    "end": "2411079"
  },
  {
    "text": "is either accepted and it's true forever and ever or it's denied and and the value changes the same none of this",
    "start": "2411079",
    "end": "2417480"
  },
  {
    "text": "multiple version stuff um it's just going to be important when we add this since it's so much",
    "start": "2417480",
    "end": "2424520"
  },
  {
    "text": "easier people are going to probably want to use it all the time and they're going to lose some of the availability benefits of the other uh of the other",
    "start": "2424520",
    "end": "2431640"
  },
  {
    "text": "way of doing things um if this is the kind of stuff that you're into we had a conference in San Francisco a few months",
    "start": "2431640",
    "end": "2438800"
  },
  {
    "text": "ago called Recon um Recon 2012.com has lots of interesting talks on all these",
    "start": "2438800",
    "end": "2445560"
  },
  {
    "text": "kind of subjects um sort of an interesting aside",
    "start": "2445560",
    "end": "2451839"
  },
  {
    "start": "2447000",
    "end": "2622000"
  },
  {
    "text": "here how eventual is eventual consistency right like how often does this really happen how how often am I",
    "start": "2451839",
    "end": "2457760"
  },
  {
    "text": "going to get those two values back and have to do something with it turns out you can predict it",
    "start": "2457760",
    "end": "2464119"
  },
  {
    "text": "um uh some of our friends at uh University of Berkeley made this model",
    "start": "2464119",
    "end": "2469200"
  },
  {
    "text": "and proved it that if you can measure the different latencies in different parts of your",
    "start": "2469200",
    "end": "2474720"
  },
  {
    "text": "system uh you can model How likely you are to read the latest value uh and it",
    "start": "2474720",
    "end": "2479920"
  },
  {
    "text": "turns out if say you this is just a simple uh example but if you have uh .1",
    "start": "2479920",
    "end": "2485079"
  },
  {
    "text": "millisecond latency uh at the certain parts of your system that you have to",
    "start": "2485079",
    "end": "2491520"
  },
  {
    "text": "instrument that if you weigh 25 milliseconds you have or if you weit 100",
    "start": "2491520",
    "end": "2497359"
  },
  {
    "text": "milliseconds here you have a 99.96% chance of uh being strictly consistent",
    "start": "2497359",
    "end": "2506000"
  },
  {
    "text": "so the thing about eventual consistency is that it just doesn't enforce it it doesn't mean that you're not consistent",
    "start": "2506000",
    "end": "2512079"
  },
  {
    "text": "all the time if you're reading the database only every 200 Mill",
    "start": "2512079",
    "end": "2517760"
  },
  {
    "text": "seconds chances are you're never going to see any of the eventual consistency um it only happens in Failure conditions",
    "start": "2517760",
    "end": "2525359"
  },
  {
    "text": "are under very heavy concurrency when you're you know constantly writing or",
    "start": "2525359",
    "end": "2531800"
  },
  {
    "text": "reading one other sort of operational problem TCP incast uh sort of best explained by uh",
    "start": "2532240",
    "end": "2539480"
  },
  {
    "text": "my co-worker grandfather is that you can't pour two buckets of manure into one um these are lessons we learn from",
    "start": "2539480",
    "end": "2546000"
  },
  {
    "text": "running this kind of database and this happens in any system really where there's um replicas happening",
    "start": "2546000",
    "end": "2553520"
  },
  {
    "text": "where you have a coordinator and then that coordinator is sending requests to many other nodes uh so what happens is",
    "start": "2553520",
    "end": "2560079"
  },
  {
    "text": "and you saw that sort of broadcast in the earlier Slide the coordinator sends the request all of the uh replicas",
    "start": "2560079",
    "end": "2567880"
  },
  {
    "text": "respond at roughly the same time with the largish value um and when that hits the switch",
    "start": "2567880",
    "end": "2575920"
  },
  {
    "text": "uh the switch has if it doesn't have space to buffer it and buffer space buffer memory on switch ports is very",
    "start": "2575920",
    "end": "2582720"
  },
  {
    "text": "very expensive um it has to drop packets and all the TCP flow control mechanisms",
    "start": "2582720",
    "end": "2589400"
  },
  {
    "text": "kick in um and you can see like a 10 gigabit line only getting about 25%",
    "start": "2589400",
    "end": "2596440"
  },
  {
    "text": "utilization and it's very very very hard to even notice what's happening because you have to really grind down the window",
    "start": "2596440",
    "end": "2602440"
  },
  {
    "text": "of that your of events that you're looking at this puzzled us for a long time I didn't even know what TCP incast was",
    "start": "2602440",
    "end": "2607680"
  },
  {
    "text": "was uh but we discovered if you ever see uh unexplainable like bandwidth",
    "start": "2607680",
    "end": "2615520"
  },
  {
    "text": "non-utilization in systems like this Google TCP and cast and uh you'll get some",
    "start": "2615520",
    "end": "2622559"
  },
  {
    "start": "2622000",
    "end": "2629000"
  },
  {
    "text": "uh some good uh information back going to talk about Vector clocks talk about",
    "start": "2622559",
    "end": "2629720"
  },
  {
    "start": "2629000",
    "end": "2692000"
  },
  {
    "text": "that um so yeah just a little bit more about ROK um we eded a bunch of things",
    "start": "2629720",
    "end": "2635319"
  },
  {
    "text": "Dynamo in the paper was just to keep Value store we added the ability to do map reduce in either JavaScript or llang",
    "start": "2635319",
    "end": "2643040"
  },
  {
    "text": "uh full text search in a manner that looks kind of like you're using solar or Lucine um you can put secondary indexes",
    "start": "2643040",
    "end": "2650079"
  },
  {
    "text": "on data because having to look things up by just the primary key all the time uh isn't easy you can add what we call pre-",
    "start": "2650079",
    "end": "2657599"
  },
  {
    "text": "or post commit hooks what traditional databases would call triggers so you can run custom code uh after certain events",
    "start": "2657599",
    "end": "2665040"
  },
  {
    "text": "happen uh this is the thing that we sell which is the ability to have a data center in in arus a data center in",
    "start": "2665040",
    "end": "2672040"
  },
  {
    "text": "London a data center in Japan and one in San Francisco and have them all talking together for applications that really",
    "start": "2672040",
    "end": "2678400"
  },
  {
    "text": "need a global low latency experience um there's a distributed",
    "start": "2678400",
    "end": "2684760"
  },
  {
    "text": "computation framework for sort of real-time analytics called riok pipe and riok CS which is our uh Amazon S3",
    "start": "2684760",
    "end": "2692960"
  },
  {
    "start": "2692000",
    "end": "2763000"
  },
  {
    "text": "clone um again the slides it's bitly noar",
    "start": "2692960",
    "end": "2698839"
  },
  {
    "text": "who's hosted on one of our test clusters for uh Amazon S3 um this is sort of the",
    "start": "2698839",
    "end": "2704400"
  },
  {
    "text": "future of reac uh nobody really wants to code against this eventually consistent",
    "start": "2704400",
    "end": "2709839"
  },
  {
    "text": "database it's all complicated with all these options but it turns out it makes a great foundational layer for building",
    "start": "2709839",
    "end": "2716720"
  },
  {
    "text": "much simpler database likee things on top of it and one of these is Rea CS so S3 is a much more constrained simple",
    "start": "2716720",
    "end": "2724480"
  },
  {
    "text": "understandable API put large file into it you get large files out of it they're organized in buckets everybody knows and",
    "start": "2724480",
    "end": "2731240"
  },
  {
    "text": "loves S3 um and this really was the first time",
    "start": "2731240",
    "end": "2737760"
  },
  {
    "text": "we tried to I mean we've all written uh at bash show we've all written apps against riok and experience the pain of",
    "start": "2737760",
    "end": "2744400"
  },
  {
    "text": "having to write against a database like this but this really um made us realize",
    "start": "2744400",
    "end": "2750800"
  },
  {
    "text": "uh that sort of the way to go in the future is is much simpler databases",
    "start": "2750800",
    "end": "2755960"
  },
  {
    "text": "written on top of the big featureful complicated",
    "start": "2755960",
    "end": "2760838"
  },
  {
    "text": "one um and we're almost running out of time um RAC core if you're interested in",
    "start": "2762359",
    "end": "2768200"
  },
  {
    "start": "2763000",
    "end": "2786000"
  },
  {
    "text": "distributed systems distributed systems research this has all really the hard",
    "start": "2768200",
    "end": "2773280"
  },
  {
    "text": "stuff in it it's its own separate GitHub repo with its own separate project um",
    "start": "2773280",
    "end": "2779480"
  },
  {
    "text": "all the actual applications that you deal with when you're talking to react are are basically plugins to this",
    "start": "2779480",
    "end": "2785359"
  },
  {
    "text": "framework called react core um openex is a very large ad serving",
    "start": "2785359",
    "end": "2790480"
  },
  {
    "start": "2786000",
    "end": "2811000"
  },
  {
    "text": "company they have three or 400 nodes of a custom RI core app running for doing",
    "start": "2790480",
    "end": "2795960"
  },
  {
    "text": "impression counting uh stackmob is a mobile backend as a service company there a lot of their stuff is written uh",
    "start": "2795960",
    "end": "2802640"
  },
  {
    "text": "RI core problem with it is that um needs to be a lot better documented you have",
    "start": "2802640",
    "end": "2807760"
  },
  {
    "text": "to sort of be an a when Cowboy to play with it now um multi-data Center replication",
    "start": "2807760",
    "end": "2815359"
  },
  {
    "start": "2811000",
    "end": "2845000"
  },
  {
    "text": "we're basically out of time but um the multi uh multi-data Center replication that we sell is much more",
    "start": "2815359",
    "end": "2821760"
  },
  {
    "text": "optimized for Wan links that are going to drop a lot more packets than your local data center so RAC actually comes",
    "start": "2821760",
    "end": "2828400"
  },
  {
    "text": "with two different replication sets of replication algorithms one optimized for",
    "start": "2828400",
    "end": "2833720"
  },
  {
    "text": "in data center low latency High throughput one optimized for um uh Long",
    "start": "2833720",
    "end": "2841319"
  },
  {
    "text": "Hall uh unpredictable lossy links",
    "start": "2841319",
    "end": "2847520"
  },
  {
    "start": "2845000",
    "end": "2893000"
  },
  {
    "text": "uh and then finally erlang uh it's a great language for this stuff I started my career at aamai writing distributed",
    "start": "2847559",
    "end": "2854040"
  },
  {
    "text": "systems and did more of them at Apple and I didn't discover llang until I got to Bas show and I know for a fact if we",
    "start": "2854040",
    "end": "2860400"
  },
  {
    "text": "had llang at aamai back in the day we could have saved a couple million dollars in",
    "start": "2860400",
    "end": "2866240"
  },
  {
    "text": "development by poorly reimplementing stuff that irine provides uh first class",
    "start": "2866240",
    "end": "2871319"
  },
  {
    "text": "support for distribution transparently across multiple nodes lightweight processes",
    "start": "2871319",
    "end": "2877760"
  },
  {
    "text": "um very easy to just saturate a multicore box by by modeling your uh",
    "start": "2877760",
    "end": "2883040"
  },
  {
    "text": "problem as a bunch of independent processes um and if you're into erlang",
    "start": "2883040",
    "end": "2888280"
  },
  {
    "text": "github.com basow it's not just erlang we have a lot of cool open source stuff there um that's where we",
    "start": "2888280",
    "end": "2894520"
  },
  {
    "start": "2893000",
    "end": "2936000"
  },
  {
    "text": "are um so quickly part of the future riak has no security model built in it's",
    "start": "2894520",
    "end": "2902119"
  },
  {
    "text": "up to you know administrators to fire wallet off we need to add uh a security",
    "start": "2902119",
    "end": "2908359"
  },
  {
    "text": "model to it um support larger clusters um everybody wants to have",
    "start": "2908359",
    "end": "2914800"
  },
  {
    "text": "hosted Services now riak has no way of implementing fairness somebody can run a map ruce job that uses up all the",
    "start": "2914800",
    "end": "2921640"
  },
  {
    "text": "Clusters resources and user two is starved um these are standard sort of",
    "start": "2921640",
    "end": "2927680"
  },
  {
    "text": "distributed systems problems and the real answer is use RAC as the sort of",
    "start": "2927680",
    "end": "2933359"
  },
  {
    "text": "hidden foundation for much simpler cloud services and that's a quick version of this",
    "start": "2933359",
    "end": "2940119"
  },
  {
    "start": "2936000",
    "end": "3431000"
  },
  {
    "text": "presentation I wish I had time to go through it all but um to the extent that you have any questions on that I'd be",
    "start": "2940119",
    "end": "2945480"
  },
  {
    "text": "glad to answer them uh again these are our links I'm at RBZ on Twitter we're",
    "start": "2945480",
    "end": "2950559"
  },
  {
    "text": "hiring all over the world if this is your kind of thing you don't have to know rlang um and you can read much more",
    "start": "2950559",
    "end": "2957040"
  },
  {
    "text": "about r at docs. bash.com thank",
    "start": "2957040",
    "end": "2961480"
  },
  {
    "text": "you any questions questions yeah so um you familiar with",
    "start": "2965280",
    "end": "2974760"
  },
  {
    "text": "any good resources that take a a sort of reasonably complex real life situation that I might know that I might know well",
    "start": "2974760",
    "end": "2981640"
  },
  {
    "text": "in a relational database idea or train of thought and then actually model out",
    "start": "2981640",
    "end": "2987319"
  },
  {
    "text": "the entire data model for for something like I don't know blog engine or something like that in a in a story like",
    "start": "2987319",
    "end": "2992920"
  },
  {
    "text": "Reish way or what yeah we have some um examples on our blog",
    "start": "2992920",
    "end": "3000680"
  },
  {
    "text": "um uh I think there's an example of a Twitter clone on our blog somewhere",
    "start": "3000680",
    "end": "3005920"
  },
  {
    "text": "there's an example of um uh uh Image store URL shortener thing",
    "start": "3005920",
    "end": "3016280"
  },
  {
    "text": "um usually uh you know maybe maybe I'll try",
    "start": "3016280",
    "end": "3022760"
  },
  {
    "text": "this way um have you ever have a table that you've denormalized so much that it's that it's just a primary key",
    "start": "3022760",
    "end": "3029480"
  },
  {
    "text": "and then maybe some compressed XML in a blob column or seen or heard of these types of things you know maybe it's",
    "start": "3029480",
    "end": "3035480"
  },
  {
    "text": "started out very of them as an evil rumor yeah um those uh are the type of things",
    "start": "3035480",
    "end": "3044240"
  },
  {
    "text": "that uh you know that I've seen on a couple sites if you're only doing primary key look up on something and",
    "start": "3044240",
    "end": "3051079"
  },
  {
    "text": "that's becoming a bottleneck then that's a good Target for ROK um the truth of the matter is is if you're getting by",
    "start": "3051079",
    "end": "3058440"
  },
  {
    "text": "with your relational database use it because this stuff is much more complicated and if you're not getting by",
    "start": "3058440",
    "end": "3064240"
  },
  {
    "text": "in your relational database like buy some ssds and buy yourself some time um",
    "start": "3064240",
    "end": "3071040"
  },
  {
    "text": "eventually you know our long-term road map I I was asked today where riok would",
    "start": "3071040",
    "end": "3076319"
  },
  {
    "text": "be in five years and I think in five years you'll be able to talk to riok with a squl interface because we'll",
    "start": "3076319",
    "end": "3081760"
  },
  {
    "text": "gradually build back to where we were uh you know when we when all these databas",
    "start": "3081760",
    "end": "3087000"
  },
  {
    "text": "is sort of broke from the tradition um uh but until then um you know if you can",
    "start": "3087000",
    "end": "3094839"
  },
  {
    "text": "get more gas out of a relational database definitely do it but um you'll know when one of these problems hits you",
    "start": "3094839",
    "end": "3102319"
  },
  {
    "text": "um when when they really do run out of gas then it's you know then the first",
    "start": "3102319",
    "end": "3107480"
  },
  {
    "text": "tables that people tend to migrate are those just look up tables of of key value pairs but there's um for more sort",
    "start": "3107480",
    "end": "3116079"
  },
  {
    "text": "of relational how they relate to RAC issues there's a on our website there's",
    "start": "3116079",
    "end": "3121319"
  },
  {
    "text": "a case study of a company that went from MySQL relatively complex application it",
    "start": "3121319",
    "end": "3127160"
  },
  {
    "text": "wasn't a Blog it was like a a cloud monitoring app so it wasn't some data",
    "start": "3127160",
    "end": "3133960"
  },
  {
    "text": "model that we're all sort of familiar with but they talk about how they move from that to RAC so of from relational",
    "start": "3133960",
    "end": "3139599"
  },
  {
    "text": "to RAC white paper we have on our on our bash.com",
    "start": "3139599",
    "end": "3144480"
  },
  {
    "text": "website anyone else else I know that uh some big sites use",
    "start": "3145079",
    "end": "3150920"
  },
  {
    "text": "mongod in what is what are you solving that they're not the sure um so what",
    "start": "3150920",
    "end": "3160720"
  },
  {
    "text": "mongod be does well there's a couple things um mongodb you still have this problem",
    "start": "3160720",
    "end": "3168280"
  },
  {
    "text": "where you have a master and a slave it's very hard to scale rights out in mongod",
    "start": "3168280",
    "end": "3174480"
  },
  {
    "text": "TV because all the rights have to be fun through a master right um so if you have",
    "start": "3174480",
    "end": "3182160"
  },
  {
    "text": "a workload that you can't funnel all that traffic through one master then you have to do",
    "start": "3182160",
    "end": "3189799"
  },
  {
    "text": "shards and that becomes uh sort of complexity that",
    "start": "3189799",
    "end": "3195760"
  },
  {
    "text": "bleeds out into your not that react doesn't bleed complexity out into your application but then you Shard and you",
    "start": "3195760",
    "end": "3201000"
  },
  {
    "text": "choose a Shard key say the first letter of a person's last name is a simplified example but you have machine for the A's",
    "start": "3201000",
    "end": "3207440"
  },
  {
    "text": "and the B's and the C's and the D's well unless you pick a Shard key that has a nice uniform",
    "start": "3207440",
    "end": "3212520"
  },
  {
    "text": "distribution um then you have like the Justin Bieber machine right or some",
    "start": "3212520",
    "end": "3217799"
  },
  {
    "text": "popular pop star right getting way more traffic over time and you have a hard time minimizing",
    "start": "3217799",
    "end": "3224319"
  },
  {
    "text": "hotspots um I'm not I'm going to be diplomatic about the",
    "start": "3224319",
    "end": "3230640"
  },
  {
    "text": "other issues with and and data loss but if you like search for mongod DB data loss versus ROK data loss draw",
    "start": "3230640",
    "end": "3239040"
  },
  {
    "text": "your own conclusions there um mongodb is great because you can uh fire it up and",
    "start": "3239040",
    "end": "3245440"
  },
  {
    "text": "write get really quickly up to speed on an app with your laptop without uh all",
    "start": "3245440",
    "end": "3251240"
  },
  {
    "text": "sorts of uh object relational mappers and crap middleware in the way right but",
    "start": "3251240",
    "end": "3258599"
  },
  {
    "text": "um uh when it starts to hit very very high traffic is when we get a lot of",
    "start": "3258599",
    "end": "3265359"
  },
  {
    "text": "customers I really speak more experience coming from to to um is definitely more friendly",
    "start": "3265359",
    "end": "3273160"
  },
  {
    "text": "for developers reacts more friendly for operations it's another way you",
    "start": "3273160",
    "end": "3279760"
  },
  {
    "text": "can is there anything like a caching layer or anything like that thought in",
    "start": "3282160",
    "end": "3287640"
  },
  {
    "text": "in weak now I don't think there is or is anything like that on the road um basically a replacement from M or",
    "start": "3287640",
    "end": "3293000"
  },
  {
    "text": "something yeah I actually I actually wrote uh and I don't know what I did with it",
    "start": "3293000",
    "end": "3299040"
  },
  {
    "text": "it's on GitHub somewhere um a layer on top of react that actually implemented the mcash protocol um there's no",
    "start": "3299040",
    "end": "3305720"
  },
  {
    "text": "explicit cache in Rak although it can be used pretty effectively as a big distributed cache because um we CH we",
    "start": "3305720",
    "end": "3313280"
  },
  {
    "text": "opted for a simpler design where we basically just leverag the operating",
    "start": "3313280",
    "end": "3319040"
  },
  {
    "text": "system buffer cash right so for the right kind of workloads um you're going",
    "start": "3319040",
    "end": "3325079"
  },
  {
    "text": "to be getting those reads Serv out of memory anyway because we have a very simple on disk format that's very",
    "start": "3325079",
    "end": "3330720"
  },
  {
    "text": "friendly for say like the Linux page cache to just read in and we we give the",
    "start": "3330720",
    "end": "3335839"
  },
  {
    "text": "page cache hints like if if you delete a piece of data we say hey evict it so we",
    "start": "3335839",
    "end": "3341079"
  },
  {
    "text": "sort of use the op the file systems VM cache as our cache um and so and the API",
    "start": "3341079",
    "end": "3350400"
  },
  {
    "text": "is very similar to that of like a MCD uh the things that we didn't when I wrote the McD the things that we don't",
    "start": "3350400",
    "end": "3357400"
  },
  {
    "text": "have somewhat obviously are things like um compare and",
    "start": "3357400",
    "end": "3363000"
  },
  {
    "text": "swap because that's uh something that needs strong consistency uh that we don't have um but",
    "start": "3363000",
    "end": "3371079"
  },
  {
    "text": "when we add the strong consistency stuff in it would be possible to probably implement a faithful MEC you know future complete",
    "start": "3371079",
    "end": "3378400"
  },
  {
    "text": "mcash API uh the other thing is that uh the",
    "start": "3378400",
    "end": "3383920"
  },
  {
    "text": "HTTP um uh API is very cash friendly we generate and honor all the right eag and",
    "start": "3383920",
    "end": "3391200"
  },
  {
    "text": "conditional headers so you can just put uh a squid or a varnish or an engine X",
    "start": "3391200",
    "end": "3397440"
  },
  {
    "text": "or something in front of it and it'll just naturally sort of play nicely with",
    "start": "3397440",
    "end": "3402799"
  },
  {
    "text": "it else cool well thank you guys for uh coming out again check out uh the nosql",
    "start": "3404480",
    "end": "3411680"
  },
  {
    "text": "search uh Road Show and give tony Falco my old boss a hard time",
    "start": "3411680",
    "end": "3418240"
  },
  {
    "text": "do you have a questions sorry thanks all right thanks a lot [Applause]",
    "start": "3418720",
    "end": "3427820"
  }
]