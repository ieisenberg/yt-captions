[
  {
    "start": "0",
    "end": "470000"
  },
  {
    "text": "(light music)",
    "start": "396",
    "end": "2896"
  },
  {
    "text": "- Thank you very much\nfor coming here to sleep, and to see Kotlin. How many of you have used Kotlin or know Kotlin a little bit in the past?",
    "start": "9525",
    "end": "15921"
  },
  {
    "text": "Okay. Android developers here? Alright, she saw a\ncouple of Android tracks,",
    "start": "15921",
    "end": "21947"
  },
  {
    "text": "there's a couple of talks on Kotlin covering Android as well, so you might want to go to that. I'm not an Android person,",
    "start": "21947",
    "end": "27529"
  },
  {
    "text": "so I have very little\nknowledge of Android. Okay so to give you a little\nbit of a background on Kotlin",
    "start": "27529",
    "end": "36394"
  },
  {
    "text": "where it started and where we're going, this talk is mostly going to be coding, but we've got a few slides just\nto give you some background.",
    "start": "36394",
    "end": "43667"
  },
  {
    "text": "So it started in 2010 by\nJetBrains which is where I work, and we were at the time,",
    "start": "43667",
    "end": "49863"
  },
  {
    "text": "JetBrains has been around for 16 years, and we do different types of tools. Mostly me do IDEs and\nthen we do Teamware tools",
    "start": "49863",
    "end": "56934"
  },
  {
    "text": "and we do some .NET stuff. And all of the IDEs and the\nTeamware tools which are the server side stuff is built in Java.",
    "start": "56934",
    "end": "63571"
  },
  {
    "text": "We make IDEs for pretty much\nany language that's out there, but most of the code is actually in Java,",
    "start": "63571",
    "end": "71399"
  },
  {
    "text": "so even we've just created\na C# IDE which is running on the JBM well though\nthat is written in Kotlin.",
    "start": "73923",
    "end": "80993"
  },
  {
    "text": "And we were looking for a\nlanguage because we wanted something that was a\nlittle bit more concise, expressive tool of our inter-operable",
    "start": "80994",
    "end": "87781"
  },
  {
    "text": "and overall pragmatic now, being more concise than Java\nisn't setting the bar high",
    "start": "87781",
    "end": "92992"
  },
  {
    "text": "because Java's pretty much\nas overloaded as it gets in terms of words,",
    "start": "92992",
    "end": "98076"
  },
  {
    "text": "and at the time there was\nbasically two languages that were potential candidates. One of them was Scala and\nthe other one was Ceylon.",
    "start": "99461",
    "end": "106543"
  },
  {
    "text": "Scala we didn't choose\nfor certain reasons, primarily at the time and\nremember we're talking about 2010,",
    "start": "106543",
    "end": "113299"
  },
  {
    "text": "performance was an issue. Tooling was a very big issue.",
    "start": "113300",
    "end": "117979"
  },
  {
    "text": "To give you some perspective, if there's about 35 people\non the entire Git team, there's about 11 people on\nthe Scala plugin, alright.",
    "start": "118946",
    "end": "126942"
  },
  {
    "text": "So gives you an idea of how\nhard it is to tool Scala. The other option we had was Ceylon",
    "start": "126942",
    "end": "133205"
  },
  {
    "text": "which was fitting very nicely. The problem was that at some point our interests somewhat\ndiverged with Ceylon,",
    "start": "133205",
    "end": "140887"
  },
  {
    "text": "so that's when we decided to start Kotlin. And one of our focus was,",
    "start": "140887",
    "end": "146145"
  },
  {
    "text": "interoperability and tools, we make tools so we wanted to\nmake sure that the language that we create that we want to\nuse ourselves for ourselves,",
    "start": "146145",
    "end": "153588"
  },
  {
    "text": "our idea was to stop writing Java, but at the same time whatever\nwe picked we didn't throw",
    "start": "153588",
    "end": "158635"
  },
  {
    "text": "16 years or at the time 10\nyears of code in the bin. We're not the startup that\ncan just throw everything away",
    "start": "158635",
    "end": "165312"
  },
  {
    "text": "and write the next best thing\nin no GS or sorry in code. So what we needed is a language\nthat could inter-operate",
    "start": "165312",
    "end": "173603"
  },
  {
    "text": "with everything that\nwe had in a smooth way. And that's why we kind\nof came up with Kotlin.",
    "start": "173603",
    "end": "178959"
  },
  {
    "text": "From day one it was developed\nunder Apache 2 OSS and it's been on Github ever since.",
    "start": "178959",
    "end": "184519"
  },
  {
    "text": "The current state were\nreleased in February 2016 and that's because we wanted to\nhave a long period of dog food",
    "start": "185916",
    "end": "191058"
  },
  {
    "text": "in because it's very hard to\ncreate a language and at one point you know you gotta\nkind of more or less assume that you're getting things right,",
    "start": "191059",
    "end": "197305"
  },
  {
    "text": "so there was a long period\nof testing trialing out, making sure we're not messing things up, and there were quite a\nfew changes along the way.",
    "start": "197305",
    "end": "204985"
  },
  {
    "text": "Decisions that were made\ninitially around the language were later revoked or changed or gone",
    "start": "204985",
    "end": "210924"
  },
  {
    "text": "in a different direction. Right now there's about\n20 plus developers, I think around 22 people\nat JetBrains working on it.",
    "start": "210924",
    "end": "217481"
  },
  {
    "text": "There's over 100 commiters\nat JetBrains and it's used in over 10 products now, right.",
    "start": "217481",
    "end": "224368"
  },
  {
    "text": "So our goal with Kotlin wasn't\nto create a language onto which we could then bootstrap\nsome consulting or training.",
    "start": "224368",
    "end": "230958"
  },
  {
    "text": "Our goal with Kotlin was to create a language that we can use ourselves, and our commitment to this language",
    "start": "230958",
    "end": "236681"
  },
  {
    "text": "and its future is in the tools, so our bread and butter which\nis our tools is now being",
    "start": "236681",
    "end": "242564"
  },
  {
    "text": "written in Kotlin. IntelliJ has parts written in Kotlin, some of our newer tools are\nentirely written in Kotlin,",
    "start": "242564",
    "end": "248846"
  },
  {
    "text": "some of the new tools and\nservices that we offer will be written in Kotlin and as I\nmentioned the C# ID which we're creating is actually\nwritten in Kotlin as well.",
    "start": "248846",
    "end": "258549"
  },
  {
    "text": "And I don't like to name drop, but only if it suits my\npurpose then I will name drop,",
    "start": "258550",
    "end": "264761"
  },
  {
    "text": "but people normally ask\nlike what companies, and these are more or less\ncompanies that we are aware of that are using Kotlin\nthat you might recognize.",
    "start": "264761",
    "end": "272142"
  },
  {
    "text": "There's way more than these out there, but the ones that kind of look good on a slide sheet are these.",
    "start": "272143",
    "end": "279208"
  },
  {
    "text": "No disrespect to every other\ncompany that's using Kotlin by the way. And also how many of you\nare familiar with Gradle?",
    "start": "279208",
    "end": "286520"
  },
  {
    "text": "Alright that took a lot\nof work that animated GIF. Gradle recently announced that they're",
    "start": "286520",
    "end": "292219"
  },
  {
    "text": "providing Kotlin support. So in addition to Groovy, they're now going to provide\nyou with the ability to create",
    "start": "292219",
    "end": "298123"
  },
  {
    "text": "Gradle scripts using Kotlin. How many of you use Gradle? Okay and now they recommend that",
    "start": "298123",
    "end": "304707"
  },
  {
    "text": "plugins are written in Kotlin, so that happened earlier\nthis year as well.",
    "start": "304707",
    "end": "310216"
  },
  {
    "text": "Where can you use it? Anywhere, Kotlin is not a language specifically around Android.",
    "start": "310216",
    "end": "314753"
  },
  {
    "text": "We don't make mobile\napplications we make tools. So we created a language\nfor ourselves initially,",
    "start": "316399",
    "end": "322502"
  },
  {
    "text": "for any kind of tool that we make, but its purpose is industrial, so any kind of application you can use it.",
    "start": "322502",
    "end": "328852"
  },
  {
    "text": "Given that it's compatible\nwith Java 6 and small runtime, and performance wise it's\nfine in terms of compilation,",
    "start": "328852",
    "end": "334823"
  },
  {
    "text": "in terms of runtime it's the\nsame because it's bicode, it just translates into bicode. A lot of adoption has been\ngained around Android.",
    "start": "334823",
    "end": "341807"
  },
  {
    "text": "So a lot of Android\ndevelopers are using it. Given it's also similar to\nJava C#, JavaScript, Groovy,",
    "start": "341807",
    "end": "347461"
  },
  {
    "text": "Scala and every other\nlanguage there under the sun, it allows you a quick ramp-up time, right.",
    "start": "347461",
    "end": "354711"
  },
  {
    "text": "So this is not a departure of saying, I'm going from Java to Clojure, I'm going from Java to Haskell,",
    "start": "354711",
    "end": "361301"
  },
  {
    "text": "this is something that you\nare familiar with and you'll be able to get ramped-up in no time.",
    "start": "361301",
    "end": "367780"
  },
  {
    "text": "And if you've every watched Rich Hickey's talk of Simple Made Easy,",
    "start": "367780",
    "end": "372978"
  },
  {
    "text": "he says that easy is something\nthat you're familiar with. In his words Kotlin would be easy,",
    "start": "373863",
    "end": "379558"
  },
  {
    "text": "although we'd like to think\nit's quite simple as well. And also given that interoperability\nis a big factor for us,",
    "start": "380624",
    "end": "387531"
  },
  {
    "text": "it allows gradual adoption. And we'll see it, so you can actually start\nto create Kotlin classes in your code or start to\ncreate Kotlin functions",
    "start": "390665",
    "end": "397603"
  },
  {
    "text": "and interop between\nJava and Kotlin easily, and you don't have to limit this to tests, which is sometimes where we\ntry and pick up a new language,",
    "start": "397604",
    "end": "404716"
  },
  {
    "text": "right by seeing if we can\nwrite tests around it. How can you use it? We've tried to make Kotlin as\nopen and as free as possible.",
    "start": "404717",
    "end": "412444"
  },
  {
    "text": "Obviously our long-term\ninterest is that we continue to thrive as a tooling company\nand that people use Kotlin and",
    "start": "412444",
    "end": "419355"
  },
  {
    "text": "consequently buy IntelliJ IDEA, but it is completely open. So you can use it from a command-line,",
    "start": "419355",
    "end": "425012"
  },
  {
    "text": "from Maven, Gradle, Kobalt, which is a flavor of Gradle using Kotlin,",
    "start": "425012",
    "end": "430578"
  },
  {
    "text": "Ant if you're still using Ant, IntelliJ IDEA, both the\ncommunity edition as well as the",
    "start": "432109",
    "end": "437564"
  },
  {
    "text": "ultimate edition, Android Studio, Eclipse, and the only one missing here is NetBeans,",
    "start": "437564",
    "end": "443576"
  },
  {
    "text": "any NetBeans developers? Okay well now you've got NetBeans too. We started the plugin for NetBeans,",
    "start": "443576",
    "end": "449663"
  },
  {
    "text": "so we actually create the\nplugins for IntelliJ IDEA, Android Studio, Eclipse\nand NetBeans, okay.",
    "start": "449663",
    "end": "455561"
  },
  {
    "text": "You can tell where the features\nare gonna go first right? (audience laughs)",
    "start": "455561",
    "end": "461720"
  },
  {
    "text": "But like I said it's command-line\nso you can actually open it up in the command-line\nand write code and Vim",
    "start": "461720",
    "end": "467760"
  },
  {
    "text": "and then away you go or Emacs. Okay so let's see some code, right.",
    "start": "467760",
    "end": "472874"
  },
  {
    "start": "470000",
    "end": "525000"
  },
  {
    "text": "Any questions? No brilliant. Actually I can't ask, you don't even have mics so, even if you do speak loudly.",
    "start": "474665",
    "end": "481599"
  },
  {
    "text": "But please do interrupt me\nif you have any questions. So I'm gonna create a\nnew application here,",
    "start": "481599",
    "end": "488189"
  },
  {
    "text": "and you can see that I can select Kotlin, now normally I don't do this, I normally use Gradle,",
    "start": "488189",
    "end": "493620"
  },
  {
    "text": "Gradle's my default build system, but for demos this works really nicely.",
    "start": "493620",
    "end": "499594"
  },
  {
    "text": "And we'll just create a\nnew app here, new app. And Kotlin comes with a small run-time,",
    "start": "499594",
    "end": "505846"
  },
  {
    "text": "it's very small it's like\n900 kilobytes we try and keep it small and it keeps the\nstandard library in there, which provides a bunch of\nadditional functionality,",
    "start": "505846",
    "end": "513021"
  },
  {
    "text": "which we'll see such as filterMap, flatMap all of these things, and you can shift that with your,",
    "start": "513021",
    "end": "518510"
  },
  {
    "text": "you know you can JAR it you can zip it, you can do whatever you want with it.",
    "start": "518510",
    "end": "524983"
  },
  {
    "text": "Hit okay and now I've got\nmy Kotlin application, I can come here and I can\nsay create a Kotlin class",
    "start": "524983",
    "end": "531610"
  },
  {
    "start": "525000",
    "end": "635000"
  },
  {
    "text": "and I'll call this GOTOCPH, I can name it anything I want,",
    "start": "531610",
    "end": "537761"
  },
  {
    "text": "and then I can spit out main, and main is basically the entry point to a Kotlin application, right",
    "start": "537761",
    "end": "544347"
  },
  {
    "text": "so it's kind of like in\nthe Java world it would be the equivalent of public\nstatic void and static plus,",
    "start": "544347",
    "end": "551537"
  },
  {
    "text": "public static void main. And I can say print\nline, hello Copenhagen,",
    "start": "551537",
    "end": "556553"
  },
  {
    "text": "and right click or hit run, okay.",
    "start": "559257",
    "end": "562007"
  },
  {
    "text": "And that will compile run, its got increments of\ncompilation so the first time obviously its a little bit slower,",
    "start": "564895",
    "end": "570087"
  },
  {
    "text": "after that it becomes faster okay, and then you can see hello Copenhagen. And that's as far as I go in terms",
    "start": "570087",
    "end": "577473"
  },
  {
    "text": "of my live coding abilities, so you can actually like I\ncan select this code and then",
    "start": "577473",
    "end": "584437"
  },
  {
    "text": "create a message and then\nset a break point as well, and then I can Debug,",
    "start": "586898",
    "end": "593665"
  },
  {
    "text": "and then I see you know my break point. I've got the Debugger and everything. Couple of things obviously\nI didn't mention but,",
    "start": "593666",
    "end": "602904"
  },
  {
    "text": "Kotlin is a statically typed language, it compiles down to Java and\nto JBM and to JavaScript.",
    "start": "602904",
    "end": "609399"
  },
  {
    "text": "What we're gonna see\nprimarily in this section is talking in Java, but pretty much all of the constructs and",
    "start": "610322",
    "end": "615414"
  },
  {
    "text": "anything you see can\nalso talk in JavaScript. Why did we do JavaScript? Because every language under\nthe sun again does JavaScript.",
    "start": "615414",
    "end": "622624"
  },
  {
    "text": "If you're not you don't get\ninto the hipster community, (audience laughs) so we have to do JavaScript.",
    "start": "622624",
    "end": "627808"
  },
  {
    "text": "And there's some very good\nuse cases for combining Java and JavaScript in a single project.",
    "start": "627808",
    "end": "633134"
  },
  {
    "text": "Okay, so let me just to\nshow you how this works, I'm gonna go and create a Java class,",
    "start": "635716",
    "end": "640946"
  },
  {
    "text": "so I'll call this for\ninstance CustomerJava, and I'll do for instance private int id,",
    "start": "640946",
    "end": "646890"
  },
  {
    "text": "private string name and then\ncreate the getters and setters,",
    "start": "648003",
    "end": "652170"
  },
  {
    "text": "okay now I'll come back\nto my go to Copenhagen, and what I'll do is I'll\nsay val customerJava equals",
    "start": "657932",
    "end": "666847"
  },
  {
    "text": "customerJava, right? So you see that I can compile\nthis and it all works.",
    "start": "666847",
    "end": "673509"
  },
  {
    "text": "Complete enter all. Notice one thing already that there's no new keyword in Kotlin,",
    "start": "673509",
    "end": "679787"
  },
  {
    "text": "so you don't have to mess around with new. Contrary to JavaScript we don't\nuse conventions to indicate",
    "start": "679787",
    "end": "686493"
  },
  {
    "text": "what a constructor is, so you don't have to you know make this, you can make it lower case but\nwe do follow the Java kind of",
    "start": "686493",
    "end": "692509"
  },
  {
    "text": "conventions in terms of naming et cetera. And then now watch here, if I do customerJava,",
    "start": "692509",
    "end": "698410"
  },
  {
    "text": "I see I get the id, but the conditionals it\noffers me is getId and setId,",
    "start": "698410",
    "end": "706390"
  },
  {
    "text": "right because in Java we're\naccustomed to getId and setId, get to read set to write.",
    "start": "706390",
    "end": "712060"
  },
  {
    "text": "In Kotlin we don't have\ngetters and setters and such, we just have properties. So if you're using Java from Kotlin,",
    "start": "713361",
    "end": "720397"
  },
  {
    "text": "you kind of follow the Kotlin\nconventions in how you access objects, functions, et cetera.",
    "start": "720397",
    "end": "725815"
  },
  {
    "text": "And if you're using Kotlin from Java, you follow the Java conventions. So I could actually\nwrite for instance getId,",
    "start": "725815",
    "end": "732450"
  },
  {
    "text": "and that works, right, and then let's go ahead and\nintroduce this as a variable",
    "start": "732450",
    "end": "738620"
  },
  {
    "text": "and you can see that\nthe Id is kind of saying to me use property access, so it does allow me to write it,",
    "start": "738620",
    "end": "746040"
  },
  {
    "text": "but I can just use the convention\nthat the way that you're meant to use it in Kotlin okay.",
    "start": "746040",
    "end": "751959"
  },
  {
    "text": "Now if I create a Kotlin class here, notice one other thing,",
    "start": "751959",
    "end": "758256"
  },
  {
    "text": "that here I have a main\nfunction with no classes,",
    "start": "758256",
    "end": "762339"
  },
  {
    "text": "so in Kotlin you have the ability to have top level functions, which we'll see later on, so you don't have to put\neverything into a helper class",
    "start": "764159",
    "end": "771547"
  },
  {
    "text": "that is static with\nstatic functions, right. And then your colleague\nputs their functions",
    "start": "771547",
    "end": "777095"
  },
  {
    "text": "in an auxiliary class that then you wonder where the functions are.",
    "start": "777095",
    "end": "782931"
  },
  {
    "text": "Are they in the helper class or are they in the auxiliary class? You don't have that issue with Kotlin. In Kotlin you can just\nput functions in any file,",
    "start": "782932",
    "end": "790977"
  },
  {
    "text": "and then you can figure\nout where they are right, kind of like JavaScript. So in searching for classes\nyou can search for files.",
    "start": "790977",
    "end": "796459"
  },
  {
    "text": "But the point is that we\ncut down on boilerplate code by not having you need to to\ncreate that classes just to",
    "start": "796460",
    "end": "802511"
  },
  {
    "text": "contain some functions in them. By default by the way, Kotlin uses the package default,",
    "start": "802511",
    "end": "808287"
  },
  {
    "text": "but you can say whatever,\nhadihariricph for instance. You don't have to follow\nthe naming conventions of,",
    "start": "808287",
    "end": "816058"
  },
  {
    "text": "you don't have to follow like kind of the death by a thousand folders\nin the terms of having",
    "start": "816058",
    "end": "824880"
  },
  {
    "text": "everything in that same package, but we kind of do it out of convention.",
    "start": "824880",
    "end": "830586"
  },
  {
    "text": "Also you can have more than one class in the single file in Kotlin. So let me go ahead now\nif you see this, right.",
    "start": "830586",
    "end": "838362"
  },
  {
    "start": "835000",
    "end": "1180000"
  },
  {
    "text": "This is basically 18 lines of\ncode for two properties, okay. So let me go ahead and\ncreate this now in Kotlin.",
    "start": "838362",
    "end": "847349"
  },
  {
    "text": "So I can say CustomerKotlin\nand I'll create a class, and Kotlin doesn't have fields.",
    "start": "847349",
    "end": "854756"
  },
  {
    "text": "Everything is a property. So I could just say val id equals Int,",
    "start": "854756",
    "end": "859434"
  },
  {
    "text": "and then val name equals string, okay.",
    "start": "862480",
    "end": "865647"
  },
  {
    "text": "Ignore that for now actually, let me just create this as var and that way we won't have an issue okay. This is just saying it's not initialized",
    "start": "867720",
    "end": "873618"
  },
  {
    "text": "but forget it for now. So here the convention that\nwe follow in Kotlin is the name colon and the type,",
    "start": "873618",
    "end": "880096"
  },
  {
    "text": "so if you're used to Pascal\nit's the same concept. Var means mutable val means immutable,",
    "start": "882583",
    "end": "888076"
  },
  {
    "text": "or read-only right? By Kotlin we don't enforce immutability but we kind of recommend it,",
    "start": "888076",
    "end": "893508"
  },
  {
    "text": "and you'll see that we've\ngot interfaces over Java connections that have mutable versions",
    "start": "893508",
    "end": "899673"
  },
  {
    "text": "and immutable versions. But I don't want to do it like this. What I can do in fact, is just declare my properties\non the same line as the class.",
    "start": "899673",
    "end": "907201"
  },
  {
    "text": "I can say val well var,\nlet's do this one val. Id Int and then var name string, okay.",
    "start": "907202",
    "end": "914362"
  },
  {
    "text": "In fact I don't need this\nopen and closed either.",
    "start": "916196",
    "end": "920279"
  },
  {
    "text": "So that's basically what\nI've just created in Java. Pretty much except I've\ngot one additional thing,",
    "start": "921825",
    "end": "927519"
  },
  {
    "text": "which is I've also added\na constructor, right. So this means that when I\ninitialize my customer in Kotlin",
    "start": "927519",
    "end": "934141"
  },
  {
    "text": "I have to pass it in two properties. The id and the name.",
    "start": "934141",
    "end": "939230"
  },
  {
    "text": "But in terms of lines of code\nit's exactly the same as this. Well it's not exactly the same, it's exactly the same basic\nfunctionality except here,",
    "start": "939230",
    "end": "946347"
  },
  {
    "text": "this is mutable I've made it immutable, so this would not have it setup okay.",
    "start": "946347",
    "end": "951982"
  },
  {
    "text": "If we want to make it a\nsetup we would do that. So essentially I've reduced\nall of our boilerplate code",
    "start": "951982",
    "end": "959617"
  },
  {
    "text": "to something less. Now fair enough you'll say that\nthe id generates it for me,",
    "start": "959617",
    "end": "965608"
  },
  {
    "text": "yes we didn't think of that\nwhen we were doing this and putting ourselves out of business, but it's pointless that code is pointless.",
    "start": "965608",
    "end": "973194"
  },
  {
    "text": "And the problem is it's\npointless not because the id can generate it for you so\nit's not causing you issues, it's that you don't know\nif the code that you have",
    "start": "974774",
    "end": "982055"
  },
  {
    "text": "in six months down the line\nwhether it was generated by the id or it has some custom things.",
    "start": "982055",
    "end": "987740"
  },
  {
    "text": "It's just more code that\nis in your code base. Now I can come back here if\nI know how to use an IDE,",
    "start": "987740",
    "end": "993843"
  },
  {
    "text": "and I can create some other things. For instance, toString. And I can create equal\nin a hashCode right.",
    "start": "993843",
    "end": "1001716"
  },
  {
    "text": "So now I've got toString equals\nin a hashCode and now we're at 48 lines of code, right okay.",
    "start": "1008596",
    "end": "1014498"
  },
  {
    "text": "Remove the white spaces whatever. Let's go back to my CustomerKotlin\nand do the same thing. There, okay.",
    "start": "1014498",
    "end": "1019288"
  },
  {
    "text": "So that now gives me a class with toString get hashCode equals, and it also gives me\nsomething else which is copy.",
    "start": "1023081",
    "end": "1030095"
  },
  {
    "text": "So if I come here I can say\nval customerKotlin equals",
    "start": "1030095",
    "end": "1034261"
  },
  {
    "text": "customerKotlin and then I have\nto pass a number and a name, let's call me this.",
    "start": "1035310",
    "end": "1041022"
  },
  {
    "text": "By the way notice that we\nalso don't have semicolons. So you can use semicolons\nif you do however,",
    "start": "1041022",
    "end": "1047282"
  },
  {
    "text": "you do have to have flame\nwars on hacker use about whether you should or\nshouldn't use semicolons.",
    "start": "1047283",
    "end": "1054929"
  },
  {
    "text": "So I have customerSecondKotlin, and I can do customerKotlin.copy\nand that will copy that",
    "start": "1054930",
    "end": "1062205"
  },
  {
    "text": "data path for me, and I can override values, so I can override for example just the id.",
    "start": "1062206",
    "end": "1068888"
  },
  {
    "text": "If I do a println of customerKotlin, we'll see what that gets me.",
    "start": "1068888",
    "end": "1073980"
  },
  {
    "text": "So you can see that I get a\nnicely formatted output of what the toString would be in Kotlin.",
    "start": "1075511",
    "end": "1081260"
  },
  {
    "text": "And along with that is basically by just adding this modifier which is data.",
    "start": "1081260",
    "end": "1087216"
  },
  {
    "text": "If I need to I can actually\nhave you know I can override the toString I can override the equals,",
    "start": "1087216",
    "end": "1093688"
  },
  {
    "text": "I can override anything I want. But out of the box that's\nwhat it ships with.",
    "start": "1093688",
    "end": "1098768"
  },
  {
    "text": "Now this is good because\nbasically this code is just typical JavaBeans that you're\ncreating over and over again.",
    "start": "1098768",
    "end": "1106359"
  },
  {
    "text": "And in Kotlin you can simply reduce that to a single line of code. Any questions so far?",
    "start": "1106359",
    "end": "1112539"
  },
  {
    "text": "Yes. - [Audience Member] How\ndeep does the copy go?",
    "start": "1112539",
    "end": "1118588"
  },
  {
    "text": "- The question is how deep the copy goes. So in essence if I have for\nexample a list of copies,",
    "start": "1119646",
    "end": "1125351"
  },
  {
    "text": "if it's gonna do a deep copy. I believe no it doesn't it\njust does the top level.",
    "start": "1125351",
    "end": "1131632"
  },
  {
    "text": "Yes another question. - [Audience Member] How does inheritance",
    "start": "1131632",
    "end": "1137127"
  },
  {
    "text": "with constructors how does that work? - We'll get to that in a moment, the question is how does\ninheritance with constructors work? So this what you've seen right now",
    "start": "1137127",
    "end": "1143662"
  },
  {
    "text": "is basically a primary constructor. What you can in fact do\nyou can give default values",
    "start": "1143662",
    "end": "1148833"
  },
  {
    "text": "as well to primary constructors. So I can say for instance this\nis zero and this is empty,",
    "start": "1148833",
    "end": "1154510"
  },
  {
    "text": "and that means that right\nnow I can now create an instance of customer in Kotlin",
    "start": "1154510",
    "end": "1159964"
  },
  {
    "text": "without specifying any\ninput paramaters, okay. Initially we actually\njust left it at that.",
    "start": "1159964",
    "end": "1167145"
  },
  {
    "text": "But then there were people\nthat said no actually I want to have the ability to have second\nre-constructors et cetera,",
    "start": "1167145",
    "end": "1173480"
  },
  {
    "text": "and we'll see how you can do\nthat and then reference the primary constructor et cetera.",
    "start": "1173480",
    "end": "1177594"
  },
  {
    "text": "Okay one other thing that we\nalso have in Kotlin is objects. So I can actually say for\nexample object Global,",
    "start": "1179023",
    "end": "1184906"
  },
  {
    "start": "1180000",
    "end": "1270000"
  },
  {
    "text": "and PI equals 3.14 right? Now notice a couple of things.",
    "start": "1184906",
    "end": "1192126"
  },
  {
    "text": "This is basically how you\nimplement a singleton in Kotlin, right because we have the\nsame concepts as JavaScript.",
    "start": "1193510",
    "end": "1202059"
  },
  {
    "text": "JavaScript is the language\nthat just actually only has objects it doesn't have classes, and then TypeScript came out.",
    "start": "1202059",
    "end": "1207346"
  },
  {
    "text": "We have classes and we have objects, so you can just implement a singleton by just declaring it as an object,",
    "start": "1207347",
    "end": "1215342"
  },
  {
    "text": "and there's use cases apart obviously from just creating singletons. Notice again here that Kotlin\nis very big in type inference,",
    "start": "1215342",
    "end": "1223018"
  },
  {
    "text": "so I don't need to be explicit here, I don't need to say that\nthis is double, right.",
    "start": "1223018",
    "end": "1229181"
  },
  {
    "text": "I can just say PI equals\nas long as I initialize it, it will figure it out.",
    "start": "1229181",
    "end": "1234627"
  },
  {
    "text": "There are cases for instance\nif I do I don't know, val longValue and I want this to be long,",
    "start": "1234628",
    "end": "1241687"
  },
  {
    "text": "if I put 10 it'll think it's\nan integer but we have certain characters that you can use\nto indicate what this is.",
    "start": "1241687",
    "end": "1248595"
  },
  {
    "text": "In this case it would be a long right. And this is a Global object\nwhich is fine to use because it's read-only so I can say\nGlobal PI and then just println",
    "start": "1248595",
    "end": "1257551"
  },
  {
    "text": "this out and away you go, okay. Anywhere where that object is declared",
    "start": "1257551",
    "end": "1263385"
  },
  {
    "text": "in the package it's accessible. Right, now functions.",
    "start": "1263385",
    "end": "1268194"
  },
  {
    "start": "1270000",
    "end": "1415000"
  },
  {
    "text": "As you can see we basically\ncreated a function and you can create any other function so for example,",
    "start": "1270365",
    "end": "1276820"
  },
  {
    "text": "helloWorld just takes a message and then",
    "start": "1276820",
    "end": "1280153"
  },
  {
    "text": "I can just write for\nexample println right. By default Kotlin uses,",
    "start": "1282493",
    "end": "1288274"
  },
  {
    "text": "by default if you don't\nspecify return type it's void",
    "start": "1289260",
    "end": "1293427"
  },
  {
    "text": "which in Kotlin is represented as Unit. It's exactly the same as\nvoid except it's an object.",
    "start": "1295231",
    "end": "1301922"
  },
  {
    "text": "So you can query on it, you can say oh is this\nan actual unit, right? And by default the implementation\nof toString is telling",
    "start": "1301922",
    "end": "1308664"
  },
  {
    "text": "you that it's a Kotlin Unit. If I want to specify return\ntype then I just specify return",
    "start": "1308664",
    "end": "1313980"
  },
  {
    "text": "type so for example, fun addNumbers x Int y Int,",
    "start": "1313980",
    "end": "1317719"
  },
  {
    "text": "then Int return x plus y right? That's the return type.",
    "start": "1322521",
    "end": "1328376"
  },
  {
    "text": "Now in cases where Kotlin can actually infer the return type, you don't need to be explicit either.",
    "start": "1328376",
    "end": "1334538"
  },
  {
    "text": "Because I could put this\nall on a single line by just simply doing something like that.",
    "start": "1334538",
    "end": "1341368"
  },
  {
    "text": "So I don't need to open\nbraces close braces. When my function is basically\nreturning expression,",
    "start": "1341369",
    "end": "1346591"
  },
  {
    "text": "I can just put it on a single line. Obviously I can be explicit\nabout the return type as well,",
    "start": "1346592",
    "end": "1353299"
  },
  {
    "text": "but it's not needed okay? So when you're writing Kotlin use val var,",
    "start": "1353300",
    "end": "1359189"
  },
  {
    "text": "don't really do the whole\nyou know this is a string and then initialize it as a string\nand then put some value.",
    "start": "1359189",
    "end": "1365119"
  },
  {
    "text": "Now if you're doing Java, most of you here or Java\nor C# or there's a mix or,",
    "start": "1365119",
    "end": "1370559"
  },
  {
    "text": "Java? C#? Okay JavaScript? And actually enjoy it?",
    "start": "1370559",
    "end": "1376340"
  },
  {
    "text": "(audience laughs) So if you're doing Java you\nknow that Java 9 I think is",
    "start": "1376340",
    "end": "1383038"
  },
  {
    "text": "gonna come up with the whole var right? And now there's endless debates\ngoing on in the community",
    "start": "1384043",
    "end": "1389398"
  },
  {
    "text": "that this is going to decrease readability blah, blah, blah, blah, blah, blah. If you rewind eight years\nago we had those same debates",
    "start": "1389398",
    "end": "1394599"
  },
  {
    "text": "in C# and nothing happened. Everyone continued to write C#, everyone's using var everything is okay.",
    "start": "1394599",
    "end": "1401654"
  },
  {
    "text": "There has been an increase in\npeople adopting JavaScript and I don't know if that has any\ncorrelation if it is then",
    "start": "1401654",
    "end": "1408692"
  },
  {
    "text": "they did do some damage, but otherwise nothing really has gone bad.",
    "start": "1408692",
    "end": "1413889"
  },
  {
    "text": "So what else do we have, so with the functions also\njust like constructors",
    "start": "1415216",
    "end": "1420684"
  },
  {
    "text": "I can have default parameters right, and I can have secondary\nparameters as well. SecondaryMessage and then\nI can you know use that,",
    "start": "1420684",
    "end": "1428765"
  },
  {
    "text": "and then if I want to invoke\nhelloWorld you can see that I just have the type parameter info",
    "start": "1428765",
    "end": "1435842"
  },
  {
    "text": "and I have the first message\nand I can even change the order so I can say for example\nsecondaryMessage equals value,",
    "start": "1437214",
    "end": "1445508"
  },
  {
    "text": "message equals another right? So you have name parameters\nwhich means you can change the position of the parameters,",
    "start": "1445508",
    "end": "1452123"
  },
  {
    "text": "you have default parameters\nor optional parameters, and then you can also have an\nunlimited number of parameters",
    "start": "1452124",
    "end": "1458700"
  },
  {
    "text": "so unlimited vararg strings strings right,",
    "start": "1458701",
    "end": "1462201"
  },
  {
    "text": "and then I can just write unlimited one, unlimited two,",
    "start": "1467759",
    "end": "1473636"
  },
  {
    "text": "unlimited three okay. Again imagine I knew how to type.",
    "start": "1473636",
    "end": "1480064"
  },
  {
    "text": "So that's it in terms of functions right, it's really really really simple\nand if you do do JavaScript",
    "start": "1480064",
    "end": "1486503"
  },
  {
    "text": "you see that there is\nsomewhat of a resemblance in here and JavaScript right except instead of function we just write fun.",
    "start": "1486503",
    "end": "1493652"
  },
  {
    "text": "We also have the concept of triples sorry, triples except we're\nlimiting it to two values.",
    "start": "1495243",
    "end": "1503683"
  },
  {
    "text": "So if you want to return two\nvalues you could do pair of",
    "start": "1504727",
    "end": "1508894"
  },
  {
    "text": "string string or Int for instance,",
    "start": "1509938",
    "end": "1512771"
  },
  {
    "text": "if you want to do three\nvalues you can do triples.",
    "start": "1518742",
    "end": "1522908"
  },
  {
    "text": "If you want to return more\nvalues use a data class. We initially had triples we removed it,",
    "start": "1523776",
    "end": "1529446"
  },
  {
    "text": "because if one of our\ngoals is that conciseness and also readability and expressiveness, once you start to return\nseven values from a triple,",
    "start": "1529446",
    "end": "1536784"
  },
  {
    "text": "you've lost track okay. But you can do certain things.",
    "start": "1536784",
    "end": "1541987"
  },
  {
    "text": "So for instance if I\nwere to call unlimited, let me just remove the parameter here",
    "start": "1541987",
    "end": "1547121"
  },
  {
    "text": "so that we focus on the type. If I say for instance val\nunlimited equals unlimited,",
    "start": "1547121",
    "end": "1555423"
  },
  {
    "start": "1560000",
    "end": "1855000"
  },
  {
    "text": "now this I can now do\nreturnValue first, second, third,",
    "start": "1561912",
    "end": "1566079"
  },
  {
    "text": "and the problem there is that you kind of lose again the meaning.",
    "start": "1568967",
    "end": "1572825"
  },
  {
    "text": "So you can actually do\ndeconstruction of values. I can do for instance val name email and",
    "start": "1574062",
    "end": "1580938"
  },
  {
    "text": "id equals unlimited right, and then access the values directly,",
    "start": "1583224",
    "end": "1589463"
  },
  {
    "text": "so you can do that with pairs and triples. In fact you can do that\nwith data classes as well. So if I was to take my data\nclass that I have upstairs here",
    "start": "1593248",
    "end": "1601634"
  },
  {
    "text": "which I have an id and a name I could do pretty much the same, I could do the id and the name and then",
    "start": "1601634",
    "end": "1608999"
  },
  {
    "text": "do CustomerKotlin one something,",
    "start": "1610345",
    "end": "1613012"
  },
  {
    "text": "alright so you can\ndeconstruct values as well. Which gives you that kind of\nmore expressiveness right,",
    "start": "1616584",
    "end": "1621914"
  },
  {
    "text": "so here again if I have for\ninstance a list of elements, or a list of numbers and here's\nhow you can declare a list",
    "start": "1621914",
    "end": "1629507"
  },
  {
    "text": "of numbers from one to 100, which is really nice like Haskell, and I can do for number in\nlist of numbers and then do",
    "start": "1629507",
    "end": "1636728"
  },
  {
    "text": "whatever I want with the number, and if I'm returning a list\nof pairs for instance I could",
    "start": "1640342",
    "end": "1645506"
  },
  {
    "text": "do the same thing list of\npairs equals list of and then I",
    "start": "1645506",
    "end": "1649673"
  },
  {
    "text": "can do pair Madrid Spain right?",
    "start": "1651891",
    "end": "1654474"
  },
  {
    "text": "Now you could even do this in a little bit more expressive way which\nI'll then explain to you",
    "start": "1658173",
    "end": "1664136"
  },
  {
    "text": "how it works but if I could actually write for example Paris to France alright.",
    "start": "1664136",
    "end": "1669237"
  },
  {
    "text": "So I'm creating pairs and I'm mapping, here what I'm doing I'm\nmapping Paris to France,",
    "start": "1671251",
    "end": "1678482"
  },
  {
    "text": "Madrid to Spain. And notice that I don't have\nto pass in the pair of the string of string right.",
    "start": "1678482",
    "end": "1685904"
  },
  {
    "text": "It compiling infers all that. So I can do this in the for\nloop as well and just do for example city country in list of pairs and",
    "start": "1685904",
    "end": "1693975"
  },
  {
    "text": "then access each of these as well. And to get rid of that\npotential issue that you have in",
    "start": "1701276",
    "end": "1706528"
  },
  {
    "text": "terms of should I use val or var, will it decrease or\nincrease my readability?",
    "start": "1706528",
    "end": "1711984"
  },
  {
    "text": "You don't name your\nvariables list of pairs, you name them country and city, okay.",
    "start": "1711984",
    "end": "1718026"
  },
  {
    "text": "There's your readability back. Okay any questions? Yes.",
    "start": "1718026",
    "end": "1721616"
  },
  {
    "text": "- [Audience Member] This looks\nawfully a lot like Scala. - Yes.",
    "start": "1723170",
    "end": "1728320"
  },
  {
    "text": "- When you did this you said\nthe reason for not using Scala",
    "start": "1728320",
    "end": "1732487"
  },
  {
    "text": "was the relationship. Why didn't you just improve\nthe relations of Scala?",
    "start": "1734404",
    "end": "1743193"
  },
  {
    "text": "- Okay so the question is why\ndid you do this if there is Scala basically right? Okay, how much time do you,",
    "start": "1744701",
    "end": "1751521"
  },
  {
    "text": "I'm just kidding. The main reason is or I would\nsay look first and foremost,",
    "start": "1751521",
    "end": "1756724"
  },
  {
    "text": "if you are happy with Scala, you don't need Kotlin first and foremost. One of the ways that I put\nit is Scala allows you to do",
    "start": "1756724",
    "end": "1765391"
  },
  {
    "text": "basically anything like\nyou can take any symbol and override it overload it, you can do pretty much\nanything with Scala.",
    "start": "1765391",
    "end": "1772539"
  },
  {
    "text": "With Kotlin you can't. We're purposely restricting the language. We're purposely restricting\nwhat you can and cannot do.",
    "start": "1772539",
    "end": "1779784"
  },
  {
    "text": "That gives us better\npossibilities to tool it, that gives us better possibilities\nin terms of performance.",
    "start": "1779784",
    "end": "1785589"
  },
  {
    "text": "That's the reason. So whereas with Scala you\nmight have for instance in your company I do believe that\nTwitter for instance has this,",
    "start": "1785589",
    "end": "1792623"
  },
  {
    "text": "if I'm mistaken please correct me, they have a style guide of what you should or shouldn't do in Scala.",
    "start": "1792624",
    "end": "1798345"
  },
  {
    "text": "We're trying to get rid of\nthat style guide and say, there's a compiler is telling you what you can and cannot do.",
    "start": "1798345",
    "end": "1804070"
  },
  {
    "text": "So that's basically the best\nanswer I could give you. Another question.",
    "start": "1804070",
    "end": "1808186"
  },
  {
    "text": "- [Audience Member] Value assertion. - Value assertion. - [Audience Member] Assertion through",
    "start": "1811953",
    "end": "1819446"
  },
  {
    "text": "- Do you mean kind of like contract space, if there is some no not right\nnow in Kotlin itself no.",
    "start": "1821849",
    "end": "1828694"
  },
  {
    "text": "Okay so let's move on. I'm sure you're tired of me\ntyping so I'm just going to",
    "start": "1835288",
    "end": "1841444"
  },
  {
    "text": "switch over to some code\nthat I have prepared. You should have said,",
    "start": "1841444",
    "end": "1846607"
  },
  {
    "text": "no we actually aren't tired of you typing, you're doing a great job\njust continue doing it. Don't worry don't worry.",
    "start": "1846607",
    "end": "1853318"
  },
  {
    "text": "(audience laughs) Okay now you know how\nI can navigate my tree.",
    "start": "1853318",
    "end": "1859516"
  },
  {
    "start": "1855000",
    "end": "1933000"
  },
  {
    "text": "So what else do we have? So again I'm gonna show you\nsome things in terms of focusing on readability and expressiveness.",
    "start": "1861793",
    "end": "1868819"
  },
  {
    "text": "It's a bunch of different\nlanguage features but with a focus of why we did it.",
    "start": "1868819",
    "end": "1874429"
  },
  {
    "text": "So in here you can see that\nfor instance that I have conditionals and if can be used",
    "start": "1874429",
    "end": "1879028"
  },
  {
    "text": "as a statement or as an expression. So here I'm using if as an expression, meaning that if the input\nis greater than 100,",
    "start": "1880713",
    "end": "1887611"
  },
  {
    "text": "println something and 30. The last line of the if block\nis the actual return value.",
    "start": "1887611",
    "end": "1894221"
  },
  {
    "text": "And I could in fact return here a string. And that works right,",
    "start": "1894221",
    "end": "1898322"
  },
  {
    "text": "because now our result is\ngoing to be evaluated to any. Any is the top level object in Kotlin.",
    "start": "1899500",
    "end": "1906533"
  },
  {
    "text": "So I could return different\ntypes from an if expression.",
    "start": "1906534",
    "end": "1910701"
  },
  {
    "text": "You could also use if as a statement. If you're using if as an expression, then every branch obviously\nneeds to have some value.",
    "start": "1912885",
    "end": "1921669"
  },
  {
    "text": "The reason for this is\nthat again you avoid those intermediate variable\nassignments et cetera, you can just have the\nexpression return a value.",
    "start": "1921669",
    "end": "1928922"
  },
  {
    "text": "The same thing goes for when and we'll see that in a little bit later on.",
    "start": "1928922",
    "end": "1933540"
  },
  {
    "start": "1933000",
    "end": "2023000"
  },
  {
    "text": "Casting, now this is one thing\nthat is different to Kotlin, and some people aren't happy,",
    "start": "1934607",
    "end": "1940276"
  },
  {
    "text": "a lot of other people are happy, so you tell me if you're\nhappy or aren't happy. By default Kotlin class is a final,",
    "start": "1940276",
    "end": "1946257"
  },
  {
    "text": "meaning that you cannot inherit from them. Who's happy? Who's unhappy?",
    "start": "1946257",
    "end": "1950809"
  },
  {
    "text": "Who doesn't give no, (audience laughs) Alright so if I want to\ninherit from a class,",
    "start": "1953522",
    "end": "1960134"
  },
  {
    "text": "I prefix it with open, okay? Now the open allows me to then implement inherit from that class,",
    "start": "1960135",
    "end": "1967424"
  },
  {
    "text": "so here I have a class employee that inherits from person right? Here I have another\nclass which is contractor",
    "start": "1967424",
    "end": "1974752"
  },
  {
    "text": "that also inherits from person. Now what is the main difference between a contractor and employee?",
    "start": "1974752",
    "end": "1980601"
  },
  {
    "text": "Well to begin with you\ndon't get vacations, well you do you just\npay for them yourself. So here I have a function\nthat is taking a person and",
    "start": "1980601",
    "end": "1990259"
  },
  {
    "text": "it says if person is employee, person vacation days less than 20. Can you tell me what's missing there?",
    "start": "1990259",
    "end": "1997054"
  },
  {
    "text": "Casting because the compiler\ninfers it and you see that it does smart cast to the actual type.",
    "start": "1999781",
    "end": "2007448"
  },
  {
    "text": "So it's not a big oh wow, but it is a big oh I just\nsaved myself some typing again,",
    "start": "2007448",
    "end": "2012976"
  },
  {
    "text": "and again you can say well IntelliJ IDEA or my favorite IDE generates that for me, yes but it adds a lot\nof clutter to the code,",
    "start": "2012976",
    "end": "2020749"
  },
  {
    "text": "which is what we're\ntrying to remove as well. Now who loves nulls?",
    "start": "2020749",
    "end": "2026071"
  },
  {
    "start": "2023000",
    "end": "2306000"
  },
  {
    "text": "(audience laughs) There's always one person.",
    "start": "2027802",
    "end": "2032999"
  },
  {
    "text": "Here is null and here is Java code okay. And by the way this is if\nyou're not familiar with it,",
    "start": "2034902",
    "end": "2041868"
  },
  {
    "text": "this is font literature\nis in IntelliJ IDEA, so that's basically the same\nas me writing this okay.",
    "start": "2041868",
    "end": "2048365"
  },
  {
    "text": "If there's no other reason for you to upgrade to IntelliJ IDEA, that should be it.",
    "start": "2048365",
    "end": "2053605"
  },
  {
    "text": "(audience laughs) That and you can put\nbackgrounds transparent.",
    "start": "2053605",
    "end": "2058350"
  },
  {
    "text": "Okay nevermind, right.",
    "start": "2059990",
    "end": "2061823"
  },
  {
    "text": "Okay so here I have a\nvalidateCustomer that's taking in a Java customer because it is a Java class,",
    "start": "2066907",
    "end": "2073741"
  },
  {
    "text": "and I have if customer is not null, if customer get first name is not null, if customer get first name starts with A,",
    "start": "2073741",
    "end": "2080273"
  },
  {
    "text": "names are not allowed to begin with A, I live in Spain, This is kind of the business\nrules that we have in Spain,",
    "start": "2080273",
    "end": "2085583"
  },
  {
    "text": "don't ask why. And you can see that I have\nseveral levels of nulls because",
    "start": "2085583",
    "end": "2092123"
  },
  {
    "text": "I'm checking continuously\nabout nulls right. In Kotlin we don't have nulls.",
    "start": "2092124",
    "end": "2098379"
  },
  {
    "text": "By default when you declare\na variable it cannot be null. You can create a nullible variable",
    "start": "2098379",
    "end": "2104826"
  },
  {
    "text": "but by default it's not null. So if I come to customer service here,",
    "start": "2104826",
    "end": "2110230"
  },
  {
    "text": "this is a customerinJava but\nif I write CustomerinKotlin, you can see that something changes here.",
    "start": "2114350",
    "end": "2119346"
  },
  {
    "text": "This will never be null. It cannot be null. So I don't need to do null checks.",
    "start": "2122278",
    "end": "2127783"
  },
  {
    "text": "If I want to create or declare\nsomething that's nullable, I add the question mark after it.",
    "start": "2127783",
    "end": "2134209"
  },
  {
    "text": "That means that this\nis now can be nullable. If I do that you can see that\nthe id says to me that only,",
    "start": "2134209",
    "end": "2141585"
  },
  {
    "text": "well the compiler only safe\nwhich is the l vis operator or non-null assertions are\nallowed on a nullable type.",
    "start": "2141585",
    "end": "2150035"
  },
  {
    "text": "Which means essentially\nthat I would have to now do something like if customer is not null,",
    "start": "2150035",
    "end": "2156047"
  },
  {
    "text": "then access customer first name, right? But instead of writing that\ncode you can just use this,",
    "start": "2160429",
    "end": "2169257"
  },
  {
    "text": "which is kind of equivalent\nto the optional so to speak. And you can start to concatenate these.",
    "start": "2171110",
    "end": "2178056"
  },
  {
    "text": "The other option is the\ndouble hashbang which says, I don't care I know it's null\nI want to get a null reference exception because I missed those things,",
    "start": "2179384",
    "end": "2186089"
  },
  {
    "text": "so go ahead and invoke it. Why would you use that, there are some very rare cases\nin which you would use this.",
    "start": "2186089",
    "end": "2193437"
  },
  {
    "text": "Okay now what happens I\ntalked about interoperability. What happens if I do this,",
    "start": "2193437",
    "end": "2198699"
  },
  {
    "text": "notice what happens as\nsoon as I change right. It goes from cursive to non-cursive.",
    "start": "2198699",
    "end": "2205383"
  },
  {
    "text": "Now that's indicating to me\na couple of things but here, customer in Java can be null.",
    "start": "2206865",
    "end": "2213124"
  },
  {
    "text": "So essentially this code can throw a null reference exception. Now an issue to when we\ndid this with Kotlin,",
    "start": "2213124",
    "end": "2220448"
  },
  {
    "text": "we said anything that comes\nfrom Java can be null, therefore anything that comes with Java is going to have a question mark,",
    "start": "2220448",
    "end": "2227358"
  },
  {
    "text": "and therefore you're going to have to use a question mark everywhere. And we saw code bases with\na lot of question marks,",
    "start": "2227358",
    "end": "2235510"
  },
  {
    "text": "and it looked ugly. Then we decided that okay we\ncan make an annotation library which can annotate and infer\nwhen the cases are null",
    "start": "2235510",
    "end": "2244078"
  },
  {
    "text": "and not null and then tell you\nthat certain certain cases, that question mark is not required.",
    "start": "2244078",
    "end": "2250069"
  },
  {
    "text": "It didn't work out too well either. So then we did what any good\nconsultant would do and say",
    "start": "2250069",
    "end": "2255802"
  },
  {
    "text": "it depends, right and we\nleave it in your hands. If you believe that the object that",
    "start": "2255802",
    "end": "2262974"
  },
  {
    "text": "you're getting can be null, add a question mark. If you don't you do know that\nyou're gonna potentially face",
    "start": "2262974",
    "end": "2268634"
  },
  {
    "text": "a null reference exception. So here Kotlin gives you the\nability of any type that's",
    "start": "2268634",
    "end": "2275000"
  },
  {
    "text": "coming from Java that you\ncan declare explicitly as nullable or not nullable.",
    "start": "2275000",
    "end": "2280162"
  },
  {
    "text": "And that also means that\nfor instance if you take an interface in Java and you\nimplement that interface in Kotlin",
    "start": "2280162",
    "end": "2286207"
  },
  {
    "text": "it can use the type\nparameters for example, the types that are being\npassed into the methods",
    "start": "2286207",
    "end": "2292020"
  },
  {
    "text": "that you're overriding or implementing, it can define them as nullable\nor you can remove them and",
    "start": "2292020",
    "end": "2297765"
  },
  {
    "text": "say that they're not nullable. It's basically leaving it\nin your hands in terms of when it makes sense to\nuse it and when it's not.",
    "start": "2297765",
    "end": "2306283"
  },
  {
    "start": "2306000",
    "end": "2617000"
  },
  {
    "text": "Okay so we've seen functions, now no language could\nrespect itself if it wasn't",
    "start": "2307821",
    "end": "2315456"
  },
  {
    "text": "functional especially nowadays, right. And here Kotlin is also functional.",
    "start": "2315456",
    "end": "2321863"
  },
  {
    "text": "Now functional by functional\nlanguage I mean any language that allows you to basically treat functions as primitive objects right.",
    "start": "2321863",
    "end": "2327537"
  },
  {
    "text": "There is a school of thought\nthat believes that the only function language in the world is Haskell, and everything else tries to be Haskell.",
    "start": "2327537",
    "end": "2333961"
  },
  {
    "text": "In the context of can I\nuse functions as primitive building blocks and therefore\nthat is a functional language?",
    "start": "2333961",
    "end": "2341314"
  },
  {
    "text": "Then yes Kotlin is a functional language. And here's how I declare\na higher order function,",
    "start": "2341314",
    "end": "2346643"
  },
  {
    "text": "which is a function that takes a function or returns a function. So here I have a function\nthat takes another function as",
    "start": "2346643",
    "end": "2352525"
  },
  {
    "text": "parameter which is int, takes two parameters of type\nint int and returns an int. And then print line\nfunction two and three,",
    "start": "2352525",
    "end": "2359760"
  },
  {
    "text": "I'm invoking it. Here I have a function declaration.",
    "start": "2359760",
    "end": "2365453"
  },
  {
    "text": "My sum x y int return x\nplus y which we've seen. If I want to call higher\norder with our function",
    "start": "2365453",
    "end": "2373100"
  },
  {
    "text": "I can use it, I can reference it by\nname using colon colon. Now in JavaScript that would be",
    "start": "2373100",
    "end": "2378311"
  },
  {
    "text": "just using the function name. Here you have to use colon colon, and you can do the same\nfor instances of pluses.",
    "start": "2378311",
    "end": "2384854"
  },
  {
    "text": "I can also use lambdas I\nhave lambdas in Kotlin.",
    "start": "2384854",
    "end": "2388854"
  },
  {
    "text": "And you see that I don't\nhave to be explicit about the types it also again infers it.",
    "start": "2390285",
    "end": "2395301"
  },
  {
    "text": "It knows that it requires a\nlambda that takes two integers and returns an integer so\nno need to be explicit.",
    "start": "2395301",
    "end": "2401818"
  },
  {
    "text": "Now we go one step further\nwith the lambdas and do something similar to Groovy.",
    "start": "2401818",
    "end": "2407297"
  },
  {
    "text": "So I can declare this lambda\nnotice how it's actually the IDE didn't insert the bracket to me.",
    "start": "2409750",
    "end": "2415941"
  },
  {
    "text": "And that is because we follow\nthe same convention as Groovy that if the last function to\nanother function is a function,",
    "start": "2417904",
    "end": "2426168"
  },
  {
    "text": "the last parameter to a\nfunction is a function, then you can pass that\noutside of the brackets.",
    "start": "2426168",
    "end": "2431203"
  },
  {
    "text": "In this case I only have a\nsingle parameter so I can just pass it outside of the brackets.",
    "start": "2431203",
    "end": "2436586"
  },
  {
    "text": "Then I can do this multi-line, right.",
    "start": "2436586",
    "end": "2439669"
  },
  {
    "text": "And now that doesn't look like\na function anymore, does it? It looks more kind of like a\nkeyword kind of thing, right.",
    "start": "2442147",
    "end": "2450212"
  },
  {
    "text": "It's like high order could\npotentially be something that I could add to the language.",
    "start": "2450212",
    "end": "2455894"
  },
  {
    "text": "So why would I do that? Because it demos very well. (audience laughs)",
    "start": "2455894",
    "end": "2462275"
  },
  {
    "text": "Here is the using statement in C# that you don't have in Kotlin. So here I have in C# you have basically",
    "start": "2462275",
    "end": "2469533"
  },
  {
    "text": "it's kind of similar\nto try-with-resources, I can take a disposable object, you call using and then make\nsure that after my using",
    "start": "2469533",
    "end": "2475754"
  },
  {
    "text": "block it frees an object. And according to Java\nit would be closeable. So here I'm declaring a\nfunction that takes a closeable,",
    "start": "2475754",
    "end": "2483494"
  },
  {
    "text": "and then an action that takes no parameters and returns Unit. And then I'm going to invoke\nthe action and then finally",
    "start": "2483494",
    "end": "2490348"
  },
  {
    "text": "close it, right close that object. So that means that now I\ncould do something like this.",
    "start": "2490348",
    "end": "2496250"
  },
  {
    "text": "Using my object, let's say whatever that closing object is, do something with the object,",
    "start": "2496250",
    "end": "2502256"
  },
  {
    "text": "and know that once I'm through with it it will be closed for me. So I'm kind of like adding micro,",
    "start": "2504025",
    "end": "2510809"
  },
  {
    "text": "micro's a big word nowadays, micro DSLs to my language. Kind of extending it a little\nbit with some functionality.",
    "start": "2510809",
    "end": "2519289"
  },
  {
    "text": "And we'll see some more\nexamples of this when since, if we go to let with apply,",
    "start": "2519289",
    "end": "2524216"
  },
  {
    "text": "you can see a few more, these are part of the standard library. So with file file if is file,",
    "start": "2525335",
    "end": "2530968"
  },
  {
    "text": "what is missing here? What's missing here is the\nactual object onto which I am",
    "start": "2532763",
    "end": "2537772"
  },
  {
    "text": "calling those methods and\nproperties and member functions, members, that's what's missing here.",
    "start": "2537772",
    "end": "2546229"
  },
  {
    "text": "I don't need to because\nthis with function over here is returning that object\nfor me so I can access",
    "start": "2546229",
    "end": "2552128"
  },
  {
    "text": "it inside my lambda expression. This is part of the standard library.",
    "start": "2552128",
    "end": "2558369"
  },
  {
    "text": "And I'll show you how\nthat's implemented in a bit, because this is called\nthe lambda with receiver,",
    "start": "2558369",
    "end": "2565120"
  },
  {
    "text": "which we'll see what that is. Another thing that we do with\nsimilar to Groovy is if the",
    "start": "2565120",
    "end": "2570143"
  },
  {
    "text": "lambda has a single parameter\nyou don't need to be explicit about it you can just use it, right.",
    "start": "2570143",
    "end": "2577191"
  },
  {
    "text": "So refer to it as it. Now we have a bunch of things\ninside the standard library.",
    "start": "2578137",
    "end": "2585039"
  },
  {
    "text": "So here for instance I\nhave a data class Album, data class Track, then list of albums,",
    "start": "2585039",
    "end": "2590534"
  },
  {
    "text": "Dark Side of the Moon, with its tracks.",
    "start": "2590534",
    "end": "2593144"
  },
  {
    "text": "The standard library provides\nme with out of the box functionality such as\nfilter, sorted flatMap, Map,",
    "start": "2595664",
    "end": "2602386"
  },
  {
    "text": "all of these things that you\ncould think of too when you're kind of chaining results\nfrom collections et cetera.",
    "start": "2602386",
    "end": "2608062"
  },
  {
    "text": "There's also a lot of\nfunctionality that's added in terms of string so you have like for example,",
    "start": "2609702",
    "end": "2614746"
  },
  {
    "text": "insert sub string before et cetera. Now the next idea if you\nlook at each of these,",
    "start": "2614747",
    "end": "2622589"
  },
  {
    "start": "2617000",
    "end": "3007000"
  },
  {
    "text": "you can see that what it actually is, it uses the syntax of the type,",
    "start": "2622589",
    "end": "2627639"
  },
  {
    "text": "this is how you define the\ngeneric type in Kotlin, you prefix it with T and then type,",
    "start": "2629181",
    "end": "2634499"
  },
  {
    "text": "which is gonna be generic, there's a dot and there's a filter, what exactly is that?",
    "start": "2634499",
    "end": "2640055"
  },
  {
    "text": "That's function extensions, right. Now if you're familiar with\nC# you know that you have",
    "start": "2640055",
    "end": "2648499"
  },
  {
    "text": "extension methods in C#\nwhich basically you create a static class and then a\nstatic method inside that",
    "start": "2648499",
    "end": "2654830"
  },
  {
    "text": "static class with a parameter\nbase and that allows you to effectively extend that\nclass with new functionality",
    "start": "2654831",
    "end": "2660746"
  },
  {
    "text": "without having to inherit from it. We have the same thing in Kotlin. They're extension functions. And a lot of the things\nthat you see in Kotlin,",
    "start": "2660746",
    "end": "2667927"
  },
  {
    "text": "a lot of the standard library\nare merely just extension functions on existing\nKotlin and Java types.",
    "start": "2667927",
    "end": "2674535"
  },
  {
    "text": "So here what I'm doing is I'm\nextending the string class with a function called hello, okay.",
    "start": "2674535",
    "end": "2681790"
  },
  {
    "text": "Since I don't have the need to\ncreate this top level class, you know static class\nand then static method,",
    "start": "2685692",
    "end": "2692264"
  },
  {
    "text": "I can just declare that\nextension function in a file. And wherever that package is imported,",
    "start": "2692264",
    "end": "2698596"
  },
  {
    "text": "that extension function can be used. So I've just added hello\nto the string class.",
    "start": "2699860",
    "end": "2706718"
  },
  {
    "text": "I can access the instance of\nthe class that I'm extending, so I can do that with this. My extension functions\ncan also take parameters.",
    "start": "2707767",
    "end": "2715531"
  },
  {
    "text": "And you can also have extension properties not only functions. And now I can do things\nlike this is me hello.",
    "start": "2715531",
    "end": "2721671"
  },
  {
    "text": "This is Hadi welcome. Any string class,",
    "start": "2721671",
    "end": "2726215"
  },
  {
    "text": "any string now has my\nnew extension function.",
    "start": "2727927",
    "end": "2731677"
  },
  {
    "text": "And then you could do\nfunny things for instance, like fun string should equal right,",
    "start": "2734645",
    "end": "2739486"
  },
  {
    "text": "and then you put value string\nand this returns for instance",
    "start": "2740675",
    "end": "2744842"
  },
  {
    "text": "a Boolean and then you say\nreturn value equals this, right.",
    "start": "2745928",
    "end": "2750095"
  },
  {
    "text": "So then I could do something like you know this should equal this, right.",
    "start": "2752630",
    "end": "2757748"
  },
  {
    "text": "But Kotlin also allows you\nto use infix notation when a function has a single parameter\nor an extension function",
    "start": "2761279",
    "end": "2769178"
  },
  {
    "text": "as a single parameter a member function or extension function. So I could use infix\nnow and then I could do",
    "start": "2769178",
    "end": "2776165"
  },
  {
    "text": "this should equal this right.",
    "start": "2776165",
    "end": "2778582"
  },
  {
    "text": "Again one of our goals was\nthe ability to create DSLs and nice looking things and\nwe'll see more examples of this.",
    "start": "2783701",
    "end": "2790695"
  },
  {
    "text": "If you have any questions\njust shout I'm just,",
    "start": "2797375",
    "end": "2801208"
  },
  {
    "text": "so another thing that we\nkind of built in Kotlin, delegation kind of first\nclass support for delegation.",
    "start": "2803424",
    "end": "2809161"
  },
  {
    "text": "Here I have a typical repository pattern, and then repository pattern, sorry yeah a repository,",
    "start": "2809161",
    "end": "2815219"
  },
  {
    "text": "which is the wrong implementation\nof every repository out there in the world, but we've all done it like this.",
    "start": "2816357",
    "end": "2822244"
  },
  {
    "text": "Which is getById that returns a T getAll that returns a list. This little highlighting here\nis that it's saying that this",
    "start": "2822244",
    "end": "2830009"
  },
  {
    "text": "could be a contravariance so\nin Kotlin we have a support for covariance and contravariance.",
    "start": "2830009",
    "end": "2836721"
  },
  {
    "text": "Now I have a controller that is passing in as parameter that repository.",
    "start": "2836721",
    "end": "2841252"
  },
  {
    "text": "Now in a typical scenario\nwhat you would do is you could create this as a property\nand then do something like",
    "start": "2843083",
    "end": "2848863"
  },
  {
    "text": "repository.getAll right,",
    "start": "2848863",
    "end": "2850863"
  },
  {
    "text": "injecting that dependency in. Here this isn't a property\nI can't access repository,",
    "start": "2854011",
    "end": "2859661"
  },
  {
    "text": "because it's not it's just the\nparameter to the constructor. You can access it in a constructor block,",
    "start": "2859662",
    "end": "2866712"
  },
  {
    "text": "so here I can access repository\nbut not in the class itself. But I've added this line\nhere which says repository",
    "start": "2866712",
    "end": "2873026"
  },
  {
    "text": "customer by repository which\nis basically telling me that this functionality of the\nrepository is delegated to the",
    "start": "2873026",
    "end": "2878656"
  },
  {
    "text": "repository class that's been passed in. Effectively what that translates\ninto that I have access to",
    "start": "2878656",
    "end": "2886172"
  },
  {
    "text": "the methods of this interface\nwithout having to have a private property to\nprefix it and use that.",
    "start": "2886173",
    "end": "2892834"
  },
  {
    "text": "So I can just do getById and\njust access any parameter",
    "start": "2896188",
    "end": "2900355"
  },
  {
    "text": "that's passed in anything\nthat is delegated. You could have more than one delegate. Now the question might arise\nthat if I have five delegates,",
    "start": "2904345",
    "end": "2911429"
  },
  {
    "text": "how do I know which\nmethod belongs to which",
    "start": "2911429",
    "end": "2915012"
  },
  {
    "text": "parameter that's been passed in? In response to which I would\nsay invest in a good IDE.",
    "start": "2916682",
    "end": "2922895"
  },
  {
    "text": "Or better yet don't, don't pass in five parameters, right.",
    "start": "2922895",
    "end": "2929206"
  },
  {
    "text": "If your class is you know if\nyou're injecting more than a couple of dependencies,",
    "start": "2929207",
    "end": "2934879"
  },
  {
    "text": "that is a strongly bound class you know, it's tightly bound it's tightly coupled.",
    "start": "2934879",
    "end": "2943229"
  },
  {
    "text": "Because that class has to be\naware of too many things that are going on it's\norchestrating too many things.",
    "start": "2943229",
    "end": "2948828"
  },
  {
    "text": "So there's probably a level\nof abstraction or something else missing there, right. The solution isn't\npassing in a collection, or just prefixing it,",
    "start": "2948828",
    "end": "2955411"
  },
  {
    "text": "it's just redesigning it a little bit.",
    "start": "2955411",
    "end": "2958578"
  },
  {
    "text": "Now if you are familiar with Java, you know that Java has streams.",
    "start": "2960595",
    "end": "2966029"
  },
  {
    "text": "Everything that I've shown\nyou up to now has basically been eager evaluation so you\nknow when I do a filter it's",
    "start": "2966029",
    "end": "2972994"
  },
  {
    "text": "going to list all of the elements, it's going to evaluate everything, but we also have lazy evaluation, and it initially in Kotlin\nyou would say asStream,",
    "start": "2972995",
    "end": "2981905"
  },
  {
    "text": "but then Java came along with Stream and then we had to rename it, so we called it asSequence.",
    "start": "2981905",
    "end": "2987734"
  },
  {
    "text": "And this allows you to take any collection and do a lazy evaluation. If you can't do that on a collection,",
    "start": "2987735",
    "end": "2993410"
  },
  {
    "text": "you also have the generateSequence\nfunction as part of the standard library which\nallows you to basically create",
    "start": "2993410",
    "end": "2999345"
  },
  {
    "text": "sequences with a little\nbit more complex code.",
    "start": "2999345",
    "end": "3003178"
  },
  {
    "text": "Last but not least, how many of you are familiar with Haskell?",
    "start": "3004705",
    "end": "3013007"
  },
  {
    "start": "3007000",
    "end": "3232000"
  },
  {
    "text": "Or algebraic data types? Okay so on the notation of\nalgebraic data types is,",
    "start": "3013008",
    "end": "3020480"
  },
  {
    "text": "how to make data types basically\nas a type that could be multiple types so for example Boolean,",
    "start": "3021418",
    "end": "3026656"
  },
  {
    "text": "it can be a true or it\ncan be a a false right? So the way we do it in Kotlin is we use",
    "start": "3026656",
    "end": "3032048"
  },
  {
    "text": "the sealed modifier right. So I say sealed class and\nthat basically means that",
    "start": "3032048",
    "end": "3039548"
  },
  {
    "text": "here I have a class PageResult, and it has a subclass\nsuccess and a subclass error.",
    "start": "3039548",
    "end": "3046493"
  },
  {
    "text": "As soon as I add sealed to it, it means that there is never ever gonna be any other class\nthat inherits that.",
    "start": "3046493",
    "end": "3053134"
  },
  {
    "text": "Which means that I could then\ndo some exhaustive you know checks on something so,",
    "start": "3053134",
    "end": "3059289"
  },
  {
    "text": "here I'm saying that PageResult will either be success or error. And again why would I want to do this?",
    "start": "3059289",
    "end": "3064560"
  },
  {
    "text": "Because again it leads to\na little bit nicer code. So here I have for instance\nfunction getPage that returns",
    "start": "3064560",
    "end": "3071762"
  },
  {
    "text": "a PageResult and I say if\nthe OperationIsSuccessful, return type success.",
    "start": "3071762",
    "end": "3076849"
  },
  {
    "text": "If it is an error return a type error. Instead of having a single\nreturn type that then I have to",
    "start": "3076850",
    "end": "3083636"
  },
  {
    "text": "check for a flag if it is\nerror then I have to know by",
    "start": "3083636",
    "end": "3087803"
  },
  {
    "text": "looking at the docs which\nvalue which return values are actually containing the error message,",
    "start": "3088907",
    "end": "3094721"
  },
  {
    "text": "which ones are only in case of successful. I can now have a type return\none of multiple types.",
    "start": "3094721",
    "end": "3100849"
  },
  {
    "text": "What you can do this\nobviously without the sealed, but what the sealed is doing\nis guaranteeing you the",
    "start": "3100849",
    "end": "3105987"
  },
  {
    "text": "inheritance is closed with just those classes that are sub classing it.",
    "start": "3105987",
    "end": "3111730"
  },
  {
    "text": "This is Kotlin 1.0. In 1.1 you can actually put\nthis outside of the class,",
    "start": "3112775",
    "end": "3119499"
  },
  {
    "text": "so you don't need to have\nthose classes inside the class, which means that you don't\nhave to re-reference them as",
    "start": "3119499",
    "end": "3125406"
  },
  {
    "text": "page result of success, you can just reference them as success. The only limitation is that\nany class that inherits",
    "start": "3125406",
    "end": "3133417"
  },
  {
    "text": "from your sealed class has\nto be in the same file, okay.",
    "start": "3133417",
    "end": "3137584"
  },
  {
    "text": "Any questions? Yes.",
    "start": "3142210",
    "end": "3147416"
  },
  {
    "text": "- [Audience Member] Is this\nsimilar to discriminated units? - Yes similar to discriminating units.",
    "start": "3150766",
    "end": "3154929"
  },
  {
    "text": "Well as I said in 1.1 you\ncan now get rid of the prefix with the page result so\nthat minimizes it somewhat.",
    "start": "3164147",
    "end": "3172347"
  },
  {
    "text": "And the other thing is here\nis one issue which if this is",
    "start": "3172347",
    "end": "3176514"
  },
  {
    "text": "a sealed class and if I add for\nexample a class Another here which inherits from PageResult,",
    "start": "3177734",
    "end": "3185048"
  },
  {
    "text": "what would you expect that when to do? Would you expect this when to give you a warning that it's non-exhaustive?",
    "start": "3186103",
    "end": "3193171"
  },
  {
    "text": "It does not, and it does not on enums or on this, and we had it doing it on\nenums and we got a lot of",
    "start": "3193171",
    "end": "3200889"
  },
  {
    "text": "complaints so one of the\nthings that we're looking at is outside of the whole concept\nof sealed is potentially and",
    "start": "3200889",
    "end": "3208733"
  },
  {
    "text": "this is just something an idea, please don't quote me on this, is he says as he knows\nit's being recorded,",
    "start": "3208733",
    "end": "3217148"
  },
  {
    "text": "is adding sealed keyword to when, so essentially saying that\nthis when is also sealed.",
    "start": "3218095",
    "end": "3224993"
  },
  {
    "text": "Right so let me just finish\noff with a couple of slides.",
    "start": "3226209",
    "end": "3230376"
  },
  {
    "start": "3232000",
    "end": "3526000"
  },
  {
    "text": "Some other things that people are doing, well we're doing, ANKO is open source library\nwhich if you're doing Android development allows\nyou to write descriptive",
    "start": "3233532",
    "end": "3241511"
  },
  {
    "text": "layouts without having to use XML, just basically static type language.",
    "start": "3241511",
    "end": "3247352"
  },
  {
    "text": "Android extensions is the, the compiler comes with a plugin ability.",
    "start": "3248731",
    "end": "3254107"
  },
  {
    "text": "So you can actually change\nsome things and what we do with Android extensions is if\nyou're familiar with Android",
    "start": "3254107",
    "end": "3259561"
  },
  {
    "text": "development a lot of times\nyou have to do find by view rid text view and then cast it.",
    "start": "3259561",
    "end": "3264184"
  },
  {
    "text": "With this plugin what it'll\nallow you to do is actually reference the type, and one thing that we're also\nabout to release soon is,",
    "start": "3265533",
    "end": "3272786"
  },
  {
    "text": "anyone does Spring? So Spring one of the issues\nthat Spring developers have",
    "start": "3272787",
    "end": "3278176"
  },
  {
    "text": "with Kotlin is that they have to decorate everything with open. We're going to be releasing a plugin, and when I say plugin I\ndon't only mean for IDE but",
    "start": "3278176",
    "end": "3285312"
  },
  {
    "text": "I mean for any build to\nMaven, Gradle, et cetera, which you can annotate\ncertain classes that say that",
    "start": "3285312",
    "end": "3290643"
  },
  {
    "text": "if they have this annotation, by default they're open, which makes it again more concise when you're writing Spring.",
    "start": "3290643",
    "end": "3297556"
  },
  {
    "text": "Spring Boot they're good fans\nand Spring Boot already has support for Kotlin so you could generate your templates using Kotlin.",
    "start": "3298613",
    "end": "3305248"
  },
  {
    "text": "Kobalt as I already mentioned\nis a flavor of Gradle using Kotlin to define builds.",
    "start": "3305248",
    "end": "3310479"
  },
  {
    "text": "SPEK is a library or a testing\nframework that I've written, which is kind of similar to Jasmine,",
    "start": "3310479",
    "end": "3317751"
  },
  {
    "text": "Mocha if you're familiar with\nJavaScript those frameworks. And the roadmap co-routines,",
    "start": "3317751",
    "end": "3323493"
  },
  {
    "text": "we're basically implementing\na generic co-routine, so in terms of a synchronous programming, we are not going to say\nwe're gonna go with the C#",
    "start": "3324635",
    "end": "3332379"
  },
  {
    "text": "approach of a sync of waves\nor we're gonna go with a reactive extension approach\nor anything like that.",
    "start": "3332379",
    "end": "3337450"
  },
  {
    "text": "We have implemented co-routines\nwhich then we provide a series of out of the box\nfunctionality as a part of the standard library which the\ncompiler then transforms",
    "start": "3337450",
    "end": "3343873"
  },
  {
    "text": "into state machines right. So you can use a sync of\nwaves or you can use yield or",
    "start": "3343873",
    "end": "3349548"
  },
  {
    "text": "you can use anything you want and not be bound to a specific type.",
    "start": "3349548",
    "end": "3354711"
  },
  {
    "text": "Data class hierarchies, type aliases, deconstructing lambdas, bound method references, delegated properties local,",
    "start": "3354711",
    "end": "3360324"
  },
  {
    "text": "and Java 8 9. We still are committed to\nproviding Java 6 support, but if you're targeting Java 8 or 9,",
    "start": "3360324",
    "end": "3367060"
  },
  {
    "text": "we will improve in terms of\ncode optimization and certain functionality that is provided as",
    "start": "3367060",
    "end": "3372997"
  },
  {
    "text": "part of the standard library. And JavaScript support and\nalso we are now started on",
    "start": "3372997",
    "end": "3379638"
  },
  {
    "text": "Native so there will be Kotlin to Native. It's kind of early stages right now, but we've already got\nsomething in the works.",
    "start": "3379638",
    "end": "3387888"
  },
  {
    "text": "Next steps if you are\ninterested kotlinglang.org, try.kotlinglang.org which is\nan in-browser kind of IDE,",
    "start": "3387888",
    "end": "3393840"
  },
  {
    "text": "which allows you to try a\nseries of co-ons without having to download or install anything.",
    "start": "3393840",
    "end": "3399192"
  },
  {
    "text": "If you want to download you can do that, they're also available on GitHub. Books there's already\nactually I think another one",
    "start": "3399192",
    "end": "3406213"
  },
  {
    "text": "in the works right now, Kotlin for Android\nDevelopers and this is by my colleagues which is now\nfinished in terms of text and",
    "start": "3406213",
    "end": "3411615"
  },
  {
    "text": "it should be published soon, but it's in the early access program. I just finished nine hours of,",
    "start": "3411615",
    "end": "3417282"
  },
  {
    "text": "this is my self-promotion forgive me, I've finished just nine hours\nof Kotlin O'Reilly course",
    "start": "3417282",
    "end": "3422703"
  },
  {
    "text": "which should be available\nsometime in November on Safari, and community very active\ncommunity on Slack.",
    "start": "3422703",
    "end": "3429349"
  },
  {
    "text": "Just now this snapshot was\ntaken 4,364 members already.",
    "start": "3430996",
    "end": "3435163"
  },
  {
    "text": "We've got forums, Twitter, all of that. So if you start with it, come to the Kotlin Slack\nbecause you will get help there",
    "start": "3436019",
    "end": "3443901"
  },
  {
    "text": "as well as in our forums. So to summarize, we tried to create a very\npragmatic language that has",
    "start": "3443901",
    "end": "3450106"
  },
  {
    "text": "a very easy learning curve, it inter-operates with Java so it provides a low-risk adoption,",
    "start": "3450106",
    "end": "3455884"
  },
  {
    "text": "you don't have to limit it to tests, you can just mix and match\nclasses in fact if you use IntelliJ you can take a Java\nclass and through a keyboard",
    "start": "3455884",
    "end": "3463299"
  },
  {
    "text": "action convert it to Kotlin code. It's not the most idiomatic Kotlin code, but it does give you a starting point,",
    "start": "3463299",
    "end": "3468539"
  },
  {
    "text": "and obviously this is\nsubjective but coming from C# having stayed away from\nJava I do find it enjoyable.",
    "start": "3468539",
    "end": "3476578"
  },
  {
    "text": "And this is kind of something\nlike when people say to you you know why should IntelliJ\nover Eclipse I'm like, try it,",
    "start": "3476579",
    "end": "3482247"
  },
  {
    "text": "if it suits you if you\nfind it better for you, for your needs then great. If not don't.",
    "start": "3482247",
    "end": "3488531"
  },
  {
    "text": "And our commitment to Kotlin\nis that it's here to stay because we're using it in our products, so the business model around\nKotlin is JetBrains tooling.",
    "start": "3488531",
    "end": "3498237"
  },
  {
    "text": "It is not consulting\nor anything like that. And I'll just finish off with this.",
    "start": "3498237",
    "end": "3504146"
  },
  {
    "text": "Researched Kotlin last night\nand then spending the morning looking at mountains of\nboilerplate Java in Android Studio. I see why they did it.",
    "start": "3504146",
    "end": "3509640"
  },
  {
    "text": "Yeah that pretty much\nsums up why we did it. Thank you. (audience applauds)",
    "start": "3509640",
    "end": "3516897"
  }
]