[
  {
    "start": "0",
    "end": "111000"
  },
  {
    "text": "Thank you, welcome everybody So, my name is Roman I'll be talking about suicide with Colin curtains. So I work I did lots of things in the past",
    "start": "13240",
    "end": "24569"
  },
  {
    "text": "Now I work for JetBrains That's company behind",
    "start": "25210",
    "end": "29669"
  },
  {
    "text": "IDE you Might heard of that's called IntelliJ IDEA and we're also doing a language called coughing and my talk today is going to be about cotton",
    "start": "30730",
    "end": "39479"
  },
  {
    "text": "But it's going to be based on my prior experience I mean because in the past life I've been doing lots of enterprise back-end development in Java",
    "start": "40150",
    "end": "49290"
  },
  {
    "text": "So I've been job programming for more than 15 years And that's kind of lots of what I do now is kind of reflection of that",
    "start": "49290",
    "end": "56459"
  },
  {
    "text": "problems of that experience of my my past time but You so let's get acquainted a little bit. So who you actually?",
    "start": "56980",
    "end": "65040"
  },
  {
    "text": "Uses cotton as their programming language Who knows about cotton? Okay good",
    "start": "65799",
    "end": "72688"
  },
  {
    "text": "so so Cotton is this",
    "start": "74020",
    "end": "80009"
  },
  {
    "text": "programming language sorts of things in general purpose permission you can do Programming services GBM you can do Android you can do",
    "start": "80679",
    "end": "88048"
  },
  {
    "text": "Code for browser for native. I'm not going to talk about all of that But this talk is going to be like mostly focused on server-side cotton application. So",
    "start": "89049",
    "end": "97258"
  },
  {
    "text": "That's just that's the topic of this talk. But let's first reflect a bit on how we",
    "start": "98049",
    "end": "104938"
  },
  {
    "text": "You know program tower server-side code in the past So what happened like 2000s when I started programming?",
    "start": "105909",
    "end": "111420"
  },
  {
    "start": "111000",
    "end": "152000"
  },
  {
    "text": "So in 2000 when I started programming so we had this old-school clancer manner with applications. So we had",
    "start": "111520",
    "end": "118529"
  },
  {
    "text": "clients that Called a server a server usually had like bunch of executor threats to handle what first business logic and the backend",
    "start": "119259",
    "end": "126809"
  },
  {
    "text": "We usually had a database that was kind of general data flow in the typical",
    "start": "126810",
    "end": "131610"
  },
  {
    "text": "Typical server of two thousands and you know whenever requests from the client came",
    "start": "132340",
    "end": "138539"
  },
  {
    "text": "It was assigned to one of the threats and you know, usually that did some logic went to database",
    "start": "139050",
    "end": "146520"
  },
  {
    "text": "Worked for a while, then returned response all fine and",
    "start": "148060",
    "end": "152699"
  },
  {
    "start": "152000",
    "end": "248000"
  },
  {
    "text": "When we wanted to cite this application to configure it It was easy the rule of thumb we used is that we simply configure it as many threats applications as there are database connections because most things",
    "start": "153670",
    "end": "166380"
  },
  {
    "text": "First did at that time they were going to database So what's really easy to configure real easy to scale like if your skill you skill database?",
    "start": "167080",
    "end": "175169"
  },
  {
    "text": "So they can support more connections. You scale your service you increase number of instances was pretty straightforward",
    "start": "175750",
    "end": "181800"
  },
  {
    "text": "until the time service disappeared so when I was Started two thousand something",
    "start": "182770",
    "end": "189330"
  },
  {
    "text": "You know in addition to database that we used to have",
    "start": "189910",
    "end": "194460"
  },
  {
    "text": "We started to have additional services for authentication For you know, virus additional configuration storage and application started grew and started, you know",
    "start": "195610",
    "end": "207239"
  },
  {
    "text": "fermenting fermenting and over time we ended up with applications where everything that server talked to is some kind of another service a",
    "start": "207370",
    "end": "216839"
  },
  {
    "text": "Database itself became just one Yet another service. We like this old architecture of",
    "start": "217270",
    "end": "222959"
  },
  {
    "text": "Application database turned into the service-oriented architecture where the application talks to lots and lots of services",
    "start": "223660",
    "end": "229950"
  },
  {
    "text": "And in this new world, you know, how do you configure it? How do says it? That's become a",
    "start": "230410",
    "end": "235410"
  },
  {
    "text": "Complex story and compensate became because the logic we usually write in enterprises complex",
    "start": "236140",
    "end": "243899"
  },
  {
    "text": "So here in Chicago and the things I worked on for my life was write in different trading applications",
    "start": "244630",
    "end": "250439"
  },
  {
    "start": "248000",
    "end": "322000"
  },
  {
    "text": "So let's take an example that you're writing training applications so you might might be having some functioning application to place an order and",
    "start": "250450",
    "end": "259980"
  },
  {
    "text": "it might have You know to ask one service to an account information",
    "start": "260590",
    "end": "266160"
  },
  {
    "text": "about this order and then depending on some condition may not always but even in some logic",
    "start": "266500",
    "end": "271890"
  },
  {
    "text": "May go to some other service you know to Load some margin consideration for this account and then it might have to do some local computation for it to compute something",
    "start": "272460",
    "end": "282209"
  },
  {
    "text": "That might be CPU intensive or not and this is just small groups and what complex business logic might look like in practice, you know that petition blue road they had",
    "start": "282430",
    "end": "294030"
  },
  {
    "text": "Thousands of lights of logic in a single method, you know coal stacks could be you know ten twenty methods deep and it would kink and different conditions can can",
    "start": "294699",
    "end": "304919"
  },
  {
    "text": "Contact all the different kinds of services go to different databases to aggregate this information return the answer to the end-user",
    "start": "305169",
    "end": "312598"
  },
  {
    "text": "So and what happens then if just one of those services?",
    "start": "314080",
    "end": "318330"
  },
  {
    "text": "Becomes slow like for example this one we may not even call it on every code path",
    "start": "319270",
    "end": "324750"
  },
  {
    "start": "322000",
    "end": "340000"
  },
  {
    "text": "We may be only call it on there some conditions. But what happens if it's slow for somebody's I have to die",
    "start": "324750",
    "end": "330509"
  },
  {
    "text": "Maybe it was misconfigured. You know, somebody deployed you release and",
    "start": "330759",
    "end": "335098"
  },
  {
    "text": "It became much slower couldn't handle the Lord nowadays So what happens is that in the traditional architecture?",
    "start": "335919",
    "end": "343349"
  },
  {
    "start": "340000",
    "end": "463000"
  },
  {
    "text": "Where there is a call to the service the thread that executes the call gets what it sits there waiting for",
    "start": "344110",
    "end": "351300"
  },
  {
    "text": "response, and now if Another call comes in, you know and happens to touch the service and the service is slow",
    "start": "351490",
    "end": "359699"
  },
  {
    "text": "it gets blocked too and over time you can quickly end up with only executor threads be blocks because",
    "start": "359699",
    "end": "366749"
  },
  {
    "text": "Just one of your services is slow and you may not even use the service interpret code path, you know your application could have",
    "start": "367000",
    "end": "375210"
  },
  {
    "text": "Handled other users who do different kinds of requests who that don't require this particular service, but what you ended up with?",
    "start": "375880",
    "end": "383609"
  },
  {
    "text": "Your whole application blocked, you know? your customer calls",
    "start": "384490",
    "end": "389710"
  },
  {
    "text": "Wakes up everybody, you know everybody works frantically to figure out the problem fix it you get this cascading failure one slow service in your code and",
    "start": "389710",
    "end": "397889"
  },
  {
    "text": "You get cascading fills throughout your whole enterprise like everything starts falling down like dominoes just because one slow service somewhere",
    "start": "397960",
    "end": "405630"
  },
  {
    "text": "yeah, what we see here is an example of",
    "start": "406750",
    "end": "410850"
  },
  {
    "text": "Morden code and the code that weights You see in because of the service-oriented architecture of nowaday applications",
    "start": "411880",
    "end": "418919"
  },
  {
    "text": "What we have now is that most of our code does not spend its time",
    "start": "419139",
    "end": "423779"
  },
  {
    "text": "Actually consuming CPU actually doing some work Our modern code our modern service a code what it is",
    "start": "424780",
    "end": "431160"
  },
  {
    "text": "Most of the damages waits just waits for response for some other service to do something",
    "start": "431160",
    "end": "436139"
  },
  {
    "text": "That's what happens nowadays in our code and there is a solution to this problem There is a solution how you write these kinds of applications. So they scale solutions called a synchronous program",
    "start": "436210",
    "end": "446369"
  },
  {
    "text": "It's been known, you know for for ages as a solution to write in this kind of code that Waits",
    "start": "446500",
    "end": "452609"
  },
  {
    "text": "so this solution that A synchronous programming tells us is that instead of a blocking a thread while you wait",
    "start": "453430",
    "end": "461549"
  },
  {
    "text": "Let's actually release the thread in week without blocking thread let's let's that'll work and let the authorized do something else and",
    "start": "462280",
    "end": "470879"
  },
  {
    "start": "463000",
    "end": "647000"
  },
  {
    "text": "whenever this slow service response has then wake up find a thread to process the result of",
    "start": "471310",
    "end": "477359"
  },
  {
    "text": "This service and then return response, but it looks nice on a picture on this diagram",
    "start": "477669",
    "end": "484139"
  },
  {
    "text": "What is it about how you achieve it in practice, and there are multiple ways to achieve in practice. I",
    "start": "484139",
    "end": "489629"
  },
  {
    "text": "see the the it instead of like regular function that",
    "start": "490270",
    "end": "496619"
  },
  {
    "text": "Does something or you either use callbacks? So for example?",
    "start": "497199",
    "end": "501839"
  },
  {
    "text": "you add a Parameter to your function that will get cold when the answer is ready. That's a way to unblock this read, you know, and then only",
    "start": "502389",
    "end": "513179"
  },
  {
    "text": "Only use it back when the answer is ready. You can use Futures or promises as they call, you know and wrap your result type in a future",
    "start": "514479",
    "end": "524130"
  },
  {
    "text": "Nowadays, it's popular chose to use reactive programming which is kind of a round of the same theme you use the type like Mona who?",
    "start": "524770",
    "end": "531989"
  },
  {
    "text": "Have you watched? The talk from just about reactive spring",
    "start": "531990",
    "end": "536639"
  },
  {
    "text": "Well, lots of you though. So that was the the topic basically that who was a how you program with those reactive types, right?",
    "start": "537830",
    "end": "543549"
  },
  {
    "text": "so you Change your all your functions to return this mana for example that so instead of returning one results",
    "start": "543650",
    "end": "551589"
  },
  {
    "text": "You return the mana for yourself and and then you program with it but programming with it is not",
    "start": "551590",
    "end": "558189"
  },
  {
    "text": "Very pretty because you know like your code gets these combinations. It's becoming hard to read so people",
    "start": "558830",
    "end": "565960"
  },
  {
    "text": "Are always looking for other? Solutions to this problem. So for example some languages",
    "start": "567260",
    "end": "572260"
  },
  {
    "text": "Propose this a sink await paradigm, which also based on futures which are async await called",
    "start": "572780",
    "end": "579339"
  },
  {
    "text": "tasks for example, c-sharp they call tasks or in JavaScript they called promise, but I think a weightless you you know, let's your program in a more",
    "start": "579920",
    "end": "590109"
  },
  {
    "text": "Natural way then Without like lots of those Combinator's and stuff and cotton curtains follows a simple model",
    "start": "591620",
    "end": "600009"
  },
  {
    "text": "through the thing called suspend functions, which ways you'll write your functions naturally without in futures you just add",
    "start": "600590",
    "end": "607359"
  },
  {
    "text": "Suspend modifier to indicate that function can suspend and this talk is not going to be in particular about this suspend mechanism",
    "start": "607700",
    "end": "614229"
  },
  {
    "text": "So we're going to be and scaling server-side So you're really interested in figuring in learning more about all those different paradigms for insurance program",
    "start": "614230",
    "end": "622089"
  },
  {
    "text": "And so I really welcome you to watch one of my other talks either Introduction to curtains from cotton con. Aw",
    "start": "622090",
    "end": "628810"
  },
  {
    "text": "The talker recently did on go to Copenhagen which was like introductory You know how this will work. So that kind of will fill the gap on",
    "start": "629150",
    "end": "637720"
  },
  {
    "text": "Low-level details on what was going to know it was different programs etc. And we'll get back to server-side applications",
    "start": "638690",
    "end": "643960"
  },
  {
    "text": "But we for go back will still need to One thing little thing to understand for those who don't know how it works behind",
    "start": "645740",
    "end": "652120"
  },
  {
    "start": "647000",
    "end": "702000"
  },
  {
    "text": "this is what's suspending functions in carbon it worth understanding at least a little bit that behind the scenes every suspending function is actually",
    "start": "652120",
    "end": "659169"
  },
  {
    "text": "Transformed to a function with a callback so whenever compiler sees this spam modifiers actually adds a special callback parameter and",
    "start": "659930",
    "end": "670519"
  },
  {
    "text": "The question is then why so why it's a coal-based why it's not based for example in futures because nowadays futures",
    "start": "672509",
    "end": "679368"
  },
  {
    "text": "Is or fire in two of them? Like right before is the most popular approach to a synchronous programming that's used in the world",
    "start": "679769",
    "end": "686060"
  },
  {
    "text": "You know other programming language just do it like c-sharp does it? javascript does it and",
    "start": "686060",
    "end": "691670"
  },
  {
    "text": "For example reactive programming also future based so why then cottony and compiler is not future base",
    "start": "692160",
    "end": "698540"
  },
  {
    "text": "But Kovac based are there multiple reasons to that so key reason and for service side, that's very important",
    "start": "698540",
    "end": "705319"
  },
  {
    "start": "702000",
    "end": "823000"
  },
  {
    "text": "Which is performance that's also discussed before the starter. Nobody cares about but still since we're general-purpose, you know",
    "start": "705319",
    "end": "712488"
  },
  {
    "text": "we have to care even for those, you know fraction of people who who",
    "start": "713100",
    "end": "717500"
  },
  {
    "text": "care about performance So but see future is institutionalization primitive when talk about programming with futures",
    "start": "718380",
    "end": "725329"
  },
  {
    "text": "future is something that synchronizes to Process is going concurrently one processes promises to deliver a value in the future the other waits for it and because of this synchronization",
    "start": "726569",
    "end": "736969"
  },
  {
    "text": "That's required for futures futures always has a cost. So whenever program was who should so is it cost and",
    "start": "736970",
    "end": "744019"
  },
  {
    "text": "on But on the others a callback that coming apart is a low-level Primitive it's not in synchronization. It's just low level think if you look at every futures library futures the promises there",
    "start": "744569",
    "end": "756019"
  },
  {
    "text": "It's actually always built on top of callback. So in every For example reactive library. There is a function. You can call up subscribe and get a callback duty",
    "start": "756019",
    "end": "765529"
  },
  {
    "text": "Will you'll get called or incomplete will future in Java you can ask it to",
    "start": "765529",
    "end": "771169"
  },
  {
    "text": "Install a callback get notified when operation completes so callbacks are there's always a Kovac behind Kobuk is more low-level",
    "start": "771720",
    "end": "779389"
  },
  {
    "text": "So so we're going to read it efficient. Like we should make sense to use the low-level Meghan It's not a high level because you can then build high level things on top of them",
    "start": "779870",
    "end": "787609"
  },
  {
    "text": "And because we're using callbacks it makes very easy for cutting co2 into it with whatever a",
    "start": "788100",
    "end": "793699"
  },
  {
    "text": "synchronous i/o library you're using in special in Jovian world, and we're talking about GBM now lots of lots of",
    "start": "793889",
    "end": "799608"
  },
  {
    "text": "libraries available For asynchronous IO there are low-level a synchronous a library like MIT, for example",
    "start": "800850",
    "end": "807079"
  },
  {
    "text": "there are high-level asynchronous library that lets you do HTTP other stuff synchronously and they all",
    "start": "807630",
    "end": "813559"
  },
  {
    "text": "Support callbacks you can ask any of those libraries give the it a callback and it calls you back when operation is ready",
    "start": "814920",
    "end": "822079"
  },
  {
    "text": "So because Cartland curtains are and suspend functions are call it based You know we can if we for example implement for example this load margin function",
    "start": "822320",
    "end": "831950"
  },
  {
    "start": "823000",
    "end": "884000"
  },
  {
    "text": "Might be based on somebody else's a synchronous library, you know, we can easily integrate it",
    "start": "832380",
    "end": "837499"
  },
  {
    "text": "we just implemented as suspend curtain call and That gives us a call back. We should invoke when operation is ready. So now we can write our integration code inside of there",
    "start": "837500",
    "end": "848510"
  },
  {
    "text": "to invoke Callback when the operation is ready So if somebody gave us third-party library, here's a library that does this a synchronous way",
    "start": "849150",
    "end": "857989"
  },
  {
    "text": "We can quickly easily integrate it and it would present to the rest of code as suspending function",
    "start": "858390",
    "end": "863449"
  },
  {
    "text": "So now the rest of code doesn't need to care how to install callbacks it just calls",
    "start": "863450",
    "end": "868099"
  },
  {
    "text": "Lot margin and that suspends and resumes when operation is ready",
    "start": "868830",
    "end": "873619"
  },
  {
    "text": "But then how it works it scale in the larger application. So like not individual function, but",
    "start": "874380",
    "end": "881090"
  },
  {
    "text": "the application itself So let's take you to make it take a look at our picture",
    "start": "881730",
    "end": "887240"
  },
  {
    "start": "884000",
    "end": "898000"
  },
  {
    "text": "so coal comes from the clients, you know threats allocated start to do something, but then we have truly is a threat somehow so",
    "start": "887240",
    "end": "894740"
  },
  {
    "text": "how this might work you see if Let's take a look at the server framework we're using like for example, you just print or with some using some in-house",
    "start": "896160",
    "end": "905959"
  },
  {
    "start": "898000",
    "end": "950000"
  },
  {
    "text": "Framework for writing our server-side application or maybe j2ee something else?",
    "start": "906750",
    "end": "911900"
  },
  {
    "text": "So there is our top level function place order that's the operation for our clients to invoke if all we can give to our framework is",
    "start": "913140",
    "end": "921110"
  },
  {
    "text": "This function to place an order There is no way We can release a threat because just the very signature the way to invoke tells like it has to return response",
    "start": "921480",
    "end": "931099"
  },
  {
    "text": "It cannot return the promised to response you can say I oh, please wait, you know, there's no way for it true",
    "start": "931100",
    "end": "937160"
  },
  {
    "text": "It's signature tells, you know, here's an order Give me a response. So so it has to block a threat if you know, it has to wait for something",
    "start": "937529",
    "end": "946188"
  },
  {
    "text": "There's no way around it. So in order to be asynchronous You know our framework has to support some synchrony, for example it had",
    "start": "946189",
    "end": "956299"
  },
  {
    "start": "950000",
    "end": "1000000"
  },
  {
    "text": "Should support maybe reactive programming maybe like more than spring it You can write your functions as returning amana",
    "start": "957240",
    "end": "965569"
  },
  {
    "text": "Or a believable future or some way To say that no response is not immediately available. It will available later",
    "start": "966089",
    "end": "974870"
  },
  {
    "text": "even better You see the is mana then",
    "start": "976019",
    "end": "981180"
  },
  {
    "text": "We can if we have a response from cache We can just wish we will be wrapping it, you know in mana dot just invocation",
    "start": "981180",
    "end": "989659"
  },
  {
    "text": "So that's a way to tell or here's I have a response from cash return so even better if our",
    "start": "989730",
    "end": "995990"
  },
  {
    "text": "Framework actually supports suspending function Because if our placeholder suspending function, then the code is said it looks natural like a return response",
    "start": "997350",
    "end": "1007419"
  },
  {
    "start": "1000000",
    "end": "1050000"
  },
  {
    "text": "I just write return I didn't have to do like this wrapping Combinator's and stuff",
    "start": "1007420",
    "end": "1011800"
  },
  {
    "text": "unfortunately again Support for suspending function is coming to frameworks near you spring",
    "start": "1013189",
    "end": "1019388"
  },
  {
    "text": "5.2 is going to natively support suspending function so you won't have to do it myself",
    "start": "1020240",
    "end": "1025359"
  },
  {
    "text": "You can just write suspending function and take it whatever your get or get it associated with URL",
    "start": "1025360",
    "end": "1031178"
  },
  {
    "text": "You know place appropriate annotations for spring and will just work. So there's nothing but it's",
    "start": "1031179",
    "end": "1036907"
  },
  {
    "text": "Maybe you have some other framework that doesn't support it. Or maybe you want it now We're in current versions meaning that does not yet support suspending function. So what do you do?",
    "start": "1037459",
    "end": "1046959"
  },
  {
    "text": "But if it doesn't support some synchrony, you can always adapt to it. For example if your",
    "start": "1047780",
    "end": "1052569"
  },
  {
    "start": "1050000",
    "end": "1163000"
  },
  {
    "text": "Framework supports reactive then you can use think called curtain builder that lets you transform",
    "start": "1053390",
    "end": "1061359"
  },
  {
    "text": "a code with curtains that you write inside to some",
    "start": "1062059",
    "end": "1066369"
  },
  {
    "text": "a synchronous type that the code expects outside So for example, this mana function returns a reactive mana type and if your framework supports them",
    "start": "1067240",
    "end": "1075789"
  },
  {
    "text": "That's okay. If your framework supports completely future you can use a future builder so for every a synchronous type there is it's easy or as usual out-of-the-box adapter and",
    "start": "1075860",
    "end": "1085899"
  },
  {
    "text": "As long as your server supports some synchrony you can adapt it to proteins",
    "start": "1086390",
    "end": "1092169"
  },
  {
    "text": "but the key point is your server firm has to support this thing here if it does not support a synchrony if a synchronous you",
    "start": "1092169",
    "end": "1097778"
  },
  {
    "text": "There is no way around it. I mean you end will end up blocking threats and Unnecessary harm in your it's called builds your application",
    "start": "1098720",
    "end": "1106809"
  },
  {
    "text": "so the starting point To get in this new purpose in gross world is to get an application server or server framework that supports icing in any way",
    "start": "1106809",
    "end": "1115240"
  },
  {
    "text": "And then what it doesn't matter what way it is, you'll be able to adapt and then use it",
    "start": "1115399",
    "end": "1120429"
  },
  {
    "text": "And Once you adapted to it, once you're in this world of caught encourages with suspending function",
    "start": "1122750",
    "end": "1128769"
  },
  {
    "text": "Then everything else becomes simple because in suspending function, you can just write",
    "start": "1128770",
    "end": "1133989"
  },
  {
    "text": "regular code like you wrote before You can walk other suspending function. Naturally. You don't need this",
    "start": "1134510",
    "end": "1141069"
  },
  {
    "text": "I mean if you gain seniority of spring slide, you don't need this then many you know in all this crap because it's it's like",
    "start": "1141070",
    "end": "1148869"
  },
  {
    "text": "You know me to blot your actual business logic, you just write it like the usual way you're right before",
    "start": "1148870",
    "end": "1154029"
  },
  {
    "text": "And that's that's the beauty that's that's kind of the main selling point of cotton Curtis. You just write your usual business logic",
    "start": "1154789",
    "end": "1161709"
  },
  {
    "text": "and the other thing about Suspending function. It's sexually efficient",
    "start": "1162710",
    "end": "1167620"
  },
  {
    "start": "1163000",
    "end": "1274000"
  },
  {
    "text": "So if we will look at more a simpler example because simple example is easier to represent an alternative way",
    "start": "1168049",
    "end": "1174038"
  },
  {
    "text": "So there is just to know No, you know conditions just a couple of a synchronous code to some services",
    "start": "1174049",
    "end": "1183010"
  },
  {
    "text": "Suspending function from performance standpoint gets you one object allocated while it is accuse W station needed for courteous machinery",
    "start": "1184880",
    "end": "1192219"
  },
  {
    "text": "to save the state of your call when it's So that it can be restored when it's resumed",
    "start": "1192830",
    "end": "1199769"
  },
  {
    "text": "If we were to write the same code with traditional approaches like with the reactive, for example, it would look something like this",
    "start": "1200080",
    "end": "1206789"
  },
  {
    "text": "First of all logic completely obscure because you'll have this flat map map calls that complete of screws was actually going on",
    "start": "1207029",
    "end": "1213659"
  },
  {
    "text": "but the end is also will a sufficient because now you have This lambda in Krita basis. It has to be located you have the result in future that has to be located",
    "start": "1214059",
    "end": "1225599"
  },
  {
    "text": "You have another lambda allocated you have another result in future located So you have at least four objects just for two calls and what wants what it's a penny function video with one",
    "start": "1225750",
    "end": "1234839"
  },
  {
    "text": "Well People who are fans of this kind of programming stuff, which is hard",
    "start": "1237730",
    "end": "1242819"
  },
  {
    "text": "I find hard to be fan of because like I can't see what's going on here, but they'll say but yeah",
    "start": "1242820",
    "end": "1247980"
  },
  {
    "text": "You know in some cases like there. I am actually placing order. I'm doing some quick",
    "start": "1247980",
    "end": "1253079"
  },
  {
    "text": "Preconditions and then I'm calling Some function to actually place in order and they say no we see how efficient it is because I just delegate",
    "start": "1253629",
    "end": "1260939"
  },
  {
    "text": "To another function that returns him honor for me and I just, you know, passive backups or no extra locations",
    "start": "1261490",
    "end": "1267389"
  },
  {
    "text": "No extra anything see how quickly convenient is But the answer is that in fact, you know if we write it with curtains",
    "start": "1267549",
    "end": "1276750"
  },
  {
    "start": "1274000",
    "end": "1309000"
  },
  {
    "text": "the same code it will look exactly the same just for suspend but if our different return types It turns out the when you get it to coffin compile",
    "start": "1277480",
    "end": "1285120"
  },
  {
    "text": "It's also composite efficiently because tail calls in suspending function actually compiled without any allocations",
    "start": "1285120",
    "end": "1291689"
  },
  {
    "text": "Just like like it was With future types, so it's just as efficient due to this tail call optimization govern compile. So you never",
    "start": "1291879",
    "end": "1300869"
  },
  {
    "text": "Lose anything in programming with cotton curtains is always more efficient than any other approach",
    "start": "1301419",
    "end": "1307288"
  },
  {
    "text": "You'd find So what happens when you actually get the code like in your typical application?",
    "start": "1307990",
    "end": "1314789"
  },
  {
    "start": "1309000",
    "end": "1406000"
  },
  {
    "text": "So it's all start somewhere in the top your the manual or the framework for you invoke the curtain builder",
    "start": "1314919",
    "end": "1320669"
  },
  {
    "text": "So request comes in curtain get started you get this execution context your operation",
    "start": "1320669",
    "end": "1325559"
  },
  {
    "text": "Then some for example place order gets called That's your call stick. Then, you know Mattila gates maybe to actually place order then it's called does some more logic then it",
    "start": "1325870",
    "end": "1336870"
  },
  {
    "text": "Invokes some service to load margin for example, and then for example, this is a synchronous operation. So it",
    "start": "1337450",
    "end": "1343889"
  },
  {
    "text": "Invokes suspend curtain and installs a cauldron at this point of time",
    "start": "1344470",
    "end": "1349230"
  },
  {
    "text": "all this state of your call stack gets saved in heap and",
    "start": "1349810",
    "end": "1355650"
  },
  {
    "text": "the Actual Java state controls and returns. So your thread is now it is free to do anything else",
    "start": "1356380",
    "end": "1363689"
  },
  {
    "text": "Well, it's not busy waiting. It's not blocked waiting For response, you know all there is is",
    "start": "1364000",
    "end": "1370770"
  },
  {
    "text": "Pointer to the continuation to the callback in the heap that waits until whatever IO framework used there that calls it",
    "start": "1371440",
    "end": "1378899"
  },
  {
    "text": "You know here is an answer in this case that gets restored from whatever place it left",
    "start": "1378900",
    "end": "1383879"
  },
  {
    "text": "So that network makes it efficient. You are not working thread, which is very sensitive object",
    "start": "1384250",
    "end": "1389429"
  },
  {
    "text": "Lots of memory and you can have lots of them While you're waiting for response",
    "start": "1389430",
    "end": "1395580"
  },
  {
    "text": "So how you have to scale them your application was carton. So how this answers the original problem",
    "start": "1396820",
    "end": "1402779"
  },
  {
    "text": "Like how do you configure your service? So let's take a look So you have your clients calling you have still have physic you tooth faster to run the code, but the end you have",
    "start": "1402780",
    "end": "1415230"
  },
  {
    "start": "1406000",
    "end": "1671000"
  },
  {
    "text": "some asynchronous i/o framework that has some service threads because every you know,",
    "start": "1416200",
    "end": "1421559"
  },
  {
    "text": "The code still runs and threads if you're using whatever a net T or there were library it still meets some threats",
    "start": "1421780",
    "end": "1428129"
  },
  {
    "text": "It doesn't need as many threads the beauty of a synchronous i/o framework is that if you're using synchronous input output",
    "start": "1428250",
    "end": "1435839"
  },
  {
    "text": "Like to support hours and connections you would need thousand threads just put 10,000 connections. You'll need 10,000 spells with asynchronous",
    "start": "1436300",
    "end": "1442830"
  },
  {
    "text": "You can easily have 10,000 connections just a single thread or in a few threads",
    "start": "1443500",
    "end": "1448559"
  },
  {
    "text": "so you'll configure those service threads depending on the requirements and scale and",
    "start": "1448740",
    "end": "1453240"
  },
  {
    "text": "whatever recommendations your I/o frame or gives you",
    "start": "1453970",
    "end": "1460110"
  },
  {
    "text": "But the N so that depends on what I abstechie use But then this threat that use accuser code",
    "start": "1460510",
    "end": "1467979"
  },
  {
    "text": "they never get blocked whenever they have to wait the released and take another so they only",
    "start": "1468170",
    "end": "1473230"
  },
  {
    "text": "execute cpu-intensive code so which means there's no reason to have More number of them than number of CP or course in your system",
    "start": "1473630",
    "end": "1480878"
  },
  {
    "text": "So it's very becomes really easy to configure you just you know, use default configuration Which is the number of CP recourse on your system, that's it",
    "start": "1480880",
    "end": "1488018"
  },
  {
    "text": "And then way your system works at maximum efficiency, you know, it doesn't waste extra stress. It does not try to",
    "start": "1488800",
    "end": "1495430"
  },
  {
    "text": "Overload system with too many threats it all becomes efficient",
    "start": "1496160",
    "end": "1499810"
  },
  {
    "text": "The practice though is more complicated because",
    "start": "1502340",
    "end": "1506470"
  },
  {
    "text": "What if you have to do blocking at i/o and it happens, you know, first of all, the code might be out of your control",
    "start": "1507740",
    "end": "1515140"
  },
  {
    "text": "Somebody just give you a third party library. Here's your to load account Here is a char call this function it will load account for you. Yeah, it will block a thread for 10 minutes",
    "start": "1516170",
    "end": "1525610"
  },
  {
    "text": "Maybe you know, that's your problem. You know, we don't care We're another department at the company, you know, it's no problem to scale your application. Here's a jerk you use it",
    "start": "1525610",
    "end": "1533079"
  },
  {
    "text": "you know that happens in an enterprise, you know, and Or maybe you know, just legacy maybe share code, but you don't have time to write it right now",
    "start": "1533150",
    "end": "1541778"
  },
  {
    "text": "It's written in this, you know, old Java stop blocking way So what do you do?",
    "start": "1541790",
    "end": "1547510"
  },
  {
    "text": "Now just if you just end suspension and a priority function doesn't help because it's a fire it",
    "start": "1548750",
    "end": "1554500"
  },
  {
    "text": "Enables the function to release it doesn't make it a synchronous. You know, it enables this feature where it can you know?",
    "start": "1554870",
    "end": "1561520"
  },
  {
    "text": "Suspend and then resume later Unless you read some code that actually does it it is there's no change in behavior of the function by Eddy suspend very far",
    "start": "1562220",
    "end": "1570940"
  },
  {
    "text": "What you can do though if you can say inside of implication with context and give us some other",
    "start": "1571790",
    "end": "1577360"
  },
  {
    "text": "Thread pool to execute which is called dispatcher incur incursions Well, this was context function is actually what suspends execution it actually passed the task to execute",
    "start": "1578120",
    "end": "1589779"
  },
  {
    "text": "this goes into another thread pool and then suspense",
    "start": "1589780",
    "end": "1596169"
  },
  {
    "text": "the separation until That other threads done with the work then it resumes",
    "start": "1596169",
    "end": "1600760"
  },
  {
    "text": "In this dispatcher you use your regular Java API. You create new thread pool of some size",
    "start": "1601309",
    "end": "1608258"
  },
  {
    "text": "You use extension function called a skirt in dispatcher to convert it to this. That's it. And",
    "start": "1608870",
    "end": "1614559"
  },
  {
    "text": "now it's up to you how many threads to Allocate to this particular operation so you can say okay because I know this I'm not",
    "start": "1615320",
    "end": "1623738"
  },
  {
    "text": "Loading that accounts. It's not like a heavy operation my code. I'm not loading that many accounts I maybe I'll get just interest to it",
    "start": "1624440",
    "end": "1631479"
  },
  {
    "text": "but then You know if somebody goes wrong there if your load account is slow All that you can do it can block those 10 threats it can block the rest of your threads",
    "start": "1631480",
    "end": "1640148"
  },
  {
    "text": "The red surface can still execute code then It may not need to load accounts at all. So that way you either late it",
    "start": "1640149",
    "end": "1647829"
  },
  {
    "text": "The whatever performance or reliability of scalability problems you had with this particular guy you've isolated them",
    "start": "1648679",
    "end": "1655209"
  },
  {
    "text": "And not just as related. You've encapsulated them inside this load account function. Now the rest of you could now it doesn't have to care",
    "start": "1656000",
    "end": "1662919"
  },
  {
    "text": "for the rest of the coaches suspended function, that would not block a color thread",
    "start": "1663500",
    "end": "1669860"
  },
  {
    "text": "Now the same story with CPU bound code if you have some heavy computation in your code That might run complex algorithm that might consume a lot of CPU the same story you use with context",
    "start": "1669860",
    "end": "1681518"
  },
  {
    "start": "1671000",
    "end": "1694000"
  },
  {
    "text": "Create a separate thread pool for those CPU have operations. And again, well it consume CPU it",
    "start": "1681919",
    "end": "1688089"
  },
  {
    "text": "Consumes them in a separate thread pool that you size separately so now your whole",
    "start": "1688789",
    "end": "1695059"
  },
  {
    "start": "1694000",
    "end": "1994000"
  },
  {
    "text": "Sizing story becomes like this. So you have executor thread that is equal some quick code It does not, you know",
    "start": "1695059",
    "end": "1701049"
  },
  {
    "text": "so you your petition concurrent client requests without delays and then you have a separate thread pool for",
    "start": "1701049",
    "end": "1708158"
  },
  {
    "text": "Your synchronous operation that your some asynchronous i/o framework uses. You have a separate thread pool for some blocking operation",
    "start": "1708500",
    "end": "1715239"
  },
  {
    "text": "so maybe several of those and you have thread pool for your cpu button operation you size them depending of the needs and",
    "start": "1715240",
    "end": "1721449"
  },
  {
    "text": "Then you get application of the soldiers as passive that can continue securing",
    "start": "1722059",
    "end": "1726940"
  },
  {
    "text": "Client was despite something that may Slow it down or some failure and somewhere the back-end system",
    "start": "1727370",
    "end": "1734110"
  },
  {
    "text": "And that's really that what when I was into res developer, but back in 2010 were writing in Java that what I was missing",
    "start": "1734110",
    "end": "1741670"
  },
  {
    "text": "I mean, we've had those production areas like every year we had some big orders just because some one server",
    "start": "1741670",
    "end": "1748629"
  },
  {
    "text": "you know is slow and there's little we could do because writing this I mean we could have I mean",
    "start": "1748630",
    "end": "1754569"
  },
  {
    "text": "There's no major behind it. Just jungling threats around but if you're writing it like in plain, Java",
    "start": "1754570",
    "end": "1760299"
  },
  {
    "text": "It either means like we're writing it always something like You know futures and then mangling only a business logical and turning all the business logic into this unreadable chain of then many",
    "start": "1760520",
    "end": "1772479"
  },
  {
    "text": "You know and all this Combinator is that you know, they you become more. I mean, that's where you know you boilerplate your",
    "start": "1772490",
    "end": "1779290"
  },
  {
    "text": "Choreography or like completely overwhelms the the whole logic you are trying to express and we're being you know",
    "start": "1780080",
    "end": "1785649"
  },
  {
    "text": "Enterprise developers logic for us is everything like we debug we cared about, you know, we wanted we needed that's the logic",
    "start": "1785650",
    "end": "1792400"
  },
  {
    "text": "That was we all our work was about so we couldn't really solve this problems before",
    "start": "1792400",
    "end": "1797079"
  },
  {
    "text": "in Java, but in cotton using carbons, they're easy to solve without app screen or making",
    "start": "1797510",
    "end": "1803530"
  },
  {
    "text": "For you harder to work with the logic of your code And you know because the main executive thread this way never block the churn they always process",
    "start": "1804170",
    "end": "1814750"
  },
  {
    "text": "responses But there's more than that than just",
    "start": "1815990",
    "end": "1819729"
  },
  {
    "text": "Being able not to block your main thread pool you the cost incursion is also natural support consolation and",
    "start": "1821480",
    "end": "1828579"
  },
  {
    "text": "What consolation mean? Why would you need consolation in enterprise application? So your typical use case is timeout. So maybe this place water",
    "start": "1829070",
    "end": "1837939"
  },
  {
    "text": "I mean just has a timeout of one second and in this open head for some business some operations",
    "start": "1837940",
    "end": "1844360"
  },
  {
    "text": "Just don't make sense if they take too long, especially like a trading area if it took us too long to process it, I mean maybe",
    "start": "1844360",
    "end": "1850479"
  },
  {
    "text": "Market moved we don't want the separation anymore We should just cancel and so why we're still wasting resources on it. If you know, it's we know too much time",
    "start": "1851570",
    "end": "1861249"
  },
  {
    "text": "And again before curtains, it was a pain to manage it now all we have to do is trap with special wisdom on block and",
    "start": "1861770",
    "end": "1870459"
  },
  {
    "text": "Whenever one second elapses The code inside it gets canceled. It doesn't matter. How complex is how how deep the caustic is? It doesn't matter if",
    "start": "1871070",
    "end": "1879699"
  },
  {
    "text": "Every operation says the kullback-- will know what the timeout is and for example",
    "start": "1881299",
    "end": "1886750"
  },
  {
    "text": "If my lord margin is this a synchronous separation that it stalls a callback All I have to do to make it cancelable is just to replace suspend curtain will suspend Cancer Walk routine and then I can install",
    "start": "1886750",
    "end": "1898179"
  },
  {
    "text": "This invoking a consolation callback or to cancel whatever",
    "start": "1899809",
    "end": "1904119"
  },
  {
    "text": "Because every you know a synchro from usually they they have a cancel method you can ask it to cancel operation",
    "start": "1905299",
    "end": "1910268"
  },
  {
    "text": "This by the way, usually difference between blocking I/o for example, if you do blocking eye socket, you read there's no way you can cancel",
    "start": "1910490",
    "end": "1917499"
  },
  {
    "text": "It's usually you read and that it's blocked until they did was available And that's a big difference in a synchronous favors because all their synchronous i/o frameworks. They give you this ability to cancel it",
    "start": "1917500",
    "end": "1928480"
  },
  {
    "text": "that's just because the way they're structured and then you can natural into it it with conservation encourages framework and that",
    "start": "1928490",
    "end": "1935439"
  },
  {
    "text": "works then transparently to the programmer the Other advantage that curtains give you it becomes very easy to plug",
    "start": "1935929",
    "end": "1945220"
  },
  {
    "text": "concurrency where you need it What I mean by concurrency, what where you might need concurrency?",
    "start": "1945919",
    "end": "1951669"
  },
  {
    "text": "So let's take a look at this again simplified example, but slightly different flavor of example",
    "start": "1951669",
    "end": "1956709"
  },
  {
    "text": "what if to place an order I need to contact two services it cost or margin server but in a way that",
    "start": "1958039",
    "end": "1964358"
  },
  {
    "text": "There is no data dependencies between those calls So I mean I could do them concurrently because I don't need to know the result in this particular example",
    "start": "1964610",
    "end": "1974229"
  },
  {
    "text": "Only the previous one. I don't have to know what the first color returns not to call the second one",
    "start": "1974390",
    "end": "1980229"
  },
  {
    "text": "So there's no need to wait for first before calling the second I can do both calls concurrently and with curtains it becomes really easy",
    "start": "1980230",
    "end": "1990370"
  },
  {
    "text": "to express this concurrency all I do as I",
    "start": "1990710",
    "end": "1996410"
  },
  {
    "start": "1994000",
    "end": "2125000"
  },
  {
    "text": "would I would then invoke some a synchronous operations concurrently in the",
    "start": "1996410",
    "end": "2001589"
  },
  {
    "text": "Future in the for example my fuchsias programming world or with equal partner with futures or with a single wait",
    "start": "2002110",
    "end": "2009540"
  },
  {
    "text": "I would write them a synchronous function that returns some kind of a future so and so instead of waiting for operation",
    "start": "2009540",
    "end": "2015540"
  },
  {
    "text": "I'd say start this separation, you know and return my future as a promise that you deliver result",
    "start": "2015540",
    "end": "2021269"
  },
  {
    "text": "And then what I would do I'd say now. Let's wait until results. That's it. Typical, you know programming of concurrency",
    "start": "2021270",
    "end": "2028379"
  },
  {
    "text": "with in the futures world The problem with this approach though is that",
    "start": "2029020",
    "end": "2035339"
  },
  {
    "text": "if My first operation fails while I'm waiting for it this one",
    "start": "2036100",
    "end": "2041069"
  },
  {
    "text": "So I waited for it But it fails returns me an error exception or network connection timeout wherever tool took too long time",
    "start": "2042100",
    "end": "2048959"
  },
  {
    "text": "Then my second operation is still working because I started it. I've received a pointer to its future result",
    "start": "2049419",
    "end": "2056459"
  },
  {
    "text": "But it's not complete yet So this my place where the function returns but my margin service operation still works in regard",
    "start": "2056649",
    "end": "2066449"
  },
  {
    "text": "now because I failed, you know my Client code my retry might do it again. It might fail again",
    "start": "2066909",
    "end": "2074340"
  },
  {
    "text": "so again I have another margin service law operation that leaks and getting began to praise enterprise application that",
    "start": "2074340",
    "end": "2081299"
  },
  {
    "text": "That's a hell of a scenario because again Similar problem one of my services failed my lord account source",
    "start": "2081639",
    "end": "2089008"
  },
  {
    "text": "It's suddenly I get this cascading failure across the system or suddenly operations to suite in across the system now everything works",
    "start": "2089010",
    "end": "2096538"
  },
  {
    "text": "It doesn't it doesn't like break immediately, but even worse like in ten fifteen minutes, I start getting out of memories",
    "start": "2096540",
    "end": "2103919"
  },
  {
    "text": "Too many connection houses sure what's going on there? It's really a hard to troubleshoot when the code is written this way",
    "start": "2103990",
    "end": "2109979"
  },
  {
    "text": "The wait curtains help here is called structure concurrency. It's a way to do concurrency in your code in a safe way",
    "start": "2111190",
    "end": "2118440"
  },
  {
    "text": "that is not Prone to any leaks or lost resources and the waste achieved",
    "start": "2118450",
    "end": "2125129"
  },
  {
    "start": "2125000",
    "end": "2284000"
  },
  {
    "text": "there's a special functional curtain scope that you wrap that you scope all your concurrency in that's",
    "start": "2125130",
    "end": "2131079"
  },
  {
    "text": "That's kind of a bracket around all concurrent operations in implementation of your function and then inside this",
    "start": "2131510",
    "end": "2140019"
  },
  {
    "text": "scope you can do async as Which means execute this concurrently, I think is this function that gives you a future so just like before",
    "start": "2140330",
    "end": "2149560"
  },
  {
    "text": "It gives you a promise to deliver the result of whatever called inside the curly braces",
    "start": "2150410",
    "end": "2157329"
  },
  {
    "text": "But the difference and you use it the same way you are wait for the results so it's very similar, but there's one important difference",
    "start": "2158990",
    "end": "2166389"
  },
  {
    "text": "in the if this fails Because all of it happens in this code",
    "start": "2166970",
    "end": "2172179"
  },
  {
    "text": "The scope gets cancelled on any failure of any concurrent operation and the cancellation of councils all the child operations all the",
    "start": "2173780",
    "end": "2181269"
  },
  {
    "text": "concurrently exhibiting operations that side of it so Moreover this scope",
    "start": "2181760",
    "end": "2187900"
  },
  {
    "text": "waits for completion of all children so it won't terminate until everything gets not just canceled signal subdued but until you know",
    "start": "2188420",
    "end": "2197230"
  },
  {
    "text": "It's all actually shuts down releases all resources occupied by those operations. So when this place where the function returns",
    "start": "2197230",
    "end": "2204369"
  },
  {
    "text": "With an error because one of its sub approaches failed, you know, there's nothing leaks",
    "start": "2205040",
    "end": "2210159"
  },
  {
    "text": "There is no resources that I left behind and you can safely try it and make sure you know",
    "start": "2210230",
    "end": "2216280"
  },
  {
    "text": "You know that nothing. There are no leftovers from a previous attempt",
    "start": "2216280",
    "end": "2220030"
  },
  {
    "text": "But it's not enough to give people tools for structure in their concurrency, I mean if you",
    "start": "2222710",
    "end": "2229750"
  },
  {
    "text": "Use some tools to write code in the right way but there are some other ways to you know, where",
    "start": "2231380",
    "end": "2237909"
  },
  {
    "text": "But I mean if but if you can write it simpler in a way that is not right chances are in a big organization",
    "start": "2238340",
    "end": "2244209"
  },
  {
    "text": "big project lots of code will not be written in the right way and that that happens in Java programming allowed like",
    "start": "2244490",
    "end": "2251109"
  },
  {
    "text": "In my world, we had lots of those rules You know have the structure code this way because we've kind of learn hard way many of those rules. You should do this",
    "start": "2251300",
    "end": "2259509"
  },
  {
    "text": "You shouldn't do this if you do this Then your application will fail in two years in a row and you spend sleepless night trying to figure out what's going on",
    "start": "2259510",
    "end": "2266590"
  },
  {
    "text": "So we get all those rules what you shouldn't do but actually forcing them was kind of a tenuous task",
    "start": "2266590",
    "end": "2272380"
  },
  {
    "text": "Be you else. I have to read Lin check You have to review it have to remember not to forget to do it, etc. Etc. So",
    "start": "2272630",
    "end": "2279880"
  },
  {
    "text": "How do we encourage ends enforce this? It's actually quite easy to enforce because if you accidently to forget",
    "start": "2280670",
    "end": "2289480"
  },
  {
    "start": "2284000",
    "end": "2334000"
  },
  {
    "text": "to break it your concurrency with courage in scope and just",
    "start": "2290360",
    "end": "2294459"
  },
  {
    "text": "Write it like this. Let's do these separations concurrently. This code will simply not compile",
    "start": "2295850",
    "end": "2300729"
  },
  {
    "text": "It will say oh there is no I think what does it mean? Ah, What's the magic behind it?",
    "start": "2301250",
    "end": "2307270"
  },
  {
    "text": "There's no magic actually simply because a sync function in coughing code is defined as an extension functional Kuragin scope object",
    "start": "2307270",
    "end": "2314770"
  },
  {
    "text": "Unless you have it you can't Call it so there's no risk of you accidentally forget into scope",
    "start": "2315350",
    "end": "2323830"
  },
  {
    "text": "You're gonna crash you simply can't do any concurrency unless you define. What's the scope of your concurrent operations? What what what?",
    "start": "2323830",
    "end": "2331029"
  },
  {
    "text": "What's the large operation that contained them? And we have this it's not just one function C. It's the convention whenever",
    "start": "2331030",
    "end": "2338859"
  },
  {
    "start": "2334000",
    "end": "2381000"
  },
  {
    "text": "We write a piece of code that creates a curtain in the ground we define it as an extension functional curtain scope and that",
    "start": "2340430",
    "end": "2347770"
  },
  {
    "text": "Convention gives us like it works better than the commutation because like I only have to look a signature of a function",
    "start": "2348680",
    "end": "2355839"
  },
  {
    "text": "They know that this function has the side effect. It launches a curtain, but so be careful, you know",
    "start": "2355840",
    "end": "2361090"
  },
  {
    "text": "it has to be called in ESCO because otherwise if This were ground operation that it launched will leak, you know and may leave resources",
    "start": "2361970",
    "end": "2373330"
  },
  {
    "text": "And launches the other curtain value that also just Farson forgets a program operation",
    "start": "2374900",
    "end": "2380319"
  },
  {
    "start": "2381000",
    "end": "2435000"
  },
  {
    "text": "So in our case we use types as a help in documentation So whenever in cotton ICF on a radial function with some parameters and result",
    "start": "2382370",
    "end": "2391960"
  },
  {
    "text": "I know by convention that it should be some fast local operation that maybe looks in cash",
    "start": "2391960",
    "end": "2397599"
  },
  {
    "text": "You know does some quick computation quick logic if I see suspending function in my business code base",
    "start": "2397599",
    "end": "2403569"
  },
  {
    "text": "I immediately know it's some operation that may be slow does some heavy computation goes some remote service",
    "start": "2403570",
    "end": "2410589"
  },
  {
    "text": "So type itself tells me what to expect from it Whether it might take long time or might not and if I see function there extension on",
    "start": "2410720",
    "end": "2420310"
  },
  {
    "text": "Crampton scope, I know that this a person has a side effect of launching a program process",
    "start": "2420950",
    "end": "2426730"
  },
  {
    "text": "so now Having these types the not only surface documentation but types are enforced. What does it mean?",
    "start": "2427760",
    "end": "2436570"
  },
  {
    "start": "2435000",
    "end": "2566000"
  },
  {
    "text": "Enforce in the way that from for example suspending function which are slow I can easily call a regular function. That's okay",
    "start": "2437240",
    "end": "2443949"
  },
  {
    "text": "They're fast, but I can do reverse like from a regular function. That should be fast",
    "start": "2443980",
    "end": "2449079"
  },
  {
    "text": "Compiler will simply not let me call suspending function which is good because like if this function not be calling slow function",
    "start": "2449660",
    "end": "2457088"
  },
  {
    "text": "Which is or in mode function? but I can",
    "start": "2457089",
    "end": "2463280"
  },
  {
    "text": "actually from my fast function create a cartoon, but if I do this I will have to be explicit about this code what the scope this remote operation because this function will require courage in scope",
    "start": "2463280",
    "end": "2475210"
  },
  {
    "text": "And then programmer who invokes it has to think what scope of this program. Is it the scope of this function",
    "start": "2476210",
    "end": "2482050"
  },
  {
    "text": "Is it a scope of my request is it in the scope of the whole application? And usually a well-structured have petition I have different scopes",
    "start": "2482050",
    "end": "2488499"
  },
  {
    "text": "that break it, you know different activities and From the grant function from inside of it. I can easily call suspending function because I launched a separate program process",
    "start": "2489109",
    "end": "2500259"
  },
  {
    "text": "I can now go and do long-running requests to other services",
    "start": "2500260",
    "end": "2506140"
  },
  {
    "text": "That's how types enforced so they they're better than their communication It's not I mean, I don't have to mention this in the commutation compiler and forces it for me",
    "start": "2507770",
    "end": "2516129"
  },
  {
    "text": "And you know first a new function I can call this one if just using curtain scope",
    "start": "2517250",
    "end": "2522379"
  },
  {
    "text": "But that's not the only way I mean It's it's a good point to then compare this approach to alternative approaches and a torrent of approaches. For example, our green threads and fibers",
    "start": "2524279",
    "end": "2533839"
  },
  {
    "text": "Who heard about our Project loon in in Java? Yeah, that's by the way. There was a presentation yesterday about Java future was mentioned I think",
    "start": "2534539",
    "end": "2544068"
  },
  {
    "text": "So that's that's the approach that Joe works on to drink a synchrony to the",
    "start": "2545069",
    "end": "2551720"
  },
  {
    "text": "Java world and it's also existing in other system. For example and go you have this green thread and if you look so how does work and how it compares to a",
    "start": "2552329",
    "end": "2563990"
  },
  {
    "text": "synchronous programming the cotton gives you With",
    "start": "2564269",
    "end": "2569910"
  },
  {
    "start": "2566000",
    "end": "2605000"
  },
  {
    "text": "green threads or fibers all the programmer gets program gets this fibers this lightweight threads that",
    "start": "2569910",
    "end": "2576829"
  },
  {
    "text": "And that's a kind of analogous to Kirkenes in our world and they are backed by by the feds",
    "start": "2577559",
    "end": "2583999"
  },
  {
    "text": "But the strands are hidden from developer. They are not directly accessible So all you get in green threads model",
    "start": "2584000",
    "end": "2590150"
  },
  {
    "text": "You have this lightweight threads and then they're backed by a small number of his usual threats that looks really similar",
    "start": "2590150",
    "end": "2596568"
  },
  {
    "text": "It's your program in one of those cartoons. You can have lots of proteins that Suspend your resume on this small pool of threads",
    "start": "2597089",
    "end": "2603768"
  },
  {
    "text": "so fibers promise you you know the usual Just like threads you everything is effectively suspend a ball. You can from any function. You can call anything and that's both",
    "start": "2604470",
    "end": "2614689"
  },
  {
    "start": "2605000",
    "end": "2680000"
  },
  {
    "text": "Frank you know of the green threads model, but it's its weakness because",
    "start": "2615359",
    "end": "2621318"
  },
  {
    "text": "you you don't have type system helping your structure application like with cotton proteins, you know, you have to mark",
    "start": "2622230",
    "end": "2629389"
  },
  {
    "text": "Your function that takes slow on run operation with suspend and at scale at large enterprise a paid off because it lets you enforce it",
    "start": "2630390",
    "end": "2637548"
  },
  {
    "text": "structure it protects you from Accidentally going long foreign service from a function that was supposed to look up quickly and cache",
    "start": "2637710",
    "end": "2645018"
  },
  {
    "text": "You see that's so at a scale that Type system helps you like any other type system like a difference between dynamic programming energy instead it",
    "start": "2645930",
    "end": "2654789"
  },
  {
    "text": "but here's one disadvantage of the curtains model is that",
    "start": "2656210",
    "end": "2661119"
  },
  {
    "text": "When you start prairies curtains you end up with this situation one is good on threads. Lots of other thread pool",
    "start": "2662119",
    "end": "2668017"
  },
  {
    "text": "and Now you end up in solution where the execution has to switch between threads often",
    "start": "2668539",
    "end": "2675518"
  },
  {
    "text": "You know it runs here then just something goes to another thread",
    "start": "2675519",
    "end": "2679029"
  },
  {
    "start": "2680000",
    "end": "2754000"
  },
  {
    "text": "So solution for this is instead of having separate separate thread pools use a shared thread pool so and",
    "start": "2680750",
    "end": "2686439"
  },
  {
    "text": "when the thread blocks there we can create a new threads but only a",
    "start": "2687319",
    "end": "2693609"
  },
  {
    "text": "Sneered when thread blocks here, we can remember that. It was blocked and create a new one as needed and",
    "start": "2694160",
    "end": "2700510"
  },
  {
    "text": "etc and actually cotton curtains Already has this ability",
    "start": "2701059",
    "end": "2707319"
  },
  {
    "text": "Be here instead of creating your own thread pools you can use built-in things like this patterns that I all that actually share thread pools was the with",
    "start": "2707930",
    "end": "2720249"
  },
  {
    "text": "default executors So switching from to another it just mental operation doesn't actual switch a thread",
    "start": "2720589",
    "end": "2727719"
  },
  {
    "text": "It's the code still runs in the same thread but when the stress become blocked, it creates new threads on demand so that you always have the",
    "start": "2727759",
    "end": "2736959"
  },
  {
    "text": "Number of those you configured to run your CPU intensive code. Oh",
    "start": "2737569",
    "end": "2741038"
  },
  {
    "text": "The let's try to quickly, so we're running out of time So I'll be quick and covering now how you work with streams of data and curtains?",
    "start": "2745400",
    "end": "2753849"
  },
  {
    "start": "2754000",
    "end": "2882000"
  },
  {
    "text": "So what we seen so far we've seen how you work with single responses You can you can also write a function like this that returns a list",
    "start": "2754309",
    "end": "2763450"
  },
  {
    "text": "Which is a great way to represent like rest. Api's like you make HTTP requests you get list of items",
    "start": "2763970",
    "end": "2770349"
  },
  {
    "text": "that's a great signature to represented here is always you wait once we drawn list in once",
    "start": "2770480",
    "end": "2775779"
  },
  {
    "text": "but there it's becoming popular to write api's like again on the",
    "start": "2776630",
    "end": "2781119"
  },
  {
    "text": "On the talk yesterday you my variable air circuit. That's a protocol where you streaming or WebSocket?",
    "start": "2782569",
    "end": "2788409"
  },
  {
    "text": "For example, it's protocol where it returns many events but it doesn't return them at once you get it stream and you might want to start processing them as",
    "start": "2788410",
    "end": "2796599"
  },
  {
    "text": "Soon as they're right. So what type you use here? You can't use the list because the list It's like you get it all at once and only then you can start to work with it",
    "start": "2797599",
    "end": "2805149"
  },
  {
    "text": "So, what do you hear if you want to stream responses? One thing you can use as a channel. It's a challenge this communication primitive for curve games",
    "start": "2805309",
    "end": "2813759"
  },
  {
    "text": "You sent the on one side receive on the other So what you can do is you can say here's example you can say ok. Let's",
    "start": "2813759",
    "end": "2821379"
  },
  {
    "text": "produce data With the produce builder and you know that produce builder returns a type of a channel that you can receive from",
    "start": "2822650",
    "end": "2831819"
  },
  {
    "text": "And a separate this builder you can you know do any synchronous code you can wait you can do and ultimately what you do is you send elements to this channel and",
    "start": "2832250",
    "end": "2842529"
  },
  {
    "text": "then a receive inside you can easily use a for loop to",
    "start": "2842900",
    "end": "2848140"
  },
  {
    "text": "Receive all the data from channel and print them so that lets your ability to transfer streams of data in a synchronous way and",
    "start": "2849380",
    "end": "2856660"
  },
  {
    "text": "Start processing them as soon as they're will this is actually good concept could be used. Lots of people like it. For example",
    "start": "2856910",
    "end": "2863558"
  },
  {
    "text": "Go language is all about channels like it's this approach like really popular being popularized recently by go language like structural system as you know coroutines into",
    "start": "2864079",
    "end": "2873759"
  },
  {
    "text": "Arkansas channels like you can go talks and go conferences a lots of talks how to start your code using channels",
    "start": "2873759",
    "end": "2880059"
  },
  {
    "text": "But there is a catch with this approach The catch is that the function that creates a shell?",
    "start": "2880059",
    "end": "2886328"
  },
  {
    "start": "2882000",
    "end": "3014000"
  },
  {
    "text": "Has to be incontinent with structure in Canal has to be extension of curtain scope Because it by our convention because it creates a curtain that produces those elements in a synchronous process that is producing elements",
    "start": "2886880",
    "end": "2899078"
  },
  {
    "text": "Which which is ok unless you try to do something this unless you",
    "start": "2901789",
    "end": "2907339"
  },
  {
    "text": "Start this full function and flus the channel in Toronto and not receive from it",
    "start": "2907339",
    "end": "2913969"
  },
  {
    "text": "If you did that The curtain that producing is stuck it trying to send you but there's no one on the other side receiving",
    "start": "2914280",
    "end": "2921739"
  },
  {
    "text": "and with structured concurrency of this code just honks because every",
    "start": "2922080",
    "end": "2927169"
  },
  {
    "text": "Scope in cotton curtains wait for completion of all the program processes because we don't want them to leak",
    "start": "2927570",
    "end": "2933919"
  },
  {
    "text": "so you get hung code here, which is bad as it makes harder to write like complex logic you cannot if",
    "start": "2934170",
    "end": "2940879"
  },
  {
    "text": "Something received data, if something else not receive data you get stuck here",
    "start": "2941730",
    "end": "2946070"
  },
  {
    "text": "So there is altonity of solution then Based on cotton flows which are currently in previews",
    "start": "2947100",
    "end": "2953299"
  },
  {
    "text": "it's the concept will similar to channel but in different in one crucial way and similar is the sense your right is similar you",
    "start": "2953700",
    "end": "2960169"
  },
  {
    "text": "Define your data but instead of producing you say if here's a flow of data here's I'm omitting elements a synchronously the difference is is that",
    "start": "2960390",
    "end": "2969319"
  },
  {
    "text": "Flow is like kind of a synchronous sequence Meaning that it's cold it would want",
    "start": "2971580",
    "end": "2977209"
  },
  {
    "text": "Actually start doing any code unless you asked it to do it So you use it with instead of for loop use it like with function called collect. So you tell it okay",
    "start": "2977910",
    "end": "2988399"
  },
  {
    "text": "I want to collect the different you and only this When you ask it to collect it the code starts and starts producing the data and the meeting it to the consumer",
    "start": "2988400",
    "end": "2997639"
  },
  {
    "text": "So this way if I just invoke this bar function, but don't use a result in a way",
    "start": "2997640",
    "end": "3002859"
  },
  {
    "text": "You see nothing happens because flow did not even start. There's nothing to lose. No resources open no connection establish. There's nothing",
    "start": "3003230",
    "end": "3011109"
  },
  {
    "text": "and the other good thing about flow you can efficiently apply transformation to it like you can map result filter and if you're familiar with regular",
    "start": "3012590",
    "end": "3021580"
  },
  {
    "start": "3014000",
    "end": "3068000"
  },
  {
    "text": "Programming with if you learn how to program collections and continent you learned sequences. You learned all those transformation",
    "start": "3022040",
    "end": "3027729"
  },
  {
    "text": "There is this same with flows illusion. You don't have to learn any new language You know, I have to learn new set of variation",
    "start": "3027859",
    "end": "3034059"
  },
  {
    "text": "So you just work with your flows just as you would have worked with your collections It feels and looks really natural for cosmic programmer",
    "start": "3034060",
    "end": "3042568"
  },
  {
    "text": "So that's it that's how general promise you know We want you to write a synchronous code in the same way as your read",
    "start": "3044710",
    "end": "3053400"
  },
  {
    "text": "The rest of your code should not look differently. It shouldn't require your lots of new knowledge",
    "start": "3053400",
    "end": "3058048"
  },
  {
    "text": "That's it",
    "start": "3059110",
    "end": "3061110"
  }
]