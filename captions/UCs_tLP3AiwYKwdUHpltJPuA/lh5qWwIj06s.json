[
  {
    "start": "0",
    "end": "34000"
  },
  {
    "text": "thank you",
    "start": "2580",
    "end": "4700"
  },
  {
    "text": "thanks all for coming now for the next 40 to 50 minutes we're going to talk about making software design decisions",
    "start": "12420",
    "end": "19380"
  },
  {
    "text": "and preferably sensible ones my name is I work at openvalue I'm also",
    "start": "19380",
    "end": "24960"
  },
  {
    "text": "active for the analog the Netherlands Java use group so I'm kind of a Java guy but I think most of the things I'm going",
    "start": "24960",
    "end": "30480"
  },
  {
    "text": "to mention will apply to our languages just as well so for the next say 45 minutes we're",
    "start": "30480",
    "end": "36300"
  },
  {
    "start": "34000",
    "end": "67000"
  },
  {
    "text": "going to look into some definitions I'll tell a short story about flexibility in",
    "start": "36300",
    "end": "41520"
  },
  {
    "text": "software we're going to look at different levels where you can make choices of going generic or specific",
    "start": "41520",
    "end": "46820"
  },
  {
    "text": "I'll give you some tools to to help the site we're going to look at the cost of generic Solutions I'll give you some",
    "start": "46820",
    "end": "53760"
  },
  {
    "text": "tips on when and why to go generic we may have time for a bonus topic depending on how much questions you have",
    "start": "53760",
    "end": "59940"
  },
  {
    "text": "and how how fast I talk and every story needs an end and this is no no exception but let's start at the",
    "start": "59940",
    "end": "67080"
  },
  {
    "start": "67000",
    "end": "113000"
  },
  {
    "text": "beginning we're talking out about software design what is software design well if you want to know what something",
    "start": "67080",
    "end": "72600"
  },
  {
    "text": "is at least in my case you go to Wikipedia and you type software design and Wikipedia says something along the",
    "start": "72600",
    "end": "78960"
  },
  {
    "text": "ranks of it's the activity following requirement specification and before programming",
    "start": "78960",
    "end": "86100"
  },
  {
    "text": "so that basically whatever you do once you know what to do and the actual coding everything in between is designed",
    "start": "86100",
    "end": "91979"
  },
  {
    "text": "or software design usually involves problem solving and planning a software solution",
    "start": "91979",
    "end": "97439"
  },
  {
    "text": "or the process of envisioning and defining software solutions to one or more sets of problems so I think we can",
    "start": "97439",
    "end": "103079"
  },
  {
    "text": "say that design is basically coming up with solutions for problems is the thinking you do between",
    "start": "103079",
    "end": "108299"
  },
  {
    "text": "having General level requirements and doing the actual code so then what is software architecture",
    "start": "108299",
    "end": "114479"
  },
  {
    "start": "113000",
    "end": "155000"
  },
  {
    "text": "when is something designed and when is that architecture I guess that the question we can ask in",
    "start": "114479",
    "end": "119700"
  },
  {
    "text": "return is doesn't matter do we care whether something is design or architecture I'd say that both are about making",
    "start": "119700",
    "end": "126840"
  },
  {
    "text": "significant decisions where significance is measured by the cost of change so if you get it wrong how expensive in terms",
    "start": "126840",
    "end": "133739"
  },
  {
    "text": "of time is it to fix it so design essay is typically local within a class within a module within a",
    "start": "133739",
    "end": "140400"
  },
  {
    "text": "project and architecture is typically on a higher level so it's on the project level organization level",
    "start": "140400",
    "end": "145800"
  },
  {
    "text": "and my point a little iterate later is that you can make decisions on solving stuff specific and generic on all of",
    "start": "145800",
    "end": "152040"
  },
  {
    "text": "those levels so now that we know somewhat know what",
    "start": "152040",
    "end": "157860"
  },
  {
    "start": "155000",
    "end": "758000"
  },
  {
    "text": "design is let's ask ourselves when is something specific or when is something generic so a specific solution is is",
    "start": "157860",
    "end": "163800"
  },
  {
    "text": "tailor-made for use in a single place it's a one-off it's tailored to a specific problem or",
    "start": "163800",
    "end": "169379"
  },
  {
    "text": "specific scenario and it may not be easily adaptable to other situations",
    "start": "169379",
    "end": "176160"
  },
  {
    "text": "whereas if you go generic it's typically flexible and reusable we love it as developers right let's make it flexible",
    "start": "176160",
    "end": "182280"
  },
  {
    "text": "and reusable because then we may need it in the future and you can apply it to a wide range of problems or scenarios a",
    "start": "182280",
    "end": "187860"
  },
  {
    "text": "Swiss pocket knife typically something that's in some way generified so that you can use it in more than one place",
    "start": "187860",
    "end": "194280"
  },
  {
    "text": "so why don't we do everything generic well I'll talk to that in a bit",
    "start": "194280",
    "end": "201480"
  },
  {
    "text": "so another concept I'd like to introduce is a hierarchical decomposition and this is for me a key concept of software",
    "start": "201480",
    "end": "208319"
  },
  {
    "text": "architecture and looking at systems it's about recognizing that a system you can look at a system from different",
    "start": "208319",
    "end": "213599"
  },
  {
    "text": "different views and every view has an actual level of depth so if we would look at you can see it as a stack of",
    "start": "213599",
    "end": "219540"
  },
  {
    "text": "blocks for example uh if we look at Google for example at the top level you would have google.com",
    "start": "219540",
    "end": "226920"
  },
  {
    "text": "if you sign in and look at the architecture of Google and I'm making this up on the spot probably there's something like an indexer there's",
    "start": "226920",
    "end": "233459"
  },
  {
    "text": "something that this search there's something that does ADS and there's something that there's ranking in the results so that could be the second",
    "start": "233459",
    "end": "238860"
  },
  {
    "text": "level so if you then zoom in again to the uh the indexer component there's probably an explorer that Maps the",
    "start": "238860",
    "end": "245760"
  },
  {
    "text": "internet there's a spider that spiders the internet there's a scraper or parser that parses HTML and more so my point is",
    "start": "245760",
    "end": "253799"
  },
  {
    "text": "that you can make choices to go generic or specific on all those different levels and having those levels also help",
    "start": "253799",
    "end": "259620"
  },
  {
    "text": "you reasoning about a system so let's say it's about breaking a",
    "start": "259620",
    "end": "264780"
  },
  {
    "text": "system or problem into smaller parts which you can easily understand and another approach is the the C4 model",
    "start": "264780",
    "end": "270180"
  },
  {
    "text": "from Simon Brown for software architecture assignment defined four levels that you can use to look at a",
    "start": "270180",
    "end": "275759"
  },
  {
    "text": "system the overall system and its context the high level containers the",
    "start": "275759",
    "end": "281400"
  },
  {
    "text": "next level is individual components and the fourth level is actual code and this helps in reasoning about systems on the",
    "start": "281400",
    "end": "287820"
  },
  {
    "text": "right level so another concept we need before I can",
    "start": "287820",
    "end": "294120"
  },
  {
    "text": "well finally make my start making my points about generic specific is we need to look at coupling so uh coupling well",
    "start": "294120",
    "end": "301680"
  },
  {
    "text": "the definition is that it's the degree of interdependence between building blocks of software so building block can",
    "start": "301680",
    "end": "308220"
  },
  {
    "text": "be a class or a component or a module or a service or a project however you want to call it and typically you have",
    "start": "308220",
    "end": "314220"
  },
  {
    "text": "coupling if when you change something and then something else that you don't want to change needs to change as well",
    "start": "314220",
    "end": "322520"
  },
  {
    "text": "so it's a measure of how closely connected to components components are and typically you're aiming for low low",
    "start": "323340",
    "end": "329039"
  },
  {
    "text": "coupling and as you usually contrasted with cohesion so cohesion SD agree to which",
    "start": "329039",
    "end": "335460"
  },
  {
    "text": "elements of a building block belong together so how well this this does this",
    "start": "335460",
    "end": "340680"
  },
  {
    "text": "thing do one thing and only one thing cohesion is high and typically you also have low coupling",
    "start": "340680",
    "end": "347280"
  },
  {
    "text": "so there are loads of different types of coupling there's coupling by inheritance where you inherited fields or methods",
    "start": "347280",
    "end": "354600"
  },
  {
    "text": "from from superclass you can have coupling based on messages or events if you're an event driven on message based",
    "start": "354600",
    "end": "360240"
  },
  {
    "text": "systems there's one piece that sends messages and the other one receives messages and they both need to speak the",
    "start": "360240",
    "end": "366180"
  },
  {
    "text": "same language you can have temporal coupling which basically means that one system system a",
    "start": "366180",
    "end": "372600"
  },
  {
    "text": "needs to do something for in in order for system B to continue with that result so a needs to finish",
    "start": "372600",
    "end": "377759"
  },
  {
    "text": "first and then B can do something you can have coupling on data types for example if you have like a shared data",
    "start": "377759",
    "end": "384360"
  },
  {
    "text": "types for arrest clients or responses that you share between projects when you change one the other needs to change as",
    "start": "384360",
    "end": "389639"
  },
  {
    "text": "well you have coupling Based on data if two components access the same piece",
    "start": "389639",
    "end": "395160"
  },
  {
    "text": "of data in a database or on an S3 bucket or whatever they're also coupled and I think the most common one Chef",
    "start": "395160",
    "end": "402000"
  },
  {
    "text": "coupling based on on code or API so there's one class that calls a function in another class or that use an API of a",
    "start": "402000",
    "end": "408960"
  },
  {
    "text": "library and that's the one we're going to look at in more detail",
    "start": "408960",
    "end": "413780"
  },
  {
    "text": "so I was recently rereading the book The Unicorn project by Gene Kim which is a",
    "start": "416880",
    "end": "421919"
  },
  {
    "text": "nice novel about the ideals of devops and one of those ideals is locality and",
    "start": "421919",
    "end": "427080"
  },
  {
    "text": "simplicity so well Simplicity probably all understand it needs to be easy to understand a locality means that a team",
    "start": "427080",
    "end": "433860"
  },
  {
    "text": "can change a piece of software preferably in one place and they don't need to go to 10 other places or go to",
    "start": "433860",
    "end": "440520"
  },
  {
    "text": "other teams or get repositors to change something so if you have locality you have Independence because you can change",
    "start": "440520",
    "end": "446940"
  },
  {
    "text": "something locally in your Code bait change whatever you want to change and then don't no need to burn to um",
    "start": "446940",
    "end": "454199"
  },
  {
    "text": "um boredom what was the word I'm looking for bird and other teams we're doing stuff for you",
    "start": "454199",
    "end": "460979"
  },
  {
    "text": "so um the point is that if you have locality then you can quickly change things if you have coupling you have a",
    "start": "460979",
    "end": "467759"
  },
  {
    "text": "dependency if you need to talk to another team to change things for you it's a dependency I think dependencies",
    "start": "467759",
    "end": "474120"
  },
  {
    "text": "are in my opinion view the model of all slowdowns if you are dependent on our team to do something for you then you",
    "start": "474120",
    "end": "480240"
  },
  {
    "text": "need to wait on them if you're dependent on some library to be released you need to wait so you could see in a way",
    "start": "480240",
    "end": "485340"
  },
  {
    "text": "dependencies and coupling as handcuffs",
    "start": "485340",
    "end": "490280"
  },
  {
    "text": "and the point is that if you if you introduce a generic solution you're also introducing coupling",
    "start": "490500",
    "end": "495840"
  },
  {
    "text": "so a few piece of codes in one place you need it somewhere else if you copy paste it to another place is there coupling no",
    "start": "495840",
    "end": "503400"
  },
  {
    "text": "you basically copy paste or something they're still independent and if you extract the piece of code into a generic",
    "start": "503400",
    "end": "508560"
  },
  {
    "text": "library and I make a dependency on the generic library from two places you have coupling",
    "start": "508560",
    "end": "513599"
  },
  {
    "text": "so coupling is not necessarily bad I think every non-trivial system needs to have some form form of coupling",
    "start": "513599",
    "end": "520500"
  },
  {
    "text": "because in general you can only write a simple hello world application if you don't want any coupling but you still",
    "start": "520500",
    "end": "526380"
  },
  {
    "text": "need to be aware that making stuff generic increase the scoping between those",
    "start": "526380",
    "end": "531480"
  },
  {
    "text": "components so we've probably all learned about clean codes right and one of the mentors",
    "start": "531480",
    "end": "536940"
  },
  {
    "text": "of clean code is dry don't repeat yourself we shouldn't repeat ourselves",
    "start": "536940",
    "end": "542760"
  },
  {
    "text": "so I think my problem there is that we shouldn't apply this as a as I gave him",
    "start": "542760",
    "end": "549540"
  },
  {
    "text": "that we should always adhere to we should never repeat ourselves because the risk will dry if you forcibly never",
    "start": "549540",
    "end": "555420"
  },
  {
    "text": "repeat yourself and you don't have any piece of duplicated code in your entire code base or then you're going to introduce a lot of genetic Solutions and",
    "start": "555420",
    "end": "563459"
  },
  {
    "text": "also introduce a lot of coupling because every time you you want to solve duplication you move it to a central",
    "start": "563459",
    "end": "570060"
  },
  {
    "text": "place and then two places linked to the central place so you introduce coupling so you you prevent duplication which I",
    "start": "570060",
    "end": "576720"
  },
  {
    "text": "think is good which you do increase coupling so there's a point I want to make that",
    "start": "576720",
    "end": "583260"
  },
  {
    "text": "probably many of you may not agree with but my point is that duplicated code in",
    "start": "583260",
    "end": "589620"
  },
  {
    "text": "essence doesn't doesn't hurt you if I have a piece of code I need somewhere else I copy it",
    "start": "589620",
    "end": "595260"
  },
  {
    "text": "it's fine there if I copied another time it's fine it's copied no time is fine it doesn't start hurting until I need to",
    "start": "595260",
    "end": "600480"
  },
  {
    "text": "change that copied code because the randomly changed into three four five places but",
    "start": "600480",
    "end": "606000"
  },
  {
    "text": "as long as I don't need to change or fix it it's not really a big problem you could see it as a code smell because",
    "start": "606000",
    "end": "611220"
  },
  {
    "text": "there's duplicated stuff but it's highly independent of each other and Independence means locality means speed",
    "start": "611220",
    "end": "618560"
  },
  {
    "text": "obviously on a theoretical level this is easy to reason about um but",
    "start": "618899",
    "end": "624779"
  },
  {
    "text": "um you should also not underestimate the power of automated search and replace tools",
    "start": "624779",
    "end": "631920"
  },
  {
    "text": "I saw Saunder the keynote speaker from from just before walking he was walking the part here with this slide on screen",
    "start": "631920",
    "end": "637320"
  },
  {
    "text": "I thought oh no summer is coming here and going to keep me up but luckily you sat down so that's uh",
    "start": "637320",
    "end": "643260"
  },
  {
    "text": "so but I think also do not um underestimate the how easy it is to do",
    "start": "643260",
    "end": "649500"
  },
  {
    "text": "Global search and replace Us in in Ides now right you have duplicated code I want to fix something oh now we need to",
    "start": "649500",
    "end": "655320"
  },
  {
    "text": "change it in two places well if you're like a record search in place it may be well doable obviously take it with a grain of salt",
    "start": "655320",
    "end": "662040"
  },
  {
    "text": "but in general keep it in mind so we often say that design is about",
    "start": "662040",
    "end": "668519"
  },
  {
    "text": "making things future proof and designing this so that I can easily extend it later",
    "start": "668519",
    "end": "675480"
  },
  {
    "text": "isn't that as simple as as saying um if you want to make sort of future",
    "start": "675480",
    "end": "680820"
  },
  {
    "text": "proof isn't as simple as saying can we predict the future probably we cannot right so should we be",
    "start": "680820",
    "end": "687420"
  },
  {
    "text": "prepared for future changes by all means the nature of software is that it should be easy to change right",
    "start": "687420",
    "end": "694320"
  },
  {
    "text": "but it's also pretty clear that we cannot predict any changes that are coming so we can either prepare by making everything really generic and",
    "start": "694320",
    "end": "700260"
  },
  {
    "text": "really easily adaptable but we can also think about how do we design things so we can accommodate change",
    "start": "700260",
    "end": "706079"
  },
  {
    "text": "and how do you make code that is easy to change oh you write really simple code because",
    "start": "706079",
    "end": "711899"
  },
  {
    "text": "simple code is easy to understand and therefore easy to change so we're making choices here I typically",
    "start": "711899",
    "end": "717839"
  },
  {
    "text": "perform some sort of risk management so when I need to make a design choice I think about okay what's the what's the",
    "start": "717839",
    "end": "724380"
  },
  {
    "text": "risk of making a wrong decision if if this is a really fundamental decision and I get it wrong and it takes",
    "start": "724380",
    "end": "730260"
  },
  {
    "text": "me weeks or years or months or or months or years to to fix it okay",
    "start": "730260",
    "end": "736740"
  },
  {
    "text": "they need to think a little bit harder because there's a high impact decision if it's a decision that I can be folk or",
    "start": "736740",
    "end": "742440"
  },
  {
    "text": "or reiterate in in a day or maybe even a week okay maybe I should just go along",
    "start": "742440",
    "end": "747600"
  },
  {
    "text": "with the first thing that pops up in in my mind so I have an example to uh to explain",
    "start": "747600",
    "end": "754519"
  },
  {
    "text": "the concept of of being future proof so this is a story about flexibility and",
    "start": "754519",
    "end": "760200"
  },
  {
    "start": "758000",
    "end": "944000"
  },
  {
    "text": "software so I was working for a company that was doing um software for governmental agencies",
    "start": "760200",
    "end": "765300"
  },
  {
    "text": "and typically these are like written out to the public as uh tenders I'm stating",
    "start": "765300",
    "end": "770700"
  },
  {
    "text": "it and the system had been designed by two uh information Architects that had",
    "start": "770700",
    "end": "776160"
  },
  {
    "text": "basically made the specifications for the entire system and they are their experience was that software was hard to",
    "start": "776160",
    "end": "782160"
  },
  {
    "text": "change so in order to and and one of the wishes from the uh the client",
    "start": "782160",
    "end": "789180"
  },
  {
    "text": "was that it should be easy to change the software so in order to fix this they designed a really flexible system",
    "start": "789180",
    "end": "796560"
  },
  {
    "text": "so every uh field on the on every screen you could edit in a database even all",
    "start": "796560",
    "end": "802740"
  },
  {
    "text": "the lists that were shown on the screen you could add it to an admin interface and well to make it even easier they",
    "start": "802740",
    "end": "809040"
  },
  {
    "text": "designed two applications and they needed to synchronize with each other in some way so it's all really easy to",
    "start": "809040",
    "end": "814079"
  },
  {
    "text": "change so I didn't notice backstory when I joined the project but I joined the project and I set up my environment and",
    "start": "814079",
    "end": "820740"
  },
  {
    "text": "I opened the the first the home screen that had maybe three pieces of information in there and took like five",
    "start": "820740",
    "end": "826620"
  },
  {
    "text": "seconds to load it's almost like that's pretty long five seconds for a simple screen so what's going on there asked to my colleague and",
    "start": "826620",
    "end": "832980"
  },
  {
    "text": "he said well it's there's a database query going on I said okay well I know um a couple of couple of things about",
    "start": "832980",
    "end": "839399"
  },
  {
    "text": "data base queries or maybe kind of look at the query to see if I can maybe optimize it and they looked at me with a weird grid",
    "start": "839399",
    "end": "846120"
  },
  {
    "text": "and he said are you sure and said yeah sure just get me a query or I'll go print it for you he said I said okay",
    "start": "846120",
    "end": "851700"
  },
  {
    "text": "fine so I was sitting there looking at the door and he wasn't coming back so he was away",
    "start": "851700",
    "end": "857579"
  },
  {
    "text": "for 10 12 30 minutes and then 30 minutes later the door the",
    "start": "857579",
    "end": "863220"
  },
  {
    "text": "door banged open because he had to kick it because he was wearing a stack of paper like this big and he with a big",
    "start": "863220",
    "end": "869700"
  },
  {
    "text": "smile he threw it on my desk and said here's the query maybe you can optimize it and it turned out it was not one",
    "start": "869700",
    "end": "875459"
  },
  {
    "text": "query it was six thousand queries because it was um well a Java ee application with with jpa and hibernate",
    "start": "875459",
    "end": "881339"
  },
  {
    "text": "and loads of uh post construct post load annotations and basically there was an entire Christmas tree being fetchy",
    "start": "881339",
    "end": "886860"
  },
  {
    "text": "memory because of all those things that were made easy to change right all this flexibility so it kind of came became a",
    "start": "886860",
    "end": "894120"
  },
  {
    "text": "inverse self-fulfilling prophecy where because they want the system to be easy to change they had designed the system",
    "start": "894120",
    "end": "899639"
  },
  {
    "text": "to be so complex that it became hard to change so in the end we were confident we were",
    "start": "899639",
    "end": "905880"
  },
  {
    "text": "able to convince the client that this wasn't going to work that we needed to rebuild something really simple uh that",
    "start": "905880",
    "end": "911459"
  },
  {
    "text": "exactly what the business wants and in the end we succeeded by just writing simple code and if you have simple code",
    "start": "911459",
    "end": "916860"
  },
  {
    "text": "then it's also easy to change if you have a fast delivery and deploy process it's also easy to deploy so I think",
    "start": "916860",
    "end": "922740"
  },
  {
    "text": "flexibility is also about having code that is easy to understand easy to change and and Stefan telkoff who walks around",
    "start": "922740",
    "end": "929579"
  },
  {
    "text": "here somewhere also I think he said it best he said highly specific code is often preferable to sophisticated",
    "start": "929579",
    "end": "935579"
  },
  {
    "text": "configuration and I cannot agree more for this specific project so we're in 15 minutes I haven't said",
    "start": "935579",
    "end": "942959"
  },
  {
    "text": "much about generic Services specific so let's start",
    "start": "942959",
    "end": "948320"
  },
  {
    "start": "944000",
    "end": "1113000"
  },
  {
    "text": "first think about those levels where we can make make choices so obviously we can make choices on the",
    "start": "948540",
    "end": "954360"
  },
  {
    "text": "code and glass level this is going to be a reusable class or not you can have the same idea about",
    "start": "954360",
    "end": "961500"
  },
  {
    "text": "manually versus generated code so if if the code is generated if it's duplicated is that another thing then when it's",
    "start": "961500",
    "end": "968279"
  },
  {
    "text": "manually written code I think so I don't mind having generated code that's duplicated all over the place because",
    "start": "968279",
    "end": "973380"
  },
  {
    "text": "it's generated in a rebuilt that I do right on the library level am I going to build",
    "start": "973380",
    "end": "979320"
  },
  {
    "text": "something myself I'm going to use a library or am I going to extract generic logic to reusable Library",
    "start": "979320",
    "end": "986779"
  },
  {
    "text": "on a data level so am I going to use a generic data model in my organization or not or even",
    "start": "986940",
    "end": "993959"
  },
  {
    "text": "better generate a model over multiple organizations so we recall working for a client in the insurance industry and",
    "start": "993959",
    "end": "1002079"
  },
  {
    "text": "typically there's insurance agents that sell policies and there's insurers that actually have those policies and they",
    "start": "1002079",
    "end": "1008480"
  },
  {
    "text": "sometimes need to exchange information so somebody had the idea which was in in essence not a bad idea that it should be",
    "start": "1008480",
    "end": "1014660"
  },
  {
    "text": "good to standardize this piece of communication like which type of messages are being sent between those systems and this was called him stands",
    "start": "1014660",
    "end": "1022220"
  },
  {
    "text": "for Enrique interface manager so generic interface manager it was an interface so the eye was right",
    "start": "1022220",
    "end": "1027980"
  },
  {
    "text": "but there are two words that are big red flags generic and manager right so the",
    "start": "1027980",
    "end": "1034220"
  },
  {
    "text": "point was there was a generic data model and uh well you should look at the data catalog for the piece of information you",
    "start": "1034220",
    "end": "1039620"
  },
  {
    "text": "want to transfer look at the catalog map the fields to your fields and then you will be fine until there was a field",
    "start": "1039620",
    "end": "1045140"
  },
  {
    "text": "that you had that you couldn't mapped to the data catalog so what do you do then well it's easy you call the person",
    "start": "1045140",
    "end": "1050840"
  },
  {
    "text": "that's maintaining the standard you convince them that you need a new field they agree they draft a new version of",
    "start": "1050840",
    "end": "1056539"
  },
  {
    "text": "the specification they send out a specification for view view to all participants everybody implements it",
    "start": "1056539",
    "end": "1061700"
  },
  {
    "text": "deploys it and then your best case six months ahead right but I need this piece of information now so you agree with the",
    "start": "1061700",
    "end": "1068179"
  },
  {
    "text": "insurance company that you put it in a field that's actually not used for this but at least you can continue so I think",
    "start": "1068179",
    "end": "1073940"
  },
  {
    "text": "that's that's one of the greatest effort generic interface data interface",
    "start": "1073940",
    "end": "1080179"
  },
  {
    "text": "you can have it on the service level for example are you going to put something in a generic service being used by",
    "start": "1080179",
    "end": "1087080"
  },
  {
    "text": "multiple teams or not are going you keep the service for yourself and even on organization level so when",
    "start": "1087080",
    "end": "1093980"
  },
  {
    "text": "are you going to do something specific for your project we're going to make a generic library or generic service that",
    "start": "1093980",
    "end": "1100220"
  },
  {
    "text": "other teams can use it may save them time but you do introduce coupling between those teams between those",
    "start": "1100220",
    "end": "1105919"
  },
  {
    "text": "projects so how do you decide whether to go",
    "start": "1105919",
    "end": "1111140"
  },
  {
    "text": "generic or specific well a couple of tools to help you decide",
    "start": "1111140",
    "end": "1117320"
  },
  {
    "start": "1113000",
    "end": "1646000"
  },
  {
    "text": "I think the first one is asking yourself do we really need this now that's probably a quote from you sonder right",
    "start": "1117320",
    "end": "1123340"
  },
  {
    "text": "you can also see it as acne you ain't gonna need it or you ain't gonna need it yet so do we really need to make this",
    "start": "1123340",
    "end": "1129799"
  },
  {
    "text": "generic now do we see multiple use cases well probably not",
    "start": "1129799",
    "end": "1135799"
  },
  {
    "text": "my favorite is the 5ws so if somebody wants to do something and you want to figure out what they are",
    "start": "1135799",
    "end": "1143360"
  },
  {
    "text": "doing and why you apply the 5ws so the first is why why do you want to do this",
    "start": "1143360",
    "end": "1148940"
  },
  {
    "text": "they give you an answer okay because it's faster the second is why so why is",
    "start": "1148940",
    "end": "1154460"
  },
  {
    "text": "it faster well because I've done these shirts etc etc so the third one is why",
    "start": "1154460",
    "end": "1159500"
  },
  {
    "text": "why Etc as well you keep it ready you keep asking why why until either they get stuck and they give up or you",
    "start": "1159500",
    "end": "1165620"
  },
  {
    "text": "haven't actually answer that you can live with and then it's fine think about time and effort uh I have",
    "start": "1165620",
    "end": "1173000"
  },
  {
    "text": "something that may be already there if I copy it it takes one minute",
    "start": "1173000",
    "end": "1178280"
  },
  {
    "text": "if I want to make it generic it takes a little more time but maybe the next use case takes less time but do we know",
    "start": "1178280",
    "end": "1184640"
  },
  {
    "text": "there will be a next use case we don't know yet so think about time and effort sometimes it can even help building",
    "start": "1184640",
    "end": "1190160"
  },
  {
    "text": "something generous because you're pretty sure you're going to need it in 10 places like I don't know logging metric",
    "start": "1190160",
    "end": "1195559"
  },
  {
    "text": "security those course concerns that you have everywhere also be aware of the myth of the first",
    "start": "1195559",
    "end": "1202280"
  },
  {
    "text": "time right well we want to build this this is the first time we see this we're pretty sure that we completely",
    "start": "1202280",
    "end": "1208220"
  },
  {
    "text": "understand all the use case in the entire context we're going to build this perfect right away then you see the Second Use case and",
    "start": "1208220",
    "end": "1214100"
  },
  {
    "text": "then you figure out that it was a myth of getting it the first time right and also think about complexity and",
    "start": "1214100",
    "end": "1220160"
  },
  {
    "text": "scope so if something is is really complex well then it may make sense to",
    "start": "1220160",
    "end": "1225320"
  },
  {
    "text": "uh to to put it away in a library as some sort of encapsulation so if you",
    "start": "1225320",
    "end": "1230600"
  },
  {
    "text": "have a specialized team working on something like authentication or encryption not that I'm saying if you should do this yourself but think about",
    "start": "1230600",
    "end": "1237020"
  },
  {
    "text": "complexity in terms of topics it may help building this generic so there's only a couple of people who are able to",
    "start": "1237020",
    "end": "1243140"
  },
  {
    "text": "touch it and the rest just is using this true well-defined apis",
    "start": "1243140",
    "end": "1248620"
  },
  {
    "text": "and the rule of three we'll look at it in a bit and and um countering my previous Point",
    "start": "1251360",
    "end": "1257720"
  },
  {
    "text": "future needs and evolution but only if you know them if you know they're going to be changes in the future if you don't",
    "start": "1257720",
    "end": "1263179"
  },
  {
    "text": "know them don't try to predict them because you're not going to get them anyway so as kunar modeling a friend of mine",
    "start": "1263179",
    "end": "1270200"
  },
  {
    "text": "said a fair share of software design is about professional procrastination",
    "start": "1270200",
    "end": "1275480"
  },
  {
    "text": "so keeping options on the table and doors open for as long as you can to avoid locking yourself into a corner",
    "start": "1275480",
    "end": "1282320"
  },
  {
    "text": "by committing too early on something so that we will see more about this where we look at the cost of abstractions in a bit",
    "start": "1282320",
    "end": "1289940"
  },
  {
    "text": "so the rule of three it's it's a simple rule when you're reusing code you copy it",
    "start": "1289940",
    "end": "1295520"
  },
  {
    "text": "once so that's the second time you're using it and you only abstract the third time you have this use case",
    "start": "1295520",
    "end": "1302720"
  },
  {
    "text": "this helps you avoid writing the wrong abstraction and it's easier to make a good",
    "start": "1302720",
    "end": "1309200"
  },
  {
    "text": "abstraction from duplicated code than to make a wrong description and then try to refactor this one extraction",
    "start": "1309200",
    "end": "1314900"
  },
  {
    "text": "into the right obstruction so you could also see this as three",
    "start": "1314900",
    "end": "1320240"
  },
  {
    "text": "strikes and a new reflector so the first use case just build it",
    "start": "1320240",
    "end": "1326059"
  },
  {
    "text": "don't generate size result just solve the problem in front of you may",
    "start": "1326059",
    "end": "1331580"
  },
  {
    "text": "not be just but you solve it second case you duplicate the original",
    "start": "1331580",
    "end": "1336620"
  },
  {
    "text": "you redesign a bit and maybe you extract common Behavior while you change but you can still keep this common Behavior",
    "start": "1336620",
    "end": "1342740"
  },
  {
    "text": "local in both places and in the third case you look at the lessons from your first two passes then",
    "start": "1342740",
    "end": "1349039"
  },
  {
    "text": "you can design a generic solution that will fit all those three cases and then we'll make it easy to extend your third",
    "start": "1349039",
    "end": "1354559"
  },
  {
    "text": "case so another approach that can help is to",
    "start": "1354559",
    "end": "1360559"
  },
  {
    "text": "apply a set of design heuristics so you're going to look at a problem in a couple of passes so the first one the",
    "start": "1360559",
    "end": "1366080"
  },
  {
    "text": "acne and Rule of three try to make it as simple and specific as possible you can always do this",
    "start": "1366080",
    "end": "1371960"
  },
  {
    "text": "the second one based on what you now know of the the solution domain so how you solve this problem",
    "start": "1371960",
    "end": "1377659"
  },
  {
    "text": "is it less work to make a generic solution now or in the future",
    "start": "1377659",
    "end": "1383000"
  },
  {
    "text": "and the third Pass based on on your problem domain so now you understand the problem because you built something is",
    "start": "1383000",
    "end": "1388700"
  },
  {
    "text": "the easiest solution actually correct or are there more less drivable use case that we need to look into make it make",
    "start": "1388700",
    "end": "1394640"
  },
  {
    "text": "it more complex and then the fourth pass looking at a customer Behavior or other non-technical",
    "start": "1394640",
    "end": "1401059"
  },
  {
    "text": "considerations does this change your decision because okay we have other reasons why the be generic because I",
    "start": "1401059",
    "end": "1408080"
  },
  {
    "text": "know it should be a plugable module or a Plugin or whatever",
    "start": "1408080",
    "end": "1412779"
  },
  {
    "text": "so a final concept you can apply is a strategic design and this concept from a DDD domain driven design",
    "start": "1413960",
    "end": "1420140"
  },
  {
    "text": "and you can use it as a tool to help decide between generic and specific but",
    "start": "1420140",
    "end": "1425659"
  },
  {
    "text": "mainly about building something yourself or not so in strategic design you you basically",
    "start": "1425659",
    "end": "1431120"
  },
  {
    "text": "state that there are three different subdomains in your code so the first is your core domain the",
    "start": "1431120",
    "end": "1437419"
  },
  {
    "text": "core domain is what makes you and your business special is what you are really good at what you excel at and without",
    "start": "1437419",
    "end": "1443299"
  },
  {
    "text": "this piece of functionality in your software your software could not run or could not exist",
    "start": "1443299",
    "end": "1449900"
  },
  {
    "text": "so typically this is something you always build yourself and you have your best people working on this",
    "start": "1449900",
    "end": "1455539"
  },
  {
    "text": "then it can be supporting subdomains so stuff that is specific for your business for your problem for your product",
    "start": "1455539",
    "end": "1461659"
  },
  {
    "text": "but that you could probably leave out and still have a working project",
    "start": "1461659",
    "end": "1467600"
  },
  {
    "text": "so you can even try to you can either try to get like off-the-shelf products for this and adapt a bit or maybe build",
    "start": "1467600",
    "end": "1474140"
  },
  {
    "text": "it yourself if that turns out to work better or be less work and then the third one third one is",
    "start": "1474140",
    "end": "1479659"
  },
  {
    "text": "generic sub domains so generic strip domain is something that is not specific to your business it's a a generally uh",
    "start": "1479659",
    "end": "1486200"
  },
  {
    "text": "recognized problem uh where there are standard Solutions so this could be like accounting or Finance or uh I don't know",
    "start": "1486200",
    "end": "1493640"
  },
  {
    "text": "uh converting something to a PDF probably you can typically you can use off-the-shelf solutions for this so",
    "start": "1493640",
    "end": "1498980"
  },
  {
    "text": "either a product a SAS or a library that you can get from from somewhere",
    "start": "1498980",
    "end": "1505059"
  },
  {
    "text": "and then there's more you need to consider because there's also organizational factors so Melvin Conway said that organizations",
    "start": "1507140",
    "end": "1514340"
  },
  {
    "text": "Design Systems that basically mirror their own communication structure so if you have three teams working on a",
    "start": "1514340",
    "end": "1520520"
  },
  {
    "text": "compiler you'll get a three pass compiler and I guess my main point here is don't",
    "start": "1520520",
    "end": "1526340"
  },
  {
    "text": "try to force a solution that goes against the structure of your organization so if you have three teams that hate",
    "start": "1526340",
    "end": "1532820"
  },
  {
    "text": "working together and they all three have the same problem you have two options have them each",
    "start": "1532820",
    "end": "1538340"
  },
  {
    "text": "build their own solution maybe a bit more work but they won't fight or force them to use a generic",
    "start": "1538340",
    "end": "1544100"
  },
  {
    "text": "solution and then you're pretty sure that you'll get fireworks but not the type of fireworks you like right they're going to be fighting so also consider",
    "start": "1544100",
    "end": "1550640"
  },
  {
    "text": "organizational aspects there so be careful to go generic when teams",
    "start": "1550640",
    "end": "1555679"
  },
  {
    "text": "don't want to work together because they'll have discussions on how to solve things on priority on which which does",
    "start": "1555679",
    "end": "1561620"
  },
  {
    "text": "land in a generic solution and whatnot if each has their own solution they won't have these discussions it may be",
    "start": "1561620",
    "end": "1566840"
  },
  {
    "text": "more work but there's less discussion so uh well you need to weigh those Alternatives and in the end decide",
    "start": "1566840",
    "end": "1572600"
  },
  {
    "text": "what's best for your organization so to give an example I used to work for",
    "start": "1572600",
    "end": "1579740"
  },
  {
    "text": "an educational publisher and they wanted to build a new generation of e-learning applications but there were three",
    "start": "1579740",
    "end": "1585320"
  },
  {
    "text": "business units that were working fairly independent at their own budget had their own",
    "start": "1585320",
    "end": "1590919"
  },
  {
    "text": "planning and they all had money to to build a new system but in the end we found that we ended up",
    "start": "1590919",
    "end": "1597440"
  },
  {
    "text": "with three e-learning systems because of the oh at their own budget their own teams and they all had their own",
    "start": "1597440",
    "end": "1603140"
  },
  {
    "text": "requirements if you would zoom out a bit they would be fairly the same but they have still some some differences on a",
    "start": "1603140",
    "end": "1609679"
  },
  {
    "text": "lower level so the organization didn't want to work together so as an IT department we mainly let",
    "start": "1609679",
    "end": "1617539"
  },
  {
    "text": "them believe that we were working specifically for them and then inside the IT department we looked at okay are",
    "start": "1617539",
    "end": "1622700"
  },
  {
    "text": "there General components that we can share like session management or I don't know getting educational content on the",
    "start": "1622700",
    "end": "1628100"
  },
  {
    "text": "screen but it probably wouldn't have worked at all if we would have built one generic e-learning system because there",
    "start": "1628100",
    "end": "1633320"
  },
  {
    "text": "would have been way too much fighting between the people actually paying for those Solutions",
    "start": "1633320",
    "end": "1639320"
  },
  {
    "text": "so it's an interesting uh well Dynamic that that it helps to be to be aware of",
    "start": "1639320",
    "end": "1646000"
  },
  {
    "start": "1646000",
    "end": "1900000"
  },
  {
    "text": "so let's think about cost going generic probably will save you time in the long run right once you have",
    "start": "1647179",
    "end": "1653779"
  },
  {
    "text": "something generic then next time it's free to use it because you've already built it you can reuse it it doesn't",
    "start": "1653779",
    "end": "1658940"
  },
  {
    "text": "cost you anything well I tend to disagree",
    "start": "1658940",
    "end": "1664100"
  },
  {
    "text": "um another rule of three is that you can say that building reusable components is three times as difficult as single use",
    "start": "1664100",
    "end": "1670520"
  },
  {
    "text": "because talking between teams matching mapping different use cases on it having",
    "start": "1670520",
    "end": "1676279"
  },
  {
    "text": "different points of view about implementation so the price you pay is coupling to treat the three teams that are using the",
    "start": "1676279",
    "end": "1683120"
  },
  {
    "text": "same software you have a boat on a code level and on a people or Team level because there's",
    "start": "1683120",
    "end": "1688220"
  },
  {
    "text": "communication over it I want to change something in generic Library I want to change it now well the second team",
    "start": "1688220",
    "end": "1693320"
  },
  {
    "text": "doesn't have time to look at it and the third team doesn't uh agree with the changes that you're going to do then",
    "start": "1693320",
    "end": "1698600"
  },
  {
    "text": "you're stuck if it's only in your local code base you don't need to talk to them not saying that it's a bad thing to talk",
    "start": "1698600",
    "end": "1704600"
  },
  {
    "text": "to people but dependencies do slow you down here",
    "start": "1704600",
    "end": "1709539"
  },
  {
    "text": "so what if you get it wrong if you attempt to pick the wrong wrong direction",
    "start": "1710480",
    "end": "1716179"
  },
  {
    "text": "although let's look at the course of abstractions here and I think it's fair to to agree with each other that there",
    "start": "1716179",
    "end": "1722900"
  },
  {
    "text": "are no zero cost abstractions so every abstraction you make will cost you something in time or money or people",
    "start": "1722900",
    "end": "1729860"
  },
  {
    "text": "so in general efficiency gains of going generic are typically clear right next",
    "start": "1729860",
    "end": "1735380"
  },
  {
    "text": "time somebody can use this and it won't cost them anything they just need to integrate a generic solution but how about onboarding new people",
    "start": "1735380",
    "end": "1741860"
  },
  {
    "text": "if just the code for your application is in one code base you read through this code base you are onboard it if it's in",
    "start": "1741860",
    "end": "1747200"
  },
  {
    "text": "some generic Library you need to hop out of the scope of your code base find the code of the generic Library understand",
    "start": "1747200",
    "end": "1752360"
  },
  {
    "text": "how it works there may be use cases in there that are not relevant for your project but are in there because they're relevant for other projects so",
    "start": "1752360",
    "end": "1758120"
  },
  {
    "text": "onboarding becomes more difficult it may be less readable depending on how",
    "start": "1758120",
    "end": "1763340"
  },
  {
    "text": "good you design the apis of the generic Library coupling again",
    "start": "1763340",
    "end": "1770419"
  },
  {
    "text": "so if you think about writing bad abstractions you're writing unnecessarily reusable code",
    "start": "1771980",
    "end": "1778340"
  },
  {
    "text": "because nobody's going to use it you're introducing a necessary coupling but it's even worse if you think about",
    "start": "1778340",
    "end": "1783500"
  },
  {
    "text": "maintaining bad abstractions because they may be hard to see they may be hard to understand and it may be hard to",
    "start": "1783500",
    "end": "1790279"
  },
  {
    "text": "extend so if you have the wrong abstraction it actually will cost you extra time every time you look at it and",
    "start": "1790279",
    "end": "1795380"
  },
  {
    "text": "you want to change something so why should you go generic then or when",
    "start": "1795380",
    "end": "1801440"
  },
  {
    "text": "oh let's start with bad reasons first we've always done it like this we always",
    "start": "1801440",
    "end": "1806539"
  },
  {
    "text": "make things generic okay but that's not a reason why we",
    "start": "1806539",
    "end": "1811760"
  },
  {
    "text": "should go generic no right just apply the five W's keep asking why we don't want to depend on libraries",
    "start": "1811760",
    "end": "1818059"
  },
  {
    "text": "so we're making something ourselves not offended here we need to be future proof so we need to",
    "start": "1818059",
    "end": "1824419"
  },
  {
    "text": "be really generic so we can accommodate future training changes well we all heard how well that worked with the really flexible application now right",
    "start": "1824419",
    "end": "1832820"
  },
  {
    "text": "because the product owner wants it while the prototoner can go think about product stuff and and not technical",
    "start": "1832820",
    "end": "1839059"
  },
  {
    "text": "stuff right they should join development teams you want to think about technical stuff because the architect wants it that's my",
    "start": "1839059",
    "end": "1846740"
  },
  {
    "text": "favorite one so this this is a form of an appearance that I like to call Seagull architecture",
    "start": "1846740",
    "end": "1853159"
  },
  {
    "text": "so Siegel architecture is when the architect behaves like a seagull as a meal so hoovering high above the teams",
    "start": "1853159",
    "end": "1860860"
  },
  {
    "text": "diving every diving down every now again Shades only developers below steals are",
    "start": "1860860",
    "end": "1867380"
  },
  {
    "text": "french fries and flies back up again better Siegel architecture so whenever",
    "start": "1867380",
    "end": "1873919"
  },
  {
    "text": "somebody does this to you just refer them if they've ever heard about Siegel architecture and if not tell them the story",
    "start": "1873919",
    "end": "1880220"
  },
  {
    "text": "if the architect wants it they I think there's still a responsibility to convince the team that this is a good idea and write down why they did it",
    "start": "1880220",
    "end": "1887360"
  },
  {
    "text": "because then at least in two years from now you can tell the architect told you so it wasn't a good idea obviously it's",
    "start": "1887360",
    "end": "1893120"
  },
  {
    "text": "hard in this stage of a project to look into the future to see whether something is going to work or not right",
    "start": "1893120",
    "end": "1900080"
  },
  {
    "start": "1900000",
    "end": "2025000"
  },
  {
    "text": "so Philip Reese's the rule of three checks out it's the third time you're seeing something",
    "start": "1900080",
    "end": "1905360"
  },
  {
    "text": "you're pretty sure you're going to need it almost everywhere metrics logging tracing security uh I don't know generic",
    "start": "1905360",
    "end": "1913700"
  },
  {
    "text": "library for database access then it's fine it's a library that a lot of teams will",
    "start": "1913700",
    "end": "1919340"
  },
  {
    "text": "use that's basically the same as my previous point or I think I told it before complex",
    "start": "1919340",
    "end": "1924799"
  },
  {
    "text": "logic that only a couple of people have then you can use a generic solution as encapsulation for this complex logic",
    "start": "1924799",
    "end": "1932659"
  },
  {
    "text": "or when the gains are bigger than the cost but that may be hard to make really",
    "start": "1932659",
    "end": "1938120"
  },
  {
    "text": "concrete at any point of a project so if you look at it in in uh in",
    "start": "1938120",
    "end": "1944840"
  },
  {
    "text": "different Scopes think back about the layers in Iraq called the composition of a system so context containers",
    "start": "1944840",
    "end": "1951200"
  },
  {
    "text": "components classes code first component versus service",
    "start": "1951200",
    "end": "1957260"
  },
  {
    "text": "and ask yourself are considerations to go generic or specific are they the same on every level do you make the same uh",
    "start": "1957260",
    "end": "1964520"
  },
  {
    "text": "do you weigh the same pros and cons on when making some generic on the code level versus making something generic",
    "start": "1964520",
    "end": "1969860"
  },
  {
    "text": "organization level I think the risk is definitely is higher",
    "start": "1969860",
    "end": "1975440"
  },
  {
    "text": "if you get it wrong on organization level so when the level is higher because then it impacts maybe 10 teams",
    "start": "1975440",
    "end": "1981980"
  },
  {
    "text": "and when you make a local wrong decision on your code it only impacts your team",
    "start": "1981980",
    "end": "1988220"
  },
  {
    "text": "and I think it's also important to not confuse generalification with standardization so for example you can say we",
    "start": "1988220",
    "end": "1994700"
  },
  {
    "text": "standardize on oauth in our company or authentication should be odd",
    "start": "1994700",
    "end": "1999740"
  },
  {
    "text": "that's fine but that doesn't mean that you should have a generic implementation for a lot maybe there are different uh",
    "start": "1999740",
    "end": "2005679"
  },
  {
    "text": "use cases there are simple what servers clients maybe some have grants some not some have roles some not so you can",
    "start": "2005679",
    "end": "2012640"
  },
  {
    "text": "still standardize on all out and having a specific implementation of all in every project not saying that",
    "start": "2012640",
    "end": "2018580"
  },
  {
    "text": "authentication is the best example but I think you you catch my point",
    "start": "2018580",
    "end": "2023880"
  },
  {
    "text": "so it's time for a couple of stories or examples",
    "start": "2024820",
    "end": "2029940"
  },
  {
    "start": "2025000",
    "end": "2369000"
  },
  {
    "text": "why specific code is often faster than generic code",
    "start": "2031200",
    "end": "2037059"
  },
  {
    "text": "so you're going to look at a little overview of mine it's obvious codes challenges so I often compete in code competitions and there's different",
    "start": "2037059",
    "end": "2043240"
  },
  {
    "text": "challenges there like who solves this the fastest the ugliest the quickest the shortest Etc so one is code golf so with",
    "start": "2043240",
    "end": "2050919"
  },
  {
    "text": "code golf you need to solve a problem in the least amount of characters of Code as possible",
    "start": "2050919",
    "end": "2056800"
  },
  {
    "text": "so every character counts spaces whatever so this you need to be really creative to to be really short here so I",
    "start": "2056800",
    "end": "2062980"
  },
  {
    "text": "remember participating in code golf a while ago and the challenge was that you should validate a bank account number so",
    "start": "2062980",
    "end": "2069398"
  },
  {
    "text": "it's something we call the LF proof in the Netherlands there's rules that can say bank account number is valid",
    "start": "2069399",
    "end": "2074740"
  },
  {
    "text": "and immediately knew that I didn't have the oretical and mathematical skills to win",
    "start": "2074740",
    "end": "2080858"
  },
  {
    "text": "in an honest approach because well there were there were people going to be that knew old things",
    "start": "2080859",
    "end": "2086679"
  },
  {
    "text": "about bit shifting that are really smart and now well I don't know much about bitshifting but then I figured out that it was running on probably in a Lambda",
    "start": "2086679",
    "end": "2093940"
  },
  {
    "text": "somewhere your Solutions and I I figured out what if I lock all the um uh all the numbers that are in the",
    "start": "2093940",
    "end": "2100660"
  },
  {
    "text": "test case to a remote server so I did that and there were only 10 numbers in in the test case so it could basically",
    "start": "2100660",
    "end": "2105880"
  },
  {
    "text": "say uh reply uh return third character is even or fifth character is is odd and",
    "start": "2105880",
    "end": "2112420"
  },
  {
    "text": "then it's a valid number for those test cases so that was really fast and I was on top of the list of the shorter solution",
    "start": "2112420",
    "end": "2118660"
  },
  {
    "text": "but then they found out that I was doing this and I got caught and uh well they added test cases so my next solution was",
    "start": "2118660",
    "end": "2125020"
  },
  {
    "text": "to build a client server application in 200 bytes where I would basically call a remote server validate it there and then",
    "start": "2125020",
    "end": "2130480"
  },
  {
    "text": "get back and well still uh the the the bit shifting people were faster but I think the the first solution is an",
    "start": "2130480",
    "end": "2137980"
  },
  {
    "text": "example because it was really specific Taylor do the problem domain of those 10 bank account numbers and it was really",
    "start": "2137980",
    "end": "2143020"
  },
  {
    "text": "fast so a better example I think is about Advent of code so admin of code who",
    "start": "2143020",
    "end": "2148540"
  },
  {
    "text": "knows about fnf code of you cool it's a code challenge that starts on December 1st there's a new coach challenge every",
    "start": "2148540",
    "end": "2154300"
  },
  {
    "text": "day until Christmas and the the person who solves it the fastest new challenges",
    "start": "2154300",
    "end": "2160060"
  },
  {
    "text": "Arise at 6am Central European Time gets the most amount of points so the first",
    "start": "2160060",
    "end": "2165280"
  },
  {
    "text": "day I wasn't I was away I think I was abroad I got a message from our director saying hey I'm ahead of you in a code",
    "start": "2165280",
    "end": "2172720"
  },
  {
    "text": "Challenge and like what that cannot happen so I set my alarm clock to 5 45 for a whole for the whole month of",
    "start": "2172720",
    "end": "2178180"
  },
  {
    "text": "December to try to catch up family hated it but to give an example of such a",
    "start": "2178180",
    "end": "2183579"
  },
  {
    "text": "challenge here you needed to parse some text input which is on the lower left bottom these are stacks of crates so",
    "start": "2183579",
    "end": "2190540"
  },
  {
    "text": "wooden crates with labels and for example you need to parse the initial set of crates and then the first lines",
    "start": "2190540",
    "end": "2196060"
  },
  {
    "text": "just move one from two to one so you move the D from stack two to stack one so now D is on top of the first deck",
    "start": "2196060",
    "end": "2201820"
  },
  {
    "text": "this is a trivial example but this was the actual code that I needed to work with and when I saw this my inner",
    "start": "2201820",
    "end": "2208440"
  },
  {
    "text": "developer heart when beating faster right so I need to build a generic",
    "start": "2208440",
    "end": "2214180"
  },
  {
    "text": "parser of this and need to build a matrix class so I can do Matrix operations and yes and that's all going",
    "start": "2214180",
    "end": "2220300"
  },
  {
    "text": "to work and a half an hour later I had something like this to January pass it and Matrix and and then I saw the code from a colleague and it looked like this",
    "start": "2220300",
    "end": "2228540"
  },
  {
    "text": "and he basically had had designed it in in like nines arraylists where he could",
    "start": "2230079",
    "end": "2235300"
  },
  {
    "text": "just add stuff on the end and pop them and pushed him this was way faster and way more specific so in this case I",
    "start": "2235300",
    "end": "2241119"
  },
  {
    "text": "think it's a good example why specific is typically a lot faster but to counter my uh example",
    "start": "2241119",
    "end": "2248320"
  },
  {
    "text": "um there are also case where Genero can be a lot faster think when you need to handle exceptions in for example a Java",
    "start": "2248320",
    "end": "2254320"
  },
  {
    "text": "or spring application you can if you have like a thousand rest time points you can have exception handling in every",
    "start": "2254320",
    "end": "2260859"
  },
  {
    "text": "rest endpoint programs manually or you can do something like this that I recently saw so this is a uh well",
    "start": "2260859",
    "end": "2268119"
  },
  {
    "text": "generic uh controller advice so it wraps around all your spring controllers and then you have basically a generic grade",
    "start": "2268119",
    "end": "2274180"
  },
  {
    "text": "to handle uh exceptions by replying some error response to the to the caller so I",
    "start": "2274180",
    "end": "2281380"
  },
  {
    "text": "think this is a nice way where going generic actually saves saves time it is more difficult to understand because you",
    "start": "2281380",
    "end": "2288040"
  },
  {
    "text": "get a nice format error response you look at your own code you have no idea where it comes from but it does say a",
    "start": "2288040",
    "end": "2293079"
  },
  {
    "text": "few loads and loads of typing on specific responses in every separate best controller",
    "start": "2293079",
    "end": "2298839"
  },
  {
    "text": "final example is about reusing code for a website well we have a lot of websites open",
    "start": "2298839",
    "end": "2305200"
  },
  {
    "text": "value but my favorite one is openvalue.cat and it has a list of all our cats",
    "start": "2305200",
    "end": "2310359"
  },
  {
    "text": "so when we build this uh well as well partly as a joke but we basically programmed everything manually so all",
    "start": "2310359",
    "end": "2317079"
  },
  {
    "text": "the cats here are programmed manually and the more we needed to add things we need to change the HTML and stuff and",
    "start": "2317079",
    "end": "2322660"
  },
  {
    "text": "that was a lot of work so when we found out that we regularly need to change it we found out okay",
    "start": "2322660",
    "end": "2328180"
  },
  {
    "text": "maybe we can just generate this page based on a Json definition of the cats we have and that turned out to be uh",
    "start": "2328180",
    "end": "2335260"
  },
  {
    "text": "well pretty useful because so there was like a simple refactoring because somebody recently asked like hey why",
    "start": "2335260",
    "end": "2340839"
  },
  {
    "text": "don't we have openvalue.doc so now we can reuse this code for openvary.doc to",
    "start": "2340839",
    "end": "2346480"
  },
  {
    "text": "make a list of all the docs we have in the company but to apply to rule of three obviously we're first going to copy this site because it's the second",
    "start": "2346480",
    "end": "2353440"
  },
  {
    "text": "time put the dogs in there and not until we want to list our I don't know crocodiles then we're going to make a generic open value animal site right",
    "start": "2353440",
    "end": "2361660"
  },
  {
    "text": "so uh bonus topic let's look at generic for specific on on organization lab",
    "start": "2361660",
    "end": "2368680"
  },
  {
    "text": "so if you think about sharing code within an organization while sharing code in an organization is easy right",
    "start": "2368680",
    "end": "2374560"
  },
  {
    "start": "2369000",
    "end": "2561000"
  },
  {
    "text": "you just give code towards but doing it efficiently at skill is pretty hard because sharing code at skill means that",
    "start": "2374560",
    "end": "2382060"
  },
  {
    "text": "you oh you probably have multiple modules for multiple teams that share codes there's multiple team members or",
    "start": "2382060",
    "end": "2387280"
  },
  {
    "text": "even multiple teams that work together there's a high rate of change because loads of people are working uh together",
    "start": "2387280",
    "end": "2392320"
  },
  {
    "text": "on this and well you also want to have little to no loss of individual productivity",
    "start": "2392320",
    "end": "2400000"
  },
  {
    "text": "so the challenges you have is what do you do with refactoring when you're renaming a field that says input impact",
    "start": "2400000",
    "end": "2406660"
  },
  {
    "text": "on upstream or Downstream projects are you going to involve them versioning do",
    "start": "2406660",
    "end": "2412540"
  },
  {
    "text": "you let everyone upgrade at their own pace or do you first do you force upgrades of generic libraries to all",
    "start": "2412540",
    "end": "2418900"
  },
  {
    "text": "teams reviewing when somebody need to change dependent projects as",
    "start": "2418900",
    "end": "2425800"
  },
  {
    "text": "well the change that may become pretty large or maybe there's only specific people that can review changes in",
    "start": "2425800",
    "end": "2431680"
  },
  {
    "text": "generic libraries and how do you handle builds and your code base size are you going to use mono",
    "start": "2431680",
    "end": "2438040"
  },
  {
    "text": "repositories or not how many of you are aware of what manure repositories are",
    "start": "2438040",
    "end": "2443079"
  },
  {
    "text": "okay most of you and how many of you are a fan of modern repositors a bit less so the deal of modern",
    "start": "2443079",
    "end": "2449260"
  },
  {
    "text": "repository is that boy you have long one large repository for a group of projects possibly all projects in your",
    "start": "2449260",
    "end": "2454660"
  },
  {
    "text": "organization the good thing is that it's easy to make changes across projects you want to refactor something you refactor it in",
    "start": "2454660",
    "end": "2461020"
  },
  {
    "text": "one code base one commit you're good to go the bad thing is that it's easy to make",
    "start": "2461020",
    "end": "2466540"
  },
  {
    "text": "dependencies between all those projects in there because they're in one repository and build times can increase if you have 100 or a thousand projects",
    "start": "2466540",
    "end": "2473260"
  },
  {
    "text": "in there so uh considerations you can have on your sharing code in your organization",
    "start": "2473260",
    "end": "2479500"
  },
  {
    "text": "is think about your Discovery process so what what code or libraries do exist in",
    "start": "2479500",
    "end": "2485980"
  },
  {
    "text": "your company and how can people find them do you have a documentation site or an I don't know an API Discovery site or",
    "start": "2485980",
    "end": "2491560"
  },
  {
    "text": "how does a new hire know which libraries or Services they can use or reuse",
    "start": "2491560",
    "end": "2497619"
  },
  {
    "text": "how are you going to distribute your generic stuff are you having a source dependency so a project depends on some",
    "start": "2497619",
    "end": "2505540"
  },
  {
    "text": "git repository that's generic or are you going to build a binary like a jar or a zip file or an npm dependency",
    "start": "2505540",
    "end": "2513460"
  },
  {
    "text": "if you import those General projects do you think about well-defined apis that",
    "start": "2513460",
    "end": "2519460"
  },
  {
    "text": "expose the things you need or is there chaos and everybody can add anything to apis within our projects",
    "start": "2519460",
    "end": "2525280"
  },
  {
    "text": "how you handle versioning of your generic stuff upgrades lifecycle management who maintains it so these are",
    "start": "2525280",
    "end": "2531820"
  },
  {
    "text": "all I think relevant questions to to figure out whenever you want to share libraries within a bigger organization",
    "start": "2531820",
    "end": "2538900"
  },
  {
    "text": "so a possible approach can be having kind of like an inner Source culture so having projects that you can see as open",
    "start": "2538900",
    "end": "2546220"
  },
  {
    "text": "source projects with maintainers assigned and teams who want to change stuff there can can basically do pull",
    "start": "2546220",
    "end": "2552040"
  },
  {
    "text": "requests to change things there that may work only around your mileage may vary is different for every",
    "start": "2552040",
    "end": "2558280"
  },
  {
    "text": "organization so to summarize",
    "start": "2558280",
    "end": "2565260"
  },
  {
    "start": "2561000",
    "end": "2657000"
  },
  {
    "text": "should you go to network or specific well you can consider you ain't gonna",
    "start": "2565300",
    "end": "2571000"
  },
  {
    "text": "need it you can consider the willow tree the five wise consider what's the cost of going",
    "start": "2571000",
    "end": "2577060"
  },
  {
    "text": "generic it may be a bit more work to do now it may also cost more time to understand to maintain",
    "start": "2577060",
    "end": "2583720"
  },
  {
    "text": "in the future think about scope and level go generic on the class level on a module level on",
    "start": "2583720",
    "end": "2589420"
  },
  {
    "text": "the service level on organization level think about come ice law if teams don't want to work together maybe don't first",
    "start": "2589420",
    "end": "2595480"
  },
  {
    "text": "to use generic libraries and I think also about sharing code on an organization level",
    "start": "2595480",
    "end": "2602578"
  },
  {
    "text": "so a simple question should you go generic or specific",
    "start": "2602859",
    "end": "2608079"
  },
  {
    "text": "also a simple answer it depends right so uh in the end it's it's not",
    "start": "2608079",
    "end": "2615460"
  },
  {
    "text": "necessarily about getting it right from the start a bit about getting it right in the end because",
    "start": "2615460",
    "end": "2621819"
  },
  {
    "text": "if I need to give you an example here is that I think this is",
    "start": "2621819",
    "end": "2626920"
  },
  {
    "text": "from a key in architecture probably a program that works perfectly",
    "start": "2626920",
    "end": "2633040"
  },
  {
    "text": "now but it's impossible to change will become useless because you cannot change it",
    "start": "2633040",
    "end": "2638680"
  },
  {
    "text": "whereas if you reverse this a problem that program does not work at all but it's easy to change this will become",
    "start": "2638680",
    "end": "2645280"
  },
  {
    "text": "and remain useful continuously so I think being adaptable is is the key",
    "start": "2645280",
    "end": "2650440"
  },
  {
    "text": "Point here so I need to give you one piece of advice that I hope will stick it's also",
    "start": "2650440",
    "end": "2656319"
  },
  {
    "text": "simple it's right simple code that's it please go kick some ass with",
    "start": "2656319",
    "end": "2662980"
  },
  {
    "start": "2657000",
    "end": "2679000"
  },
  {
    "text": "your new far knowledge",
    "start": "2662980",
    "end": "2665760"
  },
  {
    "text": "thank you",
    "start": "2674760",
    "end": "2677880"
  }
]