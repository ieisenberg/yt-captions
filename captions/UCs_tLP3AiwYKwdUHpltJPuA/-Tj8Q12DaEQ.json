[
  {
    "text": "[Music] hello everyone you may have heard it",
    "start": "6990",
    "end": "13540"
  },
  {
    "text": "during the last few days that Firefox got a new release out with this nice logo Firefox quantum and it's in large",
    "start": "13540",
    "end": "20119"
  },
  {
    "text": "boats powered by rust and I'd like to not speak about Firefox but more about rust so Who am I I'm Korean I'm working",
    "start": "20119",
    "end": "27260"
  },
  {
    "text": "for a small company called s Kara you can find me on twitter as iraq and you can basically just put that into your",
    "start": "27260",
    "end": "32870"
  },
  {
    "text": "bash profile source it and you'll be me for a day i'm arrests in elasticsearch",
    "start": "32870",
    "end": "38870"
  },
  {
    "text": "trainer and event organizer i've been a ruby program since 2003 and a rest program is since 2013 rule of some",
    "start": "38870",
    "end": "45680"
  },
  {
    "text": "languages was are you are good I'm the CEO of that company I am generally a",
    "start": "45680",
    "end": "52010"
  },
  {
    "text": "community person I do the balloon rust and search meetups and I organized the Euro camp and J rubyconf conferences",
    "start": "52010",
    "end": "59149"
  },
  {
    "text": "which are a bit special because the organizer of this very conference Diana used to be involved in these two before",
    "start": "59149",
    "end": "65149"
  },
  {
    "text": "and I was very happy working with her and very happy to finally speak at this one then I also organized the European",
    "start": "65149",
    "end": "72170"
  },
  {
    "text": "rust conference rust fest and a couple of other organizers are even here and I'm part of the global rust community",
    "start": "72170",
    "end": "78740"
  },
  {
    "text": "team so the rest project has a community team which I am part of as a hobby I",
    "start": "78740",
    "end": "84289"
  },
  {
    "text": "generally shoot arrows at stuff mine during the QA so the title of this talk",
    "start": "84289",
    "end": "90590"
  },
  {
    "text": "is why is rust successful I don't want to introduce like the language in full I would actually talk about what is the",
    "start": "90590",
    "end": "96920"
  },
  {
    "text": "context and why is it currently something that a lot of people talk about the problem here is there's almost",
    "start": "96920",
    "end": "103190"
  },
  {
    "text": "no comparable net metrics for programming languages around like even if we gather any kind of numbers about",
    "start": "103190",
    "end": "109250"
  },
  {
    "text": "the rest community we neither know if that's good or bad because almost no one",
    "start": "109250",
    "end": "115250"
  },
  {
    "text": "else does it there's no structured work on how programming languages communities even work take that like as a little",
    "start": "115250",
    "end": "121550"
  },
  {
    "text": "thing but that means I have to define what success is and for me it's these",
    "start": "121550",
    "end": "128209"
  },
  {
    "text": "five things at least I would say a programming language is successful at least for us that we move the state of",
    "start": "128209",
    "end": "136310"
  },
  {
    "text": "technology forward it is used in sizeable production environments",
    "start": "136310",
    "end": "141490"
  },
  {
    "text": "it attracts contribution if it's an open-source programming language it hides it has a sizable growth especially",
    "start": "141490",
    "end": "148030"
  },
  {
    "text": "for a beginning language that's an important metric and it attracts positive feedback because that's what",
    "start": "148030",
    "end": "154330"
  },
  {
    "text": "you want to have we won't make things better we don't want to force stuff on people well that means I have to explain",
    "start": "154330",
    "end": "161260"
  },
  {
    "text": "what rust is who here has never touched rust that's good I'm going to do a short",
    "start": "161260",
    "end": "169990"
  },
  {
    "text": "introduction that's why it's here so rust is a new systems programming",
    "start": "169990",
    "end": "175120"
  },
  {
    "text": "language it powers and was developed along with servo which is a new experimental browser engine by Mozilla",
    "start": "175120",
    "end": "182320"
  },
  {
    "text": "currently moving into Firefox it is developed by Mozilla and the community and the first stable release world may",
    "start": "182320",
    "end": "189100"
  },
  {
    "text": "15 2015 2 years old as a stable",
    "start": "189100",
    "end": "194290"
  },
  {
    "text": "programming language before that it was a research project it's providing an",
    "start": "194290",
    "end": "199450"
  },
  {
    "text": "alternative to C and C++ but also to other high level languages to higher-level languages and the three",
    "start": "199450",
    "end": "206200"
  },
  {
    "text": "things that focuses on is safe concurrent and fast and it's generally",
    "start": "206200",
    "end": "211660"
  },
  {
    "text": "perceived that safety especially any kind of memory safety will make sure",
    "start": "211660",
    "end": "216730"
  },
  {
    "text": "that your program doesn't SEC fold and all of these kind of things automatically comes at a runtime cost",
    "start": "216730",
    "end": "221950"
  },
  {
    "text": "usually through having a garbage collector or some kind of management system there the thing with rust is that",
    "start": "221950",
    "end": "228730"
  },
  {
    "text": "if we see safe concurrent fast we said let's pick three of them we can't step",
    "start": "228730",
    "end": "234910"
  },
  {
    "text": "off this the core features of the language are if you would like to just",
    "start": "234910",
    "end": "240730"
  },
  {
    "text": "have like small she'd they have a static site type system with local type",
    "start": "240730",
    "end": "246250"
  },
  {
    "text": "inference so you don't have to type all type all variables that compiler finds it out itself it has an explicit notion",
    "start": "246250",
    "end": "253210"
  },
  {
    "text": "of mutability so something is immutable or not and you have to define it it has something that we call zero cost",
    "start": "253210",
    "end": "258609"
  },
  {
    "text": "abstractions there's at all a small asterisk on it we abstract stuff so that",
    "start": "258609",
    "end": "265150"
  },
  {
    "text": "it we don't introduce any cost through the abstraction that's sometimes people",
    "start": "265150",
    "end": "270430"
  },
  {
    "text": "think like just because they're using the abstraction and suddenly doesn't cost anything to do it we just don't want the language to put",
    "start": "270430",
    "end": "277509"
  },
  {
    "text": "any additional cost on using an abstraction it has run time independent",
    "start": "277509",
    "end": "282520"
  },
  {
    "text": "concurrency safety I will come to that it treats errors as values there are no",
    "start": "282520",
    "end": "288220"
  },
  {
    "text": "exceptions we have no null we have something that we kind of move towards",
    "start": "288220",
    "end": "293530"
  },
  {
    "text": "calling it static automatic memory management you don't manually manage memory but it also happens at compile",
    "start": "293530",
    "end": "300250"
  },
  {
    "text": "time and you can control it if you want to and it has absolutely no garbage",
    "start": "300250",
    "end": "305259"
  },
  {
    "text": "collection built into the language it has no runtime system so what does it look like just a small snippet of rust",
    "start": "305259",
    "end": "311229"
  },
  {
    "text": "code it is a curly braces language like",
    "start": "311229",
    "end": "316360"
  },
  {
    "text": "C C++ Java you need to have a main function like C has and beyond that it",
    "start": "316360",
    "end": "326289"
  },
  {
    "text": "looks like a little bit of a mix between C and if you ever used ml ml it has an",
    "start": "326289",
    "end": "333699"
  },
  {
    "text": "ml inspired matter syntax it has bindings to variables introduced",
    "start": "333699",
    "end": "339130"
  },
  {
    "text": "by let and another thing that it does an",
    "start": "339130",
    "end": "345990"
  },
  {
    "text": "ampersand if you want to pass things by something that is similar to a reference",
    "start": "345990",
    "end": "351789"
  },
  {
    "text": "I come to that in a second so it's we are not inventing too much new syntax",
    "start": "351789",
    "end": "356860"
  },
  {
    "text": "here we're very much inspired on what's out there so a couple of base concepts",
    "start": "356860",
    "end": "363400"
  },
  {
    "text": "of the language the first basic concept that you need to understand is you talk about mutability all the time so rust is",
    "start": "363400",
    "end": "370840"
  },
  {
    "text": "a language about control so it doesn't say within rust everything's immutable or within rust",
    "start": "370840",
    "end": "376810"
  },
  {
    "text": "everything's mutable what you say is you have to define it so given this piece of",
    "start": "376810",
    "end": "383860"
  },
  {
    "text": "rust code I have two data structures one is in the other and one has a field that",
    "start": "383860",
    "end": "390039"
  },
  {
    "text": "has an integer inside see if the pointer works yeah so this is the inner one it",
    "start": "390039",
    "end": "395770"
  },
  {
    "text": "has an integer and this is just an outer one that has the inner one inside I constructed with some value and I try to",
    "start": "395770",
    "end": "402909"
  },
  {
    "text": "insert to assign this value to something else this will not compile because by",
    "start": "402909",
    "end": "408460"
  },
  {
    "text": "default everything is immutable it will actually tell me that cannot assign to an immutable field denoted Val because",
    "start": "408460",
    "end": "416349"
  },
  {
    "text": "DS is immutable everything that's inside is immutable I actually have to tell",
    "start": "416349",
    "end": "422740"
  },
  {
    "text": "rust this is moot this is mutable I can actually mutate it this is intended and this is you see",
    "start": "422740",
    "end": "431529"
  },
  {
    "text": "that in different kinds of combinations all the time this concept is everywhere it's simple at the beginning but it has",
    "start": "431529",
    "end": "438969"
  },
  {
    "text": "repercussions for others and the other base concept and this is something that",
    "start": "438969",
    "end": "444460"
  },
  {
    "text": "you will if you start learning language probably I have to get used to for one",
    "start": "444460",
    "end": "450250"
  },
  {
    "text": "or two weeks or something like this it has a basic concept of who owns data and",
    "start": "450250",
    "end": "456400"
  },
  {
    "text": "who just gets it lend out we call it we call that borrowing this is something",
    "start": "456400",
    "end": "461650"
  },
  {
    "text": "that is new usually you haven't programmed in environments that have this as an explicit notion data",
    "start": "461650",
    "end": "468820"
  },
  {
    "text": "ownership though is a thing that a lot of people actively talk about when they",
    "start": "468820",
    "end": "473889"
  },
  {
    "text": "think about systems especially in C like the one that owns data is has to",
    "start": "473889",
    "end": "479169"
  },
  {
    "text": "deallocate it the one who doesn't has to make sure that they don't delegate it rust has that as an explicit notion so",
    "start": "479169",
    "end": "487120"
  },
  {
    "text": "the rules around that are every piece of data is uniquely owned it's just one",
    "start": "487120",
    "end": "492580"
  },
  {
    "text": "owner this ownership can be passed on losing it in the process and when own",
    "start": "492580",
    "end": "498430"
  },
  {
    "text": "data reaches the end of the scope it's destructed simply speaking we have a",
    "start": "498430",
    "end": "503979"
  },
  {
    "text": "reference counter that it can only count to one and once the reference this drops",
    "start": "503979",
    "end": "510210"
  },
  {
    "text": "the data goes a it has to be de-allocated and this can be done statically so in an example I have a",
    "start": "510210",
    "end": "520089"
  },
  {
    "text": "file and I have a function that takes a file and writes to it and we actually",
    "start": "520089",
    "end": "526120"
  },
  {
    "text": "pass ownership every time you don't do anything special in rust you actually pass ownership we open that",
    "start": "526120",
    "end": "534180"
  },
  {
    "text": "and we pass it over one of the things that's critical here is I can never call",
    "start": "534180",
    "end": "539700"
  },
  {
    "text": "that function again who is that file because I passed on the ownership and",
    "start": "539700",
    "end": "544950"
  },
  {
    "text": "that has very useful semantics because anything that takes ownership could actually close the file which would make",
    "start": "544950",
    "end": "551460"
  },
  {
    "text": "any subsequent calls to writing to the file illegal which the language does",
    "start": "551460",
    "end": "557100"
  },
  {
    "text": "rust is very good at making illegal State unrepresentable I just can't write",
    "start": "557100",
    "end": "563790"
  },
  {
    "text": "that program in that way what I can do though is I can reach for the other base concept that I said um I can say I can",
    "start": "563790",
    "end": "571950"
  },
  {
    "text": "borrow access to it retaining ownership giving it to another piece of the system and taking it back and borrowing happens",
    "start": "571950",
    "end": "579330"
  },
  {
    "text": "again in a mutable and immutable fashion there's a very intuitive relationship",
    "start": "579330",
    "end": "584340"
  },
  {
    "text": "there anything that I borrow immutably I can power to it many people as or as",
    "start": "584340",
    "end": "590940"
  },
  {
    "text": "many parts as I want because that ensures that no other party in the in the project mutates it so it always",
    "start": "590940",
    "end": "599250"
  },
  {
    "text": "stays the same but you can only borrow it mutable once and it's exclusive so",
    "start": "599250",
    "end": "608640"
  },
  {
    "text": "you cannot have an immutable borrow at the same time as a mutable borrow you can have either or the other and",
    "start": "608640",
    "end": "614460"
  },
  {
    "text": "immutable borrows you can have as many as you want it is indeed so that shared",
    "start": "614460",
    "end": "619500"
  },
  {
    "text": "new mutable state and this would be a whole other talk is an issue even in",
    "start": "619500",
    "end": "625410"
  },
  {
    "text": "single threaded applications that we ensure that we don't have it this is",
    "start": "625410",
    "end": "632670"
  },
  {
    "text": "what the code looked like when I would actually borrow I said like this ampersand moot is an indicator for I borrow something mutable II and then I",
    "start": "632670",
    "end": "639150"
  },
  {
    "text": "can say I can write to that file to tie is because I only borrow out I get it back I've read again ownership stays in",
    "start": "639150",
    "end": "647670"
  },
  {
    "text": "main and drops at the end this whole thing is rather simple",
    "start": "647670",
    "end": "653430"
  },
  {
    "text": "um it takes some time getting used to on how to actually program in that environment where these notions are they",
    "start": "653430",
    "end": "660060"
  },
  {
    "text": "explicit it also gives a couple of other things this is a very minimal example",
    "start": "660060",
    "end": "665760"
  },
  {
    "text": "which is I have a collection of integers and I",
    "start": "665760",
    "end": "671300"
  },
  {
    "text": "borrow out one of the elements and the collection is mutable and while I still",
    "start": "671300",
    "end": "678560"
  },
  {
    "text": "have one of the elements of the collection I say I want to modify the collection by writing to it and this is",
    "start": "678560",
    "end": "687800"
  },
  {
    "text": "something that rust actually detects it will tell you by the way you've got an immutable borrower active you can't",
    "start": "687800",
    "end": "695300"
  },
  {
    "text": "currently modify the collection until that borrow becomes inactive and this is",
    "start": "695300",
    "end": "700970"
  },
  {
    "text": "a very common problem especially in C++ applications when you have pointers to",
    "start": "700970",
    "end": "706459"
  },
  {
    "text": "vectors that you later change in size and they get real I located and the point is to the original vector are not",
    "start": "706459",
    "end": "713870"
  },
  {
    "text": "valid anymore we actually can invalidate those rest checks validity of all",
    "start": "713870",
    "end": "721220"
  },
  {
    "text": "references at compile time even to the point where we have a notion of some",
    "start": "721220",
    "end": "728089"
  },
  {
    "text": "piece of data holds an internal reference the binding between those is",
    "start": "728089",
    "end": "733279"
  },
  {
    "text": "this a syntax it's called a lifetime it says data can only live as long as the",
    "start": "733279",
    "end": "740480"
  },
  {
    "text": "inner data is still active and if I do something like this and I say I have a",
    "start": "740480",
    "end": "746060"
  },
  {
    "text": "function that returns data which holds a reference to a local variable once I",
    "start": "746060",
    "end": "752330"
  },
  {
    "text": "return from that function the stack frame will go this number slot will go",
    "start": "752330",
    "end": "759380"
  },
  {
    "text": "and the pointer would actually be invalid and the compiler will tell me",
    "start": "759380",
    "end": "764630"
  },
  {
    "text": "that it tells me number doesn't live long enough it only lives until the end",
    "start": "764630",
    "end": "769670"
  },
  {
    "text": "this is line number nine if I would use an actual editor I could just go to line number nine which is this one",
    "start": "769670",
    "end": "778150"
  },
  {
    "text": "so all rust function signatures do not only signal data type but also mutability ownership and",
    "start": "779140",
    "end": "785630"
  },
  {
    "text": "interconnections between input and output types that's quite a lot you can read an awesome lot from a rust function",
    "start": "785630",
    "end": "791810"
  },
  {
    "text": "signature and the cool thing is this looks rather simple in small programs",
    "start": "791810",
    "end": "798230"
  },
  {
    "text": "and doesn't really like communicate its usefulness the problem is that I can't put Firefox",
    "start": "798230",
    "end": "803889"
  },
  {
    "text": "on the slide I'm very sorry about that just remember that these properties hold",
    "start": "803889",
    "end": "810220"
  },
  {
    "text": "even in very large programs you pass something into a library that is 100 thousand line lines big and you do it",
    "start": "810220",
    "end": "815949"
  },
  {
    "text": "immutably you can be sure that no one ever touches it rust has abstractions on",
    "start": "815949",
    "end": "822939"
  },
  {
    "text": "top of that that I feel a rather standard they basically like Java generics or C++ templates wherever you",
    "start": "822939",
    "end": "829749"
  },
  {
    "text": "come from they're somewhere in the middle I won't introduce them in detail because that's basically my mechanical",
    "start": "829749",
    "end": "835629"
  },
  {
    "text": "drawing suits Index but it has on top of",
    "start": "835629",
    "end": "841179"
  },
  {
    "text": "that a hidden feature that a lot of people tend to ignore at first and we",
    "start": "841179",
    "end": "846189"
  },
  {
    "text": "call it concurrency without fear we actually type check concurrent",
    "start": "846189",
    "end": "853299"
  },
  {
    "text": "patterns let's have a look at this we have a counter the counter has an inner",
    "start": "853299",
    "end": "860619"
  },
  {
    "text": "integer we spawn three threats and pass",
    "start": "860619",
    "end": "865629"
  },
  {
    "text": "in the counter using a mutable borrow what will happen here is that we",
    "start": "865629",
    "end": "874299"
  },
  {
    "text": "actually detect that we can only take this counter and put it on one of these threads once we would send it over we",
    "start": "874299",
    "end": "881769"
  },
  {
    "text": "actually have this notion of passing ownership to a thread but because we are starting multiple threads the compiler",
    "start": "881769",
    "end": "888819"
  },
  {
    "text": "will complain and tell me you're not allowed to do this you're not allowed to just simply move the value into one",
    "start": "888819",
    "end": "895269"
  },
  {
    "text": "threat because I wouldn't know what I do on the next iteration so what do we do",
    "start": "895269",
    "end": "900639"
  },
  {
    "text": "when we need to share something between multiple threads usually we reach for a reference counter which gives us some",
    "start": "900639",
    "end": "909279"
  },
  {
    "text": "notion of multiple handling this counter so let's reach for the RC the RC in rust",
    "start": "909279",
    "end": "917799"
  },
  {
    "text": "is a reference counter that is only meant for single threads but I could just use it and see if it works the",
    "start": "917799",
    "end": "924579"
  },
  {
    "text": "interesting thing is that rust has a notion of things being allowed to be sent between threads or not and the",
    "start": "924579",
    "end": "930129"
  },
  {
    "text": "reference counter is not for the reason that it doesn't secure its counter using atomic relations that's cheaper but it's not so",
    "start": "930129",
    "end": "937230"
  },
  {
    "text": "that safe you might have missed counts on the reference counter plus will",
    "start": "937230",
    "end": "943350"
  },
  {
    "text": "detect that what it wants to me in the",
    "start": "943350",
    "end": "948480"
  },
  {
    "text": "end is oh there's an error there I must actually wrap that in mutex there",
    "start": "948480",
    "end": "954900"
  },
  {
    "text": "should be a mutex on top and an AR see an atomic reference counter I built a",
    "start": "954900",
    "end": "960630"
  },
  {
    "text": "bug into my slides so rust will tell me that I need to make sure that I",
    "start": "960630",
    "end": "967200"
  },
  {
    "text": "synchronize on the counter and that I soon pronounce even on the reference counter that I use for that counter M at",
    "start": "967200",
    "end": "974600"
  },
  {
    "text": "compile time this example could be a",
    "start": "974600",
    "end": "980660"
  },
  {
    "text": "concurrency bug in a garbage collected language a sec fault if you're in C and C++ because you miss cat M this analysis",
    "start": "980660",
    "end": "991110"
  },
  {
    "text": "and this nice thing is purely static and it's independent of the concurrency primitives that you use what we talked",
    "start": "991110",
    "end": "996270"
  },
  {
    "text": "about is we're talking about sending data between threads and syncing data between threads for between concurrency",
    "start": "996270",
    "end": "1001310"
  },
  {
    "text": "primitives it's descending and the syncing part that rust knows about if you're working on an event reactor you can use exactly",
    "start": "1001310",
    "end": "1007100"
  },
  {
    "text": "the same semantics and and it will save you from that rust type system allows no",
    "start": "1007100",
    "end": "1014000"
  },
  {
    "text": "data races at all and that's a very teasing thing and that's one thing that",
    "start": "1014000",
    "end": "1019339"
  },
  {
    "text": "is heavily used in production thanks but still we assistance programming",
    "start": "1019339",
    "end": "1024709"
  },
  {
    "text": "language so we give low level control and safety at the same time the thing is",
    "start": "1024709",
    "end": "1030438"
  },
  {
    "text": "burrows boiled down to pointers at runtime they are a purely compile level",
    "start": "1030439",
    "end": "1036500"
  },
  {
    "text": "semantics that ensure that all point is a valid they don't happen at all during",
    "start": "1036500",
    "end": "1042829"
  },
  {
    "text": "runtime values you've seen me use the struct syntax are basically struct",
    "start": "1042829",
    "end": "1048339"
  },
  {
    "text": "struct like in C we use our own struct layout we can also ask the compiler to",
    "start": "1048340",
    "end": "1054770"
  },
  {
    "text": "lay it out like C on the target platform wall and we have an optional unsafe sub",
    "start": "1054770",
    "end": "1060350"
  },
  {
    "text": "language for cases where we cannot guarantee that safety these cases could be for example interacting with hardware",
    "start": "1060350",
    "end": "1067820"
  },
  {
    "text": "devices all these kind of things what we just can't establish these rules automatically so our ops engineer has",
    "start": "1067820",
    "end": "1078200"
  },
  {
    "text": "coined this nice phrase safe code means you can take better risks so basically you've write most of your program in",
    "start": "1078200",
    "end": "1083690"
  },
  {
    "text": "safe rust but at points where you need like the full detail control you can do",
    "start": "1083690",
    "end": "1089090"
  },
  {
    "text": "that but you opt into the unsafe part of the language instead of saying I'm",
    "start": "1089090",
    "end": "1094609"
  },
  {
    "text": "taking an unsafe language and I'm trying to make it safe and make sure that people use it at most places so let's",
    "start": "1094609",
    "end": "1102799"
  },
  {
    "text": "come back to the initial question is rust successful so does it move the",
    "start": "1102799",
    "end": "1114049"
  },
  {
    "text": "state of technology forward it does it wraps safety techniques previously only",
    "start": "1114049",
    "end": "1119570"
  },
  {
    "text": "used in research settings in production ready in a production ready package all these ideas are new they're basically",
    "start": "1119570",
    "end": "1127190"
  },
  {
    "text": "from the end of the 90s we just took a lot of them put them together mix it for",
    "start": "1127190",
    "end": "1133309"
  },
  {
    "text": "eight years rust was in production for almost eight years before the one zero a lot of concepts went in went out we had",
    "start": "1133309",
    "end": "1140330"
  },
  {
    "text": "a carpet collector at some point we don't have one anymore all of these kind of things it went to extreme changes at some point but this",
    "start": "1140330",
    "end": "1148100"
  },
  {
    "text": "is basically research Theory applied in a package that we actually would like to use in production it brings memory",
    "start": "1148100",
    "end": "1155149"
  },
  {
    "text": "safety to environments where it was previously just not possible because it the only language is supporting it",
    "start": "1155149",
    "end": "1160399"
  },
  {
    "text": "where unsafe languages or the runtime needed for it was just far too vast the",
    "start": "1160399",
    "end": "1168679"
  },
  {
    "text": "other thing that I said is it's used in sizable production environments obviously Firefox is a sizable",
    "start": "1168679",
    "end": "1175820"
  },
  {
    "text": "production environment but this is Mozilla's house language so obviously",
    "start": "1175820",
    "end": "1181820"
  },
  {
    "text": "they're using it in Firefox there's also many other users of it and this is something that we enjoy a lot Dropbox",
    "start": "1181820",
    "end": "1189499"
  },
  {
    "text": "has built sizeable back-end systems in it so basically Dropbox is now powered by rust both on the client and the server",
    "start": "1189499",
    "end": "1195830"
  },
  {
    "text": "side and a lot of places and especially in the places where any control",
    "start": "1195830",
    "end": "1200840"
  },
  {
    "text": "the new chef deployment product chef habitat is completely written in rust and a sizable project as well canonical",
    "start": "1200840",
    "end": "1208639"
  },
  {
    "text": "is using it all through the infrastructure but mostly internally it is used in several games not to play but",
    "start": "1208639",
    "end": "1216889"
  },
  {
    "text": "like smaller groups so for example the developer of start you Valley is",
    "start": "1216889",
    "end": "1223279"
  },
  {
    "text": "currently using it so it's not just its indie games but not like small indie games professional indie games there's a",
    "start": "1223279",
    "end": "1230570"
  },
  {
    "text": "theater actually using it in Germany for opera productions generic wrote the code",
    "start": "1230570",
    "end": "1236960"
  },
  {
    "text": "but that's my most that's my favorite it but we're used in opera productions we",
    "start": "1236960",
    "end": "1244100"
  },
  {
    "text": "actually used by more than a hundred companies and we list them all if there's someone in the room who's not on",
    "start": "1244100",
    "end": "1249230"
  },
  {
    "text": "that list but is using rust in production please let us know because we totally like especially like to know you wouldn't and would like to know what",
    "start": "1249230",
    "end": "1255889"
  },
  {
    "text": "you're using it for there's a couple of very interesting and especially big names on it then does it attract",
    "start": "1255889",
    "end": "1263769"
  },
  {
    "text": "contribution and that's I think a very interesting thing because the Mozilla",
    "start": "1263769",
    "end": "1269090"
  },
  {
    "text": "house language I think wouldn't be a very teasing prospect because that would mean we're completely reliant on Mozilla",
    "start": "1269090",
    "end": "1276009"
  },
  {
    "text": "continuing that or not the nice thing is more than four fifths of all contributions to the rust language the",
    "start": "1276009",
    "end": "1283429"
  },
  {
    "text": "compiler and the base libraries come from outside of Missoula we have more than 2000 contributors over the lifetime",
    "start": "1283429",
    "end": "1289279"
  },
  {
    "text": "of the project and a lot of the evolution of the language is actually not driven by Mozilla people is also on",
    "start": "1289279",
    "end": "1296480"
  },
  {
    "text": "in spaces where for example we working on features that are not used for Firefox it's mostly community driven but",
    "start": "1296480",
    "end": "1303769"
  },
  {
    "text": "we were good at actually taking that in and evolving the language also for other people so this is the contributors list",
    "start": "1303769",
    "end": "1311360"
  },
  {
    "text": "you can have we we have this thanks but Ross landlord org domain where you can",
    "start": "1311360",
    "end": "1316879"
  },
  {
    "text": "see who contributed to what we are this is the summary of the year from github",
    "start": "1316879",
    "end": "1325029"
  },
  {
    "text": "we are the eighth most reviewing project",
    "start": "1325029",
    "end": "1330289"
  },
  {
    "text": "like we do but the most code review on github incomplete",
    "start": "1330289",
    "end": "1335360"
  },
  {
    "text": "we are one of the most discussing repositories even more than OGS and",
    "start": "1335360",
    "end": "1340820"
  },
  {
    "text": "right after that there's the browser that we built in rust so we have two of the ten and if you sum it up we actually",
    "start": "1340820",
    "end": "1348470"
  },
  {
    "text": "like bigger than OpenShift I'm I'm quite",
    "start": "1348470",
    "end": "1353990"
  },
  {
    "text": "amazed by those numbers because I wouldn't have expected I expected them to be so good",
    "start": "1353990",
    "end": "1359060"
  },
  {
    "text": "yeah and do we have sizable growth yes we doubled in T open Redmont",
    "start": "1359060",
    "end": "1365930"
  },
  {
    "text": "indices since the last year yeoman read monk are basically how many people are",
    "start": "1365930",
    "end": "1371240"
  },
  {
    "text": "searching for us on Google that's an interesting number it's highly inaccurate about actually judging how",
    "start": "1371240",
    "end": "1376730"
  },
  {
    "text": "big the commits the community is but it also maps to we have double the number",
    "start": "1376730",
    "end": "1382430"
  },
  {
    "text": "of people actually replying to our survey that we put out every year and",
    "start": "1382430",
    "end": "1388330"
  },
  {
    "text": "yeah we currently have five conferences per year next year it's going to be more",
    "start": "1388330",
    "end": "1395350"
  },
  {
    "text": "and we have over 100 meetups around the world that's a sizable number for a community let's run two years old and we",
    "start": "1395350",
    "end": "1401990"
  },
  {
    "text": "have newcomers from all directions and that's the most interesting part of that we have not only systems programmers going to rust we also have Ruby and",
    "start": "1401990",
    "end": "1408920"
  },
  {
    "text": "Python programmers going to rust we have functional language program is coming to rust all with very different views on",
    "start": "1408920",
    "end": "1414590"
  },
  {
    "text": "how the language they would like the language to be and that's a good thing you can moderate that another",
    "start": "1414590",
    "end": "1422030"
  },
  {
    "text": "interesting metric is how many libraries are published we obviously a new language we had zero like libraries",
    "start": "1422030",
    "end": "1428660"
  },
  {
    "text": "published on our index in 2014 when we opened it we have just last month passed",
    "start": "1428660",
    "end": "1435380"
  },
  {
    "text": "the Haskell package index so we are now have more libraries than Haskell and it",
    "start": "1435380",
    "end": "1440960"
  },
  {
    "text": "took us two years instead of 10 I totally love Haskell it's just like they're in the same range as we are so",
    "start": "1440960",
    "end": "1447860"
  },
  {
    "text": "this is kind of something we need to compare to if I would add NPM basically all these three lines would be flat",
    "start": "1447860",
    "end": "1455380"
  },
  {
    "text": "the other one here is Alex here which I find a very interesting thing because they have this noticeable point where",
    "start": "1455490",
    "end": "1461970"
  },
  {
    "text": "they increase dramatically in their growth usually these lines are flat I don't know why package manager numbers",
    "start": "1461970",
    "end": "1469230"
  },
  {
    "text": "are very flat I would really like to know why and we attract positive",
    "start": "1469230",
    "end": "1474750"
  },
  {
    "text": "feedback we are the most loved language on Stack Overflow in 2017 2016 and only",
    "start": "1474750",
    "end": "1480090"
  },
  {
    "text": "around 1% of the survey respondents said they have issues getting in touch with",
    "start": "1480090",
    "end": "1485490"
  },
  {
    "text": "the rest community or or communicating with us which I see if we can reduce",
    "start": "1485490",
    "end": "1491669"
  },
  {
    "text": "that but and we get like this came on our subreddit yesterday when I was",
    "start": "1491669",
    "end": "1497940"
  },
  {
    "text": "preparing this talk I just said to like someone disperses a present bless us stations ok I think it's a bit much but",
    "start": "1497940",
    "end": "1504929"
  },
  {
    "text": "thanks but why is that it's not like we",
    "start": "1504929",
    "end": "1510450"
  },
  {
    "text": "randomly just got successful in my opinion because there's a lot of things behind that first of all when I",
    "start": "1510450",
    "end": "1517169"
  },
  {
    "text": "joined the rest community four years ago one of the heirs we had one of the air behind this whole thing is we want this",
    "start": "1517169",
    "end": "1522870"
  },
  {
    "text": "to be used like we're working on a language that we want to be used this is not a research language there's awesome",
    "start": "1522870",
    "end": "1528120"
  },
  {
    "text": "research languages for example idris owns being a research language it's awesome for that we are a language that",
    "start": "1528120",
    "end": "1534960"
  },
  {
    "text": "we want to see used in production software for that reason it was also",
    "start": "1534960",
    "end": "1541169"
  },
  {
    "text": "always developed in lockstep with a huge application there was always several",
    "start": "1541169",
    "end": "1546179"
  },
  {
    "text": "next to it a sizable well multiple hundred thousand lines code base of",
    "start": "1546179",
    "end": "1554130"
  },
  {
    "text": "building a new browser engine which helps a lot when you develop a language",
    "start": "1554130",
    "end": "1559200"
  },
  {
    "text": "because you can actually figure out if we change this what impact does it have on a real large code base and not on a",
    "start": "1559200",
    "end": "1566730"
  },
  {
    "text": "ten lines slide snippet we make sure",
    "start": "1566730",
    "end": "1572010"
  },
  {
    "text": "that the language is approachable it is easy to get an environment setup we have",
    "start": "1572010",
    "end": "1578399"
  },
  {
    "text": "tooling that just gives you a compiler of different fashions it gives you if",
    "start": "1578399",
    "end": "1584070"
  },
  {
    "text": "you want to cross compiling tooling and all of these kind of things we build in built and dependency",
    "start": "1584070",
    "end": "1592279"
  },
  {
    "text": "management as part of the tool chain that we ship so you have something like bundler but for for rust it has",
    "start": "1592279",
    "end": "1601899"
  },
  {
    "text": "development tooling on top of that we have a language server that implements the language server protocol where you",
    "start": "1601899",
    "end": "1607399"
  },
  {
    "text": "can get errors over a network socket to show them in your editor and all of these kind of things it does all the",
    "start": "1607399",
    "end": "1613639"
  },
  {
    "text": "analysis for you and you don't need to parse it as well as additional Inter's",
    "start": "1613639",
    "end": "1619220"
  },
  {
    "text": "for coding patterns and all these kind of things we take a lot of pride in our of error messages the next talk is gonna",
    "start": "1619220",
    "end": "1625490"
  },
  {
    "text": "be an elm which says we a little worse than elm and this really like the king of that but it's not unusual that like",
    "start": "1625490",
    "end": "1634519"
  },
  {
    "text": "new rust releases will have more and better error messages and there's a couple of people that take real pride in",
    "start": "1634519",
    "end": "1640820"
  },
  {
    "text": "that we have great blocks to the book and an almost fully documented standard",
    "start": "1640820",
    "end": "1646340"
  },
  {
    "text": "API the thing with great Doc's is they're much better than what's mostly out there for a lot of new programming languages",
    "start": "1646340",
    "end": "1652909"
  },
  {
    "text": "we have actually someone employed the writes on it obviously there's always like the one gap or the other if you",
    "start": "1652909",
    "end": "1659750"
  },
  {
    "text": "want if you if you notice one while you're reading it let us know we actually have a youtube channel that",
    "start": "1659750",
    "end": "1665630"
  },
  {
    "text": "collects all talks and lectures so once this one is on YouTube it will also be there it has some lecturers also in",
    "start": "1665630",
    "end": "1671960"
  },
  {
    "text": "German on a German university and collects all thoughts on all conferences on all subjects for you to be easily",
    "start": "1671960",
    "end": "1679070"
  },
  {
    "text": "searchable and we have maintained forums and RAC and other chat platforms to get",
    "start": "1679070",
    "end": "1685519"
  },
  {
    "text": "in touch which I used heavily Russ is a very pragmatic language and I think that",
    "start": "1685519",
    "end": "1691370"
  },
  {
    "text": "helps in adoption all features are driven by the needs of real software so we make sure that every release actually",
    "start": "1691370",
    "end": "1697580"
  },
  {
    "text": "unlocks something useful for some of our users this might not be for you but it might be for others and people see where",
    "start": "1697580",
    "end": "1705049"
  },
  {
    "text": "it's useful the language is mostly evolved with user feedback so it's not like some people in Mozilla just get",
    "start": "1705049",
    "end": "1711230"
  },
  {
    "text": "into a room and come up with a with a change and we consciously choose familiar constructs them in the case",
    "start": "1711230",
    "end": "1718789"
  },
  {
    "text": "that there are some available so the thing like borrowers are kind of related to",
    "start": "1718789",
    "end": "1723950"
  },
  {
    "text": "references so we use an M percent for that so the people that are used to references actually can just piggyback",
    "start": "1723950",
    "end": "1730970"
  },
  {
    "text": "on the syntax and we pick good ideas from others like our error messages are definitely elements by it so we look",
    "start": "1730970",
    "end": "1739159"
  },
  {
    "text": "around for other languages to see what they do see how they build the infrastructure the language plays well",
    "start": "1739159",
    "end": "1746450"
  },
  {
    "text": "with others but and that helps in adoption we can compile code to just",
    "start": "1746450",
    "end": "1755419"
  },
  {
    "text": "normal object files or just normal static or dynamic libraries which you",
    "start": "1755419",
    "end": "1760730"
  },
  {
    "text": "can write a header file for and then just use it in C code or the other way around or you can use the csfi of your favorite language you don't need to",
    "start": "1760730",
    "end": "1767269"
  },
  {
    "text": "write rust tooling on top of that you can it makes it things a little better but if you use to the CF fi of your",
    "start": "1767269",
    "end": "1773629"
  },
  {
    "text": "language you can also like immediately use Russell libraries they're binding generators available for C and C++ that",
    "start": "1773629",
    "end": "1780289"
  },
  {
    "text": "are really good because they're heavily used in Firefox and said though they just need them and there's high level",
    "start": "1780289",
    "end": "1786440"
  },
  {
    "text": "bindings for some other languages Ruby JavaScript Python you know it's a great",
    "start": "1786440",
    "end": "1794090"
  },
  {
    "text": "partner for those languages because the nice thing is usually when dropping down to see from pison or something you give",
    "start": "1794090",
    "end": "1800600"
  },
  {
    "text": "up memory safety when you drop down to rust you don't give up memory safety which means you don't SEC fault your Django application as simple as that and",
    "start": "1800600",
    "end": "1809389"
  },
  {
    "text": "it doesn't want to be the primary language at all cost we're very used to all of our users using it somewhere in",
    "start": "1809389",
    "end": "1815240"
  },
  {
    "text": "the infrastructure there's almost no people around that I know that are purely rust programmers most of the time",
    "start": "1815240",
    "end": "1821389"
  },
  {
    "text": "they're like 50% less programmers and we are totally built for gradual adoption that has helped us a lot",
    "start": "1821389",
    "end": "1828878"
  },
  {
    "text": "just as a project to have a look at stylo is the thing that powers Firefox",
    "start": "1829179",
    "end": "1836480"
  },
  {
    "text": "quantum like the speed increases behind Firefox quantum for external marketing",
    "start": "1836480",
    "end": "1842059"
  },
  {
    "text": "purposes you also sometimes read as quantum CSS the library is still called stylo it is taken from the server",
    "start": "1842059",
    "end": "1849259"
  },
  {
    "text": "project hold it over to Firefox and then it's all the styling but the style",
    "start": "1849259",
    "end": "1855529"
  },
  {
    "text": "engine does it applies styles that you have in it it",
    "start": "1855529",
    "end": "1861050"
  },
  {
    "text": "passes a CSS file and then applies the styles that I found to a Dom tree the",
    "start": "1861050",
    "end": "1866810"
  },
  {
    "text": "interesting thing about this is no browser currently does that in parallel although it's theoretically known that",
    "start": "1866810",
    "end": "1874160"
  },
  {
    "text": "this is a highly parallelizable task Mozilla tried that two times and failed",
    "start": "1874160",
    "end": "1879620"
  },
  {
    "text": "and actually succeeded with this and one of the things is they ran into a lot of",
    "start": "1879620",
    "end": "1886430"
  },
  {
    "text": "multi-threading bugs that would have needed building a lot of machinery on top of this basically the whole thing",
    "start": "1886430",
    "end": "1893930"
  },
  {
    "text": "the whole magic be here behind stylo is the concurrency tracking that res provides to make sure that you don't run",
    "start": "1893930",
    "end": "1900020"
  },
  {
    "text": "into accidental data races and that allowed doing this whole rewrite in about a year and then at the end the",
    "start": "1900020",
    "end": "1907940"
  },
  {
    "text": "ability to just use C FFI or like directly access memory structures as a",
    "start": "1907940",
    "end": "1913790"
  },
  {
    "text": "base concept of the language rust has a memory model similar to C allowed for",
    "start": "1913790",
    "end": "1920030"
  },
  {
    "text": "visit very easy integration also because rust has no runtime so that you would not have to think about how to integrate",
    "start": "1920030",
    "end": "1926570"
  },
  {
    "text": "the rest runtime into Firefox or something like this then there's a",
    "start": "1926570",
    "end": "1934310"
  },
  {
    "text": "couple of reasons beyond plain code we have a strict commitment to stability rust is released every six weeks like",
    "start": "1934310",
    "end": "1941720"
  },
  {
    "text": "Firefox one of the reasons behind that is we want changes to be small so",
    "start": "1941720",
    "end": "1946840"
  },
  {
    "text": "usually we don't have breaking changes but sometimes we need to fix like side some as holes in the type system they're",
    "start": "1946840",
    "end": "1953210"
  },
  {
    "text": "rare but it happens and then we want to make sure that people don't have to move the world just to move to the next",
    "start": "1953210",
    "end": "1958250"
  },
  {
    "text": "version it also means that you should usually like read up on the changes in round half an hour or something like",
    "start": "1958250",
    "end": "1964340"
  },
  {
    "text": "that and be it's be easier to follow rust is backwards compatible with huge machinery",
    "start": "1964340",
    "end": "1971240"
  },
  {
    "text": "to ensure that we literally download all public rust code and build it when we",
    "start": "1971240",
    "end": "1976790"
  },
  {
    "text": "try to find out if we will build a conscience backwards camila debug we're currently at version 121 next one is",
    "start": "1976790",
    "end": "1984500"
  },
  {
    "text": "coming in around five weeks also we allow no use of any kind of unstable",
    "start": "1984500",
    "end": "1990190"
  },
  {
    "text": "in development features on our stable compiler so if you have a thrust stable compiler everything like every interface",
    "start": "1990190",
    "end": "1995950"
  },
  {
    "text": "it exposes is stable everything else is only available in",
    "start": "1995950",
    "end": "2001200"
  },
  {
    "text": "nightly builds so that you do know that you're actually using unstable stuff and we don't want to release anything that's",
    "start": "2001200",
    "end": "2008580"
  },
  {
    "text": "not ready for wide use on our stable channel if it's unstable it's stable you",
    "start": "2008580",
    "end": "2014370"
  },
  {
    "text": "can use it it's fully supported we piggyback on a couple of things to",
    "start": "2014370",
    "end": "2020490"
  },
  {
    "text": "provide maturity we our cogeneration is provided to LLVM so we piggyback on the",
    "start": "2020490",
    "end": "2026790"
  },
  {
    "text": "maturity of LLVM and all the on all the targets it supports we have no runtime so we have no runtime bugs there was a",
    "start": "2026790",
    "end": "2034950"
  },
  {
    "text": "time when Russ still had a runtime and that was really awful and and we have a",
    "start": "2034950",
    "end": "2042900"
  },
  {
    "text": "very conservative approach to adopt things into a standard library so we're not like a batteries included language",
    "start": "2042900",
    "end": "2049500"
  },
  {
    "text": "we have batteries easily downloadable language it is a cross compiler Russ C",
    "start": "2049500",
    "end": "2056100"
  },
  {
    "text": "is by default a cross compiler and the whole tool train is aware of that this almost no setup press compilation",
    "start": "2056100",
    "end": "2061850"
  },
  {
    "text": "the only thing that you need is the indifference to go for example you need",
    "start": "2061850",
    "end": "2066860"
  },
  {
    "text": "the target the Lipsy and all of these things for the target and we support",
    "start": "2066860",
    "end": "2075030"
  },
  {
    "text": "embedded and IOT use cases we even have a whole cortex a whole operating system",
    "start": "2075030",
    "end": "2081750"
  },
  {
    "text": "written for cortex-m IOT devices written in rust it's called suck us and yes we do wasn't",
    "start": "2081750",
    "end": "2088790"
  },
  {
    "text": "so for those that had seen the talk before we also have a whole governance structure built and that helps us a lot",
    "start": "2088790",
    "end": "2095690"
  },
  {
    "text": "for example all changes go through an open RFC process so if even if someone",
    "start": "2095690",
    "end": "2101040"
  },
  {
    "text": "at Mozilla wants to change something language they write a large document and people can then comment on it usually",
    "start": "2101040",
    "end": "2107100"
  },
  {
    "text": "that works quite well and discussions are small but it can also happen that a feature is controversal we for example had a reform feature that",
    "start": "2107100",
    "end": "2114000"
  },
  {
    "text": "was shot down three times over this year and is much better for it now I have to say but this is a part of the process",
    "start": "2114000",
    "end": "2121410"
  },
  {
    "text": "and the thing is Mozilla is about the only company that I know that has a great experience with open discussion and",
    "start": "2121410",
    "end": "2126900"
  },
  {
    "text": "processes that shows that doesn't mean like everywhere at Missoula that works like perfectly but at least Missoula has",
    "start": "2126900",
    "end": "2133920"
  },
  {
    "text": "the concept of having open collaboration on a project they produce we track a lot",
    "start": "2133920",
    "end": "2140490"
  },
  {
    "text": "of things for example the medium time to merge a pull request for a change to any",
    "start": "2140490",
    "end": "2146040"
  },
  {
    "text": "kind of our things is six days which means if you have like a correction to the to the documentation it's probably",
    "start": "2146040",
    "end": "2154110"
  },
  {
    "text": "merged when the maintainer wakes up if it's a larger thing it can totally be that it takes like 30 30 to 40 days but",
    "start": "2154110",
    "end": "2161190"
  },
  {
    "text": "we don't let you hang around for a year or something either we will deny it then",
    "start": "2161190",
    "end": "2166350"
  },
  {
    "text": "or say we have to postpone it or we we",
    "start": "2166350",
    "end": "2172170"
  },
  {
    "text": "actually move move forward to make sure that it's merged we also support commercial users so we do regular",
    "start": "2172170",
    "end": "2179160"
  },
  {
    "text": "interviews with production users to hear about their issues that's usually not in the open because they usually don't want",
    "start": "2179160",
    "end": "2184770"
  },
  {
    "text": "to talk about that in your that's fine you can always contact us with like production problems because we'd like to",
    "start": "2184770",
    "end": "2190920"
  },
  {
    "text": "know because that's very hard to get this information most of the time we have consulting developing and training",
    "start": "2190920",
    "end": "2197070"
  },
  {
    "text": "available through a US company and mine the more coming up it slowly comes up",
    "start": "2197070",
    "end": "2204560"
  },
  {
    "text": "Russ training is actually a sizable business that both of these companies currently have and here's another hack",
    "start": "2204560",
    "end": "2212220"
  },
  {
    "text": "um if you run a larger open source project I don't know why a lot of people don't do this we put everywhere that if",
    "start": "2212220",
    "end": "2219960"
  },
  {
    "text": "you have any questions about the project you can ask the community team we just forward you to the right person and once",
    "start": "2219960",
    "end": "2226980"
  },
  {
    "text": "you do that for like two or three years people who will actually use this there's so many people that get in touch",
    "start": "2226980",
    "end": "2232620"
  },
  {
    "text": "with us who that email address that we currently have to see that we can follow up on all these emails but there's so",
    "start": "2232620",
    "end": "2237840"
  },
  {
    "text": "much information in this and especially there's so many people that are like I'm completely lost I don't know how to like",
    "start": "2237840",
    "end": "2244950"
  },
  {
    "text": "approach this problem and probably someone who's in the community longer just knows and this is like a three minute task for me what could be a three",
    "start": "2244950",
    "end": "2251730"
  },
  {
    "text": "hour task for community members and I would totally love that they spent their time otherwise",
    "start": "2251730",
    "end": "2257730"
  },
  {
    "text": "so to close up rust bring safe",
    "start": "2257730",
    "end": "2262750"
  },
  {
    "text": "programming to targets where it was unfeasible before while also bringing",
    "start": "2262750",
    "end": "2268120"
  },
  {
    "text": "new things to the table to compete with other safe languages like the whole concurrency tracking and basically the",
    "start": "2268120",
    "end": "2275650"
  },
  {
    "text": "whole thing too difficult way to sum it up is you can't spell trust with the rest yeah thank you I was just looking",
    "start": "2275650",
    "end": "2299800"
  },
  {
    "text": "for my mic we've got a lot of questions that I will go through first of all is",
    "start": "2299800",
    "end": "2308260"
  },
  {
    "text": "there so good or what's the best IDE to use for rust so people want to get",
    "start": "2308260",
    "end": "2313870"
  },
  {
    "text": "practical yeah I can oh by the way if anyone's leaving take one of these postcards it has like the most important",
    "start": "2313870",
    "end": "2319720"
  },
  {
    "text": "links that you need to get started with rust and you can touch into the community I des so we're producing the",
    "start": "2319720",
    "end": "2326530"
  },
  {
    "text": "rust language server and we're also producing the integration into a Visual Studio code which is an editor not quite",
    "start": "2326530",
    "end": "2332170"
  },
  {
    "text": "an ID and jetbrains actually ships rust IDE which is their their production it's",
    "start": "2332170",
    "end": "2340420"
  },
  {
    "text": "really really good so if you want to have if you want to have like a proper IDE that would be the one that I would",
    "start": "2340420",
    "end": "2347230"
  },
  {
    "text": "recommend I know that there's some people working on visual studio integration that's also one of the",
    "start": "2347230",
    "end": "2352450"
  },
  {
    "text": "reasons why we're actually implementing the rust language server protocol because that's what most IDs are actually used this to JetBrains doesn't",
    "start": "2352450",
    "end": "2359730"
  },
  {
    "text": "so to sum up a Visual Studio code jetpens IDs are the ones that you can",
    "start": "2359730",
    "end": "2365170"
  },
  {
    "text": "totally use in our production ready be on the lookout for visual for visual studio proper then there was the no",
    "start": "2365170",
    "end": "2375490"
  },
  {
    "text": "that's a quote about another programming language I will not say it but what about the rust compile performance",
    "start": "2375490",
    "end": "2382710"
  },
  {
    "text": "that's I'm always waiting for this question so one of the reasons the rust",
    "start": "2382710",
    "end": "2388240"
  },
  {
    "text": "has a name for not be the fastest language to compile this is also not the slowest but for example several compilers for like 20 to 25",
    "start": "2388240",
    "end": "2394270"
  },
  {
    "text": "minutes one of the reasons why that is the case is actually not quite in the",
    "start": "2394270",
    "end": "2400690"
  },
  {
    "text": "control of Rossi for example one of the things is we we generate code and we",
    "start": "2400690",
    "end": "2406690"
  },
  {
    "text": "push it to LLVM and lrvm and losing a lot of information in that process for",
    "start": "2406690",
    "end": "2411910"
  },
  {
    "text": "example rust as a language forbids that any point is too awliyas any mutable",
    "start": "2411910",
    "end": "2417820"
  },
  {
    "text": "point is too odious and this is something that c compilers try to figure out by static analysis and we're",
    "start": "2417820",
    "end": "2424780"
  },
  {
    "text": "throwing away that information once we're pushing that to LLVM and LVM starts figuring it out again there's an",
    "start": "2424780",
    "end": "2430300"
  },
  {
    "text": "interface for that in LLVM it's currently broken so we're working on fixing that so you can you can push that",
    "start": "2430300",
    "end": "2436090"
  },
  {
    "text": "information into LLVM it will then miss compile so these are like the things",
    "start": "2436090",
    "end": "2441130"
  },
  {
    "text": "that we're working on also that's on our side would get generating far too much code so this is something that people",
    "start": "2441130",
    "end": "2447970"
  },
  {
    "text": "can really work on the thing we're constantly working on improving those",
    "start": "2447970",
    "end": "2453040"
  },
  {
    "text": "times is usually you we gain around like 20 to 30 percent over half a year in",
    "start": "2453040",
    "end": "2458290"
  },
  {
    "text": "compile performance so this is the range of optimization that the chris compiler currently has it is usable fast it's to",
    "start": "2458290",
    "end": "2467200"
  },
  {
    "text": "say so and also it's like when you're using c++ if you go overboard with",
    "start": "2467200",
    "end": "2472450"
  },
  {
    "text": "generics and the compiler has to roll out all the specializations for all the generics that's just going to cost you",
    "start": "2472450",
    "end": "2478990"
  },
  {
    "text": "at compile time so there's even programming techniques that go around this problem a little if you're working",
    "start": "2478990",
    "end": "2484330"
  },
  {
    "text": "on a large scale another question that's very often asked about about languages",
    "start": "2484330",
    "end": "2490810"
  },
  {
    "text": "that our system languages how to ask written itself rest is written in rest",
    "start": "2490810",
    "end": "2498910"
  },
  {
    "text": "is written in rested we've got a lot of that too that the rest compiler doesn't know what a newline is the definition in",
    "start": "2498910",
    "end": "2506830"
  },
  {
    "text": "the rest compiler is literally if you see /n in this in the parser if you see",
    "start": "2506830",
    "end": "2513790"
  },
  {
    "text": "slash and n then it's slash n the literal the reason why this works is",
    "start": "2513790",
    "end": "2520090"
  },
  {
    "text": "because we compile rust with rust rust knows what a newline is so we can inject into the next compiler",
    "start": "2520090",
    "end": "2525630"
  },
  {
    "text": "the next generated compiler what the new light was it's a nod to the two",
    "start": "2525630",
    "end": "2531550"
  },
  {
    "text": "reflections on trusting trust yes we we are self hosted and we have fun with it",
    "start": "2531550",
    "end": "2537510"
  },
  {
    "text": "okay what about performance compared to C++ or Java hi I mean that always depends on",
    "start": "2537510",
    "end": "2546280"
  },
  {
    "text": "what you're doing so in general like the performance is on par with C++ it's with all the footnotes",
    "start": "2546280",
    "end": "2554050"
  },
  {
    "text": "that you have was C++ as well first of all it might be the trust doesn't update it does not do an optimization that a",
    "start": "2554050",
    "end": "2559960"
  },
  {
    "text": "C++ compiler would do currently that's the thing where we slower but like model wise the languages are pretty close and",
    "start": "2559960",
    "end": "2566890"
  },
  {
    "text": "are landing in the same way in the same range it might be a couple of milliseconds more a couple of milliseconds later away the comparison",
    "start": "2566890",
    "end": "2575710"
  },
  {
    "text": "with Java I find very hard to do because there's a couple of algorithms that",
    "start": "2575710",
    "end": "2581040"
  },
  {
    "text": "really really like garbage collection so the problem there is basically not like",
    "start": "2581040",
    "end": "2588760"
  },
  {
    "text": "it's Java faster or this Java like which programming model do we support better",
    "start": "2588760",
    "end": "2595980"
  },
  {
    "text": "so Java is incredibly fast so probably same range usually a little",
    "start": "2595980",
    "end": "2603550"
  },
  {
    "text": "bit faster depending on the algorithm it's a very complex subject there's some blog posts out there about this another",
    "start": "2603550",
    "end": "2610740"
  },
  {
    "text": "well a question to be expected is the comparison to go or D but it's more it's",
    "start": "2610740",
    "end": "2618430"
  },
  {
    "text": "not about the performance it's more about what is the stuff that rust offers",
    "start": "2618430",
    "end": "2624099"
  },
  {
    "text": "that those don't D is an interesting one go go we usually have the same one as a",
    "start": "2624099",
    "end": "2629890"
  },
  {
    "text": "board game the other as a programming language the reason the reason why these and that's not piling on go the reason",
    "start": "2629890",
    "end": "2636520"
  },
  {
    "text": "why these languages are often compared is because they were published like the research project rust and the language",
    "start": "2636520",
    "end": "2642760"
  },
  {
    "text": "go from Google were published around the same time basically two months between and to add to that the rust that was",
    "start": "2642760",
    "end": "2651099"
  },
  {
    "text": "published back then actually had like a little channel syntax and channel semantics inside the language and runtimes",
    "start": "2651099",
    "end": "2657280"
  },
  {
    "text": "and I think that influenced rusts a lot because that meant no one needs go from",
    "start": "2657280",
    "end": "2663190"
  },
  {
    "text": "from Mozilla no one needs that you can just go use go from Google so that meant",
    "start": "2663190",
    "end": "2669430"
  },
  {
    "text": "that rust went a radically different direction and actually said we're throwing our all runtime stuff we're",
    "start": "2669430",
    "end": "2674470"
  },
  {
    "text": "throwing out the garbage collector we're moving to this completely static model where we can go on embedded devices",
    "start": "2674470",
    "end": "2680590"
  },
  {
    "text": "everywhere AC is used and all of these kind of things the comparison to go is a little bit 2d is a little bit different",
    "start": "2680590",
    "end": "2686950"
  },
  {
    "text": "addy has an optional garbage collector and depending on whether you need that or not the language is a little bit",
    "start": "2686950",
    "end": "2692530"
  },
  {
    "text": "different so kinda has this we opted into a runtime system or not D is old",
    "start": "2692530",
    "end": "2699880"
  },
  {
    "text": "that means it both has maturity it also hasn't quite caught on like as a",
    "start": "2699880",
    "end": "2705460"
  },
  {
    "text": "community person mostly like D is a very interesting thing to discuss about but I",
    "start": "2705460",
    "end": "2711130"
  },
  {
    "text": "can't say to say too much about it well",
    "start": "2711130",
    "end": "2716590"
  },
  {
    "text": "then maybe this one is interesting which part of a legacy system would be the best to target for replacement and rust",
    "start": "2716590",
    "end": "2722860"
  },
  {
    "text": "modules everything that uses heavy concurrency and it's completely broken",
    "start": "2722860",
    "end": "2727900"
  },
  {
    "text": "for it so if you have if you have a piece of the system where you don't have any control over because of these",
    "start": "2727900",
    "end": "2735130"
  },
  {
    "text": "properties maybe rewriting in rust gives you basically static analysis that you would otherwise pay a hundred thousand",
    "start": "2735130",
    "end": "2741010"
  },
  {
    "text": "euros for or more okay now more provocative question what",
    "start": "2741010",
    "end": "2747400"
  },
  {
    "text": "are the weaknesses of the language compile times at first it is a",
    "start": "2747400",
    "end": "2752500"
  },
  {
    "text": "completely static language so if you're trying to like I always say like if you talk about reflection rust is a vampire",
    "start": "2752500",
    "end": "2758380"
  },
  {
    "text": "language it doesn't reflect at all so if you want to do any kind of very dynamic programming i'm as you've seen i'm i was",
    "start": "2758380",
    "end": "2765550"
  },
  {
    "text": "a rusty programmer before if you want to do any kind of heavy dynamic programming Russ is just not for",
    "start": "2765550",
    "end": "2772840"
  },
  {
    "text": "you it's not an object-oriented language there's no like message sending between objects or all these semantics don't exist so if you if you are comfortable",
    "start": "2772840",
    "end": "2783400"
  },
  {
    "text": "with these client kinds of environments then probably rust is not for you and",
    "start": "2783400",
    "end": "2788440"
  },
  {
    "text": "that's definitely a weakness of language yeah also currently depending on the",
    "start": "2788440",
    "end": "2795530"
  },
  {
    "text": "field you are in maturity of libraries but that's really heavily dependent on the field you're and like everything",
    "start": "2795530",
    "end": "2801410"
  },
  {
    "text": "that has to do with HTML parsing all of these kind of things you can use the libraries that server provides they're",
    "start": "2801410",
    "end": "2806570"
  },
  {
    "text": "like top there's a couple of very good libraries for writing games and engines",
    "start": "2806570",
    "end": "2812630"
  },
  {
    "text": "and all of these kind of things as like basics you can use that this other",
    "start": "2812630",
    "end": "2817790"
  },
  {
    "text": "fields were well we're not that far yet comes with the age what is rusts take on",
    "start": "2817790",
    "end": "2824480"
  },
  {
    "text": "non-blocking i/o okay oh it's a we have a whole framework framework around this",
    "start": "2824480",
    "end": "2830990"
  },
  {
    "text": "it's called tocayo and an implementation of futures so if you're comfortable with the futures",
    "start": "2830990",
    "end": "2836210"
  },
  {
    "text": "interface we have a we have a library that provides it as an interface and then we have Tokyo which is a library",
    "start": "2836210",
    "end": "2844220"
  },
  {
    "text": "that runs futures on an event reactor there's also an implementation that runs",
    "start": "2844220",
    "end": "2849800"
  },
  {
    "text": "futures on the gtk event reactor gtk is currently binding heavily to rust and",
    "start": "2849800",
    "end": "2856570"
  },
  {
    "text": "there's implementations of running running these on a thread pool which wouldn't be icing io but yeah if you're",
    "start": "2856570",
    "end": "2864740"
  },
  {
    "text": "interested in that Tokyo is the thing you want to use and then something maybe well I I don't understand the question",
    "start": "2864740",
    "end": "2871130"
  },
  {
    "text": "but maybe you two is puzzling possible wire LLVM why LLVM i know that we we",
    "start": "2871130",
    "end": "2879589"
  },
  {
    "text": "have tools that first using american fuzzy blob and lip fuzz I don't know",
    "start": "2879589",
    "end": "2886849"
  },
  {
    "text": "what DLL for I don't know about the LLVM fuzzer hmm okay that is probably that",
    "start": "2886849",
    "end": "2896320"
  },
  {
    "text": "yeah so we have fuzzing there's quite a lot of people that actually practice it",
    "start": "2896320",
    "end": "2901670"
  },
  {
    "text": "a lot so you can find tutorials for that and do it there's even integrations into our build tools as a plugin okay well",
    "start": "2901670",
    "end": "2910580"
  },
  {
    "text": "any any questions in the room here we still have Oh No well actually we are at the end but if",
    "start": "2910580",
    "end": "2919520"
  },
  {
    "text": "there would be an urgent question I could know okay fine thank you",
    "start": "2919520",
    "end": "2924540"
  },
  {
    "text": "and let's forget these [Applause]",
    "start": "2924540",
    "end": "2931610"
  }
]