[
  {
    "start": "0",
    "end": "190000"
  },
  {
    "text": "uh thank you very much it is fantastic to be here so good morning Melbourne and good morning Yao thanks for walking all",
    "start": "12400",
    "end": "18480"
  },
  {
    "text": "the way down the hallway to join us some of you this is the first time you came down here you didn't even know there was a conference down here uh but welcome um",
    "start": "18480",
    "end": "26199"
  },
  {
    "text": "I'm thrilled to be back here this is my second tour with Yao and it's been a fantastic two weeks here in uh Australia",
    "start": "26199",
    "end": "32398"
  },
  {
    "text": "and it's really exciting actually to be finishing up the tour in uh probably the greatest city in Australia right",
    "start": "32399",
    "end": "38040"
  },
  {
    "text": "Melbourne certainly so I'm glad to be here thank you all for having me we got a lot to get through today um there I",
    "start": "38040",
    "end": "44719"
  },
  {
    "text": "will probably not have much time for questions but I'll be around all the rest of the day if you have any thoughts and questions but I'd also love for your",
    "start": "44719",
    "end": "50559"
  },
  {
    "text": "feedback that's my uh uh Twitter handle getify is how I'm known on GitHub and Twitter and all the other places online",
    "start": "50559",
    "end": "56600"
  },
  {
    "text": "that matter so throughout the talk and afterwards any feedback questions thoughts you have please share those",
    "start": "56600",
    "end": "61680"
  },
  {
    "text": "with me um let's make sure that we are all on the same page about what this talk is because there's been some",
    "start": "61680",
    "end": "67680"
  },
  {
    "text": "confusion in the previous cities about the title that this is a productivity talk it is not a productivity talk so I",
    "start": "67680",
    "end": "73040"
  },
  {
    "text": "want to get that out of the way let's make sure H actually well I don't know",
    "start": "73040",
    "end": "78600"
  },
  {
    "text": "how to cancel why is that taking so long uh uh let's see I guess we just have to",
    "start": "78600",
    "end": "84640"
  },
  {
    "text": "okay let's make sure that we're all on the same page about what this talk is how many of you in the room would say",
    "start": "84640",
    "end": "89759"
  },
  {
    "text": "you're you're not primarily a JavaScript developer that you do something other than JavaScript development most of the",
    "start": "89759",
    "end": "95200"
  },
  {
    "text": "room fantastic that's what I planned on that's what I expected as you know I'm a JavaScript developer and all of the code",
    "start": "95200",
    "end": "101320"
  },
  {
    "text": "today will be in JavaScript but this is not a JavaScript talk this is talk about",
    "start": "101320",
    "end": "106759"
  },
  {
    "text": "a concept that I believe to be crosscutting on all of the tech Stacks that we work in and all of the systems",
    "start": "106759",
    "end": "112920"
  },
  {
    "text": "that we build and in fact cross cutting from both front end and into back end so",
    "start": "112920",
    "end": "117960"
  },
  {
    "text": "I want to talk about the cancellation of asynchronous operations that's the talk and I'm going to use JavaScript as a",
    "start": "117960",
    "end": "124439"
  },
  {
    "text": "means of illustration but not as a means to poke fun at or say that JavaScript is somehow uniquely either better qualified",
    "start": "124439",
    "end": "131120"
  },
  {
    "text": "or less qualified to do so these are problems that we've we can see across all the text acts and in fact as I was",
    "start": "131120",
    "end": "136840"
  },
  {
    "text": "researching for the talk I I was hoping to find other people talking about other things and all I found in my Google",
    "start": "136840",
    "end": "142560"
  },
  {
    "text": "search results were me talking about it so this is a problem that is universal",
    "start": "142560",
    "end": "147599"
  },
  {
    "text": "that we're not we're not talking enough about so a quick bit about myself before I jump in uh as I said I'm very much",
    "start": "147599",
    "end": "153879"
  },
  {
    "text": "into JavaScript I teach and speak about JavaScript for a living I've also written about JavaScript so I've written a number of books the you don't know JS",
    "start": "153879",
    "end": "160920"
  },
  {
    "text": "book series probably the one I'm most well known for you can read those for free online also purchase them if you like them and then my latest book has",
    "start": "160920",
    "end": "167440"
  },
  {
    "text": "been out about a year functional like JavaScript a pragmatic way of doing functional programming in JavaScript",
    "start": "167440",
    "end": "172480"
  },
  {
    "text": "same thing you can read it or purchase it uh this is awkward how do I get rid of this uh I got to cancel this uh it",
    "start": "172480",
    "end": "180440"
  },
  {
    "text": "won't cancel uh let's see I guess that's the right button to",
    "start": "180440",
    "end": "186680"
  },
  {
    "text": "okay man hope that doesn't happen anymore all right so let's jump in we",
    "start": "186680",
    "end": "191799"
  },
  {
    "start": "190000",
    "end": "370000"
  },
  {
    "text": "all know this to be true right it happens in fact there's a running theme throughout this conference that failure",
    "start": "191799",
    "end": "199000"
  },
  {
    "text": "is something that we should be planning on that failure happens and we shouldn't be surprised by that we should be",
    "start": "199000",
    "end": "205000"
  },
  {
    "text": "planning for it and we should be taking care of it directly and I'm going to extend that to say that even though that",
    "start": "205000",
    "end": "210799"
  },
  {
    "text": "is definitely true one other thing is absolutely certain about our code and",
    "start": "210799",
    "end": "216280"
  },
  {
    "text": "yet we don't plan for it and that is that cancellation happens we tend to think of cancellation as something that",
    "start": "216280",
    "end": "222760"
  },
  {
    "text": "may or may not occur that we hope doesn't happen that it's an exceptional",
    "start": "222760",
    "end": "227799"
  },
  {
    "text": "path but I'm going to tell you today that cancellation is an absolute guarantee it is absolutely certain that",
    "start": "227799",
    "end": "234239"
  },
  {
    "text": "cancellation will happen but I want you to keep that idea of certainty in your head because that's going to be a running theme throughout today",
    "start": "234239",
    "end": "240439"
  },
  {
    "text": "all right so cancel we certainly understand an idea of cancel it means to sort of stop something so some synonyms",
    "start": "240439",
    "end": "247200"
  },
  {
    "text": "of cancellation abandoning and killing off and terminating these all feel like very final sorts of things in our",
    "start": "247200",
    "end": "254360"
  },
  {
    "text": "application meaning our application stops in some meaningful way as a result of cancellation and those are all true",
    "start": "254360",
    "end": "261479"
  },
  {
    "text": "but I think there's more to cancellation even than that so what about pausing is pausing a form of",
    "start": "261479",
    "end": "268520"
  },
  {
    "text": "cancellation and I will argue today that it is indeed and it's much more complex than simply halting a program the",
    "start": "268520",
    "end": "275199"
  },
  {
    "text": "question of how do you pause something and then potentially resume or potentially stop it all together what",
    "start": "275199",
    "end": "280360"
  },
  {
    "text": "about undo what about the idea of stopping where you were and not just simply finishing at that point but",
    "start": "280360",
    "end": "286320"
  },
  {
    "text": "having to backtrack is that a form of cancellation is that a complexity in the cancellation space and these are all",
    "start": "286320",
    "end": "292120"
  },
  {
    "text": "things that I think incompass the idea of cancellation but we're not talking about and planning for these very",
    "start": "292120",
    "end": "297720"
  },
  {
    "text": "specifically so let's categorize them on the left here we would say these are very final things we would think of them",
    "start": "297720",
    "end": "303240"
  },
  {
    "text": "as events these are events that occur and they are very final meaning they really isn't anything meaningful in that",
    "start": "303240",
    "end": "309479"
  },
  {
    "text": "particular code path to occur after these things have happened but on the right hand side these the more",
    "start": "309479",
    "end": "315240"
  },
  {
    "text": "complicated ones recovering from something even rolling back a set of states in your system if those are",
    "start": "315240",
    "end": "322039"
  },
  {
    "text": "cancellation then they speak to the idea that maybe we should be modeling and not maybe actually certainly we should be",
    "start": "322039",
    "end": "328400"
  },
  {
    "text": "modeling these not as events but rather EST States in our application so that's",
    "start": "328400",
    "end": "334080"
  },
  {
    "text": "the first point I want to make to you is that we are at the wrong level of abstraction when we think about",
    "start": "334080",
    "end": "339520"
  },
  {
    "text": "cancellation merely as an unexpected event events are unexpected but states",
    "start": "339520",
    "end": "345680"
  },
  {
    "text": "are expected they are planned for they are carefully planned out and they are carefully",
    "start": "345680",
    "end": "351440"
  },
  {
    "text": "considered cancellation should never be an unexpected exception it is not as if we could not have possibly imagined that",
    "start": "351440",
    "end": "358520"
  },
  {
    "text": "something would occur that would cause the system to stop or to go into one of these states and yet we often treat it",
    "start": "358520",
    "end": "364400"
  },
  {
    "text": "as this wow I didn't expect for that to occur it should absolutely be a predictable",
    "start": "364400",
    "end": "370319"
  },
  {
    "start": "370000",
    "end": "501000"
  },
  {
    "text": "state so if it is a state then what is the enemy of our state in our",
    "start": "370319",
    "end": "377199"
  },
  {
    "text": "systems what is the enemy of our state well I'm going to argue to you today that the enemy of our state is",
    "start": "377199",
    "end": "385080"
  },
  {
    "text": "uncertainty that if we do not plan for something it will still occur and that puts our system into this unpredictable",
    "start": "385080",
    "end": "393280"
  },
  {
    "text": "uncertain sort of condition how many of you have heard of the halting problem before this is one",
    "start": "393280",
    "end": "399000"
  },
  {
    "text": "of the classic problems in computer science and the halting problem asks given any particular program could I",
    "start": "399000",
    "end": "404880"
  },
  {
    "text": "prove that that program would run forever in other words here's a representation of a program in a state",
    "start": "404880",
    "end": "411360"
  },
  {
    "text": "diagram do I know that it's going to spin forever or do I know for sure that it will stop that's fundamentally",
    "start": "411360",
    "end": "417520"
  },
  {
    "text": "question being asked and we all know that to be a very important sort of a question because if you knew for sure",
    "start": "417520",
    "end": "423280"
  },
  {
    "text": "that a program was going to run forever then you absolutely would want to stop in step in at some point and stop it you",
    "start": "423280",
    "end": "428879"
  },
  {
    "text": "would want to cancel it right but how do we know whether it would run forever so this is a very critical question that",
    "start": "428879",
    "end": "435479"
  },
  {
    "text": "computer scientists from the very beginning tackled and it turns out mathematically they were able to prove",
    "start": "435479",
    "end": "441240"
  },
  {
    "text": "that it is impossible to solve the halting problem that this is an impossible problem you cannot prove that",
    "start": "441240",
    "end": "447919"
  },
  {
    "text": "a program will run forever so we shouldn't waste any more time thinking about how do I prove that my",
    "start": "447919",
    "end": "454120"
  },
  {
    "text": "program is going to run forever we have to deal with cancellation in that sort of uncertainty I'm not sure if it will",
    "start": "454120",
    "end": "459720"
  },
  {
    "text": "run forever or not and the way we deal with that sort of uncertainty where we",
    "start": "459720",
    "end": "465080"
  },
  {
    "text": "can't absolutely prove a particular solution so we do what any good computer scientist does we",
    "start": "465080",
    "end": "470919"
  },
  {
    "text": "approximate we approximate with timeouts timeouts are how we basically say listen",
    "start": "470919",
    "end": "476919"
  },
  {
    "text": "if it's taken for example 5 Seconds for some operation to occur then I'm going",
    "start": "476919",
    "end": "482039"
  },
  {
    "text": "to assume that that is indistinguishable from it taking infin Infinity an",
    "start": "482039",
    "end": "487319"
  },
  {
    "text": "infinite amount of time to occur so if it's taken 5 seconds I'm going to say we've crossed my threshold I'm going to",
    "start": "487319",
    "end": "494240"
  },
  {
    "text": "time out I'm going to cancel whatever that operation was that is our approximation for the solution to the",
    "start": "494240",
    "end": "499840"
  },
  {
    "text": "halting problem how many of you have heard of Schrodinger's cat before this a famous",
    "start": "499840",
    "end": "504879"
  },
  {
    "start": "501000",
    "end": "652000"
  },
  {
    "text": "thought experiment by the physicist the quantum physicist Schrodinger and what's",
    "start": "504879",
    "end": "510159"
  },
  {
    "text": "interesting it's very morbid but what's interesting about this experiment it was applied for quantum mechanics but it was",
    "start": "510159",
    "end": "515399"
  },
  {
    "text": "designed to make a statement about the real world a statement of paradox a statement of absurdity see in sher's",
    "start": "515399",
    "end": "523599"
  },
  {
    "text": "experiment what he did was he said what if we were to put a cat inside of a box with a vial of poison and a mechanism",
    "start": "523599",
    "end": "529519"
  },
  {
    "text": "that could destroy that vial and therefore release the poison and kill the cat but that mechanism would be",
    "start": "529519",
    "end": "534839"
  },
  {
    "text": "controlled essentially through Randomness his thought experiment was we would use the radioactive decay of",
    "start": "534839",
    "end": "540800"
  },
  {
    "text": "particles to decide whether or not the mechanism were to trigger and kill the cat and then Schrodinger said this what",
    "start": "540800",
    "end": "547200"
  },
  {
    "text": "if we closed up the box and then we just waited a certain amount of time and we",
    "start": "547200",
    "end": "553040"
  },
  {
    "text": "then checked to see whether the cat was still alive or not yep he's still alive hopefully as we keep checking he's still",
    "start": "553040",
    "end": "559000"
  },
  {
    "text": "going to be alive no cats should be harmed in the making of this talk so he",
    "start": "559000",
    "end": "564200"
  },
  {
    "text": "was making a statement that says in this place where we can't actually determine",
    "start": "564200",
    "end": "569240"
  },
  {
    "text": "the state of the system from a Quantum level this is a mathematical proof that at a Quantum level that that particle is",
    "start": "569240",
    "end": "575240"
  },
  {
    "text": "actually in all of its possible States and that's called Quantum superposition that it's actually all of those things",
    "start": "575240",
    "end": "581200"
  },
  {
    "text": "at the same time and we can say that in math and be like okay I sound smart but when you talk about it in the real world",
    "start": "581200",
    "end": "587440"
  },
  {
    "text": "it sounds ridiculous to suggest that the cat is both alive and dead at the exact same time and that was the point of the",
    "start": "587440",
    "end": "594279"
  },
  {
    "text": "experiment is to suggest that this uncertainty is absurd",
    "start": "594279",
    "end": "599440"
  },
  {
    "text": "it might come from the math but it is absurd we know that no two cats can occupy the box at the same time right",
    "start": "599440",
    "end": "606440"
  },
  {
    "text": "there's only one cat in the Box actually you can do Shing or",
    "start": "606440",
    "end": "612800"
  },
  {
    "text": "asynchron in JavaScript in any sort of programming but here I'll use JavaScript here I've set up a promise and it's",
    "start": "612800",
    "end": "619040"
  },
  {
    "text": "mimicking this idea of Schrodinger's uh asynchrony of this Quantum superposition",
    "start": "619040",
    "end": "624240"
  },
  {
    "text": "in JavaScript we're basically saying This Promise will resolve potentially at some point point but notice that I'm",
    "start": "624240",
    "end": "630399"
  },
  {
    "text": "using a bunch of Randomness we're using Randomness here both to determine the timing and to make the decision about",
    "start": "630399",
    "end": "636480"
  },
  {
    "text": "whether to kill the cat or not so it is possible although unlikely but it is",
    "start": "636480",
    "end": "642320"
  },
  {
    "text": "possible that this could run basically forever and never actually kill the cat because it's all entirely based off of",
    "start": "642320",
    "end": "648480"
  },
  {
    "text": "random at least the best approximation of it that we can get on the computer and so the only way for us to know if",
    "start": "648480",
    "end": "654000"
  },
  {
    "start": "652000",
    "end": "794000"
  },
  {
    "text": "the cat has died is to open up the box and observe it this is the uncertainty",
    "start": "654000",
    "end": "659079"
  },
  {
    "text": "of the systems and what I'm trying to get out is that the uncertainty of systems creates chaos within our",
    "start": "659079",
    "end": "665399"
  },
  {
    "text": "programs we should be avoiding that at all costs so I got to thinking what about cancelling a cancellation what",
    "start": "665399",
    "end": "672560"
  },
  {
    "text": "would that mean what is cancelling a cancellation well actually canceling a",
    "start": "672560",
    "end": "678600"
  },
  {
    "text": "cancellation is an awful lot like a pause isn't it we thought we were going to stop something and then we decided no",
    "start": "678600",
    "end": "685560"
  },
  {
    "text": "no no I I I want to keep doing it you get one of those dialogues where you've tried to click to delete something it pops up and it says are you sure you",
    "start": "685560",
    "end": "691399"
  },
  {
    "text": "want to do this and you say no actually I don't want to do that and you cancel the cancellation in programming we may model",
    "start": "691399",
    "end": "698120"
  },
  {
    "text": "this here's a timeout it's a promise that's going to reject after a certain amount of time but I do something",
    "start": "698120",
    "end": "704519"
  },
  {
    "text": "interesting which is I add a cancel method to the promise that allows me to clear that timeout importantly the",
    "start": "704519",
    "end": "710720"
  },
  {
    "text": "cancel method here does not put the promise into a determinant State at least from our ability to observe it it",
    "start": "710720",
    "end": "718480"
  },
  {
    "text": "simply says This Promise will never resolve it clears the only thing in the",
    "start": "718480",
    "end": "724000"
  },
  {
    "text": "system that would have possibly resolved this promise which means from on the outside and in terms of our observation",
    "start": "724000",
    "end": "731440"
  },
  {
    "text": "this is in an uncertain indeterminable State and some of you have heard of cancelable promises that is essentially",
    "start": "731440",
    "end": "738279"
  },
  {
    "text": "what cancelable promises are because this looks okay but I'm telling you it's the wrong level of abstraction it is the",
    "start": "738279",
    "end": "745440"
  },
  {
    "text": "wrong level of abstraction for us to model the idea of cancellation at this individual operation level like that",
    "start": "745440",
    "end": "752480"
  },
  {
    "text": "because while this looks okay we just pass in that too long promise and we know that it's if it's taken too long",
    "start": "752480",
    "end": "758800"
  },
  {
    "text": "it'll reject and then the operation will be abandoned but actually we don't know and the reason we don't know is because",
    "start": "758800",
    "end": "765600"
  },
  {
    "text": "there's that cancel method floating around somewhere and as we've passed this promise around through our entire",
    "start": "765600",
    "end": "770800"
  },
  {
    "text": "application and indeed beyond the borders of our application any part of our system could decide to call that",
    "start": "770800",
    "end": "776880"
  },
  {
    "text": "method say they don't care about the problem anymore so they call cancel on it and now this part of the system is in",
    "start": "776880",
    "end": "783399"
  },
  {
    "text": "an indeterminate uncertain State because we don't know that it has been canceled",
    "start": "783399",
    "end": "788880"
  },
  {
    "text": "the only way for us to know that it's been canceled is to wait to the death of the",
    "start": "788880",
    "end": "794000"
  },
  {
    "start": "794000",
    "end": "890000"
  },
  {
    "text": "universe this sort of uncertainty is where the problems are coming from in our applications so I would just say to",
    "start": "794000",
    "end": "800760"
  },
  {
    "text": "you if you've been following along and if you were sad that we didn't get cancelable promises I'm glad that those",
    "start": "800760",
    "end": "805800"
  },
  {
    "text": "died because they enshrine in in our system one of the bad anti-patterns",
    "start": "805800",
    "end": "812480"
  },
  {
    "text": "action at a distance I do something over here and something that seems entirely unrelated is affected this is bad design",
    "start": "812480",
    "end": "820040"
  },
  {
    "text": "it leads to difficult to understand and maintain systems it puts our systems",
    "start": "820040",
    "end": "825160"
  },
  {
    "text": "into an unpredictable State and I would say you should just say no okay so let's talk about this idea of",
    "start": "825160",
    "end": "833199"
  },
  {
    "text": "Randomness and I'm going to sort of equate this with complexity and I want you to understand why I'm equating it",
    "start": "833199",
    "end": "839160"
  },
  {
    "text": "with complexity how many of you have heard of Arthur C Clark the famous science fiction author and Clark's Three",
    "start": "839160",
    "end": "845000"
  },
  {
    "text": "Laws the most famous of which is Clark's Third Law and Clark's thirdd law says this it says any sufficiently complex",
    "start": "845000",
    "end": "852240"
  },
  {
    "text": "system is indistinguishable from what from Magic right so if it's very very complex",
    "start": "852240",
    "end": "858560"
  },
  {
    "text": "then we basically look at it and say well that might as well just have been magic I'm going to tweak this phrase",
    "start": "858560",
    "end": "864000"
  },
  {
    "text": "just a moment I'm going to tweak this just a tad and say any sufficiently",
    "start": "864000",
    "end": "869800"
  },
  {
    "text": "random system is indistinguishable from Magic any sufficiently complex system is",
    "start": "869800",
    "end": "875360"
  },
  {
    "text": "indistinguishable from Randomness okay I'm equating these two because as complexity goes up to",
    "start": "875360",
    "end": "883079"
  },
  {
    "text": "Infinity so does our observation of that system as if that system were driven by",
    "start": "883079",
    "end": "890880"
  },
  {
    "start": "890000",
    "end": "1056000"
  },
  {
    "text": "Randomness you cannot simply cancel it's not possible let me",
    "start": "890880",
    "end": "896759"
  },
  {
    "text": "make it very clear that the choice to have have cancellation and it's not really a choice you must have",
    "start": "896759",
    "end": "902120"
  },
  {
    "text": "cancellation but the choice to have cancellation introduces complexity it is not the case that I'm saying you cannot",
    "start": "902120",
    "end": "907920"
  },
  {
    "text": "have complexity but you should not have unpredicted and unplanned for",
    "start": "907920",
    "end": "913120"
  },
  {
    "text": "complexity you must plan for these things and that is the point don't follow down the path to the mountain of",
    "start": "913120",
    "end": "921120"
  },
  {
    "text": "uncertainty all right so what kinds of things are we talking about cancelling",
    "start": "921120",
    "end": "926160"
  },
  {
    "text": "let's first start by talking about the user because absolutely I guarantee you a users want cancellation let's talk",
    "start": "926160",
    "end": "933959"
  },
  {
    "text": "very briefly about a few of the things that users are expecting the stop button in the browser how many of you have ever",
    "start": "933959",
    "end": "939600"
  },
  {
    "text": "been waiting for a really long wait Lo loading page and you've been thankful to be able to just click stop and say I give up cancel that stop trying to load",
    "start": "939600",
    "end": "946639"
  },
  {
    "text": "that it's obviously never going to load how many of you have ever got a prompt in the browser like this one from my",
    "start": "946639",
    "end": "952079"
  },
  {
    "text": "that says stop running the script and you're like I don't know what to click here should I click yes or no what's",
    "start": "952079",
    "end": "957480"
  },
  {
    "text": "going to happen we're in this uncertainty State as a user and that's not a good place to be is it or what",
    "start": "957480",
    "end": "963360"
  },
  {
    "text": "about this one how many of you have gotten the prompt before that says would you like us to throw a bunch of notifications at you from here to the",
    "start": "963360",
    "end": "968440"
  },
  {
    "text": "end of time no no block please at least they make that button very clear cancel that right",
    "start": "968440",
    "end": "974639"
  },
  {
    "text": "away Spinners are a favorite and they're getting more and more so in the react architecture as a matter of fact they're",
    "start": "974639",
    "end": "980839"
  },
  {
    "text": "basically saying listen we'll throw up a page and all these little bits and pieces of the page if they're not ready",
    "start": "980839",
    "end": "986399"
  },
  {
    "text": "to be displayed yet we'll uh put a placeholder there which is essentially a spinner so our future is to just have",
    "start": "986399",
    "end": "992880"
  },
  {
    "text": "spinners all over the place I'm super excited about that I hope you are too this is my favorite and most T",
    "start": "992880",
    "end": "1000720"
  },
  {
    "text": "whatever it was that I was doing on my system when the beach ball hell pops up I'm immediately thinking oh my God",
    "start": "1000720",
    "end": "1007759"
  },
  {
    "text": "please stop whatever that was it's not important please stop and yet I have no way of actually telling the system to",
    "start": "1007759",
    "end": "1013199"
  },
  {
    "text": "cancel do I and that's where our frustrations come from because users expect to be able to cancel subscript",
    "start": "1013199",
    "end": "1018880"
  },
  {
    "text": "itions or is this the cancellation of the cancellation to bring the subscription back I can't figure it out",
    "start": "1018880",
    "end": "1024720"
  },
  {
    "text": "what about uploading files these things take too long especially if we're on Terrible Hotel",
    "start": "1024720",
    "end": "1030000"
  },
  {
    "text": "Wi-Fi please cancel this and my favorite of all when you're checking your email",
    "start": "1030000",
    "end": "1035160"
  },
  {
    "text": "if it goes too quick you're like oh it certainly didn't even check right but if it goes too",
    "start": "1035160",
    "end": "1041160"
  },
  {
    "text": "long I know it's we're so paranoid like keep do it like 15 times because we're not really sure that it checked",
    "start": "1041160",
    "end": "1046959"
  },
  {
    "text": "certainly there's at least one email there but what if it goes too long if it's like a minute or two I'm like listen I don't care about my email that",
    "start": "1046959",
    "end": "1053039"
  },
  {
    "text": "much close the program and cancel it the point is users care about",
    "start": "1053039",
    "end": "1059600"
  },
  {
    "start": "1056000",
    "end": "1370000"
  },
  {
    "text": "cancellation and if you're a product manager you know this has to be a first class citizen unfortunately it's all too",
    "start": "1059600",
    "end": "1065600"
  },
  {
    "text": "often a second thought that we bolt on at the end when somebody complains about one particular use case and then you",
    "start": "1065600",
    "end": "1071559"
  },
  {
    "text": "have to go rearchitecturing",
    "start": "1071559",
    "end": "1074360"
  },
  {
    "text": "accessibility and offline ability and all those other things cancelability is one of those other Iles that we should",
    "start": "1079080",
    "end": "1084280"
  },
  {
    "text": "be planning for so now let talk about developers and oh my God this is a terrible V video let",
    "start": "1084280",
    "end": "1089600"
  },
  {
    "text": "me cancel that quickly what do developers care about with cancellation well the ones that are",
    "start": "1089600",
    "end": "1095200"
  },
  {
    "text": "obvious we know that they care about cancelling timers so we can do something like an interval and then later we could",
    "start": "1095200",
    "end": "1101360"
  },
  {
    "text": "call clear interval to tell this stop spinning once per second forever uh developers love to cancel",
    "start": "1101360",
    "end": "1108200"
  },
  {
    "text": "Ajax call that's an important one we want to be able to cancel Ajax calls now this is interesting because we shipped",
    "start": "1108200",
    "end": "1113640"
  },
  {
    "text": "the fetch a couple of years back without any mechanism for cancellation and developers went nuts they went they tore",
    "start": "1113640",
    "end": "1120840"
  },
  {
    "text": "into all of the uh mailing lists and the standards bodies and things and said how could you give us canc no cancellation",
    "start": "1120840",
    "end": "1127559"
  },
  {
    "text": "of an Ajax request even though none of you had ever done any cancellation of an Ajax call before as soon as we shipped",
    "start": "1127559",
    "end": "1134440"
  },
  {
    "text": "an API that's not capable of it now we get upset don't take away my cancelable",
    "start": "1134440",
    "end": "1139880"
  },
  {
    "text": "Ajax this is important right and even events events are pretty obvious we",
    "start": "1139880",
    "end": "1145400"
  },
  {
    "text": "would like to be able to listen for an event and then do something like remove event listener to say listen I don't I",
    "start": "1145400",
    "end": "1150600"
  },
  {
    "text": "don't care about that event anymore I want to cancel the listening of a particular event so those are the",
    "start": "1150600",
    "end": "1156360"
  },
  {
    "text": "obvious ones The Usual Suspects but it leaves me asking this question what about all of the other",
    "start": "1156360",
    "end": "1163840"
  },
  {
    "text": "things everything else because all of the other things are things that occur in especially if they're asynchronous",
    "start": "1163840",
    "end": "1170039"
  },
  {
    "text": "they're all things that we should be considering about cancellation how about the file system how often do we in our",
    "start": "1170039",
    "end": "1176760"
  },
  {
    "text": "own huis say well listen if I try to load a file from the file system it'll certainly be right there present for me",
    "start": "1176760",
    "end": "1182159"
  },
  {
    "text": "to get it'll only take a couple of milliseconds I'm sure no problem I don't even need to design the core API of node",
    "start": "1182159",
    "end": "1189679"
  },
  {
    "text": "to have any mechanism for cancellation just fire it and it doesn't matter how",
    "start": "1189679",
    "end": "1194799"
  },
  {
    "text": "long it takes until you fire it against a file that's on a network drive and it takes 15",
    "start": "1194799",
    "end": "1200640"
  },
  {
    "text": "hours wouldn't you have liked to been able to have a sanity check to stop step in and cancel that as a matter of fact",
    "start": "1200640",
    "end": "1207240"
  },
  {
    "text": "stream based operations are all over IO systems like nodes so we see stream operations and there is a sort of fail",
    "start": "1207240",
    "end": "1213760"
  },
  {
    "text": "safe in cancellation of streams which is to just literally kill the stream entirely destroy the object that's not",
    "start": "1213760",
    "end": "1220200"
  },
  {
    "text": "very graceful but it's the sort of Brute Force way of saying listen uh whatever this stream is doing stop it cancel it",
    "start": "1220200",
    "end": "1227840"
  },
  {
    "text": "terminate it but that's not enough that's far too low level it's at the wrong level of",
    "start": "1227840",
    "end": "1234000"
  },
  {
    "text": "abstraction in fact we have lots of stream based operations socket based operations if you're connecting between",
    "start": "1234000",
    "end": "1239600"
  },
  {
    "text": "two systems or between a system and a user's system you absolutely should have some sort of way to step in and say",
    "start": "1239600",
    "end": "1245799"
  },
  {
    "text": "listen cancel that it's taking too long it's taking up too many of our resources or it's taking too long databases are",
    "start": "1245799",
    "end": "1252200"
  },
  {
    "text": "another of my favorites we so with so much optimism I guess just say listen if",
    "start": "1252200",
    "end": "1258840"
  },
  {
    "text": "I select the group of records from the database it'll come right it'll come back right away couldn't possibly be",
    "start": "1258840",
    "end": "1264480"
  },
  {
    "text": "that this select might take minutes or hours to come back because the database was in some other read locked State or",
    "start": "1264480",
    "end": "1271360"
  },
  {
    "text": "the system was down or something look just make the request it doesn't matter how long it takes the records will come",
    "start": "1271360",
    "end": "1276520"
  },
  {
    "text": "back when they come back there's a theme that I'm trying to get out here and it's true with child processes as well which",
    "start": "1276520",
    "end": "1283679"
  },
  {
    "text": "is that there is nothing in your system that is asynchronous that should not",
    "start": "1283679",
    "end": "1288760"
  },
  {
    "text": "have cancellation built into it there is not a single operation that you can tell me about where I'm like H I guess it",
    "start": "1288760",
    "end": "1294720"
  },
  {
    "text": "doesn't matter let it take as long as it needs to cancellation must be a first class Citizen and yet we're not thinking",
    "start": "1294720",
    "end": "1301000"
  },
  {
    "text": "about any of these things again we have a really low-level system with child process my favorite to get rid of a",
    "start": "1301000",
    "end": "1306880"
  },
  {
    "text": "child process we send send the sigint or the Sig term operating system level",
    "start": "1306880",
    "end": "1312200"
  },
  {
    "text": "signal to it that's our way of telling it stop doing what you're doing these are poorly designed systems",
    "start": "1312200",
    "end": "1319080"
  },
  {
    "text": "because we're just expecting that cancellation will be an exceptional event and we should be planning at the",
    "start": "1319080",
    "end": "1324600"
  },
  {
    "text": "right level of abstraction for it to be a guaranteed state of our systems and I know you're saying this is boring why is",
    "start": "1324600",
    "end": "1331880"
  },
  {
    "text": "he talking to me it's like it's like my mom trying to get me to eat vegetables I don't want to talk about this stuff this is not exciting why is he so riled up",
    "start": "1331880",
    "end": "1338960"
  },
  {
    "text": "why is there so much emotion and ranting up on stage not I get it I get that it is one",
    "start": "1338960",
    "end": "1345880"
  },
  {
    "text": "of those things that it's like eating your vegetables you know you should do it but nobody wants to do it nobody wants to spend time talking about it",
    "start": "1345880",
    "end": "1352120"
  },
  {
    "text": "that's why nobody is spending any time talking about it but I'm trying to tell you that it's the path to the system",
    "start": "1352120",
    "end": "1357840"
  },
  {
    "text": "complexity that so often frustrates us because this is absolutely the weakest",
    "start": "1357840",
    "end": "1363240"
  },
  {
    "text": "part of our system design we're pretty good at failure proofing our systems but we're not at all good at cancel proofing",
    "start": "1363240",
    "end": "1369679"
  },
  {
    "text": "our systems so for the rest of the talk instead of all the funny memes I am",
    "start": "1369679",
    "end": "1376559"
  },
  {
    "start": "1370000",
    "end": "1728000"
  },
  {
    "text": "going to get into code and I'm going to use JavaScript there's no more funny memes after this one all right it's",
    "start": "1376559",
    "end": "1381840"
  },
  {
    "text": "going to be all code from here on out I want to dig in to some of the use cases around cancellation why cancellation",
    "start": "1381840",
    "end": "1388159"
  },
  {
    "text": "Works in certain ways and really at the end try to cast forward a vision that we should be solving This Together",
    "start": "1388159",
    "end": "1394159"
  },
  {
    "text": "regardless of the text stack that we should be thinking about cancellation in a much more holistic sense so let's dive",
    "start": "1394159",
    "end": "1400960"
  },
  {
    "text": "into some code my favorite of the use Cas is that sort of",
    "start": "1400960",
    "end": "1406080"
  },
  {
    "text": "complexifies cancellation is when it's a conditional cancellation",
    "start": "1406080",
    "end": "1411320"
  },
  {
    "text": "you know you have some operation on the page that might take a long time so you have a spinner for it when the user",
    "start": "1411320",
    "end": "1416559"
  },
  {
    "text": "clicks for some new results and you throw up a little spinner for example and then the product manager comes back and says it's really ugly when that",
    "start": "1416559",
    "end": "1423240"
  },
  {
    "text": "spinner like flashes up for a split second every single time I click the button uh can you only make it show the",
    "start": "1423240",
    "end": "1428520"
  },
  {
    "text": "spinner when it's going to take a really long time and you're like silly product",
    "start": "1428520",
    "end": "1434279"
  },
  {
    "text": "manager how am I supposed to know that it's going to take a long time before it's taken a long time",
    "start": "1434279",
    "end": "1439760"
  },
  {
    "text": "so we've invented debouncing essentially debounce this cancellation so only show the spinner if the if the operation that",
    "start": "1439760",
    "end": "1447159"
  },
  {
    "text": "I want to be able to be cancelable has taken at least 500 milliseconds then show the spinner so I just set up a",
    "start": "1447159",
    "end": "1452480"
  },
  {
    "text": "simple little timer and this is pretty easy to use in my application I just at the beginning of a set of operations",
    "start": "1452480",
    "end": "1458120"
  },
  {
    "text": "queue up the spinner and then when I'm done I call hid spinner and it abstracts",
    "start": "1458120",
    "end": "1463320"
  },
  {
    "text": "properly inside of itself that whole timing thing it cancels the cancellation",
    "start": "1463320",
    "end": "1468520"
  },
  {
    "text": "if you will a a quick note on observables for those of you that are in the JavaScript",
    "start": "1468520",
    "end": "1474000"
  },
  {
    "text": "space who done much reading in the JavaScript space when you do any kind of research about this you will inevitably find people from the observables the",
    "start": "1474000",
    "end": "1480840"
  },
  {
    "text": "reactive programming crowd that will tell you listen observables have already solved this problem you can simply",
    "start": "1480840",
    "end": "1486799"
  },
  {
    "text": "unsubscribe from an observable and that magically fixes the whole cancellation and that's why they tell you build your",
    "start": "1486799",
    "end": "1492360"
  },
  {
    "text": "entire app out of observables problem solved it's not quite that simple",
    "start": "1492360",
    "end": "1498600"
  },
  {
    "text": "because there's a notion of both hot observables and cold observables with a hot observable unsubscribing is",
    "start": "1498600",
    "end": "1505480"
  },
  {
    "text": "basically just stopping listening it doesn't do anything to actually cancel the system and with a cold observable",
    "start": "1505480",
    "end": "1511960"
  },
  {
    "text": "like I've shown here it does actually send a signal back to the source to say they've stopped listening but this is an",
    "start": "1511960",
    "end": "1519039"
  },
  {
    "text": "implicit system for cancellation at best and that's not good enough we need to",
    "start": "1519039",
    "end": "1524600"
  },
  {
    "text": "raise the bar in terms of our design so as great as observable are and as much as I like observables I'm here to tell",
    "start": "1524600",
    "end": "1531679"
  },
  {
    "text": "you that observables are not enough we need to be thinking at a higher level of",
    "start": "1531679",
    "end": "1537240"
  },
  {
    "text": "observation starvation this is not about how hungry I am and when's it going to be lunch this is about system resources",
    "start": "1537240",
    "end": "1544679"
  },
  {
    "text": "okay system resources so this is a big problem whenever you have a concurrent system concurrent is a fancy way of",
    "start": "1544679",
    "end": "1551200"
  },
  {
    "text": "saying either parallel or asynchronous when you have a concurrent system many many things that are happening if one of",
    "start": "1551200",
    "end": "1557440"
  },
  {
    "text": "those things I either accidentally or intentionally start spinning really fast on system resources like the processor",
    "start": "1557440",
    "end": "1564279"
  },
  {
    "text": "it has the effect of starving out the rest of the concurrent processes from being able to do",
    "start": "1564279",
    "end": "1570000"
  },
  {
    "text": "anything you can probably imagine from that basic description that this is a huge problem that we want to avoid and",
    "start": "1570000",
    "end": "1576919"
  },
  {
    "text": "there's lots of research into the topic of starvation and because there's lots of research you would think that new",
    "start": "1576919",
    "end": "1582679"
  },
  {
    "text": "systems those that have come up within say the last couple of years you would think that those systems would",
    "start": "1582679",
    "end": "1588320"
  },
  {
    "text": "definitely not make themselves susceptible to starvation right because this has been known about for decades",
    "start": "1588320",
    "end": "1595120"
  },
  {
    "text": "that starvation is a big problem that we should avoid well I have news for you we shipped promises in JavaScript and then",
    "start": "1595120",
    "end": "1601440"
  },
  {
    "text": "we put the ay8 function around them and we said huh no big deal starvation is not that big of a problem I brought this",
    "start": "1601440",
    "end": "1607399"
  },
  {
    "text": "up on the spec list that it is far too easy to create a starvation scenario with the microtask Q of promises because",
    "start": "1607399",
    "end": "1614520"
  },
  {
    "text": "that time out that timer down there that's never going to run even though it's got zero on it it's never never going to run and the reason is because the",
    "start": "1614520",
    "end": "1621880"
  },
  {
    "text": "microtask Q is going to run aggressively and never let any of the rest of the system it's never going to yield back to",
    "start": "1621880",
    "end": "1627360"
  },
  {
    "text": "any of the rest of the system this is terrible design I love promises but this is completely ignorant design to say",
    "start": "1627360",
    "end": "1634919"
  },
  {
    "text": "well we don't care about starvation and when I brought it up on the specification list and I showed them actual code that leads you into a",
    "start": "1634919",
    "end": "1640520"
  },
  {
    "text": "starvation scenario you know what they said back to me well you're the first person to complain about it so it must",
    "start": "1640520",
    "end": "1645919"
  },
  {
    "text": "not be a problem I'm not lying this is ignorant we need to be thinking",
    "start": "1645919",
    "end": "1651520"
  },
  {
    "text": "about and planning for these things this is a great blog post by the way and a couple of my next points came from or",
    "start": "1651520",
    "end": "1657279"
  },
  {
    "text": "were solidified or more concrete because of this blog post and it's not even about JavaScript I was thrilled to find",
    "start": "1657279",
    "end": "1662320"
  },
  {
    "text": "a blog post that was actually about a different language this about python but it's about cancellation it's a fantastic",
    "start": "1662320",
    "end": "1667720"
  },
  {
    "text": "blog post so go and read more uh for details on this particular topic and in",
    "start": "1667720",
    "end": "1672880"
  },
  {
    "text": "this article it makes this fantastic point about the difference it was an idea that I had but I couldn't put words to it now I can articulate for you the",
    "start": "1672880",
    "end": "1680000"
  },
  {
    "text": "reason why I say it's at the wrong level of abstraction to think about cancellation as an event because",
    "start": "1680000",
    "end": "1687799"
  },
  {
    "text": "in circuit design we have this idea of edge triggered versus level triggered Edge triggered being me meaning whatever",
    "start": "1687799",
    "end": "1694200"
  },
  {
    "text": "the circuit goes from 0er to one or from one back to zero we observe that that has occurred and then we do something with the system that's Edge",
    "start": "1694200",
    "end": "1700760"
  },
  {
    "text": "triggered but level triggered is to Simply say whatever level that we are currently at are we at one or are we",
    "start": "1700760",
    "end": "1706159"
  },
  {
    "text": "currently at zero that's the state of the system that we know that we're in so in other words Edge triggered versus",
    "start": "1706159",
    "end": "1711320"
  },
  {
    "text": "level triggered is essentially event versus State and the point that's main here is that events can be",
    "start": "1711320",
    "end": "1717360"
  },
  {
    "text": "missed so if I this a very crude way of illustrating it it's the difference between listening for a cancel event and",
    "start": "1717360",
    "end": "1723840"
  },
  {
    "text": "looking at a cancellation State events can be missed but state is not state is always",
    "start": "1723840",
    "end": "1732120"
  },
  {
    "text": "present within our applications and if we are intentionally modeling it we can transition correctly an event compat",
    "start": "1732120",
    "end": "1738159"
  },
  {
    "text": "position can be quite complex but straight transitions are often very straightforward at least if you're",
    "start": "1738159",
    "end": "1743320"
  },
  {
    "text": "intentionally doing it another point that this art article makes which enforces the point that",
    "start": "1743320",
    "end": "1750720"
  },
  {
    "text": "we're dealing with the long wrong layers of abstraction when we talk about cancellation it's this idea of timeouts",
    "start": "1750720",
    "end": "1755960"
  },
  {
    "text": "versus deadlines this operation here I'm going to fire off to ask for some tweets from this weird guy named GFI and I want",
    "start": "1755960",
    "end": "1763120"
  },
  {
    "text": "to know what whatever the newest tweets from getify are so this looks like a pretty reasonable system and you notice",
    "start": "1763120",
    "end": "1769080"
  },
  {
    "text": "over here that I've got a timeout of 3 seconds I've said listen wait as at most",
    "start": "1769080",
    "end": "1774399"
  },
  {
    "text": "3 seconds to get any new tweets that he may have because I care but not that much just a little bit okay it seems",
    "start": "1774399",
    "end": "1780440"
  },
  {
    "text": "reasonable to use a timeout like that if we've got a fetch new tweets API that knows about timeouts just simply pass in",
    "start": "1780440",
    "end": "1786240"
  },
  {
    "text": "a number like 3,000 and everything should be fine right well not quite so much because if you look at the",
    "start": "1786240",
    "end": "1792559"
  },
  {
    "text": "implementation of that function you'll notice that it actually calls several other functions it calls the fetch user",
    "start": "1792559",
    "end": "1798679"
  },
  {
    "text": "and then it calls the fetch timeline and you'll notice importantly that it takes that 3,000 and it simply passes it along",
    "start": "1798679",
    "end": "1805320"
  },
  {
    "text": "to all of its constituent children so now instead of us thinking that the high",
    "start": "1805320",
    "end": "1810399"
  },
  {
    "text": "level operation is going to take 3 seconds this one actually might take six seconds right but actually it's much",
    "start": "1810399",
    "end": "1816880"
  },
  {
    "text": "worse than that we actually can't predict how long this system will take because we have no idea who they call",
    "start": "1816880",
    "end": "1822200"
  },
  {
    "text": "and who they call and who they call and if they're passing that wrong abstraction around it's actually could be indistinguishable from",
    "start": "1822200",
    "end": "1829000"
  },
  {
    "text": "Infinity so we thought we were building a good system but we built it at the wrong layer of",
    "start": "1829000",
    "end": "1834440"
  },
  {
    "text": "abstraction instead we should build a deadline like a timestamp in the future",
    "start": "1834440",
    "end": "1839840"
  },
  {
    "text": "that everybody can agree on I have to finish by that point it doesn't matter how long any other parts take we have to",
    "start": "1839840",
    "end": "1846000"
  },
  {
    "text": "be completely done by this point so I set up a simple little function called deadline here to calculate an absolute",
    "start": "1846000",
    "end": "1852360"
  },
  {
    "text": "time stamp 3 seconds in the future and I passed that deadline along and now my fetch new tweets when passes that",
    "start": "1852360",
    "end": "1858600"
  },
  {
    "text": "deadline along this one signal if you will this one state that we can observe",
    "start": "1858600",
    "end": "1863840"
  },
  {
    "text": "that we get into is that the timer has passed that particular time stamp so we don't have any sort of leveling problem",
    "start": "1863840",
    "end": "1871120"
  },
  {
    "text": "here we don't have any leveling of abstraction problem here quick note on serial versus",
    "start": "1871120",
    "end": "1877360"
  },
  {
    "text": "concurrent cancellation serial is just a fancy way of saying doing one thing and then the next thing and then the next",
    "start": "1877360",
    "end": "1882960"
  },
  {
    "text": "thing in other words B has to wait for a and concurrent is a bunch of things are going to happen in parallel right",
    "start": "1882960",
    "end": "1889159"
  },
  {
    "text": "they're going to happen around about the same time over the same period of time so if we're doing serial we're going to use javascript's fancy new asyn aight",
    "start": "1889159",
    "end": "1896039"
  },
  {
    "text": "syntax that everybody's so much in love with and the characteristic nature of Serial asynchrony is when you see all of",
    "start": "1896039",
    "end": "1902200"
  },
  {
    "text": "these awaits one right after the other meaning that step two is waiting for step one and step three is waiting for",
    "start": "1902200",
    "end": "1908039"
  },
  {
    "text": "step two sometimes that's exactly what you want if step two is dependent on step one then you absolutely need to",
    "start": "1908039",
    "end": "1913080"
  },
  {
    "text": "make it serial but what you'll notice here is that to make this um",
    "start": "1913080",
    "end": "1918360"
  },
  {
    "text": "cancelable I've had to do a race abstraction at each one of those steps",
    "start": "1918360",
    "end": "1923559"
  },
  {
    "text": "I've had to set up a two long timeout which by the way even though this is now a promise instead of a deadline it is",
    "start": "1923559",
    "end": "1929799"
  },
  {
    "text": "actually at the right level of abstraction here because that promise will expire after 3 seconds no matter",
    "start": "1929799",
    "end": "1935440"
  },
  {
    "text": "who how many times it's passed around no matter what level it's entirely absolute to that essentially to that time stamp",
    "start": "1935440",
    "end": "1941880"
  },
  {
    "text": "it will transition into a predictable state after 3 seconds and that state is something that I can observe no matter",
    "start": "1941880",
    "end": "1948080"
  },
  {
    "text": "what level of the abstraction that I'm at so I have this to Long promise that I'm listening to and I tell all of those",
    "start": "1948080",
    "end": "1954080"
  },
  {
    "text": "tasks hey you have this much of time I set up a promise. race you have this much time to finish and if you don't",
    "start": "1954080",
    "end": "1959960"
  },
  {
    "text": "finish within that time we're going to give up and move on so it seems reasonable right except uh oh and and so",
    "start": "1959960",
    "end": "1967159"
  },
  {
    "text": "I forgot about concurrency so concurrency is the same kind of idea we're going to set up a race but rather than setting up a race with each of the",
    "start": "1967159",
    "end": "1973639"
  },
  {
    "text": "tasks we're going to pass promise.all as the operation so a promised all is going to listen for all of these promises in",
    "start": "1973639",
    "end": "1980600"
  },
  {
    "text": "parallel concurrently and if all of them finish within the a lot of time great but if any one of them has made it take",
    "start": "1980600",
    "end": "1986159"
  },
  {
    "text": "too long then we give up on the whole thing the whole shebang and we cancel out so this all seems pretty reasonable",
    "start": "1986159",
    "end": "1993000"
  },
  {
    "text": "except what you missed is that my little utility here is fatally flawed what you missed is that my utility is fatally",
    "start": "1993000",
    "end": "1999600"
  },
  {
    "text": "flawed because it's only stopping listening to the operation it's not actually canceling the",
    "start": "1999600",
    "end": "2005960"
  },
  {
    "text": "operation stopping listening to it is not the same thing as cancellation that thing is still going",
    "start": "2005960",
    "end": "2011039"
  },
  {
    "text": "to keep running forever and ever and potentially taking up system resources starving out the system this is what I",
    "start": "2011039",
    "end": "2016600"
  },
  {
    "text": "would call shallow cancellation at best because we're not passing along that signal to any of the further children so",
    "start": "2016600",
    "end": "2022559"
  },
  {
    "text": "that they know hey we've been canceled and we can stop so to build a deeper form of cancellation I need to actually",
    "start": "2022559",
    "end": "2028679"
  },
  {
    "text": "pass that promise that represents the cancellation State not the event but the state I need to pass that state along so",
    "start": "2028679",
    "end": "2035159"
  },
  {
    "text": "that the rest of the system can see it that requires of course that every step along the way no matter how deep you go",
    "start": "2035159",
    "end": "2041840"
  },
  {
    "text": "that they're all cancellation aware and that's my whole point we have to design the entire system holistically to think",
    "start": "2041840",
    "end": "2047399"
  },
  {
    "text": "about cancellation at any point if we get a weak Link in the system that doesn't know about cancellation all bets",
    "start": "2047399",
    "end": "2053679"
  },
  {
    "text": "are off it's not actually cancellation I want you to imagine a",
    "start": "2053679",
    "end": "2058720"
  },
  {
    "text": "kind of race in the Olympics where it's not just that everybody's trying to race and get first second third place or whatever get a bronze medal but what if",
    "start": "2058720",
    "end": "2065839"
  },
  {
    "text": "we had a race where the first winner across the line wins they get the gold medal and then immediately after they",
    "start": "2065839",
    "end": "2072158"
  },
  {
    "text": "cross the line referees run out and start chasing and tackling all the other Runners and don't even let them cross the finish line I'd call this an exor",
    "start": "2072159",
    "end": "2079720"
  },
  {
    "text": "race that would be a really fun Olympic event to watch an exor race either A or",
    "start": "2079720",
    "end": "2085000"
  },
  {
    "text": "B but absolutely definitely not both A and B okay what this happens in our",
    "start": "2085000",
    "end": "2091358"
  },
  {
    "text": "systems we sometimes will ask to load two a thing from two different CDN for example and I don't care which one it",
    "start": "2091359",
    "end": "2097359"
  },
  {
    "text": "comes from from but I definitely don't want two copies of it I don't want to waste all the system resources and memory and network bandwidth and all",
    "start": "2097359",
    "end": "2103240"
  },
  {
    "text": "that so as soon as the first one finishes make sure to stop the other one sort of create a binary pairing between",
    "start": "2103240",
    "end": "2109040"
  },
  {
    "text": "the two we can model this in programming here's one way of modeling it with promises and I know this is real intricate but I want to focus down on",
    "start": "2109040",
    "end": "2115760"
  },
  {
    "text": "the bottom couple of lines lines 15 and 16 here I have the two the two tasks so",
    "start": "2115760",
    "end": "2121480"
  },
  {
    "text": "task one is listening to promise one but task one's promise the thing that it's",
    "start": "2121480",
    "end": "2126880"
  },
  {
    "text": "waiting on to see if it needs to stop or not is actually cancelled by the completion of task two so they are",
    "start": "2126880",
    "end": "2133320"
  },
  {
    "text": "cross- Lin task two cancels task one and task one cancels task two it works but",
    "start": "2133320",
    "end": "2139520"
  },
  {
    "text": "my God this is ugly and awkward that's because we don't have the systems that are designed to handle",
    "start": "2139520",
    "end": "2145440"
  },
  {
    "start": "2141000",
    "end": "2296000"
  },
  {
    "text": "these sorts of actual scenarios we wait until we run across a project a product",
    "start": "2145440",
    "end": "2150960"
  },
  {
    "text": "manager telling us we have to do this and then we try to retrofit our systems to handle it this is a terrible idea",
    "start": "2150960",
    "end": "2158400"
  },
  {
    "text": "cancellation tokens are actually a much much better way of at least stepping us towards a better solution they are in a",
    "start": "2158400",
    "end": "2164960"
  },
  {
    "text": "in a sense sort of talking about it at the proper level of abstraction or at least in the right direction because a",
    "start": "2164960",
    "end": "2170480"
  },
  {
    "text": "cancellation token is basically an external sort of State signal that anybody can agree that we can all Listen",
    "start": "2170480",
    "end": "2176640"
  },
  {
    "text": "to It's similar to a promise but it doesn't have all the sort of weird concurrency questions about promises and",
    "start": "2176640",
    "end": "2182359"
  },
  {
    "text": "the awkwardness of API a cancellation token wasn't even invented in JavaScript it was invented in other great languages",
    "start": "2182359",
    "end": "2188079"
  },
  {
    "text": "and we just recently adopted it in JavaScript it's a great idea and we ought to just internationally standardize on cancellation tokens it's",
    "start": "2188079",
    "end": "2195960"
  },
  {
    "text": "the first building block that we can build proper abstractions around cancellation on so here's how a cancellation token works you construct",
    "start": "2195960",
    "end": "2202920"
  },
  {
    "text": "this thing called an abort controller and then you can listen to an event on its signal notice controller. signal on",
    "start": "2202920",
    "end": "2209680"
  },
  {
    "text": "line 7 I'm listening for an event that tells me that somebody has said this cancellation token has transitioned into",
    "start": "2209680",
    "end": "2216400"
  },
  {
    "text": "the state that has been canceled that's the event side of things but it is also a thing that has a state I can look at a",
    "start": "2216400",
    "end": "2222640"
  },
  {
    "text": "cancellation token signal and see if it is currently in the canceled state or not so it's actually both it serves both",
    "start": "2222640",
    "end": "2229000"
  },
  {
    "text": "needs if you really want to respond to things event-wise instead of polling it's got an event mechanism interface",
    "start": "2229000",
    "end": "2234440"
  },
  {
    "text": "but it also has a state interface on it and the state interface actually turns out to be a whole lot better so at some",
    "start": "2234440",
    "end": "2239680"
  },
  {
    "text": "point you call the DOA boort like we do down on line 10 and it transitions that token into that predictable canceled",
    "start": "2239680",
    "end": "2245920"
  },
  {
    "text": "State the rest of the system Sy then if properly designed can respond correctly to that new state okay so cancellation",
    "start": "2245920",
    "end": "2253960"
  },
  {
    "text": "tokens are not the Silver Bullet but they're much more they're much more solid than anything that we've built up",
    "start": "2253960",
    "end": "2259040"
  },
  {
    "text": "to this point in my opinion we need to be transitioning our way of thinking into cancellations as these predictable",
    "start": "2259040",
    "end": "2266880"
  },
  {
    "text": "States Good News by the way the fetch thing that we talked about before where it wasn't cancelable they decided to",
    "start": "2266880",
    "end": "2273760"
  },
  {
    "text": "make it cancelable and guess what they chose cancellation tokens so this is already becoming a standard",
    "start": "2273760",
    "end": "2279640"
  },
  {
    "text": "that's a big deal that had happened in the web platform standard that they decided among all the possible ways to",
    "start": "2279640",
    "end": "2284880"
  },
  {
    "text": "do cancellation cancellation tokens are the right way to do it that's a huge deal and we should follow their",
    "start": "2284880",
    "end": "2290680"
  },
  {
    "text": "lead we should start standardizing on that across all of our systems not just",
    "start": "2290680",
    "end": "2296160"
  },
  {
    "start": "2296000",
    "end": "2389000"
  },
  {
    "text": "JavaScript all right now async functions seem to be the solution to all of our asynchronous wo but as I've been",
    "start": "2296160",
    "end": "2302319"
  },
  {
    "text": "pointing out asynchronous functions have these weaknesses because they weren't designed with these kinds of questions",
    "start": "2302319",
    "end": "2308319"
  },
  {
    "text": "in mind actually the questions were in mind I brought up the point that async functions aren't cancelable years before",
    "start": "2308319",
    "end": "2314200"
  },
  {
    "text": "they shipped and they didn't listen to me and then we shipped it and they don't have cancellation and surprise it's a",
    "start": "2314200",
    "end": "2320760"
  },
  {
    "text": "complexity in our systems now it's an unfortunate unnecessary complexity you see it's so nice to like show a like",
    "start": "2320760",
    "end": "2327520"
  },
  {
    "text": "tutorial where you're like Hey listen I can just like a wait on these different promises and everything's great it always looks good on the happy path if",
    "start": "2327520",
    "end": "2334480"
  },
  {
    "text": "something didn't look good on the happy path they'd never ship it how many of you feel like you spend all",
    "start": "2334480",
    "end": "2339520"
  },
  {
    "text": "of your time on the happy path not me we didn't think about the problems that would happen if we have this black",
    "start": "2339520",
    "end": "2345680"
  },
  {
    "text": "box it's just a fire and forget we're putting all of our asynchron inside of these black boxes that is complexity",
    "start": "2345680",
    "end": "2352599"
  },
  {
    "text": "Randomness and uncertainty so actually to handle cancellation in these things you end up",
    "start": "2352599",
    "end": "2358000"
  },
  {
    "text": "having to put a promise. race at every single await statement are you serious I have to do",
    "start": "2358000",
    "end": "2364440"
  },
  {
    "text": "that and and also I have to pass along the promised timeout that timeout prom PR to all of the other levels this is",
    "start": "2364440",
    "end": "2370599"
  },
  {
    "text": "crazy right like this is so intrusive to our design of our code this is not what they showed on the readme to convince me",
    "start": "2370599",
    "end": "2377240"
  },
  {
    "text": "that I should switch to async functions but this is what I need to have a system that's actually going to behave more",
    "start": "2377240",
    "end": "2383119"
  },
  {
    "text": "predictably it's a poorly designed system that's why it's difficult to",
    "start": "2383119",
    "end": "2388839"
  },
  {
    "text": "cancel so I started trying to think about what would it look like if we could address some of these problems and",
    "start": "2388839",
    "end": "2394359"
  },
  {
    "start": "2389000",
    "end": "2511000"
  },
  {
    "text": "just as a quick little note this little library that I wrote is not the solution but I'm hoping that it's a step in the",
    "start": "2394359",
    "end": "2399680"
  },
  {
    "text": "right direction what I said was we need async functions but they need to be cancelable so I built a little Library",
    "start": "2399680",
    "end": "2405680"
  },
  {
    "text": "called calf and it's going to use another mechanism of JavaScript not the async function but the generator to",
    "start": "2405680",
    "end": "2411560"
  },
  {
    "text": "emulate the idea of an asynchronous function but with the way for the external signal to come in and say stop what you're doing right in your tracks",
    "start": "2411560",
    "end": "2418760"
  },
  {
    "text": "that's the first problem that we need to solve is to not have these black boxes that are not externally cancelable so",
    "start": "2418760",
    "end": "2424200"
  },
  {
    "text": "here's how calf works you take a regular generator function and and you wrap it in calf a generator by the way is a one",
    "start": "2424200",
    "end": "2429960"
  },
  {
    "text": "to one syntactic correspondence to an async function it's just it uses yield instead of a weight it uses a star",
    "start": "2429960",
    "end": "2435480"
  },
  {
    "text": "instead of the async word but otherwise under the covers they're going to behave the same the difference is that a",
    "start": "2435480",
    "end": "2441480"
  },
  {
    "text": "generator can be stopped and an async function can't so we're using these uh",
    "start": "2441480",
    "end": "2446839"
  },
  {
    "text": "mimicked or these faked async functions to provide cancelability to our async workflows you'll notice now that I don't",
    "start": "2446839",
    "end": "2452680"
  },
  {
    "text": "need any promise. races at all these yield statements because that's implied under the C s through the way calf works",
    "start": "2452680",
    "end": "2458880"
  },
  {
    "text": "it's automatically going to do a promise. r against the cancellation token I'm using cancellation tokens here",
    "start": "2458880",
    "end": "2465079"
  },
  {
    "text": "why because we should be standardizing on cancellation tokens okay so CF is",
    "start": "2465079",
    "end": "2470280"
  },
  {
    "text": "maybe a little bit of a step forward it's a small little tool that I've been using now for about six months other people have picked up on it a production",
    "start": "2470280",
    "end": "2476880"
  },
  {
    "text": "we're moving I hope little by little in that direction and by the way because it uses",
    "start": "2476880",
    "end": "2483400"
  },
  {
    "text": "cancellation tokens you can interchange those tokens with cancelable fetch",
    "start": "2483400",
    "end": "2488720"
  },
  {
    "text": "but I'm not here to sell you on calf because there is still quite a lot of tediousness about it it is still",
    "start": "2488720",
    "end": "2493920"
  },
  {
    "text": "frustrating that I have to pass along the signal to all of those different levels because essentially we're still",
    "start": "2493920",
    "end": "2499599"
  },
  {
    "text": "solving the problem at the wrong layer of abstraction we're still thinking about these as individual operations",
    "start": "2499599",
    "end": "2505119"
  },
  {
    "text": "instead of thinking about a collection of states that need to be canceled that's actually ultimately where we need",
    "start": "2505119",
    "end": "2510440"
  },
  {
    "text": "to be solving this so I'm going to leave you in our in our closing moments I'm going to talk to you about this idea of cancellation zones and this is a super",
    "start": "2510440",
    "end": "2517280"
  },
  {
    "start": "2511000",
    "end": "2609000"
  },
  {
    "text": "rough idea this doesn't actually exist yet but I'm trying to think forward if we want to solve this at the right level",
    "start": "2517280",
    "end": "2522800"
  },
  {
    "text": "of abstraction what does that look like well it looks like a whole set of states that are all aware of the idea that they",
    "start": "2522800",
    "end": "2529240"
  },
  {
    "text": "could be cancelable and maybe even rollable we collect all of these states",
    "start": "2529240",
    "end": "2535560"
  },
  {
    "text": "together into what I call a cancellation zone so here are these different operations I've got like Maine and something and other because I'm super",
    "start": "2535560",
    "end": "2541400"
  },
  {
    "text": "creative with my naming for these slides but these three different pieces of my system that all kind of talk to each",
    "start": "2541400",
    "end": "2546839"
  },
  {
    "text": "other I'm going to collect all of them together into a particular instance of a cancellation Zone pass them all in and",
    "start": "2546839",
    "end": "2552839"
  },
  {
    "text": "get back these wrapped versions of these things that are aware of cancellation semantics similar to what calf was",
    "start": "2552839",
    "end": "2559839"
  },
  {
    "text": "doing so now I can call and and by the way I can set up the cancellation signal to either be time based a deadline or a",
    "start": "2559839",
    "end": "2567160"
  },
  {
    "text": "timeout or I could pass in a cancellation token right so either one of those sorts or both of those abstractions would be useful here but",
    "start": "2567160",
    "end": "2573520"
  },
  {
    "text": "I'm essentially going to say from the outside this entire zone is either canceled or not rather than trying to",
    "start": "2573520",
    "end": "2579319"
  },
  {
    "text": "think about it at the wrong level in terms of Step cancellation and now when I call this function it automatically",
    "start": "2579319",
    "end": "2585480"
  },
  {
    "text": "propagates the signal along instead of me having to intrusively remember and forget to pass a signal and now",
    "start": "2585480",
    "end": "2590839"
  },
  {
    "text": "something doesn't cancel right it automatically makes sure to wire all these things up so that they all know that they're participating in the zone",
    "start": "2590839",
    "end": "2597319"
  },
  {
    "text": "and by the way we could do all kinds of great stuff like having asynchronous call Stacks and everything if we collect everything into a zone that knows about",
    "start": "2597319",
    "end": "2604839"
  },
  {
    "text": "it even cancellations zones are not perfect though and by the way this is",
    "start": "2604839",
    "end": "2610200"
  },
  {
    "text": "not just about convenience because you remember at the very beginning of my talk I mentioned the idea of undo we",
    "start": "2610200",
    "end": "2615920"
  },
  {
    "text": "haven't even talked about how you might solve undo to solve undo in other words to be able to take some arbitrary state",
    "start": "2615920",
    "end": "2621960"
  },
  {
    "text": "that you've arrived at and then say I want to walk back my state several steps you actually need a whole different way",
    "start": "2621960",
    "end": "2627680"
  },
  {
    "text": "of modeling State based upon immutability talk about intrusiveness right well I think maybe cancellation",
    "start": "2627680",
    "end": "2634280"
  },
  {
    "text": "zones leave us lead us towards a way of modeling the entire State transition between all of those steps in those",
    "start": "2634280",
    "end": "2640480"
  },
  {
    "text": "immutable ways so that a cancellation Zone could trivially walk back the state of our",
    "start": "2640480",
    "end": "2646079"
  },
  {
    "text": "system so what's missing right now in terms of anything that we have is atomicity how it's easy in databases you",
    "start": "2646079",
    "end": "2652240"
  },
  {
    "text": "could have a transaction and just roll back the transaction but it's really hard in our applications and it",
    "start": "2652240",
    "end": "2658400"
  },
  {
    "text": "shouldn't be that hard should be something that we design from the beginning that we plann",
    "start": "2658400",
    "end": "2663520"
  },
  {
    "text": "for so let's talk about those abstraction levels I've said it over over and over again let's just review",
    "start": "2663520",
    "end": "2668720"
  },
  {
    "text": "those abstraction levels as I begin to wind away wind up we started by admitting whether it's painful or not",
    "start": "2668720",
    "end": "2676200"
  },
  {
    "text": "that cancellation is too often thought of as this unexpected exception and then we said well actually you could model it",
    "start": "2676200",
    "end": "2682280"
  },
  {
    "text": "through events but events have a whole bunch of problems namely that they can be missed and that they don't compose well so then we said well let's now",
    "start": "2682280",
    "end": "2688400"
  },
  {
    "text": "actually talk about it as a state that's important and a huge benefit and if you did nothing else from this talk moving",
    "start": "2688400",
    "end": "2694119"
  },
  {
    "text": "from event-based cancellation to State based cancellation would be a huge huge Improvement but even that's not enough",
    "start": "2694119",
    "end": "2699520"
  },
  {
    "text": "the final level of abstraction that we need to move to is a collection of states need to think about cancelling a",
    "start": "2699520",
    "end": "2705480"
  },
  {
    "text": "whole collection of States within our application so in summary if it's async",
    "start": "2705480",
    "end": "2712160"
  },
  {
    "text": "it's going to get canceled whether you handle it or not it's going to happen",
    "start": "2712160",
    "end": "2717880"
  },
  {
    "text": "and cancellation should not be some kind of unexpected thing it should be entirely predictable un unexpected",
    "start": "2717880",
    "end": "2725359"
  },
  {
    "text": "cancellation is what leads to the uncertainty in our systems and that uncertainty is what spreads not just",
    "start": "2725359",
    "end": "2732119"
  },
  {
    "text": "complexity but the unnecessary flavor of complexity this is",
    "start": "2732119",
    "end": "2737280"
  },
  {
    "text": "a choice that we make through our laziness through our choice not to think about these things we shoot ourselves in",
    "start": "2737280",
    "end": "2742839"
  },
  {
    "text": "the foot and create unnecessary complexity and the final takeaway here is that that complexity is what cancels",
    "start": "2742839",
    "end": "2749240"
  },
  {
    "text": "out all of our software momentum and quality I want us to be thinking about these things and I want us to work",
    "start": "2749240",
    "end": "2754720"
  },
  {
    "text": "together to solve them I don't want a JavaScript solution I don't want a python solution I want a",
    "start": "2754720",
    "end": "2759920"
  },
  {
    "text": "programming solution to handling cancellation as a first class citizen I hope I've convinced you as well that",
    "start": "2759920",
    "end": "2766160"
  },
  {
    "text": "that's important thanks very much for your time I appreciate it",
    "start": "2766160",
    "end": "2771400"
  }
]