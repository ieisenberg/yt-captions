[
  {
    "start": "0",
    "end": "10000"
  },
  {
    "text": "so Chrome uh you might have heard of it you might be using it already if you're bored or my talk it's a it's a web",
    "start": "2919",
    "end": "8960"
  },
  {
    "text": "browser from Google it was first released in 2008 which means it's now 5 years old uh doesn't feel like that long",
    "start": "8960",
    "end": "16720"
  },
  {
    "text": "ago but uh five years is a starting to be mature web browser the goal of the",
    "start": "16720",
    "end": "21880"
  },
  {
    "text": "whole thing was to push the web forward so the idea is um that the web means a lot to Google right and uh we think it's",
    "start": "21880",
    "end": "29080"
  },
  {
    "text": "awesome and uh I guess we figured we could uh make it better by providing a really good web browser um a long time",
    "start": "29080",
    "end": "37399"
  },
  {
    "text": "ago JavaScript used to be slow for instance and Google Chrome runs JavaScript really fast uh and sort of by",
    "start": "37399",
    "end": "44800"
  },
  {
    "text": "releasing this this Chrome browser we're pushing we're not only providing a really good browser but also pushing all",
    "start": "44800",
    "end": "50399"
  },
  {
    "text": "the other vendors to provide good browsers uh so Chrome today has more than 750 million active users which is",
    "start": "50399",
    "end": "57559"
  },
  {
    "text": "insane amount of users right uh and that's not only not only that but all",
    "start": "57559",
    "end": "62760"
  },
  {
    "text": "the other browsers have become infinitely better as well so this is a huge benefit for the web community and for the for the World At Large if you",
    "start": "62760",
    "end": "70080"
  },
  {
    "text": "will it started out on Windows uh then it covered the other desktop operating",
    "start": "70080",
    "end": "75680"
  },
  {
    "text": "systems Mac and Linux and more recently it's also a available on mobile so Android and iOS and it's mostly open",
    "start": "75680",
    "end": "82280"
  },
  {
    "text": "source uh I'll try to explain how how how that works so this is the confusing",
    "start": "82280",
    "end": "87960"
  },
  {
    "start": "87000",
    "end": "156000"
  },
  {
    "text": "part I'll probably be mixing these two terms terms uh freely as I give the talk there chromium and there's Chrome what",
    "start": "87960",
    "end": "94360"
  },
  {
    "text": "do these things mean so Chrome is the web browser you all uh know and use right and chromium is the open source",
    "start": "94360",
    "end": "100799"
  },
  {
    "text": "project that this is based on so that's where the code lives so we take chromium on the left and then we add some stuff",
    "start": "100799",
    "end": "107240"
  },
  {
    "text": "and then we call that Chrome so most obviously we add The Branding right we add the fancy colors the red and green",
    "start": "107240",
    "end": "113159"
  },
  {
    "text": "and yellow which all display beautifully on this presentation uh thanks to the HDMI cable and uh and we add the name",
    "start": "113159",
    "end": "120159"
  },
  {
    "text": "right you can't have your own Google Chrome unfortunately uh we also do some other stuff we like we actually have",
    "start": "120159",
    "end": "126320"
  },
  {
    "text": "software engineering process going into this we do a quality assurance we collect crash reports if you op into it",
    "start": "126320",
    "end": "132720"
  },
  {
    "text": "uh we have this whole system of releasing updates like you can subscribe to the stable or the the beta or the dev",
    "start": "132720",
    "end": "138599"
  },
  {
    "text": "or even the canary Channel if you're feeling dangerous uh then we also add some proprietary code like we have PDF",
    "start": "138599",
    "end": "145640"
  },
  {
    "text": "and Flash and we bundle that in a sandboxed way but we don't have the source uh so we can't it's not the ours",
    "start": "145640",
    "end": "151640"
  },
  {
    "text": "to give right it's not open source and there's some codex I",
    "start": "151640",
    "end": "156360"
  },
  {
    "start": "156000",
    "end": "216000"
  },
  {
    "text": "think and this is the code so this is this is just in the chromium repository",
    "start": "157000",
    "end": "162800"
  },
  {
    "text": "and this is a lot of code so I showed this to one of my colleagues and he he was surprised because he thought he knew",
    "start": "162800",
    "end": "167879"
  },
  {
    "text": "it all and then when he saw this he figured no I I I probably don't anymore right may maybe that was back in 2008",
    "start": "167879",
    "end": "173640"
  },
  {
    "text": "when it started uh so Chrome looks like this pretty simple piece of software right it's just a a window with a web",
    "start": "173640",
    "end": "180280"
  },
  {
    "text": "page in a square and there's like the back button and the address bar how hard can it be uh well it turns out there's a",
    "start": "180280",
    "end": "185799"
  },
  {
    "text": "lot of work going into that and this is our code so I should also point out that not all of this is shipped right a lot of",
    "start": "185799",
    "end": "192040"
  },
  {
    "text": "this is testing code which still means we have to build it and maintain it and run it and so on uh there might also be",
    "start": "192040",
    "end": "198280"
  },
  {
    "text": "third party code in there like there's a spike in 2009 that was someone adding something third party and getting it",
    "start": "198280",
    "end": "203640"
  },
  {
    "text": "kicked out there's also a big spike in 2010 uh that was also a third party Library Like A Million Lives worth that",
    "start": "203640",
    "end": "209959"
  },
  {
    "text": "was removed more recently uh but there's still a lot of code to to keep track of and",
    "start": "209959",
    "end": "215200"
  },
  {
    "text": "maintain and speaking of third party code just to add to the awesomeness we have some third party code as well that",
    "start": "215200",
    "end": "221519"
  },
  {
    "start": "216000",
    "end": "274000"
  },
  {
    "text": "we sort of pull in from from different third party repositories the most obvious one is Blink which used to be uh",
    "start": "221519",
    "end": "227120"
  },
  {
    "text": "called webkit This is a this is our Fork of webkit and that's the that's the rendering engine that actually knows how",
    "start": "227120",
    "end": "233920"
  },
  {
    "text": "how that's the one that actually knows about HTML and CSS sort of U interprets",
    "start": "233920",
    "end": "239319"
  },
  {
    "text": "that in the Dees how to draw it on the screen there's also V8 which you might have heard about because it was invented",
    "start": "239319",
    "end": "244599"
  },
  {
    "text": "here in orus that's the JavaScript engine that's the one that knows how to how to run JavaScript and then there's a",
    "start": "244599",
    "end": "251360"
  },
  {
    "text": "long list of other stuff uh some of this is developed by Google some of this is developed by Third parties we use it all",
    "start": "251360",
    "end": "257440"
  },
  {
    "text": "I counted 5 million lines when I did this two years ago so chances is that it has grown I should also say that this is",
    "start": "257440",
    "end": "264400"
  },
  {
    "text": "just a c C++ and Objective C code we now have some Java code as well uh for the Android port but we don't build that",
    "start": "264400",
    "end": "270639"
  },
  {
    "text": "with clang so that's uh I didn't count that this is also a pretty cool graph",
    "start": "270639",
    "end": "277440"
  },
  {
    "start": "274000",
    "end": "315000"
  },
  {
    "text": "like you can see that the project has grown this is counting the number of unique committers to chromium per uh per",
    "start": "277440",
    "end": "283600"
  },
  {
    "text": "month since the start and you can see that uh in in the beginning they could probably fit in one room but today it's",
    "start": "283600",
    "end": "290520"
  },
  {
    "text": "this massive like spread around the globe people committing Around the Clock hacking way sort of operation which",
    "start": "290520",
    "end": "296639"
  },
  {
    "text": "feels awesome to me it's like we can really build stuff but it's it's also really scary like we can really Break Stuff uh really really fast so so this",
    "start": "296639",
    "end": "304400"
  },
  {
    "text": "again says something about the complexity of the project and that there's a there a good need for for good",
    "start": "304400",
    "end": "310240"
  },
  {
    "text": "software tools there so that was Chrome chromium uh now",
    "start": "310240",
    "end": "315400"
  },
  {
    "start": "315000",
    "end": "405000"
  },
  {
    "text": "to the clang compiler so clang is a new new compiler it's an upand cominging C++ compiler it does all the C family",
    "start": "315400",
    "end": "321680"
  },
  {
    "text": "languages actually it does c Objective C objective C++ I think it does open CL and maybe some Cuda stuff as well and",
    "start": "321680",
    "end": "329440"
  },
  {
    "text": "being uh there aren't that many new C++ compilers this is probably the newest",
    "start": "329440",
    "end": "334800"
  },
  {
    "text": "one this is probably like the only C++ compiler that was born in this new millennium so it's really new and if you",
    "start": "334800",
    "end": "340840"
  },
  {
    "text": "you like compilers that's enough to get you excited um it's part of something that's called the llvm project which is",
    "start": "340840",
    "end": "346840"
  },
  {
    "text": "this open source project for building compiler stuff uh it can do everything from uh understanding C++ to generating",
    "start": "346840",
    "end": "354560"
  },
  {
    "text": "ones and zeros on on your hard drive and optimizing them and analyzing and and so on lvm used to be an abbreviation of",
    "start": "354560",
    "end": "361440"
  },
  {
    "text": "something but today it's really just four random letters that's the official explanation so clang was announced 2007",
    "start": "361440",
    "end": "369080"
  },
  {
    "text": "by Apple and since then uh it's been uh worked on pretty intensely and since",
    "start": "369080",
    "end": "374800"
  },
  {
    "text": "2010 or around about 2010 we call it the production quality compiler it's open source uh it's BSD sty style license and",
    "start": "374800",
    "end": "381880"
  },
  {
    "text": "it's designed to be GCC compatible which means that it sort of understands the same command line options that GCC does",
    "start": "381880",
    "end": "388479"
  },
  {
    "text": "and it's report some of the same language extensions as well uh which means that if you have a big software",
    "start": "388479",
    "end": "394919"
  },
  {
    "text": "project that used to build with GCC such as chromium then the idea is that it should be simple to to drop in clang as",
    "start": "394919",
    "end": "401400"
  },
  {
    "text": "a replacement and it should all just work almost so we've been using clang in",
    "start": "401400",
    "end": "408039"
  },
  {
    "start": "405000",
    "end": "466000"
  },
  {
    "text": "chromium a little bit or trying to since 2010 which is around the time that I joined I was asked by two guys in",
    "start": "408039",
    "end": "414880"
  },
  {
    "text": "California if I wanted to help them out trying to compile chromium with this new compiler called Clank",
    "start": "414880",
    "end": "420080"
  },
  {
    "text": "and that sounded like fun uh so we did this uh for about a year in our 20% time",
    "start": "420080",
    "end": "427280"
  },
  {
    "text": "and what does this actually mean like it it should all just work right well it didn't all work out of the box so what",
    "start": "427280",
    "end": "433440"
  },
  {
    "text": "we did this is basically a massive cleanup operation right we we want chromium to compile Warning free for",
    "start": "433440",
    "end": "439160"
  },
  {
    "text": "instance which means we have to fix everything it warns about or turn off the warnings um and we didn't want to",
    "start": "439160",
    "end": "444879"
  },
  {
    "text": "turn off the really good warnings it also meant filing some bugs on clang and so on and today we actually",
    "start": "444879",
    "end": "451599"
  },
  {
    "text": "use it uh for a bunch of different things most importantly perhaps is that we actually use it to build our Mac binaries right so if you use Chrome on",
    "start": "451599",
    "end": "458400"
  },
  {
    "text": "your Mac then we built it with clang uh that means it has to work uh and we do",
    "start": "458400",
    "end": "463639"
  },
  {
    "text": "some other things as well and so why did we get excited about",
    "start": "463639",
    "end": "468720"
  },
  {
    "start": "466000",
    "end": "548000"
  },
  {
    "text": "clang in the first place we already had a good compiler right so one the first thing about clang is that it's pretty",
    "start": "468720",
    "end": "475039"
  },
  {
    "text": "fast that might not seem like a big deal but if you're building all this code that I told you about before uh then it",
    "start": "475039",
    "end": "481360"
  },
  {
    "text": "does make a difference uh even if it's 10% faster or 20% faster that that that's very nice to have as a developer",
    "start": "481360",
    "end": "488400"
  },
  {
    "text": "it also provides good output I'm not saying that it provides awesome fantastic output but it's good and it's",
    "start": "488400",
    "end": "494319"
  },
  {
    "text": "good enough that we can actually ship these binaries to a user uh which is like a that's probably a requirement to",
    "start": "494319",
    "end": "499840"
  },
  {
    "text": "use it seriously uh then it has clear error messages to a compiler writer that might",
    "start": "499840",
    "end": "505639"
  },
  {
    "text": "not seem like an important thing like a compiler writer might think that oh they they read all these books about",
    "start": "505639",
    "end": "511400"
  },
  {
    "text": "compiling code right they write a compiler the programmer is supposed to inut input C++ and the compiler is",
    "start": "511400",
    "end": "517640"
  },
  {
    "text": "supposed to Output object files if the programmer inputs something else than C++ then you know exit one or whatever",
    "start": "517640",
    "end": "523959"
  },
  {
    "text": "not my problem uh but it's actually really good if the compiler can be sort of helpful uh that's actually a big area",
    "start": "523959",
    "end": "530240"
  },
  {
    "text": "of of compiler uh technology then uh taking errors to the next level it provides high quality",
    "start": "530240",
    "end": "537200"
  },
  {
    "text": "warnings uh which is even more awesome and the erors I think and the best part is the L parts that clang is actually",
    "start": "537200",
    "end": "543360"
  },
  {
    "text": "hackable and extendable and I'll be showing some examples of that so this is my first",
    "start": "543360",
    "end": "550320"
  },
  {
    "start": "548000",
    "end": "598000"
  },
  {
    "text": "example uh yeah you can almost read the whole title so this is the missing semicolon GCC 4.6 style so that's not",
    "start": "550320",
    "end": "557880"
  },
  {
    "text": "the latest GCC right but it's the probably the one that our Linux use developers would be using and what's",
    "start": "557880",
    "end": "563920"
  },
  {
    "text": "happening here uh it's probably all screaming out at you that there's a missing semicolon after the S DEC ation",
    "start": "563920",
    "end": "570560"
  },
  {
    "text": "but that's not what the compiler is saying it's saying it's expecting a semicolon before the for Loop which is",
    "start": "570560",
    "end": "576600"
  },
  {
    "text": "technically correct right uh that's usually the best kind of correct but it's not the most uh user friendly way",
    "start": "576600",
    "end": "583240"
  },
  {
    "text": "of saying it uh perhaps and then it goes off being all being declared and you know",
    "start": "583240",
    "end": "590200"
  },
  {
    "text": "expecting semicolon for before the right parenthesis it's not it's not great anymore so it would be nice if the",
    "start": "590200",
    "end": "595440"
  },
  {
    "text": "compiler could be more helpful here and as users of clang you all know that clang will try to do this so clang I I",
    "start": "595440",
    "end": "602120"
  },
  {
    "start": "598000",
    "end": "645000"
  },
  {
    "text": "think I can say that it gets it right here right it's expected semicolon at the end of The Declaration which ex is",
    "start": "602120",
    "end": "609279"
  },
  {
    "text": "exactly the problem here there are also a few other things like it's using Color",
    "start": "609279",
    "end": "614480"
  },
  {
    "text": "which is you know welcome to the 21st century that might not seem like a big deal actually uh some some if you're",
    "start": "614480",
    "end": "620760"
  },
  {
    "text": "conservative you might not even like it in your in your terminal but uh if you're browsing through screens and",
    "start": "620760",
    "end": "626720"
  },
  {
    "text": "screens of error messages the colors sort of help you navigate that and like help you get to the error pretty quickly",
    "start": "626720",
    "end": "632959"
  },
  {
    "text": "it's even using this green thing I don't know if you can see it where it's trying to point out exactly where to insert this semicolon and it's quoting the code",
    "start": "632959",
    "end": "639639"
  },
  {
    "text": "right so you don't have to open your editor and actually look what this line was which is really",
    "start": "639639",
    "end": "644800"
  },
  {
    "text": "helpful and in the same way that that Chrome is pushing the web forward clang is pushing the compilers forward this is",
    "start": "644800",
    "end": "651639"
  },
  {
    "start": "645000",
    "end": "688000"
  },
  {
    "text": "GCC from two weeks ago uh it now has colors they're off by default but you can turn them on if you like them and",
    "start": "651639",
    "end": "658440"
  },
  {
    "text": "it's sort of trying to to be uh more uh trying to be more user friendly in this way you can see it's doing the same",
    "start": "658440",
    "end": "664160"
  },
  {
    "text": "thing that clang does it's quoting the code and pointing with this green thing right uh unfortunately it doesn't get",
    "start": "664160",
    "end": "671320"
  },
  {
    "text": "the underlying problem right here it's still complaining about semicolon before the for Loop and then it gets really bad",
    "start": "671320",
    "end": "676839"
  },
  {
    "text": "with this I thing like I was not declared in this scope well you can see clearly see that it is right it's right",
    "start": "676839",
    "end": "682079"
  },
  {
    "text": "there on the left I'm saying in I uh but this is progress right this is awesome",
    "start": "682079",
    "end": "689120"
  },
  {
    "start": "688000",
    "end": "735000"
  },
  {
    "text": "and this is taking it to a whole new level this is something that my word processor has been able to do since I",
    "start": "689519",
    "end": "695399"
  },
  {
    "text": "first got it this is typo correction uh so clang I I misspelled C",
    "start": "695399",
    "end": "700760"
  },
  {
    "text": "out here which is the C++ name for the standard output stream uh and clang clang knows all the identifiers being a",
    "start": "700760",
    "end": "707240"
  },
  {
    "text": "compiler it can say that there's no such thing as the out but it does know all the other identifiers right so it sees",
    "start": "707240",
    "end": "712880"
  },
  {
    "text": "that I have one called C out which is close would you like to try that uh and",
    "start": "712880",
    "end": "718000"
  },
  {
    "text": "it's pointing it out with the green thing things it's saying see out there and if I pause it the right Flags it can actually go in and edit my file and fix",
    "start": "718000",
    "end": "725160"
  },
  {
    "text": "this for me if you're using xcode as you might be doing if you're doing iPhone development I'm sure you can just right",
    "start": "725160",
    "end": "730839"
  },
  {
    "text": "click and get it fixed right there and then so this now we move on to the the",
    "start": "730839",
    "end": "738399"
  },
  {
    "start": "735000",
    "end": "828000"
  },
  {
    "text": "warnings like this is a perfectly correct piece of C++ or even C code uh I",
    "start": "738399",
    "end": "745680"
  },
  {
    "text": "mean this conforms to the standard this is well formed there nothing to complain about here the compiler will uh will uh",
    "start": "745680",
    "end": "752160"
  },
  {
    "text": "will happily compile and optimize this for you uh but it also like it might suspect that this does not do what you",
    "start": "752160",
    "end": "759000"
  },
  {
    "text": "uh what you intended does anyone see the the bug",
    "start": "759000",
    "end": "764079"
  },
  {
    "text": "here yeah it's like the the Precedence of The Operators is is tricky here so it looks like we're trying to take seven",
    "start": "764360",
    "end": "771040"
  },
  {
    "text": "and then depending on the value of this Boolean variable we want to add that to X or Y and return it right but clang",
    "start": "771040",
    "end": "776399"
  },
  {
    "text": "points out that that's not what your that's not what's happening we're going to do the addition first",
    "start": "776399",
    "end": "782680"
  },
  {
    "text": "we're going to take seven and add that to Boolean which is perfectly legal in C++ like why not it's 7 + 1 or zero",
    "start": "782680",
    "end": "789519"
  },
  {
    "text": "that's seven or eight uh depending on if that's true or false and seven or eight are both true right so we just take the",
    "start": "789519",
    "end": "796079"
  },
  {
    "text": "X and return it and the compiler will optimize that nicely for you uh but clang Wars which is fantastic and it",
    "start": "796079",
    "end": "803160"
  },
  {
    "text": "suggests you might want to put parenthesis there and this is a really good warning like we added this we found",
    "start": "803160",
    "end": "809720"
  },
  {
    "text": "a lot of bugs in Chrome we found a lot of bugs in Google internally and the best thing is that every time it w there",
    "start": "809720",
    "end": "815839"
  },
  {
    "text": "was a bug and that's an important property of the warnings right we want a really low false positive rate because",
    "start": "815839",
    "end": "821720"
  },
  {
    "text": "if it's warning where there are no bugs then it's just noise and we'll turn it off and that's not very",
    "start": "821720",
    "end": "828279"
  },
  {
    "start": "828000",
    "end": "884000"
  },
  {
    "text": "useful this is another more uh more contrived example but something that",
    "start": "828360",
    "end": "833680"
  },
  {
    "text": "could very well happen in reality like we have we're probably in the in the process of uh my ating user data from",
    "start": "833680",
    "end": "840160"
  },
  {
    "text": "one system to another we want to uh see did we actually manage to copy to the new location because if we didn't we",
    "start": "840160",
    "end": "846680"
  },
  {
    "text": "really don't want to delete the user data so we set that one to false there and I'm sure you see the bug already",
    "start": "846680",
    "end": "854120"
  },
  {
    "text": "yeah the problem is we're not uh yeah let's see clang explain it actually the problem is we're not actually setting",
    "start": "854120",
    "end": "860360"
  },
  {
    "text": "the the the value that the pointer is pointing to we just setting the pointer to false which sucks it's legal in C++",
    "start": "860360",
    "end": "867320"
  },
  {
    "text": "to do that because false is just zero and the pointer can be zero it's called a null pointer right no problems here",
    "start": "867320",
    "end": "873120"
  },
  {
    "text": "but Tang is trying to be smart and saying yeah this is probably not what you want what you want to do this is",
    "start": "873120",
    "end": "878360"
  },
  {
    "text": "nice warning it it finds a lot of bugs I think GCC does this these days as",
    "start": "878360",
    "end": "884360"
  },
  {
    "start": "884000",
    "end": "929000"
  },
  {
    "text": "well so I I said the best part about clang is the hackability the rest is",
    "start": "884360",
    "end": "889880"
  },
  {
    "text": "just general compiler stuff right um but clang is is built sort of with an",
    "start": "889880",
    "end": "895680"
  },
  {
    "text": "intention to be extendable like most of the other lvm project is built as a set of libraries which means you can ex",
    "start": "895680",
    "end": "902079"
  },
  {
    "text": "embed it in your own code and do cool stuff with it uh and we can use this to build tools which is a big thing like uh",
    "start": "902079",
    "end": "910320"
  },
  {
    "text": "we really really want this for chrome chrome has a lot of code and an interesting thing with chrome is that it's sort of this uh this uh small",
    "start": "910320",
    "end": "917759"
  },
  {
    "text": "mirror image of what Google looks like internally like if we have 12 million lines of C++ in Chrome we might have",
    "start": "917759",
    "end": "923199"
  },
  {
    "text": "some more inside and we want to have tools there as well um",
    "start": "923199",
    "end": "929240"
  },
  {
    "start": "929000",
    "end": "1040000"
  },
  {
    "text": "so my first example is the chromium style Checker which is a very simple uh example so we in chromium we have this",
    "start": "929240",
    "end": "936279"
  },
  {
    "text": "thing called the style guide which we all love which is a long document telling us where to put our curly braces",
    "start": "936279",
    "end": "941519"
  },
  {
    "text": "how long our lines should be stuff in the language we're not supposed to use and and how we should do things and so on uh this is actually an interesting",
    "start": "941519",
    "end": "948560"
  },
  {
    "text": "read if you like C++ you can Google for the the Google C++ style guide um and we",
    "start": "948560",
    "end": "954120"
  },
  {
    "text": "try to enforce this right because we think it's important we try to enforce this really hard and like the code your",
    "start": "954120",
    "end": "959360"
  },
  {
    "text": "viewers will look for this and they will tell you when you're wrong uh but humans are failable and uh and they will miss",
    "start": "959360",
    "end": "966639"
  },
  {
    "text": "things so we also use tools like we use Python to check the lines the line length right that's easy to do in Python",
    "start": "966639",
    "end": "973360"
  },
  {
    "text": "but other things are much harder to do in Python and then we need better tools so for instance we had this rule about",
    "start": "973360",
    "end": "978720"
  },
  {
    "text": "uh virtual and override in Objective C I think all methods are probably virtual by default but in C++ they're not so in",
    "start": "978720",
    "end": "986639"
  },
  {
    "text": "C++ you define you declare a member function virtual and then if you have uh",
    "start": "986639",
    "end": "992360"
  },
  {
    "text": "subclasses of that class which have the same method then those will be virtual as well as well",
    "start": "992360",
    "end": "998440"
  },
  {
    "text": "implicitly but we don't like to be implicit about these things so we like the the the programmer to spell out",
    "start": "998440",
    "end": "1003519"
  },
  {
    "text": "virtual there uh the problem is how do we check this with python right so with python we'd have to PA the file and see",
    "start": "1003519",
    "end": "1011319"
  },
  {
    "text": "oh this is a function declaration or it belongs to this class which derives from this other class which has the same",
    "start": "1011319",
    "end": "1017480"
  },
  {
    "text": "function and there it's virtual this gets really you don't want to do this with a regular expression let me let me",
    "start": "1017480",
    "end": "1024319"
  },
  {
    "text": "tell you but if we had this uh the compiler knows this right so if we could just ask the compiler or sort of use the",
    "start": "1024319",
    "end": "1031160"
  },
  {
    "text": "code from the compiler that knows C++ uh then we could just ask it is it virtual and is it spelled that way which is",
    "start": "1031160",
    "end": "1037760"
  },
  {
    "text": "exactly what we do so this is what it looks like uh this is the chromium developer breaking the",
    "start": "1037760",
    "end": "1044400"
  },
  {
    "start": "1040000",
    "end": "1068000"
  },
  {
    "text": "rules and he'd get this warning and we'd actually call it an error uh because we take warning seriously so what we do is",
    "start": "1044400",
    "end": "1051760"
  },
  {
    "text": "that we have this thing it's called a plugin to clang which means you can sort of add your own actions to be run uh at",
    "start": "1051760",
    "end": "1058000"
  },
  {
    "text": "the same time as the regular compilation so we hook in there and add some extra checks to the code I'm going to show you",
    "start": "1058000",
    "end": "1064000"
  },
  {
    "text": "what it looks like I'm going to try to find",
    "start": "1064000",
    "end": "1070440"
  },
  {
    "start": "1068000",
    "end": "1107000"
  },
  {
    "text": "the the thing this is where we do it check",
    "start": "1070440",
    "end": "1076280"
  },
  {
    "text": "virtual method right this function gets called for each method declaration in the file that we're compiling we're",
    "start": "1076280",
    "end": "1082080"
  },
  {
    "text": "checking first is it virtual if it's not then we don't care right that's not what we're checking for then we check is it virtual as written like we just ask and",
    "start": "1082080",
    "end": "1089640"
  },
  {
    "text": "clang these things right because it knows it's being a compiler and then we hook in there pull out the source",
    "start": "1089640",
    "end": "1094840"
  },
  {
    "text": "location and stuff so we can emit this diagnostic like method requires virtual and we even try to be nice we insert",
    "start": "1094840",
    "end": "1101360"
  },
  {
    "text": "this fix it thing which means that client can actually go in and fix the source code for you if if this happens",
    "start": "1101360",
    "end": "1108159"
  },
  {
    "start": "1107000",
    "end": "1191000"
  },
  {
    "text": "so the second tool I think I have five in total the second tool is something that's called clang format and you might",
    "start": "1108159",
    "end": "1114159"
  },
  {
    "text": "guess what it does already so I said before that formatting is important this again comes back to having 12 million",
    "start": "1114159",
    "end": "1120280"
  },
  {
    "text": "lines of code and 600 people working on it like we probably all have our own preferences about what code should look",
    "start": "1120280",
    "end": "1125840"
  },
  {
    "text": "like and we're probably not all consistent with ourselves even so we have this style guide and we take it seriously because readability of code is",
    "start": "1125840",
    "end": "1132760"
  },
  {
    "text": "like the main important property but it's also really boring right this is not what we would want to spend our",
    "start": "1132760",
    "end": "1138840"
  },
  {
    "text": "life's doing both editing the code manually in our Editor to you know do the line breaks and stuff and then",
    "start": "1138840",
    "end": "1145000"
  },
  {
    "text": "especially arguing about it in the code reviews that's the really like that's a waste of time the only problem is that",
    "start": "1145000",
    "end": "1151720"
  },
  {
    "text": "automatic formatting of C++ is really hard like a Java developer might not see the problem here right they can use",
    "start": "1151720",
    "end": "1157400"
  },
  {
    "text": "eclipse and control shift F or whatever and it works pretty well but C++ uh they",
    "start": "1157400",
    "end": "1162600"
  },
  {
    "text": "have not had this uh this luxury like there are lots of um tools that tries",
    "start": "1162600",
    "end": "1168320"
  },
  {
    "text": "try to to do this right that will indent your C code stuff like that but for C++ is had traditional traditionally been",
    "start": "1168320",
    "end": "1175600"
  },
  {
    "text": "very hard the problem is that it's a complicated language right and you need to understand some of the language when you format the code so what clang forat",
    "start": "1175600",
    "end": "1183200"
  },
  {
    "text": "does as you might guess is that it's using pieces of clang to sort of get this this uh language knowledge and use",
    "start": "1183200",
    "end": "1189960"
  },
  {
    "text": "that to build a format again I have a demo",
    "start": "1189960",
    "end": "1195559"
  },
  {
    "start": "1191000",
    "end": "1283000"
  },
  {
    "text": "here uh this is all from uh from",
    "start": "1196159",
    "end": "1201840"
  },
  {
    "text": "chromium so these lines are clearly longer than 80 characters and we could go in and start you know uh go to the",
    "start": "1202520",
    "end": "1209720"
  },
  {
    "text": "space or whatever insert the line brakes and stuff uh but we really don't want to",
    "start": "1209720",
    "end": "1215919"
  },
  {
    "text": "we could also use clang format and then it looks like this it just does it for you and this sort of changes the the way",
    "start": "1215919",
    "end": "1223840"
  },
  {
    "text": "uh developers work when they start using this they start they they don't break the lines ever right they don't format",
    "start": "1223840",
    "end": "1229200"
  },
  {
    "text": "it they just write their code then afterwards they format it and that's it's done I have a second one because",
    "start": "1229200",
    "end": "1235960"
  },
  {
    "text": "this was easy right this is a beautiful line of C++ now we're using",
    "start": "1235960",
    "end": "1243280"
  },
  {
    "text": "features uh this is the central part of chromium too uh it's a macro which is",
    "start": "1243280",
    "end": "1248360"
  },
  {
    "text": "awesome it's doing templates it's got the bit of you know macro uh pasting",
    "start": "1248360",
    "end": "1253559"
  },
  {
    "text": "whatever you call the thing there and it's it's obvious what this line does right just by looking at it but but uh",
    "start": "1253559",
    "end": "1259080"
  },
  {
    "text": "formatting it might help the readability there and I'm I'm not going to format this manually because it would be really",
    "start": "1259080",
    "end": "1264360"
  },
  {
    "text": "really boring but this is what it looks like after the clang format's done with it and C++ developers usually find this",
    "start": "1264360",
    "end": "1271480"
  },
  {
    "text": "amazing right it's macros because no other tools will look at a macro they'll just you know could be whatever but CL",
    "start": "1271480",
    "end": "1277520"
  },
  {
    "text": "format actually handles this and and will format our code",
    "start": "1277520",
    "end": "1281960"
  },
  {
    "text": "beautifully and the real reason we're doing this this is not just for a convenience what we actually want to do",
    "start": "1282799",
    "end": "1289200"
  },
  {
    "start": "1283000",
    "end": "1336000"
  },
  {
    "text": "I don't have demos for that but what we actually want to do with clang is want we want to do large scale refactoring",
    "start": "1289200",
    "end": "1294880"
  },
  {
    "text": "and we can kind of do that this is again like Eclipse you can just right click refactor right but in C++ it's been",
    "start": "1294880",
    "end": "1300880"
  },
  {
    "text": "harder traditionally uh we we we're building tools to do that but one of the boring things is that if you rename",
    "start": "1300880",
    "end": "1307320"
  },
  {
    "text": "something and it gets a slightly larger name or if you add a parameter to a function or whatever the formatting",
    "start": "1307320",
    "end": "1313880"
  },
  {
    "text": "comes out wrong and that's fine to tidy up if you have 10 files but if you have 10,000 and then it gets boring and",
    "start": "1313880",
    "end": "1320279"
  },
  {
    "text": "that's that's why we want clang format it's also really easy to use so I",
    "start": "1320279",
    "end": "1325760"
  },
  {
    "text": "had it integrated in viim which is my favorite and uh we have Integrations for a bunch of different",
    "start": "1325760",
    "end": "1332640"
  },
  {
    "text": "editors so now we're coming to the more the more hardcore compiler tools so the first one is address sanitizer or asan",
    "start": "1332640",
    "end": "1340279"
  },
  {
    "start": "1336000",
    "end": "1450000"
  },
  {
    "text": "it will sanitize your addresses uh this is developed in Moscow uh so in C and C++ and so on we",
    "start": "1340279",
    "end": "1347720"
  },
  {
    "text": "do manual memory management I don't know about Objective C you may maybe you can do it maybe you maybe you don't have to",
    "start": "1347720",
    "end": "1354679"
  },
  {
    "text": "uh this is awesome like we we like to do this for for speed for performance uh",
    "start": "1354679",
    "end": "1360200"
  },
  {
    "text": "but it also bites Us in the ass uh a lot of time because memory uh management bugs are are like the best right not",
    "start": "1360200",
    "end": "1367039"
  },
  {
    "text": "only will your program maybe it will crash maybe someone will hack you uh it's not the good thing to have uh",
    "start": "1367039",
    "end": "1373600"
  },
  {
    "text": "memory memory management bugs in your in your software so traditionally You' be",
    "start": "1373600",
    "end": "1378720"
  },
  {
    "text": "using Val grind for this right on Linux and Mac there is a solution you'll be using Val grind and what Val grind does",
    "start": "1378720",
    "end": "1384440"
  },
  {
    "text": "is that it runs your program and as it runs it it's sort of jit compiling it right uh but it's not bite code it's",
    "start": "1384440",
    "end": "1390320"
  },
  {
    "text": "real code so it's looking at your code and as it's running it's like adding some more EXT instru it's adding some",
    "start": "1390320",
    "end": "1397080"
  },
  {
    "text": "more instructions around your loads and stores to check that they are correct and that slows down the running of your",
    "start": "1397080",
    "end": "1403000"
  },
  {
    "text": "program uh sometimes it's not too much but sometimes it's slowing things down a lot so we we had this problem that",
    "start": "1403000",
    "end": "1409279"
  },
  {
    "text": "running all our tests with Val grind takes forever and running the pro the the browser with Val grind was not a fun",
    "start": "1409279",
    "end": "1415960"
  },
  {
    "text": "experience so what address sanitizer does is that it's uh inserting the instrumentation around the loads and",
    "start": "1415960",
    "end": "1421840"
  },
  {
    "text": "stores at compile time instead and this is not a new idea like we've been doing this before but doing it with with clang",
    "start": "1421840",
    "end": "1427919"
  },
  {
    "text": "and lvm turned out to be much easier uh which means that Eder sanitizer came out as a really successful tool it's usually",
    "start": "1427919",
    "end": "1435080"
  },
  {
    "text": "about two times slower than running the program without the instrumentation which is still slow right you're not winning Benchmark contests but it's",
    "start": "1435080",
    "end": "1441799"
  },
  {
    "text": "still fast enough that you can run the browser for instance and all the tests and it catches many kinds of Errors some",
    "start": "1441799",
    "end": "1447200"
  },
  {
    "text": "that Val won't detect so I have I have demos",
    "start": "1447200",
    "end": "1453760"
  },
  {
    "start": "1450000",
    "end": "1577000"
  },
  {
    "text": "uh this is the first examp I should show you the code this is the first example",
    "start": "1454000",
    "end": "1459080"
  },
  {
    "text": "this is a heat buffer overflow classic right we're allocating space for 100 ins",
    "start": "1459080",
    "end": "1464480"
  },
  {
    "text": "uh we want to return the 100 int but we sort of forget about how arrays are being indexed from uh from zero so we uh",
    "start": "1464480",
    "end": "1471399"
  },
  {
    "text": "actually index One Step too far so this is undefined behavior and it's totally a",
    "start": "1471399",
    "end": "1476559"
  },
  {
    "text": "bug and so on uh let's see what happens when we run it no problem right it ran fine it",
    "start": "1476559",
    "end": "1483000"
  },
  {
    "text": "didn't crash it's returning zero which uh is what we",
    "start": "1483000",
    "end": "1488440"
  },
  {
    "text": "expected but Val grind points out that there's a bug or I should compile with debug info",
    "start": "1490640",
    "end": "1498278"
  },
  {
    "text": "can you see this yeah Val grind points out that there's a bug right there's an invalid read uh after the the the array",
    "start": "1500000",
    "end": "1507039"
  },
  {
    "text": "and that's bad so this is fantastic Val grind fixes this for us it might have been slower but it didn't didn't matter",
    "start": "1507039",
    "end": "1513000"
  },
  {
    "text": "in this case let's see what address sanitizer",
    "start": "1513000",
    "end": "1516880"
  },
  {
    "text": "just it uses color right it point it's pointing at",
    "start": "1522919",
    "end": "1529480"
  },
  {
    "text": "the same Arrow right we're doing an invalid read at this location and it's sort of pointing out that it's to the",
    "start": "1529480",
    "end": "1535760"
  },
  {
    "text": "right of this uh this buffer that we allocated it's also showing something about how it works",
    "start": "1535760",
    "end": "1541520"
  },
  {
    "text": "internally so address sanitizer is using this this thing called Shadow memory",
    "start": "1541520",
    "end": "1547880"
  },
  {
    "text": "which sounds awesome it's uh like you have your you have your regular memory for your program and then you have the",
    "start": "1547880",
    "end": "1553000"
  },
  {
    "text": "shadow memory somewhere else which is sort of a there's a mapping between them and what address does is that it keeps",
    "start": "1553000",
    "end": "1559399"
  },
  {
    "text": "track in the shadow memory it's sort of marking the bytes as like is this bite value to read from in the real memory",
    "start": "1559399",
    "end": "1565840"
  },
  {
    "text": "and so on and that's what it's showing here so we tried to read here and it was marked in red as fa which means Heap",
    "start": "1565840",
    "end": "1573080"
  },
  {
    "text": "left Red Zone which sounds like something you probably shouldn't be reading from right if you like memory",
    "start": "1573080",
    "end": "1579360"
  },
  {
    "start": "1577000",
    "end": "1641000"
  },
  {
    "text": "related bugs then you love concurrency bugs right uh and I suppose these go for all",
    "start": "1579360",
    "end": "1587399"
  },
  {
    "text": "all languages not just C and C++ being evil uh it's the same idea this is a",
    "start": "1587399",
    "end": "1592520"
  },
  {
    "text": "sanitizer tool it uses clang and lvm to insert the instrumentation as at compile time we've built this tool with Val",
    "start": "1592520",
    "end": "1599039"
  },
  {
    "text": "grind as well where it does the Val grind thing of sort of adding at run time but it it's obviously much faster",
    "start": "1599039",
    "end": "1605080"
  },
  {
    "text": "to do it this way this has a large overhead compared to AG sanitizer but it's still not crazy it still allows us",
    "start": "1605080",
    "end": "1611559"
  },
  {
    "text": "to run our tests in a relatively timely fashion and it points out RAC situations",
    "start": "1611559",
    "end": "1617279"
  },
  {
    "text": "so the the thing with currency bugs is that you have them but they're never there when you look for them right they",
    "start": "1617279",
    "end": "1622360"
  },
  {
    "text": "they always occur on your customer's machine and uh that makes them hard to find so the idea with the tool is that",
    "start": "1622360",
    "end": "1628240"
  },
  {
    "text": "it should point out the situation that's racy even though the sort of the the concurrent access to the variable isn't",
    "start": "1628240",
    "end": "1633520"
  },
  {
    "text": "actually happening at that time let's",
    "start": "1633520",
    "end": "1639799"
  },
  {
    "start": "1641000",
    "end": "1834000"
  },
  {
    "text": "see this has slightly more code it's it's starting two threads it's very simple right we have this Global",
    "start": "1641919",
    "end": "1647840"
  },
  {
    "text": "variable that's going to start out at zero because it's a global then we're going to have thread one incremented and",
    "start": "1647840",
    "end": "1653799"
  },
  {
    "text": "thread two decremented one might run before the other right but it should still end up at zero then we join and",
    "start": "1653799",
    "end": "1660440"
  },
  {
    "text": "then we return the value of the global",
    "start": "1660440",
    "end": "1667519"
  },
  {
    "text": "ah okay it ran and it returned zero so it seems to be working right let's try",
    "start": "1676760",
    "end": "1682760"
  },
  {
    "text": "it one more time now it returns one zero again it seems to be a bit",
    "start": "1682760",
    "end": "1690240"
  },
  {
    "text": "random we built this random number generator which is uh is great if that's what we wanted right but that's not uh",
    "start": "1690240",
    "end": "1697679"
  },
  {
    "text": "that's not the case can try Val grind it's not going to complain uh well we're",
    "start": "1697679",
    "end": "1703240"
  },
  {
    "text": "leaking two things but no no we we're freeing them as well right so we have a r there and",
    "start": "1703240",
    "end": "1709159"
  },
  {
    "text": "traditionally we'd be like uh opening up the code and staring really hard at",
    "start": "1709159",
    "end": "1714279"
  },
  {
    "text": "it uh but that's not the an efficient way to do it that's only if you know it's there",
    "start": "1714279",
    "end": "1723080"
  },
  {
    "text": "right so this is what thread sanitizer does it's trying to uh it's pointing out",
    "start": "1729080",
    "end": "1734159"
  },
  {
    "text": "that there's a right like thread two in this case and there was a prev previous",
    "start": "1734159",
    "end": "1739600"
  },
  {
    "text": "right by the other thread and there was no synchronization in between so this is a bad situation to be in and it yeah",
    "start": "1739600",
    "end": "1746120"
  },
  {
    "text": "it's giving us the usual information about where the threads were created and so on so in summary there's a data race",
    "start": "1746120",
    "end": "1751760"
  },
  {
    "text": "at this line 13 which is fantastic and this works even if we sort",
    "start": "1751760",
    "end": "1756919"
  },
  {
    "text": "of fix the the we do the hacky fix of uh making sure that they don't write to the",
    "start": "1756919",
    "end": "1762760"
  },
  {
    "text": "global at the same time right this should totally fix the concurrency bug",
    "start": "1762760",
    "end": "1768240"
  },
  {
    "text": "so as you can see the problem was that the threads were running at the same time and right to the global but now we're making one of them slightly slower",
    "start": "1768240",
    "end": "1775039"
  },
  {
    "text": "by making the second one sleep so the first one should get there first and then the second one afterwards uh should",
    "start": "1775039",
    "end": "1780880"
  },
  {
    "text": "be",
    "start": "1780880",
    "end": "1783080"
  },
  {
    "text": "safe it's got lower performance now but now it works",
    "start": "1789880",
    "end": "1796679"
  },
  {
    "text": "right let's see what thread sanitizer",
    "start": "1796679",
    "end": "1801039"
  },
  {
    "text": "says yeah there's still a race because the race is still there right we're not synchronizing uh in any reliable fashion",
    "start": "1802960",
    "end": "1810360"
  },
  {
    "text": "right the the they could still write to the global at the same time because one of the threads might get stuck for a",
    "start": "1810360",
    "end": "1815559"
  },
  {
    "text": "second maybe the machine is really loaded or or something like that so the point is that it's detecting the race",
    "start": "1815559",
    "end": "1821000"
  },
  {
    "text": "even if it's not happening and in this case it can even point out that as if it was synchronized via sleep like it knows",
    "start": "1821000",
    "end": "1827159"
  },
  {
    "text": "about this sleep and you know obviously can see through",
    "start": "1827159",
    "end": "1833480"
  },
  {
    "text": "it so these tools like address sanitizer and and thread sanitizer are amazing tools for us like before we",
    "start": "1834200",
    "end": "1841279"
  },
  {
    "text": "couldn't we might have had a lot of bugs we didn't know about before this came came along and we don't want those",
    "start": "1841279",
    "end": "1846960"
  },
  {
    "text": "bugs and even better when we have bugs we know about like the programmer can use these tools to find",
    "start": "1846960",
    "end": "1853720"
  },
  {
    "text": "them this is the third un behav uh the Third sanitizer that's the last",
    "start": "1853720",
    "end": "1859440"
  },
  {
    "text": "sanitizer this is the newest one actually so C and C++ they have this awesome language feature which is called",
    "start": "1859440",
    "end": "1864799"
  },
  {
    "text": "undefined behavior um the the the usual examples are division by zero array overflow null",
    "start": "1864799",
    "end": "1872039"
  },
  {
    "text": "poter the reference and so on so the idea is to help efficient",
    "start": "1872039",
    "end": "1877559"
  },
  {
    "text": "language implementation right the the compiler when it sees integer division it only wants to emit the div divide",
    "start": "1877559",
    "end": "1884120"
  },
  {
    "text": "instruction it doesn't want to have to check for zero there so other languages might specify the behavior that like",
    "start": "1884120",
    "end": "1889880"
  },
  {
    "text": "division by zero should yield division by zero exception or something like that and then the the compiler either has to",
    "start": "1889880",
    "end": "1895880"
  },
  {
    "text": "check for zero or it has to do something clever like rely on the hardware maybe can the hardware can help or whatever uh",
    "start": "1895880",
    "end": "1902880"
  },
  {
    "text": "to do this but it might turn out to be less efficient and c and C++ they try not to compromise on efficiency so",
    "start": "1902880",
    "end": "1908880"
  },
  {
    "text": "that's why the language works like this it also means that it so so what it does is that okay it's going to emit the",
    "start": "1908880",
    "end": "1914720"
  },
  {
    "text": "division instruction and it's going to trust you not to try to divide by zero because if if you do then okay you're",
    "start": "1914720",
    "end": "1921240"
  },
  {
    "text": "out of the the the safe zone of the language Like Anything could happen it could be formatting your",
    "start": "1921240",
    "end": "1926559"
  },
  {
    "text": "hardrive so that's also a source of subtle bugs right because the Define def behavior is undefined Anything could",
    "start": "1926559",
    "end": "1933080"
  },
  {
    "text": "happen so you might not know that it's happening anything could also include nothing on your machine and something",
    "start": "1933080",
    "end": "1939360"
  },
  {
    "text": "else on someone else's so we now have this tool that that tries to catch this uh I have a",
    "start": "1939360",
    "end": "1946080"
  },
  {
    "text": "demo",
    "start": "1946080",
    "end": "1949080"
  },
  {
    "start": "1948000",
    "end": "2196000"
  },
  {
    "text": "so sorry about the C here what this does is is it's sort of a",
    "start": "1952360",
    "end": "1958919"
  },
  {
    "text": "demo of the left shift operator so you know how this works it takes the bits of an INT in this case and it shifts them",
    "start": "1958919",
    "end": "1966360"
  },
  {
    "text": "to the left right and any bits that don't fit in the word they're going to fall off the edge to the left so 32 bits",
    "start": "1966360",
    "end": "1972440"
  },
  {
    "text": "in this case and this this thing just does it like once twice three times and shows off the result so we'd expect it",
    "start": "1972440",
    "end": "1979039"
  },
  {
    "text": "should start with one then two then four then eight and so on and then all the bits should fall off and we should end",
    "start": "1979039",
    "end": "1984480"
  },
  {
    "text": "up with zero I",
    "start": "1984480",
    "end": "1988639"
  },
  {
    "text": "think but that's not what what's happening I don't know yeah you can see this so it turns out we end up with one",
    "start": "1990000",
    "end": "1997320"
  },
  {
    "text": "here where did this come from or this is like the the high bit",
    "start": "1997320",
    "end": "2004440"
  },
  {
    "text": "set and here it should be falling off the cliff maybe maybe the undefined Behavior sanitizer can tell us what's",
    "start": "2004440",
    "end": "2012840"
  },
  {
    "text": "happening yeah turn out 32 is too large for a 32-bit int right so C++ and C they",
    "start": "2020480",
    "end": "2028919"
  },
  {
    "text": "they leave this as undefined behavior and you're not allowed to shift wider than the width of the word",
    "start": "2028919",
    "end": "2035679"
  },
  {
    "text": "and what's happening behind the scene is that this is emitting a the instruction it's is using for left shift is s sh shl",
    "start": "2035679",
    "end": "2044159"
  },
  {
    "text": "on on x86 which actually does the shift modul 32 so in this case it's not shifting at",
    "start": "2044159",
    "end": "2050720"
  },
  {
    "text": "all that's what Intel does like power or another platform might be doing something else but that's not c++'s",
    "start": "2050720",
    "end": "2057320"
  },
  {
    "text": "problem so this program might be having different values on different machines and the reason we're doing uban",
    "start": "2057320",
    "end": "2064599"
  },
  {
    "text": "is um so the compiler can sort of uh sort of exploit the undefined Behavior",
    "start": "2064599",
    "end": "2071440"
  },
  {
    "text": "what it can do is that it can assume it doesn't happen right because if it would happen then Anything could happen",
    "start": "2071440",
    "end": "2077679"
  },
  {
    "text": "because it's undefined but the the compiler can't really be that aggressive because a lot of programs have undefined",
    "start": "2077679",
    "end": "2083358"
  },
  {
    "text": "behavior and people are started sort of relying on them to have predictable",
    "start": "2083359",
    "end": "2088720"
  },
  {
    "text": "results like you have a null pointer you D reference you expect the predictable crash well the compiler might want to do",
    "start": "2088720",
    "end": "2094919"
  },
  {
    "text": "something else there so we have undefined Behavior sanitizer to of weed out the undefined Behavior I have a",
    "start": "2094919",
    "end": "2102400"
  },
  {
    "text": "second now we're entering C++ so this is a simple program it's",
    "start": "2102960",
    "end": "2108160"
  },
  {
    "text": "kind of stupid it just wants to return a really big value so it grabs a big value",
    "start": "2108160",
    "end": "2113960"
  },
  {
    "text": "stores it in a float for some reason I don't know why but you can do that and then it returns it as an INT and you can",
    "start": "2113960",
    "end": "2120520"
  },
  {
    "text": "convert a float to an INT as well so let's see what it does",
    "start": "2120520",
    "end": "2126760"
  },
  {
    "text": "well it did not return a really big value so what's the bug here can anyone",
    "start": "2131200",
    "end": "2136839"
  },
  {
    "text": "spot",
    "start": "2136839",
    "end": "2139240"
  },
  {
    "text": "this let's see what UB",
    "start": "2144240",
    "end": "2148240"
  },
  {
    "text": "senses okay so what seems to be happening is that we somehow end up with this",
    "start": "2153560",
    "end": "2159760"
  },
  {
    "text": "value in the float which is too large to be converted to an INT so I think what's happening I'm not",
    "start": "2159760",
    "end": "2166560"
  },
  {
    "text": "the language lawyer is that like conversion from integer to float is perfectly defined you might lose some",
    "start": "2166560",
    "end": "2172640"
  },
  {
    "text": "Precision though so in this case it seems that the number is getting rounded up because it should end with a SE seven",
    "start": "2172640",
    "end": "2178720"
  },
  {
    "text": "here actually that's the max int value right and then we're returning this as an INT and you can do float to int",
    "start": "2178720",
    "end": "2185839"
  },
  {
    "text": "conversion it just gives you like the in part right and that's defined as long as the number fits in the int and it",
    "start": "2185839",
    "end": "2192079"
  },
  {
    "text": "doesn't here uh so that's why we get this warning so that's what undefined",
    "start": "2192079",
    "end": "2198520"
  },
  {
    "text": "Behavior does and it works like all the other sanitizers it's inserting instrumentation at compile time which",
    "start": "2198520",
    "end": "2204720"
  },
  {
    "text": "means it's sort of inserting all these expensive checks that we don't want in production like for division it's going",
    "start": "2204720",
    "end": "2210280"
  },
  {
    "text": "to check for zero and so and for null pointer it's going to check for null and this allows us to catch a whole lot of",
    "start": "2210280",
    "end": "2216640"
  },
  {
    "text": "bugs again and hopefully it will allow us to write the better optimizing compiler once all the undefined behavior",
    "start": "2216640",
    "end": "2221839"
  },
  {
    "text": "is gone so those were all the demos I had what was my",
    "start": "2221839",
    "end": "2228000"
  },
  {
    "start": "2223000",
    "end": "2393000"
  },
  {
    "text": "point the clang was about the talk was supposed to be about Fun and Profit",
    "start": "2228000",
    "end": "2233400"
  },
  {
    "text": "right the point is that programming is supposed to be fun that's why we do it and uh we also uh might make a profit",
    "start": "2233400",
    "end": "2241280"
  },
  {
    "text": "that helps pay for the fun but there are things in programming uh which makes it more boring such as like trying to",
    "start": "2241280",
    "end": "2247960"
  },
  {
    "text": "figure out what the compiler is saying when it has an error message finding bugs that the compiler could have told",
    "start": "2247960",
    "end": "2253359"
  },
  {
    "text": "you about because it saw them right swinging by as you comp it compiled uh",
    "start": "2253359",
    "end": "2258839"
  },
  {
    "text": "formatting your code is really boring uh finding memory bugs is boring concurrency bugs is even worse and",
    "start": "2258839",
    "end": "2265920"
  },
  {
    "text": "undefined behavior is very very sneaky and Clan can help with all of this so hopefully Clan can help us Have Fun and",
    "start": "2265920",
    "end": "2271280"
  },
  {
    "text": "Profit that's my point thank you very much [Applause]",
    "start": "2271280",
    "end": "2279240"
  },
  {
    "text": "are all these sanitizers ran from command line or is it expected to have them run at Dev time or is oh continuous",
    "start": "2279240",
    "end": "2286280"
  },
  {
    "text": "integration I guess or is it expected to have them run at that time well you can do both I mean",
    "start": "2286280",
    "end": "2293920"
  },
  {
    "text": "we we do run them uh sort of mandatory during continuous integration you can run them during development time as well",
    "start": "2293920",
    "end": "2300359"
  },
  {
    "text": "if you like that's a nice thing to do and it's very handy to do it like when you have a bug and you're like looking",
    "start": "2300359",
    "end": "2305880"
  },
  {
    "text": "for it uh I don't think a lot of us run it by default but maybe we should",
    "start": "2305880",
    "end": "2313040"
  },
  {
    "text": "actually we also have the idea of shipping this in the caner channel right",
    "start": "2313040",
    "end": "2318920"
  },
  {
    "text": "we don't even have to do it at continuous integration time because it's so fast we can ship Chrome with this to",
    "start": "2318920",
    "end": "2325520"
  },
  {
    "text": "the canary which is supposed to be unstable anyway and uh when it crashes we can sort of get in on those crash",
    "start": "2325520",
    "end": "2331280"
  },
  {
    "text": "reports if you opt into it and that's that's really useful there was also a second one here uh",
    "start": "2331280",
    "end": "2338440"
  },
  {
    "text": "as an Objective C Guy where can I find docs for this plug-in stuff would love to do this stuff too so it's not very",
    "start": "2338440",
    "end": "2345800"
  },
  {
    "text": "well documented the plugin stuff because uh they the reason for that is that the",
    "start": "2345800",
    "end": "2351640"
  },
  {
    "text": "Clank folks are not really certain about how they want to design it it's there but they don't feel that this is the design they want but we can still use it",
    "start": "2351640",
    "end": "2358319"
  },
  {
    "text": "uh so one thing to do is that you can look at uh at our plugin so this is a link to the chromium Wiki where we sort",
    "start": "2358319",
    "end": "2365040"
  },
  {
    "text": "of describe our plugin and you can sort of look at our pluging and use that as an example so that's not really looking",
    "start": "2365040",
    "end": "2370280"
  },
  {
    "text": "at Objective C I think but then you can uh uh sort of the the documentation for",
    "start": "2370280",
    "end": "2376240"
  },
  {
    "text": "clanks internals is actually pretty good like they're using doxygen and I think there are some talks",
    "start": "2376240",
    "end": "2381800"
  },
  {
    "text": "about looking at the as even and uh so you can use that to sort of uh write your own",
    "start": "2381800",
    "end": "2388520"
  },
  {
    "text": "plugin are there any live",
    "start": "2388520",
    "end": "2392400"
  },
  {
    "start": "2393000",
    "end": "2684000"
  },
  {
    "text": "questions so I came to think of one um I don't work with like these kinds of",
    "start": "2394560",
    "end": "2400760"
  },
  {
    "text": "really powerful tools I'm a dynamic language programmer I'm a small talker",
    "start": "2400760",
    "end": "2406440"
  },
  {
    "text": "and uh the workflow I really like with Dynamic language is You can actually run the entire application especially in",
    "start": "2406440",
    "end": "2412800"
  },
  {
    "text": "small talk you can run the entire application and make like pce meal changes and just rerun that piece of it",
    "start": "2412800",
    "end": "2419880"
  },
  {
    "text": "yeah and it seemed to me since the tools you you showed they only took effect at runtime so it seems like a runtime shim",
    "start": "2419880",
    "end": "2427440"
  },
  {
    "text": "ftic language to me so the question is Could you actually use this to build a live uh",
    "start": "2427440",
    "end": "2436560"
  },
  {
    "text": "development environment in the small talk style that produces fast code like",
    "start": "2436560",
    "end": "2443480"
  },
  {
    "text": "this I I don't know if you can use these tools like depends on if you want",
    "start": "2443480",
    "end": "2451520"
  },
  {
    "text": "to to run static languages in this development environment is that",
    "start": "2451520",
    "end": "2458319"
  },
  {
    "text": "uh or do you want to do this analysis for your small talk code in this so",
    "start": "2458319",
    "end": "2464400"
  },
  {
    "text": "there are projects that try to to interpret C and C++ right and run this in ID and then you can do this you can",
    "start": "2464400",
    "end": "2471000"
  },
  {
    "text": "like you can Hot Patch your code right you can run a bit and then you can write some more and run that and then you can go go back and change and stuff like",
    "start": "2471000",
    "end": "2478000"
  },
  {
    "text": "that that's sort of unrelated to the sanitizers that's different project called cling I think the C language",
    "start": "2478000",
    "end": "2483480"
  },
  {
    "text": "interpreter which they do at CERN which is pretty crazy but pretty cool too uh",
    "start": "2483480",
    "end": "2488920"
  },
  {
    "text": "yeah so so people are trying to do that with lvm and clang uh do you have any experience using clang on",
    "start": "2488920",
    "end": "2495680"
  },
  {
    "text": "Windows that's very new uh so",
    "start": "2495680",
    "end": "2501839"
  },
  {
    "text": "uh depends what you want to do with it right you can run the compiler on Windows but it might not be able to",
    "start": "2501839",
    "end": "2508880"
  },
  {
    "text": "produce a working windows program uh it's hard so so the thing is we",
    "start": "2508880",
    "end": "2515520"
  },
  {
    "text": "actually announced uh a few weeks ago go at a conference called going native uh I don't have a link but there's a great",
    "start": "2515520",
    "end": "2520960"
  },
  {
    "text": "talk there uh announcing that we're starting to look at at doing that on Windows like using clang as a compiler",
    "start": "2520960",
    "end": "2527000"
  },
  {
    "text": "and integrating with Visual Studio which uh could be really nice um so will add",
    "start": "2527000",
    "end": "2532480"
  },
  {
    "text": "sanitizer only catch like out of bound errors or will it also catch something like um reference counting Cycles in a",
    "start": "2532480",
    "end": "2538680"
  },
  {
    "text": "stood SHP pointer they I don't think uh you mean uh would it catch that you leak",
    "start": "2538680",
    "end": "2545680"
  },
  {
    "text": "something so we have another sanitizer for that it's called the lsan or leak",
    "start": "2545680",
    "end": "2551520"
  },
  {
    "text": "sanitizer and I think that would catch it yeah so the problem is the we don't",
    "start": "2551520",
    "end": "2558160"
  },
  {
    "text": "do all the analysis in one tool because turns out that requires a lot of",
    "start": "2558160",
    "end": "2563760"
  },
  {
    "text": "memory right so this address sanitizer only had Shadow memory tracking if uh",
    "start": "2563760",
    "end": "2568800"
  },
  {
    "text": "addresses are valid to read from checking for leaks is a different process and requires another type of",
    "start": "2568800",
    "end": "2574839"
  },
  {
    "text": "Shadow memory and having both at the same time is really expensive so we have sort of confusing but we have a lot of",
    "start": "2574839",
    "end": "2580480"
  },
  {
    "text": "sanitizers right we have address sanitizer which I showed and we have leak sanitizer which tries to find leaks",
    "start": "2580480",
    "end": "2586920"
  },
  {
    "text": "then we have something else I think that's a pretty new one though it might not actually be released or stable or",
    "start": "2586920",
    "end": "2592400"
  },
  {
    "text": "whatever then we have another one uh called I don't even remember what it's",
    "start": "2592400",
    "end": "2597880"
  },
  {
    "text": "called uh it's checking for a for uninitialized memory reads which add",
    "start": "2597880",
    "end": "2604319"
  },
  {
    "text": "sanitizer won't do either uh like if you if you're inside the buffer it won't detect that the memory is not",
    "start": "2604319",
    "end": "2609559"
  },
  {
    "text": "initialized which Val grind does that's another check that's nice to have so we have a separate sanitizer for",
    "start": "2609559",
    "end": "2615119"
  },
  {
    "text": "that so why are these written as Clank plugins versus actually trying to get",
    "start": "2615119",
    "end": "2621440"
  },
  {
    "text": "these ideas into the main source of Cl I guess so it's just the the only plugin",
    "start": "2621440",
    "end": "2627480"
  },
  {
    "text": "here was the chromium plugin sure I should I point it out the sanitizers are part of the main clang source so the way",
    "start": "2627480",
    "end": "2633599"
  },
  {
    "text": "I ran it was I just passed this flag to clang right and this is regular clang and and the flag is just a regular flag",
    "start": "2633599",
    "end": "2641160"
  },
  {
    "text": "uh clang format is a separate tool that's also not a plug-in it's a whole separate program that's linking against",
    "start": "2641160",
    "end": "2646839"
  },
  {
    "text": "clang as a library so the only only plugin here that I showed was the the the sort of chromium style format",
    "start": "2646839",
    "end": "2653040"
  },
  {
    "text": "Checker do we run one sanitizer at a time or how do we do it if it uses a lot",
    "start": "2653040",
    "end": "2659160"
  },
  {
    "text": "of memory one at a time or all at once no we we run them uh one at a time I",
    "start": "2659160",
    "end": "2664240"
  },
  {
    "text": "mean you can try but it might uh take too much memory to run them all and it",
    "start": "2664240",
    "end": "2669280"
  },
  {
    "text": "might sort of fall over itself uh as well I don't know if that works no okay thank you very much H thank you",
    "start": "2669280",
    "end": "2679000"
  }
]