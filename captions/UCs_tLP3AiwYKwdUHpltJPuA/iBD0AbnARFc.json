[
  {
    "text": "um hi everybody can everybody hear me okay all right um my name is Mari I'm a",
    "start": "560",
    "end": "6879"
  },
  {
    "text": "research engineer at Nitro and uh today I'm going to be talking about functional programming in Scala how they formed the",
    "start": "6879",
    "end": "14400"
  },
  {
    "text": "Perfect combo for machine learning um I know I shouldn't be really",
    "start": "14400",
    "end": "19800"
  },
  {
    "text": "advertising things but since this is a a programming conference and there's there are a bunch of really interesting Pro",
    "start": "19800",
    "end": "26080"
  },
  {
    "text": "programming conferences going on in San Francisco um uh next month I just wanted to mention them because they're all",
    "start": "26080",
    "end": "32880"
  },
  {
    "text": "functionally oriented um there's finagle con uh run by Twitter there's Scala by the bay Big",
    "start": "32880",
    "end": "39879"
  },
  {
    "text": "Data Scala focused on Technologies such as spark and Kafka and uh um there's",
    "start": "39879",
    "end": "46800"
  },
  {
    "text": "also the complete pipeline training for the so-called smack stack that is spark maos akak Cassandra and Kafka and if",
    "start": "46800",
    "end": "53600"
  },
  {
    "text": "you're interested um the organizer of the conference Alex kabov uh basically",
    "start": "53600",
    "end": "59079"
  },
  {
    "text": "wanted to offer this for the participants so um that's the code and uh that will be available afterwards in",
    "start": "59079",
    "end": "65560"
  },
  {
    "text": "case you need to uh to look at it uh meanwhile I would like to go into the presentation itself so the agenda for",
    "start": "65560",
    "end": "72080"
  },
  {
    "text": "this um presentation is to cover the traditional uh data science and machine",
    "start": "72080",
    "end": "77840"
  },
  {
    "text": "learning tools and why in my opinion they're somewhat deficient at least from a functional programmer's point of",
    "start": "77840",
    "end": "84479"
  },
  {
    "text": "view and then look at the jvm Alternatives but specifically the sca Alternatives because we're talking about",
    "start": "84479",
    "end": "90479"
  },
  {
    "text": "functional programming here um it could have been closure but I just happen to know Scala better and um and to",
    "start": "90479",
    "end": "98479"
  },
  {
    "text": "basically show that uh even if something doesn't yet exist in one of the libraries that it's totally possible to",
    "start": "98479",
    "end": "105960"
  },
  {
    "text": "to build something relatively quickly with with the right level of abstraction and uh as as a motivating",
    "start": "105960",
    "end": "112360"
  },
  {
    "text": "example for that I'm going to show linear regression using stochastic gradient descent uh implemented for both",
    "start": "112360",
    "end": "118399"
  },
  {
    "text": "Scala Collections and for spark um how many people know about spark",
    "start": "118399",
    "end": "123600"
  },
  {
    "text": "here okay quite a few uh those who don't uh spark is basically a modern",
    "start": "123600",
    "end": "129160"
  },
  {
    "text": "alternative to Hadoop which has a very functional API very similar to Scala collection so basically with all the",
    "start": "129160",
    "end": "134959"
  },
  {
    "text": "standard combinators and essentially monads and whatnot and um it runs",
    "start": "134959",
    "end": "141239"
  },
  {
    "text": "approximately 100 times faster than Hadoop for iterative uh co uh programs",
    "start": "141239",
    "end": "146720"
  },
  {
    "text": "uh such as machine learning programs for instance and it has is a much richer ecosystem and the API is very functional",
    "start": "146720",
    "end": "153400"
  },
  {
    "text": "so essentially if you implement um an application for both scy collections then for spark then your application",
    "start": "153400",
    "end": "160800"
  },
  {
    "text": "should run on pedabytes of data on thousands of nodes so that is the beauty of of that so first of all let me State",
    "start": "160800",
    "end": "169120"
  },
  {
    "text": "the obvious machine learning is ubiquitous you know we see it in fraud detection to to prevent your your credit",
    "start": "169120",
    "end": "175280"
  },
  {
    "text": "card from being compromised in spam filtering natural language processing for things such as topic modeling to",
    "start": "175280",
    "end": "181360"
  },
  {
    "text": "attach the topic label to to a document to provide for example faceted search um",
    "start": "181360",
    "end": "187640"
  },
  {
    "text": "there recommender engines uh such as the ones that Netflix is using there's speech recognition",
    "start": "187640",
    "end": "194080"
  },
  {
    "text": "everywhere in your car even these days right there's question answering and it doesn't have to just be Watson there",
    "start": "194080",
    "end": "200000"
  },
  {
    "text": "Siri of course and you know we're getting to the point of having self-driving cars so really machine learning is is basically everywhere it's",
    "start": "200000",
    "end": "205959"
  },
  {
    "text": "not just a niche um solution anymore okay but to enable all of these um",
    "start": "205959",
    "end": "213040"
  },
  {
    "text": "machine learning um Solutions we need a lot of models there isn't a single uh",
    "start": "213040",
    "end": "218720"
  },
  {
    "text": "machine learning algorithm that does everything and for that reason we have to basically have different",
    "start": "218720",
    "end": "224319"
  },
  {
    "text": "implementations and unfortunately there are quite a lot of algorithms that a data scientist needs in a",
    "start": "224319",
    "end": "230040"
  },
  {
    "text": "toolbox so you know even just looking at regression itself which means at models",
    "start": "230040",
    "end": "236480"
  },
  {
    "text": "that take a bunch of either discrete or continuous input and produce a continuous output so for example trying",
    "start": "236480",
    "end": "242640"
  },
  {
    "text": "to estimate the price of a house based on the square footage um the number of",
    "start": "242640",
    "end": "247879"
  },
  {
    "text": "rooms the distance from the highway the school district Etc um uh the price is a",
    "start": "247879",
    "end": "254040"
  },
  {
    "text": "continuous um uh uh value so so for that reason we would use a regression model",
    "start": "254040",
    "end": "260680"
  },
  {
    "text": "so many people know about linear regression but there tons of other algorithms you can do regression using",
    "start": "260680",
    "end": "266000"
  },
  {
    "text": "neural networks using decision trees random Forest Etc um then comes classification so is it",
    "start": "266000",
    "end": "273840"
  },
  {
    "text": "spam is it not spam right just binary classification or multi class",
    "start": "273840",
    "end": "279160"
  },
  {
    "text": "classification um uh in which case we could probably just formulate it as a bunch of binary decisions uh and here we",
    "start": "279160",
    "end": "286880"
  },
  {
    "text": "again have tons of algorithms logistic regression naive Bays random Forest support Vector machines Etc um there's",
    "start": "286880",
    "end": "293960"
  },
  {
    "text": "also clustering so basically I I could go all day there are hundreds of algorithms and and of course the problem",
    "start": "293960",
    "end": "300039"
  },
  {
    "text": "is that if you have so many needs to to evaluate a bunch of uh business problems",
    "start": "300039",
    "end": "306960"
  },
  {
    "text": "for for potential automation using machine learning um you have to have the all of",
    "start": "306960",
    "end": "312199"
  },
  {
    "text": "these algorithms so um you know that is essentially the reason for the popularity of things such as R uh which",
    "start": "312199",
    "end": "319319"
  },
  {
    "text": "is a statistical language which has a bunch of implementations for these algorithms already so if you look at R",
    "start": "319319",
    "end": "326120"
  },
  {
    "text": "for instance they have 5,000 approximately 5,000 C iCal and machine learning packages um already available",
    "start": "326120",
    "end": "332720"
  },
  {
    "text": "so if you need to build a random Forest there it is um uh python also is becoming uh pretty",
    "start": "332720",
    "end": "340880"
  },
  {
    "text": "popular in in the machine Learning Community not so much in the statistics Community but definitely in machine learning uh packages such as theano and",
    "start": "340880",
    "end": "348360"
  },
  {
    "text": "pybrain are doing deep learning which is essentially the hottest machine learning uh set of algorithms these days there's",
    "start": "348360",
    "end": "354400"
  },
  {
    "text": "math po lib for plotting there's psyched learn for general purpose machine learning sypi for symbolic programming",
    "start": "354400",
    "end": "360479"
  },
  {
    "text": "Etc and ltk for natural language processing and um just to show you what",
    "start": "360479",
    "end": "366639"
  },
  {
    "text": "what what uh my hope is to to do in Scala is to basically have the the same",
    "start": "366639",
    "end": "372240"
  },
  {
    "text": "convenience that you can see here in this python example where in 30 lines of code I can basically train the computer",
    "start": "372240",
    "end": "378280"
  },
  {
    "text": "to recognize hand handwritten digits and in fact if you look at this code uh you",
    "start": "378280",
    "end": "383400"
  },
  {
    "text": "will realize that um there are basically only two lines of code to U train the",
    "start": "383400",
    "end": "389000"
  },
  {
    "text": "algorithm in this case is support Vector machine and two lines to predict the rest is just for pretty printing the",
    "start": "389000",
    "end": "395080"
  },
  {
    "text": "results on the screen so um this is the kind of convenience that you would expect in in a language such as Python",
    "start": "395080",
    "end": "401520"
  },
  {
    "text": "and R given all the machine learning packages so what is one to do if one is passionate about you know functional",
    "start": "401520",
    "end": "407759"
  },
  {
    "text": "programming and and high quality code uh uh in a language that may have fewer",
    "start": "407759",
    "end": "413919"
  },
  {
    "text": "libraries potentially uh but let's first focus on why why I would even bother uh you know",
    "start": "413919",
    "end": "420759"
  },
  {
    "text": "saying that oh I don't really want to program in Python or R well uh the first thing is probably a little bit cont",
    "start": "420759",
    "end": "427199"
  },
  {
    "text": "controversial because you know there are people who are passionate about lisp or or other languages which are functional",
    "start": "427199",
    "end": "432639"
  },
  {
    "text": "but are dynamically typed right so so I I just want to say with my first point I",
    "start": "432639",
    "end": "438400"
  },
  {
    "text": "don't want to start a religious War here I just want to say that this is my personal preference for machine learning",
    "start": "438400",
    "end": "443560"
  },
  {
    "text": "specifically I would really like to have static typing and the reason for this is that if you're running for example a",
    "start": "443560",
    "end": "449039"
  },
  {
    "text": "Monte car simulation that takes you know 10 hours to execute and suddenly you realize oh I have a typo in my code like",
    "start": "449039",
    "end": "456440"
  },
  {
    "text": "a literal typo just a mistyped keyword or something um um and the application",
    "start": "456440",
    "end": "461639"
  },
  {
    "text": "blows up then that's a problem because I wasted 10 hours running the application and um so so so basically",
    "start": "461639",
    "end": "469919"
  },
  {
    "text": "sure you could write a lot of tests but sometimes it's good for the compiler to help you so that's just my personal",
    "start": "469919",
    "end": "475280"
  },
  {
    "text": "preference but from an objective point of view there are other problems with these language such as um R has a really",
    "start": "475280",
    "end": "482159"
  },
  {
    "text": "terrible runtime everything is by copy um uh the memory consumption is crazy it",
    "start": "482159",
    "end": "487960"
  },
  {
    "text": "has a really bad garbage collector python has the Gil right the global interpreter lock so your your um",
    "start": "487960",
    "end": "494280"
  },
  {
    "text": "scalability is through multiprocessing like it's I don't know web programming with CGI in",
    "start": "494280",
    "end": "499440"
  },
  {
    "text": "1994 um uh so basically um it would be good to have have better Solutions but",
    "start": "499440",
    "end": "505639"
  },
  {
    "text": "you know since this is a functional Pro programming conference uh really the biggest problem for me personally is that it's imperative programming right",
    "start": "505639",
    "end": "512440"
  },
  {
    "text": "because there's no referential transparency everything is mutable uh what the hell does i++ mean",
    "start": "512440",
    "end": "518839"
  },
  {
    "text": "mathematically right in math I basically have have a function submit a value and I get a value back right so so so so",
    "start": "518839",
    "end": "526399"
  },
  {
    "text": "there's no onetoone mapping between the math and the and the and the implementation um and uh so so so so",
    "start": "526399",
    "end": "534080"
  },
  {
    "text": "frankly the biggest problem for me is the functional aspect and some people say R is a functional programming language right",
    "start": "534080",
    "end": "540000"
  },
  {
    "text": "but um it's it's not quite because it's not optimized for functional programming",
    "start": "540000",
    "end": "545120"
  },
  {
    "text": "so here for example if you try to implement a sum on a list from scratch sure you could have a helper function",
    "start": "545120",
    "end": "550320"
  },
  {
    "text": "inside a function so it's a little bit more intelligent than Java for example but it doesn't have tail recursion so if",
    "start": "550320",
    "end": "557120"
  },
  {
    "text": "I even if I write a tail recursive algorithm R will just blow up on me so I cannot use it um not a problem in Scala",
    "start": "557120",
    "end": "564839"
  },
  {
    "text": "or in any language that was actually designed to be functional right okay so",
    "start": "564839",
    "end": "570720"
  },
  {
    "text": "so Python and R have these great libraries but they're just bad environments for doing data science and actually for writing large programs in",
    "start": "570720",
    "end": "578320"
  },
  {
    "text": "my opinion so what do we do you know hopefully we don't have to start from scratch so what does the jvm offer and",
    "start": "578320",
    "end": "584240"
  },
  {
    "text": "specifically what does what a Scala offer because you know I would rather not write boiler plate Java with Builder",
    "start": "584240",
    "end": "590360"
  },
  {
    "text": "patterns and you know things like that so there are numeric abstractions for",
    "start": "590360",
    "end": "596680"
  },
  {
    "text": "for Scala um uh there's spire and Axle uh P personally I'm partial to Spire",
    "start": "596680",
    "end": "603560"
  },
  {
    "text": "it's part of the type level project along with shapeless and Scala Z and other um other popular projects it's a",
    "start": "603560",
    "end": "610000"
  },
  {
    "text": "phenomenal project everything's based on category Theory really beautiful code um and in fact they have a lot of",
    "start": "610000",
    "end": "615920"
  },
  {
    "text": "optimizations for example they have this floating Point filter that increases the accuracy of floating Point calculations",
    "start": "615920",
    "end": "621680"
  },
  {
    "text": "so you don't have to use big decimal for example which is non performant so these guys are really really smart I I don't",
    "start": "621680",
    "end": "627360"
  },
  {
    "text": "even aspire to to basically understand half of the things that they're doing um",
    "start": "627360",
    "end": "633120"
  },
  {
    "text": "it's it's definitely a very beautiful set of abstractions next comes linear algebra and optimization you know most",
    "start": "633120",
    "end": "639680"
  },
  {
    "text": "of most of machine learning is at the end based on linear algebra right you're just multiplying vectors and matrices um",
    "start": "639680",
    "end": "646519"
  },
  {
    "text": "or doing like Matrix decomposition with SVD or something so uh there are a bunch",
    "start": "646519",
    "end": "651680"
  },
  {
    "text": "of jvm based libraries such as ND forj and and mtj and egml but these are Java",
    "start": "651680",
    "end": "657560"
  },
  {
    "text": "based so your syntax is pretty bad um uh you know I don't want to write like do",
    "start": "657560",
    "end": "663560"
  },
  {
    "text": "multiply when I'm multiplying two matrices scal has operator overloading which are just method calls essentially",
    "start": "663560",
    "end": "669399"
  },
  {
    "text": "so hopefully I can do better hopefully I can have type classes hopefully I have some can have some principled",
    "start": "669399",
    "end": "675360"
  },
  {
    "text": "programming so there's Breeze this is actually the first logo um it's it's a great library for for linear algebra and",
    "start": "675360",
    "end": "681959"
  },
  {
    "text": "for optimization uh python people also are really used to um um notebook uh based",
    "start": "681959",
    "end": "689320"
  },
  {
    "text": "programming so they have the IPython notebook which is a b web- based system for plotting evaluating code and also",
    "start": "689320",
    "end": "696079"
  },
  {
    "text": "storing their results so you can see what what result what code ran and how it was evaluated and you can rerun it",
    "start": "696079",
    "end": "703360"
  },
  {
    "text": "but you you already have the code paired with the results so you don't have to recompute to to view what what was",
    "start": "703360",
    "end": "708920"
  },
  {
    "text": "generated so it's essentially like a modern version of Mathematica right just brought to the web so Scala actually has",
    "start": "708920",
    "end": "715200"
  },
  {
    "text": "a lot of those too there is Scala notebook which is essentially a a um Port of the IPython notebook to work",
    "start": "715200",
    "end": "721720"
  },
  {
    "text": "with Scala there's the spark notebook which embeds spark in in the scal notebook there's a Pache Zeppelin and",
    "start": "721720",
    "end": "727880"
  },
  {
    "text": "other projects so there's no shortage of notebooks for Scala there are a bunch of libraries for plotting too um there's",
    "start": "727880",
    "end": "734040"
  },
  {
    "text": "the lightning server which actually is language agnostic but um they have a nice Scala binding um then there's wisp",
    "start": "734040",
    "end": "741800"
  },
  {
    "text": "which is the first logo which is based on high charts uh but you basically write Scala code you don't have to write",
    "start": "741800",
    "end": "746839"
  },
  {
    "text": "any JavaScript to do the plotting which is pretty nice and Breeze has some plotting also and",
    "start": "746839",
    "end": "752320"
  },
  {
    "text": "then when it comes to machine learning itself Breeze already comes with some machine learning algorithms um there's",
    "start": "752320",
    "end": "758120"
  },
  {
    "text": "deep learning for J for deep learning although that's Java based so the syntax is again not particularly nice um but",
    "start": "758120",
    "end": "764480"
  },
  {
    "text": "the library itself is good and then um there's MLB machine learning library for spark so that scales to Big Data level",
    "start": "764480",
    "end": "771720"
  },
  {
    "text": "projects to you know multi terabyte or petabyte data sets and then there's H2O which also runs on spark this these are",
    "start": "771720",
    "end": "778160"
  },
  {
    "text": "all open source um I think the the the best part of of the Scala ecosystem for machine learning",
    "start": "778160",
    "end": "784800"
  },
  {
    "text": "is natural language processing so um since it's on the jvm you can use um the",
    "start": "784800",
    "end": "791360"
  },
  {
    "text": "gold standards in terms of you know the best language parsers such as the Stanford corl P library that one is Java",
    "start": "791360",
    "end": "797800"
  },
  {
    "text": "based but there's Scala wrappers for it but the two logos at the top epic and pck these are pure Scala",
    "start": "797800",
    "end": "804360"
  },
  {
    "text": "implementations um uh for for basically standard uh NLP problems such as part of",
    "start": "804360",
    "end": "811279"
  },
  {
    "text": "speech tagging and named entity recognition and so on and in fact um P this this logo in the in the middle um",
    "start": "811279",
    "end": "820040"
  },
  {
    "text": "that Library even runs on the gpus so so the so it's really crunches through a",
    "start": "820040",
    "end": "825079"
  },
  {
    "text": "lot of data very quickly um okay so what if there's no library for for my particular use case",
    "start": "825079",
    "end": "831880"
  },
  {
    "text": "right how difficult is to build something well in Java I would probably have to write you know tons of boiler plate just to insert the data from one",
    "start": "831880",
    "end": "838279"
  },
  {
    "text": "list to another even though they they claim that you know now there's more functional programming in Java 8 but that's not",
    "start": "838279",
    "end": "844079"
  },
  {
    "text": "really functional programming except for you know just sticking lambdas in",
    "start": "844079",
    "end": "849680"
  },
  {
    "text": "into the basic combinators but you know if you want to build something if you have a good language it really doesn't",
    "start": "849680",
    "end": "855320"
  },
  {
    "text": "take that much effort so that's that's what I'm going to show you know the the basic things apply here right you have",
    "start": "855320",
    "end": "861959"
  },
  {
    "text": "first class functions so that's great because if I have an optimized method you know I can just insert the cost",
    "start": "861959",
    "end": "867600"
  },
  {
    "text": "function and the gradient function into the as as arguments and um and and and",
    "start": "867600",
    "end": "873720"
  },
  {
    "text": "that's definitely elegant right and and obviously in in Scala just like in any",
    "start": "873720",
    "end": "878800"
  },
  {
    "text": "other functional programming language you have monads so you can create a whole pipeline of Transformations and",
    "start": "878800",
    "end": "885000"
  },
  {
    "text": "you know scal will actually let you get away with more stuff than um say hasal",
    "start": "885000",
    "end": "890519"
  },
  {
    "text": "right because it's it's it it allows you to write Java like code if if you don't want to write functional code but",
    "start": "890519",
    "end": "896920"
  },
  {
    "text": "hopefully people switch to scal for for for the reason that they want to improve their programming and become more",
    "start": "896920",
    "end": "903160"
  },
  {
    "text": "functional so then you you know you obviously could make the code referentially transparent and immutable",
    "start": "903160",
    "end": "909120"
  },
  {
    "text": "and and and declarative and use tail recursion and so on scull also has implicit so you can",
    "start": "909120",
    "end": "915560"
  },
  {
    "text": "basically generate one implementation um and and uh have implicit conversions so",
    "start": "915560",
    "end": "921240"
  },
  {
    "text": "that if if if if you're code sees the type of of a Scala list uh then it's",
    "start": "921240",
    "end": "927480"
  },
  {
    "text": "going to process that list if it instead sees a spark rdd their resilient distributed data set then it it will",
    "start": "927480",
    "end": "933959"
  },
  {
    "text": "just execute on the rdd so with the implicits you can basically provide a lot of backends without actually having",
    "start": "933959",
    "end": "939720"
  },
  {
    "text": "to rewrite any of the machine learning code and again you know with type inference and and uh name uh function",
    "start": "939720",
    "end": "946399"
  },
  {
    "text": "arguments and so on you don't have to write that kind of thing you would see in in Java machine learning libraries",
    "start": "946399",
    "end": "951639"
  },
  {
    "text": "where there's a huge Builder pattern with a lot of mutable stuff going on so",
    "start": "951639",
    "end": "956880"
  },
  {
    "text": "in the next 15 minutes or probably less I'm going to show you what what could be done quite quickly um from",
    "start": "956880",
    "end": "964680"
  },
  {
    "text": "scratch so I'm going to show two optimizers stas GR in descend in adagrad that will um be using breeze so I'm",
    "start": "964680",
    "end": "972360"
  },
  {
    "text": "going to reuse some of the libraries at least to to do linear algebra and I'm going to implement linear regression um",
    "start": "972360",
    "end": "979720"
  },
  {
    "text": "and use implicit conversions to make sure that um my implementation runs both on scal collection such as Le list",
    "start": "979720",
    "end": "986399"
  },
  {
    "text": "sequences vectors Etc and it also run runs and Spark for you know ultimate scalability on pedabytes of data on",
    "start": "986399",
    "end": "993880"
  },
  {
    "text": "thousands of nodes and um just just just to quickly review linear regression right you",
    "start": "993880",
    "end": "1000399"
  },
  {
    "text": "basically have some some value you want to predict which is on the Y AIS here and then you have um a thing that's",
    "start": "1000399",
    "end": "1007560"
  },
  {
    "text": "correlated with it on the x- axis but the correlation is imperfect right there there other dimensions that of of other",
    "start": "1007560",
    "end": "1014800"
  },
  {
    "text": "features for the data that I uh would need to consider but don't have the data for or basically the process itself is",
    "start": "1014800",
    "end": "1021800"
  },
  {
    "text": "stochastic so there's some Randomness around it but generally speaking I can use x to predict y right that can fit",
    "start": "1021800",
    "end": "1027798"
  },
  {
    "text": "the best fitting line in in it uh to to to capture the the relationship right to",
    "start": "1027799",
    "end": "1033558"
  },
  {
    "text": "minimize the sum of squared errors between the actual and predicted so if you write a linear",
    "start": "1033559",
    "end": "1039120"
  },
  {
    "text": "regression equation it's basically Y is a function of of all the X's right X X1",
    "start": "1039120",
    "end": "1045400"
  },
  {
    "text": "X2 2 XP for p dimensions and each of these X has an attached weight or or or",
    "start": "1045400",
    "end": "1051679"
  },
  {
    "text": "Co a coefficient and then it's just you know multiplying the the feature by the coefficient and summing everything up",
    "start": "1051679",
    "end": "1057919"
  },
  {
    "text": "but since it's stochastic it's not an exact equation right we have some error term and we're trying to minimize this",
    "start": "1057919",
    "end": "1064280"
  },
  {
    "text": "error um for for optimization you know these are gradient based methods so",
    "start": "1064280",
    "end": "1069360"
  },
  {
    "text": "basically I I calculate the the cost function I figure out um how the cost",
    "start": "1069360",
    "end": "1076080"
  },
  {
    "text": "changes if I change each parameter uh so I calculate the gradient essentially a partial derivative with respect to that",
    "start": "1076080",
    "end": "1082440"
  },
  {
    "text": "particular Dimension and then adjust the weight in the direction opposite to the gradient adagrad is very similar I don't",
    "start": "1082440",
    "end": "1088960"
  },
  {
    "text": "want to go through the details because it's kind of complicated but adagrad basically penalizes you for having large",
    "start": "1088960",
    "end": "1094840"
  },
  {
    "text": "gradients in the past which means you know this direction is just really unstable so try not to to to adjust in",
    "start": "1094840",
    "end": "1101360"
  },
  {
    "text": "that direction or you've seen a lot of examples in that direction because your data set is sparse and that Dimension is",
    "start": "1101360",
    "end": "1107240"
  },
  {
    "text": "very dense and other dimensions are far so I'm going to boost a dimension that is um less frequently seen because it's",
    "start": "1107240",
    "end": "1112880"
  },
  {
    "text": "more significant and then the cost function is basically uh the difference between",
    "start": "1112880",
    "end": "1118640"
  },
  {
    "text": "actual and predicted squared so if you write it in terms of linear algebra it's just X beta minus y transpose time x",
    "start": "1118640",
    "end": "1124520"
  },
  {
    "text": "beta minus y but it's basically just taking the difference between actual and predicted uh and and and squaring that",
    "start": "1124520",
    "end": "1131640"
  },
  {
    "text": "and summing up the results so uh basically let's just",
    "start": "1131640",
    "end": "1137240"
  },
  {
    "text": "quickly look at some code here here so I I think the the the most interesting",
    "start": "1137240",
    "end": "1142480"
  },
  {
    "text": "thing about this um especially considering the fact that Scout has",
    "start": "1142480",
    "end": "1148039"
  },
  {
    "text": "implicit conversions is this idea that you can provide multiple backends for for your um implementation so you write",
    "start": "1148039",
    "end": "1154400"
  },
  {
    "text": "a whole machine Le learning library and then you just swap the back end using this trait and implicits and and",
    "start": "1154400",
    "end": "1161080"
  },
  {
    "text": "basically you don't have to rewrite any of the algorithms to run on spark dup uh scolar collections Apache Flink which is",
    "start": "1161080",
    "end": "1169000"
  },
  {
    "text": "a new framework inspired by spark and so on or even like AKA streams or something",
    "start": "1169000",
    "end": "1176159"
  },
  {
    "text": "um so basically you know the trade just has a bunch of um standard uh uh",
    "start": "1176159",
    "end": "1181679"
  },
  {
    "text": "features that for example any any functional collection would have like map map reduced left flat map Etc um and",
    "start": "1181679",
    "end": "1191159"
  },
  {
    "text": "um the only thing to to remember if you want to distribute your processing is",
    "start": "1191159",
    "end": "1196320"
  },
  {
    "text": "that it's also important to have um to have an aggregate method and",
    "start": "1196320",
    "end": "1205640"
  },
  {
    "text": "aggregate basically the same as a fold but um the the sequential op here the",
    "start": "1205640",
    "end": "1211120"
  },
  {
    "text": "sequential operation is essentially what a fold is but the um combo op takes two",
    "start": "1211120",
    "end": "1217200"
  },
  {
    "text": "folds from two nodes on the cluster and then Aggregates the results from two nodes right because it's essentially",
    "start": "1217200",
    "end": "1223640"
  },
  {
    "text": "spark is a map reduced framework still so so so you're doing some IAL",
    "start": "1223640",
    "end": "1229039"
  },
  {
    "text": "processing on each node but then you have to collect the results from each nodes to aggregate them at the end so it's like a extended version of of a",
    "start": "1229039",
    "end": "1236880"
  },
  {
    "text": "fold and um once we have this trait we can basically implement it and and there",
    "start": "1236880",
    "end": "1242280"
  },
  {
    "text": "is a case class here for for traversible which is one of of the traits in scal",
    "start": "1242280",
    "end": "1247679"
  },
  {
    "text": "collections and um basically uh in this case we can just",
    "start": "1247679",
    "end": "1253120"
  },
  {
    "text": "delegate directly to the scal collections because they have these implementations um and and we do the",
    "start": "1253120",
    "end": "1259320"
  },
  {
    "text": "same thing for the rdd the spark resilient distributed data set which is a distributed Big Data version of of a",
    "start": "1259320",
    "end": "1266080"
  },
  {
    "text": "collection essentially and once we have that um we uh all we have to do is just",
    "start": "1266080",
    "end": "1274240"
  },
  {
    "text": "have these implicits here um which um if",
    "start": "1274240",
    "end": "1279760"
  },
  {
    "text": "if um if they're in your context if they're imported then um uh they can",
    "start": "1279760",
    "end": "1285440"
  },
  {
    "text": "take the um traversible the collection and if your code expects um this uh disc",
    "start": "1285440",
    "end": "1293480"
  },
  {
    "text": "data representation then it's going to do the conversion automatically and the same thing will happen for an rdd U for",
    "start": "1293480",
    "end": "1301120"
  },
  {
    "text": "spark so that basically makes your Co any code you run against is this data",
    "start": "1301120",
    "end": "1307159"
  },
  {
    "text": "trait run on both spark and Scola collections so it's really simple but it's actually very",
    "start": "1307159",
    "end": "1312200"
  },
  {
    "text": "powerful um and then we have some you know essentially beans just just you",
    "start": "1312200",
    "end": "1318279"
  },
  {
    "text": "know containers that will contain your target value uh which is the thing you",
    "start": "1318279",
    "end": "1323760"
  },
  {
    "text": "want to predict and features so the the things that explain the variation in your in your um and the thing you're",
    "start": "1323760",
    "end": "1330440"
  },
  {
    "text": "trying to predict and you know some other sort of boiler platey things such",
    "start": "1330440",
    "end": "1335799"
  },
  {
    "text": "as the optimization history you want to know what the his what the value was for the cost at each iteration of your",
    "start": "1335799",
    "end": "1341320"
  },
  {
    "text": "algorithm and what the weights were and the gradients and so on so these are probably the less interesting Parts here",
    "start": "1341320",
    "end": "1348279"
  },
  {
    "text": "but um just wanted to mention them because that's necessary to explain the",
    "start": "1348279",
    "end": "1354559"
  },
  {
    "text": "rest but the key thing is the optimizer here right so the optimizer method has",
    "start": "1354559",
    "end": "1359600"
  },
  {
    "text": "to get all the parameters from the user such as how many iterations to to to run this algorithm for and the random number",
    "start": "1359600",
    "end": "1366679"
  },
  {
    "text": "generator seed in case you want reproducibility and the initial learning",
    "start": "1366679",
    "end": "1371919"
  },
  {
    "text": "rate for the algorithm and the gradient function and the cost function and the update function which is actually the",
    "start": "1371919",
    "end": "1378679"
  },
  {
    "text": "the the specific Optimizer you might be using and the mini brch fraction which essentially means that you're not",
    "start": "1378679",
    "end": "1384440"
  },
  {
    "text": "processing your whole data set all at once but you're instead uh uh sampling and processing on just a few",
    "start": "1384440",
    "end": "1390520"
  },
  {
    "text": "observations at a time this is the scalable thing to do and it also converges faster and um you know here is this is",
    "start": "1390520",
    "end": "1399480"
  },
  {
    "text": "actually really trivial you're basically just initializing the the the the weights and the gradients with some",
    "start": "1399480",
    "end": "1405039"
  },
  {
    "text": "random numbers because you don't have any history and then you're just folding right I have some number of iterations",
    "start": "1405039",
    "end": "1412400"
  },
  {
    "text": "and uh when I'm folding um uh I I I get this accumulator",
    "start": "1412400",
    "end": "1418480"
  },
  {
    "text": "which is which is the um uh the the previous history value",
    "start": "1418480",
    "end": "1424200"
  },
  {
    "text": "right for for the cost and the gradient and so on and then if it's not the last iteration then I'm basically calling",
    "start": "1424200",
    "end": "1430760"
  },
  {
    "text": "this update function which is my Optimizer and passing the gradient function cost function and the the last",
    "start": "1430760",
    "end": "1436799"
  },
  {
    "text": "value of the history to get the new value value right so it's very standard functional programming here um but we",
    "start": "1436799",
    "end": "1443640"
  },
  {
    "text": "need to implement the optimizers so uh the implementations are actually",
    "start": "1443640",
    "end": "1449600"
  },
  {
    "text": "quite simple um in in this object uh which is",
    "start": "1449600",
    "end": "1456799"
  },
  {
    "text": "reusable across all optimizers all I'm doing is just uh sampling some data um",
    "start": "1456799",
    "end": "1463400"
  },
  {
    "text": "and uh then calling the cost function which is specific not to the optimizer but to the um machine learning model",
    "start": "1463400",
    "end": "1469919"
  },
  {
    "text": "such as linear regression logistic regression neural network Etc uh and um and and just just storing",
    "start": "1469919",
    "end": "1477960"
  },
  {
    "text": "that and then the algorithm itself as you may remember from the slides is just taking the learning rate and dividing it",
    "start": "1477960",
    "end": "1484200"
  },
  {
    "text": "by the square root of the sample size times the iteration number that's the",
    "start": "1484200",
    "end": "1489480"
  },
  {
    "text": "the change in the weight sorry in the learning rate of the stochastic gray in descent and then we're just taking the",
    "start": "1489480",
    "end": "1496399"
  },
  {
    "text": "weights and subtracting the gradients uh times this uh this new",
    "start": "1496399",
    "end": "1501760"
  },
  {
    "text": "learning rate so and because I'm using Breeze here I can actually use this symbolic notation so these are um",
    "start": "1501760",
    "end": "1508799"
  },
  {
    "text": "elementwise differences and elementwise uh multiplication in this case ITA is",
    "start": "1508799",
    "end": "1514440"
  },
  {
    "text": "just a scalar but there's also element wise multiplication for vectors um so Breeze is helping me here",
    "start": "1514440",
    "end": "1521880"
  },
  {
    "text": "because I don't at least have to think about the the linear algebra details um",
    "start": "1521880",
    "end": "1529000"
  },
  {
    "text": "and um basically this is this is really the key",
    "start": "1529000",
    "end": "1534360"
  },
  {
    "text": "um I I need some some little effort for for sampling because I may want to have sampling with um replacement or without",
    "start": "1534360",
    "end": "1542440"
  },
  {
    "text": "replacement right with replacement is really trivial I just toss the the the coin you know a particular number of",
    "start": "1542440",
    "end": "1549919"
  },
  {
    "text": "times and and the random number generator is generating a value within a particular range and it can generate",
    "start": "1549919",
    "end": "1555320"
  },
  {
    "text": "duplicates so in that so so so sampling with replacement is Trivial but if you want with without replacement then you",
    "start": "1555320",
    "end": "1561440"
  },
  {
    "text": "can do something like this right you can say I have an uh index sequence which is",
    "start": "1561440",
    "end": "1566760"
  },
  {
    "text": "my the the sequence from which I'm sampling and I have the size so the number of elements I'm drawing from it",
    "start": "1566760",
    "end": "1572840"
  },
  {
    "text": "and then I have the accumulator and basically um um you know until I get the",
    "start": "1572840",
    "end": "1579919"
  },
  {
    "text": "number of elements I want I'm just calling myself recursively and the and the index sequence from which I'm",
    "start": "1579919",
    "end": "1585039"
  },
  {
    "text": "sampling is shrinking and I'm I'm moving the element to the accumulator so what I'm sampling from will not have the",
    "start": "1585039",
    "end": "1591960"
  },
  {
    "text": "things that are already sampled so you know standard standard functional programming not not",
    "start": "1591960",
    "end": "1597039"
  },
  {
    "text": "particularly um interesting but it shows the power of using functional programming to do math right that it's",
    "start": "1597039",
    "end": "1602559"
  },
  {
    "text": "it's more obvious than than than doing imperative programming um anyway so",
    "start": "1602559",
    "end": "1608480"
  },
  {
    "text": "basically right now with this implementation we have um oh and we also need to just briefly cover the weight",
    "start": "1608480",
    "end": "1616000"
  },
  {
    "text": "the cost function here uh one",
    "start": "1616000",
    "end": "1623200"
  },
  {
    "text": "moment yeah so okay so we have the cost function for the linear regression it's just basically the sum of squar",
    "start": "1625520",
    "end": "1631399"
  },
  {
    "text": "differences between actual and predicted so that's element uh the features which",
    "start": "1631399",
    "end": "1638000"
  },
  {
    "text": "which are basically the values for the example times the weights minus the Target and then I'm just um then I'm",
    "start": "1638000",
    "end": "1643320"
  },
  {
    "text": "just mapping and and and squaring and so map reduce right very simple um so again",
    "start": "1643320",
    "end": "1649360"
  },
  {
    "text": "the power functional programming not writing for Loops or or something and the the gradient is also pretty simple",
    "start": "1649360",
    "end": "1655919"
  },
  {
    "text": "this is this is straight from linear algebra so I basically took the mathematical formula and I just wrote it",
    "start": "1655919",
    "end": "1662440"
  },
  {
    "text": "down so this is all believe it or not this is very little code and this linear",
    "start": "1662440",
    "end": "1668000"
  },
  {
    "text": "regression implementation will not just run on scolar collections but if you have you know hundreds of terabytes of",
    "start": "1668000",
    "end": "1674320"
  },
  {
    "text": "data and you have tens of nodes this can run on spark so let me just briefly demo",
    "start": "1674320",
    "end": "1681398"
  },
  {
    "text": "this um I generated a data set where I have a thousand observations of random",
    "start": "1685919",
    "end": "1692039"
  },
  {
    "text": "numbers for X for the explanatory variable or for the feature and then Y",
    "start": "1692039",
    "end": "1699080"
  },
  {
    "text": "is um uh equal to three which is The Intercept times plus 10 times the the",
    "start": "1699080",
    "end": "1706600"
  },
  {
    "text": "random number egg X for that particular example plus some um random disturbance",
    "start": "1706600",
    "end": "1712320"
  },
  {
    "text": "which is another gaussian value so so basically what I expect is that um the",
    "start": "1712320",
    "end": "1718679"
  },
  {
    "text": "estimated coefficients are three and 10 because uh that's how I generated my data set and um and as you can see here",
    "start": "1718679",
    "end": "1728039"
  },
  {
    "text": "this adagrad Optimizer seems really unstable at the beginning whereas St gastic gradi in descent seems stable but",
    "start": "1728039",
    "end": "1733840"
  },
  {
    "text": "if I actually zoom in towards the end and this is the Wisp library for Scala",
    "start": "1733840",
    "end": "1740440"
  },
  {
    "text": "for plotting which uses high charts internally um then you will see that um",
    "start": "1740440",
    "end": "1748360"
  },
  {
    "text": "the stochastic gradient descendant converge as well the cost is actually higher the error rate is higher so in",
    "start": "1748360",
    "end": "1753720"
  },
  {
    "text": "fact if we look at this right we expected The Intercept to be three and the and the slope to be 10 and",
    "start": "1753720",
    "end": "1760440"
  },
  {
    "text": "stochastic gradient Des estimated 3.4 and 9.2 whereas adagrad estimated 3 and 10 so adagrad had much bigger at the",
    "start": "1760440",
    "end": "1768600"
  },
  {
    "text": "beginning and then and then it actually converts to a better value at the end so you know everything with machine",
    "start": "1768600",
    "end": "1774360"
  },
  {
    "text": "learning has to do with basically um you know empirical evaluation there may be theories about how these algorithms",
    "start": "1774360",
    "end": "1781000"
  },
  {
    "text": "behave but nothing replaces actually seeing it so plotting is actually really important so what I showed here is that",
    "start": "1781000",
    "end": "1788720"
  },
  {
    "text": "you know the ecosystem isn't completely non-existent that libraries exist for",
    "start": "1788720",
    "end": "1794080"
  },
  {
    "text": "natural language processing machine learning Etc but also if you want to build something really quickly you can reuse these components like I wouldn't",
    "start": "1794080",
    "end": "1800840"
  },
  {
    "text": "want to write my own plotting Library I wouldn't want to write my own linear algebra library but I want to have the",
    "start": "1800840",
    "end": "1806600"
  },
  {
    "text": "linear regression work on spark for example so then you know just connect the components benefit from from uh from",
    "start": "1806600",
    "end": "1813760"
  },
  {
    "text": "the functional constructs not to write too much boiler plate and it's actually not that hard and um so I guess that's",
    "start": "1813760",
    "end": "1821519"
  },
  {
    "text": "essentially it I I'm I hope I hope I haven't gone over time um but uh if any",
    "start": "1821519",
    "end": "1828000"
  },
  {
    "text": "anyone has any questions I would love to answer",
    "start": "1828000",
    "end": "1833320"
  },
  {
    "text": "them no",
    "start": "1838799",
    "end": "1842039"
  },
  {
    "text": "questions sure that is a very good question you know because I I I was actually really lucky I used to be that",
    "start": "1852279",
    "end": "1858840"
  },
  {
    "text": "mat lab data scientist five years ago and I I I had the great pleasure of",
    "start": "1858840",
    "end": "1864360"
  },
  {
    "text": "working with a real software architect who basically inspired me um I think a",
    "start": "1864360",
    "end": "1869600"
  },
  {
    "text": "mentorship has has a lot to do with it you know people are smart and they're probably interested in doing things",
    "start": "1869600",
    "end": "1875919"
  },
  {
    "text": "better it's just that they have to be nurtured to do so you know if if you're if you're getting a whole team of hco",
    "start": "1875919",
    "end": "1882159"
  },
  {
    "text": "programmers and and you expect the data scientist to pick it up right away maybe they will not pick it up the next day",
    "start": "1882159",
    "end": "1887600"
  },
  {
    "text": "but but if if um if uh there is actual",
    "start": "1887600",
    "end": "1893360"
  },
  {
    "text": "mentorship I'm I'm pretty sure there'll be ASP passionate about that as I am you know because obviously functional",
    "start": "1893360",
    "end": "1898799"
  },
  {
    "text": "programming has a better mapping to math than than does imperative programming or",
    "start": "1898799",
    "end": "1904080"
  },
  {
    "text": "or or unprincipled programming in general right so um so it's totally",
    "start": "1904080",
    "end": "1909960"
  },
  {
    "text": "possible um I've been observing a data scientist that I used to work with in the previous company she's now at a new",
    "start": "1909960",
    "end": "1916360"
  },
  {
    "text": "company and she I don't think she was prohibited from using R per se or python",
    "start": "1916360",
    "end": "1921919"
  },
  {
    "text": "because for example spark has a py spark API so you can use Python instead but the company really wanted",
    "start": "1921919",
    "end": "1930960"
  },
  {
    "text": "the the code base to be more legible and to to have type checking and to have and",
    "start": "1930960",
    "end": "1936279"
  },
  {
    "text": "to have you know all the functional constructs and so on so they made a point to ask her to to get up to speed",
    "start": "1936279",
    "end": "1944240"
  },
  {
    "text": "and you know she found it interesting and I saw her at the spark Summit a few days ago and basically she said you know",
    "start": "1944240",
    "end": "1950240"
  },
  {
    "text": "I may not be a scal expert I may not know how to write scal macros I may not know about you",
    "start": "1950240",
    "end": "1956200"
  },
  {
    "text": "know uh I don't know monad is a monoid in the category of endofunctors type of",
    "start": "1956200",
    "end": "1961440"
  },
  {
    "text": "thing but she was uh she was definitely really interested in getting better at",
    "start": "1961440",
    "end": "1967760"
  },
  {
    "text": "at at development uh in general not just using a better language and so I think I",
    "start": "1967760",
    "end": "1974639"
  },
  {
    "text": "think it's it's a matter of inspiration essentially um and of course people will whine a",
    "start": "1974639",
    "end": "1980960"
  },
  {
    "text": "little bit that hey I don't have a thousand libraries like for data science that sometimes I have to build something",
    "start": "1980960",
    "end": "1987080"
  },
  {
    "text": "but they'll actually realize oh it scales and I don't have to use multiprocessing to scale and and I will",
    "start": "1987080",
    "end": "1994120"
  },
  {
    "text": "not run into a bug later on because the type system helps me or because the the",
    "start": "1994120",
    "end": "1999880"
  },
  {
    "text": "constructs are better and just just the functional program programming construct themselves so yes data science could",
    "start": "1999880",
    "end": "2008200"
  },
  {
    "text": "actually do functional programming are rather rare but it's but I really found",
    "start": "2008200",
    "end": "2013960"
  },
  {
    "text": "it's a matter of inspiration not the lack of Interest they just don't know what they're missing if you show it to them they'll they'll really uh never",
    "start": "2013960",
    "end": "2021440"
  },
  {
    "text": "look back that's just my",
    "start": "2021440",
    "end": "2026960"
  },
  {
    "text": "observation thank you",
    "start": "2030360",
    "end": "2034559"
  }
]