[
  {
    "start": "0",
    "end": "22000"
  },
  {
    "text": "[Music]",
    "start": "3520",
    "end": "7840"
  },
  {
    "text": "Daniel and welcome to what's new in Swift they asked to talk about some of the things that are new in Swift and",
    "start": "12410",
    "end": "18350"
  },
  {
    "text": "you'll see the things that I care about cuz we'll spend more time on those of course there's the really big things",
    "start": "18350",
    "end": "23580"
  },
  {
    "start": "22000",
    "end": "105000"
  },
  {
    "text": "that we've seen in the last year like a bi-stability which doesn't mean so much to us day-to-day but if you have time to",
    "start": "23580",
    "end": "30689"
  },
  {
    "text": "read what went into it it's kind of cool it's the memory layout and the interaction with see and and all the",
    "start": "30689",
    "end": "36000"
  },
  {
    "text": "things that kind of needed to happen and then of course this year we got the module stability but let's start with",
    "start": "36000",
    "end": "41460"
  },
  {
    "text": "some little things and this is one of my favorite little things we have a little function here that takes an int and",
    "start": "41460",
    "end": "47010"
  },
  {
    "text": "returns an int and we return two times the input and one of the nicest things in Swift 5:1 is return is gone and it's",
    "start": "47010",
    "end": "56370"
  },
  {
    "text": "gonna look strange to you it's gonna look strange to you but think about the",
    "start": "56370",
    "end": "62190"
  },
  {
    "text": "Swift you right now none of you use a semicolon at the end of the line and that kind of looks strange - in the",
    "start": "62190",
    "end": "67200"
  },
  {
    "text": "beginning - now the thing that's odd though is it's only for single expressions and so if you put a print",
    "start": "67200",
    "end": "72570"
  },
  {
    "text": "statement here this breaks the code it doesn't it doesn't compile if I have an if and if is a statement not an",
    "start": "72570",
    "end": "79590"
  },
  {
    "text": "expression and so I actually can't do this here either because it's for single",
    "start": "79590",
    "end": "84720"
  },
  {
    "text": "expression functions and so I need a return here and here and so in those",
    "start": "84720",
    "end": "89939"
  },
  {
    "text": "cases where you can it's kind of nice to use especially in places like this custom string convertible where you've",
    "start": "89939",
    "end": "97290"
  },
  {
    "text": "got a computed property that's essentially the same as a function and so you can get rid of your return there",
    "start": "97290",
    "end": "102899"
  },
  {
    "text": "and that reads cleaner little things that came up on us and then we'll get to",
    "start": "102899",
    "end": "108600"
  },
  {
    "start": "105000",
    "end": "181000"
  },
  {
    "text": "the swift UI and other stuff like that ross strings i don't know if any of you use raw strings but if you write",
    "start": "108600",
    "end": "115350"
  },
  {
    "text": "something like this i say happy birthday do whatever age you are this prints this",
    "start": "115350",
    "end": "120960"
  },
  {
    "text": "out but what if you wanted to put quotes around the happy birthday so what if you",
    "start": "120960",
    "end": "125969"
  },
  {
    "text": "wanted to say happy birthday in quotes well this wouldn't compile of course because that would delimit strings like",
    "start": "125969",
    "end": "133470"
  },
  {
    "text": "that happy birthdays kind of in the middle so what they gave us in se 200 is this new",
    "start": "133470",
    "end": "139230"
  },
  {
    "text": "annotation before this pound sign and so now you can put quotes before the happy birthday and it's not confused because",
    "start": "139230",
    "end": "145980"
  },
  {
    "text": "those are different quotes and this now puts the quotes around that but oh the",
    "start": "145980",
    "end": "151860"
  },
  {
    "text": "slashes are printed because those are literals and we can fix the slashes by",
    "start": "151860",
    "end": "157830"
  },
  {
    "text": "saying well we've got our pounds there let's just go ahead and pound escape those as well",
    "start": "157830",
    "end": "163709"
  },
  {
    "text": "and so when we pound escape the slashes then we get the thing that we want and so these are the raw strings and this",
    "start": "163709",
    "end": "169319"
  },
  {
    "text": "works with multi-line I don't know if any of you use multi-line strings but it's the same thing there and notice that I've pound slash the end of the",
    "start": "169319",
    "end": "176670"
  },
  {
    "text": "line as well so now you see something like this fun let's do more a string",
    "start": "176670",
    "end": "184829"
  },
  {
    "start": "181000",
    "end": "222000"
  },
  {
    "text": "interpolation switched as well and so string interpolation is when you do the slash parenthesis to print something out",
    "start": "184829",
    "end": "190799"
  },
  {
    "text": "and suppose I have a dog because for some reason I'm obsessed with dog examples today you can now provide an",
    "start": "190799",
    "end": "198510"
  },
  {
    "text": "extension now the extension is to string but you're specifying it in the case that it's a dog and you're saying well",
    "start": "198510",
    "end": "205620"
  },
  {
    "text": "what do I want to do in case it's a dog and so maybe if you escaped a dog I'll",
    "start": "205620",
    "end": "211530"
  },
  {
    "text": "put the dog's name and the dog's age and so now when you print dog like this you get Annabelle is 84 years old and so you",
    "start": "211530",
    "end": "219480"
  },
  {
    "text": "can make your strengths much more expressive key paths how many of yous",
    "start": "219480",
    "end": "226530"
  },
  {
    "start": "222000",
    "end": "315000"
  },
  {
    "text": "KeePass to you'll use them more in the",
    "start": "226530",
    "end": "232950"
  },
  {
    "text": "future they're becoming they're becoming bigger and bigger and so in this case I have",
    "start": "232950",
    "end": "239910"
  },
  {
    "text": "two phrases and suppose we're testing whether something is a palindrome that it reads the same from front to back and",
    "start": "239910",
    "end": "245669"
  },
  {
    "text": "so I might take this string and the way you find out if it's a palindrome is you make everything lowercase you get rid of",
    "start": "245669",
    "end": "252090"
  },
  {
    "text": "the punctuation you push everything together you normalize it and so we might normalize it by taking our string",
    "start": "252090",
    "end": "259320"
  },
  {
    "text": "and filtering out all the white space and filtering out all the punctuation",
    "start": "259320",
    "end": "265880"
  },
  {
    "text": "doesn't that dollars zero dot look horrible yes Daniel it",
    "start": "265880",
    "end": "271530"
  },
  {
    "text": "does and then you lowercase it this dollar zero we know what it means take",
    "start": "271530",
    "end": "277950"
  },
  {
    "text": "whatever's coming in and get rid of it if it's not white space or keep it if it's not white space but if we use key",
    "start": "277950",
    "end": "285660"
  },
  {
    "text": "paths instead it's this and so instead of the dollar zero this is now part of",
    "start": "285660",
    "end": "290880"
  },
  {
    "text": "Swift we can use key path expressions inside of functions and it just makes it to me look more readable more friendly",
    "start": "290880",
    "end": "297990"
  },
  {
    "text": "using these these key paths inside now don't get excited it didn't make it in",
    "start": "297990",
    "end": "303780"
  },
  {
    "text": "yet it was there it got implemented but they didn't pull it into the main branch",
    "start": "303780",
    "end": "309390"
  },
  {
    "text": "and so it's coming soon it has been approved it has been implemented but",
    "start": "309390",
    "end": "314820"
  },
  {
    "text": "it's not there yet is anyone using combine yet if you're using combine a",
    "start": "314820",
    "end": "320580"
  },
  {
    "start": "315000",
    "end": "404000"
  },
  {
    "text": "little bit you'll notice that you can do this in the combine map and filter there they've implemented it there it's just",
    "start": "320580",
    "end": "326040"
  },
  {
    "text": "not in the regular map and such okay how do I make this work how would I code",
    "start": "326040",
    "end": "332400"
  },
  {
    "text": "this up since it's not in there yet so if I have a sequence I can sort it based on all sorts of factors and so instead",
    "start": "332400",
    "end": "339780"
  },
  {
    "text": "of dollar zero and dollar one if I wanted to do it just by key paths I would have something that is generic and",
    "start": "339780",
    "end": "346680"
  },
  {
    "text": "and attribute and the attribute has to be comparable because I got to be able to tell which one comes first and now",
    "start": "346680",
    "end": "352140"
  },
  {
    "text": "this is horrible-looking but we write this once and then we use it in code that looks nice and that's sort of the",
    "start": "352140",
    "end": "358169"
  },
  {
    "text": "key to what we do we're gonna compare it we're gonna sort it by key path and so you're gonna say well what key path and",
    "start": "358169",
    "end": "364650"
  },
  {
    "text": "you're gonna just pass that in and you're gonna tell me what it means to be increasing and I'll get back an array",
    "start": "364650",
    "end": "370440"
  },
  {
    "text": "and so we'll sort we have two elements and we'll ask are we doing it in",
    "start": "370440",
    "end": "375570"
  },
  {
    "text": "increasing or decreasing order if we're doing an increasing order then we'll look at the first element by its key",
    "start": "375570",
    "end": "381840"
  },
  {
    "text": "path and what key path lets you do inside is you treat things as if their dictionary elements and so that's why",
    "start": "381840",
    "end": "388290"
  },
  {
    "text": "we're doing first and we're accessing the key path that we're being given and so we're comparing things and otherwise",
    "start": "388290",
    "end": "394290"
  },
  {
    "text": "we'll do it in in decreasing order and it allows us to do these things like filter by whitespace sort by increasing",
    "start": "394290",
    "end": "404270"
  },
  {
    "start": "404000",
    "end": "583000"
  },
  {
    "text": "how many views the result type how many of you wrote your own result type before",
    "start": "404270",
    "end": "409289"
  },
  {
    "text": "it's four five so we all did right and so a result type is kind of like an",
    "start": "409289",
    "end": "415860"
  },
  {
    "text": "optional on steroids and so if you have an optional an optional either has a",
    "start": "415860",
    "end": "421800"
  },
  {
    "text": "value or it doesn't and so it either works or it doesn't work and we don't",
    "start": "421800",
    "end": "428220"
  },
  {
    "text": "know why if it doesn't work if it works we wrap the successful value in and we pass that on if it doesn't work we just",
    "start": "428220",
    "end": "434280"
  },
  {
    "text": "return nil and what result says is well if it doesn't work we're gonna tell you why and so result has two cases in the",
    "start": "434280",
    "end": "442530"
  },
  {
    "text": "it's an ax new like optional it is generic and success like optional so",
    "start": "442530",
    "end": "447930"
  },
  {
    "text": "optional has optional is generic and wrapped but it's that successful value so if it's a success we'll return that",
    "start": "447930",
    "end": "454440"
  },
  {
    "text": "and if it's a failure will return the failure and tell you why so if it's a",
    "start": "454440",
    "end": "460320"
  },
  {
    "text": "success we'd say dot success and we tell you what the value is and if it's a failure we don't return nil anymore",
    "start": "460320",
    "end": "465750"
  },
  {
    "text": "we've turned dot failure and we tell you what the failure is and in this case failure has to conform to error that's",
    "start": "465750",
    "end": "472770"
  },
  {
    "text": "why it took so long for them to implement it because they needed things like error has to conform to error and",
    "start": "472770",
    "end": "477810"
  },
  {
    "text": "so failure conforms to error and so we return these tuples",
    "start": "477810",
    "end": "482820"
  },
  {
    "text": "if you know other languages if you know languages like Haskell this is like an either type and so you",
    "start": "482820",
    "end": "488760"
  },
  {
    "text": "see these types and in functional languages it's that thing where Swift isn't a functional language but it",
    "start": "488760",
    "end": "495300"
  },
  {
    "text": "pretends it can be and so it can doing a lot of functional things so here's a function called doubled I'm going to",
    "start": "495300",
    "end": "503070"
  },
  {
    "text": "return a result type and if it's successful I'll just double the number and return that int and if it's not",
    "start": "503070",
    "end": "509340"
  },
  {
    "text": "successful I'll tell you why I'll give you my input out-of-bounds error and in this case if I input out of the bounds",
    "start": "509340",
    "end": "515580"
  },
  {
    "text": "error conforms to error or I couldn't use it and result type and it either is this well you gave me a negative number I",
    "start": "515580",
    "end": "522300"
  },
  {
    "text": "can't double that or you gave me a number that's too big and I'll tell you how much too big it was so this",
    "start": "522300",
    "end": "527699"
  },
  {
    "text": "contrived example I'm only gonna be able to double things that are say less than ten and so I",
    "start": "527699",
    "end": "533940"
  },
  {
    "text": "have this doubled and I check and they say well you've got to be at least zero",
    "start": "533940",
    "end": "539010"
  },
  {
    "text": "if you're not at least zero I'm gonna return the result that's a failure and the failure is you are a negative number",
    "start": "539010",
    "end": "544980"
  },
  {
    "text": "look at that information you get you could do all sorts of switching and understanding based on that if you're",
    "start": "544980",
    "end": "551850"
  },
  {
    "text": "less than or equal to ten well I'm pretty happy but if you're not less than",
    "start": "551850",
    "end": "557490"
  },
  {
    "text": "or equal to ten I'm gonna have to report a failure so if you're less than or equal to ten I'll report a success and",
    "start": "557490",
    "end": "564240"
  },
  {
    "text": "if you're greater than ten I've got a failure and I'll tell you how much you're over and so if you're in the good",
    "start": "564240",
    "end": "569790"
  },
  {
    "text": "range it's a success and I'll return the actual doubled value now you know how",
    "start": "569790",
    "end": "576540"
  },
  {
    "text": "sometimes optionals are a pain because you have to reach inside and get the thing you have to unwrap it somehow it's",
    "start": "576540",
    "end": "583440"
  },
  {
    "start": "583000",
    "end": "707000"
  },
  {
    "text": "the same pain here when I doubled to I don't get four I get successive four so",
    "start": "583440",
    "end": "589590"
  },
  {
    "text": "I'm gonna have to reach inside and so I can't do things like double takes an INT I can't do doubled doubled because the",
    "start": "589590",
    "end": "597840"
  },
  {
    "text": "first doubled returns a success you say aha Daniel how do we deal with this",
    "start": "597840",
    "end": "603780"
  },
  {
    "text": "that's why we have map and the map that we have here is similar to the map we",
    "start": "603780",
    "end": "609120"
  },
  {
    "text": "have for array it's similar to the map that we have for optional and so the result type comes with a map the map",
    "start": "609120",
    "end": "616350"
  },
  {
    "text": "says you're a function from int to something that something is our new success and so I'll be generic in that",
    "start": "616350",
    "end": "622740"
  },
  {
    "text": "new success you'll have to tell me what the rule is for transforming what's inside how do I transform my int to that",
    "start": "622740",
    "end": "629520"
  },
  {
    "text": "new success well I'm gonna return a result of that new success and I'm going",
    "start": "629520",
    "end": "635280"
  },
  {
    "text": "to keep the same failure type so there's only two cases if you're giving me a",
    "start": "635280",
    "end": "640380"
  },
  {
    "text": "result you're either giving me a failure or you're giving me a success if you",
    "start": "640380",
    "end": "645690"
  },
  {
    "text": "give me a failure I return a failure and whatever failed before I just pass along that message so this is a lot like",
    "start": "645690",
    "end": "652589"
  },
  {
    "text": "optional chaining and if you gave me a success I reach inside and I get doubled",
    "start": "652589",
    "end": "659850"
  },
  {
    "text": "- with success of four so I reach inside and I grab that four I double four and",
    "start": "659850",
    "end": "666060"
  },
  {
    "text": "then I rewrap it now a success of eight and so doubled of double two doesn't make any sense but I",
    "start": "666060",
    "end": "672660"
  },
  {
    "text": "can take double two and I can map it using doubled again and that gives me success and so result-type allows us to",
    "start": "672660",
    "end": "680550"
  },
  {
    "text": "do things like take a URL from a string well that could fail go ahead and hit",
    "start": "680550",
    "end": "687329"
  },
  {
    "text": "that URL and see what we get back I hope I get data back that could fail if I get",
    "start": "687329",
    "end": "692879"
  },
  {
    "text": "data back turn it into JSON that could fail well if I do each one of these in a result then I can pipe through nicely",
    "start": "692879",
    "end": "699749"
  },
  {
    "text": "and my first failure just like optional chaining my first failures of failure and my successes I use these maps to",
    "start": "699749",
    "end": "706079"
  },
  {
    "text": "just keep going so you might have noticed that Google's kind of interested",
    "start": "706079",
    "end": "713519"
  },
  {
    "start": "707000",
    "end": "775000"
  },
  {
    "text": "in dynamic languages and the father of swift is at Google so now Swift is",
    "start": "713519",
    "end": "718949"
  },
  {
    "text": "interested in dynamic languages so getting things that we can call into python nicely becomes important in some",
    "start": "718949",
    "end": "725399"
  },
  {
    "text": "so many ways and that benefits us when it comes to machine learning and augmented reality because a lot of the",
    "start": "725399",
    "end": "731449"
  },
  {
    "text": "basic work is done in scripting languages at least till we bring it over to Swift and so here is a struct called",
    "start": "731449",
    "end": "740129"
  },
  {
    "text": "days it contains an array with Monday Tuesday Wednesday Thursday Friday Saturday Sunday and so I created an",
    "start": "740129",
    "end": "745619"
  },
  {
    "text": "instance of days and now in my extension I can look at a sub script and I don't",
    "start": "745619",
    "end": "753360"
  },
  {
    "text": "know that you're taking full advantage of subscripts because as part of this work they've added some stuff to",
    "start": "753360",
    "end": "758610"
  },
  {
    "text": "subscripts it's kind of nice now subscripts we mainly thinking think of like get at that index and so if you",
    "start": "758610",
    "end": "764819"
  },
  {
    "text": "tell me days to then I'll get the third element of that array if my subscript",
    "start": "764819",
    "end": "772169"
  },
  {
    "text": "says reach inside and return the values at that index so days one is Tuesday but",
    "start": "772169",
    "end": "779579"
  },
  {
    "start": "775000",
    "end": "803000"
  },
  {
    "text": "you can have other parameters in your sub script so I don't know if you guys are doing this but this is kind of",
    "start": "779579",
    "end": "785129"
  },
  {
    "text": "clever your first parameter is still the index but you can say I have other parameters that I passed in and so maybe",
    "start": "785129",
    "end": "791699"
  },
  {
    "text": "is reversed as one of them and so when I reach in there if I'm in the regular",
    "start": "791699",
    "end": "797639"
  },
  {
    "text": "order I'll return values index if I'm reversed a out from the other direction so days 1",
    "start": "797639",
    "end": "804630"
  },
  {
    "start": "803000",
    "end": "917000"
  },
  {
    "text": "were reversed as false is Tuesday still going in regular order but if it's true",
    "start": "804630",
    "end": "810510"
  },
  {
    "text": "it's Saturday and this second parameter in subscripts is really powerful",
    "start": "810510",
    "end": "815540"
  },
  {
    "text": "something you're gonna like along with a",
    "start": "815540",
    "end": "821490"
  },
  {
    "text": "lot of these came 195 which was dynamic member look up and so you tagged it with at dynamic member lookup you're seeing a",
    "start": "821490",
    "end": "828660"
  },
  {
    "text": "lot of ATS and dollar signs and things come into Swift and makes it a little funny so here's my dog my dog has",
    "start": "828660",
    "end": "837779"
  },
  {
    "text": "properties that are some dictionary they're key value pairs where the key is a string and the value is something that",
    "start": "837779",
    "end": "845070"
  },
  {
    "text": "can be displayed as a string and so I can describe my subscript in here my",
    "start": "845070",
    "end": "850560"
  },
  {
    "text": "subscript says you specify the dynamic number and I'll output the string if it",
    "start": "850560",
    "end": "856560"
  },
  {
    "text": "exists you might ask me for something that isn't actually a member and so I'll",
    "start": "856560",
    "end": "861630"
  },
  {
    "text": "take my properties I'll look up to see do I have a member by that name and if I do I will output it so if I create an",
    "start": "861630",
    "end": "869730"
  },
  {
    "text": "instance of my dog Anabel now the dog takes these key value pairs so Anabel is",
    "start": "869730",
    "end": "876089"
  },
  {
    "text": "a dog where the properties are her age is 12 her name is Annabelle and so if I ask",
    "start": "876089",
    "end": "882060"
  },
  {
    "text": "Annabelle's age dynamic member lookup works great if I asked for her name it",
    "start": "882060",
    "end": "889110"
  },
  {
    "text": "works great if I ask if she's vaccinated that's not one of the properties it",
    "start": "889110",
    "end": "895500"
  },
  {
    "text": "returns an optional it returns nil but this turns talking to these Swift",
    "start": "895500",
    "end": "901500"
  },
  {
    "text": "classes to these Swift types to be done a lot like we talked to Python objects",
    "start": "901500",
    "end": "907380"
  },
  {
    "text": "and so it makes it easy for us to work across languages so that's dynamic member lookup in Swift 5-1 we got the",
    "start": "907380",
    "end": "915120"
  },
  {
    "text": "pair to that which is dynamic Colleyville dynamic caller bo is if I",
    "start": "915120",
    "end": "920760"
  },
  {
    "start": "917000",
    "end": "1037000"
  },
  {
    "text": "start with a silly example I have this dynamic call method that takes arguments",
    "start": "920760",
    "end": "926190"
  },
  {
    "text": "my arguments in this case our elements of an array so I have an array and it returns an int and in this case I'm just",
    "start": "926190",
    "end": "933180"
  },
  {
    "text": "gonna tell you how many elements there are so in my example if I create an instance of silly example and I say give me",
    "start": "933180",
    "end": "939900"
  },
  {
    "text": "example 1 2 3 it just gives me the count of how many elements that are 3 it's not",
    "start": "939900",
    "end": "945900"
  },
  {
    "text": "a useful example it's a silly example if I create example with 1 and a string a",
    "start": "945900",
    "end": "953130"
  },
  {
    "text": "it tells me there's two elements so it doesn't even have to be a homogeneous collection it could be any type now a",
    "start": "953130",
    "end": "961560"
  },
  {
    "text": "more useful example of this is instead of using an array there what if I give",
    "start": "961560",
    "end": "968490"
  },
  {
    "text": "you arguments that are these key value pairs and I return to you a dictionary",
    "start": "968490",
    "end": "975440"
  },
  {
    "text": "key value types strings so here's how I implement it I create",
    "start": "975440",
    "end": "981480"
  },
  {
    "text": "this empty dictionary and now I fill it for every argument you pass in I add",
    "start": "981480",
    "end": "988050"
  },
  {
    "text": "this to the dictionary I say result with the key name is the description and so",
    "start": "988050",
    "end": "993390"
  },
  {
    "text": "now in my example if I have my example where the name is Anabelle in the ages",
    "start": "993390",
    "end": "998400"
  },
  {
    "text": "12 what you get out is this now remember order of a dictionaries not guaranteed so it's never not necessarily going to",
    "start": "998400",
    "end": "1005300"
  },
  {
    "text": "be in the same order but this is pretty powerful this isn't something we could do in Swift before and it helps us",
    "start": "1005300",
    "end": "1011540"
  },
  {
    "text": "interact with any scripting languages in a much friendlier way okay what happened",
    "start": "1011540",
    "end": "1019940"
  },
  {
    "text": "this year what was the big release we got two big releases we got Swift UI we",
    "start": "1019940",
    "end": "1025189"
  },
  {
    "text": "got combined an apple right before we saw them announced all these Swift",
    "start": "1025190",
    "end": "1030560"
  },
  {
    "text": "evolution projects that we didn't see why and they said oo reasons you're gonna love these and one of these was",
    "start": "1030560",
    "end": "1037579"
  },
  {
    "start": "1037000",
    "end": "1202000"
  },
  {
    "text": "the opaque result type the opaque result type is kind of interesting it's used",
    "start": "1037580",
    "end": "1043370"
  },
  {
    "text": "all over Swift UI how many of you are playing with Swift UI great you guys",
    "start": "1043370",
    "end": "1049640"
  },
  {
    "text": "need to be more adventurous and so in",
    "start": "1049640",
    "end": "1054770"
  },
  {
    "text": "Swift UI we have something that returns some view and you say well what view I",
    "start": "1054770",
    "end": "1061850"
  },
  {
    "text": "don't know some view in this case it's returning a text the opaque part",
    "start": "1061850",
    "end": "1068740"
  },
  {
    "text": "the word some and you say well what I'd really like to do is just say body return something that conforms to view",
    "start": "1068740",
    "end": "1075550"
  },
  {
    "text": "I'd like to do it like this you cannot just say it returns a protocol what you're saying is it returns something",
    "start": "1075550",
    "end": "1081940"
  },
  {
    "text": "that conforms to the protocol and what you're telling the compiler is at compile time you'll know what I'm",
    "start": "1081940",
    "end": "1088990"
  },
  {
    "text": "returning you don't have to guess so in this case it's text you know how big a",
    "start": "1088990",
    "end": "1094929"
  },
  {
    "text": "text is you know how to store it I could return image you know how big an images",
    "start": "1094929",
    "end": "1100780"
  },
  {
    "text": "you know how to store it what you can't do is say sometimes it's a text",
    "start": "1100780",
    "end": "1105970"
  },
  {
    "text": "sometimes it's an image so if I have this go to image and I want to display",
    "start": "1105970",
    "end": "1114040"
  },
  {
    "text": "it what I can't do is I can't say if that image exists display the image",
    "start": "1114040",
    "end": "1120190"
  },
  {
    "text": "otherwise display the text because the compiler says well what are you giving me back a text or an image I need to",
    "start": "1120190",
    "end": "1127059"
  },
  {
    "text": "know a compile-time and because this depends on something that isn't known to run time this",
    "start": "1127059",
    "end": "1132520"
  },
  {
    "text": "crashes and so some view says I need to be able to determine what you're",
    "start": "1132520",
    "end": "1138160"
  },
  {
    "text": "returning to me you can't sometimes return an image and sometimes return a text I just can't handle that in this",
    "start": "1138160",
    "end": "1149980"
  },
  {
    "text": "case because it's if and else we saw before we also need returns in there but",
    "start": "1149980",
    "end": "1155200"
  },
  {
    "text": "that's not the issue the issue is that even with the returns it needs to know what it is and the air you get from",
    "start": "1155200",
    "end": "1162130"
  },
  {
    "text": "Swift you I and I show you this one because it's actually one that makes sense those you that came from Objective",
    "start": "1162130",
    "end": "1169030"
  },
  {
    "text": "C to Swift remember in the early days of Swift the the errors were just horrible it would say I expect this function to",
    "start": "1169030",
    "end": "1176470"
  },
  {
    "text": "return a string but it returns a string I don't know what that means so it's the",
    "start": "1176470",
    "end": "1182770"
  },
  {
    "text": "same in Swift you I the errors are a little puzzling right now but they're getting better and so this says look you",
    "start": "1182770",
    "end": "1188380"
  },
  {
    "text": "declared an opaque return type but the return statements don't have matching ones a text ones an image they don't",
    "start": "1188380",
    "end": "1195490"
  },
  {
    "text": "match so I can't deal with this so that's that's a powerful one",
    "start": "1195490",
    "end": "1201130"
  },
  {
    "text": "okay function builders function builders",
    "start": "1201130",
    "end": "1207690"
  },
  {
    "start": "1202000",
    "end": "1382000"
  },
  {
    "text": "allow us to say look I want to show the image and the text at the same time now",
    "start": "1207690",
    "end": "1214480"
  },
  {
    "text": "I can't do this because body has to return a single thing it can't return an",
    "start": "1214480",
    "end": "1220419"
  },
  {
    "text": "image and text so we put the image in the text inside of a vertical stack and",
    "start": "1220419",
    "end": "1225940"
  },
  {
    "text": "now I'm returning one thing a vertical stack that contains other things and this is fine it's a vertical stack that",
    "start": "1225940",
    "end": "1232450"
  },
  {
    "text": "contains an image and text and so I get this lovely image above this lovely text",
    "start": "1232450",
    "end": "1238559"
  },
  {
    "text": "this depends on something called function builders now if you've been watching I've been including the number",
    "start": "1238559",
    "end": "1245440"
  },
  {
    "text": "of the proposal along the way and this just says xxx",
    "start": "1245440",
    "end": "1250510"
  },
  {
    "text": "because it didn't make it in what happened was after the keynote this year",
    "start": "1250510",
    "end": "1256780"
  },
  {
    "text": "Apple said oh by the way here's the function builders proposal and the community freaked out and the community",
    "start": "1256780",
    "end": "1263860"
  },
  {
    "text": "said we're supposed to be open source you were supposed to tell us about this now you've just put it into Swift UI so",
    "start": "1263860",
    "end": "1270460"
  },
  {
    "text": "what back-and-forth and Apple is being very good open-source citizens it turned",
    "start": "1270460",
    "end": "1276909"
  },
  {
    "text": "out the objections weren't two things that Swift UI needs it's the things that might help us with general dsls and",
    "start": "1276909",
    "end": "1283210"
  },
  {
    "text": "that's what function builders are for and so it is implemented inside of Swift",
    "start": "1283210",
    "end": "1288280"
  },
  {
    "text": "UI now it is being used now it is shipping now but it is not finalized it",
    "start": "1288280",
    "end": "1295150"
  },
  {
    "text": "has not been through evolution it might change a little bit function builders",
    "start": "1295150",
    "end": "1300780"
  },
  {
    "text": "could change an awful lot and so the idea of function builders and I'll show you some real code later is I could like",
    "start": "1300780",
    "end": "1309730"
  },
  {
    "text": "we do a UI kit say I'm creating a V stack from an image and text and so this",
    "start": "1309730",
    "end": "1316539"
  },
  {
    "text": "isn't how it really works inside this is just the idea or you could create a V",
    "start": "1316539",
    "end": "1321669"
  },
  {
    "text": "stack and you could do V dot add the way we do with a lot of things in UI kit we could add their image we could add our",
    "start": "1321669",
    "end": "1328179"
  },
  {
    "text": "text again this isn't how it works in this case it's just the idea but it allows us to write code like",
    "start": "1328179",
    "end": "1334480"
  },
  {
    "text": "this and is this pretty code that's nice now V stack if you look it up this is",
    "start": "1334480",
    "end": "1340929"
  },
  {
    "text": "the Annette and V stack takes an alignment with a default spacing with the default and the last thing it takes",
    "start": "1340929",
    "end": "1347590"
  },
  {
    "text": "is a function and so we've just moved that function out back using trailing closures so this is just using things",
    "start": "1347590",
    "end": "1354250"
  },
  {
    "text": "from Swift and so trailing closures is that thing that allows us to take the last closure if it's the last parameter",
    "start": "1354250",
    "end": "1360429"
  },
  {
    "text": "and move it outside the parentheses inside of curly braces and all of a sudden our code is looking much nicer",
    "start": "1360429",
    "end": "1367950"
  },
  {
    "text": "and we can decorate it make it resizable and add padding and that looks much",
    "start": "1367950",
    "end": "1373480"
  },
  {
    "text": "nicer than this create from where everything sort of inside these nested parentheses and so this is how it looks",
    "start": "1373480",
    "end": "1379990"
  },
  {
    "text": "with function builders so I want to show you a fun example this goes back to the",
    "start": "1379990",
    "end": "1386140"
  },
  {
    "start": "1382000",
    "end": "1611000"
  },
  {
    "text": "1980s Peter Henderson and he declared this whole picture language and so he",
    "start": "1386140",
    "end": "1392140"
  },
  {
    "text": "said if you have the letter F imagine you had something that could rotate F",
    "start": "1392140",
    "end": "1397270"
  },
  {
    "text": "just puts it on its back and if you have F you could rotate it the other way",
    "start": "1397270",
    "end": "1403120"
  },
  {
    "text": "maybe unrotated or inverse rotate it or rotate it three times so he had this",
    "start": "1403120",
    "end": "1411429"
  },
  {
    "text": "notion of rotating things he then said well what have we flipped things and he",
    "start": "1411429",
    "end": "1417130"
  },
  {
    "text": "built this whole language around flipping and vertical and putting things together and the ideas was you start",
    "start": "1417130",
    "end": "1425440"
  },
  {
    "text": "with a shape and you define these fundamental transformations well if you look at Swift UI we start with like",
    "start": "1425440",
    "end": "1432190"
  },
  {
    "text": "image and text and button these very fundamental things and we build up these complex things using these",
    "start": "1432190",
    "end": "1438100"
  },
  {
    "text": "transformations these these containers like V stack and H stacks and Z stacks",
    "start": "1438100",
    "end": "1443410"
  },
  {
    "text": "and lists and so if you've got an F and you can flip it or rotate it or put one",
    "start": "1443410",
    "end": "1449260"
  },
  {
    "text": "above the other or one beside the other and so it's this idea of sort of higher order functions and so higher order",
    "start": "1449260",
    "end": "1456580"
  },
  {
    "text": "functions is if I can do above and beside then I can make a quartet like",
    "start": "1456580",
    "end": "1461799"
  },
  {
    "text": "this and the code looks like this this is compiling running",
    "start": "1461799",
    "end": "1467620"
  },
  {
    "text": "swift code in swift UI you can write this where you say well I have something",
    "start": "1467620",
    "end": "1473679"
  },
  {
    "text": "above something else and the top thing is something besides something else and",
    "start": "1473679",
    "end": "1478809"
  },
  {
    "text": "the bottom thing is something besides something else and I compose those and they get something nice like this and",
    "start": "1478809",
    "end": "1486250"
  },
  {
    "text": "that the coolest really nothing you guys",
    "start": "1486250",
    "end": "1491620"
  },
  {
    "text": "are tough and so you can feed this core tenon and decide that you want it to",
    "start": "1491620",
    "end": "1498159"
  },
  {
    "text": "look a little different you don't want the same F everywhere you want to flip it maybe and you get something like this",
    "start": "1498159",
    "end": "1503289"
  },
  {
    "text": "or you know define something else that is cycle based on a quartet and your",
    "start": "1503289",
    "end": "1509440"
  },
  {
    "text": "cycle might look like this and once you have these building blocks you use them to build on each other and you get this",
    "start": "1509440",
    "end": "1516580"
  },
  {
    "text": "oh come on you guys clap for a Bach cantata it's just an iteration so let me",
    "start": "1516580",
    "end": "1527860"
  },
  {
    "text": "show you the code and it's going to this parts going to change what how using it",
    "start": "1527860",
    "end": "1533679"
  },
  {
    "text": "isn't gonna change function builders if I want something called a rotate or rotate then I also have to create a",
    "start": "1533679",
    "end": "1539830"
  },
  {
    "text": "rotate builder so here's what rotate builder looks like rotate builder",
    "start": "1539830",
    "end": "1545230"
  },
  {
    "text": "contains a function where you specify how many degrees I'm rotating it by and",
    "start": "1545230",
    "end": "1551020"
  },
  {
    "text": "what is it that I'm rotating and it's gonna return you the thing that has been rotated and there's some details the",
    "start": "1551020",
    "end": "1558340"
  },
  {
    "text": "name of this function is build block and you'll have a bunch of build blocks so",
    "start": "1558340",
    "end": "1563710"
  },
  {
    "text": "this is the rotate builder you now have rotate that uses the rotate builder",
    "start": "1563710",
    "end": "1569820"
  },
  {
    "text": "rotate is a guy you care about rotate is the thing that we created like above and",
    "start": "1569820",
    "end": "1575649"
  },
  {
    "text": "beside so rotate is something that knows how to rotate content and in the Anette you",
    "start": "1575649",
    "end": "1582250"
  },
  {
    "text": "pass it what the angle is you want to rotate by and I'll give you a default value of 90 degrees and it takes a",
    "start": "1582250",
    "end": "1589419"
  },
  {
    "text": "rotate builder which is a function it's a function so you could move it in the curly braces outside that was the key",
    "start": "1589419",
    "end": "1596140"
  },
  {
    "text": "that allowed us to write that so nicely and so the rotate uses the rotate builder",
    "start": "1596140",
    "end": "1601720"
  },
  {
    "text": "this code looks hideous but it allows us to use it in beautiful ways and we just",
    "start": "1601720",
    "end": "1607240"
  },
  {
    "text": "say okay let my view be this builder and so when we use it we use it like this we",
    "start": "1607240",
    "end": "1613240"
  },
  {
    "text": "say rotate the angle is 60 that's the thing I'm rotating or if I assume the",
    "start": "1613240",
    "end": "1619750"
  },
  {
    "text": "angle is 90 I just say rotate and I pass another thing to be rotated don't you",
    "start": "1619750",
    "end": "1626649"
  },
  {
    "text": "want to write code like that you can read it okay keep the code you write now",
    "start": "1626649",
    "end": "1635639"
  },
  {
    "text": "so I wanted to show you this with fish and so you can do this where instead of",
    "start": "1635639",
    "end": "1642190"
  },
  {
    "text": "an F you have your Asscher fish and if you rotate your s your fish twice you",
    "start": "1642190",
    "end": "1648879"
  },
  {
    "text": "get this and I don't know if you saw it as it was animating but they fit",
    "start": "1648879",
    "end": "1654700"
  },
  {
    "text": "together which was the key of the Escher print and so if we have a new primitive over we can say take your fish and show",
    "start": "1654700",
    "end": "1663879"
  },
  {
    "text": "it over the rotated fish so we have over fish rotate rotate fish and they fit",
    "start": "1663879",
    "end": "1670929"
  },
  {
    "text": "together you know well that's pretty cool but uh sure did more sure said what",
    "start": "1670929",
    "end": "1676870"
  },
  {
    "text": "if I rotate 45 degrees and shrink it they fit together nicely and I rotate",
    "start": "1676870",
    "end": "1683980"
  },
  {
    "text": "that one again and they fit together nicely and all you need for that is one more",
    "start": "1683980",
    "end": "1689110"
  },
  {
    "text": "primitive so there's these building blocks you write the minimal code and then you use it you compose did you guys",
    "start": "1689110",
    "end": "1696460"
  },
  {
    "text": "see I mean everybody's seen it the protocol oriented protocol programming talk from four or five years ago that",
    "start": "1696460",
    "end": "1703090"
  },
  {
    "text": "was called the crusty talk go back and watch it it's from dub dub DC 2014 2015",
    "start": "1703090",
    "end": "1711070"
  },
  {
    "text": "the first half of the talk is Dave Abraham talking about doing things with",
    "start": "1711070",
    "end": "1717039"
  },
  {
    "text": "protocols and structs that we used to do with classes if you go back and look at it now you can see that he was telling",
    "start": "1717039",
    "end": "1724000"
  },
  {
    "text": "us about Swift UI this is what became Swift UI and this is very common with",
    "start": "1724000",
    "end": "1729730"
  },
  {
    "text": "apple op apples always giving us these hints without telling us what's coming they're telling us",
    "start": "1729730",
    "end": "1735970"
  },
  {
    "text": "stop use pixels start using points and then in the fall we get this screen with",
    "start": "1735970",
    "end": "1744070"
  },
  {
    "text": "twice the pixels in both directions and we go oh good thing we switched otherwise we'd have a tiny picture up in",
    "start": "1744070",
    "end": "1749200"
  },
  {
    "text": "the corner so they give us these hints he gave us a massive hint we just didn't know it until we saw swift UI and so",
    "start": "1749200",
    "end": "1756580"
  },
  {
    "text": "this primitive rotate 45 degrees and shrink and we just iterate again and you",
    "start": "1756580",
    "end": "1764590"
  },
  {
    "text": "can build up these very complex things if you look at sliped UI you're using very basic pieces and you're putting",
    "start": "1764590",
    "end": "1772450"
  },
  {
    "text": "them together in interesting ways it's very different than working with UI kit",
    "start": "1772450",
    "end": "1778350"
  },
  {
    "text": "so just as an aside asurs fish itself is",
    "start": "1778350",
    "end": "1784120"
  },
  {
    "text": "the same thing it's the same piece rotated rotated and shrunk rotated and",
    "start": "1784120",
    "end": "1790090"
  },
  {
    "text": "shrunk and that's why it all fits together so nicely and of course so I",
    "start": "1790090",
    "end": "1800398"
  },
  {
    "text": "have a demo",
    "start": "1802289",
    "end": "1805590"
  },
  {
    "text": "thank you what is stunning about that demo not my",
    "start": "1812979",
    "end": "1821840"
  },
  {
    "text": "design skills what is stunning about that demo is in",
    "start": "1821840",
    "end": "1826879"
  },
  {
    "text": "swift UI when you move the slider the numbers in the text field don't change in that demo",
    "start": "1826879",
    "end": "1835399"
  },
  {
    "text": "when you move the slider when the value changes you throw out the text field and",
    "start": "1835399",
    "end": "1841309"
  },
  {
    "text": "you create a new text field with the new number that's so wasteful well you",
    "start": "1841309",
    "end": "1847849"
  },
  {
    "text": "thought that when you came to Swift and you've heard that arrays were value types right so when you modified an",
    "start": "1847849",
    "end": "1853700"
  },
  {
    "text": "array you weren't modifying the array you were throwing it out and replacing it with the array that had been modified",
    "start": "1853700",
    "end": "1858889"
  },
  {
    "text": "and the same thing is going on here and it is amazingly performant and Apple can",
    "start": "1858889",
    "end": "1864859"
  },
  {
    "text": "make some predictions and some optimizations based on the fact that these are just structs and so you're",
    "start": "1864859",
    "end": "1871849"
  },
  {
    "text": "creating as you move the slider whatever your tolerance is every time you move that amount you're throwing out the old",
    "start": "1871849",
    "end": "1878089"
  },
  {
    "text": "one and replacing it with a new one with the new number and this is how Swift UI works so here is the code for this I",
    "start": "1878089",
    "end": "1887359"
  },
  {
    "text": "have a Content view it is a V stack so my V stack is what contains them I've",
    "start": "1887359",
    "end": "1893749"
  },
  {
    "text": "said I'm aligning in the center but I get that for free anyway I'm displaying text in a slider that's what you saw in",
    "start": "1893749",
    "end": "1900710"
  },
  {
    "text": "that picture text in a slider and so my slider is gonna go between 0 and 10 and",
    "start": "1900710",
    "end": "1907849"
  },
  {
    "text": "it's gonna change a ridiculous amount of times now I've left the value because",
    "start": "1907849",
    "end": "1913429"
  },
  {
    "text": "this is what works differently in Swift UI you guys are so used to in UI kit",
    "start": "1913429",
    "end": "1919159"
  },
  {
    "text": "when you press a button you tell the label hey change your value to this in",
    "start": "1919159",
    "end": "1924489"
  },
  {
    "text": "Swift UI everything works with properties and it says property change",
    "start": "1924489",
    "end": "1931219"
  },
  {
    "text": "to this and the text says I'm watching that property so when it changes I need",
    "start": "1931219",
    "end": "1937879"
  },
  {
    "text": "to be swapped out and so we keep that inside something called a state and the reason we keep it in",
    "start": "1937879",
    "end": "1944880"
  },
  {
    "text": "something with this app state in front of it is if you remember your Swift I have a value here which is a double",
    "start": "1944880",
    "end": "1953159"
  },
  {
    "text": "which is a value type I'm inside of a struct if I change that value I'm",
    "start": "1953159",
    "end": "1959659"
  },
  {
    "text": "changing the whole struct that's the way structs works trucks are value types so",
    "start": "1959659",
    "end": "1966630"
  },
  {
    "text": "if you change this value you're changing the whole struct I can't throw out this view that you're looking at so what",
    "start": "1966630",
    "end": "1973470"
  },
  {
    "text": "Apple does is this incredible cheat and they say we're gonna use state and what",
    "start": "1973470",
    "end": "1978990"
  },
  {
    "text": "state says is don't store it here inside of my struct store it somewhere else",
    "start": "1978990",
    "end": "1984440"
  },
  {
    "text": "where Daniel somewhere else and create a reference to that somewhere else so now",
    "start": "1984440",
    "end": "1991760"
  },
  {
    "text": "what I'm holding on to is a reference a reference is just a pointer to in memory",
    "start": "1991760",
    "end": "1996809"
  },
  {
    "text": "the reference isn't changing what's in that memory location is changing and so that's how we can get away with this",
    "start": "1996809",
    "end": "2004070"
  },
  {
    "text": "cheat the slider is now going to effect the change because that dollar value",
    "start": "2004070",
    "end": "2010820"
  },
  {
    "text": "says I am bound to that value I'm gonna as I slide change the value to whatever",
    "start": "2010820",
    "end": "2016520"
  },
  {
    "text": "my sliders position is the state is gonna say okay I've been updated you",
    "start": "2016520",
    "end": "2021950"
  },
  {
    "text": "said but we're somewhere but my reference is to you being updated and",
    "start": "2021950",
    "end": "2027260"
  },
  {
    "text": "somehow Swift gets the message this has been updated you need to refresh with",
    "start": "2027260",
    "end": "2032570"
  },
  {
    "text": "your new text containing the new value so that's the struct containing a var",
    "start": "2032570",
    "end": "2038390"
  },
  {
    "text": "and our hack and it's a big ole hack is state now there was a great talk this",
    "start": "2038390",
    "end": "2045409"
  },
  {
    "text": "year dub-dub do you see there are a ton of really good talks but there's one this year by Ben Cohen and Doug Gregor",
    "start": "2045409",
    "end": "2051440"
  },
  {
    "text": "about api's and Swift and some of the new things and they talked about this the semantics versus the syntax of value",
    "start": "2051440",
    "end": "2059179"
  },
  {
    "text": "types and they talked about these things that are called property wrappers so what's going on here with at state is",
    "start": "2059179",
    "end": "2065570"
  },
  {
    "text": "these are property wrappers where I have my value but I'm exposing it somehow",
    "start": "2065570",
    "end": "2070790"
  },
  {
    "text": "through a wrap and I'll show you the code here I have",
    "start": "2070790",
    "end": "2075919"
  },
  {
    "text": "something called to two places and it's a property wrapper and I've got this",
    "start": "2075920",
    "end": "2081139"
  },
  {
    "text": "struck to two places and inside it this is the double this is the value that I'm",
    "start": "2081140",
    "end": "2086480"
  },
  {
    "text": "really caring about but I'm gonna expose it out in such a way that it is rounded to two places and so I'm gonna have this",
    "start": "2086480",
    "end": "2093830"
  },
  {
    "text": "wrapped value that if you ask me what the wrap value is I just return the value and if you set the value that's",
    "start": "2093830",
    "end": "2101240"
  },
  {
    "text": "where I round it to two places so you say give me a new value that is one point two three four or five I'm gonna",
    "start": "2101240",
    "end": "2108410"
  },
  {
    "text": "round it to two places and I do that in the Anette where I say look take your",
    "start": "2108410",
    "end": "2115370"
  },
  {
    "text": "initial value and set it to the wrap value the wrap value goes ahead and has",
    "start": "2115370",
    "end": "2121400"
  },
  {
    "text": "a setter that sets the value so if you say set to two places the amount one",
    "start": "2121400",
    "end": "2127400"
  },
  {
    "text": "point two three four five six this at two places to two places property",
    "start": "2127400",
    "end": "2132410"
  },
  {
    "text": "wrapper says oh I'm doing it through the getter and Center I'm accessing it",
    "start": "2132410",
    "end": "2138020"
  },
  {
    "text": "through the getter and setter and so I get one point two three that's pretty",
    "start": "2138020",
    "end": "2143720"
  },
  {
    "text": "cool check this out is even cooler after",
    "start": "2143720",
    "end": "2149180"
  },
  {
    "text": "I wrote this example and it's hipster said actually you can do more and so I",
    "start": "2149180",
    "end": "2154700"
  },
  {
    "text": "looked at this example and said then let's do more and so here's my struck",
    "start": "2154700",
    "end": "2159920"
  },
  {
    "text": "two two places what if I want to let you say I'm don't want always rounded to two",
    "start": "2159920",
    "end": "2165260"
  },
  {
    "text": "places I want to tell you how many places to round to so let's create a new property rapper called rounded to and",
    "start": "2165260",
    "end": "2172180"
  },
  {
    "text": "rounded to still has my value but it now has precision you get to tell me - how",
    "start": "2172180",
    "end": "2177980"
  },
  {
    "text": "many places you want to round it to and I'll figure out what the multiplier is you know a hundred a thousand depending",
    "start": "2177980",
    "end": "2184520"
  },
  {
    "text": "on how many places so that's not something that we need to worry about the same getter the same setters before",
    "start": "2184520",
    "end": "2192320"
  },
  {
    "text": "except it's to this new multiplier and my Annette looks a little different because you have to specify your initial",
    "start": "2192320",
    "end": "2199130"
  },
  {
    "text": "value and what your precision is now people that use our apps are",
    "start": "2199130",
    "end": "2206000"
  },
  {
    "text": "horrible people but people that use our code are no better and so someone's going to try to put a negative number in",
    "start": "2206000",
    "end": "2212360"
  },
  {
    "text": "for the precision rounded to negative four places so we're gonna guard against them and we're gonna crash because they",
    "start": "2212360",
    "end": "2218390"
  },
  {
    "text": "deserve that but if they give us a positive number that's reasonable we'll set our precision and we're set our rap",
    "start": "2218390",
    "end": "2225560"
  },
  {
    "text": "value as we did before and so instead of using it like this to two places we get",
    "start": "2225560",
    "end": "2231650"
  },
  {
    "text": "to say this isn't this incredible we can just say rounded to three that's",
    "start": "2231650",
    "end": "2238190"
  },
  {
    "text": "what we're decorating one point two three four five six with and now we can just round this amount to three places",
    "start": "2238190",
    "end": "2245050"
  },
  {
    "text": "and we get one point two three five I think that's pretty slick so there's a",
    "start": "2245050",
    "end": "2251420"
  },
  {
    "text": "ton of new things in Swift a lot of them are based on Swift UI and around they're also combined if you've got questions",
    "start": "2251420",
    "end": "2258680"
  },
  {
    "text": "now's a great time for them thank you [Applause]",
    "start": "2258680",
    "end": "2269340"
  }
]