[
  {
    "start": "0",
    "end": "193000"
  },
  {
    "text": "[Music]",
    "start": "3510",
    "end": "7529"
  },
  {
    "text": "hi everyone and welcome to my talk so 5 reasons why to use reactive programming",
    "start": "11210",
    "end": "18170"
  },
  {
    "text": "you actually might get a false impression that this talk will advocate a lot reactive programming actually it",
    "start": "18170",
    "end": "24150"
  },
  {
    "text": "starts from the opposite side so what are the key challenges of reactive programming and why it might be not your",
    "start": "24150",
    "end": "31619"
  },
  {
    "text": "only single tool that you should apply for example when you design your microservices and then we can come when",
    "start": "31619",
    "end": "37050"
  },
  {
    "text": "it's you a good choice by coming to the 5 different use cases we discovered at eBay Classifieds so what is eBay",
    "start": "37050",
    "end": "44940"
  },
  {
    "text": "Classifieds I'm sure many of you are knowing and using eBay marketplace where you can buy",
    "start": "44940",
    "end": "51270"
  },
  {
    "text": "and sell everything globally from almost any part of the world so the classifieds business is about local marketplaces and",
    "start": "51270",
    "end": "58890"
  },
  {
    "text": "local advertisements where you can for example sell your cat or sell your car and we operate in multiple countries",
    "start": "58890",
    "end": "66390"
  },
  {
    "text": "across the globe and we have multiple local brands for instance we have key Gigi in Canada we have a big lion in",
    "start": "66390",
    "end": "72810"
  },
  {
    "text": "Saigon in Germany so they do pretty much similar stuff they took classifieds and I'm personally working as a software",
    "start": "72810",
    "end": "79320"
  },
  {
    "text": "architect in motors vertical which helps all of our horizontal grants to build best carbine and car selling experience",
    "start": "79320",
    "end": "86220"
  },
  {
    "text": "so actually I had a chance to work a lot with our horizontal brands and what is",
    "start": "86220",
    "end": "91500"
  },
  {
    "text": "nice about this fact that they have their own technical setup they make their own decisions and some of those",
    "start": "91500",
    "end": "97710"
  },
  {
    "text": "companies are actually using reactive programming some of them are doing this quite a lot and each of the companies",
    "start": "97710",
    "end": "103409"
  },
  {
    "text": "had its own use cases and its own reasons why did they decided to go interactive manner so the goal of this",
    "start": "103409",
    "end": "109530"
  },
  {
    "text": "talk is exactly to present how and why those eBay Classifieds companies decided",
    "start": "109530",
    "end": "114990"
  },
  {
    "text": "to go with reactive programming a few more words about classified so many of",
    "start": "114990",
    "end": "120060"
  },
  {
    "text": "you have used G McLennan sigan yeah quite a lot that's a good sign so",
    "start": "120060",
    "end": "125340"
  },
  {
    "text": "effectively you can see here like many different listings like you can see the CAD picture even though selling a cap is",
    "start": "125340",
    "end": "131760"
  },
  {
    "text": "a horrible idea but you might do this you can sell your car you can sell your",
    "start": "131760",
    "end": "136800"
  },
  {
    "text": "bicycle and people can chat about the listing they can get more it they can then find the charger in your",
    "start": "136800",
    "end": "143409"
  },
  {
    "text": "local neighborhood in your local city and then finally buy and sell Samson",
    "start": "143409",
    "end": "148980"
  },
  {
    "text": "coming back to the reactive programming so what kind of reactive programming I'll cover in this talk so we can apply",
    "start": "148980",
    "end": "155650"
  },
  {
    "text": "reactive programming in many places or restock covers mainly from the backend side so if you used any of those",
    "start": "155650",
    "end": "161650"
  },
  {
    "text": "technologies you might recognize what reactive programming is so it's about declarative propagation of changes who",
    "start": "161650",
    "end": "168609"
  },
  {
    "text": "were working with messages who were working with declarative and frequently functional programming so for example",
    "start": "168609",
    "end": "174370"
  },
  {
    "text": "the libraries on the left side like Eric's Java and the reactor project they apply a lot of server pattern and this",
    "start": "174370",
    "end": "181540"
  },
  {
    "text": "is how the handle reactivity so up in contrast they apply a lot of actor concept and they propagate messages",
    "start": "181540",
    "end": "188199"
  },
  {
    "text": "between actors and it has quite a high",
    "start": "188199",
    "end": "193540"
  },
  {
    "start": "193000",
    "end": "269000"
  },
  {
    "text": "correlation with reactive systems so reactive manifesto defines in the concept of reactive system so this",
    "start": "193540",
    "end": "200590"
  },
  {
    "text": "concept says you wanna build resilient responsive and elastic applications so everyone probably wants to build such an",
    "start": "200590",
    "end": "206739"
  },
  {
    "text": "application and the highlight of this manifesto would be being message driven",
    "start": "206739",
    "end": "212370"
  },
  {
    "text": "while message driven because according to the manifesto this enables you to be more scalable this enables you to handle",
    "start": "212370",
    "end": "219310"
  },
  {
    "text": "resilience and responsiveness at scale and this is actually the point where resilience system interact a lot who is",
    "start": "219310",
    "end": "226169"
  },
  {
    "text": "reactive programming and the key intersection point is exactly this declarative concept of propagating",
    "start": "226169",
    "end": "232389"
  },
  {
    "text": "messengers the small example so imagine the listing being watered somewhere on",
    "start": "232389",
    "end": "238780"
  },
  {
    "text": "ebay kernels I get the simple non reactive code how you would load a listing so first we want to go to our",
    "start": "238780",
    "end": "245769"
  },
  {
    "text": "wrapper we want to find the listing entity by ID then for instance we want",
    "start": "245769",
    "end": "251019"
  },
  {
    "text": "to get several reduce and add to this listing to show them all together so we go into",
    "start": "251019",
    "end": "256090"
  },
  {
    "text": "review service and get the reviews then we just set them and return the listing",
    "start": "256090",
    "end": "261669"
  },
  {
    "text": "so this is how you do it in a normal programmatic way without applying any of the reactive concepts here",
    "start": "261669",
    "end": "269580"
  },
  {
    "start": "269000",
    "end": "558000"
  },
  {
    "text": "because it's hard to talk about code without showing code I choose project reactor for the few code examples I will",
    "start": "269860",
    "end": "276640"
  },
  {
    "text": "show during my talk but actually this will be not much about project reactor or not much about the country",
    "start": "276640",
    "end": "282280"
  },
  {
    "text": "abstraction so I'll try to conceptualize it more on a high level to keep away from their project reactor details but",
    "start": "282280",
    "end": "289900"
  },
  {
    "text": "still for the few examples I will use you need to understand some basics so the basics of project reactor are around",
    "start": "289900",
    "end": "296200"
  },
  {
    "text": "mana and flux those functional wrappers which represent asynchronous computations and which can apply the",
    "start": "296200",
    "end": "304000"
  },
  {
    "text": "pressure and many other features of reactive programming under the hood so mana would be an alternative like",
    "start": "304000",
    "end": "309520"
  },
  {
    "text": "closest alternative of completable future from JDK but it has much more power so intentionally it represents the",
    "start": "309520",
    "end": "317290"
  },
  {
    "text": "result of your function of transformation as zero one or exception in the contrast flux represents a stream",
    "start": "317290",
    "end": "324640"
  },
  {
    "text": "of results and the closest alternative would be just plain Java H streams but",
    "start": "324640",
    "end": "329650"
  },
  {
    "text": "with the backpressure concept that I will introduce later now let's have a look how we can make the previous simple",
    "start": "329650",
    "end": "335950"
  },
  {
    "text": "example reactive and this is how it would look like in directive manner so",
    "start": "335950",
    "end": "341620"
  },
  {
    "text": "we still get the distinct mono in the bottom part of the slide but we get not",
    "start": "341620",
    "end": "346990"
  },
  {
    "text": "there listing itself but we get this isin Cronos mona wrapper and then we apply transformation only in the query",
    "start": "346990",
    "end": "354340"
  },
  {
    "text": "of way that means we describe as a lambda function how transformation will be handled so we say whenever listing",
    "start": "354340",
    "end": "360040"
  },
  {
    "text": "will be available we will go with this listing sauer ID to the review service",
    "start": "360040",
    "end": "365640"
  },
  {
    "text": "then whenever reviews will be available we apply the next transformation and we say please set reviews to the listing",
    "start": "365640",
    "end": "371950"
  },
  {
    "text": "and finally we can get and accept list and ready to be displayed not much of",
    "start": "371950",
    "end": "379690"
  },
  {
    "text": "the benefits are visible here but still there are some so first of all what was",
    "start": "379690",
    "end": "385390"
  },
  {
    "text": "the intention to create such a parody as reactive programming the first one was to simplify concurrent and asynchronous",
    "start": "385390",
    "end": "392410"
  },
  {
    "text": "scenarios so for instance mana is much more chainable and powerful than just plain completable future you can do much",
    "start": "392410",
    "end": "399040"
  },
  {
    "text": "more with smaller than you can do with computable fusion the second reason because functional and",
    "start": "399040",
    "end": "405220"
  },
  {
    "text": "reactive programming was made easier with reactive programming you can do and",
    "start": "405220",
    "end": "410290"
  },
  {
    "text": "eliminate wasteful blocking calls so you can call your services your database is a synchronously and asynchronously salts",
    "start": "410290",
    "end": "417880"
  },
  {
    "text": "can be handled in the clarity of reactive manner but while bring some benefits it brings also some visible",
    "start": "417880",
    "end": "425740"
  },
  {
    "text": "challenges you can spot already so the first one is God maintainability and",
    "start": "425740",
    "end": "430990"
  },
  {
    "text": "code readability I remember like when Java 8 was released many of us were so",
    "start": "430990",
    "end": "437290"
  },
  {
    "text": "excited by functional programming so we were doing previously for loops now we",
    "start": "437290",
    "end": "442930"
  },
  {
    "text": "can do map we just do it in one line it's cool it saves as many lines of code it saves as time we get more readable",
    "start": "442930",
    "end": "449860"
  },
  {
    "text": "code and this might get some false impression that with declarative and",
    "start": "449860",
    "end": "455530"
  },
  {
    "text": "functional programming your code will be actually always more readable and more easy to use but I find that it's not",
    "start": "455530",
    "end": "463120"
  },
  {
    "text": "always the case and from this example it's highly illustrative so first of all you see that we get some nested levels",
    "start": "463120",
    "end": "470830"
  },
  {
    "text": "which are frequently hard to get rid of because whenever you want to access the",
    "start": "470830",
    "end": "475870"
  },
  {
    "text": "result of your asynchronous computation you can do it only through functional transformation so that means you go one",
    "start": "475870",
    "end": "482169"
  },
  {
    "text": "now level nested so you cannot just say give me the listing you can only say give me the mana of the listing and the",
    "start": "482169",
    "end": "489910"
  },
  {
    "text": "more networking and a synchronous call you do the deeper it can get of course you can apply functional programming to",
    "start": "489910",
    "end": "495760"
  },
  {
    "text": "make it better so you can apply mana transformers for instance to combine either type who is exceptions with mana",
    "start": "495760",
    "end": "504070"
  },
  {
    "text": "influx but still you will have this remaining what a code functional",
    "start": "504070",
    "end": "510310"
  },
  {
    "text": "magnetic program in overwhelm which is a wrapper of one of logs and different",
    "start": "510310",
    "end": "516640"
  },
  {
    "text": "declarative wrappers wrappers of lambda functions and nested levels that are",
    "start": "516640",
    "end": "521710"
  },
  {
    "text": "pretty hard to get rid of some of the jvm languages of course also simplify our life here like cotton or Scala",
    "start": "521710",
    "end": "528280"
  },
  {
    "text": "but still if you compare the example on the top an example on the bottom for me",
    "start": "528280",
    "end": "533920"
  },
  {
    "text": "personally the one on the top it's more readable because every single world in this lines of code has some",
    "start": "533920",
    "end": "540350"
  },
  {
    "text": "domain meaning like we are working with listing so we get list of listing the",
    "start": "540350",
    "end": "545810"
  },
  {
    "text": "list of reviews we are set in reduced listings while in the reactive example you will always have some abstractions",
    "start": "545810",
    "end": "552190"
  },
  {
    "text": "such as mana and money is not a part of your business logic the second challenge",
    "start": "552190",
    "end": "559760"
  },
  {
    "start": "558000",
    "end": "673000"
  },
  {
    "text": "would be debugging because frequently we execute it on a different thread and I think erroneous manner so and I think",
    "start": "559760",
    "end": "565610"
  },
  {
    "text": "erroneous and concurrent programming was always harder than the sequential one in single threaded so for example here we",
    "start": "565610",
    "end": "572000"
  },
  {
    "text": "have a stack trace from the project tracker whenever we have a network in HTTP call so by default it will look",
    "start": "572000",
    "end": "577970"
  },
  {
    "text": "like this so it slightly cut it in the middle but it literally looks like this in your log aggregation also it starts",
    "start": "577970",
    "end": "583970"
  },
  {
    "text": "with Java thread run because we won't execute it in a new thread and it ends up with the call in reactor framework",
    "start": "583970",
    "end": "591830"
  },
  {
    "text": "and spin web framework so there's no single line in this stack trace which will indicate your own line of code of",
    "start": "591830",
    "end": "597920"
  },
  {
    "text": "course reactive libraries they know this disadvantage and they already applied some mitigation so if you will apply",
    "start": "597920",
    "end": "604370"
  },
  {
    "text": "some special instrumentation for stack traces then you will get much better stack trace with the point in your code",
    "start": "604370",
    "end": "610970"
  },
  {
    "text": "but still for example if you are debugging your reactive application locally you may put a breakpoint in one",
    "start": "610970",
    "end": "616790"
  },
  {
    "text": "of the parts of tab then you stop here but the remaining part of your a synchronous and parallel execution will",
    "start": "616790",
    "end": "622850"
  },
  {
    "text": "continue then still you might need to propagate correlation ID through your calls to have all the logs related to",
    "start": "622850",
    "end": "629839"
  },
  {
    "text": "one call in one place so by default reactive programming would be harder to debug than their normal problematic",
    "start": "629839",
    "end": "636860"
  },
  {
    "text": "approach the second frequent",
    "start": "636860",
    "end": "642520"
  },
  {
    "text": "misconception would be that blocking is actually bad to some extent so what is",
    "start": "642520",
    "end": "649790"
  },
  {
    "text": "actually wasteful blocking code so one of the big advantages of reactive approach is that it allows you to apply",
    "start": "649790",
    "end": "658070"
  },
  {
    "text": "a non blocking higher easier so what is blocking is it's low in fact it's not",
    "start": "658070",
    "end": "663470"
  },
  {
    "text": "because it's written under the knees in the well-defined abstractions and libraries which were tuned way back in",
    "start": "663470",
    "end": "669230"
  },
  {
    "text": "the past so it doesn't make your executions for by default it drinks several disadvantages and several",
    "start": "669230",
    "end": "675680"
  },
  {
    "start": "673000",
    "end": "745000"
  },
  {
    "text": "overheads the first one each threat will consume some memory by default by",
    "start": "675680",
    "end": "680780"
  },
  {
    "text": "default this will be at least your stack size which might be 256 kilobytes or",
    "start": "680780",
    "end": "686720"
  },
  {
    "text": "more the amount of your thread local variables you use so it will be some memory overhead but might be up to one",
    "start": "686720",
    "end": "694580"
  },
  {
    "text": "megabyte depends on how you design your application the second one would be contacts which overhead so what is",
    "start": "694580",
    "end": "701480"
  },
  {
    "text": "context switch overhead so imagine you have like 4 CPU and you start running",
    "start": "701480",
    "end": "706900"
  },
  {
    "text": "100 thread so of course 4 cores cannot execute 100 threads at the time and they",
    "start": "706900",
    "end": "712580"
  },
  {
    "text": "start doing context switch from time to time to let all those threads occasionally execute so this is called",
    "start": "712580",
    "end": "718610"
  },
  {
    "text": "context switch overhead therefore for instance don't get which was initially designed for executive",
    "start": "718610",
    "end": "724220"
  },
  {
    "text": "about thread per request model and processing one request in one thread and doing may be blocking i/o they have the",
    "start": "724220",
    "end": "731240"
  },
  {
    "text": "limitation by default 200 threads so but that's not hardly means of course you can boost it but it gives you an",
    "start": "731240",
    "end": "738140"
  },
  {
    "text": "indication what Tomcat as a server container believes is a good default max",
    "start": "738140",
    "end": "743720"
  },
  {
    "text": "number of threads and also Java guys they of course know this fingers context",
    "start": "743720",
    "end": "749720"
  },
  {
    "start": "745000",
    "end": "1088000"
  },
  {
    "text": "which overhead and they did some benchmarks and research back in the past so they measured like assuming we have",
    "start": "749720",
    "end": "755870"
  },
  {
    "text": "different number of consecutive strats in just one CPU and we always have 1",
    "start": "755870",
    "end": "760970"
  },
  {
    "text": "million units of work and we try to execute them so how much time it will take for each combination whenever we",
    "start": "760970",
    "end": "767690"
  },
  {
    "text": "execute the whole million in one thread then 100,000 in 10 threads and so and so",
    "start": "767690",
    "end": "774590"
  },
  {
    "text": "on and of course those results will be much different in depending on what type",
    "start": "774590",
    "end": "780020"
  },
  {
    "text": "of computation you use because CPU will perform and optimize is different it will also depend on how powerful your",
    "start": "780020",
    "end": "786440"
  },
  {
    "text": "machine is so it might be not your latest MacBook Pro where this test was executed before so maybe the more",
    "start": "786440",
    "end": "793100"
  },
  {
    "text": "powerful machine is the better number you get but their results show that it starts getting significantly force and",
    "start": "793100",
    "end": "800900"
  },
  {
    "text": "by significantly means from 13 to 14 seconds some some notice about the way at the scale of a thousand so",
    "start": "800900",
    "end": "807420"
  },
  {
    "text": "you can still use from my experience from 200 threads to maybe a thousand depending on your machine and how you",
    "start": "807420",
    "end": "813570"
  },
  {
    "text": "use them and you still might be fine with Facebook working iron this brings",
    "start": "813570",
    "end": "821670"
  },
  {
    "text": "me to a small conclusion so reactive programming indeed has its value so it",
    "start": "821670",
    "end": "827070"
  },
  {
    "text": "simplifies a synchronous programming it simplifies you how you can achieve non-blocking networking calls but it",
    "start": "827070",
    "end": "834060"
  },
  {
    "text": "also has its price and it price would be sometimes less readable code sometimes",
    "start": "834060",
    "end": "840740"
  },
  {
    "text": "harder debugging I and it's not about learning curve even still whenever you",
    "start": "840740",
    "end": "846810"
  },
  {
    "text": "are very proficient with reactive programming still those two disadvantages they are harmful comparing",
    "start": "846810",
    "end": "853980"
  },
  {
    "text": "to the traditional sequential programmatic approach and finally back",
    "start": "853980",
    "end": "858990"
  },
  {
    "text": "to my topic so what are the good use case is to use reactive programming if",
    "start": "858990",
    "end": "865380"
  },
  {
    "text": "relative programming is obviously not so awesome and not as you were about and why specifically if you are not a bad",
    "start": "865380",
    "end": "871980"
  },
  {
    "text": "calm so you might have heard that eBay this year and all that they build or plan to build their custom hardware",
    "start": "871980",
    "end": "879230"
  },
  {
    "text": "designed specifically for eBay needs that means they are curious about money",
    "start": "879230",
    "end": "884700"
  },
  {
    "text": "they spent on hardware because they deal with world scale challenges but not every company has world scale challenges",
    "start": "884700",
    "end": "891570"
  },
  {
    "text": "and not every company needs to deal with such many requests as invaders so for",
    "start": "891570",
    "end": "896670"
  },
  {
    "text": "instance our classifieds businesses they are local to the country so they are still sometimes one of the popular",
    "start": "896670",
    "end": "902430"
  },
  {
    "text": "websites in the country and they have quite a huge amount of traffic let's do it would be less than ebay.com",
    "start": "902430",
    "end": "908370"
  },
  {
    "text": "and while talking with many people like I find out that we do not have a strong",
    "start": "908370",
    "end": "913860"
  },
  {
    "text": "wish to use reactive programming just to save hardware and money so there are some other reasons and let's get started",
    "start": "913860",
    "end": "921650"
  },
  {
    "text": "the first one would be high latency networking IR so whenever you make a",
    "start": "921650",
    "end": "927060"
  },
  {
    "text": "call to another service whenever you make a call to your database networking is involved and the higher latency is",
    "start": "927060",
    "end": "934650"
  },
  {
    "text": "the less scalable are and the more reasons there are to apply reactive programming simple mess",
    "start": "934650",
    "end": "941519"
  },
  {
    "text": "so let's assume we go with the Tomcat with the default 200 stress and we can",
    "start": "941519",
    "end": "946799"
  },
  {
    "text": "handle the one request let's assume in a hundred millisecond which is already insanely high for many use cases but",
    "start": "946799",
    "end": "952739"
  },
  {
    "text": "still that means we can handle mm requests per second how many of you do",
    "start": "952739",
    "end": "958799"
  },
  {
    "text": "on your daily work with more than 200 requests per second on your service so",
    "start": "958799",
    "end": "963929"
  },
  {
    "text": "less than 10 hands so that means for most of you you will not get much all their capacity savings or hardware",
    "start": "963929",
    "end": "970949"
  },
  {
    "text": "savings by applying reactive programming and you can scale your application you can actually have a cluster of five",
    "start": "970949",
    "end": "977069"
  },
  {
    "text": "nodes each handling 2,000 rupees per second that means you can reach 10k without reactive programming but if you",
    "start": "977069",
    "end": "983910"
  },
  {
    "text": "go with the latency increase the more higher latency you have the last request",
    "start": "983910",
    "end": "990179"
  },
  {
    "text": "you can process which is obvious so let's assume increased latency after a second how much your request takes or",
    "start": "990179",
    "end": "996480"
  },
  {
    "text": "how much networking IO takes and you suddenly can process 10 times less request what would be a use case for",
    "start": "996480",
    "end": "1004489"
  },
  {
    "text": "such a high latency like the most damp one will be like your region from database with missing index over you are",
    "start": "1004489",
    "end": "1010369"
  },
  {
    "text": "doing some batch computation the more reasonable and realistic would be when you talk to third party system and third",
    "start": "1010369",
    "end": "1017839"
  },
  {
    "text": "party system might be for instance in the other region so you might be for some reason hosting your system in",
    "start": "1017839",
    "end": "1023089"
  },
  {
    "text": "Europe and the partner with whom you collaborate such as payment provider or",
    "start": "1023089",
    "end": "1028159"
  },
  {
    "text": "some credit scoring will be hosted somewhere in Australia Canada or US so you can easily get up to a second",
    "start": "1028159",
    "end": "1034250"
  },
  {
    "text": "latency and may be unpredictable latency in general so the solution how to",
    "start": "1034250",
    "end": "1040188"
  },
  {
    "text": "overcome this would be maybe to rub this external communication into the external",
    "start": "1040189",
    "end": "1045769"
  },
  {
    "text": "service wrapper and do it as a synchronously as possible so in this example how it's handled by GDG autos",
    "start": "1045769",
    "end": "1052610"
  },
  {
    "text": "that's a vertical platform for Canada we can have for instance kafka topics and we can say ok whenever I receive the",
    "start": "1052610",
    "end": "1059779"
  },
  {
    "text": "message in Kafka topic I will do the external call then I will also publish the results I synchronously into the",
    "start": "1059779",
    "end": "1066770"
  },
  {
    "text": "topic and this small external gateway it can be actually raped and it won't consume anyone grass read",
    "start": "1066770",
    "end": "1072410"
  },
  {
    "text": "per request that means we can scale very much better so we can scale without red per request we have almost zero",
    "start": "1072410",
    "end": "1078950"
  },
  {
    "text": "limitation on this service or we handle as almost as much as our external service provider can plus with auto",
    "start": "1078950",
    "end": "1085310"
  },
  {
    "text": "scaling this works pretty well in the very short code examples so in this case we go into internal price",
    "start": "1085310",
    "end": "1092330"
  },
  {
    "start": "1088000",
    "end": "1157000"
  },
  {
    "text": "service so imagine for a listing we want to get an external evaluation how reasonable the prices in here we have",
    "start": "1092330",
    "end": "1099620"
  },
  {
    "text": "the reactive crafter receiver so we say on next message we go into external",
    "start": "1099620",
    "end": "1105140"
  },
  {
    "text": "price service we get price ratings then whenever we subscribed this result we",
    "start": "1105140",
    "end": "1111320"
  },
  {
    "text": "get the rating and the publish it in the other Kafka topic so this is how this",
    "start": "1111320",
    "end": "1117020"
  },
  {
    "text": "simple use case will look like with simplified project director abstraction",
    "start": "1117020",
    "end": "1123789"
  },
  {
    "text": "second use case is actually opposite the first one was about network intensive",
    "start": "1125530",
    "end": "1131720"
  },
  {
    "text": "workload and the second one is about CPU intensive workload what could be a CPU",
    "start": "1131720",
    "end": "1137360"
  },
  {
    "text": "intensive work for example ebay launched and image recognition service or you",
    "start": "1137360",
    "end": "1142580"
  },
  {
    "text": "might do some stuff with crypto errors such as cryptocurrencies in your applications or CPU intensive",
    "start": "1142580",
    "end": "1147770"
  },
  {
    "text": "computation but much more likely you have some sort of budget processing so",
    "start": "1147770",
    "end": "1153320"
  },
  {
    "text": "why does reactive programming can complement your CPU intensive use case here are the examples how for joint",
    "start": "1153320",
    "end": "1160880"
  },
  {
    "start": "1157000",
    "end": "1248000"
  },
  {
    "text": "executors scales so for joint executor is more lightweight abstraction than a",
    "start": "1160880",
    "end": "1166340"
  },
  {
    "text": "thread pool in Java so that you can say I want to execute my tasks not as a separate thread or runnable I want to",
    "start": "1166340",
    "end": "1172610"
  },
  {
    "text": "execute them as a light wave form during tasks and basically for joint pool",
    "start": "1172610",
    "end": "1178040"
  },
  {
    "text": "offers of the work still an algorithm and some magic we shall say unless you do a blocking calls we can scale better",
    "start": "1178040",
    "end": "1184280"
  },
  {
    "text": "than the traditional thread pool by using more lightweight abstraction and work still in algorithms but it works",
    "start": "1184280",
    "end": "1190310"
  },
  {
    "text": "only unless we do a blocking call whenever we do a blocking call we block our thread so with foreign executor you",
    "start": "1190310",
    "end": "1197300"
  },
  {
    "text": "work it not much more stressed than your CPU has course and you will process a lot of concurrent",
    "start": "1197300",
    "end": "1203419"
  },
  {
    "text": "and this screenshot is actually from a khadeem back in the past whenever they",
    "start": "1203419",
    "end": "1210799"
  },
  {
    "text": "changed the implementation in akka from this Red Bull executor to the foraging",
    "start": "1210799",
    "end": "1216200"
  },
  {
    "text": "executor and as you see you like this blue dots on the bottom of was the scalability with this Red Bull and green",
    "start": "1216200",
    "end": "1224119"
  },
  {
    "text": "dots are the earth scalability with four join of course not every workflow will get such a dramatic optimisation so it",
    "start": "1224119",
    "end": "1230389"
  },
  {
    "text": "highly depends on what instructions are executed and of course maybe with some magic we can scale thread pool better",
    "start": "1230389",
    "end": "1237349"
  },
  {
    "text": "but the key learning here is that sort of journey can be actually a tool to optimize your CPU bonded workflow some",
    "start": "1237349",
    "end": "1247639"
  },
  {
    "text": "example from eBay Classifieds so imagine the simple stream processing or the simple batch execution so imagine you",
    "start": "1247639",
    "end": "1255349"
  },
  {
    "start": "1248000",
    "end": "1372000"
  },
  {
    "text": "have two data sources Kafka Hadoop my sequel elasticsearch whatever so imagine you can write and",
    "start": "1255349",
    "end": "1262429"
  },
  {
    "text": "read as much as you can because for instance you are region from Kafka who is well scalable and you're writing to",
    "start": "1262429",
    "end": "1267469"
  },
  {
    "text": "Hadoop which is also has quite high limits on write capacity so the faster",
    "start": "1267469",
    "end": "1273679"
  },
  {
    "text": "you go process the stream depends only how fast the stream processing itself it takes so this would be a use case where",
    "start": "1273679",
    "end": "1280759"
  },
  {
    "text": "you can optimize your CPU bounded or flow and you can say for example if I don't have not so much data for example",
    "start": "1280759",
    "end": "1287149"
  },
  {
    "text": "in classifieds business you might want to deal with active listings and active listings are always limited in time by",
    "start": "1287149",
    "end": "1293959"
  },
  {
    "text": "number of active users so they are like could be millions billions but you always know it's a fixed set and you can",
    "start": "1293959",
    "end": "1299749"
  },
  {
    "text": "say okay I want to cultivate some statistic over the day or I want to just update my listings I won't just go",
    "start": "1299749",
    "end": "1305929"
  },
  {
    "text": "through them once and you can say I don't want to have some huge application cost relax part which will require some",
    "start": "1305929",
    "end": "1312589"
  },
  {
    "text": "application clustering and orchestration I can do it with a single node machine and I can do it with reactive streams",
    "start": "1312589",
    "end": "1317839"
  },
  {
    "text": "and if you go with some streaming solution of this for an executor under",
    "start": "1317839",
    "end": "1323179"
  },
  {
    "text": "the hood like for instance akka streams you can maybe do it faster than you will do it normally with the normal",
    "start": "1323179",
    "end": "1328669"
  },
  {
    "text": "traditional streaming solution without any reactivity under the news",
    "start": "1328669",
    "end": "1333669"
  },
  {
    "text": "so this would be an example in project director so we go for our list in repository then we can also apply some",
    "start": "1335470",
    "end": "1342419"
  },
  {
    "text": "reactivity features such as operators like filter we go process only visible listings then we say please in parallel",
    "start": "1342419",
    "end": "1349570"
  },
  {
    "text": "track for us reply activity and drag for us review activity and this will",
    "start": "1349570",
    "end": "1355029"
  },
  {
    "text": "basically almost all you need from business logic perspective to execute this kind of stream in logical but",
    "start": "1355029",
    "end": "1363399"
  },
  {
    "text": "streaming offers in the reactive world much more features so those are for instance back pressure and much more",
    "start": "1363399",
    "end": "1369460"
  },
  {
    "text": "reactive operators so what is the back pressure concept so it was initially",
    "start": "1369460",
    "end": "1375039"
  },
  {
    "start": "1372000",
    "end": "1462000"
  },
  {
    "text": "introduced in reactive streams and now it's a part of JDK 9 so it effectively",
    "start": "1375039",
    "end": "1380500"
  },
  {
    "text": "around 4 interfaces to all those are publisher and subscriber and it offers",
    "start": "1380500",
    "end": "1385750"
  },
  {
    "text": "push pull back pressure model it means what can happen without back pressure your publisher can produce as many",
    "start": "1385750",
    "end": "1393220"
  },
  {
    "text": "messages as it can and you we for example reach some memory limits what could be the different solution",
    "start": "1393220",
    "end": "1398620"
  },
  {
    "text": "subscriber can communicate the demand okay I want to process now 5,000 messages and then publisher will push",
    "start": "1398620",
    "end": "1405039"
  },
  {
    "text": "the 5,000 messages or subscriber can communicate the demand and we can apply some smarter strategies how to handle",
    "start": "1405039",
    "end": "1411580"
  },
  {
    "text": "whenever we have overwhelm of messages so we can drop first we can drop last we can suspend the publish share or we can",
    "start": "1411580",
    "end": "1417669"
  },
  {
    "text": "maybe scale the subscriber so to add for",
    "start": "1417669",
    "end": "1422679"
  },
  {
    "text": "example this backpressure theme to our previous example we can use buffer operator and say please give me listing",
    "start": "1422679",
    "end": "1429549"
  },
  {
    "text": "in the buffer of 3,000 records so of this pro tune your performance of your listing repository publisher so it will",
    "start": "1429549",
    "end": "1435399"
  },
  {
    "text": "grab a listing in batch of 3,000 records and this is how we communicate the demand and here we come to the next use",
    "start": "1435399",
    "end": "1446259"
  },
  {
    "text": "case so in the previous example you have seen already that what we can do we can do is is some parallel commutation so we",
    "start": "1446259",
    "end": "1452350"
  },
  {
    "text": "can execute stuff a synchronously and this is where in my point of view reactive programming really shines",
    "start": "1452350",
    "end": "1458409"
  },
  {
    "text": "it's a synchronous and parallel request use case conversation so you are",
    "start": "1458409",
    "end": "1465429"
  },
  {
    "start": "1462000",
    "end": "1568000"
  },
  {
    "text": "interested in some listing for example you want to take this pure get to your home who is out on the quasi",
    "start": "1465429",
    "end": "1471750"
  },
  {
    "text": "effects platform so first whenever we create the conversation with a seller we",
    "start": "1471750",
    "end": "1477540"
  },
  {
    "text": "might want to get the listing details to create some conversation details such as logos text and so on then we might want",
    "start": "1477540",
    "end": "1483600"
  },
  {
    "text": "to do some fraud checks that for instance it's not a fraud it's a legit message then we want to handle push",
    "start": "1483600",
    "end": "1489660"
  },
  {
    "text": "notification in case if our customer is on mobile device then we want to share data with central analytics for some",
    "start": "1489660",
    "end": "1496460"
  },
  {
    "text": "data centric features such as recommendations and finally we want to record our message if everything was",
    "start": "1496460",
    "end": "1502170"
  },
  {
    "text": "done successfully as you can see here we can have several calls in parallel several calls a synchronously and",
    "start": "1502170",
    "end": "1508410"
  },
  {
    "text": "chained it all together so how it looks in the reactive implementation we say",
    "start": "1508410",
    "end": "1514560"
  },
  {
    "text": "our method create conversation first we'll use the zip operator from project director and here is the nice marble",
    "start": "1514560",
    "end": "1521430"
  },
  {
    "text": "diagram which describes all the operators interactive libraries so for instance zip is taking two results and",
    "start": "1521430",
    "end": "1528390"
  },
  {
    "text": "merge them together to get the results together we can say then please apply it a mod of gyration one second and then we",
    "start": "1528390",
    "end": "1536160"
  },
  {
    "text": "assign Chronos level not to fly our central analytics via synchronously and push notification and we can actually",
    "start": "1536160",
    "end": "1542310"
  },
  {
    "text": "then record message or handle the favor and in this particular example I would",
    "start": "1542310",
    "end": "1548460"
  },
  {
    "text": "say each line of this code has some business meaning so zip operation clearly indicates if",
    "start": "1548460",
    "end": "1554310"
  },
  {
    "text": "you want two results together then we want a synchronous notification and then",
    "start": "1554310",
    "end": "1559620"
  },
  {
    "text": "we have our record store that so we clearly described as a synchronous and parallel execution as a single pipeline",
    "start": "1559620",
    "end": "1567980"
  },
  {
    "text": "the other example is from our country entity in UK so they have their Android",
    "start": "1567980",
    "end": "1575100"
  },
  {
    "start": "1568000",
    "end": "1670000"
  },
  {
    "text": "team and they applied pattern called BFF or back-end for front-end so what was",
    "start": "1575100",
    "end": "1580350"
  },
  {
    "text": "back-end for front-end I guess many of you are dealing with micro services and in order not to talk",
    "start": "1580350",
    "end": "1586020"
  },
  {
    "text": "to all of you micro services you might have something in front of them so this could be an API key tree pattern where",
    "start": "1586020",
    "end": "1592380"
  },
  {
    "text": "you have just one service in front of you the whole the system and then all the other clients can talk to it or you",
    "start": "1592380",
    "end": "1598230"
  },
  {
    "text": "can design the specific API gateway which will serve as the backend for yours cific client such as for example you",
    "start": "1598230",
    "end": "1604860"
  },
  {
    "text": "want to use features of Android platform separate from web so you want to design endpoint specifically for Android so you",
    "start": "1604860",
    "end": "1611940"
  },
  {
    "text": "design the backend which handles Android and in Gumtree UK is the team handles both parts so the Android team handles",
    "start": "1611940",
    "end": "1618930"
  },
  {
    "text": "also the BFF for their own needs so they can make changes on their own pretty",
    "start": "1618930",
    "end": "1624210"
  },
  {
    "text": "fast and as you might know the active parody is quite popular in mobile",
    "start": "1624210",
    "end": "1629250"
  },
  {
    "text": "development so they do it with reactive on mobile side and the user Excel and",
    "start": "1629250",
    "end": "1634710"
  },
  {
    "text": "you can use a rich Java also on the server side so they build actually they are back and for front-end with Erics",
    "start": "1634710",
    "end": "1640530"
  },
  {
    "text": "Java so there are two gains here one is they applied similar technology on both sides so that the whole team is familiar",
    "start": "1640530",
    "end": "1647010"
  },
  {
    "text": "with your Java the whole team is familiar with Java the second one BFF or",
    "start": "1647010",
    "end": "1652080"
  },
  {
    "text": "API gateway is actually another example where you might want to have several calls a synchronously several calls in",
    "start": "1652080",
    "end": "1658800"
  },
  {
    "text": "parallel and actually reactive programming is the concept that simplifies asynchronous and concurrent",
    "start": "1658800",
    "end": "1665580"
  },
  {
    "text": "programming so here are two benefits at one so",
    "start": "1665580",
    "end": "1671190"
  },
  {
    "start": "1670000",
    "end": "1774000"
  },
  {
    "text": "speaking about client-side activity so my talk is mainly about the backend side but still I had a chance to talk to our",
    "start": "1671190",
    "end": "1676710"
  },
  {
    "text": "mobile and client-side engineers I found out that it's quite popular to be reactive on the mobile side so for",
    "start": "1676710",
    "end": "1684570"
  },
  {
    "text": "example we have a central SDK team in Portland to build some central SDK components for our mobile development",
    "start": "1684570",
    "end": "1690690"
  },
  {
    "text": "and they applied the reactive programming award and how does it save their life in mobile development",
    "start": "1690690",
    "end": "1698210"
  },
  {
    "text": "previously for example they were using even bus based architecture and they found out that with reactive programming",
    "start": "1698210",
    "end": "1704580"
  },
  {
    "text": "it's easier for them to describe in chain multiple asynchronous calls",
    "start": "1704580",
    "end": "1709710"
  },
  {
    "text": "together so reactive programming simplifies to make out of the multiple",
    "start": "1709710",
    "end": "1715350"
  },
  {
    "text": "asynchronous execution a flow so in many in many use cases on client side you",
    "start": "1715350",
    "end": "1721410"
  },
  {
    "text": "might want to have things done asynchronously and this type of architecture is more native to us and",
    "start": "1721410",
    "end": "1726510"
  },
  {
    "text": "Cronos execution around JavaScript development we also have some use cases",
    "start": "1726510",
    "end": "1732060"
  },
  {
    "text": "but we haven't seen that much for example I learned that it renin second chart was done with",
    "start": "1732060",
    "end": "1737220"
  },
  {
    "text": "reactive programming but I didn't learn much details to present today so the",
    "start": "1737220",
    "end": "1744510"
  },
  {
    "text": "deep learning for me from this small research across eBay Classifieds companies is actually that reactive",
    "start": "1744510",
    "end": "1750420"
  },
  {
    "text": "programming complements about asynchronous scenarios because it's a synchronous by nature so it means the",
    "start": "1750420",
    "end": "1757530"
  },
  {
    "text": "biggest gain is whenever you are synchronous you use reactive programming you get some features on top whenever",
    "start": "1757530",
    "end": "1763200"
  },
  {
    "text": "you have sequential business process this dark table and you may want to use",
    "start": "1763200",
    "end": "1768210"
  },
  {
    "text": "it in some scenarios and you may want to stick with traditional programmatic approach in other scenarios so summarize",
    "start": "1768210",
    "end": "1775800"
  },
  {
    "start": "1774000",
    "end": "1846000"
  },
  {
    "text": "in the use cases so we've talked about high latency higher because one of the biggest gains from reactive programming",
    "start": "1775800",
    "end": "1781470"
  },
  {
    "text": "is actually save resources from westphall wasteful working calls so the",
    "start": "1781470",
    "end": "1786750"
  },
  {
    "text": "higher latency you have the more threats you will draw and they're harder to scale will be for your application the",
    "start": "1786750",
    "end": "1795210"
  },
  {
    "text": "second use case was about using for journal execution and to get some more CPU based optimizations so how does it",
    "start": "1795210",
    "end": "1802710"
  },
  {
    "text": "work reactive programming allows you to be non-blocking you get rid of wasteful blocking cause you can apply power of",
    "start": "1802710",
    "end": "1809520"
  },
  {
    "text": "fork/join execution then we've got the stream processing and budget processing",
    "start": "1809520",
    "end": "1814650"
  },
  {
    "text": "this is exactly where we can apply streaming feature back pressure and also get some CPU optimization from foreign",
    "start": "1814650",
    "end": "1820590"
  },
  {
    "text": "execution and the biggest one in my own point of view still remains parallel and asynchronous programming so this is",
    "start": "1820590",
    "end": "1827880"
  },
  {
    "text": "where you can say that reactive foo logic exactly expressed what happens in your application and of course because",
    "start": "1827880",
    "end": "1834930"
  },
  {
    "text": "there are many scenarios on client side which as a synchronous reactive programming complements in them alone so",
    "start": "1834930",
    "end": "1840890"
  },
  {
    "text": "we have seen quite a lot of use cases of reactive programming on the client side and maybe",
    "start": "1840890",
    "end": "1848250"
  },
  {
    "start": "1846000",
    "end": "1905000"
  },
  {
    "text": "reactive programming is not a silver ballad buttons definitely at - so the - you can apply across your system so you",
    "start": "1848250",
    "end": "1854460"
  },
  {
    "text": "must say API gateway is a component which will handle quite some load and it will get some aggregations so let's make",
    "start": "1854460",
    "end": "1861570"
  },
  {
    "text": "it reactive so you may say chart will also have some aggregation so let's also",
    "start": "1861570",
    "end": "1866940"
  },
  {
    "text": "make it reactive and maybe the service that use external networking cause that might",
    "start": "1866940",
    "end": "1872159"
  },
  {
    "text": "make sense but for example the listing where we have just sequential execution and simple business logic and maybe not",
    "start": "1872159",
    "end": "1877649"
  },
  {
    "text": "such a huge lot we may keep it with the normal block in execution for example in",
    "start": "1877649",
    "end": "1882749"
  },
  {
    "text": "our motor is vertical we use ring and we have in our tool set both Sprintweb flux which is reactive and we still use pink",
    "start": "1882749",
    "end": "1889469"
  },
  {
    "text": "MVC which is blocking so we decide per micro service and that's another beauty of micro services in one scenarios you",
    "start": "1889469",
    "end": "1895619"
  },
  {
    "text": "may go reactive way in another scenario you might go in the traditional programmatic approach so no need select",
    "start": "1895619",
    "end": "1901709"
  },
  {
    "text": "one single tool to rule them all and last but not least when I would not",
    "start": "1901709",
    "end": "1908369"
  },
  {
    "start": "1905000",
    "end": "2111000"
  },
  {
    "text": "recommend personally use reactive programming so it's exactly opposite to the use cases so whenever you have many",
    "start": "1908369",
    "end": "1914609"
  },
  {
    "text": "low latency calls while latency you could be the normal read from database which should end up in in one or a few",
    "start": "1914609",
    "end": "1921359"
  },
  {
    "text": "milliseconds and you are using for instance relational sequel based database and if you don't use your M",
    "start": "1921359",
    "end": "1929070"
  },
  {
    "text": "framework to get an aggregation entity together you may have a several calls",
    "start": "1929070",
    "end": "1934529"
  },
  {
    "text": "and you may want to put them into one chain and the more you process",
    "start": "1934529",
    "end": "1939959"
  },
  {
    "text": "independent calls with a synchronous results such as mana and flux and the harder is to compile the stuff together",
    "start": "1939959",
    "end": "1946879"
  },
  {
    "text": "the other use case would be the blocking i/o so back to the relational database",
    "start": "1946879",
    "end": "1951899"
  },
  {
    "text": "so you have relational JDBC driver even though there are libraries for non blocking sequel database access you",
    "start": "1951899",
    "end": "1958649"
  },
  {
    "text": "might still want JDBC based one like spring GP or just JP a specific specification and your business process",
    "start": "1958649",
    "end": "1965729"
  },
  {
    "text": "is sequential like in the listing example you get the listing you get the review of listings you get it back what",
    "start": "1965729",
    "end": "1972359"
  },
  {
    "text": "would be the reason to make it reactive here I personally don't find so this is",
    "start": "1972359",
    "end": "1977940"
  },
  {
    "text": "exactly when I would not use if I have a choice reactive programming I have my blocking library so I cannot get it in a",
    "start": "1977940",
    "end": "1984779"
  },
  {
    "text": "working manner I have the sequential business process so I cannot get usefulness of the operators backpressure",
    "start": "1984779",
    "end": "1991919"
  },
  {
    "text": "and parallel execution then sometimes is cheaper to scale with hardware so EB",
    "start": "1991919",
    "end": "1999959"
  },
  {
    "text": "decided to go with some hardware optimization because they operating at you scale their companies who do not have",
    "start": "1999959",
    "end": "2006110"
  },
  {
    "text": "such a huge load they might want still scale with one more instance of your container or your application it will be",
    "start": "2006110",
    "end": "2013130"
  },
  {
    "text": "cheaper than for example for your team to learn reactive programming or even if the team is familiar with reactive",
    "start": "2013130",
    "end": "2018770"
  },
  {
    "text": "programming to complicate your code with us introduce melodic rappers and many of",
    "start": "2018770",
    "end": "2024470"
  },
  {
    "text": "you might know green threat approach such as cotton co-routines or close our library any if you so the concept of",
    "start": "2024470",
    "end": "2032690"
  },
  {
    "text": "green threads is actually that you can suspend that thread without making you",
    "start": "2032690",
    "end": "2038990"
  },
  {
    "text": "can suspend your execution without blocking your thread this is a way how you can handle any theory in unblocking",
    "start": "2038990",
    "end": "2045590"
  },
  {
    "text": "cause without blocking this thread in a programmatic approach so that you still",
    "start": "2045590",
    "end": "2051560"
  },
  {
    "text": "are using non-working implementation you still brought your execution but you don't lock the thread and your code",
    "start": "2051560",
    "end": "2057108"
  },
  {
    "text": "looks programmatic so if you didn't have a chance I highly encourage you to look on cotton co-routines",
    "start": "2057109",
    "end": "2062210"
  },
  {
    "text": "or quasi library or actually there is an upcoming initiative called Project loon",
    "start": "2062210",
    "end": "2067270"
  },
  {
    "text": "which should be shipped with some JDK version hopefully we shall have the green thread approach together with Java",
    "start": "2067270",
    "end": "2075520"
  },
  {
    "text": "and of course this presentation wasn't compiled on my own so to help me understand the use cases I asked my",
    "start": "2075520",
    "end": "2081770"
  },
  {
    "text": "colleagues for help so here are their names and for more insights what we do in Berlin specifically we have our",
    "start": "2081770",
    "end": "2089750"
  },
  {
    "text": "technical blog and we have our boost today to ask more questions from the guys who work at these companies so",
    "start": "2089750",
    "end": "2095690"
  },
  {
    "text": "thank you for a time",
    "start": "2095690",
    "end": "2098500"
  },
  {
    "text": "you",
    "start": "2102740",
    "end": "2104800"
  }
]