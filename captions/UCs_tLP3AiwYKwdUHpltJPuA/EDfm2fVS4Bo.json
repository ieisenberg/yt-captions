[
  {
    "text": "[Music] hello everyone welcome and thank you for",
    "start": "3630",
    "end": "10620"
  },
  {
    "text": "joining me in this session where I'm going to explore how we can use Elixir to simplify the implementation of our",
    "start": "10620",
    "end": "16260"
  },
  {
    "text": "software systems now uh when I say the term Software System I'm referring to a",
    "start": "16260",
    "end": "21779"
  },
  {
    "text": "particular type of software for example such as web servers or say databases",
    "start": "21779",
    "end": "27960"
  },
  {
    "text": "message queues and similar kind of programs and what's common for all these",
    "start": "27960",
    "end": "33000"
  },
  {
    "text": "examples of programs are a couple of properties so first and foremost these are the programs which when you start in",
    "start": "33000",
    "end": "39239"
  },
  {
    "text": "production uh they have to be running constantly continuously preferably with no downtime at all for a long period of",
    "start": "39239",
    "end": "46020"
  },
  {
    "text": "time like say many years or maybe even many decades in some extreme examples and while they're running at any point",
    "start": "46020",
    "end": "53219"
  },
  {
    "text": "in time they have to perform a bunch of different tasks a bunch of different activities are constantly happening in the system such as say handling",
    "start": "53219",
    "end": "60120"
  },
  {
    "text": "different incoming requests but also beyond the request response cycle running some background jobs like say",
    "start": "60120",
    "end": "67140"
  },
  {
    "text": "communicating with external third-party services running some periodical jobs like cleanups managing some kind of",
    "start": "67140",
    "end": "74280"
  },
  {
    "text": "in-memory states such as caches having some sort of cues to communicate between different parts of the system uh",
    "start": "74280",
    "end": "81299"
  },
  {
    "text": "managing load so controlling the load like applying back pressure or rate",
    "start": "81299",
    "end": "87060"
  },
  {
    "text": "limiting and so on and so forth so a bunch of things are happening a bunch of activities are happening in the system",
    "start": "87060",
    "end": "92100"
  },
  {
    "text": "and what's really uh interesting is that these activities are like mostly mutually Loosely dependent many of them",
    "start": "92100",
    "end": "99000"
  },
  {
    "text": "are like completely mutually independent and so the system operates in sort of Shades of Gray of availability of",
    "start": "99000",
    "end": "105780"
  },
  {
    "text": "success right it's not binary it's not like it either works or it doesn't so like for example if a single request",
    "start": "105780",
    "end": "111960"
  },
  {
    "text": "fails that doesn't mean that the entire system has to fail and we can still provide most of our service to most of",
    "start": "111960",
    "end": "118259"
  },
  {
    "text": "our users and this is a very interesting property of software systems but not of all programs of course now uh typically",
    "start": "118259",
    "end": "126540"
  },
  {
    "text": "how we are approaching the these challenges these particularities of software systems is through a plethora",
    "start": "126540",
    "end": "133020"
  },
  {
    "text": "of different approaches at different levels so like at the very lowest level you might start using non-blocking input",
    "start": "133020",
    "end": "139140"
  },
  {
    "text": "output to separate latencies of different activities like different requests then you might run multiple",
    "start": "139140",
    "end": "145319"
  },
  {
    "text": "copies of a web server locally and install some sort of a load balancer slash reverse proxy in front of those so",
    "start": "145319",
    "end": "152220"
  },
  {
    "text": "you may run a couple of hours threads or a couple of os processes for that then you might split your system into a",
    "start": "152220",
    "end": "158220"
  },
  {
    "text": "couple of os processes a couple of micro services for example to improve your fault tolerance inevitably when you go",
    "start": "158220",
    "end": "164580"
  },
  {
    "text": "down that path you're going to need to reach for some third-party components such as a reverse proxy slash load",
    "start": "164580",
    "end": "169680"
  },
  {
    "text": "balancer for example nginx you might also need to have some sort of a",
    "start": "169680",
    "end": "174959"
  },
  {
    "text": "in-memory KV as a product so say redis some sort of a message queue and then of",
    "start": "174959",
    "end": "180120"
  },
  {
    "text": "course you will definitely need to use some kind of a service manager such as systemd at the very least to organize",
    "start": "180120",
    "end": "187080"
  },
  {
    "text": "all these separate OS processes at the OS level and of course if you want to get fancy you can reach for kubernetes",
    "start": "187080",
    "end": "194159"
  },
  {
    "text": "for example now uh these are in my personal view like very popular standard",
    "start": "194159",
    "end": "200099"
  },
  {
    "text": "approaches one to say uh these these days and have been for uh many years in fact in our industry and while these",
    "start": "200099",
    "end": "207239"
  },
  {
    "text": "approaches most certainly work I personally feel that in many cases we end up throwing these huge and complex",
    "start": "207239",
    "end": "213420"
  },
  {
    "text": "Machinery to solve relatively simple to maybe moderate the complex problems and in the process we are actually",
    "start": "213420",
    "end": "219420"
  },
  {
    "text": "introducing a large amount of technical complexity uh into our implementation",
    "start": "219420",
    "end": "224760"
  },
  {
    "text": "and what I want to show you today is that using languages such as Elixir you can actually reduce uh significantly and",
    "start": "224760",
    "end": "232140"
  },
  {
    "text": "in some cases completely eliminate this technical complexity and you can get the same benefits and even better and bigger",
    "start": "232140",
    "end": "239700"
  },
  {
    "text": "benefits and at the same time have a much simpler implementation now Elixir",
    "start": "239700",
    "end": "245580"
  },
  {
    "text": "is a programming language from the beam family of languages so there are a couple of others I have listed here and",
    "start": "245580",
    "end": "251580"
  },
  {
    "text": "many more which I haven't listed here and what's really common for all these languages is that they use the same",
    "start": "251580",
    "end": "257519"
  },
  {
    "text": "runtime which is called beam and this is the erlang virtual machine and",
    "start": "257519",
    "end": "262740"
  },
  {
    "text": "essentially all the benefits that I'm going to mention uh here today uh come from B right so I'm going to talk",
    "start": "262740",
    "end": "269340"
  },
  {
    "text": "exclusively about the leaks here but really everything I say apply to all beam languages past present and uh",
    "start": "269340",
    "end": "275340"
  },
  {
    "text": "future now uh an interesting thing about beam as a runtime is uh the fact that it",
    "start": "275340",
    "end": "281220"
  },
  {
    "text": "gives us like the services or features that you typically get at only as the operating system level we get them",
    "start": "281220",
    "end": "287759"
  },
  {
    "text": "directly at the runtime and therefore directly in our language so the story goes like this like say you write a",
    "start": "287759",
    "end": "293460"
  },
  {
    "text": "program in for example Elixir and you start your program somehow what happens is a single operating system process is",
    "start": "293460",
    "end": "299940"
  },
  {
    "text": "started and this is the instance of beam where the program is running and inside that single OS process you can run and",
    "start": "299940",
    "end": "307080"
  },
  {
    "text": "manage a large number of independent lightweight small programs which are called processes so try to memorize this",
    "start": "307080",
    "end": "313979"
  },
  {
    "text": "word process process means a small independent program inside the inside of that single OS process so process is not",
    "start": "313979",
    "end": "321240"
  },
  {
    "text": "a noise process okay so One OS process this is the beam instance and a large number of these small little yellow",
    "start": "321240",
    "end": "327780"
  },
  {
    "text": "boxes these processes these independent programs and when I say large I mean like hundreds of thousands or even",
    "start": "327780",
    "end": "333539"
  },
  {
    "text": "Millions like I think the maximum limit is uh somewhere around 100 Millions per single uh beam instance so you can",
    "start": "333539",
    "end": "341280"
  },
  {
    "text": "really run a large number of these programs inside a single OS process and",
    "start": "341280",
    "end": "346620"
  },
  {
    "text": "those are like regular programs sequential programs written in say Elixir erlang or whichever language you choose and these programs are completely",
    "start": "346620",
    "end": "353699"
  },
  {
    "text": "isolated from each other so they share no memory they're separately garbage collected they can only communicate by",
    "start": "353699",
    "end": "360780"
  },
  {
    "text": "sending themselves messages which is also known as message basic concurrency they fail separately at least so like if",
    "start": "360780",
    "end": "366840"
  },
  {
    "text": "a single program fails a single process fails all others are still up and running providing most of the service",
    "start": "366840",
    "end": "372840"
  },
  {
    "text": "and then finally beam spreads the execution of these processes across available uh CPU cores so immediately",
    "start": "372840",
    "end": "380520"
  },
  {
    "text": "out of the box you get multi-core capabilities so that's essentially all I have to say uh like that was a very",
    "start": "380520",
    "end": "386819"
  },
  {
    "text": "quick intro about Elixir and the beam in general I understand that it's very vague leaves a lot of questions open so",
    "start": "386819",
    "end": "392940"
  },
  {
    "text": "I'm going to do a small self-promotion self plug and uh forward you to my own",
    "start": "392940",
    "end": "398639"
  },
  {
    "text": "talk from about a year ago I'd go to Chicago called the soul of Orlando and elixir which is essentially uh 40",
    "start": "398639",
    "end": "405060"
  },
  {
    "text": "minutes demo driven exploration of beam concurrency and so if you want to learn uh more about it you may want to take a",
    "start": "405060",
    "end": "412259"
  },
  {
    "text": "look at uh that talk it's available uh on YouTube but anyway like the big point",
    "start": "412259",
    "end": "417660"
  },
  {
    "text": "of being again is that we get like sort of an embedded out of the box support",
    "start": "417660",
    "end": "422699"
  },
  {
    "text": "for like micro Services directly at our runtime directly in our language and we don't have to fall back to the operating",
    "start": "422699",
    "end": "429180"
  },
  {
    "text": "system level to get those properties like run a bunch of independent programs",
    "start": "429180",
    "end": "435240"
  },
  {
    "text": "and uh therefore uh we can solve a lot of problems directly in our language and we can have like a monolithical uh",
    "start": "435240",
    "end": "442620"
  },
  {
    "text": "organization of our code we can literally have a monolith a single uh project written in single language but",
    "start": "442620",
    "end": "448680"
  },
  {
    "text": "internally it still spread uh across a large number of independent programs so like essentially micro Nano Pico",
    "start": "448680",
    "end": "455880"
  },
  {
    "text": "Services if you will and I'm going to show you uh this in practice uh I'm",
    "start": "455880",
    "end": "460919"
  },
  {
    "text": "going to do a small case study of a very simple very small system but still a system which runs in production which is",
    "start": "460919",
    "end": "467160"
  },
  {
    "text": "uh out there on the internet access globally by millions of people worldwide and this system is called the",
    "start": "467160",
    "end": "474900"
  },
  {
    "text": "erlangelist now the Earl Angeles is my own blog post hosted at the Orlando blog",
    "start": "474900",
    "end": "480240"
  },
  {
    "text": "site hosted at the earlangelist.com and uh it's written exclusively in Elixir so",
    "start": "480240",
    "end": "485699"
  },
  {
    "text": "organized as a monolith it's a single project written in Elixir and it's open",
    "start": "485699",
    "end": "491639"
  },
  {
    "text": "sourced so uh essentially it's very easy to have your own run your own copy of",
    "start": "491639",
    "end": "497400"
  },
  {
    "text": "the Orlando's locally there are like four steps only three are listed here but step number zero is of course",
    "start": "497400",
    "end": "503520"
  },
  {
    "text": "installing prerequisites basically erlang Elixir and node.js the latter is",
    "start": "503520",
    "end": "509340"
  },
  {
    "text": "needed uh only to deal with assets like to bundle assets such as javascripts and",
    "start": "509340",
    "end": "514380"
  },
  {
    "text": "style sheets and once you have the prerequisites installed uh you clone the repo fetch the dependencies invoke a",
    "start": "514380",
    "end": "520680"
  },
  {
    "text": "single command and you are running the entire relangelist so like everything",
    "start": "520680",
    "end": "526020"
  },
  {
    "text": "that is running in production is running also locally on your machine there is nothing happening on production that",
    "start": "526020",
    "end": "531600"
  },
  {
    "text": "isn't running locally on your machine 100 of the system is running uh locally so it's like super simple to get started",
    "start": "531600",
    "end": "537839"
  },
  {
    "text": "and your language is really supported by nothing else on the side no third-party products or something like that now this",
    "start": "537839",
    "end": "545040"
  },
  {
    "text": "may not seem like much for simple blog sites uh because you know the Orlando is really in terms of complexity as simple",
    "start": "545040",
    "end": "551519"
  },
  {
    "text": "as it gets it's a basically a statical Content server this content changes like very very infrequently basically when I",
    "start": "551519",
    "end": "558540"
  },
  {
    "text": "write a new post which happens like once a year or so uh but still uh behind the scene things are happening which are not",
    "start": "558540",
    "end": "565260"
  },
  {
    "text": "immediately obvious uh I'm going to show you uh some of the things that are happening I'm gonna show you the process",
    "start": "565260",
    "end": "571980"
  },
  {
    "text": "structure powering uh these different features but one big point I want to say here is that like I frequently hear",
    "start": "571980",
    "end": "578160"
  },
  {
    "text": "people uh speaking terms such as web app or a web page or uh say web server and",
    "start": "578160",
    "end": "584880"
  },
  {
    "text": "to me what we are building is more than that so like as a back-end developer I re I look at this as a system you know a",
    "start": "584880",
    "end": "591420"
  },
  {
    "text": "bunch of activities happening it's way more than just a request responder I mean to the end user of course it is an",
    "start": "591420",
    "end": "597120"
  },
  {
    "text": "app or it is a page but to us the back-end developers it is a system and",
    "start": "597120",
    "end": "602339"
  },
  {
    "text": "uh I want to emphasize this because again a bunch of stuff is happening system even such a simple system as the",
    "start": "602339",
    "end": "608640"
  },
  {
    "text": "Earl angelist so yeah let's take a look at some of uh the features and the process structure powering different",
    "start": "608640",
    "end": "614279"
  },
  {
    "text": "features and I'm going to start with like the most obvious one and uh this is serving requests right this is a",
    "start": "614279",
    "end": "619740"
  },
  {
    "text": "basically what uh the system has been built for so like you visit",
    "start": "619740",
    "end": "624800"
  },
  {
    "text": "www.theorlandulus.com and you get served uh some blog posts uh now the process",
    "start": "624800",
    "end": "630120"
  },
  {
    "text": "structure powering uh this particular part of the system looks uh simplified version looks as follows uh so in the",
    "start": "630120",
    "end": "637440"
  },
  {
    "text": "system so again the blue box is the system it's like the beam instance that single OS process and little yellow",
    "start": "637440",
    "end": "642540"
  },
  {
    "text": "boxes are small programs within that single OS process these processes right and so uh among a bunch of these",
    "start": "642540",
    "end": "649380"
  },
  {
    "text": "processes we have two uh one lessons on cortex for HTTP traffic another one on",
    "start": "649380",
    "end": "654660"
  },
  {
    "text": "Port y for https traffic and uh once our request arrives or yeah once a request",
    "start": "654660",
    "end": "660899"
  },
  {
    "text": "arrives each of these processes will spawn separate processes to handle those requests so each request is handled in",
    "start": "660899",
    "end": "667800"
  },
  {
    "text": "its own separate temporary short living one-off process so like if we have a",
    "start": "667800",
    "end": "673320"
  },
  {
    "text": "million requests uh at the same time we're going to have million of these processes at the same time and if we",
    "start": "673320",
    "end": "679860"
  },
  {
    "text": "have zero people around then we're going to have zero of this thing so they're like very dynamic in their nature and",
    "start": "679860",
    "end": "685800"
  },
  {
    "text": "again you know these processes are super lightweight in terms of startup time and memory overhead so you can really run a",
    "start": "685800",
    "end": "691860"
  },
  {
    "text": "large amount of them simultaneously so this process structure uh first and",
    "start": "691860",
    "end": "697860"
  },
  {
    "text": "foremost it's not something that I wrote myself it's uh it's uh given to me courtesy of the library that I'm using",
    "start": "697860",
    "end": "704399"
  },
  {
    "text": "or in this case a framework it's called Phoenix web framework which is like the go to solution in Elixir to write web",
    "start": "704399",
    "end": "710880"
  },
  {
    "text": "facing uh systems um and uh basically the library just",
    "start": "710880",
    "end": "715920"
  },
  {
    "text": "organizes this process structure and pretty much any web library that you're using in the beam ecosystem is going to",
    "start": "715920",
    "end": "721680"
  },
  {
    "text": "do a similar take uh with respect to process organization uh so I didn't have",
    "start": "721680",
    "end": "727620"
  },
  {
    "text": "to invest any work into this myself you know I'm just using Library as advertise uh but the question is why why do we",
    "start": "727620",
    "end": "733500"
  },
  {
    "text": "have such process structure and so there are a couple of benefits that we get uh the most obvious one is a multi-core",
    "start": "733500",
    "end": "738959"
  },
  {
    "text": "capability all right because uh by splitting the total workload across a large number of small independent",
    "start": "738959",
    "end": "745200"
  },
  {
    "text": "programs I provide the opportunity to beam to spread the execution of these",
    "start": "745200",
    "end": "750240"
  },
  {
    "text": "processes across available CPU cores so I get potential for parallelism and I get vertical scalability like if the",
    "start": "750240",
    "end": "757680"
  },
  {
    "text": "system is maxing out on the current machine so for example the Orlando list is running on like some super uh super",
    "start": "757680",
    "end": "764100"
  },
  {
    "text": "weak super small box which I'm paying for like about five dollars a month or something like that and uh if it's",
    "start": "764100",
    "end": "770940"
  },
  {
    "text": "maxing out on that machine I can put it on a bigger box more CPU cores and it just takes advantage of all this extra",
    "start": "770940",
    "end": "776760"
  },
  {
    "text": "Hardware that it is given right so I get a vertical scalability uh with such",
    "start": "776760",
    "end": "782459"
  },
  {
    "text": "process organization uh furthermore I get full tolerance I get separation of failures like if something goes wrong",
    "start": "782459",
    "end": "789480"
  },
  {
    "text": "when handling a single request say like the division by zero square root of minus one or something like that that",
    "start": "789480",
    "end": "795540"
  },
  {
    "text": "process would crash due to an unhandle exception but everything else is still running and I'm providing most of the",
    "start": "795540",
    "end": "800880"
  },
  {
    "text": "service so I still have a large uh availability or close to Max availability at any point in time and",
    "start": "800880",
    "end": "807540"
  },
  {
    "text": "then finally uh this process organization allows me to separate latencies of different activities in the",
    "start": "807540",
    "end": "813120"
  },
  {
    "text": "system so again if like a single Handler uh runs for a long time due to say a bug",
    "start": "813120",
    "end": "818519"
  },
  {
    "text": "sub-optimal implementation or maybe some external reasons like it's contacting external service which is low everything",
    "start": "818519",
    "end": "825180"
  },
  {
    "text": "else is unaffected even on a single core machine with a you know just a single thread running uh even then due to how",
    "start": "825180",
    "end": "832500"
  },
  {
    "text": "beam does scheduling of these processes with very frequent context switching even then a long running process will",
    "start": "832500",
    "end": "838800"
  },
  {
    "text": "not significantly affect duration latencies or the execution time of other processes in the system and so in",
    "start": "838800",
    "end": "846480"
  },
  {
    "text": "summary out of the box courtesy of using Phoenix web framework you know this Library not a product but a library I",
    "start": "846480",
    "end": "852779"
  },
  {
    "text": "get uh multi-core capability vertical scalability separation of failure separation of latencies I also get",
    "start": "852779",
    "end": "859260"
  },
  {
    "text": "typical features of any uh web server such as say support for compression uh",
    "start": "859260",
    "end": "865680"
  },
  {
    "text": "serving statical files directly from the disk and so on and so forth and I really didn't have to invest pretty much any",
    "start": "865680",
    "end": "871800"
  },
  {
    "text": "work into that and essentially I don't need to run multiple copies of the server locally and I don't need a load",
    "start": "871800",
    "end": "878519"
  },
  {
    "text": "balancer in front of those copies and what this means is that the typical components such as nginx is not needed",
    "start": "878519",
    "end": "885300"
  },
  {
    "text": "and in production the Orlando list is not using nginx it listens directly for the incoming traffic on ports 80 and 443",
    "start": "885300",
    "end": "893100"
  },
  {
    "text": "and so that's one typical complex technical component out of the window",
    "start": "893100",
    "end": "898920"
  },
  {
    "text": "you know removed from the table and this uh simplifies my implementation you know because I don't need to worry about that",
    "start": "898920",
    "end": "905160"
  },
  {
    "text": "X extra third party product and deal with like this nginx configuration with those any files and whatnot",
    "start": "905160",
    "end": "912180"
  },
  {
    "text": "okay so uh that was about uh serving requests now as as I said uh there are a",
    "start": "912180",
    "end": "918240"
  },
  {
    "text": "bunch of other things happening in the Evangelist Beyond just plain request responses so uh this is a the property",
    "start": "918240",
    "end": "925920"
  },
  {
    "text": "that you typically want to have or the feature that you want to have in any kind of a production system no matter how small or big you want to gather some",
    "start": "925920",
    "end": "932519"
  },
  {
    "text": "statistics about the system usage right and so for the Orlando list I kept it to a bare minimum super simple and stupid",
    "start": "932519",
    "end": "938360"
  },
  {
    "text": "essentially uh I'm collecting uh the uh count of uh the read count per article",
    "start": "938360",
    "end": "946620"
  },
  {
    "text": "per day for the past seven days you know and that's basically I wanted just for uh quantity purposes so like when I",
    "start": "946620",
    "end": "952800"
  },
  {
    "text": "publish a new post I want to see uh how frequently is it accessed especially compared to uh previously uh published",
    "start": "952800",
    "end": "959399"
  },
  {
    "text": "posts uh now normally for this uh you would want to have some sort of a database uh like say postgresql or",
    "start": "959399",
    "end": "966300"
  },
  {
    "text": "something because you want to persist this data so it can help uh restarts uh",
    "start": "966300",
    "end": "971699"
  },
  {
    "text": "however in uh the Orlando list I actually rolled my own database not the general purpose one but very lightweight",
    "start": "971699",
    "end": "977220"
  },
  {
    "text": "specialized one for this particular scenario uh now this is this seems like somewhat unorthodox but uh it made sense",
    "start": "977220",
    "end": "985019"
  },
  {
    "text": "for me because my use case here is super simple this data is what I like to call nice to have data so normally I want to",
    "start": "985019",
    "end": "991740"
  },
  {
    "text": "have it but if I happen to lose it occasionally uh I won't really shed a tier and so I can make different kinds",
    "start": "991740",
    "end": "997320"
  },
  {
    "text": "of trade-offs right and I wrote like this lightweight built-in database in Elixir again very uh very specialized on",
    "start": "997320",
    "end": "1004279"
  },
  {
    "text": "the general purpose this one and with that this complexity of dealing with the third party database and that's like a",
    "start": "1004279",
    "end": "1009860"
  },
  {
    "text": "huge amount of complexity which involves installing the database setting up some roles uh dealing with migrations like",
    "start": "1009860",
    "end": "1016820"
  },
  {
    "text": "creating database structure and then finally dealing with impedance mismatch you know data uh going from Elixir to",
    "start": "1016820",
    "end": "1023959"
  },
  {
    "text": "the database and then back you know all this stuff flies out of the window and I get much much simpler uh technical",
    "start": "1023959",
    "end": "1030380"
  },
  {
    "text": "implementation which is not as fancy as postgresql but it's perfectly sufficient for this particular use case and just in",
    "start": "1030380",
    "end": "1036740"
  },
  {
    "text": "case you wonder I also had uh like uh pretty much any production I've had such cases to where I had to deal with this",
    "start": "1036740",
    "end": "1043100"
  },
  {
    "text": "but I like to call again nice to have data where uh just doing something on my own uh in like say 100 or Max 200 lines",
    "start": "1043100",
    "end": "1050840"
  },
  {
    "text": "of code uh was actually much much simpler than having to deal with external database so anyway process wise",
    "start": "1050840",
    "end": "1056900"
  },
  {
    "text": "here's how it looks like so among all these processes we have a Singleton process a well-named process well",
    "start": "1056900",
    "end": "1064700"
  },
  {
    "text": "addressable process it's called stats collector here and so we have these request handlers which are handling uh",
    "start": "1064700",
    "end": "1071059"
  },
  {
    "text": "incoming web requests and uh when a request Handler serves the article it's",
    "start": "1071059",
    "end": "1076640"
  },
  {
    "text": "going to send a message to the stats collector like Article 4 red article bar red article Buzz red and stats collector",
    "start": "1076640",
    "end": "1083960"
  },
  {
    "text": "is going to keep an in-memory State a mapping of the article ID to the read count and so it's just going to bump the",
    "start": "1083960",
    "end": "1090380"
  },
  {
    "text": "corresponding counter now a big thing here is that stats collector can work in",
    "start": "1090380",
    "end": "1095900"
  },
  {
    "text": "concurrent environment it can serve multiple simultaneous clients and that happens because it's a single process",
    "start": "1095900",
    "end": "1101539"
  },
  {
    "text": "and process is a sequential program so it handles one message at a time and therefore it's a point of",
    "start": "1101539",
    "end": "1107299"
  },
  {
    "text": "synchronization it's a point of consistency and so we don't get a typical error a typical multi-threading",
    "start": "1107299",
    "end": "1114260"
  },
  {
    "text": "or typical typical concurrency problems such as race conditions live locks Deadlocks and so on and so forth so it",
    "start": "1114260",
    "end": "1121580"
  },
  {
    "text": "works perfectly fine in uh uh multi multi-threaded or uh concurrent",
    "start": "1121580",
    "end": "1126740"
  },
  {
    "text": "environment and it can handle multiple simultaneous clients uh now the stats collector is uh as I said it Aggregates",
    "start": "1126740",
    "end": "1134360"
  },
  {
    "text": "data in memory but when it comes to storing data it actually will occasionally fire off a separate one-off",
    "start": "1134360",
    "end": "1141559"
  },
  {
    "text": "temporary process which is going to flush this data to disk so uh we have this disc writer process uh you know",
    "start": "1141559",
    "end": "1148039"
  },
  {
    "text": "it's just given this data and it just stores it to disk now this separation is",
    "start": "1148039",
    "end": "1153320"
  },
  {
    "text": "done uh again for uh for due to separation of failures and latencies so",
    "start": "1153320",
    "end": "1159500"
  },
  {
    "text": "by doing the writing to this in separate process we ensure that when something goes wrong and writing this can go wrong",
    "start": "1159500",
    "end": "1165559"
  },
  {
    "text": "like say if I don't have permissions or maybe the disk is full uh the stats collector will still live and it will",
    "start": "1165559",
    "end": "1172280"
  },
  {
    "text": "still keep this data in memory and it will aggregate further data uh and then some future iteration when the",
    "start": "1172280",
    "end": "1178760"
  },
  {
    "text": "circumstances allow it some future diskwriter instance will succeed right and so we have separation of failures",
    "start": "1178760",
    "end": "1184640"
  },
  {
    "text": "and we have uh like the lightweight self-healing property likewise we get",
    "start": "1184640",
    "end": "1189919"
  },
  {
    "text": "separation of latencies so like if the disk operation becomes slow for whichever reasons tax collector is",
    "start": "1189919",
    "end": "1195679"
  },
  {
    "text": "independent process and so it can still keep aggregating this data and in the next iteration uh no matter how slow uh",
    "start": "1195679",
    "end": "1202400"
  },
  {
    "text": "writing to disk is it's going to store this data to this you know so we separate uh disk based operation from",
    "start": "1202400",
    "end": "1208880"
  },
  {
    "text": "in-memory operation we separate their latencies and their failures now uh",
    "start": "1208880",
    "end": "1214700"
  },
  {
    "text": "another thing happening here uh so like I'm storing this data into one file per",
    "start": "1214700",
    "end": "1220700"
  },
  {
    "text": "each day and I want to only keep the files for the last seven days and so I need to do some periodical cleanup and",
    "start": "1220700",
    "end": "1227419"
  },
  {
    "text": "this is also an example of something that I've I've needed in 100 of the systems I have ever worked in no matter",
    "start": "1227419",
    "end": "1233720"
  },
  {
    "text": "how small or big there's always a need to do some periodical jobs like say cleanup or archiving and whatnot maybe",
    "start": "1233720",
    "end": "1239960"
  },
  {
    "text": "periodically access or pull some external service and typically with other Technologies",
    "start": "1239960",
    "end": "1246200"
  },
  {
    "text": "non-beam Technologies or languages you have to fall back to the operating",
    "start": "1246200",
    "end": "1251240"
  },
  {
    "text": "system level so like you're gonna do a Cron job or maybe a systemd timer or",
    "start": "1251240",
    "end": "1256280"
  },
  {
    "text": "something like that but in being running a periodical job is as simple as starting the separate program which runs",
    "start": "1256280",
    "end": "1263419"
  },
  {
    "text": "something periodically like in the naive implementation it could be literally such program could be something along",
    "start": "1263419",
    "end": "1268640"
  },
  {
    "text": "the lines of while true sleep X do something go back right",
    "start": "1268640",
    "end": "1274100"
  },
  {
    "text": "um the real implementation is a bit more involved at least the way I do it and so I want to show you this because this is the arguably uh arguably the simplest",
    "start": "1274100",
    "end": "1281539"
  },
  {
    "text": "smallest example of thinking concurrently in beam of how granular how fine-grained we get uh with these beam",
    "start": "1281539",
    "end": "1288320"
  },
  {
    "text": "processes this is like turbocharged turbocharged micro Services if you will right and so the essential idea is that",
    "start": "1288320",
    "end": "1294860"
  },
  {
    "text": "we have two processes powering a single periodical activity they always come in pairs like if you want to run 100",
    "start": "1294860",
    "end": "1301159"
  },
  {
    "text": "periodical jobs you're going to have 100 pairs 200 of these small processes so one process is a scheduler it takes",
    "start": "1301159",
    "end": "1308000"
  },
  {
    "text": "regularly every X in the desired interval and so every X it fires off it",
    "start": "1308000",
    "end": "1313640"
  },
  {
    "text": "starts this temporary one-off process to actually perform the tasks to do the job again we do this to separate failures",
    "start": "1313640",
    "end": "1321860"
  },
  {
    "text": "and latencies like if this job fails crashes for whichever error the",
    "start": "1321860",
    "end": "1327679"
  },
  {
    "text": "scheduler still keeps sticking unaffected and in the next iteration it starts the new instance which you know",
    "start": "1327679",
    "end": "1333080"
  },
  {
    "text": "maybe succeeds maybe doesn't but sooner or later when the circumstances allow it it will succeed you know but the point",
    "start": "1333080",
    "end": "1338539"
  },
  {
    "text": "is that we separate failure of the job itself from the job of ticking you know",
    "start": "1338539",
    "end": "1343700"
  },
  {
    "text": "or regularly doing something likewise we separate latencies so like imagine that this job is taking much longer than the",
    "start": "1343700",
    "end": "1351080"
  },
  {
    "text": "interval in the next iteration the scheduler ticks and now it can make a decision you can make this decision on a",
    "start": "1351080",
    "end": "1357380"
  },
  {
    "text": "case-by-case basis like you can decide to terminate the previous instance and start a new one you can decide to start",
    "start": "1357380",
    "end": "1363559"
  },
  {
    "text": "the new one side by side to the previous one you can decide to run at most X and then start terminating the oldest ones",
    "start": "1363559",
    "end": "1370100"
  },
  {
    "text": "you can decide to do nothing and wait a couple of Cycles more and then see what you're going to do so you have a bunch",
    "start": "1370100",
    "end": "1375260"
  },
  {
    "text": "of options at your disposal it's actually way more flexible than your typical Chrome job or timer and at the",
    "start": "1375260",
    "end": "1381620"
  },
  {
    "text": "same time the code is like really super simple and declarative so this is how it looks like I mean again I'm using the",
    "start": "1381620",
    "end": "1387679"
  },
  {
    "text": "library which does this so instead of using a product such as say Cron job I",
    "start": "1387679",
    "end": "1393500"
  },
  {
    "text": "have this as a library just like you have Json parser for example and uh it's still like a super uh super declarative",
    "start": "1393500",
    "end": "1400880"
  },
  {
    "text": "so I basically say every minute invoke this function and then you know I have a couple of different options which how I",
    "start": "1400880",
    "end": "1407539"
  },
  {
    "text": "can control this thing and otherwise I can even uh have an imperative interface to you know uh be more flexible in how",
    "start": "1407539",
    "end": "1414080"
  },
  {
    "text": "I'm executing this job so but the point is it's like super declarative I would say uh pretty easy to read even if you",
    "start": "1414080",
    "end": "1420080"
  },
  {
    "text": "don't understand Elixir and at the same time technically much simpler and way more flexible than your typical uh",
    "start": "1420080",
    "end": "1426980"
  },
  {
    "text": "opaque third-party components okay uh yeah one other thing I want to",
    "start": "1426980",
    "end": "1432679"
  },
  {
    "text": "show you uh because everything is now running inside the same monolith inside the same project it's actually testable",
    "start": "1432679",
    "end": "1438500"
  },
  {
    "text": "right so I have a test that verify that I'm periodically cleaning up all stats right so this is a standard Triple A",
    "start": "1438500",
    "end": "1444860"
  },
  {
    "text": "test a range act assert so in the range phase I'm bringing the system into the desired State uh basically I'm accessing",
    "start": "1444860",
    "end": "1452059"
  },
  {
    "text": "the article eight days ago seven days ago six days ago and then uh I send an",
    "start": "1452059",
    "end": "1458659"
  },
  {
    "text": "Impulse uh to the periodical scheduler so in the test uh environment it's not",
    "start": "1458659",
    "end": "1464240"
  },
  {
    "text": "really ticking automatically I have to manually send it an Impulse so I send it",
    "start": "1464240",
    "end": "1469460"
  },
  {
    "text": "an impulse and then I just verify that now that I access usage stats I only get",
    "start": "1469460",
    "end": "1475100"
  },
  {
    "text": "the stats for the article uh six days ago so the ones from seven and eight days ago uh that practice seven and",
    "start": "1475100",
    "end": "1481460"
  },
  {
    "text": "eight days ago respectively uh have been purged right so I can actually test this with chrome job you typically don't",
    "start": "1481460",
    "end": "1487100"
  },
  {
    "text": "really test uh those things you you can test like that some function is actually doing what it's supposed to do but you",
    "start": "1487100",
    "end": "1492140"
  },
  {
    "text": "don't have tests like is this job actually executing periodically I had similar thing in a production system",
    "start": "1492140",
    "end": "1498919"
  },
  {
    "text": "where we had like a periodical job executed at fixed schedule at like midnight say UTC time and uh we had a",
    "start": "1498919",
    "end": "1507799"
  },
  {
    "text": "test that verifies that like at midnight UTC literally we have uh this particular",
    "start": "1507799",
    "end": "1513860"
  },
  {
    "text": "uh activity executed and we then assert on the expected state of the system so",
    "start": "1513860",
    "end": "1518900"
  },
  {
    "text": "this gives me much more confidence right so again it's a way way more testable than one reaching out for third-party",
    "start": "1518900",
    "end": "1525380"
  },
  {
    "text": "products okay uh the final thing I want to show you is uh how I'm serving https",
    "start": "1525380",
    "end": "1531980"
  },
  {
    "text": "traffic right so uh evangelist uh basically like I think any any good",
    "start": "1531980",
    "end": "1537500"
  },
  {
    "text": "system these days serves traffic through https I think that like from the standpoint of security and uh privacy",
    "start": "1537500",
    "end": "1543380"
  },
  {
    "text": "concerns this is a really a good practice and should not be an option now to serve https you need to have a valid",
    "start": "1543380",
    "end": "1550640"
  },
  {
    "text": "certificate accepted by browsers and there are a couple of different options many options how you can obtain the",
    "start": "1550640",
    "end": "1556880"
  },
  {
    "text": "certificate I opted for like a very popular one today called let's encrypt and what's nice about let's encrypt is",
    "start": "1556880",
    "end": "1563840"
  },
  {
    "text": "that it costs zero money which is uh always a good thing and uh then also uh",
    "start": "1563840",
    "end": "1569059"
  },
  {
    "text": "that it can be automated right so instead of having a human obtaining a certificate you can actually have a",
    "start": "1569059",
    "end": "1574700"
  },
  {
    "text": "machine a program doing it right and it looks roughly like this so we have",
    "start": "1574700",
    "end": "1579799"
  },
  {
    "text": "conversation a dialogue between two uh two systems on the left it's our system like the Orlando list and on the right",
    "start": "1579799",
    "end": "1586100"
  },
  {
    "text": "it's a certificate Authority a CA a system which is somehow officially recognized and authorized to issue valid",
    "start": "1586100",
    "end": "1594260"
  },
  {
    "text": "certificates and so our system uh initiates the conversation it asks the",
    "start": "1594260",
    "end": "1599720"
  },
  {
    "text": "ca server uh like can you please give me the certificate for the domain at therlangelist.com and the ca server",
    "start": "1599720",
    "end": "1606919"
  },
  {
    "text": "responds sure you can get it but you need to prove that you actually are the owner of the arlangelist.com and so what",
    "start": "1606919",
    "end": "1613100"
  },
  {
    "text": "we're going to do is following I'm going to send you uh these random bytes now and then I'm going to make a request to",
    "start": "1613100",
    "end": "1619159"
  },
  {
    "text": "the earlangelist.compath and you need to serve those same Bots and if you're able",
    "start": "1619159",
    "end": "1624440"
  },
  {
    "text": "to do this then you effectively prove that you are the Orlando list and you can get uh your certificate so the",
    "start": "1624440",
    "end": "1631279"
  },
  {
    "text": "actual story is uh way more involved but I hope that you get the gist of it and",
    "start": "1631279",
    "end": "1636620"
  },
  {
    "text": "so this conversation the protocol of this conversation is called Acme Acme automated certificate management",
    "start": "1636620",
    "end": "1643340"
  },
  {
    "text": "environment and uh this in my view is also an activity of the system you know",
    "start": "1643340",
    "end": "1649100"
  },
  {
    "text": "it's a program that has to be executed during the very first Boot and then occasionally before the certificate",
    "start": "1649100",
    "end": "1654919"
  },
  {
    "text": "expires for renew annual and for me it makes most sense to actually run it as a part of the same programming in the same",
    "start": "1654919",
    "end": "1662120"
  },
  {
    "text": "place where the rest of the activities are running which is typically not the case otherwise like when you read the",
    "start": "1662120",
    "end": "1669140"
  },
  {
    "text": "options for Less encryption most of the options are actually going to recommend to uh run some external program on the",
    "start": "1669140",
    "end": "1675020"
  },
  {
    "text": "side like say most typical or most popular option is a thing called searchbot so you need to run this search",
    "start": "1675020",
    "end": "1681020"
  },
  {
    "text": "about thing and most often the the promoted version will also ask you to have nginx like you can do it without",
    "start": "1681020",
    "end": "1687200"
  },
  {
    "text": "nginx or reverse proxies but uh that's like the most advertised option at least in my impression and so uh if I wanted",
    "start": "1687200",
    "end": "1693500"
  },
  {
    "text": "to do this with like the recommended way I would have to install this third bot thing which brings in Python and then I",
    "start": "1693500",
    "end": "1699140"
  },
  {
    "text": "would have to run nginx in front and this again adds a lot of complexity so in the Orlando list is done a little bit",
    "start": "1699140",
    "end": "1705679"
  },
  {
    "text": "differently I'm using a third-party Library which incidentally I wrote myself it's called site encrypt",
    "start": "1705679",
    "end": "1711340"
  },
  {
    "text": "and I'm running this certification directly in the same system so same Amplified version is that we have this",
    "start": "1711340",
    "end": "1717620"
  },
  {
    "text": "process called certifier it's in fact a process structure but either way the point is that like when the system boots",
    "start": "1717620",
    "end": "1723799"
  },
  {
    "text": "for the very first time the certifier will initiate this conversation with let's encrypt and in the middle of this",
    "start": "1723799",
    "end": "1729679"
  },
  {
    "text": "conversation let's contact this uh HTTP server here uh which is like the web",
    "start": "1729679",
    "end": "1735380"
  },
  {
    "text": "server I've shown you before and then we're going to respond so everything is integrated in the same monolith in the",
    "start": "1735380",
    "end": "1741260"
  },
  {
    "text": "same OS process and in fact due to this structure uh I don't even have to store anything to the disk temporarily which",
    "start": "1741260",
    "end": "1747620"
  },
  {
    "text": "otherwise typically happens with searchbot and other tools so it's very nicely integrated another interesting",
    "start": "1747620",
    "end": "1753620"
  },
  {
    "text": "benefit of this approach is that uh I can also run a local Acme server so like",
    "start": "1753620",
    "end": "1759020"
  },
  {
    "text": "sort of a shim a mock of let's encrypt this is also supported by or powered by",
    "start": "1759020",
    "end": "1764299"
  },
  {
    "text": "the library so as a writer of deal Angeles I didn't really have to invent this wheel myself so in development and",
    "start": "1764299",
    "end": "1771020"
  },
  {
    "text": "test mode I'm running this local Acme server and the system the certifier uses that local collecting the server instead",
    "start": "1771020",
    "end": "1777799"
  },
  {
    "text": "of the real one and therefore I can have the system the Orlando is certifying itself locally and this is important",
    "start": "1777799",
    "end": "1785299"
  },
  {
    "text": "because it allows me to reduce the Gap the differences between the production",
    "start": "1785299",
    "end": "1790880"
  },
  {
    "text": "and a local version so when I told you that when you start the Orlando is locally you're running everything you",
    "start": "1790880",
    "end": "1796460"
  },
  {
    "text": "are literally running everything even this Acme certification takes place of course it has to be through a local",
    "start": "1796460",
    "end": "1801860"
  },
  {
    "text": "server because uh you don't have a publicly exposed domain so let me show you this through a simple demo",
    "start": "1801860",
    "end": "1809120"
  },
  {
    "text": "I'm gonna walk you a little bit through uh some things of the Orlando list so this",
    "start": "1809120",
    "end": "1816320"
  },
  {
    "text": "is the Orlando's project I'm gonna invoke first the Erlanger list clean helper task which uh cleans everything",
    "start": "1816320",
    "end": "1823159"
  },
  {
    "text": "uh like the previously existing certificates and what what not and so this is like I'm starting your lunch",
    "start": "1823159",
    "end": "1828260"
  },
  {
    "text": "list for the very first uh time uh on this machine and so I invoke this uh",
    "start": "1828260",
    "end": "1834260"
  },
  {
    "text": "magical command and within a matter of like a second the site certified itself so let me just show you this uh so I",
    "start": "1834260",
    "end": "1841640"
  },
  {
    "text": "started the site so it first generated a temporary self-signed certificate this is just uh so we can start listening uh",
    "start": "1841640",
    "end": "1848659"
  },
  {
    "text": "so this is still not Acme so then I start the end point endpoint in Phoenix lingo means a server so I start HTTP and",
    "start": "1848659",
    "end": "1856340"
  },
  {
    "text": "https uh one facing part of my system then I start local Acme server all",
    "start": "1856340",
    "end": "1861740"
  },
  {
    "text": "within the same OS process right so I can run multiple uh servers in the same OS process and then we are creating new",
    "start": "1861740",
    "end": "1870080"
  },
  {
    "text": "certificate Authority account and then a little bit below we are ordering new certificate and it has been obtained and",
    "start": "1870080",
    "end": "1877279"
  },
  {
    "text": "now the Orlando list is serving itself certified using the Acme protocol and",
    "start": "1877279",
    "end": "1882620"
  },
  {
    "text": "it's serving uh so you can see here on Port 2443 it's serving https of course",
    "start": "1882620",
    "end": "1889100"
  },
  {
    "text": "the browser complains because this is still a self-signed certificate it's not uh authorized uh but the point is that",
    "start": "1889100",
    "end": "1894980"
  },
  {
    "text": "uh I actually uh ran this flow as I'm running it in production and we can still we can see this uh certificate",
    "start": "1894980",
    "end": "1901100"
  },
  {
    "text": "here the Orlando list.com um now let me just show you briefly",
    "start": "1901100",
    "end": "1907220"
  },
  {
    "text": "another thing so again I spoke about a lot of activities so let's visualize this this there is a tool called",
    "start": "1907220",
    "end": "1913700"
  },
  {
    "text": "Observer which I can start this thing although GUI is also implemented in playing uh in this case erlang it's from",
    "start": "1913700",
    "end": "1920480"
  },
  {
    "text": "erlang standard library and this is a so-called supervision tree of uh it doesn't even fit on the entire screen of",
    "start": "1920480",
    "end": "1927020"
  },
  {
    "text": "the Earl Angeles of the local Evangelist and uh uh basically each box is its own",
    "start": "1927020",
    "end": "1933200"
  },
  {
    "text": "separate uh process organizing a sort of tree like hierarchy of parents and",
    "start": "1933200",
    "end": "1938720"
  },
  {
    "text": "children and I like to call this like an embedded system D because it gives you pretty much the same kind of features",
    "start": "1938720",
    "end": "1943760"
  },
  {
    "text": "like the ability to uh organize how the system is starting in which order is starting how things are interconnected",
    "start": "1943760",
    "end": "1950360"
  },
  {
    "text": "like if something stops then stop that other thing so for example if uh blog",
    "start": "1950360",
    "end": "1955640"
  },
  {
    "text": "endpoint stops uh which is again the web facing uh part of the system then we're",
    "start": "1955640",
    "end": "1960679"
  },
  {
    "text": "also going to stop for these two processes uh which are the certifier and the local Acme server and so it gives me",
    "start": "1960679",
    "end": "1967039"
  },
  {
    "text": "similar features but again embedded in my language and uh interface through with the same language as the rest of",
    "start": "1967039",
    "end": "1972679"
  },
  {
    "text": "the system and it's again much more flexible so for example this part of the tree uh here uh this is the local acne",
    "start": "1972679",
    "end": "1980659"
  },
  {
    "text": "server which is only started on local development and tests so like uh very very uh flexible and again I don't need",
    "start": "1980659",
    "end": "1987320"
  },
  {
    "text": "to fall back to the operating system level to get such properties and maybe just as another small point I have this",
    "start": "1987320",
    "end": "1993320"
  },
  {
    "text": "thing here called a dashboard so dashboard is yet another web server running which I didn't even mention it's",
    "start": "1993320",
    "end": "2000100"
  },
  {
    "text": "kind of like a very lightweight uh embedded graphite so a site which is not exposed externally it's only Exposed on",
    "start": "2000100",
    "end": "2007000"
  },
  {
    "text": "a internal Port which gives me some sort of metrics dashboards so I can get some",
    "start": "2007000",
    "end": "2013000"
  },
  {
    "text": "insight about the system uh usage and uh and the state okay so anyway uh that was",
    "start": "2013000",
    "end": "2020200"
  },
  {
    "text": "that so again you know the big point is that uh the differences between",
    "start": "2020200",
    "end": "2025240"
  },
  {
    "text": "production and development are reduced and this holds not only for development but but also for tests so like let me",
    "start": "2025240",
    "end": "2032140"
  },
  {
    "text": "show you some tests here uh this module here is where I'm testing the blog uh",
    "start": "2032140",
    "end": "2037960"
  },
  {
    "text": "they do web facing parts so I'm testing for example whether a root page shows the most recent article and so on and so",
    "start": "2037960",
    "end": "2044320"
  },
  {
    "text": "forth and so then I have a couple of interesting tests so for example I'm verifying that HTTP request are",
    "start": "2044320",
    "end": "2050740"
  },
  {
    "text": "redirected to https normally if you configure this in nginx then this is not going to be tested you kind of configure",
    "start": "2050740",
    "end": "2057280"
  },
  {
    "text": "it test it in production first time and then you're hoping that it's not going to be broken but here actually have",
    "start": "2057280",
    "end": "2062679"
  },
  {
    "text": "tests which can verify this kind of behavior so again the the differences between production and Dev slash tests",
    "start": "2062679",
    "end": "2069638"
  },
  {
    "text": "are pretty much non-existent other than the fact that I'm using local Acme",
    "start": "2069639",
    "end": "2074679"
  },
  {
    "text": "server and not the real uh let's encrypt.org therefore I can also test that dearlangelist.com is redirected to",
    "start": "2074679",
    "end": "2082179"
  },
  {
    "text": "www and then another interesting thing I can test the certification process itself so this is a power you know just",
    "start": "2082179",
    "end": "2089440"
  },
  {
    "text": "three functions and powered by uh the site encrypt Library so this function here is going to clean restart the",
    "start": "2089440",
    "end": "2096398"
  },
  {
    "text": "endpoint what this means is it's going to stop the end point the server uh clean all existing certificates restart",
    "start": "2096399",
    "end": "2102339"
  },
  {
    "text": "the endpoint and because this is now a first boot the endpoint is going to self-certificate using Acme and uh this",
    "start": "2102339",
    "end": "2109240"
  },
  {
    "text": "function will return all only when and if this succeeds so here now I can obtain the certificate of the endpoint",
    "start": "2109240",
    "end": "2115720"
  },
  {
    "text": "and let's just go into these functions from the library but let's take a look so I can demonstrate this certificate is",
    "start": "2115720",
    "end": "2121420"
  },
  {
    "text": "obtained not by looking into the disk or something like that we actually established the SSL connection to our",
    "start": "2121420",
    "end": "2127300"
  },
  {
    "text": "server and we fetch the certificate of the peer and so this it's really demonstrating that dear evangelist is",
    "start": "2127300",
    "end": "2134320"
  },
  {
    "text": "serving using this particular certificate and now I can assert something about the certificate such as",
    "start": "2134320",
    "end": "2139480"
  },
  {
    "text": "you know whether it has the expected domains that I've ordered and what this gives me is more confidence you know",
    "start": "2139480",
    "end": "2145660"
  },
  {
    "text": "like let's go to the code where certification is configured so again this is like very very declarative but",
    "start": "2145660",
    "end": "2151000"
  },
  {
    "text": "still this is not any this is not yaml this is code which is invoked during runtime it looks declarative but it's",
    "start": "2151000",
    "end": "2157240"
  },
  {
    "text": "still a programmable API and I can invoke some functions and I can have some ifs and else's fetch some data from",
    "start": "2157240",
    "end": "2163240"
  },
  {
    "text": "the database like fetch some metadata here from the database and whatnot like super super flexible right and so anyway",
    "start": "2163240",
    "end": "2169060"
  },
  {
    "text": "let's say that I make the mistake here uh let's say I have a syntax here I added another comma here and I save this",
    "start": "2169060",
    "end": "2175180"
  },
  {
    "text": "thing and immediately like even in the editor I get the compiler error so unlike any yaml and whatnot if there is",
    "start": "2175180",
    "end": "2181540"
  },
  {
    "text": "a syntax server here this thing is not even going to make it to production not even to the main branch you know it's",
    "start": "2181540",
    "end": "2186700"
  },
  {
    "text": "just gonna fail uh during the CI build uh the same holds uh if I make it uh if",
    "start": "2186700",
    "end": "2193000"
  },
  {
    "text": "I make a semantical error like syntactically it's correct but let's say I have an extra e here so it's like a V",
    "start": "2193000",
    "end": "2199119"
  },
  {
    "text": "or language instead of the Orlando list hopefully I vocalize this distinction properly so yeah synthetically this is",
    "start": "2199119",
    "end": "2206440"
  },
  {
    "text": "correct but when we run tests let's just wait for them and Bam our",
    "start": "2206440",
    "end": "2211900"
  },
  {
    "text": "test is failing right so the tests certification is failing because uh the",
    "start": "2211900",
    "end": "2217060"
  },
  {
    "text": "domains are not as expected so you know I get more confidence I can test uh more",
    "start": "2217060",
    "end": "2222280"
  },
  {
    "text": "things because everything is nicely integrated into that same monolith still organizes uh like microservices except",
    "start": "2222280",
    "end": "2228640"
  },
  {
    "text": "you know way more fragmented way more granular or fine-grained than you would typically do with micro uh services and",
    "start": "2228640",
    "end": "2235780"
  },
  {
    "text": "then finally uh uh this thing here simplifies my operation you know this monolithical uniform uh organization you",
    "start": "2235780",
    "end": "2243940"
  },
  {
    "text": "know just powered by Elixir so let me just show you uh the docker thing so a",
    "start": "2243940",
    "end": "2249040"
  },
  {
    "text": "run system in Docker there is not much need for that but I still want to have it dockerized because this uh this",
    "start": "2249040",
    "end": "2255460"
  },
  {
    "text": "allows me in some cases to uh really iron out or eliminate pretty much all differences between production and",
    "start": "2255460",
    "end": "2261520"
  },
  {
    "text": "development uh so I don't do typical development in Docker but occasionally I just want to try things out anyway this",
    "start": "2261520",
    "end": "2268780"
  },
  {
    "text": "is the docker file for the system it's a two it's a multi-stage or two-stage Docker file so stage number one is",
    "start": "2268780",
    "end": "2275079"
  },
  {
    "text": "Builder where I'm just building uh the deliverable which is so-called OTP release",
    "start": "2275079",
    "end": "2280540"
  },
  {
    "text": "um and the K-pop part here is the very last command so before that you know I start with Elixir Alpine Docker image",
    "start": "2280540",
    "end": "2286540"
  },
  {
    "text": "and then install a bunch of prerequisites like uh uh node.js and uh",
    "start": "2286540",
    "end": "2292720"
  },
  {
    "text": "what not and essentially here I'm building the release uh and so this is going to build a folder structure which",
    "start": "2292720",
    "end": "2299200"
  },
  {
    "text": "is going to contain the minimal erlang runtime binaries and it's going to contain Elixir binaries my dependency binary is my own binaries uh bundled",
    "start": "2299200",
    "end": "2306940"
  },
  {
    "text": "JavaScript style sheets images and whatnot and so this thing is self-contained and Standalone and I can",
    "start": "2306940",
    "end": "2313180"
  },
  {
    "text": "just take it and put it to another machine without needing to install anything there it has to be the same",
    "start": "2313180",
    "end": "2318220"
  },
  {
    "text": "operating system though and that's another reason why I like to use Docker and so this is the release then it",
    "start": "2318220",
    "end": "2323920"
  },
  {
    "text": "starts from raw Alpine and you can see how very lightweight it is uh here I'm",
    "start": "2323920",
    "end": "2328960"
  },
  {
    "text": "copying over stuff the release built in uh the Builder phase and at the OS level",
    "start": "2328960",
    "end": "2335500"
  },
  {
    "text": "this is the only prerequisite I have so I don't need to have a long Elixir and whatnot installed only in courses which",
    "start": "2335500",
    "end": "2340960"
  },
  {
    "text": "is required by erlang and that's pretty much it and so the operation is way way simpler and basically it boils down to",
    "start": "2340960",
    "end": "2347859"
  },
  {
    "text": "mounting uh volumes for like a certification database and some backup",
    "start": "2347859",
    "end": "2353020"
  },
  {
    "text": "which I want to have preserved even when I'm when I restart the docker image and",
    "start": "2353020",
    "end": "2358480"
  },
  {
    "text": "then final thing also related to operation Operation is not driven by programmatical API you know so like if I",
    "start": "2358480",
    "end": "2366400"
  },
  {
    "text": "want to do something uh like manage this certificate manually typically they are",
    "start": "2366400",
    "end": "2371680"
  },
  {
    "text": "renewed automatically but let's say that I want to do something manually what I can do is following I have a helper script here which will connect me to the",
    "start": "2371680",
    "end": "2379420"
  },
  {
    "text": "dear evangelist.com and give me an IEX session and what I get here is",
    "start": "2379420",
    "end": "2385839"
  },
  {
    "text": "interactive Elixir session in the context of production so now I'm running at the production at dearlangelist.com",
    "start": "2385839",
    "end": "2392680"
  },
  {
    "text": "and here what I can do is for example stuff such as site encrypt dot Force",
    "start": "2392680",
    "end": "2398619"
  },
  {
    "text": "certify and here I would provide something like Reliance list web.blog dot endpoint and this would",
    "start": "2398619",
    "end": "2405520"
  },
  {
    "text": "generate a new certificate manually and apply it to the site like wise I also",
    "start": "2405520",
    "end": "2411220"
  },
  {
    "text": "have a site encrypt dot dry certify which I can use to generate a",
    "start": "2411220",
    "end": "2416980"
  },
  {
    "text": "certificate but not applied to the site and I can also use this thing to actually use a different kind of Acme",
    "start": "2416980",
    "end": "2422740"
  },
  {
    "text": "server like say staging let's encrypt and so it's driven by code by the",
    "start": "2422740",
    "end": "2427780"
  },
  {
    "text": "interface or Elixir functions it's super simple for me because there's nothing else for me to learn no special technology uh basically you know to work",
    "start": "2427780",
    "end": "2435040"
  },
  {
    "text": "with the Orlando list all you need to learn is elixir and the problem domain so you can actually focus on problem",
    "start": "2435040",
    "end": "2441280"
  },
  {
    "text": "domain much more easily but if I want to uh if I wanted to provide some sort of a",
    "start": "2441280",
    "end": "2446740"
  },
  {
    "text": "more user interface friendly uh or user-friendly interface for say a non-developer operator like I can always",
    "start": "2446740",
    "end": "2454119"
  },
  {
    "text": "do this on top of such programmatical API I can provide like user interface or",
    "start": "2454119",
    "end": "2459820"
  },
  {
    "text": "I can provide a yaml based interface and whatnot this is always possible to build on top of this programmable API but the",
    "start": "2459820",
    "end": "2466300"
  },
  {
    "text": "reversal is either very very hard to build and it will require lot of improvisations and hacks and whatnot and",
    "start": "2466300",
    "end": "2473020"
  },
  {
    "text": "in some cases it's downright impossible and so this is also another thing that I like so anyway",
    "start": "2473020",
    "end": "2479740"
  },
  {
    "text": "to summarize uh uh oops everywhere to summarize uh",
    "start": "2479740",
    "end": "2485200"
  },
  {
    "text": "Elixir and uh basically beam and beam languages allow me to start super super simple as we have seen like in some",
    "start": "2485200",
    "end": "2490780"
  },
  {
    "text": "cases I can start using nothing but a single language in a single monolith project running as a single lowest",
    "start": "2490780",
    "end": "2496119"
  },
  {
    "text": "process in production more realistically you're probably gonna have to reach for a proper database and I would definitely",
    "start": "2496119",
    "end": "2501940"
  },
  {
    "text": "use it when I want to properly persist some data and that can take you very very far and of course when you do have",
    "start": "2501940",
    "end": "2508060"
  },
  {
    "text": "some more uh important needs you can always step outside of that technology",
    "start": "2508060",
    "end": "2514240"
  },
  {
    "text": "you can always go for the more traditional approaches reach for third-party products like say nginx if",
    "start": "2514240",
    "end": "2519460"
  },
  {
    "text": "you want some if you care about for example Performance or throughput or maybe carve stuff into multiple micro",
    "start": "2519460",
    "end": "2526359"
  },
  {
    "text": "Services if you want to so you can always do that but you have much simpler options in your disposal you have to start lightweight and expand from that",
    "start": "2526359",
    "end": "2533200"
  },
  {
    "text": "as you go along and this will reduce the amount of technical complexity uh in your project it will reduce the Gap the",
    "start": "2533200",
    "end": "2540579"
  },
  {
    "text": "differences between production and local development and make your system more testable and therefore give you more",
    "start": "2540579",
    "end": "2545859"
  },
  {
    "text": "confidence about your system and these are all very very important benefits and this is why I'm personally a huge fan of",
    "start": "2545859",
    "end": "2552400"
  },
  {
    "text": "Elixir and other beam languages which I have been using in production for the past 10 years now so that's pretty much",
    "start": "2552400",
    "end": "2559359"
  },
  {
    "text": "all that I had prepared for you thank you for uh tuning in for uh thank you",
    "start": "2559359",
    "end": "2564460"
  },
  {
    "text": "for your time and your attention in case you have any questions feel free to ask me and otherwise hope that this talk has",
    "start": "2564460",
    "end": "2571119"
  },
  {
    "text": "motivated you to explore elixir in more details thank you very much",
    "start": "2571119",
    "end": "2576280"
  },
  {
    "text": "thank you",
    "start": "2576280",
    "end": "2578460"
  }
]