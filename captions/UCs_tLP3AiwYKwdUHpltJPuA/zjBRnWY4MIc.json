[
  {
    "start": "0",
    "end": "50000"
  },
  {
    "text": "so welcome everybody to the go-to conference in Copenhagen my name is",
    "start": "6759",
    "end": "12759"
  },
  {
    "text": "Stefan I uh I wrote the first two nosql books uh and I run a few you know a lot",
    "start": "12759",
    "end": "19520"
  },
  {
    "text": "of nosql conferences and I'm very happy to have Ian pla here at the goto",
    "start": "19520",
    "end": "24720"
  },
  {
    "text": "conference welcome Ian well well thank you for having me um yeah just to start",
    "start": "24720",
    "end": "31439"
  },
  {
    "text": "uh tell us a little about yourself so um I work for Bachelor of Technologies the",
    "start": "31439",
    "end": "36879"
  },
  {
    "text": "makers of ROK I'm the technical lead of international operations based out of",
    "start": "36879",
    "end": "43680"
  },
  {
    "text": "London and um just here in Europe um talking about riok getting people",
    "start": "43680",
    "end": "49399"
  },
  {
    "text": "interested so so tell us please how did you get into the database space so um",
    "start": "49399",
    "end": "56440"
  },
  {
    "start": "50000",
    "end": "165000"
  },
  {
    "text": "previous to working at Basho I was working for a company building um",
    "start": "56440",
    "end": "61760"
  },
  {
    "text": "basically what amounted to cms's and also worked on a large scale bioinformatics project and um",
    "start": "61760",
    "end": "69640"
  },
  {
    "text": "traditional relational databases didn't really fit the problem so I started exploring alternative databases stumbled",
    "start": "69640",
    "end": "75360"
  },
  {
    "text": "upon riok and the rest is history MH okay so uh we will talk a little",
    "start": "75360",
    "end": "81360"
  },
  {
    "text": "about riok of course because it's an interesting database and can you tell us",
    "start": "81360",
    "end": "86840"
  },
  {
    "text": "when I first met reak I learned that it is a key value database but it can",
    "start": "86840",
    "end": "93000"
  },
  {
    "text": "understand Json and parse Json so so what it is a key value or a document database so it's a key value database",
    "start": "93000",
    "end": "100000"
  },
  {
    "text": "but it you can use it as a document database um ROK is agnostic to what your",
    "start": "100000",
    "end": "106200"
  },
  {
    "text": "values are to riok it's a binary blob which isn't 100% true because we have a",
    "start": "106200",
    "end": "111320"
  },
  {
    "text": "feature called riok search which allows you to do full text indexes based on your values assuming they're either",
    "start": "111320",
    "end": "117600"
  },
  {
    "text": "plain text XML or Json so it sort of blurs the line between um key value and",
    "start": "117600",
    "end": "123920"
  },
  {
    "text": "document store do one question comes to my mind do you also uh have some use cases which",
    "start": "123920",
    "end": "132440"
  },
  {
    "text": "are a little close to the graph space because you have link walking I think yeah so I mean you can build lightweight",
    "start": "132440",
    "end": "139200"
  },
  {
    "text": "graphs using links um potentially social graphs but um you know riok isn't a",
    "start": "139200",
    "end": "145400"
  },
  {
    "text": "graph database our links are essentially oneway relationships between object almost like hyperlinks in a web page so",
    "start": "145400",
    "end": "152560"
  },
  {
    "text": "maybe if you had a small social network where people had you a limited number of friends you could use links to express",
    "start": "152560",
    "end": "159360"
  },
  {
    "text": "those relationships but um you know you can do the same with our secondary indexing feature as",
    "start": "159360",
    "end": "165239"
  },
  {
    "start": "165000",
    "end": "235000"
  },
  {
    "text": "well okay I learned from the website that there are several versions of Rea",
    "start": "165239",
    "end": "170440"
  },
  {
    "text": "like CS core Enterprise can you tell us what's what the differences are so it",
    "start": "170440",
    "end": "176440"
  },
  {
    "text": "it's a little bit complicated in terms of products there's really three products that baso makes the first one",
    "start": "176440",
    "end": "183920"
  },
  {
    "text": "is ROK riok is the open source database um it's you know um the open-source",
    "start": "183920",
    "end": "191480"
  },
  {
    "text": "distributed database that all of our other products are built on top of um riok Enterprise or ROK EDS um are is the",
    "start": "191480",
    "end": "201680"
  },
  {
    "text": "um the commercial version of riok and we add a few other features including multi- dat Center replication as well as",
    "start": "201680",
    "end": "209080"
  },
  {
    "text": "um support um ROK CS is a new product we launched about two months ago um and ROK CS RI",
    "start": "209080",
    "end": "218080"
  },
  {
    "text": "Cloud store is basically a version of r that allows you to build your own um",
    "start": "218080",
    "end": "223280"
  },
  {
    "text": "cloud storage service you can build your own S3 it actually has an S3 compatible API and you can store large objects in",
    "start": "223280",
    "end": "230480"
  },
  {
    "text": "it but it's actually built on top of ROK so okay in the discussions with Andy",
    "start": "230480",
    "end": "238000"
  },
  {
    "start": "235000",
    "end": "335000"
  },
  {
    "text": "gross I learned that uh RI is operationally strong can you tell us why",
    "start": "238000",
    "end": "243959"
  },
  {
    "text": "so the reason why riok is operationally strong first off is it's a distributed",
    "start": "243959",
    "end": "249879"
  },
  {
    "text": "database so losing one node doesn't take your application down so it's tolerant",
    "start": "249879",
    "end": "256079"
  },
  {
    "text": "to failures you your operational staff may not even need to wake up in the middle of the night if a server crashes",
    "start": "256079",
    "end": "261840"
  },
  {
    "text": "they can deal with it in the morning on top of that when you need to scale out when you've run out of storage capacity",
    "start": "261840",
    "end": "268639"
  },
  {
    "text": "through puts um processing um you can simply add a node",
    "start": "268639",
    "end": "274800"
  },
  {
    "text": "by bringing a new server new VM online installing ROK on it and telling it to",
    "start": "274800",
    "end": "280560"
  },
  {
    "text": "join the cluster and it's just that easy I think few other databases out there have a horizontal scaling story that's",
    "start": "280560",
    "end": "288400"
  },
  {
    "text": "as simple as R MH um on top of that um",
    "start": "288400",
    "end": "294360"
  },
  {
    "text": "you know ROK is very easy to work with especially on from the operational",
    "start": "294360",
    "end": "301199"
  },
  {
    "text": "perspective um cluster membership managing your cluster as well as you",
    "start": "301199",
    "end": "307919"
  },
  {
    "text": "know tolerating the real world failures that you experience in distributed systems all sort of thought through in",
    "start": "307919",
    "end": "314520"
  },
  {
    "text": "the product so we really pride ourselves on on our our fault tolerance and that's",
    "start": "314520",
    "end": "322000"
  },
  {
    "text": "I think the key to operational Le failures are I I think the whole point of a",
    "start": "322000",
    "end": "328280"
  },
  {
    "text": "distributed database is that it should be able to transparently survive failure um so mhm and there's several I think",
    "start": "328280",
    "end": "338479"
  },
  {
    "start": "335000",
    "end": "420000"
  },
  {
    "text": "Monitoring Solutions you advertise like rear control and rear agnostic can you tell us a little bit",
    "start": "338479",
    "end": "345560"
  },
  {
    "text": "about these so I'll start with re agnostic the idea of re agnostic is",
    "start": "345560",
    "end": "351080"
  },
  {
    "text": "simply that we've identified the most common support problems we have and we",
    "start": "351080",
    "end": "356600"
  },
  {
    "text": "built a tool that just tells users they can run it against a r node and we say",
    "start": "356600",
    "end": "362360"
  },
  {
    "text": "here's a configuration issue you might have you should probably fix it for example if you had mounted a dis without",
    "start": "362360",
    "end": "368919"
  },
  {
    "text": "turning on no a Time meaning that you don't Mark access time every time a file",
    "start": "368919",
    "end": "374800"
  },
  {
    "text": "is access um which adds simply latency to your database or for example um ROK",
    "start": "374800",
    "end": "381800"
  },
  {
    "text": "will use a large number of file handles and most um operating systems limit the",
    "start": "381800",
    "end": "388560"
  },
  {
    "text": "number of file handles the process can have open to 1024 so um RI can use quite",
    "start": "388560",
    "end": "394680"
  },
  {
    "text": "a bit more than that so we'll warn you if for example your file handle limit is too low um uh so R control is actually a",
    "start": "394680",
    "end": "404960"
  },
  {
    "text": "cluster monitoring tool that allows you to actually um add and remove nodes from",
    "start": "404960",
    "end": "411319"
  },
  {
    "text": "a cluster get some idea of what parts of the Ring they own and um give you some",
    "start": "411319",
    "end": "417720"
  },
  {
    "text": "visibility into what rok's doing from a simple web interface M do you have some feedback from your life customers or",
    "start": "417720",
    "end": "425120"
  },
  {
    "start": "420000",
    "end": "625000"
  },
  {
    "text": "what can go wrong so um yeah there's a lot of",
    "start": "425120",
    "end": "430759"
  },
  {
    "text": "interesting cases actually one of the common most common issues are simply um",
    "start": "430759",
    "end": "436879"
  },
  {
    "text": "running distributed systems is really hard and we may even provide software",
    "start": "436879",
    "end": "442599"
  },
  {
    "text": "that helps people run distributed systems but the hardware around distributed systems are really hard and",
    "start": "442599",
    "end": "449000"
  },
  {
    "text": "so um we've repeatedly run into the same problems with customers um one common",
    "start": "449000",
    "end": "455120"
  },
  {
    "text": "one is called TCP incast where um buffers on switches are overrun when one",
    "start": "455120",
    "end": "461280"
  },
  {
    "text": "node sends out messages to a number of nodes which all send back messages at the same time to that original sending",
    "start": "461280",
    "end": "469080"
  },
  {
    "text": "node are these internal messages R internal no ROK internal messages so one",
    "start": "469080",
    "end": "475479"
  },
  {
    "text": "node may go out to three other nodes and say give me all of the replicas of this",
    "start": "475479",
    "end": "480919"
  },
  {
    "text": "piece of associated with this key and send them all back or you know for example we have things that are called",
    "start": "480919",
    "end": "486840"
  },
  {
    "text": "coverage queries if I wanted to see um you know do a range query with our secondary index feature um it would go",
    "start": "486840",
    "end": "494159"
  },
  {
    "text": "out to actually a covering set of the keyspace which means that you go to in a normally configur configured cluster",
    "start": "494159",
    "end": "501240"
  },
  {
    "text": "oneir of all nodes and all of those messages are routed back and it's very quick to overrun the um especially cheap",
    "start": "501240",
    "end": "509520"
  },
  {
    "text": "switches the switch buffers and you get this degenerate case where your TCP or",
    "start": "509520",
    "end": "515518"
  },
  {
    "text": "where your ethernet performance isn't being fully utilized where you might only be using 10% of it because you have",
    "start": "515519",
    "end": "521959"
  },
  {
    "text": "this weird behavior from both the um from the Linux kernels TCP stack as well",
    "start": "521959",
    "end": "527200"
  },
  {
    "text": "as your switches so um yeah that's a problem we've run into a number of times",
    "start": "527200",
    "end": "532959"
  },
  {
    "text": "um you know it's interesting um most of the time when I actually see failures",
    "start": "532959",
    "end": "538320"
  },
  {
    "text": "with ROK on once we've gotten past some of the initial common pitfalls um if",
    "start": "538320",
    "end": "543959"
  },
  {
    "text": "riok starts failing it's usually a sign of of Hardware problems that a dis is about to fail um so but there are common",
    "start": "543959",
    "end": "552279"
  },
  {
    "text": "problems in fact that's the point of re agnostic is combine those common issues that we've seen over and over again and",
    "start": "552279",
    "end": "559480"
  },
  {
    "text": "warn people before they have to call us and ask us what's going on or but I assume this is this is the valuable",
    "start": "559480",
    "end": "566079"
  },
  {
    "text": "internal knowledge you capture internally and you're not publishing these knowledge already",
    "start": "566079",
    "end": "572000"
  },
  {
    "text": "or which um the yeah these these fail what what can happen and how you react",
    "start": "572000",
    "end": "577880"
  },
  {
    "text": "to in these cases so I mean you know Common sorts of failures are are you know Hardware failure a dis goes out and",
    "start": "577880",
    "end": "585560"
  },
  {
    "text": "um you know ROK should transparently survive that assuming that you have enough nodes assuming that you you know",
    "start": "585560",
    "end": "592240"
  },
  {
    "text": "have four or more nodes um and in those cases I mean you basically if the",
    "start": "592240",
    "end": "600279"
  },
  {
    "text": "machine is not recoverable then you know you fix it and you remove the node from",
    "start": "600279",
    "end": "607360"
  },
  {
    "text": "the cluster saying this machine is is dead it's no longer part of the cluster I'm never going to be able to bring it",
    "start": "607360",
    "end": "613880"
  },
  {
    "text": "back once you repair that server bring a new server in you tell it to join and",
    "start": "613880",
    "end": "619839"
  },
  {
    "text": "you know the cluster returns to to health um so it actually um maybe you",
    "start": "619839",
    "end": "629680"
  },
  {
    "start": "625000",
    "end": "850000"
  },
  {
    "text": "want to talk about anti-entropy now because I think that actually fits in here yeah this is also one question so",
    "start": "629680",
    "end": "636639"
  },
  {
    "text": "yeah so um what is anti-entropy what is anti-entropy yeah anti-entropy um so",
    "start": "636639",
    "end": "644240"
  },
  {
    "text": "entropy is a um is the concept of of things becoming more disorganized over",
    "start": "644240",
    "end": "651320"
  },
  {
    "text": "time in physics right things becoming more random and and less organized um so",
    "start": "651320",
    "end": "658360"
  },
  {
    "text": "riok is an eventually consistent system um it doesn't enforce strong consistency",
    "start": "658360",
    "end": "664560"
  },
  {
    "text": "so what that means at any given time different nodes in the cluster um can",
    "start": "664560",
    "end": "670959"
  },
  {
    "text": "have a different idea about what a certain key what its value is um and one",
    "start": "670959",
    "end": "676959"
  },
  {
    "text": "of them is is more correct than the other one of them is the value you actually want so for example if you had",
    "start": "676959",
    "end": "685200"
  },
  {
    "text": "um a node go down during a write and the right only goes to two nodes and one of",
    "start": "685200",
    "end": "691240"
  },
  {
    "text": "the nodes missed it then that node that was down or partitioned um has different",
    "start": "691240",
    "end": "696399"
  },
  {
    "text": "knowledge yeah has different knowledge and when you come back and request that data in a read um riok will ask all of",
    "start": "696399",
    "end": "704279"
  },
  {
    "text": "those nodes for the data and um when it finds that one of them has a different piece of data an older version it will",
    "start": "704279",
    "end": "712720"
  },
  {
    "text": "do something called read repair which will update it with the newest version that's a form of anti-entropy idea of",
    "start": "712720",
    "end": "719399"
  },
  {
    "text": "anti-entropy is that it's bringing things back to an orderly State minimize diversity yes exactly so it's it's bring",
    "start": "719399",
    "end": "726639"
  },
  {
    "text": "it's moving things back towards consistency so there's a few mechanisms in Ron for anti-entropy there's another",
    "start": "726639",
    "end": "733639"
  },
  {
    "text": "called um hinted hand off so for example a node gets partitioned or goes down and",
    "start": "733639",
    "end": "739320"
  },
  {
    "text": "a Right comes in actually what will happen um is another node will take over",
    "start": "739320",
    "end": "745880"
  },
  {
    "text": "for it will'll spin up a fallback partition and that fallback partition will accept the right in lie of that",
    "start": "745880",
    "end": "752600"
  },
  {
    "text": "other node and when that other node comes back online the fallback partition",
    "start": "752600",
    "end": "758199"
  },
  {
    "text": "will be transferred will be handed off to the primary owner of it and it will get all of the data all of the rights",
    "start": "758199",
    "end": "764959"
  },
  {
    "text": "that had missed in that time so that's sort of a form of anti-entropy as well",
    "start": "764959",
    "end": "770120"
  },
  {
    "text": "um so um those are the two forms of of",
    "start": "770120",
    "end": "776000"
  },
  {
    "text": "anti-entropy in um in um open source RAC um the Enterprise Edition has another",
    "start": "776000",
    "end": "783639"
  },
  {
    "text": "form because it actually does multi- dat Center replication so you actually put clusters in multiple data centers and",
    "start": "783639",
    "end": "789720"
  },
  {
    "text": "you can synchronize them so that synchronization is a form of anti-entropy as well so um yeah um so",
    "start": "789720",
    "end": "799440"
  },
  {
    "text": "the point of of you know having these tools for bringing the system back into an orderly state is part of being able",
    "start": "799440",
    "end": "806440"
  },
  {
    "text": "to survive failures it's not just surviving them but also being able to recover from them and getting back to an",
    "start": "806440",
    "end": "811760"
  },
  {
    "text": "orderly state is in a normally operating um R cluster you really shouldn't have",
    "start": "811760",
    "end": "817360"
  },
  {
    "text": "much ENT entropy at all you shouldn't have the system becoming disorderly this is really only for fixing um issues",
    "start": "817360",
    "end": "825680"
  },
  {
    "text": "after some failure happened but very often we don't even notice failures that happen in running systems a machine can",
    "start": "825680",
    "end": "831320"
  },
  {
    "text": "become partitioned temporarily or um an operating system can do something crazy",
    "start": "831320",
    "end": "836680"
  },
  {
    "text": "for a little bit and get back to reality after a moment and start accepting rights and reads normally so it's um",
    "start": "836680",
    "end": "845839"
  },
  {
    "text": "so anti-entropy is only necessary following some sort of failure okay uh one question I have is",
    "start": "845839",
    "end": "854399"
  },
  {
    "start": "850000",
    "end": "975000"
  },
  {
    "text": "concerning third party tools uh sometimes I see out there in the open",
    "start": "854399",
    "end": "860000"
  },
  {
    "text": "source scene or in software as a service there are some companies who offer third party solutions for Monitor and",
    "start": "860000",
    "end": "866480"
  },
  {
    "text": "Diagnostics is there also something for re already so third party tools for",
    "start": "866480",
    "end": "872360"
  },
  {
    "text": "monitoring and Diagnostics um so there I'm not familiar with any commercial",
    "start": "872360",
    "end": "877440"
  },
  {
    "text": "tools for monitoring um RI although there's a number of",
    "start": "877440",
    "end": "882839"
  },
  {
    "text": "um of um tools out there that do integrate with reop for monitoring one of them is actually developed by a um",
    "start": "882839",
    "end": "891399"
  },
  {
    "text": "Community member it's called the tool is called reman it's actually designed just for monitoring um servers but also",
    "start": "891399",
    "end": "897959"
  },
  {
    "text": "monitoring um you know different pieces of software MySQL ROK Etc and collecting",
    "start": "897959",
    "end": "904519"
  },
  {
    "text": "stats from them and displaying it um and you know through the web um so there are",
    "start": "904519",
    "end": "911480"
  },
  {
    "text": "tools out there I mean there are vendors who will you know integrate our stats",
    "start": "911480",
    "end": "916600"
  },
  {
    "text": "ROK exposes all of its Statistics over that it collects over an htpm point for",
    "start": "916600",
    "end": "921880"
  },
  {
    "text": "example you can find out what the average response times for get and write requests are what the 95th perc time",
    "start": "921880",
    "end": "929319"
  },
  {
    "text": "um get and right response times are um know how many rights were done in the",
    "start": "929319",
    "end": "935440"
  },
  {
    "text": "past 60 seconds or since the ROK node was brought online and all of those are",
    "start": "935440",
    "end": "940720"
  },
  {
    "text": "exposed over an HTTP end points you can pull those into any tool and parse them",
    "start": "940720",
    "end": "945959"
  },
  {
    "text": "um the Enterprise Edition also Expos the same stats over SNMP or jmx if you",
    "start": "945959",
    "end": "951120"
  },
  {
    "text": "already have infrastructure that knows how to use those stats so there's a lot of monitoring tools that are off the shelf that AR designed for RAC that will",
    "start": "951120",
    "end": "957519"
  },
  {
    "text": "integrate with it but you can use the statistics so you can use the statistics and pull them into whatever tool you",
    "start": "957519",
    "end": "963519"
  },
  {
    "text": "might might use at um so I'm you know and there's a number of vendors with",
    "start": "963519",
    "end": "968759"
  },
  {
    "text": "really great monitoring tools out there that can't take advantage of of rok's um",
    "start": "968759",
    "end": "974240"
  },
  {
    "text": "statistics okay my next question is concerning a little the competition and",
    "start": "974240",
    "end": "980360"
  },
  {
    "start": "975000",
    "end": "1160000"
  },
  {
    "text": "specifically dynamodb uh the launch of D Dynamo DB this generator was was a huge",
    "start": "980360",
    "end": "987279"
  },
  {
    "text": "bomb I think so what do you think of this database and uh what is the",
    "start": "987279",
    "end": "992360"
  },
  {
    "text": "position the specific use cases how do you value these two solutions so Dynamo",
    "start": "992360",
    "end": "998600"
  },
  {
    "text": "DB is really interesting I'm Blown Away by Amazon's ability to put out new products on a regular basis it's uh",
    "start": "998600",
    "end": "1005959"
  },
  {
    "text": "unbelievable to see such a large company be so productive and release new things",
    "start": "1005959",
    "end": "1011040"
  },
  {
    "text": "but Dynamo DB is interesting um you know it provides a a database as a service um",
    "start": "1011040",
    "end": "1017639"
  },
  {
    "text": "it's really appealing if you're already running your applications on um on",
    "start": "1017639",
    "end": "1023079"
  },
  {
    "text": "Amazon if you're running on S or excuse me on ec2 um if you have data and simple",
    "start": "1023079",
    "end": "1028880"
  },
  {
    "text": "DB but need something a little bit more powerful um I think the biggest things",
    "start": "1028880",
    "end": "1035959"
  },
  {
    "text": "that limitations of it that you're running on Amazon's Hardware so for companies that or people who want",
    "start": "1035959",
    "end": "1042678"
  },
  {
    "text": "control of their infrastructure want control of their data reasons for security reasons um or for peace of mind",
    "start": "1042679",
    "end": "1049600"
  },
  {
    "text": "um will run um elsewhere I also think um Amazon's pricing is really high um",
    "start": "1049600",
    "end": "1055600"
  },
  {
    "text": "because you pay for the number of requests per second you want to be able to do and they're pricing um in fact",
    "start": "1055600",
    "end": "1063120"
  },
  {
    "text": "there's um someone in our community and I I'm at a loss for his name right now who's actually written a bit about um",
    "start": "1063120",
    "end": "1070559"
  },
  {
    "text": "why Amazon's pricing doesn't actually fit their cost for doing it and you are paying a pretty large premium for using",
    "start": "1070559",
    "end": "1077559"
  },
  {
    "text": "Dynamo DB it would actually be cheaper to run ROK at some point very quickly",
    "start": "1077559",
    "end": "1083200"
  },
  {
    "text": "could also be that the the rights are expensive because they're writing on ssds it it could be I I think um they so",
    "start": "1083200",
    "end": "1090559"
  },
  {
    "text": "part of it is they charge more for uh uh eventually consistent right versus a consistent right and the way they've",
    "start": "1090559",
    "end": "1098120"
  },
  {
    "text": "priced it it probably cost them marginally more to do a consistent right",
    "start": "1098120",
    "end": "1103400"
  },
  {
    "text": "then an eventually consistent right so um they um you know the pricing is",
    "start": "1103400",
    "end": "1109320"
  },
  {
    "text": "simple but it may not be the best and paying for actually usage may not be",
    "start": "1109320",
    "end": "1116159"
  },
  {
    "text": "best for a lot of applications especially ones that are high load um so",
    "start": "1116159",
    "end": "1121600"
  },
  {
    "text": "yeah it's but it's an interesting product the other limitation of Dynamo DB and I I don't remember the exact size",
    "start": "1121600",
    "end": "1126799"
  },
  {
    "text": "but they have a hard limit on the size of values I I think it's it's in the may",
    "start": "1126799",
    "end": "1135400"
  },
  {
    "text": "even be in the kilobytes but I don't remember 64 kiloby or something whereas ROK",
    "start": "1135400",
    "end": "1140440"
  },
  {
    "text": "practically it doesn't have any hard limits practically you probably wouldn't want to write something much larger than",
    "start": "1140440",
    "end": "1148520"
  },
  {
    "text": "10 megabytes for best performance nothing larger than a megabyte but we don't impose any hard restrictions so um",
    "start": "1148520",
    "end": "1155880"
  },
  {
    "text": "for a lot of applications 64 kilobytes is not very much so and I think they",
    "start": "1155880",
    "end": "1162280"
  },
  {
    "start": "1160000",
    "end": "1218000"
  },
  {
    "text": "also some differences in terms of the data model because dynamodb has some key",
    "start": "1162280",
    "end": "1168400"
  },
  {
    "text": "value key value and you have full Json and yeah is this something yeah it's",
    "start": "1168400",
    "end": "1173720"
  },
  {
    "text": "it's a different data model riok also offers some different um ways of querying your data and they're they're",
    "start": "1173720",
    "end": "1181120"
  },
  {
    "text": "different products and I think you know they solve different problems and I I think that's actually common throughout",
    "start": "1181120",
    "end": "1187480"
  },
  {
    "text": "the nosql space that everyone gets lumped in this one category but the category is really a category of",
    "start": "1187480",
    "end": "1193200"
  },
  {
    "text": "categories and everyone does something different and they these databases aren't interchangeable all of them have",
    "start": "1193200",
    "end": "1199120"
  },
  {
    "text": "particular things they're good at I mean there's some overlap but um you know none of them solve every problem and um",
    "start": "1199120",
    "end": "1207200"
  },
  {
    "text": "and it's the same with Dynamo DB um so I think riok and Dynamo DB could even be",
    "start": "1207200",
    "end": "1212760"
  },
  {
    "text": "complimentary in an organization there could solve different problems so okay",
    "start": "1212760",
    "end": "1218600"
  },
  {
    "start": "1218000",
    "end": "1325000"
  },
  {
    "text": "my my next question is concerning uh you favor the consistent hashing model",
    "start": "1218600",
    "end": "1224400"
  },
  {
    "text": "whereas other databases or competitors do Shing what do you think are the the",
    "start": "1224400",
    "end": "1229799"
  },
  {
    "text": "use cases or advances of each of these so the great thing about consistent",
    "start": "1229799",
    "end": "1235559"
  },
  {
    "text": "hatching um for example is it allows us to scale really easily part of the reason why horizontal scaling is so easy",
    "start": "1235559",
    "end": "1242960"
  },
  {
    "text": "is because we use consistent hashing we don't need to um split um shards when we",
    "start": "1242960",
    "end": "1249799"
  },
  {
    "text": "scale we don't need to resize shards and that can be pretty painful um also",
    "start": "1249799",
    "end": "1255520"
  },
  {
    "text": "hotspotting is a problem with shards because the data isn't organized based on it it's you know based on some Shard",
    "start": "1255520",
    "end": "1263120"
  },
  {
    "text": "key and The Shard key doesn't really um take into account what where the most",
    "start": "1263120",
    "end": "1269640"
  },
  {
    "text": "commonly accessed data will be with consistent hashing the data is kind of relatively randomly spread out through",
    "start": "1269640",
    "end": "1276080"
  },
  {
    "text": "your cluster so you much less likely to get hot spotting now the nice thing",
    "start": "1276080",
    "end": "1282679"
  },
  {
    "text": "about charting is efficient range queries um that's really what you lose",
    "start": "1282679",
    "end": "1287799"
  },
  {
    "text": "so so for me you know my favorite use case where sharding is interesting is",
    "start": "1287799",
    "end": "1294080"
  },
  {
    "text": "something like a a sharded solar um you know like elastic search um full Tech",
    "start": "1294080",
    "end": "1301240"
  },
  {
    "text": "search where efficient range queries are really appealing um that said you don't",
    "start": "1301240",
    "end": "1307080"
  },
  {
    "text": "always need range queries when you're doing full Tech search if you're doing a uh mainly single term queries then um",
    "start": "1307080",
    "end": "1314360"
  },
  {
    "text": "then you know you're not doing range and charting doesn't make it difference there in fact you actually get some",
    "start": "1314360",
    "end": "1320159"
  },
  {
    "text": "advantages from doing consistent hashing because the loads more evenly distributed around the cluster so so you",
    "start": "1320159",
    "end": "1326240"
  },
  {
    "start": "1325000",
    "end": "1380000"
  },
  {
    "text": "would you would say that there are some use cases let's say 5 10 or 20% where shouting might be useful say if I want",
    "start": "1326240",
    "end": "1334120"
  },
  {
    "text": "to have a specific bunch of data on a specific server then it's easier to",
    "start": "1334120",
    "end": "1339360"
  },
  {
    "text": "control but so I mean so I think there's a difference between when you might want",
    "start": "1339360",
    "end": "1344799"
  },
  {
    "text": "to group data have data cooll locality um with so you know there's databases",
    "start": "1344799",
    "end": "1350400"
  },
  {
    "text": "that don't use sharding but do allow you to collocate data so um you know something like Sandra with column family",
    "start": "1350400",
    "end": "1357000"
  },
  {
    "text": "is you can sort of associate data in the column family and get some cality and",
    "start": "1357000",
    "end": "1363039"
  },
  {
    "text": "you know but it isn't quite sharding it's you know it is using consistent hashing still um for me the charting is",
    "start": "1363039",
    "end": "1370840"
  },
  {
    "text": "is useful yeah really when you want those um to maximize the performance of",
    "start": "1370840",
    "end": "1376600"
  },
  {
    "text": "range queries m so that's good one interesting feature I always liked in",
    "start": "1376600",
    "end": "1382799"
  },
  {
    "start": "1380000",
    "end": "1570000"
  },
  {
    "text": "ROK is having the plugable persistence MH and I was very happy to read that you",
    "start": "1382799",
    "end": "1388039"
  },
  {
    "text": "also support level DB Y what are your experiences with level DB so um the",
    "start": "1388039",
    "end": "1394200"
  },
  {
    "text": "reason there's a few reasons why we added level DB um we um our default um",
    "start": "1394200",
    "end": "1401919"
  },
  {
    "text": "storage back end is called bitas um bitk is great um bitc the default for good",
    "start": "1401919",
    "end": "1407440"
  },
  {
    "text": "reason has a really flat latency profile the reason why is we can guarantee that",
    "start": "1407440",
    "end": "1413000"
  },
  {
    "text": "for any read or write you do at most one seek um that's because um level or",
    "start": "1413000",
    "end": "1419720"
  },
  {
    "text": "excuse me bit Cask is just a log with an inmemory key lookup table that has a",
    "start": "1419720",
    "end": "1426760"
  },
  {
    "text": "pointer to where in the log that you know the associated value is so any um",
    "start": "1426760",
    "end": "1434080"
  },
  {
    "text": "any lookup is simply a look up in the hashtag table and then a see on disk and",
    "start": "1434080",
    "end": "1440640"
  },
  {
    "text": "write is just you know maybe you're already at the end of the um at the end",
    "start": "1440640",
    "end": "1445960"
  },
  {
    "text": "of the log file but worst cases you have to seek to the end of the log file and append to it so um really fat excuse me",
    "start": "1445960",
    "end": "1454360"
  },
  {
    "text": "flat latency profile the problem with it is all keys must fit in memory MH not",
    "start": "1454360",
    "end": "1460640"
  },
  {
    "text": "all your values all your keys and remember it's a cluster you can always get more memory by adding more noes but",
    "start": "1460640",
    "end": "1466679"
  },
  {
    "text": "level DB allows to have sort of data sets of unbounded size um it doesn't",
    "start": "1466679",
    "end": "1472440"
  },
  {
    "text": "store all keys in memory so on top of that we've added a feature to ROK called",
    "start": "1472440",
    "end": "1478080"
  },
  {
    "text": "secondary indexes um which are only supported by um by level DB the reason",
    "start": "1478080",
    "end": "1484039"
  },
  {
    "text": "why that is is level DB is actually ordered on disk so we can do efficient range queries at the at the storage back",
    "start": "1484039",
    "end": "1490679"
  },
  {
    "text": "end um so I'm pretty excited the next version of ROK which should be shipping",
    "start": "1490679",
    "end": "1497760"
  },
  {
    "text": "in a few months we'll add um we'll include a new version of level DB um",
    "start": "1497760",
    "end": "1504320"
  },
  {
    "text": "that includes Bloom filters and those Bloom filters will actually really improve the performance of of level DB",
    "start": "1504320",
    "end": "1512640"
  },
  {
    "text": "especially in the cases where um you might have a key that's not that either",
    "start": "1512640",
    "end": "1518279"
  },
  {
    "text": "doesn't exist or you're writing new data so the latency profile of level DB is",
    "start": "1518279",
    "end": "1524200"
  },
  {
    "text": "about to get a lot better what are the blue filters specifically so um step",
    "start": "1524200",
    "end": "1530799"
  },
  {
    "text": "back a bit um level DB I should say in its worst case level DB might need to do",
    "start": "1530799",
    "end": "1536159"
  },
  {
    "text": "three or four seeks to determine that either a key exists or doesn't exist and return the value so what Bloom filters",
    "start": "1536159",
    "end": "1543399"
  },
  {
    "text": "allow you to do is in constant time determine whether or not a key is stored",
    "start": "1543399",
    "end": "1550080"
  },
  {
    "text": "um in a collection it's basically allows you to determine whether something's a member of a collection in a memory",
    "start": "1550080",
    "end": "1556679"
  },
  {
    "text": "efficient and um and time efficient way so um the balloom filters save you from",
    "start": "1556679",
    "end": "1563279"
  },
  {
    "text": "having to do a bunch of seeks when some a piece of data doesn't exist",
    "start": "1563279",
    "end": "1568600"
  },
  {
    "text": "MH okay I don't know in which version you you inserted commit",
    "start": "1568600",
    "end": "1573880"
  },
  {
    "start": "1570000",
    "end": "1650000"
  },
  {
    "text": "hooks yeah what are they useful for can you give some examples and and what languages can you write a code to be",
    "start": "1573880",
    "end": "1580919"
  },
  {
    "text": "executed so there's two types of um there's two types of HS there's pre and",
    "start": "1580919",
    "end": "1587279"
  },
  {
    "text": "post commit hooks pre-commit hooks fire before um the data is actually sent out",
    "start": "1587279",
    "end": "1593760"
  },
  {
    "text": "to be persistent on desk so with a pre-commit hook um well internally um Ru",
    "start": "1593760",
    "end": "1600960"
  },
  {
    "text": "search does its indexing in a pre-commit hook so will actually extract the um",
    "start": "1600960",
    "end": "1606799"
  },
  {
    "text": "extract the full Text data and send it out to the indexes to be stored in a pre-commit hook um you could also use it",
    "start": "1606799",
    "end": "1613440"
  },
  {
    "text": "to enforce business rules to say you know given these conditions don't accept the right or given these conditions",
    "start": "1613440",
    "end": "1620279"
  },
  {
    "text": "don't store this data or append this data transform the data before you store it so um and then there's post commit",
    "start": "1620279",
    "end": "1628039"
  },
  {
    "text": "hooks which get fired after the data stored so actually um post commit hooks",
    "start": "1628039",
    "end": "1633399"
  },
  {
    "text": "can be used to integrate with other tools maybe once you've done it right you want to send a message to uh a",
    "start": "1633399",
    "end": "1638880"
  },
  {
    "text": "queuing system saying that um oh I've successfully written this piece of data",
    "start": "1638880",
    "end": "1644320"
  },
  {
    "text": "and so you could fire that off in a post commit hook to you know some amqp implementation or",
    "start": "1644320",
    "end": "1650919"
  },
  {
    "start": "1650000",
    "end": "1705000"
  },
  {
    "text": "um uh are you fored to do this in earling or you can write jascripts",
    "start": "1650919",
    "end": "1656159"
  },
  {
    "text": "JavaScript as well um so earling or JavaScript um earling performs a bit",
    "start": "1656159",
    "end": "1662640"
  },
  {
    "text": "better um I tend to tell people you know if you don't know ear langang maybe you",
    "start": "1662640",
    "end": "1667880"
  },
  {
    "text": "want to prototype your commit hook in JavaScript javascript's more limited obviously integrating with something",
    "start": "1667880",
    "end": "1674559"
  },
  {
    "text": "like a queuing system is not going to be possible you can't open you know a TCP",
    "start": "1674559",
    "end": "1680039"
  },
  {
    "text": "connection from JavaScript you're pretty much limited to what's possible within a JavaScript BM whereas in Earl you can do",
    "start": "1680039",
    "end": "1686080"
  },
  {
    "text": "anything the Earl VM supports so basically anything you can open TCP",
    "start": "1686080",
    "end": "1691360"
  },
  {
    "text": "connections you could integrate with um speak to other erlang nodes um anything",
    "start": "1691360",
    "end": "1696519"
  },
  {
    "text": "in llang VM supports so if it's a simple hook you can mock it and JavaScript and",
    "start": "1696519",
    "end": "1702640"
  },
  {
    "text": "then you know translate it to erlang M okay one final quick question is sure",
    "start": "1702640",
    "end": "1710120"
  },
  {
    "start": "1705000",
    "end": "1826000"
  },
  {
    "text": "what is the the long road map meaning riok in 3 years what's riok in 3 years",
    "start": "1710120",
    "end": "1715679"
  },
  {
    "text": "that's a a good question I don't know that I'm the right person to um ask that",
    "start": "1715679",
    "end": "1721080"
  },
  {
    "text": "but I think you know it's all about continuing to innovate and providing um",
    "start": "1721080",
    "end": "1727679"
  },
  {
    "text": "new ways to work with riok um you know we ROK is a um um is sits on the um",
    "start": "1727679",
    "end": "1738840"
  },
  {
    "text": "Avail favoring availability over consistency and failure scenarios um I think we'd like to explore doing",
    "start": "1738840",
    "end": "1747279"
  },
  {
    "text": "something that's favors consistency or at least allow users to pick stronger",
    "start": "1747279",
    "end": "1752440"
  },
  {
    "text": "consistency than we already offer we allow people to turn up the consistency knob pretty high but we don't let them",
    "start": "1752440",
    "end": "1758799"
  },
  {
    "text": "turn it to 11 um I think we'd like to do that I think we'd like to add different",
    "start": "1758799",
    "end": "1764559"
  },
  {
    "text": "mechanisms for anti-entropy um that are a little bit more active right now are um our",
    "start": "1764559",
    "end": "1771600"
  },
  {
    "text": "anti-entropy systems are more um user driven rather than driven by riok so",
    "start": "1771600",
    "end": "1777519"
  },
  {
    "text": "that will be something that we're exploring and um just improving what we have already building on um quer ability",
    "start": "1777519",
    "end": "1785200"
  },
  {
    "text": "I think we have a ways to go in terms of providing different sorts of quering mechanisms or improving the quering",
    "start": "1785200",
    "end": "1790720"
  },
  {
    "text": "mechanisms we already have beyond the primary key lookup so making rect search much more powerful making secondary",
    "start": "1790720",
    "end": "1796600"
  },
  {
    "text": "indexes more powerful just allowing users to get at their data in interesting new ways so it's really",
    "start": "1796600",
    "end": "1802559"
  },
  {
    "text": "building a more robust more flexible and easier to query database I think that's",
    "start": "1802559",
    "end": "1810320"
  },
  {
    "text": "where we're going to continue to move mhm okay thanks a lot for your time I",
    "start": "1810320",
    "end": "1815679"
  },
  {
    "text": "think it was very enlightening and I hope we see you next year thank you thank",
    "start": "1815679",
    "end": "1822159"
  },
  {
    "text": "you",
    "start": "1825440",
    "end": "1828440"
  }
]