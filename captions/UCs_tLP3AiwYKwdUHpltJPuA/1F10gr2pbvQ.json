[
  {
    "start": "0",
    "end": "68000"
  },
  {
    "text": "[Music]",
    "start": "990",
    "end": "7859"
  },
  {
    "text": "thank you okay everybody very good I appreciate that thanks for joining me",
    "start": "12330",
    "end": "17590"
  },
  {
    "text": "today as usual we have very little time I was hoping for a few hours they didn't got they did not in in",
    "start": "17590",
    "end": "24430"
  },
  {
    "text": "reality actually gave me a few hours so we have very little time and a lot to get through before we get too far down",
    "start": "24430",
    "end": "30550"
  },
  {
    "text": "the road I would encourage you to join my masterclass thing is that possible can they register for that thing later they can so join my master class session",
    "start": "30550",
    "end": "37989"
  },
  {
    "text": "thing which is on one of the days between now and the end of the conference or maybe it's just after the",
    "start": "37989",
    "end": "43120"
  },
  {
    "text": "conference I don't know that'll be fun that's like eight hours of stuff so enjoy me for that it's on",
    "start": "43120",
    "end": "49780"
  },
  {
    "text": "the schedule I don't know when the actual proper date is but that said we do have a lot to get through in the next",
    "start": "49780",
    "end": "55149"
  },
  {
    "text": "whatever it is 50 minutes so I would encourage you as always to take note of the stuff in the slide to take note of",
    "start": "55149",
    "end": "61180"
  },
  {
    "text": "the stuff in the slide for your own edification for reference for later on there you'll find first of all chief",
    "start": "61180",
    "end": "66850"
  },
  {
    "text": "among the things you see on this side you'll find the code that we're gonna go through today for your own reference for",
    "start": "66850",
    "end": "71920"
  },
  {
    "start": "68000",
    "end": "121000"
  },
  {
    "text": "identification and you're gonna find my coordinates online so if you should have questions when you have questions don't",
    "start": "71920",
    "end": "77350"
  },
  {
    "text": "hesitate to find me online I'm happy to answer obviously I'm on Twitter just curious I'm always curious about this",
    "start": "77350",
    "end": "83020"
  },
  {
    "text": "how many of you by show of hands are on twitter twitter twitter okay the rest of",
    "start": "83020",
    "end": "88750"
  },
  {
    "text": "you you know get on it so it's a great place to be it's the new IRC it's where",
    "start": "88750",
    "end": "94240"
  },
  {
    "text": "all the developers that drive the open source that powers your businesses are so do that what about email what about emails anybody here on email",
    "start": "94240",
    "end": "101910"
  },
  {
    "text": "email e-mail no good moving on I'm not really a big email fan although if I'm",
    "start": "101910",
    "end": "107619"
  },
  {
    "text": "honest I much prefer to slack right I've got a friend James ward that said that while he's not entirely sure he suspects",
    "start": "107619",
    "end": "113950"
  },
  {
    "text": "that based on CPU activity alone slack is mining for Bitcoin something that I I expect is probably true",
    "start": "113950",
    "end": "120750"
  },
  {
    "text": "okay a little bit about me my name is Josh long I'm a spring developer advocate on the spring team I I'm on",
    "start": "120750",
    "end": "126880"
  },
  {
    "start": "121000",
    "end": "165000"
  },
  {
    "text": "WeChat for those of you or who are in China you're not in Chicago but that said I have videos on Safari a lot of",
    "start": "126880",
    "end": "133750"
  },
  {
    "text": "different videos these are all like five six seven eight hours of content detailed sessions on these",
    "start": "133750",
    "end": "140310"
  },
  {
    "text": "different things I've got a book called cloud that's now available in a proliferation of different languages I do a podcast every Friday called the",
    "start": "140310",
    "end": "147060"
  },
  {
    "text": "butiful podcast which is available wherever find podcasts are pervade I do screencast every Wednesday called spring",
    "start": "147060",
    "end": "153750"
  },
  {
    "text": "tips which is me diving into some corner of the spring ecosystem these are you know me and a keyboard doing a hot take",
    "start": "153750",
    "end": "159750"
  },
  {
    "text": "30 minutes to an hour on a given topic a very focused specific look at a particular topic and of course I've got",
    "start": "159750",
    "end": "165960"
  },
  {
    "start": "165000",
    "end": "302000"
  },
  {
    "text": "a new book a new book on which I'm working which is now available for pre-sale and you can already start reading it now it's called a reactive",
    "start": "165960",
    "end": "172140"
  },
  {
    "text": "spring and this book looks at a lot of the stuff that we're going to focus on in this session it's a look at how to",
    "start": "172140",
    "end": "177510"
  },
  {
    "text": "build applications that take advantage of reactive programming but in you know through the lens of the spring ecosystem",
    "start": "177510",
    "end": "183210"
  },
  {
    "text": "and this book is I think the longer form of what we're gonna talk about today so",
    "start": "183210",
    "end": "188400"
  },
  {
    "text": "maybe I've just negated your need to buy the book but it's okay it's worth understanding that reactive programming",
    "start": "188400",
    "end": "194400"
  },
  {
    "text": "is a new response to an old problem that is to say the question that people",
    "start": "194400",
    "end": "199800"
  },
  {
    "text": "struggle with these days as they move to microservices as they move to big data as I move to IOT Internet of Things into",
    "start": "199800",
    "end": "206280"
  },
  {
    "text": "no sequel and to these scenarios where they're conducting increasingly large increasingly large amounts of data over",
    "start": "206280",
    "end": "211830"
  },
  {
    "text": "the network the question that they struggle with is how do i scale that out and the reason that they start to",
    "start": "211830",
    "end": "217680"
  },
  {
    "text": "appreciate that this is difficult is because a lot of the traditional approaches to doing input and output",
    "start": "217680",
    "end": "223410"
  },
  {
    "text": "with which we're familiar starts to you know starts to crumble in the face of this new scale what do I mean by that",
    "start": "223410",
    "end": "229680"
  },
  {
    "text": "well suspend suppose you have a traditional JVM based application using Java IO input streams and output streams",
    "start": "229680",
    "end": "236610"
  },
  {
    "text": "you've got something you've got a server socket parked on port 8080 and you're reading you're waiting for the next",
    "start": "236610",
    "end": "243090"
  },
  {
    "text": "connection to arrive when the next connection arrives you want to produce a response so you get the input stream you",
    "start": "243090",
    "end": "248340"
  },
  {
    "text": "produce some bytes and you send it in the output stream what happens in that in that span of time well the client",
    "start": "248340",
    "end": "255390"
  },
  {
    "text": "thread on which all that input now put is happening is blocked you're not able to do anything with it so how do you",
    "start": "255390",
    "end": "261540"
  },
  {
    "text": "scale it out you create new threads is that an infinitely scalable solution can you just create new threads in",
    "start": "261540",
    "end": "267270"
  },
  {
    "text": "perpetuity the jvm in 2019 the the you know TLD art",
    "start": "267270",
    "end": "273030"
  },
  {
    "text": "no right you can't do that for a number of reasons first of all threads are expensive they have about a megabyte of",
    "start": "273030",
    "end": "278460"
  },
  {
    "text": "of state that's associated with bookkeeping with the managing of the native process and the operating system",
    "start": "278460",
    "end": "283710"
  },
  {
    "text": "that's managed by the operating system that process but the thread that's the first thing it's expensive so if you",
    "start": "283710",
    "end": "290130"
  },
  {
    "text": "have a thousand threads which is a crazy high you know number but suppose you had a thousand threads you'd have an extra",
    "start": "290130",
    "end": "295500"
  },
  {
    "text": "gig of of ramp before you've done anything just as the JVM starts up you've already got that right for each",
    "start": "295500",
    "end": "300840"
  },
  {
    "text": "thread you've created now could you actually schedule a thousand things discreetly at the same time per second",
    "start": "300840",
    "end": "307500"
  },
  {
    "start": "302000",
    "end": "673000"
  },
  {
    "text": "well of course not right unless you have a thousand cores which is as I understand it just enough to run slack",
    "start": "307500",
    "end": "313010"
  },
  {
    "text": "unless you have a thousand course that's not going to be great it's not going to be it's not going to be what you expect",
    "start": "313010",
    "end": "318630"
  },
  {
    "text": "too because what you have is scheduling it's an illusion you're moving work from one CPU to another one core to another",
    "start": "318630",
    "end": "324660"
  },
  {
    "text": "hoping to be able to simulate the illusion of a thousand things happening at the same time but that's not real so",
    "start": "324660",
    "end": "330450"
  },
  {
    "text": "the question is how do I handle a thousand requests at the same time and the clear answer is that we can't do it",
    "start": "330450",
    "end": "336900"
  },
  {
    "text": "with threads so the pragmatic answer something with which we're all I expect no doubt familiar the answer that is",
    "start": "336900",
    "end": "342960"
  },
  {
    "text": "emerged in the last 10 yard years in the move to the cloud there's exodus to the cloud is you just scale out horizontally",
    "start": "342960",
    "end": "349380"
  },
  {
    "text": "and this is a very pragmatic answer right we we've all talked about 12 factor micro services and cloud native",
    "start": "349380",
    "end": "355230"
  },
  {
    "text": "applications and this idea that you remove as much state as much cost associated with scaling or horizontal",
    "start": "355230",
    "end": "361650"
  },
  {
    "text": "ensemble as possible right we talk about the cloud native architecture right this idea that you can put a bunch of",
    "start": "361650",
    "end": "367530"
  },
  {
    "text": "stateless web servers into a load balancer and then just start distributing load across them right either web servers or Kafka consumers or",
    "start": "367530",
    "end": "374580"
  },
  {
    "text": "something either way you're scaling out horizontally and the cost of doing so because you have no state to replicate it's cheap it's nil they're all dented",
    "start": "374580",
    "end": "382290"
  },
  {
    "text": "basically they're all stateless so this this is a pragmatic approach and allows us to get to the scale that we need to",
    "start": "382290",
    "end": "388170"
  },
  {
    "text": "get to without making any hard concessions this is certainly a worthy option especially if you have code",
    "start": "388170",
    "end": "395100"
  },
  {
    "text": "written in yesteryear that doesn't do better than what we wanted to do but it's it it's a little expensive it's a little",
    "start": "395100",
    "end": "400620"
  },
  {
    "text": "inefficient we can do better one way to do better is if we can find opportunities in our code itself where",
    "start": "400620",
    "end": "408180"
  },
  {
    "text": "we are doing something inefficient that is to say where we are denying ourselves the opportunity for scale one place",
    "start": "408180",
    "end": "414449"
  },
  {
    "text": "where we might be doing that is with input and output right that input and output is it takes a long time and when",
    "start": "414449",
    "end": "420509"
  },
  {
    "text": "we're sat there on that thread doing that input output we can't reuse that thread we can't repurpose it and the",
    "start": "420509",
    "end": "425879"
  },
  {
    "text": "reason is because as we're doing reads and writes with those input streams and those output streams we're sitting there waiting for the bytes to come where's",
    "start": "425879",
    "end": "433020"
  },
  {
    "text": "the next byte come on I gotta go come on right we're queueing waiting for those bytes to arrive that delay means at that",
    "start": "433020",
    "end": "440219"
  },
  {
    "text": "time that we're spending there on that thread is wasted time because a lot of times it's not that the bytes aren't",
    "start": "440219",
    "end": "445319"
  },
  {
    "text": "there it's just that there's a network outage or there's delay or some sort of failure or something like that right it's not that there's just a huge amount",
    "start": "445319",
    "end": "451620"
  },
  {
    "text": "of data a lot of times it's just the sort of uncertainty of the network so we've got this distributed system and",
    "start": "451620",
    "end": "457349"
  },
  {
    "text": "we're experiencing uncertainty who could have predicted this right so the question that is how do we build systems",
    "start": "457349",
    "end": "463740"
  },
  {
    "text": "that don't waste time waiting for bytes when they're not there and allow us to repurpose those threads if we move to",
    "start": "463740",
    "end": "469139"
  },
  {
    "text": "asynchronous i/o we can do this asynchronous i/o is kind of like synchronous i/o you get data in you can",
    "start": "469139",
    "end": "475770"
  },
  {
    "text": "send data out except that with asynchronous i/o you ask for the data and then you get an interrupt a callback",
    "start": "475770",
    "end": "481889"
  },
  {
    "text": "later on when the data is available this allows you to make the request and then immediately move off of the thread as",
    "start": "481889",
    "end": "487949"
  },
  {
    "text": "soon as you've made the request the the bytes will come later but in the meantime you're gonna get off that thread and allow somebody else to use it",
    "start": "487949",
    "end": "494389"
  },
  {
    "text": "right and because of this you're not sitting on any thread for more than a few you know milliseconds hopefully this",
    "start": "494389",
    "end": "501180"
  },
  {
    "text": "allows you to do the handle more requests because you can handle more incoming requests and start the process",
    "start": "501180",
    "end": "507000"
  },
  {
    "text": "of waiting for bytes and then you ask the operating system to actually manage that dispatch the the managing of",
    "start": "507000",
    "end": "512430"
  },
  {
    "text": "incoming streams to user code that can be done much more scalable than us in",
    "start": "512430",
    "end": "518310"
  },
  {
    "text": "our in our user code creating threads to do that waiting that scalable process allows us to handle thousands of",
    "start": "518310",
    "end": "525120"
  },
  {
    "text": "requests per second right if you've ever seen the the C 10k for a C 10 K problem this is",
    "start": "525120",
    "end": "530720"
  },
  {
    "text": "problem of how can I handle 10,000 concurrent requests at the same time you can't do it with threads but you can do",
    "start": "530720",
    "end": "536329"
  },
  {
    "text": "it with this if what you're doing is IO bound if what you're doing is is limited based on your ability to do input and",
    "start": "536329",
    "end": "542389"
  },
  {
    "text": "output and you move to asynchronous IO then you can reasonably expect to scale to that high to those kinds of levels",
    "start": "542389",
    "end": "548120"
  },
  {
    "text": "this is not a new idea right asynchronous IO has been around for a long time it's been around for decades",
    "start": "548120",
    "end": "554420"
  },
  {
    "text": "and all the major operating systems it's so prolific and so so obviously useful that it's been in all the major major",
    "start": "554420",
    "end": "561500"
  },
  {
    "text": "operating systems for so long that his intern also been in Java since Java 1.4 type of 1.4 came out in",
    "start": "561500",
    "end": "569629"
  },
  {
    "text": "2002 in the very beginning of the year it's been more than 17 years well when",
    "start": "569629",
    "end": "574639"
  },
  {
    "text": "it's in Java that means there's a way to do it in a consistent way across all the operating systems on which Java runs",
    "start": "574639",
    "end": "580399"
  },
  {
    "text": "even Windows Windows imagine so the",
    "start": "580399",
    "end": "586910"
  },
  {
    "text": "point is we've got this thing in Java 1.4 we've got it there since 17 years ago are we all reading code using Java and",
    "start": "586910",
    "end": "594139"
  },
  {
    "text": "IO do you all write code using Java niño and I expect that the answer is no of course not you're not gonna write code",
    "start": "594139",
    "end": "600319"
  },
  {
    "text": "using Java n io because most of us don't spend our time at that lower level we don't think about the code in terms of",
    "start": "600319",
    "end": "606199"
  },
  {
    "text": "input and output for synchronous or none or asynchronous code right we don't write our code in terms of Java io input",
    "start": "606199",
    "end": "613250"
  },
  {
    "text": "stream and output stream either no no we think about the world in terms of computational metaphors that allow us to",
    "start": "613250",
    "end": "619069"
  },
  {
    "text": "map our business domain to the underlying input and output abstraction in most of our code that abstraction",
    "start": "619069",
    "end": "625250"
  },
  {
    "text": "that that metaphor is something like a Java collection full of type T or T is your business entity and you use",
    "start": "625250",
    "end": "631699"
  },
  {
    "text": "technologies that support these abstractions things like spring and hibernate but imagine that we we had a",
    "start": "631699",
    "end": "638480"
  },
  {
    "text": "new metaphor that have supported this new asynchronous this new potentially unbounded world that metaphor would be",
    "start": "638480",
    "end": "644899"
  },
  {
    "text": "would need to be pervasive everything that that we do would need to be able to support that metaphor and this is why we",
    "start": "644899",
    "end": "651559"
  },
  {
    "text": "you know it's very important that we have something that everybody agrees on imagine for an instance just to just",
    "start": "651559",
    "end": "657350"
  },
  {
    "text": "suppose it's just just a hypothetical that for whatever reason 10 years ago these technologies with which you were",
    "start": "657350",
    "end": "664069"
  },
  {
    "text": "familiar that you had become accustomed to using these technologies that supported what you're trying to do technologies like hibernate and spring",
    "start": "664069",
    "end": "670279"
  },
  {
    "text": "imagine that for whatever reason they were just really hostile just absolutely",
    "start": "670279",
    "end": "675679"
  },
  {
    "text": "hostile to java.util collections right imagine that when you try to do a one-to-many relationship in your",
    "start": "675679",
    "end": "682699"
  },
  {
    "text": "hibernate entity and you use the Java util list type us an ArrayList for",
    "start": "682699",
    "end": "688639"
  },
  {
    "text": "example imagine that for whatever reason whenever you used a Java util list subtype or Java util collection subtype",
    "start": "688639",
    "end": "695750"
  },
  {
    "text": "for whatever reason you didn't just get an exception on the console no no no it",
    "start": "695750",
    "end": "702170"
  },
  {
    "text": "actually printed an ask a middle finger and then seg faulted the machine right and you would you continue to use this",
    "start": "702170",
    "end": "711319"
  },
  {
    "text": "if you can if you knew you could expect that kind of abuse would you continue down that path if you knew that was a",
    "start": "711319",
    "end": "716449"
  },
  {
    "text": "result and the answer I think is of course not you use whatever hibernate told you to use to get to the root",
    "start": "716449",
    "end": "722269"
  },
  {
    "text": "desired result you're not gonna stop shipping software right if they're if the path of least resistance is to use",
    "start": "722269",
    "end": "728149"
  },
  {
    "text": "this new thing called a hibernate list thing whatever then you're gonna use that because that gets you to production",
    "start": "728149",
    "end": "733309"
  },
  {
    "text": "and that's what matters here so the same that same thing is here true with the reactive sort of types that we need",
    "start": "733309",
    "end": "739759"
  },
  {
    "text": "these types that allow us to map this asynchronous i/o whatever we choose whatever we depend on has to be supported across all the",
    "start": "739759",
    "end": "746420"
  },
  {
    "text": "different technologies that we care about and so this is why in 2015 a number of different organizations the",
    "start": "746420",
    "end": "752389"
  },
  {
    "text": "people at on pivotal where I work which is where part of the sponsor the lead",
    "start": "752389",
    "end": "757490"
  },
  {
    "text": "sponsor of spring the people at Netflix the people that akka lie pinned in a typesafe the people in the clips",
    "start": "757490",
    "end": "764089"
  },
  {
    "text": "Foundation and a number of others we all got together and we create something called the reactive stream specification the reactive stream specification are",
    "start": "764089",
    "end": "770720"
  },
  {
    "text": "just for very simple types and they provide these very very simple types that allow us to describe potentially",
    "start": "770720",
    "end": "776329"
  },
  {
    "text": "unbounded asynchronous latent streams of data there so obviously useful these",
    "start": "776329",
    "end": "781790"
  },
  {
    "text": "types that they're actually they have been they have been since incorporated into the JDK they're in Java 9 now so",
    "start": "781790",
    "end": "790189"
  },
  {
    "start": "789000",
    "end": "853000"
  },
  {
    "text": "these types are very very useful they're they fill a particularly significant hole in the GT okay that that was a at the point at",
    "start": "790189",
    "end": "797660"
  },
  {
    "text": "that point unplugged on top of which there's still a need for some operators",
    "start": "797660",
    "end": "803630"
  },
  {
    "text": "to support streaming of data processing data how do you how do you map over data how do you filter these kinds of things",
    "start": "803630",
    "end": "808760"
  },
  {
    "text": "so we have projects like reactor and rx Java 2 and aqua streams and and so on",
    "start": "808760",
    "end": "814520"
  },
  {
    "text": "these different projects sit on top of that layer providing these operators they all speak these reactive streams",
    "start": "814520",
    "end": "820790"
  },
  {
    "text": "types they all understand these basic types but they go a little further providing pipelines and on top of that",
    "start": "820790",
    "end": "826790"
  },
  {
    "text": "well then what are we done can we go home yet and I'd say the answer is still no what good are these types if the",
    "start": "826790",
    "end": "832820"
  },
  {
    "text": "frameworks if the technologies with which we work don't understand them and so this is why the big sort of did you",
    "start": "832820",
    "end": "840589"
  },
  {
    "text": "know the big moment for all of us for in this on the spring team was in September 2017 when we leased Spring Framework of five the first",
    "start": "840589",
    "end": "847730"
  },
  {
    "text": "release to support natively project reactor and the reactive streams types that I just described on top of which we",
    "start": "847730",
    "end": "854330"
  },
  {
    "start": "853000",
    "end": "928000"
  },
  {
    "text": "have since released spring data K Springs security five spring boot to that o spring cloud Finchley and so much",
    "start": "854330",
    "end": "861410"
  },
  {
    "text": "more so what we're gonna do today my friends is we're gonna look at that journey we're gonna write code that takes advantage of this sort of holistic",
    "start": "861410",
    "end": "867560"
  },
  {
    "text": "approach to building reactive applications and we're gonna do that of course at my second favorite place on the Internet my second favorite place on",
    "start": "867560",
    "end": "874820"
  },
  {
    "text": "the internet after production I loved production you should love production",
    "start": "874820",
    "end": "881750"
  },
  {
    "text": "you should go as early and often as possible bringing the kids bring the family the weather is amazing it's the",
    "start": "881750",
    "end": "887330"
  },
  {
    "text": "happiest place on earth it's better than Disneyland but if you haven't already been there you can begin your journey here it's starting that spring that i/o",
    "start": "887330",
    "end": "896170"
  },
  {
    "text": "if you need inspiration in the early morning before a cup of tea or coffee preferably purchased here intelligent a",
    "start": "896170",
    "end": "903230"
  },
  {
    "text": "coffee start that spring that i/o if",
    "start": "903230",
    "end": "910070"
  },
  {
    "text": "your children are restless and can't sleep start that spring today oh and if",
    "start": "910070",
    "end": "918110"
  },
  {
    "text": "you suffer from indigestion after a long night of alcohol abuse and PHP start",
    "start": "918110",
    "end": "925790"
  },
  {
    "text": "that spring that I oh so what we're gonna do is we're gonna build a new application my",
    "start": "925790",
    "end": "931020"
  },
  {
    "start": "928000",
    "end": "979000"
  },
  {
    "text": "friends are gonna take advantage of the latest and greatest spring boot snapshot releases because Yolo we're gonna build a new service called the reservation -",
    "start": "931020",
    "end": "937470"
  },
  {
    "text": "service we're gonna use the dependencies that we want I'm going to choose more options to bring in Java 11 this is",
    "start": "937470",
    "end": "943650"
  },
  {
    "text": "really really the only sane choice these days I can't wait for the day when this is the default we're gonna bring in the",
    "start": "943650",
    "end": "949640"
  },
  {
    "text": "reactive web support we're gonna bring in Lombok we're gonna bring in the dev",
    "start": "949640",
    "end": "956040"
  },
  {
    "text": "tools we're gonna bring in the reactive MongoDB support we're gonna use our socket and I think that's it I think",
    "start": "956040",
    "end": "961980"
  },
  {
    "text": "that's probably enough for our purposes here and now that said there's other things we could have liked to include",
    "start": "961980",
    "end": "967710"
  },
  {
    "text": "and I encourage you to take a look at that list at your leisure at your own discretion later on you can just do that by by clicking on dependencies see all",
    "start": "967710",
    "end": "975780"
  },
  {
    "text": "and you'll be given this long list of options okay all right I'm happy with my choices I'm gonna go ahead and hit",
    "start": "975780",
    "end": "981720"
  },
  {
    "start": "979000",
    "end": "1055000"
  },
  {
    "text": "generate that'll give us a new project a project that I'm going to open up in my IDE and we're just gonna go ahead and and use that to demonstrate some of",
    "start": "981720",
    "end": "987660"
  },
  {
    "text": "these concepts today all right so we",
    "start": "987660",
    "end": "1000680"
  },
  {
    "text": "have a brand new application a Springwood application and we're going to create a new application that manages data it's gonna persist the data into",
    "start": "1000680",
    "end": "1007160"
  },
  {
    "text": "the database and so I'm gonna create an entity an ORM kind of like entity they're gonna map to documents that is",
    "start": "1007160",
    "end": "1013190"
  },
  {
    "text": "to say a single record in the database in MongoDB and I've got MongoDB in the background here and I'm gonna use",
    "start": "1013190",
    "end": "1019610"
  },
  {
    "text": "MongoDB to save data into the database I'll say a tidy at document and that's my basic entity definition but this is",
    "start": "1019610",
    "end": "1026329"
  },
  {
    "text": "Java and I still need getters and setters and all that kind of stuff and so obviously I could just get her and set on my way to production like that",
    "start": "1026330",
    "end": "1032839"
  },
  {
    "text": "equals equals equals hash code blah blah blah so productive so modern look at that nonsense so instead of doing that",
    "start": "1032839",
    "end": "1039459"
  },
  {
    "text": "instead of doing that I'll use Lombok right long buckets on the compiled it's a compile time annotation processors on",
    "start": "1039459",
    "end": "1045650"
  },
  {
    "text": "the class path and all I got to do is annotate my types and I get the synthetic getter setters to string",
    "start": "1045650",
    "end": "1051080"
  },
  {
    "text": "equals hash code etc with that I want to create a repository in a repository is an object that's going to let us handle",
    "start": "1051080",
    "end": "1058070"
  },
  {
    "start": "1055000",
    "end": "1188000"
  },
  {
    "text": "the tedious soil and Island the boring read write and update delete life cycle the the life cycle of",
    "start": "1058070",
    "end": "1064310"
  },
  {
    "text": "data okay and so we've got this repository from spring data it's a reactive code repository if we click on",
    "start": "1064310",
    "end": "1070970"
  },
  {
    "text": "the interface you can see that the methods are fairly straightforward what's gonna happen is spring is gonna create an implementation of this",
    "start": "1070970",
    "end": "1077390"
  },
  {
    "text": "interface that supports these methods we don't have to do anything more than the interface these methods are straightforward we have save save all",
    "start": "1077390",
    "end": "1083870"
  },
  {
    "text": "save all find buy ID delete check if it exists count you know flush all these kinds of normal crud style data",
    "start": "1083870",
    "end": "1091130"
  },
  {
    "text": "management lifecycle manipulators are all there these methods are straightforward but the signatures I",
    "start": "1091130",
    "end": "1096380"
  },
  {
    "text": "suspect might be a little weird for you first of all what is a publisher well a publisher is a thing from the reactive",
    "start": "1096380",
    "end": "1103640"
  },
  {
    "text": "streams these are one of the four types that I just described to you in the reactive stream specification a publisher publishes items of type T",
    "start": "1103640",
    "end": "1110900"
  },
  {
    "text": "where T is anything it could be a single byte it could be a byte buffer it could be a string it could be a customer or an",
    "start": "1110900",
    "end": "1116030"
  },
  {
    "text": "order a line item whatever it publisher publishes an item of type T to the subscriber and the subscriber consumes",
    "start": "1116030",
    "end": "1122840"
  },
  {
    "text": "that item in the on next method so the publisher will have one or zero or a",
    "start": "1122840",
    "end": "1127850"
  },
  {
    "text": "trillion or an infinite number of Records and as they become available it publishes them to the subscriber the",
    "start": "1127850",
    "end": "1134840"
  },
  {
    "text": "subscriber then consumes them in the on next method when the data is available if it's available if there are any",
    "start": "1134840",
    "end": "1141320"
  },
  {
    "text": "errors then that error is communicated through the on error method here this is to say that when you have an error in",
    "start": "1141320",
    "end": "1148340"
  },
  {
    "text": "your processing code you handle it in the same way with the same kind of operators as you would regular data",
    "start": "1148340",
    "end": "1154090"
  },
  {
    "text": "errors contrary to the Java language designer spec are not exceptional they",
    "start": "1154090",
    "end": "1159770"
  },
  {
    "text": "don't require separate control flow they're just another kind of data and so you are forced to confront that when you",
    "start": "1159770",
    "end": "1165230"
  },
  {
    "text": "write reactive code in this way reactive code is a bit more functional than regular code we also have the oncomplete",
    "start": "1165230",
    "end": "1170990"
  },
  {
    "text": "method which gets called when processing has completed non exceptionally okay now",
    "start": "1170990",
    "end": "1177280"
  },
  {
    "text": "I skipped over this most important of methods because I wanted to drill down on this and just spend a few seconds",
    "start": "1177280",
    "end": "1182810"
  },
  {
    "text": "this on subscribe' method is where we are given a link a reference to the subscription a subscription is the link",
    "start": "1182810",
    "end": "1190250"
  },
  {
    "start": "1188000",
    "end": "1230000"
  },
  {
    "text": "between the producer and the consumer it's how the consumer tells the producer to slow down",
    "start": "1190250",
    "end": "1195500"
  },
  {
    "text": "we do that by saying I want to request X number of Records if you specify it long maxvalue you'll be given an unlimited",
    "start": "1195500",
    "end": "1202520"
  },
  {
    "text": "number of records but if you specify anything less than that then you'll be given you know as much as is available",
    "start": "1202520",
    "end": "1207530"
  },
  {
    "text": "up to that point right so long that max value means give me as much as possible if you've got ten give me all ten if",
    "start": "1207530",
    "end": "1214130"
  },
  {
    "text": "you've got a billion give me them all as fast as you can and if you give it if you specify X then it'll give you no",
    "start": "1214130",
    "end": "1220130"
  },
  {
    "text": "more than X it doesn't matter how long it might be X records over X years or might be x2 echo 2 over X nanoseconds",
    "start": "1220130",
    "end": "1226910"
  },
  {
    "text": "right there's no stipulation there about what that means and if you want to stop",
    "start": "1226910",
    "end": "1232310"
  },
  {
    "start": "1230000",
    "end": "1318000"
  },
  {
    "text": "the production of data you can cancel it as well now this isn't a particularly controversial idea we're telling the",
    "start": "1232310",
    "end": "1238910"
  },
  {
    "text": "producer to slow down we need to do this because our there are discrepancies between the rate of production and the",
    "start": "1238910",
    "end": "1245630"
  },
  {
    "text": "rate of consumption this is something with which we've all no doubt been exposed or to which we've all but no",
    "start": "1245630",
    "end": "1252020"
  },
  {
    "text": "doubt been exposed if we've had to build Network protocols right if you've ever had to think about basic networking you",
    "start": "1252020",
    "end": "1257150"
  },
  {
    "text": "have to think about the reality of some things being faster than others when you get that mismatch when you get that sort",
    "start": "1257150",
    "end": "1263030"
  },
  {
    "text": "of that that discrepancy then things get bad right things start to overwhelm each",
    "start": "1263030",
    "end": "1268460"
  },
  {
    "text": "other this creates unstable systems this is why you can this is why it's possible to denial-of-service certain kinds of",
    "start": "1268460",
    "end": "1274580"
  },
  {
    "text": "protocols like HTTP but this isn't this isn't like a new idea right",
    "start": "1274580",
    "end": "1279920"
  },
  {
    "text": "if you've ever built Network protocols you've had to think about this in the context of networking from the moment we",
    "start": "1279920",
    "end": "1285350"
  },
  {
    "text": "had one computer connected over a network to another we call that flow control it's a sixty plus year old idea",
    "start": "1285350",
    "end": "1290960"
  },
  {
    "text": "right not even close to controversial we just call it flow control in the world of back and the world of reactive",
    "start": "1290960",
    "end": "1297080"
  },
  {
    "text": "programming of course where everything that is old is new and has been rebranded by marketing the world of the",
    "start": "1297080",
    "end": "1304340"
  },
  {
    "text": "word flow control has been turned into back pressure okay so when you see the word back pressure we're just talking",
    "start": "1304340",
    "end": "1310070"
  },
  {
    "text": "about flow control we're talking about having a way for the producer to ask or sorry for the consumer to ask the",
    "start": "1310070",
    "end": "1315680"
  },
  {
    "text": "producer to please slow down okay now we've got these three types I did say",
    "start": "1315680",
    "end": "1320960"
  },
  {
    "start": "1318000",
    "end": "1365000"
  },
  {
    "text": "there are four there's a fourth type called a processor and a processor is just that it's a bridge it's a source",
    "start": "1320960",
    "end": "1326150"
  },
  {
    "text": "and a sink it's a consumer and mr. a subscriber and a publisher if you understand those four types than your",
    "start": "1326150",
    "end": "1332090"
  },
  {
    "text": "already you know you already made great progress congratulations you're certified reactive go to Silicon Valley",
    "start": "1332090",
    "end": "1337760"
  },
  {
    "text": "start a new company getting millions in venture capital startup and throw different terrible parties and burn out",
    "start": "1337760",
    "end": "1343220"
  },
  {
    "text": "after six months you're already halfway there that said there are some other types",
    "start": "1343220",
    "end": "1348410"
  },
  {
    "text": "that support operations on these streams of data these types include mono mono",
    "start": "1348410",
    "end": "1353600"
  },
  {
    "text": "comes from reactor this is not a reactive streams sort of type this is one of our types from our project to built on top of",
    "start": "1353600",
    "end": "1360340"
  },
  {
    "text": "reactive streams it's an implementation of publisher from their active streams but a mono is a publisher that produces",
    "start": "1360340",
    "end": "1367370"
  },
  {
    "start": "1365000",
    "end": "1406000"
  },
  {
    "text": "at most one value it's like a completable future that is asynchronous and also supports back pressure okay so",
    "start": "1367370",
    "end": "1375170"
  },
  {
    "text": "at most it'll have one value a flux under the hand is a publisher just like",
    "start": "1375170",
    "end": "1382730"
  },
  {
    "text": "mono but it's a publisher that produces 0 to n values where n is potentially unbounded it's a like it's like a Java 8",
    "start": "1382730",
    "end": "1390530"
  },
  {
    "text": "stream but it supports back pressure ok so now we have these basic types we have",
    "start": "1390530",
    "end": "1396080"
  },
  {
    "text": "these types with which we can work and we have these interfaces now we can use that to write some sample data to the",
    "start": "1396080",
    "end": "1401840"
  },
  {
    "text": "database oh I'll do that right here sample data initializer we're just gonna",
    "start": "1401840",
    "end": "1407270"
  },
  {
    "start": "1406000",
    "end": "1468000"
  },
  {
    "text": "create a bean that listens for events when the application starts up initialize and we're going to initialize",
    "start": "1407270",
    "end": "1414500"
  },
  {
    "text": "it by injecting a repository into our onto our object here and I'm going to",
    "start": "1414500",
    "end": "1420500"
  },
  {
    "text": "use Lombok here to create a constructor for the required field so I've just",
    "start": "1420500",
    "end": "1425900"
  },
  {
    "text": "created a constructor that has an argument of type reservation repository spring will see that it'll see that it",
    "start": "1425900",
    "end": "1431780"
  },
  {
    "text": "can resolve this dependency by by looking in the context and it'll inject that reference for us so there we go",
    "start": "1431780",
    "end": "1437210"
  },
  {
    "text": "we've got this now what I want to do is I'm create a li a publisher with some names in it so I'm Josh it's so nice to meet you I've got some other names I'm",
    "start": "1437210",
    "end": "1443900"
  },
  {
    "text": "gonna add here as well and I've seen dr. Sawyer I've got viola I've got who else",
    "start": "1443900",
    "end": "1453679"
  },
  {
    "text": "who else do we have we've got [Music] Stefon good we've got oh we've got my",
    "start": "1453679",
    "end": "1464870"
  },
  {
    "text": "door and I need one more name one more",
    "start": "1464870",
    "end": "1470419"
  },
  {
    "start": "1468000",
    "end": "1681000"
  },
  {
    "text": "name sorry good idea Sebastian thank you so there's",
    "start": "1470419",
    "end": "1475549"
  },
  {
    "text": "some names okay we've got some names in our application and I'm gonna just turn this into an like a hard-coded list of",
    "start": "1475549",
    "end": "1481970"
  },
  {
    "text": "names it's just a publisher with some names resident in memory and what I want to do is I wanna visit each one of those names and turn them into a new publisher",
    "start": "1481970",
    "end": "1489740"
  },
  {
    "text": "so a new reservation rather I'm gonna write that reservation to the database and I'll store that as an intermediate type of type reservation so it's a",
    "start": "1489740",
    "end": "1495740"
  },
  {
    "text": "publisher of reservations and now we're going to visit each one of those and turn it into an object that gets written",
    "start": "1495740",
    "end": "1501350"
  },
  {
    "text": "to the database so here's the reservation okay all right",
    "start": "1501350",
    "end": "1509900"
  },
  {
    "text": "a new reservation that we're gonna write to the database reservation deposit at save passing in our E and we're gonna save that as another publisher so what",
    "start": "1509900",
    "end": "1516350"
  },
  {
    "text": "I've done is I've called flatmap instead of map and the reason is because save returned to mano so it's a publisher of",
    "start": "1516350",
    "end": "1522350"
  },
  {
    "text": "publisher is what I would get normally if I used map then this would actually result in a publish of flux of mano of T",
    "start": "1522350",
    "end": "1528260"
  },
  {
    "text": "and that's - that's one publisher you know level too much instead I want to I want to just one level so I could do",
    "start": "1528260",
    "end": "1535130"
  },
  {
    "text": "this I could say publisher like that publisher and that would be clumsy right",
    "start": "1535130",
    "end": "1543260"
  },
  {
    "text": "it'd be hard to sort of navigate that if I used map so instead I'm going to use flat map and I'll unpack that",
    "start": "1543260",
    "end": "1548840"
  },
  {
    "text": "intermediate type I'll unpack the result of the save operation okay so there we go there's my four Bret there's my three",
    "start": "1548840",
    "end": "1554750"
  },
  {
    "text": "levels my three pipelines and I want to run this code if I ran this code right now though you would find that there's",
    "start": "1554750",
    "end": "1560870"
  },
  {
    "text": "no data in the database and the reason is because this stream this pipeline is cold you have to activate it you have to",
    "start": "1560870",
    "end": "1566960"
  },
  {
    "text": "actually trigger the execution and you do that by calling subscribe which we saw earlier so I could I could call",
    "start": "1566960",
    "end": "1572480"
  },
  {
    "text": "subscribe like this and it would work and that'd be fine but the problem is if I ran this code as it is I would get the",
    "start": "1572480",
    "end": "1578299"
  },
  {
    "text": "same data in the database after a few runs you'd see the same data and successive runs so what I want to do is",
    "start": "1578299",
    "end": "1583730"
  },
  {
    "text": "I want to create one pipeline but I want to delete everything first so I'm going to say first of all say this",
    "start": "1583730",
    "end": "1590269"
  },
  {
    "text": "Asian repository repository dot delete all then we turn a mono so then I want",
    "start": "1590269",
    "end": "1596330"
  },
  {
    "text": "to say run this saved pipeline and then I want to say find all the data in the",
    "start": "1596330",
    "end": "1601399"
  },
  {
    "text": "database like this and then fine I'm gonna subscribe and just use a consumer",
    "start": "1601399",
    "end": "1606950"
  },
  {
    "text": "Java eight consumer here to log out the results I'm going to use the Lombok annotation here to inject a logger field",
    "start": "1606950",
    "end": "1612859"
  },
  {
    "text": "so log4j log info new reservation",
    "start": "1612859",
    "end": "1617869"
  },
  {
    "text": "actually can just log it like this there we go now we can turn this into a lambda good stuff log that out turns it into a",
    "start": "1617869",
    "end": "1625700"
  },
  {
    "text": "method reference good stuff and I've got this whole pipeline but in point of fact you don't actually need to stage these",
    "start": "1625700",
    "end": "1632119"
  },
  {
    "text": "different levels as separate intermediate variables I just did that for own reference so we could kind of follow the action here but really I've",
    "start": "1632119",
    "end": "1638629"
  },
  {
    "text": "just got one pipeline one stream here so I'm gonna create a publisher of type reservation called saved and in fact",
    "start": "1638629",
    "end": "1645379"
  },
  {
    "text": "it's Java 11 so I can just do var okay so there we go there's my my pipeline and what I've done is I'm I'm now gonna",
    "start": "1645379",
    "end": "1651349"
  },
  {
    "text": "write all the data after I've deleted everything the deletion will happen before everything else it's guaranteed",
    "start": "1651349",
    "end": "1656629"
  },
  {
    "text": "to happen before everything else and remember these things can execute on different threads there's no guarantee that what happens here happens on the",
    "start": "1656629",
    "end": "1662839"
  },
  {
    "text": "same thread as this and the reason is because there is a scheduler behind the scenes I can exert control over the",
    "start": "1662839",
    "end": "1668719"
  },
  {
    "text": "scheduler I can say subscribe on for example subscribe on and I can provide a",
    "start": "1668719",
    "end": "1674659"
  },
  {
    "text": "scheduler like this providing an executor service right executors even I",
    "start": "1674659",
    "end": "1681190"
  },
  {
    "text": "can do that if I want but I don't need to in fact I wouldn't I would recommend not doing it if you find yourself doing",
    "start": "1681190",
    "end": "1687079"
  },
  {
    "text": "that you should only do it for interactions with blocking code right the reason is because by default you're",
    "start": "1687079",
    "end": "1693259"
  },
  {
    "text": "gonna have one event loop per core the scheduler will have one event loop for every core in the machine that is to say",
    "start": "1693259",
    "end": "1698959"
  },
  {
    "text": "it'll be fine as long as you don't sit there and block the thread as long as you're doing your work and getting off",
    "start": "1698959",
    "end": "1704299"
  },
  {
    "text": "that thread as quickly as possible then the default configuration will work just fine so let's see what happens if I run",
    "start": "1704299",
    "end": "1710809"
  },
  {
    "start": "1708000",
    "end": "1828000"
  },
  {
    "text": "this program as written right now",
    "start": "1710809",
    "end": "1714459"
  },
  {
    "text": "all right look at that it worked huh how about that of course it worked it was a",
    "start": "1718000",
    "end": "1724300"
  },
  {
    "text": "demo what were you expecting this was always going to work this data was",
    "start": "1724300",
    "end": "1729880"
  },
  {
    "text": "always going to work but I wanted to talk to you about as always and the main reason I'm here is because of this this",
    "start": "1729880",
    "end": "1735130"
  },
  {
    "text": "is the ASCII art work in spring boot this art work took a long time to get right but we on the spring team have many people who are doctors PhDs people",
    "start": "1735130",
    "end": "1742510"
  },
  {
    "text": "who in their previous lives worked in nuclear physics and so it's for this reason I want to take a brief moment to",
    "start": "1742510",
    "end": "1747670"
  },
  {
    "text": "talk about what I consider it to be a glaring and serious deficiency in the IntelliJ branch product for a while I'm",
    "start": "1747670",
    "end": "1753550"
  },
  {
    "text": "a fan I consider this to be particularly short-sighted do you see this check box this one this one right here this one do",
    "start": "1753550",
    "end": "1761320"
  },
  {
    "text": "you see it this one right here this check box do you see it are you seeing this you seen the check box before you this check box once",
    "start": "1761320",
    "end": "1767800"
  },
  {
    "text": "clicked don't click it suppresses the output of the ASCII art work what the",
    "start": "1767800",
    "end": "1776650"
  },
  {
    "text": "hell why is this here that's a dumb feature nobody even asked you IntelliJ",
    "start": "1776650",
    "end": "1782850"
  },
  {
    "text": "so I did what all people would have done in the same situation I'm not a hero I'm not a medic hero you don't have to thank",
    "start": "1782850",
    "end": "1787990"
  },
  {
    "text": "me I went on the internet and I cried and I was sent a message of hope from my friend Jana Braun this is Jana Braun",
    "start": "1787990",
    "end": "1794170"
  },
  {
    "text": "right here this is this is he on right here",
    "start": "1794170",
    "end": "1799710"
  },
  {
    "text": "Boop this is him he's a software developer by passion at JetBrains",
    "start": "1802230",
    "end": "1808630"
  },
  {
    "text": "and he sent me this message of hope which I share with you that today or not",
    "start": "1808630",
    "end": "1816960"
  },
  {
    "text": "slow clap now he's a friend of mine he's a friend of mine and I want to believe",
    "start": "1827110",
    "end": "1832670"
  },
  {
    "start": "1828000",
    "end": "1889000"
  },
  {
    "text": "him when he says that I want to believe him that it's gonna be real but you know what I'm starting to think that maybe just maybe just maybe he's not exactly",
    "start": "1832670",
    "end": "1838370"
  },
  {
    "text": "on the level I'm not sure why it's taken so long but whatever anyway the point is",
    "start": "1838370",
    "end": "1843380"
  },
  {
    "text": "I've got date in the database I've got my app reactive application that's all well and good I want to build a rest controller to talk to the database so",
    "start": "1843380",
    "end": "1849560"
  },
  {
    "text": "I'll say reservation rest controller okay at rest controller and I'm going to",
    "start": "1849560",
    "end": "1858080"
  },
  {
    "text": "inject my repository their reservation repository and I'll create an endpoint I'll say required args constructor to",
    "start": "1858080",
    "end": "1865760"
  },
  {
    "text": "create a to synthesize a constructor there and I'm just gonna create an endpoint that returns a publisher of all",
    "start": "1865760",
    "end": "1871250"
  },
  {
    "text": "the data okay so reservation returned this dot reservation applause did it find all",
    "start": "1871250",
    "end": "1876910"
  },
  {
    "text": "good stuff and now if I restart the application we'll see that its pin up in port 8080 and I'll have an endpoint here",
    "start": "1876910",
    "end": "1883670"
  },
  {
    "text": "reservations Oh voila hello come on did I miss something there it is so",
    "start": "1883670",
    "end": "1890330"
  },
  {
    "start": "1889000",
    "end": "2126000"
  },
  {
    "text": "there's my data that's been produced for me in the reactive pipeline okay now this is it looks like spring and me see",
    "start": "1890330",
    "end": "1896270"
  },
  {
    "text": "if you've ever used p.m. you see this should be very familiar but it is not spring MVC and there are some subtle differences here first of all there's no",
    "start": "1896270",
    "end": "1901730"
  },
  {
    "text": "servlet API here this is built from the ground up the on top on top of MIDI okay we're not using a Tomcat or anything",
    "start": "1901730",
    "end": "1910490"
  },
  {
    "text": "like that and because of that we can do some things that are fundamentally different I'm returning a publisher and everything",
    "start": "1910490",
    "end": "1916970"
  },
  {
    "text": "but a fault is a publisher in spring web flux so even things that would have otherwise been sort of difficult to express because they're asynchronous and",
    "start": "1916970",
    "end": "1923390"
  },
  {
    "text": "potentially unbounded like service and events even things like that become very easy to express in this brave new world",
    "start": "1923390",
    "end": "1929240"
  },
  {
    "text": "of reactive streams okay so I'm going to create a service and event endpoint this",
    "start": "1929240",
    "end": "1934670"
  },
  {
    "text": "is a content type of type text event stream that when the client sees it it'll know to connect and then not",
    "start": "1934670",
    "end": "1940370"
  },
  {
    "text": "disconnect it'll just keep reading for the data it won't ever disconnect so it's very efficient it's gonna do polling on the client and in order to do",
    "start": "1940370",
    "end": "1946940"
  },
  {
    "text": "that I'm going to create a an ongoing stream of data ok interval a message producer publisher of types",
    "start": "1946940",
    "end": "1953910"
  },
  {
    "text": "String produce and I'm gonna say flux dot from stream stream generate new",
    "start": "1953910",
    "end": "1960090"
  },
  {
    "text": "supplier and the suppliers gifts can return hello name at instant now and",
    "start": "1960090",
    "end": "1968160"
  },
  {
    "text": "this string will be a parameter in the method here and I'm gonna stagger each",
    "start": "1968160",
    "end": "1973890"
  },
  {
    "text": "production of elements each result that comes out will be staggered with delay elements so there's my my single",
    "start": "1973890",
    "end": "1979920"
  },
  {
    "text": "component my little service thing that's gonna produce new greetings okay greetings or better yet I'll create an",
    "start": "1979920",
    "end": "1987720"
  },
  {
    "text": "entity I'll create some types greetings request private string name okay at data",
    "start": "1987720",
    "end": "1995810"
  },
  {
    "text": "arts instructor no roads constructor great and class greetings response okay",
    "start": "1995810",
    "end": "2002840"
  },
  {
    "text": "and that's just gonna be a string greeting good stuff so there we go",
    "start": "2002840",
    "end": "2009880"
  },
  {
    "text": "all rights constructor nor its constructor good stuff so I'll say whenever somebody says I want a greeting",
    "start": "2010090",
    "end": "2016460"
  },
  {
    "text": "I'll produce a stream of greetings responses like so okay so named get name",
    "start": "2016460",
    "end": "2022240"
  },
  {
    "text": "and I'm gonna turn each element in that stream into a new greetings response",
    "start": "2022240",
    "end": "2030820"
  },
  {
    "text": "like so alright so there's my my little",
    "start": "2030820",
    "end": "2036710"
  },
  {
    "text": "service I'm going to use that here to return the data I'll say greetings a service an event stream of greetings",
    "start": "2036710",
    "end": "2042710"
  },
  {
    "text": "responses this dot where's my interval",
    "start": "2042710",
    "end": "2047750"
  },
  {
    "text": "publisher there we go private final interval message producer I am P okay and I'll say this dot I MP",
    "start": "2047750",
    "end": "2057649"
  },
  {
    "text": "dot British greetings and this the path variable here is a string I'm gonna say",
    "start": "2057650",
    "end": "2063530"
  },
  {
    "text": "new greetings request and and that's it so I'm just gonna return that stream",
    "start": "2063530",
    "end": "2068870"
  },
  {
    "text": "back to the client it's a reactive stream though it's gonna keep going it's gonna produce a new value every second",
    "start": "2068870",
    "end": "2073909"
  },
  {
    "text": "so we just have to go to the browser on port 8080 SS II /ja SH like that and",
    "start": "2073910",
    "end": "2079580"
  },
  {
    "text": "then we get a stream that produces a new record every one second and as we're producing new records",
    "start": "2079580",
    "end": "2084590"
  },
  {
    "text": "we're not blocking the server we're not stuck on that thread producing that new value that thread is free in",
    "start": "2084590",
    "end": "2091060"
  },
  {
    "text": "between the raindrops to handle other requests so you can see that this makes life very simple right you have this very sort of reactive sort of ongoing",
    "start": "2091060",
    "end": "2098020"
  },
  {
    "text": "way of thinking about data and the code is not much more complicated than then in the case when we just had eight",
    "start": "2098020",
    "end": "2103660"
  },
  {
    "text": "records it's the same metaphor you don't have a completely different programming model if you wanted to do WebSockets you",
    "start": "2103660",
    "end": "2109150"
  },
  {
    "text": "could you would just do the same thing you'd create a publisher right that's all all you have to do is to use publishers if you want to do service and",
    "start": "2109150",
    "end": "2115180"
  },
  {
    "text": "events you create a publisher if you want to just return eight streams of eight elements of data use a publisher when you're not sure use the publisher",
    "start": "2115180",
    "end": "2123010"
  },
  {
    "text": "right that's a very simple way to think about it now I have been using MongoDB but and I like MongoDB it's a very nice",
    "start": "2123010",
    "end": "2129940"
  },
  {
    "start": "2126000",
    "end": "2282000"
  },
  {
    "text": "example of a reactive driver our data support here is built on natively reactive drivers okay so this is not",
    "start": "2129940",
    "end": "2136330"
  },
  {
    "text": "just a facade on top of existing synchronous blocking database abstractions we are using natively",
    "start": "2136330",
    "end": "2141970"
  },
  {
    "text": "asynchronous natively non-blocking i/o underneath the hood here and MongoDB is a good example of a driver that's done",
    "start": "2141970",
    "end": "2147940"
  },
  {
    "text": "right it takes advantage of reactive api's and it works nicely if you want to do Tayla both queries for example in",
    "start": "2147940",
    "end": "2153460"
  },
  {
    "text": "MongoDB then that's nice it's well supported you can do transactions in MongoDB and that's supported even in the",
    "start": "2153460",
    "end": "2158890"
  },
  {
    "text": "reactive API that we built on top of that so you have all the sophistication but let's be honest MongoDB is not the",
    "start": "2158890",
    "end": "2164170"
  },
  {
    "text": "the biggest game in town right I think most of us are probably using some sort of sequel database who's using a sequel",
    "start": "2164170",
    "end": "2170530"
  },
  {
    "text": "database somewhere in your architecture alright so it would be weird for me to say oh just ignore sequel and all the",
    "start": "2170530",
    "end": "2176770"
  },
  {
    "text": "decades of experience on that and that's a very reasonable sort of response to the question of or to the proposition of",
    "start": "2176770",
    "end": "2182560"
  },
  {
    "text": "reactive programming something that people pose to me all the time is how do I use a sequel database and the answer up until now hasn't been great it hasn't",
    "start": "2182560",
    "end": "2189580"
  },
  {
    "text": "been very consistent because unfortunately most people are aware of JDBC and JDBC is a synchronous and",
    "start": "2189580",
    "end": "2195940"
  },
  {
    "text": "blocking API so what we wanted to support was a non-blocking sort of",
    "start": "2195940",
    "end": "2201130"
  },
  {
    "text": "approach for sequel data access that goes beyond what we are what we understand with JDBC um by the way I",
    "start": "2201130",
    "end": "2209740"
  },
  {
    "text": "should before I move on I should also mention that while I did this using spring MVC style endpoints you can also",
    "start": "2209740",
    "end": "2217510"
  },
  {
    "text": "do this using a functional reactive endpoint that we've introduced in Spring Framework five that might be more your",
    "start": "2217510",
    "end": "2223450"
  },
  {
    "text": "cup of tea depending on what you like to do so this same endpoint that I just created I could have described using this as",
    "start": "2223450",
    "end": "2229060"
  },
  {
    "text": "well okay routes",
    "start": "2229060",
    "end": "2236160"
  },
  {
    "text": "am I",
    "start": "2243760",
    "end": "2246540"
  },
  {
    "text": "okay goodbye to you and you",
    "start": "2252300",
    "end": "2257460"
  },
  {
    "text": "so route rather functions out that get",
    "start": "2260610",
    "end": "2277320"
  },
  {
    "text": "four slash reservations new handler function that build and so you just",
    "start": "2277320",
    "end": "2283410"
  },
  {
    "start": "2282000",
    "end": "2516000"
  },
  {
    "text": "returned a lambda and the lambda contains the body and I'm gonna create",
    "start": "2283410",
    "end": "2288480"
  },
  {
    "text": "that body by using the reservation repository I'm gonna stipulate as much by saying it's a reservation type so",
    "start": "2288480",
    "end": "2294750"
  },
  {
    "text": "there's my rewritten handler function and there's some different you know different opinions about why you would use this versus that I'll leave it to",
    "start": "2294750",
    "end": "2301440"
  },
  {
    "text": "you to sort of explore but the main benefit here is that we have this programmatic way of introducing",
    "start": "2301440",
    "end": "2308090"
  },
  {
    "text": "functionality into the application you can it's a builder so you can actually dynamically add things to the writer",
    "start": "2308090",
    "end": "2313200"
  },
  {
    "text": "functions if you like you can programmatically decide to register not register endpoints it's a it's a nice",
    "start": "2313200",
    "end": "2318960"
  },
  {
    "text": "like that depends on your style you can mix and match as well there's no one one way or another anyway back to our saying",
    "start": "2318960",
    "end": "2324170"
  },
  {
    "text": "we have this this this MongoDB application I like MongoDB but it's not the only game in town and we want to",
    "start": "2324170",
    "end": "2330840"
  },
  {
    "text": "build to support sequel so we on this pivotal we have created a project called r2 DBC which is an open source",
    "start": "2330840",
    "end": "2336560"
  },
  {
    "text": "abstraction that's designed to support not now sure remind me later what okay",
    "start": "2336560",
    "end": "2346740"
  },
  {
    "text": "it's called RTD BC and RTD BC is it opens it's an abstraction that allows us to describe asynchronous non-blocking",
    "start": "2346740",
    "end": "2353150"
  },
  {
    "text": "database drivers for sequel and there's a number of different implementations that implement the spi there's",
    "start": "2353150",
    "end": "2358320"
  },
  {
    "text": "PostgreSQL there's Microsoft sequel server there's h2 and there's even a third party one supported by something",
    "start": "2358320",
    "end": "2364140"
  },
  {
    "text": "called jaw sync that supports my sequel so there's four so far there are more coming and of course if Oracle's a DBA",
    "start": "2364140",
    "end": "2371550"
  },
  {
    "text": "thing ever starts to get real then we have a binder than an adapter that will work with that as well so the point is you can use our TBC on top of anything",
    "start": "2371550",
    "end": "2379020"
  },
  {
    "text": "that supports this kind of work and we use our TBC in your application but it's not yet GA it's not finished and because",
    "start": "2379020",
    "end": "2385260"
  },
  {
    "text": "it's not yet GA I want to cautious caution you I want to warn you I'm gonna advise you to regard it with the same",
    "start": "2385260",
    "end": "2391230"
  },
  {
    "text": "skepticism a remote nay hesitation with that you regard something like PHP I did never",
    "start": "2391230",
    "end": "2398359"
  },
  {
    "text": "the two shall meet never production in PHP should ever meet right this is production production here's PHP never the two shall come",
    "start": "2398359",
    "end": "2404750"
  },
  {
    "text": "together I want you to think about this RTB C in the same way and because it's not yet GA and because it's not yet",
    "start": "2404750",
    "end": "2410630"
  },
  {
    "text": "production worthy I want to I have to add the configuration myself I have to do that manually so I'm going to do that",
    "start": "2410630",
    "end": "2416150"
  },
  {
    "text": "over here Desktop misc depths are 2 DB c",
    "start": "2416150",
    "end": "2422260"
  },
  {
    "text": "PB copy ok so I'm gonna add these dependencies this is for PostgreSQL I've",
    "start": "2422260",
    "end": "2427849"
  },
  {
    "text": "got the dependency management section here and I don't need that so I'm adding spring data are 2 DB C and RT BC",
    "start": "2427849",
    "end": "2434270"
  },
  {
    "text": "Postgres to my application and I'm just gonna drop out the MongoDB support here we go ok goodbye and now I need to read",
    "start": "2434270",
    "end": "2441380"
  },
  {
    "text": "write my application to support this brand new world the only things that are you know the top-level things they have to do I'm changing it from a UUID to a",
    "start": "2441380",
    "end": "2448789"
  },
  {
    "text": "monotonically incrementing primary key in my database and of course I have to update the repository to reflect that",
    "start": "2448789",
    "end": "2454369"
  },
  {
    "text": "and and then in the not-too-distant future there's no reason to expect that this wouldn't be enough but for the",
    "start": "2454369",
    "end": "2459799"
  },
  {
    "text": "moment it's not enough you need to actually configure our to DBC itself because there is no auto configuration",
    "start": "2459799",
    "end": "2464930"
  },
  {
    "text": "in spring boot just yet not yet ok so we're gonna create a connection factory like so and that connection",
    "start": "2464930",
    "end": "2472220"
  },
  {
    "text": "factories job is to connect to our post goes instance I'm going to use a builder to do the the hard work of configuring",
    "start": "2472220",
    "end": "2478640"
  },
  {
    "text": "this now normally you'd keep this kind of information in a property file but hash tag alone",
    "start": "2478640",
    "end": "2484099"
  },
  {
    "text": "so here we are ok localhost and database",
    "start": "2484099",
    "end": "2490430"
  },
  {
    "text": "name equals orders and there we go there's my connection my connection information and you can see that this",
    "start": "2490430",
    "end": "2495859"
  },
  {
    "text": "information is in MongoDB you can see I've got you you IDs there now let's see what happens when I we started Oh enable",
    "start": "2495859",
    "end": "2505819"
  },
  {
    "text": "our TV serial posit orry's good",
    "start": "2505819",
    "end": "2510640"
  },
  {
    "text": "okay so now you can see I've got a monotonically incrementing primary key value there right ID equals you know two",
    "start": "2515479",
    "end": "2522630"
  },
  {
    "text": "three eight two three nine etc so that's talking to a post cos instance in the background not to MongoDB and you can",
    "start": "2522630",
    "end": "2528210"
  },
  {
    "text": "see that here piece equal minus you orders orders delete from reservation",
    "start": "2528210",
    "end": "2537469"
  },
  {
    "text": "okay select all from reservation good",
    "start": "2537469",
    "end": "2542579"
  },
  {
    "text": "nothing in it we start and go so there's",
    "start": "2542579",
    "end": "2550440"
  },
  {
    "text": "my data in the database right so you can see I'm actually talking to post guys as well so you know we can now do interesting things we can have talked to",
    "start": "2550440",
    "end": "2556559"
  },
  {
    "text": "a good number of systems using the active api's I've built an HTTP service I like HTTP and don't quote me on this",
    "start": "2556559",
    "end": "2562739"
  },
  {
    "text": "this might be a bit controversial but I truly believe the HTTP has a future it's gonna be big one day that said that said",
    "start": "2562739",
    "end": "2569729"
  },
  {
    "text": "it's not exactly a great application level protocol is it it's a great document retrieval protocol but if all",
    "start": "2569729",
    "end": "2576119"
  },
  {
    "text": "sort of application level concerns for a number of different use cases use cases that witch that were by the way well",
    "start": "2576119",
    "end": "2583079"
  },
  {
    "text": "supported twenty plus odd years ago right we actually had in some ways more freedom and more flexibility as",
    "start": "2583079",
    "end": "2588119"
  },
  {
    "text": "developers as engineers back in the 80s in the client-server era right in the",
    "start": "2588119",
    "end": "2593339"
  },
  {
    "text": "90s as well things like fire-and-forget how do you do fire-and-forget architectures how do you say to the",
    "start": "2593339",
    "end": "2600119"
  },
  {
    "text": "server don't bother sending up setting up the machinery to produce a response I don't need it how do you how do you do",
    "start": "2600119",
    "end": "2606660"
  },
  {
    "text": "server-side push all right how do I initiate a discussion from the server to the consumer from the producer to the",
    "start": "2606660",
    "end": "2611700"
  },
  {
    "text": "consumer instead of having it be request for pie all the time how do i do long-lived connections one option might",
    "start": "2611700",
    "end": "2617460"
  },
  {
    "text": "be service and events but server sent events is text-based if you want to do any kind of binary data you have to base64 your image or",
    "start": "2617460",
    "end": "2624299"
  },
  {
    "text": "your your stream or whatever it's not very efficient right what about WebSockets well WebSockets are a bit",
    "start": "2624299",
    "end": "2629940"
  },
  {
    "text": "better but that is a separate protocol first of all and second of all you don't have headers right",
    "start": "2629940",
    "end": "2635880"
  },
  {
    "text": "WebSockets don't have the concept of a header how do you do security alright how do you propagate a token these are",
    "start": "2635880",
    "end": "2641910"
  },
  {
    "text": "basic just super super basic concerns that every application ever written we'll always have every",
    "start": "2641910",
    "end": "2647039"
  },
  {
    "text": "time and yet h-tpa fails to dress all of it right so so it's a bit of a bummer because we have to add these things we",
    "start": "2647039",
    "end": "2652859"
  },
  {
    "text": "have to sort of fill in these very obvious gaps and so one example for WebSockets as we stomp right stomp is a",
    "start": "2652859",
    "end": "2658709"
  },
  {
    "text": "way of encoding the message header and the payload as part of the payload for the WebSocket right it's a convention",
    "start": "2658709",
    "end": "2664589"
  },
  {
    "text": "and if both producer and consumer don't know about that convention then it doesn't work it's a bit of a bummer and that's separate and apart from the",
    "start": "2664589",
    "end": "2670920"
  },
  {
    "text": "payload of the stop message itself so you've got two levels of contracts that need to line up before you can even agree on how to communicate using",
    "start": "2670920",
    "end": "2677039"
  },
  {
    "text": "WebSockets so these things are I think just a bit of a bummer and then like I said there's other message exchange",
    "start": "2677039",
    "end": "2682739"
  },
  {
    "text": "patterns like server-side initiated there's request of a stream and response for a stream there's requests a single",
    "start": "2682739",
    "end": "2689160"
  },
  {
    "text": "value and get a stream back there's a request reply with a single value in and a single value out and there's fire-and-forget where you send a single",
    "start": "2689160",
    "end": "2695249"
  },
  {
    "text": "value in but you get nothing back these kinds of interactions are natural to express using TCP and UDP but they're",
    "start": "2695249",
    "end": "2702299"
  },
  {
    "text": "not so natural to express using HTTP which only supports one of them requests response not to mention HC P 1 dot X",
    "start": "2702299",
    "end": "2710209"
  },
  {
    "text": "supports text based communication right it's not binary by default and so this",
    "start": "2710209",
    "end": "2716459"
  },
  {
    "text": "is a one of those things that gets fixed in HTTP 2 but you still have all those other limitations the result is that in",
    "start": "2716459",
    "end": "2722339"
  },
  {
    "text": "order to communicate binary data you have to base64 encoded send it back to the client and then the client on you",
    "start": "2722339",
    "end": "2727769"
  },
  {
    "text": "know unencoded it's very inefficient because the data started off is binary in the first place we just mule it",
    "start": "2727769",
    "end": "2732930"
  },
  {
    "text": "across the wire as text to be able to use HTTP so a number of different",
    "start": "2732930",
    "end": "2738209"
  },
  {
    "text": "companies have faced these limitations and many others and they've decided that while HTTP is great for the open web it's not great for sort of homogeneous",
    "start": "2738209",
    "end": "2744390"
  },
  {
    "text": "application level integration Google very famously created J RPC G RPC is a whole whole technology stack dedicated",
    "start": "2744390",
    "end": "2752130"
  },
  {
    "text": "to solving and fixing some of these limitations in it it requires that you communicate everything in terms of",
    "start": "2752130",
    "end": "2757319"
  },
  {
    "text": "Google protocol buffers so that's a bit of a bit of a bummer as well because you might want to use other kinds of encoding x' and it's not by default",
    "start": "2757319",
    "end": "2764039"
  },
  {
    "text": "reactive it's asynchronous but it's not reactive salesforce created a compiler plugin for pro talk which is the erp c",
    "start": "2764039",
    "end": "2771180"
  },
  {
    "text": "compiler they can create a compiler plugin that will code generate reactor base 2",
    "start": "2771180",
    "end": "2776249"
  },
  {
    "text": "services for you right so they're using reactor in salesforce using GRP c+ reactor from from pivotal",
    "start": "2776249",
    "end": "2781710"
  },
  {
    "text": "right to scale there's another fairly big website that one day I think has a future maybe called Facebook there are",
    "start": "2781710",
    "end": "2788640"
  },
  {
    "text": "kept aside based in California that uh I don't know what they do but the point is it's apparently they're very popular and",
    "start": "2788640",
    "end": "2794430"
  },
  {
    "text": "they want you know so in order for them to scale they hired a number of engineers a lot of whom came from Netflix and the team from Netflix that",
    "start": "2794430",
    "end": "2801630"
  },
  {
    "text": "they hired in particular worked on rx Java and they worked on their active stream specification they went to",
    "start": "2801630",
    "end": "2806790"
  },
  {
    "text": "Facebook and they were trying to solve the problem of how do the services communicate with each other and so they created a protocol called",
    "start": "2806790",
    "end": "2812070"
  },
  {
    "text": "our socket it's an open protocol and it has a number of different implementations it's a wire protocol that is natively reactive by default out",
    "start": "2812070",
    "end": "2818609"
  },
  {
    "text": "of the ground out of the box it has in the protocol ways to do different kinds of message exchanges its payload",
    "start": "2818609",
    "end": "2824670"
  },
  {
    "text": "agnostic it doesn't care whether it's text or binary or whatever and it has concepts like headers and it even has",
    "start": "2824670",
    "end": "2830490"
  },
  {
    "text": "concepts like uptime how do you communicate how do i as a server as a service communicate to my client my load",
    "start": "2830490",
    "end": "2837599"
  },
  {
    "text": "my uptime my availability if you're using spring then you've no doubt heard about the actuator the actuator",
    "start": "2837599",
    "end": "2843150"
  },
  {
    "text": "communicates this thing but it's sort of a thing that we do by convention isn't it it's an out-of-band thing that the",
    "start": "2843150",
    "end": "2848310"
  },
  {
    "text": "client needs to know to look for on the service right and that way they can figure out what's your availability what's your uptime if I make a request",
    "start": "2848310",
    "end": "2854940"
  },
  {
    "text": "to you will I get a response back so we can use our socket now we have native",
    "start": "2854940",
    "end": "2860940"
  },
  {
    "text": "support for our socket in in spring in Spring Framework 5.2 which is coming out this year so what I'm gonna do is I'm",
    "start": "2860940",
    "end": "2867089"
  },
  {
    "text": "going to build a new client here okay that's gonna be our socket or sari client I'm just gonna use our socket to",
    "start": "2867089",
    "end": "2876450"
  },
  {
    "text": "to to Lombok reactive web and that's it",
    "start": "2876450",
    "end": "2882710"
  },
  {
    "text": "here we go quick as possible so the goal here is to make this as simple as easy and easy as",
    "start": "2882710",
    "end": "2888780"
  },
  {
    "text": "possible our socket is payload agnostic",
    "start": "2888780",
    "end": "2894000"
  },
  {
    "text": "but it doesn't support routing right it doesn't know about routing so in Spring Framework 5.2 we've got support for that you can say add controller class our",
    "start": "2894000",
    "end": "2900839"
  },
  {
    "text": "socket greeting controller okay I'm gonna create a message mapping",
    "start": "2900839",
    "end": "2905849"
  },
  {
    "text": "endpoint that does routing for you this is spring and it's gonna be a publisher or a flux in this case of type readings",
    "start": "2905849",
    "end": "2913140"
  },
  {
    "text": "sponsz greet and we'll be agreeing requests okay there's be the payload",
    "start": "2913140",
    "end": "2919319"
  },
  {
    "text": "request and our socket is easy to integrate in spring because of course",
    "start": "2919319",
    "end": "2924359"
  },
  {
    "start": "2921000",
    "end": "3221000"
  },
  {
    "text": "the Facebook team that that worked on Netflix wanted to choose a Java library to build their Java client and it's only",
    "start": "2924359",
    "end": "2930779"
  },
  {
    "text": "natural natural I say that they would choose of course reactor from pivotal so they did that and so it was very easy",
    "start": "2930779",
    "end": "2937170"
  },
  {
    "text": "for us to integrate so we've got this can we've got this server-side thing I'm gonna say proves the greetings taking in",
    "start": "2937170",
    "end": "2944700"
  },
  {
    "text": "the request so I'm just gonna send back this reactive stream that's never-ending reactive stream I'll send it back to the",
    "start": "2944700",
    "end": "2950039"
  },
  {
    "text": "client as fast as I can our socket here we go is gonna be port 80 or 8000 I'm gonna restart here and on",
    "start": "2950039",
    "end": "2958559"
  },
  {
    "text": "the client side when I create a very simple client that will just start up and produce the data it'll stream the data back to the client using service",
    "start": "2958559",
    "end": "2965519"
  },
  {
    "text": "and events I'm going to create a thing that uses spring web flux and then it in",
    "start": "2965519",
    "end": "2972569"
  },
  {
    "text": "turn calls using our socket in order to do that I need to create an our socket object here okay our socket return our",
    "start": "2972569",
    "end": "2981299"
  },
  {
    "text": "socket factory connect dot data mime type mime type utils application checks",
    "start": "2981299",
    "end": "2987630"
  },
  {
    "text": "value frame decoder payload decoder zero copy Transport TCP client transport I'm",
    "start": "2987630",
    "end": "2995519"
  },
  {
    "text": "going to talk on port which port do we say we said port 8000 support 8000 dot",
    "start": "2995519",
    "end": "3001519"
  },
  {
    "text": "start dot block okay there's my our socket client and I'm going to create a beam of type our socket requester this",
    "start": "3001519",
    "end": "3008240"
  },
  {
    "text": "is the like the web client or the react or the rest template if you will of our socket from spring okay so I'm gonna",
    "start": "3008240",
    "end": "3014569"
  },
  {
    "text": "inject this and we say our socket strategies dot that's alright our socket client requester dot create passing in",
    "start": "3014569",
    "end": "3022880"
  },
  {
    "text": "this dot our socket passing in mime type application JSON and passing in",
    "start": "3022880",
    "end": "3028369"
  },
  {
    "text": "strategies okay so there's right our socket client and all I'm gonna do is I'm gonna create a simple endpoint an HTTP endpoint",
    "start": "3028369",
    "end": "3034460"
  },
  {
    "text": "that's a service end of an endpoint that's going to communicate the streaming data across the wire here okay",
    "start": "3034460",
    "end": "3040009"
  },
  {
    "text": "so getting mapping SSE no greetings name and actually here",
    "start": "3040009",
    "end": "3050189"
  },
  {
    "text": "static class greetings rest controller at controller",
    "start": "3050189",
    "end": "3058069"
  },
  {
    "text": "and publisher of greetings response I'm",
    "start": "3058069",
    "end": "3064890"
  },
  {
    "text": "gonna do something terrible something that you should never ever do ever I'm gonna copy and paste some code here we",
    "start": "3064890",
    "end": "3070679"
  },
  {
    "text": "go where is that code here we go go go go",
    "start": "3070679",
    "end": "3075890"
  },
  {
    "text": "paste there's my type so that I have those four communication",
    "start": "3075890",
    "end": "3081299"
  },
  {
    "text": "greetings response greet okay return and",
    "start": "3081299",
    "end": "3087509"
  },
  {
    "text": "this is the type let's just clean this up a little bit here for getting crazy",
    "start": "3087509",
    "end": "3095329"
  },
  {
    "text": "good okay so I'm going to use the our socket requester our socket requester",
    "start": "3095329",
    "end": "3100519"
  },
  {
    "text": "required args constructor and I'll say this dot requester dot grew out",
    "start": "3100519",
    "end": "3106049"
  },
  {
    "text": "greetings dot data and the data that comes in will be the path variable that",
    "start": "3106049",
    "end": "3112799"
  },
  {
    "text": "I'm gonna turn into a our socket greetings request new greetings request passing in the name and in and then the",
    "start": "3112799",
    "end": "3122130"
  },
  {
    "text": "data that comes back will be a stream right so retrieve a greetings response",
    "start": "3122130",
    "end": "3127880"
  },
  {
    "text": "dot class and it's going to be a service in event just like before so I'll say it produces media type text event stream",
    "start": "3127880",
    "end": "3135029"
  },
  {
    "text": "value equals this if other okay so there's my name there's my greeting request I'm sending it to the server I'm",
    "start": "3135029",
    "end": "3141989"
  },
  {
    "text": "getting a stream back I'm going to spin it back to the HTTP client okay oh this",
    "start": "3141989",
    "end": "3148049"
  },
  {
    "text": "will be on the wrong port server dot port equals 8081 restart go go go",
    "start": "3148049",
    "end": "3156229"
  },
  {
    "text": "localhost 8080 one and we called this endpoint sse greetings n go to no",
    "start": "3156229",
    "end": "3168929"
  },
  {
    "text": "handler for destination greetings what did I call it over here come on",
    "start": "3168929",
    "end": "3175699"
  },
  {
    "text": "they're greeting Santa Maria so reading",
    "start": "3178070",
    "end": "3186110"
  },
  {
    "text": "all right there we go my friends so you can see we used our socket to communicate one from one service to",
    "start": "3193539",
    "end": "3198759"
  },
  {
    "text": "another we did it in a binder way it's super efficient we don't have to worry about the communication we don't have to worry about how it's encoded in this",
    "start": "3198759",
    "end": "3204159"
  },
  {
    "text": "case it can be JSON but can also be protocol buffs or thrift or whatever um I hope you see that there's a lot of opportunities here a lot of potential I",
    "start": "3204159",
    "end": "3209829"
  },
  {
    "text": "want to thank you so much for your time and I would encourage you to join me in my master class later this week thank you so much so much go - I appreciate it",
    "start": "3209829",
    "end": "3216279"
  },
  {
    "text": "Cheers [Applause] you",
    "start": "3216279",
    "end": "3222320"
  }
]