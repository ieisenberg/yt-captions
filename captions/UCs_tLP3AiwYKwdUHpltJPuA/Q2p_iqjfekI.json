[
  {
    "start": "0",
    "end": "208000"
  },
  {
    "text": "okay my name is uh bhagiv i am originally from russia but i've been",
    "start": "13360",
    "end": "18720"
  },
  {
    "text": "living in norway for 30 years doing a lot of c sharp currently doing",
    "start": "18720",
    "end": "24640"
  },
  {
    "text": "most more f sharp than c sharp how many of you practicing mostly",
    "start": "24640",
    "end": "32800"
  },
  {
    "text": "object-oriented languages like java c-sharp c yeah vast majority",
    "start": "32800",
    "end": "38960"
  },
  {
    "text": "how many mainly used functional languages very few how many tried functional",
    "start": "38960",
    "end": "45440"
  },
  {
    "text": "languages yeah also vast majority yeah uh my github",
    "start": "45440",
    "end": "51680"
  },
  {
    "text": "nickname is object uh and my twitter the nickname is object and this is because uh the object",
    "start": "51680",
    "end": "58640"
  },
  {
    "text": "was taken and double object was taken so i uh with triplets but it says something about",
    "start": "58640",
    "end": "64559"
  },
  {
    "text": "uh my attachment i guess to object oriented developer and i i really was",
    "start": "64559",
    "end": "70159"
  },
  {
    "text": "for something like uh two decades uh so i will try to uh talk about my my",
    "start": "70159",
    "end": "77759"
  },
  {
    "text": "path uh to functional programming and uh one sort of disclaimer i need to make",
    "start": "77759",
    "end": "84400"
  },
  {
    "text": "this is not something that i really sort of recommend you to do even if you are",
    "start": "84400",
    "end": "89920"
  },
  {
    "text": "happy with your current uh development environment and language of your choice and uh",
    "start": "89920",
    "end": "97680"
  },
  {
    "text": "who was on the previous talk uh by pj hagerty i think he also had this message saying that you don't need to switch to",
    "start": "97680",
    "end": "104560"
  },
  {
    "text": "to anything which is trendy i mean you you need to do your job you need to be happy as a developer and uh so that's",
    "start": "104560",
    "end": "113040"
  },
  {
    "text": "that's quite important that's probably most most important and there is a great blog post by eric singh eriksen is quite",
    "start": "113040",
    "end": "119280"
  },
  {
    "text": "legendary figure he was one of the uh developers of first browsers it was",
    "start": "119280",
    "end": "124560"
  },
  {
    "text": "spyglass later to become like first version of internet explorer and",
    "start": "124560",
    "end": "130479"
  },
  {
    "text": "he he's using a lot of f sharp now and a few years ago he wrote a blog post about",
    "start": "130479",
    "end": "136640"
  },
  {
    "text": "f sharp evangelism where he said that there's pure evangelism will not work uh",
    "start": "136640",
    "end": "143040"
  },
  {
    "text": "if uh if you try to address it to a person who is happy with uh",
    "start": "143040",
    "end": "148480"
  },
  {
    "text": "uh what he's doing you need to catch somebody sort of at pain and he had this",
    "start": "148480",
    "end": "154160"
  },
  {
    "text": "term pragmatist at pain so uh",
    "start": "154160",
    "end": "159440"
  },
  {
    "text": "people who who who accumulated some pain about uh",
    "start": "159440",
    "end": "166400"
  },
  {
    "text": "what they're doing and they probably not particularly happy with some of it and maybe they they consider",
    "start": "166400",
    "end": "172480"
  },
  {
    "text": "to to try something else so uh very quick just one slide about uh our",
    "start": "172480",
    "end": "179840"
  },
  {
    "text": "product i worked uh in a project for norwegian broadcasting corporation nrk",
    "start": "179840",
    "end": "185120"
  },
  {
    "text": "so we are doing uh we publish uh media files to to be streamed so you can",
    "start": "185120",
    "end": "191599"
  },
  {
    "text": "understand of course you can figure out how important our services so they need to be",
    "start": "191599",
    "end": "197040"
  },
  {
    "text": "available scalable robust and new skills published all the time so uh this all is based on",
    "start": "197040",
    "end": "205599"
  },
  {
    "text": "our practical experience uh so uh",
    "start": "205599",
    "end": "211360"
  },
  {
    "start": "208000",
    "end": "333000"
  },
  {
    "text": "let's start with uh something which is very simple uh and",
    "start": "211360",
    "end": "218400"
  },
  {
    "text": "which uh any of you will implement just in a matter of minutes uh modeling a",
    "start": "218400",
    "end": "223760"
  },
  {
    "text": "point in object credit languages like like c sharp and this is from",
    "start": "223760",
    "end": "230560"
  },
  {
    "text": "i took it with permission from uh a presentation uh by another russian guy",
    "start": "230560",
    "end": "236239"
  },
  {
    "text": "actually dmitry ivanov formally he used to work in jetbrains and in one of his talk he he was describing actually how",
    "start": "236239",
    "end": "244799"
  },
  {
    "text": "uh hard it can be for at least for newcomer for a new developer to",
    "start": "244799",
    "end": "250959"
  },
  {
    "text": "uh to uh implement something really simple",
    "start": "250959",
    "end": "256239"
  },
  {
    "text": "so he came with uh this very simple implication of class point",
    "start": "256239",
    "end": "262880"
  },
  {
    "text": "and many of developers would probably do it like this that was few years ago with",
    "start": "262880",
    "end": "268240"
  },
  {
    "text": "a new features of f of c sharp probably people would consider uh",
    "start": "268240",
    "end": "274639"
  },
  {
    "text": "some modern features of c sharp but anyway it's pretty standard implementation and if",
    "start": "274639",
    "end": "280560"
  },
  {
    "text": "look at it uh carefully we will find that actually there are five lines of code",
    "start": "280560",
    "end": "285680"
  },
  {
    "text": "but uh four of them are well we can say they are wrong and two",
    "start": "285680",
    "end": "290800"
  },
  {
    "text": "of them are missing uh missing uh part is that if you want this to be uh comparable uh you uh you",
    "start": "290800",
    "end": "299040"
  },
  {
    "text": "need to implement uh get hash code you need to have uh equals uh",
    "start": "299040",
    "end": "304720"
  },
  {
    "text": "and then um also if you need this to be thread safe then it should only have",
    "start": "304720",
    "end": "310800"
  },
  {
    "text": "getters and all the dangerous methods which which change the value",
    "start": "310800",
    "end": "316240"
  },
  {
    "text": "they shouldn't just change value in place they should return a new instance of of this object",
    "start": "316240",
    "end": "322880"
  },
  {
    "text": "so this is this is a sort of better safer implementation where you have only read-only members uh",
    "start": "322880",
    "end": "329039"
  },
  {
    "text": "safe methods and a couple of methods which were missing uh and this is how",
    "start": "329039",
    "end": "335759"
  },
  {
    "start": "333000",
    "end": "412000"
  },
  {
    "text": "this can be done in fsharp uh with uh as you see",
    "start": "335759",
    "end": "341199"
  },
  {
    "text": "uh this is default i mean the first implementation which comes to mind to either",
    "start": "341199",
    "end": "347520"
  },
  {
    "text": "experience on you a new developer and that actually works out of the box",
    "start": "347520",
    "end": "353120"
  },
  {
    "text": "uh this is how you create points in fsharp and this is how you",
    "start": "353120",
    "end": "358560"
  },
  {
    "text": "copy them of course you can say that oh well developers can make mistake and then",
    "start": "358560",
    "end": "365680"
  },
  {
    "text": "if a developer is experienced he can learn from uh first mistakes and then stop",
    "start": "365680",
    "end": "372240"
  },
  {
    "text": "making them uh i i wouldn't call it mistake i would maybe call it some sort of insufficient",
    "start": "372240",
    "end": "377919"
  },
  {
    "text": "experience because you have to gain some experience uh it's quite natural to follow uh to do things by default in the",
    "start": "377919",
    "end": "385039"
  },
  {
    "text": "easiest way and uh it's in a way it's not your problem as a beginning developer",
    "start": "385039",
    "end": "392720"
  },
  {
    "text": "that you may may have not learned all these tricks and details how you do it thread safe",
    "start": "392720",
    "end": "398720"
  },
  {
    "text": "and why do you need get hash code and so on and uh but i think this is actually",
    "start": "398720",
    "end": "404080"
  },
  {
    "text": "principal difference between op and fb with uh",
    "start": "404080",
    "end": "409520"
  },
  {
    "text": "this mainstream uh object-oriented languages like java c-sharp and c-plus plus you have a variety of choices you",
    "start": "409520",
    "end": "417759"
  },
  {
    "start": "412000",
    "end": "441000"
  },
  {
    "text": "can really make things as powerful as you want but that's your",
    "start": "417759",
    "end": "423199"
  },
  {
    "text": "sole responsibility you can also go wrong while uh",
    "start": "423199",
    "end": "429039"
  },
  {
    "text": "with many or at least most known function programming languages they give you some",
    "start": "429039",
    "end": "436720"
  },
  {
    "text": "safe set of default choices uh and why is it",
    "start": "436720",
    "end": "443199"
  },
  {
    "start": "441000",
    "end": "618000"
  },
  {
    "text": "important can we say okay we as sort of developers we can learn we can become",
    "start": "443199",
    "end": "448560"
  },
  {
    "text": "better i think that uh we shouldn't underestimate the importance of uh call to be",
    "start": "448560",
    "end": "455039"
  },
  {
    "text": "uh minimalistic clear and for default implementation to work out of the box uh",
    "start": "455039",
    "end": "461599"
  },
  {
    "text": "there was a great talk by robert small trial he often his presentation",
    "start": "461599",
    "end": "466879"
  },
  {
    "text": "addresses some metrics of software project and then he looked at half-lives of software related",
    "start": "466879",
    "end": "472560"
  },
  {
    "text": "entities and so half-life of developer in a team is",
    "start": "472560",
    "end": "478160"
  },
  {
    "text": "about three years which means that within three years half of developers in a project team will be gone",
    "start": "478160",
    "end": "484160"
  },
  {
    "text": "which is probably uh yeah i think it uh fits sort of my experience uh then a",
    "start": "484160",
    "end": "492639"
  },
  {
    "text": "half-life of application time is six years it's actually double it's longer than uh",
    "start": "492639",
    "end": "498720"
  },
  {
    "text": "developer and team and then but what really surprised me that half-life of lines of code is about 13 years",
    "start": "498720",
    "end": "504879"
  },
  {
    "text": "so uh it really it definitely contradicted my personal expectations about",
    "start": "504879",
    "end": "511039"
  },
  {
    "text": "uh us developers being in charge like changing things around code lines",
    "start": "511039",
    "end": "516959"
  },
  {
    "text": "it's actually a piece of the other way around like lines of code like stones",
    "start": "516959",
    "end": "522240"
  },
  {
    "text": "in the wood say sort of lying sarcastically watching us coming and going because it's 13 years",
    "start": "522240",
    "end": "529920"
  },
  {
    "text": "it's based on uh analysis from mainly some large at first understood",
    "start": "529920",
    "end": "535920"
  },
  {
    "text": "enterprise project but but still so uh i think what message this metrics can",
    "start": "535920",
    "end": "542640"
  },
  {
    "text": "give to us is that we should care more about uh how our code will look",
    "start": "542640",
    "end": "550000"
  },
  {
    "text": "uh for the sake of the next developer because more more often than not it's not us",
    "start": "550000",
    "end": "555600"
  },
  {
    "text": "who will deal with our own technical debt it will be uh different people so we need to keep",
    "start": "555600",
    "end": "561040"
  },
  {
    "text": "called succinct and uh keep it uh caught clear to keep our intentions clean and",
    "start": "561040",
    "end": "567680"
  },
  {
    "text": "in this respect i think that uh so moving towards functional programming",
    "start": "567680",
    "end": "574320"
  },
  {
    "text": "gave us cleaner code and uh cleaner uh intentions that was part of",
    "start": "574320",
    "end": "580640"
  },
  {
    "text": "my personal point of pain uh when i was working with with uh c sharp and uh and this is before that it",
    "start": "580640",
    "end": "588399"
  },
  {
    "text": "was uh a lot of ceremony now less with new version of c sharp i must say uh",
    "start": "588399",
    "end": "594800"
  },
  {
    "text": "but uh that uh for me was one of the reasons why i started looking at functional programming",
    "start": "594800",
    "end": "600959"
  },
  {
    "text": "functional programming also uh is a path to concurrency",
    "start": "600959",
    "end": "606320"
  },
  {
    "text": "uh languages like java and c-sharp they will be mutable by default whatever",
    "start": "606320",
    "end": "612800"
  },
  {
    "text": "happens to them the mute data structures are mutable uh and um",
    "start": "612800",
    "end": "618399"
  },
  {
    "start": "618000",
    "end": "673000"
  },
  {
    "text": "uh again what you get by defaulting function in functional uh languages their mute your data",
    "start": "618399",
    "end": "624160"
  },
  {
    "text": "structure immutable and the uh price for this electric very high for",
    "start": "624160",
    "end": "629519"
  },
  {
    "text": "having mutable data structures because then you need to lock them you need to",
    "start": "629519",
    "end": "634720"
  },
  {
    "text": "program to take be in charge of uh sharing data and",
    "start": "634720",
    "end": "641279"
  },
  {
    "text": "placing locks here and there and locks do not compose what does it mean is that if you have a component small component",
    "start": "641279",
    "end": "648240"
  },
  {
    "text": "where you carefully plan your locks and then you build a larger application out of it uh",
    "start": "648240",
    "end": "653600"
  },
  {
    "text": "unless you place locks making serializing everything which makes things will be really slow",
    "start": "653600",
    "end": "660640"
  },
  {
    "text": "uh you will need to rearrange and regroup this lock it's very hard to test and it's not something you can just",
    "start": "660640",
    "end": "667279"
  },
  {
    "text": "build into every component and then magically all your locks will start operate with uh coordinate with each",
    "start": "667279",
    "end": "672640"
  },
  {
    "text": "other and the consequences of misplaced locks of course it can be uh",
    "start": "672640",
    "end": "677920"
  },
  {
    "start": "673000",
    "end": "737000"
  },
  {
    "text": "deadlocked but if uh you place them uh",
    "start": "677920",
    "end": "683120"
  },
  {
    "text": "safe safely with with too much safety then uh you will be victim of so-called",
    "start": "683120",
    "end": "689200"
  },
  {
    "text": "amdahl's law which tells you exactly what is the",
    "start": "689200",
    "end": "695120"
  },
  {
    "text": "price you pay for a non-parallelized code",
    "start": "695120",
    "end": "701519"
  },
  {
    "text": "and actually the price uh increases very very rapidly so if uh",
    "start": "701519",
    "end": "707760"
  },
  {
    "text": "only uh 40 of your code can be parallelized then you can increase your number of",
    "start": "707760",
    "end": "714000"
  },
  {
    "text": "processors by 10 and with 10 uh times more processors your performance only will increase by",
    "start": "714000",
    "end": "721120"
  },
  {
    "text": "55 56 about 50 so it's uh it really sounds strange but this is a",
    "start": "721120",
    "end": "727040"
  },
  {
    "text": "price you have to pay so if much of your code is not paralyzed then",
    "start": "727040",
    "end": "732480"
  },
  {
    "text": "there is no need to increase number of uh cpus so",
    "start": "732480",
    "end": "738079"
  },
  {
    "start": "737000",
    "end": "937000"
  },
  {
    "text": "that is also a pain point for us which led us to",
    "start": "738079",
    "end": "743360"
  },
  {
    "text": "functional programming because we were working with uh application that uh needed to uh",
    "start": "743360",
    "end": "750720"
  },
  {
    "text": "handle parallel threads and uh a lot of data in parallel",
    "start": "750720",
    "end": "757360"
  },
  {
    "text": "and uh with our current uh system we you you won't find um",
    "start": "757360",
    "end": "763120"
  },
  {
    "text": "words like lock or thread in our source code this is also partly because of exact",
    "start": "763120",
    "end": "769680"
  },
  {
    "text": "model i will come back to that but let's go move on to uh business objects",
    "start": "769680",
    "end": "775360"
  },
  {
    "text": "so uh uh this was a correct implementation as uh we saw or sort of more correct than",
    "start": "775360",
    "end": "782639"
  },
  {
    "text": "the first one but they forgot one thing we forgot visibility here so actually we need to place",
    "start": "782639",
    "end": "788399"
  },
  {
    "text": "visibility which is uh well it's a public or private of course you have to use like internal uh",
    "start": "788399",
    "end": "793680"
  },
  {
    "text": "protected but for the for the external external client of your source code it is a visible on that so you have to",
    "start": "793680",
    "end": "800800"
  },
  {
    "text": "make public everything which uh you want to be accessible and uh",
    "start": "800800",
    "end": "806399"
  },
  {
    "text": "after having worked with uh functional uh languages i i question",
    "start": "806399",
    "end": "813440"
  },
  {
    "text": "uh the poverty of available choices here",
    "start": "813440",
    "end": "818880"
  },
  {
    "text": "because uh you have some uh safe methods some something like get",
    "start": "818880",
    "end": "826880"
  },
  {
    "text": "x and y the properties but you have some sort of dangerous methods which maybe you only want them to be uh available in",
    "start": "826880",
    "end": "834720"
  },
  {
    "text": "uh some scenarios where you can edit the point can modify it otherwise you won't",
    "start": "834720",
    "end": "839760"
  },
  {
    "text": "you don't want to make it visible and then okay what how you get you you're going to achieve that",
    "start": "839760",
    "end": "845360"
  },
  {
    "text": "so you have scenario where you uh you mostly view points and also you have some scenario exceptional scenario we need to edit points",
    "start": "845360",
    "end": "851839"
  },
  {
    "text": "uh and i hope you will not go and go that path uh creating point and then editable",
    "start": "851839",
    "end": "858320"
  },
  {
    "text": "points which i inherit from that because that that's just uh in the end it will be nightmare to have something like this",
    "start": "858320",
    "end": "865519"
  },
  {
    "text": "uh so uh another alternative is to have some sort of point manager",
    "start": "865519",
    "end": "870959"
  },
  {
    "text": "so you have a point without uh any operations any methods that modify",
    "start": "870959",
    "end": "878639"
  },
  {
    "text": "it and then you have point manager which actually modifies it but this is essentially then you will abandon point",
    "start": "878639",
    "end": "884959"
  },
  {
    "text": "as a business object so all our what we said or what we used to say uh about a",
    "start": "884959",
    "end": "891040"
  },
  {
    "text": "business object that it's it's a harmony of data and operations in this case we",
    "start": "891040",
    "end": "896880"
  },
  {
    "text": "actually need to speed the things uh so this is how we do it in uh",
    "start": "896880",
    "end": "903199"
  },
  {
    "text": "language f sharp you have data separately and then we define modules uh where we and the",
    "start": "903199",
    "end": "910800"
  },
  {
    "text": "visibility of the module it uh it can be uh different for different",
    "start": "910800",
    "end": "916160"
  },
  {
    "text": "uh clients uh so here we have uh how we can increase point and then uh we",
    "start": "916160",
    "end": "923360"
  },
  {
    "text": "can have a model point update if you don't want this to be visible and uh it",
    "start": "923360",
    "end": "928560"
  },
  {
    "text": "only you need to explicitly open this uh module to uh to have this uh method",
    "start": "928560",
    "end": "934639"
  },
  {
    "text": "available that change the point uh so uh this is how we work nowadays in",
    "start": "934639",
    "end": "940560"
  },
  {
    "start": "937000",
    "end": "972000"
  },
  {
    "text": "our project and uh i uh i",
    "start": "940560",
    "end": "946160"
  },
  {
    "text": "almost completely agree with what uh geor armstrong creator of erlang said one that",
    "start": "946160",
    "end": "951839"
  },
  {
    "text": "data and operations are there they are so different animals that uh",
    "start": "951839",
    "end": "957120"
  },
  {
    "text": "it's they don't really belong uh to to the same cage so willing to separate",
    "start": "957120",
    "end": "962720"
  },
  {
    "text": "them and this is uh mostly in our project we have data as a plain data and operation them",
    "start": "962720",
    "end": "970160"
  },
  {
    "text": "placed in modules so continuing with business object",
    "start": "970160",
    "end": "976160"
  },
  {
    "start": "972000",
    "end": "1033000"
  },
  {
    "text": "so uh business object one that were introduced uh uh they were presented and still presented in universities as a",
    "start": "976160",
    "end": "983519"
  },
  {
    "text": "harmony of uh data and operations on them there is some sort of holy cow",
    "start": "983519",
    "end": "990079"
  },
  {
    "text": "everything uh cooperates peacefully and friendly and",
    "start": "990079",
    "end": "995680"
  },
  {
    "text": "in the projects where i worked specifically especially a large project",
    "start": "995680",
    "end": "1001199"
  },
  {
    "text": "where which lived for many years then i picture was more like this you have this",
    "start": "1001199",
    "end": "1007440"
  },
  {
    "text": "data and by the way it's a painting by famous russian painter ilya reppin this is a",
    "start": "1007440",
    "end": "1013279"
  },
  {
    "text": "river volga and this is around uh beginning of uh 20th century so we have",
    "start": "1013279",
    "end": "1018959"
  },
  {
    "text": "this object which actually has nothing to do with uh operations on them but they need to drag this uh operations and",
    "start": "1018959",
    "end": "1026000"
  },
  {
    "text": "but they they don't have any personal interest in that uh and to illustrate uh",
    "start": "1026000",
    "end": "1033918"
  },
  {
    "start": "1033000",
    "end": "1254000"
  },
  {
    "text": "with some examples from uh real code there is a great book which i recommend",
    "start": "1033919",
    "end": "1038959"
  },
  {
    "text": "you to read even if you don't do f sharp and don't plan to use functional programming uh who read scott larson's",
    "start": "1038959",
    "end": "1046720"
  },
  {
    "text": "book yeah few hands please read it if you can uh it's it's",
    "start": "1046720",
    "end": "1052640"
  },
  {
    "text": "really uh motivating um thought provoking and uh so",
    "start": "1052640",
    "end": "1059280"
  },
  {
    "text": "he shows using examples in f sharp uh he uses order processing as",
    "start": "1059280",
    "end": "1065039"
  },
  {
    "text": "as domain uh and he shows how can uh trace the the order from being",
    "start": "1065039",
    "end": "1070080"
  },
  {
    "text": "unvalidated to to shipped or cancel it and if we try to do something uh in c sharp",
    "start": "1070080",
    "end": "1078000"
  },
  {
    "text": "there are several options to do that but again",
    "start": "1078000",
    "end": "1083760"
  },
  {
    "text": "one of the simplest and maybe default is that you have class order which",
    "start": "1083760",
    "end": "1089520"
  },
  {
    "text": "has some properties then you have read-only message like is validated",
    "start": "1089520",
    "end": "1095679"
  },
  {
    "text": "shipped cancelled and then you have some methods validate ship and cancel and here already here",
    "start": "1095679",
    "end": "1102480"
  },
  {
    "text": "because we mix data and operations on them there is a highly subjective choice can an order",
    "start": "1102480",
    "end": "1110000"
  },
  {
    "text": "validate ship and cancel itself or should it be some other manager doing doing it outside who thinks that who",
    "start": "1110000",
    "end": "1117280"
  },
  {
    "text": "would go that path uh like it's okay to have validate ship and council in order class",
    "start": "1117280",
    "end": "1124559"
  },
  {
    "text": "no hands who would place",
    "start": "1125039",
    "end": "1130480"
  },
  {
    "text": "these methods in a different class yeah most of you uh you know i've seen both",
    "start": "1130480",
    "end": "1137919"
  },
  {
    "text": "and uh i think uh with more experience uh",
    "start": "1137919",
    "end": "1143200"
  },
  {
    "text": "developers come to this but uh you will find like if you if you look at",
    "start": "1143200",
    "end": "1148400"
  },
  {
    "text": "the code source code of the project that lived for for a few years and was maintained by a variety of",
    "start": "1148400",
    "end": "1155120"
  },
  {
    "text": "people you will find all sorts of subjective decisions about what methods",
    "start": "1155120",
    "end": "1160160"
  },
  {
    "text": "to put inside the class on what to take outside",
    "start": "1160160",
    "end": "1165360"
  },
  {
    "text": "and maybe validating ship it's a bit obvious they should it should be placed outside but there may be more",
    "start": "1165360",
    "end": "1172640"
  },
  {
    "text": "methods in question uh and if you see if you look at these two",
    "start": "1172640",
    "end": "1178160"
  },
  {
    "text": "classes actually we again we abandoned business object per se because we have",
    "start": "1178160",
    "end": "1183600"
  },
  {
    "text": "pure data and we have pure business so actually",
    "start": "1183600",
    "end": "1188799"
  },
  {
    "text": "while we're talking about op and business object but we really separated them here",
    "start": "1188799",
    "end": "1194720"
  },
  {
    "text": "and if i go back to c-sharp development",
    "start": "1194720",
    "end": "1201280"
  },
  {
    "text": "today i would probably create several classes like each a new class for for",
    "start": "1201600",
    "end": "1208400"
  },
  {
    "text": "each order processing stage like unvalidated order validated auto shipped",
    "start": "1208400",
    "end": "1213600"
  },
  {
    "text": "order and so on and then i will create uh the managers which take input of one",
    "start": "1213600",
    "end": "1221280"
  },
  {
    "text": "class and return inputs of another class so i can do this pipelined uh data processing who who who would",
    "start": "1221280",
    "end": "1228080"
  },
  {
    "text": "consider that path to have uh small classes for for each order processing",
    "start": "1228080",
    "end": "1235120"
  },
  {
    "text": "yeah sometimes who would who think that one order class uh which fits all stage processing will",
    "start": "1235120",
    "end": "1241679"
  },
  {
    "text": "be sufficient yeah also some maybe fewer hands but also hands",
    "start": "1241679",
    "end": "1247280"
  },
  {
    "text": "yeah i i'm biased because i've been to uh f sharp uh and functional programming",
    "start": "1247280",
    "end": "1254480"
  },
  {
    "start": "1254000",
    "end": "1303000"
  },
  {
    "text": "where uh what we do typically we have very small classes where types",
    "start": "1254480",
    "end": "1260159"
  },
  {
    "text": "these are called record type and uh uh",
    "start": "1260159",
    "end": "1265280"
  },
  {
    "text": "so we for each processing stage we have uh its own uh",
    "start": "1265280",
    "end": "1271039"
  },
  {
    "text": "type with just data that are available that make sense on this stage then we",
    "start": "1271039",
    "end": "1276559"
  },
  {
    "text": "have module for order processing which uh transform this data so finally",
    "start": "1276559",
    "end": "1282640"
  },
  {
    "text": "the order processing workflow can be written like this so it",
    "start": "1282640",
    "end": "1287760"
  },
  {
    "text": "can be understood actually even by non-technical people so we have uh we create some order then we pipeline it to",
    "start": "1287760",
    "end": "1294400"
  },
  {
    "text": "next stage validate order price order and ship order and there are all different types on each",
    "start": "1294400",
    "end": "1300880"
  },
  {
    "text": "stage again uh with uh you see it's quite compact code and it's",
    "start": "1300880",
    "end": "1307280"
  },
  {
    "start": "1303000",
    "end": "1457000"
  },
  {
    "text": "a sort of default choice which comes in mind and that sort of thing that that works best",
    "start": "1307280",
    "end": "1313600"
  },
  {
    "text": "another thing which uh i think is quite important i didn't realize how important",
    "start": "1313600",
    "end": "1319360"
  },
  {
    "text": "it it is until i started uh writing f sharp it's uh so-called algebraic data types you have uh",
    "start": "1319360",
    "end": "1326480"
  },
  {
    "text": "record types in fsharp which are very similar to c-sharp uh classes or like new nc news",
    "start": "1326480",
    "end": "1333280"
  },
  {
    "text": "sharp also records but uh you also have uh",
    "start": "1333280",
    "end": "1338400"
  },
  {
    "text": "um so this is first type sorry i'm returned back yeah so these are so",
    "start": "1338400",
    "end": "1344799"
  },
  {
    "text": "so-called product types because it's it's a product of different properties and",
    "start": "1344799",
    "end": "1350159"
  },
  {
    "text": "then you have some uh so-called sum types it's either or",
    "start": "1350159",
    "end": "1355440"
  },
  {
    "text": "payment uh planning sources either payment card or bank account you can't do uh such a easy",
    "start": "1355440",
    "end": "1362880"
  },
  {
    "text": "uh expression of some types in c sharp or job you need to you will need to start",
    "start": "1362880",
    "end": "1369200"
  },
  {
    "text": "using some interfaces but it's it's really makes it very uh",
    "start": "1369200",
    "end": "1374960"
  },
  {
    "text": "compact dsls where you can uh describe your domain in a relatively simple form",
    "start": "1374960",
    "end": "1381440"
  },
  {
    "text": "which will be understood to to everyone uh",
    "start": "1381440",
    "end": "1386720"
  },
  {
    "text": "one other thing that uh off is often mentioned uh by people who start uh working with",
    "start": "1386720",
    "end": "1393280"
  },
  {
    "text": "function programming and that uh in functional languages typically you don't work with nodes you have option you have",
    "start": "1393280",
    "end": "1399360"
  },
  {
    "text": "uh maybe various uh names but it's the same it's a sort of optional type what uh",
    "start": "1399360",
    "end": "1407039"
  },
  {
    "text": "i find and we saw in our project that just",
    "start": "1407039",
    "end": "1412559"
  },
  {
    "text": "mechanical switch from news to options can be almost as bad because",
    "start": "1412640",
    "end": "1418480"
  },
  {
    "text": "the problem is news often they represent some",
    "start": "1418880",
    "end": "1424000"
  },
  {
    "text": "design flows so why should be new here if you have a user that hasn't fully",
    "start": "1424080",
    "end": "1430240"
  },
  {
    "text": "registered why do we have same type or registered non-registered users let's have let's split them unregistered user",
    "start": "1430240",
    "end": "1436720"
  },
  {
    "text": "without name and a registered user with a name something like that so we every",
    "start": "1436720",
    "end": "1443919"
  },
  {
    "text": "time we we work with optional types we actually try to analyze maybe we need to split our scenarios and then we will",
    "start": "1443919",
    "end": "1450720"
  },
  {
    "text": "have more types uh but more strict more tight uh domain",
    "start": "1450720",
    "end": "1456240"
  },
  {
    "text": "model and there is a great uh",
    "start": "1456240",
    "end": "1461600"
  },
  {
    "start": "1457000",
    "end": "1548000"
  },
  {
    "text": "blog post actually which has been popular popularized by many speakers and developers synthetic by jaron minsky but",
    "start": "1461600",
    "end": "1468240"
  },
  {
    "text": "make a legal state underpresentable and this is actually about news and options so you should uh uh",
    "start": "1468240",
    "end": "1475120"
  },
  {
    "text": "not you should only have things that it's possible to combine in it in each",
    "start": "1475120",
    "end": "1481440"
  },
  {
    "text": "uh processing uh stage and you should not leave some outside knowledge of what",
    "start": "1481440",
    "end": "1488400"
  },
  {
    "text": "data compatible what data can be mixed together what not everything which uh",
    "start": "1488400",
    "end": "1496159"
  },
  {
    "text": "you can mix with valid types should be possible what not possible shouldn't be",
    "start": "1496159",
    "end": "1501760"
  },
  {
    "text": "representable and algebraic data types are very good at that uh so yeah the option values of course we",
    "start": "1501760",
    "end": "1508640"
  },
  {
    "text": "can't live without optional values so when we read things from database when we get things from external services",
    "start": "1508640",
    "end": "1514000"
  },
  {
    "text": "it's it's it's fine we can't live without it but as long as we uh",
    "start": "1514000",
    "end": "1519360"
  },
  {
    "text": "import them into our domain then we should be very strict about what is possible and what is not and if you",
    "start": "1519360",
    "end": "1525200"
  },
  {
    "text": "uh want to hear about more reasoning about uh why",
    "start": "1525200",
    "end": "1531440"
  },
  {
    "text": "uh option you should be careful about optional types there's a great talk by uh",
    "start": "1531440",
    "end": "1536880"
  },
  {
    "text": "rich he's a creator of closure language and it's a one-hour talk which is called maybe not actually",
    "start": "1536880",
    "end": "1543520"
  },
  {
    "text": "he attacks uh this uh non-mandatory uh data in our domain",
    "start": "1543520",
    "end": "1549360"
  },
  {
    "start": "1548000",
    "end": "1737000"
  },
  {
    "text": "so but uh can't we really adopt everything uh",
    "start": "1549360",
    "end": "1554720"
  },
  {
    "text": "uh fb style in op language like c sharp or java",
    "start": "1554720",
    "end": "1561840"
  },
  {
    "text": "and uh what you will see uh that more and more",
    "start": "1561840",
    "end": "1566880"
  },
  {
    "text": "traditional object-oriented languages they present themselves as multi-paradigm you will find these",
    "start": "1566880",
    "end": "1572400"
  },
  {
    "text": "statements about java being becoming multi-paradigm language uh kotlin c-sharp nowadays even",
    "start": "1572400",
    "end": "1579679"
  },
  {
    "text": "c plus plus a couple of years ago on c plus plus uh conference there was a talk by phil nash",
    "start": "1579679",
    "end": "1587679"
  },
  {
    "text": "uh about object oriented considered harmful imagine this talk 20 years ago on a",
    "start": "1587679",
    "end": "1593760"
  },
  {
    "text": "simple plus conference it's a blasphemy so it just wasn't possible at all and",
    "start": "1593760",
    "end": "1599919"
  },
  {
    "text": "what he presented in his talk this all well known from functional",
    "start": "1599919",
    "end": "1607840"
  },
  {
    "text": "programming area persistent data structure monetic operations functional functioning composable algorithms so",
    "start": "1607840",
    "end": "1614080"
  },
  {
    "text": "this is pi using of of pipelines so uh mainstream op languages actually go",
    "start": "1614080",
    "end": "1620480"
  },
  {
    "text": "that path so it's a very good and valid questions why can't we just stay with c-sharp or java and do things",
    "start": "1620480",
    "end": "1627919"
  },
  {
    "text": "in a hybrid way mixing object-oriented",
    "start": "1627919",
    "end": "1634240"
  },
  {
    "text": "principles with functional and of course we can but",
    "start": "1634240",
    "end": "1639279"
  },
  {
    "text": "uh this was uh uh from short tweeted this uh uh",
    "start": "1639279",
    "end": "1644720"
  },
  {
    "text": "discussion uh the it was uh it was uh after a c-sharp got another uh",
    "start": "1644720",
    "end": "1651200"
  },
  {
    "text": "feature from uh f sharp and then one developer uh a bit uh i'm happy",
    "start": "1651200",
    "end": "1657440"
  },
  {
    "text": "about it that why why import all this to uh f sharp and then he got a uh answer",
    "start": "1657440",
    "end": "1662480"
  },
  {
    "text": "from matt starkson who's he's one of lead c sharp uh designers who actually he is responsible for many of these new",
    "start": "1662480",
    "end": "1670240"
  },
  {
    "text": "features of c-sharp and then uh he said that we do our best to add this",
    "start": "1670240",
    "end": "1675679"
  },
  {
    "text": "ffb feature seamlessly to c sharp and make them first class that said if you want the full function experience f",
    "start": "1675679",
    "end": "1681440"
  },
  {
    "text": "sharp is a great choice and coming back to this",
    "start": "1681440",
    "end": "1687200"
  },
  {
    "text": "metrics about that developers",
    "start": "1687200",
    "end": "1692559"
  },
  {
    "text": "living shorter lives in teams that lines of code i'd say that uh if you really want your code to be succinct and you",
    "start": "1692559",
    "end": "1700159"
  },
  {
    "text": "you lean towards uh functional programming you you really interest in that and you you think it uh it",
    "start": "1700159",
    "end": "1706320"
  },
  {
    "text": "eliminates some of your pain points you can try uh going that way that full way and one",
    "start": "1706320",
    "end": "1712720"
  },
  {
    "text": "important um uh of course the reason is that mutability so uh c sharp java they",
    "start": "1712720",
    "end": "1718880"
  },
  {
    "text": "will always be mutable by default depending on how important uh for you some parallelization",
    "start": "1718880",
    "end": "1725279"
  },
  {
    "text": "safety of data get rid of logs mutability can be one of",
    "start": "1725279",
    "end": "1730960"
  },
  {
    "text": "the factors when choosing what language to use",
    "start": "1730960",
    "end": "1736000"
  },
  {
    "start": "1737000",
    "end": "1830000"
  },
  {
    "text": "and uh what uh also i find it's important to add when",
    "start": "1737039",
    "end": "1742640"
  },
  {
    "text": "we talk about uh object uh oriented uh languages",
    "start": "1742640",
    "end": "1747760"
  },
  {
    "text": "it's a it's a funny thing i think uh alan k he is also speaking this conference correct",
    "start": "1747760",
    "end": "1753760"
  },
  {
    "text": "yeah yeah so this is awesomeness go to so some legendary speakers you can find them here",
    "start": "1753760",
    "end": "1759679"
  },
  {
    "text": "so uh he is considered to be inventor of uh",
    "start": "1759679",
    "end": "1765120"
  },
  {
    "text": "object oriented term and what he said that when he",
    "start": "1765120",
    "end": "1770320"
  },
  {
    "text": "invented uh op he didn't have c plus in mind and when he says so we can say that",
    "start": "1770320",
    "end": "1775840"
  },
  {
    "text": "also he didn't have in mind neither c sharp or java because they they",
    "start": "1775840",
    "end": "1782159"
  },
  {
    "text": "they follow at least in op part principles of c plus plus",
    "start": "1782159",
    "end": "1789760"
  },
  {
    "text": "and what he had in mind when he invented op it was most a mostly",
    "start": "1789760",
    "end": "1795600"
  },
  {
    "text": "uh message based uh communication between objects so uh uh and so he had in mind actually",
    "start": "1795600",
    "end": "1803679"
  },
  {
    "text": "more or maybe closer match to real world because uh this is how actually things",
    "start": "1803679",
    "end": "1809600"
  },
  {
    "text": "happen in the real world so we we get uh using our receptors messages from the outside",
    "start": "1809600",
    "end": "1817200"
  },
  {
    "text": "world and we respond to them and if you look at how uh traditional classical op",
    "start": "1817200",
    "end": "1823679"
  },
  {
    "text": "languages implement methods then uh um it's it's somewhat strange to me that",
    "start": "1823679",
    "end": "1830799"
  },
  {
    "start": "1830000",
    "end": "1936000"
  },
  {
    "text": "i find it very fascinating when i was learning c plus plus it was even before c sharp",
    "start": "1830799",
    "end": "1836720"
  },
  {
    "text": "so i found oh this is so nice it's uh it's so understandable you have a class",
    "start": "1836720",
    "end": "1842880"
  },
  {
    "text": "dog which inherits from mammal okay this part of inheritance nice dog is mammal that it has name and",
    "start": "1842880",
    "end": "1849360"
  },
  {
    "text": "then you have a void bark method so actually i can call this method and the dog will bark",
    "start": "1849360",
    "end": "1855679"
  },
  {
    "text": "whoop or depending on who the dog buys some from which country it will bark maybe differently but what",
    "start": "1855679",
    "end": "1862320"
  },
  {
    "text": "we're getting actually here if we look at how this all works this is what kind of uh",
    "start": "1862320",
    "end": "1868799"
  },
  {
    "text": "model we have so dog doesn't really bark by itself we have to uh actually draw",
    "start": "1868799",
    "end": "1875840"
  },
  {
    "text": "some strings so it's a client who barked the dog uh isn't it strange because when i look",
    "start": "1875840",
    "end": "1882159"
  },
  {
    "text": "at the whole this concept of uh uh how op languages uh work is that uh",
    "start": "1882159",
    "end": "1889200"
  },
  {
    "text": "it finds me really strange that i was really fascinated and find that reflecting the real world because it doesn't reflect a word i have a dog",
    "start": "1889200",
    "end": "1896480"
  },
  {
    "text": "and uh well maybe if i say bark he will bark but if i say don't bark no it's not",
    "start": "1896480",
    "end": "1902720"
  },
  {
    "text": "because of me he will he will get message he will get his own conclusions uh out of it so uh",
    "start": "1902720",
    "end": "1910559"
  },
  {
    "text": "the entities the physical entities say they can get our messages but they run",
    "start": "1910559",
    "end": "1915919"
  },
  {
    "text": "process them and they make their own decisions which and they may respond or may not respond to what uh what we tell",
    "start": "1915919",
    "end": "1921440"
  },
  {
    "text": "them uh so this why i think is quite artificial and not representable with",
    "start": "1921440",
    "end": "1927440"
  },
  {
    "text": "respect to real world and if you look at uh op how alan k",
    "start": "1927440",
    "end": "1932799"
  },
  {
    "text": "meant it and uh some people say that actor model actually it's op done right so you have actors",
    "start": "1932799",
    "end": "1940240"
  },
  {
    "start": "1936000",
    "end": "2024000"
  },
  {
    "text": "which the only way to communicate with actors is uh to",
    "start": "1940240",
    "end": "1945760"
  },
  {
    "text": "send them messages and actors are very simple they're single threaded they get your message and they",
    "start": "1945760",
    "end": "1952559"
  },
  {
    "text": "will think what to do with it they may send some message back they may send message to other actors but they have",
    "start": "1952559",
    "end": "1959279"
  },
  {
    "text": "sole responsibility of what they will do with external information",
    "start": "1959279",
    "end": "1965919"
  },
  {
    "text": "and for us actually it was a very great combination of using",
    "start": "1965919",
    "end": "1971519"
  },
  {
    "text": "functional languages at a smaller scope where we have",
    "start": "1971519",
    "end": "1976799"
  },
  {
    "text": "functional uh transformations of data within the thread and if we want to",
    "start": "1976799",
    "end": "1983200"
  },
  {
    "text": "uh arrange communication between objects without thinking about starting threads",
    "start": "1983200",
    "end": "1990360"
  },
  {
    "text": "[Music] coordinating threads then we use actors that",
    "start": "1990360",
    "end": "1997120"
  },
  {
    "text": "exchange message one another and it's extremely performant because it's reactive software so when actor is sleeping which",
    "start": "1997120",
    "end": "2003360"
  },
  {
    "text": "actor doesn't get message it's just sleeping so it doesn't consume cpu and you can uh say millions of messages a",
    "start": "2003360",
    "end": "2010159"
  },
  {
    "text": "second between uh two actors and uh like actor with very little code consume just",
    "start": "2010159",
    "end": "2017120"
  },
  {
    "text": "few hundred bytes of memory so this is how we uh",
    "start": "2017120",
    "end": "2023039"
  },
  {
    "text": "how we do it so uh to summarize uh what we uh",
    "start": "2023039",
    "end": "2030080"
  },
  {
    "start": "2024000",
    "end": "2154000"
  },
  {
    "text": "came to after using uh op for uh i i was using it for a couple decades",
    "start": "2030080",
    "end": "2036880"
  },
  {
    "text": "some of my colleagues uh used it um shorter time they are younger uh but",
    "start": "2036880",
    "end": "2042080"
  },
  {
    "text": "what we uh doing now in our project first uh we appreciate using algebraic data types",
    "start": "2042080",
    "end": "2047919"
  },
  {
    "text": "because they keep our uh domain model tight",
    "start": "2047919",
    "end": "2052960"
  },
  {
    "text": "compact and uh relatively easy to understand even for like for newcomers who just uh coming to",
    "start": "2052960",
    "end": "2060079"
  },
  {
    "text": "the project and that's that's important to care about inexperienced developer who will replace",
    "start": "2060079",
    "end": "2065679"
  },
  {
    "text": "you uh then uh we are quite uh critical to use of",
    "start": "2065679",
    "end": "2072158"
  },
  {
    "text": "nulls and options so this uh principle by jaren minsk about making illegal states",
    "start": "2072159",
    "end": "2078240"
  },
  {
    "text": "unrepresentable uh it's quite important and you can follow this principle no matter where you whether you do it in f",
    "start": "2078240",
    "end": "2084398"
  },
  {
    "text": "sharp c sharp or c plus plus any language this is something which i highly recommend to to use",
    "start": "2084399",
    "end": "2092240"
  },
  {
    "text": "then we use uh modules uh where we place our operations and uh visibility of these",
    "start": "2092240",
    "end": "2098400"
  },
  {
    "text": "modules actually it's a visibility of operations so uh we uh",
    "start": "2098400",
    "end": "2103839"
  },
  {
    "text": "we don't expose uh unsafe uh operations uh without needs so",
    "start": "2103839",
    "end": "2112320"
  },
  {
    "text": "we don't have this uh quite binary public private visit visibility uh",
    "start": "2112320",
    "end": "2117920"
  },
  {
    "text": "classification between uh operations and uh this is not a",
    "start": "2117920",
    "end": "2124240"
  },
  {
    "text": "part of fb but it it really plays very well very well with functional programming",
    "start": "2124240",
    "end": "2129760"
  },
  {
    "text": "communication between objects uh that are based on uh the actor model so this is uh how we do we use using",
    "start": "2129760",
    "end": "2136400"
  },
  {
    "text": "akka.net uh which is part of akka from java world",
    "start": "2136400",
    "end": "2143839"
  },
  {
    "text": "java and scholar um so that's probably",
    "start": "2143839",
    "end": "2150079"
  },
  {
    "text": "the main summary from my talk uh",
    "start": "2150079",
    "end": "2155280"
  },
  {
    "start": "2154000",
    "end": "2214000"
  },
  {
    "text": "and for our stakeholders i think uh what uh i don't have any metrics unlike",
    "start": "2155280",
    "end": "2161440"
  },
  {
    "text": "like robert small tribe who had concrete metrics about uh software approach i don't have any metrics which would show that how",
    "start": "2161440",
    "end": "2167359"
  },
  {
    "text": "it shortened path uh to production but uh we and our",
    "start": "2167359",
    "end": "2173200"
  },
  {
    "text": "stakeholders our uh management and people around us i think we observe that",
    "start": "2173200",
    "end": "2179599"
  },
  {
    "text": "uh we quite uh responsive to quick changes and uh code is much more",
    "start": "2179599",
    "end": "2186160"
  },
  {
    "text": "compact and uh in in fsharp typically we make some changes uh you may spend few hours",
    "start": "2186160",
    "end": "2193119"
  },
  {
    "text": "to make new things compile but after it compiles it just runs out of the box it doesn't need uh say mean that you need",
    "start": "2193119",
    "end": "2200160"
  },
  {
    "text": "to don't need to write units because you need to write unit tests but what we observe regularly that it's so strong",
    "start": "2200160",
    "end": "2206560"
  },
  {
    "text": "type checking that if you uh write your types properly then you guard it uh",
    "start": "2206560",
    "end": "2212640"
  },
  {
    "text": "very well so uh yeah with this i think we have uh some",
    "start": "2212640",
    "end": "2218640"
  },
  {
    "start": "2214000",
    "end": "2241000"
  },
  {
    "text": "time for free questions if you need to uh contact me you can do it by these",
    "start": "2218640",
    "end": "2224720"
  },
  {
    "text": "communication channels and of course don't forget to vote for this session in the go to app",
    "start": "2224720",
    "end": "2233240"
  }
]