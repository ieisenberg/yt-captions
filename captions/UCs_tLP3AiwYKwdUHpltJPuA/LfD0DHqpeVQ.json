[
  {
    "text": "hey everyone so I'm uh I'm Jacob and I",
    "start": "5560",
    "end": "8120"
  },
  {
    "text": "work at ambata I'm going to be talking",
    "start": "8120",
    "end": "9840"
  },
  {
    "text": "about property testing and shrinking so",
    "start": "9840",
    "end": "12920"
  },
  {
    "text": "how many people have used quick check or",
    "start": "12920",
    "end": "14960"
  },
  {
    "text": "some sort of property testing library",
    "start": "14960",
    "end": "17600"
  },
  {
    "text": "and how many people here invented quick",
    "start": "17600",
    "end": "19720"
  },
  {
    "text": "check just",
    "start": "19720",
    "end": "22920"
  },
  {
    "text": "one I absolutely love Quick Check John",
    "start": "24279",
    "end": "27320"
  },
  {
    "text": "thank you thank you for inventing it",
    "start": "27320",
    "end": "28960"
  },
  {
    "text": "it's absolutely transform",
    "start": "28960",
    "end": "30599"
  },
  {
    "text": "the way that I go about writing robot",
    "start": "30599",
    "end": "32920"
  },
  {
    "text": "software and I just wouldn't be able to",
    "start": "32920",
    "end": "35280"
  },
  {
    "text": "do my job without it and one of my",
    "start": "35280",
    "end": "38360"
  },
  {
    "text": "favorite things about quick check is uh",
    "start": "38360",
    "end": "41360"
  },
  {
    "text": "shrinking now what is shrinking we heard",
    "start": "41360",
    "end": "43680"
  },
  {
    "text": "a little bit about it in the the keynote",
    "start": "43680",
    "end": "46160"
  },
  {
    "text": "and I'm going to show you a a classic",
    "start": "46160",
    "end": "48399"
  },
  {
    "text": "sort of quick check shrinking example",
    "start": "48399",
    "end": "51640"
  },
  {
    "text": "right now so here we've got a a property",
    "start": "51640",
    "end": "54920"
  },
  {
    "text": "who want to check that if we concatenate",
    "start": "54920",
    "end": "57719"
  },
  {
    "text": "two lists and reverse that that should",
    "start": "57719",
    "end": "59600"
  },
  {
    "text": "be the same as reversing x's and then",
    "start": "59600",
    "end": "61840"
  },
  {
    "text": "adding that to the reverse of y's now",
    "start": "61840",
    "end": "63320"
  },
  {
    "text": "that's obviously not true um so we would",
    "start": "63320",
    "end": "67479"
  },
  {
    "text": "expect to get some sort of failure and",
    "start": "67479",
    "end": "68759"
  },
  {
    "text": "if you put this into Quick Check it'll",
    "start": "68759",
    "end": "70560"
  },
  {
    "text": "give you some sort of counter example",
    "start": "70560",
    "end": "73000"
  },
  {
    "text": "well it won't give you this counter",
    "start": "73000",
    "end": "74119"
  },
  {
    "text": "example because this is a little bit",
    "start": "74119",
    "end": "75600"
  },
  {
    "text": "large and hard to understand so uh what",
    "start": "75600",
    "end": "79799"
  },
  {
    "text": "it would do instead is shrink this",
    "start": "79799",
    "end": "81960"
  },
  {
    "text": "counter example to a minimal one so if",
    "start": "81960",
    "end": "85520"
  },
  {
    "text": "we substitute that into our into our",
    "start": "85520",
    "end": "87920"
  },
  {
    "text": "equation then we'll see that this is",
    "start": "87920",
    "end": "89960"
  },
  {
    "text": "obviously not true because if we reverse",
    "start": "89960",
    "end": "91640"
  },
  {
    "text": "a Singleton list with zero and reverse a",
    "start": "91640",
    "end": "94640"
  },
  {
    "text": "Singleton list one um that's just going",
    "start": "94640",
    "end": "97040"
  },
  {
    "text": "to give us zero and one when we add them",
    "start": "97040",
    "end": "99200"
  },
  {
    "text": "together and the uh the one at the top",
    "start": "99200",
    "end": "102320"
  },
  {
    "text": "will give you one and zero so that's",
    "start": "102320",
    "end": "104719"
  },
  {
    "text": "obviously not",
    "start": "104719",
    "end": "106119"
  },
  {
    "text": "true now there's a few different ways",
    "start": "106119",
    "end": "109719"
  },
  {
    "text": "that you could go about implementing",
    "start": "109719",
    "end": "111320"
  },
  {
    "text": "this",
    "start": "111320",
    "end": "113439"
  },
  {
    "text": "shrinking the first of which I'm going",
    "start": "113960",
    "end": "115920"
  },
  {
    "text": "to call type directed",
    "start": "115920",
    "end": "117520"
  },
  {
    "text": "shrinking so that's used by the h",
    "start": "117520",
    "end": "120000"
  },
  {
    "text": "version of Quick Check um and it's",
    "start": "120000",
    "end": "122600"
  },
  {
    "text": "derivatives so uh property testing",
    "start": "122600",
    "end": "126399"
  },
  {
    "text": "libraries like FS Che for f uh scalar",
    "start": "126399",
    "end": "129520"
  },
  {
    "text": "check scalar props the rust version of",
    "start": "129520",
    "end": "131280"
  },
  {
    "text": "Quick Check I'm sure there's there's",
    "start": "131280",
    "end": "132800"
  },
  {
    "text": "like many many more uh it's usually sort",
    "start": "132800",
    "end": "135400"
  },
  {
    "text": "of uh statically typed languages that do",
    "start": "135400",
    "end": "137480"
  },
  {
    "text": "it this way so what do I mean by type",
    "start": "137480",
    "end": "139640"
  },
  {
    "text": "directed",
    "start": "139640",
    "end": "140800"
  },
  {
    "text": "shrinking if we look at this property in",
    "start": "140800",
    "end": "143400"
  },
  {
    "text": "uh the hle version of quick check you'll",
    "start": "143400",
    "end": "146480"
  },
  {
    "text": "see that we have um we somehow get get",
    "start": "146480",
    "end": "151400"
  },
  {
    "text": "the values for x's and y's kind of",
    "start": "151400",
    "end": "153120"
  },
  {
    "text": "magically out of the air so it's it's",
    "start": "153120",
    "end": "155440"
  },
  {
    "text": "the types that are are directing the",
    "start": "155440",
    "end": "158760"
  },
  {
    "text": "input generation and they also control",
    "start": "158760",
    "end": "161360"
  },
  {
    "text": "how shrinking works so how does this",
    "start": "161360",
    "end": "163440"
  },
  {
    "text": "work well in high school there's an",
    "start": "163440",
    "end": "166480"
  },
  {
    "text": "arbitrary type class which you can",
    "start": "166480",
    "end": "168879"
  },
  {
    "text": "Implement some instances for there's an",
    "start": "168879",
    "end": "170440"
  },
  {
    "text": "instance for",
    "start": "170440",
    "end": "172560"
  },
  {
    "text": "integer and there's an instance for list",
    "start": "172560",
    "end": "175480"
  },
  {
    "text": "and uh it's interesting to note and",
    "start": "175480",
    "end": "178120"
  },
  {
    "text": "maybe we'll come back to it later that",
    "start": "178120",
    "end": "179599"
  },
  {
    "text": "the default shrink is just returning an",
    "start": "179599",
    "end": "181720"
  },
  {
    "text": "empty",
    "start": "181720",
    "end": "183280"
  },
  {
    "text": "list um and it's sort of interesting I",
    "start": "183280",
    "end": "186599"
  },
  {
    "text": "think that this approach is also taken",
    "start": "186599",
    "end": "189040"
  },
  {
    "text": "in uh in languages that don't",
    "start": "189040",
    "end": "192480"
  },
  {
    "text": "necessarily have any kind of",
    "start": "192480",
    "end": "194159"
  },
  {
    "text": "implicit resolution infrastructure and",
    "start": "194159",
    "end": "196640"
  },
  {
    "text": "they just simulate it with dependency",
    "start": "196640",
    "end": "198519"
  },
  {
    "text": "injection or something like that so it's",
    "start": "198519",
    "end": "201280"
  },
  {
    "text": "interesting to not so that's type",
    "start": "201280",
    "end": "202440"
  },
  {
    "text": "directed",
    "start": "202440",
    "end": "203560"
  },
  {
    "text": "shrinking the other um the way that you",
    "start": "203560",
    "end": "206840"
  },
  {
    "text": "can do shrinking is what I'm going to",
    "start": "206840",
    "end": "208400"
  },
  {
    "text": "call Integrated shrinking so cuix",
    "start": "208400",
    "end": "211000"
  },
  {
    "text": "Airline quick check uh is uh uses what I",
    "start": "211000",
    "end": "214680"
  },
  {
    "text": "would call Integrated shrinking test.",
    "start": "214680",
    "end": "216680"
  },
  {
    "text": "check enclosure uh there's a library in",
    "start": "216680",
    "end": "219720"
  },
  {
    "text": "Python called hypothesis which does it",
    "start": "219720",
    "end": "221360"
  },
  {
    "text": "this way and I recently found out that",
    "start": "221360",
    "end": "222920"
  },
  {
    "text": "Elm test fuzzers also use integrated",
    "start": "222920",
    "end": "225879"
  },
  {
    "text": "shrinking seems to be popular with",
    "start": "225879",
    "end": "227720"
  },
  {
    "text": "languages that are uni types like",
    "start": "227720",
    "end": "229879"
  },
  {
    "text": "Dynamic languages and uh also languages",
    "start": "229879",
    "end": "232959"
  },
  {
    "text": "that don't have any kind of implicit",
    "start": "232959",
    "end": "236439"
  },
  {
    "text": "resolution so here's what the example",
    "start": "236680",
    "end": "238760"
  },
  {
    "text": "looks like in earling",
    "start": "238760",
    "end": "240480"
  },
  {
    "text": "um you can see here that we're building",
    "start": "240480",
    "end": "243400"
  },
  {
    "text": "up the generator and the shrinker using",
    "start": "243400",
    "end": "245319"
  },
  {
    "text": "combinators so here we've got list and",
    "start": "245319",
    "end": "247400"
  },
  {
    "text": "we want to generate an end and so",
    "start": "247400",
    "end": "249799"
  },
  {
    "text": "somehow the shrinking capabilities need",
    "start": "249799",
    "end": "251360"
  },
  {
    "text": "to be bundled into to the the generator",
    "start": "251360",
    "end": "253319"
  },
  {
    "text": "that you're building",
    "start": "253319",
    "end": "255840"
  },
  {
    "text": "up so now that we've um we've seen the",
    "start": "258079",
    "end": "262400"
  },
  {
    "text": "what I'll call the two different ways of",
    "start": "262400",
    "end": "263840"
  },
  {
    "text": "shrinking I want to talk about some of",
    "start": "263840",
    "end": "266320"
  },
  {
    "text": "the challenges that we that I have",
    "start": "266320",
    "end": "270400"
  },
  {
    "text": "experienced with type directed drinking",
    "start": "270400",
    "end": "272039"
  },
  {
    "text": "so at ambata we're very heavy uses of",
    "start": "272039",
    "end": "274800"
  },
  {
    "text": "Quick Check and property based testing",
    "start": "274800",
    "end": "277600"
  },
  {
    "text": "and we consider property test to be just",
    "start": "277600",
    "end": "279639"
  },
  {
    "text": "as important as types when it comes to",
    "start": "279639",
    "end": "281639"
  },
  {
    "text": "building robust",
    "start": "281639",
    "end": "283080"
  },
  {
    "text": "software and uh as such we've come to uh",
    "start": "283080",
    "end": "286520"
  },
  {
    "text": "over time to understand the the",
    "start": "286520",
    "end": "288960"
  },
  {
    "text": "limitations uh so let's let's look at an",
    "start": "288960",
    "end": "291479"
  },
  {
    "text": "example and I'll use that to to motivate",
    "start": "291479",
    "end": "293919"
  },
  {
    "text": "um these",
    "start": "293919",
    "end": "296120"
  },
  {
    "text": "challenges so here we we've got some",
    "start": "296120",
    "end": "300199"
  },
  {
    "text": "data types and uh we've got some",
    "start": "300199",
    "end": "302479"
  },
  {
    "text": "combinators so we've got a a name for an",
    "start": "302479",
    "end": "304759"
  },
  {
    "text": "order item and some sort of price uh",
    "start": "304759",
    "end": "307720"
  },
  {
    "text": "line item for the order and an order and",
    "start": "307720",
    "end": "309960"
  },
  {
    "text": "then we want to check this property um",
    "start": "309960",
    "end": "313039"
  },
  {
    "text": "that when we total up the cost of of two",
    "start": "313039",
    "end": "316320"
  },
  {
    "text": "orders that that would be the same as",
    "start": "316320",
    "end": "318400"
  },
  {
    "text": "merging the orders and and totaling up",
    "start": "318400",
    "end": "320600"
  },
  {
    "text": "the",
    "start": "320600",
    "end": "321319"
  },
  {
    "text": "cost so how do we write arbitraries for",
    "start": "321319",
    "end": "323479"
  },
  {
    "text": "these",
    "start": "323479",
    "end": "324479"
  },
  {
    "text": "types um I'm going to skip the shrinking",
    "start": "324479",
    "end": "326880"
  },
  {
    "text": "part just for the the moment so um",
    "start": "326880",
    "end": "331000"
  },
  {
    "text": "for the the name we might want to just",
    "start": "331000",
    "end": "332960"
  },
  {
    "text": "generate some some random names here for",
    "start": "332960",
    "end": "335840"
  },
  {
    "text": "the the price we'll just generate some",
    "start": "335840",
    "end": "338680"
  },
  {
    "text": "number between one and 100 and then for",
    "start": "338680",
    "end": "341680"
  },
  {
    "text": "item in order we're just going to use",
    "start": "341680",
    "end": "343720"
  },
  {
    "text": "the implicit resolution to pull a a",
    "start": "343720",
    "end": "346440"
  },
  {
    "text": "generator for uh for those",
    "start": "346440",
    "end": "349520"
  },
  {
    "text": "types so if we come back to our property",
    "start": "349520",
    "end": "352240"
  },
  {
    "text": "and we try and run it we get a test",
    "start": "352240",
    "end": "354440"
  },
  {
    "text": "failure um and why did it fail well it's",
    "start": "354440",
    "end": "358440"
  },
  {
    "text": "not so obvious from this example because",
    "start": "358440",
    "end": "360280"
  },
  {
    "text": "we didn't write any",
    "start": "360280",
    "end": "361400"
  },
  {
    "text": "shrinks um so if I show you the merge",
    "start": "361400",
    "end": "363639"
  },
  {
    "text": "function it'll be more obvious that",
    "start": "363639",
    "end": "365680"
  },
  {
    "text": "we're in business so we want to make a",
    "start": "365680",
    "end": "367400"
  },
  {
    "text": "profit so anytime there's items which",
    "start": "367400",
    "end": "369240"
  },
  {
    "text": "cost more than $50 then we charge a $1",
    "start": "369240",
    "end": "371599"
  },
  {
    "text": "processing fee so that's why the that's",
    "start": "371599",
    "end": "374280"
  },
  {
    "text": "why it fails but the the test doesn't",
    "start": "374280",
    "end": "375960"
  },
  {
    "text": "really give us uh the counter example",
    "start": "375960",
    "end": "378199"
  },
  {
    "text": "doesn't really give us much information",
    "start": "378199",
    "end": "379680"
  },
  {
    "text": "about why that's the",
    "start": "379680",
    "end": "381400"
  },
  {
    "text": "case so um let's uh let's go and",
    "start": "381400",
    "end": "384960"
  },
  {
    "text": "implement this shrink part of the",
    "start": "384960",
    "end": "388120"
  },
  {
    "text": "arbitary type class",
    "start": "388120",
    "end": "391560"
  },
  {
    "text": "okay so if we come to um to our name",
    "start": "395360",
    "end": "397919"
  },
  {
    "text": "example and Implement drink for this uh",
    "start": "397919",
    "end": "401120"
  },
  {
    "text": "you might think this is a bit bit over",
    "start": "401120",
    "end": "402639"
  },
  {
    "text": "the top but um what we've done here is",
    "start": "402639",
    "end": "406199"
  },
  {
    "text": "try and make it shrink towards apples so",
    "start": "406199",
    "end": "408840"
  },
  {
    "text": "if it's bananas then smaller than",
    "start": "408840",
    "end": "411800"
  },
  {
    "text": "bananas might be apples or oranges if",
    "start": "411800",
    "end": "414000"
  },
  {
    "text": "it's oranges then smaller than that",
    "start": "414000",
    "end": "415400"
  },
  {
    "text": "would be apples and the reason why you",
    "start": "415400",
    "end": "417919"
  },
  {
    "text": "might want to do that is because if if",
    "start": "417919",
    "end": "419599"
  },
  {
    "text": "you get a counter example which only has",
    "start": "419599",
    "end": "420960"
  },
  {
    "text": "apples then perhaps the name of the line",
    "start": "420960",
    "end": "423000"
  },
  {
    "text": "item is not really that not really that",
    "start": "423000",
    "end": "425639"
  },
  {
    "text": "interesting so I think it's it's good to",
    "start": "425639",
    "end": "427720"
  },
  {
    "text": "be able to shrink these kind of lists",
    "start": "427720",
    "end": "429000"
  },
  {
    "text": "down even though it might seem",
    "start": "429000",
    "end": "432319"
  },
  {
    "text": "Superfluous we move on to the the price",
    "start": "432319",
    "end": "435360"
  },
  {
    "text": "um this one's interesting there's a a",
    "start": "435360",
    "end": "437400"
  },
  {
    "text": "built-in shrink function for uh for",
    "start": "437400",
    "end": "440840"
  },
  {
    "text": "integers so we can use that but it's",
    "start": "440840",
    "end": "442319"
  },
  {
    "text": "going to shrink our integer all the way",
    "start": "442319",
    "end": "443800"
  },
  {
    "text": "to zero so that's not ideal because our",
    "start": "443800",
    "end": "446400"
  },
  {
    "text": "invariance here show that we really only",
    "start": "446400",
    "end": "448400"
  },
  {
    "text": "want prices between one and 100 so we",
    "start": "448400",
    "end": "451080"
  },
  {
    "text": "have to make sure we filter out the",
    "start": "451080",
    "end": "453080"
  },
  {
    "text": "resulting shrinks so that we we only get",
    "start": "453080",
    "end": "455840"
  },
  {
    "text": "um prices which match the",
    "start": "455840",
    "end": "458080"
  },
  {
    "text": "invariance so that's",
    "start": "458080",
    "end": "460000"
  },
  {
    "text": "cool um for item we can use this thing",
    "start": "460000",
    "end": "464280"
  },
  {
    "text": "called generic shrink which uses GHC",
    "start": "464280",
    "end": "466840"
  },
  {
    "text": "generics to sort of automatically",
    "start": "466840",
    "end": "468759"
  },
  {
    "text": "provide a shrink function which will",
    "start": "468759",
    "end": "470039"
  },
  {
    "text": "just shrink the subterms and we can do",
    "start": "470039",
    "end": "472400"
  },
  {
    "text": "the same for",
    "start": "472400",
    "end": "473440"
  },
  {
    "text": "auto so now when we come back and run",
    "start": "473440",
    "end": "475879"
  },
  {
    "text": "our",
    "start": "475879",
    "end": "476919"
  },
  {
    "text": "property uh we get a much nicer counter",
    "start": "476919",
    "end": "479800"
  },
  {
    "text": "example and you can see that it's it's",
    "start": "479800",
    "end": "481960"
  },
  {
    "text": "shrunk to Apple so probably the name",
    "start": "481960",
    "end": "484599"
  },
  {
    "text": "doesn't really matter that much and we",
    "start": "484599",
    "end": "487240"
  },
  {
    "text": "see that the price",
    "start": "487240",
    "end": "489520"
  },
  {
    "text": "is51 us so the fact that it was sort of",
    "start": "489520",
    "end": "493000"
  },
  {
    "text": "exactly 51 it tells you something about",
    "start": "493000",
    "end": "495159"
  },
  {
    "text": "why it's failing so I think that's",
    "start": "495159",
    "end": "496599"
  },
  {
    "text": "really",
    "start": "496599",
    "end": "497599"
  },
  {
    "text": "cool so what happens if our data",
    "start": "497599",
    "end": "499720"
  },
  {
    "text": "generation needs get a bit more",
    "start": "499720",
    "end": "503199"
  },
  {
    "text": "complicated what about if we have two",
    "start": "503479",
    "end": "506599"
  },
  {
    "text": "different kinds of items what if we want",
    "start": "506599",
    "end": "507879"
  },
  {
    "text": "to generate some cheap things sandwiches",
    "start": "507879",
    "end": "510080"
  },
  {
    "text": "and noodles or if we want to generate",
    "start": "510080",
    "end": "512279"
  },
  {
    "text": "some expensive things and then we want",
    "start": "512279",
    "end": "514599"
  },
  {
    "text": "to have this higher order generator",
    "start": "514599",
    "end": "517159"
  },
  {
    "text": "where we can generate orders that have",
    "start": "517159",
    "end": "519080"
  },
  {
    "text": "either cheap or expensive items so",
    "start": "519080",
    "end": "521360"
  },
  {
    "text": "that's generators are awesome we can",
    "start": "521360",
    "end": "523279"
  },
  {
    "text": "sort of use applicative and functor and",
    "start": "523279",
    "end": "525519"
  },
  {
    "text": "mon to compose them but um if we come",
    "start": "525519",
    "end": "529839"
  },
  {
    "text": "along to arbitary it's a type class so",
    "start": "529839",
    "end": "531600"
  },
  {
    "text": "we need to new type our uh orders in",
    "start": "531600",
    "end": "534680"
  },
  {
    "text": "order to generate in order to have",
    "start": "534680",
    "end": "536519"
  },
  {
    "text": "different um arbitary instances for them",
    "start": "536519",
    "end": "539560"
  },
  {
    "text": "so that works great for our um for our",
    "start": "539560",
    "end": "542760"
  },
  {
    "text": "generators but how do we Implement",
    "start": "542760",
    "end": "546519"
  },
  {
    "text": "shrink so I mean we would have to go all",
    "start": "546519",
    "end": "548680"
  },
  {
    "text": "the way down into the order and make",
    "start": "548680",
    "end": "551279"
  },
  {
    "text": "sure that we we only shrink and stay",
    "start": "551279",
    "end": "554760"
  },
  {
    "text": "within the invariance of the cheap and",
    "start": "554760",
    "end": "556200"
  },
  {
    "text": "expensive things and um to be honest I'm",
    "start": "556200",
    "end": "559120"
  },
  {
    "text": "not really sure how I'd Implement that",
    "start": "559120",
    "end": "560760"
  },
  {
    "text": "that's uh it's really pretty challenging",
    "start": "560760",
    "end": "563640"
  },
  {
    "text": "I",
    "start": "563640",
    "end": "565079"
  },
  {
    "text": "think so this is a problem and um it has",
    "start": "565079",
    "end": "570560"
  },
  {
    "text": "some knock on",
    "start": "570560",
    "end": "573079"
  },
  {
    "text": "effects so because it's quite",
    "start": "573640",
    "end": "576640"
  },
  {
    "text": "tedious uh some people don't bother to",
    "start": "576640",
    "end": "578680"
  },
  {
    "text": "implement shrink functions at all sorry",
    "start": "578680",
    "end": "582000"
  },
  {
    "text": "Charles because shrinking is not really",
    "start": "582000",
    "end": "584440"
  },
  {
    "text": "useful until you need it I often find",
    "start": "584440",
    "end": "587000"
  },
  {
    "text": "this guy with hundreds of lines of",
    "start": "587000",
    "end": "588640"
  },
  {
    "text": "counter example pasted into his text",
    "start": "588640",
    "end": "590240"
  },
  {
    "text": "editor trying to figure out why a test",
    "start": "590240",
    "end": "592760"
  },
  {
    "text": "was failing and sort of shrinking it by",
    "start": "592760",
    "end": "595720"
  },
  {
    "text": "hand um but he's not the only one so we",
    "start": "595720",
    "end": "599519"
  },
  {
    "text": "kind of have to we kind of have to deal",
    "start": "599519",
    "end": "601160"
  },
  {
    "text": "with it and in fact Charles helped me",
    "start": "601160",
    "end": "603560"
  },
  {
    "text": "out and we um downloaded every package",
    "start": "603560",
    "end": "605519"
  },
  {
    "text": "on hackage to find out who's been",
    "start": "605519",
    "end": "607079"
  },
  {
    "text": "naughty and nice and it turns out that",
    "start": "607079",
    "end": "610880"
  },
  {
    "text": "only one in six arbitrary instances even",
    "start": "610880",
    "end": "614959"
  },
  {
    "text": "Implement",
    "start": "614959",
    "end": "617440"
  },
  {
    "text": "trink so this is a",
    "start": "620279",
    "end": "624279"
  },
  {
    "text": "problem another challenge working with",
    "start": "624360",
    "end": "626360"
  },
  {
    "text": "arbites is writing generators which",
    "start": "626360",
    "end": "628560"
  },
  {
    "text": "depend on value",
    "start": "628560",
    "end": "630920"
  },
  {
    "text": "so say we had um some data types like",
    "start": "630920",
    "end": "634279"
  },
  {
    "text": "this and we have a schema which",
    "start": "634279",
    "end": "637040"
  },
  {
    "text": "describes some value that you might want",
    "start": "637040",
    "end": "639320"
  },
  {
    "text": "to",
    "start": "639320",
    "end": "639959"
  },
  {
    "text": "generate um doing the arbitrary for",
    "start": "639959",
    "end": "643079"
  },
  {
    "text": "schema is is pretty easy don't worry too",
    "start": "643079",
    "end": "645600"
  },
  {
    "text": "much about this scale stuff um so that's",
    "start": "645600",
    "end": "649440"
  },
  {
    "text": "similar to what we've seen before but if",
    "start": "649440",
    "end": "651600"
  },
  {
    "text": "we want to then generate a value based",
    "start": "651600",
    "end": "653200"
  },
  {
    "text": "on the random schema then how do we",
    "start": "653200",
    "end": "656279"
  },
  {
    "text": "write that as an arbitary we can't",
    "start": "656279",
    "end": "657959"
  },
  {
    "text": "really take the schem as a parameter to",
    "start": "657959",
    "end": "660800"
  },
  {
    "text": "arbitary or to to shrink so I mean we",
    "start": "660800",
    "end": "664480"
  },
  {
    "text": "could we could just write the generator",
    "start": "664480",
    "end": "667839"
  },
  {
    "text": "part and then use for all to sort of",
    "start": "667839",
    "end": "669920"
  },
  {
    "text": "explicitly select a generator um but now",
    "start": "669920",
    "end": "672959"
  },
  {
    "text": "we've lost the shrinking for values so",
    "start": "672959",
    "end": "675440"
  },
  {
    "text": "that's that's a shame um and this",
    "start": "675440",
    "end": "678600"
  },
  {
    "text": "situation of writing generators that do",
    "start": "678600",
    "end": "681440"
  },
  {
    "text": "not have arbitrary instances is is quite",
    "start": "681440",
    "end": "685000"
  },
  {
    "text": "a common one that I have seen in",
    "start": "685000",
    "end": "687680"
  },
  {
    "text": "abiata um so that's a problem as",
    "start": "687680",
    "end": "692360"
  },
  {
    "text": "well uh having generators that are",
    "start": "693320",
    "end": "697320"
  },
  {
    "text": "selected using this implicit resolution",
    "start": "697320",
    "end": "699399"
  },
  {
    "text": "thing where you kind of magically get a",
    "start": "699399",
    "end": "700839"
  },
  {
    "text": "random value for your arguments it looks",
    "start": "700839",
    "end": "703120"
  },
  {
    "text": "very nice uh but it can have",
    "start": "703120",
    "end": "705079"
  },
  {
    "text": "consequences when people aren't aware of",
    "start": "705079",
    "end": "707560"
  },
  {
    "text": "what kind of generators they they're",
    "start": "707560",
    "end": "708959"
  },
  {
    "text": "getting by default so for example the",
    "start": "708959",
    "end": "711360"
  },
  {
    "text": "arbitary for INT just provides integers",
    "start": "711360",
    "end": "713279"
  },
  {
    "text": "in the range minus 100 to 100 this has",
    "start": "713279",
    "end": "716079"
  },
  {
    "text": "caused some issues in ambata on several",
    "start": "716079",
    "end": "718240"
  },
  {
    "text": "occasions",
    "start": "718240",
    "end": "721160"
  },
  {
    "text": "and in fact just um just last week there",
    "start": "721160",
    "end": "723959"
  },
  {
    "text": "was a bug discovered in the text package",
    "start": "723959",
    "end": "726360"
  },
  {
    "text": "the take end function doesn't work",
    "start": "726360",
    "end": "727959"
  },
  {
    "text": "correctly in some situations and how can",
    "start": "727959",
    "end": "730360"
  },
  {
    "text": "this be they have hundreds of property",
    "start": "730360",
    "end": "731880"
  },
  {
    "text": "tests now if we had a look at the test",
    "start": "731880",
    "end": "734000"
  },
  {
    "text": "which actually could have caught this",
    "start": "734000",
    "end": "735519"
  },
  {
    "text": "bug um it looks like a little bit like",
    "start": "735519",
    "end": "738199"
  },
  {
    "text": "this so we get an integer and a string",
    "start": "738199",
    "end": "742079"
  },
  {
    "text": "and then we Implement take end using",
    "start": "742079",
    "end": "744519"
  },
  {
    "text": "list combinators so we reverse and then",
    "start": "744519",
    "end": "746800"
  },
  {
    "text": "take end and then reverse again and then",
    "start": "746800",
    "end": "749720"
  },
  {
    "text": "we do the same using the take end",
    "start": "749720",
    "end": "752360"
  },
  {
    "text": "function for for text so what's the",
    "start": "752360",
    "end": "755279"
  },
  {
    "text": "problem here I'll I'll give you a hint",
    "start": "755279",
    "end": "758720"
  },
  {
    "text": "um what kind of characters does the",
    "start": "758720",
    "end": "760199"
  },
  {
    "text": "arbitary for Char",
    "start": "760199",
    "end": "762480"
  },
  {
    "text": "generate it turns out it just generates",
    "start": "762480",
    "end": "764600"
  },
  {
    "text": "Latin one characters um which is fine",
    "start": "764600",
    "end": "767360"
  },
  {
    "text": "for many cases and probably what you",
    "start": "767360",
    "end": "768880"
  },
  {
    "text": "want much of the time but it's easy to",
    "start": "768880",
    "end": "771760"
  },
  {
    "text": "uh fall into the Trap of letting um the",
    "start": "771760",
    "end": "774760"
  },
  {
    "text": "sort of implicit resolution do the dirty",
    "start": "774760",
    "end": "777160"
  },
  {
    "text": "work and not actually testing the full",
    "start": "777160",
    "end": "779560"
  },
  {
    "text": "range of of data necessary so if Brian",
    "start": "779560",
    "end": "782920"
  },
  {
    "text": "or Sullivan can make this mistake then",
    "start": "782920",
    "end": "784720"
  },
  {
    "text": "anyone",
    "start": "784720",
    "end": "785880"
  },
  {
    "text": "can and the the last problem that I want",
    "start": "785880",
    "end": "789279"
  },
  {
    "text": "to talk about is uh orphan instances so",
    "start": "789279",
    "end": "794120"
  },
  {
    "text": "it's worth mentioning because we' like",
    "start": "794120",
    "end": "795399"
  },
  {
    "text": "to keep our test code separate from our",
    "start": "795399",
    "end": "797920"
  },
  {
    "text": "production code um",
    "start": "797920",
    "end": "801000"
  },
  {
    "text": "and so that means that arbitary is often",
    "start": "801000",
    "end": "803639"
  },
  {
    "text": "an orphan instance in practice and uh in",
    "start": "803639",
    "end": "807199"
  },
  {
    "text": "pure script orphan instances are a type",
    "start": "807199",
    "end": "809680"
  },
  {
    "text": "error so this becomes even more Pro",
    "start": "809680",
    "end": "812199"
  },
  {
    "text": "problematic in a language like",
    "start": "812199",
    "end": "815480"
  },
  {
    "text": "that so we've seen the challenges that",
    "start": "819160",
    "end": "821519"
  },
  {
    "text": "we we uh face with type directed",
    "start": "821519",
    "end": "824680"
  },
  {
    "text": "shrinking could we ever have integrated",
    "start": "824680",
    "end": "826760"
  },
  {
    "text": "shrinking in a statically typed language",
    "start": "826760",
    "end": "829519"
  },
  {
    "text": "well I would say that we we give it a",
    "start": "829519",
    "end": "832639"
  },
  {
    "text": "try so let's talk about possible",
    "start": "832639",
    "end": "836240"
  },
  {
    "text": "implementation we've got our arbitary",
    "start": "836240",
    "end": "838000"
  },
  {
    "text": "type class",
    "start": "838000",
    "end": "841040"
  },
  {
    "text": "we could start by making arbitary a a",
    "start": "842279",
    "end": "844079"
  },
  {
    "text": "data type so we can pass it around and",
    "start": "844079",
    "end": "846040"
  },
  {
    "text": "and write combinators which work on",
    "start": "846040",
    "end": "849279"
  },
  {
    "text": "arbitary um but one of the problems with",
    "start": "849279",
    "end": "851519"
  },
  {
    "text": "this is that arbitary in this situation",
    "start": "851519",
    "end": "855480"
  },
  {
    "text": "is an invariant functor",
    "start": "855480",
    "end": "858560"
  },
  {
    "text": "um the a appears on both sides in the",
    "start": "858560",
    "end": "861199"
  },
  {
    "text": "shrink function so we've sort of lost",
    "start": "861199",
    "end": "862560"
  },
  {
    "text": "the great interface that that gen has um",
    "start": "862560",
    "end": "866320"
  },
  {
    "text": "one possible solution would be to",
    "start": "866320",
    "end": "868440"
  },
  {
    "text": "separate the and make it a pro functor",
    "start": "868440",
    "end": "871639"
  },
  {
    "text": "uh so now we have this contravariant",
    "start": "871639",
    "end": "874600"
  },
  {
    "text": "parameter which is different from the",
    "start": "874600",
    "end": "875880"
  },
  {
    "text": "covariant parameter",
    "start": "875880",
    "end": "878240"
  },
  {
    "text": "but the divisible interface isn't quite",
    "start": "878240",
    "end": "880639"
  },
  {
    "text": "as nice syntactically to work with as",
    "start": "880639",
    "end": "882600"
  },
  {
    "text": "applicative and doing both at the same",
    "start": "882600",
    "end": "884800"
  },
  {
    "text": "time is pretty",
    "start": "884800",
    "end": "886320"
  },
  {
    "text": "challenging so that's not going to",
    "start": "886320",
    "end": "889480"
  },
  {
    "text": "work what if we make it so that the",
    "start": "889480",
    "end": "891399"
  },
  {
    "text": "generator also produces the shrink",
    "start": "891399",
    "end": "893199"
  },
  {
    "text": "function it's still invariant but it's",
    "start": "893199",
    "end": "895560"
  },
  {
    "text": "starting to look interesting now I think",
    "start": "895560",
    "end": "897360"
  },
  {
    "text": "and I want to focus on on this part",
    "start": "897360",
    "end": "900040"
  },
  {
    "text": "here so we've got an A and we have a",
    "start": "900040",
    "end": "902519"
  },
  {
    "text": "function which goes from an A to a list",
    "start": "902519",
    "end": "904839"
  },
  {
    "text": "of a well the logical thing to do is to",
    "start": "904839",
    "end": "907440"
  },
  {
    "text": "just keep is to just keep applying the",
    "start": "907440",
    "end": "910480"
  },
  {
    "text": "function to the value until it returns",
    "start": "910480",
    "end": "913040"
  },
  {
    "text": "an empty list or put another way we can",
    "start": "913040",
    "end": "916079"
  },
  {
    "text": "use the shrink function to unfold a Ros",
    "start": "916079",
    "end": "919759"
  },
  {
    "text": "tree so we'd like to go from our",
    "start": "919759",
    "end": "922399"
  },
  {
    "text": "generated value of a and the shrink",
    "start": "922399",
    "end": "923839"
  },
  {
    "text": "function to a tree so a tree down here",
    "start": "923839",
    "end": "926959"
  },
  {
    "text": "is an A and then a list of trees",
    "start": "926959",
    "end": "930279"
  },
  {
    "text": "so let's say we want to generate an",
    "start": "930279",
    "end": "931399"
  },
  {
    "text": "integer in the range 0 to 10 and the",
    "start": "931399",
    "end": "934040"
  },
  {
    "text": "random number generator produces a five",
    "start": "934040",
    "end": "936839"
  },
  {
    "text": "um so that's up here at the top of the",
    "start": "936839",
    "end": "938839"
  },
  {
    "text": "tree we then run the shrink function",
    "start": "938839",
    "end": "941160"
  },
  {
    "text": "once and we get the first level of",
    "start": "941160",
    "end": "942720"
  },
  {
    "text": "shrinks for five and then we run it",
    "start": "942720",
    "end": "946240"
  },
  {
    "text": "again recursively and we get the rest of",
    "start": "946240",
    "end": "947600"
  },
  {
    "text": "the shrink",
    "start": "947600",
    "end": "948480"
  },
  {
    "text": "Tre and thanks to hk's",
    "start": "948480",
    "end": "951279"
  },
  {
    "text": "laziness we can just do all of this on",
    "start": "951279",
    "end": "954199"
  },
  {
    "text": "demand very performant without really",
    "start": "954199",
    "end": "956360"
  },
  {
    "text": "having to think too much about it we",
    "start": "956360",
    "end": "957800"
  },
  {
    "text": "just do the whole unfold up front and",
    "start": "957800",
    "end": "959959"
  },
  {
    "text": "laziness takes care of the rest so now",
    "start": "959959",
    "end": "962759"
  },
  {
    "text": "if we go back to our arbitrary data type",
    "start": "962759",
    "end": "965720"
  },
  {
    "text": "um we can see that we've made it",
    "start": "965720",
    "end": "967160"
  },
  {
    "text": "covariant so we can fmap this we can",
    "start": "967160",
    "end": "969920"
  },
  {
    "text": "combine it with applicative and um and",
    "start": "969920",
    "end": "972639"
  },
  {
    "text": "also with",
    "start": "972639",
    "end": "974279"
  },
  {
    "text": "Monet so what is a gen until now we've",
    "start": "974279",
    "end": "977079"
  },
  {
    "text": "just sort of seen it as this uh kind of",
    "start": "977079",
    "end": "979680"
  },
  {
    "text": "random value generator that's that's",
    "start": "979680",
    "end": "981440"
  },
  {
    "text": "opaque but let's have a look",
    "start": "981440",
    "end": "983319"
  },
  {
    "text": "inside we'll see that it's more or less",
    "start": "983319",
    "end": "986880"
  },
  {
    "text": "uh just a function which takes a random",
    "start": "986880",
    "end": "989800"
  },
  {
    "text": "seed and produces a value of a and we",
    "start": "989800",
    "end": "994120"
  },
  {
    "text": "might as well push our tree down into",
    "start": "994120",
    "end": "996120"
  },
  {
    "text": "here and then we can just get rid of",
    "start": "996120",
    "end": "997279"
  },
  {
    "text": "arbit Al together so now we only have",
    "start": "997279",
    "end": "1001120"
  },
  {
    "text": "gens and with that we get shrinking for",
    "start": "1002759",
    "end": "1007279"
  },
  {
    "text": "free and we can all just be lazy",
    "start": "1007279",
    "end": "1011120"
  },
  {
    "text": "programmers so um anytime we combine the",
    "start": "1011120",
    "end": "1015639"
  },
  {
    "text": "generators we using fun replicative or",
    "start": "1015639",
    "end": "1018440"
  },
  {
    "text": "mon the rose trees are also combined and",
    "start": "1018440",
    "end": "1021560"
  },
  {
    "text": "we get the compound generators sort of",
    "start": "1021560",
    "end": "1023560"
  },
  {
    "text": "produce compound rose",
    "start": "1023560",
    "end": "1026000"
  },
  {
    "text": "trees now because our generators are",
    "start": "1026000",
    "end": "1028120"
  },
  {
    "text": "just a data type it's easy to build gens",
    "start": "1028120",
    "end": "1029918"
  },
  {
    "text": "which depend on values so if we go back",
    "start": "1029919",
    "end": "1032480"
  },
  {
    "text": "to the example that we saw in the",
    "start": "1032480",
    "end": "1034520"
  },
  {
    "text": "beginning um the Gen value is very much",
    "start": "1034520",
    "end": "1037400"
  },
  {
    "text": "just the same as what it was before and",
    "start": "1037400",
    "end": "1040280"
  },
  {
    "text": "we use for all to to summon our values",
    "start": "1040280",
    "end": "1042959"
  },
  {
    "text": "but we also get shrinking here as well",
    "start": "1042959",
    "end": "1044798"
  },
  {
    "text": "so that's beautiful and there's no",
    "start": "1044799",
    "end": "1047319"
  },
  {
    "text": "arbitary instances",
    "start": "1047319",
    "end": "1050400"
  },
  {
    "text": "um because there's no arbitrary",
    "start": "1050400",
    "end": "1052400"
  },
  {
    "text": "instances we have to make explicit",
    "start": "1052400",
    "end": "1054679"
  },
  {
    "text": "choices about what we're generating so",
    "start": "1054679",
    "end": "1056679"
  },
  {
    "text": "if we have a look at what um the the",
    "start": "1056679",
    "end": "1059240"
  },
  {
    "text": "text property would have looked like in",
    "start": "1059240",
    "end": "1060919"
  },
  {
    "text": "this um in this sort of style uh you it",
    "start": "1060919",
    "end": "1066240"
  },
  {
    "text": "would be sort of obvious that we're",
    "start": "1066240",
    "end": "1068200"
  },
  {
    "text": "using Lattin one characters and maybe we",
    "start": "1068200",
    "end": "1070679"
  },
  {
    "text": "should use Unicode characters",
    "start": "1070679",
    "end": "1073400"
  },
  {
    "text": "instead uh and now if we run the run",
    "start": "1073400",
    "end": "1077000"
  },
  {
    "text": "this over text we get a counter for",
    "start": "1077000",
    "end": "1080200"
  },
  {
    "text": "example so that's",
    "start": "1080200",
    "end": "1082600"
  },
  {
    "text": "good and no orphans so vagan is sad CU",
    "start": "1082600",
    "end": "1086880"
  },
  {
    "text": "we don't have an arbitary type class",
    "start": "1086880",
    "end": "1090039"
  },
  {
    "text": "anymore so early experiments with this",
    "start": "1094240",
    "end": "1096679"
  },
  {
    "text": "Ros tree idea um worked out really well",
    "start": "1096679",
    "end": "1099799"
  },
  {
    "text": "and uh we had a little library inside",
    "start": "1099799",
    "end": "1102080"
  },
  {
    "text": "ambata that um that was quite promising",
    "start": "1102080",
    "end": "1106080"
  },
  {
    "text": "and uh so I decided to start the",
    "start": "1106080",
    "end": "1108840"
  },
  {
    "text": "Hedgehog project to try and push this",
    "start": "1108840",
    "end": "1110919"
  },
  {
    "text": "idea as far as",
    "start": "1110919",
    "end": "1112159"
  },
  {
    "text": "possible and I'm going to tell you about",
    "start": "1112159",
    "end": "1114679"
  },
  {
    "text": "a few Hedgehog features made possible by",
    "start": "1114679",
    "end": "1117120"
  },
  {
    "text": "rose trees and integrated shrinking",
    "start": "1117120",
    "end": "1118760"
  },
  {
    "text": "which I think are interesting and a",
    "start": "1118760",
    "end": "1120360"
  },
  {
    "text": "couple of other features which are not",
    "start": "1120360",
    "end": "1121840"
  },
  {
    "text": "really related at",
    "start": "1121840",
    "end": "1123880"
  },
  {
    "text": "all so the first thing that I think's uh",
    "start": "1123880",
    "end": "1126840"
  },
  {
    "text": "sort of interesting is uh this range DSL",
    "start": "1126840",
    "end": "1129280"
  },
  {
    "text": "which Hedgehog",
    "start": "1129280",
    "end": "1130640"
  },
  {
    "text": "has so in",
    "start": "1130640",
    "end": "1133919"
  },
  {
    "text": "um in quick check we have Jens and I",
    "start": "1133919",
    "end": "1137840"
  },
  {
    "text": "sort of lied about the type of of gen",
    "start": "1137840",
    "end": "1140799"
  },
  {
    "text": "initially um I said that it was just a",
    "start": "1140799",
    "end": "1142679"
  },
  {
    "text": "function from seed to in actual fact in",
    "start": "1142679",
    "end": "1144840"
  },
  {
    "text": "quick check it takes this size parameter",
    "start": "1144840",
    "end": "1147880"
  },
  {
    "text": "as well as random seed now what's the",
    "start": "1147880",
    "end": "1150679"
  },
  {
    "text": "size",
    "start": "1150679",
    "end": "1152120"
  },
  {
    "text": "parameter this size thing goes from from",
    "start": "1152120",
    "end": "1154919"
  },
  {
    "text": "zero up to 99 as the number of tests",
    "start": "1154919",
    "end": "1157840"
  },
  {
    "text": "increase um and the idea is that I guess",
    "start": "1157840",
    "end": "1161440"
  },
  {
    "text": "smaller tests probably catch most of the",
    "start": "1161440",
    "end": "1164280"
  },
  {
    "text": "bugs but it's it's good to do some large",
    "start": "1164280",
    "end": "1166159"
  },
  {
    "text": "ones even though they might take a bit",
    "start": "1166159",
    "end": "1167760"
  },
  {
    "text": "longer um um and in some it sort of",
    "start": "1167760",
    "end": "1171039"
  },
  {
    "text": "helps shrinking out a little bit as well",
    "start": "1171039",
    "end": "1172799"
  },
  {
    "text": "if your initial examples are smaller so",
    "start": "1172799",
    "end": "1175840"
  },
  {
    "text": "we have this size thing if we look at",
    "start": "1175840",
    "end": "1178000"
  },
  {
    "text": "some of the Quick Check combinators um",
    "start": "1178000",
    "end": "1180799"
  },
  {
    "text": "some of them are affected by size and",
    "start": "1180799",
    "end": "1182159"
  },
  {
    "text": "some of them aren't so choose chooses a",
    "start": "1182159",
    "end": "1185760"
  },
  {
    "text": "random value between between these two",
    "start": "1185760",
    "end": "1188520"
  },
  {
    "text": "bounds and that's not affected by the",
    "start": "1188520",
    "end": "1190240"
  },
  {
    "text": "size parameter at all the list of",
    "start": "1190240",
    "end": "1193360"
  },
  {
    "text": "combinators they uh they are affected by",
    "start": "1193360",
    "end": "1197720"
  },
  {
    "text": "the size so",
    "start": "1197720",
    "end": "1199640"
  },
  {
    "text": "the um as the size increases you'll get",
    "start": "1199640",
    "end": "1202400"
  },
  {
    "text": "larger and larger",
    "start": "1202400",
    "end": "1204200"
  },
  {
    "text": "lists um so what if we wanted to",
    "start": "1204200",
    "end": "1207240"
  },
  {
    "text": "generate a list which has at least two",
    "start": "1207240",
    "end": "1209600"
  },
  {
    "text": "elements you could generate a number and",
    "start": "1209600",
    "end": "1211919"
  },
  {
    "text": "then pass it to Vector of and uh that",
    "start": "1211919",
    "end": "1214240"
  },
  {
    "text": "would give you a random siiz list but",
    "start": "1214240",
    "end": "1216240"
  },
  {
    "text": "list shrinking is sort of special and we",
    "start": "1216240",
    "end": "1218159"
  },
  {
    "text": "might break it by doing",
    "start": "1218159",
    "end": "1220840"
  },
  {
    "text": "that so in in Hedgehog we have a",
    "start": "1220840",
    "end": "1224600"
  },
  {
    "text": "slightly different setup so the Hedgehog",
    "start": "1224600",
    "end": "1226400"
  },
  {
    "text": "combinators are one to one with types",
    "start": "1226400",
    "end": "1228640"
  },
  {
    "text": "for the most part and um they're",
    "start": "1228640",
    "end": "1232159"
  },
  {
    "text": "parameterized by these range things so",
    "start": "1232159",
    "end": "1234880"
  },
  {
    "text": "what is a",
    "start": "1234880",
    "end": "1236919"
  },
  {
    "text": "range well a range is this data type",
    "start": "1236919",
    "end": "1239679"
  },
  {
    "text": "which has uh two parameters we've got an",
    "start": "1239679",
    "end": "1242120"
  },
  {
    "text": "origin which is the value that we would",
    "start": "1242120",
    "end": "1243640"
  },
  {
    "text": "like to shrink towards um and we have",
    "start": "1243640",
    "end": "1246000"
  },
  {
    "text": "this function which from a size gives",
    "start": "1246000",
    "end": "1248640"
  },
  {
    "text": "you the the bounds of uh the thing that",
    "start": "1248640",
    "end": "1252480"
  },
  {
    "text": "you're going to generate and we have a",
    "start": "1252480",
    "end": "1254360"
  },
  {
    "text": "bunch of these combinators for doing",
    "start": "1254360",
    "end": "1256039"
  },
  {
    "text": "different things so I'll I'll show you",
    "start": "1256039",
    "end": "1257799"
  },
  {
    "text": "what the combinators do",
    "start": "1257799",
    "end": "1260000"
  },
  {
    "text": "so a Singleton produces a range which um",
    "start": "1260000",
    "end": "1263960"
  },
  {
    "text": "as the size increases it it does nothing",
    "start": "1263960",
    "end": "1266559"
  },
  {
    "text": "sorry Singleton five is always going to",
    "start": "1266559",
    "end": "1268159"
  },
  {
    "text": "give you the the bounds five to",
    "start": "1268159",
    "end": "1271080"
  },
  {
    "text": "five uh constant range um so constant",
    "start": "1271080",
    "end": "1275159"
  },
  {
    "text": "010 is also unaffected by the size",
    "start": "1275159",
    "end": "1277279"
  },
  {
    "text": "parameter uh but so it gives you a range",
    "start": "1277279",
    "end": "1280279"
  },
  {
    "text": "from 0 to 10 but then when it's",
    "start": "1280279",
    "end": "1282080"
  },
  {
    "text": "shrinking it shrinks towards zero it",
    "start": "1282080",
    "end": "1284000"
  },
  {
    "text": "shrinks towards the first parameter if",
    "start": "1284000",
    "end": "1286159"
  },
  {
    "text": "we flipped the the arguments that it",
    "start": "1286159",
    "end": "1287679"
  },
  {
    "text": "would shrink towards 10 instead which is",
    "start": "1287679",
    "end": "1291640"
  },
  {
    "text": "interesting constant from um it takes",
    "start": "1291640",
    "end": "1295880"
  },
  {
    "text": "three",
    "start": "1295880",
    "end": "1296840"
  },
  {
    "text": "arguments is unaffected by the size but",
    "start": "1296840",
    "end": "1299520"
  },
  {
    "text": "it shrinks towards this first argument",
    "start": "1299520",
    "end": "1301360"
  },
  {
    "text": "so we can say the range is minus 100 to",
    "start": "1301360",
    "end": "1303840"
  },
  {
    "text": "100 and then shrinking towards zero um",
    "start": "1303840",
    "end": "1307039"
  },
  {
    "text": "now it starts to get interesting so",
    "start": "1307039",
    "end": "1309279"
  },
  {
    "text": "linear is affected by the size parameter",
    "start": "1309279",
    "end": "1311919"
  },
  {
    "text": "so if we have this linear Range 32 to",
    "start": "1311919",
    "end": "1314520"
  },
  {
    "text": "1024 as the size increases the range",
    "start": "1314520",
    "end": "1318679"
  },
  {
    "text": "slowly increases to 1024 to 32 but when",
    "start": "1318679",
    "end": "1322400"
  },
  {
    "text": "we shrink we always shrink to 32 so this",
    "start": "1322400",
    "end": "1325279"
  },
  {
    "text": "gives you quite a bit of control over",
    "start": "1325279",
    "end": "1327200"
  },
  {
    "text": "how things shrink and how things um how",
    "start": "1327200",
    "end": "1330159"
  },
  {
    "text": "the bounds increase as the size",
    "start": "1330159",
    "end": "1332559"
  },
  {
    "text": "increases and uh finally we have linear",
    "start": "1332559",
    "end": "1335559"
  },
  {
    "text": "from um this is sort of a nice way of",
    "start": "1335559",
    "end": "1339120"
  },
  {
    "text": "generating years for a um for a date or",
    "start": "1339120",
    "end": "1343520"
  },
  {
    "text": "something like that so we start with the",
    "start": "1343520",
    "end": "1345760"
  },
  {
    "text": "year 2000 and then as the size increases",
    "start": "1345760",
    "end": "1348320"
  },
  {
    "text": "we expanded the range of years that we",
    "start": "1348320",
    "end": "1349760"
  },
  {
    "text": "generate to down to 1970 up to 2100 but",
    "start": "1349760",
    "end": "1353080"
  },
  {
    "text": "then when we shrink we shrink to a nice",
    "start": "1353080",
    "end": "1354760"
  },
  {
    "text": "year like 2000 um which is a lot nicer",
    "start": "1354760",
    "end": "1357400"
  },
  {
    "text": "than shrinking to",
    "start": "1357400",
    "end": "1360080"
  },
  {
    "text": "zero this is what it might look like if",
    "start": "1360240",
    "end": "1362600"
  },
  {
    "text": "you're using these combinators so um in",
    "start": "1362600",
    "end": "1365080"
  },
  {
    "text": "Hedgehog there's just one list",
    "start": "1365080",
    "end": "1367440"
  },
  {
    "text": "combinator and it takes a range to",
    "start": "1367440",
    "end": "1369320"
  },
  {
    "text": "control the size and then using this",
    "start": "1369320",
    "end": "1370760"
  },
  {
    "text": "range thing you can sort of implement",
    "start": "1370760",
    "end": "1372120"
  },
  {
    "text": "all of the the quick check compid but if",
    "start": "1372120",
    "end": "1375000"
  },
  {
    "text": "you want something a bit fancier like",
    "start": "1375000",
    "end": "1376320"
  },
  {
    "text": "you want a list between 5 and 10 which",
    "start": "1376320",
    "end": "1378679"
  },
  {
    "text": "sort of increases to be a um you know",
    "start": "1378679",
    "end": "1381720"
  },
  {
    "text": "starts off generating only 5 to five and",
    "start": "1381720",
    "end": "1383600"
  },
  {
    "text": "then increases 5 to 10 for the larger",
    "start": "1383600",
    "end": "1386200"
  },
  {
    "text": "tests you can do that and then here's",
    "start": "1386200",
    "end": "1388440"
  },
  {
    "text": "our year",
    "start": "1388440",
    "end": "1391200"
  },
  {
    "text": "example so what about effectful",
    "start": "1396200",
    "end": "1398240"
  },
  {
    "text": "properties how do we deal with uh with",
    "start": "1398240",
    "end": "1400520"
  },
  {
    "text": "these kind of",
    "start": "1400520",
    "end": "1401960"
  },
  {
    "text": "things so because of Hedgehog's",
    "start": "1401960",
    "end": "1405320"
  },
  {
    "text": "architecture if we want effectful",
    "start": "1405320",
    "end": "1406720"
  },
  {
    "text": "properties then we need to have",
    "start": "1406720",
    "end": "1408080"
  },
  {
    "text": "effectful generators so that means",
    "start": "1408080",
    "end": "1410520"
  },
  {
    "text": "somehow we need to add effects to this",
    "start": "1410520",
    "end": "1413600"
  },
  {
    "text": "this tree somehow um now it turns out",
    "start": "1413600",
    "end": "1417400"
  },
  {
    "text": "that it's as simple as just adding a",
    "start": "1417400",
    "end": "1419640"
  },
  {
    "text": "monatic effect to the tree and so now we",
    "start": "1419640",
    "end": "1422640"
  },
  {
    "text": "can have an effect at at every",
    "start": "1422640",
    "end": "1424480"
  },
  {
    "text": "no um and and we're done right",
    "start": "1424480",
    "end": "1428480"
  },
  {
    "text": "the in Hedgehog all properties are",
    "start": "1428480",
    "end": "1431360"
  },
  {
    "text": "monatic um so the the F all you would",
    "start": "1431360",
    "end": "1435000"
  },
  {
    "text": "sort of use it inside your property",
    "start": "1435000",
    "end": "1437279"
  },
  {
    "text": "moned um",
    "start": "1437279",
    "end": "1439679"
  },
  {
    "text": "Asser works like it does in Mantic Quick",
    "start": "1439679",
    "end": "1441760"
  },
  {
    "text": "Check and you can use property to sort",
    "start": "1441760",
    "end": "1444039"
  },
  {
    "text": "of lift a test into a property so what",
    "start": "1444039",
    "end": "1446840"
  },
  {
    "text": "does this look like so Hedgehog property",
    "start": "1446840",
    "end": "1449000"
  },
  {
    "text": "looks like this so we can do some",
    "start": "1449000",
    "end": "1451440"
  },
  {
    "text": "effectful thing and then we can generate",
    "start": "1451440",
    "end": "1453440"
  },
  {
    "text": "some stuff and we still get",
    "start": "1453440",
    "end": "1456760"
  },
  {
    "text": "shrinking so what else can you do with",
    "start": "1456760",
    "end": "1459039"
  },
  {
    "text": "effectful generators well uh one example",
    "start": "1459039",
    "end": "1462000"
  },
  {
    "text": "one of my colleagues Tim came up with um",
    "start": "1462000",
    "end": "1465200"
  },
  {
    "text": "so he was trying to test a compiler and",
    "start": "1465200",
    "end": "1466760"
  },
  {
    "text": "he wanted to generate well types terms",
    "start": "1466760",
    "end": "1469679"
  },
  {
    "text": "um and so he would like to have a map of",
    "start": "1469679",
    "end": "1475399"
  },
  {
    "text": "the environment where he's got all of",
    "start": "1475399",
    "end": "1478919"
  },
  {
    "text": "the the terms which match a particular",
    "start": "1478919",
    "end": "1480760"
  },
  {
    "text": "type in this reader and then he can use",
    "start": "1480760",
    "end": "1483559"
  },
  {
    "text": "that to sort of thread the thread the",
    "start": "1483559",
    "end": "1485960"
  },
  {
    "text": "map around um and that all works quite",
    "start": "1485960",
    "end": "1489120"
  },
  {
    "text": "nicely so uh I'm I'm kind of interested",
    "start": "1489120",
    "end": "1493320"
  },
  {
    "text": "to to see if anyone has other good uses",
    "start": "1493320",
    "end": "1496880"
  },
  {
    "text": "for effectful generator so I'm",
    "start": "1496880",
    "end": "1499240"
  },
  {
    "text": "uh yeah I'm not sure how it'll pan",
    "start": "1499240",
    "end": "1502480"
  },
  {
    "text": "out so with an effectful tree it's easy",
    "start": "1502559",
    "end": "1507440"
  },
  {
    "text": "for us to add filtering of",
    "start": "1507440",
    "end": "1509960"
  },
  {
    "text": "generators so if we look at our gen type",
    "start": "1509960",
    "end": "1512880"
  },
  {
    "text": "which is simplified I've take it the",
    "start": "1512880",
    "end": "1514399"
  },
  {
    "text": "size out just for the example then we we",
    "start": "1514399",
    "end": "1518440"
  },
  {
    "text": "have this m here so what we can do is uh",
    "start": "1518440",
    "end": "1521720"
  },
  {
    "text": "move that out there and add a a mayt and",
    "start": "1521720",
    "end": "1525360"
  },
  {
    "text": "now our tree for it's alternative and",
    "start": "1525360",
    "end": "1529159"
  },
  {
    "text": "monad plus so if we wanted to implement",
    "start": "1529159",
    "end": "1532039"
  },
  {
    "text": "a filter function which is like such",
    "start": "1532039",
    "end": "1533760"
  },
  {
    "text": "that in quick in quick",
    "start": "1533760",
    "end": "1537039"
  },
  {
    "text": "check um we can do it like so so M",
    "start": "1537440",
    "end": "1540320"
  },
  {
    "text": "filter will sort of go down all to to",
    "start": "1540320",
    "end": "1543360"
  },
  {
    "text": "all um all the leaves like all the way",
    "start": "1543360",
    "end": "1545440"
  },
  {
    "text": "down the tree and anything which doesn't",
    "start": "1545440",
    "end": "1547640"
  },
  {
    "text": "pass this filter predicate uh won't be",
    "start": "1547640",
    "end": "1550240"
  },
  {
    "text": "part of our shrinks and if the very top",
    "start": "1550240",
    "end": "1552320"
  },
  {
    "text": "level thing doesn't pass the test then",
    "start": "1552320",
    "end": "1554240"
  },
  {
    "text": "we get empty so that means that we want",
    "start": "1554240",
    "end": "1556360"
  },
  {
    "text": "to try the alternative which is the this",
    "start": "1556360",
    "end": "1559200"
  },
  {
    "text": "filter thing here so we basically keep",
    "start": "1559200",
    "end": "1560960"
  },
  {
    "text": "looping and and um trying to generate",
    "start": "1560960",
    "end": "1564080"
  },
  {
    "text": "things until we find at least one thing",
    "start": "1564080",
    "end": "1565600"
  },
  {
    "text": "which passes the generator passes the",
    "start": "1565600",
    "end": "1568000"
  },
  {
    "text": "predicate now in reality you would",
    "start": "1568000",
    "end": "1570360"
  },
  {
    "text": "probably keep track of how many times",
    "start": "1570360",
    "end": "1571559"
  },
  {
    "text": "you've looped around so you don't Loop",
    "start": "1571559",
    "end": "1574360"
  },
  {
    "text": "forever uh so that's that's kind of neat",
    "start": "1574360",
    "end": "1576679"
  },
  {
    "text": "I",
    "start": "1576679",
    "end": "1577960"
  },
  {
    "text": "think um another useful thing you might",
    "start": "1577960",
    "end": "1581399"
  },
  {
    "text": "want to do is uh try and generate",
    "start": "1581399",
    "end": "1583760"
  },
  {
    "text": "something which is really tricky and and",
    "start": "1583760",
    "end": "1585919"
  },
  {
    "text": "doesn't always work um so an example",
    "start": "1585919",
    "end": "1588840"
  },
  {
    "text": "might be you uh want to generate an",
    "start": "1588840",
    "end": "1591640"
  },
  {
    "text": "expression which matches a type but and",
    "start": "1591640",
    "end": "1594080"
  },
  {
    "text": "so you would like to generate it by",
    "start": "1594080",
    "end": "1595320"
  },
  {
    "text": "using things from the environment but uh",
    "start": "1595320",
    "end": "1597919"
  },
  {
    "text": "if you fail then maybe you just want to",
    "start": "1597919",
    "end": "1601279"
  },
  {
    "text": "generate some easy thing which um is a",
    "start": "1601279",
    "end": "1603679"
  },
  {
    "text": "constant or something like that so",
    "start": "1603679",
    "end": "1605559"
  },
  {
    "text": "that's a nice way to do that being a to",
    "start": "1605559",
    "end": "1607159"
  },
  {
    "text": "fail over and and do something that you",
    "start": "1607159",
    "end": "1609120"
  },
  {
    "text": "know that you can",
    "start": "1609120",
    "end": "1611679"
  },
  {
    "text": "do so that's sort of uh all the things",
    "start": "1612080",
    "end": "1615320"
  },
  {
    "text": "which you can do with um this integrated",
    "start": "1615320",
    "end": "1617919"
  },
  {
    "text": "Ro",
    "start": "1617919",
    "end": "1618840"
  },
  {
    "text": "idea now I'm just few little Frills on",
    "start": "1618840",
    "end": "1621360"
  },
  {
    "text": "top that you get with Hedgehog so you",
    "start": "1621360",
    "end": "1623480"
  },
  {
    "text": "get um Source annotations which means",
    "start": "1623480",
    "end": "1627960"
  },
  {
    "text": "that if you were to run a property like",
    "start": "1627960",
    "end": "1630200"
  },
  {
    "text": "this from our one of our earlier",
    "start": "1630200",
    "end": "1632000"
  },
  {
    "text": "examples um when we get a",
    "start": "1632000",
    "end": "1635159"
  },
  {
    "text": "failure",
    "start": "1635159",
    "end": "1636840"
  },
  {
    "text": "the uh the inputs that we generated for",
    "start": "1636840",
    "end": "1639559"
  },
  {
    "text": "these for alls get uh kind of annotated",
    "start": "1639559",
    "end": "1643559"
  },
  {
    "text": "in with the source code so I think",
    "start": "1643559",
    "end": "1645799"
  },
  {
    "text": "that's kind of nice very uh pretty",
    "start": "1645799",
    "end": "1650080"
  },
  {
    "text": "and uh I'll talk about this in the next",
    "start": "1650080",
    "end": "1652039"
  },
  {
    "text": "slide so another thing that we have is",
    "start": "1652039",
    "end": "1654480"
  },
  {
    "text": "when you do equality you get uh value",
    "start": "1654480",
    "end": "1656840"
  },
  {
    "text": "discs so say we have some sort of",
    "start": "1656840",
    "end": "1660640"
  },
  {
    "text": "complicated record and uh we do s exil",
    "start": "1660640",
    "end": "1663600"
  },
  {
    "text": "like generate two random records and say",
    "start": "1663600",
    "end": "1665200"
  },
  {
    "text": "they have to be equal to each other",
    "start": "1665200",
    "end": "1666519"
  },
  {
    "text": "which is obviously false then you'll get",
    "start": "1666519",
    "end": "1668600"
  },
  {
    "text": "a counter example of it like this so you",
    "start": "1668600",
    "end": "1671320"
  },
  {
    "text": "could see it's um all the things that",
    "start": "1671320",
    "end": "1674840"
  },
  {
    "text": "are the same are just the same and it's",
    "start": "1674840",
    "end": "1676320"
  },
  {
    "text": "a regular sort of diff situation",
    "start": "1676320",
    "end": "1678799"
  },
  {
    "text": "and uh you should note that this is",
    "start": "1678799",
    "end": "1680120"
  },
  {
    "text": "pretty printed using John's pretty",
    "start": "1680120",
    "end": "1681799"
  },
  {
    "text": "printing",
    "start": "1681799",
    "end": "1684080"
  },
  {
    "text": "Library so just wrapping up um we have",
    "start": "1685919",
    "end": "1690600"
  },
  {
    "text": "seen what shrinking is we have learned",
    "start": "1690600",
    "end": "1693640"
  },
  {
    "text": "about the difference between we've",
    "start": "1693640",
    "end": "1695559"
  },
  {
    "text": "learned about type directed shrinking",
    "start": "1695559",
    "end": "1697399"
  },
  {
    "text": "and the challenges that uh that we faced",
    "start": "1697399",
    "end": "1701000"
  },
  {
    "text": "in in trying to use it we've seen that",
    "start": "1701000",
    "end": "1703159"
  },
  {
    "text": "programmers are lazy and they don't",
    "start": "1703159",
    "end": "1704320"
  },
  {
    "text": "write shrink functions",
    "start": "1704320",
    "end": "1706360"
  },
  {
    "text": "so we have looked at another approach",
    "start": "1706360",
    "end": "1709360"
  },
  {
    "text": "integrated shrinking we've seen how to",
    "start": "1709360",
    "end": "1711600"
  },
  {
    "text": "implement that and how that gives you",
    "start": "1711600",
    "end": "1714080"
  },
  {
    "text": "shrinking for free and uh finally we've",
    "start": "1714080",
    "end": "1717159"
  },
  {
    "text": "seen some of the things that Hedgehog",
    "start": "1717159",
    "end": "1719039"
  },
  {
    "text": "can can do on top of that",
    "start": "1719039",
    "end": "1721080"
  },
  {
    "text": "idea and Hedgehog is up on GitHub the",
    "start": "1721080",
    "end": "1724559"
  },
  {
    "text": "hasco version is on is on hackage now uh",
    "start": "1724559",
    "end": "1728000"
  },
  {
    "text": "there's a sort of earlier um version of",
    "start": "1728000",
    "end": "1731919"
  },
  {
    "text": "this idea in P script on my personal",
    "start": "1731919",
    "end": "1734039"
  },
  {
    "text": "GitHub that I will pull over to the",
    "start": "1734039",
    "end": "1736080"
  },
  {
    "text": "Hedgehog repo when I get time and",
    "start": "1736080",
    "end": "1738399"
  },
  {
    "text": "there's sort of an in progress Scala",
    "start": "1738399",
    "end": "1740039"
  },
  {
    "text": "version up there as well and that's it",
    "start": "1740039",
    "end": "1742159"
  },
  {
    "text": "thank",
    "start": "1742159",
    "end": "1744279"
  },
  {
    "text": "you",
    "start": "1746600",
    "end": "1749600"
  }
]