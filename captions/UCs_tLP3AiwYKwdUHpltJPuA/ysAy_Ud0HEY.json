[
  {
    "text": "[Music] welcome to the go-to podcast each",
    "start": "260",
    "end": "7399"
  },
  {
    "text": "episode covers the brightest and boldest ideas from the world's leading experts in software development tune in for",
    "start": "7399",
    "end": "14160"
  },
  {
    "text": "practical lessons compelling theories and plenty of",
    "start": "14160",
    "end": "19240"
  },
  {
    "text": "inspiration go to gathers the brightest Minds in the software Community to help developers tackle projects today plan",
    "start": "19920",
    "end": "26679"
  },
  {
    "text": "for tomorrow and create a better future stay up to date with the latest in Tech through go-to's top rated events held",
    "start": "26679",
    "end": "33280"
  },
  {
    "text": "online and in person in cities like Amsterdam London Copenhagen and Chicago",
    "start": "33280",
    "end": "39120"
  },
  {
    "text": "and by subscribing to the goto conferences YouTube channel where you can find thousands more highquality de",
    "start": "39120",
    "end": "44640"
  },
  {
    "text": "talks learn more at [Music]",
    "start": "44640",
    "end": "51530"
  },
  {
    "text": "goop.in at goto Copenhagen uh this is a goto unscripted episode where I'm joined by Richard",
    "start": "54039",
    "end": "60559"
  },
  {
    "text": "feltman and Eric derenburg um we're going to nerd out a little bit about programming languages but before we do",
    "start": "60559",
    "end": "66360"
  },
  {
    "text": "that if you could say a few words about yourselves maybe you Richard first sure um I'm Richard uh I work at a company",
    "start": "66360",
    "end": "72159"
  },
  {
    "text": "called no red Inc uh we're hiring um and uh so I i' I've done a lot of elm uh in",
    "start": "72159",
    "end": "77920"
  },
  {
    "text": "my career um so I'm the author of elm and action for Manning Publications uh also really into Russ doing a lot of",
    "start": "77920",
    "end": "83479"
  },
  {
    "text": "that on the side because I'm working on making a programming language the compiler's written Russ so I've also done a course on frontend Masters for",
    "start": "83479",
    "end": "89280"
  },
  {
    "text": "Elm and also for rust okay and you Eric so I work at thoughtworks a consulting company I work mostly as a consultant",
    "start": "89280",
    "end": "95920"
  },
  {
    "text": "helping clients make more out of software right software new ways using different programming languages as the",
    "start": "95920",
    "end": "102360"
  },
  {
    "text": "client requires as the circumstances require and as new programming languages appear okay interesting um so I wanted",
    "start": "102360",
    "end": "110600"
  },
  {
    "text": "to do a fun experiment with you two uh at the conference party we had last night I think you were both there we had",
    "start": "110600",
    "end": "116399"
  },
  {
    "text": "Mark renle um design the worst programming language in the world by",
    "start": "116399",
    "end": "121799"
  },
  {
    "text": "looking at previous languages that do horrible horrible things and taking the worst parts of all of those and building",
    "start": "121799",
    "end": "127200"
  },
  {
    "text": "the worst language you could think of I was hoping we could do a little bit of the opposite exercise here where if you",
    "start": "127200",
    "end": "132760"
  },
  {
    "text": "were to design your ideal language what kind of features would you take from",
    "start": "132760",
    "end": "138239"
  },
  {
    "text": "where and what languages would you draw inspiration from um I know Richard you are working on your programming language",
    "start": "138239",
    "end": "144319"
  },
  {
    "text": "so you might have been through some of this exercise already maybe you want to start uh sure well it's it's a dangerous",
    "start": "144319",
    "end": "150319"
  },
  {
    "text": "place to start because if I I'm liable to just you know talk about it forever but I'll I'll try to keep it constrained",
    "start": "150319",
    "end": "156160"
  },
  {
    "text": "to like what what languages do I want to well what characteristics do I want what languages do I want to steal things from",
    "start": "156160",
    "end": "161480"
  },
  {
    "text": "I mean uh take inspiration from um so uh so first off the the the prompt was the",
    "start": "161480",
    "end": "168720"
  },
  {
    "text": "ideal language so to me I don't know that there's such a thing as like one ideal language for like all problems",
    "start": "168720",
    "end": "174239"
  },
  {
    "text": "it's it's more domain specific like if you're building an operating system I think you want a pretty different language than if you're building like a",
    "start": "174239",
    "end": "180599"
  },
  {
    "text": "web server versus if you're building a a video game um so embedded systems be",
    "start": "180599",
    "end": "185760"
  },
  {
    "text": "another example so um I've in my career mainly done web development so uh like",
    "start": "185760",
    "end": "192280"
  },
  {
    "text": "let's just maybe keep it constrainted to that at least for I can start there um so I think if you're doing like web",
    "start": "192280",
    "end": "198200"
  },
  {
    "text": "development there's sort of the front end and the back end um front end I'm really happy with Elm so I'm actually",
    "start": "198200",
    "end": "203319"
  },
  {
    "text": "not trying to design a language for web front end stuff um uh I guess the language I'm working on if it's used in web development would be used on the on",
    "start": "203319",
    "end": "209959"
  },
  {
    "text": "the server side um ideal things that I'm looking for uh so I'm a big fan of",
    "start": "209959",
    "end": "215480"
  },
  {
    "text": "really uh ergonomic type checking uh I've definitely used languages that have",
    "start": "215480",
    "end": "220640"
  },
  {
    "text": "varying degrees of ergonomics around type checking some where it seems like it's a net negative like it's so painful",
    "start": "220640",
    "end": "226040"
  },
  {
    "text": "that I would rather not have it and rather have Dynamic types um all the way to uh like Elm has extremely nice like",
    "start": "226040",
    "end": "232640"
  },
  {
    "text": "well-designed type system really helpful friendly error messages so I think that is my ideal um that's definitely",
    "start": "232640",
    "end": "238720"
  },
  {
    "text": "something I would take from Elm um uh as far as like memory management",
    "start": "238720",
    "end": "243840"
  },
  {
    "text": "goes I think automatic memory management would definitely be something I would want um building operating system",
    "start": "243840",
    "end": "248959"
  },
  {
    "text": "probably not probably want direct control over that um maybe I can just start with those two and uh just so I",
    "start": "248959",
    "end": "254480"
  },
  {
    "text": "don't talk forever uh what what do you think yeah I'm in complete agreement about the consultant answer it depends",
    "start": "254480",
    "end": "261400"
  },
  {
    "text": "right and I don't think you should try to design a language and it was part of Mark's keynote was the fun of saying he wants to design a language for",
    "start": "261400",
    "end": "267520"
  },
  {
    "text": "everything and that is of course the first mistake you do right so I completely agree it depends on what your",
    "start": "267520",
    "end": "273240"
  },
  {
    "text": "target is I think the memory management we could even on the lowest level do",
    "start": "273240",
    "end": "279120"
  },
  {
    "text": "something like automatic reference counting or what Russ does with its memory management with the borrow Checker so I think you definitely don't",
    "start": "279120",
    "end": "285240"
  },
  {
    "text": "want humans have proven over 20 I don't know 30 years that we are incapable of doing memory management correctly with",
    "start": "285240",
    "end": "291520"
  },
  {
    "text": "all the tools and best intentions so yeah give that to the machine types I'm similarly conflicted I've written large",
    "start": "291520",
    "end": "297800"
  },
  {
    "text": "systems in what is I learned last night gradual typing I know this from Objective C where you can also design",
    "start": "297800",
    "end": "303440"
  },
  {
    "text": "types or you can leave them out if you want in a large team it is often quite good in large code bases is good to have",
    "start": "303440",
    "end": "309240"
  },
  {
    "text": "the type system because it really helps you understand the code better and most of the time it's important that you can read the code writing is only done once",
    "start": "309240",
    "end": "315720"
  },
  {
    "text": "most of the time reading is happening often so types really help I guess one aspect that you didn't touch upon is",
    "start": "315720",
    "end": "321080"
  },
  {
    "text": "this often portrayed divide between objectoriented programming which was considered the winner until like 5 years",
    "start": "321080",
    "end": "327840"
  },
  {
    "text": "ago and then functional programming and I think the languages that allow to do both are probably something I would draw",
    "start": "327840",
    "end": "333720"
  },
  {
    "text": "inspiration from or at at least design a language that can use something for very State heavy things that are based on",
    "start": "333720",
    "end": "339840"
  },
  {
    "text": "classes and attached Behavior but also allow you to do something that is more functional but not trying to say I'm",
    "start": "339840",
    "end": "345800"
  },
  {
    "text": "either or H gotcha um so I'm definitely on the functional side of things uh I I",
    "start": "345800",
    "end": "351680"
  },
  {
    "text": "spent the first half of my career doing objectoriented programming and the second half doing functional programming",
    "start": "351680",
    "end": "356720"
  },
  {
    "text": "and I I definitely appreciate where that uh like the the like let's do both is coming from but from my perspective the",
    "start": "356720",
    "end": "363000"
  },
  {
    "text": "thing that I like about functional programming is the subtractive aspect about like let's let's take things away and make it smaller and simpler and so",
    "start": "363000",
    "end": "369960"
  },
  {
    "text": "um to me the the like since that's part of the appeal like constraining it down and just saying let's just do functional",
    "start": "369960",
    "end": "375680"
  },
  {
    "text": "let's have this be like one small set of simple Primitives that's for me like kind of the way to go that's that's my",
    "start": "375680",
    "end": "381039"
  },
  {
    "text": "ideal I I'm completely with you I mean I have a com Science Background I completely agree I love the Elance I",
    "start": "381039",
    "end": "386919"
  },
  {
    "text": "mentioned it in the talk I did about rust that I did the precursor of the implementation I was showing enclosure",
    "start": "386919",
    "end": "392039"
  },
  {
    "text": "and I enjoyed that actually more I'm a great fan of list black languages but I recognized that there's something in",
    "start": "392039",
    "end": "397240"
  },
  {
    "text": "object programming object oriented programming that appeals to human beings categorizing classifying putting things",
    "start": "397240",
    "end": "403520"
  },
  {
    "text": "somewhere and I think that is hard to get over and there's um one system we wrote for or with the client it's a",
    "start": "403520",
    "end": "410240"
  },
  {
    "text": "large system many microservices and it's not really the back end is not the back end the back end is just an adapter over",
    "start": "410240",
    "end": "416599"
  },
  {
    "text": "some real back end that can sometimes be a Mainframe and we thought what better place to use functional programming",
    "start": "416599",
    "end": "422199"
  },
  {
    "text": "because you're basically transforming what's coming from the real back end to something that goes on an htpn Point Json to the JavaScript front end we",
    "start": "422199",
    "end": "429000"
  },
  {
    "text": "chose closure for it and people were not so used to it they",
    "start": "429000",
    "end": "434319"
  },
  {
    "text": "were struggling and we gave it like two years to be honest with you on the services and still when we then ask the",
    "start": "434319",
    "end": "440599"
  },
  {
    "text": "teams the next microservice what do you want to write it in the answer was cotland honestly because they were like",
    "start": "440599",
    "end": "447240"
  },
  {
    "text": "yeah this is there's still a lot of state and we want to ship objects and there's a it was it's a sales system there's there's a customer object and",
    "start": "447240",
    "end": "453560"
  },
  {
    "text": "products and we can model this in our head and we understand this and we we know the patterns and it was really it",
    "start": "453560",
    "end": "459240"
  },
  {
    "text": "was heartbreaking for me to see there was a place where a client didn't object to us using closure where it was really",
    "start": "459240",
    "end": "464639"
  },
  {
    "text": "a great area of application and still on the whole the team said the experience was good but when asked would you do it",
    "start": "464639",
    "end": "470720"
  },
  {
    "text": "again which is the critical question they said no we choose Scotland that's interesting I I",
    "start": "470720",
    "end": "476720"
  },
  {
    "text": "definitely um I know people who have stories on both sides of like people who have a similar story where um they tried",
    "start": "476720",
    "end": "482400"
  },
  {
    "text": "like uh maybe in the case of elm like they you know were used to like reac and typescript they tried Elm and and they",
    "start": "482400",
    "end": "488919"
  },
  {
    "text": "didn't like it they they're like you know what I want to go back or maybe they went and like U like rescript or some other um slightly more",
    "start": "488919",
    "end": "494680"
  },
  {
    "text": "objectoriented Direction I guess some people would argue with me about that but I think that's accurate um uh but",
    "start": "494680",
    "end": "499759"
  },
  {
    "text": "then I also know quite a lot of people who have the opposite story where you know they they try they like I can never go back um and actually that's like",
    "start": "499759",
    "end": "506199"
  },
  {
    "text": "where a lot of our hiring comes from is just people who are like now that had a taste I can't go back to you know not",
    "start": "506199",
    "end": "511560"
  },
  {
    "text": "cotland specifically but like you know the the objectoriented world I I I need more of this functional stuff in my life",
    "start": "511560",
    "end": "516839"
  },
  {
    "text": "um I want to go back to something you said though because I think this is a good observation that like humans like",
    "start": "516839",
    "end": "522120"
  },
  {
    "text": "classification that's like kind of a fun activity for us um but something that I I I was reflecting on somewhat recently",
    "start": "522120",
    "end": "528720"
  },
  {
    "text": "was uh like looking back at my history with object-oriented programming and I did spend a lot of time on that and I did enjoy it but I don't think it",
    "start": "528720",
    "end": "536000"
  },
  {
    "text": "actually helped me out that much in terms of my codee like I spent a lot of time classifying like what what is this thing what should it be like what should",
    "start": "536000",
    "end": "542320"
  },
  {
    "text": "the taxonomy be what should the hierarchy be but in terms of like what what did I actually get out of it in terms of like productivity I don't think",
    "start": "542320",
    "end": "548600"
  },
  {
    "text": "it really paid off so I appreciate I I agree with the point that like I think as humans we like that but I'm not sure",
    "start": "548600",
    "end": "554680"
  },
  {
    "text": "if that means that it should be in the language maybe it's like a Temptation that's better to",
    "start": "554680",
    "end": "559760"
  },
  {
    "text": "remove inheritance is probably a Temptation that is better to REM Ian I mean you can do op on programming and",
    "start": "559760",
    "end": "566399"
  },
  {
    "text": "completely overdo it with inheritance and that I have seen oh isn't everything on an abstract level",
    "start": "566399",
    "end": "571720"
  },
  {
    "text": "just something and you're like yeah that's true but when you write code you get these really almost empty base",
    "start": "571720",
    "end": "576800"
  },
  {
    "text": "classes there's hardly anything in there and you're like why did we even make there a common super type I I get that",
    "start": "576800",
    "end": "582240"
  },
  {
    "text": "yeah well I also remember um like one of the like Enterprise Java jobs I worked earlier on in my career um and this is",
    "start": "582240",
    "end": "588399"
  },
  {
    "text": "more than 10 years ago but I think this is probably still done in quite a lot of places was we had a rule on the team that um you basically like I guess the",
    "start": "588399",
    "end": "595079"
  },
  {
    "text": "lisov substitution principle like always build to the interface and then always only only return concrete types you know",
    "start": "595079",
    "end": "600440"
  },
  {
    "text": "when you need to so we'd always say we're going to use the list interface like everywhere except when you need to actually make one and then you're going",
    "start": "600440",
    "end": "605920"
  },
  {
    "text": "to use array list um the thing is we always did exactly that we always had",
    "start": "605920",
    "end": "611160"
  },
  {
    "text": "exactly list for the interface and we always had exactly array list for the implementation and then wherever we were making our classes there was also the",
    "start": "611160",
    "end": "617160"
  },
  {
    "text": "corresponding rule that you had to make an interface first and then we would always make an interface and then make exactly one class that implemented all",
    "start": "617160",
    "end": "623720"
  },
  {
    "text": "the methods in that interface and then that's what we would use everywhere and I looked back and I was like well I know that the principle was well this way",
    "start": "623720",
    "end": "629920"
  },
  {
    "text": "theoretically if we want to we can swap out the implementation for something else but I was like you know based on how often we did that which was in the",
    "start": "629920",
    "end": "636839"
  },
  {
    "text": "like two years I worked at that company zero times I I I think we probably would have been better off if we' just been",
    "start": "636839",
    "end": "641920"
  },
  {
    "text": "like you know what let's just assume we're going to pay the price if we ever do need to change this and we won't have all the interfaces in place we'll just",
    "start": "641920",
    "end": "647920"
  },
  {
    "text": "go through and do the change to switch it from one class to another I think that would have been much cheaper uh so",
    "start": "647920",
    "end": "653399"
  },
  {
    "text": "even though even without the inheritance that just seemed like um and this is also not about classification really just about I guess premature abstraction",
    "start": "653399",
    "end": "659680"
  },
  {
    "text": "perhaps um but yeah that that Temptation kind of stuck with me and I I or maybe not temptation but just thinking about",
    "start": "659680",
    "end": "666320"
  },
  {
    "text": "like how we can spend so much time following what seems like a nice thing or or a best practice and then being",
    "start": "666320",
    "end": "671720"
  },
  {
    "text": "like but did it really pay for itself I don't know good point good point that brings",
    "start": "671720",
    "end": "677600"
  },
  {
    "text": "me to testability that should be really in the language and why am I thinking that because historically one of the",
    "start": "677600",
    "end": "685480"
  },
  {
    "text": "drivers for this interface implementation separation was testability this was remember like 10 15",
    "start": "685480",
    "end": "690680"
  },
  {
    "text": "years ago dependency injection was something new and people sometimes did this and said okay let's separate the",
    "start": "690680",
    "end": "696600"
  },
  {
    "text": "interface from the implementation because then in the test you only have the interface you can't instantiate it or in your code you can't instantiate an",
    "start": "696600",
    "end": "703480"
  },
  {
    "text": "interface which means you must declare dependency and then you force the teams to use dependency injection so there",
    "start": "703480",
    "end": "708760"
  },
  {
    "text": "were some other motivations behind I'm noticing again when you do unit testing",
    "start": "708760",
    "end": "714040"
  },
  {
    "text": "you often want to mock the surrounding things and I've actually written a mock object framework for objective c",
    "start": "714040",
    "end": "719519"
  },
  {
    "text": "and when I when Swift came out people asked me can you make the Swift version I was like no I can't because I don't have the runtime to do this even there",
    "start": "719519",
    "end": "726240"
  },
  {
    "text": "there's just no way that I can do all the trickery in the runtime that I could do with Objective C but that means then",
    "start": "726240",
    "end": "732519"
  },
  {
    "text": "the interface are becoming more important because then you can stop away and you can do things in your test in the unit test especially yeah I think I",
    "start": "732519",
    "end": "739560"
  },
  {
    "text": "think that's a great point about testability in general and I actually I would take it a step further and say that to me any any new language you",
    "start": "739560",
    "end": "746320"
  },
  {
    "text": "might as well in like plan to design the language with tests in mind because at",
    "start": "746320",
    "end": "751800"
  },
  {
    "text": "this point I mean historically it seems like most languages were designed where you've got got a compiler and we've got like a language design and then there's",
    "start": "751800",
    "end": "758440"
  },
  {
    "text": "these ancillary things that everyone's going to do sooner or later but it's always for some reason considered",
    "start": "758440",
    "end": "763720"
  },
  {
    "text": "outside the scope of the language even though you know it's going to happen someone's going to write a test framework there's going to be a package manager and there's going to and now in",
    "start": "763720",
    "end": "770399"
  },
  {
    "text": "more recent years it seems very safe to assume there's going to be a format that's going to you know format your code in a specific way I think go",
    "start": "770399",
    "end": "776240"
  },
  {
    "text": "started that but I mean plenty of languages have picked that up now um and so at that point it seems like well if",
    "start": "776240",
    "end": "782000"
  },
  {
    "text": "if you know this is going to be done by someone at some point seems like you should just design for it you could do a",
    "start": "782000",
    "end": "787600"
  },
  {
    "text": "better job or or make it you know more well supported um if you're planning ahead for it and yeah testing is definitely definitely a big one I mean",
    "start": "787600",
    "end": "794360"
  },
  {
    "text": "this is something we see with rust for example I mean they put the package manager into the language I mean not the programming language but it comes with",
    "start": "794360",
    "end": "800160"
  },
  {
    "text": "rust right I mean there's no way to do rust without the package manager they put the unit test actually into the same file as the code so they really thought",
    "start": "800160",
    "end": "806880"
  },
  {
    "text": "that through yeah that's definitely inspiration to take from I mean it it should be",
    "start": "806880",
    "end": "812120"
  },
  {
    "text": "testable I mean I think in in this day and age we really have to have a language where you can write unit test because we know that we are writing",
    "start": "812120",
    "end": "818040"
  },
  {
    "text": "increasing amounts of code that stays around for a while we talk about shifting away from projects to products these Services we expect to live for a",
    "start": "818040",
    "end": "824360"
  },
  {
    "text": "while and if you don't write tests yeah you might as well give up I guess yeah yeah they're definitely uh uh",
    "start": "824360",
    "end": "832000"
  },
  {
    "text": "indispensable can't do without um okay I want to go back to memory management for a second so because you mentioned rust",
    "start": "832000",
    "end": "838000"
  },
  {
    "text": "and so I think we we agree that at least for the types of problems we're talking about solving we're probably you know",
    "start": "838000",
    "end": "843399"
  },
  {
    "text": "want to go automatic memory management um but there are a couple of different ways of doing that so you mentioned like automatic reference counting or like",
    "start": "843399",
    "end": "849600"
  },
  {
    "text": "rust has the ownership system so it's just freeing and allocating things on the Fly and then you have like the the most popular which is Trac and garbage",
    "start": "849600",
    "end": "855880"
  },
  {
    "text": "collection um to me of those three Trac and garbage collection is the least",
    "start": "855880",
    "end": "860920"
  },
  {
    "text": "appealing even though it's the most popular just because you have GC pauses and I know that like jvm and go have spent a lot of time decreasing pause",
    "start": "860920",
    "end": "867680"
  },
  {
    "text": "times like decreasing l and all that stuff um but it still seems like you know at the end of the day you just",
    "start": "867680",
    "end": "873639"
  },
  {
    "text": "don't have to worry about that problem if you can do automatic reference counting or you know allocating and freeing on the fly like like Russ does",
    "start": "873639",
    "end": "880040"
  },
  {
    "text": "um but then there's always the question of latency versus throughput and you know supposedly tracing gc's have the",
    "start": "880040",
    "end": "885600"
  },
  {
    "text": "highest throughput over a given period of time compared to automatic reference counting and so forth um but I'm also",
    "start": "885600",
    "end": "890759"
  },
  {
    "text": "aware of some research and this is spoiler alert in the language I'm working on where we're we're going down the automatic reference counting route",
    "start": "890759",
    "end": "896279"
  },
  {
    "text": "um but you can do stuff like compile time reference Counting where you can detect that oh there's going to be an increment here and a decrement here",
    "start": "896279",
    "end": "902360"
  },
  {
    "text": "those will just canc each other out so we're not going to do either of those um so it's hard to say in practice like we haven't the language is called Rock R um",
    "start": "902360",
    "end": "910519"
  },
  {
    "text": "but uh rock- l.org um and uh we haven't gotten any like big",
    "start": "910519",
    "end": "915560"
  },
  {
    "text": "enough projects because it's a very work in progress like very early stages kind of thing um we haven't gotten a big enough thing that we can really",
    "start": "915560",
    "end": "921240"
  },
  {
    "text": "definitively say yet um but but so far it seems like um the the frequency that",
    "start": "921240",
    "end": "926399"
  },
  {
    "text": "with which it's possible to use these papers and these techniques that we learned um to do this compile time reference count it seems like quite a",
    "start": "926399",
    "end": "932160"
  },
  {
    "text": "lot of the reference counts can be all lighted so we'll see yeah my impression was also the tracing garbage collectors",
    "start": "932160",
    "end": "938040"
  },
  {
    "text": "just work I mean there's a lot of theory behind it you can get a reasonable implementation work you have long pauses but in some cases it doesn't matter so",
    "start": "938040",
    "end": "944079"
  },
  {
    "text": "much and I think it is exactly like you said the research has gone further now so understanding this and I mean Russ",
    "start": "944079",
    "end": "950720"
  },
  {
    "text": "didn't invent the borrow ship or the this concept but they were the first one to get it actually implemented properly",
    "start": "950720",
    "end": "956480"
  },
  {
    "text": "and I think what we're seeing now is that a lot of the concepts that are somewhere in the middle between no memory management and the tracing",
    "start": "956480",
    "end": "961639"
  },
  {
    "text": "garbage collectors which they they're like a blunt tool if you will right you know they work and you can't make a big",
    "start": "961639",
    "end": "967440"
  },
  {
    "text": "mistake and we're exploring the middle ground now and I think we will see more and more successful languages in that middle ground on the performance I'm",
    "start": "967440",
    "end": "974560"
  },
  {
    "text": "curious I mean I I know all the theory in in Java about the different generations of objects and most objects",
    "start": "974560",
    "end": "980360"
  },
  {
    "text": "are thrown away again if you're writing websites probably most of the objects are there just for a brief moment in time to create the response you can",
    "start": "980360",
    "end": "986680"
  },
  {
    "text": "throw them away you don't get fragmentation like you would in other languages but sometimes you can compact the Heap I think that there's room for",
    "start": "986680",
    "end": "993480"
  },
  {
    "text": "experimentation and I think there's enough systems that will be for the programmers they'll be happy if they",
    "start": "993480",
    "end": "998720"
  },
  {
    "text": "don't know I mean if if you can't tell whether you're using a tracing garbage collector or automatic reference",
    "start": "998720",
    "end": "1004120"
  },
  {
    "text": "counting or something similar as a programmer you don't care and you probably choose the language based on",
    "start": "1004120",
    "end": "1009160"
  },
  {
    "text": "other features but if the language doesn't have to use a tracing garbage collector it's probably better for you yeah yeah two interesting areas of",
    "start": "1009160",
    "end": "1015240"
  },
  {
    "text": "research um around that so compacting there was a really cool talk at strange Loop a couple years ago called I think it was called compacting the",
    "start": "1015240",
    "end": "1021120"
  },
  {
    "text": "uncompatible and it was basically about how they designed implementation of Malik that actually can do compacting um",
    "start": "1021120",
    "end": "1028199"
  },
  {
    "text": "really impressive stuff and they were using some very fancy tricks to make that happen but of course an automatic reference counting system could use that",
    "start": "1028199",
    "end": "1034480"
  },
  {
    "text": "um and then the other is uh throughput of automatic reference counting versus uh tracing GC um apparently apple is",
    "start": "1034480",
    "end": "1041160"
  },
  {
    "text": "because Swift does automatic reference counting um they're actually working on at the hardware level making that faster and adding like uh some I don't remember",
    "start": "1041160",
    "end": "1047880"
  },
  {
    "text": "exactly what was some sort of like either a new CPU instruction or or augmenting existing CPU instructions for",
    "start": "1047880",
    "end": "1054280"
  },
  {
    "text": "um like Atomic reference counts to make them you know uh faster um and that's that's definitely uh an interesting sign",
    "start": "1054280",
    "end": "1060880"
  },
  {
    "text": "of potential things to come because if you think about it you have this big company that's really heavily invested in uh not only in you know Swift as a",
    "start": "1060880",
    "end": "1068320"
  },
  {
    "text": "language but also in making their own Hardware um that's the type of thing that can influence other processor makers to try and you know keep Pace",
    "start": "1068320",
    "end": "1075559"
  },
  {
    "text": "with what Apple's doing um and so if Apple's making Hardware level optimizations for automatic reference counting but not for tracing GC or I I",
    "start": "1075559",
    "end": "1082200"
  },
  {
    "text": "don't really know what that would look like um that's an interesting you know uh potential thing to keep in mind that like the even at the hardware level",
    "start": "1082200",
    "end": "1088919"
  },
  {
    "text": "there might be potential improvements even if the software algorithm say the same yeah and apple is motivated I mean",
    "start": "1088919",
    "end": "1094159"
  },
  {
    "text": "they have tried they have tried garbage collectors they tried the whole Java intro they tried to have a garbage collector for objective c and they",
    "start": "1094159",
    "end": "1100440"
  },
  {
    "text": "really concluded that for their use case it didn't work so they are very very motivated to make automated reference",
    "start": "1100440",
    "end": "1106679"
  },
  {
    "text": "counting work and I mean by by all means it generally works I mean there's probably slightly more cases where you",
    "start": "1106679",
    "end": "1111840"
  },
  {
    "text": "can have errors of cyclical dependencies and holding on to each other you can still create the same problem with the",
    "start": "1111840",
    "end": "1117240"
  },
  {
    "text": "tracing garbage collector though if you just have a static variable somewhere that that you're where you store something but on the whole I think they",
    "start": "1117240",
    "end": "1123480"
  },
  {
    "text": "will make it work and like you said I mean if they can reduce the performance impact at that level then there's very",
    "start": "1123480",
    "end": "1130200"
  },
  {
    "text": "little that stands in the way of doing that more widespread yeah interesting note about cyclic dependencies um this is like one of the reasons that we",
    "start": "1130200",
    "end": "1136200"
  },
  {
    "text": "decided to go with automatic reference counting is that so rock is a pure functional language and it's actually because there's no semantic way to",
    "start": "1136200",
    "end": "1141880"
  },
  {
    "text": "express mutation in the language there's also no way to create cyclic data so so we don't have to worry about that at all",
    "start": "1141880",
    "end": "1147960"
  },
  {
    "text": "um but that's unusual only if you're you know only if you've subtracted that much from the language do you get can you get",
    "start": "1147960",
    "end": "1153280"
  },
  {
    "text": "away with that what kind of concurrency model do you think would be a good fit for the ideal language that doesn't",
    "start": "1153280",
    "end": "1159840"
  },
  {
    "text": "exist H I don't think I can explain that in the in the context of rock without going on a really long tangent",
    "start": "1159840",
    "end": "1166880"
  },
  {
    "text": "um so I from Elixir and I think that has a really great concurrency model and",
    "start": "1166880",
    "end": "1172840"
  },
  {
    "text": "it's sort of building upon the past in the sense that it uses llang as its foundation and llang was sort of",
    "start": "1172840",
    "end": "1179320"
  },
  {
    "text": "building for the Telecom systems where you're you're have like when you're on a phone call it should be invisible to the",
    "start": "1179320",
    "end": "1185559"
  },
  {
    "text": "user that oh now you're actually going through that cell tower not that cell tower so in in a sense it's very good",
    "start": "1185559",
    "end": "1191679"
  },
  {
    "text": "for distributed systems um and as a like as a programmer in the language it's",
    "start": "1191679",
    "end": "1198240"
  },
  {
    "text": "almost like it's incredibly easy to write concurrent code it's all built in it's sort of by default you don't really",
    "start": "1198240",
    "end": "1204720"
  },
  {
    "text": "have to think too much about it and like running a piece of code on this computer versus running it on another computer",
    "start": "1204720",
    "end": "1211039"
  },
  {
    "text": "across the world over the Internet is extremely similar as a programmer you don't have to jump through a lot of Hoops to do that the sort of the the",
    "start": "1211039",
    "end": "1217280"
  },
  {
    "text": "beam takes care of it all as long as you have those notes clustered together in the same cluster it's it's a matter of",
    "start": "1217280",
    "end": "1222440"
  },
  {
    "text": "just telling hey the other computer run this code please and it does that uh and I think that's a really a really",
    "start": "1222440",
    "end": "1228880"
  },
  {
    "text": "powerful model um yeah so I think earling is an interesting example of of like a domain specific language because",
    "start": "1228880",
    "end": "1235480"
  },
  {
    "text": "the the the concurrency model that it has personally I've not actually like written a line of llang or Elixir um but",
    "start": "1235480",
    "end": "1241320"
  },
  {
    "text": "my my understanding from like reading up about it and talking to people is that it's basically like a message CU based system um and so you can pass messages",
    "start": "1241320",
    "end": "1248280"
  },
  {
    "text": "between different they call them processes but what they mean is uh you know sort of like I don't want to say threads because they don't mat to",
    "start": "1248280",
    "end": "1254360"
  },
  {
    "text": "operating system threads but um you know threadlike things perhaps um and and then basically the the",
    "start": "1254360",
    "end": "1260159"
  },
  {
    "text": "message cues are automatically sort of handled by the runtime and uh and since it's all immutable um you don't have to",
    "start": "1260159",
    "end": "1265320"
  },
  {
    "text": "worry about things like data races and stuff like that so that makes a lot of sense for a lot of use cases but I I",
    "start": "1265320",
    "end": "1270600"
  },
  {
    "text": "suspect that for example somebody who's thinking about concurrency in the context of making like a really high performance game they're a lot more",
    "start": "1270600",
    "end": "1276640"
  },
  {
    "text": "concerned with a single-threaded performance and B um the overhead about you know communication they probably",
    "start": "1276640",
    "end": "1282320"
  },
  {
    "text": "actually want to do like you know mutexes and locks and like you know direct mutation of things um and even",
    "start": "1282320",
    "end": "1288080"
  },
  {
    "text": "even though that's a more error prone concurrency model it also runs faster and they're probably a lot more concerned with that so I think again it",
    "start": "1288080",
    "end": "1294279"
  },
  {
    "text": "kind of comes back down to use cases so um if you're focusing on like you know distributed systems like servers",
    "start": "1294279",
    "end": "1300159"
  },
  {
    "text": "specifically um yeah I think it's like that's a great model um for concurrency",
    "start": "1300159",
    "end": "1306320"
  },
  {
    "text": "uh but I don't know uh I guess it depends on um you know what your ideal language wants to be ideal for yeah I",
    "start": "1306320",
    "end": "1313240"
  },
  {
    "text": "guess it's all a trade-off right yeah um yeah I think I I agree with with the",
    "start": "1313240",
    "end": "1318360"
  },
  {
    "text": "idea of having in go I think they're called channels or something which makes it easy to shift data from one thread to another to build that in Rust as",
    "start": "1318360",
    "end": "1324960"
  },
  {
    "text": "something similar the the languages are doing that I think though sometimes this",
    "start": "1324960",
    "end": "1330039"
  },
  {
    "text": "parallel programming is overestimated I mean we don't see these massively parallel computers that people talked",
    "start": "1330039",
    "end": "1335240"
  },
  {
    "text": "about like 20 years ago mean we're seeing more cores now we're seeing like 20 30 maybe even 60 cores that's but let",
    "start": "1335240",
    "end": "1341240"
  },
  {
    "text": "go to 100 for most cases and like you said in video games and so on for most cases you don't have a single",
    "start": "1341240",
    "end": "1346640"
  },
  {
    "text": "application that does one task and needs to utilize all the cost for it maybe on the graphics card and so on but not for",
    "start": "1346640",
    "end": "1352279"
  },
  {
    "text": "the processing itself so what we often find is that you need parallel Computing in server applications where you are",
    "start": "1352279",
    "end": "1359240"
  },
  {
    "text": "servicing multiple parallel requests and then it becomes very easy right if you have a web server and you have a",
    "start": "1359240",
    "end": "1364799"
  },
  {
    "text": "thousand concurrent users and you have a thousand threads question is should you do that from a through perspective but you have a thousand threads then it's",
    "start": "1364799",
    "end": "1370679"
  },
  {
    "text": "very easy they just shouldn't get in their way you should have something to make the threats isolated but to have",
    "start": "1370679",
    "end": "1376840"
  },
  {
    "text": "this thing where all the threats communicate all the time I mean I I mentioned this in the rust talk in the",
    "start": "1376840",
    "end": "1382039"
  },
  {
    "text": "simulation it didn't even make sense to break it up into multiple threats because the communication overhead was so big and the calculation then became",
    "start": "1382039",
    "end": "1389000"
  },
  {
    "text": "completely background noise in all the communication between the threads that I didn't get a speed up interestingly um",
    "start": "1389000",
    "end": "1395440"
  },
  {
    "text": "so one form of parallelism we haven't talked about is sort of like really low-level data parallelism like on the CPU like you know simd um it seems like",
    "start": "1395440",
    "end": "1402400"
  },
  {
    "text": "there actually have been a lot of advances there uh in terms of like like simd Json is like several 100% faster",
    "start": "1402400",
    "end": "1409000"
  },
  {
    "text": "than like other Json like really highly optimized Json parsers that don't use simd but the algorithms are completely",
    "start": "1409000",
    "end": "1414720"
  },
  {
    "text": "different it's like I I started reading the paper on that and it's and it's just like it doesn't even look like parsing",
    "start": "1414720",
    "end": "1420240"
  },
  {
    "text": "anymore because it's just so completely different what they're doing um but it runs way faster because they can do like",
    "start": "1420240",
    "end": "1425279"
  },
  {
    "text": "you know 8 to 16x you know amount of work at once um but that's you know I",
    "start": "1425279",
    "end": "1432159"
  },
  {
    "text": "don't know if that's something that uh at least currently there there are like really good language level abstractions for like I don't even know how you would",
    "start": "1432159",
    "end": "1438440"
  },
  {
    "text": "you know design an abstraction for that that's like oh other other than just saying like well maybe the optimizer can",
    "start": "1438440",
    "end": "1443919"
  },
  {
    "text": "recognize that like we can you know simd ify these this chunk of instructions um but it doesn't seem like uh uh I would",
    "start": "1443919",
    "end": "1451159"
  },
  {
    "text": "love to steal something from a language where it's like oh this is like ear Langs you know is really great for like",
    "start": "1451159",
    "end": "1456200"
  },
  {
    "text": "servers this style of concurrency is there some similar thing for expressing like simd like algorithms like simd Json",
    "start": "1456200",
    "end": "1462799"
  },
  {
    "text": "in an abstract way so you don't have to you know get as low level about it I'm not aware of it uh maybe some will come",
    "start": "1462799",
    "end": "1468200"
  },
  {
    "text": "up with it but I I just don't know yeah are there any um I me you both",
    "start": "1468200",
    "end": "1473840"
  },
  {
    "text": "seem excited about rust right now but are there any other languages you see sort of on the horizon that are up and",
    "start": "1473840",
    "end": "1479960"
  },
  {
    "text": "coming very early stages that you think look interesting absolutely I've just",
    "start": "1479960",
    "end": "1485279"
  },
  {
    "text": "heard about one rock I was going to say rock I was goingon to say Zig okay I haven't heard",
    "start": "1485279",
    "end": "1491080"
  },
  {
    "text": "about Zig what's what's that about so zigg is uh I I would say um approaching the same uh problem domains as rust um",
    "start": "1491080",
    "end": "1499000"
  },
  {
    "text": "but coming at it from a very different angle so um having used both languages uh I would I would describe and and also",
    "start": "1499000",
    "end": "1505480"
  },
  {
    "text": "um we actually use Zig and rock for the standard Library so the standard library and rock is implemented in Zig um so I",
    "start": "1505480",
    "end": "1511919"
  },
  {
    "text": "think uh if I were to pitch Zig the way that I would pitch it is uh it's basically like let's take C and let's",
    "start": "1511919",
    "end": "1518919"
  },
  {
    "text": "keep the Simplicity and the sort of like bare bonness but let's add ergonomics on top of it but without adding a lot of",
    "start": "1518919",
    "end": "1525640"
  },
  {
    "text": "complexity um rust is like let's try to make a completely different language",
    "start": "1525640",
    "end": "1531320"
  },
  {
    "text": "from C uh any amount of complexity is acceptable as long as we have these",
    "start": "1531320",
    "end": "1537039"
  },
  {
    "text": "really strong guarantees about memory safety about uh you know if it compiles it's you know it's probably going to",
    "start": "1537039",
    "end": "1542799"
  },
  {
    "text": "work and you know really really strong guarantees so Zig is definitely Less on the side of guarantees but very much on",
    "start": "1542799",
    "end": "1549720"
  },
  {
    "text": "the side of ergonomics and especially in terms of um speed for the developer so like the zig compiler is extremely fast",
    "start": "1549720",
    "end": "1557159"
  },
  {
    "text": "like it runs super super fast the rust compiler is extremely not I mean that's",
    "start": "1557159",
    "end": "1562320"
  },
  {
    "text": "like my number one number two number three and number four and five and six complain about Russ's compile times uh",
    "start": "1562320",
    "end": "1567640"
  },
  {
    "text": "just like how long I spend waiting for it um not the case with Sig it's like really fast they're working on like hot",
    "start": "1567640",
    "end": "1572679"
  },
  {
    "text": "code loading for you know C like language which is you know ridiculous and it like Zig also cross compiles",
    "start": "1572679",
    "end": "1578760"
  },
  {
    "text": "anything so on my Mac I can compile a Linux binary and a Mac binary and a Windows binary you know don't even have",
    "start": "1578760",
    "end": "1584039"
  },
  {
    "text": "to spin up a VM there's just all these little things that um and I can't do that in Rust either um so if I were to",
    "start": "1584039",
    "end": "1589679"
  },
  {
    "text": "make a ven diagram it's like well both of them can get really low level about memory management um and things like this Zig does not have the borrow",
    "start": "1589679",
    "end": "1595840"
  },
  {
    "text": "Checker so it does not have the guarantees about memory safety um which I definitely you know very much value from rust um but whenever I'm sitting",
    "start": "1595840",
    "end": "1603919"
  },
  {
    "text": "there waiting for Russ to compile or being like how are we going to build Rock for you know windows and and Linux",
    "start": "1603919",
    "end": "1609520"
  },
  {
    "text": "and all these things and I'm like well wouldn't it be nice if I could just actually cross- compile to it um so you know as an upand cominging language like",
    "start": "1609520",
    "end": "1615200"
  },
  {
    "text": "Zig is much younger than than rust um but I can definitely see a really strong appeal um personally my prediction is",
    "start": "1615200",
    "end": "1621320"
  },
  {
    "text": "that uh Zig will probably outcompete rust in the specific niche of people",
    "start": "1621320",
    "end": "1627200"
  },
  {
    "text": "making games because I think if you're making games you're probably going to have to do a lot of memory unsafe stuff",
    "start": "1627200",
    "end": "1632640"
  },
  {
    "text": "anyway I this is like my impression as someone who does not make games um but it seems like just to just to squeeze",
    "start": "1632640",
    "end": "1638799"
  },
  {
    "text": "out every last inch of performance out of you know a game engine or something like that um I'd imagine if you're writing rust you're writing using the",
    "start": "1638799",
    "end": "1645000"
  },
  {
    "text": "unsafe keyword a lot at which point it's like well why don't we get all these ergonomic improvements too especially because",
    "start": "1645000",
    "end": "1650640"
  },
  {
    "text": "games also have a reputation for like crunch time and spending a lot of time you know waiting for a compiler like really kind of adds up so um but I don't",
    "start": "1650640",
    "end": "1658200"
  },
  {
    "text": "know that's time will tell but that sounds interesting I'll keep an eye out for that um what about you Eric do you",
    "start": "1658200",
    "end": "1664039"
  },
  {
    "text": "have any upand cominging languages you're excited about yeah curiously not really to be honest with you I mean thoughtworks as a consulting company we",
    "start": "1664039",
    "end": "1669919"
  },
  {
    "text": "work with a lot of companies usually in the Enterprise bace consumer facing websites internal systems and so on and",
    "start": "1669919",
    "end": "1677039"
  },
  {
    "text": "we often I mean that's part of our culture we really look at new things we always try to find new things I mentioned this system that we were",
    "start": "1677039",
    "end": "1682880"
  },
  {
    "text": "beginning to build enclosure and we've tracked a lot of different programming languages over time and there was really",
    "start": "1682880",
    "end": "1687919"
  },
  {
    "text": "like 5 10 years ago there was this wave of new programming languages a lot of exploration a lot of excitement but from",
    "start": "1687919",
    "end": "1693760"
  },
  {
    "text": "our perspective has really really settled down I mean there's in in the web browser at the moment there's a clear from our perspective winner in",
    "start": "1693760",
    "end": "1700120"
  },
  {
    "text": "typescript yeah that's what you use and on the server side as I mentioned cotlin is the one that most teams really find a",
    "start": "1700120",
    "end": "1706559"
  },
  {
    "text": "good compromise it doesn't win in any category but it seems to be really good all around compromise that said I am",
    "start": "1706559",
    "end": "1712799"
  },
  {
    "text": "curious to see what will happen in the web browser with web assembly because I mean I'm making no secret I don't I'm",
    "start": "1712799",
    "end": "1718240"
  },
  {
    "text": "not a great fan of JavaScript or typescript and I think we even had talks here at goto conference talking about",
    "start": "1718240",
    "end": "1724080"
  },
  {
    "text": "how even the original designers of JavaScript said they would probably would have liked to do a better job of",
    "start": "1724080",
    "end": "1729399"
  },
  {
    "text": "it if they hadn't been pushed to do it in like a very short amount of time and we're still settled with it I still by",
    "start": "1729399",
    "end": "1735600"
  },
  {
    "text": "the way even in JavaScript you do see this move towards more functional programming by the way in in even like",
    "start": "1735600",
    "end": "1741240"
  },
  {
    "text": "big Frameworks like reactor moving that way and so on and it's still under the hood it's JavaScript and there is all",
    "start": "1741240",
    "end": "1746600"
  },
  {
    "text": "there's reason for all the jokes about JavaScript about how the inconsistency and so on it featured quite heavily also",
    "start": "1746600",
    "end": "1751960"
  },
  {
    "text": "in the party keynote so I've been waiting for a proper replacement and the transpilation approaches weren't that",
    "start": "1751960",
    "end": "1758159"
  },
  {
    "text": "successful I think I mean Dart is sometimes mentioned but it I don't think you could get it into all the different web browsers so I I'm curious to see",
    "start": "1758159",
    "end": "1765760"
  },
  {
    "text": "what will happen with web assembly and we'll will see what we what new programming language will emerge to",
    "start": "1765760",
    "end": "1770799"
  },
  {
    "text": "write web applications not writing video games that run in a web browser but something to replace what we currently",
    "start": "1770799",
    "end": "1776039"
  },
  {
    "text": "do with typescript I'm looking forward to that okay yeah I mean I think web assembly is really interesting because",
    "start": "1776039",
    "end": "1781159"
  },
  {
    "text": "we've had a long period of time where if you wanted to run in the browser JavaScript wor your only choice but I guess we're getting close to the point",
    "start": "1781159",
    "end": "1787000"
  },
  {
    "text": "where you can use whatever language you prefer if the community supports it and builds the tooling for it right so that",
    "start": "1787000",
    "end": "1793399"
  },
  {
    "text": "that's going to be interesting to see in the next few years yeah we we've had first engagements with lines where people are using Blazer which is an",
    "start": "1793399",
    "end": "1799480"
  },
  {
    "text": "implementation of c and the corresponding tooling and Frameworks I mean it still has like first loow times you wouldn't use that on a b2c website",
    "start": "1799480",
    "end": "1806720"
  },
  {
    "text": "but I mean that is the first promising sign I think of a more modern and better designed programming language that can",
    "start": "1806720",
    "end": "1812760"
  },
  {
    "text": "actually run inside C I'm talking about that can run in the web browser yeah and",
    "start": "1812760",
    "end": "1818120"
  },
  {
    "text": "Elm cross compiles to JavaScript right or correct yeah compiles to JavaScript",
    "start": "1818120",
    "end": "1823320"
  },
  {
    "text": "yeah uh it's it's theoretically possible that Elm could compile the web assembly um and rock actually already does compile to web assembly um actually",
    "start": "1823320",
    "end": "1830080"
  },
  {
    "text": "personally I if I were to make a bet I would bet that uh I don't think web assembly is going to change much when it",
    "start": "1830080",
    "end": "1835720"
  },
  {
    "text": "comes to web applications um at least not in the next like decade maybe it's it's hard to predict further than that",
    "start": "1835720",
    "end": "1841559"
  },
  {
    "text": "um I think it's mainly just going to be games uh to be honest and um a lot of a lot of thoughts about why but um one of",
    "start": "1841559",
    "end": "1847240"
  },
  {
    "text": "the big ones is just that uh I don't think that people care that much about like performance in web applications um",
    "start": "1847240",
    "end": "1855679"
  },
  {
    "text": "I think it's sort of like close enough and if you know if you and one of the reasons I think this is that the first",
    "start": "1855679",
    "end": "1860919"
  },
  {
    "text": "time Elm released benchmarks was like Hey look we're faster than like all these uh you know JavaScript Frameworks",
    "start": "1860919",
    "end": "1866480"
  },
  {
    "text": "faster at rendering like smaller asset sizes like the uh there was this real world app which was like 4,000 lines of",
    "start": "1866480",
    "end": "1872600"
  },
  {
    "text": "elm and it's like um it's an entire like medium clone not an entire but like you know whatever it's a it's it's a",
    "start": "1872600",
    "end": "1878760"
  },
  {
    "text": "substantial application that that does a lot of stuff um compiled it's like smaller than just react like that entire",
    "start": "1878760",
    "end": "1885799"
  },
  {
    "text": "application right like spent a lot of time like making really small assets cuz everybody was like oh we got to decrease",
    "start": "1885799",
    "end": "1891200"
  },
  {
    "text": "our bundle sizes nobody cared um and then like you know Evan did a bunch of work optimizing the rendering it's like",
    "start": "1891200",
    "end": "1896679"
  },
  {
    "text": "look we're faster than react and angular and View and like everything right um and uh and and again people like okay",
    "start": "1896679",
    "end": "1902960"
  },
  {
    "text": "that's nice um so the idea that like you know oh well now that we have uh web assembly we can finally you know do even",
    "start": "1902960",
    "end": "1910080"
  },
  {
    "text": "better than that on performance I don't think that's the I don't think that's the real pitch I I do think there is uh definitely a potential pitch for um well",
    "start": "1910080",
    "end": "1918000"
  },
  {
    "text": "now you can use whatever language you want like you can use C but the thing is we've already had stuff like Scola JS",
    "start": "1918000",
    "end": "1923639"
  },
  {
    "text": "like I know like one team that's ever used Scola JS um but there's tons of people using scol on the back end so is",
    "start": "1923639",
    "end": "1929639"
  },
  {
    "text": "that really the issue is is it is that the lack of you know uh like speed in the front end and like um and there was",
    "start": "1929639",
    "end": "1936120"
  },
  {
    "text": "like ghcjs for hasell which I guess had a lot of performance problems but um I guess uh it seems to me that that has",
    "start": "1936120",
    "end": "1942360"
  },
  {
    "text": "been done before in the compil to JavaScript thing and I'm a little bit skeptical that the only missing piece was if if only you could compile to",
    "start": "1942360",
    "end": "1948240"
  },
  {
    "text": "something closer to um you know machine code then it would be fine I think it's really just that JavaScript and and now",
    "start": "1948240",
    "end": "1954799"
  },
  {
    "text": "typescript has this huge cultural momentum and if we look at like what's been successful in terms of like Mass",
    "start": "1954799",
    "end": "1961440"
  },
  {
    "text": "popularity it's really been JavaScript coffeescript whose tagline was it's just JavaScript and typescript whose tagline",
    "start": "1961440",
    "end": "1968159"
  },
  {
    "text": "is it's just JavaScript and that's it like those are the three big success stories and everything else like Elm and whatever like Elm is actually like um",
    "start": "1968159",
    "end": "1975480"
  },
  {
    "text": "the the most popular like widely used uh compiled to JavaScript language that's",
    "start": "1975480",
    "end": "1980880"
  },
  {
    "text": "not typescript at least according to the state of JS survey but it's a very very distant you know like below typescript",
    "start": "1980880",
    "end": "1987679"
  },
  {
    "text": "um so I I think I think the real issue there is just that like there's this huge ecosystem there's this huge",
    "start": "1987679",
    "end": "1993000"
  },
  {
    "text": "cultural momentum and all this you know like drive to to do that that even though yeah everybody complains about",
    "start": "1993000",
    "end": "1998919"
  },
  {
    "text": "JavaScript um it's it's still uh uh going to be I think Tak something more",
    "start": "1998919",
    "end": "2003960"
  },
  {
    "text": "than web assembly to change that cultural moment",
    "start": "2003960",
    "end": "2008960"
  },
  {
    "text": "I get what you mean and by the way coffee script I don't think is really a strong Contender anymore these days even",
    "start": "2010320",
    "end": "2015600"
  },
  {
    "text": "not anymore but what I think is I mean I agree with you on websites on L what we would consider a website or a shopping",
    "start": "2015600",
    "end": "2021919"
  },
  {
    "text": "website or a banking website and so on what we also see is there's a lot of internal it systems I mean one I",
    "start": "2021919",
    "end": "2027360"
  },
  {
    "text": "mentioned earlier is a sales system that is used by sales representatives like thousands of them and they installed on their installed I mean it's downloaded",
    "start": "2027360",
    "end": "2033600"
  },
  {
    "text": "in the cach of course of their web browsers on on iPads or or Windows machines and I think there and this is",
    "start": "2033600",
    "end": "2039399"
  },
  {
    "text": "probably no coincidence that it's Blazer and C that is the first one that we are seeing making use of web assembly I",
    "start": "2039399",
    "end": "2045919"
  },
  {
    "text": "think there's still a ton of developers out there who used to writing applications that they used inhouse and they have so far they have",
    "start": "2045919",
    "end": "2053358"
  },
  {
    "text": "tried react and react is yeah I mean it has a SE learning curve and then or people were told don't use this use",
    "start": "2053359",
    "end": "2059000"
  },
  {
    "text": "angular and then they go which one are you using and then say no no forget about this let's use View and they bit confused about this and also JavaScript",
    "start": "2059000",
    "end": "2066398"
  },
  {
    "text": "is not productive programming language and I think what you will see that's at least my prediction that big companies",
    "start": "2066399",
    "end": "2071878"
  },
  {
    "text": "like Microsoft they have something to gain here and I think C is already spreading more on the server side you",
    "start": "2071879",
    "end": "2077398"
  },
  {
    "text": "can run it on operating systems other than Windows and that whole idea that you can stay within one",
    "start": "2077399",
    "end": "2083960"
  },
  {
    "text": "ecosystem will put some extra weight on it I think performance is a hygiene Factor it can't be slow in the web",
    "start": "2083960",
    "end": "2090720"
  },
  {
    "text": "browser but I don't think you win this because you say we are faster than the most optimized JavaScript but if it's",
    "start": "2090720",
    "end": "2096040"
  },
  {
    "text": "fast enough you have a different story like saying look there's these component libraries you can write C which is a",
    "start": "2096040",
    "end": "2101760"
  },
  {
    "text": "better language you can use that on the server you can use it in the browser because frankly we've seen the other Trend people saying oh we all know",
    "start": "2101760",
    "end": "2107640"
  },
  {
    "text": "JavaScript we run in a web browser and therefore we write the server applications in nodejs and that really has some really terrible",
    "start": "2107640",
    "end": "2114400"
  },
  {
    "text": "consequences I would say from a performance perspective from security and so on so I think maybe you get",
    "start": "2114400",
    "end": "2120839"
  },
  {
    "text": "different dimensions in this world of In-House applications in large organization that will jump on that more but I agree if I were a startup that",
    "start": "2120839",
    "end": "2127920"
  },
  {
    "text": "builds a b2c website I wouldn't bet on web assembly either you make a great Point yeah I I I um I was surprised to",
    "start": "2127920",
    "end": "2135520"
  },
  {
    "text": "learn how how big the um there's a sort of like hidden Market of uh people doing",
    "start": "2135520",
    "end": "2140680"
  },
  {
    "text": "like really big in-house teams like I I talked to a guy who's an angular consultant and I was like where are all",
    "start": "2140680",
    "end": "2145800"
  },
  {
    "text": "the angular apps like everybody I talk to does react you know that's it like it's all react and like whenever people are coming to El they coming from react",
    "start": "2145800",
    "end": "2152440"
  },
  {
    "text": "um and uh and I was you know cuz I'm in like you said the b2c startup world primar",
    "start": "2152440",
    "end": "2157560"
  },
  {
    "text": "um and he was like oh no all my Consultants are like 400 person teams that only build software that's only used inside that company and I had no",
    "start": "2157560",
    "end": "2164319"
  },
  {
    "text": "idea that that there was so many of those but it's apparently yeah it's a huge thing you you would know it much better than I would but yeah that's uh",
    "start": "2164319",
    "end": "2172000"
  },
  {
    "text": "that's that's a really interesting perspective I had thought of that well thank you so much for uh",
    "start": "2172000",
    "end": "2177440"
  },
  {
    "text": "spending some time chatting with me that's been a lot of fun I feel like we could have gone on for much much longer",
    "start": "2177440",
    "end": "2183079"
  },
  {
    "text": "uh time permitting but it's been a pleasure hosting you I hope you enjoyed it yeah thanks thank you thanks for",
    "start": "2183079",
    "end": "2189280"
  },
  {
    "text": "listening to this episode of the goto podcast head over to gpa. Tech to discover lots more content from the",
    "start": "2189280",
    "end": "2195480"
  },
  {
    "text": "brightest minds and software [Music]",
    "start": "2195480",
    "end": "2208319"
  },
  {
    "text": "development",
    "start": "2208319",
    "end": "2211319"
  }
]