[
  {
    "start": "0",
    "end": "52000"
  },
  {
    "text": "thank you everybody so much for coming and joining with me we're going to spend a wonderful 45 minutes or so together to",
    "start": "11880",
    "end": "19039"
  },
  {
    "text": "talk about this language which I hope will have lessons for everybody uh so I",
    "start": "19039",
    "end": "24800"
  },
  {
    "text": "don't want to give just another talk about rust I if been plenty of those on the",
    "start": "24800",
    "end": "31279"
  },
  {
    "text": "internet and uh in person what I think I would like to really share is both why",
    "start": "31279",
    "end": "38399"
  },
  {
    "text": "rust is becoming more and more significant as a programming language",
    "start": "38399",
    "end": "43760"
  },
  {
    "text": "for the entire industry worldwide and also maybe a few lessons for any programming",
    "start": "43760",
    "end": "51199"
  },
  {
    "text": "language so 2022 was a long time ago",
    "start": "51199",
    "end": "57320"
  },
  {
    "start": "52000",
    "end": "230000"
  },
  {
    "text": "uh if anyone can think back um was on Twitter at that point and I sort of saw this message come by which said that you",
    "start": "57320",
    "end": "64040"
  },
  {
    "text": "know speaking of languages it's actually time to stop",
    "start": "64040",
    "end": "69680"
  },
  {
    "text": "using C and C++ for any situ situation where we don't need a garbage collected language instead we should choose rust",
    "start": "69680",
    "end": "77119"
  },
  {
    "text": "and that's not from anybody this is the uh Chief technical",
    "start": "77119",
    "end": "82560"
  },
  {
    "text": "officer of the Azure cloud computing service run by",
    "start": "82560",
    "end": "88200"
  },
  {
    "text": "Microsoft in fact he went even further and said that actually for the sake of security and",
    "start": "88200",
    "end": "93720"
  },
  {
    "text": "reliability s BL should essentially be deprecated for new",
    "start": "93720",
    "end": "98880"
  },
  {
    "text": "project and we're going to look at why such import such uh uh people with such",
    "start": "98880",
    "end": "105960"
  },
  {
    "text": "significance are saying things like this very shortly in 2019 Microsoft released some",
    "start": "105960",
    "end": "112680"
  },
  {
    "text": "research describing the they had a look through all of the security vulnerabilities that Windows uh had",
    "start": "112680",
    "end": "119079"
  },
  {
    "text": "faced and about 70% of them were caused by one class of error called memory safety",
    "start": "119079",
    "end": "127599"
  },
  {
    "text": "bugs and rust is a language which eliminates that entire class of problems",
    "start": "127599",
    "end": "133760"
  },
  {
    "text": "at compile time so it's impossible to create a memory safety issue in Rust and",
    "start": "133760",
    "end": "139200"
  },
  {
    "text": "you don't need to sacrifice speed the NSA came out in the same year",
    "start": "139200",
    "end": "144599"
  },
  {
    "text": "and said that memory safety is becoming very important for the United States",
    "start": "144599",
    "end": "150680"
  },
  {
    "text": "government and like this has led to even more uh noise over the last couple of",
    "start": "150680",
    "end": "157120"
  },
  {
    "text": "years and uh the question Mar has Russ actually been able to",
    "start": "157120",
    "end": "162680"
  },
  {
    "text": "demonstrate that it is successful well Android and uh released its first rust",
    "start": "162680",
    "end": "169680"
  },
  {
    "text": "code in version 12 and when they released version 13 they went and back and had a look at how rust was doing",
    "start": "169680",
    "end": "177280"
  },
  {
    "text": "against its uh aesthetic aesthetic analysis tools that it was applying to",
    "start": "177280",
    "end": "182480"
  },
  {
    "text": "its C and C++ code the historical average of a defect",
    "start": "182480",
    "end": "190560"
  },
  {
    "text": "rate was about one error in every thousand lines of the",
    "start": "190560",
    "end": "196040"
  },
  {
    "text": "C++ Android had released 1.5 million lines of code subjected it to the same",
    "start": "197400",
    "end": "202720"
  },
  {
    "text": "analysis and it found no errors in the rust code so this is why is becoming very",
    "start": "202720",
    "end": "211319"
  },
  {
    "text": "significant for large companies because they finally have a tool that provides",
    "start": "211319",
    "end": "217760"
  },
  {
    "text": "the guarantees that they've always wanted while without needing to sacrifice the performance of uh uh of a",
    "start": "217760",
    "end": "226200"
  },
  {
    "text": "garbage collected language and we'll talk a little bit about what a g garbage collector is but um but now we we we are",
    "start": "226200",
    "end": "232879"
  },
  {
    "start": "230000",
    "end": "374000"
  },
  {
    "text": "actually starting to see more pressure being applied to Industry and if you",
    "start": "232879",
    "end": "237959"
  },
  {
    "text": "want to interact with the United st's government now you're going to have a story around memory safety like this is",
    "start": "237959",
    "end": "245239"
  },
  {
    "text": "a a very important part of the puzzle that you will need to be able to have a",
    "start": "245239",
    "end": "251879"
  },
  {
    "text": "an answer for when people in government start to ask what are you doing to",
    "start": "251879",
    "end": "257880"
  },
  {
    "text": "protect us against memory safety errors so this is a press release from",
    "start": "257880",
    "end": "264160"
  },
  {
    "text": "the uh from the white house uh along with an Associated paper which basically said that if you want to contract with",
    "start": "264160",
    "end": "269919"
  },
  {
    "text": "the US government you need to be Memory safe so we need to actually explain what",
    "start": "269919",
    "end": "275800"
  },
  {
    "text": "this is there are many different definitions",
    "start": "275800",
    "end": "281680"
  },
  {
    "text": "and this is one that I think is most useful especially if you're unfamiliar with the term and that is when you put",
    "start": "281680",
    "end": "287440"
  },
  {
    "text": "data in a variable and leave it there and you come back later and you access it it's still",
    "start": "287440",
    "end": "295240"
  },
  {
    "text": "there it seems like a very trivial problem",
    "start": "295240",
    "end": "300720"
  },
  {
    "text": "unfortunately the best programmers in the world are not able to guarantee for",
    "start": "300720",
    "end": "305919"
  },
  {
    "text": "most programs that this is actually the case in the face of concurrency and multiple CPUs and so",
    "start": "305919",
    "end": "313199"
  },
  {
    "text": "forth uh but we'll use this as our working definition of memory",
    "start": "313199",
    "end": "319440"
  },
  {
    "text": "safety rust is the only language that exists at the moment that provides this",
    "start": "319600",
    "end": "324840"
  },
  {
    "text": "guarantee without runtime overhead and or and you can see why it's important",
    "start": "324840",
    "end": "331840"
  },
  {
    "text": "for these very large businesses but what I'm hopeful is that you are going to also see that there is a use for you and",
    "start": "331840",
    "end": "339039"
  },
  {
    "text": "you might be applying into a much smaller business or even your own hobby project and the language itself is is",
    "start": "339039",
    "end": "347039"
  },
  {
    "text": "very nice to use it's quite fun actually and",
    "start": "347039",
    "end": "352199"
  },
  {
    "text": "uh and yeah so this is what the rest of it is about and now I'm going to try and teach you rust in about 20 minutes",
    "start": "352199",
    "end": "358199"
  },
  {
    "text": "time good luck bearing in mind that rust is also has this kind of horrible reputation and",
    "start": "358199",
    "end": "363520"
  },
  {
    "text": "being very difficult to learn uh let me show you why that is a problem as well",
    "start": "363520",
    "end": "369080"
  },
  {
    "text": "or at least show you some of the very difficult areas which we can fix uh so",
    "start": "369080",
    "end": "375720"
  },
  {
    "start": "374000",
    "end": "572000"
  },
  {
    "text": "here's a pro here's here's the start of our program all rust programs have a main function and uh we're initializing",
    "start": "375720",
    "end": "383440"
  },
  {
    "text": "our we're going to print some we're going to do hello world but it's in a long form so we're going to create an",
    "start": "383440",
    "end": "388880"
  },
  {
    "text": "empty string and then we're going to add to it and then print it out so we create our oh there's um",
    "start": "388880",
    "end": "395160"
  },
  {
    "text": "K and we append to this empty string and print line has a special syntax with an",
    "start": "395160",
    "end": "401599"
  },
  {
    "text": "exclamation mark uh that is it shows that we're using a macro which is the",
    "start": "401599",
    "end": "408479"
  },
  {
    "text": "way that rust gets around from the fact that it's very particular about data",
    "start": "408479",
    "end": "414199"
  },
  {
    "text": "about type safety and we want things like uh asking the rust compiler to",
    "start": "414199",
    "end": "420160"
  },
  {
    "text": "interpret those curly braces to replace uh the out the word out with the",
    "start": "420160",
    "end": "427840"
  },
  {
    "text": "variable name and to do things like that you need to ask the compiler to do more than just call a function which is why",
    "start": "427840",
    "end": "434560"
  },
  {
    "text": "you see macros being used as",
    "start": "434560",
    "end": "438800"
  },
  {
    "text": "well now this actually generates a uh a problem and we",
    "start": "440160",
    "end": "448400"
  },
  {
    "text": "can start to see already one of rust's philosophies and that is that R data is",
    "start": "448400",
    "end": "454120"
  },
  {
    "text": "always going to be safe by default your variables are immutable if you want to be able to modify them you need to ask",
    "start": "454120",
    "end": "461400"
  },
  {
    "text": "for mutation now we get carbon har out which is nice and uh we start to yeah feel get",
    "start": "461400",
    "end": "470840"
  },
  {
    "text": "get a good feel for for how rust Works we're always going to be biased towards the safe",
    "start": "470840",
    "end": "476919"
  },
  {
    "text": "path now we'll add some some some changes we want to print out hello",
    "start": "476919",
    "end": "482280"
  },
  {
    "text": "cam that's that's fine uh but then we learn some more of the language we might read some manuales or something and find",
    "start": "482280",
    "end": "488800"
  },
  {
    "text": "this new macro called Write WR uh will send data to a network socket or to a",
    "start": "488800",
    "end": "496919"
  },
  {
    "text": "file but we're going to simulate a network soet with a",
    "start": "496919",
    "end": "502400"
  },
  {
    "text": "string and you can see here so we have this kind of complicated Syntax for an ampersand mut which asks for a",
    "start": "502400",
    "end": "509960"
  },
  {
    "text": "a mutable reference otherwise known as a unique reference or a readwrite",
    "start": "509960",
    "end": "515599"
  },
  {
    "text": "reference to the uh to that string",
    "start": "515599",
    "end": "522039"
  },
  {
    "text": "and this creates a very strange problem for beginners they",
    "start": "522039",
    "end": "529200"
  },
  {
    "text": "find a piece of code that exists in a code example they copy and paste it into the",
    "start": "529200",
    "end": "536640"
  },
  {
    "text": "editor and suddenly it doesn't work the reason why this is is that rust is",
    "start": "536640",
    "end": "543200"
  },
  {
    "text": "not an object-oriented programming language it uses something called a trait which if you've used hascal which",
    "start": "543200",
    "end": "549519"
  },
  {
    "text": "fewer people have used than rust probably this is a type class and otherwise known as uh you can sort of",
    "start": "549519",
    "end": "556160"
  },
  {
    "text": "think of it as an interface from object oriented languages or an abstract Base Class we need to actually import the",
    "start": "556160",
    "end": "562600"
  },
  {
    "text": "right trait into local scope and then we get access to its methods which means",
    "start": "562600",
    "end": "568040"
  },
  {
    "text": "that it will suddenly work with the right module that's all of the rust that we",
    "start": "568040",
    "end": "575720"
  },
  {
    "start": "572000",
    "end": "616000"
  },
  {
    "text": "need for now well done I'm now going to teach you about",
    "start": "575720",
    "end": "582200"
  },
  {
    "text": "its fund some of the fundamental concepts of the rust language so we've heard about a couple of them if you have",
    "start": "582200",
    "end": "588839"
  },
  {
    "text": "been observing this language at all uh difficult things like ownership H",
    "start": "588839",
    "end": "595480"
  },
  {
    "text": "lifetimes what does it mean for something that is like dead to be alive doesn't make sense and and borrowing",
    "start": "595480",
    "end": "601959"
  },
  {
    "text": "this also just feels like a very mixed metaphor uh and we're also going to be",
    "start": "601959",
    "end": "607079"
  },
  {
    "text": "touching on on rust's error handling as well because it provides a different approach than what is uh let's say",
    "start": "607079",
    "end": "613240"
  },
  {
    "text": "Orthodox currently a value has an owner we can",
    "start": "613240",
    "end": "621880"
  },
  {
    "start": "616000",
    "end": "686000"
  },
  {
    "text": "think of this when we're starting out as the scope like inside braces where it is",
    "start": "621880",
    "end": "627560"
  },
  {
    "text": "valid to access that that value we can move the ownership around",
    "start": "627560",
    "end": "635920"
  },
  {
    "text": "different parts of the program but there can only be one place at any given",
    "start": "635920",
    "end": "642440"
  },
  {
    "text": "time where something can be the owner this is a metaphor there's no actual",
    "start": "642440",
    "end": "649880"
  },
  {
    "text": "property register in like sort of the government of the rust compiler that goes and checks um and it it don't it's",
    "start": "649880",
    "end": "659600"
  },
  {
    "text": "it the metaphor is is is quite stretched so there is no when we start talking about access and references it's",
    "start": "659600",
    "end": "666560"
  },
  {
    "text": "impossible to prevent another part of the program from accessing the value",
    "start": "666560",
    "end": "671720"
  },
  {
    "text": "that you own uh it the responsibility of an owner is just related",
    "start": "671720",
    "end": "678800"
  },
  {
    "text": "to uh deletion essentially we want one unique place where we can delete the",
    "start": "678800",
    "end": "684880"
  },
  {
    "text": "data a lifespan is conceptually a logical span of time when it is valid to",
    "start": "684880",
    "end": "691639"
  },
  {
    "start": "686000",
    "end": "738000"
  },
  {
    "text": "access a variable most programming languages use",
    "start": "691639",
    "end": "697519"
  },
  {
    "text": "two concepts when they're defining a variable they assign a name and a data",
    "start": "697519",
    "end": "703000"
  },
  {
    "text": "type rust has like a bonus third thing a rust variable also has a",
    "start": "703000",
    "end": "710720"
  },
  {
    "text": "lifetime associated with it the rust compiler at compile time will check",
    "start": "710720",
    "end": "716959"
  },
  {
    "text": "whether or not a a a lifetime you if you ask for the value you know we uh we",
    "start": "716959",
    "end": "724000"
  },
  {
    "text": "Define our out variable and later on in the program we go and ask for it again Russ will",
    "start": "724000",
    "end": "730360"
  },
  {
    "text": "check does is has out been deleted and if it has uh your program will not",
    "start": "730360",
    "end": "737760"
  },
  {
    "text": "compile and essentially we use the the verb to borrow to just mean take a reference to uh strictly speaking this",
    "start": "737760",
    "end": "744959"
  },
  {
    "start": "738000",
    "end": "902000"
  },
  {
    "text": "is implemented as a pointer but we add some extra semantics around this It's",
    "start": "744959",
    "end": "750920"
  },
  {
    "text": "associated with lifetimes and so we add a new verb there as well let's see what this looks like in practice I'm from New",
    "start": "750920",
    "end": "758240"
  },
  {
    "text": "Zealand uh and one of the things that I like to do this going to sound silly is contribute to a uh an open source map uh",
    "start": "758240",
    "end": "766360"
  },
  {
    "text": "of observations of uh like natural life and so uh where I live I live from",
    "start": "766360",
    "end": "772560"
  },
  {
    "text": "Wellington which is sort of in the middle um and there are a bunch of penguins there so New Zealand has",
    "start": "772560",
    "end": "778720"
  },
  {
    "text": "penguins and uh and let's just kind sort of see what",
    "start": "778720",
    "end": "784519"
  },
  {
    "text": "this looks like so we've got we're deriving debug what does that mean it means that I can be printed out so I ask",
    "start": "784519",
    "end": "791959"
  },
  {
    "text": "the compiler to write the methods for printing out the values I'm creating an",
    "start": "791959",
    "end": "797000"
  },
  {
    "text": "enam penguin so uh the words there hoo Kur and taaki they from the native",
    "start": "797000",
    "end": "804160"
  },
  {
    "text": "language of New Zealand to maldi HiHo is a little blue pink penguin in Australia",
    "start": "804160",
    "end": "810600"
  },
  {
    "text": "they're called the fairy penguin and so here's one here so here's our sighting",
    "start": "810600",
    "end": "816480"
  },
  {
    "text": "and uh and then I can print it out and so we see ho ho so this is the smallest penguin species in the world they're",
    "start": "816480",
    "end": "822639"
  },
  {
    "text": "very sweet um but they get hit by boats a lot",
    "start": "822639",
    "end": "828360"
  },
  {
    "text": "and uh anyway uh let's go and change our code so we wants to illustrate borrowing",
    "start": "828360",
    "end": "835639"
  },
  {
    "text": "and and lifetimes and so forth so here's our new code we've introduced a",
    "start": "835639",
    "end": "843560"
  },
  {
    "text": "new variable called new sighting and we're printing that one out as",
    "start": "843560",
    "end": "850120"
  },
  {
    "text": "well and essentially we've created a space for our penguin to move to and so",
    "start": "850120",
    "end": "857240"
  },
  {
    "text": "it shifts in the rust",
    "start": "857240",
    "end": "862959"
  },
  {
    "text": "world when you use assignment you are shifting the ownership of the data to",
    "start": "862959",
    "end": "869880"
  },
  {
    "text": "the new variable now even though it exists in",
    "start": "869880",
    "end": "875839"
  },
  {
    "text": "memory we haven't changed anything it is now illegal to access the original",
    "start": "875839",
    "end": "881800"
  },
  {
    "text": "variable sighting so any reasonable programming language this would be perfectly valid",
    "start": "881800",
    "end": "888880"
  },
  {
    "text": "code but in Rust we get this very angry compiler error message saying borrow of",
    "start": "888880",
    "end": "895320"
  },
  {
    "text": "mood value sighting what and uh I can explain what this means a",
    "start": "895320",
    "end": "903160"
  },
  {
    "start": "902000",
    "end": "1201000"
  },
  {
    "text": "little bit so here is the playground sort of",
    "start": "903160",
    "end": "909519"
  },
  {
    "text": "the rust it's a an online rust interpreter or compiler sorry and I want",
    "start": "909519",
    "end": "915680"
  },
  {
    "text": "to sort of demonstrate what I mean by the fact that if",
    "start": "915680",
    "end": "921839"
  },
  {
    "text": "I have a block this block uh at the end of line nine is where side is allowed to",
    "start": "921839",
    "end": "929600"
  },
  {
    "text": "be used and I'll get a very similar error message um saying we cannot find",
    "start": "929600",
    "end": "934639"
  },
  {
    "text": "the value sighting in scope so even this assignment won't even",
    "start": "934639",
    "end": "940800"
  },
  {
    "text": "work uh I need to fix the bug does anyone have any suggestions for fixing",
    "start": "941160",
    "end": "947759"
  },
  {
    "text": "the bug copy that was the suggestion that the compiler suggested maybe there was a",
    "start": "947759",
    "end": "955079"
  },
  {
    "text": "second penguin so how did we do this well one of the ways we can do this is by asking",
    "start": "955079",
    "end": "961839"
  },
  {
    "text": "the compiler to write some methods for us we could do this manual if I want um and here's one way so I derive clone and",
    "start": "961839",
    "end": "969759"
  },
  {
    "text": "then I say that my sighting which is actually a penguin let's say uh we clone",
    "start": "969759",
    "end": "975360"
  },
  {
    "text": "it and now we get a a warning saying that these other two variants are not used uh but there is our print statement",
    "start": "975360",
    "end": "984199"
  },
  {
    "text": "where we see two ho ho two little penguins have appeared in our program we",
    "start": "984199",
    "end": "989360"
  },
  {
    "text": "have been very explicit about the semantics that we want we have asked the",
    "start": "989360",
    "end": "994959"
  },
  {
    "text": "compiler to create a second copy of the data",
    "start": "994959",
    "end": "1001279"
  },
  {
    "text": "however that might not be what has happened in reality it might be that",
    "start": "1001279",
    "end": "1009399"
  },
  {
    "text": "we uh that we saw the same penguin twice",
    "start": "1009399",
    "end": "1014920"
  },
  {
    "text": "and so one way to think about that would be to take a reference or to quote",
    "start": "1014920",
    "end": "1020600"
  },
  {
    "text": "borrow the original we do this with an ampasant the um syntax uh is inherited from say C or",
    "start": "1020600",
    "end": "1027880"
  },
  {
    "text": "C++ and uh and this also works the interesting thing about the",
    "start": "1027880",
    "end": "1034798"
  },
  {
    "text": "the the data type is that this is the another sighting is typed differently",
    "start": "1034799",
    "end": "1042319"
  },
  {
    "text": "than a is not a penguin itself but it's actually a reference to a penguin now",
    "start": "1042319",
    "end": "1047959"
  },
  {
    "text": "okay lifetimes are",
    "start": "1047959",
    "end": "1053930"
  },
  {
    "text": "[Music] a a way of describing the fact that",
    "start": "1053930",
    "end": "1060120"
  },
  {
    "text": "your variables need to actually",
    "start": "1060120",
    "end": "1065760"
  },
  {
    "text": "be so here's our borrow and I can't sort of",
    "start": "1065760",
    "end": "1072280"
  },
  {
    "text": "accidentally I can't delete let's say oh no this isn't quite",
    "start": "1072280",
    "end": "1077840"
  },
  {
    "text": "working Russ uh I this is a this this small",
    "start": "1077840",
    "end": "1084080"
  },
  {
    "text": "example is a little bit too small but we we cannot create a situation where I could let's say like",
    "start": "1084080",
    "end": "1093799"
  },
  {
    "text": "delete another sighting and then uh we can't ask the",
    "start": "1093799",
    "end": "1101440"
  },
  {
    "text": "code like the compon just just won't work uh there is a way to we don't really have a delete method um but",
    "start": "1101440",
    "end": "1108360"
  },
  {
    "text": "there's something similar the rust terminology is",
    "start": "1108360",
    "end": "1113759"
  },
  {
    "text": "drop no we got a syntax ER",
    "start": "1116520",
    "end": "1121039"
  },
  {
    "text": "effects and the reason why this",
    "start": "1121559",
    "end": "1127400"
  },
  {
    "text": "works is that do you remember how I said that the data type is a",
    "start": "1127400",
    "end": "1134280"
  },
  {
    "text": "reference well rust is trying to figure so I'm",
    "start": "1134280",
    "end": "1139400"
  },
  {
    "text": "dropping the reference but actually not touching the original sighting and when you ask the print line macro to print",
    "start": "1139400",
    "end": "1146760"
  },
  {
    "text": "something out what it will try and do is take a new reference uh and so drop isn't quite",
    "start": "1146760",
    "end": "1153280"
  },
  {
    "text": "doing exactly what I want so I'll leave that there and uh we can get another",
    "start": "1153280",
    "end": "1160039"
  },
  {
    "text": "form of uh fix which is that I can also ask rust to",
    "start": "1160039",
    "end": "1165679"
  },
  {
    "text": "implement the copy trait by",
    "start": "1165679",
    "end": "1171320"
  },
  {
    "text": "default rust will use move semantics where we literally move the penguin from",
    "start": "1171320",
    "end": "1177039"
  },
  {
    "text": "one variable to another if I opt into copy",
    "start": "1177039",
    "end": "1182799"
  },
  {
    "text": "semantics then it will a values will duplicate implicitly Whenever there is a",
    "start": "1182799",
    "end": "1188679"
  },
  {
    "text": "breach of rust's rules this is the opposite to how C++",
    "start": "1188679",
    "end": "1196360"
  },
  {
    "text": "works okay yes I have explained things in the",
    "start": "1196720",
    "end": "1203000"
  },
  {
    "start": "1201000",
    "end": "1220000"
  },
  {
    "text": "playground error handling rust uses values to represent",
    "start": "1203120",
    "end": "1210039"
  },
  {
    "text": "errors rather than exceptions that is uh we and we've got",
    "start": "1210039",
    "end": "1219600"
  },
  {
    "text": "some time to just to kind of look and see what this means so conceptually I've",
    "start": "1219600",
    "end": "1224960"
  },
  {
    "start": "1220000",
    "end": "1905000"
  },
  {
    "text": "made I've some changes to my code I've racked it a little bit and and uh let's start down in main down here in line",
    "start": "1224960",
    "end": "1233559"
  },
  {
    "text": "24 and I want to Loop so here is a a loop uh We're looping 10 times over some",
    "start": "1233559",
    "end": "1240120"
  },
  {
    "text": "action where we make an observation and our make observation function",
    "start": "1240120",
    "end": "1246080"
  },
  {
    "text": "returns a an enum that when you find or",
    "start": "1246080",
    "end": "1251559"
  },
  {
    "text": "detect a value of any type T you return the found something very varant of the",
    "start": "1251559",
    "end": "1260039"
  },
  {
    "text": "enum rust's enums are more powerful than named constants they can actually",
    "start": "1260039",
    "end": "1265240"
  },
  {
    "text": "contain values within them now the syntax here looks kind of ugly we've got these kind of big long",
    "start": "1265240",
    "end": "1272320"
  },
  {
    "text": "words but that will be fixed very shortly your code will uh let's kind of work through",
    "start": "1272320",
    "end": "1280799"
  },
  {
    "text": "this a little bit uh I'm down on line 26 I've made my",
    "start": "1280799",
    "end": "1287679"
  },
  {
    "text": "observation and that variable is sort of of a type that could be either of two",
    "start": "1287679",
    "end": "1293120"
  },
  {
    "text": "things it could either be something or it could be nothing and if it is something then",
    "start": "1293120",
    "end": "1301360"
  },
  {
    "text": "record an observation that's our job now there are actually some bugs in this",
    "start": "1301360",
    "end": "1308880"
  },
  {
    "text": "code for example you can see here that I have a pattern like a matching one twice so this is an error",
    "start": "1308880",
    "end": "1317279"
  },
  {
    "text": "that we really don't want want to sort of infiltrate our code uh if we have a",
    "start": "1317279",
    "end": "1323080"
  },
  {
    "text": "match statement we really want some help here uh so I I I'm going to cliit run",
    "start": "1323080",
    "end": "1329279"
  },
  {
    "text": "and the compiler is going to tell me to fix a few problems first of all it's saying that I have detected that one of",
    "start": "1329279",
    "end": "1338400"
  },
  {
    "text": "these lines here uh actually it's detecting a",
    "start": "1338400",
    "end": "1343559"
  },
  {
    "text": "different problem down the bottom you can see that and I may beting I don't actually handle the nothing case",
    "start": "1343559",
    "end": "1351080"
  },
  {
    "text": "I try to leave it to just and so what we need to do is be explicit with our",
    "start": "1351080",
    "end": "1357320"
  },
  {
    "text": "intent and that if we if we find",
    "start": "1357320",
    "end": "1361799"
  },
  {
    "text": "nothing then we really don't want to do",
    "start": "1363279",
    "end": "1367799"
  },
  {
    "text": "anything uh there is some synthetic sugar for making this a little bit more comfortable this is a very verbose style",
    "start": "1368480",
    "end": "1374520"
  },
  {
    "text": "where we use an explicit match statement but it demonstrates the principles the way rust is trying to operate so",
    "start": "1374520",
    "end": "1382400"
  },
  {
    "text": "we've fixed one problem and now the rust compiler is saying on line",
    "start": "1382400",
    "end": "1388159"
  },
  {
    "text": "15 you have got a pattern which it will never which will never match so we go up",
    "start": "1388159",
    "end": "1395679"
  },
  {
    "text": "on line 15 and here is our uh here is our pattern which we need",
    "start": "1395679",
    "end": "1401080"
  },
  {
    "text": "to fix and so we'll just add this to the number two so about 50% of the time so",
    "start": "1401080",
    "end": "1406880"
  },
  {
    "text": "we're rolling a dice between zero and six or it's actually",
    "start": "1406880",
    "end": "1412400"
  },
  {
    "text": "uh yeah the uh well six values but it is",
    "start": "1412400",
    "end": "1417559"
  },
  {
    "text": "the exclusive range unless we ask for an inclusive range um so about 50% of the",
    "start": "1417559",
    "end": "1423360"
  },
  {
    "text": "time we find nothing when we go and look for Penguins otherwise we uh will find",
    "start": "1423360",
    "end": "1428400"
  },
  {
    "text": "one of these three species and now we are close to fixing this",
    "start": "1428400",
    "end": "1435640"
  },
  {
    "text": "thing oh he says we get another problem and that is that our record",
    "start": "1435640",
    "end": "1443000"
  },
  {
    "text": "observation function hasn't been implemented rust provides the ability",
    "start": "1443000",
    "end": "1448080"
  },
  {
    "text": "for you to kind of create a some scratch space uh with a to-do macro which will",
    "start": "1448080",
    "end": "1455039"
  },
  {
    "text": "satisfy the type system uh we are going to fix that uh soon for now I'm just",
    "start": "1455039",
    "end": "1460760"
  },
  {
    "text": "going to print out the penguin",
    "start": "1460760",
    "end": "1466320"
  },
  {
    "text": "penguin doesn't Implement display okay so I need to opt in so I've got derived",
    "start": "1469880",
    "end": "1476000"
  },
  {
    "text": "debug the uh printing or printing to",
    "start": "1476000",
    "end": "1481279"
  },
  {
    "text": "text takes two paths one I can use display which is",
    "start": "1481279",
    "end": "1487880"
  },
  {
    "text": "intended for end users or I use debug which I then I and to invoke the debug",
    "start": "1487880",
    "end": "1495520"
  },
  {
    "text": "output I have this kind of question mark uh uh modifier on the macro",
    "start": "1495520",
    "end": "1503760"
  },
  {
    "text": "itself and you can see here that we we have some instances of uh korur and",
    "start": "1503760",
    "end": "1510159"
  },
  {
    "text": "taaki Penguins even though in reality they would they don't live in the same place that's okay I thought I thought",
    "start": "1510159",
    "end": "1515880"
  },
  {
    "text": "that people wouldn't mind uh they uh",
    "start": "1515880",
    "end": "1523200"
  },
  {
    "text": "now the first thing to fix or at least the",
    "start": "1523200",
    "end": "1528520"
  },
  {
    "text": "way that we link this back to error handling we've got some code that works and you can see that we've manually",
    "start": "1528520",
    "end": "1535080"
  },
  {
    "text": "created a type which can represent two",
    "start": "1535080",
    "end": "1540440"
  },
  {
    "text": "paths rust's standard Library does this itself we don't need an observation",
    "start": "1540440",
    "end": "1547559"
  },
  {
    "text": "attempt instead we return option option is very similar to Java's optional a lot",
    "start": "1547559",
    "end": "1554640"
  },
  {
    "text": "of languages have sort of uh are moving towards something like this uh",
    "start": "1554640",
    "end": "1561840"
  },
  {
    "text": "now the and so this all changes or it gets",
    "start": "1564799",
    "end": "1571000"
  },
  {
    "text": "significantly shorter the interesting thing here is that",
    "start": "1571000",
    "end": "1578640"
  },
  {
    "text": "option is some in some sense stronger than Javas optional because it is impossible to",
    "start": "1578640",
    "end": "1586399"
  },
  {
    "text": "create a program where you could have a null pointer exemption they do not exist",
    "start": "1586399",
    "end": "1591960"
  },
  {
    "text": "in Rust and you just cannot generate them and you can also never accidentally",
    "start": "1591960",
    "end": "1597960"
  },
  {
    "text": "forget to handle a case the rust compiler will just uh oh sorry so this",
    "start": "1597960",
    "end": "1605480"
  },
  {
    "text": "our code down the bottom needs to change as well uh so some penguin if we find if",
    "start": "1605480",
    "end": "1610720"
  },
  {
    "text": "we've got nothing then we then we do nothing uh",
    "start": "1610720",
    "end": "1618360"
  },
  {
    "text": "so here are our two penguins and we didn't find many penguins in our 10",
    "start": "1618360",
    "end": "1623440"
  },
  {
    "text": "observations that time it's interesting to me that we are having a kind of a",
    "start": "1623440",
    "end": "1629120"
  },
  {
    "text": "strange bias so fast Rand is a third-party crate a crate as a",
    "start": "1629120",
    "end": "1635600"
  },
  {
    "text": "dependency this playground has about a 100 of the top dependencies that are used in the open source world and u32 is",
    "start": "1635600",
    "end": "1643159"
  },
  {
    "text": "asking for an unsigned integer that is four bytes or 32 bits wide",
    "start": "1643159",
    "end": "1649279"
  },
  {
    "text": "from the control flow point of view I don't have a return statement",
    "start": "1649279",
    "end": "1654360"
  },
  {
    "text": "this also illustrates one of rust's philosophies or",
    "start": "1654360",
    "end": "1660320"
  },
  {
    "text": "the uh where rust comes from or its Heritage rust is essentially I like to",
    "start": "1660320",
    "end": "1667760"
  },
  {
    "text": "call rust a functional programming language in Disguise it use and so what's actually",
    "start": "1667760",
    "end": "1674000"
  },
  {
    "text": "happening is rust will return at",
    "start": "1674000",
    "end": "1679720"
  },
  {
    "text": "line uh",
    "start": "1679720",
    "end": "1682880"
  },
  {
    "text": "19 some sort of observation which uh is returned from",
    "start": "1688960",
    "end": "1694600"
  },
  {
    "text": "match now interestingly the way that rust works is",
    "start": "1694600",
    "end": "1700559"
  },
  {
    "text": "that every block will return the value of its last",
    "start": "1700559",
    "end": "1706880"
  },
  {
    "text": "expression and and so functions are just blocks that contain multiple inner",
    "start": "1706880",
    "end": "1714039"
  },
  {
    "text": "blocks and so we actually don't need a return keyword and uh everything in Rust is an",
    "start": "1714039",
    "end": "1721240"
  },
  {
    "text": "expression including if and uh else for example there is so we've talked a",
    "start": "1721240",
    "end": "1728200"
  },
  {
    "text": "little bit about option and about uh the way that control for works I now want to",
    "start": "1728200",
    "end": "1734279"
  },
  {
    "text": "talk about a different which is defined in the standard Library",
    "start": "1734279",
    "end": "1740399"
  },
  {
    "text": "which is errors errors and rust uh look a lot like",
    "start": "1740399",
    "end": "1746120"
  },
  {
    "text": "this I'm going to use a different word so that I don't collide with with the original one but let's call this",
    "start": "1746120",
    "end": "1752760"
  },
  {
    "text": "outcome and outcome on one half might look like success and it might look like",
    "start": "1752760",
    "end": "1759960"
  },
  {
    "text": "failure but we need to parameterize a success type by some type T and also the failure let's call that",
    "start": "1759960",
    "end": "1768279"
  },
  {
    "text": "an if so we now have two type parameters and our record observation we",
    "start": "1768279",
    "end": "1776360"
  },
  {
    "text": "could say that we have some sort of",
    "start": "1776360",
    "end": "1781158"
  },
  {
    "text": "outcome and I'm going to say successfully we if if we're successful we just print out what is known as the",
    "start": "1781880",
    "end": "1787480"
  },
  {
    "text": "empty chupal or the unit type so just to indicate",
    "start": "1787480",
    "end": "1793159"
  },
  {
    "text": "okay and outcome success",
    "start": "1793159",
    "end": "1798480"
  },
  {
    "text": "and otherwise we have some error message and I'll call I'll just use a string",
    "start": "1798480",
    "end": "1804840"
  },
  {
    "text": "and this would allow me to describe the fact that I don't know I my equipment",
    "start": "1804840",
    "end": "1810799"
  },
  {
    "text": "failed so I wasn't able to record the observation properly uh now this is",
    "start": "1810799",
    "end": "1816640"
  },
  {
    "text": "exactly the way that the result type in the rust standard library is",
    "start": "1816640",
    "end": "1824159"
  },
  {
    "text": "defined and it's literally this long except it has a couple of extra annotations uh one of them is uh we give",
    "start": "1824159",
    "end": "1832440"
  },
  {
    "text": "the compiler an instruction that anytime that there is an outcome or a result you must use",
    "start": "1832440",
    "end": "1841760"
  },
  {
    "text": "it uh which will trigger a compile warning if you forget",
    "start": "1841760",
    "end": "1849080"
  },
  {
    "text": "okay that is a probably 80 or 90% of",
    "start": "1852000",
    "end": "1859600"
  },
  {
    "text": "rust if you can grasp error handling if you can grasp the concept of a single",
    "start": "1859600",
    "end": "1867360"
  },
  {
    "text": "unique owner and the ability to borrow or refer into that owner and then make",
    "start": "1867360",
    "end": "1876559"
  },
  {
    "text": "sure that references to values have a specific lifetime then you've basically",
    "start": "1876559",
    "end": "1882840"
  },
  {
    "text": "got rust there are some other things about the fact that its control flow is a bit strong strange but that's okay",
    "start": "1882840",
    "end": "1890760"
  },
  {
    "text": "you'll learn that with practice it will it will act now I I find out a little",
    "start": "1890760",
    "end": "1895919"
  },
  {
    "text": "bit hard because I'm sort of immune to the problem of new programmers who or new people learning rust looking look",
    "start": "1895919",
    "end": "1902000"
  },
  {
    "text": "this is very strange um okay I now want to talk though about why rust is as fast",
    "start": "1902000",
    "end": "1909919"
  },
  {
    "start": "1905000",
    "end": "1942000"
  },
  {
    "text": "as it is because this is a very significant really important part of the story when you go and try to advocate",
    "start": "1909919",
    "end": "1917519"
  },
  {
    "text": "for more rust at work there is no garbage collector it is",
    "start": "1917519",
    "end": "1924240"
  },
  {
    "text": "what I These are My Views by the way uh it is so I call it stack heavy I'll",
    "start": "1924240",
    "end": "1929519"
  },
  {
    "text": "explain what that means uh pretty soon and also we have this very high level construct which kind of uh actually use",
    "start": "1929519",
    "end": "1937159"
  },
  {
    "text": "almost no memory or no execution time at all uh what do I mean by a garbage",
    "start": "1937159",
    "end": "1943760"
  },
  {
    "start": "1942000",
    "end": "2084000"
  },
  {
    "text": "collector well what I mean is that rust doesn't add on an extra part of your program that's running alongside it uh",
    "start": "1943760",
    "end": "1952840"
  },
  {
    "text": "this has a really important benefit and that there are no latency spikes so here",
    "start": "1952840",
    "end": "1957960"
  },
  {
    "text": "are a couple of stories this is related to memory use a an example from 10cent they had a uh",
    "start": "1957960",
    "end": "1966399"
  },
  {
    "text": "reverse proxy which was written in node.js and they had like 800",
    "start": "1966399",
    "end": "1971559"
  },
  {
    "text": "CPUs and they removed this was the the the log where they removed uh",
    "start": "1971559",
    "end": "1978360"
  },
  {
    "text": "I think three oh sorry 700 of those CPUs while reducing their memory footprint by",
    "start": "1978360",
    "end": "1984679"
  },
  {
    "text": "something like 90% and significantly they also you notice",
    "start": "1984679",
    "end": "1992080"
  },
  {
    "text": "how much flatter the line is it's much more deterministic rust has",
    "start": "1992080",
    "end": "1997760"
  },
  {
    "text": "deterministic uh deletion there isn't the ability uh you don't have a garbage collector that holds on to values in",
    "start": "1997760",
    "end": "2005200"
  },
  {
    "text": "memory and get grow the Heap just grows and grows and grows gr that issue doesn't exist in",
    "start": "2005200",
    "end": "2011399"
  },
  {
    "text": "Rust this one is more significant this is uh discord's uh discussion about why",
    "start": "2011399",
    "end": "2017200"
  },
  {
    "text": "they moved from go to rust the purple lines represent the old system written",
    "start": "2017200",
    "end": "2025159"
  },
  {
    "text": "in go and you'll notice that every two seconds there was a latency",
    "start": "2025159",
    "end": "2031039"
  },
  {
    "text": "Spike this meant that uh messages were being delayed and this is while the",
    "start": "2031039",
    "end": "2036440"
  },
  {
    "text": "garbage collector asked the whole runtime to stop while it freed up",
    "start": "2036440",
    "end": "2043600"
  },
  {
    "text": "memory the rust uh is relatively difficult to see but it is the blue line",
    "start": "2043600",
    "end": "2048839"
  },
  {
    "text": "which is both faster across all cases as well as never incurring that garbage collect",
    "start": "2048839",
    "end": "2055560"
  },
  {
    "text": "overhead and uh the determinism of the entire system is is improved and So Stories",
    "start": "2055560",
    "end": "2063560"
  },
  {
    "text": "like this is one of the reasons why rust is becoming useful not just for the fact",
    "start": "2063560",
    "end": "2070560"
  },
  {
    "text": "that it can be seen as memory safe but also your users benefits too and so does",
    "start": "2070560",
    "end": "2076599"
  },
  {
    "text": "your operations team because suddenly your service is significantly more",
    "start": "2076599",
    "end": "2082878"
  },
  {
    "start": "2084000",
    "end": "2235000"
  },
  {
    "text": "stable uh I call rust stack heavy that is it will allocate objects on I say the",
    "start": "2084320",
    "end": "2092599"
  },
  {
    "text": "term object I just mean value on the stack whenever it can this has benefits",
    "start": "2092599",
    "end": "2099079"
  },
  {
    "text": "because uh using the stack over the Heap means that there is less bookkeeping",
    "start": "2099079",
    "end": "2104520"
  },
  {
    "text": "when you go and ask for the value again later it's almost the inversion of the",
    "start": "2104520",
    "end": "2109960"
  },
  {
    "text": "way that other programming languages use something like C++ or sorry C or Java",
    "start": "2109960",
    "end": "2115440"
  },
  {
    "text": "will use the Heap first except where they have primitive values which will live on the",
    "start": "2115440",
    "end": "2121079"
  },
  {
    "text": "stack uh here's a very small diagram of their memory address space uh",
    "start": "2121079",
    "end": "2128359"
  },
  {
    "text": "conceptually you could think of memory having three areas we have a stack which is fast and there are specialized",
    "start": "2128359",
    "end": "2135119"
  },
  {
    "text": "instructions inside your CPU uh to move from one location in Ram to another it's",
    "start": "2135119",
    "end": "2142200"
  },
  {
    "text": "uh we update qu the quote it's a register in the CPU called the stack pointer and that's a like less than a",
    "start": "2142200",
    "end": "2151200"
  },
  {
    "text": "nanc it's like one cycle it will the Heap to update the Heap we need to go",
    "start": "2151200",
    "end": "2158119"
  },
  {
    "text": "back and uh find the location in memory maybe bring in that page uh and but it's",
    "start": "2158119",
    "end": "2166000"
  },
  {
    "text": "extremely flexible one of the problems about the stack is that you need very you need to know exactly how wide it is",
    "start": "2166000",
    "end": "2172880"
  },
  {
    "text": "because there's no ability to dynamically change values at runtime uh there's also a sort of a third space",
    "start": "2172880",
    "end": "2178880"
  },
  {
    "text": "which people don't talk about as much and that's the location where Global variables live rust has a bit of a problem when",
    "start": "2178880",
    "end": "2186800"
  },
  {
    "text": "you start to learn it in that there are two different data types for representing",
    "start": "2186800",
    "end": "2192119"
  },
  {
    "text": "text huh in fact there's like 17 but we don't worry about that",
    "start": "2192119",
    "end": "2198160"
  },
  {
    "text": "uh the uh and the reason was rust is extremely precise and one of the things",
    "start": "2198160",
    "end": "2203880"
  },
  {
    "text": "that it does is have the string literal data",
    "start": "2203880",
    "end": "2208960"
  },
  {
    "text": "type is different than a string literal sorry then a string with a capital S",
    "start": "2208960",
    "end": "2214319"
  },
  {
    "text": "because the string literals the data lives in This Global space known as the data segment in the address",
    "start": "2214319",
    "end": "2220200"
  },
  {
    "text": "space if you're ever interested in those kinds of things uh whereas string with a capital S its data lives on the",
    "start": "2220200",
    "end": "2227359"
  },
  {
    "text": "Heap rust values Precision it values safety and so it makes a big distinction between those",
    "start": "2227359",
    "end": "2234119"
  },
  {
    "text": "two and we've seen before that with uh with the use of kind of this uh I want",
    "start": "2234119",
    "end": "2240040"
  },
  {
    "start": "2235000",
    "end": "2353000"
  },
  {
    "text": "to talk a little bit about the one of the other properties of string is that its content is guaranteed by it to to be",
    "start": "2240040",
    "end": "2247880"
  },
  {
    "text": "utf8 encoded and yet there is no runtime cost associated with",
    "start": "2247880",
    "end": "2253560"
  },
  {
    "text": "checking that's pretty cool uh and it it's because all of the",
    "start": "2253560",
    "end": "2259280"
  },
  {
    "text": "initial the type system itself or the the uh has everything that operates with",
    "start": "2259280",
    "end": "2265520"
  },
  {
    "text": "a string knows that it's utfa encoded and you cannot construct a string type with",
    "start": "2265520",
    "end": "2272720"
  },
  {
    "text": "invalid data there are there's sort of no API that would allow you to do that unless you really wants to go and do use",
    "start": "2272720",
    "end": "2279119"
  },
  {
    "text": "raw pointers in which case you will get a very significant like uh we use an",
    "start": "2279119",
    "end": "2285280"
  },
  {
    "text": "unsafe block which is exactly what it says uh it provides you uh it provides",
    "start": "2285280",
    "end": "2292480"
  },
  {
    "text": "an unsafe block has a significant uh the unsafe blocks function is to push",
    "start": "2292480",
    "end": "2299720"
  },
  {
    "text": "responsibility to you as a programmer uh for example the we talked",
    "start": "2299720",
    "end": "2305480"
  },
  {
    "text": "about null pointers or at least R not having pointers but here is a an integer",
    "start": "2305480",
    "end": "2310680"
  },
  {
    "text": "which I then put on the Heap and then I take an option to so it it might be missing like it might not be there uh",
    "start": "2310680",
    "end": "2318440"
  },
  {
    "text": "and the the thing that I want to point out is option essentially is doing the same",
    "start": "2318440",
    "end": "2324839"
  },
  {
    "text": "thing as a nullable pointer but it doesn't use any bytes at",
    "start": "2324839",
    "end": "2330599"
  },
  {
    "text": "all in Ram it's invisible in the disassembled",
    "start": "2330599",
    "end": "2335880"
  },
  {
    "text": "code because it actually makes use of a property for the fact that pointers and rust references are always valid",
    "start": "2335880",
    "end": "2342760"
  },
  {
    "text": "therefore the null pointer doesn't exist and therefore the optimizer can use the zero bit pattern like the null pointer",
    "start": "2342760",
    "end": "2349400"
  },
  {
    "text": "to represent option so it's kind of cunning in that way as I wrap up I thought I'd talk a",
    "start": "2349400",
    "end": "2355839"
  },
  {
    "start": "2353000",
    "end": "2391000"
  },
  {
    "text": "little bit about who I am uh my name is Tim I have written this book if you are",
    "start": "2355839",
    "end": "2360960"
  },
  {
    "text": "interested in like rust as a non- systems programmer trying to understand what systems programming is I also run",
    "start": "2360960",
    "end": "2368760"
  },
  {
    "text": "uh a training business in consultancy this has been an absolute pleasure and I've got about 3 minutes",
    "start": "2368760",
    "end": "2375000"
  },
  {
    "text": "for question",
    "start": "2375000",
    "end": "2378359"
  }
]