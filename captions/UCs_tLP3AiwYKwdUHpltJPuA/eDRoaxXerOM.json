[
  {
    "start": "0",
    "end": "116000"
  },
  {
    "text": "so my name is will uh I work for media maath we're a adtech company um which is",
    "start": "199",
    "end": "6080"
  },
  {
    "text": "involved in helping like Fortune 500 companies by digital media um so trying",
    "start": "6080",
    "end": "12320"
  },
  {
    "text": "to think like the best way to describe this you go to a website there's like this Banner ad slot shows up at the top",
    "start": "12320",
    "end": "17400"
  },
  {
    "text": "right everyone loves those um that actually is determined on and calculated",
    "start": "17400",
    "end": "22640"
  },
  {
    "text": "in real time there's an auction uh we have like about 40 milliseconds to decide do we want to partake in that",
    "start": "22640",
    "end": "28279"
  },
  {
    "text": "auction do we want to actually buy that uh that impression and it happens about",
    "start": "28279",
    "end": "33399"
  },
  {
    "text": "two and a half million times a second globally um and so because of that we have to make a lot of very quick",
    "start": "33399",
    "end": "39160"
  },
  {
    "text": "decisions very rapidly we have to analyze a lot of data um so the that like individual impression costs like",
    "start": "39160",
    "end": "45280"
  },
  {
    "text": "maybe a penny or like a a 100th of a penny or so um but the campaigns that",
    "start": "45280",
    "end": "50440"
  },
  {
    "text": "these companies are running are I don't know like $10 million a year $50 million a year and typically they acre to like I",
    "start": "50440",
    "end": "57000"
  },
  {
    "text": "want to sell more of this product and so backing that goal of like selling more",
    "start": "57000",
    "end": "62840"
  },
  {
    "text": "of this product into I'm G to buy this particular slot because it's like the right time to buy this ad slot is what",
    "start": "62840",
    "end": "68759"
  },
  {
    "text": "we're good at it's what we do uh really well so uh like I mentioned two and a half million requests per second about",
    "start": "68759",
    "end": "75159"
  },
  {
    "text": "um 99.92% of that uh percentile is under 40 milliseconds um we do about 120",
    "start": "75159",
    "end": "82000"
  },
  {
    "text": "terabytes of data analysis every single day um and this happens across nine different data centers um plus cloud",
    "start": "82000",
    "end": "91520"
  },
  {
    "text": "stuff um and we do this in a lot of lot of different languages um I think you",
    "start": "91520",
    "end": "97200"
  },
  {
    "text": "know Scala might be the one that we've pushed uh hardest and invested hardest on in the most uh recent history but we",
    "start": "97200",
    "end": "102880"
  },
  {
    "text": "also have plenty of C++ uh a lot of go which I'll talk about talk about in a second uh python Ruby",
    "start": "102880",
    "end": "108920"
  },
  {
    "text": "Pearl PHP and I know I'm missing more the slide is only so long so um yeah so",
    "start": "108920",
    "end": "116000"
  },
  {
    "start": "116000",
    "end": "130000"
  },
  {
    "text": "talks really about two things um specifically how does go help media math",
    "start": "116000",
    "end": "122159"
  },
  {
    "text": "perform and how do we make go perform so a little bit of a little bit of both um",
    "start": "122159",
    "end": "128399"
  },
  {
    "text": "so we'll start with the first thing um a little bit of context in 2012 we had um",
    "start": "128399",
    "end": "136160"
  },
  {
    "start": "130000",
    "end": "199000"
  },
  {
    "text": "one giant API monolith so everything we do has an API everything comes with an API we are really big um uh Believers in",
    "start": "136160",
    "end": "143280"
  },
  {
    "text": "like the platform Vision uh and our API stack which you know is that kind of",
    "start": "143280",
    "end": "148920"
  },
  {
    "text": "black boox everything blow uh used to be one large API and that worked out really well for some time um",
    "start": "148920",
    "end": "155920"
  },
  {
    "text": "but we've been going through about 60% year-over-year growth um so when I started uh when tap me was acquired back",
    "start": "155920",
    "end": "162800"
  },
  {
    "text": "in December of 2012 I think we were about 120 people and we're now about uh 650 people um and along the way we made",
    "start": "162800",
    "end": "169599"
  },
  {
    "text": "six technology Acquisitions and 13 new product lines and so um uh I love that there was a conways law talk because I",
    "start": "169599",
    "end": "177080"
  },
  {
    "text": "strongly believe it's like a real thing and so we needed a way to uh solve for",
    "start": "177080",
    "end": "182200"
  },
  {
    "text": "this um from an organizational perspective to actually support the rapid growth that we were undergoing uh",
    "start": "182200",
    "end": "187560"
  },
  {
    "text": "I think uh I think it was said yesterday but like I really do believe like a migration to SOA is more about an",
    "start": "187560",
    "end": "193640"
  },
  {
    "text": "organizational solution to a technical problem than like a technical solution itself um so here we are 2015 um it's a",
    "start": "193640",
    "end": "202400"
  },
  {
    "start": "199000",
    "end": "240000"
  },
  {
    "text": "little bit less monolith right so we did a lot of the decomposition work and we've moved a lot of things from that",
    "start": "202400",
    "end": "207720"
  },
  {
    "text": "monolith into uh you a little bit more of a service oriented uh model and we've got quite a number of microservices",
    "start": "207720",
    "end": "214840"
  },
  {
    "text": "today um if you want to primer on that I would really recommend watching Rebecca",
    "start": "214840",
    "end": "220560"
  },
  {
    "text": "Parson's talk from yesterday I think that was a really uh solid introduction",
    "start": "220560",
    "end": "226159"
  },
  {
    "text": "in that um and I especially if you heard the guy in the back cackling um about",
    "start": "226159",
    "end": "232560"
  },
  {
    "text": "like what you shouldn't do that was probably me because we like did all of those things that you shouldn't do and",
    "start": "232560",
    "end": "238720"
  },
  {
    "text": "have been learning so BAS basically in the process of solving for those problems we created like a whole new set",
    "start": "238720",
    "end": "243920"
  },
  {
    "start": "240000",
    "end": "366000"
  },
  {
    "text": "of problems right so um uh I love this guy because he's grumpy um I'm grumpy um",
    "start": "243920",
    "end": "252239"
  },
  {
    "text": "so it basically turned our like already complex system again mentioned nine data centers plus Cloud plus all this data",
    "start": "252239",
    "end": "258040"
  },
  {
    "text": "already complex system into an even more complex system um it made the",
    "start": "258040",
    "end": "263199"
  },
  {
    "text": "dependencies and uh the failure scenario is even more complicated and even more tricky to manage uh and and because of",
    "start": "263199",
    "end": "269600"
  },
  {
    "text": "that that you know has created this burden on uh uh our Engineers to think about these things on an you know even",
    "start": "269600",
    "end": "275320"
  },
  {
    "text": "more granular basis than they have before uh the yet to be decoupled Services again like going through that",
    "start": "275320",
    "end": "281440"
  },
  {
    "text": "transition process you have to go through the effort of actually decoupling and decomposing things um if",
    "start": "281440",
    "end": "286960"
  },
  {
    "text": "it's not quite there but your teams have already done this kind of dispersion managing that code base across multiple",
    "start": "286960",
    "end": "292880"
  },
  {
    "text": "different teams is a giant pain in the ass um which we're I think still kind of trying to solve uh service discoveries",
    "start": "292880",
    "end": "298960"
  },
  {
    "text": "now like actually a first class problem right so with new Services coming up and new versions coming up and uh you know",
    "start": "298960",
    "end": "305479"
  },
  {
    "text": "there might be 30 40 50 I think some of you guys probably familiar with the Netflix chord chart of like 200 300",
    "start": "305479",
    "end": "311440"
  },
  {
    "text": "different Services all talking to each other without like that being handled in an automated way you kind of go insane",
    "start": "311440",
    "end": "317680"
  },
  {
    "text": "right uh I think media math actually prob couple Ops people in here who are living some of that pain right now um",
    "start": "317680",
    "end": "325479"
  },
  {
    "text": "managing environments is really painful so um you know we have this belief in autom",
    "start": "325479",
    "end": "331240"
  },
  {
    "text": "that I I want to test against something that's real instead of just some shell",
    "start": "331240",
    "end": "336280"
  },
  {
    "text": "and so that means I need my thing and I need your thing and I need them to live in an isolated environment so I can test",
    "start": "336280",
    "end": "342319"
  },
  {
    "text": "my thing against your thing without the automation to prop those two things up what do you do right you have to manage",
    "start": "342319",
    "end": "349000"
  },
  {
    "text": "this all manually that's kind of a pain um and then it introduces like a whole slew of distributed systems problems uh",
    "start": "349000",
    "end": "355360"
  },
  {
    "text": "because you've just created a surface area for a ton of extra inconsistency um so if you don't really focus on tools",
    "start": "355360",
    "end": "361560"
  },
  {
    "text": "and automation might be screwed um so my opinion go actually makes it pretty easy",
    "start": "361560",
    "end": "368400"
  },
  {
    "start": "366000",
    "end": "375000"
  },
  {
    "text": "to solve some of these problems um and there's a few few different reasons for that so um first one's relatively simple",
    "start": "368400",
    "end": "376400"
  },
  {
    "start": "375000",
    "end": "492000"
  },
  {
    "text": "um it's easy to create services from scratch um now I know we just said that having more services kind of creates",
    "start": "376400",
    "end": "382400"
  },
  {
    "text": "some of these problems but as it turns out like you can also create Services specifically to solve these problems um and because it's such a simple language",
    "start": "382400",
    "end": "389960"
  },
  {
    "text": "uh there is a very low mental footprint uh the first service that I wrote and go I think I took it took me maybe a",
    "start": "389960",
    "end": "396440"
  },
  {
    "text": "weekend to both learn the language and build a proof of concept uh like a meaningful one um and I think that's a",
    "start": "396440",
    "end": "403080"
  },
  {
    "text": "very common feeling I feel like there are a couple people nodding like that's that's something that I really kind of",
    "start": "403080",
    "end": "409520"
  },
  {
    "text": "latched on to early on um it en compiles super quickly to a static binary so um",
    "start": "409520",
    "end": "415840"
  },
  {
    "text": "there are two parts of that that are really important uh one if you have ever been spoiled by a you know interpreted",
    "start": "415840",
    "end": "422479"
  },
  {
    "text": "language it's really nice to be able to hit save and like see the result really quickly um you can do that with go you",
    "start": "422479",
    "end": "429720"
  },
  {
    "text": "can add a commit or or a hook right post save hook on your IDE and have it rebuild the thing because it takes I",
    "start": "429720",
    "end": "436919"
  },
  {
    "text": "don't know a second or two to build your binary and then you can copy set binary from your machine to production if you",
    "start": "436919",
    "end": "443639"
  },
  {
    "text": "wanted to or staging if you wanted to or whatever because it's just a binary there's no jvm there's no dependencies",
    "start": "443639",
    "end": "448800"
  },
  {
    "text": "there's nothing it's just static binary um it has built-in concurrency constructs so um this is definitely not",
    "start": "448800",
    "end": "455720"
  },
  {
    "text": "unique to the language there are other languages that have a lot of this too but um you know it has go routines and it has channels um go routines which",
    "start": "455720",
    "end": "462560"
  },
  {
    "text": "allow you to run functions concurrently and channels which allow you to pass methodes between them um and we'll talk",
    "start": "462560",
    "end": "467680"
  },
  {
    "text": "a little bit about the Magic in that um but that's something that kind of helps",
    "start": "467680",
    "end": "472720"
  },
  {
    "text": "helps make it a little bit easier to not worry about the problem of like how am I going to get these two go routines or",
    "start": "472720",
    "end": "478479"
  },
  {
    "text": "whatever to talk or how I going to get my concurrency to work without introducing all these you know failure scenarios instead I can just you know",
    "start": "478479",
    "end": "485080"
  },
  {
    "text": "take advantage of the language construct to solve that problem for me um and then finally it has uh an awesome standard",
    "start": "485080",
    "end": "491039"
  },
  {
    "text": "Library so the awesome standard Library when I say it's awesome it's really awesome um in a lot of cases if you're",
    "start": "491039",
    "end": "496560"
  },
  {
    "start": "492000",
    "end": "560000"
  },
  {
    "text": "trying to build something from scratch you may not actually need any dependence any third party dependencies at all um",
    "start": "496560",
    "end": "502319"
  },
  {
    "text": "now just depends on how ambitious you are but um I kind of Cherry Picked a few",
    "start": "502319",
    "end": "507560"
  },
  {
    "text": "different examples um of some of the things that I use on a regular basis so like the net package so net HTTP and and",
    "start": "507560",
    "end": "515880"
  },
  {
    "text": "so on and so forth it's awesome uh it's actually a really good example of idiomatic go um and there's uh it's I",
    "start": "515880",
    "end": "523599"
  },
  {
    "text": "think it's extremely trivial to create a HTP server just excuse me on top of that",
    "start": "523599",
    "end": "529120"
  },
  {
    "text": "um encoding Json right tons of tons of encoding uh not just Json but you know",
    "start": "529120",
    "end": "534399"
  },
  {
    "text": "many other formats that are baked into that system uh operating system handling you know uh sync and in syn atomic uh",
    "start": "534399",
    "end": "541279"
  },
  {
    "text": "all of your string and bite manipulation functionality uh compression functionality and and the plenty of you",
    "start": "541279",
    "end": "547800"
  },
  {
    "text": "know crypto uh packages out there are again really easy to create something",
    "start": "547800",
    "end": "553160"
  },
  {
    "text": "from scratch using just what comes out of the box um but if that's not you",
    "start": "553160",
    "end": "559480"
  },
  {
    "text": "know doesn't solve your problem on its own and you don't want to be as ambitious there's actually a relatively",
    "start": "559480",
    "end": "565160"
  },
  {
    "start": "560000",
    "end": "604000"
  },
  {
    "text": "Vibrant Community currently um that has you know spawned a lot of different libraries and tools um and those are you",
    "start": "565160",
    "end": "573240"
  },
  {
    "text": "know around the use cases of service Discovery and container management and configuration management consensus and",
    "start": "573240",
    "end": "579279"
  },
  {
    "text": "gossip algorithms and Native databases distributed caches and monitoring tools and I don't know like 20 web Frameworks",
    "start": "579279",
    "end": "586200"
  },
  {
    "text": "uh performance testing distributed tracing Etc like a lot of those problems that you mentioned early on about like",
    "start": "586200",
    "end": "591560"
  },
  {
    "text": "uh uh these are the things these are the problems that I've now created by moving to a bunch of microservices there are",
    "start": "591560",
    "end": "597040"
  },
  {
    "text": "tools Ino uh in a community around solving exactly those things",
    "start": "597040",
    "end": "602440"
  },
  {
    "text": "um next thing is actually the tool chain is great uh I could probably end on this",
    "start": "602440",
    "end": "609079"
  },
  {
    "start": "604000",
    "end": "666000"
  },
  {
    "text": "slide like I could just say that this is the best thing and then we could end and then go have beer or something um gof",
    "start": "609079",
    "end": "615600"
  },
  {
    "text": "fump is awesome like I don't know how to State this I want this in every single language like gof fump is the coolest",
    "start": "615600",
    "end": "621160"
  },
  {
    "text": "thing ever um how many of you guys have seen this commit right obviously I am",
    "start": "621160",
    "end": "627160"
  },
  {
    "text": "the most productive developer in the in the world and all I've done here is changed um your spaces for tabs because",
    "start": "627160",
    "end": "634079"
  },
  {
    "text": "Tabs are definitely better than spaces and if you disagree with me you're wrong but what's cool about this is I never have to have this argument again ever",
    "start": "634079",
    "end": "640880"
  },
  {
    "text": "because the uh language specification actually defines the format and there's a tool to enforce it right so we never",
    "start": "640880",
    "end": "646720"
  },
  {
    "text": "have to talk about this if you want spaces always that's cool you do that just at the end of your you know post",
    "start": "646720",
    "end": "651760"
  },
  {
    "text": "save hook hit G fped done problem solved it rewrites your code you know has it",
    "start": "651760",
    "end": "656959"
  },
  {
    "text": "actually uh line up with the specification no I don't have to have this argument ever again um it's just not productive",
    "start": "656959",
    "end": "664000"
  },
  {
    "text": "you know um next awesome tool chain tool go test um so it's probably extremely",
    "start": "664000",
    "end": "670279"
  },
  {
    "start": "666000",
    "end": "751000"
  },
  {
    "text": "common everyone in this room if you haven't said this you should probably start saying this more often at the beginning of every development project",
    "start": "670279",
    "end": "676480"
  },
  {
    "text": "someone goes okay how are we going to test this thing um go comes with a framework baked in to solve that problem",
    "start": "676480",
    "end": "684320"
  },
  {
    "text": "um and it comes with you know unit tests and it comes with performance tests um so here's a code example that is",
    "start": "684320",
    "end": "690040"
  },
  {
    "text": "definitely almost falling off the page um so it's really kind of stupid and",
    "start": "690040",
    "end": "695880"
  },
  {
    "text": "basic so kind of bear with me um I have three functions 1 + 1al 3 awesome 2 +",
    "start": "695880",
    "end": "703000"
  },
  {
    "text": "2al 4 all right that one's cool and then you know add some ins together um over",
    "start": "703000",
    "end": "709440"
  },
  {
    "text": "here I have my test so 1+ one actually should be two cool um and then 4 plus 3",
    "start": "709440",
    "end": "716720"
  },
  {
    "text": "plus 2+ 1 should be 10 awesome um so I'm going to run my",
    "start": "716720",
    "end": "722079"
  },
  {
    "text": "bakedin uh tests and I get you know with with with a coverage profile so",
    "start": "722079",
    "end": "727440"
  },
  {
    "text": "obviously 1 plus one should actually be two so that's my failure message um and I missed that second function 2 plus two",
    "start": "727440",
    "end": "733959"
  },
  {
    "text": "I didn't do that so coverage miss the coverage um and then if I actually go to",
    "start": "733959",
    "end": "739320"
  },
  {
    "text": "the go tool that helps me uh you know dump an HTML file that shows me these things um it will show me the code path",
    "start": "739320",
    "end": "745079"
  },
  {
    "text": "colored that's not covered that's kind of nifty um next awesome tool chain is the race",
    "start": "745079",
    "end": "752199"
  },
  {
    "start": "751000",
    "end": "782000"
  },
  {
    "text": "detector so um mentioned some of those concurrency constructs uh those are really Nifty but um if you're not",
    "start": "752199",
    "end": "759519"
  },
  {
    "text": "careful you can actually create Deadlocks and race conditions and the race flag is available in go test go",
    "start": "759519",
    "end": "766639"
  },
  {
    "text": "build go run um and it will just cause a panic when it detects that there's a",
    "start": "766639",
    "end": "771920"
  },
  {
    "text": "raise condition uh do this please in your code if you use these things it's",
    "start": "771920",
    "end": "777560"
  },
  {
    "text": "really important to do this um and then finally govette uh govette is uh it's",
    "start": "777560",
    "end": "786000"
  },
  {
    "start": "782000",
    "end": "810000"
  },
  {
    "text": "interesting because it's like a heuristic that helps show um it tells",
    "start": "786000",
    "end": "791279"
  },
  {
    "text": "you when you may have used something wrong right so if you have like a Json tag and you you know use it incorrectly or if you have print F and you have",
    "start": "791279",
    "end": "797800"
  },
  {
    "text": "mismatch placeholders like it will tell you those things that the compiler won't already catch and actually the compiler",
    "start": "797800",
    "end": "802839"
  },
  {
    "text": "catches so many things that you know this is just kind of a nice nice add-on",
    "start": "802839",
    "end": "808040"
  },
  {
    "text": "um so I don't know like for me where this kind of all boils down to is it just",
    "start": "808040",
    "end": "813480"
  },
  {
    "start": "810000",
    "end": "840000"
  },
  {
    "text": "feels really productive right the language gets out of the way and For Me Maybe I mean it's just a personal thing",
    "start": "813480",
    "end": "819519"
  },
  {
    "text": "I know there are uh people from media math at this room that would in this room which would disagree with this and",
    "start": "819519",
    "end": "825120"
  },
  {
    "text": "that's totally cool but I like the constraints I don't mind constraints the constraints plus the tools make me feel",
    "start": "825120",
    "end": "831199"
  },
  {
    "text": "more productive um and it lets me focus on the thing that I actually care the most about which is shipping a good",
    "start": "831199",
    "end": "836959"
  },
  {
    "text": "product um and we have right so uh in 2013 we had no go things and in 2015 we",
    "start": "836959",
    "end": "846560"
  },
  {
    "text": "have like infinitely more go things uh so if you wanted to draw this line out",
    "start": "846560",
    "end": "852880"
  },
  {
    "text": "it would have look a lot like a hockey stick and if there are any VC in the room I'm definitely taking checks um",
    "start": "852880",
    "end": "860120"
  },
  {
    "text": "because traction um so how fast is go",
    "start": "860120",
    "end": "866360"
  },
  {
    "start": "864000",
    "end": "890000"
  },
  {
    "text": "actually um this is like my favorite part of this talk because uh I'm going to try to piss",
    "start": "866360",
    "end": "872839"
  },
  {
    "text": "everybody off in the room equally uh I have Cherry Picked in the next four slides a bunch of benchmarks that show",
    "start": "872839",
    "end": "879120"
  },
  {
    "text": "how go is faster than your favorite language actually some of our favorite languages um doesn't really prove",
    "start": "879120",
    "end": "884279"
  },
  {
    "text": "anything other than I can Google things um so yeah um all right so go versus",
    "start": "884279",
    "end": "891800"
  },
  {
    "start": "890000",
    "end": "909000"
  },
  {
    "text": "C++ um it's like about as fast I think you know some here bolded it's faster",
    "start": "891800",
    "end": "897639"
  },
  {
    "text": "than C++ that's cool the rest I think it's like order of magnitude the same uh",
    "start": "897639",
    "end": "902880"
  },
  {
    "text": "yeah awesome all right um oh cool um Ruby yeah we love Ruby",
    "start": "902880",
    "end": "912759"
  },
  {
    "text": "we're a huge huge users of Ruby just destroys Ruby I mean take a look at that 16 versus 799 man I don't even know what",
    "start": "912759",
    "end": "920120"
  },
  {
    "text": "those numbers are but it's a lot different",
    "start": "920120",
    "end": "926120"
  },
  {
    "text": "um go versus Pearl so so we actually we really love Pearl like we love Pearl so",
    "start": "926240",
    "end": "931920"
  },
  {
    "start": "927000",
    "end": "944000"
  },
  {
    "text": "much we go to Pearl conferences we give Pearl talks we're actually going to yapi this year to talk about how we're moving",
    "start": "931920",
    "end": "937040"
  },
  {
    "text": "from Pearl to go so that might be a little weird um but also like substantially faster um okay so I'm at a",
    "start": "937040",
    "end": "943920"
  },
  {
    "text": "Java conference so I have to talk about Java or at least there feels like there's a lot of java here um uh I",
    "start": "943920",
    "end": "950519"
  },
  {
    "start": "944000",
    "end": "968000"
  },
  {
    "text": "really hope that like guiltin and anyone from Oracle is not in the room because don't call me out on this but uh as you",
    "start": "950519",
    "end": "955800"
  },
  {
    "text": "can see go is also order of magnitude as fast or slightly faster than Java awesome",
    "start": "955800",
    "end": "963240"
  },
  {
    "text": "um and uh node yeah no uh this is my favorite",
    "start": "963240",
    "end": "970000"
  },
  {
    "text": "meeting of this Benchmark because uh it is a clear and obvious representation of real work that's done in node uh which",
    "start": "970000",
    "end": "977199"
  },
  {
    "text": "is otherwise known as bubble sort um so",
    "start": "977199",
    "end": "984040"
  },
  {
    "text": "yeah uh just as a side note Ryan do who built node and TJ hallway Chu who built",
    "start": "985440",
    "end": "992319"
  },
  {
    "text": "everything else in node um both switched to go so just same um but seriously",
    "start": "992319",
    "end": "999839"
  },
  {
    "start": "999000",
    "end": "1090000"
  },
  {
    "text": "though um go is actually pretty fast um as I mentioned we have like a 21 23 is",
    "start": "999839",
    "end": "1004880"
  },
  {
    "text": "services in it um here are a few that I kind of",
    "start": "1004880",
    "end": "1011079"
  },
  {
    "text": "cherry-picked for this talk um DCS is the dynamic creative service um it's",
    "start": "1011079",
    "end": "1016240"
  },
  {
    "text": "like this thing that that takes ad requ and automatically generates the creative",
    "start": "1016240",
    "end": "1021440"
  },
  {
    "text": "uh together and we've you know landed on 95% latency under 10 milliseconds on two",
    "start": "1021440",
    "end": "1027360"
  },
  {
    "text": "boxes per data center handling live bitter traffic this is really really",
    "start": "1027360",
    "end": "1032520"
  },
  {
    "text": "good because it's cheap to run um roller skates is this uh it's like a one tiny",
    "start": "1032520",
    "end": "1038600"
  },
  {
    "text": "VM per pop that's handling all production impression metrics on five Dimensions rolled up in three different",
    "start": "1038600",
    "end": "1044520"
  },
  {
    "text": "um uh time buckets I guess super cheap um offo handles all of the traffic for",
    "start": "1044520",
    "end": "1052000"
  },
  {
    "text": "this thing it's authorization service 1 millisecond 95th percentile two boxes per pop just trivial um Plex is actually",
    "start": "1052000",
    "end": "1060919"
  },
  {
    "text": "a it's a it's a it's a multiplexer web request multiplexer uh currently doing a",
    "start": "1060919",
    "end": "1066320"
  },
  {
    "text": "little over 100,000 request inbounds per node um and it's almost completely kernel bound um all with extremely",
    "start": "1066320",
    "end": "1075120"
  },
  {
    "text": "little effort none of these projects took I think like the base took a week two weeks to build",
    "start": "1075120",
    "end": "1082840"
  },
  {
    "text": "um and I think the reason this matters um both from a productivity perspective and a performance perspective um is that",
    "start": "1082840",
    "end": "1090520"
  },
  {
    "start": "1090000",
    "end": "1134000"
  },
  {
    "text": "any response in your distributed system uh across your microservices that's cobbled together from multiple different",
    "start": "1090520",
    "end": "1096000"
  },
  {
    "text": "Services it's only as fast as your slowest link right so um here's a request that took 112 milliseconds um 94",
    "start": "1096000",
    "end": "1104159"
  },
  {
    "text": "milliseconds of that was spent in this one function you got to make sure that your critical path is fast right if it's not whole thing's going to be slow um",
    "start": "1104159",
    "end": "1111200"
  },
  {
    "text": "and this is common right um by the way this tool is called Zipkin if you're not familiar with it it's Twitter's uh",
    "start": "1111200",
    "end": "1116400"
  },
  {
    "text": "distribut tracing framework um if you want to get it um crap now I'm remember I'm forgetting",
    "start": "1116400",
    "end": "1123520"
  },
  {
    "text": "the the name of the tool anyway it's possible to get your go uh uh data into",
    "start": "1123520",
    "end": "1129280"
  },
  {
    "text": "Zipkin as well um all right so we've talked a lot about how go is the fastest thing on earth um how do we get it there",
    "start": "1129280",
    "end": "1137320"
  },
  {
    "text": "pretty simple um um well so the first one is go test and testing B so I talked",
    "start": "1137320",
    "end": "1143360"
  },
  {
    "start": "1140000",
    "end": "1165000"
  },
  {
    "text": "about how go test has uh you know performance testing testing B is that thing it does loop based um iterative",
    "start": "1143360",
    "end": "1150320"
  },
  {
    "text": "performance tests um and it's baked into go tests so you can actually run these performance test as part of your test",
    "start": "1150320",
    "end": "1156039"
  },
  {
    "text": "Suite as part of you know your pre-commit life cycle as part of integration tests as part of whatever",
    "start": "1156039",
    "end": "1161799"
  },
  {
    "text": "stage of testing that you want to introduce it in um here's an example of me running this FIB function",
    "start": "1161799",
    "end": "1169480"
  },
  {
    "text": "function b n times which is part of the testing B and it took 59 Nan prop cool",
    "start": "1169480",
    "end": "1176559"
  },
  {
    "text": "um next awesome tool also part of the tool chain um PPR so thank you Google",
    "start": "1176559",
    "end": "1182840"
  },
  {
    "start": "1179000",
    "end": "1222000"
  },
  {
    "text": "for this uh PPR is a sampling profiler um comes with visualization which you're seeing right now um and also a fair",
    "start": "1182840",
    "end": "1189720"
  },
  {
    "text": "amount of command line tools I've actually spend more time in the command line tools than I have in this pretty graph um also useful though uh it tells",
    "start": "1189720",
    "end": "1195799"
  },
  {
    "text": "you basically how much time is being spent in what part of your code it can also tell you where you're allocating",
    "start": "1195799",
    "end": "1201000"
  },
  {
    "text": "which is important for garbage collection and it's just generally very useful for understanding what your code",
    "start": "1201000",
    "end": "1206840"
  },
  {
    "text": "is actually doing right so uh use this if you want to understand where your hot code paths are or where you're spending",
    "start": "1206840",
    "end": "1212880"
  },
  {
    "text": "most of your time uh user time and uh that way you have to guess less that's",
    "start": "1212880",
    "end": "1219000"
  },
  {
    "text": "cool um go is a garbage collected language um",
    "start": "1219000",
    "end": "1225559"
  },
  {
    "start": "1222000",
    "end": "1287000"
  },
  {
    "text": "it's young right it's not as not as old as Java has lot to learn from java and from the jvm in that sense but it's",
    "start": "1225559",
    "end": "1232200"
  },
  {
    "text": "still garbage collected and the garbage collection isn't quite great yet um so",
    "start": "1232200",
    "end": "1237760"
  },
  {
    "text": "avoid creating garbage if you don't want to uh deal with garbage collection um definitely do this after your code is",
    "start": "1237760",
    "end": "1245640"
  },
  {
    "text": "written right don't do it early otherwise premature optimization that sort of thing but the previous slide",
    "start": "1245640",
    "end": "1251200"
  },
  {
    "text": "prpr it will tell you those allocations it will tell you where the GC is coming from you can definitely use it to tune",
    "start": "1251200",
    "end": "1257200"
  },
  {
    "text": "away some of the unnecessary alloc if there are some um the other great thing is that uh go has a six-month release",
    "start": "1257200",
    "end": "1265559"
  },
  {
    "text": "cycle and they spend a lot of time focusing on performance and Tool chain and garbage collection I believe 1.5 is",
    "start": "1265559",
    "end": "1271520"
  },
  {
    "text": "going to introduce concurrent collection so like the really heavy stop the world collection will be I think a little bit",
    "start": "1271520",
    "end": "1278320"
  },
  {
    "text": "less impactful we yet to actually see that uh played out but you know hopefully it's it's there",
    "start": "1278320",
    "end": "1285880"
  },
  {
    "text": "um okay go Max procs so we talked a little about uh go routines and channels",
    "start": "1285880",
    "end": "1290919"
  },
  {
    "start": "1287000",
    "end": "1344000"
  },
  {
    "text": "and how there are concurrency um Primitives baked in the language but what about parallelism uh goax procs is",
    "start": "1290919",
    "end": "1298360"
  },
  {
    "text": "a setting that basically lets you tune the number of operating system threads your code runs on um so initially you go",
    "start": "1298360",
    "end": "1306760"
  },
  {
    "text": "oh cool set that to 188 or 16 or 32 or how many you know uh physical CPUs your",
    "start": "1306760",
    "end": "1312880"
  },
  {
    "text": "box has course your box has um but in many cases all that does is increases contention um test before you set Don't",
    "start": "1312880",
    "end": "1321320"
  },
  {
    "text": "just run blind um thing that I randomly ran into the other the other day was uh",
    "start": "1321320",
    "end": "1328799"
  },
  {
    "text": "setting go Max procs to one doesn't actually stop the operating system from running across multiple cores that makes",
    "start": "1328799",
    "end": "1335039"
  },
  {
    "text": "sense but I was a little confused why I was paging everything randomly uh it's",
    "start": "1335039",
    "end": "1341840"
  },
  {
    "text": "possible um okay next thing channels like magic so I think I've talked a little about channels go routines I haven't actually showed you guys",
    "start": "1341840",
    "end": "1348120"
  },
  {
    "start": "1344000",
    "end": "1394000"
  },
  {
    "text": "examples this so this is an example of both um this is my main function it's a really dumb dumb function um so Echo is",
    "start": "1348120",
    "end": "1356279"
  },
  {
    "text": "Echo is a function that basically takes a channel listens on the channel whenever it receives a string on the",
    "start": "1356279",
    "end": "1361600"
  },
  {
    "text": "channel Echoes the channel or the string um so over here I'm creating that as a",
    "start": "1361600",
    "end": "1367279"
  },
  {
    "text": "go routine which is effectively saying run this function uh concurrently and then I'm sending on the channel these",
    "start": "1367279",
    "end": "1374120"
  },
  {
    "text": "messages so these messages are just strings hence the Chan string it's the type of the channel",
    "start": "1374120",
    "end": "1379240"
  },
  {
    "text": "um and so I'm sending it waiting a second sending it waiting a second um this is all it is um it's an awesome",
    "start": "1379240",
    "end": "1387720"
  },
  {
    "text": "construct it's really handy um but unfortunately it's not actually magic",
    "start": "1387720",
    "end": "1394360"
  },
  {
    "start": "1394000",
    "end": "1412000"
  },
  {
    "text": "um there's still a mutex lock so just consider that every time you use it uh",
    "start": "1394360",
    "end": "1400600"
  },
  {
    "text": "again if you tune up uh goax procs uh you're just in some cases you might not even realize that you're increasing",
    "start": "1400600",
    "end": "1406919"
  },
  {
    "text": "contention because more things will be contending on that lock um yeah all right um so empty",
    "start": "1406919",
    "end": "1416679"
  },
  {
    "start": "1412000",
    "end": "1447000"
  },
  {
    "text": "interfaces uh so empty interfaces are interfaces without methods which is kind",
    "start": "1416679",
    "end": "1422200"
  },
  {
    "text": "of another way of saying match against all types um any sure um",
    "start": "1422200",
    "end": "1428880"
  },
  {
    "text": "if your function argument specifies an empty interface then it will accept any",
    "start": "1428880",
    "end": "1434679"
  },
  {
    "text": "type and that's at the expense of performance right so uh here here's an example of sum everything of any type",
    "start": "1434679",
    "end": "1442600"
  },
  {
    "text": "here's an example of sum just ins um and because runtime typ type checking is",
    "start": "1442600",
    "end": "1450159"
  },
  {
    "start": "1447000",
    "end": "1462000"
  },
  {
    "text": "slow you get this ridiculous difference here I don't know what is like 60 times as slow um again don't really worry",
    "start": "1450159",
    "end": "1457240"
  },
  {
    "text": "about this until after your code's done uh yeah defer super super convenient so",
    "start": "1457240",
    "end": "1464600"
  },
  {
    "start": "1462000",
    "end": "1494000"
  },
  {
    "text": "this is a keyword that effectively lets you say I'm going to close these file buffers or allocators or you know",
    "start": "1464600",
    "end": "1470399"
  },
  {
    "text": "channels or whatever when I'm done with the function I don't have to worry about doing it manually um you know if I",
    "start": "1470399",
    "end": "1475919"
  },
  {
    "text": "didn't do this I have to put it in all these different places where you know airror handling is done here and maybe at the end of the function so on and so",
    "start": "1475919",
    "end": "1481679"
  },
  {
    "text": "forth I don't have to do that now I can just do it when uh or rather I can let go decide when to do it based on the uh",
    "start": "1481679",
    "end": "1489520"
  },
  {
    "text": "unwinding of the stack uh of course this is also slow because now what I'm doing",
    "start": "1489520",
    "end": "1494720"
  },
  {
    "start": "1494000",
    "end": "1517000"
  },
  {
    "text": "is I'm telling go to keep track of another thing to unwind as part of the stack um so you know I think uh this is",
    "start": "1494720",
    "end": "1501320"
  },
  {
    "text": "telling but maybe in the case of your application this might be more telling 18 megab per second versus 6 megabytes",
    "start": "1501320",
    "end": "1507520"
  },
  {
    "text": "per second of throughput um again just depends on what you're doing um and then",
    "start": "1507520",
    "end": "1514120"
  },
  {
    "text": "finally uh GCC go so uh go is not only an",
    "start": "1514120",
    "end": "1521440"
  },
  {
    "start": "1517000",
    "end": "1574000"
  },
  {
    "text": "implementation of language is also a specification of language so uh they have",
    "start": "1521440",
    "end": "1526720"
  },
  {
    "text": "targeted the compilation of the language also against GCC so you can build go",
    "start": "1526720",
    "end": "1531960"
  },
  {
    "text": "code with GCC um and this is good because it gets you you know support for some of those more powerful optimizations you know 03 and whatever",
    "start": "1531960",
    "end": "1538279"
  },
  {
    "text": "you get out of GCC um could be good for CPU bound workloads you might want to use this um we tried it um we didn't get",
    "start": "1538279",
    "end": "1547559"
  },
  {
    "text": "a a lot out of it and we actually also wasted a fair amount of time trying to figure out why so uh I don't know might",
    "start": "1547559",
    "end": "1554120"
  },
  {
    "text": "be good for you I wouldn't run there I would start with the code uh but if",
    "start": "1554120",
    "end": "1559320"
  },
  {
    "text": "you're you know wondering if can I get just that last 1% or two% might be worth",
    "start": "1559320",
    "end": "1565640"
  },
  {
    "text": "trying um okay so I'd be",
    "start": "1565640",
    "end": "1570840"
  },
  {
    "text": "remiss to talk about this without actually talking about some of the things we don't like about go",
    "start": "1570840",
    "end": "1579360"
  },
  {
    "start": "1574000",
    "end": "1844000"
  },
  {
    "text": "um I personally am okay with some of these things but I know that us like media math as a whole some of us",
    "start": "1579360",
    "end": "1586120"
  },
  {
    "text": "struggle with these things and that's totally cool I think you know no language is perfect obviously um so the",
    "start": "1586120",
    "end": "1593919"
  },
  {
    "text": "first first thing that I think rubs a lot of people the wrong way um is it's extremely opinionated",
    "start": "1593919",
    "end": "1601320"
  },
  {
    "text": "um I think the quote that I've read a million times over is like it seems to like ignore completely the last 20 years",
    "start": "1601320",
    "end": "1608440"
  },
  {
    "text": "of computer science okay cool I get it I understand um and specifically the the",
    "start": "1608440",
    "end": "1616120"
  },
  {
    "text": "two really the one that comes up is is the limited type system which is I think just another way of saying no generics",
    "start": "1616120",
    "end": "1622679"
  },
  {
    "text": "um so that's kind of a pain uh yeah we'll just leave it there um",
    "start": "1622679",
    "end": "1631240"
  },
  {
    "text": "also doesn't have exceptions so uh the way that you're the idiomatic way of handling errors um is effectively uh",
    "start": "1631240",
    "end": "1638240"
  },
  {
    "text": "multiple return statements so your return will have like the first or the second whatever the first few uh arguments will be what you actually",
    "start": "1638240",
    "end": "1644559"
  },
  {
    "text": "expect the last one will be the error case uh you can do that and go it's very common um and you have Panic too but I",
    "start": "1644559",
    "end": "1652240"
  },
  {
    "text": "think a lot of people probably prefer exception handling and catching and throwing and so on and so forth um third",
    "start": "1652240",
    "end": "1659480"
  },
  {
    "text": "thing I think that gets people a lot is this notion of idiomatic go",
    "start": "1659480",
    "end": "1668159"
  },
  {
    "text": "um it's basically the idea that all go code should be like articulate yet",
    "start": "1668159",
    "end": "1676080"
  },
  {
    "text": "concise provide precise comment have a simple API and be readable um I",
    "start": "1676080",
    "end": "1682039"
  },
  {
    "text": "know like none of that is controversial in any way um and the standard library",
    "start": "1682039",
    "end": "1688519"
  },
  {
    "text": "is actually a great source of Truth for what is idiomatic go but the problem with this notion that I have is it's",
    "start": "1688519",
    "end": "1694960"
  },
  {
    "text": "very subjective um and so because it's so easy for people to grasp the language",
    "start": "1694960",
    "end": "1700559"
  },
  {
    "text": "and like just go running with it uh it has created some extremely interesting pull request conversation uh in our",
    "start": "1700559",
    "end": "1706399"
  },
  {
    "text": "company where you have like 50 comments of you know existential arguments over whether this is the right way to do",
    "start": "1706399",
    "end": "1712480"
  },
  {
    "text": "things or what's idiomatic or what did the go developers really mean when they said that um and yeah I I struggle with",
    "start": "1712480",
    "end": "1720799"
  },
  {
    "text": "that one because I completely understand why you would want to do it and I also don't know necessar like the best way to",
    "start": "1720799",
    "end": "1726039"
  },
  {
    "text": "lead a new go developer to the answer other than read and practice and look at",
    "start": "1726039",
    "end": "1732480"
  },
  {
    "text": "the Go Source it's not you know super fancy",
    "start": "1732480",
    "end": "1738679"
  },
  {
    "text": "um dependency management so uh go being developed primarily at",
    "start": "1738679",
    "end": "1746480"
  },
  {
    "text": "Google those guys have their own massive dependency management solution and have almost deferred dependency management to",
    "start": "1746480",
    "end": "1753760"
  },
  {
    "text": "the community uh I think I've read maybe four or five comments by Andrew jard and Rob Pike and Co basically saying like",
    "start": "1753760",
    "end": "1760080"
  },
  {
    "text": "that's a community problem you guys can solve for um for yourself um but what that really means is like the import",
    "start": "1760080",
    "end": "1765880"
  },
  {
    "text": "statements I think you guys may have seen in some of the comments uh some of the code examples earlier um you have no",
    "start": "1765880",
    "end": "1771279"
  },
  {
    "text": "way of U saying a package is pinned to this particular commit and that's a pain",
    "start": "1771279",
    "end": "1777640"
  },
  {
    "text": "because um you know in order to pin it to a particular commit you have to ensure that you have that commit in your",
    "start": "1777640",
    "end": "1783880"
  },
  {
    "text": "local uh go path uh which is just another way of saying vendoring is the best way to do things and if that feels",
    "start": "1783880",
    "end": "1790519"
  },
  {
    "text": "like we've gone back to '90s it probably is because we've gone back to 90s um so I think a very very known issue",
    "start": "1790519",
    "end": "1798600"
  },
  {
    "text": "um and then finally garbage collection uh yeah it is what it is",
    "start": "1798600",
    "end": "1803960"
  },
  {
    "text": "right so if you need more granular control um over your performance over your latency uh maybe don't use go I",
    "start": "1803960",
    "end": "1810880"
  },
  {
    "text": "don't know I don't need access to machine Primitives um we do all this at incredible scale and we you know still",
    "start": "1810880",
    "end": "1816799"
  },
  {
    "text": "seem to be doing okay by just using the mechanisms and methods that I mentioned before um but just something to be aware",
    "start": "1816799",
    "end": "1823200"
  },
  {
    "text": "of again Java is a um gced language as well so I think we probably all feel",
    "start": "1823200",
    "end": "1829080"
  },
  {
    "text": "this pain in some some way or another um I think that's it for me love",
    "start": "1829080",
    "end": "1835000"
  },
  {
    "text": "to take questions hope this was helpful oh and we're hiring",
    "start": "1835000",
    "end": "1841880"
  },
  {
    "text": "[Applause]",
    "start": "1843080",
    "end": "1846519"
  }
]